commit 667490bee7d901b03b4f8af4a0bddd0806643095
Author: Jan Michael Auer <account@jauer.org>
Date:   Tue Jul 31 21:51:42 2018 +0200

    feat: Show register values in event details (#9239)
    
    * feat(minidump): Read register values from minidumps
    
    * feat(ui): Show register values in event details

diff --git a/requirements-base.txt b/requirements-base.txt
index 6a637b0fc1..e72f30f04e 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -62,7 +62,7 @@ sqlparse>=0.1.16,<0.2.0
 statsd>=3.1.0,<3.2.0
 strict-rfc3339>=0.7
 structlog==16.1.0
-symbolic>=5.0.0,<6.0.0
+symbolic>=5.1.0,<6.0.0
 toronado>=0.0.11,<0.1.0
 ua-parser>=0.6.1,<0.8.0
 # for bitbucket client
diff --git a/src/sentry/lang/native/utils.py b/src/sentry/lang/native/utils.py
index 4e21ebd391..1e689429f8 100644
--- a/src/sentry/lang/native/utils.py
+++ b/src/sentry/lang/native/utils.py
@@ -204,6 +204,7 @@ def merge_minidump_event(data, minidump):
                 'function': '<unknown>',  # Required by interface
                 'package': frame.module.name if frame.module else None,
             } for frame in reversed(list(thread.frames()))],
+            'registers': thread.get_frame(0).registers if thread.frame_count else None,
         },
     } for thread in state.threads()]
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index b463c8bc2b..5629f77a14 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -13,6 +13,7 @@ import {defined, objectIsEmpty, isUrl} from 'app/utils';
 
 import ContextLine from 'app/components/events/interfaces/contextLine';
 import FrameVariables from 'app/components/events/interfaces/frameVariables';
+import FrameRegisters from 'app/components/events/interfaces/frameRegisters';
 
 export function trimPackage(pkg) {
   let pieces = pkg.split(/^[a-z]:\\/i.test(pkg) ? '\\' : '/');
@@ -32,6 +33,7 @@ const Frame = createReactClass({
     emptySourceNotation: PropTypes.bool,
     isOnlyFrame: PropTypes.bool,
     timesRepeated: PropTypes.number,
+    registers: PropTypes.objectOf(PropTypes.string.isRequired),
   },
 
   getDefaultProps() {
@@ -66,11 +68,16 @@ const Frame = createReactClass({
     return !objectIsEmpty(this.props.data.vars);
   },
 
+  hasContextRegisters() {
+    return !objectIsEmpty(this.props.registers);
+  },
+
   isExpandable() {
     return (
       (!this.props.isOnlyFrame && this.props.emptySourceNotation) ||
       this.hasContextSource() ||
-      this.hasContextVars()
+      this.hasContextVars() ||
+      this.hasContextRegisters()
     );
   },
 
@@ -235,13 +242,14 @@ const Frame = createReactClass({
 
     let hasContextSource = this.hasContextSource();
     let hasContextVars = this.hasContextVars();
+    let hasContextRegisters = this.hasContextRegisters();
     let expandable = this.isExpandable();
 
     let contextLines = isExpanded
       ? data.context
       : data.context && data.context.filter(l => l[0] === data.lineNo);
 
-    if (hasContextSource || hasContextVars) {
+    if (hasContextSource || hasContextVars || hasContextRegisters) {
       let startLineNo = hasContextSource ? data.context[0][0] : '';
       context = (
         <ol start={startLineNo} className={outerClassName}>
@@ -258,9 +266,12 @@ const Frame = createReactClass({
               );
             })}
 
-          {hasContextVars && (
+          {(hasContextRegisters || hasContextVars) && (
             <ClippedBox clipHeight={100}>
-              <FrameVariables data={data.vars} key="vars" />
+              {hasContextRegisters && (
+                <FrameRegisters data={this.props.registers} key="registers" />
+              )}
+              {hasContextVars && <FrameVariables data={data.vars} key="vars" />}
             </ClippedBox>
           )}
         </ol>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters.jsx
new file mode 100644
index 0000000000..bf73056264
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters.jsx
@@ -0,0 +1,147 @@
+import {Flex, Box} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import Tooltip from 'app/components/tooltip';
+import {t} from 'app/locale';
+import {defined, objectToArray} from 'app/utils';
+
+const REGISTER_VIEWS = [t('Hexadecimal'), t('Numeric')];
+
+export class RegisterValue extends React.Component {
+  static propTypes = {
+    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
+  };
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      view: 0,
+    };
+  }
+
+  toggleView = () => {
+    this.setState(state => ({view: (state.view + 1) % REGISTER_VIEWS.length}));
+  };
+
+  formatValue = value => {
+    try {
+      let parsed = typeof value === 'string' ? parseInt(value, 16) : value;
+      if (isNaN(parsed)) return value;
+
+      switch (this.state.view) {
+        case 1:
+          return `${parsed}`;
+        case 0:
+        default:
+          return `0x${('0000000000000000' + parsed.toString(16)).substr(-16)}`;
+      }
+    } catch (e) {
+      return value;
+    }
+  };
+
+  render() {
+    return (
+      <InlinePre>
+        <FixedWidth>{this.formatValue(this.props.value)}</FixedWidth>
+        <Tooltip title={REGISTER_VIEWS[this.state.view]} onClick={this.toggleView}>
+          <Toggle className="icon-filter" />
+        </Tooltip>
+      </InlinePre>
+    );
+  }
+}
+
+class FrameRegisters extends React.Component {
+  static propTypes = {
+    data: PropTypes.object.isRequired,
+  };
+
+  // make sure that clicking on the registers does not actually do
+  // anything on the containing element.
+  preventToggling = evt => {
+    evt.stopPropagation();
+  };
+
+  render() {
+    let registers = objectToArray(this.props.data).filter(register =>
+      defined(register[1])
+    );
+
+    return (
+      <RegistersWrapper>
+        <RegistersHeading>{t('registers')}</RegistersHeading>
+        <Registers>
+          {registers.map(register => (
+            <Register key={register[0]} onClick={this.preventToggling}>
+              <RegisterName>{register[0]}</RegisterName>{' '}
+              <RegisterValue value={register[1]} />
+            </Register>
+          ))}
+        </Registers>
+      </RegistersWrapper>
+    );
+  }
+}
+
+const RegistersWrapper = styled.div`
+  border-top: 1px solid @trim;
+  padding-top: 10px;
+
+  .traceback .frame .box-clippable:first-child > & {
+    border-top: none;
+    padding-top: 0;
+  }
+`;
+
+const Registers = styled(Flex)`
+  flex-wrap: wrap;
+  margin-left: 125px;
+  padding: 2px 0px;
+`;
+
+const Register = styled(Box)`
+  padding: 4px 5px;
+`;
+
+const RegistersHeading = styled.strong`
+  font-weight: 600;
+  font-size: 13px;
+  width: 125px;
+  max-width: 125px;
+  word-wrap: break-word;
+  padding: 10px 15px 10px 0;
+  line-height: 1.4;
+  float: left;
+`;
+
+const RegisterName = styled.span`
+  display: inline-block;
+  font-size: 13px;
+  font-weight: 600;
+  text-align: right;
+  width: 4em;
+`;
+
+const InlinePre = styled.pre`
+  display: inline;
+`;
+
+const FixedWidth = styled.span`
+  width: 12em;
+  text-align: right;
+`;
+
+const Toggle = styled.span`
+  opacity: 0.33;
+  margin-left: 1ex;
+  cursor: pointer;
+
+  &:hover {
+    opacity: 1;
+  }
+`;
+
+export default FrameRegisters;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
index 0ea87373db..d38b8023e6 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
@@ -107,6 +107,14 @@ const StacktraceContent = createReactClass({
         frames.push(this.renderOmittedFrames(firstFrameOmitted, lastFrameOmitted));
       }
     });
+
+    if (frames.length > 0 && data.registers) {
+      let lastFrame = frames.length - 1;
+      frames[lastFrame] = React.cloneElement(frames[lastFrame], {
+        registers: data.registers
+      });
+    }
+
     if (this.props.newestFirst) {
       frames.reverse();
     }
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 1b5cbfbcf0..9f50fe8e99 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1509,6 +1509,9 @@ div.traceback > ul {
       &:first-of-type {
         margin-top: 0;
       }
+      &:first-child {
+        margin-top: -20px;
+      }
     }
 
     .tag-app {
diff --git a/tests/js/spec/components/events/interfaces/__snapshots__/frame.spec.jsx.snap b/tests/js/spec/components/events/interfaces/__snapshots__/frame.spec.jsx.snap
index a8a62c9562..1e3bb01c81 100644
--- a/tests/js/spec/components/events/interfaces/__snapshots__/frame.spec.jsx.snap
+++ b/tests/js/spec/components/events/interfaces/__snapshots__/frame.spec.jsx.snap
@@ -1,5 +1,40 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
+exports[`Frame renderContext() should render context lines 1`] = `
+Array [
+  <ContextLine
+    isActive={false}
+    key="0"
+    line={
+      Array [
+        211,
+        "    # Mark the crashed thread and add its stacktrace to the exception",
+      ]
+    }
+  />,
+  <ContextLine
+    isActive={false}
+    key="1"
+    line={
+      Array [
+        212,
+        "    crashed_thread = data['threads'][state.requesting_thread]",
+      ]
+    }
+  />,
+  <ContextLine
+    isActive={false}
+    key="2"
+    line={
+      Array [
+        213,
+        "    crashed_thread['crashed'] = True",
+      ]
+    }
+  />,
+]
+`;
+
 exports[`Frame renderOriginalSourceInfo() should render the source map information as a HTML string 1`] = `
 "
     <div>
diff --git a/tests/js/spec/components/events/interfaces/__snapshots__/frameRegisters.spec.jsx.snap b/tests/js/spec/components/events/interfaces/__snapshots__/frameRegisters.spec.jsx.snap
new file mode 100644
index 0000000000..eb1d3b2eb2
--- /dev/null
+++ b/tests/js/spec/components/events/interfaces/__snapshots__/frameRegisters.spec.jsx.snap
@@ -0,0 +1,26 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`FrameRegisters should render registers 1`] = `
+Array [
+  <RegisterValue
+    value="0x00007fff9300bf70"
+  />,
+  <RegisterValue
+    value="0xffffffffffffffff"
+  />,
+  <RegisterValue
+    value="0x0000000000000000"
+  />,
+]
+`;
+
+exports[`FrameRegisters should skip registers without a value 1`] = `
+Array [
+  <RegisterValue
+    value="0x00007fff9300bf70"
+  />,
+  <RegisterValue
+    value="0x0000000000000000"
+  />,
+]
+`;
diff --git a/tests/js/spec/components/events/interfaces/frame.spec.jsx b/tests/js/spec/components/events/interfaces/frame.spec.jsx
index 4c28723283..78f8350d5c 100644
--- a/tests/js/spec/components/events/interfaces/frame.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/frame.spec.jsx
@@ -25,4 +25,71 @@ describe('Frame', function() {
       expect(frame.find('Tooltip').prop('title')).toMatchSnapshot();
     });
   });
+
+  describe('renderContext()', () => {
+    it('should render context lines', () => {
+      data = {
+        context: [
+          [211, '    # Mark the crashed thread and add its stacktrace to the exception'],
+          [212, "    crashed_thread = data['threads'][state.requesting_thread]"],
+          [213, "    crashed_thread['crashed'] = True"],
+        ],
+      };
+
+      let frame = shallow(<Frame data={data} isExpanded />);
+      expect(frame.find('ContextLine')).toMatchSnapshot();
+    });
+
+    it('should render register values', () => {
+      data = {};
+      let registers = {
+        r10: '0x00007fff9300bf70',
+        r11: '0xffffffffffffffff',
+        r12: '0x0000000000000000',
+        r13: '0x0000000000000000',
+        r14: '0x000000000000000a',
+        r15: '0x0000000000000000',
+        r8: '0x00007fff9300bf78',
+        r9: '0x0000000000000040',
+        rax: '0x00007fff9291e660',
+        rbp: '0x00007ffedfdff7e0',
+        rbx: '0x00007fff9291e660',
+        rcx: '0x0000000000000008',
+        rdi: '0x00007ffedfdff790',
+        rdx: '0x0000020000000303',
+        rip: '0x000000010fe00a59',
+        rsi: '0x0000000000000300',
+        rsp: '0x00007ffedfdff7c0',
+      };
+
+      let frame = shallow(<Frame data={data} registers={registers} isExpanded />);
+      expect(frame.find('FrameRegisters').prop('data')).toEqual(registers);
+    });
+
+    it('should not render empty registers', () => {
+      data = {};
+      let registers = {};
+
+      let frame = shallow(<Frame data={data} registers={registers} isExpanded />);
+      expect(frame.find('FrameRegisters')).toHaveLength(0);
+    });
+
+    it('should render context vars', () => {
+      data = {
+        vars: {
+          origin: null,
+          helper: '<sentry.coreapi.MinidumpApiHelper object at 0x10e157ed0>',
+          self: '<sentry.web.api.MinidumpView object at 0x10e157250>',
+          args: [],
+          request: '<WSGIRequest at 0x4531253712>',
+          content: '[Filtered]',
+          kwargs: {},
+          project_id: "u'3'",
+        },
+      };
+
+      let frame = shallow(<Frame data={data} isExpanded />);
+      expect(frame.find('FrameVariables').prop('data')).toEqual(data.vars);
+    });
+  });
 });
diff --git a/tests/js/spec/components/events/interfaces/frameRegisters.spec.jsx b/tests/js/spec/components/events/interfaces/frameRegisters.spec.jsx
new file mode 100644
index 0000000000..2d98a66e44
--- /dev/null
+++ b/tests/js/spec/components/events/interfaces/frameRegisters.spec.jsx
@@ -0,0 +1,78 @@
+import React from 'react';
+import {shallow, mount} from 'enzyme';
+
+import FrameRegisters, {
+  RegisterValue,
+} from 'app/components/events/interfaces/frameRegisters';
+
+describe('FrameRegisters', () => {
+  it('should render registers', () => {
+    let registers = {
+      r10: '0x00007fff9300bf70',
+      r11: '0xffffffffffffffff',
+      r12: '0x0000000000000000',
+    };
+
+    let wrapper = shallow(<FrameRegisters data={registers} />);
+    expect(wrapper.find('RegisterValue')).toMatchSnapshot();
+  });
+
+  it('should skip registers without a value', () => {
+    let registers = {
+      r10: '0x00007fff9300bf70',
+      r11: null,
+      r12: '0x0000000000000000',
+    };
+
+    let wrapper = shallow(<FrameRegisters data={registers} />);
+    expect(wrapper.find('RegisterValue')).toMatchSnapshot();
+  });
+});
+
+describe('RegisterValue', () => {
+  let wrapper;
+  describe('with string value', () => {
+    beforeEach(() => {
+      wrapper = mount(<RegisterValue value="0x000000000000000a" />);
+    });
+
+    it('should display the hexadecimal value', () => {
+      expect(wrapper.text()).toBe('0x000000000000000a');
+    });
+
+    it('should display the numeric value', () => {
+      wrapper.find('Toggle').simulate('click');
+      expect(wrapper.text()).toBe('10');
+    });
+  });
+
+  describe('with numeric value', () => {
+    beforeEach(() => {
+      wrapper = mount(<RegisterValue value={10} />);
+    });
+
+    it('should display the hexadecimal value', () => {
+      expect(wrapper.text()).toBe('0x000000000000000a');
+    });
+
+    it('should display the numeric value', () => {
+      wrapper.find('Toggle').simulate('click');
+      expect(wrapper.text()).toBe('10');
+    });
+  });
+
+  describe('with unknown value', () => {
+    beforeEach(() => {
+      wrapper = mount(<RegisterValue value="xyz" />);
+    });
+
+    it('should display the hexadecimal value', () => {
+      expect(wrapper.text()).toBe('xyz');
+    });
+
+    it('should display the numeric value', () => {
+      wrapper.find('Toggle').simulate('click');
+      expect(wrapper.text()).toBe('xyz');
+    });
+  });
+});
diff --git a/tests/sentry/lang/native/test_utils.py b/tests/sentry/lang/native/test_utils.py
index 3aea343328..5ea9843afb 100644
--- a/tests/sentry/lang/native/test_utils.py
+++ b/tests/sentry/lang/native/test_utils.py
@@ -285,7 +285,26 @@ def test_minidump_linux():
                         'instruction_addr': '0x401d72',
                         'package': u'/work/linux/build/crash'
                     }
-                ]
+                ],
+                'registers': {
+                    u'r10': u'0x0000000000000131',
+                    u'r11': u'0x00007f5140aca4c0',
+                    u'r12': u'0x0000000000401dc0',
+                    u'r13': u'0x00007fff5ae4ac90',
+                    u'r14': u'0x00007fff5ae4aab0',
+                    u'r15': u'0x0000000000000000',
+                    u'r8': u'0x0000000000000000',
+                    u'r9': u'0x0000000000000000',
+                    u'rax': u'0xffffffffffffffff',
+                    u'rbp': u'0x00007fff5ae4abb0',
+                    u'rbx': u'0x00007fff5ae4aa20',
+                    u'rcx': u'0x00007f5140521b20',
+                    u'rdi': u'0x00007fff5ae4aab0',
+                    u'rdx': u'0x00007f5140efc000',
+                    u'rip': u'0x0000000000401d72',
+                    u'rsi': u'0x0000000000000000',
+                    u'rsp': u'0x00007fff5ae4aa20'
+                }
             },
             'thread_id': 1304,
             'type': u'SIGSEGV',
@@ -367,7 +386,26 @@ def test_minidump_macos():
                         'instruction_addr': '0x109ba8c15',
                         'package': u'/Users/travis/build/getsentry/breakpad-tools/macos/build/./crash'
                     }
-                ]
+                ],
+                'registers': {
+                    u'r10': u'0x000000000000002e',
+                    u'r11': u'0x00007fffe8105171',
+                    u'r12': u'0x0000000000000000',
+                    u'r13': u'0x0000000000000000',
+                    u'r14': u'0x0000000000000000',
+                    u'r15': u'0x0000000000000000',
+                    u'r8': u'0x000000000c0008ff',
+                    u'r9': u'0x0000000000000000',
+                    u'rax': u'0x0000000000000001',
+                    u'rbp': u'0x00007fff56064258',
+                    u'rbx': u'0x00007fff56064120',
+                    u'rcx': u'0x0000000000000000',
+                    u'rdi': u'0x00007fff56064120',
+                    u'rdx': u'0x0000000000000000',
+                    u'rip': u'0x0000000109ba8c15',
+                    u'rsi': u'0x00007fff56064140',
+                    u'rsp': u'0x00007fff56064110'
+                }
             },
             'thread_id': 775,
             'type': u'EXC_BAD_ACCESS / KERN_INVALID_ADDRESS',
@@ -510,7 +548,19 @@ def test_minidump_windows():
                         'instruction_addr': '0x2a2a3d',
                         'package': u'C:\\projects\\breakpad-tools\\windows\\Release\\crash.exe'
                     }
-                ]
+                ],
+                'registers': {
+                    u'eax': u'0x00000000',
+                    u'ebp': u'0x010ff670',
+                    u'ebx': u'0x00fe5000',
+                    u'ecx': u'0x010ff670',
+                    u'edi': u'0x013bfd78',
+                    u'edx': u'0x00000007',
+                    u'eflags': u'0x00010246',
+                    u'eip': u'0x002a2a3d',
+                    u'esi': u'0x759c6314',
+                    u'esp': u'0x010ff644'
+                }
             },
             'thread_id': 1636,
             'type': u'EXCEPTION_ACCESS_VIOLATION_WRITE',
@@ -548,7 +598,19 @@ def test_minidump_windows():
                         'function': '<unknown>',
                         'instruction_addr': '0x771e016c',
                         'package': u'C:\\Windows\\System32\\ntdll.dll'
-                    }]
+                    }],
+                    'registers': {
+                        u'eax': u'0x00000000',
+                        u'ebp': u'0x0159faa4',
+                        u'ebx': u'0x013b0990',
+                        u'ecx': u'0x00000000',
+                        u'edi': u'0x013b4af0',
+                        u'edx': u'0x00000000',
+                        u'eflags': u'0x00000216',
+                        u'eip': u'0x771e016c',
+                        u'esi': u'0x013b4930',
+                        u'esp': u'0x0159f900'
+                    }
                 }
             },
             {
@@ -574,7 +636,19 @@ def test_minidump_windows():
                         'function': '<unknown>',
                         'instruction_addr': '0x771e016c',
                         'package': u'C:\\Windows\\System32\\ntdll.dll'
-                    }]
+                    }],
+                    'registers': {
+                        u'eax': u'0x00000000',
+                        u'ebp': u'0x0169fb98',
+                        u'ebx': u'0x013b0990',
+                        u'ecx': u'0x00000000',
+                        u'edi': u'0x013b7c28',
+                        u'edx': u'0x00000000',
+                        u'eflags': u'0x00000202',
+                        u'eip': u'0x771e016c',
+                        u'esi': u'0x013b7a68',
+                        u'esp': u'0x0169f9f4'
+                    }
                 }
             },
             {
@@ -585,7 +659,19 @@ def test_minidump_windows():
                         'function': '<unknown>',
                         'instruction_addr': '0x771df3dc',
                         'package': u'C:\\Windows\\System32\\ntdll.dll'
-                    }]
+                    }],
+                    'registers': {
+                        u'eax': u'0x00000000',
+                        u'ebp': u'0x0179f2b8',
+                        u'ebx': u'0x017b1aa0',
+                        u'ecx': u'0x00000000',
+                        u'edi': u'0x017b1a90',
+                        u'edx': u'0x00000000',
+                        u'eflags': u'0x00000206',
+                        u'eip': u'0x771df3dc',
+                        u'esi': u'0x000002cc',
+                        u'esp': u'0x0179f2ac'
+                    }
                 }
             }
         ],
