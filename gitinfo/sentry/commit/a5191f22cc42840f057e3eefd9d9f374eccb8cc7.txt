commit a5191f22cc42840f057e3eefd9d9f374eccb8cc7
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 30 21:37:37 2010 -0700

    Refactor logic for view/url

diff --git a/dblog/manager.py b/dblog/manager.py
index 0f6de4c820..d9540522bd 100644
--- a/dblog/manager.py
+++ b/dblog/manager.py
@@ -40,18 +40,22 @@ class DBLogManager(models.Manager):
         
         URL_MAX_LENGTH = Message._meta.get_field_by_name('url')[0].max_length
         
-        server_name = socket.gethostname()
-        class_name  = defaults.pop('class_name', None)
-        
+        view = defaults.pop('view', None)
+        logger_name = defaults.pop('logger', 'root')
+        url = defaults.pop('url', None)
+
         data = defaults.pop('data', {}) or {}
-        if defaults.get('url'):
-            data['url'] = defaults['url']
-            defaults['url'] = defaults['url'][:URL_MAX_LENGTH]
+        if url:
+            data['url'] = url
+            url = url[:URL_MAX_LENGTH]
+
+        defaults['server_name'] = socket.gethostname()
 
         instance = Message(
-            class_name=class_name,
-            server_name=server_name,
+            view=view,
+            logger=logger_name,
             data=data,
+            url=url,
             **defaults
         )
         instance.checksum = construct_checksum(instance)
@@ -65,10 +69,10 @@ class DBLogManager(models.Manager):
         try:
             instance.save()
             batch, created = GroupedMessage.objects.get_or_create(
-                class_name = class_name,
-                server_name = server_name,
-                checksum = instance.checksum,
-                defaults = defaults
+                view=view,
+                logger=logger_name,
+                checksum=instance.checksum,
+                defaults=defaults
             )
             if not created:
                 GroupedMessage.objects.filter(pk=batch.pk).update(
@@ -88,7 +92,7 @@ class DBLogManager(models.Manager):
         """
         Creates an error log for a `logging` module `record` instance.
         """
-        for k in ('url', 'data'):
+        for k in ('url', 'view', 'data'):
             if k not in kwargs:
                 kwargs[k] = record.__dict__.get(k)
         kwargs.update({
@@ -159,5 +163,5 @@ class DBLogManager(models.Manager):
         )
 
 class GroupedMessageManager(DBLogManager):
-    def get_by_natural_key(self, logger, server_name, checksum):
-        return self.get(logger=logger, server_name=server_name, checksum=checksum)
\ No newline at end of file
+    def get_by_natural_key(self, logger, view, checksum):
+        return self.get(logger=logger, view=view, checksum=checksum)
\ No newline at end of file
diff --git a/dblog/migrations/0001_initial.py b/dblog/migrations/0001_initial.py
new file mode 100644
index 0000000000..d663c75ff2
--- /dev/null
+++ b/dblog/migrations/0001_initial.py
@@ -0,0 +1,98 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Adding model 'GroupedMessage'
+        db.create_table('dblog_groupedmessage', (
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('logger', self.gf('django.db.models.fields.CharField')(default='root', max_length=64, db_index=True, blank=True)),
+            ('class_name', self.gf('django.db.models.fields.CharField')(db_index=True, max_length=128, null=True, blank=True)),
+            ('level', self.gf('django.db.models.fields.PositiveIntegerField')(default=40, db_index=True, blank=True)),
+            ('message', self.gf('django.db.models.fields.TextField')()),
+            ('traceback', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
+            ('view', self.gf('django.db.models.fields.CharField')(max_length=255, db_index=True)),
+            ('url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True)),
+            ('server_name', self.gf('django.db.models.fields.CharField')(max_length=128, db_index=True)),
+            ('checksum', self.gf('django.db.models.fields.CharField')(max_length=32, db_index=True)),
+            ('status', self.gf('django.db.models.fields.PositiveIntegerField')(default=0)),
+            ('times_seen', self.gf('django.db.models.fields.PositiveIntegerField')(default=1)),
+            ('last_seen', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now, db_index=True)),
+            ('first_seen', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now, db_index=True)),
+        ))
+        db.send_create_signal('dblog', ['GroupedMessage'])
+
+        # Adding unique constraint on 'GroupedMessage', fields ['logger', 'view', 'checksum']
+        db.create_unique('dblog_groupedmessage', ['logger', 'view', 'checksum'])
+
+        # Adding model 'Message'
+        db.create_table('dblog_message', (
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('logger', self.gf('django.db.models.fields.CharField')(default='root', max_length=64, db_index=True, blank=True)),
+            ('class_name', self.gf('django.db.models.fields.CharField')(db_index=True, max_length=128, null=True, blank=True)),
+            ('level', self.gf('django.db.models.fields.PositiveIntegerField')(default=40, db_index=True, blank=True)),
+            ('message', self.gf('django.db.models.fields.TextField')()),
+            ('traceback', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
+            ('view', self.gf('django.db.models.fields.CharField')(max_length=255, db_index=True)),
+            ('url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True)),
+            ('server_name', self.gf('django.db.models.fields.CharField')(max_length=128, db_index=True)),
+            ('checksum', self.gf('django.db.models.fields.CharField')(max_length=32, db_index=True)),
+            ('datetime', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now, db_index=True)),
+            ('data', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
+        ))
+        db.send_create_signal('dblog', ['Message'])
+
+
+    def backwards(self, orm):
+        
+        # Deleting model 'GroupedMessage'
+        db.delete_table('dblog_groupedmessage')
+
+        # Removing unique constraint on 'GroupedMessage', fields ['logger', 'view', 'checksum']
+        db.delete_unique('dblog_groupedmessage', ['logger', 'view', 'checksum'])
+
+        # Deleting model 'Message'
+        db.delete_table('dblog_message')
+
+
+    models = {
+        'dblog.groupedmessage': {
+            'Meta': {'unique_together': "(('logger', 'view', 'checksum'),)", 'object_name': 'GroupedMessage'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
+        },
+        'dblog.message': {
+            'Meta': {'object_name': 'Message'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '255', 'db_index': 'True'})
+        }
+    }
+
+    complete_apps = ['dblog']
diff --git a/dblog/migrations/0002_auto__del_field_groupedmessage_url__chg_field_groupedmessage_view__chg.py b/dblog/migrations/0002_auto__del_field_groupedmessage_url__chg_field_groupedmessage_view__chg.py
new file mode 100644
index 0000000000..0d0570541a
--- /dev/null
+++ b/dblog/migrations/0002_auto__del_field_groupedmessage_url__chg_field_groupedmessage_view__chg.py
@@ -0,0 +1,67 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Deleting field 'GroupedMessage.url'
+        db.delete_column('dblog_groupedmessage', 'url')
+
+        # Changing field 'GroupedMessage.view'
+        db.alter_column('dblog_groupedmessage', 'view', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True))
+
+        # Changing field 'Message.view'
+        db.alter_column('dblog_message', 'view', self.gf('django.db.models.fields.CharField')(max_length=255, null=True, blank=True))
+
+
+    def backwards(self, orm):
+        
+        # Adding field 'GroupedMessage.url'
+        db.add_column('dblog_groupedmessage', 'url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True, blank=True), keep_default=False)
+
+        # Changing field 'GroupedMessage.view'
+        db.alter_column('dblog_groupedmessage', 'view', self.gf('django.db.models.fields.CharField')(max_length=255))
+
+        # Changing field 'Message.view'
+        db.alter_column('dblog_message', 'view', self.gf('django.db.models.fields.CharField')(max_length=255))
+
+
+    models = {
+        'dblog.groupedmessage': {
+            'Meta': {'unique_together': "(('logger', 'view', 'checksum'),)", 'object_name': 'GroupedMessage'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '255', 'null': 'True', 'blank': 'True'})
+        },
+        'dblog.message': {
+            'Meta': {'object_name': 'Message'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '255', 'null': 'True', 'blank': 'True'})
+        }
+    }
+
+    complete_apps = ['dblog']
diff --git a/dblog/migrations/__init__.py b/dblog/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/dblog/models.py b/dblog/models.py
index 1ac08cfb30..a43a92beb0 100644
--- a/dblog/models.py
+++ b/dblog/models.py
@@ -44,8 +44,7 @@ class MessageBase(Model):
     level           = models.PositiveIntegerField(choices=LOG_LEVELS, default=logging.ERROR, blank=True, db_index=True)
     message         = models.TextField()
     traceback       = models.TextField(blank=True, null=True)
-    view            = models.CharField(max_length=255, db_index=True)
-    url             = models.URLField(verify_exists=False, null=True, blank=True)
+    view            = models.CharField(max_length=255, db_index=True, blank=True, null=True)
     server_name     = models.CharField(max_length=128, db_index=True)
     checksum        = models.CharField(max_length=32, db_index=True)
 
@@ -54,29 +53,11 @@ class MessageBase(Model):
     class Meta:
         abstract = True
 
-    def get_absolute_url(self):
-        return self.url
-    
-    def shortened_url(self):
-        if not self.url:
-            return _('no data')
-        url = self.url
-        if len(url) > 60:
-            url = url[:60] + '...'
-        return url
-    shortened_url.short_description = _('url')
-    shortened_url.admin_order_field = 'url'
-    
     def shortened_traceback(self):
         return '\n'.join(self.traceback.split('\n')[-5:])
     shortened_traceback.short_description = _('traceback')
     shortened_traceback.admin_order_field = 'traceback'
     
-    def full_url(self):
-        return self.data.get('url') or self.url
-    full_url.short_description = _('url')
-    full_url.admin_order_field = 'url'
-    
     def error(self):
         if self.message:
             message = smart_unicode(self.message)
@@ -110,7 +91,7 @@ class GroupedMessage(MessageBase):
         return "(%s) %s: %s" % (self.times_seen, self.class_name, self.error())
 
     def natural_key(self):
-        return (self.logger, self.server_name, self.checksum)
+        return (self.logger, self.view, self.checksum)
 
     @staticmethod
     @transaction.commit_on_success
@@ -179,6 +160,7 @@ class GroupedMessage(MessageBase):
 class Message(MessageBase):
     datetime        = models.DateTimeField(default=datetime.datetime.now, db_index=True)
     data            = JSONDictField(blank=True, null=True)
+    url             = models.URLField(verify_exists=False, null=True, blank=True)
 
     class Meta:
         verbose_name = _('message')
@@ -192,5 +174,22 @@ class Message(MessageBase):
             self.checksum = construct_checksum(self)
         super(Message, self).save(*args, **kwargs)
 
-   
+    def get_absolute_url(self):
+        return self.url
+    
+    def shortened_url(self):
+        if not self.url:
+            return _('no data')
+        url = self.url
+        if len(url) > 60:
+            url = url[:60] + '...'
+        return url
+    shortened_url.short_description = _('url')
+    shortened_url.admin_order_field = 'url'
+    
+    def full_url(self):
+        return self.data.get('url') or self.url
+    full_url.short_description = _('url')
+    full_url.admin_order_field = 'url'
+ 
 got_request_exception.connect(GroupedMessage.handle_exception)
\ No newline at end of file
diff --git a/dblog/templates/dblog/group.html b/dblog/templates/dblog/group.html
index 615ff51bde..0622e5afa6 100644
--- a/dblog/templates/dblog/group.html
+++ b/dblog/templates/dblog/group.html
@@ -30,9 +30,9 @@
 
 	<div id="body" class="with-sidebar"> 
 		<ul class="messages">
-			<li class="{% cycle 'row1' 'row2' %} level-{{ message.level }} priority-{{ message.priority }} active">
+			<li class="{% cycle 'row1' 'row2' %} level-{{ message.level }} active">
 				<span class="count">{{ message.times_seen }}</span>
-				<h3>{{ message.view }}</h3>
+				<h3>{% if message.view %}{{ message.view }}{% else %}{{ message.message }}{% endif %}</h3>
 				<p class="message">{{ message.error }}</p>
 				<pre class="traceback">{{ message.shortened_traceback }}</pre>
 			</li>
diff --git a/dblog/templates/dblog/index.html b/dblog/templates/dblog/index.html
index e749654b08..94f48d93d1 100644
--- a/dblog/templates/dblog/index.html
+++ b/dblog/templates/dblog/index.html
@@ -135,24 +135,26 @@
 			
 			/* message details */
 			.server-list, .url-list, .logger-list, .level-list { list-style: none; margin-left: 5px; }
-			.filter-list { margin-left: 0;  }
+			.filter-list { margin-left: 0; text-transform: lowercase; }
 			.filter-list li a { display: block; padding: 5px; text-decoration: none; }
 			.filter-list li a:hover, .filter-list li.active a { background: #e0ebff; }
-			 .filter-list li.active a { font-weight: bold; }
+			.filter-list li.active a { font-weight: bold; }
 
 			/* messages generic */
 			.count { background: #000; -moz-border-radius: 4px; border-radius: 4px; padding: 0 5px; margin-right: 3px; line-height: 19px; color: #fff; display: inline-block; }
 			
 			/* message list */
 			.messages { list-style: none; margin-left: 0; }
-			.messages .count { width: 25px; text-align: center; background: #000; -moz-border-radius: 4px; border-radius: 4px; padding: 0 8px; line-height: 19px; color: #fff; display: inline-block; margin-right: 5px; }
+			.messages .count { width: 25px; text-align: center; background: red; -moz-border-radius: 4px; border-radius: 4px; padding: 0 8px; line-height: 19px; color: #fff; display: inline-block; margin-right: 5px; }
 			.messages h3 { height: 20px; line-height: 20px; display: inline-block; margin: 0; }
+			.messages h3 a { text-decoration: none; }
 			.messages .message {
 				color: #666;
 				margin-top: 8px;
 				margin-left: 50px;
 				font-size: 0.9em;
 			}
+			.messages .tag { display: inline-block; padding: 2px 5px; background: #eee; }
 			.messages .traceback { display: none; }
 			.messages li { padding: 8px; }
 			.messages .row1 { background: #f9f9f9; }
@@ -225,9 +227,9 @@
 				{% for message, priority in message_list.objects|with_priority %}
 					<li class="{% cycle 'row1' 'row2' %} level-{{ message.level }} priority-{{ priority }}" onclick="window.location.href='{% url dblog-group message.pk %}'">
 						<span class="count">{{ message.times_seen }}</span>
-						<h3>{{ message.view }}</h3>
+						<h3><a href="{% url dblog-group message.pk %}">{% if message.view %}{{ message.view }}{% else %}{{ message.message }}{% endif %}</a></h3>
 						<span class="last_seen">{{ message.last_seen|timesince }} ago</span>
-						<p class="message">{{ message.error }}</p>
+						<p class="message"><span class="tag tag-level">{{ message.get_level_display }}</span> <span class="tag tag-server">{{ message.server_name }}</span> {{ message.error }}</p>
 						<pre class="traceback">{{ message.shortened_traceback }}</pre>
 					</li>
 				{% endfor %}
diff --git a/dblog/tests/fixtures/feeds.json b/dblog/tests/fixtures/feeds.json
index 76e0b88bd0..94c7a2ed7c 100644
--- a/dblog/tests/fixtures/feeds.json
+++ b/dblog/tests/fixtures/feeds.json
@@ -7,9 +7,9 @@
       "level": 40, 
       "class_name": "TypeError", 
       "checksum": "0edb43b51699ce88eed908b340feb17f", 
+      "view": "dblog.admin.create",
       "times_seen": 1, 
       "traceback": "Traceback (most recent call last):\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/core/handlers/base.py\", line 100, in get_response\n    response = callback(request, *callback_args, **callback_kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/options.py\", line 239, in wrapper\n    return self.admin_site.admin_view(view)(*args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 76, in _wrapped_view\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/views/decorators/cache.py\", line 69, in _wrapped_view_func\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/sites.py\", line 190, in inner\n    return view(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 21, in _wrapper\n    return decorator(bound_func)(*args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 76, in _wrapped_view\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 17, in bound_func\n    return func(self, *args2, **kwargs2)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/options.py\", line 968, in changelist_view\n    self.date_hierarchy, self.search_fields, self.list_select_related, self.list_per_page, self.list_editable, self)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/views/main.py\", line 66, in __init__\n    self.filter_specs, self.has_filters = self.get_filters(request)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/views/main.py\", line 74, in get_filters\n    spec = FilterSpec.create(f, request, self.params, self.model, self.model_admin)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/filterspecs.py\", line 29, in create\n    return factory(f, request, params, model, model_admin)\n\n  File \"/Users/dcramer/Development/django-db-log/dblog/admin.py\", line 59, in __init__\n    raise\n\nTypeError: exceptions must be old-style classes or derived from BaseException, not NoneType\n", 
-      "url": "http://localhost:8000/admin/dblog/groupedmessage/", 
       "logger": "root", 
       "message": "exceptions must be old-style classes or derived from BaseException, not NoneType", 
       "last_seen": "2010-07-22 20:14:18"
@@ -23,6 +23,7 @@
       "level": 40, 
       "class_name": "TypeError", 
       "checksum": "0edb43b51699ce88eed908b340feb17f", 
+      "view": "dblog.admin.create",
       "traceback": "Traceback (most recent call last):\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/core/handlers/base.py\", line 100, in get_response\n    response = callback(request, *callback_args, **callback_kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/options.py\", line 239, in wrapper\n    return self.admin_site.admin_view(view)(*args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 76, in _wrapped_view\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/views/decorators/cache.py\", line 69, in _wrapped_view_func\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/sites.py\", line 190, in inner\n    return view(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 21, in _wrapper\n    return decorator(bound_func)(*args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 76, in _wrapped_view\n    response = view_func(request, *args, **kwargs)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/utils/decorators.py\", line 17, in bound_func\n    return func(self, *args2, **kwargs2)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/options.py\", line 968, in changelist_view\n    self.date_hierarchy, self.search_fields, self.list_select_related, self.list_per_page, self.list_editable, self)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/views/main.py\", line 66, in __init__\n    self.filter_specs, self.has_filters = self.get_filters(request)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/views/main.py\", line 74, in get_filters\n    spec = FilterSpec.create(f, request, self.params, self.model, self.model_admin)\n\n  File \"/Users/dcramer/.virtualenvs/project/lib/python2.6/site-packages/django/contrib/admin/filterspecs.py\", line 29, in create\n    return factory(f, request, params, model, model_admin)\n\n  File \"/Users/dcramer/Development/django-db-log/dblog/admin.py\", line 59, in __init__\n    raise\n\nTypeError: exceptions must be old-style classes or derived from BaseException, not NoneType\n", 
       "datetime": "2010-07-22 20:14:18", 
       "url": "http://localhost:8000/admin/dblog/groupedmessage/", 
