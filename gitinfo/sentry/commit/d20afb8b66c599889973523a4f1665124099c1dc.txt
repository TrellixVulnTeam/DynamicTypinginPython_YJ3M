commit d20afb8b66c599889973523a4f1665124099c1dc
Author: David Cramer <dcramer@gmail.com>
Date:   Wed May 12 13:02:21 2010 -0700

    Added support for url on logging handlers. Added embedded traceback viewing for singular errors. Changed all fields to be read-only in admin panels. Cleaned up exception handling.

diff --git a/djangodblog/__init__.py b/djangodblog/__init__.py
index d60854a22e..7123fa7e78 100644
--- a/djangodblog/__init__.py
+++ b/djangodblog/__init__.py
@@ -1 +1 @@
-__version__ = (1, 6, 0)
\ No newline at end of file
+__version__ = (1, 7, 0)
\ No newline at end of file
diff --git a/djangodblog/admin.py b/djangodblog/admin.py
index 23305dd57d..a499c120b9 100644
--- a/djangodblog/admin.py
+++ b/djangodblog/admin.py
@@ -1,6 +1,16 @@
 from django.contrib import admin
+from django.http import HttpResponse
+from django.contrib.admin.util import unquote
 
 from djangodblog.models import ErrorBatch, Error
+from djangodblog.helpers import ImprovedExceptionReporter
+
+import base64
+try:
+    import cPickle as pickle
+except ImportError:
+    import pickle
+
 
 class ErrorBatchAdmin(admin.ModelAdmin):
     list_display    = ('shortened_url', 'logger', 'server_name', 'times_seen', 'last_seen')
@@ -8,7 +18,8 @@ class ErrorBatchAdmin(admin.ModelAdmin):
     list_filter     = ('logger', 'server_name', 'status', 'last_seen', 'class_name')
     ordering        = ('-last_seen',)
     actions         = ('resolve_errorbatch',)
-
+    readonly_fields = ('url', 'logger', 'server_name', 'class_name', 'level', 'message', 'traceback', 'times_seen', 'first_seen', 'last_seen')
+    
     def resolve_errorbatch(self, request, queryset):
         rows_updated = queryset.update(status=1)
         
@@ -21,9 +32,30 @@ class ErrorBatchAdmin(admin.ModelAdmin):
     resolve_errorbatch.short_description = 'Resolve selected error summaries'
 
 class ErrorAdmin(admin.ModelAdmin):
-    list_display    = ('logger', 'class_name', 'message', 'datetime', 'url', 'server_name')
+    list_display    = ('shortened_url', 'logger', 'server_name', 'datetime')
+    list_display_links = ('shortened_url',)
     list_filter     = ('logger', 'class_name', 'datetime', 'server_name')
     ordering        = ('-datetime',)
+    readonly_fields = ('url', 'logger', 'server_name', 'class_name', 'level', 'message', 'traceback', 'datetime', 'data')
+
+    def change_view(self, request, object_id, extra_context={}):
+        obj = self.get_object(request, unquote(object_id))
+        
+        if 'exc' in obj.data:
+            """
+            Create a technical server error response. The last three arguments are
+            the values returned from sys.exc_info() and friends.
+            """
+            module, args, frames = pickle.loads(base64.b64decode(obj.data['exc']))
+            
+            exc_type = __import__(module + '.' + obj.class_name, {}, {}, obj.class_name)
+            exc_value = exc_type(obj.message)
+            exc_value.args = args
+            
+            reporter = ImprovedExceptionReporter(request, exc_type, exc_value, frames)
+            html = reporter.get_traceback_html()
+            return HttpResponse(html, mimetype='text/html')
+        return super(ErrorAdmin, self).change_view(request, object_id, extra_context)
 
 admin.site.register(ErrorBatch, ErrorBatchAdmin)
 admin.site.register(Error, ErrorAdmin)
diff --git a/djangodblog/helpers.py b/djangodblog/helpers.py
new file mode 100644
index 0000000000..6b1ca1ef09
--- /dev/null
+++ b/djangodblog/helpers.py
@@ -0,0 +1,9 @@
+from django.views.debug import ExceptionReporter
+
+class ImprovedExceptionReporter(ExceptionReporter):
+    def __init__(self, request, exc_type, exc_value, frames):
+        super(ImprovedExceptionReporter, self).__init__(request, exc_type, exc_value, None)
+        self.frames = frames
+
+    def get_traceback_frames(self):
+        return self.frames
\ No newline at end of file
diff --git a/djangodblog/manager.py b/djangodblog/manager.py
index b36dfe6616..fac45711cf 100644
--- a/djangodblog/manager.py
+++ b/djangodblog/manager.py
@@ -1,12 +1,18 @@
 # Multi-db support based on http://www.eflorenzano.com/blog/post/easy-multi-database-support-django/
 # TODO: is there a way to use the traceback module based on an exception variable?
 
-import traceback
+import traceback as traceback_mod
 import logging
 import socket
 import warnings
 import datetime
 import django
+import base64
+import sys
+try:
+    import cPickle as pickle
+except ImportError:
+    import pickle
 
 from django.conf import settings
 from django.db import models
@@ -15,11 +21,14 @@ from django.db.models import sql
 from django.utils.hashcompat import md5_constructor
 from django.utils.encoding import smart_unicode
 from django.db.models.query import QuerySet
+from django.views.debug import ExceptionReporter
 
 DBLOG_DATABASE_USING = getattr(settings, 'DBLOG_DATABASE_USING', None)
 
 assert not DBLOG_DATABASE_USING or django.VERSION >= (1, 2), 'The `DBLOG_DATABASE_USING` setting requires Django >= 1.2'
 
+logger = logging.getLogger('dblog')
+
 class DBLogManager(models.Manager):
     use_for_related_fields = True
 
@@ -55,21 +64,14 @@ class DBLogManager(models.Manager):
                 defaults = defaults
             )
             if not created:
-                # This creates a race condition:
-                #
-                # batch.times_seen += 1
-                # batch.status = 0
-                # batch.last_seen = datetime.datetime.now()
-                # batch.save()
-                #
-                # So instead we use the update method
                 ErrorBatch.objects.filter(pk=batch.pk).update(
                     times_seen=models.F('times_seen') + 1,
                     status=0,
                     last_seen=datetime.datetime.now(),
                 )
-        except Exception, exc:
-            warnings.warn(smart_unicode(exc))
+        except Exception:
+            exc_info = sys.exc_info()
+            logger.exception(exc_info[1], exc_info=exc_info)
         else:
             return instance
     
@@ -77,6 +79,9 @@ class DBLogManager(models.Manager):
         """
         Creates an error log for a `logging` module `record` instance.
         """
+        for k in ('url',):
+            if k not in kwargs:
+                kwargs[k] = record.__dict__.get(k)
         return self._create(
             logger=record.name,
             level=record.levelno,
@@ -87,20 +92,40 @@ class DBLogManager(models.Manager):
 
     def create_from_text(self, message, **kwargs):
         """
-        Creates an error log for from `type` and `message`.
+        Creates an error log for from ``type`` and ``message``.
         """
         return self._create(
             message=message,
             **kwargs
         )
-    
-    def create_from_exception(self, exception, **kwargs):
+
+    def create_from_exception(self, exception=None, traceback=None, **kwargs):
         """
-        Creates an error log from an `exception` instance.
+        Creates an error log from an exception.
         """
+        if not exception:
+            exc_type, exc_value, traceback = sys.exc_info()
+        elif not traceback:
+            warnings.warn('Using just the ``exception`` argument is deprecated, send ``traceback`` in addition.', DeprecationWarning)
+            exc_type, exc_value, traceback = sys.exc_info()
+        else:
+            exc_type = exception.__class__
+            exc_value = exception
+
+        reporter = ExceptionReporter(None, exc_type, exc_value, traceback)
+        frames = reporter.get_traceback_frames()
+        for f in frames:
+            for k, v in f.iteritems():
+                f[k] = unicode(v)
+
+        data = kwargs.get('data', {})
+        data['exc'] = base64.b64encode(pickle.dumps([exc_type.__class__.__module__, exc_value.args, frames]))
+
+        tb_message = '\n'.join(traceback_mod.format_exception(exc_type, exc_value, traceback))
+
         return self._create(
-            class_name=exception.__class__.__name__,
-            traceback=traceback.format_exc(),
-            message=smart_unicode(exception),
+            class_name=exc_type.__name__,
+            traceback=tb_message,
+            message=smart_unicode(exc_value),
             **kwargs
         )
\ No newline at end of file
diff --git a/djangodblog/middleware.py b/djangodblog/middleware.py
index da3b5d92f8..309c10403c 100644
--- a/djangodblog/middleware.py
+++ b/djangodblog/middleware.py
@@ -3,6 +3,8 @@ from django.http import Http404
 
 from djangodblog.models import Error
 
+import sys
+
 __all__ = ('DBLogMiddleware',)
 
 class DBLogMiddleware(object):
@@ -13,7 +15,7 @@ class DBLogMiddleware(object):
         if getattr(exception, 'skip_dblog', False):
             return
 
-        Error.objects.create_from_exception(exception, url=request.build_absolute_uri(), data=dict(
+        Error.objects.create_from_exception(url=request.build_absolute_uri(), data=dict(
             META=request.META,
             POST=request.POST,
             GET=request.GET,
diff --git a/djangodblog/models.py b/djangodblog/models.py
index 08ba3f1d2d..5f2aada6b0 100644
--- a/djangodblog/models.py
+++ b/djangodblog/models.py
@@ -47,13 +47,15 @@ class ErrorBatch(Model):
 
     class Meta:
         unique_together = (('logger', 'server_name', 'checksum'),)
-        verbose_name_plural = 'Error summaries'
-        verbose_name = 'Error summary'
+        verbose_name_plural = 'Message summaries'
+        verbose_name = 'Message summary'
     
     def __unicode__(self):
         return "(%s) %s: %s" % (self.times_seen, self.class_name, self.error())
     
     def shortened_url(self):
+        if not self.url:
+            return '(No URL)'
         url = self.url
         if len(url) > 60:
             url = url[:60] + '...'
@@ -84,8 +86,29 @@ class Error(Model):
 
     objects         = DBLogManager()
 
+    class Meta:
+        verbose_name = 'Message'
+        verbose_name_plural = 'Messages'
+
     def __unicode__(self):
         return "%s: %s" % (self.class_name, self.message)
 
+    def shortened_url(self):
+        if not self.url:
+            return '(No URL)'
+        url = self.url
+        if len(url) > 60:
+            url = url[:60] + '...'
+        return url
+    shortened_url.short_description = "URL"
+    shortened_url.admin_order_field = 'url'
+
+    def error(self):
+        message = self.message
+        if len(message) > 100:
+            message = message[:97] + '...'
+        return "%s: %s" % (self.class_name, message)
+    error.short_description = 'Error'
+
     def get_absolute_url(self):
         return self.url
\ No newline at end of file
diff --git a/djangodblog/templates/admin/djangodblog/error/change_list.html b/djangodblog/templates/admin/djangodblog/error/change_list.html
new file mode 100644
index 0000000000..40c15f9bff
--- /dev/null
+++ b/djangodblog/templates/admin/djangodblog/error/change_list.html
@@ -0,0 +1 @@
+{% extends "admin/djangodblog/errorbatch/change_list.html" %}
diff --git a/djangodblog/tests.py b/djangodblog/tests.py
index dc152a83ce..e8c9ed8e4b 100644
--- a/djangodblog/tests.py
+++ b/djangodblog/tests.py
@@ -98,6 +98,13 @@ class DBLogTestCase(TestCase):
         self.assertEquals(last.level, logging.INFO)
         self.assertEquals(last.message, 'This is a test info')
         
+        logger.info('This is a test info with a url', extra=dict(url='http://example.com'))
+        cur = (Error.objects.count(), ErrorBatch.objects.count())
+        self.assertEquals(cur, (5, 4), 'Assumed logs failed to save. %s' % (cur,))
+        last = Error.objects.all().order_by('-id')[0:1].get()
+        self.assertEquals(last.url, 'http://example.com')
+        
+        
         logger = logging.getLogger()
         logger.removeHandler(dblog_handler)
     
diff --git a/setup.py b/setup.py
index f58a7b25a5..bcc5f6af4d 100644
--- a/setup.py
+++ b/setup.py
@@ -11,7 +11,7 @@ setup(
     author_email='dcramer@gmail.com',
     url='http://github.com/dcramer/django-db-log',
     install_requires=[
-        'Django>=1.0'
+        # 'Django>=1.0'
     ],
     description = 'Exception Logging to a Database in Django',
     packages=find_packages(),
