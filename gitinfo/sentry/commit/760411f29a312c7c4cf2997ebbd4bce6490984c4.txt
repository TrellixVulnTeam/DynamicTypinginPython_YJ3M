commit 760411f29a312c7c4cf2997ebbd4bce6490984c4
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 15 14:13:52 2015 -0700

    Add response code and timing middlewares

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 166231021c..406c802dbb 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -194,6 +194,8 @@ MIDDLEWARE_CLASSES = (
     'sentry.middleware.env.SentryEnvMiddleware',
     'sentry.middleware.proxy.SetRemoteAddrFromForwardedFor',
     'sentry.middleware.debug.NoIfModifiedSinceMiddleware',
+    'sentry.middleware.stats.RequestTimingMiddleware',
+    'sentry.middleware.stats.ResponseCodeMiddleware',
     'django.middleware.common.CommonMiddleware',
     'django.contrib.sessions.middleware.SessionMiddleware',
     'django.middleware.csrf.CsrfViewMiddleware',
diff --git a/src/sentry/middleware/stats.py b/src/sentry/middleware/stats.py
new file mode 100644
index 0000000000..45a0293b94
--- /dev/null
+++ b/src/sentry/middleware/stats.py
@@ -0,0 +1,65 @@
+from __future__ import absolute_import
+
+import inspect
+import time
+
+from django.http import Http404
+
+from sentry.utils import metrics
+
+
+class ResponseCodeMiddleware(object):
+    def process_response(self, request, response):
+        metrics.incr('response.%s' % response.status_code)
+        return response
+
+    def process_exception(self, request, exception):
+        if not isinstance(exception, Http404):
+            metrics.incr('response.500')
+
+
+class RequestTimingMiddleware(object):
+    allowed_methods = ('POST', 'GET')
+    allowed_paths = (
+        'sentry.web.api.StoreView',
+        'sentry.api.endpoints',
+    )
+
+    def process_view(self, request, view_func, view_args, view_kwargs):
+        if request.method not in self.allowed_methods:
+            return
+
+        view = view_func
+        if not inspect.isfunction(view_func):
+            view = view.__class__
+
+        try:
+            path = '%s.%s' % (view.__module__, view.__name__)
+        except AttributeError:
+            return
+
+        if not path.startswith(self.allowed_paths):
+            return
+
+        request._view_path = path
+        request._start_time = time.time()
+
+    def process_response(self, request, response):
+        self._record_time(request, response.status_code)
+        return response
+
+    def process_exception(self, request, exception):
+        self._record_time(request, 500)
+
+    def _record_time(self, request, status_code):
+        if not hasattr(request, '_view_path'):
+            return
+        metrics.incr('view.{path}.{status_code}'.format(
+            path=request._view_path, status_code=status_code), 1)
+
+        if not hasattr(request, '_start_time'):
+            return
+        ms = int((time.time() - request._start_time) * 1000)
+        metrics.timing('view.{path}.{method}'.format(
+            path=request._view_path, method=request.method), ms)
+        metrics.timing('view', ms)
