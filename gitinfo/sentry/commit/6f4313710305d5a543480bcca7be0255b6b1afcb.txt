commit 6f4313710305d5a543480bcca7be0255b6b1afcb
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jun 4 18:09:28 2010 -0700

    Added THRASHING settings to avoid piling up errors. Fixed a couple issues with data not being a dict

diff --git a/djangodblog/manager.py b/djangodblog/manager.py
index da177cab73..18185a8718 100644
--- a/djangodblog/manager.py
+++ b/djangodblog/manager.py
@@ -14,6 +14,7 @@ try:
 except ImportError:
     import pickle
 
+from django.core.cache import cache
 from django.db import models
 from django.db.models import sql
 from django.db.models.query import QuerySet
@@ -21,6 +22,7 @@ from django.utils.encoding import smart_unicode
 from django.views.debug import ExceptionReporter
 
 from djangodblog import settings
+from djangodblog.helpers import construct_checksum
 
 assert not settings.DATABASE_USING or django.VERSION >= (1, 2), 'The `DBLOG_DATABASE_USING` setting requires Django >= 1.2'
 
@@ -43,18 +45,26 @@ class DBLogManager(models.Manager):
         server_name = socket.gethostname()
         class_name  = defaults.pop('class_name', None)
         
-        data = defaults.pop('data', {})
+        data = defaults.pop('data', {}) or {}
         if defaults.get('url'):
             data['url'] = defaults['url']
             defaults['url'] = defaults['url'][:URL_MAX_LENGTH]
 
+        instance = Error(
+            class_name=class_name,
+            server_name=server_name,
+            data=data,
+            **defaults
+        )
+        instance.checksum = construct_checksum(instance)
+        
+        cache_key = 'djangodblog:%s:%s' % (instance.class_name, instance.checksum)
+        added = cache.add(cache_key, 1, settings.THRASHING_TIMEOUT)
+        if not added and cache.incr(cache_key) > settings.THRASHING_LIMIT:
+            return
+
         try:
-            instance = Error.objects.create(
-                class_name=class_name,
-                server_name=server_name,
-                data=data,
-                **defaults
-            )
+            instance.save()
             batch, created = ErrorBatch.objects.get_or_create(
                 class_name = class_name,
                 server_name = server_name,
@@ -132,7 +142,7 @@ class DBLogManager(models.Manager):
         reporter = ExceptionReporter(None, exc_type, exc_value, traceback)
         frames = reporter.get_traceback_frames()
 
-        data = kwargs.pop('data', {})
+        data = kwargs.pop('data', {}) or {}
         data['exc'] = base64.b64encode(pickle.dumps(map(to_unicode, [exc_type.__class__.__module__, exc_value.args, frames])).encode('zlib'))
 
         tb_message = '\n'.join(traceback_mod.format_exception(exc_type, exc_value, traceback))
diff --git a/djangodblog/middleware.py b/djangodblog/middleware.py
index 03090a769a..d4fa8254f0 100644
--- a/djangodblog/middleware.py
+++ b/djangodblog/middleware.py
@@ -1,3 +1,4 @@
+from django.core.cache import cache
 from django.conf import settings as dj_settings
 from django.db import transaction
 from django.http import Http404
diff --git a/djangodblog/settings.py b/djangodblog/settings.py
index 176b98c6dc..3f766c6005 100644
--- a/djangodblog/settings.py
+++ b/djangodblog/settings.py
@@ -6,4 +6,7 @@ ENHANCED_TRACEBACKS = getattr(settings, 'DBLOG_ENHANCED_TRACEBACKS', True)
 
 DATABASE_USING = getattr(settings, 'DBLOG_DATABASE_USING', None)
 
-USE_LOGGING = getattr(settings, 'DBLOG_USE_LOGGING', False)
\ No newline at end of file
+USE_LOGGING = getattr(settings, 'DBLOG_USE_LOGGING', False)
+
+THRASHING_TIMEOUT = getattr(settings, 'DBLOG_THRASHING_TIMEOUT', 60)
+THRASHING_LIMIT = getattr(settings, 'DBLOG_THRASHING_LIMIT', 10)
diff --git a/djangodblog/tests.py b/djangodblog/tests.py
index bc31fe6dbc..7259051e14 100644
--- a/djangodblog/tests.py
+++ b/djangodblog/tests.py
@@ -56,6 +56,7 @@ class DBLogTestCase(TestCase):
         settings.DATABASE_USING = None
         self._handlers = None
         self._level = None
+        settings.DEBUG = False
     
     def tearDown(self):
         self.tearDownHandler()
@@ -324,4 +325,13 @@ class DBLogTestCase(TestCase):
         cur = (Error.objects.count(), ErrorBatch.objects.count())
         self.assertEquals(cur, (1, 1), 'Assumed logs failed to save. %s' % (cur,))
         
-        settings.USE_LOGGING = False
\ No newline at end of file
+        settings.USE_LOGGING = False
+    
+    def testThrashing(self):
+        Error.objects.all().delete()
+        ErrorBatch.objects.all().delete()
+        
+        for i in range(0, 50):
+            Error.objects.create_from_text('hi')
+        
+        self.assertEquals(Error.objects.count(), settings.THRASHING_LIMIT)
\ No newline at end of file
