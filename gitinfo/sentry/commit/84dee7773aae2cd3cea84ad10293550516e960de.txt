commit 84dee7773aae2cd3cea84ad10293550516e960de
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri May 3 11:29:53 2019 -0700

    feat(ui): Add ActivityItem component (#13016)
    
    A componentized + emotioned version of our activity item

diff --git a/docs-ui/components/activity.stories.js b/docs-ui/components/activity.stories.js
new file mode 100644
index 0000000000..5da939b48f
--- /dev/null
+++ b/docs-ui/components/activity.stories.js
@@ -0,0 +1,108 @@
+import React from 'react';
+
+import {boolean} from '@storybook/addon-knobs';
+import {storiesOf} from '@storybook/react';
+import {withInfo} from '@storybook/addon-info';
+import ActivityAvatar from 'app/components/activity/item/avatar';
+import ActivityBubble from 'app/components/activity/item/bubble';
+import ActivityItem from 'app/components/activity/item';
+
+const user = {
+  username: 'billy@sentry.io',
+  identities: [],
+  id: '1',
+  name: 'billy@sentry.io',
+  dateJoined: '2019-03-09T06:52:42.836Z',
+  avatar: {avatarUuid: null, avatarType: 'letter_avatar'},
+  email: 'billy@sentry.io',
+};
+
+storiesOf('UI|Activity/Item', module)
+  .add(
+    'default ActivityItem',
+    withInfo(
+      'An Activity Item is composed of: an author, header, body, and additionally timestamp and a status.'
+    )(() => (
+      <ActivityItem
+        author={{type: 'user', user}}
+        item={{id: '123'}}
+        date={new Date()}
+        header={<div>{user.email}</div>}
+        hideDate={boolean('Hide Date', false)}
+      >
+        Activity Item
+      </ActivityItem>
+    ))
+  )
+  .add(
+    'with custom Header',
+    withInfo('Activity Item with a custom header')(() => (
+      <ActivityItem
+        author={{type: 'user', user}}
+        item={{id: '123'}}
+        date={new Date()}
+        header={() => (
+          <div style={{backgroundColor: '#ccc'}}>Custom header (no timestamp)</div>
+        )}
+      >
+        Activity Item
+      </ActivityItem>
+    ))
+  )
+  .add(
+    'with footer',
+    withInfo('Activity Item with a footer')(() => (
+      <ActivityItem
+        author={{type: 'user', user}}
+        item={{id: '123'}}
+        date={new Date()}
+        hideDate={boolean('Hide Date', false)}
+        header={<div>{user.email}</div>}
+        footer={<div>Footer</div>}
+      >
+        Activity Item
+      </ActivityItem>
+    ))
+  )
+  .add(
+    'system activity',
+    withInfo('An ActivityItem generated by Sentry')(() => (
+      <ActivityItem
+        author={{type: 'system'}}
+        item={{id: '123'}}
+        date={new Date()}
+        header={<div>Sentry detected something</div>}
+        hideDate={boolean('Hide Date', false)}
+      >
+        Sentry did something
+      </ActivityItem>
+    ))
+  );
+
+storiesOf('UI|Activity/Item/Components', module)
+  .add(
+    'Bubble',
+    withInfo(
+      'Activity bubble with arrow at the top-left. This should probably not be used directly unless creating a new component.'
+    )(() => (
+      <ActivityBubble>
+        <div>Activity Bubble</div>
+        <div>Activity Bubble</div>
+        <div>Activity Bubble</div>
+        <div>Activity Bubble</div>
+        <div>Activity Bubble</div>
+      </ActivityBubble>
+    ))
+  )
+  .add(
+    'Avatar',
+    withInfo('Avatar based on the author type.')(() => (
+      <div>
+        <h3>User</h3>
+        <ActivityAvatar type="user" user={user} size={48} />
+
+        <h3>System</h3>
+        <ActivityAvatar type="system" size={48} />
+      </div>
+    ))
+  );
diff --git a/docs-ui/components/note.stories.js b/docs-ui/components/note.stories.js
new file mode 100644
index 0000000000..df41767c63
--- /dev/null
+++ b/docs-ui/components/note.stories.js
@@ -0,0 +1,35 @@
+import React from 'react';
+import {action} from '@storybook/addon-actions';
+import {storiesOf} from '@storybook/react';
+import {withInfo} from '@storybook/addon-info';
+
+import ConfigStore from 'app/stores/configStore';
+import Note from 'app/components/activity/note';
+
+const user = {
+  username: 'billy@sentry.io',
+  identities: [],
+  id: '1',
+  name: 'billy@sentry.io',
+  dateJoined: '2019-03-09T06:52:42.836Z',
+  avatar: {avatarUuid: null, avatarType: 'letter_avatar'},
+  email: 'billy@sentry.io',
+};
+
+ConfigStore.set('user', {...user, isSuperuser: true, options: {}});
+
+storiesOf('UI|Activity/Note', module).add(
+  'default',
+  withInfo(
+    'A `<Note>` is an `<ActivityItem>` that can be edited with an editor. The editor has an input mode and a preview mode.'
+  )(() => (
+    <Note
+      author={{name: 'Billy'}}
+      item={{id: '123', data: {text: 'hello'}, user, dateCreated: new Date()}}
+      group={{project: {slug: 'sentry'}}}
+      onDelete={action('Deleted item')}
+      sessionUser={{}}
+      memberList={[]}
+    />
+  ))
+);
diff --git a/src/sentry/static/sentry/app/components/activity/author.jsx b/src/sentry/static/sentry/app/components/activity/author.jsx
new file mode 100644
index 0000000000..c389545c49
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/activity/author.jsx
@@ -0,0 +1,8 @@
+import styled from 'react-emotion';
+
+const ActivityAuthor = styled('span')`
+  font-weight: 600;
+  font-size: 13px;
+`;
+
+export default ActivityAuthor;
diff --git a/src/sentry/static/sentry/app/components/activity/item/avatar.jsx b/src/sentry/static/sentry/app/components/activity/item/avatar.jsx
new file mode 100644
index 0000000000..6b029ea572
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/activity/item/avatar.jsx
@@ -0,0 +1,52 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import Avatar from 'app/components/avatar';
+import InlineSvg from 'app/components/inlineSvg';
+import SentryTypes from 'app/sentryTypes';
+
+class ActivityAvatar extends React.Component {
+  static propTypes = {
+    type: PropTypes.oneOf(['system', 'user']),
+    user: SentryTypes.User,
+    size: PropTypes.number,
+  };
+
+  static defaultProps = {
+    size: 38,
+  };
+
+  render() {
+    const {className, type, user, size} = this.props;
+
+    if (user) {
+      return <Avatar user={user} size={size} className={className} />;
+    }
+
+    if (type === 'system') {
+      // Return Sentry avatar
+      return (
+        <SystemAvatar className={className} size={size}>
+          <Logo src="icon-sentry" size={`${Math.round(size * 0.8)}px`} />
+        </SystemAvatar>
+      );
+    }
+
+    return null;
+  }
+}
+
+export default ActivityAvatar;
+
+const SystemAvatar = styled('span')`
+  display: flex;
+  justify-content: center;
+  align-items: center;
+  width: ${p => p.size}px;
+  height: ${p => p.size}px;
+`;
+
+const Logo = styled(InlineSvg)`
+  color: ${p => p.theme.gray5};
+`;
diff --git a/src/sentry/static/sentry/app/components/activity/item/bubble.jsx b/src/sentry/static/sentry/app/components/activity/item/bubble.jsx
new file mode 100644
index 0000000000..4803127af2
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/activity/item/bubble.jsx
@@ -0,0 +1,50 @@
+import PropTypes from 'prop-types';
+import styled from 'react-emotion';
+
+/**
+ * This creates a bordered box that has a left pointing arrow
+ * on the left-side at the top.
+ */
+const ActivityBubble = styled('div')`
+  flex: 1;
+  background: ${p => p.background};
+  border: 1px solid ${p => p.theme.borderLight};
+  border-radius: ${p => p.theme.borderRadius};
+  position: relative;
+
+  &:before {
+    display: block;
+    content: '';
+    width: 0;
+    height: 0;
+    border-top: 7px solid transparent;
+    border-bottom: 7px solid transparent;
+    border-right: 7px solid ${p => p.theme.borderLight};
+    position: absolute;
+    left: -7px;
+    top: 12px;
+  }
+
+  &:after {
+    display: block;
+    content: '';
+    width: 0;
+    height: 0;
+    border-top: 6px solid transparent;
+    border-bottom: 6px solid transparent;
+    border-right: 6px solid ${p => p.background};
+    position: absolute;
+    left: -6px;
+    top: 13px;
+  }
+`;
+
+ActivityBubble.propTypes = {
+  background: PropTypes.string,
+};
+
+ActivityBubble.defaultProps = {
+  background: '#fff',
+};
+
+export default ActivityBubble;
diff --git a/src/sentry/static/sentry/app/components/activity/item/index.jsx b/src/sentry/static/sentry/app/components/activity/item/index.jsx
new file mode 100644
index 0000000000..9052593301
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/activity/item/index.jsx
@@ -0,0 +1,137 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import TimeSince from 'app/components/timeSince';
+import space from 'app/styles/space';
+import textStyles from 'app/styles/text';
+
+import ActivityAvatar from './avatar';
+import ActivityBubble from './bubble';
+
+class ActivityItem extends React.Component {
+  static propTypes = {
+    /**
+     * This is used to uniquely identify the activity item for use as an anchor
+     */
+    id: PropTypes.string,
+
+    /**
+     * If supplied, will show the time since this date
+     */
+    date: PropTypes.string,
+
+    /**
+     * Used to render an avatar for the author. Currently can be a user, otherwise
+     * defaults as a "system" avatar (i.e. sentry)
+     *
+     * `user` is required if `type` is "user"
+     */
+    author: PropTypes.shape({
+      type: ActivityAvatar.propTypes.type,
+      user: ActivityAvatar.propTypes.user,
+    }).isRequired,
+
+    avatarSize: PropTypes.number,
+
+    // Hides date in header
+    hideDate: PropTypes.bool,
+
+    /**
+     * Can be a react node or a render function. render function will not include default wrapper
+     */
+    header: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
+
+    /**
+     * Can be a react node or a render function. render function will not include default wrapper
+     */
+    footer: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
+  };
+
+  render() {
+    const {
+      className,
+      children,
+      avatarSize,
+      id,
+      date,
+      author,
+      hideDate,
+      header,
+      footer,
+    } = this.props;
+
+    const headerRenderFunc = typeof header === 'function';
+    const footerRenderFunc = typeof footer === 'function';
+    const childrenRenderFunc = typeof children === 'function';
+
+    return (
+      <ActivityItemWrapper data-test-id="activity-item" className={className}>
+        {id && <a id={id} />}
+        <StyledActivityAvatar type={author.type} user={author.user} size={avatarSize} />
+
+        <ActivityBubble>
+          {header && headerRenderFunc && header()}
+          {header && !headerRenderFunc && (
+            <ActivityHeader>
+              <ActivityHeaderContent>{header}</ActivityHeaderContent>
+
+              {!hideDate && date && <StyledTimeSince date={date} />}
+            </ActivityHeader>
+          )}
+
+          {children && childrenRenderFunc && children()}
+          {children && !childrenRenderFunc && <ActivityBody>{children}</ActivityBody>}
+
+          {footer && footerRenderFunc && footer()}
+          {footer && !footerRenderFunc && <ActivityFooter>{footer}</ActivityFooter>}
+        </ActivityBubble>
+      </ActivityItemWrapper>
+    );
+  }
+}
+
+const ActivityItemWrapper = styled('div')`
+  display: flex;
+  margin-bottom: ${space(2)};
+`;
+
+const HeaderAndFooter = styled('div')`
+  padding: 6px ${space(2)};
+`;
+
+const ActivityHeader = styled(HeaderAndFooter)`
+  display: flex;
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+  font-size: ${p => p.theme.fontSizeMedium};
+
+  &:last-child {
+    border-bottom: none;
+  }
+`;
+
+const ActivityHeaderContent = styled('div')`
+  flex: 1;
+`;
+
+const ActivityFooter = styled(HeaderAndFooter)`
+  display: flex;
+  border-top: 1px solid ${p => p.theme.borderLight};
+  font-size: ${p => p.theme.fontSizeMedium};
+`;
+
+const ActivityBody = styled('div')`
+  padding: ${space(2)} ${space(2)};
+
+  ${textStyles}
+`;
+
+const StyledActivityAvatar = styled(ActivityAvatar)`
+  margin-right: ${space(1)};
+`;
+
+const StyledTimeSince = styled(TimeSince)`
+  color: ${p => p.theme.gray2};
+`;
+
+export default ActivityItem;
diff --git a/src/sentry/static/sentry/app/components/activity/note.jsx b/src/sentry/static/sentry/app/components/activity/note.jsx
deleted file mode 100644
index 9bc0bdcda3..0000000000
--- a/src/sentry/static/sentry/app/components/activity/note.jsx
+++ /dev/null
@@ -1,55 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import TimeSince from 'app/components/timeSince';
-import ConfigStore from 'app/stores/configStore';
-import LinkWithConfirmation from 'app/components/links/linkWithConfirmation';
-import {t} from 'app/locale';
-import marked from 'app/utils/marked';
-
-class Note extends React.Component {
-  static propTypes = {
-    author: PropTypes.object.isRequired,
-    item: PropTypes.object.isRequired,
-    onEdit: PropTypes.func.isRequired,
-    onDelete: PropTypes.func.isRequired,
-  };
-
-  canEdit = () => {
-    const user = ConfigStore.get('user');
-    return user.isSuperuser || user.id === this.props.item.user.id;
-  };
-
-  render() {
-    const {item, author, onEdit, onDelete} = this.props;
-
-    const noteBody = marked(item.data.text);
-    return (
-      <div>
-        <TimeSince date={item.dateCreated} />
-        <div className="activity-author">
-          {author.name}
-          {this.canEdit() && (
-            <span className="editor-tools">
-              <a onClick={onEdit}>{t('Edit')}</a>
-              <LinkWithConfirmation
-                className="danger"
-                title="Remove"
-                message={t('Are you sure you wish to delete this comment?')}
-                onConfirm={onDelete}
-              >
-                {t('Remove')}
-              </LinkWithConfirmation>
-            </span>
-          )}
-        </div>
-        <div
-          data-test-id="activity-note-body"
-          dangerouslySetInnerHTML={{__html: noteBody}}
-        />
-      </div>
-    );
-  }
-}
-
-export default Note;
diff --git a/src/sentry/static/sentry/app/components/activity/note/body.jsx b/src/sentry/static/sentry/app/components/activity/note/body.jsx
new file mode 100644
index 0000000000..547ae2a6a9
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/activity/note/body.jsx
@@ -0,0 +1,25 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import marked from 'app/utils/marked';
+
+class NoteBody extends React.Component {
+  static propTypes = {
+    item: PropTypes.object.isRequired,
+  };
+
+  render() {
+    const {className, item} = this.props;
+
+    const noteBody = marked(item.data.text);
+    return (
+      <div
+        className={className}
+        data-test-id="activity-note-body"
+        dangerouslySetInnerHTML={{__html: noteBody}}
+      />
+    );
+  }
+}
+
+export default NoteBody;
diff --git a/src/sentry/static/sentry/app/components/activity/note/editorTools.jsx b/src/sentry/static/sentry/app/components/activity/note/editorTools.jsx
new file mode 100644
index 0000000000..b6dbbba94e
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/activity/note/editorTools.jsx
@@ -0,0 +1,7 @@
+import styled from 'react-emotion';
+
+const EditorTools = styled('span')`
+  display: none;
+`;
+
+export default EditorTools;
diff --git a/src/sentry/static/sentry/app/components/activity/note/header.jsx b/src/sentry/static/sentry/app/components/activity/note/header.jsx
new file mode 100644
index 0000000000..ca0fcfd61e
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/activity/note/header.jsx
@@ -0,0 +1,71 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t} from 'app/locale';
+import ActivityAuthor from 'app/components/activity/author';
+import ConfigStore from 'app/stores/configStore';
+import LinkWithConfirmation from 'app/components/links/linkWithConfirmation';
+import SentryTypes from 'app/sentryTypes';
+
+import EditorTools from './editorTools';
+
+class NoteHeader extends React.Component {
+  static propTypes = {
+    author: PropTypes.object.isRequired,
+    user: SentryTypes.User,
+    onEdit: PropTypes.func.isRequired,
+    onDelete: PropTypes.func.isRequired,
+  };
+
+  canEdit = () => {
+    const user = ConfigStore.get('user');
+    return user && (user.isSuperuser || user.id === this.props.user.id);
+  };
+
+  render() {
+    const {author, onEdit, onDelete} = this.props;
+
+    return (
+      <div>
+        <ActivityAuthor>{author.name}</ActivityAuthor>
+        {this.canEdit() && (
+          <EditorTools>
+            <Edit onClick={onEdit}>{t('Edit')}</Edit>
+            <LinkWithConfirmation
+              title={t('Remove')}
+              message={t('Are you sure you wish to delete this comment?')}
+              onConfirm={onDelete}
+            >
+              <Remove>{t('Remove')}</Remove>
+            </LinkWithConfirmation>
+          </EditorTools>
+        )}
+      </div>
+    );
+  }
+}
+
+const EditorAction = styled('a')`
+  padding: 0 7px;
+  color: ${p => p.theme.gray1};
+  font-weight: normal;
+`;
+
+const Edit = styled(EditorAction)`
+  margin-left: 7px;
+
+  &:hover {
+    color: ${p => p.theme.gray2};
+  }
+`;
+
+const Remove = styled(EditorAction)`
+  border-left: 1px solid ${p => p.theme.borderLight};
+
+  &:hover {
+    color: ${p => p.theme.error};
+  }
+`;
+
+export default NoteHeader;
diff --git a/src/sentry/static/sentry/app/components/activity/note/index.jsx b/src/sentry/static/sentry/app/components/activity/note/index.jsx
new file mode 100644
index 0000000000..9aad7a492e
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/activity/note/index.jsx
@@ -0,0 +1,136 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import ActivityItem from 'app/components/activity/item';
+import space from 'app/styles/space';
+
+import EditorTools from './editorTools';
+import NoteBody from './body';
+import NoteHeader from './header';
+import NoteInput from './input';
+
+class Note extends React.Component {
+  static propTypes = {
+    group: PropTypes.object.isRequired,
+    item: PropTypes.object.isRequired,
+    author: PropTypes.object.isRequired,
+    onDelete: PropTypes.func.isRequired,
+    sessionUser: PropTypes.object.isRequired,
+    memberList: PropTypes.array.isRequired,
+  };
+
+  constructor(...args) {
+    super(...args);
+    this.state = {
+      editing: false,
+    };
+  }
+
+  onEdit = () => {
+    this.setState({editing: true});
+  };
+
+  onFinish = () => {
+    this.setState({editing: false});
+  };
+
+  onDelete = () => {
+    this.props.onDelete(this.props.item);
+  };
+
+  render() {
+    const {group, item, author, sessionUser, memberList} = this.props;
+
+    const activityItemProps = {
+      id: `activity-item-${item.id}`,
+      author: {type: 'user', user: item.user},
+      date: item.dateCreated,
+    };
+
+    if (!this.state.editing) {
+      return (
+        <ActivityItemWithEditing
+          {...activityItemProps}
+          header={
+            <NoteHeader
+              author={author}
+              user={item.user}
+              onEdit={this.onEdit}
+              onDelete={this.onDelete}
+            />
+          }
+        >
+          <NoteBody item={item} />
+        </ActivityItemWithEditing>
+      );
+    }
+
+    // When editing, `NoteInput` has its own header, pass render func
+    // to control rendering of bubble body
+    return (
+      <StyledActivityItem {...activityItemProps}>
+        {() => (
+          <NoteInput
+            group={group}
+            item={item}
+            onFinish={this.onFinish}
+            sessionUser={sessionUser}
+            memberList={memberList}
+          />
+        )}
+      </StyledActivityItem>
+    );
+  }
+}
+
+const StyledActivityItem = styled(ActivityItem)`
+  /* this was nested under ".activity-note.activity-bubble" */
+  ul {
+    list-style: disc;
+  }
+
+  h1,
+  h2,
+  h3,
+  h4,
+  p,
+  ul:not(.nav),
+  ol,
+  pre,
+  hr,
+  blockquote {
+    margin-bottom: ${space(2)};
+  }
+
+  ul:not(.nav),
+  ol {
+    padding-left: 20px;
+  }
+
+  p {
+    a {
+      word-wrap: break-word;
+    }
+  }
+
+  blockquote {
+    font-size: 15px;
+    background: ${p => p.theme.offWhite2};
+
+    p:last-child {
+      margin-bottom: 0;
+    }
+  }
+`;
+
+const ActivityItemWithEditing = styled(StyledActivityItem)`
+  &:hover {
+    /* stylelint-disable-next-line no-duplicate-selectors */
+    ${EditorTools} {
+      display: inline-block;
+    }
+  }
+`;
+
+export default Note;
diff --git a/src/sentry/static/sentry/app/components/activity/noteInput.jsx b/src/sentry/static/sentry/app/components/activity/note/input.jsx
similarity index 68%
rename from src/sentry/static/sentry/app/components/activity/noteInput.jsx
rename to src/sentry/static/sentry/app/components/activity/note/input.jsx
index 943f7560fc..8acbc38c3d 100644
--- a/src/sentry/static/sentry/app/components/activity/noteInput.jsx
+++ b/src/sentry/static/sentry/app/components/activity/note/input.jsx
@@ -1,23 +1,24 @@
+import {MentionsInput, Mention} from 'react-mentions';
 import PropTypes from 'prop-types';
 import React from 'react';
+import _ from 'lodash';
 import createReactClass from 'create-react-class';
 import marked from 'marked';
-import classNames from 'classnames';
-
-import {MentionsInput, Mention} from 'react-mentions';
-import _ from 'lodash';
-
-import withApi from 'app/utils/withApi';
-import OrganizationState from 'app/mixins/organizationState';
+import styled, {css} from 'react-emotion';
 
+import {logException} from 'app/utils/logging';
+import {t} from 'app/locale';
+import Button from 'app/components/button';
 import GroupStore from 'app/stores/groupStore';
-import ProjectsStore from 'app/stores/projectsStore';
 import IndicatorStore from 'app/stores/indicatorStore';
-import {logException} from 'app/utils/logging';
-import localStorage from 'app/utils/localStorage';
 import NavTabs from 'app/components/navTabs';
-import {t} from 'app/locale';
+import OrganizationState from 'app/mixins/organizationState';
+import ProjectsStore from 'app/stores/projectsStore';
+import localStorage from 'app/utils/localStorage';
 import mentionsStyle from 'app/../styles/mentions-styles';
+import space from 'app/styles/space';
+import textStyles from 'app/styles/text';
+import withApi from 'app/utils/withApi';
 
 const localStorageKey = 'noteinput:latest';
 
@@ -317,31 +318,34 @@ const NoteInput = createReactClass({
           : (errorJSON.detail && errorJSON.detail.message) ||
             t('Unable to post comment'))) ||
       null;
+
     return (
-      <form
+      <NoteInputForm
+        data-test-id="note-input-form"
         noValidate
-        className={classNames('activity-field', {
-          error,
-          loading,
-        })}
+        error={error}
         onSubmit={this.onSubmit}
       >
-        <div className="activity-notes">
-          <NavTabs>
-            <li className={!preview ? 'active' : ''}>
-              <a onClick={this.toggleEdit}>{updating ? t('Edit') : t('Write')}</a>
-            </li>
-            <li className={preview ? 'active' : ''}>
-              <a onClick={this.togglePreview}>{t('Preview')}</a>
-            </li>
-            <li className="markdown">
-              <span className="icon-markdown" />
-              <span className="supported">{t('Markdown supported')}</span>
-            </li>
-          </NavTabs>
+        <NoteInputNavTabs>
+          <NoteInputNavTab className={!preview ? 'active' : ''}>
+            <NoteInputNavTabLink onClick={this.toggleEdit}>
+              {updating ? t('Edit') : t('Write')}
+            </NoteInputNavTabLink>
+          </NoteInputNavTab>
+          <NoteInputNavTab className={preview ? 'active' : ''}>
+            <NoteInputNavTabLink onClick={this.togglePreview}>
+              {t('Preview')}
+            </NoteInputNavTabLink>
+          </NoteInputNavTab>
+          <MarkdownTab>
+            <MarkdownIcon className="icon-markdown" />
+            <MarkdownSupported>{t('Markdown supported')}</MarkdownSupported>
+          </MarkdownTab>
+        </NoteInputNavTabs>
+
+        <NoteInputBody>
           {preview ? (
-            <div
-              className="note-preview"
+            <NotePreview
               dangerouslySetInnerHTML={{__html: marked(this.cleanMarkdown(value))}}
             />
           ) : (
@@ -375,19 +379,22 @@ const NoteInput = createReactClass({
               />
             </MentionsInput>
           )}
-          <div className="activity-actions">
-            {errorMessage && <small className="error">{errorMessage}</small>}
-            <button className="btn btn-default" type="submit" disabled={loading}>
-              {btnText}
-            </button>
+        </NoteInputBody>
+
+        <Footer>
+          <div>{errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}</div>
+          <div>
             {updating && (
-              <button className="btn btn-danger" onClick={this.onCancel}>
+              <FooterButton priority="danger" type="button" onClick={this.onCancel}>
                 {t('Cancel')}
-              </button>
+              </FooterButton>
             )}
+            <FooterButton error={errorMessage} type="submit" disabled={loading}>
+              {btnText}
+            </FooterButton>
           </div>
-        </div>
-      </form>
+        </Footer>
+      </NoteInputForm>
     );
   },
 });
@@ -395,3 +402,144 @@ const NoteInput = createReactClass({
 export {NoteInput};
 
 export default withApi(NoteInput);
+
+// This styles both the note preview and the note editor input
+const notePreviewCss = css`
+  display: block;
+  width: 100%;
+  min-height: 140px;
+  max-height: 1000px;
+  max-width: 100%;
+  margin: 0;
+  border: 0;
+  padding: ${space(1.5)} ${space(2)} 0;
+  overflow: auto;
+`;
+
+const getNoteInputErrorStyles = p => {
+  if (!p.error) {
+    return '';
+  }
+
+  return `
+  color: ${p.theme.error};
+  margin: -1px;
+  border: 1px solid ${p.theme.error};
+  border-radius: ${p.theme.borderRadius};
+
+    &:before {
+      display: block;
+      content: '';
+      width: 0;
+      height: 0;
+      border-top: 7px solid transparent;
+      border-bottom: 7px solid transparent;
+      border-right: 7px solid ${p.theme.red};
+      position: absolute;
+      left: -7px;
+      top: 12px;
+    }
+
+    &:after {
+      display: block;
+      content: '';
+      width: 0;
+      height: 0;
+      border-top: 6px solid transparent;
+      border-bottom: 6px solid transparent;
+      border-right: 6px solid #fff;
+      position: absolute;
+      left: -5px;
+      top: 12px;
+    }
+  `;
+};
+
+const NoteInputForm = styled('form')`
+  font-size: 15px;
+  line-height: 22px;
+  transition: padding 0.2s ease-in-out;
+
+  ${getNoteInputErrorStyles}
+
+  textarea {
+    ${notePreviewCss};
+  }
+`;
+
+const NoteInputBody = styled('div')`
+  ${textStyles}
+`;
+
+const Footer = styled('div')`
+  display: flex;
+  border-top: 1px solid ${p => p.theme.borderLight};
+  justify-content: space-between;
+  transition: opacity 0.2s ease-in-out;
+  padding-left: ${space(1.5)};
+`;
+
+const FooterButton = styled(Button)`
+  font-size: 13px;
+  margin: -1px -1px -1px;
+  border-radius: 0 0 ${p => p.theme.borderRadius};
+
+  ${p =>
+    p.error &&
+    `
+  &, &:active, &:focus, &:hover {
+  border-bottom-color: ${p.theme.error};
+  border-right-color: ${p.theme.error};
+  }
+  `}
+`;
+
+const ErrorMessage = styled('span')`
+  display: flex;
+  align-items: center;
+  height: 100%;
+  color: ${p => p.theme.error};
+  font-size: 0.9em;
+`;
+
+const NoteInputNavTabs = styled(NavTabs)`
+  padding: ${space(1)} ${space(2)} 0;
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+  margin-bottom: 0;
+`;
+
+const NoteInputNavTab = styled('li')`
+  margin-right: 13px;
+`;
+
+const NoteInputNavTabLink = styled('a')`
+  .nav-tabs > li > & {
+    font-size: 15px;
+    padding-bottom: 5px;
+  }
+`;
+const MarkdownTab = styled(NoteInputNavTab)`
+  .nav-tabs > & {
+    display: flex;
+    align-items: center;
+    margin-right: 0;
+    color: ${p => p.theme.gray3};
+
+    float: right;
+  }
+`;
+
+const MarkdownSupported = styled('span')`
+  margin-left: ${space(0.5)};
+  font-size: 14px;
+`;
+
+const MarkdownIcon = styled('span')`
+  font-size: 20px;
+`;
+
+const NotePreview = styled('div')`
+  ${notePreviewCss};
+
+  padding-bottom: ${space(1)};
+`;
diff --git a/src/sentry/static/sentry/app/components/activity/noteContainer.jsx b/src/sentry/static/sentry/app/components/activity/noteContainer.jsx
deleted file mode 100644
index b76e5c3d9a..0000000000
--- a/src/sentry/static/sentry/app/components/activity/noteContainer.jsx
+++ /dev/null
@@ -1,65 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import Note from 'app/components/activity/note';
-import NoteInput from 'app/components/activity/noteInput';
-
-class NoteContainer extends React.Component {
-  static propTypes = {
-    group: PropTypes.object.isRequired,
-    item: PropTypes.object.isRequired,
-    author: PropTypes.object.isRequired,
-    onDelete: PropTypes.func.isRequired,
-    sessionUser: PropTypes.object.isRequired,
-    memberList: PropTypes.array.isRequired,
-  };
-
-  constructor(...args) {
-    super(...args);
-    this.state = {
-      editing: false,
-    };
-  }
-
-  onEdit = () => {
-    this.setState({editing: true});
-  };
-
-  onFinish = () => {
-    this.setState({editing: false});
-  };
-
-  onDelete = () => {
-    this.props.onDelete(this.props.item);
-  };
-
-  render() {
-    const {group, item, author, sessionUser, memberList} = this.props;
-
-    return (
-      <li className="activity-note">
-        {author.avatar}
-        <div className="activity-bubble">
-          {this.state.editing ? (
-            <NoteInput
-              group={group}
-              item={item}
-              onFinish={this.onFinish}
-              sessionUser={sessionUser}
-              memberList={memberList}
-            />
-          ) : (
-            <Note
-              item={item}
-              author={author}
-              onEdit={this.onEdit}
-              onDelete={this.onDelete}
-            />
-          )}
-        </div>
-      </li>
-    );
-  }
-}
-
-export default NoteContainer;
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index 39e4a6b278..120b285487 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -1,37 +1,37 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import styled from 'react-emotion';
 
 import {analytics} from 'app/utils/analytics';
 import {logException} from 'app/utils/logging';
+import {t} from 'app/locale';
+import BreadcrumbsInterface from 'app/components/events/interfaces/breadcrumbs';
+import CspInterface from 'app/components/events/interfaces/csp';
+import DebugMetaInterface from 'app/components/events/interfaces/debugmeta';
 import EventAttachments from 'app/components/events/eventAttachments';
 import EventCause from 'app/components/events/eventCause';
-import EventContexts from 'app/components/events/contexts';
 import EventContextSummary from 'app/components/events/contextSummary';
+import EventContexts from 'app/components/events/contexts';
 import EventDataSection from 'app/components/events/eventDataSection';
+import EventDevice from 'app/components/events/device';
 import EventErrors from 'app/components/events/errors';
-import EventGroupingInfo from 'app/components/events/groupingInfo';
 import EventExtraData from 'app/components/events/extraData';
+import EventGroupingInfo from 'app/components/events/groupingInfo';
 import EventPackageData from 'app/components/events/packageData';
-import EventTags from 'app/components/events/eventTags';
 import EventSdk from 'app/components/events/sdk';
-import EventDevice from 'app/components/events/device';
+import EventTags from 'app/components/events/eventTags';
 import EventUserFeedback from 'app/components/events/userFeedback';
-import SentryTypes from 'app/sentryTypes';
-import utils from 'app/utils';
-import withApi from 'app/utils/withApi';
-import withOrganization from 'app/utils/withOrganization';
-import {t} from 'app/locale';
-
 import ExceptionInterface from 'app/components/events/interfaces/exception';
+import GenericInterface from 'app/components/events/interfaces/generic';
 import MessageInterface from 'app/components/events/interfaces/message';
 import RequestInterface from 'app/components/events/interfaces/request';
+import SentryTypes from 'app/sentryTypes';
 import StacktraceInterface from 'app/components/events/interfaces/stacktrace';
 import TemplateInterface from 'app/components/events/interfaces/template';
-import CspInterface from 'app/components/events/interfaces/csp';
-import BreadcrumbsInterface from 'app/components/events/interfaces/breadcrumbs';
-import GenericInterface from 'app/components/events/interfaces/generic';
 import ThreadsInterface from 'app/components/events/interfaces/threads';
-import DebugMetaInterface from 'app/components/events/interfaces/debugmeta';
+import utils from 'app/utils';
+import withApi from 'app/utils/withApi';
+import withOrganization from 'app/utils/withOrganization';
 
 export const INTERFACES = {
   exception: ExceptionInterface,
@@ -158,7 +158,7 @@ class EventEntries extends React.Component {
         )}{' '}
         {!isShare && <EventCause event={event} orgId={orgId} projectId={project.slug} />}
         {event.userReport && (
-          <EventUserFeedback
+          <StyledEventUserFeedback
             report={event.userReport}
             orgId={orgId}
             projectId={project.slug}
@@ -211,3 +211,12 @@ class EventEntries extends React.Component {
 }
 
 export default withOrganization(withApi(EventEntries));
+
+const StyledEventUserFeedback = styled(EventUserFeedback)`
+  border-radius: 0;
+  box-shadow: none;
+  padding: 20px 30px 0 40px;
+  border: 0;
+  border-top: 1px solid ${p => p.theme.borderLight};
+  margin: 0;
+`;
diff --git a/src/sentry/static/sentry/app/components/events/userFeedback.jsx b/src/sentry/static/sentry/app/components/events/userFeedback.jsx
index 7349e5db48..70ae9bd523 100644
--- a/src/sentry/static/sentry/app/components/events/userFeedback.jsx
+++ b/src/sentry/static/sentry/app/components/events/userFeedback.jsx
@@ -3,11 +3,11 @@ import React from 'react';
 import styled from 'react-emotion';
 
 import {t} from 'app/locale';
-import Avatar from 'app/components/avatar';
+import ActivityAuthor from 'app/components/activity/author';
+import ActivityItem from 'app/components/activity/item';
 import Clipboard from 'app/components/clipboard';
 import InlineSvg from 'app/components/inlineSvg';
 import Link from 'app/components/links/link';
-import TimeSince from 'app/components/timeSince';
 import space from 'app/styles/space';
 import utils from 'app/utils';
 
@@ -29,42 +29,35 @@ class EventUserFeedback extends React.Component {
   }
 
   render() {
-    const {report} = this.props;
+    const {className, report} = this.props;
 
     return (
-      <div className="user-report">
-        <div className="activity-container">
-          <ul className="activity">
-            <li className="activity-note">
-              <Avatar user={report} size={38} className="avatar" />
-              <div className="activity-bubble">
-                <div>
-                  <TimeSince date={report.dateCreated} />
-                  <div className="activity-author">
-                    {report.name}
-                    <Clipboard value={report.email}>
-                      <Email>
-                        {report.email}
-                        <CopyIcon src="icon-copy" />
-                      </Email>
-                    </Clipboard>
-                    {/* event.eventID might be undefined for legacy accounts */}
-                    {report.event.eventID && (
-                      <small>
-                        <Link to={this.getUrl()}>{t('View event')}</Link>
-                      </small>
-                    )}
-                  </div>
-                  <p
-                    dangerouslySetInnerHTML={{
-                      __html: utils.nl2br(utils.escape(report.comments)),
-                    }}
-                  />
-                </div>
-              </div>
-            </li>
-          </ul>
-        </div>
+      <div className={className}>
+        <ActivityItem
+          date={report.dateCreated}
+          author={{type: 'user', user: report}}
+          header={
+            <div>
+              <ActivityAuthor>{report.name}</ActivityAuthor>
+              <Clipboard value={report.email}>
+                <Email>
+                  {report.email}
+                  <CopyIcon src="icon-copy" />
+                </Email>
+              </Clipboard>
+              {/* event.eventID might be undefined for legacy accounts */}
+              {report.event.eventID && (
+                <ViewEventLink to={this.getUrl()}>{t('View event')}</ViewEventLink>
+              )}
+            </div>
+          }
+        >
+          <p
+            dangerouslySetInnerHTML={{
+              __html: utils.nl2br(utils.escape(report.comments)),
+            }}
+          />
+        </ActivityItem>
       </div>
     );
   }
@@ -79,6 +72,12 @@ const Email = styled('span')`
   margin-left: ${space(1)};
 `;
 
+const ViewEventLink = styled(Link)`
+  font-weight: 300;
+  margin-left: ${space(1)};
+  font-size: 0.9em;
+`;
+
 const CopyIcon = styled(InlineSvg)`
   margin-left: ${space(0.25)};
 `;
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupActivity.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupActivity.jsx
index fba8b59804..0f944efac2 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupActivity.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupActivity.jsx
@@ -8,7 +8,8 @@ import {
   removeIndicator,
 } from 'app/actionCreators/indicator';
 import {t, tct, tn} from 'app/locale';
-import withApi from 'app/utils/withApi';
+import ActivityAuthor from 'app/components/activity/author';
+import ActivityItem from 'app/components/activity/item';
 import Avatar from 'app/components/avatar';
 import CommitLink from 'app/components/commitLink';
 import ConfigStore from 'app/stores/configStore';
@@ -16,13 +17,13 @@ import Duration from 'app/components/duration';
 import ErrorBoundary from 'app/components/errorBoundary';
 import GroupStore from 'app/stores/groupStore';
 import MemberListStore from 'app/stores/memberListStore';
-import NoteContainer from 'app/components/activity/noteContainer';
-import NoteInput from 'app/components/activity/noteInput';
+import Note from 'app/components/activity/note';
+import NoteInput from 'app/components/activity/note/input';
 import PullRequestLink from 'app/components/pullRequestLink';
 import SentryTypes from 'app/sentryTypes';
 import TeamStore from 'app/stores/teamStore';
-import TimeSince from 'app/components/timeSince';
 import Version from 'app/components/version';
+import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
 
 class GroupActivityItem extends React.Component {
@@ -253,10 +254,11 @@ const GroupActivity = createReactClass({
 
       if (item.type === 'note') {
         return (
-          <NoteContainer
+          <Note
             group={group}
             item={item}
-            key={'note' + itemIdx}
+            key={`note-${item.id}`}
+            id={`note-${item.id}`}
             author={{
               name: authorName,
               avatar: <Avatar user={item.user} size={38} />,
@@ -267,40 +269,28 @@ const GroupActivity = createReactClass({
           />
         );
       } else {
-        const avatar = item.user ? (
-          <Avatar user={item.user} size={18} className="activity-avatar" />
-        ) : (
-          <div className="activity-avatar avatar sentry">
-            <span className="icon-sentry-logo" />
-          </div>
-        );
-
         const author = {
           name: authorName,
-          avatar,
         };
 
         return (
-          <li className="activity-item" key={item.id}>
-            <a name={'event_' + item.id} />
-            <TimeSince date={item.dateCreated} />
-            <div className="activity-item-content">
+          <ActivityItem
+            item={item}
+            key={`group-activity-item-${item.id}`}
+            author={{type: item.user ? 'user' : 'system', user: item.user}}
+            date={item.dateCreated}
+            header={
               <ErrorBoundary mini>
                 <GroupActivityItem
                   organization={organization}
-                  author={
-                    <span key="author">
-                      {avatar}
-                      <span className="activity-author">{author.name}</span>
-                    </span>
-                  }
+                  author={<ActivityAuthor>{author.name}</ActivityAuthor>}
                   item={item}
                   orgId={this.props.params.orgId}
                   projectId={group.project.slug}
                 />
               </ErrorBoundary>
-            </div>
-          </li>
+            }
+          />
         );
       }
     });
@@ -308,16 +298,11 @@ const GroupActivity = createReactClass({
     return (
       <div className="row">
         <div className="col-md-9">
-          <div className="activity-container">
-            <ul className="activity">
-              <li className="activity-note" key="activity-note">
-                <Avatar user={me} size={38} />
-                <div className="activity-bubble">
-                  <NoteInput group={group} memberList={memberList} sessionUser={me} />
-                </div>
-              </li>
-              {children}
-            </ul>
+          <div>
+            <ActivityItem author={{type: 'user', user: me}}>
+              {() => <NoteInput group={group} memberList={memberList} sessionUser={me} />}
+            </ActivityItem>
+            {children}
           </div>
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.jsx b/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.jsx
index cd28b545f0..ca06378c59 100644
--- a/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.jsx
+++ b/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.jsx
@@ -1,18 +1,20 @@
 import React from 'react';
+import styled from 'react-emotion';
 
+import {PageContent} from 'app/styles/organization';
 import {t} from 'app/locale';
-import withOrganization from 'app/utils/withOrganization';
-import SentryTypes from 'app/sentryTypes';
-import Feature from 'app/components/acl/feature';
 import Alert from 'app/components/alert';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
+import AsyncView from 'app/views/asyncView';
 import CompactIssue from 'app/components/compactIssue';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
 import EventUserFeedback from 'app/components/events/userFeedback';
-import LoadingIndicator from 'app/components/loadingIndicator';
+import Feature from 'app/components/acl/feature';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
+import LoadingIndicator from 'app/components/loadingIndicator';
 import NoProjectMessage from 'app/components/noProjectMessage';
-import AsyncView from 'app/views/asyncView';
-import {PageContent} from 'app/styles/organization';
+import SentryTypes from 'app/sentryTypes';
+import space from 'app/styles/space';
+import withOrganization from 'app/utils/withOrganization';
 
 import UserFeedbackContainer from './container';
 import {getQuery} from './utils';
@@ -57,7 +59,7 @@ class OrganizationUserFeedback extends AsyncView {
               data={issue}
               eventId={item.event.eventID}
             >
-              <EventUserFeedback report={item} orgId={orgId} issueId={issue.id} />
+              <StyledEventUserFeedback report={item} orgId={orgId} issueId={issue.id} />
             </CompactIssue>
           );
         })}
@@ -130,3 +132,7 @@ class OrganizationUserFeedback extends AsyncView {
 
 export {OrganizationUserFeedback};
 export default withOrganization(OrganizationUserFeedback);
+
+const StyledEventUserFeedback = styled(EventUserFeedback)`
+  margin: ${space(2)} 0 0;
+`;
diff --git a/src/sentry/static/sentry/app/views/userFeedback/projectUserFeedback.jsx b/src/sentry/static/sentry/app/views/userFeedback/projectUserFeedback.jsx
index 7c2dbf0566..11ecca64df 100644
--- a/src/sentry/static/sentry/app/views/userFeedback/projectUserFeedback.jsx
+++ b/src/sentry/static/sentry/app/views/userFeedback/projectUserFeedback.jsx
@@ -5,6 +5,7 @@ import {Link, browserHistory} from 'react-router';
 import DocumentTitle from 'react-document-title';
 import qs from 'query-string';
 import {omit, isEqual} from 'lodash';
+import styled from 'react-emotion';
 
 import SentryTypes from 'app/sentryTypes';
 import withApi from 'app/utils/withApi';
@@ -15,6 +16,7 @@ import CompactIssue from 'app/components/compactIssue';
 import EventUserFeedback from 'app/components/events/userFeedback';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import {t, tct} from 'app/locale';
+import space from 'app/styles/space';
 import withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';
 import withOrganization from 'app/utils/withOrganization';
 
@@ -204,7 +206,7 @@ const ProjectUserFeedback = createReactClass({
 
       return (
         <CompactIssue key={item.id} id={issue.id} data={issue}>
-          <EventUserFeedback
+          <StyledEventUserFeedback
             report={item}
             orgId={orgId}
             projectId={projectId}
@@ -244,3 +246,7 @@ export {ProjectUserFeedback};
 export default withApi(
   withOrganization(withEnvironmentInQueryString(ProjectUserFeedback))
 );
+
+const StyledEventUserFeedback = styled(EventUserFeedback)`
+  margin: ${space(2)} 0 ${space(1)};
+`;
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 296bdb867f..4b9435ad13 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -432,329 +432,18 @@
   }
 }
 
-/**
-* Activity
-* ============================================================================
-*/
-
-.activity-container {
-  position: relative;
-  margin-bottom: 0;
-
-  .activity-notes {
-    .nav {
-      padding: 7px 20px 0;
-      border-bottom: 1px solid lighten(@trim, 5);
-      margin-bottom: 0;
-
-      li {
-        margin-right: 13px;
-
-        &.markdown {
-          margin-right: 3px;
-        }
-      }
-
-      > li a {
-        font-size: 15px;
-        padding-bottom: 5px;
-      }
-    }
-  }
-
-  .activity-field {
-    .transition(padding 0.2s ease-in-out);
-    margin: -15px -20px 0;
-
-    textarea,
-    .note-preview {
-      display: block;
-      width: 100%;
-      min-height: 140px;
-      max-height: 1000px;
-      max-width: 100%;
-      margin: 0;
-      border: 0;
-      padding: 15px 20px 0;
-      overflow: auto;
-
-      .placeholder(@gray-lighter);
-
-      &:focus {
-        outline: 0;
-      }
-    }
-
-    .note-preview {
-      padding-bottom: 8px;
-    }
-
-    .activity-actions {
-      height: 35px;
-      line-height: 35px;
-      padding-left: 15px;
-      border-top: 1px solid @trim;
-      .transition(opacity 0.2s ease-in-out);
-
-      .btn {
-        float: right;
-        font-size: 13px;
-        margin: -1px -1px -1px;
-        border-radius: 0 0 3px;
-      }
-    }
-
-    &.error {
-      border: 1px solid @red;
-      margin: -16px -21px 0;
-      border-radius: 3px;
-
-      &:before {
-        display: block;
-        content: '';
-        width: 0;
-        height: 0;
-        border-top: 7px solid transparent;
-        border-bottom: 7px solid transparent;
-        border-right: 7px solid @red;
-        position: absolute;
-        left: -7px;
-        top: 12px;
-      }
-
-      &:after {
-        display: block;
-        content: '';
-        width: 0;
-        height: 0;
-        border-top: 6px solid transparent;
-        border-bottom: 6px solid transparent;
-        border-right: 6px solid #fff;
-        position: absolute;
-        left: -5px;
-        top: 12px;
-      }
-
-      .activity-actions .btn {
-        border-bottom-color: @red;
-        border-right-color: @red;
-      }
-    }
-  }
-
-  > ul {
-    .list-unstyled();
-    margin-bottom: 0;
-
-    > li {
-      padding-bottom: 20px;
-    }
-
-    .activity-note {
-      position: relative;
-
-      &:hover {
-        .editor-tools {
-          display: inline !important;
-        }
-      }
-
-      .avatar {
-        position: absolute;
-        left: 0;
-        top: 0;
-      }
-
-      .activity-bubble {
-        background: #fff;
-        border: 1px solid @trim-dark;
-        margin-left: 50px;
-        border-radius: 3px;
-        font-size: 15px;
-        line-height: 22px;
-        padding: 15px 20px 0;
-        position: relative;
-
-        &:before {
-          display: block;
-          content: '';
-          width: 0;
-          height: 0;
-          border-top: 7px solid transparent;
-          border-bottom: 7px solid transparent;
-          border-right: 7px solid @trim-dark;
-          position: absolute;
-          left: -7px;
-          top: 12px;
-        }
-
-        &:after {
-          display: block;
-          content: '';
-          width: 0;
-          height: 0;
-          border-top: 6px solid transparent;
-          border-bottom: 6px solid transparent;
-          border-right: 6px solid #fff;
-          position: absolute;
-          left: -6px;
-          top: 13px;
-        }
-
-        h1,
-        h2,
-        h3,
-        h4,
-        p,
-        ul:not(.nav),
-        ol,
-        pre,
-        hr,
-        blockquote {
-          margin-bottom: 15px;
-        }
-
-        ul:not(.nav),
-        ol {
-          padding-left: 20px;
-        }
-
-        ul {
-          list-style: disc;
-        }
-
-        p {
-          a {
-            word-wrap: break-word;
-          }
-        }
-
-        blockquote {
-          font-size: 15px;
-          background: @white-darker;
-
-          p:last-child {
-            margin-bottom: 0;
-          }
-        }
-
-        .activity-author {
-          font-weight: 600;
-          margin-bottom: 5px;
-          font-size: 13px;
-          padding: 0 20px 8px;
-          margin: -6px -20px 15px;
-          border-bottom: 1px solid lighten(@trim, 5);
-
-          small {
-            font-weight: 300;
-            margin-left: 10px;
-          }
-
-          .editor-tools {
-            display: none;
-
-            a {
-              padding: 0 7px;
-              border-left: 1px solid lighten(@trim, 5);
-              color: @gray;
-              font-weight: normal;
-
-              &:hover {
-                color: #666;
-              }
-
-              &:hover.danger {
-                color: #d21c25;
-              }
-
-              &:first-child {
-                margin-left: 7px;
-              }
-            }
-          }
-        }
-
-        time {
-          float: right;
-          color: @gray-light;
-          font-style: normal;
-          font-size: 14px;
-        }
-      }
-    }
-
-    .activity-item {
-      position: relative;
-      font-size: 13px;
-      color: @gray-dark;
-
-      &:before {
-        position: absolute;
-        display: block;
-        content: '';
-        top: 11px;
-        left: 0;
-        right: 0;
-        border-top: 1px solid @trim-dark;
-        z-index: -1;
-        opacity: 0.6;
-      }
-
-      .activity-avatar {
-        margin-right: 4px;
-        border-radius: 2px;
-        position: relative;
-        top: -2px;
-        left: 0;
-        z-index: 2;
-        display: inline-block;
-
-        &.sentry {
-          color: @gray-darker;
-          font-size: 16px;
-          background: @white-dark;
-        }
-      }
-
-      time {
-        color: @gray-light;
-        margin-left: 5px;
-        float: right;
-        background: @white-dark;
-        padding-left: 8px;
-      }
-
-      .activity-author {
-        font-weight: 600;
-        color: @gray-darker;
-      }
-
-      .activity-item-content {
-        display: inline;
-        padding-right: 8px;
-        background: @white-dark;
-      }
-    }
-  }
-
-  .post-box {
-    margin: -0 -0 5px;
-  }
-}
-
 /**
 * Commit Activity
+* TODO(billy): Move this to relevant components
+* (This used to be nested under `.activity-item` which is now a styled component)
 * ============================================================================
 */
-.activity-item {
-  .inline-commit {
-    color: @60;
-    padding-left: 3px;
+.inline-commit {
+  color: @60;
+  padding-left: 3px;
 
-    &:hover {
-      color: @80;
-    }
+  &:hover {
+    color: @80;
   }
 }
 
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 2737f06f7b..93def24be3 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -1674,25 +1674,6 @@ header + .alert {
     }
   }
 
-  > li.markdown {
-    float: right;
-    color: @gray;
-    margin-right: 0;
-
-    > .icon-markdown {
-      font-size: 20px;
-    }
-
-    > .supported {
-      // The text doesn't quit line up with the icon, so we
-      // manually fudge this to make it look better.
-      position: relative;
-      top: -4px;
-      left: 5px;
-      font-size: 14px;
-    }
-  }
-
   &.border-bottom {
     border-bottom: 1px solid @trim;
   }
diff --git a/src/sentry/static/sentry/less/stream.less b/src/sentry/static/sentry/less/stream.less
index 0f55c36805..89829ef91c 100644
--- a/src/sentry/static/sentry/less/stream.less
+++ b/src/sentry/static/sentry/less/stream.less
@@ -842,16 +842,6 @@
       border-bottom: 0;
     }
   }
-
-  .user-report {
-    .activity-container {
-      margin: 10px 0 5px;
-    }
-
-    .activity-note {
-      padding-bottom: 0;
-    }
-  }
 }
 
 .stream-count {
diff --git a/tests/acceptance/page_objects/issue_details.py b/tests/acceptance/page_objects/issue_details.py
index 06f0e97a47..406d573025 100644
--- a/tests/acceptance/page_objects/issue_details.py
+++ b/tests/acceptance/page_objects/issue_details.py
@@ -59,7 +59,7 @@ class IssueDetailsPage(BasePage):
         self.browser.wait_until_not('.loading-indicator')
 
     def find_comment_form(self):
-        return self.browser.find_element_by_css_selector('form.activity-field')
+        return self.browser.find_element_by_css_selector('[data-test-id="note-input-form"]')
 
     def has_comment(self, text):
         selector = '[data-test-id="activity-note-body"]'
diff --git a/tests/acceptance/test_issue_details.py b/tests/acceptance/test_issue_details.py
index 5a59b16640..64948b3655 100644
--- a/tests/acceptance/test_issue_details.py
+++ b/tests/acceptance/test_issue_details.py
@@ -158,7 +158,7 @@ class IssueDetailsTest(AcceptanceTestCase, SnubaTestCase):
             u'/{}/{}/issues/{}/activity/'.format(
                 self.org.slug, self.project.slug, event.group.id)
         )
-        self.browser.wait_until('.activity-item')
+        self.browser.wait_until_test_id('activity-item')
         self.browser.snapshot('issue activity python')
 
     def wait_until_loaded(self):
diff --git a/tests/js/spec/components/__snapshots__/noteInput.spec.jsx.snap b/tests/js/spec/components/__snapshots__/noteInput.spec.jsx.snap
deleted file mode 100644
index f60b74e6d0..0000000000
--- a/tests/js/spec/components/__snapshots__/noteInput.spec.jsx.snap
+++ /dev/null
@@ -1,313 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`NoteInput renders 1`] = `
-<withApi(NoteInput)
-  group={
-    Object {
-      "project": Object {},
-    }
-  }
-  memberList={Array []}
-  sessionUser={Object {}}
->
-  <NoteInput
-    api={Client {}}
-    group={
-      Object {
-        "project": Object {},
-      }
-    }
-    memberList={Array []}
-    sessionUser={Object {}}
-  >
-    <form
-      className="activity-field"
-      noValidate={true}
-      onSubmit={[Function]}
-    >
-      <div
-        className="activity-notes"
-      >
-        <NavTabs>
-          <ul
-            className="nav nav-tabs"
-          >
-            <li
-              className="active"
-            >
-              <a
-                onClick={[Function]}
-              >
-                Write
-              </a>
-            </li>
-            <li
-              className=""
-            >
-              <a
-                onClick={[Function]}
-              >
-                Preview
-              </a>
-            </li>
-            <li
-              className="markdown"
-            >
-              <span
-                className="icon-markdown"
-              />
-              <span
-                className="supported"
-              >
-                Markdown supported
-              </span>
-            </li>
-          </ul>
-        </NavTabs>
-        <withDefaultStyle(MentionsInput)
-          autoFocus={true}
-          displayTransform={[Function]}
-          markup="**[sentry.strip:__type__]__display__**"
-          onChange={[Function]}
-          onKeyDown={[Function]}
-          placeholder="Add details or updates to this event. 
-Tag users with @, or teams with #"
-          required={true}
-          style={
-            Object {
-              "&multiLine": Object {
-                "control": Object {
-                  "fontFamily": "Rubik, Avenir Next, Helvetica Neue, sans-serif",
-                },
-                "highlighter": Object {
-                  "padding": 20,
-                },
-                "input": Object {
-                  "border": 0,
-                  "minHeight": 140,
-                  "outline": 0,
-                  "overflow": "auto",
-                  "padding": "15px 20px 0",
-                },
-              },
-              "&singleLine": Object {
-                "control": Object {
-                  "display": "inline-block",
-                  "width": 130,
-                },
-                "highlighter": Object {
-                  "border": "2px inset transparent",
-                  "padding": 1,
-                },
-                "input": Object {
-                  "border": "2px inset",
-                  "padding": 1,
-                },
-              },
-              "control": Object {
-                "backgroundColor": "#fff",
-                "fontSize": 15,
-                "fontWeight": "normal",
-              },
-              "input": Object {
-                "margin": 0,
-              },
-              "suggestions": Object {
-                "item": Object {
-                  "&focused": Object {
-                    "backgroundColor": "#f8f6f9",
-                  },
-                  "borderBottom": "1px solid rgba(0,0,0,0.15)",
-                  "padding": "5px 15px",
-                },
-                "list": Object {
-                  "backgroundColor": "white",
-                  "border": "1px solid rgba(0,0,0,0.15)",
-                  "fontSize": 12,
-                  "maxHeight": 150,
-                  "overflow": "auto",
-                },
-              },
-            }
-          }
-          value=""
-        >
-          <MentionsInput
-            autoFocus={true}
-            displayTransform={[Function]}
-            markup="**[sentry.strip:__type__]__display__**"
-            onBlur={[Function]}
-            onChange={[Function]}
-            onKeyDown={[Function]}
-            onSelect={[Function]}
-            placeholder="Add details or updates to this event. 
-Tag users with @, or teams with #"
-            required={true}
-            singleLine={false}
-            style={[Function]}
-            value=""
-          >
-            <div
-              style={
-                Object {
-                  "overflowY": "visible",
-                  "position": "relative",
-                }
-              }
-            >
-              <div
-                style={
-                  Object {
-                    "backgroundColor": "#fff",
-                    "fontFamily": "Rubik, Avenir Next, Helvetica Neue, sans-serif",
-                    "fontSize": 15,
-                    "fontWeight": "normal",
-                  }
-                }
-              >
-                <withDefaultStyle(Highlighter)
-                  displayTransform={[Function]}
-                  inputStyle={
-                    Object {
-                      "backgroundColor": "transparent",
-                      "border": 0,
-                      "bottom": 0,
-                      "boxSizing": "border-box",
-                      "display": "block",
-                      "height": "100%",
-                      "margin": 0,
-                      "minHeight": 140,
-                      "outline": 0,
-                      "overflow": "auto",
-                      "padding": "15px 20px 0",
-                      "position": "absolute",
-                      "resize": "none",
-                      "top": 0,
-                      "width": "100%",
-                    }
-                  }
-                  markup="**[sentry.strip:__type__]__display__**"
-                  onCaretPositionChange={[Function]}
-                  selection={
-                    Object {
-                      "end": null,
-                      "start": null,
-                    }
-                  }
-                  singleLine={false}
-                  style={[Function]}
-                  value=""
-                >
-                  <Highlighter
-                    displayTransform={[Function]}
-                    inputStyle={
-                      Object {
-                        "backgroundColor": "transparent",
-                        "border": 0,
-                        "bottom": 0,
-                        "boxSizing": "border-box",
-                        "display": "block",
-                        "height": "100%",
-                        "margin": 0,
-                        "minHeight": 140,
-                        "outline": 0,
-                        "overflow": "auto",
-                        "padding": "15px 20px 0",
-                        "position": "absolute",
-                        "resize": "none",
-                        "top": 0,
-                        "width": "100%",
-                      }
-                    }
-                    markup="**[sentry.strip:__type__]__display__**"
-                    onCaretPositionChange={[Function]}
-                    selection={
-                      Object {
-                        "end": null,
-                        "start": null,
-                      }
-                    }
-                    singleLine={false}
-                    style={[Function]}
-                    value=""
-                  >
-                    <div
-                      style={
-                        Object {
-                          "backgroundColor": "transparent",
-                          "border": 0,
-                          "bottom": 0,
-                          "boxSizing": "border-box",
-                          "color": "transparent",
-                          "display": "block",
-                          "height": "100%",
-                          "margin": 0,
-                          "minHeight": 140,
-                          "outline": 0,
-                          "overflow": "hidden",
-                          "padding": 20,
-                          "position": "relative",
-                          "resize": "none",
-                          "top": 0,
-                          "whiteSpace": "pre-wrap",
-                          "width": "inherit",
-                          "wordWrap": "break-word",
-                        }
-                      }
-                    >
-                       
-                    </div>
-                  </Highlighter>
-                </withDefaultStyle(Highlighter)>
-                <textarea
-                  autoFocus={true}
-                  onBlur={[Function]}
-                  onChange={[Function]}
-                  onCompositionEnd={[Function]}
-                  onCompositionStart={[Function]}
-                  onKeyDown={[Function]}
-                  onSelect={[Function]}
-                  placeholder="Add details or updates to this event. 
-Tag users with @, or teams with #"
-                  required={true}
-                  style={
-                    Object {
-                      "backgroundColor": "transparent",
-                      "border": 0,
-                      "bottom": 0,
-                      "boxSizing": "border-box",
-                      "display": "block",
-                      "height": "100%",
-                      "margin": 0,
-                      "minHeight": 140,
-                      "outline": 0,
-                      "overflow": "auto",
-                      "padding": "15px 20px 0",
-                      "position": "absolute",
-                      "resize": "none",
-                      "top": 0,
-                      "width": "100%",
-                    }
-                  }
-                  value=""
-                />
-              </div>
-            </div>
-          </MentionsInput>
-        </withDefaultStyle(MentionsInput)>
-        <div
-          className="activity-actions"
-        >
-          <button
-            className="btn btn-default"
-            disabled={false}
-            type="submit"
-          >
-            Post Comment
-          </button>
-        </div>
-      </div>
-    </form>
-  </NoteInput>
-</withApi(NoteInput)>
-`;
diff --git a/tests/js/spec/components/noteInput.spec.jsx b/tests/js/spec/components/noteInput.spec.jsx
index c9e6e04b21..b76ce251d7 100644
--- a/tests/js/spec/components/noteInput.spec.jsx
+++ b/tests/js/spec/components/noteInput.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
-import NoteInput from 'app/components/activity/noteInput';
+import NoteInput from 'app/components/activity/note/input';
 import {Client} from 'app/api';
 
 jest.mock('app/api');
@@ -21,11 +21,10 @@ describe('NoteInput', function() {
   });
 
   it('renders', function() {
-    const wrapper = mount(
+    mount(
       <NoteInput group={{project: {}}} memberList={[]} sessionUser={{}} />,
       TestStubs.routerContext()
     );
-    expect(wrapper).toMatchSnapshot();
   });
 
   it('submits when meta + enter is pressed', function() {
@@ -68,7 +67,7 @@ describe('NoteInput', function() {
 
     input.simulate('keyDown', {key: 'Enter', ctrlKey: true});
     wrapper.update();
-    expect(wrapper.find('.activity-actions .error')).toHaveLength(1);
+    expect(wrapper.find('ErrorMessage')).toHaveLength(1);
     expect(spy).toHaveBeenCalled();
   });
 });
diff --git a/tests/js/spec/views/groupActivity/index.spec.jsx b/tests/js/spec/views/groupActivity/index.spec.jsx
index 3127fc4b8d..68f5c9d64d 100644
--- a/tests/js/spec/views/groupActivity/index.spec.jsx
+++ b/tests/js/spec/views/groupActivity/index.spec.jsx
@@ -1,8 +1,9 @@
 import React from 'react';
-import {shallow} from 'enzyme';
+import {mount, shallow} from 'enzyme';
 
+import {initializeOrg} from 'app-test/helpers/initializeOrg';
 import {GroupActivity} from 'app/views/groupDetails/shared/groupActivity';
-import NoteInput from 'app/components/activity/noteInput';
+import NoteInput from 'app/components/activity/note/input';
 import ConfigStore from 'app/stores/configStore';
 import GroupStore from 'app/stores/groupStore';
 
@@ -21,20 +22,21 @@ describe('GroupActivity', function() {
   afterEach(function() {});
 
   it('renders a NoteInput', function() {
-    const wrapper = shallow(
+    const group = TestStubs.Group({
+      id: '1337',
+      activity: [],
+      project: TestStubs.Project(),
+    });
+    const {organization, routerContext} = initializeOrg({
+      group,
+    });
+    const wrapper = mount(
       <GroupActivity
         api={new MockApiClient()}
-        group={{id: '1337', activity: []}}
-        organization={TestStubs.Organization()}
+        group={group}
+        organization={organization}
       />,
-      {
-        context: {
-          group: {id: '1337'},
-          project: TestStubs.Project(),
-          team: {id: '1'},
-          organization: {id: 'bar'},
-        },
-      }
+      routerContext
     );
     expect(wrapper.find(NoteInput)).toHaveLength(1);
   });
diff --git a/tests/js/spec/views/userFeedback/__snapshots__/projectUserFeedback.spec.jsx.snap b/tests/js/spec/views/userFeedback/__snapshots__/projectUserFeedback.spec.jsx.snap
index 9c9651fb68..065c8fdbc9 100644
--- a/tests/js/spec/views/userFeedback/__snapshots__/projectUserFeedback.spec.jsx.snap
+++ b/tests/js/spec/views/userFeedback/__snapshots__/projectUserFeedback.spec.jsx.snap
@@ -86,7 +86,7 @@ exports[`projectUserFeedback renders 1`] = `
       id="1"
       key="123"
     >
-      <EventUserFeedback
+      <StyledEventUserFeedback
         issueId="1"
         orgId="org-slug"
         projectId="project-slug"
