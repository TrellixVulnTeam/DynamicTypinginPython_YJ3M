commit 3cbfc3aa42c87451706a0407a3c501cc5387ae6b
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Thu Nov 15 10:03:06 2018 +0100

    fix: Allow empty stacktraces (#10557)
    
    * fix: Allow empty stacktraces
    
    Also fix some unrelated null issues
    
    This reverts commit 2b9fb52ed9b3f87577bdcf8a11008f7baa98cc3e.
    
    * fix: Fix samples to be actually valid events
    
    * fix: Remove event IDs
    
    * fix: Adjust snapshot name
    
    * fix: Fix Percy processing errors
    
    * fix: Fix wrong comment, remove timestamp
    
    * fix: Logic typo
    
    * fix: Fix culprit when stacktrace empty
    
    * trigger build

diff --git a/src/sentry/data/samples/empty-exception.json b/src/sentry/data/samples/empty-exception.json
new file mode 100644
index 0000000000..2129568ce5
--- /dev/null
+++ b/src/sentry/data/samples/empty-exception.json
@@ -0,0 +1,38 @@
+{
+    "level": "error",
+    "modules": {
+        "certifi": "2018.4.16",
+        "pip": "18.0",
+        "python": "2.7.15",
+        "sentry-sdk": "0.3.1",
+        "setuptools": "40.0.0",
+        "urllib3": "1.23",
+        "wheel": "0.31.1",
+        "wsgiref": "0.1.2"
+    },
+    "platform": "python",
+    "server_name": "mcbk.local",
+    "exception": {
+        "values": [
+            null
+        ]
+    },
+    "sdk": {
+        "name": "sentry.python",
+        "version": "0.1",
+        "integrations": [
+            "logging",
+            "stdlib",
+            "excepthook",
+            "dedupe",
+            "atexit",
+            "modules"
+        ],
+        "packages": [
+            {
+                "name": "pypi:sentry-sdk",
+                "version": "0.1"
+            }
+        ]
+    }
+}
diff --git a/src/sentry/data/samples/empty-stacktrace.json b/src/sentry/data/samples/empty-stacktrace.json
new file mode 100644
index 0000000000..0b128c28d5
--- /dev/null
+++ b/src/sentry/data/samples/empty-stacktrace.json
@@ -0,0 +1,36 @@
+{
+    "level": "error",
+    "modules": {
+        "certifi": "2018.4.16",
+        "pip": "18.0",
+        "python": "2.7.15",
+        "sentry-sdk": "0.3.1",
+        "setuptools": "40.0.0",
+        "urllib3": "1.23",
+        "wheel": "0.31.1",
+        "wsgiref": "0.1.2"
+    },
+    "platform": "python",
+    "server_name": "mcbk.local",
+    "stacktrace": {
+        "frames": []
+    },
+    "sdk": {
+        "name": "sentry.python",
+        "version": "0.1",
+        "integrations": [
+            "logging",
+            "stdlib",
+            "excepthook",
+            "dedupe",
+            "atexit",
+            "modules"
+        ],
+        "packages": [
+            {
+                "name": "pypi:sentry-sdk",
+                "version": "0.1"
+            }
+        ]
+    }
+}
diff --git a/src/sentry/data/samples/pii.json b/src/sentry/data/samples/pii.json
index 3ab8ef928f..c47b5e1985 100644
--- a/src/sentry/data/samples/pii.json
+++ b/src/sentry/data/samples/pii.json
@@ -12,7 +12,6 @@
         "wsgiref": "0.1.2"
     },
     "platform": "python",
-    "timestamp": 1539708807,
     "server_name": "mcbk.local",
     "exception": {
         "values": [
diff --git a/src/sentry/data/samples/unity.json b/src/sentry/data/samples/unity.json
index d3e5c8fd8f..bbafc54bc2 100644
--- a/src/sentry/data/samples/unity.json
+++ b/src/sentry/data/samples/unity.json
@@ -1,7 +1,6 @@
 {
   "event_id": "ce6ab074ae0d45388af7a1cbb9eb092d",
   "message": "DivideByZeroException",
-  "timestamp": "2018-10-25T13:03:40",
   "logger": "",
   "platform": "csharp",
   "release": "1.1",
@@ -225,4 +224,4 @@
       }
     ]
   }
-}
\ No newline at end of file
+}
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 07ac56ba14..437e8953d8 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -199,11 +199,10 @@ else:
 
 
 def generate_culprit(data, platform=None):
-    culprit = ''
     try:
         stacktraces = [
             e['stacktrace'] for e in data['exception']['values']
-            if e.get('stacktrace')
+            if e and e.get('stacktrace')
         ]
     except KeyError:
         stacktrace = data.get('stacktrace')
@@ -212,16 +211,18 @@ def generate_culprit(data, platform=None):
         else:
             stacktraces = None
 
-    if not stacktraces:
-        if 'request' in data:
-            culprit = data['request'].get('url', '')
-    else:
+    culprit = None
+
+    if not culprit and stacktraces:
         from sentry.interfaces.stacktrace import Stacktrace
         culprit = Stacktrace.to_python(stacktraces[-1]).get_culprit_string(
             platform=platform,
         )
 
-    return truncatechars(culprit, MAX_CULPRIT_LENGTH)
+    if not culprit and 'request' in data:
+        culprit = data['request'].get('url', '')
+
+    return truncatechars(culprit or '', MAX_CULPRIT_LENGTH)
 
 
 def plugin_is_regression(group, event):
@@ -633,7 +634,7 @@ class EventManager(object):
         if exception:
             sdk_info = get_sdk_from_event(data)
             for ex in exception['values']:
-                if 'mechanism' in ex:
+                if ex is not None and 'mechanism' in ex:
                     normalize_mechanism_meta(ex['mechanism'], sdk_info)
 
         # If there is no User ip_addres, update it either from the Http interface
@@ -689,6 +690,8 @@ class EventManager(object):
         for exception_interface in self._data.get(
             'exception', {}
         ).get('values', []):
+            if exception_interface is None:
+                continue
             message = u': '.join(
                 filter(None, map(exception_interface.get, ['type', 'value']))
             )
@@ -783,11 +786,10 @@ class EventManager(object):
         data = event.data.data
         self._data = None
 
-        if not culprit:
-            if transaction_name:
-                culprit = transaction_name
-            else:
-                culprit = generate_culprit(data, platform=platform)
+        culprit = culprit or \
+            transaction_name or \
+            generate_culprit(data, platform=platform) or \
+            ''
 
         culprit = force_text(culprit)
         if transaction_name:
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 0f488e3350..790d36f8aa 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -1052,7 +1052,7 @@ class Exception(Interface):
         # while others may not and we ALWAYS want stacktraces over values
         output = []
         for value in self.values:
-            if not value.stacktrace:
+            if not value or not value.stacktrace:
                 continue
             stack_hash = value.stacktrace.get_hash(
                 platform=platform,
@@ -1064,15 +1064,16 @@ class Exception(Interface):
 
         if not output:
             for value in self.values:
-                output.extend(value.get_hash(platform=platform))
+                if value:
+                    output.extend(value.get_hash(platform=platform))
 
         return output
 
     def get_api_context(self, is_public=False):
         return {
-            'values': [v.get_api_context(is_public=is_public) for v in self.values],
+            'values': [v.get_api_context(is_public=is_public) for v in self.values if v],
             'hasSystemFrames':
-            any(v.stacktrace.get_has_system_frames() for v in self.values if v.stacktrace),
+            any(v.stacktrace.get_has_system_frames() for v in self.values if v and v.stacktrace),
             'excOmitted':
             self.exc_omitted,
         }
@@ -1110,7 +1111,7 @@ class Exception(Interface):
         return ''
 
     def iter_tags(self):
-        if not self.values:
+        if not self.values or not self.values[0]:
             return
 
         mechanism = self.values[0].mechanism
diff --git a/src/sentry/interfaces/schemas.py b/src/sentry/interfaces/schemas.py
index 5b91aa924a..86bde774e1 100644
--- a/src/sentry/interfaces/schemas.py
+++ b/src/sentry/interfaces/schemas.py
@@ -135,7 +135,6 @@ STACKTRACE_INTERFACE_SCHEMA = {
             'type': 'array',
             # To validate individual frames use FRAME_INTERFACE_SCHEMA
             'items': {},
-            'minItems': 1,
         },
         'frames_omitted': {
             'type': 'array',
@@ -145,7 +144,7 @@ STACKTRACE_INTERFACE_SCHEMA = {
         },
         'registers': {'type': 'object'},
     },
-    'required': ['frames'],
+    'required': [],
     # `additionalProperties: {'not': {}}` forces additional properties to
     # individually fail with errors that identify the key, so they can be deleted.
     'additionalProperties': {'not': {}},
@@ -227,9 +226,6 @@ EXCEPTION_INTERFACE_SCHEMA = {
             # To validate stacktraces use STACKTRACE_INTERFACE_SCHEMA
             'type': 'object',
             'properties': {
-                # The code allows for the possibility of an empty
-                # {"frames":[]} object, this sucks and should go.
-                # STACKTRACE_INTERFACE_SCHEMA enforces at least 1
                 'frames': {'type': 'array'},
             },
         },
diff --git a/src/sentry/interfaces/sdk.py b/src/sentry/interfaces/sdk.py
index 725ca8597e..c31edd129e 100644
--- a/src/sentry/interfaces/sdk.py
+++ b/src/sentry/interfaces/sdk.py
@@ -17,6 +17,9 @@ def get_with_prefix(d, k, default=None, delimiter=":"):
     {"raven-java": "7.0.0"}.
     """
 
+    if k is None:
+        return default
+
     prefix = k.split(delimiter, 1)[0]
     for key in [k, prefix]:
         if key in d:
@@ -71,6 +74,7 @@ class Sdk(Interface):
     def get_api_context(self, is_public=False):
         newest_version = get_with_prefix(settings.SDK_VERSIONS, self.name)
         newest_name = get_with_prefix(settings.DEPRECATED_SDKS, self.name, self.name)
+
         if newest_version is not None:
             try:
                 is_newer = (
diff --git a/src/sentry/stacktraces.py b/src/sentry/stacktraces.py
index 952c271fc8..91e5adc210 100644
--- a/src/sentry/stacktraces.py
+++ b/src/sentry/stacktraces.py
@@ -175,6 +175,8 @@ def find_stacktraces_in_data(data, include_raw=False):
     exc_container = data.get('exception')
     if exc_container:
         for exc in exc_container['values']:
+            if not exc:
+                continue
             stacktrace = exc.get('stacktrace')
             if stacktrace:
                 _report_stack(stacktrace, exc)
diff --git a/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx b/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
index 7f65ae05d8..44dcdf64c0 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
@@ -7,6 +7,7 @@ import createReactClass from 'create-react-class';
 
 import ConfigStore from 'app/stores/configStore';
 import SentryTypes from 'app/sentryTypes';
+import getDynamicText from 'app/utils/getDynamicText';
 import DateTime from 'app/components/dateTime';
 import FileSize from 'app/components/fileSize';
 import Tooltip from 'app/components/tooltip';
@@ -170,7 +171,10 @@ let GroupEventToolbar = createReactClass({
         <span>
           <Tooltip title={this.getDateTooltip()} tooltipOptions={{html: true}}>
             <span>
-              <DateTime date={evt.dateCreated} style={style} />
+              <DateTime
+                date={getDynamicText({value: evt.dateCreated, fixed: 'Dummy timestamp'})}
+                style={style}
+              />
               {isOverLatencyThreshold && <span className="icon-alert" />}
             </span>
           </Tooltip>
diff --git a/src/sentry/utils/data_scrubber.py b/src/sentry/utils/data_scrubber.py
index c5b860318c..66728ede22 100644
--- a/src/sentry/utils/data_scrubber.py
+++ b/src/sentry/utils/data_scrubber.py
@@ -79,7 +79,7 @@ class SensitiveDataFilter(object):
 
         if 'exception' in data:
             for exc in data['exception']['values']:
-                if exc.get('stacktrace'):
+                if exc is not None and exc.get('stacktrace'):
                     self.filter_stacktrace(exc['stacktrace'])
 
         if 'breadcrumbs' in data:
diff --git a/src/sentry/utils/pytest/selenium.py b/src/sentry/utils/pytest/selenium.py
index b2d54812f0..1bf40942ec 100644
--- a/src/sentry/utils/pytest/selenium.py
+++ b/src/sentry/utils/pytest/selenium.py
@@ -173,9 +173,7 @@ class Browser(object):
 
     def snapshot(self, name):
         """
-        Capture a screenshot of the current state of the page. Screenshots
-        are captured both locally (in ``cls.screenshots_path``) as well as
-        with Percy (when enabled).
+        Capture a screenshot of the current state of the page.
         """
         # TODO(dcramer): ideally this would take the executing test package
         # into account for duplicate names
diff --git a/tests/acceptance/test_issue_details.py b/tests/acceptance/test_issue_details.py
index 4ca01c4897..1206e31a38 100644
--- a/tests/acceptance/test_issue_details.py
+++ b/tests/acceptance/test_issue_details.py
@@ -26,8 +26,7 @@ class IssueDetailsTest(AcceptanceTestCase):
             platform=platform,
             default=default,
             sample_name=sample_name,
-            event_id='d964fdbd649a4cf8bfc35d18082b6b0e',
-            timestamp=1452683305,
+            event_id='d964fdbd649a4cf8bfc35d18082b6b0e'
         )
         event.group.update(
             first_seen=datetime(2015, 8, 13, 3, 8, 25, tzinfo=timezone.utc),
@@ -133,6 +132,28 @@ class IssueDetailsTest(AcceptanceTestCase):
         self.browser.wait_until('.entries')
         self.browser.snapshot('issue details pii stripped')
 
+    def test_empty_exception(self):
+        event = self.create_sample_event(
+            platform='empty-exception'
+        )
+
+        self.browser.get(
+            u'/{}/{}/issues/{}/'.format(self.org.slug, self.project.slug, event.group.id)
+        )
+        self.browser.wait_until('.entries')
+        self.browser.snapshot('issue details empty exception')
+
+    def test_empty_stacktrace(self):
+        event = self.create_sample_event(
+            platform='empty-stacktrace'
+        )
+
+        self.browser.get(
+            u'/{}/{}/issues/{}/'.format(self.org.slug, self.project.slug, event.group.id)
+        )
+        self.browser.wait_until('.entries')
+        self.browser.snapshot('issue details empty stacktrace')
+
     def test_activity_page(self):
         event = self.create_sample_event(
             platform='python',
diff --git a/tests/sentry/event_manager/test_event_manager.py b/tests/sentry/event_manager/test_event_manager.py
index c68db37eb6..e2ab233855 100644
--- a/tests/sentry/event_manager/test_event_manager.py
+++ b/tests/sentry/event_manager/test_event_manager.py
@@ -544,6 +544,12 @@ class EventManagerTest(TransactionTestCase):
         assert event1.transaction is None
         assert event1.culprit == 'foobar'
 
+    def test_inferred_culprit_from_empty_stacktrace(self):
+        manager = EventManager(make_event(stacktrace={"frames": []}))
+        manager.normalize()
+        event = manager.save(1)
+        assert event.culprit == ''
+
     def test_transaction_and_culprit(self):
         manager = EventManager(make_event(
             transaction='foobar',
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index 62ad9db4c7..6746b05043 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -49,6 +49,12 @@ class StacktraceTest(TestCase):
         )
 
     def test_null_values(self):
+        sink = {'frames': [], 'frames_omitted': None, 'registers': None}
+
+        assert Stacktrace.to_python({}).to_json() == sink
+        assert Stacktrace.to_python({'frames': None}).to_json() == sink
+        assert Stacktrace.to_python({'frames': []}).to_json() == sink
+
         # TODO(markus): Should eventually generate frames: [None]
         assert Stacktrace.to_python({'frames': [None]}).to_json() == \
             {'frames': [], 'frames_omitted': None, 'registers': None}
