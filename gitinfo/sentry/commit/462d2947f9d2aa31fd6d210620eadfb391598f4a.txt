commit 462d2947f9d2aa31fd6d210620eadfb391598f4a
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Sep 18 15:52:20 2019 -0700

    feat(ui): Move Incident Rules settings to org level [SEN-987] (#14585)
    
    Move from project back to organization level

diff --git a/src/sentry/api/serializers/models/alert_rule.py b/src/sentry/api/serializers/models/alert_rule.py
index 1a043ec3a9..7b7785528b 100644
--- a/src/sentry/api/serializers/models/alert_rule.py
+++ b/src/sentry/api/serializers/models/alert_rule.py
@@ -15,8 +15,6 @@ class AlertRuleSerializer(Serializer):
             "id": six.text_type(obj.id),
             "name": obj.name,
             "organizationId": six.text_type(obj.organization_id),
-            # TODO: Remove this once we've migrated to org level
-            "projectId": six.text_type(obj.query_subscriptions.first().project_id),
             "status": obj.status,
             "thresholdType": obj.threshold_type,
             "dataset": obj.dataset,
diff --git a/src/sentry/static/sentry/app/actionCreators/modal.tsx b/src/sentry/static/sentry/app/actionCreators/modal.tsx
index b22671af43..9e17bc7499 100644
--- a/src/sentry/static/sentry/app/actionCreators/modal.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/modal.tsx
@@ -15,6 +15,7 @@ export type RenderProps = {
 export type ModalOptions = {
   onClose?: () => void;
   modalClassName?: string;
+  dialogClassName?: string;
   type?: string;
 };
 
diff --git a/src/sentry/static/sentry/app/components/globalModal.tsx b/src/sentry/static/sentry/app/components/globalModal.tsx
index da425e4be3..f2f7387c1f 100644
--- a/src/sentry/static/sentry/app/components/globalModal.tsx
+++ b/src/sentry/static/sentry/app/components/globalModal.tsx
@@ -28,6 +28,7 @@ class GlobalModal extends React.Component<Props> {
     children: PropTypes.func,
     options: PropTypes.shape({
       onClose: PropTypes.func,
+      dialogClassName: PropTypes.string,
       modalClassName: PropTypes.string,
     }),
     visible: PropTypes.bool,
@@ -81,6 +82,7 @@ class GlobalModal extends React.Component<Props> {
     return (
       <Modal
         className={options && options.modalClassName}
+        dialogClassName={options && options.dialogClassName}
         show={visible}
         animation={false}
         onHide={this.handleCloseModal}
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 0e67562784..0a59d51d5c 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -251,38 +251,6 @@ function routes() {
         </Route>
       </Route>
 
-      <Route
-        name="Incident Rules"
-        path="incident-rules/"
-        componentPromise={() =>
-          import(/* webpackChunkName: "ProjectIncidentRules" */ 'app/views/settings/projectIncidentRules')
-        }
-        component={errorHandler(LazyLoad)}
-      >
-        <IndexRoute
-          componentPromise={() =>
-            import(/* webpackChunkName: "IncidentRulesList" */ 'app/views/settings/projectIncidentRules/list')
-          }
-          component={errorHandler(LazyLoad)}
-        />
-        <Route
-          name="New Incident Rule"
-          path="new/"
-          componentPromise={() =>
-            import(/* webpackChunkName: "IncidentRulesCreate" */ 'app/views/settings/projectIncidentRules/create')
-          }
-          component={errorHandler(LazyLoad)}
-        />
-        <Route
-          name="Edit Incident Rule"
-          path=":incidentRuleId/"
-          componentPromise={() =>
-            import(/* webpackChunkName: "IncidentRulesDetails" */ 'app/views/settings/projectIncidentRules/details')
-          }
-          component={errorHandler(LazyLoad)}
-        />
-      </Route>
-
       <Route
         name="Environments"
         path="environments/"
@@ -550,6 +518,38 @@ function routes() {
         />
       </Route>
 
+      <Route
+        name="Incident Rules"
+        path="incident-rules/"
+        componentPromise={() =>
+          import(/* webpackChunkName: "IncidentRules" */ 'app/views/settings/incidentRules')
+        }
+        component={errorHandler(LazyLoad)}
+      >
+        <IndexRoute
+          componentPromise={() =>
+            import(/* webpackChunkName: "IncidentRulesList" */ 'app/views/settings/incidentRules/list')
+          }
+          component={errorHandler(LazyLoad)}
+        />
+        <Route
+          name="New Incident Rule"
+          path="new/"
+          componentPromise={() =>
+            import(/* webpackChunkName: "IncidentRulesCreate" */ 'app/views/settings/incidentRules/create')
+          }
+          component={errorHandler(LazyLoad)}
+        />
+        <Route
+          name="Edit Incident Rule"
+          path=":incidentRuleId/"
+          componentPromise={() =>
+            import(/* webpackChunkName: "IncidentRulesDetails" */ 'app/views/settings/incidentRules/details')
+          }
+          component={errorHandler(LazyLoad)}
+        />
+      </Route>
+
       <Route
         path="rate-limits/"
         name="Rate Limits"
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/choiceMapperField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/choiceMapperField.jsx
index f2e3807e39..fd37022f85 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/choiceMapperField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/choiceMapperField.jsx
@@ -221,7 +221,7 @@ export default class ChoiceMapper extends React.Component {
     return (
       <InputField
         {...this.props}
-        inline={model => !this.hasValue(model.getValue(this.props.name))}
+        inline={({model}) => !this.hasValue(model.getValue(this.props.name))}
         field={this.renderField}
       />
     );
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
index 4f13b12966..46b3d1bc57 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
@@ -187,7 +187,7 @@ class MockModel {
  * form model, that will be called to determine the value of the prop upon an
  * observed change in the model.
  */
-const propsToObserver = ['inline', 'highlighted'];
+const propsToObserver = ['inline', 'highlighted', 'visible', 'disabled'];
 
 class FormField extends React.Component {
   static propTypes = {
@@ -500,7 +500,7 @@ class FormField extends React.Component {
 
     const observedProps = propsToObserver
       .filter(p => typeof this.props[p] === 'function')
-      .map(p => [p, () => this.props[p](model)]);
+      .map(p => [p, () => this.props[p]({...this.props, model})]);
 
     // This field has no properties that require observation to compute their
     // value, this field is static and will not be re-rendered.
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
index 3867a8b5d6..05ebbd9477 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
@@ -23,13 +23,13 @@ export const FieldType = [
 export type FieldValue = any;
 
 type BaseField = {
-  label: React.ReactNode | (() => React.ReactNode);
+  label?: React.ReactNode | (() => React.ReactNode);
   name?: string;
   help?: React.ReactNode | (() => React.ReactNode);
   required?: boolean;
   placeholder?: string | (() => string);
   multiline?: boolean;
-  visible?: boolean | ((model: any) => boolean);
+  visible?: boolean | ((props: any) => boolean);
   disabled?: boolean | (() => boolean);
   disabledReason?: string;
   defaultValue?: FieldValue;
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/actions.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/actions.tsx
similarity index 54%
rename from src/sentry/static/sentry/app/views/settings/projectIncidentRules/actions.tsx
rename to src/sentry/static/sentry/app/views/settings/incidentRules/actions.tsx
index 7d542235bf..43d169067f 100644
--- a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/actions.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/actions.tsx
@@ -1,14 +1,12 @@
 import {Client} from 'app/api';
 import {IncidentRule} from './types';
 
-// TODO(ts): type response
 export function deleteRule(
   api: Client,
   orgId: string,
-  projectId: string,
   rule: IncidentRule
-): Promise<any> {
-  return api.requestPromise(`/projects/${orgId}/${projectId}/alert-rules/${rule.id}/`, {
+): Promise<void> {
+  return api.requestPromise(`/organizations/${orgId}/alert-rules/${rule.id}/`, {
     method: 'DELETE',
   });
 }
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/chart.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/chart.tsx
similarity index 99%
rename from src/sentry/static/sentry/app/views/settings/projectIncidentRules/chart.tsx
rename to src/sentry/static/sentry/app/views/settings/incidentRules/chart.tsx
index a4a8f369a7..3d17e82789 100644
--- a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/chart.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/chart.tsx
@@ -9,6 +9,7 @@ import Graphic from 'app/components/charts/components/graphic';
 import LineChart from 'app/components/charts/lineChart';
 import space from 'app/styles/space';
 import theme from 'app/utils/theme';
+import {Project} from 'app/types';
 
 type Props = {
   xAxis: EChartOption.XAxis;
@@ -16,6 +17,7 @@ type Props = {
   alertThreshold: number | null;
   resolveThreshold: number | null;
   isInverted: boolean;
+  projects?: Project[];
   onChangeIncidentThreshold: (alertThreshold: number) => void;
   onChangeResolutionThreshold: (resolveThreshold: number) => void;
   maxValue?: number;
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/constants.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/settings/projectIncidentRules/constants.tsx
rename to src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx
new file mode 100644
index 0000000000..957ffc6ef9
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx
@@ -0,0 +1,31 @@
+import {RouteComponentProps} from 'react-router/lib/Router';
+import React from 'react';
+
+import {t} from 'app/locale';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+
+import RuleForm from './ruleForm';
+
+type RouteParams = {orgId: string};
+type Props = {};
+
+class IncidentRulesCreate extends React.Component<
+  RouteComponentProps<RouteParams, {}> & Props
+> {
+  handleSubmitSuccess = data => {
+    const {orgId} = this.props.params;
+    this.props.router.push(`/settings/${orgId}/incident-rules/${data.id}/`);
+  };
+
+  render() {
+    const {orgId} = this.props.params;
+
+    return (
+      <div>
+        <SettingsPageHeader title={t('New Incident Rule')} />
+        <RuleForm orgId={orgId} onSubmitSuccess={this.handleSubmitSuccess} />
+      </div>
+    );
+  }
+}
+export default IncidentRulesCreate;
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
new file mode 100644
index 0000000000..10fc10e108
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
@@ -0,0 +1,118 @@
+import {RouteComponentProps} from 'react-router/lib/Router';
+import React from 'react';
+import styled, {css} from 'react-emotion';
+
+import {Organization, Project} from 'app/types';
+import {addSuccessMessage} from 'app/actionCreators/indicator';
+import {openModal} from 'app/actionCreators/modal';
+import {t} from 'app/locale';
+import AsyncView from 'app/views/asyncView';
+import Button from 'app/components/button';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import TriggerForm from 'app/views/settings/incidentRules/triggers/form';
+import TriggersList from 'app/views/settings/incidentRules/triggers/list';
+
+import {IncidentRule} from './types';
+import RuleForm from './ruleForm';
+
+type State = {
+  rule: IncidentRule;
+} & AsyncView['state'];
+
+type RouteParams = {
+  orgId: string;
+  incidentRuleId: string;
+};
+
+type Props = {
+  organization: Organization;
+  projects: Project[];
+};
+
+const widthCss = css`
+  width: 80%;
+  margin-left: -40%;
+`;
+
+class IncidentRulesDetails extends AsyncView<
+  RouteComponentProps<RouteParams, {}> & Props,
+  State
+> {
+  getEndpoints() {
+    const {orgId, incidentRuleId} = this.props.params;
+
+    return [
+      ['rule', `/organizations/${orgId}/alert-rules/${incidentRuleId}/`] as [
+        string,
+        string
+      ],
+    ];
+  }
+
+  handleNewTrigger = () => {
+    const {organization, projects, params} = this.props;
+    const {orgId} = params;
+    openModal(
+      () => (
+        <div>
+          <h3>
+            Trigger for:
+            {this.state.rule.name}
+          </h3>
+          <TriggerForm
+            organization={organization}
+            projects={projects || []}
+            orgId={orgId}
+            onSubmitSuccess={this.handleSubmitSuccess}
+          />
+        </div>
+      ),
+      {dialogClassName: widthCss}
+    );
+  };
+
+  handleSubmitSuccess = () => {
+    addSuccessMessage(t('Successfully saved Incident Rule'));
+  };
+
+  renderBody() {
+    const {orgId, incidentRuleId} = this.props.params;
+
+    return (
+      <div>
+        <SettingsPageHeader title={t('Edit Incident Rule')} />
+
+        <RuleForm
+          saveOnBlur={true}
+          orgId={orgId}
+          incidentRuleId={incidentRuleId}
+          onSubmitSuccess={this.handleSubmitSuccess}
+          initialData={this.state.rule}
+        />
+
+        <TriggersHeader
+          title={t('Triggers')}
+          action={
+            <Button
+              size="small"
+              priority="primary"
+              icon="icon-circle-add"
+              disabled={!this.state.rule}
+              onClick={this.handleNewTrigger}
+            >
+              {t('New Trigger')}
+            </Button>
+          }
+        />
+
+        <TriggersList />
+      </div>
+    );
+  }
+}
+
+export default IncidentRulesDetails;
+
+const TriggersHeader = styled(SettingsPageHeader)`
+  margin: 0;
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/index.jsx b/src/sentry/static/sentry/app/views/settings/incidentRules/index.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/settings/projectIncidentRules/index.jsx
rename to src/sentry/static/sentry/app/views/settings/incidentRules/index.jsx
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/list.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/list.tsx
similarity index 83%
rename from src/sentry/static/sentry/app/views/settings/projectIncidentRules/list.tsx
rename to src/sentry/static/sentry/app/views/settings/incidentRules/list.tsx
index 9a5c712368..85af4ff71a 100644
--- a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/list.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/list.tsx
@@ -19,22 +19,22 @@ import {deleteRule} from './actions';
 type State = {
   rules: IncidentRule[];
 } & AsyncView['state'];
+
 type RouteParams = {
   orgId: string;
-  projectId: string;
 };
+
 type Props = RouteComponentProps<RouteParams, {}>;
+
 class IncidentRulesList extends AsyncView<Props, State> {
   getEndpoints() {
-    const {orgId, projectId} = this.props.params;
+    const {orgId} = this.props.params;
 
-    return [
-      ['rules', `/projects/${orgId}/${projectId}/alert-rules/`] as [string, string],
-    ];
+    return [['rules', `/organizations/${orgId}/alert-rules/`] as [string, string]];
   }
 
   handleRemoveRule = async (rule: IncidentRule) => {
-    const {orgId, projectId} = this.props.params;
+    const {orgId} = this.props.params;
 
     // Optimistic update
     const oldRules = this.state.rules.slice(0);
@@ -46,7 +46,7 @@ class IncidentRulesList extends AsyncView<Props, State> {
         rules: newRules,
       });
 
-      deleteRule(this.api, orgId, projectId, rule);
+      await deleteRule(this.api, orgId, rule);
     } catch (_err) {
       this.setState({
         rules: oldRules,
@@ -59,12 +59,12 @@ class IncidentRulesList extends AsyncView<Props, State> {
   }
 
   renderBody() {
-    const {orgId, projectId} = this.props.params;
+    const {orgId} = this.props.params;
     const action = (
       <Button
         priority="primary"
         size="small"
-        to={`/settings/${orgId}/projects/${projectId}/incident-rules/new/`}
+        to={`/settings/${orgId}/incident-rules/new/`}
         icon="icon-circle-add"
       >
         {t('Create New Rule')}
@@ -87,11 +87,7 @@ class IncidentRulesList extends AsyncView<Props, State> {
               !isEmpty &&
               this.state.rules.map(rule => (
                 <RuleRow key={rule.id}>
-                  <RuleLink
-                    to={`/settings/${orgId}/projects/${projectId}/incident-rules/${
-                      rule.id
-                    }/`}
-                  >
+                  <RuleLink to={`/settings/${orgId}/incident-rules/${rule.id}/`}>
                     {rule.name}
                   </RuleLink>
                   <Confirm
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx
new file mode 100644
index 0000000000..d3476396ee
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx
@@ -0,0 +1,171 @@
+import React from 'react';
+
+import {Client} from 'app/api';
+import {Organization, Project} from 'app/types';
+import {t} from 'app/locale';
+import Form from 'app/views/settings/components/forms/form';
+import FormField from 'app/views/settings/components/forms/formField';
+import JsonForm from 'app/views/settings/components/forms/jsonForm';
+import SearchBar from 'app/views/events/searchBar';
+import withApi from 'app/utils/withApi';
+import withOrganization from 'app/utils/withOrganization';
+import withProjects from 'app/utils/withProjects';
+
+import {AlertRuleAggregations} from './constants';
+import {IncidentRule} from './types';
+
+const DEFAULT_METRIC = [AlertRuleAggregations.TOTAL];
+
+type Props = {
+  api: Client;
+  organization: Organization;
+  initialData?: IncidentRule;
+  projects: Project[];
+};
+
+class RuleForm extends React.Component<Props> {
+  render() {
+    const {organization, projects} = this.props;
+
+    return (
+      <JsonForm
+        forms={[
+          {
+            title: t('Metric'),
+            fields: [
+              {
+                name: 'name',
+                type: 'text',
+                label: t('Name'),
+                help: t('Give your Incident Rule a name so it is easy to manage later'),
+                placeholder: t('My Incident Rule Name'),
+                required: true,
+              },
+              {
+                name: 'includeAllProjects',
+                type: 'boolean',
+                label: t('Apply to all Projects'),
+                help: t(
+                  'This should apply to all projects as well as all future projects'
+                ),
+              },
+              {
+                name: 'projects',
+                type: 'select',
+                label: t('Projects'),
+                help: t('Select projects that this rule will apply to'),
+                choices: projects.map(project => [project.id, project.slug]),
+                placeholder: t('All Projects'),
+                multiple: true,
+                visible: ({model}) => !model.getValue('includeAllProjects'),
+              },
+              {
+                name: 'excludedProjects',
+                type: 'select',
+                label: t('Exclude Projects'),
+                help: t('Select projects that will be excluded from this rule'),
+                choices: projects.map(({id, slug}) => [id, slug]),
+                placeholder: t('None'),
+                multiple: true,
+                visible: ({model}) => !!model.getValue('includeAllProjects'),
+              },
+              {
+                name: 'aggregations',
+                type: 'select',
+                label: t('Metric'),
+                help: t('Choose which metric to trigger on'),
+                choices: [
+                  [AlertRuleAggregations.UNIQUE_USERS, 'Users Affected'],
+                  [AlertRuleAggregations.TOTAL, 'Events'],
+                ],
+                required: true,
+                setValue: value => (value && value.length ? value[0] : value),
+                getValue: value => [value],
+              },
+              {
+                name: 'query',
+                type: 'custom',
+                label: t('Filter'),
+                defaultValue: '',
+                placeholder: 'error.type:TypeError',
+                help: t(
+                  'You can apply standard Sentry filter syntax to filter by status, user, etc.'
+                ),
+                Component: props => {
+                  return (
+                    <FormField {...props}>
+                      {({onChange, onBlur, onKeyDown}) => {
+                        return (
+                          <SearchBar
+                            useFormWrapper={false}
+                            organization={organization}
+                            onChange={onChange}
+                            onBlur={onBlur}
+                            onKeyDown={onKeyDown}
+                            onSearch={query => onChange(query, {})}
+                          />
+                        );
+                      }}
+                    </FormField>
+                  );
+                },
+              },
+              {
+                name: 'isDefault',
+                type: 'boolean',
+                label: t('Is Default'),
+                defaultValue: false,
+                help: t('Default rules will visible for all members of an organization?'),
+              },
+            ],
+          },
+        ]}
+      />
+    );
+  }
+}
+
+type RuleFormContainerProps = {
+  initialData?: IncidentRule;
+  orgId: string;
+  incidentRuleId?: string;
+  saveOnBlur?: boolean;
+  onSubmitSuccess?: Function;
+} & React.ComponentProps<typeof RuleForm>;
+
+function RuleFormContainer({
+  orgId,
+  incidentRuleId,
+  initialData,
+  saveOnBlur,
+  onSubmitSuccess,
+  ...props
+}: RuleFormContainerProps) {
+  return (
+    <Form
+      apiMethod={incidentRuleId ? 'PUT' : 'POST'}
+      apiEndpoint={`/organizations/${orgId}/alert-rules/${
+        incidentRuleId ? `${incidentRuleId}/` : ''
+      }`}
+      initialData={{
+        query: '',
+        aggregations: DEFAULT_METRIC,
+        projects: [],
+
+        // TODO(incidents): Temp values
+        alertThreshold: 5,
+        project_id: 1,
+        resolveThreshold: 1,
+        thresholdType: 0,
+        timeWindow: 60,
+        ...initialData,
+      }}
+      saveOnBlur={saveOnBlur}
+      onSubmitSuccess={onSubmitSuccess}
+    >
+      <RuleForm initialData={initialData} {...props} />
+    </Form>
+  );
+}
+
+export default withProjects(withApi(withOrganization(RuleFormContainer)));
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/ruleForm.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
similarity index 55%
rename from src/sentry/static/sentry/app/views/settings/projectIncidentRules/ruleForm.tsx
rename to src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
index 5b2ca7aeb2..c738949bd4 100644
--- a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/ruleForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
@@ -5,7 +5,7 @@ import moment from 'moment-timezone';
 import styled from 'react-emotion';
 
 import {Client} from 'app/api';
-import {Config, EventsStatsData, Organization, Project} from 'app/types';
+import {Config, Organization, Project} from 'app/types';
 import {PanelAlert} from 'app/components/panels';
 import {SeriesDataUnit} from 'app/types/echarts';
 import {addErrorMessage} from 'app/actionCreators/indicator';
@@ -13,23 +13,19 @@ import {getFormattedDate} from 'app/utils/dates';
 import {t} from 'app/locale';
 import EventsRequest from 'app/views/events/utils/eventsRequest';
 import Form from 'app/views/settings/components/forms/form';
-import FormField from 'app/views/settings/components/forms/formField';
 import JsonForm from 'app/views/settings/components/forms/jsonForm';
 import LoadingMask from 'app/components/loadingMask';
 import Placeholder from 'app/components/placeholder';
 import withApi from 'app/utils/withApi';
 import withConfig from 'app/utils/withConfig';
-import withOrganization from 'app/utils/withOrganization';
-import withProject from 'app/utils/withProject';
-import SearchBar from 'app/views/events/searchBar';
 
 import {
   AlertRuleAggregations,
   AlertRuleThreshold,
   AlertRuleThresholdType,
-} from './constants';
-import {IncidentRule} from './types';
-import IncidentRulesChart from './chart';
+} from '../constants';
+import {IncidentRule} from '../types';
+import IncidentRulesChart from '../chart';
 
 type AlertRuleThresholdKey = {
   [AlertRuleThreshold.INCIDENT]: 'alertThreshold';
@@ -50,18 +46,6 @@ enum TimeWindow {
 
 type TimeWindowMapType = {[key in TimeWindow]: string};
 
-const TIME_WINDOW_MAP: TimeWindowMapType = {
-  [TimeWindow.ONE_MINUTE]: t('1 minute'),
-  [TimeWindow.FIVE_MINUTES]: t('5 minutes'),
-  [TimeWindow.TEN_MINUTES]: t('10 minutes'),
-  [TimeWindow.FIFTEEN_MINUTES]: t('15 minutes'),
-  [TimeWindow.THIRTY_MINUTES]: t('30 minutes'),
-  [TimeWindow.ONE_HOUR]: t('1 hour'),
-  [TimeWindow.TWO_HOURS]: t('2 hours'),
-  [TimeWindow.FOUR_HOURS]: t('4 hours'),
-  [TimeWindow.ONE_DAY]: t('24 hours'),
-};
-
 const TIME_WINDOW_TO_PERIOD: TimeWindowMapType = {
   [TimeWindow.ONE_MINUTE]: '12h',
   [TimeWindow.FIVE_MINUTES]: '12h',
@@ -76,14 +60,13 @@ const TIME_WINDOW_TO_PERIOD: TimeWindowMapType = {
 
 const DEFAULT_TIME_WINDOW = 60;
 const DEFAULT_METRIC = [AlertRuleAggregations.TOTAL];
-const DEFAULT_MAX_THRESHOLD = 100;
 
 type Props = {
   api: Client;
   config: Config;
-  data: EventsStatsData;
   organization: Organization;
-  project: Project;
+  project?: Project;
+  projects?: Project[];
   initialData?: IncidentRule;
 };
 
@@ -97,14 +80,12 @@ type State = {
   maxThreshold: number | null;
 };
 
-class RuleForm extends React.Component<Props, State> {
+class TriggerForm extends React.Component<Props, State> {
   static contextTypes = {
     form: PropTypes.any,
   };
 
-  static defaultProps = {
-    data: [],
-  };
+  static defaultProps = {};
 
   state = {
     aggregations: this.props.initialData
@@ -278,12 +259,11 @@ class RuleForm extends React.Component<Props, State> {
   };
 
   render() {
-    const {api, config, organization, project} = this.props;
+    const {api, config, organization, projects, project} = this.props;
     const {
       aggregations,
       alertThreshold,
       resolveThreshold,
-      maxThreshold,
       isInverted,
       timeWindow,
     } = this.state;
@@ -293,7 +273,7 @@ class RuleForm extends React.Component<Props, State> {
         <EventsRequest
           api={api}
           organization={organization}
-          project={[parseInt(project.id, 10)]}
+          project={[(project && parseInt(project.id, 10)) || 1]}
           interval={`${timeWindow}s`}
           period={this.getPeriodForTimeWindow(timeWindow)}
           yAxis={
@@ -307,37 +287,6 @@ class RuleForm extends React.Component<Props, State> {
               maxValue = maxBy(timeseriesData[0].data, ({value}) => value);
             }
 
-            // Take the max value from chart data OR use a static default value
-            const defaultMaxThresholdOrDefault =
-              (maxValue && maxValue.value) || DEFAULT_MAX_THRESHOLD;
-
-            // If not inverted, the alert threshold will be the upper bound
-            // If we have a stateful max threshold (e.g. from input field), use that value, otherwise use a default
-            // If this is the lower bound, then max should be the max of: stateful max threshold, or the default
-            // This logic is inverted for the resolve threshold
-            const alertMaxThreshold = !isInverted
-              ? {
-                  max:
-                    maxThreshold === null ? defaultMaxThresholdOrDefault : maxThreshold,
-                }
-              : resolveThreshold !== null && {
-                  max:
-                    maxThreshold && maxThreshold > defaultMaxThresholdOrDefault
-                      ? maxThreshold
-                      : defaultMaxThresholdOrDefault,
-                };
-            const resolveMaxThreshold = !isInverted
-              ? alertThreshold !== null && {
-                  max:
-                    maxThreshold && maxThreshold > defaultMaxThresholdOrDefault
-                      ? maxThreshold
-                      : defaultMaxThresholdOrDefault,
-                }
-              : {
-                  max:
-                    maxThreshold === null ? defaultMaxThresholdOrDefault : maxThreshold,
-                };
-
             return (
               <React.Fragment>
                 {loading ? (
@@ -367,172 +316,100 @@ class RuleForm extends React.Component<Props, State> {
                       resolveThreshold={resolveThreshold}
                       isInverted={isInverted}
                       data={timeseriesData}
+                      projects={projects}
                     />
                   </React.Fragment>
                 )}
-
-                <div>
-                  <TransparentLoadingMask visible={loading} />
-                  <JsonForm
-                    renderHeader={() => {
-                      return (
-                        <PanelAlert type="warning">
-                          {t(
-                            'Sentry will automatically digest alerts sent by some services to avoid flooding your inbox with individual issue notifications. Use the sliders to control frequency.'
-                          )}
-                        </PanelAlert>
-                      );
-                    }}
-                    forms={[
-                      {
-                        title: t('Metric'),
-                        fields: [
-                          {
-                            name: 'aggregations',
-                            type: 'select',
-                            label: t('Metric'),
-                            help: t('Choose which metric to display on the Y-axis'),
-                            choices: [
-                              [AlertRuleAggregations.UNIQUE_USERS, 'Users Affected'],
-                              [AlertRuleAggregations.TOTAL, 'Events'],
-                            ],
-                            required: true,
-                            setValue: value => (value && value.length ? value[0] : value),
-                            getValue: value => [value],
-                            onChange: this.handleChangeMetric,
-                          },
-                          {
-                            name: 'query',
-                            type: 'custom',
-                            label: t('Filter'),
-                            defaultValue: '',
-                            placeholder: 'error.type:TypeError',
-                            help: t(
-                              'You can apply standard Sentry filter syntax to filter by status, user, etc.'
-                            ),
-                            Component: props => {
-                              return (
-                                <FormField {...props}>
-                                  {({onChange, onBlur, onKeyDown}) => {
-                                    return (
-                                      <SearchBar
-                                        useFormWrapper={false}
-                                        organization={organization}
-                                        onChange={onChange}
-                                        onBlur={onBlur}
-                                        onKeyDown={onKeyDown}
-                                        onSearch={query => onChange(query, {})}
-                                      />
-                                    );
-                                  }}
-                                </FormField>
-                              );
-                            },
-                          },
-                          {
-                            name: 'alertThreshold',
-                            type: 'range',
-                            label: t('Incident Boundary'),
-                            help: !isInverted
-                              ? t(
-                                  'Anything trending above this limit will trigger an Incident'
-                                )
-                              : t(
-                                  'Anything trending below this limit will trigger an Incident'
-                                ),
-                            onChange: this.handleChangeIncidentThresholdInput,
-                            showCustomInput: true,
-                            required: true,
-                            min: 1,
-                            ...alertMaxThreshold,
-                          },
-                          {
-                            name: 'resolveThreshold',
-                            type: 'range',
-                            label: t('Resolution Boundary'),
-                            help: !isInverted
-                              ? t(
-                                  'Anything trending below this limit will resolve an Incident'
-                                )
-                              : t(
-                                  'Anything trending above this limit will resolve an Incident'
-                                ),
-                            onChange: this.handleChangeResolutionThresholdInput,
-                            showCustomInput: true,
-                            placeholder: resolveThreshold === null ? t('Off') : '',
-                            min: 1,
-                            ...resolveMaxThreshold,
-                          },
-                          {
-                            name: 'thresholdType',
-                            type: 'boolean',
-                            label: t('Reverse the Boundaries'),
-                            defaultValue: AlertRuleThresholdType.ABOVE,
-                            help: t(
-                              'This is a metric that needs to stay above a certain threshold'
-                            ),
-                            onChange: this.handleChangeThresholdType,
-                          },
-                          {
-                            name: 'timeWindow',
-                            type: 'select',
-                            label: t('Time Window'),
-                            help: t('The time window to use when evaluating the Metric'),
-                            onChange: this.handleTimeWindowChange,
-                            choices: Object.entries(TIME_WINDOW_MAP),
-                            required: true,
-                          },
-                          {
-                            name: 'name',
-                            type: 'text',
-                            label: t('Name'),
-                            help: t(
-                              'Give your Incident Rule a name so it is easy to manage later'
-                            ),
-                            placeholder: t('My Incident Rule Name'),
-                            required: true,
-                          },
-                        ],
-                      },
-                    ]}
-                  />
-                </div>
               </React.Fragment>
             );
           }}
         </EventsRequest>
+
+        <div>
+          <JsonForm
+            renderHeader={() => {
+              return (
+                <PanelAlert type="warning">
+                  {t(
+                    'Sentry will automatically digest alerts sent by some services to avoid flooding your inbox with individual issue notifications. Use the sliders to control frequency.'
+                  )}
+                </PanelAlert>
+              );
+            }}
+            forms={[
+              {
+                title: t('Metric'),
+                fields: [
+                  {
+                    name: 'name',
+                    type: 'text',
+                    label: t('Label'),
+                    help: t('This will prefix alerts created by this trigger'),
+                    placeholder: t('SEV-0'),
+                    required: true,
+                  },
+                  {
+                    name: 'alertThreshold',
+                    type: 'range',
+                    label: t('Incident Boundary'),
+                    help: !isInverted
+                      ? t('Anything trending above this limit will trigger an Incident')
+                      : t('Anything trending below this limit will trigger an Incident'),
+                    onChange: this.handleChangeIncidentThresholdInput,
+                    showCustomInput: true,
+                    required: true,
+                    min: 1,
+                  },
+                  {
+                    name: 'resolveThreshold',
+                    type: 'range',
+                    label: t('Resolution Boundary'),
+                    help: !isInverted
+                      ? t('Anything trending below this limit will resolve an Incident')
+                      : t('Anything trending above this limit will resolve an Incident'),
+                    onChange: this.handleChangeResolutionThresholdInput,
+                    showCustomInput: true,
+                    placeholder: resolveThreshold === null ? t('Off') : '',
+                    min: 1,
+                  },
+                  {
+                    name: 'thresholdType',
+                    type: 'boolean',
+                    label: t('Reverse the Boundaries'),
+                    defaultValue: AlertRuleThresholdType.ABOVE,
+                    help: t(
+                      'This is a metric that needs to stay above a certain threshold'
+                    ),
+                    onChange: this.handleChangeThresholdType,
+                  },
+                ],
+              },
+            ]}
+          />
+        </div>
       </React.Fragment>
     );
   }
 }
 
-type RuleFormContainerProps = {
-  api: Client;
-  config: Config;
-  organization: Organization;
-  project: Project;
+type TriggerFormContainerProps = {
+  initialData?: IncidentRule;
   orgId: string;
-  projectId: string;
   incidentRuleId?: string;
-  initialData?: IncidentRule;
   onSubmitSuccess?: Function;
-};
+} & React.ComponentProps<typeof TriggerForm>;
 
-function RuleFormContainer({
-  api,
-  organization,
-  project,
+function TriggerFormContainer({
   orgId,
-  projectId,
   incidentRuleId,
   initialData,
   onSubmitSuccess,
   ...props
-}: RuleFormContainerProps) {
+}: TriggerFormContainerProps) {
   return (
     <Form
       apiMethod={incidentRuleId ? 'PUT' : 'POST'}
-      apiEndpoint={`/projects/${orgId}/${projectId}/alert-rules/${
+      apiEndpoint={`/projects/${orgId}/alert-rules/${
         incidentRuleId ? `${incidentRuleId}/` : ''
       }`}
       initialData={{
@@ -545,13 +422,7 @@ function RuleFormContainer({
       saveOnBlur={false}
       onSubmitSuccess={onSubmitSuccess}
     >
-      <RuleForm
-        api={api}
-        project={project}
-        organization={organization}
-        initialData={initialData}
-        {...props}
-      />
+      <TriggerForm initialData={initialData} {...props} />
     </Form>
   );
 }
@@ -562,4 +433,4 @@ const TransparentLoadingMask = styled(LoadingMask)<{visible: boolean}>`
   z-index: 1;
 `;
 
-export default withConfig(withApi(withOrganization(withProject(RuleFormContainer))));
+export default withConfig(withApi(TriggerFormContainer));
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/list.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/list.tsx
new file mode 100644
index 0000000000..06c6e83e8d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/list.tsx
@@ -0,0 +1,79 @@
+import React from 'react';
+import styled, {css} from 'react-emotion';
+
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import {t} from 'app/locale';
+import Button from 'app/components/button';
+import space from 'app/styles/space';
+
+type Props = {};
+
+export default class TriggersList extends React.Component<Props> {
+  render() {
+    return (
+      <Panel>
+        <PanelHeaderGrid>
+          <div>{t('Label')}</div>
+          <div>{t('Condition')}</div>
+          <div>{t('Actions')}</div>
+        </PanelHeaderGrid>
+        <PanelBody>
+          <Grid>
+            <Label>SEV-0</Label>
+            <Condition>
+              <MainCondition>1% increase in Error Rate</MainCondition>
+              <SecondaryCondition>
+                Auto-resolves when metric falls below 1%
+              </SecondaryCondition>
+            </Condition>
+            <Actions>
+              <ul>
+                <li>Email members of #team-billing</li>
+              </ul>
+
+              <Button type="default" icon="icon-edit" size="small">
+                Edit
+              </Button>
+            </Actions>
+          </Grid>
+        </PanelBody>
+      </Panel>
+    );
+  }
+}
+
+const gridCss = css`
+  display: grid;
+  grid-template-columns: 1fr 2fr 3fr;
+  grid-gap: ${space(1)};
+  align-items: center;
+`;
+
+const PanelHeaderGrid = styled(PanelHeader)`
+  ${gridCss};
+`;
+
+const Grid = styled('div')`
+  ${gridCss};
+  padding: ${space(2)};
+`;
+
+const Cell = styled('div')``;
+
+const Label = styled(Cell)`
+  font-size: 1.2em;
+`;
+
+const Condition = styled(Cell)``;
+
+const MainCondition = styled('div')``;
+const SecondaryCondition = styled('div')`
+  font-size: ${p => p.theme.fontSizeSmall};
+  color: ${p => p.theme.gray2};
+`;
+
+const Actions = styled(Cell)`
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/types.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
similarity index 93%
rename from src/sentry/static/sentry/app/views/settings/projectIncidentRules/types.tsx
rename to src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
index 346c33f6dc..4e05c73e12 100644
--- a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/types.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
@@ -1,5 +1,6 @@
 export type IncidentRule = {
   aggregations: number[];
+  aggregation?: number;
   alertThreshold: number;
   dataset: 'events';
   dateAdded: string;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
index 5643d58c81..1d30238c39 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
@@ -43,6 +43,13 @@ const organizationNavigation = [
         description: t('Manage user membership for an organization'),
         id: 'members',
       },
+      {
+        path: `${pathPrefix}/incident-rules/`,
+        title: t('Incident Rules'),
+        show: ({features}) => features.has('incidents'),
+        description: t('Manage Incident Rules'),
+        id: 'incident-rules',
+      },
       {
         path: `${pathPrefix}/auth/`,
         title: t('Auth'),
diff --git a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
index bd15e6b4ff..15f009592d 100644
--- a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
@@ -24,13 +24,6 @@ export default function getConfiguration({project}) {
           title: t('Alerts'),
           description: t('Manage alerts and alert rules for a project'),
         },
-        {
-          path: `${pathPrefix}/incident-rules/`,
-          title: t('Incident Rules'),
-          show: ({features}) => features.has('incidents'),
-          description: t('Manage Incident Rules'),
-          id: 'incident-rules',
-        },
         {
           path: `${pathPrefix}/tags/`,
           title: t('Tags'),
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/create.tsx b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/create.tsx
deleted file mode 100644
index dba1612f17..0000000000
--- a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/create.tsx
+++ /dev/null
@@ -1,35 +0,0 @@
-import {RouteComponentProps} from 'react-router/lib/Router';
-import React from 'react';
-
-import {t} from 'app/locale';
-import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-
-import RuleForm from './ruleForm';
-
-type RouteParams = {orgId: string; projectId: string};
-
-class IncidentRulesCreate extends React.Component<RouteComponentProps<RouteParams, {}>> {
-  handleSubmitSuccess = data => {
-    const {orgId, projectId} = this.props.params;
-    this.props.router.push(
-      `/settings/${orgId}/projects/${projectId}/incident-rules/${data.id}/`
-    );
-  };
-
-  render() {
-    const {orgId, projectId} = this.props.params;
-
-    return (
-      <div>
-        <SettingsPageHeader title={t('New Incident Rule')} />
-        <RuleForm
-          orgId={orgId}
-          projectId={projectId}
-          onSubmitSuccess={this.handleSubmitSuccess}
-        />
-      </div>
-    );
-  }
-}
-
-export default IncidentRulesCreate;
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/details.tsx b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/details.tsx
deleted file mode 100644
index cdd053c03d..0000000000
--- a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/details.tsx
+++ /dev/null
@@ -1,57 +0,0 @@
-import {RouteComponentProps} from 'react-router/lib/Router';
-import React from 'react';
-
-import {addSuccessMessage} from 'app/actionCreators/indicator';
-import {t} from 'app/locale';
-import AsyncView from 'app/views/asyncView';
-import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-
-import {IncidentRule} from './types';
-import RuleForm from './ruleForm';
-
-type State = {
-  rule: IncidentRule;
-} & AsyncView['state'];
-
-type RouteParams = {
-  orgId: string;
-  projectId: string;
-  incidentRuleId: string;
-};
-type Props = RouteComponentProps<RouteParams, {}>;
-
-class IncidentRulesDetails extends AsyncView<Props, State> {
-  getEndpoints() {
-    const {orgId, projectId, incidentRuleId} = this.props.params;
-
-    return [
-      ['rule', `/projects/${orgId}/${projectId}/alert-rules/${incidentRuleId}/`] as [
-        string,
-        string
-      ],
-    ];
-  }
-
-  handleSubmitSuccess = () => {
-    addSuccessMessage(t('Successfully saved Incident Rule'));
-  };
-
-  renderBody() {
-    const {orgId, projectId, incidentRuleId} = this.props.params;
-    return (
-      <div>
-        <SettingsPageHeader title={t('Edit Incident Rule')} />
-
-        <RuleForm
-          orgId={orgId}
-          projectId={projectId}
-          incidentRuleId={incidentRuleId}
-          onSubmitSuccess={this.handleSubmitSuccess}
-          initialData={this.state.rule}
-        />
-      </div>
-    );
-  }
-}
-
-export default IncidentRulesDetails;
diff --git a/tests/js/spec/views/settings/projectIncidentRules/create.spec.jsx b/tests/js/spec/views/settings/incidentRules/create.spec.jsx
similarity index 83%
rename from tests/js/spec/views/settings/projectIncidentRules/create.spec.jsx
rename to tests/js/spec/views/settings/incidentRules/create.spec.jsx
index cfcdde3568..28d6e1d78f 100644
--- a/tests/js/spec/views/settings/projectIncidentRules/create.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/create.spec.jsx
@@ -2,7 +2,7 @@ import {mount} from 'enzyme';
 import React from 'react';
 
 import {initializeOrg} from 'app-test/helpers/initializeOrg';
-import IncidentRulesCreate from 'app/views/settings/projectIncidentRules/create';
+import IncidentRulesCreate from 'app/views/settings/incidentRules/create';
 
 describe('Incident Rules Create', function() {
   it('renders', function() {
diff --git a/tests/js/spec/views/settings/projectIncidentRules/details.spec.jsx b/tests/js/spec/views/settings/incidentRules/details.spec.jsx
similarity index 67%
rename from tests/js/spec/views/settings/projectIncidentRules/details.spec.jsx
rename to tests/js/spec/views/settings/incidentRules/details.spec.jsx
index 3e344aa833..aad3852754 100644
--- a/tests/js/spec/views/settings/projectIncidentRules/details.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/details.spec.jsx
@@ -2,21 +2,20 @@ import {mount} from 'enzyme';
 import React from 'react';
 
 import {initializeOrg} from 'app-test/helpers/initializeOrg';
-import IncidentRulesDetails from 'app/views/settings/projectIncidentRules/details';
+import IncidentRulesDetails from 'app/views/settings/incidentRules/details';
 
 describe('Incident Rules Details', function() {
   it('renders', function() {
-    const {organization, project, routerContext} = initializeOrg();
+    const {organization, routerContext} = initializeOrg();
     const rule = TestStubs.IncidentRule();
     const req = MockApiClient.addMockResponse({
-      url: `/projects/${organization.slug}/${project.slug}/alert-rules/${rule.id}/`,
+      url: `/organizations/${organization.slug}/alert-rules/${rule.id}/`,
       body: rule,
     });
     mount(
       <IncidentRulesDetails
         params={{
           orgId: organization.slug,
-          projectId: project.slug,
           incidentRuleId: rule.id,
         }}
         organization={organization}
diff --git a/tests/js/spec/views/settings/projectIncidentRules/list.spec.jsx b/tests/js/spec/views/settings/incidentRules/list.spec.jsx
similarity index 65%
rename from tests/js/spec/views/settings/projectIncidentRules/list.spec.jsx
rename to tests/js/spec/views/settings/incidentRules/list.spec.jsx
index 6f345a9540..4797ba8b55 100644
--- a/tests/js/spec/views/settings/projectIncidentRules/list.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/list.spec.jsx
@@ -2,19 +2,19 @@ import {mount} from 'enzyme';
 import React from 'react';
 
 import {initializeOrg} from 'app-test/helpers/initializeOrg';
-import IncidentRulesList from 'app/views/settings/projectIncidentRules/list';
+import IncidentRulesList from 'app/views/settings/incidentRules/list';
 
 describe('Incident Rules List', function() {
   it('renders', function() {
-    const {organization, project, routerContext} = initializeOrg();
+    const {organization, routerContext} = initializeOrg();
     const rule = TestStubs.IncidentRule();
     const req = MockApiClient.addMockResponse({
-      url: `/projects/${organization.slug}/${project.slug}/alert-rules/`,
+      url: `/organizations/${organization.slug}/alert-rules/`,
       body: [rule],
     });
     const wrapper = mount(
       <IncidentRulesList
-        params={{orgId: organization.slug, projectId: project.slug}}
+        params={{orgId: organization.slug}}
         organization={organization}
       />,
       routerContext
diff --git a/tests/sentry/api/serializers/test_alert_rule.py b/tests/sentry/api/serializers/test_alert_rule.py
index d3723cd755..3c8b0fd960 100644
--- a/tests/sentry/api/serializers/test_alert_rule.py
+++ b/tests/sentry/api/serializers/test_alert_rule.py
@@ -16,9 +16,6 @@ class BaseAlertRuleSerializerTest(object):
     def assert_alert_rule_serialized(self, alert_rule, result):
         assert result["id"] == six.text_type(alert_rule.id)
         assert result["organizationId"] == six.text_type(alert_rule.organization_id)
-        assert result["projectId"] == six.text_type(
-            alert_rule.query_subscriptions.first().project_id
-        )
         assert result["name"] == alert_rule.name
         assert result["thresholdType"] == alert_rule.threshold_type
         assert result["dataset"] == alert_rule.dataset
