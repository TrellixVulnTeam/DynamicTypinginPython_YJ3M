commit d0f68c739ed9da4a24c8c64f45924f11f076d3bd
Author: ted kaemming <ted@kaemming.com>
Date:   Tue Mar 13 10:33:37 2018 -0700

    ref(tagstore): Add `date_added` to `create_event_tags` (#7588)

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 5c8cff8dc4..e6f4f89537 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -845,6 +845,7 @@ class EventManager(object):
                 environment_id=environment.id,
                 event_id=event.id,
                 tags=tags,
+                date_added=event.datetime,
             )
 
         if event_user:
diff --git a/src/sentry/tagstore/base.py b/src/sentry/tagstore/base.py
index 1cf888af2a..0619208ebd 100644
--- a/src/sentry/tagstore/base.py
+++ b/src/sentry/tagstore/base.py
@@ -248,7 +248,8 @@ class TagStorage(Service):
         """
         raise NotImplementedError
 
-    def create_event_tags(self, project_id, group_id, environment_id, event_id, tags):
+    def create_event_tags(self, project_id, group_id, environment_id,
+                          event_id, tags, date_added=None):
         """
         >>> create_event_tags(1, 2, 3, 4, [('foo', 'bar'), ('baz', 'qux')])
         """
diff --git a/src/sentry/tagstore/legacy/backend.py b/src/sentry/tagstore/legacy/backend.py
index 0e4b45cf06..15a8633f50 100644
--- a/src/sentry/tagstore/legacy/backend.py
+++ b/src/sentry/tagstore/legacy/backend.py
@@ -193,7 +193,11 @@ class LegacyTagStorage(TagStorage):
         return GroupTagValue.objects.get_or_create(
             project_id=project_id, group_id=group_id, key=key, value=value, **kwargs)
 
-    def create_event_tags(self, project_id, group_id, environment_id, event_id, tags):
+    def create_event_tags(self, project_id, group_id, environment_id,
+                          event_id, tags, date_added=None):
+        if date_added is None:
+            date_added = timezone.now()
+
         tag_ids = []
         for key, value in tags:
             tagkey, _ = self.get_or_create_tag_key(project_id, environment_id, key)
@@ -201,8 +205,6 @@ class LegacyTagStorage(TagStorage):
                 project_id, environment_id, key, value)
             tag_ids.append((tagkey.id, tagvalue.id))
 
-        date_added = timezone.now()
-
         try:
             # don't let a duplicate break the outer transaction
             with transaction.atomic():
diff --git a/src/sentry/tagstore/v2/backend.py b/src/sentry/tagstore/v2/backend.py
index 6b7a2d4e10..30778bbdce 100644
--- a/src/sentry/tagstore/v2/backend.py
+++ b/src/sentry/tagstore/v2/backend.py
@@ -283,9 +283,13 @@ class V2TagStorage(TagStorage):
         gtv.value = value
         return (gtv, created)
 
-    def create_event_tags(self, project_id, group_id, environment_id, event_id, tags):
+    def create_event_tags(self, project_id, group_id, environment_id,
+                          event_id, tags, date_added=None):
         assert environment_id is not None
 
+        if date_added is None:
+            date_added = timezone.now()
+
         tag_ids = []
         for key, value in tags:
             tagkey, _ = self.get_or_create_tag_key(project_id, environment_id, key)
@@ -293,8 +297,6 @@ class V2TagStorage(TagStorage):
                 project_id, environment_id, key, value, key_id=tagkey.id)
             tag_ids.append((tagkey.id, tagvalue.id))
 
-        date_added = timezone.now()
-
         try:
             # don't let a duplicate break the outer transaction
             with transaction.atomic():
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 1fdfea1fba..cb74f11dac 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -159,17 +159,22 @@ def plugin_post_process_group(plugin_slug, event, **kwargs):
     name='sentry.tasks.index_event_tags', default_retry_delay=60 * 5, max_retries=None
 )
 def index_event_tags(organization_id, project_id, event_id, tags,
-                     group_id, environment_id, **kwargs):
+                     group_id, environment_id, date_added=None, **kwargs):
     from sentry import tagstore
 
     Raven.tags_context({
         'project': project_id,
     })
 
+    create_event_tags_kwargs = {}
+    if date_added is not None:
+        create_event_tags_kwargs['date_added'] = date_added
+
     tagstore.create_event_tags(
         project_id=project_id,
         group_id=group_id,
         environment_id=environment_id,
         event_id=event_id,
         tags=tags,
+        **create_event_tags_kwargs
     )
