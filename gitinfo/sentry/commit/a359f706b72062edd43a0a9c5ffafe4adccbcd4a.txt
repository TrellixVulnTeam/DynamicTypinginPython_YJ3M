commit a359f706b72062edd43a0a9c5ffafe4adccbcd4a
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jan 30 16:33:28 2013 -0800

    move interface validation logic out of __init__ (fixes GH-753)

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index e0d5f748d6..88c11e374c 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -323,7 +323,11 @@ def validate_data(project, data, client=None):
             raise InvalidInterface('%r is not a valid interface name: %s' % (k, e))
 
         try:
-            data[import_path] = interface(**data.pop(k)).serialize()
+            inst = interface(**data.pop(k))
+            inst.validate()
+            data[import_path] = inst.serialize()
+        except AssertionError, e:
+            raise InvalidData('Unable to validate interface, %r: %s' % (k, e))
         except Exception, e:
             logger.error('Client %r passed an invalid value for interface %r',
                 client or '<unknown client>',
diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index 14db065ecc..53c594692f 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -162,11 +162,12 @@ class Message(Interface):
     """
 
     def __init__(self, message, params=()):
-        assert len(message) <= 1000
-
         self.message = message
         self.params = params
 
+    def validate(self):
+        assert len(self.message) <= 1000
+
     def serialize(self):
         return {
             'message': self.message,
@@ -298,9 +299,6 @@ class Stacktrace(Interface):
             if 'abs_path' in frame and 'filename' not in frame:
                 frame['filename'] = frame.pop('abs_path', None)
 
-            # ensure we've got the correct required values
-            assert frame.get('filename') or frame.get('function') or frame.get('module')
-
             # lineno should be an int
             if 'lineno' in frame:
                 if frame['lineno'] is None:
@@ -326,6 +324,11 @@ class Stacktrace(Interface):
                     frame['abs_path'] = abs_path
                     frame['filename'] = urlparts.path
 
+    def validate(self):
+        for frame in self.frames:
+            # ensure we've got the correct required values
+            assert frame.get('filename') or frame.get('function') or frame.get('module')
+
     def serialize(self):
         return {
             'frames': self.frames,
diff --git a/tests/sentry/interfaces/stacktrace/tests.py b/tests/sentry/interfaces/stacktrace/tests.py
index a6b9c6f9bd..32e07f2c50 100644
--- a/tests/sentry/interfaces/stacktrace/tests.py
+++ b/tests/sentry/interfaces/stacktrace/tests.py
@@ -11,17 +11,17 @@ from sentry.testutils import TestCase
 
 
 class StacktraceTest(TestCase):
-    def test_requires_filename_and_lineno(self):
-        self.assertRaises(AssertionError, Stacktrace, frames=[{
-            'lineno': 1,
-        }])
+    def test_requires_filename(self):
+        with self.assertRaises(AssertionError):
+            Stacktrace(frames=[]).validate()
+
         Stacktrace(frames=[{
             'filename': 'foo.py',
-        }])
+        }]).validate()
         Stacktrace(frames=[{
             'lineno': 1,
             'filename': 'foo.py',
-        }])
+        }]).validate()
 
     def test_allows_abs_path_without_filename(self):
         interface = Stacktrace(frames=[{
