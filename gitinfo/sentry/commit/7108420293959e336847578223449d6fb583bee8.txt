commit 7108420293959e336847578223449d6fb583bee8
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Jan 27 21:19:37 2019 -0800

    feat(monitors): Add endpoint for listing monitors

diff --git a/src/sentry/api/endpoints/organization_monitors.py b/src/sentry/api/endpoints/organization_monitors.py
new file mode 100644
index 0000000000..af0f300151
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_monitors.py
@@ -0,0 +1,34 @@
+from __future__ import absolute_import
+
+from sentry import features
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.paginator import OffsetPaginator
+from sentry.api.serializers import serialize
+from sentry.models import Monitor
+
+
+class OrganizationMonitorsEndpoint(OrganizationEndpoint):
+    def get(self, request, organization):
+        """
+        Retrieve monitors for an organization
+        `````````````````````````````````````
+
+        :pparam string organization_slug: the slug of the organization
+        :auth: required
+        """
+        if not features.has('organizations:monitors',
+                            organization, actor=request.user):
+            raise ResourceDoesNotExist
+
+        queryset = Monitor.objects.filter(
+            organization_id=organization.id,
+        )
+
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            order_by='name',
+            on_results=lambda x: serialize(x, request.user),
+            paginator_cls=OffsetPaginator,
+        )
diff --git a/src/sentry/api/serializers/models/monitor.py b/src/sentry/api/serializers/models/monitor.py
new file mode 100644
index 0000000000..f705f24007
--- /dev/null
+++ b/src/sentry/api/serializers/models/monitor.py
@@ -0,0 +1,17 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.api.serializers import Serializer, register
+from sentry.models import Monitor
+
+
+@register(Monitor)
+class MonitorSerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        return {
+            'id': six.text_type(obj.guid),
+            'status': obj.get_status_display(),
+            'name': obj.name,
+            'dateCreated': obj.date_added,
+        }
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index d0f9159651..58015c165b 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -81,6 +81,7 @@ from .endpoints.organization_member_issues_bookmarked import OrganizationMemberI
 from .endpoints.organization_member_issues_viewed import OrganizationMemberIssuesViewedEndpoint
 from .endpoints.organization_member_unreleased_commits import OrganizationMemberUnreleasedCommitsEndpoint
 from .endpoints.organization_member_team_details import OrganizationMemberTeamDetailsEndpoint
+from .endpoints.organization_monitors import OrganizationMonitorsEndpoint
 from .endpoints.organization_onboarding_tasks import OrganizationOnboardingTaskEndpoint
 from .endpoints.organization_index import OrganizationIndexEndpoint
 from .endpoints.organization_plugins import OrganizationPluginsEndpoint
@@ -558,6 +559,10 @@ urlpatterns = patterns(
         OrganizationMemberIndexEndpoint.as_view(),
         name='sentry-api-0-organization-member-index'
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/monitors/$',
+        OrganizationMonitorsEndpoint.as_view(),
+    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/searches/$',
         OrganizationSearchesEndpoint.as_view(),
diff --git a/tests/sentry/api/endpoints/test_organization_monitors.py b/tests/sentry/api/endpoints/test_organization_monitors.py
new file mode 100644
index 0000000000..9610256930
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_monitors.py
@@ -0,0 +1,43 @@
+from __future__ import absolute_import
+
+import six
+
+from exam import fixture
+
+from sentry.models import Monitor
+from sentry.testutils import APITestCase
+
+
+class OrganizationProjectsTest(APITestCase):
+    @fixture
+    def org(self):
+        return self.create_organization(owner=self.user, name='baz')
+
+    @fixture
+    def team(self):
+        return self.create_team(organization=self.org)
+
+    @fixture
+    def project(self):
+        return self.create_project(teams=[self.team])
+
+    @fixture
+    def path(self):
+        return u'/api/0/organizations/{}/monitors/'.format(self.org.slug)
+
+    def check_valid_response(self, response, expected_monitors):
+        assert response.status_code == 200, response.content
+        assert [six.text_type(monitor.guid) for monitor in expected_monitors] == [
+            six.text_type(monitor_resp['id']) for monitor_resp in response.data]
+
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        monitor = Monitor.objects.create(
+            project_id=self.project.id,
+            organization_id=self.org.id,
+            name='My Monitor',
+        )
+        with self.feature({'organizations:monitors': True}):
+            response = self.client.get(self.path)
+        self.check_valid_response(response, [monitor])
