commit bc38bf67981489166a3cae8df4fe1d41d25f9263
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Fri Feb 26 13:10:01 2016 -0800

    Added integration tests for data scrubbers

diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index cdd074ca88..65af7d6dc5 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -362,7 +362,7 @@ class StoreView(APIView):
         scrub_data_key = 'sentry:scrub_data'
         scrub_data = org_options.get(scrub_data_key, False)
         if not scrub_data:
-            scrub_data = project.get_option('sentry:scrub_data', True)
+            scrub_data = project.get_option(scrub_data_key, True)
         if scrub_data:
             # We filter data immediately before it ever gets into the queue
             sensitive_fields_key = 'sentry:sensitive_fields'
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index 97d9130ee2..3899b666cd 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -139,6 +139,145 @@ class StoreViewTest(TestCase):
         assert not call_data['sentry.interfaces.User'].get('ip_address')
         assert not call_data['sentry.interfaces.Http']['env'].get('REMOTE_ADDR')
 
+    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')
+    def test_scrubs_org_ip_address_override(self, mock_insert_data_to_database):
+        self.organization.update_option('sentry:scrub_ip_address', True)
+        self.project.update_option('sentry:scrub_ip_address', False)
+        body = {
+            "message": "foo bar",
+            "sentry.interfaces.User": {"ip_address": "127.0.0.1"},
+            "sentry.interfaces.Http": {
+                "method": "GET",
+                "url": "http://example.com/",
+                "env": {"REMOTE_ADDR": "127.0.0.1"}
+            },
+        }
+        resp = self._postWithHeader(body)
+        assert resp.status_code == 200, resp.content
+
+        call_data = mock_insert_data_to_database.call_args[0][0]
+        assert not call_data['sentry.interfaces.User'].get('ip_address')
+        assert not call_data['sentry.interfaces.Http']['env'].get('REMOTE_ADDR')
+
+    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')
+    def test_scrub_data_off(self, mock_insert_data_to_database):
+        self.project.update_option('sentry:scrub_data', False)
+        self.project.update_option('sentry:scrub_defaults', False)
+        body = {
+            "message": "foo bar",
+            "sentry.interfaces.User": {"ip_address": "127.0.0.1"},
+            "sentry.interfaces.Http": {
+                "method": "GET",
+                "url": "http://example.com/",
+                "data": "password=lol&foo=1&bar=2&baz=3"
+            },
+        }
+        resp = self._postWithHeader(body)
+        assert resp.status_code == 200, resp.content
+
+        call_data = mock_insert_data_to_database.call_args[0][0]
+        assert call_data['sentry.interfaces.Http']['data'] == 'password=lol&foo=1&bar=2&baz=3'
+
+    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')
+    def test_scrub_data_on(self, mock_insert_data_to_database):
+        self.project.update_option('sentry:scrub_data', True)
+        self.project.update_option('sentry:scrub_defaults', False)
+        body = {
+            "message": "foo bar",
+            "sentry.interfaces.User": {"ip_address": "127.0.0.1"},
+            "sentry.interfaces.Http": {
+                "method": "GET",
+                "url": "http://example.com/",
+                "data": "password=lol&foo=1&bar=2&baz=3"
+            },
+        }
+        resp = self._postWithHeader(body)
+        assert resp.status_code == 200, resp.content
+
+        call_data = mock_insert_data_to_database.call_args[0][0]
+        assert call_data['sentry.interfaces.Http']['data'] == 'password=lol&foo=1&bar=2&baz=3'
+
+    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')
+    def test_scrub_data_defaults(self, mock_insert_data_to_database):
+        self.project.update_option('sentry:scrub_data', True)
+        self.project.update_option('sentry:scrub_defaults', True)
+        body = {
+            "message": "foo bar",
+            "sentry.interfaces.User": {"ip_address": "127.0.0.1"},
+            "sentry.interfaces.Http": {
+                "method": "GET",
+                "url": "http://example.com/",
+                "data": "password=lol&foo=1&bar=2&baz=3"
+            },
+        }
+        resp = self._postWithHeader(body)
+        assert resp.status_code == 200, resp.content
+
+        call_data = mock_insert_data_to_database.call_args[0][0]
+        assert call_data['sentry.interfaces.Http']['data'] == 'password=[Filtered]&foo=1&bar=2&baz=3'
+
+    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')
+    def test_scrub_data_sensitive_fields(self, mock_insert_data_to_database):
+        self.project.update_option('sentry:scrub_data', True)
+        self.project.update_option('sentry:scrub_defaults', True)
+        self.project.update_option('sentry:sensitive_fields', ['foo', 'bar'])
+        body = {
+            "message": "foo bar",
+            "sentry.interfaces.User": {"ip_address": "127.0.0.1"},
+            "sentry.interfaces.Http": {
+                "method": "GET",
+                "url": "http://example.com/",
+                "data": "password=lol&foo=1&bar=2&baz=3"
+            },
+        }
+        resp = self._postWithHeader(body)
+        assert resp.status_code == 200, resp.content
+
+        call_data = mock_insert_data_to_database.call_args[0][0]
+        assert call_data['sentry.interfaces.Http']['data'] == 'password=[Filtered]&foo=[Filtered]&bar=[Filtered]&baz=3'
+
+    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')
+    def test_scrub_data_org_override(self, mock_insert_data_to_database):
+        self.organization.update_option('sentry:scrub_data', True)
+        self.project.update_option('sentry:scrub_data', False)
+        self.organization.update_option('sentry:scrub_defaults', True)
+        self.project.update_option('sentry:scrub_defaults', False)
+        body = {
+            "message": "foo bar",
+            "sentry.interfaces.User": {"ip_address": "127.0.0.1"},
+            "sentry.interfaces.Http": {
+                "method": "GET",
+                "url": "http://example.com/",
+                "data": "password=lol&foo=1&bar=2&baz=3"
+            },
+        }
+        resp = self._postWithHeader(body)
+        assert resp.status_code == 200, resp.content
+
+        call_data = mock_insert_data_to_database.call_args[0][0]
+        assert call_data['sentry.interfaces.Http']['data'] == 'password=[Filtered]&foo=1&bar=2&baz=3'
+
+    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')
+    def test_scrub_data_org_override_sensitive_fields(self, mock_insert_data_to_database):
+        self.organization.update_option('sentry:scrub_data', True)
+        self.organization.update_option('sentry:scrub_defaults', True)
+        self.organization.update_option('sentry:sensitive_fields', ['baz'])
+        self.project.update_option('sentry:sensitive_fields', ['foo', 'bar'])
+        body = {
+            "message": "foo bar",
+            "sentry.interfaces.User": {"ip_address": "127.0.0.1"},
+            "sentry.interfaces.Http": {
+                "method": "GET",
+                "url": "http://example.com/",
+                "data": "password=lol&foo=1&bar=2&baz=3"
+            },
+        }
+        resp = self._postWithHeader(body)
+        assert resp.status_code == 200, resp.content
+
+        call_data = mock_insert_data_to_database.call_args[0][0]
+        assert call_data['sentry.interfaces.Http']['data'] == 'password=[Filtered]&foo=[Filtered]&bar=[Filtered]&baz=[Filtered]'
+
 
 class CrossDomainXmlTest(TestCase):
     @fixture
