commit 7ffc61b8b475aa706d17f8d098e4ec7a2e8600a7
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Mon Jul 23 16:04:26 2018 -0700

    fix(integrations): GH and GHE adding repositories (#9137)
    
    * fix(integrations): GH and GHE adding repositories
    
    * make GHE actually work
    
    * remove if statement
    
    * fix tests

diff --git a/src/sentry/integrations/github/integration.py b/src/sentry/integrations/github/integration.py
index 21331a5a4a..8b19f960de 100644
--- a/src/sentry/integrations/github/integration.py
+++ b/src/sentry/integrations/github/integration.py
@@ -60,7 +60,10 @@ class GitHubIntegration(Integration, GitHubIssueBasic, RepositoryMixin):
         return GitHubAppsClient(integration=self.model)
 
     def get_repositories(self):
-        return self.get_client().get_repositories()
+        data = []
+        for repo in self.get_client().get_repositories():
+            data.append({'name': repo['name'], 'identifier': repo['full_name']})
+        return data
 
     def reinstall(self):
         self.reinstall_repositories()
diff --git a/src/sentry/integrations/github/repository.py b/src/sentry/integrations/github/repository.py
index 627c87c811..a6a54ddaf8 100644
--- a/src/sentry/integrations/github/repository.py
+++ b/src/sentry/integrations/github/repository.py
@@ -14,35 +14,6 @@ class GitHubRepositoryProvider(providers.IntegrationRepositoryProvider):
     logger = logging.getLogger('sentry.plugins.github')
     repo_provider = 'github'
 
-    def get_config(self, organization):
-        choices = []
-        for i in Integration.objects.filter(
-                organizations=organization, provider=self.repo_provider):
-            choices.append((i.id, i.name))
-
-        if not choices:
-            choices = [('', '')]
-
-        return [
-            {
-                'name': 'installation',
-                'label': 'GitHub Installation',
-                'type': 'choice',
-                'choices': choices,
-                'initial': choices[0][0],
-                'help': 'Select which GitHub installation to authenticate with.',
-                'required': True,
-            },
-            {
-                'name': 'name',
-                'label': 'Repository Name',
-                'type': 'text',
-                'placeholder': 'e.g. getsentry/sentry',
-                'help': 'Enter your repository name, including the owner.',
-                'required': True,
-            }
-        ]
-
     def _validate_repo(self, client, installation, repo):
         try:
             repo_data = client.get_repo(repo)
@@ -65,25 +36,24 @@ class GitHubRepositoryProvider(providers.IntegrationRepositoryProvider):
         return config
         ```
         """
-        if config.get('name') and config.get('installation'):
-            integration = Integration.objects.get(
-                id=config['installation'], organizations=organization)
-            installation = integration.get_installation(organization.id)
-            client = installation.get_client()
+        integration = Integration.objects.get(
+            id=config['installation'], organizations=organization)
+        installation = integration.get_installation(organization.id)
+        client = installation.get_client()
 
-            repo = self._validate_repo(client, installation, config['name'])
-            config['external_id'] = six.text_type(repo['id'])
-            config['integration_id'] = integration.id
+        repo = self._validate_repo(client, installation, config['identifier'])
+        config['external_id'] = six.text_type(repo['id'])
+        config['integration_id'] = integration.id
 
         return config
 
     def create_repository(self, organization, data):
         return {
-            'name': data['name'],
+            'name': data['identifier'],
             'external_id': data['external_id'],
-            'url': 'https://github.com/{}'.format(data['name']),
+            'url': 'https://github.com/{}'.format(data['identifier']),
             'config': {
-                'name': data['name'],
+                'name': data['identifier'],
             },
             'integration_id': data['integration_id']
         }
diff --git a/src/sentry/integrations/github_enterprise/integration.py b/src/sentry/integrations/github_enterprise/integration.py
index c007990d48..472214b4ff 100644
--- a/src/sentry/integrations/github_enterprise/integration.py
+++ b/src/sentry/integrations/github_enterprise/integration.py
@@ -56,7 +56,10 @@ class GitHubEnterpriseIntegration(Integration, GitHubIssueBasic, RepositoryMixin
         )
 
     def get_repositories(self):
-        return self.get_client().get_repositories()
+        data = []
+        for repo in self.get_client().get_repositories():
+            data.append({'name': repo['name'], 'identifier': repo['full_name']})
+        return data
 
     def message_from_error(self, exc):
         if isinstance(exc, ApiError):
diff --git a/src/sentry/integrations/github_enterprise/repository.py b/src/sentry/integrations/github_enterprise/repository.py
index a466589d9e..ecf0f5e99d 100644
--- a/src/sentry/integrations/github_enterprise/repository.py
+++ b/src/sentry/integrations/github_enterprise/repository.py
@@ -20,11 +20,11 @@ class GitHubEnterpriseRepositoryProvider(GitHubRepositoryProvider):
 
         base_url = integration.metadata.get('domain_name')
         return {
-            'name': data['name'],
+            'name': data['identifier'],
             'external_id': data['external_id'],
-            'url': 'https://{}/{}'.format(base_url, data['name']),
+            'url': 'https://{}/{}'.format(base_url, data['identifier']),
             'config': {
-                'name': data['name'],
+                'name': data['identifier'],
             },
             'integration_id': data['integration_id']
         }
diff --git a/tests/sentry/api/endpoints/test_organization_integration_repos.py b/tests/sentry/api/endpoints/test_organization_integration_repos.py
index b7ad893c3f..bfc9f5a10c 100644
--- a/tests/sentry/api/endpoints/test_organization_integration_repos.py
+++ b/tests/sentry/api/endpoints/test_organization_integration_repos.py
@@ -21,11 +21,13 @@ class OrganizationIntegrationReposTest(APITestCase):
 
     @patch('sentry.integrations.github.GitHubAppsClient.get_repositories', return_value=[])
     def test_simple(self, get_repositories):
-        get_repositories.return_value = [{'id': '1'}, {'id': '2'}]
+        get_repositories.return_value = [{'name': 'rad-repo', 'full_name': 'Example/rad-repo'},
+                                         {'name': 'cool-repo', 'full_name': 'Example/cool-repo'}]
         response = self.client.get(self.path, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data == {"repos": [{"id": "1"}, {"id": "2"}]}
+        assert response.data == {"repos": [{'name': 'rad-repo', 'identifier': 'Example/rad-repo'},
+                                           {'name': 'cool-repo', 'identifier': 'Example/cool-repo'}]}
 
     def test_no_repository_method(self):
         integration = Integration.objects.create(
diff --git a/tests/sentry/integrations/github/test_repository.py b/tests/sentry/integrations/github/test_repository.py
index 8ce9cf4e3c..1d52bd3aea 100644
--- a/tests/sentry/integrations/github/test_repository.py
+++ b/tests/sentry/integrations/github/test_repository.py
@@ -27,7 +27,7 @@ class GitHubAppsProviderTest(PluginTestCase):
         )
         integration.add_organization(organization.id)
         data = {
-            'name': 'getsentry/example-repo',
+            'identifier': 'getsentry/example-repo',
             'external_id': '654321',
             'integration_id': integration.id,
         }
