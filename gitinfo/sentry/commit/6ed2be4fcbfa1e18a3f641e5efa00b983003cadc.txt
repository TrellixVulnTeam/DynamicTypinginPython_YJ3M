commit 6ed2be4fcbfa1e18a3f641e5efa00b983003cadc
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Wed Dec 19 10:23:34 2018 -0800

    fix(api): Restrict project perms to direct access for owners in org endpoint (#11088)

diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index 582408504d..5f4ad5340c 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 from rest_framework.exceptions import PermissionDenied
 
-from sentry import roles
 from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import SentryPermission
@@ -10,8 +9,9 @@ from sentry.api.utils import (
     get_date_range_from_params,
     InvalidParams,
 )
+from sentry.auth.superuser import is_active_superuser
 from sentry.models import (
-    ApiKey, Authenticator, Environment, Organization, OrganizationMember, OrganizationMemberTeam, Project,
+    ApiKey, Authenticator, Environment, Organization, OrganizationMemberTeam, Project,
     ProjectStatus, ReleaseProject,
 )
 from sentry.utils import auth
@@ -137,20 +137,10 @@ class OrganizationEndpoint(Endpoint):
 
         requested_projects = project_ids.copy()
 
-        om_role = None
         user = getattr(request, 'user', None)
-        if user and user.is_authenticated():
-            try:
-                om_role = OrganizationMember.objects.filter(
-                    user=request.user,
-                    organization=organization,
-                ).values_list('role', flat=True).get()
-            except OrganizationMember.DoesNotExist:
-                pass
 
         if (
-            user and user.is_superuser
-            or (om_role and roles.get(om_role).is_global)
+            user and is_active_superuser(request)
             or include_allow_joinleave and organization.flags.allow_joinleave
             or force_global_perms
         ):
diff --git a/tests/sentry/api/bases/test_organization.py b/tests/sentry/api/bases/test_organization.py
index 943b06f790..d92666f081 100644
--- a/tests/sentry/api/bases/test_organization.py
+++ b/tests/sentry/api/bases/test_organization.py
@@ -19,6 +19,12 @@ from sentry.models import ApiKey
 from sentry.testutils import TestCase
 
 
+class MockSuperUser(object):
+    @property
+    def is_active(self):
+        return True
+
+
 class OrganizationPermissionBase(TestCase):
     def setUp(self):
         self.org = self.create_organization()
@@ -102,10 +108,6 @@ class BaseOrganizationEndpointTest(TestCase):
     def owner(self):
         return self.create_user('owner@test.com')
 
-    @fixture
-    def super_user(self):
-        return self.create_user('super@user.com', is_superuser=True)
-
     @fixture
     def org(self):
         org = self.create_organization('test', self.owner)
@@ -113,8 +115,11 @@ class BaseOrganizationEndpointTest(TestCase):
         org.save()
         return org
 
-    def build_request(self, user=None, **params):
+    def build_request(self, user=None, active_superuser=False, **params):
         request = RequestFactory().get('/', params)
+        request.session = {}
+        if active_superuser:
+            request.superuser = MockSuperUser()
         if user is None:
             user = self.user
         request.user = user
@@ -142,12 +147,13 @@ class GetProjectIdsTest(BaseOrganizationEndpointTest):
         user=None,
         project_ids=None,
         include_allow_joinleave=False,
+        active_superuser=False,
     ):
         request_args = {}
         if project_ids:
             request_args['project'] = project_ids
         result = self.endpoint.get_project_ids(
-            self.build_request(user=user, **request_args),
+            self.build_request(user=user, active_superuser=active_superuser, **request_args),
             self.org,
             include_allow_joinleave=include_allow_joinleave,
         )
@@ -156,9 +162,10 @@ class GetProjectIdsTest(BaseOrganizationEndpointTest):
     def test_no_ids_no_teams(self):
         # Should get nothing if not part of the org
         self.run_test([])
-        # Should get everything if super user or owner
-        self.run_test([self.project_1, self.project_2], user=self.super_user)
-        self.run_test([self.project_1, self.project_2], user=self.owner)
+        # Should get everything if super user
+        self.run_test([self.project_1, self.project_2], user=self.user, active_superuser=True)
+        # owner only sees projects they have direct access to
+        self.run_test([], user=self.owner)
         # Should get everything if org is public
         self.org.flags.allow_joinleave = True
         self.org.save()
@@ -176,8 +183,12 @@ class GetProjectIdsTest(BaseOrganizationEndpointTest):
         with self.assertRaises(PermissionDenied):
             self.run_test([], project_ids=[self.project_1.id])
 
-        self.run_test([self.project_1], user=self.super_user, project_ids=[self.project_1.id])
-        self.run_test([self.project_1], user=self.owner, project_ids=[self.project_1.id])
+        self.run_test([self.project_1], user=self.user, project_ids=[
+                      self.project_1.id], active_superuser=True)
+        # owner only sees projects they have direct access to
+        with self.assertRaises(PermissionDenied):
+            self.run_test([self.project_1], user=self.owner, project_ids=[self.project_1.id])
+
         self.org.flags.allow_joinleave = True
         self.org.save()
         self.run_test(
@@ -206,6 +217,7 @@ class GetProjectIdsTest(BaseOrganizationEndpointTest):
 
     def test_none_user(self):
         request = RequestFactory().get('/')
+        request.session = {}
         result = self.endpoint.get_project_ids(request, self.org)
         assert [] == result
 
@@ -271,6 +283,7 @@ class GetFilterParamsTest(BaseOrganizationEndpointTest):
         start=None,
         end=None,
         stats_period=None,
+        active_superuser=False,
     ):
         request_args = {}
         if env_names:
@@ -283,7 +296,7 @@ class GetFilterParamsTest(BaseOrganizationEndpointTest):
         if stats_period:
             request_args['statsPeriod'] = stats_period
         result = self.endpoint.get_filter_params(
-            self.build_request(user=user, **request_args),
+            self.build_request(user=user, active_superuser=active_superuser, **request_args),
             self.org,
             date_filter_optional=date_filter_optional,
         )
@@ -304,14 +317,16 @@ class GetFilterParamsTest(BaseOrganizationEndpointTest):
             [self.project_1, self.project_2],
             expected_start=timezone.now() - MAX_STATS_PERIOD,
             expected_end=timezone.now(),
-            user=self.super_user,
+            user=self.user,
+            active_superuser=True,
         )
         self.run_test(
             [self.project_1, self.project_2],
             expected_start=None,
             expected_end=None,
-            user=self.super_user,
-            date_filter_optional=True
+            user=self.user,
+            date_filter_optional=True,
+            active_superuser=True,
         )
 
     def test_params(self):
