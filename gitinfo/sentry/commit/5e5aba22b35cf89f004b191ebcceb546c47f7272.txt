commit 5e5aba22b35cf89f004b191ebcceb546c47f7272
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Nov 11 10:54:19 2019 -0800

    ref: Perform nodestore save separately to event save (#15004)
    
    Alternative approach to https://github.com/getsentry/sentry/pull/14725
    that continues writing the node_id into the data column on
    sentry_message. This is a first step towards discontinuing saving events in Postgres.

diff --git a/src/sentry/db/models/fields/node.py b/src/sentry/db/models/fields/node.py
index 2d821b7b90..1e78b74e10 100644
--- a/src/sentry/db/models/fields/node.py
+++ b/src/sentry/db/models/fields/node.py
@@ -169,6 +169,9 @@ class NodeField(GzippedDictField):
         self.ref_version = kwargs.pop("ref_version", None)
         self.wrapper = kwargs.pop("wrapper", None)
         self.id_func = kwargs.pop("id_func", lambda: b64encode(uuid4().bytes))
+        # We only automatically save data to nodestore for RawEvent
+        # Event performs saving node data as a separate step
+        self.skip_nodestore_save = kwargs.pop("skip_nodestore_save", False)
         super(NodeField, self).__init__(*args, **kwargs)
 
     def contribute_to_class(self, cls, name):
@@ -231,7 +234,8 @@ class NodeField(GzippedDictField):
         if value.id is None:
             value.id = self.id_func()
 
-        value.save()
+        if not self.skip_nodestore_save:
+            value.save()
         return compress(pickle.dumps({"node_id": value.id}))
 
 
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 1b3f324738..0f49d01e2c 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -756,6 +756,8 @@ class EventManager(object):
         # save the event
         try:
             with transaction.atomic(using=router.db_for_write(Event)):
+                if options.get("store.save-event-skips-nodestore", True):
+                    event.data.save()
                 event.save()
         except IntegrityError:
             logger.info(
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 5d68e4a866..c83d565810 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -14,7 +14,7 @@ from hashlib import md5
 
 from semaphore.processing import StoreNormalizer
 
-from sentry import eventtypes
+from sentry import eventtypes, options
 from sentry.db.models import (
     BoundedBigIntegerField,
     BoundedIntegerField,
@@ -619,6 +619,7 @@ class Event(EventCommon, Model):
         ref_func=lambda x: x.project_id or x.project.id,
         ref_version=2,
         wrapper=EventDict,
+        skip_nodestore_save=options.get("store.save-event-skips-nodestore", True),
     )
 
     objects = EventManager()
diff --git a/src/sentry/testutils/factories.py b/src/sentry/testutils/factories.py
index 83f8b5d88c..163d1a9991 100644
--- a/src/sentry/testutils/factories.py
+++ b/src/sentry/testutils/factories.py
@@ -496,6 +496,7 @@ class Factories(object):
         # emulate EventManager refs
         event.data.bind_ref(event)
         event.save()
+        event.data.save()
         return event
 
     @staticmethod
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index eeb4b1460b..7d4c27898b 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -96,6 +96,8 @@ class EventNodeStoreTest(TestCase):
         e1_node_id = e1.data.id
         assert e1.data.id is not None, "We should have generated a node_id for this event"
         e1_body = nodestore.get(e1_node_id)
+        e1.data.save()
+        e1_body = nodestore.get(e1_node_id)
         assert e1_body == {"foo": "bar"}, "The event body should be in nodestore"
 
         e1 = Event.objects.get(project_id=1, event_id="abc")
@@ -123,6 +125,8 @@ class EventNodeStoreTest(TestCase):
         }, "Event body should be the one provided (sans node_id)"
         e3.save()
         e3_body = nodestore.get("1:ghi")
+        e3.data.save()
+        e3_body = nodestore.get("1:ghi")
         assert e3_body == {"baz": "quux"}, "Event body should be saved to nodestore"
 
         e3 = Event.objects.get(project_id=1, event_id="ghi")
@@ -138,6 +142,7 @@ class EventNodeStoreTest(TestCase):
         # Event with no data should not be saved (or loaded) from nodestore
         e4 = Event(project_id=1, event_id="mno", data=None)
         e4.save()
+        e4.data.save()
         assert nodestore.get("1:mno") is None, "We should not have saved anything to nodestore"
         e4 = Event.objects.get(project_id=1, event_id="mno")
         assert e4.data.id is None
@@ -155,6 +160,7 @@ class EventNodeStoreTest(TestCase):
         event = self.create_event(group=group2)
         event.data.bind_ref(invalid_event)
         event.save()
+        event.data.save()
 
         assert event.data.get_ref(event) != event.data.get_ref(invalid_event)
 
