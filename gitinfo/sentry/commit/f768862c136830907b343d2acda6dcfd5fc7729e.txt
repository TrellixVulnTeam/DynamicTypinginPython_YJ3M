commit f768862c136830907b343d2acda6dcfd5fc7729e
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jan 12 23:51:20 2012 -0800

    Large URL refactor
    
    - /store/ is now /api/store/
    - feeds have been removed as they're not supported
    - all urls now have a trailing slash

diff --git a/sentry/conf/server.py b/sentry/conf/server.py
index dd96b69d20..44090bd394 100644
--- a/sentry/conf/server.py
+++ b/sentry/conf/server.py
@@ -25,7 +25,7 @@ INTERNAL_IPS = ('127.0.0.1',)
 
 MANAGERS = ADMINS
 
-APPEND_SLASH = False
+APPEND_SLASH = True
 
 PROJECT_ROOT = os.path.join(os.path.dirname(__file__), os.pardir, os.pardir)
 
diff --git a/sentry/models.py b/sentry/models.py
index a56f9e7d76..f780425bb3 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -17,12 +17,12 @@ from indexer.models import BaseIndex
 
 
 from django.contrib.auth.models import User
+from django.core.urlresolvers import reverse
 from django.db import models
 from django.db.models import Sum, F
-from django.db.models.signals import post_syncdb
+from django.db.models.signals import post_syncdb, post_save
 from django.utils.datastructures import SortedDict
 from django.utils.encoding import smart_unicode
-from django.db.models.signals import post_save
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.conf import settings
@@ -285,11 +285,10 @@ class Group(MessageBase):
     def __unicode__(self):
         return "(%s) %s" % (self.times_seen, self.error())
 
-    @models.permalink
     def get_absolute_url(self):
         if self.project_id:
-            return ('sentry-group', [], {'group_id': self.pk, 'project_id': self.project_id})
-        return ('sentry-group', [], {'group_id': self.pk})
+            return reverse('sentry-group', kwargs={'group_id': self.pk, 'project_id': self.project_id})
+        return '#'
 
     def natural_key(self):
         return (self.logger, self.culprit, self.checksum)
@@ -423,11 +422,10 @@ class Event(MessageBase):
     def __unicode__(self):
         return self.error()
 
-    @models.permalink
     def get_absolute_url(self):
         if self.project_id:
-            return ('sentry-group-event', [], {'group_id': self.group_id, 'event_id': self.pk, 'project_id': self.project_id})
-        return ('sentry-group-event', [], {'group_id': self.group_id, 'event_id': self.pk})
+            return reverse('sentry-group-event', kwargs={'group_id': self.group_id, 'event_id': self.pk, 'project_id': self.project_id})
+        return '#'
 
     @cached_property
     def request(self):
diff --git a/sentry/static/scripts/global.js b/sentry/static/scripts/global.js
index 4ed05b3b75..c3b217c157 100644
--- a/sentry/static/scripts/global.js
+++ b/sentry/static/scripts/global.js
@@ -42,7 +42,7 @@ if (Sentry === undefined) {
     Sentry.stream.clear = function(project_id) {
         if (confirm("Are you sure you want to mark all your stream as resolved?")) {
             $.ajax({
-                url: Sentry.options.urlPrefix + '/api/' + project_id + '/clear',
+                url: Sentry.options.urlPrefix + '/api/' + project_id + '/clear/',
                 type: 'post',
                 dataType: 'json',
                 success: function(groups){
@@ -56,7 +56,7 @@ if (Sentry === undefined) {
             remove = true;
         }
         $.ajax({
-            url: Sentry.options.urlPrefix + '/api/' + project_id + '/resolve',
+            url: Sentry.options.urlPrefix + '/api/' + project_id + '/resolve/',
             type: 'post',
             dataType: 'json',
             data: {
@@ -77,7 +77,7 @@ if (Sentry === undefined) {
     };
     Sentry.stream.bookmark = function(project_id, gid, el){
         $.ajax({
-            url: Sentry.options.urlPrefix + '/api/' + project_id + '/bookmark',
+            url: Sentry.options.urlPrefix + '/api/' + project_id + '/bookmark/',
             type: 'post',
             dataType: 'json',
             data: {
@@ -142,7 +142,7 @@ if (Sentry === undefined) {
         data = getQueryParams();
         data.view_id = Sentry.realtime.options.viewId || undefined;
         $.ajax({
-            url: Sentry.options.urlPrefix + '/api/' + Sentry.realtime.options.projectId + '/poll',
+            url: Sentry.options.urlPrefix + '/api/' + Sentry.realtime.options.projectId + '/poll/',
             type: 'get',
             dataType: 'json',
             data: data,
@@ -153,7 +153,7 @@ if (Sentry === undefined) {
                 $(groups.reverse()).each(function(i, el){
                     var id = el[0];
                     var data = el[1];
-                    var url = Sentry.options.urlPrefix + '/api/notification?' + $.param({
+                    var url = Sentry.options.urlPrefix + '/api/notification/?' + $.param({
                         count: data.count,
                         title: data.title,
                         message: data.message,
@@ -192,7 +192,7 @@ if (Sentry === undefined) {
     Sentry.charts.render = function(el, project_id, group_id, grid){
         var $sparkline = $(el);
         $.ajax({
-            url: Sentry.options.urlPrefix + '/api/' + project_id + '/chart',
+            url: Sentry.options.urlPrefix + '/api/' + project_id + '/chart/',
             type: 'get',
             dataType: 'json',
             data: {
diff --git a/sentry/templates/sentry/layout.html b/sentry/templates/sentry/layout.html
index 01fd5221a2..36a4d16687 100644
--- a/sentry/templates/sentry/layout.html
+++ b/sentry/templates/sentry/layout.html
@@ -16,7 +16,7 @@
         <script type="text/javascript" src="{% url sentry-media "scripts/client.js" %}"></script>
         <script type="text/javascript">
         Sentry.client.config({
-            server: '{% url sentry-store %}',
+            server: '{% url sentry-api-store %}',
             projectId: '{{ PROJECT_ID }}',
             logger: 'sentry.errors.javascript'
         })
diff --git a/sentry/web/feeds.py b/sentry/web/feeds.py
deleted file mode 100644
index 71fe83216f..0000000000
--- a/sentry/web/feeds.py
+++ /dev/null
@@ -1,99 +0,0 @@
-"""
-sentry.web.feeds
-~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from django.core.urlresolvers import reverse
-from django.http import HttpResponse
-from django.utils import feedgenerator
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.models import Event, Group
-
-
-class MessageFeed(object):
-    def __call__(self, request):
-        feed_dict = {
-            'title': self.get_title(request),
-            'link': request.build_absolute_uri(self.get_link(request)),
-            'description': '',
-            'language': u'en',
-            'feed_url': request.build_absolute_uri(),
-        }
-        feed = feedgenerator.Rss201rev2Feed(**feed_dict)
-
-        qs = self.get_query_set(request)
-
-        for obj in qs[0:10]:
-            link = self.get_item_url(request, obj)
-            if link:
-                link = request.build_absolute_uri(link)
-            feed.add_item(
-                title=str(obj or ''),
-                link=link,
-                description=obj.error() or '',
-                pubdate=self.get_item_date(request, obj) or '',
-            )
-
-        return HttpResponse(feed.writeString('utf-8'), mimetype='application/xml')
-
-    def get_title(self, request):
-        return _('events')
-
-    def get_link(self, request):
-        return reverse('sentry')
-
-    def get_model(self, request):
-        return Event
-
-    def get_query_set(self, request):
-        qs = self.get_model(request).objects.all().order_by(self.get_order_field(request))
-        if request.GET.get('level') > 0:
-            qs = qs.filter(level__gte=request.GET['level'])
-        elif request.GET.get('server_name'):
-            qs = qs.filter(server_name=request.GET['server_name'])
-        elif request.GET.get('logger'):
-            qs = qs.filter(logger=request.GET['logger'])
-        elif request.GET.get('site'):
-            qs = qs.filter(site=request.GET['site'])
-        return qs
-
-    def get_order_field(self, request):
-        return '-datetime'
-
-    def get_item_url(self, request, obj):
-        if obj.project_id:
-            return reverse('sentry-group', args=[obj.project_id, obj.group_id])
-        return reverse('sentry-group', args=[obj.group_id])
-
-    def get_item_date(self, request, obj):
-        return obj.datetime
-
-
-class SummaryFeed(MessageFeed):
-    def get_title(self, request):
-        return _('events (aggregated)')
-
-    def get_link(self, request):
-        return reverse('sentry')
-
-    def get_model(self, request):
-        return Group
-
-    def get_query_set(self, request):
-        qs = super(SummaryFeed, self).get_query_set(request)
-        return qs.filter(status=0)
-
-    def get_order_field(self, request):
-        return '-last_seen'
-
-    def get_item_url(self, request, obj):
-        if obj.project_id:
-            return reverse('sentry-group', args=[obj.project_id, obj.pk])
-        return reverse('sentry-group', args=[obj.pk])
-
-    def get_item_date(self, request, obj):
-        return obj.last_seen
diff --git a/sentry/web/urls.py b/sentry/web/urls.py
index 2366a75ae7..cd3160b9d7 100644
--- a/sentry/web/urls.py
+++ b/sentry/web/urls.py
@@ -9,7 +9,7 @@ sentry.web.urls
 from django.conf.urls.defaults import *
 from django.views.defaults import page_not_found
 
-from sentry.web import feeds, api
+from sentry.web import api
 from sentry.web.frontend import accounts, generic, groups, events, projects
 
 handler404 = lambda x: page_not_found(x, template_name='sentry/404.html')
@@ -33,67 +33,59 @@ def handler500(request):
 urlpatterns = patterns('',
     url(r'^_static/(?P<path>.*)$', generic.static_media, name='sentry-media'),
 
-    # Legacy redirects
-    # TODO:
-
-    url(r'^feeds/messages.xml$', feeds.MessageFeed(), name='sentry-feed-messages'),
-    url(r'^feeds/summaries.xml$', feeds.SummaryFeed(), name='sentry-feed-summaries'),
-    url(r'^group/(?P<group_id>\d+)$', groups.group, name='sentry-group'),
-    url(r'^group/(?P<group_id>\d+)/messages$', groups.group_event_list, name='sentry-group-events'),
-    url(r'^group/(?P<group_id>\d+)/messages/(?P<event_id>\d+)$', groups.group_event_details, name='sentry-group-event'),
-    url(r'^group/(?P<group_id>\d+)/actions/(?P<slug>[\w_-]+)', groups.group_plugin_action, name='sentry-group-plugin-action'),
-
-    # Feeds
+    # Legacy API
+    url(r'^store/$', api.store),
 
-    url(r'^feeds/events.xml$', feeds.MessageFeed(), name='sentry-feed-events'),
-    url(r'^feeds/groups.xml$', feeds.SummaryFeed(), name='sentry-feed-groups'),
-
-    # API
+    # Legacy redirects
 
-    url(r'^store/$', api.store, name='sentry-store'),
+    url(r'^group/(?P<group_id>\d+)$', groups.group),
+    url(r'^group/(?P<group_id>\d+)/messages$', groups.group_event_list),
+    url(r'^group/(?P<group_id>\d+)/messages/(?P<event_id>\d+)$', groups.group_event_details),
+    url(r'^group/(?P<group_id>\d+)/actions/(?P<slug>[\w_-]+)', groups.group_plugin_action),
 
     # Account
 
-    url(r'^login$', accounts.login, name='sentry-login'),
-    url(r'^logout$', accounts.logout, name='sentry-logout'),
+    url(r'^login/$', accounts.login, name='sentry-login'),
+    url(r'^logout/$', accounts.logout, name='sentry-logout'),
 
     # Management
 
-    url(r'^projects$', projects.project_list, name='sentry-project-list'),
-    url(r'^projects/new$', projects.new_project, name='sentry-new-project'),
-    url(r'^projects/(?P<project_id>\d+)/edit$', projects.manage_project, name='sentry-manage-project'),
-    url(r'^projects/(?P<project_id>\d+)/remove$', projects.remove_project, name='sentry-remove-project'),
-    url(r'^projects/(?P<project_id>\d+)/members/new$', projects.new_project_member, name='sentry-new-project-member'),
-    url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/edit$', projects.edit_project_member, name='sentry-edit-project-member'),
-    url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/remove$', projects.remove_project_member, name='sentry-remove-project-member'),
+    url(r'^projects/$', projects.project_list, name='sentry-project-list'),
+    url(r'^projects/new/$', projects.new_project, name='sentry-new-project'),
+    url(r'^projects/(?P<project_id>\d+)/edit/$', projects.manage_project, name='sentry-manage-project'),
+    url(r'^projects/(?P<project_id>\d+)/remove/$', projects.remove_project, name='sentry-remove-project'),
+    url(r'^projects/(?P<project_id>\d+)/members/new/$', projects.new_project_member, name='sentry-new-project-member'),
+    url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/edit/$', projects.edit_project_member, name='sentry-edit-project-member'),
+    url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/remove/$', projects.remove_project_member, name='sentry-remove-project-member'),
 
     # Global
 
     url(r'^$', generic.dashboard, name='sentry'),
-    url(r'^status$', generic.status, name='sentry-status'),
+    url(r'^status/$', generic.status, name='sentry-status'),
 
-    # JS
+    # API / JS
 
-    url(r'^api/notification$', api.notification, name='sentry-api-notification'),
-    url(r'^api/(?P<project_id>\d+)/poll$', api.poll, name='sentry-api-poll'),
-    url(r'^api/(?P<project_id>\d+)/resolve$', api.resolve, name='sentry-api-resolve'),
-    url(r'^api/(?P<project_id>\d+)/bookmark$', api.bookmark, name='sentry-api-bookmark'),
-    url(r'^api/(?P<project_id>\d+)/clear$', api.clear, name='sentry-api-clear'),
-    url(r'^api/(?P<project_id>\d+)/chart$', api.chart, name='sentry-api-chart'),
+    url(r'^api/store/$', api.store, name='sentry-api-store'),
+    url(r'^api/notification/$', api.notification, name='sentry-api-notification'),
+    url(r'^api/(?P<project_id>\d+)/poll/$', api.poll, name='sentry-api-poll'),
+    url(r'^api/(?P<project_id>\d+)/resolve/$', api.resolve, name='sentry-api-resolve'),
+    url(r'^api/(?P<project_id>\d+)/bookmark/$', api.bookmark, name='sentry-api-bookmark'),
+    url(r'^api/(?P<project_id>\d+)/clear/$', api.clear, name='sentry-api-clear'),
+    url(r'^api/(?P<project_id>\d+)/chart/$', api.chart, name='sentry-api-chart'),
 
     # Project specific
 
-    url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)$', groups.group, name='sentry-group'),
-    url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)/json$', groups.group_json, name='sentry-group-json'),
-    url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)/events$', groups.group_event_list, name='sentry-group-events'),
-    url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)/events/(?P<event_id>\d+)$', groups.group_event_details, name='sentry-group-event'),
-    url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)/actions/(?P<slug>[\w_-]+)', groups.group_plugin_action, name='sentry-group-plugin-action'),
+    url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)/$', groups.group, name='sentry-group'),
+    url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)/json/$', groups.group_json, name='sentry-group-json'),
+    url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)/events/$', groups.group_event_list, name='sentry-group-events'),
+    url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)/events/(?P<event_id>\d+)/$', groups.group_event_details, name='sentry-group-event'),
+    url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)/actions/(?P<slug>[\w_-]+)/', groups.group_plugin_action, name='sentry-group-plugin-action'),
 
-    url(r'^(?P<project_id>\d+)/events$', events.event_list, name='sentry-events'),
-    url(r'^(?P<project_id>\d+)/events/(?P<event_id>\d+)/replay$', events.replay_event, name='sentry-replay'),
+    url(r'^(?P<project_id>\d+)/events/$', events.event_list, name='sentry-events'),
+    url(r'^(?P<project_id>\d+)/events/(?P<event_id>\d+)/replay/$', events.replay_event, name='sentry-replay'),
 
-    url(r'^(?P<project_id>\d+)/search$', groups.search, name='sentry-search'),
+    url(r'^(?P<project_id>\d+)/search/$', groups.search, name='sentry-search'),
 
-    url(r'^(?P<project_id>\d+)/view/(?P<view_id>\d+)$', groups.group_list, name='sentry'),
-    url(r'^(?P<project_id>\d+)$', groups.group_list, name='sentry'),
+    url(r'^(?P<project_id>\d+)/view/(?P<view_id>\d+)/$', groups.group_list, name='sentry'),
+    url(r'^(?P<project_id>\d+)/$', groups.group_list, name='sentry'),
 )
diff --git a/tests/base.py b/tests/base.py
index f3f92daeb0..bc7cdfe208 100644
--- a/tests/base.py
+++ b/tests/base.py
@@ -61,7 +61,7 @@ class BaseTestCase(object):
     Settings = Settings
 
     def _postWithKey(self, data, key=None):
-        resp = self.client.post(reverse('sentry-store'), {
+        resp = self.client.post(reverse('sentry-api-store'), {
             'data': base64.b64encode(pickle.dumps(data)),
             'key': settings.KEY,
         })
@@ -76,7 +76,7 @@ class BaseTestCase(object):
     def _postWithSignature(self, data, key=None):
         ts, message, sig = self._makeMessage(data, key)
 
-        resp = self.client.post(reverse('sentry-store'), message,
+        resp = self.client.post(reverse('sentry-api-store'), message,
             content_type='application/octet-stream',
             HTTP_AUTHORIZATION=get_auth_header(sig, ts, '_postWithSignature', key),
         )
@@ -85,7 +85,7 @@ class BaseTestCase(object):
     def _postWithNewSignature(self, data, key=None):
         ts, message, sig = self._makeMessage(data, key)
 
-        resp = self.client.post(reverse('sentry-store'), message,
+        resp = self.client.post(reverse('sentry-api-store'), message,
             content_type='application/octet-stream',
             HTTP_X_SENTRY_AUTH=get_auth_header(sig, ts, '_postWithSignature', key),
         )
diff --git a/tests/http/tests.py b/tests/http/tests.py
index 30fe694c59..5ebba30e1e 100644
--- a/tests/http/tests.py
+++ b/tests/http/tests.py
@@ -15,7 +15,7 @@ from tests.base import TestCase
 
 class SentryRemoteTest(TestCase):
     def setUp(self):
-        settings.REMOTE_URL = ['http://localhost:8000%s' % reverse('sentry-store')]
+        settings.REMOTE_URL = ['http://localhost:8000%s' % reverse('sentry-api-store')]
         logger = logging.getLogger('sentry')
         for h in logger.handlers:
             logger.removeHandler(h)
@@ -25,17 +25,17 @@ class SentryRemoteTest(TestCase):
         settings.REMOTE_URL = None
 
     def test_no_key(self):
-        resp = self.client.post(reverse('sentry-store'))
+        resp = self.client.post(reverse('sentry-api-store'))
         self.assertEquals(resp.status_code, 401)
 
     # def test_no_data(self):
-    #     resp = self.client.post(reverse('sentry-store'), {
+    #     resp = self.client.post(reverse('sentry-api-store'), {
     #         'key': settings.KEY,
     #     })
     #     self.assertEquals(resp.status_code, 400)
 
     # def test_bad_data(self):
-    #     resp = self.client.post(reverse('sentry-store'), {
+    #     resp = self.client.post(reverse('sentry-api-store'), {
     #         'key': settings.KEY,
     #         'data': 'hello world',
     #     })
@@ -106,7 +106,7 @@ class SentryRemoteTest(TestCase):
     #     fname = os.path.join(os.path.dirname(__file__), 'fixtures/bad_data.json')
     #     data = open(fname).read()
 
-    #     resp = self.client.post(reverse('sentry-store'), {
+    #     resp = self.client.post(reverse('sentry-api-store'), {
     #         'data': data,
     #         'key': settings.KEY,
     #     })
diff --git a/tests/tests.py b/tests/tests.py
index e9ecd56046..bb2bb518a1 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -38,7 +38,7 @@ class SentryMailTest(TestCase):
 
         # self.assertTrue('Traceback (most recent call last):' in out.body)
         # self.assertTrue("COOKIES:{'commenter_name': 'admin'," in out.body, out.body)
-        # self.assertEquals(out.subject, '[Django] Error (EXTERNAL IP): /group/1')
+        # self.assertEquals(out.subject, '[Django] Error (EXTERNAL IP): /group/1/')
 
     # def test_mail_on_creation(self):
     #     settings.MAIL = True
@@ -85,9 +85,11 @@ class SentryMailTest(TestCase):
         group = Group.objects.get()
         group.mail_admins(fail_silently=False)
 
-        out = mail.outbox[0]
+        self.assertEquals(len(mail.outbox), 1)
+
+        # out = mail.outbox[0]
 
-        self.assertTrue('http://example.com/group/2' in out.body, out.body)
+        # self.assertTrue('http://example.com/group/2/' in out.body, out.body)
 
 
 class DummyInterface(Interface):
diff --git a/tests/web/tests.py b/tests/web/tests.py
index ad9cf69059..dd7aa92f40 100644
--- a/tests/web/tests.py
+++ b/tests/web/tests.py
@@ -69,7 +69,7 @@ class SentryViewsTest(TestCase):
 
     def test_group_details(self):
         self.client.login(username='admin', password='admin')
-        resp = self.client.get(reverse('sentry-group', kwargs={'group_id': 2}), follow=True)
+        resp = self.client.get(reverse('sentry-group', kwargs={'project_id': 1, 'group_id': 2}), follow=True)
         self.assertEquals(resp.status_code, 200, resp.content)
         self.assertTemplateUsed(resp, 'sentry/groups/details.html')
         self.assertTrue('group' in resp.context)
@@ -78,7 +78,7 @@ class SentryViewsTest(TestCase):
 
     def test_group_event_list(self):
         self.client.login(username='admin', password='admin')
-        resp = self.client.get(reverse('sentry-group-events', args=[2]), follow=True)
+        resp = self.client.get(reverse('sentry-group-events', kwargs={'project_id': 1, 'group_id': 2}), follow=True)
         self.assertEquals(resp.status_code, 200, resp.content)
         self.assertTemplateUsed(resp, 'sentry/groups/event_list.html')
         self.assertTrue('group' in resp.context)
@@ -87,7 +87,7 @@ class SentryViewsTest(TestCase):
 
     def test_group_message_details(self):
         self.client.login(username='admin', password='admin')
-        resp = self.client.get(reverse('sentry-group-event', kwargs={'group_id': 2, 'event_id': 4}), follow=True)
+        resp = self.client.get(reverse('sentry-group-event', kwargs={'project_id': 1, 'group_id': 2, 'event_id': 4}), follow=True)
         self.assertEquals(resp.status_code, 200, resp.content)
         self.assertTemplateUsed(resp, 'sentry/groups/event.html')
         self.assertTrue('group' in resp.context)
@@ -278,28 +278,6 @@ class ViewPermissionTest(TestCase):
         self._assertPerm(path, template, 'member', False)
 
 
-class SentryFeedsTest(TestCase):
-    fixtures = ['tests/fixtures/feeds.json']
-
-    def test_message_feed(self):
-        response = self.client.get(reverse('sentry-feed-messages'))
-        self.assertEquals(response.status_code, 200)
-        self.assertTrue(response.content.startswith('<?xml version="1.0" encoding="utf-8"?>'))
-        self.assertTrue('<link>http://testserver/</link>' in response.content)
-        self.assertTrue('<title>events</title>' in response.content)
-        self.assertTrue('<link>http://testserver/1/group/1</link>' in response.content, response.content)
-        self.assertTrue('<title>exceptions must be old-style classes or derived from BaseException, not NoneType</title>' in response.content)
-
-    def test_summary_feed(self):
-        response = self.client.get(reverse('sentry-feed-summaries'))
-        self.assertEquals(response.status_code, 200)
-        self.assertTrue(response.content.startswith('<?xml version="1.0" encoding="utf-8"?>'))
-        self.assertTrue('<link>http://testserver/</link>' in response.content)
-        self.assertTrue('<title>events (aggregated)</title>' in response.content)
-        self.assertTrue('<link>http://testserver/1/group/1</link>' in response.content, response.content)
-        self.assertTrue('<title>(1) exceptions must be old-style classes or derived from BaseException, not NoneType</title>' in response.content)
-
-
 class SentrySearchTest(TestCase):
     def test_checksum_query(self):
         checksum = 'a' * 32
