commit 2596e31a22da374b8607bde88449e650865877bc
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Wed Sep 20 09:36:34 2017 +0200

    feat(api): Add download function for debug symbols (#6067)
    
    * feat(api): Add download function for debug symbols
    
    * feat(api): Add ratelimiter, Add tests for download

diff --git a/src/sentry/api/endpoints/dsym_files.py b/src/sentry/api/endpoints/dsym_files.py
index 559225cc90..dc3e7b7b8b 100644
--- a/src/sentry/api/endpoints/dsym_files.py
+++ b/src/sentry/api/endpoints/dsym_files.py
@@ -1,8 +1,11 @@
 from __future__ import absolute_import
+import logging
+import posixpath
 
 from rest_framework.response import Response
 from rest_framework import serializers
 
+from sentry import ratelimits
 from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint, ProjectReleasePermission
 from sentry.api.content_negotiation import ConditionalContentNegotiation
@@ -10,7 +13,14 @@ from sentry.api.serializers import serialize
 from sentry.api.serializers.rest_framework import ListField
 from sentry.models import ProjectDSymFile, create_files_from_dsym_zip, \
     VersionDSymFile, DSymApp, DSYM_PLATFORMS
+try:
+    from django.http import (
+        CompatibleStreamingHttpResponse as StreamingHttpResponse, HttpResponse, Http404)
+except ImportError:
+    from django.http import StreamingHttpResponse, HttpResponse, Http404
 
+
+logger = logging.getLogger('sentry.api')
 ERR_FILE_EXISTS = 'A file matching this uuid already exists'
 
 
@@ -40,6 +50,46 @@ class DSymFilesEndpoint(ProjectEndpoint):
 
     content_negotiation_class = ConditionalContentNegotiation
 
+    def download(self, version_dsym_id, project):
+        rate_limited = ratelimits.is_limited(
+            project=project,
+            key='rl:DSymFilesEndpoint:download:%s:%s' % (
+                version_dsym_id, project.id),
+            limit=10,
+        )
+        if rate_limited:
+            logger.info('notification.rate_limited',
+                        extra={'project_id': project.id,
+                               'version_dsym_id': version_dsym_id})
+            return HttpResponse(
+                {
+                    'Too many download requests',
+                }, status=403
+            )
+
+        versioned_dsym = VersionDSymFile.objects.filter(
+            id=version_dsym_id
+        ).select_related('projectdsymfile').first()
+        dsym = versioned_dsym.dsym_file
+
+        suffix = ".dSYM"
+        if dsym.dsym_type == 'proguard' and dsym.object_name == 'proguard-mapping':
+            suffix = ".txt"
+
+        try:
+            fp = dsym.file.getfile()
+            response = StreamingHttpResponse(
+                iter(lambda: fp.read(4096), b''),
+                content_type='application/octet-stream'
+            )
+            response['Content-Length'] = dsym.file.size
+            response['Content-Disposition'] = 'attachment; filename="%s%s"' % (posixpath.basename(
+                dsym.uuid
+            ), suffix)
+            return response
+        except IOError:
+            raise Http404
+
     def get(self, request, project):
         """
         List a Project's DSym Files
@@ -64,6 +114,10 @@ class DSymFilesEndpoint(ProjectEndpoint):
             versiondsymfile__isnull=True,
         ).select_related('file')[:100]
 
+        download_requested = request.GET.get('download_id') is not None
+        if download_requested and (request.access.has_scope('project:write')):
+            return self.download(request.GET.get('download_id'), project)
+
         return Response(
             {
                 'apps': serialize(list(apps)),
@@ -102,7 +156,8 @@ class UnknownDSymFilesEndpoint(ProjectEndpoint):
 
     def get(self, request, project):
         checksums = request.GET.getlist('checksums')
-        missing = ProjectDSymFile.objects.find_missing(checksums, project=project)
+        missing = ProjectDSymFile.objects.find_missing(
+            checksums, project=project)
         return Response({'missing': missing})
 
 
@@ -125,7 +180,8 @@ class AssociateDSymFilesEndpoint(ProjectEndpoint):
             data={'name': data['name']},
             platform=DSYM_PLATFORMS[data['platform']],
         )
-        dsym_files = ProjectDSymFile.objects.find_by_checksums(data['checksums'], project)
+        dsym_files = ProjectDSymFile.objects.find_by_checksums(
+            data['checksums'], project)
 
         for dsym_file in dsym_files:
             version_dsym_file, created = VersionDSymFile.objects.get_or_create(
diff --git a/src/sentry/static/sentry/app/views/projectDebugSymbols.jsx b/src/sentry/static/sentry/app/views/projectDebugSymbols.jsx
index 734bf31e4c..d61565cc45 100644
--- a/src/sentry/static/sentry/app/views/projectDebugSymbols.jsx
+++ b/src/sentry/static/sentry/app/views/projectDebugSymbols.jsx
@@ -2,6 +2,7 @@ import React from 'react';
 import Modal from 'react-bootstrap/lib/Modal';
 
 import ApiMixin from '../mixins/apiMixin';
+import OrganizationState from '../mixins/organizationState';
 import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 import DateTime from '../components/dateTime';
@@ -10,7 +11,7 @@ import TimeSince from '../components/timeSince';
 import {t} from '../locale';
 
 const ProjectDebugSymbols = React.createClass({
-  mixins: [ApiMixin],
+  mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
     return {
@@ -175,7 +176,7 @@ const ProjectDebugSymbols = React.createClass({
                     <li
                       className="group hoverable"
                       onClick={() => this.setActive(app.id, version, builds)}>
-                      <div className="row">
+                      <div>
                         <div className="col-xs-8 event-details">
                           <h3 className="truncate">{version}</h3>
                           <div className="event-message">
@@ -190,7 +191,7 @@ const ProjectDebugSymbols = React.createClass({
                             </ul>
                           </div>
                         </div>
-                        <div className="col-xs-4 event-count align-right">
+                        <div className="col-xs-4 event-details align-right">
                           {t('Debug Information Files')}: {symbolsInVersion}
                         </div>
                       </div>
@@ -243,11 +244,9 @@ const ProjectDebugSymbols = React.createClass({
           className="group hoverable"
           key={build}
           onClick={() => this.openModal(build, dsyms)}>
-          <div className="row">
+          <div>
             <div className="col-xs-8 event-details">
-              <div className="event-message">
-                {build}
-              </div>
+              <div className="event-message">{build}</div>
               <div className="event-extra">
                 <ul>
                   <li>
@@ -280,19 +279,25 @@ const ProjectDebugSymbols = React.createClass({
     if (raw && dsyms.length >= 100) {
       moreSymbolsHidden = (
         <tr className="text-center" key="empty-row">
-          <td colSpan="5">{t('There are more symbols than are shown here.')}</td>
+          <td colSpan="6">{t('There are more symbols than are shown here.')}</td>
         </tr>
       );
     }
 
+    let {orgId, projectId} = this.props.params;
+    let access = this.getAccess();
+
     const rows = dsyms.map((dsymFile, key) => {
       let dsym = raw ? dsymFile : dsymFile.dsym;
       if (dsym === undefined || dsym === null) {
         return null;
       }
+      const url = `${this.api.baseUrl}/projects/${orgId}/${projectId}/files/dsyms/?download_id=${dsymFile.id}`;
       return (
         <tr key={key}>
-          <td><code className="small">{dsym.uuid}</code></td>
+          <td>
+            <code className="small">{dsym.uuid}</code>
+          </td>
           <td>
             {dsym.symbolType === 'proguard' && dsym.objectName === 'proguard-mapping'
               ? '-'
@@ -303,8 +308,19 @@ const ProjectDebugSymbols = React.createClass({
               ? 'proguard'
               : `${dsym.cpuName} (${dsym.symbolType})`}
           </td>
-          <td><DateTime date={dsym.dateCreated} /></td>
-          <td><FileSize bytes={dsym.size} /></td>
+          <td>
+            <DateTime date={dsym.dateCreated} />
+          </td>
+          <td>
+            <FileSize bytes={dsym.size} />
+          </td>
+          <td>
+            {access.has('project:write')
+              ? <a href={url} className="btn btn-sm btn-default">
+                  <span className="icon icon-open" />
+                </a>
+              : null}
+          </td>
         </tr>
       );
     });
@@ -339,11 +355,10 @@ const ProjectDebugSymbols = React.createClass({
               <th>{t('Type')}</th>
               <th>{t('Uploaded')}</th>
               <th>{t('Size')}</th>
+              <th />
             </tr>
           </thead>
-          <tbody>
-            {this.renderDsyms(this.state.unreferencedDebugSymbols, true)}
-          </tbody>
+          <tbody>{this.renderDsyms(this.state.unreferencedDebugSymbols, true)}</tbody>
         </table>
       </div>
     );
@@ -389,9 +404,7 @@ const ProjectDebugSymbols = React.createClass({
                   <th>{t('Size')}</th>
                 </tr>
               </thead>
-              <tbody>
-                {this.renderDsyms(this.state.activeDsyms)}
-              </tbody>
+              <tbody>{this.renderDsyms(this.state.activeDsyms)}</tbody>
             </table>
           </Modal.Body>
         </Modal>
diff --git a/tests/sentry/api/endpoints/test_dsym_files.py b/tests/sentry/api/endpoints/test_dsym_files.py
index cd5c4d0882..4da245a8e8 100644
--- a/tests/sentry/api/endpoints/test_dsym_files.py
+++ b/tests/sentry/api/endpoints/test_dsym_files.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 import zipfile
-from six import BytesIO
+from six import BytesIO, text_type
 
 from django.core.files.uploadedfile import SimpleUploadedFile
 from django.core.urlresolvers import reverse
@@ -43,14 +43,16 @@ class DSymFilesUploadTest(APITestCase):
         response = self.client.post(
             url, {
                 'file':
-                SimpleUploadedFile('symbols.zip', out.getvalue(), content_type='application/zip'),
+                SimpleUploadedFile('symbols.zip', out.getvalue(),
+                                   content_type='application/zip'),
             },
             format='multipart'
         )
 
         assert response.status_code == 201, response.content
         assert len(response.data) == 1
-        assert response.data[0]['headers'] == {'Content-Type': 'text/x-proguard+plain'}
+        assert response.data[0]['headers'] == {
+            'Content-Type': 'text/x-proguard+plain'}
         assert response.data[0]['sha1'] == 'e6d3c5185dac63eddfdc1a5edfffa32d46103b44'
         assert response.data[0]['uuid'] == PROGUARD_UUID
         assert response.data[0]['objectName'] == 'proguard-mapping'
@@ -78,14 +80,16 @@ class DSymFilesUploadTest(APITestCase):
         response = self.client.post(
             url, {
                 'file':
-                SimpleUploadedFile('symbols.zip', out.getvalue(), content_type='application/zip'),
+                SimpleUploadedFile('symbols.zip', out.getvalue(),
+                                   content_type='application/zip'),
             },
             format='multipart'
         )
 
         assert response.status_code == 201, response.content
         assert len(response.data) == 1
-        assert response.data[0]['headers'] == {'Content-Type': 'text/x-proguard+plain'}
+        assert response.data[0]['headers'] == {
+            'Content-Type': 'text/x-proguard+plain'}
         assert response.data[0]['sha1'] == 'e6d3c5185dac63eddfdc1a5edfffa32d46103b44'
         assert response.data[0]['uuid'] == PROGUARD_UUID
         assert response.data[0]['objectName'] == 'proguard-mapping'
@@ -143,14 +147,16 @@ class DSymFilesUploadTest(APITestCase):
         response = self.client.post(
             url, {
                 'file':
-                SimpleUploadedFile('symbols.zip', out.getvalue(), content_type='application/zip'),
+                SimpleUploadedFile('symbols.zip', out.getvalue(),
+                                   content_type='application/zip'),
             },
             format='multipart'
         )
 
         assert response.status_code == 201, response.content
         assert len(response.data) == 1
-        assert response.data[0]['headers'] == {'Content-Type': 'text/x-proguard+plain'}
+        assert response.data[0]['headers'] == {
+            'Content-Type': 'text/x-proguard+plain'}
         assert response.data[0]['sha1'] == 'e6d3c5185dac63eddfdc1a5edfffa32d46103b44'
         assert response.data[0]['uuid'] == PROGUARD_UUID
         assert response.data[0]['objectName'] == 'proguard-mapping'
@@ -186,7 +192,7 @@ class DSymFilesUploadTest(APITestCase):
         assert vdf.dsym_app.app_id == 'com.example.myapp'
         assert vdf.dsym_file.uuid == PROGUARD_UUID
 
-    def test_list_dsyms(self):
+    def test_dsyms_requests(self):
         project = self.create_project(name='foo')
 
         url = reverse(
@@ -207,7 +213,8 @@ class DSymFilesUploadTest(APITestCase):
         response = self.client.post(
             url, {
                 'file':
-                SimpleUploadedFile('symbols.zip', out.getvalue(), content_type='application/zip'),
+                SimpleUploadedFile('symbols.zip', out.getvalue(),
+                                   content_type='application/zip'),
             },
             format='multipart'
         )
@@ -238,6 +245,7 @@ class DSymFilesUploadTest(APITestCase):
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
         assert response.data['associatedDsymFiles'][0]['uuid'] == PROGUARD_UUID
+        download_id = response.data['associatedDsymFiles'][0]['id']
 
         url = reverse(
             'sentry-api-0-dsym-files',
@@ -261,10 +269,29 @@ class DSymFilesUploadTest(APITestCase):
         assert dsym['build'] == '1'
         assert dsym['version'] == '1.0'
         assert dsym['dsym']['cpuName'] == 'any'
-        assert dsym['dsym']['headers'] == {'Content-Type': 'text/x-proguard+plain'}
+        assert dsym['dsym']['headers'] == {
+            'Content-Type': 'text/x-proguard+plain'}
         assert dsym['dsym']['objectName'] == 'proguard-mapping'
         assert dsym['dsym']['sha1'] == 'e6d3c5185dac63eddfdc1a5edfffa32d46103b44'
         assert dsym['dsym']['symbolType'] == 'proguard'
         assert dsym['dsym']['uuid'] == '6dc7fdb0-d2fb-4c8e-9d6b-bb1aa98929b1'
 
         assert response.data['unreferencedDebugSymbols'] == []
+
+        # Test download
+        response = self.client.get(url + "?download_id=" + download_id)
+
+        assert response.status_code == 200, response.content
+        assert response.get(
+            'Content-Disposition') == 'attachment; filename="' + PROGUARD_UUID + '.txt"'
+        assert response.get(
+            'Content-Length') == text_type(len(PROGUARD_SOURCE))
+        assert response.get('Content-Type') == 'application/octet-stream'
+        assert PROGUARD_SOURCE == BytesIO(
+            b"".join(response.streaming_content)).getvalue()
+
+        # Login user with no permissions
+        user_no_permission = self.create_user('baz@localhost', username='baz')
+        self.login_as(user=user_no_permission)
+        response = self.client.get(url + "?download_id=" + download_id)
+        assert response.status_code == 403, response.content
