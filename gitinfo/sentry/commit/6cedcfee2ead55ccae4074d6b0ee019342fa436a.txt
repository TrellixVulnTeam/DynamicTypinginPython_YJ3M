commit 6cedcfee2ead55ccae4074d6b0ee019342fa436a
Author: d1ffuz0r <d1fffuz0r@gmail.com>
Date:   Fri Jun 21 10:41:27 2013 +0700

    an update version now does not start after syncdb

diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index be2a9fa3d0..0a6a93bb50 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -946,7 +946,7 @@ class MetaManager(BaseManager):
         self._metadata[key] = value
 
     def get_all_values(self):
-        if not hasattr(self, '_metadata') or not self._metadata:
+        if not hasattr(self, '_metadata'):
             self._metadata = dict((i.key, i.value) for i in self.all())
         return self._metadata
 
diff --git a/src/sentry/models.py b/src/sentry/models.py
index fbf1d2df22..b32c257169 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -1181,17 +1181,20 @@ def create_default_project(created_models, verbosity=2, **kwargs):
 def set_sentry_version(latest=None, **kwargs):
     import sentry
     current = sentry.get_version()
-    version, _ = Option.objects.get_or_create(key='sentry:latest_version')
 
-    if not latest and version.value:
-        return
+    version = Option.objects.get_value(
+        key='sentry:latest_version',
+        default=''
+    )
 
-    if (latest and (Version(current) >= Version(latest)) and
-                   (Version(version.value) >= Version(latest))):
-        return
+    for ver in (current, version):
+        if Version(ver) >= Version(latest):
+            return
 
-    version.value = latest or current
-    version.save()
+    Option.objects.set_value(
+        key='sentry:latest_version',
+        value=(latest or current)
+    )
 
 
 def create_team_and_keys_for_project(instance, created, **kwargs):
@@ -1329,11 +1332,6 @@ post_syncdb.connect(
     dispatch_uid="create_default_project",
     weak=False,
 )
-post_syncdb.connect(
-    set_sentry_version,
-    dispatch_uid="set_sentry_version",
-    weak=False,
-)
 post_save.connect(
     create_team_and_keys_for_project,
     sender=Project,
diff --git a/tests/sentry/tasks/check_update/tests.py b/tests/sentry/tasks/check_update/tests.py
index b97d15ee14..a5b2f0331c 100644
--- a/tests/sentry/tasks/check_update/tests.py
+++ b/tests/sentry/tasks/check_update/tests.py
@@ -17,32 +17,26 @@ class CheckUpdateTest(TestCase):
     KEY = 'sentry:latest_version'
 
     def test_run_check_update_task(self):
-
         with mock.patch('sentry.tasks.check_update.fetch_url_content') as fetch:
             fetch.return_value = (
                 None, None, json.dumps({'info': {'version': self.NEW}})
             )
-            check_update()
+            check_update()  # latest_version > current_version
             fetch.assert_called_once_with(PYPI_URL)
 
         self.assertEqual(get_option(key=self.KEY), self.NEW)
 
     def test_run_check_update_task_with_bad_response(self):
-        import sentry
-
         with mock.patch('sentry.tasks.check_update.fetch_url_content') as fetch:
             fetch.return_value = (None, None, '')
-            check_update()
+            check_update()  # latest_version == current_version
             fetch.assert_called_once_with(PYPI_URL)
 
-        self.assertEqual(get_option(key=self.KEY), sentry.get_version())
+        self.assertEqual(get_option(key=self.KEY), None)
 
     def test_set_sentry_version_empty_latest(self):
-        import sentry
-
-        set_sentry_version()
-
-        self.assertEqual(get_option(key=self.KEY), sentry.get_version())
+        set_sentry_version(latest=self.NEW)
+        self.assertEqual(get_option(key=self.KEY), self.NEW)
 
     def test_set_sentry_version_new(self):
         set_option(self.KEY, self.OLD)
@@ -52,7 +46,6 @@ class CheckUpdateTest(TestCase):
 
             set_sentry_version(latest=self.NEW)
 
-        Option.objects.clear_cache()
         self.assertEqual(Option.objects.get_value(key=self.KEY), self.NEW)
 
     def test_set_sentry_version_old(self):
@@ -63,5 +56,4 @@ class CheckUpdateTest(TestCase):
 
             set_sentry_version(latest=self.OLD)
 
-        Option.objects.clear_cache()
         self.assertEqual(Option.objects.get_value(key=self.KEY), self.NEW)
