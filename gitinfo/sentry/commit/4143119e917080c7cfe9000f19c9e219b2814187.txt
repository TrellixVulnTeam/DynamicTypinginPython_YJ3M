commit 4143119e917080c7cfe9000f19c9e219b2814187
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Mon Mar 11 10:47:58 2019 -0700

    feat(app-platform): Mediators and endpoints for creating sentry app external issues (#12282)
    
    * external issue mediators and endpoints

diff --git a/src/sentry/api/endpoints/sentry_app_installation_external_issues.py b/src/sentry/api/endpoints/sentry_app_installation_external_issues.py
new file mode 100644
index 0000000000..125b3dee35
--- /dev/null
+++ b/src/sentry/api/endpoints/sentry_app_installation_external_issues.py
@@ -0,0 +1,44 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry import features
+from sentry.api.bases import SentryAppInstallationBaseEndpoint
+from sentry.api.serializers import serialize
+from sentry.mediators.external_issues import IssueLinkCreator
+from sentry.models import Group, Project
+
+
+class SentryAppInstallationExternalIssuesEndpoint(SentryAppInstallationBaseEndpoint):
+    def post(self, request, installation):
+        if not features.has('organizations:sentry-apps',
+                            installation.organization,
+                            actor=request.user):
+            return Response(status=404)
+
+        group_id = request.DATA.get('groupId')
+        if not group_id:
+            return Response({'detail': 'groupId is required'}, status=400)
+
+        try:
+            group = Group.objects.get(
+                id=group_id,
+                project_id__in=Project.objects.filter(
+                    organization_id=installation.organization_id,
+                )
+            )
+        except Group.DoesNotExist:
+            return Response(status=404)
+
+        try:
+            external_issue = IssueLinkCreator.run(
+                install=installation,
+                group=group,
+                action=request.DATA.get('action'),
+                fields=request.DATA.get('fields'),
+                uri=request.DATA.get('uri'),
+            )
+        except Exception:
+            return Response({'error': 'Error communicating with Sentry App service'}, status=400)
+
+        return Response(serialize(external_issue))
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 46dbac34a9..eb4fa8d11c 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -115,6 +115,7 @@ from .endpoints.organization_users import OrganizationUsersEndpoint
 from .endpoints.sentry_app_installations import SentryAppInstallationsEndpoint
 from .endpoints.sentry_app_installation_details import SentryAppInstallationDetailsEndpoint
 from .endpoints.sentry_app_installation_external_requests import SentryAppInstallationExternalRequestsEndpoint
+from .endpoints.sentry_app_installation_external_issues import SentryAppInstallationExternalIssuesEndpoint
 from .endpoints.organization_stats import OrganizationStatsEndpoint
 from .endpoints.organization_teams import OrganizationTeamsEndpoint
 from .endpoints.organization_user_issues import OrganizationUserIssuesEndpoint
@@ -724,6 +725,11 @@ urlpatterns = patterns(
         SentryAppInstallationExternalRequestsEndpoint.as_view(),
         name='sentry-api-0-sentry-app-installation-external-requests'
     ),
+    url(
+        r'^sentry-app-installations/(?P<uuid>[^\/]+)/external-issues/$',
+        SentryAppInstallationExternalIssuesEndpoint.as_view(),
+        name='sentry-api-0-sentry-app-installation-external-issues'
+    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/sentry-apps/$',
         OrganizationSentryAppsEndpoint.as_view(),
diff --git a/src/sentry/mediators/external_issues/__init__.py b/src/sentry/mediators/external_issues/__init__.py
new file mode 100644
index 0000000000..33b38ce8dc
--- /dev/null
+++ b/src/sentry/mediators/external_issues/__init__.py
@@ -0,0 +1,3 @@
+from __future__ import absolute_import
+
+from .issue_link_creator import IssueLinkCreator  # NOQA
diff --git a/src/sentry/mediators/external_issues/issue_link_creator.py b/src/sentry/mediators/external_issues/issue_link_creator.py
new file mode 100644
index 0000000000..45eb480ba1
--- /dev/null
+++ b/src/sentry/mediators/external_issues/issue_link_creator.py
@@ -0,0 +1,55 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.coreapi import APIUnauthorized
+from sentry.mediators import Mediator, Param, external_requests
+from sentry.models import PlatformExternalIssue
+from sentry.utils.cache import memoize
+
+
+class IssueLinkCreator(Mediator):
+    install = Param('sentry.models.SentryAppInstallation')
+    group = Param('sentry.models.Group')
+    action = Param(six.string_types)
+    fields = Param(object)
+    uri = Param(six.string_types)
+
+    def call(self):
+        self._verify_action()
+        self._make_external_request()
+        self._create_external_issue()
+        return self.external_issue
+
+    def _verify_action(self):
+        if self.action not in ['link', 'create']:
+            return APIUnauthorized()
+
+    def _make_external_request(self):
+        self.response = external_requests.IssueLinkRequester.run(
+            install=self.install,
+            uri=self.uri,
+            group=self.group,
+            fields=self.fields,
+        )
+
+    def _format_response_data(self):
+        web_url = self.response['webUrl']
+        display_name = u'{}#{}'.format(
+            self.response['project'],
+            self.response['identifier'],
+        )
+        return [web_url, display_name]
+
+    def _create_external_issue(self):
+        web_url, display_name = self._format_response_data()
+        self.external_issue = PlatformExternalIssue.objects.create(
+            group_id=self.group.id,
+            service_type=self.sentry_app.slug,
+            display_name=display_name,
+            web_url=web_url,
+        )
+
+    @memoize
+    def sentry_app(self):
+        return self.install.sentry_app
diff --git a/tests/sentry/api/endpoints/test_sentry_app_installation_external_issues.py b/tests/sentry/api/endpoints/test_sentry_app_installation_external_issues.py
new file mode 100644
index 0000000000..8846963f6f
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_sentry_app_installation_external_issues.py
@@ -0,0 +1,90 @@
+from __future__ import absolute_import
+
+import six
+import responses
+
+from django.core.urlresolvers import reverse
+from sentry.models import PlatformExternalIssue
+from sentry.testutils import APITestCase
+from sentry.testutils.helpers import with_feature
+
+
+class SentryAppInstallationExternalIssuesEndpointTest(APITestCase):
+    def setUp(self):
+        self.superuser = self.create_user(email='a@example.com', is_superuser=True)
+        self.user = self.create_user(email='boop@example.com')
+        self.org = self.create_organization(owner=self.user)
+        self.project = self.create_project(organization=self.org)
+        self.group = self.create_group(project=self.project)
+
+        self.sentry_app = self.create_sentry_app(
+            name='Testin',
+            organization=self.org,
+            webhook_url='https://example.com',
+        )
+
+        self.install = self.create_sentry_app_installation(
+            organization=self.org,
+            slug=self.sentry_app.slug,
+            user=self.user,
+        )
+
+        self.url = reverse(
+            'sentry-api-0-sentry-app-installation-external-issues',
+            args=[self.install.uuid],
+        )
+
+    @responses.activate
+    @with_feature('organizations:sentry-apps')
+    def test_creates_external_issue(self):
+        self.login_as(user=self.superuser, superuser=True)
+        data = {
+            'groupId': self.group.id,
+            'action': 'create',
+            'fields': {'title': 'Hello'},
+            'uri': '/create-issues',
+        }
+        responses.add(
+            method=responses.POST,
+            url='https://example.com/create-issues',
+            json={
+                'project': 'ProjectName',
+                'webUrl': 'https://example.com/project/issue-id',
+                'identifier': 'issue-1',
+            },
+            status=200,
+            content_type='application/json',
+        )
+
+        response = self.client.post(self.url, data=data, format='json')
+        external_issue = PlatformExternalIssue.objects.first()
+
+        assert response.status_code == 200
+        assert response.data == {
+            'id': six.text_type(external_issue.id),
+            'groupId': six.text_type(self.group.id),
+            'serviceType': self.sentry_app.slug,
+            'displayName': 'ProjectName#issue-1',
+            'webUrl': 'https://example.com/project/issue-id',
+        }
+
+    @responses.activate
+    @with_feature('organizations:sentry-apps')
+    def test_external_issue_doesnt_get_created(self):
+        self.login_as(user=self.superuser, superuser=True)
+        data = {
+            'groupId': self.group.id,
+            'action': 'create',
+            'fields': {'title': 'Hello'},
+            'uri': '/create-issues',
+        }
+        responses.add(
+            method=responses.POST,
+            url='https://example.com/create-issues',
+            status=500,
+            content_type='application/json',
+        )
+
+        response = self.client.post(self.url, data=data, format='json')
+        assert response.status_code == 400
+        assert not PlatformExternalIssue.objects.all()
diff --git a/tests/sentry/mediators/external_issues/__init__.py b/tests/sentry/mediators/external_issues/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/mediators/external_issues/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/mediators/external_issues/test_issue_link_creator.py b/tests/sentry/mediators/external_issues/test_issue_link_creator.py
new file mode 100644
index 0000000000..8b27ce9b38
--- /dev/null
+++ b/tests/sentry/mediators/external_issues/test_issue_link_creator.py
@@ -0,0 +1,75 @@
+from __future__ import absolute_import
+
+import responses
+
+from sentry.coreapi import APIError
+from sentry.mediators.external_issues import IssueLinkCreator
+from sentry.models import PlatformExternalIssue
+from sentry.testutils import TestCase
+
+
+class TestIssueLinkCreator(TestCase):
+    def setUp(self):
+        super(TestIssueLinkCreator, self).setUp()
+
+        self.user = self.create_user(name='foo')
+        self.org = self.create_organization(owner=self.user)
+        self.project = self.create_project(slug='boop', organization=self.org)
+        self.group = self.create_group(project=self.project)
+
+        self.sentry_app = self.create_sentry_app(
+            name='foo',
+            organization=self.org,
+            webhook_url='https://example.com',
+            scopes=(),
+        )
+
+        self.install = self.create_sentry_app_installation(
+            slug='foo',
+            organization=self.org,
+            user=self.user,
+        )
+
+    @responses.activate
+    def test_creates_external_issue(self):
+        fields = {
+            'title': 'An Issue',
+            'description': 'a bug was found',
+            'assignee': 'user-1',
+        }
+
+        responses.add(
+            method=responses.POST,
+            url='https://example.com/link-issue',
+            json={
+                'project': 'ProjectName',
+                'webUrl': 'https://example.com/project/issue-id',
+                'identifier': 'issue-1',
+            },
+            status=200,
+            content_type='application/json',
+        )
+
+        result = IssueLinkCreator.run(
+            install=self.install,
+            group=self.group,
+            action='create',
+            uri='/link-issue',
+            fields=fields,
+        )
+
+        external_issue = PlatformExternalIssue.objects.all()[0]
+        assert result == external_issue
+        assert external_issue.web_url == \
+            'https://example.com/project/issue-id'
+        assert external_issue.display_name == 'ProjectName#issue-1'
+
+    def test_invalid_action(self):
+        with self.assertRaises(APIError):
+            IssueLinkCreator.run(
+                install=self.install,
+                group=self.group,
+                action='doop',
+                uri='/link-issue',
+                fields={},
+            )
