commit 0e8487331fb311a087a34ef3b5febce2a6bcff87
Author: Stephen Cefali <scefali@sentry.io>
Date:   Thu Aug 29 19:44:02 2019 +0000

    Feat(app-platform): Allows webhook to be null for internal integrations (#14500)

diff --git a/src/sentry/api/endpoints/sentry_app_details.py b/src/sentry/api/endpoints/sentry_app_details.py
index 2e6790043b..96f9d44de0 100644
--- a/src/sentry/api/endpoints/sentry_app_details.py
+++ b/src/sentry/api/endpoints/sentry_app_details.py
@@ -9,6 +9,7 @@ from sentry.api.bases.sentryapps import SentryAppBaseEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.serializers.rest_framework import SentryAppSerializer
 from sentry.mediators.sentry_apps import Updater, Destroyer
+from sentry.constants import SentryAppStatus
 from sentry.utils import json
 
 logger = logging.getLogger(__name__)
@@ -32,7 +33,10 @@ class SentryAppDetailsEndpoint(SentryAppBaseEndpoint):
                 status=403,
             )
 
-        serializer = SentryAppSerializer(sentry_app, data=request.data, partial=True)
+        # isInternal is not field of our model but it is a field of the serializer
+        data = request.data.copy()
+        data["isInternal"] = sentry_app.status == SentryAppStatus.INTERNAL
+        serializer = SentryAppSerializer(sentry_app, data=data, partial=True)
 
         if serializer.is_valid():
             result = serializer.validated_data
diff --git a/src/sentry/api/serializers/rest_framework/sentry_app.py b/src/sentry/api/serializers/rest_framework/sentry_app.py
index d22237a9ab..2e1452a93f 100644
--- a/src/sentry/api/serializers/rest_framework/sentry_app.py
+++ b/src/sentry/api/serializers/rest_framework/sentry_app.py
@@ -6,6 +6,7 @@ from rest_framework import serializers
 from rest_framework.serializers import Serializer, ValidationError
 
 from django.template.defaultfilters import slugify
+from sentry.api.serializers.rest_framework.base import camel_to_snake_case
 from sentry.api.validators.sentry_apps.schema import validate_ui_element_schema
 from sentry.models import ApiScopes, SentryApp
 from sentry.models.sentryapp import VALID_EVENT_RESOURCES, REQUIRED_EVENT_PERMISSIONS
@@ -70,12 +71,27 @@ class SentryAppSerializer(Serializer):
     status = serializers.CharField(required=False, allow_null=True)
     events = EventListField(required=False, allow_null=True)
     schema = SchemaField(required=False, allow_null=True)
-    webhookUrl = URLField()
+    webhookUrl = URLField(required=False, allow_null=True, allow_blank=True)
     redirectUrl = URLField(required=False, allow_null=True, allow_blank=True)
+    isInternal = serializers.BooleanField(required=False, default=False)
     isAlertable = serializers.BooleanField(required=False, default=False)
     overview = serializers.CharField(required=False, allow_null=True)
     verifyInstall = serializers.BooleanField(required=False, default=True)
 
+    # an abstraction to pull fields from attrs if they are available or the sentry_app if not
+    def get_current_value_wrapper(self, attrs):
+        def get_current_value(field_name):
+            if field_name in attrs:
+                return attrs[field_name]
+            # params might be passed as camel case but we always store as snake case
+            mapped_field_name = camel_to_snake_case(field_name)
+            if hasattr(self.instance, mapped_field_name):
+                return getattr(self.instance, mapped_field_name)
+            else:
+                return None
+
+        return get_current_value
+
     def validate_name(self, value):
         if not value:
             return value
@@ -90,18 +106,34 @@ class SentryAppSerializer(Serializer):
         return value
 
     def validate(self, attrs):
-        if not attrs.get("scopes"):
-            return attrs
-
-        for resource in attrs.get("events"):
-            needed_scope = REQUIRED_EVENT_PERMISSIONS[resource]
-            if needed_scope not in attrs["scopes"]:
-                raise ValidationError(
-                    {
-                        "events": u"{} webhooks require the {} permission.".format(
-                            resource, needed_scope
-                        )
-                    }
-                )
+        # validates events against scopes
+        if attrs.get("scopes"):
+            for resource in attrs.get("events"):
+                needed_scope = REQUIRED_EVENT_PERMISSIONS[resource]
+                if needed_scope not in attrs["scopes"]:
+                    raise ValidationError(
+                        {
+                            "events": u"{} webhooks require the {} permission.".format(
+                                resource, needed_scope
+                            )
+                        }
+                    )
+
+        get_current_value = self.get_current_value_wrapper(attrs)
+        # validate if webhookUrl is missing that we don't have any webhook features enabled
+        if not get_current_value("webhookUrl"):
+            if get_current_value("isInternal"):
+                # for internal apps, make sure there aren't any events if webhookUrl is null
+                if get_current_value("events"):
+                    raise ValidationError(
+                        {"webhookUrl": "webhookUrl required if webhook events are enabled"}
+                    )
+                # also check that we don't have the alert rule enabled
+                if get_current_value("isAlertable"):
+                    raise ValidationError(
+                        {"webhookUrl": "webhookUrl required if alert rule action is enabled"}
+                    )
+            else:
+                raise ValidationError({"webhookUrl": "webhookUrl required for public integrations"})
 
         return attrs
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 8e6df8658e..9659ae9260 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -432,23 +432,26 @@ class SentryAppStatus(object):
     UNPUBLISHED = 0
     PUBLISHED = 1
     INTERNAL = 2
+    UNPUBLISHED_STR = "unpublished"
+    PUBLISHED_STR = "published"
+    INTERNAL_STR = "internal"
 
     @classmethod
     def as_choices(cls):
         return (
-            (cls.UNPUBLISHED, "unpublished"),
-            (cls.PUBLISHED, "published"),
-            (cls.INTERNAL, "internal"),
+            (cls.UNPUBLISHED, cls.UNPUBLISHED_STR),
+            (cls.PUBLISHED, cls.PUBLISHED_STR),
+            (cls.INTERNAL, cls.INTERNAL_STR),
         )
 
     @classmethod
     def as_str(cls, status):
         if status == cls.UNPUBLISHED:
-            return "unpublished"
+            return cls.UNPUBLISHED_STR
         elif status == cls.PUBLISHED:
-            return "published"
+            return cls.PUBLISHED_STR
         elif status == cls.INTERNAL:
-            return "internal"
+            return cls.INTERNAL_STR
 
 
 class SentryAppInstallationStatus(object):
diff --git a/src/sentry/mediators/sentry_app_installations/creator.py b/src/sentry/mediators/sentry_app_installations/creator.py
index 55cce84624..e5104cb6a3 100644
--- a/src/sentry/mediators/sentry_app_installations/creator.py
+++ b/src/sentry/mediators/sentry_app_installations/creator.py
@@ -43,14 +43,16 @@ class Creator(Mediator):
         )
 
     def _create_service_hooks(self):
-        service_hooks.Creator.run(
-            application=self.api_application,
-            actor=self.install,
-            projects=[],
-            organization=self.organization,
-            events=self.sentry_app.events,
-            url=self.sentry_app.webhook_url,
-        )
+        # only make the service hook if there is a webhook url
+        if self.sentry_app.webhook_url:
+            service_hooks.Creator.run(
+                application=self.api_application,
+                actor=self.install,
+                projects=[],
+                organization=self.organization,
+                events=self.sentry_app.events,
+                url=self.sentry_app.webhook_url,
+            )
 
     def _notify_service(self):
         if self.notify:
diff --git a/src/sentry/mediators/sentry_apps/creator.py b/src/sentry/mediators/sentry_apps/creator.py
index 1800662b81..d958d288c6 100644
--- a/src/sentry/mediators/sentry_apps/creator.py
+++ b/src/sentry/mediators/sentry_apps/creator.py
@@ -23,7 +23,9 @@ class Creator(Mediator):
     organization = Param("sentry.models.Organization")
     scopes = Param(Iterable, default=lambda self: [])
     events = Param(Iterable, default=lambda self: [])
-    webhook_url = Param(six.string_types)
+    webhook_url = Param(
+        six.string_types, required=False
+    )  # only not required for internal integrations but internalCreator calls this
     redirect_url = Param(six.string_types, required=False)
     is_alertable = Param(bool, default=False)
     verify_install = Param(bool, default=True)
diff --git a/src/sentry/mediators/sentry_apps/internal_creator.py b/src/sentry/mediators/sentry_apps/internal_creator.py
index 031fcaa178..d22d292ed2 100644
--- a/src/sentry/mediators/sentry_apps/internal_creator.py
+++ b/src/sentry/mediators/sentry_apps/internal_creator.py
@@ -20,7 +20,7 @@ class InternalCreator(Mediator):
     organization = Param("sentry.models.Organization")
     scopes = Param(Iterable, default=lambda self: [])
     events = Param(Iterable, default=lambda self: [])
-    webhook_url = Param(six.string_types)
+    webhook_url = Param(six.string_types, required=False)
     redirect_url = Param(six.string_types, required=False)
     is_alertable = Param(bool, default=False)
     schema = Param(dict, default=lambda self: {})
diff --git a/src/sentry/mediators/sentry_apps/updater.py b/src/sentry/mediators/sentry_apps/updater.py
index 8596479a42..cf308bcc48 100644
--- a/src/sentry/mediators/sentry_apps/updater.py
+++ b/src/sentry/mediators/sentry_apps/updater.py
@@ -10,7 +10,7 @@ from sentry.constants import SentryAppStatus
 from sentry.mediators import Mediator, Param
 from sentry.mediators import service_hooks
 from sentry.mediators.param import if_param
-from sentry.models import SentryAppComponent, ServiceHook
+from sentry.models import SentryAppComponent, ServiceHook, SentryAppInstallation
 from sentry.models.sentryapp import REQUIRED_EVENT_PERMISSIONS
 
 
@@ -40,6 +40,7 @@ class Updater(Mediator):
         self._update_verify_install()
         self._update_overview()
         self._update_schema()
+        self._update_service_hooks()
         self.sentry_app.save()
         return self.sentry_app
 
@@ -54,9 +55,9 @@ class Updater(Mediator):
     @if_param("status")
     def _update_status(self):
         if self.user.is_superuser:
-            if self.status == "published":
+            if self.status == SentryAppStatus.PUBLISHED_STR:
                 self.sentry_app.status = SentryAppStatus.PUBLISHED
-            if self.status == "unpublished":
+            if self.status == SentryAppStatus.UNPUBLISHED_STR:
                 self.sentry_app.status = SentryAppStatus.UNPUBLISHED
 
     @if_param("scopes")
@@ -77,12 +78,31 @@ class Updater(Mediator):
         from sentry.mediators.service_hooks.creator import expand_events
 
         self.sentry_app.events = expand_events(self.events)
-        self._update_service_hook_events()
 
-    def _update_service_hook_events(self):
+    def _update_service_hooks(self):
         hooks = ServiceHook.objects.filter(application=self.sentry_app.application)
+        # sentry_app.webhook_url will be updated at this point
+        webhook_url = self.sentry_app.webhook_url
         for hook in hooks:
-            service_hooks.Updater.run(service_hook=hook, events=self.events)
+            # update the url and events
+            if webhook_url:
+                service_hooks.Updater.run(
+                    service_hook=hook, events=self.sentry_app.events, url=webhook_url
+                )
+            # if no url, then the service hook is no longer active in which case we need to delete it
+            else:
+                service_hooks.Destroyer.run(service_hook=hook)
+        # if we don't have hooks but we have a webhook url now, need to create it for an internal integration
+        if webhook_url and self.sentry_app.is_internal and not hooks:
+            installation = SentryAppInstallation.objects.get(sentry_app_id=self.sentry_app.id)
+            service_hooks.Creator.run(
+                application=self.sentry_app.application,
+                actor=installation,
+                projects=[],
+                organization=self.sentry_app.owner,
+                events=self.sentry_app.events,
+                url=webhook_url,
+            )
 
     @if_param("webhook_url")
     def _update_webhook_url(self):
diff --git a/src/sentry/models/sentryapp.py b/src/sentry/models/sentryapp.py
index d4d14c3145..9d8afe0bf5 100644
--- a/src/sentry/models/sentryapp.py
+++ b/src/sentry/models/sentryapp.py
@@ -80,7 +80,7 @@ class SentryApp(ParanoidModel, HasApiScopes):
     uuid = models.CharField(max_length=64, default=default_uuid)
 
     redirect_url = models.URLField(null=True)
-    webhook_url = models.URLField()
+    webhook_url = models.URLField(null=True)
     # does the application subscribe to `event.alert`,
     # meaning can it be used in alert rules as a {service} ?
     is_alertable = models.BooleanField(default=False)
diff --git a/src/sentry/static/sentry/app/data/forms/sentryApplication.jsx b/src/sentry/static/sentry/app/data/forms/sentryApplication.jsx
index e55d933713..35df4fcb5c 100644
--- a/src/sentry/static/sentry/app/data/forms/sentryApplication.jsx
+++ b/src/sentry/static/sentry/app/data/forms/sentryApplication.jsx
@@ -1,7 +1,9 @@
 import React from 'react';
+import _ from 'lodash';
+
 import {tct} from 'app/locale';
 
-const publicFormFields = [
+const getPublicFormFields = () => [
   {
     name: 'name',
     type: 'string',
@@ -44,6 +46,8 @@ const publicFormFields = [
     name: 'isAlertable',
     type: 'boolean',
     label: 'Alert Rule Action',
+    disabled: ({webhookDisabled}) => webhookDisabled,
+    disabledReason: 'Cannot enable alert rule action without a webhook url',
     help: tct(
       'If enabled, this integration will be an action under alert rules in Sentry. The notification destination is the Webhook URL specified above. More on actions [learn_more:Here].',
       {
@@ -92,18 +96,28 @@ const publicFormFields = [
 export const publicIntegrationForms = [
   {
     title: 'Public Integration Details',
-    fields: publicFormFields,
+    fields: getPublicFormFields(),
   },
 ];
 
-// remove fields not needed for internal integrations
-const internalFormFields = publicFormFields.filter(
-  formField => !['redirectUrl', 'verifyInstall'].includes(formField.name)
-);
+const getInternalFormFields = () => {
+  /***
+   * Generate internal form fields copy copying the public form fields and making adjustments:
+   *    1. remove fields not needed for internal integrations
+   *    2. make webhookUrl optional
+   ***/
+
+  const internalFormFields = getPublicFormFields().filter(
+    formField => !['redirectUrl', 'verifyInstall'].includes(formField.name)
+  );
+  const webhookField = internalFormFields.find(field => field.name === 'webhookUrl');
+  webhookField.required = false;
+  return internalFormFields;
+};
 
 export const internalIntegrationForms = [
   {
     title: 'Internal Integration Details',
-    fields: internalFormFields,
+    fields: getInternalFormFields(),
   },
 ];
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionsObserver.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionsObserver.jsx
index 22ddb39832..bdb60dcf64 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionsObserver.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/permissionsObserver.jsx
@@ -16,6 +16,11 @@ export default class PermissionsObserver extends React.Component {
   static propTypes = {
     scopes: PropTypes.arrayOf(PropTypes.string).isRequired,
     events: PropTypes.arrayOf(PropTypes.string).isRequired,
+    webhookDisabled: PropTypes.bool.isRequired,
+  };
+
+  static defaultProps = {
+    webhookDisabled: false,
   };
 
   constructor(...args) {
@@ -68,6 +73,7 @@ export default class PermissionsObserver extends React.Component {
               permissions={permissions}
               events={events}
               onChange={this.onEventChange}
+              webhookDisabled={this.props.webhookDisabled}
             />
           </PanelBody>
         </Panel>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.jsx
index 63f5c7546a..ca015271d4 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/resourceSubscriptions.jsx
@@ -18,17 +18,27 @@ export default class Subscriptions extends React.Component {
     permissions: PropTypes.object.isRequired,
     events: PropTypes.array.isRequired,
     onChange: PropTypes.func.isRequired,
+    webhookDisabled: PropTypes.bool.isRequired,
+  };
+
+  static defaultProps = {
+    webhookDisabled: false,
   };
 
   constructor(...args) {
     super(...args);
-    this.state = {events: this.props.events};
     this.context.form.setValue('events', this.props.events);
   }
 
-  componentDidUpdate(prevProps) {
-    const {events} = this.state;
-    const {permissions} = this.props;
+  componentWillReceiveProps(nextProps) {
+    // if webhooks are disabled, unset the events
+    if (nextProps.webhookDisabled && this.props.events.length) {
+      this.save([]);
+    }
+  }
+
+  componentDidUpdate() {
+    const {permissions, events} = this.props;
 
     const permittedEvents = events.filter(resource => {
       return permissions[PERMISSIONS_MAP[resource]] !== 'no-access';
@@ -40,31 +50,31 @@ export default class Subscriptions extends React.Component {
   }
 
   onChange = (resource, checked) => {
-    const events = new Set(this.state.events);
+    const events = new Set(this.props.events);
     checked ? events.add(resource) : events.delete(resource);
     this.save(Array.from(events));
   };
 
   save = events => {
-    this.setState({events});
     this.props.onChange(events);
     this.context.form.setValue('events', events);
   };
 
   render() {
-    const {permissions} = this.props;
-    const {events} = this.state;
+    const {permissions, webhookDisabled, events} = this.props;
 
     return (
       <SubscriptionGrid>
         {EVENT_CHOICES.map(choice => {
-          const disabled = permissions[PERMISSIONS_MAP[choice]] === 'no-access';
+          const disabledFromPermissions =
+            permissions[PERMISSIONS_MAP[choice]] === 'no-access';
           return (
             <React.Fragment key={choice}>
               <SubscriptionBox
-                key={`${choice}${disabled}`}
-                disabled={disabled}
-                checked={events.includes(choice) && !disabled}
+                key={choice}
+                disabledFromPermissions={disabledFromPermissions}
+                webhookDisabled={webhookDisabled}
+                checked={events.includes(choice) && !disabledFromPermissions}
                 resource={choice}
                 onChange={this.onChange}
               />
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
index abf7f0d1fd..b36c8affbc 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
@@ -1,6 +1,7 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import {browserHistory} from 'react-router';
+import {Observer} from 'mobx-react';
 
 import {addSuccessMessage} from 'app/actionCreators/indicator';
 import {Panel, PanelItem, PanelBody, PanelHeader} from 'app/components/panels';
@@ -167,6 +168,13 @@ export default class SentryApplicationDetails extends AsyncView {
     }
   };
 
+  onFieldChange = (name, value) => {
+    if (name === 'webhookUrl' && !value && this.isInternal) {
+      //if no webhook, then set isAlertable to false
+      this.form.setValue('isAlertable', false);
+    }
+  };
+
   renderBody() {
     const {orgId} = this.props.params;
     const {app} = this.state;
@@ -203,10 +211,29 @@ export default class SentryApplicationDetails extends AsyncView {
           }}
           model={this.form}
           onSubmitSuccess={this.onSubmitSuccess}
+          onFieldChange={this.onFieldChange}
         >
-          <JsonForm location={this.props.location} forms={forms} />
+          <Observer>
+            {() => {
+              const webhookDisabled =
+                this.isInternal && !this.form.getValue('webhookUrl');
+              return (
+                <React.Fragment>
+                  <JsonForm
+                    location={this.props.location}
+                    additionalFieldProps={{webhookDisabled}}
+                    forms={forms}
+                  />
 
-          <PermissionsObserver scopes={scopes} events={events} />
+                  <PermissionsObserver
+                    webhookDisabled={webhookDisabled}
+                    scopes={scopes}
+                    events={events}
+                  />
+                </React.Fragment>
+              );
+            }}
+          </Observer>
 
           {app && app.status === 'internal' && (
             <Panel>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/subscriptionBox.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/subscriptionBox.jsx
index bc6a7ff853..d429c6c1d7 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/subscriptionBox.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/subscriptionBox.jsx
@@ -10,41 +10,41 @@ import {Flex} from 'grid-emotion';
 import withOrganization from 'app/utils/withOrganization';
 import SentryTypes from 'app/sentryTypes';
 
-class SubscriptionBox extends React.Component {
+export class SubscriptionBox extends React.Component {
   static propTypes = {
     resource: PropTypes.string.isRequired,
-    disabled: PropTypes.bool.isRequired,
+    disabledFromPermissions: PropTypes.bool.isRequired,
+    webhookDisabled: PropTypes.bool.isRequired,
     checked: PropTypes.bool.isRequired,
     onChange: PropTypes.func.isRequired,
     organization: SentryTypes.Organization,
   };
 
-  constructor(...args) {
-    super(...args);
-    this.state = {
-      checked: this.props.checked,
-    };
-  }
+  static defaultProps = {
+    webhookDisabled: false,
+  };
 
   onChange = evt => {
     const checked = evt.target.checked;
     const {resource} = this.props;
-    this.setState({checked});
     this.props.onChange(resource, checked);
   };
 
   render() {
-    const {resource, organization} = this.props;
+    const {resource, organization, webhookDisabled, checked} = this.props;
     const features = new Set(organization.features);
-    const {checked} = this.state;
 
-    let disabled = this.props.disabled;
+    let disabled = this.props.disabledFromPermissions || webhookDisabled;
     let message = `Must have at least 'Read' permissions enabled for ${resource}`;
     if (resource === 'error' && !features.has('integrations-event-hooks')) {
       disabled = true;
       message =
         'Your organization does not have access to the error subscription resource.';
     }
+    if (webhookDisabled) {
+      message = 'Cannot enable webhook subscription without specifying a webhook url';
+    }
+
     return (
       <React.Fragment>
         <SubscriptionGridItemWrapper key={resource}>
@@ -72,7 +72,6 @@ class SubscriptionBox extends React.Component {
   }
 }
 
-export {SubscriptionBox};
 export default withOrganization(SubscriptionBox);
 
 const SubscriptionInfo = styled(Flex)`
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/__snapshots__/subscriptionBox.spec.jsx.snap b/tests/js/spec/views/settings/organizationDeveloperSettings/__snapshots__/subscriptionBox.spec.jsx.snap
index a1022e175d..e6a70b0857 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/__snapshots__/subscriptionBox.spec.jsx.snap
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/__snapshots__/subscriptionBox.spec.jsx.snap
@@ -3,7 +3,7 @@
 exports[`SubscriptionBox renders resource checkbox 1`] = `
 <SubscriptionBox
   checked={false}
-  disabled={false}
+  disabledFromPermissions={false}
   onChange={[MockFunction]}
   organization={
     Object {
@@ -34,6 +34,7 @@ exports[`SubscriptionBox renders resource checkbox 1`] = `
     }
   }
   resource="issue"
+  webhookDisabled={false}
 >
   <SubscriptionGridItemWrapper
     key="issue"
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/resourceSubscriptions.spec.jsx b/tests/js/spec/views/settings/organizationDeveloperSettings/resourceSubscriptions.spec.jsx
index ca6c98edc8..c5661a1cd4 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/resourceSubscriptions.spec.jsx
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/resourceSubscriptions.spec.jsx
@@ -37,7 +37,7 @@ describe('Resource Subscriptions', () => {
         wrapper
           .find('SubscriptionBox')
           .first()
-          .prop('disabled')
+          .prop('disabledFromPermissions')
       ).toBe(true);
     });
 
@@ -55,7 +55,7 @@ describe('Resource Subscriptions', () => {
         wrapper
           .find('SubscriptionBox')
           .first()
-          .prop('disabled')
+          .prop('disabledFromPermissions')
       ).toBe(false);
     });
   });
@@ -89,7 +89,7 @@ describe('Resource Subscriptions', () => {
         wrapper
           .find('SubscriptionBox')
           .first()
-          .prop('disabled')
+          .prop('disabledFromPermissions')
       ).toBe(false);
     });
 
@@ -103,12 +103,11 @@ describe('Resource Subscriptions', () => {
       };
 
       wrapper.setProps({permissions});
-      expect(wrapper.state('events')).toEqual([]);
       expect(
         wrapper
           .find('SubscriptionBox')
           .first()
-          .prop('disabled')
+          .prop('disabledFromPermissions')
       ).toBe(true);
     });
   });
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
index 54ece6ac57..4ceca4c390 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
@@ -4,6 +4,8 @@ import React from 'react';
 import {Client} from 'app/api';
 import {mount} from 'enzyme';
 import SentryApplicationDetails from 'app/views/settings/organizationDeveloperSettings/sentryApplicationDetails';
+import JsonForm from 'app/views/settings/components/forms/jsonForm';
+import PermissionsObserver from 'app/views/settings/organizationDeveloperSettings/permissionsObserver';
 import {selectByValue} from '../../../../helpers/select';
 
 describe('Sentry Application Details', function() {
@@ -208,6 +210,7 @@ describe('Sentry Application Details', function() {
     beforeEach(() => {
       sentryApp = TestStubs.SentryApp({
         status: 'internal',
+        isAlertable: true,
       });
       token = TestStubs.SentryAppToken();
       sentryApp.events = ['issue'];
@@ -258,6 +261,17 @@ describe('Sentry Application Details', function() {
 
       expect(wrapper.find('EmptyMessage').exists()).toBe(true);
     });
+
+    it('removing webhookURL unsets isAlertable and changes webhookDisabled to true', async () => {
+      expect(wrapper.find(PermissionsObserver).prop('webhookDisabled')).toBe(false);
+      expect(wrapper.find('Switch[name="isAlertable"]').prop('isActive')).toBe(true);
+      wrapper.find('Input[name="webhookUrl"]').simulate('change', {target: {value: ''}});
+      expect(wrapper.find('Switch[name="isAlertable"]').prop('isActive')).toBe(false);
+      expect(wrapper.find(PermissionsObserver).prop('webhookDisabled')).toBe(true);
+      expect(wrapper.find(JsonForm).prop('additionalFieldProps')).toEqual({
+        webhookDisabled: true,
+      });
+    });
   });
 
   describe('Editing an existing public Sentry App', () => {
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/subscriptionBox.spec.jsx b/tests/js/spec/views/settings/organizationDeveloperSettings/subscriptionBox.spec.jsx
index e92b77ef00..2a92f70ed8 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/subscriptionBox.spec.jsx
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/subscriptionBox.spec.jsx
@@ -14,7 +14,7 @@ describe('SubscriptionBox', () => {
       <SubscriptionBox
         resource="issue"
         checked={false}
-        disabled={false}
+        disabledFromPermissions={false}
         onChange={onChange}
         organization={org}
       />,
@@ -26,14 +26,13 @@ describe('SubscriptionBox', () => {
     expect(wrapper).toMatchSnapshot();
   });
 
-  it('updates state and calls onChange prop when checking checkbox', () => {
+  it('calls onChange prop when checking checkbox', () => {
     wrapper.find('Checkbox input').simulate('change', {target: {checked: true}});
-    expect(wrapper.state('checked')).toBe(true);
     expect(onChange).toHaveBeenCalledWith('issue', true);
   });
 
   it('renders tooltip when checkbox is disabled', () => {
-    wrapper.setProps({disabled: true});
+    wrapper.setProps({disabledFromPermissions: true});
     expect(wrapper.find('Tooltip').prop('disabled')).toBe(false);
   });
 
@@ -44,7 +43,7 @@ describe('SubscriptionBox', () => {
         <SubscriptionBox
           resource="error"
           checked={false}
-          disabled={false}
+          disabledFromPermissions={false}
           onChange={onChange}
           organization={org}
         />,
@@ -66,7 +65,7 @@ describe('SubscriptionBox', () => {
         <SubscriptionBox
           resource="error"
           checked={false}
-          disabled={false}
+          disabledFromPermissions={false}
           onChange={onChange}
           organization={org}
         />,
@@ -81,7 +80,7 @@ describe('SubscriptionBox', () => {
         <SubscriptionBox
           resource="error"
           checked={false}
-          disabled={false}
+          disabledFromPermissions={false}
           onChange={onChange}
           organization={org}
         />,
@@ -90,4 +89,24 @@ describe('SubscriptionBox', () => {
       expect(wrapper.find('Tooltip').prop('disabled')).toBe(true);
     });
   });
+
+  it('disables checkbox when webhookDisabled=true', () => {
+    wrapper = mount(
+      <SubscriptionBox
+        resource="issue"
+        checked={false}
+        disabledFromPermissions={false}
+        webhookDisabled={true}
+        onChange={onChange}
+        organization={org}
+      />,
+      TestStubs.routerContext()
+    );
+    const tooltip = wrapper.find('Tooltip');
+    expect(tooltip.prop('disabled')).toBe(false);
+    expect(tooltip.prop('title')).toBe(
+      'Cannot enable webhook subscription without specifying a webhook url'
+    );
+    expect(wrapper.find('Checkbox').prop('disabled')).toBe(true);
+  });
 });
diff --git a/tests/sentry/api/endpoints/test_sentry_app_details.py b/tests/sentry/api/endpoints/test_sentry_app_details.py
index 0f0bf840fd..d23bfbc9e4 100644
--- a/tests/sentry/api/endpoints/test_sentry_app_details.py
+++ b/tests/sentry/api/endpoints/test_sentry_app_details.py
@@ -273,6 +273,35 @@ class UpdateSentryAppDetailsTest(SentryAppDetailsTest):
             schema=json.dumps(schema),
         )
 
+    def test_no_webhook_public_integration(self):
+        self.login_as(user=self.user)
+        response = self.client.put(self.url, data={"webhookUrl": ""}, format="json")
+        assert response.status_code == 400
+        assert response.data == {"webhookUrl": ["webhookUrl required for public integrations"]}
+
+    def test_no_webhook_has_events(self):
+        self.login_as(user=self.user)
+        url = reverse("sentry-api-0-sentry-app-details", args=[self.internal_integration.slug])
+        response = self.client.put(
+            url, data={"webhookUrl": "", "events": ("issue",)}, format="json"
+        )
+        assert response.status_code == 400
+        assert response.data == {
+            "webhookUrl": ["webhookUrl required if webhook events are enabled"]
+        }
+
+    def test_no_webhook_has_alerts(self):
+        self.login_as(user=self.user)
+        # make sure we test at least one time with the webhookUrl set to none before the put request
+        self.internal_integration.webhook_url = None
+        self.internal_integration.save()
+        url = reverse("sentry-api-0-sentry-app-details", args=[self.internal_integration.slug])
+        response = self.client.put(url, data={"isAlertable": True}, format="json")
+        assert response.status_code == 400
+        assert response.data == {
+            "webhookUrl": ["webhookUrl required if alert rule action is enabled"]
+        }
+
 
 class DeleteSentryAppDetailsTest(SentryAppDetailsTest):
     def test_delete_unpublished_app(self):
diff --git a/tests/sentry/api/endpoints/test_sentry_apps.py b/tests/sentry/api/endpoints/test_sentry_apps.py
index bccb17cb18..733fc35d82 100644
--- a/tests/sentry/api/endpoints/test_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_sentry_apps.py
@@ -433,6 +433,7 @@ class PostSentryAppsTest(SentryAppsTest):
             "webhookUrl": "https://example.com",
             "redirectUrl": "",
             "isAlertable": False,
+            "isInternal": False,
             "verifyInstall": True,
         }
 
diff --git a/tests/sentry/mediators/sentry_apps/test_updater.py b/tests/sentry/mediators/sentry_apps/test_updater.py
index 32818da720..9ea19443c5 100644
--- a/tests/sentry/mediators/sentry_apps/test_updater.py
+++ b/tests/sentry/mediators/sentry_apps/test_updater.py
@@ -18,7 +18,6 @@ class TestUpdater(TestCase):
             scopes=("project:read",),
             schema={"elements": [self.create_issue_link_schema()]},
         )
-
         self.updater = Updater(sentry_app=self.sentry_app, user=self.user)
 
     def test_updates_name(self):
@@ -73,9 +72,21 @@ class TestUpdater(TestCase):
         assert set(service_hook.events) == expand_events(["issue"])
 
     def test_updates_webhook_url(self):
-        self.updater.webhook_url = "http://example.com/hooks"
-        self.updater.call()
-        assert self.sentry_app.webhook_url == "http://example.com/hooks"
+        sentry_app = self.create_sentry_app(
+            name="sentry",
+            organization=self.org,
+            scopes=("project:read", "event:read"),
+            events=("event.alert",),
+        )
+        self.create_sentry_app_installation(slug="sentry")
+        updater = Updater(
+            sentry_app=sentry_app, webhook_url="http://example.com/hooks", user=self.user
+        )
+        updater.call()
+        assert sentry_app.webhook_url == "http://example.com/hooks"
+        service_hook = ServiceHook.objects.get(application=sentry_app.application)
+        assert service_hook.url == "http://example.com/hooks"
+        assert set(service_hook.events) == expand_events(["event.alert"])
 
     def test_updates_redirect_url(self):
         self.updater.redirect_url = "http://example.com/finish-setup"
@@ -110,3 +121,28 @@ class TestUpdater(TestCase):
         self.updater.status = "published"
         self.updater.call()
         assert self.sentry_app.status == SentryAppStatus.UNPUBLISHED
+
+    def test_create_service_hook_on_update(self):
+        self.create_project(organization=self.org)
+        internal_app = self.create_internal_integration(
+            name="Internal", organization=self.org, webhook_url=None, scopes=("event:read",)
+        )
+        assert len(ServiceHook.objects.filter(application=internal_app.application)) == 0
+        updater = Updater(sentry_app=internal_app, user=self.user)
+        updater.webhook_url = "https://sentry.io/hook"
+        updater.events = ("issue",)
+        updater.call()
+        service_hook = ServiceHook.objects.get(application=internal_app.application)
+        assert service_hook.url == "https://sentry.io/hook"
+        assert set(service_hook.events) == expand_events(["issue"])
+
+    def test_delete_service_hook_on_update(self):
+        self.create_project(organization=self.org)
+        internal_app = self.create_internal_integration(
+            name="Internal", organization=self.org, webhook_url="https://sentry.io/hook"
+        )
+        assert len(ServiceHook.objects.filter(application=internal_app.application)) == 1
+        updater = Updater(sentry_app=internal_app, user=self.user)
+        updater.webhook_url = ""
+        updater.call()
+        assert len(ServiceHook.objects.filter(application=internal_app.application)) == 0
