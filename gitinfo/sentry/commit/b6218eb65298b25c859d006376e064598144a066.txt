commit b6218eb65298b25c859d006376e064598144a066
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Wed Mar 25 14:01:13 2020 +0100

    ref: Remove project slug as cache key (#16512)
    
    A query such as `Project.objects.get_from_cache(slug='foobar')` does not necessarily yield only one project, and as such `slug` is not a usable cache key.
    
    Luckily we are not using it as such even though we intended to, since all of our queries look like `Project.objects.get_from_cache(slug='foobar', organization_id=123)`, which bypasses the cache entirely (the cache can only deal with filtering by a single value).
    
    In fact we would not be able to call `Project.objects.get_from_cache(slug='foobar')` because it will crash when trying to populate the cache.
    
    There are many other instances where we call `get_from_cache` without actually gaining anything in performance because we provide the wrong arguments. So we now make `get_from_cache` crash if it is being used ineffectively.

diff --git a/src/sentry/db/models/manager.py b/src/sentry/db/models/manager.py
index c2f85e7d4f..470b59cc1d 100644
--- a/src/sentry/db/models/manager.py
+++ b/src/sentry/db/models/manager.py
@@ -77,6 +77,12 @@ class BaseManager(Manager):
     _queryset_class = BaseQuerySet
 
     def __init__(self, *args, **kwargs):
+        #: Model fields for which we should build up a cache to be used with
+        #: Model.objects.get_from_cache(fieldname=value)`.
+        #:
+        #: Note that each field by its own needs to be a potential primary key
+        #: (uniquely identify a row), so for example organization slug is ok,
+        #: project slug is not.
         self.cache_fields = kwargs.pop("cache_fields", [])
         self.cache_ttl = kwargs.pop("cache_ttl", 60 * 5)
         self._cache_version = kwargs.pop("cache_version", None)
@@ -262,7 +268,7 @@ class BaseManager(Manager):
         the cache key is cleared on save.
         """
         if not self.cache_fields or len(kwargs) > 1:
-            return self.get(**kwargs)
+            raise ValueError("We cannot cache this query. Just hit the database.")
 
         key, value = next(six.iteritems(kwargs))
         pk_name = self.model._meta.pk.name
@@ -318,7 +324,7 @@ class BaseManager(Manager):
 
             return retval
         else:
-            return self.get(**kwargs)
+            raise ValueError("We cannot cache this query. Just hit the database.")
 
     def get_many_from_cache(self, values, key="pk"):
         """
@@ -346,7 +352,7 @@ class BaseManager(Manager):
             key = key.split("__exact", 1)[0]
 
         if key not in self.cache_fields and key != pk_name:
-            return self.filter(**{key + "__in": values})
+            raise ValueError("We cannot cache this query. Just hit the database.")
 
         final_results = []
         cache_lookup_cache_keys = []
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 3f2873e841..bc8755f33d 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -111,7 +111,7 @@ class Project(Model, PendingDeletionMixin):
         null=True,
     )
 
-    objects = ProjectManager(cache_fields=["pk", "slug"])
+    objects = ProjectManager(cache_fields=["pk"])
     platform = models.CharField(max_length=64, null=True)
 
     class Meta:
diff --git a/src/sentry/tasks/clear_expired_resolutions.py b/src/sentry/tasks/clear_expired_resolutions.py
index d154ae0e6b..be511ed023 100644
--- a/src/sentry/tasks/clear_expired_resolutions.py
+++ b/src/sentry/tasks/clear_expired_resolutions.py
@@ -16,7 +16,7 @@ def clear_expired_resolutions(release_id):
     This is currently only used for ``in_next_release`` resolutions.
     """
     try:
-        release = Release.objects.get_from_cache(id=release_id)
+        release = Release.objects.get(id=release_id)
     except Release.DoesNotExist:
         return
 
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index a6d21542fa..e358f6bd55 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -139,7 +139,7 @@ class OrganizationMixin(object):
 
     def get_active_project(self, request, organization, project_slug):
         try:
-            project = Project.objects.get_from_cache(slug=project_slug, organization=organization)
+            project = Project.objects.get(slug=project_slug, organization=organization)
         except Project.DoesNotExist:
             return None
 
