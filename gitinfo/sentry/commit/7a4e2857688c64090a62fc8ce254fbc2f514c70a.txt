commit 7a4e2857688c64090a62fc8ce254fbc2f514c70a
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Fri Feb 10 15:34:51 2017 +0100

    Revert checkbox changes, trigger reprocessing when saving changes

diff --git a/src/sentry/api/endpoints/project_processingissues.py b/src/sentry/api/endpoints/project_processingissues.py
index 2a0d3080c5..53b71590ff 100644
--- a/src/sentry/api/endpoints/project_processingissues.py
+++ b/src/sentry/api/endpoints/project_processingissues.py
@@ -5,6 +5,7 @@ from rest_framework.response import Response
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize
 from sentry.models import ProcessingIssue, ReprocessingReport
+from sentry.reprocessing import trigger_reprocessing
 
 
 class ProjectProcessingIssuesEndpoint(ProjectEndpoint):
@@ -42,3 +43,18 @@ class ProjectProcessingIssuesEndpoint(ProjectEndpoint):
             data['issues'] = [serialize(x, request.user) for x in q]
 
         return Response(serialize(data, request.user))
+
+    def delete(self, request, project):
+        """
+        This deletes all open processing issues and triggers reprocessing if
+        the user disabled the checkbox
+        """
+        reprocessing_active = bool(
+            project.get_option('sentry:reprocessing_active', True)
+        )
+        if not reprocessing_active:
+            ProcessingIssue.objects. \
+                resolve_all_processing_issue(project=project)
+            trigger_reprocessing(project)
+            return Response(status=200)
+        return Response(status=304)
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index ea3d173817..af344ef092 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -437,13 +437,10 @@ class NativeStacktraceProcessor(StacktraceProcessor):
             if not symbolicated_frames:
                 return None, [raw_frame], []
         except SymbolicationFailed as e:
-            project = Project.objects.get_from_cache(
-                id=self.data.get('project'),
-            )
             reprocessing_active = True
-            if project:
+            if self.project:
                 reprocessing_active = bool(
-                    project.get_option('sentry:reprocessing_active', True)
+                    self.project.get_option('sentry:reprocessing_active', True)
                 )
             # User fixable but fatal errors are reported as processing
             # issues but only if the feature is activated.
diff --git a/src/sentry/models/processingissue.py b/src/sentry/models/processingissue.py
index 4547db8f60..d8ad8c0536 100644
--- a/src/sentry/models/processingissue.py
+++ b/src/sentry/models/processingissue.py
@@ -44,6 +44,15 @@ class ProcessingIssueManager(BaseManager):
             q = q.filter(type=type)
         q.delete()
 
+    def resolve_all_processing_issue(self, project):
+        """
+        Resolves all processing issues.
+        """
+        q = ProcessingIssue.objects.filter(
+            project=project,
+        )
+        q.delete()
+
     def find_resolved(self, project_id, limit=100):
         """Returns a list of raw events that generally match the given
         processing issue and no longer have any issues remaining.  Returns
diff --git a/src/sentry/static/sentry/app/components/forms/booleanField.jsx b/src/sentry/static/sentry/app/components/forms/booleanField.jsx
index a185e41d15..878c8a839e 100644
--- a/src/sentry/static/sentry/app/components/forms/booleanField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/booleanField.jsx
@@ -5,13 +5,6 @@ import {defined} from '../../utils';
 import InputField from './inputField';
 
 export default class BooleanField extends InputField {
-
-  componentWillReceiveProps(nextProps) {
-    this.setState({
-      value: this.valueFromProps(nextProps)
-    });
-  }
-
   valueFromProps(props) {
     let value = super.valueFromProps(props);
     return value ? true : false;
@@ -31,11 +24,11 @@ export default class BooleanField extends InputField {
           type={this.getType()}
           onChange={this.onChange.bind(this)}
           disabled={this.props.disabled}
-          defaultChecked={this.state.value}
-          checked={this.state.value} />
+          defaultChecked={this.state.value} />
     );
   }
 
+
   render() {
     let className = this.getClassName();
     if (this.props.error) {
diff --git a/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
index 1f406e8adf..df021331c5 100644
--- a/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
+++ b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
@@ -37,7 +37,7 @@ const ProjectProcessingIssues = React.createClass({
       formData: {},
       loading: true,
       reprocessing: false,
-      expected: 2,
+      expected: 0,
       error: false,
       processingIssues: null,
     };
@@ -57,7 +57,9 @@ const ProjectProcessingIssues = React.createClass({
 
   fetchData() {
     let {orgId, projectId} = this.props.params;
-
+    this.setState({
+      expected: (this.state.expected + 2),
+    });
     this.api.request(`/projects/${orgId}/${projectId}/`, {
       success: (data, _, jqXHR) => {
         let expected = this.state.expected - 1;
@@ -123,6 +125,33 @@ const ProjectProcessingIssues = React.createClass({
     });
   },
 
+  deleteProcessingIssues() {
+    let {orgId, projectId} = this.props.params;
+    this.setState({
+      expected: (this.state.expected + 1),
+    });
+    this.api.request(`/projects/${orgId}/${projectId}/processingissues/?detailed=1`, {
+      method: 'DELETE',
+      success: (data, _, jqXHR) => {
+        let expected = this.state.expected - 1;
+        this.setState({
+          expected: expected,
+          error: false,
+          loading: expected > 0,
+        });
+        this.fetchData();
+      },
+      error: () => {
+        let expected = this.state.expected - 1;
+        this.setState({
+          expected: expected,
+          error: true,
+          loading: expected > 0
+        });
+      }
+    });
+  },
+
   renderDebugTable() {
     let body;
 
@@ -250,6 +279,9 @@ const ProjectProcessingIssues = React.createClass({
   },
 
   renderReprocessingCheckbox() {
+    if (this.state.loading) {
+      return this.renderLoading();
+    }
     let isSaving = this.state.formState === FormState.SAVING;
     let errors = this.state.errors;
     return (
@@ -269,11 +301,11 @@ const ProjectProcessingIssues = React.createClass({
                 key="reprocessing-active"
                 name="reprocessing-active"
                 label={t('Reprocessing active')}
-                help={t(`If you are having issues with the reprocessing feature
-                  you can turn it off here. If you save the changes all Issues
-                  will be deleted and the Events will be processed. Keep in mind
-                  that these Events will probably show incomplete stacktraces.
-                  Everything will be fine again, we promise ;)`)}
+                help={t(`If you are having problems with the reprocessing feature
+                  you can turn it off here. If you save the changes all Processing
+                  Issues will be deleted and the Events will be processed.
+                  Keep in mind that these Events will probably show incomplete
+                  stacktraces. Everything will be fine again, we promise ;)`)}
                 value={this.state.formData['sentry:reprocessing_active']}
                 error={errors ? errors['sentry:reprocessing_active'] : ''}
                 onChange={this.onFieldChange.bind(this, 'sentry:reprocessing_active')} />
@@ -306,6 +338,7 @@ const ProjectProcessingIssues = React.createClass({
             state: FormState.READY,
             errors: {},
           });
+          this.deleteProcessingIssues();
         },
         error: (error) => {
           this.setState({
