commit bd9015815c00c22cd30a43e42964af7784d43655
Author: Burak Yigit Kaya <byk@sentry.io>
Date:   Thu Sep 5 18:27:08 2019 +0300

    fix(OptionsManager): FLAG_PRIORITIZE_DISK should honor empty (#14557)
    
    Fixes #14086. Right now if the disk value is a falsy value,
    `OptionsManager` uses the value from the DB, making it impossible
    to override certain values from config files with empty strings or
    `0` or similar. This patch adds an explicit `is not None` check
    to fix the issue.
    
    _**⚠️ WARNING:** This may break certain assumptions with default values being blank in the config files, allowing UI/DB overrides for these. It may also need some changes in the installWizard to disable the SMTP-related fields._

diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index c28047a222..11da30fa41 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -31,7 +31,7 @@ FLAG_STOREONLY = 1 << 3
 # Values that must be defined for setup to be considered complete
 FLAG_REQUIRED = 1 << 4
 # If the value is defined on disk, use that and don't attempt to fetch from db.
-# This also make the value immutible to changes from web UI.
+# This also make the value immutable to changes from web UI.
 FLAG_PRIORITIZE_DISK = 1 << 5
 # If the value is allowed to be empty to be considered valid
 FLAG_ALLOW_EMPTY = 1 << 6
@@ -139,7 +139,7 @@ class OptionsManager(object):
             except KeyError:
                 pass
             else:
-                if result:
+                if result is not None:
                     return result
 
         if not (opt.flags & FLAG_NOSTORE):
diff --git a/tests/sentry/options/test_manager.py b/tests/sentry/options/test_manager.py
index 0ad72d3a3d..b8272ace8f 100644
--- a/tests/sentry/options/test_manager.py
+++ b/tests/sentry/options/test_manager.py
@@ -198,6 +198,14 @@ class OptionsManagerTest(TestCase):
         with self.settings(SENTRY_OPTIONS={"prioritize_disk": "something-else!"}):
             assert self.manager.get("prioritize_disk") == "something-else!"
 
+        # Ensure empty values on disk are preferred over DB values (See #14557)
+        with self.settings(SENTRY_OPTIONS={"prioritize_disk": ""}):
+            assert self.manager.get("prioritize_disk") == ""
+
+        # Ensure None on disk are NOT preferred over DB (See #14557)
+        with self.settings(SENTRY_OPTIONS={"prioritize_disk": None}):
+            assert self.manager.get("prioritize_disk") == "foo"
+
     def test_db_unavailable(self):
         with patch.object(Option.objects, "get_queryset", side_effect=Exception()):
             # we can't update options if the db is unavailable
