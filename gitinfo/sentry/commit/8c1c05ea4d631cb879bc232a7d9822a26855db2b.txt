commit 8c1c05ea4d631cb879bc232a7d9822a26855db2b
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Mon Jul 16 11:54:02 2018 -0700

    feat(async-component): Add reloadOnVisible (#9052)
    
    Setting this flag on a component will cause the component to reload it's
    data when the window becomes visible and it is mounted.
    
    This is a revert of the 5da39d5f25 revert with a minor fix.

diff --git a/src/sentry/static/sentry/app/components/asyncComponent.jsx b/src/sentry/static/sentry/app/components/asyncComponent.jsx
index 2755db1267..3d4b9f0408 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.jsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.jsx
@@ -20,6 +20,20 @@ class AsyncComponent extends React.Component {
     router: PropTypes.object,
   };
 
+  // Override this flag to have the component reload it's state when the window
+  // becomes visible again. This will set the loading and reloading state, but
+  // will not render a loading state during reloading.
+  //
+  // eslint-disable-next-line react/sort-comp
+  reloadOnVisible = false;
+
+  // When enabling reloadOnVisible, this flag may be used to turn on and off
+  // the reloading. This is useful if your component only needs to reload when
+  // becoming visible during certain states.
+  //
+  // eslint-disable-next-line react/sort-comp
+  shouldReloadOnVisible = false;
+
   constructor(props, context) {
     super(props, context);
 
@@ -32,6 +46,10 @@ class AsyncComponent extends React.Component {
   componentWillMount() {
     this.api = new Client();
     this.fetchData();
+
+    if (this.reloadOnVisible) {
+      document.addEventListener('visibilitychange', this.visibilityReloader);
+    }
   }
 
   componentWillReceiveProps(nextProps, nextContext) {
@@ -57,6 +75,7 @@ class AsyncComponent extends React.Component {
 
   componentWillUnmount() {
     this.api.clear();
+    document.removeEventListener('visibilitychange', this.visibilityReloader);
   }
 
   // XXX: cant call this getInitialState as React whines
@@ -65,6 +84,8 @@ class AsyncComponent extends React.Component {
     let state = {
       // has all data finished requesting?
       loading: true,
+      // is the component reload
+      reloading: false,
       // is there an error loading ANY data?
       error: false,
       errors: {},
@@ -79,14 +100,16 @@ class AsyncComponent extends React.Component {
     this.setState(this.getDefaultState(), this.fetchData);
   };
 
-  fetchData = () => {
+  visibilityReloader = () =>
+    this.shouldReloadOnVisible && !document.hidden && this.reloadData();
+
+  reloadData = () => this.fetchData({reloading: true});
+
+  fetchData = extraState => {
     let endpoints = this.getEndpoints();
 
     if (!endpoints.length) {
-      this.setState({
-        loading: false,
-        error: false,
-      });
+      this.setState({loading: false, error: false});
       return;
     }
 
@@ -95,6 +118,7 @@ class AsyncComponent extends React.Component {
       loading: true,
       error: false,
       remainingRequests: endpoints.length,
+      ...extraState,
     });
 
     endpoints.forEach(([stateKey, endpoint, params, options]) => {
@@ -141,6 +165,7 @@ class AsyncComponent extends React.Component {
       if (initialRequest) {
         state.remainingRequests = prevState.remainingRequests - 1;
         state.loading = prevState.remainingRequests > 1;
+        state.reloading = prevState.reloading && state.loading;
       }
 
       return state;
@@ -157,16 +182,20 @@ class AsyncComponent extends React.Component {
       });
     }
     this.setState(prevState => {
-      return {
+      let state = {
         [stateKey]: null,
         errors: {
           ...prevState.errors,
           [stateKey]: error,
         },
-        remainingRequests: prevState.remainingRequests - 1,
-        loading: prevState.remainingRequests > 1,
         error: prevState.error || !!error,
       };
+
+      state.remainingRequests = prevState.remainingRequests - 1;
+      state.loading = prevState.remainingRequests > 1;
+      state.reloading = prevState.reloading && state.loading;
+
+      return state;
     });
   }
 
@@ -245,7 +274,7 @@ class AsyncComponent extends React.Component {
   }
 
   renderComponent() {
-    return this.state.loading
+    return this.state.loading && !this.state.reloading
       ? this.renderLoading()
       : this.state.error
         ? this.renderError(new Error('Unable to load all required endpoints'))
diff --git a/tests/js/spec/views/settings/__snapshots__/organizationRepositoriesContainer.spec.jsx.snap b/tests/js/spec/views/settings/__snapshots__/organizationRepositoriesContainer.spec.jsx.snap
index e2b94a20ca..67006e240f 100644
--- a/tests/js/spec/views/settings/__snapshots__/organizationRepositoriesContainer.spec.jsx.snap
+++ b/tests/js/spec/views/settings/__snapshots__/organizationRepositoriesContainer.spec.jsx.snap
@@ -17,6 +17,7 @@ exports[`OrganizationRepositoriesContainer render() without any providers is loa
         "orgId": "org-slug",
       }
     }
+    reloading={false}
     remainingRequests={0}
     repoConfig={
       Object {
