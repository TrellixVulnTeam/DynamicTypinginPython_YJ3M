commit 9fe7fe3e208e5e76a3759a7ae3eb4617f1f2f043
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Sat Jan 30 15:56:57 2016 -0800

    Decouple type parsing from the options package
    
    It's not possible to utilize this package now without initializing a
    full sentry environment since sentry.options.__init__ requies the entire
    environment to be initialized.
    
    This will be leveraged from:
    
    * getsentry/docker-sentry#36
    * getsentry/docker-sentry#37

diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 31d39ea1d1..3ea544f83d 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -9,7 +9,7 @@ from __future__ import absolute_import, print_function
 
 
 from sentry.options import register, FLAG_NOSTORE, FLAG_REQUIRED, FLAG_PRIORITIZE_DISK
-from sentry.options.types import Dict
+from sentry.utils.types import Dict
 
 
 register('cache.backend', flags=FLAG_NOSTORE)
diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index 2cc1e70dd6..717274ee67 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -11,7 +11,7 @@ import logging
 from itertools import ifilter
 from types import NoneType
 from django.conf import settings
-from .types import type_from_value, Any
+from sentry.utils.types import type_from_value, Any
 
 # Prevent outselves from clobbering the builtin
 _type = type
diff --git a/src/sentry/options/types.py b/src/sentry/utils/types.py
similarity index 88%
rename from src/sentry/options/types.py
rename to src/sentry/utils/types.py
index 7265ecba3d..18cc56bb7c 100644
--- a/src/sentry/options/types.py
+++ b/src/sentry/utils/types.py
@@ -1,8 +1,8 @@
 """
-sentry.options.types
-~~~~~~~~~~~~~~~~~~~~
+sentry.utils.types
+~~~~~~~~~~~~~~~~~~
 
-:copyright: (c) 2010-2015 by the Sentry Team, see AUTHORS for more details.
+:copyright: (c) 2010-2016 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
 from __future__ import absolute_import, print_function
@@ -21,8 +21,8 @@ class InvalidTypeError(TypeError):
     pass
 
 
-class OptionType(object):
-    """Base OptionType that provides type coersion"""
+class Type(object):
+    """Base Type that provides type coersion"""
     name = ''
     # Default value to be returned when initializing
     default = None
@@ -58,14 +58,14 @@ class OptionType(object):
         return self.name
 
 
-class AnyType(OptionType):
+class AnyType(Type):
     """A type that accepts any value and does no coersion"""
     name = 'any'
     expected_types = (object,)
     compatible_types = (object,)
 
 
-class BoolType(OptionType):
+class BoolType(Type):
     "Coerce a boolean from a string"
     name = 'boolean'
     default = False
@@ -79,7 +79,7 @@ class BoolType(OptionType):
             return False
 
 
-class IntType(OptionType):
+class IntType(Type):
     """Coerce an integer from a string"""
     name = 'integer'
     default = 0
@@ -92,7 +92,7 @@ class IntType(OptionType):
             return
 
 
-class FloatType(OptionType):
+class FloatType(Type):
     """Coerce a float from a string or integer"""
     name = 'float'
     default = 0.0
@@ -106,7 +106,7 @@ class FloatType(OptionType):
             return
 
 
-class StringType(OptionType):
+class StringType(Type):
     """String type without any coersion, must be a string"""
     name = 'string'
     default = u''
@@ -114,7 +114,7 @@ class StringType(OptionType):
     compatible_types = (basestring,)
 
 
-class DictType(OptionType):
+class DictType(Type):
     """Coerce a dict out of a json/yaml string"""
     name = 'dictionary'
     expected_types = (dict,)
@@ -130,7 +130,7 @@ class DictType(OptionType):
             return
 
 
-class SequenceType(OptionType):
+class SequenceType(Type):
     """Coerce a tuple out of a json/yaml string or a list"""
     name = 'sequence'
     default = ()
@@ -158,7 +158,7 @@ Dict = DictType()
 Sequence = SequenceType()
 
 
-# Mapping for basic types into what their OptionType is
+# Mapping for basic types into what their Type is
 _type_mapping = {
     bool: Bool,
     int: Int,
@@ -172,5 +172,5 @@ _type_mapping = {
 
 
 def type_from_value(value):
-    """Fetch OptionType based on a primitive value"""
+    """Fetch Type based on a primitive value"""
     return _type_mapping[type(value)]
diff --git a/tests/sentry/options/test_manager.py b/tests/sentry/options/test_manager.py
index 6c26554029..488c612d2a 100644
--- a/tests/sentry/options/test_manager.py
+++ b/tests/sentry/options/test_manager.py
@@ -10,7 +10,7 @@ from sentry.options.store import OptionsStore
 from sentry.options.manager import (
     OptionsManager, UnknownOption, DEFAULT_FLAGS,
     FLAG_IMMUTABLE, FLAG_NOSTORE, FLAG_STOREONLY, FLAG_REQUIRED, FLAG_PRIORITIZE_DISK)
-from sentry.options.types import Int, String
+from sentry.utils.types import Int, String
 from sentry.testutils import TestCase
 
 
diff --git a/tests/sentry/options/test_types.py b/tests/sentry/utils/test_types.py
similarity index 98%
rename from tests/sentry/options/test_types.py
rename to tests/sentry/utils/test_types.py
index 3695f45ec3..e487325eca 100644
--- a/tests/sentry/options/test_types.py
+++ b/tests/sentry/utils/test_types.py
@@ -2,7 +2,7 @@
 
 from __future__ import absolute_import
 
-from sentry.options.types import (
+from sentry.utils.types import (
     InvalidTypeError,
     Any, Bool, Int, Float, String, Dict, Sequence,
 )
