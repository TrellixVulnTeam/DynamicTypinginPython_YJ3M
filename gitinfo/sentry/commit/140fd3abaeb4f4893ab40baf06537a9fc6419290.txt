commit 140fd3abaeb4f4893ab40baf06537a9fc6419290
Author: Billy Vong <billyvg@gmail.com>
Date:   Tue Jul 25 13:35:35 2017 -0700

    Refactor "Stream Group" into smaller components
    
    * StreamGroupHeader - to display an event/group title
    * EventExtraDetails - to display additional event/group details
    (last/first seen, platform, etc)

diff --git a/src/sentry/static/sentry/app/components/count.jsx b/src/sentry/static/sentry/app/components/count.jsx
index dee1414cab..f0fd092040 100644
--- a/src/sentry/static/sentry/app/components/count.jsx
+++ b/src/sentry/static/sentry/app/components/count.jsx
@@ -36,6 +36,8 @@ export default React.createClass({
   },
 
   render() {
-    return <span>{this.formatNumber(this.props.value)}</span>;
+    let {value, className} = this.props;
+
+    return <span className={className}>{this.formatNumber(value)}</span>;
   }
 });
diff --git a/src/sentry/static/sentry/app/components/eventExtraDetails.jsx b/src/sentry/static/sentry/app/components/eventExtraDetails.jsx
new file mode 100644
index 0000000000..193b79f682
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/eventExtraDetails.jsx
@@ -0,0 +1,96 @@
+import React, {PropTypes} from 'react';
+import {Link} from 'react-router';
+
+import ProjectState from '../mixins/projectState';
+import TimeSince from './timeSince';
+import ShortId from './shortId';
+
+const EventExtraDetails = React.createClass({
+  propTypes: {
+    orgId: PropTypes.string.isRequired,
+    projectId: PropTypes.string.isRequired,
+    groupId: PropTypes.string.isRequired,
+    firstSeen: PropTypes.string,
+    lastSeen: PropTypes.string,
+    shortId: PropTypes.string,
+    subscriptionDetails: PropTypes.shape({
+      reason: PropTypes.string
+    }),
+    numComments: PropTypes.number,
+    logger: PropTypes.string,
+    annotations: PropTypes.arrayOf(PropTypes.string)
+  },
+
+  mixins: [ProjectState],
+
+  render() {
+    let {
+      orgId,
+      projectId,
+      groupId,
+      lastSeen,
+      firstSeen,
+      shortId,
+      subscriptionDetails,
+      numComments,
+      logger,
+      annotations
+    } = this.props;
+    let styles = {};
+    if (subscriptionDetails && subscriptionDetails.reason === 'mentioned') {
+      styles = {color: '#57be8c'};
+    }
+
+    return (
+      <div className="event-extra">
+        <ul>
+          {this.getFeatures().has('callsigns') &&
+            shortId &&
+            <li>
+              <ShortId shortId={shortId} />
+            </li>}
+          <li>
+            <span className="icon icon-clock" />
+            {lastSeen && <TimeSince date={lastSeen} />}
+            {firstSeen && lastSeen && <span>&nbsp;—&nbsp;</span>}
+            {firstSeen && <TimeSince date={firstSeen} suffix="old" />}
+          </li>
+          {numComments > 0 &&
+            <li>
+              <Link
+                to={`/${orgId}/${projectId}/issues/${groupId}/activity/`}
+                className="comments">
+                <span className="icon icon-comments" style={styles} />
+                <span className="tag-count">{numComments}</span>
+              </Link>
+            </li>}
+          {logger &&
+            <li className="event-annotation">
+              <Link
+                to={{
+                  pathname: `/${orgId}/${projectId}/`,
+                  query: {
+                    query: 'logger:' + logger
+                  }
+                }}>
+                {logger}
+              </Link>
+            </li>}
+          {annotations &&
+            annotations.map((annotation, key) => {
+              return (
+                <li
+                  className="event-annotation"
+                  dangerouslySetInnerHTML={{
+                    __html: annotation
+                  }}
+                  key={key}
+                />
+              );
+            })}
+        </ul>
+      </div>
+    );
+  }
+});
+export default EventExtraDetails;
diff --git a/src/sentry/static/sentry/app/components/group/title.jsx b/src/sentry/static/sentry/app/components/group/title.jsx
index e06374e2c7..6bce104be3 100644
--- a/src/sentry/static/sentry/app/components/group/title.jsx
+++ b/src/sentry/static/sentry/app/components/group/title.jsx
@@ -1,24 +1,36 @@
-import React from 'react';
+import React, {PropTypes} from 'react';
 
 const GroupTitle = React.createClass({
   propTypes: {
-    data: React.PropTypes.object.isRequired
+    data: PropTypes.shape({
+      type: PropTypes.oneOf(['error', 'csp', 'default']).isRequired,
+      title: PropTypes.string,
+      metadata: PropTypes.shape({
+        directive: PropTypes.string,
+        type: PropTypes.string,
+        title: PropTypes.string,
+        uri: PropTypes.string
+      }).isRequired,
+      culprit: PropTypes.string
+    })
   },
 
   render() {
-    let data = this.props.data;
-    let metadata = data.metadata;
-    let title = data.title;
+    let {data} = this.props;
+    let {metadata, title: _title, type, culprit} = data;
+    let title = _title;
     let subtitle = null;
-    if (data.type == 'error') {
+
+    if (type == 'error') {
       title = metadata.type;
-      subtitle = data.culprit;
-    } else if (data.type == 'csp') {
+      subtitle = culprit;
+    } else if (type == 'csp') {
       title = metadata.directive;
       subtitle = metadata.uri;
-    } else if (data.type == 'default') {
+    } else if (type == 'default') {
       title = metadata.title;
     }
+
     if (subtitle) {
       return (
         <span>
diff --git a/src/sentry/static/sentry/app/components/stream/group.jsx b/src/sentry/static/sentry/app/components/stream/group.jsx
index 81c05832b5..2c814bdedc 100644
--- a/src/sentry/static/sentry/app/components/stream/group.jsx
+++ b/src/sentry/static/sentry/app/components/stream/group.jsx
@@ -1,63 +1,19 @@
 import jQuery from 'jquery';
 import React from 'react';
 import Reflux from 'reflux';
-import {Link} from 'react-router';
 
 import AssigneeSelector from '../assigneeSelector';
 import Count from '../count';
 import GroupChart from './groupChart';
 import GroupCheckBox from './groupCheckBox';
 import ProjectState from '../../mixins/projectState';
-import TimeSince from '../timeSince';
-import GroupTitle from '../group/title';
 import GroupStore from '../../stores/groupStore';
 import SelectedGroupStore from '../../stores/selectedGroupStore';
-import ShortId from '../shortId';
+import StreamGroupHeader from './streamGroupHeader';
+import EventExtraDetails from '../eventExtraDetails';
 
 import {valueIsEqual} from '../../utils';
 
-const StreamGroupHeader = React.createClass({
-  propTypes: {
-    data: React.PropTypes.object.isRequired,
-    orgId: React.PropTypes.string.isRequired,
-    projectId: React.PropTypes.string.isRequired
-  },
-
-  getMessage() {
-    let data = this.props.data;
-    let metadata = data.metadata;
-    switch (data.type) {
-      case 'error':
-        return metadata.value;
-      case 'csp':
-        return metadata.message;
-      default:
-        return this.props.data.culprit || '';
-    }
-  },
-
-  render() {
-    let {orgId, projectId, data} = this.props;
-    let message = this.getMessage();
-    return (
-      <div>
-        <h3 className="truncate">
-          <Link to={`/${orgId}/${projectId}/issues/${data.id}/`}>
-            <span className="error-level truncate">{data.level}</span>
-            <span className="icon icon-soundoff" />
-            <span className="icon icon-star-solid" />
-            <GroupTitle data={data} />
-          </Link>
-        </h3>
-        {message &&
-          <div className="event-message truncate">
-            <span className="message">{this.getMessage()}</span>
-          </div>}
-      </div>
-    );
-  }
-});
-
 const StreamGroup = React.createClass({
   propTypes: {
     id: React.PropTypes.string.isRequired,
@@ -143,11 +99,6 @@ const StreamGroup = React.createClass({
 
     let {id, orgId, projectId} = this.props;
 
-    let styles = {};
-    if (data.subscriptionDetails && data.subscriptionDetails.reason === 'mentioned') {
-      styles = {color: '#57be8c'};
-    }
-
     return (
       <li className={className} onClick={this.toggleSelect}>
         <div className="col-md-7 col-xs-8 event-details">
@@ -155,50 +106,14 @@ const StreamGroup = React.createClass({
             <div className="checkbox">
               <GroupCheckBox id={data.id} />
             </div>}
-          <StreamGroupHeader orgId={orgId} projectId={projectId} data={data} />
-          <div className="event-extra">
-            <ul>
-              {this.getFeatures().has('callsigns') &&
-                data.shortId &&
-                <li>
-                  <ShortId shortId={data.shortId} />
-                </li>}
-              <li>
-                <span className="icon icon-clock" />
-                <TimeSince date={data.lastSeen} />
-                &nbsp;—&nbsp;
-                <TimeSince date={data.firstSeen} suffix="old" />
-              </li>
-              {data.numComments !== 0 &&
-                <li>
-                  <Link
-                    to={`/${orgId}/${projectId}/issues/${id}/activity/`}
-                    className="comments">
-                    <span className="icon icon-comments" style={styles} />
-                    <span className="tag-count">{data.numComments}</span>
-                  </Link>
-                </li>}
-              {data.logger &&
-                <li className="event-annotation">
-                  <Link
-                    to={{
-                      pathname: `/${orgId}/${projectId}/`,
-                      query: {query: 'logger:' + data.logger}
-                    }}>
-                    {data.logger}
-                  </Link>
-                </li>}
-              {data.annotations.map((annotation, key) => {
-                return (
-                  <li
-                    className="event-annotation"
-                    dangerouslySetInnerHTML={{__html: annotation}}
-                    key={key}
-                  />
-                );
-              })}
-            </ul>
-          </div>
+          <StreamGroupHeader data={data} orgId={orgId} projectId={projectId} />
+          <EventExtraDetails
+            group
+            {...data}
+            groupId={id}
+            orgId={orgId}
+            projectId={projectId}
+          />
         </div>
         <div className="event-assignee col-md-1 hidden-sm hidden-xs">
           <AssigneeSelector id={data.id} />
@@ -216,5 +131,4 @@ const StreamGroup = React.createClass({
     );
   }
 });
-
 export default StreamGroup;
diff --git a/src/sentry/static/sentry/app/components/stream/streamGroupHeader.jsx b/src/sentry/static/sentry/app/components/stream/streamGroupHeader.jsx
new file mode 100644
index 0000000000..1a662d9401
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/stream/streamGroupHeader.jsx
@@ -0,0 +1,73 @@
+import React, {PropTypes} from 'react';
+import {Link} from 'react-router';
+
+import GroupTitle from '../group/title';
+
+/**
+ * Displays an event or group/issue title (i.e. in Stream)
+ */
+class StreamGroupHeader extends React.Component {
+  static propTypes = {
+    orgId: PropTypes.string.isRequired,
+    projectId: PropTypes.string.isRequired,
+    /** Either an issue or event **/
+    data: PropTypes.shape({
+      id: PropTypes.string,
+      level: PropTypes.string,
+      type: PropTypes.oneOf(['error', 'csp', 'default']).isRequired,
+      title: PropTypes.string,
+      metadata: PropTypes.shape({
+        value: PropTypes.string,
+        message: PropTypes.string,
+        directive: PropTypes.string,
+        type: PropTypes.string,
+        title: PropTypes.string,
+        uri: PropTypes.string
+      }),
+      groupID: PropTypes.string,
+      culprit: PropTypes.string
+    }),
+    hideLevel: PropTypes.bool
+  };
+
+  getMessage() {
+    let {data} = this.props;
+    let {metadata, type, culprit} = data || {};
+
+    switch (type) {
+      case 'error':
+        return metadata.value;
+      case 'csp':
+        return metadata.message;
+      default:
+        return culprit || '';
+    }
+  }
+
+  render() {
+    let {hideLevel, orgId, projectId, data} = this.props;
+    let {id, level, groupID} = data || {};
+    let isEvent = !!data.eventID;
+    let url = `/${orgId}/${projectId}/issues/${isEvent ? groupID : id}/${isEvent ? `events/${data.id}/` : ''}`;
+    let message = this.getMessage();
+
+    return (
+      <div className="event-issue-header">
+        <h3 className="truncate">
+          <Link to={url}>
+            {!hideLevel && level && <span className="error-level truncate">{level}</span>}
+            <span className="icon icon-soundoff" />
+            <span className="icon icon-star-solid" />
+            <GroupTitle {...this.props} />
+          </Link>
+        </h3>
+        {message &&
+          <div className="event-message truncate">
+            <span className="message">{message}</span>
+          </div>}
+      </div>
+    );
+  }
+}
+
+export default StreamGroupHeader;
diff --git a/src/sentry/static/sentry/app/views/groupDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails.jsx
index 469470bbf3..67cda1cfcb 100644
--- a/src/sentry/static/sentry/app/views/groupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails.jsx
@@ -27,6 +27,12 @@ const GroupDetails = React.createClass({
 
   mixins: [ApiMixin, Reflux.listenTo(GroupStore, 'onGroupChange')],
 
+  getDefaultProps() {
+    return {
+      memberList: []
+    };
+  },
+
   getInitialState() {
     return {
       group: null,
diff --git a/src/sentry/static/sentry/app/views/groupDetails/header.jsx b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
index 102bdee2ab..f924970cbd 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/header.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
@@ -16,8 +16,7 @@ import {t} from '../../locale';
 
 const GroupHeader = React.createClass({
   propTypes: {
-    group: React.PropTypes.object.isRequired,
-    memberList: React.PropTypes.array.isRequired
+    group: React.PropTypes.object.isRequired
   },
 
   contextTypes: {
@@ -124,6 +123,9 @@ const GroupHeader = React.createClass({
     let hasSimView = ConfigStore.getConfig().features.has(
       `${orgId}:${projectId}:similarity-view`
     );
+
+    let hasGroupingView = hasSimView || orgFeatures.has('group-unmerge');
+
     return (
       <div className={className}>
         <div className="row">
@@ -229,13 +231,9 @@ const GroupHeader = React.createClass({
           <ListLink to={`/${orgId}/${projectId}/issues/${groupId}/events/`}>
             {t('Events')}
           </ListLink>
-          {orgFeatures.has('group-unmerge') &&
-            <ListLink to={`/${orgId}/${projectId}/issues/${groupId}/hashes/`}>
-              {t('Hashes')}
-            </ListLink>}
-          {hasSimView &&
-            <ListLink to={`/${orgId}/${projectId}/issues/${groupId}/similar/`}>
-              {t('Similar Issues')} <span className="badge">{'?'}</span>
+          {hasGroupingView &&
+            <ListLink to={`/${orgId}/${projectId}/issues/${groupId}/grouping/`}>
+              {t('Grouping')}
             </ListLink>}
         </ul>
       </div>
diff --git a/src/sentry/static/sentry/less/stream.less b/src/sentry/static/sentry/less/stream.less
index c804893c3c..5cf06c1b9e 100644
--- a/src/sentry/static/sentry/less/stream.less
+++ b/src/sentry/static/sentry/less/stream.less
@@ -406,46 +406,6 @@
   .event-details {
     padding: 12px 0 8px 54px;
 
-    h3 {
-      font-size: 16px;
-      line-height: 1.1;
-      margin: 0 0 5px;
-      font-weight: 600;
-
-      .event-type,
-      .error-level {
-        position: absolute;
-        left: -6px;
-        top: 13px;
-        font-size: 10px;
-        font-weight: 600;
-        text-transform: capitalize;
-        text-align: center;
-        color: #fff;
-        padding: 2px 4px;
-        width: 50px;
-        display: block;
-        float: left;
-        border-radius: 2px;
-        margin-right: 5px;
-      }
-
-      em {
-        font-style: normal;
-        font-size: 14px;
-        color: @60;
-        font-weight: normal;
-      }
-
-      a {
-        color: @gray-darker;
-
-        &:hover {
-          color: @gray-darkest;
-        }
-      }
-    }
-
     .event-message, .event-extra {
       line-height: 1.1;
     }
@@ -1375,6 +1335,49 @@
   }
 }
 
+.event-issue-header {
+  h3 {
+    font-size: 16px;
+    line-height: 1.1;
+    margin: 0 0 5px;
+    font-weight: 600;
+
+    .event-type,
+    .error-level {
+      position: absolute;
+      left: -6px;
+      top: 13px;
+      font-size: 10px;
+      font-weight: 600;
+      text-transform: capitalize;
+      text-align: center;
+      color: #fff;
+      padding: 2px 4px;
+      width: 50px;
+      display: block;
+      float: left;
+      border-radius: 2px;
+      margin-right: 5px;
+    }
+
+    em {
+      font-style: normal;
+      font-size: 14px;
+      color: @60;
+      font-weight: normal;
+    }
+
+    a {
+      color: @gray-darker;
+
+      &:hover {
+        color: @gray-darkest;
+      }
+    }
+  }
+}
+
+
 
 @media(max-width:400px) {
   .stream-sort { display: none; }
