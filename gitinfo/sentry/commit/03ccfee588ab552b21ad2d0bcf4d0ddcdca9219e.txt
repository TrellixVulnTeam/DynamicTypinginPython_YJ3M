commit 03ccfee588ab552b21ad2d0bcf4d0ddcdca9219e
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri Aug 7 20:50:44 2015 +0200

    Reformatted and cut doc strings for API endpoints

diff --git a/src/sentry/api/endpoints/auth_index.py b/src/sentry/api/endpoints/auth_index.py
index ccbd70551f..9f9c7d90ac 100644
--- a/src/sentry/api/endpoints/auth_index.py
+++ b/src/sentry/api/endpoints/auth_index.py
@@ -5,7 +5,7 @@ from rest_framework.response import Response
 
 from sentry.api import client
 from sentry.api.authentication import QuietBasicAuthentication
-from sentry.api.base import DocSection, Endpoint
+from sentry.api.base import Endpoint
 from sentry.models import AnonymousUser
 
 
@@ -22,16 +22,25 @@ class AuthIndexEndpoint(Endpoint):
 
     permission_classes = ()
 
-    doc_section = DocSection.ACCOUNTS
+    # XXX: it's not quite clear if this should be documented or not at
+    # this time.
+    # doc_section = DocSection.ACCOUNTS
 
     def post(self, request):
         """
-        Authenticate a user
+        Authenticate a User
+        ```````````````````
 
-        Authenticate a user using the provided credentials.
+        This endpoint authenticates a user using the provided credentials
+        through a regular HTTP basic auth system.  The response contains
+        cookies that need to be sent with further requests that require
+        authentication.
 
-            curl -X {method} -u PUBLIC_KEY:SECRET_KEY {path}
+        This is primarily used internally in Sentry.
 
+        Common example::
+
+            curl -X ###METHOD### -u username:password ###URL###
         """
         if not request.user.is_authenticated():
             return Response(status=400)
@@ -43,12 +52,10 @@ class AuthIndexEndpoint(Endpoint):
 
     def delete(self, request, *args, **kwargs):
         """
-        Logout the authenticated user
+        Logout the Authenticated User
+        `````````````````````````````
 
         Deauthenticate the currently active session.
-
-            {method} {path}
-
         """
         logout(request._request)
         request.user = AnonymousUser()
diff --git a/src/sentry/api/endpoints/event_details.py b/src/sentry/api/endpoints/event_details.py
index ba14b01113..f1c646075b 100644
--- a/src/sentry/api/endpoints/event_details.py
+++ b/src/sentry/api/endpoints/event_details.py
@@ -26,12 +26,12 @@ class EventDetailsEndpoint(Endpoint):
 
     def get(self, request, event_id):
         """
-        Retrieve an event
-
-        Return details on an individual event.
-
-            {method} {path}
+        Retrieve an Event
+        `````````````````
 
+        This endpoint returns the data for a specific event.  The event ID
+        is the event as it appears in the Sentry database and not the event
+        ID that is reported by the client upon submission.
         """
         event = Event.objects.get(
             id=event_id
diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 6b69a11264..9717c71936 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -94,12 +94,11 @@ class GroupDetailsEndpoint(GroupEndpoint):
 
     def get(self, request, group):
         """
-        Retrieve an aggregate
-
-        Return details on an individual aggregate.
-
-            {method} {path}
+        Retrieve an Aggregate
+        `````````````````````
 
+        Return details on an individual aggregate.  Aggregates are also
+        sometimes referred to as groups.
         """
         # TODO(dcramer): handle unauthenticated/public response
         data = serialize(group, request.user)
@@ -175,21 +174,17 @@ class GroupDetailsEndpoint(GroupEndpoint):
     def put(self, request, group):
         """
         Update an aggregate
+        ```````````````````
 
-        Updates an individual aggregate's attributes.
-
-            {method} {path}
-            {{
-              "status": "resolved"
-            }}
+        Updates an individual aggregate's attributes.  Only the attributes
+        submitted are modified.
 
         Attributes:
 
-        - status: resolved, unresolved, muted
-        - hasSeen: true, false
-        - isBookmarked: true, false
-        - assignedTo: user
-
+        - ``status``: ``"resolved"``, ``"unresolved"``, ``"muted"``
+        - ``hasSeen``: `true`, false`
+        - ``isBookmarked``: `true`, false`
+        - ``assignedTo``: user id
         """
         serializer = GroupSerializer(data=request.DATA, partial=True)
         if not serializer.is_valid():
@@ -313,11 +308,10 @@ class GroupDetailsEndpoint(GroupEndpoint):
 
     def delete(self, request, group):
         """
-        Delete an aggregate
+        Delete an Aggregate
+        ```````````````````
 
         Deletes an individual aggregate.
-
-            {method} {path}
         """
         from sentry.tasks.deletion import delete_group
 
diff --git a/src/sentry/api/endpoints/group_events.py b/src/sentry/api/endpoints/group_events.py
index fe5319463d..e2df136625 100644
--- a/src/sentry/api/endpoints/group_events.py
+++ b/src/sentry/api/endpoints/group_events.py
@@ -12,12 +12,10 @@ class GroupEventsEndpoint(GroupEndpoint):
 
     def get(self, request, group):
         """
-        List an aggregate's available samples
-
-        Return a list of sampled events bound to an aggregate.
-
-            {method} {path}
+        List Available Samples
+        ``````````````````````
 
+        This endpoint lists an aggregate's available samples.
         """
 
         events = Event.objects.filter(
diff --git a/src/sentry/api/endpoints/group_events_latest.py b/src/sentry/api/endpoints/group_events_latest.py
index 28fac69f7e..1b263ba72a 100644
--- a/src/sentry/api/endpoints/group_events_latest.py
+++ b/src/sentry/api/endpoints/group_events_latest.py
@@ -12,12 +12,10 @@ class GroupEventsLatestEndpoint(GroupEndpoint):
 
     def get(self, request, group):
         """
-        Retrieve the latest sample for an aggregate
-
-        Return details on the latest sample for this aggregate.
-
-            {method} {path}
+        Latest Sample
+        `````````````
 
+        Retrieves the details of the latest sample for an aggregate.
         """
         event = group.get_latest_event()
         if not event:
diff --git a/src/sentry/api/endpoints/group_tagkey_details.py b/src/sentry/api/endpoints/group_tagkey_details.py
index 828ea613f1..6b96a3fccc 100644
--- a/src/sentry/api/endpoints/group_tagkey_details.py
+++ b/src/sentry/api/endpoints/group_tagkey_details.py
@@ -14,12 +14,10 @@ class GroupTagKeyDetailsEndpoint(GroupEndpoint):
 
     def get(self, request, group, key):
         """
-        List a tag's details
-
-        Returns details about the given tag key.
-
-            {method} {path}
+        List Tag Details
+        ````````````````
 
+        Returns a list of details about the given tag key.
         """
         # XXX(dcramer): kill sentry prefix for internal reserved tags
         if key in ('release', 'user', 'filename', 'function'):
diff --git a/src/sentry/api/endpoints/group_tagkey_values.py b/src/sentry/api/endpoints/group_tagkey_values.py
index 90cdded025..82f9964075 100644
--- a/src/sentry/api/endpoints/group_tagkey_values.py
+++ b/src/sentry/api/endpoints/group_tagkey_values.py
@@ -12,12 +12,10 @@ class GroupTagKeyValuesEndpoint(GroupEndpoint):
 
     def get(self, request, group, key):
         """
-        List a tag's values
+        List a Tag's Values
+        ```````````````````
 
         Return a list of values associated with this key.
-
-            {method} {path}
-
         """
         # XXX(dcramer): kill sentry prefix for internal reserved tags
         if key in ('release', 'user', 'filename', 'function'):
diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index a0c110080e..4f181d7f83 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -37,13 +37,11 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
 
     def get(self, request, organization):
         """
-        Retrieve an organization
+        Retrieve an Organization
+        ````````````````````````
 
         Return details on an individual organization including various details
         such as membership access, features, and teams.
-
-            {method} {path}
-
         """
         context = serialize(
             organization,
@@ -55,16 +53,11 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
     @sudo_required
     def put(self, request, organization):
         """
-        Update an organization
+        Update an Organization
+        ``````````````````````
 
         Update various attributes and configurable settings for the given
         organization.
-
-            {method} {path}
-            {{
-              "name": "My Organization Name"
-            }}
-
         """
         serializer = OrganizationSerializer(organization, data=request.DATA,
                                             partial=True)
@@ -86,15 +79,14 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
     @sudo_required
     def delete(self, request, organization):
         """
-        Delete an organization
+        Delete an Organization
+        ``````````````````````
 
         Schedules an organization for deletion.
 
-            {method} {path}
-
-        **Note:** Deletion happens asynchronously and therefor is not immediate.
-        However once deletion has begun the state of a project changes and will
-        be hidden from most public views.
+        **Note:** Deletion happens asynchronously and therefor is not
+        immediate.  However once deletion has begun the state of a project
+        changes and will be hidden from most public views.
         """
         if organization.is_default:
             return Response({'detail': ERR_DEFAULT_ORG}, status=400)
diff --git a/src/sentry/api/endpoints/organization_index.py b/src/sentry/api/endpoints/organization_index.py
index 67a733a16e..22a487ce54 100644
--- a/src/sentry/api/endpoints/organization_index.py
+++ b/src/sentry/api/endpoints/organization_index.py
@@ -20,12 +20,10 @@ class OrganizationIndexEndpoint(Endpoint):
 
     def get(self, request):
         """
-        List your organizations
+        List your Organizations
+        ```````````````````````
 
         Return a list of organizations available to the authenticated session.
-
-            {method} {path}
-
         """
         if request.auth:
             if hasattr(request.auth, 'project'):
@@ -40,15 +38,10 @@ class OrganizationIndexEndpoint(Endpoint):
 
     def post(self, request):
         """
-        Create a new organization
+        Create a New Organization
+        `````````````````````````
 
         Create a new organization.
-
-            {method} {path}
-            {{
-                "name": "My organization"
-            }}
-
         """
         serializer = OrganizationSerializer(data=request.DATA)
 
diff --git a/src/sentry/api/endpoints/organization_projects.py b/src/sentry/api/endpoints/organization_projects.py
index 80be489823..fdec0e499e 100644
--- a/src/sentry/api/endpoints/organization_projects.py
+++ b/src/sentry/api/endpoints/organization_projects.py
@@ -13,12 +13,10 @@ class OrganizationProjectsEndpoint(OrganizationEndpoint):
 
     def get(self, request, organization):
         """
-        List an organization's projects
+        List an Organization's Projects
+        ```````````````````````````````
 
         Return a list of projects bound to a organization.
-
-            {method} {path}
-
         """
         if request.auth and hasattr(request.auth, 'project'):
             team_list = [request.auth.project.team]
diff --git a/src/sentry/api/endpoints/organization_stats.py b/src/sentry/api/endpoints/organization_stats.py
index 39d7ca75ab..160347cd64 100644
--- a/src/sentry/api/endpoints/organization_stats.py
+++ b/src/sentry/api/endpoints/organization_stats.py
@@ -13,26 +13,26 @@ class OrganizationStatsEndpoint(OrganizationEndpoint, StatsMixin):
 
     def get(self, request, organization):
         """
-        Retrieve event counts for an organization
+        Retrieve Event Counts for an Organization
+        `````````````````````````````````````````
 
         **Draft:** This endpoint may change in the future without notice.
 
         Return a set of points representing a normalized timestamp and the
         number of events seen in the period.
 
-            {method} {path}?since=1421092384.822244&until=1434052399.443363
-
-        Query ranges are limited to Sentry's configured time-series resolutions.
+        Query ranges are limited to Sentry's configured time-series
+        resolutions.
 
         Parameters:
 
-        - since: a timestamp to set the start of the query
-        - until: a timestamp to set the end of the query
-        - resolution: an explicit resolution to search for (i.e. 10s)
-        - stat: the name of the stat to query (received, rejected)
+        - ``since``: a timestamp to set the start of the query
+        - ``until``: a timestamp to set the end of the query
+        - ``resolution``: an explicit resolution to search for (i.e. 10s)
+        - ``stat``: the name of the stat to query (received, rejected)
 
-        **Note:** resolution should not be used unless you're familiar with Sentry
-        internals as it's restricted to pre-defined values.
+        **Note:** resolution should not be used unless you're familiar
+        with Sentry internals as it's restricted to pre-defined values.
         """
         group = request.GET.get('group')
         if not group:
diff --git a/src/sentry/api/endpoints/organization_teams.py b/src/sentry/api/endpoints/organization_teams.py
index 63353364e5..6f59fe85b6 100644
--- a/src/sentry/api/endpoints/organization_teams.py
+++ b/src/sentry/api/endpoints/organization_teams.py
@@ -20,12 +20,10 @@ class OrganizationTeamsEndpoint(OrganizationEndpoint):
 
     def get(self, request, organization):
         """
-        List an organization's teams
+        List an Organization's Teams
+        ````````````````````````````
 
         Return a list of teams bound to a organization.
-
-            {method} {path}
-
         """
         # TODO(dcramer): this should be system-wide default for organization
         # based endpoints
@@ -42,15 +40,10 @@ class OrganizationTeamsEndpoint(OrganizationEndpoint):
 
     def post(self, request, organization):
         """
-        Create a new team
+        Create a new Team
+        ``````````````````
 
         Create a new team bound to an organization.
-
-            {method} {path}
-            {{
-                "name": "My team"
-            }}
-
         """
         serializer = TeamSerializer(data=request.DATA)
 
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index bc4ff0ec25..53a8d9ef90 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -31,12 +31,10 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
 
     def get(self, request, project):
         """
-        Retrieve a project
+        Retrieve a Project
+        ``````````````````
 
         Return details on an individual project.
-
-            {method} {path}
-
         """
         data = serialize(project, request.user)
         data['options'] = {
@@ -53,18 +51,11 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
     @sudo_required
     def put(self, request, project):
         """
-        Update a project
-
-        Update various attributes and configurable settings for the given project.
-
-            {method} {path}
-            {{
-              "name": "My Project Name",
-              "options": {{
-                "sentry:origins": "*"
-              }}
-            }}
+        Update a Project
+        ````````````````
 
+        Update various attributes and configurable settings for the given
+        project.
         """
         serializer = ProjectSerializer(project, data=request.DATA, partial=True)
 
@@ -107,15 +98,14 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
     @sudo_required
     def delete(self, request, project):
         """
-        Delete a project
+        Delete a Project
+        ````````````````
 
         Schedules a project for deletion.
 
-            {method} {path}
-
-        **Note:** Deletion happens asynchronously and therefor is not immediate.
-        However once deletion has begun the state of a project changes and will
-        be hidden from most public views.
+        **Note:** Deletion happens asynchronously and therefor is not
+        immediate.  However once deletion has begun the state of a project
+        changes and will be hidden from most public views.
         """
         if project.is_internal_project():
             return Response('{"error": "Cannot remove projects internally used by Sentry."}',
diff --git a/src/sentry/api/endpoints/project_events.py b/src/sentry/api/endpoints/project_events.py
index f1f002afbd..2ae2ef3d99 100644
--- a/src/sentry/api/endpoints/project_events.py
+++ b/src/sentry/api/endpoints/project_events.py
@@ -12,12 +12,10 @@ class ProjectEventsEndpoint(ProjectEndpoint):
 
     def get(self, request, project):
         """
-        List a project's available samples
+        List a Project's Available Samples
+        ``````````````````````````````````
 
         Return a list of sampled events bound to a project.
-
-            {method} {path}
-
         """
 
         events = Event.objects.filter(
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 2bcb697fa9..3ef6ec55b3 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -57,20 +57,21 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
     # statsPeriod=24h
     def get(self, request, project):
         """
-        List a project's aggregates
+        List a Project's Aggregates
+        ```````````````````````````
 
         Return a list of aggregates bound to a project.
 
-            {method} {path}
-
-        A default query of 'is:resolved' is applied. To return results with
-        other statuses send an new query value (i.e. ?query= for all results).
+        A default query of 'is:resolved' is applied. To return results
+        with other statuses send an new query value (i.e. ?query= for all
+        results).
 
         Any standard Sentry structured search query can be passed via the
         ``query`` parameter.
 
-        The ``statsPeriod`` parameter can be used to select the timeline stats
-        which should be present. Possible values are: '' (disable), '24h', '14d'
+        The ``statsPeriod`` parameter can be used to select the timeline
+        stats which should be present. Possible values are: '' (disable),
+        '24h', '14d'
         """
         query_kwargs = {
             'project': project,
@@ -184,39 +185,27 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
 
     def put(self, request, project):
         """
-        Bulk mutate a list of aggregates
+        Bulk Mutate a List of Aggregates
+        ````````````````````````````````
 
         Bulk mutate various attributes on aggregates.
 
-            {method} {path}?id=1&id=2&id=3
-            {{
-              "status": "resolved",
-              "isBookmarked": true
-            }}
-
         - For non-status updates, the 'id' parameter is required.
         - For status updates, the 'id' parameter may be omitted for a batch
           "update all" query.
         - An optional 'status' parameter may be used to restrict mutations to
           only events with the given status.
 
-        For example, to resolve all aggregates (project-wide):
-
-            {method} {path}
-            {{
-                "status": "resolved"
-            }}
-
         Attributes:
 
-        - status: resolved, unresolved, muted
-        - hasSeen: true, false
-        - isBookmarked: true, false
-        - isPublic: true, false
-        - merge: true, false
+        - ``status``: resolved, unresolved, muted
+        - ``hasSeen``: true, false
+        - ``isBookmarked``: true, false
+        - ``isPublic``: true, false
+        - ``merge``: true, false
 
-        If any ids are out of scope this operation will succeed without any data
-        mutation.
+        If any ids are out of scope this operation will succeed without
+        any data mutation.
         """
         group_ids = request.GET.getlist('id')
         if group_ids:
@@ -379,16 +368,15 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
 
     def delete(self, request, project):
         """
-        Bulk remove a list of aggregates
+        Bulk Remove a List of Aggregates
+        ````````````````````````````````
 
         Permanently remove the given aggregates.
 
         Only queries by 'id' are accepted.
 
-            {method} {path}?id=1&id=2&id=3
-
-        If any ids are out of scope this operation will succeed without any data
-        mutation
+        If any ids are out of scope this operation will succeed without
+        any data mutation.
         """
         group_ids = request.GET.getlist('id')
         if group_ids:
diff --git a/src/sentry/api/endpoints/project_key_details.py b/src/sentry/api/endpoints/project_key_details.py
index 8c3157b66d..4863b07467 100644
--- a/src/sentry/api/endpoints/project_key_details.py
+++ b/src/sentry/api/endpoints/project_key_details.py
@@ -19,15 +19,10 @@ class ProjectKeyDetailsEndpoint(ProjectEndpoint):
 
     def put(self, request, project, key_id):
         """
-        Update a client key
+        Update a Client Key
+        ```````````````````
 
         Update a client key.
-
-            {method} {path}
-            {{
-                "name": "My key label"
-            }}
-
         """
         try:
             key = ProjectKey.objects.get(
@@ -62,12 +57,10 @@ class ProjectKeyDetailsEndpoint(ProjectEndpoint):
 
     def delete(self, request, project, key_id):
         """
-        Delete a client key
+        Delete a Client Key
+        ```````````````````
 
         Delete a client key.
-
-            {method} {path}
-
         """
         try:
             key = ProjectKey.objects.get(
diff --git a/src/sentry/api/endpoints/project_keys.py b/src/sentry/api/endpoints/project_keys.py
index ddf8163d13..e832cc83a7 100644
--- a/src/sentry/api/endpoints/project_keys.py
+++ b/src/sentry/api/endpoints/project_keys.py
@@ -18,12 +18,10 @@ class ProjectKeysEndpoint(ProjectEndpoint):
 
     def get(self, request, project):
         """
-        List a project's client keys
+        List a Project's Client Keys
+        ````````````````````````````
 
         Return a list of client keys bound to a project.
-
-            {method} {path}
-
         """
         keys = list(ProjectKey.objects.filter(
             project=project,
@@ -34,15 +32,10 @@ class ProjectKeysEndpoint(ProjectEndpoint):
 
     def post(self, request, project):
         """
-        Create a new client key
+        Create a new Client Key
+        ```````````````````````
 
         Create a new client key bound to a project.
-
-            {method} {path}
-            {{
-                "name": "My key label"
-            }}
-
         """
         serializer = KeySerializer(data=request.DATA)
 
diff --git a/src/sentry/api/endpoints/project_releases.py b/src/sentry/api/endpoints/project_releases.py
index cc9e27a7ab..e690d7fa21 100644
--- a/src/sentry/api/endpoints/project_releases.py
+++ b/src/sentry/api/endpoints/project_releases.py
@@ -24,15 +24,13 @@ class ProjectReleasesEndpoint(ProjectEndpoint):
 
     def get(self, request, project):
         """
-        List a project's releases
+        List a Project's Releases
+        `````````````````````````
 
         Retrieve a list of releases for a given project.
 
-            {method} {path}
-
         To find releases for a given version the 'query' parameter may be to
         create a "version STARTS WITH" filter.
-
         """
         query = request.GET.get('query')
 
@@ -54,16 +52,10 @@ class ProjectReleasesEndpoint(ProjectEndpoint):
 
     def post(self, request, project):
         """
-        Create a new release
+        Create a New Release
+        ````````````````````
 
         Create a new release for the given project.
-
-            {method} {path}
-            {{
-                "version": "abcdef",
-                "dateReleased": "2015-05-11T02:23:10Z"
-            }}
-
         """
         serializer = ReleaseSerializer(data=request.DATA)
 
diff --git a/src/sentry/api/endpoints/project_stats.py b/src/sentry/api/endpoints/project_stats.py
index a6ab27c6ec..7f56a3d9a2 100644
--- a/src/sentry/api/endpoints/project_stats.py
+++ b/src/sentry/api/endpoints/project_stats.py
@@ -12,16 +12,16 @@ class ProjectStatsEndpoint(ProjectEndpoint, StatsMixin):
 
     def get(self, request, project):
         """
-        Retrieve event counts for a project
+        Retrieve Event Counts for a Project
+        ```````````````````````````````````
 
         **Draft:** This endpoint may change in the future without notice.
 
         Return a set of points representing a normalized timestamp and the
         number of events seen in the period.
 
-            {method} {path}?since=1421092384.822244&until=1434052399.443363
-
-        Query ranges are limited to Sentry's configured time-series resolutions.
+        Query ranges are limited to Sentry's configured time-series
+        resolutions.
 
         Parameters:
 
@@ -29,8 +29,8 @@ class ProjectStatsEndpoint(ProjectEndpoint, StatsMixin):
         - until: a timestamp to set the end of the query
         - resolution: an explicit resolution to search for (i.e. 10s)
 
-        **Note:** resolution should not be used unless you're familiar with Sentry
-        internals as it's restricted to pre-defined values.
+        **Note:** resolution should not be used unless you're familiar
+        with Sentry internals as it's restricted to pre-defined values.
         """
         data = tsdb.get_range(
             model=tsdb.models.project,
diff --git a/src/sentry/api/endpoints/project_tagkey_values.py b/src/sentry/api/endpoints/project_tagkey_values.py
index 3e6b68c427..71a5acf428 100644
--- a/src/sentry/api/endpoints/project_tagkey_values.py
+++ b/src/sentry/api/endpoints/project_tagkey_values.py
@@ -12,14 +12,13 @@ class ProjectTagKeyValuesEndpoint(ProjectEndpoint):
 
     def get(self, request, project, key):
         """
-        List a tag's values
+        List a Tag's Values
+        ```````````````````
 
         Return a list of values associated with this key.
 
-            {method} {path}
-
-        The ``query`` parameter can be used to to perform a "starts with" match
-        on values.
+        The ``query`` parameter can be used to to perform a "starts with"
+        match on values.
         """
         if key in ('release', 'user', 'filename', 'function'):
             lookup_key = 'sentry:{0}'.format(key)
diff --git a/src/sentry/api/endpoints/release_details.py b/src/sentry/api/endpoints/release_details.py
index f5433af038..af08611f2d 100644
--- a/src/sentry/api/endpoints/release_details.py
+++ b/src/sentry/api/endpoints/release_details.py
@@ -22,12 +22,10 @@ class ReleaseDetailsEndpoint(ProjectEndpoint):
 
     def get(self, request, project, version):
         """
-        Retrieve a release
+        Retrieve a Release
+        ``````````````````
 
         Return details on an individual release.
-
-            {method} {path}
-
         """
         try:
             release = Release.objects.get(
@@ -41,16 +39,10 @@ class ReleaseDetailsEndpoint(ProjectEndpoint):
 
     def put(self, request, project, version):
         """
-        Update a release
+        Update a Release
+        ````````````````
 
         Update a release.
-
-            {method} {path}
-            {{
-                "version": "abcdef",
-                "dateReleased": "2015-05-11T02:23:10Z"
-            }}
-
         """
         # TODO(dcramer): handle Activity creation
         try:
@@ -85,12 +77,10 @@ class ReleaseDetailsEndpoint(ProjectEndpoint):
 
     def delete(self, request, project, version):
         """
-        Delete a release
+        Delete a Release
+        ````````````````
 
         Permanently remove a release and all of its files.
-
-            {method} {path}
-
         """
         try:
             release = Release.objects.get(
diff --git a/src/sentry/api/endpoints/release_file_details.py b/src/sentry/api/endpoints/release_file_details.py
index adcdf095ed..9459787118 100644
--- a/src/sentry/api/endpoints/release_file_details.py
+++ b/src/sentry/api/endpoints/release_file_details.py
@@ -18,12 +18,10 @@ class ReleaseFileDetailsEndpoint(ProjectEndpoint):
 
     def get(self, request, project, version, file_id):
         """
-        Retrieve a file
+        Retrieve a File
+        ```````````````
 
         Return details on an individual file within a release.
-
-            {method} {path}
-
         """
         release = Release.objects.get(
             project=project,
@@ -38,15 +36,10 @@ class ReleaseFileDetailsEndpoint(ProjectEndpoint):
 
     def put(self, request, project, version, file_id):
         """
-        Update a file
+        Update a File
+        `````````````
 
         Update metadata about an existing file.
-
-            {method} {path}
-            {{
-                "name": "http://example.com/application.js"
-            }}
-
         """
         release = Release.objects.get(
             project=project,
@@ -71,12 +64,11 @@ class ReleaseFileDetailsEndpoint(ProjectEndpoint):
 
     def delete(self, request, project, version, file_id):
         """
-        Delete a file
+        Delete a File
+        `````````````
 
         Permanently remove a file from a release.
 
-            {method} {path}
-
         This will also remove the physical file from storage.
         """
         release = Release.objects.get(
diff --git a/src/sentry/api/endpoints/release_files.py b/src/sentry/api/endpoints/release_files.py
index ade0d0e080..4c2bf2698e 100644
--- a/src/sentry/api/endpoints/release_files.py
+++ b/src/sentry/api/endpoints/release_files.py
@@ -32,12 +32,10 @@ class ReleaseFilesEndpoint(ProjectEndpoint):
 
     def get(self, request, project, version):
         """
-        List a release's files
+        List a Release's Files
+        ``````````````````````
 
         Retrieve a list of files for a given release.
-
-            {method} {path}
-
         """
         try:
             release = Release.objects.get(
@@ -55,22 +53,17 @@ class ReleaseFilesEndpoint(ProjectEndpoint):
 
     def post(self, request, project, version):
         """
-        Upload a new file
+        Upload a New File
+        `````````````````
 
         Upload a new file for the given release.
 
-            {method} {path}
-            name=http%3A%2F%2Fexample.com%2Fapplication.js
-            &header=X-SourceMap%3A%20http%3A%2F%2Fexample.com%2Fapplication.js.map
-
-            # ...
-
-        Unlike other API requests, files must be uploaded using the traditional
-        multipart/form-data content-type.
+        Unlike other API requests, files must be uploaded using the
+        traditional multipart/form-data content-type.
 
-        The optional 'name' attribute should reflect the absolute path that this
-        file will be referenced as. For example, in the case of JavaScript you
-        might specify the full web URI.
+        The optional 'name' attribute should reflect the absolute path
+        that this file will be referenced as. For example, in the case of
+        JavaScript you might specify the full web URI.
         """
         try:
             release = Release.objects.get(
diff --git a/src/sentry/api/endpoints/team_details.py b/src/sentry/api/endpoints/team_details.py
index b27ad7d82d..3995800095 100644
--- a/src/sentry/api/endpoints/team_details.py
+++ b/src/sentry/api/endpoints/team_details.py
@@ -28,7 +28,8 @@ class TeamDetailsEndpoint(TeamEndpoint):
 
     def get(self, request, team):
         """
-        Retrieve a team
+        Retrieve a Team
+        ```````````````
 
         Return details on an individual team.
 
@@ -43,15 +44,11 @@ class TeamDetailsEndpoint(TeamEndpoint):
     @sudo_required
     def put(self, request, team):
         """
-        Update a team
-
-        Update various attributes and configurable settings for the given team.
-
-            {method} {path}
-            {{
-              "name": "My Team Name"
-            }}
+        Update a Team
+        `````````````
 
+        Update various attributes and configurable settings for the given
+        team.
         """
         serializer = TeamSerializer(team, data=request.DATA, partial=True)
         if serializer.is_valid():
@@ -72,15 +69,14 @@ class TeamDetailsEndpoint(TeamEndpoint):
     @sudo_required
     def delete(self, request, team):
         """
-        Delete a team
+        Delete a Team
+        `````````````
 
         Schedules a team for deletion.
 
-            {method} {path}
-
-        **Note:** Deletion happens asynchronously and therefor is not immediate.
-        However once deletion has begun the state of a project changes and will
-        be hidden from most public views.
+        **Note:** Deletion happens asynchronously and therefor is not
+        immediate.  However once deletion has begun the state of a project
+        changes and will be hidden from most public views.
         """
         updated = Team.objects.filter(
             id=team.id,
diff --git a/src/sentry/api/endpoints/team_project_index.py b/src/sentry/api/endpoints/team_project_index.py
index 791f82b39e..0f11cbcf96 100644
--- a/src/sentry/api/endpoints/team_project_index.py
+++ b/src/sentry/api/endpoints/team_project_index.py
@@ -20,7 +20,8 @@ class TeamProjectIndexEndpoint(TeamEndpoint):
 
     def get(self, request, team):
         """
-        List a team's projects
+        List a Team's Projects
+        ``````````````````````
 
         Return a list of projects bound to a team.
 
@@ -33,15 +34,10 @@ class TeamProjectIndexEndpoint(TeamEndpoint):
 
     def post(self, request, team):
         """
-        Create a new project
+        Create a New Project
+        ````````````````````
 
         Create a new project bound to a team.
-
-            {method} {path}
-            {{
-                "name": "My project"
-            }}
-
         """
         serializer = ProjectSerializer(data=request.DATA)
 
diff --git a/src/sentry/api/endpoints/team_stats.py b/src/sentry/api/endpoints/team_stats.py
index bdc137c177..ab11428cff 100644
--- a/src/sentry/api/endpoints/team_stats.py
+++ b/src/sentry/api/endpoints/team_stats.py
@@ -14,25 +14,25 @@ class TeamStatsEndpoint(TeamEndpoint, StatsMixin):
 
     def get(self, request, team):
         """
-        Retrieve event counts for a team
+        Retrieve Event Counts for a Team
+        ````````````````````````````````
 
         **Draft:** This endpoint may change in the future without notice.
 
         Return a set of points representing a normalized timestamp and the
         number of events seen in the period.
 
-            {method} {path}?since=1421092384.822244&until=1434052399.443363
-
-        Query ranges are limited to Sentry's configured time-series resolutions.
+        Query ranges are limited to Sentry's configured time-series
+        resolutions.
 
         Parameters:
 
-        - since: a timestamp to set the start of the query
-        - until: a timestamp to set the end of the query
-        - resolution: an explicit resolution to search for (i.e. 10s)
+        - ``since``: a timestamp to set the start of the query
+        - ``until``: a timestamp to set the end of the query
+        - ``resolution``: an explicit resolution to search for (i.e. 10s)
 
-        **Note:** resolution should not be used unless you're familiar with Sentry
-        internals as it's restricted to pre-defined values.
+        **Note:** resolution should not be used unless you're familiar
+        with Sentry internals as it's restricted to pre-defined values.
         """
         projects = Project.objects.get_for_user(
             team=team,
