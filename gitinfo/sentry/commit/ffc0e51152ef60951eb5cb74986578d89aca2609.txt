commit ffc0e51152ef60951eb5cb74986578d89aca2609
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu May 24 10:35:59 2018 -0700

    feat(integrations): Bitbucket client (#8493)
    
    * Added client and test declarations.
    
    * working on tests.
    
    * Finally got things workign for a few of the client methods.
    
    * revising more methods
    
    * cleaned up test
    
    * removed dead code.
    
    * Removed compare_commit tests. Requires the repo provider.
    
    * Added unidiff to requirements
    
    * Fixed tests so that they match the implementation.
    
    * removed param stuff
    
    * removed verify_ssl
    
    * removed comment
    
    * added the repo_name concept username/repo_slug
    
    * added the repo_name to repo
    
    * Edited the docstring to be clearer

diff --git a/requirements-base.txt b/requirements-base.txt
index d222b95e7b..a7660ade24 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -65,3 +65,5 @@ qrcode>=5.2.2,<6.0.0
 python-u2flib-server>=4.0.1,<4.1.0
 redis-py-cluster>=1.3.4,<1.4.0
 jsonschema==2.6.0
+# for bitbucket client
+unidiff>=0.5.4
diff --git a/src/sentry/integrations/bitbucket/client.py b/src/sentry/integrations/bitbucket/client.py
new file mode 100644
index 0000000000..ef6d02a617
--- /dev/null
+++ b/src/sentry/integrations/bitbucket/client.py
@@ -0,0 +1,198 @@
+from __future__ import absolute_import
+
+import datetime
+import jwt
+
+from unidiff import PatchSet
+
+from six.moves.urllib.parse import urlparse
+
+from sentry.utils.http import absolute_uri
+from sentry.integrations.atlassian_connect import get_query_hash
+from sentry.integrations.client import ApiClient
+
+BITBUCKET_KEY = '%s.bitbucket' % urlparse(absolute_uri()).hostname
+
+
+class BitbucketAPIPath(object):
+    """
+    All UUID's must be surrounded by culybraces.
+
+    repo is the fully qualified slug containing 'username/repo_slug'
+
+    repo_slug - repository slug or UUID
+    username - username or UUID
+    """
+
+    issue = u'/2.0/repositories/{repo}/issues/{issue_id}'
+    issues = u'/2.0/repositories/{repo}/issues'
+    issue_comments = u'/2.0/repositories/{repo}/issues/{issue_id}/comments'
+
+    repository = u'/2.0/repositories/{repo}'
+    repository_commits = u'/2.0/repositories/{repo}/commits/{revision}'
+    repository_diff = u'/2.0/repositories/{repo}/diff/{spec}'
+    repository_hook = u'/2.0/repositories/{repo}/hooks/{uid}'
+    repository_hooks = u'/2.0/repositories/{repo}/hooks'
+
+
+class BitbucketAPI(ApiClient):
+    """
+    The API Client for the Bitbucket Integraiton
+
+    NOTE: repo is the fully qualified slug containing 'username/repo_slug'
+    """
+
+    def __init__(self, base_url, shared_secret, subject):
+        # subject is probably the clientKey
+        super(BitbucketAPI, self).__init__()
+        self.base_url = base_url
+        self.shared_secret = shared_secret
+        self.subject = subject
+
+    def request(self, method, path, data=None, params=None, **kwargs):
+        jwt_payload = {
+            'iss': BITBUCKET_KEY,
+            'iat': datetime.datetime.utcnow(),
+            'exp': datetime.datetime.utcnow() + datetime.timedelta(seconds=5 * 60),
+            'qsh': get_query_hash(path, method.upper(), params),
+            'sub': self.subject,
+        }
+        encoded_jwt = jwt.encode(jwt_payload, self.shared_secret)
+        headers = {
+            'Authorization': 'JWT %s' % encoded_jwt
+        }
+        return self._request(method, path, data=data, params=params, headers=headers, **kwargs)
+
+    def get_issue(self, repo, issue_id):
+        return self.get(BitbucketAPIPath.issue.format(
+            repo=repo,
+            issue_id=issue_id,
+        ))
+
+    def create_issue(self, repo, data):
+        return self.post(
+            path=BitbucketAPIPath.issues.format(
+                repo=repo,
+            ),
+            data=data,
+        )
+
+    def search_issues(self, repo, query):
+        # Query filters can be found here:
+        # https://developer.atlassian.com/bitbucket/api/2/reference/meta/filtering#supp-endpoints
+        return self.get(
+            path=BitbucketAPIPath.issues.format(
+                repo=repo,
+            ),
+            params={'q': query},
+        )
+
+    def create_comment(self, repo, issue_id, data):
+        # Call the method as below:
+        # client.create_comment('repo', '1', {"content": {"raw": "Whatever you're commenting."}})
+        # https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments#post
+        return self.post(
+            path=BitbucketAPIPath.issue_comments.format(
+                repo=repo,
+                issue_id=issue_id,
+            ),
+            data=data,
+        )
+
+    def get_repo(self, repo):
+        return self.get(BitbucketAPIPath.repository.format(
+            repo=repo,
+        ))
+
+    def create_hook(self, repo, data):
+        return self.post(
+            path=BitbucketAPIPath.repository_hooks.format(
+                repo=repo,
+            ),
+            data=data
+        )
+
+    def delete_hook(self, repo, hook_id):
+        return self.delete(path=BitbucketAPIPath.repository_hook.format(
+            repo=repo,
+            uid=hook_id,
+        ))
+
+    def transform_patchset(self, patch_set):
+        file_changes = []
+        for patched_file in patch_set.added_files:
+            file_changes.append({
+                'path': patched_file.path,
+                'type': 'A',
+            })
+
+        for patched_file in patch_set.removed_files:
+            file_changes.append({
+                'path': patched_file.path,
+                'type': 'D',
+            })
+
+        for patched_file in patch_set.modified_files:
+            file_changes.append({
+                'path': patched_file.path,
+                'type': 'M',
+            })
+
+        return file_changes
+
+    def get_commit_filechanges(self, repo, sha):
+        resp = self.get(
+            BitbucketAPIPath.repository_diff.format(
+                repo=repo,
+                spec=sha,
+            ),
+            allow_text=True,
+        )
+        diff_file = resp.text
+        ps = PatchSet.from_string(diff_file)
+        return self.transform_patchset(ps)
+
+    def zip_commit_data(self, repo, commit_list):
+        for commit in commit_list:
+            commit.update(
+                {'patch_set': self.get_commit_filechanges(repo, commit['hash'])})
+        return commit_list
+
+    def get_last_commits(self, repo, end_sha):
+        # return api request that fetches last ~30 commits
+        # see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commits/%7Brevision%7D
+        # using end_sha as parameter
+        data = self.get(BitbucketAPIPath.repository_commits.format(
+            repo=repo,
+            revision=end_sha,
+        ))
+        return self.zip_commit_data(repo, data['values'])
+
+    def compare_commits(self, repo, start_sha, end_sha):
+        # where start_sha is oldest and end_sha is most recent
+        # see
+        # https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commits/%7Brevision%7D
+        commits = []
+        done = False
+
+        url = BitbucketAPIPath.repository_commits.format(
+            repo=repo,
+            revision=end_sha,
+        )
+
+        while not done and len(commits) < 90:
+            data = self.get(url)
+
+            for commit in data['values']:
+                if commit['hash'] == start_sha:
+                    done = True
+                    break
+                commits.append(commit)
+
+            # move page forward
+            try:
+                url = data['next']
+            except KeyError:
+                break
+
+        return self.zip_commit_data(repo, commits)
diff --git a/src/sentry/integrations/bitbucket/descriptor.py b/src/sentry/integrations/bitbucket/descriptor.py
index 3f02449b99..eac1ef94f1 100644
--- a/src/sentry/integrations/bitbucket/descriptor.py
+++ b/src/sentry/integrations/bitbucket/descriptor.py
@@ -3,6 +3,9 @@ from __future__ import absolute_import
 from sentry.api.base import Endpoint
 from sentry.utils.http import absolute_uri
 
+from .client import BITBUCKET_KEY
+from sentry.integrations.bitbucket.integration import scopes
+
 
 class BitbucketDescriptorEndpoint(Endpoint):
     authentication_classes = ()
@@ -11,7 +14,7 @@ class BitbucketDescriptorEndpoint(Endpoint):
     def get(self, request):
         return self.respond(
             {
-                'key': 'sentry-bitbucket',
+                'key': BITBUCKET_KEY,
                 'name': 'Sentry for Bitbucket',
                 'description': 'A Sentry integration',
                 'vendor': {
@@ -20,13 +23,13 @@ class BitbucketDescriptorEndpoint(Endpoint):
                 },
                 'baseUrl': absolute_uri(),
                 'authentication': {
-                    'type': 'jwt'
+                    'type': 'JWT',
                 },
                 'lifecycle': {
                     'installed': '/extensions/bitbucket/installed/',
                     'uninstalled': '/extensions/bitbucket/uninstalled/'
                 },
-                'scopes': ['account', 'repository'],
+                'scopes': scopes,
                 'contexts': ['account']
             }
         )
diff --git a/src/sentry/integrations/bitbucket/integration.py b/src/sentry/integrations/bitbucket/integration.py
index 6a259acf54..a00e6393e7 100644
--- a/src/sentry/integrations/bitbucket/integration.py
+++ b/src/sentry/integrations/bitbucket/integration.py
@@ -17,12 +17,20 @@ metadata = IntegrationMetadata(
     source_url='https://github.com/getsentry/sentry/tree/master/src/sentry/integrations/bitbucket',
     aspects={},
 )
+scopes = (
+    'account',
+    'issue:write',
+    'repository',
+    'team',
+    'webhook',
+)
 
 
 class BitbucketIntegrationProvider(IntegrationProvider):
     key = 'bitbucket'
     name = 'Bitbucket'
     metadata = metadata
+    scopes = scopes
 
     def get_pipeline_views(self):
         identity_pipeline_config = {
@@ -50,6 +58,9 @@ class BitbucketIntegrationProvider(IntegrationProvider):
                     'base_url': state['baseApiUrl'],
                     'domain_name': principal_data['links']['html']['href'].replace('https://', ''),
                     'icon': principal_data['links']['avatar']['href'],
+                    'scopes': self.scopes,
+                    'uuid': principal_data['uuid'],
+                    'type': principal_data['type'],  # team or user account
                 },
             }
         return {
diff --git a/tests/sentry/integrations/bitbucket/test_descriptor.py b/tests/sentry/integrations/bitbucket/test_descriptor.py
index 0dd2a9e216..7dc4151b96 100644
--- a/tests/sentry/integrations/bitbucket/test_descriptor.py
+++ b/tests/sentry/integrations/bitbucket/test_descriptor.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from sentry.testutils import APITestCase
 from sentry.integrations.bitbucket.descriptor import BitbucketDescriptorEndpoint
+from sentry.integrations.bitbucket.client import BITBUCKET_KEY
 
 
 class BitbucketDescriptorEndpointTest(APITestCase):
@@ -14,6 +15,6 @@ class BitbucketDescriptorEndpointTest(APITestCase):
         response = self.client.get('/extensions/bitbucket/descriptor/')
         assert response.status_code == 200
 
-        assert response.data['key'] == 'sentry-bitbucket'
-        assert response.data['authentication']['type'] == 'jwt'
+        assert response.data['key'] == BITBUCKET_KEY
+        assert response.data['authentication']['type'] == 'JWT'
         assert response.data['baseUrl'] == 'http://testserver'
diff --git a/tests/sentry/integrations/bitbucket/test_installed.py b/tests/sentry/integrations/bitbucket/test_installed.py
index 442f3f33b3..fc36606af5 100644
--- a/tests/sentry/integrations/bitbucket/test_installed.py
+++ b/tests/sentry/integrations/bitbucket/test_installed.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from sentry.testutils import APITestCase
 from sentry.integrations.bitbucket.installed import BitbucketInstalledEndpoint
+from sentry.integrations.bitbucket.integration import scopes
 from sentry.models import Integration
 
 
@@ -19,13 +20,6 @@ class BitbucketInstalledEndpointTest(APITestCase):
         self.display_name = u'Sentry User'
         self.icon = u'https://bitbucket.org/account/sentryuser/avatar/32/'
 
-        self.metadata = {
-            'public_key': self.public_key,
-            'shared_secret': self.shared_secret,
-            'base_url': self.base_url,
-            'domain_name': self.domain_name,
-            'icon': self.icon
-        }
         self.user_data = {
             u'username': self.username,
             u'display_name': self.display_name,
@@ -40,6 +34,17 @@ class BitbucketInstalledEndpointTest(APITestCase):
             u'type': u'user',
             u'uuid': u'{e123-f456-g78910}'
         }
+        self.metadata = {
+            'public_key': self.public_key,
+            'shared_secret': self.shared_secret,
+            'base_url': self.base_url,
+            'domain_name': self.domain_name,
+            'icon': self.icon,
+            'scopes': list(scopes),
+            'type': self.user_data['type'],
+            'uuid': self.user_data['uuid'],
+        }
+
         self.data_from_bitbucket = {
             u'key': u'sentry-bitbucket',
             u'eventType': u'installed',
