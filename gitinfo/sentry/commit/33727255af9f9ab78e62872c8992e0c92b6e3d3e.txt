commit 33727255af9f9ab78e62872c8992e0c92b6e3d3e
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Jan 31 01:09:19 2017 +0100

    Added raw event

diff --git a/src/sentry/models/rawevent.py b/src/sentry/models/rawevent.py
new file mode 100644
index 0000000000..5d46fd397e
--- /dev/null
+++ b/src/sentry/models/rawevent.py
@@ -0,0 +1,38 @@
+"""
+sentry.models.rawevent
+~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+from django.db import models
+from django.utils import timezone
+
+from sentry.db.models import (
+    BaseManager, Model, NodeField, FlexibleForeignKey, sane_repr
+)
+
+
+class RawEvent(Model):
+    __core__ = False
+
+    project = FlexibleForeignKey('sentry.Project')
+    event_id = models.CharField(max_length=32, null=True)
+    datetime = models.DateTimeField(default=timezone.now)
+    data = NodeField(
+        blank=True,
+        null=True,
+        ref_func=lambda x: x.project_id or x.project.id,
+        ref_version=1,
+    )
+
+    objects = BaseManager()
+
+    class Meta:
+        app_label = 'sentry'
+        db_table = 'sentry_rawevent'
+        unique_together = (('project', 'event_id'),)
+
+    __repr__ = sane_repr('project_id')
diff --git a/src/sentry/reprocessing.py b/src/sentry/reprocessing.py
new file mode 100644
index 0000000000..df4a8dda3f
--- /dev/null
+++ b/src/sentry/reprocessing.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.models import EventError
+
+
+def report_processing_issue(event_data, scope, object=None, type=None, data=None):
+    """Reports a processing issue for a given scope and object.  Per
+    scope/object combination only one issue can be recorded where the last
+    one reported wins.
+    """
+    if object is None:
+        object = '*'
+    if type is None:
+        type = EventError.INVALID_DATA
+    uid = '%s:%s' % (scope, object)
+    event_data.setdefault('processing_issues', {})[uid] = {
+        'scope': scope,
+        'object': object,
+        'type': type,
+        'data': data,
+    }
diff --git a/src/sentry/tasks/store.py b/src/sentry/tasks/store.py
index 093e5b2f8e..40409c0907 100644
--- a/src/sentry/tasks/store.py
+++ b/src/sentry/tasks/store.py
@@ -9,9 +9,11 @@ sentry.tasks.store
 from __future__ import absolute_import
 
 import logging
+from datetime import datetime
 
 from raven.contrib.django.models import client as Raven
 from time import time
+from django.utils import timezone
 
 from sentry.cache import default_cache
 from sentry.tasks.base import instrumented_task
@@ -112,11 +114,39 @@ def process_event(cache_key, start_time=None, **kwargs):
     assert data['project'] == project, 'Project cannot be mutated by preprocessor'
 
     if has_changed:
+        issues = data.get('processing_issues')
+        if issues:
+            create_failed_event(cache_key, project, issues)
+            return
         default_cache.set(cache_key, data, 3600)
 
     save_event.delay(cache_key=cache_key, data=None, start_time=start_time)
 
 
+def create_failed_event(cache_key, project, issues):
+    """If processing failed we put the original data from the cache into a
+    raw event.
+    """
+    data = default_cache.get(cache_key)
+    if data is None:
+        metrics.incr('events.failed', tags={'reason': 'cache', 'stage': 'failed_raw'})
+        error_logger.error('process.failed_raw.empty', extra={'cache_key': cache_key})
+        return
+
+    from sentry.models import RawEvent
+    RawEvent.objects.create(
+        project_id=project,
+        event_id=data['event_id'],
+        datetime=datetime.utcfromtimestamp(
+            data['timestamp']).replace(tzinfo=timezone.utc),
+        data=data
+    )
+
+    # TODO: store associated issues
+
+    default_cache.delete(cache_key)
+
+
 @instrumented_task(
     name='sentry.tasks.store.save_event',
     queue='events.save_event')
