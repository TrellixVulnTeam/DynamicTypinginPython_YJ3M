commit e55ad87c5938649c9831482a4673c1738f983e6d
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Dec 12 15:55:15 2016 -0800

    api: url-password data scrubber was too overly eager (#4662)
    
    The original pattern would cause whole blocks of text to be erronously
    filtered out if they contained `@` and `//` anywhere in the content.
    
    So a string such as `http://localhost something:something foo@localhost`
    would cause `something foo` to get stripped out. This was more commonly
    happening across JSON blobs where this pattern was more likely to match.
    
    This refines the regular expression to url-safe characters only.

diff --git a/src/sentry/utils/data_scrubber.py b/src/sentry/utils/data_scrubber.py
index 8fcd31cfbc..6fd6d350e6 100644
--- a/src/sentry/utils/data_scrubber.py
+++ b/src/sentry/utils/data_scrubber.py
@@ -54,7 +54,7 @@ class SensitiveDataFilter(object):
         # social security numbers (US)
         r'^\b(?!(000|666|9))\d{3}-(?!00)\d{2}-(?!0000)\d{4}\b',
     ]), re.DOTALL)
-    URL_PASSWORD_RE = re.compile(r'\b((?:[a-z0-9]+:)?//[^:]+:)([^@]+)@')
+    URL_PASSWORD_RE = re.compile(r'\b((?:[a-z0-9]+:)?//[a-zA-Z0-9%_.-]+:)([a-zA-Z0-9%_.-]+)@')
 
     def __init__(self, fields=None, include_defaults=True, exclude_fields=()):
         if fields:
diff --git a/tests/sentry/utils/test_data_scrubber.py b/tests/sentry/utils/test_data_scrubber.py
index da1355e9ee..35dcc0634f 100644
--- a/tests/sentry/utils/test_data_scrubber.py
+++ b/tests/sentry/utils/test_data_scrubber.py
@@ -238,11 +238,6 @@ class SensitiveDataFilterTest(TestCase):
         proc = SensitiveDataFilter()
         result = proc.sanitize('foo', 'pg://matt:pass@localhost/1')
         assert result == 'pg://matt:%s@localhost/1' % FILTER_MASK
-        # Make sure we don't mess up any other url.
-        # This url specifically if passed through urlunsplit(urlsplit()),
-        # it'll change the value.
-        result = proc.sanitize('foo', 'postgres:///path')
-        assert result == 'postgres:///path'
         result = proc.sanitize('foo', "foo 'redis://redis:foo@localhost:6379/0' bar")
         assert result == "foo 'redis://redis:%s@localhost:6379/0' bar" % FILTER_MASK
         result = proc.sanitize('foo', "'redis://redis:foo@localhost:6379/0'")
@@ -251,6 +246,14 @@ class SensitiveDataFilterTest(TestCase):
         assert result == "foo redis://redis:%s@localhost:6379/0 bar" % FILTER_MASK
         result = proc.sanitize('foo', "foo redis://redis:foo@localhost:6379/0 bar pg://matt:foo@localhost/1")
         assert result == "foo redis://redis:%s@localhost:6379/0 bar pg://matt:%s@localhost/1" % (FILTER_MASK, FILTER_MASK)
+        # Make sure we don't mess up any other url.
+        # This url specifically if passed through urlunsplit(urlsplit()),
+        # it'll change the value.
+        result = proc.sanitize('foo', 'postgres:///path')
+        assert result == 'postgres:///path'
+        # Don't be too overly eager within JSON strings an catch the right field.
+        result = proc.sanitize('foo', '{"a":"https://localhost","b":"foo@localhost","c":"pg://matt:pass@localhost/1","d":"lol"}')
+        assert result == '{"a":"https://localhost","b":"foo@localhost","c":"pg://matt:%s@localhost/1","d":"lol"}' % FILTER_MASK
 
     def test_sanitize_http_body(self):
         data = {
