commit 547deed26603fe30c4c7e0634f949a3eb62d56c6
Author: Nola Chen <chen.no@husky.neu.edu>
Date:   Tue Nov 12 10:56:04 2019 -0800

    feat(app-platform): Add all webhook events to request log in dashboard (#15462)
    
    * Add all other webhook request event types to log
    
    * Update comment
    
    * Rename events and write some tests
    
    * Review fixes
    
    * correctly raise an error, fix a test
    
    * Rename select.requested to select_options.requested

diff --git a/src/sentry/mediators/external_issues/issue_link_creator.py b/src/sentry/mediators/external_issues/issue_link_creator.py
index 4d3a49ce7b..71e7b1c4a9 100644
--- a/src/sentry/mediators/external_issues/issue_link_creator.py
+++ b/src/sentry/mediators/external_issues/issue_link_creator.py
@@ -25,11 +25,16 @@ class IssueLinkCreator(Mediator):
 
     def _verify_action(self):
         if self.action not in ["link", "create"]:
-            return APIUnauthorized()
+            raise APIUnauthorized(u"Invalid action '{}'".format(self.action))
 
     def _make_external_request(self):
         self.response = external_requests.IssueLinkRequester.run(
-            install=self.install, uri=self.uri, group=self.group, fields=self.fields, user=self.user
+            install=self.install,
+            uri=self.uri,
+            group=self.group,
+            fields=self.fields,
+            user=self.user,
+            action=self.action,
         )
 
     def _format_response_data(self):
diff --git a/src/sentry/mediators/external_requests/issue_link_requester.py b/src/sentry/mediators/external_requests/issue_link_requester.py
index e39e7aedba..c1bd938b02 100644
--- a/src/sentry/mediators/external_requests/issue_link_requester.py
+++ b/src/sentry/mediators/external_requests/issue_link_requester.py
@@ -5,10 +5,10 @@ import logging
 from uuid import uuid4
 
 from six.moves.urllib.parse import urlparse
-from sentry.http import safe_urlopen, safe_urlread
+from sentry.http import safe_urlread
 from sentry.coreapi import APIError
 from sentry.mediators import Mediator, Param
-from sentry.mediators.external_requests.util import validate
+from sentry.mediators.external_requests.util import validate, send_and_save_sentry_app_request
 from sentry.utils import json
 from sentry.utils.cache import memoize
 
@@ -50,6 +50,7 @@ class IssueLinkRequester(Mediator):
     group = Param("sentry.models.Group")
     fields = Param(object)
     user = Param("sentry.models.User")
+    action = Param(six.string_types)
 
     def call(self):
         return self._make_request()
@@ -59,8 +60,15 @@ class IssueLinkRequester(Mediator):
         return u"{}://{}{}".format(urlparts.scheme, urlparts.netloc, self.uri)
 
     def _make_request(self):
-        req = safe_urlopen(
-            url=self._build_url(), headers=self._build_headers(), method="POST", data=self.body
+        action_to_past_tense = {"create": "created", "link": "linked"}
+        req = send_and_save_sentry_app_request(
+            self._build_url(),
+            self.sentry_app,
+            self.install.organization_id,
+            "external_issue.{}".format(action_to_past_tense[self.action]),
+            headers=self._build_headers(),
+            method="POST",
+            data=self.body,
         )
 
         try:
diff --git a/src/sentry/mediators/external_requests/select_requester.py b/src/sentry/mediators/external_requests/select_requester.py
index 02bd651126..56f239c3f5 100644
--- a/src/sentry/mediators/external_requests/select_requester.py
+++ b/src/sentry/mediators/external_requests/select_requester.py
@@ -5,10 +5,10 @@ import logging
 from uuid import uuid4
 
 from six.moves.urllib.parse import urlparse, urlencode, urlunparse
-from sentry.http import safe_urlopen, safe_urlread
+from sentry.http import safe_urlread
 from sentry.coreapi import APIError
 from sentry.mediators import Mediator, Param
-from sentry.mediators.external_requests.util import validate
+from sentry.mediators.external_requests.util import validate, send_and_save_sentry_app_request
 from sentry.utils import json
 from sentry.utils.cache import memoize
 
@@ -50,7 +50,15 @@ class SelectRequester(Mediator):
 
     def _make_request(self):
         try:
-            body = safe_urlread(safe_urlopen(url=self._build_url(), headers=self._build_headers()))
+            body = safe_urlread(
+                send_and_save_sentry_app_request(
+                    self._build_url(),
+                    self.sentry_app,
+                    self.install.organization_id,
+                    "select_options.requested",
+                    headers=self._build_headers(),
+                )
+            )
 
             response = json.loads(body)
         except Exception as e:
diff --git a/src/sentry/mediators/external_requests/util.py b/src/sentry/mediators/external_requests/util.py
index f3775d3ac2..92a615d6b3 100644
--- a/src/sentry/mediators/external_requests/util.py
+++ b/src/sentry/mediators/external_requests/util.py
@@ -1,6 +1,11 @@
 from __future__ import absolute_import
 
 from jsonschema import Draft4Validator
+from requests.exceptions import RequestException
+
+from sentry.utils.sentryappwebhookrequests import SentryAppWebhookRequestsBuffer
+from sentry.http import safe_urlopen
+
 
 SELECT_OPTIONS_SCHEMA = {
     "type": "array",
@@ -35,3 +40,26 @@ def validate(instance, schema_type):
         return False
 
     return True
+
+
+def send_and_save_sentry_app_request(url, sentry_app, org_id, event, **kwargs):
+    """
+    Send a webhook request, and save the request into the Redis buffer for the app dashboard request log
+    Returns the response of the request
+
+    kwargs ends up being the arguments passed into safe_urlopen
+    """
+
+    buffer = SentryAppWebhookRequestsBuffer(sentry_app)
+
+    try:
+        resp = safe_urlopen(url=url, **kwargs)
+    except RequestException:
+        # Response code of 0 represents timeout
+        buffer.add_request(response_code=0, org_id=org_id, event=event, url=url)
+        # Re-raise the exception because some of these tasks might retry on the exception
+        raise
+
+    buffer.add_request(response_code=resp.status_code, org_id=org_id, event=event, url=url)
+
+    return resp
diff --git a/src/sentry/mediators/sentry_app_installations/installation_notifier.py b/src/sentry/mediators/sentry_app_installations/installation_notifier.py
index 17a8984ab7..834c27224d 100644
--- a/src/sentry/mediators/sentry_app_installations/installation_notifier.py
+++ b/src/sentry/mediators/sentry_app_installations/installation_notifier.py
@@ -4,9 +4,10 @@ import six
 
 from sentry.api.serializers import SentryAppInstallationSerializer, AppPlatformEvent
 from sentry.coreapi import APIUnauthorized
-from sentry.http import safe_urlopen, safe_urlread
+from sentry.http import safe_urlread
 from sentry.mediators import Mediator, Param
 from sentry.utils.cache import memoize
+from sentry.tasks.sentry_apps import send_and_save_webhook_request
 
 
 class InstallationNotifier(Mediator):
@@ -24,11 +25,8 @@ class InstallationNotifier(Mediator):
 
     def _send_webhook(self):
         safe_urlread(
-            safe_urlopen(
-                url=self.sentry_app.webhook_url,
-                data=self.request.body,
-                headers=self.request.headers,
-                timeout=5,
+            send_and_save_webhook_request(
+                self.sentry_app.webhook_url, self.sentry_app, self.request
             )
         )
 
diff --git a/src/sentry/tasks/sentry_apps.py b/src/sentry/tasks/sentry_apps.py
index ccf2c4c23e..6e459c7189 100644
--- a/src/sentry/tasks/sentry_apps.py
+++ b/src/sentry/tasks/sentry_apps.py
@@ -104,9 +104,7 @@ def send_alert_event(event, rule, sentry_app_id):
         resource="event_alert", action="triggered", install=install, data=data
     )
 
-    safe_urlopen(
-        url=sentry_app.webhook_url, data=request_data.body, headers=request_data.headers, timeout=5
-    )
+    send_and_save_webhook_request(sentry_app.webhook_url, sentry_app, request_data)
 
 
 def _process_resource_change(action, sender, instance_id, retryer=None, *args, **kwargs):
@@ -274,29 +272,27 @@ def send_webhooks(installation, event, **kwargs):
 
         request_data = AppPlatformEvent(**kwargs)
 
-        buffer = SentryAppWebhookRequestsBuffer(installation.sentry_app)
-
-        try:
-            resp = safe_urlopen(
-                url=servicehook.sentry_app.webhook_url,
-                data=request_data.body,
-                headers=request_data.headers,
-                timeout=5,
-            )
-        except RequestException:
-            # Response code of 0 represents timeout
-            buffer.add_request(
-                response_code=0,
-                org_id=installation.organization_id,
-                event=event,
-                url=servicehook.sentry_app.webhook_url,
-            )
-            # Re-raise the exception because some of these tasks might retry on the exception
-            raise
-
-        buffer.add_request(
-            response_code=resp.status_code,
-            org_id=installation.organization_id,
-            event=event,
-            url=servicehook.sentry_app.webhook_url,
+        send_and_save_webhook_request(
+            servicehook.sentry_app.webhook_url, installation.sentry_app, request_data
         )
+
+
+def send_and_save_webhook_request(url, sentry_app, app_platform_event):
+    buffer = SentryAppWebhookRequestsBuffer(sentry_app)
+
+    org_id = app_platform_event.install.organization_id
+    event = "{}.{}".format(app_platform_event.resource, app_platform_event.action)
+
+    try:
+        resp = safe_urlopen(
+            url=url, data=app_platform_event.body, headers=app_platform_event.headers, timeout=5
+        )
+    except RequestException:
+        # Response code of 0 represents timeout
+        buffer.add_request(response_code=0, org_id=org_id, event=event, url=url)
+        # Re-raise the exception because some of these tasks might retry on the exception
+        raise
+
+    buffer.add_request(response_code=resp.status_code, org_id=org_id, event=event, url=url)
+
+    return resp
diff --git a/src/sentry/utils/sentryappwebhookrequests.py b/src/sentry/utils/sentryappwebhookrequests.py
index 60f8894055..659d17b8fc 100644
--- a/src/sentry/utils/sentryappwebhookrequests.py
+++ b/src/sentry/utils/sentryappwebhookrequests.py
@@ -14,6 +14,15 @@ from sentry.models.sentryapp import VALID_EVENTS
 BUFFER_SIZE = 100
 KEY_EXPIRY = 60 * 60 * 24 * 30  # 30 days
 
+EXTENDED_VALID_EVENTS = VALID_EVENTS + (
+    "event_alert.triggered",
+    "installation.created",
+    "installation.deleted",
+    "select_options.requested",
+    "external_issue.created",
+    "external_issue.linked",
+)
+
 
 class SentryAppWebhookRequestsBuffer(object):
     """
@@ -72,12 +81,12 @@ class SentryAppWebhookRequestsBuffer(object):
             pipe = self.client.pipeline()
 
             all_requests = []
-            for evt in VALID_EVENTS:
+            for evt in EXTENDED_VALID_EVENTS:
                 self._get_all_from_buffer(self._get_redis_key(evt, error=error), pipeline=pipe)
 
             values = pipe.execute()
 
-            for idx, evt in enumerate(VALID_EVENTS):
+            for idx, evt in enumerate(EXTENDED_VALID_EVENTS):
                 event_requests = [
                     self._convert_redis_request(request, evt) for request in values[idx]
                 ]
@@ -99,7 +108,7 @@ class SentryAppWebhookRequestsBuffer(object):
         return self._get_requests(event=event, error=False)
 
     def add_request(self, response_code, org_id, event, url):
-        if event not in VALID_EVENTS:
+        if event not in EXTENDED_VALID_EVENTS:
             return
 
         request_key = self._get_redis_key(event)
diff --git a/tests/sentry/mediators/external_issues/test_issue_link_creator.py b/tests/sentry/mediators/external_issues/test_issue_link_creator.py
index 5ebc99de35..d99d3108a5 100644
--- a/tests/sentry/mediators/external_issues/test_issue_link_creator.py
+++ b/tests/sentry/mediators/external_issues/test_issue_link_creator.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 import responses
 
-from sentry.coreapi import APIError
+from sentry.coreapi import APIUnauthorized
 from sentry.mediators.external_issues import IssueLinkCreator
 from sentry.models import PlatformExternalIssue
 from sentry.testutils import TestCase
@@ -56,7 +56,7 @@ class TestIssueLinkCreator(TestCase):
         assert external_issue.display_name == "ProjectName#issue-1"
 
     def test_invalid_action(self):
-        with self.assertRaises(APIError):
+        with self.assertRaises(APIUnauthorized):
             IssueLinkCreator.run(
                 install=self.install,
                 group=self.group,
diff --git a/tests/sentry/mediators/external_requests/test_issue_link_requester.py b/tests/sentry/mediators/external_requests/test_issue_link_requester.py
index 59e1d3ab97..c59db39bc8 100644
--- a/tests/sentry/mediators/external_requests/test_issue_link_requester.py
+++ b/tests/sentry/mediators/external_requests/test_issue_link_requester.py
@@ -6,6 +6,7 @@ from sentry.coreapi import APIError
 from sentry.mediators.external_requests import IssueLinkRequester
 from sentry.testutils import TestCase
 from sentry.utils import json
+from sentry.utils.sentryappwebhookrequests import SentryAppWebhookRequestsBuffer
 
 
 class TestIssueLinkRequester(TestCase):
@@ -48,6 +49,7 @@ class TestIssueLinkRequester(TestCase):
             uri="/link-issue",
             fields=fields,
             user=self.user,
+            action="create",
         )
         assert result == {
             "project": "ProjectName",
@@ -68,6 +70,13 @@ class TestIssueLinkRequester(TestCase):
         payload = json.loads(request.body)
         assert payload == data
 
+        buffer = SentryAppWebhookRequestsBuffer(self.sentry_app)
+        requests = buffer.get_requests()
+
+        assert len(requests) == 1
+        assert requests[0]["response_code"] == 200
+        assert requests[0]["event_type"] == "external_issue.created"
+
     @responses.activate
     def test_invalid_response_format(self):
         # missing 'identifier'
@@ -90,6 +99,7 @@ class TestIssueLinkRequester(TestCase):
                 uri="/link-issue",
                 fields={},
                 user=self.user,
+                action="create",
             )
 
     @responses.activate
@@ -109,4 +119,12 @@ class TestIssueLinkRequester(TestCase):
                 uri="/link-issue",
                 fields={},
                 user=self.user,
+                action="create",
             )
+
+        buffer = SentryAppWebhookRequestsBuffer(self.sentry_app)
+        requests = buffer.get_requests()
+
+        assert len(requests) == 1
+        assert requests[0]["response_code"] == 500
+        assert requests[0]["event_type"] == "external_issue.created"
diff --git a/tests/sentry/mediators/external_requests/test_select_requester.py b/tests/sentry/mediators/external_requests/test_select_requester.py
index 6f53bc68b9..ab843bee45 100644
--- a/tests/sentry/mediators/external_requests/test_select_requester.py
+++ b/tests/sentry/mediators/external_requests/test_select_requester.py
@@ -6,6 +6,8 @@ from sentry.coreapi import APIError
 from sentry.mediators.external_requests import SelectRequester
 from sentry.testutils import TestCase
 
+from sentry.utils.sentryappwebhookrequests import SentryAppWebhookRequestsBuffer
+
 
 class TestSelectRequester(TestCase):
     def setUp(self):
@@ -49,6 +51,13 @@ class TestSelectRequester(TestCase):
         request = responses.calls[0].request
         assert request.headers["Sentry-App-Signature"]
 
+        buffer = SentryAppWebhookRequestsBuffer(self.sentry_app)
+        requests = buffer.get_requests()
+
+        assert len(requests) == 1
+        assert requests[0]["response_code"] == 200
+        assert requests[0]["event_type"] == "select_options.requested"
+
     @responses.activate
     def test_invalid_response_format(self):
         # missing 'label'
@@ -91,3 +100,10 @@ class TestSelectRequester(TestCase):
                 uri="/get-issues",
                 fields={},
             )
+
+        buffer = SentryAppWebhookRequestsBuffer(self.sentry_app)
+        requests = buffer.get_requests()
+
+        assert len(requests) == 1
+        assert requests[0]["response_code"] == 500
+        assert requests[0]["event_type"] == "select_options.requested"
diff --git a/tests/sentry/mediators/sentry_app_installations/test_installation_notifier.py b/tests/sentry/mediators/sentry_app_installations/test_installation_notifier.py
index ec708597a2..d0e03727ce 100644
--- a/tests/sentry/mediators/sentry_app_installations/test_installation_notifier.py
+++ b/tests/sentry/mediators/sentry_app_installations/test_installation_notifier.py
@@ -1,12 +1,17 @@
 from __future__ import absolute_import
 
 from mock import patch
+from collections import namedtuple
 
 from sentry.coreapi import APIUnauthorized
 from sentry.mediators.sentry_app_installations import InstallationNotifier
 from sentry.testutils import TestCase
 from sentry.testutils.helpers.faux import faux
 from sentry.utils import json
+from sentry.utils.sentryappwebhookrequests import SentryAppWebhookRequestsBuffer
+
+MockResponse = namedtuple("MockResponse", ["headers", "content", "ok", "status_code"])
+MockResponseInstance = MockResponse({}, {}, True, 200)
 
 
 class DictContaining(object):
@@ -32,7 +37,7 @@ class TestInstallationNotifier(TestCase):
             slug="foo", organization=self.org, user=self.user
         )
 
-    @patch("sentry.mediators.sentry_app_installations.installation_notifier.safe_urlopen")
+    @patch("sentry.tasks.sentry_apps.safe_urlopen", return_value=MockResponseInstance)
     def test_task_enqueued(self, safe_urlopen):
         InstallationNotifier.run(install=self.install, user=self.user, action="created")
 
@@ -66,7 +71,7 @@ class TestInstallationNotifier(TestCase):
             ),
         )
 
-    @patch("sentry.mediators.sentry_app_installations.installation_notifier.safe_urlopen")
+    @patch("sentry.tasks.sentry_apps.safe_urlopen", return_value=MockResponseInstance)
     def test_uninstallation_enqueued(self, safe_urlopen):
         InstallationNotifier.run(install=self.install, user=self.user, action="deleted")
 
@@ -100,9 +105,21 @@ class TestInstallationNotifier(TestCase):
             ),
         )
 
-    @patch("sentry.mediators.sentry_app_installations.installation_notifier.safe_urlopen")
+    @patch("sentry.tasks.sentry_apps.safe_urlopen")
     def test_invalid_installation_action(self, safe_urlopen):
         with self.assertRaises(APIUnauthorized):
             InstallationNotifier.run(install=self.install, user=self.user, action="updated")
 
         assert not safe_urlopen.called
+
+    @patch("sentry.tasks.sentry_apps.safe_urlopen", return_value=MockResponseInstance)
+    def test_webhook_request_saved(self, safe_urlopen):
+        InstallationNotifier.run(install=self.install, user=self.user, action="created")
+        InstallationNotifier.run(install=self.install, user=self.user, action="deleted")
+
+        buffer = SentryAppWebhookRequestsBuffer(self.sentry_app)
+        requests = buffer.get_requests()
+
+        assert len(requests) == 2
+        assert requests[0]["event_type"] == "installation.deleted"
+        assert requests[1]["event_type"] == "installation.created"
diff --git a/tests/sentry/tasks/test_sentry_apps.py b/tests/sentry/tasks/test_sentry_apps.py
index 8da62075b7..3a32bdfa00 100644
--- a/tests/sentry/tasks/test_sentry_apps.py
+++ b/tests/sentry/tasks/test_sentry_apps.py
@@ -103,7 +103,7 @@ class TestSendAlertEvent(TestCase):
 
         assert not safe_urlopen.called
 
-    @patch("sentry.tasks.sentry_apps.safe_urlopen")
+    @patch("sentry.tasks.sentry_apps.safe_urlopen", return_value=MockResponseInstance)
     def test_send_alert_event(self, safe_urlopen):
         group = self.create_group(project=self.project)
         event = self.create_event(group=group)
@@ -150,6 +150,13 @@ class TestSendAlertEvent(TestCase):
             ),
         )
 
+        buffer = SentryAppWebhookRequestsBuffer(self.sentry_app)
+        requests = buffer.get_requests()
+
+        assert len(requests) == 1
+        assert requests[0]["response_code"] == 200
+        assert requests[0]["event_type"] == "event_alert.triggered"
+
 
 @patch("sentry.tasks.sentry_apps.safe_urlopen", return_value=MockResponseInstance)
 class TestProcessResourceChange(TestCase):
