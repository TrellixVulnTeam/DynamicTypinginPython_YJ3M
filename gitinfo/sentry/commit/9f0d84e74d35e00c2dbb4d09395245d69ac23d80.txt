commit 9f0d84e74d35e00c2dbb4d09395245d69ac23d80
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Nov 23 19:22:01 2011 -0800

    Improvements to 'trending', including adding intervals to the filter and relabeling as acceleration

diff --git a/sentry/templates/sentry/index.html b/sentry/templates/sentry/index.html
index 84a3ef9dec..1bcf265149 100644
--- a/sentry/templates/sentry/index.html
+++ b/sentry/templates/sentry/index.html
@@ -30,14 +30,20 @@
         <div class="clearfix">
             <form method="GET" action="">
                 {% for k, v in request.GET.iteritems %}
-                    <input type="hidden" name="{{ k }}" value="{{ v }}"/>
+                    {% if k != 'sort' %}
+                        <input type="hidden" name="{{ k }}" value="{{ v }}"/>
+                    {% endif %}
                 {% endfor %}
                 <div class="sort-by">{% trans "Sort by" %} <select name="sort" onchange="this.form.submit()">
                     <option value=""{% ifequal sort 'priority' %} selected="selected"{% endifequal %}>{% trans "Priority" %}</option>
-                    <option value="trending"{% ifequal sort 'trending' %} selected="selected"{% endifequal %}>{% trans "Trending" %}</option>
                     <option value="date"{% ifequal sort 'date' %} selected="selected"{% endifequal %}>{% trans "Last Seen" %}</option>
                     <option value="new"{% ifequal sort 'new' %} selected="selected"{% endifequal %}>{% trans "First Seen" %}</option>
                     <option value="freq"{% ifequal sort 'freq' %} selected="selected"{% endifequal %}>{% trans "Frequency" %}</option>
+                    <optgroup label="{% trans "Acceleration" %}">
+                        <option value="accel_18000"{% ifequal sort 'accel_18000' %} selected="selected"{% endifequal %}>{% trans "5 minutes" %}</option>
+                        <option value="accel_54000"{% ifequal sort 'accel_54000' %} selected="selected"{% endifequal %}>{% trans "15 minutes" %}</option>
+                        <option value="accel_216000"{% ifequal sort 'accel_216000' %} selected="selected"{% endifequal %}>{% trans "60 minutes" %}</option>
+                    </optgroup>
                 </select>
                 </div>
             </form>
diff --git a/sentry/utils/manager.py b/sentry/utils/manager.py
index 485591eb18..02682f9657 100644
--- a/sentry/utils/manager.py
+++ b/sentry/utils/manager.py
@@ -330,6 +330,18 @@ class GroupManager(models.Manager):
 
             return instance
 
+    def _get_date_trunc(self, col, db='default'):
+        conn = connections[db]
+
+        engine = get_db_engine(db)
+        # TODO: does extract work for sqlite?
+        if engine.startswith('oracle'):
+            method = conn.ops.date_trunc_sql('hh24', col)
+        else:
+            method = conn.ops.date_trunc_sql('hour', col)
+
+        return method
+
     def get_by_natural_key(self, logger, culprit, checksum):
         return self.get(logger=logger, view=culprit, checksum=checksum)
 
@@ -342,19 +354,12 @@ class GroupManager(models.Manager):
         if not has_charts(db):
             return []
 
-        conn = connections[db]
-
-        engine = get_db_engine(db)
-        # TODO: does extract work for sqlite?
-        if engine.startswith('oracle'):
-            method = conn.ops.date_trunc_sql('hh24', 'date')
-        else:
-            method = conn.ops.date_trunc_sql('hour', 'date')
-
         hours = max_days*24
         today = datetime.datetime.now().replace(microsecond=0, second=0, minute=0)
         min_date = today - datetime.timedelta(hours=hours)
 
+        method = self._get_date_trunc('date', db)
+
         chart_qs = list(group.messagecountbyminute_set.all()\
                           .filter(date__gte=min_date)\
                           .extra(select={'grouper': method}).values('grouper')\
@@ -373,27 +378,32 @@ class GroupManager(models.Manager):
 
         return [rows.get(today-datetime.timedelta(hours=d), 0) for d in xrange(first_seen, -1, -1)]
 
-    def get_trending(self, queryset=None):
+    def get_accelerated(self, queryset=None, seconds=60*60*15):
         from sentry.models import MessageCountByMinute
         mcbm_tbl = MessageCountByMinute._meta.db_table
         if queryset is None:
             queryset = self
-        queryset = queryset.extra(where=["%s.date >= now() - interval '15 minutes'" % mcbm_tbl]).annotate(x=Sum('messagecountbyminute__times_seen'))
+
+        queryset = queryset.extra(where=["%s.date >= now() - interval '%s seconds'" % (mcbm_tbl, seconds)]).annotate(x=Sum('messagecountbyminute__times_seen'))
         sql, params = queryset.query.get_compiler(queryset.db).as_sql()
         before_select, after_select = str(sql).split('SELECT ', 1)
         before_where, after_where = after_select.split(' WHERE ', 1)
         before_group, after_group = after_where.split(' GROUP BY ', 1)
+
         query = """
-        SELECT (SUM(%(mcbm_tbl)s.times_seen) + 1.0) / (COALESCE(z.freq, 0) + 1.0) as zfreq, SUM(%(mcbm_tbl)s.times_seen) as nfreq, z.freq as pfreq, %(before_where)s
-        LEFT JOIN (SELECT a.group_id, SUM(a.times_seen) / 3.0 as freq FROM %(mcbm_tbl)s as a WHERE a.date BETWEEN now() - interval '1 hour' AND now() - interval '16 minutes'
-        GROUP BY a.group_id) as z ON z.group_id = %(mcbm_tbl)s.group_id WHERE %(before_group)s GROUP BY pfreq, %(after_group)s ORDER BY zfreq DESC
+        SELECT (SUM(%(mcbm_tbl)s.times_seen) + 1.0) / (COALESCE(z.accel, 0) + 1.0) as accel, SUM(%(mcbm_tbl)s.times_seen) as total_seen, z.accel as prev_accel, %(before_where)s
+        LEFT JOIN (SELECT a.group_id, SUM(a.times_seen) / 3.0 as accel FROM %(mcbm_tbl)s as a WHERE a.date BETWEEN now() - interval '%(max_time)s seconds' AND now() - interval '%(min_time)s seconds'
+        GROUP BY a.group_id) as z ON z.group_id = %(mcbm_tbl)s.group_id WHERE %(before_group)s GROUP BY prev_accel, %(after_group)s ORDER BY accel DESC
         """ % dict(
             mcbm_tbl=mcbm_tbl,
             before_where=before_where,
             before_group=before_group,
             after_group=after_group,
+            min_time=seconds+1,
+            max_time=seconds*4,
         )
-        return RawQuerySet(self.model.objects, query, params)
+
+        return RawQuerySet(self, query, params)
 
 class RawQuerySet(object):
     def __init__(self, queryset, query, params):
diff --git a/sentry/web/views.py b/sentry/web/views.py
index ce83b22ce3..8b8ca66b00 100644
--- a/sentry/web/views.py
+++ b/sentry/web/views.py
@@ -139,8 +139,8 @@ def ajax_handler(request):
             message_list = message_list.order_by('-first_seen')
         elif sort == 'freq':
             message_list = message_list.order_by('-times_seen')
-        elif sort == 'trending':
-            message_list = Group.objects.get_trending(message_list)
+        elif sort.startswith('accel_'):
+            message_list = Group.objects.get_accelerated(message_list, seconds=int(sort.split('_', 1)[1]))
         else:
             sort = 'priority'
             message_list = message_list.order_by('-score', '-last_seen')
@@ -331,8 +331,8 @@ def index(request, project):
         message_list = message_list.order_by('-first_seen')
     elif sort == 'freq':
         message_list = message_list.order_by('-times_seen')
-    elif sort == 'trending':
-        message_list = Group.objects.get_trending(message_list)
+    elif sort.startswith('accel_'):
+        message_list = Group.objects.get_accelerated(message_list, seconds=int(sort.split('_', 1)[1]))
     else:
         sort = 'priority'
         message_list = message_list.order_by('-score', '-last_seen')
