commit 329085b5db47eb128d43cd99d04cfbfade898370
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Dec 19 22:37:27 2012 -0800

    Improve stacktraces so that only Python shows most recent caller last

diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index a63a28703a..bb3225ecce 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -294,6 +294,9 @@ class Stacktrace(Interface):
                 output.append(frame['lineno'])
         return output
 
+    def is_default_newest_first(self, event):
+        return event.platform not in ('python', None)
+
     def to_html(self, event):
         system_frames = 0
         frames = []
@@ -335,6 +338,8 @@ class Stacktrace(Interface):
         if len(frames) == system_frames:
             system_frames = 0
 
+        newest_first = self.is_default_newest_first(event)
+
         if env.request and env.request.user.is_authenticated():
             display = UserOption.objects.get_value(
                 user=env.request.user,
@@ -342,10 +347,16 @@ class Stacktrace(Interface):
                 key='stacktrace_order',
                 default=None,
             )
-            if display == '2':
-                frames.reverse()
+            if display == '1':
+                newest_first = False
+            elif display == '2':
+                newest_first = True
+
+        if not newest_first:
+            frames.reverse()
 
         return render_to_string('sentry/partial/interfaces/stacktrace.html', {
+            'newest_first': newest_first,
             'system_frames': system_frames,
             'event': event,
             'frames': frames,
@@ -353,12 +364,18 @@ class Stacktrace(Interface):
         })
 
     def to_string(self, event):
-        return self.get_stacktrace(event)
+        return self.get_stacktrace(event, system_frames=False)
 
-    def get_stacktrace(self, event):
+    def get_stacktrace(self, event, system_frames=True):
         result = [
             'Stacktrace (most recent call last):', '',
         ]
+
+        if not system_frames:
+            frames = [f for f in self.frames if f.get('in_app')]
+            if not frames:
+                frames = self.frames
+
         for frame in self.frames:
             pieces = ['  File "%(filename)s"']
             if 'lineno' in frame:
diff --git a/src/sentry/templates/sentry/partial/interfaces/stacktrace.html b/src/sentry/templates/sentry/partial/interfaces/stacktrace.html
index a64f955f3d..14f08a8509 100644
--- a/src/sentry/templates/sentry/partial/interfaces/stacktrace.html
+++ b/src/sentry/templates/sentry/partial/interfaces/stacktrace.html
@@ -9,7 +9,14 @@
                 <label class="checkbox"><input type="checkbox" id="show_hidden_frames"> Show {{ system_frames }} hidden frames</label>
             </form>
         {% endif %}
-        <h2>{% trans "Stacktrace" %}</h2>
+        <h2>
+            {% trans "Stacktrace" %}
+            <small>{% if newest_first %}
+                ({% trans "most recent call first" %})
+            {% else %}
+                ({% trans "most recent call last" %})
+            {% endif %}</small>
+        </h2>
     </div>
     <div class="module-content">
         <ul class="traceback">
@@ -19,6 +26,9 @@
                         <code>{{ frame.filename }}</code>
                         {% if frame.function %} in <code>{{ frame.function }}</code>{% endif %}
                         {% if not frame.context and frame.lineno %} at line <code>{{ frame.lineno }}</code>{% endif %}
+                        {% if frame.in_app %}
+                            (application)
+                        {% endif %}
                     </p>
 
                     {% if frame.context or frame.vars %}
diff --git a/tests/sentry/interfaces/stacktrace/tests.py b/tests/sentry/interfaces/stacktrace/tests.py
index af8cc7bb6e..66b61664e0 100644
--- a/tests/sentry/interfaces/stacktrace/tests.py
+++ b/tests/sentry/interfaces/stacktrace/tests.py
@@ -85,7 +85,7 @@ class StacktraceTest(TestCase):
         event = mock.Mock(spec=Event)
         interface = Stacktrace(frames=[])
         result = interface.to_string(event)
-        get_stacktrace.assert_called_once_with(event)
+        get_stacktrace.assert_called_once_with(event, system_frames=False)
         self.assertEquals(result, get_stacktrace.return_value)
 
     @mock.patch('sentry.interfaces.Stacktrace.get_stacktrace')
