commit 759e1b8a9b4fcca2849d4b714ac5d490264d6286
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Thu Jul 9 09:04:49 2020 +0200

    Ref(ClippedBox): Convert clipped box to ts (#19761)

diff --git a/src/sentry/static/sentry/app/components/clippedBox.jsx b/src/sentry/static/sentry/app/components/clippedBox.jsx
deleted file mode 100644
index a1d806b5cc..0000000000
--- a/src/sentry/static/sentry/app/components/clippedBox.jsx
+++ /dev/null
@@ -1,91 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import ReactDOM from 'react-dom';
-import classnames from 'classnames';
-
-import {t} from 'app/locale';
-import Button from 'app/components/button';
-
-class ClippedBox extends React.Component {
-  static propTypes = {
-    title: PropTypes.string,
-    defaultClipped: PropTypes.bool,
-    clipHeight: PropTypes.number,
-    btnText: PropTypes.string,
-  };
-
-  static defaultProps = {
-    defaultClipped: false,
-    clipHeight: 200,
-    renderedHeight: null,
-    btnText: t('Show More'),
-  };
-
-  constructor(...args) {
-    super(...args);
-    this.state = {
-      clipped: this.props.defaultClipped,
-      revealed: false, // True once user has clicked "Show More" button
-    };
-  }
-
-  componentDidMount() {
-    const renderedHeight = ReactDOM.findDOMNode(this).offsetHeight; // eslint-disable-line react/no-find-dom-node
-
-    if (!this.state.clipped && renderedHeight > this.props.clipHeight) {
-      /*eslint react/no-did-mount-set-state:0*/
-      // okay if this causes re-render; cannot determine until
-      // rendered first anyways
-      this.setState({
-        clipped: true,
-      });
-    }
-  }
-
-  componentDidUpdate() {
-    if (this.state.revealed || !this.state.clipped) {
-      return;
-    }
-
-    const renderedHeight = ReactDOM.findDOMNode(this).offsetHeight; // eslint-disable-line react/no-find-dom-node
-    if (renderedHeight < this.props.clipHeight) {
-      this.reveal();
-    }
-  }
-
-  reveal = e => {
-    e?.stopPropagation();
-
-    this.setState({
-      clipped: false,
-      revealed: true,
-    });
-  };
-
-  render() {
-    const className = classnames('box-clippable', {
-      clipped: this.state.clipped,
-      revealed: this.state.revealed,
-    });
-
-    return (
-      <div
-        className={className}
-        style={{maxHeight: this.state.clipped ? this.props.clipHeight : null}}
-      >
-        {this.props.title && <h5>{this.props.title}</h5>}
-        {this.props.children}
-
-        {this.state.clipped && (
-          <div className="clip-fade">
-            <Button onClick={this.reveal} priority="primary" size="xsmall">
-              {this.props.btnText}
-            </Button>
-          </div>
-        )}
-      </div>
-    );
-  }
-}
-
-export default ClippedBox;
diff --git a/src/sentry/static/sentry/app/components/clippedBox.tsx b/src/sentry/static/sentry/app/components/clippedBox.tsx
new file mode 100644
index 0000000000..98a2151ad5
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/clippedBox.tsx
@@ -0,0 +1,148 @@
+import React from 'react';
+import ReactDOM from 'react-dom';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import Button from 'app/components/button';
+import space from 'app/styles/space';
+
+type DefaultProps = {
+  clipHeight?: number;
+  btnText?: string;
+  defaultClipped?: boolean;
+};
+
+type Props = {
+  clipHeight: number;
+  title?: string;
+  className?: string;
+} & DefaultProps;
+
+type State = {
+  isClipped: boolean;
+  isRevealed: boolean;
+};
+
+class ClippedBox extends React.PureComponent<Props, State> {
+  static defaultProps: DefaultProps = {
+    defaultClipped: false,
+    clipHeight: 200,
+    btnText: t('Show More'),
+  };
+
+  state: State = {
+    isClipped: !!this.props.defaultClipped,
+    isRevealed: false, // True once user has clicked "Show More" button
+  };
+
+  componentDidMount() {
+    // eslint-disable-next-line react/no-find-dom-node
+    const renderedHeight = (ReactDOM.findDOMNode(this) as HTMLElement).offsetHeight;
+
+    if (!this.state.isClipped && renderedHeight > this.props.clipHeight) {
+      /*eslint react/no-did-mount-set-state:0*/
+      // okay if this causes re-render; cannot determine until
+      // rendered first anyways
+      this.setState({
+        isClipped: true,
+      });
+    }
+  }
+
+  componentDidUpdate() {
+    if (this.state.isRevealed || !this.state.isClipped) {
+      return;
+    }
+
+    // eslint-disable-next-line react/no-find-dom-node
+    const renderedHeight = (ReactDOM.findDOMNode(this) as HTMLElement).offsetHeight;
+
+    if (renderedHeight < this.props.clipHeight) {
+      this.reveal();
+    }
+  }
+
+  reveal = () => {
+    this.setState({
+      isClipped: false,
+      isRevealed: true,
+    });
+  };
+
+  handleClickReveal = (event: React.MouseEvent) => {
+    event.stopPropagation();
+    this.reveal();
+  };
+
+  render() {
+    const {isClipped, isRevealed} = this.state;
+    const {title, children, clipHeight, btnText, className} = this.props;
+
+    return (
+      <ClipWrapper
+        clipHeight={clipHeight}
+        isClipped={isClipped}
+        isRevealed={isRevealed}
+        className={className}
+      >
+        {title && <Title>{title}</Title>}
+        {children}
+        {isClipped && (
+          <ClipFade>
+            <Button onClick={this.reveal} priority="primary" size="xsmall">
+              {btnText}
+            </Button>
+          </ClipFade>
+        )}
+      </ClipWrapper>
+    );
+  }
+}
+
+export default ClippedBox;
+
+const ClipWrapper = styled('div', {
+  shouldForwardProp: prop =>
+    prop !== 'clipHeight' && prop !== 'isClipped' && prop !== 'isRevealed',
+})<State & {clipHeight: number}>`
+  position: relative;
+  margin-left: -${space(3)};
+  margin-right: -${space(3)};
+  padding: ${space(2)} ${space(3)} 0;
+  border-top: 1px solid ${p => p.theme.borderLighter};
+  transition: all 5s ease-in-out;
+
+  /* For "Show More" animation */
+  ${p => p.isRevealed && `max-height: 50000px`};
+
+  ${p =>
+    p.isClipped &&
+    `
+    max-height: ${p.clipHeight}px;
+    overflow: hidden;
+  `};
+
+  :first-of-type {
+    margin-top: -${space(2)};
+    border: 0;
+  }
+`;
+
+const Title = styled('h5')`
+  margin-bottom: ${space(2)};
+`;
+
+const ClipFade = styled('div')`
+  position: absolute;
+  left: 0;
+  right: 0;
+  bottom: 0;
+  padding: 40px 0 0;
+  background-image: linear-gradient(
+    180deg,
+    rgba(255, 255, 255, 0.15),
+    rgba(255, 255, 255, 1)
+  );
+  text-align: center;
+  border-bottom: ${space(1.5)} solid ${p => p.theme.white};
+`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame/frameContext.tsx b/src/sentry/static/sentry/app/components/events/interfaces/frame/frameContext.tsx
index 5f629082db..dfe8d91f74 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame/frameContext.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame/frameContext.tsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import styled from '@emotion/styled';
 import {css} from '@emotion/core';
 
 import {Frame, SentryAppComponent} from 'app/types';
@@ -12,6 +13,7 @@ import ErrorBoundary from 'app/components/errorBoundary';
 import {Assembly} from 'app/components/events/interfaces/assembly';
 import {parseAssembly} from 'app/components/events/interfaces/utils';
 import {OpenInContextLine} from 'app/components/events/interfaces/openInContextLine';
+import space from 'app/styles/space';
 
 type Props = {
   frame: Frame;
@@ -104,10 +106,10 @@ const FrameContext = ({
         })}
 
       {(hasContextRegisters || hasContextVars) && (
-        <ClippedBox clipHeight={100}>
+        <StyledClippedBox clipHeight={100}>
           {hasContextRegisters && <FrameRegisters data={registers} key="registers" />}
           {hasContextVars && <FrameVariables data={frame.vars} key="vars" />}
-        </ClippedBox>
+        </StyledClippedBox>
       )}
 
       {hasAssembly && (
@@ -118,3 +120,21 @@ const FrameContext = ({
 };
 
 export default FrameContext;
+
+const StyledClippedBox = styled(ClippedBox)`
+  margin-left: 0;
+  margin-right: 0;
+
+  &:first-of-type {
+    margin-top: 0;
+  }
+
+  :first-child {
+    margin-top: -${space(3)};
+  }
+
+  > *:first-child {
+    padding-top: 0;
+    border-top: none;
+  }
+`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/frameRegisters.tsx b/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/frameRegisters.tsx
index d24e16000b..c04a6e709c 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/frameRegisters.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/frameRegisters.tsx
@@ -40,11 +40,6 @@ const FrameRegisters = ({data}: Props) => {
 const RegistersWrapper = styled('div')`
   border-top: 1px solid ${p => p.theme.borderLight};
   padding-top: 10px;
-
-  .traceback .frame .box-clippable:first-child > & {
-    border-top: none;
-    padding-top: 0;
-  }
 `;
 
 const Registers = styled('div')`
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContentClippedBoxBodySection.tsx b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContentClippedBoxBodySection.tsx
index bc42fa4bd4..cf8c308047 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContentClippedBoxBodySection.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContentClippedBoxBodySection.tsx
@@ -68,7 +68,7 @@ const RichHttpContentClippedBoxBodySection = ({
   const content = getContent();
 
   return content ? (
-    <ClippedBox title={t('Body')} defaultCollapsed>
+    <ClippedBox title={t('Body')} defaultClipped>
       <ErrorBoundary mini>{content}</ErrorBoundary>
     </ClippedBox>
   ) : null;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContentClippedBoxKeyValueList.tsx b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContentClippedBoxKeyValueList.tsx
index 2fd90adf6f..add50891f8 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContentClippedBoxKeyValueList.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent/richHttpContentClippedBoxKeyValueList.tsx
@@ -50,7 +50,7 @@ const RichHttpContentClippedBoxKeyValueList = ({
   }
 
   return (
-    <ClippedBox title={title} defaultCollapsed={defaultCollapsed}>
+    <ClippedBox title={title} defaultClipped={defaultCollapsed}>
       <ErrorBoundary mini>{getContent(transformedData)}</ErrorBoundary>
     </ClippedBox>
   );
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/list/keyRow.tsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/list/keyRow.tsx
index ba660b190e..aeb3fb854f 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/list/keyRow.tsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/list/keyRow.tsx
@@ -74,7 +74,7 @@ class KeyRow extends React.Component<Props> {
     ];
 
     return (
-      <ClientKeyItemPanel>
+      <Panel>
         <PanelHeader hasButtons>
           <Title disabled={!data.isActive}>
             <PanelHeaderLink to={editUrl}>{data.label}</PanelHeaderLink>
@@ -92,26 +92,23 @@ class KeyRow extends React.Component<Props> {
           </Controls>
         </PanelHeader>
 
-        <ClippedBox clipHeight={300} defaultClipped btnText={t('Expand')}>
+        <StyledClippedBox clipHeight={300} defaultClipped btnText={t('Expand')}>
           <StyledPanelBody disabled={!data.isActive}>
             <ProjectKeyCredentials projectId={`${data.projectId}`} data={data} />
           </StyledPanelBody>
-        </ClippedBox>
-      </ClientKeyItemPanel>
+        </StyledClippedBox>
+      </Panel>
     );
   }
 }
 
 export default KeyRow;
 
-const ClientKeyItemPanel = styled(Panel)`
-  .box-clippable {
-    padding: 0;
-    margin: 0;
-
-    .clip-fade {
-      padding-bottom: 20px;
-    }
+const StyledClippedBox = styled(ClippedBox)`
+  padding: 0;
+  margin: 0;
+  > *:last-child {
+    padding-bottom: ${space(3)};
   }
 `;
 
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 3c6499b23f..fae63b4358 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -803,10 +803,6 @@ div.traceback > ul {
     margin: 0;
     border-top: 1px solid @trim;
 
-    .box-clippable .clip-fade {
-      bottom: 0;
-    }
-
     h3 {
       font-size: 22px;
     }
@@ -1026,19 +1022,6 @@ div.traceback > ul {
       }
     }
 
-    .box-clippable {
-      margin-left: 0;
-      margin-right: 0;
-
-      &:first-of-type {
-        margin-top: 0;
-      }
-
-      &:first-child {
-        margin-top: -20px;
-      }
-    }
-
     .tag-app {
       color: #aaa;
       font-size: 0.9em;
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 00de6735d7..dbf2c319f0 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -1001,45 +1001,6 @@ ul.faces {
   }
 }
 
-.box-clippable {
-  position: relative;
-  margin-left: -20px;
-  margin-right: -20px;
-  padding: 16px 20px 0;
-  border-top: 1px solid #f1f2f3;
-  .transition(all 5s ease-in-out);
-
-  &.revealed {
-    /* For "Show More" animation */
-    max-height: 50000px;
-  }
-
-  &:first-of-type {
-    margin-top: -16px;
-    border: 0;
-  }
-
-  h5 {
-    margin-bottom: 15px;
-  }
-
-  .clip-fade {
-    position: absolute;
-    left: 0;
-    right: 0;
-    bottom: 0;
-    padding: 40px 0 0;
-    #gradient > .vertical(rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 1));
-    text-align: center;
-    border-bottom: 10px solid #fff;
-  }
-
-  &.clipped {
-    max-height: 200px;
-    overflow: hidden;
-  }
-}
-
 /**
  * Global Messages
  * ============================================================================
diff --git a/tests/js/spec/components/events/interfaces/frame.spec.jsx b/tests/js/spec/components/events/interfaces/frame.spec.jsx
index 3aac6d98eb..63f1b75dea 100644
--- a/tests/js/spec/components/events/interfaces/frame.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/frame.spec.jsx
@@ -1,6 +1,6 @@
 import React from 'react';
 
-import {mount} from 'sentry-test/enzyme';
+import {mountWithTheme} from 'sentry-test/enzyme';
 
 import Frame from 'app/components/events/interfaces/frame/frame';
 
@@ -21,7 +21,7 @@ describe('Frame', function() {
     });
 
     it('should render the source map information as a HTML string', function() {
-      const frame = mount(<Frame data={data} components={[]} />);
+      const frame = mountWithTheme(<Frame data={data} components={[]} />);
 
       expect(frame.find('Tooltip').prop('title')).toMatchSnapshot();
     });
@@ -37,7 +37,7 @@ describe('Frame', function() {
         ],
       };
 
-      const frame = mount(<Frame data={data} components={[]} isExpanded />);
+      const frame = mountWithTheme(<Frame data={data} components={[]} isExpanded />);
       expect(frame.find('ContextLine')).toMatchSnapshot();
     });
 
@@ -63,7 +63,7 @@ describe('Frame', function() {
         rsp: '0x00007ffedfdff7c0',
       };
 
-      const frame = mount(
+      const frame = mountWithTheme(
         <Frame data={data} registers={registers} components={[]} isExpanded />
       );
       expect(frame.find('FrameRegisters').prop('data')).toEqual(registers);
@@ -73,7 +73,7 @@ describe('Frame', function() {
       data = {};
       const registers = {};
 
-      const frame = mount(
+      const frame = mountWithTheme(
         <Frame data={data} registers={registers} components={[]} isExpanded />
       );
       expect(frame.find('FrameRegisters')).toHaveLength(0);
@@ -93,7 +93,7 @@ describe('Frame', function() {
         },
       };
 
-      const frame = mount(<Frame data={data} components={[]} isExpanded />);
+      const frame = mountWithTheme(<Frame data={data} components={[]} isExpanded />);
       expect(frame.find('FrameVariables').prop('data')).toEqual(data.vars);
     });
   });
diff --git a/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx b/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
index ceec70e236..3fff8ad309 100644
--- a/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
@@ -1,6 +1,6 @@
 import React from 'react';
 
-import {mount, shallow} from 'sentry-test/enzyme';
+import {mountWithTheme, shallow} from 'sentry-test/enzyme';
 
 import RichHttpContent from 'app/components/events/interfaces/richHttpContent/richHttpContent';
 
@@ -19,7 +19,7 @@ describe('RichHttpContent', function() {
         env: {},
         inferredContentType: null,
       };
-      const wrapper = mount(<RichHttpContent data={data} />);
+      const wrapper = mountWithTheme(<RichHttpContent data={data} />);
       expect(
         wrapper.find('[data-test-id="rich-http-content-body-section-pre"]')
       ).toBeTruthy();
@@ -34,7 +34,7 @@ describe('RichHttpContent', function() {
         env: {},
         inferredContentType: 'application/x-www-form-urlencoded',
       };
-      const wrapper = mount(<RichHttpContent data={data} />);
+      const wrapper = mountWithTheme(<RichHttpContent data={data} />);
       expect(
         wrapper.find('[data-test-id="rich-http-content-body-key-value-list"]')
       ).toBeTruthy();
@@ -49,7 +49,7 @@ describe('RichHttpContent', function() {
         env: {},
         inferredContentType: 'application/json',
       };
-      const wrapper = mount(<RichHttpContent data={data} />);
+      const wrapper = mountWithTheme(<RichHttpContent data={data} />);
       expect(
         wrapper.find('[data-test-id="rich-http-content-body-context-data"]')
       ).toBeTruthy();
@@ -77,7 +77,7 @@ describe('RichHttpContent', function() {
         env: {},
       };
 
-      expect(() => mount(<RichHttpContent data={data} />)).not.toThrow();
+      expect(() => mountWithTheme(<RichHttpContent data={data} />)).not.toThrow();
     });
   });
 });
diff --git a/tests/js/spec/views/settings/projectKeys/list/index.spec.jsx b/tests/js/spec/views/settings/projectKeys/list/index.spec.jsx
index 7070f0de8a..b08778a260 100644
--- a/tests/js/spec/views/settings/projectKeys/list/index.spec.jsx
+++ b/tests/js/spec/views/settings/projectKeys/list/index.spec.jsx
@@ -60,9 +60,12 @@ describe('ProjectKeys', function() {
   });
 
   it('has clippable box', function() {
-    expect(wrapper.find('.clip-fade Button')).toHaveLength(1);
-    wrapper.find('.clip-fade Button').simulate('click');
-    expect(wrapper.find('.clip-fade Button')).toHaveLength(0);
+    const clipFade = wrapper.find('ClipFade');
+    expect(clipFade).toHaveLength(1);
+    const clipFadeButton = clipFade.find('button');
+    expect(clipFadeButton).toHaveLength(1);
+    clipFadeButton.simulate('click');
+    expect(wrapper.find('ClipFade button')).toHaveLength(0);
   });
 
   it('deletes key', function() {
