commit c9129c46d3fa6215a58d4bc68784f16bd6579a79
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Mar 12 18:38:20 2020 -0700

    feat(onboarding): Pass active user when updating local onboarding task (#17604)

diff --git a/src/sentry/static/sentry/app/actionCreators/onboardingTasks.tsx b/src/sentry/static/sentry/app/actionCreators/onboardingTasks.tsx
index 16e498b489..5d16d937fa 100644
--- a/src/sentry/static/sentry/app/actionCreators/onboardingTasks.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/onboardingTasks.tsx
@@ -1,6 +1,7 @@
 import {Client} from 'app/api';
 import {Organization, OnboardingTask} from 'app/types';
 import OrganizationActions from 'app/actions/organizationActions';
+import ConfigStore from 'app/stores/configStore';
 
 /**
  * Update an onboarding task.
@@ -20,15 +21,16 @@ export async function updateOnboardingTask(
     });
   }
 
-  const hasSkippedTask = organization.onboardingTasks.find(
+  const hasExistingTask = organization.onboardingTasks.find(
     task => task.task === updatedTask.task
   );
 
-  const onboardingTasks = hasSkippedTask
+  const user = ConfigStore.get('user');
+  const onboardingTasks = hasExistingTask
     ? organization.onboardingTasks.map(task =>
         task.task === updatedTask.task ? {...task, ...updatedTask} : task
       )
-    : [...organization.onboardingTasks, updatedTask];
+    : [...organization.onboardingTasks, {...updatedTask, user}];
 
   OrganizationActions.update({onboardingTasks});
 }
diff --git a/tests/js/spec/actionCreators/onboardingTasks.spec.jsx b/tests/js/spec/actionCreators/onboardingTasks.spec.jsx
new file mode 100644
index 0000000000..4d8f9fdfda
--- /dev/null
+++ b/tests/js/spec/actionCreators/onboardingTasks.spec.jsx
@@ -0,0 +1,96 @@
+import {updateOnboardingTask} from 'app/actionCreators/onboardingTasks';
+import OrganizationActions from 'app/actions/organizationActions';
+import ConfigStore from 'app/stores/configStore';
+
+describe('actionCreators/onboardingTasks', function() {
+  const api = new MockApiClient();
+  const user = ConfigStore.get('user');
+
+  jest.spyOn(OrganizationActions, 'update');
+
+  describe('updateOnboardingTask', function() {
+    it('Adds the task to the organization when task does not exists', async function() {
+      const detailedOrg = TestStubs.Organization({
+        teams: [TestStubs.Team()],
+        projects: [TestStubs.Project()],
+      });
+
+      // User is not passed into the update request
+      const testTask = {
+        task: 'create_project',
+        status: 'complete',
+      };
+
+      const mockUpdate = MockApiClient.addMockResponse({
+        url: `/organizations/${detailedOrg.slug}/onboarding-tasks/`,
+        method: 'POST',
+        body: testTask,
+      });
+
+      updateOnboardingTask(api, detailedOrg, testTask);
+      await tick();
+
+      expect(mockUpdate).toHaveBeenCalled();
+
+      expect(OrganizationActions.update).toHaveBeenCalledWith({
+        onboardingTasks: [{...testTask, user}],
+      });
+    });
+
+    it('Updates existing onboarding task', async function() {
+      const detailedOrg = TestStubs.Organization({
+        teams: [TestStubs.Team()],
+        projects: [TestStubs.Project()],
+        onboardingTasks: [{task: 'first_event', status: 'skipped'}],
+      });
+
+      const testTask = {
+        task: 'first_event',
+        status: 'complete',
+      };
+
+      MockApiClient.clearMockResponses();
+      const mockUpdate = MockApiClient.addMockResponse({
+        url: `/organizations/${detailedOrg.slug}/onboarding-tasks/`,
+        method: 'POST',
+        body: testTask,
+      });
+
+      updateOnboardingTask(api, detailedOrg, testTask);
+      await tick();
+
+      expect(mockUpdate).toHaveBeenCalled();
+
+      // NOTE: user is not passed as it is already associated to the existing
+      // onboarding task.
+      expect(OrganizationActions.update).toHaveBeenCalledWith({
+        onboardingTasks: [testTask],
+      });
+    });
+
+    it('Does not make API request without api object', async function() {
+      const detailedOrg = TestStubs.Organization({
+        teams: [TestStubs.Team()],
+        projects: [TestStubs.Project()],
+      });
+
+      const testTask = {
+        task: 'first_event',
+        status: 'complete',
+      };
+
+      const mockUpdate = MockApiClient.addMockResponse({
+        url: `/organizations/${detailedOrg.slug}/onboarding-tasks/`,
+        method: 'POST',
+      });
+
+      updateOnboardingTask(null, detailedOrg, testTask);
+      await tick();
+
+      expect(mockUpdate).not.toHaveBeenCalled();
+      expect(OrganizationActions.update).toHaveBeenCalledWith({
+        onboardingTasks: [{...testTask, user}],
+      });
+    });
+  });
+});
