commit 732a4065d201e55865d8d66a8fd123df624f273e
Author: Mark Story <mark@mark-story.com>
Date:   Fri Jan 11 10:39:29 2019 -0500

    feat(issues) Add filtering UX to organization issues (#11464)
    
    Add environment, project, tag, and text search to organization issues.
    Date searching is still broken as we haven't implemented the filters in
    the API endpoint yet.
    
    Refs APP-990

diff --git a/src/sentry/api/endpoints/organization_group_index.py b/src/sentry/api/endpoints/organization_group_index.py
index 95109623db..1a68aff567 100644
--- a/src/sentry/api/endpoints/organization_group_index.py
+++ b/src/sentry/api/endpoints/organization_group_index.py
@@ -54,12 +54,22 @@ class OrganizationGroupIndexEndpoint(OrganizationEventsEndpointBase):
         with other statuses send an new query value (i.e. ``?query=`` for all
         results).
 
-        The ``statsPeriod`` parameter can be used to select the timeline
+        The ``groupStatsPeriod`` parameter can be used to select the timeline
         stats which should be present. Possible values are: '' (disable),
         '24h', '14d'
 
+        The ``statsPeriod`` parameter can be used to select a date window starting
+        from now. Ex. ``14d``.
+
+        The ``start`` and ``end`` parameters can be used to select an absolute
+        date period to fetch issues from.
+
         :qparam string statsPeriod: an optional stat period (can be one of
                                     ``"24h"``, ``"14d"``, and ``""``).
+        :qparam string groupStatsPeriod: an optional stat period (can be one of
+                                    ``"24h"``, ``"14d"``, and ``""``).
+        :qparam string start:       Beginning date. You must also provide ``end``.
+        :qparam string end:         End date. You must also provide ``start``.
         :qparam bool shortIdLookup: if this is set to true then short IDs are
                                     looked up by this function as well.  This
                                     can cause the return value of the function
@@ -73,7 +83,7 @@ class OrganizationGroupIndexEndpoint(OrganizationEventsEndpointBase):
                                           issues belong to.
         :auth: required
         """
-        stats_period = request.GET.get('statsPeriod')
+        stats_period = request.GET.get('groupStatsPeriod')
         if stats_period not in (None, '', '24h', '14d'):
             return Response({"detail": ERR_INVALID_STATS_PERIOD}, status=400)
         elif stats_period is None:
diff --git a/src/sentry/static/sentry/app/views/organizationStream/container.jsx b/src/sentry/static/sentry/app/views/organizationStream/container.jsx
index 84a44ac979..8b53198ab9 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/container.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/container.jsx
@@ -1,8 +1,7 @@
 import {withRouter} from 'react-router';
 import React from 'react';
 
-import {HeaderTitle, PageContent, PageHeader} from 'app/styles/organization';
-import {t} from 'app/locale';
+import {PageContent} from 'app/styles/organization';
 import Feature from 'app/components/acl/feature';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import SentryTypes from 'app/sentryTypes';
@@ -20,13 +19,7 @@ class OrganizationStreamContainer extends React.Component {
       <Feature features={['sentry10']} renderDisabled>
         <GlobalSelectionHeader organization={organization} />
 
-        <PageContent>
-          <PageHeader>
-            <HeaderTitle>{t('Issues')}</HeaderTitle>
-          </PageHeader>
-
-          {children}
-        </PageContent>
+        <PageContent>{children}</PageContent>
       </Feature>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
index 57a1973cbf..97927ee444 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
@@ -1,5 +1,5 @@
 import {browserHistory} from 'react-router';
-import {isEqual} from 'lodash';
+import {omit, pickBy} from 'lodash';
 import Cookies from 'js-cookie';
 import React from 'react';
 import Reflux from 'reflux';
@@ -10,14 +10,19 @@ import qs from 'query-string';
 import {Panel, PanelBody} from 'app/components/panels';
 import {analytics} from 'app/utils/analytics';
 import {t, tct} from 'app/locale';
+import {fetchTags} from 'app/actionCreators/tags';
 import ApiMixin from 'app/mixins/apiMixin';
 import ConfigStore from 'app/stores/configStore';
+import GlobalSelectionStore from 'app/stores/globalSelectionStore';
 import GroupStore from 'app/stores/groupStore';
+import TagStore from 'app/stores/tagStore';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import Pagination from 'app/components/pagination';
 import SentryTypes from 'app/sentryTypes';
 import StreamGroup from 'app/components/stream/group';
+import StreamFilters from 'app/views/stream/filters';
+import StreamSidebar from 'app/views/stream/sidebar';
 import parseApiError from 'app/utils/parseApiError';
 import parseLinkHeader from 'app/utils/parseLinkHeader';
 import utils from 'app/utils';
@@ -35,7 +40,12 @@ const OrganizationStream = createReactClass({
     organization: SentryTypes.Organization,
   },
 
-  mixins: [Reflux.listenTo(GroupStore, 'onGroupChange'), ApiMixin],
+  mixins: [
+    Reflux.listenTo(GlobalSelectionStore, 'onSelectionChange'),
+    Reflux.listenTo(GroupStore, 'onGroupChange'),
+    Reflux.listenTo(TagStore, 'onTagsChange'),
+    ApiMixin,
+  ],
 
   getInitialState() {
     let realtimeActiveCookie = Cookies.get('realtimeActive');
@@ -47,8 +57,8 @@ const OrganizationStream = createReactClass({
     let currentQuery = this.props.location.query || {};
     let sort = 'sort' in currentQuery ? currentQuery.sort : DEFAULT_SORT;
 
-    let statsPeriod = STATS_PERIODS.has(currentQuery.statsPeriod)
-      ? currentQuery.statsPeriod
+    let groupStatsPeriod = STATS_PERIODS.has(currentQuery.groupStatsPeriod)
+      ? currentQuery.groupStatsPeriod
       : DEFAULT_STATS_PERIOD;
 
     return {
@@ -58,17 +68,19 @@ const OrganizationStream = createReactClass({
       selectAllActive: false,
       multiSelected: false,
       anySelected: false,
-      statsPeriod,
+      groupStatsPeriod,
       realtimeActive,
       pageLinks: '',
       queryCount: null,
       error: false,
       query: currentQuery.query || '',
       sort,
-      tagsLoading: true,
-      tags: [],
+      selection: GlobalSelectionStore.get(),
       isSidebarVisible: false,
+      savedSearchList: [],
       processingIssues: null,
+      tagsLoading: true,
+      tags: TagStore.getAllTags(),
     };
   },
 
@@ -80,19 +92,7 @@ const OrganizationStream = createReactClass({
 
     if (!this.state.loading) {
       this.fetchData();
-    }
-  },
-
-  componentWillReceiveProps(nextProps) {
-    // We are using qs.parse with location.search since this.props.location.query
-    // returns the same value as nextProps.location.query
-    let currentSearchTerm = qs.parse(this.props.location.search);
-    let nextSearchTerm = qs.parse(nextProps.location.search);
-
-    let searchTermChanged = !isEqual(currentSearchTerm, nextSearchTerm);
-
-    if (searchTermChanged) {
-      this.setState(this.getQueryState(nextProps), this.fetchData);
+      fetchTags(this.props.organization.slug);
     }
   },
 
@@ -112,33 +112,33 @@ const OrganizationStream = createReactClass({
     GroupStore.reset();
   },
 
-  getAccess() {
-    return new Set(this.props.organization.access);
-  },
+  getQueryParams() {
+    let selection = this.state.selection;
+    let params = {
+      project: selection.projects,
+      environment: selection.environments,
+      query: this.state.query,
+      ...selection.datetime,
+    };
+    if (selection.datetime.period) {
+      delete params.period;
+      params.statsPeriod = selection.datetime.period;
+    }
 
-  getQueryState(props) {
-    let currentQuery = props.location.query || {};
-    let hasQuery = 'query' in currentQuery;
-    let sort = 'sort' in currentQuery ? currentQuery.sort : DEFAULT_SORT;
-    let statsPeriod = STATS_PERIODS.has(currentQuery.statsPeriod)
-      ? currentQuery.statsPeriod
-      : DEFAULT_STATS_PERIOD;
+    if (this.state.sort !== DEFAULT_SORT) {
+      params.sort = this.state.sort;
+    }
 
-    let newState = {
-      sort,
-      statsPeriod,
-      query: hasQuery ? currentQuery.query : '',
-      isDefaultSearch: false,
-    };
-    newState.loading = false;
+    if (this.state.groupStatsPeriod !== DEFAULT_STATS_PERIOD) {
+      params.groupStatsPeriod = this.state.groupStatsPeriod;
+    }
 
-    return newState;
+    // only include defined values.
+    return pickBy(params, v => utils.defined(v));
   },
 
-  hasQuery(props) {
-    props = props || this.props;
-    let currentQuery = props.location.query || {};
-    return 'query' in currentQuery;
+  getAccess() {
+    return new Set(this.props.organization.access);
   },
 
   fetchData() {
@@ -151,15 +151,10 @@ const OrganizationStream = createReactClass({
     });
 
     let url = this.getGroupListEndpoint();
-    let query = qs.parse(this.props.location.query);
-
     let requestParams = {
-      ...query,
+      ...this.getQueryParams(),
       limit: MAX_ITEMS,
-      sort: this.state.sort,
-      statsPeriod: this.state.statsPeriod,
       shortIdLookup: '1',
-      environment: this.state.environment,
     };
 
     let currentQuery = this.props.location.query || {};
@@ -175,7 +170,7 @@ const OrganizationStream = createReactClass({
 
     this.lastRequest = this.api.request(url, {
       method: 'GET',
-      data: requestParams,
+      data: qs.stringify(requestParams),
       success: (data, ignore, jqXHR) => {
         // if this is a direct hit, we redirect to the intended result directly.
         // we have to use the project slug from the result data instead of the
@@ -201,7 +196,6 @@ const OrganizationStream = createReactClass({
         this.setState({
           error: false,
           loading: false,
-          query,
           queryCount:
             typeof queryCount !== 'undefined' ? parseInt(queryCount, 10) || 0 : 0,
           queryMaxCount:
@@ -237,7 +231,7 @@ const OrganizationStream = createReactClass({
   getGroupListEndpoint() {
     let params = this.props.params;
 
-    return '/organizations/' + params.orgId + '/issues/';
+    return `/organizations/${params.orgId}/issues/`;
   },
 
   onRealtimeChange(realtime) {
@@ -248,15 +242,13 @@ const OrganizationStream = createReactClass({
   },
 
   onSelectStatsPeriod(period) {
-    if (period != this.state.statsPeriod) {
+    if (period != this.state.groupStatsPeriod) {
       // TODO(dcramer): all charts should now suggest "loading"
       this.setState(
         {
-          statsPeriod: period,
+          groupStatsPeriod: period,
         },
-        function() {
-          this.transitionTo();
-        }
+        this.transitionTo
       );
     }
   },
@@ -279,6 +271,10 @@ const OrganizationStream = createReactClass({
     }
   },
 
+  onSelectionChange(selection) {
+    this.setState({selection}, this.transitionTo);
+  },
+
   onSearch(query) {
     if (query === this.state.query) {
       // if query is the same, just re-fetch data
@@ -302,6 +298,14 @@ const OrganizationStream = createReactClass({
     );
   },
 
+  onTagsChange(tags) {
+    // Exclude the environment tag as it lives in global search.
+    this.setState({
+      tags: omit(tags, 'environment'),
+      tagsLoading: false,
+    });
+  },
+
   onSidebarToggle() {
     let {organization} = this.props;
     this.setState({
@@ -323,32 +327,21 @@ const OrganizationStream = createReactClass({
   },
 
   transitionTo() {
-    let queryParams = {};
-
-    if (this.props.location.query.environment) {
-      queryParams.environment = this.props.location.query.environment;
-    }
-
-    queryParams.query = this.state.query;
-
-    if (this.state.sort !== DEFAULT_SORT) {
-      queryParams.sort = this.state.sort;
-    }
-
-    if (this.state.statsPeriod !== DEFAULT_STATS_PERIOD) {
-      queryParams.statsPeriod = this.state.statsPeriod;
-    }
-
-    let params = this.props.params;
+    let query = this.getQueryParams();
+    let {organization} = this.props;
 
-    let path = `/${params.orgId}/issues/`;
+    let path = `/organizations/${organization.slug}/issues/`;
     browserHistory.push({
       pathname: path,
-      query: queryParams,
+      query,
     });
+
+    // After transitioning reload data. This is simpler and less
+    // error prone than examining router state in componentWillReceiveProps
+    this.fetchData();
   },
 
-  renderGroupNodes(ids, statsPeriod) {
+  renderGroupNodes(ids, groupStatsPeriod) {
     // Restrict this guide to only show for new users (joined<30 days) and add guide anhor only to the first issue
     let userDateJoined = new Date(ConfigStore.get('user').dateJoined);
     let dateCutoff = new Date();
@@ -364,7 +357,7 @@ const OrganizationStream = createReactClass({
           key={id}
           id={id}
           orgId={orgId}
-          statsPeriod={statsPeriod}
+          statsPeriod={groupStatsPeriod}
           query={this.state.query}
           hasGuideAnchor={hasGuideAnchor}
         />
@@ -402,13 +395,17 @@ const OrganizationStream = createReactClass({
     } else if (this.state.error) {
       body = <LoadingError message={this.state.error} onRetry={this.fetchData} />;
     } else if (this.state.groupIds.length > 0) {
-      body = this.renderGroupNodes(this.state.groupIds, this.state.statsPeriod);
+      body = this.renderGroupNodes(this.state.groupIds, this.state.groupStatsPeriod);
     } else {
       body = this.renderEmpty();
     }
     return body;
   },
 
+  onSavedSearchCreate() {
+    // TODO implement
+  },
+
   render() {
     // global loading
     if (this.state.loading) {
@@ -453,7 +450,7 @@ const OrganizationStream = createReactClass({
               onSelectStatsPeriod={this.onSelectStatsPeriod}
               onRealtimeChange={this.onRealtimeChange}
               realtimeActive={this.state.realtimeActive}
-              statsPeriod={this.state.statsPeriod}
+              statsPeriod={this.state.groupStatsPeriod}
               groupIds={this.state.groupIds}
               allResultsVisible={this.allResultsVisible()}
             />
@@ -474,9 +471,7 @@ const OrganizationStream = createReactClass({
 });
 
 // Placeholder components to keep pull requests manageable.
-const StreamFilters = props => <p>Stream filters are coming soon</p>;
 const StreamActions = props => <p>Stream actions are coming soon</p>;
-const StreamSidebar = props => <p>Stream sidebar is coming soon</p>;
 
 export default withOrganization(OrganizationStream);
 export {OrganizationStream};
diff --git a/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx b/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
index 5b604f9e78..57654fc1a0 100644
--- a/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
+++ b/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
@@ -17,7 +17,7 @@ const SaveSearchButton = createReactClass({
 
   propTypes: {
     orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
+    projectId: PropTypes.string,
     access: PropTypes.object.isRequired,
     query: PropTypes.string.isRequired,
     disabled: PropTypes.bool,
@@ -194,7 +194,7 @@ const SavedSearchSelector = createReactClass({
 
   propTypes: {
     orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
+    projectId: PropTypes.string,
     searchId: PropTypes.string,
     access: PropTypes.object.isRequired,
     savedSearchList: PropTypes.array.isRequired,
@@ -219,6 +219,8 @@ const SavedSearchSelector = createReactClass({
     let children = this.props.savedSearchList.map(search => {
       // TODO(dcramer): we want these to link directly to the saved
       // search ID, and pass that into the backend (probably)
+
+      // TODO(mark) Make links org/project aware.
       return (
         <MenuItem to={`/${orgId}/${projectId}/searches/${search.id}/`} key={search.id}>
           <strong>{search.name}</strong>
diff --git a/src/sentry/static/sentry/app/views/stream/sidebar.jsx b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
index 76f96fd750..146ceeba59 100644
--- a/src/sentry/static/sentry/app/views/stream/sidebar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
@@ -14,7 +14,7 @@ const StreamSidebar = createReactClass({
 
   propTypes: {
     orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
+    projectId: PropTypes.string,
 
     tags: PropTypes.object.isRequired,
     query: PropTypes.string,
diff --git a/tests/snuba/api/endpoints/test_organization_group_index.py b/tests/snuba/api/endpoints/test_organization_group_index.py
index 228e90ced4..de259d81bf 100644
--- a/tests/snuba/api/endpoints/test_organization_group_index.py
+++ b/tests/snuba/api/endpoints/test_organization_group_index.py
@@ -110,7 +110,7 @@ class GroupListTest(APITestCase, SnubaTestCase):
 
     def test_stats_period(self):
         # TODO(dcramer): this test really only checks if validation happens
-        # on statsPeriod
+        # on groupStatsPeriod
         now = timezone.now()
         self.create_group(
             checksum='a' * 32,
@@ -123,16 +123,16 @@ class GroupListTest(APITestCase, SnubaTestCase):
 
         self.login_as(user=self.user)
 
-        response = self.client.get(u'{}?statsPeriod=24h'.format(self.path), format='json')
+        response = self.client.get(u'{}?groupStatsPeriod=24h'.format(self.path), format='json')
         assert response.status_code == 200
 
-        response = self.client.get(u'{}?statsPeriod=14d'.format(self.path), format='json')
+        response = self.client.get(u'{}?groupStatsPeriod=14d'.format(self.path), format='json')
         assert response.status_code == 200
 
-        response = self.client.get(u'{}?statsPeriod='.format(self.path), format='json')
+        response = self.client.get(u'{}?groupStatsPeriod='.format(self.path), format='json')
         assert response.status_code == 200
 
-        response = self.client.get(u'{}?statsPeriod=48h'.format(self.path), format='json')
+        response = self.client.get(u'{}?groupStatsPeriod=48h'.format(self.path), format='json')
         assert response.status_code == 400
 
     def test_environment(self):
