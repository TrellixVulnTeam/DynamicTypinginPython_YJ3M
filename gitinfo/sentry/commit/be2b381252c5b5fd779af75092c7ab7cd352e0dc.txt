commit be2b381252c5b5fd779af75092c7ab7cd352e0dc
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Mon Nov 5 14:10:27 2018 -0800

    feat(api): Add support for multiple envs to org health stats (#10410)

diff --git a/src/sentry/api/endpoints/organization_health.py b/src/sentry/api/endpoints/organization_health.py
index c521bd0c8a..692aaf0e68 100644
--- a/src/sentry/api/endpoints/organization_health.py
+++ b/src/sentry/api/endpoints/organization_health.py
@@ -225,6 +225,34 @@ class OrganizationHealthTopEndpoint(OrganizationHealthEndpointBase):
 
 class OrganizationHealthGraphEndpoint(OrganizationHealthEndpointBase):
 
+    def get_environments(self, request, organization):
+        requested_environments = set(request.GET.getlist('environment'))
+
+        if not requested_environments:
+            return []
+
+        environments = set(
+            Environment.objects.filter(
+                organization_id=organization.id,
+                name__in=requested_environments,
+            ).values_list('name', flat=True),
+        )
+
+        if requested_environments != environments:
+            raise ResourceDoesNotExist
+
+        conditions = []
+
+        # the "no environment" environment is null in snuba
+        if '' in environments:
+            environments.remove('')
+            conditions.append(['tags[environment]', 'IS NULL', None])
+
+        if environments:
+            conditions.append(['tags[environment]', 'IN', list(environments)])
+
+        return [conditions]
+
     def get(self, request, organization):
         """
         Returns a time series view over statsPeriod over interval.
@@ -250,7 +278,7 @@ class OrganizationHealthGraphEndpoint(OrganizationHealthEndpointBase):
         if not project_ids:
             return self.empty()
 
-        environment = self.get_environment(request, organization)
+        environment_conditions = self.get_environments(request, organization)
         query_condition = self.get_query_condition(request, organization)
 
         rollup = int(interval.total_seconds())
@@ -263,10 +291,8 @@ class OrganizationHealthGraphEndpoint(OrganizationHealthEndpointBase):
             aggregations=[
                 ('count()', '', 'count'),
             ],
-            filter_keys={
-                'project_id': project_ids,
-            },
-            conditions=lookup.conditions + query_condition + environment,
+            filter_keys={'project_id': project_ids},
+            conditions=lookup.conditions + query_condition + environment_conditions,
             groupby=['time'] + lookup.columns,
             orderby='time',
         )
diff --git a/tests/snuba/api/endpoints/test_organization_health.py b/tests/snuba/api/endpoints/test_organization_health.py
index bec9e6b838..d8e967f619 100644
--- a/tests/snuba/api/endpoints/test_organization_health.py
+++ b/tests/snuba/api/endpoints/test_organization_health.py
@@ -54,3 +54,107 @@ class OrganizationHealthTest(APITestCase, SnubaTestCase):
 
         assert response.status_code == 200, response.content
         assert response.data['totals']['count'] == 1
+
+    def test_environments(self):
+        user = self.create_user()
+        org = self.create_organization()
+        team = self.create_team(organization=org)
+        self.create_member(organization=org, user=user, teams=[team])
+
+        self.login_as(user=user)
+
+        project = self.create_project(organization=org, teams=[team])
+        environment = self.create_environment(project=project, name='production')
+        environment2 = self.create_environment(project=project)
+        environment3 = self.create_environment(project=project)
+        no_env = self.create_environment(project=project, name='')
+        group = self.create_group(project=project)
+
+        self.create_event(
+            'a' * 32,
+            group=group,
+            datetime=self.min_ago,
+            tags={
+                'environment': environment.name,
+                'sentry:user': 'id:%s' % (self.user.id,),
+            },
+        )
+        self.create_event(
+            'b' * 32,
+            group=group,
+            datetime=self.min_ago,
+            tags={
+                'environment': environment2.name,
+                'sentry:user': 'id:%s' % (self.user.id,),
+            },
+        )
+        self.create_event(
+            'c' * 32,
+            group=group,
+            datetime=self.min_ago,
+            tags={
+                'environment': environment3.name,
+                'sentry:user': 'id:%s' % (self.user.id,),
+            },
+        )
+        self.create_event(
+            'd' * 32,
+            group=group,
+            datetime=self.min_ago,
+            tags={
+                'environment': None,
+                'sentry:user': 'id:%s' % (self.user.id,),
+            },
+        )
+
+        base_url = reverse(
+            'sentry-api-0-organization-health-graph',
+            kwargs={
+                'organization_slug': org.slug,
+            }
+        )
+
+        now = timezone.now()
+
+        # test multiple environments
+        url = '%s?%s' % (base_url, urlencode((
+            ('start', (now - timedelta(hours=2)).strftime('%Y-%m-%dT%H:%M:%S')),
+            ('end', now.strftime('%Y-%m-%dT%H:%M:%S')),
+            ('tag', 'user'),
+            ('environment', environment2.name),
+            ('environment', environment.name),
+        )))
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['totals']['count'] == 2
+
+        # test 'no environment' environment
+        url = '%s?%s' % (base_url, urlencode((
+            ('start', (now - timedelta(hours=2)).strftime('%Y-%m-%dT%H:%M:%S')),
+            ('end', now.strftime('%Y-%m-%dT%H:%M:%S')),
+            ('tag', 'user'),
+            ('environment', no_env.name),
+        )))
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['totals']['count'] == 1
+
+        # test 'no environment' environment with named envs
+        url = '%s?%s' % (base_url, urlencode((
+            ('start', (now - timedelta(hours=2)).strftime('%Y-%m-%dT%H:%M:%S')),
+            ('end', now.strftime('%Y-%m-%dT%H:%M:%S')),
+            ('tag', 'user'),
+            ('environment', no_env.name),
+            ('environment', environment.name),
+        )))
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['totals']['count'] == 2
+
+        # test nonexistent environment
+        url = '%s?environment=notanenvironment&tag=user' % (base_url,)
+        response = self.client.get(url, format='json')
+        assert response.status_code == 404
