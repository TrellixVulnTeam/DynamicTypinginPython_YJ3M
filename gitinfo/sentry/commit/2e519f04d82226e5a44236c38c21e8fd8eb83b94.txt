commit 2e519f04d82226e5a44236c38c21e8fd8eb83b94
Author: evanh <evanh@users.noreply.github.com>
Date:   Wed Jan 29 11:08:48 2020 -0500

    fix(discoverv2) Check projects in facet map for accessibility (#16666)
    
    Some events have a 'project' tag, which overlaps with a manual
    tag we create in the code. Filter out that tag so we can still build
    the project tag ourselves. Also filter out any odd projects that
    are mismatched.

diff --git a/src/sentry/api/endpoints/organization_events_facets.py b/src/sentry/api/endpoints/organization_events_facets.py
index fc411b528f..c5e5361ffd 100644
--- a/src/sentry/api/endpoints/organization_events_facets.py
+++ b/src/sentry/api/endpoints/organization_events_facets.py
@@ -47,11 +47,17 @@ class OrganizationEventsFacetsEndpoint(OrganizationEventsEndpointBase):
                 }
             )
         if "project" in resp:
-            # Replace project ids with slugs as that is what we generally expose to users.
+            # Replace project ids with slugs as that is what we generally expose to users
+            # and filter out projects that the user doesn't have access too.
             projects = {p.id: p.slug for p in self.get_projects(request, organization)}
+            filtered_values = []
             for v in resp["project"]["topValues"]:
-                name = projects[v["value"]]
-                v.update({"name": name})
+                if v["value"] in projects:
+                    name = projects[v["value"]]
+                    v.update({"name": name})
+                    filtered_values.append(v)
+
+            resp["project"]["topValues"] = filtered_values
 
         return Response(resp.values())
 
diff --git a/src/sentry/snuba/discover.py b/src/sentry/snuba/discover.py
index a76b28e271..a520e90a9f 100644
--- a/src/sentry/snuba/discover.py
+++ b/src/sentry/snuba/discover.py
@@ -491,7 +491,7 @@ def get_facets(query, params, limit=10, referrer=None):
     snuba_args, translated_columns = resolve_discover_aliases(snuba_args)
 
     # Exclude tracing tags as they are noisy and generally not helpful.
-    excluded_tags = ["tags_key", "NOT IN", ["trace", "trace.ctx", "trace.span"]]
+    excluded_tags = ["tags_key", "NOT IN", ["trace", "trace.ctx", "trace.span", "project"]]
 
     # Sampling keys for multi-project results as we don't need accuracy
     # with that much data.
diff --git a/tests/snuba/api/endpoints/test_organization_events_facets.py b/tests/snuba/api/endpoints/test_organization_events_facets.py
index e78402d245..1c3b12ba9c 100644
--- a/tests/snuba/api/endpoints/test_organization_events_facets.py
+++ b/tests/snuba/api/endpoints/test_organization_events_facets.py
@@ -310,6 +310,60 @@ class OrganizationEventsFacetsEndpointTest(SnubaTestCase, APITestCase):
         ]
         self.assert_facet(response, "project", expected)
 
+    def test_project_key_with_project_tag(self):
+        self.organization.flags.allow_joinleave = False
+        self.organization.save()
+
+        member_user = self.create_user()
+        team = self.create_team(members=[member_user])
+        private_project1 = self.create_project(organization=self.organization, teams=[team])
+        private_project2 = self.create_project(organization=self.organization, teams=[team])
+        self.login_as(member_user)
+
+        self.store_event(
+            data={
+                "event_id": uuid4().hex,
+                "timestamp": self.min_ago_iso,
+                "tags": {"color": "green", "project": "%d" % private_project1.id},
+            },
+            project_id=self.project.id,
+        )
+        self.store_event(
+            data={
+                "event_id": uuid4().hex,
+                "timestamp": self.min_ago_iso,
+                "tags": {"number": "one", "project": "%d" % private_project1.id},
+            },
+            project_id=private_project1.id,
+        )
+        self.store_event(
+            data={
+                "event_id": uuid4().hex,
+                "timestamp": self.min_ago_iso,
+                "tags": {"color": "green"},
+            },
+            project_id=private_project1.id,
+        )
+        self.store_event(
+            data={"event_id": uuid4().hex, "timestamp": self.min_ago_iso, "tags": {"color": "red"}},
+            project_id=private_project2.id,
+        )
+        self.store_event(
+            data={"event_id": uuid4().hex, "timestamp": self.min_ago_iso, "tags": {"color": "red"}},
+            project_id=private_project2.id,
+        )
+
+        with self.feature(self.feature_list):
+            response = self.client.get(self.url, format="json")
+
+        assert response.status_code == 200, response.content
+        expected = [
+            {"count": 2, "name": private_project1.slug, "value": private_project1.id},
+            {"count": 2, "name": private_project2.slug, "value": private_project2.id},
+        ]
+
+        self.assert_facet(response, "project", expected)
+
     def test_malformed_query(self):
         self.store_event(data={"event_id": uuid4().hex}, project_id=self.project.id)
         self.store_event(data={"event_id": uuid4().hex}, project_id=self.project2.id)
