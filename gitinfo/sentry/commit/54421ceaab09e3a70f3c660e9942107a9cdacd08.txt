commit 54421ceaab09e3a70f3c660e9942107a9cdacd08
Author: David Cramer <dcramer@gmail.com>
Date:   Thu May 2 17:28:49 2013 -0700

    Move user tracking into the queue

diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index c1ef95245a..05e904d998 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -569,7 +569,12 @@ class GroupManager(BaseManager, ChartMixin):
                 transaction.rollback_unless_managed(using=group._state.db)
                 logger.exception(u'Error sending regression signal: %s', e)
 
-        send_group_processors(group=group, event=event, is_new=is_new, is_sample=is_sample)
+        send_group_processors(
+            group=group,
+            event=event,
+            is_new=is_new,
+            is_sample=is_sample
+        )
 
         return event
 
@@ -670,10 +675,6 @@ class GroupManager(BaseManager, ChartMixin):
             'date': normalized_datetime,
         })
 
-        user_ident = event.user_ident
-        if user_ident:
-            self.record_affected_user(group, user_ident, event.data.get('sentry.interfaces.User'))
-
         try:
             self.add_tags(group, tags)
         except Exception, e:
@@ -681,48 +682,6 @@ class GroupManager(BaseManager, ChartMixin):
 
         return group, is_new, is_sample
 
-    def record_affected_user(self, group, user_ident, data=None):
-        from sentry.models import TrackedUser, AffectedUserByGroup
-
-        project = group.project
-        date = group.last_seen
-
-        if data:
-            email = data.get('email')
-        else:
-            email = None
-
-        # TODO: we should be able to chain the affected user update so that tracked
-        # user gets updated serially
-        tuser = TrackedUser.objects.get_or_create(
-            project=project,
-            ident=user_ident,
-            defaults={
-                'email': email,
-                'data': data,
-            }
-        )[0]
-
-        app.buffer.incr(TrackedUser, {
-            'num_events': 1,
-        }, {
-            'id': tuser.id,
-        }, {
-            'last_seen': date,
-            'email': email,
-            'data': data,
-        })
-
-        app.buffer.incr(AffectedUserByGroup, {
-            'times_seen': 1,
-        }, {
-            'group': group,
-            'project': project,
-            'tuser': tuser,
-        }, {
-            'last_seen': date,
-        })
-
     def add_tags(self, group, tags):
         from sentry.models import TagValue, GroupTag
 
diff --git a/src/sentry/processors/base.py b/src/sentry/processors/base.py
index e431da59d3..06d06e9575 100644
--- a/src/sentry/processors/base.py
+++ b/src/sentry/processors/base.py
@@ -12,5 +12,5 @@ from sentry.tasks.post_process import post_process_group
 __all__ = ('send_group_processors',)
 
 
-def send_group_processors(group, **kwargs):
-    post_process_group.delay(group=group, **kwargs)
+def send_group_processors(group, event, **kwargs):
+    post_process_group.delay(group=group, event=event, **kwargs)
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index eb051198cb..8f4b5164dd 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -12,12 +12,15 @@ from sentry.utils.safe import safe_execute
 
 
 @task(name='sentry.tasks.post_process.post_process_group', queue='triggers')
-def post_process_group(group, **kwargs):
+def post_process_group(group, event, **kwargs):
     """
     Fires post processing hooks for a group.
     """
     for plugin in plugins.for_project(group.project):
-        plugin_post_process_group.delay(plugin.slug, group=group, **kwargs)
+        plugin_post_process_group.delay(
+            plugin.slug, group=group, event=event, **kwargs)
+
+    record_affected_user.delay(group=group, event=event)
 
 
 @task(
@@ -29,3 +32,59 @@ def plugin_post_process_group(plugin_slug, group, **kwargs):
     """
     plugin = plugins.get(plugin_slug)
     safe_execute(plugin.post_process, group=group, **kwargs)
+
+
+@task(
+    name='sentry.tasks.post_process.record_affected_user',
+    queue='triggers')
+def record_affected_user(group, event, **kwargs):
+    from sentry import app
+    from sentry.models import TrackedUser, AffectedUserByGroup
+
+    user_ident = event.user_ident
+    if not user_ident:
+        return
+
+    data = event.data.get('sentry.interfaces.User')
+
+    project = group.project
+    date = group.last_seen
+
+    if data:
+        email = data.get('email')
+    else:
+        email = None
+
+    # TODO: we should be able to chain the affected user update so that tracked
+    # user gets updated serially
+    tuser, created = TrackedUser.objects.get_or_create(
+        project=project,
+        ident=user_ident,
+        defaults={
+            'email': email,
+            'data': data,
+            'num_events': 1,
+            'last_seen': date,
+        }
+    )
+
+    if not created:
+        app.buffer.incr(TrackedUser, {
+            'num_events': 1,
+        }, {
+            'id': tuser.id,
+        }, {
+            'last_seen': date,
+            'email': email,
+            'data': data,
+        })
+
+    app.buffer.incr(AffectedUserByGroup, {
+        'times_seen': 1,
+    }, {
+        'group': group,
+        'project': project,
+        'tuser': tuser,
+    }, {
+        'last_seen': date,
+    })
diff --git a/src/sentry/utils/safe.py b/src/sentry/utils/safe.py
index aed1af7996..acdacf274b 100644
--- a/src/sentry/utils/safe.py
+++ b/src/sentry/utils/safe.py
@@ -20,7 +20,7 @@ def safe_execute(func, *args, **kwargs):
             cls = func.im_class
         else:
             cls = func.__class__
-        logger = logging.getLogger('sentry.plugins')
+        logger = logging.getLogger('sentry.errors.plugins')
         logger.error('Error processing %r on %r: %s', func.__name__, cls.__name__, e, extra={
             'func_module': cls.__module__,
             'func_args': args,
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 14fac9eb27..0ce27f6f9d 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -59,32 +59,6 @@ class SentryManagerTest(TestCase):
         self.assertEquals(event.message, 'foo')
         self.assertEquals(event.project_id, 1)
 
-    def test_records_users_seen(self):
-        # TODO: we could lower the level of this test by just testing our signal receiver's logic
-        event = Group.objects.from_kwargs(1, message='foo', **{
-            'sentry.interfaces.User': {
-                'email': 'foo@example.com',
-            },
-        })
-        group = Group.objects.get(id=event.group_id)
-        assert group.users_seen == 1
-
-        event = Group.objects.from_kwargs(1, message='foo', **{
-            'sentry.interfaces.User': {
-                'email': 'foo@example.com',
-            },
-        })
-        group = Group.objects.get(id=event.group_id)
-        assert group.users_seen == 1
-
-        event = Group.objects.from_kwargs(1, message='foo', **{
-            'sentry.interfaces.User': {
-                'email': 'bar@example.com',
-            },
-        })
-        group = Group.objects.get(id=event.group_id)
-        assert group.users_seen == 2
-
     def test_valid_timestamp_without_tz(self):
         # TODO: this doesnt error, but it will throw a warning. What should we do?
         with self.Settings(USE_TZ=True):
diff --git a/tests/sentry/tasks/post_process/__init__.py b/tests/sentry/tasks/post_process/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
new file mode 100644
index 0000000000..eb9c52f1c5
--- /dev/null
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -0,0 +1,38 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.models import Group
+from sentry.testutils import TestCase
+from sentry.tasks.post_process import record_affected_user
+
+
+class SentryManagerTest(TestCase):
+    def test_records_users_seen(self):
+        # TODO: we could lower the level of this test by just testing our signal receiver's logic
+        event = Group.objects.from_kwargs(1, message='foo', **{
+            'sentry.interfaces.User': {
+                'email': 'foo@example.com',
+            },
+        })
+
+        record_affected_user(group=event.group, event=event)
+
+        group = Group.objects.get(id=event.group_id)
+        assert group.users_seen == 1
+
+        event = Group.objects.from_kwargs(1, message='foo', **{
+            'sentry.interfaces.User': {
+                'email': 'foo@example.com',
+            },
+        })
+        group = Group.objects.get(id=event.group_id)
+        assert group.users_seen == 1
+
+        event = Group.objects.from_kwargs(1, message='foo', **{
+            'sentry.interfaces.User': {
+                'email': 'bar@example.com',
+            },
+        })
+        group = Group.objects.get(id=event.group_id)
+        assert group.users_seen == 2
