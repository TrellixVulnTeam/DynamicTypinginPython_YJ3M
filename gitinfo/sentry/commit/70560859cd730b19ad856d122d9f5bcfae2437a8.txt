commit 70560859cd730b19ad856d122d9f5bcfae2437a8
Author: Matte Noble <me@mattenoble.com>
Date:   Fri Aug 31 11:41:49 2018 -0700

    feat(integrations): Disable plugin if migrated (#9473)
    
    For Integrations that have a corresponding, old, plugin and are
    repository based (VSTS, Bitbucket, GitHub), disable the plugin if all
    Repositories are migrated.
    
    This means, if all the Repositories in the Org are accessible by the new
    Integration, they will all be automatically migrated and the plugin will
    be disabled.

diff --git a/src/sentry/integrations/bitbucket/integration.py b/src/sentry/integrations/bitbucket/integration.py
index f9a6e0f779..09895565b8 100644
--- a/src/sentry/integrations/bitbucket/integration.py
+++ b/src/sentry/integrations/bitbucket/integration.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from sentry.integrations import Integration, IntegrationFeatures, IntegrationProvider, IntegrationMetadata
 from sentry.integrations.atlassian_connect import AtlassianConnectValidationError, get_integration_from_request
+from sentry.integrations.migrate import PluginMigrator
 from sentry.integrations.repositories import RepositoryMixin
 from sentry.pipeline import NestedPipelineView, PipelineView
 from sentry.identity.pipeline import IdentityProviderPipeline
@@ -115,6 +116,8 @@ class BitbucketIntegrationProvider(IntegrationProvider):
         for repo in filter(lambda r: r not in unmigrateable_repos, repos):
             repo.update(integration_id=integration.id)
 
+        PluginMigrator(integration, organization).call()
+
     def build_integration(self, state):
         if state.get('publicKey'):
             principal_data = state['principal']
diff --git a/src/sentry/integrations/example/integration.py b/src/sentry/integrations/example/integration.py
index 32183a95c8..fb5515a7e2 100644
--- a/src/sentry/integrations/example/integration.py
+++ b/src/sentry/integrations/example/integration.py
@@ -6,6 +6,7 @@ from sentry.integrations import (
 )
 from sentry.integrations.exceptions import IntegrationError
 from sentry.integrations.issues import IssueSyncMixin
+from sentry.integrations.migrate import PluginMigrator
 from sentry.pipeline import PipelineView
 
 
@@ -72,6 +73,15 @@ class ExampleIntegration(Integration, IssueSyncMixin):
             'description': 'This is a test external issue description',
         }
 
+    def get_repositories(self):
+        return [{
+            'name': 'repo',
+            'id': 'user/repo',
+        }]
+
+    def get_unmigratable_repositories(self):
+        return []
+
     def sync_assignee_outbound(self, external_issue, user, assign=True, **kwargs):
         pass
 
@@ -113,6 +123,10 @@ class ExampleIntegrationProvider(IntegrationProvider):
             'required': True,
         }]
 
+    def post_install(self, integration, organization):
+        installation = self.get_installation(integration, organization.id)
+        PluginMigrator(installation, organization).call()
+
     def build_integration(self, state):
         return {
             'external_id': state['name'],
diff --git a/src/sentry/integrations/github/integration.py b/src/sentry/integrations/github/integration.py
index f75f06369a..9a2cdb7e50 100644
--- a/src/sentry/integrations/github/integration.py
+++ b/src/sentry/integrations/github/integration.py
@@ -9,6 +9,7 @@ from sentry.integrations import Integration, IntegrationFeatures, IntegrationPro
 from sentry.integrations.exceptions import ApiError
 from sentry.integrations.constants import ERR_INTERNAL, ERR_UNAUTHORIZED
 from sentry.integrations.repositories import RepositoryMixin
+from sentry.integrations.migrate import PluginMigrator
 from sentry.models import Repository
 from sentry.pipeline import NestedPipelineView, PipelineView
 from sentry.utils.http import absolute_uri
@@ -154,6 +155,8 @@ class GitHubIntegrationProvider(IntegrationProvider):
         for repo in filter(lambda r: r not in unmigratable_repos, repos):
             repo.update(integration_id=integration.id)
 
+        PluginMigrator(integration, organization).call()
+
     def get_pipeline_views(self):
         identity_pipeline_config = {
             'oauth_scopes': (),
diff --git a/src/sentry/integrations/migrate.py b/src/sentry/integrations/migrate.py
new file mode 100644
index 0000000000..7ac980033f
--- /dev/null
+++ b/src/sentry/integrations/migrate.py
@@ -0,0 +1,55 @@
+from __future__ import absolute_import
+
+from sentry.models import Repository
+from sentry.plugins import plugins
+from sentry.utils.cache import memoize
+
+
+class PluginMigrator(object):
+    def __init__(self, integration, organization):
+        self.integration = integration
+        self.organization = organization
+
+    def call(self):
+        for project in self.projects:
+            for plugin in plugins.for_project(project):
+                if self.all_repos_migrated(plugin.slug):
+                    # Since repos are Org-level, if they're all migrated, we
+                    # can disable the Plugin for all Projects. There'd be no
+                    # Repos left, associated with the Plugin.
+                    self.disable_for_all_projects(plugin)
+
+    def all_repos_migrated(self, provider):
+        provider = 'visualstudio' if provider == 'vsts' else provider
+
+        return all(
+            r.integration_id is not None
+            for r in self.repos_for_provider(provider)
+        )
+
+    def disable_for_all_projects(self, plugin):
+        for project in self.projects:
+            try:
+                plugin.disable(project=project)
+            except NotImplementedError:
+                pass
+
+    def repos_for_provider(self, provider):
+        return filter(lambda r: r.provider == provider, self.repositories)
+
+    @property
+    def repositories(self):
+        return Repository.objects.filter(
+            organization_id=self.organization.id,
+        )
+
+    @memoize
+    def projects(self):
+        return list(self.organization.project_set.all())
+
+    @property
+    def plugins(self):
+        return [
+            plugins.configurable_for_project(project)
+            for project in self.projects
+        ]
diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index e61388d651..6f0e3261e8 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -13,6 +13,7 @@ from sentry.models import (
 )
 from sentry.integrations import Integration, IntegrationFeatures, IntegrationProvider, IntegrationMetadata
 from sentry.integrations.exceptions import ApiError, IntegrationError
+from sentry.integrations.migrate import PluginMigrator
 from sentry.integrations.repositories import RepositoryMixin
 from sentry.integrations.vsts.issues import VstsIssueSync
 from sentry.models import Repository
@@ -61,6 +62,9 @@ class VstsIntegration(Integration, RepositoryMixin, VstsIssueSync):
     def reinstall(self):
         self.reinstall_repositories()
 
+    def all_repos_migrated(self):
+        return not self.get_unmigratable_repositories()
+
     def get_repositories(self, query=None):
         try:
             repos = self.get_client().get_repos(self.instance)
@@ -251,9 +255,9 @@ class VstsIntegrationProvider(IntegrationProvider):
     }
 
     def post_install(self, integration, organization):
-        unmigratable_repos = self \
-            .get_installation(integration, organization.id) \
-            .get_unmigratable_repositories()
+        installation = self.get_installation(integration, organization.id)
+
+        unmigratable_repos = installation.get_unmigratable_repositories()
 
         repos = Repository.objects.filter(
             organization_id=organization.id,
@@ -265,6 +269,8 @@ class VstsIntegrationProvider(IntegrationProvider):
         for repo in repos:
             repo.update(integration_id=integration.id)
 
+        PluginMigrator(installation, organization).call()
+
     def get_pipeline_views(self):
         identity_pipeline_config = {
             'redirect_url': absolute_uri(self.oauth_redirect_url),
diff --git a/tests/sentry/integrations/bitbucket/test_installed.py b/tests/sentry/integrations/bitbucket/test_installed.py
index 59d2b65d9d..b53ac7b164 100644
--- a/tests/sentry/integrations/bitbucket/test_installed.py
+++ b/tests/sentry/integrations/bitbucket/test_installed.py
@@ -5,7 +5,9 @@ import responses
 from sentry.testutils import APITestCase
 from sentry.integrations.bitbucket.installed import BitbucketInstalledEndpoint
 from sentry.integrations.bitbucket.integration import scopes, BitbucketIntegrationProvider
-from sentry.models import Integration, Repository
+from sentry.models import Integration, Repository, Project
+from sentry.plugins import plugins
+from tests.sentry.plugins.testutils import BitbucketPlugin  # NOQA
 
 
 class BitbucketInstalledEndpointTest(APITestCase):
@@ -134,6 +136,53 @@ class BitbucketInstalledEndpointTest(APITestCase):
             id=inaccessible_repo.id
         ).integration_id is None
 
+    @responses.activate
+    def test_disable_plugin_when_fully_migrated(self):
+        project = Project.objects.create(
+            organization_id=self.organization.id,
+        )
+
+        plugin = plugins.get('bitbucket')
+        plugin.enable(project)
+
+        # Accessible to new Integration
+        Repository.objects.create(
+            organization_id=self.organization.id,
+            name='sentryuser/repo',
+            url='https://bitbucket.org/sentryuser/repo',
+            provider='bitbucket',
+            external_id='123456',
+        )
+
+        self.client.post(
+            self.path,
+            data=self.data_from_bitbucket,
+        )
+
+        integration = Integration.objects.get(
+            provider=self.provider,
+            external_id=self.client_key,
+        )
+
+        responses.add(
+            responses.GET,
+            'https://api.bitbucket.org/2.0/repositories/{}'.format(self.username),
+            json={
+                'values': [{
+                    'full_name': 'sentryuser/repo',
+                }],
+            },
+        )
+
+        assert 'bitbucket' in [p.slug for p in plugins.for_project(project)]
+
+        BitbucketIntegrationProvider().post_install(
+            integration,
+            self.organization,
+        )
+
+        assert 'bitbucket' not in [p.slug for p in plugins.for_project(project)]
+
     def test_installed_without_public_key(self):
         integration = Integration.objects.get_or_create(
             provider=self.provider,
diff --git a/tests/sentry/integrations/github/test_integration.py b/tests/sentry/integrations/github/test_integration.py
index c014349a21..2e5daaef1f 100644
--- a/tests/sentry/integrations/github/test_integration.py
+++ b/tests/sentry/integrations/github/test_integration.py
@@ -11,9 +11,11 @@ from sentry.constants import ObjectStatus
 from sentry.integrations.github import GitHubIntegrationProvider
 from sentry.models import (
     Identity, IdentityProvider, IdentityStatus, Integration, OrganizationIntegration,
-    Repository,
+    Repository, Project
 )
+from sentry.plugins import plugins
 from sentry.testutils import IntegrationTestCase
+from tests.sentry.plugins.testutils import GitHubPlugin  # NOQA
 
 
 class GitHubIntegrationTest(IntegrationTestCase):
@@ -194,6 +196,30 @@ class GitHubIntegrationTest(IntegrationTestCase):
             id=inaccessible_repo.id,
         ).integration_id is None
 
+    @responses.activate
+    def test_disables_plugin_when_fully_migrated(self):
+        project = Project.objects.create(
+            organization_id=self.organization.id,
+        )
+
+        plugin = plugins.get('github')
+        plugin.enable(project)
+
+        # Accessible to new Integration
+        Repository.objects.create(
+            organization_id=self.organization.id,
+            name='Test-Organization/foo',
+            url='https://github.com/Test-Organization/foo',
+            provider='github',
+            external_id=123,
+        )
+
+        assert 'github' in [p.slug for p in plugins.for_project(project)]
+
+        self.assert_setup_flow()
+
+        assert 'github' not in [p.slug for p in plugins.for_project(project)]
+
     @responses.activate
     def test_basic_flow(self):
         self.assert_setup_flow()
@@ -321,3 +347,31 @@ class GitHubIntegrationTest(IntegrationTestCase):
         integration = Integration.objects.get(provider=self.provider.key)
         assert integration.status == ObjectStatus.VISIBLE
         assert integration.external_id == self.installation_id
+
+    @responses.activate
+    def test_disable_plugin_when_fully_migrated(self):
+        self._stub_github()
+
+        project = Project.objects.create(
+            organization_id=self.organization.id,
+        )
+
+        plugin = plugins.get('github')
+        plugin.enable(project)
+
+        # Accessible to new Integration - mocked in _stub_github
+        Repository.objects.create(
+            organization_id=self.organization.id,
+            name='Test-Organization/foo',
+            url='https://github.com/Test-Organization/foo',
+            provider='github',
+            external_id='123',
+        )
+
+        # Enabled before
+        assert 'github' in [p.slug for p in plugins.for_project(project)]
+
+        self.assert_setup_flow()
+
+        # Disabled after Integration installed
+        assert 'github' not in [p.slug for p in plugins.for_project(project)]
diff --git a/tests/sentry/integrations/test_migrate.py b/tests/sentry/integrations/test_migrate.py
new file mode 100644
index 0000000000..add345a9b0
--- /dev/null
+++ b/tests/sentry/integrations/test_migrate.py
@@ -0,0 +1,57 @@
+from __future__ import absolute_import
+
+from sentry.integrations.example import ExampleIntegrationProvider
+from sentry.integrations.migrate import PluginMigrator
+from sentry.models import Integration, Repository
+from sentry.plugins import plugins
+from sentry.plugins.bases.issue2 import IssuePlugin2
+from sentry.testutils import TestCase
+
+
+class ExamplePlugin(IssuePlugin2):
+    slug = 'example'
+
+
+plugins.register(ExamplePlugin)
+
+
+class PluginMigratorTest(TestCase):
+    def setUp(self):
+        super(PluginMigratorTest, self).setUp()
+
+        self.organization = self.create_organization()
+        self.project = self.create_project(organization=self.organization)
+
+        self.integration = ExampleIntegrationProvider()
+
+        self.migrator = PluginMigrator(self.integration, self.organization)
+
+    def test_all_repos_migrated(self):
+        integration = Integration.objects.create(
+            provider=ExampleIntegrationProvider.key,
+        )
+
+        Repository.objects.create(
+            organization_id=self.organization.id,
+            provider=self.integration.key,
+            integration_id=integration.id,
+        )
+
+        assert self.migrator.all_repos_migrated(self.integration.key)
+
+    def test_disable_for_all_projects(self):
+        plugin = plugins.get('example')
+        plugin.enable(self.project)
+
+        assert plugin in plugins.for_project(self.project)
+
+        self.migrator.disable_for_all_projects(plugin)
+
+        assert plugin not in plugins.for_project(self.project)
+
+    def test_call(self):
+        plugin = plugins.get('example')
+        plugin.enable(self.project)
+
+        self.migrator.call()
+        assert plugin not in plugins.for_project(self.project)
diff --git a/tests/sentry/integrations/test_pipeline.py b/tests/sentry/integrations/test_pipeline.py
index b28adc2ccb..6515584e79 100644
--- a/tests/sentry/integrations/test_pipeline.py
+++ b/tests/sentry/integrations/test_pipeline.py
@@ -8,6 +8,16 @@ from sentry.integrations.example import (
     ExampleIntegrationProvider,
     AliasedIntegrationProvider,
 )
+from sentry.models import Repository
+from sentry.plugins import plugins
+from sentry.plugins.bases.issue2 import IssuePlugin2
+
+
+class ExamplePlugin(IssuePlugin2):
+    slug = 'example'
+
+
+plugins.register(ExamplePlugin)
 
 
 def naive_build_integration(data):
@@ -199,3 +209,23 @@ class FinishPipelineTestCase(IntegrationTestCase):
         )
         assert org_integration.default_auth_id == old_identity_id
         assert Identity.objects.filter(external_id='AccountId').exists()
+
+    @patch('sentry.integrations.migrate.PluginMigrator.call')
+    def test_disabled_plugin_when_fully_migrated(self, call, *args):
+        Repository.objects.create(
+            organization_id=self.organization.id,
+            name='user/repo',
+            url='https://example.org/user/repo',
+            provider=self.provider.key,
+            external_id=self.external_id,
+        )
+
+        self.pipeline.state.data = {
+            'external_id': self.external_id,
+            'name': 'Name',
+            'metadata': {'url': 'https://example.com'},
+        }
+
+        self.pipeline.finish_pipeline()
+
+        assert call.called
diff --git a/tests/sentry/integrations/vsts/test_integration.py b/tests/sentry/integrations/vsts/test_integration.py
index c485cfbced..b808399004 100644
--- a/tests/sentry/integrations/vsts/test_integration.py
+++ b/tests/sentry/integrations/vsts/test_integration.py
@@ -1,11 +1,15 @@
 from __future__ import absolute_import
 
+
 from sentry.identity.vsts import VSTSIdentityProvider
 from sentry.integrations.exceptions import IntegrationError
 from sentry.integrations.vsts import VstsIntegration, VstsIntegrationProvider
 from sentry.models import (
-    Integration, IntegrationExternalProject, OrganizationIntegration, Repository
+    Integration, IntegrationExternalProject, OrganizationIntegration, Repository,
+    Project
 )
+from sentry.plugins import plugins
+from tests.sentry.plugins.testutils import VstsPlugin  # NOQA
 from .testutils import VstsIntegrationTestCase, CREATE_SUBSCRIPTION
 
 
@@ -59,6 +63,65 @@ class VstsIntegrationProviderTest(VstsIntegrationTestCase):
             id=inaccessible_repo.id,
         ).integration_id is None
 
+    def setupPluginTest(self):
+        self.project = Project.objects.create(
+            organization_id=self.organization.id,
+        )
+
+        self.plugin = plugins.get('vsts')
+        self.plugin.enable(self.project)
+
+    def test_disabled_plugin_when_fully_migrated(self):
+        self.setupPluginTest()
+
+        Repository.objects.create(
+            organization_id=self.organization.id,
+            name=self.project_a['name'],
+            url='https://{}.visualstudio.com/DefaultCollection/_git/{}'.format(
+                self.vsts_account_name,
+                self.repo_name,
+            ),
+            provider='visualstudio',
+            external_id=self.repo_id,
+        )
+
+        # Enabled before Integration installation
+        assert 'vsts' in [p.slug for p in plugins.for_project(self.project)]
+
+        self.assert_installation()
+
+        # Disabled
+        assert 'vsts' not in [p.slug for p in plugins.for_project(self.project)]
+
+    def test_doesnt_disable_plugin_when_partially_migrated(self):
+        self.setupPluginTest()
+
+        # Repo accessible by new Integration
+        Repository.objects.create(
+            organization_id=self.organization.id,
+            name=self.project_a['name'],
+            url='https://{}.visualstudio.com/DefaultCollection/_git/{}'.format(
+                self.vsts_account_name,
+                self.repo_name,
+            ),
+            provider='visualstudio',
+            external_id=self.repo_id,
+        )
+
+        # Inaccessible Repo - causes plugin to stay enabled
+        Repository.objects.create(
+            organization_id=self.organization.id,
+            name='NotReachable',
+            url='https://randoaccount.visualstudio.com/Product/_git/NotReachable',
+            provider='visualstudio',
+            external_id='123456789',
+        )
+
+        self.assert_installation()
+
+        # Still enabled
+        assert 'vsts' in [p.slug for p in plugins.for_project(self.project)]
+
     def test_build_integration(self):
         state = {
             'account': {
diff --git a/tests/sentry/plugins/testutils.py b/tests/sentry/plugins/testutils.py
new file mode 100644
index 0000000000..319c1ac4c7
--- /dev/null
+++ b/tests/sentry/plugins/testutils.py
@@ -0,0 +1,23 @@
+from __future__ import absolute_import
+
+from sentry.plugins import plugins, IssueTrackingPlugin2
+
+
+class VstsPlugin(IssueTrackingPlugin2):
+    slug = 'vsts'
+    conf_key = slug
+
+
+class GitHubPlugin(IssueTrackingPlugin2):
+    slug = 'github'
+    conf_key = slug
+
+
+class BitbucketPlugin(IssueTrackingPlugin2):
+    slug = 'bitbucket'
+    conf_key = slug
+
+
+plugins.register(VstsPlugin)
+plugins.register(GitHubPlugin)
+plugins.register(BitbucketPlugin)
