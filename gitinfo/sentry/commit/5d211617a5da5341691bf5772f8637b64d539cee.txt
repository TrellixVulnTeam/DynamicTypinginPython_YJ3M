commit 5d211617a5da5341691bf5772f8637b64d539cee
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Fri Aug 5 14:19:42 2016 -0700

    Remove my social-auth patch and just apply it now to our vendored version (#3869)

diff --git a/src/sentry/social_auth/__init__.py b/src/sentry/social_auth/__init__.py
deleted file mode 100644
index c3961685ab..0000000000
--- a/src/sentry/social_auth/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from __future__ import absolute_import
diff --git a/src/sentry/social_auth/urls.py b/src/sentry/social_auth/urls.py
deleted file mode 100644
index c80143a433..0000000000
--- a/src/sentry/social_auth/urls.py
+++ /dev/null
@@ -1,22 +0,0 @@
-# TODO(dcramer): move our changes into social_auth
-from __future__ import absolute_import, print_function
-
-from django.conf.urls import patterns, url
-
-from social_auth.views import complete
-from sentry.social_auth.views import auth, disconnect
-
-
-urlpatterns = patterns('',
-    # authentication
-    url(r'^associate/(?P<backend>[^/]+)/$', auth,
-        name='socialauth_associate'),
-    url(r'^associate/complete/(?P<backend>[^/]+)/$', complete,
-        name='socialauth_associate_complete'),
-
-    # disconnection
-    url(r'^disconnect/(?P<backend>[^/]+)/$', disconnect,
-        name='socialauth_disconnect'),
-    url(r'^disconnect/(?P<backend>[^/]+)/(?P<association_id>[^/]+)/$',
-        disconnect, name='socialauth_disconnect_individual'),
-)
diff --git a/src/sentry/social_auth/views.py b/src/sentry/social_auth/views.py
deleted file mode 100644
index 6082f691b8..0000000000
--- a/src/sentry/social_auth/views.py
+++ /dev/null
@@ -1,71 +0,0 @@
-from __future__ import absolute_import, print_function
-
-
-from django.contrib.auth import REDIRECT_FIELD_NAME
-from django.contrib.auth.decorators import login_required
-from django.http import HttpResponseRedirect, HttpResponse
-
-from sudo.utils import is_safe_url
-from social_auth.decorators import dsa_view, disconnect_view
-from social_auth.utils import setting, backend_setting, clean_partial_pipeline
-
-
-DEFAULT_REDIRECT = setting('SOCIAL_AUTH_LOGIN_REDIRECT_URL',
-                           setting('LOGIN_REDIRECT_URL'))
-
-
-@login_required
-@dsa_view()
-@disconnect_view
-def disconnect(request, backend, association_id=None):
-    """Disconnects given backend from current logged in user."""
-    backend.disconnect(request.user, association_id)
-    data = request.REQUEST
-    if REDIRECT_FIELD_NAME in data:
-        redirect = data[REDIRECT_FIELD_NAME]
-        # NOTE: Django's `is_safe_url` is much better at catching bad
-        # redirections to different domains than social_auth's
-        # `sanitize_redirect` call.
-        if not is_safe_url(redirect, host=request.get_host()):
-            redirect = DEFAULT_REDIRECT
-    else:
-        redirect = backend_setting(backend, 'SOCIAL_AUTH_DISCONNECT_REDIRECT_URL')
-        if not redirect:
-            redirect = DEFAULT_REDIRECT
-    return HttpResponseRedirect(redirect)
-
-
-@dsa_view(setting('SOCIAL_AUTH_COMPLETE_URL_NAME', 'socialauth_associate_complete'))
-def auth(request, backend):
-    """Start authentication process"""
-    return auth_process(request, backend)
-
-
-def auth_process(request, backend):
-    """Authenticate using social backend"""
-    data = request.POST if request.method == 'POST' else request.GET
-
-    # Save extra data into session.
-    for field_name in setting('SOCIAL_AUTH_FIELDS_STORED_IN_SESSION', []):
-        if field_name in data:
-            request.session[field_name] = data[field_name]
-
-    # Save any defined next value into session
-    if REDIRECT_FIELD_NAME in data:
-        # Check and sanitize a user-defined GET/POST next field value
-        redirect = data[REDIRECT_FIELD_NAME]
-        # NOTE: Django's `is_safe_url` is much better at catching bad
-        # redirections to different domains than social_auth's
-        # `sanitize_redirect` call.
-        if not is_safe_url(redirect, host=request.get_host()):
-            redirect = DEFAULT_REDIRECT
-        request.session[REDIRECT_FIELD_NAME] = redirect or DEFAULT_REDIRECT
-
-    # Clean any partial pipeline info before starting the process
-    clean_partial_pipeline(request)
-
-    if backend.uses_redirect:
-        return HttpResponseRedirect(backend.auth_url())
-    else:
-        return HttpResponse(backend.auth_html(),
-                            content_type='text/html;charset=UTF-8')
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 14af6d0317..ac36f4bb39 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -276,7 +276,7 @@ urlpatterns += patterns(
 
     url(r'^account/remove/$', RemoveAccountView.as_view(),
         name='sentry-remove-account'),
-    url(r'^account/settings/social/', include('sentry.social_auth.urls')),
+    url(r'^account/settings/social/', include('social_auth.urls')),
 
     # Admin
     url(r'^manage/queue/$', AdminQueueView.as_view(),
diff --git a/src/social_auth/utils.py b/src/social_auth/utils.py
index 55d7b13737..b7fce2b64f 100644
--- a/src/social_auth/utils.py
+++ b/src/social_auth/utils.py
@@ -42,42 +42,6 @@ def sanitize_log_data(secret, data=None, leave_characters=LEAVE_CHARS):
     return replace_secret
 
 
-def sanitize_redirect(host, redirect_to):
-    """
-    Given the hostname and an untrusted URL to redirect to,
-    this method tests it to make sure it isn't garbage/harmful
-    and returns it, else returns None, similar as how's it done
-    on django.contrib.auth.views.
-
-    >>> print sanitize_redirect('myapp.com', None)
-    None
-    >>> print sanitize_redirect('myapp.com', '')
-    None
-    >>> print sanitize_redirect('myapp.com', {})
-    None
-    >>> print sanitize_redirect('myapp.com', 'http://notmyapp.com/path/')
-    None
-    >>> print sanitize_redirect('myapp.com', 'http://myapp.com/path/')
-    http://myapp.com/path/
-    >>> print sanitize_redirect('myapp.com', '/path/')
-    /path/
-    """
-    # Quick sanity check.
-    if not redirect_to:
-        return None
-
-    # Heavier security check, don't allow redirection to a different host.
-    try:
-        netloc = urlparse(redirect_to)[1]
-    except TypeError:  # not valid redirect_to value
-        return None
-
-    if netloc and netloc != host:
-        return None
-
-    return redirect_to
-
-
 def group_backend_by_type(items, key=lambda x: x):
     """Group items by backend type."""
 
diff --git a/src/social_auth/views.py b/src/social_auth/views.py
index 67e4a5b452..5c5dc98e93 100644
--- a/src/social_auth/views.py
+++ b/src/social_auth/views.py
@@ -7,6 +7,7 @@ Notes:
 """
 from __future__ import absolute_import
 
+from sudo.utils import is_safe_url
 from django.http import HttpResponseRedirect, HttpResponse
 from django.contrib.auth import login, REDIRECT_FIELD_NAME
 from django.contrib.auth.decorators import login_required
@@ -15,7 +16,7 @@ from django.views.decorators.csrf import csrf_exempt
 from six.moves.urllib.parse import quote
 
 from social_auth.utils import (
-    sanitize_redirect, setting, backend_setting, clean_partial_pipeline)
+    setting, backend_setting, clean_partial_pipeline)
 from social_auth.decorators import dsa_view, disconnect_view
 
 
@@ -68,12 +69,19 @@ def associate_complete(request, backend, *args, **kwargs):
 def disconnect(request, backend, association_id=None):
     """Disconnects given backend from current logged in user."""
     backend.disconnect(request.user, association_id)
-    url = (
-        request.REQUEST.get(REDIRECT_FIELD_NAME, '') or
-        backend_setting(backend, 'SOCIAL_AUTH_DISCONNECT_REDIRECT_URL') or
-        DEFAULT_REDIRECT
-    )
-    return HttpResponseRedirect(url)
+    data = request.REQUEST
+    if REDIRECT_FIELD_NAME in data:
+        redirect = data[REDIRECT_FIELD_NAME]
+        # NOTE: django-sudo's `is_safe_url` is much better at catching bad
+        # redirections to different domains than social_auth's
+        # `sanitize_redirect` call.
+        if not is_safe_url(redirect, host=request.get_host()):
+            redirect = DEFAULT_REDIRECT
+    else:
+        redirect = backend_setting(backend, 'SOCIAL_AUTH_DISCONNECT_REDIRECT_URL')
+        if not redirect:
+            redirect = DEFAULT_REDIRECT
+    return HttpResponseRedirect(redirect)
 
 
 def auth_process(request, backend):
@@ -89,8 +97,11 @@ def auth_process(request, backend):
     if REDIRECT_FIELD_NAME in data:
         # Check and sanitize a user-defined GET/POST next field value
         redirect = data[REDIRECT_FIELD_NAME]
-        if setting('SOCIAL_AUTH_SANITIZE_REDIRECTS', True):
-            redirect = sanitize_redirect(request.get_host(), redirect)
+        # NOTE: django-sudo's `is_safe_url` is much better at catching bad
+        # redirections to different domains than social_auth's
+        # `sanitize_redirect` call.
+        if not is_safe_url(redirect, host=request.get_host()):
+            redirect = DEFAULT_REDIRECT
         request.session[REDIRECT_FIELD_NAME] = redirect or DEFAULT_REDIRECT
 
     # Clean any partial pipeline info before starting the process
