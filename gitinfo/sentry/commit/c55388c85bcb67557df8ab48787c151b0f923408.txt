commit c55388c85bcb67557df8ab48787c151b0f923408
Author: William Mak <william@wmak.io>
Date:   Fri Apr 24 11:07:27 2020 -0400

    fix(discover): Supporting has:issue filters (#18446)
    
    - This also removes unused
     - `convert_search_boolean_to_snuba_query`
     - `is_alias` parameter

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index fa366306bb..d0e5caa97a 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -644,32 +644,7 @@ def parse_search_query(query):
     return SearchVisitor().visit(tree)
 
 
-def convert_search_boolean_to_snuba_query(search_boolean):
-    def convert_term(term):
-        if isinstance(term, SearchFilter):
-            return convert_search_filter_to_snuba_query(term)
-        elif isinstance(term, AggregateFilter):
-            return convert_aggregate_filter_to_snuba_query(term, False)
-        elif isinstance(term, SearchBoolean):
-            return convert_search_boolean_to_snuba_query(term)
-        else:
-            raise InvalidSearchQuery(
-                u"Attempted to convert term of unrecognized type {} into a snuba expression".format(
-                    term.__class__.__name__
-                )
-            )
-
-    if not search_boolean:
-        return search_boolean
-
-    left = convert_term(search_boolean.left_term)
-    right = convert_term(search_boolean.right_term)
-    operator = search_boolean.operator.lower()
-
-    return [operator, [left, right]]
-
-
-def convert_aggregate_filter_to_snuba_query(aggregate_filter, is_alias, params):
+def convert_aggregate_filter_to_snuba_query(aggregate_filter, params):
     name = aggregate_filter.key.name
     value = aggregate_filter.value.value
 
@@ -870,15 +845,19 @@ def get_filter(query=None, params=None):
                 else:
                     kwargs["conditions"].append(user_conditions)
             elif name in FIELD_ALIASES and name != PROJECT_ALIAS:
-                converted_filter = convert_aggregate_filter_to_snuba_query(term, True)
+                if "column_alias" in FIELD_ALIASES[name]:
+                    term = SearchFilter(
+                        SearchKey(FIELD_ALIASES[name]["column_alias"]), term.operator, term.value
+                    )
+                converted_filter = convert_aggregate_filter_to_snuba_query(term, params)
                 if converted_filter:
-                    kwargs["having"].append(converted_filter)
+                    kwargs["conditions"].append(converted_filter)
             else:
                 converted_filter = convert_search_filter_to_snuba_query(term)
                 if converted_filter:
                     kwargs["conditions"].append(converted_filter)
         elif isinstance(term, AggregateFilter):
-            converted_filter = convert_aggregate_filter_to_snuba_query(term, False, params)
+            converted_filter = convert_aggregate_filter_to_snuba_query(term, params)
             if converted_filter:
                 kwargs["having"].append(converted_filter)
 
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 555f3225ff..354ddf7e06 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -365,6 +365,45 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
                 assert len(response.data["data"]) == 1
                 assert response.data["data"][0]["user"] == data["user"]["ip_address"]
 
+    def test_has_issue(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        event = self.store_event(
+            {"timestamp": iso_format(before_now(minutes=1))}, project_id=project.id
+        )
+
+        data = load_data("transaction")
+        data["timestamp"] = iso_format(before_now(minutes=1))
+        data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=5))
+        self.store_event(data, project_id=project.id)
+
+        with self.feature(
+            {"organizations:discover-basic": True, "organizations:global-views": True}
+        ):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={"field": ["project", "issue"], "query": "has:issue", "statsPeriod": "14d"},
+            )
+
+        assert response.status_code == 200, response.content
+        assert len(response.data["data"]) == 1
+        assert response.data["data"][0]["issue"] == event.group.qualified_short_id
+
+        with self.feature(
+            {"organizations:discover-basic": True, "organizations:global-views": True}
+        ):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={"field": ["project", "issue"], "query": "!has:issue", "statsPeriod": "14d"},
+            )
+
+        assert response.status_code == 200, response.content
+        assert len(response.data["data"]) == 1
+        assert response.data["data"][0]["issue"] == "unknown"
+
     def test_negative_user_search(self):
         self.login_as(user=self.user)
 
