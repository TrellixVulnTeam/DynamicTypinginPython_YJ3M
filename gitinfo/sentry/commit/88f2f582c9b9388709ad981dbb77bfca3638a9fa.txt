commit 88f2f582c9b9388709ad981dbb77bfca3638a9fa
Author: MeredithAnya <meredith@getsentry.com>
Date:   Wed Aug 7 10:36:53 2019 -0700

    ref(app-platform): UI for showing, adding, removing tokens (#14253)
    
    * render mulitple tokens, add, and delete

diff --git a/src/sentry/api/bases/sentryapps.py b/src/sentry/api/bases/sentryapps.py
index fef4380d02..e3369fe99e 100644
--- a/src/sentry/api/bases/sentryapps.py
+++ b/src/sentry/api/bases/sentryapps.py
@@ -325,6 +325,7 @@ class SentryAppAuthorizationsBaseEndpoint(SentryAppInstallationBaseEndpoint):
 
 class SentryInternalAppTokenPermission(SentryPermission):
     scope_map = {
+        'GET': ('org:read', 'org:integrations', 'org:write', 'org:admin'),
         'POST': ('org:read', 'org:integrations', 'org:write', 'org:admin'),
         'DELETE': ('org:write', 'org:admin'),
     }
diff --git a/src/sentry/api/endpoints/sentry_internal_app_tokens.py b/src/sentry/api/endpoints/sentry_internal_app_tokens.py
index ae593b575c..79a3c8ab14 100644
--- a/src/sentry/api/endpoints/sentry_internal_app_tokens.py
+++ b/src/sentry/api/endpoints/sentry_internal_app_tokens.py
@@ -6,7 +6,7 @@ from rest_framework import status
 from sentry.api.bases import (
     SentryInternalAppTokenPermission, SentryAppBaseEndpoint,
 )
-from sentry.models import SentryAppInstallation
+from sentry.models import ApiToken, SentryAppInstallation
 from sentry.features.helpers import requires_feature
 from sentry.mediators.sentry_app_installation_tokens import Creator
 from sentry.api.serializers.models.apitoken import ApiTokenSerializer
@@ -16,6 +16,18 @@ from sentry.exceptions import ApiTokenLimitError
 class SentryInternalAppTokensEndpoint(SentryAppBaseEndpoint):
     permission_classes = (SentryInternalAppTokenPermission, )
 
+    @requires_feature('organizations:sentry-apps', any_org=True)
+    def get(self, request, sentry_app):
+        if not sentry_app.is_internal:
+            return Response([])
+
+        tokens = ApiToken.objects.filter(application_id=sentry_app.application_id)
+        attrs = {
+            'application': None,
+        }
+        return Response(ApiTokenSerializer().serialize(token, attrs, request.user)
+                        for token in tokens)
+
     @requires_feature('organizations:sentry-apps', any_org=True)
     def post(self, request, sentry_app):
         if not sentry_app.is_internal:
diff --git a/src/sentry/api/serializers/models/sentry_app.py b/src/sentry/api/serializers/models/sentry_app.py
index c552a24397..a86bd7457b 100644
--- a/src/sentry/api/serializers/models/sentry_app.py
+++ b/src/sentry/api/serializers/models/sentry_app.py
@@ -30,15 +30,7 @@ class SentryAppSerializer(Serializer):
         if is_active_superuser(env.request) or (
             hasattr(user, 'get_orgs') and obj.owner in user.get_orgs()
         ):
-            if obj.is_internal:
-                install = obj.installations.first()
-                data.update({
-                    'installation': {
-                        'uuid': install.uuid,
-                    },
-                    'token': install.api_token.token,
-                })
-            else:
+            if not obj.is_internal:
                 data.update({
                     'clientId': obj.application.client_id,
                     'clientSecret': obj.application.client_secret,
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 1e1000374c..d0bf7ee447 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -1432,7 +1432,7 @@ urlpatterns = patterns(
         name='sentry-api-0-sentry-internal-app-tokens'
     ),
     url(
-        r'^sentry-apps/(?P<sentry_app_slug>[^\/]+)/api-tokens/(?P<api_token>[^\/]+)$',
+        r'^sentry-apps/(?P<sentry_app_slug>[^\/]+)/api-tokens/(?P<api_token>[^\/]+)/$',
         SentryInternalAppTokenDetailsEndpoint.as_view(),
         name='sentry-api-0-sentry-internal-app-token-details'
     ),
diff --git a/src/sentry/static/sentry/app/actionCreators/sentryAppTokens.jsx b/src/sentry/static/sentry/app/actionCreators/sentryAppTokens.jsx
new file mode 100644
index 0000000000..b02a8f4db0
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/sentryAppTokens.jsx
@@ -0,0 +1,50 @@
+import {
+  addErrorMessage,
+  addLoadingMessage,
+  addSuccessMessage,
+} from 'app/actionCreators/indicator';
+import {t} from 'app/locale';
+
+/**
+ * Install a sentry application
+ *
+ * @param {Object} client ApiClient
+ * @param {Object} app SentryApp
+ */
+export async function addSentryAppToken(client, app) {
+  addLoadingMessage();
+  try {
+    const resp = await client.requestPromise(`/sentry-apps/${app.slug}/api-tokens/`, {
+      method: 'POST',
+    });
+    addSuccessMessage(t('Token successfully added.'));
+    return resp;
+  } catch (err) {
+    addErrorMessage(t('Unable to create token'));
+    throw err;
+  }
+}
+
+/**
+ * Uninstall a sentry application
+ *
+ * @param {Object} client ApiClient
+ * @param {Object} app SentryApp
+ * @param {String} token Token string
+ */
+export async function removeSentryAppToken(client, app, token) {
+  addLoadingMessage();
+  try {
+    const resp = await client.requestPromise(
+      `/sentry-apps/${app.slug}/api-tokens/${token}/`,
+      {
+        method: 'DELETE',
+      }
+    );
+    addSuccessMessage(t('Token successfully deleted.'));
+    return resp;
+  } catch (err) {
+    addErrorMessage(t('Unable to delete token'));
+    throw err;
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
index a119919622..edd69e2e73 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
@@ -3,7 +3,7 @@ import React from 'react';
 import {browserHistory} from 'react-router';
 
 import {addSuccessMessage} from 'app/actionCreators/indicator';
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import {Panel, PanelItem, PanelBody, PanelHeader} from 'app/components/panels';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
 import Form from 'app/views/settings/components/forms/form';
@@ -16,6 +16,16 @@ import TextCopyInput from 'app/views/settings/components/forms/textCopyInput';
 import sentryApplicationForm from 'app/data/forms/sentryApplication';
 import getDynamicText from 'app/utils/getDynamicText';
 
+import DateTime from 'app/components/dateTime';
+import Button from 'app/components/button';
+import EmptyMessage from 'app/views/settings/components/emptyMessage';
+
+import styled from 'react-emotion';
+import {
+  addSentryAppToken,
+  removeSentryAppToken,
+} from 'app/actionCreators/sentryAppTokens';
+
 class SentryAppFormModel extends FormModel {
   /**
    * Filter out Permission input field values.
@@ -54,14 +64,17 @@ export default class SentryApplicationDetails extends AsyncView {
     return {
       ...super.getDefaultState(),
       app: null,
+      tokens: [],
     };
   }
 
   getEndpoints() {
     const {appSlug} = this.props.params;
-
     if (appSlug) {
-      return [['app', `/sentry-apps/${appSlug}/`]];
+      return [
+        ['app', `/sentry-apps/${appSlug}/`],
+        ['tokens', `/sentry-apps/${appSlug}/api-tokens/`],
+      ];
     }
 
     return [];
@@ -97,6 +110,62 @@ export default class SentryApplicationDetails extends AsyncView {
     }
   };
 
+  onAddToken = async evt => {
+    evt.preventDefault();
+    const {app, tokens} = this.state;
+    const api = this.api;
+
+    const token = await addSentryAppToken(api, app);
+    const newTokens = tokens.concat(token);
+    this.setState({tokens: newTokens});
+  };
+
+  onRemoveToken = async (token, evt) => {
+    evt.preventDefault();
+    const {app, tokens} = this.state;
+    const api = this.api;
+    const newTokens = tokens.filter(tok => tok.token !== token.token);
+
+    await removeSentryAppToken(api, app, token.token);
+    this.setState({tokens: newTokens});
+  };
+
+  renderTokens = () => {
+    const {tokens} = this.state;
+    if (tokens.length > 0) {
+      return tokens.map(token => {
+        return (
+          <StyledPanelItem key={token.token}>
+            <TokenItem>
+              <TextCopyInput>
+                {getDynamicText({value: token.token, fixed: 'xxxxxx'})}
+              </TextCopyInput>
+            </TokenItem>
+            <CreatedDate>
+              <CreatedTitle>Created:</CreatedTitle>
+              <DateTime
+                date={getDynamicText({
+                  value: token.dateCreated,
+                  fixed: new Date(1508208080000),
+                })}
+              />
+            </CreatedDate>
+            <Button
+              onClick={this.onRemoveToken.bind(this, token)}
+              size="small"
+              icon="icon-trash"
+              data-test-id="token-delete"
+            >
+              {t('Revoke')}
+            </Button>
+          </StyledPanelItem>
+        );
+      });
+    } else {
+      return <EmptyMessage description={t('No tokens created yet.')} />;
+    }
+  };
+
   renderBody() {
     const {orgId} = this.props.params;
     const {app} = this.state;
@@ -108,7 +177,6 @@ export default class SentryApplicationDetails extends AsyncView {
       statusDisabled || this.form.getValue('isInternal') ? true : false;
     const method = app ? 'PUT' : 'POST';
     const endpoint = app ? `/sentry-apps/${app.slug}/` : '/sentry-apps/';
-
     return (
       <div>
         <SettingsPageHeader title={this.getTitle()} />
@@ -138,60 +206,74 @@ export default class SentryApplicationDetails extends AsyncView {
           <PermissionsObserver scopes={scopes} events={events} />
 
           {app && (
-            <Panel>
-              <PanelHeader>{t('Credentials')}</PanelHeader>
+            <React.Fragment>
               {app.status === 'internal' ? (
-                <PanelBody>
-                  <FormField name="token" label="Token" overflow>
-                    {({value}) => {
-                      return (
-                        <TextCopyInput>
-                          {getDynamicText({value, fixed: 'PERCY_ACCESS_TOKEN'})}
-                        </TextCopyInput>
-                      );
-                    }}
-                  </FormField>
-                  <FormField overflow name="installation" label="Installation ID">
-                    {({value}) => {
-                      return (
-                        <TextCopyInput>
-                          {getDynamicText({
-                            value: value.uuid,
-                            fixed: 'PERCY_INSTALLATION_ID',
-                          })}
-                        </TextCopyInput>
-                      );
-                    }}
-                  </FormField>
-                </PanelBody>
+                <Panel>
+                  <PanelHeader hasButtons>
+                    {t('Tokens')}
+                    <Button
+                      size="xsmall"
+                      icon="icon-circle-add"
+                      onClick={evt => this.onAddToken(evt)}
+                      data-test-id="token-add"
+                    >
+                      {t('New Token')}
+                    </Button>
+                  </PanelHeader>
+                  <PanelBody>{this.renderTokens()}</PanelBody>
+                </Panel>
               ) : (
-                <PanelBody>
-                  <FormField name="clientId" label="Client ID" overflow>
-                    {({value}) => {
-                      return (
-                        <TextCopyInput>
-                          {getDynamicText({value, fixed: 'PERCY_CLIENT_ID'})}
-                        </TextCopyInput>
-                      );
-                    }}
-                  </FormField>
-                  <FormField overflow name="clientSecret" label="Client Secret">
-                    {({value}) => {
-                      return value ? (
-                        <TextCopyInput>
-                          {getDynamicText({value, fixed: 'PERCY_CLIENT_SECRET'})}
-                        </TextCopyInput>
-                      ) : (
-                        <em>hidden</em>
-                      );
-                    }}
-                  </FormField>
-                </PanelBody>
+                <Panel>
+                  <PanelHeader>{t('Credentials')}</PanelHeader>
+                  <PanelBody>
+                    <FormField name="clientId" label="Client ID" overflow>
+                      {({value}) => {
+                        return (
+                          <TextCopyInput>
+                            {getDynamicText({value, fixed: 'PERCY_CLIENT_ID'})}
+                          </TextCopyInput>
+                        );
+                      }}
+                    </FormField>
+                    <FormField overflow name="clientSecret" label="Client Secret">
+                      {({value}) => {
+                        return value ? (
+                          <TextCopyInput>
+                            {getDynamicText({value, fixed: 'PERCY_CLIENT_SECRET'})}
+                          </TextCopyInput>
+                        ) : (
+                          <em>hidden</em>
+                        );
+                      }}
+                    </FormField>
+                  </PanelBody>
+                </Panel>
               )}
-            </Panel>
+            </React.Fragment>
           )}
         </Form>
       </div>
     );
   }
 }
+
+const StyledPanelItem = styled(PanelItem)`
+  display: flex;
+  justify-content: space-between;
+`;
+
+const TokenItem = styled('div')`
+  width: 70%;
+`;
+
+const CreatedTitle = styled('span')`
+  color: ${p => p.theme.gray2};
+  margin-bottom: 2px;
+`;
+
+const CreatedDate = styled('div')`
+  display: flex;
+  flex-direction: column;
+  font-size: 14px;
+  margin: 0 10px;
+`;
diff --git a/tests/acceptance/test_organization_developer_settings.py b/tests/acceptance/test_organization_developer_settings.py
index 85b6cc1235..f16f5f58a2 100644
--- a/tests/acceptance/test_organization_developer_settings.py
+++ b/tests/acceptance/test_organization_developer_settings.py
@@ -87,3 +87,37 @@ class OrganizationDeveloperSettingsEditAcceptanceTest(AcceptanceTestCase):
 
             schema = self.browser.element('textarea[name="schema"]')
             assert schema.text == ""
+
+    def test_remove_tokens_internal_app(self):
+        internal_app = self.create_internal_integration(
+            name='Internal App',
+            organization=self.org,
+        )
+        url = u'/settings/{}/developer-settings/{}'.format(
+            self.org.slug, internal_app.slug)
+
+        with self.feature('organizations:sentry-apps'):
+            self.load_page(url)
+
+            self.browser.click('[data-test-id="token-delete"]')
+            self.browser.wait_until('.ref-success')
+
+            assert self.browser.find_element_by_xpath(
+                "//div[contains(text(), 'No tokens created yet.')]")
+
+    def test_add_tokens_internal_app(self):
+        internal_app = self.create_internal_integration(
+            name='Internal App',
+            organization=self.org,
+        )
+        url = u'/settings/{}/developer-settings/{}'.format(
+            self.org.slug, internal_app.slug)
+
+        with self.feature('organizations:sentry-apps'):
+            self.load_page(url)
+
+            self.browser.click('[data-test-id="token-add"]')
+            self.browser.wait_until('.ref-success')
+
+            assert len(self.browser.find_elements_by_css_selector(
+                '[data-test-id="token-delete"]')) == 2
diff --git a/tests/js/fixtures/sentryAppToken.js b/tests/js/fixtures/sentryAppToken.js
new file mode 100644
index 0000000000..6b3f3d21d2
--- /dev/null
+++ b/tests/js/fixtures/sentryAppToken.js
@@ -0,0 +1,11 @@
+export function SentryAppToken(params = {}) {
+  return {
+    token: '123456123456123456123456-token',
+    dateCreated: '2019-03-02T18:30:26Z',
+    scopes: [],
+    refreshToken: '123456123456123456123456-refreshtoken',
+    expiresAt: null,
+    application: null,
+    ...params,
+  };
+}
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
index b8386dc859..7a4f1817b1 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
@@ -10,6 +10,7 @@ describe('Sentry Application Details', function() {
   let org;
   let orgId;
   let sentryApp;
+  let token;
   let wrapper;
   let createAppRequest;
   let editAppRequest;
@@ -118,6 +119,11 @@ describe('Sentry Application Details', function() {
         body: sentryApp,
       });
 
+      Client.addMockResponse({
+        url: `/sentry-apps/${sentryApp.slug}/api-tokens/`,
+        body: [],
+      });
+
       wrapper = mount(
         <SentryApplicationDetails params={{appSlug: sentryApp.slug, orgId}} />,
         TestStubs.routerContext()
@@ -141,9 +147,8 @@ describe('Sentry Application Details', function() {
     beforeEach(() => {
       sentryApp = TestStubs.SentryApp({
         status: 'internal',
-        installation: {uuid: 'xxxxxx'},
-        token: 'xxxx',
       });
+      token = TestStubs.SentryAppToken();
       sentryApp.events = ['issue'];
 
       Client.addMockResponse({
@@ -151,6 +156,11 @@ describe('Sentry Application Details', function() {
         body: sentryApp,
       });
 
+      Client.addMockResponse({
+        url: `/sentry-apps/${sentryApp.slug}/api-tokens/`,
+        body: [token],
+      });
+
       wrapper = mount(
         <SentryApplicationDetails params={{appSlug: sentryApp.slug, orgId}} />,
         TestStubs.routerContext()
@@ -164,9 +174,70 @@ describe('Sentry Application Details', function() {
           .prop('disabled')
       ).toBe(true);
     });
-    it('shows installationId and token', function() {
-      expect(wrapper.find('#installation').exists()).toBe(true);
-      expect(wrapper.find('#token').exists()).toBe(true);
+    it('shows tokens', function() {
+      expect(
+        wrapper
+          .find('PanelHeader')
+          .last()
+          .text()
+      ).toContain('Tokens');
+      expect(wrapper.find('TokenItem').exists()).toBe(true);
+    });
+  });
+
+  describe('Editing internal app tokens', () => {
+    beforeEach(() => {
+      sentryApp = TestStubs.SentryApp({
+        status: 'internal',
+      });
+      token = TestStubs.SentryAppToken();
+      sentryApp.events = ['issue'];
+
+      Client.addMockResponse({
+        url: `/sentry-apps/${sentryApp.slug}/`,
+        body: sentryApp,
+      });
+
+      Client.addMockResponse({
+        url: `/sentry-apps/${sentryApp.slug}/api-tokens/`,
+        body: [token],
+      });
+
+      wrapper = mount(
+        <SentryApplicationDetails params={{appSlug: sentryApp.slug, orgId}} />,
+        TestStubs.routerContext()
+      );
+    });
+    it('adding token to list', async function() {
+      Client.addMockResponse({
+        url: `/sentry-apps/${sentryApp.slug}/api-tokens/`,
+        method: 'POST',
+        body: [
+          TestStubs.SentryAppToken({
+            token: '392847329',
+            dateCreated: '2018-03-02T18:30:26Z',
+          }),
+        ],
+      });
+      wrapper.find('Button[data-test-id="token-add"]').simulate('click');
+      await tick();
+      wrapper.update();
+
+      const tokenItems = wrapper.find('TokenItem');
+      expect(tokenItems).toHaveLength(2);
+    });
+
+    it('removing token from list', async function() {
+      Client.addMockResponse({
+        url: `/sentry-apps/${sentryApp.slug}/api-tokens/${token.token}/`,
+        method: 'DELETE',
+        body: {},
+      });
+      wrapper.find('Button[data-test-id="token-delete"]').simulate('click');
+      await tick();
+      wrapper.update();
+
+      expect(wrapper.find('EmptyMessage').exists()).toBe(true);
     });
   });
 
@@ -186,6 +257,11 @@ describe('Sentry Application Details', function() {
         body: sentryApp,
       });
 
+      Client.addMockResponse({
+        url: `/sentry-apps/${sentryApp.slug}/api-tokens/`,
+        body: [],
+      });
+
       wrapper = mount(
         <SentryApplicationDetails params={{appSlug: sentryApp.slug, orgId}} />,
         TestStubs.routerContext()
diff --git a/tests/sentry/api/endpoints/test_sentry_apps.py b/tests/sentry/api/endpoints/test_sentry_apps.py
index 3e044e66bf..4aab163f61 100644
--- a/tests/sentry/api/endpoints/test_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_sentry_apps.py
@@ -106,11 +106,7 @@ class GetSentryAppsTest(SentryAppsTest):
             'isAlertable': self.internal_app.is_alertable,
             'verifyInstall': self.internal_app.verify_install,
             'overview': self.internal_app.overview,
-            'schema': {},
-            'installation': {
-                'uuid': self.install.uuid,
-            },
-            'token': self.install.api_token.token
+            'schema': {}
         } in json.loads(response.content)
 
         response_uuids = set(o['uuid'] for o in response.data)
@@ -146,10 +142,6 @@ class GetSentryAppsTest(SentryAppsTest):
             'verifyInstall': self.internal_app.verify_install,
             'overview': self.internal_app.overview,
             'schema': {},
-            'installation': {
-                'uuid': self.install.uuid,
-            },
-            'token': self.install.api_token.token
         } in json.loads(response.content)
 
         response_uuids = set(o['uuid'] for o in response.data)
diff --git a/tests/sentry/api/endpoints/test_sentry_internal_app_tokens.py b/tests/sentry/api/endpoints/test_sentry_internal_app_tokens.py
index 2eb8d4b5c1..5b0072e042 100644
--- a/tests/sentry/api/endpoints/test_sentry_internal_app_tokens.py
+++ b/tests/sentry/api/endpoints/test_sentry_internal_app_tokens.py
@@ -1,13 +1,16 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 
 from sentry.testutils import APITestCase
 from sentry.testutils.helpers import with_feature
+from sentry.utils import json
 from sentry.models import ApiToken
 
 
-class SentryInternalAppTokenCreationTest(APITestCase):
+class SentryInternalAppTokenTest(APITestCase):
     def setUp(self):
         self.user = self.create_user(email='boop@example.com')
         self.org = self.create_organization(owner=self.user, name='My Org')
@@ -23,6 +26,8 @@ class SentryInternalAppTokenCreationTest(APITestCase):
             args=[self.internal_sentry_app.slug],
         )
 
+
+class PostSentryInternalAppTokenTest(SentryInternalAppTokenTest):
     @with_feature('organizations:sentry-apps')
     def test_create_token(self):
         self.login_as(user=self.user)
@@ -74,3 +79,29 @@ class SentryInternalAppTokenCreationTest(APITestCase):
         response = self.client.post(self.url, format='json')
         assert response.status_code == 403
         assert response.data == 'Cannot generate more than 20 tokens for a single integration'
+
+
+class GetSentryInternalAppTokenTest(SentryInternalAppTokenTest):
+    @with_feature('organizations:sentry-apps')
+    def test_get_tokens(self):
+        self.login_as(self.user)
+
+        self.create_internal_integration(
+            name='OtherInternal',
+            organization=self.org,
+        )
+
+        token = ApiToken.objects.get(
+            application_id=self.internal_sentry_app.application_id,
+        )
+
+        response = self.client.get(self.url, format='json')
+
+        assert response.status_code == 200
+        response_content = json.loads(response.content)
+
+        # should not include tokens from other internal app
+        assert len(response_content) == 1
+
+        assert response_content[0]['id'] == six.text_type(token.id)
+        assert response_content[0]['token'] == token.token
