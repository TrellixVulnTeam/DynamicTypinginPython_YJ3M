commit da27ea50125d003ea356804fb0dfada270167876
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jun 8 15:47:23 2015 -0700

    Various improvements to checkbox handling

diff --git a/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx b/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
index d19d93c91c..a7f2263034 100644
--- a/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
@@ -6,23 +6,29 @@ var GroupStore = require("./groupStore");
 
 var SelectedGroupStore = Reflux.createStore({
   init() {
-    this.listenTo(GroupStore, this.onAggListChange);
-
     this.allSelected = false;
     this.anySelected = false;
     this.multiSelected = false;
 
-    this.selected = new Set();
+    this.records = {};
+
+    this.listenTo(GroupStore, this.onGroupChange, this.onGroupChange);
   },
 
-  onAggListChange() {
+  onGroupChange(itemIds) {
     var existingIds = new Set(GroupStore.getAllItemIds());
     // prune ids that no longer exist
-    this.selected.forEach((itemId) => {
+    for (var itemId in this.records) {
       if (!existingIds.has(itemId)) {
-        this.selected.delete(itemId);
+        delete this.records[itemId];
+      }
+    }
+    itemIds.forEach((itemId) => {
+      if (typeof this.records[itemId] === "undefined") {
+        this.records[itemId] = this.allSelected;
       }
     });
+    this.refresh();
     this.trigger();
   },
 
@@ -34,42 +40,37 @@ var SelectedGroupStore = Reflux.createStore({
   },
 
   getSelectedIds() {
-    if (this.allSelected) {
-      return new Set(GroupStore.getAllItemIds());
+    var selected = new Set();
+    for (var itemId in this.records) {
+      if (this.records[itemId] === true) {
+        selected.add(itemId);
+      }
     }
-    return this.selected;
+    return selected;
   },
 
   isSelected(itemId) {
-    return this.selected.has(itemId);
+    return this.records[itemId] === true;
   },
 
   clearAll() {
-    this.selected.clear();
+    this.records = {};
     this.allSelected = false;
     this.refresh();
     this.trigger();
   },
 
   toggleSelect(itemId) {
-    if (this.selected.has(itemId)) {
-      this.selected.delete(itemId);
-    } else {
-      this.selected.add(itemId);
-    }
+    this.records[itemId] = !this.records[itemId];
     this.refresh();
     this.trigger();
   },
 
   toggleSelectAll() {
     this.allSelected = !this.allSelected;
-    GroupStore.getAllItemIds().forEach((itemId) => {
-      if (this.allSelected) {
-        this.selected.add(itemId);
-      } else {
-        this.selected.delete(itemId);
-      }
-    });
+    for (var itemId in this.records) {
+      this.records[itemId] = this.allSelected;
+    }
     this.refresh();
     this.trigger();
   },
diff --git a/src/sentry/static/sentry/app/views/stream/group.jsx b/src/sentry/static/sentry/app/views/stream/group.jsx
index 34e7df2828..98097a9fe9 100644
--- a/src/sentry/static/sentry/app/views/stream/group.jsx
+++ b/src/sentry/static/sentry/app/views/stream/group.jsx
@@ -117,6 +117,8 @@ var StreamGroup = React.createClass({
     jQuery(el.getDOMNode()).click((event) => {
       if (event.target.tagName === 'A')
         return;
+      if (event.target.tagName === 'INPUT')
+        return;
       if (jQuery(event.target).parents('a').length !== 0)
         return;
       SelectedGroupStore.toggleSelect(this.state.data.id);
