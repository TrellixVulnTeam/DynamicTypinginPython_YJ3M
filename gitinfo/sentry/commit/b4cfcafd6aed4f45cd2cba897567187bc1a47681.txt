commit b4cfcafd6aed4f45cd2cba897567187bc1a47681
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Mar 2 15:06:39 2015 -0800

    Refactor access
    
    - Move access abstractions into sentry.auth.access
    - Change abstraction to be scope-based
    - Move all permission checks to use access helpers

diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index 9c3a7f22cd..a011866fb9 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -1,9 +1,10 @@
 from __future__ import absolute_import
 
+from sentry.auth import access
 from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import ScopedPermission
-from sentry.models import AuthIdentity, Organization, OrganizationMember
+from sentry.models import Organization
 
 
 class OrganizationPermission(ScopedPermission):
@@ -19,34 +20,10 @@ class OrganizationPermission(ScopedPermission):
             if self.is_project_key(request):
                 return False
             return request.auth.organization_id == organization.id
-        if request.user.is_superuser:
-            return True
-
-        try:
-            om = OrganizationMember.objects.get(
-                organization=organization,
-                user=request.user,
-            )
-        except OrganizationMember.DoesNotExist:
-            return False
-
-        try:
-            auth_identity = AuthIdentity.objects.get(
-                auth_provider__organization=organization.id,
-            )
-        except AuthIdentity.DoesNotExist:
-            pass
-        else:
-            # TODO(dcramer): we might simply want to change their scopes to
-            # something like 'org:read' since we'd still want them to know
-            # they're part of the org. Alternatively we introduce yet another
-            # scope that suggests extremely limited read.
-            if not auth_identity.is_valid(om):
-                return False
 
+        request.access = access.from_user(request.user, organization)
         allowed_scopes = set(self.scope_map[request.method])
-        current_scopes = om.scopes
-        return any(s in allowed_scopes for s in current_scopes)
+        return any(request.access.has_scope(s) for s in allowed_scopes)
 
 
 class OrganizationEndpoint(Endpoint):
diff --git a/src/sentry/auth/access.py b/src/sentry/auth/access.py
new file mode 100644
index 0000000000..595b0cb06e
--- /dev/null
+++ b/src/sentry/auth/access.py
@@ -0,0 +1,134 @@
+from __future__ import absolute_import
+
+__all__ = ['from_user', 'from_member', 'DEFAULT', 'SCOPES']
+
+from sentry.models import AuthIdentity, AuthProvider, OrganizationMember
+
+SCOPES = set([
+    'org:read',
+    'org:write',
+    'org:delete',
+    'team:read',
+    'team:write',
+    'team:delete',
+    'project:read',
+    'project:write',
+    'project:delete',
+    'event:read',
+    'event:write',
+    'event:delete',
+])
+
+
+class BaseAccess(object):
+    is_global = False
+    is_active = False
+    sso_is_valid = False
+    teams = ()
+    scopes = frozenset()
+
+    def has_scope(self, scope):
+        if not self.is_active:
+            return False
+        return scope in self.scopes
+
+    def has_team(self, team):
+        if not self.is_active:
+            return False
+        if self.is_global:
+            return True
+        return team in self._teams
+
+
+class Access(BaseAccess):
+    # TODO(dcramer): this is still a little gross, and ideally backend access
+    # would be based on the same scopes as API access so theres clarity in
+    # what things mean
+    def __init__(self, scopes, is_global, is_active, teams, sso_is_valid):
+        self.teams = teams
+        self.scopes = scopes
+
+        self.is_global = is_global
+        self.is_active = is_active
+        self.sso_is_valid = sso_is_valid
+
+
+def from_user(user, organization):
+    if user.is_superuser:
+        return Access(
+            scopes=SCOPES,
+            is_global=True,
+            is_active=True,
+            teams=(),
+            sso_is_valid=True,
+        )
+
+    if not organization:
+        return DEFAULT
+
+    try:
+        om = OrganizationMember.objects.get(
+            user=user,
+            organization=organization,
+        )
+    except OrganizationMember.DoesNotExist:
+        return DEFAULT
+
+    return from_member(om)
+
+
+def from_member(member):
+    # TODO(dcramer): we want to optimize this access pattern as its several
+    # network hops and needed in a lot of places
+    if member.has_global_access:
+        teams = ()
+    else:
+        teams = member.teams.all()
+
+    try:
+        auth_provider = AuthProvider.objects.get(
+            organization=member.organization_id,
+        )
+    except AuthProvider.DoesNotExist:
+        sso_is_valid = True
+    else:
+        try:
+            auth_identity = AuthIdentity.objects.get(
+                auth_provider=auth_provider,
+            )
+        except AuthIdentity.DoesNotExist:
+            sso_is_valid = False
+        else:
+            sso_is_valid = auth_identity.is_valid(member)
+
+    return Access(
+        is_global=member.has_global_access,
+        is_active=True,
+        sso_is_valid=sso_is_valid,
+        scopes=member.scopes,
+        teams=teams,
+    )
+
+
+class NoAccess(BaseAccess):
+    @property
+    def sso_is_valid(self):
+        return True
+
+    @property
+    def is_global(self):
+        return False
+
+    @property
+    def is_active(self):
+        return False
+
+    @property
+    def teams(self):
+        return ()
+
+    @property
+    def scopes(self):
+        return frozenset()
+
+DEFAULT = NoAccess()
diff --git a/src/sentry/templates/sentry/bases/organization.html b/src/sentry/templates/sentry/bases/organization.html
index c91fe461df..3d81d378ba 100644
--- a/src/sentry/templates/sentry/bases/organization.html
+++ b/src/sentry/templates/sentry/bases/organization.html
@@ -13,17 +13,17 @@
     <section id="page-header" class="toolbar">
       <div class="pull-right">
         {% block actions %}
-        {% if ACCESS.is_admin %}
-          {% if ACCESS.is_global %}
-            <a href="{% url 'sentry-create-team' organization.slug %}"
-               class="btn btn-small btn-primary">{% trans "New Team" %}</a>
-          {% endif %}
+        {% if ACCESS.org_write %}
+          <a href="{% url 'sentry-create-team' organization.slug %}"
+             class="btn btn-small btn-primary">{% trans "New Team" %}</a>
+        {% endif %}
+        {% if ACCESS.team_write %}
           <a href="{% url 'sentry-create-project' organization.slug %}"
              class="btn btn-small btn-primary">{% trans "New Project" %}</a>
-          {% if ACCESS.is_global %}
-            <a href="{% url 'sentry-create-organization-member' organization.slug %}"
-               class="btn btn-small btn-primary">{% trans "New Member" %}</a>
-          {% endif %}
+        {% endif %}
+        {% if ACCESS.org_write %}
+          <a href="{% url 'sentry-create-organization-member' organization.slug %}"
+             class="btn btn-small btn-primary">{% trans "New Member" %}</a>
         {% endif %}
         {% endblock %}
       </div>
@@ -39,7 +39,7 @@
         {% trans "Teams" %}
       </a>
     </li>
-    {% if ACCESS.is_global and ACCESS.is_admin %}
+    {% if ACCESS.org_read %}
     <li class="{% block org_stats_nav %}{% endblock %}">
       <a href="{% url 'sentry-organization-stats' organization.slug %}">
         {% trans "Stats" %}
@@ -55,7 +55,7 @@
         {% trans "Members" %}
       </a>
     </li>
-    {% if ACCESS.is_owner %}
+    {% if ACCESS.org_write %}
       {% feature organizations:sso organization %}
       <li class="{% block org_auth_settings_nav %}{% endblock %}">
         <a href="{% url 'sentry-organization-auth-settings' organization.slug %}">
diff --git a/src/sentry/templates/sentry/organization-settings.html b/src/sentry/templates/sentry/organization-settings.html
index 4d64f17140..7f106ac6f2 100644
--- a/src/sentry/templates/sentry/organization-settings.html
+++ b/src/sentry/templates/sentry/organization-settings.html
@@ -26,7 +26,7 @@
     </fieldset>
 
     <fieldset class="form-actions">
-      {% if ACCESS.is_owner and ACCESS.is_global %}
+      {% if ACCESS.org_delete %}
         <a href="{% url 'sentry-remove-organization' organization.slug %}" class="btn btn-danger">{% trans "Remove Organization" %}</a>
       {% endif %}
       <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 6c2035518d..ab18242800 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -48,7 +48,7 @@
             </fieldset>
             <div class="form-actions">
                 <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
-                {% if ACCESS.is_owner %}
+                {% if ACCESS.project_delete %}
                     {% if not project.is_internal_project %}
                         <a href="{% url 'sentry-remove-project' project.organization.slug project.slug %}" class="btn btn-danger">{% trans "Remove Project" %}</a>
                     {% else %}
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 2f059bb256..630da3c496 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -12,114 +12,15 @@ from django.views.decorators.csrf import csrf_protect
 from django.views.generic import View
 from sudo.views import redirect_to_sudo
 
+from sentry.auth import access
 from sentry.models import (
-    AuthIdentity, Organization, OrganizationMember, OrganizationMemberType,
-    OrganizationStatus, Project, Team
+    Organization, OrganizationStatus, Project, Team
 )
 from sentry.web.helpers import get_login_url, render_to_response
 
-
 ERR_MISSING_SSO_LINK = _('You need to link your account with the SSO provider to continue.')
 
 
-class NoAccess(object):
-    is_global = False
-    is_sso_valid = False
-
-    def has_access(self, type):
-        return False
-
-    def has_team_access(self, team):
-        return False
-
-
-class Access(object):
-    # TODO(dcramer): this is still a little gross, and ideally backend access
-    # would be based on the same scopes as API access so theres clarity in
-    # what things mean
-    def __init__(self, type, is_global=False, is_sso_valid=False, teams=()):
-        self._is_global = is_global
-        self._is_sso_valid = is_sso_valid
-        self._teams = teams
-        self._type = type
-
-    def has_access(self, type):
-        if self._type is None:
-            return False
-        return self._type <= type
-
-    def has_team_access(self, team):
-        if self._type is None:
-            return False
-        if self._is_global:
-            return True
-        return team in self._teams
-
-    @property
-    def is_admin(self):
-        if self._type is None:
-            return False
-        return self.has_access(OrganizationMemberType.ADMIN)
-
-    @property
-    def is_global(self):
-        return self._is_global
-
-    @property
-    def is_owner(self):
-        if self._type is None:
-            return False
-        return self.has_access(OrganizationMemberType.OWNER)
-
-    @property
-    def is_sso_valid(self):
-        return self._is_sso_valid
-
-    @classmethod
-    def from_user(cls, user, organization):
-        if user.is_superuser:
-            return cls(
-                is_global=True,
-                is_sso_valid=True,
-                type=OrganizationMemberType.OWNER,
-            )
-
-        if not organization:
-            return NoAccess()
-
-        try:
-            om = OrganizationMember.objects.get(
-                user=user, organization=organization
-            )
-        except OrganizationMember.DoesNotExist:
-            return cls(type=None)
-
-        return cls.from_member(om)
-
-    @classmethod
-    def from_member(cls, member):
-        if member.has_global_access:
-            teams = ()
-        else:
-            teams = member.teams.all()
-
-        try:
-            auth_identity = AuthIdentity.objects.get(
-                auth_provider__organization=member.organization_id,
-            )
-        except AuthIdentity.DoesNotExist:
-            is_sso_valid = True
-        else:
-            is_sso_valid = auth_identity.is_valid(member)
-
-        return cls(
-            is_global=member.has_global_access,
-            is_sso_valid=is_sso_valid,
-            type=member.type,
-            teams=teams,
-        )
-
-
 class OrganizationMixin(object):
     # TODO(dcramer): move the implicit organization logic into its own class
     # as it's only used in a single location and over complicates the rest of
@@ -243,7 +144,7 @@ class BaseView(View, OrganizationMixin):
         return self.handle(request, *args, **kwargs)
 
     def get_access(self, request, *args, **kwargs):
-        return NoAccess()
+        return access.DEFAULT
 
     def convert_args(self, request, *args, **kwargs):
         return (args, kwargs)
@@ -313,26 +214,33 @@ class OrganizationView(BaseView):
     valid_sso_required = True
 
     def get_access(self, request, organization, *args, **kwargs):
-        return Access.from_user(request.user, organization)
+        return access.from_user(request.user, organization)
 
     def get_context_data(self, request, organization, **kwargs):
         context = super(OrganizationView, self).get_context_data(request)
         context['organization'] = organization
         context['TEAM_LIST'] = self.get_team_list(request.user, organization)
-        context['ACCESS'] = request.access
+        context['ACCESS'] = {
+            'team_write': request.access.has_scope('team:write'),
+            'team_delete': request.access.has_scope('team:delete'),
+            'org_write': request.access.has_scope('org:write'),
+            'org_delete': request.access.has_scope('org:delete'),
+            'project_write': request.access.has_scope('project:write'),
+            'project_delete': request.access.has_scope('project:delete'),
+        }
         return context
 
     def has_permission(self, request, organization, *args, **kwargs):
         if organization is None:
             return False
-        if self.valid_sso_required and not request.access.is_sso_valid:
+        if self.valid_sso_required and not request.access.sso_is_valid:
             return False
         return True
 
     def handle_permission_required(self, request, organization, *args, **kwargs):
         needs_link = (
             organization and request.user.is_authenticated()
-            and self.valid_sso_required and not request.access.is_sso_valid
+            and self.valid_sso_required and not request.access.sso_is_valid
         )
 
         if needs_link:
