commit d92b0f623e0420499760654fcf0bd18955475c72
Author: David Cramer <dcramer@gmail.com>
Date:   Tue May 7 02:49:12 2013 -0700

    Switch to a custom user model for future changes

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 2f34829ade..079ffd0cd7 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -209,6 +209,8 @@ AUTHENTICATION_BACKENDS = (
     'sentry.utils.auth.EmailAuthBackend',
 )
 
+AUTH_USER_MODEL = 'sentry.User'
+
 SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"
 
 TWITTER_CONSUMER_KEY = ''
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 02de4103d5..478371f896 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -15,13 +15,12 @@ import logging
 import uuid
 import zlib
 
-from django.contrib.auth.models import User
 from django.utils.encoding import smart_str
 
 from sentry.app import env
 from sentry.conf import settings
 from sentry.exceptions import InvalidTimestamp
-from sentry.models import Project, ProjectKey, TeamMember, Team
+from sentry.models import Project, ProjectKey, TeamMember, Team, User
 from sentry.plugins import plugins
 from sentry.tasks.store import preprocess_event
 from sentry.utils import is_float, json
diff --git a/src/sentry/management/commands/repair.py b/src/sentry/management/commands/repair.py
index 9455049acf..d691075fbe 100644
--- a/src/sentry/management/commands/repair.py
+++ b/src/sentry/management/commands/repair.py
@@ -17,9 +17,8 @@ class Command(BaseCommand):
     )
 
     def handle(self, **options):
-        from django.contrib.auth.models import User
         from django.template.defaultfilters import slugify
-        from sentry.models import Project, Team, ProjectKey
+        from sentry.models import Project, Team, ProjectKey, User
         from sentry.utils.models import update
 
         if options.get('owner'):
diff --git a/src/sentry/migrations/0098_auto__add_user__chg_field_team_owner__chg_field_activity_user__chg_fie.py b/src/sentry/migrations/0098_auto__add_user__chg_field_team_owner__chg_field_activity_user__chg_fie.py
new file mode 100644
index 0000000000..66c199441b
--- /dev/null
+++ b/src/sentry/migrations/0098_auto__add_user__chg_field_team_owner__chg_field_activity_user__chg_fie.py
@@ -0,0 +1,311 @@
+# -*- coding: utf-8 -*-
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        pass
+
+    def backwards(self, orm):
+        pass
+
+    models = {
+        u'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        u'auth.permission': {
+            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        u'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        u'sentry.accessgroup': {
+            'Meta': {'unique_together': "(('team', 'name'),)", 'object_name': 'AccessGroup'},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['sentry.User']", 'symmetrical': 'False'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['sentry.Project']", 'symmetrical': 'False'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '50'})
+        },
+        u'sentry.activity': {
+            'Meta': {'object_name': 'Activity'},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Event']", 'null': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Group']", 'null': 'True'}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Project']"}),
+            'type': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.User']", 'null': 'True'})
+        },
+        u'sentry.alert': {
+            'Meta': {'object_name': 'Alert'},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Group']", 'null': 'True'}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Project']"}),
+            'related_groups': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'related_alerts'", 'symmetrical': 'False', 'through': u"orm['sentry.AlertRelatedGroup']", 'to': u"orm['sentry.Group']"}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        u'sentry.alertrelatedgroup': {
+            'Meta': {'unique_together': "(('group', 'alert'),)", 'object_name': 'AlertRelatedGroup'},
+            'alert': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Alert']"}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Group']"}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
+        },
+        u'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': u"orm['sentry.Group']"}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'time_spent': ('django.db.models.fields.FloatField', [], {'null': 'True'})
+        },
+        u'sentry.eventmapping': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'EventMapping'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Group']"}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Project']"})
+        },
+        u'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        u'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': u"orm['sentry.Group']"}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': u"orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': u"orm['sentry.User']"})
+        },
+        u'sentry.groupcountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'GroupCountByMinute', 'db_table': "'sentry_messagecountbyminute'"},
+            'date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Group']"}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        u'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Group']"}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        u'sentry.grouptag': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'GroupTag', 'db_table': "'sentry_messagefiltervalue'"},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Group']"}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        u'sentry.grouptagkey': {
+            'Meta': {'unique_together': "(('project', 'group', 'key'),)", 'object_name': 'GroupTagKey'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Group']"}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Project']", 'null': 'True'}),
+            'values_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        u'sentry.lostpasswordhash': {
+            'Meta': {'object_name': 'LostPasswordHash'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.User']", 'unique': 'True'})
+        },
+        u'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        u'sentry.pendingteammember': {
+            'Meta': {'unique_together': "(('team', 'email'),)", 'object_name': 'PendingTeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pending_member_set'", 'to': u"orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '50'})
+        },
+        u'sentry.project': {
+            'Meta': {'unique_together': "(('team', 'slug'),)", 'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_owned_project_set'", 'null': 'True', 'to': u"orm['sentry.User']"}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'null': 'True'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Team']", 'null': 'True'})
+        },
+        u'sentry.projectcountbyminute': {
+            'Meta': {'unique_together': "(('project', 'date'),)", 'object_name': 'ProjectCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        u'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'key_set'", 'to': u"orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.User']", 'null': 'True'}),
+            'user_added': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'keys_added_set'", 'null': 'True', 'to': u"orm['sentry.User']"})
+        },
+        u'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Project']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        u'sentry.searchdocument': {
+            'Meta': {'unique_together': "(('project', 'group'),)", 'object_name': 'SearchDocument'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_changed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Group']"}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Project']"}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'total_events': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'})
+        },
+        u'sentry.searchtoken': {
+            'Meta': {'unique_together': "(('document', 'field', 'token'),)", 'object_name': 'SearchToken'},
+            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'token_set'", 'to': u"orm['sentry.SearchDocument']"}),
+            'field': ('django.db.models.fields.CharField', [], {'default': "'text'", 'max_length': '64'}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'token': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        u'sentry.tagkey': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'TagKey', 'db_table': "'sentry_filterkey'"},
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Project']"}),
+            'values_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        u'sentry.tagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'TagValue', 'db_table': "'sentry_filtervalue'"},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        u'sentry.team': {
+            'Meta': {'object_name': 'Team'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'team_memberships'", 'symmetrical': 'False', 'through': u"orm['sentry.TeamMember']", 'to': u"orm['sentry.User']"}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.User']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
+        },
+        u'sentry.teammember': {
+            'Meta': {'unique_together': "(('team', 'user'),)", 'object_name': 'TeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': u"orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '50'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_teammember_set'", 'to': u"orm['sentry.User']"})
+        },
+        u'sentry.user': {
+            'Meta': {'object_name': 'User', 'db_table': "'auth_user'"},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        u'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
+            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.Project']", 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['sentry.User']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        }
+    }
+
+    complete_apps = ['sentry']
\ No newline at end of file
diff --git a/src/sentry/models.py b/src/sentry/models.py
index bd6eab0847..9f80f0dbd0 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -19,7 +19,7 @@ from hashlib import md5
 from picklefield.fields import PickledObjectField
 from south.modelsinspector import add_introspection_rules
 
-from django.contrib.auth.models import User
+from django.contrib.auth.models import AbstractUser
 from django.contrib.auth.signals import user_logged_in
 from django.core.urlresolvers import reverse
 from django.db import models
@@ -81,6 +81,13 @@ def sane_repr(*attrs):
     return _repr
 
 
+class User(Model, AbstractUser):
+    objects = BaseManager(cache_fields=['pk'])
+
+    class Meta:
+        db_table = 'auth_user'
+
+
 class Option(Model):
     """
     Global options which apply in most situations as defaults,
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index f9a644e7a5..8ce9082ace 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -6,10 +6,9 @@ sentry.plugins.bases.notify
 :license: BSD, see LICENSE for more details.
 """
 from django import forms
-from django.contrib.auth.models import User
 from django.utils.translation import ugettext_lazy as _
 from sentry.plugins import Plugin
-from sentry.models import UserOption, Project
+from sentry.models import UserOption, Project, User
 from sentry.utils.cache import cache
 from sentry.constants import MEMBER_USER
 
diff --git a/src/sentry/testutils.py b/src/sentry/testutils.py
index b784c7f2a5..863180406f 100644
--- a/src/sentry/testutils.py
+++ b/src/sentry/testutils.py
@@ -17,7 +17,6 @@ from sentry.utils import json
 
 from django.conf import settings as django_settings
 from django.contrib.auth import login
-from django.contrib.auth.models import User
 from django.core.cache import cache
 from django.core.management import call_command
 from django.core.urlresolvers import reverse
@@ -27,8 +26,8 @@ from django.test import TestCase, TransactionTestCase
 from django.test.client import Client
 from django.utils.importlib import import_module
 
-from sentry.models import (Project, ProjectOption, Option, Team, Group,
-    Event)
+from sentry.models import (
+    Project, ProjectOption, Option, Team, Group, Event, User)
 from sentry.utils.compat import pickle
 from sentry.utils.strings import decompress
 
diff --git a/src/sentry/utils/auth.py b/src/sentry/utils/auth.py
index 9ce134cdb9..466708a743 100644
--- a/src/sentry/utils/auth.py
+++ b/src/sentry/utils/auth.py
@@ -6,9 +6,9 @@ sentry.utils.auth
 :license: BSD, see LICENSE for more details.
 """
 from django.conf import settings as dj_settings
-from django.contrib.auth.models import User
 from django.contrib.auth.backends import ModelBackend
 from sentry.conf import settings
+from sentry.models import User
 
 
 def parse_auth_header(header):
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index f9b632bc57..f61710990e 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -9,7 +9,7 @@ import datetime
 import logging
 from functools import wraps
 
-from django.contrib.auth.models import AnonymousUser, User
+from django.contrib.auth.models import AnonymousUser
 from django.core.urlresolvers import reverse
 from django.db.models import Sum, Q
 from django.http import HttpResponse, HttpResponseForbidden, HttpResponseRedirect
@@ -19,14 +19,16 @@ from django.views.decorators.csrf import csrf_exempt
 from django.views.decorators.vary import vary_on_cookie
 from django.views.generic.base import View as BaseView
 from sentry.conf import settings
-from sentry.constants import (MEMBER_USER, STATUS_MUTED, STATUS_UNRESOLVED,
-    STATUS_RESOLVED)
-from sentry.coreapi import (project_from_auth_vars,
-    decode_and_decompress_data, safely_load_json_string, validate_data,
-    insert_data_to_database, APIError, APIForbidden, extract_auth_vars)
+from sentry.constants import (
+    MEMBER_USER, STATUS_MUTED, STATUS_UNRESOLVED, STATUS_RESOLVED)
+from sentry.coreapi import (
+    project_from_auth_vars, decode_and_decompress_data,
+    safely_load_json_string, validate_data, insert_data_to_database, APIError,
+    APIForbidden, extract_auth_vars)
 from sentry.exceptions import InvalidData
-from sentry.models import (Group, GroupBookmark, Project, ProjectCountByMinute,
-    TagValue, Activity)
+from sentry.models import (
+    Group, GroupBookmark, Project, ProjectCountByMinute, TagValue, Activity,
+    User)
 from sentry.plugins import plugins
 from sentry.utils import json
 from sentry.utils.cache import cache
diff --git a/src/sentry/web/forms/__init__.py b/src/sentry/web/forms/__init__.py
index a48c603ffb..6e4c7fdcd6 100644
--- a/src/sentry/web/forms/__init__.py
+++ b/src/sentry/web/forms/__init__.py
@@ -6,10 +6,10 @@ sentry.web.forms
 :license: BSD, see LICENSE for more details.
 """
 from django import forms
-from django.contrib.auth.models import User
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.interfaces import Http
+from sentry.models import User
 from sentry.web.forms.fields import RadioFieldRenderer
 
 
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 0dcc007173..134e2f3927 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -8,12 +8,11 @@ sentry.web.forms.accounts
 
 from django import forms
 from django.contrib.auth import authenticate
-from django.contrib.auth.models import User
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.conf import settings
 from sentry.constants import EMPTY_PASSWORD_VALUES
-from sentry.models import UserOption
+from sentry.models import UserOption, User
 
 
 class RegistrationForm(forms.ModelForm):
diff --git a/src/sentry/web/forms/fields.py b/src/sentry/web/forms/fields.py
index 5cce8e3957..bab94a044b 100644
--- a/src/sentry/web/forms/fields.py
+++ b/src/sentry/web/forms/fields.py
@@ -5,7 +5,6 @@ sentry.web.forms.teams
 :copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-from django.contrib.auth.models import User
 from django.core.validators import URLValidator
 from django.forms.widgets import RadioFieldRenderer, TextInput, Textarea
 from django.forms import CharField, IntegerField, ValidationError
@@ -13,6 +12,7 @@ from django.utils.encoding import force_unicode
 from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
 
+from sentry.models import User
 
 # Special case origins that don't fit the normal regex pattern, but are valid
 WHITELIST_ORIGINS = ('*', 'localhost')
diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index d6a207996f..f31d07205e 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -8,13 +8,12 @@ sentry.web.forms.projects
 import itertools
 from django import forms
 from django.contrib.auth import authenticate
-from django.contrib.auth.models import User
 from django.utils.translation import ugettext_lazy as _
 from sentry.constants import EMPTY_PASSWORD_VALUES
-from sentry.models import Project, ProjectOption
+from sentry.models import Project, ProjectOption, User
 from sentry.permissions import can_set_public_projects
-from sentry.web.forms.fields import (RadioFieldRenderer, UserField, OriginsField,
-    RangeField, get_team_choices)
+from sentry.web.forms.fields import (
+    RadioFieldRenderer, UserField, OriginsField, RangeField, get_team_choices)
 
 
 BLANK_CHOICE = [("", "")]
diff --git a/src/sentry/web/frontend/admin.py b/src/sentry/web/frontend/admin.py
index a2c77a026c..d1330b5e99 100644
--- a/src/sentry/web/frontend/admin.py
+++ b/src/sentry/web/frontend/admin.py
@@ -11,7 +11,6 @@ import pkg_resources
 import sys
 import uuid
 
-from django.contrib.auth.models import User
 from django.conf import settings as dj_settings
 from django.core.context_processors import csrf
 from django.core.mail import send_mail
@@ -24,13 +23,14 @@ from django.views.decorators.csrf import csrf_protect
 
 from sentry.app import env
 from sentry.conf import settings
-from sentry.models import Team, Project, GroupCountByMinute
+from sentry.models import Team, Project, GroupCountByMinute, User
 from sentry.plugins import plugins
 from sentry.utils.http import absolute_uri
-from sentry.web.forms import NewUserForm, ChangeUserForm, RemoveUserForm, TestEmailForm
+from sentry.web.forms import (
+    NewUserForm, ChangeUserForm, RemoveUserForm, TestEmailForm)
 from sentry.web.decorators import requires_admin
-from sentry.web.helpers import (render_to_response, plugin_config,
-    render_to_string)
+from sentry.web.helpers import (
+    render_to_response, plugin_config, render_to_string)
 
 
 def configure_plugin(request, slug):
diff --git a/src/sentry/web/frontend/teams.py b/src/sentry/web/frontend/teams.py
index 8031334919..e254b503f8 100644
--- a/src/sentry/web/frontend/teams.py
+++ b/src/sentry/web/frontend/teams.py
@@ -6,7 +6,6 @@ sentry.web.frontend.teams
 :license: BSD, see LICENSE for more details.
 """
 from django.contrib import messages
-from django.contrib.auth.models import User
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
@@ -14,7 +13,7 @@ from django.views.decorators.csrf import csrf_protect
 from django.utils.translation import ugettext as _
 
 from sentry.constants import MEMBER_USER, MEMBER_OWNER
-from sentry.models import PendingTeamMember, TeamMember, AccessGroup
+from sentry.models import PendingTeamMember, TeamMember, AccessGroup, User
 from sentry.permissions import (can_add_team_member, can_remove_team, can_create_projects,
     can_create_teams, can_edit_team_member, can_remove_team_member,
     Permissions)
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index b6e9029069..8c779ef433 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -6,12 +6,11 @@ import datetime
 import mock
 
 from django.conf import settings as django_settings
-from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
 from django.utils import timezone
 
 from raven import Client
-from sentry.models import Group, Event, Project
+from sentry.models import Group, Event, Project, User
 from sentry.testutils import TestCase
 from sentry.utils.settings import (
     validate_settings, ConfigurationError, import_string)
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index a5d513c1c9..cd7ab5db10 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -5,9 +5,7 @@ from __future__ import absolute_import
 import datetime
 import mock
 
-from django.contrib.auth.models import User
-
-from sentry.models import Project
+from sentry.models import Project, User
 from sentry.exceptions import InvalidTimestamp
 from sentry.coreapi import (project_from_id, project_from_api_key_and_id,
     extract_auth_vars, project_from_auth_vars, APIUnauthorized, APIForbidden,
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 0ce27f6f9d..87cec56cbc 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -6,13 +6,12 @@ import datetime
 import mock
 import pytest
 
-from django.contrib.auth.models import User
 from django.utils import timezone
 from sentry.constants import MEMBER_OWNER, MEMBER_USER
 from sentry.interfaces import Interface
 from sentry.manager import get_checksum_from_event
 from sentry.models import (Event, Group, Project, GroupCountByMinute, ProjectCountByMinute,
-    SearchDocument, Team, EventMapping)
+    SearchDocument, Team, EventMapping, User)
 from sentry.utils.db import has_trending  # NOQA
 from sentry.testutils import TestCase
 
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index 76ff0e8f2e..d74cda2c25 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -7,13 +7,12 @@ import mock
 from datetime import timedelta
 from django.core import mail
 from django.core.urlresolvers import reverse
-from django.contrib.auth.models import User
 from django.utils import timezone
 from sentry.constants import MINUTE_NORMALIZATION
 from sentry.models import (
     Project, ProjectKey, Group, Event, Team,
     GroupTag, GroupCountByMinute, TagValue, PendingTeamMember,
-    LostPasswordHash, Alert)
+    LostPasswordHash, Alert, User)
 from sentry.testutils import TestCase, fixture
 
 
diff --git a/tests/sentry/permissions/tests.py b/tests/sentry/permissions/tests.py
index 0d7a5f644c..6bef5113fb 100644
--- a/tests/sentry/permissions/tests.py
+++ b/tests/sentry/permissions/tests.py
@@ -2,8 +2,9 @@
 
 from __future__ import absolute_import
 
-from django.contrib.auth.models import User, AnonymousUser
+from django.contrib.auth.models import AnonymousUser
 from sentry.permissions import can_create_projects, can_set_public_projects
+from sentry.models import User
 from sentry.testutils import TestCase
 
 
diff --git a/tests/sentry/plugins/bases/issue/tests.py b/tests/sentry/plugins/bases/issue/tests.py
index 568d5c0983..5335bd2616 100644
--- a/tests/sentry/plugins/bases/issue/tests.py
+++ b/tests/sentry/plugins/bases/issue/tests.py
@@ -4,8 +4,9 @@ from __future__ import absolute_import
 
 import mock
 
-from django.contrib.auth.models import User
 from social_auth.models import UserSocialAuth
+
+from sentry.models import User
 from sentry.plugins.bases.issue import IssuePlugin
 from sentry.testutils import TestCase
 
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 6c7634bcb4..3a5d25ebaf 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -227,8 +227,7 @@ class MailProcessorTest(TestCase):
                          sorted(p.get_send_to(project)))
 
     def test_get_emails_for_users(self):
-        from django.contrib.auth.models import User
-        from sentry.models import UserOption
+        from sentry.models import UserOption, User
 
         user = User.objects.create(username='foo', email='foo@example.com')
         user2 = User.objects.create(username='baz', email='baz@example.com')
@@ -242,8 +241,7 @@ class MailProcessorTest(TestCase):
                 sorted([user.email, 'foobaz@example.com']))
 
     def test_get_sendable_users(self):
-        from django.contrib.auth.models import User
-        from sentry.models import Project, UserOption
+        from sentry.models import Project, UserOption, User
 
         user = User.objects.create(username='foo', email='foo@example.com', is_active=True)
         user2 = User.objects.create(username='baz', email='baz@example.com', is_active=True)
diff --git a/tests/sentry/signals/tests.py b/tests/sentry/signals/tests.py
index 9521f56429..d36c2ace63 100644
--- a/tests/sentry/signals/tests.py
+++ b/tests/sentry/signals/tests.py
@@ -2,10 +2,8 @@
 
 from __future__ import absolute_import
 
-from django.contrib.auth.models import User
 from sentry.constants import MEMBER_OWNER
-from sentry.models import Project, Team
-
+from sentry.models import Project, Team, User
 from sentry.testutils import TestCase
 
 
diff --git a/tests/sentry/udp/tests.py b/tests/sentry/udp/tests.py
index 15bbf51a1f..48011fcd62 100644
--- a/tests/sentry/udp/tests.py
+++ b/tests/sentry/udp/tests.py
@@ -2,10 +2,8 @@
 
 from __future__ import absolute_import
 
-from django.contrib.auth.models import User
-from sentry.models import Project
+from sentry.models import Project, User
 from sentry.services.udp import SentryUDPServer
-
 from sentry.testutils import TestCase, get_auth_header
 
 
diff --git a/tests/sentry/utils/auth/tests.py b/tests/sentry/utils/auth/tests.py
index 9bb3c93290..5445a7625b 100644
--- a/tests/sentry/utils/auth/tests.py
+++ b/tests/sentry/utils/auth/tests.py
@@ -1,8 +1,8 @@
 from __future__ import absolute_import
 
-from sentry.utils.auth import EmailAuthBackend
-from django.contrib.auth.models import User
+from sentry.models import User
 from sentry.testutils import TestCase
+from sentry.utils.auth import EmailAuthBackend
 
 
 class EmailAuthBackendTest(TestCase):
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index 9654073380..a7bc6a0374 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -3,9 +3,8 @@
 from __future__ import absolute_import
 
 import mock
-from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
-from sentry.models import Team, Project, TeamMember, AccessGroup
+from sentry.models import Team, Project, TeamMember, AccessGroup, User
 from sentry.testutils import TestCase, fixture, before
 from sentry.utils import json
 
diff --git a/tests/sentry/web/forms/accounts/tests.py b/tests/sentry/web/forms/accounts/tests.py
index 5911886a8d..6762a3173a 100644
--- a/tests/sentry/web/forms/accounts/tests.py
+++ b/tests/sentry/web/forms/accounts/tests.py
@@ -1,6 +1,6 @@
-from django.contrib.auth.models import User
-from sentry.web.forms.accounts import AccountSettingsForm
+from sentry.models import User
 from sentry.testutils import TestCase
+from sentry.web.forms.accounts import AccountSettingsForm
 
 
 class AccountSettingsFormTest(TestCase):
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index 1c02c265e7..f5e4dbc8fb 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -4,10 +4,9 @@ from __future__ import absolute_import
 
 import mock
 
-from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
 from django.http import HttpRequest
-from sentry.models import UserOption, LostPasswordHash
+from sentry.models import UserOption, LostPasswordHash, User
 from sentry.testutils import TestCase, fixture, before
 from sentry.web.frontend.accounts import login_redirect
 from social_auth.models import UserSocialAuth
diff --git a/tests/sentry/web/frontend/teams/tests.py b/tests/sentry/web/frontend/teams/tests.py
index acf21e7d75..d5320efbd6 100644
--- a/tests/sentry/web/frontend/teams/tests.py
+++ b/tests/sentry/web/frontend/teams/tests.py
@@ -4,11 +4,11 @@ from __future__ import absolute_import
 
 import mock
 
-from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
 
 from sentry.constants import MEMBER_OWNER, MEMBER_USER
-from sentry.models import Team, TeamMember, PendingTeamMember, AccessGroup, Project
+from sentry.models import (
+    Team, TeamMember, PendingTeamMember, AccessGroup, Project, User)
 from sentry.testutils import TestCase, fixture, before
 
 
@@ -62,6 +62,7 @@ class NewTeamTest(BaseTeamTest):
         resp = self.client.post(self.path, {
             'name': 'Test Team',
             'slug': 'test',
+            'owner': self.user.username,
         })
         self.assertNotEquals(resp.status_code, 200)
 
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/tests.py
index b1da4578d6..c02d227355 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/tests.py
@@ -5,12 +5,11 @@ from __future__ import absolute_import
 import logging
 import json
 
-from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
 
 from sentry.conf import settings
 from sentry.constants import MEMBER_USER
-from sentry.models import Group, Project, TeamMember, Team
+from sentry.models import Group, Project, TeamMember, Team, User
 from sentry.testutils import TestCase, fixture, before
 
 logger = logging.getLogger(__name__)
