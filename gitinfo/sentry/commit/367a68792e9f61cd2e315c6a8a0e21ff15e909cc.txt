commit 367a68792e9f61cd2e315c6a8a0e21ff15e909cc
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Aug 12 10:44:59 2015 -0700

    Remove various permission hooks (unused/invalid)

diff --git a/src/sentry/api/endpoints/organization_teams.py b/src/sentry/api/endpoints/organization_teams.py
index 382066d454..63353364e5 100644
--- a/src/sentry/api/endpoints/organization_teams.py
+++ b/src/sentry/api/endpoints/organization_teams.py
@@ -8,7 +8,6 @@ from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.team import TeamWithProjectsSerializer
 from sentry.models import AuditLogEntryEvent, Team, TeamStatus
-from sentry.permissions import can_create_teams
 
 
 class TeamSerializer(serializers.Serializer):
@@ -53,9 +52,6 @@ class OrganizationTeamsEndpoint(OrganizationEndpoint):
             }}
 
         """
-        if not can_create_teams(request.user, organization):
-            return Response(status=403)
-
         serializer = TeamSerializer(data=request.DATA)
 
         if serializer.is_valid():
diff --git a/src/sentry/api/endpoints/team_project_index.py b/src/sentry/api/endpoints/team_project_index.py
index ab578f9393..791f82b39e 100644
--- a/src/sentry/api/endpoints/team_project_index.py
+++ b/src/sentry/api/endpoints/team_project_index.py
@@ -7,7 +7,6 @@ from sentry.api.base import DocSection
 from sentry.api.bases.team import TeamEndpoint
 from sentry.api.serializers import serialize
 from sentry.models import Project
-from sentry.permissions import can_create_projects
 
 
 class ProjectSerializer(serializers.ModelSerializer):
@@ -44,9 +43,6 @@ class TeamProjectIndexEndpoint(TeamEndpoint):
             }}
 
         """
-        if not can_create_projects(user=request.user, team=team):
-            return Response(status=403)
-
         serializer = ProjectSerializer(data=request.DATA)
 
         if serializer.is_valid():
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index e5d1a1f2c2..b6d1009423 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -558,7 +558,6 @@ SENTRY_FEATURES = {
     'organizations:create': True,
     'organizations:sso': False,
     'projects:quotas': True,
-    'teams:create': True,
 }
 
 # Default time zone for localization in the UI.
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 83c1713a78..f940a22458 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -9,7 +9,6 @@ default_manager = FeatureManager()
 default_manager.add('auth:register')
 default_manager.add('organizations:create')
 default_manager.add('organizations:sso', OrganizationFeature)
-default_manager.add('teams:create', OrganizationFeature)
 default_manager.add('projects:quotas', ProjectFeature)
 
 # expose public api
diff --git a/src/sentry/permissions.py b/src/sentry/permissions.py
index 17944603c4..5b24a99d10 100644
--- a/src/sentry/permissions.py
+++ b/src/sentry/permissions.py
@@ -7,199 +7,20 @@ sentry.permissions
 """
 from __future__ import absolute_import
 
-import six
-
-from django.db.models import Q
-from functools import wraps
-
-from sentry import features
 from sentry.models import OrganizationMemberType
-from sentry.utils.cache import cached_for_request
-
-
-class Permission(object):
-    def __init__(self, name, label):
-        self.name = name
-        self.label = label
-
-    def __unicode__(self):
-        return self.name
-
-    def __eq__(self, other):
-        return six.text_type(self) == six.text_type(other)
-
-
-class Permissions(object):
-    ADD_ORGANIZATION = Permission('add_organization', 'create new organizations')
-    ADD_TEAM = Permission('add_team', 'create new teams')
-    ADD_PROJECT = Permission('add_project', 'create new projects')
-    ADD_MEMBER = Permission('add_organization_member', 'add an organization member')
-
-
-def requires_login(func):
-    @wraps(func)
-    def wrapped(user, *args, **kwargs):
-        if not (user and user.is_authenticated()):
-            return False
-
-        return func(user, *args, **kwargs)
-    return wrapped
-
-
-def is_organization_admin(user, organization):
-    # an organization admin *must* have global access
-    return organization.member_set.filter(
-        user=user,
-        type__lte=OrganizationMemberType.ADMIN,
-        has_global_access=True,
-    ).exists()
-
-
-def is_team_admin(user, team):
-    return team.organization.member_set.filter(
-        Q(has_global_access=True) | Q(teams=team),
-        user=user,
-        type__lte=OrganizationMemberType.ADMIN,
-    ).exists()
-
-
-def is_project_admin(user, project):
-    return is_team_admin(user, project.team)
-
-
-@cached_for_request
-@requires_login
-def can_create_teams(user, organization):
-    """
-    Returns a boolean describing whether a user has the ability to
-    create new teams.
-    """
-    if user.is_superuser:
-        return True
-
-    if not is_organization_admin(user, organization):
-        return False
 
-    return features.has('teams:create', organization, actor=user)
 
-
-@cached_for_request
-@requires_login
-def can_create_projects(user, team):
-    """
-    Returns a boolean describing whether a user has the ability to
-    create new projects.
-    """
-    if user.is_superuser:
-        return True
-
-    if not is_team_admin(user, team):
-        return False
-
-    return True
-
-
-@requires_login
-def can_manage_org(user, organization):
-    if user.is_superuser:
-        return True
-
-    if is_organization_admin(user, organization):
-        return True
-
-    return False
-
-
-@requires_login
-def can_manage_team(user, team):
-    if can_manage_org(user, team.organization):
-        return True
-
-    if is_team_admin(user, team):
-        return True
-
-    return False
-
-
-@requires_login
-def can_add_organization_member(user, organization):
-    # must be an owner of the team
-    if user.is_superuser:
-        return True
-
-    if not is_organization_admin(user, organization):
-        return False
-
-    return True
-
-
-@requires_login
-def can_manage_organization_member(user, member, perm):
-    # permissions always take precedence
-    if user.is_superuser:
-        return True
-
-    # must be an owner of the team
-    if not is_organization_admin(user, member.organization):
-        return False
-
-    return True
-
-
-def can_edit_organization_member(user, member):
-    return can_manage_organization_member(user, member, 'edit_organization_member')
-
-
-def can_remove_organization_member(user, member):
-    return can_manage_organization_member(user, member, 'remove_organization_member')
-
-
-@requires_login
 def can_remove_project(user, project):
-    if project.is_internal_project():
+    if not (user and user.is_authenticated()):
         return False
 
-    if user.is_superuser:
-        return True
-
-    if not is_project_admin(user, project):
-        return False
-
-    return True
-
-
-@requires_login
-def can_add_project_key(user, project):
-    if user.is_superuser:
-        return True
-
-    if not is_project_admin(user, project):
-        return False
-
-    return True
-
-
-@requires_login
-def can_edit_project_key(user, key):
-    if user.is_superuser:
-        return True
-
-    project = key.project
-
-    if not is_project_admin(user, project):
+    if project.is_internal_project():
         return False
 
-    return True
-
-
-@requires_login
-def can_remove_project_key(user, key):
     if user.is_superuser:
         return True
 
-    project = key.project
-
-    if not is_project_admin(user, project):
+    if not project.has_access(user, OrganizationMemberType.OWNER):
         return False
 
     return True
diff --git a/src/sentry/plugins/base/v1.py b/src/sentry/plugins/base/v1.py
index ba9873789e..081d75c45c 100644
--- a/src/sentry/plugins/base/v1.py
+++ b/src/sentry/plugins/base/v1.py
@@ -333,17 +333,8 @@ class IPlugin(local, PluggableViewMixin):
         pass
 
     def missing_perm_response(self, request, perm, *args, **objects):
-        """
-        Given a user, a permission name, and an optional mapping of objects
-        within a context, returns a custom response.
-
-        :param user: either an instance of ``AnonymousUser`` or ``User``.
-        :param perm: a string, such as "edit_project"
-        :param objects: an optional mapping of objects
-
-        If your plugin does not need to override this response, simply return
-        ``None``.
-        """
+        # DEPRECATED: No longer used.
+        pass
 
     def is_regression(self, group, event, **kwargs):
         """
diff --git a/src/sentry/templates/sentry/bases/explore.html b/src/sentry/templates/sentry/bases/explore.html
index 3f45de1f6a..f22ec35f86 100644
--- a/src/sentry/templates/sentry/bases/explore.html
+++ b/src/sentry/templates/sentry/bases/explore.html
@@ -1,7 +1,6 @@
 {% extends "sentry/layout.html" %}
 
 {% load i18n %}
-{% load sentry_permissions %}
 
 {% block title %}{{ project.name }} | {{ block.super }}{% endblock %}
 
diff --git a/src/sentry/templates/sentry/bases/settings.html b/src/sentry/templates/sentry/bases/settings.html
index 06a04f536c..2a8e56d661 100644
--- a/src/sentry/templates/sentry/bases/settings.html
+++ b/src/sentry/templates/sentry/bases/settings.html
@@ -1,6 +1,3 @@
 {% extends "sentry/layout.html" %}
 
-{% load i18n %}
-{% load sentry_permissions %}
-
 {% block title %}{{ team.name }} / {{ project.name }} | {{ block.super }}{% endblock %}
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index 6cb49cae23..a125d1b76f 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -3,7 +3,6 @@
 {% load sentry_dsn %}
 {% load sentry_features %}
 {% load sentry_helpers %}
-{% load sentry_permissions %}
 
 {% load sentry_status %}
 {% get_sentry_version %}
diff --git a/src/sentry/templates/sentry/projects/keys.html b/src/sentry/templates/sentry/projects/keys.html
index 69ed01f529..d937fc9441 100644
--- a/src/sentry/templates/sentry/projects/keys.html
+++ b/src/sentry/templates/sentry/projects/keys.html
@@ -2,12 +2,11 @@
 
 {% load i18n %}
 {% load sentry_helpers %}
-{% load sentry_plugins %}
 
 {% block title %}{% trans "Client Keys" %} | {{ block.super }}{% endblock %}
 
 {% block main %}
-    {% if can_add_key %}
+    {% if ACCESS.project_write %}
         <a href="{% url 'sentry-new-project-key' project.organization.slug project.slug %}" class="btn pull-right btn-primary btn-sm" style="position: relative; top: -6px;">{% trans "Generate New Key" %}</a>
     {% endif %}
     <h2>{% trans "Client Keys" %}</h2>
@@ -34,7 +33,7 @@
                         <input class="form-control" value="{{ key.dsn_private }}" onclick="this.select()" />
                     </td>
                     <td style="text-align:right; vertical-align:bottom !important;">
-                        {% if key.can_edit %}
+                        {% if ACCESS.project_write %}
                             {% if key.is_active %}
                                 <form method="POST" action="{% url 'sentry-disable-project-key' project.organization.slug project.slug key.id %}" style="display:inline">
                                     {% csrf_token %}
@@ -47,7 +46,7 @@
                                 </form>
                             {% endif %}
                         {% endif %}
-                        {% if key.can_remove %}
+                        {% if ACCESS.project_write %}
                             <form method="POST" action="{% url 'sentry-remove-project-key' project.organization.slug project.slug key.id %}" style="display:inline">
                                 {% csrf_token %}
                                 <input type="submit" class="btn btn-danger btn-sm" value="{% trans "Revoke" %}">
diff --git a/src/sentry/templatetags/sentry_permissions.py b/src/sentry/templatetags/sentry_permissions.py
deleted file mode 100644
index 07852a82f2..0000000000
--- a/src/sentry/templatetags/sentry_permissions.py
+++ /dev/null
@@ -1,25 +0,0 @@
-"""
-sentry.templatetags.sentry_permissions
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import
-
-from django import template
-
-from sentry.permissions import (
-    can_create_teams, can_create_projects,
-    can_remove_project, can_manage_team, can_manage_org
-)
-
-register = template.Library()
-
-# TODO: Django doesn't seem to introspect function args correctly for filters
-# so we can't just register.filter(can_add_team_member)
-register.filter('can_create_teams')(lambda a, b: can_create_teams(a, b))
-register.filter('can_create_projects')(lambda a, b: can_create_projects(a, b))
-register.filter('can_manage_team')(lambda a, b: can_manage_team(a, b))
-register.filter('can_manage_org')(lambda a, b: can_manage_org(a, b))
-register.filter('can_remove_project')(lambda a, b: can_remove_project(a, b))
diff --git a/src/sentry/web/frontend/create_organization_member.py b/src/sentry/web/frontend/create_organization_member.py
index 4ace9888b2..c5330bebfc 100644
--- a/src/sentry/web/frontend/create_organization_member.py
+++ b/src/sentry/web/frontend/create_organization_member.py
@@ -7,9 +7,7 @@ from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.models import OrganizationMemberType
-from sentry.permissions import can_add_organization_member, Permissions
 from sentry.web.frontend.base import OrganizationView
-from sentry.web.frontend.generic import missing_perm
 from sentry.web.forms.invite_organization_member import InviteOrganizationMemberForm
 from sentry.web.forms.add_organization_member import AddOrganizationMemberForm
 
@@ -30,9 +28,6 @@ class CreateOrganizationMemberView(OrganizationView):
         return form_cls(request.POST or None, initial=initial)
 
     def handle(self, request, organization):
-        if not can_add_organization_member(request.user, organization):
-            return missing_perm(request, Permissions.ADD_MEMBER, organization=organization)
-
         form = self.get_form(request)
         if form.is_valid():
             om, created = form.save(request.user, organization, request.META['REMOTE_ADDR'])
diff --git a/src/sentry/web/frontend/create_team.py b/src/sentry/web/frontend/create_team.py
index 4b56679244..30008928c5 100644
--- a/src/sentry/web/frontend/create_team.py
+++ b/src/sentry/web/frontend/create_team.py
@@ -6,11 +6,9 @@ from django.contrib import messages
 from django.core.urlresolvers import reverse
 
 from sentry.models import OrganizationMemberType
-from sentry.permissions import can_create_teams, Permissions
 from sentry.web.forms.add_project import AddProjectForm
 from sentry.web.forms.add_team import AddTeamForm
 from sentry.web.frontend.base import OrganizationView
-from sentry.web.frontend.generic import missing_perm
 
 
 class Step(object):
@@ -41,9 +39,6 @@ class CreateTeamView(OrganizationView):
     # using that requires us to inherit from Django's base CBVs which is not
     # acceptable due to the way we handle base view validation and ACLs.
     def handle(self, request, organization):
-        if not can_create_teams(request.user, organization):
-            return missing_perm(request, Permissions.ADD_TEAM)
-
         session_data = request.session.get(self.session_key, {})
         if request.method == 'GET':
             logging.debug('GET request; resetting create team form wizard')
diff --git a/src/sentry/web/frontend/generic.py b/src/sentry/web/frontend/generic.py
index 6259f6788f..9370f22ae8 100644
--- a/src/sentry/web/frontend/generic.py
+++ b/src/sentry/web/frontend/generic.py
@@ -7,13 +7,8 @@ sentry.web.frontend.generic
 """
 from __future__ import absolute_import
 
-from django.http import HttpResponseRedirect
-from django.core.urlresolvers import reverse
-from django.utils.translation import ugettext as _
 from django.views.generic import TemplateView as BaseTemplateView
 
-from sentry.plugins import plugins
-from sentry.plugins.base import Response
 from sentry.web.helpers import render_to_response
 
 
@@ -37,35 +32,6 @@ def partial_static_media(request, path):
     return static_media(request, module='sentry', path=path)
 
 
-def missing_perm(request, perm, **kwargs):
-    """
-    Returns a generic response if you're missing permission to perform an
-    action.
-
-    Plugins may overwrite this with the ``missing_perm_response`` hook.
-    """
-    response = plugins.first('missing_perm_response', request, perm, **kwargs)
-
-    if response:
-        if isinstance(response, HttpResponseRedirect):
-            return response
-
-        if not isinstance(response, Response):
-            raise NotImplementedError('Use self.render() when returning responses.')
-
-        return response.respond(request, {
-            'perm': perm,
-        })
-
-    if perm.label:
-        return render_to_response('sentry/generic_error.html', {
-            'title': _('Missing Permission'),
-            'message': _('You do not have the required permissions to %s.') % (perm.label,)
-        }, request)
-
-    return HttpResponseRedirect(reverse('sentry'))
-
-
 class TemplateView(BaseTemplateView):
     def render_to_response(self, context, **response_kwargs):
         return render_to_response(
diff --git a/src/sentry/web/frontend/projects/keys.py b/src/sentry/web/frontend/projects/keys.py
index 9621b37e9b..89d6a92504 100644
--- a/src/sentry/web/frontend/projects/keys.py
+++ b/src/sentry/web/frontend/projects/keys.py
@@ -19,9 +19,6 @@ from sentry.constants import MEMBER_ADMIN
 from sentry.models import (
     AuditLogEntry, AuditLogEntryEvent, ProjectKey, ProjectKeyStatus
 )
-from sentry.permissions import (
-    can_remove_project_key, can_add_project_key, can_edit_project_key
-)
 from sentry.web.decorators import has_access
 from sentry.web.forms.projectkeys import EditProjectKeyForm
 from sentry.web.helpers import render_to_response
@@ -36,8 +33,6 @@ def manage_project_keys(request, organization, project):
 
     for key in key_list:
         key.project = project
-        key.can_remove = can_remove_project_key(request.user, key),
-        key.can_edit = can_edit_project_key(request.user, key),
 
     context = csrf(request)
     context.update({
@@ -46,7 +41,6 @@ def manage_project_keys(request, organization, project):
         'page': 'keys',
         'project': project,
         'key_list': key_list,
-        'can_add_key': can_add_project_key(request.user, project),
     })
 
     return render_to_response('sentry/projects/keys.html', context, request)
@@ -55,9 +49,6 @@ def manage_project_keys(request, organization, project):
 @has_access(MEMBER_ADMIN)
 @csrf_protect
 def new_project_key(request, organization, project):
-    if not can_add_project_key(request.user, project):
-        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
-
     key = ProjectKey.objects.create(
         project=project,
     )
@@ -85,9 +76,6 @@ def edit_project_key(request, organization, project, key_id):
     except ProjectKey.DoesNotExist():
         return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
 
-    if not can_edit_project_key(request.user, key):
-        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
-
     form = EditProjectKeyForm(request.POST or None, instance=key)
     if form.is_valid():
         key = form.save()
@@ -127,9 +115,6 @@ def remove_project_key(request, organization, project, key_id):
     except ProjectKey.DoesNotExist:
         return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
 
-    if not can_remove_project_key(request.user, key):
-        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
-
     audit_data = key.get_audit_log_data()
 
     key.delete()
@@ -159,10 +144,6 @@ def disable_project_key(request, organization, project, key_id):
     except ProjectKey.DoesNotExist:
         return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
 
-    # we require removal permission for this
-    if not can_edit_project_key(request.user, key):
-        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
-
     key.update(status=ProjectKeyStatus.INACTIVE)
 
     AuditLogEntry.objects.create(
@@ -190,10 +171,6 @@ def enable_project_key(request, organization, project, key_id):
     except ProjectKey.DoesNotExist:
         return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
 
-    # we require removal permission for this
-    if not can_edit_project_key(request.user, key):
-        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
-
     key.update(status=ProjectKeyStatus.ACTIVE)
 
     AuditLogEntry.objects.create(
diff --git a/tests/sentry/api/endpoints/test_organization_teams.py b/tests/sentry/api/endpoints/test_organization_teams.py
index 46b9a7e3d3..600a1f7e08 100644
--- a/tests/sentry/api/endpoints/test_organization_teams.py
+++ b/tests/sentry/api/endpoints/test_organization_teams.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 from exam import fixture
-from mock import Mock, patch
 
 from sentry.models import Team
 from sentry.testutils import APITestCase
@@ -41,19 +40,17 @@ class OrganizationTeamsCreateTest(APITestCase):
     def path(self):
         return reverse('sentry-api-0-organization-teams', args=[self.organization.slug])
 
-    @patch('sentry.api.endpoints.organization_teams.can_create_teams', Mock(return_value=False))
     def test_missing_permission(self):
-        self.login_as(user=self.user)
+        user = self.create_user()
+        self.login_as(user=user)
         resp = self.client.post(self.path)
         assert resp.status_code == 403
 
-    @patch('sentry.api.endpoints.organization_teams.can_create_teams', Mock(return_value=True))
     def test_missing_params(self):
         self.login_as(user=self.user)
         resp = self.client.post(self.path)
         assert resp.status_code == 400
 
-    @patch('sentry.api.endpoints.organization_teams.can_create_teams', Mock(return_value=True))
     def test_valid_params(self):
         self.login_as(user=self.user)
 
@@ -67,7 +64,6 @@ class OrganizationTeamsCreateTest(APITestCase):
         assert team.slug == 'foobar'
         assert team.organization == self.organization
 
-    @patch('sentry.api.endpoints.organization_teams.can_create_teams', Mock(return_value=True))
     def test_without_slug(self):
         self.login_as(user=self.user)
 
diff --git a/tests/sentry/web/frontend/projects/tests.py b/tests/sentry/web/frontend/projects/tests.py
index b63e6e78b2..df238d8724 100644
--- a/tests/sentry/web/frontend/projects/tests.py
+++ b/tests/sentry/web/frontend/projects/tests.py
@@ -28,7 +28,6 @@ class ManageProjectKeysTest(TestCase):
         assert resp.status_code == 200
         self.assertTemplateUsed('sentry/projects/keys.html')
         assert 'key_list' in resp.context
-        assert 'can_add_key' in resp.context
 
 
 class NewProjectKeyTest(TestCase):
