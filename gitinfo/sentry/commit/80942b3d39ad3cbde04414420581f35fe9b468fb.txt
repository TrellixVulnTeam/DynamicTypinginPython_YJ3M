commit 80942b3d39ad3cbde04414420581f35fe9b468fb
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Feb 28 17:01:35 2019 -0800

    Fix(bin/load-mocks): GitHub integration IntegrityError issue (#12230)
    
    * removed legacy github integration for users that had it.
    
    * Added try-catch instead with upgrade
    
    * removed repo[0].id
    
    * Added last changes to load-mocks.

diff --git a/bin/load-mocks b/bin/load-mocks
index 000d0e6684..3f1c32eb07 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -23,7 +23,7 @@ from sentry import buffer, roles, tsdb
 from sentry.event_manager import HashDiscarded
 from sentry.models import (
     Activity, Broadcast, Commit, CommitAuthor, CommitFileChange, Deploy, EventAttachment, Event,
-    Environment, File, Group, GroupMeta, GroupRelease, GroupTombstone, Organization,
+    Environment, File, Group, GroupRelease, GroupTombstone, Organization,
     OrganizationAccessRequest, OrganizationMember, Project, Release,
     ReleaseCommit, ReleaseEnvironment, ReleaseProjectEnvironment, ReleaseFile, Repository,
     Team, TOMBSTONE_FIELDS_FROM_GROUP, User, UserReport, Monitor, MonitorStatus, MonitorType, MonitorCheckIn, CheckInStatus
@@ -449,15 +449,27 @@ def main(num_events=1, extra_events=False):
 
             raw_commits = generate_commits(user)
 
-            repo = Repository.objects.get_or_create(
-                organization_id=org.id,
-                provider='integrations:github',
-                external_id='example/example',
-                defaults={
-                    'name': 'Example Repo',
-                    'url': 'https://github.com/example/example',
-                }
-            )
+            try:
+                repo, _ = Repository.objects.get_or_create(
+                    organization_id=org.id,
+                    provider='integrations:github',
+                    external_id='example/example',
+                    defaults={
+                        'name': 'Example Repo',
+                        'url': 'https://github.com/example/example',
+                    }
+                )
+            except IntegrityError:
+                # for users with legacy github plugin
+                # upgrade to the new integration
+                repo = Repository.objects.get(
+                    organization_id=org.id,
+                    provider='github',
+                    external_id='example/example',
+                    name='Example Repo',
+                )
+                repo.provider = 'integrations:github'
+                repo.save()
 
             authors = set()
 
@@ -469,7 +481,7 @@ def main(num_events=1, extra_events=False):
                 )[0]
                 commit = Commit.objects.get_or_create(
                     organization_id=org.id,
-                    repository_id=repo[0].id,
+                    repository_id=repo.id,
                     key=raw_commit['key'],
                     defaults={
                         'author': author,
@@ -509,7 +521,7 @@ def main(num_events=1, extra_events=False):
             # create an unreleased commit
             Commit.objects.get_or_create(
                 organization_id=org.id,
-                repository_id=repo[0].id,
+                repository_id=repo.id,
                 key=sha1(uuid4().hex).hexdigest(),
                 defaults={
                     'author': CommitAuthor.objects.get_or_create(
@@ -663,7 +675,7 @@ def main(num_events=1, extra_events=False):
             if event5:
                 Commit.objects.get_or_create(
                     organization_id=org.id,
-                    repository_id=repo[0].id,
+                    repository_id=repo.id,
                     key=sha1(uuid4().hex).hexdigest(),
                     defaults={
                         'author': CommitAuthor.objects.get_or_create(
@@ -681,16 +693,6 @@ def main(num_events=1, extra_events=False):
                 platform='csp',
             )
 
-            with transaction.atomic():
-                if event1:
-                    try:
-                        GroupMeta.objects.create(
-                            group=event1.group,
-                            key='github:tid',
-                            value='134',
-                        )
-                    except IntegrityError:
-                        pass
             if event3:
                 UserReport.objects.create(
                     project=project,
