commit 841ddaf05d5761a9699c5981e8a14e621aa962f8
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 8 17:00:46 2016 -0700

    Add formatted param for messages
    
    Attempt to autofill from message + params
    
    @getsentry/infrastructure

diff --git a/src/sentry/eventtypes/base.py b/src/sentry/eventtypes/base.py
index 125c745773..37d4432c4a 100644
--- a/src/sentry/eventtypes/base.py
+++ b/src/sentry/eventtypes/base.py
@@ -25,9 +25,10 @@ class DefaultEvent(BaseEvent):
 
     def get_metadata(self):
         # See GH-3248
-        message = strip(self.data.get('sentry.interfaces.Message', {
+        message_interface = self.data.get('sentry.interfaces.Message', {
             'message': self.data.get('message', ''),
-        })['message'])
+        })
+        message = strip(message_interface.get('formatted', message_interface['message']))
         if not message:
             title = '<unlabeled event>'
         else:
diff --git a/src/sentry/interfaces/message.py b/src/sentry/interfaces/message.py
index 865ca95ae2..e6f2fea47f 100644
--- a/src/sentry/interfaces/message.py
+++ b/src/sentry/interfaces/message.py
@@ -18,8 +18,9 @@ from sentry.utils.safe import trim
 
 class Message(Interface):
     """
-    A standard message consisting of a ``message`` arg, and an optional
-    ``params`` arg for formatting.
+    A standard message consisting of a ``message`` arg, an an optional
+    ``params`` arg for formatting, and an optional ``formatted`` message which
+    is the result of ``message`` combined with ``params``.
 
     If your message cannot be parameterized, then the message interface
     will serve no benefit.
@@ -28,6 +29,7 @@ class Message(Interface):
 
     >>> {
     >>>     "message": "My raw message with interpreted strings like %s",
+    >>>     "formatted": "My raw message with interpreted strings like this",
     >>>     "params": ["this"]
     >>> }
     """
@@ -40,7 +42,8 @@ class Message(Interface):
             raise InterfaceValidationError("No 'message' present")
 
         kwargs = {
-            'message': trim(data['message'], settings.SENTRY_MAX_MESSAGE_LENGTH)
+            'message': trim(data['message'], settings.SENTRY_MAX_MESSAGE_LENGTH),
+            'formatted': None,
         }
 
         if data.get('params'):
@@ -48,6 +51,18 @@ class Message(Interface):
         else:
             kwargs['params'] = ()
 
+        if '%' in kwargs['message'] and kwargs['params']:
+            if isinstance(kwargs['params'], list):
+                kwargs['params'] = tuple(kwargs['params'])
+
+            try:
+                kwargs['formatted'] = trim(
+                    kwargs['message'] % kwargs['params'],
+                    settings.SENTRY_MAX_MESSAGE_LENGTH,
+                )
+            except Exception:
+                pass
+
         return cls(**kwargs)
 
     def get_path(self):
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/message.jsx b/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
index 6ca2ab8691..6faac830a0 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
@@ -22,11 +22,11 @@ const MessageInterface = React.createClass({
           type="message"
           title={t('Message')}>
         <pre className="plain" dangerouslySetInnerHTML={{
-          __html: utils.nl2br(utils.urlize(utils.escape(data.message)))
+          __html: utils.nl2br(utils.urlize(utils.escape(data.formatted || data.message)))
         }} />
         {data.params &&
           <div>
-            <h3>{t('Params')}</h3>
+            <h5>{t('Params')}</h5>
             <pre className="plain">{JSON.stringify(data.params, null, 2)}</pre>
           </div>
         }
diff --git a/tests/sentry/interfaces/test_message.py b/tests/sentry/interfaces/test_message.py
index ff3f770045..91555a20bd 100644
--- a/tests/sentry/interfaces/test_message.py
+++ b/tests/sentry/interfaces/test_message.py
@@ -20,6 +20,7 @@ class MessageTest(TestCase):
         assert self.interface.to_json() == {
             'message': self.interface.message,
             'params': self.interface.params,
+            'formatted': 'Hello there world!'
         }
 
     def test_get_hash_uses_message(self):
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index ee6d6342e8..6916b2652d 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -532,6 +532,24 @@ class EventManagerTest(TransactionTestCase):
             'title': 'foo bar',
         }
 
+    def test_message_event_type(self):
+        manager = EventManager(self.make_event(**{
+            'message': '',
+            'sentry.interfaces.Message': {
+                'formatted': 'foo bar',
+                'message': 'foo %s',
+                'params': ['bar'],
+            }
+        }))
+        data = manager.normalize()
+        assert data['type'] == 'default'
+        event = manager.save(self.project.id)
+        group = event.group
+        assert group.data.get('type') == 'default'
+        assert group.data.get('metadata') == {
+            'title': 'foo bar',
+        }
+
     def test_error_event_type(self):
         manager = EventManager(self.make_event(**{
             'sentry.interfaces.Exception': {
