commit 23b38728fee150846da37ffb4ca057e5d22f16d7
Author: David Cramer <dcramer@gmail.com>
Date:   Sat May 19 12:49:58 2012 -0700

    USE_QUEUE can now act as a task whitelist

diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index a0af69f89e..1e5ebf2156 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -132,6 +132,16 @@ ALLOW_PUBLIC_PROJECTS = True
 
 # Instructs Sentry to utilize it's queue for background jobs. You will
 # need to ensure that you have workers running if you enable the queue.
+
+# You can also set this to a list of fully qualified job names to only
+# selectively enable the queue:
+# USE_QUEUE = (
+#     'sentry.tasks.store.store_event',
+#     'sentry.tasks.cleanup.cleanup',
+#     'sentry.tasks.index.index_event',
+#     'sentry.tasks.post_process.post_process_group',
+#     'sentry.tasks.process_buffer.process_incr',
+# )
 USE_QUEUE = False
 
 # Instructs Sentry to utilize it's internal search indexer on all incoming
diff --git a/sentry/utils/queue.py b/sentry/utils/queue.py
index c0df6c62ca..1af7f5ee08 100644
--- a/sentry/utils/queue.py
+++ b/sentry/utils/queue.py
@@ -9,8 +9,25 @@ sentry.utils.queue
 from sentry.conf import settings
 
 
+def can_queue(func):
+    """
+    Returns a boolean describing if func should be passed through the queueing
+    infrastructure based on the ``USE_QUEUE`` setting.
+
+    >>> can_queue(task_func)
+    True
+    """
+    if not settings.USE_QUEUE:
+        return False
+    elif settings.USE_QUEUE is True:
+        return True
+    elif '%s.%s' % (func.__module__, func.__name__) in settings.USE_QUEUE:
+        return True
+    return False
+
+
 def maybe_delay(func, *args, **kwargs):
-    if settings.USE_QUEUE:
+    if can_queue(func):
         return func.delay(*args, **kwargs)
     return func(*args, **kwargs)
 
@@ -20,6 +37,6 @@ def maybe_async(func, args=None, kwargs=None, *fargs, **fkwargs):
         args = []
     if kwargs is None:
         kwargs = {}
-    if settings.USE_QUEUE:
+    if can_queue(func):
         return func.apply_async(args=args, kwargs=kwargs, *fargs, **fkwargs)
     return func(*args, **kwargs)
diff --git a/tests/sentry/utils/queue/__init__.py b/tests/sentry/utils/queue/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/utils/queue/tests.py b/tests/sentry/utils/queue/tests.py
new file mode 100644
index 0000000000..a6f47242ce
--- /dev/null
+++ b/tests/sentry/utils/queue/tests.py
@@ -0,0 +1,31 @@
+from __future__ import absolute_import
+
+from unittest2 import TestCase
+from sentry.utils.queue import can_queue
+from tests.base import Settings
+
+
+def test_func():
+    pass
+
+
+class CanQueueTest(TestCase):
+    def test_disabled(self):
+        with Settings(SENTRY_USE_QUEUE=False):
+            self.assertFalse(can_queue(test_func))
+
+    def test_empty_whitelist(self):
+        with Settings(SENTRY_USE_QUEUE=()):
+            self.assertFalse(can_queue(test_func))
+
+    def test_enabled(self):
+        with Settings(SENTRY_USE_QUEUE=True):
+            self.assertTrue(can_queue(test_func))
+
+    def test_in_whitelist(self):
+        with Settings(SENTRY_USE_QUEUE=('%s.test_func' % (__name__,))):
+            self.assertTrue(can_queue(test_func))
+
+    def test_not_in_whitelist(self):
+        with Settings(SENTRY_USE_QUEUE=('%s.foo' % (__name__,))):
+            self.assertFalse(can_queue(test_func))
