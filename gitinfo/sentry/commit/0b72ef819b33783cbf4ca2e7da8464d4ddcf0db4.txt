commit 0b72ef819b33783cbf4ca2e7da8464d4ddcf0db4
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Jan 29 12:26:50 2020 -0800

    feat(workflow): Update status item text (#16660)
    
    Removes created and status change items since neither case can occur anymore.
    
    Slightly updated the text
    * update detected text
    * change incident to alert

diff --git a/src/sentry/static/sentry/app/views/incidents/details/activity/activity.tsx b/src/sentry/static/sentry/app/views/incidents/details/activity/activity.tsx
index 7f590acf35..029fa17ea4 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/activity/activity.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/activity/activity.tsx
@@ -1,5 +1,5 @@
-import groupBy from 'lodash/groupBy';
 import React from 'react';
+import groupBy from 'lodash/groupBy';
 import moment from 'moment';
 import styled from '@emotion/styled';
 
@@ -14,10 +14,10 @@ import NoteInputWithStorage from 'app/components/activity/note/inputWithStorage'
 import TimeSince from 'app/components/timeSince';
 import space from 'app/styles/space';
 
+import {Incident, IncidentActivityType, ActivityType, NoteType} from '../../types';
 import ActivityPlaceholder from './activityPlaceholder';
 import DateDivider from './dateDivider';
 import StatusItem from './statusItem';
-import {Incident, IncidentActivityType, ActivityType, NoteType} from '../../types';
 
 type Props = {
   api: Client;
@@ -114,7 +114,7 @@ class Activity extends React.Component<Props> {
           Object.entries(activitiesByDate).map(([date, activitiesForDate]) => {
             const title =
               date === today ? (
-                'Today'
+                t('Today')
               ) : (
                 <React.Fragment>
                   {date} <StyledTimeSince date={date} />
@@ -125,7 +125,7 @@ class Activity extends React.Component<Props> {
                 <DateDivider>{title}</DateDivider>
                 {activitiesForDate &&
                   activitiesForDate.map(activity => {
-                    const authorName = activity.user ? activity.user.name : 'Sentry';
+                    const authorName = activity.user?.name ?? 'Sentry';
 
                     if (activity.type === IncidentActivityType.COMMENT) {
                       return (
@@ -148,6 +148,7 @@ class Activity extends React.Component<Props> {
                         <ErrorBoundary mini key={`note-${activity.id}`}>
                           <StatusItem
                             showTime
+                            incident={incident}
                             authorName={authorName}
                             activity={activity}
                           />
diff --git a/src/sentry/static/sentry/app/views/incidents/details/activity/statusItem.tsx b/src/sentry/static/sentry/app/views/incidents/details/activity/statusItem.tsx
index 24fe8b09a0..4e770d245c 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/activity/statusItem.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/activity/statusItem.tsx
@@ -1,42 +1,42 @@
 import React from 'react';
 import styled from '@emotion/styled';
 
-import {t} from 'app/locale';
+import {tct} from 'app/locale';
 import ActivityItem from 'app/components/activity/item';
 import getDynamicText from 'app/utils/getDynamicText';
 
-import {IncidentActivityType, IncidentStatus, ActivityType} from '../../types';
+import {Incident, IncidentActivityType, IncidentStatus, ActivityType} from '../../types';
 
 type Props = {
   activity: ActivityType;
-  authorName: string;
   showTime: boolean;
+
+  /**
+   * Author name can be undefined if there is no author, e.g. if it's a system activity
+   */
+  authorName?: string;
+  incident?: Incident;
 };
 
 /**
- * StatusItem renders status changes for Incidents
+ * StatusItem renders status changes for Alerts
  *
- * For example: incident created, detected, or closed
+ * For example: incident detected, or closed
  *
  * Note `activity.dateCreated` refers to when the activity was created vs.
  * `incident.dateStarted` which is when an incident was first detected or created
  */
 class StatusItem extends React.Component<Props> {
   render() {
-    const {activity, authorName, showTime} = this.props;
+    const {activity, authorName, incident, showTime} = this.props;
 
-    const isCreated = activity.type === IncidentActivityType.CREATED;
     const isDetected = activity.type === IncidentActivityType.DETECTED;
     const isClosed =
       activity.type === IncidentActivityType.STATUS_CHANGE &&
       activity.value === `${IncidentStatus.CLOSED}`;
-    const isReopened =
-      activity.type === IncidentActivityType.STATUS_CHANGE &&
-      activity.value === `${IncidentStatus.CREATED}` &&
-      activity.previousValue === `${IncidentStatus.CLOSED}`;
 
     // Unknown activity, don't render anything
-    if (!isCreated && !isDetected && !isClosed && !isReopened) {
+    if (!isDetected && !isClosed) {
       return null;
     }
 
@@ -52,10 +52,18 @@ class StatusItem extends React.Component<Props> {
         }}
         header={
           <div>
-            <AuthorName>{authorName}</AuthorName> {isCreated && t('created')}
-            {isDetected && t('detected')}
-            {isClosed && t('closed')}
-            {isReopened && t('re-opened')} {t('an Incident')}
+            {isClosed &&
+              tct('[user] resolved the alert', {
+                user: <AuthorName>{authorName}</AuthorName>,
+              })}
+            {isDetected &&
+              (incident?.alertRule
+                ? tct('[user] was triggered', {
+                    user: <AuthorName>{incident.alertRule.name}</AuthorName>,
+                  })
+                : tct('[user] detected an alert', {
+                    user: <AuthorName>{authorName}</AuthorName>,
+                  }))}
           </div>
         }
         date={getDynamicText({value: activity.dateCreated, fixed: new Date(0)})}
diff --git a/tests/acceptance/test_incidents.py b/tests/acceptance/test_incidents.py
index e5b5955e84..6c2f58e97e 100644
--- a/tests/acceptance/test_incidents.py
+++ b/tests/acceptance/test_incidents.py
@@ -5,7 +5,7 @@ import pytz
 
 from sentry.testutils import AcceptanceTestCase, SnubaTestCase
 from sentry.testutils.helpers.datetime import before_now
-from sentry.incidents.logic import create_incident
+from sentry.incidents.logic import create_alert_rule, create_incident
 from sentry.incidents.models import IncidentType
 from sentry.snuba.models import QueryAggregations
 
@@ -27,16 +27,29 @@ class OrganizationIncidentsListTest(AcceptanceTestCase, SnubaTestCase):
             self.browser.snapshot("incidents - empty state")
 
     def test_incidents_list(self):
+        alert_rule = create_alert_rule(
+            self.organization,
+            [self.project],
+            "hello",
+            "level:error",
+            QueryAggregations.TOTAL,
+            10,
+            1,
+        )
+
         incident = create_incident(
             self.organization,
-            type=IncidentType.CREATED,
+            type=IncidentType.DETECTED,
             title="Incident #1",
-            query="",
+            query="hello",
             aggregation=QueryAggregations.TOTAL,
             date_started=timezone.now(),
+            date_detected=timezone.now(),
             projects=[self.project],
             groups=[self.group],
+            alert_rule=alert_rule,
         )
+
         with self.feature(FEATURE_NAME):
             self.browser.get(self.path)
             self.browser.wait_until_not(".loading-indicator")
