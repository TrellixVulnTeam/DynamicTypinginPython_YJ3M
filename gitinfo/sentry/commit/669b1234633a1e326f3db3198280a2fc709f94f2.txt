commit 669b1234633a1e326f3db3198280a2fc709f94f2
Author: ted kaemming <t.kaemming+github@gmail.com>
Date:   Wed Sep 21 12:51:56 2016 -0700

    Warn on usage of dummy backends. (#4190)

diff --git a/src/sentry/app.py b/src/sentry/app.py
index a5f8e7b6d5..7624caee97 100644
--- a/src/sentry/app.py
+++ b/src/sentry/app.py
@@ -16,6 +16,7 @@ from sentry.utils import redis
 from sentry.utils.imports import import_string
 from sentry.utils.locking.backends.redis import RedisLockBackend
 from sentry.utils.locking.manager import LockManager
+from sentry.utils import warnings
 
 
 class State(local):
@@ -25,21 +26,34 @@ class State(local):
 env = State()
 
 
-def get_instance(path, options):
-    cls = import_string(path)
+def get_instance(attribute, options, dangerous=()):
+    value = getattr(settings, attribute)
+
+    cls = import_string(value)
+    if cls in dangerous:
+        warnings.warn(
+            warnings.UnsupportedBackend(
+                u'The {!r} backend for {} is not recommended '
+                'for production use.'.format(value, attribute)
+            )
+        )
+
     return cls(**options)
 
 
 # TODO(dcramer): this is getting heavy, we should find a better way to structure
 # this
-buffer = get_instance(settings.SENTRY_BUFFER, settings.SENTRY_BUFFER_OPTIONS)
-digests = get_instance(settings.SENTRY_DIGESTS, settings.SENTRY_DIGESTS_OPTIONS)
-quotas = get_instance(settings.SENTRY_QUOTAS, settings.SENTRY_QUOTA_OPTIONS)
-nodestore = get_instance(
-    settings.SENTRY_NODESTORE, settings.SENTRY_NODESTORE_OPTIONS)
-ratelimiter = get_instance(
-    settings.SENTRY_RATELIMITER, settings.SENTRY_RATELIMITER_OPTIONS)
-search = get_instance(settings.SENTRY_SEARCH, settings.SENTRY_SEARCH_OPTIONS)
-tsdb = get_instance(settings.SENTRY_TSDB, settings.SENTRY_TSDB_OPTIONS)
+buffer = get_instance('SENTRY_BUFFER', settings.SENTRY_BUFFER_OPTIONS)
+
+from sentry.digests.backends.dummy import DummyBackend
+digests = get_instance('SENTRY_DIGESTS', settings.SENTRY_DIGESTS_OPTIONS, (DummyBackend,))
+quotas = get_instance('SENTRY_QUOTAS', settings.SENTRY_QUOTA_OPTIONS)
+nodestore = get_instance('SENTRY_NODESTORE', settings.SENTRY_NODESTORE_OPTIONS)
+ratelimiter = get_instance('SENTRY_RATELIMITER', settings.SENTRY_RATELIMITER_OPTIONS)
+search = get_instance('SENTRY_SEARCH', settings.SENTRY_SEARCH_OPTIONS)
+
+from sentry.tsdb.dummy import DummyTSDB
+tsdb = get_instance('SENTRY_TSDB', settings.SENTRY_TSDB_OPTIONS, (DummyTSDB,))
+
 raven = client
 locks = LockManager(RedisLockBackend(redis.clusters.get('default')))
diff --git a/src/sentry/utils/warnings.py b/src/sentry/utils/warnings.py
index 6bf0c0e541..876e061c27 100644
--- a/src/sentry/utils/warnings.py
+++ b/src/sentry/utils/warnings.py
@@ -5,6 +5,10 @@ import six
 import warnings
 
 
+class UnsupportedBackend(RuntimeWarning):
+    pass
+
+
 class DeprecatedSettingWarning(DeprecationWarning):
     def __init__(self, setting, replacement, url=None, removed_in_version=None):
         self.setting = setting
diff --git a/src/sentry/web/frontend/admin.py b/src/sentry/web/frontend/admin.py
index c10676a144..50e11e3407 100644
--- a/src/sentry/web/frontend/admin.py
+++ b/src/sentry/web/frontend/admin.py
@@ -28,7 +28,7 @@ from sentry.models import Project, User
 from sentry.plugins import plugins
 from sentry.utils.email import send_mail
 from sentry.utils.http import absolute_uri
-from sentry.utils.warnings import DeprecatedSettingWarning, seen_warnings
+from sentry.utils.warnings import DeprecatedSettingWarning, UnsupportedBackend, seen_warnings
 from sentry.web.decorators import requires_admin
 from sentry.web.forms import (
     ChangeUserForm, NewUserForm, RemoveUserForm, TestEmailForm
@@ -210,6 +210,7 @@ def status_packages(request):
 def status_warnings(request):
     groupings = {
         DeprecatedSettingWarning: 'Deprecated Settings',
+        UnsupportedBackend: 'Unsupported Backends',
     }
 
     groups = defaultdict(list)
@@ -226,7 +227,7 @@ def status_warnings(request):
     return render_to_response(
         'sentry/admin/status/warnings.html',
         {
-            'groups': [(groupings[key], sort_by_message(values)) for key, values in groups.items()],
+            'groups': sorted([(groupings[key], sort_by_message(values)) for key, values in groups.items()]),
             'warnings': sort_by_message(warnings),
         },
         request,
