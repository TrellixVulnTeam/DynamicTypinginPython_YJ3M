commit 599933cb501ea1a773526b9e2ecda0fd680985e1
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Wed Jan 8 15:36:37 2020 -0800

    ref(teams): Add column to organization access request (#16333)

diff --git a/src/sentry/migrations/0025_organizationaccessrequest_requester.py b/src/sentry/migrations/0025_organizationaccessrequest_requester.py
new file mode 100644
index 0000000000..0df34cce5b
--- /dev/null
+++ b/src/sentry/migrations/0025_organizationaccessrequest_requester.py
@@ -0,0 +1,49 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.9.13 on 2020-01-08 06:35
+from __future__ import unicode_literals
+
+from django.conf import settings
+from django.db import migrations
+import django.db.models.deletion
+import sentry.db.models.fields.foreignkey
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Adding indexes to large tables. These indexes should be created concurrently,
+    #   unfortunately we can't run migrations outside of a transaction until Django
+    #   1.10. So until then these should be run manually.
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+
+    dependencies = [
+        ('sentry', '0024_auto_20191230_2052'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='organizationaccessrequest',
+            name='requester',
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
+        ),
+    ]
+
+
+# BEGIN;
+# --
+# -- Add field requester to organizationaccessrequest
+# --
+# ALTER TABLE "sentry_organizationaccessrequest" ADD COLUMN "requester_id" integer NULL;
+# ALTER TABLE "sentry_organizationaccessrequest" ALTER COLUMN "requester_id" DROP DEFAULT;
+# CREATE INDEX "sentry_organizationaccessrequest_573f8683" ON "sentry_organizationaccessrequest" ("requester_id");
+# ALTER TABLE "sentry_organizationaccessrequest" ADD CONSTRAINT "sentry_organizationaccess_requester_id_73de4b1e_fk_auth_user_id" FOREIGN KEY ("requester_id") REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED;
+
+# COMMIT;
diff --git a/src/sentry/models/organizationaccessrequest.py b/src/sentry/models/organizationaccessrequest.py
index 94ef5e4a30..4ebce95ee0 100644
--- a/src/sentry/models/organizationaccessrequest.py
+++ b/src/sentry/models/organizationaccessrequest.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import, print_function
 
+from django.conf import settings
 from django.core.urlresolvers import reverse
 from django.db.models import Q
 
@@ -13,6 +14,8 @@ class OrganizationAccessRequest(Model):
 
     team = FlexibleForeignKey("sentry.Team")
     member = FlexibleForeignKey("sentry.OrganizationMember")
+    # access request from a different user than the member
+    requester = FlexibleForeignKey(settings.AUTH_USER_MODEL, null=True)
 
     class Meta:
         app_label = "sentry"
