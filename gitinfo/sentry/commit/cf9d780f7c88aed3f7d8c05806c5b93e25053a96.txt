commit cf9d780f7c88aed3f7d8c05806c5b93e25053a96
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri May 11 08:34:05 2018 -0700

    tests: Add some basic tests for group sidebar (#8401)

diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index 970c9f3b18..1de71fa9ab 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -238,6 +238,7 @@ const GroupSidebar = createReactClass({
           return (
             <TagDistributionMeter
               key={data.key}
+              data-test-id="group-tag"
               orgId={orgId}
               projectId={projectId}
               group={group}
@@ -247,7 +248,7 @@ const GroupSidebar = createReactClass({
           );
         })}
         {group.tags.length === 0 && (
-          <p>
+          <p data-test-id="no-tags">
             {this.props.environment
               ? tct('No tags found in the [env] environment', {
                   env: this.props.environment.displayName,
@@ -273,4 +274,5 @@ const GroupSidebar = createReactClass({
   },
 });
 
+export {GroupSidebar};
 export default withEnvironment(GroupSidebar);
diff --git a/tests/js/spec/components/group/__snapshots__/sidebar.spec.jsx.snap b/tests/js/spec/components/group/__snapshots__/sidebar.spec.jsx.snap
new file mode 100644
index 0000000000..52e9794836
--- /dev/null
+++ b/tests/js/spec/components/group/__snapshots__/sidebar.spec.jsx.snap
@@ -0,0 +1,346 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GroupSidebar renders with tags renders 1`] = `
+<div
+  className="group-stats"
+>
+  <SuggestedOwners
+    event={
+      Object {
+        "eventID": "12345",
+        "groupID": "1",
+        "id": "1",
+        "message": "ApiException",
+      }
+    }
+  />
+  <GroupReleaseStats
+    group={
+      Object {
+        "assignedTo": null,
+        "id": "1",
+        "project": Object {
+          "id": "2",
+          "slug": "project-slug",
+        },
+        "stats": Object {
+          "24h": Array [
+            Array [
+              1517281200,
+              2,
+            ],
+            Array [
+              1517310000,
+              1,
+            ],
+          ],
+          "30d": Array [
+            Array [
+              1514764800,
+              1,
+            ],
+            Array [
+              1515024000,
+              122,
+            ],
+          ],
+        },
+        "tags": Array [
+          Object {
+            "canDelete": true,
+            "key": "browser",
+            "name": "Browser",
+          },
+          Object {
+            "canDelete": true,
+            "key": "device",
+            "name": "Device",
+          },
+          Object {
+            "canDelete": true,
+            "key": "url",
+            "name": "URL",
+          },
+          Object {
+            "canDelete": false,
+            "key": "environment",
+            "name": "Environment",
+          },
+        ],
+      }
+    }
+  />
+  <h6>
+    <span>
+      Tags
+    </span>
+  </h6>
+  <withEnvironment
+    data-test-id="group-tag"
+    group={
+      Object {
+        "assignedTo": null,
+        "id": "1",
+        "project": Object {
+          "id": "2",
+          "slug": "project-slug",
+        },
+        "stats": Object {
+          "24h": Array [
+            Array [
+              1517281200,
+              2,
+            ],
+            Array [
+              1517310000,
+              1,
+            ],
+          ],
+          "30d": Array [
+            Array [
+              1514764800,
+              1,
+            ],
+            Array [
+              1515024000,
+              122,
+            ],
+          ],
+        },
+        "tags": Array [
+          Object {
+            "canDelete": true,
+            "key": "browser",
+            "name": "Browser",
+          },
+          Object {
+            "canDelete": true,
+            "key": "device",
+            "name": "Device",
+          },
+          Object {
+            "canDelete": true,
+            "key": "url",
+            "name": "URL",
+          },
+          Object {
+            "canDelete": false,
+            "key": "environment",
+            "name": "Environment",
+          },
+        ],
+      }
+    }
+    key="browser"
+    name="Browser"
+    orgId="org-slug"
+    projectId="project-slug"
+    tag="browser"
+  />
+  <withEnvironment
+    data-test-id="group-tag"
+    group={
+      Object {
+        "assignedTo": null,
+        "id": "1",
+        "project": Object {
+          "id": "2",
+          "slug": "project-slug",
+        },
+        "stats": Object {
+          "24h": Array [
+            Array [
+              1517281200,
+              2,
+            ],
+            Array [
+              1517310000,
+              1,
+            ],
+          ],
+          "30d": Array [
+            Array [
+              1514764800,
+              1,
+            ],
+            Array [
+              1515024000,
+              122,
+            ],
+          ],
+        },
+        "tags": Array [
+          Object {
+            "canDelete": true,
+            "key": "browser",
+            "name": "Browser",
+          },
+          Object {
+            "canDelete": true,
+            "key": "device",
+            "name": "Device",
+          },
+          Object {
+            "canDelete": true,
+            "key": "url",
+            "name": "URL",
+          },
+          Object {
+            "canDelete": false,
+            "key": "environment",
+            "name": "Environment",
+          },
+        ],
+      }
+    }
+    key="device"
+    name="Device"
+    orgId="org-slug"
+    projectId="project-slug"
+    tag="device"
+  />
+  <withEnvironment
+    data-test-id="group-tag"
+    group={
+      Object {
+        "assignedTo": null,
+        "id": "1",
+        "project": Object {
+          "id": "2",
+          "slug": "project-slug",
+        },
+        "stats": Object {
+          "24h": Array [
+            Array [
+              1517281200,
+              2,
+            ],
+            Array [
+              1517310000,
+              1,
+            ],
+          ],
+          "30d": Array [
+            Array [
+              1514764800,
+              1,
+            ],
+            Array [
+              1515024000,
+              122,
+            ],
+          ],
+        },
+        "tags": Array [
+          Object {
+            "canDelete": true,
+            "key": "browser",
+            "name": "Browser",
+          },
+          Object {
+            "canDelete": true,
+            "key": "device",
+            "name": "Device",
+          },
+          Object {
+            "canDelete": true,
+            "key": "url",
+            "name": "URL",
+          },
+          Object {
+            "canDelete": false,
+            "key": "environment",
+            "name": "Environment",
+          },
+        ],
+      }
+    }
+    key="url"
+    name="URL"
+    orgId="org-slug"
+    projectId="project-slug"
+    tag="url"
+  />
+  <withEnvironment
+    data-test-id="group-tag"
+    group={
+      Object {
+        "assignedTo": null,
+        "id": "1",
+        "project": Object {
+          "id": "2",
+          "slug": "project-slug",
+        },
+        "stats": Object {
+          "24h": Array [
+            Array [
+              1517281200,
+              2,
+            ],
+            Array [
+              1517310000,
+              1,
+            ],
+          ],
+          "30d": Array [
+            Array [
+              1514764800,
+              1,
+            ],
+            Array [
+              1515024000,
+              122,
+            ],
+          ],
+        },
+        "tags": Array [
+          Object {
+            "canDelete": true,
+            "key": "browser",
+            "name": "Browser",
+          },
+          Object {
+            "canDelete": true,
+            "key": "device",
+            "name": "Device",
+          },
+          Object {
+            "canDelete": true,
+            "key": "url",
+            "name": "URL",
+          },
+          Object {
+            "canDelete": false,
+            "key": "environment",
+            "name": "Environment",
+          },
+        ],
+      }
+    }
+    key="environment"
+    name="Environment"
+    orgId="org-slug"
+    projectId="project-slug"
+    tag="environment"
+  />
+  <h6>
+    <span>
+      Notifications
+    </span>
+  </h6>
+  <p
+    className="help-block"
+  >
+    You're not subscribed to this issue.
+  </p>
+  <a
+    className="btn btn-default btn-subscribe"
+    onClick={[Function]}
+  >
+    <span
+      className="icon-signal"
+    />
+    Subscribe
+  </a>
+</div>
+`;
diff --git a/tests/js/spec/components/group/sidebar.spec.jsx b/tests/js/spec/components/group/sidebar.spec.jsx
new file mode 100644
index 0000000000..bbf59d0edb
--- /dev/null
+++ b/tests/js/spec/components/group/sidebar.spec.jsx
@@ -0,0 +1,94 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+
+import {GroupSidebar} from 'app/components/group/sidebar';
+
+describe('GroupSidebar', function() {
+  let group = TestStubs.Group({tags: TestStubs.Tags()});
+  let environment = {name: 'production', displayName: 'Production', id: '1'};
+  let wrapper;
+
+  beforeEach(function() {
+    MockApiClient.addMockResponse({
+      url: '/issues/1/participants/',
+      body: [],
+    });
+
+    MockApiClient.addMockResponse({
+      url: '/issues/1/',
+      body: group,
+    });
+
+    wrapper = shallow(
+      <GroupSidebar group={group} event={TestStubs.Event()} environment={environment} />,
+      TestStubs.routerContext()
+    );
+  });
+
+  afterEach(function() {
+    MockApiClient.clearMockResponses();
+  });
+
+  describe('renders with tags', function() {
+    it('renders', function() {
+      expect(wrapper).toMatchSnapshot();
+    });
+
+    it('renders tags', function() {
+      expect(wrapper.find('[data-test-id="group-tag"]')).toHaveLength(4);
+    });
+  });
+
+  describe('renders without tags', function() {
+    beforeEach(function() {
+      group = TestStubs.Group();
+
+      MockApiClient.addMockResponse({
+        url: '/issues/1/',
+        body: group,
+      });
+      wrapper = shallow(
+        <GroupSidebar
+          group={group}
+          event={TestStubs.Event()}
+          environment={environment}
+        />,
+        TestStubs.routerContext()
+      );
+    });
+
+    it('renders no tags', function() {
+      expect(wrapper.find('[data-test-id="group-tag"]')).toHaveLength(0);
+    });
+
+    it('renders empty text', function() {
+      expect(wrapper.find('[data-test-id="no-tags"]').text()).toBe(
+        'No tags found in the Production environment'
+      );
+    });
+  });
+
+  describe('subscribing', function() {
+    let issuesApi;
+    beforeEach(function() {
+      issuesApi = MockApiClient.addMockResponse({
+        url: '/projects/org-slug/project-slug/issues/',
+        method: 'PUT',
+        body: TestStubs.Group({isSubscribed: false}),
+      });
+    });
+
+    it('can subscribe', function() {
+      const btn = wrapper.find('.btn-subscribe');
+
+      btn.simulate('click');
+
+      expect(issuesApi).toHaveBeenCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          data: {isSubscribed: true},
+        })
+      );
+    });
+  });
+});
