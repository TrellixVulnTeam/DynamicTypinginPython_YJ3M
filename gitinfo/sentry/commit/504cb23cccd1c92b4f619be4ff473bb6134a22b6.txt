commit 504cb23cccd1c92b4f619be4ff473bb6134a22b6
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Feb 11 21:12:52 2013 -0800

    sentry.counters -> sentry.counter

diff --git a/src/sentry/counters/__init__.py b/src/sentry/counter/__init__.py
similarity index 83%
rename from src/sentry/counters/__init__.py
rename to src/sentry/counter/__init__.py
index e0404fb7b7..cae8a8233e 100644
--- a/src/sentry/counters/__init__.py
+++ b/src/sentry/counter/__init__.py
@@ -1,6 +1,6 @@
 """
-sentry.counters
-~~~~~~~~~~~~~~~
+sentry.counter
+~~~~~~~~~~~~~~
 
 :copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
diff --git a/src/sentry/counters/base.py b/src/sentry/counter/base.py
similarity index 95%
rename from src/sentry/counters/base.py
rename to src/sentry/counter/base.py
index bb9930f367..2673d7f81c 100644
--- a/src/sentry/counters/base.py
+++ b/src/sentry/counter/base.py
@@ -1,6 +1,6 @@
 """
-sentry.counters.base
-~~~~~~~~~~~~~~~~~~~~
+sentry.counter.base
+~~~~~~~~~~~~~~~~~~~
 
 :copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
diff --git a/src/sentry/counters/redis.py b/src/sentry/counter/redis.py
similarity index 93%
rename from src/sentry/counters/redis.py
rename to src/sentry/counter/redis.py
index bcfea14bc8..e4f02d8946 100644
--- a/src/sentry/counters/redis.py
+++ b/src/sentry/counter/redis.py
@@ -1,6 +1,6 @@
 """
-sentry.counters.redis
-~~~~~~~~~~~~~~~~~~~~~
+sentry.counter.redis
+~~~~~~~~~~~~~~~~~~~~
 
 :copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
@@ -10,7 +10,7 @@ from __future__ import with_statement
 
 import time
 from nydus.db import create_cluster
-from sentry.counters import Counter
+from sentry.counter import Counter
 from sentry.conf import settings
 
 
@@ -41,7 +41,7 @@ class RedisCounter(Counter):
         if when is None:
             when = time.time()
         when = int(when / 60)  # chop it down to the minute
-        return 'sentry.counters:%s:%s:%s=%s' % (when, int(unique), key, value)
+        return 'sentry.counter:%s:%s:%s=%s' % (when, int(unique), key, value)
 
     def incr(self, amount, created=False, **kwargs):
         now = time.time()
diff --git a/tests/sentry/counters/__init__.py b/tests/sentry/counter/__init__.py
similarity index 100%
rename from tests/sentry/counters/__init__.py
rename to tests/sentry/counter/__init__.py
diff --git a/tests/sentry/counters/redis/__init__.py b/tests/sentry/counter/redis/__init__.py
similarity index 100%
rename from tests/sentry/counters/redis/__init__.py
rename to tests/sentry/counter/redis/__init__.py
diff --git a/tests/sentry/counters/redis/tests.py b/tests/sentry/counter/redis/tests.py
similarity index 88%
rename from tests/sentry/counters/redis/tests.py
rename to tests/sentry/counter/redis/tests.py
index 7adc76cd2e..2516068c9f 100644
--- a/tests/sentry/counters/redis/tests.py
+++ b/tests/sentry/counter/redis/tests.py
@@ -4,7 +4,7 @@ from __future__ import absolute_import
 
 import mock
 
-from sentry.counters.redis import RedisCounter
+from sentry.counter.redis import RedisCounter
 from sentry.testutils import TestCase, fixture
 
 
@@ -22,18 +22,18 @@ class RedisCounterTest(TestCase):
         self.assertEquals(len(counter.conn.hosts), 1)
         self.assertEquals(counter.conn.hosts[0].host, 'localhost')
 
-    @mock.patch('sentry.counters.redis.time')
+    @mock.patch('sentry.counter.redis.time')
     def test_make_key_response(self, time):
         time = time.time
 
         time.return_value = 1360644295.816033
-        assert self.counter._make_key('team_id', 1) == 'sentry.counters:22677404:0:team_id=1'
+        assert self.counter._make_key('team_id', 1) == 'sentry.counter:22677404:0:team_id=1'
         time.assert_called_once_with()
 
         now = 1360654295.816033
-        assert self.counter._make_key('team_id', 1, now, unique=True) == 'sentry.counters:22677571:1:team_id=1'
+        assert self.counter._make_key('team_id', 1, now, unique=True) == 'sentry.counter:22677571:1:team_id=1'
 
-        assert self.counter._make_key('project_id', 'foo', now, unique=True) == 'sentry.counters:22677571:1:project_id=foo'
+        assert self.counter._make_key('project_id', 'foo', now, unique=True) == 'sentry.counter:22677571:1:project_id=foo'
 
     def test_all_the_things(self):
         self.counter.incr(1, team_id=1, project_id=1, group_id=1, created=False)
