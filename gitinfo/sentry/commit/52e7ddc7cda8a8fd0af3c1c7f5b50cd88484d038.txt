commit 52e7ddc7cda8a8fd0af3c1c7f5b50cd88484d038
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Sep 2 16:00:33 2015 -0700

    Ensure nodes get bound based on group

diff --git a/src/sentry/db/models/fields/node.py b/src/sentry/db/models/fields/node.py
index 324033202d..11ec2b4026 100644
--- a/src/sentry/db/models/fields/node.py
+++ b/src/sentry/db/models/fields/node.py
@@ -38,7 +38,8 @@ class NodeIntegrityFailure(Exception):
 
 
 class NodeData(collections.MutableMapping):
-    def __init__(self, id, data=None):
+    def __init__(self, field, id, data=None):
+        self.field = field
         self.id = id
         self.ref = None
         self._node_data = data
@@ -65,6 +66,12 @@ class NodeData(collections.MutableMapping):
                 cls_name, self.id, repr(self._node_data))
         return '<%s: id=%s>' % (cls_name, self.id,)
 
+    def get_ref(self, instance):
+        ref_func = self.field.ref_func
+        if not ref_func:
+            return
+        return ref_func(instance)
+
     @memoize
     def data(self):
         from sentry.app import nodestore
@@ -91,7 +98,9 @@ class NodeData(collections.MutableMapping):
         self._node_data = data
 
     def bind_ref(self, instance):
-        self.data['_ref'] = instance.pk
+        ref = self.get_ref(instance)
+        if ref:
+            self.data['_ref'] = ref
 
 
 class NodeField(GzippedDictField):
@@ -101,6 +110,10 @@ class NodeField(GzippedDictField):
     """
     __metaclass__ = models.SubfieldBase
 
+    def __init__(self, *args, **kwargs):
+        self.ref_func = kwargs.pop('ref_func', None)
+        super(NodeField, self).__init__(*args, **kwargs)
+
     def contribute_to_class(self, cls, name):
         super(NodeField, self).contribute_to_class(cls, name)
         post_delete.connect(
@@ -134,7 +147,7 @@ class NodeField(GzippedDictField):
             node_id = None
             data = value
 
-        return NodeData(node_id, data)
+        return NodeData(self, node_id, data)
 
     def get_prep_value(self, value):
         from sentry.app import nodestore
diff --git a/src/sentry/db/models/manager.py b/src/sentry/db/models/manager.py
index 0e3443103a..bb78c6a945 100644
--- a/src/sentry/db/models/manager.py
+++ b/src/sentry/db/models/manager.py
@@ -255,7 +255,8 @@ class BaseManager(Manager):
         node_results = nodestore.get_multi(node_ids)
 
         for item, node in object_node_list:
-            node.bind_data(node_results.get(node.id) or {}, ref=item.pk)
+            data = node_results.get(node.id) or {}
+            node.bind_data(data, ref=node.get_ref(item))
 
     def uncache_object(self, instance_id):
         pk_name = self.model._meta.pk.name
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 8c2561e58d..5b621be28c 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -388,10 +388,9 @@ class EventManager(object):
         using = group._state.db
 
         event.group = group
+        event.group_id = group.id
         # store a reference to the group id to guarantee validation of isolation
-        # TODO(dcramer): ideally NodeField would do this itself, but it's unable
-        # to
-        event.data.bind_ref(group)
+        event.data.bind_ref(event)
 
         try:
             with transaction.atomic():
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 3bfe8651c3..dfa2d0debb 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -38,7 +38,7 @@ class Event(Model):
     platform = models.CharField(max_length=64, null=True)
     datetime = models.DateTimeField(default=timezone.now, db_index=True)
     time_spent = BoundedIntegerField(null=True)
-    data = NodeField(blank=True, null=True)
+    data = NodeField(blank=True, null=True, ref_func=lambda x: x.group_id or x.group.id)
 
     objects = BaseManager()
 
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index c2a993b091..65a16769ab 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -143,4 +143,4 @@ class EventNodeStoreTest(TestCase):
 
         Event.objects.bind_nodes([event], 'data')
 
-        assert event.data.ref == event.pk
+        assert event.data.ref == event.group.id
