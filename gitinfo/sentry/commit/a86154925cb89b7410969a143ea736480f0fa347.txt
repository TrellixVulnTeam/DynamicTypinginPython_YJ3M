commit a86154925cb89b7410969a143ea736480f0fa347
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jul 20 16:55:46 2010 -0700

    Remove middleware and add a signal exception handler

diff --git a/README.rst b/README.rst
index 832d0e849c..f6ac7ac12c 100644
--- a/README.rst
+++ b/README.rst
@@ -26,6 +26,7 @@ Review the diff, then make any changes which appear necessary.
 Notable Changes
 ###############
 
+* 2.1.0 There is no longer a middleware. Instead, we use a fallback exception handler which catches all.
 * 2.0.0 Added `checksum` column to Error. Several indexes were created. Checksum calculation slightly changed.
 * 1.4.0 Added `logger` column to both Error and ErrorBatch. `traceback` and `class_name` are now nullable.
 * 1.3.0 Added `level` column to both Error and ErrorBatch.
@@ -42,16 +43,7 @@ OR, if you're not quite on the same page (work on that), with setuptools::
 
 	easy_install django-db-log
 
-Once installed, update your settings.py and add the middleware and installed apps settings::
-
-	MIDDLEWARE_CLASSES = (
-	    'django.middleware.common.CommonMiddleware',
-	    'django.contrib.sessions.middleware.SessionMiddleware',
-	    'django.contrib.auth.middleware.AuthenticationMiddleware',
-	    # placement is important
-	    'djangodblog.middleware.DBLogMiddleware',
-	    ...
-	)
+Once installed, update your settings.py and add dblog to ``INSTALLED_APPS``::
 
 	INSTALLED_APPS = (
 	    'django.contrib.admin',
@@ -115,7 +107,7 @@ Enables showing full embedded (enhanced) tracebacks within the administration fo
 DBLOG_LOGGING
 #############
 
-Enabling this setting will turn off automatic database logging with the middleware, and instead send all exceptions to the named logger ``dblog``. Use this in conjuction with ``djangodblog.handlers.DBLogHandler`` or your own handler to tweak how logging is dealt with.
+Enabling this setting will turn off automatic database logging within the exception handler, and instead send all exceptions to the named logger ``dblog``. Use this in conjuction with ``djangodblog.handlers.DBLogHandler`` or your own handler to tweak how logging is dealt with.
 
 A good example use case for this, is if you want to write to something like a syslog ahead of time, and later process that into the database with another tool.
 
@@ -155,7 +147,7 @@ If you wish to access these within your own views and models, you may do so via
 	# Pull the last 10 unresolved errors.
 	ErrorBatch.objects.filter(status=0).order_by('-last_seen')[0:10]
 
-You can also record errors outside of middleware if you want::
+You can also record errors outside of handler if you want::
 
 	from djangodblog.models import Error
 	
diff --git a/djangodblog/__init__.py b/djangodblog/__init__.py
index 5f6dac1ea5..149aa4c20c 100644
--- a/djangodblog/__init__.py
+++ b/djangodblog/__init__.py
@@ -1 +1 @@
-__version__ = (2, 0, 2)
\ No newline at end of file
+__version__ = (2, 1, 0)
\ No newline at end of file
diff --git a/djangodblog/middleware.py b/djangodblog/middleware.py
index 03090a769a..46042527f3 100644
--- a/djangodblog/middleware.py
+++ b/djangodblog/middleware.py
@@ -1,38 +1,8 @@
-from django.conf import settings as dj_settings
-from django.db import transaction
-from django.http import Http404
-
-from djangodblog.models import Error
-from djangodblog import settings
-
-import logging
-import sys
+import warnings
 
 __all__ = ('DBLogMiddleware',)
 
 class DBLogMiddleware(object):
-    @transaction.commit_on_success
+    """We now use signals"""
     def process_exception(self, request, exception):
-        if not settings.CATCH_404_ERRORS \
-                and isinstance(exception, Http404):                
-            return
-
-        if dj_settings.DEBUG or getattr(exception, 'skip_dblog', False):
-            return
-
-        if transaction.is_dirty():
-            transaction.rollback()
-
-        extra = dict(
-            url=request.build_absolute_uri(), data=dict(
-                META=request.META,
-                POST=request.POST,
-                GET=request.GET,
-                COOKIES=request.COOKIES,
-            )
-        )
-
-        if settings.USE_LOGGING:
-            logging.getLogger('dblog').critical(exception, exc_info=sys.exc_info(), extra=extra)
-        else:
-            Error.objects.create_from_exception(**extra)        
+        warnings.warn("DBLogMiddleware is no longer used.", DeprecationWarning)
diff --git a/djangodblog/models.py b/djangodblog/models.py
index 5687b79a76..4350558ec8 100644
--- a/djangodblog/models.py
+++ b/djangodblog/models.py
@@ -1,22 +1,26 @@
-from django.db import models
+from django.conf import settings as dj_settings
+from django.db import models, transaction
+from django.core.signals import got_request_exception
+from django.http import Http404
 from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
 
+from djangodblog import settings
+from djangodblog.manager import DBLogManager
+from djangodblog.utils import JSONDictField
+from djangodblog.helpers import construct_checksum
+
+import datetime
+import logging
+import sys
+
 try:
     from idmapper.models import SharedMemoryModel as Model
 except ImportError:
     Model = models.Model
 
-import datetime
-
-from djangodblog.manager import DBLogManager
-from djangodblog.utils import JSONDictField
-from djangodblog.helpers import construct_checksum
-
 __all__ = ('Error', 'ErrorBatch')
 
-import logging
-
 LOG_LEVELS = (
     (logging.INFO, 'Info'),
     (logging.WARNING, 'Warning'),
@@ -82,6 +86,35 @@ class ErrorBatch(Model):
     def get_absolute_url(self):
         return self.url
 
+    @staticmethod
+    @transaction.commit_on_success
+    def handle_exception(sender, request):
+        exc_type, exc_value, traceback = sys.exc_info()
+        
+        if not settings.CATCH_404_ERRORS \
+                and issubclass(exc_type, Http404):
+            return
+
+        if dj_settings.DEBUG or getattr(exc_type, 'skip_dblog', False):
+            return
+
+        if transaction.is_dirty():
+            transaction.rollback()
+
+        extra = dict(
+            url=request.build_absolute_uri(), data=dict(
+                META=request.META,
+                POST=request.POST,
+                GET=request.GET,
+                COOKIES=request.COOKIES,
+            )
+        )
+
+        if settings.USE_LOGGING:
+            logging.getLogger('dblog').critical(exc_value, exc_info=sys.exc_info(), extra=extra)
+        else:
+            Error.objects.create_from_exception(**extra)
+
 class Error(Model):
     logger          = models.CharField(max_length=64, blank=True, default='root', db_index=True)
     class_name      = models.CharField(_('type'), max_length=128, blank=True, null=True, db_index=True)
@@ -134,3 +167,6 @@ class Error(Model):
         if not self.checksum:
             self.checksum = construct_checksum(self)
         super(Error, self).save(*args, **kwargs)
+
+   
+got_request_exception.connect(ErrorBatch.handle_exception)
\ No newline at end of file
diff --git a/djangodblog/tests.py b/djangodblog/tests.py
index 7259051e14..65220636ce 100644
--- a/djangodblog/tests.py
+++ b/djangodblog/tests.py
@@ -158,7 +158,7 @@ class DBLogTestCase(TestCase):
         try:
             Error.objects.get(id=999999999)
         except Error.DoesNotExist, exc:
-            DBLogMiddleware().process_exception(request, exc)
+            ErrorBatch.handle_exception(request=request, sender=self)
         else:
             self.fail('Unable to create `Error` entry.')
         
@@ -297,7 +297,7 @@ class DBLogTestCase(TestCase):
         try:
             Error.objects.get(id=999999999)
         except Error.DoesNotExist, exc:
-            DBLogMiddleware().process_exception(request, exc)
+            ErrorBatch.handle_exception(request=request, sender=self)
         else:
             self.fail('Unable to create `Error` entry.')
         
@@ -318,7 +318,7 @@ class DBLogTestCase(TestCase):
         try:
             Error.objects.get(id=999999999)
         except Error.DoesNotExist, exc:
-            DBLogMiddleware().process_exception(request, exc)
+            ErrorBatch.handle_exception(request=request, sender=self)
         else:
             self.fail('Unable to create `Error` entry.')
         
