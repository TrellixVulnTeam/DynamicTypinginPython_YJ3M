commit f6be90cff44f12ae8d214565c4c53df1ab611d2e
Author: Mark Story <mark@mark-story.com>
Date:   Thu Jan 10 14:37:50 2019 -0500

    feat(issues) Update some issue search components to work in org context (#11460)
    
    Make a few of the issue list components work in a org or project
    context.
    
    Refs APP-990

diff --git a/src/sentry/static/sentry/app/actionCreators/tags.jsx b/src/sentry/static/sentry/app/actionCreators/tags.jsx
index caeb0fb6f9..e00fd8e8bb 100644
--- a/src/sentry/static/sentry/app/actionCreators/tags.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/tags.jsx
@@ -6,11 +6,15 @@ import AlertActions from 'app/actions/alertActions';
 
 const MAX_TAGS = 500;
 
-export function fetchTags(orgId, projectId) {
+export function fetchTags(orgId, projectId = null) {
   TagStore.reset();
   TagActions.loadTags();
   const api = new Client();
-  api.request(`/projects/${orgId}/${projectId}/tags/`, {
+  let url = projectId
+    ? `/projects/${orgId}/${projectId}/tags/`
+    : `/organizations/${orgId}/tags/`;
+
+  api.request(url, {
     success: tags => {
       let trimmedTags = tags.slice(0, MAX_TAGS);
 
@@ -26,6 +30,21 @@ export function fetchTags(orgId, projectId) {
   });
 }
 
+export function fetchTagValues(api, tagKey, orgId, projectId = null, query = null) {
+  let url = projectId
+    ? `/projects/${orgId}/${projectId}/tags/${tagKey}/values/`
+    : `/organizations/${orgId}/tags/${tagKey}/values/`;
+
+  if (query) {
+    query = {query};
+  }
+
+  return api.requestPromise(url, {
+    method: 'GET',
+    query,
+  });
+}
+
 export function fetchOrganizationTags(api, orgId) {
   return api.requestPromise(`/organizations/${orgId}/tags/`, {
     method: 'GET',
diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/stream/filters.jsx
index 11eeace405..5138648765 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filters.jsx
@@ -9,7 +9,7 @@ import TagStore from 'app/stores/tagStore';
 class StreamFilters extends React.Component {
   static propTypes = {
     orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
+    projectId: PropTypes.string,
     access: PropTypes.object.isRequired,
 
     searchId: PropTypes.string,
@@ -32,6 +32,7 @@ class StreamFilters extends React.Component {
   };
 
   static defaultProps = {
+    projectId: null,
     sort: '',
     query: null,
     onSortChange: function() {},
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index 715a709137..362c7caf94 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -3,6 +3,7 @@ import React from 'react';
 
 import {t} from 'app/locale';
 import SmartSearchBar from 'app/components/smartSearchBar';
+import {fetchTagValues} from 'app/actionCreators/tags';
 import TagStore from 'app/stores/tagStore';
 import withApi from 'app/utils/withApi';
 
@@ -53,7 +54,8 @@ class SearchBar extends React.Component {
   static propTypes = {
     api: PropTypes.object,
     orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
+    // Optional to enable project scope search
+    projectId: PropTypes.string,
   };
 
   /**
@@ -63,19 +65,12 @@ class SearchBar extends React.Component {
   getTagValues = (tag, query) => {
     let {api, orgId, projectId} = this.props;
 
-    return api
-      .requestPromise(`/projects/${orgId}/${projectId}/tags/${tag.key}/values/`, {
-        data: {
-          query,
-        },
-        method: 'GET',
-      })
-      .then(
-        values => values.map(({value}) => value),
-        () => {
-          throw new Error('Unable to fetch project tags');
-        }
-      );
+    return fetchTagValues(api, tag.key, orgId, projectId, query).then(
+      values => values.map(({value}) => value),
+      () => {
+        throw new Error('Unable to fetch project tags');
+      }
+    );
   };
 
   render() {
diff --git a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
index a5254907a5..77d9e49120 100644
--- a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
+++ b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
@@ -4,6 +4,7 @@ import React from 'react';
 
 import {Client} from 'app/api';
 import {addErrorMessage} from 'app/actionCreators/indicator';
+import {fetchTagValues} from 'app/actionCreators/tags';
 import {t, tct} from 'app/locale';
 import SelectControl from 'app/components/forms/selectControl';
 
@@ -12,7 +13,7 @@ class StreamTagFilter extends React.Component {
   static propTypes = {
     tag: PropTypes.object.isRequired,
     orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
+    projectId: PropTypes.string,
     value: PropTypes.string,
     onSelect: PropTypes.func,
   };
@@ -54,14 +55,8 @@ class StreamTagFilter extends React.Component {
     this.api.clear();
   }
 
-  getTagValuesAPIEndpoint = () => {
-    let {orgId, projectId, tag} = this.props;
-
-    return `/api/0/projects/${orgId}/${projectId}/tags/${tag.key}/values/`;
-  };
-
   handleLoadOptions = () => {
-    let {tag} = this.props;
+    let {orgId, projectId, tag} = this.props;
     let {textValue} = this.state;
     if (tag.isInput || tag.predefined) return;
     if (!this.api) return;
@@ -70,12 +65,7 @@ class StreamTagFilter extends React.Component {
       isLoading: true,
     });
 
-    this.api
-      .requestPromise(this.getTagValuesAPIEndpoint(), {
-        query: {
-          query: textValue,
-        },
-      })
+    fetchTagValues(this.api, tag.key, orgId, projectId, textValue)
       .then(resp => {
         this.setState({
           isLoading: false,
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index ce7385e26c..a4e48e56ee 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -7,7 +7,8 @@ import TagStore from 'app/stores/tagStore';
 describe('SearchBar', function() {
   let sandbox;
   let options;
-  let urlTagValuesMock;
+  let projectTagValuesMock;
+  let orgTagValuesMock;
   let supportedTags;
   const clickInput = searchBar => searchBar.find('input[name="query"]').simulate('click');
 
@@ -22,10 +23,14 @@ describe('SearchBar', function() {
       context: {organization: {id: '123'}},
     };
 
-    urlTagValuesMock = MockApiClient.addMockResponse({
+    projectTagValuesMock = MockApiClient.addMockResponse({
       url: '/projects/123/456/tags/url/values/',
       body: [],
     });
+    orgTagValuesMock = MockApiClient.addMockResponse({
+      url: '/organizations/123/tags/url/values/',
+      body: [],
+    });
   });
 
   afterEach(function() {
@@ -55,9 +60,9 @@ describe('SearchBar', function() {
       clock.tick(301);
       expect(searchBar.find('SearchDropdown').prop('searchSubstring')).toEqual('"fu"');
       expect(searchBar.find('SearchDropdown').prop('items')).toEqual([]);
-      expect(urlTagValuesMock).toHaveBeenCalledWith(
+      expect(projectTagValuesMock).toHaveBeenCalledWith(
         '/projects/123/456/tags/url/values/',
-        expect.objectContaining({data: {query: 'fu'}})
+        expect.objectContaining({query: {query: 'fu'}})
       );
     });
 
@@ -78,10 +83,11 @@ describe('SearchBar', function() {
       expect(searchBar.find('SearchDropdown').prop('items')).toEqual([]);
       clock.tick(301);
 
-      expect(urlTagValuesMock).toHaveBeenCalledWith(
+      expect(projectTagValuesMock).toHaveBeenCalledWith(
         '/projects/123/456/tags/url/values/',
-        expect.objectContaining({data: {query: 'http://example.com'}})
+        expect.objectContaining({query: {query: 'http://example.com'}})
       );
+      expect(orgTagValuesMock).not.toHaveBeenCalled();
     });
 
     it('does not request values when tag is `timesSeen`', function() {
@@ -101,5 +107,24 @@ describe('SearchBar', function() {
       clock.tick(301);
       expect(mock).not.toHaveBeenCalled();
     });
+
+    it('sets state with complete tag when there is no projectid', function() {
+      let props = {
+        orgId: '123',
+        query: 'url:"fu"',
+        supportedTags,
+      };
+      let searchBar = mount(<SearchBar {...props} />, options);
+      clickInput(searchBar);
+      clock.tick(301);
+      expect(searchBar.find('SearchDropdown').prop('searchSubstring')).toEqual('"fu"');
+      expect(searchBar.find('SearchDropdown').prop('items')).toEqual([]);
+
+      expect(projectTagValuesMock).not.toHaveBeenCalled();
+      expect(orgTagValuesMock).toHaveBeenCalledWith(
+        '/organizations/123/tags/url/values/',
+        expect.objectContaining({query: {query: 'fu'}})
+      );
+    });
   });
 });
diff --git a/tests/js/spec/views/stream/tagFilter.spec.jsx b/tests/js/spec/views/stream/tagFilter.spec.jsx
index d2f809daf2..a30e4a08e9 100644
--- a/tests/js/spec/views/stream/tagFilter.spec.jsx
+++ b/tests/js/spec/views/stream/tagFilter.spec.jsx
@@ -4,7 +4,8 @@ import {mount} from 'enzyme';
 import StreamTagFilter from 'app/views/stream/tagFilter';
 
 describe('Stream TagFilter', function() {
-  let apiMock;
+  let projectApiMock;
+  let orgApiMock;
 
   let organization;
   let project;
@@ -13,8 +14,22 @@ describe('Stream TagFilter', function() {
     MockApiClient.clearMockResponses();
     organization = TestStubs.Organization();
     project = TestStubs.ProjectDetails();
-    apiMock = MockApiClient.addMockResponse({
-      url: `/api/0/projects/${organization.slug}/${project.slug}/tags/browser/values/`,
+    projectApiMock = MockApiClient.addMockResponse({
+      url: `/projects/${organization.slug}/${project.slug}/tags/browser/values/`,
+      body: [
+        {
+          count: 0,
+          firstSeen: '2018-05-30T11:33:46.535Z',
+          key: 'browser',
+          lastSeen: '2018-05-30T11:33:46.535Z',
+          name: 'foo',
+          value: 'foo',
+        },
+      ],
+    });
+
+    orgApiMock = MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/tags/browser/values/`,
       body: [
         {
           count: 0,
@@ -47,7 +62,32 @@ describe('Stream TagFilter', function() {
     await tick();
     wrapper.update();
 
-    expect(apiMock).toHaveBeenCalled();
+    expect(projectApiMock).toHaveBeenCalled();
+    expect(wrapper.find('div.Select-option').prop('children')).toBe('foo');
+
+    wrapper.find('Option').simulate('mouseDown');
+    expect(selectMock).toHaveBeenCalledWith(tag, 'foo');
+  });
+
+  it('calls API and renders options when opened without project', async function() {
+    let selectMock = jest.fn();
+    let tag = {key: 'browser', name: 'Browser'};
+    let wrapper = mount(
+      <StreamTagFilter
+        tag={tag}
+        orgId={organization.slug}
+        value=""
+        onSelect={selectMock}
+      />
+    );
+
+    wrapper.find('input').simulate('focus');
+    wrapper.find('.Select-control').simulate('mouseDown', {button: 0});
+
+    await tick();
+    wrapper.update();
+
+    expect(orgApiMock).toHaveBeenCalled();
     expect(wrapper.find('div.Select-option').prop('children')).toBe('foo');
 
     wrapper.find('Option').simulate('mouseDown');
