commit 1a78b521cd7eb55a9ee2940f759d9c48843f3845
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Feb 2 17:18:12 2013 -0800

    Various improvements for static media

diff --git a/setup.py b/setup.py
index 6169fe477e..475baea78c 100755
--- a/setup.py
+++ b/setup.py
@@ -61,7 +61,7 @@ install_requires = [
     'django-indexer>=0.3.0',
     'django-paging>=0.2.4',
     'django-picklefield>=0.2.0',
-    'django-static-compiler>=0.2.0,<0.3.0',
+    'django-static-compiler>=0.2.3,<0.3.0',
     'django-templatetag-sugar>=0.1.0',
     'gunicorn>=0.14.6',
     'logan>=0.5.4',
diff --git a/src/sentry/conf/urls.py b/src/sentry/conf/urls.py
index e99e323174..d4bda98b5e 100644
--- a/src/sentry/conf/urls.py
+++ b/src/sentry/conf/urls.py
@@ -11,7 +11,6 @@ These are additional urls used by the Sentry-provided web server
 import os
 
 from sentry.web.urls import urlpatterns as web_urlpatterns
-from sentry.web.frontend import generic
 from django.conf.urls.defaults import patterns, url, include
 from django.contrib import admin
 from django.views.defaults import page_not_found
@@ -41,7 +40,4 @@ def handler500(request):
 urlpatterns = patterns('',
     url(r'^i18n/', include('django.conf.urls.i18n')),
     url(r'^admin/', include(admin.site.urls)),
-    url(r'^_admin_media/(?P<path>.*)$', generic.static_media,
-        kwargs={'root': admin_media_dir},
-        name='admin-media'),
 ) + web_urlpatterns
diff --git a/src/sentry/web/frontend/generic.py b/src/sentry/web/frontend/generic.py
index 49ceb8f97a..ad4e1d338a 100644
--- a/src/sentry/web/frontend/generic.py
+++ b/src/sentry/web/frontend/generic.py
@@ -7,14 +7,20 @@ sentry.web.frontend.generic
 """
 from django.http import HttpResponseRedirect, Http404, HttpResponseNotModified, \
   HttpResponse
-from django.conf import settings as dj_settings
+from django.contrib.staticfiles import finders
 from django.core.urlresolvers import reverse
+from django.utils.datastructures import SortedDict
 
-from sentry.conf import settings
 from sentry.models import Team
 from sentry.web.decorators import login_required
 
-STATIC_PATH_CACHE = {}
+
+def find_static_files(ignore_patterns=()):
+    found_files = SortedDict()
+    for finder in finders.get_finders():
+        for path, storage in finder.list(ignore_patterns):
+            found_files[path] = storage.path(path)
+    return found_files
 
 
 @login_required
@@ -39,69 +45,16 @@ def wall_display(request):
     return dashboard(request, 'wall.html')
 
 
-def static_media(request, module, path, root=None):
+def static_media(request, **kwargs):
     """
     Serve static files below a given point in the directory structure.
     """
-    from django.utils.http import http_date
-    from django.views.static import was_modified_since
-    import mimetypes
-    import os.path
-    import posixpath
-    import stat
-    import urllib
-
-    if root:
-        document_root = root
-    elif module == 'sentry':
-        document_root = os.path.join(settings.MODULE_ROOT, 'static', module)
-    elif module == dj_settings.COMPRESS_OUTPUT_DIR:
-        document_root = os.path.join(dj_settings.STATIC_ROOT, module)
-    elif module not in dj_settings.INSTALLED_APPS:
-        raise Http404('Invalid module provided.')
-    else:
-        if module not in STATIC_PATH_CACHE:
-            try:
-                mod = __import__(module)
-            except ImportError:
-                raise Http404('Import error raised while fetching module')
+    from django.contrib.staticfiles.views import serve
 
-            STATIC_PATH_CACHE[module] = os.path.normpath(os.path.join(
-                os.path.dirname(mod.__file__),
-                'static',
-                module,
-            ))
+    module = kwargs.get('module')
+    path = kwargs.get('path', '')
 
-        document_root = STATIC_PATH_CACHE[module]
+    if module:
+        path = '%s/%s' % (module, path)
 
-    path = posixpath.normpath(urllib.unquote(path))
-    path = path.lstrip('/')
-    newpath = ''
-    for part in path.split('/'):
-        if not part:
-            # Strip empty path components.
-            continue
-        drive, part = os.path.splitdrive(part)
-        head, part = os.path.split(part)
-        if part in (os.curdir, os.pardir):
-            # Strip '.' and '..' in path.
-            continue
-        newpath = os.path.join(newpath, part).replace('\\', '/')
-    if newpath and path != newpath:
-        return HttpResponseRedirect(newpath)
-    fullpath = os.path.join(document_root, newpath)
-    if os.path.isdir(fullpath):
-        raise Http404('Directory indexes are not allowed here.')
-    if not os.path.exists(fullpath):
-        raise Http404('"%s" does not exist' % fullpath)
-    # Respect the If-Modified-Since header.
-    statobj = os.stat(fullpath)
-    mimetype = mimetypes.guess_type(fullpath)[0] or 'application/octet-stream'
-    if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'),
-                              statobj[stat.ST_MTIME], statobj[stat.ST_SIZE]):
-        return HttpResponseNotModified(mimetype=mimetype)
-    contents = open(fullpath, 'rb').read()
-    response = HttpResponse(contents, mimetype=mimetype)
-    response['Last-Modified'] = http_date(statobj[stat.ST_MTIME])
-    response['Content-Length'] = len(contents)
-    return response
+    return serve(request, path, insecure=True)
