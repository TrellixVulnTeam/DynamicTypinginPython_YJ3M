commit 9be8d2ab8c470a15c34f49da4b2411f2d2c3f7fb
Author: Mark Story <mark@sentry.io>
Date:   Mon Jan 13 13:18:43 2020 -0500

    feat(discover2) Connect tag summary to facets endpoints (#16326)
    
    Because we don't know the names of the tags when we start a facet
    request, I've added a few generic placeholders, and new empty state.
    
    This also eliminates `tags` from the eventView as they are no longer
    relevant or editable by end users.

diff --git a/src/sentry/api/serializers/models/discoversavedquery.py b/src/sentry/api/serializers/models/discoversavedquery.py
index 909047aee2..87273d08e9 100644
--- a/src/sentry/api/serializers/models/discoversavedquery.py
+++ b/src/sentry/api/serializers/models/discoversavedquery.py
@@ -22,7 +22,6 @@ class DiscoverSavedQuerySerializer(Serializer):
             "end",
             "orderby",
             "limit",
-            "tags",
             "yAxis",
         ]
 
diff --git a/src/sentry/discover/endpoints/serializers.py b/src/sentry/discover/endpoints/serializers.py
index 4a58ceb7e4..65d0ffaec8 100644
--- a/src/sentry/discover/endpoints/serializers.py
+++ b/src/sentry/discover/endpoints/serializers.py
@@ -159,12 +159,11 @@ class DiscoverSavedQuerySerializer(serializers.Serializer):
     # Attributes that are only accepted if version = 2
     environment = ListField(child=serializers.CharField(), required=False, allow_null=True)
     query = serializers.CharField(required=False, allow_null=True)
-    tags = ListField(child=serializers.CharField(), required=False, allow_null=True)
     widths = ListField(child=serializers.CharField(), required=False, allow_null=True)
     yAxis = serializers.CharField(required=False, allow_null=True)
 
     disallowed_fields = {
-        1: set(["environment", "query", "tags", "yAxis"]),
+        1: set(["environment", "query", "yAxis"]),
         2: set(["groupby", "rollup", "aggregations", "conditions", "limit"]),
     }
 
@@ -198,7 +197,6 @@ class DiscoverSavedQuerySerializer(serializers.Serializer):
             "end",
             "orderby",
             "limit",
-            "tags",
             "widths",
             "yAxis",
         ]
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index 7fc8e08dcf..5763c0e222 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -269,7 +269,6 @@ class EventView {
   name: string | undefined;
   fields: Readonly<Field[]>;
   sorts: Readonly<Sort[]>;
-  tags: Readonly<string[]>;
   query: string;
   project: Readonly<number[]>;
   start: string | undefined;
@@ -283,7 +282,6 @@ class EventView {
     name: string | undefined;
     fields: Readonly<Field[]>;
     sorts: Readonly<Sort[]>;
-    tags: Readonly<string[]>;
     query: string;
     project: Readonly<number[]>;
     start: string | undefined;
@@ -294,7 +292,6 @@ class EventView {
   }) {
     const fields: Field[] = Array.isArray(props.fields) ? props.fields : [];
     let sorts: Sort[] = Array.isArray(props.sorts) ? props.sorts : [];
-    const tags = Array.isArray(props.tags) ? props.tags : [];
     const project = Array.isArray(props.project) ? props.project : [];
     const environment = Array.isArray(props.environment) ? props.environment : [];
 
@@ -321,7 +318,6 @@ class EventView {
     this.name = props.name;
     this.fields = fields;
     this.sorts = sorts;
-    this.tags = tags;
     this.query = typeof props.query === 'string' ? props.query : '';
     this.project = project;
     this.start = props.start;
@@ -339,7 +335,6 @@ class EventView {
       name: decodeScalar(location.query.name),
       fields: decodeFields(location),
       sorts: decodeSorts(location),
-      tags: collectQueryStringByKey(location.query, 'tag'),
       query: decodeQuery(location) || '',
       project: decodeProjects(location),
       start: decodeScalar(start),
@@ -405,12 +400,6 @@ class EventView {
       end: decodeScalar(end),
       statsPeriod: decodeScalar(statsPeriod),
       sorts: fromSorts(saved.orderby),
-      tags: collectQueryStringByKey(
-        {
-          tags: saved.tags as string[],
-        },
-        'tags'
-      ),
       environment: collectQueryStringByKey(
         {
           environment: saved.environment as string[],
@@ -429,7 +418,6 @@ class EventView {
       'statsPeriod',
       'fields',
       'sorts',
-      'tags',
       'project',
       'environment',
       'yAxis',
@@ -475,7 +463,6 @@ class EventView {
       fields: this.getFields(),
       widths: this.getWidths().map(w => String(w)),
       orderby,
-      tags: this.tags,
       query: this.query || '',
       projects: this.project,
       start: this.start,
@@ -530,7 +517,6 @@ class EventView {
       field: this.getFields(),
       widths: this.getWidths(),
       sort: encodeSorts(this.sorts),
-      tag: this.tags,
       environment: this.environment,
       project: this.project,
       query: this.query,
@@ -589,7 +575,6 @@ class EventView {
       name: this.name,
       fields: this.fields,
       sorts: this.sorts,
-      tags: this.tags,
       query: this.query,
       project: this.project,
       start: this.start,
@@ -827,17 +812,14 @@ class EventView {
     return queryParts.join(' ');
   }
 
-  getTagsAPIPayload(
+  getFacetsAPIPayload(
     location: Location
   ): Exclude<EventQuery & LocationQuery, 'sort' | 'cursor'> {
     const payload = this.getEventsAPIPayload(location);
 
-    if (payload.sort) {
-      delete payload.sort;
-    }
-
-    if (payload.cursor) {
-      delete payload.cursor;
+    const remove = ['id', 'name', 'per_page', 'sort', 'cursor', 'field'];
+    for (const key of remove) {
+      delete payload[key];
     }
 
     return payload;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/results.tsx b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
index f8ec1f7904..b4a6f0c66e 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/results.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
@@ -104,10 +104,6 @@ class Results extends React.Component<Props, State> {
     const {organization, location} = this.props;
     const {eventView} = this.state;
 
-    if (eventView.tags.length <= 0) {
-      return null;
-    }
-
     return <Tags eventView={eventView} organization={organization} location={location} />;
   };
 
@@ -218,12 +214,11 @@ const Top = styled('div')`
   flex-grow: 0;
 `;
 const Main = styled('div')<{eventView: EventView}>`
-  grid-column: ${p => (p.eventView.tags.length <= 0 ? '1/3' : '1/2')};
+  grid-column: 1/2;
   max-width: 100%;
   overflow: hidden;
 `;
 const Side = styled('div')<{eventView: EventView}>`
-  display: ${p => (p.eventView.tags.length <= 0 ? 'none' : 'initial')};
   grid-column: 2/3;
 `;
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/tags.tsx b/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
index 4f11873e6c..f1f690b811 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
@@ -1,7 +1,6 @@
 import React from 'react';
 import PropTypes from 'prop-types';
 import styled from '@emotion/styled';
-import isEqual from 'lodash/isEqual';
 import {Location} from 'history';
 import {t} from 'app/locale';
 import * as Sentry from '@sentry/browser';
@@ -9,6 +8,7 @@ import * as Sentry from '@sentry/browser';
 import space from 'app/styles/space';
 import {Client} from 'app/api';
 import SentryTypes from 'app/sentryTypes';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
 import Placeholder from 'app/components/placeholder';
 import TagDistributionMeter from 'app/components/tagDistributionMeter';
 import withApi from 'app/utils/withApi';
@@ -17,7 +17,7 @@ import {trackAnalyticsEvent} from 'app/utils/analytics';
 import {SectionHeading} from './styles';
 
 import {
-  fetchTagDistribution,
+  fetchTagFacets,
   fetchTotalCount,
   getEventTagSearchUrl,
   Tag,
@@ -33,7 +33,8 @@ type Props = {
 };
 
 type State = {
-  tags: {[key: string]: Tag};
+  loading: boolean;
+  tags: Tag[];
   totalValues: null | number;
 };
 
@@ -46,7 +47,8 @@ class Tags extends React.Component<Props, State> {
   };
 
   state: State = {
-    tags: {},
+    loading: true,
+    tags: [],
     totalValues: null,
   };
 
@@ -55,19 +57,14 @@ class Tags extends React.Component<Props, State> {
   }
 
   componentDidUpdate(prevProps: Props) {
-    const tagsChanged = !isEqual(
-      new Set(this.props.eventView.tags),
-      new Set(prevProps.eventView.tags)
-    );
-
-    if (tagsChanged || this.shouldRefetchData(prevProps)) {
+    if (this.shouldRefetchData(prevProps)) {
       this.fetchData();
     }
   }
 
   shouldRefetchData = (prevProps: Props): boolean => {
-    const thisAPIPayload = this.props.eventView.getTagsAPIPayload(this.props.location);
-    const otherAPIPayload = prevProps.eventView.getTagsAPIPayload(prevProps.location);
+    const thisAPIPayload = this.props.eventView.getFacetsAPIPayload(this.props.location);
+    const otherAPIPayload = prevProps.eventView.getFacetsAPIPayload(prevProps.location);
 
     return !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload);
   };
@@ -75,33 +72,25 @@ class Tags extends React.Component<Props, State> {
   fetchData = async () => {
     const {api, organization, eventView, location} = this.props;
 
-    this.setState({tags: {}, totalValues: null});
+    this.setState({loading: true, tags: [], totalValues: null});
 
-    eventView.tags.forEach(async tag => {
-      try {
-        const val = await fetchTagDistribution(
-          api,
-          organization.slug,
-          tag,
-          eventView.getTagsAPIPayload(location)
-        );
-
-        this.setState(state => ({tags: {...state.tags, [tag]: val}}));
-      } catch (err) {
+    const facetPromise = fetchTagFacets(
+      api,
+      organization.slug,
+      eventView.getFacetsAPIPayload(location)
+    );
+    const totalValuePromise = fetchTotalCount(
+      api,
+      organization.slug,
+      eventView.getEventsAPIPayload(location)
+    );
+    Promise.all([facetPromise, totalValuePromise])
+      .then(values => {
+        this.setState({loading: false, tags: values[0], totalValues: values[1]});
+      })
+      .catch(err => {
         Sentry.captureException(err);
-      }
-    });
-
-    try {
-      const totalValues = await fetchTotalCount(
-        api,
-        organization.slug,
-        eventView.getEventsAPIPayload(location)
-      );
-      this.setState({totalValues});
-    } catch (err) {
-      Sentry.captureException(err);
-    }
+      });
   };
 
   onTagClick = (tag: string, segment: TagTopValue) => {
@@ -116,39 +105,50 @@ class Tags extends React.Component<Props, State> {
     });
   };
 
-  renderTag(tag) {
+  renderTag(tag: Tag) {
     const {location} = this.props;
-    const {tags, totalValues} = this.state;
-    const isLoading = !tags[tag] || totalValues === null;
+    const {totalValues} = this.state;
 
-    let segments: Array<TagTopValue> = [];
+    const segments: TagTopValue[] = tag.topValues.map(segment => {
+      segment.url = getEventTagSearchUrl(tag.key, segment.value, location);
 
-    if (!isLoading) {
-      segments = tags[tag].topValues;
-    }
-
-    segments.forEach(segment => {
-      segment.url = getEventTagSearchUrl(tag, segment.value, location);
+      return segment;
     });
 
     return (
       <TagDistributionMeter
-        key={tag}
-        title={tag}
+        key={tag.key}
+        title={tag.key}
         segments={segments}
         totalValues={totalValues}
-        isLoading={isLoading}
         renderLoading={() => <StyledPlaceholder height="16px" />}
         onTagClick={this.onTagClick}
       />
     );
   }
 
+  renderPlaceholders() {
+    return (
+      <React.Fragment>
+        <StyledPlaceholderTitle key="title-1" />
+        <StyledPlaceholder key="bar-1" />
+        <StyledPlaceholderTitle key="title-2" />
+        <StyledPlaceholder key="bar-2" />
+        <StyledPlaceholderTitle key="title-3" />
+        <StyledPlaceholder key="bar-3" />
+      </React.Fragment>
+    );
+  }
+
   render() {
     return (
       <TagSection>
         <StyledHeading>{t('Event Tag Summary')}</StyledHeading>
-        {this.props.eventView.tags.map(tag => this.renderTag(tag))}
+        {this.state.loading && this.renderPlaceholders()}
+        {this.state.tags.length > 0 && this.state.tags.map(tag => this.renderTag(tag))}
+        {!this.state.loading && !this.state.tags.length && (
+          <EmptyStateWarning small>{t('No tags')}</EmptyStateWarning>
+        )}
       </TagSection>
     );
   }
@@ -164,6 +164,14 @@ const TagSection = styled('div')`
 
 const StyledPlaceholder = styled(Placeholder)`
   border-radius: ${p => p.theme.borderRadius};
+  height: 16px;
+  margin-bottom: ${space(1.5)};
+`;
+
+const StyledPlaceholderTitle = styled(Placeholder)`
+  width: 100px;
+  height: 12px;
+  margin-bottom: ${space(0.5)};
 `;
 
 export {Tags};
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 8cd57bbeb5..328068f8bd 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -129,29 +129,28 @@ export type TagTopValue = {
 };
 
 export type Tag = {
+  key: string;
   topValues: Array<TagTopValue>;
 };
 
 /**
- * Fetches tag distributions for a single tag key
+ * Fetches tag facets for a query
  *
  * @param {Object} api
  * @param {String} orgSlug
- * @param {String} key
  * @param {String} query
  * @returns {Promise<Object>}
  */
-export function fetchTagDistribution(
+export function fetchTagFacets(
   api: Client,
   orgSlug: string,
-  key: string,
   query: EventQuery
-): Promise<Tag> {
+): Promise<Tag[]> {
   const urlParams = pick(query, Object.values(URL_PARAM));
 
-  const queryOption = {...urlParams, key, query: query.query};
+  const queryOption = {...urlParams, query: query.query};
 
-  return api.requestPromise(`/organizations/${orgSlug}/events-distribution/`, {
+  return api.requestPromise(`/organizations/${orgSlug}/events-facets/`, {
     query: queryOption,
   });
 }
diff --git a/tests/js/spec/views/eventsV2/eventView.spec.jsx b/tests/js/spec/views/eventsV2/eventView.spec.jsx
index 48083bc002..fee292831c 100644
--- a/tests/js/spec/views/eventsV2/eventView.spec.jsx
+++ b/tests/js/spec/views/eventsV2/eventView.spec.jsx
@@ -31,7 +31,6 @@ describe('EventView constructor', function() {
       name: undefined,
       fields: [],
       sorts: [],
-      tags: [],
       query: '',
       project: [],
       start: undefined,
@@ -52,7 +51,6 @@ describe('EventView.fromLocation()', function() {
         field: ['count()', 'id'],
         widths: ['123', '456'],
         sort: ['title', '-count'],
-        tag: ['foo', 'bar'],
         query: 'event.type:transaction',
         project: [123],
         start: '2019-10-01T00:00:00',
@@ -70,7 +68,6 @@ describe('EventView.fromLocation()', function() {
       name: 'best query',
       fields: [{field: 'count()', width: 123}, {field: 'id', width: 456}],
       sorts: generateSorts(['count']),
-      tags: ['foo', 'bar'],
       query: 'event.type:transaction',
       project: [123],
       start: undefined,
@@ -89,7 +86,6 @@ describe('EventView.fromLocation()', function() {
         field: ['count()', 'id'],
         widths: ['123', '456'],
         sort: ['title', '-count'],
-        tag: ['foo', 'bar'],
         query: 'event.type:transaction',
         project: [123],
         start: '2019-10-01T00:00:00',
@@ -106,7 +102,6 @@ describe('EventView.fromLocation()', function() {
       name: 'best query',
       fields: [{field: 'count()', width: 123}, {field: 'id', width: 456}],
       sorts: generateSorts(['count']),
-      tags: ['foo', 'bar'],
       query: 'event.type:transaction',
       project: [123],
       start: undefined,
@@ -124,7 +119,6 @@ describe('EventView.fromLocation()', function() {
         field: ['count()', 'id'],
         widths: ['123', '456'],
         sort: ['title', '-count'],
-        tag: ['foo', 'bar'],
         query: 'event.type:transaction',
         project: [123],
         start: '2019-10-01T00:00:00',
@@ -140,7 +134,6 @@ describe('EventView.fromLocation()', function() {
       name: 'best query',
       fields: [{field: 'count()', width: 123}, {field: 'id', width: 456}],
       sorts: generateSorts(['count']),
-      tags: ['foo', 'bar'],
       query: 'event.type:transaction',
       project: [123],
       start: '2019-10-01T00:00:00.000',
@@ -161,7 +154,6 @@ describe('EventView.fromLocation()', function() {
       name: void 0,
       fields: [],
       sorts: [],
-      tags: [],
       query: '',
       project: [],
       start: void 0,
@@ -197,7 +189,6 @@ describe('EventView.fromSavedQuery()', function() {
         {field: 'id', width: COL_WIDTH_UNDEFINED},
       ],
       sorts: [{field: 'id', kind: 'desc'}],
-      tags: [],
       query: 'event.type:transaction',
       project: [123],
       start: undefined,
@@ -220,7 +211,6 @@ describe('EventView.fromSavedQuery()', function() {
         {field: 'id', width: COL_WIDTH_UNDEFINED},
       ],
       sorts: [{field: 'id', kind: 'desc'}],
-      tags: [],
       query: 'event.type:transaction',
       project: [123],
       start: '2019-10-01T00:00:00.000',
@@ -368,14 +358,6 @@ describe('EventView.fromNewQueryWithLocation()', function() {
     fields: ['title', 'event.type', 'project', 'user', 'timestamp'],
     orderby: '-timestamp',
     version: 2,
-    tags: [
-      'event.type',
-      'release',
-      'project.name',
-      'user.email',
-      'user.ip',
-      'environment',
-    ],
   };
 
   it('maps basic properties of a prebuilt query', function() {
@@ -398,14 +380,6 @@ describe('EventView.fromNewQueryWithLocation()', function() {
         {field: 'timestamp'},
       ],
       sorts: [{field: 'timestamp', kind: 'desc'}],
-      tags: [
-        'event.type',
-        'release',
-        'project.name',
-        'user.email',
-        'user.ip',
-        'environment',
-      ],
       query: '',
       project: [],
       start: undefined,
@@ -439,14 +413,6 @@ describe('EventView.fromNewQueryWithLocation()', function() {
         {field: 'timestamp'},
       ],
       sorts: [{field: 'timestamp', kind: 'desc'}],
-      tags: [
-        'event.type',
-        'release',
-        'project.name',
-        'user.email',
-        'user.ip',
-        'environment',
-      ],
       query: '',
       project: [456],
       start: undefined,
@@ -486,14 +452,6 @@ describe('EventView.fromNewQueryWithLocation()', function() {
         {field: 'timestamp'},
       ],
       sorts: [{field: 'timestamp', kind: 'desc'}],
-      tags: [
-        'event.type',
-        'release',
-        'project.name',
-        'user.email',
-        'user.ip',
-        'environment',
-      ],
       query: '',
       project: [987],
       start: undefined,
@@ -535,14 +493,6 @@ describe('EventView.fromNewQueryWithLocation()', function() {
         {field: 'timestamp'},
       ],
       sorts: [{field: 'timestamp', kind: 'desc'}],
-      tags: [
-        'event.type',
-        'release',
-        'project.name',
-        'user.email',
-        'user.ip',
-        'environment',
-      ],
       query: '',
       project: [987],
       start: '2019-10-01T00:00:00.000',
@@ -558,7 +508,6 @@ describe('EventView.generateQueryStringObject()', function() {
   it('skips empty values', function() {
     const eventView = new EventView({
       fields: generateFields(['id', 'title']),
-      tags: [],
       sorts: [],
       project: [],
       environment: '',
@@ -574,7 +523,6 @@ describe('EventView.generateQueryStringObject()', function() {
       field: ['id', 'title'],
       widths: [COL_WIDTH_UNDEFINED, COL_WIDTH_UNDEFINED],
       sort: [],
-      tag: [],
       query: '',
       project: [],
       environment: [],
@@ -589,7 +537,6 @@ describe('EventView.generateQueryStringObject()', function() {
       name: 'best query',
       fields: [{field: 'count()', width: 123}, {field: 'project.id', width: 456}],
       sorts: generateSorts(['count']),
-      tags: ['foo', 'bar'],
       query: 'event.type:error',
       project: [42],
       start: '2019-10-01T00:00:00',
@@ -607,7 +554,6 @@ describe('EventView.generateQueryStringObject()', function() {
       field: ['count()', 'project.id'],
       widths: [123, 456],
       sort: ['-count'],
-      tag: ['foo', 'bar'],
       query: 'event.type:error',
       project: [42],
       start: '2019-10-01T00:00:00',
@@ -623,7 +569,6 @@ describe('EventView.generateQueryStringObject()', function() {
   it('encodes fields', function() {
     const eventView = new EventView({
       fields: [{field: 'id'}, {field: 'title'}],
-      tags: [],
       sorts: [],
     });
     const query = eventView.generateQueryStringObject();
@@ -633,7 +578,6 @@ describe('EventView.generateQueryStringObject()', function() {
   it('returns a copy of data preventing mutation', function() {
     const eventView = new EventView({
       fields: [{field: 'id'}, {field: 'title'}],
-      tags: [],
       sorts: [],
     });
     const query = eventView.generateQueryStringObject();
@@ -654,7 +598,6 @@ describe('EventView.getEventsAPIPayload()', function() {
       name: 'amazing query',
       fields: generateFields(['id']),
       sorts: generateSorts(['id']),
-      tags: ['project'],
       query: 'event.type:csp',
       project: [567],
       environment: ['prod'],
@@ -676,7 +619,6 @@ describe('EventView.getEventsAPIPayload()', function() {
     const eventView = new EventView({
       fields: generateFields(['id']),
       sorts: [],
-      tags: [],
       query: 'event.type:csp',
     });
 
@@ -692,7 +634,6 @@ describe('EventView.getEventsAPIPayload()', function() {
     const eventView = new EventView({
       fields: generateFields(['count()', 'title']),
       sorts: generateSorts(['title', 'count']),
-      tags: [],
       query: 'event.type:csp',
     });
 
@@ -707,7 +648,6 @@ describe('EventView.getEventsAPIPayload()', function() {
     const eventView = new EventView({
       fields: generateFields(['title', 'count()']),
       sorts: generateSorts(['project', 'count']),
-      tags: [],
       query: 'event.type:csp',
     });
 
@@ -722,7 +662,6 @@ describe('EventView.getEventsAPIPayload()', function() {
     const eventView = new EventView({
       fields: generateFields(['title', 'count()']),
       sorts: generateSorts(['project', 'count']),
-      tags: [],
       query: 'event.type:csp',
     });
 
@@ -760,7 +699,6 @@ describe('EventView.getEventsAPIPayload()', function() {
     const eventView = new EventView({
       fields: generateFields(['title', 'count()']),
       sorts: generateSorts(['project', 'count']),
-      tags: [],
       query: 'event.type:csp',
       project: [1234],
       environment: ['staging'],
@@ -818,7 +756,6 @@ describe('EventView.getEventsAPIPayload()', function() {
     const eventView = new EventView({
       fields: generateFields(['title', 'count()']),
       sorts: generateSorts(['project', 'count']),
-      tags: [],
       query: 'event.type:csp',
       project: [1234],
       environment: ['staging'],
@@ -873,7 +810,6 @@ describe('EventView.getEventsAPIPayload()', function() {
     const eventView = new EventView({
       fields: generateFields(['title', 'count()']),
       sorts: generateSorts(['count']),
-      tags: [],
       query: 'event.type:csp',
       start: '2019-10-01T00:00:00',
       end: '2019-10-02T00:00:00',
@@ -898,12 +834,11 @@ describe('EventView.getEventsAPIPayload()', function() {
   });
 });
 
-describe('EventView.getTagsAPIPayload()', function() {
+describe('EventView.getFacetsAPIPayload()', function() {
   it('only includes relevant query strings', function() {
     const eventView = new EventView({
       fields: generateFields(['title', 'count()']),
       sorts: generateSorts(['project', 'count']),
-      tags: [],
       query: 'event.type:csp',
     });
 
@@ -923,14 +858,12 @@ describe('EventView.getTagsAPIPayload()', function() {
       },
     };
 
-    expect(eventView.getTagsAPIPayload(location)).toEqual({
+    expect(eventView.getFacetsAPIPayload(location)).toEqual({
       project: [],
       environment: [],
       utc: 'true',
       statsPeriod: '14d',
 
-      field: ['title', 'count()'],
-      per_page: 50,
       query: 'event.type:csp',
     });
   });
@@ -942,7 +875,6 @@ describe('EventView.toNewQuery()', function() {
     name: 'best query',
     fields: [{field: 'count()', width: 123}, {field: 'project.id', width: 456}],
     sorts: generateSorts(['count']),
-    tags: ['foo', 'bar'],
     query: 'event.type:error',
     project: [42],
     start: '2019-10-01T00:00:00',
@@ -969,7 +901,6 @@ describe('EventView.toNewQuery()', function() {
       end: '2019-10-02T00:00:00',
       range: '14d',
       environment: ['staging'],
-      tags: ['foo', 'bar'],
     };
 
     expect(output).toEqual(expected);
@@ -998,7 +929,6 @@ describe('EventView.toNewQuery()', function() {
       end: '2019-10-02T00:00:00',
       range: '14d',
       environment: ['staging'],
-      tags: ['foo', 'bar'],
     };
 
     expect(output).toEqual(expected);
@@ -1027,7 +957,6 @@ describe('EventView.toNewQuery()', function() {
       end: '2019-10-02T00:00:00',
       range: '14d',
       environment: ['staging'],
-      tags: ['foo', 'bar'],
     };
 
     expect(output).toEqual(expected);
@@ -1039,7 +968,6 @@ describe('EventView.isValid()', function() {
     const eventView = new EventView({
       fields: [{field: 'count()'}, {field: 'project.id'}],
       sorts: [],
-      tags: [],
       project: [],
     });
 
@@ -1050,7 +978,6 @@ describe('EventView.isValid()', function() {
     const eventView = new EventView({
       fields: [],
       sorts: [],
-      tags: [],
       project: [],
     });
 
@@ -1063,7 +990,6 @@ describe('EventView.getFields()', function() {
     const eventView = new EventView({
       fields: [{field: 'count()'}, {field: 'project.id'}],
       sorts: [],
-      tags: [],
       project: [],
     });
 
@@ -1076,7 +1002,6 @@ describe('EventView.hasAutolinkField()', function() {
     const eventView = new EventView({
       fields: [{field: 'count()'}, {field: 'project.id'}],
       sorts: [],
-      tags: [],
       project: [],
     });
 
@@ -1088,7 +1013,6 @@ describe('EventView.hasAutolinkField()', function() {
       const eventView = new EventView({
         fields: generateFields([field]),
         sorts: [],
-        tags: [],
         project: [],
       });
 
@@ -1104,7 +1028,6 @@ describe('EventView.numOfColumns()', function() {
     const eventView = new EventView({
       fields: [{field: 'count()'}, {field: 'project.id'}],
       sorts: [],
-      tags: [],
       project: [],
     });
 
@@ -1115,7 +1038,6 @@ describe('EventView.numOfColumns()', function() {
     const eventView2 = new EventView({
       fields: [],
       sorts: [],
-      tags: [],
       project: [],
     });
 
@@ -1130,7 +1052,6 @@ describe('EventView.clone()', function() {
       name: 'best query',
       fields: [{field: 'count()'}, {field: 'project.id'}],
       sorts: generateSorts(['count']),
-      tags: ['foo', 'bar'],
       query: 'event.type:error',
       project: [42],
       start: '2019-10-01T00:00:00',
@@ -1157,7 +1078,6 @@ describe('EventView.withNewColumn()', function() {
     name: 'best query',
     fields: [{field: 'count()'}, {field: 'project.id'}],
     sorts: generateSorts(['count']),
-    tags: ['foo', 'bar'],
     query: 'event.type:error',
     project: [42],
     start: '2019-10-01T00:00:00',
@@ -1239,7 +1159,6 @@ describe('EventView.withUpdatedColumn()', function() {
     name: 'best query',
     fields: [{field: 'count()'}, {field: 'project.id'}],
     sorts: generateSorts(['count']),
-    tags: ['foo', 'bar'],
     query: 'event.type:error',
     project: [42],
     start: '2019-10-01T00:00:00',
@@ -1478,7 +1397,6 @@ describe('EventView.withDeletedColumn()', function() {
     name: 'best query',
     fields: [{field: 'count()'}, {field: 'project.id'}],
     sorts: generateSorts(['count']),
-    tags: ['foo', 'bar'],
     query: 'event.type:error',
     project: [42],
     start: '2019-10-01T00:00:00',
@@ -1603,7 +1521,6 @@ describe('EventView.withMovedColumn()', function() {
     name: 'best query',
     fields: [{field: 'count()'}, {field: 'project.id'}],
     sorts: generateSorts(['count']),
-    tags: ['foo', 'bar'],
     query: 'event.type:error',
     project: [42],
     start: '2019-10-01T00:00:00',
@@ -1643,7 +1560,6 @@ describe('EventView.getSorts()', function() {
     const eventView = new EventView({
       fields: [{field: 'count()'}, {field: 'project.id'}],
       sorts: generateSorts(['count']),
-      tags: [],
       project: [],
     });
 
@@ -1661,7 +1577,6 @@ describe('EventView.getQuery()', function() {
     const eventView = new EventView({
       fields: [],
       sorts: [],
-      tags: [],
       project: [],
       query: 'event.type:error',
     });
@@ -1678,7 +1593,6 @@ describe('EventView.getQuery()', function() {
     const eventView = new EventView({
       fields: [],
       sorts: [],
-      tags: [],
       project: [],
     });
 
@@ -1697,7 +1611,6 @@ describe('EventView.isFieldSorted()', function() {
     name: 'best query',
     fields: [{field: 'count()'}, {field: 'project.id'}],
     sorts: generateSorts(['count']),
-    tags: ['foo', 'bar'],
     query: 'event.type:error',
     project: [42],
     start: '2019-10-01T00:00:00',
@@ -1742,7 +1655,6 @@ describe('EventView.sortOnField()', function() {
     name: 'best query',
     fields: [{field: 'count()'}, {field: 'project.id'}],
     sorts: generateSorts(['count']),
-    tags: ['foo', 'bar'],
     query: 'event.type:error',
     project: [42],
     start: '2019-10-01T00:00:00',
@@ -1813,7 +1725,6 @@ describe('EventView.isEqualTo()', function() {
       name: 'best query',
       fields: [{field: 'count()'}, {field: 'project.id'}],
       sorts: generateSorts(['count']),
-      tags: ['foo', 'bar'],
       query: 'event.type:error',
       project: [42],
       start: '2019-10-01T00:00:00',
@@ -1842,7 +1753,6 @@ describe('EventView.isEqualTo()', function() {
       name: 'best query',
       fields: [{field: 'count()'}, {field: 'project.id'}],
       sorts: generateSorts(['count']),
-      tags: ['foo', 'bar'],
       query: 'event.type:error',
       project: [42],
       start: '2019-10-20T21:02:51+0000',
@@ -1866,7 +1776,6 @@ describe('EventView.isEqualTo()', function() {
       name: 'best query',
       fields: [{field: 'count()'}, {field: 'project.id'}],
       sorts: generateSorts(['count']),
-      tags: ['foo', 'bar'],
       query: 'event.type:error',
       project: [42],
       start: '2019-10-01T00:00:00',
@@ -1913,16 +1822,7 @@ describe('EventView.isEqualTo()', function() {
     });
     expect(eventView.isEqualTo(eventView2)).toBe(false);
 
-    // tags differs
-
-    eventView2 = new EventView({
-      ...state,
-      tags: ['foo', 'baz'],
-    });
-    expect(eventView.isEqualTo(eventView2)).toBe(false);
-
     // query differs
-
     eventView2 = new EventView({
       ...state,
       query: 'event.type:transaction',
@@ -1930,7 +1830,6 @@ describe('EventView.isEqualTo()', function() {
     expect(eventView.isEqualTo(eventView2)).toBe(false);
 
     // project differs
-
     eventView2 = new EventView({
       ...state,
       project: [24],
@@ -1938,7 +1837,6 @@ describe('EventView.isEqualTo()', function() {
     expect(eventView.isEqualTo(eventView2)).toBe(false);
 
     // date time differs
-
     eventView2 = new EventView({
       ...state,
       start: '2019-09-01T00:00:00',
@@ -1958,7 +1856,6 @@ describe('EventView.isEqualTo()', function() {
     expect(eventView.isEqualTo(eventView2)).toBe(false);
 
     // environment differs
-
     eventView2 = new EventView({
       ...state,
       environment: [],
@@ -1978,7 +1875,6 @@ describe('isAPIPayloadSimilar', function() {
     name: 'best query',
     fields: [{field: 'count()'}, {field: 'project.id'}],
     sorts: generateSorts(['count']),
-    tags: ['foo', 'bar'],
     query: 'event.type:error',
     project: [42],
     start: '2019-10-01T00:00:00',
@@ -2170,44 +2066,25 @@ describe('isAPIPayloadSimilar', function() {
     });
   });
 
-  describe('getTagsAPIPayload', function() {
-    it('is similar on sort key sorted in opposite directions', function() {
+  describe('getFacetsAPIPayload', function() {
+    it('only includes relevant parameters', function() {
       const thisEventView = new EventView(state);
       const location = {};
-      const thisAPIPayload = thisEventView.getTagsAPIPayload(location);
-
-      const otherEventView = thisEventView.sortOnField({field: 'count()'}, meta);
-      const otherLocation = {};
-      const otherAPIPayload = otherEventView.getTagsAPIPayload(otherLocation);
-
-      const results = isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload);
-
-      expect(results).toBe(true);
-    });
-
-    it('is not similar when a new column is added', function() {
-      const thisEventView = new EventView(state);
-      const location = {};
-      const thisAPIPayload = thisEventView.getTagsAPIPayload(location);
-
-      const newColumn = {
-        aggregation: '',
-        field: 'title',
+      const results = thisEventView.getFacetsAPIPayload(location);
+      const expected = {
+        query: state.query,
+        project: ['42'],
+        statsPeriod: state.statsPeriod,
+        environment: state.environment,
       };
 
-      const otherEventView = thisEventView.withNewColumn(newColumn);
-      const otherLocation = {};
-      const otherAPIPayload = otherEventView.getTagsAPIPayload(otherLocation);
-
-      const results = isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload);
-
-      expect(results).toBe(false);
+      expect(results).toEqual(expected);
     });
 
-    it('is similar when a column is updated with no changes', function() {
+    it('is similar on sort key sorted in opposite directions', function() {
       const thisEventView = new EventView(state);
       const location = {};
-      const thisAPIPayload = thisEventView.getTagsAPIPayload(location);
+      const thisAPIPayload = thisEventView.getFacetsAPIPayload(location);
 
       const newColumn = {
         aggregation: 'count',
@@ -2216,95 +2093,27 @@ describe('isAPIPayloadSimilar', function() {
 
       const otherEventView = thisEventView.withUpdatedColumn(0, newColumn, meta);
       const otherLocation = {};
-      const otherAPIPayload = otherEventView.getTagsAPIPayload(otherLocation);
+      const otherAPIPayload = otherEventView.getFacetsAPIPayload(otherLocation);
 
       const results = isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload);
-
       expect(results).toBe(true);
     });
 
-    it('is not similar when a column is updated with a replaced field', function() {
+    it('is similar when a columns are different', function() {
       const thisEventView = new EventView(state);
       const location = {};
-      const thisAPIPayload = thisEventView.getTagsAPIPayload(location);
+      const thisAPIPayload = thisEventView.getFacetsAPIPayload(location);
 
       const newColumn = {
         aggregation: '',
         field: 'title',
       };
 
-      const otherEventView = thisEventView.withUpdatedColumn(0, newColumn, meta);
-      const otherLocation = {};
-      const otherAPIPayload = otherEventView.getTagsAPIPayload(otherLocation);
-
-      const results = isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload);
-
-      expect(results).toBe(false);
-    });
-
-    it('is not similar when a column is updated with a replaced aggregation', function() {
-      const thisEventView = new EventView(state);
-      const location = {};
-      const thisAPIPayload = thisEventView.getTagsAPIPayload(location);
-
-      const newColumn = {
-        aggregation: 'avg',
-        field: '',
-      };
-
-      const otherEventView = thisEventView.withUpdatedColumn(0, newColumn, meta);
-      const otherLocation = {};
-      const otherAPIPayload = otherEventView.getTagsAPIPayload(otherLocation);
-
-      const results = isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload);
-
-      expect(results).toBe(false);
-    });
-
-    it('is similar when a column is renamed', function() {
-      const thisEventView = new EventView(state);
-      const location = {};
-      const thisAPIPayload = thisEventView.getTagsAPIPayload(location);
-
-      const newColumn = {
-        aggregation: 'count',
-        field: '',
-      };
-
-      const otherEventView = thisEventView.withUpdatedColumn(0, newColumn, meta);
-      const otherLocation = {};
-      const otherAPIPayload = otherEventView.getTagsAPIPayload(otherLocation);
-
-      const results = isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload);
-
-      expect(results).toBe(true);
-    });
-
-    it('is not similar when a column is deleted', function() {
-      const thisEventView = new EventView(state);
-      const location = {};
-      const thisAPIPayload = thisEventView.getTagsAPIPayload(location);
-
-      const otherEventView = thisEventView.withDeletedColumn(0, meta);
-      const otherLocation = {};
-      const otherAPIPayload = otherEventView.getTagsAPIPayload(otherLocation);
-
-      const results = isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload);
-
-      expect(results).toBe(false);
-    });
-
-    it('is similar when a column is moved', function() {
-      const thisEventView = new EventView(state);
-      const location = {};
-      const thisAPIPayload = thisEventView.getTagsAPIPayload(location);
-
-      const otherEventView = thisEventView.withMovedColumn({fromIndex: 0, toIndex: 1});
+      const otherEventView = thisEventView.withNewColumn(newColumn);
       const otherLocation = {};
-      const otherAPIPayload = otherEventView.getTagsAPIPayload(otherLocation);
+      const otherAPIPayload = otherEventView.getFacetsAPIPayload(otherLocation);
 
       const results = isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload);
-
       expect(results).toBe(true);
     });
   });
@@ -2346,7 +2155,6 @@ describe('isAPIPayloadSimilar', function() {
         name: undefined,
         fields: undefined,
         sorts: undefined,
-        tags: undefined,
         query: undefined,
         project: undefined,
         start: undefined,
diff --git a/tests/js/spec/views/eventsV2/tags.spec.jsx b/tests/js/spec/views/eventsV2/tags.spec.jsx
index 608c833236..a3ad29e973 100644
--- a/tests/js/spec/views/eventsV2/tags.spec.jsx
+++ b/tests/js/spec/views/eventsV2/tags.spec.jsx
@@ -9,42 +9,19 @@ import {initializeOrg} from 'sentry-test/initializeOrg';
 describe('Tags', function() {
   const org = TestStubs.Organization();
   beforeEach(function() {
-    Client.addMockResponse(
-      {
-        url: `/organizations/${org.slug}/events-distribution/`,
-        body: {
+    Client.addMockResponse({
+      url: `/organizations/${org.slug}/events-facets/`,
+      body: [
+        {
           key: 'release',
-          name: 'Release',
-          totalValues: 2,
           topValues: [{count: 2, value: 'abcd123', name: 'abcd123'}],
         },
-      },
-      {
-        predicate: (_, options) => {
-          return options.query.key === 'release';
-        },
-      }
-    );
-
-    Client.addMockResponse(
-      {
-        url: `/organizations/${org.slug}/events-distribution/`,
-        body: {
+        {
           key: 'environment',
-          name: 'Environment',
-          totalValues: 2,
           topValues: [{count: 2, value: 'abcd123', name: 'abcd123'}],
         },
-      },
-      {
-        predicate: (_, options) => {
-          return (
-            options.query.key === 'environment' &&
-            options.query.query === 'event.type:csp'
-          );
-        },
-      }
-    );
+      ],
+    });
 
     Client.addMockResponse({
       url: `/organizations/${org.slug}/events-meta/`,
@@ -64,7 +41,6 @@ describe('Tags', function() {
     const view = new EventView({
       fields: [],
       sorts: [],
-      tags: ['release', 'environment'],
       query: 'event.type:csp',
     });
 
@@ -79,7 +55,7 @@ describe('Tags', function() {
     );
 
     // component is in loading state
-    expect(wrapper.find('StyledPlaceholder')).toHaveLength(2);
+    expect(wrapper.find('StyledPlaceholder').length).toBeTruthy();
 
     await tick();
     wrapper.update();
@@ -94,7 +70,6 @@ describe('Tags', function() {
     const view = new EventView({
       fields: [],
       sorts: [],
-      tags: ['release', 'environment'],
       query: 'event.type:csp',
     });
 
@@ -117,7 +92,7 @@ describe('Tags', function() {
     );
 
     // component is in loading state
-    expect(wrapper.find('StyledPlaceholder')).toHaveLength(2);
+    expect(wrapper.find('StyledPlaceholder').length).toBeTruthy();
 
     await tick();
     wrapper.update();
diff --git a/tests/js/spec/views/eventsV2/utils.spec.jsx b/tests/js/spec/views/eventsV2/utils.spec.jsx
index 6a865d6bc5..fef23a7e45 100644
--- a/tests/js/spec/views/eventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/eventsV2/utils.spec.jsx
@@ -315,7 +315,6 @@ describe('pushEventViewToLocation', function() {
     name: 'best query',
     fields: [{field: 'count()'}, {field: 'project.id'}],
     sorts: [{field: 'count', kind: 'desc'}],
-    tags: ['foo', 'bar'],
     query: 'event.type:error',
     project: [42],
     start: '2019-10-01T00:00:00',
@@ -345,7 +344,6 @@ describe('pushEventViewToLocation', function() {
         field: ['count()', 'project.id'],
         widths: [COL_WIDTH_UNDEFINED, COL_WIDTH_UNDEFINED],
         sort: ['-count'],
-        tag: ['foo', 'bar'],
         query: 'event.type:error',
         project: [42],
         start: '2019-10-01T00:00:00',
@@ -374,7 +372,6 @@ describe('pushEventViewToLocation', function() {
         field: ['count()', 'project.id'],
         widths: [COL_WIDTH_UNDEFINED, COL_WIDTH_UNDEFINED],
         sort: ['-count'],
-        tag: ['foo', 'bar'],
         query: 'event.type:error',
         project: [42],
         start: '2019-10-01T00:00:00',
diff --git a/tests/snuba/api/endpoints/test_discover_saved_queries.py b/tests/snuba/api/endpoints/test_discover_saved_queries.py
index 9eb978a49b..7cbe243c38 100644
--- a/tests/snuba/api/endpoints/test_discover_saved_queries.py
+++ b/tests/snuba/api/endpoints/test_discover_saved_queries.py
@@ -266,7 +266,6 @@ class DiscoverSavedQueriesVersion2Test(DiscoverSavedQueryBase):
                     "environment": ["dev"],
                     "query": "event.type:error browser.name:Firefox",
                     "range": "24h",
-                    "tags": ["release", "environment"],
                     "yAxis": "count(id)",
                     "version": 2,
                 },
@@ -277,7 +276,6 @@ class DiscoverSavedQueriesVersion2Test(DiscoverSavedQueryBase):
         assert data["range"] == "24h"
         assert data["environment"] == ["dev"]
         assert data["query"] == "event.type:error browser.name:Firefox"
-        assert data["tags"] == ["release", "environment"]
         assert data["yAxis"] == "count(id)"
         assert data["version"] == 2
 
