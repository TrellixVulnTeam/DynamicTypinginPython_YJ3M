commit a7b43bbdf2ef61cdd7ec30448a772cd609022e58
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Sep 6 14:01:08 2018 -0700

    feat(health): Add Browsers view (#9625)
    
    This adds a Browsers view to health.

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 319f5f13e0..31c662ded6 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -762,6 +762,13 @@ function routes() {
                 import(/*webpackChunkName: HealthTransactions*/ './views/organizationHealth/transactions')}
               component={errorHandler(LazyLoad)}
             />
+
+            <Route
+              path="browsers"
+              componentPromise={() =>
+                import(/*webpackChunkName: HealthErrors*/ './views/organizationHealth/browsers')}
+              component={errorHandler(LazyLoad)}
+            />
           </Route>
 
           <Route
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/browsers.jsx b/src/sentry/static/sentry/app/views/organizationHealth/browsers.jsx
new file mode 100644
index 0000000000..a88b5c3673
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationHealth/browsers.jsx
@@ -0,0 +1,98 @@
+import {Flex} from 'grid-emotion';
+import React from 'react';
+
+import {t} from 'app/locale';
+import PieChart from 'app/components/charts/pieChart';
+
+import EventsTableChart from './eventsTableChart';
+import Header from './styles/header';
+import HealthPanelChart from './styles/healthPanelChart';
+import HealthRequest from './util/healthRequest';
+import withHealth from './util/withHealth';
+
+class OrganizationHealthBrowsers extends React.Component {
+  render() {
+    let {className} = this.props;
+
+    return (
+      <div className={className}>
+        <Header>{t('Browsers')}</Header>
+
+        <Flex>
+          <HealthRequest
+            tag="browser.name"
+            showLoading
+            includeTimeseries={false}
+            includeTop
+            limit={5}
+          >
+            {({tagData}) => {
+              return (
+                <HealthPanelChart
+                  height={200}
+                  series={[
+                    {
+                      seriesName: t('Browsers'),
+                      data: tagData.map(([name, value]) => ({name, value})),
+                    },
+                  ]}
+                  title={t('Browsers')}
+                >
+                  {({series}) => <PieChart height={300} series={series} selectOnRender />}
+                </HealthPanelChart>
+              );
+            }}
+          </HealthRequest>
+
+          <HealthRequest
+            tag="os.name"
+            showLoading
+            includeTimeseries={false}
+            includeTop
+            limit={5}
+          >
+            {({tagData}) => {
+              return (
+                <HealthPanelChart
+                  height={200}
+                  series={[
+                    {
+                      seriesName: t('OS'),
+                      data: tagData.map(([name, value]) => ({name, value})),
+                    },
+                  ]}
+                  title={t('OS')}
+                >
+                  {({series}) => <PieChart height={300} series={series} selectOnRender />}
+                </HealthPanelChart>
+              );
+            }}
+          </HealthRequest>
+        </Flex>
+
+        <Flex>
+          <HealthRequest
+            tag="browser.name"
+            showLoading
+            includeTimeseries={false}
+            includeTop
+            includePercentages
+            limit={5}
+          >
+            {({tagDataWithPercentages}) => {
+              return (
+                <EventsTableChart
+                  headers={[t('Browser'), t('Events'), t('Percentage'), t('Last event')]}
+                  data={tagDataWithPercentages}
+                />
+              );
+            }}
+          </HealthRequest>
+        </Flex>
+      </div>
+    );
+  }
+}
+
+export default withHealth(OrganizationHealthBrowsers);
+export {OrganizationHealthBrowsers};
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/healthNavigationMenu.jsx b/src/sentry/static/sentry/app/views/organizationHealth/healthNavigationMenu.jsx
index df6c6696da..6c7715a432 100644
--- a/src/sentry/static/sentry/app/views/organizationHealth/healthNavigationMenu.jsx
+++ b/src/sentry/static/sentry/app/views/organizationHealth/healthNavigationMenu.jsx
@@ -27,6 +27,12 @@ const HealthNavigationMenu = styled(
                 {t('Transaction')}
               </NavItem>
             </NavigationGroup>
+
+            <NavigationGroup title={t('Users')}>
+              <NavItem to={`/organizations/${organization.slug}/health/browsers/`}>
+                {t('Browsers')}
+              </NavItem>
+            </NavigationGroup>
           </div>
         );
       }
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/styles/header.jsx b/src/sentry/static/sentry/app/views/organizationHealth/styles/header.jsx
new file mode 100644
index 0000000000..900f9f02bd
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationHealth/styles/header.jsx
@@ -0,0 +1,11 @@
+import styled from 'react-emotion';
+import {Flex} from 'grid-emotion';
+
+import space from 'app/styles/space';
+
+const Header = styled(Flex)`
+  font-size: ${p => p.theme.fontSizeExtraLarge};
+  margin-bottom: ${space(2)};
+`;
+
+export default Header;
diff --git a/tests/js/setup.js b/tests/js/setup.js
index fa3161e654..968bf67747 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -46,6 +46,20 @@ jest.mock('react-lazyload', () => {
   return LazyLoadMock;
 });
 
+jest.mock('echarts-for-react/lib/core', () => {
+  // We need to do this because `jest.mock` gets hoisted by babel and `React` is not
+  // guaranteed to be in scope
+  const ReactActual = require('react');
+
+  // We need a class component here because `BaseChart` passes `ref` which will
+  // error if we return a stateless/functional component
+  return class extends ReactActual.Component {
+    render() {
+      return null;
+    }
+  };
+});
+
 jest.mock('app/utils/sdk', () => ({
   captureMessage: jest.fn(),
   captureException: jest.fn(),
diff --git a/tests/js/spec/views/organizationHealth/browsers.spec.jsx b/tests/js/spec/views/organizationHealth/browsers.spec.jsx
new file mode 100644
index 0000000000..a0658011d0
--- /dev/null
+++ b/tests/js/spec/views/organizationHealth/browsers.spec.jsx
@@ -0,0 +1,31 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import OrganizationHealthBrowsers from 'app/views/organizationHealth/browsers';
+
+jest.mock('app/utils/withLatestContext');
+
+describe('OrganizationHealthBrowsers', function() {
+  const org = TestStubs.Organization();
+  MockApiClient.addMockResponse({
+    url: '/organizations/org-slug/health/top/',
+    body: (url, opts) => {
+      return TestStubs.HealthTop(opts.query.tag);
+    },
+  });
+
+  MockApiClient.addMockResponse({
+    url: '/organizations/org-slug/health/graph/',
+    body: (url, opts) => {
+      return TestStubs.HealthGraph(opts.query.tag);
+    },
+  });
+
+  it('renders with PieChart, and EventTableChart', async function() {
+    let wrapper = mount(<OrganizationHealthBrowsers organization={org} />);
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('PieChart')).toHaveLength(2);
+    expect(wrapper.find('EventsTableChart')).toHaveLength(1);
+  });
+});
diff --git a/tests/js/spec/views/organizationHealth/transactions.spec.jsx b/tests/js/spec/views/organizationHealth/transactions.spec.jsx
index c93a8cd073..b3797640b2 100644
--- a/tests/js/spec/views/organizationHealth/transactions.spec.jsx
+++ b/tests/js/spec/views/organizationHealth/transactions.spec.jsx
@@ -4,7 +4,6 @@ import {mount} from 'enzyme';
 import OrganizationHealthTransactions from 'app/views/organizationHealth/transactions';
 
 jest.mock('app/utils/withLatestContext');
-jest.mock('echarts-for-react/lib/core', () => jest.fn(() => null));
 
 describe('OrganizationHealthTransactions', function() {
   const org = TestStubs.Organization();
