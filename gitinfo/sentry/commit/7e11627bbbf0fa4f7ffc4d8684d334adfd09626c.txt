commit 7e11627bbbf0fa4f7ffc4d8684d334adfd09626c
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Fri Feb 28 15:51:40 2020 -0800

    feat(onboarding): Add alert rule configuration onboarding (#17357)

diff --git a/src/sentry/api/endpoints/organization_onboarding_tasks.py b/src/sentry/api/endpoints/organization_onboarding_tasks.py
index e9d4c5ce4e..064c89f025 100644
--- a/src/sentry/api/endpoints/organization_onboarding_tasks.py
+++ b/src/sentry/api/endpoints/organization_onboarding_tasks.py
@@ -30,8 +30,10 @@ class OrganizationOnboardingTaskEndpoint(OrganizationEndpoint):
             organization=organization,
             user=request.user,
             task=task_id,
-            values={"status": OnboardingTaskStatus.SKIPPED, "date_completed": timezone.now()},
+            values={"status": status, "date_completed": timezone.now()},
         )
+
         if rows_affected or created:
             try_mark_onboarding_complete(organization.id)
+
         return Response(status=204)
diff --git a/src/sentry/receivers/onboarding.py b/src/sentry/receivers/onboarding.py
index 5e676d2632..d7bd9eefa8 100644
--- a/src/sentry/receivers/onboarding.py
+++ b/src/sentry/receivers/onboarding.py
@@ -26,6 +26,7 @@ from sentry.signals import (
     member_joined,
     plugin_enabled,
     project_created,
+    alert_rule_created,
 )
 from sentry.utils.javascript import has_sourcemap
 
@@ -308,6 +309,23 @@ def record_plugin_enabled(plugin, project, user, **kwargs):
     )
 
 
+@alert_rule_created.connect(weak=False)
+def record_alert_rule_created(user, project, rule, **kwargs):
+    rows_affected, created = OrganizationOnboardingTask.objects.create_or_update(
+        organization_id=project.organization_id,
+        task=OnboardingTask.ALERT_RULE,
+        values={
+            "status": OnboardingTaskStatus.COMPLETE,
+            "user": user,
+            "project_id": project.id,
+            "date_completed": timezone.now(),
+        },
+    )
+
+    if rows_affected or created:
+        try_mark_onboarding_complete(project.organization_id)
+
+
 @issue_tracker_used.connect(weak=False)
 def record_issue_tracker_used(plugin, project, user, **kwargs):
     rows_affected, created = OrganizationOnboardingTask.objects.create_or_update(
diff --git a/src/sentry/static/sentry/app/actionCreators/onboardingTasks.tsx b/src/sentry/static/sentry/app/actionCreators/onboardingTasks.tsx
new file mode 100644
index 0000000000..8c7969b2c2
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/onboardingTasks.tsx
@@ -0,0 +1,34 @@
+import {Client} from 'app/api';
+import {Organization, OnboardingTask} from 'app/types';
+import OrganizationActions from 'app/actions/organizationActions';
+
+/**
+ * Update an onboarding task.
+ *
+ * If no API client is provided the task will not be updated on the server side
+ * and will only update in the organization store.
+ */
+export async function updateOnboardingTask(
+  api: Client | null,
+  organization: Organization,
+  updatedTask: Pick<OnboardingTask, 'task' | 'status' | 'data'>
+) {
+  if (api !== null) {
+    await api.requestPromise(`/organizations/${organization.slug}/onboarding-tasks/`, {
+      method: 'POST',
+      data: updatedTask,
+    });
+  }
+
+  const hasSkippedTask = organization.onboardingTasks.find(
+    task => task.task === updatedTask.task
+  );
+
+  const onboardingTasks = hasSkippedTask
+    ? organization.onboardingTasks.map(task =>
+        task.task === updatedTask.task ? {...task, ...updatedTask} : task
+      )
+    : [...organization.onboardingTasks, updatedTask];
+
+  OrganizationActions.update({onboardingTasks});
+}
diff --git a/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.tsx b/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.tsx
index 8dd6c66362..83f49b29e0 100644
--- a/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.tsx
+++ b/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.tsx
@@ -72,7 +72,7 @@ class TodoItem extends React.Component<Props, State> {
     }
 
     if (task.actionType === 'app') {
-      navigateTo(task.location, router);
+      navigateTo(`${task.location}?onboardingTask`, router);
     }
   };
 
diff --git a/src/sentry/static/sentry/app/components/onboardingWizard/todoList.tsx b/src/sentry/static/sentry/app/components/onboardingWizard/todoList.tsx
index 2caf60a18a..3734f7a437 100644
--- a/src/sentry/static/sentry/app/components/onboardingWizard/todoList.tsx
+++ b/src/sentry/static/sentry/app/components/onboardingWizard/todoList.tsx
@@ -7,67 +7,46 @@ import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
 import {Client} from 'app/api';
 import {Organization, OnboardingTask, OnboardingTaskKey} from 'app/types';
+import {updateOnboardingTask} from 'app/actionCreators/onboardingTasks';
 
 type Props = {
   api: Client;
   organization: Organization;
 };
 
-type State = {
-  tasks: OnboardingTask[];
-  seeAll: boolean;
-};
-
-class TodoList extends React.Component<Props, State> {
-  state: State = {
-    tasks: [],
-    seeAll: false, // Show all tasks, included those completed
-  };
-
-  componentDidMount() {
-    const {organization} = this.props;
-    const taskDescriptors = getOnboardingTasks(organization);
-    const serverTasks = organization.onboardingTasks;
-
-    // Map server task state (i.e. completed status) with tasks objects
-    const tasks = taskDescriptors.map(
-      desc =>
-        ({
-          ...desc,
-          ...serverTasks.find(serverTask => serverTask.task === desc.task),
-        } as OnboardingTask)
-    );
-
-    // eslint-disable-next-line react/no-did-mount-set-state
-    this.setState({tasks});
-  }
-
-  skipTask = async (skippedTask: OnboardingTaskKey) => {
-    const {organization, api} = this.props;
-
-    await api.requestPromise(`/organizations/${organization.slug}/onboarding-tasks/`, {
-      method: 'POST',
-      data: {task: skippedTask, status: 'skipped'},
-    });
-
-    this.setState({
-      tasks: this.state.tasks.map(task =>
-        task.task === skippedTask ? {...task, status: 'skipped'} : task
-      ),
-    });
-  };
-
-  render() {
-    const allDisplayedTasks = this.state.tasks.filter(task => task.display);
-
-    const todoListTasks = allDisplayedTasks.map(task => (
-      <TodoItem key={task.task} task={task} onSkip={this.skipTask} />
-    ));
-
-    return <StyledTodoList>{todoListTasks}</StyledTodoList>;
-  }
+function getMergedTasks(organization: Organization) {
+  const taskDescriptors = getOnboardingTasks(organization);
+  const serverTasks = organization.onboardingTasks;
+
+  // Map server task state (i.e. completed status) with tasks objects
+  return taskDescriptors.map(
+    desc =>
+      ({
+        ...desc,
+        ...serverTasks.find(serverTask => serverTask.task === desc.task),
+      } as OnboardingTask)
+  );
 }
 
+const TodoList = ({api, organization}: Props) => (
+  <StyledTodoList>
+    {getMergedTasks(organization)
+      .filter(task => task.display)
+      .map(task => (
+        <TodoItem
+          key={task.task}
+          task={task}
+          onSkip={(skippedTask: OnboardingTaskKey) =>
+            updateOnboardingTask(api, organization, {
+              task: skippedTask,
+              status: 'skipped',
+            })
+          }
+        />
+      ))}
+  </StyledTodoList>
+);
+
 const StyledTodoList = styled('ul')`
   padding-left: 0;
   list-style: none;
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 2b83bbbff3..49598a5782 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -924,9 +924,9 @@ export type OnboardingTaskDescriptor = {
 export type OnboardingTaskStatus = {
   task: OnboardingTaskKey;
   status: 'skipped' | 'pending' | 'complete';
-  user: string | null;
-  dateCompleted: string;
-  data: object;
+  user?: string | null;
+  dateCompleted?: string;
+  data?: object;
 };
 
 export type OnboardingTask = OnboardingTaskStatus & OnboardingTaskDescriptor;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
index c3ff6cb078..1fa05ab306 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
@@ -5,7 +5,7 @@ import classNames from 'classnames';
 import styled from '@emotion/styled';
 
 import {ALL_ENVIRONMENTS_KEY} from 'app/constants';
-import {Environment, Organization, Project} from 'app/types';
+import {Environment, Organization, Project, OnboardingTaskKey} from 'app/types';
 import {
   IssueAlertRule,
   IssueAlertRuleActionTemplate,
@@ -35,6 +35,7 @@ import recreateRoute from 'app/utils/recreateRoute';
 import space from 'app/styles/space';
 import withOrganization from 'app/utils/withOrganization';
 import withProject from 'app/utils/withProject';
+import {updateOnboardingTask} from 'app/actionCreators/onboardingTasks';
 
 import RuleNodeList from './ruleNodeList';
 
@@ -139,16 +140,24 @@ class IssueRuleEditor extends AsyncView<Props, State> {
         data: rule,
       });
       this.setState({detailedError: null, rule: resp});
-
-      addSuccessMessage(isNew ? t('Created alert rule') : t('Updated alert rule'));
-      browserHistory.replace(recreateRoute('', {...this.props, stepBack: -2}));
     } catch (err) {
       this.setState({
         detailedError: err.responseJSON || {__all__: 'Unknown error'},
         loading: false,
       });
       addErrorMessage(t('An error occurred'));
+      return;
     }
+
+    // The onboarding task will be completed on the server side when the alert
+    // is created
+    updateOnboardingTask(null, organization, {
+      task: OnboardingTaskKey.ALERT_RULE,
+      status: 'complete',
+    });
+
+    addSuccessMessage(isNew ? t('Created alert rule') : t('Updated alert rule'));
+    browserHistory.replace(recreateRoute('', {...this.props, stepBack: -2}));
   };
 
   handleDeleteRule = async () => {
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/onboardingHovercard.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/onboardingHovercard.tsx
new file mode 100644
index 0000000000..eff7df5569
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/onboardingHovercard.tsx
@@ -0,0 +1,101 @@
+import React from 'react';
+import {Location} from 'history';
+import styled from '@emotion/styled';
+
+import Button from 'app/components/button';
+import Hovercard from 'app/components/hovercard';
+import {t} from 'app/locale';
+import space from 'app/styles/space';
+import withApi from 'app/utils/withApi';
+import {Client} from 'app/api';
+import {Organization, OnboardingTaskKey} from 'app/types';
+import {updateOnboardingTask} from 'app/actionCreators/onboardingTasks';
+
+type Props = {
+  api: Client;
+  organization: Organization;
+  location: Location;
+  children: React.ReactNode;
+};
+
+type State = {
+  dismissed: boolean;
+};
+
+class OnboardingHovercard extends React.Component<Props, State> {
+  state: State = {
+    dismissed: false,
+  };
+
+  get shouldShowHovercard() {
+    const {organization} = this.props;
+    const {dismissed} = this.state;
+
+    const hasCompletedTask = organization.onboardingTasks.find(
+      task => task.task === OnboardingTaskKey.ALERT_RULE && task.status === 'complete'
+    );
+
+    const query = this.props.location?.query || {};
+
+    return (
+      !hasCompletedTask &&
+      !dismissed &&
+      Object.prototype.hasOwnProperty.call(query, 'onboardingTask')
+    );
+  }
+
+  skipTask = () => {
+    const {api, organization} = this.props;
+
+    updateOnboardingTask(api, organization, {
+      task: OnboardingTaskKey.ALERT_RULE,
+      status: 'complete',
+      data: {accepted_defaults: true},
+    });
+
+    this.setState({dismissed: true});
+  };
+
+  render() {
+    const {children, organization, location, ...props} = this.props;
+
+    if (!this.shouldShowHovercard) {
+      return children;
+    }
+
+    const hovercardBody = (
+      <HovercardBody>
+        <h1>{t('Configure custom alerting')}</h1>
+
+        <p>
+          {t(
+            `Add custom alert rules to configure under what conditions
+             you receive notifications from Sentry.`
+          )}
+        </p>
+
+        <Button size="xsmall" onClick={this.skipTask}>
+          {t('The default rule looks good!')}
+        </Button>
+      </HovercardBody>
+    );
+
+    return (
+      <Hovercard show position="left" body={hovercardBody} {...props}>
+        {children}
+      </Hovercard>
+    );
+  }
+}
+
+const HovercardBody = styled('div')`
+  h1 {
+    font-size: ${p => p.theme.fontSizeLarge};
+    margin-bottom: ${space(1.5)};
+  }
+  p {
+    font-size: ${p => p.theme.fontSizeMedium};
+  }
+`;
+
+export default withApi(OnboardingHovercard);
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertHeaderNew.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertHeaderNew.tsx
index cde45b139b..08d9491e66 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertHeaderNew.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertHeaderNew.tsx
@@ -9,15 +9,16 @@ import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader
 import Tooltip from 'app/components/tooltip';
 import space from 'app/styles/space';
 import withOrganization from 'app/utils/withOrganization';
+import OnboardingHovercard from 'app/views/settings/projectAlerts/onboardingHovercard';
 
 type Props = {
   organization: Organization;
   canEditRule: boolean;
-} & Pick<RouteComponentProps<{projectId: string}, {}>, 'params'>;
+} & RouteComponentProps<{projectId: string}, {}>;
 
 class ProjectAlertHeader extends React.Component<Props> {
   render() {
-    const {canEditRule, params, organization} = this.props;
+    const {canEditRule, params, organization, location} = this.props;
     const {projectId} = params;
 
     const basePath = `/settings/${organization.slug}/projects/${projectId}/alerts/`;
@@ -30,20 +31,22 @@ class ProjectAlertHeader extends React.Component<Props> {
             <Button to={`${basePath}settings/`} size="small" icon="icon-settings">
               {t('Settings')}
             </Button>
-            <Tooltip
-              disabled={canEditRule}
-              title={t('You do not have permission to edit alert rules.')}
-            >
-              <Button
-                to={`${basePath}new/`}
-                disabled={!canEditRule}
-                priority="primary"
-                size="small"
-                icon="icon-circle-add"
+            <OnboardingHovercard organization={organization} location={location}>
+              <Tooltip
+                disabled={canEditRule}
+                title={t('You do not have permission to edit alert rules.')}
               >
-                {t('New Alert Rule')}
-              </Button>
-            </Tooltip>
+                <Button
+                  to={`${basePath}new/`}
+                  disabled={!canEditRule}
+                  priority="primary"
+                  size="small"
+                  icon="icon-circle-add"
+                >
+                  {t('New Alert Rule')}
+                </Button>
+              </Tooltip>
+            </OnboardingHovercard>
           </Actions>
         }
       />
diff --git a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
index c8c572d575..6166cbe21e 100644
--- a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
@@ -1550,6 +1550,9 @@ exports[`Sidebar can have onboarding feature 1`] = `
                                   Array [
                                     "/settings/org-slug/support/",
                                   ],
+                                  Array [
+                                    "/settings/org-slug/support/",
+                                  ],
                                 ],
                                 "results": Array [
                                   Object {
@@ -1728,6 +1731,10 @@ exports[`Sidebar can have onboarding feature 1`] = `
                                     "type": "return",
                                     "value": undefined,
                                   },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
                                 ],
                               },
                               "go": [MockFunction],
@@ -2212,6 +2219,9 @@ exports[`Sidebar can have onboarding feature 1`] = `
                                   Array [
                                     "/settings/org-slug/support/",
                                   ],
+                                  Array [
+                                    "/settings/org-slug/support/",
+                                  ],
                                 ],
                                 "results": Array [
                                   Object {
@@ -2390,6 +2400,10 @@ exports[`Sidebar can have onboarding feature 1`] = `
                                     "type": "return",
                                     "value": undefined,
                                   },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
                                 ],
                               },
                               "go": [MockFunction],
@@ -2874,6 +2888,9 @@ exports[`Sidebar can have onboarding feature 1`] = `
                                   Array [
                                     "/settings/org-slug/support/",
                                   ],
+                                  Array [
+                                    "/settings/org-slug/support/",
+                                  ],
                                 ],
                                 "results": Array [
                                   Object {
@@ -3052,6 +3069,10 @@ exports[`Sidebar can have onboarding feature 1`] = `
                                     "type": "return",
                                     "value": undefined,
                                   },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
                                 ],
                               },
                               "go": [MockFunction],
@@ -3606,6 +3627,9 @@ exports[`Sidebar can have onboarding feature 1`] = `
                                   Array [
                                     "/settings/org-slug/support/",
                                   ],
+                                  Array [
+                                    "/settings/org-slug/support/",
+                                  ],
                                 ],
                                 "results": Array [
                                   Object {
@@ -3784,6 +3808,10 @@ exports[`Sidebar can have onboarding feature 1`] = `
                                     "type": "return",
                                     "value": undefined,
                                   },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
                                 ],
                               },
                               "go": [MockFunction],
@@ -4341,6 +4369,9 @@ exports[`Sidebar can have onboarding feature 1`] = `
                                   Array [
                                     "/settings/org-slug/support/",
                                   ],
+                                  Array [
+                                    "/settings/org-slug/support/",
+                                  ],
                                 ],
                                 "results": Array [
                                   Object {
@@ -4519,6 +4550,10 @@ exports[`Sidebar can have onboarding feature 1`] = `
                                     "type": "return",
                                     "value": undefined,
                                   },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
                                 ],
                               },
                               "go": [MockFunction],
@@ -5089,6 +5124,9 @@ exports[`Sidebar can have onboarding feature 1`] = `
                                   Array [
                                     "/settings/org-slug/support/",
                                   ],
+                                  Array [
+                                    "/settings/org-slug/support/",
+                                  ],
                                 ],
                                 "results": Array [
                                   Object {
@@ -5267,6 +5305,10 @@ exports[`Sidebar can have onboarding feature 1`] = `
                                     "type": "return",
                                     "value": undefined,
                                   },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
                                 ],
                               },
                               "go": [MockFunction],
@@ -5586,6 +5628,743 @@ exports[`Sidebar can have onboarding feature 1`] = `
                         </TodoItem>
                       </withRouter(TodoItem)>
                     </WithOrganizationMockWrapper>
+                    <WithOrganizationMockWrapper
+                      key="setup_alert_rules"
+                      onSkip={[Function]}
+                      task={
+                        Object {
+                          "actionType": "app",
+                          "description": "Configure alerting rules to control error emails",
+                          "detailedDescription": "Receive Sentry alerts in Slack, PagerDuty, and more.",
+                          "display": true,
+                          "location": "/settings/org-slug/projects/:projectId/alerts/",
+                          "prereq": Array [
+                            1,
+                          ],
+                          "skippable": true,
+                          "task": "setup_alert_rules",
+                          "title": "Configure alerting rules",
+                        }
+                      }
+                    >
+                      <withRouter(TodoItem)
+                        onSkip={[Function]}
+                        organization={
+                          Object {
+                            "access": Array [
+                              "org:read",
+                              "org:write",
+                              "org:admin",
+                              "org:integrations",
+                              "project:read",
+                              "project:write",
+                              "project:admin",
+                              "team:read",
+                              "team:write",
+                              "team:admin",
+                            ],
+                            "features": Array [],
+                            "id": "3",
+                            "name": "Organization Name",
+                            "onboardingTasks": Array [],
+                            "projects": Array [],
+                            "scrapeJavaScript": true,
+                            "slug": "org-slug",
+                            "status": Object {
+                              "id": "active",
+                              "name": "active",
+                            },
+                            "teams": Array [],
+                          }
+                        }
+                        task={
+                          Object {
+                            "actionType": "app",
+                            "description": "Configure alerting rules to control error emails",
+                            "detailedDescription": "Receive Sentry alerts in Slack, PagerDuty, and more.",
+                            "display": true,
+                            "location": "/settings/org-slug/projects/:projectId/alerts/",
+                            "prereq": Array [
+                              1,
+                            ],
+                            "skippable": true,
+                            "task": "setup_alert_rules",
+                            "title": "Configure alerting rules",
+                          }
+                        }
+                      >
+                        <TodoItem
+                          location={
+                            Object {
+                              "query": Object {},
+                            }
+                          }
+                          onSkip={[Function]}
+                          organization={
+                            Object {
+                              "access": Array [
+                                "org:read",
+                                "org:write",
+                                "org:admin",
+                                "org:integrations",
+                                "project:read",
+                                "project:write",
+                                "project:admin",
+                                "team:read",
+                                "team:write",
+                                "team:admin",
+                              ],
+                              "features": Array [],
+                              "id": "3",
+                              "name": "Organization Name",
+                              "onboardingTasks": Array [],
+                              "projects": Array [],
+                              "scrapeJavaScript": true,
+                              "slug": "org-slug",
+                              "status": Object {
+                                "id": "active",
+                                "name": "active",
+                              },
+                              "teams": Array [],
+                            }
+                          }
+                          router={
+                            Object {
+                              "createHref": [MockFunction] {
+                                "calls": Array [
+                                  Array [
+                                    "/settings/account/details/",
+                                  ],
+                                  Array [
+                                    "/settings/account/",
+                                  ],
+                                  Array [
+                                    "/settings/account/api/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/projects/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/issues/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/releases/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/user-feedback/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/activity/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/stats/",
+                                  ],
+                                  Array [
+                                    "/settings/org-slug/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/projects/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/issues/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/releases/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/user-feedback/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/activity/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/stats/",
+                                  ],
+                                  Array [
+                                    "/settings/org-slug/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/projects/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/issues/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/releases/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/user-feedback/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/activity/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/stats/",
+                                  ],
+                                  Array [
+                                    "/settings/org-slug/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/projects/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/issues/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/releases/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/user-feedback/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/activity/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/stats/",
+                                  ],
+                                  Array [
+                                    "/settings/org-slug/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/projects/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/issues/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/releases/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/user-feedback/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/activity/",
+                                  ],
+                                  Array [
+                                    "/organizations/org-slug/stats/",
+                                  ],
+                                  Array [
+                                    "/settings/org-slug/",
+                                  ],
+                                  Array [
+                                    "/settings/org-slug/support/",
+                                  ],
+                                  Array [
+                                    "/settings/org-slug/support/",
+                                  ],
+                                  Array [
+                                    "/settings/org-slug/support/",
+                                  ],
+                                  Array [
+                                    "/settings/org-slug/support/",
+                                  ],
+                                  Array [
+                                    "/settings/org-slug/support/",
+                                  ],
+                                  Array [
+                                    "/settings/org-slug/support/",
+                                  ],
+                                  Array [
+                                    "/settings/org-slug/support/",
+                                  ],
+                                ],
+                                "results": Array [
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                  Object {
+                                    "type": "return",
+                                    "value": undefined,
+                                  },
+                                ],
+                              },
+                              "go": [MockFunction],
+                              "goBack": [MockFunction],
+                              "goForward": [MockFunction],
+                              "isActive": [MockFunction],
+                              "listen": [MockFunction],
+                              "location": Object {
+                                "query": Object {},
+                              },
+                              "push": [MockFunction],
+                              "replace": [MockFunction],
+                              "setRouteLeaveHook": [MockFunction],
+                            }
+                          }
+                          task={
+                            Object {
+                              "actionType": "app",
+                              "description": "Configure alerting rules to control error emails",
+                              "detailedDescription": "Receive Sentry alerts in Slack, PagerDuty, and more.",
+                              "display": true,
+                              "location": "/settings/org-slug/projects/:projectId/alerts/",
+                              "prereq": Array [
+                                1,
+                              ],
+                              "skippable": true,
+                              "task": "setup_alert_rules",
+                              "title": "Configure alerting rules",
+                            }
+                          }
+                        >
+                          <Item>
+                            <li
+                              className="css-1tc3zvc-Item ev4hf7u0"
+                            >
+                              <Content
+                                blur={false}
+                              >
+                                <div
+                                  className="css-9av8oo-Content ev4hf7u1"
+                                >
+                                  <Action
+                                    data-test-id="setup_alert_rules"
+                                    onClick={[Function]}
+                                  >
+                                    <ActionTarget
+                                      data-test-id="setup_alert_rules"
+                                      onClick={[Function]}
+                                    >
+                                      <div
+                                        className="css-kvrkkk-ActionTarget ev4hf7u6"
+                                        data-test-id="setup_alert_rules"
+                                        onClick={[Function]}
+                                      >
+                                        <Checkbox>
+                                          <div
+                                            className="css-k6399d-Checkbox ev4hf7u2"
+                                          />
+                                        </Checkbox>
+                                        <ItemHeader>
+                                          <h4
+                                            className="css-1x2o9i9-ItemHeader ev4hf7u7"
+                                          >
+                                            Configure alerting rules
+                                          </h4>
+                                        </ItemHeader>
+                                        <Description>
+                                          <p
+                                            className="css-1qxrlo5-Description ev4hf7u4"
+                                          >
+                                            Configure alerting rules to control error emails. Receive Sentry alerts in Slack, PagerDuty, and more.
+                                          </p>
+                                        </Description>
+                                      </div>
+                                    </ActionTarget>
+                                  </Action>
+                                  <SkipButton
+                                    onClick={[Function]}
+                                    size="xsmall"
+                                  >
+                                    <forwardRef<Button>
+                                      className="css-14778x-SkipButton ev4hf7u8"
+                                      onClick={[Function]}
+                                      size="xsmall"
+                                    >
+                                      <Button
+                                        align="center"
+                                        className="css-14778x-SkipButton ev4hf7u8"
+                                        disabled={false}
+                                        forwardRef={null}
+                                        onClick={[Function]}
+                                        size="xsmall"
+                                      >
+                                        <StyledButton
+                                          aria-disabled={false}
+                                          aria-label="Skip task"
+                                          className="css-14778x-SkipButton ev4hf7u8"
+                                          disabled={false}
+                                          forwardRef={null}
+                                          onClick={[Function]}
+                                          role="button"
+                                          size="xsmall"
+                                        >
+                                          <Component
+                                            aria-disabled={false}
+                                            aria-label="Skip task"
+                                            className="ev4hf7u8 css-sbtm7d-StyledButton-SkipButton edwq9my0"
+                                            forwardRef={null}
+                                            onClick={[Function]}
+                                            role="button"
+                                            size="xsmall"
+                                          >
+                                            <button
+                                              aria-disabled={false}
+                                              aria-label="Skip task"
+                                              className="ev4hf7u8 css-sbtm7d-StyledButton-SkipButton edwq9my0"
+                                              onClick={[Function]}
+                                              role="button"
+                                              size="xsmall"
+                                            >
+                                              <ButtonLabel
+                                                align="center"
+                                                size="xsmall"
+                                              >
+                                                <Component
+                                                  align="center"
+                                                  className="css-cmi7y3-ButtonLabel edwq9my1"
+                                                  size="xsmall"
+                                                >
+                                                  <span
+                                                    className="css-cmi7y3-ButtonLabel edwq9my1"
+                                                  >
+                                                    Skip task
+                                                  </span>
+                                                </Component>
+                                              </ButtonLabel>
+                                            </button>
+                                          </Component>
+                                        </StyledButton>
+                                      </Button>
+                                    </forwardRef<Button>>
+                                  </SkipButton>
+                                </div>
+                              </Content>
+                              <Confirmation
+                                hide={true}
+                                onDismiss={[Function]}
+                                onSkip={[Function]}
+                                orgId="org-slug"
+                              >
+                                <Component
+                                  className="css-1bs7c7i-Confirmation e1yl8cry0"
+                                  hide={true}
+                                  onDismiss={[Function]}
+                                  onSkip={[Function]}
+                                  orgId="org-slug"
+                                >
+                                  <div
+                                    className="css-1bs7c7i-Confirmation e1yl8cry0"
+                                    onClick={[Function]}
+                                  >
+                                    <Header>
+                                      <h4
+                                        className="css-cwdjtc-Header e1yl8cry1"
+                                      >
+                                        Want help?
+                                      </h4>
+                                    </Header>
+                                    <div>
+                                      <span
+                                        key="6"
+                                      >
+                                        <forwardRef<Button>
+                                          key="1"
+                                          priority="link"
+                                          to="/settings/org-slug/support/"
+                                        >
+                                          <Button
+                                            align="center"
+                                            disabled={false}
+                                            forwardRef={null}
+                                            priority="link"
+                                            to="/settings/org-slug/support/"
+                                          >
+                                            <StyledButton
+                                              aria-disabled={false}
+                                              disabled={false}
+                                              forwardRef={null}
+                                              onClick={[Function]}
+                                              priority="link"
+                                              role="button"
+                                              to="/settings/org-slug/support/"
+                                            >
+                                              <Component
+                                                aria-disabled={false}
+                                                className="css-1ilrgbi-StyledButton edwq9my0"
+                                                forwardRef={null}
+                                                onClick={[Function]}
+                                                role="button"
+                                                to="/settings/org-slug/support/"
+                                              >
+                                                <Link
+                                                  aria-disabled={false}
+                                                  className="css-1ilrgbi-StyledButton edwq9my0"
+                                                  onClick={[Function]}
+                                                  onlyActiveOnIndex={false}
+                                                  role="button"
+                                                  style={Object {}}
+                                                  to="/settings/org-slug/support/"
+                                                >
+                                                  <a
+                                                    aria-disabled={false}
+                                                    className="css-1ilrgbi-StyledButton edwq9my0"
+                                                    onClick={[Function]}
+                                                    role="button"
+                                                    style={Object {}}
+                                                  >
+                                                    <ButtonLabel
+                                                      align="center"
+                                                      priority="link"
+                                                    >
+                                                      <Component
+                                                        align="center"
+                                                        className="css-1igyjbb-ButtonLabel edwq9my1"
+                                                        priority="link"
+                                                      >
+                                                        <span
+                                                          className="css-1igyjbb-ButtonLabel edwq9my1"
+                                                        >
+                                                          <span
+                                                            key="0"
+                                                          >
+                                                            Go to support
+                                                          </span>
+                                                        </span>
+                                                      </Component>
+                                                    </ButtonLabel>
+                                                  </a>
+                                                </Link>
+                                              </Component>
+                                            </StyledButton>
+                                          </Button>
+                                        </forwardRef<Button>>
+                                        <span
+                                          key="2"
+                                        >
+                                           · 
+                                        </span>
+                                        <forwardRef<Button>
+                                          key="4"
+                                          onClick={[Function]}
+                                          priority="link"
+                                        >
+                                          <Button
+                                            align="center"
+                                            disabled={false}
+                                            forwardRef={null}
+                                            onClick={[Function]}
+                                            priority="link"
+                                          >
+                                            <StyledButton
+                                              aria-disabled={false}
+                                              disabled={false}
+                                              forwardRef={null}
+                                              onClick={[Function]}
+                                              priority="link"
+                                              role="button"
+                                            >
+                                              <Component
+                                                aria-disabled={false}
+                                                className="css-1ilrgbi-StyledButton edwq9my0"
+                                                forwardRef={null}
+                                                onClick={[Function]}
+                                                role="button"
+                                              >
+                                                <button
+                                                  aria-disabled={false}
+                                                  className="css-1ilrgbi-StyledButton edwq9my0"
+                                                  onClick={[Function]}
+                                                  role="button"
+                                                >
+                                                  <ButtonLabel
+                                                    align="center"
+                                                    priority="link"
+                                                  >
+                                                    <Component
+                                                      align="center"
+                                                      className="css-1igyjbb-ButtonLabel edwq9my1"
+                                                      priority="link"
+                                                    >
+                                                      <span
+                                                        className="css-1igyjbb-ButtonLabel edwq9my1"
+                                                      >
+                                                        <span
+                                                          key="3"
+                                                        >
+                                                          Skip
+                                                        </span>
+                                                      </span>
+                                                    </Component>
+                                                  </ButtonLabel>
+                                                </button>
+                                              </Component>
+                                            </StyledButton>
+                                          </Button>
+                                        </forwardRef<Button>>
+                                      </span>
+                                    </div>
+                                  </div>
+                                </Component>
+                              </Confirmation>
+                            </li>
+                          </Item>
+                        </TodoItem>
+                      </withRouter(TodoItem)>
+                    </WithOrganizationMockWrapper>
                   </ul>
                 </StyledTodoList>
               </TodoList>
diff --git a/tests/js/spec/views/settings/projectAlerts/issueEditor.spec.jsx b/tests/js/spec/views/settings/projectAlerts/issueEditor.spec.jsx
index eb13f53d43..9fc218b3f5 100644
--- a/tests/js/spec/views/settings/projectAlerts/issueEditor.spec.jsx
+++ b/tests/js/spec/views/settings/projectAlerts/issueEditor.spec.jsx
@@ -6,8 +6,10 @@ import {mountWithTheme} from 'sentry-test/enzyme';
 import {selectByValue} from 'sentry-test/select-new';
 import ProjectAlerts from 'app/views/settings/projectAlerts';
 import IssueEditor from 'app/views/settings/projectAlerts/issueEditor';
+import {updateOnboardingTask} from 'app/actionCreators/onboardingTasks';
 
 jest.unmock('app/utils/recreateRoute');
+jest.mock('app/actionCreators/onboardingTasks');
 
 describe('ProjectAlerts -> IssueEditor', function() {
   const projectAlertRuleDetailsRoutes = [
@@ -143,5 +145,12 @@ describe('ProjectAlerts -> IssueEditor', function() {
         })
       );
     });
+
+    it('updates the alert onboarding task', async function() {
+      const {wrapper} = createWrapper();
+      wrapper.find('form').simulate('submit');
+
+      expect(updateOnboardingTask).toHaveBeenCalled();
+    });
   });
 });
diff --git a/tests/js/spec/views/settings/projectAlerts/onboardingHovercard.spec.js b/tests/js/spec/views/settings/projectAlerts/onboardingHovercard.spec.js
new file mode 100644
index 0000000000..00d832e94a
--- /dev/null
+++ b/tests/js/spec/views/settings/projectAlerts/onboardingHovercard.spec.js
@@ -0,0 +1,80 @@
+import React from 'react';
+
+import {initializeOrg} from 'sentry-test/initializeOrg';
+import {mountWithTheme} from 'sentry-test/enzyme';
+import OnboardingHovercard from 'app/views/settings/projectAlerts/onboardingHovercard';
+import {updateOnboardingTask} from 'app/actionCreators/onboardingTasks';
+
+jest.mock('app/actionCreators/onboardingTasks');
+
+describe('OnboardingHovercard', function() {
+  const {organization, routerContext} = initializeOrg();
+
+  it('is hidden when onboardingTask is not in the query string', function() {
+    const wrapper = mountWithTheme(
+      <OnboardingHovercard
+        api={MockApiClient}
+        organization={organization}
+        location={{query: {}}}
+      >
+        Content
+      </OnboardingHovercard>,
+      routerContext
+    );
+
+    expect(wrapper.find('Hovercard').exists()).toBeFalsy();
+  });
+
+  it('is hidden when the alert rule task is not complete', function() {
+    const completedOnboardingOrg = {
+      ...organization,
+      onboardingTasks: [{task: 'setup_alert_rules', status: 'complete'}],
+    };
+
+    const wrapper = mountWithTheme(
+      <OnboardingHovercard
+        api={MockApiClient}
+        organization={completedOnboardingOrg}
+        location={{query: {onboardingTask: null}}}
+      >
+        Content
+      </OnboardingHovercard>,
+      routerContext
+    );
+
+    expect(wrapper.find('Hovercard').exists()).toBeFalsy();
+    return;
+  });
+
+  it('updates the onboarding task when the default alert rules button is clicked', function() {
+    const wrapper = mountWithTheme(
+      <OnboardingHovercard
+        api={MockApiClient}
+        organization={organization}
+        location={{query: {onboardingTask: null}}}
+      >
+        Content
+      </OnboardingHovercard>,
+      routerContext
+    );
+
+    wrapper.find('Button').simulate('click');
+
+    expect(updateOnboardingTask).toHaveBeenCalled();
+  });
+
+  it('renders', function() {
+    const wrapper = mountWithTheme(
+      <OnboardingHovercard
+        api={MockApiClient}
+        organization={organization}
+        location={{query: {onboardingTask: null}}}
+      >
+        Content
+      </OnboardingHovercard>,
+      routerContext
+    );
+
+    expect(wrapper.find('Hovercard').exists()).toBeTruthy();
+  });
+});
diff --git a/tests/sentry/receivers/test_onboarding.py b/tests/sentry/receivers/test_onboarding.py
index 7e9b7aea51..f8f4aa8ed0 100644
--- a/tests/sentry/receivers/test_onboarding.py
+++ b/tests/sentry/receivers/test_onboarding.py
@@ -7,6 +7,7 @@ from sentry.models import (
     OnboardingTaskStatus,
     OrganizationOnboardingTask,
     OrganizationOption,
+    Rule,
 )
 from sentry.signals import (
     event_processed,
@@ -17,9 +18,9 @@ from sentry.signals import (
     member_joined,
     plugin_enabled,
     issue_tracker_used,
+    alert_rule_created,
 )
 from sentry.plugins.bases import IssueTrackingPlugin
-from sentry.plugins.bases.notify import NotificationPlugin
 from sentry.testutils import TestCase
 from sentry.testutils.helpers.datetime import before_now, iso_format
 
@@ -266,12 +267,9 @@ class OrganizationOnboardingTaskTest(TestCase):
         )
         assert task is not None
 
-    def test_notification_added(self):
-        plugin_enabled.send(
-            plugin=NotificationPlugin(),
-            project=self.project,
-            user=self.user,
-            sender=type(NotificationPlugin),
+    def test_alert_added(self):
+        alert_rule_created.send(
+            rule=Rule(id=1), project=self.project, user=self.user, sender=type(Rule)
         )
         task = OrganizationOnboardingTask.objects.get(
             organization=self.organization,
@@ -341,8 +339,8 @@ class OrganizationOnboardingTaskTest(TestCase):
             user=user,
             sender=type(IssueTrackingPlugin),
         )
-        plugin_enabled.send(
-            plugin=NotificationPlugin(), project=project, user=user, sender=type(NotificationPlugin)
+        alert_rule_created.send(
+            rule=Rule(id=1), project=self.project, user=self.user, sender=type(Rule)
         )
 
         assert (
