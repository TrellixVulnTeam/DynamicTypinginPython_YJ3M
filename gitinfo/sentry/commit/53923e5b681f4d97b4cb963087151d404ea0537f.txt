commit 53923e5b681f4d97b4cb963087151d404ea0537f
Author: Ayesha Omarali <ayesha.omarali@gmail.com>
Date:   Wed Aug 1 17:39:29 2018 -0700

    feat(discover): Add BarChart and LineChart (#9248)

diff --git a/src/sentry/static/sentry/app/components/charts/barChart.jsx b/src/sentry/static/sentry/app/components/charts/barChart.jsx
index 52c843f789..642a3cbba0 100644
--- a/src/sentry/static/sentry/app/components/charts/barChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/barChart.jsx
@@ -1,4 +1,3 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 
 import BarSeries from './series/barSeries.jsx';
@@ -8,37 +7,11 @@ import XAxis from './components/xAxis';
 
 export default class BarChart extends React.Component {
   static propTypes = {
-    // We passthrough all props exception `options`
     ...BaseChart.propTypes,
-
-    series: PropTypes.arrayOf(
-      PropTypes.arrayOf(
-        PropTypes.shape({
-          name: PropTypes.string,
-          category: PropTypes.string,
-          value: PropTypes.number,
-        })
-      )
-    ),
   };
 
-  generateBarData(series) {
-    let xAxisLabels = new Set();
-
-    const barData = series.map(s => {
-      let tempSeries = {};
-      s.data.forEach(({category, value}) => {
-        xAxisLabels.add(category);
-        tempSeries[category] = value;
-      });
-      return tempSeries;
-    });
-    return [barData, Array.from(xAxisLabels)];
-  }
-
   render() {
     const {series, stacked} = this.props;
-    const [barData, xAxisLabels] = this.generateBarData(series);
 
     return (
       <BaseChart
@@ -46,17 +19,13 @@ export default class BarChart extends React.Component {
         options={{
           xAxis: XAxis({
             type: 'category',
-            data: xAxisLabels,
           }),
           yAxis: YAxis({}),
           series: series.map((s, i) => {
-            let data = xAxisLabels.map(label => {
-              return barData[i].hasOwnProperty(label) ? barData[i][label] : 0;
-            });
             return BarSeries({
               name: s.seriesName,
               stack: stacked ? 'stack1' : null,
-              data,
+              data: s.data.map(({value, name}) => [name, value]),
             });
           }),
         }}
diff --git a/src/sentry/static/sentry/app/components/charts/baseChart.jsx b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
index fcc3f26a4c..fb2c78d139 100644
--- a/src/sentry/static/sentry/app/components/charts/baseChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
@@ -4,6 +4,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import ReactEchartsCore from 'echarts-for-react/lib/core';
 import echarts from 'echarts/lib/echarts';
+import SentryTypes from 'app/sentryTypes';
 
 import theme from 'app/utils/theme';
 
@@ -21,6 +22,8 @@ const getDimensionValue = dimension => {
 
 class BaseChart extends React.Component {
   static propTypes = {
+    series: SentryTypes.Series,
+
     // see: https://ecomfe.github.io/echarts-doc/public/en/option.html
     options: PropTypes.object,
 
diff --git a/src/sentry/static/sentry/app/components/charts/lineChart.jsx b/src/sentry/static/sentry/app/components/charts/lineChart.jsx
new file mode 100644
index 0000000000..4214766a38
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/lineChart.jsx
@@ -0,0 +1,34 @@
+import React from 'react';
+import BaseChart from './baseChart';
+import XAxis from './components/xAxis';
+import YAxis from './components/yAxis';
+import LineSeries from './series/lineSeries';
+
+export default class LineChart extends React.Component {
+  static propTypes = {
+    ...BaseChart.propTypes,
+  };
+
+  render() {
+    const {series, ...props} = this.props;
+
+    return (
+      <BaseChart
+        {...props}
+        options={{
+          xAxis: XAxis({
+            type: 'category',
+            boundaryGap: false,
+          }),
+          yAxis: YAxis({}),
+          series: series.map((s, i) => {
+            return LineSeries({
+              name: s.seriesName,
+              data: s.data.map(({value, name}) => [name, value]),
+            });
+          }),
+        }}
+      />
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index 4aae2821a6..218018fa9a 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -295,6 +295,21 @@ export const ProjectKey = PropTypes.shape({
   cdnSdkUrl: PropTypes.string,
 });
 
+export const SeriesUnit = PropTypes.shape({
+  seriesName: PropTypes.string,
+  data: PropTypes.oneOfType([
+    PropTypes.arrayOf(
+      PropTypes.shape({
+        value: PropTypes.number,
+        category: PropTypes.string,
+      })
+    ),
+    PropTypes.arrayOf(PropTypes.number),
+  ]),
+});
+
+export const Series = PropTypes.arrayOf(SeriesUnit);
+
 let SentryTypes = {
   AnyModel: PropTypes.shape({
     id: PropTypes.string.isRequired,
@@ -311,6 +326,8 @@ let SentryTypes = {
   Tag,
   PageLinks,
   Project,
+  Series,
+  SeriesUnit,
   TagKey: PropTypes.shape({
     key: PropTypes.string.isRequired,
   }),
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index d316ec4d6e..788b2a411b 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -93,6 +93,7 @@ export default class OrganizationDiscover extends React.Component {
         ...queryBuilder.getExternal(),
         groupby: ['time'],
         rollup: 60 * 60 * 24,
+        orderby: 'time',
       };
 
       queryBuilder.fetch(chartQuery).then(
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/chart.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/chart.jsx
index f97a2f6bfe..ac163b374d 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/chart.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/chart.jsx
@@ -1,18 +1,82 @@
 import React from 'react';
+import moment from 'moment';
 import PropTypes from 'prop-types';
 
-export default class ResultChart extends React.Component {
+import BarChart from 'app/components/charts/barChart';
+import LineChart from 'app/components/charts/lineChart';
+
+export default class Result extends React.Component {
   static propTypes = {
     data: PropTypes.object.isRequired,
     query: PropTypes.object.isRequired,
   };
 
+  // Converts a value to a string for the chart label. This could
+  // potentially cause incorrect grouping, e.g. if the value null and string
+  // 'null' are both present in the same series they will be merged into 1 value
+  getLabel(value) {
+    if (typeof value === 'object') {
+      try {
+        value = JSON.stringify(value);
+      } catch (err) {
+        // eslint-disable-next-line no-console
+        console.error(err);
+      }
+    }
+
+    return value;
+  }
+
+  getChartData(queryData, groupbyFields) {
+    const {aggregations} = this.props.query;
+    const aggregate = aggregations[0][2];
+    const dates = [
+      ...new Set(queryData.map(entry => moment.utc(entry.time * 1000).format('MMM Do'))),
+    ];
+    const output = {};
+    queryData.forEach(data => {
+      const key = groupbyFields.map(field => this.getLabel(data[field])).join(',');
+      if (key in output) {
+        output[key].data.push({
+          value: data[aggregate],
+          name: moment.utc(data.time * 1000).format('MMM Do'),
+        });
+      } else {
+        output[key] = {
+          data: [
+            {value: data[aggregate], name: moment.utc(data.time * 1000).format('MMM Do')},
+          ],
+        };
+      }
+    });
+    const result = [];
+    for (let key in output) {
+      const addDates = dates.filter(
+        date => !output[key].data.map(entry => entry.name).includes(date)
+      );
+      for (let i = 0; i < addDates.length; i++) {
+        output[key].data.push({
+          value: null,
+          name: addDates[i],
+        });
+      }
+
+      result.push({seriesName: key, data: output[key].data});
+    }
+    return result;
+  }
+
   render() {
-    const {aggregations, fields} = this.props.query;
-    // TODO: implement charts
+    const {fields} = this.props.query;
+    const {data} = this.props.data;
+
+    const chartData = this.getChartData(data, fields);
+
     return (
-      `data for charts: ${JSON.stringify(this.props.data)} ` +
-      `chart query: ${fields} ${aggregations}`
+      <div>
+        <LineChart series={chartData} style={{height: 300}} />
+        <BarChart series={chartData} stacked={true} style={{height: 300}} />
+      </div>
     );
   }
 }
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
index ad18991972..80d78cb8ae 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
@@ -95,6 +95,7 @@ describe('Discover', function() {
         ...queryBuilder.getExternal(),
         groupby: ['time'],
         rollup: 60 * 60 * 24,
+        orderby: 'time',
       });
     });
   });
diff --git a/tests/js/spec/views/organizationDiscover/result/chart.spec.jsx b/tests/js/spec/views/organizationDiscover/result/chart.spec.jsx
new file mode 100644
index 0000000000..a406197022
--- /dev/null
+++ b/tests/js/spec/views/organizationDiscover/result/chart.spec.jsx
@@ -0,0 +1,108 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+
+import ResultChart from 'app/views/organizationDiscover/result/chart';
+
+describe('Chart Data', function() {
+  const data = {
+    data: [
+      {
+        'exception_stacks.type': 'ZeroDivisionError',
+        platform: 'python',
+        count: 6,
+        time: 1531094400,
+      },
+      {
+        'exception_stacks.type': 'Type Error',
+        platform: 'javascript',
+        count: 6,
+        time: 1531094400,
+      },
+      {
+        'exception_stacks.type': 'Exception',
+        platform: 'php',
+        count: 6,
+        time: 1531094400,
+      },
+      {
+        'exception_stacks.type': 'SnubaError',
+        platform: 'python',
+        count: 14,
+        time: 1531094400,
+      },
+      {
+        'exception_stacks.type': 'ZeroDivisionError',
+        platform: 'python',
+        count: 20,
+        time: 1531180800,
+      },
+      {
+        'exception_stacks.type': 'Type Error',
+        platform: 'javascript',
+        count: 5,
+        time: 1532070000,
+      },
+      {
+        'exception_stacks.type': 'Exception',
+        platform: 'php',
+        count: 8,
+        time: 1532070000,
+      },
+      {
+        'exception_stacks.type': 'SnubaError',
+        platform: 'python',
+        count: 30,
+        time: 1532070000,
+      },
+    ],
+  };
+  const query = {
+    aggregations: [['count()', null, 'count']],
+    fields: ['platform', 'exception_stacks.type'],
+  };
+
+  const wrapper = shallow(<ResultChart data={data} query={query} />);
+
+  describe('getLineChartData()', function() {
+    const expectedData = [
+      {
+        data: [
+          {name: 'Jul 9th', value: 6},
+          {name: 'Jul 10th', value: 20},
+          {name: 'Jul 20th', value: null},
+        ],
+        seriesName: 'python,ZeroDivisionError',
+      },
+      {
+        data: [
+          {name: 'Jul 9th', value: 6},
+          {name: 'Jul 20th', value: 5},
+          {name: 'Jul 10th', value: null},
+        ],
+        seriesName: 'javascript,Type Error',
+      },
+      {
+        data: [
+          {name: 'Jul 9th', value: 6},
+          {name: 'Jul 20th', value: 8},
+          {name: 'Jul 10th', value: null},
+        ],
+        seriesName: 'php,Exception',
+      },
+      {
+        data: [
+          {name: 'Jul 9th', value: 14},
+          {name: 'Jul 20th', value: 30},
+          {name: 'Jul 10th', value: null},
+        ],
+        seriesName: 'python,SnubaError',
+      },
+    ];
+
+    it('Gets line chart data correctly', function() {
+      expect(wrapper.instance().getChartData(data.data, query.fields)).toEqual(
+        expectedData
+      );
+    });
+  });
+});
