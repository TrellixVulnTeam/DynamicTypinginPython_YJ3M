commit 11001dd3c2ca456216855ee27b287d56f2a13fc0
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Mar 12 20:12:11 2020 -0700

    chore(ts): Convert eventWaiter / firstEventIndicator (#17536)

diff --git a/src/sentry/static/sentry/app/views/onboarding/projectSetup/eventWaiter.jsx b/src/sentry/static/sentry/app/views/onboarding/projectSetup/eventWaiter.tsx
similarity index 60%
rename from src/sentry/static/sentry/app/views/onboarding/projectSetup/eventWaiter.jsx
rename to src/sentry/static/sentry/app/views/onboarding/projectSetup/eventWaiter.tsx
index e77b006fe3..581170fa5b 100644
--- a/src/sentry/static/sentry/app/views/onboarding/projectSetup/eventWaiter.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/projectSetup/eventWaiter.tsx
@@ -1,8 +1,8 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 
 import {analytics} from 'app/utils/analytics';
-import SentryTypes from 'app/sentryTypes';
+import {Client} from 'app/api';
+import {Organization, Project, Group} from 'app/types';
 import withApi from 'app/utils/withApi';
 
 const DEFAULT_POLL_INTERVAL = 5000;
@@ -14,30 +14,32 @@ const recordAnalyticsFirstEvent = ({organization, project}) =>
   });
 
 /**
- * This is a render prop component that can be used to wait for the first event
- * of a project to be received via polling.
- *
- * When an event is received the {firstIssue} will be passed to the child.
  * Should no issue object be available (the first issue has expired) then it
- * will simply be boolean true.
- *
- * Otherwise this value will be null before the event is received.
+ * will simply be boolean true. When no event has been recieved this will be
+ * null. Otherwise it will be the group
  */
-class EventWaiter extends React.Component {
-  static propTypes = {
-    api: PropTypes.object,
-    organization: SentryTypes.Organization,
-    project: SentryTypes.Project,
-    disabled: PropTypes.bool,
-    children: PropTypes.func,
-    pollInterval: PropTypes.number,
-  };
+type FirstIssue = null | true | Group;
+
+type Props = {
+  api: Client;
+  organization: Organization;
+  project: Project;
+  disabled?: boolean;
+  pollInterval?: number;
+  onIssueRecieved?: (props: {firstIssue: FirstIssue}) => void;
+  children: (props: {firstIssue: FirstIssue}) => React.ReactNode;
+};
+
+type State = {
+  firstIssue: FirstIssue;
+};
 
-  static defaultProps = {
-    pollInterval: DEFAULT_POLL_INTERVAL,
-  };
-
-  state = {
+/**
+ * This is a render prop component that can be used to wait for the first event
+ * of a project to be received via polling.
+ */
+class EventWaiter extends React.Component<Props, State> {
+  state: State = {
     firstIssue: null,
   };
 
@@ -46,7 +48,7 @@ class EventWaiter extends React.Component {
     this.startPolling();
   }
 
-  componentDidUpdate(prevProps) {
+  componentDidUpdate() {
     this.stopPolling();
     this.startPolling();
   }
@@ -55,10 +57,10 @@ class EventWaiter extends React.Component {
     this.stopPolling();
   }
 
-  intervalId = null;
+  intervalId: number | null = null;
 
   pollHandler = async () => {
-    const {api, organization, project} = this.props;
+    const {api, organization, project, onIssueRecieved} = this.props;
 
     const {firstEvent} = await api.requestPromise(
       `/projects/${organization.slug}/${project.slug}/`
@@ -72,15 +74,20 @@ class EventWaiter extends React.Component {
     // *not* include sample events, while just looking at the issues list will.
     // We will wait until the project.firstEvent is set and then locate the
     // event given that event datetime
-    const issues = await api.requestPromise(
+    const issues: Group[] = await api.requestPromise(
       `/projects/${organization.slug}/${project.slug}/issues/`
     );
 
     // The event may have expired, default to true
-    const firstIssue = issues.find(issue => issue.firstSeen === firstEvent) || true;
+    const firstIssue =
+      issues.find((issue: Group) => issue.firstSeen === firstEvent) || true;
 
     recordAnalyticsFirstEvent({organization, project});
 
+    if (onIssueRecieved) {
+      onIssueRecieved({firstIssue});
+    }
+
     this.stopPolling();
     this.setState({firstIssue});
   };
@@ -92,11 +99,16 @@ class EventWaiter extends React.Component {
       return;
     }
 
-    this.intervalId = setInterval(this.pollHandler, this.props.pollInterval);
+    this.intervalId = window.setInterval(
+      this.pollHandler,
+      this.props.pollInterval || DEFAULT_POLL_INTERVAL
+    );
   }
 
   stopPolling() {
-    clearInterval(this.intervalId);
+    if (this.intervalId) {
+      clearInterval(this.intervalId);
+    }
   }
 
   render() {
diff --git a/src/sentry/static/sentry/app/views/onboarding/projectSetup/firstEventIndicator.jsx b/src/sentry/static/sentry/app/views/onboarding/projectSetup/firstEventIndicator.tsx
similarity index 76%
rename from src/sentry/static/sentry/app/views/onboarding/projectSetup/firstEventIndicator.jsx
rename to src/sentry/static/sentry/app/views/onboarding/projectSetup/firstEventIndicator.tsx
index a71ce8309c..2116912147 100644
--- a/src/sentry/static/sentry/app/views/onboarding/projectSetup/firstEventIndicator.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/projectSetup/firstEventIndicator.tsx
@@ -1,5 +1,4 @@
 import {keyframes} from '@emotion/core';
-import PropTypes from 'prop-types';
 import React from 'react';
 import posed, {PoseGroup} from 'react-pose';
 import styled from '@emotion/styled';
@@ -10,16 +9,21 @@ import EventWaiter from 'app/views/onboarding/projectSetup/eventWaiter';
 import InlineSvg from 'app/components/inlineSvg';
 import space from 'app/styles/space';
 import testablePose from 'app/utils/testablePose';
+import {Group, Organization} from 'app/types';
 
-const FirstEventIndicator = props => (
+type EventWaiterProps = Omit<React.ComponentProps<typeof EventWaiter>, 'children'>;
+type FirstIssue = null | true | Group;
+
+const FirstEventIndicator = (props: EventWaiterProps) => (
   <EventWaiter {...props}>
     {({firstIssue}) => <Indicator firstIssue={firstIssue} {...props} />}
   </EventWaiter>
 );
 
-FirstEventIndicator.propTypes = EventWaiter.propTypes;
-
-const Indicator = ({firstIssue, ...props}) => (
+const Indicator = ({
+  firstIssue,
+  ...props
+}: EventWaiterProps & {firstIssue: FirstIssue}) => (
   <PoseGroup preEnterPose="init">
     {!firstIssue ? (
       <Waiting key="waiting" />
@@ -29,22 +33,36 @@ const Indicator = ({firstIssue, ...props}) => (
   </PoseGroup>
 );
 
-Indicator.propTypes = {
-  firstIssue: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
-};
+const StatusWrapper = styled(posed.div(testablePose({enter: {staggerChildren: 350}})))`
+  display: grid;
+  grid-template-columns: max-content 1fr max-content;
+  grid-gap: ${space(1)};
+  align-items: center;
+  font-size: 0.9em;
+  /* This is a minor hack, but the line height is just *slightly* too low,
+  making the text appear off center, so we adjust it just a bit */
+  line-height: calc(0.9em + 1px);
+  /* Ensure the event waiter status is always the height of a button */
+  height: ${space(4)};
+`;
 
-const Waiting = props => (
+const Waiting = (props: React.ComponentProps<typeof StatusWrapper>) => (
   <StatusWrapper {...props}>
     <WaitingIndicator />
     <PosedText>{t('Waiting for verification event')}</PosedText>
   </StatusWrapper>
 );
 
-const Success = ({organization, firstIssue, ...props}) => (
+type SuccessProps = EventWaiterProps & {
+  firstIssue: FirstIssue;
+  organization: Organization;
+};
+
+const Success = ({organization, firstIssue, ...props}: SuccessProps) => (
   <StatusWrapper {...props}>
     <ReceivedIndicator src="icon-checkmark-sm" />
-    <PosedText>{t('First event was received!')}</PosedText>
-    {firstIssue !== true && (
+    <PosedText>{t('Event was received!')}</PosedText>
+    {firstIssue && firstIssue !== true && (
       <PosedButton
         size="small"
         priority="primary"
@@ -56,8 +74,6 @@ const Success = ({organization, firstIssue, ...props}) => (
   </StatusWrapper>
 );
 
-Success.propTypes = FirstEventIndicator.propTypes;
-
 const indicatorPoses = testablePose({
   init: {opacity: 0, y: -10},
   enter: {opacity: 1, y: 0},
@@ -66,17 +82,6 @@ const indicatorPoses = testablePose({
 
 const PosedText = posed.div(indicatorPoses);
 
-const StatusWrapper = styled(posed.div(testablePose({enter: {staggerChildren: 350}})))`
-  display: grid;
-  grid-template-columns: max-content 1fr max-content;
-  grid-gap: ${space(1)};
-  align-items: center;
-  font-size: 0.9em;
-  /* This is a minor hack, but the line height is just *slightly* too low,
-  making the text appear off center, so we adjust it just a bit */
-  line-height: calc(0.9em + 1px);
-`;
-
 const pulse = keyframes`
   0% {
     transform: scale(0.1);
@@ -112,9 +117,7 @@ const WaitingIndicator = styled(posed.div(indicatorPoses))`
   }
 `;
 
-const PosedReceivedIndicator = posed(
-  React.forwardRef((props, ref) => <InlineSvg {...props} ref={ref} />)
-)(indicatorPoses);
+const PosedReceivedIndicator = posed(InlineSvg)(indicatorPoses);
 
 const ReceivedIndicator = styled(PosedReceivedIndicator)`
   color: #fff;
@@ -127,7 +130,7 @@ const ReceivedIndicator = styled(PosedReceivedIndicator)`
 `;
 
 const PosedButton = posed(
-  React.forwardRef((props, ref) => (
+  React.forwardRef<HTMLDivElement>((props, ref) => (
     <div ref={ref}>
       <Button {...props} />
     </div>
