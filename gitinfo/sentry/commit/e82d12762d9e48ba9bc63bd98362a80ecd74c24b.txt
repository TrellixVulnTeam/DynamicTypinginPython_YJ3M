commit e82d12762d9e48ba9bc63bd98362a80ecd74c24b
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Wed Jun 20 10:48:12 2018 -0700

    feat(integrations): Vsts OAuth refresh (#8725)
    
    * rough draft.
    
    * Moved functionality to integration installation so that the default_identity field would be updated as well.
    
    * Removed code from vsts provider
    
    * Added tests for refresh identity.
    
    * Saving place.
    
    * Added stuff, but need a way to get the provider from the id.
    
    * Added the test not done.:
    
    * got tests tp work and moved functionality to providers."
    
    * removed unneeded conversion.
    
    * Removed whitespace.
    
    * Removed whitespace.
    
    * Fixed tests.
    
    * changed url in tests.
    
    * changed auth_identity to identity. changed oauth client into a mixin.
    
    * pass in redirect url rather than have it as a class variable in the provider.
    
    * merged and added everything back in

diff --git a/src/sentry/identity/base.py b/src/sentry/identity/base.py
index bbff8a69be..3b24d9ef41 100644
--- a/src/sentry/identity/base.py
+++ b/src/sentry/identity/base.py
@@ -70,7 +70,7 @@ class Provider(PipelineProvider):
         """
         return new_data
 
-    def refresh_identity(self, auth_identity):
+    def refresh_identity(self, auth_identity, *args, **kwargs):
         """
         Updates the AuthIdentity with any changes from upstream. The primary
         example of a change would be signalling this identity is no longer
diff --git a/src/sentry/identity/oauth2.py b/src/sentry/identity/oauth2.py
index 4698dd6b8e..e376d7db57 100644
--- a/src/sentry/identity/oauth2.py
+++ b/src/sentry/identity/oauth2.py
@@ -7,6 +7,7 @@ from uuid import uuid4
 from time import time
 from django.views.decorators.csrf import csrf_exempt
 
+from sentry.auth.exceptions import IdentityNotValid
 from sentry.http import safe_urlopen, safe_urlread
 from sentry.utils import json
 from sentry.utils.http import absolute_uri
@@ -64,6 +65,9 @@ class OAuth2Provider(Provider):
     def get_oauth_access_token_url(self):
         return self._get_oauth_parameter('access_token_url')
 
+    def get_oauth_refresh_token_url(self):
+        raise NotImplementedError
+
     def get_oauth_authorize_url(self):
         return self._get_oauth_parameter('authorize_url')
 
@@ -76,6 +80,9 @@ class OAuth2Provider(Provider):
     def get_oauth_scopes(self):
         return self.config.get('oauth_scopes', self.oauth_scopes)
 
+    def get_refresh_token_headers(self):
+        return None
+
     def get_pipeline_views(self):
         return [
             OAuth2LoginView(
@@ -90,9 +97,16 @@ class OAuth2Provider(Provider):
             ),
         ]
 
+    def get_refresh_token_params(self, refresh_token, *args, **kwargs):
+        return {
+            'client_id': self.get_client_id(),
+            'client_secret': self.get_client_secret(),
+            'grant_type': 'refresh_token',
+            'refresh_token': refresh_token,
+        }
+
     def get_oauth_data(self, payload):
         data = {'access_token': payload['access_token']}
-
         if 'expires_in' in payload:
             data['expires'] = int(time()) + payload['expires_in']
         if 'refresh_token' in payload:
@@ -102,6 +116,46 @@ class OAuth2Provider(Provider):
 
         return data
 
+    def refresh_identity(self, identity, *args, **kwargs):
+        refresh_token = identity.data.get('refresh_token')
+
+        if not refresh_token:
+            raise IdentityNotValid('Missing refresh token')
+
+        data = self.get_refresh_token_params(refresh_token, *args, **kwargs)
+
+        req = safe_urlopen(
+            url=self.get_refresh_token_url(),
+            headers=self.get_refresh_token_headers(),
+            data=data,
+        )
+
+        try:
+            body = safe_urlread(req)
+            payload = json.loads(body)
+        except Exception:
+            payload = {}
+
+        error = payload.get('error', 'unknown_error')
+        error_description = payload.get('error_description', 'no description available')
+
+        formatted_error = 'HTTP {} ({}): {}'.format(req.status_code, error, error_description)
+
+        if req.status_code == 401:
+            raise IdentityNotValid(formatted_error)
+
+        if req.status_code == 400:
+            # this may not be common, but at the very least Google will return
+            # an invalid grant when a user is suspended
+            if error == 'invalid_grant':
+                raise IdentityNotValid(formatted_error)
+
+        if req.status_code != 200:
+            raise Exception(formatted_error)
+
+        identity.data.update(self.get_oauth_data(payload))
+        return identity.update(data=identity.data)
+
 
 class OAuth2LoginView(PipelineView):
     authorize_url = None
diff --git a/src/sentry/identity/vsts/provider.py b/src/sentry/identity/vsts/provider.py
index 54009fab4e..c615bc8cfd 100644
--- a/src/sentry/identity/vsts/provider.py
+++ b/src/sentry/identity/vsts/provider.py
@@ -8,6 +8,7 @@ from sentry import options
 from sentry.web.helpers import render_to_response
 from sentry.identity.oauth2 import OAuth2Provider, OAuth2LoginView, OAuth2CallbackView
 from sentry.pipeline import PipelineView
+from sentry.utils.http import absolute_uri
 
 
 class VSTSIdentityProvider(OAuth2Provider):
@@ -16,7 +17,6 @@ class VSTSIdentityProvider(OAuth2Provider):
 
     oauth_access_token_url = 'https://app.vssps.visualstudio.com/oauth2/token'
     oauth_authorize_url = 'https://app.vssps.visualstudio.com/oauth2/authorize'
-
     oauth_scopes = (
         'vso.code',
         'vso.project',
@@ -32,6 +32,9 @@ class VSTSIdentityProvider(OAuth2Provider):
     def get_oauth_client_secret(self):
         return options.get('vsts.client-secret')
 
+    def get_refresh_token_url(self):
+        return self.oauth_access_token_url
+
     def get_pipeline_views(self):
         return [
             OAuth2LoginView(
@@ -47,6 +50,24 @@ class VSTSIdentityProvider(OAuth2Provider):
             AccountConfigView(),
         ]
 
+    def get_refresh_token_header(self):
+        return {
+            'Content-Type': 'application/x-www-form-urlencoded',
+            'Content-Length': '1654',
+        }
+
+    def get_refresh_token_params(self, refresh_token, *args, **kwargs):
+        oauth_redirect_url = kwargs.get('redirect_url')
+        if oauth_redirect_url is None:
+            raise ValueError('VSTS requires oauth redirect url when refreshing identity')
+        return {
+            'client_assertion_type': 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',
+            'client_assertion': self.get_oauth_client_secret(),
+            'grant_type': 'refresh_token',
+            'assertion': refresh_token,
+            'redirect_uri': absolute_uri(oauth_redirect_url),
+        }
+
 
 class VSTSOAuth2CallbackView(OAuth2CallbackView):
 
diff --git a/src/sentry/integrations/client.py b/src/sentry/integrations/client.py
index ba15fccf6c..35f5cab400 100644
--- a/src/sentry/integrations/client.py
+++ b/src/sentry/integrations/client.py
@@ -8,7 +8,8 @@ from collections import OrderedDict
 
 from BeautifulSoup import BeautifulStoneSoup
 from requests.exceptions import ConnectionError, HTTPError
-
+from sentry.exceptions import InvalidIdentity
+from time import time
 from django.utils.functional import cached_property
 
 from sentry.http import build_session
@@ -236,3 +237,16 @@ class AuthApiClient(ApiClient):
         self.auth.refresh_token()
         kwargs = self.bind_auth(**kwargs)
         return ApiClient._request(self, method, path, **kwargs)
+
+
+class OAuth2RefreshMixin(object):
+
+    def check_auth(self, *args, **kwargs):
+        """
+        Checks if auth is expired and if so refreshes it
+        """
+        time_expires = self.identity.data.get('expires')
+        if time_expires is None:
+            raise InvalidIdentity('OAuth2ApiClient requires identity with specified expired time')
+        if int(time_expires) <= int(time()):
+            self.identity.get_provider().refresh_identity(self.identity, *args, **kwargs)
diff --git a/src/sentry/integrations/vsts/client.py b/src/sentry/integrations/vsts/client.py
index 01d92ca206..80e52190f1 100644
--- a/src/sentry/integrations/vsts/client.py
+++ b/src/sentry/integrations/vsts/client.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from sentry.integrations.client import ApiClient
+from sentry.integrations.client import ApiClient, OAuth2RefreshMixin
 
 UNSET = object()
 
@@ -22,20 +22,24 @@ class VstsApiPath(object):
     work_items_create = u'https://{account_name}/{project}/_apis/wit/workitems/${type}'
 
 
-class VstsApiClient(ApiClient):
+class VstsApiClient(ApiClient, OAuth2RefreshMixin):
     api_version = '4.1'
 
-    def __init__(self, access_token, *args, **kwargs):
+    def __init__(self, identity, oauth_redirect_url, *args, **kwargs):
         super(VstsApiClient, self).__init__(*args, **kwargs)
-        self.access_token = access_token
+        self.identity = identity
+        self.oauth_redirect_url = oauth_redirect_url
+        if 'access_token' not in self.identity.data:
+            raise ValueError('Vsts Identity missing access token')
 
     def request(self, method, path, data=None, params=None):
+        self.check_auth(redirect_url=self.oauth_redirect_url)
         headers = {
             'Accept': 'application/json; api-version={}'.format(self.api_version),
             'Content-Type': 'application/json-patch+json' if method == 'PATCH' else 'application/json',
             'X-HTTP-Method-Override': method,
             'X-TFS-FedAuthRedirect': 'Suppress',
-            'Authorization': 'Bearer {}'.format(self.access_token)
+            'Authorization': 'Bearer {}'.format(self.identity.data['access_token'])
         }
         return self._request(method, path, headers=headers, data=data, params=params)
 
diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index c7aaafb134..28711ff4c0 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -2,8 +2,9 @@ from __future__ import absolute_import
 from time import time
 
 from django.utils.translation import ugettext as _
-from sentry.integrations import Integration, IntegrationProvider, IntegrationMetadata
 from sentry.integrations.exceptions import ApiError
+
+from sentry.integrations import Integration, IntegrationProvider, IntegrationMetadata
 from .client import VstsApiClient
 from sentry.pipeline import NestedPipelineView
 from sentry.identity.pipeline import IdentityProviderPipeline
@@ -34,10 +35,7 @@ class VstsIntegration(Integration):
         if self.default_identity is None:
             self.default_identity = self.get_default_identity()
 
-        access_token = self.default_identity.data.get('access_token')
-        if access_token is None:
-            raise ValueError('Identity missing access token')
-        return VstsApiClient(access_token)
+        return VstsApiClient(self.default_identity, VstsIntegrationProvider.oauth_redirect_url)
 
     def get_project_config(self):
         client = self.get_client()
@@ -90,6 +88,7 @@ class VstsIntegrationProvider(IntegrationProvider):
     metadata = metadata
     domain = '.visualstudio.com'
     api_version = '4.1'
+    oauth_redirect_url = '/extensions/vsts/setup/'
     needs_default_identity = True
     integration_cls = VstsIntegration
     can_add_project = True
@@ -101,7 +100,7 @@ class VstsIntegrationProvider(IntegrationProvider):
 
     def get_pipeline_views(self):
         identity_pipeline_config = {
-            'redirect_url': absolute_uri('/extensions/vsts/setup/'),
+            'redirect_url': absolute_uri(self.oauth_redirect_url),
         }
 
         identity_pipeline_view = NestedPipelineView(
diff --git a/tests/sentry/integrations/test_client.py b/tests/sentry/integrations/test_client.py
index 81796c608d..405a164353 100644
--- a/tests/sentry/integrations/test_client.py
+++ b/tests/sentry/integrations/test_client.py
@@ -3,13 +3,17 @@ from __future__ import absolute_import
 import pytest
 import responses
 
+from time import time
 from mock import Mock
 from sentry.testutils import TestCase
 
 from sentry.integrations.exceptions import (
     ApiError, ApiHostError, ApiUnauthorized, UnsupportedResponseType
 )
-from sentry.integrations.client import ApiClient, AuthApiClient
+from sentry.identity import register
+from sentry.integrations.client import ApiClient, AuthApiClient, OAuth2RefreshMixin
+from sentry.identity.oauth2 import OAuth2Provider
+from sentry.models import Identity, IdentityProvider
 
 
 class ApiClientTest(TestCase):
@@ -112,3 +116,91 @@ class AuthApiClientTest(TestCase):
         responses.add(responses.GET, 'http://example.com', body='')
         with pytest.raises(UnsupportedResponseType):
             AuthApiClient().get('http://example.com')
+
+
+class OAuthProvider(OAuth2Provider):
+    key = 'oauth'
+    name = 'OAuth Provider'
+
+    def get_client_id(self):
+        return 'client_id'
+
+    def get_client_secret(self):
+        return 'client_secret'
+
+    def get_refresh_token_url(self):
+        return 'https://example.com'
+
+
+class OAuth2ApiClient(ApiClient, OAuth2RefreshMixin):
+    def __init__(self, identity, *args, **kwargs):
+        super(OAuth2ApiClient, self).__init__(*args, **kwargs)
+        self.identity = identity
+
+
+class OAuth2ApiClientTest(TestCase):
+    def setUp(self):
+        self.user = self.create_user()
+        self.organization = self.create_organization()
+        self.access_token = '1234567890'
+        self.identity_provider_model = IdentityProvider.objects.create(type='oauth')
+        register(OAuthProvider)
+
+    @responses.activate
+    def test_check_auth(self):
+        new_auth = {
+            'access_token': '1234567890',
+            'refresh_token': '0987654321',
+            'expires_in': 45678988239,
+        }
+        responses.add(
+            responses.POST,
+            'https://example.com',
+            json=new_auth,
+        )
+        identity = Identity.objects.create(
+            idp=self.identity_provider_model,
+            user=self.user,
+            external_id='oauth_base',
+            data={
+                'access_token': 'access_token',
+                'refresh_token': 'refresh_token',
+                'expires': int(time()) - 3600
+            }
+        )
+
+        client = OAuth2ApiClient(identity)
+        client.check_auth()
+
+        assert client.identity.data['access_token'] == new_auth['access_token']
+        assert client.identity.data['refresh_token'] == new_auth['refresh_token']
+        assert client.identity.data['expires'] > int(time())
+
+    @responses.activate
+    def test_check_auth_no_refresh(self):
+        new_auth = {
+            'access_token': '1234567890',
+            'refresh_token': '0987654321',
+            'expires_in': 45678988239,
+        }
+        old_auth = {
+            'access_token': 'access_token',
+            'refresh_token': 'refresh_token',
+            'expires': int(time()) + 3600
+        }
+        responses.add(
+            responses.POST,
+            'https://example.com',
+            json=new_auth,
+        )
+        identity = Identity.objects.create(
+            idp=self.identity_provider_model,
+            user=self.user,
+            external_id='oauth_base',
+            data=old_auth
+        )
+
+        client = OAuth2ApiClient(identity)
+        client.check_auth()
+
+        assert client.identity.data == old_auth
diff --git a/tests/sentry/integrations/vsts/test_integration.py b/tests/sentry/integrations/vsts/test_integration.py
index 941383ddca..8ba8a82ff5 100644
--- a/tests/sentry/integrations/vsts/test_integration.py
+++ b/tests/sentry/integrations/vsts/test_integration.py
@@ -1,8 +1,11 @@
 from __future__ import absolute_import
 
 import responses
-from sentry.integrations.vsts import VstsIntegration, VstsIntegrationProvider
+
+from time import time
+
 from sentry.identity.vsts import VSTSIdentityProvider
+from sentry.integrations.vsts import VstsIntegration, VstsIntegrationProvider
 from sentry.models import Integration, Identity, IdentityProvider
 from sentry.testutils import APITestCase, TestCase
 
@@ -42,11 +45,12 @@ class VstsIntegrationProviderTest(TestCase):
 
 class VstsIntegrationTest(APITestCase):
     def setUp(self):
-        user = self.create_user()
+
         organization = self.create_organization()
         project = self.create_project(organization=organization)
         self.access_token = '1234567890'
-        model = Integration.objects.create(
+        self.instance = 'instance.visualstudio.com'
+        self.model = Integration.objects.create(
             provider='integrations:vsts',
             external_id='vsts_external_id',
             name='vsts_name',
@@ -54,49 +58,79 @@ class VstsIntegrationTest(APITestCase):
                  'domain_name': 'instance.visualstudio.com'
             }
         )
-
-        identity = Identity.objects.create(
-            idp=IdentityProvider.objects.create(
-                type='vsts',
-                config={}
-            ),
-            user=user,
+        self.identity_provider = IdentityProvider.objects.create(type='vsts')
+        self.identity = Identity.objects.create(
+            idp=self.identity_provider,
+            user=self.user,
             external_id='vsts_id',
             data={
                 'access_token': self.access_token,
+                'refresh_token': 'qwertyuiop',
+                'expires': int(time()) - int(1234567890),
             }
         )
-        self.org_integration = model.add_organization(organization.id, identity.id)
-        self.project_integration = model.add_project(project.id)
-        self.integration = VstsIntegration(model, organization.id, project.id)
+        self.org_integration = self.model.add_organization(organization.id, self.identity.id)
+        self.project_integration = self.model.add_project(project.id)
+        self.integration = VstsIntegration(self.model, organization.id, project.id)
         self.projects = [
             ('eb6e4656-77fc-42a1-9181-4c6d8e9da5d1', 'ProjectB'),
             ('6ce954b1-ce1f-45d1-b94d-e6bf2464ba2c', 'ProjectA')
         ]
+        self.project_result = {
+            'value': [
+                {
+                    'id': self.projects[0][0],
+                    'name': self.projects[0][1],
 
+                },
+                {
+                    'id': self.projects[1][0],
+                    'name': self.projects[1][1],
+                }
+            ],
+            'count': 2
+        }
         responses.add(
             responses.GET,
             'https://instance.visualstudio.com/DefaultCollection/_apis/projects',
-            json={
-                'value': [
-                    {
-                        'id': self.projects[0][0],
-                        'name': self.projects[0][1],
-
-                    },
-                    {
-                        'id': self.projects[1][0],
-                        'name': self.projects[1][1],
-
-                    }
-                ],
-                'count': 2
-            },
+            json=self.project_result,
+        )
+        self.refresh_data = {
+            'access_token': 'access token for this user',
+            'token_type': 'type of token',
+            'expires_in': 123456789,
+            'refresh_token': 'new refresh token to use when the token has timed out',
+        }
+        responses.add(
+            responses.POST,
+            'https://app.vssps.visualstudio.com/oauth2/token',
+            json=self.refresh_data,
         )
 
+    def assert_identity_updated(self, new_identity, expected_data):
+        assert new_identity.data['access_token'] == expected_data['access_token']
+        assert new_identity.data['token_type'] == expected_data['token_type']
+        assert new_identity.data['refresh_token'] == expected_data['refresh_token']
+        assert new_identity.data['expires'] >= time()
+
     def test_get_client(self):
         client = self.integration.get_client()
-        assert client.access_token == self.access_token
+        assert client.identity.data['access_token'] == self.access_token
+
+    @responses.activate
+    def test_refreshes_expired_token(self):
+        result = self.integration.get_client().get_projects(self.instance)
+
+        assert len(responses.calls) == 2
+        default_identity = self.integration.default_identity
+        self.assert_identity_updated(default_identity, self.refresh_data)
+
+        identity = Identity.objects.get(id=self.identity.id)
+        self.assert_identity_updated(identity, self.refresh_data)
+
+        projects = result['value']
+        assert projects[0]['id'] == self.projects[0][0] and projects[0]['name'] == self.projects[0][1]
+        assert projects[1]['id'] == self.projects[1][0] and projects[1]['name'] == self.projects[1][1]
 
     @responses.activate
     def test_get_project_config(self):
@@ -119,10 +153,3 @@ class VstsIntegrationTest(APITestCase):
         assert project_field['disabled'] is False
         assert project_field['choices'] == self.projects
         assert project_field['initial'] == self.projects[1]
-
-    def test_get_project_config_failed_api_call(self):
-        fields = self.integration.get_project_config()
-        assert len(fields) == 1
-        project_field = fields[0]
-        assert project_field['name'] == 'default_project'
-        assert project_field['disabled'] is True
diff --git a/tests/sentry/integrations/vsts/test_provider.py b/tests/sentry/integrations/vsts/test_provider.py
index 4006c85d30..a253f2c524 100644
--- a/tests/sentry/integrations/vsts/test_provider.py
+++ b/tests/sentry/integrations/vsts/test_provider.py
@@ -3,9 +3,12 @@ from __future__ import absolute_import
 from mock import Mock
 import responses
 from django.http import HttpRequest
-from sentry.identity.vsts.provider import VSTSOAuth2CallbackView, AccountConfigView, AccountForm
+from sentry.identity.vsts.provider import VSTSOAuth2CallbackView, AccountConfigView, AccountForm, VSTSIdentityProvider
 from sentry.testutils import TestCase
 from six.moves.urllib.parse import parse_qs
+from sentry.utils.http import absolute_uri
+from sentry.models import Identity, IdentityProvider
+from time import time
 
 
 class TestVSTSOAuthCallbackView(TestCase):
@@ -120,3 +123,57 @@ class TestAccountConfigView(TestCase):
         account_form = AccountForm(self.accounts)
         assert account_form.fields['account'].choices == [
             ('1234567-89', 'sentry'), ('1234567-8910', 'sentry2')]
+
+
+class VstsIdentityProviderTest(TestCase):
+
+    def setUp(self):
+        self.identity_provider_model = IdentityProvider.objects.create(type='vsts')
+        self.identity = Identity.objects.create(
+            idp=self.identity_provider_model,
+            user=self.user,
+            external_id='vsts_id',
+            data={
+                'access_token': '123456789',
+                'token_type': 'token_type',
+                'expires': 12345678,
+                'refresh_token': 'n354678',
+            }
+
+        )
+        self.provider = VSTSIdentityProvider()
+        self.client_secret = '12345678'
+        self.provider.get_oauth_client_secret = lambda: self.client_secret
+
+    def get_refresh_token_params(self):
+        refresh_token = 'wertyui'
+        params = self.provider.get_refresh_token_params(refresh_token)
+        assert params == {
+            'client_assertion_type': 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',
+            'client_assertion': self.client_secret,
+            'grant_type': 'refresh_token',
+            'assertion': refresh_token,
+            'redirect_uri': absolute_uri(self.provider.oauth_redirect_url),
+        }
+
+    @responses.activate
+    def test_refresh_identity(self):
+        refresh_data = {
+            'access_token': 'access token for this user',
+            'token_type': 'type of token',
+            'expires': 1234567,
+            'refresh_token': 'new refresh token to use when the token has timed out',
+        }
+        responses.add(
+            responses.POST,
+            'https://app.vssps.visualstudio.com/oauth2/token',
+            json=refresh_data,
+        )
+        self.provider.refresh_identity(self.identity, redirect_url='redirect_url')
+
+        assert len(responses.calls) == 1
+
+        new_identity = Identity.objects.get(id=self.identity.id)
+        assert new_identity.data['access_token'] == refresh_data['access_token']
+        assert new_identity.data['token_type'] == refresh_data['token_type']
+        assert new_identity.data['expires'] <= int(time())
diff --git a/tests/sentry/integrations/vsts/test_repository.py b/tests/sentry/integrations/vsts/test_repository.py
index d9b1d1b557..7359dd9a91 100644
--- a/tests/sentry/integrations/vsts/test_repository.py
+++ b/tests/sentry/integrations/vsts/test_repository.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import responses
 
 from exam import fixture
+from time import time
 
 from sentry.testutils import TestCase
 from sentry.models import Identity, IdentityProvider, Integration, Repository
@@ -44,7 +45,10 @@ class VisualStudioRepositoryProviderTest(TestCase):
             user=self.user,
             external_id='123',
             data={
-                'access_token': '123456789'
+                'access_token': '123456789',
+                'expires': int(time()) + 3600,
+                'refresh_token': 'rxxx-xxxx',
+                'token_type': 'jwt-bearer',
             },
         )
         integration.add_organization(self.organization.id, default_auth.id)
