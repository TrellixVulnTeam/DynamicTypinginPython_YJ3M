commit 1b16dc8933ae450642da60cb7a11cdda7c947b75
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Mar 8 14:04:34 2016 +0100

    Switched short IDs over to base32

diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index b1ab03cc47..8a284c3940 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -31,7 +31,7 @@ from sentry.db.models import (
 )
 from sentry.utils.http import absolute_uri
 from sentry.utils.strings import truncatechars, strip
-from sentry.utils.numbers import base36_encode, base36_decode
+from sentry.utils.numbers import base32_encode, base32_decode
 
 
 _short_id_re = re.compile(r'^(.*?)(?:[\s_-])([A-Za-z0-9]+)$')
@@ -63,7 +63,7 @@ class GroupManager(BaseManager):
         return Group.objects.get(
             project__organization=org,
             project__callsign=callsign.upper(),
-            short_id=base36_decode(id),
+            short_id=base32_decode(id),
         )
 
     def from_kwargs(self, project, **kwargs):
@@ -190,7 +190,7 @@ class Group(Model):
            self.short_id is not None:
             return '%s-%s' % (
                 self.project.callsign,
-                base36_encode(self.short_id),
+                base32_encode(self.short_id),
             )
 
     @property
diff --git a/src/sentry/utils/numbers.py b/src/sentry/utils/numbers.py
index 51c3fb77e4..446f651d6a 100644
--- a/src/sentry/utils/numbers.py
+++ b/src/sentry/utils/numbers.py
@@ -1,10 +1,12 @@
-ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
+BASE36_ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
+BASE32_ALPHABET = '0123456789ABCDEFGHJKMNPQRSTVWXYZ'
 
 
-def base36_encode(number):
+def _encode(number, alphabet):
     if number == 0:
-        return '0'
+        return alphabet[0]
 
+    base = len(alphabet)
     rv = []
     inverse = False
     if number < 0:
@@ -12,8 +14,8 @@ def base36_encode(number):
         inverse = True
 
     while number != 0:
-        number, i = divmod(number, 36)
-        rv.append(ALPHABET[i])
+        number, i = divmod(number, base)
+        rv.append(alphabet[i])
 
     if inverse:
         rv.append('-')
@@ -22,5 +24,39 @@ def base36_encode(number):
     return ''.join(rv)
 
 
+def _decode(number, alphabet):
+    rv = 0
+    inverse = False
+
+    if number[:1] == '-':
+        inverse = True
+        number = number[:1]
+
+    base = len(alphabet)
+    for symbol in number:
+        rv = rv * base + alphabet.index(symbol)
+
+    if inverse:
+        rv = rv * -1
+
+    return rv
+
+
+def base32_encode(number):
+    return _encode(number, BASE32_ALPHABET)
+
+
+def base32_decode(number):
+    number = number.upper() \
+        .replace('O', '0') \
+        .replace('I', '1') \
+        .replace('L', '1')
+    return _decode(number, BASE32_ALPHABET)
+
+
+def base36_encode(number):
+    return _encode(number, BASE36_ALPHABET)
+
+
 def base36_decode(str):
     return int(str, 36)
diff --git a/tests/sentry/utils/test_numbers.py b/tests/sentry/utils/test_numbers.py
index d4a44bdf07..ed7a91d015 100644
--- a/tests/sentry/utils/test_numbers.py
+++ b/tests/sentry/utils/test_numbers.py
@@ -1,4 +1,5 @@
-from sentry.utils.numbers import base36_encode, base36_decode
+from sentry.utils.numbers import base36_encode, base36_decode, \
+    base32_encode, base32_decode
 
 
 def test_base36():
@@ -18,3 +19,22 @@ def test_base36():
     ]
 
     assert [base36_decode(base36_encode(x)) for x in xrange(128)] == range(128)
+
+
+def test_base32():
+    assert [base32_encode(x) for x in xrange(128)] == [
+        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C',
+        'D', 'E', 'F', 'G', 'H', 'J', 'K', 'M', 'N', 'P', 'Q', 'R', 'S',
+        'T', 'V', 'W', 'X', 'Y', 'Z', '10', '11', '12', '13', '14', '15',
+        '16', '17', '18', '19', '1A', '1B', '1C', '1D', '1E', '1F', '1G',
+        '1H', '1J', '1K', '1M', '1N', '1P', '1Q', '1R', '1S', '1T', '1V',
+        '1W', '1X', '1Y', '1Z', '20', '21', '22', '23', '24', '25', '26',
+        '27', '28', '29', '2A', '2B', '2C', '2D', '2E', '2F', '2G', '2H',
+        '2J', '2K', '2M', '2N', '2P', '2Q', '2R', '2S', '2T', '2V', '2W',
+        '2X', '2Y', '2Z', '30', '31', '32', '33', '34', '35', '36', '37',
+        '38', '39', '3A', '3B', '3C', '3D', '3E', '3F', '3G', '3H', '3J',
+        '3K', '3M', '3N', '3P', '3Q', '3R', '3S', '3T', '3V', '3W', '3X',
+        '3Y', '3Z'
+    ]
+
+    assert [base32_decode(base32_encode(x)) for x in xrange(128)] == range(128)
