commit 0fd9131fb3fdb558562a2f7d9196109a02a5fc12
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Sep 21 12:53:46 2018 -0700

    feat: Transition support for buffer serialization (revert after release)

diff --git a/src/sentry/buffer/redis.py b/src/sentry/buffer/redis.py
index de2c99f10b..4f26c910c1 100644
--- a/src/sentry/buffer/redis.py
+++ b/src/sentry/buffer/redis.py
@@ -172,7 +172,10 @@ class RedisBuffer(Buffer):
 
         pipe = conn.pipeline()
         pipe.hsetnx(key, 'm', '%s.%s' % (model.__module__, model.__name__))
-        pipe.hsetnx(key, 'f', json.dumps(self._dump_values(filters)))
+        # TODO(dcramer): once this goes live in production, we can kill the pickle path
+        # (this is to ensure a zero downtime deploy where we can transition event processing)
+        pipe.hsetnx(key, 'f', pickle.dumps(filters))
+        # pipe.hsetnx(key, 'f', json.dumps(self._dump_values(filters)))
         for column, amount in six.iteritems(columns):
             pipe.hincrby(key, 'i+' + column, amount)
 
@@ -181,7 +184,10 @@ class RedisBuffer(Buffer):
             # hook here
             # e.g. "update score if last_seen or times_seen is changed"
             for column, value in six.iteritems(extra):
-                pipe.hset(key, 'e+' + column, json.dumps(self._dump_value(value)))
+                # TODO(dcramer): once this goes live in production, we can kill the pickle path
+                # (this is to ensure a zero downtime deploy where we can transition event processing)
+                pipe.hset(key, 'e+' + column, pickle.dumps(value))
+                # pipe.hset(key, 'e+' + column, json.dumps(self._dump_value(value)))
         pipe.expire(key, self.key_expire)
         pipe.zadd(pending_key, time(), key)
         pipe.execute()
diff --git a/tests/sentry/buffer/redis/tests.py b/tests/sentry/buffer/redis/tests.py
index bb19e25340..8ec674bf7a 100644
--- a/tests/sentry/buffer/redis/tests.py
+++ b/tests/sentry/buffer/redis/tests.py
@@ -2,6 +2,7 @@
 
 from __future__ import absolute_import
 
+import pytest
 import mock
 
 from datetime import datetime
@@ -92,6 +93,8 @@ class RedisBufferTest(TestCase):
         self.buf.process('foo')
         process.assert_called_once_with(Group, columns, filters, extra)
 
+    # this test should be passing once we no longer serialize using pickle
+    @pytest.mark.xfail
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_key', mock.Mock(return_value='foo'))
     @mock.patch('sentry.buffer.redis.process_incr', mock.Mock())
     def test_incr_saves_to_redis(self):
