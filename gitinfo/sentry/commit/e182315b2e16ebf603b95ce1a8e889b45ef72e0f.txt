commit e182315b2e16ebf603b95ce1a8e889b45ef72e0f
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Mar 13 09:55:40 2019 -0700

    feat(settings): Move settings under `OrganizationDetails` tree (#12030)
    
    This moves the "settings" route under OrganizationDetails tree. This
    solves the unnecessary layout change when you go from main application into
    settings (sidebar disappears and we have to refetch organization details
    again). Account settings should be able to have org in context as well by
    using the lastOrganization saved in user session. The account settings
    view needs to be able to support no organization in the case of a new user
    who has been invited to join an org for the first time and needs to setup
    2fa before being able to join.

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 50b045c7a1..2a7ad311ab 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -625,66 +625,6 @@ function routes() {
 
       <Redirect from="/account/" to="/settings/account/details/" />
 
-      <Route path="/settings/" name="Settings" component={SettingsWrapper}>
-        <IndexRoute
-          getComponent={(loc, cb) =>
-            import(/* webpackChunkName: "SettingsIndex" */ './views/settings/settingsIndex').then(
-              lazyLoad(cb)
-            )}
-        />
-
-        <Route
-          path="account/"
-          name="Account"
-          getComponent={(loc, cb) =>
-            import(/* webpackChunkName: "AccountSettingsLayout" */ './views/settings/account/accountSettingsLayout').then(
-              lazyLoad(cb)
-            )}
-        >
-          {accountSettingsRoutes}
-        </Route>
-
-        <Route
-          name="Organization"
-          path=":orgId/"
-          component={errorHandler(OrganizationContext)}
-        >
-          <Route
-            getComponent={(loc, cb) =>
-              import(/* webpackChunkName: "OrganizationSettingsLayout" */ './views/settings/organization/organizationSettingsLayout').then(
-                lazyLoad(cb)
-              )}
-          >
-            {hooksOrgRoutes}
-            {orgSettingsRoutes}
-          </Route>
-
-          <Route
-            name="Project"
-            path="projects/:projectId/"
-            getComponent={(loc, cb) =>
-              import(/* webpackChunkName: "ProjectSettingsLayout" */ './views/settings/project/projectSettingsLayout').then(
-                lazyLoad(cb)
-              )}
-          >
-            <Route component={errorHandler(SettingsProjectProvider)}>
-              {projectSettingsRoutes}
-            </Route>
-          </Route>
-
-          <Redirect from=":projectId/" to="projects/:projectId/" />
-          <Redirect from=":projectId/alerts/" to="projects/:projectId/alerts/" />
-          <Redirect
-            from=":projectId/alerts/rules/"
-            to="projects/:projectId/alerts/rules/"
-          />
-          <Redirect
-            from=":projectId/alerts/rules/:ruleId/"
-            to="projects/:projectId/alerts/rules/:ruleId/"
-          />
-        </Route>
-      </Route>
-
       <Route
         path="/manage/"
         componentPromise={() =>
@@ -768,6 +708,64 @@ function routes() {
         </Route>
       </Route>
 
+      <Route component={errorHandler(OrganizationDetails)}>
+        <Route path="/settings/" name="Settings" component={SettingsWrapper}>
+          <IndexRoute
+            getComponent={(loc, cb) =>
+              import(/* webpackChunkName: "SettingsIndex" */ './views/settings/settingsIndex').then(
+                lazyLoad(cb)
+              )}
+          />
+
+          <Route
+            path="account/"
+            name="Account"
+            getComponent={(loc, cb) =>
+              import(/* webpackChunkName: "AccountSettingsLayout" */ './views/settings/account/accountSettingsLayout').then(
+                lazyLoad(cb)
+              )}
+          >
+            {accountSettingsRoutes}
+          </Route>
+
+          <Route name="Organization" path=":orgId/">
+            <Route
+              getComponent={(loc, cb) =>
+                import(/* webpackChunkName: "OrganizationSettingsLayout" */ './views/settings/organization/organizationSettingsLayout').then(
+                  lazyLoad(cb)
+                )}
+            >
+              {hooksOrgRoutes}
+              {orgSettingsRoutes}
+            </Route>
+
+            <Route
+              name="Project"
+              path="projects/:projectId/"
+              getComponent={(loc, cb) =>
+                import(/* webpackChunkName: "ProjectSettingsLayout" */ './views/settings/project/projectSettingsLayout').then(
+                  lazyLoad(cb)
+                )}
+            >
+              <Route component={errorHandler(SettingsProjectProvider)}>
+                {projectSettingsRoutes}
+              </Route>
+            </Route>
+
+            <Redirect from=":projectId/" to="projects/:projectId/" />
+            <Redirect from=":projectId/alerts/" to="projects/:projectId/alerts/" />
+            <Redirect
+              from=":projectId/alerts/rules/"
+              to="projects/:projectId/alerts/rules/"
+            />
+            <Redirect
+              from=":projectId/alerts/rules/:ruleId/"
+              to="projects/:projectId/alerts/rules/:ruleId/"
+            />
+          </Route>
+        </Route>
+      </Route>
+
       <Route path="/:orgId/" component={errorHandler(OrganizationDetails)}>
         <Route component={errorHandler(OrganizationRoot)}>
           <IndexRoute component={errorHandler(OrganizationDashboard)} />
diff --git a/src/sentry/static/sentry/app/stores/organizationsStore.jsx b/src/sentry/static/sentry/app/stores/organizationsStore.jsx
index dc710d0643..005aa23d4e 100644
--- a/src/sentry/static/sentry/app/stores/organizationsStore.jsx
+++ b/src/sentry/static/sentry/app/stores/organizationsStore.jsx
@@ -12,6 +12,7 @@ const OrganizationsStore = Reflux.createStore({
 
   init() {
     this.items = [];
+    this.loaded = false;
   },
 
   onUpdate(org) {
@@ -59,6 +60,7 @@ const OrganizationsStore = Reflux.createStore({
 
   load(items) {
     this.items = items;
+    this.loaded = true;
     this.trigger(items);
   },
 });
diff --git a/src/sentry/static/sentry/app/utils/theme.jsx b/src/sentry/static/sentry/app/utils/theme.jsx
index 10d5999277..c498c999f8 100644
--- a/src/sentry/static/sentry/app/utils/theme.jsx
+++ b/src/sentry/static/sentry/app/utils/theme.jsx
@@ -64,23 +64,29 @@ const theme = {
 
   background: '#fff',
 
+  // Try to keep these ordered plz
   zIndex: {
-    orgAndUserMenu: 1004,
+    header: 1000,
+    dropdown: 1001,
     globalSelectionHeader: 1002,
     sidebar: 1003,
-    dropdown: 1001,
-    header: 1000,
-    modal: 10000,
-    toast: 10001,
-    dropdownAutocomplete: {
-      // needs to be above menu
-      actor: 1008,
+    orgAndUserMenu: 1004,
 
+    dropdownAutocomplete: {
       // needs to be below actor but above other page elements (e.g. pagination)
       // (e.g. Issue Details "seen" dots on chart is 2)
       // stream header is 1000
       menu: 1007,
+
+      // needs to be above menu
+      actor: 1008,
     },
+
+    // Sentry user feedback modal
+    sentryErrorEmbed: 1009,
+
+    modal: 10000,
+    toast: 10001,
   },
 
   alert: {
diff --git a/src/sentry/static/sentry/app/utils/withOrganizations.jsx b/src/sentry/static/sentry/app/utils/withOrganizations.jsx
index c60d3d169b..e4f6c21028 100644
--- a/src/sentry/static/sentry/app/utils/withOrganizations.jsx
+++ b/src/sentry/static/sentry/app/utils/withOrganizations.jsx
@@ -12,7 +12,11 @@ const withOrganizations = WrappedComponent =>
 
     render() {
       return (
-        <WrappedComponent organizations={this.state.organizations} {...this.props} />
+        <WrappedComponent
+          organizationsLoading={!OrganizationsStore.loaded}
+          organizations={this.state.organizations}
+          {...this.props}
+        />
       );
     },
   });
diff --git a/src/sentry/static/sentry/app/views/organizationContext.jsx b/src/sentry/static/sentry/app/views/organizationContext.jsx
index 12169d5269..28e31bcbcd 100644
--- a/src/sentry/static/sentry/app/views/organizationContext.jsx
+++ b/src/sentry/static/sentry/app/views/organizationContext.jsx
@@ -5,24 +5,25 @@ import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 
+import {fetchOrganizationEnvironments} from 'app/actionCreators/environments';
 import {openSudo} from 'app/actionCreators/modal';
 import {setActiveOrganization} from 'app/actionCreators/organizations';
 import {t} from 'app/locale';
 import Alert from 'app/components/alert';
 import ApiMixin from 'app/mixins/apiMixin';
 import ConfigStore from 'app/stores/configStore';
+import GlobalSelectionStore from 'app/stores/globalSelectionStore';
 import HookStore from 'app/stores/hookStore';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
+import OrganizationEnvironmentsStore from 'app/stores/organizationEnvironmentsStore';
 import ProjectActions from 'app/actions/projectActions';
 import ProjectsStore from 'app/stores/projectsStore';
 import SentryTypes from 'app/sentryTypes';
 import Sidebar from 'app/components/sidebar';
 import TeamStore from 'app/stores/teamStore';
 import space from 'app/styles/space';
-import GlobalSelectionStore from 'app/stores/globalSelectionStore';
-import OrganizationEnvironmentsStore from 'app/stores/organizationEnvironmentsStore';
-import {fetchOrganizationEnvironments} from 'app/actionCreators/environments';
+import withOrganizations from 'app/utils/withOrganizations';
 
 const ERROR_TYPES = {
   ORG_NOT_FOUND: 'ORG_NOT_FOUND',
@@ -33,6 +34,9 @@ const OrganizationContext = createReactClass({
 
   propTypes: {
     includeSidebar: PropTypes.bool,
+    useLastOrganization: PropTypes.bool,
+    organizationsLoading: PropTypes.bool,
+    organizations: PropTypes.arrayOf(SentryTypes.Organization),
   },
 
   childContextTypes: {
@@ -61,9 +65,15 @@ const OrganizationContext = createReactClass({
   },
 
   componentWillReceiveProps(nextProps) {
+    const hasOrgIdAndChanged =
+      nextProps.params.orgId &&
+      this.props.params.orgId &&
+      nextProps.params.orgId !== this.props.params.orgId;
+
     if (
-      nextProps.params.orgId !== this.props.params.orgId ||
-      nextProps.location.state === 'refresh'
+      hasOrgIdAndChanged ||
+      nextProps.location.state === 'refresh' ||
+      this.props.organizations !== nextProps.organizations
     ) {
       this.remountComponent();
     }
@@ -84,10 +94,26 @@ const OrganizationContext = createReactClass({
     this.remountComponent();
   },
 
+  getOrganizationSlug() {
+    return (
+      this.props.params.orgId ||
+      (this.props.useLastOrganization &&
+        (ConfigStore.get('lastOrganization') ||
+          (this.props.organizations &&
+            this.props.organizations.length &&
+            this.props.organizations[0].slug)))
+    );
+  },
+
   fetchData() {
+    if (!this.getOrganizationSlug()) {
+      this.setState({loading: this.props.organizationsLoading});
+      return;
+    }
+
     const promises = [
       this.api.requestPromise(this.getOrganizationDetailsEndpoint()),
-      fetchOrganizationEnvironments(this.api, this.props.params.orgId),
+      fetchOrganizationEnvironments(this.api, this.getOrganizationSlug()),
     ];
 
     Promise.all(promises)
@@ -139,7 +165,7 @@ const OrganizationContext = createReactClass({
   },
 
   getOrganizationDetailsEndpoint() {
-    return '/organizations/' + this.props.params.orgId + '/';
+    return `/organizations/${this.getOrganizationSlug()}/`;
   },
 
   getTitle() {
@@ -199,7 +225,8 @@ const OrganizationContext = createReactClass({
   },
 });
 
-export default OrganizationContext;
+export default withOrganizations(OrganizationContext);
+export {OrganizationContext};
 
 const ErrorWrapper = styled('div')`
   padding: ${space(3)};
diff --git a/src/sentry/static/sentry/app/views/organizationDetails.jsx b/src/sentry/static/sentry/app/views/organizationDetails.jsx
index 61243f1ea3..c7e048e71d 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails.jsx
@@ -1,19 +1,19 @@
 import React, {Component} from 'react';
-import PropTypes from 'prop-types';
 
+import {Client} from 'app/api';
+import {t, tct} from 'app/locale';
 import AlertActions from 'app/actions/alertActions';
-import ErrorBoundary from 'app/components/errorBoundary';
 import Button from 'app/components/button';
-import {Client} from 'app/api';
-import OrganizationContext from 'app/views/organizationContext';
-import NarrowLayout from 'app/components/narrowLayout';
+import ErrorBoundary from 'app/components/errorBoundary';
 import Footer from 'app/components/footer';
 import InstallPromptBanner from 'app/components/installPromptBanner';
-import {t, tct} from 'app/locale';
+import NarrowLayout from 'app/components/narrowLayout';
+import OrganizationContext from 'app/views/organizationContext';
+import SentryTypes from 'app/sentryTypes';
 
 class DeletionInProgress extends Component {
   static propTypes = {
-    organization: PropTypes.object.isRequired,
+    organization: SentryTypes.Organization.isRequired,
   };
 
   render() {
@@ -35,7 +35,7 @@ class DeletionInProgress extends Component {
 
 class DeletionPending extends Component {
   static propTypes = {
-    organization: PropTypes.object.isRequired,
+    organization: SentryTypes.Organization.isRequired,
   };
 
   constructor(...args) {
@@ -121,13 +121,13 @@ class DeletionPending extends Component {
 
 class OrganizationDetailsBody extends Component {
   static contextTypes = {
-    organization: PropTypes.object.isRequired,
+    organization: SentryTypes.Organization,
   };
 
   render() {
     const {organization} = this.context;
 
-    if (organization.status)
+    if (organization && organization.status)
       if (organization.status.id === 'pending_deletion') {
         return <DeletionPending organization={organization} />;
       } else if (organization.status.id === 'deletion_in_progress') {
@@ -135,7 +135,7 @@ class OrganizationDetailsBody extends Component {
       }
     return (
       <React.Fragment>
-        <InstallPromptBanner organization={organization} />
+        {organization && <InstallPromptBanner organization={organization} />}
         <ErrorBoundary>{this.props.children}</ErrorBoundary>
         <Footer />
       </React.Fragment>
@@ -146,7 +146,7 @@ class OrganizationDetailsBody extends Component {
 export default class OrganizationDetails extends Component {
   render() {
     return (
-      <OrganizationContext includeSidebar {...this.props}>
+      <OrganizationContext includeSidebar useLastOrganization {...this.props}>
         <OrganizationDetailsBody>{this.props.children}</OrganizationDetailsBody>
       </OrganizationContext>
     );
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSettingsLayout.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSettingsLayout.jsx
index 7282438770..314f7b0604 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSettingsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSettingsLayout.jsx
@@ -11,6 +11,16 @@ class AccountSettingsLayout extends React.Component {
     organization: SentryTypes.Organization,
   };
 
+  static childContextTypes = {
+    organization: SentryTypes.Organization,
+  };
+
+  getChildContext() {
+    return {
+      organization: this.props.organization,
+    };
+  }
+
   componentDidUpdate(prevProps) {
     const {organization} = this.props;
     if (prevProps.organization === organization) return;
@@ -28,14 +38,12 @@ class AccountSettingsLayout extends React.Component {
 
   render() {
     return (
-      <div className="app">
-        <SettingsLayout
-          {...this.props}
-          renderNavigation={() => <AccountSettingsNavigation {...this.props} />}
-        >
-          {this.props.children}
-        </SettingsLayout>
-      </div>
+      <SettingsLayout
+        {...this.props}
+        renderNavigation={() => <AccountSettingsNavigation {...this.props} />}
+      >
+        {this.props.children}
+      </SettingsLayout>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBackButton.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBackButton.jsx
index 670e0c8305..025ce05e33 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBackButton.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBackButton.jsx
@@ -1,16 +1,33 @@
 import {Link} from 'react-router';
 import React from 'react';
-import PropTypes from 'prop-types';
 import Cookies from 'js-cookie';
 import styled from 'react-emotion';
 
-import {t, tct} from 'app/locale';
+import {t} from 'app/locale';
 import InlineSvg from 'app/components/inlineSvg';
-import SentryTypes from 'app/sentryTypes';
-import replaceRouterParams from 'app/utils/replaceRouterParams';
-import withLatestContext from 'app/utils/withLatestContext';
 import space from 'app/styles/space';
 
+class SettingsBackButton extends React.Component {
+  render() {
+    // if the user needs to setup 2fa as part of the org invite flow,
+    // send them back to accept the invite
+    const pendingInvite = Cookies.get('pending-invite');
+
+    if (!pendingInvite) {
+      return null;
+    }
+
+    return (
+      <BackButtonWrapper href={pendingInvite}>
+        <Icon src="icon-arrow-left" size="10px" />
+        {t('Back to Invite')}
+      </BackButtonWrapper>
+    );
+  }
+}
+
+export default SettingsBackButton;
+
 const BackButtonWrapper = styled(Link)`
   display: flex;
   align-items: center;
@@ -36,68 +53,3 @@ const Icon = styled(InlineSvg)`
     display: block;
   }
 `;
-
-class BackButton extends React.Component {
-  static propTypes = {
-    organization: SentryTypes.Organization,
-    lastRoute: PropTypes.string,
-  };
-
-  static contextTypes = {
-    lastAppContext: PropTypes.oneOf(['project', 'organization']),
-  };
-
-  render() {
-    const {params, organization, lastRoute} = this.props;
-    const {lastAppContext} = this.context;
-    // lastAppContext is set when Settings is initial loaded,
-    // so if that is truthy, determine if we have project context at that point
-    // otherwise use what we have in latest context (e.g. if you navigated to settings directly)
-    const shouldGoBackToProject = lastRoute && lastAppContext === 'project';
-
-    if (organization && organization.features.includes('sentry10')) {
-      return null;
-    }
-
-    const projectId = shouldGoBackToProject || !lastAppContext ? params.projectId : null;
-    const orgId = params.orgId || (organization && organization.slug);
-    const url = projectId ? '/:orgId/:projectId/' : '/:orgId/';
-    const label =
-      shouldGoBackToProject || (!lastAppContext && projectId)
-        ? t('Project')
-        : t('Organization');
-
-    // if the user needs to setup 2fa as part of the org invite flow,
-    // send them back to accept the invite
-    const pendingInvite = Cookies.get('pending-invite');
-
-    if (pendingInvite) {
-      return (
-        <BackButtonWrapper href={pendingInvite}>
-          <Icon src="icon-arrow-left" size="10px" />
-          {t('Back to Invite')}
-        </BackButtonWrapper>
-      );
-    }
-
-    return (
-      <BackButtonWrapper
-        to={
-          lastRoute ||
-          replaceRouterParams(url, {
-            orgId,
-            projectId,
-          })
-        }
-      >
-        <Icon src="icon-arrow-left" size="10px" />
-        {tct('Back to [label]', {label})}
-      </BackButtonWrapper>
-    );
-  }
-}
-
-const SettingsBackButton = withLatestContext(BackButton);
-
-export {BackButton};
-export default SettingsBackButton;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx
index e209da4133..2731bc792b 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx
@@ -59,7 +59,7 @@ class SettingsBreadcrumb extends React.Component {
             ? Menu
             : () => (
                 <Crumb route={route} isLast={isLast}>
-                  <TextLink to={recreateRoute(route, {routes, params})}>
+                  <TextLink to={recreateRoute(route, {routes, params, stepBack: -1})}>
                     {pathTitle || route.name}{' '}
                   </TextLink>
                   <Divider isLast={isLast} />
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsLayout.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsLayout.jsx
index 3cc8680693..efbb4ca991 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsLayout.jsx
@@ -3,8 +3,6 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
-import Sidebar from 'app/components/sidebar';
-import Footer from 'app/components/footer';
 import space from 'app/styles/space';
 
 import SettingsBackButton from './settingsBackButton';
@@ -28,7 +26,6 @@ class SettingsLayout extends React.Component {
     const childRoute = childProps.route || route || {};
     return (
       <React.Fragment>
-        <Sidebar />
         <SettingsColumn>
           <SettingsHeader>
             <Flex align="center" width={1}>
@@ -46,13 +43,12 @@ class SettingsLayout extends React.Component {
           <MaxWidthContainer>
             {typeof renderNavigation === 'function' && (
               <SidebarWrapper>
-                <SettingsBackButton params={params} />
+                <SettingsBackButton />
                 <SidebarWrapperContent>{renderNavigation()}</SidebarWrapperContent>
               </SidebarWrapper>
             )}
             <Content>{children}</Content>
           </MaxWidthContainer>
-          <Footer />
         </SettingsColumn>
       </React.Fragment>
     );
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsWrapper.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsWrapper.jsx
index cc3b61bfad..a90447f051 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsWrapper.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsWrapper.jsx
@@ -6,14 +6,6 @@ import ScrollToTop from 'app/views/settings/components/scrollToTop';
 import SentryTypes from 'app/sentryTypes';
 import withLatestContext from 'app/utils/withLatestContext';
 
-const StyledSettingsWrapper = styled.div`
-  font-family: 'Rubik', sans-serif;
-  font-size: 16px;
-  color: ${p => p.theme.gray5};
-  margin: 0 auto;
-  line-height: 1;
-`;
-
 class SettingsWrapper extends React.Component {
   static propTypes = {
     project: SentryTypes.Project,
@@ -39,14 +31,6 @@ class SettingsWrapper extends React.Component {
     };
   }
 
-  componentDidMount() {
-    document.body.classList.add('new-settings');
-  }
-
-  componentWillUnmount() {
-    document.body.classList.remove('new-settings');
-  }
-
   render() {
     return (
       <StyledSettingsWrapper>
@@ -57,3 +41,20 @@ class SettingsWrapper extends React.Component {
 }
 
 export default withLatestContext(SettingsWrapper);
+
+const StyledSettingsWrapper = styled.div`
+  display: flex;
+  flex: 1;
+  font-family: 'Rubik', sans-serif;
+  font-size: 16px;
+  color: ${p => p.theme.gray5};
+  margin-bottom: -20px; /* to account for footer margin top */
+  line-height: 1;
+
+  .messages-container {
+    margin: 0;
+  }
+  .sentry-error-embed-wrapper {
+    z-index: ${p => p.theme.zIndex.sentryErrorEmbed};
+  }
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/organizationTeams.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/organizationTeams.jsx
index c51258cfed..80abc38877 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/organizationTeams.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/organizationTeams.jsx
@@ -60,7 +60,7 @@ class OrganizationTeams extends React.Component {
     );
 
     const teamRoute = routes.find(({path}) => path === 'teams/');
-    const urlPrefix = recreateRoute(teamRoute, {routes, params, stepBack: -1});
+    const urlPrefix = recreateRoute(teamRoute, {routes, params, stepBack: -2});
 
     const activeTeamIds = new Set(activeTeams.map(team => team.id));
     const otherTeams = allTeams.filter(team => !activeTeamIds.has(team.id));
diff --git a/src/sentry/static/sentry/less/layout.less b/src/sentry/static/sentry/less/layout.less
index c3a8bf3f28..3d317fcce5 100644
--- a/src/sentry/static/sentry/less/layout.less
+++ b/src/sentry/static/sentry/less/layout.less
@@ -17,17 +17,6 @@ body {
     z-index: 1005;
   }
 
-  &.new-settings {
-    overflow-y: scroll;
-    background-image: none;
-    background-color: #fcfcfc;
-    padding: 0;
-
-    .messages-container {
-      margin: 0;
-    }
-  }
-
   &.org-dashboard {
     background-color: #fcfcfc;
   }
diff --git a/src/sentry/static/sentry/less/variables.less b/src/sentry/static/sentry/less/variables.less
index 734d6524d4..7034371b14 100644
--- a/src/sentry/static/sentry/less/variables.less
+++ b/src/sentry/static/sentry/less/variables.less
@@ -39,10 +39,6 @@
 @sidebar-panel-width: 320px;
 @sidebar-mobile-height: 54px;
 
-// deleteme: #NEW-SETTINGS
-@sidebar-width: 60px;
-@sidebar-panel-header-height: 62px;
-
 // Tables
 //
 // Overrides Bootstrap defaults
diff --git a/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap b/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
index 777714609e..2744f2119d 100644
--- a/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
@@ -2,7 +2,6 @@
 
 exports[`SettingsLayout renders 1`] = `
 <Fragment>
-  <withOrganizations(withLatestContext(withRouter(SidebarContainer))) />
   <SettingsColumn>
     <SettingsHeader>
       <Flex
@@ -25,7 +24,6 @@ exports[`SettingsLayout renders 1`] = `
     <MaxWidthContainer>
       <Content />
     </MaxWidthContainer>
-    <Footer />
   </SettingsColumn>
 </Fragment>
 `;
diff --git a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
index 41a6592c9d..bd2d3b5673 100644
--- a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
@@ -498,6 +498,7 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
                   <SwitchOrganization
                     canCreateOrganization={false}
                     organizations={Array []}
+                    organizationsLoading={true}
                   >
                     <DropdownMenu
                       closeOnEscape={true}
diff --git a/tests/js/spec/views/organizationContext.spec.jsx b/tests/js/spec/views/organizationContext.spec.jsx
index 34055e810e..3b18b9cf7f 100644
--- a/tests/js/spec/views/organizationContext.spec.jsx
+++ b/tests/js/spec/views/organizationContext.spec.jsx
@@ -3,7 +3,7 @@ import React from 'react';
 import {mount} from 'enzyme';
 import {openSudo} from 'app/actionCreators/modal';
 import ConfigStore from 'app/stores/configStore';
-import OrganizationContext from 'app/views/organizationContext';
+import {OrganizationContext} from 'app/views/organizationContext';
 import ProjectsStore from 'app/stores/projectsStore';
 import TeamStore from 'app/stores/teamStore';
 import GlobalSelectionStore from 'app/stores/globalSelectionStore';
@@ -24,7 +24,12 @@ describe('OrganizationContext', function() {
   let getOrgMock;
   let getEnvironmentsMock;
 
-  beforeAll(function() {});
+  const createWrapper = props =>
+    mount(
+      <OrganizationContext params={{orgId: 'org-slug'}} location={{query: {}}} {...props}>
+        <div />
+      </OrganizationContext>
+    );
 
   beforeEach(function() {
     MockApiClient.clearMockResponses();
@@ -39,20 +44,17 @@ describe('OrganizationContext', function() {
     jest.spyOn(TeamStore, 'loadInitialData');
     jest.spyOn(ProjectsStore, 'loadInitialData');
     jest.spyOn(GlobalSelectionStore, 'loadInitialData');
-
-    wrapper = mount(
-      <OrganizationContext params={{orgId: 'org-slug'}} location={{query: {}}}>
-        {<div />}
-      </OrganizationContext>
-    );
   });
 
   afterEach(function() {
     TeamStore.loadInitialData.mockRestore();
     ProjectsStore.loadInitialData.mockRestore();
+    ConfigStore.get.mockRestore();
   });
 
-  it('renders and fetches org', function() {
+  it('renders and fetches org', async function() {
+    wrapper = createWrapper();
+    await tick();
     expect(getOrgMock).toHaveBeenCalledWith(
       '/organizations/org-slug/',
       expect.anything()
@@ -67,7 +69,11 @@ describe('OrganizationContext', function() {
     expect(GlobalSelectionStore.loadInitialData).toHaveBeenCalledWith(org, {});
   });
 
-  it('resets TeamStore when unmounting', function() {
+  it('resets TeamStore when unmounting', async function() {
+    wrapper = createWrapper();
+    // This `tick` is so that we are not in the middle of a fetch data call when unmounting
+    // Otherwise will throw "setState on unmounted component" react warnings
+    await tick();
     jest.spyOn(TeamStore, 'reset');
     wrapper.unmount();
     expect(TeamStore.reset).toHaveBeenCalled();
@@ -75,6 +81,7 @@ describe('OrganizationContext', function() {
   });
 
   it('fetches new org when router params change', function() {
+    wrapper = createWrapper();
     const mock = MockApiClient.addMockResponse({
       url: '/organizations/new-slug/',
       body: org,
@@ -86,6 +93,7 @@ describe('OrganizationContext', function() {
   });
 
   it('fetches new org when router location state is `refresh`', function() {
+    wrapper = createWrapper();
     getOrgMock.mockReset();
     wrapper.setProps({location: {state: 'refresh'}});
     wrapper.update();
@@ -102,11 +110,7 @@ describe('OrganizationContext', function() {
       url: '/organizations/org-slug/',
       statusCode: 403,
     });
-    wrapper = mount(
-      <OrganizationContext params={{orgId: 'org-slug'}} location={{}}>
-        {<div />}
-      </OrganizationContext>
-    );
+    wrapper = createWrapper();
 
     await tick();
     wrapper.update();
@@ -122,15 +126,55 @@ describe('OrganizationContext', function() {
       url: '/organizations/org-slug/',
       statusCode: 403,
     });
-    wrapper = mount(
-      <OrganizationContext params={{orgId: 'org-slug'}} location={{}}>
-        {<div />}
-      </OrganizationContext>
-    );
+    wrapper = createWrapper();
 
     await tick();
     wrapper.update();
 
     expect(openSudo).toHaveBeenCalled();
   });
+
+  it('uses last organization from ConfigStore', function() {
+    getOrgMock = MockApiClient.addMockResponse({
+      url: '/organizations/lastOrganization/',
+    });
+    // mocking `.get('lastOrganization')`
+    ConfigStore.get.mockImplementation(() => 'lastOrganization');
+    wrapper = createWrapper({useLastOrganization: true, params: {}});
+    expect(getOrgMock).toHaveBeenLastCalledWith(
+      '/organizations/lastOrganization/',
+      expect.anything()
+    );
+  });
+
+  it('uses last organization from `organizations` prop', async function() {
+    getOrgMock = MockApiClient.addMockResponse({
+      url: '/organizations/foo/',
+    });
+    ConfigStore.get.mockImplementation(() => '');
+
+    wrapper = createWrapper({
+      useLastOrganization: true,
+      params: {},
+      organizationsLoading: true,
+      organizations: [],
+    });
+
+    expect(wrapper.find('LoadingIndicator')).toHaveLength(1);
+
+    wrapper.setProps({
+      organizationsLoading: false,
+      organizations: [
+        TestStubs.Organization({slug: 'foo'}),
+        TestStubs.Organization({slug: 'bar'}),
+      ],
+    });
+    wrapper.update();
+
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('LoadingIndicator')).toHaveLength(0);
+
+    expect(getOrgMock).toHaveBeenLastCalledWith('/organizations/foo/', expect.anything());
+  });
 });
diff --git a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
index e318713d11..1ace290921 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
@@ -753,6 +753,7 @@ exports[`OrganizationIntegrations render() with installed integrations Displays
                                                   "header": 1000,
                                                   "modal": 10000,
                                                   "orgAndUserMenu": 1004,
+                                                  "sentryErrorEmbed": 1009,
                                                   "sidebar": 1003,
                                                   "toast": 10001,
                                                 },
@@ -1021,6 +1022,7 @@ exports[`OrganizationIntegrations render() with installed integrations Displays
                                                           "header": 1000,
                                                           "modal": 10000,
                                                           "orgAndUserMenu": 1004,
+                                                          "sentryErrorEmbed": 1009,
                                                           "sidebar": 1003,
                                                           "toast": 10001,
                                                         },
@@ -2217,6 +2219,7 @@ exports[`OrganizationIntegrations render() with installed integrations Displays
                                                   "header": 1000,
                                                   "modal": 10000,
                                                   "orgAndUserMenu": 1004,
+                                                  "sentryErrorEmbed": 1009,
                                                   "sidebar": 1003,
                                                   "toast": 10001,
                                                 },
@@ -2485,6 +2488,7 @@ exports[`OrganizationIntegrations render() with installed integrations Displays
                                                           "header": 1000,
                                                           "modal": 10000,
                                                           "orgAndUserMenu": 1004,
+                                                          "sentryErrorEmbed": 1009,
                                                           "sidebar": 1003,
                                                           "toast": 10001,
                                                         },
@@ -3971,6 +3975,7 @@ exports[`OrganizationIntegrations render() without integrations Displays integra
                                                   "header": 1000,
                                                   "modal": 10000,
                                                   "orgAndUserMenu": 1004,
+                                                  "sentryErrorEmbed": 1009,
                                                   "sidebar": 1003,
                                                   "toast": 10001,
                                                 },
@@ -4239,6 +4244,7 @@ exports[`OrganizationIntegrations render() without integrations Displays integra
                                                           "header": 1000,
                                                           "modal": 10000,
                                                           "orgAndUserMenu": 1004,
+                                                          "sentryErrorEmbed": 1009,
                                                           "sidebar": 1003,
                                                           "toast": 10001,
                                                         },
@@ -4735,6 +4741,7 @@ exports[`OrganizationIntegrations render() without integrations Displays integra
                                                   "header": 1000,
                                                   "modal": 10000,
                                                   "orgAndUserMenu": 1004,
+                                                  "sentryErrorEmbed": 1009,
                                                   "sidebar": 1003,
                                                   "toast": 10001,
                                                 },
@@ -5003,6 +5010,7 @@ exports[`OrganizationIntegrations render() without integrations Displays integra
                                                           "header": 1000,
                                                           "modal": 10000,
                                                           "orgAndUserMenu": 1004,
+                                                          "sentryErrorEmbed": 1009,
                                                           "sidebar": 1003,
                                                           "toast": 10001,
                                                         },
diff --git a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap
index 70d4ef9ba3..9fffed4c01 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap
+++ b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap
@@ -428,6 +428,7 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
                                         "header": 1000,
                                         "modal": 10000,
                                         "orgAndUserMenu": 1004,
+                                        "sentryErrorEmbed": 1009,
                                         "sidebar": 1003,
                                         "toast": 10001,
                                       },
@@ -696,6 +697,7 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
                                                 "header": 1000,
                                                 "modal": 10000,
                                                 "orgAndUserMenu": 1004,
+                                                "sentryErrorEmbed": 1009,
                                                 "sidebar": 1003,
                                                 "toast": 10001,
                                               },
