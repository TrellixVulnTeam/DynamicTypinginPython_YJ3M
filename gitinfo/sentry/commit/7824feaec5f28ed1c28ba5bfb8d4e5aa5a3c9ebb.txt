commit 7824feaec5f28ed1c28ba5bfb8d4e5aa5a3c9ebb
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon May 2 21:14:51 2016 +0200

    Refactored UI code to support crumb types

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/crumb.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/crumb.jsx
index 6fc2aebc11..373726a2f3 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/crumb.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/crumb.jsx
@@ -2,30 +2,19 @@ import React from 'react';
 import moment from 'moment';
 import _ from 'underscore';
 
-import Category from './category';
-import Duration from '../../../duration';
+import HttpRenderer from './httpRenderer';
+import DefaultRenderer from './defaultRenderer';
+
+const CUSTOM_RENDERERS = {
+  http: HttpRenderer,
+};
+
 
 const CrumbComponent = React.createClass({
   propTypes: {
     crumb: React.PropTypes.object.isRequired,
   },
 
-  renderSummary() {
-    let {crumb} = this.props;
-
-    return (
-      <div className="summary">
-        {crumb.message && <pre><code>{crumb.message}</code></pre>}
-        {crumb.category && <Category value={crumb.category}/>}
-        {crumb.duration &&
-          <span className="crumb-timing">
-            [<Duration seconds={crumb.duration}/>]
-          </span>
-        }
-      </div>
-    );
-  },
-
   getClassName() {
     let {crumb} = this.props;
     let rv = 'crumb crumb-default crumb-' + crumb.level;
@@ -35,74 +24,24 @@ const CrumbComponent = React.createClass({
     return rv;
   },
 
-  getTitle() {
-    // TODO(mitsuhiko): refactor to support different types better
-    let crumb = this.props.crumb;
-    if (crumb.type === 'default') {
-      return null;
-    }
-    return crumb.type.split(/[_-\s]+/g).map((word) => {
-      return word.substr(0, 1).toUpperCase() + word.substr(1);
-    }).join(' ');
-  },
-
-  getLevel() {
-    // TODO(mitsuhiko): refactor to support different types better
-    let crumb = this.props.crumb;
-    if ((crumb.type !== 'default' && crumb.level === 'info') ||
-        crumb.type === 'error') {
-      return null;
-    }
-    return (
-      <span className="crumb-level">{crumb.level}</span>
-    );
-  },
-
-  renderData() {
+  renderType() {
     let {crumb} = this.props;
-
-    if (!crumb.data) {
-      return null;
-    }
-
-    let body = _.chain(crumb.data)
-      .map((val, key) => [val, key])
-      .map(([val, key]) => {
-        return (
-          <tr key={key}>
-            <td className="key">{key}</td>
-            <td className="value"><pre>{val + ''}</pre></td>
-          </tr>
-        );
-      })
-      .value();
-
+    let Renderer = CUSTOM_RENDERERS[crumb.type] || DefaultRenderer;
     return (
-      <tbody>{body}</tbody>
+      <Renderer crumb={crumb} />
     );
   },
 
   render() {
-    let crumb = this.props.crumb;
-
     return (
       <li className={this.getClassName()}>
         <span className="icon-container">
           <span className="icon"/>
         </span>
-        <span className="dt">{moment(crumb.timestamp).format('HH:mm:ss')}</span>
-        <table className="table key-value">
-          <thead>
-            <tr>
-              <td className="key">
-                {this.getTitle()}
-                {this.getLevel()}
-              </td>
-              <td className="value">{this.renderSummary()}</td>
-            </tr>
-          </thead>
-          {this.renderData()}
-        </table>
+        <span className="dt">
+          {moment(this.props.crumb.timestamp).format('HH:mm:ss')}
+        </span>
+        {this.renderType()}
       </li>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/crumbTable.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/crumbTable.jsx
new file mode 100644
index 0000000000..7ff658a04f
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/crumbTable.jsx
@@ -0,0 +1,48 @@
+import React from 'react';
+import _ from 'underscore';
+
+const CrumbTable = React.createClass({
+  propTypes: {
+    title: React.PropTypes.string,
+    kvData: React.PropTypes.object,
+    summary: React.PropTypes.object,
+  },
+
+  renderData() {
+    if (!this.props.kvData) {
+      return null;
+    }
+    return _.chain(this.props.kvData)
+      .map((val, key) => [val, key])
+      .map(([val, key]) => {
+        return (
+          <tr key={key}>
+            <td className="key">{key}</td>
+            <td className="value"><pre>{val + ''}</pre></td>
+          </tr>
+        );
+      })
+      .value();
+  },
+
+  render() {
+    return (
+      <table className="table key-value">
+        <thead>
+          <tr>
+            <td className="key">
+              {this.props.title}
+            </td>
+            <td className="value">{this.props.summary}</td>
+          </tr>
+        </thead>
+        <tbody>
+          {this.props.children}
+          {this.renderData()}
+        </tbody>
+      </table>
+    );
+  }
+});
+
+export default CrumbTable;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/defaultRenderer.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/defaultRenderer.jsx
new file mode 100644
index 0000000000..ecab3952ef
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/defaultRenderer.jsx
@@ -0,0 +1,44 @@
+import React from 'react';
+
+import CrumbTable from './crumbTable';
+import SummaryLine from './summaryLine';
+
+
+const DefaultRenderer = React.createClass({
+  propTypes: {
+    crumb: React.PropTypes.object.isRequired,
+    kvData: React.PropTypes.object,
+  },
+
+  getTitle() {
+    let crumb = this.props.crumb;
+    if (crumb.type === 'default') {
+      return null;
+    }
+    return crumb.type.split(/[_-\s]+/g).map((word) => {
+      return word.substr(0, 1).toUpperCase() + word.substr(1);
+    }).join(' ');
+  },
+
+  renderSummary() {
+    let {crumb} = this.props;
+
+    return (
+      <SummaryLine crumb={crumb}>
+        {crumb.message && <pre><code>{crumb.message}</code></pre>}
+      </SummaryLine>
+    );
+  },
+
+  render() {
+    return (
+      <CrumbTable
+        title={this.getTitle()}
+        summary={this.renderSummary()}
+        kvData={this.props.crumb.data}
+        {...this.props} />
+    );
+  }
+});
+
+export default DefaultRenderer;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/httpRenderer.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/httpRenderer.jsx
new file mode 100644
index 0000000000..c10c5412c6
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/httpRenderer.jsx
@@ -0,0 +1,33 @@
+import React from 'react';
+
+import CrumbTable from './crumbTable';
+import SummaryLine from './summaryLine';
+
+
+const HttpRenderer = React.createClass({
+  propTypes: {
+    crumb: React.PropTypes.object.isRequired,
+  },
+
+  render() {
+    let {crumb} = this.props;
+    let {method, status_code, reason, url, ...extra} = crumb.data;
+    let summary = (
+      <SummaryLine crumb={crumb}>
+        <pre>
+          <code>{method + ' ' + url + ' [' + status_code + ']'}</code>
+        </pre>
+      </SummaryLine>
+    );
+
+    return (
+      <CrumbTable
+        title="HTTP Request"
+        summary={summary}
+        kvData={extra}
+        {...this.props} />
+    );
+  }
+});
+
+export default HttpRenderer;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/summaryLine.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/summaryLine.jsx
new file mode 100644
index 0000000000..e9c75e9cf9
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbComponents/summaryLine.jsx
@@ -0,0 +1,28 @@
+import React from 'react';
+
+import Category from './category';
+import Duration from '../../../duration';
+
+
+const SummaryLine = React.createClass({
+  propTypes: {
+    crumb: React.PropTypes.object.isRequired
+  },
+
+  render() {
+    let {crumb} = this.props;
+    return (
+      <div className="summary">
+        {this.props.children}
+        {crumb.category && <Category value={crumb.category}/>}
+        {crumb.duration &&
+          <span className="crumb-timing">
+            [<Duration seconds={crumb.duration}/>]
+          </span>
+        }
+      </div>
+    );
+  }
+});
+
+export default SummaryLine;
