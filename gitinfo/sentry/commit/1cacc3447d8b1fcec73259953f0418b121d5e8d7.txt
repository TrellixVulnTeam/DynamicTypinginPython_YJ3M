commit 1cacc3447d8b1fcec73259953f0418b121d5e8d7
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Feb 4 19:56:40 2012 -0800

    Launch 3 workers with unicorn and use the eventlet worker class (this makes gunicorn options configurable via WEB_OPTIONS)

diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index 6fd7a3975e..4051a72281 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -102,6 +102,9 @@ RUN_DIR = os.path.join(ROOT, 'run')
 # Web Service
 WEB_HOST = 'localhost'
 WEB_PORT = 9000
+WEB_OPTIONS = {
+    'workers': 3,
+}
 
 # UDP Service
 UDP_HOST = 'localhost'
diff --git a/sentry/services/http.py b/sentry/services/http.py
index f784862365..899d33e76a 100644
--- a/sentry/services/http.py
+++ b/sentry/services/http.py
@@ -51,13 +51,30 @@ class SentryHTTPServer(Service):
         self.host = host or settings.WEB_HOST
         self.port = port or settings.WEB_PORT
 
-        self.app = SentryApplication({
+        # import cProfile, os
+
+        # def post_fork(server, worker):
+        #     orig_init_process_ = worker.init_process
+
+        #     def profiling_init_process(self):
+        #         orig_init_process = orig_init_process_
+        #         ofile = '/tmp/.profile%s' % (os.getpid(),)
+        #         print 'Profiling worker %s, output file: %s' % (worker, ofile)
+        #         cProfile.runctx('orig_init_process()', globals(), locals(), ofile)
+        #     worker.init_process = profiling_init_process.__get__(worker)
+
+        options = {
             'bind': '%s:%s' % (self.host, self.port),
+            'worker_class': 'eventlet',
             'debug': debug,
             'daemon': daemonize,
             'pidfile': pidfile,
             'errorlog': logfile,
-        })
+            # 'post_fork': post_fork,
+        }
+        options.update(settings.WEB_OPTIONS or {})
+
+        self.app = SentryApplication(options)
 
     def run(self):
         try:
