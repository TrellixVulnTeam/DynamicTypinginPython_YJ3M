commit 1f7107bbd636b51083133ad5bac1a9612a0d436c
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 17 11:12:36 2015 -0700

    Handle non-string values

diff --git a/src/sentry/utils/data_scrubber.py b/src/sentry/utils/data_scrubber.py
index 95e9f1e473..46ee395be4 100644
--- a/src/sentry/utils/data_scrubber.py
+++ b/src/sentry/utils/data_scrubber.py
@@ -78,11 +78,18 @@ class SensitiveDataFilter(object):
             key = key.lower()
         else:
             key = ''
+
+        original_value = value
+        if isinstance(value, basestring):
+            value = value.lower()
+        else:
+            value = ''
+
         for field in self.fields:
             if field in key or field in value:
                 # store mask as a fixed length for security
                 return self.MASK
-        return value
+        return original_value
 
     def filter_stacktrace(self, data):
         if 'frames' not in data:
diff --git a/tests/sentry/utils/test_data_scrubber.py b/tests/sentry/utils/test_data_scrubber.py
index f51e2eb0c5..80c03a10f3 100644
--- a/tests/sentry/utils/test_data_scrubber.py
+++ b/tests/sentry/utils/test_data_scrubber.py
@@ -162,3 +162,14 @@ class SensitiveDataFilterTest(TestCase):
         self.assertTrue('sentry.interfaces.Http' in data)
         http = data['sentry.interfaces.Http']
         self.assertEquals(http['data'], proc.MASK)
+
+    def test_does_not_fail_on_non_string(self):
+        data = {
+            'extra': {
+                'foo': 1,
+            },
+        }
+
+        proc = SensitiveDataFilter()
+        result = proc.apply(data)
+        self.assertEquals(data['extra'], {'foo': 1})
