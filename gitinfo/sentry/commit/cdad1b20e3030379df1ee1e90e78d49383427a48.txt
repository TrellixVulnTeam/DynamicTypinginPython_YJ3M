commit cdad1b20e3030379df1ee1e90e78d49383427a48
Author: Matte Noble <me@mattenoble.com>
Date:   Mon Nov 5 10:45:09 2018 -0800

    feat(app-platform): App Platform Permissions (#10265)
    
    * feat(app-platform): App Platform Permissions
    
    Adds a set of scopes that are required (one of, technically) for each
    new App Platform endpoint recently introduced.
    
    Also refactors the endpoint base classes and permission classes to be
    more explicit.

diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index 9b1ed7b4cf..468b6d8121 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -1,18 +1,18 @@
 from __future__ import absolute_import
 
-from sentry.api.base import Endpoint, logger
-from sentry.api.exceptions import ResourceDoesNotExist, SsoRequired, TwoFactorRequired
-from sentry.api.permissions import ScopedPermission
 from sentry.utils.sdk import configure_scope
-from sentry.auth import access
+from sentry.api.base import Endpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.permissions import SentryPermission
 from sentry.auth.superuser import is_active_superuser
 from sentry.models import (
-    ApiKey, Authenticator, Organization, OrganizationMemberTeam, Project, ProjectTeam, ReleaseProject, Team
+    ApiKey, Authenticator, Organization, OrganizationMemberTeam, Project,
+    ProjectTeam, ReleaseProject, Team
 )
 from sentry.utils import auth
 
 
-class OrganizationPermission(ScopedPermission):
+class OrganizationPermission(SentryPermission):
     scope_map = {
         'GET': ['org:read', 'org:write', 'org:admin'],
         'POST': ['org:write', 'org:admin'],
@@ -35,57 +35,7 @@ class OrganizationPermission(ScopedPermission):
         return False
 
     def has_object_permission(self, request, view, organization):
-        if request.user and request.user.is_authenticated() and request.auth:
-            request.access = access.from_request(
-                request,
-                organization,
-                scopes=request.auth.get_scopes(),
-            )
-
-        elif request.auth:
-            if request.auth.organization_id == organization.id:
-                request.access = access.from_auth(request.auth)
-            else:
-                request.access = access.DEFAULT
-
-        else:
-            request.access = access.from_request(request, organization)
-
-            if auth.is_user_signed_request(request):
-                # if the user comes from a signed request
-                # we let them pass if sso is enabled
-                logger.info(
-                    'access.signed-sso-passthrough',
-                    extra={
-                        'organization_id': organization.id,
-                        'user_id': request.user.id,
-                    }
-                )
-            elif request.user.is_authenticated():
-                # session auth needs to confirm various permissions
-                if self.needs_sso(request, organization):
-
-                    logger.info(
-                        'access.must-sso',
-                        extra={
-                            'organization_id': organization.id,
-                            'user_id': request.user.id,
-                        }
-                    )
-
-                    raise SsoRequired(organization)
-
-                if self.is_not_2fa_compliant(
-                        request.user, organization):
-                    logger.info(
-                        'access.not-2fa-compliant',
-                        extra={
-                            'organization_id': organization.id,
-                            'user_id': request.user.id,
-                        }
-                    )
-                    raise TwoFactorRequired()
-
+        self.determine_access(request, organization)
         allowed_scopes = set(self.scope_map.get(request.method, []))
         return any(request.access.has_scope(s) for s in allowed_scopes)
 
diff --git a/src/sentry/api/bases/sentryapps.py b/src/sentry/api/bases/sentryapps.py
index a5a1ac1b7e..cd551a73a0 100644
--- a/src/sentry/api/bases/sentryapps.py
+++ b/src/sentry/api/bases/sentryapps.py
@@ -1,70 +1,258 @@
 from __future__ import absolute_import
 
-from sentry.api.authentication import ClientIdSecretAuthentication
-from sentry.api.base import Endpoint, SessionAuthentication
-from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.api.permissions import ScopedPermission
-from sentry.models import SentryApp, SentryAppInstallation
+from django.http import Http404
+
 from sentry.utils.sdk import configure_scope
+from sentry.api.authentication import ClientIdSecretAuthentication
+from sentry.api.base import Endpoint
+from sentry.api.permissions import SentryPermission
+from sentry.models import SentryApp, SentryAppInstallation, Organization
+
+
+def ensure_scoped_permission(request, allowed_scopes):
+    """
+    Verifies the User making the request has at least one required scope for
+    the endpoint being requested.
+
+    If no scopes were specified in a ``scope_map``, it means the endpoint should
+    not be accessible. That is, this function expects every accessible endpoint
+    to have a list of scopes.
+
+    That list of scopes may be empty, implying that the User does not need any
+    specific scope and the endpoint is public.
+    """
+    # If no scopes were found at all, the endpoint should not be accessible.
+    if allowed_scopes is None:
+        return False
+
+    # If there are no scopes listed, it implies a public endpoint.
+    if len(allowed_scopes) == 0:
+        return True
+
+    return any(request.access.has_scope(s) for s in set(allowed_scopes))
+
+
+class SentryAppsPermission(SentryPermission):
+    scope_map = {
+        'GET': (),  # Public endpoint.
+        'POST': ('org:read', 'org:integrations', 'org:write', 'org:admin'),
+    }
+
+    def has_object_permission(self, request, view, organization):
+        if not hasattr(request, 'user') or not request.user:
+            return False
+
+        self.determine_access(request, organization)
+
+        if request.user.is_superuser:
+            return True
 
+        # User must be a part of the Org they're trying to create the app in.
+        if organization not in request.user.get_orgs():
+            raise Http404
+
+        return ensure_scoped_permission(
+            request,
+            self.scope_map.get(request.method),
+        )
+
+
+class SentryAppsBaseEndpoint(Endpoint):
+    permission_classes = (SentryAppsPermission, )
+
+    def convert_args(self, request, *args, **kwargs):
+        # This baseclass is the the SentryApp collection endpoints:
+        #
+        #       [GET, POST] /sentry-apps
+        #
+        # The GET endpoint is public and doesn't require (or handle) any query
+        # params or request body.
+        #
+        # The POST endpoint is for creating a Sentry App. Part of that creation
+        # is associating it with the Organization that it's created within.
+        #
+        # So in the case of POST requests, we want to pull the Organization out
+        # of the request body so that we can ensure the User making the request
+        # has access to it.
+        #
+        # Since ``convert_args`` is conventionally where you materialize model
+        # objects from URI params, we're applying the same logic for a param in
+        # the request body.
+        #
+        if not request.json_body or 'organization' not in request.json_body:
+            return (args, kwargs)
+
+        organization = request.user.get_orgs().get(
+            slug=request.json_body['organization'],
+        )
+
+        self.check_object_permissions(request, organization)
+
+        kwargs['organization'] = organization
+        return (args, kwargs)
+
+
+class SentryAppPermission(SentryPermission):
+    unpublished_scope_map = {
+        'GET': ('org:read', 'org:integrations', 'org:write', 'org:admin'),
+        'PUT': ('org:read', 'org:integrations', 'org:write', 'org:admin'),
+        'DELETE': ('org:write', 'org:admin'),
+    }
+
+    published_scope_map = {
+        'GET': (),  # Public endpoint.
+        'PUT': ('org:write', 'org:admin'),
+        'DELETE': ('org:admin'),
+    }
 
-class SentryAppDetailsPermission(ScopedPermission):
     def has_object_permission(self, request, view, sentry_app):
-        return request.user.is_superuser or sentry_app.owner in request.user.get_orgs()
+        if not hasattr(request, 'user') or not request.user:
+            return False
+
+        self.determine_access(request, sentry_app.owner)
+
+        if request.user.is_superuser:
+            return True
 
+        # User must be in the Org who owns the app.
+        if sentry_app.owner not in request.user.get_orgs():
+            raise Http404
 
-class SentryAppDetailsEndpoint(Endpoint):
-    authentication_classes = (SessionAuthentication, )
-    permission_classes = (SentryAppDetailsPermission, )
+        return ensure_scoped_permission(
+            request,
+            self._scopes_for_sentry_app(sentry_app).get(request.method),
+        )
+
+    def _scopes_for_sentry_app(self, sentry_app):
+        if sentry_app.is_published:
+            return self.published_scope_map
+        else:
+            return self.unpublished_scope_map
+
+
+class SentryAppBaseEndpoint(Endpoint):
+    permission_classes = (SentryAppPermission, )
 
     def convert_args(self, request, sentry_app_slug, *args, **kwargs):
         try:
-            sentry_app = SentryApp.objects.get_from_cache(slug=sentry_app_slug)
+            sentry_app = SentryApp.objects.get(
+                slug=sentry_app_slug,
+            )
         except SentryApp.DoesNotExist:
-            raise ResourceDoesNotExist
+            raise Http404
 
         self.check_object_permissions(request, sentry_app)
 
         with configure_scope() as scope:
-            scope.set_tag("sentry_app", sentry_app.id)
+            scope.set_tag("sentry_app", sentry_app.slug)
 
         kwargs['sentry_app'] = sentry_app
         return (args, kwargs)
 
 
-class SentryAppInstallationDetailsPermission(ScopedPermission):
-    def has_object_permission(self, request, view, install):
-        if not request.user:
+class SentryAppInstallationsPermission(SentryPermission):
+    scope_map = {
+        'GET': ('org:read', 'org:integrations', 'org:write', 'org:admin'),
+        'POST': ('org:integrations', 'org:write', 'org:admin'),
+    }
+
+    def has_object_permission(self, request, view, organization):
+        if not hasattr(request, 'user') or not request.user:
+            return False
+
+        self.determine_access(request, organization)
+
+        if request.user.is_superuser:
+            return True
+
+        if organization not in request.user.get_orgs():
+            raise Http404
+
+        return ensure_scoped_permission(
+            request,
+            self.scope_map.get(request.method),
+        )
+
+
+class SentryAppInstallationsBaseEndpoint(Endpoint):
+    permission_classes = (SentryAppInstallationsPermission, )
+
+    def convert_args(self, request, organization_slug, *args, **kwargs):
+        if request.user.is_superuser:
+            organizations = Organization.objects.all()
+        else:
+            organizations = request.user.get_orgs()
+
+        try:
+            organization = organizations.get(slug=organization_slug)
+        except Organization.DoesNotExist:
+            raise Http404
+
+        self.check_object_permissions(request, organization)
+
+        kwargs['organization'] = organization
+        return (args, kwargs)
+
+
+class SentryAppInstallationPermission(SentryPermission):
+    scope_map = {
+        'GET': ('org:read', 'org:integrations', 'org:write', 'org:admin'),
+        'DELETE': ('org:integrations', 'org:write', 'org:admin'),
+    }
+
+    def has_object_permission(self, request, view, installation):
+        if not hasattr(request, 'user') or not request.user:
             return False
-        return install.organization in request.user.get_orgs()
 
+        self.determine_access(request, installation.organization)
+
+        if request.user.is_superuser:
+            return True
 
-class SentryAppInstallationDetailsEndpoint(Endpoint):
-    authentication_classes = (SessionAuthentication, )
-    permission_classes = (SentryAppInstallationDetailsPermission, )
+        if installation.organization not in request.user.get_orgs():
+            raise Http404
+
+        return ensure_scoped_permission(
+            request,
+            self.scope_map.get(request.method),
+        )
+
+
+class SentryAppInstallationBaseEndpoint(Endpoint):
+    permission_classes = (SentryAppInstallationPermission, )
 
     def convert_args(self, request, uuid, *args, **kwargs):
         try:
-            install = SentryAppInstallation.objects.get_from_cache(uuid=uuid)
+            installation = SentryAppInstallation.objects.get(
+                uuid=uuid,
+            )
         except SentryAppInstallation.DoesNotExist:
-            raise ResourceDoesNotExist
+            raise Http404
 
-        self.check_object_permissions(request, install)
+        self.check_object_permissions(request, installation)
 
         with configure_scope() as scope:
-            scope.set_tag("sentry_app_installation", install.id)
+            scope.set_tag("sentry_app_installation", installation.uuid)
 
-        kwargs['install'] = install
+        kwargs['installation'] = installation
         return (args, kwargs)
 
 
-class SentryAppAuthorizationPermission(ScopedPermission):
-    def has_object_permission(self, request, view, install):
+class SentryAppAuthorizationsPermission(SentryPermission):
+    def has_object_permission(self, request, view, installation):
+        if not hasattr(request, 'user') or not request.user:
+            return False
+
+        self.determine_access(request, installation.organization)
+
         if not request.user.is_sentry_app:
             return False
-        return request.user == install.sentry_app.proxy_user
+
+        # Request must be made as the app's Proxy User, using their Client ID
+        # and Secret.
+        return request.user == installation.sentry_app.proxy_user
 
 
-class SentryAppAuthorizationEndpoint(SentryAppInstallationDetailsEndpoint):
+class SentryAppAuthorizationsBaseEndpoint(SentryAppInstallationBaseEndpoint):
     authentication_classes = (ClientIdSecretAuthentication, )
-    permission_classes = (SentryAppAuthorizationPermission, )
+    permission_classes = (SentryAppAuthorizationsPermission, )
diff --git a/src/sentry/api/endpoints/organization_sentry_app_installation_details.py b/src/sentry/api/endpoints/organization_sentry_app_installation_details.py
deleted file mode 100644
index 2b0ef6101f..0000000000
--- a/src/sentry/api/endpoints/organization_sentry_app_installation_details.py
+++ /dev/null
@@ -1,36 +0,0 @@
-from __future__ import absolute_import
-
-from rest_framework.response import Response
-
-from sentry.api.bases import OrganizationEndpoint
-from sentry.api.serializers import serialize
-from sentry.features.helpers import requires_feature
-from sentry.mediators.sentry_app_installations import Destroyer
-from sentry.models import SentryAppInstallation
-
-
-class OrganizationSentryAppInstallationDetailsEndpoint(OrganizationEndpoint):
-    @requires_feature('organizations:internal-catchall')
-    def get(self, request, organization, uuid):
-        try:
-            install = SentryAppInstallation.objects.get(
-                organization=organization,
-                uuid=uuid,
-            )
-        except SentryAppInstallation.DoesNotExist:
-            return Response(status=404)
-
-        return Response(serialize(install))
-
-    @requires_feature('organizations:internal-catchall')
-    def delete(self, request, organization, uuid):
-        try:
-            install = SentryAppInstallation.objects.get(
-                organization=organization,
-                uuid=uuid,
-            )
-        except SentryAppInstallation.DoesNotExist:
-            return Response(status=404)
-
-        Destroyer.run(install=install)
-        return Response(status=204)
diff --git a/src/sentry/api/endpoints/sentry_app_authorizations.py b/src/sentry/api/endpoints/sentry_app_authorizations.py
index e36e091ac6..37cdabb129 100644
--- a/src/sentry/api/endpoints/sentry_app_authorizations.py
+++ b/src/sentry/api/endpoints/sentry_app_authorizations.py
@@ -2,21 +2,21 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
-from sentry.api.bases import SentryAppAuthorizationEndpoint as BaseEndpoint
+from sentry.api.bases import SentryAppAuthorizationsBaseEndpoint
 from sentry.coreapi import APIUnauthorized
 from sentry.mediators.sentry_app_installations import Authorizer
 from sentry.api.serializers.models.apitoken import ApiTokenSerializer
 
 
-class SentryAppAuthorizationsEndpoint(BaseEndpoint):
-    def post(self, request, install):
+class SentryAppAuthorizationsEndpoint(SentryAppAuthorizationsBaseEndpoint):
+    def post(self, request, installation):
         try:
             token = Authorizer.run(
                 grant_type=request.json_body.get('grant_type'),
                 code=request.json_body.get('code'),
                 client_id=request.json_body.get('client_id'),
                 user=request.user,
-                install=install,
+                install=installation,
             )
         except APIUnauthorized:
             return Response({'error': 'Unauthorized'}, status=403)
diff --git a/src/sentry/api/endpoints/sentry_app_details.py b/src/sentry/api/endpoints/sentry_app_details.py
index 02a5c3178b..3d9f519498 100644
--- a/src/sentry/api/endpoints/sentry_app_details.py
+++ b/src/sentry/api/endpoints/sentry_app_details.py
@@ -1,35 +1,37 @@
 from __future__ import absolute_import
 
 from rest_framework.response import Response
-from sentry.api.bases.sentryapps import SentryAppDetailsEndpoint as BaseEndpoint
+
+from sentry import features
+from sentry.api.bases.sentryapps import SentryAppBaseEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.serializers.rest_framework import SentryAppSerializer
-from sentry.constants import SentryAppStatus
-from sentry.features.helpers import requires_feature
 from sentry.mediators.sentry_apps import Updater
 
 
-class SentryAppDetailsEndpoint(BaseEndpoint):
-    @requires_feature('organizations:internal-catchall', any_org=True)
+class SentryAppDetailsEndpoint(SentryAppBaseEndpoint):
     def get(self, request, sentry_app):
-        # Superusers have access to the app, published or unpublished. Other
-        # users only have access to a published app (for now)
-        if request.user.is_superuser or sentry_app.status == SentryAppStatus.PUBLISHED:
-            return Response(serialize(sentry_app, request.user))
+        if not features.has('organizations:internal-catchall', sentry_app.owner):
+            return Response(status=404)
 
-        return Response(status=404)
+        return Response(serialize(sentry_app, request.user))
 
-    @requires_feature('organizations:internal-catchall', any_org=True)
     def put(self, request, sentry_app):
+        if not features.has('organizations:internal-catchall', sentry_app.owner):
+            return Response(status=404)
+
         serializer = SentryAppSerializer(data=request.DATA, partial=True)
+
         if serializer.is_valid():
             result = serializer.object
+
             updated_app = Updater.run(
                 sentry_app=sentry_app,
                 name=result.get('name'),
                 webhook_url=result.get('webhook_url'),
                 scopes=result.get('scopes'),
             )
+
             return Response(serialize(updated_app, request.user))
 
         return Response(serializer.errors, status=400)
diff --git a/src/sentry/api/endpoints/sentry_app_installation_details.py b/src/sentry/api/endpoints/sentry_app_installation_details.py
new file mode 100644
index 0000000000..a4b0638af6
--- /dev/null
+++ b/src/sentry/api/endpoints/sentry_app_installation_details.py
@@ -0,0 +1,23 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry import features
+from sentry.api.bases import SentryAppInstallationBaseEndpoint
+from sentry.api.serializers import serialize
+from sentry.mediators.sentry_app_installations import Destroyer
+
+
+class SentryAppInstallationDetailsEndpoint(SentryAppInstallationBaseEndpoint):
+    def get(self, request, installation):
+        if not features.has('organizations:internal-catchall', installation.organization):
+            return Response(status=404)
+
+        return Response(serialize(installation))
+
+    def delete(self, request, installation):
+        if not features.has('organizations:internal-catchall', installation.organization):
+            return Response(status=404)
+
+        Destroyer.run(install=installation)
+        return Response(status=204)
diff --git a/src/sentry/api/endpoints/organization_sentry_app_installations.py b/src/sentry/api/endpoints/sentry_app_installations.py
similarity index 83%
rename from src/sentry/api/endpoints/organization_sentry_app_installations.py
rename to src/sentry/api/endpoints/sentry_app_installations.py
index f48cdcb406..ad2bb5de2f 100644
--- a/src/sentry/api/endpoints/organization_sentry_app_installations.py
+++ b/src/sentry/api/endpoints/sentry_app_installations.py
@@ -5,7 +5,7 @@ from django.utils.translation import ugettext_lazy as _
 from rest_framework import serializers
 from rest_framework.response import Response
 
-from sentry.api.bases import OrganizationEndpoint
+from sentry.api.bases import SentryAppInstallationsBaseEndpoint
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.constants import SENTRY_APP_SLUG_MAX_LENGTH
@@ -14,7 +14,7 @@ from sentry.mediators.sentry_app_installations import Creator
 from sentry.models import SentryAppInstallation
 
 
-class OrganizationSentryAppInstallationsSerializer(serializers.Serializer):
+class SentryAppInstallationsSerializer(serializers.Serializer):
     slug = serializers.RegexField(
         r'^[a-z0-9_\-]+$',
         max_length=SENTRY_APP_SLUG_MAX_LENGTH,
@@ -30,7 +30,7 @@ class OrganizationSentryAppInstallationsSerializer(serializers.Serializer):
         return attrs
 
 
-class OrganizationSentryAppInstallationsEndpoint(OrganizationEndpoint):
+class SentryAppInstallationsEndpoint(SentryAppInstallationsBaseEndpoint):
     @requires_feature('organizations:internal-catchall')
     def get(self, request, organization):
         queryset = SentryAppInstallation.objects.filter(
@@ -47,13 +47,14 @@ class OrganizationSentryAppInstallationsEndpoint(OrganizationEndpoint):
 
     @requires_feature('organizations:internal-catchall')
     def post(self, request, organization):
-        serializer = OrganizationSentryAppInstallationsSerializer(data=request.DATA)
+        serializer = SentryAppInstallationsSerializer(data=request.DATA)
+
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        slug = serializer.object.get('slug')
         install, _ = Creator.run(
             organization=organization,
-            slug=slug,
+            slug=serializer.object.get('slug'),
         )
+
         return Response(serialize(install))
diff --git a/src/sentry/api/endpoints/sentry_apps.py b/src/sentry/api/endpoints/sentry_apps.py
index ab77355d58..bea936503d 100644
--- a/src/sentry/api/endpoints/sentry_apps.py
+++ b/src/sentry/api/endpoints/sentry_apps.py
@@ -1,41 +1,29 @@
 from __future__ import absolute_import
 
-from rest_framework.permissions import IsAuthenticated
 from rest_framework.response import Response
 
-from sentry.api.base import Endpoint, SessionAuthentication
+from sentry.api.bases import SentryAppsBaseEndpoint
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.api.serializers.rest_framework import SentryAppSerializer
-from sentry.constants import SentryAppStatus
 from sentry.features.helpers import requires_feature
 from sentry.mediators.sentry_apps import Creator
 from sentry.models import SentryApp
 
 
-class SentryAppsEndpoint(Endpoint):
-    authentication_classes = (SessionAuthentication, )
-    permission_classes = (IsAuthenticated, )
-
+class SentryAppsEndpoint(SentryAppsBaseEndpoint):
     @requires_feature('organizations:internal-catchall', any_org=True)
     def get(self, request):
-        if request.user.is_superuser:
-            # Superusers have access to all apps, published and unpublished
-            queryset = SentryApp.objects.all()
-        else:
-            # Anyone else only has access to published apps
-            queryset = SentryApp.objects.filter(status=SentryAppStatus.PUBLISHED)
-
         return self.paginate(
             request=request,
-            queryset=queryset,
+            queryset=SentryApp.visible_for_user(request.user),
             order_by='-date_added',
             paginator_cls=OffsetPaginator,
             on_results=lambda x: serialize(x, request.user),
         )
 
     @requires_feature('organizations:internal-catchall', any_org=True)
-    def post(self, request):
+    def post(self, request, organization):
         serializer = SentryAppSerializer(data=request.json_body)
 
         if not serializer.is_valid():
diff --git a/src/sentry/api/permissions.py b/src/sentry/api/permissions.py
index db7c4df1e0..ee442566bf 100644
--- a/src/sentry/api/permissions.py
+++ b/src/sentry/api/permissions.py
@@ -3,7 +3,10 @@ from __future__ import absolute_import
 from rest_framework import permissions
 
 from sentry.api.exceptions import SuperuserRequired
+from sentry.api.exceptions import SsoRequired, TwoFactorRequired
+from sentry.auth import access
 from sentry.auth.superuser import is_active_superuser
+from sentry.utils import auth
 
 
 class RelayPermission(permissions.BasePermission):
@@ -55,3 +58,65 @@ class SuperuserPermission(permissions.BasePermission):
         if request.user.is_authenticated() and request.user.is_superuser:
             raise SuperuserRequired
         return False
+
+
+class SentryPermission(ScopedPermission):
+    def is_not_2fa_compliant(self, user, organization):
+        return False
+
+    def needs_sso(self, request, organization):
+        return False
+
+    def determine_access(self, request, organization):
+        from sentry.api.base import logger
+
+        if request.user and request.user.is_authenticated() and request.auth:
+            request.access = access.from_request(
+                request,
+                organization,
+                scopes=request.auth.get_scopes(),
+            )
+
+        elif request.auth:
+            if request.auth.organization_id == organization.id:
+                request.access = access.from_auth(request.auth)
+            else:
+                request.access = access.DEFAULT
+
+        else:
+            request.access = access.from_request(request, organization)
+
+            if auth.is_user_signed_request(request):
+                # if the user comes from a signed request
+                # we let them pass if sso is enabled
+                logger.info(
+                    'access.signed-sso-passthrough',
+                    extra={
+                        'organization_id': organization.id,
+                        'user_id': request.user.id,
+                    }
+                )
+            elif request.user.is_authenticated():
+                # session auth needs to confirm various permissions
+                if self.needs_sso(request, organization):
+
+                    logger.info(
+                        'access.must-sso',
+                        extra={
+                            'organization_id': organization.id,
+                            'user_id': request.user.id,
+                        }
+                    )
+
+                    raise SsoRequired(organization)
+
+                if self.is_not_2fa_compliant(
+                        request.user, organization):
+                    logger.info(
+                        'access.not-2fa-compliant',
+                        extra={
+                            'organization_id': organization.id,
+                            'user_id': request.user.id,
+                        }
+                    )
+                    raise TwoFactorRequired()
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 304a95a4b4..4051edbd5e 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -92,9 +92,9 @@ from .endpoints.organization_config_integrations import OrganizationConfigIntegr
 from .endpoints.organization_config_repositories import OrganizationConfigRepositoriesEndpoint
 from .endpoints.organization_repository_commits import OrganizationRepositoryCommitsEndpoint
 from .endpoints.organization_repository_details import OrganizationRepositoryDetailsEndpoint
-from .endpoints.organization_sentry_app_installations import OrganizationSentryAppInstallationsEndpoint
-from .endpoints.organization_sentry_app_installation_details import OrganizationSentryAppInstallationDetailsEndpoint
 from .endpoints.organization_sentry_apps import OrganizationSentryAppsEndpoint
+from .endpoints.sentry_app_installations import SentryAppInstallationsEndpoint
+from .endpoints.sentry_app_installation_details import SentryAppInstallationDetailsEndpoint
 from .endpoints.organization_stats import OrganizationStatsEndpoint
 from .endpoints.organization_teams import OrganizationTeamsEndpoint
 from .endpoints.organization_user_issues import OrganizationUserIssuesEndpoint
@@ -618,13 +618,13 @@ urlpatterns = patterns(
     ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/sentry-app-installations/$',
-        OrganizationSentryAppInstallationsEndpoint.as_view(),
-        name='sentry-api-0-organization-sentry-app-installations'
+        SentryAppInstallationsEndpoint.as_view(),
+        name='sentry-api-0-sentry-app-installations'
     ),
     url(
-        r'^organizations/(?P<organization_slug>[^\/]+)/sentry-app-installations/(?P<uuid>[^\/]+)/$',
-        OrganizationSentryAppInstallationDetailsEndpoint.as_view(),
-        name='sentry-api-0-organization-sentry-app-installations-details'
+        r'^sentry-app-installations/(?P<uuid>[^\/]+)/$',
+        SentryAppInstallationDetailsEndpoint.as_view(),
+        name='sentry-api-0-sentry-app-installation-details'
     ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/sentry-apps/$',
diff --git a/src/sentry/features/helpers.py b/src/sentry/features/helpers.py
index 3c3b7a5868..2b8f4a9efb 100644
--- a/src/sentry/features/helpers.py
+++ b/src/sentry/features/helpers.py
@@ -6,6 +6,23 @@ from sentry import features
 
 
 def requires_feature(feature, any_org=None):
+    """
+    Require a feature flag to access an endpoint.
+
+    If ``any_org`` is ``True``, this will check all of the request User's
+    Organizations for the flag. If any are flagged in, the endpoint is accessible.
+
+    Without ``any_org=True``, the endpoint must resolve an Organization via
+    ``convert_args`` (and therefor be in ``kwargs``). The resolved Org must have
+    the passed feature.
+
+    If any failure case, the API returns a 404.
+
+    Example:
+        >>> @requires_feature('organizations:internal-catchall')
+        >>> def get(self, request, organization):
+        >>>     return Response()
+    """
     def decorator(func):
         def wrapped(self, request, *args, **kwargs):
             # The endpoint is accessible if any of the User's Orgs have the feature
diff --git a/src/sentry/models/sentryapp.py b/src/sentry/models/sentryapp.py
index 880d2e14a9..107aa824df 100644
--- a/src/sentry/models/sentryapp.py
+++ b/src/sentry/models/sentryapp.py
@@ -4,6 +4,7 @@ import six
 import uuid
 
 from django.db import models
+from django.db.models import Q
 from django.utils import timezone
 from django.template.defaultfilters import slugify
 
@@ -63,6 +64,15 @@ class SentryApp(ParanoidModel, HasApiScopes):
         app_label = 'sentry'
         db_table = 'sentry_sentryapp'
 
+    @classmethod
+    def visible_for_user(cls, user):
+        if user.is_superuser:
+            return cls.objects.all()
+
+        return cls.objects.filter(
+            Q(status=SentryAppStatus.PUBLISHED) | Q(owner__in=user.get_orgs()),
+        )
+
     @property
     def organizations(self):
         if not self.pk:
@@ -82,6 +92,10 @@ class SentryApp(ParanoidModel, HasApiScopes):
 
         return Team.objects.filter(organization__in=self.organizations)
 
+    @property
+    def is_published(self):
+        return self.status == SentryAppStatus.PUBLISHED
+
     def save(self, *args, **kwargs):
         self._set_slug()
         return super(SentryApp, self).save(*args, **kwargs)
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 0e8b933f39..bb8c62a5d4 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -147,6 +147,7 @@ class BaseTestCase(Fixtures, Exam):
         request.user = user or AnonymousUser()
         request.superuser = Superuser(request)
         request.is_superuser = lambda: request.superuser.is_active
+        request.successful_authenticator = None
         return request
 
     # TODO(dcramer): ideally superuser_sso would be False by default, but that would require
diff --git a/tests/sentry/api/bases/test_sentryapps.py b/tests/sentry/api/bases/test_sentryapps.py
index 3b8fcc5aa3..ab58b82830 100644
--- a/tests/sentry/api/bases/test_sentryapps.py
+++ b/tests/sentry/api/bases/test_sentryapps.py
@@ -1,21 +1,20 @@
 from __future__ import absolute_import
 
-from django.http import HttpRequest
+from django.http import Http404
 
 from sentry.testutils import TestCase
 from sentry.api.bases.sentryapps import (
-    SentryAppDetailsPermission,
-    SentryAppDetailsEndpoint,
-    SentryAppInstallationDetailsPermission,
-    SentryAppInstallationDetailsEndpoint,
+    SentryAppPermission,
+    SentryAppBaseEndpoint,
+    SentryAppInstallationPermission,
+    SentryAppInstallationBaseEndpoint,
 )
-from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.mediators.sentry_app_installations import Creator as SentryAppInstallationCreator
 
 
-class SentryAppDetailsPermissionTest(TestCase):
+class SentryAppPermissionTest(TestCase):
     def setUp(self):
-        self.permission = SentryAppDetailsPermission()
+        self.permission = SentryAppPermission()
         self.user = self.create_user()
         self.org = self.create_organization(owner=self.user)
 
@@ -24,27 +23,26 @@ class SentryAppDetailsPermissionTest(TestCase):
             organization=self.org,
         )
 
-        self.request = HttpRequest()
-        self.request.user = self.user
+        self.request = self.make_request(user=self.user, method='GET')
 
     def test_request_user_is_app_owner_succeeds(self):
         assert self.permission.has_object_permission(self.request, None, self.sentry_app)
 
     def test_request_user_is_not_app_owner_fails(self):
         self.request.user = self.create_user()
-        assert not self.permission.has_object_permission(self.request, None, self.sentry_app)
 
+        with self.assertRaises(Http404):
+            self.permission.has_object_permission(self.request, None, self.sentry_app)
 
-class SentryAppDetailsEndpointTest(TestCase):
+
+class SentryAppBaseEndpointTest(TestCase):
     def setUp(self):
-        self.endpoint = SentryAppDetailsEndpoint()
+        self.endpoint = SentryAppBaseEndpoint()
 
         self.user = self.create_user()
         self.org = self.create_organization(owner=self.user)
 
-        self.request = HttpRequest()
-        self.request.user = self.user
-        self.request.successful_authenticator = True
+        self.request = self.make_request(user=self.user, method='GET')
 
         self.sentry_app = self.create_sentry_app(
             name='foo',
@@ -56,13 +54,13 @@ class SentryAppDetailsEndpointTest(TestCase):
         assert kwargs['sentry_app'] == self.sentry_app
 
     def test_raises_when_sentry_app_not_found(self):
-        with self.assertRaises(ResourceDoesNotExist):
+        with self.assertRaises(Http404):
             self.endpoint.convert_args(self.request, 'notanapp')
 
 
-class SentryAppInstallationDetailsPermissionTest(TestCase):
+class SentryAppInstallationPermissionTest(TestCase):
     def setUp(self):
-        self.permission = SentryAppInstallationDetailsPermission()
+        self.permission = SentryAppInstallationPermission()
 
         self.user = self.create_user()
         self.member = self.create_user()
@@ -72,13 +70,13 @@ class SentryAppInstallationDetailsPermissionTest(TestCase):
             name='foo',
             organization=self.org,
         )
+
         self.installation, _ = SentryAppInstallationCreator.run(
             slug=self.sentry_app.slug,
             organization=self.org,
         )
 
-        self.request = HttpRequest()
-        self.request.user = self.user
+        self.request = self.make_request(user=self.user, method='GET')
 
     def test_missing_request_user(self):
         self.request.user = None
@@ -90,7 +88,7 @@ class SentryAppInstallationDetailsPermissionTest(TestCase):
         )
 
     def test_request_user_in_organization(self):
-        self.request.user = self.member
+        self.request = self.make_request(user=self.member, method='GET')
 
         assert self.permission.has_object_permission(
             self.request,
@@ -99,23 +97,22 @@ class SentryAppInstallationDetailsPermissionTest(TestCase):
         )
 
     def test_request_user_not_in_organization(self):
-        assert not self.permission.has_object_permission(
-            self.request,
-            None,
-            self.installation,
-        )
+        with self.assertRaises(Http404):
+            self.permission.has_object_permission(
+                self.request,
+                None,
+                self.installation,
+            )
 
 
-class SentryAppInstallationDetailsEndpointTest(TestCase):
+class SentryAppInstallationBaseEndpointTest(TestCase):
     def setUp(self):
-        self.endpoint = SentryAppInstallationDetailsEndpoint()
+        self.endpoint = SentryAppInstallationBaseEndpoint()
 
         self.user = self.create_user()
         self.org = self.create_organization(owner=self.user)
 
-        self.request = HttpRequest()
-        self.request.user = self.user
-        self.request.successful_authenticator = True
+        self.request = self.make_request(user=self.user, method='GET')
 
         self.sentry_app = self.create_sentry_app(
             name='foo',
@@ -129,8 +126,8 @@ class SentryAppInstallationDetailsEndpointTest(TestCase):
 
     def test_retrieves_installation(self):
         args, kwargs = self.endpoint.convert_args(self.request, self.installation.uuid)
-        assert kwargs['install'] == self.installation
+        assert kwargs['installation'] == self.installation
 
     def test_raises_when_sentry_app_not_found(self):
-        with self.assertRaises(ResourceDoesNotExist):
+        with self.assertRaises(Http404):
             self.endpoint.convert_args(self.request, '1234')
diff --git a/tests/sentry/api/endpoints/test_organization_sentry_app_installation_details.py b/tests/sentry/api/endpoints/test_organization_sentry_app_installation_details.py
index 25693099f8..6f35b383fa 100644
--- a/tests/sentry/api/endpoints/test_organization_sentry_app_installation_details.py
+++ b/tests/sentry/api/endpoints/test_organization_sentry_app_installation_details.py
@@ -7,38 +7,41 @@ from sentry.testutils.helpers import with_feature
 from sentry.mediators.sentry_app_installations import Creator
 
 
-class OrganizationSentryAppInstallationDetailsTest(APITestCase):
+class SentryAppInstallationDetailsTest(APITestCase):
     def setUp(self):
         self.superuser = self.create_user(email='a@example.com', is_superuser=True)
         self.user = self.create_user(email='boop@example.com')
         self.org = self.create_organization(owner=self.user)
         self.super_org = self.create_organization(owner=self.superuser)
+
         self.published_app = self.create_sentry_app(
             name='Test',
             organization=self.super_org,
             published=True,
         )
+
         self.installation, _ = Creator.run(
             slug=self.published_app.slug,
             organization=self.super_org,
         )
+
         self.unpublished_app = self.create_sentry_app(
             name='Testin',
             organization=self.org,
         )
+
         self.installation2, _ = Creator.run(
             slug=self.unpublished_app.slug,
             organization=self.org,
         )
+
         self.url = reverse(
-            'sentry-api-0-organization-sentry-app-installations-details',
-            args=[
-                self.org.slug,
-                self.installation2.uuid,
-            ])
+            'sentry-api-0-sentry-app-installation-details',
+            args=[self.installation2.uuid],
+        )
 
 
-class GetOrganizationSentryAppInstallationDetailsTest(OrganizationSentryAppInstallationDetailsTest):
+class GetSentryAppInstallationDetailsTest(SentryAppInstallationDetailsTest):
     @with_feature('organizations:internal-catchall')
     def test_access_within_installs_organization(self):
         self.login_as(user=self.user)
@@ -54,19 +57,14 @@ class GetOrganizationSentryAppInstallationDetailsTest(OrganizationSentryAppInsta
     @with_feature('organizations:internal-catchall')
     def test_no_access_outside_install_organization(self):
         self.login_as(user=self.user)
-        url = reverse(
-            'sentry-api-0-organization-sentry-app-installations-details',
-            args=[self.org.slug, self.installation.uuid],
-        )
-        response = self.client.get(url, format='json')
-        assert response.status_code == 404
 
         url = reverse(
-            'sentry-api-0-organization-sentry-app-installations-details',
-            args=[self.super_org.slug, self.installation2.uuid],
+            'sentry-api-0-sentry-app-installation-details',
+            args=[self.installation.uuid],
         )
+
         response = self.client.get(url, format='json')
-        assert response.status_code == 403
+        assert response.status_code == 404
 
     def test_no_access_without_internal_catchall(self):
         self.login_as(user=self.user)
@@ -75,8 +73,7 @@ class GetOrganizationSentryAppInstallationDetailsTest(OrganizationSentryAppInsta
         assert response.status_code == 404
 
 
-class DeleteOrganizationSentryAppInstallationDetailsTest(
-        OrganizationSentryAppInstallationDetailsTest):
+class DeleteSentryAppInstallationDetailsTest(SentryAppInstallationDetailsTest):
     @with_feature('organizations:internal-catchall')
     def test_delete_install(self):
         self.login_as(user=self.user)
diff --git a/tests/sentry/api/endpoints/test_organization_sentry_app_installations.py b/tests/sentry/api/endpoints/test_organization_sentry_app_installations.py
index 56d81832e9..989d0a5aa3 100644
--- a/tests/sentry/api/endpoints/test_organization_sentry_app_installations.py
+++ b/tests/sentry/api/endpoints/test_organization_sentry_app_installations.py
@@ -9,12 +9,13 @@ from sentry.testutils.helpers import with_feature
 from sentry.mediators.sentry_app_installations import Creator
 
 
-class OrganizationSentryAppInstallationsTest(APITestCase):
+class SentryAppInstallationsTest(APITestCase):
     def setUp(self):
         self.superuser = self.create_user(email='a@example.com', is_superuser=True)
         self.user = self.create_user(email='boop@example.com')
         self.org = self.create_organization(owner=self.user)
         self.super_org = self.create_organization(owner=self.superuser)
+
         self.published_app = self.create_sentry_app(
             name='Test',
             organization=self.super_org,
@@ -24,21 +25,24 @@ class OrganizationSentryAppInstallationsTest(APITestCase):
             name='Testin',
             organization=self.org,
         )
+
         self.installation, _ = Creator.run(
             slug=self.published_app.slug,
             organization=self.super_org,
         )
+
         self.installation2, _ = Creator.run(
             slug=self.unpublished_app.slug,
             organization=self.org,
         )
+
         self.url = reverse(
-            'sentry-api-0-organization-sentry-app-installations',
-            args=[
-                self.org.slug])
+            'sentry-api-0-sentry-app-installations',
+            args=[self.org.slug],
+        )
 
 
-class GetOrganizationSentryAppInstallationsTest(OrganizationSentryAppInstallationsTest):
+class GetSentryAppInstallationsTest(SentryAppInstallationsTest):
     @with_feature('organizations:internal-catchall')
     def test_superuser_sees_all_installs(self):
         self.login_as(user=self.superuser, superuser=True)
@@ -52,10 +56,12 @@ class GetOrganizationSentryAppInstallationsTest(OrganizationSentryAppInstallatio
         }]
 
         url = reverse(
-            'sentry-api-0-organization-sentry-app-installations',
+            'sentry-api-0-sentry-app-installations',
             args=[self.super_org.slug],
         )
+
         response = self.client.get(url, format='json')
+
         assert response.status_code == 200
         assert response.data == [{
             'app': self.published_app.slug,
@@ -75,12 +81,14 @@ class GetOrganizationSentryAppInstallationsTest(OrganizationSentryAppInstallatio
             'uuid': self.installation2.uuid,
         }]
 
+        # Org the User is not a part of
         url = reverse(
-            'sentry-api-0-organization-sentry-app-installations',
+            'sentry-api-0-sentry-app-installations',
             args=[self.super_org.slug],
         )
+
         response = self.client.get(url, format='json')
-        assert response.status_code == 403
+        assert response.status_code == 404
 
     def test_no_access_without_internal_catchall(self):
         self.login_as(user=self.user)
@@ -89,7 +97,7 @@ class GetOrganizationSentryAppInstallationsTest(OrganizationSentryAppInstallatio
         assert response.status_code == 404
 
 
-class PostOrganizationSentryAppInstallationsTest(OrganizationSentryAppInstallationsTest):
+class PostSentryAppInstallationsTest(SentryAppInstallationsTest):
     @with_feature('organizations:internal-catchall')
     def test_install_unpublished_app(self):
         self.login_as(user=self.user)
diff --git a/tests/sentry/api/endpoints/test_sentry_app_details.py b/tests/sentry/api/endpoints/test_sentry_app_details.py
index 3e960c6f32..42e3d4238c 100644
--- a/tests/sentry/api/endpoints/test_sentry_app_details.py
+++ b/tests/sentry/api/endpoints/test_sentry_app_details.py
@@ -16,11 +16,23 @@ class SentryAppDetailsTest(APITestCase):
             organization=self.org,
             published=True,
         )
+
         self.unpublished_app = self.create_sentry_app(
             name='Testin',
             organization=self.org,
         )
-        self.url = reverse('sentry-api-0-sentry-app-details', args=[self.published_app.slug])
+
+        self.unowned_unpublished_app = self.create_sentry_app(
+            name='Nosee',
+            organization=self.create_organization(),
+            scopes=(),
+            webhook_url='https://example.com',
+        )
+
+        self.url = reverse(
+            'sentry-api-0-sentry-app-details',
+            args=[self.published_app.slug],
+        )
 
 
 class GetSentryAppDetailsTest(SentryAppDetailsTest):
@@ -37,7 +49,11 @@ class GetSentryAppDetailsTest(SentryAppDetailsTest):
             'webhook_url': self.published_app.webhook_url,
         }
 
-        url = reverse('sentry-api-0-sentry-app-details', args=[self.unpublished_app.slug])
+        url = reverse(
+            'sentry-api-0-sentry-app-details',
+            args=[self.unpublished_app.slug],
+        )
+
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200
@@ -49,23 +65,34 @@ class GetSentryAppDetailsTest(SentryAppDetailsTest):
         }
 
     @with_feature('organizations:internal-catchall')
-    def test_users_only_see_published_apps(self):
+    def test_users_see_published_app(self):
         self.login_as(user=self.user)
-        url = reverse('sentry-api-0-sentry-app-details', args=[self.unpublished_app.slug])
 
         response = self.client.get(self.url, format='json')
-
         assert response.status_code == 200
-        assert response.data == {
-            'name': self.published_app.name,
-            'scopes': [],
-            'uuid': self.published_app.uuid,
-            'webhook_url': self.published_app.webhook_url,
-        }
 
-        url = reverse('sentry-api-0-sentry-app-details', args=[self.unpublished_app.slug])
+    @with_feature('organizations:internal-catchall')
+    def test_users_see_unpublished_apps_owned_by_their_org(self):
+        self.login_as(self.user)
+
+        url = reverse(
+            'sentry-api-0-sentry-app-details',
+            args=[self.unpublished_app.slug],
+        )
+
         response = self.client.get(url, format='json')
+        assert response.status_code == 200
+
+    @with_feature('organizations:internal-catchall')
+    def test_users_do_not_see_unowned_unpublished_apps(self):
+        self.login_as(self.user)
 
+        url = reverse(
+            'sentry-api-0-sentry-app-details',
+            args=[self.unowned_unpublished_app.slug],
+        )
+
+        response = self.client.get(url, format='json')
         assert response.status_code == 404
 
     def test_no_access_without_internal_catchall(self):
@@ -148,4 +175,4 @@ class UpdateSentryAppDetailsTest(SentryAppDetailsTest):
             },
             format='json',
         )
-        assert response.status_code == 403
+        assert response.status_code == 404
diff --git a/tests/sentry/api/endpoints/test_sentry_apps.py b/tests/sentry/api/endpoints/test_sentry_apps.py
index 71af8e11cf..35058de807 100644
--- a/tests/sentry/api/endpoints/test_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_sentry_apps.py
@@ -14,15 +14,25 @@ class SentryAppsTest(APITestCase):
         self.user = self.create_user(email='boop@example.com')
         self.org = self.create_organization(owner=self.user)
         self.super_org = self.create_organization(owner=self.superuser)
+
         self.published_app = self.create_sentry_app(
             name='Test',
             organization=self.org,
             published=True,
         )
+
         self.unpublished_app = self.create_sentry_app(
             name='Testin',
             organization=self.org,
         )
+
+        self.unowned_unpublished_app = self.create_sentry_app(
+            name='Nosee',
+            organization=self.create_organization(),
+            scopes=(),
+            webhook_url='https://example.com',
+        )
+
         self.url = reverse('sentry-api-0-sentry-apps')
 
 
@@ -32,24 +42,51 @@ class GetSentryAppsTest(SentryAppsTest):
         self.login_as(user=self.superuser)
 
         response = self.client.get(self.url, format='json')
+        response_uuids = set(o['uuid'] for o in response.data)
 
         assert response.status_code == 200
-        assert set(o['uuid'] for o in response.data) == set(
-            [self.published_app.uuid, self.unpublished_app.uuid])
+        assert self.published_app.uuid in response_uuids
+        assert self.unpublished_app.uuid in response_uuids
+        assert self.unowned_unpublished_app.uuid in response_uuids
 
     @with_feature('organizations:internal-catchall')
-    def test_users_only_see_published_apps(self):
+    def test_users_see_published_apps(self):
         self.login_as(user=self.user)
 
         response = self.client.get(self.url, format='json')
 
         assert response.status_code == 200
-        assert response.data == [{
+        assert {
             'name': self.published_app.name,
             'scopes': [],
             'uuid': self.published_app.uuid,
             'webhook_url': self.published_app.webhook_url,
-        }]
+        } in response.data
+
+    @with_feature('organizations:internal-catchall')
+    def test_users_see_unpublished_apps_their_org_owns(self):
+        self.login_as(user=self.user)
+
+        response = self.client.get(self.url, format='json')
+
+        assert response.status_code == 200
+        assert {
+            'name': self.unpublished_app.name,
+            'scopes': [],
+            'uuid': self.unpublished_app.uuid,
+            'webhook_url': self.unpublished_app.webhook_url,
+        } in response.data
+
+    @with_feature('organizations:internal-catchall')
+    def test_users_dont_see_unpublished_apps_outside_their_orgs(self):
+        self.login_as(user=self.user)
+
+        response = self.client.get(self.url, format='json')
+
+        assert response.status_code == 200
+        assert self.unowned_unpublished_app.uuid not in [
+            a['uuid'] for a in response.data
+        ]
 
     def test_no_access_without_internal_catchall(self):
         self.login_as(user=self.user)
