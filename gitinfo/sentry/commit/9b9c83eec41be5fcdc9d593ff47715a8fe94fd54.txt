commit 9b9c83eec41be5fcdc9d593ff47715a8fe94fd54
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Jun 7 10:19:33 2014 -0400

    Add tests for fetch_url

diff --git a/tests/sentry/tasks/fetch_source/tests.py b/tests/sentry/tasks/fetch_source/tests.py
index 5f3ad1fd8d..0ac1cebcf2 100644
--- a/tests/sentry/tasks/fetch_source/tests.py
+++ b/tests/sentry/tasks/fetch_source/tests.py
@@ -2,17 +2,83 @@
 
 from __future__ import absolute_import
 
-import mock
+from mock import patch
 
 from sentry.tasks.fetch_source import (
     UrlResult, expand_javascript_source, discover_sourcemap,
-    fetch_sourcemap, generate_module)
+    fetch_sourcemap, fetch_url, generate_module, BAD_SOURCE)
 from sentry.utils.sourcemaps import (SourceMap, SourceMapIndex)
 from sentry.testutils import TestCase
 
 base64_sourcemap = 'data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvdGVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zb2xlLmxvZyhcImhlbGxvLCBXb3JsZCFcIikiXX0='
 
 
+class FetchUrlTest(TestCase):
+    @patch('sentry.tasks.fetch_source.safe_urlopen')
+    @patch('sentry.tasks.fetch_source.safe_urlread')
+    def test_simple(self, safe_urlread, safe_urlopen):
+        safe_urlopen.return_value.headers = (('content-type', 'application/json'),)
+        safe_urlread.return_value = u'foo bar'
+
+        result = fetch_url('http://example.com')
+
+        safe_urlopen.assert_called_once_with(
+            'http://example.com', allow_redirects=True, timeout=5)
+        safe_urlread.assert_called_once_with(safe_urlopen.return_value)
+
+        assert result.url == 'http://example.com'
+        assert result.body == u'foo bar'
+        assert result.headers == {'content-type': 'application/json'}
+
+        # ensure we use the cached result
+        result2 = fetch_url('http://example.com')
+
+        safe_urlopen.assert_called_once()
+
+        assert result == result2
+
+    @patch('sentry.tasks.fetch_source.safe_urlopen')
+    @patch('sentry.tasks.fetch_source.safe_urlread')
+    def test_connection_failure(self, safe_urlread, safe_urlopen):
+        safe_urlopen.side_effect = Exception()
+
+        result = fetch_url('http://example.com')
+
+        safe_urlopen.assert_called_once_with(
+            'http://example.com', allow_redirects=True, timeout=5)
+        assert not safe_urlread.mock_calls
+
+        assert result == BAD_SOURCE
+
+        # ensure we use the cached domain-wide failure for the second call
+        result = fetch_url('http://example.com/foo/bar')
+
+        safe_urlopen.assert_called_once()
+
+        assert result == BAD_SOURCE
+
+    @patch('sentry.tasks.fetch_source.safe_urlopen')
+    @patch('sentry.tasks.fetch_source.safe_urlread')
+    def test_read_failure(self, safe_urlread, safe_urlopen):
+        safe_urlopen.return_value.headers = (('content-type', 'application/json'),)
+        safe_urlread.side_effect = Exception()
+
+        result = fetch_url('http://example.com')
+
+        safe_urlopen.assert_called_once_with(
+            'http://example.com', allow_redirects=True, timeout=5)
+        safe_urlread.assert_called_once_with(safe_urlopen.return_value)
+
+        assert result == BAD_SOURCE
+
+        # ensure we use the cached failure for the second call
+        result = fetch_url('http://example.com')
+
+        safe_urlopen.assert_called_once()
+
+        assert result == BAD_SOURCE
+
+
 class DiscoverSourcemapTest(TestCase):
     # discover_sourcemap(result)
     def test_simple(self):
@@ -43,10 +109,10 @@ class DiscoverSourcemapTest(TestCase):
 
 
 class ExpandJavascriptSourceTest(TestCase):
-    @mock.patch('sentry.models.Event.update')
-    @mock.patch('sentry.tasks.fetch_source.fetch_url')
-    @mock.patch('sentry.tasks.fetch_source.fetch_sourcemap')
-    @mock.patch('sentry.tasks.fetch_source.discover_sourcemap')
+    @patch('sentry.models.Event.update')
+    @patch('sentry.tasks.fetch_source.fetch_url')
+    @patch('sentry.tasks.fetch_source.fetch_sourcemap')
+    @patch('sentry.tasks.fetch_source.discover_sourcemap')
     def test_simple(self, discover_sourcemap, fetch_sourcemap, fetch_url, update):
         data = {
             'sentry.interfaces.Exception': {
@@ -89,9 +155,9 @@ class ExpandJavascriptSourceTest(TestCase):
         assert frame['context_line'] == 'h'
         assert frame['post_context'] == ['e', 'l', 'l', 'o', ' ']
 
-    @mock.patch('sentry.models.Event.update')
-    @mock.patch('sentry.tasks.fetch_source.fetch_url')
-    @mock.patch('sentry.tasks.fetch_source.discover_sourcemap')
+    @patch('sentry.models.Event.update')
+    @patch('sentry.tasks.fetch_source.fetch_url')
+    @patch('sentry.tasks.fetch_source.discover_sourcemap')
     def test_inlined_sources(self, discover_sourcemap, fetch_url, update):
         data = {
             'sentry.interfaces.Exception': {
