commit 1277400304da582425e6d579e0000de44e598f81
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Thu Nov 8 14:54:46 2018 +0100

    fix: Allow null values in most places of an event (#10249)
    
    * fix: Allow null values in breadcrumbs and exceptions interfaces
    
    * fix: Allow null values in stacktraces
    
    * fix: Allow null values in sdk interface
    
    * fix: Allow null values in device interface
    
    * fix: Allow null values in Apple Crash report interface
    
    * fix: Move null-check one level up
    
    * fix: Add test for empty user
    
    * fix: Add test for null values in threads
    
    * fix: Also test thread values
    
    * fix: Allow null values in templates
    
    * fix: Add tests for contexts
    
    * fix: Allow null values in message
    
    * fix: Allow null values in http interface
    
    * fix: Partially allow null in debug_meta
    
    * fix: Allow null in geo interface
    
    * fix: Add tests for correct behavior for null values in arrays
    
    * fix: Crash in save
    
    * fix: Fall back to default eventtype for empty exception values
    
    * fix: Revert exception changes for now
    
    * fix: Make timestamp mandatory again
    
    * fix: Revert changes to http interface
    
    * fix: Revert changes to message interface
    
    * fix: Partially revert changes to stacktrace interface
    
    * fix: Partially revert breadcrumb changes
    
    * fix: Throw away invalid type for values
    
    * fix: Skip null values for now

diff --git a/src/sentry/eventtypes/error.py b/src/sentry/eventtypes/error.py
index 0cab70e640..99dc714938 100644
--- a/src/sentry/eventtypes/error.py
+++ b/src/sentry/eventtypes/error.py
@@ -22,7 +22,13 @@ class ErrorEvent(BaseEvent):
     key = 'error'
 
     def has_metadata(self):
-        return 'sentry.interfaces.Exception' in self.data
+        try:
+            exception = self.data['sentry.interfaces.Exception']['values'][-1]
+            exception['type']
+            exception['value']
+            return True
+        except Exception:
+            return False
 
     def get_metadata(self):
         exception = self.data['sentry.interfaces.Exception']['values'][-1]
diff --git a/src/sentry/interfaces/applecrash.py b/src/sentry/interfaces/applecrash.py
index 2f4b6adbb1..65b782267b 100644
--- a/src/sentry/interfaces/applecrash.py
+++ b/src/sentry/interfaces/applecrash.py
@@ -10,7 +10,7 @@ from __future__ import absolute_import
 
 __all__ = ('AppleCrashReport', )
 
-from sentry.interfaces.base import Interface, InterfaceValidationError
+from sentry.interfaces.base import Interface
 
 
 class AppleCrashReport(Interface):
@@ -27,15 +27,10 @@ class AppleCrashReport(Interface):
 
     @classmethod
     def to_python(cls, data):
-        if not data.get('crash'):
-            raise InterfaceValidationError("No 'crash' present")
-        if not data.get('binary_images'):
-            raise InterfaceValidationError("No 'binary_images' present")
-
         kwargs = {
-            'crash': data['crash'],
+            'crash': data.get('crash'),
             'system': data.get('system') or {},
-            'binary_images': data['binary_images'],
+            'binary_images': data.get('binary_images'),
         }
 
         return cls(**kwargs)
diff --git a/src/sentry/interfaces/breadcrumbs.py b/src/sentry/interfaces/breadcrumbs.py
index 56350e7a16..84c8763bcb 100644
--- a/src/sentry/interfaces/breadcrumbs.py
+++ b/src/sentry/interfaces/breadcrumbs.py
@@ -53,13 +53,17 @@ class Breadcrumbs(Interface):
     def to_python(cls, data):
         values = []
         for crumb in data.get('values') or ():
+            if crumb is None:
+                continue
+
             try:
                 values.append(cls.normalize_crumb(crumb))
             except InterfaceValidationError:
                 # TODO(dcramer): we dont want to discard the entirety of data
                 # when one breadcrumb errors, but it'd be nice if we could still
                 # record an error
-                continue
+                pass
+
         return cls(values=values)
 
     @classmethod
diff --git a/src/sentry/interfaces/contexts.py b/src/sentry/interfaces/contexts.py
index 0a8e8500d8..027cfbb769 100644
--- a/src/sentry/interfaces/contexts.py
+++ b/src/sentry/interfaces/contexts.py
@@ -172,7 +172,8 @@ class Contexts(Interface):
     def to_python(cls, data):
         rv = {}
         for alias, value in six.iteritems(data):
-            rv[alias] = cls.normalize_context(alias, value)
+            if value is not None:
+                rv[alias] = cls.normalize_context(alias, value)
         return cls(**rv)
 
     @classmethod
diff --git a/src/sentry/interfaces/debug_meta.py b/src/sentry/interfaces/debug_meta.py
index c6d07c5d58..75d83173fe 100644
--- a/src/sentry/interfaces/debug_meta.py
+++ b/src/sentry/interfaces/debug_meta.py
@@ -98,13 +98,18 @@ class DebugMeta(Interface):
 
     @classmethod
     def to_python(cls, data):
-        images = data.get('images', [])
-        is_debug_build = data.get('is_debug_build')
+        is_debug_build = data.get('is_debug_build', None)
         if is_debug_build is not None and not isinstance(is_debug_build, bool):
             raise InterfaceValidationError('Invalid value for "is_debug_build"')
 
+        images = []
+        for x in data.get('images', None) or ():
+            if x is None:
+                continue
+            images.append(cls.normalize_image(x))
+
         return cls(
-            images=[cls.normalize_image(x) for x in images],
+            images=images,
             sdk_info=cls.normalize_sdk_info(data.get('sdk_info')),
             is_debug_build=is_debug_build,
         )
diff --git a/src/sentry/interfaces/device.py b/src/sentry/interfaces/device.py
index de2b2742f4..d333b1962f 100644
--- a/src/sentry/interfaces/device.py
+++ b/src/sentry/interfaces/device.py
@@ -29,8 +29,8 @@ class Device(Interface):
         data = data.copy()
 
         extra_data = data.pop('data', data)
-        name = trim(data.pop('name'), 64)
-        version = trim(data.pop('version'), 64)
+        name = trim(data.pop('name', None), 64)
+        version = trim(data.pop('version', None), 64)
         build = trim(data.pop('build', None), 64)
 
         kwargs = {
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 642c93fb8e..8e02a84ea1 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -1012,20 +1012,21 @@ class Exception(Interface):
 
     @classmethod
     def to_python(cls, data):
-        if 'values' not in data:
-            data = {'values': [data]}
+        if data and 'values' not in data and 'exc_omitted' not in data:
+            data = {"values": [data]}
+        values = data.get('values', [])
 
-        if not data['values']:
-            raise InterfaceValidationError("No 'values' present")
+        if values is None:
+            values = []
 
-        if not isinstance(data['values'], list):
+        if not isinstance(values, list):
             raise InterfaceValidationError("Invalid value for 'values'")
 
         kwargs = {
-            'values': [SingleException.to_python(
+            'values': [v and SingleException.to_python(
                 v,
                 slim_frames=False,
-            ) for v in data['values']],
+            ) for v in values],
         }
 
         if data.get('exc_omitted'):
@@ -1042,7 +1043,7 @@ class Exception(Interface):
 
     def to_json(self):
         return {
-            'values': [v.to_json() for v in self.values],
+            'values': [v and v.to_json() for v in self.values],
             'exc_omitted': self.exc_omitted,
         }
 
@@ -1144,7 +1145,7 @@ def slim_exception_data(instance, frame_allowance=settings.SENTRY_MAX_STACKTRACE
     # rather than distributing allowance among all exceptions
     frames = []
     for exception in instance.values:
-        if not exception.stacktrace:
+        if exception is None or not exception.stacktrace:
             continue
         frames.extend(exception.stacktrace.frames)
 
diff --git a/src/sentry/interfaces/http.py b/src/sentry/interfaces/http.py
index 008a777e83..6783ef60cd 100644
--- a/src/sentry/interfaces/http.py
+++ b/src/sentry/interfaces/http.py
@@ -140,7 +140,10 @@ class Http(Interface):
         else:
             kwargs['method'] = None
 
-        scheme, netloc, path, query_bit, fragment_bit = urlsplit(data['url'])
+        if data.get('url', None):
+            scheme, netloc, path, query_bit, fragment_bit = urlsplit(data['url'])
+        else:
+            scheme = netloc = path = query_bit = fragment_bit = None
 
         query_string = data.get('query_string') or query_bit
         if query_string:
diff --git a/src/sentry/interfaces/schemas.py b/src/sentry/interfaces/schemas.py
index cbfe463fdb..f02422f010 100644
--- a/src/sentry/interfaces/schemas.py
+++ b/src/sentry/interfaces/schemas.py
@@ -87,10 +87,7 @@ HTTP_INTERFACE_SCHEMA = {
 FRAME_INTERFACE_SCHEMA = {
     'type': 'object',
     'properties': {
-        'abs_path': {
-            'type': 'string',
-            'default': iverror,
-        },
+        'abs_path': {'type': 'string'},
         'colno': {'type': ['number', 'string']},
         'context_line': {'type': 'string'},
         'data': {
@@ -100,10 +97,7 @@ FRAME_INTERFACE_SCHEMA = {
             ]
         },
         'errors': {},
-        'filename': {
-            'type': 'string',
-            'default': iverror,
-        },
+        'filename': {'type': 'string'},
         'function': {'type': 'string'},
         'image_addr': {},
         'in_app': {'type': 'boolean', 'default': False},
@@ -111,10 +105,7 @@ FRAME_INTERFACE_SCHEMA = {
         'instruction_offset': {},
         'trust': {'type': 'string'},
         'lineno': {'type': ['number', 'string']},
-        'module': {
-            'type': 'string',
-            'default': iverror,
-        },
+        'module': {'type': 'string'},
         'package': {'type': 'string'},
         'platform': {
             'type': 'string',
@@ -143,7 +134,7 @@ STACKTRACE_INTERFACE_SCHEMA = {
         'frames': {
             'type': 'array',
             # To validate individual frames use FRAME_INTERFACE_SCHEMA
-            'items': {'type': 'object'},
+            'items': {},
             'minItems': 1,
         },
         'frames_omitted': {
@@ -250,10 +241,6 @@ EXCEPTION_INTERFACE_SCHEMA = {
             },
         },
     },
-    'anyOf': [  # Require at least one of these keys.
-        {'required': ['type']},
-        {'required': ['value']},
-    ],
     # TODO should be false but allowing extra garbage for now
     # for compatibility
     'additionalProperties': True,
@@ -286,7 +273,6 @@ DEVICE_INTERFACE_SCHEMA = {
             'default': {},
         },
     },
-    'required': ['name', 'version'],
 }
 
 TEMPLATE_INTERFACE_SCHEMA = {'type': 'object'}  # TODO fill this out
diff --git a/src/sentry/interfaces/sdk.py b/src/sentry/interfaces/sdk.py
index d61eb5cff7..22495bab93 100644
--- a/src/sentry/interfaces/sdk.py
+++ b/src/sentry/interfaces/sdk.py
@@ -49,12 +49,7 @@ class Sdk(Interface):
     @classmethod
     def to_python(cls, data):
         name = data.get('name')
-        if not name:
-            raise InterfaceValidationError("No 'name' value")
-
         version = data.get('version')
-        if not version:
-            raise InterfaceValidationError("No 'version' value")
 
         integrations = data.get('integrations')
         if integrations and not isinstance(integrations, list):
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 04b3b05b9d..df999a53cf 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -214,7 +214,7 @@ def slim_frame_data(frames, frame_allowance=settings.SENTRY_MAX_STACKTRACE_FRAME
     system_frames = []
     for frame in frames:
         frames_len += 1
-        if frame.in_app:
+        if frame is not None and frame.in_app:
             app_frames.append(frame)
         else:
             system_frames.append(frame)
@@ -326,11 +326,6 @@ class Frame(Interface):
                 else:
                     filename = abs_path
 
-        if not (filename or function or module or package):
-            raise InterfaceValidationError(
-                "No 'filename' or 'function' or 'module' or 'package'"
-            )
-
         platform = data.get('platform')
 
         context_locals = data.get('vars') or {}
@@ -717,15 +712,18 @@ class Stacktrace(Interface):
 
         # Trim down the frame list to a hard limit. Leave the last frame in place in case
         # it's useful for debugging.
-        frameiter = data['frames']
-        if len(data['frames']) > settings.SENTRY_STACKTRACE_FRAMES_HARD_LIMIT:
+        frameiter = data.get('frames') or []
+        if len(frameiter) > settings.SENTRY_STACKTRACE_FRAMES_HARD_LIMIT:
             frameiter = chain(
                 islice(data['frames'], settings.SENTRY_STACKTRACE_FRAMES_HARD_LIMIT - 1), (data['frames'][-1],))
 
-        frame_list = [
+        frame_list = []
+
+        for f in frameiter:
+            if f is None:
+                continue
             # XXX(dcramer): handle PHP sending an empty array for a frame
-            Frame.to_python(f or {}, raw=raw) for f in frameiter
-        ]
+            frame_list.append(Frame.to_python(f or {}, raw=raw))
 
         kwargs = {
             'frames': frame_list,
@@ -735,10 +733,7 @@ class Stacktrace(Interface):
         if data.get('registers') and isinstance(data['registers'], dict):
             kwargs['registers'] = data.get('registers')
 
-        if data.get('frames_omitted'):
-            kwargs['frames_omitted'] = data['frames_omitted']
-        else:
-            kwargs['frames_omitted'] = None
+        kwargs['frames_omitted'] = data.get('frames_omitted') or None
 
         instance = cls(**kwargs)
         if slim_frames:
@@ -791,7 +786,7 @@ class Stacktrace(Interface):
 
     def to_json(self):
         return {
-            'frames': [f.to_json() for f in self.frames],
+            'frames': [f and f.to_json() for f in self.frames],
             'frames_omitted': self.frames_omitted,
             'registers': self.registers,
         }
diff --git a/src/sentry/interfaces/template.py b/src/sentry/interfaces/template.py
index 4477cd7c1e..6d7b615c57 100644
--- a/src/sentry/interfaces/template.py
+++ b/src/sentry/interfaces/template.py
@@ -9,7 +9,7 @@ from __future__ import absolute_import
 
 __all__ = ('Template', )
 
-from sentry.interfaces.base import Interface, InterfaceValidationError
+from sentry.interfaces.base import Interface
 from sentry.interfaces.stacktrace import get_context
 from sentry.utils.safe import trim
 
@@ -42,18 +42,11 @@ class Template(Interface):
 
     @classmethod
     def to_python(cls, data):
-        if not data.get('filename'):
-            raise InterfaceValidationError("Missing 'filename'")
-        if not data.get('context_line'):
-            raise InterfaceValidationError("Missing 'context_line'")
-        if not data.get('lineno'):
-            raise InterfaceValidationError("Missing 'lineno'")
-
         kwargs = {
             'abs_path': trim(data.get('abs_path', None), 256),
-            'filename': trim(data['filename'], 256),
+            'filename': trim(data.get('filename', None), 256),
             'context_line': trim(data.get('context_line', None), 256),
-            'lineno': int(data['lineno']),
+            'lineno': int(data['lineno']) if data.get('lineno', None) is not None else None,
             # TODO(dcramer): trim pre/post_context
             'pre_context': data.get('pre_context'),
             'post_context': data.get('post_context'),
diff --git a/src/sentry/interfaces/threads.py b/src/sentry/interfaces/threads.py
index c78a12dfe1..18d847847f 100644
--- a/src/sentry/interfaces/threads.py
+++ b/src/sentry/interfaces/threads.py
@@ -23,6 +23,8 @@ class Threads(Interface):
         threads = []
 
         for thread in data.get('values') or ():
+            if thread is None:
+                continue
             threads.append(
                 {
                     'stacktrace': get_stacktrace(thread.get('stacktrace')),
@@ -38,12 +40,15 @@ class Threads(Interface):
 
     def to_json(self):
         def export_thread(data):
+            if data is None:
+                return None
+
             rv = {
                 'id': data['id'],
                 'current': data['current'],
                 'crashed': data['crashed'],
                 'name': data['name'],
-                'stacktrace': None,
+                'stacktrace': None
             }
             if data['stacktrace']:
                 rv['stacktrace'] = data['stacktrace'].to_json()
diff --git a/tests/sentry/interfaces/test_applecrashreport.py b/tests/sentry/interfaces/test_applecrashreport.py
index c08d18d471..05008b1e8a 100644
--- a/tests/sentry/interfaces/test_applecrashreport.py
+++ b/tests/sentry/interfaces/test_applecrashreport.py
@@ -42,6 +42,15 @@ class AppleCrashReportTest(TestCase):
             )
         )
 
+    def test_null_values(self):
+        sink = {}
+
+        assert AppleCrashReport.to_python({}).to_json() == sink
+        assert AppleCrashReport.to_python({"binary_images": None}).to_json() == sink
+        assert AppleCrashReport.to_python({"binary_images": []}).to_json() == sink
+        assert AppleCrashReport.to_python({"binary_images": [None]}).to_json() == {
+            "binary_images": [None]}
+
     def test_path(self):
         assert self.interface.get_path() == 'sentry.interfaces.AppleCrashReport'
 
diff --git a/tests/sentry/interfaces/test_breadcrumbs.py b/tests/sentry/interfaces/test_breadcrumbs.py
index 7fd1e4fc9c..90e4c09e1e 100644
--- a/tests/sentry/interfaces/test_breadcrumbs.py
+++ b/tests/sentry/interfaces/test_breadcrumbs.py
@@ -31,6 +31,19 @@ class BreadcrumbsTest(TestCase):
         assert abs(ts - 1458857193.973275) < 0.001
         assert result.values[0]['data'] == {'message': 'Whats up dawg?'}
 
+    def test_null_values(self):
+        sink = {}
+
+        assert Breadcrumbs.to_python({}).to_json() == sink
+        assert Breadcrumbs.to_python({'values': None}).to_json() == sink
+        assert Breadcrumbs.to_python({'values': []}).to_json() == sink
+
+        # TODO(markus): The following cases should eventually generate {"values": [None]}
+        assert Breadcrumbs.to_python({'values': [{}]}).to_json() == sink
+        assert Breadcrumbs.to_python({'values': [{"type": None}]}).to_json() == sink
+
+        assert Breadcrumbs.to_python({'values': [None]}).to_json() == sink
+
     def test_non_string_keys(self):
         result = Breadcrumbs.to_python(
             dict(
diff --git a/tests/sentry/interfaces/test_contexts.py b/tests/sentry/interfaces/test_contexts.py
index 0b69a219fb..d77918f842 100644
--- a/tests/sentry/interfaces/test_contexts.py
+++ b/tests/sentry/interfaces/test_contexts.py
@@ -29,6 +29,11 @@ class ContextsTest(TestCase):
             }
         }
 
+    def test_null_values(self):
+        assert Contexts.to_python({'os': None}).to_json() == {}
+        assert Contexts.to_python({'os': {}}).to_json() == {'os': {'type': 'os'}}
+        assert Contexts.to_python({'os': {'name': None}}).to_json() == {'os': {'type': 'os'}}
+
     def test_os_normalization(self):
         ctx = Contexts.to_python({
             'os': {
diff --git a/tests/sentry/interfaces/test_debug_meta.py b/tests/sentry/interfaces/test_debug_meta.py
index 974cf73b81..f5262a2c22 100644
--- a/tests/sentry/interfaces/test_debug_meta.py
+++ b/tests/sentry/interfaces/test_debug_meta.py
@@ -7,6 +7,13 @@ from sentry.testutils import TestCase
 
 
 class DebugMetaTest(TestCase):
+    def test_null_values(self):
+        assert DebugMeta.to_python({}).to_json() == {}
+        assert DebugMeta.to_python({"images": None}).to_json() == {}
+
+        # TODO(markus): Should eventually generate {"images": [None]}
+        assert DebugMeta.to_python({"images": [None]}).to_json() == {}
+
     def test_apple_behavior(self):
         image_name = (
             '/var/containers/Bundle/Application/'
diff --git a/tests/sentry/interfaces/test_device.py b/tests/sentry/interfaces/test_device.py
index 953d2c495c..c3e5681ede 100644
--- a/tests/sentry/interfaces/test_device.py
+++ b/tests/sentry/interfaces/test_device.py
@@ -2,9 +2,6 @@
 
 from __future__ import absolute_import
 
-import pytest
-
-from sentry.interfaces.base import InterfaceValidationError
 from sentry.interfaces.device import Device
 from sentry.testutils import TestCase
 
@@ -19,17 +16,25 @@ class DeviceTest(TestCase):
             'version': '95',
         }
 
+    def test_null_values(self):
+        sink = {}
+
+        assert Device.to_python({}).to_json() == sink
+        assert Device.to_python({'name': None}).to_json() == sink
+
     def test_missing_name(self):
-        with pytest.raises(InterfaceValidationError):
-            assert Device.to_python({
-                'version': '95',
-            })
+        assert Device.to_python({
+            'version': '95',
+        }).to_json() == {
+            'version': '95',
+        }
 
     def test_missing_version(self):
-        with pytest.raises(InterfaceValidationError):
-            assert Device.to_python({
-                'name': 'Windows',
-            })
+        assert Device.to_python({
+            'name': 'Windows',
+        }).to_json() == {
+            'name': 'Windows',
+        }
 
     def test_path(self):
         assert Device().get_path() == 'device'
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index 7cbcf61d3a..f0159725bb 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -43,6 +43,27 @@ class ExceptionTest(TestCase):
             )
         )
 
+    def test_null_values(self):
+        sink = {'exc_omitted': None, 'values': []}
+        assert Exception.to_python({}).to_json() == sink
+        assert Exception.to_python({'exc_omitted': None}).to_json() == sink
+        assert Exception.to_python({'values': None}).to_json() == sink
+        assert Exception.to_python({'values': []}).to_json() == sink
+        assert Exception.to_python({'values': [None]}).to_json() == {
+            "exc_omitted": None, "values": [None]}
+
+    def test_does_not_wrap_if_exception_omitted_present(self):
+        input = {
+            "exc_omitted": None,
+            "mechanism": {
+                "handled": True, "type": "generic"
+            }
+        }
+        assert Exception.to_python(input).to_json() == {
+            "exc_omitted": None,
+            "values": [],
+        }
+
     def test_path(self):
         assert self.interface.get_path() == 'sentry.interfaces.Exception'
 
diff --git a/tests/sentry/interfaces/test_geo.py b/tests/sentry/interfaces/test_geo.py
index 6b680b6cb8..e04e008d2f 100644
--- a/tests/sentry/interfaces/test_geo.py
+++ b/tests/sentry/interfaces/test_geo.py
@@ -18,6 +18,13 @@ class GeoTest(TestCase):
             'region': 'CA',
         }
 
+    def test_null_values(self):
+        sink = {}
+        assert Geo.to_python({}).to_json() == sink
+        assert Geo.to_python({"country_code": None}).to_json() == sink
+        assert Geo.to_python({"city": None}).to_json() == sink
+        assert Geo.to_python({"region": None}).to_json() == sink
+
     @mock.patch('sentry.interfaces.geo.geo_by_addr')
     def test_from_ip_address(self, geo_by_addr_mock):
         geo_by_addr_mock.return_value = {
diff --git a/tests/sentry/interfaces/test_sdk.py b/tests/sentry/interfaces/test_sdk.py
index 0d4526d6a1..8fc3bde889 100644
--- a/tests/sentry/interfaces/test_sdk.py
+++ b/tests/sentry/interfaces/test_sdk.py
@@ -2,9 +2,6 @@
 
 from __future__ import absolute_import
 
-import pytest
-
-from sentry.interfaces.base import InterfaceValidationError
 from sentry.interfaces.sdk import Sdk
 from sentry.testutils import TestCase
 
@@ -29,17 +26,27 @@ class SdkTest(TestCase):
             }],
         }
 
+    def test_null_values(self):
+        sink = {}
+        assert Sdk.to_python({}).to_json() == sink
+        assert Sdk.to_python({'name': None}).to_json() == sink
+        assert Sdk.to_python({'integrations': []}).to_json() == sink
+        assert Sdk.to_python({'packages': None}).to_json() == sink
+        assert Sdk.to_python({'packages': [None]}).to_json() == {"packages": [None]}
+
     def test_missing_name(self):
-        with pytest.raises(InterfaceValidationError):
-            assert Sdk.to_python({
-                'version': '1.0',
-            })
+        assert Sdk.to_python({
+            'version': '1.0',
+        }).to_json() == {
+            'version': '1.0',
+        }
 
     def test_missing_version(self):
-        with pytest.raises(InterfaceValidationError):
-            assert Sdk.to_python({
-                'name': 'sentry-unity',
-            })
+        assert Sdk.to_python({
+            'name': 'sentry-unity',
+        }).to_json() == {
+            'name': 'sentry-unity',
+        }
 
     def test_path(self):
         assert Sdk().get_path() == 'sdk'
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index 66083bd30d..1d7df01162 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -9,7 +9,6 @@ from django.conf import settings
 from django.template.loader import render_to_string
 from exam import fixture
 
-from sentry.interfaces.base import InterfaceValidationError
 from sentry.interfaces.stacktrace import (Frame, Stacktrace, get_context, is_url, slim_frame_data)
 from sentry.models import Event
 from sentry.testutils import TestCase
@@ -49,6 +48,17 @@ class StacktraceTest(TestCase):
             )
         )
 
+    def test_null_values(self):
+        # TODO(markus): Should eventually generate frames: [None]
+        assert Stacktrace.to_python({'frames': [None]}).to_json() == \
+            {'frames': [], 'frames_omitted': None, 'registers': None}
+
+    def test_null_values_in_frames(self):
+        sink = {'frames': [{}], 'frames_omitted': None, 'registers': None}
+
+        assert Stacktrace.to_python({'frames': [{}]}).to_json() == sink
+        assert Stacktrace.to_python({'frames': [{'abs_path': None}]}).to_json() == sink
+
     def test_legacy_interface(self):
         # Simple test to ensure legacy data works correctly with the ``Frame``
         # objects
@@ -57,10 +67,7 @@ class StacktraceTest(TestCase):
         assert len(interface.frames) == 2
         assert interface == event.interfaces['sentry.interfaces.Stacktrace']
 
-    def test_requires_filename(self):
-        with self.assertRaises(InterfaceValidationError):
-            Stacktrace.to_python(dict(frames=[{}]))
-
+    def test_filename(self):
         Stacktrace.to_python(dict(frames=[{
             'filename': 'foo.py',
         }]))
@@ -69,16 +76,6 @@ class StacktraceTest(TestCase):
             'filename': 'foo.py',
         }]))
 
-    def test_requires_frames(self):
-        with self.assertRaises(InterfaceValidationError):
-            Stacktrace.to_python({})
-
-        with self.assertRaises(InterfaceValidationError):
-            Stacktrace.to_python(dict(frames=[]))
-
-        with self.assertRaises(InterfaceValidationError):
-            Stacktrace.to_python(dict(frames=1))
-
     def test_allows_abs_path_without_filename(self):
         interface = Stacktrace.to_python(
             dict(frames=[{
@@ -880,31 +877,26 @@ class StacktraceTest(TestCase):
         )
 
     def test_bad_input(self):
-        with self.assertRaises(InterfaceValidationError):
-            Frame.to_python({
-                'filename': 1,
-            })
-
-        with self.assertRaises(InterfaceValidationError):
-            Frame.to_python({
-                'filename': 'foo',
-                'abs_path': 1,
-            })
-
-        with self.assertRaises(InterfaceValidationError):
-            Frame.to_python({
-                'function': 1,
-            })
-
-        with self.assertRaises(InterfaceValidationError):
-            Frame.to_python({
-                'module': 1,
-            })
-
-        with self.assertRaises(InterfaceValidationError):
-            Frame.to_python({
-                'function': '?',
-            })
+        assert Frame.to_python({
+            'filename': 1,
+        }).filename is None
+
+        assert Frame.to_python({
+            'filename': 'foo',
+            'abs_path': 1,
+        }).abs_path == 'foo'
+
+        assert Frame.to_python({
+            'function': 1,
+        }).function is None
+
+        assert Frame.to_python({
+            'module': 1,
+        }).module is None
+
+        assert Frame.to_python({
+            'function': '?',
+        }).function is None
 
     def test_context_with_nan(self):
         self.assertEquals(
diff --git a/tests/sentry/interfaces/test_template.py b/tests/sentry/interfaces/test_template.py
index baf0d2bca0..360ad6d02f 100644
--- a/tests/sentry/interfaces/test_template.py
+++ b/tests/sentry/interfaces/test_template.py
@@ -28,6 +28,13 @@ class TemplateTest(TestCase):
         self.assertEquals(result['context_line'], 'hello world')
         self.assertEquals(result['lineno'], 1)
 
+    def test_null_values(self):
+        sink = {}
+
+        assert Template.to_python({}).to_json() == sink
+        assert Template.to_python({"lineno": None}).to_json() == sink
+        assert Template.to_python({"lineno": 0}).to_json() == {"lineno": 0}
+
     def test_get_hash(self):
         result = self.interface.get_hash()
         self.assertEquals(result, ['foo.html', 'hello world'])
diff --git a/tests/sentry/interfaces/test_threads.py b/tests/sentry/interfaces/test_threads.py
index d38528222b..c5d316fea4 100644
--- a/tests/sentry/interfaces/test_threads.py
+++ b/tests/sentry/interfaces/test_threads.py
@@ -56,6 +56,29 @@ class ThreadsTest(TestCase):
         assert context['values'][0]['crashed'] is False
         assert context['values'][0]['current'] is True
 
+    def test_null_values(self):
+        sink = {"values": []}
+        assert Threads.to_python({}).to_json() == sink
+        assert Threads.to_python({'values': []}).to_json() == sink
+        assert Threads.to_python({'values': None}).to_json() == sink
+
+        # TODO(markus): Should eventually generate values: [None]
+        assert Threads.to_python({"values": [None]}).to_json() == sink
+
+    def test_null_values_in_values(self):
+        sink = {"values": [{
+            "crashed": False,
+            "current": False,
+            "id": None,
+            "name": None,
+            "stacktrace": None
+        }]}
+
+        assert Threads.to_python({"values": [{}]}).to_json() == sink
+        assert Threads.to_python({"values": [{"id": None}]}).to_json() == sink
+        assert Threads.to_python({"values": [{"name": None}]}).to_json() == sink
+        assert Threads.to_python({"values": [{"stacktrace": None}]}).to_json() == sink
+
     def test_get_hash(self):
         result = self.interface.get_hash()
         self.assertEquals(result, [['foo/baz.c', 'main']])
diff --git a/tests/sentry/interfaces/test_user.py b/tests/sentry/interfaces/test_user.py
index a5ca36836d..7944bea714 100644
--- a/tests/sentry/interfaces/test_user.py
+++ b/tests/sentry/interfaces/test_user.py
@@ -23,6 +23,11 @@ class UserTest(TestCase):
             favorite_color='brown',
         ))
 
+    def test_null_values(self):
+        sink = {}
+
+        assert User.to_python({}).to_json() == sink
+
     def test_path(self):
         assert self.interface.get_path() == 'sentry.interfaces.User'
 
