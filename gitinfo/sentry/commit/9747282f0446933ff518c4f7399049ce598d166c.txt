commit 9747282f0446933ff518c4f7399049ce598d166c
Author: ted kaemming <ted@kaemming.com>
Date:   Fri Feb 17 14:33:16 2017 -0800

    Add API endpoint for retrieving similar issues. (#4930)

diff --git a/src/sentry/api/endpoints/group_similar_issues.py b/src/sentry/api/endpoints/group_similar_issues.py
new file mode 100644
index 0000000000..608a008f0f
--- /dev/null
+++ b/src/sentry/api/endpoints/group_similar_issues.py
@@ -0,0 +1,41 @@
+from __future__ import absolute_import
+
+import functools
+
+from rest_framework.response import Response
+
+from sentry.api.bases.group import GroupEndpoint
+from sentry.api.serializers import serialize
+from sentry.models import Group
+from sentry.similarity import features
+from sentry.utils.functional import apply_values
+
+
+class GroupSimilarIssuesEndpoint(GroupEndpoint):
+    def get(self, request, group):
+        # TODO(tkaemming): This should have a limit somewhere.
+        results = filter(
+            lambda (group_id, scores): group_id != group.id,
+            features.query(group)
+        )
+
+        serialized_groups = apply_values(
+            functools.partial(serialize, user=request.user),
+            Group.objects.in_bulk([group_id for group_id, scores in results])
+        )
+
+        # TODO(tkaemming): This should log when we filter out a group that is
+        # unable to be retrieved from the database. (This will soon be
+        # unexpected behavior, but still possible.)
+        return Response(
+            filter(
+                lambda (group_id, scores): group_id is not None,
+                map(
+                    lambda (group_id, scores): (
+                        serialized_groups.get(group_id),
+                        scores,
+                    ),
+                    results,
+                ),
+            ),
+        )
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index c95cf990f4..54ed752ccf 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -17,6 +17,7 @@ from .endpoints.group_hashes import GroupHashesEndpoint
 from .endpoints.group_notes import GroupNotesEndpoint
 from .endpoints.group_notes_details import GroupNotesDetailsEndpoint
 from .endpoints.group_participants import GroupParticipantsEndpoint
+from .endpoints.group_similar_issues import GroupSimilarIssuesEndpoint
 from .endpoints.group_stats import GroupStatsEndpoint
 from .endpoints.group_tags import GroupTagsEndpoint
 from .endpoints.group_tagkey_details import GroupTagKeyDetailsEndpoint
@@ -384,6 +385,9 @@ urlpatterns = patterns(
     url(r'^(?:issues|groups)/(?P<issue_id>\d+)/(?:user-feedback|user-reports)/$',
         GroupUserReportsEndpoint.as_view(),
         name='sentry-api-0-group-user-reports'),
+    url(r'^(?:issues|groups)/(?P<issue_id>\d+)/similar/$',
+        GroupSimilarIssuesEndpoint.as_view(),
+        name='sentry-api-0-group-similar-issues'),
     # Load plugin group urls
     url(r'^(?:issues|groups)/(?P<issue_id>\d+)/plugins?/',
         include('sentry.plugins.base.group_api_urls')),
diff --git a/src/sentry/utils/functional.py b/src/sentry/utils/functional.py
index 530f0428f9..ab66769d71 100644
--- a/src/sentry/utils/functional.py
+++ b/src/sentry/utils/functional.py
@@ -15,3 +15,27 @@ def extract_lazy_object(lo):
     if lo._wrapped is empty:
         lo._setup()
     return lo._wrapped
+
+
+def apply_values(function, mapping):
+    """\
+    Applies ``function`` to a sequence containing all of the values in the
+    provided mapping, returing a new mapping with the values replaced with
+    the results of the provided function.
+
+    >>> apply_values(
+    ...   lambda values: map(u'{} fish'.format, values),
+    ...   {1: 'red', 2: 'blue'},
+    ... )
+    {1: u'red fish', 2: u'blue fish'}
+    """
+    if not mapping:
+        return {}
+
+    keys, values = zip(*mapping.items())
+    return dict(
+        zip(
+            keys,
+            function(values),
+        ),
+    )
