commit fbb1f061699e8d36f516106a6b338550a3cf2f14
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 19 11:48:50 2017 -0700

    feat(integrations): Add Integration abstraction
    
    Implements the first large chunk of work to support new integrations, including:
    
    - the ``Integration`` base implementation (sentry.integrations.base.Integration)
    - a basic pipeline flow for connecting a new integration
    - an example integration for testing and qa purposes
    - an initial pass of integrations management UI

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index cb8e77464f..77a5960d78 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -202,6 +202,9 @@ class Endpoint(APIView):
             ]
         )
 
+    def respond(self, context=None, **kwargs):
+        return Response(context, **kwargs)
+
     def paginate(
         self, request, on_results=None, paginator_cls=Paginator, default_per_page=100, **kwargs
     ):
diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index fa623287cb..36e86cb55c 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -72,6 +72,15 @@ class OrganizationReleasePermission(OrganizationPermission):
     }
 
 
+class OrganizationIntegrationsPermission(OrganizationPermission):
+    scope_map = {
+        'GET': ['org:read', 'org:write', 'org:admin', 'org:integrations'],
+        'POST': ['org:write', 'org:admin', 'org:integrations'],
+        'PUT': ['org:write', 'org:admin', 'org:integrations'],
+        'DELETE': ['org:admin', 'org:integrations'],
+    }
+
+
 class OrganizationEndpoint(Endpoint):
     permission_classes = (OrganizationPermission, )
 
diff --git a/src/sentry/api/endpoints/organization_config_integrations.py b/src/sentry/api/endpoints/organization_config_integrations.py
new file mode 100644
index 0000000000..6a659efcb7
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_config_integrations.py
@@ -0,0 +1,27 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry import integrations
+from sentry.api.bases.organization import OrganizationEndpoint
+
+
+class OrganizationConfigIntegrationsEndpoint(OrganizationEndpoint):
+    def get(self, request, organization):
+        providers = []
+        for provider in integrations.all():
+            providers.append(
+                {
+                    'id': provider.id,
+                    'name': provider.name,
+                    'config': provider.get_config(),
+                    'setupUri': '/organizations/{}/integrations/{}/setup/'.format(
+                        organization.slug,
+                        provider.id,
+                    )
+                }
+            )
+
+        return Response({
+            'providers': providers,
+        })
diff --git a/src/sentry/api/endpoints/organization_integration_details.py b/src/sentry/api/endpoints/organization_integration_details.py
new file mode 100644
index 0000000000..088f51c798
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_integration_details.py
@@ -0,0 +1,44 @@
+from __future__ import absolute_import
+
+from sentry import features
+from sentry.api.bases.organization import (
+    OrganizationEndpoint, OrganizationIntegrationsPermission
+)
+from sentry.api.serializers import serialize
+from sentry.models import Integration, OrganizationIntegration
+
+
+class OrganizationIntegrationDetailsEndpoint(OrganizationEndpoint):
+    permission_classes = (OrganizationIntegrationsPermission, )
+
+    def has_feature(self, request, organization):
+        return features.has(
+            'organizations:integrations-v3',
+            organization=organization,
+            actor=request.user,
+        )
+
+    def get(self, request, organization, integration_id):
+        if not self.has_feature(request, organization):
+            return self.respond({'detail': ['You do not have that feature enabled']}, status=400)
+
+        integration = Integration.objects.get(
+            organizations=organization,
+            id=integration_id,
+        )
+
+        return self.respond(serialize(integration, request.user))
+
+    def delete(self, request, organization, integration_id):
+        if not self.has_feature(request, organization):
+            return self.respond({'detail': ['You do not have that feature enabled']}, status=400)
+
+        integration = Integration.objects.get(
+            organizations=organization,
+            id=integration_id,
+        )
+        OrganizationIntegration.objects.filter(
+            integration=integration,
+            organization=organization,
+        ).delete()
+        return self.respond(status=204)
diff --git a/src/sentry/api/endpoints/organization_integrations.py b/src/sentry/api/endpoints/organization_integrations.py
index 50f8c2c97b..87a1c07cf0 100644
--- a/src/sentry/api/endpoints/organization_integrations.py
+++ b/src/sentry/api/endpoints/organization_integrations.py
@@ -1,30 +1,17 @@
 from __future__ import absolute_import
 
-from rest_framework import serializers
-from rest_framework.response import Response
-
 from sentry import features
-from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.bases.organization import (
+    OrganizationEndpoint, OrganizationIntegrationsPermission
+)
+from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
-from sentry.api.serializers.models.provider import ProviderSerializer
-from sentry.exceptions import PluginError
-from sentry.plugins import bindings
-
-
-class IntegrationSerializer(serializers.Serializer):
-    provider = serializers.CharField(max_length=64, required=True)
-    defaultAuthId = serializers.IntegerField(required=False)
-    integrationId = serializers.IntegerField(required=False)
-
-    def validate(self, attrs):
-        if not (attrs.get('defaultAuthId') or attrs.get('integrationId')):
-            raise serializers.ValidationError(
-                'You must either provide a defaultAuthId or an integrationId'
-            )
-        return attrs
+from sentry.models import Integration
 
 
 class OrganizationIntegrationsEndpoint(OrganizationEndpoint):
+    permission_classes = (OrganizationIntegrationsPermission, )
+
     def has_feature(self, request, organization):
         return features.has(
             'organizations:integrations-v3',
@@ -34,63 +21,12 @@ class OrganizationIntegrationsEndpoint(OrganizationEndpoint):
 
     def get(self, request, organization):
         if not self.has_feature(request, organization):
-            return Response({'detail': ['You do not have that feature enabled']}, status=400)
-
-        # Right now, this is just repository providers, but in
-        # theory we want it to also work for other types of plugins
-        # in the future
-        return Response(
-            serialize(
-                [
-                    provider_cls(id=provider_id)
-                    for provider_id, provider_cls in bindings.get('repository.provider').all()
-                ],
-                request.user,
-                ProviderSerializer(organization)
-            )
-        )
-
-    def post(self, request, organization):
-        if not self.has_feature(request, organization):
-            return Response({'detail': ['You do not have that feature enabled']}, status=400)
-
-        serializer = IntegrationSerializer(data=request.DATA)
-
-        if not serializer.is_valid():
-            return Response(serializer.errors, status=400)
-
-        result = serializer.object
-
-        provider_id = result['provider']
-
-        try:
-            provider_cls = bindings.get('repository.provider').get(provider_id)
-        except KeyError:
-            return Response(
-                {
-                    'error_type': 'validation',
-                }, status=400
-            )
-
-        provider = provider_cls(id=provider_id)
-
-        try:
-            # raise if they're trying to link an auth they
-            # aren't allowed to
-            provider.link_auth(
-                request.user, organization, {
-                    'default_auth_id': result.get('defaultAuthId'),
-                    'integration_id': result.get('integrationId'),
-                }
-            )
-        except PluginError as exc:
-            return Response(
-                {
-                    'error_type': 'validation',
-                    'message': exc.message,
-                }, status=400
-            )
-
-        return Response(
-            serialize(provider, request.user, ProviderSerializer(organization)), status=201
+            return self.respond({'detail': ['You do not have that feature enabled']}, status=400)
+
+        return self.paginate(
+            queryset=Integration.objects.filter(organizations=organization),
+            request=request,
+            order_by='name',
+            on_results=lambda x: serialize(x, request.user),
+            paginator_cls=OffsetPaginator,
         )
diff --git a/src/sentry/api/serializers/models/integration.py b/src/sentry/api/serializers/models/integration.py
new file mode 100644
index 0000000000..ea9c6cd49d
--- /dev/null
+++ b/src/sentry/api/serializers/models/integration.py
@@ -0,0 +1,20 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.api.serializers import register, Serializer
+from sentry.models import Integration
+
+
+@register(Integration)
+class IntegrationSerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        provider = obj.get_provider()
+        return {
+            'id': six.text_type(obj.id),
+            'name': obj.name,
+            'provider': {
+                'id': provider.id,
+                'name': provider.name,
+            }
+        }
diff --git a/src/sentry/api/serializers/models/provider.py b/src/sentry/api/serializers/models/provider.py
deleted file mode 100644
index 951de1d5f7..0000000000
--- a/src/sentry/api/serializers/models/provider.py
+++ /dev/null
@@ -1,51 +0,0 @@
-from __future__ import absolute_import
-
-import six
-
-from django.db.models import Q
-
-from collections import defaultdict
-
-from social_auth.models import UserSocialAuth
-
-from sentry.api.serializers import Serializer
-from sentry.models import Integration
-
-
-class ProviderSerializer(Serializer):
-    def __init__(self, organization):
-        self.organization = organization
-
-    def get_attrs(self, item_list, user, *args, **kwargs):
-        integrations = list(Integration.objects.filter(organizations=self.organization))
-        integrations_for_org = defaultdict(list)
-
-        for i in integrations:
-            integrations_for_org[i.provider].append(i)
-
-        auth_ids = [i.default_auth_id for i in integrations if i.default_auth_id is not None]
-
-        social_auths = defaultdict(list)
-        usas = UserSocialAuth.objects.filter(
-            Q(id__in=auth_ids) | Q(user=user),
-        ).select_related('user')
-        for usa in usas:
-            social_auths[usa.provider].append(usa)
-
-        return {
-            p: {
-                'integrations': integrations_for_org[p.id],
-                'social_auths': social_auths[p.id],
-            } for p in item_list
-        }
-
-    def serialize(self, obj, attrs, user):
-        integrations = attrs['integrations']
-        social_auths = attrs['social_auths']
-
-        return {
-            'id': six.text_type(obj.id),
-            'name': obj.name,
-            'auths': obj.get_available_auths(user, self.organization, integrations, social_auths),
-            'authUrl': obj.get_auth_url(user),
-        }
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 219c8b259b..7173b2e7f9 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -54,7 +54,9 @@ from .endpoints.organization_release_files import OrganizationReleaseFilesEndpoi
 from .endpoints.organization_release_file_details import OrganizationReleaseFileDetailsEndpoint
 from .endpoints.organization_release_commits import OrganizationReleaseCommitsEndpoint
 from .endpoints.organization_repositories import OrganizationRepositoriesEndpoint
+from .endpoints.organization_integration_details import OrganizationIntegrationDetailsEndpoint
 from .endpoints.organization_integrations import OrganizationIntegrationsEndpoint
+from .endpoints.organization_config_integrations import OrganizationConfigIntegrationsEndpoint
 from .endpoints.organization_config_repositories import OrganizationConfigRepositoriesEndpoint
 from .endpoints.organization_repository_commits import OrganizationRepositoryCommitsEndpoint
 from .endpoints.organization_repository_details import OrganizationRepositoryDetailsEndpoint
@@ -213,6 +215,11 @@ urlpatterns = patterns(
         OrganizationAuditLogsEndpoint.as_view(),
         name='sentry-api-0-organization-audit-logs'
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/config/integrations/$',
+        OrganizationConfigIntegrationsEndpoint.as_view(),
+        name='sentry-api-0-organization-config-integrations'
+    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/config/repos/$',
         OrganizationConfigRepositoriesEndpoint.as_view(),
@@ -227,6 +234,10 @@ urlpatterns = patterns(
         OrganizationIntegrationsEndpoint.as_view(),
         name='sentry-api-0-organization-integrations'
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/integrations/(?P<integration_id>[^\/]+)/$',
+        OrganizationIntegrationDetailsEndpoint.as_view(),
+    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/members/$',
         OrganizationMemberIndexEndpoint.as_view(),
diff --git a/src/sentry/auth/exceptions.py b/src/sentry/auth/exceptions.py
index 3393dcc21c..dfe939118e 100644
--- a/src/sentry/auth/exceptions.py
+++ b/src/sentry/auth/exceptions.py
@@ -2,8 +2,10 @@ from __future__ import absolute_import
 
 __all__ = ['ProviderNotRegistered']
 
+from sentry.exceptions import NotRegistered
 
-class ProviderNotRegistered(Exception):
+
+class ProviderNotRegistered(NotRegistered):
     pass
 
 
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 062123eafb..e61ac8331f 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -984,6 +984,7 @@ SENTRY_SCOPES = set(
         'org:read',
         'org:write',
         'org:admin',
+        'org:integrations',
         'member:read',
         'member:write',
         'member:admin',
@@ -1005,6 +1006,8 @@ SENTRY_SCOPE_SETS = (
         ('org:admin', 'Read, write, and admin access to organization details.'),
         ('org:write', 'Read and write access to organization details.'),
         ('org:read', 'Read access to organization details.'),
+    ), (
+        ('org:integrations', 'Read, write, and admin access to organization integrations.'),
     ), (
         ('member:admin', 'Read, write, and admin access to organization members.'),
         ('member:write', 'Read and write access to organization members.'),
@@ -1016,7 +1019,9 @@ SENTRY_SCOPE_SETS = (
         ('project:admin', 'Read, write, and admin access to projects.'),
         ('project:write',
          'Read and write access to projects.'), ('project:read', 'Read access to projects.'),
-    ), (('project:releases', 'Read, write, and admin access to project releases.'), ), (
+    ), (
+        ('project:releases', 'Read, write, and admin access to project releases.'),
+    ), (
         ('event:admin', 'Read, write, and admin access to events.'),
         ('event:write',
          'Read and write access to events.'), ('event:read', 'Read access to events.'),
@@ -1031,14 +1036,10 @@ SENTRY_DEFAULT_ROLE = 'member'
 # in the chain (they still require the appropriate scope).
 SENTRY_ROLES = (
     {
-        'id':
-        'member',
-        'name':
-        'Member',
-        'desc':
-        'Members can view and act on events, as well as view most other data within the organization.',
-        'scopes':
-        set(
+        'id': 'member',
+        'name': 'Member',
+        'desc': 'Members can view and act on events, as well as view most other data within the organization.',
+        'scopes': set(
             [
                 'event:read',
                 'event:write',
@@ -1051,14 +1052,10 @@ SENTRY_ROLES = (
             ]
         ),
     }, {
-        'id':
-        'admin',
-        'name':
-        'Admin',
-        'desc':
-        'Admin privileges on any teams of which they\'re a member. They can create new teams and projects, as well as remove teams and projects which they already hold membership on.',
-        'scopes':
-        set(
+        'id': 'admin',
+        'name': 'Admin',
+        'desc': 'Admin privileges on any teams of which they\'re a member. They can create new teams and projects, as well as remove teams and projects which they already hold membership on.',
+        'scopes': set(
             [
                 'event:read',
                 'event:write',
@@ -1075,16 +1072,11 @@ SENTRY_ROLES = (
             ]
         ),
     }, {
-        'id':
-        'manager',
-        'name':
-        'Manager',
-        'desc':
-        'Gains admin access on all teams as well as the ability to add and remove members.',
-        'is_global':
-        True,
-        'scopes':
-        set(
+        'id': 'manager',
+        'name': 'Manager',
+        'desc': 'Gains admin access on all teams as well as the ability to add and remove members.',
+        'is_global': True,
+        'scopes': set(
             [
                 'event:read',
                 'event:write',
@@ -1101,23 +1093,20 @@ SENTRY_ROLES = (
                 'team:admin',
                 'org:read',
                 'org:write',
+                'org:integrations',
             ]
         ),
     }, {
-        'id':
-        'owner',
-        'name':
-        'Owner',
-        'desc':
-        'Gains full permission across the organization. Can manage members as well as perform catastrophic operations such as removing the organization.',
-        'is_global':
-        True,
-        'scopes':
-        set(
+        'id': 'owner',
+        'name': 'Owner',
+        'desc': 'Gains full permission across the organization. Can manage members as well as perform catastrophic operations such as removing the organization.',
+        'is_global': True,
+        'scopes': set(
             [
                 'org:read',
                 'org:write',
                 'org:admin',
+                'org:integrations',
                 'member:read',
                 'member:write',
                 'member:admin',
@@ -1187,6 +1176,8 @@ SENTRY_ONPREMISE = True
 # when checking REMOTE_ADDR ip addresses
 SENTRY_USE_X_FORWARDED_FOR = True
 
+SENTRY_DEFAULT_INTEGRATIONS = ()
+
 
 def get_raven_config():
     return {
diff --git a/src/sentry/exceptions.py b/src/sentry/exceptions.py
index dd938ebb9a..a2d048c869 100644
--- a/src/sentry/exceptions.py
+++ b/src/sentry/exceptions.py
@@ -53,3 +53,7 @@ class InvalidIdentity(Exception):
 
 class HookValidationError(Exception):
     pass
+
+
+class NotRegistered(Exception):
+    pass
diff --git a/src/sentry/integrations/__init__.py b/src/sentry/integrations/__init__.py
index c3961685ab..d98946a1f3 100644
--- a/src/sentry/integrations/__init__.py
+++ b/src/sentry/integrations/__init__.py
@@ -1 +1,13 @@
 from __future__ import absolute_import
+
+from .base import *  # NOQA
+from .manager import IntegrationManager  # NOQA
+from .view import *  # NOQA
+
+
+default_manager = IntegrationManager()
+all = default_manager.all
+get = default_manager.get
+exists = default_manager.exists
+register = default_manager.register
+unregister = default_manager.unregister
diff --git a/src/sentry/integrations/base.py b/src/sentry/integrations/base.py
new file mode 100644
index 0000000000..a1c7780d21
--- /dev/null
+++ b/src/sentry/integrations/base.py
@@ -0,0 +1,88 @@
+from __future__ import absolute_import
+
+__all__ = ['Integration']
+
+import logging
+
+
+class Integration(object):
+    """
+    An integration describes a third party that can be registered within Sentry.
+
+    The core behavior is simply how to add the integration (the authentication
+    pipeline), and what kind of configuration is stored.
+
+    This is similar to Sentry's legacy 'plugin' information, except that an
+    integration is lives as an instance in the database, and the ``Integration``
+    class is just a descriptor for how that object functions, and what behavior
+    it provides (such as extensions provided).
+    """
+
+    # a unique identifier (e.g. 'slack')
+    id = None
+
+    # a human readable name (e.g. 'Slack')
+    name = None
+
+    def get_logger(self):
+        return logging.getLogger('sentry.integration.%s' % (self.get_id(), ))
+
+    def get_pipeline(self):
+        """
+        Return a list of ``View`` instances describing this integration's
+        configuration pipeline.
+
+        >>> def get_pipeline(self):
+        >>>    return []
+        """
+        raise NotImplementedError
+
+    # XXX(dcramer): this is not yet exposed anywhere in the UI
+    def get_config(self):
+        """
+        Return a list of configuration attributes for this integration.
+
+        The results of this are stored per-organization per-integration.
+
+        >>> def get_config(self):
+        >>>     return [{
+        >>>         'name': 'instance',
+        >>>         'label': 'Instance',
+        >>>         'type': 'text',
+        >>>         'placeholder': 'e.g. https://example.atlassian.net',
+        >>>         'required': True,
+        >>>     }]
+        """
+        raise NotImplementedError
+
+    def build_integration(self, state):
+        """
+        Given state captured during the setup pipeline, return a dictionary
+        of configuration and metadata to store with this integration.
+
+        This data **must not** be specific to an organization, as the
+        integration may be shared among multiple organizations.
+
+        This is the ideal place to store metadata like the 'name' or 'url' to
+        the relevant entity, or shared API keys.
+
+        This **must** return an 'external_id' attribute.
+
+        This **should** return a 'name' attribute.
+
+        >>> def build_integration(self, state):
+        >>>     return {
+        >>>         'external_id': state['id'],
+        >>>         'name': state['name'],
+        >>>         'metadata': {url': state['url']},
+        >>>     }
+        """
+        raise NotImplementedError
+
+    def setup(self):
+        """
+        Executed once Sentry has been initialized at runtime.
+
+        >>> def setup(self):
+        >>>     bindings.add('repository.provider', GitHubRepositoryProvider, id='github')
+        """
diff --git a/src/sentry/integrations/example/__init__.py b/src/sentry/integrations/example/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/integrations/example/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/integrations/example/integration.py b/src/sentry/integrations/example/integration.py
new file mode 100644
index 0000000000..a52fa8993b
--- /dev/null
+++ b/src/sentry/integrations/example/integration.py
@@ -0,0 +1,57 @@
+from __future__ import absolute_import
+
+from django.http import HttpResponse
+from sentry.integrations import Integration, PipelineView
+
+
+class ExampleSetupView(PipelineView):
+    TEMPLATE = """
+        <form method="POST">
+            <p>This is an example integration configuration page.</p>
+            <p><label>Integration Name:</label></p>
+            <p><input type="name" name="name" /></p>
+            <p><input type="submit" value="Continue" /></p>
+        </form>
+    """
+
+    def dispatch(self, request, helper):
+        if 'name' in request.POST:
+            helper.bind_state('name', request.POST['name'])
+            return helper.next_step()
+
+        return HttpResponse(self.TEMPLATE)
+
+
+class ExampleIntegration(Integration):
+    """
+    An example integration, generally used for testing.
+    """
+    id = 'example'
+
+    name = 'Example'
+
+    def get_pipeline(self):
+        return [
+            ExampleSetupView(),
+        ]
+
+    def get_config(self):
+        return [{
+            'name': 'name',
+            'label': 'Name',
+            'type': 'text',
+            'required': True,
+        }]
+
+    def build_integration(self, state):
+        return {
+            'external_id': state['name'],
+        }
+
+    def setup(self):
+        """
+        Executed once Sentry has been initialized at runtime.
+
+        >>> def setup(self):
+        >>>     bindings.add('repository.provider', GitHubRepositoryProvider, id='github')
+        """
diff --git a/src/sentry/integrations/helper.py b/src/sentry/integrations/helper.py
new file mode 100644
index 0000000000..16bef0c313
--- /dev/null
+++ b/src/sentry/integrations/helper.py
@@ -0,0 +1,192 @@
+from __future__ import absolute_import, print_function
+
+__all__ = ['PipelineHelper']
+
+import json
+import logging
+
+from django.http import HttpResponse
+
+from sentry.api.serializers import serialize
+from sentry.models import Integration
+from sentry.utils.hashlib import md5_text
+from sentry.utils.http import absolute_uri
+from sentry.web.helpers import render_to_response
+
+from . import default_manager
+
+SESSION_KEY = 'integration.setup'
+
+DIALOG_RESPONSE = """
+<!doctype html>
+<html>
+<body>
+<script>
+window.opener.postMessage({json}, document.origin);
+window.close();
+</script>
+<noscript>Please wait...</noscript>
+</body>
+</html>
+"""
+
+logger = logging.getLogger('sentry.integrations')
+
+
+class PipelineHelper(object):
+    @classmethod
+    def get_for_request(cls, request, organization, provider_id):
+        session = request.session.get(SESSION_KEY, {})
+        if not session:
+            logger.error('integrations.setup.missing-session-data')
+            return None
+
+        if session.get('int'):
+            integration = Integration.objects.get(
+                id=session['int'],
+                organization_id=organization.id,
+            )
+        else:
+            integration = None
+
+        instance = cls(
+            request=request,
+            organization=organization,
+            integration=integration,
+            provider_id=provider_id,
+            step=session['step'],
+            dialog=bool(session['dlg']),
+        )
+        if instance.signature != session['sig']:
+            logger.error('integrations.setup.invalid-signature')
+            return None
+        return instance
+
+    @classmethod
+    def initialize(cls, request, organization, provider_id, dialog=False):
+        inst = cls(
+            request=request,
+            organization=organization,
+            provider_id=provider_id,
+            dialog=dialog,
+        )
+        inst.save_session()
+        return inst
+
+    def __init__(self, request, organization, provider_id, integration=None,
+                 step=0, state=None, dialog=False):
+        self.request = request
+        self.integration = integration
+        self.organization = organization
+        self.provider = default_manager.get(provider_id)
+        self.pipeline = self.provider.get_pipeline()
+        self.signature = md5_text(*[
+            '{module}.{name}'.format(
+                module=type(v).__module__,
+                name=type(v).__name__,
+            ) for v in self.pipeline
+        ]).hexdigest()
+        self.step = step
+        self.state = state or {}
+        self.dialog = dialog
+
+    def save_session(self):
+        self.request.session[SESSION_KEY] = {
+            'uid': self.request.user.id,
+            'org': self.organization.id,
+            'pro': self.provider.id,
+            'int': self.integration.id if self.integration else '',
+            'sig': self.signature,
+            'step': self.step,
+            'state': {},
+            'dlg': int(self.dialog),
+        }
+        self.request.session.modified = True
+
+    def get_redirect_url(self):
+        return absolute_uri('/organizations/{}/integrations/{}/setup/'.format(
+            self.organization.slug,
+            self.provider.id,
+        ))
+
+    def clear_session(self):
+        if SESSION_KEY in self.request.session:
+            del self.request.session[SESSION_KEY]
+            self.request.session.modified = True
+
+    def current_step(self):
+        """
+        Render the current step.
+        """
+        if self.step == len(self.pipeline):
+            return self.finish_pipeline()
+        return self.pipeline[self.step].dispatch(
+            request=self.request,
+            helper=self,
+        )
+
+    def next_step(self):
+        """
+        Render the next step.
+        """
+        self.step += 1
+        self.save_session()
+        return self.current_step()
+
+    def finish_pipeline(self):
+        data = self.provider.build_integration(self.state)
+        response = self._finish_pipeline(data)
+        self.clear_session()
+        return response
+
+    def respond(self, template, context=None, status=200):
+        default_context = {
+            'organization': self.organization,
+            'provider': self.provider,
+        }
+        if context:
+            default_context.update(context)
+
+        return render_to_response(template, default_context, self.request, status=status)
+
+    def error(self, message):
+        # TODO(dcramer): this needs to handle the dialog
+        self.clear_session()
+        return self._jsonp_response({'detail': message}, False)
+
+    def bind_state(self, key, value):
+        self.state[key] = value
+        self.save_session()
+
+    def fetch_state(self, key):
+        return self.state.get(key)
+
+    def _finish_pipeline(self, data):
+        if self.integration:
+            assert data['external_id'] == self.integration.external_id
+            self.integration.update(
+                metadata=data.get('metadata', {}),
+                name=data.get('name', self.provider.name),
+            )
+        else:
+            self.integration = Integration.objects.create(
+                provider=self.provider.id,
+                metadata=data.get('metadata', {}),
+                name=data.get('name', data['external_id']),
+                external_id=data['external_id'],
+            )
+            self.integration.add_organization(self.organization.id)
+
+        return self._dialog_response(serialize(self.integration, self.request.user), True)
+
+    def _dialog_response(self, data, success):
+        assert self.dialog
+        return HttpResponse(
+            DIALOG_RESPONSE.format(
+                json=json.dumps({
+                    'success': success,
+                    'data': data,
+                })
+            ),
+            content_type='text/html',
+        )
diff --git a/src/sentry/integrations/manager.py b/src/sentry/integrations/manager.py
new file mode 100644
index 0000000000..918b5d3a29
--- /dev/null
+++ b/src/sentry/integrations/manager.py
@@ -0,0 +1,43 @@
+from __future__ import absolute_import, print_function
+
+__all__ = ['IntegrationManager']
+
+import six
+
+from sentry.exceptions import NotRegistered
+
+
+# Ideally this and PluginManager abstracted from the same base, but
+# InstanceManager has become convulated and wasteful
+class IntegrationManager(object):
+    def __init__(self):
+        self.__values = {}
+
+    def __iter__(self):
+        return (self.get(k) for k in six.iterkeys(self.__values))
+
+    def all(self):
+        return iter(self)
+
+    def get(self, key, **kwargs):
+        try:
+            cls = self.__values[key]
+        except KeyError:
+            raise NotRegistered(key)
+        return cls(**kwargs)
+
+    def exists(self, key):
+        return key in self.__values
+
+    def register(self, cls):
+        self.__values[cls.id] = cls
+
+    def unregister(self, cls):
+        try:
+            if self.__values[cls.id] != cls:
+                # dont allow unregistering of arbitrary provider
+                raise NotRegistered(cls.id)
+        except KeyError:
+            # we gracefully handle a missing provider
+            return
+        del self.__values[cls.id]
diff --git a/src/sentry/integrations/view.py b/src/sentry/integrations/view.py
new file mode 100644
index 0000000000..69c3a91302
--- /dev/null
+++ b/src/sentry/integrations/view.py
@@ -0,0 +1,11 @@
+from __future__ import absolute_import, print_function
+
+__all__ = ['PipelineView']
+
+from django.http import HttpResponseRedirect
+from django.views.generic import View
+
+
+class PipelineView(View):
+    def redirect(self, url):
+        return HttpResponseRedirect(url)
diff --git a/src/sentry/models/integration.py b/src/sentry/models/integration.py
index d3fe1636ea..a44f12376d 100644
--- a/src/sentry/models/integration.py
+++ b/src/sentry/models/integration.py
@@ -1,9 +1,10 @@
 from __future__ import absolute_import
 
 from django.db import models, IntegrityError, transaction
-from jsonfield import JSONField
 
-from sentry.db.models import BoundedPositiveIntegerField, FlexibleForeignKey, Model
+from sentry.db.models import (
+    BoundedPositiveIntegerField, EncryptedJsonField, FlexibleForeignKey, Model
+)
 
 
 class OrganizationIntegration(Model):
@@ -11,6 +12,8 @@ class OrganizationIntegration(Model):
 
     organization = FlexibleForeignKey('sentry.Organization')
     integration = FlexibleForeignKey('sentry.Integration')
+    config = EncryptedJsonField(default=lambda: {})
+    default_auth_id = BoundedPositiveIntegerField(db_index=True, null=True)
 
     class Meta:
         app_label = 'sentry'
@@ -23,7 +26,7 @@ class ProjectIntegration(Model):
 
     project = FlexibleForeignKey('sentry.Project')
     integration = FlexibleForeignKey('sentry.Integration')
-    config = JSONField(default=lambda: {})
+    config = EncryptedJsonField(default=lambda: {})
 
     class Meta:
         app_label = 'sentry'
@@ -42,16 +45,22 @@ class Integration(Model):
                                       through=ProjectIntegration)
     provider = models.CharField(max_length=64)
     external_id = models.CharField(max_length=64)
-    config = JSONField(default=lambda: {})
     name = models.CharField(max_length=200)
-    default_auth_id = BoundedPositiveIntegerField(db_index=True, null=True)
+    # metadata might be used to store things like credentials, but it should NOT
+    # be used to store organization-specific information, as the Integration
+    # instance is shared among multiple organizations
+    metadata = EncryptedJsonField(default=lambda: {})
 
     class Meta:
         app_label = 'sentry'
         db_table = 'sentry_integration'
         unique_together = (('provider', 'external_id'),)
 
-    def add_organization(self, organization_id):
+    def get_provider(self):
+        from sentry import integrations
+        return integrations.get(self.provider)
+
+    def add_organization(self, organization_id, default_auth_id=None, config=None):
         """
         Add an organization to this integration.
 
@@ -62,6 +71,8 @@ class Integration(Model):
                 OrganizationIntegration.objects.create(
                     organization_id=organization_id,
                     integration_id=self.id,
+                    default_auth_id=default_auth_id,
+                    config=config or {},
                 )
         except IntegrityError:
             return False
diff --git a/src/sentry/plugins/providers/base.py b/src/sentry/plugins/providers/base.py
index 0d1d2d2889..5d455c72f6 100644
--- a/src/sentry/plugins/providers/base.py
+++ b/src/sentry/plugins/providers/base.py
@@ -26,9 +26,10 @@ class ProviderMixin(object):
             raise PluginError
 
         integration = Integration.objects.get_or_create(
-            provider=self.auth_provider, external_id=usa.uid, defaults={'default_auth_id': usa.id}
+            provider=self.auth_provider,
+            external_id=usa.uid,
         )[0]
-        integration.add_organization(organization.id)
+        integration.add_organization(organization.id, default_auth_id=usa.id)
 
     def get_available_auths(self, user, organization, integrations, social_auths, **kwargs):
         if self.auth_provider is None:
@@ -107,11 +108,9 @@ class ProviderMixin(object):
         if organization:
             try:
                 auth = UserSocialAuth.objects.get(
-                    id=Integration.objects.filter(
-                        id=OrganizationIntegration.objects.filter(
-                            integration__provider=self.auth_provider,
-                            organization=organization,
-                        ).values_list('integration_id', flat=True)[0],
+                    id=OrganizationIntegration.objects.filter(
+                        organization=organization,
+                        integration__provider=self.auth_provider,
                     ).values_list('default_auth_id', flat=True)[0]
                 )
             except UserSocialAuth.DoesNotExist:
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index b71ae769df..f504515e4b 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -40,6 +40,12 @@ def register_plugins(settings):
     for plugin in plugins.all(version=None):
         init_plugin(plugin)
 
+    from sentry import integrations
+    from sentry.utils.imports import import_string
+    for integration_path in settings.SENTRY_DEFAULT_INTEGRATIONS:
+        integration_cls = import_string(integration_path)
+        integrations.register(integration_cls)
+
 
 def init_plugin(plugin):
     from sentry.plugins import bindings
diff --git a/src/sentry/south_migrations/0355_auto__add_field_organizationintegration_config__add_field_organization.py b/src/sentry/south_migrations/0355_auto__add_field_organizationintegration_config__add_field_organization.py
new file mode 100644
index 0000000000..6f25a396fb
--- /dev/null
+++ b/src/sentry/south_migrations/0355_auto__add_field_organizationintegration_config__add_field_organization.py
@@ -0,0 +1,962 @@
+# -*- coding: utf-8 -*-
+from south.utils import datetime_utils as datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    # Flag to indicate if this migration is too risky
+    # to run online and needs to be coordinated for offline
+    is_dangerous = False
+
+    def forwards(self, orm):
+        # Adding field 'OrganizationIntegration.config'
+        db.add_column('sentry_organizationintegration', 'config',
+                      self.gf('sentry.db.models.fields.encrypted.EncryptedJsonField')(default={}),
+                      keep_default=False)
+
+        # Adding field 'OrganizationIntegration.default_auth_id'
+        db.add_column('sentry_organizationintegration', 'default_auth_id',
+                      self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(
+                          null=True, db_index=True),
+                      keep_default=False)
+
+        # Changing field 'CommitFileChange.filename'
+        db.alter_column(
+            'sentry_commitfilechange',
+            'filename',
+            self.gf('django.db.models.fields.CharField')(
+                max_length=255))
+        # Deleting field 'Integration.default_auth_id'
+        db.delete_column(u'sentry_integration', 'default_auth_id')
+
+        # Deleting field 'Integration.config'
+        db.delete_column(u'sentry_integration', 'config')
+
+        # Adding field 'Integration.metadata'
+        db.add_column('sentry_integration', 'metadata',
+                      self.gf('sentry.db.models.fields.encrypted.EncryptedJsonField')(default={}),
+                      keep_default=False)
+
+        # Changing field 'ProjectIntegration.config'
+        db.alter_column('sentry_projectintegration', 'config', self.gf(
+            'sentry.db.models.fields.encrypted.EncryptedJsonField')())
+
+    def backwards(self, orm):
+        # Deleting field 'OrganizationIntegration.config'
+        db.delete_column('sentry_organizationintegration', 'config')
+
+        # Deleting field 'OrganizationIntegration.default_auth_id'
+        db.delete_column('sentry_organizationintegration', 'default_auth_id')
+
+        # Changing field 'CommitFileChange.filename'
+        db.alter_column(
+            'sentry_commitfilechange',
+            'filename',
+            self.gf('django.db.models.fields.CharField')(
+                max_length=767))
+        # Adding field 'Integration.default_auth_id'
+        db.add_column(u'sentry_integration', 'default_auth_id',
+                      self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(
+                          null=True, db_index=True),
+                      keep_default=False)
+
+        # Adding field 'Integration.config'
+        db.add_column(u'sentry_integration', 'config',
+                      self.gf('jsonfield.fields.JSONField')(default={}),
+                      keep_default=False)
+
+        # Deleting field 'Integration.metadata'
+        db.delete_column('sentry_integration', 'metadata')
+
+        # Changing field 'ProjectIntegration.config'
+        db.alter_column('sentry_projectintegration', 'config',
+                        self.gf('jsonfield.fields.JSONField')())
+
+    models = {
+        'sentry.activity': {
+            'Meta': {'object_name': 'Activity'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
+        'sentry.apiapplication': {
+            'Meta': {'object_name': 'ApiApplication'},
+            'allowed_origins': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'client_id': ('django.db.models.fields.CharField', [], {'default': "'83b0161cf56443df93ce0327caf32b940f6d970ad53f4fea82450af500288d3c'", 'unique': 'True', 'max_length': '64'}),
+            'client_secret': ('sentry.db.models.fields.encrypted.EncryptedTextField', [], {'default': "'0d309c5d47804767a2645f62495fabdcdc298ced6ae5492f96c4e7d51a2e917f'"}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'homepage_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'default': "'Open Teal'", 'max_length': '64', 'blank': 'True'}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'privacy_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
+            'redirect_uris': ('django.db.models.fields.TextField', [], {}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'terms_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'})
+        },
+        'sentry.apiauthorization': {
+            'Meta': {'unique_together': "(('user', 'application'),)", 'object_name': 'ApiAuthorization'},
+            'application': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiApplication']", 'null': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'scope_list': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.apigrant': {
+            'Meta': {'object_name': 'ApiGrant'},
+            'application': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiApplication']"}),
+            'code': ('django.db.models.fields.CharField', [], {'default': "'c5afedc036844c7682a185ba9365a5ad'", 'max_length': '64', 'db_index': 'True'}),
+            'expires_at': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2017, 9, 20, 0, 0)', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'redirect_uri': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
+            'scope_list': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.apikey': {
+            'Meta': {'object_name': 'ApiKey'},
+            'allowed_origins': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'default': "'Default'", 'max_length': '64', 'blank': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Organization']"}),
+            'scope_list': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.apitoken': {
+            'Meta': {'object_name': 'ApiToken'},
+            'application': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiApplication']", 'null': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'expires_at': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2017, 10, 20, 0, 0)', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'refresh_token': ('django.db.models.fields.CharField', [], {'default': "'cae6be73f1974c2399281a059da18ee649a605a736274e4ca5b2d8c56f63376a'", 'max_length': '64', 'unique': 'True', 'null': 'True'}),
+            'scope_list': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'token': ('django.db.models.fields.CharField', [], {'default': "'e31c8d80e5c34724bf8ac6926002f819bde970faaf27426b84c16f4a17034387'", 'unique': 'True', 'max_length': '64'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.auditlogentry': {
+            'Meta': {'object_name': 'AuditLogEntry'},
+            'actor': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_actors'", 'null': 'True', 'to': "orm['sentry.User']"}),
+            'actor_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiKey']", 'null': 'True', 'blank': 'True'}),
+            'actor_label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'target_object': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'target_user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_targets'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.authenticator': {
+            'Meta': {'unique_together': "(('user', 'type'),)", 'object_name': 'Authenticator', 'db_table': "'auth_authenticator'"},
+            'config': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {}),
+            'created_at': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'last_used_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.authidentity': {
+            'Meta': {'unique_together': "(('auth_provider', 'ident'), ('auth_provider', 'user'))", 'object_name': 'AuthIdentity'},
+            'auth_provider': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.AuthProvider']"}),
+            'data': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'last_synced': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_verified': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.authprovider': {
+            'Meta': {'object_name': 'AuthProvider'},
+            'config': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'default_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'default_role': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'default_teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'blank': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_sync': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']", 'unique': 'True'}),
+            'provider': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'sync_time': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
+        },
+        'sentry.broadcast': {
+            'Meta': {'object_name': 'Broadcast'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2017, 9, 27, 0, 0)', 'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
+            'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
+            'title': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'upstream_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.broadcastseen': {
+            'Meta': {'unique_together': "(('broadcast', 'user'),)", 'object_name': 'BroadcastSeen'},
+            'broadcast': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Broadcast']"}),
+            'date_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.commit': {
+            'Meta': {'unique_together': "(('repository_id', 'key'),)", 'object_name': 'Commit', 'index_together': "(('repository_id', 'date_added'),)"},
+            'author': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.CommitAuthor']", 'null': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'message': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'repository_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
+        },
+        'sentry.commitauthor': {
+            'Meta': {'unique_together': "(('organization_id', 'email'), ('organization_id', 'external_id'))", 'object_name': 'CommitAuthor'},
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '164', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'})
+        },
+        'sentry.commitfilechange': {
+            'Meta': {'unique_together': "(('commit', 'filename'),)", 'object_name': 'CommitFileChange'},
+            'commit': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Commit']"}),
+            'filename': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '1'})
+        },
+        'sentry.counter': {
+            'Meta': {'object_name': 'Counter', 'db_table': "'sentry_projectcounter'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'unique': 'True'}),
+            'value': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.deploy': {
+            'Meta': {'object_name': 'Deploy'},
+            'date_finished': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_started': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'notified': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.distribution': {
+            'Meta': {'unique_together': "(('release', 'name'),)", 'object_name': 'Distribution'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.dsymapp': {
+            'Meta': {'unique_together': "(('project', 'platform', 'app_id'),)", 'object_name': 'DSymApp'},
+            'app_id': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_synced': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'platform': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'sync_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'})
+        },
+        'sentry.email': {
+            'Meta': {'object_name': 'Email'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('sentry.db.models.fields.citext.CIEmailField', [], {'unique': 'True', 'max_length': '75'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'})
+        },
+        'sentry.environment': {
+            'Meta': {'unique_together': "(('project_id', 'name'), ('organization_id', 'name'))", 'object_name': 'Environment'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Project']", 'through': "orm['sentry.EnvironmentProject']", 'symmetrical': 'False'})
+        },
+        'sentry.environmentproject': {
+            'Meta': {'unique_together': "(('project', 'environment'),)", 'object_name': 'EnvironmentProject'},
+            'environment': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Environment']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project_id', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'", 'index_together': "(('group_id', 'datetime'),)"},
+            'data': ('sentry.db.models.fields.node.NodeField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'time_spent': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'null': 'True'})
+        },
+        'sentry.eventmapping': {
+            'Meta': {'unique_together': "(('project_id', 'event_id'),)", 'object_name': 'EventMapping'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.eventprocessingissue': {
+            'Meta': {'unique_together': "(('raw_event', 'processing_issue'),)", 'object_name': 'EventProcessingIssue'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'processing_issue': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ProcessingIssue']"}),
+            'raw_event': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.RawEvent']"})
+        },
+        'sentry.eventtag': {
+            'Meta': {'unique_together': "(('event_id', 'key_id', 'value_id'),)", 'object_name': 'EventTag', 'index_together': "(('project_id', 'key_id', 'value_id'), ('group_id', 'key_id', 'value_id'))"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'value_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.eventuser': {
+            'Meta': {'unique_together': "(('project_id', 'ident'), ('project_id', 'hash'))", 'object_name': 'EventUser', 'index_together': "(('project_id', 'email'), ('project_id', 'username'), ('project_id', 'ip_address'))"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
+        },
+        'sentry.featureadoption': {
+            'Meta': {'unique_together': "(('organization', 'feature_id'),)", 'object_name': 'FeatureAdoption'},
+            'applicable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'complete': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_completed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'feature_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"})
+        },
+        'sentry.file': {
+            'Meta': {'object_name': 'File'},
+            'blob': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'legacy_blob'", 'null': 'True', 'to': "orm['sentry.FileBlob']"}),
+            'blobs': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.FileBlob']", 'through': "orm['sentry.FileBlobIndex']", 'symmetrical': 'False'}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'headers': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'path': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'size': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.fileblob': {
+            'Meta': {'object_name': 'FileBlob'},
+            'checksum': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '40'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'path': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'size': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'})
+        },
+        'sentry.fileblobindex': {
+            'Meta': {'unique_together': "(('file', 'blob', 'offset'),)", 'object_name': 'FileBlobIndex'},
+            'blob': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.FileBlob']"}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'offset': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'short_id'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'", 'index_together': "(('project', 'first_release'),)"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']", 'null': 'True', 'on_delete': 'models.PROTECT'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'short_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'time_spent_total': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        'sentry.groupassignee': {
+            'Meta': {'object_name': 'GroupAssignee', 'db_table': "'sentry_groupasignee'"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'unique': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_assignee_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupcommitresolution': {
+            'Meta': {'unique_together': "(('group_id', 'commit_id'),)", 'object_name': 'GroupCommitResolution'},
+            'commit_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'})
+        },
+        'sentry.groupemailthread': {
+            'Meta': {'unique_together': "(('email', 'group'), ('email', 'msgid'))", 'object_name': 'GroupEmailThread'},
+            'date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'groupemail_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'msgid': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'groupemail_set'", 'to': "orm['sentry.Project']"})
+        },
+        'sentry.grouphash': {
+            'Meta': {'unique_together': "(('project', 'hash'),)", 'object_name': 'GroupHash'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'group_tombstone_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'state': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.groupredirect': {
+            'Meta': {'object_name': 'GroupRedirect'},
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'previous_group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'unique': 'True'})
+        },
+        'sentry.grouprelease': {
+            'Meta': {'unique_together': "(('group_id', 'release_id', 'environment'),)", 'object_name': 'GroupRelease'},
+            'environment': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '64'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'release_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'})
+        },
+        'sentry.groupresolution': {
+            'Meta': {'object_name': 'GroupResolution'},
+            'actor_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'unique': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
+        },
+        'sentry.grouprulestatus': {
+            'Meta': {'unique_together': "(('rule', 'group'),)", 'object_name': 'GroupRuleStatus'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_active': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'rule': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Rule']"}),
+            'status': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'})
+        },
+        'sentry.groupseen': {
+            'Meta': {'unique_together': "(('user', 'group'),)", 'object_name': 'GroupSeen'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'db_index': 'False'})
+        },
+        'sentry.groupsnooze': {
+            'Meta': {'object_name': 'GroupSnooze'},
+            'actor_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'count': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'unique': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'state': ('jsonfield.fields.JSONField', [], {'null': 'True'}),
+            'until': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'user_count': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'user_window': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'window': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
+        },
+        'sentry.groupsubscription': {
+            'Meta': {'unique_together': "(('group', 'user'),)", 'object_name': 'GroupSubscription'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'subscription_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'subscription_set'", 'to': "orm['sentry.Project']"}),
+            'reason': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.grouptagkey': {
+            'Meta': {'unique_together': "(('project_id', 'group_id', 'key'),)", 'object_name': 'GroupTagKey'},
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.grouptagvalue': {
+            'Meta': {'unique_together': "(('group_id', 'key', 'value'),)", 'object_name': 'GroupTagValue', 'db_table': "'sentry_messagefiltervalue'", 'index_together': "(('project_id', 'key', 'value', 'last_seen'),)"},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.grouptombstone': {
+            'Meta': {'object_name': 'GroupTombstone'},
+            'actor_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'level': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '40', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'previous_group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'unique': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.integration': {
+            'Meta': {'unique_together': "(('provider', 'external_id'),)", 'object_name': 'Integration'},
+            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'metadata': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'organizations': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'integrations'", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationIntegration']", 'to': "orm['sentry.Organization']"}),
+            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'integrations'", 'symmetrical': 'False', 'through': "orm['sentry.ProjectIntegration']", 'to': "orm['sentry.Project']"}),
+            'provider': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.lostpasswordhash': {
+            'Meta': {'object_name': 'LostPasswordHash'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'unique': 'True'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'last_updated': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
+        },
+        'sentry.organization': {
+            'Meta': {'object_name': 'Organization'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'default_role': ('django.db.models.fields.CharField', [], {'default': "'member'", 'max_length': '32'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'org_memberships'", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMember']", 'to': "orm['sentry.User']"}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.organizationaccessrequest': {
+            'Meta': {'unique_together': "(('team', 'member'),)", 'object_name': 'OrganizationAccessRequest'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'member': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.organizationavatar': {
+            'Meta': {'object_name': 'OrganizationAvatar'},
+            'avatar_type': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']", 'unique': 'True', 'null': 'True', 'on_delete': 'models.SET_NULL'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32', 'db_index': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'avatar'", 'unique': 'True', 'to': "orm['sentry.Organization']"})
+        },
+        'sentry.organizationintegration': {
+            'Meta': {'unique_together': "(('organization', 'integration'),)", 'object_name': 'OrganizationIntegration'},
+            'config': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
+            'default_auth_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'integration': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Integration']"}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"})
+        },
+        'sentry.organizationmember': {
+            'Meta': {'unique_together': "(('organization', 'user'), ('organization', 'email'))", 'object_name': 'OrganizationMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
+            'has_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Organization']"}),
+            'role': ('django.db.models.fields.CharField', [], {'default': "'member'", 'max_length': '32'}),
+            'teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMemberTeam']", 'blank': 'True'}),
+            'token': ('django.db.models.fields.CharField', [], {'max_length': '64', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50', 'blank': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'sentry_orgmember_set'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.organizationmemberteam': {
+            'Meta': {'unique_together': "(('team', 'organizationmember'),)", 'object_name': 'OrganizationMemberTeam', 'db_table': "'sentry_organizationmember_teams'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'organizationmember': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.organizationonboardingtask': {
+            'Meta': {'unique_together': "(('organization', 'task'),)", 'object_name': 'OrganizationOnboardingTask'},
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_completed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'task': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
+        'sentry.organizationoption': {
+            'Meta': {'unique_together': "(('organization', 'key'),)", 'object_name': 'OrganizationOption', 'db_table': "'sentry_organizationoptions'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
+        },
+        'sentry.processingissue': {
+            'Meta': {'unique_together': "(('project', 'checksum', 'type'),)", 'object_name': 'ProcessingIssue'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '40', 'db_index': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '30'})
+        },
+        'sentry.project': {
+            'Meta': {'unique_together': "(('team', 'slug'), ('organization', 'slug'))", 'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'first_event': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0', 'null': 'True'}),
+            'forced_color': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.projectbookmark': {
+            'Meta': {'unique_together': "(('project_id', 'user'),)", 'object_name': 'ProjectBookmark'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.projectdsymfile': {
+            'Meta': {'unique_together': "(('project', 'uuid'),)", 'object_name': 'ProjectDSymFile'},
+            'cpu_name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object_name': ('django.db.models.fields.TextField', [], {}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '36'})
+        },
+        'sentry.projectintegration': {
+            'Meta': {'unique_together': "(('project', 'integration'),)", 'object_name': 'ProjectIntegration'},
+            'config': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'integration': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Integration']"}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'rate_limit_count': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'rate_limit_window': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'roles': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
+        },
+        'sentry.projectplatform': {
+            'Meta': {'unique_together': "(('project_id', 'platform'),)", 'object_name': 'ProjectPlatform'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.rawevent': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'RawEvent'},
+            'data': ('sentry.db.models.fields.node.NodeField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.release': {
+            'Meta': {'unique_together': "(('organization', 'version'),)", 'object_name': 'Release'},
+            'authors': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
+            'commit_count': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_released': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'date_started': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_commit_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'last_deploy_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'new_groups': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True', 'blank': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'releases'", 'symmetrical': 'False', 'through': "orm['sentry.ReleaseProject']", 'to': "orm['sentry.Project']"}),
+            'ref': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'total_deploys': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'version': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.releasecommit': {
+            'Meta': {'unique_together': "(('release', 'commit'), ('release', 'order'))", 'object_name': 'ReleaseCommit'},
+            'commit': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Commit']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'order': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.releaseenvironment': {
+            'Meta': {'unique_together': "(('organization_id', 'release_id', 'environment_id'),)", 'object_name': 'ReleaseEnvironment', 'db_table': "'sentry_environmentrelease'"},
+            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'release_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'})
+        },
+        'sentry.releasefile': {
+            'Meta': {'unique_together': "(('release', 'ident'),)", 'object_name': 'ReleaseFile'},
+            'dist': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Distribution']", 'null': 'True'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'name': ('django.db.models.fields.TextField', [], {}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.releaseheadcommit': {
+            'Meta': {'unique_together': "(('repository_id', 'release'),)", 'object_name': 'ReleaseHeadCommit'},
+            'commit': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Commit']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"}),
+            'repository_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
+        },
+        'sentry.releaseproject': {
+            'Meta': {'unique_together': "(('project', 'release'),)", 'object_name': 'ReleaseProject', 'db_table': "'sentry_release_project'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'new_groups': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.repository': {
+            'Meta': {'unique_together': "(('organization_id', 'name'), ('organization_id', 'provider', 'external_id'))", 'object_name': 'Repository'},
+            'config': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'integration_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'provider': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'})
+        },
+        'sentry.reprocessingreport': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'ReprocessingReport'},
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.rule': {
+            'Meta': {'object_name': 'Rule'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.savedsearch': {
+            'Meta': {'unique_together': "(('project', 'name'),)", 'object_name': 'SavedSearch'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_default': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'query': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.savedsearchuserdefault': {
+            'Meta': {'unique_together': "(('project', 'user'),)", 'object_name': 'SavedSearchUserDefault', 'db_table': "'sentry_savedsearch_userdefault'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'savedsearch': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.SavedSearch']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.scheduleddeletion': {
+            'Meta': {'unique_together': "(('app_label', 'model_name', 'object_id'),)", 'object_name': 'ScheduledDeletion'},
+            'aborted': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'actor_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_scheduled': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2017, 10, 20, 0, 0)'}),
+            'guid': ('django.db.models.fields.CharField', [], {'default': "'02a089f8773f422787a58a636dbf1721'", 'unique': 'True', 'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'in_progress': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'model_name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'object_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.scheduledjob': {
+            'Meta': {'object_name': 'ScheduledJob'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_scheduled': ('django.db.models.fields.DateTimeField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'payload': ('jsonfield.fields.JSONField', [], {'default': '{}'})
+        },
+        'sentry.tagkey': {
+            'Meta': {'unique_together': "(('project_id', 'key'),)", 'object_name': 'TagKey', 'db_table': "'sentry_filterkey'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.tagvalue': {
+            'Meta': {'unique_together': "(('project_id', 'key', 'value'),)", 'object_name': 'TagValue', 'db_table': "'sentry_filtervalue'"},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.team': {
+            'Meta': {'unique_together': "(('organization', 'slug'),)", 'object_name': 'Team'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.user': {
+            'Meta': {'object_name': 'User', 'db_table': "'auth_user'"},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_password_expired': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_active': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_password_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_column': "'first_name'", 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'session_nonce': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'})
+        },
+        'sentry.useravatar': {
+            'Meta': {'object_name': 'UserAvatar'},
+            'avatar_type': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']", 'unique': 'True', 'null': 'True', 'on_delete': 'models.SET_NULL'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32', 'db_index': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'avatar'", 'unique': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.useremail': {
+            'Meta': {'unique_together': "(('user', 'email'),)", 'object_name': 'UserEmail'},
+            'date_hash_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_verified': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'emails'", 'to': "orm['sentry.User']"}),
+            'validation_hash': ('django.db.models.fields.CharField', [], {'default': "u'zswb3cbp1NyLwrSqnkA6RZtBJK1wJjxC'", 'max_length': '32'})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'), ('user', 'organization', 'key'))", 'object_name': 'UserOption'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']", 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
+        },
+        'sentry.userreport': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'UserReport', 'index_together': "(('project', 'event_id'), ('project', 'date_added'))"},
+            'comments': ('django.db.models.fields.TextField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'event_user_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.versiondsymfile': {
+            'Meta': {'unique_together': "(('dsym_file', 'version', 'build'),)", 'object_name': 'VersionDSymFile'},
+            'build': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'dsym_app': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.DSymApp']"}),
+            'dsym_file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ProjectDSymFile']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'version': ('django.db.models.fields.CharField', [], {'max_length': '32'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
index 5e5bd74804..6f23f46b2f 100644
--- a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
@@ -101,6 +101,11 @@ const HomeSidebar = React.createClass({
                 <ListLink to={`/organizations/${orgId}/rate-limits/`}>
                   {t('Rate Limits')}
                 </ListLink>}
+              {features.has('integrations-v3') &&
+                access.has('org:integrations') &&
+                <ListLink to={`/organizations/${orgId}/integrations/`}>
+                  {t('Integrations')}
+                </ListLink>}
               {access.has('org:write') &&
                 <ListLink to={`/organizations/${orgId}/repos/`}>
                   {t('Repositories')}
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations.jsx
index 64791200bd..315c93381c 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations.jsx
@@ -1,198 +1,204 @@
 import React from 'react';
 
-import ApiMixin from '../mixins/apiMixin';
+import AsyncView from './asyncView';
+import DropdownLink from '../components/dropdownLink';
 import IndicatorStore from '../stores/indicatorStore';
-import LoadingIndicator from '../components/loadingIndicator';
+import MenuItem from '../components/menuItem';
 import OrganizationHomeContainer from '../components/organizations/homeContainer';
-import OrganizationState from '../mixins/organizationState';
-import {t, tct} from '../locale';
-
-const OrganizationIntegrations = React.createClass({
-  mixins: [ApiMixin, OrganizationState],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: null,
-      ingtegrationList: null
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  fetchData() {
-    this.api.request(`/organizations/${this.props.params.orgId}/integrations/`, {
-      method: 'GET',
-      success: data => {
-        this.setState({
-          ingtegrationList: data,
-          loading: false
-        });
-      },
-      error: err => {
-        this.setState({
-          loading: false,
-          error: err.responseJSON
-        });
-      }
-    });
-  },
+import {t} from '../locale';
+import {sortArray} from '../utils';
+
+export default class OrganizationIntegrations extends AsyncView {
+  componentDidMount() {
+    // super.componentDidMount();
+    // this.dialogCallbackName = `sIntConf_${Math.floor(Math.random() * 10000)}`;
+    this.dialog = null;
+    window.addEventListener('message', this.receiveMessage, false);
+  }
 
-  linkAuth(providerId, auth) {
-    let indicator = IndicatorStore.add(t('Saving changes..'));
-    this.api.request(`/organizations/${this.props.params.orgId}/integrations/`, {
-      method: 'POST',
-      data: {
-        provider: providerId,
-        defaultAuthId: auth.defaultAuthId,
-        integrationId: auth.integrationId
-      },
-      success: data => {
-        // TODO(jess): we should sort this alphabetically
-        let ingtegrationList = this.state.ingtegrationList.filter(provider => {
-          return provider.id !== data.id;
-        });
-        ingtegrationList.push(data);
-        this.setState({
-          ingtegrationList
-        });
-      },
-      error: err => {
-        this.setState({
-          loading: false,
-          error: err.responseJSON
-        });
-      },
-      complete: () => {
-        IndicatorStore.remove(indicator);
-      }
-    });
-  },
+  componentWillUnmount() {
+    super.componentWillUnmount();
+    this.dialog && this.dialog.close();
+    window.removeEventListener('message', this.receiveMessage);
+  }
 
-  toggleAuth(providerId, auth) {
-    if (auth.linked) {
-      this.disableAuth(providerId, auth);
-    } else {
-      this.linkAuth(providerId, auth);
+  receiveMessage = event => {
+    if (event.origin !== document.origin) {
+      return;
     }
-  },
-
-  disableAuth(providerId, auth) {
-    // TODO(jess): implement this + endpoint
-  },
-
-  renderProvider(provider) {
-    let authUrl = provider.authUrl;
-    if (authUrl.indexOf('?') === -1) {
-      authUrl += '?next=' + encodeURIComponent(document.location.pathname);
-    } else {
-      authUrl += '&next=' + encodeURIComponent(document.location.pathname);
+    if (event.source !== this.dialog) {
+      return;
     }
-    return (
-      <div key={provider.id}>
-        <div className="row">
-          <div className="col-md-6">
-            <h3>{provider.name}</h3>
-          </div>
-          <div className="col-md-6">
-            {/* TODO(jess): we might want to only show this in certain
-             situations/have diff providers be able to customize this more */}
-            <a className="btn btn-default btn-sm" href={authUrl}>
-              {t('Link another account')}
-            </a>
-          </div>
-        </div>
-        {provider.auths.length
-          ? provider.auths.map(auth => {
-              return (
-                <div className="row" key={auth.externalId}>
-                  <div className="col-md-6">
-                    {auth.externalId}
-                  </div>
-                  <div className="col-md-6">
-                    <button
-                      className="btn btn-sm btn-primary"
-                      onClick={this.toggleAuth.bind(this, provider.id, auth)}>
-                      {auth.linked ? t('Disable') : t('Enable')}
-                    </button>
-                  </div>
-                </div>
-              );
-            })
-          : <span>No available auth methods</span>}
-      </div>
-    );
-  },
-
-  renderBody() {
-    let orgFeatures = new Set(this.getOrganization().features);
 
-    if (!orgFeatures.has('integrations-v3')) {
-      return (
-        <div className="alert alert-warning m-b-1">
-          {t("Nothing to see here. You don't have access to this feature yet.")}
-        </div>
-      );
+    let {success, data} = event.data;
+    if (success) {
+      let itemList = this.state.itemList;
+      itemList.push(data);
+      this.setState({
+        itemList: sortArray(itemList, item => item.name)
+      });
+    } else {
+      IndicatorStore.add(t('An error occurred: %s.', data.detail), 'error', {
+        duration: 5000
+      });
     }
+    this.dialog = null;
+  };
+
+  getEndpoints() {
+    let {orgId} = this.props.params;
+    return [
+      ['itemList', `/organizations/${orgId}/integrations/`, {query: {status: ''}}],
+      ['config', `/organizations/${orgId}/config/integrations/`]
+    ];
+  }
 
-    if (this.state.loading) return <LoadingIndicator />;
+  deleteIntegration = integration => {
+    // eslint-disable-next-line no-alert
+    if (!confirm(t('Are you sure you want to remove this integration?'))) return;
 
-    let error = this.state.error;
-    if (error) {
-      if (error.error_type === 'auth') {
-        let authUrl = error.auth_url;
-        if (authUrl.indexOf('?') === -1) {
-          authUrl += '?next=' + encodeURIComponent(document.location.pathname);
-        } else {
-          authUrl += '&next=' + encodeURIComponent(document.location.pathname);
+    let indicator = IndicatorStore.add(t('Saving changes..'));
+    this.api.request(
+      `/organizations/${this.props.params.orgId}/integrations/${integration.id}/`,
+      {
+        method: 'DELETE',
+        success: () => {
+          this.setState({
+            itemList: this.state.itemList.filter(item => item.id !== integration.id)
+          });
+        },
+        error: () => {
+          IndicatorStore.add(t('An error occurred.'), 'error', {
+            duration: 3000
+          });
+        },
+        complete: () => {
+          IndicatorStore.remove(indicator);
         }
-        return (
-          <div>
-            <div className="alert alert-warning m-b-1">
-              {'You need to associate an identity with ' +
-                error.title +
-                ' before you can create issues with this service.'}
-            </div>
-            <a className="btn btn-primary" href={authUrl}>
-              Associate Identity
-            </a>
-          </div>
-        );
-      } else {
-        return (
-          <div className="alert alert-error alert-block">
-            <p>
-              {error.message
-                ? error.message
-                : tct(
-                    'An unknown error occurred. Need help with this? [link:Contact support]',
-                    {
-                      link: <a href="https://sentry.io/support/" />
-                    }
-                  )}
-            </p>
-          </div>
-        );
       }
+    );
+  };
+
+  launchAddIntegration = integration => {
+    let url = `${integration.setupUri}?callback=${this.dialogCallbackName}&init=1`;
+    let name = 'sentryAddIntegration';
+    let width = 400;
+    let height = 400;
+
+    // this attempts to center the dialog
+    let screenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left;
+    let screenTop = window.screenTop != undefined ? window.screenTop : screen.top;
+    let innerWidth = window.innerWidth
+      ? window.innerWidth
+      : document.documentElement.clientWidth
+          ? document.documentElement.clientWidth
+          : screen.width;
+    let innerHeight = window.innerHeight
+      ? window.innerHeight
+      : document.documentElement.clientHeight
+          ? document.documentElement.clientHeight
+          : screen.height;
+    let left = innerWidth / 2 - width / 2 + screenLeft;
+    let top = innerHeight / 2 - height / 2 + screenTop;
+
+    this.dialog = window.open(
+      url,
+      name,
+      `scrollbars=yes, width=${width}, height=${height}, top=${top}, left=${left}`
+    );
+    window.focus && this.dialog.focus();
+    this.dialog.onclose = () => {
+      this.dialog && document.location.refresh();
+    };
+  };
+
+  getStatusLabel(integration) {
+    switch (integration.status) {
+      case 'pending_deletion':
+        return 'Deletion Queued';
+      case 'deletion_in_progress':
+        return 'Deletion in Progress';
+      case 'hidden':
+        return 'Disabled';
+      default:
+        return null;
     }
+  }
 
-    let {ingtegrationList} = this.state;
-    return (
-      <div>
-        {ingtegrationList.map(this.renderProvider)}
-      </div>
-    );
-  },
+  getTitle() {
+    return 'Integrations';
+  }
+
+  renderBody() {
+    let itemList = this.state.itemList;
 
-  render() {
     return (
       <OrganizationHomeContainer>
-        {this.renderBody()}
+        <div className="pull-right">
+          <DropdownLink
+            anchorRight
+            className="btn btn-primary btn-sm"
+            title={t('Add Integration')}>
+            {this.state.config.providers.map(provider => {
+              return (
+                <MenuItem noAnchor={true} key={provider.id}>
+                  <a onClick={this.launchAddIntegration.bind(this, provider)}>
+                    {provider.name}
+                  </a>
+                </MenuItem>
+              );
+            })}
+          </DropdownLink>
+        </div>
+        <h3 className="m-b-2">
+          {t('Integrations')}
+        </h3>
+        {itemList.length > 0
+          ? <div className="panel panel-default">
+              <table className="table">
+                <tbody>
+                  {itemList.map(integration => {
+                    return (
+                      <tr key={integration.id}>
+                        <td>
+                          <strong>
+                            {integration.name}
+                          </strong> — <small>
+                            {integration.provider.name}
+                          </small>
+                        </td>
+                        <td style={{width: 60}}>
+                          <button
+                            onClick={this.deleteIntegration.bind(this, integration)}
+                            className="btn btn-default btn-xs">
+                            <span className="icon icon-trash" />
+                          </button>
+                        </td>
+                      </tr>
+                    );
+                  })}
+                </tbody>
+              </table>
+            </div>
+          : <div className="well blankslate align-center p-x-2 p-y-1">
+              <div className="icon icon-lg icon-git-commit" />
+              <h3>
+                {t('Sentry is better with friends')}
+              </h3>
+              <p>
+                {t(
+                  'Integrations allow you to pull in things like repository data or sync with an external issue tracker.'
+                )}
+              </p>
+              <p className="m-b-1">
+                <a
+                  className="btn btn-default"
+                  href="https://docs.sentry.io/learn/integrations/">
+                  Learn more
+                </a>
+              </p>
+            </div>}
       </OrganizationHomeContainer>
     );
   }
-});
-
-export default OrganizationIntegrations;
+}
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index 9338ef35e4..bd4d8009d8 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -144,6 +144,10 @@ def pytest_configure(config):
 
     plugins.register(TestIssuePlugin2)
 
+    from sentry import integrations
+    from sentry.integrations.example import ExampleIntegration
+    integrations.register(ExampleIntegration)
+
     from sentry.plugins import bindings
     from sentry.plugins.providers.dummy import DummyRepositoryProvider
 
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 04d7d0643c..00a8a74da6 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -6,9 +6,9 @@ import six
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
-from django.utils.decorators import method_decorator
-from django.views.decorators.csrf import csrf_protect
+from django.middleware.csrf import CsrfViewMiddleware
 from django.views.generic import View
+from django.views.decorators.csrf import csrf_exempt
 from sudo.views import redirect_to_sudo
 
 from sentry import roles
@@ -155,15 +155,26 @@ class BaseView(View, OrganizationMixin):
     # TODO(dcramer): change sudo so it can be required only on POST
     sudo_required = False
 
-    def __init__(self, auth_required=None, sudo_required=None, *args, **kwargs):
+    csrf_protect = True
+
+    def __init__(self, auth_required=None, sudo_required=None, csrf_protect=None,
+                 *args, **kwargs):
         if auth_required is not None:
             self.auth_required = auth_required
         if sudo_required is not None:
             self.sudo_required = sudo_required
+        if csrf_protect is not None:
+            self.csrf_protect = csrf_protect
         super(BaseView, self).__init__(*args, **kwargs)
 
-    @method_decorator(csrf_protect)
+    # we manage csrf verification ourselves
+    @csrf_exempt
     def dispatch(self, request, *args, **kwargs):
+        if self.csrf_protect:
+            response = self.test_csrf(request)
+            if response:
+                return response
+
         if self.is_auth_required(request, *args, **kwargs):
             return self.handle_auth_required(request, *args, **kwargs)
 
@@ -182,6 +193,10 @@ class BaseView(View, OrganizationMixin):
 
         return self.handle(request, *args, **kwargs)
 
+    def test_csrf(self, request):
+        middleware = CsrfViewMiddleware()
+        return middleware.process_view(request, self.dispatch, [request], {})
+
     def get_access(self, request, *args, **kwargs):
         return access.DEFAULT
 
diff --git a/src/sentry/web/frontend/integration_setup.py b/src/sentry/web/frontend/integration_setup.py
new file mode 100644
index 0000000000..1c9ed27771
--- /dev/null
+++ b/src/sentry/web/frontend/integration_setup.py
@@ -0,0 +1,52 @@
+from __future__ import absolute_import, print_function
+
+import logging
+
+from sentry import features
+from sentry.integrations.helper import PipelineHelper
+from sentry.web.frontend.base import OrganizationView
+
+logger = logging.getLogger('sentry.integrations')
+
+
+class IntegrationSetupView(OrganizationView):
+    required_scope = 'org:integrations'
+
+    csrf_protect = False
+
+    def has_feature(self, request, organization):
+        return features.has(
+            'organizations:integrations-v3',
+            organization=organization,
+            actor=request.user,
+        )
+
+    def handle(self, request, organization, provider_id):
+        if not self.has_feature(request, organization):
+            return self.redirect('/')
+
+        if request.GET.get('init') != '1':
+            helper = PipelineHelper.get_for_request(
+                request=request,
+                organization=organization,
+                provider_id=provider_id,
+            )
+        else:
+            helper = None
+
+        if helper:
+            try:
+                return helper.current_step()
+            except Exception:
+                logging.exception('integration.setup-error')
+                return helper.error('an internal error occurred')
+
+        helper = PipelineHelper.initialize(
+            request=request,
+            organization=organization,
+            provider_id=provider_id,
+            dialog=True,
+        )
+        # we redirect the user to scrub parameters from the URL to avoid passing
+        # them into third parties
+        return self.redirect(request.path)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index f29d69ce49..235518e25d 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -32,6 +32,7 @@ from sentry.web.frontend.group_event_json import GroupEventJsonView
 from sentry.web.frontend.group_plugin_action import GroupPluginActionView
 from sentry.web.frontend.group_tag_export import GroupTagExportView
 from sentry.web.frontend.home import HomeView
+from sentry.web.frontend.integration_setup import IntegrationSetupView
 from sentry.web.frontend.mailgun_inbound_webhook import \
     MailgunInboundWebhookView
 from sentry.web.frontend.oauth_authorize import OAuthAuthorizeView
@@ -320,6 +321,10 @@ urlpatterns += patterns(
         OrganizationAuthSettingsView.as_view(),
         name='sentry-organization-auth-settings'
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[\w_-]+)/integrations/(?P<provider_id>[\w_-]+)/setup/$',
+        IntegrationSetupView.as_view()
+    ),
     url(
         r'^organizations/(?P<organization_slug>[\w_-]+)/members/$',
         OrganizationMembersView.as_view(),
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 2f24e42797..e75bf81670 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -91,6 +91,26 @@ window.TestStubs = {
       ],
       ...params
     };
+  },
+  Integration: (...params) => {
+    return {
+      id: '4',
+      name: 'repo-name',
+      provider: {
+        id: 'github',
+        name: 'GitHub'
+      },
+      ...params
+    };
+  },
+  GitHubIntegrationProvider: (...params) => {
+    return {
+      id: 'github',
+      name: 'GitHub',
+      config: [],
+      setupUri: '/github-integration-setup-uri/',
+      ...params
+    };
   }
 };
 
diff --git a/tests/js/spec/views/__snapshots__/organizationIntegrations.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationIntegrations.spec.jsx.snap
new file mode 100644
index 0000000000..b1a0c5652e
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/organizationIntegrations.spec.jsx.snap
@@ -0,0 +1,1762 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`OrganizationIntegrations render() with a provider renders 1`] = `
+<OrganizationIntegrations
+  params={
+    Object {
+      "orgId": "org-slug",
+    }
+  }
+>
+  <DocumentTitle
+    title="Integrations"
+  >
+    <HomeContainer>
+      <div
+        className="organization-home"
+      >
+        <div
+          className="sub-header flex flex-container flex-vertically-centered"
+        >
+          <div>
+            <ProjectSelector
+              organization={
+                Object {
+                  "access": Array [
+                    "org:read",
+                    "org:write",
+                    "org:admin",
+                    "project:read",
+                    "project:write",
+                    "project:admin",
+                    "team:read",
+                    "team:write",
+                    "team:admin",
+                  ],
+                  "features": Array [],
+                  "id": "3",
+                  "name": "Organization Name",
+                  "onboardingTasks": Array [],
+                  "slug": "org-slug",
+                  "teams": Array [],
+                }
+              }
+              projectId={null}
+            >
+              <div
+                className="project-select"
+              >
+                <h3>
+                  <Link
+                    className="home-crumb"
+                    to="/org-slug/"
+                  >
+                    <Link
+                      className="home-crumb"
+                      onlyActiveOnIndex={false}
+                      style={Object {}}
+                      to="/org-slug/"
+                    >
+                      <a
+                        className="home-crumb"
+                        onClick={[Function]}
+                        style={Object {}}
+                      >
+                        <span
+                          className="icon-home"
+                        />
+                      </a>
+                    </Link>
+                  </Link>
+                  Select a project
+                  <DropdownLink
+                    anchorRight={false}
+                    caret={true}
+                    disabled={false}
+                    onClose={[Function]}
+                    onOpen={[Function]}
+                    title=""
+                    topLevelClasses="project-dropdown is-empty"
+                  >
+                    <span
+                      className="project-dropdown is-empty dropdown"
+                    >
+                      <a
+                        className="dropdown-toggle"
+                        data-toggle="dropdown"
+                      >
+                        <i
+                          className="icon-arrow-down"
+                        />
+                      </a>
+                      <ul
+                        className="dropdown-menu"
+                      >
+                        <MenuItem
+                          className="empty-projects-item"
+                          noAnchor={true}
+                        >
+                          <li
+                            className="empty-projects-item"
+                            href={null}
+                            role="presentation"
+                            title={null}
+                          >
+                            <div
+                              className="empty-message"
+                            >
+                              You have no projects.
+                            </div>
+                          </li>
+                        </MenuItem>
+                        <MenuItem
+                          divider={true}
+                        >
+                          <li
+                            className="divider"
+                            href={null}
+                            role="presentation"
+                            title={null}
+                          />
+                        </MenuItem>
+                        <MenuItem
+                          className="empty-projects-item"
+                          noAnchor={true}
+                        >
+                          <li
+                            className="empty-projects-item"
+                            href={null}
+                            role="presentation"
+                            title={null}
+                          >
+                            <a
+                              className="btn btn-primary btn-block"
+                              href="/organizations/org-slug/projects/new/"
+                            >
+                              Create project
+                            </a>
+                          </li>
+                        </MenuItem>
+                      </ul>
+                    </span>
+                  </DropdownLink>
+                </h3>
+              </div>
+            </ProjectSelector>
+          </div>
+          <div
+            className="align-right hidden-xs"
+          >
+            <Button
+              disabled={false}
+              priority="primary"
+              style={
+                Object {
+                  "marginRight": 5,
+                }
+              }
+              to="/organizations/org-slug/projects/new/"
+            >
+              <Link
+                className="button button-primary"
+                disabled={false}
+                onClick={[Function]}
+                onlyActiveOnIndex={false}
+                role="button"
+                style={
+                  Object {
+                    "marginRight": 5,
+                  }
+                }
+                to="/organizations/org-slug/projects/new/"
+              >
+                <a
+                  className="button button-primary"
+                  disabled={false}
+                  onClick={[Function]}
+                  role="button"
+                  style={
+                    Object {
+                      "marginRight": 5,
+                    }
+                  }
+                >
+                  New Project
+                </a>
+              </Link>
+            </Button>
+            <Button
+              disabled={false}
+              priority="primary"
+              to="/organizations/org-slug/teams/new/"
+            >
+              <Link
+                className="button button-primary"
+                disabled={false}
+                onClick={[Function]}
+                onlyActiveOnIndex={false}
+                role="button"
+                style={Object {}}
+                to="/organizations/org-slug/teams/new/"
+              >
+                <a
+                  className="button button-primary"
+                  disabled={false}
+                  onClick={[Function]}
+                  role="button"
+                  style={Object {}}
+                >
+                  New Team
+                </a>
+              </Link>
+            </Button>
+          </div>
+        </div>
+        <div
+          className="container"
+        >
+          <div
+            className="content row"
+          >
+            <div
+              className="col-md-2 org-sidebar"
+            >
+              <HomeSidebar>
+                <div>
+                  <h6
+                    className="nav-header"
+                  >
+                    Organization
+                  </h6>
+                  <ul
+                    className="nav nav-stacked"
+                  >
+                    <ListLink
+                      activeClassName="active"
+                      index={false}
+                      isActive={[Function]}
+                      to="/org-slug/"
+                    >
+                      <li
+                        className=""
+                      >
+                        <Link
+                          onlyActiveOnIndex={false}
+                          style={Object {}}
+                          to="/org-slug/"
+                        >
+                          <a
+                            onClick={[Function]}
+                            style={Object {}}
+                          >
+                            Dashboard
+                          </a>
+                        </Link>
+                      </li>
+                    </ListLink>
+                    <ListLink
+                      activeClassName="active"
+                      index={false}
+                      isActive={[Function]}
+                      to="/organizations/org-slug/teams/"
+                    >
+                      <li
+                        className=""
+                      >
+                        <Link
+                          onlyActiveOnIndex={false}
+                          style={Object {}}
+                          to="/organizations/org-slug/teams/"
+                        >
+                          <a
+                            onClick={[Function]}
+                            style={Object {}}
+                          >
+                            Projects & Teams
+                          </a>
+                        </Link>
+                      </li>
+                    </ListLink>
+                    <ListLink
+                      activeClassName="active"
+                      index={false}
+                      to="/organizations/org-slug/stats/"
+                    >
+                      <li
+                        className=""
+                      >
+                        <Link
+                          onlyActiveOnIndex={false}
+                          style={Object {}}
+                          to="/organizations/org-slug/stats/"
+                        >
+                          <a
+                            onClick={[Function]}
+                            style={Object {}}
+                          >
+                            Stats
+                          </a>
+                        </Link>
+                      </li>
+                    </ListLink>
+                  </ul>
+                  <div>
+                    <h6
+                      className="nav-header with-divider"
+                    >
+                      Issues
+                    </h6>
+                    <ul
+                      className="nav nav-stacked"
+                    >
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/issues/assigned/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/issues/assigned/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              Assigned to Me
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/issues/bookmarks/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/issues/bookmarks/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              Bookmarks
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/issues/history/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/issues/history/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              History
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                    </ul>
+                  </div>
+                  <div>
+                    <h6
+                      className="nav-header with-divider"
+                    >
+                      Manage
+                    </h6>
+                    <ul
+                      className="nav nav-stacked"
+                    >
+                      <li>
+                        <a
+                          href="/organizations/org-slug/members/"
+                        >
+                          Members
+                           
+                        </a>
+                      </li>
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/audit-log/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/audit-log/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              Audit Log
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/rate-limits/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/rate-limits/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              Rate Limits
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/repos/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/repos/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              Repositories
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/settings/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/settings/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              Settings
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                    </ul>
+                  </div>
+                </div>
+              </HomeSidebar>
+            </div>
+            <div
+              className="col-md-10"
+            >
+              <div
+                className="pull-right"
+              >
+                <DropdownLink
+                  anchorRight={true}
+                  caret={true}
+                  className="btn btn-primary btn-sm"
+                  disabled={false}
+                  title="Add Integration"
+                >
+                  <span
+                    className="pull-right anchor-right dropdown"
+                  >
+                    <a
+                      className="btn btn-primary btn-sm dropdown-menu-right dropdown-toggle"
+                      data-toggle="dropdown"
+                    >
+                      Add Integration
+                      <i
+                        className="icon-arrow-down"
+                      />
+                    </a>
+                    <ul
+                      className="dropdown-menu"
+                    >
+                      <MenuItem
+                        noAnchor={true}
+                      >
+                        <li
+                          className=""
+                          href={null}
+                          role="presentation"
+                          title={null}
+                        >
+                          <a
+                            onClick={[Function]}
+                          >
+                            GitHub
+                          </a>
+                        </li>
+                      </MenuItem>
+                    </ul>
+                  </span>
+                </DropdownLink>
+              </div>
+              <h3
+                className="m-b-2"
+              >
+                Integrations
+              </h3>
+              <div
+                className="well blankslate align-center p-x-2 p-y-1"
+              >
+                <div
+                  className="icon icon-lg icon-git-commit"
+                />
+                <h3>
+                  Sentry is better with friends
+                </h3>
+                <p>
+                  Integrations allow you to pull in things like repository data or sync with an external issue tracker.
+                </p>
+                <p
+                  className="m-b-1"
+                >
+                  <a
+                    className="btn btn-default"
+                    href="https://docs.sentry.io/learn/integrations/"
+                  >
+                    Learn more
+                  </a>
+                </p>
+              </div>
+            </div>
+          </div>
+        </div>
+      </div>
+    </HomeContainer>
+  </DocumentTitle>
+</OrganizationIntegrations>
+`;
+
+exports[`OrganizationIntegrations render() with a provider renders with a repository 1`] = `
+<OrganizationIntegrations
+  params={
+    Object {
+      "orgId": "org-slug",
+    }
+  }
+>
+  <DocumentTitle
+    title="Integrations"
+  >
+    <HomeContainer>
+      <div
+        className="organization-home"
+      >
+        <div
+          className="sub-header flex flex-container flex-vertically-centered"
+        >
+          <div>
+            <ProjectSelector
+              organization={
+                Object {
+                  "access": Array [
+                    "org:read",
+                    "org:write",
+                    "org:admin",
+                    "project:read",
+                    "project:write",
+                    "project:admin",
+                    "team:read",
+                    "team:write",
+                    "team:admin",
+                  ],
+                  "features": Array [],
+                  "id": "3",
+                  "name": "Organization Name",
+                  "onboardingTasks": Array [],
+                  "slug": "org-slug",
+                  "teams": Array [],
+                }
+              }
+              projectId={null}
+            >
+              <div
+                className="project-select"
+              >
+                <h3>
+                  <Link
+                    className="home-crumb"
+                    to="/org-slug/"
+                  >
+                    <Link
+                      className="home-crumb"
+                      onlyActiveOnIndex={false}
+                      style={Object {}}
+                      to="/org-slug/"
+                    >
+                      <a
+                        className="home-crumb"
+                        onClick={[Function]}
+                        style={Object {}}
+                      >
+                        <span
+                          className="icon-home"
+                        />
+                      </a>
+                    </Link>
+                  </Link>
+                  Select a project
+                  <DropdownLink
+                    anchorRight={false}
+                    caret={true}
+                    disabled={false}
+                    onClose={[Function]}
+                    onOpen={[Function]}
+                    title=""
+                    topLevelClasses="project-dropdown is-empty"
+                  >
+                    <span
+                      className="project-dropdown is-empty dropdown"
+                    >
+                      <a
+                        className="dropdown-toggle"
+                        data-toggle="dropdown"
+                      >
+                        <i
+                          className="icon-arrow-down"
+                        />
+                      </a>
+                      <ul
+                        className="dropdown-menu"
+                      >
+                        <MenuItem
+                          className="empty-projects-item"
+                          noAnchor={true}
+                        >
+                          <li
+                            className="empty-projects-item"
+                            href={null}
+                            role="presentation"
+                            title={null}
+                          >
+                            <div
+                              className="empty-message"
+                            >
+                              You have no projects.
+                            </div>
+                          </li>
+                        </MenuItem>
+                        <MenuItem
+                          divider={true}
+                        >
+                          <li
+                            className="divider"
+                            href={null}
+                            role="presentation"
+                            title={null}
+                          />
+                        </MenuItem>
+                        <MenuItem
+                          className="empty-projects-item"
+                          noAnchor={true}
+                        >
+                          <li
+                            className="empty-projects-item"
+                            href={null}
+                            role="presentation"
+                            title={null}
+                          >
+                            <a
+                              className="btn btn-primary btn-block"
+                              href="/organizations/org-slug/projects/new/"
+                            >
+                              Create project
+                            </a>
+                          </li>
+                        </MenuItem>
+                      </ul>
+                    </span>
+                  </DropdownLink>
+                </h3>
+              </div>
+            </ProjectSelector>
+          </div>
+          <div
+            className="align-right hidden-xs"
+          >
+            <Button
+              disabled={false}
+              priority="primary"
+              style={
+                Object {
+                  "marginRight": 5,
+                }
+              }
+              to="/organizations/org-slug/projects/new/"
+            >
+              <Link
+                className="button button-primary"
+                disabled={false}
+                onClick={[Function]}
+                onlyActiveOnIndex={false}
+                role="button"
+                style={
+                  Object {
+                    "marginRight": 5,
+                  }
+                }
+                to="/organizations/org-slug/projects/new/"
+              >
+                <a
+                  className="button button-primary"
+                  disabled={false}
+                  onClick={[Function]}
+                  role="button"
+                  style={
+                    Object {
+                      "marginRight": 5,
+                    }
+                  }
+                >
+                  New Project
+                </a>
+              </Link>
+            </Button>
+            <Button
+              disabled={false}
+              priority="primary"
+              to="/organizations/org-slug/teams/new/"
+            >
+              <Link
+                className="button button-primary"
+                disabled={false}
+                onClick={[Function]}
+                onlyActiveOnIndex={false}
+                role="button"
+                style={Object {}}
+                to="/organizations/org-slug/teams/new/"
+              >
+                <a
+                  className="button button-primary"
+                  disabled={false}
+                  onClick={[Function]}
+                  role="button"
+                  style={Object {}}
+                >
+                  New Team
+                </a>
+              </Link>
+            </Button>
+          </div>
+        </div>
+        <div
+          className="container"
+        >
+          <div
+            className="content row"
+          >
+            <div
+              className="col-md-2 org-sidebar"
+            >
+              <HomeSidebar>
+                <div>
+                  <h6
+                    className="nav-header"
+                  >
+                    Organization
+                  </h6>
+                  <ul
+                    className="nav nav-stacked"
+                  >
+                    <ListLink
+                      activeClassName="active"
+                      index={false}
+                      isActive={[Function]}
+                      to="/org-slug/"
+                    >
+                      <li
+                        className=""
+                      >
+                        <Link
+                          onlyActiveOnIndex={false}
+                          style={Object {}}
+                          to="/org-slug/"
+                        >
+                          <a
+                            onClick={[Function]}
+                            style={Object {}}
+                          >
+                            Dashboard
+                          </a>
+                        </Link>
+                      </li>
+                    </ListLink>
+                    <ListLink
+                      activeClassName="active"
+                      index={false}
+                      isActive={[Function]}
+                      to="/organizations/org-slug/teams/"
+                    >
+                      <li
+                        className=""
+                      >
+                        <Link
+                          onlyActiveOnIndex={false}
+                          style={Object {}}
+                          to="/organizations/org-slug/teams/"
+                        >
+                          <a
+                            onClick={[Function]}
+                            style={Object {}}
+                          >
+                            Projects & Teams
+                          </a>
+                        </Link>
+                      </li>
+                    </ListLink>
+                    <ListLink
+                      activeClassName="active"
+                      index={false}
+                      to="/organizations/org-slug/stats/"
+                    >
+                      <li
+                        className=""
+                      >
+                        <Link
+                          onlyActiveOnIndex={false}
+                          style={Object {}}
+                          to="/organizations/org-slug/stats/"
+                        >
+                          <a
+                            onClick={[Function]}
+                            style={Object {}}
+                          >
+                            Stats
+                          </a>
+                        </Link>
+                      </li>
+                    </ListLink>
+                  </ul>
+                  <div>
+                    <h6
+                      className="nav-header with-divider"
+                    >
+                      Issues
+                    </h6>
+                    <ul
+                      className="nav nav-stacked"
+                    >
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/issues/assigned/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/issues/assigned/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              Assigned to Me
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/issues/bookmarks/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/issues/bookmarks/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              Bookmarks
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/issues/history/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/issues/history/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              History
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                    </ul>
+                  </div>
+                  <div>
+                    <h6
+                      className="nav-header with-divider"
+                    >
+                      Manage
+                    </h6>
+                    <ul
+                      className="nav nav-stacked"
+                    >
+                      <li>
+                        <a
+                          href="/organizations/org-slug/members/"
+                        >
+                          Members
+                           
+                        </a>
+                      </li>
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/audit-log/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/audit-log/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              Audit Log
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/rate-limits/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/rate-limits/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              Rate Limits
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/repos/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/repos/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              Repositories
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/settings/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/settings/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              Settings
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                    </ul>
+                  </div>
+                </div>
+              </HomeSidebar>
+            </div>
+            <div
+              className="col-md-10"
+            >
+              <div
+                className="pull-right"
+              >
+                <DropdownLink
+                  anchorRight={true}
+                  caret={true}
+                  className="btn btn-primary btn-sm"
+                  disabled={false}
+                  title="Add Integration"
+                >
+                  <span
+                    className="pull-right anchor-right dropdown"
+                  >
+                    <a
+                      className="btn btn-primary btn-sm dropdown-menu-right dropdown-toggle"
+                      data-toggle="dropdown"
+                    >
+                      Add Integration
+                      <i
+                        className="icon-arrow-down"
+                      />
+                    </a>
+                    <ul
+                      className="dropdown-menu"
+                    >
+                      <MenuItem
+                        noAnchor={true}
+                      >
+                        <li
+                          className=""
+                          href={null}
+                          role="presentation"
+                          title={null}
+                        >
+                          <a
+                            onClick={[Function]}
+                          >
+                            GitHub
+                          </a>
+                        </li>
+                      </MenuItem>
+                    </ul>
+                  </span>
+                </DropdownLink>
+              </div>
+              <h3
+                className="m-b-2"
+              >
+                Integrations
+              </h3>
+              <div
+                className="panel panel-default"
+              >
+                <table
+                  className="table"
+                >
+                  <tbody>
+                    <tr>
+                      <td>
+                        <strong>
+                          repo-name
+                        </strong>
+                         — 
+                        <small>
+                          GitHub
+                        </small>
+                      </td>
+                      <td
+                        style={
+                          Object {
+                            "width": 60,
+                          }
+                        }
+                      >
+                        <button
+                          className="btn btn-default btn-xs"
+                          onClick={[Function]}
+                        >
+                          <span
+                            className="icon icon-trash"
+                          />
+                        </button>
+                      </td>
+                    </tr>
+                  </tbody>
+                </table>
+              </div>
+            </div>
+          </div>
+        </div>
+      </div>
+    </HomeContainer>
+  </DocumentTitle>
+</OrganizationIntegrations>
+`;
+
+exports[`OrganizationIntegrations render() without any providers is loading when initially rendering 1`] = `
+<DocumentTitle
+  title="Integrations"
+>
+  <HomeContainer>
+    <div
+      className="pull-right"
+    >
+      <DropdownLink
+        anchorRight={true}
+        caret={true}
+        className="btn btn-primary btn-sm"
+        disabled={false}
+        title="Add Integration"
+      />
+    </div>
+    <h3
+      className="m-b-2"
+    >
+      Integrations
+    </h3>
+    <div
+      className="well blankslate align-center p-x-2 p-y-1"
+    >
+      <div
+        className="icon icon-lg icon-git-commit"
+      />
+      <h3>
+        Sentry is better with friends
+      </h3>
+      <p>
+        Integrations allow you to pull in things like repository data or sync with an external issue tracker.
+      </p>
+      <p
+        className="m-b-1"
+      >
+        <a
+          className="btn btn-default"
+          href="https://docs.sentry.io/learn/integrations/"
+        >
+          Learn more
+        </a>
+      </p>
+    </div>
+  </HomeContainer>
+</DocumentTitle>
+`;
+
+exports[`OrganizationIntegrations render() without any providers renders 1`] = `
+<OrganizationIntegrations
+  params={
+    Object {
+      "orgId": "org-slug",
+    }
+  }
+>
+  <DocumentTitle
+    title="Integrations"
+  >
+    <HomeContainer>
+      <div
+        className="organization-home"
+      >
+        <div
+          className="sub-header flex flex-container flex-vertically-centered"
+        >
+          <div>
+            <ProjectSelector
+              organization={
+                Object {
+                  "access": Array [
+                    "org:read",
+                    "org:write",
+                    "org:admin",
+                    "project:read",
+                    "project:write",
+                    "project:admin",
+                    "team:read",
+                    "team:write",
+                    "team:admin",
+                  ],
+                  "features": Array [],
+                  "id": "3",
+                  "name": "Organization Name",
+                  "onboardingTasks": Array [],
+                  "slug": "org-slug",
+                  "teams": Array [],
+                }
+              }
+              projectId={null}
+            >
+              <div
+                className="project-select"
+              >
+                <h3>
+                  <Link
+                    className="home-crumb"
+                    to="/org-slug/"
+                  >
+                    <Link
+                      className="home-crumb"
+                      onlyActiveOnIndex={false}
+                      style={Object {}}
+                      to="/org-slug/"
+                    >
+                      <a
+                        className="home-crumb"
+                        onClick={[Function]}
+                        style={Object {}}
+                      >
+                        <span
+                          className="icon-home"
+                        />
+                      </a>
+                    </Link>
+                  </Link>
+                  Select a project
+                  <DropdownLink
+                    anchorRight={false}
+                    caret={true}
+                    disabled={false}
+                    onClose={[Function]}
+                    onOpen={[Function]}
+                    title=""
+                    topLevelClasses="project-dropdown is-empty"
+                  >
+                    <span
+                      className="project-dropdown is-empty dropdown"
+                    >
+                      <a
+                        className="dropdown-toggle"
+                        data-toggle="dropdown"
+                      >
+                        <i
+                          className="icon-arrow-down"
+                        />
+                      </a>
+                      <ul
+                        className="dropdown-menu"
+                      >
+                        <MenuItem
+                          className="empty-projects-item"
+                          noAnchor={true}
+                        >
+                          <li
+                            className="empty-projects-item"
+                            href={null}
+                            role="presentation"
+                            title={null}
+                          >
+                            <div
+                              className="empty-message"
+                            >
+                              You have no projects.
+                            </div>
+                          </li>
+                        </MenuItem>
+                        <MenuItem
+                          divider={true}
+                        >
+                          <li
+                            className="divider"
+                            href={null}
+                            role="presentation"
+                            title={null}
+                          />
+                        </MenuItem>
+                        <MenuItem
+                          className="empty-projects-item"
+                          noAnchor={true}
+                        >
+                          <li
+                            className="empty-projects-item"
+                            href={null}
+                            role="presentation"
+                            title={null}
+                          >
+                            <a
+                              className="btn btn-primary btn-block"
+                              href="/organizations/org-slug/projects/new/"
+                            >
+                              Create project
+                            </a>
+                          </li>
+                        </MenuItem>
+                      </ul>
+                    </span>
+                  </DropdownLink>
+                </h3>
+              </div>
+            </ProjectSelector>
+          </div>
+          <div
+            className="align-right hidden-xs"
+          >
+            <Button
+              disabled={false}
+              priority="primary"
+              style={
+                Object {
+                  "marginRight": 5,
+                }
+              }
+              to="/organizations/org-slug/projects/new/"
+            >
+              <Link
+                className="button button-primary"
+                disabled={false}
+                onClick={[Function]}
+                onlyActiveOnIndex={false}
+                role="button"
+                style={
+                  Object {
+                    "marginRight": 5,
+                  }
+                }
+                to="/organizations/org-slug/projects/new/"
+              >
+                <a
+                  className="button button-primary"
+                  disabled={false}
+                  onClick={[Function]}
+                  role="button"
+                  style={
+                    Object {
+                      "marginRight": 5,
+                    }
+                  }
+                >
+                  New Project
+                </a>
+              </Link>
+            </Button>
+            <Button
+              disabled={false}
+              priority="primary"
+              to="/organizations/org-slug/teams/new/"
+            >
+              <Link
+                className="button button-primary"
+                disabled={false}
+                onClick={[Function]}
+                onlyActiveOnIndex={false}
+                role="button"
+                style={Object {}}
+                to="/organizations/org-slug/teams/new/"
+              >
+                <a
+                  className="button button-primary"
+                  disabled={false}
+                  onClick={[Function]}
+                  role="button"
+                  style={Object {}}
+                >
+                  New Team
+                </a>
+              </Link>
+            </Button>
+          </div>
+        </div>
+        <div
+          className="container"
+        >
+          <div
+            className="content row"
+          >
+            <div
+              className="col-md-2 org-sidebar"
+            >
+              <HomeSidebar>
+                <div>
+                  <h6
+                    className="nav-header"
+                  >
+                    Organization
+                  </h6>
+                  <ul
+                    className="nav nav-stacked"
+                  >
+                    <ListLink
+                      activeClassName="active"
+                      index={false}
+                      isActive={[Function]}
+                      to="/org-slug/"
+                    >
+                      <li
+                        className=""
+                      >
+                        <Link
+                          onlyActiveOnIndex={false}
+                          style={Object {}}
+                          to="/org-slug/"
+                        >
+                          <a
+                            onClick={[Function]}
+                            style={Object {}}
+                          >
+                            Dashboard
+                          </a>
+                        </Link>
+                      </li>
+                    </ListLink>
+                    <ListLink
+                      activeClassName="active"
+                      index={false}
+                      isActive={[Function]}
+                      to="/organizations/org-slug/teams/"
+                    >
+                      <li
+                        className=""
+                      >
+                        <Link
+                          onlyActiveOnIndex={false}
+                          style={Object {}}
+                          to="/organizations/org-slug/teams/"
+                        >
+                          <a
+                            onClick={[Function]}
+                            style={Object {}}
+                          >
+                            Projects & Teams
+                          </a>
+                        </Link>
+                      </li>
+                    </ListLink>
+                    <ListLink
+                      activeClassName="active"
+                      index={false}
+                      to="/organizations/org-slug/stats/"
+                    >
+                      <li
+                        className=""
+                      >
+                        <Link
+                          onlyActiveOnIndex={false}
+                          style={Object {}}
+                          to="/organizations/org-slug/stats/"
+                        >
+                          <a
+                            onClick={[Function]}
+                            style={Object {}}
+                          >
+                            Stats
+                          </a>
+                        </Link>
+                      </li>
+                    </ListLink>
+                  </ul>
+                  <div>
+                    <h6
+                      className="nav-header with-divider"
+                    >
+                      Issues
+                    </h6>
+                    <ul
+                      className="nav nav-stacked"
+                    >
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/issues/assigned/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/issues/assigned/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              Assigned to Me
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/issues/bookmarks/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/issues/bookmarks/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              Bookmarks
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/issues/history/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/issues/history/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              History
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                    </ul>
+                  </div>
+                  <div>
+                    <h6
+                      className="nav-header with-divider"
+                    >
+                      Manage
+                    </h6>
+                    <ul
+                      className="nav nav-stacked"
+                    >
+                      <li>
+                        <a
+                          href="/organizations/org-slug/members/"
+                        >
+                          Members
+                           
+                        </a>
+                      </li>
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/audit-log/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/audit-log/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              Audit Log
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/rate-limits/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/rate-limits/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              Rate Limits
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/repos/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/repos/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              Repositories
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                      <ListLink
+                        activeClassName="active"
+                        index={false}
+                        to="/organizations/org-slug/settings/"
+                      >
+                        <li
+                          className=""
+                        >
+                          <Link
+                            onlyActiveOnIndex={false}
+                            style={Object {}}
+                            to="/organizations/org-slug/settings/"
+                          >
+                            <a
+                              onClick={[Function]}
+                              style={Object {}}
+                            >
+                              Settings
+                            </a>
+                          </Link>
+                        </li>
+                      </ListLink>
+                    </ul>
+                  </div>
+                </div>
+              </HomeSidebar>
+            </div>
+            <div
+              className="col-md-10"
+            >
+              <div
+                className="pull-right"
+              >
+                <DropdownLink
+                  anchorRight={true}
+                  caret={true}
+                  className="btn btn-primary btn-sm"
+                  disabled={false}
+                  title="Add Integration"
+                >
+                  <span
+                    className="pull-right anchor-right dropdown"
+                  >
+                    <a
+                      className="btn btn-primary btn-sm dropdown-menu-right dropdown-toggle"
+                      data-toggle="dropdown"
+                    >
+                      Add Integration
+                      <i
+                        className="icon-arrow-down"
+                      />
+                    </a>
+                    <ul
+                      className="dropdown-menu"
+                    />
+                  </span>
+                </DropdownLink>
+              </div>
+              <h3
+                className="m-b-2"
+              >
+                Integrations
+              </h3>
+              <div
+                className="well blankslate align-center p-x-2 p-y-1"
+              >
+                <div
+                  className="icon icon-lg icon-git-commit"
+                />
+                <h3>
+                  Sentry is better with friends
+                </h3>
+                <p>
+                  Integrations allow you to pull in things like repository data or sync with an external issue tracker.
+                </p>
+                <p
+                  className="m-b-1"
+                >
+                  <a
+                    className="btn btn-default"
+                    href="https://docs.sentry.io/learn/integrations/"
+                  >
+                    Learn more
+                  </a>
+                </p>
+              </div>
+            </div>
+          </div>
+        </div>
+      </div>
+    </HomeContainer>
+  </DocumentTitle>
+</OrganizationIntegrations>
+`;
diff --git a/tests/js/spec/views/organizationIntegrations.spec.jsx b/tests/js/spec/views/organizationIntegrations.spec.jsx
new file mode 100644
index 0000000000..2c5abf0b4d
--- /dev/null
+++ b/tests/js/spec/views/organizationIntegrations.spec.jsx
@@ -0,0 +1,97 @@
+import React from 'react';
+import {mount, shallow} from 'enzyme';
+
+import {Client} from 'app/api';
+import OrganizationIntegrations from 'app/views/organizationIntegrations';
+
+const childContextTypes = {
+  organization: React.PropTypes.object,
+  location: React.PropTypes.object
+};
+
+describe('OrganizationIntegrations', function() {
+  beforeEach(function() {
+    Client.clearMockResponses();
+  });
+
+  describe('render()', function() {
+    describe('without any providers', function() {
+      beforeEach(function() {
+        Client.addMockResponse({
+          url: '/organizations/org-slug/integrations/',
+          body: []
+        });
+        Client.addMockResponse({
+          url: '/organizations/org-slug/config/integrations/',
+          body: {providers: []}
+        });
+      });
+
+      it('is loading when initially rendering', function() {
+        let wrapper = shallow(<OrganizationIntegrations params={{orgId: 'org-slug'}} />, {
+          context: {
+            router: TestStubs.router(),
+            organization: TestStubs.Organization(),
+            location: TestStubs.location()
+          },
+          childContextTypes
+        });
+        expect(wrapper).toMatchSnapshot();
+      });
+
+      it('renders', function() {
+        let wrapper = mount(<OrganizationIntegrations params={{orgId: 'org-slug'}} />, {
+          context: {
+            router: TestStubs.router(),
+            organization: TestStubs.Organization(),
+            location: TestStubs.location()
+          },
+          childContextTypes
+        });
+        expect(wrapper.state('loading')).toBe(false);
+        expect(wrapper).toMatchSnapshot();
+      });
+    });
+
+    describe('with a provider', function() {
+      beforeEach(function() {
+        Client.addMockResponse({
+          url: '/organizations/org-slug/config/integrations/',
+          body: {providers: [TestStubs.GitHubIntegrationProvider()]}
+        });
+      });
+      it('renders', function() {
+        Client.addMockResponse({
+          url: '/organizations/org-slug/integrations/',
+          body: []
+        });
+        let wrapper = mount(<OrganizationIntegrations params={{orgId: 'org-slug'}} />, {
+          context: {
+            router: TestStubs.router(),
+            organization: TestStubs.Organization(),
+            location: TestStubs.location()
+          },
+          childContextTypes
+        });
+        expect(wrapper.state('loading')).toBe(false);
+        expect(wrapper).toMatchSnapshot();
+      });
+      it('renders with a repository', function() {
+        Client.addMockResponse({
+          url: '/organizations/org-slug/integrations/',
+          body: [TestStubs.Integration()]
+        });
+        let wrapper = mount(<OrganizationIntegrations params={{orgId: 'org-slug'}} />, {
+          context: {
+            router: TestStubs.router(),
+            organization: TestStubs.Organization(),
+            location: TestStubs.location()
+          },
+          childContextTypes
+        });
+        expect(wrapper.state('loading')).toBe(false);
+        expect(wrapper).toMatchSnapshot();
+      });
+    });
+  });
+});
diff --git a/tests/sentry/api/endpoints/test_organization_config_integrations.py b/tests/sentry/api/endpoints/test_organization_config_integrations.py
new file mode 100644
index 0000000000..f25fe69e29
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_config_integrations.py
@@ -0,0 +1,23 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase
+
+
+class OrganizationConfigIntegrationsTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        org = self.create_organization(owner=self.user, name='baz')
+
+        url = reverse('sentry-api-0-organization-config-integrations', args=[org.slug])
+        response = self.client.get(url)
+
+        assert response.status_code == 200, response.content
+        assert len(response.data['providers']) == 1
+        provider = response.data['providers'][0]
+        assert provider['id'] == 'example'
+        assert provider['name'] == 'Example'
+        assert provider['config']
+        assert provider['setupUri']
diff --git a/tests/sentry/api/endpoints/test_organization_integration_details.py b/tests/sentry/api/endpoints/test_organization_integration_details.py
new file mode 100644
index 0000000000..d68c684a70
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_integration_details.py
@@ -0,0 +1,46 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.models import Integration, OrganizationIntegration
+from sentry.testutils import APITestCase
+
+
+class OrganizationIntegrationDetailsTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+        org = self.create_organization(owner=self.user, name='baz')
+        integration = Integration.objects.create(
+            provider='example',
+            name='Example',
+        )
+        integration.add_organization(org.id)
+        path = '/api/0/organizations/{}/integrations/{}/'.format(org.slug, integration.id)
+
+        with self.feature('organizations:integrations-v3', True):
+            response = self.client.get(path, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == six.text_type(integration.id)
+
+
+class OrganizationIntegrationDeleteTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+        org = self.create_organization(owner=self.user, name='baz')
+        integration = Integration.objects.create(
+            provider='example',
+            name='Example',
+        )
+        integration.add_organization(org.id)
+        path = '/api/0/organizations/{}/integrations/{}/'.format(org.slug, integration.id)
+
+        with self.feature('organizations:integrations-v3', True):
+            response = self.client.delete(path, format='json')
+
+        assert response.status_code == 204, response.content
+        assert Integration.objects.filter(id=integration.id).exists()
+        assert not OrganizationIntegration.objects.filter(
+            id=integration.id,
+            organization=org,
+        ).exists()
diff --git a/tests/sentry/api/endpoints/test_organization_integrations.py b/tests/sentry/api/endpoints/test_organization_integrations.py
index c38c364dfc..a1f213af04 100644
--- a/tests/sentry/api/endpoints/test_organization_integrations.py
+++ b/tests/sentry/api/endpoints/test_organization_integrations.py
@@ -2,117 +2,24 @@ from __future__ import absolute_import
 
 import six
 
-from django.core.urlresolvers import reverse
-
-from social_auth.models import UserSocialAuth
-from sentry.models import Integration, OrganizationIntegration
+from sentry.models import Integration
 from sentry.testutils import APITestCase
 
 
 class OrganizationIntegrationsListTest(APITestCase):
     def test_simple(self):
         self.login_as(user=self.user)
-
         org = self.create_organization(owner=self.user, name='baz')
-        auth = UserSocialAuth.objects.create(
-            provider='dummy',
-            user=self.user,
-            uid='123456',
+        integration = Integration.objects.create(
+            provider='example',
+            name='Example',
         )
+        integration.add_organization(org.id)
+        path = '/api/0/organizations/{}/integrations/'.format(org.slug)
 
-        url = reverse('sentry-api-0-organization-integrations', args=[org.slug])
         with self.feature('organizations:integrations-v3', True):
-            response = self.client.get(url, format='json')
+            response = self.client.get(path, format='json')
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
-        assert response.data[0] == {
-            'id':
-            'dummy',
-            'name':
-            'Example',
-            'authUrl':
-            '/account/settings/social/associate/dummy/',
-            'auths': [
-                {
-                    'externalId': auth.uid,
-                    'defaultAuthId': auth.id,
-                    'user': {
-                        'email': self.user.email
-                    },
-                    'linked': False,
-                    'integrationId': None,
-                }
-            ],
-        }
-
-
-class OrganizationIntegrationsCreateTest(APITestCase):
-    def test_simple(self):
-        self.login_as(user=self.user)
-
-        org = self.create_organization(owner=self.user, name='baz')
-        auth = UserSocialAuth.objects.create(
-            provider='dummy',
-            user=self.user,
-            uid='123456',
-        )
-
-        url = reverse('sentry-api-0-organization-integrations', args=[org.slug])
-        with self.feature('organizations:integrations-v3', True):
-            response = self.client.post(
-                url, data={
-                    'provider': 'dummy',
-                    'defaultAuthId': auth.id,
-                }
-            )
-
-        assert response.status_code == 201, response.content
-
-        assert Integration.objects.filter(default_auth_id=auth.id).exists()
-
-        assert response.data == {
-            'id':
-            u'dummy',
-            'name':
-            'Example',
-            'authUrl':
-            '/account/settings/social/associate/dummy/',
-            'auths': [
-                {
-                    'externalId': auth.uid,
-                    'defaultAuthId': auth.id,
-                    'user': {
-                        'email': self.user.email
-                    },
-                    'linked': True,
-                    'integrationId':
-                    six.text_type(Integration.objects.get(default_auth_id=auth.id).id),
-                }
-            ],
-        }
-        assert OrganizationIntegration.objects.filter(
-            integration__default_auth_id=auth.id,
-            organization_id=org.id,
-        ).exists()
-
-    def test_adding_bad_social_auth(self):
-        self.login_as(user=self.user)
-        user2 = self.create_user()
-        auth = UserSocialAuth.objects.create(
-            provider='dummy',
-            user=user2,
-            uid='123456',
-        )
-        org = self.create_organization(owner=self.user, name='baz')
-
-        url = reverse('sentry-api-0-organization-integrations', args=[org.slug])
-        with self.feature('organizations:integrations-v3', True):
-            response = self.client.post(
-                url, data={
-                    'provider': 'dummy',
-                    'defaultAuthId': auth.id,
-                }
-            )
-
-        assert response.status_code == 400
+        assert response.data[0]['id'] == six.text_type(integration.id)
diff --git a/tests/sentry/plugins/test_repository_provider.py b/tests/sentry/plugins/test_repository_provider.py
index 8a26af0611..59fe5cea75 100644
--- a/tests/sentry/plugins/test_repository_provider.py
+++ b/tests/sentry/plugins/test_repository_provider.py
@@ -62,8 +62,7 @@ class RepositoryProviderTest(TestCase):
         integration = Integration.objects.create(
             provider='dummy',
             external_id='123456',
-            default_auth_id=usa.id,
         )
-        integration.add_organization(org.id)
+        integration.add_organization(org.id, default_auth_id=usa.id)
 
         assert provider.get_auth(user, organization=org) == usa
diff --git a/tests/sentry/web/frontend/test_integration_setup.py b/tests/sentry/web/frontend/test_integration_setup.py
new file mode 100644
index 0000000000..970bb73bbd
--- /dev/null
+++ b/tests/sentry/web/frontend/test_integration_setup.py
@@ -0,0 +1,68 @@
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.integrations.example import ExampleSetupView
+from sentry.models import Integration, OrganizationIntegration
+from sentry.testutils import AuthProviderTestCase, PermissionTestCase
+
+
+class IntegrationSetupPermissionTest(PermissionTestCase):
+    def setUp(self):
+        super(IntegrationSetupPermissionTest, self).setUp()
+        self.path = '/organizations/{}/integrations/example/setup/'.format(
+            self.organization.slug,
+        )
+
+    def test_teamless_admin_cannot_load(self):
+        with self.feature('organizations:integrations-v3'):
+            self.assert_teamless_admin_cannot_access(self.path)
+
+    def test_team_admin_cannot_load(self):
+        with self.feature('organizations:integrations-v3'):
+            self.assert_team_admin_cannot_access(self.path)
+
+    # this currently redirects the user
+    @pytest.mark.xfail
+    def test_manager_can_load(self):
+        with self.feature('organizations:integrations-v3'):
+            self.assert_role_can_access(self.path, 'manager')
+
+    # this currently redirects the user
+    @pytest.mark.xfail
+    def test_owner_can_load(self):
+        with self.feature('organizations:integrations-v3'):
+            self.assert_owner_can_access(self.path)
+
+
+class IntegrationSetupTest(AuthProviderTestCase):
+    def setUp(self):
+        super(IntegrationSetupTest, self).setUp()
+        self.organization = self.create_organization(name='foo', owner=self.user)
+        self.login_as(self.user)
+        self.path = '/organizations/{}/integrations/example/setup/'.format(
+            self.organization.slug,
+        )
+
+    def test_basic_flow(self):
+        with self.feature('organizations:integrations-v3'):
+            resp = self.client.get(self.path + '?init=1&callback=test')
+            assert resp.status_code == 302
+
+            resp = self.client.get(self.path)
+            assert resp.status_code == 200
+            assert ExampleSetupView.TEMPLATE in resp.content.decode('utf-8')
+
+            resp = self.client.post(self.path, {'name': 'test'})
+
+            assert resp.status_code == 200
+            assert 'window.opener.postMessage(' in resp.content
+
+        integration = Integration.objects.get(provider='example')
+        assert integration.external_id == 'test'
+        assert integration.name == 'test'
+        assert integration.metadata == {}
+        assert OrganizationIntegration.objects.filter(
+            integration=integration,
+            organization=self.organization,
+        ).exists()
