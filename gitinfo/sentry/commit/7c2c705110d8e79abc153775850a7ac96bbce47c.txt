commit 7c2c705110d8e79abc153775850a7ac96bbce47c
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Feb 8 11:22:39 2016 -0800

    Initial implementation for dsym support

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index f3f75d47b2..1aebee5747 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -254,6 +254,7 @@ INSTALLED_APPS = (
     'sentry.nodestore',
     'sentry.search',
     'sentry.lang.javascript',
+    'sentry.lang.native',
     'sentry.plugins.sentry_interface_types',
     'sentry.plugins.sentry_mail',
     'sentry.plugins.sentry_urls',
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index c4827af0b1..52a3613cc5 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -25,7 +25,7 @@ from sentry.app import buffer, tsdb
 from sentry.constants import (
     CLIENT_RESERVED_ATTRS, LOG_LEVELS, DEFAULT_LOGGER_NAME, MAX_CULPRIT_LENGTH
 )
-from sentry.interfaces.base import get_interface
+from sentry.interfaces.base import get_interface, iter_interfaces
 from sentry.models import (
     Activity, Event, EventMapping, EventUser, Group, GroupHash, GroupResolution,
     GroupStatus, Project, Release, TagKey, UserReport
@@ -435,6 +435,11 @@ class EventManager(object):
 
         data['fingerprint'] = fingerprint or ['{{ default }}']
 
+        # Get rid of ephemeral interface data
+        for interface, _ in iter_interfaces():
+            if interface.ephemeral:
+                data.pop(interface.get_path(), None)
+
         # prioritize fingerprint over checksum as its likely the client defaulted
         # a checksum whereas the fingerprint was explicit
         if fingerprint:
diff --git a/src/sentry/interfaces/applecrash.py b/src/sentry/interfaces/applecrash.py
new file mode 100644
index 0000000000..7012537374
--- /dev/null
+++ b/src/sentry/interfaces/applecrash.py
@@ -0,0 +1,41 @@
+"""
+sentry.interfaces.applecrash
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2016 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+__all__ = ('AppleCrashReport',)
+
+from sentry.interfaces.base import Interface, InterfaceValidationError
+
+
+class AppleCrashReport(Interface):
+    """
+    An apple crash report in JSON format.  This typically gets converted
+    into other interfaces as part of the processing.
+
+    >>> {
+    >>>     "crash": {...}
+    >>> }
+    """
+
+    ephemeral = True
+
+    @classmethod
+    def to_python(cls, data):
+        if not data.get('message'):
+            raise InterfaceValidationError("No 'message' present")
+
+        kwargs = {
+            'crash': data['crash'],
+            'binary_images': data['binary_images'],
+        }
+
+        return cls(**kwargs)
+
+    def get_path(self):
+        return 'sentry.interfaces.AppleCrashReport'
diff --git a/src/sentry/interfaces/base.py b/src/sentry/interfaces/base.py
index 972e8bfa09..4995fffe70 100644
--- a/src/sentry/interfaces/base.py
+++ b/src/sentry/interfaces/base.py
@@ -7,6 +7,16 @@ from django.utils.translation import ugettext as _
 from sentry.utils.imports import import_string
 
 
+def iter_interfaces():
+    rv = {}
+
+    for name, import_path in settings.SENTRY_INTERFACES.iteritems():
+        rv.setdefault(import_path, []).append(name)
+
+    for import_path, keys in rv.iteritems():
+        yield get_interface(import_path), keys
+
+
 def get_interface(name):
     try:
         import_path = settings.SENTRY_INTERFACES[name]
@@ -34,6 +44,7 @@ class Interface(object):
     _data = None
     score = 0
     display_score = None
+    ephemeral = False
 
     __slots__ = ['_data']
 
diff --git a/src/sentry/lang/native/__init__.py b/src/sentry/lang/native/__init__.py
index e69de29bb2..7bb4cf156d 100644
--- a/src/sentry/lang/native/__init__.py
+++ b/src/sentry/lang/native/__init__.py
@@ -0,0 +1,4 @@
+from sentry.plugins import register
+from .plugin import NativePlugin
+
+register(NativePlugin)
diff --git a/src/sentry/lang/native/dsymcache.py b/src/sentry/lang/native/dsymcache.py
index 2b0505b2b9..7e16a30ad7 100644
--- a/src/sentry/lang/native/dsymcache.py
+++ b/src/sentry/lang/native/dsymcache.py
@@ -1,7 +1,7 @@
 import os
 import shutil
 
-from sentry.conf import settings
+from django.conf import settings
 from sentry.models import DSymFile
 
 
@@ -10,8 +10,20 @@ class DSymCache(object):
     def __init__(self):
         pass
 
-    def get_dsym(self, project, image_uuid):
-        base = os.path.join(settings.DSYM_CACHE_PATH, str(project.id))
+    def get_project_path(self, project):
+        return os.path.join(settings.DSYM_CACHE_PATH, str(project.id))
+
+    def fetch_dsyms(self, project, uuids):
+        base = self.get_project_path(project)
+        loaded = []
+        for image_uuid in uuids:
+            dsym = self.fetch_dsym(project, image_uuid)
+            if dsym is not None:
+                loaded.append(dsym)
+        return base, loaded
+
+    def fetch_dsym(self, project, image_uuid):
+        base = self.get_project_path(project)
         dsym = os.path.join(base, image_uuid.lower())
         if os.path.isfile(dsym):
             return dsym
@@ -35,3 +47,6 @@ class DSymCache(object):
             os.rename(dsym + '_tmp', dsym)
 
         return dsym
+
+
+dsymcache = DSymCache()
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
new file mode 100644
index 0000000000..a30cccfa7e
--- /dev/null
+++ b/src/sentry/lang/native/plugin.py
@@ -0,0 +1,82 @@
+from __future__ import absolute_import, print_function
+
+import posixpath
+
+from sentry.models import Project
+from sentry.plugins import Plugin2
+from sentry.lang.native.symbolizer import make_symbolizer
+
+
+def exception_from_apple_error_or_diagnosis(error, diagnosis=None):
+    error = error or {}
+
+    if error:
+        nsexception = error.get('nsexception')
+        if nsexception:
+            return {
+                'type': nsexception['name'],
+                'value': error['reason'],
+            }
+
+    if diagnosis:
+        return {
+            'type': 'Error',
+            'value': diagnosis
+        }
+
+
+def inject_apple_backtrace(data, frames, diagnosis=None, error=None):
+    converted_frames = []
+    for frame in converted_frames:
+        fn = frame.get('filename')
+        converted_frames.append({
+            'abs_path': fn,
+            'filename': fn and posixpath.basename(fn) or None,
+            'function': frame['symbol_name'],
+            'lineno': frame.get('line'),
+        })
+
+    stacktrace = {'frames': converted_frames}
+
+    if error or diagnosis:
+        if diagnosis is not None:
+            data['culprit'] = diagnosis
+        error = error or {}
+        exc = exception_from_apple_error_or_diagnosis(error, diagnosis)
+        if exc is not None:
+            exc['stacktrace'] = stacktrace
+            data['sentry.interfaces.Exception'] = exc
+            return
+
+    data['sentry.interfaces.Stacktrace'] = stacktrace
+
+
+def preprocess_apple_crash_event(data):
+    crash_report = data.get('sentry.interfaces.AppleCrashReport')
+    if crash_report is None:
+        return
+
+    project = Project.objects.get_from_cache(
+        id=data['project'],
+    )
+
+    sym = make_symbolizer(project, crash_report['binary_images'])
+    crash = crash_report['crash']
+
+    bt = None
+    for thread in crash['threads']:
+        if thread['crashed']:
+            bt = sym.symbolize_backtrace(thread['backtrace']['contents'])
+
+    if bt is not None:
+        inject_apple_backtrace(data, bt, crash.get('diagnosis'),
+                               crash.get('error'))
+
+    return data
+
+
+class NativePlugin(Plugin2):
+    can_disable = False
+
+    def get_event_preprocessors(self, **kwargs):
+        return [preprocess_apple_crash_event]
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
new file mode 100644
index 0000000000..b025c580e1
--- /dev/null
+++ b/src/sentry/lang/native/symbolizer.py
@@ -0,0 +1,13 @@
+from symsynd.driver import Driver
+from symsynd.report import ReportSymbolizer
+
+from sentry.lang.native.dsymcache import dsymcache
+
+
+driver = Driver()
+
+
+def make_symbolizer(project, binary_images):
+    dsym_path, loaded = dsymcache.fetch_dsyms(
+        [x['uuid'] for x in binary_images])
+    return ReportSymbolizer(driver, dsym_path, binary_images)
