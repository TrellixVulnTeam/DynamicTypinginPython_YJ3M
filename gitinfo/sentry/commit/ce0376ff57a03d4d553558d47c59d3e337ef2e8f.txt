commit ce0376ff57a03d4d553558d47c59d3e337ef2e8f
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Apr 14 20:06:35 2020 -0700

    feat(prompts): Add prompt config manager (#18239)
    
    This will be used in getsentry (sentry.io) to support some custom prompt
    configs just for the saas product.

diff --git a/src/sentry/api/endpoints/prompts_activity.py b/src/sentry/api/endpoints/prompts_activity.py
index e2a0201611..781cac37d8 100644
--- a/src/sentry/api/endpoints/prompts_activity.py
+++ b/src/sentry/api/endpoints/prompts_activity.py
@@ -11,11 +11,7 @@ from rest_framework.response import Response
 from sentry.api.base import Endpoint
 from sentry.models import Organization, PromptsActivity, Project
 from sentry.utils.compat import zip
-
-PROMPTS = {
-    "releases": {"required_fields": ["organization_id", "project_id"]},
-    "suspect_commits": {"required_fields": ["organization_id", "project_id"]},
-}
+from sentry.utils.prompts import prompt_config
 
 VALID_STATUSES = frozenset(("snoozed", "dismissed"))
 
@@ -27,7 +23,7 @@ class PromptsActivitySerializer(serializers.Serializer):
     def validate_feature(self, value):
         if value is None:
             raise serializers.ValidationError("Must specify feature name")
-        if value not in PROMPTS:
+        if not prompt_config.has(value):
             raise serializers.ValidationError("Not a valid feature prompt")
         return value
 
@@ -40,10 +36,10 @@ class PromptsActivityEndpoint(Endpoint):
 
         feature = request.GET.get("feature")
 
-        if feature not in PROMPTS:
+        if not prompt_config.has(feature):
             return Response({"detail": "Invalid feature name"}, status=400)
 
-        required_fields = PROMPTS[feature]["required_fields"]
+        required_fields = prompt_config.required_fields(feature)
         for field in required_fields:
             if field not in request.GET:
                 return Response({"detail": 'Missing required field "%s"' % field}, status=400)
@@ -66,7 +62,7 @@ class PromptsActivityEndpoint(Endpoint):
         feature = serialized["feature"]
         status = serialized["status"]
 
-        required_fields = PROMPTS[feature]["required_fields"]
+        required_fields = prompt_config.required_fields(feature)
         fields = {k: request.data.get(k) for k in required_fields}
 
         if any(elem is None for elem in fields.values()):
diff --git a/src/sentry/utils/prompts.py b/src/sentry/utils/prompts.py
new file mode 100644
index 0000000000..a5379a095d
--- /dev/null
+++ b/src/sentry/utils/prompts.py
@@ -0,0 +1,40 @@
+from __future__ import absolute_import
+
+
+DEFAULT_PROMPTS = {
+    "releases": {"required_fields": ["organization_id", "project_id"]},
+    "suspect_commits": {"required_fields": ["organization_id", "project_id"]},
+}
+
+
+class PromptsConfig(object):
+    """
+    Used to configure available 'prompts' (frontend modals or UI that may be
+    dismissed or have some other action recorded about it). This config
+    declares what prompts are available And what fields may be required.
+
+    required_fields available: [organization_id, project_id]
+    """
+
+    def __init__(self, prompts):
+        self.prompts = prompts
+
+    def add(self, name, config):
+        if self.has(name):
+            raise Exception(u"Prompt key {} is already in use".format(name))
+        if "required_fields" not in config:
+            raise Exception("'required_fields' must be present in the config dict")
+
+        self.prompts[name] = config
+
+    def has(self, name):
+        return name in self.prompts
+
+    def get(self, name):
+        return self.prompts[name]
+
+    def required_fields(self, name):
+        return self.prompts[name]["required_fields"]
+
+
+prompt_config = PromptsConfig(DEFAULT_PROMPTS)
