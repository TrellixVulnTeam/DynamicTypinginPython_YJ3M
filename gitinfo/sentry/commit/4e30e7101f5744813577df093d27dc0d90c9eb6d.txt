commit 4e30e7101f5744813577df093d27dc0d90c9eb6d
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jan 22 16:24:58 2015 -0800

    Dont duplicate member store data

diff --git a/src/sentry/static/sentry/app/stores/aggregateListStore.jsx b/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
index 5cbfa0aa05..7ab2e10c79 100644
--- a/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
+++ b/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
@@ -8,6 +8,8 @@ var MemberListStore = require("../stores/memberListStore");
 var utils = require("../utils");
 
 var ERR_CHANGE_ASSIGNEE = 'Unable to change assignee. Please try again.';
+var OK_SCHEDULE_DELETE = 'The selected events have been scheduled for deletion.';
+var OK_SCHEDULE_MERGE = 'The selected events have been scheduled for merge.';
 
 var AggregateListStore = Reflux.createStore({
   init: function() {
@@ -15,19 +17,12 @@ var AggregateListStore = Reflux.createStore({
     // list and have stream add/remove items as they're modified within stream
     // itself
     this.items = new utils.Collection();
-    this.members = [];
 
     // TODO(dcramer): theres no documented way to do listenables via these
     this.listenTo(AggregateListActions.assignTo.completed, this.onAssignToCompleted);
     this.listenTo(AggregateListActions.assignTo.failed, this.onAssignToFailed);
 
     this.listenTo(AggregateListActions.bulkUpdate.completed, this.onBulkUpdateCompleted);
-
-    // listen to changes in member store so we can find project members for
-    // use with mutating assignedTo
-    this.listenTo(MemberListStore, function(members){
-      this.members = members;
-    }.bind(this));
   },
 
   // TODO(dcramer): this should actually come from an action of some sorts
@@ -45,11 +40,9 @@ var AggregateListStore = Reflux.createStore({
     if (email === '') {
       item.assignedTo = '';
     } else {
-      for (var i=0; i<this.members.length; i++) {
-        if (this.members[i].email === email) {
-          item.assignedTo = this.members[i];
-          break;
-        }
+      var member = MemberListStore.getByEmail(email);
+      if (member) {
+        item.assignedTo = member;
       }
     }
     this.trigger(this.items);
@@ -64,6 +57,14 @@ var AggregateListStore = Reflux.createStore({
     this.trigger(this.items);
   },
 
+  onBulkDeleteCompleted: function(params) {
+    AlertActions.addAlert(OK_SCHEDULE_DELETE, 'success');
+  },
+
+  onMergeCompleted: function(params) {
+    AlertActions.addAlert(OK_SCHEDULE_MERGE, 'success');
+  },
+
   // TODO(dcramer): This is not really the best place for this
   onAssignToFailed: function(id, email) {
     AlertActions.addAlert(ERR_CHANGE_ASSIGNEE, 'error');
diff --git a/src/sentry/static/sentry/app/stores/memberListStore.jsx b/src/sentry/static/sentry/app/stores/memberListStore.jsx
index b1e67144d4..31af8063ce 100644
--- a/src/sentry/static/sentry/app/stores/memberListStore.jsx
+++ b/src/sentry/static/sentry/app/stores/memberListStore.jsx
@@ -16,6 +16,16 @@ var MemberListStore = Reflux.createStore({
   loadInitialData: function(items) {
     this.items = items;
     this.trigger(this.items, 'initial');
+  },
+
+  getByEmail: function(email) {
+    email = email.toLowerCase();
+    for (var i=0; i<this.items.length; i++) {
+      if (this.items[i].email.toLowerCase() === email) {
+        return this.items[i];
+      }
+    }
+    return null;
   }
 });
 
