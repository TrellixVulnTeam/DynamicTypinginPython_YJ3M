commit 2e16a5e78679613735b5a1c4962e97850563bc67
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Oct 1 10:37:50 2018 -0700

    feat(discover): Add API methods to delete and update query (#9893)
    
    Add PUT and DELETE methods for saved queries

diff --git a/src/sentry/api/bases/discoversavedquery.py b/src/sentry/api/bases/discoversavedquery.py
new file mode 100644
index 0000000000..47a8434516
--- /dev/null
+++ b/src/sentry/api/bases/discoversavedquery.py
@@ -0,0 +1,63 @@
+from __future__ import absolute_import
+from rest_framework import serializers
+from sentry.api.serializers.rest_framework import ListField
+
+
+class DiscoverSavedQuerySerializer(serializers.Serializer):
+    name = serializers.CharField(required=True)
+    projects = ListField(
+        child=serializers.IntegerField(),
+        required=False,
+        allow_null=True,
+        default=[]
+    )
+    start = serializers.DateTimeField(required=False)
+    end = serializers.DateTimeField(required=False)
+    range = serializers.CharField(required=False)
+    fields = ListField(
+        child=serializers.CharField(),
+        required=False,
+        allow_null=True,
+    )
+    limit = serializers.IntegerField(min_value=0, max_value=1000, required=False)
+    rollup = serializers.IntegerField(required=False)
+    orderby = serializers.CharField(required=False)
+    conditions = ListField(
+        child=ListField(),
+        required=False,
+        allow_null=True,
+    )
+    aggregations = ListField(
+        child=ListField(),
+        required=False,
+        allow_null=True,
+        default=[]
+    )
+    groupby = ListField(
+        child=serializers.CharField(),
+        required=False,
+        allow_null=True,
+    )
+
+    def validate(self, data):
+        query = {}
+        query_keys = [
+            'fields',
+            'conditions',
+            'aggregations',
+            'range',
+            'start',
+            'end',
+            'orderby',
+            'limit'
+        ]
+
+        for key in query_keys:
+            if data.get(key) is not None:
+                query[key] = data[key]
+
+        return {
+            'name': data['name'],
+            'project_ids': data['projects'],
+            'query': query,
+        }
diff --git a/src/sentry/api/endpoints/organization_discover_saved_queries.py b/src/sentry/api/endpoints/organization_discover_saved_queries.py
index 9c064365a1..935228f697 100644
--- a/src/sentry/api/endpoints/organization_discover_saved_queries.py
+++ b/src/sentry/api/endpoints/organization_discover_saved_queries.py
@@ -1,77 +1,12 @@
 from __future__ import absolute_import
 
-from rest_framework import serializers
 from rest_framework.response import Response
-
+from sentry import features
+from sentry.models import DiscoverSavedQuery
 from sentry.api.serializers import serialize
-from sentry.api.serializers.rest_framework import ListField
-
-
 from sentry.api.bases.organization import OrganizationPermission
+from sentry.api.bases.discoversavedquery import DiscoverSavedQuerySerializer
 from sentry.api.bases import OrganizationEndpoint
-from sentry.models import DiscoverSavedQuery
-
-from sentry import features
-
-
-class DiscoverSavedQueriesSerializer(serializers.Serializer):
-    name = serializers.CharField(required=True)
-    projects = ListField(
-        child=serializers.IntegerField(),
-        required=False,
-        allow_null=True,
-        default=[]
-    )
-    start = serializers.DateTimeField(required=False)
-    end = serializers.DateTimeField(required=False)
-    range = serializers.CharField(required=False)
-    fields = ListField(
-        child=serializers.CharField(),
-        required=False,
-        allow_null=True,
-    )
-    limit = serializers.IntegerField(min_value=0, max_value=1000, required=False)
-    rollup = serializers.IntegerField(required=False)
-    orderby = serializers.CharField(required=False)
-    conditions = ListField(
-        child=ListField(),
-        required=False,
-        allow_null=True,
-    )
-    aggregations = ListField(
-        child=ListField(),
-        required=False,
-        allow_null=True,
-        default=[]
-    )
-    groupby = ListField(
-        child=serializers.CharField(),
-        required=False,
-        allow_null=True,
-    )
-
-    def validate(self, data):
-        query = {}
-        query_keys = [
-            'fields',
-            'conditions',
-            'aggregations',
-            'range',
-            'start',
-            'end',
-            'orderby',
-            'limit'
-        ]
-
-        for key in query_keys:
-            if data.get(key) is not None:
-                query[key] = data[key]
-
-        return {
-            'name': data['name'],
-            'project_ids': data['projects'],
-            'query': query,
-        }
 
 
 class OrganizationDiscoverSavedQueriesEndpoint(OrganizationEndpoint):
@@ -97,7 +32,7 @@ class OrganizationDiscoverSavedQueriesEndpoint(OrganizationEndpoint):
         if not features.has('organizations:discover', organization, actor=request.user):
             return self.respond(status=404)
 
-        serializer = DiscoverSavedQueriesSerializer(data=request.DATA)
+        serializer = DiscoverSavedQuerySerializer(data=request.DATA)
 
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
diff --git a/src/sentry/api/endpoints/organization_discover_saved_query_detail.py b/src/sentry/api/endpoints/organization_discover_saved_query_detail.py
index e6abeaa889..73ffd53633 100644
--- a/src/sentry/api/endpoints/organization_discover_saved_query_detail.py
+++ b/src/sentry/api/endpoints/organization_discover_saved_query_detail.py
@@ -5,6 +5,7 @@ from sentry.api.serializers import serialize
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.bases.organization import OrganizationPermission
 from sentry.api.bases import OrganizationEndpoint
+from sentry.api.bases.discoversavedquery import DiscoverSavedQuerySerializer
 from sentry import features
 from sentry.models import DiscoverSavedQuery
 
@@ -20,8 +21,53 @@ class OrganizationDiscoverSavedQueryDetailEndpoint(OrganizationEndpoint):
             return self.respond(status=404)
 
         try:
-            item = DiscoverSavedQuery.objects.get(id=query_id, organization=organization)
+            query = DiscoverSavedQuery.objects.get(id=query_id, organization=organization)
         except DiscoverSavedQuery.DoesNotExist:
             raise ResourceDoesNotExist
 
-        return Response(serialize(item), status=200)
+        return Response(serialize(query), status=200)
+
+    def put(self, request, organization, query_id):
+        """
+        Modify a saved query
+        """
+        if not features.has('organizations:discover', organization, actor=request.user):
+            return self.respond(status=404)
+
+        try:
+            model = DiscoverSavedQuery.objects.get(id=query_id, organization=organization)
+        except DiscoverSavedQuery.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        serializer = DiscoverSavedQuerySerializer(data=request.DATA)
+
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=400)
+
+        data = serializer.object
+
+        model.update(
+            organization=organization,
+            name=data['name'],
+            query=data['query'],
+        )
+
+        model.set_projects(data['project_ids'])
+
+        return Response(serialize(model), status=200)
+
+    def delete(self, request, organization, query_id):
+        """
+        Delete a saved query
+        """
+        if not features.has('organizations:discover', organization, actor=request.user):
+            return self.respond(status=404)
+
+        try:
+            model = DiscoverSavedQuery.objects.get(id=query_id, organization=organization)
+        except DiscoverSavedQuery.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        model.delete()
+
+        return Response(status=204)
diff --git a/tests/snuba/test_organization_discover_saved_query_detail.py b/tests/snuba/test_organization_discover_saved_query_detail.py
index 29bbd89734..6123b1b182 100644
--- a/tests/snuba/test_organization_discover_saved_query_detail.py
+++ b/tests/snuba/test_organization_discover_saved_query_detail.py
@@ -5,7 +5,7 @@ from sentry.testutils import APITestCase
 from django.core.urlresolvers import reverse
 from sentry.testutils import SnubaTestCase
 
-from sentry.models import DiscoverSavedQuery
+from sentry.models import DiscoverSavedQuery, DiscoverSavedQueryProject
 
 
 class OrganizationDiscoverSavedQueryDetailTest(APITestCase, SnubaTestCase):
@@ -31,6 +31,13 @@ class OrganizationDiscoverSavedQueryDetailTest(APITestCase, SnubaTestCase):
 
         self.query_id = model.id
 
+        invalid = DiscoverSavedQuery.objects.create(
+            organization=self.org_without_access, name="Query without access", query=query
+        )
+        invalid.set_projects(self.project_ids)
+
+        self.query_id_without_access = invalid.id
+
     def test_get(self):
         with self.feature('organizations:discover'):
             url = reverse(
@@ -57,3 +64,113 @@ class OrganizationDiscoverSavedQueryDetailTest(APITestCase, SnubaTestCase):
             response = self.client.get(url)
 
         assert response.status_code == 403, response.content
+
+    def test_put(self):
+        with self.feature('organizations:discover'):
+            url = reverse(
+                'sentry-api-0-organization-discover-saved-query-detail',
+                args=[
+                    self.org.slug,
+                    self.query_id])
+
+            response = self.client.put(url, {
+                'name': 'New query',
+                'projects': self.project_ids,
+                'fields': [],
+                'range': '24h',
+                'limit': 20,
+                'conditions': [],
+                'aggregations': [],
+                'orderby': '-time',
+            })
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == six.text_type(self.query_id)
+        assert response.data['projects'] == self.project_ids
+        assert response.data['fields'] == []
+        assert response.data['conditions'] == []
+        assert response.data['limit'] == 20
+
+    def test_put_query_without_access(self):
+        with self.feature('organizations:discover'):
+            url = reverse(
+                'sentry-api-0-organization-discover-saved-query-detail',
+                args=[
+                    self.org.slug,
+                    self.query_id_without_access])
+
+            response = self.client.put(url, {
+                'name': 'New query',
+                'projects': self.project_ids,
+                'range': '24h',
+            })
+
+            assert response.status_code == 404
+
+    def test_put_org_without_access(self):
+        with self.feature('organizations:discover'):
+            url = reverse(
+                'sentry-api-0-organization-discover-saved-query-detail',
+                args=[
+                    self.org_without_access.slug,
+                    self.query_id])
+            response = self.client.put(url, {
+                'name': 'New query',
+                'projects': self.project_ids,
+                'range': '24h',
+            })
+
+        assert response.status_code == 403, response.content
+
+    def test_delete(self):
+        with self.feature('organizations:discover'):
+            url = reverse(
+                'sentry-api-0-organization-discover-saved-query-detail',
+                args=[
+                    self.org.slug,
+                    self.query_id])
+
+            response = self.client.delete(url)
+
+            assert response.status_code == 204
+
+            assert self.client.get(url).status_code == 404
+
+    def test_delete_removes_projects(self):
+        with self.feature('organizations:discover'):
+            url = reverse(
+                'sentry-api-0-organization-discover-saved-query-detail',
+                args=[
+                    self.org.slug,
+                    self.query_id])
+
+            self.client.delete(url)
+
+        projects = list(
+            DiscoverSavedQueryProject.objects.filter(
+                discover_saved_query=self.query_id))
+
+        assert projects == []
+
+    def test_delete_query_without_access(self):
+        with self.feature('organizations:discover'):
+            url = reverse(
+                'sentry-api-0-organization-discover-saved-query-detail',
+                args=[
+                    self.org.slug,
+                    self.query_id_without_access])
+
+            response = self.client.delete(url)
+
+            assert response.status_code == 404
+
+    def test_delete_org_without_access(self):
+        with self.feature('organizations:discover'):
+            url = reverse(
+                'sentry-api-0-organization-discover-saved-query-detail',
+                args=[
+                    self.org_without_access.slug,
+                    self.query_id])
+            response = self.client.delete(url)
+
+        assert response.status_code == 403, response.content
