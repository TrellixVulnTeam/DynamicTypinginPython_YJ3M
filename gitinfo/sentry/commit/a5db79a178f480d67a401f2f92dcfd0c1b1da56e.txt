commit a5db79a178f480d67a401f2f92dcfd0c1b1da56e
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Oct 23 13:50:50 2015 +0100

    Support merged SSO flow
    
    Fixes GH-2215

diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index 1690a3dbc6..cb42337756 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -17,8 +17,9 @@ from sentry.models import (
     AuditLogEntry, AuditLogEntryEvent, AuthIdentity, AuthProvider, Organization,
     OrganizationMember, OrganizationMemberTeam, User
 )
-from sentry.utils.auth import get_login_redirect
+from sentry.utils.auth import find_users, get_login_redirect
 from sentry.utils.http import absolute_uri
+from sentry.web.forms.accounts import AuthenticationForm
 from sentry.web.helpers import render_to_response
 
 from . import manager
@@ -316,6 +317,111 @@ class AuthHelper(object):
 
         return om
 
+    def _get_login_form(self, existing_user=None):
+        request = self.request
+        return AuthenticationForm(
+            request,
+            request.POST if request.POST.get('op') == 'login' else None,
+            initial={
+                'username': existing_user.username if existing_user else None,
+            },
+            captcha=bool(request.session.get('needs_captcha')),
+        )
+
+    def _handle_unknown_identity(self, identity):
+        """
+        Flow is activated upon a user logging in to where an AuthIdentity is
+        not present.
+
+        The flow will attempt to answer the following:
+
+        - Is there an existing user with the same email address? Should they be
+          merged?
+
+        - Is there an existing user (via authentication) that shoudl be merged?
+
+        - Should I create a new user based on this identity?
+        """
+        request = self.request
+        op = request.POST.get('op')
+
+        if not request.user.is_authenticated():
+            try:
+                existing_user = find_users(identity['email'])[0]
+            except IndexError:
+                existing_user = None
+            login_form = self._get_login_form(existing_user)
+
+        if op == 'confirm' and request.user.is_authenticated():
+            auth_identity = self._handle_attach_identity(identity)
+        elif op == 'newuser':
+            auth_identity = self._handle_new_user(identity)
+        elif op == 'login' and not request.user.is_authenticated():
+            # confirm authentication, login
+            op = None
+            if login_form.is_valid():
+                login(request, login_form.get_user())
+                request.session.pop('needs_captcha', None)
+            else:
+                request.session['needs_captcha'] = 1
+        else:
+            op = None
+
+        if not op:
+            if request.user.is_authenticated():
+                return self.respond('sentry/auth-confirm-link.html', {
+                    'identity': identity,
+                    'existing_user': request.user,
+                })
+
+            return self.respond('sentry/auth-confirm-identity.html', {
+                'existing_user': existing_user,
+                'identity': identity,
+                'login_form': login_form,
+            })
+
+        user = auth_identity.user
+        user.backend = settings.AUTHENTICATION_BACKENDS[0]
+
+        login(self.request, user)
+
+        self.clear_session()
+
+        return HttpResponseRedirect(get_login_redirect(self.request))
+
+    def _handle_existing_identity(self, auth_identity, identity):
+        # TODO(dcramer): this is very similar to attach
+        now = timezone.now()
+        auth_identity.update(
+            data=identity.get('data', {}),
+            last_verified=now,
+            last_synced=now,
+        )
+
+        try:
+            member = OrganizationMember.objects.get(
+                user=auth_identity.user,
+                organization=self.organization,
+            )
+        except OrganizationMember.DoesNotExist:
+            # this is likely the case when someone was removed from the org
+            # but still has access to rejoin
+            member = self._handle_new_membership(auth_identity)
+        else:
+            if getattr(member.flags, 'sso:invalid') or not getattr(member.flags, 'sso:linked'):
+                setattr(member.flags, 'sso:invalid', False)
+                setattr(member.flags, 'sso:linked', True)
+                member.save()
+
+        user = auth_identity.user
+        user.backend = settings.AUTHENTICATION_BACKENDS[0]
+
+        login(self.request, user)
+
+        self.clear_session()
+
+        return HttpResponseRedirect(get_login_redirect(self.request))
+
     @transaction.atomic
     def _finish_login_pipeline(self, identity):
         """
@@ -332,61 +438,14 @@ class AuthHelper(object):
         their account.
         """
         auth_provider = self.auth_provider
-        request = self.request
-
-        # TODO(dcramer): check for an existing user with the given email address
-        # and if one exists, ask them to verify the account for merge
-
         try:
             auth_identity = AuthIdentity.objects.get(
                 auth_provider=auth_provider,
                 ident=identity['id'],
             )
         except AuthIdentity.DoesNotExist:
-            if request.POST.get('op') == 'confirm' and request.user.is_authenticated():
-                auth_identity = self._handle_attach_identity(identity)
-            elif request.POST.get('op') == 'newuser':
-                auth_identity = self._handle_new_user(identity)
-            else:
-                if request.user.is_authenticated():
-                    return self.respond('sentry/auth-confirm-link.html', {
-                        'identity': identity,
-                    })
-                return self.respond('sentry/auth-confirm-identity.html', {
-                    'identity': identity,
-                })
-        else:
-            # TODO(dcramer): this is very similar to attach
-            now = timezone.now()
-            auth_identity.update(
-                data=identity.get('data', {}),
-                last_verified=now,
-                last_synced=now,
-            )
-
-            try:
-                member = OrganizationMember.objects.get(
-                    user=auth_identity.user,
-                    organization=self.organization,
-                )
-            except OrganizationMember.DoesNotExist:
-                # this is likely the case when someone was removed from the org
-                # but still has access to rejoin
-                member = self._handle_new_membership(auth_identity)
-            else:
-                if getattr(member.flags, 'sso:invalid') or not getattr(member.flags, 'sso:linked'):
-                    setattr(member.flags, 'sso:invalid', False)
-                    setattr(member.flags, 'sso:linked', True)
-                    member.save()
-
-        user = auth_identity.user
-        user.backend = settings.AUTHENTICATION_BACKENDS[0]
-
-        login(self.request, user)
-
-        self.clear_session()
-
-        return HttpResponseRedirect(get_login_redirect(self.request))
+            return self._handle_unknown_identity(identity)
+        return self._handle_existing_identity(auth_identity, identity)
 
     @transaction.atomic
     def _finish_setup_pipeline(self, identity):
diff --git a/src/sentry/static/sentry/less/auth.less b/src/sentry/static/sentry/less/auth.less
index cf43720641..24df286b3d 100644
--- a/src/sentry/static/sentry/less/auth.less
+++ b/src/sentry/static/sentry/less/auth.less
@@ -102,3 +102,14 @@ section.org-login {
     display: block;
   }
 }
+
+.sso-link {
+  text-align: center;
+  margin-bottom: 20px;
+
+  .merge-avatar {
+    width: 36px;
+    height: 36px;
+    display: inline-block;
+  }
+}
diff --git a/src/sentry/templates/sentry/auth-confirm-identity.html b/src/sentry/templates/sentry/auth-confirm-identity.html
index cd0739cf21..f262961eff 100644
--- a/src/sentry/templates/sentry/auth-confirm-identity.html
+++ b/src/sentry/templates/sentry/auth-confirm-identity.html
@@ -7,15 +7,48 @@
 {% block title %}{% trans "Confirm Identity" %} | {{ block.super }}{% endblock %}
 
 {% block auth_main %}
-  <form class="form-stacked" action="" method="post">
-    {% csrf_token %}
+  {% if existing_user %}
+    <div class="sso-link">
+      <img src="{% gravatar_url existing_user.email size 36 %}" class="merge-avatar avatar">
+      <span class="icon-arrow-right"></span>
+      <span class="icon-arrow-left"></span>
+      <img src="{% gravatar_url identity.email size 36 %}" class="merge-avatar avatar">
+    </div>
 
-    <img src="{% gravatar_url identity.email size 36 %}" class="merge-avatar avatar">
+    <form class="form-stacked" action="" method="post" autocomplete="off">
+      {% csrf_token %}
 
-    <div class="align-center">
-      <p>We've identified you as {{ identity.email }}. If everything sounds good, we'll go ahead and create a new account for you with this email address.</p>
+      <div class="align-center">
+        <p>We found an existing account for {{ identity.email }}.</p>
+        <p>Please confirm your credentials:</p>
+      </div>
 
-      <p><button class="btn btn-primary" type="submit" name="op" value="newuser">Continue</button></p>
-    </div>
-  </form>
+      {{ login_form|as_crispy_errors }}
+
+      {% for field in login_form %}
+        {{ field|as_crispy_field }}
+      {% endfor %}
+
+      <fieldset class="form-actions">
+        <button type="submit" class="btn btn-primary" name="op" value="login">{% trans "Login" %}</button>
+        <a class="pull-right" style="margin-top: 9px" href="{% url 'sentry-account-recover' %}">{% trans "Lost your password?" %}</a>
+      </fieldset>
+    </form>
+  {% else %}
+    <form class="form-stacked" action="" method="post">
+      {% csrf_token %}
+
+      <div class="sso-link">
+        <img src="{% gravatar_url identity.email size 36 %}" class="merge-avatar avatar">
+      </div>
+
+      <div class="align-center">
+        <p>We've identified you as {{ identity.email }}.</p>
+
+        <p>We'll go ahead and create a new account for you with this email address.</p>
+
+        <p><button class="btn btn-primary" type="submit" name="op" value="newuser">Continue</button></p>
+      </div>
+    </form>
+  {% endif %}
 {% endblock %}
diff --git a/src/sentry/templates/sentry/auth-confirm-link.html b/src/sentry/templates/sentry/auth-confirm-link.html
index 902a4d9a36..a42e79f4ea 100644
--- a/src/sentry/templates/sentry/auth-confirm-link.html
+++ b/src/sentry/templates/sentry/auth-confirm-link.html
@@ -10,16 +10,29 @@
   <form class="form-stacked" action="" method="post">
     {% csrf_token %}
 
-    <img src="{% gravatar_url user.email size 36 %}" class="merge-avatar avatar">
-    <span class="icon-arrow-right"></span>
-    <span class="icon-arrow-left"></span>
-    <img src="{% gravatar_url identity.email size 36 %}" class="merge-avatar avatar">
+    <div class="sso-link">
+      <img src="{% gravatar_url existing_user.email size 36 %}" class="merge-avatar avatar">
+      <span class="icon-arrow-right"></span>
+      <span class="icon-arrow-left"></span>
+      <img src="{% gravatar_url identity.email size 36 %}" class="merge-avatar avatar">
+    </div>
 
-    <p>You're already logged in with an existing account. Would you like to add this identity? If not, we'll go ahead and create a new account for you.</p>
+    <div class="align-center">
 
-    <p class="align-center">
-      <button class="btn btn-default" name="op" value="newuser" type="submit">No thanks</button>
-      <button class="btn btn-primary" name="op" value="confirm" type="submit">Merge accounts</button>
-    </p>
+      {% if existing_user.email == identity.email %}
+        <p>We're going to associate your new identity with your existing account which means all of your existing settings will stay in tact.</p>
+
+        <p>
+          <button class="btn btn-primary" name="op" value="confirm" type="submit">Continue</button>
+        </p>
+      {% else %}
+        <p>Would you like to associate this identity with your existing account? If not, we'll go ahead and create a new account for you.</p>
+
+        <p>
+          <button class="btn btn-default" name="op" value="newuser" type="submit">No thanks</button>
+          <button class="btn btn-primary" name="op" value="confirm" type="submit">Merge accounts</button>
+        </p>
+      {% endif %}
+    </div>
   </form>
 {% endblock %}
diff --git a/src/sentry/templates/sentry/organization-login.html b/src/sentry/templates/sentry/organization-login.html
index 638796572c..5d74e242c6 100644
--- a/src/sentry/templates/sentry/organization-login.html
+++ b/src/sentry/templates/sentry/organization-login.html
@@ -23,8 +23,6 @@
         <p><button type="submit" class="btn btn-default btn-login-{{ provider_key }}">
           <span class="provider-logo {{ provider_name | lower}}"></span> Login with {{ provider_name }}
         </button></p>
-
-        <p><small>Have an existing account? <a href="{% url 'sentry-auth-link-identity' organization.slug %}">Login with your password</a> to link your identity.</small></p>
       </div>
     </form>
   {% else %}
diff --git a/tests/sentry/web/frontend/test_auth_organization_login.py b/tests/sentry/web/frontend/test_auth_organization_login.py
index 04db66fc04..efe79a4400 100644
--- a/tests/sentry/web/frontend/test_auth_organization_login.py
+++ b/tests/sentry/web/frontend/test_auth_organization_login.py
@@ -7,7 +7,7 @@ from sentry.testutils import AuthProviderTestCase
 
 
 # TODO(dcramer): this is an integration test
-class OrganizationAuthSettingsTest(AuthProviderTestCase):
+class OrganizationAuthLoginTest(AuthProviderTestCase):
     def test_renders_basic_login_form(self):
         organization = self.create_organization(name='foo', owner=self.user)
 
@@ -25,7 +25,7 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
         assert 'provider_key' not in resp.context
         assert resp.context['CAN_REGISTER']
 
-    def test_basic_provider_flow_as_anonymous(self):
+    def test_flow_as_anonymous(self):
         organization = self.create_organization(name='foo', owner=self.user)
         auth_provider = AuthProvider.objects.create(
             organization=organization,
@@ -49,6 +49,7 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
         resp = self.client.post(path, {'op': 'newuser'})
 
         assert resp.status_code == 302
+        assert resp['Location'] == 'http://testserver/'
 
         auth_identity = AuthIdentity.objects.get(
             auth_provider=auth_provider,
@@ -65,7 +66,7 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
         assert getattr(member.flags, 'sso:linked')
         assert not getattr(member.flags, 'sso:invalid')
 
-    def test_basic_provider_flow_as_existing_user(self):
+    def test_flow_as_existing_user(self):
         organization = self.create_organization(name='foo', owner=self.user)
         AuthProvider.objects.create(
             organization=organization,
@@ -80,3 +81,182 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
         resp = self.client.post(path)
 
         assert resp.status_code == 302
+        assert resp['Location'] == 'http://testserver/auth/link/foo/'
+
+    def test_flow_as_existing_identity(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+        user = self.create_user('bar@example.com')
+        auth_provider = AuthProvider.objects.create(
+            organization=organization,
+            provider='dummy',
+        )
+        AuthIdentity.objects.create(
+            auth_provider=auth_provider,
+            user=user,
+            ident='foo@example.com',
+        )
+
+        path = reverse('sentry-auth-organization', args=[organization.slug])
+
+        resp = self.client.post(path)
+
+        assert resp.status_code == 200
+        assert self.provider.TEMPLATE in resp.content
+
+        path = reverse('sentry-auth-sso')
+
+        resp = self.client.post(path, {'email': 'foo@example.com'})
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'http://testserver/'
+
+    def test_flow_as_unauthenticated_existing_matched_user_no_merge(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+        auth_provider = AuthProvider.objects.create(
+            organization=organization,
+            provider='dummy',
+        )
+        user = self.create_user('bar@example.com')
+
+        path = reverse('sentry-auth-organization', args=[organization.slug])
+
+        resp = self.client.post(path)
+
+        assert resp.status_code == 200
+        assert self.provider.TEMPLATE in resp.content
+
+        path = reverse('sentry-auth-sso')
+
+        resp = self.client.post(path, {'email': user.email})
+
+        self.assertTemplateUsed(resp, 'sentry/auth-confirm-identity.html')
+        assert resp.status_code == 200
+        assert resp.context['existing_user'] == user
+        assert resp.context['login_form']
+
+        resp = self.client.post(path, {'op': 'newuser'})
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'http://testserver/'
+
+        auth_identity = AuthIdentity.objects.get(
+            auth_provider=auth_provider,
+        )
+
+        new_user = auth_identity.user
+        assert user.email == 'bar@example.com'
+        assert new_user != user
+
+        member = OrganizationMember.objects.get(
+            organization=organization,
+            user=new_user,
+        )
+
+        assert getattr(member.flags, 'sso:linked')
+        assert not getattr(member.flags, 'sso:invalid')
+
+    def test_flow_as_unauthenticated_existing_matched_user_with_merge(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+        auth_provider = AuthProvider.objects.create(
+            organization=organization,
+            provider='dummy',
+        )
+        user = self.create_user('bar@example.com')
+
+        path = reverse('sentry-auth-organization', args=[organization.slug])
+
+        resp = self.client.post(path)
+
+        assert resp.status_code == 200
+        assert self.provider.TEMPLATE in resp.content
+
+        path = reverse('sentry-auth-sso')
+
+        resp = self.client.post(path, {'email': user.email})
+
+        self.assertTemplateUsed(resp, 'sentry/auth-confirm-identity.html')
+        assert resp.status_code == 200
+        assert resp.context['existing_user'] == user
+        assert resp.context['login_form']
+
+        resp = self.client.post(path, {
+            'op': 'login',
+            'username': user.username,
+            'password': 'admin',
+        })
+
+        self.assertTemplateUsed(resp, 'sentry/auth-confirm-link.html')
+        assert resp.status_code == 200
+
+        resp = self.client.post(path, {'op': 'confirm'})
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'http://testserver/'
+
+        auth_identity = AuthIdentity.objects.get(
+            auth_provider=auth_provider,
+        )
+
+        new_user = auth_identity.user
+        assert new_user == user
+
+        member = OrganizationMember.objects.get(
+            organization=organization,
+            user=user,
+        )
+
+        assert getattr(member.flags, 'sso:linked')
+        assert not getattr(member.flags, 'sso:invalid')
+
+    def test_flow_as_unauthenticated_existing_unmatched_user_with_merge(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+        auth_provider = AuthProvider.objects.create(
+            organization=organization,
+            provider='dummy',
+        )
+        user = self.create_user('foo@example.com')
+
+        path = reverse('sentry-auth-organization', args=[organization.slug])
+
+        resp = self.client.post(path)
+
+        assert resp.status_code == 200
+        assert self.provider.TEMPLATE in resp.content
+
+        path = reverse('sentry-auth-sso')
+
+        resp = self.client.post(path, {'email': 'bar@example.com'})
+
+        self.assertTemplateUsed(resp, 'sentry/auth-confirm-identity.html')
+        assert resp.status_code == 200
+        assert not resp.context['existing_user']
+        assert resp.context['login_form']
+
+        resp = self.client.post(path, {
+            'op': 'login',
+            'username': user.username,
+            'password': 'admin',
+        })
+
+        self.assertTemplateUsed(resp, 'sentry/auth-confirm-link.html')
+        assert resp.status_code == 200
+
+        resp = self.client.post(path, {'op': 'confirm'})
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'http://testserver/'
+
+        auth_identity = AuthIdentity.objects.get(
+            auth_provider=auth_provider,
+        )
+
+        new_user = auth_identity.user
+        assert new_user == user
+
+        member = OrganizationMember.objects.get(
+            organization=organization,
+            user=user,
+        )
+
+        assert getattr(member.flags, 'sso:linked')
+        assert not getattr(member.flags, 'sso:invalid')
