commit dba732061d4d96e1b9fee7e575cda55fcefa90e2
Author: josh <josh@jrl.ninja>
Date:   Fri Dec 6 10:10:40 2019 -0800

    feat(django 1.10): continue to let inactive/soft-deleted users authenticate (#15974)

diff --git a/src/sentry/utils/auth.py b/src/sentry/utils/auth.py
index 2320d8d92c..bbbc757461 100644
--- a/src/sentry/utils/auth.py
+++ b/src/sentry/utils/auth.py
@@ -298,3 +298,10 @@ class EmailAuthBackend(ModelBackend):
                 except ValueError:
                     continue
         return None
+
+    # TODO(joshuarli): When we're fully on Django 1.10, we should switch to
+    # subclassing AllowAllUsersModelBackend (this isn't available in 1.9 and
+    # simply overriding user_can_authenticate here is a lot less verbose than
+    # conditionally importing).
+    def user_can_authenticate(self, user):
+        return True
diff --git a/tests/sentry/web/frontend/test_auth_organization_login.py b/tests/sentry/web/frontend/test_auth_organization_login.py
index 73f4aa4f79..30ca0fc249 100644
--- a/tests/sentry/web/frontend/test_auth_organization_login.py
+++ b/tests/sentry/web/frontend/test_auth_organization_login.py
@@ -425,7 +425,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
 
         # setup a 'previous' identity, such as when we migrated Google from
         # the old idents to the new
-        user = self.create_user("bar@example.com", is_active=False, is_managed=True)
+        user = self.create_user("bar@example.com", is_managed=True, is_active=False)
         auth_identity = AuthIdentity.objects.create(
             auth_provider=auth_provider, user=user, ident="bar@example.com"
         )
@@ -480,7 +480,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
 
         # setup a 'previous' identity, such as when we migrated Google from
         # the old idents to the new
-        user = self.create_user("bar@example.com", is_active=False, is_managed=True)
+        user = self.create_user("bar@example.com", is_managed=True)
         AuthIdentity.objects.create(auth_provider=auth_provider, user=user, ident="bar@example.com")
 
         # they must be a member for the auto merge to happen
@@ -543,7 +543,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
 
         # setup a 'previous' identity, such as when we migrated Google from
         # the old idents to the new
-        user = self.create_user("bar@example.com", is_active=False, is_managed=True)
+        user = self.create_user("bar@example.com", is_managed=True)
         AuthIdentity.objects.create(auth_provider=auth_provider, user=user, ident="bar@example.com")
 
         # user needs to be logged in
@@ -580,14 +580,14 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
 
         # setup a 'previous' identity, such as when we migrated Google from
         # the old idents to the new
-        user = self.create_user("bar@example.com", is_active=False, is_managed=True)
+        user = self.create_user("bar@example.com", is_managed=True, is_active=False)
         identity1 = AuthIdentity.objects.create(
             auth_provider=auth_provider, user=user, ident="bar@example.com"
         )
 
         # create another identity which is used, but not by the authenticating
         # user
-        user2 = self.create_user("adfadsf@example.com", is_active=False, is_managed=True)
+        user2 = self.create_user("adfadsf@example.com", is_managed=True, is_active=False)
         identity2 = AuthIdentity.objects.create(
             auth_provider=auth_provider, user=user2, ident="adfadsf@example.com"
         )
