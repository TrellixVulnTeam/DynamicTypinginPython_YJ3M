commit 485259e91e7a019aec78d4c3bf1bafb4504e5e7a
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Wed Dec 2 22:41:21 2015 -0800

    Lazily initialize the app after importing settings
    
    This makes `configure()` a fast call, but the first
    `import sentry_config` slow which is a better tradeoff.

diff --git a/src/sentry/runner/importer.py b/src/sentry/runner/importer.py
index cc1405b534..3a11b5fe93 100644
--- a/src/sentry/runner/importer.py
+++ b/src/sentry/runner/importer.py
@@ -10,8 +10,8 @@ from __future__ import absolute_import, print_function
 import sys
 
 
-def install(name, config_path, default_settings):
-    sys.meta_path.append(Importer(name, config_path, default_settings))
+def install(name, config_path, default_settings, callback):
+    sys.meta_path.append(Importer(name, config_path, default_settings, callback))
 
 
 class ConfigurationError(Exception):
@@ -19,25 +19,15 @@ class ConfigurationError(Exception):
 
 
 class Importer(object):
-    def __init__(self, name, config_path, default_settings=None):
+    def __init__(self, name, config_path, default_settings=None, callback=None):
         self.name = name
         self.config_path = config_path
         self.default_settings = default_settings
+        self.callback = callback
 
     def __repr__(self):
         return "<%s for '%s' (%s)>" % (type(self), self.name, self.config_path)
 
-    def validate(self):
-        # TODO(dcramer): is there a better way to handle validation so it
-        # is lazy and actually happens in LoganLoader?
-        try:
-            execfile(self.config_path, {
-                '__file__': self.config_path
-            })
-        except Exception as e:
-            exc_info = sys.exc_info()
-            raise ConfigurationError(unicode(e), exc_info[2])
-
     def find_module(self, fullname, path=None):
         if fullname != self.name:
             return
@@ -46,14 +36,16 @@ class Importer(object):
             name=self.name,
             config_path=self.config_path,
             default_settings=self.default_settings,
+            callback=self.callback,
         )
 
 
 class Loader(object):
-    def __init__(self, name, config_path, default_settings=None):
+    def __init__(self, name, config_path, default_settings=None, callback=None):
         self.name = name
         self.config_path = config_path
         self.default_settings = default_settings
+        self.callback = callback
 
     def load_module(self, fullname):
         try:
@@ -84,6 +76,9 @@ class Loader(object):
         # install the custom settings for this app
         load_settings(self.config_path, settings=settings_mod, silent=True)
 
+        if self.callback is not None:
+            self.callback(settings_mod)
+
         return settings_mod
 
 
diff --git a/src/sentry/runner/settings.py b/src/sentry/runner/settings.py
index 95e883d735..2c402d8053 100644
--- a/src/sentry/runner/settings.py
+++ b/src/sentry/runner/settings.py
@@ -300,17 +300,17 @@ def configure(ctx, py, yaml, skip_backend_validation=False):
         raise ValueError("Configuration file does not exist at '%s'" % click.format_filename(yaml))
 
     os.environ['DJANGO_SETTINGS_MODULE'] = 'sentry_config'
-    install('sentry_config', py, DEFAULT_SETTINGS_MODULE)
-
-    # TODO(mattrobenolt): clean up this and use the callbacks from install
-    from django.conf import settings
-    from .initializer import initialize_app, on_configure
-    initialize_app({
-        'config_path': py,
-        'settings': settings,
-        'options': yaml,
-    }, skip_backend_validation=skip_backend_validation)
-    on_configure({'settings': settings})
+
+    def after_install(mod):
+        from .initializer import initialize_app, on_configure
+        initialize_app({
+            'config_path': py,
+            'settings': mod,
+            'options': yaml,
+        }, skip_backend_validation=skip_backend_validation)
+        on_configure({'settings': mod})
+
+    install('sentry_config', py, DEFAULT_SETTINGS_MODULE, after_install)
 
     __installed = True
 
