commit 6adb92df4b9763c77af5a166d2d7dbe20997eecf
Author: Burak Yigit Kaya <byk@sentry.io>
Date:   Tue Sep 10 23:48:16 2019 +0300

    build(docker): First pass of moving Docker builds into sentry (#14622)
    
    This is mostly an exact copy of https://github.com/getsentry/docker-sentry/tree/master/git into this repo. The reason is to point our `getsentry/sentry` Docker Hub builds here and tag each commit on master as `getsentry/sentry:{sha}` to be used in various places (including testing).
    
    Notable changes:
    
    - `SENTRY_BUILD` is no more and is automatically picked up from `BUILD_SHA` environment variable that is set by Docker Auto Build
    - Instead of downloading a tarball from GitHub, we simply use the build context. For a "clean" build context, one can run the following command: `git archive --format=tar.gz HEAD | docker build -t getsentry/sentry:latest -f ./docker/Dockerfile -`
    - Ties downloading of `nodejs` to `.nvmrc` file from the build context.

diff --git a/.dockerignore b/.dockerignore
index b38db2f296..a4640c35c6 100644
--- a/.dockerignore
+++ b/.dockerignore
@@ -1,2 +1,51 @@
-node_modules/
-build/
+__pycache__
+.git
+.dockerignore
+.gitignore
+
+.cache/
+.coverage
+.storybook-out/
+.DS_Store
+.venv
+*.egg-info
+*.pyc
+*.log
+*.egg
+*.db
+*.pid
+MANIFEST
+test.conf
+pip-log.txt
+celerybeat-schedule
+sentry-package.json
+/.artifacts
+/coverage/
+/cover
+/build
+/dist
+/env
+/tmp
+/node_modules/
+/docs-ui/node_modules/
+/src/sentry/assets.json
+/src/sentry/static/version
+/src/sentry/static/sentry/dist/
+/src/sentry/static/sentry/vendor/
+/src/sentry/static/sentry/admin/
+/src/sentry/static/sentry/debug_toolbar/
+/src/sentry/static/sentry/rest_framework/
+/src/sentry/integration-docs
+/src/sentry/loader/_registry.json
+/wheelhouse
+/test_cli/
+Gemfile.lock
+.idea/
+*.iml
+.pytest_cache/
+.vscode/tags
+coverage.xml
+junit.xml
+*.codestyle.xml
+package-lock.json
+
diff --git a/.travis.yml b/.travis.yml
index 96a59df0ea..cb0b2d511c 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -68,11 +68,6 @@ after_script:
   - $(./bin/yarn global bin)/zeus upload -t "text/plain+pycodestyle" .artifacts/*pycodestyle.log
   - $(./bin/yarn global bin)/zeus upload -t "text/xml+checkstyle" .artifacts/*checkstyle.xml
   - $(./bin/yarn global bin)/zeus upload -t "application/webpack-stats+json" .artifacts/*webpack-stats.json
-  # Trigger a build for the `git` image on docker-sentry
-  - >
-      if [ "$TRAVIS_PULL_REQUEST" == "false" -a "$TRAVIS_BRANCH" == "master" ]; then
-        curl -s -X POST "$DOCKER_SENTRY_BUILD_TRIGGER_URL";
-      fi
 
 base_postgres: &postgres_default
   python: 2.7
diff --git a/MANIFEST.in b/MANIFEST.in
index dd96a0ff8a..f2b6bfcf9f 100644
--- a/MANIFEST.in
+++ b/MANIFEST.in
@@ -2,3 +2,4 @@ include setup.py README.rst MANIFEST.in LICENSE AUTHORS
 recursive-include ./ requirements*.txt
 graft src/sentry
 global-exclude *~
+prune docker
diff --git a/docker/Dockerfile b/docker/Dockerfile
new file mode 100644
index 0000000000..315de49819
--- /dev/null
+++ b/docker/Dockerfile
@@ -0,0 +1,149 @@
+FROM python:2.7.16-slim-buster as sdist
+
+RUN apt-get update && apt-get install -y --no-install-recommends \
+    # Needed for GPG
+    dirmngr \
+    gnupg \
+    # Needed for fetching stuff
+    wget \
+    && rm -rf /var/lib/apt/lists/*
+
+# Fetch trusted keys
+RUN for key in \
+      # gosu
+      B42F6819007F00F88E364FD4036A9C25BF357DD4 \
+      # tini
+      595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7 \
+      # Node - gpg keys listed at https://github.com/nodejs/node
+      94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
+      FD3A5288F042B6850C66B31F09FE44734EB7990E \
+      71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
+      DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
+      C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
+      B9AE9905FFD7803F25714661B63B535A4C206CA9 \
+      77984A986EBC2AA786BC0F66B01FBB92821C587A \
+      8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \
+      4ED778F539E3634C779C87C6D7062848A1AB005C \
+      A48C2BEE680E841632CD4E44F07496B3EB3C1762 \
+      B9E2F5981AA6E0CD28160D9FF13993A75599653C \
+    ; do \
+      # TODO(byk): Replace the keyserver below w/ something owned by Sentry
+      gpg --batch --keyserver hkps://mattrobenolt-keyserver.global.ssl.fastly.net:443 --recv-keys "$key"; \
+    done
+
+# grab gosu for easy step-down from root
+ENV GOSU_VERSION 1.11
+RUN set -x \
+    && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)" \
+    && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc" \
+    && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
+    && rm -r /usr/local/bin/gosu.asc \
+    && chmod +x /usr/local/bin/gosu
+
+# grab tini for signal processing and zombie killing
+ENV TINI_VERSION 0.18.0
+RUN set -x \
+    && wget -O /usr/local/bin/tini "https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini" \
+    && wget -O /usr/local/bin/tini.asc "https://github.com/krallin/tini/releases/download/v$TINI_VERSION/tini.asc" \
+    && gpg --batch --verify /usr/local/bin/tini.asc /usr/local/bin/tini \
+    && rm /usr/local/bin/tini.asc \
+    && chmod +x /usr/local/bin/tini
+
+# Get and set up Node for front-end asset building
+COPY .nvmrc /usr/src/sentry/
+RUN cd /usr/src/sentry \
+    && export NODE_VERSION="$(cat .nvmrc)" \
+    && wget "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz" \
+    && wget "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" \
+    && gpg --batch --verify SHASUMS256.txt.asc \
+    && grep " node-v$NODE_VERSION-linux-x64.tar.gz\$" SHASUMS256.txt.asc | sha256sum -c - \
+    && tar -xzf "node-v$NODE_VERSION-linux-x64.tar.gz" -C /usr/local --strip-components=1 \
+    && rm -r "node-v$NODE_VERSION-linux-x64.tar.gz" SHASUMS256.txt.asc
+
+ENV SENTRY_BUILD=${SOURCE_COMMIT:-master}
+COPY . /usr/src/sentry/
+RUN export YARN_CACHE_FOLDER="$(mktemp -d)" \
+    && cd /usr/src/sentry \
+    && python setup.py bdist_wheel \
+    && rm -r "$YARN_CACHE_FOLDER" \
+    && mv /usr/src/sentry/dist /dist
+
+# This is the image to be run
+FROM python:2.7.16-slim-buster
+
+# add our user and group first to make sure their IDs get assigned consistently
+RUN groupadd -r sentry && useradd -r -m -g sentry sentry
+
+COPY --from=sdist /usr/local/bin/gosu /usr/local/bin/tini /usr/local/bin/
+
+# Sane defaults for pip
+ENV PIP_NO_CACHE_DIR=off \
+    PIP_DISABLE_PIP_VERSION_CHECK=1 \
+    PIP_USE_PEP517=off \
+    # Sentry config params
+    SENTRY_CONF=/etc/sentry \
+    SENTRY_FILESTORE_DIR=/var/lib/sentry/files \
+    # Disable some unused uWSGI features, saving dependencies
+    # Thank to https://stackoverflow.com/a/25260588/90297
+    UWSGI_PROFILE_OVERRIDE=ssl=false;xml=false;routing=false
+
+COPY --from=sdist /dist/*.whl /tmp/dist/
+RUN set -x \
+    && buildDeps="" \
+    # uwsgi
+    && buildDeps="$buildDeps \
+      gcc \
+      g++ \
+    " \
+    # maxminddb
+    && buildDeps="$buildDeps \
+      libmaxminddb-dev \
+    "\
+    # librabbitmq
+    && buildDeps="$buildDeps \
+      make \
+    " \
+    && apt-get update \
+    && apt-get install -y --no-install-recommends $buildDeps \
+    && pip install /tmp/dist/*.whl \
+    # Separate these due to https://git.io/fjyz6
+    # Otherwise librabbitmq will install the latest amqp version,
+    # violating kombu's amqp<2.0 constraint.
+    && pip install librabbitmq==1.6.1 maxminddb==1.4.1 \
+    && rm -rf /tmp/dist \
+    && apt-get purge -y --auto-remove $buildDeps \
+    # We install run-time dependencies strictly after
+    # build dependencies to prevent accidental collusion.
+    # These are also installed last as they are needed
+    # during container run and can have the same deps w/
+    # build deps such as maxminddb.
+    && apt-get install -y --no-install-recommends \
+      # pillow
+      libjpeg-dev \
+      # rust bindings
+      libffi-dev \
+      # maxminddb bindings
+      libmaxminddb-dev \
+      # SAML needs these run-time
+      libxmlsec1-dev \
+      libxslt-dev \
+      # pyyaml needs this run-time
+      libyaml-dev \
+      # other
+      pkg-config \
+    \
+    && apt-get clean \
+    && rm -rf /var/lib/apt/lists/* \
+    && python -c 'import librabbitmq' \
+    # Fully verify that the C extension is correctly installed, it unfortunately
+    # requires a full check into maxminddb.extension.Reader
+    && python -c 'import maxminddb.extension; maxminddb.extension.Reader' \
+    && mkdir -p $SENTRY_CONF && mkdir -p $SENTRY_FILESTORE_DIR
+
+COPY ./docker/docker-entrypoint.sh ./docker/sentry.conf.py ./docker/config.yml $SENTRY_CONF/
+
+EXPOSE 9000
+VOLUME /var/lib/sentry/files
+
+ENTRYPOINT exec $SENTRY_CONF/docker-entrypoint.sh $0 $@
+CMD ["run", "web"]
diff --git a/docker/config.yml b/docker/config.yml
new file mode 100644
index 0000000000..433b9dcd3b
--- /dev/null
+++ b/docker/config.yml
@@ -0,0 +1,46 @@
+# While a lot of configuration in Sentry can be changed via the UI, for all
+# new-style config (as of 8.0) you can also declare values here in this file
+# to enforce defaults or to ensure they cannot be changed via the UI. For more
+# information see the Sentry documentation.
+
+###############
+# Mail Server #
+###############
+
+# mail.backend: 'smtp'  # Use dummy if you want to disable email entirely
+# mail.host: 'localhost'
+# mail.port: 25
+# mail.username: ''
+# mail.password: ''
+# mail.use-tls: false
+# The email address to send on behalf of
+# mail.from: 'root@localhost'
+
+# If you'd like to configure email replies, enable this.
+# mail.enable-replies: false
+
+# When email-replies are enabled, this value is used in the Reply-To header
+# mail.reply-hostname: ''
+
+# If you're using mailgun for inbound mail, set your API key and configure a
+# route to forward to /api/hooks/mailgun/inbound/
+# mail.mailgun-api-key: ''
+
+###################
+# System Settings #
+###################
+
+# If this file ever becomes compromised, it's important to regenerate your a new key
+# Changing this value will result in all current sessions being invalidated.
+# A new key can be generated with `$ sentry config generate-secret-key`
+# system.secret-key: 'changeme'
+
+# The ``redis.clusters`` setting is used, unsurprisingly, to configure Redis
+# clusters. These clusters can be then referred to by name when configuring
+# backends such as the cache, digests, or TSDB backend.
+# redis.clusters:
+#   default:
+#     hosts:
+#       0:
+#         host: 127.0.0.1
+#         port: 6379
diff --git a/docker/docker-compose.test.yml b/docker/docker-compose.test.yml
new file mode 100644
index 0000000000..bbc726e662
--- /dev/null
+++ b/docker/docker-compose.test.yml
@@ -0,0 +1,7 @@
+sut:
+  environment:
+    - SENTRY_SKIP_BACKEND_VALIDATION=1
+    - SENTRY_SECRET_KEY=abc
+    - SENTRY_REDIS_HOST=localhost
+  build: .
+  command: config get system.secret-key
\ No newline at end of file
diff --git a/docker/docker-entrypoint.sh b/docker/docker-entrypoint.sh
new file mode 100755
index 0000000000..66967c3dd2
--- /dev/null
+++ b/docker/docker-entrypoint.sh
@@ -0,0 +1,26 @@
+#!/bin/bash
+
+set -e
+
+# first check if we're passing flags, if so
+# prepend with sentry
+if [ "${1:0:1}" = '-' ]; then
+	set -- sentry "$@"
+fi
+
+case "$1" in
+	celery|cleanup|config|createuser|devserver|django|exec|export|help|import|init|plugins|queues|repair|run|shell|start|tsdb|upgrade)
+		set -- sentry "$@"
+	;;
+esac
+
+if [ "$1" = 'sentry' ]; then
+	set -- tini -- "$@"
+	if [ "$(id -u)" = '0' ]; then
+		mkdir -p "$SENTRY_FILESTORE_DIR"
+		find "$SENTRY_FILESTORE_DIR" ! -user sentry -exec chown sentry {} \;
+		set -- gosu sentry "$@"
+	fi
+fi
+
+exec "$@"
diff --git a/docker/onbuild/Dockerfile b/docker/onbuild/Dockerfile
new file mode 100644
index 0000000000..dd9f07869d
--- /dev/null
+++ b/docker/onbuild/Dockerfile
@@ -0,0 +1,17 @@
+FROM getsentry/sentry:git
+
+WORKDIR /usr/src/sentry
+
+# Add WORKDIR to PYTHONPATH so local python files don't need to be installed
+ENV PYTHONPATH /usr/src/sentry
+ONBUILD COPY . /usr/src/sentry
+
+# Hook for installing additional plugins
+ONBUILD RUN if [ -s requirements.txt ]; then pip install -r requirements.txt; fi
+
+# Hook for installing a local app as an addon
+ONBUILD RUN if [ -s setup.py ]; then pip install -e .; fi
+
+# Hook for staging in custom configs
+ONBUILD RUN if [ -s sentry.conf.py ]; then cp sentry.conf.py $SENTRY_CONF/; fi \
+	&& if [ -s config.yml ]; then cp config.yml $SENTRY_CONF/; fi
diff --git a/docker/sentry.conf.py b/docker/sentry.conf.py
new file mode 100644
index 0000000000..f3f4964864
--- /dev/null
+++ b/docker/sentry.conf.py
@@ -0,0 +1,297 @@
+# flake8: noqa
+from __future__ import absolute_import
+
+# This file is just Python, with a touch of Django which means
+# you can inherit and tweak settings to your hearts content.
+
+# For Docker, the following environment variables are supported:
+#  SENTRY_POSTGRES_HOST
+#  SENTRY_POSTGRES_PORT
+#  SENTRY_DB_NAME
+#  SENTRY_DB_USER
+#  SENTRY_DB_PASSWORD
+#  SENTRY_RABBITMQ_HOST
+#  SENTRY_RABBITMQ_USERNAME
+#  SENTRY_RABBITMQ_PASSWORD
+#  SENTRY_RABBITMQ_VHOST
+#  SENTRY_REDIS_HOST
+#  SENTRY_REDIS_PASSWORD
+#  SENTRY_REDIS_PORT
+#  SENTRY_REDIS_DB
+#  SENTRY_MEMCACHED_HOST
+#  SENTRY_MEMCACHED_PORT
+#  SENTRY_FILESTORE_DIR
+#  SENTRY_SERVER_EMAIL
+#  SENTRY_EMAIL_HOST
+#  SENTRY_EMAIL_PORT
+#  SENTRY_EMAIL_USER
+#  SENTRY_EMAIL_PASSWORD
+#  SENTRY_EMAIL_USE_TLS
+#  SENTRY_ENABLE_EMAIL_REPLIES
+#  SENTRY_SMTP_HOSTNAME
+#  SENTRY_MAILGUN_API_KEY
+#  SENTRY_SINGLE_ORGANIZATION
+#  SENTRY_SECRET_KEY
+from sentry.conf.server import *
+from sentry.utils.types import Bool
+
+import os
+import os.path
+
+CONF_ROOT = os.path.dirname(__file__)
+env = os.environ.get
+
+postgres = env('SENTRY_POSTGRES_HOST') or (env('POSTGRES_PORT_5432_TCP_ADDR') and 'postgres')
+if postgres:
+    DATABASES = {
+        'default': {
+            'ENGINE': 'sentry.db.postgres',
+            'NAME': (
+                env('SENTRY_DB_NAME')
+                or env('POSTGRES_ENV_POSTGRES_USER')
+                or 'postgres'
+            ),
+            'USER': (
+                env('SENTRY_DB_USER')
+                or env('POSTGRES_ENV_POSTGRES_USER')
+                or 'postgres'
+            ),
+            'PASSWORD': (
+                env('SENTRY_DB_PASSWORD')
+                or env('POSTGRES_ENV_POSTGRES_PASSWORD')
+                or ''
+            ),
+            'HOST': postgres,
+            'PORT': (
+                env('SENTRY_POSTGRES_PORT')
+                or ''
+            ),
+            'OPTIONS': {
+                'autocommit': True,
+            },
+        },
+    }
+
+# You should not change this setting after your database has been created
+# unless you have altered all schemas first
+SENTRY_USE_BIG_INTS = True
+
+# If you're expecting any kind of real traffic on Sentry, we highly recommend
+# configuring the CACHES and Redis settings
+
+###########
+# General #
+###########
+
+# Instruct Sentry that this install intends to be run by a single organization
+# and thus various UI optimizations should be enabled.
+SENTRY_SINGLE_ORGANIZATION = Bool(env('SENTRY_SINGLE_ORGANIZATION', True))
+
+#########
+# Redis #
+#########
+
+# Generic Redis configuration used as defaults for various things including:
+# Buffers, Quotas, TSDB
+
+redis = env('SENTRY_REDIS_HOST') or (env('REDIS_PORT_6379_TCP_ADDR') and 'redis')
+if not redis:
+    raise Exception('Error: REDIS_PORT_6379_TCP_ADDR (or SENTRY_REDIS_HOST) is undefined, did you forget to `--link` a redis container?')
+
+redis_password = env('SENTRY_REDIS_PASSWORD') or ''
+redis_port = env('SENTRY_REDIS_PORT') or '6379'
+redis_db = env('SENTRY_REDIS_DB') or '0'
+
+SENTRY_OPTIONS.update({
+    'redis.clusters': {
+        'default': {
+            'hosts': {
+                0: {
+                    'host': redis,
+                    'password': redis_password,
+                    'port': redis_port,
+                    'db': redis_db,
+                },
+            },
+        },
+    },
+})
+
+#########
+# Cache #
+#########
+
+# Sentry currently utilizes two separate mechanisms. While CACHES is not a
+# requirement, it will optimize several high throughput patterns.
+
+memcached = env('SENTRY_MEMCACHED_HOST') or (env('MEMCACHED_PORT_11211_TCP_ADDR') and 'memcached')
+if memcached:
+    memcached_port = (
+        env('SENTRY_MEMCACHED_PORT')
+        or '11211'
+    )
+    CACHES = {
+        'default': {
+            'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
+            'LOCATION': [memcached + ':' + memcached_port],
+            'TIMEOUT': 3600,
+        }
+    }
+
+# A primary cache is required for things such as processing events
+SENTRY_CACHE = 'sentry.cache.redis.RedisCache'
+
+#########
+# Queue #
+#########
+
+# See https://docs.getsentry.com/on-premise/server/queue/ for more
+# information on configuring your queue broker and workers. Sentry relies
+# on a Python framework called Celery to manage queues.
+
+rabbitmq = env('SENTRY_RABBITMQ_HOST') or (env('RABBITMQ_PORT_5672_TCP_ADDR') and 'rabbitmq')
+
+if rabbitmq:
+    BROKER_URL = (
+        'amqp://' + (
+            env('SENTRY_RABBITMQ_USERNAME')
+            or env('RABBITMQ_ENV_RABBITMQ_DEFAULT_USER')
+            or 'guest'
+        ) + ':' + (
+            env('SENTRY_RABBITMQ_PASSWORD')
+            or env('RABBITMQ_ENV_RABBITMQ_DEFAULT_PASS')
+            or 'guest'
+        ) + '@' + rabbitmq + '/' + (
+            env('SENTRY_RABBITMQ_VHOST')
+            or env('RABBITMQ_ENV_RABBITMQ_DEFAULT_VHOST')
+            or '/'
+        )
+    )
+else:
+    BROKER_URL = 'redis://:' + redis_password + '@' + redis + ':' + redis_port + '/' + redis_db
+
+
+###############
+# Rate Limits #
+###############
+
+# Rate limits apply to notification handlers and are enforced per-project
+# automatically.
+
+SENTRY_RATELIMITER = 'sentry.ratelimits.redis.RedisRateLimiter'
+
+##################
+# Update Buffers #
+##################
+
+# Buffers (combined with queueing) act as an intermediate layer between the
+# database and the storage API. They will greatly improve efficiency on large
+# numbers of the same events being sent to the API in a short amount of time.
+# (read: if you send any kind of real data to Sentry, you should enable buffers)
+
+SENTRY_BUFFER = 'sentry.buffer.redis.RedisBuffer'
+
+##########
+# Quotas #
+##########
+
+# Quotas allow you to rate limit individual projects or the Sentry install as
+# a whole.
+
+SENTRY_QUOTAS = 'sentry.quotas.redis.RedisQuota'
+
+########
+# TSDB #
+########
+
+# The TSDB is used for building charts as well as making things like per-rate
+# alerts possible.
+
+SENTRY_TSDB = 'sentry.tsdb.redis.RedisTSDB'
+
+###########
+# Digests #
+###########
+
+# The digest backend powers notification summaries.
+
+SENTRY_DIGESTS = 'sentry.digests.backends.redis.RedisBackend'
+
+################
+# File storage #
+################
+
+# Uploaded media uses these `filestore` settings. The available
+# backends are either `filesystem` or `s3`.
+
+SENTRY_OPTIONS['filestore.backend'] = 'filesystem'
+SENTRY_OPTIONS['filestore.options'] = {
+    'location': env('SENTRY_FILESTORE_DIR'),
+}
+
+##############
+# Web Server #
+##############
+
+# If you're using a reverse SSL proxy, you should enable the X-Forwarded-Proto
+# header and set `SENTRY_USE_SSL=1`
+
+if Bool(env('SENTRY_USE_SSL', False)):
+    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
+    SESSION_COOKIE_SECURE = True
+    CSRF_COOKIE_SECURE = True
+
+SENTRY_WEB_HOST = '0.0.0.0'
+SENTRY_WEB_PORT = 9000
+SENTRY_WEB_OPTIONS = {
+    # 'workers': 3,  # the number of web workers
+}
+
+###############
+# Mail Server #
+###############
+
+
+email = env('SENTRY_EMAIL_HOST') or (env('SMTP_PORT_25_TCP_ADDR') and 'smtp')
+if email:
+    SENTRY_OPTIONS['mail.backend'] = 'smtp'
+    SENTRY_OPTIONS['mail.host'] = email
+    SENTRY_OPTIONS['mail.password'] = env('SENTRY_EMAIL_PASSWORD') or ''
+    SENTRY_OPTIONS['mail.username'] = env('SENTRY_EMAIL_USER') or ''
+    SENTRY_OPTIONS['mail.port'] = int(env('SENTRY_EMAIL_PORT') or 25)
+    SENTRY_OPTIONS['mail.use-tls'] = Bool(env('SENTRY_EMAIL_USE_TLS', False))
+else:
+    SENTRY_OPTIONS['mail.backend'] = 'dummy'
+
+# The email address to send on behalf of
+SENTRY_OPTIONS['mail.from'] = env('SENTRY_SERVER_EMAIL') or 'root@localhost'
+
+# If you're using mailgun for inbound mail, set your API key and configure a
+# route to forward to /api/hooks/mailgun/inbound/
+SENTRY_OPTIONS['mail.mailgun-api-key'] = env('SENTRY_MAILGUN_API_KEY') or ''
+
+# If you specify a MAILGUN_API_KEY, you definitely want EMAIL_REPLIES
+if SENTRY_OPTIONS['mail.mailgun-api-key']:
+    SENTRY_OPTIONS['mail.enable-replies'] = True
+else:
+    SENTRY_OPTIONS['mail.enable-replies'] = Bool(env('SENTRY_ENABLE_EMAIL_REPLIES', False))
+
+if SENTRY_OPTIONS['mail.enable-replies']:
+    SENTRY_OPTIONS['mail.reply-hostname'] = env('SENTRY_SMTP_HOSTNAME') or ''
+
+# If this value ever becomes compromised, it's important to regenerate your
+# SENTRY_SECRET_KEY. Changing this value will result in all current sessions
+# being invalidated.
+secret_key = env('SENTRY_SECRET_KEY')
+if not secret_key:
+    raise Exception('Error: SENTRY_SECRET_KEY is undefined, run `generate-secret-key` and set to -e SENTRY_SECRET_KEY')
+
+if 'SENTRY_RUNNING_UWSGI' not in os.environ and len(secret_key) < 32:
+    print('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
+    print('!!                    CAUTION                       !!')
+    print('!! Your SENTRY_SECRET_KEY is potentially insecure.  !!')
+    print('!!    We recommend at least 32 characters long.     !!')
+    print('!!     Regenerate with `generate-secret-key`.       !!')
+    print('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
+
+SENTRY_OPTIONS['system.secret-key'] = secret_key
