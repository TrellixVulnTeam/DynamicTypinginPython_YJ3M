commit a0bc1a66cc956430430d1e0fa18bccfb572b0dc6
Author: Mark Story <mark@sentry.io>
Date:   Fri Jan 31 15:05:42 2020 -0500

    feat(discover) Remove confusing pre-built queries (#16736)
    
    Remove some pre-built queries that folks have been finding less useful
    and improve the ones we're keeping.

diff --git a/src/sentry/static/sentry/app/views/eventsV2/data.tsx b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
index 6f1a762590..60de449a8b 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/data.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
@@ -32,7 +32,6 @@ export const DEFAULT_EVENT_VIEW: Readonly<NewQuery> = {
   fields: ['title', 'event.type', 'project', 'user', 'timestamp'],
   orderby: '-timestamp',
   version: 2,
-  tags: ['event.type', 'release', 'project.name', 'user.email', 'user.ip', 'environment'],
   range: '24h',
 };
 
@@ -50,7 +49,6 @@ export const TRANSACTION_VIEWS: Readonly<Array<NewQuery>> = [
     ],
     orderby: '-count_id',
     query: 'event.type:transaction',
-    tags: ['release', 'project.name', 'user.email', 'user.ip', 'environment'],
     projects: [],
     version: 2,
     range: '24h',
@@ -60,22 +58,10 @@ export const TRANSACTION_VIEWS: Readonly<Array<NewQuery>> = [
 export const ALL_VIEWS: Readonly<Array<NewQuery>> = [
   {
     id: undefined,
-    name: t('Errors'),
-    fields: ['title', 'count(id)', 'count_unique(user)', 'project', 'last_seen'],
+    name: t('Errors by Title'),
+    fields: ['title', 'count(id)', 'count_unique(user)', 'project'],
     orderby: '-count_id',
     query: 'event.type:error',
-    tags: ['project.name', 'release', 'environment'],
-    projects: [],
-    version: 2,
-    range: '24h',
-  },
-  {
-    id: undefined,
-    name: t('Project Summary'),
-    fields: ['project', 'count(id)', 'count_unique(issue.id)'],
-    orderby: '-count_id',
-    query: 'event.type:error',
-    tags: ['error.type', 'project.name', 'release', 'environment'],
     projects: [],
     version: 2,
     range: '24h',
@@ -86,23 +72,10 @@ export const ALL_VIEWS: Readonly<Array<NewQuery>> = [
     fields: ['url', 'count(id)', 'count_unique(issue.id)'],
     orderby: '-count_id',
     query: 'event.type:error',
-    tags: ['error.type', 'project.name', 'url', 'release', 'environment'],
     projects: [],
     version: 2,
     range: '24h',
   },
-  {
-    version: 2,
-    id: undefined,
-    name: t('Errors by Release'),
-    fields: ['release', 'count(id)', 'count_unique(user)', 'timestamp'],
-    orderby: '-count_id',
-    tags: ['event.type', 'release', 'project', 'user.email', 'user.ip', 'environment'],
-    projects: [],
-    range: '24h',
-    environment: [],
-    query: '',
-  },
 ];
 
 export type EventData = {[key: string]: any};
diff --git a/tests/acceptance/test_organization_events_v2.py b/tests/acceptance/test_organization_events_v2.py
index f066e65149..17e56f8535 100644
--- a/tests/acceptance/test_organization_events_v2.py
+++ b/tests/acceptance/test_organization_events_v2.py
@@ -27,7 +27,6 @@ def all_events_query(**kwargs):
     options = {
         "sort": ["-timestamp"],
         "field": ["title", "event.type", "project", "user", "timestamp"],
-        "tag": ["event.type", "release", "project.name", "user.email", "user.ip", "environment"],
         "name": ["All Events"],
     }
     options.update(kwargs)
@@ -37,10 +36,9 @@ def all_events_query(**kwargs):
 
 def errors_query(**kwargs):
     options = {
-        "sort": ["-last_seen", "-title"],
+        "sort": ["-title"],
         "name": ["Errors"],
-        "field": ["title", "count(id)", "count_unique(user)", "project", "last_seen"],
-        "tag": ["error.type", "project.name"],
+        "field": ["title", "count(id)", "count_unique(user)", "project"],
         "query": ["event.type:error"],
     }
     options.update(kwargs)
@@ -53,7 +51,6 @@ def transactions_query(**kwargs):
         "sort": ["-count"],
         "name": ["Transactions"],
         "field": ["transaction", "project", "count()"],
-        "tag": ["release", "project.name", "user.email", "user.ip", "environment"],
         "statsPeriod": ["14d"],
         "query": ["event.type:transaction"],
     }
diff --git a/tests/js/spec/views/eventsV2/eventDetails.spec.jsx b/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
index 1699f0a32b..bf232f5cfb 100644
--- a/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
+++ b/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
@@ -9,7 +9,7 @@ import EventView from 'app/views/eventsV2/eventView';
 describe('EventsV2 > EventDetails', function() {
   const allEventsView = EventView.fromSavedQuery(DEFAULT_EVENT_VIEW);
   const errorsView = EventView.fromSavedQuery(
-    ALL_VIEWS.find(view => view.name === 'Errors')
+    ALL_VIEWS.find(view => view.name === 'Errors by Title')
   );
 
   beforeEach(function() {
diff --git a/tests/js/spec/views/eventsV2/queryList.spec.jsx b/tests/js/spec/views/eventsV2/queryList.spec.jsx
index 41fc0fa333..15e62cffbc 100644
--- a/tests/js/spec/views/eventsV2/queryList.spec.jsx
+++ b/tests/js/spec/views/eventsV2/queryList.spec.jsx
@@ -65,7 +65,7 @@ describe('EventsV2 > QueryList', function() {
     );
     const content = wrapper.find('QueryCard');
     // pre built + saved queries
-    expect(content).toHaveLength(6);
+    expect(content).toHaveLength(4);
   });
 
   it('can duplicate and trigger change callback', async function() {
diff --git a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
index f4b0b3d878..21c12532d5 100644
--- a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
+++ b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
@@ -38,7 +38,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
     query: {},
   };
 
-  const errorsQuery = ALL_VIEWS.find(view => view.name === 'Errors');
+  const errorsQuery = ALL_VIEWS.find(view => view.name === 'Errors by Title');
   const errorsView = EventView.fromSavedQuery(errorsQuery);
 
   const errorsViewSaved = EventView.fromSavedQuery(errorsQuery);
@@ -142,15 +142,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
       buttonSaveAs.find('ButtonSaveDropDown Button').simulate('click');
 
       // Check that EventView has a name
-      expect(errorsView.name).toBe('Errors');
-
-      /**
-       * This does not work because SavedQueryButtonGroup is wrapped by 2 HOCs
-       * and we cannot access the state of the inner component. But it should
-       * be empty because we didn't fill in Input. If it has a value, then the
-       * test will fail anyway
-       */
-      // expect(wrapper.state('queryName')).toBe('');
+      expect(errorsView.name).toBe('Errors by Title');
 
       expect(mockUtils).not.toHaveBeenCalled();
     });
diff --git a/tests/js/spec/views/eventsV2/savedQuery/utils.spec.jsx b/tests/js/spec/views/eventsV2/savedQuery/utils.spec.jsx
index 91d4e6de44..fb0c314ee2 100644
--- a/tests/js/spec/views/eventsV2/savedQuery/utils.spec.jsx
+++ b/tests/js/spec/views/eventsV2/savedQuery/utils.spec.jsx
@@ -11,7 +11,7 @@ describe('SavedQueries API helpers', () => {
   const api = new MockApiClient();
   const organization = TestStubs.Organization();
 
-  const errorsQuery = ALL_VIEWS.find(view => view.name === 'Errors');
+  const errorsQuery = ALL_VIEWS.find(view => view.name === 'Errors by Title');
   const errorsView = EventView.fromSavedQuery(errorsQuery);
   errorsView.id = '1'; // set id manually as errorsView.id is undefined
 
