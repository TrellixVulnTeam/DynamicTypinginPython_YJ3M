commit 80fbe62c02af06da7f449ae611a84e14fc4f3eaf
Author: Ted Kaemming <ted@kaemming.com>
Date:   Tue Mar 15 17:42:17 2016 -0700

    Add URL to `Problem`.

diff --git a/src/sentry/api/endpoints/system_health.py b/src/sentry/api/endpoints/system_health.py
index 73401bb253..629fd19b51 100644
--- a/src/sentry/api/endpoints/system_health.py
+++ b/src/sentry/api/endpoints/system_health.py
@@ -19,6 +19,7 @@ class SystemHealthEndpoint(Endpoint):
                 lambda problem: {
                     'message': problem.message,
                     'severity': problem.severity,
+                    'url': problem.url,
                 },
                 itertools.chain.from_iterable(results.values()),
             ),
diff --git a/src/sentry/static/sentry/app/components/alertMessage.jsx b/src/sentry/static/sentry/app/components/alertMessage.jsx
index 3ea4a234e1..39a90a8059 100644
--- a/src/sentry/static/sentry/app/components/alertMessage.jsx
+++ b/src/sentry/static/sentry/app/components/alertMessage.jsx
@@ -8,7 +8,8 @@ const AlertMessage = React.createClass({
     className: React.PropTypes.string,
     id: React.PropTypes.number.isRequired,
     message: React.PropTypes.string.isRequired,
-    type: React.PropTypes.string
+    type: React.PropTypes.string,
+    url: React.PropTypes.string
   },
 
   mixins: [PureRenderMixin],
@@ -31,7 +32,7 @@ const AlertMessage = React.createClass({
             <span aria-hidden="true">&times;</span>
           </button>
           <span className="icon"></span>
-          {this.props.message}
+          {this.props.url ? <a href={this.props.url}>{this.props.message}</a> : this.props.message}
         </div>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/alerts.jsx b/src/sentry/static/sentry/app/components/alerts.jsx
index 9c833d5a47..2edc9cc13b 100644
--- a/src/sentry/static/sentry/app/components/alerts.jsx
+++ b/src/sentry/static/sentry/app/components/alerts.jsx
@@ -21,7 +21,7 @@ const Alerts = React.createClass({
     return (
       <div {...this.props}>
         {this.state.alerts.map(function(alert, key) {
-           return <AlertMessage id={alert.id} key={key} type={alert.type} message={alert.message} />;
+           return <AlertMessage id={alert.id} key={key} type={alert.type} message={alert.message} url={alert.url} />;
         })}
       </div>
     );
diff --git a/src/sentry/static/sentry/app/stores/alertStore.jsx b/src/sentry/static/sentry/app/stores/alertStore.jsx
index fdb97a77ca..709cadc0bf 100644
--- a/src/sentry/static/sentry/app/stores/alertStore.jsx
+++ b/src/sentry/static/sentry/app/stores/alertStore.jsx
@@ -9,7 +9,7 @@ const AlertStore = Reflux.createStore({
     this.count = 0;
   },
 
-  onAddAlert(message, type, expireAfter) {
+  onAddAlert(message, type, expireAfter, url) {
     // intentionally recreate array via concat because of Reflux
     // "bug" where React components are given same reference to tracked
     // data objects, and don't *see* that values have changed
@@ -18,7 +18,8 @@ const AlertStore = Reflux.createStore({
     this.alerts = this.alerts.concat([{
       id: alertId,
       message: message,
-      type: type
+      type: type,
+      url: url
     }]);
 
     if (typeof expireAfter === 'undefined') {
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index b1d42f2ff7..dd94a20b49 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -45,7 +45,7 @@ const App = React.createClass({
       success: (data) => {
         if (data && data.problems) {
           data.problems.forEach(problem => {
-            AlertActions.addAlert(problem.message, 'error', 0);
+            AlertActions.addAlert(problem.message, 'error', 0, problem.url);
           });
         }
       },
diff --git a/src/sentry/status_checks/base.py b/src/sentry/status_checks/base.py
index 2b15633f32..fc0afef1d1 100644
--- a/src/sentry/status_checks/base.py
+++ b/src/sentry/status_checks/base.py
@@ -21,10 +21,11 @@ class Problem(object):
         SEVERITY_WARNING: 1,
     }
 
-    def __init__(self, message, severity=SEVERITY_CRITICAL):
+    def __init__(self, message, severity=SEVERITY_CRITICAL, url=None):
         assert severity in self.SEVERITY_LEVELS
         self.message = unicode(message)
         self.severity = severity
+        self.url = url
 
     def __cmp__(self, other):
         if not isinstance(other, Problem):
