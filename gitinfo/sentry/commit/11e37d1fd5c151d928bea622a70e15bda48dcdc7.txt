commit 11e37d1fd5c151d928bea622a70e15bda48dcdc7
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 15 18:45:07 2015 -0700

    Add tagging support to various metrics

diff --git a/src/sentry/metrics/base.py b/src/sentry/metrics/base.py
index c5105a61a4..097489fed4 100644
--- a/src/sentry/metrics/base.py
+++ b/src/sentry/metrics/base.py
@@ -21,8 +21,8 @@ class MetricsBackend(local):
     def _should_sample(self, sample_rate):
         return sample_rate >= 1 or random() >= 1 - sample_rate
 
-    def incr(self, key, amount=1, sample_rate=1):
+    def incr(self, key, instance=None, tags=None, amount=1, sample_rate=1):
         raise NotImplementedError
 
-    def timing(self, key, value, sample_rate=1):
+    def timing(self, key, value, instance=None, tags=None, sample_rate=1):
         raise NotImplementedError
diff --git a/src/sentry/metrics/datadog.py b/src/sentry/metrics/datadog.py
index e0294bce66..1578cd49b3 100644
--- a/src/sentry/metrics/datadog.py
+++ b/src/sentry/metrics/datadog.py
@@ -5,6 +5,8 @@ __all__ = ['DatadogMetricsBackend']
 from datadog import initialize, ThreadStats
 from datadog.util.hostname import get_hostname
 
+from sentry.utils.cache import memoize
+
 from .base import MetricsBackend
 
 
@@ -17,20 +19,36 @@ class DatadogMetricsBackend(MetricsBackend):
         else:
             self.host = get_hostname()
         initialize(**kwargs)
-        self._stats = ThreadStats()
-        self._stats.start()
         super(DatadogMetricsBackend, self).__init__(prefix=prefix)
 
     def __del__(self):
-        self._stats.stop()
-
-    def incr(self, key, amount=1, sample_rate=1):
-        self._stats.increment(self._get_key(key), amount,
-                              sample_rate=sample_rate,
-                              tags=self.tags,
-                              host=self.host)
-
-    def timing(self, key, value, sample_rate=1):
-        self._stats.timing(self._get_key(key), value, sample_rate=sample_rate,
-                           tags=self.tags,
-                           host=self.host)
+        self.stats.stop()
+
+    @memoize
+    def stats(self):
+        instance = ThreadStats()
+        instance.start()
+        return instance
+
+    def incr(self, key, instance=None, tags=None, amount=1, sample_rate=1):
+        if tags is None:
+            tags = {}
+        if self.tags:
+            tags.update(self.tags)
+        if instance:
+            tags['instance'] = instance
+        self.stats.increment(self._get_key(key), amount,
+                             sample_rate=sample_rate,
+                             tags=tags,
+                             host=self.host)
+
+    def timing(self, key, value, instance=None, tags=None, sample_rate=1):
+        if tags is None:
+            tags = {}
+        if self.tags:
+            tags.update(self.tags)
+        if instance:
+            tags['instance'] = instance
+        self.stats.timing(self._get_key(key), value, sample_rate=sample_rate,
+                          tags=tags,
+                          host=self.host)
diff --git a/src/sentry/metrics/dummy.py b/src/sentry/metrics/dummy.py
index 5d1954637e..0e75086292 100644
--- a/src/sentry/metrics/dummy.py
+++ b/src/sentry/metrics/dummy.py
@@ -6,8 +6,8 @@ from .base import MetricsBackend
 
 
 class DummyMetricsBackend(MetricsBackend):
-    def incr(self, key, amount=1, rate=1):
+    def incr(self, key, instance=None, tags=None, amount=1, rate=1):
         pass
 
-    def timing(self, key, value, rate=1):
+    def timing(self, key, value, instance=None, tags=None, rate=1):
         pass
diff --git a/src/sentry/metrics/statsd.py b/src/sentry/metrics/statsd.py
index b3df64eddd..1b13792d56 100644
--- a/src/sentry/metrics/statsd.py
+++ b/src/sentry/metrics/statsd.py
@@ -12,8 +12,13 @@ class StatsdMetricsBackend(MetricsBackend):
         self.client = statsd.StatsClient(host=host, port=port)
         super(StatsdMetricsBackend, self).__init__(**kwargs)
 
-    def incr(self, key, amount=1, sample_rate=1):
-        self.client.incr(self._get_key(key), amount, sample_rate)
+    def _full_key(self, key, instance=None):
+        if instance:
+            return '{}.{}'.format(key, instance)
+        return key
 
-    def timing(self, key, value, sample_rate=1):
-        self.client.timing(self._get_key(key), value, sample_rate)
+    def incr(self, key, instance=None, tags=None, amount=1, sample_rate=1):
+        self.client.incr(self._full_key(self._get_key(key)), amount, sample_rate)
+
+    def timing(self, key, value, instance=None, tags=None, sample_rate=1):
+        self.client.timing(self._full_key(self._get_key(key)), value, sample_rate)
diff --git a/src/sentry/middleware/stats.py b/src/sentry/middleware/stats.py
index 45a0293b94..e453492f45 100644
--- a/src/sentry/middleware/stats.py
+++ b/src/sentry/middleware/stats.py
@@ -10,12 +10,12 @@ from sentry.utils import metrics
 
 class ResponseCodeMiddleware(object):
     def process_response(self, request, response):
-        metrics.incr('response.%s' % response.status_code)
+        metrics.incr('response', instance=str(response.status_code))
         return response
 
     def process_exception(self, request, exception):
         if not isinstance(exception, Http404):
-            metrics.incr('response.500')
+            metrics.incr('response', instance='500')
 
 
 class RequestTimingMiddleware(object):
@@ -54,12 +54,16 @@ class RequestTimingMiddleware(object):
     def _record_time(self, request, status_code):
         if not hasattr(request, '_view_path'):
             return
-        metrics.incr('view.{path}.{status_code}'.format(
-            path=request._view_path, status_code=status_code), 1)
+
+        metrics.timing('view.response', instance=request._view_path, tags={
+            'method': request.method,
+            'status_code': status_code,
+        })
 
         if not hasattr(request, '_start_time'):
             return
+
         ms = int((time.time() - request._start_time) * 1000)
-        metrics.timing('view.{path}.{method}'.format(
-            path=request._view_path, method=request.method), ms)
-        metrics.timing('view', ms)
+        metrics.timing('view.duration', ms, instance=request._view_path, tags={
+            'method': request.method,
+        })
diff --git a/src/sentry/receivers/stats.py b/src/sentry/receivers/stats.py
index 631a2289a2..1f5adc08fb 100644
--- a/src/sentry/receivers/stats.py
+++ b/src/sentry/receivers/stats.py
@@ -10,8 +10,7 @@ def record_instance_creation(instance, created, **kwargs):
     if not created:
         return
 
-    metrics.incr('objects.created.all')
-    metrics.incr('objects.created.types.{0}'.format(instance._meta.db_table))
+    metrics.incr('objects.created', instance=instance._meta.db_table)
 
 post_save.connect(
     record_instance_creation,
@@ -28,8 +27,7 @@ def record_task_signal(signal, name):
     def handler(task, **kwargs):
         if not isinstance(task, basestring):
             task = _get_task_name(task)
-        metrics.incr('jobs.{0}.{1}'.format(name, task))
-        metrics.incr('jobs.all.{0}'.format(name))
+        metrics.incr('jobs.{0}'.format(name), instance=task)
 
     signal.connect(
         handler,
diff --git a/src/sentry/tasks/base.py b/src/sentry/tasks/base.py
index 82aeb5075d..07ec2b61d6 100644
--- a/src/sentry/tasks/base.py
+++ b/src/sentry/tasks/base.py
@@ -18,10 +18,12 @@ def instrumented_task(name, stat_suffix=None, **kwargs):
     def wrapped(func):
         @wraps(func)
         def _wrapped(*args, **kwargs):
-            key = 'jobs.duration.{name}'.format(name=name)
+            key = 'jobs.duration'.format(name=name)
             if stat_suffix:
-                key += '.{key}'.format(key=stat_suffix(*args, **kwargs))
-            with metrics.timer(key):
+                instance = '{}.{}'.format(name, stat_suffix(*args, **kwargs))
+            else:
+                instance = name
+            with metrics.timer(key, instance=instance):
                 result = func(*args, **kwargs)
             return result
         return app.task(name=name, **kwargs)(_wrapped)
diff --git a/src/sentry/utils/metrics.py b/src/sentry/utils/metrics.py
index 13c67bdf44..91d5b0396e 100644
--- a/src/sentry/utils/metrics.py
+++ b/src/sentry/utils/metrics.py
@@ -38,30 +38,34 @@ def _sampled_value(value):
     return value
 
 
-def _incr_internal(key, amount):
+def _incr_internal(key, instance=None, tags=None, amount=1):
     from sentry.app import tsdb
 
     sample_rate = settings.SENTRY_METRICS_SAMPLE_RATE
     if _should_sample():
         amount = _sampled_value(amount)
-        tsdb.incr(tsdb.models.internal, key, count=amount)
+        if instance:
+            full_key = '{}.{}'.format(key, instance)
+        else:
+            full_key = key
+        tsdb.incr(tsdb.models.internal, full_key, count=amount)
 
 
-def incr(key, amount=1):
+def incr(key, instance=None, tags=None, amount=1):
     sample_rate = settings.SENTRY_METRICS_SAMPLE_RATE
-    _incr_internal(key, amount)
-    backend.incr(key, amount, sample_rate)
+    _incr_internal(key, instance, tags, amount)
+    backend.incr(key, amount, instance, tags, sample_rate)
 
 
-def timing(key, value):
+def timing(key, value, instance=None, tags=None):
     # TODO(dcramer): implement timing for tsdb
     # TODO(dcramer): implement sampling for timing
     sample_rate = settings.SENTRY_METRICS_SAMPLE_RATE
-    backend.timing(key, value, sample_rate)
+    backend.timing(key, value, instance, tags, sample_rate)
 
 
 @contextmanager
-def timer(key):
+def timer(key, instance=None, tags=None):
     start = time()
     yield
-    timing(key, time() - start)
+    timing(key, time() - start, instance, tags)
diff --git a/tests/sentry/metrics/test_datadog.py b/tests/sentry/metrics/test_datadog.py
index 5160b6ae51..4f69cec315 100644
--- a/tests/sentry/metrics/test_datadog.py
+++ b/tests/sentry/metrics/test_datadog.py
@@ -14,20 +14,20 @@ class DatadogMetricsBackendTest(TestCase):
 
     @patch('datadog.threadstats.base.ThreadStats.increment')
     def test_incr(self, mock_incr):
-        self.backend.incr('foo')
+        self.backend.incr('foo', instance='bar')
         mock_incr.assert_called_once_with(
             'sentrytest.foo', 1,
             sample_rate=1,
-            tags=None,
+            tags={'instance': 'bar'},
             host=socket.gethostname(),
         )
 
     @patch('datadog.threadstats.base.ThreadStats.timing')
     def test_timing(self, mock_timing):
-        self.backend.timing('foo', 30)
+        self.backend.timing('foo', 30, instance='bar')
         mock_timing.assert_called_once_with(
             'sentrytest.foo', 30,
             sample_rate=1,
-            tags=None,
+            tags={'instance': 'bar'},
             host=socket.gethostname(),
         )
