commit 3c9f0fbb56e4e059ae3133ca5963e81d1b718652
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Mar 18 04:38:48 2014 -0700

    Use new django-sudo instead

diff --git a/setup.py b/setup.py
index 1dcd9ca1ab..9741441ca8 100755
--- a/setup.py
+++ b/setup.py
@@ -76,6 +76,7 @@ install_requires = [
     'django-social-auth>=0.7.28,<0.8.0',
     'django-static-compiler>=0.3.0,<0.4.0',
     'django-statsd-mozilla>=0.3.8.0,<0.3.9.0',
+    'django-sudo>=0.0.1,<1.0.0',
     'django-templatetag-sugar>=0.1.0,<0.2.0',
     'djangorestframework>=2.3.8,<2.4.0',
     'email-reply-parser>=0.2.0,<0.3.0',
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 5fb69c6cfc..7753e8dcf1 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -116,7 +116,7 @@ MIDDLEWARE_CLASSES = (
     'django.contrib.sessions.middleware.SessionMiddleware',
     'django.middleware.csrf.CsrfViewMiddleware',
     'django.contrib.auth.middleware.AuthenticationMiddleware',
-    'sentry.middleware.sudo.SudoMiddleware',
+    'django_sudo.middleware.SudoMiddleware',
     'sentry.middleware.locale.SentryLocaleMiddleware',
     'sentry.middleware.social_auth.SentrySocialAuthExceptionMiddleware',
     'django.middleware.locale.LocaleMiddleware',
@@ -167,6 +167,7 @@ INSTALLED_APPS = (
     'social_auth',
     'south',
     'static_compiler',
+    'django_sudo',
 )
 
 STATIC_ROOT = os.path.realpath(os.path.join(PROJECT_ROOT, 'static'))
diff --git a/src/sentry/middleware/sudo.py b/src/sentry/middleware/sudo.py
deleted file mode 100644
index 902d6780ee..0000000000
--- a/src/sentry/middleware/sudo.py
+++ /dev/null
@@ -1,38 +0,0 @@
-"""
-sentry.middleware.sudo
-~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from sentry.utils.sudo import has_sudo_privileges, SUDO_COOKIE_NAME
-
-
-class SudoMiddleware(object):
-    def process_request(self, request):
-        request._sentry_sudo = None
-        request.is_sudo = lambda: has_sudo_privileges(request)
-
-    def process_response(self, request, response):
-        is_sudo = getattr(request, '_sentry_sudo', None)
-
-        if is_sudo is None:
-            return response
-
-        # We have explicitly had sudo revoked, so clean up cookie
-        if is_sudo is False and SUDO_COOKIE_NAME in request.COOKIES:
-            response.delete_cookie(SUDO_COOKIE_NAME)
-            return response
-
-        # Sudo mode has been granted, and we have a token to send back to the user agent
-        if is_sudo is True and hasattr(request, '_sentry_sudo_token'):
-            token = request._sentry_sudo_token
-            max_age = request._sentry_sudo_max_age
-            response.set_cookie(
-                SUDO_COOKIE_NAME, token,
-                max_age=max_age,  # If max_age is None, it's a session cookie
-                secure=request.is_secure(),
-                httponly=True,  # Not accessible by JavaScript
-            )
-
-        return response
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 005fdeabcb..8ae8f72499 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -26,11 +26,12 @@ from django.test.client import Client
 from django.utils.importlib import import_module
 from exam import Exam
 from rest_framework.test import APITestCase as BaseAPITestCase
+from django_sudo import COOKIE_NAME as SUDO_COOKIE_NAME
+from django_sudo.utils import grant_sudo_privileges
 
 from sentry.constants import MODULE_ROOT
 from sentry.models import Option, ProjectOption
 from sentry.utils import json
-from sentry.utils.sudo import grant_sudo_privileges, SUDO_COOKIE_NAME
 
 from .fixtures import Fixtures
 from .helpers import get_auth_header
diff --git a/src/sentry/utils/sudo.py b/src/sentry/utils/sudo.py
deleted file mode 100644
index 7aead3ff3f..0000000000
--- a/src/sentry/utils/sudo.py
+++ /dev/null
@@ -1,77 +0,0 @@
-"""
-sentry.utils.sudo
-~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from functools import wraps
-from urlparse import urlparse, urlunparse
-
-from django.conf import settings
-from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect, QueryDict
-from django.utils.crypto import get_random_string
-
-SUDO_COOKIE_NAME = getattr(settings, 'SUDO_COOKIE_NAME', 'sudo')
-SUDO_COOKIE_MAX_AGE = getattr(settings, 'SUDO_COOKIE_MAX_AGE', 10800)
-
-
-def grant_sudo_privileges(request, max_age=SUDO_COOKIE_MAX_AGE):
-    """
-    Assigns a random token to the user's session that allows them to have elevated permissions
-    """
-    # Token doesn't need to be unique, just needs to be unpredictable and match the cookie and the session
-    token = get_random_string()
-    request.session[SUDO_COOKIE_NAME] = token
-    request.session.modified = True
-    request._sentry_sudo = True
-    request._sentry_sudo_token = token
-    request._sentry_sudo_max_age = max_age
-    return token
-
-
-def revoke_sudo_privileges(request):
-    request._sentry_sudo = False
-
-
-def has_sudo_privileges(request):
-    """
-    Check if a request is allowed to perform sudo actions
-    """
-    if request._sentry_sudo is None:
-        try:
-            is_sudo = (
-                request.user.is_authenticated() and
-                request.COOKIES[SUDO_COOKIE_NAME] == request.session[SUDO_COOKIE_NAME]
-            )
-        except KeyError:
-            is_sudo = False
-
-        request._sentry_sudo = is_sudo
-    return request._sentry_sudo
-
-
-def redirect_to_sudo(next_url):
-    """
-    Redirects the user to the login page, passing the given 'next' page
-    """
-    sudo_url_parts = list(urlparse(reverse('sentry-sudo')))
-
-    querystring = QueryDict(sudo_url_parts[4], mutable=True)
-    querystring['next'] = next_url
-    sudo_url_parts[4] = querystring.urlencode(safe='/')
-
-    return HttpResponseRedirect(urlunparse(sudo_url_parts))
-
-
-def sudo_required(func):
-    """
-    Enforces a view to have elevated privileges
-    """
-    @wraps(func)
-    def inner(request, *args, **kwargs):
-        if not request.is_sudo():
-            return redirect_to_sudo(request.get_full_path())
-        return func(request, *args, **kwargs)
-    return inner
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index ce5a312f98..d56cbe755d 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -277,17 +277,3 @@ class ProjectEmailOptionsForm(forms.Form):
         else:
             UserOption.objects.unset_value(
                 self.user, self.project, 'mail:email')
-
-
-class SudoForm(forms.Form):
-    password = forms.CharField(
-        widget=forms.PasswordInput(attrs={'placeholder': _('Password')}))
-
-    def __init__(self, user, *args, **kwargs):
-        self.user = user
-        super(SudoForm, self).__init__(*args, **kwargs)
-
-    def clean_password(self):
-        if not self.user.check_password(self.data['password']):
-            raise forms.ValidationError(_('Invalid password.'))
-        return self.data['password']
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 8d4eaae235..c159ee5189 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -8,7 +8,7 @@ sentry.web.frontend.accounts
 import itertools
 
 from django.contrib import messages
-from django.contrib.auth import authenticate
+from django.contrib.auth import login as login_user, authenticate
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
 from django.db import transaction
@@ -17,6 +17,8 @@ from django.views.decorators.cache import never_cache
 from django.views.decorators.csrf import csrf_protect
 from django.utils import timezone
 
+from django_sudo.decorators import sudo_required
+
 from sentry.constants import MEMBER_USER
 from sentry.models import Project, UserOption, LostPasswordHash
 from sentry.plugins import plugins
@@ -24,12 +26,10 @@ from sentry.web.decorators import login_required
 from sentry.web.forms.accounts import (
     AccountSettingsForm, NotificationSettingsForm, AppearanceSettingsForm,
     RegistrationForm, RecoverPasswordForm, ChangePasswordRecoverForm,
-    ProjectEmailOptionsForm, AuthenticationForm, SudoForm)
+    ProjectEmailOptionsForm, AuthenticationForm)
 from sentry.web.helpers import render_to_response
-from sentry.utils.auth import get_auth_providers, login as login_user
+from sentry.utils.auth import get_auth_providers
 from sentry.utils.safe import safe_execute
-from sentry.utils.sudo import (
-    grant_sudo_privileges, revoke_sudo_privileges, sudo_required)
 
 
 @csrf_protect
@@ -58,28 +58,6 @@ def login(request):
     return render_to_response('sentry/login.html', context, request)
 
 
-@never_cache
-@csrf_protect
-@login_required
-def sudo(request):
-    redirect_to = request.GET.get('next', '/')
-
-    if request.is_sudo():
-        return HttpResponseRedirect(redirect_to)
-
-    form = SudoForm(request.user, request.POST or None)
-    if request.method == 'POST':
-        if form.is_valid():
-            grant_sudo_privileges(request)
-            return HttpResponseRedirect(redirect_to)
-
-    context = {
-        'form': form,
-        'next': redirect_to,
-    }
-    return render_to_response('sentry/account/sudo.html', context, request)
-
-
 @csrf_protect
 @never_cache
 @transaction.commit_on_success
@@ -126,7 +104,6 @@ def logout(request):
     from django.contrib.auth import logout
 
     logout(request)
-    revoke_sudo_privileges(request)
 
     return HttpResponseRedirect(reverse('sentry'))
 
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 5633251af2..2d80b05929 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -78,7 +78,8 @@ urlpatterns += patterns('',
         name='sentry-logout'),
     url(r'^register/$', accounts.register,
         name='sentry-register'),
-    url(r'^account/sudo/$', accounts.sudo,
+    url(r'^account/sudo/$', 'django_sudo.views.sudo',
+        {'template_name': 'sentry/account/sudo.html'},
         name='sentry-sudo'),
     url(r'^account/recover/$', accounts.recover,
         name='sentry-account-recover'),
