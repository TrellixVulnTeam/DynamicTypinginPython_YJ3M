commit dde1757a26bc1f8dd6dea39d387c0f69cdc48b69
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Fri Dec 4 17:04:57 2015 -0800

    Start to generate options dynamically on frontend

diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index 31c99cd06d..464d8256af 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -16,7 +16,8 @@ const App = React.createClass({
   getInitialState() {
     return {
       loading: false,
-      error: false
+      error: false,
+      needsUpgrade: ConfigStore.get('needsUpgrade'),
     };
   },
 
@@ -59,15 +60,19 @@ const App = React.createClass({
     OrganizationStore.load([]);
   },
 
+  onConfigured() {
+    this.setState({needsUpgrade: false});
+  },
+
   render() {
     let user = ConfigStore.get('user');
-    let needsUpgrade = ConfigStore.get('needsUpgrade');
+    let needsUpgrade = this.state.needsUpgrade;
 
     if (user.isSuperuser && needsUpgrade) {
       return (
         <div>
           <Indicators className="indicators-container" />
-          <InstallWizard />
+          <InstallWizard onConfigured={this.onConfigured} />
         </div>
       );
     }
diff --git a/src/sentry/static/sentry/app/views/installWizard.jsx b/src/sentry/static/sentry/app/views/installWizard.jsx
index 6670893f87..e49d4b532d 100644
--- a/src/sentry/static/sentry/app/views/installWizard.jsx
+++ b/src/sentry/static/sentry/app/views/installWizard.jsx
@@ -8,43 +8,86 @@ import ConfigStore from '../stores/configStore';
 import LoadingIndicator from '../components/loadingIndicator';
 import {EmailField, TextField} from '../components/forms';
 
+
+const OPTIONS_META = {
+  'system.url-prefix': {
+    label: 'Root URL',
+    placeholder: 'https://sentry.example.com',
+    help: 'The root web address which is used to communicate with the Sentry backend.',
+    defaultValue: `${document.location.protocol}//${document.location.host}`
+  },
+  'system.admin-email': {
+    label: 'Admin Email',
+    placeholder: 'admin@example.com',
+    help: 'The technical contact for this Sentry installation.',
+    component: EmailField
+  }
+};
+
+function makeField(option, onChange) {
+  let meta = OPTIONS_META[option];
+  let Field = meta.component || TextField;
+  return (
+    <Field
+        key={option}
+        label={t(meta.label)}
+        defaultValue={meta.defaultValue || ''}
+        placeholder={meta.placeholder}
+        help={t(meta.help)}
+        onChange={onChange}
+    />
+  );
+}
+
+
 const InstallWizardSettings = React.createClass({
-  getDefaultRootUrl() {
-    return `${document.location.protocol}//${document.location.host}`;
+
+  getInitialState() {
+    let options = {...this.props.initialOptions};
+    let requiredOptions = Object.keys(_.pick(options, option => option.field.required));
+    let missingOptions = new Set(requiredOptions.filter(option => !options[option].value));
+    let fields = [];
+    for (let option of missingOptions) {
+      options[option].value = options[option].value || OPTIONS_META[option].defaultValue;
+      fields.push(makeField(option, this.onFieldChange.bind(this, option)));
+    }
+
+    return {
+      options: options,
+      required: requiredOptions,
+      fields: fields,
+      formValid: !requiredOptions.filter(option => !options[option].value).length,
+    };
   },
 
   onFieldChange(name, value) {
-    this.setState({[name]: value});
+    let options = {...this.state.options};
+    options[name].value = value;
+    this.setState({
+      options: options,
+      formValid: !this.state.required.filter(option => !options[option].value).length,
+    });
+  },
+
+  onClick() {
+    this.props.onSubmit(this.state.options);
   },
 
   render() {
-    let options = this.props.options;
-    let requiredOptions = Object.keys(_.pick(options, option => option.field.required));
-    let missingOptions = new Set(requiredOptions.filter(option => !options[option].value));
-    let formValid = !missingOptions.length;
+    let {fields} = this.state;
 
     return (
       <div>
         <p>Welcome to Sentry, yo! Complete setup by filling out the required
           configuration.</p>
 
-        {missingOptions.has('system.url-prefix') &&
-          <TextField label={t('Root URL')} defaultValue={this.getDefaultRootUrl()}
-              placeholder="https://sentry.example.com"
-              help={t('The root web address which is used to communication with the Sentry backend.')}
-              onChange={this.onFieldChange.bind(this, 'system.url-prefix')} />
-        }
-
-        {missingOptions.has('system.admin-email') &&
-          <EmailField label={t('Admin Email')}
-              placeholder="admin@example.com"
-              help={t('The technical contact for this Sentry installation.')}
-              onChange={this.onFieldChange.bind(this, 'system.admin-email')} />
+        {fields.length ? fields :
+          <p>Nothing needs to be done here. Enjoy.</p>
         }
 
         <div className="form-actions" style={{marginTop: 25}}>
           <button className="btn btn-primary"
-                  disabled={!formValid}>{t('Continue')}</button>
+                  disabled={!this.state.formValid} onClick={this.onClick}>{t('Continue')}</button>
         </div>
       </div>
     );
@@ -60,7 +103,7 @@ const InstallWizard = React.createClass({
     return {
       loading: true,
       error: false,
-      options: {},
+      options: {}
     };
   },
 
@@ -91,6 +134,18 @@ const InstallWizard = React.createClass({
     });
   },
 
+  onSubmit(options) {
+    let data = _.mapObject(options, option => option.value);
+    this.api.request('/internal/options/', {
+      method: 'PUT',
+      data: data,
+      success: this.props.onConfigured,
+      error: () => {
+        // Should do something here with an error
+      }
+    });
+  },
+
   render() {
     let {error, loading, options} = this.state;
     let version = ConfigStore.get('version');
@@ -113,7 +168,7 @@ const InstallWizard = React.createClass({
                   {t('We were unable to load the required configuration from the Sentry server. Please take a look at the service logs.')}
                 </div>
               :
-                <InstallWizardSettings options={options} />
+                <InstallWizardSettings initialOptions={options} onSubmit={this.onSubmit}/>
               )}
             </div>
           </div>
diff --git a/src/sentry/templatetags/sentry_react.py b/src/sentry/templatetags/sentry_react.py
index 09bdc2edbd..ff1ca5c269 100644
--- a/src/sentry/templatetags/sentry_react.py
+++ b/src/sentry/templatetags/sentry_react.py
@@ -32,6 +32,30 @@ def _get_version_info():
     }
 
 
+def _needs_upgrade(version_info=None):
+    version_configured = options.get('sentry:version-configured')
+    if not version_configured:
+        # If we were never previously upgraded (being a new install)
+        # we want to force an upgrade, even if the values are set.
+        return True
+
+    if version_info is None:
+        version_info = _get_version_info()
+
+    # Already up to date, yay!
+    if version_configured == version_info['current']:
+        return False
+
+    # Check all required options to see if they've been set
+    for key in options.filter(flag=options.FLAG_REQUIRED):
+        if not options.get(key):
+            return True
+
+    # Everything looks good, but version changed, so let's bump it
+    options.set('sentry:version-configured', version_info['current'])
+    return False
+
+
 @register.simple_tag(takes_context=True)
 def get_react_config(context):
     if 'request' in context:
@@ -57,12 +81,10 @@ def get_react_config(context):
 
     version_info = _get_version_info()
 
+    needs_upgrade = False
+
     if is_superuser:
-        # TODO(dcramer): we should confirm that no options need configured
-        # when upgrading, and if so, we simply bump the version??
-        needs_upgrade = options.get('sentry:version-configured') != version_info['current']
-    else:
-        needs_upgrade = False
+        needs_upgrade = _needs_upgrade(version_info)
 
     context = {
         'singleOrganization': settings.SENTRY_SINGLE_ORGANIZATION,
