commit 0d74fe32251ed22ab5315ebdb53785adf7f8e7e4
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Oct 22 10:36:26 2018 -0700

    feat(events): Add Chart for org events stream (#10133)
    
    This adds a chart for org events view. Undetermined atm if we should keep
    the health endpoints. Endpoints require support for absolute dates.

diff --git a/src/sentry/static/sentry/app/actionCreators/health.jsx b/src/sentry/static/sentry/app/actionCreators/health.jsx
index 951fbc88cc..7f222c4cc5 100644
--- a/src/sentry/static/sentry/app/actionCreators/health.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/health.jsx
@@ -1,13 +1,36 @@
+import moment from 'moment';
+
 const BASE_URL = org => `/organizations/${org.slug}/health/`;
 
 // Gets the period to query with if we need to double the initial period in order
 // to get data for the previous period
-const getPeriod = (originalPeriod, shouldDoublePeriod) => {
-  if (!shouldDoublePeriod) return originalPeriod;
+const getPeriod = ({period, start, end}, {shouldDoublePeriod}) => {
+  // you can not specify both relative and absolute periods
+  // relative period takes precendence
+  if (period) {
+    if (!shouldDoublePeriod) return {statsPeriod: period};
+    const [, periodNumber, periodLength] = period.match(/([0-9]+)([mhdw])/);
+
+    return {statsPeriod: `${parseInt(periodNumber, 10) * 2}${periodLength}`};
+  }
 
-  const [, periodNumber, periodLength] = originalPeriod.match(/([0-9]+)([mhdw])/);
+  if (!start || !end) {
+    throw new Error('start and end required');
+  }
+
+  if (shouldDoublePeriod) {
+    // get duration of end - start and double
+    const diff = moment(end).diff(moment(start));
+
+    return {
+      start: moment(start)
+        .subtract(diff)
+        .format(moment.HTML5_FMT.DATETIME_LOCAL_MS),
+      end,
+    };
+  }
 
-  return `${parseInt(periodNumber, 10) * 2}${periodLength}`;
+  return {start, end};
 };
 
 /**
@@ -34,6 +57,8 @@ export const doHealthRequest = (
     tag,
     environments,
     period,
+    start,
+    end,
     interval,
     timeseries,
     includePrevious,
@@ -46,17 +71,17 @@ export const doHealthRequest = (
 
   const path = timeseries ? 'graph/' : 'top/';
   const shouldDoublePeriod = timeseries && includePrevious;
-  const totalPeriod = getPeriod(period, shouldDoublePeriod);
+  const periodObj = getPeriod({period, start, end}, {shouldDoublePeriod});
 
   const query = {
     tag,
     includePrevious,
     interval,
-    statsPeriod: totalPeriod,
     project: projects,
     environment: environments,
     q: specifiers,
     limit,
+    ...periodObj,
     ...(topk ? {topk} : {}),
   };
 
diff --git a/src/sentry/static/sentry/app/components/charts/baseChart.jsx b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
index 92512b4d8c..f6a4851844 100644
--- a/src/sentry/static/sentry/app/components/charts/baseChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
@@ -9,11 +9,11 @@ import SentryTypes from 'app/sentryTypes';
 import theme from 'app/utils/theme';
 
 import Grid from './components/grid';
+import Legend from './components/legend';
 import LineSeries from './series/lineSeries';
 import Tooltip from './components/tooltip';
-import YAxis from './components/yAxis';
 import XAxis from './components/xAxis';
-import Legend from './components/legend';
+import YAxis from './components/yAxis';
 
 // If dimension is a number conver it to pixels, otherwise use dimension without transform
 const getDimensionValue = dimension => {
@@ -48,6 +48,11 @@ class BaseChart extends React.Component {
     // Tooltip options
     tooltip: SentryTypes.EChartsTooltip,
 
+    // DataZoom (allows for zooming of chart)
+    dataZoom: SentryTypes.EChartsDataZoom,
+
+    toolBox: SentryTypes.EChartsToolBox,
+
     // ECharts Grid options
     grid: SentryTypes.EChartsGrid,
 
@@ -140,6 +145,8 @@ class BaseChart extends React.Component {
       series,
       yAxis,
       xAxis,
+      dataZoom,
+      toolBox,
 
       isGroupedByDate,
       previousPeriod,
@@ -204,6 +211,8 @@ class BaseChart extends React.Component {
                   },
                 }),
               ],
+          dataZoom,
+          toolbox: toolBox,
         }}
       />
     );
diff --git a/src/sentry/static/sentry/app/components/charts/components/dataZoom.jsx b/src/sentry/static/sentry/app/components/charts/components/dataZoom.jsx
new file mode 100644
index 0000000000..4c670c3e2b
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/components/dataZoom.jsx
@@ -0,0 +1,13 @@
+import 'echarts/lib/component/dataZoom';
+
+const DEFAULT = {
+  type: 'inside',
+  throttle: 50,
+};
+
+export default function DataZoom(props) {
+  // `props` can be boolean, if so return default
+  if (!props || !Array.isArray(props)) return [DEFAULT];
+
+  return props;
+}
diff --git a/src/sentry/static/sentry/app/components/charts/components/toolBox.jsx b/src/sentry/static/sentry/app/components/charts/components/toolBox.jsx
new file mode 100644
index 0000000000..1f5a006a9f
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/components/toolBox.jsx
@@ -0,0 +1,31 @@
+import 'echarts/lib/component/toolbox';
+
+function getFeatures({dataZoom, ...features} = {}) {
+  return {
+    ...(dataZoom
+      ? {
+          dataZoom: {
+            yAxisIndex: 'none',
+            title: {
+              zoom: 'zoom',
+              back: 'undo',
+              restore: 'reset',
+            },
+            ...dataZoom,
+          },
+        }
+      : {}),
+    ...features,
+  };
+}
+
+export default function ToolBox(options, features = {}) {
+  return {
+    right: 0,
+    top: 0,
+    itemSize: 20,
+
+    feature: getFeatures(features),
+    ...options,
+  };
+}
diff --git a/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx b/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
index 1110990169..6a3ccc8fe0 100644
--- a/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
+++ b/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
@@ -24,7 +24,7 @@ function formatAxisLabel(value, isTimestamp) {
     return value;
   }
 
-  return moment(value).format('MMM D, YYYY');
+  return moment.utc(value).format('MMM D, YYYY');
 }
 
 function getFormatter({filter, isGroupedByDate, truncate}) {
diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index 7b82a8c851..652a1de56b 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -704,6 +704,104 @@ export const EChartsLegend = PropTypes.shape({
   truncate: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),
 });
 
+// See https://ecomfe.github.io/echarts-doc/public/en/option.html#dataZoom
+export const EChartsDataZoom = PropTypes.arrayOf(
+  PropTypes.oneOfType([
+    PropTypes.shape({
+      type: PropTypes.oneOf(['inside']),
+    }),
+    PropTypes.shape({
+      type: PropTypes.oneOf(['slider']),
+    }),
+  ])
+);
+
+// See https://ecomfe.github.io/echarts-doc/public/en/option.html#toolbox
+export const EChartsToolBox = PropTypes.shape({
+  // Component ID, not specified by default. If specified, it can be used to refer the component in option or API.
+  id: PropTypes.string,
+
+  // Whether to show toolbox component.
+  show: PropTypes.bool,
+
+  // The layout orientation of toolbox's icon.
+  orient: PropTypes.oneOf(['horizontal', 'vertical']),
+
+  // The size of toolbox's icon.
+  itemSize: PropTypes.number,
+
+  // The gap between each icon of toolbox. It is horizontal gap in horizontal layout, while vertical gap in vertical layout.
+  itemGap: PropTypes.number,
+
+  // Whether to show the title of each tool icon when mouse hovers.
+  showTitle: PropTypes.bool,
+
+  // The configuration item for each tool.
+  // Besides the tools we provide, user-defined toolbox is also supported.
+  // Notes: User-defined tool name could only start with my, like myTool1 and myTool2 in the below example:
+
+  // {
+  // toolbox: {
+  // feature: {
+  // myTool1: {
+  // show: true,
+  // title: 'custom extension method 1',
+  // icon: 'path://M432.45,595.444c0,2.177-4.661,6.82-11.305,6.82c-6.475,0-11.306-4.567-11.306-6.82s4.852-6.812,11.306-6.812C427.841,588.632,432.452,593.191,432.45,595.444L432.45,595.444z M421.155,589.876c-3.009,0-5.448,2.495-5.448,5.572s2.439,5.572,5.448,5.572c3.01,0,5.449-2.495,5.449-5.572C426.604,592.371,424.165,589.876,421.155,589.876L421.155,589.876z M421.146,591.891c-1.916,0-3.47,1.589-3.47,3.549c0,1.959,1.554,3.548,3.47,3.548s3.469-1.589,3.469-3.548C424.614,593.479,423.062,591.891,421.146,591.891L421.146,591.891zM421.146,591.891',
+  // onclick: function (){
+  // alert('myToolHandler1')
+  // }
+  // },
+  // myTool2: {
+  // show: true,
+  // title: 'custom extension method',
+  // icon: 'image://http://echarts.baidu.com/images/favicon.png',
+  // onclick: function (){
+  // alert('myToolHandler2')
+  // }
+  // }
+  // }
+  // }
+  // }
+  feature: PropTypes.object,
+
+  // The style setting of Shared icon.
+  iconStyle: PropTypes.object,
+
+  // zlevel value of all graghical elements in .
+  // zlevel is used to make layers with Canvas. Graphical elements with different zlevel values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a seperate zlevel. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid crash.
+  // Canvases with bigger zlevel will be placed on Canvases with smaller zlevel.
+  zlevel: PropTypes.number,
+
+  // z value of all graghical elements in , which controls order of drawing graphical components. Components with smaller z values may be overwritten by those with larger z values.
+  // z has a lower priority to zlevel, and will not create new Canvas.
+  z: PropTypes.number,
+
+  // Distance between toolbox component and the left side of the container.
+  // left value can be instant pixel value like 20; it can also be percentage value relative to container width like '20%'; and it can also be 'left', 'center', or 'right'.
+  // If the left value is set to be 'left', 'center', or 'right', then the component will be aligned automatically based on position.
+  left: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
+
+  // Distance between toolbox component and the top side of the container.
+  // top value can be instant pixel value like 20; it can also be percentage value relative to container width like '20%'; and it can also be 'top', 'middle', or 'bottom'.
+  // If the left value is set to be 'top', 'middle', or 'bottom', then the component will be aligned automatically based on position.
+  top: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
+
+  // Distance between toolbox component and the right side of the container.
+  // right value can be instant pixel value like 20; it can also be percentage value relative to container width like '20%'.
+  // Adaptive by default.
+  right: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
+
+  // Distance between toolbox component and the bottom side of the container.
+  // bottom value can be instant pixel value like 20; it can also be percentage value relative to container width like '20%'.
+  // Adaptive by default.
+  bottom: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
+
+  // Width of toolbox component. Adaptive by default.
+  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
+  // Height of toolbox component. Adaptive by default.
+  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
+});
+
 export const SeriesUnit = PropTypes.shape({
   seriesName: PropTypes.string,
   data: PropTypes.arrayOf(
@@ -757,6 +855,8 @@ let SentryTypes = {
   EChartsTooltip,
   EChartsGrid,
   EChartsLegend,
+  EChartsDataZoom,
+  EChartsToolBox,
 };
 
 export default SentryTypes;
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
index 361a530a78..ca618e8b12 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
@@ -1,14 +1,12 @@
-import {Link} from 'react-router';
 import React from 'react';
-import styled from 'react-emotion';
 
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import {Panel, PanelHeader} from 'app/components/panels';
+import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
-import DateTime from 'app/components/dateTime';
-import IdBadge from 'app/components/idBadge';
+import EventsChart from 'app/views/organizationEvents/eventsChart';
+import EventsTable from 'app/views/organizationEvents/eventsTable';
 import Pagination from 'app/components/pagination';
 import SentryTypes from 'app/sentryTypes';
-import Tooltip from 'app/components/tooltip';
 import withOrganization from 'app/utils/withOrganization';
 
 class OrganizationEvents extends AsyncView {
@@ -23,65 +21,33 @@ class OrganizationEvents extends AsyncView {
     );
   }
 
-  getTitle() {
-    return `${this.props.organization.slug} Events`;
-  }
-
   getEndpoints() {
-    return [['events', `/organizations/${this.props.organization.slug}/events/`]];
+    const {organization, location} = this.props;
+
+    return [
+      ['events', `/organizations/${organization.slug}/events/`, {query: location.query}],
+    ];
   }
 
-  getEventTitle(event) {
-    const {organization} = this.props;
-    const project = organization.projects.find(({id}) => id === event.projectID);
-    return (
-      <Link to={`/${organization.slug}/${project.slug}/issues/?query=${event.eventID}`}>
-        {event.message.split('\n')[0].substr(0, 100)}
-      </Link>
-    );
+  getTitle() {
+    return `${this.props.organization.slug} Events`;
   }
 
   renderBody() {
     const {organization} = this.props;
-    const {events, eventsPageLinks} = this.state;
+    const {loading, events, eventsPageLinks} = this.state;
+
     return (
       <React.Fragment>
         <Panel>
           <PanelHeader hasButtons>
-            Events
+            {t('Events')}
             {this.renderSearchInput({})}
           </PanelHeader>
-          <Wrapper>
-            <Table>
-              <tbody>
-                {events.map((event, eventIdx) => {
-                  const project = this.projectsMap.get(event.projectID);
-                  return (
-                    <tr key={event.eventID}>
-                      <Td>
-                        <Link to={`/${organization.slug}/${project.slug}/`}>
-                          <Tooltip title={project.slug}>
-                            <IdBadge project={project} hideName />
-                          </Tooltip>
-                        </Link>
-                      </Td>
 
-                      <Td>
-                        <EventTitle>{this.getEventTitle(event)}</EventTitle>
-                      </Td>
+          <EventsChart organization={organization} />
 
-                      <Td>
-                        <IdBadge user={event.user} hideEmail />
-                        <DateRow>
-                          <DateTime date={new Date(event.dateCreated)} />
-                        </DateRow>
-                      </Td>
-                    </tr>
-                  );
-                })}
-              </tbody>
-            </Table>
-          </Wrapper>
+          <EventsTable loading={loading} events={events} organization={organization} />
         </Panel>
 
         <Pagination pageLinks={eventsPageLinks} />
@@ -89,36 +55,6 @@ class OrganizationEvents extends AsyncView {
     );
   }
 }
-export default withOrganization(OrganizationEvents);
-
-const Wrapper = styled(PanelBody)`
-  overflow-x: scroll;
-  padding: 0;
-`;
-const Table = styled('table')`
-  border: 0;
-  width: 100%;
-  max-width: 100%;
-  margin: 0;
-`;
-
-const Td = styled('td')`
-  padding: 10px 15px;
-  white-space: nowrap;
-  border-top: 1px solid ${p => p.theme.borderLight};
-  vertical-align: middle;
 
-  tr:first-child & {
-    border-top: none;
-  }
-`;
-
-const DateRow = styled('div')`
-  font-size: 0.85em;
-  opacity: 0.8;
-`;
-
-const EventTitle = styled('div')`
-  font-size: ${p => p.theme.fontSizeLarge};
-  font-weight: 600;
-`;
+export default withOrganization(OrganizationEvents);
+export {OrganizationEvents};
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx b/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
new file mode 100644
index 0000000000..570810f683
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
@@ -0,0 +1,141 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import moment from 'moment';
+
+import {HealthRequestWithParams} from 'app/views/organizationHealth/util/healthRequest';
+import {t} from 'app/locale';
+import AreaChart from 'app/components/charts/areaChart';
+import DataZoom from 'app/components/charts/components/dataZoom';
+import EventsContext from 'app/views/organizationEvents/eventsContext';
+import SentryTypes from 'app/sentryTypes';
+import ToolBox from 'app/components/charts/components/toolBox';
+import withApi from 'app/utils/withApi';
+
+const EventRequest = withApi(
+  class EventRequest extends React.Component {
+    render() {
+      return (
+        <EventsContext.Consumer>
+          {context => (
+            <HealthRequestWithParams
+              {...context}
+              projects={context.project || []}
+              environments={context.environment || []}
+              {...this.props}
+            />
+          )}
+        </EventsContext.Consumer>
+      );
+    }
+  }
+);
+
+class EventsChart extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization,
+    actions: PropTypes.object,
+  };
+
+  constructor(props) {
+    super(props);
+  }
+
+  handleDataZoom = (evt, chart) => {
+    const model = chart.getModel();
+    const {xAxis, series} = model.option;
+    const axis = xAxis[0];
+    const [firstSeries] = series;
+
+    const start = moment(firstSeries.data[axis.rangeStart][0]).format(
+      moment.HTML5_FMT.DATETIME_LOCAL_MS
+    );
+
+    // Add a day so we go until the end of the day (e.g. next day at midnight)
+    const end = moment(firstSeries.data[axis.rangeEnd][0])
+      .add(1, 'day')
+      .subtract(1, 'second')
+      .format(moment.HTML5_FMT.DATETIME_LOCAL_MS);
+
+    this.props.actions.updateParams({
+      statsPeriod: null,
+      start,
+      end,
+    });
+  };
+
+  handleChartClick = series => {
+    if (!series) {
+      return;
+    }
+
+    const firstSeries = series;
+
+    const date = moment(firstSeries.name);
+    const start = date.format(moment.HTML5_FMT.DATETIME_LOCAL_MS);
+
+    // Add a day so we go until the end of the day (e.g. next day at midnight)
+    const end = date
+      .add(1, 'day')
+      .subtract(1, 'second')
+      .format(moment.HTML5_FMT.DATETIME_LOCAL_MS);
+
+    this.props.actions.updateParams({
+      statsPeriod: null,
+      start,
+      end,
+    });
+  };
+
+  render() {
+    const {organization} = this.props;
+
+    return (
+      <div>
+        <EventRequest
+          organization={organization}
+          tag="error.handled"
+          includeTimeseries
+          interval="1d"
+          showLoading
+          getCategory={() => t('Event')}
+        >
+          {({timeseriesData, previousTimeseriesData}) => (
+            <AreaChart
+              isGroupedByDate
+              series={timeseriesData}
+              previousPeriod={previousTimeseriesData}
+              grid={{
+                left: '18px',
+                right: '18px',
+              }}
+              dataZoom={DataZoom()}
+              toolBox={ToolBox(
+                {},
+                {
+                  dataZoom: {},
+                  restore: {},
+                }
+              )}
+              onEvents={{
+                datazoom: this.handleDataZoom,
+                click: this.handleChartClick,
+              }}
+            />
+          )}
+        </EventRequest>
+      </div>
+    );
+  }
+}
+
+class EventsChartContainer extends React.Component {
+  render() {
+    return (
+      <EventsContext.Consumer>
+        {context => <EventsChart {...context} {...this.props} />}
+      </EventsContext.Consumer>
+    );
+  }
+}
+export default EventsChartContainer;
+export {EventsChart};
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/eventsContext.jsx b/src/sentry/static/sentry/app/views/organizationEvents/eventsContext.jsx
index d10fefd2db..6db2cc98dd 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/eventsContext.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/eventsContext.jsx
@@ -1,9 +1,11 @@
 import React from 'react';
 
 const EventsContext = React.createContext({
-  projects: [],
-  environments: [],
-  daterange: '7d',
+  project: [],
+  environment: [],
+  period: '7d',
+  start: null,
+  end: null,
 });
 
 export default EventsContext;
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx b/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx
new file mode 100644
index 0000000000..7902ab204b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx
@@ -0,0 +1,126 @@
+import {withRouter, Link} from 'react-router';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {PanelBody} from 'app/components/panels';
+import DateTime from 'app/components/dateTime';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
+import EventsContext from 'app/views/organizationEvents/eventsContext';
+import IdBadge from 'app/components/idBadge';
+import SentryTypes from 'app/sentryTypes';
+import Tooltip from 'app/components/tooltip';
+
+class EventsTable extends React.Component {
+  static propTypes = {
+    events: PropTypes.array,
+    organization: SentryTypes.Organization,
+  };
+
+  constructor(props) {
+    super(props);
+    this.projectsMap = new Map(
+      props.organization.projects.map(project => [project.id, project])
+    );
+  }
+
+  getEventTitle(event) {
+    const {organization} = this.props;
+    const project = this.projectsMap.get(event.projectID);
+    const trimmedMessage = event.message.split('\n')[0].substr(0, 100);
+
+    if (!project) {
+      return trimmedMessage;
+    }
+
+    return (
+      <Link to={`/${organization.slug}/${project.slug}/issues/?query=${event.eventID}`}>
+        {trimmedMessage}
+      </Link>
+    );
+  }
+
+  render() {
+    const {events, organization} = this.props;
+    const hasEvents = events && !!events.length;
+
+    return (
+      <React.Fragment>
+        {!hasEvents && <EmptyStateWarning>No events</EmptyStateWarning>}
+        {hasEvents && (
+          <Wrapper>
+            <Table>
+              <tbody>
+                {events.map((event, eventIdx) => {
+                  const project = this.projectsMap.get(event.projectID);
+                  return (
+                    <tr key={`${project.slug}-${event.eventID}`}>
+                      <Td>
+                        <Link to={`/${organization.slug}/${project.slug}/`}>
+                          <Tooltip title={project.slug}>
+                            <IdBadge project={project} hideName />
+                          </Tooltip>
+                        </Link>
+                      </Td>
+
+                      <Td>
+                        <EventTitle>{this.getEventTitle(event)}</EventTitle>
+                      </Td>
+
+                      <Td>
+                        <IdBadge user={event.user} hideEmail />
+                        <DateRow>
+                          <DateTime date={new Date(event.dateCreated)} />
+                        </DateRow>
+                      </Td>
+                    </tr>
+                  );
+                })}
+              </tbody>
+            </Table>
+          </Wrapper>
+        )}
+      </React.Fragment>
+    );
+  }
+}
+
+class EventsTableContainer extends React.Component {
+  render() {
+    return (
+      <EventsContext.Consumer>
+        {context => <EventsTable {...context} {...this.props} />}
+      </EventsContext.Consumer>
+    );
+  }
+}
+export default withRouter(EventsTableContainer);
+export {EventsTable};
+
+const Wrapper = styled(PanelBody)`
+  overflow-x: auto;
+  padding: 0;
+`;
+const Table = styled('table')`
+  border: 0;
+  width: 100%;
+  max-width: 100%;
+  margin: 0;
+`;
+
+const Td = styled('td')`
+  padding: 10px 15px;
+  white-space: nowrap;
+  border-top: 1px solid ${p => p.theme.borderLight};
+  vertical-align: middle;
+`;
+
+const DateRow = styled('div')`
+  font-size: 0.85em;
+  opacity: 0.8;
+`;
+
+const EventTitle = styled('div')`
+  font-size: ${p => p.theme.fontSizeLarge};
+  font-weight: 600;
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
index 075618560c..e264cf980d 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
@@ -4,6 +4,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
+import {defined} from 'app/utils';
 import EventsContext from 'app/views/organizationEvents/eventsContext';
 import Feature from 'app/components/acl/feature';
 import HeaderSeparator from 'app/components/organizations/headerSeparator';
@@ -20,13 +21,34 @@ class OrganizationEventsContainer extends React.Component {
     router: PropTypes.object,
   };
 
-  static getDerivedStateFromProps(props, state) {
+  static getInitialStateFromRouter(props) {
     const {query} = props.router.location;
+    const hasAbsolute = !!query.start && !!query.end;
+    let project = [];
+    let environment = query.environment || [];
+
+    if (defined(query.project) && Array.isArray(query.project)) {
+      project = query.project.map(p => parseInt(p, 10));
+    } else if (defined(query.project)) {
+      const projectIdInt = parseInt(query.project, 10);
+      project = isNaN(projectIdInt) ? [] : [projectIdInt];
+    }
+
+    if (defined(query.environment) && !Array.isArray(query.environment)) {
+      environment = [query.environment];
+    }
+
+    const values = {
+      project,
+      environment,
+      period: query.period || (hasAbsolute ? null : '7d'),
+      start: query.start || null,
+      end: query.end || null,
+    };
 
     return {
-      projects: query.projects || [],
-      environments: query.environments || [],
-      period: query.period || '7d',
+      ...values,
+      queryValues: {...values},
     };
   }
 
@@ -37,61 +59,102 @@ class OrganizationEventsContainer extends React.Component {
       updateParams: this.updateParams,
     };
 
-    this.state = {};
+    this.state = OrganizationEventsContainer.getInitialStateFromRouter(props);
   }
 
   updateParams = obj => {
     const {router} = this.props;
+    // Reset cursor when changing parameters
+    // eslint-disable-next-line no-unused-vars
+    const {cursor, ...oldQuery} = router.location.query;
+    const newQuery = {
+      ...oldQuery,
+      ...obj,
+    };
     router.push({
       pathname: router.location.pathname,
-      query: {
-        ...router.location.query,
-        ...obj,
-      },
+      query: newQuery,
     });
   };
 
   handleChangeProjects = projects => {
-    this.updateParams({projects});
+    this.setState(state => ({
+      project: projects,
+    }));
   };
 
   handleChangeEnvironments = environments => {
-    this.updateParams({environments});
+    this.setState(state => ({
+      environment: environments,
+    }));
+  };
+
+  handleChangeTime = ({start, end, relative}) => {
+    this.setState({start, end, period: relative});
   };
 
-  handleChangeTime = period => {
-    this.updateParams({period});
+  handleUpdate = type => {
+    this.setState(state => {
+      let newValueObj = {};
+
+      if (type === 'period') {
+        newValueObj = {
+          period: state.period,
+          start: state.start,
+          end: state.end,
+        };
+      } else {
+        newValueObj = {[type]: state[type]};
+      }
+
+      this.updateParams(newValueObj);
+
+      return {
+        queryValues: {
+          ...state.queryValues,
+          ...newValueObj,
+        },
+      };
+    });
   };
 
   render() {
-    let {organization, children} = this.props;
+    const {organization, children} = this.props;
+    const {period, start, end} = this.state;
 
-    let projects =
+    const projects =
       organization.projects && organization.projects.filter(({isMember}) => isMember);
 
     return (
       <Feature feature={['events-stream']} renderNoFeatureMessage>
-        <EventsContext.Provider value={{actions: this.actions, ...this.state}}>
+        <EventsContext.Provider
+          value={{actions: this.actions, ...this.state.queryValues}}
+        >
           <Content>
             <Header>
               <MultipleProjectSelector
                 anchorRight
                 projects={projects}
-                value={this.state.projects}
+                value={this.state.project}
                 onChange={this.handleChangeProjects}
+                onUpdate={this.handleUpdate.bind(this, 'project')}
               />
               <HeaderSeparator />
               <MultipleEnvironmentSelector
                 organization={organization}
-                value={this.state.environments}
+                value={this.state.environment}
                 onChange={this.handleChangeEnvironments}
+                onUpdate={this.handleUpdate.bind(this, 'environment')}
               />
               <HeaderSeparator />
               <TimeRangeSelector
-                showAbsolute={false}
+                showAbsolute
                 showRelative
-                relative={this.state.period}
+                relative={period}
+                start={start}
+                end={end}
                 onChange={this.handleChangeTime}
+                onUpdate={this.handleUpdate.bind(this, 'period')}
               />
             </Header>
             <Body>{children}</Body>
@@ -118,6 +181,8 @@ const Header = styled(Flex)`
 `;
 
 const Body = styled('div')`
+  display: flex;
+  flex-direction: column;
   flex: 1;
   padding: ${space(3)};
 `;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/util/healthRequest.jsx b/src/sentry/static/sentry/app/views/organizationHealth/util/healthRequest.jsx
index aab02a116a..17b89494d3 100644
--- a/src/sentry/static/sentry/app/views/organizationHealth/util/healthRequest.jsx
+++ b/src/sentry/static/sentry/app/views/organizationHealth/util/healthRequest.jsx
@@ -35,12 +35,23 @@ class HealthRequestWithParams extends React.Component {
     environments: PropTypes.arrayOf(PropTypes.string),
 
     /**
-     * Time period in query. Currently only supports relative dates
+     * Relative time period for query.
+     *
+     * Use `start` and `end` for absolute dates.
      *
      * e.g. 24h, 7d, 30d
      */
     period: PropTypes.string,
 
+    /**
+     * Absolute start date for query
+     */
+    start: PropTypes.string,
+    /**
+     * Absolute end date for query
+     */
+    end: PropTypes.string,
+
     /**
      * Interval to group results in
      *
@@ -100,6 +111,8 @@ class HealthRequestWithParams extends React.Component {
 
   static defaultProps = {
     period: '7d',
+    start: null,
+    end: null,
     interval: '1d',
     limit: 15,
     getCategory: i => i,
diff --git a/tests/js/helpers/select.js b/tests/js/helpers/select.js
index c7a5a5b87d..a97a0e554a 100644
--- a/tests/js/helpers/select.js
+++ b/tests/js/helpers/select.js
@@ -17,6 +17,10 @@ export function openMenu(wrapper, options = {}) {
   return wrapper;
 }
 
+export function clearValue(wrapper) {
+  wrapper.find('.Select-clear-zone').simulate('mouseDown', {button: 0});
+}
+
 export function findOption(wrapper, {value, label} = {}, options) {
   let selector = getSelector(options);
   let valueSelector = !!value ? 'value' : 'label';
diff --git a/tests/js/spec/views/organizationEvents/events.spec.jsx b/tests/js/spec/views/organizationEvents/events.spec.jsx
index 651a7f3fc8..e977979382 100644
--- a/tests/js/spec/views/organizationEvents/events.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/events.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
-import OrganizationEvents from 'app/views/organizationEvents/events';
+import {OrganizationEvents} from 'app/views/organizationEvents/events';
 
 jest.mock('app/utils/withLatestContext');
 
@@ -12,14 +12,21 @@ describe('OrganizationEventsErrors', function() {
     url: '/organizations/org-slug/events/',
     body: (url, opts) => [TestStubs.OrganizationEvent(opts.query)],
   });
+  const healthGraphMock = MockApiClient.addMockResponse({
+    url: '/organizations/org-slug/health/graph/',
+    body: (url, opts) => {
+      return TestStubs.HealthGraph(opts.query);
+    },
+  });
 
   it('renders events table', async function() {
     let wrapper = mount(
-      <OrganizationEvents organization={org} />,
+      <OrganizationEvents organization={org} location={{query: {}}} />,
       TestStubs.routerContext()
     );
     await tick();
     wrapper.update();
+    expect(healthGraphMock).toHaveBeenCalled();
     expect(wrapper.find('LoadingIndicator')).toHaveLength(0);
     expect(wrapper.find('IdBadge')).toHaveLength(2);
   });
diff --git a/tests/js/spec/views/organizationEvents/index.spec.jsx b/tests/js/spec/views/organizationEvents/index.spec.jsx
index 24e728625e..4656d6c3b4 100644
--- a/tests/js/spec/views/organizationEvents/index.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/index.spec.jsx
@@ -4,7 +4,7 @@ import {OrganizationEventsContainer} from 'app/views/organizationEvents';
 import {mount} from 'enzyme';
 import {setActiveOrganization} from 'app/actionCreators/organizations';
 
-import {selectByLabel} from '../../../helpers/select';
+import {clearValue, selectByLabel} from '../../../helpers/select';
 
 describe('OrganizationEvents', function() {
   let wrapper;
@@ -46,27 +46,59 @@ describe('OrganizationEvents', function() {
   });
 
   it('updates router when changing environments', async function() {
+    expect(wrapper.state('environment')).toEqual([]);
+
     wrapper.find('MultipleEnvironmentSelector .dropdown-actor').simulate('click');
     await tick();
     wrapper.update();
 
     selectByLabel(wrapper, 'production', {control: true, name: 'environments'});
+    // This should update state, but not route or context
+    expect(wrapper.state('environment')).toEqual(['production']);
+
+    // Click "Update"
+    wrapper.find('Button[data-test-id="update-envs"]').simulate('click');
     expect(router.push).toHaveBeenCalledWith({
       pathname: '/organizations/org-slug/events/',
       query: {
-        environments: ['production'],
+        environment: ['production'],
       },
     });
+    expect(wrapper.state('queryValues')).toEqual(
+      expect.objectContaining({environment: ['production']})
+    );
+
+    // Select a second environment, "staging"
     selectByLabel(wrapper, 'staging', {control: true, name: 'environments'});
+    expect(wrapper.state('environment')).toEqual(['production', 'staging']);
+
+    wrapper.find('Button[data-test-id="update-envs"]').simulate('click');
     expect(router.push).toHaveBeenCalledWith({
       pathname: '/organizations/org-slug/events/',
       query: {
-        environments: ['production', 'staging'],
+        environment: ['production', 'staging'],
+      },
+    });
+    expect(wrapper.state('queryValues')).toEqual(
+      expect.objectContaining({environment: ['production', 'staging']})
+    );
+
+    // Can clear
+    clearValue(wrapper);
+    expect(wrapper.state('environment')).toEqual([]);
+    wrapper.find('Button[data-test-id="update-envs"]').simulate('click');
+    expect(wrapper.state('queryValues')).toEqual(
+      expect.objectContaining({environment: []})
+    );
+    expect(router.push).toHaveBeenCalledWith({
+      pathname: '/organizations/org-slug/events/',
+      query: {
+        environment: [],
       },
     });
   });
 
-  it('updates component state when router is updated', async function() {
+  it('does not update component state when router is changed', async function() {
     wrapper = mount(
       <OrganizationEventsContainer router={router} organization={organization}>
         <div />
@@ -77,30 +109,19 @@ describe('OrganizationEvents', function() {
         },
       ])
     );
-    expect(wrapper.state('environments')).toEqual([]);
-
-    wrapper.setProps({
-      router: {
-        location: {
-          pathname: '/organizations/org-slug/events/',
-          query: {
-            environments: ['production'],
-          },
-        },
-      },
-    });
-    expect(wrapper.state('environments')).toEqual(['production']);
+    expect(wrapper.state('environment')).toEqual([]);
 
+    // This shouldn't happen, we only use URL params for initial state
     wrapper.setProps({
       router: {
         location: {
           pathname: '/organizations/org-slug/events/',
           query: {
-            environments: ['production', 'staging'],
+            environment: ['production'],
           },
         },
       },
     });
-    expect(wrapper.state('environments')).toEqual(['production', 'staging']);
+    expect(wrapper.state('environment')).toEqual([]);
   });
 });
