commit b096113683d6ba6f31bacbc35496ee3461a5332c
Author: David Cramer <dcramer@gmail.com>
Date:   Wed May 16 16:49:25 2012 -0700

    Correct CORS support to match documentation

diff --git a/sentry/utils/http.py b/sentry/utils/http.py
index 607145283a..6593ee8c17 100644
--- a/sentry/utils/http.py
+++ b/sentry/utils/http.py
@@ -5,6 +5,7 @@ sentry.utils.http
 :copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+import itertools
 import urllib
 from urlparse import urlparse
 
@@ -49,21 +50,34 @@ def is_same_domain(url1, url2):
     return url1.netloc == url2.netloc
 
 
-def apply_access_control_headers(response, project=None):
+def is_valid_origin(origin, project=None):
+    (settings.ALLOW_ORIGIN or '').split(' ')
+    if settings.ALLOW_ORIGIN == '*':
+        return True
+
+    origin = origin.lower()
+    if origin in (settings.ALLOW_ORIGIN or '').split(' '):
+        return True
+
+    if not project:
+        return False
+
+    optval = get_option('sentry:origins', project)
+    if not optval:
+        return False
+
+    return origin not in itertools.imap(unicode.lower, unicode(optval))
+
+
+def apply_access_control_headers(response, origin):
     """
     Provides the Access-Control headers to enable cross-site HTTP requests. You
     can find more information about these headers here:
     https://developer.mozilla.org/En/HTTP_access_control#Simple_requests
     """
-    origin = settings.ALLOW_ORIGIN or ''
-    if project and origin is not '*':
-        optval = get_option('sentry:origins', project)
-        if optval:
-            origin = ('%s %s' % (origin, ' '.join(optval))).strip()
-
     if origin:
         response['Access-Control-Allow-Origin'] = origin
         response['Access-Control-Allow-Headers'] = 'X-Sentry-Auth, Authentication'
-        response['Access-Control-Allow-Methods'] = 'POST'
+        response['Access-Control-Allow-Methods'] = 'POST, OPTIONS'
 
     return response
diff --git a/sentry/web/api.py b/sentry/web/api.py
index f4c2458451..6f35c0c800 100644
--- a/sentry/web/api.py
+++ b/sentry/web/api.py
@@ -22,7 +22,7 @@ from sentry.coreapi import project_from_auth_vars, project_from_id, \
   insert_data_to_database, APIError, APIUnauthorized, extract_auth_vars
 from sentry.models import Group, GroupBookmark, Project, View
 from sentry.utils import json
-from sentry.utils.http import is_same_domain, apply_access_control_headers
+from sentry.utils.http import is_same_domain, is_valid_origin, apply_access_control_headers
 from sentry.web.decorators import has_access
 from sentry.web.frontend.groups import _get_group_list
 from sentry.web.helpers import render_to_response, render_to_string, get_project_list
@@ -77,6 +77,13 @@ def store(request, project_id=None):
     else:
         project = None
 
+    if 'HTTP_ORIGIN' in request.META:
+        origin = request.META.get('HTTP_ORIGIN', '')
+        if not is_valid_origin(origin):
+            raise APIError('Invalid origin')
+    else:
+        origin = None
+
     if request.method == 'POST':
         try:
             auth_vars = extract_auth_vars(request)
@@ -100,10 +107,8 @@ def store(request, project_id=None):
             if auth_vars:
                 # We only require a signature if a referrer was not set
                 # (this is restricted via the CORS headers)
-                origin = request.META.get('HTTP_ORIGIN')
-
                 project_ = project_from_auth_vars(auth_vars, data,
-                    require_signature=bool(not origin))
+                    require_signature=bool(origin is None))
 
                 if not project:
                     project = project_
@@ -141,8 +146,8 @@ def store(request, project_id=None):
             response = HttpResponse('')
     else:
         # OPTIONS
-        response = HttpResponse('')
-    return apply_access_control_headers(response, project)
+        response = apply_access_control_headers(HttpResponse(), origin)
+    return response
 
 
 @csrf_exempt
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index 178e6648e4..0c28d962fc 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -4,7 +4,8 @@ from __future__ import absolute_import
 
 from django.http import HttpResponse
 
-from sentry.utils.http import is_same_domain, apply_access_control_headers
+from sentry.utils.http import is_same_domain, apply_access_control_headers, \
+  is_valid_origin
 
 from tests.base import TestCase
 
@@ -34,7 +35,7 @@ class AccessControlTestCase(TestCase):
     def test_allow_origin_none(self):
         """If ALLOW_ORIGIN is None, the headers should not be added"""
         with self.Settings(SENTRY_ALLOW_ORIGIN=None):
-            response = apply_access_control_headers(HttpResponse())
+            response = apply_access_control_headers(HttpResponse(), None)
             self.assertEqual(response.get('Access-Control-Allow-Origin', None),
                              None)
             self.assertEqual(response.get('Access-Control-Allow-Headers', None),
@@ -44,38 +45,41 @@ class AccessControlTestCase(TestCase):
 
     def test_allow_origin(self):
         with self.Settings(SENTRY_ALLOW_ORIGIN="http://foo.example"):
-            response = apply_access_control_headers(HttpResponse())
+            response = apply_access_control_headers(HttpResponse(), "http://foo.example")
             self.assertEqual(response.get('Access-Control-Allow-Origin', None),
                              "http://foo.example")
             self.assertEqual(response.get('Access-Control-Allow-Headers', None),
                              "X-Sentry-Auth, Authentication")
             self.assertEqual(response.get('Access-Control-Allow-Methods', None),
-                             "POST")
+                             "POST, OPTIONS")
 
-    def test_allow_origin_project(self):
+
+class IsValidOriginTestCase(TestCase):
+
+    def test_project(self):
         from sentry.models import Project, ProjectOption
         project = Project.objects.get()
         ProjectOption.objects.create(project=project, key='sentry:origins', value=['http://foo.example'])
 
         with self.Settings(SENTRY_ALLOW_ORIGIN=None):
-            response = apply_access_control_headers(HttpResponse(), project)
-            self.assertEqual(response.get('Access-Control-Allow-Origin', None),
-                             "http://foo.example")
-            self.assertEqual(response.get('Access-Control-Allow-Headers', None),
-                             "X-Sentry-Auth, Authentication")
-            self.assertEqual(response.get('Access-Control-Allow-Methods', None),
-                             "POST")
+            self.assertTrue(is_valid_origin('http://example.com', project))
 
-    def test_allow_origin_project_and_setting(self):
+    def test_project_and_setting(self):
         from sentry.models import Project, ProjectOption
         project = Project.objects.get()
         ProjectOption.objects.create(project=project, key='sentry:origins', value=['http://foo.example'])
 
         with self.Settings(SENTRY_ALLOW_ORIGIN='http://example.com'):
-            response = apply_access_control_headers(HttpResponse(), project)
-            self.assertEqual(response.get('Access-Control-Allow-Origin', None),
-                             "http://example.com http://foo.example")
-            self.assertEqual(response.get('Access-Control-Allow-Headers', None),
-                             "X-Sentry-Auth, Authentication")
-            self.assertEqual(response.get('Access-Control-Allow-Methods', None),
-                             "POST")
+            self.assertTrue(is_valid_origin('http://example.com', project))
+
+    def test_setting_empty(self):
+        with self.Settings(SENTRY_ALLOW_ORIGIN=None):
+            self.assertFalse(is_valid_origin('http://example.com'))
+
+    def test_setting_all(self):
+        with self.Settings(SENTRY_ALLOW_ORIGIN='*'):
+            self.assertTrue(is_valid_origin('http://example.com'))
+
+    def test_setting_uri(self):
+        with self.Settings(SENTRY_ALLOW_ORIGIN='http://example.com'):
+            self.assertTrue(is_valid_origin('http://example.com'))
