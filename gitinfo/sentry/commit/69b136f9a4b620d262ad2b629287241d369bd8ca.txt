commit 69b136f9a4b620d262ad2b629287241d369bd8ca
Author: Alex Hofsteede <alex@hofsteede.com>
Date:   Tue Oct 31 16:42:43 2017 -0600

    feat(schemas): Post raw event bodies to redis pubsub. (#6483)
    
    This is to enable offline testing of event validation with jsonschema.

diff --git a/src/sentry/utils/pubsub.py b/src/sentry/utils/pubsub.py
new file mode 100644
index 0000000000..efe2f442a5
--- /dev/null
+++ b/src/sentry/utils/pubsub.py
@@ -0,0 +1,72 @@
+from __future__ import absolute_import
+
+import redis
+import logging
+import random
+
+from django.conf import settings
+from threading import Thread
+from six.moves.queue import Queue
+
+
+class PubSub():
+    """
+    Poster for a redis pubsub instance.
+
+    put(channel, data) to send data to a redis pubsub
+    channel. Maintains an internal queue for posting, will discard the
+    value if the queue is full or not immediately available.
+    """
+
+    def __init__(self):
+        self._started = False
+
+    def _start(self):
+        if self._started:
+            return True
+
+        connection = getattr(settings, 'PUBSUB_CONNECTION', None)
+        try:
+            host, port, db = connection
+        except (TypeError, ValueError):
+            return False
+        self.rds = redis.StrictRedis(
+            host=host,
+            port=port,
+            db=db,
+            socket_timeout=0.2,
+            socket_connect_timeout=1,
+        )
+
+        self.q = q = Queue(maxsize=100)
+
+        def worker():
+            while True:
+                (channel, data) = q.get()
+                try:
+                    self.rds.publish(channel, data)
+                except Exception:
+                    logger = logging.getLogger('sentry.errors')
+                    logger.debug('could not submit event to pubsub')
+                finally:
+                    q.task_done()
+
+        t = Thread(target=worker)
+        t.setDaemon(True)
+        t.start()
+
+        self._started = True
+        return True
+
+    def put(self, channel, data):
+        if not self._start():
+            return
+
+        sample_channel = getattr(settings, 'PUBSUB_SAMPLING', {}).get(channel, 1.0)
+        if random.random() <= sample_channel:
+            try:
+                self.q.put((channel, data), block=False)
+            except Queue.Full:
+                return
+
+pubsub = PubSub()
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index f19463bb20..58a79630d2 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -34,6 +34,7 @@ from sentry.utils.http import (
     get_origins,
     is_same_domain,
 )
+from sentry.utils.pubsub import pubsub
 from sentry.utils.safe import safe_execute
 from sentry.web.helpers import render_to_response
 
@@ -45,6 +46,8 @@ PIXEL = base64.b64decode('R0lGODlhAQABAAD/ACwAAAAAAQABAAACADs=')
 
 PROTOCOL_VERSIONS = frozenset(('2.0', '3', '4', '5', '6', '7'))
 
+ENABLE_PUBSUB = getattr(settings, 'ENABLE_PUBSUB', False)
+
 
 def api(func):
     @wraps(func)
@@ -306,6 +309,9 @@ class StoreView(APIView):
             # bubble up as an APIError.
             data = None
 
+        if ENABLE_PUBSUB and data is not None:
+            pubsub.put('requests', data)
+
         response_or_event_id = self.process(request, data=data, **kwargs)
         if isinstance(response_or_event_id, HttpResponse):
             return response_or_event_id
