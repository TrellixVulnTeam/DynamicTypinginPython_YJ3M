commit 78831f9c3472293e5347a55da0bd2dbdb7b7a066
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Dec 13 13:06:56 2014 -0800

    Initial team creation wizard

diff --git a/src/sentry/templates/sentry/create-team-step-0.html b/src/sentry/templates/sentry/create-team-step-0.html
new file mode 100644
index 0000000000..58f896e307
--- /dev/null
+++ b/src/sentry/templates/sentry/create-team-step-0.html
@@ -0,0 +1,20 @@
+{% extends "sentry/create-team.html" %}
+
+{% load i18n %}
+{% load crispy_forms_tags %}
+
+{% block inner %}
+  <fieldset class="step step-1">
+    <div class="help-block">
+      {% comment %}
+      A team generally represents a group of people within your organization. It might be something like <strong>"Platform"</strong> or <strong>"API"</strong>, or it could just be a specific product that may (or may not) have sub-projects. You'll be able to select which teams a member in your organization has access to so they also act as ACLs.
+      {% endcomment %}
+      Teams group members' access to a specific focus, e.g. a major product or application that may have sub-projects.
+      <strong>Let’s add our first one:</strong>
+    </div>
+
+    {% for field in form %}
+      {{ field|as_crispy_field }}
+    {% endfor %}
+  </fieldset>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/create-team-step-1.html b/src/sentry/templates/sentry/create-team-step-1.html
new file mode 100644
index 0000000000..aa223be56f
--- /dev/null
+++ b/src/sentry/templates/sentry/create-team-step-1.html
@@ -0,0 +1,14 @@
+{% extends "sentry/create-team.html" %}
+
+{% load i18n %}
+{% load crispy_forms_tags %}
+
+{% block inner %}
+  <fieldset class="step step-1">
+    <h3>Invite Members</h3>
+
+    {% for field in form %}
+      {{ field|as_crispy_field }}
+    {% endfor %}
+  </fieldset>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/create-team-step-2.html b/src/sentry/templates/sentry/create-team-step-2.html
new file mode 100644
index 0000000000..fcfc958d24
--- /dev/null
+++ b/src/sentry/templates/sentry/create-team-step-2.html
@@ -0,0 +1,18 @@
+{% extends "sentry/create-team.html" %}
+
+{% load i18n %}
+{% load crispy_forms_tags %}
+
+{% block inner %}
+  <fieldset class="step step-1">
+    <h3>Project</h3>
+
+    <div class="help-block">
+      Projects generally pair up well with repositories. In addition to thinking about each repository being a project, also consider your environments. You might have something like <strong>"Backend"</strong> or <strong>"Frontend (Staging)"</strong>.
+    </div>
+
+    {% for field in form %}
+      {{ field|as_crispy_field }}
+    {% endfor %}
+  </fieldset>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/create-team.html b/src/sentry/templates/sentry/create-team.html
index a3d267f952..c4b363f763 100644
--- a/src/sentry/templates/sentry/create-team.html
+++ b/src/sentry/templates/sentry/create-team.html
@@ -9,45 +9,34 @@
   <section class="body">
     <div class="create-flow">
       <ul class="steps">
-        <li class="active">1. {% trans "Create a team" %}</li>
-        <li>2. {% trans "Invite members" %}</li>
-        <li>3. {% trans "Add a project" %}</li>
+        <li{% if current_step == 0 %} class="active"{% endif %}>1. {% trans "Create a team" %}</li>
+        <li{% if current_step == 1 %} class="active"{% endif %}>2. {% trans "Invite members" %}</li>
+        <li{% if current_step == 2 %} class="active"{% endif %}>3. {% trans "Add a project" %}</li>
       </ul>
 
-      <form class="form-stacked" action="" method="post">
+      <form class="form-stacked" action="." method="post">
         {% csrf_token %}
-        {{ form|as_crispy_errors }}
-
-        <fieldset>
-          <div class="help-block">
-            {% comment %}
-            A team generally represents a group of people within your organization. It might be something like <strong>"Platform"</strong> or <strong>"API"</strong>, or it could just be a specific product that may (or may not) have sub-projects. You'll be able to select which teams a member in your organization has access to so they also act as ACLs.
-            {% endcomment %}
-            Teams group members' access to a specific focus, e.g. a major product or application that may have sub-projects.
-            <strong>Let’s add our first one:</strong>
-          </div>
 
-          {{ team_form.name|as_crispy_field }}
-        </fieldset>
+        <input type="hidden" name="step" value="{{ current_step }}">
 
-        {% comment %}
-        <fieldset>
-          <h3>Project</h3>
-
-          <div class="help-block">
-            Projects generally pair up well with repositories. In addition to thinking about each repository being a project, also consider your environments. You might have something like <strong>"Backend"</strong> or <strong>"Frontend (Staging)"</strong>.
-          </div>
-
-          {{ project_form.name|as_crispy_field }}
-
-          {{ project_form.platform|as_crispy_field }}
+        {{ form|as_crispy_errors }}
 
-        </fieldset>
-        {% endcomment%}
+        {% block inner %}
+        {% endblock %}
 
         <div class="actions">
-          <button type="submit" class="btn btn-primary">{% trans "Create Team" %}</button>
-          <a href="#" class="btn btn-default">{% trans "Skip this step" %}</a>
+          {% if current_step != first_step %}
+            <button name="op" value="skip" type="submit"
+                    class="btn btn-default">{% trans "Skip this step" %}</button>
+          {% endif %}
+          <div class="pull-right">
+            {% if current_step != first_step %}
+              <button name="op" value="back" type="submit"
+                      class="btn back-step">{% trans "Back" %}</butotn>
+            {% endif %}
+            <button name="op" value="continue" type="submit"
+                    class="btn btn-primary next-step">{% trans "Continue" %}</button>
+          </div>
         </div>
       </form>
     </div>
diff --git a/src/sentry/web/frontend/create_team.py b/src/sentry/web/frontend/create_team.py
index 12aa9c6d4f..f49b4844f7 100644
--- a/src/sentry/web/frontend/create_team.py
+++ b/src/sentry/web/frontend/create_team.py
@@ -1,8 +1,10 @@
 from __future__ import absolute_import
 
+import logging
+
 from django import forms
+from django.contrib import messages
 from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.models import (
@@ -17,78 +19,221 @@ BLANK_CHOICE = [("", "")]
 
 class NewTeamForm(forms.ModelForm):
     name = forms.CharField(label=_('Name'), max_length=200,
-        widget=forms.TextInput(attrs={'placeholder': _('E.g. Platform, API, Website, ...')}))
+        widget=forms.TextInput(attrs={
+            'placeholder': _('E.g. Platform, API, Website, ...'),
+            'required': '',
+        }),
+    )
 
     class Meta:
         fields = ('name',)
         model = Team
 
+    def save(self, actor, organization, ip_address):
+        team = super(NewTeamForm, self).save(commit=False)
+        team.organization = organization
+        team.owner = organization.owner
+        team.save()
+
+        AuditLogEntry.objects.create(
+            organization=organization,
+            actor=actor,
+            ip_address=ip_address,
+            target_object=team.id,
+            event=AuditLogEntryEvent.TEAM_ADD,
+            data=team.get_audit_log_data(),
+        )
+
+        return team
+
+
+class InviteMemberForm(forms.Form):
+    def save(self, actor, team, ip_address):
+        pass
+
 
 class NewProjectForm(forms.ModelForm):
     name = forms.CharField(label=_('Name'), max_length=200,
-        widget=forms.TextInput(attrs={'placeholder': _('e.g. Backend')}))
+        widget=forms.TextInput(attrs={
+            'placeholder': _('e.g. Backend'),
+            'required': '',
+        }),
+    )
     platform = forms.ChoiceField(
         choices=Project._meta.get_field('platform').get_choices(blank_choice=BLANK_CHOICE),
-        widget=forms.Select(attrs={'data-placeholder': _('Select a platform')}),
-        help_text='Your platform choices helps us setup some defaults for this project.',
+        widget=forms.Select(attrs={
+            'data-placeholder': _('Select a platform'),
+            'required': '',
+        }),
+        help_text='Your platform choice helps us setup some defaults for this project.',
     )
 
     class Meta:
         fields = ('name', 'platform')
         model = Project
 
+    def save(self, actor, team, ip_address):
+        project = super(NewProjectForm, self).save(commit=False)
+        project.team = team
+        project.organization = team.organization
+        project.save()
+
+        AuditLogEntry.objects.create(
+            organization=project.organization,
+            actor=actor,
+            ip_address=ip_address,
+            target_object=project.id,
+            event=AuditLogEntryEvent.PROJECT_ADD,
+            data=project.get_audit_log_data(),
+        )
+
+        return project
+
+
+class Step(object):
+    def __init__(self, form, template):
+        self.form = form
+        self.template = template
+
+    def __repr__(self):
+        return '<%s: form=%s template=%s>' % (
+            type(self).__name__, self.form.__name__, self.template
+        )
+
 
 class CreateTeamView(OrganizationView):
     required_access = OrganizationMemberType.ADMIN
 
+    session_key = 'ctwizard'
+
+    form_prefix = 'ctwizard'
+
+    steps = [
+        Step(form=NewTeamForm, template='create-team-step-0.html'),
+        Step(form=InviteMemberForm, template='create-team-step-1.html'),
+        Step(form=NewProjectForm, template='create-team-step-2.html'),
+    ]
+
+    # A lot of this logic is inspired by Django's FormWizard, but unfortunately
+    # using that requires us to inherit from Django's base CBVs which is not
+    # acceptable due to the way we handle base view validation and ACLs.
     def handle(self, request, organization):
         if not can_create_teams(request.user, organization):
             return missing_perm(request, Permissions.ADD_TEAM)
 
-        team_form = NewTeamForm(request.POST or None, prefix='team_')
-        project_form = NewProjectForm(request.POST or None, prefix='project_')
-
-        all_forms = [team_form, project_form]
-
-        if all(f.is_valid() for f in all_forms):
-            team = team_form.save(commit=False)
-            team.organization = organization
-            team.owner = organization.owner
-            team.save()
-
-            AuditLogEntry.objects.create(
-                organization=team.organization,
-                actor=request.user,
-                ip_address=request.META['REMOTE_ADDR'],
-                target_object=team.id,
-                event=AuditLogEntryEvent.TEAM_ADD,
-                data=team.get_audit_log_data(),
-            )
-
-            project = project_form.save(commit=False)
-            project.team = team
-            project.organization = organization
-            project.save()
-
-            AuditLogEntry.objects.create(
-                organization=organization,
-                actor=request.user,
-                ip_address=request.META['REMOTE_ADDR'],
-                target_object=project.id,
-                event=AuditLogEntryEvent.PROJECT_ADD,
-                data=project.get_audit_log_data(),
-            )
-
-            if project.platform not in (None, 'other'):
-                url = reverse('sentry-docs-client', args=[organization.slug, project.slug, project.platform])
+        session_data = request.session.get(self.session_key, {})
+        if request.method == 'GET':
+            logging.debug('GET request; resetting create team form wizard')
+            current_step = 0
+            try:
+                del request.session[self.session_key]
+            except KeyError:
+                pass
+        else:
+            current_step = int(request.POST.get('step', 0))
+
+        last_step = len(self.steps) - 1
+
+        if current_step > last_step:
+            logging.debug('Invalid step passed; resetting create team form wizard')
+            return self.render_validation_error(request, organization)
+
+        op = request.POST.get('op')
+        form = self.get_step_form(current_step, request.POST or None)
+        if op == 'submit' and form.is_valid():
+            session_data['step%d' % current_step] = form.cleaned_data
+            request.session[self.session_key] = session_data
+            if current_step == last_step:
+                # no more steps, render done view
+                return self.render_done(request, organization, form)
+            else:
+                # proceed to the next step
+                return self.render_next_step(request, organization, current_step + 1)
+
+        elif op == 'back' and current_step > 0:
+            return self.render_next_step(request, organization, current_step - 1)
+
+        elif op == 'skip' and current_step > 1:
+            session_data['step%d' % current_step] = {}
+            request.session[self.session_key] = session_data
+            if current_step == last_step:
+                # no more steps, render done view
+                return self.render_done(request, organization, form)
             else:
-                url = reverse('sentry-get-started', args=[organization.slug, project.slug])
+                # proceed to the next step
+                return self.render_next_step(request, organization, current_step + 1)
 
-            return HttpResponseRedirect(url)
+        return self.render(request, organization, current_step, form)
 
+    def get_step_form(self, step, data=None, with_prefix=True):
+        if with_prefix:
+            prefix = '%s-%d' % (self.form_prefix, step)
+        else:
+            prefix = None
+
+        return self.steps[step].form(
+            data=data,
+            prefix=prefix,
+        )
+
+    def render(self, request, organization, step, form):
+        template = self.steps[step].template
         context = {
-            'team_form': team_form,
-            'project_form': project_form,
+            'current_step': step,
+            'step': step,
+            'form': form,
         }
+        return self.respond('sentry/%s' % (template,), context)
+
+    def render_next_step(self, request, organization, step):
+        form = self.get_step_form(step)
+        return self.render(request, organization, step, form)
+
+    def render_validation_error(self, request, organization):
+        try:
+            del request.session[self.session_key]
+        except KeyError:
+            pass
+
+        messages.error(request, 'There was an issue validating your input. Please try again.')
+
+        return self.redirect(request.get_full_path())
+
+    def render_done(self, request, organization, last_form):
+        all_forms = []
+        session_data = request.session[self.session_key]
+        last_index = len(self.steps) - 1
+        # revalidate previous steps
+        for index in range(len(self.steps)):
+            if index == last_index:
+                form = last_form
+            else:
+                form = self.get_step_form(
+                    step=index,
+                    data=session_data.get('step%d' % (index,), {}),
+                    with_prefix=False,
+                )
+
+            if not form.is_valid():
+                logging.warning('step %d (%s) did not validate; resetting create team wizard',
+                              index, type(form).__name__)
+                return self.render_validation_error(request, organization)
+
+            all_forms.append(form)
+
+        try:
+            return self.save(request, organization, all_forms)
+        finally:
+            del request.session[self.session_key]
+
+    def save(self, request, organization, all_forms):
+        team = all_forms[0].save(request.user, organization, request.META['REMOTE_ADDR'])
+
+        project = all_forms[2].save(request.user, team, request.META['REMOTE_ADDR'])
+
+        if project.platform not in (None, 'other'):
+            url = reverse('sentry-docs-client', args=[organization.slug, project.slug, project.platform])
+        else:
+            url = reverse('sentry-get-started', args=[organization.slug, project.slug])
 
-        return self.respond('sentry/create-team.html', context)
+        return self.redirect(url)
diff --git a/tests/sentry/web/frontend/test_create_team.py b/tests/sentry/web/frontend/test_create_team.py
index fa412ba2e8..f426c740dc 100644
--- a/tests/sentry/web/frontend/test_create_team.py
+++ b/tests/sentry/web/frontend/test_create_team.py
@@ -2,33 +2,126 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
-from sentry.models import Team
+from sentry.models import Project, Team
 from sentry.testutils import TestCase
+from sentry.web.frontend.create_team import NewTeamForm, NewProjectForm
 
 
 class CreateTeamTest(TestCase):
-    def test_renders_with_context(self):
+    def test_step_0_renders(self):
         organization = self.create_organization()
         path = reverse('sentry-create-team', args=[organization.slug])
         self.login_as(self.user)
         resp = self.client.get(path)
         assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/create-team.html')
+        self.assertTemplateUsed(resp, 'sentry/create-team-step-0.html')
         assert resp.context['organization'] == organization
+        assert resp.context['step'] == 0
         assert resp.context['form']
+        assert type(resp.context['form']) == NewTeamForm
 
-    def test_valid_params(self):
+    def test_step_0_valid_params(self):
         organization = self.create_organization()
         path = reverse('sentry-create-team', args=[organization.slug])
         self.login_as(self.user)
         resp = self.client.post(path, {
-            'name': 'bar',
+            'op': 'submit',
+            'step': '0',
+            'ctwizard-0-name': 'bar',
+        })
+        assert resp.status_code == 200
+        assert resp.context['step'] == 1, resp.context['form'].errors
+
+    def test_step_1_renders(self):
+        organization = self.create_organization()
+
+        path = reverse('sentry-create-team', args=[organization.slug])
+
+        self.login_as(self.user)
+
+        self.session['ctwizard'] = {'step0': {'name': 'bar'}}
+        self.save_session()
+
+        resp = self.client.post(path, {'step': '1'})
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/create-team-step-1.html')
+        assert resp.context['organization'] == organization
+        assert resp.context['step'] == 1
+        assert resp.context['form']
+        # assert type(resp.context['form']) == NewProjectForm
+
+    def test_step_1_valid_params(self):
+        organization = self.create_organization()
+
+        path = reverse('sentry-create-team', args=[organization.slug])
+
+        self.login_as(self.user)
+
+        self.session['ctwizard'] = {'step0': {'name': 'bar'}}
+        self.save_session()
+
+        resp = self.client.post(path, {
+            'op': 'submit',
+            'step': '1',
+        })
+        assert resp.status_code == 200
+        assert resp.context['step'] == 2, resp.context['form'].errors
+
+    def test_step_2_renders(self):
+        organization = self.create_organization()
+
+        path = reverse('sentry-create-team', args=[organization.slug])
+
+        self.login_as(self.user)
+
+        self.session['ctwizard'] = {
+            'step0': {'name': 'bar'},
+            'step1': {},
+        }
+        self.save_session()
+
+        resp = self.client.post(path, {'step': '2'})
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/create-team-step-2.html')
+        assert resp.context['organization'] == organization
+        assert resp.context['step'] == 2
+        assert resp.context['form']
+        assert type(resp.context['form']) == NewProjectForm
+
+    def test_step_2_valid_params(self):
+        organization = self.create_organization()
+
+        path = reverse('sentry-create-team', args=[organization.slug])
+
+        self.login_as(self.user)
+
+        self.session['ctwizard'] = {
+            'step0': {'name': 'bar'},
+            'step1': {},
+        }
+        self.save_session()
+
+        resp = self.client.post(path, {
+            'op': 'submit',
+            'step': '2',
+            'ctwizard-2-name': 'bar',
+            'ctwizard-2-platform': 'python',
         })
         assert resp.status_code == 302
 
-        team = Team.objects.get(organization=organization, name='bar')
+        team = Team.objects.get(organization=organization)
 
         assert team.name == 'bar'
 
-        redirect_uri = reverse('sentry-create-project', args=[organization.slug])
-        assert resp['Location'] == 'http://testserver%s?team=%s' % (redirect_uri, team.slug)
+        project = Project.objects.get(team=team)
+
+        assert project.name == 'bar'
+        assert project.platform == 'python'
+
+        redirect_uri = reverse('sentry-docs-client', args=[
+            organization.slug, project.slug, project.platform
+        ])
+
+        assert resp['Location'] == 'http://testserver%s' % (redirect_uri,)
