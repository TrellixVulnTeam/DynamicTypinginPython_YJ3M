commit 4de6a914d6de831642775c3d2d1e52353d28f18c
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Jan 9 11:56:28 2019 -0800

     ref(releases): Refactor projects/organization release overview  (#11392)
    
    Extract common components and functions from the organization and
    project release overview pages.
    
    Depends on https://github.com/getsentry/sentry/pull/11380

diff --git a/src/sentry/static/sentry/app/views/releases/detail/organization/releaseOverview.jsx b/src/sentry/static/sentry/app/views/releases/detail/organization/releaseOverview.jsx
index 37c27d530b..25ef577cf7 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/organization/releaseOverview.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/organization/releaseOverview.jsx
@@ -1,20 +1,17 @@
 import React from 'react';
-import {Box} from 'grid-emotion';
 
 import SentryTypes from 'app/sentryTypes';
-import Button from 'app/components/button';
-import InlineSvg from 'app/components/inlineSvg';
-import HeroIcon from 'app/components/heroIcon';
+
 import LastCommit from 'app/components/lastCommit';
-import IssueList from 'app/components/issueList';
 import CommitAuthorStats from 'app/components/commitAuthorStats';
 import ReleaseProjectStatSparkline from 'app/components/releaseProjectStatSparkline';
 import RepositoryFileSummary from 'app/components/repositoryFileSummary';
-import TimeSince from 'app/components/timeSince';
 import AsyncView from 'app/views/asyncView';
 import {t} from 'app/locale';
-import {Panel, PanelBody, PanelItem} from 'app/components/panels';
-import Well from 'app/components/well';
+import {getFilesByRepository} from '../shared/utils';
+import ReleaseDeploys from '../shared/releaseDeploys';
+import ReleaseEmptyState from '../shared/releaseEmptyState';
+import ReleaseIssues from '../shared/releaseIssues';
 
 export default class OrganizationReleaseOverview extends AsyncView {
   static contextTypes = {
@@ -43,29 +40,7 @@ export default class OrganizationReleaseOverview extends AsyncView {
 
     const hasRepos = repos.length > 0;
 
-    // convert list of individual file changes (can be
-    // multiple changes to a single file) into a per-file
-    // summary grouped by repository
-    const filesByRepository = fileList.reduce(function(fbr, file) {
-      const {filename, repoName, author, type} = file;
-      if (!fbr.hasOwnProperty(repoName)) {
-        fbr[repoName] = {};
-      }
-      if (!fbr[repoName].hasOwnProperty(filename)) {
-        fbr[repoName][filename] = {
-          authors: {},
-          types: new Set(),
-          repos: new Set(),
-        };
-      }
-
-      fbr[repoName][filename].authors[author.email] = author;
-      fbr[repoName][filename].types.add(type);
-
-      return fbr;
-    }, {});
-
-    const deploys = this.state.deploys;
+    const filesByRepository = getFilesByRepository(fileList);
 
     // Unlike project releases) which filter issue lists on environment, we
     // do not apply any of the global selection filters (project, environment,
@@ -76,47 +51,7 @@ export default class OrganizationReleaseOverview extends AsyncView {
       <div>
         <div className="row" style={{paddingTop: 10}}>
           <div className="col-sm-8">
-            <h5>{t('Issues Resolved in this Release')}</h5>
-            <IssueList
-              endpoint={`/organizations/${orgId}/releases/${encodeURIComponent(
-                version
-              )}/resolved/`}
-              query={query}
-              pagination={false}
-              renderEmpty={() => (
-                <Panel>
-                  <PanelBody>
-                    <PanelItem key="none" justify="center">
-                      {t('No issues resolved')}
-                    </PanelItem>
-                  </PanelBody>
-                </Panel>
-              )}
-              showActions={false}
-              params={{orgId}}
-              className="m-b-2"
-            />
-            <h5>{t('New Issues in this Release')}</h5>
-            <IssueList
-              endpoint={`/organizations/${orgId}/issues/`}
-              query={{
-                ...query,
-                query: 'first-release:"' + version + '"',
-                limit: 5,
-              }}
-              statsPeriod="0"
-              pagination={false}
-              renderEmpty={() => (
-                <Panel>
-                  <PanelBody>
-                    <PanelItem justify="center">{t('No new issues')}</PanelItem>
-                  </PanelBody>
-                </Panel>
-              )}
-              showActions={false}
-              params={{orgId}}
-              className="m-b-2"
-            />
+            <ReleaseIssues version={version} orgId={orgId} query={query} />
             {hasRepos && (
               <div>
                 {Object.keys(filesByRepository).map((repository, i) => {
@@ -155,57 +90,13 @@ export default class OrganizationReleaseOverview extends AsyncView {
                 </ul>
               </div>
             ) : (
-              <Well centered className="m-t-2">
-                <HeroIcon src="icon-commit" />
-                <h5>Releases are better with commit data!</h5>
-                <p>
-                  Connect a repository to see commit info, files changed, and authors
-                  involved in future releases.
-                </p>
-                <Box mb={1}>
-                  <Button priority="primary" href={`/organizations/${orgId}/repos/`}>
-                    Connect a repository
-                  </Button>
-                </Box>
-              </Well>
+              <ReleaseEmptyState />
             )}
-            <h6 className="nav-header m-b-1">{t('Deploys')}</h6>
-            <ul className="nav nav-stacked">
-              {!deploys.length
-                ? this.renderEmpty()
-                : deploys.map(deploy => {
-                    const href = `/organizations/${orgId}/issues/?query=release:${version}&environment=${encodeURIComponent(
-                      deploy.environment
-                    )}`;
-
-                    return (
-                      <li key={deploy.id}>
-                        <a href={href} title={t('View in stream')}>
-                          <div className="row row-flex row-center-vertically">
-                            <div className="col-xs-6">
-                              <span
-                                className="repo-label"
-                                style={{verticalAlign: 'bottom'}}
-                              >
-                                {deploy.environment}
-                                <InlineSvg
-                                  src="icon-open"
-                                  size={11}
-                                  style={{marginLeft: 6}}
-                                />
-                              </span>
-                            </div>
-                            <div className="col-xs-6 align-right">
-                              <small>
-                                <TimeSince date={deploy.dateFinished} />
-                              </small>
-                            </div>
-                          </div>
-                        </a>
-                      </li>
-                    );
-                  })}
-            </ul>
+            <ReleaseDeploys
+              deploys={this.state.deploys}
+              version={version}
+              orgId={orgId}
+            />
           </div>
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/views/releases/detail/project/releaseOverview.jsx b/src/sentry/static/sentry/app/views/releases/detail/project/releaseOverview.jsx
index 2e8f01c43b..c848e650d9 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/project/releaseOverview.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/project/releaseOverview.jsx
@@ -3,27 +3,24 @@ import React from 'react';
 
 import createReactClass from 'create-react-class';
 
-import {Box} from 'grid-emotion';
-import Button from 'app/components/button';
 import withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import LoadingError from 'app/components/loadingError';
-import InlineSvg from 'app/components/inlineSvg';
-import HeroIcon from 'app/components/heroIcon';
 import LastCommit from 'app/components/lastCommit';
-import IssueList from 'app/components/issueList';
 import CommitAuthorStats from 'app/components/commitAuthorStats';
 import ReleaseProjectStatSparkline from 'app/components/releaseProjectStatSparkline';
 import RepositoryFileSummary from 'app/components/repositoryFileSummary';
-import TimeSince from 'app/components/timeSince';
 
 import ApiMixin from 'app/mixins/apiMixin';
 
 import {t} from 'app/locale';
 import SentryTypes from 'app/sentryTypes';
 import OrganizationState from 'app/mixins/organizationState';
-import {Panel, PanelBody, PanelItem} from 'app/components/panels';
-import Well from 'app/components/well';
+
+import {getFilesByRepository} from '../shared/utils';
+import ReleaseDeploys from '../shared/releaseDeploys';
+import ReleaseEmptyState from '../shared/releaseEmptyState';
+import ReleaseIssues from '../shared/releaseIssues';
 
 const ReleaseOverview = createReactClass({
   displayName: 'ReleaseOverview',
@@ -170,29 +167,7 @@ const ReleaseOverview = createReactClass({
 
     let {fileList, projects, hasRepos} = this.state;
 
-    // convert list of individual file changes (can be
-    // multiple changes to a single file) into a per-file
-    // summary grouped by repository
-    let filesByRepository = fileList.reduce(function(fbr, file) {
-      let {filename, repoName, author, type} = file;
-      if (!fbr.hasOwnProperty(repoName)) {
-        fbr[repoName] = {};
-      }
-      if (!fbr[repoName].hasOwnProperty(filename)) {
-        fbr[repoName][filename] = {
-          authors: {},
-          types: new Set(),
-          repos: new Set(),
-        };
-      }
-
-      fbr[repoName][filename].authors[author.email] = author;
-      fbr[repoName][filename].types.add(type);
-
-      return fbr;
-    }, {});
-
-    let deploys = this.state.deploys;
+    let filesByRepository = getFilesByRepository(fileList);
 
     let query = this.props.environment ? {environment: this.props.environment.name} : {};
 
@@ -200,46 +175,11 @@ const ReleaseOverview = createReactClass({
       <div>
         <div className="row" style={{paddingTop: 10}}>
           <div className="col-sm-8">
-            <h5>{t('Issues Resolved in this Release')}</h5>
-            <IssueList
-              endpoint={`/projects/${orgId}/${projectId}/releases/${encodeURIComponent(
-                version
-              )}/resolved/`}
+            <ReleaseIssues
+              version={version}
               query={query}
-              pagination={false}
-              renderEmpty={() => (
-                <Panel>
-                  <PanelBody>
-                    <PanelItem key="none" justify="center">
-                      {t('No issues resolved')}
-                    </PanelItem>
-                  </PanelBody>
-                </Panel>
-              )}
-              showActions={false}
-              params={{orgId}}
-              className="m-b-2"
-            />
-            <h5>{t('New Issues in this Release')}</h5>
-            <IssueList
-              endpoint={`/projects/${orgId}/${projectId}/issues/`}
-              query={{
-                ...query,
-                query: 'first-release:"' + version + '"',
-                limit: 5,
-              }}
-              statsPeriod="0"
-              pagination={false}
-              renderEmpty={() => (
-                <Panel>
-                  <PanelBody>
-                    <PanelItem justify="center">{t('No new issues')}</PanelItem>
-                  </PanelBody>
-                </Panel>
-              )}
-              showActions={false}
-              params={{orgId}}
-              className="m-b-2"
+              orgId={orgId}
+              projectId={projectId}
             />
             {hasRepos && (
               <div>
@@ -286,57 +226,14 @@ const ReleaseOverview = createReactClass({
                 </ul>
               </div>
             ) : (
-              <Well centered className="m-t-2">
-                <HeroIcon src="icon-commit" />
-                <h5>Releases are better with commit data!</h5>
-                <p>
-                  Connect a repository to see commit info, files changed, and authors
-                  involved in future releases.
-                </p>
-                <Box mb={1}>
-                  <Button priority="primary" href={`/organizations/${orgId}/repos/`}>
-                    Connect a repository
-                  </Button>
-                </Box>
-              </Well>
+              <ReleaseEmptyState />
             )}
-            <h6 className="nav-header m-b-1">{t('Deploys')}</h6>
-            <ul className="nav nav-stacked">
-              {!deploys.length
-                ? this.renderEmpty()
-                : deploys.map(deploy => {
-                    let href = `/${orgId}/${projectId}/?query=release:${version}&environment=${encodeURIComponent(
-                      deploy.environment
-                    )}`;
-
-                    return (
-                      <li key={deploy.id}>
-                        <a href={href} title={t('View in stream')}>
-                          <div className="row row-flex row-center-vertically">
-                            <div className="col-xs-6">
-                              <span
-                                className="repo-label"
-                                style={{verticalAlign: 'bottom'}}
-                              >
-                                {deploy.environment}
-                                <InlineSvg
-                                  src="icon-open"
-                                  size={11}
-                                  style={{marginLeft: 6}}
-                                />
-                              </span>
-                            </div>
-                            <div className="col-xs-6 align-right">
-                              <small>
-                                <TimeSince date={deploy.dateFinished} />
-                              </small>
-                            </div>
-                          </div>
-                        </a>
-                      </li>
-                    );
-                  })}
-            </ul>
+            <ReleaseDeploys
+              deploys={this.state.deploys}
+              version={version}
+              orgId={orgId}
+              projectId={projectId}
+            />
           </div>
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/views/releases/detail/shared/releaseDeploys.jsx b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseDeploys.jsx
new file mode 100644
index 0000000000..fb4b27f6ee
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseDeploys.jsx
@@ -0,0 +1,69 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import InlineSvg from 'app/components/inlineSvg';
+import TimeSince from 'app/components/timeSince';
+import Link from 'app/components/link';
+import {t} from 'app/locale';
+
+export default class ReleaseDeploys extends React.Component {
+  static propTypes = {
+    deploys: PropTypes.array.isRequired,
+    version: PropTypes.string.isRequired,
+    orgId: PropTypes.string.isRequired,
+    // Provided only in the project version of release deploys
+    projectId: PropTypes.string,
+  };
+
+  getBasePath() {
+    const {orgId, projectId} = this.props;
+
+    return projectId ? `/${orgId}/${projectId}/` : `/organizations/${orgId}/issues/`;
+  }
+
+  renderEmpty() {
+    return <div className="box empty">{t('None')}</div>;
+  }
+
+  render() {
+    const {deploys, version} = this.props;
+
+    return (
+      <React.Fragment>
+        <h6 className="nav-header m-b-1">{t('Deploys')}</h6>
+        <ul className="nav nav-stacked">
+          {!deploys.length
+            ? this.renderEmpty()
+            : deploys.map(deploy => {
+                const path = `${this.getBasePath()}?query=release:${version}&environment=${encodeURIComponent(
+                  deploy.environment
+                )}`;
+                return (
+                  <li key={deploy.id}>
+                    <Link to={path} title={t('View in stream')}>
+                      <div className="row row-flex row-center-vertically">
+                        <div className="col-xs-6">
+                          <span className="repo-label" style={{verticalAlign: 'bottom'}}>
+                            {deploy.environment}
+                            <InlineSvg
+                              src="icon-open"
+                              size={11}
+                              style={{marginLeft: 6}}
+                            />
+                          </span>
+                        </div>
+                        <div className="col-xs-6 align-right">
+                          <small>
+                            <TimeSince date={deploy.dateFinished} />
+                          </small>
+                        </div>
+                      </div>
+                    </Link>
+                  </li>
+                );
+              })}
+        </ul>
+      </React.Fragment>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/releases/detail/shared/releaseEmptyState.jsx b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseEmptyState.jsx
new file mode 100644
index 0000000000..87071a8469
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseEmptyState.jsx
@@ -0,0 +1,42 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import space from 'app/styles/space';
+import Button from 'app/components/button';
+import HeroIcon from 'app/components/heroIcon';
+import Well from 'app/components/well';
+import SentryTypes from 'app/sentryTypes';
+import {t} from 'app/locale';
+import withOrganization from 'app/utils/withOrganization';
+
+class ReleaseEmptyState extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization,
+  };
+  render() {
+    return (
+      <StyledWell centered>
+        <HeroIcon src="icon-commit" />
+        <h5>{t('Releases are better with commit data!')}</h5>
+        <p>
+          {t(`Connect a repository to see commit info, files changed, and authors
+                  involved in future releases`)}.
+        </p>
+        <Button
+          priority="primary"
+          href={`/organizations/${this.props.organization.slug}/repos/`}
+        >
+          {t('Connect a repository')}
+        </Button>
+      </StyledWell>
+    );
+  }
+}
+
+const StyledWell = styled(Well)`
+  margin-top: ${space(4)};
+  padding-top: ${space(2)};
+  padding-bottom: ${space(4)};
+`;
+
+export default withOrganization(ReleaseEmptyState);
diff --git a/src/sentry/static/sentry/app/views/releases/detail/shared/releaseIssues.jsx b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseIssues.jsx
new file mode 100644
index 0000000000..a489a09cb0
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseIssues.jsx
@@ -0,0 +1,84 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import styled from 'react-emotion';
+
+import IssueList from 'app/components/issueList';
+import {Panel, PanelBody, PanelItem} from 'app/components/panels';
+import space from 'app/styles/space';
+import {t} from 'app/locale';
+
+export default class ReleaseIssues extends React.Component {
+  static propTypes = {
+    query: PropTypes.object.isRequired,
+    version: PropTypes.string.isRequired,
+    orgId: PropTypes.string.isRequired,
+    // Provided only in the project version of release issues
+    projectId: PropTypes.string,
+  };
+
+  getResolvedPath() {
+    const {version, orgId, projectId} = this.props;
+
+    return projectId
+      ? `/projects/${orgId}/${projectId}/releases/${encodeURIComponent(
+          version
+        )}/resolved/`
+      : `/organizations/${orgId}/releases/${encodeURIComponent(version)}/resolved/`;
+  }
+
+  getIssuesPath() {
+    const {orgId, projectId} = this.props;
+
+    return projectId
+      ? `/projects/${orgId}/${projectId}/issues/`
+      : `/organizations/${orgId}/issues/`;
+  }
+
+  render() {
+    const {version, orgId, query} = this.props;
+
+    return (
+      <React.Fragment>
+        <h5>{t('Issues Resolved in this Release')}</h5>
+        <StyledIssueList
+          endpoint={this.getResolvedPath()}
+          query={query}
+          pagination={false}
+          renderEmpty={() => (
+            <Panel>
+              <PanelBody>
+                <PanelItem justify="center">{t('No issues resolved')}</PanelItem>
+              </PanelBody>
+            </Panel>
+          )}
+          showActions={false}
+          params={{orgId}}
+        />
+        <h5>{t('New Issues in this Release')}</h5>
+        <StyledIssueList
+          endpoint={this.getIssuesPath()}
+          query={{
+            ...query,
+            query: 'first-release:"' + version + '"',
+            limit: 5,
+          }}
+          statsPeriod="0"
+          pagination={false}
+          renderEmpty={() => (
+            <Panel>
+              <PanelBody>
+                <PanelItem justify="center">{t('No new issues')}</PanelItem>
+              </PanelBody>
+            </Panel>
+          )}
+          showActions={false}
+          params={{orgId}}
+        />
+      </React.Fragment>
+    );
+  }
+}
+
+const StyledIssueList = styled(IssueList)`
+  margin-bottom: ${space(2)};
+`;
diff --git a/src/sentry/static/sentry/app/views/releases/detail/shared/utils.jsx b/src/sentry/static/sentry/app/views/releases/detail/shared/utils.jsx
index 86c0ef1b30..a4e231dd2d 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/shared/utils.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/shared/utils.jsx
@@ -17,3 +17,30 @@ export function deleteRelease(orgId, version) {
     }
   );
 }
+
+/**
+ * Convert list of individual file changes into a per-file summary grouped by repository
+ *
+ * @param {Array<File>} fileList List of files
+ * @returns {Object} Object grouped by repository and file name
+ */
+export function getFilesByRepository(fileList) {
+  return fileList.reduce(function(fbr, file) {
+    const {filename, repoName, author, type} = file;
+    if (!fbr.hasOwnProperty(repoName)) {
+      fbr[repoName] = {};
+    }
+    if (!fbr[repoName].hasOwnProperty(filename)) {
+      fbr[repoName][filename] = {
+        authors: {},
+        types: new Set(),
+        repos: new Set(),
+      };
+    }
+
+    fbr[repoName][filename].authors[author.email] = author;
+    fbr[repoName][filename].types.add(type);
+
+    return fbr;
+  }, {});
+}
