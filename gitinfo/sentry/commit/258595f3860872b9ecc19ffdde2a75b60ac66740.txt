commit 258595f3860872b9ecc19ffdde2a75b60ac66740
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Nov 2 10:26:41 2015 -0800

    Remove use of custom AnonymousUser class
    
    This was added to support ``is_active_superuser``, but is too unreliable without further duct tape.

diff --git a/src/sentry/api/authentication.py b/src/sentry/api/authentication.py
index fc9400baf2..9a40ba4289 100644
--- a/src/sentry/api/authentication.py
+++ b/src/sentry/api/authentication.py
@@ -1,11 +1,12 @@
 from __future__ import absolute_import
 
+from django.contrib.auth.models import AnonymousUser
 from django.utils.crypto import constant_time_compare
 from rest_framework.authentication import BasicAuthentication
 from rest_framework.exceptions import AuthenticationFailed
 
 from sentry.app import raven
-from sentry.models import AnonymousUser, ApiKey, ProjectKey
+from sentry.models import ApiKey, ProjectKey
 
 
 class QuietBasicAuthentication(BasicAuthentication):
diff --git a/src/sentry/api/endpoints/auth_index.py b/src/sentry/api/endpoints/auth_index.py
index 9f9c7d90ac..4d1b3a7c15 100644
--- a/src/sentry/api/endpoints/auth_index.py
+++ b/src/sentry/api/endpoints/auth_index.py
@@ -1,12 +1,12 @@
 from __future__ import absolute_import
 
 from django.contrib.auth import login, logout
+from django.contrib.auth.models import AnonymousUser
 from rest_framework.response import Response
 
 from sentry.api import client
 from sentry.api.authentication import QuietBasicAuthentication
 from sentry.api.base import Endpoint
-from sentry.models import AnonymousUser
 
 
 class AuthIndexEndpoint(Endpoint):
diff --git a/src/sentry/api/endpoints/organization_index.py b/src/sentry/api/endpoints/organization_index.py
index 0c1735d0fb..2bc547f57e 100644
--- a/src/sentry/api/endpoints/organization_index.py
+++ b/src/sentry/api/endpoints/organization_index.py
@@ -9,6 +9,7 @@ from sentry.api.base import DocSection, Endpoint
 from sentry.api.bases.organization import OrganizationPermission
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
+from sentry.auth.utils import is_active_superuser
 from sentry.models import (
     AuditLogEntryEvent, Organization, OrganizationMember, OrganizationStatus
 )
@@ -63,7 +64,7 @@ class OrganizationIndexEndpoint(Endpoint):
                 queryset = queryset.filter(
                     id=request.auth.organization.id
                 )
-        elif member_only or not request.user.is_active_superuser():
+        elif member_only or not is_active_superuser(request.user):
             queryset = queryset.filter(
                 id__in=OrganizationMember.objects.filter(
                     user=request.user,
diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index 6dffa08f29..2683af5868 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -10,6 +10,7 @@ from sentry.api.bases.organization import (
     OrganizationEndpoint, OrganizationPermission
 )
 from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.auth.utils import is_active_superuser
 from sentry.models import (
     AuditLogEntryEvent, AuthIdentity, AuthProvider, OrganizationMember
 )
@@ -107,7 +108,7 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
         except OrganizationMember.DoesNotExist:
             raise ResourceDoesNotExist
 
-        if request.user.is_authenticated() and not request.user.is_active_superuser():
+        if request.user.is_authenticated() and not is_active_superuser(request.user):
             try:
                 acting_member = OrganizationMember.objects.get(
                     organization=organization,
diff --git a/src/sentry/api/endpoints/organization_member_team_details.py b/src/sentry/api/endpoints/organization_member_team_details.py
index 7ae5ef4305..08714769de 100644
--- a/src/sentry/api/endpoints/organization_member_team_details.py
+++ b/src/sentry/api/endpoints/organization_member_team_details.py
@@ -10,6 +10,7 @@ from sentry.api.bases.organization import (
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.team import TeamWithProjectsSerializer
+from sentry.auth.utils import is_active_superuser
 from sentry.models import (
     AuditLogEntryEvent, OrganizationAccessRequest,
     OrganizationMember, OrganizationMemberTeam, Team
@@ -44,7 +45,7 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
 
     def _can_access(self, request, member):
         # TODO(dcramer): ideally org owners/admins could perform these actions
-        if request.user.is_active_superuser():
+        if is_active_superuser(request.user):
             return True
 
         if not request.user.is_authenticated():
diff --git a/src/sentry/api/endpoints/user_details.py b/src/sentry/api/endpoints/user_details.py
index 583e1778f1..aed71aa49f 100644
--- a/src/sentry/api/endpoints/user_details.py
+++ b/src/sentry/api/endpoints/user_details.py
@@ -6,6 +6,7 @@ from rest_framework.response import Response
 from sentry.api.bases.user import UserEndpoint
 from sentry.api.decorators import sudo_required
 from sentry.api.serializers import serialize
+from sentry.auth.utils import is_active_superuser
 from sentry.models import User
 
 
@@ -20,7 +21,7 @@ class UserSerializer(serializers.ModelSerializer):
 class UserDetailsEndpoint(UserEndpoint):
     def get(self, request, user):
         data = serialize(user, request.user)
-
+        data['isSuperuser'] = user == request.user and is_active_superuser(user)
         return Response(data)
 
     @sudo_required
diff --git a/src/sentry/api/permissions.py b/src/sentry/api/permissions.py
index dc25fcf62c..1c0dddd45d 100644
--- a/src/sentry/api/permissions.py
+++ b/src/sentry/api/permissions.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from rest_framework import permissions
 
+from sentry.auth.utils import is_active_superuser
 from sentry.models import ProjectKey
 
 
@@ -47,6 +48,6 @@ class ScopedPermission(permissions.BasePermission):
 
 class SuperuserPermission(permissions.BasePermission):
     def has_permission(self, request, view):
-        if request.user.is_active_superuser():
+        if is_active_superuser(request.user):
             return True
         return False
diff --git a/src/sentry/api/serializers/base.py b/src/sentry/api/serializers/base.py
index ed9a7cc68a..828e4c3aaf 100644
--- a/src/sentry/api/serializers/base.py
+++ b/src/sentry/api/serializers/base.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from sentry.models import AnonymousUser
+from django.contrib.auth.models import AnonymousUser
 
 
 registry = {}
diff --git a/src/sentry/api/serializers/models/team.py b/src/sentry/api/serializers/models/team.py
index 1e63317dd8..fe2464bc85 100644
--- a/src/sentry/api/serializers/models/team.py
+++ b/src/sentry/api/serializers/models/team.py
@@ -6,6 +6,7 @@ from collections import defaultdict
 from django.conf import settings
 
 from sentry.api.serializers import Serializer, register, serialize
+from sentry.auth.utils import is_active_superuser
 from sentry.models import (
     OrganizationAccessRequest, OrganizationMemberTeam, Project, ProjectStatus,
     Team
@@ -15,7 +16,7 @@ from sentry.models import (
 @register(Team)
 class TeamSerializer(Serializer):
     def get_attrs(self, item_list, user):
-        if user.is_active_superuser() or settings.SENTRY_PUBLIC:
+        if is_active_superuser(user) or settings.SENTRY_PUBLIC:
             inactive_memberships = frozenset(
                 OrganizationMemberTeam.objects.filter(
                     team__in=item_list,
diff --git a/src/sentry/api/serializers/models/user.py b/src/sentry/api/serializers/models/user.py
index 9e28df455c..8310b84230 100644
--- a/src/sentry/api/serializers/models/user.py
+++ b/src/sentry/api/serializers/models/user.py
@@ -13,7 +13,6 @@ class UserSerializer(Serializer):
         d = {
             'id': str(obj.id),
             'name': obj.get_display_name(),
-            'isSuperuser': obj.is_active_superuser(),
             'email': obj.email,
             'avatarUrl': get_gravatar_url(obj.email, size=32),
         }
diff --git a/src/sentry/auth/access.py b/src/sentry/auth/access.py
index 2e766f31a8..fd398dba1a 100644
--- a/src/sentry/auth/access.py
+++ b/src/sentry/auth/access.py
@@ -6,6 +6,8 @@ from django.conf import settings
 
 from sentry.models import AuthIdentity, AuthProvider, OrganizationMember
 
+from .utils import is_active_superuser
+
 
 class BaseAccess(object):
     is_active = False
@@ -49,7 +51,7 @@ def from_user(user, organization):
     if not organization:
         return DEFAULT
 
-    if user.is_active_superuser():
+    if is_active_superuser(user):
         return Access(
             scopes=settings.SENTRY_SCOPES,
             is_active=True,
diff --git a/src/sentry/auth/utils.py b/src/sentry/auth/utils.py
new file mode 100644
index 0000000000..a8d77c6066
--- /dev/null
+++ b/src/sentry/auth/utils.py
@@ -0,0 +1,6 @@
+from __future__ import absolute_import
+
+
+def is_active_superuser(user):
+    # TODO(dcramer): add VPN support via INTERNAL_IPS + ipaddr ranges
+    return user.is_superuser
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 3b3a6b28ae..4c9bcce1d5 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -551,7 +551,6 @@ REST_FRAMEWORK = {
     'DEFAULT_PERMISSION_CLASSES': (
         'sentry.api.permissions.NoPermission',
     ),
-    'UNAUTHENTICATED_USER': 'sentry.models.AnonymousUser',
 }
 
 CRISPY_TEMPLATE_PACK = 'bootstrap3'
diff --git a/src/sentry/debug/middleware.py b/src/sentry/debug/middleware.py
index 259818f07b..fb192ea52f 100644
--- a/src/sentry/debug/middleware.py
+++ b/src/sentry/debug/middleware.py
@@ -9,6 +9,8 @@ from django.conf import settings
 from django.template.loader import render_to_string
 from django.utils.encoding import force_text
 
+from sentry.auth.utils import is_active_superuser
+
 
 class ToolbarCache(object):
     def __init__(self):
@@ -35,9 +37,7 @@ class DebugMiddleware(object):
         # TODO(dcramer): support VPN via INTERNAL_IPS + ipaddr maps
         if not settings.SENTRY_DEBUGGER:
             return False
-        if not request.user.is_authenticated():
-            return False
-        if not request.user.is_active_superuser():
+        if not is_active_superuser(request.user):
             return False
         if 'text/html' not in request.META.get('HTTP_ACCEPT', '*/*'):
             return False
diff --git a/src/sentry/middleware/auth.py b/src/sentry/middleware/auth.py
index c44cff3c3d..352e3b53e1 100644
--- a/src/sentry/middleware/auth.py
+++ b/src/sentry/middleware/auth.py
@@ -2,12 +2,6 @@ from __future__ import absolute_import
 
 from django.contrib.auth import middleware
 
-from sentry.models import AnonymousUser
-
 
 class AuthenticationMiddleware(middleware.AuthenticationMiddleware):
-    def process_request(self, request):
-        super(AuthenticationMiddleware, self).process_request(request)
-        if not request.user.is_authenticated():
-            # swap in our custom class
-            request.user = AnonymousUser()
+    pass
diff --git a/src/sentry/models/anonymoususer.py b/src/sentry/models/anonymoususer.py
deleted file mode 100644
index 1874be7dfa..0000000000
--- a/src/sentry/models/anonymoususer.py
+++ /dev/null
@@ -1,8 +0,0 @@
-from __future__ import absolute_import
-
-from django.contrib.auth.models import AnonymousUser as BaseAnonymousUser
-
-
-class AnonymousUser(BaseAnonymousUser):
-    def is_active_superuser(self):
-        return False
diff --git a/src/sentry/models/team.py b/src/sentry/models/team.py
index 198401c8ce..7fd0dd971d 100644
--- a/src/sentry/models/team.py
+++ b/src/sentry/models/team.py
@@ -27,6 +27,7 @@ class TeamManager(BaseManager):
         """
         Returns a list of all teams a user has some level of access to.
         """
+        from sentry.auth.utils import is_active_superuser
         from sentry.models import (
             OrganizationMemberTeam, Project, ProjectStatus
         )
@@ -39,7 +40,7 @@ class TeamManager(BaseManager):
             status=TeamStatus.VISIBLE
         )
 
-        if user.is_active_superuser() or settings.SENTRY_PUBLIC:
+        if is_active_superuser(user) or settings.SENTRY_PUBLIC:
             team_list = list(base_team_qs)
 
         else:
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index edbb287d2a..8e004d39b1 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -70,11 +70,13 @@ class User(BaseModel, AbstractBaseUser):
 
     def has_perm(self, perm_name):
         warnings.warn('User.has_perm is deprecated', DeprecationWarning)
-        return self.is_active_superuser()
+        from sentry.auth.utils import is_active_superuser
+        return is_active_superuser(self)
 
     def has_module_perms(self, app_label):
         # the admin requires this method
-        return self.is_active_superuser()
+        from sentry.auth.utils import is_active_superuser
+        return is_active_superuser(self)
 
     def get_display_name(self):
         return self.first_name or self.email or self.username
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index 3086088540..2931f7df22 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -53,7 +53,7 @@
 <body class="{% block wrapperclass %}{% endblock %}">
   {% block body %}
   <div class="app">
-    {% if request.user.is_active_superuser %}
+    {% if request.user.is_superuser %}
         {% show_system_status %}
     {% endif %}
 
@@ -76,7 +76,7 @@
             </a>
             <ul class="dropdown-menu dropdown-menu-right">
               <li><a href="{% url 'sentry-account-settings' %}">{% trans "Account" %}</a></li>
-              {% if request.user.is_active_superuser %}
+              {% if request.user.is_superuser %}
                 <li><a href="{% url 'sentry-admin-overview' %}">{% trans "Admin" %}</a></li>
               {% endif %}
               <li><a href="{% url 'sentry-logout' %}">{% trans "Sign out" %}</a></li>
diff --git a/src/sentry/utils/debug.py b/src/sentry/utils/debug.py
index 0058535a47..e387287bd7 100644
--- a/src/sentry/utils/debug.py
+++ b/src/sentry/utils/debug.py
@@ -16,6 +16,8 @@ import StringIO
 from django.conf import settings
 from django.http import HttpResponse
 
+from sentry.auth.utils import is_active_superuser
+
 words_re = re.compile(r'\s+')
 
 group_prefix_re = [
@@ -31,7 +33,7 @@ class ProfileMiddleware(object):
             return False
         if settings.DEBUG:
             return True
-        if hasattr(request, 'user') and request.user.is_active_superuser():
+        if hasattr(request, 'user') and is_active_superuser(request.user):
             return True
         return False
 
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 1e0586940a..204ca97852 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -4,6 +4,7 @@ import logging
 import traceback
 
 from django.conf import settings
+from django.contrib.auth.models import AnonymousUser
 from django.core.cache import cache
 from django.core.urlresolvers import reverse
 from django.http import HttpResponse, HttpResponseRedirect, HttpResponseNotAllowed
@@ -19,7 +20,7 @@ from sentry.coreapi import (
     APIError, APIForbidden, APIRateLimited, ClientApiHelper, CspApiHelper,
 )
 from sentry.event_manager import EventManager
-from sentry.models import AnonymousUser, Project
+from sentry.models import Project
 from sentry.signals import event_received
 from sentry.quotas.base import RateLimit
 from sentry.utils import json, metrics
diff --git a/src/sentry/web/frontend/admin.py b/src/sentry/web/frontend/admin.py
index 57047a9c5a..3db6b3b281 100644
--- a/src/sentry/web/frontend/admin.py
+++ b/src/sentry/web/frontend/admin.py
@@ -23,6 +23,7 @@ from django.http import HttpResponseRedirect, HttpResponse
 from django.views.decorators.csrf import csrf_protect
 
 from sentry.app import env
+from sentry.auth.utils import is_active_superuser
 from sentry.models import Team, Project, User
 from sentry.plugins import plugins
 from sentry.utils.http import absolute_uri
@@ -113,7 +114,7 @@ def manage_users(request):
 @transaction.atomic
 @csrf_protect
 def create_new_user(request):
-    if not request.user.is_active_superuser():
+    if not is_active_superuser(request.user):
         return HttpResponseRedirect(reverse('sentry'))
 
     form = NewUserForm(request.POST or None, initial={
@@ -160,7 +161,7 @@ def create_new_user(request):
 @requires_admin
 @csrf_protect
 def edit_user(request, user_id):
-    if not request.user.is_active_superuser():
+    if not is_active_superuser(request.user):
         return HttpResponseRedirect(reverse('sentry'))
 
     try:
diff --git a/src/sentry/web/frontend/admin_queue.py b/src/sentry/web/frontend/admin_queue.py
index fe44fa57c9..e5539bed8c 100644
--- a/src/sentry/web/frontend/admin_queue.py
+++ b/src/sentry/web/frontend/admin_queue.py
@@ -1,12 +1,13 @@
 from __future__ import absolute_import
 
+from sentry.auth.utils import is_active_superuser
 from sentry.celery import app
 from sentry.web.frontend.base import BaseView
 
 
 class AdminQueueView(BaseView):
     def has_permission(self, request):
-        return request.user.is_active_superuser()
+        return is_active_superuser(request.user)
 
     def handle(self, request):
         context = {
diff --git a/src/sentry/web/frontend/auth_logout.py b/src/sentry/web/frontend/auth_logout.py
index c8e3fd5594..21ca885350 100644
--- a/src/sentry/web/frontend/auth_logout.py
+++ b/src/sentry/web/frontend/auth_logout.py
@@ -1,8 +1,8 @@
 from __future__ import absolute_import
 
 from django.contrib.auth import logout
+from django.contrib.auth.models import AnonymousUser
 
-from sentry.models import AnonymousUser
 from sentry.web.frontend.base import BaseView
 from sentry.utils.auth import get_login_redirect
 
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index ab2c061874..8c2734b390 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -13,6 +13,7 @@ from django.views.generic import View
 from sudo.views import redirect_to_sudo
 
 from sentry.auth import access
+from sentry.auth.utils import is_active_superuser
 from sentry.models import (
     Organization, OrganizationStatus, Project, Team
 )
@@ -38,7 +39,7 @@ class OrganizationMixin(object):
             organization_slug = request.session.get('activeorg')
 
         if organization_slug is not None:
-            if request.user.is_active_superuser():
+            if is_active_superuser(request.user):
                 try:
                     active_organization = Organization.objects.get_from_cache(
                         slug=organization_slug,
diff --git a/src/sentry/web/frontend/organization_member_settings.py b/src/sentry/web/frontend/organization_member_settings.py
index 190ec548c6..623d127e9a 100644
--- a/src/sentry/web/frontend/organization_member_settings.py
+++ b/src/sentry/web/frontend/organization_member_settings.py
@@ -6,6 +6,7 @@ from django.db.models import Q
 from django.utils.translation import ugettext_lazy as _, ugettext
 
 from sentry import roles
+from sentry.auth.utils import is_active_superuser
 from sentry.models import OrganizationMember, OrganizationMemberTeam, Team
 from sentry.web.frontend.base import OrganizationView
 from sentry.web.forms.edit_organization_member import EditOrganizationMemberForm
@@ -65,7 +66,7 @@ class OrganizationMemberSettingsView(OrganizationView):
 
         can_admin = request.access.has_scope('member:delete')
 
-        if can_admin and not request.user.is_active_superuser():
+        if can_admin and not is_active_superuser(request.user):
             acting_member = OrganizationMember.objects.get(
                 user=request.user,
                 organization=organization,
diff --git a/src/sentry/web/frontend/team_settings.py b/src/sentry/web/frontend/team_settings.py
index 6b8912eebb..81d20666b7 100644
--- a/src/sentry/web/frontend/team_settings.py
+++ b/src/sentry/web/frontend/team_settings.py
@@ -7,6 +7,7 @@ from django.db import IntegrityError
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
+from sentry.auth.utils import is_active_superuser
 from sentry.models import AuditLogEntry, AuditLogEntryEvent, Team
 from sentry.web.frontend.base import TeamView
 
@@ -60,7 +61,7 @@ class TeamSettingsView(TeamView):
 
             return HttpResponseRedirect(reverse('sentry-manage-team', args=[organization.slug, team.slug]))
 
-        if request.user.is_active_superuser():
+        if is_active_superuser(request.user):
             can_remove_team = True
         else:
             can_remove_team = request.access.has_team_scope(team, 'team:delete')
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 6933622fbd..e93f97b246 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -10,14 +10,16 @@ from __future__ import absolute_import, print_function
 import logging
 
 from django.conf import settings
+from django.contrib.auth.models import AnonymousUser
 from django.core.urlresolvers import reverse, resolve
 from django.http import HttpResponse
 from django.template import loader, RequestContext, Context
 
 from sentry.api.serializers.base import serialize
 from sentry.auth import access
+from sentry.auth.utils import is_active_superuser
 from sentry.constants import EVENTS_PER_PAGE
-from sentry.models import AnonymousUser, Project, Team
+from sentry.models import Project, Team
 
 logger = logging.getLogger('sentry')
 
@@ -37,7 +39,7 @@ def group_is_public(group, user):
     if not user.is_authenticated():
         return True
     # superusers can always view events
-    if user.is_active_superuser():
+    if is_active_superuser(user):
         return False
     # project owners can view events
     if group.project in Project.objects.get_for_user(team=group.project.team, user=user):
diff --git a/tests/sentry/auth/test_access.py b/tests/sentry/auth/test_access.py
index c2cfebbb88..ef380b550b 100644
--- a/tests/sentry/auth/test_access.py
+++ b/tests/sentry/auth/test_access.py
@@ -1,9 +1,10 @@
 from __future__ import absolute_import
 
+from django.contrib.auth.models import AnonymousUser
 from mock import Mock
 
 from sentry.auth import access
-from sentry.models import AnonymousUser, AuthProvider
+from sentry.models import AuthProvider
 from sentry.testutils import TestCase
 
 
diff --git a/tests/sentry/web/helpers/tests.py b/tests/sentry/web/helpers/tests.py
index f6b29daca6..19fe19dac1 100644
--- a/tests/sentry/web/helpers/tests.py
+++ b/tests/sentry/web/helpers/tests.py
@@ -4,7 +4,8 @@ from __future__ import absolute_import
 
 import mock
 
-from sentry.models import AnonymousUser
+from django.contrib.auth.models import AnonymousUser
+
 from sentry.web.helpers import group_is_public
 from sentry.testutils import TestCase
 
