commit 16ca6b811d6ecf32bc6e58340b9215ca87575104
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 29 16:06:31 2015 -0700

    Move linters out of setuptools hooks

diff --git a/Makefile b/Makefile
index 1baa65b23e..f4ac9cfcd0 100644
--- a/Makefile
+++ b/Makefile
@@ -93,7 +93,7 @@ lint: lint-python lint-js
 
 lint-python:
 	@echo "--> Linting Python files"
-	PYFLAKES_NODOCTEST=1 flake8 src/sentry tests
+	bin/lint src/sentry tests
 	@echo ""
 
 lint-js:
diff --git a/bin/lint b/bin/lint
new file mode 100755
index 0000000000..3a6ed6a3a2
--- /dev/null
+++ b/bin/lint
@@ -0,0 +1,8 @@
+#!/usr/bin/env python
+from __future__ import absolute_import
+
+import sys
+
+from sentry.lint.engine import check_files
+
+sys.exit(check_files(sys.argv[1:]))
diff --git a/hooks/pre-commit b/hooks/pre-commit
index c9009db2b3..721c703ca6 100755
--- a/hooks/pre-commit
+++ b/hooks/pre-commit
@@ -1,43 +1,21 @@
 #!/usr/bin/env python
+from __future__ import absolute_import
 
-import glob
 import os
 import sys
 
-os.environ['PYFLAKES_NODOCTEST'] = '1'
+from glob import glob
+
+from sentry.lint.engine import check_files
 
-# pep8.py uses sys.argv to find setup.cfg
-sys.argv = [os.path.join(os.path.dirname(__file__), os.pardir, os.pardir)]
 
 # git usurbs your bin path for hooks and will always run system python
 if 'VIRTUAL_ENV' in os.environ:
-    site_packages = glob.glob(
+    site_packages = glob(
         '%s/lib/*/site-packages' % os.environ['VIRTUAL_ENV'])[0]
     sys.path.insert(0, site_packages)
 
 
-def py_lint(files_modified):
-    from flake8.main import DEFAULT_CONFIG
-    from flake8.engine import get_style_guide
-
-    # remove non-py files and files which no longer exist
-    files_modified = filter(lambda x: x.endswith('.py'), files_modified)
-
-    flake8_style = get_style_guide(parse_argv=True, config_file=DEFAULT_CONFIG)
-    report = flake8_style.check_files(files_modified)
-
-    return report.total_errors != 0
-
-
-def js_lint(files_modified):
-    has_errors = False
-    files_modified = filter(lambda x: x.endswith(('.js', '.jsx')), files_modified)
-    if files_modified and os.system('npm run-script lint'):
-        has_errors = True
-
-    return has_errors
-
-
 def main():
     from flake8.hooks import run
 
@@ -47,9 +25,8 @@ def main():
 
     files_modified = filter(lambda x: os.path.exists(x), files_modified)
 
-    if any((py_lint(files_modified), js_lint(files_modified))):
-        return 1
-    return 0
+    return check_files(files_modified)
+
 
 if __name__ == '__main__':
     sys.exit(main())
diff --git a/setup.py b/setup.py
index 4330241252..38daf95c66 100755
--- a/setup.py
+++ b/setup.py
@@ -232,8 +232,6 @@ setup(
             'sentry = sentry.utils.runner:main',
         ],
         'flake8.extension': [
-            'C900 = sentry.lint.mock_check:MockCheck',
-            'C901 = sentry.lint.absolute_import_check:AbsoluteImportCheck',
         ],
     },
     classifiers=[
diff --git a/src/sentry/lint/absolute_import_check.py b/src/sentry/lint/absolute_import_check.py
index 27465b8c76..957d3b0243 100644
--- a/src/sentry/lint/absolute_import_check.py
+++ b/src/sentry/lint/absolute_import_check.py
@@ -21,8 +21,8 @@ class ImportVisitor(ast.NodeVisitor):
 
 class AbsoluteImportCheck(object):
     name = 'absolute-import-checker'
-    version = '0'
-    _error = "C901 Missing `from __future__ import absolute_import`"
+    code = 'C901'
+    msg = "C901 Missing `from __future__ import absolute_import`"
 
     def __init__(self, tree, filename=None):
         self.tree = tree
@@ -31,4 +31,4 @@ class AbsoluteImportCheck(object):
         visitor = ImportVisitor()
         visitor.visit(self.tree)
         if not visitor.has_import:
-            yield 0, 0, self._error, type(self)
+            yield 0, 0, self.msg, type(self)
diff --git a/src/sentry/lint/engine.py b/src/sentry/lint/engine.py
new file mode 100644
index 0000000000..9ed23cf49f
--- /dev/null
+++ b/src/sentry/lint/engine.py
@@ -0,0 +1,71 @@
+from __future__ import absolute_import
+
+import os
+import pep8
+import sys
+
+os.environ['PYFLAKES_NODOCTEST'] = '1'
+
+
+def register_checks():
+    from sentry.lint.absolute_import_check import AbsoluteImportCheck
+    from sentry.lint.mock_check import MockCheck
+
+    pep8.register_check(MockCheck, codes=[MockCheck.code])
+    pep8.register_check(AbsoluteImportCheck, codes=[AbsoluteImportCheck.code])
+
+
+def get_files(path):
+    results = []
+    for root, _, files in os.walk(path):
+        for name in files:
+            results.append(os.path.join(root, name))
+    return results
+
+
+def py_lint(file_list):
+    from flake8.main import DEFAULT_CONFIG
+    from flake8.engine import get_style_guide
+
+    # remove non-py files and files which no longer exist
+    file_list = filter(lambda x: x.endswith('.py'), file_list)
+
+    flake8_style = get_style_guide(parse_argv=True, config_file=DEFAULT_CONFIG)
+    report = flake8_style.check_files(file_list)
+
+    return report.total_errors != 0
+
+
+def js_lint(file_list):
+    has_errors = False
+    file_list = filter(lambda x: x.endswith(('.js', '.jsx')), file_list)
+    if file_list and os.system('npm run-script lint'):
+        has_errors = True
+
+    return has_errors
+
+
+def check_files(file_list=None):
+    # pep8.py uses sys.argv to find setup.cfg
+    old_sysargv = sys.argv
+    sys.argv = [
+        os.path.join(os.path.dirname(__file__), os.pardir, os.pardir, os.pardir)
+    ]
+
+    try:
+        if not file_list:
+            files_to_check = get_files('.')
+
+        else:
+            files_to_check = []
+            for path in file_list:
+                if os.path.isdir(path):
+                    files_to_check.extend(get_files(path))
+                else:
+                    files_to_check.append(path)
+
+        if any((py_lint(files_to_check), js_lint(files_to_check))):
+            return 1
+        return 0
+    finally:
+        sys.argv = old_sysargv
diff --git a/src/sentry/lint/mock_check.py b/src/sentry/lint/mock_check.py
index 11229f6f61..2c7dde3ad4 100644
--- a/src/sentry/lint/mock_check.py
+++ b/src/sentry/lint/mock_check.py
@@ -24,8 +24,7 @@ class MockAttrVisitor(ast.NodeVisitor):
 
 
 class MockCheck(object):
-    name = 'mock-checker'
-    version = '0'
+    code = 'C900'
     _error_tmpl = "C900 Mock function call is banned: %s"
 
     def __init__(self, tree, filename=None):
