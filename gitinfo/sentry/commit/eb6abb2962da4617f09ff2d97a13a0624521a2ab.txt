commit eb6abb2962da4617f09ff2d97a13a0624521a2ab
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Mon Jul 16 12:47:14 2018 -0700

    feat(ui): Combine integrations list + details pages (#8964)

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 1cba71001e..0942535d80 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -401,22 +401,6 @@ function routes() {
           component={errorHandler(ProjectPluginDetails)}
         />
       </Route>
-      {/* XXX(epurkhiser): This lives under project configurations for now until
-        we've migrated enough integrations that it can live at the org level. */}
-      <Route
-        path="integrations/:providerKey/"
-        name="Integration Configuration"
-        componentPromise={() =>
-          import(/* webpackChunkName: "Integration" */ './views/settings/organizationIntegrations/integration')}
-        component={errorHandler(LazyLoad)}
-      />
-      <Route
-        path="integrations/:providerKey/:integrationId/"
-        name="Integration Configuration"
-        componentPromise={() =>
-          import(/* webpackChunkName: "ProjectIntegration" */ './views/settings/project/projectIntegration')}
-        component={errorHandler(LazyLoad)}
-      />
       <Route
         path="integrations/:providerKey/:integrationId/"
         name="Integration Configuration"
@@ -582,13 +566,6 @@ function routes() {
             import(/*webpackChunkName: OrganizationIntegrations*/ './views/organizationIntegrations')}
           component={errorHandler(LazyLoad)}
         />
-        <Route
-          name="Integration"
-          path=":providerKey/"
-          componentPromise={() =>
-            import(/*webpackChunkName: Integration*/ './views/settings/organizationIntegrations/integration')}
-          component={errorHandler(LazyLoad)}
-        />
         <Route
           name="Configure Integration"
           path=":providerKey/:integrationId/"
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.jsx
index d368f58f68..94046bcfbf 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.jsx
@@ -91,12 +91,11 @@ export default class AddIntegrationButton extends React.Component {
   render() {
     // eslint-disable-next-line no-unused-vars
     const {provider, onAddIntegration, reinstall, ...buttonProps} = this.props;
-    let buttonText = reinstall ? t('Reinstall') : t('Add') + ' ' + provider.metadata.noun;
+    let buttonText = t(reinstall ? 'Reinstall %s' : 'Add %s', provider.metadata.noun);
 
     return (
       <Tooltip
         disabled={provider.canAdd}
-        tooltipOptions={{placement: 'left'}}
         title={`Integration cannot be added on Sentry. Enable this integration via the ${provider.name} instance.`}
       >
         <span>
@@ -105,7 +104,6 @@ export default class AddIntegrationButton extends React.Component {
             disabled={!provider.canAdd}
             onClick={() => this.handleAddIntegration(provider)}
           >
-            {!reinstall && <span className="icon icon-add" />}
             {buttonText}
           </Button>
         </span>
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx
index 63ab32346d..d8a1e7e30b 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx
@@ -1,75 +1,136 @@
-import {Box} from 'grid-emotion';
-import PropTypes from 'prop-types';
+import {Box, Flex} from 'grid-emotion';
+import {keyBy} from 'lodash';
+import {withTheme} from 'emotion-theming';
 import React from 'react';
 import styled from 'react-emotion';
 
+import {
+  Panel,
+  PanelBody,
+  PanelHeader,
+  PanelItem,
+  PanelItemGroup,
+} from 'app/components/panels';
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {openIntegrationDetails} from 'app/actionCreators/modal';
+import {sortArray} from 'app/utils';
 import {t} from 'app/locale';
-import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
 import AsyncComponent from 'app/components/asyncComponent';
 import Button from 'app/components/buttons/button';
+import CircleIndicator from 'app/components/circleIndicator';
+import InstalledIntegration from 'app/views/organizationIntegrations/installedIntegration';
 import Link from 'app/components/link';
+import LoadingIndicator from 'app/components/loadingIndicator';
 import PluginIcon from 'app/plugins/components/pluginIcon';
+import SentryTypes from 'app/proptypes';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import theme from 'app/utils/theme';
-
-const ProviderName = styled.div`
-  font-size: 16px;
-  font-weight: bold;
-  margin-bottom: 3px;
-`;
-
-const AuthorName = styled.div`
-  color: ${p => p.theme.gray2};
-  font-size: 14px;
-`;
 
 export default class OrganizationIntegrations extends AsyncComponent {
-  static propTypes = {
-    linkPrefix: PropTypes.string,
-    hideHeader: PropTypes.bool,
+  static contextTypes = {
+    organization: SentryTypes.Organization,
   };
 
+  // Some integrations require visiting a different website to add them. When
+  // we come back to the tab we want to show our integrations as soon as we can.
+  reloadOnVisible = true;
+  shouldReloadOnVisible = true;
+
   getEndpoints() {
     let {orgId} = this.props.params;
     return [
       ['config', `/organizations/${orgId}/config/integrations/`],
-      ['organization', `/organizations/${orgId}/`],
+      ['integrations', `/organizations/${orgId}/integrations/`],
     ];
   }
 
+  mergeIntegration = integration => {
+    // Merge the new integration into the list. If we're updating an
+    // integration overwrite the old integration.
+    const keyedItems = keyBy(this.state.integrations, i => i.id);
+    const integrations = sortArray(
+      Object.values({...keyedItems, [integration.id]: integration}),
+      i => i.name
+    );
+    this.setState({integrations});
+  };
+
+  handleDeleteIntegration = integration => {
+    const {orgId} = this.props.params;
+
+    const origIntegrations = [...this.state.integrations];
+
+    const integrations = this.state.integrations.filter(i => i.id !== integration.id);
+    this.setState({integrations});
+
+    const options = {
+      method: 'DELETE',
+      error: () => {
+        this.setState({integrations: origIntegrations});
+        addErrorMessage(t('Failed to remove Integration'));
+      },
+    };
+
+    this.api.request(`/organizations/${orgId}/integrations/${integration.id}/`, options);
+  };
+
+  handleDisableIntegration = integration => {
+    let url;
+    if (integration.accountType === 'User') {
+      url = 'https://github.com/settings/installations';
+    } else {
+      let orgName = integration.domainName.split('/')[1];
+      url = `https://github.com/organizations/${orgName}/settings/installations`;
+    }
+    window.open(url, '_blank');
+  };
+
   renderBody() {
-    let {location} = this.props;
-    let orgFeatures = new Set(this.state.organization.features);
-    let internalIntegrations = new Set(['jira']);
-
-    const linkPrefix = this.props.linkPrefix ? this.props.linkPrefix : location.pathname;
-
-    const integrations = this.state.config.providers
-      .filter(provider => {
-        return (
-          orgFeatures.has('internal-catchall') || !internalIntegrations.has(provider.key)
-        );
-      })
-      .map(provider => (
-        <PanelItem key={provider.key} align="center">
-          <Box>
-            <PluginIcon size={32} pluginId={provider.key} />
-          </Box>
-          <Box px={2} flex={1}>
-            <ProviderName>
-              <Link to={`${linkPrefix}${provider.key}/`} css={{color: theme.gray5}}>
-                {provider.name}
-              </Link>
-            </ProviderName>
-            <AuthorName>{provider.metadata.author}</AuthorName>
-          </Box>
-          <Box>
-            <Button size="small" to={`${linkPrefix}${provider.key}/`}>
-              {t('Manage')}
-            </Button>
-          </Box>
-        </PanelItem>
-      ));
+    const orgId = this.props.params;
+
+    const integrations = this.state.config.providers.map(provider => {
+      const installed = this.state.integrations
+        .filter(i => i.provider.key === provider.key)
+        .map(integration => (
+          <InstalledIntegration
+            key={integration.id}
+            orgId={orgId}
+            provider={provider}
+            integration={integration}
+            onRemove={this.handleDeleteIntegration}
+            onDisable={this.handleDisableIntegration}
+            onReinstallIntegration={this.mergeIntegration}
+          />
+        ));
+
+      return (
+        <React.Fragment key={provider.key}>
+          <PanelItem align="center">
+            <PluginIcon size={36} pluginId={provider.key} />
+            <Box px={2} flex={1}>
+              <ProviderName>{provider.name}</ProviderName>
+              <ProviderDetails>
+                <Status enabled={installed.length > 0} />
+                <Link onClick={() => openIntegrationDetails({provider})}>Learn More</Link>
+              </ProviderDetails>
+            </Box>
+            <Box>
+              <Button
+                icon="icon-circle-add"
+                size="small"
+                onClick={() =>
+                  openIntegrationDetails({
+                    provider,
+                    onAddIntegration: this.mergeIntegration,
+                  })}
+              >
+                {t('Install')}
+              </Button>
+            </Box>
+          </PanelItem>
+          {installed.length > 0 && <PanelItemGroup>{installed}</PanelItemGroup>}
+        </React.Fragment>
+      );
+    });
 
     return (
       <React.Fragment>
@@ -79,6 +140,7 @@ export default class OrganizationIntegrations extends AsyncComponent {
             <Box px={2} flex="1">
               {t('Integrations')}
             </Box>
+            {this.state.reloading && <StyledLoadingIndicator mini />}
           </PanelHeader>
           <PanelBody>{integrations}</PanelBody>
         </Panel>
@@ -86,3 +148,36 @@ export default class OrganizationIntegrations extends AsyncComponent {
     );
   }
 }
+
+const StyledLoadingIndicator = styled(LoadingIndicator)`
+  position: absolute;
+  right: 7px;
+  top: 50%;
+  transform: translateY(-16px);
+`;
+
+const ProviderName = styled('div')`
+  font-weight: bold;
+`;
+
+const ProviderDetails = styled(Flex)`
+  align-items: center;
+  margin-top: 6px;
+  font-size: 0.8em;
+`;
+
+const Status = styled(
+  withTheme(props => {
+    const {enabled, ...p} = props;
+    return (
+      <React.Fragment>
+        <CircleIndicator size={6} color={enabled ? p.theme.success : p.theme.gray2} />
+        <div {...p}>{enabled ? t('Installed') : t('Not Installed')}</div>
+      </React.Fragment>
+    );
+  })
+)`
+  color: ${p => (p.enabled ? p.theme.success : p.theme.gray2)};
+  margin-left: 5px;
+  margin-right: 10px;
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.jsx
index 06c3ea3861..327e344c99 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.jsx
@@ -9,6 +9,7 @@ import Button from 'app/components/buttons/button';
 import Confirm from 'app/components/confirm';
 import IntegrationItem from 'app/views/organizationIntegrations/integrationItem';
 import AddIntegrationButton from 'app/views/organizationIntegrations/addIntegrationButton';
+import Tooltip from 'app/components/tooltip';
 
 const CONFIGURABLE_FEATURES = ['commits'];
 
@@ -19,7 +20,7 @@ export default class InstalledIntegration extends React.Component {
     integration: PropTypes.object.isRequired,
     onRemove: PropTypes.func.isRequired,
     onDisable: PropTypes.func.isRequired,
-    onReinstallIntegration: PropTypes.func,
+    onReinstallIntegration: PropTypes.func.isRequired,
   };
 
   /**
@@ -65,7 +66,7 @@ export default class InstalledIntegration extends React.Component {
         priority="danger"
         onConfirm={() => this.props.onDisable(integration)}
       >
-        <Button size="small" icon="icon-trash" />
+        <Button size="xsmall" icon="icon-trash" />
       </Confirm>
     );
   }
@@ -102,47 +103,51 @@ export default class InstalledIntegration extends React.Component {
         message={message}
         confirmText={actionText}
         priority="danger"
-        onConfirm={() => this.props.onRemove()}
+        onConfirm={() => this.props.onRemove(integration)}
       >
-        <Button size="small" icon="icon-trash" />
+        <Button size="xsmall" icon="icon-trash" />
       </Confirm>
     );
   }
 
   render() {
     const {integration, provider, orgId} = this.props;
-    const style = integration.status === 'disabled' ? {color: '#bebebe'} : {};
 
     return (
       <React.Fragment>
-        <PanelItem p={0} py={2} key={integration.id} align="center">
-          <Box px={2} flex={1}>
-            <IntegrationItem integration={integration} style={style} />
+        <PanelItem py={1} px={2} key={integration.id} align="center">
+          <Box flex={1}>
+            <IntegrationItem compact integration={integration} />
           </Box>
-          {integration.status === 'active' &&
-            this.hasConfiguration() && (
-              <Box mr={1}>
-                <Button
-                  size="small"
-                  to={`/settings/${orgId}/integrations/${provider.key}/${integration.id}/`}
-                >
-                  {t('Configure')}
-                </Button>
-              </Box>
-            )}
-          {integration.status === 'disabled' && (
-            <Box mr={1}>
+          <Box mr={1}>
+            {integration.status === 'disabled' && (
               <AddIntegrationButton
-                size="small"
+                size="xsmall"
                 priority="danger"
                 provider={provider}
                 integration={integration}
                 onAddIntegration={this.reinstallIntegration}
                 reinstall={true}
               />
-            </Box>
-          )}
-          <Box mr={1} pr={2}>
+            )}
+            {integration.status === 'active' && (
+              <Tooltip
+                disabled={this.hasConfiguration()}
+                tooltipOptions={{placement: 'left'}}
+                title="Integration not configurable"
+              >
+                <span>
+                  <Button
+                    size="xsmall"
+                    icon="icon-settings"
+                    disabled={!this.hasConfiguration()}
+                    to={`/settings/${orgId}/integrations/${provider.key}/${integration.id}/`}
+                  />
+                </span>
+              </Tooltip>
+            )}
+          </Box>
+          <Box>
             {integration.status === 'active' && integration.provider.key === 'github'
               ? this.renderDisableIntegration(integration)
               : this.renderRemoveIntegration(integration)}
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetails.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetails.jsx
deleted file mode 100644
index 59736b1152..0000000000
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetails.jsx
+++ /dev/null
@@ -1,60 +0,0 @@
-import {Flex, Box} from 'grid-emotion';
-import PropTypes from 'prop-types';
-import React from 'react';
-import marked from 'marked';
-import styled from 'react-emotion';
-
-import {t} from 'app/locale';
-
-const Details = styled(Flex)`
-  font-size: 1.5rem;
-  line-height: 2.1rem;
-`;
-
-const Description = styled.div`
-  li {
-    margin-bottom: 6px;
-  }
-`;
-
-const AuthorName = styled.div`
-  color: ${p => p.theme.gray2};
-`;
-
-const MetadataLink = styled.a`
-  display: block;
-  margin-bottom: 6px;
-`;
-
-export default class IntegrationDetails extends React.Component {
-  static propTypes = {
-    markdownDescription: PropTypes.string.isRequired,
-    author: PropTypes.string.isRequired,
-    links: PropTypes.arrayOf(
-      PropTypes.shape({
-        href: PropTypes.string.isRequired,
-        title: PropTypes.string.isRequired,
-      })
-    ),
-  };
-
-  render() {
-    const description = marked(this.props.markdownDescription);
-
-    return (
-      <Details>
-        <Box width={5 / 8}>
-          <Description dangerouslySetInnerHTML={{__html: description}} />
-          <AuthorName>{t('By %s', this.props.author)}</AuthorName>
-        </Box>
-        <Box ml={60}>
-          {this.props.links.map(({href, title}) => (
-            <MetadataLink key={href} href={href}>
-              {title}
-            </MetadataLink>
-          ))}
-        </Box>
-      </Details>
-    );
-  }
-}
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.jsx
index 90de6b5619..7a64d47136 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.jsx
@@ -1,36 +1,29 @@
 import {Box, Flex} from 'grid-emotion';
+import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
-import {t} from 'app/locale';
-import PropTypes from 'prop-types';
-import Tooltip from 'app/components/tooltip';
 
+import {t} from 'app/locale';
 import IntegrationIcon from 'app/views/organizationIntegrations/integrationIcon';
-
-const IntegrationName = styled.div`
-  font-size: 1.6rem;
-  margin-bottom: 3px;
-`;
-
-const DomainName = styled.div`
-  color: ${p => p.theme.gray3};
-  font-size: 1.4rem;
-`;
+import Tooltip from 'app/components/tooltip';
+import space from 'app/styles/space';
 
 export default class IntegrationItem extends React.Component {
   static propTypes = {
     integration: PropTypes.object.isRequired,
+    compact: PropTypes.bool,
   };
 
   render() {
-    const {integration, style} = this.props;
+    const {integration, compact} = this.props;
+
     return (
       <Flex>
         <Box>
-          <IntegrationIcon integration={integration} />
+          <IntegrationIcon size={compact ? 26 : 32} integration={integration} />
         </Box>
-        <Box pl={2}>
-          <IntegrationName style={style}>
+        <Labels compact={compact}>
+          <IntegrationName>
             {integration.name}
             {integration.status === 'disabled' && (
               <Tooltip
@@ -42,9 +35,40 @@ export default class IntegrationItem extends React.Component {
               </Tooltip>
             )}
           </IntegrationName>
-          <DomainName style={style}>{integration.domainName}</DomainName>
-        </Box>
+          <DomainName>{integration.domainName}</DomainName>
+        </Labels>
       </Flex>
     );
   }
 }
+
+const ExpandedLabels = styled(p => <Flex direction="column" pl={1} {...p} />)``;
+
+const CompactLabels = styled(p => (
+  <Flex align="center" direction="row" pl={1} {...p} />
+))``;
+
+const IntegrationName = styled('div')`
+  font-size: 1.6rem;
+`;
+
+const DomainName = styled('div')`
+  color: ${p => p.theme.gray3};
+  font-size: 1.4rem;
+
+  /* stylelint-disable-next-line no-duplicate-selectors */
+  ${ExpandedLabels} & {
+    margin-top: 3px;
+  }
+
+  /* stylelint-disable-next-line no-duplicate-selectors */
+  ${CompactLabels} & {
+    color: ${p => p.theme.gray1};
+    margin-left: ${space(1)};
+  }
+`;
+
+const Labels = p => {
+  const {compact, ...props} = p;
+  return compact ? <CompactLabels {...props} /> : <ExpandedLabels {...props} />;
+};
diff --git a/src/sentry/static/sentry/app/views/settings/organizationIntegrations/integration.jsx b/src/sentry/static/sentry/app/views/settings/organizationIntegrations/integration.jsx
deleted file mode 100644
index 6f7b63e7bc..0000000000
--- a/src/sentry/static/sentry/app/views/settings/organizationIntegrations/integration.jsx
+++ /dev/null
@@ -1,188 +0,0 @@
-import {Box} from 'grid-emotion';
-import {keyBy} from 'lodash';
-import React from 'react';
-
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
-import {navigateTo} from 'app/actionCreators/navigation';
-import {sortArray} from 'app/utils';
-import {t} from 'app/locale';
-import AddIntegrationButton from 'app/views/organizationIntegrations/addIntegrationButton';
-import AlertLink from 'app/components/alertLink';
-import AsyncView from 'app/views/asyncView';
-import BreadcrumbTitle from 'app/views/settings/components/settingsBreadcrumb/breadcrumbTitle';
-import EmptyMessage from 'app/views/settings/components/emptyMessage';
-import IndicatorStore from 'app/stores/indicatorStore';
-import InstalledIntegration from 'app/views/organizationIntegrations/installedIntegration';
-import IntegrationDetails from 'app/views/organizationIntegrations/integrationDetails';
-import LoadingError from 'app/components/loadingError';
-import PluginIcon from 'app/plugins/components/pluginIcon';
-import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import marked from 'app/utils/marked';
-
-const alertLinkMarkedRenderer = new marked.Renderer();
-alertLinkMarkedRenderer.paragraph = s => s;
-
-export default class Integration extends AsyncView {
-  getProvider() {
-    const {config} = this.state;
-
-    return config !== null
-      ? config.providers.find(p => p.key == this.props.params.providerKey) || null
-      : null;
-  }
-
-  getTitle() {
-    const provider = this.getProvider();
-
-    return provider === null ? 'Integration' : `${provider.name} Integration`;
-  }
-
-  getEndpoints() {
-    const {orgId, providerKey} = this.props.params;
-
-    return [
-      ['config', `/organizations/${orgId}/config/integrations/`],
-      [
-        'integrations',
-        `/organizations/${orgId}/integrations/?provider_key=${providerKey}`,
-      ],
-    ];
-  }
-
-  mergeIntegration = integration => {
-    // Merge the new integration into the list. If we're updating an
-    // integration overwrite the old integration.
-    const keyedItems = keyBy(this.state.integrations, i => i.id);
-    const integrations = sortArray(
-      Object.values({...keyedItems, [integration.id]: integration}),
-      i => i.name
-    );
-    this.setState({integrations});
-  };
-
-  handleDeleteIntegration = integration => {
-    const {orgId} = this.props.params;
-    const saveIndicator = IndicatorStore.add(t('Removing Integration'));
-
-    const options = {
-      method: 'DELETE',
-      success: () => {
-        this.setState({
-          integrations: this.state.integrations.filter(
-            item => item.id !== integration.id
-          ),
-        });
-        IndicatorStore.addSuccess(t('Integration removed'));
-      },
-      error: () => IndicatorStore.addError(t('Failed to remove Integration')),
-      complete: () => IndicatorStore.remove(saveIndicator),
-    };
-
-    this.api.request(`/organizations/${orgId}/integrations/${integration.id}/`, options);
-  };
-
-  handleDisableIntegration = integration => {
-    let url;
-    if (integration.accountType === 'User') {
-      url = 'https://github.com/settings/installations';
-    } else {
-      let orgName = integration.domainName.split('/')[1];
-      url = `https://github.com/organizations/${orgName}/settings/installations`;
-    }
-    window.open(url, '_blank');
-  };
-
-  renderAlertLink(provider) {
-    const config = provider.metadata.aspects.alert_link;
-
-    if (config === undefined) {
-      return undefined;
-    }
-
-    const linkHtml = marked(config.text, {renderer: alertLinkMarkedRenderer});
-    let link = config.link;
-
-    for (const key in this.props.params) {
-      link = link.replace(`:${key}`, this.props.params[key]);
-    }
-
-    let props = {};
-    if (link.startsWith('http')) {
-      props.href = link;
-    } else {
-      props.onClick = () => navigateTo(link, this.props.router);
-    }
-
-    return (
-      <AlertLink {...props}>
-        <span dangerouslySetInnerHTML={{__html: linkHtml}} />
-      </AlertLink>
-    );
-  }
-
-  renderBody() {
-    const integrations = this.state.integrations;
-    const provider = this.getProvider();
-
-    if (provider === null) {
-      return <LoadingError message={t('Invalid integration provider')} />;
-    }
-
-    const {orgId} = this.props.params;
-    const titleIcon = <PluginIcon size={28} pluginId={provider.key} />;
-
-    const integrationList =
-      integrations.length === 0 ? (
-        <EmptyMessage>{t('No %s integrations configured.', provider.name)}</EmptyMessage>
-      ) : (
-        integrations.map(integration => (
-          <InstalledIntegration
-            key={integration.id}
-            orgId={orgId}
-            provider={provider}
-            integration={integration}
-            onToggleEnabled={e => this.handleToggleProjectIntegration(integration, e)}
-            onRemove={() => this.handleDeleteIntegration(integration)}
-            onDisable={() => this.handleDisableIntegration(integration)}
-            onReinstallIntegration={this.mergeIntegration}
-          />
-        ))
-      );
-
-    return (
-      <React.Fragment>
-        <BreadcrumbTitle routes={this.props.routes} title={provider.name} />
-        <SettingsPageHeader title={provider.name} icon={titleIcon} />
-
-        <Panel>
-          <PanelHeader disablePadding hasButtons>
-            <Box px={2}>{provider.metadata.noun}</Box>
-            <Box mr={1}>
-              <AddIntegrationButton
-                size="xsmall"
-                provider={provider}
-                onAddIntegration={this.mergeIntegration}
-                reinstall={false}
-              />
-            </Box>
-          </PanelHeader>
-          <PanelBody>{integrationList}</PanelBody>
-        </Panel>
-
-        {this.renderAlertLink(provider)}
-
-        <hr />
-
-        <h5>{t('%s Integration', provider.name)}</h5>
-        <IntegrationDetails
-          markdownDescription={provider.metadata.description}
-          author={provider.metadata.author}
-          links={[
-            {href: provider.metadata.issue_url, title: t('Report an Issue')},
-            {href: provider.metadata.source_url, title: t('View Source')},
-          ]}
-        />
-      </React.Fragment>
-    );
-  }
-}
diff --git a/tests/acceptance/test_organization_integrations_settings.py b/tests/acceptance/test_organization_integrations_settings.py
new file mode 100644
index 0000000000..1f7bea0983
--- /dev/null
+++ b/tests/acceptance/test_organization_integrations_settings.py
@@ -0,0 +1,44 @@
+from __future__ import absolute_import
+
+from sentry.models import Integration
+from sentry.testutils import AcceptanceTestCase
+
+
+class OrganizationIntegrationSettingsTest(AcceptanceTestCase):
+    def setUp(self):
+        super(OrganizationIntegrationSettingsTest, self).setUp()
+        self.user = self.create_user('foo@example.com')
+        self.org = self.create_organization(
+            name='Rowdy Tiger',
+            owner=None,
+        )
+        self.team = self.create_team(organization=self.org, name='Mariachi Band')
+        self.project = self.create_project(
+            organization=self.org,
+            teams=[self.team],
+            name='Bengal',
+        )
+        self.create_member(
+            user=self.user,
+            organization=self.org,
+            role='owner',
+            teams=[self.team],
+        )
+        self.model = Integration.objects.create(
+            provider='slack',
+            external_id='some_slack',
+            name='Test Slack',
+            metadata={
+                'domain_name': 'slack-test.slack.com',
+            },
+        )
+
+        self.org_integration = self.model.add_organization(self.org.id)
+
+        self.login_as(self.user)
+
+    def test_all_integrations_list(self):
+        path = '/settings/{}/integrations/'.format(self.org.slug)
+        self.browser.get(path)
+        self.browser.wait_until_not('.loading-indicator')
+        self.browser.snapshot('organization settings - all integrations')
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 74d52b08fa..1c3f3046df 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -581,7 +581,7 @@ window.TestStubs = {
     return {
       domainName: 'jira.com/test-integration',
       icon: 'http://jira.example.com/integration_icon.png',
-      id: '1',
+      id: '2',
       name: 'Jira Test Integration',
       provider: {
         name: 'Jira',
diff --git a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
index 777a00d5ba..02b3a9e2f0 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
@@ -1,37 +1,96 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
-exports[`Integration render() with one integration renders 1`] = `
-<SideEffect(DocumentTitle)
-  title="GitHub Integration - Sentry"
->
-  <React.Fragment>
-    <BreadcrumbTitle
-      title="GitHub"
-    />
-    <SettingsPageHeading
-      icon={
-        <PluginIcon
-          pluginId="github"
-          size={28}
-        />
-      }
-      title="GitHub"
-    />
-    <Panel>
-      <PanelHeader
-        disablePadding={true}
-        hasButtons={true}
+exports[`OrganizationIntegrations render() with installed integrations Displays InstalledIntegration 1`] = `
+<React.Fragment>
+  <SettingsPageHeading
+    title="Integrations"
+  />
+  <Panel>
+    <PanelHeader
+      disablePadding={true}
+    >
+      <Box
+        flex="1"
+        px={2}
       >
-        <Box
-          px={2}
-        >
-          Installation
-        </Box>
-        <Box
-          mr={1}
+        Integrations
+      </Box>
+    </PanelHeader>
+    <PanelBody
+      direction="column"
+      disablePadding={true}
+      flex={false}
+    >
+      <React.Fragment
+        key="github"
+      >
+        <PanelItem
+          align="center"
+          p={2}
         >
-          <AddIntegrationButton
-            onAddIntegration={[Function]}
+          <PluginIcon
+            pluginId="github"
+            size={36}
+          />
+          <Box
+            flex={1}
+            px={2}
+          >
+            <ProviderName>
+              GitHub
+            </ProviderName>
+            <ProviderDetails>
+              <Status
+                enabled={true}
+              />
+              <Link
+                onClick={[Function]}
+              >
+                Learn More
+              </Link>
+            </ProviderDetails>
+          </Box>
+          <Box>
+            <Button
+              disabled={false}
+              icon="icon-circle-add"
+              onClick={[Function]}
+              size="small"
+            >
+              Install
+            </Button>
+          </Box>
+        </PanelItem>
+        <PanelItemGroup>
+          <InstalledIntegration
+            integration={
+              Object {
+                "configData": Object {},
+                "configOrganization": Array [],
+                "configProject": Array [],
+                "domainName": "gtithub.com/test-integration",
+                "icon": "http://example.com/integration_icon.png",
+                "id": "1",
+                "name": "Test Integration",
+                "projects": Array [],
+                "provider": Object {
+                  "canAdd": true,
+                  "canAddProject": false,
+                  "features": Array [],
+                  "key": "github",
+                  "name": "GitHub",
+                },
+              }
+            }
+            key="1"
+            onDisable={[Function]}
+            onReinstallIntegration={[Function]}
+            onRemove={[Function]}
+            orgId={
+              Object {
+                "orgId": "org-slug",
+              }
+            }
             provider={
               Object {
                 "canAdd": true,
@@ -62,105 +121,217 @@ exports[`Integration render() with one integration renders 1`] = `
                 },
               }
             }
-            reinstall={false}
-            size="xsmall"
           />
-        </Box>
-      </PanelHeader>
-      <PanelBody
-        direction="column"
-        disablePadding={true}
-        flex={false}
+        </PanelItemGroup>
+      </React.Fragment>
+      <React.Fragment
+        key="jira"
       >
-        <InstalledIntegration
-          integration={
-            Object {
-              "configData": Object {},
-              "configOrganization": Array [],
-              "configProject": Array [],
-              "domainName": "gtithub.com/test-integration",
-              "icon": "http://example.com/integration_icon.png",
-              "id": "1",
-              "name": "Test Integration",
-              "projects": Array [],
-              "provider": Object {
-                "canAdd": true,
-                "canAddProject": false,
-                "features": Array [],
-                "key": "github",
-                "name": "GitHub",
-              },
+        <PanelItem
+          align="center"
+          p={2}
+        >
+          <PluginIcon
+            pluginId="jira"
+            size={36}
+          />
+          <Box
+            flex={1}
+            px={2}
+          >
+            <ProviderName>
+              Jira
+            </ProviderName>
+            <ProviderDetails>
+              <Status
+                enabled={true}
+              />
+              <Link
+                onClick={[Function]}
+              >
+                Learn More
+              </Link>
+            </ProviderDetails>
+          </Box>
+          <Box>
+            <Button
+              disabled={false}
+              icon="icon-circle-add"
+              onClick={[Function]}
+              size="small"
+            >
+              Install
+            </Button>
+          </Box>
+        </PanelItem>
+        <PanelItemGroup>
+          <InstalledIntegration
+            integration={
+              Object {
+                "configData": Object {},
+                "configOrganization": Array [],
+                "configProject": Array [],
+                "domainName": "jira.com/test-integration",
+                "icon": "http://jira.example.com/integration_icon.png",
+                "id": "2",
+                "name": "Jira Test Integration",
+                "projects": Array [],
+                "provider": Object {
+                  "canAdd": true,
+                  "canAddProject": true,
+                  "features": Array [],
+                  "key": "jira",
+                  "name": "Jira",
+                },
+              }
             }
-          }
-          key="1"
-          onDisable={[Function]}
-          onReinstallIntegration={[Function]}
-          onRemove={[Function]}
-          onToggleEnabled={[Function]}
-          orgId="org-slug"
-          provider={
-            Object {
-              "canAdd": true,
-              "canAddProject": false,
-              "config": Array [],
-              "features": Array [],
-              "key": "github",
-              "metadata": Object {
-                "aspects": Object {
-                  "alerts": Array [
-                    Object {
-                      "text": "This is a an alert example",
-                      "type": "warning",
-                    },
-                  ],
+            key="2"
+            onDisable={[Function]}
+            onReinstallIntegration={[Function]}
+            onRemove={[Function]}
+            orgId={
+              Object {
+                "orgId": "org-slug",
+              }
+            }
+            provider={
+              Object {
+                "canAdd": false,
+                "canAddProject": true,
+                "config": Array [],
+                "features": Array [],
+                "key": "jira",
+                "metadata": Object {
+                  "aspects": Object {
+                    "externalInstall": Array [
+                      Object {
+                        "buttonText": "Visit Jira",
+                        "noticeText": "You must visit jira to install the integration",
+                        "url": "http://jira.com",
+                      },
+                    ],
+                  },
+                  "author": "Rick",
+                  "description": "*markdown* formatted Jira _description_",
+                  "issue_url": "http://example.com/jira_integration_issue_url",
+                  "noun": "Instance",
+                  "source_url": "http://example.com/jira_integration_source_url",
                 },
-                "author": "Morty",
-                "description": "*markdown* formatted _description_",
-                "issue_url": "http://example.com/integration_issue_url",
-                "noun": "Installation",
-                "source_url": "http://example.com/integration_source_url",
-              },
-              "name": "GitHub",
-              "setupDialog": Object {
-                "height": 100,
-                "url": "/github-integration-setup-uri/",
-                "width": 100,
-              },
+                "name": "Jira",
+              }
             }
-          }
-        />
-      </PanelBody>
-    </Panel>
-    <hr />
-    <h5>
-      GitHub Integration
-    </h5>
-    <IntegrationDetails
-      author="Morty"
-      links={
-        Array [
-          Object {
-            "href": "http://example.com/integration_issue_url",
-            "title": "Report an Issue",
-          },
-          Object {
-            "href": "http://example.com/integration_source_url",
-            "title": "View Source",
-          },
-        ]
-      }
-      markdownDescription="*markdown* formatted _description_"
-    />
-  </React.Fragment>
-</SideEffect(DocumentTitle)>
+          />
+        </PanelItemGroup>
+      </React.Fragment>
+    </PanelBody>
+  </Panel>
+</React.Fragment>
 `;
 
-exports[`Integration render() without any integrations Displays an error for an invalid provider key 1`] = `
-<SideEffect(DocumentTitle)
-  title="Integration - Sentry"
->
-  <LoadingError
-    message="Invalid integration provider"
+exports[`OrganizationIntegrations render() without integrations Displays integration providers 1`] = `
+<React.Fragment>
+  <SettingsPageHeading
+    title="Integrations"
   />
-</SideEffect(DocumentTitle)>
+  <Panel>
+    <PanelHeader
+      disablePadding={true}
+    >
+      <Box
+        flex="1"
+        px={2}
+      >
+        Integrations
+      </Box>
+    </PanelHeader>
+    <PanelBody
+      direction="column"
+      disablePadding={true}
+      flex={false}
+    >
+      <React.Fragment
+        key="github"
+      >
+        <PanelItem
+          align="center"
+          p={2}
+        >
+          <PluginIcon
+            pluginId="github"
+            size={36}
+          />
+          <Box
+            flex={1}
+            px={2}
+          >
+            <ProviderName>
+              GitHub
+            </ProviderName>
+            <ProviderDetails>
+              <Status
+                enabled={false}
+              />
+              <Link
+                onClick={[Function]}
+              >
+                Learn More
+              </Link>
+            </ProviderDetails>
+          </Box>
+          <Box>
+            <Button
+              disabled={false}
+              icon="icon-circle-add"
+              onClick={[Function]}
+              size="small"
+            >
+              Install
+            </Button>
+          </Box>
+        </PanelItem>
+      </React.Fragment>
+      <React.Fragment
+        key="jira"
+      >
+        <PanelItem
+          align="center"
+          p={2}
+        >
+          <PluginIcon
+            pluginId="jira"
+            size={36}
+          />
+          <Box
+            flex={1}
+            px={2}
+          >
+            <ProviderName>
+              Jira
+            </ProviderName>
+            <ProviderDetails>
+              <Status
+                enabled={false}
+              />
+              <Link
+                onClick={[Function]}
+              >
+                Learn More
+              </Link>
+            </ProviderDetails>
+          </Box>
+          <Box>
+            <Button
+              disabled={false}
+              icon="icon-circle-add"
+              onClick={[Function]}
+              size="small"
+            >
+              Install
+            </Button>
+          </Box>
+        </PanelItem>
+      </React.Fragment>
+    </PanelBody>
+  </Panel>
+</React.Fragment>
 `;
diff --git a/tests/js/spec/views/settings/organizationIntegrations/addIntegrationButton.spec.jsx b/tests/js/spec/views/settings/organizationIntegrations/addIntegrationButton.spec.jsx
new file mode 100644
index 0000000000..c7993cdfea
--- /dev/null
+++ b/tests/js/spec/views/settings/organizationIntegrations/addIntegrationButton.spec.jsx
@@ -0,0 +1,57 @@
+/*global global*/
+import React from 'react';
+
+import {mount} from 'enzyme';
+import AddIntegrationButton from 'app/views/organizationIntegrations/addIntegrationButton';
+
+describe('AddIntegrationButton', function() {
+  const provider = TestStubs.GitHubIntegrationProvider();
+  const integration = TestStubs.GitHubIntegration();
+
+  const routerContext = TestStubs.routerContext();
+
+  it('Opens the setup dialog on click', function() {
+    const onAdd = jest.fn();
+
+    const wrapper = mount(
+      <AddIntegrationButton provider={provider} onAddIntegration={onAdd} />,
+      routerContext
+    );
+    const focus = jest.fn();
+    const open = jest.fn().mockReturnValue({focus});
+    global.open = open;
+
+    wrapper.find('Button').simulate('click');
+    expect(open.mock.calls).toHaveLength(1);
+    expect(focus.mock.calls).toHaveLength(1);
+    expect(open.mock.calls[0][2]).toBe(
+      'scrollbars=yes,width=100,height=100,top=334,left=462'
+    );
+  });
+
+  it('Adds an integration on dialog completion', function() {
+    const onAdd = jest.fn();
+
+    const wrapper = mount(
+      <AddIntegrationButton provider={provider} onAddIntegration={onAdd} />,
+      routerContext
+    );
+
+    const newIntegration = {
+      source: null,
+      origin: 'null',
+      data: {
+        success: true,
+        data: Object.assign({}, integration, {
+          id: '2',
+          domain_name: 'new-integration.github.com',
+          icon: 'http://example.com/new-integration-icon.png',
+          name: 'New Integration',
+        }),
+      },
+    };
+
+    wrapper.instance().receiveMessage(newIntegration);
+    expect(onAdd).toBeCalledWith(newIntegration.data.data);
+  });
+});
diff --git a/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx b/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
index 2b27b8a1af..06f59afbdb 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
+++ b/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
@@ -1,152 +1,112 @@
 /*global global*/
 import React from 'react';
-import {mount, shallow} from 'enzyme';
 
-import Integration from 'app/views/settings/organizationIntegrations/integration';
 import {Client} from 'app/api';
+import {shallow} from 'enzyme';
+import {openIntegrationDetails} from 'app/actionCreators/modal';
+import OrganizationIntegrations from 'app/views/organizationIntegrations';
 
-describe('Integration', function() {
+jest.mock('app/actionCreators/modal', () => ({
+  openIntegrationDetails: jest.fn(),
+}));
+
+describe('OrganizationIntegrations', function() {
   beforeEach(function() {
     Client.clearMockResponses();
   });
 
   describe('render()', function() {
     const org = TestStubs.Organization();
-    const project = TestStubs.Project();
-    const provider = TestStubs.GitHubIntegrationProvider();
-    const integration = TestStubs.GitHubIntegration();
+
+    const githubProvider = TestStubs.GitHubIntegrationProvider();
+    const jiraProvider = TestStubs.JiraIntegrationProvider();
+
+    const githubIntegration = TestStubs.GitHubIntegration();
+    const jiraIntegration = TestStubs.JiraIntegration();
+
     const params = {
       orgId: org.slug,
-      projectId: project.slug,
-      providerKey: provider.key,
     };
+
     const routerContext = TestStubs.routerContext();
 
-    describe('without any integrations', function() {
-      beforeEach(function() {
-        Client.addMockResponse({
-          url: `/organizations/${org.slug}/integrations/?provider_key=${provider.key}`,
-          body: [],
-        });
-        Client.addMockResponse({
-          url: `/organizations/${org.slug}/config/integrations/`,
-          body: {providers: [provider]},
-        });
+    describe('without integrations', function() {
+      Client.addMockResponse({
+        url: `/organizations/${org.slug}/integrations/`,
+        body: [],
       });
-
-      it('Displays an empty list', function() {
-        const wrapper = shallow(<Integration params={params} />, routerContext);
-        expect(wrapper.find('PanelBody EmptyMessage').exists()).toBe(true);
+      Client.addMockResponse({
+        url: `/organizations/${org.slug}/config/integrations/`,
+        body: {providers: [githubProvider, jiraProvider]},
       });
 
-      it('Displays an error for an invalid provider key', function() {
-        Client.addMockResponse({
-          url: `/organizations/${org.slug}/integrations/?provider_key=bad-key`,
-          body: [],
-        });
-        const invalidKeyParams = {...params, providerKey: 'bad-key'};
-        const wrapper = shallow(<Integration params={invalidKeyParams} />, routerContext);
-        expect(wrapper).toMatchSnapshot();
-      });
-    });
-
-    describe('with one integration', function() {
-      beforeEach(function() {
-        Client.addMockResponse({
-          url: `/organizations/${org.slug}/integrations/?provider_key=${provider.key}`,
-          body: [integration],
-        });
-        Client.addMockResponse({
-          url: `/organizations/${org.slug}/config/integrations/`,
-          body: {providers: [provider]},
-        });
-      });
+      const wrapper = shallow(
+        <OrganizationIntegrations params={params} />,
+        routerContext
+      );
 
-      it('renders', function() {
-        const wrapper = shallow(<Integration params={params} />, routerContext);
+      it('Displays integration providers', function() {
         expect(wrapper).toMatchSnapshot();
       });
 
-      it('opens a dialog on integration add', function() {
-        const wrapper = mount(<Integration params={params} />, routerContext);
+      it('Opens the integration dialog on install', function() {
+        const options = {
+          provider: githubProvider,
+          onAddIntegration: wrapper.instance().mergeIntegration,
+        };
 
-        const focus = jest.fn();
-        const open = jest.fn().mockReturnValue({focus});
-        global.open = open;
+        wrapper
+          .find('PanelItem Button')
+          .first()
+          .simulate('click');
 
-        wrapper.find('PanelHeader Button').simulate('click');
-        expect(open.mock.calls).toHaveLength(1);
-        expect(focus.mock.calls).toHaveLength(1);
-        expect(open.mock.calls[0][2]).toBe(
-          'scrollbars=yes,width=100,height=100,top=334,left=462'
-        );
+        expect(openIntegrationDetails).toBeCalledWith(options);
       });
+    });
 
-      it('Adds an integration on dialog completion', function() {
-        const wrapper = mount(<Integration params={params} />, routerContext);
+    describe('with installed integrations', function() {
+      Client.addMockResponse({
+        url: `/organizations/${org.slug}/integrations/`,
+        body: [githubIntegration, jiraIntegration],
+      });
+      Client.addMockResponse({
+        url: `/organizations/${org.slug}/config/integrations/`,
+        body: {providers: [githubProvider, jiraProvider]},
+      });
 
-        wrapper
-          .find('AddIntegrationButton')
-          .instance()
-          .receiveMessage({
-            source: null,
-            origin: 'null',
-            data: {
-              success: true,
-              data: Object.assign({}, integration, {
-                id: '2',
-                domain_name: 'new-integration.github.com',
-                icon: 'http://example.com/new-integration-icon.png',
-                name: 'New Integration',
-              }),
-            },
-          });
+      const wrapper = shallow(
+        <OrganizationIntegrations params={params} />,
+        routerContext
+      );
 
-        expect(wrapper.instance().state.integrations).toHaveLength(2);
+      const updatedIntegration = Object.assign({}, githubIntegration, {
+        domain_name: 'updated-integration.github.com',
+        icon: 'http://example.com/updated-integration-icon.png',
+        name: 'Updated Integration',
       });
 
-      it('Merges existing integrations', function() {
-        const wrapper = mount(<Integration params={params} />, routerContext);
+      it('Displays InstalledIntegration', function() {
+        expect(wrapper).toMatchSnapshot();
+      });
 
-        const updatedIntegration = Object.assign({}, integration, {
-          id: '1',
-          domain_name: 'updated-integration.github.com',
-          icon: 'http://example.com/updated-integration-icon.png',
-          name: 'Updated Integration',
-        });
+      it('Merges installed integrations', function() {
+        wrapper.instance().mergeIntegration(updatedIntegration);
 
-        wrapper
-          .find('AddIntegrationButton')
-          .instance()
-          .receiveMessage({
-            source: null,
-            origin: 'null',
-            data: {
-              success: true,
-              data: updatedIntegration,
-            },
-          });
-
-        expect(wrapper.instance().state.integrations).toHaveLength(1);
-        expect(wrapper.instance().state.integrations[0]).toBe(updatedIntegration);
+        expect(wrapper.instance().state.integrations).toHaveLength(2);
+        expect(wrapper.instance().state.integrations[1]).toBe(updatedIntegration);
       });
 
       it('Deletes an integration', function() {
-        const wrapper = mount(<Integration params={params} />, routerContext);
-
         Client.addMockResponse({
-          url: `/organizations/${org.slug}/integrations/${integration.id}/`,
+          url: `/organizations/${org.slug}/integrations/${jiraIntegration.id}/`,
           method: 'DELETE',
           statusCode: 200,
         });
-        wrapper.find('PanelBody Button').simulate('click');
-        wrapper
-          .find('PanelBody Modal Button')
-          // Delete button should be last
-          .last()
-          .simulate('click');
 
-        expect(wrapper.find('PanelBody EmptyMessage').exists()).toBe(true);
+        wrapper.instance().handleDeleteIntegration(jiraIntegration);
+
+        expect(wrapper.instance().state.integrations).toHaveLength(1);
+        expect(wrapper.instance().state.integrations[0]).toBe(updatedIntegration);
       });
     });
   });
