commit fe33bd29e7e6102af4eaedf821b69bf91d968298
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Jan 2 07:05:32 2020 -0800

    test(selenium): Retry when opening chrome fails (#16193)
    
    Use `TimedRetryPolicy` to retry opening Chrome when it fails. Also add `self-contained-html` option when running `pytest` so the py test results can be uploaded to zeus.

diff --git a/Makefile b/Makefile
index 0433eb7a73..57d05013d4 100644
--- a/Makefile
+++ b/Makefile
@@ -180,9 +180,9 @@ test-acceptance: node-version-check
 	@$(WEBPACK) --display errors-only
 	@echo "--> Running acceptance tests"
 ifndef TEST_GROUP
-	py.test tests/acceptance --cov . --cov-report="xml:.artifacts/acceptance.coverage.xml" --junit-xml=".artifacts/acceptance.junit.xml" --html=".artifacts/acceptance.pytest.html"
+	py.test tests/acceptance --cov . --cov-report="xml:.artifacts/acceptance.coverage.xml" --junit-xml=".artifacts/acceptance.junit.xml" --html=".artifacts/acceptance.pytest.html" --self-contained-html
 else
-	py.test tests/acceptance -m group_$(TEST_GROUP) --cov . --cov-report="xml:.artifacts/acceptance.coverage.xml" --junit-xml=".artifacts/acceptance.junit.xml" --html=".artifacts/acceptance.pytest.html"
+	py.test tests/acceptance -m group_$(TEST_GROUP) --cov . --cov-report="xml:.artifacts/acceptance.coverage.xml" --junit-xml=".artifacts/acceptance.junit.xml" --html=".artifacts/acceptance.pytest.html" --self-contained-html
 endif
 
 	@echo ""
diff --git a/src/sentry/utils/pytest/selenium.py b/src/sentry/utils/pytest/selenium.py
index b6d670c57b..b474aa4f73 100644
--- a/src/sentry/utils/pytest/selenium.py
+++ b/src/sentry/utils/pytest/selenium.py
@@ -11,12 +11,14 @@ import pytest
 from datetime import datetime
 from django.conf import settings
 from selenium import webdriver
-from selenium.common.exceptions import NoSuchElementException
+from selenium.common.exceptions import NoSuchElementException, WebDriverException
 from selenium.webdriver.support.ui import WebDriverWait
 from selenium.webdriver.support import expected_conditions
 from selenium.webdriver.common.action_chains import ActionChains
 from six.moves.urllib.parse import quote, urlparse
 
+from sentry.utils.retries import TimedRetryPolicy
+
 # if we're not running in a PR, we kill the PERCY_TOKEN because its a push
 # to a branch, and we dont want percy comparing things
 # we do need to ensure its run on master so that changes get updated
@@ -312,6 +314,11 @@ def percy(request):
     return percy
 
 
+@TimedRetryPolicy.wrap(timeout=15, exceptions=(WebDriverException,))
+def start_chrome(**chrome_args):
+    return webdriver.Chrome(**chrome_args)
+
+
 @pytest.fixture(scope="function")
 def browser(request, percy, live_server):
     window_size = request.config.getoption("window_size")
@@ -330,10 +337,11 @@ def browser(request, percy, live_server):
         if chrome_path:
             options.binary_location = chrome_path
         chromedriver_path = request.config.getoption("chromedriver_path")
+        chrome_args = {"options": options}
         if chromedriver_path:
-            driver = webdriver.Chrome(executable_path=chromedriver_path, options=options)
-        else:
-            driver = webdriver.Chrome(options=options)
+            chrome_args["executable_path"] = chromedriver_path
+
+        driver = start_chrome(**chrome_args)
     elif driver_type == "firefox":
         driver = webdriver.Firefox()
     elif driver_type == "phantomjs":
diff --git a/src/sentry/utils/retries.py b/src/sentry/utils/retries.py
index 8abc6a2dc5..072b6d7acf 100644
--- a/src/sentry/utils/retries.py
+++ b/src/sentry/utils/retries.py
@@ -8,8 +8,6 @@ import functools
 
 from django.utils.encoding import force_bytes
 
-from sentry.utils import metrics
-
 logger = logging.getLogger(__name__)
 
 
@@ -97,6 +95,8 @@ class TimedRetryPolicy(RetryPolicy):
                         self.clock.sleep(delay)
         finally:
             if self.metric_instance:
+                from sentry.utils import metrics
+
                 metrics.timing(
                     "timedretrypolicy.duration",
                     self.clock.time() - start,
