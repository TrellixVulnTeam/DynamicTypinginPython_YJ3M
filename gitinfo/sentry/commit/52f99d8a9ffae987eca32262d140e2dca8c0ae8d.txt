commit 52f99d8a9ffae987eca32262d140e2dca8c0ae8d
Author: Ted Kaemming <ted@kaemming.com>
Date:   Fri Mar 11 11:33:05 2016 -0800

    Simplify status checks.

diff --git a/src/sentry/api/endpoints/system_health.py b/src/sentry/api/endpoints/system_health.py
index a490ad23dd..73401bb253 100644
--- a/src/sentry/api/endpoints/system_health.py
+++ b/src/sentry/api/endpoints/system_health.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import itertools
+
 from rest_framework.response import Response
 
 from sentry import status_checks
@@ -11,9 +13,14 @@ class SystemHealthEndpoint(Endpoint):
     permission_classes = (SuperuserPermission,)
 
     def get(self, request):
-        problems, checks = status_checks.check_all()
-
+        results = status_checks.check_all()
         return Response({
-            'problems': map(unicode, problems),
-            'healthy': checks,
+            'problems': map(
+                lambda problem: {
+                    'message': problem.message,
+                    'severity': problem.severity,
+                },
+                itertools.chain.from_iterable(results.values()),
+            ),
+            'healthy': {type(check).__name__: not problems for check, problems in results.items()},
         })
diff --git a/src/sentry/middleware/health.py b/src/sentry/middleware/health.py
index 095ebe26a4..00f4c3995a 100644
--- a/src/sentry/middleware/health.py
+++ b/src/sentry/middleware/health.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import itertools
+
 from django.http import HttpResponse
 
 
@@ -17,11 +19,14 @@ class HealthCheck(object):
         if 'full' not in request.GET:
             return HttpResponse('ok', content_type='text/plain')
 
-        from sentry.status_checks import check_all
+        from sentry.status_checks import Problem, check_all
         from sentry.utils import json
-        problems, checks = check_all()
+
+        threshold = Problem.threshold(Problem.SEVERITY_CRITICAL)
+        results = {check: filter(threshold, problems) for check, problems in check_all().items()}
+        problems = list(itertools.chain.from_iterable(results.values()))
 
         return HttpResponse(json.dumps({
             'problems': map(unicode, problems),
-            'healthy': checks,
+            'healthy': {type(check).__name__: not p for check, p in results.items()},
         }), content_type='application/json', status=(500 if problems else 200))
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index 73075b538d..b1d42f2ff7 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -45,7 +45,7 @@ const App = React.createClass({
       success: (data) => {
         if (data && data.problems) {
           data.problems.forEach(problem => {
-            AlertActions.addAlert(problem, 'error', 0);
+            AlertActions.addAlert(problem.message, 'error', 0);
           });
         }
       },
diff --git a/src/sentry/status_checks/__init__.py b/src/sentry/status_checks/__init__.py
index 6f70a1bf6f..2599c17cbe 100644
--- a/src/sentry/status_checks/__init__.py
+++ b/src/sentry/status_checks/__init__.py
@@ -6,19 +6,12 @@ from .base import Problem, StatusCheck  # NOQA
 from .celery_alive import CeleryAliveCheck
 from .celery_app_version import CeleryAppVersionCheck
 
-check_classes = [
-    CeleryAliveCheck,
-    CeleryAppVersionCheck,
+
+checks = [
+    CeleryAliveCheck(),
+    CeleryAppVersionCheck(),
 ]
 
 
 def check_all():
-    checks = {}
-    problems = []
-    for cls in check_classes:
-        problem = cls().check()
-        if problem:
-            problems.extend(problem)
-        checks[cls.__name__] = not bool(problem)
-
-    return problems, checks
+    return {check: check.check() for check in checks}
diff --git a/src/sentry/status_checks/base.py b/src/sentry/status_checks/base.py
index d4c1250184..2b15633f32 100644
--- a/src/sentry/status_checks/base.py
+++ b/src/sentry/status_checks/base.py
@@ -2,8 +2,38 @@ from __future__ import absolute_import
 
 
 class Problem(object):
-    def __init__(self, message):
+
+    # Used for issues that may render the system inoperable or have effects on
+    # data integrity (e.g. issues in the processing pipeline.)
+    SEVERITY_CRITICAL = 'critical'
+
+    # Used for issues that may cause the system to operate in a degraded (but
+    # still operational) state, as well as configuration options that are set
+    # in unexpected ways or deprecated in future versions.
+    SEVERITY_WARNING = 'warning'
+
+    # Mapping of severity level to a priority score, where the greater the
+    # score, the more critical the issue. (The numeric values should only be
+    # used for comparison purposes, and are subject to change as levels are
+    # modified.)
+    SEVERITY_LEVELS = {
+        SEVERITY_CRITICAL: 2,
+        SEVERITY_WARNING: 1,
+    }
+
+    def __init__(self, message, severity=SEVERITY_CRITICAL):
+        assert severity in self.SEVERITY_LEVELS
         self.message = unicode(message)
+        self.severity = severity
+
+    def __cmp__(self, other):
+        if not isinstance(other, Problem):
+            return NotImplemented
+
+        return cmp(
+            self.SEVERITY_LEVELS[self.severity],
+            self.SEVERITY_LEVELS[other.severity],
+        )
 
     def __str__(self):
         return self.message.encode('utf-8')
@@ -11,6 +41,15 @@ class Problem(object):
     def __unicode__(self):
         return self.message
 
+    @classmethod
+    def threshold(cls, severity):
+        threshold = cls.SEVERITY_LEVELS[severity]
+
+        def predicate(problem):
+            return cls.SEVERITY_LEVELS[problem.severity] >= threshold
+
+        return predicate
+
 
 class StatusCheck(object):
     def check(self):
diff --git a/src/sentry/templatetags/sentry_status.py b/src/sentry/templatetags/sentry_status.py
index 3684445f32..e15dd499f1 100644
--- a/src/sentry/templatetags/sentry_status.py
+++ b/src/sentry/templatetags/sentry_status.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import, print_function
 
+import itertools
+
 from django import template
 
 from sentry import status_checks
@@ -9,7 +11,7 @@ register = template.Library()
 
 @register.inclusion_tag('sentry/partial/system-status.html', takes_context=True)
 def show_system_status(context):
-    problems, _ = status_checks.check_all()
+    problems = list(itertools.chain.from_iterable(status_checks.check_all().values()))
 
     return {
         'problems': problems,
diff --git a/tests/sentry/middleware/test_health.py b/tests/sentry/middleware/test_health.py
index 3fbb7f38af..a8dda1174a 100644
--- a/tests/sentry/middleware/test_health.py
+++ b/tests/sentry/middleware/test_health.py
@@ -1,11 +1,12 @@
 from __future__ import absolute_import
 
-from mock import patch
+from django.test import RequestFactory
 from exam import fixture
+from mock import patch
 
-from django.test import RequestFactory
-from sentry.testutils import TestCase
 from sentry.middleware.health import HealthCheck
+from sentry.status_checks import Problem
+from sentry.testutils import TestCase
 from sentry.utils import json
 
 
@@ -29,7 +30,9 @@ class HealthCheckTest(TestCase):
 
     @patch('sentry.status_checks.check_all')
     def test_full_health_ok(self, check_all):
-        check_all.return_value = [], []
+        check_all.return_value = {
+            object(): [],
+        }
         req = self.factory.get('/_health/?full')
         resp = self.middleware.process_request(req)
         assert resp.status_code == 200, resp
@@ -40,7 +43,11 @@ class HealthCheckTest(TestCase):
 
     @patch('sentry.status_checks.check_all')
     def test_full_health_bad(self, check_all):
-        check_all.return_value = ['foo'], []
+        check_all.return_value = {
+            object(): [
+                Problem('the system is down'),
+            ],
+        }
         req = self.factory.get('/_health/?full')
         resp = self.middleware.process_request(req)
         assert resp.status_code == 500, resp
