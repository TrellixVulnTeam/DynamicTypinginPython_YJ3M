commit 8e55b3abee4195b319c77c77dbed2d6e4603203d
Author: Ben Vinegar <ben@benv.ca>
Date:   Wed Jan 6 14:26:04 2016 -0800

    Use "toast" success/err msgs for stream/issue actions (fixes #2470)

diff --git a/package.json b/package.json
index 62dfd11394..163d0534ce 100644
--- a/package.json
+++ b/package.json
@@ -25,6 +25,7 @@
     "query-string": "2.4.2",
     "raven-js": "2.0.1",
     "react": "0.14.0",
+    "react-addons-css-transition-group": "0.14.0",
     "react-addons-pure-render-mixin": "0.14.0",
     "react-addons-test-utils": "0.14.0",
     "react-bootstrap": "0.27.3",
diff --git a/src/sentry/static/sentry/app/components/alerts/toastIndicator.jsx b/src/sentry/static/sentry/app/components/alerts/toastIndicator.jsx
new file mode 100644
index 0000000000..ab9a7f612b
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/alerts/toastIndicator.jsx
@@ -0,0 +1,13 @@
+import classNames from 'classnames';
+import React from 'react';
+
+function ToastIndicator({type, children}) {
+  return (
+    <div className={classNames('toast', type)}>
+      <span className="icon"></span>
+      <div className="toast-message">{children}</div>
+    </div>
+  );
+}
+
+export default ToastIndicator;
diff --git a/src/sentry/static/sentry/app/components/indicators.jsx b/src/sentry/static/sentry/app/components/indicators.jsx
index 0a5517e1ae..8fc17c131c 100644
--- a/src/sentry/static/sentry/app/components/indicators.jsx
+++ b/src/sentry/static/sentry/app/components/indicators.jsx
@@ -1,5 +1,10 @@
 import React from 'react';
 import Reflux from 'reflux';
+import ReactCSSTransitionGroup from 'react-addons-css-transition-group';
+
+import LoadingIndicator from '../components/loadingIndicator';
+import ToastIndicator from '../components/alerts/toastIndicator';
+
 import IndicatorStore from '../stores/indicatorStore';
 
 const Indicators = React.createClass({
@@ -16,9 +21,19 @@ const Indicators = React.createClass({
   render() {
     return (
       <div {...this.props}>
-        {this.state.items.map(function(item, key) {
-           return <div key={key}>{item}</div>;
-        })}
+        <ReactCSSTransitionGroup transitionName="toast" transitionEnterTimeout={500} transitionLeaveTimeout={500}>
+          {this.state.items.map((indicator) => {
+            if (indicator.type === 'error' || indicator.type === 'success') {
+              return (
+                <ToastIndicator type={indicator.type} key={indicator.id}>{indicator.message}</ToastIndicator>
+              );
+            } else {
+              return (
+                <LoadingIndicator className="toast" key={indicator.id}>{indicator.message}</LoadingIndicator>
+              );
+            }
+          })}
+        </ReactCSSTransitionGroup>
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/loadingIndicator.jsx b/src/sentry/static/sentry/app/components/loadingIndicator.jsx
index d3e7eaedc9..415d96d1c3 100644
--- a/src/sentry/static/sentry/app/components/loadingIndicator.jsx
+++ b/src/sentry/static/sentry/app/components/loadingIndicator.jsx
@@ -1,34 +1,21 @@
 import classNames from 'classnames';
 import React from 'react';
 
-const LoadingIndicator = React.createClass({
-  propTypes: {
-    global: React.PropTypes.bool,
-    mini:  React.PropTypes.bool,
-    triangle: React.PropTypes.bool
-  },
+function LoadingIndicator(props) {
+  let {mini, triangle} = props;
+  let classes = {
+    loading: true,
+    mini,
+    triangle
+  };
 
-  shouldComponentUpdate() {
-    return false;
-  },
-
-  render() {
-    let className = classNames({
-      'loading': true,
-      'mini': this.props.mini,
-      'global': this.props.global,
-      'triangle': this.props.triangle,
-    });
-
-    return (
-      <div className={classNames(this.props.className, className)}>
-        <div className="loading-mask"></div>
-        <div className="loading-indicator"></div>
-        <div className="loading-message">{this.props.children}</div>
-      </div>
-    );
-  }
-});
+  return (
+    <div className={classNames(props.className, classes)}>
+      <div className="loading-indicator"></div>
+      <div className="loading-message">{props.children}</div>
+    </div>
+  );
+}
 
 export default LoadingIndicator;
 
diff --git a/src/sentry/static/sentry/app/stores/groupStore.jsx b/src/sentry/static/sentry/app/stores/groupStore.jsx
index 4d226d6a36..6efe5ac2a6 100644
--- a/src/sentry/static/sentry/app/stores/groupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupStore.jsx
@@ -1,11 +1,17 @@
 import jQuery from 'jquery';
 import Reflux from 'reflux';
-import AlertActions from '../actions/alertActions';
 import GroupActions from '../actions/groupActions';
+import IndicatorStore from '../stores/indicatorStore';
 import utils from '../utils';
 import {t} from '../locale';
 
 
+function showAlert(msg, type) {
+  IndicatorStore.add(msg, type, {
+    duration: 4000
+  });
+}
+
 const GroupStore = Reflux.createStore({
   listenables: [GroupActions],
 
@@ -212,7 +218,7 @@ const GroupStore = Reflux.createStore({
   // TODO(dcramer): This is not really the best place for this
   onAssignToError(changeId, itemId, error) {
     this.clearStatus(itemId, 'assignTo');
-    AlertActions.addAlert(t('Unable to change assignee. Please try again.'), 'error');
+    showAlert(t('Unable to change assignee. Please try again.'), 'error');
   },
 
   onAssignToSuccess(changeId, itemId, response) {
@@ -236,7 +242,7 @@ const GroupStore = Reflux.createStore({
     itemIds.forEach(itemId => {
       this.clearStatus(itemId, 'delete');
     });
-    AlertActions.addAlert(t('Unable to delete events. Please try again.'), 'error');
+    showAlert(t('Unable to delete events. Please try again.'), 'error');
     this.trigger(new Set(itemIds));
   },
 
@@ -247,7 +253,7 @@ const GroupStore = Reflux.createStore({
       this.clearStatus(itemId, 'delete');
     });
     this.items = this.items.filter((item) => !itemIdSet.has(item.id));
-    AlertActions.addAlert(t('The selected events have been scheduled for deletion.'), 'success');
+    showAlert(t('The selected events have been scheduled for deletion.'), 'success');
     this.trigger(new Set(itemIds));
   },
 
@@ -262,7 +268,7 @@ const GroupStore = Reflux.createStore({
     itemIds.forEach(itemId => {
       this.clearStatus(itemId, 'merge');
     });
-    AlertActions.addAlert(t('Unable to merge events. Please try again.'), 'error');
+    showAlert(t('Unable to merge events. Please try again.'), 'error');
     this.trigger(new Set(itemIds));
   },
 
@@ -277,7 +283,7 @@ const GroupStore = Reflux.createStore({
       (item) => !mergedIdSet.has(item.id) || item.id === response.merge.parent
     );
 
-    AlertActions.addAlert(t('The selected events have been scheduled for merge.'), 'success');
+    showAlert(t('The selected events have been scheduled for merge.'), 'success');
     this.trigger(new Set(mergedIds));
   },
 
@@ -309,7 +315,7 @@ const GroupStore = Reflux.createStore({
       this.clearStatus(itemId, 'update');
     });
     if (!failSilently) {
-      AlertActions.addAlert(t('Unable to update events. Please try again.'), 'error');
+      showAlert(t('Unable to update events. Please try again.'), 'error');
     }
     this.trigger(new Set(itemIds));
   },
diff --git a/src/sentry/static/sentry/app/stores/indicatorStore.jsx b/src/sentry/static/sentry/app/stores/indicatorStore.jsx
index 29121ec439..a8ded397cd 100644
--- a/src/sentry/static/sentry/app/stores/indicatorStore.jsx
+++ b/src/sentry/static/sentry/app/stores/indicatorStore.jsx
@@ -1,19 +1,29 @@
-import React from 'react';
 import Reflux from 'reflux';
-import LoadingIndicator from '../components/loadingIndicator';
 
 const IndicatorStore = Reflux.createStore({
   init() {
     this.items = [];
+    this.lastId = 0;
   },
 
-  add(node) {
-    if (!React.isValidElement(node)) {
-      node = <LoadingIndicator global={true}>{node}</LoadingIndicator>;
+  add(message, type, options) {
+    options = options || {};
+
+    let indicator = {
+      id: this.lastId++,
+      message: message,
+      type: type,
+      options: options
+    };
+
+    if (options.duration) {
+      setTimeout(() => {
+        this.remove(indicator);
+      }, options.duration);
     }
-    this.items.push(node);
+    this.items = [indicator]; // replace
     this.trigger(this.items);
-    return node;
+    return indicator;
   },
 
   remove(indicator) {
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 68954234ed..aad97e0db8 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -664,7 +664,7 @@ table.integrations {
   }
 }
 
-.loading.global {
+.toast {
   .loading.mini();
   padding: 20px 30px;
   font-size: 15px;
@@ -672,12 +672,40 @@ table.integrations {
   border-radius: 3px;
 
   position: fixed;
-  bottom: 0;
+  bottom: 20px;
   right: 20px;
-  background: rgba(52, 60, 69, .8);
   color: #fff;
+  opacity: 1;
 
-  .transition(.2s bottom ease-in-out);
+  .toast-message {
+    display: inline-block;
+    padding-left: 15px;
+  }
+
+  &.loading {
+    background: rgba(52, 60, 69, .8);
+    &.toast-leave {
+      display: none; /* hides immediately*/
+    }
+  }
+
+  &.success {
+    background: @green;
+    .icon:before {
+      content: "\e60a"; // checkmark
+    }
+  }
+  &.error {
+    background: @red;
+    .icon:before {
+      content: "\e615"; // exclamation
+    }
+  }
+  &.success.toast-leave,
+  &.error.toast-leave {
+    opacity: 0;
+    .transition(opacity .2s linear);
+  }
 
   .loading-indicator {
     border-color: rgba(255,255, 255, .4);
@@ -689,27 +717,6 @@ table.integrations {
   .loading-message {
     padding-left: 24px;
   }
-
-  .loading-mask {
-    position: fixed;
-    top: 0;
-    left: 0;
-    right: 0;
-    bottom: 0;
-    background: rgba(52, 60, 69, .4);
-    z-index: -1;
-    opacity: 0;
-    visibility: hidden;
-    .transition(opacity .1s linear);
-  }
-
-  &.active {
-    bottom: 20px;
-    .loading-mask {
-      visibility: visible;
-      opacity: 1;
-    }
-  }
 }
 
 // Loading Gif
diff --git a/tests/js/spec/views/stream.spec.jsx b/tests/js/spec/views/stream.spec.jsx
index de227410e4..dc2df2f327 100644
--- a/tests/js/spec/views/stream.spec.jsx
+++ b/tests/js/spec/views/stream.spec.jsx
@@ -5,7 +5,6 @@ import Sticky from 'react-sticky';
 import {Client} from 'app/api';
 import CursorPoller from 'app/utils/cursorPoller';
 import LoadingError from 'app/components/loadingError';
-import LoadingIndicator from 'app/components/loadingIndicator';
 import Stream from 'app/views/stream';
 import StreamGroup from 'app/components/stream/group';
 import StreamFilters from 'app/views/stream/filters';
@@ -130,7 +129,7 @@ describe('Stream', function() {
     it('displays a loading indicator when component is loading', function() {
       let stream = TestUtils.renderIntoDocument(this.Element).refs.wrapped;
       stream.setState({loading: true});
-      let expected = findWithType(stream, LoadingIndicator);
+      let expected = findWithClass(stream, 'loading');
 
       expect(expected).to.be.ok;
     });
