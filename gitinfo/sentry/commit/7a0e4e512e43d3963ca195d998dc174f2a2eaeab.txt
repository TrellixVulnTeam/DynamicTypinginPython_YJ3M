commit 7a0e4e512e43d3963ca195d998dc174f2a2eaeab
Author: David Cramer <dcramer@gmail.com>
Date:   Thu May 22 22:58:05 2014 -0700

    Disable old notification plugin behavior

diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 2b96409d86..7ee9ebe104 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -104,16 +104,6 @@ class NotificationPlugin(Plugin):
         event = create_sample_event(project, default='python')
         return self.post_process(event.group, event, is_new=True, is_sample=False)
 
-    # plugin hooks
-
-    def post_process(self, group, event, is_new, is_sample, **kwargs):
-        if not is_new:
-            return
-
-        if not self.should_notify(group, event):
-            return
-
-        return self.notify_users(group, event)
 
 # Backwards-compatibility
 NotifyConfigurationForm = NotificationConfigurationForm
diff --git a/src/sentry/rules/actions/notify_event.py b/src/sentry/rules/actions/notify_event.py
index 088c62e15c..95c33941b9 100644
--- a/src/sentry/rules/actions/notify_event.py
+++ b/src/sentry/rules/actions/notify_event.py
@@ -17,6 +17,15 @@ class NotifyEventAction(EventAction):
     label = 'Send a notification'
 
     def after(self, event, **kwargs):
+        from sentry.plugins.bases.notify import NotificationPlugin
+
+        group = event.group
+
         for plugin in plugins.for_project(event.project):
-            if hasattr(plugin, 'notify_users'):
-                safe_execute(plugin.notify_users, group=event.group, event=event)
+            if not isinstance(plugin, NotificationPlugin):
+                continue
+
+            if not safe_execute(plugin.should_notify, group, event):
+                continue
+
+            safe_execute(plugin.notify_users, group=group, event=event)
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 12f1810ab3..1bff16bf2c 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -105,6 +105,8 @@ def execute_rule(rule_id, event, **kwargs):
 
     rule = Rule.objects.get(id=rule_id)
     project = Project.objects.get_from_cache(id=event.project_id)
+    event.project = project
+    event.group.project = project
 
     for action in rule.data.get('actions', ()):
         action_cls = rules.get(action['id'])
