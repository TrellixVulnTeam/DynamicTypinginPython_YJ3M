commit cd50677c5878bf7e54ab662d7ae4e36e9a20160d
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Jan 13 13:37:59 2020 -0800

    feat(ui): Update Alert Details layout (#16381)

diff --git a/src/sentry/static/sentry/app/views/incidents/details/activity/dateDivider.tsx b/src/sentry/static/sentry/app/views/incidents/details/activity/dateDivider.tsx
index dd4d5b520d..b1001a8bc1 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/activity/dateDivider.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/activity/dateDivider.tsx
@@ -8,12 +8,22 @@ import styled from '@emotion/styled';
 
 import space from 'app/styles/space';
 
-type Props = {
-  backgroundColor?: string;
-};
+const DateDivider = styled(function DateDivider({children, ...props}) {
+  return (
+    <div {...props}>
+      <hr />
+      <TitleWrapper>
+        <Title>{children}</Title>
+      </TitleWrapper>
+    </div>
+  );
+})`
+  position: relative;
+  font-size: ${p => p.theme.fontSizeMedium};
+`;
 
-const Title = styled('span')<Props>`
-  background-color: ${p => p.backgroundColor || p.theme.whiteDark};
+const Title = styled('span')`
+  background-color: ${p => p.theme.white};
   padding: 0 ${space(2)};
 `;
 
@@ -30,23 +40,4 @@ const TitleWrapper = styled('span')`
   color: ${p => p.theme.gray3};
 `;
 
-const DateDivider = styled(
-  class DateDivider extends React.Component<Props> {
-    render() {
-      const {children, backgroundColor, ...props} = this.props;
-      return (
-        <div {...props}>
-          <hr />
-          <TitleWrapper>
-            <Title backgroundColor={backgroundColor}>{children}</Title>
-          </TitleWrapper>
-        </div>
-      );
-    }
-  }
-)`
-  position: relative;
-  font-size: ${p => p.theme.fontSizeMedium};
-`;
-
 export default DateDivider;
diff --git a/src/sentry/static/sentry/app/views/incidents/details/body.tsx b/src/sentry/static/sentry/app/views/incidents/details/body.tsx
index db1a480b7e..4959b8a4fc 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/body.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/body.tsx
@@ -4,20 +4,19 @@ import styled from '@emotion/styled';
 
 import {PageContent} from 'app/styles/organization';
 import {t} from 'app/locale';
-import Chart from 'app/views/incidents/details/chart';
-import IdBadge from 'app/components/idBadge';
+import InlineSvg from 'app/components/inlineSvg';
 import Link from 'app/components/links/link';
 import NavTabs from 'app/components/navTabs';
 import Placeholder from 'app/components/placeholder';
-import Projects from 'app/utils/projects';
 import SeenByList from 'app/components/seenByList';
-import SideHeader from 'app/views/incidents/details/sideHeader';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
 import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 
-import Activity from './activity';
-
 import {Incident} from '../types';
+import Activity from './activity';
+import Chart from './chart';
+import SideHeader from './sideHeader';
 
 type Props = {
   incident?: Incident;
@@ -29,8 +28,20 @@ export default class DetailsBody extends React.Component<Props> {
 
     return (
       <StyledPageContent>
+        <ChartWrapper>
+          {incident ? (
+            <Chart
+              data={incident.eventStats.data}
+              detected={incident.dateDetected}
+              closed={incident.dateClosed}
+            />
+          ) : (
+            <Placeholder height="200px" />
+          )}
+        </ChartWrapper>
+
         <Main>
-          <PageContent>
+          <ActivityPageContent>
             <StyledNavTabs underlined>
               <li className="active">
                 <Link>{t('Activity')}</Link>
@@ -50,57 +61,54 @@ export default class DetailsBody extends React.Component<Props> {
               params={params}
               incidentStatus={!!incident ? incident.status : null}
             />
-          </PageContent>
+          </ActivityPageContent>
+          <Sidebar>
+            <PageContent>
+              <RuleDetails>
+                <SideHeader>{t('Metric')}</SideHeader>
+                <SideHeader>{t('Threshold')}</SideHeader>
+                <SideHeader>{t('Time Interval')}</SideHeader>
+
+                <span>Events</span>
+                <span>> 1000</span>
+                <span>1 hour</span>
+              </RuleDetails>
+
+              <SideHeader>{t('Query')}</SideHeader>
+              <Query>user.username:"Jane Doe" server:web-8 example error</Query>
+
+              <EditRuleLink to="#">
+                <InlineSvg src="icon-edit" size="14px" />
+                {t('Edit alert rule')}
+              </EditRuleLink>
+            </PageContent>
+          </Sidebar>
         </Main>
-        <Sidebar>
-          <PageContent>
-            <SideHeader loading={!incident}>{t('Events in Incident')}</SideHeader>
-
-            {incident ? (
-              <Chart
-                data={incident.eventStats.data}
-                detected={incident.dateDetected}
-                closed={incident.dateClosed}
-              />
-            ) : (
-              <Placeholder height="190px" bottomGutter={2} />
-            )}
-
-            <div>
-              <SideHeader loading={!incident}>
-                {t('Projects Affected')} ({incident ? incident.projects.length : '-'})
-              </SideHeader>
-
-              {incident && (
-                <div>
-                  <Projects slugs={incident.projects} orgId={params.orgId}>
-                    {({projects}) => {
-                      return projects.map(project => (
-                        <StyledIdBadge key={project.slug} project={project} />
-                      ));
-                    }}
-                  </Projects>
-                </div>
-              )}
-            </div>
-          </PageContent>
-        </Sidebar>
       </StyledPageContent>
     );
   }
 }
 
 const Main = styled('div')`
+  display: flex;
+  border-top: 1px solid ${p => p.theme.borderLight};
+  background-color: ${p => p.theme.white};
+
+  @media (max-width: ${p => p.theme.breakpoints[0]}) {
+    flex-direction: column-reverse;
+  }
+`;
+
+const ActivityPageContent = styled(PageContent)`
   width: 60%;
   @media (max-width: ${theme.breakpoints[0]}) {
     width: 100%;
+    margin-bottom: 0;
   }
 `;
 
 const Sidebar = styled('div')`
   width: 40%;
-  border-left: 1px solid ${p => p.theme.borderLight};
-  background-color: ${p => p.theme.white};
 
   ${PageContent} {
     padding-top: ${space(3)};
@@ -109,15 +117,22 @@ const Sidebar = styled('div')`
   @media (max-width: ${theme.breakpoints[0]}) {
     width: 100%;
     border: 0;
+
+    ${PageContent} {
+      padding-top: ${space(3)};
+      margin-bottom: 0;
+      border-bottom: 1px solid ${p => p.theme.borderLight};
+    }
   }
 `;
 
 const StyledPageContent = styled(PageContent)`
   padding: 0;
-  flex-direction: row;
-  @media (max-width: ${theme.breakpoints[0]}) {
-    flex-direction: column;
-  }
+  flex-direction: column;
+`;
+
+const ChartWrapper = styled('div')`
+  padding: ${space(2)};
 `;
 
 const StyledNavTabs = styled(NavTabs)`
@@ -138,6 +153,29 @@ const StyledSeenByList = styled(SeenByList)`
   margin-top: 0;
 `;
 
-const StyledIdBadge = styled(IdBadge)`
-  margin-bottom: ${space(1)};
+const RuleDetails = styled('div')`
+  display: grid;
+  grid-template-columns: repeat(3, 1fr);
+  grid-gap: ${space(1)};
+  font-size: ${p => p.theme.fontSizeExtraLarge};
+  margin-bottom: ${space(2)};
+`;
+
+const Query = styled('div')`
+  font-family: ${p => p.theme.text.familyMono};
+  font-size: ${p => p.theme.fontSizeRelativeSmall};
+  background-color: ${p => p.theme.offWhite2};
+  border-radius: ${p => p.theme.borderRadius};
+  padding: ${space(0.5)} ${space(1)};
+  color: ${p => p.theme.gray4};
+  ${overflowEllipsis}
+`;
+
+const EditRuleLink = styled(Link)`
+  display: grid;
+  grid-auto-flow: column;
+  align-items: center;
+  justify-content: flex-start;
+  grid-gap: ${space(0.5)};
+  margin-top: ${space(2)};
 `;
diff --git a/src/sentry/static/sentry/app/views/incidents/details/header.tsx b/src/sentry/static/sentry/app/views/incidents/details/header.tsx
index f45e878825..fd63dd0001 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/header.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/header.tsx
@@ -1,7 +1,6 @@
-import {Params} from 'react-router/lib/Router';
 import {Link} from 'react-router';
+import {Params} from 'react-router/lib/Router';
 import React from 'react';
-import isPropValid from '@emotion/is-prop-valid';
 import moment from 'moment';
 import styled from '@emotion/styled';
 
@@ -15,13 +14,16 @@ import InlineSvg from 'app/components/inlineSvg';
 import LoadingError from 'app/components/loadingError';
 import MenuItem from 'app/components/menuItem';
 import PageHeading from 'app/components/pageHeading';
+import ProjectBadge from 'app/components/idBadge/projectBadge';
+import Projects from 'app/utils/projects';
 import SubscribeButton from 'app/components/subscribeButton';
-import space from 'app/styles/space';
 import getDynamicText from 'app/utils/getDynamicText';
+import isPropValid from '@emotion/is-prop-valid';
+import space from 'app/styles/space';
 
+import {Incident} from '../types';
 import {isOpen} from '../utils';
 import Status from '../status';
-import {Incident} from '../types';
 
 type Props = {
   className?: string;
@@ -83,74 +85,73 @@ export default class DetailsHeader extends React.Component<Props> {
         )
         .as('seconds');
 
+    const project = incident && incident.projects && incident.projects[0];
+
     return (
       <Header>
-        <HeaderItem>
-          <PageHeading>
-            <Breadcrumb>
-              <IncidentsLink to={`/organizations/${params.orgId}/incidents/`}>
-                {t('Incidents')}
-              </IncidentsLink>
-              {dateStarted && (
-                <React.Fragment>
-                  <Chevron src="icon-chevron-right" size={space(2)} />
-                  <IncidentDate>{dateStarted}</IncidentDate>
-                </React.Fragment>
-              )}
-            </Breadcrumb>
-            <IncidentTitle data-test-id="incident-title" loading={!isIncidentReady}>
-              {incident && !hasIncidentDetailsError ? incident.title : 'Loading'}
-            </IncidentTitle>
-          </PageHeading>
-        </HeaderItem>
+        <PageHeading>
+          <Breadcrumb>
+            <IncidentsLink to={`/organizations/${params.orgId}/incidents/`}>
+              {t('Incidents')}
+            </IncidentsLink>
+            {dateStarted && (
+              <React.Fragment>
+                <Chevron src="icon-chevron-right" size={space(2)} />
+                <IncidentDate>{dateStarted}</IncidentDate>
+              </React.Fragment>
+            )}
+          </Breadcrumb>
+          <IncidentTitle data-test-id="incident-title" loading={!isIncidentReady}>
+            {incident && !hasIncidentDetailsError ? incident.title : 'Loading'}
+          </IncidentTitle>
+        </PageHeading>
+
         {hasIncidentDetailsError ? (
           <StyledLoadingError />
         ) : (
           <GroupedHeaderItems>
-            <HeaderItem>
-              <ItemTitle>{t('Status')}</ItemTitle>
-              <ItemValue>{this.renderStatus()}</ItemValue>
-            </HeaderItem>
-            <HeaderItem>
-              <ItemTitle>{t('Duration')}</ItemTitle>
-              {incident && (
-                <ItemValue>
-                  <Duration
-                    seconds={getDynamicText({value: duration || 0, fixed: 1200})}
-                  />
-                </ItemValue>
-              )}
-            </HeaderItem>
-            <HeaderItem>
-              <ItemTitle>{t('Users affected')}</ItemTitle>
-              {incident && (
-                <ItemValue>
-                  <Count value={incident.uniqueUsers} />
-                </ItemValue>
+            <ItemTitle>{t('Status')}</ItemTitle>
+            <ItemTitle>{t('Project')}</ItemTitle>
+            <ItemTitle>{t('Users affected')}</ItemTitle>
+            <ItemTitle>{t('Total events')}</ItemTitle>
+            <ItemTitle>{t('Duration')}</ItemTitle>
+            <ItemTitle>{t('Notifications')}</ItemTitle>
+            <ItemValue>{this.renderStatus()}</ItemValue>
+            <ItemValue>
+              {project && (
+                <Projects slugs={[project]} orgId={params.orgId}>
+                  {({projects}) => (
+                    <ProjectBadge project={projects && projects.length && projects[0]} />
+                  )}
+                </Projects>
               )}
-            </HeaderItem>
-            <HeaderItem>
-              <ItemTitle>{t('Total events')}</ItemTitle>
-              {incident && (
-                <ItemValue>
-                  <Count value={incident.totalEvents} />
-                  <OpenLink to={eventLink}>
-                    <InlineSvg src="icon-open" size="14" />
-                  </OpenLink>
-                </ItemValue>
-              )}
-            </HeaderItem>
-            <HeaderItem>
-              <ItemTitle>{t('Notifications')}</ItemTitle>
+            </ItemValue>
+            {incident && (
+              <ItemValue>
+                <Duration seconds={getDynamicText({value: duration || 0, fixed: 1200})} />
+              </ItemValue>
+            )}
+            {incident && (
               <ItemValue>
-                <SubscribeButton
-                  disabled={!isIncidentReady}
-                  isSubscribed={incident && !!incident.isSubscribed}
-                  onClick={onSubscriptionChange}
-                  size="small"
-                />
+                <Count value={incident.uniqueUsers} />
               </ItemValue>
-            </HeaderItem>
+            )}
+            {incident && (
+              <ItemValue>
+                <Count value={incident.totalEvents} />
+                <OpenLink to={eventLink}>
+                  <InlineSvg src="icon-open" size="14" />
+                </OpenLink>
+              </ItemValue>
+            )}
+            <ItemValue>
+              <SubscribeButton
+                disabled={!isIncidentReady}
+                isSubscribed={incident && !!incident.isSubscribed}
+                onClick={onSubscriptionChange}
+                size="small"
+              />
+            </ItemValue>
           </GroupedHeaderItems>
         )}
       </Header>
@@ -162,7 +163,17 @@ const Header = styled(PageHeader)`
   background-color: ${p => p.theme.white};
   border-bottom: 1px solid ${p => p.theme.borderDark};
   margin-bottom: 0;
-  padding: ${space(3)} 0;
+  padding: ${space(3)};
+
+  grid-template-columns: max-content auto;
+  display: grid;
+  grid-gap: ${space(3)};
+  grid-auto-flow: column;
+
+  @media (max-width: ${p => p.theme.breakpoints[1]}) {
+    grid-template-columns: auto;
+    grid-auto-flow: row;
+  }
 `;
 
 const StyledLoadingError = styled(LoadingError)`
@@ -174,18 +185,20 @@ const StyledLoadingError = styled(LoadingError)`
 `;
 
 const GroupedHeaderItems = styled('div')`
-  display: flex;
+  display: grid;
+  grid-template-columns: repeat(6, max-content);
+  grid-column-gap: ${space(3)};
+  grid-row-gap: ${space(1)};
   text-align: right;
-`;
 
-const HeaderItem = styled('div')`
-  padding: 0 ${space(4)};
-  min-width: 0; /* Prevent text from horizontally stretching flexbox */
+  @media (max-width: ${p => p.theme.breakpoints[1]}) {
+    text-align: left;
+  }
 `;
 
 const ItemTitle = styled('h6')`
   font-size: ${p => p.theme.fontSizeSmall};
-  margin-bottom: ${space(1)};
+  margin-bottom: 0;
   text-transform: uppercase;
   color: ${p => p.theme.gray2};
   letter-spacing: 0.1px;
@@ -196,14 +209,13 @@ const ItemValue = styled('div')`
   justify-content: flex-end;
   align-items: center;
   font-size: ${p => p.theme.fontSizeExtraLarge};
-  height: 40px; /* This is the height of the Status dropdown */
 `;
 
 const Breadcrumb = styled('div')`
   display: flex;
   align-items: center;
   font-size: ${p => p.theme.fontSizeLarge};
-  margin-bottom: ${space(1)};
+  margin-bottom: ${space(0.5)};
 `;
 
 const IncidentTitle = styled('div', {
diff --git a/src/sentry/static/sentry/app/views/incidents/details/sideHeader.tsx b/src/sentry/static/sentry/app/views/incidents/details/sideHeader.tsx
index 3baa1b81db..7defc24e91 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/sideHeader.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/sideHeader.tsx
@@ -6,7 +6,7 @@ import space from 'app/styles/space';
 
 type Props = {
   className?: string;
-  loading: boolean;
+  loading?: boolean;
   children: React.ReactNode;
 };
 
@@ -17,7 +17,7 @@ const SideHeader = styled(function SideHeader({className, loading, children}: Pr
     </h6>
   );
 })`
-  color: ${p => p.theme.gray3};
+  color: ${p => p.theme.gray2};
   font-weight: bold;
   margin-bottom: ${space(1)};
   text-transform: uppercase;
@@ -25,7 +25,7 @@ const SideHeader = styled(function SideHeader({className, loading, children}: Pr
 
 const Title = styled('span', {
   shouldForwardProp: p => isPropValid(p) && p !== 'loading',
-})<{loading: boolean}>`
+})<{loading?: boolean}>`
   ${p =>
     p.loading
       ? `
diff --git a/tests/js/spec/views/incidents/details/index.spec.jsx b/tests/js/spec/views/incidents/details/index.spec.jsx
index 51b0f115b9..f8c46897b2 100644
--- a/tests/js/spec/views/incidents/details/index.spec.jsx
+++ b/tests/js/spec/views/incidents/details/index.spec.jsx
@@ -72,13 +72,13 @@ describe('IncidentDetails', function() {
     expect(
       wrapper
         .find('ItemValue')
-        .at(3)
+        .at(4)
         .text()
     ).toBe('100');
     expect(
       wrapper
         .find('ItemValue')
-        .at(2)
+        .at(3)
         .text()
     ).toBe('20');
   });
