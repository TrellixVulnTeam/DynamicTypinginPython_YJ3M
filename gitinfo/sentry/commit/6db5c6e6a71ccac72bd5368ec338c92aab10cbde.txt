commit 6db5c6e6a71ccac72bd5368ec338c92aab10cbde
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Jul 2 13:09:02 2020 -0700

    chore(ts): Convert baseChart + various components (#19477)

diff --git a/package.json b/package.json
index 9fa1ad89b5..132209b215 100644
--- a/package.json
+++ b/package.json
@@ -66,7 +66,7 @@
     "diff": "^3.5.0",
     "dompurify": "^2.0.7",
     "echarts": "4.7.0",
-    "echarts-for-react": "2.0.14",
+    "echarts-for-react": "2.0.16",
     "emotion": "10.0.27",
     "emotion-theming": "10.0.27",
     "file-loader": "^3.0.1",
diff --git a/src/sentry/static/sentry/app/components/charts/baseChart.jsx b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
deleted file mode 100644
index 803c3eb699..0000000000
--- a/src/sentry/static/sentry/app/components/charts/baseChart.jsx
+++ /dev/null
@@ -1,406 +0,0 @@
-import 'zrender/lib/svg/svg';
-
-import PropTypes from 'prop-types';
-import React from 'react';
-import ReactEchartsCore from 'echarts-for-react/lib/core';
-import echarts from 'echarts/lib/echarts';
-import styled from '@emotion/styled';
-
-import {callIfFunction} from 'app/utils/callIfFunction';
-import SentryTypes from 'app/sentryTypes';
-import space from 'app/styles/space';
-import theme from 'app/utils/theme';
-
-import Grid from './components/grid';
-import Legend from './components/legend';
-import LineSeries from './series/lineSeries';
-import Tooltip from './components/tooltip';
-import XAxis from './components/xAxis';
-import YAxis from './components/yAxis';
-
-// If dimension is a number convert it to pixels, otherwise use dimension without transform
-const getDimensionValue = dimension => {
-  if (typeof dimension === 'number') {
-    return `${dimension}px`;
-  }
-
-  return dimension;
-};
-
-class BaseChart extends React.Component {
-  static propTypes = {
-    // TODO: Pull out props from generic `options` object
-    //       so that we can better document them in prop types
-    //       see: https://ecomfe.github.io/echarts-doc/public/en/option.html
-    //
-    // NOTE: [!!] If you use an option that requires a specific echart module,
-    //       you WILL NEED to IMPORT that module to have it registered in
-    //       echarts. IT WILL FAIL SILENTLY IF YOU DONT.
-    options: PropTypes.object,
-
-    // Chart Series
-    // This is different than the interface to higher level charts, these need to be
-    // an array of ECharts "Series" components.
-    series: SentryTypes.EChartsSeries,
-
-    // Array of color codes to use in charts
-    colors: PropTypes.arrayOf(PropTypes.string),
-
-    // Must be explicitly `null` to disable xAxis
-    xAxis: SentryTypes.EChartsXAxis,
-
-    // Must be explicitly `null` to disable yAxis
-    yAxis: SentryTypes.EChartsYAxis,
-
-    // Pass `true` to have 2 y-axes with default properties
-    // Can pass an array of objects to customize yAxis properties
-    yAxes: PropTypes.oneOfType([
-      PropTypes.bool,
-      PropTypes.arrayOf(SentryTypes.EChartsYAxis),
-    ]),
-
-    // Pass `true` to have 2 x-axes with default properties
-    // Can pass an array of multiple objects to customize xAxis properties
-    xAxes: PropTypes.oneOfType([
-      PropTypes.bool,
-      PropTypes.arrayOf(SentryTypes.EChartsXAxis),
-    ]),
-
-    // Tooltip options
-    tooltip: SentryTypes.EChartsTooltip,
-
-    // DataZoom (allows for zooming of chart)
-    dataZoom: PropTypes.oneOfType([
-      SentryTypes.EChartsDataZoom,
-      PropTypes.arrayOf(SentryTypes.EChartsDataZoom),
-    ]),
-
-    // Axis pointer options
-    axisPointer: SentryTypes.EChartsAxisPointer,
-
-    toolBox: SentryTypes.EChartsToolBox,
-
-    graphic: SentryTypes.EchartsGraphic,
-
-    // ECharts Grid options
-    // multiple grids allow multiple sub-graphs.
-    grid: PropTypes.oneOfType([
-      SentryTypes.EChartsGrid,
-      PropTypes.arrayOf(SentryTypes.EChartsGrid),
-    ]),
-
-    // Chart legend
-    legend: SentryTypes.EChartsLegend,
-
-    // Chart height
-    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
-
-    // Chart width
-    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
-
-    // Use `canvas` when dealing with large datasets
-    // See: https://ecomfe.github.io/echarts-doc/public/en/tutorial.html#Render%20by%20Canvas%20or%20SVG
-    renderer: PropTypes.oneOf(['canvas', 'svg']),
-
-    devicePixelRatio: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
-
-    // theme name
-    // example theme: https://github.com/apache/incubator-echarts/blob/master/theme/dark.js
-    theme: PropTypes.string,
-
-    // states whether or not to merge with previous `option`
-    notMerge: PropTypes.bool,
-
-    // states whether not to prevent triggering events when calling setOption
-    silent: PropTypes.bool,
-
-    // states whether not to update chart immediately
-    lazyUpdate: PropTypes.bool,
-
-    // eCharts Event Handlers
-    // callback when chart is ready
-    onChartReady: PropTypes.func,
-    onHighlight: PropTypes.func,
-    onMouseOver: PropTypes.func,
-    onClick: PropTypes.func,
-
-    // Zoom on chart
-    onDataZoom: PropTypes.func,
-
-    // One example of when this is called is restoring chart from zoom levels
-    onRestore: PropTypes.func,
-
-    onFinished: PropTypes.func,
-
-    onLegendSelectChanged: PropTypes.func,
-
-    // Forwarded Ref
-    forwardedRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),
-
-    // Custom chart props that are implemented by us (and not a feature of eCharts)
-    /**
-     * Display previous period as a LineSeries
-     */
-    previousPeriod: PropTypes.arrayOf(SentryTypes.SeriesUnit),
-
-    // If data is grouped by date, then apply default date formatting to
-    // x-axis and tooltips.
-    isGroupedByDate: PropTypes.bool,
-
-    /**
-     * Format timestamp with date AND time
-     */
-    showTimeInTooltip: PropTypes.bool,
-
-    // Use short date formatting for xAxis
-    useShortDate: PropTypes.bool,
-
-    // These are optional and are used to determine how xAxis is formatted
-    // if `isGroupedByDate == true`
-    start: PropTypes.instanceOf(Date),
-    end: PropTypes.instanceOf(Date),
-    period: PropTypes.string,
-
-    // Formats dates as UTC?
-    utc: PropTypes.bool,
-  };
-
-  static defaultProps = {
-    height: 200,
-    width: 'auto',
-    renderer: 'svg',
-    notMerge: true,
-    lazyUpdate: false,
-    onChartReady: () => {},
-    options: {},
-
-    series: [],
-    xAxis: {},
-    yAxis: {},
-    isGroupedByDate: false,
-  };
-
-  getEventsMap = {
-    click: (...args) => {
-      this.handleClick(...args);
-      callIfFunction(this.props.onClick, ...args);
-    },
-    highlight: (...args) => callIfFunction(this.props.onHighlight, ...args),
-    mouseover: (...args) => callIfFunction(this.props.onMouseOver, ...args),
-    datazoom: (...args) => callIfFunction(this.props.onDataZoom, ...args),
-    restore: (...args) => callIfFunction(this.props.onRestore, ...args),
-    finished: (...args) => callIfFunction(this.props.onFinished, ...args),
-    legendselectchanged: (...args) =>
-      callIfFunction(this.props.onLegendSelectChanged, ...args),
-  };
-
-  handleChartReady = (...args) => {
-    const {onChartReady} = this.props;
-    onChartReady(...args);
-  };
-
-  /**
-   * Handle series item clicks (e.g. Releases mark line or a single series item)
-   * This is different than when you hover over an "axis" line on a chart (e.g.
-   * if there are 2 series for an axis and you're not directly hovered over an item)
-   *
-   * Calls "onClick" inside of series data
-   */
-  handleClick = (series, chart) => {
-    if (series.data) {
-      callIfFunction(series.data.onClick, series, chart);
-    }
-  };
-
-  getColorPalette = () => {
-    const {series} = this.props;
-
-    return series && series.length
-      ? theme.charts.getColorPalette(series.length)
-      : theme.charts.colors;
-  };
-
-  render() {
-    const {
-      options,
-      colors,
-      grid,
-      tooltip,
-      legend,
-      series,
-      yAxis,
-      xAxis,
-      dataZoom,
-      toolBox,
-      graphic,
-      axisPointer,
-
-      isGroupedByDate,
-      showTimeInTooltip,
-      useShortDate,
-      previousPeriod,
-      start,
-      end,
-      period,
-      utc,
-      yAxes,
-      xAxes,
-
-      devicePixelRatio,
-      height,
-      width,
-      renderer,
-      notMerge,
-      lazyUpdate,
-      silent,
-      style,
-      forwardedRef,
-    } = this.props;
-
-    const yAxisOrCustom = !yAxes
-      ? yAxis !== null
-        ? YAxis(yAxis)
-        : null
-      : Array.isArray(yAxes)
-      ? yAxes.map(YAxis)
-      : [YAxis(), YAxis()];
-    const xAxisOrCustom = !xAxes
-      ? xAxis !== null
-        ? XAxis({
-            ...xAxis,
-            useShortDate,
-            start,
-            end,
-            period,
-            isGroupedByDate,
-            utc,
-          })
-        : null
-      : Array.isArray(xAxes)
-      ? xAxes.map(axis =>
-          XAxis({...axis, useShortDate, start, end, period, isGroupedByDate, utc})
-        )
-      : [XAxis(), XAxis()];
-
-    return (
-      <ChartContainer>
-        <ReactEchartsCore
-          ref={forwardedRef}
-          echarts={echarts}
-          notMerge={notMerge}
-          lazyUpdate={lazyUpdate}
-          silent={silent}
-          theme={this.props.theme}
-          onChartReady={this.handleChartReady}
-          onEvents={this.getEventsMap}
-          opts={{
-            height,
-            width,
-            renderer,
-            devicePixelRatio,
-          }}
-          style={{
-            height: getDimensionValue(height),
-            width: getDimensionValue(width),
-            ...style,
-          }}
-          option={{
-            ...options,
-            useUTC: utc,
-            color: colors || this.getColorPalette(),
-            grid: Array.isArray(grid) ? grid.map(Grid) : Grid(grid),
-            tooltip:
-              tooltip !== null
-                ? Tooltip({showTimeInTooltip, isGroupedByDate, utc, ...tooltip})
-                : null,
-            legend: legend ? Legend({...legend}) : null,
-            yAxis: yAxisOrCustom,
-            xAxis: xAxisOrCustom,
-            series: !previousPeriod
-              ? series
-              : [
-                  ...series,
-                  ...previousPeriod.map(previous =>
-                    LineSeries({
-                      name: previous.seriesName,
-                      data: previous.data.map(({name, value}) => [name, value]),
-                      lineStyle: {
-                        color: theme.gray400,
-                        type: 'dotted',
-                      },
-                      itemStyle: {
-                        color: theme.gray400,
-                      },
-                    })
-                  ),
-                ],
-            axisPointer,
-            dataZoom,
-            toolbox: toolBox,
-            graphic,
-          }}
-        />
-      </ChartContainer>
-    );
-  }
-}
-
-// Contains styling for chart elements as we can't easily style those
-// elements directly
-const ChartContainer = styled('div')`
-  /* Tooltip styling */
-  .tooltip-series,
-  .tooltip-date {
-    color: ${theme.gray500};
-    font-family: ${theme.text.family};
-    background: ${theme.gray800};
-    padding: ${space(1)} ${space(2)};
-    border-radius: ${theme.borderRadius} ${theme.borderRadius} 0 0;
-  }
-  .tooltip-series-solo {
-    border-radius: ${theme.borderRadius};
-  }
-  .tooltip-label {
-    margin-right: ${space(1)};
-  }
-  .tooltip-label strong {
-    font-weight: normal;
-    color: #fff;
-  }
-  .tooltip-series > div {
-    display: flex;
-    justify-content: space-between;
-    align-items: baseline;
-  }
-  .tooltip-date {
-    border-top: 1px solid ${theme.gray600};
-    text-align: center;
-    position: relative;
-    width: auto;
-    border-radius: ${theme.borderRadiusBottom};
-  }
-  .tooltip-arrow {
-    top: 100%;
-    left: 50%;
-    border: 0px solid transparent;
-    content: ' ';
-    height: 0;
-    width: 0;
-    position: absolute;
-    pointer-events: none;
-    border-top-color: ${theme.gray800};
-    border-width: 8px;
-    margin-left: -8px;
-  }
-
-  .echarts-for-react div:first-of-type {
-    width: 100% !important;
-  }
-`;
-
-const BaseChartRef = React.forwardRef((props, ref) => (
-  <BaseChart forwardedRef={ref} {...props} />
-));
-BaseChartRef.displayName = 'forwardRef(BaseChart)';
-
-export default BaseChartRef;
diff --git a/src/sentry/static/sentry/app/components/charts/baseChart.tsx b/src/sentry/static/sentry/app/components/charts/baseChart.tsx
new file mode 100644
index 0000000000..2c25a6d1f5
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/baseChart.tsx
@@ -0,0 +1,458 @@
+import 'zrender/lib/svg/svg';
+
+import React from 'react';
+import ReactEchartsCore from 'echarts-for-react/lib/core';
+import echarts, {EChartOption, ECharts} from 'echarts/lib/echarts';
+import styled from '@emotion/styled';
+
+import {Series} from 'app/types/echarts';
+import space from 'app/styles/space';
+import theme from 'app/utils/theme';
+
+import Grid from './components/grid';
+import Legend from './components/legend';
+import LineSeries from './series/lineSeries';
+import Tooltip from './components/tooltip';
+import XAxis from './components/xAxis';
+import YAxis from './components/yAxis';
+
+// If dimension is a number convert it to pixels, otherwise use dimension without transform
+const getDimensionValue = (dimension?: ReactEChartOpts['height']) => {
+  if (typeof dimension === 'number') {
+    return `${dimension}px`;
+  }
+
+  if (dimension === null) {
+    return undefined;
+  }
+
+  return dimension;
+};
+
+type ReactEchartProps = React.ComponentProps<typeof ReactEchartsCore>;
+type ReactEChartOpts = NonNullable<ReactEchartProps['opts']>;
+
+type EChartEventHandler<P> = (params: P, instance: ECharts) => void;
+
+/**
+ * Used for soem properties that can be truncated
+ */
+type Truncateable = {
+  /**
+   * Truncate the label / value some number of characters
+   */
+  truncate?: number;
+};
+
+type Props = {
+  options?: EChartOption;
+  /**
+   * Chart Series
+   * This is different than the interface to higher level charts, these need to
+   * be an array of ECharts "Series" components.
+   */
+  series?: EChartOption.Series[];
+  /**
+   * Array of color codes to use in charts
+   */
+  colors?: string[];
+  /**
+   * Must be explicitly `null` to disable xAxis
+   *
+   * Additionally a `truncate` option
+   */
+  xAxis?: EChartOption.XAxis & Truncateable;
+  /**
+   * Must be explicitly `null` to disable yAxis
+   */
+  yAxis?: EChartOption.YAxis;
+  /**
+   * Pass `true` to have 2 y-axes with default properties. Can pass an array of
+   * objects to customize yAxis properties
+   */
+  yAxes?: true | Props['yAxis'][];
+  /**
+   * Pass `true` to have 2 x-axes with default properties.  Can pass an array
+   * of multiple objects to customize xAxis properties
+   */
+  xAxes?: true | Props['xAxis'][];
+  /**
+   * Tooltip options
+   */
+  tooltip?: EChartOption.Tooltip &
+    Truncateable & {
+      filter?: (value: number) => number;
+      formatAxisLabel?: (
+        value: number,
+        isTimestamp: boolean,
+        utc: boolean,
+        showTimeInTooltip: boolean
+      ) => string;
+      valueFormatter?: (value: number, label?: string) => string | number;
+      nameFormatter?: (name: string) => string;
+    };
+  /**
+   * DataZoom (allows for zooming of chart)
+   */
+  dataZoom?: EChartOption['dataZoom'];
+  /**
+   * Axis pointer options
+   */
+  axisPointer?: EChartOption.AxisPointer;
+  /**
+   * Toolbox options
+   */
+  toolBox?: EChartOption['toolbox'];
+  /**
+   * Graphic options
+   */
+  graphic?: EChartOption['graphic'];
+  /**
+   * ECharts Grid options. multiple grids allow multiple sub-graphs.
+   */
+  grid?: EChartOption.Grid | EChartOption.Grid[];
+  /**
+   * Chart legend
+   */
+  legend?: EChartOption.Legend & Truncateable;
+  /**
+   * Chart height
+   */
+  height?: ReactEChartOpts['height'];
+  /**
+   * Chart width
+   */
+  width?: ReactEChartOpts['width'];
+  /**
+   * Use `canvas` when dealing with large datasets
+   * See: https://ecomfe.github.io/echarts-doc/public/en/tutorial.html#Render%20by%20Canvas%20or%20SVG
+   */
+  renderer?: ReactEChartOpts['renderer'];
+  devicePixelRatio?: ReactEChartOpts['devicePixelRatio'];
+  /**
+   * theme name
+   * example theme: https://github.com/apache/incubator-echarts/blob/master/theme/dark.js
+   */
+  theme?: ReactEchartProps['theme'];
+  /**
+   * states whether or not to merge with previous `option`
+   */
+  notMerge?: boolean;
+  /**
+   * states whether not to update chart immediately
+   */
+  lazyUpdate?: boolean;
+  onChartReady?: (instance: ECharts) => void;
+  onHighlight?: EChartEventHandler<any>;
+  onMouseOver?: EChartEventHandler<any>;
+  onClick?: EChartEventHandler<any>;
+  onDataZoom?: EChartEventHandler<{
+    type: 'datazoom';
+    /**
+     * percentage of zoom start position, 0 - 100
+     */
+    start: number;
+    /**
+     * percentage of zoom finish position, 0 - 100
+     */
+    end: number;
+    /**
+     * data value of zoom start position; only exists in zoom event of
+     * triggered by toolbar
+     */
+    startValue?: number;
+    /**
+     * data value of zoom finish position; only exists in zoom event of
+     * triggered by toolbar
+     */
+    endValue?: number;
+  }>;
+  /**
+   * One example of when this is called is restoring chart from zoom levels
+   */
+  onRestore?: EChartEventHandler<{type: 'restore'}>;
+  onFinished?: EChartEventHandler<{}>;
+  onLegendSelectChanged: EChartEventHandler<{}>;
+  /**
+   * Forwarded Ref
+   */
+  forwardedRef?: React.Ref<ReactEchartsCore>;
+  /**
+   * Custom chart props that are implemented by us (and not a feature of eCharts)
+   *
+   * Display previous period as a LineSeries
+   */
+  previousPeriod?: Series[];
+  /**
+   * If data is grouped by date; then apply default date formatting to x-axis
+   * and tooltips.
+   */
+  isGroupedByDate?: boolean;
+  /**
+   * Format timestamp with date AND time
+   */
+  showTimeInTooltip?: boolean;
+  /**
+   * Use short date formatting for xAxis
+   */
+  useShortDate?: boolean;
+  /**
+   * optional, used to determine how xAxis is formatted if `isGroupedByDate == true`
+   */
+  start?: Date;
+  /**
+   * optional, used to determine how xAxis is formatted if `isGroupedByDate == true`
+   */
+  end?: Date;
+  /**
+   * optional, used to determine how xAxis is formatted if `isGroupedByDate == true`
+   */
+  period?: string;
+  /**
+   * Formats dates as UTC?
+   */
+  utc?: boolean;
+  /**
+   * Inline styles
+   */
+  style?: React.CSSProperties;
+};
+
+class BaseChart extends React.Component<Props> {
+  static defaultProps = {
+    height: 200,
+    width: 'auto',
+    renderer: 'svg',
+    notMerge: true,
+    lazyUpdate: false,
+    onChartReady: () => {},
+    options: {},
+
+    series: [],
+    xAxis: {},
+    yAxis: {},
+    isGroupedByDate: false,
+  };
+
+  getEventsMap: ReactEchartProps['onEvents'] = {
+    click: (props, instance) => {
+      this.handleClick(props, instance);
+      this.props.onClick?.(props, instance);
+    },
+    highlight: (props, instance) => this.props.onHighlight?.(props, instance),
+    mouseover: (props, instance) => this.props.onMouseOver?.(props, instance),
+    datazoom: (props, instance) => this.props.onDataZoom?.(props, instance),
+    restore: (props, instance) => this.props.onRestore?.(props, instance),
+    finished: (props, instance) => this.props.onFinished?.(props, instance),
+    legendselectchanged: (props, instance) =>
+      this.props.onLegendSelectChanged?.(props, instance),
+  };
+
+  // TODO(ts): What is the series type? EChartOption.Series's data cannot have
+  // `onClick` since it's typically an array.
+  /**
+   * Handle series item clicks (e.g. Releases mark line or a single series item)
+   * This is different than when you hover over an "axis" line on a chart (e.g.
+   * if there are 2 series for an axis and you're not directly hovered over an item)
+   *
+   * Calls "onClick" inside of series data
+   */
+  handleClick = (series: any, instance: ECharts) => {
+    if (series.data) {
+      series.data.onClick?.(series, instance);
+    }
+  };
+
+  getColorPalette() {
+    const {series} = this.props;
+
+    const palette = series?.length
+      ? theme.charts.getColorPalette(series.length)
+      : theme.charts.colors;
+
+    return (palette as unknown) as string[];
+  }
+
+  render() {
+    const {
+      options,
+      colors,
+      grid,
+      tooltip,
+      legend,
+      series,
+      yAxis,
+      xAxis,
+      dataZoom,
+      toolBox,
+      graphic,
+      axisPointer,
+
+      isGroupedByDate,
+      showTimeInTooltip,
+      useShortDate,
+      previousPeriod,
+      start,
+      end,
+      period,
+      utc,
+      yAxes,
+      xAxes,
+
+      devicePixelRatio,
+      height,
+      width,
+      renderer,
+      notMerge,
+      lazyUpdate,
+      style,
+      forwardedRef,
+      onChartReady,
+    } = this.props;
+
+    const yAxisOrCustom = !yAxes
+      ? yAxis !== null
+        ? YAxis(yAxis)
+        : undefined
+      : Array.isArray(yAxes)
+      ? yAxes.map(YAxis)
+      : [YAxis(), YAxis()];
+    const xAxisOrCustom = !xAxes
+      ? xAxis !== null
+        ? XAxis({
+            ...xAxis,
+            useShortDate,
+            start,
+            end,
+            period,
+            isGroupedByDate,
+            utc,
+          })
+        : undefined
+      : Array.isArray(xAxes)
+      ? xAxes.map(axis =>
+          XAxis({...axis, useShortDate, start, end, period, isGroupedByDate, utc})
+        )
+      : [XAxis(), XAxis()];
+
+    return (
+      <ChartContainer>
+        <ReactEchartsCore
+          ref={forwardedRef}
+          echarts={echarts}
+          notMerge={notMerge}
+          lazyUpdate={lazyUpdate}
+          theme={this.props.theme}
+          onChartReady={onChartReady}
+          onEvents={this.getEventsMap}
+          opts={{
+            height,
+            width,
+            renderer,
+            devicePixelRatio,
+          }}
+          style={{
+            height: getDimensionValue(height),
+            width: getDimensionValue(width),
+            ...style,
+          }}
+          option={{
+            ...options,
+            useUTC: utc,
+            color: colors || this.getColorPalette(),
+            grid: Array.isArray(grid) ? grid.map(Grid) : Grid(grid),
+            tooltip:
+              tooltip !== null
+                ? Tooltip({showTimeInTooltip, isGroupedByDate, utc, ...tooltip})
+                : undefined,
+            legend: legend ? Legend({...legend}) : undefined,
+            yAxis: yAxisOrCustom,
+            xAxis: xAxisOrCustom,
+            series: !previousPeriod
+              ? series
+              : [
+                  ...series,
+                  ...previousPeriod.map(previous =>
+                    LineSeries({
+                      name: previous.seriesName,
+                      data: previous.data.map(({name, value}) => [name, value]),
+                      lineStyle: {
+                        color: theme.gray400,
+                        type: 'dotted',
+                      },
+                      itemStyle: {
+                        color: theme.gray400,
+                      },
+                    })
+                  ),
+                ],
+            axisPointer,
+            dataZoom,
+            toolbox: toolBox,
+            graphic,
+          }}
+        />
+      </ChartContainer>
+    );
+  }
+}
+
+// Contains styling for chart elements as we can't easily style those
+// elements directly
+const ChartContainer = styled('div')`
+  /* Tooltip styling */
+  .tooltip-series,
+  .tooltip-date {
+    color: ${p => p.theme.gray500};
+    font-family: ${p => p.theme.text.family};
+    background: ${p => p.theme.gray800};
+    padding: ${space(1)} ${space(2)};
+    border-radius: ${p => p.theme.borderRadius} ${p => p.theme.borderRadius} 0 0;
+  }
+  .tooltip-series-solo {
+    border-radius: ${p => p.theme.borderRadius};
+  }
+  .tooltip-label {
+    margin-right: ${space(1)};
+  }
+  .tooltip-label strong {
+    font-weight: normal;
+    color: #fff;
+  }
+  .tooltip-series > div {
+    display: flex;
+    justify-content: space-between;
+    align-items: baseline;
+  }
+  .tooltip-date {
+    border-top: 1px solid ${p => p.theme.gray600};
+    text-align: center;
+    position: relative;
+    width: auto;
+    border-radius: ${p => p.theme.borderRadiusBottom};
+  }
+  .tooltip-arrow {
+    top: 100%;
+    left: 50%;
+    border: 0px solid transparent;
+    content: ' ';
+    height: 0;
+    width: 0;
+    position: absolute;
+    pointer-events: none;
+    border-top-color: ${p => p.theme.gray800};
+    border-width: 8px;
+    margin-left: -8px;
+  }
+
+  .echarts-for-react div:first-of-type {
+    width: 100% !important;
+  }
+`;
+
+const BaseChartRef = React.forwardRef<ReactEchartsCore, Props>((props, ref) => (
+  <BaseChart forwardedRef={ref} {...props} />
+));
+BaseChartRef.displayName = 'forwardRef(BaseChart)';
+
+export default BaseChartRef;
diff --git a/src/sentry/static/sentry/app/components/charts/components/grid.jsx b/src/sentry/static/sentry/app/components/charts/components/grid.tsx
similarity index 69%
rename from src/sentry/static/sentry/app/components/charts/components/grid.jsx
rename to src/sentry/static/sentry/app/components/charts/components/grid.tsx
index 4694de6d32..320530373a 100644
--- a/src/sentry/static/sentry/app/components/charts/components/grid.jsx
+++ b/src/sentry/static/sentry/app/components/charts/components/grid.tsx
@@ -1,17 +1,17 @@
+import {EChartOption} from 'echarts';
+
 /**
  * Drawing grid in rectangular coordinates
  *
  * e.g. alignment of your chart?
  */
-export default function Grid(props = {}) {
+export default function Grid(props: EChartOption.Grid = {}): EChartOption.Grid {
   return {
     top: 20,
     bottom: 20,
     // This should allow for sufficient space for Y-axis labels
     left: '0%',
     right: '0%',
-    padding: 0,
-    itemGap: 25,
     containLabel: true,
     ...props,
   };
diff --git a/src/sentry/static/sentry/app/components/charts/components/legend.jsx b/src/sentry/static/sentry/app/components/charts/components/legend.jsx
deleted file mode 100644
index fb72cb3d87..0000000000
--- a/src/sentry/static/sentry/app/components/charts/components/legend.jsx
+++ /dev/null
@@ -1,15 +0,0 @@
-import 'echarts/lib/component/legend';
-import 'echarts/lib/component/legendScroll';
-import {truncationFormatter} from '../utils';
-
-export default function Legend({truncate, ...props} = {}) {
-  const formatter = value => truncationFormatter(value, truncate);
-
-  return {
-    show: true,
-    type: 'scroll',
-    padding: 0,
-    formatter,
-    ...props,
-  };
-}
diff --git a/src/sentry/static/sentry/app/components/charts/components/legend.tsx b/src/sentry/static/sentry/app/components/charts/components/legend.tsx
new file mode 100644
index 0000000000..cd419d2b73
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/components/legend.tsx
@@ -0,0 +1,22 @@
+import 'echarts/lib/component/legend';
+import 'echarts/lib/component/legendScroll';
+import {EChartOption} from 'echarts';
+
+import BaseChart from 'app/components/charts/baseChart';
+
+import {truncationFormatter} from '../utils';
+
+type ChartProps = React.ComponentProps<typeof BaseChart>;
+
+export default function Legend(props: ChartProps['legend'] = {}): EChartOption.Legend {
+  const {truncate, ...rest} = props ?? {};
+  const formatter = (value: string) => truncationFormatter(value, truncate ?? 0);
+
+  return {
+    show: true,
+    type: 'scroll',
+    padding: 0,
+    formatter,
+    ...rest,
+  };
+}
diff --git a/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx b/src/sentry/static/sentry/app/components/charts/components/tooltip.tsx
similarity index 66%
rename from src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
rename to src/sentry/static/sentry/app/components/charts/components/tooltip.tsx
index a1d92c8b48..55734fc5fc 100644
--- a/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
+++ b/src/sentry/static/sentry/app/components/charts/components/tooltip.tsx
@@ -1,10 +1,19 @@
 import 'echarts/lib/component/tooltip';
+import {EChartOption} from 'echarts';
 
 import {getFormattedDate, getTimeFormat} from 'app/utils/dates';
+import BaseChart from 'app/components/charts/baseChart';
 
 import {truncationFormatter} from '../utils';
 
-function defaultFormatAxisLabel(value, isTimestamp, utc, showTimeInTooltip) {
+type ChartProps = React.ComponentProps<typeof BaseChart>;
+
+function defaultFormatAxisLabel(
+  value: number,
+  isTimestamp: boolean,
+  utc: boolean,
+  showTimeInTooltip: boolean
+) {
   if (!isTimestamp) {
     return value;
   }
@@ -13,7 +22,7 @@ function defaultFormatAxisLabel(value, isTimestamp, utc, showTimeInTooltip) {
   return getFormattedDate(value, format, {local: !utc});
 }
 
-function defaultValueFormatter(value) {
+function defaultValueFormatter(value: string | number) {
   if (typeof value === 'number') {
     return value.toLocaleString();
   }
@@ -21,11 +30,11 @@ function defaultValueFormatter(value) {
   return value;
 }
 
-function defaultNameFormatter(value) {
+function defaultNameFormatter(value: string) {
   return value;
 }
 
-function getSeriesValue(series, offset) {
+function getSeriesValue(series: EChartOption.Tooltip.Format, offset: number) {
   if (!series.data) {
     return undefined;
   }
@@ -39,6 +48,18 @@ function getSeriesValue(series, offset) {
   return undefined;
 }
 
+type NeededChartProps = 'isGroupedByDate' | 'showTimeInTooltip' | 'utc';
+
+type TooltipFormatters =
+  | 'truncate'
+  | 'filter'
+  | 'formatAxisLabel'
+  | 'valueFormatter'
+  | 'nameFormatter';
+
+type FormatterOptions = Pick<NonNullable<ChartProps['tooltip']>, TooltipFormatters> &
+  Pick<ChartProps, NeededChartProps>;
+
 function getFormatter({
   filter,
   isGroupedByDate,
@@ -48,8 +69,8 @@ function getFormatter({
   utc,
   valueFormatter = defaultValueFormatter,
   nameFormatter = defaultNameFormatter,
-}) {
-  const getFilter = seriesParam => {
+}: FormatterOptions) {
+  const getFilter = (seriesParam: EChartOption.Tooltip.Format) => {
     // Series do not necessarily have `data` defined, e.g. releases don't have `data`, but rather
     // has a series using strictly `markLine`s.
     // However, real series will have `data` as a tuple of (label, value) or be
@@ -62,22 +83,27 @@ function getFormatter({
     return true;
   };
 
-  return seriesParamsOrParam => {
+  const formatter: EChartOption.Tooltip['formatter'] = seriesParamsOrParam => {
     // If this is a tooltip for the axis, it will include all series for that axis item.
     // In this case seriesParamsOrParam will be of type `Object[]`
     //
     // Otherwise, it will be an `Object`, and is a tooltip for a single item
-    const isAxisItem = Array.isArray(seriesParamsOrParam);
     const axisFormatterOrDefault = formatAxisLabel || defaultFormatAxisLabel;
 
     // Special tooltip if component is a `markPoint`
-    if (!isAxisItem && seriesParamsOrParam.componentType === 'markPoint') {
-      const timestamp = seriesParamsOrParam.data.coord[0];
+    if (
+      !Array.isArray(seriesParamsOrParam) &&
+      // TODO(ts): The EChart types suggest that this can _only_ be `series`,
+      //           but assuming this code is correct (which I have not
+      //           verified) their types may be wrong.
+      (seriesParamsOrParam.componentType as unknown) === 'markPoint'
+    ) {
+      const timestamp = seriesParamsOrParam.data.coord[0] as number;
       const label = axisFormatterOrDefault(
         timestamp,
-        isGroupedByDate,
-        utc,
-        showTimeInTooltip
+        !!isGroupedByDate,
+        !!utc,
+        !!showTimeInTooltip
       );
       // eCharts sets seriesName as null when `componentType` !== 'series'
       const truncatedName = truncationFormatter(
@@ -101,18 +127,20 @@ function getFormatter({
       ].join('');
     }
 
-    const seriesParams = isAxisItem ? seriesParamsOrParam : [seriesParamsOrParam];
+    const seriesParams = Array.isArray(seriesParamsOrParam)
+      ? seriesParamsOrParam
+      : [seriesParamsOrParam];
 
     // If axis, timestamp comes from axis, otherwise for a single item it is defined in the data attribute.
     // The data attribute is usually a list of [name, value] but can also be an object of {name, value} when
     // there is item specific formatting being used.
-    const timestamp = isAxisItem
+    const timestamp = Array.isArray(seriesParamsOrParam)
       ? seriesParams[0].axisValue
       : getSeriesValue(seriesParams[0], 0);
 
     const label =
       seriesParams.length &&
-      axisFormatterOrDefault(timestamp, isGroupedByDate, utc, showTimeInTooltip);
+      axisFormatterOrDefault(timestamp, !!isGroupedByDate, !!utc, !!showTimeInTooltip);
 
     return [
       '<div class="tooltip-series">',
@@ -120,7 +148,7 @@ function getFormatter({
         .filter(getFilter)
         .map(s => {
           const formattedLabel = nameFormatter(
-            truncationFormatter(s.seriesName, truncate)
+            truncationFormatter(s.seriesName ?? '', truncate)
           );
           const value = valueFormatter(getSeriesValue(s, 1), s.seriesName);
           return `<div><span class="tooltip-label">${s.marker} <strong>${formattedLabel}</strong></span> ${value}</div>`;
@@ -131,8 +159,12 @@ function getFormatter({
       `<div class="tooltip-arrow"></div>`,
     ].join('');
   };
+
+  return formatter;
 }
 
+type Props = ChartProps['tooltip'] & Pick<ChartProps, NeededChartProps>;
+
 export default function Tooltip({
   filter,
   isGroupedByDate,
@@ -144,7 +176,7 @@ export default function Tooltip({
   valueFormatter,
   nameFormatter,
   ...props
-} = {}) {
+}: Props = {}): EChartOption.Tooltip {
   formatter =
     formatter ||
     getFormatter({
@@ -171,35 +203,38 @@ export default function Tooltip({
 
       // Get the left offset of the tip container (the chart)
       // so that we can estimate overflows
-      const chartLeft = dom.parentNode.getBoundingClientRect().left;
+      const chartLeft =
+        dom.parentNode instanceof Element
+          ? dom.parentNode.getBoundingClientRect().left
+          : 0;
 
       // Determine the new left edge.
-      let leftPos = pos[0] - tipWidth / 2;
+      let leftPos = Number(pos[0]) - tipWidth / 2;
       let arrowPosition = '50%';
 
       // And the right edge taking into account the chart left offset
-      const rightEdge = chartLeft + pos[0] + tipWidth / 2;
+      const rightEdge = chartLeft + Number(pos[0]) + tipWidth / 2;
 
       // If the tooltip would leave viewport on the right, pin it.
       // and adjust the arrow position.
       if (rightEdge >= window.innerWidth - 30) {
         leftPos -= rightEdge - window.innerWidth + 30;
-        arrowPosition = `${pos[0] - leftPos}px`;
+        arrowPosition = `${Number(pos[0]) - leftPos}px`;
       }
 
       // If the tooltip would leave viewport on the left, pin it.
       if (leftPos + chartLeft - 20 <= 0) {
         leftPos = chartLeft * -1 + 20;
-        arrowPosition = `${pos[0] - leftPos}px`;
+        arrowPosition = `${Number(pos[0]) - leftPos}px`;
       }
 
       // Reposition the arrow.
-      const arrow = dom.querySelector('.tooltip-arrow');
+      const arrow = dom.querySelector<HTMLDivElement>('.tooltip-arrow');
       if (arrow) {
         arrow.style.left = arrowPosition;
       }
 
-      return {left: leftPos, top: pos[1] - tipHeight - 20};
+      return {left: leftPos, top: Number(pos[1]) - tipHeight - 20};
     },
     formatter,
     ...props,
diff --git a/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx b/src/sentry/static/sentry/app/components/charts/components/xAxis.tsx
similarity index 79%
rename from src/sentry/static/sentry/app/components/charts/components/xAxis.jsx
rename to src/sentry/static/sentry/app/components/charts/components/xAxis.tsx
index 3cbaae5b5f..d2e25f26d7 100644
--- a/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx
+++ b/src/sentry/static/sentry/app/components/charts/components/xAxis.tsx
@@ -1,8 +1,22 @@
+import {EChartOption} from 'echarts';
+
 import {getFormattedDate, getTimeFormat} from 'app/utils/dates';
+import BaseChart from 'app/components/charts/baseChart';
 import theme from 'app/utils/theme';
 
 import {truncationFormatter, useShortInterval} from '../utils';
 
+type ChartProps = React.ComponentProps<typeof BaseChart>;
+type HelperProps =
+  | 'isGroupedByDate'
+  | 'useShortDate'
+  | 'start'
+  | 'end'
+  | 'period'
+  | 'utc';
+
+type Props = ChartProps['xAxis'] & Pick<ChartProps, HelperProps>;
+
 export default function XAxis({
   isGroupedByDate,
   useShortDate,
@@ -15,8 +29,8 @@ export default function XAxis({
   period,
   utc,
   ...props
-} = {}) {
-  const axisLabelFormatter = (value, index) => {
+}: Props = {}): EChartOption.XAxis {
+  const axisLabelFormatter = (value: string, index: number) => {
     if (isGroupedByDate) {
       const timeFormat = getTimeFormat();
       const dateFormat = useShortDate ? 'MMM Do' : `MMM D ${timeFormat}`;
diff --git a/src/sentry/static/sentry/app/components/charts/components/yAxis.jsx b/src/sentry/static/sentry/app/components/charts/components/yAxis.tsx
similarity index 70%
rename from src/sentry/static/sentry/app/components/charts/components/yAxis.jsx
rename to src/sentry/static/sentry/app/components/charts/components/yAxis.tsx
index 67894da9e0..1ad5283e11 100644
--- a/src/sentry/static/sentry/app/components/charts/components/yAxis.jsx
+++ b/src/sentry/static/sentry/app/components/charts/components/yAxis.tsx
@@ -1,6 +1,8 @@
+import {EChartOption} from 'echarts';
+
 import theme from 'app/utils/theme';
 
-export default function YAxis(props = {}) {
+export default function YAxis(props: EChartOption.YAxis = {}): EChartOption.YAxis {
   return {
     axisLine: {
       show: false,
diff --git a/src/sentry/static/sentry/app/components/charts/series/areaSeries.jsx b/src/sentry/static/sentry/app/components/charts/series/areaSeries.jsx
deleted file mode 100644
index 6e332ee0e7..0000000000
--- a/src/sentry/static/sentry/app/components/charts/series/areaSeries.jsx
+++ /dev/null
@@ -1,7 +0,0 @@
-import LineSeries from 'app/components/charts/series/lineSeries';
-
-export default function AreaSeries(props = {}) {
-  return LineSeries({
-    ...props,
-  });
-}
diff --git a/src/sentry/static/sentry/app/components/charts/series/areaSeries.tsx b/src/sentry/static/sentry/app/components/charts/series/areaSeries.tsx
new file mode 100644
index 0000000000..eccff1022e
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/series/areaSeries.tsx
@@ -0,0 +1,11 @@
+import {EChartOption} from 'echarts';
+
+import LineSeries from 'app/components/charts/series/lineSeries';
+
+export default function AreaSeries(
+  props: EChartOption.SeriesLine = {}
+): EChartOption.SeriesLine {
+  return LineSeries({
+    ...props,
+  });
+}
diff --git a/src/sentry/static/sentry/app/components/charts/series/barSeries.jsx b/src/sentry/static/sentry/app/components/charts/series/barSeries.jsx
deleted file mode 100644
index cf250db119..0000000000
--- a/src/sentry/static/sentry/app/components/charts/series/barSeries.jsx
+++ /dev/null
@@ -1,8 +0,0 @@
-import 'echarts/lib/chart/bar';
-
-export default function barSeries(props = {}) {
-  return {
-    ...props,
-    type: 'bar',
-  };
-}
diff --git a/src/sentry/static/sentry/app/components/charts/series/barSeries.tsx b/src/sentry/static/sentry/app/components/charts/series/barSeries.tsx
new file mode 100644
index 0000000000..bd82b0ab49
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/series/barSeries.tsx
@@ -0,0 +1,11 @@
+import 'echarts/lib/chart/bar';
+import {EChartOption} from 'echarts';
+
+export default function barSeries(
+  props: EChartOption.SeriesBar = {}
+): EChartOption.SeriesBar {
+  return {
+    ...props,
+    type: 'bar',
+  };
+}
diff --git a/src/sentry/static/sentry/app/components/charts/series/lineSeries.jsx b/src/sentry/static/sentry/app/components/charts/series/lineSeries.tsx
similarity index 57%
rename from src/sentry/static/sentry/app/components/charts/series/lineSeries.jsx
rename to src/sentry/static/sentry/app/components/charts/series/lineSeries.tsx
index fc60ab8162..3697ba486c 100644
--- a/src/sentry/static/sentry/app/components/charts/series/lineSeries.jsx
+++ b/src/sentry/static/sentry/app/components/charts/series/lineSeries.tsx
@@ -1,8 +1,11 @@
 import 'echarts/lib/chart/line';
+import {EChartOption} from 'echarts';
 
 import theme from 'app/utils/theme';
 
-export default function LineSeries(props = {}) {
+export default function LineSeries(
+  props: EChartOption.SeriesLine
+): EChartOption.SeriesLine {
   return {
     showSymbol: false,
     symbolSize: theme.charts.symbolSize,
diff --git a/src/sentry/static/sentry/app/components/charts/series/mapSeries.jsx b/src/sentry/static/sentry/app/components/charts/series/mapSeries.jsx
deleted file mode 100644
index 32e1831a45..0000000000
--- a/src/sentry/static/sentry/app/components/charts/series/mapSeries.jsx
+++ /dev/null
@@ -1,13 +0,0 @@
-import 'echarts/lib/chart/map';
-import 'echarts/map/js/world';
-
-export default function MapSeries(props = {}) {
-  return {
-    roam: true,
-    itemStyle: {
-      emphasis: {label: {show: false}},
-    },
-    ...props,
-    type: 'map',
-  };
-}
diff --git a/src/sentry/static/sentry/app/components/charts/series/mapSeries.tsx b/src/sentry/static/sentry/app/components/charts/series/mapSeries.tsx
new file mode 100644
index 0000000000..d9b75ac439
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/series/mapSeries.tsx
@@ -0,0 +1,18 @@
+import 'echarts/lib/chart/map';
+import 'echarts/map/js/world';
+import {EChartOption} from 'echarts';
+
+export default function MapSeries(
+  props: EChartOption.SeriesMap = {}
+): EChartOption.SeriesMap {
+  return {
+    roam: true,
+    itemStyle: {
+      // TODO(ts): label doesn't seem to exist on the emphasis? I have not
+      //           verified if removing this has an affect on the world chart.
+      emphasis: {label: {show: false}} as any,
+    },
+    ...props,
+    type: 'map',
+  };
+}
diff --git a/src/sentry/static/sentry/app/components/charts/series/pieSeries.jsx b/src/sentry/static/sentry/app/components/charts/series/pieSeries.jsx
deleted file mode 100644
index 77bf0ffc6d..0000000000
--- a/src/sentry/static/sentry/app/components/charts/series/pieSeries.jsx
+++ /dev/null
@@ -1,9 +0,0 @@
-import 'echarts/lib/chart/pie';
-
-export default function PieSeries(props = {}) {
-  return {
-    radius: ['50%', '70%'],
-    ...props,
-    type: 'pie',
-  };
-}
diff --git a/src/sentry/static/sentry/app/components/charts/series/pieSeries.tsx b/src/sentry/static/sentry/app/components/charts/series/pieSeries.tsx
new file mode 100644
index 0000000000..454f14e74d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/series/pieSeries.tsx
@@ -0,0 +1,12 @@
+import 'echarts/lib/chart/pie';
+import {EChartOption} from 'echarts';
+
+export default function PieSeries(
+  props: EChartOption.SeriesPie = {}
+): EChartOption.SeriesPie {
+  return {
+    radius: ['50%', '70%'],
+    ...props,
+    type: 'pie',
+  };
+}
diff --git a/src/sentry/static/sentry/app/components/charts/utils.tsx b/src/sentry/static/sentry/app/components/charts/utils.tsx
index 84b8c8339d..6659011821 100644
--- a/src/sentry/static/sentry/app/components/charts/utils.tsx
+++ b/src/sentry/static/sentry/app/components/charts/utils.tsx
@@ -14,7 +14,7 @@ const ONE_HOUR = 60;
 
 export type DateTimeObject = Partial<GlobalSelection['datetime']>;
 
-export function truncationFormatter(value: string, truncate: number): string {
+export function truncationFormatter(value: string, truncate: number | undefined): string {
   if (!truncate) {
     return escape(value);
   }
diff --git a/src/sentry/static/sentry/app/types/echarts.tsx b/src/sentry/static/sentry/app/types/echarts.tsx
index 45c97d0236..dc90caaa89 100644
--- a/src/sentry/static/sentry/app/types/echarts.tsx
+++ b/src/sentry/static/sentry/app/types/echarts.tsx
@@ -3,6 +3,7 @@ import {ECharts, EChartOption} from 'echarts';
 export type SeriesDataUnit = {
   value: number;
   name: string | number; // number because we sometimes use timestamps
+  onClick?: (series: Series, insatnce: ECharts) => void;
   itemStyle?: {
     color?: string;
   };
diff --git a/tests/js/spec/views/dashboards/widgetChart.spec.jsx b/tests/js/spec/views/dashboards/widgetChart.spec.jsx
index c2f3ecd921..33a7b58692 100644
--- a/tests/js/spec/views/dashboards/widgetChart.spec.jsx
+++ b/tests/js/spec/views/dashboards/widgetChart.spec.jsx
@@ -1,6 +1,6 @@
 import React from 'react';
 
-import {mount} from 'sentry-test/enzyme';
+import {mountWithTheme} from 'sentry-test/enzyme';
 import {initializeOrg} from 'sentry-test/initializeOrg';
 
 import WidgetChart from 'app/views/dashboards/widgetChart';
@@ -63,7 +63,7 @@ describe('WidgetChart', function() {
   });
 
   it('renders zoomable time chart', async function() {
-    wrapper = mount(
+    wrapper = mountWithTheme(
       <WidgetChart
         widget={TestStubs.Widget({
           discover: [TIME_QUERY],
@@ -80,7 +80,7 @@ describe('WidgetChart', function() {
   });
 
   it('renders time chart with series', async function() {
-    wrapper = mount(
+    wrapper = mountWithTheme(
       <WidgetChart
         widget={TestStubs.Widget(
           {
@@ -101,7 +101,7 @@ describe('WidgetChart', function() {
   });
 
   it('renders non-zoomable non-time chart', async function() {
-    wrapper = mount(
+    wrapper = mountWithTheme(
       <WidgetChart
         widget={TestStubs.Widget(
           {
@@ -123,7 +123,7 @@ describe('WidgetChart', function() {
   });
 
   it('update only if data is not reloading and data has changed', async function() {
-    wrapper = mount(
+    wrapper = mountWithTheme(
       <WidgetChart
         widget={TestStubs.Widget(
           {
diff --git a/yarn.lock b/yarn.lock
index d28c78a28d..2cac3945cd 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -6306,13 +6306,13 @@ ecc-jsbn@~0.1.1:
     jsbn "~0.1.0"
     safer-buffer "^2.1.0"
 
-echarts-for-react@2.0.14:
-  version "2.0.14"
-  resolved "https://registry.yarnpkg.com/echarts-for-react/-/echarts-for-react-2.0.14.tgz#6df7a31eea43ef35321e20a5854109cbc52c9df3"
-  integrity sha512-W56Cr3KP5KatVlGPKNZmmZT1IsozehT03sin7ABhzsV98jJ3rDfgKedIvrn/mlp22u/Wneddd0P7rqxLq2lO8g==
+echarts-for-react@2.0.16:
+  version "2.0.16"
+  resolved "https://registry.yarnpkg.com/echarts-for-react/-/echarts-for-react-2.0.16.tgz#8134a53dff90882c1e6a95c45ceab21e00f6c9f5"
+  integrity sha512-VmHCktay2qKt/+wpL/C7thbvIa7dYBEey0/U4Zaqo+qeA4wx+uiCd5NeCsPIhD/0Pv+2qqNswqiNiUCtcgccOw==
   dependencies:
     fast-deep-equal "^2.0.1"
-    size-sensor "^0.2.0"
+    size-sensor "^1.0.0"
 
 echarts@4.7.0:
   version "4.7.0"
@@ -14169,10 +14169,10 @@ sisteransi@^1.0.3:
   resolved "https://registry.yarnpkg.com/sisteransi/-/sisteransi-1.0.4.tgz#386713f1ef688c7c0304dc4c0632898941cad2e3"
   integrity sha512-/ekMoM4NJ59ivGSfKapeG+FWtrmWvA1p6FBZwXrqojw90vJu8lBmrTxCMuBCydKtkaUe2zt4PlxeTKpjwMbyig==
 
-size-sensor@^0.2.0:
-  version "0.2.6"
-  resolved "https://registry.yarnpkg.com/size-sensor/-/size-sensor-0.2.6.tgz#6fe43afd570786f097171834002a97fe0b19a3da"
-  integrity sha512-0EZ0tXXjyRl9R9+JpoBdH57Xpnbf5NTyDdj7fnFL6KqCsdKyah286ShMflnV2SonnrSFH4OAT/52Jy8qqnoerg==
+size-sensor@^1.0.0:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/size-sensor/-/size-sensor-1.0.1.tgz#f84e46206d3e259faff1d548e4b3beca93219dbb"
+  integrity sha512-QTy7MnuugCFXIedXRpUSk9gUnyNiaxIdxGfUjr8xxXOqIB3QvBUYP9+b51oCg2C4dnhaeNk/h57TxjbvoJrJUA==
 
 slash@^1.0.0:
   version "1.0.0"
