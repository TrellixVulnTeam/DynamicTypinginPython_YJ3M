commit e7d61bc37eaa8eb3a0cf91bca5c5fb0d806423f8
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Wed Jan 17 14:29:03 2018 -0800

    fix(forms): Invalidate pending LostPasswordHash on account changes (#6974)
    
    * First pass. still have failing tests.
    
    * Added functions to catch when a change is made to the user/useremail. need to verify this is specific enough.
    
    * Created a method to clear lost passwords in th user model. Removed code that is now unnecessary/
    
    * Added remove lost passwords when a user makes a change to 2fa.
    
    * Added remove 2fa to test to ensure that those invalidate lost password hashes.

diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index 157a73b913..9262992f2c 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -17,6 +17,7 @@ from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.db.models import BaseManager, BaseModel, BoundedAutoField
+from sentry.models import LostPasswordHash
 from sentry.utils.http import absolute_uri
 
 audit_logger = logging.getLogger('sentry.audit.user')
@@ -278,3 +279,6 @@ class User(BaseModel, AbstractBaseUser):
                 user=self,
             ).values('organization'),
         )
+
+    def clear_lost_passwords(self):
+        LostPasswordHash.objects.filter(user=self).delete()
diff --git a/src/sentry/receivers/auth.py b/src/sentry/receivers/auth.py
index aa2104c974..95a8157588 100644
--- a/src/sentry/receivers/auth.py
+++ b/src/sentry/receivers/auth.py
@@ -6,7 +6,6 @@ import six
 from django.contrib.auth.models import update_last_login
 from django.contrib.auth.signals import user_logged_in
 from django.db.utils import DatabaseError
-
 from sentry.models import UserOption
 
 
@@ -33,6 +32,10 @@ def safe_update_last_login(sender, user, **kwargs):
         logging.warn(six.text_type(exc), exc_info=True)
 
 
+def remove_lost_password_hashes(sender, user, **kwargs):
+    # Remove pending password recovery hashes; user was able to login
+    user.clear_lost_passwords()
+
 user_logged_in.disconnect(update_last_login)
 user_logged_in.connect(
     safe_update_last_login,
@@ -41,3 +44,7 @@ user_logged_in.connect(
 )
 
 user_logged_in.connect(set_language_on_logon, dispatch_uid="set_language_on_logon", weak=False)
+user_logged_in.connect(
+    remove_lost_password_hashes,
+    dispatch_uid='remove_lost_password_hashes',
+    weak=False)
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 18a7bf3213..b223a4bbbf 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -296,6 +296,8 @@ def account_settings(request):
                 msg = _('A confirmation email has been sent to %s.') % user_email.email
                 messages.add_message(request, messages.SUCCESS, msg)
 
+        user.clear_lost_passwords()
+
         messages.add_message(request, messages.SUCCESS, _('Your settings were saved.'))
         return HttpResponseRedirect(request.path)
 
@@ -509,7 +511,7 @@ def show_emails(request):
                 'email': email,
             }
         )
-
+        user.clear_lost_passwords()
         return HttpResponseRedirect(request.path)
 
     if 'primary' in request.POST:
@@ -545,6 +547,7 @@ def show_emails(request):
             if has_new_username and not User.objects.filter(username__iexact=new_primary).exists():
                 user.username = user.email
             user.save()
+        user.clear_lost_passwords()
         return HttpResponseRedirect(request.path)
 
     if email_form.is_valid():
@@ -582,6 +585,8 @@ def show_emails(request):
                 msg = _('A confirmation email has been sent to %s.') % new_email.email
                 messages.add_message(request, messages.SUCCESS, msg)
 
+        user.clear_lost_passwords()
+
         messages.add_message(request, messages.SUCCESS, _('Your settings were saved.'))
         return HttpResponseRedirect(request.path)
 
diff --git a/src/sentry/web/frontend/accounts_twofactor.py b/src/sentry/web/frontend/accounts_twofactor.py
index e950a2a3ba..3c8bdd9bf3 100644
--- a/src/sentry/web/frontend/accounts_twofactor.py
+++ b/src/sentry/web/frontend/accounts_twofactor.py
@@ -46,6 +46,7 @@ class TwoFactorSettingsView(BaseView):
             interface = Authenticator.objects.get_interface(request.user, self.interface_id)
         except LookupError:
             raise Http404
+        request.user.clear_lost_passwords()
         return self.configure(request, interface)
 
     def make_context(self, request, interface):
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index 525d984cef..5e2fa434e7 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -271,6 +271,39 @@ class SettingsTest(TestCase):
         assert not user.check_password('foobar')
         assert not user.check_password('foobars')
 
+    def test_password_hash_invalidated_when_email_changes(self):
+        self.login_as(self.user)
+
+        LostPasswordHash.objects.create(user=self.user)
+
+        params = self.params()
+        params['password'] = 'admin'
+        params['email'] = 'bizbaz@example.com'
+
+        resp = self.client.post(self.path, params)
+        assert resp.status_code == 302
+        user = User.objects.get(id=self.user.id)
+        assert user.email == 'bizbaz@example.com'
+        assert not LostPasswordHash.objects.filter(user=self.user).exists()
+
+    def test_password_hash_invalidated_when_password_changes(self):
+        old_nonce = self.user.session_nonce
+        self.login_as(self.user)
+
+        LostPasswordHash.objects.create(user=self.user)
+
+        params = self.params()
+        params['password'] = 'admin'
+        params['new_password'] = 'foobar'
+        params['verify_new_password'] = 'foobar'
+
+        resp = self.client.post(self.path, params)
+        assert resp.status_code == 302
+        user = User.objects.get(id=self.user.id)
+        assert user.check_password('foobar')
+        assert user.session_nonce != old_nonce
+        assert not LostPasswordHash.objects.filter(user=self.user).exists()
+
 
 class ListIdentitiesTest(TestCase):
     @fixture
@@ -332,6 +365,18 @@ class RecoverPasswordTest(TestCase):
         assert 'email' in resp.context
         send_recover_mail.call_count == 1
 
+    @mock.patch('sentry.models.LostPasswordHash.send_email')
+    def test_lost_password_hash_invalid_after_successful_login(self, send_recover_mail):
+        resp = self.client.post(self.path, {
+            'user': self.user.username
+        })
+        assert resp.status_code == 200
+        send_recover_mail.call_count == 1
+
+        assert LostPasswordHash.objects.get(user=self.user).is_valid()
+        self.login_as(self.user)
+        assert not LostPasswordHash.objects.filter(user=self.user).exists()
+
 
 class RecoverPasswordConfirmTest(TestCase):
     def setUp(self):
@@ -366,6 +411,7 @@ class RecoverPasswordConfirmTest(TestCase):
         user = User.objects.get(id=self.user.id)
         assert user.check_password('bar')
         assert user.session_nonce != old_nonce
+        assert not LostPasswordHash.objects.filter(user=user).exists()
 
 
 class ConfirmEmailSendTest(TestCase):
@@ -416,6 +462,7 @@ class ConfirmEmailTest(TestCase):
         self.assertRedirects(resp, reverse('sentry-account-settings-emails'), status_code=302)
         email = self.user.emails.first()
         assert email.is_verified
+        assert not email.hash_is_valid()
 
 
 class DisconnectIdentityTest(TestCase):
diff --git a/tests/sentry/web/frontend/test_2fa.py b/tests/sentry/web/frontend/test_2fa.py
index 0f39d90bd3..a0de30ef1f 100644
--- a/tests/sentry/web/frontend/test_2fa.py
+++ b/tests/sentry/web/frontend/test_2fa.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 
 from sentry.testutils import TestCase
-from sentry.models import TotpInterface
+from sentry.models import TotpInterface, LostPasswordHash
 
 
 class TwoFactorAuthTest(TestCase):
@@ -110,3 +110,58 @@ class TwoFactorAuthTest(TestCase):
         self.assertTemplateUsed('sentry/account/twofactor/remove.html')
         self.assertContains(resp, 'Do you want to remove the method?')
         self.assertContains(resp, 'Sentry account password')
+
+    def test_add_2fa_password_deletes_lost_password(self):
+        user = self.create_user('foo@example.com')
+        path = reverse('sentry-account-settings-2fa-totp')
+        self.login_as(user)
+        LostPasswordHash.objects.create(user=user)
+        resp = self.client.post(path, data={'enroll': ''})
+        self.assertContains(resp, 'Scan the below QR code')
+        self.assertContains(resp, 'Sentry account password')
+        self.assertNotContains(resp, 'Method is currently not enabled')
+        assert not LostPasswordHash.objects.filter(user=user).exists()
+
+    def test_add_2fa_SSO_deletes_lost_passswords(self):
+        user = self.create_user('foo@example.com')
+        user.set_unusable_password()
+        user.save()
+        path = reverse('sentry-account-settings-2fa-totp')
+        self.login_as(user)
+        LostPasswordHash.objects.create(user=user)
+        resp = self.client.post(path, data={'enroll': ''})
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/account/twofactor/enroll_totp.html')
+        assert 'otp_form' in resp.context
+        self.assertContains(resp, 'One-time password')
+        self.assertContains(resp, 'Authenticator App')
+        self.assertNotContains(resp, 'Sentry account password')
+        assert not LostPasswordHash.objects.filter(user=user).exists()
+
+    def test_remove_2fa_SSO_deletes_lost_passswords(self):
+        user = self.create_user('foo@example.com')
+        user.set_unusable_password()
+        user.save()
+        TotpInterface().enroll(user)
+        path = reverse('sentry-account-settings-2fa-totp')
+        self.login_as(user)
+        LostPasswordHash.objects.create(user=user)
+        resp = self.client.post(path, data={'remove': ''})
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/account/twofactor/remove.html')
+        self.assertContains(resp, 'Do you want to remove the method?')
+        self.assertNotContains(resp, 'Sentry account password')
+        assert not LostPasswordHash.objects.filter(user=user).exists()
+
+    def test_remove_2fa_password_deletes_lost_passswords(self):
+        user = self.create_user('foo@example.com')
+        TotpInterface().enroll(user)
+        path = reverse('sentry-account-settings-2fa-totp')
+        self.login_as(user)
+        LostPasswordHash.objects.create(user=user)
+        resp = self.client.post(path, data={'remove': ''})
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/account/twofactor/remove.html')
+        self.assertContains(resp, 'Do you want to remove the method?')
+        self.assertContains(resp, 'Sentry account password')
+        assert not LostPasswordHash.objects.filter(user=user).exists()
