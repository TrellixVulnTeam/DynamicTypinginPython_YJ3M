commit 498da8f78615f91ebbfd104438b8196461fca8ef
Author: ted kaemming <t.kaemming+github@gmail.com>
Date:   Wed Sep 21 14:13:37 2016 -0700

    Correctly handle actorless activities when identifying notification recipients. (#4192)

diff --git a/src/sentry/plugins/sentry_mail/activity/base.py b/src/sentry/plugins/sentry_mail/activity/base.py
index 1beaf1f69c..77fd3bb04c 100644
--- a/src/sentry/plugins/sentry_mail/activity/base.py
+++ b/src/sentry/plugins/sentry_mail/activity/base.py
@@ -43,15 +43,16 @@ class ActivityEmail(object):
             )
         )
 
-        receive_own_activity = UserOption.objects.get_value(
-            user=self.activity.user,
-            project=None,
-            key='self_notifications',
-            default='0'
-        ) == '1'
-
-        if not receive_own_activity:
-            participants.discard(self.activity.user)
+        if self.activity.user is not None:
+            receive_own_activity = UserOption.objects.get_value(
+                user=self.activity.user,
+                project=None,
+                key='self_notifications',
+                default='0'
+            ) == '1'
+
+            if not receive_own_activity:
+                participants.discard(self.activity.user)
 
         return participants
 
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 4672b4e092..12aaec07c2 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -348,19 +348,23 @@ class MailPluginTest(TestCase):
 
 
 class ActivityEmailTestCase(TransactionTestCase):
-    def test_get_participants(self):
+    def get_fixture_data(self, users):
         organization = self.create_organization(owner=self.create_user())
         team = self.create_team(organization=organization)
         project = self.create_project(organization=organization, team=team)
         group = self.create_group(project=project)
 
-        actor = self.create_user()
-        other = self.create_user()
+        users = [self.create_user() for _ in range(users)]
 
-        for user in (actor, other):
+        for user in users:
             self.create_member([team], user=user, organization=organization)
             GroupSubscription.objects.subscribe(group, user)
 
+        return group, users
+
+    def test_get_participants(self):
+        group, (actor, other) = self.get_fixture_data(2)
+
         email = ActivityEmail(
             Activity(
                 project=group.project,
@@ -379,3 +383,15 @@ class ActivityEmailTestCase(TransactionTestCase):
         )
 
         assert email.get_participants() == set([actor, other])
+
+    def test_get_participants_without_actor(self):
+        group, (user,) = self.get_fixture_data(1)
+
+        email = ActivityEmail(
+            Activity(
+                project=group.project,
+                group=group,
+            )
+        )
+
+        assert email.get_participants() == set([user])
