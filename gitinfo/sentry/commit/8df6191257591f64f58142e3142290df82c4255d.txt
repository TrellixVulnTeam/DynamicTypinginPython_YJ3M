commit 8df6191257591f64f58142e3142290df82c4255d
Author: David Cramer <dcramer@gmail.com>
Date:   Sat May 30 13:03:33 2015 +0200

    Unify GroupStore API

diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index b4e5de6877..89b33826d5 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -23,7 +23,7 @@ var AssigneeSelector = React.createClass({
   },
 
   getInitialState() {
-    var group = GroupStore.getItem(this.props.id);
+    var group = GroupStore.get(this.props.id);
 
     return {
       assignedTo: group.assignedTo,
@@ -36,7 +36,7 @@ var AssigneeSelector = React.createClass({
   componentWillReceiveProps(nextProps) {
     var loading = GroupStore.hasStatus(nextProps.id, 'assignTo');
     if (nextProps.id != this.props.id || loading != this.state.loading) {
-      var group = GroupStore.getItem(this.props.id);
+      var group = GroupStore.get(this.props.id);
       this.setState({
         assignedTo: group.assignedTo,
         memberList: MemberListStore.getAll(),
@@ -60,7 +60,7 @@ var AssigneeSelector = React.createClass({
     if (!itemIds.has(this.props.id)) {
       return;
     }
-    var group = GroupStore.getItem(this.props.id);
+    var group = GroupStore.get(this.props.id);
     this.setState({
       assignedTo: group.assignedTo,
       loading: GroupStore.hasStatus(this.props.id, 'assignTo')
diff --git a/src/sentry/static/sentry/app/stores/groupStore.jsx b/src/sentry/static/sentry/app/stores/groupStore.jsx
index 79ab0f8fd9..f126a4f9d2 100644
--- a/src/sentry/static/sentry/app/stores/groupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupStore.jsx
@@ -105,7 +105,7 @@ var GroupStore = Reflux.createStore({
   },
 
   addActivity(id, data) {
-    var group = this.getItem(id);
+    var group = this.get(id);
     if (!group) {
       return;
     }
@@ -113,7 +113,7 @@ var GroupStore = Reflux.createStore({
     this.trigger(new Set([id]));
   },
 
-  getItem(id) {
+  get(id) {
     var pendingForId = [];
     this.pendingChanges.forEach(change => {
       if (change.id === id) {
@@ -176,7 +176,7 @@ var GroupStore = Reflux.createStore({
   },
 
   onAssignToSuccess(changeId, itemId, response) {
-    var item = this.getItem(itemId);
+    var item = this.get(itemId);
     if (!item) {
       return;
     }
diff --git a/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx b/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
index 754de721a8..d19d93c91c 100644
--- a/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
@@ -2,11 +2,11 @@
 
 var Reflux = require("reflux");
 
-var GroupListStore = require("./groupStore");
+var GroupStore = require("./groupStore");
 
 var SelectedGroupStore = Reflux.createStore({
   init() {
-    this.listenTo(GroupListStore, this.onAggListChange);
+    this.listenTo(GroupStore, this.onAggListChange);
 
     this.allSelected = false;
     this.anySelected = false;
@@ -16,7 +16,7 @@ var SelectedGroupStore = Reflux.createStore({
   },
 
   onAggListChange() {
-    var existingIds = new Set(GroupListStore.getAllItemIds());
+    var existingIds = new Set(GroupStore.getAllItemIds());
     // prune ids that no longer exist
     this.selected.forEach((itemId) => {
       if (!existingIds.has(itemId)) {
@@ -35,7 +35,7 @@ var SelectedGroupStore = Reflux.createStore({
 
   getSelectedIds() {
     if (this.allSelected) {
-      return new Set(GroupListStore.getAllItemIds());
+      return new Set(GroupStore.getAllItemIds());
     }
     return this.selected;
   },
@@ -63,7 +63,7 @@ var SelectedGroupStore = Reflux.createStore({
 
   toggleSelectAll() {
     this.allSelected = !this.allSelected;
-    GroupListStore.getAllItemIds().forEach((itemId) => {
+    GroupStore.getAllItemIds().forEach((itemId) => {
       if (this.allSelected) {
         this.selected.add(itemId);
       } else {
diff --git a/src/sentry/static/sentry/app/utils/streamManager.jsx b/src/sentry/static/sentry/app/utils/streamManager.jsx
index b38a778f66..ea15bd8c37 100644
--- a/src/sentry/static/sentry/app/utils/streamManager.jsx
+++ b/src/sentry/static/sentry/app/utils/streamManager.jsx
@@ -1,7 +1,7 @@
 /*** @jsx React.DOM */
 
 class StreamManager {
-  // TODO(dcramer): this should listen to changes on GroupListStore and remove
+  // TODO(dcramer): this should listen to changes on GroupStore and remove
   // items that are removed there
   constructor(store, options) {
     if (typeof options === "undefined") {
diff --git a/src/sentry/static/sentry/app/views/groupDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails.jsx
index 9a3aca59d5..a616e7bf5b 100644
--- a/src/sentry/static/sentry/app/views/groupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails.jsx
@@ -6,7 +6,7 @@ var Router = require("react-router");
 
 var api = require("../api");
 var GroupHeader = require("./groupDetails/header");
-var GroupListStore = require("../stores/groupStore");
+var GroupStore = require("../stores/groupStore");
 var BreadcrumbMixin = require("../mixins/breadcrumbMixin");
 var PropTypes = require("../proptypes");
 var utils = require("../utils");
@@ -18,7 +18,7 @@ var GroupDetails = React.createClass({
 
   mixins: [
     BreadcrumbMixin,
-    Reflux.listenTo(GroupListStore, "onGroupChange")
+    Reflux.listenTo(GroupStore, "onGroupChange")
   ],
 
   propTypes: {
@@ -49,7 +49,7 @@ var GroupDetails = React.createClass({
 
     api.request(this.getGroupDetailsEndpoint(), {
       success: (data) => {
-        GroupListStore.loadInitialData([data]);
+        GroupStore.loadInitialData([data]);
 
         this.setBreadcrumbs([
           {name: data.title, to: 'groupDetails'}
@@ -62,7 +62,7 @@ var GroupDetails = React.createClass({
     var id = this.context.router.getCurrentParams().groupId;
     if (itemIds.has(id)) {
       this.setState({
-        group: GroupListStore.getItem(id)
+        group: GroupStore.get(id)
       });
     }
   },
diff --git a/src/sentry/static/sentry/app/views/projectReleases.jsx b/src/sentry/static/sentry/app/views/projectReleases.jsx
index 4be938f90a..ce749b97f2 100644
--- a/src/sentry/static/sentry/app/views/projectReleases.jsx
+++ b/src/sentry/static/sentry/app/views/projectReleases.jsx
@@ -5,7 +5,7 @@ var $ = require("jquery");
 
 var api = require("../api");
 var GroupActions = require("../actions/groupActions");
-var GroupListStore = require("../stores/groupStore");
+var GroupStore = require("../stores/groupStore");
 var LoadingError = require("../components/loadingError");
 var LoadingIndicator = require("../components/loadingIndicator");
 var Pagination = require("../components/pagination");
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index 10a7237c90..97bfe96d86 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -5,7 +5,7 @@ var Reflux = require("reflux");
 var utils = require("../../utils");
 
 var api = require("../../api");
-var GroupListStore = require("../../stores/groupStore");
+var GroupStore = require("../../stores/groupStore");
 var DateTimeField = require("../../modules/datepicker/DateTimeField");
 var DropdownLink = require("../../components/dropdownLink");
 var IndicatorStore = require("../../stores/indicatorStore");
diff --git a/src/sentry/static/sentry/app/views/stream/group.jsx b/src/sentry/static/sentry/app/views/stream/group.jsx
index 691d2ce578..6f0ebfaab1 100644
--- a/src/sentry/static/sentry/app/views/stream/group.jsx
+++ b/src/sentry/static/sentry/app/views/stream/group.jsx
@@ -78,14 +78,14 @@ var StreamGroup = React.createClass({
 
   getInitialState() {
     return {
-      data: GroupStore.getItem(this.props.id)
+      data: GroupStore.get(this.props.id)
     };
   },
 
   componentWillReceiveProps(nextProps) {
     if (nextProps.id != this.props.id) {
       this.setState({
-        data: GroupStore.getItem(this.props.id)
+        data: GroupStore.get(this.props.id)
       });
     }
   },
@@ -105,7 +105,7 @@ var StreamGroup = React.createClass({
       return;
     }
     var id = this.props.id;
-    var data = GroupStore.getItem(id);
+    var data = GroupStore.get(id);
     this.setState({
       data: data,
     });
