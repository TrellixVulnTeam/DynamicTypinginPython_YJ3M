commit b8f5d72049d20df30e5122244ee7d2ab4f6a6989
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Apr 8 11:31:38 2020 -0700

    perf(ui): Move "Dashboards" to lightweight routes tree (#18140)
    
    This moves "Dashboards" to lightweight routes tree. This required some refactoring as a discover utility function depended on `organization.projects`. Wrap `DiscoverQuery` component with `withProjects` and show placeholder until projects is loaded.

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index a6cac6fc93..6a790621f6 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1055,6 +1055,23 @@ function routes() {
           component={errorHandler(LazyLoad)}
         />
 
+        <Route
+          path="/organizations/:orgId/dashboards/"
+          componentPromise={() =>
+            import(/* webpackChunkName: "DashboardsContainer" */ 'app/views/dashboards')
+          }
+          component={errorHandler(LazyLoad)}
+        >
+          <IndexRoute
+            componentPromise={() =>
+              import(
+                /* webpackChunkName: "OverviewDashboard" */ 'app/views/dashboards/overviewDashboard'
+              )
+            }
+            component={errorHandler(LazyLoad)}
+          />
+        </Route>
+
         <Route
           path="/organizations/:orgId/user-feedback/"
           componentPromise={() =>
@@ -1461,22 +1478,6 @@ function routes() {
             }
             component={errorHandler(LazyLoad)}
           />
-          <Route
-            path="/organizations/:orgId/dashboards/"
-            componentPromise={() =>
-              import(/* webpackChunkName: "DashboardsContainer" */ 'app/views/dashboards')
-            }
-            component={errorHandler(LazyLoad)}
-          >
-            <IndexRoute
-              componentPromise={() =>
-                import(
-                  /* webpackChunkName: "OverviewDashboard" */ 'app/views/dashboards/overviewDashboard'
-                )
-              }
-              component={errorHandler(LazyLoad)}
-            />
-          </Route>
           <Route
             path="/organizations/:orgId/discover/"
             componentPromise={() =>
diff --git a/src/sentry/static/sentry/app/views/dashboards/discoverQuery.jsx b/src/sentry/static/sentry/app/views/dashboards/discoverQuery.jsx
index efde77e5be..dd60c11560 100644
--- a/src/sentry/static/sentry/app/views/dashboards/discoverQuery.jsx
+++ b/src/sentry/static/sentry/app/views/dashboards/discoverQuery.jsx
@@ -1,8 +1,8 @@
+import PropTypes from 'prop-types';
+import React from 'react';
 import isEqual from 'lodash/isEqual';
 import memoize from 'lodash/memoize';
 import omit from 'lodash/omit';
-import PropTypes from 'prop-types';
-import React from 'react';
 
 import {DEFAULT_STATS_PERIOD} from 'app/constants';
 import {getInterval} from 'app/components/charts/utils';
@@ -10,6 +10,7 @@ import {getPeriod} from 'app/utils/getPeriod';
 import {parsePeriodToHours} from 'app/utils/dates';
 import SentryTypes from 'app/sentryTypes';
 import createQueryBuilder from 'app/views/discover/queryBuilder';
+import withProjects from 'app/utils/withProjects';
 
 // Note: Limit max releases so that chart is still a bit readable
 const MAX_RECENT_RELEASES = 20;
@@ -44,17 +45,10 @@ class DiscoverQuery extends React.Component {
     releases: PropTypes.arrayOf(SentryTypes.Release),
   };
 
-  constructor(props) {
-    super(props);
-
-    this.state = {
-      results: null,
-      reloading: null,
-    };
-
-    // Query builders based on `queries`
-    this.queryBuilders = [];
-  }
+  state = {
+    results: null,
+    reloading: null,
+  };
 
   componentDidMount() {
     this.createQueryBuilders();
@@ -116,6 +110,9 @@ class DiscoverQuery extends React.Component {
     this.queryBuilders = [];
   }
 
+  // Query builders based on `queries`
+  queryBuilders = [];
+
   // Checks queries for any that are dependent on recent releases
   doesRequireReleases = memoize(
     queries =>
@@ -125,7 +122,7 @@ class DiscoverQuery extends React.Component {
   );
 
   createQueryBuilders() {
-    const {organization, queries} = this.props;
+    const {organization, projects, queries} = this.props;
 
     this.queryBuilders = [];
 
@@ -144,11 +141,13 @@ class DiscoverQuery extends React.Component {
             createReleaseFieldCondition(this.props.releases.map(({version}) => version)),
         };
         this.queryBuilders.push(
-          createQueryBuilder(this.getQuery(newQuery), organization)
+          createQueryBuilder(this.getQuery(newQuery), organization, projects)
         );
         this.fetchData();
       } else {
-        this.queryBuilders.push(createQueryBuilder(this.getQuery(query), organization));
+        this.queryBuilders.push(
+          createQueryBuilder(this.getQuery(query), organization, projects)
+        );
       }
     });
   }
@@ -221,4 +220,21 @@ class DiscoverQuery extends React.Component {
   }
 }
 
-export default DiscoverQuery;
+function DiscoverQueryContainer({loadingProjects, children, ...props}) {
+  if (loadingProjects) {
+    return children({
+      queries: [],
+      results: null,
+      reloading: null,
+    });
+  }
+  return <DiscoverQuery {...props}>{children}</DiscoverQuery>;
+}
+
+DiscoverQueryContainer.propTypes = {
+  ...DiscoverQuery.propTypes,
+  loadingProjects: PropTypes.bool,
+  projects: PropTypes.arrayOf(SentryTypes.Project),
+};
+
+export default withProjects(DiscoverQueryContainer);
diff --git a/src/sentry/static/sentry/app/views/dashboards/index.jsx b/src/sentry/static/sentry/app/views/dashboards/index.jsx
index 0a0f95679a..b3ce6eb70f 100644
--- a/src/sentry/static/sentry/app/views/dashboards/index.jsx
+++ b/src/sentry/static/sentry/app/views/dashboards/index.jsx
@@ -4,7 +4,7 @@ import {PageContent, PageHeader} from 'app/styles/organization';
 import {t} from 'app/locale';
 import Feature from 'app/components/acl/feature';
 import PageHeading from 'app/components/pageHeading';
-import NoProjectMessage from 'app/components/noProjectMessage';
+import LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import SentryTypes from 'app/sentryTypes';
 import withOrganization from 'app/utils/withOrganization';
@@ -22,13 +22,13 @@ class Dashboards extends React.Component {
         <GlobalSelectionHeader organization={organization} />
 
         <PageContent>
-          <NoProjectMessage organization={organization}>
+          <LightWeightNoProjectMessage organization={organization}>
             <PageHeader>
               <PageHeading withMargins>{t('Dashboards')}</PageHeading>
             </PageHeader>
 
             {children}
-          </NoProjectMessage>
+          </LightWeightNoProjectMessage>
         </PageContent>
       </Feature>
     );
diff --git a/src/sentry/static/sentry/app/views/discover/queryBuilder.tsx b/src/sentry/static/sentry/app/views/discover/queryBuilder.tsx
index b07b9ee681..6507f09d13 100644
--- a/src/sentry/static/sentry/app/views/discover/queryBuilder.tsx
+++ b/src/sentry/static/sentry/app/views/discover/queryBuilder.tsx
@@ -56,7 +56,8 @@ export interface QueryBuilder {
  */
 export default function createQueryBuilder(
   initial = {},
-  organization: Organization
+  organization: Organization,
+  specificProjects?: Project[]
 ): QueryBuilder {
   const api = new Client();
   let query = applyDefaults(initial);
@@ -65,7 +66,10 @@ export default function createQueryBuilder(
     query.range = DEFAULT_STATS_PERIOD;
   }
 
-  const defaultProjects = organization.projects.filter(projects => projects.isMember);
+  // TODO(lightweight-org): This needs to be refactored so that queries
+  // do not depend on organization.projects
+  const projectsToUse = specificProjects ?? organization.projects;
+  const defaultProjects = projectsToUse.filter(projects => projects.isMember);
 
   const defaultProjectIds = getProjectIds(defaultProjects);
 
@@ -73,7 +77,7 @@ export default function createQueryBuilder(
     ConfigStore.get('user').isSuperuser || organization.access.includes('org:admin');
 
   const projectsToFetchTags = getProjectIds(
-    hasGlobalProjectAccess ? organization.projects : defaultProjects
+    hasGlobalProjectAccess ? projectsToUse : defaultProjects
   );
 
   const columns = COLUMNS.map(col => ({...col, isTag: false}));
diff --git a/tests/js/spec/views/dashboards/dashboard.spec.jsx b/tests/js/spec/views/dashboards/dashboard.spec.jsx
index 438d817a3c..f026588f3f 100644
--- a/tests/js/spec/views/dashboards/dashboard.spec.jsx
+++ b/tests/js/spec/views/dashboards/dashboard.spec.jsx
@@ -1,10 +1,11 @@
 import React from 'react';
 
-import {mountWithTheme} from 'sentry-test/enzyme';
 import {initializeOrg} from 'sentry-test/initializeOrg';
 import {mockRouterPush} from 'sentry-test/mockRouterPush';
+import {mountWithTheme} from 'sentry-test/enzyme';
 import Dashboard from 'app/views/dashboards/dashboard';
 import OrganizationDashboardContainer from 'app/views/dashboards';
+import ProjectsStore from 'app/stores/projectsStore';
 
 jest.mock('app/utils/withLatestContext');
 
@@ -12,7 +13,7 @@ describe('OrganizationDashboard', function() {
   let wrapper;
   let discoverMock;
 
-  const {organization, router, routerContext} = initializeOrg({
+  const {organization, projects, router, routerContext} = initializeOrg({
     projects: [{isMember: true}, {isMember: true, slug: 'new-project', id: 3}],
     organization: {
       features: ['discover', 'global-views'],
@@ -37,7 +38,10 @@ describe('OrganizationDashboard', function() {
     mockRouterPush(wrapper, router);
   };
 
-  beforeEach(function() {
+  beforeEach(async function() {
+    ProjectsStore.loadInitialData(projects);
+    await tick();
+
     MockApiClient.addMockResponse({
       url: `/organizations/${org.slug}/environments/`,
       body: TestStubs.Environments(),
@@ -75,7 +79,7 @@ describe('OrganizationDashboard', function() {
       expect.objectContaining({
         data: expect.objectContaining({
           environments: [],
-          projects: [2, 3],
+          projects: expect.arrayContaining([2, 3]),
           range: '14d',
 
           fields: [],
@@ -93,7 +97,7 @@ describe('OrganizationDashboard', function() {
       expect.objectContaining({
         data: expect.objectContaining({
           environments: [],
-          projects: [2, 3],
+          projects: expect.arrayContaining([2, 3]),
           range: '14d',
 
           fields: [],
@@ -146,7 +150,7 @@ describe('OrganizationDashboard', function() {
       expect.objectContaining({
         data: expect.objectContaining({
           environments: [],
-          projects: [2, 3],
+          projects: expect.arrayContaining([2, 3]),
           range: '14d',
 
           fields: ['browser.name'],
diff --git a/tests/js/spec/views/dashboards/discoverQuery.spec.jsx b/tests/js/spec/views/dashboards/discoverQuery.spec.jsx
index 6c5aeb5eaf..93a17994ad 100644
--- a/tests/js/spec/views/dashboards/discoverQuery.spec.jsx
+++ b/tests/js/spec/views/dashboards/discoverQuery.spec.jsx
@@ -4,6 +4,7 @@ import {mount} from 'sentry-test/enzyme';
 import {initializeOrg} from 'sentry-test/initializeOrg';
 import {mockRouterPush} from 'sentry-test/mockRouterPush';
 import DiscoverQuery from 'app/views/dashboards/discoverQuery';
+import ProjectsStore from 'app/stores/projectsStore';
 
 describe('DiscoverQuery', function() {
   const {organization, router, routerContext} = initializeOrg({
@@ -23,7 +24,10 @@ describe('DiscoverQuery', function() {
   let discoverMock;
   const renderMock = jest.fn(() => null);
 
-  beforeEach(function() {
+  beforeEach(async function() {
+    ProjectsStore.loadInitialData([TestStubs.Project()]);
+    await tick();
+
     renderMock.mockClear();
     router.push.mockRestore();
     MockApiClient.clearMockResponses();
diff --git a/tests/js/spec/views/dashboards/overviewDashboard.spec.jsx b/tests/js/spec/views/dashboards/overviewDashboard.spec.jsx
index 2d504d347b..fdeedaa8c3 100644
--- a/tests/js/spec/views/dashboards/overviewDashboard.spec.jsx
+++ b/tests/js/spec/views/dashboards/overviewDashboard.spec.jsx
@@ -5,6 +5,7 @@ import {mockRouterPush} from 'sentry-test/mockRouterPush';
 import {mountWithTheme} from 'sentry-test/enzyme';
 import DashboardsContainer from 'app/views/dashboards';
 import OverviewDashboard from 'app/views/dashboards/overviewDashboard';
+import ProjectsStore from 'app/stores/projectsStore';
 
 jest.mock('app/utils/withLatestContext');
 
@@ -13,7 +14,7 @@ describe('OverviewDashboard', function() {
   let discoverMock;
   let releasesMock;
 
-  const {organization, router, routerContext} = initializeOrg({
+  const {organization, projects, router, routerContext} = initializeOrg({
     projects: [{isMember: true}, {isMember: true, slug: 'new-project', id: 3}],
     organization: {
       features: ['discover', 'global-views'],
@@ -39,6 +40,7 @@ describe('OverviewDashboard', function() {
   };
 
   beforeEach(function() {
+    ProjectsStore.loadInitialData(projects);
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/projects/',
       body: [],
@@ -107,7 +109,7 @@ describe('OverviewDashboard', function() {
       expect.objectContaining({
         data: expect.objectContaining({
           environments: [],
-          projects: [2, 3],
+          projects: expect.arrayContaining([2, 3]),
           range: '14d',
 
           fields: [],
@@ -127,7 +129,7 @@ describe('OverviewDashboard', function() {
       expect.objectContaining({
         data: expect.objectContaining({
           environments: [],
-          projects: [2, 3],
+          projects: expect.arrayContaining([2, 3]),
           range: '14d',
 
           fields: [],
@@ -147,7 +149,7 @@ describe('OverviewDashboard', function() {
       expect.objectContaining({
         data: expect.objectContaining({
           environments: [],
-          projects: [2, 3],
+          projects: expect.arrayContaining([2, 3]),
           range: '14d',
 
           fields: [],
@@ -205,7 +207,7 @@ describe('OverviewDashboard', function() {
       expect.objectContaining({
         data: expect.objectContaining({
           environments: [],
-          projects: [2, 3],
+          projects: expect.arrayContaining([2, 3]),
           range: '7d',
 
           fields: [],
