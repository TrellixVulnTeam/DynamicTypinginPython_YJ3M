commit 01e8d07813c4680368b8e1dd8a57b4bbf2d0ff09
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Dec 28 01:16:45 2013 -0800

    Allow setting of various variable caps (fixes GH-1086)

diff --git a/docs/developer/client/index.rst b/docs/developer/client/index.rst
index 69938926df..e59dd7be53 100644
--- a/docs/developer/client/index.rst
+++ b/docs/developer/client/index.rst
@@ -588,7 +588,7 @@ as things like extra data, or tags.
 - Tag values are limited to 200 characters.
 - Culprits are limited to 200 characters.
 - Most contextual variables are limited to 512 characters.
-- Extra contextual data is limited to 2048 characters.
-- Messages are limited to 1024 * 10 characters.
+- Extra contextual data is limited to 4096 characters.
+- Messages are limited to ~10kb.
 - Http data (the body) is limited to 2048 characters.
 - Stacktrace's are limited to 50 frames. If more are sent, data will be removed from the middle of the stack.
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 4e78049f3e..840f69bf59 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -555,6 +555,22 @@ SENTRY_PUBLIC_ENDPOINT = None
 SENTRY_ENABLE_EXPLORE_CODE = False
 SENTRY_ENABLE_EXPLORE_USERS = True
 
+# Prevent variables (e.g. context locals, http data, etc) from exceeding this
+# size in characters
+SENTRY_MAX_VARIABLE_SIZE = 512
+
+# Prevent varabiesl within extra context from exceeding this size in
+# characters
+SENTRY_MAX_EXTRA_VARIABLE_SIZE = 4096
+
+# For various attributes we dont limit the entire attribute on size, but the
+# individual item. In those cases we also want to limit the maximum number of
+# keys
+SENTRY_MAX_DICTIONARY_ITEMS = 50
+
+SENTRY_MAX_MESSAGE_LENGTH = 1024 * 10
+SENTRY_MAX_STACKTRACE_FRAMES = 50
+
 # Configure celery
 import djcelery
 djcelery.setup_loader()
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index aae59d1db3..0f844012bc 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -169,24 +169,9 @@ PLATFORM_TITLES = {
 # accuracy provided.
 MINUTE_NORMALIZATION = 15
 
-# Prevent variables (e.g. context locals, http data, etc) from exceeding this
-# size in characters
-MAX_VARIABLE_SIZE = 512
-
-# Prevent varabiesl within extra context from exceeding this size in
-# characters
-MAX_EXTRA_VARIABLE_SIZE = 2048
-
-# For various attributes we dont limit the entire attribute on size, but the
-# individual item. In those cases we also want to limit the maximum number of
-# keys
-MAX_DICTIONARY_ITEMS = 50
-
 MAX_TAG_KEY_LENGTH = 32
 MAX_TAG_VALUE_LENGTH = 200
-MAX_CULPRIT_LENGTH = 200
-MAX_MESSAGE_LENGTH = 1024 * 10
-MAX_STACKTRACE_FRAMES = 50
+MAX_CULPRIT_LENGTH = 2004
 
 # Team slugs which may not be used. Generally these are top level URL patterns
 # which we don't want to worry about conflicts on.
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 17823eb932..6dd2b53d48 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -20,8 +20,8 @@ from django.utils.encoding import smart_str
 
 from sentry.app import env
 from sentry.constants import (
-    DEFAULT_LOG_LEVEL, LOG_LEVELS, MAX_MESSAGE_LENGTH, MAX_CULPRIT_LENGTH,
-    MAX_TAG_VALUE_LENGTH, MAX_TAG_KEY_LENGTH)
+    DEFAULT_LOG_LEVEL, LOG_LEVELS, MAX_CULPRIT_LENGTH, MAX_TAG_VALUE_LENGTH,
+    MAX_TAG_KEY_LENGTH)
 from sentry.exceptions import InvalidTimestamp
 from sentry.models import Project, ProjectKey
 from sentry.tasks.store import preprocess_event
@@ -238,11 +238,12 @@ def validate_data(project, data, client=None):
         data['message'] = '<no message value>'
     elif not isinstance(data['message'], basestring):
         raise APIError('Invalid value for message')
-    elif len(data['message']) > MAX_MESSAGE_LENGTH:
+    elif len(data['message']) > settings.SENTRY_MAX_MESSAGE_LENGTH:
         logger.info(
             'Truncated value for message due to length (%d chars)',
             len(data['message']), **client_metadata(client, project))
-        data['message'] = truncatechars(data['message'], MAX_MESSAGE_LENGTH)
+        data['message'] = truncatechars(
+            data['message'], settings.SENTRY_MAX_MESSAGE_LENGTH)
 
     if data.get('culprit') and len(data['culprit']) > MAX_CULPRIT_LENGTH:
         logger.info(
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 1d566e9554..4fb9ca762f 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -28,8 +28,7 @@ from raven.utils.encoding import to_string
 from sentry import app
 from sentry.constants import (
     STATUS_RESOLVED, STATUS_UNRESOLVED, MINUTE_NORMALIZATION,
-    MAX_EXTRA_VARIABLE_SIZE, LOG_LEVELS, DEFAULT_LOGGER_NAME,
-    MAX_CULPRIT_LENGTH)
+    LOG_LEVELS, DEFAULT_LOGGER_NAME, MAX_CULPRIT_LENGTH)
 from sentry.db.models import BaseManager
 from sentry.processors.base import send_group_processors
 from sentry.signals import regression_signal
@@ -264,7 +263,8 @@ class GroupManager(BaseManager, ChartMixin):
             # throw it away
             data['extra'] = {}
 
-        trim_dict(data['extra'], max_size=MAX_EXTRA_VARIABLE_SIZE)
+        trim_dict(
+            data['extra'], max_size=settings.SENTRY_MAX_EXTRA_VARIABLE_SIZE)
 
         if 'sentry.interfaces.Exception' in data:
             if 'values' not in data['sentry.interfaces.Exception']:
diff --git a/src/sentry/utils/safe.py b/src/sentry/utils/safe.py
index af1b9ea87c..0f170c1b09 100644
--- a/src/sentry/utils/safe.py
+++ b/src/sentry/utils/safe.py
@@ -8,11 +8,9 @@ sentry.utils.safe
 
 import logging
 
+from django.conf import settings
 from django.db import transaction
 
-from sentry.constants import (
-    MAX_VARIABLE_SIZE, MAX_DICTIONARY_ITEMS, MAX_STACKTRACE_FRAMES
-)
 from sentry.utils.strings import truncatechars
 
 
@@ -35,7 +33,8 @@ def safe_execute(func, *args, **kwargs):
         return result
 
 
-def trim(value, max_size=MAX_VARIABLE_SIZE, max_depth=3, _depth=0, _size=0, **kwargs):
+def trim(value, max_size=settings.SENTRY_MAX_VARIABLE_SIZE, max_depth=3,
+         _depth=0, _size=0, **kwargs):
     """
     Truncates a value to ```MAX_VARIABLE_SIZE```.
 
@@ -79,7 +78,7 @@ def trim(value, max_size=MAX_VARIABLE_SIZE, max_depth=3, _depth=0, _size=0, **kw
     return result
 
 
-def trim_dict(value, max_items=MAX_DICTIONARY_ITEMS, **kwargs):
+def trim_dict(value, max_items=settings.SENTRY_MAX_DICTIONARY_ITEMS, **kwargs):
     max_items -= 1
     for idx, key in enumerate(value.keys()):
         value[key] = trim(value[key], **kwargs)
@@ -87,7 +86,7 @@ def trim_dict(value, max_items=MAX_DICTIONARY_ITEMS, **kwargs):
             del value[key]
 
 
-def trim_frames(stacktrace, max_frames=MAX_STACKTRACE_FRAMES):
+def trim_frames(stacktrace, max_frames=settings.SENTRY_MAX_STACKTRACE_FRAMES):
     # TODO: this doesnt account for cases where the client has already omitted
     # frames
     frames = stacktrace['frames']
