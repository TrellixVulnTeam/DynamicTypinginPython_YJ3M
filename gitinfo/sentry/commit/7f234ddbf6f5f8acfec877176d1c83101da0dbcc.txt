commit 7f234ddbf6f5f8acfec877176d1c83101da0dbcc
Author: Mark Story <mark@sentry.io>
Date:   Fri May 24 09:35:17 2019 -0400

    feat(events-v2) Require global-views to query more than one project (#13365)
    
    While we already do this in the frontend (via global selection header)
    we should also enfore these constraints at the API level.
    
    Fixes SEN-646

diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index 3d21b86736..260db6c4b8 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -79,19 +79,29 @@ class OrganizationEventsEndpoint(OrganizationEventsEndpointBase):
             return Response({'detail': exc.message}, status=400)
         except NoProjects:
             return Response([])
-        else:
-            data_fn = partial(
-                lambda *args, **kwargs: transform_aliases_and_query(*args, **kwargs)['data'],
-                referrer='api.organization-events-v2',
-                **snuba_args
-            )
 
-            return self.paginate(
-                request=request,
-                paginator=GenericOffsetPaginator(data_fn=data_fn),
-                on_results=lambda results: self.handle_results(
-                    request, organization, params['project_id'], results),
-            )
+        filters = snuba_args.get('filter_keys', {})
+        has_global_views = features.has(
+            'organizations:global-views',
+            organization,
+            actor=request.user)
+        if not has_global_views and len(filters.get('project_id', [])) > 1:
+            return Response({
+                'detail': 'You cannot view events from multiple projects.'
+            }, status=400)
+
+        data_fn = partial(
+            lambda *args, **kwargs: transform_aliases_and_query(*args, **kwargs)['data'],
+            referrer='api.organization-events-v2',
+            **snuba_args
+        )
+
+        return self.paginate(
+            request=request,
+            paginator=GenericOffsetPaginator(data_fn=data_fn),
+            on_results=lambda results: self.handle_results(
+                request, organization, params['project_id'], results),
+        )
 
     def handle_results(self, request, organization, project_ids, results):
         projects = {p['id']: p['slug'] for p in Project.objects.filter(
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 98d53305df..c6602209bf 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -23,6 +23,7 @@ class OrganizationEventsTestBase(APITestCase, SnubaTestCase):
 
 
 class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
+
     def test_no_projects(self):
         self.login_as(user=self.user)
         with self.feature('organizations:events-v2'):
@@ -31,10 +32,61 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
         assert response.status_code == 200, response.content
         assert len(response.data) == 0
 
+    def test_multi_project_feature_gate_rejection(self):
+        self.login_as(user=self.user)
+        team = self.create_team(organization=self.organization, members=[self.user])
+
+        project = self.create_project(organization=self.organization, teams=[team])
+        project2 = self.create_project(organization=self.organization, teams=[team])
+
+        self.store_event(
+            data={
+                'event_id': 'a' * 32,
+                'timestamp': self.min_ago,
+                'fingerprint': ['group1'],
+            },
+            project_id=project.id
+        )
+        self.store_event(
+            data={
+                'event_id': 'b' * 32,
+                'timestamp': self.min_ago,
+                'fingerprint': ['group2'],
+            },
+            project_id=project2.id
+        )
+
+        query = {
+            'fields': ['id', 'project.id'],
+            'project': [project.id, project2.id],
+        }
+        with self.feature({'organizations:events-v2': True, 'organizations:global-views': False}):
+            response = self.client.get(self.url, query, format='json')
+        assert response.status_code == 400
+        assert 'events from multiple projects' in response.data['detail']
+
+    def test_invalid_search_terms(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        self.store_event(
+            data={
+                'event_id': 'a' * 32,
+                'message': 'how to make fast',
+                'timestamp': self.min_ago,
+            },
+            project_id=project.id
+        )
+
+        with self.feature('organizations:events-v2'):
+            response = self.client.get(self.url, {'query': 'hi \n there'}, format='json')
+
+        assert response.status_code == 400, response.content
+        assert response.data['detail'] == "Parse error: 'search' (column 4). This is commonly caused by unmatched-parentheses."
+
     def test_raw_data(self):
         self.login_as(user=self.user)
         project = self.create_project()
-        project2 = self.create_project()
         self.store_event(
             data={
                 'event_id': 'a' * 32,
@@ -57,7 +109,7 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
                     'email': 'foo@example.com',
                 },
             },
-            project_id=project2.id,
+            project_id=project.id,
         )
 
         with self.feature('organizations:events-v2'):
@@ -73,7 +125,7 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
         assert response.status_code == 200, response.content
         assert len(response.data) == 2
         assert response.data[0]['id'] == 'b' * 32
-        assert response.data[0]['project.id'] == project2.id
+        assert response.data[0]['project.id'] == project.id
         assert response.data[0]['user.email'] == 'foo@example.com'
 
     def test_project_name(self):
