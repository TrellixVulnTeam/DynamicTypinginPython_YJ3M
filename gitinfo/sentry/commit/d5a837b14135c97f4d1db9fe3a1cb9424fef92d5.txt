commit d5a837b14135c97f4d1db9fe3a1cb9424fef92d5
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Nov 10 17:53:01 2012 -0800

    Add draft support for crossdomain.xml

diff --git a/src/sentry/templates/sentry/crossdomain.xml b/src/sentry/templates/sentry/crossdomain.xml
new file mode 100644
index 0000000000..ccbcaea062
--- /dev/null
+++ b/src/sentry/templates/sentry/crossdomain.xml
@@ -0,0 +1,6 @@
+<cross-domain-policy>
+    {% for origin in origin_list %}
+        <allow-access-from domain="{{ origin }}" secure="true"></allow-access-from>
+    {% endfor %}
+    <allow-http-request-headers-from domain="*" headers="X-Sentry-Auth" secure="true"></allow-http-request-headers-from>
+</cross-domain-policy>
diff --git a/src/sentry/utils/http.py b/src/sentry/utils/http.py
index 5832f53dc7..543738f66f 100644
--- a/src/sentry/utils/http.py
+++ b/src/sentry/utils/http.py
@@ -5,7 +5,6 @@ sentry.utils.http
 :copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-import itertools
 import urllib
 from urlparse import urlparse
 
@@ -50,25 +49,31 @@ def is_same_domain(url1, url2):
     return url1.netloc == url2.netloc
 
 
-def is_valid_origin(origin, project=None):
+def get_origins(project=None):
     if settings.ALLOW_ORIGIN == '*':
-        return True
+        return '*'
+    elif settings.ALLOW_ORIGIN:
+        result = settings.ALLOW_ORIGIN.split(' ')
+    else:
+        result = []
 
-    if not origin:
-        return False
+    if project:
+        optval = get_option('sentry:origins', project)
+        if optval:
+            result.extend(map(str.lower, optval))
 
-    origin = origin.lower()
-    if origin in (settings.ALLOW_ORIGIN or '').split(' '):
-        return True
+    return frozenset(filter(bool, result))
 
-    if not project:
-        return False
 
-    optval = get_option('sentry:origins', project)
-    if not optval:
+def is_valid_origin(origin, project=None):
+    allowed = get_origins(project)
+    if allowed == '*':
+        return True
+
+    if not origin:
         return False
 
-    return origin not in itertools.imap(unicode.lower, unicode(optval))
+    return origin in allowed
 
 
 def apply_access_control_headers(response, origin):
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index a59843edd3..6ac92e6fe3 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -28,7 +28,8 @@ from sentry.templatetags.sentry_helpers import with_metadata
 from sentry.utils import json
 from sentry.utils.cache import cache
 from sentry.utils.db import has_trending
-from sentry.utils.http import is_same_domain, is_valid_origin, apply_access_control_headers
+from sentry.utils.http import is_same_domain, is_valid_origin, apply_access_control_headers, \
+  get_origins
 from sentry.web.decorators import has_access
 from sentry.web.frontend.groups import _get_group_list
 from sentry.web.helpers import render_to_response, render_to_string, get_project_list
@@ -490,3 +491,17 @@ def search_tags(request, project):
     response['Content-Type'] = 'application/json'
 
     return response
+
+
+@has_access
+def crossdomain_xml(request, project):
+    origin_list = get_origins(project)
+    if origin_list == '*':
+        origin_list = [origin_list]
+
+    response = render_to_response('sentry/crossdomain.xml', {
+        'origin_list': origin_list
+    }, request)
+    response['Content-Type'] = 'application/xml'
+
+    return response
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index d3cf71b115..529b42a866 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -130,6 +130,7 @@ urlpatterns = patterns('',
 
     url(r'^api/store/$', api.store, name='sentry-api-store'),
     url(r'^api/notification/$', api.notification, name='sentry-api-notification'),
+    url(r'^api/(?P<project_id>[\w_-]+)/crossdomain\.xml$', api.crossdomain_xml, name='sentry-api-crossdomain-xml'),
     url(r'^api/(?P<project_id>[\w_-]+)/store/$', api.store, name='sentry-api-store'),
     url(r'^api/(?P<project_id>[\w_-]+)/poll/$', api.poll, name='sentry-api-poll'),
     url(r'^api/(?P<project_id>[\w_-]+)/resolve/$', api.resolve, name='sentry-api-resolve'),
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index d72de30e63..96d98009fd 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -62,7 +62,7 @@ class IsValidOriginTestCase(TestCase):
         ProjectOption.objects.create(project=project, key='sentry:origins', value=['http://foo.example'])
 
         with self.Settings(SENTRY_ALLOW_ORIGIN=None):
-            self.assertTrue(is_valid_origin('http://example.com', project))
+            self.assertFalse(is_valid_origin('http://example.com', project))
 
     def test_project_and_setting(self):
         from sentry.models import Project, ProjectOption
