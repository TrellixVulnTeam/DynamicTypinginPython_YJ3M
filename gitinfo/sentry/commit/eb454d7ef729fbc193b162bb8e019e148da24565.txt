commit eb454d7ef729fbc193b162bb8e019e148da24565
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Apr 22 14:53:07 2015 -0700

    Adjust team membership flow to be more transparent

diff --git a/src/sentry/api/endpoints/organization_member_team_details.py b/src/sentry/api/endpoints/organization_member_team_details.py
index 779127fc82..d2fda3619b 100644
--- a/src/sentry/api/endpoints/organization_member_team_details.py
+++ b/src/sentry/api/endpoints/organization_member_team_details.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 from rest_framework import serializers
 from rest_framework.response import Response
 
+from sentry.api.serializers import serialize
 from sentry.api.bases.organization import (
     OrganizationEndpoint, OrganizationPermission
 )
@@ -41,7 +42,18 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
 
         return False
 
-    def put(self, request, organization, member_id, team_slug):
+    def post(self, request, organization, member_id, team_slug):
+        """
+        Join a team
+
+        Join or request access to a team.
+
+        If the user is already a member of the team, this will simply return
+        a 204.
+
+        If the user needs permission to join the team, an access request will
+        be generated and the returned status code will be 202.
+        """
         try:
             om = OrganizationMember.objects.filter(
                 organization=organization,
@@ -68,35 +80,83 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
                     organizationmember=om,
                 )
             except OrganizationMemberTeam.DoesNotExist:
+                # TODO(dcramer): this should create a pending request and
+                # return a 202
                 if not organization.flags.allow_joinleave:
-                    raise ResourceDoesNotExist
+                    return Response(status=400)
                 omt = OrganizationMemberTeam(
                     team=team,
                     organizationmember=om,
                     is_active=False,
                 )
+
+            if omt.is_active:
+                return Response(status=204)
+        else:
+            try:
+                omt = OrganizationMemberTeam.objects.get(
+                    team=team,
+                    organizationmember=om,
+                )
+            except OrganizationMemberTeam.DoesNotExist:
+                # if the relationship doesnt exist, they're already a member
+                return Response(status=204)
+
+        omt.is_active = True
+        omt.save()
+
+        return Response(serialize(team), status=201)
+
+    def delete(self, request, organization, member_id, team_slug):
+        """
+        Leave a team
+
+        Leave a team.
+        """
+        try:
+            om = OrganizationMember.objects.filter(
+                organization=organization,
+                id=member_id,
+            ).select_related('user').get()
+        except OrganizationMember.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        if not self._can_access(request, om):
+            return Response({'detail': ERR_INSUFFICIENT_ROLE}, status=400)
+
+        try:
+            team = Team.objects.get(
+                organization=organization,
+                slug=team_slug,
+            )
+        except Team.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        if not om.has_global_access:
+            try:
+                omt = OrganizationMemberTeam.objects.get(
+                    team=team,
+                    organizationmember=om,
+                )
+            except OrganizationMemberTeam.DoesNotExist:
+                # if the relationship doesnt exist, they're already a member
+                return Response(status=204)
         else:
             try:
                 omt = OrganizationMemberTeam.objects.get(
                     team=team,
                     organizationmember=om,
+                    is_active=True,
                 )
             except OrganizationMemberTeam.DoesNotExist:
                 omt = OrganizationMemberTeam(
                     team=team,
                     organizationmember=om,
+                    is_active=True,
                 )
 
-        serializer = OrganizationMemberTeamSerializer(data=request.DATA, partial=True)
-        if not serializer.is_valid():
-            return Response(serializer.errors, status=400)
-
-        result = serializer.object
-        if result.get('isActive') is not None and result['isActive'] != omt.is_active:
-            omt.is_active = result['isActive']
+        if omt.is_active:
+            omt.is_active = False
             omt.save()
 
-        return Response({
-            'slug': team.slug,
-            'isActive': omt.is_active,
-        }, status=200)
+        return Response(status=204)
diff --git a/tests/sentry/api/endpoints/test_organization_member_team_details.py b/tests/sentry/api/endpoints/test_organization_member_team_details.py
index 79f86af36a..040367229c 100644
--- a/tests/sentry/api/endpoints/test_organization_member_team_details.py
+++ b/tests/sentry/api/endpoints/test_organization_member_team_details.py
@@ -8,8 +8,8 @@ from sentry.models import (
 from sentry.testutils import APITestCase
 
 
-class UpdateOrganizationMemberTeamTest(APITestCase):
-    def test_can_change_status_as_global_member(self):
+class CreateOrganizationMemberTeamTest(APITestCase):
+    def test_can_join_as_statusless_global_member(self):
         self.login_as(user=self.user)
 
         organization = self.create_organization(name='foo', owner=self.user)
@@ -27,17 +27,44 @@ class UpdateOrganizationMemberTeamTest(APITestCase):
 
         self.login_as(self.user)
 
-        resp = self.client.put(path, data={'isActive': '0'})
+        resp = self.client.post(path)
 
-        assert resp.status_code == 200
+        assert resp.status_code == 204
+
+    def test_can_join_as_global_member(self):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name='foo', owner=self.user)
+        member_om = self.create_member(
+            organization=organization,
+            email='foo@example.com',
+            type=OrganizationMemberType.MEMBER,
+            has_global_access=True,
+        )
+        team = self.create_team(name='foo', organization=organization)
+        OrganizationMemberTeam.objects.create(
+            team=team,
+            organizationmember=member_om,
+            is_active=False,
+        )
+
+        path = reverse('sentry-api-0-organization-member-team-details', args=[
+            organization.slug, member_om.id, team.slug,
+        ])
+
+        self.login_as(self.user)
+
+        resp = self.client.post(path)
+
+        assert resp.status_code == 201
 
         omt = OrganizationMemberTeam.objects.get(
             team=team,
             organizationmember=member_om,
         )
-        assert not omt.is_active
+        assert omt.is_active
 
-    def test_can_change_status_as_team_member(self):
+    def test_can_join_as_existing_team_member(self):
         self.login_as(user=self.user)
 
         organization = self.create_organization(name='foo', owner=self.user)
@@ -56,17 +83,11 @@ class UpdateOrganizationMemberTeamTest(APITestCase):
 
         self.login_as(self.user)
 
-        resp = self.client.put(path, data={'isActive': '0'})
+        resp = self.client.post(path)
 
-        assert resp.status_code == 200
+        assert resp.status_code == 204
 
-        omt = OrganizationMemberTeam.objects.get(
-            team=team,
-            organizationmember=member_om,
-        )
-        assert not omt.is_active
-
-    def test_cannot_change_status_as_non_team_member(self):
+    def test_cannot_join_as_non_team_member(self):
         self.login_as(user=self.user)
 
         organization = self.create_organization(name='foo', owner=self.user)
@@ -84,11 +105,11 @@ class UpdateOrganizationMemberTeamTest(APITestCase):
 
         self.login_as(self.user)
 
-        resp = self.client.put(path, data={'isActive': '1'})
+        resp = self.client.post(path)
 
-        assert resp.status_code == 404
+        assert resp.status_code == 400
 
-    def test_can_change_status_on_open_org(self):
+    def test_can_join_on_open_org(self):
         self.login_as(user=self.user)
 
         organization = self.create_organization(
@@ -110,12 +131,132 @@ class UpdateOrganizationMemberTeamTest(APITestCase):
 
         self.login_as(self.user)
 
-        resp = self.client.put(path, data={'isActive': '1'})
+        resp = self.client.post(path)
 
-        assert resp.status_code == 200
+        assert resp.status_code == 201
 
         omt = OrganizationMemberTeam.objects.get(
             team=team,
             organizationmember=member_om,
         )
         assert omt.is_active
+
+
+class DeleteOrganizationMemberTeamTest(APITestCase):
+    def test_can_leave_as_statusless_global_member(self):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name='foo', owner=self.user)
+        member_om = self.create_member(
+            organization=organization,
+            email='foo@example.com',
+            type=OrganizationMemberType.MEMBER,
+            has_global_access=True,
+        )
+        team = self.create_team(name='foo', organization=organization)
+
+        path = reverse('sentry-api-0-organization-member-team-details', args=[
+            organization.slug, member_om.id, team.slug,
+        ])
+
+        self.login_as(self.user)
+
+        resp = self.client.delete(path)
+
+        assert resp.status_code == 204
+
+        assert OrganizationMemberTeam.objects.filter(
+            team=team,
+            organizationmember=member_om,
+            is_active=False,
+        ).exists()
+
+    def test_can_leave_as_global_member(self):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name='foo', owner=self.user)
+        member_om = self.create_member(
+            organization=organization,
+            email='foo@example.com',
+            type=OrganizationMemberType.MEMBER,
+            has_global_access=True,
+        )
+        team = self.create_team(name='foo', organization=organization)
+        OrganizationMemberTeam.objects.create(
+            team=team,
+            organizationmember=member_om,
+            is_active=True,
+        )
+
+        path = reverse('sentry-api-0-organization-member-team-details', args=[
+            organization.slug, member_om.id, team.slug,
+        ])
+
+        self.login_as(self.user)
+
+        resp = self.client.delete(path)
+
+        assert resp.status_code == 204
+
+        assert OrganizationMemberTeam.objects.filter(
+            team=team,
+            organizationmember=member_om,
+            is_active=False,
+        ).exists()
+
+    def test_can_leave_as_existing_team_member(self):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name='foo', owner=self.user)
+        team = self.create_team(name='foo', organization=organization)
+        member_om = self.create_member(
+            organization=organization,
+            email='foo@example.com',
+            type=OrganizationMemberType.MEMBER,
+            has_global_access=False,
+            teams=[team],
+        )
+
+        path = reverse('sentry-api-0-organization-member-team-details', args=[
+            organization.slug, member_om.id, team.slug,
+        ])
+
+        self.login_as(self.user)
+
+        resp = self.client.delete(path)
+
+        assert resp.status_code == 204
+
+        assert not OrganizationMemberTeam.objects.filter(
+            team=team,
+            organizationmember=member_om,
+            is_active=True,
+        ).exists()
+
+    def test_can_leave_as_non_team_member(self):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name='foo', owner=self.user)
+        team = self.create_team(name='foo', organization=organization)
+        member_om = self.create_member(
+            organization=organization,
+            email='foo@example.com',
+            type=OrganizationMemberType.MEMBER,
+            has_global_access=False,
+        )
+
+        path = reverse('sentry-api-0-organization-member-team-details', args=[
+            organization.slug, member_om.id, team.slug,
+        ])
+
+        self.login_as(self.user)
+
+        resp = self.client.delete(path)
+
+        assert resp.status_code == 204
+
+        assert not OrganizationMemberTeam.objects.filter(
+            team=team,
+            organizationmember=member_om,
+            is_active=True,
+        ).exists()
