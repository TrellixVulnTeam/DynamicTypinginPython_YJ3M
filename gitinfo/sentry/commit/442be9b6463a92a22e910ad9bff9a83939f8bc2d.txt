commit 442be9b6463a92a22e910ad9bff9a83939f8bc2d
Author: Jan Michael Auer <account@jauer.org>
Date:   Thu Nov 22 17:42:23 2018 +0100

    ref(stacktraces): Handle null values gracefully in stack traces (#10729)

diff --git a/src/sentry/stacktraces.py b/src/sentry/stacktraces.py
index 91e5adc210..b2d9b373fd 100644
--- a/src/sentry/stacktraces.py
+++ b/src/sentry/stacktraces.py
@@ -7,9 +7,9 @@ from datetime import datetime
 from collections import namedtuple
 
 from sentry.models import Project, Release
-from sentry.utils.safe import safe_execute
 from sentry.utils.cache import cache
 from sentry.utils.hashlib import hash_values
+from sentry.utils.safe import get_path, safe_execute
 
 
 logger = logging.getLogger(__name__)
@@ -167,44 +167,33 @@ def find_stacktraces_in_data(data, include_raw=False):
     rv = []
 
     def _report_stack(stacktrace, container):
-        platforms = set()
-        for frame in stacktrace.get('frames') or ():
-            platforms.add(frame.get('platform') or data.get('platform'))
+        if not stacktrace or not get_path(stacktrace, 'frames', filter=True):
+            return
+
+        platforms = set(
+            frame.get('platform') or data.get('platform')
+            for frame in get_path(stacktrace, 'frames', filter=True, default=())
+        )
         rv.append(StacktraceInfo(stacktrace=stacktrace, container=container, platforms=platforms))
 
-    exc_container = data.get('exception')
-    if exc_container:
-        for exc in exc_container['values']:
-            if not exc:
-                continue
-            stacktrace = exc.get('stacktrace')
-            if stacktrace:
-                _report_stack(stacktrace, exc)
-
-    stacktrace = data.get('stacktrace')
-    if stacktrace:
-        _report_stack(stacktrace, None)
-
-    threads = data.get('threads')
-    if threads:
-        for thread in threads['values']:
-            stacktrace = thread.get('stacktrace')
-            if stacktrace:
-                _report_stack(stacktrace, thread)
+    for exc in get_path(data, 'exception', 'values', filter=True, default=()):
+        _report_stack(exc.get('stacktrace'), exc)
+
+    _report_stack(data.get('stacktrace'), None)
+
+    for thread in get_path(data, 'threads', 'values', filter=True, default=()):
+        _report_stack(thread.get('stacktrace'), thread)
 
     if include_raw:
-        for stacktrace_info in rv[:]:
-            if stacktrace_info.container is None:
-                continue
-            raw = stacktrace_info.container.get('raw_stacktrace')
-            if raw:
-                _report_stack(raw, stacktrace_info.container)
+        for info in rv[:]:
+            if info.container is not None:
+                _report_stack(info.container.get('raw_stacktrace'), info.container)
 
     return rv
 
 
 def normalize_in_app(data):
-    def _get_has_system_frames(frames):
+    def _has_system_frames(frames):
         system_frames = 0
         for frame in frames:
             if not frame.get('in_app'):
@@ -212,8 +201,8 @@ def normalize_in_app(data):
         return bool(system_frames) and len(frames) != system_frames
 
     for stacktrace_info in find_stacktraces_in_data(data, include_raw=True):
-        frames = stacktrace_info.stacktrace.get('frames') or ()
-        has_system_frames = _get_has_system_frames(frames)
+        frames = get_path(stacktrace_info.stacktrace, 'frames', filter=True, default=())
+        has_system_frames = _has_system_frames(frames)
         for frame in frames:
             if not has_system_frames:
                 frame['in_app'] = False
@@ -270,9 +259,10 @@ def get_processable_frames(stacktrace_info, processors):
     """Returns thin wrappers around the frames in a stacktrace associated
     with the processor for it.
     """
-    frame_count = len(stacktrace_info.stacktrace['frames'])
+    frames = get_path(stacktrace_info.stacktrace, 'frames', filter=True, default=())
+    frame_count = len(frames)
     rv = []
-    for idx, frame in enumerate(stacktrace_info.stacktrace['frames']):
+    for idx, frame in enumerate(frames):
         processor = next((p for p in processors if p.handles_frame(frame, stacktrace_info)), None)
         if processor is not None:
             rv.append(
diff --git a/tests/sentry/test_stacktraces.py b/tests/sentry/test_stacktraces.py
index 711f4cba1d..5cc3991770 100644
--- a/tests/sentry/test_stacktraces.py
+++ b/tests/sentry/test_stacktraces.py
@@ -1,65 +1,211 @@
 from __future__ import absolute_import
 
-from sentry.stacktraces import find_stacktraces_in_data
+from sentry.stacktraces import find_stacktraces_in_data, normalize_in_app
+from sentry.testutils import TestCase
 
 
-def test_stacktraces_basics():
-    data = {
-        'message': 'hello',
-        'platform': 'javascript',
-        'stacktrace': {
-            'frames': [
-                {
-                    'abs_path': 'http://example.com/foo.js',
-                    'filename': 'foo.js',
-                    'lineno': 4,
-                    'colno': 0,
-                },
-                {
-                    'abs_path': 'http://example.com/foo.js',
-                    'filename': 'foo.js',
-                    'lineno': 1,
-                    'colno': 0,
-                },
-            ],
-        },
-    }
+class FindStacktracesTest(TestCase):
+    def test_stacktraces_basics(self):
+        data = {
+            'message': 'hello',
+            'platform': 'javascript',
+            'stacktrace': {
+                'frames': [
+                    {
+                        'abs_path': 'http://example.com/foo.js',
+                        'filename': 'foo.js',
+                        'lineno': 4,
+                        'colno': 0,
+                    },
+                    {
+                        'abs_path': 'http://example.com/foo.js',
+                        'filename': 'foo.js',
+                        'lineno': 1,
+                        'colno': 0,
+                                    'platform': 'native',
+                    },
+                ],
+            },
+        }
+
+        infos = find_stacktraces_in_data(data)
+        assert len(infos) == 1
+        assert len(infos[0].stacktrace['frames']) == 2
+        assert infos[0].platforms == set(['javascript', 'native'])
+
+    def test_stacktraces_exception(self):
+        data = {
+            'message': 'hello',
+            'platform': 'javascript',
+            'exception': {
+                'values': [
+                    {
+                        'type': 'Error',
+                        'stacktrace': {
+                            'frames': [
+                                {
+                                    'abs_path': 'http://example.com/foo.js',
+                                    'filename': 'foo.js',
+                                    'lineno': 4,
+                                    'colno': 0,
+                                },
+                                {
+                                    'abs_path': 'http://example.com/foo.js',
+                                    'filename': 'foo.js',
+                                    'lineno': 1,
+                                    'colno': 0,
+                                },
+                            ],
+                        },
+                    }
+                ],
+            }
+        }
+
+        infos = find_stacktraces_in_data(data)
+        assert len(infos) == 1
+        assert len(infos[0].stacktrace['frames']) == 2
+
+    def test_stacktraces_threads(self):
+        data = {
+            'message': 'hello',
+            'platform': 'javascript',
+            'threads': {
+                'values': [
+                    {
+                        'id': '4711',
+                        'stacktrace': {
+                            'frames': [
+                                {
+                                    'abs_path': 'http://example.com/foo.js',
+                                    'filename': 'foo.js',
+                                    'lineno': 4,
+                                    'colno': 0,
+                                },
+                                {
+                                    'abs_path': 'http://example.com/foo.js',
+                                    'filename': 'foo.js',
+                                    'lineno': 1,
+                                    'colno': 0,
+                                },
+                            ],
+                        },
+                    }
+                ]
+            }
+        }
+
+        infos = find_stacktraces_in_data(data)
+        assert len(infos) == 1
+        assert len(infos[0].stacktrace['frames']) == 2
+
+    def test_find_stacktraces_skip_none(self):
+        # This tests:
+        #  1. exception is None
+        #  2. stacktrace is None
+        #  3. frames is None
+        #  3. frames contains only None
+        #  4. frame is None
+        data = {
+            'message': 'hello',
+            'platform': 'javascript',
+            'exception': {
+                'values': [
+                    None,
+                    {
+                        'type': 'Error',
+                        'stacktrace': None,
+                    },
+                    {
+                        'type': 'Error',
+                        'stacktrace': {
+                            'frames': None,
+                        },
+                    },
+                    {
+                        'type': 'Error',
+                        'stacktrace': {
+                            'frames': [None],
+                        },
+                    },
+                    {
+                        'type': 'Error',
+                        'stacktrace': {
+                            'frames': [
+                                None,
+                                {
+                                    'abs_path': 'http://example.com/foo.js',
+                                    'filename': 'foo.js',
+                                    'lineno': 4,
+                                    'colno': 0,
+                                },
+                                {
+                                    'abs_path': 'http://example.com/foo.js',
+                                    'filename': 'foo.js',
+                                    'lineno': 1,
+                                    'colno': 0,
+                                },
+                            ],
+                        },
+                    },
+                ]
+            }
+        }
 
-    infos = find_stacktraces_in_data(data)
-    assert len(infos) == 1
-    assert len(infos[0].stacktrace['frames']) == 2
-    assert infos[0].platforms == set(['javascript'])
+        infos = find_stacktraces_in_data(data)
+        assert len(infos) == 1
+        # XXX: The null frame is still part of this stack trace!
+        assert len(infos[0].stacktrace['frames']) == 3
 
 
-def test_get_stacktraces_returns_exception_interface():
-    data = {
-        'message': 'hello',
-        'platform': 'javascript',
-        'exception': {
-            'values': [
-                {
-                    'type': 'Error',
-                    'stacktrace': {
-                        'frames': [
-                            {
-                                'abs_path': 'http://example.com/foo.js',
-                                'filename': 'foo.js',
-                                'lineno': 4,
-                                'colno': 0,
-                            },
-                            {
-                                'abs_path': 'http://example.com/foo.js',
-                                'filename': 'foo.js',
-                                'lineno': 1,
-                                'colno': 0,
-                            },
-                        ],
+class NormalizeInApptest(TestCase):
+    def test_normalize_with_system_frames(self):
+        data = {
+            'stacktrace': {
+                'frames': [
+                    None,
+                    {
+                        'abs_path': 'http://example.com/foo.js',
+                        'filename': 'foo.js',
+                        'lineno': 4,
+                        'colno': 0,
+                        'in_app': True,
+                    },
+                    {
+                        'abs_path': 'http://example.com/foo.js',
+                        'filename': 'foo.js',
+                        'lineno': 1,
+                        'colno': 0,
+                    },
+                ]
+            }
+        }
+
+        normalize_in_app(data)
+        assert data['stacktrace']['frames'][1]['in_app'] is True
+        assert data['stacktrace']['frames'][2]['in_app'] is False
+
+    def test_normalize_skips_none(self):
+        data = {
+            'stacktrace': {
+                'frames': [
+                    None,
+                    {
+                        'abs_path': 'http://example.com/foo.js',
+                        'filename': 'foo.js',
+                        'lineno': 4,
+                        'colno': 0,
+                    },
+                    {
+                        'abs_path': 'http://example.com/foo.js',
+                        'filename': 'foo.js',
+                        'lineno': 1,
+                        'colno': 0,
                     },
-                }
-            ],
+                ]
+            }
         }
-    }
 
-    infos = find_stacktraces_in_data(data)
-    assert len(infos) == 1
-    assert len(infos[0].stacktrace['frames']) == 2
+        normalize_in_app(data)
+        assert data['stacktrace']['frames'][1]['in_app'] is False
+        assert data['stacktrace']['frames'][2]['in_app'] is False
