commit 56d06bf400e7f9382f4cdd7a371c3b26f7bd6b10
Author: Eric Feng <erichfeng@gmail.com>
Date:   Fri Feb 12 20:00:25 2016 -0800

    fixing conflicts

diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index ce7f7c65c8..023f41a1f6 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -30,7 +30,7 @@ class OnboardingTasksSerializer(Serializer):
         return {
             'task': obj.task,
             'status': dict(OrganizationOnboardingTask.STATUS_CHOICES).get(obj.status),
-            'user': obj.user.name,
+            'user': obj.user.name if obj.user else None,
             'date_completed': obj.date_completed,
             'data': obj.data,
         }
diff --git a/src/sentry/db/models/query.py b/src/sentry/db/models/query.py
index 8d3bb3cefc..55dec18fd5 100644
--- a/src/sentry/db/models/query.py
+++ b/src/sentry/db/models/query.py
@@ -50,6 +50,8 @@ update.alters_data = True
 def create_or_update(model, using=None, **kwargs):
     """
     Similar to get_or_create, either updates a row or creates it.
+    only values args are used for update
+    both default and values are used for create
 
     The result will be (rows affected, False), if the row was not created,
     or (instance, True) if the object is new.
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index a547729a38..9793a0f54b 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -31,7 +31,7 @@ from sentry.models import (
     GroupStatus, Project, Release, TagKey, UserReport
 )
 from sentry.plugins import plugins
-from sentry.signals import first_event, regression_signal
+from sentry.signals import first_event_received, regression_signal
 from sentry.utils.logging import suppress_exceptions
 from sentry.tasks.merge import merge_group
 from sentry.tasks.post_process import post_process_group
@@ -511,7 +511,7 @@ class EventManager(object):
         if not raw:
             if not project.first_event:
                 project.update(first_event=date)
-                first_event.send(instance=project, sender=Project)
+                first_event_received.send(instance=project, group=group, sender=Project)
 
             post_process_group.delay(
                 group=group,
diff --git a/src/sentry/models/groupassignee.py b/src/sentry/models/groupassignee.py
index 9528167cc6..7ae0e2b693 100644
--- a/src/sentry/models/groupassignee.py
+++ b/src/sentry/models/groupassignee.py
@@ -56,16 +56,6 @@ class GroupAssigneeManager(BaseManager):
             )
             activity.send_notification()
 
-            OrganizationOnboardingTask.get_or_create(
-                organization=self.organization,
-                user=self.user,
-                task=OnboardingTask.INVITE_MEMBER,
-                status=OnboardingTaskStatus.COMPLETE,
-                values={
-                    'date_completed': timezone.now()
-                }
-            )
-
     def deassign(self, group, acting_user=None):
         affected = GroupAssignee.objects.filter(
             group=group,
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index ef55d4a4ae..57ce3946d5 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -12,7 +12,7 @@ import logging
 from bitfield import BitField
 from django.conf import settings
 from django.core.urlresolvers import reverse
-from django.db import models, transaction
+from django.db import IntegrityError, models, transaction
 from django.db.models import F
 from django.utils import timezone
 from hashlib import md5
@@ -97,20 +97,6 @@ class OrganizationMember(Model):
             'Must set user or email'
         super(OrganizationMember, self).save(*args, **kwargs)
 
-        if self.user:
-            try:
-                oot = OrganizationOnboardingTask.objects.get(
-                    organization=self.organization,
-                    task=OnboardingTask.INVITE_MEMBER,
-                )
-                if oot.status == OnboardingTaskStatus.PENDING:
-                    oot.status = OnboardingTaskStatus.COMPLETE
-                    oot.date_completed = timezone.now()
-                    oot.data = { 'invited_member': self.user_id }
-                    oot.save()
-            except OrganizationOnboardingTask.DoesNotExist as e:
-                pass
-
         if not self.counter:
             self._set_counter()
 
diff --git a/src/sentry/models/organizationonboardingtask.py b/src/sentry/models/organizationonboardingtask.py
index 3a73b3585d..033310636b 100644
--- a/src/sentry/models/organizationonboardingtask.py
+++ b/src/sentry/models/organizationonboardingtask.py
@@ -19,19 +19,16 @@ from sentry.db.models import (
 
 
 class OnboardingTask(object):
-    FIRST_EVENT = 1
-    INVITE_MEMBER = 2
-    ISSUE_TRACKER = 3
-    NOTIFICATION_SERVICE = 4
-    SECOND_PLATFORM = 5  # dependent on FIRST_EVENT.
-    USER_CONTEXT = 6  # dependent on FIRST_EVENT
+    FIRST_PROJECT = 1
+    FIRST_EVENT = 2
+    INVITE_MEMBER = 3
+    SECOND_PLATFORM = 4  # dependent on FIRST_EVENT.
+    USER_CONTEXT = 5  # dependent on FIRST_EVENT
+    RELEASE_TRACKING = 6  # dependent on FIRST_EVENT
     SOURCEMAPS = 7  # dependent on RELEASE_TRACKING and one of the platforms being javascript
-    RELEASE_TRACKING = 8  # dependent on FIRST_EVENT
-    USER_REPORTS = 9  # Only for web frameworks
-    ISSUE_ASSIGNMENT = 10  # dependent on INVITE_MEMBER
-    RELEASE_RESOLVED = 11  # dependent on RELEASE_TRACKING
-    SAVED_SEARCHES = 12  # dependent on FIRST_EVENT
-    RULES = 13
+    USER_REPORTS = 8  # Only for web frameworks
+    ISSUE_TRACKER = 9
+    NOTIFICATION_SERVICE = 10
 
 
 class OnboardingTaskStatus(object):
@@ -63,15 +60,11 @@ class OrganizationOnboardingTask(Model):
         (OnboardingTask.INVITE_MEMBER, 'Invite member'),  # Add a second member to your Sentry org.
         (OnboardingTask.ISSUE_TRACKER, 'Issue tracker'),  # Hook up an external issue tracker.
         (OnboardingTask.NOTIFICATION_SERVICE, 'Notification services'),  # Setup a notification services
-        (OnboardingTask.ISSUE_ASSIGNMENT, 'Issue assignment'),  # Assign issues to team members
         (OnboardingTask.SECOND_PLATFORM, 'Second platform'),  # Send an event from a second platform
         (OnboardingTask.USER_CONTEXT, 'User context'),  # Add user context to errors
         (OnboardingTask.SOURCEMAPS, 'Upload sourcemaps'),  # Upload sourcemaps for compiled js code
         (OnboardingTask.RELEASE_TRACKING, 'Release tracking'),  # Add release data to Sentry events
         (OnboardingTask.USER_REPORTS, 'User reports'),  # Send user reports
-        (OnboardingTask.RELEASE_RESOLVED, 'Resolved in next release'),
-        (OnboardingTask.SAVED_SEARCHES, 'Saved searches'),
-        (OnboardingTask.RULES, 'Rules'),
     )
 
     STATUS_CHOICES = (
@@ -81,7 +74,7 @@ class OrganizationOnboardingTask(Model):
     )
 
     organization = FlexibleForeignKey('sentry.Organization')
-    user = FlexibleForeignKey(settings.AUTH_USER_MODEL)  # user that completed
+    user = FlexibleForeignKey(settings.AUTH_USER_MODEL, null=True)  # user that completed
     project = FlexibleForeignKey('sentry.Project', null=True)  # if task is associated with a project
     task = BoundedPositiveIntegerField(choices=TASK_CHOICES)
     status = BoundedPositiveIntegerField(choices=STATUS_CHOICES)
diff --git a/src/sentry/plugins/bases/issue.py b/src/sentry/plugins/bases/issue.py
index 8ea1b26e53..5956702016 100644
--- a/src/sentry/plugins/bases/issue.py
+++ b/src/sentry/plugins/bases/issue.py
@@ -9,6 +9,7 @@ from __future__ import absolute_import
 
 from django import forms
 from django.conf import settings
+from django.db import IntegrityError, transaction
 from django.utils import timezone
 from django.utils.html import format_html
 from social_auth.models import UserSocialAuth
@@ -16,11 +17,9 @@ from social_auth.models import UserSocialAuth
 from sentry.models import (
     Activity,
     GroupMeta,
-    OnboardingTask,
-    OnboardingTaskStatus,
-    OrganizationOnboardingTask,
 )
 from sentry.plugins import Plugin
+from sentry.signals import plugin_enabled
 from sentry.utils.auth import get_auth_providers
 from sentry.utils.http import absolute_uri
 from sentry.utils.safe import safe_execute
@@ -175,15 +174,6 @@ class IssueTrackingPlugin(Plugin):
                     form_data=form.cleaned_data,
                     request=request,
                 )
-                OrganizationOnboardingTask.objects.create_or_update(
-                    organization=group.project.organization,
-                    user=request.user,
-                    task=OnboardingTask.ISSUE_TRACKER,
-                    values={
-                        'status': OnboardingTaskStatus.COMPLETE,
-                        'date_completed': timezone.now()
-                    }
-                )
             except forms.ValidationError as e:
                 form.errors['__all__'] = [u'Error creating issue: %s' % e]
 
@@ -204,6 +194,7 @@ class IssueTrackingPlugin(Plugin):
                 data=issue_information,
             )
 
+            issue_tracker_used.send(plugin=self, project=group.project, user=request.user, sender=IssueTrackingPlugin)
             return self.redirect(group.get_absolute_url())
 
         context = {
diff --git a/src/sentry/receivers/onboarding.py b/src/sentry/receivers/onboarding.py
index 4130b9132e..8ab1936dcb 100644
--- a/src/sentry/receivers/onboarding.py
+++ b/src/sentry/receivers/onboarding.py
@@ -1,33 +1,226 @@
 from __future__ import print_function, absolute_import
 
 from django.db import IntegrityError, transaction
+from django.utils import timezone
 
 from sentry.models import (
     OnboardingTask, OnboardingTaskStatus, OrganizationOnboardingTask
 )
-from sentry.signals import first_event
-
+from sentry.plugins import IssueTrackingPlugin, NotificationPlugin
+from sentry.signals import (
+    event_processed,
+    project_created,
+    first_event_pending,
+    first_event_received,
+    member_invited,
+    member_joined,
+    plugin_enabled,
+    issue_tracker_used,
+    user_context_received,
+    release_received,
+    sourcemap_received,
+)
 
-@first_event.connect(weak=False)
-def record_first_event(instance, **kwargs):
+@project_created.connect(weak=False)
+def record_new_project(project, user, **kwargs):
     try:
         with transaction.atomic():
             OrganizationOnboardingTask.objects.create(
-                organization=instance.organization,
-                project=instance,
-                task=OnboardingTask.FIRST_EVENT,
+                organization=project.organization,
+                task=OnboardingTask.FIRST_PROJECT,
+                user=user,
                 status=OnboardingTaskStatus.COMPLETE,
-                date_completed=instance.first_event,
-                data={},
+                project=project,
+                date_completed=timezone.now(),
             )
     except IntegrityError:
-        OrganizationOnboardingTask.objects.filter(
+        try:
+            with transaction.atomic():
+                OrganizationOnboardingTask.objects.create(
+                    organization=instance.organization,
+                    task=OnboardingTask.SECOND_PLATFORM,
+                    user=user,
+                    status=OnboardingTaskStatus.PENDING,
+                    project=instance,
+                    date_completed=timezone.now(),
+                )
+        except IntegrityError:
+            pass
+
+@first_event_pending.connect(weak=False)
+def record_raven_installed(instance, user, **kwargs):
+    """
+    Args:
+        instance (sentry.models.Project)
+        user (sentry.models.user)
+    """
+    oot, created = OrganizationOnboardingTask.objects.get_or_create(
+        organization=instance.organization,
+        task=OnboardingTask.FIRST_EVENT,
+        status=OnboardingTaskStatus.PENDING,
+        defaults={
+            'user': user,
+            'project': instance,
+            'date_completed': timezone.now()
+        }
+    )
+
+@first_event_received.connect(weak=False)
+def record_first_event(instance, group, **kwargs):
+    """
+    Requires up to 2 database calls, but should only run with the first event in
+    any project, so performance should not be a huge bottleneck.
+
+    Args:
+        instance (sentry.models.Project)
+        group (sentry.models.Group)
+    """
+    # If complete, pass (creation fails due to organization, task unique constraint)
+    # If pending, update.
+    # If does not exist, create.
+    rows_affected, created = OrganizationOnboardingTask.objects.create_or_update(
+        organization=instance.organization,
+        task=OnboardingTask.FIRST_EVENT,
+        status=OnboardingTaskStatus.PENDING,
+        values={
+            'status': OnboardingTaskStatus.COMPLETE,
+            'project': instance,
+            'date_completed': instance.first_event,
+            'data': { 'platform': group.platform },
+        }
+    )
+
+    # If first_event task is complete
+    if not rows_affected and not created:
+        oot = OrganizationOnboardingTask.objects.filter(
             organization=instance.organization,
-            task=OnboardingTask.FIRST_EVENT,
+            task=OnboardingTask.FIRST_EVENT
+        ).first()
+
+        # Only counts if it's a new project and platform
+        if oot.project != instance and oot.data['platform'] != group.platform:
+            OrganizationOnboardingTask.objects.create_or_update(
+                organization=instance.organization,
+                task=OnboardingTask.SECOND_PLATFORM,
+                status=OnboardingTaskStatus.PENDING,
+                values={
+                    'status': OnboardingTaskStatus.COMPLETE,
+                    'project': instance,
+                    'date_completed': instance.first_event,
+                    'data': { 'platform': group.platform },
+                }
+            )
+
+@member_invited.connect(weak=False)
+def record_member_invited(member, user, **kwargs):
+    try:
+        with transaction.atomic():
+            OrganizationOnboardingTask.objects.create(
+                organization=member.organization,
+                task=OnboardingTask.INVITE_MEMBER,
+                user=user,
+                status=OnboardingTaskStatus.PENDING,
+                date_completed=timezone.now(),
+                data={ 'invited_member_id': member.id }
+            )
+    except IntegrityError:
+        pass
+
+@member_joined.connect(weak=False)
+def record_member_joined(member, **kwargs):
+    try:
+        OrganizationOnboardingTask.objects.filter(
+            organization=member.organization,
+            task=OnboardingTask.INVITE_MEMBER
         ).exclude(
-            status=OnboardingTaskStatus.COMPLETE,
+            status=OnboardingTaskStatus.COMPLETE
         ).update(
-            project=instance,
-            date_completed=instance.first_event,
-            data={},
+            status=OnboardingTaskStatus.COMPLETE,
+            date_completed=timezone.now(),
+            data={'invited_member_id': member.id}
         )
+    except IntegrityError:
+        pass
+
+@event_processed.connect(weak=False)
+def record_release_received(project, group, event, **kwargs):
+    if event.get_tag('sentry:release'):
+        try:
+            with transaction.atomic():
+                OrganizationOnboardingTask.objects.create(
+                    organization=project.organization,
+                    task=OnboardingTask.RELEASE_TRACKING,
+                    status=OnboardingTaskStatus.COMPLETE,
+                    project=project,
+                    date_completed=timezone.now()
+                )
+        except IntegrityError:
+            pass
+
+@event_processed.connect(weak=False)
+def record_user_context_received(project, group, event, **kwargs):
+    if event.data.get('sentry.interfaces.User'):
+        try:
+            with transaction.atomic():
+                OrganizationOnboardingTask.objects.create(
+                    organization=project.organization,
+                    task=OnboardingTask.USER_CONTEXT,
+                    status=OnboardingTaskStatus.COMPLETE,
+                    project=project,
+                    date_completed=timezone.now()
+                )
+        except IntegrityError:
+            pass
+
+@event_processed.connect(weak=False)
+def record_sourcemaps_received(project, group, event, **kwargs):
+    if event.data.get("sourcemap"):
+        try:
+            with transaction.atomic():
+                OrganizationOnboardingTask.objects.create(
+                    organization=project.organization,
+                    task=OnboardingTask.SOURCEMAPS,
+                    status=OnboardingTaskStatus.COMPLETE,
+                    project=project,
+                    date_completed=timezone.now()
+                )
+        except IntegrityError:
+            pass
+
+@plugin_enabled.connect(weak=False)
+def record_plugin_enabled(plugin, project, user, **kwargs):
+    if isinstance(plugin, IssueTrackingPlugin):
+        task = OnboardingTask.ISSUE_TRACKER
+        status = OnboardingTaskStatus.PENDING
+    elif isinstance(plugin,  NotificationPlugin):
+        task = OnboardingTask.NOTIFICATION_SERVICE
+        status = OnboardingTaskStatus.COMPLETE
+
+    try:
+        with transaction.atomic():
+            OrganizationOnboardingTask.objects.create(
+                organization=project.organization,
+                task=task,
+                status=status,
+                user=user,
+                project=project,
+                date_completed=timezone.now(),
+                data={ 'plugin': plugin.slug }
+            )
+    except IntegrityError:
+        pass
+
+@issue_tracker_used.connect(weak=False)
+def record_issue_tracker_used(plugin, project, user, **kwargs):
+    OrganizationOnboardingTask.objects.create_or_update(
+        organization=project.organization,
+        task=OnboardingTask.ISSUE_TRACKER,
+        status=OnboardingTaskStatus.PENDING,
+        values={
+            'status': OnboardingTaskStatus.COMPLETE,
+            'user': user,
+            'project': project,
+            'date_completed': timezone.now(),
+            'data': { 'plugin': plugin.slug }
+        }
+    )
diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index 8e15ebfda5..0b89b17514 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -28,4 +28,15 @@ buffer_incr_complete = BetterSignal(providing_args=["model", "columns", "extra",
 event_received = BetterSignal(providing_args=["ip"])
 pending_delete = BetterSignal(providing_args=["instance"])
 event_processed = BetterSignal(providing_args=['project', 'group', 'event'])
-first_event = BetterSignal(providing_args=["instance"])
+
+# Organization Onboarding Signals
+project_created = BetterSignal(providing_args=["project", "user"])
+first_event_pending = BetterSignal(providing_args=["instance", "user"])
+first_event_received = BetterSignal(providing_args=["instance", "group"])
+member_invited = BetterSignal(providing_args=["member", "user"])
+member_joined = BetterSignal(providing_args=["member"])
+user_context_received = BetterSignal(providing_args=["instance"])
+release_received = BetterSignal(providing_args=["instance"])
+sourcemap_received = BetterSignal(providing_args=["instance"])
+issue_tracker_used = BetterSignal(providing_args=["plugin", "project", "user"])
+plugin_enabled = BetterSignal(providing_args=["plugin", "project", "user"])
diff --git a/src/sentry/static/sentry/app/components/header/index.jsx b/src/sentry/static/sentry/app/components/header/index.jsx
index dc972c54ae..4044ec9395 100644
--- a/src/sentry/static/sentry/app/components/header/index.jsx
+++ b/src/sentry/static/sentry/app/components/header/index.jsx
@@ -23,7 +23,7 @@ const Header = React.createClass({
     }
   },
 
-  toggleTodos() {
+  toggleTodos(e) {
     this.setState({showTodos: !this.state.showTodos});
   },
 
@@ -38,7 +38,9 @@ const Header = React.createClass({
     }
 
     // NOTE: this.props.orgId not guaranteed to be specified
-    let percentage = Math.round((1 + this.getOrganization().onboardingTasks.length) / TodoList.TASKS.length * 100).toString();
+    let percentage = Math.round((this.getOrganization().onboardingTasks.filter(
+      (t) => { if (t['status'] == 'Complete') { return t; } }
+      ).length) / TodoList.TASKS.length * 100).toString();
     let style = {
       width: percentage + '%',
     };
diff --git a/src/sentry/static/sentry/app/components/todos.jsx b/src/sentry/static/sentry/app/components/todos.jsx
index c0dea8652c..6b9b06160d 100644
--- a/src/sentry/static/sentry/app/components/todos.jsx
+++ b/src/sentry/static/sentry/app/components/todos.jsx
@@ -73,7 +73,7 @@ const TodoItem = React.createClass({
             { this.props.task['status'] == 'Skipped' ? <span className="icon-x" /> : null }
             { this.props.task['status'] == 'Pending' ? <span className="icon-ellipsis" /> : null }
           </div>
-          <a href={learn_more_url} target="_blank"><h4>{ this.props.task['title'] }</h4></a>
+          <a href={learn_more_url}><h4>{ this.props.task['title'] }</h4></a>
           <p>
             { description }
           </p>
@@ -127,26 +127,25 @@ const TodoList = React.createClass({
   statics: {
     TASKS: [
       {
-        'task': 0,
+        'task': 1,
         'title': 'Create a project',
-        'description': 'You\'ve done it. Welcome to Sentry!',
+        'description': 'Create your first Sentry project',
         'skippable': false,
         'prereq': [],
-        'feature_location': 'project',
-        'location': 'settings/install/',
-        'status': 'Complete',
+        'feature_location': 'organization',
+        'location': 'projects/new/',
       },
       {
-        'task': 1,
+        'task': 2,
         'title': 'Send your first event',
-        'description': 'Install Sentry\'s client to get started error logging',
+        'description': 'Install Sentry\'s client and send an event',
         'skippable': false,
-        'prereq': [],
+        'prereq': [1],
         'feature_location': 'project',
         'location': 'settings/install/',
       },
       {
-        'task': 2,
+        'task': 3,
         'title': 'Invite team member',
         'description': 'Bring your team aboard',
         'skippable': false,
@@ -154,68 +153,69 @@ const TodoList = React.createClass({
         'feature_location': 'organization',
         'location': 'members/',
       },
-      // {
-      //   'task': 8,
-      //   'title': 'Set up release tracking',
-      //   'description': 'See what releases are generating errors.',
-      //   'skippable': false,
-      //   'prereq': [1],
-      //   'feature_location': 'project',
-      //   'location': 'settings/release-tracking/',
-      // },
-      // {
-      //   'task': 6,
-      //   'title': 'Add user context to errors',
-      //   'description': 'Know what users are being affected by errors and crashes',
-      //   'skippable': false,
-      //   'prereq': [1],
-      //   'feature_location': 'absolute',
-      //   'location': 'https://docs.getsentry.com/hosted/learn/context/#capturing-the-user',
-      // },
       {
-        'task': 5,
+        'task': 4,
         'title': 'Add a second platform',
         'description': 'Add Sentry to a second platform',
         'skippable': false,
-        'prereq': [1],
+        'prereq': [1, 2],
         'feature_location': 'organization',
         'location': 'projects/new/',
       },
       {
-        'task': 3,
+        'task': 5,
+        'title': 'Add user context',
+        'description': 'Know who is being affected by crashes',
+        'skippable': false,
+        'prereq': [1, 2],
+        'feature_location': 'absolute',
+        'location': 'https://docs.getsentry.com/hosted/learn/context/#capturing-the-user',
+      },
+      {
+        'task': 6,
+        'title': 'Set up release tracking',
+        'description': 'See what releases are generating errors.',
+        'skippable': false,
+        'prereq': [1, 2],
+        'feature_location': 'project',
+        'location': 'settings/release-tracking/',
+      },
+      {
+        'task': 7,
+        'title': 'Upload sourcemaps',
+        'description': 'Deminify javascript stacktraces',
+        'skippable': false,
+        'prereq': [1, 2, 8], // Is one of the platforms javascript?
+        'feature_location': 'absolute',
+        'location': 'https://docs.getsentry.com/hosted/clients/javascript/sourcemaps/'
+      },
+      // {
+      //   'task': 8,
+      //   'title': 'User crash reports',
+      //   'description': 'Collect user feedback when your application crashes',
+      //   'skippable': false,
+      //   'prereq': [1, 2, 5]
+      //   'feature_location': 'project',
+      //   'location': 'settings/user-reports/'
+      // },
+      {
+        'task': 9,
         'title': 'Set up issue tracking',
-        'description': 'Link to Sentry issues within your team\'s issue tracker',
+        'description': 'Link to Sentry issues within your issue tracker',
         'skippable': true,
-        'prereq': [1],
+        'prereq': [1, 2],
         'feature_location': 'project',
         'location': 'settings/issue-tracking/',
       },
       {
-        'task': 4,
+        'task': 10,
         'title': 'Set up a notification service',
         'description': 'Receive Sentry alerts in Slack or HipChat',
         'skippable': true,
-        'prereq': [],
+        'prereq': [1, 2],
         'feature_location': 'project',
         'location': 'settings/notifications/',
       },
-      // {
-      //   'task': 7,
-      //   'title': 'Deminify javascript with sourcemaps',
-      //   'description': 'Upload sourcemaps',
-      //   'skippable': true,
-      //   'prereq': [1, 8],
-      //   'feature_location': 'absolute',
-      //   'location': 'https://docs.getsentry.com/hosted/clients/javascript/sourcemaps/'
-      // },
-      // {
-      //   'task': 9,
-      //   'title': 'User crash reports',
-      //   'description': 'Collect user feedback when your application crashes',
-      //   'skippable': false,
-      //   'feature_location': 'project',
-      //   'location': 'settings/user-reports/'
-      // },
     ]
   },
 
@@ -225,9 +225,7 @@ const TodoList = React.createClass({
 
     for (var task of TodoList.TASKS) {
       task.status = '';
-      if (task.task == '0') {
-        task.status = 'Complete';
-      }
+
       for (var server_task of org.onboardingTasks) {
         if (server_task['task'] == task['task']) {
           task = $.extend(task, server_task);
@@ -243,7 +241,7 @@ const TodoList = React.createClass({
     // If a click is detected *outside* the TodoList, trigger
     // the onClose handler
     this.clickHandler = $('body').on('click', (e) => {
-      if (!$(e.target).closest('.onboarding-wrapper').length) {
+      if (!$(e.target).closest('.onboarding-progress-bar').length) {
         this.props.onClose();
       }
     });
@@ -293,10 +291,6 @@ const TodoList = React.createClass({
           return task;
         }
       }).slice(0,3);
-
-      if (location.hash == '#welcome') {
-        next_tasks.splice(0, 0, this.state.tasks[0]);
-      }
     }
 
     let todo_list = next_tasks.map( (task) => {
diff --git a/src/sentry/static/sentry/app/views/projectInstall/platform.jsx b/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
index c5700bf538..3ae61bb738 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
@@ -80,7 +80,7 @@ const ProjectInstallPlatform = React.createClass({
 
   render() {
     let {integration, platform} = this.state;
-    let queryParams = this.props.location.query;
+    let hash = this.props.location.hash;
     let {orgId, projectId} = this.props.params;
 
     return (
@@ -114,10 +114,10 @@ const ProjectInstallPlatform = React.createClass({
                 <div dangerouslySetInnerHTML={{__html: this.state.html}}/>
               )}
 
-              {queryParams.welcome ?
+              {hash == '#welcome' ?
                 <p>
                   <Link
-                    to={`/${orgId}/${projectId}/`}
+                    to={`/${orgId}/${projectId}/?onboarding=1#welcome`}
                     className="btn btn-primary btn-lg">
                       Got it! Take me to the Issue Stream.
                   </Link>
diff --git a/src/sentry/static/sentry/less/organization.less b/src/sentry/static/sentry/less/organization.less
index dc7b6270f6..a1b6067167 100644
--- a/src/sentry/static/sentry/less/organization.less
+++ b/src/sentry/static/sentry/less/organization.less
@@ -504,6 +504,7 @@ table.project-list {
   margin-top: 16px;
   border-radius: 2px;
   position: relative;
+  cursor: pointer;
 
   .slider {
     background: #6AFFAB;
@@ -513,12 +514,17 @@ table.project-list {
     border-radius: inherit;
   }
 
+  .slider:hover {
+    background: #00FF6F;
+  }
+
   .dropdown-menu {
     display: block;
     width: 375px;
     padding: 0;
     left: -110px;
     top: 22px;
+    cursor: auto;
 
     &:before {
       left: 50%;
@@ -548,6 +554,10 @@ table.project-list {
   }
 }
 
+.onboarding-progress-bar:hover {
+  box-shadow: 0px 0px 1px 1px rgba(255,255,255, .2);
+}
+
 /**
 * Medium to small screens
 * ============================================================================
diff --git a/src/sentry/web/forms/add_project.py b/src/sentry/web/forms/add_project.py
index a17ca62553..77eec43491 100644
--- a/src/sentry/web/forms/add_project.py
+++ b/src/sentry/web/forms/add_project.py
@@ -4,6 +4,8 @@ from django import forms
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.models import AuditLogEntry, AuditLogEntryEvent, Project
+from sentry.signals import project_created
+from sentry.utils.samples import create_sample_event
 
 
 BLANK_CHOICE = [("", "")]
@@ -36,4 +38,8 @@ class AddProjectForm(forms.ModelForm):
             data=project.get_audit_log_data(),
         )
 
+        project_created.send(instance=project, user=actor, sender=self)
+
+        create_sample_event(project, platform='javascript')
+
         return project
diff --git a/src/sentry/web/forms/invite_organization_member.py b/src/sentry/web/forms/invite_organization_member.py
index 3fc6776601..3428fcb2fb 100644
--- a/src/sentry/web/forms/invite_organization_member.py
+++ b/src/sentry/web/forms/invite_organization_member.py
@@ -7,11 +7,9 @@ from django.utils import timezone
 from sentry.models import (
     AuditLogEntry,
     AuditLogEntryEvent,
-    OnboardingTask,
-    OnboardingTaskStatus,
-    OrganizationOnboardingTask,
     OrganizationMember,
 )
+from sentry.signals import member_invited
 
 class InviteOrganizationMemberForm(forms.ModelForm):
     # override this to ensure the field is required
@@ -40,16 +38,6 @@ class InviteOrganizationMemberForm(forms.ModelForm):
         try:
             om.save()
 
-            result, created = OrganizationOnboardingTask.objects.get_or_create(
-                organization=organization,
-                user=actor,
-                task=OnboardingTask.INVITE_MEMBER,
-                defaults={
-                    'status': OnboardingTaskStatus.PENDING,
-                    'date_completed': timezone.now()
-                }
-            )
-
         except IntegrityError:
             transaction.savepoint_rollback(sid, using='default')
             return OrganizationMember.objects.get(
@@ -66,7 +54,7 @@ class InviteOrganizationMemberForm(forms.ModelForm):
             event=AuditLogEntryEvent.MEMBER_INVITE,
             data=om.get_audit_log_data(),
         )
-
+        member_invited.send(member=om, user=actor, sender=InviteOrganizationMemberForm)
         om.send_invite_email()
 
         return om, True
diff --git a/src/sentry/web/frontend/accept_organization_invite.py b/src/sentry/web/frontend/accept_organization_invite.py
index 566c08d2ad..c73204f537 100644
--- a/src/sentry/web/frontend/accept_organization_invite.py
+++ b/src/sentry/web/frontend/accept_organization_invite.py
@@ -8,6 +8,7 @@ from django.utils.translation import ugettext_lazy as _
 from sentry.models import (
     AuditLogEntry, AuditLogEntryEvent, OrganizationMember, Project
 )
+from sentry.signals import member_joined
 from sentry.web.frontend.base import BaseView
 
 ERR_INVITE_INVALID = _('The invite link you followed is not valid.')
@@ -108,6 +109,8 @@ class AcceptOrganizationInviteView(BaseView):
                     )
                 )
 
+                member_joined.send(member=om, sender=self)
+
             request.session.pop('can_register', None)
 
             return self.redirect(reverse('sentry-organization-home', args=[organization.slug]))
diff --git a/src/sentry/web/frontend/create_organization_member.py b/src/sentry/web/frontend/create_organization_member.py
index f4b898bdfc..d93c6a1bb1 100644
--- a/src/sentry/web/frontend/create_organization_member.py
+++ b/src/sentry/web/frontend/create_organization_member.py
@@ -7,6 +7,7 @@ from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
 from sentry import roles
+from sentry.signals import member_invited
 from sentry.web.frontend.base import OrganizationView
 from sentry.web.forms.invite_organization_member import InviteOrganizationMemberForm
 from sentry.web.forms.add_organization_member import AddOrganizationMemberForm
@@ -35,10 +36,14 @@ class CreateOrganizationMemberView(OrganizationView):
             if created:
                 messages.add_message(request, messages.SUCCESS,
                     _('The organization member was added.'))
+
+                member_invited.send(member=om, user=request.user, sender=self)
+
             else:
                 messages.add_message(request, messages.INFO,
                     _('The organization member already exists.'))
 
+
             redirect = reverse('sentry-organization-member-settings',
                                args=[organization.slug, om.id])
 
diff --git a/src/sentry/web/frontend/project_issue_tracking.py b/src/sentry/web/frontend/project_issue_tracking.py
index 9d49c4cbad..eafd9edf1f 100644
--- a/src/sentry/web/frontend/project_issue_tracking.py
+++ b/src/sentry/web/frontend/project_issue_tracking.py
@@ -6,8 +6,8 @@ from django.utils import timezone
 from django.utils.safestring import mark_safe
 
 from sentry import constants
-from sentry.models import OnboardingTask, OnboardingTaskStatus, OrganizationOnboardingTask
 from sentry.plugins import plugins, IssueTrackingPlugin
+from sentry.signals import plugin_enabled
 from sentry.web.frontend.base import ProjectView
 
 
@@ -24,15 +24,7 @@ class ProjectIssueTrackingView(ProjectView):
         plugin = plugins.get(request.POST['plugin'])
         plugin.enable(project)
 
-        OrganizationOnboardingTask.objects.get_or_create(
-            organization=organization,
-            user=request.user,
-            task=OnboardingTask.ISSUE_TRACKER,
-            defaults={
-                'status': OnboardingTaskStatus.PENDING,
-                'date_completed': timezone.now()
-            }
-        )
+        plugin_enabled.send(plugin=plugin, project=project, user=request.user, sender=self)
 
         messages.add_message(
             request, messages.SUCCESS,
diff --git a/src/sentry/web/frontend/project_notifications.py b/src/sentry/web/frontend/project_notifications.py
index 85532ecfc4..e4ca69c300 100644
--- a/src/sentry/web/frontend/project_notifications.py
+++ b/src/sentry/web/frontend/project_notifications.py
@@ -34,16 +34,6 @@ class ProjectNotificationsView(ProjectView):
         plugin = plugins.get(request.POST['plugin'])
         plugin.enable(project)
 
-        OrganizationOnboardingTask.objects.get_or_create(
-            organization=project.organization,
-            user=request.user,
-            task=OnboardingTask.NOTIFICATION_SERVICE,
-            status=OnboardingTaskStatus.COMPLETE,
-            defaults={
-                'date_completed': timezone.now()
-            }
-        )
-
         messages.add_message(
             request, messages.SUCCESS,
             constants.OK_PLUGIN_ENABLED.format(name=plugin.get_title()),
diff --git a/src/sentry/web/frontend/project_plugin_enable.py b/src/sentry/web/frontend/project_plugin_enable.py
index ae24e4fabe..434ec1b121 100644
--- a/src/sentry/web/frontend/project_plugin_enable.py
+++ b/src/sentry/web/frontend/project_plugin_enable.py
@@ -3,8 +3,8 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 from django.utils import timezone
 
-from sentry.models import OnboardingTask, OnboardingTaskStatus, OrganizationOnboardingTask
 from sentry.plugins import plugins
+from sentry.signals import plugin_enabled
 from sentry.web.frontend.base import ProjectView
 
 
@@ -22,16 +22,6 @@ class ProjectPluginEnableView(ProjectView):
 
         plugin.enable(project=project)
 
-        if slug:
-            OrganizationOnboardingTask.objects.get_or_create(
-                organization=organization,
-                user=request.user,
-                task=OnboardingTask.ISSUE_TRACKER,
-                defaults={
-                    'status': OnboardingTaskStatus.PENDING,
-                    'date_completed': timezone.now(),
-                    'data': { 'plugin': slug },
-                }
-            )
+        plugin_enabled.send(plugin=plugin, project=project, user=request.user, sender=self)
 
         return self.redirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
diff --git a/src/sentry/web/frontend/react_page.py b/src/sentry/web/frontend/react_page.py
index 5405ab79dc..7311e75b59 100644
--- a/src/sentry/web/frontend/react_page.py
+++ b/src/sentry/web/frontend/react_page.py
@@ -4,7 +4,8 @@ from django.middleware.csrf import get_token as get_csrf_token
 from django.http import HttpResponse
 from django.template import loader, Context
 
-from sentry.web.frontend.base import BaseView, OrganizationView
+from sentry.signals import first_event_pending
+from sentry.web.frontend.base import BaseView, ProjectView, OrganizationView
 
 
 class ReactMixin(object):
@@ -31,6 +32,11 @@ class ReactPageView(OrganizationView, ReactMixin):
     def handle(self, request, **kwargs):
         return self.handle_react(request)
 
+class ReactProjectPageView(ProjectView, ReactMixin):
+    def handle(self, request, organization, team, project, **kwargs):
+        if request.GET.get('installed'):
+            first_event_pending.send(instance=project, user=request.user, sender=self)
+        return self.handle_react(request)
 
 class GenericReactPageView(BaseView, ReactMixin):
     def handle(self, request, **kwargs):
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index cf5315c5e9..f0b15e500a 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -60,7 +60,7 @@ from sentry.web.frontend.project_rule_edit import ProjectRuleEditView
 from sentry.web.frontend.project_rule_remove import ProjectRuleRemoveView
 from sentry.web.frontend.project_settings import ProjectSettingsView
 from sentry.web.frontend.project_tags import ProjectTagsView
-from sentry.web.frontend.react_page import GenericReactPageView, ReactPageView
+from sentry.web.frontend.react_page import GenericReactPageView, ReactPageView, ReactProjectPageView
 from sentry.web.frontend.release_webhook import ReleaseWebhookView
 from sentry.web.frontend.remove_account import RemoveAccountView
 from sentry.web.frontend.remove_organization import RemoveOrganizationView
@@ -369,7 +369,7 @@ urlpatterns += patterns(
     # Keep named URL for for things using reverse
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/issues/(?P<group_id>\d+)/$', react_page_view,
         name='sentry-group'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/$', react_page_view,
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/$', ReactProjectPageView.as_view(),
         name='sentry-stream'),
 
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/(?:group|issues)/(?P<group_id>\d+)/events/(?P<event_id>\d+)/replay/$', ReplayEventView.as_view(),
