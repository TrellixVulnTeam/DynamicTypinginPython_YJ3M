commit 2f2980affb4962e3c339945255a203afd922cd3f
Author: Stephen Cefali <scefali@sentry.io>
Date:   Fri May 1 09:46:28 2020 -0700

    fix(releases): adds repo name in email when cannot fetch commits and better error message (#18532)

diff --git a/src/sentry/integrations/github/integration.py b/src/sentry/integrations/github/integration.py
index 2fea18cbe0..c1f91b2c9f 100644
--- a/src/sentry/integrations/github/integration.py
+++ b/src/sentry/integrations/github/integration.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import re
 from django.utils.text import slugify
 from django.utils.translation import ugettext_lazy as _
 
@@ -127,6 +128,12 @@ class GitHubIntegration(IntegrationInstallation, GitHubIssueBasic, RepositoryMix
     def message_from_error(self, exc):
         if isinstance(exc, ApiError):
             message = API_ERRORS.get(exc.code)
+            if exc.code == 404 and re.search(r"/repos/.*/(compare|commits)", exc.url):
+                message += (
+                    " Please also confirm that the commits associated with the following URL have been pushed to GitHub: %s"
+                    % exc.url
+                )
+
             if message is None:
                 message = exc.json.get("message", "unknown error") if exc.json else "unknown error"
             return "Error Communicating with GitHub (HTTP %s): %s" % (exc.code, message)
diff --git a/src/sentry/shared_integrations/client.py b/src/sentry/shared_integrations/client.py
index 7d4c112736..16050d00da 100644
--- a/src/sentry/shared_integrations/client.py
+++ b/src/sentry/shared_integrations/client.py
@@ -238,9 +238,9 @@ class BaseApiClient(object):
                     self.logger.exception(
                         "request.error", extra={self.integration_type: self.name, "url": full_url}
                     )
-                    raise ApiError("Internal Error")
+                    raise ApiError("Internal Error", url=full_url)
                 self.track_response_data(resp.status_code, span, e)
-                raise ApiError.from_response(resp)
+                raise ApiError.from_response(resp, url=full_url)
 
             self.track_response_data(resp.status_code, span, None, resp)
 
diff --git a/src/sentry/shared_integrations/exceptions.py b/src/sentry/shared_integrations/exceptions.py
index 7f07ff815c..e151b9ec01 100644
--- a/src/sentry/shared_integrations/exceptions.py
+++ b/src/sentry/shared_integrations/exceptions.py
@@ -12,10 +12,11 @@ class ApiError(Exception):
     json = None
     xml = None
 
-    def __init__(self, text, code=None):
+    def __init__(self, text, code=None, url=None):
         if code is not None:
             self.code = code
         self.text = text
+        self.url = url
         self.xml = None
         # TODO(dcramer): pull in XML support from Jira
         if text:
@@ -32,10 +33,10 @@ class ApiError(Exception):
         super(ApiError, self).__init__(text[:1024])
 
     @classmethod
-    def from_response(cls, response):
+    def from_response(cls, response, url=None):
         if response.status_code == 401:
             return ApiUnauthorized(response.text)
-        return cls(response.text, response.status_code)
+        return cls(response.text, response.status_code, url=url)
 
 
 class ApiHostError(ApiError):
diff --git a/src/sentry/tasks/commits.py b/src/sentry/tasks/commits.py
index 9658ae9ea0..ca8b91a57e 100644
--- a/src/sentry/tasks/commits.py
+++ b/src/sentry/tasks/commits.py
@@ -39,8 +39,8 @@ def generate_invalid_identity_email(identity, commit_failure=False):
     )
 
 
-def generate_fetch_commits_error_email(release, error_message):
-    new_context = {"release": release, "error_message": error_message}
+def generate_fetch_commits_error_email(release, repo, error_message):
+    new_context = {"release": release, "error_message": error_message, "repo": repo}
 
     return MessageBuilder(
         subject="Unable to Fetch Commits",
@@ -149,12 +149,12 @@ def fetch_commits(release_id, user_id, refs, prev_release_id=None, **kwargs):
             if isinstance(e, InvalidIdentity) and getattr(e, "identity", None):
                 handle_invalid_identity(identity=e.identity, commit_failure=True)
             elif isinstance(e, (PluginError, InvalidIdentity, IntegrationError)):
-                msg = generate_fetch_commits_error_email(release, six.text_type(e))
+                msg = generate_fetch_commits_error_email(release, repo, six.text_type(e))
                 emails = get_emails_for_user_or_org(user, release.organization_id)
                 msg.send_async(to=emails)
             else:
                 msg = generate_fetch_commits_error_email(
-                    release, "An internal system error occurred."
+                    release, repo, "An internal system error occurred."
                 )
                 emails = get_emails_for_user_or_org(user, release.organization_id)
                 msg.send_async(to=emails)
diff --git a/src/sentry/templates/sentry/emails/unable-to-fetch-commits.html b/src/sentry/templates/sentry/emails/unable-to-fetch-commits.html
index e69b31a484..92b7cd87f1 100644
--- a/src/sentry/templates/sentry/emails/unable-to-fetch-commits.html
+++ b/src/sentry/templates/sentry/emails/unable-to-fetch-commits.html
@@ -2,7 +2,7 @@
 
 {% block main %}
   <h3>Unable to Fetch Commits</h3>
-  <p>We were unable to fetch the commit log for your release (<em>{{ release.version }}</em>) due to the following error:</p>
+  <p>We were unable to fetch the commit log for your release (<em>{{ release.version }}</em>) for repository <em>{{ repo.name }}</em> due to the following error:</p>
   <p>{{ error_message }}</p>
   <p><strong>Troubleshooting &amp; References</strong></p>
   <ul>
diff --git a/src/sentry/web/frontend/debug/debug_unable_to_fetch_commits_email.py b/src/sentry/web/frontend/debug/debug_unable_to_fetch_commits_email.py
index d5f2b5d51e..e36f6588a1 100644
--- a/src/sentry/web/frontend/debug/debug_unable_to_fetch_commits_email.py
+++ b/src/sentry/web/frontend/debug/debug_unable_to_fetch_commits_email.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import, print_function
 
 from django.views.generic import View
 
-from sentry.models import Release
+from sentry.models import Release, Repository
 from sentry.tasks.commits import generate_fetch_commits_error_email
 
 from .mail import MailPreview
@@ -11,8 +11,11 @@ from .mail import MailPreview
 class DebugUnableToFetchCommitsEmailView(View):
     def get(self, request):
         release = Release(version="abcdef")
+        repo = Repository(name="repo_name")
 
-        email = generate_fetch_commits_error_email(release, "An internal server error occurred")
+        email = generate_fetch_commits_error_email(
+            release, repo, "An internal server error occurred"
+        )
         return MailPreview(
             html_template=email.html_template, text_template=email.template, context=email.context
         ).render(request)
diff --git a/tests/sentry/integrations/github/test_integration.py b/tests/sentry/integrations/github/test_integration.py
index 682ec5fc02..a8d9c5a381 100644
--- a/tests/sentry/integrations/github/test_integration.py
+++ b/tests/sentry/integrations/github/test_integration.py
@@ -6,8 +6,9 @@ import sentry
 from sentry.utils.compat.mock import MagicMock
 from six.moves.urllib.parse import urlencode, urlparse
 
+from sentry.shared_integrations.exceptions import ApiError
 from sentry.constants import ObjectStatus
-from sentry.integrations.github import GitHubIntegrationProvider
+from sentry.integrations.github import GitHubIntegrationProvider, API_ERRORS
 from sentry.models import Integration, OrganizationIntegration, Repository, Project
 from sentry.plugins.base import plugins
 from sentry.testutils import IntegrationTestCase
@@ -234,3 +235,23 @@ class GitHubIntegrationTest(IntegrationTestCase):
             {"identifier": "test/example", "name": "example"},
             {"identifier": "test/exhaust", "name": "exhaust"},
         ]
+
+    @responses.activate
+    def test_get_message_from_error(self):
+        self.assert_setup_flow()
+        integration = Integration.objects.get(provider=self.provider.key)
+        installation = integration.get_installation(self.organization)
+        base_error = "Error Communicating with GitHub (HTTP 404): %s" % (API_ERRORS[404])
+        assert (
+            installation.message_from_error(
+                ApiError("Not Found", code=404, url="https://api.github.com/repos/scefali")
+            )
+            == base_error
+        )
+        url = "https://api.github.com/repos/scefali/sentry-integration-example/compare/2adcab794f6f57efa8aa84de68a724e728395792...e208ee2d71e8426522f95efbdae8630fa66499ab"
+        assert (
+            installation.message_from_error(ApiError("Not Found", code=404, url=url))
+            == base_error
+            + " Please also confirm that the commits associated with the following URL have been pushed to GitHub: %s"
+            % url
+        )
