commit 9aadece008278afaa9c10b2acbe8e094eb836421
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Jun 28 11:37:29 2016 -0700

    Don't blow up on unicodes in EventErrors (#3605)
    
    Fixes SENTRY-10S

diff --git a/src/sentry/models/eventerror.py b/src/sentry/models/eventerror.py
index 1c063db34b..699d5d4181 100644
--- a/src/sentry/models/eventerror.py
+++ b/src/sentry/models/eventerror.py
@@ -23,23 +23,23 @@ class EventError(object):
     NATIVE_NO_SYMSYND = 'native_no_symsynd'
 
     _messages = {
-        INVALID_DATA: 'Discarded invalid value for parameter \'{name}\'',
-        INVALID_ATTRIBUTE: 'Discarded invalid parameter \'{name}\'',
-        VALUE_TOO_LONG: 'Discarded value for \'{name}\' due to exceeding maximum length',
-        UNKNOWN_ERROR: 'Unknown error',
-        SECURITY_VIOLATION: 'Cannot fetch resource due to security violation on {url}',
-        RESTRICTED_IP: 'Cannot fetch resource due to restricted IP address on {url}',
-        JS_GENERIC_FETCH_ERROR: 'Unable to fetch resource: {url}',
-        JS_INVALID_HTTP_CODE: 'HTTP returned {value} response on {url}',
-        JS_NO_COLUMN: 'Cannot expand sourcemap due to no column information for {url}',
-        JS_MISSING_SOURCE: 'Source code was not found for {url}',
-        JS_INVALID_SOURCEMAP: 'Sourcemap was invalid or not parseable: {url}',
-        JS_TOO_MANY_REMOTE_SOURCES: 'The maximum number of remote source requests was made',
-        JS_INVALID_SOURCE_ENCODING: 'Source file was not \'{value}\' encoding: {url}',
-        JS_INVALID_SOURCEMAP_LOCATION: 'Invalid location in sourcemap: ({column}, {row})',
-        NATIVE_NO_CRASHED_THREAD: 'No crashed thread found in crash report',
-        NATIVE_INTERNAL_FAILURE: 'Internal failure when attempting to symbolicate: {error}',
-        NATIVE_NO_SYMSYND: 'The symbolizer is not configured for this system.',
+        INVALID_DATA: u'Discarded invalid value for parameter \'{name}\'',
+        INVALID_ATTRIBUTE: u'Discarded invalid parameter \'{name}\'',
+        VALUE_TOO_LONG: u'Discarded value for \'{name}\' due to exceeding maximum length',
+        UNKNOWN_ERROR: u'Unknown error',
+        SECURITY_VIOLATION: u'Cannot fetch resource due to security violation on {url}',
+        RESTRICTED_IP: u'Cannot fetch resource due to restricted IP address on {url}',
+        JS_GENERIC_FETCH_ERROR: u'Unable to fetch resource: {url}',
+        JS_INVALID_HTTP_CODE: u'HTTP returned {value} response on {url}',
+        JS_NO_COLUMN: u'Cannot expand sourcemap due to no column information for {url}',
+        JS_MISSING_SOURCE: u'Source code was not found for {url}',
+        JS_INVALID_SOURCEMAP: u'Sourcemap was invalid or not parseable: {url}',
+        JS_TOO_MANY_REMOTE_SOURCES: u'The maximum number of remote source requests was made',
+        JS_INVALID_SOURCE_ENCODING: u'Source file was not \'{value}\' encoding: {url}',
+        JS_INVALID_SOURCEMAP_LOCATION: u'Invalid location in sourcemap: ({column}, {row})',
+        NATIVE_NO_CRASHED_THREAD: u'No crashed thread found in crash report',
+        NATIVE_INTERNAL_FAILURE: u'Internal failure when attempting to symbolicate: {error}',
+        NATIVE_NO_SYMSYND: u'The symbolizer is not configured for this system.',
     }
 
     @classmethod
diff --git a/tests/sentry/api/serializers/test_event.py b/tests/sentry/api/serializers/test_event.py
new file mode 100644
index 0000000000..e246d698ba
--- /dev/null
+++ b/tests/sentry/api/serializers/test_event.py
@@ -0,0 +1,31 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.api.serializers import serialize
+from sentry.testutils import TestCase
+from sentry.models import EventError
+
+
+class EventSerializerTest(TestCase):
+    def test_simple(self):
+        event = self.create_event(event_id='a')
+
+        result = serialize(event)
+        assert result['id'] == str(event.id)
+        assert result['eventID'] == 'a'
+
+    def test_eventerror(self):
+        event = self.create_event(data={
+            'errors': [{
+                'type': EventError.INVALID_DATA,
+                'name': u'ü',
+            }],
+        })
+
+        result = serialize(event)
+        assert len(result['errors']) == 1
+        assert 'data' in result['errors'][0]
+        assert result['errors'][0]['type'] == EventError.INVALID_DATA
+        assert u'ü' in result['errors'][0]['message']
+        assert result['errors'][0]['data'] == {'name': u'ü'}
