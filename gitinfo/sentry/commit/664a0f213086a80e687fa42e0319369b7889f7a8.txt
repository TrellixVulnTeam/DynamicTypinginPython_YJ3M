commit 664a0f213086a80e687fa42e0319369b7889f7a8
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Apr 27 14:36:49 2011 -0700

    Ensure we're truncating list types so we dont end up with super massive data structures

diff --git a/CHANGES b/CHANGES
index e5bd990c80..2729bb33b4 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,3 +1,15 @@
+1.7.2
+
+* All strings, lists, tuples, and sets are now shortened before sending
+  to the server. Iterable data structures are truncated to the first
+  50 items, and strings are truncated to the first 200 characters.
+  
+  Both shorteners have configurable values in the settings.
+
+1.7.1
+
+* Fixed a bug that slipped through with blocktrans usage.
+
 1.7.0
 
 * Added ``score`` to ``GroupedMessage`` (schema change).
diff --git a/docs/config.rst b/docs/config.rst
index 42432d5fa5..20f306e18e 100644
--- a/docs/config.rst
+++ b/docs/config.rst
@@ -278,3 +278,16 @@ SENTRY_INCLUDE_PATHS
 ####################
 
 By default Sentry only looks at modules in INSTALLED_APPS for drilling down where an exception is located
+
+######################
+SENTRY_MAX_LENGTH_LIST
+######################
+
+The maximum number of items a list-like container should store. Defaults to 50.
+
+########################
+SENTRY_MAX_LENGTH_STRING
+########################
+
+The maximum characters of a string that should be stored. Defaults to 200.
+
diff --git a/sentry/client/base.py b/sentry/client/base.py
index d7e1a3461c..89ba75d6f1 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -19,7 +19,7 @@ from django.views.debug import ExceptionReporter
 
 from sentry import conf
 from sentry.helpers import construct_checksum, varmap, transform, get_installed_apps, urlread, force_unicode, \
-                           get_versions
+                           get_versions, shorten
 
 logger = logging.getLogger('sentry.errors')
 
@@ -65,6 +65,12 @@ class SentryClient(object):
         versions = get_versions()
         kwargs['data']['__sentry__']['versions'] = versions
 
+        # Shorten lists/strings
+        for k, v in kwargs['data'].iteritems():
+            if k == '__sentry__':
+                continue
+            kwargs['data'][k] = shorten(v)
+
         if kwargs.get('view'):
             # get list of modules from right to left
             parts = kwargs['view'].split('.')
@@ -210,12 +216,6 @@ class SentryClient(object):
 
         exc_type, exc_value, exc_traceback = exc_info
 
-        def shorten(var):
-            var = transform(var)
-            if isinstance(var, basestring) and len(var) > 200:
-                var = var[:200] + '...'
-            return var
-
         reporter = ExceptionReporter(None, exc_type, exc_value, exc_traceback)
         frames = varmap(shorten, reporter.get_traceback_frames())
 
diff --git a/sentry/conf.py b/sentry/conf.py
index dd5f770467..8097d91600 100644
--- a/sentry/conf.py
+++ b/sentry/conf.py
@@ -84,4 +84,7 @@ PUBLIC = getattr(settings, 'SENTRY_PUBLIC', False)
 # Absolute URL to the sentry static directory. Should not include a trailing slash.
 STATIC_URL_PREFIX = getattr(settings, 'SENTRY_STATIC_URL_PREFIX', URL_PREFIX + '/_static')
 
-ROOT = os.path.normpath(os.path.dirname(__file__))
\ No newline at end of file
+ROOT = os.path.normpath(os.path.dirname(__file__))
+
+MAX_LENGTH_LIST = getattr(settings, 'SENTRY_MAX_LENGTH_LIST', 50)
+MAX_LENGTH_STRING = getattr(settings, 'SENTRY_MAX_LENGTH_STRING', 200)
\ No newline at end of file
diff --git a/sentry/helpers.py b/sentry/helpers.py
index 0f9d6013a9..58821dd1b8 100644
--- a/sentry/helpers.py
+++ b/sentry/helpers.py
@@ -213,3 +213,14 @@ def get_versions(module_list=None):
             version = '.'.join(str(o) for o in version)
         versions[module_name] = version
     return versions
+
+def shorten(var):
+    var = transform(var)
+    if isinstance(var, basestring) and len(var) > conf.MAX_LENGTH_STRING:
+        var = var[:conf.MAX_LENGTH_STRING] + '...'
+    elif isinstance(var, (list, tuple, set, frozenset)) and len(var) > conf.MAX_LENGTH_LIST:
+        # TODO: we should write a real API for storing some metadata with vars when
+        # we get around to doing ref storage
+        # TODO: when we finish the above, we should also implement this for dicts
+        var = list(var)[:conf.MAX_LENGTH_LIST] + ['...', '(%d more elements)' % (len(var) - conf.MAX_LENGTH_LIST,)]
+    return var
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index b6b9f88050..1dee45aa77 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -749,6 +749,22 @@ class SentryTestCase(TestCase):
         group = GroupedMessage.objects.get()
         self.assertTrue(group.score > 0, group.score)
 
+    def testShortenLists(self):
+        logger = logging.getLogger()
+
+        self.setUpHandler()
+
+        logger.error('This is a test %s', 'error', extra={'data': {
+            'list': [1]*50,
+        }})
+        self.assertEquals(Message.objects.count(), 1)
+        self.assertEquals(GroupedMessage.objects.count(), 1)
+        last = Message.objects.get()
+        self.assertTrue('list' in last.data)
+        self.assertEquals(len(last.data['list']), 22) # 20 + 2 extra ele
+        self.assertEquals(last.data['list'][-2], '...')
+        self.assertEquals(last.data['list'][-1], '(30 more elements)')
+
 class SentryViewsTest(TestCase):
     urls = 'sentry.tests.urls'
     fixtures = ['sentry/tests/fixtures/views.json']
diff --git a/setup.py b/setup.py
index 2c0650c3e8..ba48eca959 100644
--- a/setup.py
+++ b/setup.py
@@ -17,7 +17,7 @@ tests_require = [
 
 setup(
     name='django-sentry',
-    version='1.7.1',
+    version='1.7.2',
     author='David Cramer',
     author_email='dcramer@gmail.com',
     url='http://github.com/dcramer/django-sentry',
