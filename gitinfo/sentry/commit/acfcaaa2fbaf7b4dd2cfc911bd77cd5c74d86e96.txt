commit acfcaaa2fbaf7b4dd2cfc911bd77cd5c74d86e96
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri Oct 9 17:58:38 2015 +0200

    Render breadcrumbs

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 648fe89393..37bc871c26 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -696,7 +696,7 @@ SENTRY_INTERFACES = {
     'user': 'sentry.interfaces.user.User',
     'csp': 'sentry.interfaces.csp.Csp',
     'applecrashreport': 'sentry.interfaces.applecrash.AppleCrashReport',
-
+    'breadcrumbs': 'sentry.interfaces.breadcrumbs.Breadcrumbs',
     'sentry.interfaces.Exception': 'sentry.interfaces.exception.Exception',
     'sentry.interfaces.Message': 'sentry.interfaces.message.Message',
     'sentry.interfaces.Stacktrace': 'sentry.interfaces.stacktrace.Stacktrace',
@@ -706,6 +706,7 @@ SENTRY_INTERFACES = {
     'sentry.interfaces.User': 'sentry.interfaces.user.User',
     'sentry.interfaces.Csp': 'sentry.interfaces.csp.Csp',
     'sentry.interfaces.AppleCrashReport': 'sentry.interfaces.applecrash.AppleCrashReport',
+    'sentry.interfaces.Breadcrumbs': 'sentry.interfaces.breadcrumbs.Breadcrumbs',
 }
 
 # Should users without superuser permissions be allowed to
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index e4181ecab9..ffeb5a9c3a 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -30,17 +30,18 @@ const EventEntries = React.createClass({
     };
   },
 
-  shouldComponentUpdate(nextProps, nextState) {
-    return this.props.event.id !== nextProps.event.id;
-  },
-
   // TODO(dcramer): make this extensible
   interfaces: {
-    exception: require('./interfaces/exception'),
-    request: require('./interfaces/request'),
-    stacktrace: require('./interfaces/stacktrace'),
-    template: require('./interfaces/template'),
+    exception: require("./interfaces/exception"),
+    request: require("./interfaces/request"),
+    stacktrace: require("./interfaces/stacktrace"),
+    template: require("./interfaces/template"),
     csp: require('./interfaces/csp'),
+    breadcrumbs: require("./interfaces/breadcrumbs")
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    return this.props.event.id !== nextProps.event.id;
   },
 
   render(){
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumb-components/classifier.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumb-components/classifier.jsx
new file mode 100644
index 0000000000..c9f776daa0
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumb-components/classifier.jsx
@@ -0,0 +1,33 @@
+import React from "react";
+
+var Classifier = React.createClass({
+  propTypes: {
+    value: React.PropTypes.string.isRequired,
+    prefix: React.PropTypes.string,
+    title: React.PropTypes.string,
+  },
+
+  render() {
+    var value = this.props.value;
+    if (!value) {
+      value = 'generic';
+    } else if (this.props.prefix) {
+      if (value.substr(0, this.props.prefix.length + 1) == this.props.prefix + '.') {
+        value = value.substr(this.props.prefix.length + 1);
+      } else if (value == this.props.prefix) {
+        value = 'generic';
+      }
+    }
+    var title = this.props.title;
+    if (title) {
+      title = title.replace('%s', value);
+    } else {
+      title = value;
+    }
+    return (
+      <span className="crumb-classifier">({title})</span>
+    );
+  }
+});
+
+export default Classifier;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumb-components/message.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumb-components/message.jsx
new file mode 100644
index 0000000000..8f558342b2
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumb-components/message.jsx
@@ -0,0 +1,20 @@
+import React from "react";
+
+var MessageCrumbComponent = React.createClass({
+  propTypes: {
+    data: React.PropTypes.object.isRequired,
+  },
+
+  render() {
+    var data = this.props.data;
+    return (
+      <p>
+        {data.level ? <span className="level">{data.level}</span> : null}
+        {' ' + data.message + ' '}
+        {data.logger ? <span className="logger">[{data.logger}]</span> : null}
+      </p>
+    );
+  }
+});
+
+export default MessageCrumbComponent;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumb-components/query.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumb-components/query.jsx
new file mode 100644
index 0000000000..e818fc2ce8
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumb-components/query.jsx
@@ -0,0 +1,21 @@
+import React from "react";
+
+import Classifier from "./classifier";
+
+var QueryCrumbComponent = React.createClass({
+  propTypes: {
+    data: React.PropTypes.object.isRequired,
+  },
+
+  render() {
+    var data = this.props.data;
+    return (
+      <p>
+        <strong>Query:</strong> <code>{data.query}</code>
+        <Classifier value={data.classifier} title="%s query" prefix="query" />
+      </p>
+    );
+  }
+});
+
+export default QueryCrumbComponent;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumb-components/rpc.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumb-components/rpc.jsx
new file mode 100644
index 0000000000..58b9513e80
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumb-components/rpc.jsx
@@ -0,0 +1,21 @@
+import React from "react";
+
+import Classifier from "./classifier";
+
+var RpcCrumbComponent = React.createClass({
+  propTypes: {
+    data: React.PropTypes.object.isRequired,
+  },
+
+  render() {
+    var data = this.props.data;
+    return (
+      <p>
+        <strong>Call to</strong> <code>{data.endpoint}</code>
+        <Classifier value={data.classifier} prefix="rpc" title="%s call"/>
+      </p>
+    );
+  }
+});
+
+export default RpcCrumbComponent;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
new file mode 100644
index 0000000000..a07d3d6f8a
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
@@ -0,0 +1,77 @@
+import React from "react";
+import GroupEventDataSection from "../eventDataSection";
+import PropTypes from "../../../proptypes";
+
+import TimeSince from "../../../components/timeSince";
+
+import MessageCrumbComponent from "./breadcrumb-components/message";
+import RpcCrumbComponent from "./breadcrumb-components/rpc";
+import QueryCrumbComponent from "./breadcrumb-components/query";
+
+
+const crumbComponents = {
+  message: MessageCrumbComponent,
+  rpc: RpcCrumbComponent,
+  query: QueryCrumbComponent,
+};
+
+
+var BreadcrumbsInterface = React.createClass({
+  propTypes: {
+    group: PropTypes.Group.isRequired,
+    event: PropTypes.Event.isRequired,
+    type: React.PropTypes.string.isRequired,
+    data: React.PropTypes.object.isRequired,
+    isShare: React.PropTypes.bool
+  },
+
+  contextTypes: {
+    organization: PropTypes.Organization,
+    project: PropTypes.Project
+  },
+
+  render() {
+    var group = this.props.group;
+    var evt = this.props.event;
+    var data = this.props.data;
+
+    var title = (
+      <div>
+        <h3>
+          <strong>Breadcrums</strong>{' '}
+          <small>(significant events that lead up to this)</small>
+        </h3>
+      </div>
+    );
+
+    var crumbs = data.items.map((item, idx) => {
+      var Component = crumbComponents[item.type];
+      var el;
+      if (Component) {
+        el = <Component data={item.data} />;
+      } else {
+        el = <div className="errors">Missing crumb "{item.type}"</div>;
+      }
+      var ts = new Date(item.timestamp);
+      return (
+        <li key={idx} className={'crumb crumb-' + item.type}>
+          <TimeSince date={ts} />
+          {el}
+        </li>
+      );
+    });
+
+    return (
+      <GroupEventDataSection
+          group={group}
+          event={evt}
+          type={this.props.type}
+          title={title}
+          wrapTitle={false}>
+        <ul className="crumbs">{crumbs}</ul>
+      </GroupEventDataSection>
+    );
+  }
+});
+
+export default BreadcrumbsInterface;
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 06afb9420a..eea73824bc 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1488,6 +1488,68 @@ pre.val, span.val {
   }
 }
 
+/**
+* Breadcrumbs
+* ============================================================================
+*/
+ul.crumbs {
+  list-style: none;
+  margin: 0 0 20px 0;
+  padding: 0;
+  font-size: 13px;
+
+  li {
+    margin: 0;
+    border: 1px solid lighten(@trim, 6);
+    padding: 2px 8px;
+
+    + li {
+      border-top: none;
+    }
+
+    p {
+      margin: 0;
+      padding: 0;
+    }
+
+    time {
+      float: right;
+      font-size: 11px;
+      font-weight: bold;
+    }
+
+    span.crumb-classifier {
+      font-style: italic;
+      padding-left: 10px;
+      font-size: 11px;
+    }
+
+    &.crumb-query {
+      background: lighten(@orange, 42);
+    }
+
+    &.crumb-rpc {
+      background: lighten(@blue, 42);
+    }
+
+    &.crumb-message {
+      span.level {
+        font-weight: bold;
+        text-transform: capitalize;
+      }
+      span.level:after {
+        content: ": ";
+      }
+      span.logger {
+        font-size: 11px;
+        padding-left: 10px;
+        color: @blue;
+      }
+    }
+  }
+}
+
+
 /**
 * Responsive medium screen
 * ============================================================================
