commit 43e49e6309a08341d831ebdb4614c4a57f693f8a
Author: tracehelms <tracehelms@gmail.com>
Date:   Thu Jul 9 14:43:39 2015 -0600

    Maintain query filters
    
    We refactored the StreamFilters components so the current search query
    state is maintained when interacting with the different search objects.
    The FilterSelectLinks and the SearchBar work independent of each other
    and their values are combined for each query.
    
    Clearing the search via the SearchBar via the "cancel search" button
    also clears out the query.
    
    We also added test coverage for Filters, FilterSelectLink, and
    SearchBar.

diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 177094534e..82143a8822 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -29,6 +29,12 @@ var Stream = React.createClass({
     setProjectNavSection: React.PropTypes.func.isRequired
   },
 
+  getDefaultProps() {
+    return {
+      defaultQuery: "is:unresolved"
+    };
+  },
+
   getInitialState() {
     return {
       groupIds: [],
@@ -125,6 +131,9 @@ var Stream = React.createClass({
     var params = router.getCurrentParams();
     var queryParams = router.getCurrentQuery();
     queryParams.limit = 50;
+    if (!queryParams.hasOwnProperty("query")) {
+      queryParams.query = this.props.defaultQuery;
+    }
     var querystring = $.param(queryParams);
 
     return '/projects/' + params.orgId + '/' + params.projectId + '/groups/?' + querystring;
@@ -216,10 +225,15 @@ var Stream = React.createClass({
   render() {
     var router = this.context.router;
     var params = router.getCurrentParams();
+    var query = this.props.defaultQuery;
+
+    if (params.hasOwnProperty("query")) {
+      query = params.query;
+    }
 
     return (
       <div>
-        <StreamFilters />
+        <StreamFilters defaultQuery={query} />
         <div className="group-header">
           <StreamActions
             orgId={params.orgId}
diff --git a/src/sentry/static/sentry/app/views/stream/filterSelectLink.jsx b/src/sentry/static/sentry/app/views/stream/filterSelectLink.jsx
new file mode 100644
index 0000000000..b33b238108
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/stream/filterSelectLink.jsx
@@ -0,0 +1,36 @@
+var React = require("react");
+
+var FilterSelectLink = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  propTypes: {
+    label: React.PropTypes.string,
+    onSelect: React.PropTypes.func,
+    extraClass: React.PropTypes.string
+  },
+
+  onSelect() {
+    if (this.props.onSelect) {
+      this.props.onSelect();
+    }
+  },
+
+  render() {
+    var className = this.props.extraClass;
+    className += ' btn btn-default';
+
+    if (this.props.isActive) {
+      className += ' active';
+    }
+
+    return (
+      <a className={className} onClick={this.onSelect}>
+        {this.props.label}
+      </a>
+    );
+  }
+});
+
+module.exports = FilterSelectLink;
diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/stream/filters.jsx
index e3727cb014..80643f084c 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filters.jsx
@@ -1,226 +1,29 @@
 var React = require("react");
-var Router = require("react-router");
 var $ = require("jquery");
 var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
 
+var FilterSelectLink = require("./filterSelectLink");
+var SearchBar = require("./searchBar");
 var utils = require("../../utils");
 
-var SearchDropdown = React.createClass({
+var StreamFilters = React.createClass({
   mixins: [PureRenderMixin],
 
-  propTypes: {
-    dropdownVisible: React.PropTypes.bool
-  },
-
-  getDefaultProps() {
-    return {
-      dropdownVisible: false
-    };
-  },
-
-  render() {
-    var style = {
-      display: this.props.dropdownVisible ? 'block' : 'none'
-    };
-
-    return (
-      <div className="search-dropdown" style={style}>
-        <ul className="nav nav-tabs nav-tabs-xs">
-          <li className="active"><a href="#">Search Options</a></li>
-          <li><a href="#">Saved Searches</a></li>
-        </ul>
-        <ul className="search-helper search-autocomplete-list">
-          <li className="search-autocomplete-item">
-            <span className="icon icon-tag"></span>
-            <h4>Tag - <span className="search-description">key/value pair associated to an event</span></h4>
-            <p className="search-example">browser:"Chrome 34"</p>
-          </li>
-          <li className="search-autocomplete-item">
-            <span className="icon icon-toggle"></span>
-            <h4>Status - <span className="search-description">State of an event</span></h4>
-            <p className="search-example">is:resolved, unresolved, muted</p>
-          </li>
-          <li className="search-autocomplete-item">
-            <span className="icon icon-user"></span>
-            <h4>Assigned - <span className="search-description">team member assigned to an event</span></h4>
-            <p className="search-example">assigned:[me|user@example.com]</p>
-          </li>
-          <li className="search-autocomplete-item">
-            <span className="icon"><strong>#</strong></span>
-            <h4><span className="search-description">or paste an event id to jump straight to it</span></h4>
-          </li>
-        </ul>
-        <ul className="search-saved-searches search-autocomplete-list hidden">
-          <li className="search-autocomplete-item">
-            <a className="pull-right remove-saved-search">
-              <span className="icon icon-trash"></span>
-            </a>
-            <span className="icon icon-search"></span>
-            <h4>os:"Mac OS X 10.8", browser:"Chrome 31"</h4>
-          </li>
-          <li className="search-autocomplete-item">
-            <a className="pull-right remove-saved-search">
-              <span className="icon icon-trash"></span>
-            </a>
-            <span className="icon icon-search"></span>
-            <h4>status:unresolved, assigned:me</h4>
-          </li>
-          <li className="search-autocomplete-item">
-            <a className="pull-right remove-saved-search">
-              <span className="icon icon-trash"></span>
-            </a>
-            <span className="icon icon-search"></span>
-            <h4>server:"web-1", server:"web-2", server:"web-3"</h4>
-          </li>
-        </ul>
-      </div>
-    );
-  }
-});
-
-var SearchBar = React.createClass({
   contextTypes: {
     router: React.PropTypes.func
   },
 
-  mixins: [PureRenderMixin],
-
-  getInitialState() {
-    var router = this.context.router;
-    var queryParams = router.getCurrentQuery();
-
-    var query = (typeof queryParams.query === 'undefined' ?
-      'is:unresolved' :
-      queryParams.query);
-
+  getDefaultProps() {
     return {
-      dropdownVisible: false,
-      query: query
+      defaultQuery: ""
     };
   },
 
-  onSubmit(event) {
-    var router = this.context.router;
-    var queryParams = router.getCurrentQuery();
-
-    queryParams.query = this.state.query;
-
-    event.preventDefault();
-
-    this.refs.searchInput.getDOMNode().blur();
-
-    router.transitionTo('stream', router.getCurrentParams(), queryParams);
-  },
-
-  clearSearch() {
-    var router = this.context.router;
-    var queryParams = router.getCurrentQuery();
-
-    queryParams.query = '';
-
-    router.transitionTo('stream', router.getCurrentParams(), queryParams);
-
-    this.setState({query: ''});
-  },
-
-  onQueryFocus() {
-    this.setState({
-      dropdownVisible: true
-    });
-  },
-
-  onQueryBlur() {
-    this.setState({
-      dropdownVisible: false
-    });
-  },
-
-  onQueryChange() {
-    this.setState({
-      query: event.target.value
-    });
-  },
-
-  render() {
-    return (
-      <div className="search">
-        <form className="form-horizontal" onSubmit={this.onSubmit}>
-          <div>
-            <input type="text" className="search-input form-control"
-                   placeholder="Search for events, users, tags, and everything else."
-                   name="query"
-                   ref="searchInput"
-                   autoComplete="off"
-                   value={this.state.query}
-                   onFocus={this.onQueryFocus}
-                   onBlur={this.onQueryBlur}
-                   onChange={this.onQueryChange} />
-            <span className="icon-search" />
-            {this.state.query !== '' &&
-              <div>
-                <a className="search-save-search btn btn-xs btn-default">Save</a>
-                <a className="search-clear-form" onClick={this.clearSearch}>
-                  <span className="icon-close" />
-                </a>
-              </div>
-            }
-          </div>
-          <SearchDropdown dropdownVisible={this.state.dropdownVisible} />
-        </form>
-      </div>
-    );
-  }
-});
-
-var FilterSelectLink = React.createClass({
-  contextTypes: {
-    router: React.PropTypes.func
-  },
-
-  propTypes: {
-    query: React.PropTypes.object.isRequired
-  },
-
-  render() {
-    var router = this.context.router;
-    var queryParams = router.getCurrentQuery();
-    var params = router.getCurrentParams();
-    var className = this.props.extraClass;
-    className += ' btn btn-default';
-
-    if (this.props.isActive) {
-      className += ' active';
-    }
-
-    // whitelist relevant params
-    var finalQueryParams = $.extend({
-      query: queryParams.query,
-      sort: queryParams.sort
-    }, this.props.query);
-
-    return (
-      <Router.Link
-          to="stream"
-          activeClassName=""
-          params={params}
-          query={finalQueryParams}
-          className={className}>
-        {this.props.label}
-      </Router.Link>
-    );
-  }
-});
-
-var StreamFilters = React.createClass({
-  mixins: [PureRenderMixin],
-
-  contextTypes: {
-    router: React.PropTypes.func
-  },
-
   getInitialState() {
     return {
-      activeButton: null
+      activeButton: null,
+      query: this.props.defaultQuery,
+      filter: ""
     };
   },
 
@@ -253,6 +56,36 @@ var StreamFilters = React.createClass({
     return activeButton;
   },
 
+  onSearch(query) {
+    this.setState({
+      query: query
+    }, function() {
+      this.transitionTo();
+    });
+  },
+
+  onFilterChange(filter) {
+    this.setState({
+      filter: filter
+    }, function() {
+      this.transitionTo();
+    });
+  },
+
+  transitionTo() {
+    var router = this.context.router;
+    var queryParams = {};
+
+    for (var prop in this.state.filter) {
+      queryParams[prop] = this.state.filter[prop];
+    }
+    if (this.state.query !== this.props.defaultQuery) {
+      queryParams.query = this.state.query;
+    }
+
+    router.transitionTo('stream', router.getCurrentParams(), queryParams);
+  },
+
   render() {
     var activeButton = this.state.activeButton;
     return (
@@ -261,21 +94,21 @@ var StreamFilters = React.createClass({
           <div className="col-sm-4 primary-filters">
             <div className="btn-group btn-group-justified">
               <FilterSelectLink label="All Events"
-                                query={{}}
                                 isActive={activeButton === 'all'}
+                                onSelect={this.onFilterChange.bind(this, {})}
                                 extraClass="btn-all-events" />
               <FilterSelectLink label="Bookmarks"
-                                query={{bookmarks: '1'}}
                                 isActive={activeButton === 'bookmarks'}
+                                onSelect={this.onFilterChange.bind(this, {bookmarks: "1"})}
                                 extraClass="btn-middle btn-bookmarks" />
               <FilterSelectLink label="Assigned"
-                                query={{assigned: '1'}}
                                 isActive={activeButton === 'assigned'}
+                                onSelect={this.onFilterChange.bind(this, {assigned: "1"})}
                                 extraClass="btn-assigned" />
             </div>
           </div>
           <div className="col-sm-8">
-            <SearchBar />
+            <SearchBar onSearch={this.onSearch} defaultQuery={this.state.query} />
           </div>
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
new file mode 100644
index 0000000000..08a6db5f1a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -0,0 +1,90 @@
+var React = require("react");
+var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
+
+var SearchDropdown = require("./searchDropdown");
+
+var SearchBar = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  mixins: [PureRenderMixin],
+
+  getDefaultProps() {
+    return {
+      defaultQuery: "",
+      onSearch: function() {}
+    };
+  },
+
+  getInitialState() {
+    return {
+      dropdownVisible: false,
+      query: this.props.defaultQuery
+    };
+  },
+
+  onSubmit(event) {
+    event.preventDefault();
+    this.refs.searchInput.getDOMNode().blur();
+    this.props.onSearch(this.state.query);
+  },
+
+  clearSearch() {
+    this.setState({
+      query: ''
+    }, function() {
+      this.props.onSearch(this.state.query);
+    });
+  },
+
+  onQueryFocus() {
+    this.setState({
+      dropdownVisible: true
+    });
+  },
+
+  onQueryBlur() {
+    this.setState({
+      dropdownVisible: false
+    });
+  },
+
+  onQueryChange(event) {
+    this.setState({
+      query: event.target.value
+    });
+  },
+
+  render() {
+    return (
+      <div className="search">
+        <form className="form-horizontal" ref="searchForm" onSubmit={this.onSubmit}>
+          <div>
+            <input type="text" className="search-input form-control"
+                   placeholder="Search for events, users, tags, and everything else."
+                   name="query"
+                   ref="searchInput"
+                   autoComplete="off"
+                   value={this.state.query}
+                   onFocus={this.onQueryFocus}
+                   onBlur={this.onQueryBlur}
+                   onChange={this.onQueryChange} />
+            <span className="icon-search" />
+            {this.state.query !== '' &&
+              <div>
+                <a className="search-save-search btn btn-xs btn-default">Save</a>
+                <a className="search-clear-form" onClick={this.clearSearch}>
+                  <span className="icon-close" />
+                </a>
+              </div>
+            }
+          </div>
+          <SearchDropdown dropdownVisible={this.state.dropdownVisible} />
+        </form>
+      </div>
+    );
+  }
+});
+
+module.exports = SearchBar;
diff --git a/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx b/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
new file mode 100644
index 0000000000..ffa9a118fa
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
@@ -0,0 +1,77 @@
+var React = require("react");
+var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
+
+var SearchDropdown = React.createClass({
+  mixins: [PureRenderMixin],
+
+  propTypes: {
+    dropdownVisible: React.PropTypes.bool
+  },
+
+  getDefaultProps() {
+    return {
+      dropdownVisible: false
+    };
+  },
+
+  render() {
+    var style = {
+      display: this.props.dropdownVisible ? 'block' : 'none'
+    };
+
+    return (
+      <div className="search-dropdown" style={style}>
+        <ul className="nav nav-tabs nav-tabs-xs">
+          <li className="active"><a href="#">Search Options</a></li>
+          <li><a href="#">Saved Searches</a></li>
+        </ul>
+        <ul className="search-helper search-autocomplete-list">
+          <li className="search-autocomplete-item">
+            <span className="icon icon-tag"></span>
+            <h4>Tag - <span className="search-description">key/value pair associated to an event</span></h4>
+            <p className="search-example">browser:"Chrome 34"</p>
+          </li>
+          <li className="search-autocomplete-item">
+            <span className="icon icon-toggle"></span>
+            <h4>Status - <span className="search-description">State of an event</span></h4>
+            <p className="search-example">is:resolved, unresolved, muted</p>
+          </li>
+          <li className="search-autocomplete-item">
+            <span className="icon icon-user"></span>
+            <h4>Assigned - <span className="search-description">team member assigned to an event</span></h4>
+            <p className="search-example">assigned:[me|user@example.com]</p>
+          </li>
+          <li className="search-autocomplete-item">
+            <span className="icon"><strong>#</strong></span>
+            <h4><span className="search-description">or paste an event id to jump straight to it</span></h4>
+          </li>
+        </ul>
+        <ul className="search-saved-searches search-autocomplete-list hidden">
+          <li className="search-autocomplete-item">
+            <a className="pull-right remove-saved-search">
+              <span className="icon icon-trash"></span>
+            </a>
+            <span className="icon icon-search"></span>
+            <h4>os:"Mac OS X 10.8", browser:"Chrome 31"</h4>
+          </li>
+          <li className="search-autocomplete-item">
+            <a className="pull-right remove-saved-search">
+              <span className="icon icon-trash"></span>
+            </a>
+            <span className="icon icon-search"></span>
+            <h4>status:unresolved, assigned:me</h4>
+          </li>
+          <li className="search-autocomplete-item">
+            <a className="pull-right remove-saved-search">
+              <span className="icon icon-trash"></span>
+            </a>
+            <span className="icon icon-search"></span>
+            <h4>server:"web-1", server:"web-2", server:"web-3"</h4>
+          </li>
+        </ul>
+      </div>
+    );
+  }
+});
+
+module.exports = SearchDropdown;
diff --git a/tests/js/spec/views/stream/filterSelectLink.spec.js b/tests/js/spec/views/stream/filterSelectLink.spec.js
new file mode 100644
index 0000000000..627fb4c7e7
--- /dev/null
+++ b/tests/js/spec/views/stream/filterSelectLink.spec.js
@@ -0,0 +1,53 @@
+var React = require("react/addons");
+
+var FilterSelectLink = require("app/views/stream/filterSelectLink");
+var stubReactComponents = require("../../../helpers/stubReactComponent");
+
+var TestUtils = React.addons.TestUtils;
+var findWithClass = TestUtils.findRenderedDOMComponentWithClass;
+var findWithType = TestUtils.findRenderedComponentWithType;
+
+describe("FilterSelectLink", function() {
+
+  beforeEach(function() {
+    this.sandbox = sinon.sandbox.create();
+    this.wrapper = TestUtils.renderIntoDocument(<FilterSelectLink />);
+  });
+
+  afterEach(function() {
+    this.sandbox.restore();
+  });
+
+  describe("render()", function() {
+
+    it("shows a button", function(){
+      var expected = findWithClass(this.wrapper, "btn");
+      expect(expected).to.be.ok;
+    });
+
+    it("shows active state when passed isActive=true", function(){
+      this.wrapper = TestUtils.renderIntoDocument(<FilterSelectLink isActive={true} />);
+      var expected = findWithClass(this.wrapper, "active");
+      expect(expected).to.be.ok;
+    });
+
+    it("doesn't show active state when passed isActive=false", function(){
+      var wrapper = TestUtils.renderIntoDocument(<FilterSelectLink isActive={false} />);
+      function findActive() {
+        findWithClass(wrapper, "active");
+      }
+      expect(findActive).to.throw();
+    });
+
+
+    it("calls onSelect() when clicked", function(){
+      var onSelect = this.sandbox.spy();
+      this.wrapper = TestUtils.renderIntoDocument(<FilterSelectLink onSelect={onSelect} />);
+      TestUtils.Simulate.click(this.wrapper.getDOMNode());
+
+      expect(onSelect.called).to.be.true;
+    });
+
+  });
+
+});
diff --git a/tests/js/spec/views/stream/filters.spec.js b/tests/js/spec/views/stream/filters.spec.js
new file mode 100644
index 0000000000..3342e05583
--- /dev/null
+++ b/tests/js/spec/views/stream/filters.spec.js
@@ -0,0 +1,76 @@
+var React = require("react/addons");
+
+var FilterSelectLink = require("app/views/stream/filterSelectLink");
+var SearchBar = require("app/views/stream/searchBar");
+var StreamFilters = require("app/views/stream/filters");
+var stubReactComponents = require("../../../helpers/stubReactComponent");
+var stubRouterContext = require("../../../helpers/stubRouterContext");
+
+var TestUtils = React.addons.TestUtils;
+
+describe("StreamFilters", function() {
+
+  beforeEach(function() {
+    this.sandbox = sinon.sandbox.create();
+    stubReactComponents(this.sandbox, [FilterSelectLink, SearchBar]);
+  });
+
+  afterEach(function() {
+    this.sandbox.restore();
+  });
+
+  describe("transitionTo()", function() {
+
+    it("calls router.transitionTo() with correct params", function(){
+      var stubTransitionTo = this.sandbox.spy();
+      var Element = stubRouterContext(StreamFilters, {}, {
+        getCurrentParams() {
+          return {};
+        },
+        getCurrentQuery() {
+          return {};
+        },
+        transitionTo: stubTransitionTo
+      });
+      var wrapper = TestUtils.renderIntoDocument(<Element />);
+
+      wrapper.refs.stub.setState({
+        filter: {
+          bookmarks: "1"
+        },
+        query: "is:resolved"
+      });
+
+      wrapper.refs.stub.transitionTo();
+      var expected = {
+        bookmarks: "1",
+        query: "is:resolved"
+      };
+
+      expect(stubTransitionTo.calledWith("stream", {}, expected)).to.be.true;
+    });
+
+    it("omits query if equal to the default query", function(){
+      var stubTransitionTo = this.sandbox.spy();
+      var Element = stubRouterContext(StreamFilters, {
+        defaultQuery: {
+          query: "is:unresolved"
+        }
+      }, {
+        getCurrentParams() {
+          return {};
+        },
+        getCurrentQuery() {
+          return {};
+        },
+        transitionTo: stubTransitionTo
+      });
+      var wrapper = TestUtils.renderIntoDocument(<Element />);
+
+      wrapper.refs.stub.transitionTo();
+      expect(stubTransitionTo.calledWith("stream", {}, {})).to.be.true;
+    });
+
+  });
+
+});
diff --git a/tests/js/spec/views/stream/searchBar.spec.js b/tests/js/spec/views/stream/searchBar.spec.js
new file mode 100644
index 0000000000..542cfdccb5
--- /dev/null
+++ b/tests/js/spec/views/stream/searchBar.spec.js
@@ -0,0 +1,109 @@
+var React = require("react/addons");
+
+var SearchBar = require("app/views/stream/searchBar");
+var SearchDropdown = require("app/views/stream/searchDropdown");
+var stubReactComponents = require("../../../helpers/stubReactComponent");
+
+var TestUtils = React.addons.TestUtils;
+var findWithClass = TestUtils.findRenderedDOMComponentWithClass;
+var findWithType = TestUtils.findRenderedComponentWithType;
+
+describe("SearchBar", function() {
+
+  beforeEach(function() {
+    this.sandbox = sinon.sandbox.create();
+    stubReactComponents(this.sandbox, [SearchDropdown]);
+  });
+
+  afterEach(function() {
+    this.sandbox.restore();
+  });
+
+  describe("getInitialState()", function() {
+
+    it("inherits the query state from props", function() {
+      var wrapper = TestUtils.renderIntoDocument(<SearchBar defaultQuery={"is:unresolved"} />);
+      var expected = wrapper.state.query; expect(expected).to.be.eql("is:unresolved");
+    });
+
+  });
+
+  describe("clearSearch()", function() {
+
+    it("clears the query", function() {
+      var wrapper = TestUtils.renderIntoDocument(<SearchBar defaultQuery={"is:unresolved"} />);
+      wrapper.clearSearch();
+      expect(wrapper.state.query).to.eql("");
+    });
+
+    it("calls onSearch()", function() {
+      var stubbedOnSearch = this.sandbox.spy();
+      var wrapper = TestUtils.renderIntoDocument(<SearchBar defaultQuery={"is:unresolved"} onSearch={stubbedOnSearch}/>);
+      wrapper.clearSearch();
+      expect(stubbedOnSearch.calledWith("")).to.be.true;
+    });
+
+  });
+
+  describe("onQueryFocus()", function() {
+
+    it("displays the drop down", function() {
+      var wrapper = TestUtils.renderIntoDocument(<SearchBar />);
+      expect(wrapper.state.dropdownVisible).to.be.false;
+      wrapper.onQueryFocus();
+      expect(wrapper.state.dropdownVisible).to.be.true;
+    });
+  });
+
+  describe("onQueryBlur()", function() {
+
+    it("hides the drop down", function() {
+      var wrapper = TestUtils.renderIntoDocument(<SearchBar />);
+      wrapper.state.dropdownVisible = true;
+
+      wrapper.onQueryBlur();
+      expect(wrapper.state.dropdownVisible).to.be.false;
+    });
+
+  });
+
+  describe("onQueryChange()", function() {
+
+    it("sets the query", function() {
+      var wrapper = TestUtils.renderIntoDocument(<SearchBar />);
+      wrapper.state.query = "is:resolved";
+
+      wrapper.onQueryChange({ target: { value: "java" } });
+      expect(wrapper.state.query).to.eql("java");
+    });
+
+  });
+
+  describe("render()", function() {
+
+    it("invokes onSearch() when search input changes", function() {
+      var stubOnSearch = this.sandbox.spy();
+      var wrapper = TestUtils.renderIntoDocument(<SearchBar onSearch={stubOnSearch} />);
+
+      TestUtils.Simulate.change(wrapper.refs.searchInput, { target: { value: "java" } });
+      TestUtils.Simulate.submit(wrapper.refs.searchForm, { preventDefault() {} });
+
+      expect(stubOnSearch.calledWith("java")).to.be.true;
+    });
+
+    it("invokes onSearch() when search is cleared", function() {
+      var stubOnSearch = this.sandbox.spy();
+      var wrapper = TestUtils.renderIntoDocument(<SearchBar onSearch={stubOnSearch} />);
+      wrapper.setState({
+        query: "this-is-not-empty"
+      });
+
+      var cancelButton = findWithClass(wrapper, "search-clear-form");
+      TestUtils.Simulate.click(cancelButton);
+
+      expect(stubOnSearch.calledWith("")).to.be.true;
+    });
+
+  });
+
+});
