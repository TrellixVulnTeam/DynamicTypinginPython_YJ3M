commit 99660d64373774e6209f1769e5c78bf73be5f85f
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Wed Mar 18 11:59:52 2020 -0700

    chore(ts): Convert app/data/forms (#17748)
    
    * chore(ts): Convert app/data/forms
    
    * Update src/sentry/static/sentry/app/views/settings/components/forms/type.tsx

diff --git a/src/sentry/static/sentry/app/data/forms/accountDetails.jsx b/src/sentry/static/sentry/app/data/forms/accountDetails.tsx
similarity index 88%
rename from src/sentry/static/sentry/app/data/forms/accountDetails.jsx
rename to src/sentry/static/sentry/app/data/forms/accountDetails.tsx
index 4cb1b46eca..129128b7a6 100644
--- a/src/sentry/static/sentry/app/data/forms/accountDetails.jsx
+++ b/src/sentry/static/sentry/app/data/forms/accountDetails.tsx
@@ -1,9 +1,11 @@
+import {JsonFormObject} from 'app/views/settings/components/forms/type';
+
 export const route = '/settings/account/details/';
 
 // For fields that are
 const getUserIsManaged = ({user}) => user.isManaged;
 
-const formGroups = [
+const formGroups: JsonFormObject[] = [
   {
     // Form "section"/"panel"
     title: 'Account Details',
diff --git a/src/sentry/static/sentry/app/data/forms/accountEmails.jsx b/src/sentry/static/sentry/app/data/forms/accountEmails.tsx
similarity index 83%
rename from src/sentry/static/sentry/app/data/forms/accountEmails.jsx
rename to src/sentry/static/sentry/app/data/forms/accountEmails.tsx
index 67e33da6e5..68a5f3148a 100644
--- a/src/sentry/static/sentry/app/data/forms/accountEmails.jsx
+++ b/src/sentry/static/sentry/app/data/forms/accountEmails.tsx
@@ -1,7 +1,9 @@
+import {JsonFormObject} from 'app/views/settings/components/forms/type';
+
 // Export route to make these forms searchable by label/help
 export const route = '/settings/account/emails/';
 
-const formGroups = [
+const formGroups: JsonFormObject[] = [
   {
     // Form "section"/"panel"
     title: 'Add Secondary Emails',
diff --git a/src/sentry/static/sentry/app/data/forms/accountNotificationSettings.jsx b/src/sentry/static/sentry/app/data/forms/accountNotificationSettings.tsx
similarity index 86%
rename from src/sentry/static/sentry/app/data/forms/accountNotificationSettings.jsx
rename to src/sentry/static/sentry/app/data/forms/accountNotificationSettings.tsx
index 6f9d74c0c0..a064dbb2bb 100644
--- a/src/sentry/static/sentry/app/data/forms/accountNotificationSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/accountNotificationSettings.tsx
@@ -1,9 +1,10 @@
 import {t, tct} from 'app/locale';
+import {Field, JsonFormObject} from 'app/views/settings/components/forms/type';
 
 // Export route to make these forms searchable by label/help
 export const route = '/settings/account/notifications/';
 
-export const fields = {
+export const fields: {[key: string]: Field} = {
   subscribeByDefault: {
     name: 'subscribeByDefault',
     type: 'boolean',
@@ -21,9 +22,9 @@ export const fields = {
     type: 'radio',
     label: t('Send Me Workflow Notifications'),
     choices: [
-      [0, 'Always'],
-      [1, 'Only On Issues I Subscribe To'],
-      [2, 'Never'],
+      [0, t('Always')],
+      [1, t('Only On Issues I Subscribe To')],
+      [2, t('Never')],
     ],
     help: t('E.g. changes in issue assignment, resolution status, and comments.'),
   },
@@ -40,9 +41,9 @@ export const fields = {
     type: 'radio',
     label: t('Send Me Deploy Notifications'),
     choices: [
-      [2, 'Always'],
-      [3, 'Only On Deploys With My Commits'],
-      [4, 'Never'],
+      [2, t('Always')],
+      [3, t('Only On Deploys With My Commits')],
+      [4, t('Never')],
     ],
     help: t('Deploy emails include release, environment and commit overviews.'),
   },
@@ -60,7 +61,7 @@ export const fields = {
   },
 };
 
-const formGroups = [
+const formGroups: JsonFormObject[] = [
   {
     title: t('Alerts'),
     fields: [fields.subscribeByDefault],
diff --git a/src/sentry/static/sentry/app/data/forms/accountPassword.jsx b/src/sentry/static/sentry/app/data/forms/accountPassword.tsx
similarity index 86%
rename from src/sentry/static/sentry/app/data/forms/accountPassword.jsx
rename to src/sentry/static/sentry/app/data/forms/accountPassword.tsx
index acf07b656d..f63a1b4752 100644
--- a/src/sentry/static/sentry/app/data/forms/accountPassword.jsx
+++ b/src/sentry/static/sentry/app/data/forms/accountPassword.tsx
@@ -1,6 +1,8 @@
+import {JsonFormObject} from 'app/views/settings/components/forms/type';
+
 const getUserIsNotManaged = ({user}) => !user.isManaged;
 
-const formGroups = [
+const formGroups: JsonFormObject[] = [
   {
     // Form "section"/"panel"
     title: 'Password',
@@ -8,7 +10,6 @@ const formGroups = [
       {
         name: 'password',
         type: 'secret',
-
         autoComplete: 'current-password',
         label: 'Current Password',
         placeholder: '',
@@ -19,25 +20,17 @@ const formGroups = [
       {
         name: 'passwordNew',
         type: 'secret',
-
         autoComplete: 'new-password',
         label: 'New Password',
         placeholder: '',
         help: '',
         required: true,
         visible: getUserIsNotManaged,
-        validate: ({id, form}) => {
-          if (form[id] !== form.passwordVerify) {
-            return [[id, '']];
-          }
-
-          return [];
-        },
+        validate: ({id, form}) => (form[id] !== form.passwordVerify ? [[id, '']] : []),
       },
       {
         name: 'passwordVerify',
         type: 'secret',
-
         autoComplete: 'new-password',
         label: 'Verify New Password',
         placeholder: '',
diff --git a/src/sentry/static/sentry/app/data/forms/accountPreferences.jsx b/src/sentry/static/sentry/app/data/forms/accountPreferences.tsx
similarity index 60%
rename from src/sentry/static/sentry/app/data/forms/accountPreferences.jsx
rename to src/sentry/static/sentry/app/data/forms/accountPreferences.tsx
index 5f1facd7d5..d09b1ea8d8 100644
--- a/src/sentry/static/sentry/app/data/forms/accountPreferences.jsx
+++ b/src/sentry/static/sentry/app/data/forms/accountPreferences.tsx
@@ -1,13 +1,16 @@
 import timezones from 'app/data/timezones';
 import languages from 'app/data/languages';
+import {JsonFormObject} from 'app/views/settings/components/forms/type';
+import {t} from 'app/locale';
 
 // Export route to make these forms searchable by label/help
 export const route = '/settings/account/details/';
 
-// Called before sending API request, these fields need to be sent as an `options` object
-const transformOptions = data => ({options: data});
+// Called before sending API request, these fields need to be sent as an
+// `options` object
+const transformOptions = (data: object) => ({options: data});
 
-const formGroups = [
+const formGroups: JsonFormObject[] = [
   {
     // Form "section"/"panel"
     title: 'Preferences',
@@ -17,35 +20,32 @@ const formGroups = [
         type: 'choice',
         required: false,
         choices: [
-          ['-1', 'Default (let Sentry decide)'],
-          ['1', 'Most recent call last'],
-          ['2', 'Most recent call first'],
+          ['-1', t('Default (let Sentry decide)')],
+          ['1', t('Most recent call last')],
+          ['2', t('Most recent call first')],
         ],
-
-        // additional data/props that is related to rendering of form field rather than data
-        label: 'Stacktrace Order',
-        help: 'Choose the default ordering of frames in stacktraces',
+        label: t('Stacktrace Order'),
+        help: t('Choose the default ordering of frames in stacktraces'),
         getData: transformOptions,
       },
       {
         name: 'language',
         type: 'choice',
-        label: 'Language',
-        // seems weird to have choices in initial form data
+        label: t('Language'),
         choices: languages,
         getData: transformOptions,
       },
       {
         name: 'timezone',
         type: 'choice',
-        label: 'Timezone',
+        label: t('Timezone'),
         choices: timezones,
         getData: transformOptions,
       },
       {
         name: 'clock24Hours',
         type: 'boolean',
-        label: 'Use a 24-hour clock',
+        label: t('Use a 24-hour clock'),
         getData: transformOptions,
       },
     ],
diff --git a/src/sentry/static/sentry/app/data/forms/apiApplication.jsx b/src/sentry/static/sentry/app/data/forms/apiApplication.tsx
similarity index 95%
rename from src/sentry/static/sentry/app/data/forms/apiApplication.jsx
rename to src/sentry/static/sentry/app/data/forms/apiApplication.tsx
index f68e28efc4..6b720b4c57 100644
--- a/src/sentry/static/sentry/app/data/forms/apiApplication.jsx
+++ b/src/sentry/static/sentry/app/data/forms/apiApplication.tsx
@@ -1,7 +1,8 @@
 import {extractMultilineFields} from 'app/utils';
 import getDynamicText from 'app/utils/getDynamicText';
+import {JsonFormObject} from 'app/views/settings/components/forms/type';
 
-const forms = [
+const forms: JsonFormObject[] = [
   {
     // Form "section"/"panel"
     title: 'Application Details',
diff --git a/src/sentry/static/sentry/app/data/forms/cspReports.jsx b/src/sentry/static/sentry/app/data/forms/cspReports.tsx
similarity index 77%
rename from src/sentry/static/sentry/app/data/forms/cspReports.jsx
rename to src/sentry/static/sentry/app/data/forms/cspReports.tsx
index 7b890d9ec1..439556042b 100644
--- a/src/sentry/static/sentry/app/data/forms/cspReports.jsx
+++ b/src/sentry/static/sentry/app/data/forms/cspReports.tsx
@@ -1,9 +1,10 @@
 // Export route to make these forms searchable by label/help
 import {t} from 'app/locale';
+import {JsonFormObject} from 'app/views/settings/components/forms/type';
 
 export const route = '/settings/:orgId/projects/:projectId/csp/';
 
-const formGroups = [
+const formGroups: JsonFormObject[] = [
   {
     // Form "section"/"panel"
     title: 'CSP Settings',
@@ -16,12 +17,11 @@ const formGroups = [
         help: t(
           'Our default list will attempt to ignore common issues and reduce noise.'
         ),
-        getData: data => ({
-          options: data,
-        }),
+        getData: data => ({options: data}),
       },
 
-      // XXX: Org details endpoints accept these multiline inputs as a list, where as it looks like project details accepts it as a string with newlines
+      // XXX: Org details endpoints accept these multiline inputs as a list,
+      // where as it looks like project details accepts it as a string with newlines
       {
         name: 'sentry:csp_ignored_sources',
         type: 'string',
@@ -33,9 +33,7 @@ const formGroups = [
           'Discard reports about requests from the given sources. Separate multiple entries with a newline.'
         ),
         extraHelp: t('Separate multiple entries with a newline.'),
-        getData: data => ({
-          options: data,
-        }),
+        getData: data => ({options: data}),
       },
     ],
   },
diff --git a/src/sentry/static/sentry/app/data/forms/inboundFilters.jsx b/src/sentry/static/sentry/app/data/forms/inboundFilters.tsx
similarity index 89%
rename from src/sentry/static/sentry/app/data/forms/inboundFilters.jsx
rename to src/sentry/static/sentry/app/data/forms/inboundFilters.tsx
index fb8041864b..38d0addc93 100644
--- a/src/sentry/static/sentry/app/data/forms/inboundFilters.jsx
+++ b/src/sentry/static/sentry/app/data/forms/inboundFilters.tsx
@@ -2,6 +2,7 @@ import React from 'react';
 
 import {t, tct} from 'app/locale';
 import ExternalLink from 'app/components/links/externalLink';
+import {JsonFormObject, Field} from 'app/views/settings/components/forms/type';
 
 // Export route to make these forms searchable by label/help
 export const route = '/settings/:orgId/projects/:projectId/filters/';
@@ -10,11 +11,10 @@ const newLineHelpText = t('Separate multiple entries with a newline.');
 const globHelpText = tct('Allows [link:glob pattern matching].', {
   link: <ExternalLink href="https://en.wikipedia.org/wiki/Glob_(programming)" />,
 });
-const getOptionsData = data => ({
-  options: data,
-});
 
-const formGroups = [
+const getOptionsData = (data: object) => ({options: data});
+
+const formGroups: JsonFormObject[] = [
   {
     // Form "section"/"panel"
     title: t('Custom Filters'),
@@ -43,7 +43,7 @@ const formGroups = [
 export default formGroups;
 
 // These require a feature flag
-export const customFilterFields = [
+export const customFilterFields: Field[] = [
   {
     name: 'filters:releases',
     type: 'string',
diff --git a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.tsx
similarity index 87%
rename from src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
rename to src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.tsx
index b064bf1af0..e514c63868 100644
--- a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.tsx
@@ -1,10 +1,12 @@
 import {t} from 'app/locale';
 import slugify from 'app/utils/slugify';
+import {JsonFormObject} from 'app/views/settings/components/forms/type';
+import {MemberRole} from 'app/types';
 
 // Export route to make these forms searchable by label/help
 export const route = '/settings/:orgId/';
 
-const formGroups = [
+const formGroups: JsonFormObject[] = [
   {
     // Form "section"/"panel"
     title: t('General'),
@@ -50,9 +52,7 @@ const formGroups = [
         label: t('Default Role'),
         // seems weird to have choices in initial form data
         choices: ({initialData} = {}) =>
-          (initialData.availableRoles &&
-            initialData.availableRoles.map(r => [r.id, r.name])) ||
-          [],
+          initialData?.availableRoles?.map((r: MemberRole) => [r.id, r.name]) ?? [],
         help: t('The default role new members will receive'),
         disabled: ({access}) => !access.has('org:admin'),
       },
diff --git a/src/sentry/static/sentry/app/data/forms/organizationSecurityAndPrivacy.tsx b/src/sentry/static/sentry/app/data/forms/organizationSecurityAndPrivacy.tsx
index 23f91a2bee..dadc9c15d4 100644
--- a/src/sentry/static/sentry/app/data/forms/organizationSecurityAndPrivacy.tsx
+++ b/src/sentry/static/sentry/app/data/forms/organizationSecurityAndPrivacy.tsx
@@ -5,8 +5,9 @@ import {
   formatStoreCrashReports,
 } from 'app/utils/crashReports';
 import {JsonFormObject} from 'app/views/settings/components/forms/type';
+import {MemberRole} from 'app/types';
 
-const organizationSecurityAndPrivacy: Array<JsonFormObject> = [
+const organizationSecurityAndPrivacy: JsonFormObject[] = [
   {
     title: t('Security & Privacy'),
     fields: [
@@ -147,9 +148,7 @@ const organizationSecurityAndPrivacy: Array<JsonFormObject> = [
         name: 'attachmentsRole',
         type: 'array',
         choices: ({initialData = {}}) =>
-          (initialData.availableRoles &&
-            initialData.availableRoles.map(r => [r.id, r.name])) ||
-          [],
+          initialData?.availableRoles?.map((r: MemberRole) => [r.id, r.name]) ?? [],
         label: t('Attachments Access'),
         help: t(
           'Permissions required to download event attachments, such as native crash reports or log files'
diff --git a/src/sentry/static/sentry/app/data/forms/processingIssues.jsx b/src/sentry/static/sentry/app/data/forms/processingIssues.tsx
similarity index 88%
rename from src/sentry/static/sentry/app/data/forms/processingIssues.jsx
rename to src/sentry/static/sentry/app/data/forms/processingIssues.tsx
index b291704cdc..6a917d4f88 100644
--- a/src/sentry/static/sentry/app/data/forms/processingIssues.jsx
+++ b/src/sentry/static/sentry/app/data/forms/processingIssues.tsx
@@ -1,9 +1,10 @@
 // Export route to make these forms searchable by label/help
 import {t} from 'app/locale';
+import {JsonFormObject} from 'app/views/settings/components/forms/type';
 
 export const route = '/settings/:orgId/projects/:projectId/processing-issues/';
 
-const formGroups = [
+const formGroups: JsonFormObject[] = [
   {
     // Form "section"/"panel"
     title: 'Settings',
@@ -26,9 +27,7 @@ const formGroups = [
             ? t('Reprocessing applies to future events only.')
             : t(`All events with errors will be flushed into your issues stream.
                 Beware that this process may take some time and cannot be undone.`),
-        getData: form => ({
-          options: form,
-        }),
+        getData: form => ({options: form}),
       },
     ],
   },
diff --git a/src/sentry/static/sentry/app/data/forms/projectAlerts.jsx b/src/sentry/static/sentry/app/data/forms/projectAlerts.tsx
similarity index 86%
rename from src/sentry/static/sentry/app/data/forms/projectAlerts.jsx
rename to src/sentry/static/sentry/app/data/forms/projectAlerts.tsx
index 86b0b27c5f..3edf37d84d 100644
--- a/src/sentry/static/sentry/app/data/forms/projectAlerts.jsx
+++ b/src/sentry/static/sentry/app/data/forms/projectAlerts.tsx
@@ -1,14 +1,15 @@
 import {t, tn} from 'app/locale';
+import {Field} from 'app/views/settings/components/forms/type';
 
 // Export route to make these forms searchable by label/help
 export const route = '/settings/:orgId/projects/:projectId/alerts/';
 
-const formatMinutes = value => {
-  value = value / 60;
+const formatMinutes = (value: number | '') => {
+  value = Number(value) / 60;
   return tn('%s minute', '%s minutes', value);
 };
 
-export const fields = {
+export const fields: {[key: string]: Field} = {
   subjectTemplate: {
     name: 'subjectTemplate',
     type: 'string',
diff --git a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.tsx
similarity index 98%
rename from src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
rename to src/sentry/static/sentry/app/data/forms/projectGeneralSettings.tsx
index cd2ede94e3..7165defb01 100644
--- a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.tsx
@@ -15,13 +15,14 @@ import {
 } from 'app/utils/crashReports';
 import space from 'app/styles/space';
 import {GroupingConfigItem} from 'app/components/events/groupingInfo';
+import {Field} from 'app/views/settings/components/forms/type';
 
 // Export route to make these forms searchable by label/help
 export const route = '/settings/:orgId/projects/:projectId/';
 
 const getResolveAgeAllowedValues = () => {
   let i = 0;
-  const values = [];
+  const values: number[] = [];
   while (i <= 720) {
     values.push(i);
     if (i < 12) {
@@ -48,7 +49,7 @@ const ORG_DISABLED_REASON = t(
 // Check if a field has been set AND IS TRUTHY at the organization level.
 const hasOrgOverride = ({organization, name}) => organization[name];
 
-export const fields = {
+export const fields: {[key: string]: Field} = {
   slug: {
     name: 'slug',
     type: 'string',
@@ -95,14 +96,17 @@ export const fields = {
       "Automatically resolve an issue if it hasn't been seen for this amount of time"
     ),
     formatLabel: val => {
-      val = parseInt(val, 10);
+      val = Number(val);
       if (val === 0) {
         return t('Disabled');
-      } else if (val > 23 && val % 24 === 0) {
+      }
+
+      if (val > 23 && val % 24 === 0) {
         // Based on allowed values, val % 24 should always be true
         val = val / 24;
         return tn('%s day', '%s days', val);
       }
+
       return tn('%s hour', '%s hours', val);
     },
     saveOnBlur: false,
diff --git a/src/sentry/static/sentry/app/data/forms/teamSettingsFields.jsx b/src/sentry/static/sentry/app/data/forms/teamSettingsFields.tsx
similarity index 87%
rename from src/sentry/static/sentry/app/data/forms/teamSettingsFields.jsx
rename to src/sentry/static/sentry/app/data/forms/teamSettingsFields.tsx
index be6efe3be9..244967f6b8 100644
--- a/src/sentry/static/sentry/app/data/forms/teamSettingsFields.jsx
+++ b/src/sentry/static/sentry/app/data/forms/teamSettingsFields.tsx
@@ -1,10 +1,11 @@
 import {t} from 'app/locale';
 import slugify from 'app/utils/slugify';
+import {JsonFormObject} from 'app/views/settings/components/forms/type';
 
 // Export route to make these forms searchable by label/help
 export const route = '/settings/:orgId/teams/:teamId/settings/';
 
-const formGroups = [
+const formGroups: JsonFormObject[] = [
   {
     // Form "section"/"panel"
     title: 'Team Settings',
diff --git a/src/sentry/static/sentry/app/data/forms/userFeedback.jsx b/src/sentry/static/sentry/app/data/forms/userFeedback.tsx
similarity index 80%
rename from src/sentry/static/sentry/app/data/forms/userFeedback.jsx
rename to src/sentry/static/sentry/app/data/forms/userFeedback.tsx
index 2548f315ee..c672f7cb67 100644
--- a/src/sentry/static/sentry/app/data/forms/userFeedback.jsx
+++ b/src/sentry/static/sentry/app/data/forms/userFeedback.tsx
@@ -1,7 +1,9 @@
+import {JsonFormObject} from 'app/views/settings/components/forms/type';
+
 // Export route to make these forms searchable by label/help
 export const route = '/settings/:orgId/projects/:projectId/user-feedback/';
 
-const formGroups = [
+const formGroups: JsonFormObject[] = [
   {
     // Form "section"/"panel"
     title: 'Settings',
@@ -15,9 +17,7 @@ const formGroups = [
         placeholder: 'e.g. secondary@example.com',
         help:
           'Show "powered by Sentry within the feedback dialog. We appreciate you helping get the word out about Sentry! <3',
-        getData: data => ({
-          options: data,
-        }),
+        getData: data => ({options: data}),
       },
     ],
   },
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
index 660eeb7bcd..674ca22e18 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
@@ -1,6 +1,7 @@
 import React from 'react';
 
 import RangeSlider from 'app/views/settings/components/forms/controls/rangeSlider';
+import Alert from 'app/components/alert';
 
 export const FieldType = [
   'array',
@@ -25,10 +26,13 @@ export type FieldValue = any;
 
 type ConfirmKeyType = 'true' | 'false';
 
+// TODO(ts): A lot of these attribuets are missing correct types. We'll likely
+// need to introduce some generics in here to get rid of some of these anys.
+
 type BaseField = {
   label?: React.ReactNode | (() => React.ReactNode);
   name?: string;
-  help?: React.ReactNode | (() => React.ReactNode);
+  help?: React.ReactNode | ((props: any) => React.ReactNode);
   required?: boolean;
   placeholder?: string | (() => string);
   multiline?: boolean;
@@ -42,26 +46,30 @@ type BaseField = {
   autosize?: boolean;
   maxRows?: number;
   extraHelp?: string;
-  choices?: (props: {[key: string]: any}) => void;
-  formatLabel?: (value: number | '') => React.ReactNode;
+  choices?:
+    | ((props: {[key: string]: any}) => void)
+    | readonly Readonly<[number | string, React.ReactNode]>[];
 
+  formatLabel?: (value: number | '') => React.ReactNode;
+  transformInput?: (value: FieldValue) => FieldValue;
+  getData?: (data: object) => object;
+  /**
+   * If false, disable saveOnBlur for field, instead show a save/cancel button
+   */
+  saveOnBlur?: boolean;
+  saveMessageAlertType?: React.ComponentProps<typeof Alert>['type'];
+  saveMessage?: React.ReactNode | ((params: {value: FieldValue}) => string);
   /**
    * Function to format the value displayed in the undo toast. May also be
    * specified as false to disable showing the changed fields in the toast.
    */
   formatMessageValue?: Function | false;
-
   /**
    * Should show a "return key" icon in input?
    */
   showReturnButton?: boolean;
-
-  /**
-   * Iff false, disable saveOnBlur for field, instead show a save/cancel button
-   */
-  saveOnBlur?: boolean;
   getValue?: (value: FieldValue) => any;
-  setValue?: (value: FieldValue) => any;
+  setValue?: (value: FieldValue, props?: any) => any;
 
   onChange?: (value: FieldValue) => void;
 
@@ -72,16 +80,22 @@ type BaseField = {
 
   // TODO(ts): used in sentryAppPublishRequestModal
   meta?: string;
+
+  selectionInfoFunction?: (props: any) => React.ReactNode;
 };
 
+// TODO(ts): These are field specific props. May not be needed as we convert
+// the fields as we can grab the props from them
+
 type CustomType = {type: 'custom'} & {
   Component: (arg: BaseField) => React.ReactNode;
 };
 
-// TODO(ts): These are field specific props
-// May not be needed as we convert the fields
+type InputType = {type: 'string' | 'secret'} & {
+  autoComplete?: string;
+};
+
 type SelectControlType = {type: 'choice' | 'select'} & {
-  choices: [number | string, number | string][];
   multiple?: boolean;
 };
 
@@ -97,6 +111,7 @@ type RangeType = {type: 'range'} & Omit<RangeSlider['props'], 'value'> & {
 export type Field = (
   | CustomType
   | SelectControlType
+  | InputType
   | TextareaType
   | RangeType
   | {type: typeof FieldType[number]}
