commit 5bf45db8ef16e3760b1801e6ae61cb20aeafbb4b
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri Nov 18 12:20:29 2016 +0100

    Store the original symbol in the frame before demangling

diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 4820d98e12..bbf6114997 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -7,6 +7,7 @@ import time
 import logging
 import posixpath
 
+from symsynd.demangle import demangle_symbol
 from sentry.models import Project, EventError
 from sentry.plugins import Plugin2
 from sentry.lang.native.symbolizer import Symbolizer
@@ -390,8 +391,17 @@ def resolve_frame_symbols(data):
                         continue
                     new_frame = dict(frame)
                     # XXX: log here if symbol could not be found?
-                    new_frame['function'] = sfrm.get('symbol_name') or \
+                    symbol = sfrm.get('symbol_name') or \
                         new_frame.get('function') or '<unknown>'
+                    function = demangle_symbol(symbol)
+
+                    new_frame['function'] = function
+
+                    # If we demangled something, store the original in the
+                    # symbol portion of the frame
+                    if function != symbol:
+                        new_frame['symbol'] = symbol
+
                     new_frame['abs_path'] = sfrm.get('filename') or None
                     if new_frame['abs_path']:
                         new_frame['filename'] = posixpath.basename(new_frame['abs_path'])
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 74067f7972..6f423bb8ad 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -5,7 +5,6 @@ import six
 from symsynd.driver import Driver, SymbolicationError
 from symsynd.report import ReportSymbolizer
 from symsynd.macho.arch import get_cpu_name
-from symsynd.demangle import demangle_symbol
 
 from sentry.lang.native.dsymcache import dsymcache
 from sentry.utils.safe import trim
@@ -85,7 +84,7 @@ class Symbolizer(object):
     def symbolize_app_frame(self, frame):
         img = self.images.get(frame['object_addr'])
         new_frame = self.symsynd_symbolizer.symbolize_frame(
-            frame, silent=False)
+            frame, silent=False, demangle=False)
         if new_frame is not None:
             return self._process_frame(new_frame, img)
 
@@ -99,7 +98,6 @@ class Symbolizer(object):
         if symbol is None:
             return
 
-        symbol = demangle_symbol(symbol) or symbol
         rv = dict(frame, symbol_name=symbol, filename=None,
                   line=0, column=0, uuid=img['uuid'],
                   object_name=img['name'])
