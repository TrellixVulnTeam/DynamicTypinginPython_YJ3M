commit 57a2d9b8be4f6f6e8fd9298bfc7d5b6e96699ab0
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jul 15 09:13:28 2013 -0700

    Discard tags where the key or value are > 32 characters (fixes GH-935)

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 0a8145b3cc..181d09e50a 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -255,12 +255,32 @@ def validate_data(project, data, client=None):
             type(data['modules']), **client_metadata(client, project))
         del data['modules']
 
-    if data.get('extra') and type(data['extra']) != dict:
+    if data.get('extra') is not None and type(data['extra']) != dict:
         logger.info(
             'Discarded invalid type for extra: %s',
             type(data['extra']), **client_metadata(client, project))
         del data['extra']
 
+    if data.get('tags') is not None:
+        if type(data['tags']) == dict:
+            data['tags'] = data['tags'].items()
+        elif not isinstance(data['tags'], (list, tuple)):
+            logger.info(
+                'Discarded invalid type for tags: %s',
+                type(data['tags']), **client_metadata(client, project))
+            del data['tags']
+
+    if data.get('tags'):
+        # remove any values which are over 32 characters
+        tags = []
+        for k, v in data['tags']:
+            if len(k) > 32 or len(v) > 32:
+                logger.info('Discarded invalid tag: %s=%s',
+                            k, v, **client_metadata(client, project))
+                continue
+            tags.append((k, v))
+        data['tags'] = tags
+
     for k in data.keys():
         if k in RESERVED_FIELDS:
             continue
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 32b940dc68..c7f23878b6 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -242,3 +242,17 @@ class ValidateDataTest(BaseAPITest):
             'message': 'foo',
         })
         assert data['project'] == self.project.id
+
+    def test_tags_as_string(self):
+        data = validate_data(self.project, {
+            'message': 'foo',
+            'tags': 'bar',
+        })
+        assert 'tags' not in data
+
+    def test_tags_out_of_bounds(self):
+        data = validate_data(self.project, {
+            'message': 'foo',
+            'tags': {'f' * 33: 'value', 'foo': 'v' * 33, 'bar': 'value'},
+        })
+        assert data['tags'] == [('bar', 'value')]
