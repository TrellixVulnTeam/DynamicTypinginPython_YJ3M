commit 0fb949b4b99a0dbea65bd516333e19d8356d0df7
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Mar 1 10:41:51 2019 -0800

    feat(autocomplete): Align event and issue search autocomplete (#12249)
    
    Note that we are not currently autocompleting any non string values
    since they don't currently work.

diff --git a/src/sentry/static/sentry/app/actionCreators/tags.jsx b/src/sentry/static/sentry/app/actionCreators/tags.jsx
index d7e148b7f9..f711e010f0 100644
--- a/src/sentry/static/sentry/app/actionCreators/tags.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/tags.jsx
@@ -6,6 +6,48 @@ import AlertActions from 'app/actions/alertActions';
 
 const MAX_TAGS = 500;
 
+const BUILTIN_TAGS = [
+  'platform',
+  'message',
+  'title',
+  'location',
+  'timestamp',
+  'release',
+  'user.id',
+  'user.username',
+  'user.email',
+  'user.ip',
+  'sdk.name',
+  'sdk.version',
+  'contexts.key',
+  'contexts.value',
+  'http.method',
+  'http.url',
+  'os.build',
+  'os.kernel_version',
+  'device.brand',
+  'device.locale',
+  'device.uuid',
+  'device.model_id',
+  'device.arch',
+  'device.orientation',
+  'geo.country_code',
+  'geo.region',
+  'geo.city',
+  'error.type',
+  'error.value',
+  'error.mechanism',
+  'error.handled',
+  'stack.abs_path',
+  'stack.filename',
+  'stack.package',
+  'stack.module',
+  'stack.function',
+  'stack.stack_level',
+].map(tag => ({
+  key: tag,
+}));
+
 function tagFetchSuccess(tags) {
   const trimmedTags = tags.slice(0, MAX_TAGS);
 
@@ -36,17 +78,21 @@ export function fetchProjectTags(orgId, projectId) {
 /**
  * Fetch tags for an organization or a subset or projects.
  */
-export function fetchTags(api, orgId, projectIds = null) {
+export function fetchOrganizationTags(api, orgId, projectIds = null) {
   TagStore.reset();
   TagActions.loadTags();
 
   const url = `/organizations/${orgId}/tags/`;
   const query = projectIds ? {project: projectIds} : null;
 
-  const promise = api.requestPromise(url, {
-    method: 'GET',
-    query,
-  });
+  const promise = api
+    .requestPromise(url, {
+      method: 'GET',
+      query,
+    })
+    .then(tags => {
+      return [...BUILTIN_TAGS, ...tags];
+    });
   promise.then(tagFetchSuccess, TagActions.loadTagsError);
 
   return promise;
@@ -88,9 +134,3 @@ export function fetchProjectTagValues(api, orgId, projectId, tagKey, query = nul
     query,
   });
 }
-
-export function fetchOrganizationTags(api, orgId) {
-  return api.requestPromise(`/organizations/${orgId}/tags/`, {
-    method: 'GET',
-  });
-}
diff --git a/src/sentry/static/sentry/app/stores/tagStore.jsx b/src/sentry/static/sentry/app/stores/tagStore.jsx
index 7d3870f40c..cac0e09235 100644
--- a/src/sentry/static/sentry/app/stores/tagStore.jsx
+++ b/src/sentry/static/sentry/app/stores/tagStore.jsx
@@ -89,19 +89,8 @@ const TagStore = Reflux.createStore({
         values: [],
         predefined: true,
       },
-      'user.id': {
-        key: 'user.id',
-      },
-      'user.username': {
-        key: 'user.username',
-      },
-      'user.email': {
-        key: 'user.email',
-      },
-      'user.ip': {
-        key: 'user.ip',
-      },
     };
+
     this.trigger(this.tags);
   },
 
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/searchBar.jsx b/src/sentry/static/sentry/app/views/organizationEvents/searchBar.jsx
index 5e8d6e9158..e2d76f3594 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/searchBar.jsx
@@ -3,7 +3,6 @@ import {flatten, memoize} from 'lodash';
 import PropTypes from 'prop-types';
 import React from 'react';
 
-import {COLUMNS} from 'app/views/organizationDiscover/data';
 import {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'app/constants';
 import {addErrorMessage} from 'app/actionCreators/indicator';
 import {defined} from 'app/utils';
@@ -22,8 +21,6 @@ const tagToObjectReducer = (acc, name) => {
   return acc;
 };
 
-const TAGS = COLUMNS.map(({name}) => name);
-
 const SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(
   `^${NEGATION_OPERATOR}|\\${SEARCH_WILDCARD}`,
   'g'
@@ -70,10 +67,7 @@ class SearchBar extends React.PureComponent {
     );
   }, ({key}, query) => `${key}-${query}`);
 
-  getAllTags = (orgTags = []) =>
-    TAGS.concat(orgTags)
-      .sort()
-      .reduce(tagToObjectReducer, {});
+  getAllTags = (orgTags = []) => orgTags.sort().reduce(tagToObjectReducer, {});
 
   /**
    * Prepare query string (e.g. strip special characters like negation operator)
diff --git a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
index 79dc3c59b6..9f7c7b00e8 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
@@ -17,7 +17,7 @@ import {extractSelectionParameters} from 'app/components/organizations/globalSel
 import Pagination from 'app/components/pagination';
 import {Panel, PanelBody} from 'app/components/panels';
 import StreamGroup from 'app/components/stream/group';
-import {fetchTags, fetchTagValues} from 'app/actionCreators/tags';
+import {fetchOrganizationTags, fetchTagValues} from 'app/actionCreators/tags';
 import {fetchOrgMembers, indexMembersByProject} from 'app/actionCreators/members';
 import {fetchSavedSearches} from 'app/actionCreators/savedSearches';
 import ConfigStore from 'app/stores/configStore';
@@ -240,7 +240,7 @@ const OrganizationStream = createReactClass({
 
   fetchTags() {
     const {organization, selection} = this.props;
-    fetchTags(this.api, organization.slug, selection.projects);
+    fetchOrganizationTags(this.api, organization.slug, selection.projects);
   },
 
   fetchData() {
diff --git a/tests/js/spec/views/organizationEvents/searchBar.spec.jsx b/tests/js/spec/views/organizationEvents/searchBar.spec.jsx
index 548b5782cd..336f1caed8 100644
--- a/tests/js/spec/views/organizationEvents/searchBar.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/searchBar.spec.jsx
@@ -56,7 +56,8 @@ describe('SearchBar', function() {
   });
 
   it('fetches organization tags on mount', async function() {
-    const wrapper = await mount(<SearchBar {...props} />, options);
+    const wrapper = mount(<SearchBar {...props} />, options);
+    await tick();
     expect(tagKeysMock).toHaveBeenCalledTimes(1);
     wrapper.update();
     expect(wrapper.find('SmartSearchBar').prop('supportedTags')).toEqual(
@@ -68,7 +69,8 @@ describe('SearchBar', function() {
   });
 
   it('searches and selects an event field value', async function() {
-    const wrapper = await mount(<SearchBar {...props} />, options);
+    const wrapper = mount(<SearchBar {...props} />, options);
+    await tick();
     setQuery(wrapper, 'gpu:');
 
     expect(tagValuesMock).toHaveBeenCalledWith(
@@ -92,7 +94,8 @@ describe('SearchBar', function() {
   });
 
   it('does not requery for event field values if query does not change', async function() {
-    const wrapper = await mount(<SearchBar {...props} />, options);
+    const wrapper = mount(<SearchBar {...props} />, options);
+    await tick();
     setQuery(wrapper, 'gpu:');
 
     expect(tagValuesMock).toHaveBeenCalledTimes(1);
@@ -106,7 +109,8 @@ describe('SearchBar', function() {
   });
 
   it('removes highlight when query is empty', async function() {
-    const wrapper = await mount(<SearchBar {...props} />, options);
+    const wrapper = mount(<SearchBar {...props} />, options);
+    await tick();
     setQuery(wrapper, 'gpu');
 
     await tick();
@@ -120,7 +124,8 @@ describe('SearchBar', function() {
   });
 
   it('ignores negation ("!") at the beginning of search term', async function() {
-    const wrapper = await mount(<SearchBar {...props} />, options);
+    const wrapper = mount(<SearchBar {...props} />, options);
+    await tick();
 
     setQuery(wrapper, '!gp');
     await tick();
@@ -131,7 +136,8 @@ describe('SearchBar', function() {
   });
 
   it('ignores wildcard ("*") at the beginning of tag value query', async function() {
-    const wrapper = await mount(<SearchBar {...props} />, options);
+    const wrapper = mount(<SearchBar {...props} />, options);
+    await tick();
 
     setQuery(wrapper, '!gpu:*');
     await tick();
diff --git a/tests/js/spec/views/stream/__snapshots__/stream.spec.jsx.snap b/tests/js/spec/views/stream/__snapshots__/stream.spec.jsx.snap
index 6779678902..892d9f5e7f 100644
--- a/tests/js/spec/views/stream/__snapshots__/stream.spec.jsx.snap
+++ b/tests/js/spec/views/stream/__snapshots__/stream.spec.jsx.snap
@@ -253,18 +253,6 @@ exports[`Stream render() displays the group list 1`] = `
           "predefined": true,
           "values": Array [],
         },
-        "user.email": Object {
-          "key": "user.email",
-        },
-        "user.id": Object {
-          "key": "user.id",
-        },
-        "user.ip": Object {
-          "key": "user.ip",
-        },
-        "user.username": Object {
-          "key": "user.username",
-        },
       }
     }
   />
@@ -524,18 +512,6 @@ exports[`Stream toggles environment select all environments 1`] = `
           "predefined": true,
           "values": Array [],
         },
-        "user.email": Object {
-          "key": "user.email",
-        },
-        "user.id": Object {
-          "key": "user.id",
-        },
-        "user.ip": Object {
-          "key": "user.ip",
-        },
-        "user.username": Object {
-          "key": "user.username",
-        },
       }
     }
   />
