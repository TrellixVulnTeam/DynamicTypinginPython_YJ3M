commit b11bc4963cc42506af3d9b762eb82e894cc8eaa7
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri Mar 1 09:13:43 2019 +0100

    feat(hashing): Implement split hashing for system/app to clarify hash generation (#12227)

diff --git a/src/sentry/event_hashing.py b/src/sentry/event_hashing.py
index 08f1f46010..b0b6f66aab 100644
--- a/src/sentry/event_hashing.py
+++ b/src/sentry/event_hashing.py
@@ -4,7 +4,6 @@ import re
 import six
 
 from hashlib import md5
-from collections import OrderedDict
 
 from django.utils.encoding import force_bytes
 
@@ -19,34 +18,14 @@ def md5_from_hash(hash_bits):
     return result.hexdigest()
 
 
-def get_fingerprint_for_event(event):
-    fingerprint = event.data.get('fingerprint')
-    if fingerprint is None:
-        return ['{{ default }}']
-    return fingerprint
-
-
 def get_hashes_for_event(event):
-    return get_hashes_for_event_with_reason(event)[1]
-
-
-def get_hashes_for_event_with_reason(event):
     interfaces = event.get_interfaces()
     for interface in six.itervalues(interfaces):
         result = interface.compute_hashes(event.platform)
         if not result:
             continue
-        return (interface.path, result)
-
-    return ('no_interfaces', [''])
-
-
-def get_grouping_behavior(event):
-    data = event.data
-    if data.get('checksum') is not None:
-        return ('checksum', data['checksum'])
-    fingerprint = get_fingerprint_for_event(event)
-    return ('fingerprint', get_hashes_from_fingerprint_with_reason(event, fingerprint))
+        return result
+    return ['']
 
 
 def get_hashes_from_fingerprint(event, fingerprint):
@@ -68,23 +47,6 @@ def get_hashes_from_fingerprint(event, fingerprint):
     return hashes
 
 
-def get_hashes_from_fingerprint_with_reason(event, fingerprint):
-    if any(d in fingerprint for d in DEFAULT_FINGERPRINT_VALUES):
-        default_hashes = get_hashes_for_event_with_reason(event)
-        hash_count = len(default_hashes[1])
-    else:
-        hash_count = 1
-
-    hashes = OrderedDict((bit, []) for bit in fingerprint)
-    for idx in range(hash_count):
-        for bit in fingerprint:
-            if bit in DEFAULT_FINGERPRINT_VALUES:
-                hashes[bit].append(default_hashes)
-            else:
-                hashes[bit] = bit
-    return list(hashes.items())
-
-
 def calculate_event_hashes(event):
     # If a checksum is set, use that one.
     checksum = event.data.get('checksum')
diff --git a/src/sentry/interfaces/base.py b/src/sentry/interfaces/base.py
index 4ed15de01a..0802588800 100644
--- a/src/sentry/interfaces/base.py
+++ b/src/sentry/interfaces/base.py
@@ -198,14 +198,24 @@ class Interface(object):
     def to_json(self):
         return prune_empty_keys(self._data)
 
-    def get_hash(self, platform=None):
+    def get_hash(self, platform=None, variant='system'):
         return []
 
+    def get_hashes(self, platform=None):
+        system_hash = self.get_hash(platform, variant='system')
+        if not system_hash:
+            return {}
+
+        hashes = {'system': system_hash}
+
+        app_hash = self.get_hash(platform, variant='app')
+        if system_hash != app_hash and app_hash:
+            hashes['app'] = app_hash
+
+        return hashes
+
     def compute_hashes(self, platform=None):
-        result = self.get_hash(platform)
-        if not result:
-            return []
-        return [result]
+        return self.get_hashes(platform).values()
 
     def get_title(self):
         return _(type(self).__name__)
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 2c6d303d58..93096d0cdd 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -939,10 +939,12 @@ class SingleException(Interface):
             'stacktrace': stacktrace_meta,
         }
 
-    def get_hash(self, platform=None):
+    def get_hash(self, platform=None, variant='system'):
+        if variant not in ('app', 'system'):
+            return []
         output = None
         if self.stacktrace:
-            output = self.stacktrace.get_hash(platform=platform)
+            output = self.stacktrace.get_hash(platform=platform, variant=variant)
             if output and self.type:
                 output.append(self.type)
         if not output:
@@ -1034,18 +1036,9 @@ class Exception(Interface):
             'exc_omitted': self.exc_omitted,
         })
 
-    def compute_hashes(self, platform=None):
-        system_hash = self.get_hash(platform, system_frames=True)
-        if not system_hash:
+    def get_hash(self, platform=None, variant='system'):
+        if variant not in ('app', 'system'):
             return []
-
-        app_hash = self.get_hash(platform, system_frames=False)
-        if system_hash == app_hash or not app_hash:
-            return [system_hash]
-
-        return [system_hash, app_hash]
-
-    def get_hash(self, platform=None, system_frames=True):
         # optimize around the fact that some exceptions might have stacktraces
         # while others may not and we ALWAYS want stacktraces over values
         output = []
@@ -1054,7 +1047,7 @@ class Exception(Interface):
                 continue
             stack_hash = value.stacktrace.get_hash(
                 platform=platform,
-                system_frames=system_frames,
+                variant=variant,
             )
             if stack_hash:
                 output.extend(stack_hash)
@@ -1063,7 +1056,8 @@ class Exception(Interface):
         if not output:
             for value in self._values():
                 if value:
-                    output.extend(value.get_hash(platform=platform))
+                    output.extend(value.get_hash(platform=platform,
+                                                 variant=variant))
 
         return output
 
diff --git a/src/sentry/interfaces/message.py b/src/sentry/interfaces/message.py
index c8bcb752de..9ffbf69759 100644
--- a/src/sentry/interfaces/message.py
+++ b/src/sentry/interfaces/message.py
@@ -89,7 +89,9 @@ class Message(Interface):
             'params': self.params or None
         })
 
-    def get_hash(self, platform=None):
+    def get_hash(self, platform=None, variant='system'):
+        if variant not in ('app', 'system'):
+            return []
         return [self.message or self.formatted]
 
     def to_string(self, event, is_public=False, **kwargs):
diff --git a/src/sentry/interfaces/security.py b/src/sentry/interfaces/security.py
index ae9405f678..80043c661e 100644
--- a/src/sentry/interfaces/security.py
+++ b/src/sentry/interfaces/security.py
@@ -171,7 +171,9 @@ class Hpkp(SecurityReport):
     def get_culprit(self):
         return None
 
-    def get_hash(self, platform=None, is_processed_data=True):
+    def get_hash(self, platform=None, variant='system'):
+        if variant != 'system':
+            return []
         return ['hpkp', self.hostname]
 
     def get_message(self):
@@ -235,7 +237,9 @@ class ExpectStaple(SecurityReport):
     def get_culprit(self):
         return self.hostname
 
-    def get_hash(self, platform=None, is_processed_data=True):
+    def get_hash(self, platform=None, variant='system'):
+        if variant != 'system':
+            return []
         return ['expect-staple', self.hostname]
 
     def get_message(self):
@@ -297,7 +301,9 @@ class ExpectCT(SecurityReport):
     def get_culprit(self):
         return self.hostname
 
-    def get_hash(self, platform=None, is_processed_data=True):
+    def get_hash(self, platform=None, variant='system'):
+        if variant != 'system':
+            return []
         return ['expect-ct', self.hostname]
 
     def get_message(self):
@@ -353,7 +359,9 @@ class Csp(SecurityReport):
 
         return cls.to_python(kwargs)
 
-    def get_hash(self, platform=None, is_processed_data=True):
+    def get_hash(self, platform=None, variant='system'):
+        if variant != 'system':
+            return []
         if self._local_script_violation_type:
             uri = "'%s'" % self._local_script_violation_type
         else:
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 18a252cdc5..6c1db1513f 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -452,7 +452,7 @@ class Frame(Interface):
             'colno': self.colno
         })
 
-    def get_hash(self, platform=None):
+    def get_hash(self, platform=None, variant='system'):
         """
         The hash of the frame varies depending on the data available.
 
@@ -462,6 +462,9 @@ class Frame(Interface):
 
         This is one of the few areas in Sentry that isn't platform-agnostic.
         """
+        if variant not in ('app', 'system'):
+            return []
+
         platform = self.platform or platform
         output = []
         # Safari throws [native code] frames in for calls like ``forEach``
@@ -834,18 +837,10 @@ class Stacktrace(Interface):
             'registers': self.registers,
         })
 
-    def compute_hashes(self, platform=None):
-        system_hash = self.get_hash(platform, system_frames=True)
-        if not system_hash:
+    def get_hash(self, platform=None, variant='system'):
+        if variant not in ('app', 'system'):
             return []
 
-        app_hash = self.get_hash(platform, system_frames=False)
-        if system_hash == app_hash or not app_hash:
-            return [system_hash]
-
-        return [system_hash, app_hash]
-
-    def get_hash(self, platform=None, system_frames=True):
         frames = self.frames
 
         # TODO(dcramer): this should apply only to platform=javascript
@@ -859,6 +854,7 @@ class Stacktrace(Interface):
         if stack_invalid:
             return []
 
+        system_frames = variant == 'system'
         if not system_frames:
             total_frames = len(frames)
             frames = [f for f in frames if f.in_app] or frames
@@ -876,11 +872,11 @@ class Stacktrace(Interface):
         # stacktraces that only differ by the number of recursive calls should
         # hash the same, so we squash recursive calls by comparing each frame
         # to the previous frame
-        output.extend(frames[0].get_hash(platform))
+        output.extend(frames[0].get_hash(platform, variant=variant))
         prev_frame = frames[0]
         for frame in frames[1:]:
             if not is_recursion(frame, prev_frame):
-                output.extend(frame.get_hash(platform))
+                output.extend(frame.get_hash(platform, variant=variant))
             prev_frame = frame
         return output
 
diff --git a/src/sentry/interfaces/template.py b/src/sentry/interfaces/template.py
index 20c8522749..5c8e21a949 100644
--- a/src/sentry/interfaces/template.py
+++ b/src/sentry/interfaces/template.py
@@ -58,7 +58,9 @@ class Template(Interface):
         }
         return cls(**kwargs)
 
-    def get_hash(self, platform=None):
+    def get_hash(self, platform=None, variant='system'):
+        if variant not in ('app', 'system'):
+            return []
         return [self.filename, self.context_line]
 
     def to_string(self, event, is_public=False, **kwargs):
diff --git a/src/sentry/interfaces/threads.py b/src/sentry/interfaces/threads.py
index 63fdfbdbfc..8500113cf0 100644
--- a/src/sentry/interfaces/threads.py
+++ b/src/sentry/interfaces/threads.py
@@ -86,17 +86,12 @@ class Threads(Interface):
         else:
             return meta
 
-    def get_hash(self, platform=None):
+    def get_hash(self, platform=None, variant='system'):
+        if variant not in ('app', 'system'):
+            return []
         if len(self.values) != 1:
             return []
         stacktrace = self.values[0].get('stacktrace')
         if not stacktrace:
             return []
-        system_hash = stacktrace.get_hash(system_frames=True)
-        if not system_hash:
-            return []
-        app_hash = stacktrace.get_hash(system_frames=False)
-        if system_hash == app_hash or not app_hash:
-            return [system_hash]
-
-        return [system_hash, app_hash]
+        return stacktrace.get_hash(platform, variant=variant)
diff --git a/src/sentry/management/commands/diff.py b/src/sentry/management/commands/diff.py
deleted file mode 100644
index d0f30b4cae..0000000000
--- a/src/sentry/management/commands/diff.py
+++ /dev/null
@@ -1,105 +0,0 @@
-"""
-sentry.management.commands.diff
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import
-
-from django.core.management.base import BaseCommand, CommandError
-
-import six
-import sys
-
-from click import echo
-from optparse import make_option
-
-
-def get_group_event(pk):
-    from sentry.models import Group, Event
-    event = Group.objects.get(pk=pk).get_latest_event()
-    Event.objects.bind_nodes([event], 'data')
-    return event
-
-
-def get_event(pk):
-    from sentry.models import Event
-    event = Event.objects.get(pk=pk)
-    Event.objects.bind_nodes([event], 'data')
-    return event
-
-
-def print_unified_diff(left, right):
-    from difflib import unified_diff
-    from sentry.event_hashing import get_grouping_behavior
-
-    left_id = left.id
-    right_id = right.id
-
-    left = get_grouping_behavior(left)
-    right = get_grouping_behavior(right)
-
-    if left == right:
-        return
-
-    if left[0] != right[0]:
-        echo('! Grouping behavior differs: %r vs %r' % (left[0], right[0]))
-        return
-
-    echo('> Same grouping behavior: %r' % left[0])
-
-    # These should only be fingerprints at this point
-
-    left = left[1]
-    right = right[1]
-
-    left_fingerprint = [k[0] for k in left]
-    right_fingerprint = [k[0] for k in right]
-    if left_fingerprint != right_fingerprint:
-        echo(
-            '!! Different fingerprint algorithms: %r vs %r' % (left_fingerprint, right_fingerprint)
-        )
-        return
-
-    bits = left_fingerprint
-    echo('> Same fingerprint algorithm: %r' % bits)
-
-    left = [k[1] for k in left]
-    right = [k[1] for k in right]
-    for idx, (a, b) in enumerate(zip(left, right)):
-        bit = bits[idx]
-        for ((a_key, a_hashes), (b_key, b_hashes)) in zip(a, b):
-            if a_key != b_key:
-                echo('>> Different interfaces for %r: %r vs %r' % (bit, a_key, b_key))
-                continue
-            for idx, (a_hash, b_hash) in enumerate(zip(a_hashes, b_hashes)):
-                a_hash = [six.text_type(h) + '\n' for h in a_hash]
-                b_hash = [six.text_type(h) + '\n' for h in b_hash]
-                a_file = '<Event id=%d> %r %r[%d]' % (left_id, bit, a_key, idx)
-                b_file = '<Event id=%d> %r %r[%d]' % (right_id, bit, b_key, idx)
-                for line in unified_diff(a_hash, b_hash, fromfile=a_file, tofile=b_file):
-                    sys.stdout.write(line)
-
-
-class Command(BaseCommand):
-    help = 'Display a diff between two events'
-
-    option_list = BaseCommand.option_list + (
-        make_option(
-            '--group',
-            action='store_true',
-            dest='group',
-            default=False,
-            help='Compare latest event by group id'
-        ),
-    )
-
-    def handle(self, *args, **options):
-        if len(args) != 2:
-            raise CommandError('Must specify two ids to diff')
-
-        if args[0] == args[1]:
-            raise CommandError('Specify different ids')
-
-        print_unified_diff(*map(get_group_event if options['group'] else get_event, args))
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index 5e92b5a09f..eaa3714d74 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -167,10 +167,16 @@ class StacktraceTest(TestCase):
         )
 
         result = interface.compute_hashes()
-        assert result == [
+        assert sorted(result) == sorted([
             ['foo.py', 1, 'bar.py', 1],
             ['foo.py', 1],
-        ]
+        ])
+
+        result = interface.get_hashes()
+        assert result == {
+            'system': ['foo.py', 1, 'bar.py', 1],
+            'app': ['foo.py', 1],
+        }
 
     def test_compute_hashes(self):
         interface = Stacktrace.to_python(
@@ -188,8 +194,15 @@ class StacktraceTest(TestCase):
                 ]
             )
         )
+
         result = interface.compute_hashes('python')
-        assert result == [['a/foo.py', 1, 'a/bar.py', 1], ['a/foo.py', 1]]
+        assert sorted(result) == sorted([['a/foo.py', 1, 'a/bar.py', 1], ['a/foo.py', 1]])
+
+        result = interface.get_hashes('python')
+        assert result == {
+            'system': ['a/foo.py', 1, 'a/bar.py', 1],
+            'app': ['a/foo.py', 1],
+        }
 
     def test_compute_hashes_cocoa(self):
         interface = Stacktrace.to_python(
@@ -208,7 +221,7 @@ class StacktraceTest(TestCase):
             )
         )
         result = interface.compute_hashes('cocoa')
-        assert result == [['bar.m', 1, 'baz.m', 1], ['bar.m', 1]]
+        assert sorted(result) == sorted([['bar.m', 1, 'baz.m', 1], ['bar.m', 1]])
 
     def test_compute_hashes_with_minimal_app_frames(self):
         frames = [{
diff --git a/tests/sentry/interfaces/test_threads.py b/tests/sentry/interfaces/test_threads.py
index 6c84d293e7..dcca036fcf 100644
--- a/tests/sentry/interfaces/test_threads.py
+++ b/tests/sentry/interfaces/test_threads.py
@@ -78,7 +78,7 @@ class ThreadsTest(TestCase):
 
     def test_compute_hashes(self):
         result = self.interface.compute_hashes()
-        self.assertEquals(result, [[['foo/baz.c', 'main']]])
+        self.assertEquals(result, [['foo/baz.c', 'main']])
 
     def test_no_hash(self):
         interface = Threads.to_python(
