commit 2e1127c9c60416ab550fe3eed994a01235bd0992
Author: Mark Story <mark@mark-story.com>
Date:   Fri Mar 15 16:52:55 2019 -0400

    ref(ui) Refactor team select implementation to be the same (#12406)
    
    Collapse the implementation of the two team select widgets to use the
    same implementation.
    
    Fixes SEN-242

diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/teamSelect.jsx b/src/sentry/static/sentry/app/views/settings/components/teamSelect.jsx
similarity index 76%
rename from src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/teamSelect.jsx
rename to src/sentry/static/sentry/app/views/settings/components/teamSelect.jsx
index e227f33717..529552d55a 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/teamSelect.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/teamSelect.jsx
@@ -6,6 +6,7 @@ import {debounce} from 'lodash';
 import {Box} from 'grid-emotion';
 import {t} from 'app/locale';
 import Button from 'app/components/button';
+import Confirm from 'app/components/confirm';
 import SentryTypes from 'app/sentryTypes';
 import Link from 'app/components/link';
 import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
@@ -20,9 +21,19 @@ class TeamSelect extends React.Component {
     api: PropTypes.object.isRequired,
     organization: SentryTypes.Organization.isRequired,
     disabled: PropTypes.bool,
+    // Teams that are already selected.
     selectedTeams: PropTypes.array.isRequired,
+    // callback when teams are added
     onAddTeam: PropTypes.func.isRequired,
+    // Callback when teams are removed
     onRemoveTeam: PropTypes.func.isRequired,
+
+    // Optional menu header.
+    menuHeader: PropTypes.element,
+
+    // Message to display when the last team is removed
+    // if empty no confirm will be displayed.
+    confirmLastTeamRemoveMessage: PropTypes.string,
   };
 
   state = {
@@ -55,7 +66,7 @@ class TeamSelect extends React.Component {
   };
 
   renderTeamAddDropDown() {
-    const {disabled, selectedTeams} = this.props;
+    const {disabled, selectedTeams, menuHeader} = this.props;
     const {teams} = this.state;
     const noTeams = teams === null || teams.length === 0;
     const isDisabled = noTeams || disabled;
@@ -81,6 +92,7 @@ class TeamSelect extends React.Component {
         onChange={this.handleQueryUpdate}
         onSelect={this.handleAddTeam}
         emptyMessage={t('No teams')}
+        menuHeader={menuHeader}
         disabled={isDisabled}
       >
         {({isOpen}) => (
@@ -93,10 +105,20 @@ class TeamSelect extends React.Component {
   }
 
   renderBody() {
-    const {organization, selectedTeams, disabled} = this.props;
+    const {
+      organization,
+      selectedTeams,
+      disabled,
+      confirmLastTeamRemoveMessage,
+    } = this.props;
+
     if (selectedTeams.length === 0) {
       return <EmptyMessage>{t('No Teams assigned')}</EmptyMessage>;
     }
+    const confirmMessage =
+      selectedTeams.length === 1 && confirmLastTeamRemoveMessage
+        ? confirmLastTeamRemoveMessage
+        : null;
 
     return selectedTeams.map(team => {
       return (
@@ -106,6 +128,7 @@ class TeamSelect extends React.Component {
           team={team}
           onRemove={this.handleRemove}
           disabled={disabled}
+          confirmMessage={confirmMessage}
         />
       );
     });
@@ -126,20 +149,22 @@ class TeamSelect extends React.Component {
 }
 
 const TeamRow = props => {
-  const {orgId, team, onRemove, disabled} = props;
+  const {orgId, team, onRemove, disabled, confirmMessage} = props;
   return (
     <PanelItem p={2} align="center">
       <Box flex={1}>
         <Link to={`/settings/${orgId}/teams/${team}/`}>#{team}</Link>
       </Box>
-      <Button
-        size="xsmall"
-        icon="icon-circle-subtract"
-        onClick={() => onRemove(team)}
+      <Confirm
+        message={confirmMessage}
+        bypass={!confirmMessage}
+        onConfirm={() => onRemove(team)}
         disabled={disabled}
       >
-        {t('Remove')}
-      </Button>
+        <Button size="xsmall" icon="icon-circle-subtract" disabled={disabled}>
+          {t('Remove')}
+        </Button>
+      </Confirm>
     </PanelItem>
   );
 };
@@ -149,6 +174,7 @@ TeamRow.propTypes = {
   team: PropTypes.string.isRequired,
   orgId: PropTypes.string.isRequired,
   onRemove: PropTypes.func.isRequired,
+  confirmMessage: PropTypes.string,
 };
 
 const TeamDropdownElement = styled.div`
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
index 2c51c56372..deacdf6ca0 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
@@ -15,10 +15,10 @@ import OrganizationState from 'app/mixins/organizationState';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import TextBlock from 'app/views/settings/components/text/textBlock';
 import TextField from 'app/components/forms/textField';
+import TeamSelect from 'app/views/settings/components/teamSelect';
 import replaceRouterParams from 'app/utils/replaceRouterParams';
 
 import RoleSelect from './roleSelect';
-import TeamSelect from './teamSelect';
 
 // These don't have allowed and are only used for superusers. superceded by server result of allowed roles
 const STATIC_ROLE_LIST = [
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx
index 13e4fa6cb9..048e69bcdd 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx
@@ -17,11 +17,11 @@ import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
 import {removeAuthenticator} from 'app/actionCreators/account';
 import SentryTypes from 'app/sentryTypes';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import TeamSelect from 'app/views/settings/components/teamSelect';
 import Tooltip from 'app/components/tooltip';
 import recreateRoute from 'app/utils/recreateRoute';
 
 import RoleSelect from './inviteMember/roleSelect';
-import TeamSelect from './inviteMember/teamSelect';
 
 const NOT_ENROLLED = t('Not enrolled in two-factor authentication');
 const NO_PERMISSION = t('You do not have permission to perform this action');
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx b/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx
index 4dacb6b2ec..bebc44a918 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx
@@ -1,96 +1,18 @@
-import {Box} from 'grid-emotion';
-import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
 import styled, {css} from 'react-emotion';
-import * as Sentry from '@sentry/browser';
 
-import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
 import {getOrganizationState} from 'app/mixins/organizationState';
 import {openCreateTeamModal} from 'app/actionCreators/modal';
 import {removeTeamFromProject, addTeamToProject} from 'app/actionCreators/projects';
-import {t, tct} from 'app/locale';
-import ApiMixin from 'app/mixins/apiMixin';
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
-import Button from 'app/components/button';
-import Confirm from 'app/components/confirm';
-import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
-import DropdownButton from 'app/components/dropdownButton';
-import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import Link from 'app/components/link';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import TeamSelect from 'app/views/settings/components/teamSelect';
 import Tooltip from 'app/components/tooltip';
 import space from 'app/styles/space';
 
-const TeamRow = createReactClass({
-  displayName: 'TeamRow',
-
-  propTypes: {
-    orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
-    team: PropTypes.object.isRequired,
-    access: PropTypes.object.isRequired,
-    onRemove: PropTypes.func.isRequired,
-    teamCount: PropTypes.number.isRequired,
-  },
-
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      loading: false,
-      error: false,
-    };
-  },
-
-  handleRemove() {
-    if (this.state.loading) return;
-
-    const {orgId, projectId, team} = this.props;
-
-    removeTeamFromProject(this.api, orgId, projectId, team.slug)
-      .then(() => this.props.onRemove())
-      .catch(() => {
-        this.setState({
-          error: true,
-          loading: false,
-        });
-      });
-  },
-
-  render() {
-    const {team, access, orgId, projectId} = this.props;
-    const hasAccess = access.has('project:write');
-
-    return (
-      <PanelItem p={2} align="center">
-        <Box flex={1}>
-          <Link to={`/settings/${orgId}/teams/${team.slug}/`}>#{team.slug}</Link>
-        </Box>
-        <Confirm
-          message={tct(
-            'This is the last team with access to this project. Removing it will mean ' +
-              'only owners and managers will be able to access the project pages. Are ' +
-              'you sure you want to remove this team from the project [projectId]?',
-            {projectId}
-          )}
-          bypass={this.props.teamCount > 1}
-          onConfirm={this.handleRemove}
-          disabled={!hasAccess || this.state.loading}
-        >
-          <Button
-            size="xsmall"
-            icon="icon-circle-subtract"
-            disabled={!hasAccess || this.state.loading}
-          >
-            {t('Remove')}
-          </Button>
-        </Confirm>
-      </PanelItem>
-    );
-  },
-});
-
 class ProjectTeams extends AsyncView {
   getEndpoints() {
     const {orgId, projectId} = this.props.params;
@@ -108,6 +30,22 @@ class ProjectTeams extends AsyncView {
     );
   };
 
+  handleRemove = teamSlug => {
+    if (this.state.loading) {
+      return;
+    }
+
+    const {orgId, projectId} = this.props.params;
+    const team = this.state.allTeams.find(tm => tm.slug === teamSlug);
+
+    removeTeamFromProject(this.api, orgId, projectId, team.slug)
+      .then(() => this.handleRemovedTeam(team))
+      .catch(() => {
+        addErrorMessage(t('Could not remove the %s team', team.slug));
+        this.setState({loading: false});
+      });
+  };
+
   handleRemovedTeam = removedTeam => {
     this.setState(prevState => {
       return {
@@ -126,11 +64,12 @@ class ProjectTeams extends AsyncView {
     });
   };
 
-  handleAdd = selection => {
-    if (this.state.loading) return;
-
-    const team = this.state.allTeams.find(tm => tm.id === selection.value);
+  handleAdd = teamSlug => {
+    if (this.state.loading) {
+      return;
+    }
 
+    const team = this.state.allTeams.find(tm => tm.slug === teamSlug);
     const {orgId, projectId} = this.props.params;
 
     addTeamToProject(this.api, orgId, projectId, team).then(
@@ -149,7 +88,9 @@ class ProjectTeams extends AsyncView {
   handleCreateTeam = e => {
     const {project, organization} = this.props;
 
-    if (!this.canCreateTeam()) return;
+    if (!this.canCreateTeam()) {
+      return;
+    }
 
     e.stopPropagation();
     e.preventDefault();
@@ -166,29 +107,18 @@ class ProjectTeams extends AsyncView {
     });
   };
 
-  renderAddTeamToProject() {
-    const projectTeams = new Set(this.state.projectTeams.map(team => team.slug));
-    const canAddTeam = this.props.organization.access.includes('project:write');
-    const canCreateTeam = this.canCreateTeam();
-    let teamsToAdd;
+  renderBody() {
+    const {params, organization} = this.props;
 
-    if (!this.state.allTeams) {
-      teamsToAdd = [];
-      Sentry.withScope(scope => {
-        scope.setExtra('state', this.state);
-        Sentry.captureException(new Error('This.state.allTeams is null'));
-      });
-    } else {
-      teamsToAdd = this.state.allTeams
-        .filter(team => {
-          return team.hasAccess && !projectTeams.has(team.slug);
-        })
-        .map(team => ({
-          value: team.id,
-          searchKey: team.slug,
-          label: <TeamDropdownElement>#{team.slug}</TeamDropdownElement>,
-        }));
-    }
+    const canCreateTeam = this.canCreateTeam();
+    const hasAccess = organization.access.includes('project:write');
+    const confirmRemove = t(
+      'This is the last team with access to this project. Removing it will mean ' +
+        'only owners and managers will be able to access the project pages. Are ' +
+        'you sure you want to remove this team from the project %s?',
+      params.projectId
+    );
+    const projectTeams = this.state.projectTeams.map(p => p.slug);
 
     const menuHeader = (
       <StyledTeamsLabel>
@@ -205,77 +135,24 @@ class ProjectTeams extends AsyncView {
       </StyledTeamsLabel>
     );
 
-    return (
-      <DropdownAutoComplete
-        items={teamsToAdd}
-        onSelect={this.handleAdd}
-        menuHeader={menuHeader}
-        emptyMessage={t('No teams')}
-        disabled={!canAddTeam}
-      >
-        {({isOpen, selectedItem}) => (
-          <DropdownButton isOpen={isOpen} size="xsmall" disabled={!canAddTeam}>
-            {tct('Add Team to [projectId]', {projectId: this.props.params.projectId})}
-          </DropdownButton>
-        )}
-      </DropdownAutoComplete>
-    );
-  }
-
-  renderEmpty() {
-    return (
-      <EmptyMessage>{t('There are no teams with access to this project.')}</EmptyMessage>
-    );
-  }
-
-  renderResults() {
-    const {orgId, projectId} = this.props.params;
-    const access = new Set(this.props.organization.access);
-
-    return this.state.projectTeams.map(team => {
-      return (
-        <TeamRow
-          access={access}
-          key={team.id}
-          orgId={orgId}
-          projectId={projectId}
-          team={team}
-          onRemove={this.handleRemovedTeam.bind(this, team)}
-          teamCount={this.state.projectTeams.length}
-        />
-      );
-    });
-  }
-
-  renderBody() {
-    const {params} = this.props;
-    const body =
-      this.state.projectTeams.length > 0 ? this.renderResults() : this.renderEmpty();
-
     return (
       <div>
-        <SettingsPageHeader
-          title={tct('[projectId] Teams', {projectId: params.projectId})}
+        <SettingsPageHeader title={t('%s Teams', params.projectId)} />
+        <TeamSelect
+          organization={organization}
+          selectedTeams={projectTeams}
+          onAddTeam={this.handleAdd}
+          onRemoveTeam={this.handleRemove}
+          menuHeader={menuHeader}
+          confirmLastTeamRemoveMessage={confirmRemove}
+          disabled={!hasAccess}
         />
-        <Panel>
-          <PanelHeader hasButtons={true}>
-            <div>{t('Team')}</div>
-            <div>{this.renderAddTeamToProject()}</div>
-          </PanelHeader>
-          <PanelBody>{body}</PanelBody>
-        </Panel>
       </div>
     );
   }
 }
 
-const TeamDropdownElement = styled('div')`
-  padding: ${space(0.5)} ${space(0.25)};
-  text-transform: none;
-`;
-
 const StyledTeamsLabel = styled('div')`
-  width: 250px;
   font-size: 0.875em;
   padding: ${space(0.5)};
   text-transform: uppercase;
diff --git a/tests/js/spec/views/__snapshots__/projectTeams.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectTeams.spec.jsx.snap
index 8290a964ab..a8490151b9 100644
--- a/tests/js/spec/views/__snapshots__/projectTeams.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectTeams.spec.jsx.snap
@@ -7,105 +7,68 @@ exports[`ProjectTeams renders 1`] = `
   <div>
     <SettingsPageHeading
       noTitleStyles={false}
-      title={
-        <span>
-          <span>
-            project-slug
-          </span>
-          <span>
-             Teams
-          </span>
-        </span>
-      }
+      title="project-slug Teams"
     />
-    <Panel>
-      <PanelHeader
-        hasButtons={true}
-      >
-        <div>
-          Team
-        </div>
-        <div>
-          <DropdownAutoComplete
-            alignMenu="right"
-            disabled={false}
-            emptyMessage="No teams"
-            items={
-              Array [
-                Object {
-                  "label": <TeamDropdownElement>
-                    #
-                    team-slug-2
-                  </TeamDropdownElement>,
-                  "searchKey": "team-slug-2",
-                  "value": "2",
-                },
-              ]
-            }
-            menuHeader={
-              <StyledTeamsLabel>
-                Teams
-                <Tooltip
-                  disabled={true}
-                  title="You must be a project admin to create teams"
-                  tooltipOptions={
-                    Object {
-                      "placement": "top",
-                    }
-                  }
-                >
-                  <StyledCreateTeamLink
-                    disabled={false}
-                    onClick={[Function]}
-                  >
-                    Create Team
-                  </StyledCreateTeamLink>
-                </Tooltip>
-              </StyledTeamsLabel>
+    <withApi(TeamSelect)
+      confirmLastTeamRemoveMessage="This is the last team with access to this project. Removing it will mean only owners and managers will be able to access the project pages. Are you sure you want to remove this team from the project project-slug?"
+      disabled={false}
+      menuHeader={
+        <StyledTeamsLabel>
+          Teams
+          <Tooltip
+            disabled={true}
+            title="You must be a project admin to create teams"
+            tooltipOptions={
+              Object {
+                "placement": "top",
+              }
             }
-            onSelect={[Function]}
           >
-            <Component />
-          </DropdownAutoComplete>
-        </div>
-      </PanelHeader>
-      <PanelBody
-        direction="column"
-        disablePadding={true}
-        flex={false}
-      >
-        <TeamRow
-          access={
-            Set {
-              "org:read",
-              "org:write",
-              "org:admin",
-              "org:integrations",
-              "project:read",
-              "project:write",
-              "project:admin",
-              "team:read",
-              "team:write",
-              "team:admin",
-            }
-          }
-          key="1"
-          onRemove={[Function]}
-          orgId="org-slug"
-          projectId="project-slug"
-          team={
-            Object {
-              "id": "1",
-              "isMember": true,
-              "memberCount": 0,
-              "name": "Team Name",
-              "slug": "team-slug",
-            }
-          }
-          teamCount={1}
-        />
-      </PanelBody>
-    </Panel>
+            <StyledCreateTeamLink
+              disabled={false}
+              onClick={[Function]}
+            >
+              Create Team
+            </StyledCreateTeamLink>
+          </Tooltip>
+        </StyledTeamsLabel>
+      }
+      onAddTeam={[Function]}
+      onRemoveTeam={[Function]}
+      organization={
+        Object {
+          "access": Array [
+            "org:read",
+            "org:write",
+            "org:admin",
+            "org:integrations",
+            "project:read",
+            "project:write",
+            "project:admin",
+            "team:read",
+            "team:write",
+            "team:admin",
+          ],
+          "features": Array [],
+          "id": "3",
+          "name": "Organization Name",
+          "onboardingTasks": Array [],
+          "projects": Array [],
+          "scrapeJavaScript": true,
+          "slug": "org-slug",
+          "status": Object {
+            "id": "active",
+            "name": "active",
+          },
+          "teams": Array [],
+        }
+      }
+      selectedTeams={
+        Array [
+          "team-slug",
+        ]
+      }
+    />
   </div>
 </SideEffect(DocumentTitle)>
 `;
diff --git a/tests/js/spec/views/projectTeams.spec.jsx b/tests/js/spec/views/projectTeams.spec.jsx
index 7bf7a836f2..49f9ac681f 100644
--- a/tests/js/spec/views/projectTeams.spec.jsx
+++ b/tests/js/spec/views/projectTeams.spec.jsx
@@ -46,7 +46,7 @@ describe('ProjectTeams', function() {
     modals.openCreateTeamModal.mockRestore();
   });
 
-  it('renders', function() {
+  it('renders', async function() {
     const wrapper = shallow(
       <ProjectTeams
         params={{orgId: org.slug, projectId: project.slug}}
@@ -54,6 +54,9 @@ describe('ProjectTeams', function() {
       />,
       TestStubs.routerContext()
     );
+    // Wait for team list to fetch.
+    await wrapper.update();
+
     expect(wrapper).toMatchSnapshot();
   });
 
@@ -85,6 +88,8 @@ describe('ProjectTeams', function() {
       />,
       TestStubs.routerContext()
     );
+    // Wait for team list to fetch.
+    await wrapper.update();
 
     expect(mock).not.toHaveBeenCalled();
 
@@ -122,7 +127,7 @@ describe('ProjectTeams', function() {
     );
   });
 
-  it('can associate a team with project', function() {
+  it('can associate a team with project', async function() {
     const endpoint = `/projects/${org.slug}/${project.slug}/teams/${team2.slug}/`;
     const mock = MockApiClient.addMockResponse({
       url: endpoint,
@@ -137,6 +142,8 @@ describe('ProjectTeams', function() {
       />,
       TestStubs.routerContext()
     );
+    // Wait for team list to fetch.
+    await wrapper.update();
 
     expect(mock).not.toHaveBeenCalled();
 
@@ -156,11 +163,6 @@ describe('ProjectTeams', function() {
   });
 
   it('creates a new team adds it to current project using the "create team modal" in dropdown', async function() {
-    MockApiClient.addMockResponse({
-      url: '/organizations/',
-      body: [org],
-    });
-
     MockApiClient.addMockResponse({
       url: '/internal/health/',
       body: {},
@@ -169,6 +171,10 @@ describe('ProjectTeams', function() {
       url: '/assistant/',
       body: {},
     });
+    MockApiClient.addMockResponse({
+      url: '/organizations/',
+      body: [org],
+    });
     const addTeamToProject = MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/${project.slug}/teams/new-team/`,
       method: 'POST',
@@ -189,12 +195,14 @@ describe('ProjectTeams', function() {
       </App>,
       TestStubs.routerContext()
     );
+    // Wait for team list to fetch.
+    await wrapper.update();
 
-    // open dropdown
-    wrapper.find('DropdownButton').simulate('click');
+    // Open the dropdown
+    wrapper.find('TeamSelect DropdownButton').simulate('click');
 
     // Click "Create Team" inside of dropdown
-    wrapper.find('StyledCreateTeamLink').simulate('click');
+    wrapper.find('TeamSelect StyledCreateTeamLink').simulate('click');
 
     // action creator to open "create team modal" is called
     expect(modals.openCreateTeamModal).toHaveBeenCalledWith(
