commit c428a93ccf562ecde2d2f35fd5fbda297bfd253c
Author: Stephen Cefali <scefali@sentry.io>
Date:   Fri Sep 13 12:26:43 2019 -0700

    chore(ts): move modal files to typescript (#14709)

diff --git a/src/sentry/static/sentry/app/actionCreators/modal.jsx b/src/sentry/static/sentry/app/actionCreators/modal.tsx
similarity index 78%
rename from src/sentry/static/sentry/app/actionCreators/modal.jsx
rename to src/sentry/static/sentry/app/actionCreators/modal.tsx
index 8a08356a02..e810bc9822 100644
--- a/src/sentry/static/sentry/app/actionCreators/modal.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/modal.tsx
@@ -1,12 +1,29 @@
 import React from 'react';
 import {css} from 'react-emotion';
+import {ModalHeader, ModalBody, ModalFooter} from 'react-bootstrap';
 
 import ModalActions from 'app/actions/modalActions';
 
+export type RenderProps = {
+  closeModal: () => void;
+  Header: typeof ModalHeader;
+  Body: typeof ModalBody;
+  Footer: typeof ModalFooter;
+};
+
+export type ModalOptions = {
+  onClose?: () => void;
+  modalClassName?: string;
+  type?: string;
+};
+
 /**
  * Show a modal
  */
-export function openModal(renderer, options) {
+export function openModal(
+  renderer: (renderProps: RenderProps) => React.ReactNode,
+  options?: ModalOptions
+) {
   ModalActions.openModal(renderer, options);
 }
 
@@ -17,7 +34,15 @@ export function closeModal() {
   ModalActions.closeModal();
 }
 
-export function openSudo({onClose, ...args} = {}) {
+export function openSudo({
+  onClose,
+  ...args
+}: {
+  onClose?: () => void;
+  superuser?: boolean;
+  sudo?: boolean;
+  retryRequest?: () => Promise<any>;
+} = {}) {
   import(/* webpackChunkName: "SudoModal" */ 'app/components/modals/sudoModal')
     .then(mod => mod.default)
     .then(SudoModal =>
@@ -28,7 +53,7 @@ export function openSudo({onClose, ...args} = {}) {
     );
 }
 
-export function openDiffModal(options) {
+export function openDiffModal(options: ModalOptions) {
   import(/* webpackChunkName: "DiffModal" */ 'app/components/modals/diffModal')
     .then(mod => mod.default)
     .then(Modal => {
@@ -64,7 +89,7 @@ export function openDiffModal(options) {
  * @param Object options
  * @param Object options.organization The organization to create a team for
  */
-export function openCreateIncidentModal(options = {}) {
+export function openCreateIncidentModal(options: ModalOptions = {}) {
   import(/* webpackChunkName: "CreateIncidentModal" */ 'app/components/modals/createIncidentModal')
     .then(mod => mod.default)
     .then(Modal => {
@@ -80,7 +105,7 @@ export function openCreateIncidentModal(options = {}) {
  * @param Object options.project (optional) An initial project to add the team to. This may be deprecated soon as
  * we may add a project selection inside of the modal flow
  */
-export function openCreateTeamModal(options = {}) {
+export function openCreateTeamModal(options: ModalOptions = {}) {
   import(/* webpackChunkName: "CreateTeamModal" */ 'app/components/modals/createTeamModal')
     .then(mod => mod.default)
     .then(Modal => {
@@ -94,7 +119,7 @@ export function openCreateTeamModal(options = {}) {
  * @param Object options.organization The organization to create a rules for
  * @param Object options.project The project to create a rules for
  */
-export function openCreateOwnershipRule(options = {}) {
+export function openCreateOwnershipRule(options: ModalOptions = {}) {
   import(/* webpackChunkName: "CreateOwnershipRuleModal" */ 'app/components/modals/createOwnershipRuleModal')
     .then(mod => mod.default)
     .then(Modal => {
@@ -104,7 +129,7 @@ export function openCreateOwnershipRule(options = {}) {
     });
 }
 
-export function openCommandPalette(options = {}) {
+export function openCommandPalette(options: ModalOptions = {}) {
   import(/* webpackChunkName: "CommandPalette" */ 'app/components/modals/commandPalette')
     .then(mod => mod.default)
     .then(Modal => {
@@ -114,7 +139,7 @@ export function openCommandPalette(options = {}) {
     });
 }
 
-export function openRecoveryOptions(options = {}) {
+export function openRecoveryOptions(options: ModalOptions = {}) {
   import(/* webpackChunkName: "RecoveryOptionsModal" */ 'app/components/modals/recoveryOptionsModal')
     .then(mod => mod.default)
     .then(Modal => {
@@ -128,7 +153,7 @@ export function openRecoveryOptions(options = {}) {
  * @param Object options.provider The integration provider to show the details for
  * @param Function options.onAddIntegration Called after a new integration is added
  */
-export function openIntegrationDetails(options = {}) {
+export function openIntegrationDetails(options: ModalOptions = {}) {
   import(/* webpackChunkName: "IntegrationDetailsModal" */ 'app/components/modals/integrationDetailsModal')
     .then(mod => mod.default)
     .then(Modal => {
@@ -136,7 +161,7 @@ export function openIntegrationDetails(options = {}) {
     });
 }
 
-export function redirectToProject(newProjectSlug) {
+export function redirectToProject(newProjectSlug: string) {
   import(/* webpackChunkName: "RedirectToProjectModal" */ 'app/components/modals/redirectToProject')
     .then(mod => mod.default)
     .then(Modal => {
@@ -154,7 +179,7 @@ export function openHelpSearchModal() {
     });
 }
 
-export function openSentryAppDetailsModal(options = {}) {
+export function openSentryAppDetailsModal(options: ModalOptions = {}) {
   import(/* webpackChunkName: "SentryAppDetailsModal" */ 'app/components/modals/sentryAppDetailsModal')
     .then(mod => mod.default)
     .then(Modal => {
@@ -162,7 +187,7 @@ export function openSentryAppDetailsModal(options = {}) {
     });
 }
 
-export function openDebugFileSourceModal(options = {}) {
+export function openDebugFileSourceModal(options: ModalOptions = {}) {
   import(/* webpackChunkName: "DebugFileSourceModal" */ 'app/components/modals/debugFileSourceModal')
     .then(mod => mod.default)
     .then(Modal => {
diff --git a/src/sentry/static/sentry/app/actions/modalActions.jsx b/src/sentry/static/sentry/app/actions/modalActions.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/actions/modalActions.jsx
rename to src/sentry/static/sentry/app/actions/modalActions.tsx
diff --git a/src/sentry/static/sentry/app/components/globalModal.jsx b/src/sentry/static/sentry/app/components/globalModal.tsx
similarity index 91%
rename from src/sentry/static/sentry/app/components/globalModal.jsx
rename to src/sentry/static/sentry/app/components/globalModal.tsx
index c019927e1d..3168a650f1 100644
--- a/src/sentry/static/sentry/app/components/globalModal.jsx
+++ b/src/sentry/static/sentry/app/components/globalModal.tsx
@@ -5,11 +5,18 @@ import React from 'react';
 import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
 
-import {closeModal} from 'app/actionCreators/modal';
+import {closeModal, RenderProps, ModalOptions} from 'app/actionCreators/modal';
 import Confirm from 'app/components/confirm';
 import ModalStore from 'app/stores/modalStore';
 
-class GlobalModal extends React.Component {
+type Props = {
+  children?: (renderProps: RenderProps) => React.ReactNode;
+  options: ModalOptions;
+  visible: boolean;
+  onClose?: () => void;
+};
+
+class GlobalModal extends React.Component<Props> {
   static propTypes = {
     /**
      * Needs to be a function that returns a React Element
diff --git a/src/sentry/static/sentry/app/stores/modalStore.jsx b/src/sentry/static/sentry/app/stores/modalStore.tsx
similarity index 64%
rename from src/sentry/static/sentry/app/stores/modalStore.jsx
rename to src/sentry/static/sentry/app/stores/modalStore.tsx
index 6825a2403c..3ae3a42f7c 100644
--- a/src/sentry/static/sentry/app/stores/modalStore.jsx
+++ b/src/sentry/static/sentry/app/stores/modalStore.tsx
@@ -1,6 +1,14 @@
 import Reflux from 'reflux';
 
 import ModalActions from 'app/actions/modalActions';
+import {RenderProps, ModalOptions} from 'app/actionCreators/modal';
+
+type Renderer = (renderProps: RenderProps) => React.ReactNode;
+
+type ModalStoreState = {
+  renderer: Renderer | null;
+  options: ModalOptions;
+};
 
 const ModalStore = Reflux.createStore({
   init() {
@@ -13,7 +21,7 @@ const ModalStore = Reflux.createStore({
     this.state = {
       renderer: null,
       options: {},
-    };
+    } as ModalStoreState;
   },
 
   onCloseModal() {
@@ -21,7 +29,7 @@ const ModalStore = Reflux.createStore({
     this.trigger(this.state);
   },
 
-  onOpenModal(renderer, options) {
+  onOpenModal(renderer: Renderer, options: ModalOptions) {
     this.state = {renderer, options};
     this.trigger(this.state);
   },
