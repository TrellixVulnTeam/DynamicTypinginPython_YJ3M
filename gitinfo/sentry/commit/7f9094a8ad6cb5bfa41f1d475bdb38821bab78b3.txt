commit 7f9094a8ad6cb5bfa41f1d475bdb38821bab78b3
Author: Mark Story <mark@sentry.io>
Date:   Fri Aug 30 09:47:18 2019 -0400

    feat(discover2) Add additional pre-canned queries  (#14540)
    
    Add more default discover queries so that we have more than three for
    the initial preview release.
    
    I have also defaulted the sort to be count descending for all the default
    views that have a count as that was another request that was easy to do
    at the same time. Inflections for aggregate functions was added to match
    the property names that the API will generate enabling sorting on aggregate
    values.
    
    Refs SEN-968
    Refs SEN-975

diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 09f9931d0e..5651e663dd 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -284,7 +284,6 @@ export type Group = {
 };
 
 export type EventViewv1 = {
-  id: string;
   name: string;
   data: {
     fields: string[];
@@ -293,7 +292,6 @@ export type EventViewv1 = {
     query?: string;
   };
   tags: string[];
-  columnWidths: string[];
 };
 
 export type Repository = {
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/data.tsx b/src/sentry/static/sentry/app/views/organizationEventsV2/data.tsx
index 5457b011c2..51ebff3eb2 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/data.tsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/data.tsx
@@ -21,7 +21,6 @@ export const PIN_ICON = `image://${pinIcon}`;
 export const AGGREGATE_ALIASES = ['last_seen', 'latest_event'] as const;
 
 export const DEFAULT_EVENT_VIEW_V1: Readonly<EventViewv1> = {
-  id: 'all',
   name: t('All Events'),
   data: {
     fields: ['title', 'event.type', 'project', 'user', 'timestamp'],
@@ -29,30 +28,56 @@ export const DEFAULT_EVENT_VIEW_V1: Readonly<EventViewv1> = {
     sort: ['-timestamp'],
   },
   tags: ['event.type', 'release', 'project.name', 'user.email', 'user.ip', 'environment'],
-  columnWidths: ['3fr', '80px', '1fr', '1fr', '1.5fr'],
 };
 
 export const ALL_VIEWS: Readonly<Array<EventViewv1>> = [
   DEFAULT_EVENT_VIEW_V1,
   {
-    id: 'errors',
+    name: t('Project Summary'),
+    data: {
+      fields: ['project', 'count()', 'count_unique(issue.id)'],
+      columnNames: ['project', 'events', 'unique errors'],
+      sort: ['-count'],
+      query: 'event.type:error',
+    },
+    tags: ['error.type', 'project.name'],
+  },
+  {
     name: t('Errors'),
     data: {
-      fields: ['title', 'count(id)', 'count_unique(user)', 'project', 'last_seen'],
+      fields: ['title', 'count()', 'count_unique(user)', 'project', 'last_seen'],
       columnNames: ['error', 'events', 'users', 'project', 'last seen'],
-      sort: ['-last_seen', '-title'],
+      sort: ['-count', '-title'],
       query: 'event.type:error',
     },
-    tags: ['error.type', 'project.name'],
-    columnWidths: ['3fr', '70px', '70px', '1fr', '1.5fr'],
+    tags: ['project.name'],
+  },
+  {
+    name: t('Errors by URL'),
+    data: {
+      fields: ['url', 'count()', 'count_unique(issue.id)'],
+      columnNames: ['URL', 'events', 'unique errors'],
+      sort: ['-count'],
+      query: 'event.type:error',
+    },
+    tags: ['error.type', 'project.name', 'url'],
+  },
+  {
+    name: t('Errors by User'),
+    data: {
+      fields: ['user', 'count()', 'count_unique(issue.id)'],
+      columnNames: ['User', 'events', 'unique errors'],
+      sort: ['-count'],
+      query: 'event.type:error',
+    },
+    tags: ['user.id', 'project.name', 'url'],
   },
   {
-    id: 'csp',
     name: t('CSP'),
     data: {
-      fields: ['title', 'count(id)', 'count_unique(user)', 'project', 'last_seen'],
+      fields: ['title', 'count()', 'count_unique(user)', 'project', 'last_seen'],
       columnNames: ['csp', 'events', 'users', 'project', 'last seen'],
-      sort: ['-last_seen', '-title'],
+      sort: ['-count', '-title'],
       query: 'event.type:csp',
     },
     tags: [
@@ -62,26 +87,66 @@ export const ALL_VIEWS: Readonly<Array<EventViewv1>> = [
       'os.name',
       'effective-directive',
     ],
-    columnWidths: ['3fr', '70px', '70px', '1fr', '1.5fr'],
   },
   {
-    id: 'transactions',
+    name: t('CSP Report by Directive'),
+    data: {
+      fields: ['effective-directive', 'count()', 'count_unique(title)'],
+      columnNames: ['directive', 'events', 'reports'],
+      sort: ['-count'],
+      query: 'event.type:csp',
+    },
+    tags: ['project.name', 'blocked-uri', 'browser.name', 'os.name'],
+  },
+  {
+    name: t('CSP Report by Blocked URI'),
+    data: {
+      fields: ['blocked-uri', 'count()'],
+      columnNames: ['URI', 'events'],
+      sort: ['-count'],
+      query: 'event.type:csp',
+    },
+    tags: ['project.name', 'blocked-uri', 'browser.name', 'os.name'],
+  },
+  {
+    name: t('CSP Report by User'),
+    data: {
+      fields: ['user', 'count()', 'count_unique(title)'],
+      columnNames: ['User', 'events', 'reports'],
+      sort: ['-count'],
+      query: 'event.type:csp',
+    },
+    tags: ['project.name', 'blocked-uri', 'browser.name', 'os.name'],
+  },
+  {
     name: t('Transactions'),
     data: {
-      fields: ['transaction', 'project', 'count(id)'],
+      fields: ['transaction', 'project', 'count()'],
       columnNames: ['transaction', 'project', 'volume'],
-      sort: ['-transaction'],
+      sort: ['-count'],
       query: 'event.type:transaction',
     },
-    tags: [
-      'event.type',
-      'release',
-      'project.name',
-      'user.email',
-      'user.ip',
-      'environment',
-    ],
-    columnWidths: ['3fr', '1fr', '70px'],
+    tags: ['release', 'project.name', 'user.email', 'user.ip', 'environment'],
+  },
+  {
+    name: t('Transactions by User'),
+    data: {
+      fields: ['user', 'count()', 'count_unique(transaction)'],
+      columnNames: ['user', 'events', 'unique transactions'],
+      sort: ['-count'],
+      query: 'event.type:transaction',
+    },
+    tags: ['release', 'project.name', 'user.email', 'user.ip', 'environment'],
+  },
+  {
+    name: t('Transactions by Region'),
+    data: {
+      fields: ['geo.region', 'count()'],
+      columnNames: ['Region', 'events'],
+      sort: ['-count'],
+      query: 'event.type:transaction',
+    },
+    tags: ['release', 'project.name', 'user.email', 'user.ip'],
   },
 ];
 
@@ -170,7 +235,7 @@ export const FIELD_FORMATTERS: FieldFormatters = {
     ),
   },
   string: {
-    sortField: false,
+    sortField: true,
     renderFunc: (field, data, {organization, location}) => {
       const target = {
         pathname: `/organizations/${organization.slug}/events/`,
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/discover2table.tsx b/src/sentry/static/sentry/app/views/organizationEventsV2/discover2table.tsx
index 02621cadd0..4ba94b944b 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/discover2table.tsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/discover2table.tsx
@@ -155,7 +155,7 @@ class Table extends React.Component<TableProps> {
       return null;
     }
 
-    const defaultSort = eventView.getDefaultSort() || eventView.fields[0].snuba_column;
+    const defaultSort = eventView.getDefaultSort() || eventView.fields[0].field;
 
     return eventView.fields.map((field, index) => {
       if (!dataPayload) {
@@ -163,7 +163,7 @@ class Table extends React.Component<TableProps> {
       }
 
       const {meta} = dataPayload;
-      const sortKey = eventView.getSortKey(field.snuba_column, meta);
+      const sortKey = eventView.getSortKey(field.field, meta);
 
       if (sortKey === null) {
         return <PanelHeaderCell key={index}>{field.title}</PanelHeaderCell>;
@@ -196,7 +196,7 @@ class Table extends React.Component<TableProps> {
     }
 
     const {meta} = dataPayload;
-    const fields = eventView.getFieldSnubaCols();
+    const fields = eventView.getFieldNames();
 
     // TODO: deal with this
     // if (fields.length <= 0) {
@@ -211,6 +211,8 @@ class Table extends React.Component<TableProps> {
 
     const lastRowIndex = dataPayload.data.length - 1;
 
+    // TODO add links to the first column even if it isn't one of our
+    // preferred link columns (title, transaction, latest_event)
     const firstCellIndex = 0;
     const lastCellIndex = fields.length - 1;
 
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/organizationEventsV2/eventView.tsx
index 512d0a2c80..b761c5e5e1 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/eventView.tsx
@@ -5,29 +5,29 @@ import {EventViewv1} from 'app/types';
 import {DEFAULT_PER_PAGE} from 'app/constants';
 
 import {SPECIAL_FIELDS, FIELD_FORMATTERS} from './data';
-import {MetaType, EventQuery} from './utils';
+import {MetaType, EventQuery, getAggregateAlias} from './utils';
 
 type Descending = {
   kind: 'desc';
-  snuba_col: string;
+  field: string;
 };
 
 type Ascending = {
   kind: 'asc';
-  snuba_col: string;
+  field: string;
 };
 
 type Sort = Descending | Ascending;
 
 type QueryStringField = [
-  /* snuba_column */ string,
+  /* field */ string,
   /* title */ string
   // TODO: implement later
   // /* width */ number
 ];
 
 type Field = {
-  snuba_column: string;
+  field: string;
   title: string;
   // TODO: implement later
   // width: number;
@@ -69,11 +69,10 @@ const decodeFields = (location: Location): Array<Field> => {
       const result = JSON.parse(field);
 
       if (isValidQueryStringField(result)) {
-        const snuba_column = result[0].trim();
-
-        if (snuba_column.length > 0) {
+        field = result[0].trim();
+        if (field.length > 0) {
           acc.push({
-            snuba_column,
+            field,
             title: result[1],
           });
         }
@@ -90,7 +89,7 @@ const decodeFields = (location: Location): Array<Field> => {
 
 export const encodeFields = (fields: Array<Field>): Array<string> => {
   return fields.map(field => {
-    return JSON.stringify([field.snuba_column, field.title]);
+    return JSON.stringify([field.field, field.title]);
   });
 };
 
@@ -101,14 +100,14 @@ const fromSorts = (sorts: Array<string>): Array<Sort> => {
     if (sort.startsWith('-')) {
       acc.push({
         kind: 'desc',
-        snuba_col: sort.substring(1),
+        field: sort.substring(1),
       });
       return acc;
     }
 
     acc.push({
       kind: 'asc',
-      snuba_col: sort,
+      field: sort,
     });
 
     return acc;
@@ -130,10 +129,10 @@ const decodeSorts = (location: Location): Array<Sort> => {
 const encodeSort = (sort: Sort): string => {
   switch (sort.kind) {
     case 'desc': {
-      return `-${sort.snuba_col}`;
+      return `-${sort.field}`;
     }
     case 'asc': {
-      return String(sort.snuba_col);
+      return String(sort.field);
     }
     default: {
       throw new Error('unexpected sort type');
@@ -182,8 +181,6 @@ const decodeQuery = (location: Location): string | undefined => {
   return isString(query) ? query.trim() : undefined;
 };
 
-const AGGREGATE_PATTERN = /^([a-z0-9_]+)\(([a-z\._]*)\)$/i;
-
 class EventView {
   fields: Field[];
   sorts: Sort[];
@@ -212,9 +209,9 @@ class EventView {
   }
 
   static fromEventViewv1(eventViewV1: EventViewv1): EventView {
-    const fields = eventViewV1.data.fields.map((snubaColName: string, index: number) => {
+    const fields = eventViewV1.data.fields.map((fieldName: string, index: number) => {
       return {
-        snuba_column: snubaColName,
+        field: fieldName,
         title: eventViewV1.data.columnNames[index],
       };
     });
@@ -246,9 +243,9 @@ class EventView {
     });
   };
 
-  getFieldSnubaCols = () => {
+  getFieldNames = () => {
     return this.fields.map(field => {
-      return field.snuba_column;
+      return field.field;
     });
   };
 
@@ -308,7 +305,7 @@ class EventView {
       'sort',
     ]);
 
-    const fieldNames = this.getFieldSnubaCols();
+    const fieldNames = this.getFieldNames();
 
     const defaultSort = fieldNames.length > 0 ? [fieldNames[0]] : undefined;
 
@@ -334,11 +331,8 @@ class EventView {
     return encodeSort(this.sorts[0]);
   };
 
-  getSortKey = (snubaColumn: string, meta: MetaType): string | null => {
-    let column = snubaColumn;
-    if (snubaColumn.match(AGGREGATE_PATTERN)) {
-      column = snubaColumn.replace(AGGREGATE_PATTERN, '$1_$2').toLowerCase();
-    }
+  getSortKey = (fieldname: string, meta: MetaType): string | null => {
+    const column = getAggregateAlias(fieldname);
     if (SPECIAL_FIELDS.hasOwnProperty(column)) {
       return SPECIAL_FIELDS[column as keyof typeof SPECIAL_FIELDS].sortField;
     }
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/index.tsx b/src/sentry/static/sentry/app/views/organizationEventsV2/index.tsx
index cd974f054d..63c64419ed 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/index.tsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/index.tsx
@@ -73,7 +73,6 @@ class OrganizationEventsV2 extends React.Component<Props> {
 
     if (typeof name === 'string' && String(name).trim().length > 0) {
       return [t('Events'), String(name).trim()];
-      // return `${} \u2014 ${}`;
     }
 
     return [t('Events')];
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/modalLineGraph.tsx b/src/sentry/static/sentry/app/views/organizationEventsV2/modalLineGraph.tsx
index feb59eb198..78c0febe53 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/modalLineGraph.tsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/modalLineGraph.tsx
@@ -185,7 +185,7 @@ const ModalLineGraph = (props: ModalLineGraphProps) => {
         interval={interval}
         showLoading={true}
         query={queryString}
-        field={eventView.getFieldSnubaCols()}
+        field={eventView.getFieldNames()}
         referenceEvent={referenceEvent}
         includePrevious={false}
       >
@@ -199,7 +199,7 @@ const ModalLineGraph = (props: ModalLineGraphProps) => {
             }}
             onClick={series =>
               handleClick(series, {
-                field: eventView.getFieldSnubaCols(),
+                field: eventView.getFieldNames(),
                 api,
                 organization,
                 currentEvent,
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/utils.tsx b/src/sentry/static/sentry/app/views/organizationEventsV2/utils.tsx
index d79a5e8889..d564c55a8d 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/utils.tsx
@@ -29,7 +29,7 @@ export type EventQuery = {
  */
 export function hasAggregateField(eventView: EventView): boolean {
   return eventView
-    .getFieldSnubaCols()
+    .getFieldNames()
     .some(
       field =>
         AGGREGATE_ALIASES.includes(field as any) || field.match(/[a-z_]+\([a-z_\.]+\)/)
@@ -148,8 +148,7 @@ export function getFieldRenderer(
   if (SPECIAL_FIELDS.hasOwnProperty(field)) {
     return SPECIAL_FIELDS[field].renderFunc;
   }
-  // Inflect the field name so it will match the property in the result set.
-  const fieldName = field.replace(/^([^\(]+)\(([a-z\._+]+)\)$/, '$1_$2');
+  const fieldName = getAggregateAlias(field);
   const fieldType = meta[fieldName];
   if (FIELD_FORMATTERS.hasOwnProperty(fieldType)) {
     return partial(FIELD_FORMATTERS[fieldType].renderFunc, fieldName);
@@ -157,6 +156,22 @@ export function getFieldRenderer(
   return partial(FIELD_FORMATTERS.string.renderFunc, fieldName);
 }
 
+const AGGREGATE_PATTERN = /^([^\(]+)\(([a-z\._+]*)\)$/;
+
+/**
+ * Get the alias that the API results will have for a given aggregate function name
+ */
+export function getAggregateAlias(field: string): string {
+  if (!field.match(AGGREGATE_PATTERN)) {
+    return field;
+  }
+  return field
+    .replace(AGGREGATE_PATTERN, '$1_$2')
+    .replace('.', '_')
+    .replace(/_+$/, '')
+    .toLowerCase();
+}
+
 /**
  * Get the first query string of a given name if there are multiple occurrences of it
  * e.g. foo=42&foo=bar    ==>    foo=42 is the first occurrence for 'foo' and "42" will be returned.
diff --git a/tests/js/spec/views/organizationEventsV2/eventDetails.spec.jsx b/tests/js/spec/views/organizationEventsV2/eventDetails.spec.jsx
index 18a422e46d..157e76fe04 100644
--- a/tests/js/spec/views/organizationEventsV2/eventDetails.spec.jsx
+++ b/tests/js/spec/views/organizationEventsV2/eventDetails.spec.jsx
@@ -10,7 +10,7 @@ import EventView from 'app/views/organizationEventsV2/eventView';
 describe('OrganizationEventsV2 > EventDetails', function() {
   const allEventsView = EventView.fromEventViewv1(DEFAULT_EVENT_VIEW_V1);
   const errorsView = EventView.fromEventViewv1(
-    ALL_VIEWS.find(view => view.id === 'errors')
+    ALL_VIEWS.find(view => view.name === 'Errors')
   );
 
   beforeEach(function() {
diff --git a/tests/js/spec/views/organizationEventsV2/index.spec.jsx b/tests/js/spec/views/organizationEventsV2/index.spec.jsx
index 2993ef996c..4ea5a3ad59 100644
--- a/tests/js/spec/views/organizationEventsV2/index.spec.jsx
+++ b/tests/js/spec/views/organizationEventsV2/index.spec.jsx
@@ -6,15 +6,15 @@ import {encodeFields} from 'app/views/organizationEventsV2/eventView';
 
 const FIELDS = [
   {
-    snuba_column: 'title',
+    field: 'title',
     title: 'Custom Title',
   },
   {
-    snuba_column: 'timestamp',
+    field: 'timestamp',
     title: 'Custom Time',
   },
   {
-    snuba_column: 'user',
+    field: 'user',
     title: 'Custom User',
   },
 ];
diff --git a/tests/js/spec/views/organizationEventsV2/utils.spec.jsx b/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
index 5cd89aca84..d4dbf34f56 100644
--- a/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
@@ -1,4 +1,7 @@
-import {getEventTagSearchUrl} from 'app/views/organizationEventsV2/utils';
+import {
+  getAggregateAlias,
+  getEventTagSearchUrl,
+} from 'app/views/organizationEventsV2/utils';
 
 describe('eventTagSearchUrl()', function() {
   let location;
@@ -32,3 +35,21 @@ describe('eventTagSearchUrl()', function() {
     });
   });
 });
+
+describe('getAggregateAlias', function() {
+  it('no-ops simple fields', function() {
+    expect(getAggregateAlias('field')).toEqual('field');
+    expect(getAggregateAlias('under_field')).toEqual('under_field');
+  });
+
+  it('handles 0 arg functions', function() {
+    expect(getAggregateAlias('count()')).toEqual('count');
+    expect(getAggregateAlias('count_unique()')).toEqual('count_unique');
+  });
+
+  it('handles 1 arg functions', function() {
+    expect(getAggregateAlias('count(id)')).toEqual('count_id');
+    expect(getAggregateAlias('count_unique(user)')).toEqual('count_unique_user');
+    expect(getAggregateAlias('count_unique(issue.id)')).toEqual('count_unique_issue_id');
+  });
+});
