commit 1f1fabb2d727daa8b2b02fe2ab02931f195be794
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Feb 21 10:29:15 2018 -0800

    feat(ui): Add polish to API Application Details + form fixes (#7274)
    
    * fix from undo + add test
    * Change saveOnBlur forms to send saved + undo indicator by default
    * fix team settings when updating slug

diff --git a/src/sentry/static/sentry/app/__mocks__/api.jsx b/src/sentry/static/sentry/app/__mocks__/api.jsx
index f3ad017484..3ab47cbf7c 100644
--- a/src/sentry/static/sentry/app/__mocks__/api.jsx
+++ b/src/sentry/static/sentry/app/__mocks__/api.jsx
@@ -41,6 +41,11 @@ class Client {
       return url === response.url && (options.method || 'GET') === response.method;
     });
   }
+
+  uniqueId() {
+    return '123';
+  }
+
   // In the real client, this clears in-flight responses. It's NOT clearMockResponses. You probably don't want to call this from a test.
   clear() {}
 
diff --git a/src/sentry/static/sentry/app/stores/teamStore.jsx b/src/sentry/static/sentry/app/stores/teamStore.jsx
index e8ab6e087f..51ca819f66 100644
--- a/src/sentry/static/sentry/app/stores/teamStore.jsx
+++ b/src/sentry/static/sentry/app/stores/teamStore.jsx
@@ -35,6 +35,18 @@ const TeamStore = Reflux.createStore({
     if (!item) {
       this.items.push(response);
     } else {
+      // Slug was changed
+      // Note: This is the proper way to handle slug changes but unfortunately not all of our
+      // components use stores correctly. To be safe reload browser :((
+      if (response.slug !== itemId) {
+        // Remove old team
+        this.items = this.items.filter(({slug}) => slug !== itemId);
+        // Add team w/ updated slug
+        this.items.push(response);
+        this.trigger(new Set([response.slug]));
+        return;
+      }
+
       $.extend(true /*deep*/, item, response);
     }
 
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx b/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx
index 2795c1cb45..f5a85d97af 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx
@@ -147,6 +147,7 @@ class AccountEmails extends AsyncView {
           apiMethod="POST"
           apiEndpoint={ENDPOINT}
           saveOnBlur
+          allowUndo={false}
           onSubmitSuccess={this.handleSubmitSuccess}
         >
           <JsonForm location={this.props.location} forms={accountEmailsFields} />
diff --git a/src/sentry/static/sentry/app/views/settings/account/apiApplicationDetails.jsx b/src/sentry/static/sentry/app/views/settings/account/apiApplicationDetails.jsx
index 00cc70b1b4..35a4df3736 100644
--- a/src/sentry/static/sentry/app/views/settings/account/apiApplicationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/apiApplicationDetails.jsx
@@ -2,7 +2,7 @@ import {Box} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
 
-import {addErrorMessage, addSuccessMessage} from '../../../actionCreators/indicator';
+import {addErrorMessage} from '../../../actionCreators/indicator';
 import {t} from '../../../locale';
 import AsyncView from '../../asyncView';
 import ConfigStore from '../../../stores/configStore';
@@ -12,6 +12,7 @@ import JsonForm from '../components/forms/jsonForm';
 import Panel from '../components/panel';
 import PanelBody from '../components/panelBody';
 import PanelHeader from '../components/panelHeader';
+import SettingsPageHeader from '../components/settingsPageHeader';
 import TextCopyInput from '../components/forms/textCopyInput';
 import apiApplication from '../../../data/forms/apiApplication';
 
@@ -37,36 +38,19 @@ class ApiApplicationDetails extends AsyncView {
     return 'Application Details';
   }
 
-  handleSubmitSuccess = (change, model, id) => {
-    if (!model) return;
-
-    let label = model.getDescriptor(id, 'label');
-
-    if (!label) return;
-
-    addSuccessMessage(`Changed ${label} from "${change.old}" to "${change.new}"`, 2000, {
-      model,
-      id,
-    });
-
-    // Special case for slug, need to forward to new slug
-    if (typeof onSave === 'function') {
-      this.props.onSave(this.props.initialData, model.initialData);
-    }
-  };
-
   renderBody() {
     let urlPrefix = ConfigStore.get('urlPrefix');
 
     return (
       <div>
+        <SettingsPageHeader title={this.getTitle()} />
+
         <Form
           apiMethod="PUT"
           apiEndpoint={`/api-applications/${this.props.params.appId}/`}
           saveOnBlur
           allowUndo
           initialData={this.state.app}
-          onSubmitSuccess={this.handleSubmitSuccess}
           onSubmitError={err => addErrorMessage('Unable to save change')}
         >
           <Box>
diff --git a/src/sentry/static/sentry/app/views/settings/account/apiApplications.jsx b/src/sentry/static/sentry/app/views/settings/account/apiApplications.jsx
index a6d8c0d5d7..2cf3320ab7 100644
--- a/src/sentry/static/sentry/app/views/settings/account/apiApplications.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/apiApplications.jsx
@@ -4,6 +4,12 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import createReactClass from 'create-react-class';
 
+import {
+  addErrorMessage,
+  addLoadingMessage,
+  addSuccessMessage,
+  removeIndicator,
+} from '../../../actionCreators/indicator';
 import {t} from '../../../locale';
 import ApiMixin from '../../../mixins/apiMixin';
 import AsyncView from '../../asyncView';
@@ -111,16 +117,17 @@ class ApiApplications extends AsyncView {
   }
 
   handleCreateApplication = () => {
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    let indicator = addLoadingMessage();
     this.api.request('/api-applications/', {
       method: 'POST',
       success: app => {
-        IndicatorStore.remove(loadingIndicator);
+        addSuccessMessage(t('Created a new API Application'));
+        removeIndicator(indicator);
         this.context.router.push(`${ROUTE_PREFIX}applications/${app.id}/`);
       },
       error: error => {
-        IndicatorStore.remove(loadingIndicator);
-        IndicatorStore.add(t('Unable to remove application. Please try again.'), 'error');
+        removeIndicator(indicator);
+        addErrorMessage(t('Unable to remove application. Please try again.'));
       },
     });
   };
diff --git a/src/sentry/static/sentry/app/views/settings/account/avatar.jsx b/src/sentry/static/sentry/app/views/settings/account/avatar.jsx
index b3a4fa28cb..3192215551 100644
--- a/src/sentry/static/sentry/app/views/settings/account/avatar.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/avatar.jsx
@@ -44,7 +44,9 @@ const AccountAvatar = createReactClass({
 
   componentWillReceiveProps(nextProps) {
     // Update local state if defined in props
-    this.setState({user: nextProps.user});
+    if (typeof nextProps.user !== 'undefined') {
+      this.setState({user: nextProps.user});
+    }
   },
 
   getEndpoint() {
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
index 85b31b7ae5..fff67bb319 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
@@ -2,9 +2,12 @@ import {observable, computed, action} from 'mobx';
 import _ from 'lodash';
 
 import {Client} from '../../../../api';
+import {
+  addErrorMessage,
+  saveOnBlurUndoMessage,
+} from '../../../../actionCreators/indicator';
 import {defined} from '../../../../utils';
 import FormState from '../../../../components/forms/state';
-import {addErrorMessage} from '../../../../actionCreators/indicator';
 
 class FormModel {
   /**
@@ -349,7 +352,7 @@ class FormModel {
 
     let fieldDescriptor = this.fieldDescriptor.get(id);
 
-    // Check if field needs to handle
+    // Check if field needs to handle transforming request object
     let getData =
       typeof fieldDescriptor.getData === 'function' ? fieldDescriptor.getData : a => a;
 
@@ -370,6 +373,9 @@ class FormModel {
           saveSnapshot = null;
         }
 
+        // Update initialData after successfully saving a field as it will now be the baseline value
+        this.initialData[id] = this.getValue(id);
+
         return data;
       })
       .catch(resp => {
@@ -420,16 +426,20 @@ class FormModel {
     if (!savePromise) return null;
 
     return savePromise
-      .then(change => {
+      .then(resp => {
         let newValue = this.getValue(id);
-        this.initialData[id] = newValue;
-        let result = {old: oldValue, new: newValue};
+        let change = {old: oldValue, new: newValue};
+
+        // Only use `allowUndo` option if explicity defined
+        if (typeof this.options.allowUndo === 'undefined' || this.options.allowUndo) {
+          saveOnBlurUndoMessage(change, this, id);
+        }
 
         if (this.options.onSubmitSuccess) {
-          this.options.onSubmitSuccess(result, this, id);
+          this.options.onSubmitSuccess(resp, this, id, change);
         }
 
-        return result;
+        return resp;
       })
       .catch(error => {
         if (this.options.onSubmitError) {
diff --git a/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx b/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx
index d7e7c5ba96..619887585a 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx
@@ -4,10 +4,7 @@ import React from 'react';
 
 import createReactClass from 'create-react-class';
 
-import {
-  addErrorMessage,
-  saveOnBlurUndoMessage,
-} from '../../../../actionCreators/indicator';
+import {addErrorMessage} from '../../../../actionCreators/indicator';
 import ApiMixin from '../../../../mixins/apiMixin';
 import Form from '../../components/forms/form';
 import JsonForm from '../../components/forms/jsonForm';
@@ -53,8 +50,7 @@ const NewOrganizationSettingsForm = createReactClass({
         saveOnBlur
         allowUndo
         initialData={initialData}
-        onSubmitSuccess={(change, model, fieldName) => {
-          saveOnBlurUndoMessage(change, model, fieldName);
+        onSubmitSuccess={(resp, model, fieldName, change) => {
           // Special case for slug, need to forward to new slug
           if (typeof onSave === 'function') {
             onSave(initialData, model.initialData);
diff --git a/src/sentry/static/sentry/app/views/settings/team/model.jsx b/src/sentry/static/sentry/app/views/settings/team/model.jsx
index 6f72f6a68c..848eef11b4 100644
--- a/src/sentry/static/sentry/app/views/settings/team/model.jsx
+++ b/src/sentry/static/sentry/app/views/settings/team/model.jsx
@@ -3,11 +3,20 @@ import FormModel from '../components/forms/model';
 
 class TeamFormModel extends FormModel {
   doApiRequest({data}) {
-    return updateTeam(this.api, {
-      orgId: this.orgId,
-      teamId: this.teamId,
-      data,
-    });
+    return new Promise((resolve, reject) =>
+      updateTeam(
+        this.api,
+        {
+          orgId: this.orgId,
+          teamId: this.teamId,
+          data,
+        },
+        {
+          success: resolve,
+          error: reject,
+        }
+      )
+    );
   }
 }
 
diff --git a/src/sentry/static/sentry/app/views/settings/team/teamSettings.jsx b/src/sentry/static/sentry/app/views/settings/team/teamSettings.jsx
index f14f940e8f..0acad02135 100644
--- a/src/sentry/static/sentry/app/views/settings/team/teamSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/team/teamSettings.jsx
@@ -2,14 +2,13 @@ import {Box} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
 
-import {addErrorMessage, saveOnBlurUndoMessage} from '../../../actionCreators/indicator';
+import {addErrorMessage, addLoadingMessage} from '../../../actionCreators/indicator';
+import {t} from '../../../locale';
 import AsyncView from '../../asyncView';
 import Form from '../components/forms/form';
 import JsonForm from '../components/forms/jsonForm';
-import teamSettingsFields from '../../../data/forms/teamSettingsFields';
 import TeamModel from './model';
-
-const TOAST_DURATION = 10000;
+import teamSettingsFields from '../../../data/forms/teamSettingsFields';
 
 export default class TeamSettings extends AsyncView {
   static propTypes = {
@@ -34,6 +33,23 @@ export default class TeamSettings extends AsyncView {
     return 'Team Settings';
   }
 
+  handleSubmitSuccess = (resp, model, id, change) => {
+    if (id === 'slug') {
+      addLoadingMessage(t('Slug changed, refreshing page...'));
+      window.location.assign(
+        `/settings/organization/${this.props.params.orgId}/teams/${model.getValue(
+          id
+        )}/settings/`
+      );
+      this.props.router.push(
+        `/settings/organization/${this.props.params.orgId}/teams/${model.getValue(
+          id
+        )}/settings/`
+      );
+      this.setState({loading: true});
+    }
+  };
+
   renderBody() {
     let team = this.props.team;
 
@@ -43,10 +59,8 @@ export default class TeamSettings extends AsyncView {
         apiMethod="PUT"
         saveOnBlur
         allowUndo
-        onSubmitSuccess={(change, model, id) => {
-          saveOnBlurUndoMessage(change, model, id);
-        }}
-        onSubmitError={() => addErrorMessage('Unable to save change', TOAST_DURATION)}
+        onSubmitSuccess={this.handleSubmitSuccess}
+        onSubmitError={() => addErrorMessage(t('Unable to save change'))}
         initialData={{
           name: team.name,
           slug: team.slug,
diff --git a/tests/js/spec/views/organizationSettingsForm.spec.jsx b/tests/js/spec/views/organizationSettingsForm.spec.jsx
index 14bc54a263..3bc840873c 100644
--- a/tests/js/spec/views/organizationSettingsForm.spec.jsx
+++ b/tests/js/spec/views/organizationSettingsForm.spec.jsx
@@ -1,8 +1,8 @@
 import React from 'react';
-import {mount} from 'enzyme';
 
-import NewOrganizationSettingsForm from 'app/views/settings/organization/general/organizationSettingsForm';
+import {mount} from 'enzyme';
 import {saveOnBlurUndoMessage} from 'app/actionCreators/indicator';
+import NewOrganizationSettingsForm from 'app/views/settings/organization/general/organizationSettingsForm';
 
 jest.mock('jquery');
 jest.mock('app/actionCreators/indicator');
@@ -53,7 +53,11 @@ describe('OrganizationSettingsForm', function() {
       })
     );
 
-    saveOnBlurUndoMessage.mockImplementation(function(change, model, fieldName) {
+    saveOnBlurUndoMessage.mockImplementationOnce(async function(
+      change,
+      model,
+      fieldName
+    ) {
       try {
         expect(fieldName).toBe('name');
         expect(change.old).toBe('Organization Name');
@@ -63,6 +67,17 @@ describe('OrganizationSettingsForm', function() {
         expect(model.getValue('name')).toBe('New Name');
         model.undo();
         expect(model.getValue('name')).toBe('Organization Name');
+
+        // `saveOnBlurUndoMessage` saves the new field, so reimplement this
+        await model.saveField('name', 'Organization Name');
+
+        // Initial data should be updated to original name
+        expect(model.initialData.name).toBe('Organization Name');
+
+        putMock.mockReset();
+        // Blurring the name field again should NOT trigger a save
+        input.simulate('blur');
+        expect(putMock).not.toHaveBeenCalled();
         done();
       } catch (err) {
         done(err);
diff --git a/tests/js/spec/views/teamSettings.spec.jsx b/tests/js/spec/views/teamSettings.spec.jsx
index e783a5b8a3..d744718dd3 100644
--- a/tests/js/spec/views/teamSettings.spec.jsx
+++ b/tests/js/spec/views/teamSettings.spec.jsx
@@ -1,8 +1,9 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import {shallow} from 'enzyme';
+import {mount, shallow} from 'enzyme';
 
 import TeamSettings from 'app/views/settings/team/teamSettings.old';
+import NewTeamSettings from 'app/views/settings/team/teamSettings';
 
 const childContextTypes = {
   organization: PropTypes.object,
@@ -10,6 +11,7 @@ const childContextTypes = {
   location: PropTypes.object,
 };
 
+// #NEW-SETTINGS
 describe('TeamSettings', function() {
   describe('render()', function() {
     it('renders', function() {
@@ -34,3 +36,69 @@ describe('TeamSettings', function() {
     });
   });
 });
+
+describe('NewTeamSettings', function() {
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+    sinon.stub(window.location, 'assign');
+  });
+
+  afterEach(function() {
+    window.location.assign.restore();
+  });
+
+  it('can change name and slug', function(done) {
+    let team = TestStubs.Team();
+    let putMock = MockApiClient.addMockResponse({
+      url: `/teams/org/${team.slug}/`,
+      method: 'PUT',
+    });
+
+    let wrapper = mount(
+      <NewTeamSettings
+        routes={[]}
+        params={{orgId: 'org', teamId: team.slug}}
+        team={team}
+        onTeamChange={() => {}}
+      />,
+      TestStubs.routerContext()
+    );
+
+    wrapper
+      .find('input[name="name"]')
+      .simulate('change', {target: {value: 'New Name'}})
+      .simulate('blur');
+
+    expect(putMock).toHaveBeenCalledWith(
+      `/teams/org/${team.slug}/`,
+      expect.objectContaining({
+        data: {
+          name: 'New Name',
+        },
+      })
+    );
+
+    wrapper
+      .find('input[name="slug"]')
+      .simulate('change', {target: {value: 'new-slug'}})
+      .simulate('blur');
+
+    expect(putMock).toHaveBeenCalledWith(
+      `/teams/org/${team.slug}/`,
+      expect.objectContaining({
+        data: {
+          slug: 'new-slug',
+        },
+      })
+    );
+
+    setTimeout(() => {
+      expect(
+        window.location.assign.calledWith(
+          '/settings/organization/org/teams/new-slug/settings/'
+        )
+      ).toBe(true);
+      done();
+    }, 1);
+  });
+});
