commit 0455612583e08649d66c6cdc33b8f47e6f31b169
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Nov 26 21:23:18 2018 +0100

    feat: Strip surrogates for postgres (#10752)

diff --git a/src/sentry/db/postgres/base.py b/src/sentry/db/postgres/base.py
index c4928237bb..01abd7149c 100644
--- a/src/sentry/db/postgres/base.py
+++ b/src/sentry/db/postgres/base.py
@@ -13,15 +13,43 @@ from .decorators import (
 )
 from .operations import DatabaseOperations
 
+from sentry.utils.strings import strip_lone_surrogates
+
 __all__ = ('DatabaseWrapper', )
 
 
 def remove_null(value):
-    if not isinstance(value, string_types):
-        return value
+    # In psycopg2 2.7+, behavior was introduced where a
+    # NULL byte in a parameter would start raising a ValueError.
+    # psycopg2 chose to do this rather than let Postgres silently
+    # truncate the data, which is it's behavior when it sees a
+    # NULL byte. But for us, we'd rather remove the null value so it's
+    # somewhat legible rather than error. Considering this is better
+    # behavior than the database truncating, seems good to do this
+    # rather than attempting to sanitize all data inputs now manually.
     return value.replace('\x00', '')
 
 
+def remove_surrogates(value):
+    # Another hack.  postgres does not accept lone surrogates
+    # in utf-8 mode.  If we encounter any lone surrogates in
+    # our string we need to remove it.
+    if type(value) is bytes:
+        try:
+            return strip_lone_surrogates(value.decode('utf-8')).encode('utf-8')
+        except UnicodeError:
+            return value
+    return strip_lone_surrogates(value)
+
+
+def clean_bad_params(params):
+    params = list(params)
+    for idx, param in enumerate(params):
+        if isinstance(param, string_types):
+            params[idx] = remove_null(remove_surrogates(param))
+    return params
+
+
 class CursorWrapper(object):
     """
     A wrapper around the postgresql_psycopg2 backend which handles various events
@@ -43,24 +71,7 @@ class CursorWrapper(object):
     @less_shitty_error_messages
     def execute(self, sql, params=None):
         if params is not None:
-            try:
-                return self.cursor.execute(sql, params)
-            except ValueError as e:
-                # In psycopg2 2.7+, behavior was introduced where a
-                # NULL byte in a parameter would start raising a ValueError.
-                # psycopg2 chose to do this rather than let Postgres silently
-                # truncate the data, which is it's behavior when it sees a
-                # NULL byte. But for us, we'd rather remove the null value so it's
-                # somewhat legible rather than error. Considering this is better
-                # behavior than the database truncating, seems good to do this
-                # rather than attempting to sanitize all data inputs now manually.
-
-                # Note: This message is brittle, but it's currently hardcoded into
-                # psycopg2 for this behavior. If anything changes, we're choosing to
-                # address that later rather than potentially catch incorrect behavior.
-                if e.message != 'A string literal cannot contain NUL (0x00) characters.':
-                    raise
-                return self.cursor.execute(sql, [remove_null(param) for param in params])
+            return self.cursor.execute(sql, clean_bad_params(params))
         return self.cursor.execute(sql)
 
     @capture_transaction_exceptions
diff --git a/src/sentry/utils/strings.py b/src/sentry/utils/strings.py
index c48f3ca80b..10de456498 100644
--- a/src/sentry/utils/strings.py
+++ b/src/sentry/utils/strings.py
@@ -24,6 +24,22 @@ _sprintf_placeholder_re = re.compile(
     r'%(?:\d+\$)?[+-]?(?:[ 0]|\'.{1})?-?\d*(?:\.\d+)?[bcdeEufFgGosxX]'
 )
 
+_lone_surrogate = re.compile(u"""(?x)
+    (
+        [\ud800-\udbff](?![\udc00-\udfff])
+    ) | (
+        (?<![\ud800-\udbff])
+        [\udc00-\udfff]
+    )
+""")
+
+
+def strip_lone_surrogates(string):
+    """Removes lone surrogates."""
+    if six.PY3:
+        return string.encode('utf-8', 'surrogatepass').decode('utf-8', 'ignore')
+    return _lone_surrogate.sub('', string)
+
 
 def truncatechars(value, arg, ellipsis='...'):
     # TODO (alex) could use unicode ellipsis: u'\u2026'
diff --git a/tests/sentry/db/postgres/test_base.py b/tests/sentry/db/postgres/test_base.py
index e3ec64159a..01c9dd1652 100644
--- a/tests/sentry/db/postgres/test_base.py
+++ b/tests/sentry/db/postgres/test_base.py
@@ -1,9 +1,11 @@
+# coding: utf-8
 from __future__ import absolute_import
 
 import pytest
 from sentry.utils.db import is_postgres
 from sentry.testutils import TestCase
 from sentry.constants import MAX_CULPRIT_LENGTH
+from django.utils.encoding import force_text
 
 
 def psycopg2_version():
@@ -48,3 +50,12 @@ class CursorWrapperTestCase(TestCase):
         long_str_from_db = cursor.fetchone()[0]
         assert long_str_from_db == (u'a' * (MAX_CULPRIT_LENGTH - 1))
         assert len(long_str_from_db) <= MAX_CULPRIT_LENGTH
+
+    def test_lone_surrogates(self):
+        from django.db import connection
+        cursor = connection.cursor()
+
+        bad_str = u'Hello\ud83dWorldðŸ‡¦ðŸ‡¹!'
+        cursor.execute('SELECT %s', [bad_str])
+        bad_str_from_db = force_text(cursor.fetchone()[0])
+        assert bad_str_from_db == u'HelloWorldðŸ‡¦ðŸ‡¹!'
