commit d06e67810b2541c66e9168a76f82fbff61db927d
Author: Danny Lee <dlee@sentry.io>
Date:   Wed Apr 15 11:23:47 2020 -0700

    fix(ui): Remove use of dangerouslySetInnerHTML (#18266)

diff --git a/src/sentry/static/sentry/app/components/inputInline.tsx b/src/sentry/static/sentry/app/components/inputInline.tsx
index 7620faa950..6fa6be2f79 100644
--- a/src/sentry/static/sentry/app/components/inputInline.tsx
+++ b/src/sentry/static/sentry/app/components/inputInline.tsx
@@ -42,8 +42,8 @@ type State = {
  */
 class InputInline extends React.Component<Props, State> {
   /**
-   * HACK(leedongwei): ContentEditable does not have the property, `value`. We
-   * coerce its `innerHtml` to `value` so it will have similar behaviour as a
+   * HACK(leedongwei): ContentEditable does not have the property `value`. We
+   * coerce its `innerText` to `value` so it will have similar behaviour as a
    * HTMLInputElement
    *
    * We probably need to attach this to every DOMAttribute event...
@@ -51,8 +51,11 @@ class InputInline extends React.Component<Props, State> {
   static setValueOnEvent(
     event: React.FormEvent<HTMLDivElement>
   ): React.FormEvent<HTMLInputElement> {
-    (event.target as any).value = (event.target as any).textContent;
-    (event.currentTarget as any).value = (event.currentTarget as any).textContent;
+    const text =
+      (event.target as any).innerText || (event.currentTarget as any).innerText;
+
+    (event.target as any).value = text;
+    (event.currentTarget as any).value = text;
     return event as React.FormEvent<HTMLInputElement>;
   }
 
@@ -148,6 +151,8 @@ class InputInline extends React.Component<Props, State> {
     const {value, placeholder, disabled} = this.props;
     const {isFocused} = this.state;
 
+    const innerText = value || placeholder || '';
+
     return (
       <Wrapper
         style={this.props.style}
@@ -158,8 +163,8 @@ class InputInline extends React.Component<Props, State> {
         <Input
           {...this.props} // Pass DOMAttributes props first, extend/overwrite below
           ref={this.refInput}
+          suppressContentEditableWarning
           contentEditable={!this.props.disabled}
-          dangerouslySetInnerHTML={{__html: value || placeholder || ''}}
           isHovering={this.state.isHovering}
           isDisabled={this.props.disabled}
           onBlur={this.onBlur}
@@ -168,7 +173,10 @@ class InputInline extends React.Component<Props, State> {
           onChange={this.onChangeUsingOnInput} // Overwrite onChange too, just to be 100% sure
           onKeyDown={this.onKeyDown}
           onKeyUp={this.onKeyUp}
-        />
+        >
+          {innerText}
+        </Input>
+
         {!isFocused && !disabled && (
           <div onClick={this.onClickIcon}>
             <StyledIconEdit />
