commit 737ea78de4b9c96f26e05653429bf9fee1b3297e
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Jun 28 11:22:05 2016 -0700

    Docs for on-premise Docker (#3537)

diff --git a/docs/index.rst b/docs/index.rst
index e2148e3b62..a42fcdd2f5 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -9,7 +9,7 @@ running on your own infrastructure.
 .. toctree::
    :maxdepth: 1
 
-   installation
+   installation/index
    upgrading
    config
    nginx
diff --git a/docs/installation/docker/index.rst b/docs/installation/docker/index.rst
new file mode 100644
index 0000000000..234df649f7
--- /dev/null
+++ b/docs/installation/docker/index.rst
@@ -0,0 +1,195 @@
+Installation w/ Docker
+======================
+
+This guide will step you through setting up your own on-premise Sentry
+in `Docker <https://www.docker.com/>`_.
+
+Dependencies
+------------
+
+* `Docker version 1.10+ <https://www.docker.com/getdocker>`_
+
+Building Container
+------------------
+
+Start by cloning or forking
+`getsentry/onpremise <https://github.com/getsentry/onpremise>`_. This
+will act the base for your own custom Sentry.
+
+Inside of this repository, we have a ``sentry.conf.py`` and
+``config.yml`` ready for :doc:`customizing <../../config>`.
+
+On top of that, we have a ``requirements.txt`` file for
+:doc:`installing plugins <../../plugins>`.
+
+Now we need to build our custom image. We have two ways to do this,
+depending on your environment. If you have a custom registry you're
+going to need to push to::
+
+    REPOSITORY=registry.example.com/sentry make build push
+
+If not, you can just build locally::
+
+    make build
+
+If you plan on running the dependent services in Docker as well, we
+support linking containers.
+
+Running Dependent Services
+--------------------------
+
+*Running the dependent services in Docker is entirely optional*, but
+you may, and we fully support linking containers to get up and running
+quickly.
+
+Redis
+~~~~~
+
+::
+
+    docker run \
+      --detach \
+      --name sentry-redis \
+      redis:3.2-alpine
+
+PostgreSQL
+~~~~~~~~~~
+
+::
+
+    docker run \
+      --detach \
+      --name sentry-postgres \
+      --env POSTGRES_PASSWORD=secret \
+      --env POSTGRES_USER=sentry \
+      postgres:9.5
+
+Outbound Email
+~~~~~~~~~~~~~~
+
+::
+
+    docker run \
+      --detach \
+      --name sentry-smtp \
+      tianon/exim4
+
+Running Sentry Services
+-----------------------
+
+.. note:: The image that is built, acts as the entrypoint for all
+          running pieces for the Sentry application and the same image
+          must be used for all containers.
+
+``${REPOSITORY}`` corresponds to the name used when building your
+image in the previous step. If this wasn't specified, the default is
+``sentry-onpremise``. To test that the image is working correctly, you can do::
+
+    docker run \
+      --rm ${REPOSITORY} \
+      --help
+
+You should see the Sentry help output.
+
+At this point, you'll need to generate a ``secret-key`` value. You can do that with::
+
+    docker run \
+      --rm ${REPOSITORY} \
+      config generate-secret-key
+
+This value can be put into your ``config.yml``, or as an environment
+variable ``SENTRY_SECRET_KEY``. If putting into ``config.yml``, you
+must rebuild your image.
+
+For all future Sentry command invocations, you just have all the
+necessary container links, mounted volumes, and the same environment
+variables. If differet components are running with different
+configurations, Sentry will likely have unexpected behaviors.
+
+The base for running commands will look something like::
+
+    docker run \
+      --detach \
+      --rm \
+      --link sentry-redis:redis \
+      --link sentry-postgres:postgres \
+      --link sentry-smtp:smtp \
+      --env SENTRY_SECRET_KEY=${SENTRY_SECRET_KEY} \
+      ${REPOSITORY} \
+      <command>
+
+.. note:: Further documentation will not mention container links or
+          environment variables for sake of brevity, but they are
+          required for all instances if using linked containers, and
+          the ``${REPOSITORY}`` will be referenced as
+          ``sentry-onpremise``.
+
+Running Migrations
+~~~~~~~~~~~~~~~~~~
+
+::
+
+    docker run --rm -it sentry-onpremise upgrade
+
+During the upgrade, you will be prompted to create the initial user
+which will act as the superuser.
+
+All schema changes and database upgrades are handled via the
+``upgrade`` command, and this is the first thing you'll want to run
+when upgrading to future versions of Sentry.
+
+Starting the Web Service
+~~~~~~~~~~~~~~~~~~~~~~~~
+
+The web interface needs to expose port 9000 into the container. This
+can just be done with `--port 9000:9000`::
+
+    docker run \
+      --detach \
+      --rm \
+      --name sentry-web-01 \
+      --port 9000:9000 \
+      sentry-onpremise \
+      run web
+
+
+You should now be able to test the web service by visiting
+``http://localhost:9000/``.
+
+Starting Background Workers
+~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+A large amount of Sentry's work is managed via background workers::
+
+    docker run \
+      --detach \
+      --rm \
+      --name sentry-worker-01 \
+      sentry-onpremise
+      run worker
+
+See :doc:`../../queue` for more details on configuring workers.
+
+Starting the Cron Process
+~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Sentry also needs a cron process::
+
+    docker run \
+      --detch \
+      --rm \
+      --name sentry-cron-01 \
+      sentry-onpremise
+      run cron
+
+It's recommended to only run one of them at the time or you will see
+unnecessary extra tasks being pushed onto the queues but the system
+will still behave as intended if multiple beat processes are run.
+This can be used to achieve high availability.
+
+What's Next?
+------------
+
+At this point, you should have a fully funcitonal installation of
+Sentry. You may want to explore :doc:`various plugins <../../plugins>`
+available.
diff --git a/docs/installation/index.rst b/docs/installation/index.rst
new file mode 100644
index 0000000000..671d55a190
--- /dev/null
+++ b/docs/installation/index.rst
@@ -0,0 +1,68 @@
+Installation
+============
+
+Before running Sentry itself, there are a few minimum services that are required for Sentry to communicate with.
+
+Services
+--------
+* `PostgreSQL <http://www.postgresql.org/>`_
+
+  * Docker image `postgres:9.5 <https://hub.docker.com/_/postgres/>`_
+* `Redis <http://redis.io>`_ (the minimum version requirement is 2.8.9, but 2.8.18, 3.0, or newer are recommended)
+
+  * If running Ubuntu < 15.04, you'll need to install from a different PPA.
+    We recommend `chris-lea/redis-server <https://launchpad.net/~chris-lea/+archive/ubuntu/redis-server>`_
+  * Docker image `redis:3.2-alpine <https://hub.docker.com/_/redis/>`_.
+* A dedicated (sub)domain to host Sentry on (i.e. `sentry.yourcompany.com`).
+
+Hardware
+--------
+
+Sentry provides a number of mechanisms to scale its capacity out
+horizontally, however there is still a primary SPOF at the database level.
+In an HA setup, the database is only utilized for event indexing and basic
+data storage, and becomes much less of a capacity concern (see also
+:doc:`../nodestore`).
+
+We don't have any real numbers to tell you what kind of hardware you're
+going to need, but we'll help you make your decision based on existing
+usage from real customers.
+
+If you're looking for an HA, and high throughput setup, you're going to
+need to setup a fairly complex cluster of machines, and utilize all of
+Sentry's advanced configuration options.  This means you'll need Postgres,
+Riak, Redis, Memcached, and RabbitMQ.  It's very rare you'd need this
+complex of a cluster, and the primary usecase for this is for the
+Hosted Sentry on `getsentry.com <https://getsentry.com/>`_.
+
+For more typical, but still fairly high throughput setups, you can run off
+of a single machine as long as it has reasonable IO (ideally SSDs), and a
+good amount of memory.
+
+The main things you need to consider are:
+
+- TTL on events (how long do you need to keep historical data around)
+- Average event throughput
+- How many events get grouped together (which means they get sampled)
+
+At a point, getsentry.com was processing approximately 4 million events a
+day. A majority of this data is stored for 90 days, which accounted for
+around 1.5TB of SSDs. Web and worker nodes were commodity (8GB-12GB RAM,
+cheap SATA drives, 8 cores), the only two additional nodes were a
+dedicated RabbitMQ and Postgres instance (both on SSDs, 12GB-24GB of
+memory). In theory, given a single high-memory machine, with 16+ cores,
+and SSDs, you could handle the entirety of the given data set.
+
+Installing Sentry Server
+------------------------
+
+We support two methods of installing and running your own Sentry server.
+Our recommended approach is to :doc:`use Docker <docker/index>`, but if
+that's not a supported environment, you may also setup a traditional
+:doc:`Python environment <python/index>`.
+
+.. toctree::
+ :maxdepth: 1
+
+ Via Docker <docker/index>
+ Via Python <python/index>
diff --git a/docs/installation.rst b/docs/installation/python/index.rst
similarity index 81%
rename from docs/installation.rst
rename to docs/installation/python/index.rst
index 0c7caf6c09..8cf60b60e2 100644
--- a/docs/installation.rst
+++ b/docs/installation/python/index.rst
@@ -1,5 +1,7 @@
-Installation
-============
+Installation w/ Python
+======================
+
+.. Note:: This method of installation is deprecated in favor of :doc:`Docker <../docker/index>`.
 
 This guide will step you through setting up a Python-based virtualenv,
 installing the required packages, and configuring the basic web service.
@@ -15,56 +17,11 @@ Some basic prerequisites which you'll need in order to run Sentry:
 * ``python-setuptools``, ``python-pip``, ``python-dev``, ``libxslt1-dev``,
   ``gcc``, ``libffi-dev``, ``libjpeg-dev``, ``libxml2-dev``, ``libxslt-dev``,
   ``libyaml-dev``
-* `PostgreSQL <http://www.postgresql.org/>`_
-* `Redis <http://redis.io>`_ (the minimum version requirement is 2.8.9, but 2.8.18, 3.0, or newer are recommended)
-
-  * If running Ubuntu < 15.04, you'll need to install from a different PPA.
-    We recommend `chris-lea/redis-server <https://launchpad.net/~chris-lea/+archive/ubuntu/redis-server>`_
-* `Nginx <http://nginx.org>`_ (``nginx-full``)
-* A dedicated domain to host Sentry on (i.e. `sentry.yourcompany.com`).
 
 If you're building from source you'll also need:
 
 * Node.js 0.12 or newer.
 
-Hardware
---------
-
-Sentry provides a number of mechanisms to scale its capacity out
-horizontally, however there is still a primary SPOF at the database level.
-In an HA setup, the database is only utilized for event indexing and basic
-data storage, and becomes much less of a capacity concern (see also
-:doc:`nodestore`).
-
-We don't have any real numbers to tell you what kind of hardware you're
-going to need, but we'll help you make your decision based on existing
-usage from real customers.
-
-If you're looking for an HA, and high throughput setup, you're going to
-need to setup a fairly complex cluster of machines, and utilize all of
-Sentry's advanced configuration options.  This means you'll need Postgres,
-Riak, Redis, Memcached, and RabbitMQ.  It's very rare you'd need this
-complex of a cluster, and the primary usecase for this is for the
-Hosted Sentry on `getsentry.com <https://getsentry.com/>`_.
-
-For more typical, but still fairly high throughput setups, you can run off
-of a single machine as long as it has reasonable IO (ideally SSDs), and a
-good amount of memory.
-
-The main things you need to consider are:
-
-- TTL on events (how long do you need to keep historical data around)
-- Average event throughput
-- How many events get grouped together (which means they get sampled)
-
-At a point, getsentry.com was processing approximately 4 million events a
-day. A majority of this data is stored for 90 days, which accounted for
-around 1.5TB of SSDs. Web and worker nodes were commodity (8GB-12GB RAM,
-cheap SATA drives, 8 cores), the only two additional nodes were a
-dedicated RabbitMQ and Postgres instance (both on SSDs, 12GB-24GB of
-memory). In theory, given a single high-memory machine, with 16+ cores,
-and SSDs, you could handle the entirety of the given data set.
-
 Setting up an Environment
 -------------------------
 
@@ -243,9 +200,9 @@ arguments to the ``Cluster`` constructor. A more thorough discussion of the
 availabile configuration parameters can be found at the `rb GitHub repository
 <https://github.com/getsentry/rb>`_.
 
-See the individual documentation for :doc:`the queue <queue/>`,
-:doc:`update buffers <buffer>`, :doc:`quotas <throttling>`, and
-:doc:`time-series storage <tsdb>` for more details.
+See the individual documentation for :doc:`the queue <../../queue/>`,
+:doc:`update buffers <../../buffer>`, :doc:`quotas <../../throttling>`, and
+:doc:`time-series storage <../../tsdb>` for more details.
 
 Configure Outbound Mail
 -----------------------
@@ -328,7 +285,7 @@ in addition to the web service workers:
 
   SENTRY_CONF=/etc/sentry sentry run worker
 
-See :doc:`queue` for more details on configuring workers.
+See :doc:`../../queue` for more details on configuring workers.
 
 .. note:: `Celery <http://celeryproject.org/>`_ is an open source task
           framework for Python.
@@ -355,19 +312,6 @@ normal conditions you won't be able to bind to port 80. To get around this
 (and to avoid running Sentry as a privileged user, which you shouldn't),
 we recommend you setup a simple web proxy.
 
-Proxying with Apache
-~~~~~~~~~~~~~~~~~~~~
-
-Apache requires the use of mod_proxy for forwarding requests::
-
-    ProxyPass / http://localhost:9000/
-    ProxyPassReverse / http://localhost:9000/
-    ProxyPreserveHost On
-    RequestHeader set X-Forwarded-Proto "https" env=HTTPS
-
-You will need to enable ``headers``, ``proxy``, and ``proxy_http`` apache
-modules to use these settings.
-
 Proxying with Nginx
 ~~~~~~~~~~~~~~~~~~~
 
@@ -382,7 +326,7 @@ You'll use the builtin HttpProxyModule within Nginx to handle proxying::
       proxy_set_header   X-Forwarded-Proto $scheme;
     }
 
-See :doc:`nginx` for more details on using Nginx.
+See :doc:`../../nginx` for more details on using Nginx.
 
 Enabling SSL
 ~~~~~~~~~~~~~
@@ -532,4 +476,4 @@ What's Next?
 ------------
 
 At this point you should have a fully functional installation of Sentry. You
-may want to explore :doc:`various plugins <plugins>` available.
+may want to explore :doc:`various plugins <../../plugins>` available.
diff --git a/docs/plugins.rst b/docs/plugins.rst
index 6f46df131d..5c86799985 100644
--- a/docs/plugins.rst
+++ b/docs/plugins.rst
@@ -28,38 +28,47 @@ Sentry includes several plugins by default. Builtin plugins are controlled via t
 .. describe:: sentry.plugins.sentry_useragents
 
     Enables auto tagging of browsers and operating systems based on the
-    'User-Agent' header in the HTTP interface.
+    ``User-Agent`` header in the HTTP interface.
 
     .. versionadded:: 4.5.0
 
-3rd Party Extensions
---------------------
+Official Plugins
+----------------
 
-The following extensions are available and maintained by members of the Sentry community:
+The following plugins are fully supported and maintained by the Sentry team.
+
+.. note:: All official plugins are tested against the latest version of Sentry,
+          and compatibility with older versions is not guaranteed.
+
+* `GitHub <https://github.com/getsentry/sentry-github>`_
+* `JIRA <https://github.com/getsentry/sentry-jira>`_
+* `Hipchat <https://github.com/getsentry/sentry-hipchat-ac>`_
+* `Slack <https://github.com/getsentry/sentry-slack>`_
+* `Phabricator <https://github.com/getsentry/sentry-phabricator>`_
+* `Pivotal Tracker <https://github.com/getsentry/sentry-pivotal>`_
+* `Pushover <https://github.com/getsentry/sentry-pushover>`_
+* `Flowdock <https://github.com/getsentry/sentry-flowdock>`_
+* `Redmine <https://github.com/getsentry/sentry-redmine>`_
+* `BitBucket <https://github.com/getsentry/sentry-bitbucket>`_
+* `Trello <https://github.com/getsentry/sentry-trello>`_
+* `IRC <https://github.com/getsentry/sentry-irc>`_
+
+3rd Party Plugins
+-----------------
+
+The following plugins are available and maintained by members of the Sentry community:
 
-* `sentry-bitbucket <https://github.com/neilalbrock/sentry-bitbucket>`_
 * `sentry-campfire <https://github.com/mkhattab/sentry-campfire>`_
-* `sentry-flowdock <https://github.com/getsentry/sentry-flowdock>`_
 * `sentry-fogbugz <https://github.com/glasslion/sentry-fogbugz>`_
-* `sentry-github <https://github.com/getsentry/sentry-github>`_
 * `sentry-groveio <https://github.com/mattrobenolt/sentry-groveio>`_
-* `sentry-hipchat <https://github.com/linovia/sentry-hipchat>`_
-* `sentry-irc <https://github.com/gisce/sentry-irc>`_
 * `sentry-irccat <https://github.com/russss/sentry-irccat>`_
-* `sentry-jira <https://github.com/thurloat/sentry-jira>`_
 * `sentry-lighthouse <https://github.com/gthb/sentry-lighthouse>`_
 * `sentry-notifico <https://github.com/lukegb/sentry-notifico>`_
-* `sentry-phabricator <https://github.com/getsentry/sentry-phabricator>`_
-* `sentry-pivotal <https://github.com/getsentry/sentry-pivotal>`_
-* `sentry-pushover <https://github.com/getsentry/sentry-pushover>`_
-* `sentry-redmine <https://github.com/getsentry/sentry-redmine>`_
 * `sentry-searchbutton <https://github.com/timmyomahony/sentry-searchbutton>`_
-* `sentry-slack <https://github.com/getsentry/sentry-slack>`_
 * `sentry-sprintly <https://github.com/mattrobenolt/sentry-sprintly>`_
 * `sentry-statsd <https://github.com/dreadatour/sentry-statsd>`_
 * `sentry-teamwork <https://github.com/getsentry/sentry-teamwork>`_
 * `sentry-top <https://github.com/getsentry/sentry-top>`_
-* `sentry-trello <https://github.com/DamianZaremba/sentry-trello>`_
 * `sentry-unfuddle <https://github.com/rkeilty/sentry-unfuddle>`_
 * `sentry-whatsapp <https://github.com/ecarreras/sentry-whatsapp>`_
 * `sentry-xmpp <https://github.com/chroto/sentry-xmpp>`_
@@ -67,4 +76,4 @@ The following extensions are available and maintained by members of the Sentry c
 * `sentry-zabbix <https://github.com/m0n5t3r/sentry-zabbix>`_
 
 Have an extension that should be listed here? Submit a `pull request
-<https://github.com/getsentry/sentry>`_ and we'll get it added.
+<https://github.com/getsentry/sentry/edit/master/docs/plugins.rst>`_ and we'll get it added.
