commit bbb219ab6714221c77447dae3d47af680cf9782b
Author: Jan Michael Auer <account@jauer.org>
Date:   Wed Jan 17 20:37:18 2018 +0100

    fix(ui): Fix and improve rendering of native processing errors (#6991)
    
    * fix(ui): Fix invalid grouping for processing errors
    
    * fix(ui): Fix typo for "A binary image"
    
    * ref(native): Do not add None values to symbolication errors
    
    * ref(ui): Use KeyValueList to display processing error data
    
    * fix(ui): Add space for correct line breaks in native frames

diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 2b5f24afb5..d8f26f7608 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -253,13 +253,7 @@ class NativeStacktraceProcessor(StacktraceProcessor):
                 # optional dsyms)
                 errors = []
                 if e.is_user_fixable or e.is_sdk_failure:
-                    errors.append({
-                        'type': e.type,
-                        'image_uuid': e.image_uuid,
-                        'image_path': e.image_path,
-                        'image_arch': e.image_arch,
-                        'message': e.message,
-                    })
+                    errors.append(e.get_data())
                 else:
                     logger.debug('Failed to symbolicate with native backend',
                                  exc_info=True)
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 9a5032db6c..5a09f63219 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -79,7 +79,7 @@ class SymbolicationFailed(Exception):
 
     def get_data(self):
         """Returns the event data."""
-        rv = {'message': self.message}
+        rv = {'message': self.message, 'type': self.type}
         if self.image_path is not None:
             rv['image_path'] = self.image_path
         if self.image_uuid is not None:
diff --git a/src/sentry/models/eventerror.py b/src/sentry/models/eventerror.py
index b7325aff84..a0c42deee2 100644
--- a/src/sentry/models/eventerror.py
+++ b/src/sentry/models/eventerror.py
@@ -91,7 +91,7 @@ class EventError(object):
         NATIVE_MISSING_SYSTEM_DSYM: u'A system debug symbol file was missing.',
         NATIVE_MISSING_SYMBOL: u'Unable to resolve a symbol.',
         NATIVE_SIMULATOR_FRAME: u'Encountered an unprocessable simulator frame.',
-        NATIVE_UNKNOWN_IMAGE: u'An binary image is referenced that is unknown.',
+        NATIVE_UNKNOWN_IMAGE: u'A binary image is referenced that is unknown.',
         PROGUARD_MISSING_MAPPING: u'A proguard mapping file was missing.',
         PROGUARD_MISSING_LINENO: u'A proguard mapping file does not contain line info.',
     }
diff --git a/src/sentry/static/sentry/app/components/events/errorItem.jsx b/src/sentry/static/sentry/app/components/events/errorItem.jsx
index c6a286af01..db7895cf14 100644
--- a/src/sentry/static/sentry/app/components/events/errorItem.jsx
+++ b/src/sentry/static/sentry/app/components/events/errorItem.jsx
@@ -1,5 +1,7 @@
+import _ from 'lodash';
 import PropTypes from 'prop-types';
 import React from 'react';
+import KeyValueList from './interfaces/keyValueList';
 import {t} from '../../locale';
 
 class EventErrorItem extends React.Component {
@@ -22,21 +24,40 @@ class EventErrorItem extends React.Component {
     this.setState({isOpen: !this.state.isOpen});
   };
 
+  cleanedData() {
+    let data = {...this.props.error.data};
+
+    if (data.message === 'None') {
+      // Python ensures a message string, but "None" doesn't make sense here
+      delete data.message;
+    }
+
+    if (typeof data.image_path === 'string') {
+      // Separate the image name for readability
+      let path = data.image_path.split('/');
+      data.image_name = path.splice(-1, 1)[0];
+      data.image_path = path.length ? path.join('/') + '/' : '';
+    }
+
+    return _.mapKeys(data, (value, key) => _.startCase(key));
+  }
+
   render() {
     let error = this.props.error;
     let isOpen = this.state.isOpen;
+    let data = this.cleanedData();
     return (
       <li>
         {error.message}
-        <small>
-          {' '}
-          <a style={{marginLeft: 10}} onClick={this.toggle}>
-            {isOpen ? t('Collapse') : t('Expand')}
-          </a>
-        </small>
-        <pre style={{display: isOpen ? 'block' : 'none'}}>
-          {JSON.stringify(error.data, null, 2)}
-        </pre>
+        {!_.isEmpty(data) && (
+          <small>
+            {' '}
+            <a style={{marginLeft: 10}} onClick={this.toggle}>
+              {isOpen ? t('Collapse') : t('Expand')}
+            </a>
+          </small>
+        )}
+        {isOpen && <KeyValueList data={data} isContextData />}
       </li>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/errors.jsx b/src/sentry/static/sentry/app/components/events/errors.jsx
index e7d04851bb..614e03b38e 100644
--- a/src/sentry/static/sentry/app/components/events/errors.jsx
+++ b/src/sentry/static/sentry/app/components/events/errors.jsx
@@ -31,7 +31,7 @@ class EventErrors extends React.Component {
   };
 
   uniqueErrors = errors => {
-    return _.uniqBy(errors, _.isEqual);
+    return _.uniqWith(errors, _.isEqual);
   };
 
   render() {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index 9b1582f38b..136be9ff5e 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -381,7 +381,7 @@ const Frame = createReactClass({
           )}
           <span className="address">{data.instructionAddr}</span>
           <span className="symbol">
-            <code>{data.function || '<unknown>'}</code>
+            <code>{data.function || '<unknown>'}</code>{' '}
             {data.filename && (
               <span className="filename">
                 {data.filename}
diff --git a/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
index e3ec4982c7..114237ee0e 100644
--- a/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
+++ b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
@@ -22,7 +22,7 @@ const MESSAGES = {
   native_missing_system_dsym: t('A system debug symbol file was missing.'),
   native_missing_symbol: t('Unable to resolve a symbol.'),
   native_simulator_frame: t('Encountered an unprocessable simulator frame.'),
-  native_unknown_image: t('An binary image is referenced that is unknown.'),
+  native_unknown_image: t('A binary image is referenced that is unknown.'),
   proguard_missing_mapping: t('A proguard mapping file was missing.'),
   proguard_missing_lineno: t('A proguard mapping file does not contain line info.'),
 };
