commit 6711574cb8259fbe5d8e1cd506c0b905d603f972
Author: Ben Vinegar <benvinegar@users.noreply.github.com>
Date:   Thu Sep 8 13:23:46 2016 -0700

    When inviting new member, can set initial role + teams (#4089)

diff --git a/src/sentry/templates/sentry/create-organization-member.html b/src/sentry/templates/sentry/create-organization-member.html
index 134d48fb0c..748cf25a7e 100644
--- a/src/sentry/templates/sentry/create-organization-member.html
+++ b/src/sentry/templates/sentry/create-organization-member.html
@@ -20,9 +20,16 @@
   <form class="form-stacked" action="" method="post">
     {% csrf_token %}
 
-    {% for field in form %}
-      {{ field|as_crispy_field }}
-    {% endfor %}
+    {{ form|as_crispy_errors }}
+
+    {% if is_invite %}
+      {{ form.email|as_crispy_field }}
+    {% else %}
+      {{ form.user|as_crispy_field }}
+    {% endif %}
+
+    {% include "sentry/partial/members/_roles.html" %}
+    {% include "sentry/partial/members/_teams.html" %}
 
     <div class="form-actions">
       <button type="submit" class="btn btn-primary">{% trans "Add Member" %}</button>
diff --git a/src/sentry/templates/sentry/organization-member-settings.html b/src/sentry/templates/sentry/organization-member-settings.html
index 2899309956..2095c9f8c6 100644
--- a/src/sentry/templates/sentry/organization-member-settings.html
+++ b/src/sentry/templates/sentry/organization-member-settings.html
@@ -78,48 +78,8 @@
       </div>
     </div>
 
-    <div class="box">
-      <div class="box-header">
-        <h3>{% trans "Role" %}</h3>
-      </div>
-      <div class="box-content with-padding">
-        <ul class="radio-inputs">
-          {% for role, allowed in role_list %}
-            <li class="radio">
-              <label>
-                <input type="radio" name="role" value="{{ role.id }}"
-                       {% if role.id == form.role.value %} checked{% endif %}
-                       {% if not allowed %} disabled="disabled"{% endif %}/>
-                {{ role.name }}
-                <div class="help-block">{{ role.desc|linebreaksbr }}</div>
-              </label>
-            </li>
-          {% endfor %}
-        </ul>
-      </div>
-    </div>
-
-    <div class="box">
-      <div class="box-header">
-        <h3>{% trans "Teams" %}</h3>
-      </div>
-      <div class="box-content with-padding">
-        <fieldset class="team-choices row">
-          {% for team in all_teams %}
-            <div class="control-group col-md-4">
-              <div class="controls">
-                <label class="checkbox">
-                  <input type="checkbox" name="teams" value="{{ team.id }}"
-                         class="checkboxinput"{% if team.id in form.teams.value %} checked="checked"{% endif %}>
-                    {{ team.name }}
-                    <span class="team-slug">{{ team.slug }}</span>
-                  </label>
-              </div>
-            </div>
-          {% endfor %}
-        </fieldset>
-      </div>
-    </div>
+    {% include "sentry/partial/members/_roles.html" %}
+    {% include "sentry/partial/members/_teams.html" %}
 
     <div class="form-actions">
       <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
diff --git a/src/sentry/templates/sentry/partial/members/_roles.html b/src/sentry/templates/sentry/partial/members/_roles.html
new file mode 100644
index 0000000000..3e973f237a
--- /dev/null
+++ b/src/sentry/templates/sentry/partial/members/_roles.html
@@ -0,0 +1,22 @@
+{% load i18n %}
+
+<div class="box">
+  <div class="box-header">
+    <h3>{% trans "Role" %}</h3>
+  </div>
+  <div class="box-content with-padding">
+    <ul class="radio-inputs">
+      {% for role, allowed in role_list %}
+        <li class="radio">
+          <label>
+            <input type="radio" name="role" value="{{ role.id }}"
+                   {% if role.id == form.role.value %} checked{% endif %}
+                   {% if not allowed %} disabled="disabled"{% endif %}/>
+            {{ role.name }}
+            <div class="help-block">{{ role.desc|linebreaksbr }}</div>
+          </label>
+        </li>
+      {% endfor %}
+    </ul>
+  </div>
+</div>
diff --git a/src/sentry/templates/sentry/partial/members/_teams.html b/src/sentry/templates/sentry/partial/members/_teams.html
new file mode 100644
index 0000000000..aab797c651
--- /dev/null
+++ b/src/sentry/templates/sentry/partial/members/_teams.html
@@ -0,0 +1,23 @@
+{% load i18n %}
+
+<div class="box">
+  <div class="box-header">
+    <h3>{% trans "Teams" %}</h3>
+  </div>
+  <div class="box-content with-padding">
+    <fieldset class="team-choices row">
+      {% for team in all_teams %}
+        <div class="control-group col-md-4">
+          <div class="controls">
+            <label class="checkbox">
+              <input type="checkbox" name="teams" value="{{ team.id }}"
+                     class="checkboxinput"{% if team.id in form.teams.value %} checked="checked"{% endif %}>
+                {{ team.name }}
+                <span class="team-slug">{{ team.slug }}</span>
+              </label>
+          </div>
+        </div>
+      {% endfor %}
+    </fieldset>
+  </div>
+</div>
diff --git a/src/sentry/web/forms/add_organization_member.py b/src/sentry/web/forms/add_organization_member.py
index bc95dc8b3a..b1a7649737 100644
--- a/src/sentry/web/forms/add_organization_member.py
+++ b/src/sentry/web/forms/add_organization_member.py
@@ -1,15 +1,17 @@
 from __future__ import absolute_import
 
-from django import forms
 from django.db import transaction, IntegrityError
 
 from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, OrganizationMember,
+    AuditLogEntry,
+    AuditLogEntryEvent,
+    OrganizationMember,
 )
 from sentry.web.forms.fields import UserField
+from sentry.web.forms.base_organization_member import BaseOrganizationMemberForm
 
 
-class AddOrganizationMemberForm(forms.ModelForm):
+class AddOrganizationMemberForm(BaseOrganizationMemberForm):
     user = UserField()
 
     class Meta:
@@ -29,6 +31,8 @@ class AddOrganizationMemberForm(forms.ModelForm):
                     organization=organization,
                 ), False
 
+        self.save_team_assignments(om)
+
         AuditLogEntry.objects.create(
             organization=organization,
             actor=actor,
diff --git a/src/sentry/web/forms/base_organization_member.py b/src/sentry/web/forms/base_organization_member.py
new file mode 100644
index 0000000000..a9b4f44f62
--- /dev/null
+++ b/src/sentry/web/forms/base_organization_member.py
@@ -0,0 +1,50 @@
+from __future__ import absolute_import
+
+from django import forms
+
+from sentry.models import (
+    OrganizationMember,
+    OrganizationMemberTeam,
+    Team,
+)
+
+
+class BaseOrganizationMemberForm(forms.ModelForm):
+    """
+    Base form used by AddOrganizationMemberForm, InviteOrganizationMemberForm,
+    and EditOrganizationMemberForm
+    """
+    teams = forms.ModelMultipleChoiceField(
+        queryset=Team.objects.none(),
+        widget=forms.CheckboxSelectMultiple(),
+        required=False,
+    )
+    role = forms.ChoiceField()
+
+    class Meta:
+        fields = ('role',)
+        model = OrganizationMember
+
+    def __init__(self, *args, **kwargs):
+        allowed_roles = kwargs.pop('allowed_roles')
+        all_teams = kwargs.pop('all_teams')
+
+        super(BaseOrganizationMemberForm, self).__init__(*args, **kwargs)
+
+        self.fields['role'].choices = (
+            (r.id, r.name)
+            for r in allowed_roles
+        )
+
+        self.fields['teams'].queryset = all_teams
+
+    def save_team_assignments(self, organization_member):
+        for team in self.cleaned_data['teams']:
+            OrganizationMemberTeam.objects.create_or_update(
+                team=team,
+                organizationmember=organization_member,
+            )
+
+        OrganizationMemberTeam.objects.filter(
+            organizationmember=organization_member,
+        ).exclude(team__in=self.cleaned_data['teams']).delete()
diff --git a/src/sentry/web/forms/edit_organization_member.py b/src/sentry/web/forms/edit_organization_member.py
index 70f5921dc6..bfacb7365c 100644
--- a/src/sentry/web/forms/edit_organization_member.py
+++ b/src/sentry/web/forms/edit_organization_member.py
@@ -1,50 +1,17 @@
 from __future__ import absolute_import
 
-from django import forms
-
 from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, OrganizationMember,
-    OrganizationMemberTeam, Team
+    AuditLogEntry,
+    AuditLogEntryEvent,
 )
+from sentry.web.forms.base_organization_member import BaseOrganizationMemberForm
 
 
-class EditOrganizationMemberForm(forms.ModelForm):
-    teams = forms.ModelMultipleChoiceField(
-        queryset=Team.objects.none(),
-        widget=forms.CheckboxSelectMultiple(),
-        required=False,
-    )
-    role = forms.ChoiceField()
-
-    class Meta:
-        fields = ('role',)
-        model = OrganizationMember
-
-    def __init__(self, *args, **kwargs):
-        allowed_roles = kwargs.pop('allowed_roles')
-        all_teams = kwargs.pop('all_teams')
-
-        super(EditOrganizationMemberForm, self).__init__(*args, **kwargs)
-
-        self.fields['role'].choices = (
-            (r.id, r.name)
-            for r in allowed_roles
-        )
-
-        self.fields['teams'].queryset = all_teams
-
+class EditOrganizationMemberForm(BaseOrganizationMemberForm):
     def save(self, actor, organization, ip_address=None):
         om = super(EditOrganizationMemberForm, self).save()
 
-        for team in self.cleaned_data['teams']:
-            OrganizationMemberTeam.objects.create_or_update(
-                team=team,
-                organizationmember=om,
-            )
-
-        OrganizationMemberTeam.objects.filter(
-            organizationmember=om,
-        ).exclude(team__in=self.cleaned_data['teams']).delete()
+        self.save_team_assignments(om)
 
         AuditLogEntry.objects.create(
             organization=organization,
diff --git a/src/sentry/web/forms/invite_organization_member.py b/src/sentry/web/forms/invite_organization_member.py
index 210f11d464..456beaf138 100644
--- a/src/sentry/web/forms/invite_organization_member.py
+++ b/src/sentry/web/forms/invite_organization_member.py
@@ -9,9 +9,10 @@ from sentry.models import (
     OrganizationMember,
 )
 from sentry.signals import member_invited
+from sentry.web.forms.base_organization_member import BaseOrganizationMemberForm
 
 
-class InviteOrganizationMemberForm(forms.ModelForm):
+class InviteOrganizationMemberForm(BaseOrganizationMemberForm):
     # override this to ensure the field is required
     email = forms.EmailField()
 
@@ -38,7 +39,6 @@ class InviteOrganizationMemberForm(forms.ModelForm):
         sid = transaction.savepoint(using='default')
         try:
             om.save()
-
         except IntegrityError:
             transaction.savepoint_rollback(sid, using='default')
             return OrganizationMember.objects.get(
@@ -47,6 +47,8 @@ class InviteOrganizationMemberForm(forms.ModelForm):
             ), False
         transaction.savepoint_commit(sid, using='default')
 
+        self.save_team_assignments(om)
+
         AuditLogEntry.objects.create(
             organization=organization,
             actor=actor,
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 3cdcd79bcb..d2055c2350 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -13,6 +13,7 @@ from django.views.decorators.csrf import csrf_protect
 from django.views.generic import View
 from sudo.views import redirect_to_sudo
 
+from sentry import roles
 from sentry.auth import access
 from sentry.models import (
     AuditLogEntry, Organization, OrganizationMember, OrganizationStatus, Project,
@@ -358,6 +359,27 @@ class OrganizationView(BaseView):
 
         return (args, kwargs)
 
+    def get_allowed_roles(self, request, organization, member=None):
+        can_admin = request.access.has_scope('member:delete')
+
+        allowed_roles = []
+        if can_admin and not request.is_superuser():
+            acting_member = OrganizationMember.objects.get(
+                user=request.user,
+                organization=organization,
+            )
+            if member and roles.get(acting_member.role).priority < roles.get(member.role).priority:
+                can_admin = False
+            else:
+                allowed_roles = [
+                    r for r in roles.get_all()
+                    if r.priority <= roles.get(acting_member.role).priority
+                ]
+                can_admin = bool(allowed_roles)
+        elif request.is_superuser():
+            allowed_roles = roles.get_all()
+        return (can_admin, allowed_roles,)
+
 
 class TeamView(OrganizationView):
     """
diff --git a/src/sentry/web/frontend/create_organization_member.py b/src/sentry/web/frontend/create_organization_member.py
index 3511b4495c..2275ddd683 100644
--- a/src/sentry/web/frontend/create_organization_member.py
+++ b/src/sentry/web/frontend/create_organization_member.py
@@ -7,6 +7,7 @@ from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
 from sentry import roles
+from sentry.models import Team, TeamStatus
 from sentry.signals import member_invited
 from sentry.web.frontend.base import OrganizationView
 from sentry.web.forms.invite_organization_member import InviteOrganizationMemberForm
@@ -16,9 +17,10 @@ from sentry.web.forms.add_organization_member import AddOrganizationMemberForm
 class CreateOrganizationMemberView(OrganizationView):
     required_scope = 'org:write'
 
-    def get_form(self, request, organization):
+    def get_form(self, request, organization, all_teams, allowed_roles):
         initial = {
             'role': organization.default_role,
+            'teams': [],
         }
 
         if settings.SENTRY_ENABLE_INVITES:
@@ -26,10 +28,22 @@ class CreateOrganizationMemberView(OrganizationView):
         else:
             form_cls = AddOrganizationMemberForm
 
-        return form_cls(request.POST or None, initial=initial)
+        return form_cls(
+            data=request.POST or None,
+            all_teams=all_teams,
+            allowed_roles=allowed_roles,
+            initial=initial,
+        )
 
     def handle(self, request, organization):
-        form = self.get_form(request, organization)
+        can_admin, allowed_roles = self.get_allowed_roles(request, organization)
+
+        all_teams = Team.objects.filter(
+            organization=organization,
+            status=TeamStatus.VISIBLE
+        )
+
+        form = self.get_form(request, organization, all_teams, allowed_roles)
         if form.is_valid():
             om, created = form.save(request.user, organization, request.META['REMOTE_ADDR'])
 
@@ -51,7 +65,11 @@ class CreateOrganizationMemberView(OrganizationView):
         context = {
             'form': form,
             'is_invite': settings.SENTRY_ENABLE_INVITES,
-            'role_list': roles.get_all(),
+            'role_list': [
+                (r, r in allowed_roles)
+                for r in roles.get_all()
+            ],
+            'all_teams': all_teams
         }
 
         return self.respond('sentry/create-organization-member.html', context)
diff --git a/src/sentry/web/frontend/organization_member_settings.py b/src/sentry/web/frontend/organization_member_settings.py
index 54a05445c1..fc5ab276d0 100644
--- a/src/sentry/web/frontend/organization_member_settings.py
+++ b/src/sentry/web/frontend/organization_member_settings.py
@@ -6,7 +6,8 @@ from django.db.models import Q
 from django.utils.translation import ugettext_lazy as _, ugettext
 
 from sentry import roles
-from sentry.models import OrganizationMember, OrganizationMemberTeam, Team
+from sentry.models import OrganizationMember, OrganizationMemberTeam, \
+    Team, TeamStatus
 from sentry.web.frontend.base import OrganizationView
 from sentry.web.forms.edit_organization_member import EditOrganizationMemberForm
 from sentry.web.helpers import get_login_url
@@ -49,13 +50,11 @@ class OrganizationMemberSettingsView(OrganizationView):
 
         return self.redirect(redirect)
 
-    def view_member(self, request, organization, member):
+    def view_member(self, request, organization, member, all_teams):
         context = {
             'member': member,
             'enabled_teams': set(member.teams.all()),
-            'all_teams': Team.objects.filter(
-                organization=organization,
-            ),
+            'all_teams': all_teams,
             'role_list': roles.get_all(),
         }
 
@@ -76,31 +75,16 @@ class OrganizationMemberSettingsView(OrganizationView):
         elif request.POST.get('op') == 'regenerate' and member.is_pending:
             return self.resend_invite(request, organization, member, regen=True)
 
-        can_admin = request.access.has_scope('member:delete')
-
-        if can_admin and not request.is_superuser():
-            acting_member = OrganizationMember.objects.get(
-                user=request.user,
-                organization=organization,
-            )
-            if roles.get(acting_member.role).priority < roles.get(member.role).priority:
-                can_admin = False
-            else:
-                allowed_roles = [
-                    r for r in roles.get_all()
-                    if r.priority <= roles.get(acting_member.role).priority
-                ]
-                can_admin = bool(allowed_roles)
-        elif request.is_superuser():
-            allowed_roles = roles.get_all()
-
-        if member.user == request.user or not can_admin:
-            return self.view_member(request, organization, member)
+        can_admin, allowed_roles = self.get_allowed_roles(request, organization, member)
 
         all_teams = Team.objects.filter(
             organization=organization,
+            status=TeamStatus.VISIBLE
         )
 
+        if member.user == request.user or not can_admin:
+            return self.view_member(request, organization, member, all_teams)
+
         form = self.get_form(request, member, all_teams, allowed_roles)
         if form.is_valid():
             member = form.save(request.user, organization, request.META['REMOTE_ADDR'])
diff --git a/tests/acceptance/test_create_organization_member.py b/tests/acceptance/test_create_organization_member.py
new file mode 100644
index 0000000000..71a0d3c16d
--- /dev/null
+++ b/tests/acceptance/test_create_organization_member.py
@@ -0,0 +1,31 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class CreateOrganizationMemberTest(AcceptanceTestCase):
+    def setUp(self):
+        super(CreateOrganizationMemberTest, self).setUp()
+        self.user = self.create_user('foo@example.com')
+        self.org = self.create_organization(
+            name='Rowdy Tiger',
+            owner=None,
+        )
+        self.team = self.create_team(
+            organization=self.org,
+            name='Mariachi Band'
+        )
+        self.create_member(
+            user=self.user,
+            organization=self.org,
+            role='owner',
+            teams=[self.team],
+        )
+        self.login_as(self.user)
+
+    def test_invite(self):
+        """
+        Add by username (on-premises / by configuration only)
+        """
+        self.browser.get('/organizations/{}/members/new'.format(self.org.slug))
+        self.browser.snapshot(name='invite organization member')
diff --git a/tests/sentry/web/frontend/test_create_organization_member.py b/tests/sentry/web/frontend/test_create_organization_member.py
index d8d64070d2..3f10d7bda1 100644
--- a/tests/sentry/web/frontend/test_create_organization_member.py
+++ b/tests/sentry/web/frontend/test_create_organization_member.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from django.core import mail
 from django.core.urlresolvers import reverse
 
-from sentry.models import OrganizationMember
+from sentry.models import OrganizationMember, OrganizationMemberTeam
 from sentry.testutils import PermissionTestCase, TestCase
 
 
@@ -35,12 +35,16 @@ class CreateOrganizationMemberTest(TestCase):
 
     def test_valid_for_invites(self):
         organization = self.create_organization(name='Default')
+        team = self.create_team(name='foo', organization=organization)
+
         path = reverse('sentry-create-organization-member', args=[organization.slug])
         self.login_as(self.user)
 
         with self.settings(SENTRY_ENABLE_INVITES=True), self.tasks():
             resp = self.client.post(path, {
                 'email': 'foo@example.com',
+                'role': 'member',
+                'teams': [team.id, ]
             })
         assert resp.status_code == 302
 
@@ -50,6 +54,14 @@ class CreateOrganizationMemberTest(TestCase):
         )
 
         assert member.user is None
+        assert member.role == 'member'
+
+        om_teams = OrganizationMemberTeam.objects.filter(
+            organizationmember=member
+        )
+
+        assert len(om_teams) == 1
+        assert om_teams[0].team_id == team.id
 
         redirect_uri = reverse('sentry-organization-member-settings', args=[organization.slug, member.id])
         assert resp['Location'] == 'http://testserver' + redirect_uri
@@ -74,6 +86,7 @@ class CreateOrganizationMemberTest(TestCase):
         with self.settings(SENTRY_ENABLE_INVITES=True):
             resp = self.client.post(path, {
                 'email': 'foo@example.com',
+                'role': 'member'
             })
 
         assert resp.status_code == 302
@@ -81,6 +94,7 @@ class CreateOrganizationMemberTest(TestCase):
         member = OrganizationMember.objects.get(id=member.id)
 
         assert member.email is None
+        assert member.role == 'member'
 
         redirect_uri = reverse('sentry-organization-member-settings', args=[organization.slug, member.id])
         assert resp['Location'] == 'http://testserver' + redirect_uri
@@ -95,6 +109,7 @@ class CreateOrganizationMemberTest(TestCase):
         with self.settings(SENTRY_ENABLE_INVITES=False):
             resp = self.client.post(path, {
                 'user': 'foo@example.com',
+                'role': 'member'
             })
         assert resp.status_code == 302
 
@@ -116,6 +131,7 @@ class CreateOrganizationMemberTest(TestCase):
         with self.settings(SENTRY_ENABLE_INVITES=False):
             resp = self.client.post(path, {
                 'user': 'bar@example.com',
+                'role': 'member'
             })
 
         assert resp.status_code == 200
