commit 11fc2f81cb8570b064d0cfafb4fa25f0799c6c76
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Dec 4 14:51:53 2018 -0800

    analytics(ui): Record metrics for API requests (#10806)
    
    * add `mark()` and `measure()` helper funcs to `metric`
    
    * record metrics for API requests
    
    * fix some bugs
    
    * clear marks after measurement

diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index d57e1156e1..98a1b55e59 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -7,6 +7,7 @@ import {
   SUDO_REQUIRED,
   SUPERUSER_REQUIRED,
 } from 'app/constants/apiErrorCodes';
+import {metric} from 'app/utils/analytics';
 import {openSudo, redirectToProject} from 'app/actionCreators/modal';
 import GroupActions from 'app/actions/groupActions';
 import sdk from 'app/utils/sdk';
@@ -20,6 +21,7 @@ export class Request {
   cancel() {
     this.alive = false;
     this.xhr.abort();
+    metric('app.api.request-abort', 1);
   }
 }
 
@@ -159,6 +161,7 @@ export class Client {
     let method = options.method || (options.data ? 'POST' : 'GET');
     let data = options.data;
     let id = this.uniqueId();
+    metric.mark(`api-request-start-${id}`);
 
     if (!isUndefined(data) && method !== 'GET') {
       data = JSON.stringify(data);
@@ -187,8 +190,28 @@ export class Client {
         headers: {
           Accept: 'application/json; charset=utf-8',
         },
-        success: this.wrapCallback(id, options.success),
-        error: (...args) =>
+        success: (...args) => {
+          let [, , xhr] = args || [];
+          metric.measure({
+            name: 'app.api.request-success',
+            start: `api-request-start-${id}`,
+            data: {
+              path,
+              status: xhr && xhr.status,
+            },
+          });
+          this.wrapCallback(id, options.success)(...args);
+        },
+        error: (...args) => {
+          let [, , xhr] = args || [];
+          metric.measure({
+            name: 'app.api.request-error',
+            start: `api-request-start-${id}`,
+            data: {
+              path,
+              status: xhr && xhr.status,
+            },
+          });
           this.handleRequestError(
             {
               id,
@@ -196,7 +219,8 @@ export class Client {
               requestOptions: options,
             },
             ...args
-          ),
+          );
+        },
         complete: this.wrapCallback(id, options.complete, true),
       })
     );
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index 168d7e6db8..7829032163 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -1,4 +1,6 @@
 /* global module */
+import 'app/utils/emotion-setup';
+
 import {AppContainer} from 'react-hot-loader';
 import {renderToStaticMarkup} from 'react-dom/server';
 import * as Emotion from 'emotion';
@@ -17,21 +19,16 @@ import createReactClass from 'create-react-class';
 import jQuery from 'jquery';
 import moment from 'moment';
 
-import 'app/utils/emotion-setup';
-
+import {metric} from 'app/utils/analytics';
 import Main from 'app/main';
-import * as api from 'app/api';
 import ajaxCsrfSetup from 'app/utils/ajaxCsrfSetup';
+import * as api from 'app/api';
 import * as il8n from 'app/locale';
 import plugins from 'app/plugins';
 
 // Used for operational metrics to determine that the application js
 // bundle was loaded by browser.
-//
-// JSDOM implements window.performance but not window.performance.mark
-if (window.performance && typeof window.performance.mark === 'function') {
-  window.performance.mark('sentry-app-init');
-}
+metric.mark('sentry-app-init');
 
 // setup jquery for CSRF tokens
 jQuery.ajaxSetup({
diff --git a/src/sentry/static/sentry/app/utils/analytics.jsx b/src/sentry/static/sentry/app/utils/analytics.jsx
index bd9560c350..6411e9320f 100644
--- a/src/sentry/static/sentry/app/utils/analytics.jsx
+++ b/src/sentry/static/sentry/app/utils/analytics.jsx
@@ -29,3 +29,58 @@ export function amplitude(name, organization_id, data) {
 export function metric(name, value, tags) {
   HookStore.get('metrics:event').forEach(cb => cb(name, value, tags));
 }
+
+// JSDOM implements window.performance but not window.performance.mark
+const CAN_MARK =
+  window.performance &&
+  typeof window.performance.mark === 'function' &&
+  typeof window.performance.measure === 'function' &&
+  typeof window.performance.getEntriesByName === 'function' &&
+  typeof window.performance.clearMeasures === 'function';
+
+metric.mark = function metricMark(name) {
+  // Just ignore if browser is old enough that it doesn't support this
+  if (!CAN_MARK) {
+    return;
+  }
+
+  window.performance.mark(name);
+};
+
+/**
+ * Performs a measurement between `start` and `end` (or now if `end` is not specified)
+ * Calls `metric` with `name` and the measured time difference.
+ *
+ * @param {Object} options keyword args object
+ * @param {String} options.name Name of the metric event
+ * @param {String} options.start Name of starting mark
+ * @param {String} options.end (optional) Name of ending mark
+ * @param {Boolean} options.noCleanup Do not clean up marks and measurements when completed
+ * @param {Object} options.data (optional) Additional data to send with metric event
+ */
+metric.measure = function metricMeasure({name, start, end, data, noCleanup} = {}) {
+  // Just ignore if browser is old enough that it doesn't support this
+  if (!CAN_MARK) {
+    return;
+  }
+
+  if (!name || !start) {
+    throw new Error('Invalid arguments provided to `metric.measure`');
+  }
+
+  // Can't destructure from performance
+  const {performance} = window;
+
+  performance.measure(name, start, end);
+
+  // Retrieve measurement entries
+  performance
+    .getEntriesByName(name, 'measure')
+    .forEach(measurement => metric(measurement.name, measurement.duration, data));
+
+  // By default, clean up measurements
+  if (!noCleanup) {
+    performance.clearMeasures(name);
+    performance.clearMarks(start);
+  }
+};
