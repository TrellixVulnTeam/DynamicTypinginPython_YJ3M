commit 104cb7ea5be8d9a0e56fc74049876768659ff52a
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Feb 3 22:13:51 2016 -0800

    Added UI for inspecting dsym files

diff --git a/src/sentry/api/endpoints/dsym_files.py b/src/sentry/api/endpoints/dsym_files.py
index 4cc0786ac9..ffd72bcb6e 100644
--- a/src/sentry/api/endpoints/dsym_files.py
+++ b/src/sentry/api/endpoints/dsym_files.py
@@ -51,7 +51,7 @@ class DSymFilesEndpoint(ProjectEndpoint):
         return self.paginate(
             request=request,
             queryset=file_list,
-            order_by='uuid',
+            order_by='-file__timestamp',
             paginator_cls=OffsetPaginator,
             on_results=lambda x: serialize(x, request.user),
         )
@@ -82,6 +82,6 @@ class DSymFilesEndpoint(ProjectEndpoint):
 
         fileobj = request.FILES['file']
 
-        files = DSymFile.create_files_from_zip(project, fileobj)
+        files = DSymFile.create_files_from_macho_zip(project, fileobj)
 
         return Response(serialize(files, request.user), status=201)
diff --git a/src/sentry/api/serializers/models/dsym_file.py b/src/sentry/api/serializers/models/dsym_file.py
index 5825f3b68f..07b2fb29f7 100644
--- a/src/sentry/api/serializers/models/dsym_file.py
+++ b/src/sentry/api/serializers/models/dsym_file.py
@@ -12,6 +12,7 @@ class DSymFileSerializer(Serializer):
             'uuid': obj.uuid,
             'cpuName': obj.cpu_name,
             'objectName': obj.object_name,
+            'symbolType': obj.dsym_type,
             'headers': obj.file.headers,
             'size': obj.file.size,
             'sha1': obj.file.checksum,
diff --git a/src/sentry/models/dsymfile.py b/src/sentry/models/dsymfile.py
index b06276d15e..4cdef7d75c 100644
--- a/src/sentry/models/dsymfile.py
+++ b/src/sentry/models/dsymfile.py
@@ -20,6 +20,11 @@ from sentry.models.file import File
 from sentry.utils.zip import safe_extract_zip
 
 
+KNOWN_DSYM_TYPES = {
+    'application/x-mach-binary': 'macho'
+}
+
+
 class DSymFile(Model):
     """
     A single dsym file that is associated with a project.
@@ -39,12 +44,17 @@ class DSymFile(Model):
         app_label = 'sentry'
         db_table = 'sentry_dsymfile'
 
+    @property
+    def dsym_type(self):
+        ct = self.file.headers.get('Content-Type').lower()
+        return KNOWN_DSYM_TYPES.get(ct, 'unknown')
+
     @classmethod
-    def create_from_uuid(cls, project, cpu_name, uuid, fileobj,
-                         object_name):
-        """This creates a dsym file from the given uuid and open file object
-        to a dsym file.  This will not verify the uuid.  Use
-        `create_files_from_zip` for doing everything.
+    def create_macho_dsym_from_uuid(cls, project, cpu_name, uuid, fileobj,
+                                    object_name):
+        """This creates a mach dsym file from the given uuid and open file
+        object to a dsym file.  This will not verify the uuid.  Use
+        `create_files_from_macho_zip` for doing everything.
         """
         file = File.objects.create(
             name=uuid,
@@ -71,7 +81,7 @@ class DSymFile(Model):
             )
 
     @classmethod
-    def create_files_from_zip(cls, project, fileobj):
+    def create_files_from_macho_zip(cls, project, fileobj):
         """Creates all missing dsym files from the given zip file.  This
         returns a list of all `DSymFiles` created.
         """
@@ -100,7 +110,7 @@ class DSymFile(Model):
             rv = []
             for cpu, uuid, filename in to_create:
                 with open(filename, 'rb') as f:
-                    rv.append((DSymFile.create_from_uuid(
+                    rv.append((DSymFile.create_macho_dsym_from_uuid(
                         project, cpu, uuid, f, os.path.basename(filename))))
             return rv
         finally:
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index c4ef2d6099..bef4eb8aea 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -32,6 +32,7 @@ import ProjectInstallOverview from './views/projectInstall/overview';
 import ProjectInstallPlatform from './views/projectInstall/platform';
 import ProjectReleases from './views/projectReleases';
 import ProjectSavedSearches from './views/projectSavedSearches';
+import ProjectDebugInfo from './views/projectDebugInfo';
 import ProjectSettings from './views/projectSettings';
 import ProjectUserReports from './views/projectUserReports';
 import ProjectUserReportSettings from './views/projectUserReportSettings';
@@ -100,6 +101,7 @@ let routes = (
             <Route path=":platform/" component={errorHandler(ProjectInstallPlatform)}/>
           </Route>
           <Route path="saved-searches/" component={errorHandler(ProjectSavedSearches)} />
+          <Route path="debug-info/" component={errorHandler(ProjectDebugInfo)} />
           <Route path="user-reports/" component={errorHandler(ProjectUserReportSettings)} />
         </Route>
         <Redirect from="group/:groupId/" to="issues/:groupId/" />
diff --git a/src/sentry/static/sentry/app/views/projectDebugInfo.jsx b/src/sentry/static/sentry/app/views/projectDebugInfo.jsx
new file mode 100644
index 0000000000..e2f6830aae
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectDebugInfo.jsx
@@ -0,0 +1,122 @@
+import React from 'react';
+
+import ApiMixin from '../mixins/apiMixin';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import DateTime from '../components/dateTime';
+import {t} from '../locale';
+
+const ProjectDebugInfo = React.createClass({
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      debugSymbols: [],
+    };
+  },
+
+  componentDidMount() {
+    this.fetchData();
+  },
+
+  fetchData() {
+    let {orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/files/dsyms/`, {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          error: false,
+          loading: false,
+          debugSymbols: data,
+          pageLinks: jqXHR.getResponseHeader('Link')
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+
+  renderDebugTable() {
+    let body;
+
+    if (this.state.loading)
+      body = this.renderLoading();
+    else if (this.state.error)
+      body = <LoadingError onRetry={this.fetchData} />;
+    else if (this.state.debugSymbols.length > 0)
+      body = this.renderResults();
+    else
+      body = this.renderEmpty();
+
+    return body;
+  },
+
+  renderLoading() {
+    return (
+      <div className="box">
+        <LoadingIndicator />
+      </div>
+    );
+  },
+
+  renderEmpty() {
+    return (
+      <div className="box empty-stream">
+        <span className="icon icon-exclamation" />
+        <p>{t('There are no debug symbols for this project.')}</p>
+      </div>
+    );
+  },
+
+  renderResults() {
+    return (
+      <table className="table">
+        <thead>
+          <tr>
+            <th>{t('UUID')}</th>
+            <th>{t('Object Name')}</th>
+            <th>{t('Architecture')}</th>
+            <th>{t('Symbol Type')}</th>
+            <th>{t('Upload Date')}</th>
+          </tr>
+        </thead>
+        <tbody>
+          {this.state.debugSymbols.map((item, idx) => {
+            return (
+              <tr key={idx}>
+                <td>{item.uuid}</td>
+                <td>{item.objectName}</td>
+                <td>{item.cpuName}</td>
+                <td>{item.symbolType}</td>
+                <td><DateTime date={item.dateCreated}/></td>
+              </tr>
+            );
+          })}
+        </tbody>
+      </table>
+    );
+  },
+
+  render() {
+    return (
+      <div>
+        <h1>{t('Debug Info')}</h1>
+        <p>{t(`
+          Here you can find uploaded debug information (for instance debug
+          symbol files).  This is used to convert addresses from crash dumps
+          into function names and locations.  For JavaScript debug support
+          look at releases instead.
+        `)}</p>
+        <h2>{t('Debug Symbols')}</h2>
+        {this.renderDebugTable()}
+      </div>
+    );
+  }
+});
+
+export default ProjectDebugInfo;
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index 266d616db8..d7e9057c91 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -96,6 +96,7 @@ const ProjectSettings = React.createClass({
             {features.has('user-reports') &&
               <ListLink to={`/${orgId}/${projectId}/settings/user-reports/`}>{t('User Reports')}</ListLink>
             }
+            <ListLink to={`/${orgId}/${projectId}/settings/debug-info/`}>{t('Debug Info')}</ListLink>
           </ul>
           <h6 className="nav-header">{t('Setup')}</h6>
           <ul className="nav nav-stacked">
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 1a4aefba12..c7ba5082fc 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -179,6 +179,9 @@
     <li>
         <a href="{% absolute_uri '/{}/{}/settings/saved-searches/' project.organization.slug project.slug %}">{% trans "Saved Searches" %}</a>
     </li>
+    <li>
+        <a href="{% absolute_uri '/{}/{}/settings/debug-info/' project.organization.slug project.slug %}">{% trans "Debug Info" %}</a>
+    </li>
     {% feature projects:user-reports project %}
     <li>
         <a href="{% absolute_uri '/{}/{}/settings/user-reports/' project.organization.slug project.slug %}">{% trans "User Reports" %}</a>
