commit 99df32b25863ea76765319cebcda85da40e17438
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Mar 5 10:46:13 2020 -0800

    feat(ui): Improve CircularProgressbar (#17463)
    
    - Adds a text value to the center of the circle progress bar
    - Adds animation to the text value on changes
    - Adds animation to progress bar value changes
    - Simplifies the code by using `circle` svg elements
    - More customization via the  backgroundColor, progressColor, and
      textCss properties.

diff --git a/docs-ui/components/circularProgressbar.stories.js b/docs-ui/components/circularProgressbar.stories.js
index 492647f007..87f0a2a8d9 100644
--- a/docs-ui/components/circularProgressbar.stories.js
+++ b/docs-ui/components/circularProgressbar.stories.js
@@ -1,31 +1,96 @@
 import React from 'react';
 import {storiesOf} from '@storybook/react';
 import {withInfo} from '@storybook/addon-info';
-import {number} from '@storybook/addon-knobs';
+import {number, text, boolean, color} from '@storybook/addon-knobs';
+import styled from '@emotion/styled';
+import {css} from '@emotion/core';
 
 import CircularProgressbar from 'app/components/circularProgressbar';
 
+class Ticker extends React.Component {
+  state = {
+    tickNumber: 0,
+  };
+
+  componentDidMount() {
+    this.interval = setInterval(this.tick, 1000);
+  }
+
+  componentWillUnmount() {
+    clearInterval(this.interval);
+  }
+
+  tick = () =>
+    this.setState(s => ({
+      tickNumber: (s.tickNumber + 5) % 100,
+    }));
+
+  render() {
+    return this.props.children({tickNumber: this.state.tickNumber});
+  }
+}
+
 storiesOf('UI|CircularProgressbar', module).add(
   'default',
-  withInfo('Description')(() => {
+  withInfo('Circle style progress bar ')(() => {
     const value = number('Value', 29);
-    const size = number('Size', 20);
+    const size = number('Size', 40);
     const minValue = number('Min Value', 0);
     const maxValue = number('Max Value', 100);
-    const strokeWidth = number('Stroke Width', 3);
+    const barWidth = number('Bar Width', 3);
+    const textValue = text('Text Value', '');
+    const animateText = boolean('Animate Text', false);
+    const backgroundColor = color('Background color');
+    const progressColor = color('Progress color');
 
     return (
-      <React.Fragment>
+      <Grid>
         <CircularProgressbar
           value={value}
-          size={size}
           minValue={minValue}
           maxValue={maxValue}
-          strokeWidth={strokeWidth}
+          size={size}
+          barWidth={barWidth}
+          text={textValue}
+          animateText={animateText}
+          backgroundColor={backgroundColor}
+          progressColor={progressColor}
         />
-        <CircularProgressbar value={61} />
-        <CircularProgressbar value={85} />
-      </React.Fragment>
+        <Ticker>
+          {({tickNumber}) => (
+            <CircularProgressbar
+              animateText
+              value={tickNumber}
+              text={tickNumber}
+              size={38}
+              barWidth={4}
+              progressColor="#f58159"
+            />
+          )}
+        </Ticker>
+        <CircularProgressbar
+          value={65}
+          size={60}
+          barWidth={6}
+          text="BAD"
+          textCss={() => css`
+            font-size: 14px;
+            font-weight: bold;
+            fill: #ec5f5f;
+          `}
+          progressColor="#ff4d44"
+          backgroundColor="#fbe6e6"
+        />
+      </Grid>
     );
   })
 );
+
+const Grid = styled('div')`
+  margin-top: 8px;
+  display: grid;
+  grid-template-columns: repeat(auto-fit, 50px);
+  align-items: center;
+  justify-content: center;
+  grid-gap: 8px;
+`;
diff --git a/src/sentry/static/sentry/app/components/circularProgressbar.tsx b/src/sentry/static/sentry/app/components/circularProgressbar.tsx
index 36aafc08cb..8387c4eb00 100644
--- a/src/sentry/static/sentry/app/components/circularProgressbar.tsx
+++ b/src/sentry/static/sentry/app/components/circularProgressbar.tsx
@@ -1,113 +1,149 @@
-import * as React from 'react';
-import styled from '@emotion/styled';
+import React from 'react';
+import styled, {SerializedStyles} from '@emotion/styled';
+import posed, {PoseGroup} from 'react-pose';
 
-import space from 'app/styles/space';
+import theme from 'app/utils/theme';
+import testablePose from 'app/utils/testablePose';
 
-type PathProps = {
-  dashRatio: number;
-  pathRadius: number;
-  strokeWidth: number;
-  size: number;
-  className?: string;
+type TextProps = {
+  textCss?: Props['textCss'];
+  percent: number;
+  theme: typeof theme;
 };
 
-const Path = ({dashRatio, pathRadius, strokeWidth, size, className}: PathProps) => {
-  const diameter = Math.PI * 2 * pathRadius;
-  const gapLength = (1 - dashRatio) * diameter;
-
-  return (
-    <path
-      className={className}
-      style={{
-        strokeDasharray: `${diameter}px ${diameter}px`,
-        strokeDashoffset: `${gapLength}px`,
-      }}
-      d={`
-      M ${size / 2},${size / 2}
-      m 0,-${pathRadius}
-      a ${pathRadius},${pathRadius} 0 1 1 0,${2 * pathRadius}
-      a ${pathRadius},${pathRadius} 0 1 1 0,-${2 * pathRadius}
-    `}
-      strokeWidth={strokeWidth}
-      fillOpacity={0}
-    />
-  );
-};
-
-type Props = {
+type Props = React.HTMLAttributes<SVGSVGElement> & {
   value: number;
-  size?: number;
   maxValue?: number;
   minValue?: number;
-  strokeWidth?: number;
+  size?: number;
+  /**
+   * The width of the progress ring bar
+   */
+  barWidth?: number;
+  /**
+   * Text to display in the center of the ring
+   */
+  text?: React.ReactNode;
+  /**
+   * The css to apply to the center text. A function may be provided to compute
+   * styles based on the state of the progress bar.
+   */
+  textCss?: (p: TextProps) => SerializedStyles;
+  /**
+   * Apply a micro animation when the text value changes
+   */
+  animateText?: boolean;
+  /**
+   * The color of the ring bar. A function may be provided to compute the color
+   * based on the percent value filled of the progress bar.
+   */
+  progressColor?: string | ((opts: {percent: number}) => string);
+  /**
+   * The color of the ring background
+   */
+  backgroundColor?: string;
 };
 
-const CircularProgressbar = ({
+const Text = styled('text')<Omit<TextProps, 'theme'>>`
+  fill: ${p => p.theme.gray1};
+  font-size: ${p => p.theme.fontSizeExtraSmall};
+  text-anchor: middle;
+  dominant-baseline: central;
+  transition: fill 100ms;
+  ${p => p.textCss && p.textCss(p)}
+`;
+
+const PosedText = posed(Text)(
+  testablePose({
+    init: {opacity: 0, y: -10},
+    enter: {opacity: 1, y: 0},
+    exit: {opacity: 0, y: 10},
+  })
+);
+
+const ProgressRing = ({
   value,
-  size = 20,
-  maxValue = 100,
   minValue = 0,
-  strokeWidth = 3,
+  maxValue = 100,
+  size = 20,
+  barWidth = 3,
+  text,
+  textCss,
+  animateText = false,
+  progressColor = theme.green,
+  backgroundColor = theme.offWhite2,
+  ...p
 }: Props) => {
-  const pathRadius = size / 2 - strokeWidth / 2;
+  const radius = size / 2 - barWidth / 2;
+  const circumference = 2 * Math.PI * radius;
+
   const boundedValue = Math.min(Math.max(value, minValue), maxValue);
-  const pathRatio = (boundedValue - minValue) / (maxValue - minValue);
+  const progress = (boundedValue - minValue) / (maxValue - minValue);
+  const percent = progress * 100;
+  const progressOffset = (1 - progress) * circumference;
 
-  return (
-    <ProgressbarWrapper>
-      <Progressbar viewBox={`0 0 ${size} ${size}`} size={size}>
-        <Trail
-          size={size}
-          dashRatio={1}
-          pathRadius={pathRadius}
-          strokeWidth={strokeWidth}
-        />
-
-        <Progress
-          value={value}
-          size={size}
-          dashRatio={pathRatio}
-          pathRadius={pathRadius}
-          strokeWidth={strokeWidth}
-        />
-      </Progressbar>
-    </ProgressbarWrapper>
+  const TextComponent = animateText ? PosedText : Text;
+
+  let textNode = (
+    <TextComponent key={text?.toString()} x="50%" y="50%" {...{textCss, percent}}>
+      {text}
+    </TextComponent>
   );
-};
 
-// TODO(releasesv2): adjust thresholds once decided, probably pass as props
-const getColor = ({value, theme}) => {
-  if (value < 33) {
-    return theme.red;
-  }
-  if (value < 66) {
-    return theme.yellowOrange;
-  }
-  if (value >= 66) {
-    return theme.green;
-  }
-
-  return theme.gray3;
-};
+  textNode = animateText ? (
+    <PoseGroup preEnterPose="init">{textNode}</PoseGroup>
+  ) : (
+    textNode
+  );
 
-const ProgressbarWrapper = styled('div')`
-  display: inline-block;
-  position: relative;
-  bottom: ${space(0.25)};
-`;
+  const ringColor =
+    typeof progressColor === 'function' ? progressColor({percent}) : progressColor;
 
-const Progressbar = styled('svg')<{size: number}>`
-  width: ${p => p.size}px;
-  vertical-align: middle;
-`;
+  return (
+    <svg height={radius * 2 + barWidth} width={radius * 2 + barWidth} {...p}>
+      {text !== undefined && textNode}
+      <RingBackground
+        r={radius}
+        barWidth={barWidth}
+        cx={radius + barWidth / 2}
+        cy={radius + barWidth / 2}
+        color={backgroundColor}
+      />
+      <RingBar
+        strokeDashoffset={progressOffset}
+        circumference={circumference}
+        r={radius}
+        barWidth={barWidth}
+        cx={radius + barWidth / 2}
+        cy={radius + barWidth / 2}
+        color={ringColor}
+      />
+    </svg>
+  );
+};
 
-const Trail = styled(Path)`
-  stroke: ${p => p.theme.offWhite2};
+const RingBackground = styled('circle')<{color: string; barWidth: number}>`
+  fill: none;
+  stroke: ${p => p.color};
+  stroke-width: ${p => p.barWidth}px;
+  transition: stroke 100ms;
 `;
 
-const Progress = styled(Path)<{value: number}>`
-  transition: stroke-dashoffset 0.5s ease 0s;
-  stroke: ${getColor};
+const RingBar = styled('circle')<{
+  color: string;
+  circumference: number;
+  barWidth: number;
+}>`
+  fill: none;
+  stroke: ${p => p.color};
+  stroke-width: ${p => p.barWidth}px;
+  stroke-dasharray: ${p => p.circumference} ${p => p.circumference};
+  transform: rotate(-90deg);
+  transform-origin: 50% 50%;
+  transition: stroke-dashoffset 200ms, stroke 100ms;
 `;
 
-export default CircularProgressbar;
+export default ProgressRing;
+
+// We export components to allow for css selectors
+export {RingBar, RingBackground, Text as RingText};
