commit cc4536901db0323d1e6433416abf1d0ecd977d61
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Apr 19 18:04:27 2016 +0200

    Move bulk insert code into the models

diff --git a/src/sentry/models/dsymfile.py b/src/sentry/models/dsymfile.py
index f17e53deb6..048e029dd9 100644
--- a/src/sentry/models/dsymfile.py
+++ b/src/sentry/models/dsymfile.py
@@ -12,7 +12,8 @@ import os
 import shutil
 import hashlib
 import tempfile
-from django.db import models, transaction, connection, IntegrityError
+from itertools import chain
+from django.db import models, router, transaction, connection, IntegrityError
 
 try:
     from symsynd.macho.arch import get_macho_uuids
@@ -24,6 +25,7 @@ from sentry.db.models import FlexibleForeignKey, Model, BoundedBigIntegerField,
     sane_repr, BaseManager
 from sentry.models.file import File
 from sentry.utils.zip import safe_extract_zip
+from sentry.utils.db import is_sqlite
 
 
 MAX_SYM = 256
@@ -151,6 +153,49 @@ class DSymBundle(Model):
 
 class DSymSymbolManager(BaseManager):
 
+    def bulk_insert(self, items):
+        db = router.db_for_write(DSymSymbol)
+        items = list(items)
+        if not items:
+            return
+
+        # On SQLite we don't do this.  Two reasons: one, it does not
+        # seem significantly faster and you're an idiot if you import
+        # huge amounts of system symbols into sqlite anyways.  secondly
+        # because of the low parameter limit
+        if not is_sqlite():
+            try:
+                with transaction.atomic(using=db):
+                    cur = connection.cursor()
+                    cur.execute('''
+                        insert into sentry_dsymsymbol
+                            (object_id, address, symbol)
+                             values %s
+                    ''' % ', '.join(['(%s, %s, %s)'] * len(items)),
+                        list(chain(*items)))
+                    cur.close()
+                return
+            except IntegrityError:
+                pass
+
+        cur = connection.cursor()
+        for item in items:
+            cur.execute('''
+                insert into sentry_dsymsymbol
+                    (object_id, address, symbol)
+                select
+                    %(object_id)s, %(address)s, %(symbol)s
+                where not exists (
+                    select 1 from sentry_dsymsymbol
+                       where object_id = %(object_id)s
+                         and address = %(address)s);
+            ''', {
+                'object_id': item[0],
+                'address': item[1],
+                'symbol': item[2],
+            })
+        cur.close()
+
     def lookup_symbol(self, instruction_addr, image_addr, uuid,
                       cpu_name=None, object_path=None, system_info=None):
         """Finds a system symbol."""
diff --git a/src/sentry/runner/commands/dsym.py b/src/sentry/runner/commands/dsym.py
index c61e3200ff..fd28de8869 100644
--- a/src/sentry/runner/commands/dsym.py
+++ b/src/sentry/runner/commands/dsym.py
@@ -11,9 +11,6 @@ import uuid
 import json
 import click
 import threading
-from itertools import chain
-
-from django.db import connection, transaction, IntegrityError
 
 from sentry.runner.decorators import configuration
 
@@ -28,7 +25,6 @@ class Done(Exception):
 def load_bundle(q, uuid, data, sdk_info, trim_symbols, demangle):
     from sentry.models import DSymBundle, DSymObject, DSymSDK
     from sentry.models.dsymfile import MAX_SYM
-    from sentry.utils.db import is_sqlite
     from symsynd.demangle import demangle_symbol
 
     def _process_symbol(sym):
@@ -63,13 +59,7 @@ def load_bundle(q, uuid, data, sdk_info, trim_symbols, demangle):
         object=obj
     )[0]
 
-    # SQlite has a low parameter limit of 999.  Since we need three
-    # parameters to insert a row, we can only do 333 items in a batch
-    if is_sqlite():
-        step = 333
-    else:
-        step = 4000
-
+    step = 4000
     symbols = data['symbols']
     for idx in xrange(0, len(symbols) + step, step):
         end_idx = min(idx + step, len(symbols))
@@ -83,53 +73,16 @@ def load_bundle(q, uuid, data, sdk_info, trim_symbols, demangle):
 
 def process_archive(members, zip, sdk_info, threads=8, trim_symbols=False,
                     demangle=True):
+    from sentry.models import DSymSymbol
     import Queue
     q = Queue.Queue(threads)
 
     def process_items():
-        items = None
-        can_bulk = True
         while 1:
-            try:
-                with transaction.atomic():
-                    cur = connection.cursor()
-                    while 1:
-                        if items is None:
-                            items = q.get()
-                        if items is SHUTDOWN:
-                            raise Done
-                        if not items:
-                            continue
-
-                        if can_bulk:
-                            bulk = '''
-                                insert into sentry_dsymsymbol
-                                    (object_id, address, symbol)
-                                     values %s
-                            ''' % ', '.join(['(%s, %s, %s)'] * len(items))
-                            cur.execute(bulk, list(chain(*items)))
-                        else:
-                            for item in items:
-                                cur.execute('''
-                                    insert into sentry_dsymsymbol
-                                        (object_id, address, symbol)
-                                    select
-                                        %(object_id)s, %(address)s, %(symbol)s
-                                    where not exists (
-                                        select 1 from sentry_dsymsymbol
-                                           where object_id = %(object_id)s
-                                             and address = %(address)s);
-                                ''', {
-                                    'object_id': item[0],
-                                    'address': item[1],
-                                    'symbol': item[2],
-                                })
-                        items = None
-                        can_bulk = True
-            except IntegrityError:
-                can_bulk = False
-            except Done:
-                break
+            items = q.get()
+            if items is SHUTDOWN:
+                raise Done
+            DSymSymbol.objects.bulk_insert(items)
 
     pool = []
     for x in xrange(threads):
