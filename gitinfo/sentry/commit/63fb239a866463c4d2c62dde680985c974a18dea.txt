commit 63fb239a866463c4d2c62dde680985c974a18dea
Author: adhiraj <adhirajsomani@gmail.com>
Date:   Thu Feb 22 11:24:13 2018 -0800

    Assistant frontend prototype (#7209)
    
    Frontend changes for assistant

diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index d38633128e..69a6eb9ace 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -33,6 +33,7 @@ default_manager.add('projects:discard-groups', ProjectFeature)  # NOQA
 default_manager.add('projects:custom-inbound-filters', ProjectFeature)  # NOQA
 default_manager.add('projects:minidump', ProjectFeature)  # NOQA
 default_manager.add('organizations:environments', OrganizationFeature)  # NOQA
+default_manager.add('user:assistant')
 
 # expose public api
 add = default_manager.add
diff --git a/src/sentry/static/sentry/app/actionCreators/guides.jsx b/src/sentry/static/sentry/app/actionCreators/guides.jsx
new file mode 100644
index 0000000000..c2c5fa2c47
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/guides.jsx
@@ -0,0 +1,50 @@
+import {Client} from '../api';
+import GuideActions from '../actions/guideActions';
+
+const api = new Client();
+
+export function fetchGuides() {
+  api.request('/assistant/', {
+    method: 'GET',
+    success: data => {
+      GuideActions.fetchSucceeded(data);
+    },
+  });
+}
+
+export function registerAnchor(anchor) {
+  GuideActions.registerAnchor(anchor);
+}
+
+export function unregisterAnchor(anchor) {
+  GuideActions.unregisterAnchor(anchor);
+}
+
+export function nextStep() {
+  GuideActions.nextStep();
+}
+
+export function closeGuide() {
+  GuideActions.closeGuide();
+}
+
+export function markUseful(guideId, useful) {
+  api.request('/assistant/', {
+    method: 'PUT',
+    data: {
+      guide_id: guideId,
+      status: 'viewed',
+      useful,
+    },
+  });
+}
+
+export function dismiss(guideId) {
+  api.request('/assistant/', {
+    method: 'PUT',
+    data: {
+      guide_id: guideId,
+      status: 'dismissed',
+    },
+  });
+}
diff --git a/src/sentry/static/sentry/app/actions/guideActions.jsx b/src/sentry/static/sentry/app/actions/guideActions.jsx
new file mode 100644
index 0000000000..c833b80204
--- /dev/null
+++ b/src/sentry/static/sentry/app/actions/guideActions.jsx
@@ -0,0 +1,11 @@
+import Reflux from 'reflux';
+
+let GuideActions = Reflux.createActions([
+  'closeGuide',
+  'fetchSucceeded',
+  'nextStep',
+  'registerAnchor',
+  'unregisterAnchor',
+]);
+
+export default GuideActions;
diff --git a/src/sentry/static/sentry/app/components/assistant/guideAnchor.jsx b/src/sentry/static/sentry/app/components/assistant/guideAnchor.jsx
new file mode 100644
index 0000000000..8760f10581
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/assistant/guideAnchor.jsx
@@ -0,0 +1,77 @@
+import PropTypes from 'prop-types';
+import classNames from 'classnames';
+import React from 'react';
+import $ from 'jquery';
+import createReactClass from 'create-react-class';
+import Reflux from 'reflux';
+import {registerAnchor, unregisterAnchor} from '../../actionCreators/guides';
+import GuideStore from '../../stores/guideStore';
+
+// A guide anchor provides a ripple-effect on an element on the page to draw attention
+// to it. Guide anchors register with the guide store, which uses this information to
+// determine which guides can be shown on the page.
+const GuideAnchor = createReactClass({
+  propTypes: {
+    target: PropTypes.string.isRequired,
+    type: PropTypes.oneOf(['text', 'button']),
+  },
+
+  mixins: [Reflux.listenTo(GuideStore, 'onGuideStateChange')],
+
+  getInitialState() {
+    return {
+      active: false,
+    };
+  },
+
+  componentDidMount() {
+    registerAnchor(this);
+  },
+
+  componentDidUpdate(prevProps, prevState) {
+    if (!prevState.active && this.state.active) {
+      $('html, body').animate(
+        {
+          scrollTop: $(this.anchorElement).offset().top,
+        },
+        1000
+      );
+    }
+  },
+
+  componentWillUnmount() {
+    unregisterAnchor(this);
+  },
+
+  onGuideStateChange(data) {
+    if (
+      data.currentGuide &&
+      data.currentStep > 0 &&
+      data.currentGuide.steps[data.currentStep - 1].target == this.props.target
+    ) {
+      this.setState({active: true});
+    } else {
+      this.setState({active: false});
+    }
+  },
+
+  render() {
+    let {target, type} = this.props;
+
+    return (
+      <div
+        ref={el => (this.anchorElement = el)}
+        className={classNames('guide-anchor', type)}
+      >
+        {this.props.children}
+        <span
+          className={classNames(target, 'guide-anchor-ping', {
+            active: this.state.active,
+          })}
+        />
+      </div>
+    );
+  },
+});
+
+export default GuideAnchor;
diff --git a/src/sentry/static/sentry/app/components/assistant/guideDrawer.jsx b/src/sentry/static/sentry/app/components/assistant/guideDrawer.jsx
new file mode 100644
index 0000000000..df961b6acc
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/assistant/guideDrawer.jsx
@@ -0,0 +1,55 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import Button from '../buttons/button';
+import {t} from '../../locale';
+import {dismiss, markUseful, nextStep} from '../../actionCreators/guides';
+
+// GuideDrawer is what slides up when the user clicks on a guide cue.
+export default class GuideDrawer extends React.Component {
+  static propTypes = {
+    guide: PropTypes.object.isRequired,
+    step: PropTypes.number.isRequired,
+    onClose: PropTypes.func.isRequired,
+  };
+
+  handleUseful = useful => {
+    markUseful(this.props.guide.id, useful);
+    this.props.onClose();
+  };
+
+  handleDismiss = () => {
+    dismiss(this.props.guide.id);
+    this.props.onClose();
+  };
+
+  render() {
+    return (
+      <div>
+        <div className="assistant-drawer-title">
+          {this.props.guide.steps[this.props.step - 1].title}
+        </div>
+        <div className="assistant-drawer-message">
+          {this.props.guide.steps[this.props.step - 1].message}
+        </div>
+        <div>
+          {this.props.step < this.props.guide.steps.length ? (
+            <div>
+              <Button onClick={nextStep}>{t('Next')} &rarr;</Button>
+              <Button onClick={this.handleDismiss}>{t('Dismiss')}</Button>
+            </div>
+          ) : (
+            <div>
+              <p>{t('Did you find this guide useful?')}</p>
+              <Button onClick={() => this.handleUseful(true)}>
+                {t('Yes')} &nbsp; &#x2714;
+              </Button>
+              <Button onClick={() => this.handleUseful(false)}>
+                {t('No')} &nbsp; &#x2716;
+              </Button>
+            </div>
+          )}
+        </div>
+      </div>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/assistant/helper.jsx b/src/sentry/static/sentry/app/components/assistant/helper.jsx
new file mode 100644
index 0000000000..6436ae4b5a
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/assistant/helper.jsx
@@ -0,0 +1,98 @@
+import React from 'react';
+import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
+import {t} from '../../locale';
+import {closeGuide, fetchGuides, nextStep} from '../../actionCreators/guides';
+import SupportDrawer from './supportDrawer';
+import GuideDrawer from './guideDrawer';
+import GuideStore from '../../stores/guideStore';
+
+// AssistantHelper is responsible for rendering the cue message, guide drawer and support drawer.
+const AssistantHelper = createReactClass({
+  displayName: 'AssistantHelper',
+
+  mixins: [Reflux.listenTo(GuideStore, 'onGuideStateChange')],
+
+  getInitialState() {
+    return {
+      isDrawerOpen: false,
+      // currentGuide and currentStep are obtained from GuideStore.
+      // Even though this component doesn't need currentStep, it's
+      // child GuideDrawer does, and it's cleaner for only the parent
+      // to subscribe to GuideStore and pass down the guide and step,
+      // rather than have both parent and child subscribe to GuideStore.
+      currentGuide: null,
+      currentStep: 0,
+    };
+  },
+
+  componentDidMount() {
+    fetchGuides();
+  },
+
+  onGuideStateChange(data) {
+    let newState = {
+      currentGuide: data.currentGuide,
+      currentStep: data.currentStep,
+    };
+    if (this.state.currentGuide != data.currentGuide) {
+      newState.isDrawerOpen = false;
+    }
+    this.setState(newState);
+  },
+
+  handleDrawerOpen() {
+    this.setState({
+      isDrawerOpen: true,
+    });
+    nextStep();
+  },
+
+  handleSupportDrawerClose() {
+    this.setState({
+      isDrawerOpen: false,
+    });
+  },
+
+  render() {
+    const cueText = this.state.currentGuide
+      ? this.state.currentGuide.cue
+      : t('Need Help?');
+    // isDrawerOpen and currentGuide/currentStep live in different places and are updated
+    // non-atomically. So we need to guard against the inconsistent state of the drawer
+    // being open and a guide being present, but currentStep not updated yet.
+    // If this gets too complicated, it would be better to move isDrawerOpen into
+    // GuideStore so we can update the state atomically in onGuideStateChange.
+    let showDrawer = false;
+    if (
+      this.state.isDrawerOpen &&
+      (!this.state.currentGuide || this.state.currentStep > 0)
+    ) {
+      showDrawer = true;
+    }
+
+    return (
+      <div className="assistant-container">
+        {showDrawer ? (
+          <div className="assistant-drawer">
+            {this.state.currentGuide ? (
+              <GuideDrawer
+                guide={this.state.currentGuide}
+                step={this.state.currentStep}
+                onClose={closeGuide}
+              />
+            ) : (
+              <SupportDrawer onClose={this.handleSupportDrawerClose} />
+            )}
+          </div>
+        ) : (
+          <a onClick={this.handleDrawerOpen} className="assistant-cue">
+            {cueText}
+          </a>
+        )}
+      </div>
+    );
+  },
+});
+
+export default AssistantHelper;
diff --git a/src/sentry/static/sentry/app/components/assistant/supportDrawer.jsx b/src/sentry/static/sentry/app/components/assistant/supportDrawer.jsx
new file mode 100644
index 0000000000..f82740436f
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/assistant/supportDrawer.jsx
@@ -0,0 +1,137 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import _ from 'lodash';
+import createReactClass from 'create-react-class';
+import $ from 'jquery';
+import {t} from '../../locale';
+import ExternalLink from '../externalLink';
+import HookStore from '../../stores/hookStore';
+
+// SupportDrawer slides up when the user clicks on a "Need Help?" cue.
+const SupportDrawer = createReactClass({
+  displayName: 'SupportDrawer',
+
+  propTypes: {
+    onClose: PropTypes.func.isRequired,
+  },
+
+  getInitialState() {
+    return {
+      inputVal: '',
+      docResults: [],
+      helpcenterResults: [],
+    };
+  },
+
+  componentWillReceiveProps(props) {
+    this.setState({inputVal: ''});
+  },
+
+  handleSubmit(evt) {
+    evt.preventDefault();
+  },
+
+  search: _.debounce(function() {
+    if (this.state.inputVal.length <= 2) {
+      this.setState({
+        docResults: [],
+        helpcenterResults: [],
+      });
+      return;
+    }
+    $.ajax({
+      method: 'GET',
+      url: 'https://rigidsearch.getsentry.net/api/search',
+      data: {
+        q: this.state.inputVal,
+        page: 1,
+        section: 'hosted',
+      },
+      success: data => {
+        this.setState({docResults: data.items});
+      },
+    });
+    $.ajax({
+      method: 'GET',
+      url: 'https://sentry.zendesk.com/api/v2/help_center/articles/search.json',
+      data: {
+        query: this.state.inputVal,
+      },
+      success: data => {
+        this.setState({helpcenterResults: data.results});
+      },
+    });
+  }, 300),
+
+  handleChange(evt) {
+    this.setState({inputVal: evt.currentTarget.value}, this.search);
+  },
+
+  renderDocsResults() {
+    return this.state.docResults.map((result, i) => {
+      let {title} = result;
+      let link = `https://docs.sentry.io/${result.path}/`;
+
+      return (
+        <li
+          className="search-tag search-tag-docs search-autocomplete-item"
+          key={i + 'doc'}
+        >
+          <ExternalLink href={link}>
+            <span className="title">{title}</span>
+          </ExternalLink>
+        </li>
+      );
+    });
+  },
+
+  renderHelpCenterResults() {
+    return this.state.helpcenterResults.map((result, i) => {
+      return (
+        <li className="search-tag search-tag-qa search-autocomplete-item" key={i}>
+          <ExternalLink href={result.html_url}>
+            <span className="title">{result.title}</span>
+          </ExternalLink>
+        </li>
+      );
+    });
+  },
+
+  renderDropdownResults() {
+    let docsResults = this.renderDocsResults();
+    let helpcenterResults = this.renderHelpCenterResults();
+    let results = helpcenterResults.concat(docsResults);
+
+    return (
+      <div className="results">
+        <ul className="search-autocomplete-list">{results}</ul>
+      </div>
+    );
+  },
+
+  render() {
+    return (
+      <div className="search">
+        <form onSubmit={this.handleSubmit}>
+          <input
+            className="search-input form-control"
+            type="text"
+            placeholder={t('Search FAQs and docs...')}
+            onChange={this.handleChange}
+            value={this.state.inputVal}
+            autoFocus
+          />
+          <span className="icon-search" />
+          <a
+            className="icon-close pull-right search-close"
+            onClick={this.props.onClose}
+          />
+          {this.renderDropdownResults()}
+        </form>
+        {HookStore.get('assistant:support-button').map(cb => cb(this.state.inputVal))}
+      </div>
+    );
+  },
+});
+
+export default SupportDrawer;
diff --git a/src/sentry/static/sentry/app/components/events/eventDataSection.jsx b/src/sentry/static/sentry/app/components/events/eventDataSection.jsx
index c2a5839205..8fa5170e61 100644
--- a/src/sentry/static/sentry/app/components/events/eventDataSection.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventDataSection.jsx
@@ -2,6 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import SentryTypes from '../../proptypes';
 import {t} from '../../locale';
+import GuideAnchor from '../../components/assistant/guideAnchor';
 
 class GroupEventDataSection extends React.Component {
   static propTypes = {
@@ -52,6 +53,9 @@ class GroupEventDataSection extends React.Component {
             ) : (
               <div>{this.props.title}</div>
             )}
+            {this.props.type === 'extra' ? (
+              <GuideAnchor target="extra" type="text" />
+            ) : null}
             {this.props.type === 'extra' && (
               <div className="btn-group pull-right">
                 <a
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
index bd71467c59..3a8e2b3b36 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
@@ -2,6 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import GroupEventDataSection from '../eventDataSection';
 import SentryTypes from '../../../proptypes';
+import GuideAnchor from '../../../components/assistant/guideAnchor';
 import Breadcrumb from './breadcrumbs/breadcrumb';
 import {t} from '../../../locale';
 
@@ -174,8 +175,9 @@ class BreadcrumbsInterface extends React.Component {
 
     let title = (
       <div>
+        <GuideAnchor target="breadcrumbs" type="text" />
         <h3>
-          <strong>{'Breadcrumbs'}</strong>
+          <strong>{t('Breadcrumbs')}</strong>
         </h3>
         {this.getSearchField()}
       </div>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx b/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
index ea22537256..bb1ef4e7ec 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
@@ -4,6 +4,7 @@ import createReactClass from 'create-react-class';
 import SentryTypes from '../../../proptypes';
 import TooltipMixin from '../../../mixins/tooltip';
 import {t} from '../../../locale';
+import GuideAnchor from '../../../components/assistant/guideAnchor';
 
 const CrashHeader = createReactClass({
   displayName: 'CrashHeader',
@@ -20,6 +21,7 @@ const CrashHeader = createReactClass({
     newestFirst: PropTypes.bool.isRequired,
     stackType: PropTypes.string, // 'original', 'minified', or falsy (none)
     onChange: PropTypes.func,
+    hasGuideAnchor: PropTypes.bool,
   },
 
   mixins: [
@@ -97,8 +99,11 @@ const CrashHeader = createReactClass({
     return (
       <div className="crash-title">
         {this.props.beforeTitle}
+        {this.props.hasGuideAnchor ? (
+          <GuideAnchor target="exception" type="text" />
+        ) : null}
         <h3 className="pull-left">
-          {this.props.title !== undefined ? this.props.title : t('Exception')}
+          {this.props.title}
           <small style={{marginLeft: 5}}>
             (<a
               onClick={this.toggleOrder}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
index 43386dc444..1ec2fa0425 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import {t} from '../../../locale';
 import GroupEventDataSection from '../eventDataSection';
 import SentryTypes from '../../../proptypes';
 import {isStacktraceNewestFirst} from './stacktrace';
@@ -45,6 +46,8 @@ class ExceptionInterface extends React.Component {
     let title = (
       <CrashHeader
         group={group}
+        title={t('Exception')}
+        hasGuideAnchor={true}
         platform={event.platform}
         exception={data}
         stackView={stackView}
diff --git a/src/sentry/static/sentry/app/stores/guideStore.jsx b/src/sentry/static/sentry/app/stores/guideStore.jsx
new file mode 100644
index 0000000000..dfe935a322
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/guideStore.jsx
@@ -0,0 +1,73 @@
+import Reflux from 'reflux';
+import GuideActions from '../actions/guideActions';
+
+const GuideStore = Reflux.createStore({
+  init() {
+    this.state = {
+      // All guides returned to us from the server.
+      guides: {},
+      // We record guides seen on the server, but immediately after a user dismisses a guide
+      // it may not have been synced yet, so the local copy helps in filtering correctly.
+      guidesSeen: new Set(),
+      // All anchors that have been registered on this current view.
+      anchors: new Set(),
+      // The "on deck" guide.
+      currentGuide: null,
+      // The current step of the current guide (1-indexed). 0 if there's no guide
+      // or the guide is just cued but not opened.
+      currentStep: 0,
+    };
+    this.listenTo(GuideActions.fetchSucceeded, this.onFetchSucceeded);
+    this.listenTo(GuideActions.closeGuide, this.onCloseGuide);
+    this.listenTo(GuideActions.nextStep, this.onNextStep);
+    this.listenTo(GuideActions.registerAnchor, this.onRegisterAnchor);
+    this.listenTo(GuideActions.unregisterAnchor, this.onUnregisterAnchor);
+  },
+
+  onFetchSucceeded(data) {
+    this.state.guides = data;
+    this.updateCurrentGuide();
+  },
+
+  onCloseGuide() {
+    this.state.guidesSeen.add(this.state.currentGuide.id);
+    this.updateCurrentGuide();
+  },
+
+  onNextStep() {
+    this.state.currentStep += 1;
+    this.trigger(this.state);
+  },
+
+  onRegisterAnchor(anchor) {
+    this.state.anchors.add(anchor);
+    this.updateCurrentGuide();
+  },
+
+  onUnregisterAnchor(anchor) {
+    this.state.anchors.delete(anchor);
+    this.updateCurrentGuide();
+  },
+
+  updateCurrentGuide() {
+    let availableTargets = [...this.state.anchors].map(a => a.props.target);
+    let bestGuideKey = Object.keys(this.state.guides).find(key => {
+      // Only show a guide if it hasn't been seen in this session before and every
+      // anchor needed by the guide is on the page.
+      let guide = this.state.guides[key];
+      let seen = this.state.guidesSeen.has(guide.id);
+      let allTargetsPresent = guide.required_targets.every(
+        t => availableTargets.indexOf(t) >= 0
+      );
+      return !seen && allTargetsPresent;
+    });
+    let bestGuide = bestGuideKey ? this.state.guides[bestGuideKey] : null;
+    if (bestGuide !== this.state.currentGuide) {
+      this.state.currentGuide = bestGuide;
+      this.state.currentStep = 0;
+      this.trigger(this.state);
+    }
+  },
+});
+
+export default GuideStore;
diff --git a/src/sentry/static/sentry/app/stores/hookStore.jsx b/src/sentry/static/sentry/app/stores/hookStore.jsx
index 622885df60..5366bc76af 100644
--- a/src/sentry/static/sentry/app/stores/hookStore.jsx
+++ b/src/sentry/static/sentry/app/stores/hookStore.jsx
@@ -2,6 +2,7 @@ import Reflux from 'reflux';
 import _ from 'lodash';
 
 let validHookNames = new Set([
+  'assistant:support-button',
   'component:org-members-view',
   'footer',
   'settings:organization-navigation',
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index 6f6c8e7d28..7da6d91ce1 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -14,6 +14,7 @@ import ApiMixin from '../mixins/apiMixin';
 import ConfigStore from '../stores/configStore';
 import Indicators from '../components/indicators';
 import InstallWizard from './installWizard';
+import AssistantHelper from '../components/assistant/helper';
 import LoadingIndicator from '../components/loadingIndicator';
 import OrganizationsLoader from '../components/organizations/organizationsLoader';
 import OrganizationsStore from '../stores/organizationsStore';
@@ -151,6 +152,7 @@ const App = createReactClass({
           <Alerts className="messages-container" />
           <Indicators className="indicators-container" />
           {this.props.children}
+          {ConfigStore.get('features').has('assistant') && <AssistantHelper />}
         </OrganizationsLoader>
       </ThemeProvider>
     );
diff --git a/src/sentry/static/sentry/less/assistant.less b/src/sentry/static/sentry/less/assistant.less
new file mode 100644
index 0000000000..a8cd130357
--- /dev/null
+++ b/src/sentry/static/sentry/less/assistant.less
@@ -0,0 +1,161 @@
+@keyframes expand {
+  from {
+    width: 20px;
+    height: 20px;
+    opacity: 1;
+  }
+
+  to {
+    width: 100px;
+    height: 100px;
+    opacity: 0;
+  }
+}
+
+@keyframes hover {
+  0% {
+    transform: translateY(0px);
+  }
+
+  50% {
+    transform: translateY(-4px);
+  }
+
+  100% {
+    transform: translateY(0px);
+  }
+}
+
+@keyframes slideup {
+  0% {
+    opacity: 0;
+    transform: translateY(10px);
+  }
+
+  50% {
+    opacity: 1;
+    transform: translateY(-5px);
+  }
+
+  100% {
+    transform: translateY(0px);
+  }
+}
+
+.guide-anchor-ping {
+  width: 20px;
+  height: 20px;
+  cursor: pointer;
+  z-index: 999;
+  position: relative;
+  pointer-events: none;
+  animation: 1.5s ease-out infinite expand;
+  visibility: hidden;
+
+  &,
+  &:before,
+  &:after {
+    position: absolute;
+    display: block;
+    left: 50%;
+    top: 50%;
+    transform: translate(-50%, -50%);
+    background-color: fade(@green, 25%);
+    border-radius: 50%;
+  }
+
+  &:before,
+  &:after {
+    content: '';
+  }
+
+  &:before {
+    width: 75%;
+    height: 75%;
+    background-color: fade(@green, 50%);
+  }
+
+  &:after {
+    width: 50%;
+    height: 50%;
+    color: @green;
+  }
+}
+
+.guide-anchor-ping.active {
+  visibility: visible;
+}
+
+.guide-anchor.text {
+  display: inline-block;
+  position: relative;
+}
+
+.guide-anchor.button {
+  & > *:not(.guide-anchor-ping) {
+    position: relative;
+    z-index: 1000;
+  }
+}
+
+.assistant-container {
+  display: flex;
+  justify-content: space-around;
+  color: #fff;
+  position: fixed;
+  left: 0;
+  bottom: 0;
+  width: 100%;
+  z-index: 1030;
+  pointer-events: none;
+}
+
+.assistant-cue {
+  transition: 0.2s opacity;
+  background: @green;
+  padding: 0.1em 1em;
+  margin-bottom: 0.5em;
+  font-size: 0.9em;
+  border-radius: 5em;
+  cursor: pointer;
+  pointer-events: auto;
+}
+
+.assistant-drawer {
+  left: 0px;
+  background: @green;
+  flex: 1;
+  padding: 1em;
+
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  pointer-events: auto;
+
+  .search {
+    flex-basis: 50%;
+
+    .search-close {
+      color: #89779a;
+      position: absolute;
+      top: 12px;
+      right: 14px;
+      font-size: 14px;
+    }
+
+    .results {
+      height: 240px;
+      overflow: scroll;
+    }
+  }
+}
+
+.assistant-drawer-message {
+  margin-bottom: 1em;
+}
+
+.assistant-drawer-title {
+  font-size: 1.5em;
+  font-weight: bold;
+  margin-bottom: 0.5em;
+}
diff --git a/src/sentry/static/sentry/less/sentry.less b/src/sentry/static/sentry/less/sentry.less
index 516244e1cd..eea8eb9795 100644
--- a/src/sentry/static/sentry/less/sentry.less
+++ b/src/sentry/static/sentry/less/sentry.less
@@ -30,6 +30,7 @@
 @import url('./browser-icons.less');
 @import url('./dropdowns.less');
 @import url('./errors.less');
+@import url('./assistant.less');
 
 // Page specific
 
diff --git a/src/sentry/templatetags/sentry_react.py b/src/sentry/templatetags/sentry_react.py
index 8f72876509..befbf00884 100644
--- a/src/sentry/templatetags/sentry_react.py
+++ b/src/sentry/templatetags/sentry_react.py
@@ -100,6 +100,8 @@ def get_react_config(context):
         enabled_features.append('organizations:create')
     if auth.has_user_registration():
         enabled_features.append('auth:register')
+    if features.has('user:assistant', actor=user):
+        enabled_features.append('assistant')
 
     version_info = _get_version_info()
 
diff --git a/tests/js/spec/components/__snapshots__/toggleRawEventData.spec.jsx.snap b/tests/js/spec/components/__snapshots__/toggleRawEventData.spec.jsx.snap
index df647f6dc7..315203eca2 100644
--- a/tests/js/spec/components/__snapshots__/toggleRawEventData.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/toggleRawEventData.spec.jsx.snap
@@ -19,6 +19,10 @@ exports[`EventDataSection renders formatted 1`] = `
     <h3>
       Additional Data
     </h3>
+    <GuideAnchor
+      target="extra"
+      type="text"
+    />
     <div
       className="btn-group pull-right"
     >
@@ -61,6 +65,10 @@ exports[`EventDataSection renders raw 1`] = `
     <h3>
       Additional Data
     </h3>
+    <GuideAnchor
+      target="extra"
+      type="text"
+    />
     <div
       className="btn-group pull-right"
     >
diff --git a/tests/js/spec/components/assistant/__snapshots__/guideAnchor.spec.jsx.snap b/tests/js/spec/components/assistant/__snapshots__/guideAnchor.spec.jsx.snap
new file mode 100644
index 0000000000..7098bbd80e
--- /dev/null
+++ b/tests/js/spec/components/assistant/__snapshots__/guideAnchor.spec.jsx.snap
@@ -0,0 +1,21 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GuideAnchor renders 1`] = `
+<div
+  className="guide-anchor text"
+>
+  <span
+    className="target 1 guide-anchor-ping"
+  />
+</div>
+`;
+
+exports[`GuideAnchor turns active when guide state changes 1`] = `
+<div
+  className="guide-anchor text"
+>
+  <span
+    className="target 1 guide-anchor-ping active"
+  />
+</div>
+`;
diff --git a/tests/js/spec/components/assistant/__snapshots__/guideDrawer.spec.jsx.snap b/tests/js/spec/components/assistant/__snapshots__/guideDrawer.spec.jsx.snap
new file mode 100644
index 0000000000..3a8c6a224c
--- /dev/null
+++ b/tests/js/spec/components/assistant/__snapshots__/guideDrawer.spec.jsx.snap
@@ -0,0 +1,69 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GuideDrawer gets dismissed 1`] = `
+<div>
+  <div
+    className="assistant-drawer-title"
+  >
+    1. Title 1
+  </div>
+  <div
+    className="assistant-drawer-message"
+  >
+    Message 1
+  </div>
+  <div>
+    <div>
+      <Button
+        disabled={false}
+        onClick={[Function]}
+      >
+        Next
+         →
+      </Button>
+      <Button
+        disabled={false}
+        onClick={[Function]}
+      >
+        Dismiss
+      </Button>
+    </div>
+  </div>
+</div>
+`;
+
+exports[`GuideDrawer renders next step 1`] = `
+<div>
+  <div
+    className="assistant-drawer-title"
+  >
+    2. Title 2
+  </div>
+  <div
+    className="assistant-drawer-message"
+  >
+    Message 2
+  </div>
+  <div>
+    <div>
+      <p>
+        Did you find this guide useful?
+      </p>
+      <Button
+        disabled={false}
+        onClick={[Function]}
+      >
+        Yes
+           ✔
+      </Button>
+      <Button
+        disabled={false}
+        onClick={[Function]}
+      >
+        No
+           ✖
+      </Button>
+    </div>
+  </div>
+</div>
+`;
diff --git a/tests/js/spec/components/assistant/__snapshots__/helper.spec.jsx.snap b/tests/js/spec/components/assistant/__snapshots__/helper.spec.jsx.snap
new file mode 100644
index 0000000000..acb34bec72
--- /dev/null
+++ b/tests/js/spec/components/assistant/__snapshots__/helper.spec.jsx.snap
@@ -0,0 +1,65 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Helper renders cue 1`] = `
+<div
+  className="assistant-container"
+>
+  <a
+    className="assistant-cue"
+    onClick={[Function]}
+  >
+    Need Help?
+  </a>
+</div>
+`;
+
+exports[`Helper renders guide drawer 1`] = `
+<div
+  className="assistant-container"
+>
+  <div
+    className="assistant-drawer"
+  >
+    <GuideDrawer
+      guide={
+        Object {
+          "cue": "Click here for a tour of the issue page",
+          "id": 1,
+          "page": "issue",
+          "required_targets": Array [
+            "target 1",
+          ],
+          "steps": Array [
+            Object {
+              "message": "Message 1",
+              "target": "target 1",
+              "title": "1. Title 1",
+            },
+            Object {
+              "message": "Message 2",
+              "target": "target 2",
+              "title": "2. Title 2",
+            },
+          ],
+        }
+      }
+      onClose={[Function]}
+      step={1}
+    />
+  </div>
+</div>
+`;
+
+exports[`Helper renders support drawer 1`] = `
+<div
+  className="assistant-container"
+>
+  <div
+    className="assistant-drawer"
+  >
+    <SupportDrawer
+      onClose={[Function]}
+    />
+  </div>
+</div>
+`;
diff --git a/tests/js/spec/components/assistant/guideAnchor.spec.jsx b/tests/js/spec/components/assistant/guideAnchor.spec.jsx
new file mode 100644
index 0000000000..fcbf8c3361
--- /dev/null
+++ b/tests/js/spec/components/assistant/guideAnchor.spec.jsx
@@ -0,0 +1,36 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import GuideAnchor from 'app/components/assistant/guideAnchor';
+
+describe('GuideAnchor', function() {
+  let sandbox;
+  let data = {
+    currentGuide: {steps: [{message: 'abc', target: 'target 1', title: 'title 1'}]},
+    currentStep: 1,
+    anchors: null,
+    guides: [],
+    guidesSeen: new Set(),
+  };
+
+  beforeEach(function() {
+    sandbox = sinon.sandbox.create();
+  });
+
+  afterEach(function() {
+    sandbox.restore();
+  });
+
+  it('renders', function() {
+    let component = shallow(<GuideAnchor target="target 1" type="text" />);
+    expect(component).toMatchSnapshot();
+  });
+
+  it('turns active when guide state changes', function() {
+    const wrapper = shallow(<GuideAnchor target="target 1" type="text" />);
+    const component = wrapper.instance();
+    component.onGuideStateChange(data);
+    wrapper.update();
+    expect(component.state).toEqual({active: true});
+    expect(wrapper).toMatchSnapshot();
+  });
+});
diff --git a/tests/js/spec/components/assistant/guideDrawer.spec.jsx b/tests/js/spec/components/assistant/guideDrawer.spec.jsx
new file mode 100644
index 0000000000..2997234411
--- /dev/null
+++ b/tests/js/spec/components/assistant/guideDrawer.spec.jsx
@@ -0,0 +1,59 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import {Client} from 'app/api';
+import GuideDrawer from 'app/components/assistant/guideDrawer';
+
+describe('GuideDrawer', function() {
+  let data = {
+    cue: 'Click here for a tour of the issue page',
+    id: 1,
+    page: 'issue',
+    required_targets: ['target 1'],
+    steps: [
+      {message: 'Message 1', target: 'target 1', title: '1. Title 1'},
+      {message: 'Message 2', target: 'target 2', title: '2. Title 2'},
+    ],
+  };
+
+  it('gets dismissed', function() {
+    let mock = jest.fn();
+    let wrapper = shallow(<GuideDrawer guide={data} step={1} onClose={mock} />);
+    expect(wrapper).toMatchSnapshot();
+    wrapper
+      .find('Button')
+      .last()
+      .simulate('click');
+    expect(mock).toHaveBeenCalled();
+  });
+
+  it('renders next step', function() {
+    let wrapper = shallow(<GuideDrawer guide={data} step={2} onClose={jest.fn()} />);
+    expect(wrapper).toMatchSnapshot();
+
+    // Mark as useful.
+    let usefulMock = Client.addMockResponse({
+      url: '/assistant/',
+      method: 'PUT',
+      data: {
+        guide_id: 1,
+        status: 'viewed',
+        useful: true,
+      },
+    });
+    wrapper
+      .find('Button')
+      .first()
+      .simulate('click');
+    expect(usefulMock).toHaveBeenCalledWith(
+      '/assistant/',
+      expect.objectContaining({
+        method: 'PUT',
+        data: {
+          guide_id: 1,
+          status: 'viewed',
+          useful: true,
+        },
+      })
+    );
+  });
+});
diff --git a/tests/js/spec/components/assistant/helper.spec.jsx b/tests/js/spec/components/assistant/helper.spec.jsx
new file mode 100644
index 0000000000..52c5b28b9d
--- /dev/null
+++ b/tests/js/spec/components/assistant/helper.spec.jsx
@@ -0,0 +1,42 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import AssistantHelper from 'app/components/assistant/helper';
+
+describe('Helper', function() {
+  it('renders cue', function() {
+    let wrapper = shallow(<AssistantHelper />);
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('renders support drawer', function() {
+    let wrapper = shallow(<AssistantHelper />);
+    wrapper
+      .find('.assistant-cue')
+      .first()
+      .simulate('click');
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('renders guide drawer', function() {
+    const wrapper = shallow(<AssistantHelper />);
+    const component = wrapper.instance();
+    component.onGuideStateChange({
+      currentGuide: {
+        cue: 'Click here for a tour of the issue page',
+        id: 1,
+        page: 'issue',
+        required_targets: ['target 1'],
+        steps: [
+          {message: 'Message 1', target: 'target 1', title: '1. Title 1'},
+          {message: 'Message 2', target: 'target 2', title: '2. Title 2'},
+        ],
+      },
+      currentStep: 1,
+    });
+    wrapper
+      .find('.assistant-cue')
+      .first()
+      .simulate('click');
+    expect(wrapper).toMatchSnapshot();
+  });
+});
diff --git a/tests/js/spec/stores/guideStore.spec.jsx b/tests/js/spec/stores/guideStore.spec.jsx
new file mode 100644
index 0000000000..130fbfe733
--- /dev/null
+++ b/tests/js/spec/stores/guideStore.spec.jsx
@@ -0,0 +1,55 @@
+import React from 'react';
+import GuideStore from 'app/stores/guideStore';
+import GuideAnchor from 'app/components/assistant/guideAnchor';
+
+describe('GuideStore', function() {
+  let sandbox;
+  let data = {
+    issue: {
+      cue: 'Click here for a tour of the issue page',
+      id: 1,
+      page: 'issue',
+      required_targets: ['target 1'],
+      steps: [
+        {message: 'Message 1', target: 'target 1', title: '1. Title 1'},
+        {message: 'Message 2', target: 'target 2', title: '2. Title 2'},
+      ],
+    },
+  };
+
+  let anchor1 = <GuideAnchor target="target 1" type="text" />;
+  let anchor2 = <GuideAnchor target="target 2" type="text" />;
+
+  beforeEach(function() {
+    GuideStore.init();
+    sandbox = sinon.sandbox.create();
+  });
+
+  afterEach(function() {
+    sandbox.restore();
+  });
+
+  it('should add guides to store', function() {
+    GuideStore.onFetchSucceeded(data);
+    expect(GuideStore.state.guides).toEqual(data);
+    expect(GuideStore.state.currentStep).toEqual(0);
+  });
+
+  it('should register anchors', function() {
+    GuideStore.onRegisterAnchor(anchor1);
+    GuideStore.onRegisterAnchor(anchor2);
+    expect(GuideStore.state.anchors).toEqual(new Set([anchor1, anchor2]));
+  });
+
+  it('should move through the steps in the guide', function() {
+    GuideStore.onRegisterAnchor(anchor1);
+    GuideStore.onRegisterAnchor(anchor2);
+    GuideStore.onFetchSucceeded(data);
+    GuideStore.onNextStep();
+    expect(GuideStore.state.currentStep).toEqual(1);
+    GuideStore.onNextStep();
+    expect(GuideStore.state.currentStep).toEqual(2);
+    GuideStore.onCloseGuide();
+    expect(GuideStore.state.guidesSeen).toEqual(new Set([1]));
+  });
+});
diff --git a/tests/js/spec/sudoModal.spec.jsx b/tests/js/spec/sudoModal.spec.jsx
index afa2219c4d..8e304b0360 100644
--- a/tests/js/spec/sudoModal.spec.jsx
+++ b/tests/js/spec/sudoModal.spec.jsx
@@ -19,6 +19,10 @@ describe('Sudo Modal', function() {
         problems: [],
       },
     });
+    Client.addMockResponse({
+      url: '/assistant/',
+      body: [],
+    });
     Client.addMockResponse({
       url: '/organizations/',
       body: [TestStubs.Organization()],
