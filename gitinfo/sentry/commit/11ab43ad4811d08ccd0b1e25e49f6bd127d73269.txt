commit 11ab43ad4811d08ccd0b1e25e49f6bd127d73269
Author: Tony <Zylphrex@users.noreply.github.com>
Date:   Tue Jul 7 15:40:23 2020 -0400

    chore(discover): Remove get_pagination_ids (#19750)
    
    This end point is no longer used, it's time to remove it.

diff --git a/src/sentry/snuba/discover.py b/src/sentry/snuba/discover.py
index f458e2728b..9477c845be 100644
--- a/src/sentry/snuba/discover.py
+++ b/src/sentry/snuba/discover.py
@@ -43,7 +43,6 @@ __all__ = (
     "key_transaction_query",
     "timeseries_query",
     "top_events_timeseries",
-    "get_pagination_ids",
     "get_facets",
     "transform_results",
     "zerofill",
@@ -943,65 +942,6 @@ def get_id(result):
         return result[1]
 
 
-def get_pagination_ids(event, query, params, organization, reference_event=None, referrer=None):
-    """
-    High-level API for getting pagination data for an event + filter
-
-    The provided event is used as a reference event to find events
-    that are older and newer than the current one.
-
-    event (Event) The event to find related events for.
-    query (str) Filter query string to create conditions from.
-    params (Dict[str, str]) Filtering parameters with start, end, project_id, environment,
-    reference_event (ReferenceEvent) A reference event object. Used to generate additional
-                                    conditions based on the provided reference.
-    referrer (str|None) A referrer string to help locate the origin of this query.
-    """
-    # TODO(evanh): This can be removed once we migrate the frontend / saved queries
-    # to use the new function values
-    query = transform_deprecated_functions_in_query(query)
-
-    snuba_filter = get_filter(query, params)
-
-    if reference_event:
-        ref_conditions = create_reference_event_conditions(reference_event)
-        if ref_conditions:
-            snuba_filter.conditions.extend(ref_conditions)
-
-    result = {
-        "next": eventstore.get_next_event_id(event, filter=snuba_filter),
-        "previous": eventstore.get_prev_event_id(event, filter=snuba_filter),
-        "latest": eventstore.get_latest_event_id(event, filter=snuba_filter),
-        "oldest": eventstore.get_earliest_event_id(event, filter=snuba_filter),
-    }
-
-    # translate project ids to slugs
-
-    project_ids = set([tuple[0] for tuple in result.values() if tuple])
-
-    project_slugs = {}
-    projects = Project.objects.filter(
-        id__in=list(project_ids), organization=organization, status=ProjectStatus.VISIBLE
-    ).values("id", "slug")
-
-    for project in projects:
-        project_slugs[project["id"]] = project["slug"]
-
-    def into_pagination_record(project_slug_event_id):
-
-        if not project_slug_event_id:
-            return None
-
-        project_id = int(project_slug_event_id[0])
-
-        return "{}:{}".format(project_slugs[project_id], project_slug_event_id[1])
-
-    for key, value in result.items():
-        result[key] = into_pagination_record(value)
-
-    return PaginationResult(**result)
-
-
 def get_facets(query, params, limit=10, referrer=None):
     """
     High-level API for getting 'facet map' results.
diff --git a/tests/sentry/snuba/test_discover.py b/tests/sentry/snuba/test_discover.py
index 823bdd4d94..02d6edca76 100644
--- a/tests/sentry/snuba/test_discover.py
+++ b/tests/sentry/snuba/test_discover.py
@@ -6,7 +6,6 @@ import pytest
 from sentry.utils.compat.mock import patch
 from datetime import datetime, timedelta
 
-from sentry import eventstore
 from sentry.api.event_search import InvalidSearchQuery
 from sentry.snuba import discover
 from sentry.testutils import TestCase, SnubaTestCase
@@ -1931,164 +1930,6 @@ def format_project_event(project_slug, event_id):
     return "{}:{}".format(project_slug, event_id)
 
 
-class GetPaginationIdsTest(SnubaTestCase, TestCase):
-    def setUp(self):
-        super(GetPaginationIdsTest, self).setUp()
-
-        self.project = self.create_project()
-        self.project_2 = self.create_project()
-        self.min_ago = before_now(minutes=1)
-        self.day_ago = before_now(days=1)
-
-        self.store_event(
-            data={
-                "event_id": "a" * 32,
-                "message": "very bad",
-                "type": "default",
-                "platform": "python",
-                "timestamp": iso_format(before_now(minutes=4)),
-                "tags": {"foo": "1"},
-            },
-            project_id=self.project.id,
-        )
-        self.store_event(
-            data={
-                "event_id": "b" * 32,
-                "message": "very bad",
-                "type": "default",
-                "platform": "python",
-                "timestamp": iso_format(before_now(minutes=3)),
-                "tags": {"foo": "1"},
-            },
-            project_id=self.project.id,
-        )
-        self.store_event(
-            data={
-                "event_id": "c" * 32,
-                "message": "very bad",
-                "type": "default",
-                "platform": "python",
-                "timestamp": iso_format(before_now(minutes=2)),
-                "tags": {"foo": "1"},
-            },
-            project_id=self.project.id,
-        )
-        self.store_event(
-            data={
-                "event_id": "e" * 32,
-                "message": "very bad",
-                "type": "default",
-                "platform": "python",
-                "timestamp": iso_format(before_now(minutes=2, seconds=30)),
-                "tags": {"foo": "1"},
-            },
-            project_id=self.project_2.id,
-        )
-        self.event = eventstore.get_event_by_id(self.project.id, "b" * 32)
-
-    def test_no_related_events(self):
-        result = discover.get_pagination_ids(
-            self.event,
-            "foo:bar",
-            {"project_id": [self.project.id], "start": self.min_ago, "end": self.day_ago},
-            self.organization,
-        )
-        assert result.previous is None
-        assert result.next is None
-        assert result.oldest is None
-        assert result.latest is None
-
-    def test_invalid_conditions(self):
-        with pytest.raises(InvalidSearchQuery):
-            discover.get_pagination_ids(
-                self.event,
-                "foo:(11",
-                {"project_id": [self.project.id], "end": self.min_ago, "start": self.day_ago},
-                self.organization,
-            )
-
-    def test_matching_conditions(self):
-        result = discover.get_pagination_ids(
-            self.event,
-            "foo:1",
-            {"project_id": [self.project.id], "end": self.min_ago, "start": self.day_ago},
-            self.organization,
-        )
-        assert result.previous == format_project_event(self.project.slug, "a" * 32)
-        assert result.next == format_project_event(self.project.slug, "c" * 32)
-        assert result.oldest == format_project_event(self.project.slug, "a" * 32)
-        assert result.latest == format_project_event(self.project.slug, "c" * 32)
-
-    def test_reference_event_matching(self):
-        # Create an event that won't match the reference
-        self.store_event(
-            data={
-                "event_id": "d" * 32,
-                "message": "completely bad",
-                "type": "default",
-                "platform": "python",
-                "timestamp": iso_format(before_now(minutes=2)),
-                "tags": {"foo": "1"},
-            },
-            project_id=self.project.id,
-        )
-        reference = discover.ReferenceEvent(
-            self.organization, "{}:{}".format(self.project.slug, self.event.event_id), ["message"]
-        )
-        result = discover.get_pagination_ids(
-            self.event,
-            "foo:1",
-            {"project_id": [self.project.id], "end": self.min_ago, "start": self.day_ago},
-            self.organization,
-            reference_event=reference,
-        )
-        assert result.previous == format_project_event(self.project.slug, "a" * 32)
-        assert result.next == format_project_event(self.project.slug, "c" * 32)
-        assert result.oldest == format_project_event(self.project.slug, "a" * 32)
-        assert result.latest == format_project_event(self.project.slug, "c" * 32)
-
-    def test_date_params_included(self):
-        # Create an event that is outside the date range
-        self.store_event(
-            data={
-                "event_id": "d" * 32,
-                "message": "very bad",
-                "type": "default",
-                "platform": "python",
-                "timestamp": iso_format(before_now(days=2)),
-                "tags": {"foo": "1"},
-            },
-            project_id=self.project.id,
-        )
-        result = discover.get_pagination_ids(
-            self.event,
-            "foo:1",
-            {"project_id": [self.project.id], "end": self.min_ago, "start": self.day_ago},
-            self.organization,
-        )
-        assert result.previous == format_project_event(self.project.slug, "a" * 32)
-        assert result.next == format_project_event(self.project.slug, "c" * 32)
-        assert result.oldest == format_project_event(self.project.slug, "a" * 32)
-        assert result.latest == format_project_event(self.project.slug, "c" * 32)
-
-    def test_multi_projects(self):
-        result = discover.get_pagination_ids(
-            self.event,
-            "foo:1",
-            {
-                "project_id": [self.project.id, self.project_2.id],
-                "end": self.min_ago,
-                "start": self.day_ago,
-            },
-            self.organization,
-        )
-
-        assert result.previous == format_project_event(self.project.slug, "a" * 32)
-        assert result.next == format_project_event(self.project_2.slug, "e" * 32)
-        assert result.oldest == format_project_event(self.project.slug, "a" * 32)
-        assert result.latest == format_project_event(self.project.slug, "c" * 32)
-
-
 class GetFacetsTest(SnubaTestCase, TestCase):
     def setUp(self):
         super(GetFacetsTest, self).setUp()
