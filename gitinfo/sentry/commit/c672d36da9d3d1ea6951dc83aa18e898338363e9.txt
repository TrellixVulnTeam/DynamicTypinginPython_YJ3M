commit c672d36da9d3d1ea6951dc83aa18e898338363e9
Author: Ben Vinegar <benvinegar@users.noreply.github.com>
Date:   Wed Jan 18 11:21:43 2017 -0800

    Remove CommonJS module support, enable tree shaking (#4754)

diff --git a/.babelrc b/.babelrc
index 74d6ac6bba..b4c6e91ad5 100644
--- a/.babelrc
+++ b/.babelrc
@@ -1,8 +1,14 @@
 {
-  "presets": ["latest", "react"],
+  "presets": [
+    "react",
+    ["latest", {
+      "es2015": {
+        "modules": false
+      }
+    }]
+  ],
   "plugins": [
     "transform-object-rest-spread",
-    "add-module-exports",
     ["babel-plugin-transform-builtin-extend", {
       "globals": ["Array"]
     }]
diff --git a/src/sentry/static/sentry/app/components/activity/noteInput.jsx b/src/sentry/static/sentry/app/components/activity/noteInput.jsx
index cacb6a3cbb..246768ea60 100644
--- a/src/sentry/static/sentry/app/components/activity/noteInput.jsx
+++ b/src/sentry/static/sentry/app/components/activity/noteInput.jsx
@@ -5,7 +5,7 @@ import ApiMixin from '../../mixins/apiMixin';
 import GroupStore from '../../stores/groupStore';
 import IndicatorStore from '../../stores/indicatorStore';
 import {logException} from '../../utils/logging';
-import {getItem, setItem} from '../../utils/localStorage';
+import localStorage from '../../utils/localStorage';
 import {t} from '../../locale';
 
 import PureRenderMixin from 'react-addons-pure-render-mixin';
@@ -35,7 +35,7 @@ const NoteInput = React.createClass({
     if (updating) {
       defaultText = item.data.text;
     } else {
-      let storage = getItem(localStorageKey);
+      let storage = localStorage.getItem(localStorageKey);
       if (storage) {
         let {groupId, value} = JSON.parse(storage);
         if (groupId === group.id) {
@@ -64,7 +64,7 @@ const NoteInput = React.createClass({
     if (this.state.value === nextState.value) return;
 
     try {
-      setItem(localStorageKey, JSON.stringify({
+      localStorage.setItem(localStorageKey, JSON.stringify({
         groupId: this.props.group.id,
         value: nextState.value
       }));
diff --git a/src/sentry/static/sentry/app/components/events/contexts.jsx b/src/sentry/static/sentry/app/components/events/contexts.jsx
index c1bb822070..76f500ebc3 100644
--- a/src/sentry/static/sentry/app/components/events/contexts.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts.jsx
@@ -4,11 +4,11 @@ import GroupEventDataSection from './eventDataSection';
 import {objectIsEmpty, toTitleCase, defined} from '../../utils';
 
 const CONTEXT_TYPES = {
-  'default': require('./contexts/default'),
-  'device': require('./contexts/device'),
-  'os': require('./contexts/os'),
-  'runtime': require('./contexts/runtime'),
-  'user': require('./contexts/user'),
+  'default': require('./contexts/default').default,
+  'device': require('./contexts/device').default,
+  'os': require('./contexts/os').default,
+  'runtime': require('./contexts/runtime').default,
+  'user': require('./contexts/user').default,
 };
 
 const ContextChunk = React.createClass({
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index f3bdced236..f16ee5698b 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -37,65 +37,79 @@ jQuery.ajaxSetup({
 // these get exported to a global variable, which is important as its the only
 // way we can call into scoped objects
 
+import moment from 'moment';
+import Raven from 'raven-js';
+import React from 'react';
+import ReactDOM from 'react-dom';
+import Reflux from 'reflux';
+import * as Router from 'react-router';
+import underscore from 'underscore';
+import ReactBootstrapModal from 'react-bootstrap/lib/Modal';
+
+import * as api from './api';
+import * as il8n from './locale';
+
 export default {
   jQuery: jQuery,
-  moment: require('moment'),
-  Raven: require('raven-js'),
-  React: require('react'),
-  ReactDOM: require('react-dom'),
-  ReactBootstrap: require('react-bootstrap'),
-  Reflux: require('reflux'),
-  Router: require('react-router'),
-  underscore: require('underscore'),
+  moment: moment,
+  Raven: Raven,
+  React: React,
+  ReactDOM: ReactDOM,
+  ReactBootstrap: {
+    Modal: ReactBootstrapModal
+  },
+  Reflux: Reflux,
+  Router: Router,
+  underscore: underscore,
 
   Sentry: {
-    api: require('./api'),
-    routes: require('./routes'),
+    api: api,
+    routes: require('./routes').default,
     plugins: {
       add: plugins.add,
       BasePlugin: plugins.BasePlugin,
       DefaultIssuePlugin: plugins.DefaultIssuePlugin
     },
 
-    Alerts: require('./components/alerts'),
-    AlertActions: require('./actions/alertActions'),
-    AvatarSettings: require('./components/avatarSettings'),
+    Alerts: require('./components/alerts').default,
+    AlertActions: require('./actions/alertActions').default,
+    AvatarSettings: require('./components/avatarSettings').default,
     mixins: {
-      ApiMixin: require('./mixins/apiMixin'),
-      TooltipMixin: require('./mixins/tooltip')
+      ApiMixin: require('./mixins/apiMixin').default,
+      TooltipMixin: require('./mixins/tooltip').default
     },
-    BarChart: require('./components/barChart'),
-    i18n: require('./locale'),
-    ConfigStore: require('./stores/configStore'),
-    Count: require('./components/count'),
-    DateTime: require('./components/dateTime'),
-    DropdownLink: require('./components/dropdownLink'),
-    FlotChart: require('./components/flotChart'),
-    Form: require('./components/forms/form'),
+    BarChart: require('./components/barChart').default,
+    i18n: il8n,
+    ConfigStore: require('./stores/configStore').default,
+    Count: require('./components/count').default,
+    DateTime: require('./components/dateTime').default,
+    DropdownLink: require('./components/dropdownLink').default,
+    FlotChart: require('./components/flotChart').default,
+    Form: require('./components/forms/form').default,
     FormState: require('./components/forms/index').FormState,
-    HookStore: require('./stores/hookStore'),
-    Indicators: require('./components/indicators'),
-    IndicatorStore: require('./stores/indicatorStore'),
-    LoadingError: require('./components/loadingError'),
-    LoadingIndicator: require('./components/loadingIndicator'),
-    ListLink: require('./components/listLink'),
-    MenuItem: require('./components/menuItem'),
-    OrganizationHomeContainer: require('./components/organizations/homeContainer'),
-    OrganizationsLoader: require('./components/organizations/organizationsLoader'),
-    Pagination: require('./components/pagination'),
-    PluginConfig: require('./components/pluginConfig'),
-    ProjectIssueTracking: require('./views/projectIssueTracking'),
-    ProjectSelector: require('./components/projectHeader/projectSelector'),
-    RuleEditor: require('./views/ruleEditor'),
-    Sidebar: require('./components/sidebar'),
-    StackedBarChart: require('./components/stackedBarChart'),
-    TimeSince: require('./components/timeSince'),
-    TodoList: require('./components/todos'),
-    U2fEnrollment: require('./components/u2fenrollment'),
-    U2fSign: require('./components/u2fsign'),
+    HookStore: require('./stores/hookStore').default,
+    Indicators: require('./components/indicators').default,
+    IndicatorStore: require('./stores/indicatorStore').default,
+    LoadingError: require('./components/loadingError').default,
+    LoadingIndicator: require('./components/loadingIndicator').default,
+    ListLink: require('./components/listLink').default,
+    MenuItem: require('./components/menuItem').default,
+    OrganizationHomeContainer: require('./components/organizations/homeContainer').default,
+    OrganizationsLoader: require('./components/organizations/organizationsLoader').default,
+    Pagination: require('./components/pagination').default,
+    PluginConfig: require('./components/pluginConfig').default,
+    ProjectIssueTracking: require('./views/projectIssueTracking').default,
+    ProjectSelector: require('./components/projectHeader/projectSelector').default,
+    RuleEditor: require('./views/ruleEditor').default,
+    Sidebar: require('./components/sidebar').default,
+    StackedBarChart: require('./components/stackedBarChart').default,
+    TimeSince: require('./components/timeSince').default,
+    TodoList: require('./components/todos').default,
+    U2fEnrollment: require('./components/u2fenrollment').default,
+    U2fSign: require('./components/u2fsign').default,
     utils: {
-      errorHandler: require('./utils/errorHandler'),
-      logging: require('./utils/logging'),
+      errorHandler: require('./utils/errorHandler').default,
+      logging: require('./utils/logging').default,
     }
   }
 };
diff --git a/src/sentry/static/sentry/app/stores/alertStore.jsx b/src/sentry/static/sentry/app/stores/alertStore.jsx
index 3f8b7c2a58..6dc7fa40fd 100644
--- a/src/sentry/static/sentry/app/stores/alertStore.jsx
+++ b/src/sentry/static/sentry/app/stores/alertStore.jsx
@@ -1,6 +1,6 @@
 import Reflux from 'reflux';
 import AlertActions from '../actions/alertActions';
-import {getItem, setItem} from '../utils/localStorage';
+import localStorage from '../utils/localStorage';
 import {defined} from '../utils';
 
 const AlertStore = Reflux.createStore({
@@ -13,7 +13,7 @@ const AlertStore = Reflux.createStore({
 
   onAddAlert(alert) {
     if (defined(alert.id)) {
-      let expirations = getItem('alerts:muted');
+      let expirations = localStorage.getItem('alerts:muted');
       if (defined(expirations)) {
         expirations = JSON.parse(expirations);
 
@@ -24,7 +24,7 @@ const AlertStore = Reflux.createStore({
             delete expirations[key];
           }
         }
-        setItem('alerts:muted', JSON.stringify(expirations));
+        localStorage.setItem('alerts:muted', JSON.stringify(expirations));
 
         if (expirations.hasOwnProperty(alert.id)) {
           return;
@@ -54,14 +54,14 @@ const AlertStore = Reflux.createStore({
   onCloseAlert(alert, duration = 60 * 60 * 7 * 24) {
     if (defined(alert.id) && defined(duration)) {
       let expiry = Math.floor(new Date() / 1000) + duration;
-      let expirations = getItem('alerts:muted');
+      let expirations = localStorage.getItem('alerts:muted');
       if (defined(expirations)) {
         expirations = JSON.parse(expirations);
       } else {
         expirations = {};
       }
       expirations[alert.id] = expiry;
-      setItem('alerts:muted', JSON.stringify(expirations));
+      localStorage.setItem('alerts:muted', JSON.stringify(expirations));
     }
 
     // TODO(dcramer): we need some animations here for closing alerts
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index c1c9e74d1b..230db7505b 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -1,7 +1,7 @@
 import _ from 'underscore';
 
 /*eslint no-use-before-define:0*/
-const modelsEqual = function(obj1, obj2) {
+export const modelsEqual = function(obj1, obj2) {
   if (!obj1 && !obj2)
     return true;
   if (obj1.id && !obj2)
@@ -11,7 +11,7 @@ const modelsEqual = function(obj1, obj2) {
   return obj1.id === obj2.id;
 };
 
-const arrayIsEqual = function(arr, other, deep) {
+export const arrayIsEqual = function(arr, other, deep) {
   // if the other array is a falsy value, return
   if (!arr && !other) {
     return true;
@@ -31,7 +31,7 @@ const arrayIsEqual = function(arr, other, deep) {
   }
 };
 
-const valueIsEqual = function(value, other, deep) {
+export const valueIsEqual = function(value, other, deep) {
   if (value === other) {
     return true;
   } else if (_.isArray(value) || _.isArray(other)) {
@@ -46,7 +46,7 @@ const valueIsEqual = function(value, other, deep) {
   return false;
 };
 
-const objectMatchesSubset = function(obj, other, deep){
+export const objectMatchesSubset = function(obj, other, deep){
   let k;
 
   if (obj === other) {
@@ -76,7 +76,7 @@ const objectMatchesSubset = function(obj, other, deep){
 
 // XXX(dcramer): the previous mechanism of using _.map here failed
 // miserably if a param was named 'length'
-const objectToArray = function(obj) {
+export const objectToArray = function(obj) {
   let result = [];
   for (let key in obj) {
     result.push([key, obj[key]]);
@@ -84,7 +84,7 @@ const objectToArray = function(obj) {
   return result;
 };
 
-const compareArrays = function(arr1, arr2, compFunc) {
+export const compareArrays = function(arr1, arr2, compFunc) {
   if (arr1 === arr2) {
     return true;
   }
@@ -113,125 +113,157 @@ const compareArrays = function(arr1, arr2, compFunc) {
   return true;
 };
 
-const intcomma = function(x) {
+export const intcomma = function(x) {
     return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
 };
 
-export default {
-  getQueryParams() {
-    let hashes, hash;
-    let vars = {}, href = window.location.href;
-
-    if (href.indexOf('?') == -1)
-      return vars;
-
-    hashes = href.slice(
-      href.indexOf('?') + 1,
-      (href.indexOf('#') != -1 ? href.indexOf('#') : href.length)
-    ).split('&');
-
-    hashes.forEach((chunk) => {
-      hash = chunk.split('=');
-      if (!hash[0] && !hash[1]) {
-        return;
-      }
-
-      vars[decodeURIComponent(hash[0])] = (hash[1] ? decodeURIComponent(hash[1]).replace(/\+/, ' ') : '');
-    });
+export function getQueryParams() {
+  let hashes, hash;
+  let vars = {}, href = window.location.href;
 
+  if (href.indexOf('?') == -1)
     return vars;
-  },
-
-  sortArray(arr, score_fn) {
-    arr.sort((a, b) => {
-      let a_score = score_fn(a), b_score = score_fn(b);
-
-      for (let i = 0; i < a_score.length; i++) {
-        if (a_score[i] > b_score[i]) {
-          return 1;
-        }
-        if (a_score[i] < b_score[i]) {
-          return -1;
-        }
-      }
-      return 0;
-    });
 
-    return arr;
-  },
+  hashes = href.slice(
+    href.indexOf('?') + 1,
+    (href.indexOf('#') != -1 ? href.indexOf('#') : href.length)
+  ).split('&');
 
-  objectIsEmpty(obj) {
-    for (let prop in obj) {
-      if (obj.hasOwnProperty(prop)) {
-        return false;
+  hashes.forEach((chunk) => {
+    hash = chunk.split('=');
+    if (!hash[0] && !hash[1]) {
+      return;
+    }
+
+    vars[decodeURIComponent(hash[0])] = (hash[1] ? decodeURIComponent(hash[1]).replace(/\+/, ' ') : '');
+  });
+
+  return vars;
+}
+
+export function sortArray(arr, score_fn) {
+  arr.sort((a, b) => {
+    let a_score = score_fn(a), b_score = score_fn(b);
+
+    for (let i = 0; i < a_score.length; i++) {
+      if (a_score[i] > b_score[i]) {
+        return 1;
+      }
+      if (a_score[i] < b_score[i]) {
+        return -1;
       }
     }
+    return 0;
+  });
 
-    return true;
-  },
-
-  trim(str) {
-    return str.replace(/^\s+|\s+$/g,'');
-  },
-
-  defined(item) {
-    return !_.isUndefined(item) && item !== null;
-  },
-
-  nl2br(str) {
-    return str.replace(/(?:\r\n|\r|\n)/g, '<br />');
-  },
-
-  isUrl(str) {
-    return !!str && _.isString(str) && (str.indexOf('http://') === 0 || str.indexOf('https://') === 0);
-  },
-
-  escape(str) {
-    return str.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
-  },
-
-  percent(value, totalValue, precise) {
-    return value / totalValue * 100;
-  },
-
-  urlize(str) {
-    // TODO
-    return str;
-  },
-
-  toTitleCase(str) {
-    return str.replace(/\w\S*/g, (txt) => {
-      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
-    });
-  },
-
-  formatBytes(bytes) {
-    let units = ['KB','MB','GB','TB','PB','EB','ZB','YB'];
-    let thresh = 1024;
-    if (bytes < thresh) {
-      return bytes + ' B';
+  return arr;
+}
+
+export function objectIsEmpty(obj) {
+  for (let prop in obj) {
+    if (obj.hasOwnProperty(prop)) {
+      return false;
     }
+  }
 
-    let u = -1;
-    do {
-      bytes /= thresh;
-      ++u;
-    } while (bytes >= thresh);
-    return bytes.toFixed(1) + ' ' + units[u];
-  },
+  return true;
+}
+
+export function trim(str) {
+  return str.replace(/^\s+|\s+$/g,'');
+}
+
+export function defined(item) {
+  return !_.isUndefined(item) && item !== null;
+}
+
+export function nl2br(str) {
+  return str.replace(/(?:\r\n|\r|\n)/g, '<br />');
+}
+
+export function isUrl(str) {
+  return !!str && _.isString(str) && (str.indexOf('http://') === 0 || str.indexOf('https://') === 0);
+}
+
+export function escape(str) {
+  return str.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
+}
+
+export function percent(value, totalValue, precise) {
+  return value / totalValue * 100;
+}
+
+export function urlize(str) {
+  // TODO
+  return str;
+}
+
+export function toTitleCase(str) {
+  return str.replace(/\w\S*/g, (txt) => {
+    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
+  });
+}
+
+export function formatBytes(bytes) {
+  let units = ['KB','MB','GB','TB','PB','EB','ZB','YB'];
+  let thresh = 1024;
+  if (bytes < thresh) {
+    return bytes + ' B';
+  }
 
+  let u = -1;
+  do {
+    bytes /= thresh;
+    ++u;
+  } while (bytes >= thresh);
+  return bytes.toFixed(1) + ' ' + units[u];
+}
+
+// import/export sub-utils
+import parseLinkHeader from './utils/parseLinkHeader';
+import deviceNameMapper from './utils/deviceNameMapper';
+import Collection from './utils/collection';
+import PendingChangeQueue from './utils/pendingChangeQueue';
+import CursorPoller from './utils/cursorPoller';
+import StreamManager from './utils/streamManager';
+
+// re-export under utils
+export {
+  parseLinkHeader,
+  deviceNameMapper,
+  Collection,
+  PendingChangeQueue,
+  CursorPoller
+};
+
+
+// backwards compatible default export for use w/ getsentry (exported
+// as a single object w/ function refs for consumption by getsentry)
+export default {
+  getQueryParams: getQueryParams,
+  sortArray: sortArray,
+  objectIsEmpty: objectIsEmpty,
+  trim: trim,
+  defined: defined,
+  nl2br: nl2br,
+  isUrl: isUrl,
+  escape: escape,
+  percent: percent,
+  urlize: urlize,
+  toTitleCase: toTitleCase,
   arrayIsEqual: arrayIsEqual,
   objectMatchesSubset: objectMatchesSubset,
   compareArrays: compareArrays,
   intcomma: intcomma,
   modelsEqual: modelsEqual,
   valueIsEqual: valueIsEqual,
-  parseLinkHeader: require('./utils/parseLinkHeader'),
-  deviceNameMapper: require('./utils/deviceNameMapper'),
-  objectToArray: objectToArray,
+  parseLinkHeader: parseLinkHeader,
 
-  Collection: require('./utils/collection'),
-  PendingChangeQueue: require('./utils/pendingChangeQueue'),
-  StreamManager: require('./utils/streamManager'),
-  CursorPoller: require('./utils/cursorPoller'),
+  // external imports
+  deviceNameMapper: deviceNameMapper,
+  objectToArray: objectToArray,
+  Collection: Collection,
+  PendingChangeQueue: PendingChangeQueue,
+  StreamManager: StreamManager,
+  CursorPoller: CursorPoller
 };
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index d3ea1f050f..81c0ccf8f0 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -43,8 +43,8 @@
   <script src="{% asset_url "sentry" "dist/app.js" %}"{% crossorigin %}></script>
 
   <script>
-    for (var n in window.exports) {
-      window[n] = window.exports[n];
+    for (var n in window.exports.default) {
+      window[n] = window.exports.default[n];
     }
     window.$ = window.jQuery;
 
diff --git a/tests/js/helpers/stubReactComponent.jsx b/tests/js/helpers/stubReactComponent.jsx
index 7f006990cd..6bc3269732 100644
--- a/tests/js/helpers/stubReactComponent.jsx
+++ b/tests/js/helpers/stubReactComponent.jsx
@@ -1,7 +1,7 @@
 // Inspired by TimothyRHuertas
 // https://gist.github.com/TimothyRHuertas/d7d06313c5411fe242bb
 
-let React = require('react');
+import React from 'react';
 let divFactory = React.createFactory('div');
 let originalCreateElement = React.createElement;
 
@@ -25,4 +25,4 @@ export default function(stubber, stubbedComponents) {
       return divFactory(props);
     }
   });
-}
\ No newline at end of file
+}
diff --git a/tests/js/spec/stores/selectedGroupStore.spec.js b/tests/js/spec/stores/selectedGroupStore.spec.js
index c638d7f2fa..89d5cc634c 100644
--- a/tests/js/spec/stores/selectedGroupStore.spec.js
+++ b/tests/js/spec/stores/selectedGroupStore.spec.js
@@ -1,5 +1,5 @@
-const GroupStore = require('app/stores/groupStore');
-const SelectedGroupStore = require('app/stores/selectedGroupStore');
+import GroupStore from 'app/stores/groupStore';
+import SelectedGroupStore from 'app/stores/selectedGroupStore';
 
 describe('SelectedGroupStore', function() {
 
diff --git a/tests/js/spec/utils/streamManager.spec.js b/tests/js/spec/utils/streamManager.spec.js
index 9f0a353bf9..2d7dc3f0f1 100644
--- a/tests/js/spec/utils/streamManager.spec.js
+++ b/tests/js/spec/utils/streamManager.spec.js
@@ -1,5 +1,5 @@
-const Reflux = require('reflux');
-const StreamManager = require('app/utils/streamManager');
+import Reflux from 'reflux';
+import StreamManager from 'app/utils/streamManager';
 
 describe('StreamManager', function() {
 
