commit 13cdd9cda906fb0a25c792054800c357c19386c0
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Sep 26 03:04:32 2016 +0200

    Make symsynd mandatory and update to latest.

diff --git a/Makefile b/Makefile
index c0a9a1ded9..4f3e5b5245 100644
--- a/Makefile
+++ b/Makefile
@@ -7,7 +7,7 @@ install-python:
 	# order matters here, base package must install first
 	pip install -e .
 	pip install ujson
-	pip install "file://`pwd`#egg=sentry[dev,dsym]"
+	pip install "file://`pwd`#egg=sentry[dev]"
 
 install-npm:
 	@echo "--> Installing Node dependencies"
diff --git a/setup.py b/setup.py
index 265cd5b2a4..f6aa242fd2 100755
--- a/setup.py
+++ b/setup.py
@@ -130,6 +130,7 @@ install_requires = [
     'statsd>=3.1.0,<3.2.0',
     'structlog==16.1.0',
     'South==1.0.1',
+    'symsynd>=1.1.0,<2.0.0',
     'toronado>=0.0.10,<0.1.0',
     'ua-parser>=0.6.1,<0.8.0',
     'urllib3>=1.14,<1.17',
@@ -139,10 +140,6 @@ install_requires = [
     'python-u2flib-server>=4.0.1,<4.1.0',
 ]
 
-dsym_requires = [
-    'symsynd>=0.8.3,<1.0.0',
-]
-
 
 class SentrySDistCommand(SDistCommand):
     # If we are not a light build we want to also execute build_assets as
@@ -194,7 +191,6 @@ setup(
         'tests': tests_require,
         'dev': dev_requires,
         'postgres': install_requires,
-        'dsym': dsym_requires,
     },
     cmdclass=cmdclass,
     license='BSD',
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 21c14cd284..8338b7d7ed 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -9,7 +9,7 @@ import posixpath
 
 from sentry.models import Project, EventError
 from sentry.plugins import Plugin2
-from sentry.lang.native.symbolizer import Symbolizer, have_symsynd
+from sentry.lang.native.symbolizer import Symbolizer
 from sentry.lang.native.utils import find_all_stacktraces, \
     find_apple_crash_report_referenced_images, get_sdk_from_event, \
     find_stacktrace_referenced_images, get_sdk_from_apple_system_info, \
@@ -251,14 +251,6 @@ def inject_apple_device_data(data, system):
             device['family'] = match.group(1)
 
 
-def record_no_symsynd(data):
-    if data.get('sentry.interfaces.AppleCrashReport'):
-        append_error(data, {
-            'type': EventError.NATIVE_NO_SYMSYND,
-        })
-        return data
-
-
 def dump_crash_report(report):
     import json
     with open('/tmp/sentry-apple-crash-report-%s.json' % time.time(), 'w') as f:
@@ -452,6 +444,4 @@ class NativePlugin(Plugin2):
     can_disable = False
 
     def get_event_preprocessors(self, **kwargs):
-        if not have_symsynd:
-            return [record_no_symsynd]
         return [preprocess_apple_crash_event, resolve_frame_symbols]
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index f7ed344a7a..19e1226860 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -2,16 +2,11 @@ from __future__ import absolute_import
 
 import six
 
-try:
-    from symsynd.driver import Driver, SymbolicationError
-    from symsynd.report import ReportSymbolizer
-    from symsynd.macho.arch import get_cpu_name
-    from symsynd.demangle import demangle_symbol
-    have_symsynd = True
-except ImportError:
-    have_symsynd = False
-
-from sentry import options
+from symsynd.driver import Driver, SymbolicationError
+from symsynd.report import ReportSymbolizer
+from symsynd.macho.arch import get_cpu_name
+from symsynd.demangle import demangle_symbol
+
 from sentry.lang.native.dsymcache import dsymcache
 from sentry.utils.safe import trim
 from sentry.models import DSymSymbol, EventError
@@ -44,10 +39,7 @@ def make_symbolizer(project, binary_images, referenced_images=None):
     list of referenced images is referenced (UUIDs) then only images
     needed by those frames are loaded.
     """
-    if not have_symsynd:
-        raise RuntimeError('symsynd is unavailable.  Install sentry with '
-                           'the dsym feature flag.')
-    driver = Driver(options.get('dsym.llvm-symbolizer-path') or None)
+    driver = Driver()
 
     to_load = referenced_images
     if to_load is None:
diff --git a/src/sentry/models/dsymfile.py b/src/sentry/models/dsymfile.py
index 6ee47d77b4..ab17490c94 100644
--- a/src/sentry/models/dsymfile.py
+++ b/src/sentry/models/dsymfile.py
@@ -17,11 +17,7 @@ import tempfile
 from itertools import chain
 from django.db import models, router, transaction, connection, IntegrityError
 
-try:
-    from symsynd.macho.arch import get_macho_uuids
-    have_symsynd = True
-except ImportError:
-    have_symsynd = False
+from symsynd.macho.arch import get_macho_uuids
 
 from sentry.db.models import FlexibleForeignKey, Model, BoundedBigIntegerField, \
     sane_repr, BaseManager
@@ -406,9 +402,6 @@ def create_files_from_macho_zip(fileobj, project=None):
     """Creates all missing dsym files from the given zip file.  This
     returns a list of all files created.
     """
-    if not have_symsynd:
-        raise RuntimeError('symsynd is unavailable.  Install sentry with '
-                           'the dsym feature flag.')
     scratchpad = tempfile.mkdtemp()
     try:
         safe_extract_zip(fileobj, scratchpad)
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 7ec3435588..f9cc7f7a6d 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -49,7 +49,6 @@ register(
 register('redis.options', type=Dict, flags=FLAG_NOSTORE)
 
 # symbolizer specifics
-register('dsym.llvm-symbolizer-path', type=String)
 register('dsym.cache-path', type=String, default='/tmp/sentry-dsym-cache')
 
 # Mail
