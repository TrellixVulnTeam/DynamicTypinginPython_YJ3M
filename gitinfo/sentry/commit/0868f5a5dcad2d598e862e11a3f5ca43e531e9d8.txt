commit 0868f5a5dcad2d598e862e11a3f5ca43e531e9d8
Author: William Mak <william@wmak.io>
Date:   Thu Jan 23 17:28:53 2020 -0500

    fix(releases) - Only update Commits if they've changed
    
    - Right now if a release gets set_commits run multiple times with the
      same commits, we trigger many many updates. This way we'll only
      trigger one update.

diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 2d297daea1..759a3ade67 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -418,7 +418,6 @@ class Release(Model):
                         author = authors[author_email]
 
                     commit_data = {}
-                    defaults = {}
 
                     # Update/set message and author if they are provided.
                     if author is not None:
@@ -427,22 +426,21 @@ class Release(Model):
                         commit_data["message"] = data["message"]
                     if "timestamp" in data:
                         commit_data["date_added"] = data["timestamp"]
-                    else:
-                        defaults["date_added"] = timezone.now()
 
-                    commit, created = Commit.objects.create_or_update(
+                    commit, created = Commit.objects.get_or_create(
                         organization_id=self.organization_id,
                         repository_id=repo.id,
                         key=data["id"],
-                        defaults=defaults,
-                        values=commit_data,
+                        defaults=commit_data,
                     )
                     if not created:
-                        commit = Commit.objects.get(
-                            organization_id=self.organization_id,
-                            repository_id=repo.id,
-                            key=data["id"],
-                        )
+                        commit_data = {
+                            key: value
+                            for key, value in six.iteritems(commit_data)
+                            if getattr(commit, key) != value
+                        }
+                        if commit_data:
+                            commit.update(**commit_data)
 
                     if author is None:
                         author = commit.author
diff --git a/tests/sentry/models/test_release.py b/tests/sentry/models/test_release.py
index 7af45fc6ec..1599c0883f 100644
--- a/tests/sentry/models/test_release.py
+++ b/tests/sentry/models/test_release.py
@@ -349,6 +349,27 @@ class SetCommitsTestCase(TestCase):
         assert release.authors == [six.text_type(author.id)]
         assert release.last_commit_id == latest_commit.id
 
+    @patch("sentry.models.Commit.update")
+    @freeze_time()
+    def test_multiple_releases_only_updates_once(self, mock_update):
+        org = self.create_organization()
+        project = self.create_project(organization=org, name="foo")
+
+        repo = Repository.objects.create(organization_id=org.id, name="test/repo")
+
+        release = Release.objects.create(version="abcdabc", organization=org)
+        release.add_project(project)
+
+        release.set_commits([{"id": "b" * 40, "repository": repo.name, "message": "old message"}])
+
+        # Setting the exact same commits, shouldn't call update
+        release.set_commits([{"id": "b" * 40, "repository": repo.name, "message": "old message"}])
+        assert mock_update.call_count == 0
+
+        # Setting a different commit message, should call update
+        release.set_commits([{"id": "b" * 40, "repository": repo.name, "message": "new message"}])
+        assert mock_update.call_count == 1
+
     def test_resolution_support_full_featured(self):
         org = self.create_organization(owner=self.user)
         project = self.create_project(organization=org, name="foo")
