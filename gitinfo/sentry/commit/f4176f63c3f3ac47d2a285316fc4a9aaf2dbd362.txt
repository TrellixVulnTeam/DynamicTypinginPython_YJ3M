commit f4176f63c3f3ac47d2a285316fc4a9aaf2dbd362
Author: Mark Story <mark@sentry.io>
Date:   Tue May 21 15:04:03 2019 -0400

    fix(integrations) Track requests made in metric (#13270)
    
    We already have metrics for each response code/failure mode but we
    didn't have request started metrics. Having this additional metric will
    let us more easily build alerts based on the % of failed requests.
    
    Tagging metrics by host will result in too many discrete values in
    datadog. Segmenting by integration name will give us a finite number of
    tags that we can drill into further with logging if need be.
    
    Refs SEN-630

diff --git a/src/sentry/integrations/bitbucket/client.py b/src/sentry/integrations/bitbucket/client.py
index 54ebab3964..f0680e4887 100644
--- a/src/sentry/integrations/bitbucket/client.py
+++ b/src/sentry/integrations/bitbucket/client.py
@@ -42,6 +42,7 @@ class BitbucketApiClient(ApiClient):
 
     NOTE: repo is the fully qualified slug containing 'username/repo_slug'
     """
+    integration_name = 'bitbucket'
 
     def __init__(self, base_url, shared_secret, subject, *args, **kwargs):
         # subject is probably the clientKey
diff --git a/src/sentry/integrations/client.py b/src/sentry/integrations/client.py
index ba27d6d447..565cf38b68 100644
--- a/src/sentry/integrations/client.py
+++ b/src/sentry/integrations/client.py
@@ -13,7 +13,6 @@ from requests.exceptions import ConnectionError, Timeout, HTTPError
 from sentry.exceptions import InvalidIdentity
 from sentry.http import build_session
 from sentry.utils import metrics
-from six.moves.urllib.parse import urlparse
 
 from .exceptions import (
     ApiHostError,
@@ -129,7 +128,10 @@ class ApiClient(object):
 
     allow_redirects = None
 
-    logger = logging.getLogger('sentry.plugins')
+    logger = logging.getLogger('sentry.integrations')
+
+    # Used in metrics and logging.
+    integration_name = 'undefined'
 
     def __init__(self, verify_ssl=True):
         self.verify_ssl = verify_ssl
@@ -158,8 +160,9 @@ class ApiClient(object):
             timeout = 30
 
         full_url = self.build_url(path)
-        host = urlparse(full_url).netloc
         session = build_session()
+
+        metrics.incr('integrations.http_request', tags={'integration': self.integration_name})
         try:
             resp = getattr(session, method.lower())(
                 url=full_url,
@@ -175,28 +178,29 @@ class ApiClient(object):
             resp.raise_for_status()
         except ConnectionError as e:
             metrics.incr('integrations.http_response', tags={
-                'host': host,
+                'integration': self.integration_name,
                 'status': 'connection_error'
             })
             raise ApiHostError.from_exception(e)
         except Timeout as e:
             metrics.incr('integrations.http_response', tags={
-                'host': host,
+                'integration': self.integration_name,
                 'status': 'timeout'
             })
             raise ApiTimeoutError.from_exception(e)
         except HTTPError as e:
             resp = e.response
             if resp is None:
-                track_response_code(host, 'unknown')
+                track_response_code(self.integration_name, 'unknown')
                 self.logger.exception('request.error', extra={
+                    'integration': self.integration_name,
                     'url': full_url,
                 })
                 raise ApiError('Internal Error')
-            track_response_code(host, resp.status_code)
+            track_response_code(self.integration_name, resp.status_code)
             raise ApiError.from_response(resp)
 
-        track_response_code(host, resp.status_code)
+        track_response_code(self.integration_name, resp.status_code)
         if resp.status_code == 204:
             return {}
 
diff --git a/src/sentry/integrations/github/client.py b/src/sentry/integrations/github/client.py
index ef4abb624b..98aff2922d 100644
--- a/src/sentry/integrations/github/client.py
+++ b/src/sentry/integrations/github/client.py
@@ -10,6 +10,7 @@ class GitHubClientMixin(ApiClient):
     allow_redirects = True
 
     base_url = 'https://api.github.com'
+    integration_name = 'github'
 
     def get_jwt(self):
         return get_jwt()
diff --git a/src/sentry/integrations/gitlab/client.py b/src/sentry/integrations/gitlab/client.py
index 142a1aba87..63b38de8ef 100644
--- a/src/sentry/integrations/gitlab/client.py
+++ b/src/sentry/integrations/gitlab/client.py
@@ -45,6 +45,8 @@ class GitLabSetupClient(ApiClient):
     needed to build installation metadata
     """
 
+    integration_name = 'gitlab_setup'
+
     def __init__(self, base_url, access_token, verify_ssl):
         self.base_url = base_url
         self.token = access_token
@@ -74,6 +76,7 @@ class GitLabSetupClient(ApiClient):
 
 
 class GitLabApiClient(ApiClient):
+    integration_name = 'gitlab'
 
     def __init__(self, installation):
         self.installation = installation
diff --git a/src/sentry/integrations/jira/client.py b/src/sentry/integrations/jira/client.py
index fae3562d7b..840c3a0e1a 100644
--- a/src/sentry/integrations/jira/client.py
+++ b/src/sentry/integrations/jira/client.py
@@ -90,6 +90,8 @@ class JiraApiClient(ApiClient):
     ASSIGN_URL = '/rest/api/2/issue/%s/assignee'
     TRANSITION_URL = '/rest/api/2/issue/%s/transitions'
 
+    integration_name = 'jira'
+
     def __init__(self, base_url, jira_style, verify_ssl):
         self.base_url = base_url
         # `jira_style` encapsulates differences between jira server & jira cloud.
@@ -108,7 +110,8 @@ class JiraApiClient(ApiClient):
             request_spec['headers'] = {}
 
         # Force adherence to the GDPR compliant API conventions.
-        # See https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide
+        # See
+        # https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide
         request_spec['headers']['x-atlassian-force-account-id'] = 'true'
         return self._request(**request_spec)
 
diff --git a/src/sentry/integrations/jira_server/client.py b/src/sentry/integrations/jira_server/client.py
index d77da27690..b6ddf940c9 100644
--- a/src/sentry/integrations/jira_server/client.py
+++ b/src/sentry/integrations/jira_server/client.py
@@ -20,6 +20,7 @@ class JiraServerSetupClient(ApiClient):
     request_token_url = u'{}/plugins/servlet/oauth/request-token'
     access_token_url = u'{}/plugins/servlet/oauth/access-token'
     authorize_url = u'{}/plugins/servlet/oauth/authorize?oauth_token={}'
+    integration_name = 'jira_server_setup'
 
     def __init__(self, base_url, consumer_key, private_key, verify_ssl=True):
         self.base_url = base_url
diff --git a/src/sentry/integrations/vsts/client.py b/src/sentry/integrations/vsts/client.py
index e473c8d5e6..37c6ed9d4f 100644
--- a/src/sentry/integrations/vsts/client.py
+++ b/src/sentry/integrations/vsts/client.py
@@ -39,6 +39,7 @@ class VstsApiPath(object):
 class VstsApiClient(ApiClient, OAuth2RefreshMixin):
     api_version = '4.1'
     api_version_preview = '-preview.1'
+    integration_name = 'vsts'
 
     def __init__(self, identity, oauth_redirect_url, *args, **kwargs):
         super(VstsApiClient, self).__init__(*args, **kwargs)
