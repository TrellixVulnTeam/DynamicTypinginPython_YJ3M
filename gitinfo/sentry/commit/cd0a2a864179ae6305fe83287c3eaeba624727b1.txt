commit cd0a2a864179ae6305fe83287c3eaeba624727b1
Author: William Mak <william@wmak.io>
Date:   Fri May 15 14:17:13 2020 -0400

    fix(perf-views): defaultSelection overwriting parsed values
    
    - If there's default selection parsed values weren't being used.

diff --git a/src/sentry/static/sentry/app/actionCreators/globalSelection.tsx b/src/sentry/static/sentry/app/actionCreators/globalSelection.tsx
index 4aae0d6e29..de9943fb0b 100644
--- a/src/sentry/static/sentry/app/actionCreators/globalSelection.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/globalSelection.tsx
@@ -113,22 +113,33 @@ export function initializeUrlState({
   const orgSlug = organization.slug;
   const query = pick(queryParams, [URL_PARAM.PROJECT, URL_PARAM.ENVIRONMENT]);
   const hasProjectOrEnvironmentInUrl = Object.keys(query).length > 0;
-  const parsed = getStateFromQuery(queryParams, {allowAbsoluteDatetime: showAbsolute});
+  const parsed = getStateFromQuery(queryParams, {
+    allowAbsoluteDatetime: showAbsolute,
+    allowEmptyPeriod: true,
+  });
+  const {datetime: defaultDateTime, ...retrievedDefaultSelection} = getDefaultSelection();
+  const {datetime: customizedDefaultDateTime, ...customizedDefaultSelection} =
+    defaultSelection || {};
 
   let globalSelection: Omit<GlobalSelection, 'datetime'> & {
     datetime: {
       [K in keyof GlobalSelection['datetime']]: GlobalSelection['datetime'][K] | null;
     };
   } = {
-    ...getDefaultSelection(),
+    ...retrievedDefaultSelection,
+    ...customizedDefaultSelection,
     datetime: {
-      [DATE_TIME.START as 'start']: parsed.start || null,
-      [DATE_TIME.END as 'end']: parsed.end || null,
-      [DATE_TIME.PERIOD as 'period']: parsed.period || null,
-      [DATE_TIME.UTC as 'utc']: parsed.utc || null,
+      [DATE_TIME.START as 'start']:
+        parsed.start || customizedDefaultDateTime?.start || null,
+      [DATE_TIME.END as 'end']: parsed.end || customizedDefaultDateTime?.end || null,
+      [DATE_TIME.PERIOD as 'period']:
+        parsed.period || customizedDefaultDateTime?.period || defaultDateTime.period,
+      [DATE_TIME.UTC as 'utc']: parsed.utc || customizedDefaultDateTime?.utc || null,
     },
-    ...defaultSelection,
   };
+  if (globalSelection.datetime.start && globalSelection.datetime.end) {
+    globalSelection.datetime.period = null;
+  }
 
   // We only save environment and project, so if those exist in
   // URL, do not touch local storage
diff --git a/tests/js/spec/actionCreators/globalSelection.spec.jsx b/tests/js/spec/actionCreators/globalSelection.spec.jsx
index fcb7235a89..c739ea5ea4 100644
--- a/tests/js/spec/actionCreators/globalSelection.spec.jsx
+++ b/tests/js/spec/actionCreators/globalSelection.spec.jsx
@@ -64,6 +64,105 @@ describe('GlobalSelection ActionCreators', function() {
       expect(localStorage.getItem).not.toHaveBeenCalled();
     });
 
+    it('does not change dates with no query params or defaultSelection', function() {
+      initializeUrlState({
+        organization,
+        queryParams: {
+          project: '1',
+        },
+        router,
+      });
+      expect(GlobalSelectionActions.initializeUrlState).toHaveBeenCalledWith(
+        expect.objectContaining({
+          datetime: {
+            start: null,
+            end: null,
+            period: '14d',
+            utc: null,
+          },
+        })
+      );
+    });
+
+    it('does changes to default dates with defaultSelection and no query params', function() {
+      initializeUrlState({
+        organization,
+        queryParams: {
+          project: '1',
+        },
+        defaultSelection: {
+          datetime: {
+            period: '3h',
+          },
+        },
+        router,
+      });
+      expect(GlobalSelectionActions.initializeUrlState).toHaveBeenCalledWith(
+        expect.objectContaining({
+          datetime: {
+            start: null,
+            end: null,
+            period: '3h',
+            utc: null,
+          },
+        })
+      );
+    });
+
+    it('uses query params statsPeriod over defaults', function() {
+      initializeUrlState({
+        organization,
+        queryParams: {
+          statsPeriod: '1h',
+          project: '1',
+        },
+        defaultSelection: {
+          datetime: {
+            period: '24h',
+          },
+        },
+        router,
+      });
+      expect(router.replace).toHaveBeenCalledWith(
+        expect.objectContaining({
+          query: {
+            cursor: undefined,
+            project: [1],
+            environment: [],
+            statsPeriod: '1h',
+          },
+        })
+      );
+    });
+
+    it('uses absolute dates over defaults', function() {
+      initializeUrlState({
+        organization,
+        queryParams: {
+          start: '2020-03-22T00:53:38',
+          end: '2020-04-21T00:53:38',
+          project: '1',
+        },
+        defaultSelection: {
+          datetime: {
+            period: '24h',
+          },
+        },
+        router,
+      });
+      expect(router.replace).toHaveBeenCalledWith(
+        expect.objectContaining({
+          query: {
+            cursor: undefined,
+            project: [1],
+            environment: [],
+            start: '2020-03-22T00:53:38',
+            end: '2020-04-21T00:53:38',
+          },
+        })
+      );
+    });
+
     it('does not load from local storage when there are query params', function() {
       initializeUrlState({
         organization,
