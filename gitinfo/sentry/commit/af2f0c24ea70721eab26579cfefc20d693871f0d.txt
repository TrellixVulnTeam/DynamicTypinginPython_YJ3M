commit af2f0c24ea70721eab26579cfefc20d693871f0d
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Aug 6 10:14:56 2019 +0200

    feat: Added variable based fingerprinting (#14126)

diff --git a/src/sentry/eventtypes/error.py b/src/sentry/eventtypes/error.py
index 61b5512748..899407b93f 100644
--- a/src/sentry/eventtypes/error.py
+++ b/src/sentry/eventtypes/error.py
@@ -7,18 +7,14 @@ from sentry.utils.strings import truncatechars
 from .base import BaseEvent
 
 
-def get_crash_location(exception, platform=None):
-    default = None
-    for frame in reversed(get_path(exception, 'stacktrace', 'frames', filter=True) or ()):
-        fn = frame.get('filename') or frame.get('abs_path')
-        if fn:
-            from sentry.stacktraces.functions import get_function_name_for_frame
-            func = get_function_name_for_frame(frame, platform)
-            if frame.get('in_app'):
-                return fn, func
-            if default is None:
-                default = fn, func
-    return default
+def get_crash_location(data):
+    from sentry.stacktraces.processing import get_crash_frame_from_event_data
+    frame = get_crash_frame_from_event_data(
+        data, frame_filter=lambda x: x.get('filename') or x.get('abs_path'))
+    if frame is not None:
+        from sentry.stacktraces.functions import get_function_name_for_frame
+        func = get_function_name_for_frame(frame, data.get('platform'))
+        return frame.get('filename') or frame.get('abs_path'), func
 
 
 class ErrorEvent(BaseEvent):
@@ -29,7 +25,7 @@ class ErrorEvent(BaseEvent):
         if not exception:
             return {}
 
-        loc = get_crash_location(exception, data.get('platform'))
+        loc = get_crash_location(data)
         rv = {
             'value': trim(get_path(exception, 'value', default=''), 1024),
         }
diff --git a/src/sentry/grouping/api.py b/src/sentry/grouping/api.py
index 8b49517801..0d9f7f5ca1 100644
--- a/src/sentry/grouping/api.py
+++ b/src/sentry/grouping/api.py
@@ -8,7 +8,8 @@ from sentry.grouping.component import GroupingComponent
 from sentry.grouping.variants import ChecksumVariant, FallbackVariant, \
     ComponentVariant, CustomFingerprintVariant, SaltedComponentVariant
 from sentry.grouping.enhancer import Enhancements, InvalidEnhancerConfig, ENHANCEMENT_BASES
-from sentry.grouping.utils import DEFAULT_FINGERPRINT_VALUES, hash_from_values
+from sentry.grouping.utils import DEFAULT_FINGERPRINT_VALUES, hash_from_values, \
+    resolve_fingerprint_values
 
 
 HASH_RE = re.compile(r'^[0-9a-f]{32}$')
@@ -201,6 +202,7 @@ def get_grouping_variants_for_event(event, config=None):
     # If no defaults are referenced we produce a single completely custom
     # fingerprint.
     if defaults_referenced == 0:
+        fingerprint = resolve_fingerprint_values(fingerprint, event)
         return {
             'custom-fingerprint': CustomFingerprintVariant(fingerprint),
         }
@@ -220,6 +222,7 @@ def get_grouping_variants_for_event(event, config=None):
 
     # Otherwise we need to salt each of the components.
     else:
+        fingerprint = resolve_fingerprint_values(fingerprint, event)
         for (key, component) in six.iteritems(components):
             rv[key] = SaltedComponentVariant(fingerprint, component, config)
 
diff --git a/src/sentry/grouping/fingerprinting.py b/src/sentry/grouping/fingerprinting.py
index eb3b7eccea..4ab5b1c399 100644
--- a/src/sentry/grouping/fingerprinting.py
+++ b/src/sentry/grouping/fingerprinting.py
@@ -37,7 +37,7 @@ comment        = ~r"#[^\r\n]*"
 
 quoted         = ~r'"([^"\\]*(?:\\.[^"\\]*)*)"'
 unquoted       = ~r"\S+"
-unquoted_no_comma = ~r"[^\s,]+"
+unquoted_no_comma = ~r"((?:\{\{\s*\S+\s*\}\})|(?:[^\s,]+))"
 
 follow  = "->"
 sep     = ":"
diff --git a/src/sentry/grouping/utils.py b/src/sentry/grouping/utils.py
index bbe19e33fa..640328188a 100644
--- a/src/sentry/grouping/utils.py
+++ b/src/sentry/grouping/utils.py
@@ -4,7 +4,16 @@ from hashlib import md5
 
 from django.utils.encoding import force_bytes
 
+from sentry.utils.safe import get_path
+from sentry.stacktraces.processing import get_crash_frame_from_event_data
+
+
 DEFAULT_FINGERPRINT_VALUES = frozenset(['{{ default }}', '{{default}}'])
+TRANSACTION_FINGERPRINT_VALUES = frozenset(['{{ transaction }}', '{{transaction}}'])
+EXCEPTION_TYPE_FINGERPRINT_VALUES = frozenset(['{{ type }}', '{{type}}'])
+FUNCTION_FINGERPRINT_VALUES = frozenset(['{{ function }}', '{{function}}'])
+MODULE_FINGERPRINT_VALUES = frozenset(['{{ module }}', '{{module}}'])
+PACKAGE_FINGERPRINT_VALUES = frozenset(['{{ package }}', '{{package}}'])
 
 
 def hash_from_values(values):
@@ -21,3 +30,28 @@ def get_rule_bool(value):
             return True
         elif value in ('0', 'no', 'false'):
             return False
+
+
+def resolve_fingerprint_values(values, event):
+    def get_fingerprint_value(value):
+        if value in TRANSACTION_FINGERPRINT_VALUES:
+            return event.data.get('transaction') or '<no-transaction>'
+        elif value in EXCEPTION_TYPE_FINGERPRINT_VALUES:
+            ty = get_path(event.data, 'exception', 'values', -1, 'type')
+            return ty or '<no-type>'
+        elif value in FUNCTION_FINGERPRINT_VALUES:
+            frame = get_crash_frame_from_event_data(event.data)
+            func = frame.get('function') if frame else None
+            return func or '<no-function>'
+        elif value in MODULE_FINGERPRINT_VALUES:
+            frame = get_crash_frame_from_event_data(event.data)
+            mod = frame.get('module') if frame else None
+            return mod or '<no-module>'
+        elif value in PACKAGE_FINGERPRINT_VALUES:
+            frame = get_crash_frame_from_event_data(event.data)
+            pkg = frame.get('package') if frame else None
+            if pkg:
+                pkg = pkg.rsplit('/', 1)[-1].rsplit('\\', 1)[-1]
+            return pkg or '<no-package>'
+        return value
+    return [get_fingerprint_value(x) for x in values]
diff --git a/src/sentry/stacktraces/processing.py b/src/sentry/stacktraces/processing.py
index e3a35eb348..26d49d7432 100644
--- a/src/sentry/stacktraces/processing.py
+++ b/src/sentry/stacktraces/processing.py
@@ -390,6 +390,28 @@ def process_single_stacktrace(processing_task, stacktrace_info, processable_fram
     )
 
 
+def get_crash_frame_from_event_data(data, frame_filter=None):
+    frames = get_path(data, 'exception', 'values', -1, 'stacktrace', 'frames') or \
+        get_path(data, 'stacktrace', 'frames')
+    if not frames:
+        threads = get_path(data, 'threads', 'values')
+        if threads and len(threads) == 1:
+            frames = get_path(threads, 0)
+
+    default = None
+    for frame in reversed(frames or ()):
+        if frame_filter is not None:
+            if not frame_filter(frame):
+                continue
+        if frame.get('in_app'):
+            return frame
+        if default is None:
+            default = frame
+
+    if default:
+        return default
+
+
 def lookup_frame_cache(keys):
     rv = {}
     for key in keys:
diff --git a/tests/sentry/grouping/fingerprint_inputs/fingerprint-function.json b/tests/sentry/grouping/fingerprint_inputs/fingerprint-function.json
new file mode 100644
index 0000000000..8ad03652d6
--- /dev/null
+++ b/tests/sentry/grouping/fingerprint_inputs/fingerprint-function.json
@@ -0,0 +1,32 @@
+{
+  "_fingerprinting_rules": [
+    {
+      "matchers": [
+        ["type", "DatabaseUnavailable"],
+        ["module", "io.sentry.example.*"]
+      ],
+      "fingerprint": ["database-unavailable",  "{{ function }}"]
+    }
+  ],
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "main",
+              "abs_path": "Application.java",
+              "module": "io.sentry.example.Application",
+              "filename": "Application.java",
+              "lineno": 13,
+              "in_app": false
+            }
+          ]
+        },
+        "type": "DatabaseUnavailable",
+        "value": "For some reason the database went away"
+      }
+    ]
+  },
+  "platform": "java"
+}
diff --git a/tests/sentry/grouping/fingerprint_inputs/fingerprint-no-function.json b/tests/sentry/grouping/fingerprint_inputs/fingerprint-no-function.json
new file mode 100644
index 0000000000..8fff323af1
--- /dev/null
+++ b/tests/sentry/grouping/fingerprint_inputs/fingerprint-no-function.json
@@ -0,0 +1,31 @@
+{
+  "_fingerprinting_rules": [
+    {
+      "matchers": [
+        ["type", "DatabaseUnavailable"],
+        ["module", "io.sentry.example.*"]
+      ],
+      "fingerprint": ["database-unavailable",  "{{ function }}"]
+    }
+  ],
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "abs_path": "Application.java",
+              "module": "io.sentry.example.Application",
+              "filename": "Application.java",
+              "lineno": 13,
+              "in_app": false
+            }
+          ]
+        },
+        "type": "DatabaseUnavailable",
+        "value": "For some reason the database went away"
+      }
+    ]
+  },
+  "platform": "java"
+}
diff --git a/tests/sentry/grouping/fingerprint_inputs/fingerprint-no-package.json b/tests/sentry/grouping/fingerprint_inputs/fingerprint-no-package.json
new file mode 100644
index 0000000000..54cabc5b3f
--- /dev/null
+++ b/tests/sentry/grouping/fingerprint_inputs/fingerprint-no-package.json
@@ -0,0 +1,31 @@
+{
+  "_fingerprinting_rules": [
+    {
+      "matchers": [
+        ["type", "DatabaseUnavailable"]
+      ],
+      "fingerprint": ["{{ package }}"]
+    }
+  ],
+  "transaction": "my-transaction",
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "main",
+              "abs_path": "Application.cpp",
+              "filename": "Application.cpp",
+              "lineno": 13,
+              "in_app": false
+            }
+          ]
+        },
+        "type": "DatabaseUnavailable",
+        "value": "For some reason the database went away"
+      }
+    ]
+  },
+  "platform": "native"
+}
diff --git a/tests/sentry/grouping/fingerprint_inputs/fingerprint-no-transaction.json b/tests/sentry/grouping/fingerprint_inputs/fingerprint-no-transaction.json
new file mode 100644
index 0000000000..201959dd28
--- /dev/null
+++ b/tests/sentry/grouping/fingerprint_inputs/fingerprint-no-transaction.json
@@ -0,0 +1,32 @@
+{
+  "_fingerprinting_rules": [
+    {
+      "matchers": [
+        ["type", "DatabaseUnavailable"],
+        ["module", "io.sentry.example.*"]
+      ],
+      "fingerprint": ["database-unavailable",  "{{ transaction }}"]
+    }
+  ],
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "main",
+              "abs_path": "Application.java",
+              "module": "io.sentry.example.Application",
+              "filename": "Application.java",
+              "lineno": 13,
+              "in_app": false
+            }
+          ]
+        },
+        "type": "DatabaseUnavailable",
+        "value": "For some reason the database went away"
+      }
+    ]
+  },
+  "platform": "java"
+}
diff --git a/tests/sentry/grouping/fingerprint_inputs/fingerprint-no-type-module.json b/tests/sentry/grouping/fingerprint_inputs/fingerprint-no-type-module.json
new file mode 100644
index 0000000000..a5c0bd04f0
--- /dev/null
+++ b/tests/sentry/grouping/fingerprint_inputs/fingerprint-no-type-module.json
@@ -0,0 +1,23 @@
+{
+  "_fingerprinting_rules": [
+    {
+      "matchers": [
+        ["function", "main"]
+      ],
+      "fingerprint": ["{{ type }}", "{{ module }}", "{{ function }}"]
+    }
+  ],
+  "transaction": "my-transaction",
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "main",
+        "abs_path": "Application.java",
+        "filename": "Application.java",
+        "lineno": 13,
+        "in_app": false
+      }
+    ]
+  },
+  "platform": "java"
+}
diff --git a/tests/sentry/grouping/fingerprint_inputs/fingerprint-package.json b/tests/sentry/grouping/fingerprint_inputs/fingerprint-package.json
new file mode 100644
index 0000000000..49f49c637e
--- /dev/null
+++ b/tests/sentry/grouping/fingerprint_inputs/fingerprint-package.json
@@ -0,0 +1,32 @@
+{
+  "_fingerprinting_rules": [
+    {
+      "matchers": [
+        ["type", "DatabaseUnavailable"]
+      ],
+      "fingerprint": ["{{ package }}"]
+    }
+  ],
+  "transaction": "my-transaction",
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "main",
+              "abs_path": "Application.cpp",
+              "package": "/usr/lib/foo.dylib",
+              "filename": "Application.cpp",
+              "lineno": 13,
+              "in_app": false
+            }
+          ]
+        },
+        "type": "DatabaseUnavailable",
+        "value": "For some reason the database went away"
+      }
+    ]
+  },
+  "platform": "native"
+}
diff --git a/tests/sentry/grouping/fingerprint_inputs/fingerprint-transaction.json b/tests/sentry/grouping/fingerprint_inputs/fingerprint-transaction.json
new file mode 100644
index 0000000000..e77b44b823
--- /dev/null
+++ b/tests/sentry/grouping/fingerprint_inputs/fingerprint-transaction.json
@@ -0,0 +1,33 @@
+{
+  "_fingerprinting_rules": [
+    {
+      "matchers": [
+        ["type", "DatabaseUnavailable"],
+        ["module", "io.sentry.example.*"]
+      ],
+      "fingerprint": ["database-unavailable",  "{{ transaction }}"]
+    }
+  ],
+  "transaction": "my-transaction",
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "main",
+              "abs_path": "Application.java",
+              "module": "io.sentry.example.Application",
+              "filename": "Application.java",
+              "lineno": 13,
+              "in_app": false
+            }
+          ]
+        },
+        "type": "DatabaseUnavailable",
+        "value": "For some reason the database went away"
+      }
+    ]
+  },
+  "platform": "java"
+}
diff --git a/tests/sentry/grouping/fingerprint_inputs/fingerprint-type-module.json b/tests/sentry/grouping/fingerprint_inputs/fingerprint-type-module.json
new file mode 100644
index 0000000000..1d89256f6d
--- /dev/null
+++ b/tests/sentry/grouping/fingerprint_inputs/fingerprint-type-module.json
@@ -0,0 +1,33 @@
+{
+  "_fingerprinting_rules": [
+    {
+      "matchers": [
+        ["type", "DatabaseUnavailable"],
+        ["module", "io.sentry.example.*"]
+      ],
+      "fingerprint": ["{{ type }}", "{{ module }}"]
+    }
+  ],
+  "transaction": "my-transaction",
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "main",
+              "abs_path": "Application.java",
+              "module": "io.sentry.example.Application",
+              "filename": "Application.java",
+              "lineno": 13,
+              "in_app": false
+            }
+          ]
+        },
+        "type": "DatabaseUnavailable",
+        "value": "For some reason the database went away"
+      }
+    ]
+  },
+  "platform": "java"
+}
diff --git a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_exception_type.pysnap b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_exception_type.pysnap
index 432e3fbb8b..581deb1206 100644
--- a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_exception_type.pysnap
+++ b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_exception_type.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-04-07T22:40:59.176960Z'
+created: '2019-07-23T21:55:25.846335Z'
 creator: sentry
 source: tests/sentry/grouping/test_fingerprinting.py
 ---
@@ -14,3 +14,9 @@ config:
 fingerprint:
 - my-route
 - database-unavailable
+variants:
+  custom-fingerprint:
+    type: custom-fingerprint
+    values:
+    - my-route
+    - database-unavailable
diff --git a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_exception_type_and_module.pysnap b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_exception_type_and_module.pysnap
index edb874aa86..6851706ced 100644
--- a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_exception_type_and_module.pysnap
+++ b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_exception_type_and_module.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-04-08T10:22:55.667584Z'
+created: '2019-07-23T21:55:25.855738Z'
 creator: sentry
 source: tests/sentry/grouping/test_fingerprinting.py
 ---
@@ -16,3 +16,9 @@ config:
 fingerprint:
 - my-route
 - database-unavailable
+variants:
+  custom-fingerprint:
+    type: custom-fingerprint
+    values:
+    - my-route
+    - database-unavailable
diff --git a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_exception_type_and_module2.pysnap b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_exception_type_and_module2.pysnap
index 8430873318..a385b117fb 100644
--- a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_exception_type_and_module2.pysnap
+++ b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_exception_type_and_module2.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-04-08T09:04:34.343282Z'
+created: '2019-07-23T21:55:25.868386Z'
 creator: sentry
 source: tests/sentry/grouping/test_fingerprinting.py
 ---
@@ -16,3 +16,14 @@ config:
 fingerprint:
 - my-route
 - '{{ default }}'
+variants:
+  app:
+    type: salted-component
+    values:
+    - my-route
+    - '{{ default }}'
+  system:
+    type: salted-component
+    values:
+    - my-route
+    - '{{ default }}'
diff --git a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_exception_value.pysnap b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_exception_value.pysnap
index 923f709108..830f59bc07 100644
--- a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_exception_value.pysnap
+++ b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_exception_value.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-04-07T22:42:22.847873Z'
+created: '2019-07-23T21:55:25.877113Z'
 creator: sentry
 source: tests/sentry/grouping/test_fingerprinting.py
 ---
@@ -13,3 +13,8 @@ config:
   version: 1
 fingerprint:
 - something-went-wrong
+variants:
+  custom-fingerprint:
+    type: custom-fingerprint
+    values:
+    - something-went-wrong
diff --git a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_function.pysnap b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_function.pysnap
new file mode 100644
index 0000000000..649e589589
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_function.pysnap
@@ -0,0 +1,25 @@
+---
+created: '2019-08-05T10:20:54.371341Z'
+creator: sentry
+source: tests/sentry/grouping/test_fingerprinting.py
+---
+config:
+  rules:
+  - fingerprint:
+    - database-unavailable
+    - '{{ function }}'
+    matchers:
+    - - type
+      - DatabaseUnavailable
+    - - module
+      - io.sentry.example.*
+  version: 1
+fingerprint:
+- database-unavailable
+- '{{ function }}'
+variants:
+  custom-fingerprint:
+    type: custom-fingerprint
+    values:
+    - database-unavailable
+    - main
diff --git a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_message.pysnap b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_message.pysnap
index 44b1a8e9e7..1679d4f6cf 100644
--- a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_message.pysnap
+++ b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_message.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-04-08T10:25:47.460482Z'
+created: '2019-07-23T21:55:25.885546Z'
 creator: sentry
 source: tests/sentry/grouping/test_fingerprinting.py
 ---
@@ -13,3 +13,8 @@ config:
   version: 1
 fingerprint:
 - what-is-love
+variants:
+  custom-fingerprint:
+    type: custom-fingerprint
+    values:
+    - what-is-love
diff --git a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_native.pysnap b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_native.pysnap
index 219e0c32fe..acb2ef115b 100644
--- a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_native.pysnap
+++ b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_native.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-04-08T10:39:51.270105Z'
+created: '2019-07-23T21:55:25.902949Z'
 creator: sentry
 source: tests/sentry/grouping/test_fingerprinting.py
 ---
@@ -15,3 +15,8 @@ config:
   version: 1
 fingerprint:
 - symcache-error
+variants:
+  custom-fingerprint:
+    type: custom-fingerprint
+    values:
+    - symcache-error
diff --git a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_native_app.pysnap b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_native_app.pysnap
index 460574251f..633d2f89b8 100644
--- a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_native_app.pysnap
+++ b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_native_app.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-05-10T09:35:38.127307Z'
+created: '2019-07-23T21:55:25.921295Z'
 creator: sentry
 source: tests/sentry/grouping/test_fingerprinting.py
 ---
@@ -15,3 +15,8 @@ config:
   version: 1
 fingerprint:
 - symcache-error
+variants:
+  custom-fingerprint:
+    type: custom-fingerprint
+    values:
+    - symcache-error
diff --git a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_native_non_app.pysnap b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_native_non_app.pysnap
index 568723fd45..db7134ec27 100644
--- a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_native_non_app.pysnap
+++ b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_native_non_app.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-05-10T09:35:38.141252Z'
+created: '2019-07-23T21:55:26.014346Z'
 creator: sentry
 source: tests/sentry/grouping/test_fingerprinting.py
 ---
@@ -15,3 +15,8 @@ config:
   version: 1
 fingerprint:
 - '{{ default }}'
+variants:
+  app:
+    type: component
+  system:
+    type: component
diff --git a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_no_function.pysnap b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_no_function.pysnap
new file mode 100644
index 0000000000..63bb53f84e
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_no_function.pysnap
@@ -0,0 +1,25 @@
+---
+created: '2019-08-05T10:21:51.469194Z'
+creator: sentry
+source: tests/sentry/grouping/test_fingerprinting.py
+---
+config:
+  rules:
+  - fingerprint:
+    - database-unavailable
+    - '{{ function }}'
+    matchers:
+    - - type
+      - DatabaseUnavailable
+    - - module
+      - io.sentry.example.*
+  version: 1
+fingerprint:
+- database-unavailable
+- '{{ function }}'
+variants:
+  custom-fingerprint:
+    type: custom-fingerprint
+    values:
+    - database-unavailable
+    - <no-function>
diff --git a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_no_match.pysnap b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_no_match.pysnap
index a1f305b559..d39dec01e4 100644
--- a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_no_match.pysnap
+++ b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_no_match.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-04-07T22:45:06.546058Z'
+created: '2019-07-23T21:55:26.024104Z'
 creator: sentry
 source: tests/sentry/grouping/test_fingerprinting.py
 ---
@@ -16,3 +16,14 @@ config:
 fingerprint:
 - my-route
 - '{{ default }}'
+variants:
+  app:
+    type: salted-component
+    values:
+    - my-route
+    - '{{ default }}'
+  system:
+    type: salted-component
+    values:
+    - my-route
+    - '{{ default }}'
diff --git a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_no_package.pysnap b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_no_package.pysnap
new file mode 100644
index 0000000000..5b21ee6775
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_no_package.pysnap
@@ -0,0 +1,20 @@
+---
+created: '2019-08-05T12:11:28.476796Z'
+creator: sentry
+source: tests/sentry/grouping/test_fingerprinting.py
+---
+config:
+  rules:
+  - fingerprint:
+    - '{{ package }}'
+    matchers:
+    - - type
+      - DatabaseUnavailable
+  version: 1
+fingerprint:
+- '{{ package }}'
+variants:
+  custom-fingerprint:
+    type: custom-fingerprint
+    values:
+    - <no-package>
diff --git a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_no_transaction.pysnap b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_no_transaction.pysnap
new file mode 100644
index 0000000000..62a2ec8f0a
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_no_transaction.pysnap
@@ -0,0 +1,25 @@
+---
+created: '2019-08-05T10:21:51.486852Z'
+creator: sentry
+source: tests/sentry/grouping/test_fingerprinting.py
+---
+config:
+  rules:
+  - fingerprint:
+    - database-unavailable
+    - '{{ transaction }}'
+    matchers:
+    - - type
+      - DatabaseUnavailable
+    - - module
+      - io.sentry.example.*
+  version: 1
+fingerprint:
+- database-unavailable
+- '{{ transaction }}'
+variants:
+  custom-fingerprint:
+    type: custom-fingerprint
+    values:
+    - database-unavailable
+    - <no-transaction>
diff --git a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_no_type_module.pysnap b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_no_type_module.pysnap
new file mode 100644
index 0000000000..c98070eb88
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_no_type_module.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-08-05T10:26:51.809104Z'
+creator: sentry
+source: tests/sentry/grouping/test_fingerprinting.py
+---
+config:
+  rules:
+  - fingerprint:
+    - '{{ type }}'
+    - '{{ module }}'
+    - '{{ function }}'
+    matchers:
+    - - function
+      - main
+  version: 1
+fingerprint:
+- '{{ type }}'
+- '{{ module }}'
+- '{{ function }}'
+variants:
+  custom-fingerprint:
+    type: custom-fingerprint
+    values:
+    - <no-type>
+    - <no-module>
+    - main
diff --git a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_package.pysnap b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_package.pysnap
new file mode 100644
index 0000000000..5ca5e2341a
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_package.pysnap
@@ -0,0 +1,20 @@
+---
+created: '2019-08-05T12:11:53.473003Z'
+creator: sentry
+source: tests/sentry/grouping/test_fingerprinting.py
+---
+config:
+  rules:
+  - fingerprint:
+    - '{{ package }}'
+    matchers:
+    - - type
+      - DatabaseUnavailable
+  version: 1
+fingerprint:
+- '{{ package }}'
+variants:
+  custom-fingerprint:
+    type: custom-fingerprint
+    values:
+    - foo.dylib
diff --git a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_python.pysnap b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_python.pysnap
index 1ee7305e69..1f258af9f2 100644
--- a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_python.pysnap
+++ b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_python.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-04-08T10:31:31.548578Z'
+created: '2019-07-23T21:55:26.032853Z'
 creator: sentry
 source: tests/sentry/grouping/test_fingerprinting.py
 ---
@@ -15,3 +15,8 @@ config:
   version: 1
 fingerprint:
 - timeout-in-requests
+variants:
+  custom-fingerprint:
+    type: custom-fingerprint
+    values:
+    - timeout-in-requests
diff --git a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_transaction.pysnap b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_transaction.pysnap
new file mode 100644
index 0000000000..7b77f637e7
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_transaction.pysnap
@@ -0,0 +1,25 @@
+---
+created: '2019-07-23T22:00:33.106276Z'
+creator: sentry
+source: tests/sentry/grouping/test_fingerprinting.py
+---
+config:
+  rules:
+  - fingerprint:
+    - database-unavailable
+    - '{{ transaction }}'
+    matchers:
+    - - type
+      - DatabaseUnavailable
+    - - module
+      - io.sentry.example.*
+  version: 1
+fingerprint:
+- database-unavailable
+- '{{ transaction }}'
+variants:
+  custom-fingerprint:
+    type: custom-fingerprint
+    values:
+    - database-unavailable
+    - my-transaction
diff --git a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_type_module.pysnap b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_type_module.pysnap
new file mode 100644
index 0000000000..85997b4520
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_type_module.pysnap
@@ -0,0 +1,25 @@
+---
+created: '2019-08-05T10:24:07.792310Z'
+creator: sentry
+source: tests/sentry/grouping/test_fingerprinting.py
+---
+config:
+  rules:
+  - fingerprint:
+    - '{{ type }}'
+    - '{{ module }}'
+    matchers:
+    - - type
+      - DatabaseUnavailable
+    - - module
+      - io.sentry.example.*
+  version: 1
+fingerprint:
+- '{{ type }}'
+- '{{ module }}'
+variants:
+  custom-fingerprint:
+    type: custom-fingerprint
+    values:
+    - DatabaseUnavailable
+    - io.sentry.example.Application
diff --git a/tests/sentry/grouping/test_fingerprinting.py b/tests/sentry/grouping/test_fingerprinting.py
index abb1097bc7..1f7d1bab43 100644
--- a/tests/sentry/grouping/test_fingerprinting.py
+++ b/tests/sentry/grouping/test_fingerprinting.py
@@ -6,6 +6,7 @@ import os
 import json
 import pytest
 
+from sentry.models import Event
 from sentry.event_manager import EventManager
 from sentry.grouping.api import apply_server_fingerprinting
 from sentry.grouping.fingerprinting import FingerprintingRules
@@ -17,6 +18,7 @@ def test_basic_parsing(insta_snapshot):
 type:DatabaseUnavailable                        -> DatabaseUnavailable
 function:assertion_failed module:foo            -> AssertionFailed, foo
 app:true                                        -> aha
+app:true                                        -> {{ default }}
 ''')
     assert rules._to_config_structure() == {
         'rules': [
@@ -27,6 +29,8 @@ app:true                                        -> aha
              'fingerprint': ['AssertionFailed', 'foo']},
             {'matchers': [['app', 'true']],
              'fingerprint': ['aha']},
+            {'matchers': [['app', 'true']],
+             'fingerprint': ['{{ default }}']},
         ],
         'version': 1
     }
@@ -66,7 +70,17 @@ def test_event_hash_variant(insta_snapshot, testcase):
     data.setdefault('fingerprint', ['{{ default }}'])
     apply_server_fingerprinting(data, config)
 
+    evt = Event(data=data, platform=data['platform'])
+
+    def dump_variant(v):
+        rv = v.as_dict()
+        for key in 'component', 'description', 'hash', 'config':
+            rv.pop(key, None)
+        return rv
+
     insta_snapshot({
         'config': config.to_json(),
         'fingerprint': data['fingerprint'],
+        'variants': {k: dump_variant(v)
+                     for (k, v) in evt.get_grouping_variants().items()},
     })
