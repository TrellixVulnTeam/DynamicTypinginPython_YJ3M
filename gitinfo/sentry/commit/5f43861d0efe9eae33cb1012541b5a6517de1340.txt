commit 5f43861d0efe9eae33cb1012541b5a6517de1340
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Jan 4 13:50:57 2019 -0800

    feat(discover): Add option to `getChartDataByDay` to assume `null` values as `0` (#11326)
    
    Depends on https://github.com/getsentry/sentry/pull/11324

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
index 9867816a0b..15a13a8355 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
@@ -48,6 +48,7 @@ export function getChartData(data, query, options = {}) {
  * @param {Object} query Query state corresponding to data
  * @param {Object} [options] Options object
  * @param {Boolean} [options.useTimestamps] (default: false) Return raw timestamps instead of formatting dates
+ * @param {Boolean} [options.assumeNullAsZero] (default: false) Assume null values as 0
  * @param {Boolean} [options.allSeries] (default: false) Return all series instead of top 10
  * @returns {Array}
  */
@@ -71,7 +72,7 @@ export function getChartDataByDay(rawData, query, options = {}) {
   ].reverse();
 
   // Temporarily store series as object with series names as keys
-  const seriesHash = getEmptySeriesHash(top10Series, dates);
+  const seriesHash = getEmptySeriesHash(top10Series, dates, options);
 
   // Insert data into series if it's in a top 10 series
   data.forEach(row => {
@@ -80,7 +81,8 @@ export function getChartDataByDay(rawData, query, options = {}) {
     const dateIdx = dates.indexOf(formatDate(row.time, !options.useTimestamps));
 
     if (top10Series.has(key)) {
-      seriesHash[key][dateIdx].value = row[aggregate];
+      seriesHash[key][dateIdx].value =
+        options.assumeNullAsZero && row[aggregate] === null ? 0 : row[aggregate];
     }
   });
 
@@ -113,20 +115,20 @@ export function getRowsPageRange(baseQuery) {
 
 // Return placeholder empty series object with all series and dates listed and
 // all values set to null
-function getEmptySeriesHash(seriesSet, dates) {
+function getEmptySeriesHash(seriesSet, dates, options = {}) {
   const output = {};
 
   [...seriesSet].forEach(series => {
-    output[series] = getEmptySeries(dates);
+    output[series] = getEmptySeries(dates, options);
   });
 
   return output;
 }
 
-function getEmptySeries(dates) {
+function getEmptySeries(dates, options) {
   return dates.map(date => {
     return {
-      value: null,
+      value: options.assumeNullAsZero ? 0 : null,
       name: date,
     };
   });
diff --git a/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
index a9f776b6ab..1c654b56bd 100644
--- a/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
@@ -231,6 +231,44 @@ describe('Utils', function() {
       expect(getChartDataByDay(raw, query, {useTimestamps: true})).toEqual(expected);
     });
 
+    it('assumes null value as 0', function() {
+      const expected = [
+        {
+          data: [
+            {name: 'Jul 9th', value: 14},
+            {name: 'Jul 10th', value: 0},
+            {name: 'Jul 20th', value: 30},
+          ],
+          seriesName: 'python,SnubaError',
+        },
+        {
+          data: [
+            {name: 'Jul 9th', value: 6},
+            {name: 'Jul 10th', value: 0},
+            {name: 'Jul 20th', value: 8},
+          ],
+          seriesName: 'php,Exception',
+        },
+        {
+          data: [
+            {name: 'Jul 9th', value: 6},
+            {name: 'Jul 10th', value: 0},
+            {name: 'Jul 20th', value: 5},
+          ],
+          seriesName: 'javascript,Type Error',
+        },
+        {
+          data: [
+            {name: 'Jul 9th', value: 6},
+            {name: 'Jul 10th', value: 20},
+            {name: 'Jul 20th', value: 0},
+          ],
+          seriesName: 'python,ZeroDivisionError',
+        },
+      ];
+      expect(getChartDataByDay(raw, query, {assumeNullAsZero: true})).toEqual(expected);
+    });
+
     it('shows only top 10 series by default', function() {
       expect(
         getChartDataByDay(
