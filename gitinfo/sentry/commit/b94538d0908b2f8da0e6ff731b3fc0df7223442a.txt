commit b94538d0908b2f8da0e6ff731b3fc0df7223442a
Author: jeffkwoh <23180853+jeffkwoh@users.noreply.github.com>
Date:   Mon Feb 24 16:36:25 2020 -0800

    feat(mail): Add framework for target types to `MailAdapter`
    
    This introduces `ActionTargetType` to `MailAdapter` and introduces a framework for handling
    different target types. At the moment only `ISSUE_OWNERS` (existing behaviour) is implemented.
    
    This extracts some of the logic from https://github.com/getsentry/sentry/pull/17571. Will continue
    to extract logic from here in follow up prs.

diff --git a/src/sentry/mail/adapter.py b/src/sentry/mail/adapter.py
index ce0d66846a..8b8e987e98 100644
--- a/src/sentry/mail/adapter.py
+++ b/src/sentry/mail/adapter.py
@@ -7,6 +7,7 @@ import six
 from django.utils import dateformat
 from django.utils.encoding import force_text
 from django.utils.safestring import mark_safe
+from enum import Enum
 
 from sentry import digests, options
 from sentry.digests import get_option_key as get_digest_option_key
@@ -24,6 +25,12 @@ from sentry.utils.linksign import generate_signed_link
 logger = logging.getLogger(__name__)
 
 
+class ActionTargetType(Enum):
+    ISSUE_OWNERS = "IssueOwners"
+    TEAM = "Team"
+    MEMBER = "Member"
+
+
 class MailAdapter(object):
     """
     This class contains generic logic for notifying users via Email. Short term we'll
@@ -39,9 +46,13 @@ class MailAdapter(object):
     mail_option_key = "mail:subject_prefix"
     alert_option_key = "mail:alert"
 
-    def rule_notify(self, event, futures):
+    def rule_notify(self, event, futures, target_type, target_identifier=None):
         rules = []
-        extra = {"event_id": event.event_id, "group_id": event.group_id, "plugin": "mail"}
+        extra = {
+            "event_id": event.event_id,
+            "group_id": event.group_id,
+            "is_from_mail_action_adapter": True,
+        }
         log_event = "dispatched"
         for future in futures:
             rules.append(future.rule)
@@ -74,9 +85,9 @@ class MailAdapter(object):
 
         else:
             notification = Notification(event=event, rules=rules)
-            self.notify(notification)
+            self.notify(notification, target_type, target_identifier)
 
-        logger.info("mail.notification.%s" % log_event, extra=extra)
+        logger.info("mail.adapter.notification.%s" % log_event, extra=extra)
 
     def _build_subject_prefix(self, project):
         subject_prefix = ProjectOption.objects.get_value(project, self.mail_option_key, None)
@@ -98,8 +109,6 @@ class MailAdapter(object):
         send_to=None,
         type=None,
     ):
-        if send_to is None:
-            send_to = self.get_send_to(project)
         if not send_to:
             logger.debug("Skipping message rendering, no users to send to.")
             return
@@ -140,62 +149,82 @@ class MailAdapter(object):
 
         return group.is_unresolved()
 
-    def get_send_to(self, project, event=None):
+    def get_send_to(self, project, target_type, target_identifier=None, event=None):
         """
         Returns a list of user IDs for the users that should receive
         notifications for the provided project.
-
         This result may come from cached data.
         """
         if not (project and project.teams.exists()):
             logger.debug("Tried to send notification to invalid project: %r", project)
-            return []
-
-        if event:
-            owners, _ = ProjectOwnership.get_owners(project.id, event.data)
-            if owners != ProjectOwnership.Everyone:
-                if not owners:
-                    metrics.incr(
-                        "features.owners.send_to",
-                        tags={"organization": project.organization_id, "outcome": "empty"},
-                        skip_internal=True,
-                    )
-                    return []
+            return set()
 
-                metrics.incr(
-                    "features.owners.send_to",
-                    tags={"organization": project.organization_id, "outcome": "match"},
-                    skip_internal=True,
-                )
-                send_to_list = set()
-                teams_to_resolve = set()
-                for owner in owners:
-                    if owner.type == User:
-                        send_to_list.add(owner.id)
-                    else:
-                        teams_to_resolve.add(owner.id)
-
-                # get all users in teams
-                if teams_to_resolve:
-                    send_to_list |= set(
-                        User.objects.filter(
-                            is_active=True,
-                            sentry_orgmember_set__organizationmemberteam__team__id__in=teams_to_resolve,
-                        ).values_list("id", flat=True)
-                    )
-
-                alert_settings = project.get_member_alert_settings(self.alert_option_key)
-                disabled_users = set(
-                    user for user, setting in alert_settings.items() if setting == 0
-                )
-                return send_to_list - disabled_users
+        send_to = []
+        if target_type == ActionTargetType.ISSUE_OWNERS:
+            if not event:
+                send_to = self.get_send_to_all_in_project(project)
             else:
+                send_to = self.get_send_to_owners(event, project)
+        elif target_type == ActionTargetType.MEMBER:
+            send_to = self.get_send_to_member(target_identifier)
+        elif target_type == ActionTargetType.TEAM:
+            send_to = self.get_send_to_team(project, target_identifier)
+        return set(send_to)
+
+    def get_send_to_owners(self, event, project):
+        owners, _ = ProjectOwnership.get_owners(project.id, event.data)
+        if owners != ProjectOwnership.Everyone:
+            if not owners:
                 metrics.incr(
                     "features.owners.send_to",
-                    tags={"organization": project.organization_id, "outcome": "everyone"},
+                    tags={"organization": project.organization_id, "outcome": "empty"},
                     skip_internal=True,
                 )
+                return set()
+
+            metrics.incr(
+                "features.owners.send_to",
+                tags={"organization": project.organization_id, "outcome": "match"},
+                skip_internal=True,
+            )
+            send_to = set()
+            teams_to_resolve = set()
+            for owner in owners:
+                if owner.type == User:
+                    send_to.add(owner.id)
+                else:
+                    teams_to_resolve.add(owner.id)
+
+            # get all users in teams
+            if teams_to_resolve:
+                send_to |= set(
+                    User.objects.filter(
+                        is_active=True,
+                        sentry_orgmember_set__organizationmemberteam__team__id__in=teams_to_resolve,
+                    ).values_list("id", flat=True)
+                )
+
+            return send_to - self.disabled_users_from_project(project)
+        else:
+            metrics.incr(
+                "features.owners.send_to",
+                tags={"organization": project.organization_id, "outcome": "everyone"},
+                skip_internal=True,
+            )
+            return self.get_send_to_all_in_project(project)
+
+    def disabled_users_from_project(self, project):
+        alert_settings = project.get_member_alert_settings(self.alert_option_key)
+        disabled_users = set(user for user, setting in alert_settings.items() if setting == 0)
+        return disabled_users
+
+    def get_send_to_team(self, project, target_identifier):
+        raise NotImplementedError()
+
+    def get_send_to_member(self, target_identifier):
+        raise NotImplementedError()
 
+    def get_send_to_all_in_project(self, project):
         cache_key = "mail:send_to:{}".format(project.pk)
         send_to_list = cache.get(cache_key)
         if send_to_list is None:
@@ -212,7 +241,7 @@ class MailAdapter(object):
             kwargs={"project_id": project.id},
         )
 
-    def notify(self, notification, **kwargs):
+    def notify(self, notification, target_type, target_identifier=None, **kwargs):
         event = notification.event
 
         environment = event.get_tag("environment")
@@ -292,7 +321,12 @@ class MailAdapter(object):
             "X-Sentry-Reply-To": group_id_to_email(group.id),
         }
 
-        for user_id in self.get_send_to(project=project, event=event):
+        for user_id in self.get_send_to(
+            project=project,
+            target_type=target_type,
+            target_identifier=target_identifier,
+            event=event,
+        ):
             self.add_unsubscribe_link(context, user_id, project, "alert_email")
 
             self._send_mail(
@@ -315,8 +349,8 @@ class MailAdapter(object):
             date=dateformat.format(date, "N j, Y, P e"),
         )
 
-    def notify_digest(self, project, digest):
-        user_ids = self.get_send_to(project)
+    def notify_digest(self, project, digest, target_type, target_identifier=None):
+        user_ids = self.get_send_to(project, target_type, target_identifier)
         for user_id, digest in get_personalized_digests(project.id, digest, user_ids):
             start, end, counts = get_digest_metadata(digest)
 
@@ -333,7 +367,7 @@ class MailAdapter(object):
                     key=lambda record: record.timestamp,
                 )
                 notification = Notification(record.value.event, rules=record.value.rules)
-                return self.notify(notification)
+                return self.notify(notification, target_type, target_identifier)
 
             context = {
                 "start": start,
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 16cb0473cc..46cca75242 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -6,7 +6,7 @@ import sentry
 
 from django.utils.encoding import force_text
 
-from sentry.mail.adapter import MailAdapter
+from sentry.mail.adapter import MailAdapter, ActionTargetType
 from sentry.plugins.bases.notify import NotificationPlugin
 from sentry.utils.email import MessageBuilder
 from sentry.utils.http import absolute_uri
@@ -29,7 +29,9 @@ class MailPlugin(NotificationPlugin):
     mail_adapter = MailAdapter()
 
     def rule_notify(self, event, futures):
-        return self.mail_adapter.rule_notify(event, futures)
+        return self.mail_adapter.rule_notify(
+            event, futures, target_type=ActionTargetType.ISSUE_OWNERS
+        )
 
     def get_project_url(self, project):
         return absolute_uri(u"/{}/{}/".format(project.organization.slug, project.slug))
@@ -42,10 +44,14 @@ class MailPlugin(NotificationPlugin):
         return self.mail_adapter.should_notify(group)
 
     def notify(self, notification, **kwargs):
-        return self.mail_adapter.notify(notification, **kwargs)
+        return self.mail_adapter.notify(
+            notification, target_type=ActionTargetType.ISSUE_OWNERS, **kwargs
+        )
 
     def notify_digest(self, project, digest):
-        return self.mail_adapter.notify_digest(project, digest)
+        return self.mail_adapter.notify_digest(
+            project, digest, target_type=ActionTargetType.ISSUE_OWNERS
+        )
 
     def notify_about_activity(self, activity):
         email_cls = emails.get(activity.type)
diff --git a/tests/sentry/mail/test_adapter.py b/tests/sentry/mail/test_adapter.py
index 4e310d4f7e..8ac137393b 100644
--- a/tests/sentry/mail/test_adapter.py
+++ b/tests/sentry/mail/test_adapter.py
@@ -12,7 +12,7 @@ from exam import fixture
 
 from sentry.digests.notifications import build_digest, event_to_record
 from sentry.event_manager import EventManager, get_event_type
-from sentry.mail.adapter import MailAdapter
+from sentry.mail.adapter import MailAdapter, ActionTargetType
 from sentry.models import (
     GroupStatus,
     OrganizationMember,
@@ -87,41 +87,49 @@ class MailAdapterGetSendToTest(BaseMailAdapterTest, TestCase):
     def test_get_send_to_with_team_owners(self):
         event = self.store_event(data=self.make_event_data("foo.py"), project_id=self.project.id)
         assert sorted(set([self.user.pk, self.user2.pk])) == sorted(
-            self.adapter.get_send_to(self.project, event.data)
+            self.adapter.get_send_to(self.project, ActionTargetType.ISSUE_OWNERS, event=event.data)
         )
 
         # Make sure that disabling mail alerts works as expected
         UserOption.objects.set_value(
             user=self.user2, key="mail:alert", value=0, project=self.project
         )
-        assert set([self.user.pk]) == self.adapter.get_send_to(self.project, event.data)
+        assert set([self.user.pk]) == self.adapter.get_send_to(
+            self.project, ActionTargetType.ISSUE_OWNERS, event=event.data
+        )
 
     def test_get_send_to_with_user_owners(self):
         event = self.store_event(data=self.make_event_data("foo.cbl"), project_id=self.project.id)
         assert sorted(set([self.user.pk, self.user2.pk])) == sorted(
-            self.adapter.get_send_to(self.project, event.data)
+            self.adapter.get_send_to(self.project, ActionTargetType.ISSUE_OWNERS, event=event.data)
         )
 
         # Make sure that disabling mail alerts works as expected
         UserOption.objects.set_value(
             user=self.user2, key="mail:alert", value=0, project=self.project
         )
-        assert set([self.user.pk]) == self.adapter.get_send_to(self.project, event.data)
+        assert set([self.user.pk]) == self.adapter.get_send_to(
+            self.project, ActionTargetType.ISSUE_OWNERS, event=event.data
+        )
 
     def test_get_send_to_with_user_owner(self):
         event = self.store_event(data=self.make_event_data("foo.jx"), project_id=self.project.id)
-        assert set([self.user2.pk]) == self.adapter.get_send_to(self.project, event.data)
+        assert set([self.user2.pk]) == self.adapter.get_send_to(
+            self.project, ActionTargetType.ISSUE_OWNERS, event=event.data
+        )
 
     def test_get_send_to_with_fallthrough(self):
         event = self.store_event(data=self.make_event_data("foo.cpp"), project_id=self.project.id)
         assert set([self.user.pk, self.user2.pk]) == set(
-            self.adapter.get_send_to(self.project, event.data)
+            self.adapter.get_send_to(self.project, ActionTargetType.ISSUE_OWNERS, event=event.data)
         )
 
     def test_get_send_to_without_fallthrough(self):
         ProjectOwnership.objects.get(project_id=self.project.id).update(fallthrough=False)
         event = self.store_event(data=self.make_event_data("foo.cpp"), project_id=self.project.id)
-        assert [] == self.adapter.get_send_to(self.project, event.data)
+        assert set([]) == self.adapter.get_send_to(
+            self.project, ActionTargetType.ISSUE_OWNERS, event=event.data
+        )
 
 
 class MailAdapterGetSendableUsersTest(BaseMailAdapterTest, TestCase):
@@ -188,9 +196,7 @@ class MailAdapterBuildSubjectPrefixTest(BaseMailAdapterTest, TestCase):
 class MailAdapterBuildMessageTest(BaseMailAdapterTest, TestCase):
     def test(self):
         subject = "hello"
-        msg = self.adapter._build_message(self.project, subject)
-        assert msg._send_to == set([self.user.email])
-        assert msg.subject.endswith(subject)
+        assert self.adapter._build_message(self.project, subject) is None
 
     def test_specify_send_to(self):
         subject = "hello"
@@ -204,7 +210,7 @@ class MailAdapterSendMailTest(BaseMailAdapterTest, TestCase):
     def test(self):
         subject = "hello"
         with self.tasks():
-            self.adapter._send_mail(self.project, subject, body="hi")
+            self.adapter._send_mail(self.project, subject, body="hi", send_to=[self.user.id])
             msg = mail.outbox[0]
             assert msg.subject.endswith(subject)
             assert msg.recipients() == [self.user.email]
@@ -221,7 +227,7 @@ class MailAdapterNotifyTest(BaseMailAdapterTest, TestCase):
         notification = Notification(event=event, rule=rule)
 
         with self.options({"system.url-prefix": "http://example.com"}), self.tasks():
-            self.adapter.notify(notification)
+            self.adapter.notify(notification, ActionTargetType.ISSUE_OWNERS)
 
         msg = mail.outbox[0]
         assert msg.subject == "[Sentry] BAR-1 - Hello world"
@@ -241,7 +247,7 @@ class MailAdapterNotifyTest(BaseMailAdapterTest, TestCase):
         notification = Notification(event=event)
 
         with self.options({"system.url-prefix": "http://example.com"}):
-            self.adapter.notify(notification)
+            self.adapter.notify(notification, ActionTargetType.ISSUE_OWNERS)
 
         _get_title.assert_called_once_with()
         _to_email_html.assert_called_once_with(event)
@@ -261,7 +267,7 @@ class MailAdapterNotifyTest(BaseMailAdapterTest, TestCase):
         notification = Notification(event=event)
 
         with self.options({"system.url-prefix": "http://example.com"}):
-            self.adapter.notify(notification)
+            self.adapter.notify(notification, ActionTargetType.ISSUE_OWNERS)
 
         assert _send_mail.call_count == 1
         args, kwargs = _send_mail.call_args
@@ -283,7 +289,7 @@ class MailAdapterNotifyTest(BaseMailAdapterTest, TestCase):
         notification = Notification(event=event)
 
         with self.options({"system.url-prefix": "http://example.com"}):
-            self.adapter.notify(notification)
+            self.adapter.notify(notification, ActionTargetType.ISSUE_OWNERS)
 
         assert _send_mail.call_count == 1
         args, kwargs = _send_mail.call_args
@@ -297,7 +303,7 @@ class MailAdapterNotifyTest(BaseMailAdapterTest, TestCase):
         notification = Notification(event=event)
 
         with self.options({"system.url-prefix": "http://example.com"}), self.tasks():
-            self.adapter.notify(notification)
+            self.adapter.notify(notification, ActionTargetType.ISSUE_OWNERS)
 
         assert len(mail.outbox) == 1
         msg = mail.outbox[0]
@@ -354,7 +360,7 @@ class MailAdapterNotifyTest(BaseMailAdapterTest, TestCase):
         with self.tasks():
             notification = Notification(event=event)
 
-            self.adapter.notify(notification)
+            self.adapter.notify(notification, ActionTargetType.ISSUE_OWNERS)
 
         assert len(mail.outbox) >= 1
 
@@ -365,7 +371,7 @@ class MailAdapterNotifyTest(BaseMailAdapterTest, TestCase):
     def assert_notify(self, event, emails_sent_to):
         mail.outbox = []
         with self.options({"system.url-prefix": "http://example.com"}), self.tasks():
-            self.adapter.notify(Notification(event=event))
+            self.adapter.notify(Notification(event=event), ActionTargetType.ISSUE_OWNERS)
         assert len(mail.outbox) == len(emails_sent_to)
         assert sorted(email.to[0] for email in mail.outbox) == sorted(emails_sent_to)
 
@@ -455,7 +461,7 @@ class MailAdapterNotifyDigestTest(BaseMailAdapterTest, TestCase):
         )
 
         with self.tasks():
-            self.adapter.notify_digest(project, digest)
+            self.adapter.notify_digest(project, digest, ActionTargetType.ISSUE_OWNERS)
 
         assert notify.call_count == 0
         assert len(mail.outbox) == 1
@@ -469,7 +475,7 @@ class MailAdapterNotifyDigestTest(BaseMailAdapterTest, TestCase):
         event = self.store_event(data={}, project_id=self.project.id)
         rule = self.project.rule_set.all()[0]
         digest = build_digest(self.project, (event_to_record(event, (rule,)),))
-        self.adapter.notify_digest(self.project, digest)
+        self.adapter.notify_digest(self.project, digest, ActionTargetType.ISSUE_OWNERS)
         assert send_async.call_count == 1
         assert notify.call_count == 1
 
@@ -493,7 +499,7 @@ class MailAdapterNotifyDigestTest(BaseMailAdapterTest, TestCase):
         )
 
         with self.tasks():
-            self.adapter.notify_digest(self.project, digest)
+            self.adapter.notify_digest(self.project, digest, ActionTargetType.ISSUE_OWNERS)
 
         assert len(mail.outbox) == 1
 
@@ -508,7 +514,7 @@ class MailAdapterRuleNotifyTest(BaseMailAdapterTest, TestCase):
         rule = Rule.objects.create(project=self.project, label="my rule")
         futures = [RuleFuture(rule, {})]
         with mock.patch.object(self.adapter, "notify") as notify:
-            self.adapter.rule_notify(event, futures)
+            self.adapter.rule_notify(event, futures, ActionTargetType.ISSUE_OWNERS)
             notify.call_count == 1
 
     @mock.patch("sentry.mail.adapter.digests")
@@ -519,7 +525,7 @@ class MailAdapterRuleNotifyTest(BaseMailAdapterTest, TestCase):
         rule = Rule.objects.create(project=self.project, label="my rule")
 
         futures = [RuleFuture(rule, {})]
-        self.adapter.rule_notify(event, futures)
+        self.adapter.rule_notify(event, futures, ActionTargetType.ISSUE_OWNERS)
         digests.add.call_count == 1
 
 
