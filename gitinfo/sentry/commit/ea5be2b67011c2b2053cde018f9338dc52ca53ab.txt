commit ea5be2b67011c2b2053cde018f9338dc52ca53ab
Author: Mark Story <mark@mark-story.com>
Date:   Thu Sep 27 15:05:55 2018 +0000

    fix(search) Handle invalid numeric values in query (#9896)
    
    Numeric fields should not raise 500 errors when non-numeric values are
    provided.
    
    Fixes SENTRY-6J2

diff --git a/src/sentry/search/utils.py b/src/sentry/search/utils.py
index cbf3adf09b..60b0c89cfe 100644
--- a/src/sentry/search/utils.py
+++ b/src/sentry/search/utils.py
@@ -234,16 +234,20 @@ numeric_modifiers = [
 
 
 def get_numeric_field_value(field, raw_value, type=int):
-    for modifier, function in numeric_modifiers:
-        if raw_value.startswith(modifier):
-            return function(
-                field,
-                type(raw_value[len(modifier):]),
-            )
-    else:
-        return {
-            field: type(raw_value),
-        }
+    try:
+        for modifier, function in numeric_modifiers:
+            if raw_value.startswith(modifier):
+                return function(
+                    field,
+                    type(raw_value[len(modifier):]),
+                )
+        else:
+            return {
+                field: type(raw_value),
+            }
+    except ValueError:
+        msg = u'"{}" could not be converted to a number.'.format(raw_value)
+        raise InvalidQuery(msg)
 
 
 def tokenize_query(query):
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index fe2e57087b..bff511ffcb 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -54,6 +54,21 @@ class GroupListTest(APITestCase):
         assert len(response.data) == 1
         assert response.data[0]['id'] == six.text_type(group1.id)
 
+    def test_invalid_query(self):
+        now = timezone.now()
+        self.create_group(
+            checksum='a' * 32,
+            last_seen=now - timedelta(seconds=1),
+        )
+        self.login_as(user=self.user)
+
+        response = self.client.get(
+            u'{}?sort_by=date&query=timesSeen:>1k'.format(self.path),
+            format='json',
+        )
+        assert response.status_code == 400
+        assert 'could not' in response.data['detail']
+
     def test_simple_pagination(self):
         now = timezone.now().replace(microsecond=0)
         group1 = self.create_group(
@@ -64,10 +79,6 @@ class GroupListTest(APITestCase):
             checksum='b' * 32,
             last_seen=now,
         )
-        # group3 = self.create_group(
-        #     checksum='c' * 32,
-        #     last_seen=now - timedelta(seconds=1),
-        # )
 
         self.login_as(user=self.user)
         response = self.client.get(
diff --git a/tests/sentry/search/test_utils.py b/tests/sentry/search/test_utils.py
index d92b6ccf8e..615260c6cd 100644
--- a/tests/sentry/search/test_utils.py
+++ b/tests/sentry/search/test_utils.py
@@ -8,7 +8,11 @@ from django.utils import timezone
 from sentry.models import EventUser, GroupStatus, Team, User
 from sentry.testutils import TestCase
 from sentry.search.base import ANY
-from sentry.search.utils import parse_query, get_numeric_field_value
+from sentry.search.utils import (
+    parse_query,
+    get_numeric_field_value,
+    InvalidQuery
+)
 
 
 def test_get_numeric_field_value():
@@ -51,6 +55,11 @@ def test_get_numeric_field_value():
     }
 
 
+def test_get_numeric_field_value_invalid():
+    with pytest.raises(InvalidQuery):
+        get_numeric_field_value('foo', '>=1k')
+
+
 class ParseQueryTest(TestCase):
     def parse_query(self, query):
         return parse_query(self.project, query, self.user)
