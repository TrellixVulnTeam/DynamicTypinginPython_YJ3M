commit 86b5ccee8c4d7e3e5a21df5ccccb905df1d881b4
Author: Dan Fuller <dfuller@sentry.io>
Date:   Wed Apr 15 15:27:23 2020 -0700

    feat(mail): Only notify in `MailPlugin` if a project hasn't migrated to IAT.
    
    Once we've migrated we'll have split "Send to all legacy integrations" actions into "Send Mail To
    Owners" and "Send to all legacy integrations". To prevent double sending here, we disable notifying
    via the mail plugin once the migration is finished for a project.

diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 46cca75242..223e0a03df 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -41,7 +41,10 @@ class MailPlugin(NotificationPlugin):
         return True
 
     def should_notify(self, group, event):
-        return self.mail_adapter.should_notify(group)
+        return (
+            not group.project.flags.has_issue_alerts_targeting
+            and self.mail_adapter.should_notify(group)
+        )
 
     def notify(self, notification, **kwargs):
         return self.mail_adapter.notify(
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 4294263c94..f530c1a756 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -47,10 +47,6 @@ class MailPluginTest(TestCase):
     def plugin(self):
         return MailPlugin()
 
-    @mock.patch("sentry.mail.adapter.MailAdapter.get_sendable_users", Mock(return_value=[]))
-    def test_should_notify_no_sendable_users(self):
-        assert not self.plugin.should_notify(group=Mock(), event=Mock())
-
     def test_simple_notification(self):
         event = self.store_event(
             data={"message": "Hello world", "level": "error"}, project_id=self.project.id
@@ -632,3 +628,33 @@ class TestCanConfigureForProject(TestCase):
     def test_has_alerts_targeting(self):
         self.project.flags.has_issue_alerts_targeting = True
         assert not self.plugin.can_configure_for_project(self.project)
+
+
+class MailPluginShouldNotifyTest(TestCase):
+    @fixture
+    def plugin(self):
+        return MailPlugin()
+
+    @mock.patch("sentry.mail.adapter.MailAdapter.get_sendable_users", Mock(return_value=[]))
+    def test_should_notify_no_sendable_users_has_issue_alerts_targeting(self):
+        self.group.project.flags.has_issue_alerts_targeting = True
+        self.group.project.save()
+        assert not self.plugin.should_notify(group=self.group, event=Mock())
+
+    @mock.patch("sentry.mail.adapter.MailAdapter.get_sendable_users", Mock(return_value=[]))
+    def test_should_notify_no_sendable_users_not_has_issue_alerts_targeting(self):
+        self.group.project.flags.has_issue_alerts_targeting = False
+        self.group.project.save()
+        assert not self.plugin.should_notify(group=self.group, event=Mock())
+
+    @mock.patch("sentry.mail.adapter.MailAdapter.get_sendable_users", Mock(return_value=[1]))
+    def test_should_notify_sendable_users_has_issue_alerts_targetting(self):
+        self.group.project.flags.has_issue_alerts_targeting = True
+        self.group.project.save()
+        assert not self.plugin.should_notify(group=self.group, event=Mock())
+
+    @mock.patch("sentry.mail.adapter.MailAdapter.get_sendable_users", Mock(return_value=[1]))
+    def test_should_notify_sendable_users_not_has_issue_alerts_targetting(self):
+        self.group.project.flags.has_issue_alerts_targeting = False
+        self.group.project.save()
+        assert self.plugin.should_notify(group=self.group, event=Mock())
