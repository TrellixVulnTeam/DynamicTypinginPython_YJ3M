commit 85f3d8c7bab42491e620ddb664b6b4d77732d245
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Nov 16 16:00:21 2015 -0800

    Mockup of Rate Limits UI

diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index 4b62739535..bd156db200 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -13,8 +13,7 @@ from sentry.api.serializers.models.organization import (
     DetailedOrganizationSerializer
 )
 from sentry.models import (
-    AuditLogEntryEvent, Organization,
-    OrganizationStatus
+    AuditLogEntryEvent, Organization, OrganizationOption, OrganizationStatus
 )
 from sentry.tasks.deletion import delete_organization
 from sentry.utils.apidocs import scenario, attach_scenarios
@@ -47,6 +46,8 @@ def update_organization_scenario(runner):
 
 
 class OrganizationSerializer(serializers.ModelSerializer):
+    projectRateLimit = serializers.IntegerField(min_value=1, max_value=100)
+
     class Meta:
         model = Organization
         fields = ('name', 'slug')
@@ -57,6 +58,18 @@ class OrganizationSerializer(serializers.ModelSerializer):
             raise serializers.ValidationError('The slug "%s" is already in use.' % (value,))
         return attrs
 
+    def save(self):
+        rv = super(OrganizationSerializer, self).save()
+        # XXX(dcramer): this seems wrong, but cant find documentation on how to
+        # actually access this data
+        if 'projectRateLimit' in self.init_data:
+            OrganizationOption.objects.set_value(
+                organization=self.object,
+                key='sentry:project-rate-limit',
+                value=self.init_data['projectRateLimit'],
+            )
+        return rv
+
 
 class OrganizationDetailsEndpoint(OrganizationEndpoint):
     doc_section = DocSection.ORGANIZATIONS
@@ -82,7 +95,6 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
         return Response(context)
 
     @attach_scenarios([update_organization_scenario])
-    @sudo_required
     def put(self, request, organization):
         """
         Update an Organization
@@ -111,7 +123,11 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
                 data=organization.get_audit_log_data(),
             )
 
-            return Response(serialize(organization, request.user))
+            return Response(serialize(
+                organization,
+                request.user,
+                DetailedOrganizationSerializer(),
+            ))
 
         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index 94db021db5..c1d9b53bb2 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -1,9 +1,11 @@
 from __future__ import absolute_import
 
+from sentry.app import quotas
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.auth import access
 from sentry.models import (
-    Organization, OrganizationAccessRequest, Team, TeamStatus
+    Organization, OrganizationAccessRequest, OrganizationOption, Team,
+    TeamStatus
 )
 
 
@@ -38,6 +40,14 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
 
         context = super(DetailedOrganizationSerializer, self).serialize(
             obj, attrs, user)
+        context['quota'] = {
+            'maxRate': quotas.get_organization_quota(obj),
+            'projectLimit': int(OrganizationOption.objects.get_value(
+                organization=obj,
+                key='sentry:project-rate-limit',
+                default=100,
+            )),
+        }
         context['teams'] = serialize(
             team_list, user, TeamWithProjectsSerializer())
         if env.request:
diff --git a/src/sentry/quotas/base.py b/src/sentry/quotas/base.py
index 842fac1c2c..d309a7bbc0 100644
--- a/src/sentry/quotas/base.py
+++ b/src/sentry/quotas/base.py
@@ -62,6 +62,18 @@ class Quota(object):
         )
 
     def get_team_quota(self, team):
+        from sentry.models import Organization
+
+        org = getattr(team, '_organization_cache', None)
+        if not org:
+            org = Organization.objects.get_from_cache(id=team.organization_id)
+
+        return self.translate_quota(
+            settings.SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE,
+            self.get_organization_quota(org)
+        )
+
+    def get_organization_quota(self, organization):
         return self.translate_quota(
             settings.SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE,
             self.get_system_quota()
diff --git a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
index 111f874689..15d05faa10 100644
--- a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
@@ -54,6 +54,7 @@ const HomeSidebar = React.createClass({
               {access.has('org:write') &&
                 <li><a href={urlPrefix + '/audit-log/'}>{t('Audit Log')}</a></li>
               }
+              <ListLink to={`/organizations/${orgId}/rate-limits/`}>Rate Limits</ListLink>
               {access.has('org:write') &&
                 <li><a href={urlPrefix + '/settings/'}>{t('Settings')}</a></li>
               }
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 71d2b033fd..4f15a43055 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -13,6 +13,7 @@ import GroupTags from './views/groupTags';
 import GroupTagValues from './views/groupTagValues';
 import GroupUserReports from './views/groupUserReports';
 import OrganizationDetails from './views/organizationDetails';
+import OrganizationRateLimits from './views/organizationRateLimits';
 import OrganizationStats from './views/organizationStats';
 import OrganizationTeams from './views/organizationTeams';
 import ProjectDashboard from './views/projectDashboard';
@@ -41,6 +42,7 @@ let routes = (
   <Route path="/" component={App}>
     <Route path="/organizations/:orgId/" component={OrganizationDetails}>
       <Route path="stats/" component={OrganizationStats} />
+      <Route path="rate-limits/" component={OrganizationRateLimits} />
     </Route>
 
     <Route path="/manage/" component={Admin}>
diff --git a/src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx b/src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx
index 5f8aea0f56..3037674793 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx
@@ -28,9 +28,6 @@ const NoteContainer = React.createClass({
 
   onDelete() {
     let {group, item} = this.props;
-
-    let loadingIndicator = IndicatorStore.add(t('Removing comment..'));
-
     // Optimistically remove from UI
     let index = GroupStore.removeActivity(group.id, item.id);
     if (index === -1) {
@@ -38,6 +35,8 @@ const NoteContainer = React.createClass({
         return;
     }
 
+    let loadingIndicator = IndicatorStore.add(t('Removing comment..'));
+
     this.api.request('/issues/' + group.id + '/comments/' + item.id + '/' , {
       method: 'DELETE',
       error: (error) => {
diff --git a/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx b/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
new file mode 100644
index 0000000000..cdb2c79252
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
@@ -0,0 +1,176 @@
+import jQuery from 'jquery';
+import React from 'react';
+
+import api from '../../api';
+import IndicatorStore from '../../stores/indicatorStore';
+import OrganizationHomeContainer from '../../components/organizations/homeContainer';
+import OrganizationState from '../../mixins/organizationState';
+import {t} from '../../locale';
+
+const RangeInput = React.createClass({
+  getDefaultProps() {
+    return {
+      min: 1,
+      max: 100,
+      step: 1,
+      formatLabel: function(value) {
+        return value;
+      },
+      onChange: function(e, value) {
+
+      },
+    };
+  },
+
+  getInitialState() {
+    return {
+      value: this.props.defaultValue,
+    };
+  },
+
+  componentDidMount() {
+    let {min, max, step} = this.props;
+    let $value = jQuery('<span class="value" />');
+    jQuery(this.refs.input).on('slider:ready', (e, data) => {
+      $value.appendTo(data.el);
+      $value.text(this.props.formatLabel(data.value));
+      this.setState({
+        value: data.value,
+      });
+    }).on('slider:changed', (e, data) => {
+      $value.text(this.props.formatLabel(data.value));
+      this.setState({
+        value: data.value,
+      });
+      this.props.onChange(e, data.value);
+    }).simpleSlider({
+      range: [min, max],
+      step: step,
+      snap: true
+    });
+  },
+
+  render() {
+    let {min, max, step} = this.props;
+    let {value} = this.state;
+    return (
+      <input type="range"
+          min={min}
+          max={max}
+          step={step}
+          defaultValue={value}
+          ref="input" />
+    );
+  },
+});
+
+const RateLimitEditor = React.createClass({
+  getInitialState() {
+    let projectLimit = this.props.organization.quota.projectLimit;
+
+    return {
+      activeNav: 'rate-limits',
+      currentProjectLimit: projectLimit,
+      savedProjectLimit: projectLimit,
+    };
+  },
+
+  onProjectLimitChange(e, value) {
+    this.setState({
+      currentProjectLimit: value,
+    });
+  },
+
+  onSubmit(e) {
+    e.preventDefault();
+
+    let loadingIndicator = IndicatorStore.add(t('Saving..'));
+
+    this.setState({
+      saving: true,
+      error: false,
+    }, () => {
+      api.request(`/organizations/${this.props.organization.slug}/`, {
+        method: 'PUT',
+        data: {
+          projectRateLimit: this.state.currentProjectLimit
+        },
+        success: (data) => {
+          // TODO(dcramer): propagate this change correctly (how??)
+          this.props.organization.quota = data.quota;
+          this.setState({
+            saving: false,
+            savedProjectLimit: data.quota.projectLimit,
+          });
+        },
+        complete: () => {
+          IndicatorStore.remove(loadingIndicator);
+        },
+      });
+    });
+  },
+
+  render() {
+    let {currentProjectLimit, savedProjectLimit, saving} = this.state;
+    let maxRate = this.props.organization.quota.maxRate;
+    let canSave = savedProjectLimit === currentProjectLimit && !saving;
+
+    return (
+      <form onSubmit={this.onSubmit}>
+        <p>Your organization is limited to <strong>{maxRate} events per minute</strong>.
+          When this rate is exceeded the system will begin discarding data until the
+          next interval.</p>
+
+        <p>You may set a limit the maximum amount a single project may send:</p>
+
+        <RangeInput
+            defaultValue={savedProjectLimit}
+            onChange={this.onProjectLimitChange}
+            formatLabel={(value) => { return `${value}%`; }} />
+
+        <div className="help-block">The maximum percentage of your quota an
+          individual project can consume.</div>
+
+        <div className="form-actions" style={{marginTop: 25}}>
+          <button
+            type="submit"
+            className="btn btn-primary"
+            disabled={canSave}>Apply Changes</button>
+        </div>
+      </form>
+    );
+  }
+});
+
+const OrganizationRateLimits = React.createClass({
+  mixins: [OrganizationState],
+
+  render() {
+    if (!this.context.organization)
+      return null;
+
+    let org = this.context.organization;
+    // TODO(dcramer): defined limit is only for testing atm
+    let maxRate = org.quota.maxRate;
+
+    return (
+      <OrganizationHomeContainer>
+        <div className="box">
+          <div className="box-header">
+            <h3>Rate Limits</h3>
+          </div>
+          <div className="box-content with-padding">
+            {maxRate !== 0 ?
+              <RateLimitEditor organization={org} />
+            :
+              <p>There are no rate limits configured for your organization.</p>
+            }
+          </div>
+        </div>
+      </OrganizationHomeContainer>
+    );
+  },
+});
+
+
+export default OrganizationRateLimits;
