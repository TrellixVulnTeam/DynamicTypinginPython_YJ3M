commit 3653e9206da28ce883d22dc2b169eb53c36b1754
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 21 15:24:58 2015 -0700

    Add versioning and prefix to caches

diff --git a/src/sentry/cache/base.py b/src/sentry/cache/base.py
index 9907f969ca..bad715f65c 100644
--- a/src/sentry/cache/base.py
+++ b/src/sentry/cache/base.py
@@ -8,10 +8,22 @@ sentry.cache.base
 
 from __future__ import absolute_import
 
+from django.conf import settings
+
 from threading import local
 
 
 class BaseCache(local):
+    prefix = 'c'
+
+    def __init__(self, version=None, prefix=None):
+        self.version = version or settings.CACHE_VERSION
+        if prefix is not None:
+            self.prefix = prefix
+
+    def make_key(self, key):
+        return '{}:{}:{}'.format(self.prefix, self.version, key)
+
     def set(self, key, value, timeout):
         raise NotImplementedError
 
diff --git a/src/sentry/cache/django.py b/src/sentry/cache/django.py
index 4d05284b02..a1d11a40a3 100644
--- a/src/sentry/cache/django.py
+++ b/src/sentry/cache/django.py
@@ -9,15 +9,16 @@ sentry.cache.django
 from __future__ import absolute_import
 
 from django.core.cache import cache
-from threading import local
 
+from .base import BaseCache
 
-class DjangoCache(local):
+
+class DjangoCache(BaseCache):
     def set(self, key, value, timeout):
-        cache.set(key, value, timeout)
+        cache.set(key, value, timeout, version=self.version)
 
     def delete(self, key):
-        cache.delete(key)
+        cache.delete(key, version=self.version)
 
     def get(self, key):
-        return cache.get(key)
+        return cache.get(key, version=self.version)
diff --git a/src/sentry/cache/redis.py b/src/sentry/cache/redis.py
index 68cedf8517..14dc450249 100644
--- a/src/sentry/cache/redis.py
+++ b/src/sentry/cache/redis.py
@@ -10,15 +10,16 @@ from __future__ import absolute_import
 
 from django.conf import settings
 from rb import Cluster
-from threading import local
 
 from sentry.utils import json
 
+from .base import BaseCache
 
-class RedisCache(local):
+
+class RedisCache(BaseCache):
     key_expire = 60 * 60  # 1 hour
 
-    def __init__(self, **options):
+    def __init__(self, version=None, prefix=None, **options):
         if not options:
             # inherit default options from REDIS_OPTIONS
             options = settings.SENTRY_REDIS_OPTIONS
@@ -29,7 +30,10 @@ class RedisCache(local):
         self.cluster = Cluster(options['hosts'])
         self.client = self.cluster.get_routing_client()
 
+        super(RedisCache, self).__init__(version=version, prefix=prefix)
+
     def set(self, key, value, timeout):
+        key = self.make_key(key)
         v = json.dumps(value)
         if timeout:
             self.client.setex(key, int(timeout), v)
@@ -37,9 +41,11 @@ class RedisCache(local):
             self.client.set(key, v)
 
     def delete(self, key):
+        key = self.make_key(key)
         self.client.delete(key)
 
     def get(self, key):
+        key = self.make_key(key)
         result = self.client.get(key)
         if result is not None:
             result = json.loads(result)
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index f1a18f9c73..fd16f886fa 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -43,12 +43,6 @@ NODE_MODULES_ROOT = os.path.join(PROJECT_ROOT, os.pardir, os.pardir, 'node_modul
 
 sys.path.insert(0, os.path.normpath(os.path.join(PROJECT_ROOT, os.pardir)))
 
-CACHES = {
-    'default': {
-        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
-    }
-}
-
 DATABASES = {
     'default': {
         'ENGINE': 'django.db.backends.sqlite3',
@@ -561,8 +555,6 @@ DEBUG_TOOLBAR_PATCH_SETTINGS = False
 
 SENTRY_CLIENT = 'sentry.utils.raven.SentryInternalClient'
 
-SENTRY_CACHE_BACKEND = 'default'
-
 SENTRY_FEATURES = {
     'auth:register': True,
     'organizations:create': True,
@@ -688,6 +680,19 @@ SENTRY_BUFFER_OPTIONS = {}
 SENTRY_CACHE = None
 SENTRY_CACHE_OPTIONS = {}
 
+# The internal Django cache is still used in many places
+# TODO(dcramer): convert uses over to Sentry's backend
+CACHES = {
+    'default': {
+        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
+    }
+}
+
+# The cache version affects both Django's internal cache (at runtime) as well
+# as Sentry's cache. This automatically overrides VERSION on the default
+# CACHES backend.
+CACHE_VERSION = 1
+
 # Quota backend
 SENTRY_QUOTAS = 'sentry.quotas.Quota'
 SENTRY_QUOTA_OPTIONS = {}
diff --git a/src/sentry/utils/runner.py b/src/sentry/utils/runner.py
index e0ea277ca6..10f76cb5ca 100644
--- a/src/sentry/utils/runner.py
+++ b/src/sentry/utils/runner.py
@@ -311,6 +311,8 @@ def initialize_app(config, skip_backend_validation=False):
     settings.SUDO_COOKIE_SECURE = getattr(settings, 'SESSION_COOKIE_SECURE', False)
     settings.SUDO_COOKIE_DOMAIN = getattr(settings, 'SESSION_COOKIE_DOMAIN', None)
 
+    settings.CACHES['default']['VERSION'] = settings.CACHE_VERSION
+
     if USE_GEVENT:
         from django.db import connections
         connections['default'].allow_thread_sharing = True
