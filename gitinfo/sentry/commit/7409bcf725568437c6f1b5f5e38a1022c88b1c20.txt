commit 7409bcf725568437c6f1b5f5e38a1022c88b1c20
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue May 14 12:46:56 2019 +0200

    feat(grouping): Added app matchers to fingerprints and grouping enhancers (#13161)

diff --git a/src/sentry/grouping/enhancer.py b/src/sentry/grouping/enhancer.py
index 6d58253bb7..2bf88d1d42 100644
--- a/src/sentry/grouping/enhancer.py
+++ b/src/sentry/grouping/enhancer.py
@@ -11,6 +11,7 @@ from parsimonious.grammar import Grammar, NodeVisitor
 from parsimonious.exceptions import ParseError
 
 from sentry.stacktraces.platform import get_behavior_family_for_platform
+from sentry.grouping.utils import get_rule_bool
 from sentry.utils.compat import implements_to_string
 from sentry.utils.glob import glob_match
 
@@ -26,7 +27,7 @@ rule = _ matchers actions
 
 matchers       = matcher+
 matcher        = _ matcher_type sep argument
-matcher_type   = "path" / "function" / "module" / "family" / "package"
+matcher_type   = "path" / "function" / "module" / "family" / "package" / "app"
 
 actions        = action+
 action         = _ range? flag action_name
@@ -63,6 +64,7 @@ MATCH_KEYS = {
     'module': 'm',
     'family': 'F',
     'package': 'P',
+    'app': 'a',
 }
 SHORT_MATCH_KEYS = dict((v, k) for k, v in six.iteritems(MATCH_KEYS))
 
@@ -118,6 +120,11 @@ class Match(object):
             family = get_behavior_family_for_platform(frame_data.get('platform') or platform)
             return family in flags
 
+        # in-app matching is just a bool
+        if self.key == 'app':
+            ref_val = get_rule_bool(self.pattern)
+            return ref_val is not None and ref_val == frame_data.get('in_app')
+
         # all other matches are case sensitive
         if self.key == 'function':
             from sentry.stacktraces.functions import get_function_name_for_frame
@@ -132,6 +139,8 @@ class Match(object):
     def _to_config_structure(self):
         if self.key == 'family':
             arg = ''.join(filter(None, [FAMILIES.get(x) for x in self.pattern.split(',')]))
+        elif self.key == 'app':
+            arg = {True: '1', False: '0'}.get(get_rule_bool(self.pattern), '')
         else:
             arg = self.pattern
         return MATCH_KEYS[self.key] + arg
diff --git a/src/sentry/grouping/fingerprinting.py b/src/sentry/grouping/fingerprinting.py
index 35c366533b..eb3b7eccea 100644
--- a/src/sentry/grouping/fingerprinting.py
+++ b/src/sentry/grouping/fingerprinting.py
@@ -7,6 +7,7 @@ from parsimonious.grammar import Grammar, NodeVisitor
 from parsimonious.exceptions import ParseError
 
 from sentry.stacktraces.platform import get_behavior_family_for_platform
+from sentry.grouping.utils import get_rule_bool
 from sentry.utils.safe import get_path
 from sentry.utils.glob import glob_match
 
@@ -25,7 +26,7 @@ rule = _ matchers _ follow _ fingerprint
 
 matchers       = matcher+
 matcher        = _ matcher_type sep argument
-matcher_type   = "path" / "function" / "module" / "family" / "type" / "value" / "message" / "package"
+matcher_type   = "path" / "function" / "module" / "family" / "type" / "value" / "message" / "package" / "app"
 argument       = quoted / unquoted
 
 fingerprint    = fp_value+
@@ -96,6 +97,7 @@ class EventAccess(object):
                     'module': frame.get('module'),
                     'family': get_behavior_family_for_platform(platform),
                     'package': frame.get('package'),
+                    'app': frame.get('in_app'),
                 })
 
             have_errors = False
@@ -215,6 +217,10 @@ class Match(object):
             flags = self.pattern.split(',')
             if 'all' in flags or value in flags:
                 return True
+        elif self.key == 'app':
+            ref_val = get_rule_bool(self.pattern)
+            if ref_val is not None and ref_val == value:
+                return True
         elif glob_match(value, self.pattern, ignorecase=self.key in ('message', 'value')):
             return True
         return False
diff --git a/src/sentry/grouping/utils.py b/src/sentry/grouping/utils.py
index 79f1e214a3..bbe19e33fa 100644
--- a/src/sentry/grouping/utils.py
+++ b/src/sentry/grouping/utils.py
@@ -12,3 +12,12 @@ def hash_from_values(values):
     for value in values:
         result.update(force_bytes(value, errors='replace'))
     return result.hexdigest()
+
+
+def get_rule_bool(value):
+    if value:
+        value = value.lower()
+        if value in ('1', 'yes', 'true'):
+            return True
+        elif value in ('0', 'no', 'false'):
+            return False
diff --git a/tests/sentry/grouping/fingerprint_inputs/fingerprint-native-app.json b/tests/sentry/grouping/fingerprint_inputs/fingerprint-native-app.json
new file mode 100644
index 0000000000..491198ec9b
--- /dev/null
+++ b/tests/sentry/grouping/fingerprint_inputs/fingerprint-native-app.json
@@ -0,0 +1,450 @@
+{
+  "_fingerprinting_rules": [
+    {
+      "matchers": [
+        ["function", "symbolicator::actors::symcaches::*"],
+        ["app", "true"]
+      ],
+      "fingerprint": ["symcache-error"]
+    }
+  ],
+  "platform": "native",
+  "exception": {
+    "values": [
+      {
+        "type": "Custom",
+        "value": "out of range"
+      },
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "<unknown> ",
+              "instruction_addr": "0x0",
+              "in_app": true
+            },
+            {
+              "function": "_start ",
+              "instruction_addr": "0x55b95be9f979",
+              "in_app": true
+            },
+            {
+              "function": "__libc_start_main ",
+              "instruction_addr": "0x7f9c5f4242e0",
+              "in_app": true
+            },
+            {
+              "function": "main ",
+              "instruction_addr": "0x55b95be9fab1",
+              "in_app": true
+            },
+            {
+              "function": "std::panicking::try::h72cb0fef6e9c0ab1 ",
+              "abs_path": "src/libstd/panicking.rs",
+              "package": "std",
+              "filename": "panicking.rs",
+              "lineno": 276,
+              "in_app": false,
+              "instruction_addr": "0x55b95c701ac5"
+            },
+            {
+              "function": "__rust_maybe_catch_panic ",
+              "abs_path": "src/libpanic_unwind/lib.rs",
+              "filename": "lib.rs",
+              "lineno": 92,
+              "in_app": false,
+              "instruction_addr": "0x55b95c706549"
+            },
+            {
+              "function": "std::rt::lang_start_internal::{{closure}}::h8ad4264c6b68797c ",
+              "abs_path": "src/libstd/rt.rs",
+              "package": "std",
+              "filename": "rt.rs",
+              "lineno": 49,
+              "in_app": false,
+              "instruction_addr": "0x55b95c700eb2"
+            },
+            {
+              "function": "std::rt::lang_start::{{closure}}::h4e8f5f76222f4872 ",
+              "package": "std",
+              "instruction_addr": "0x55b95be9fac2",
+              "in_app": false
+            },
+            {
+              "function": "symbolicator::main::h6f87bb5c61153edd ",
+              "package": "symbolicator",
+              "instruction_addr": "0x55b95be9fa86",
+              "in_app": true
+            },
+            {
+              "function": "symbolicator::app::main::h81af9cd0e252b957 ",
+              "package": "symbolicator",
+              "instruction_addr": "0x55b95bec77d3",
+              "in_app": true
+            },
+            {
+              "function": "actix::system::SystemRunner::run::hc8b42dd589d5f34d ",
+              "package": "actix",
+              "instruction_addr": "0x55b95c5c57ab",
+              "in_app": true
+            },
+            {
+              "function": "tokio::runtime::current_thread::runtime::Runtime::block_on::h1384999a7df7dbf5 ",
+              "package": "tokio",
+              "instruction_addr": "0x55b95c5907cf",
+              "in_app": true
+            },
+            {
+              "function": "<std::thread::local::LocalKey<T>>::with::h118d351120ec801c ",
+              "instruction_addr": "0x55b95c5b9832",
+              "in_app": false
+            },
+            {
+              "function": "<std::thread::local::LocalKey<T>>::with::h443d9baf3a401142 ",
+              "instruction_addr": "0x55b95c5ba56e",
+              "in_app": false
+            },
+            {
+              "function": "<std::thread::local::LocalKey<T>>::with::h899f4e1afe99ecb6 ",
+              "instruction_addr": "0x55b95c5bb735",
+              "in_app": false
+            },
+            {
+              "function": "<std::thread::local::LocalKey<T>>::with::h2befa73a071a6170 ",
+              "instruction_addr": "0x55b95c5b9f37",
+              "in_app": false
+            },
+            {
+              "function": "<tokio_current_thread::Entered<'a, P>>::block_on::h45ae18bcb1b8db5c ",
+              "instruction_addr": "0x55b95c588e13",
+              "in_app": true
+            },
+            {
+              "function": "<tokio_current_thread::Entered<'a, P>>::tick::hcea2e6d62cc2b7e5 ",
+              "instruction_addr": "0x55b95c588cf4",
+              "in_app": true
+            },
+            {
+              "function": "<tokio_current_thread::scheduler::Scheduler<U>>::tick::he19f21143658e3f0 ",
+              "instruction_addr": "0x55b95c5b3b19",
+              "in_app": true
+            },
+            {
+              "function": "tokio_current_thread::CurrentRunner::set_spawn::h9e70e2daaa86c968 ",
+              "package": "tokio_current_thread",
+              "instruction_addr": "0x55b95c585783",
+              "in_app": true
+            },
+            {
+              "function": "<futures::task_impl::Spawn<T>>::poll_future_notify::h1da2d19e6bf539c6 ",
+              "instruction_addr": "0x55b95c5b7055",
+              "in_app": true
+            },
+            {
+              "function": "futures::task_impl::std::set::h1cc47adb4a176e58 ",
+              "package": "futures",
+              "instruction_addr": "0x55b95c5914e1",
+              "in_app": true
+            },
+            {
+              "function": "<actix::contextimpl::ContextFut<A, C> as futures::future::Future>::poll::h9de5fbebc1652d47 ",
+              "instruction_addr": "0x55b95bebee0d",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::then::Then<A, B, F> as futures::future::Future>::poll::h67e771243743eb30 ",
+              "instruction_addr": "0x55b95bf8999f",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::lazy::Lazy<F, R> as futures::future::Future>::poll::h9b62d88151002ac4 ",
+              "instruction_addr": "0x55b95bef8608",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::then::Then<A, B, F> as futures::future::Future>::poll::h5567ae25991a6daa ",
+              "instruction_addr": "0x55b95bf89129",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::map_err::MapErr<A, F> as futures::future::Future>::poll::he74c1a2a9e15b1b7 ",
+              "instruction_addr": "0x55b95c04c4e3",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::chain::Chain<A, B, C>>::poll::h7a8ce6865477e15d ",
+              "instruction_addr": "0x55b95bf6c656",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::map::Map<A, F> as futures::future::Future>::poll::h8e9ff78b067eab2e ",
+              "instruction_addr": "0x55b95bfefa21",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::join_all::JoinAll<I> as futures::future::Future>::poll::hbb462bf2c5cac86c ",
+              "instruction_addr": "0x55b95c016474",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::chain::Chain<A, B, C>>::poll::hbc46b1836174f434 ",
+              "instruction_addr": "0x55b95bf75b51",
+              "in_app": true
+            },
+            {
+              "function": "symbolicator::actors::symcaches::SymCacheFile::parse::hdccb68bbe02b50a3 ",
+              "package": "symbolicator",
+              "instruction_addr": "0x55b95bec3b73",
+              "in_app": true
+            },
+            {
+              "function": "symbolic_symcache::cache::SymCache::parse::hb8a4e051c56bfdd0 ",
+              "package": "symbolic_symcache",
+              "instruction_addr": "0x55b95c41433f",
+              "in_app": true
+            },
+            {
+              "function": "symbolic_symcache::format::Header::parse::h9e4b9050799f7a0b ",
+              "package": "symbolic_symcache",
+              "instruction_addr": "0x55b95c4159b0",
+              "in_app": true
+            },
+            {
+              "function": "<failure::error::error_impl::ErrorImpl as core::convert::From<F>>::from::he5d6dd47a3a261a9 ",
+              "instruction_addr": "0x55b95c4167b5",
+              "in_app": false
+            },
+            {
+              "function": "<failure::backtrace::Backtrace as core::default::Default>::default::h493a6077db117c42 ",
+              "instruction_addr": "0x55b95c69a1cf",
+              "in_app": false
+            },
+            {
+              "function": "failure::backtrace::internal::InternalBacktrace::new::h5c964837d568bbe5 ",
+              "package": "failure",
+              "instruction_addr": "0x55b95c699f2f",
+              "in_app": false
+            }
+          ]
+        },
+        "type": "SymCacheError",
+        "value": "invalid symcache header"
+      },
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "<unknown> ",
+              "instruction_addr": "0x0",
+              "in_app": true
+            },
+            {
+              "function": "_start ",
+              "instruction_addr": "0x55b95be9f979",
+              "in_app": true
+            },
+            {
+              "function": "__libc_start_main ",
+              "instruction_addr": "0x7f9c5f4242e0",
+              "in_app": true
+            },
+            {
+              "function": "main ",
+              "instruction_addr": "0x55b95be9fab1",
+              "in_app": true
+            },
+            {
+              "function": "std::panicking::try::h72cb0fef6e9c0ab1 ",
+              "abs_path": "src/libstd/panicking.rs",
+              "package": "std",
+              "filename": "panicking.rs",
+              "lineno": 276,
+              "in_app": false,
+              "instruction_addr": "0x55b95c701ac5"
+            },
+            {
+              "function": "__rust_maybe_catch_panic ",
+              "abs_path": "src/libpanic_unwind/lib.rs",
+              "filename": "lib.rs",
+              "lineno": 92,
+              "in_app": false,
+              "instruction_addr": "0x55b95c706549"
+            },
+            {
+              "function": "std::rt::lang_start_internal::{{closure}}::h8ad4264c6b68797c ",
+              "abs_path": "src/libstd/rt.rs",
+              "package": "std",
+              "filename": "rt.rs",
+              "lineno": 49,
+              "in_app": false,
+              "instruction_addr": "0x55b95c700eb2"
+            },
+            {
+              "function": "std::rt::lang_start::{{closure}}::h4e8f5f76222f4872 ",
+              "package": "std",
+              "instruction_addr": "0x55b95be9fac2",
+              "in_app": false
+            },
+            {
+              "function": "symbolicator::main::h6f87bb5c61153edd ",
+              "package": "symbolicator",
+              "instruction_addr": "0x55b95be9fa86",
+              "in_app": true
+            },
+            {
+              "function": "symbolicator::app::main::h81af9cd0e252b957 ",
+              "package": "symbolicator",
+              "instruction_addr": "0x55b95bec77d3",
+              "in_app": true
+            },
+            {
+              "function": "actix::system::SystemRunner::run::hc8b42dd589d5f34d ",
+              "package": "actix",
+              "instruction_addr": "0x55b95c5c57ab",
+              "in_app": true
+            },
+            {
+              "function": "tokio::runtime::current_thread::runtime::Runtime::block_on::h1384999a7df7dbf5 ",
+              "package": "tokio",
+              "instruction_addr": "0x55b95c5907cf",
+              "in_app": true
+            },
+            {
+              "function": "<std::thread::local::LocalKey<T>>::with::h118d351120ec801c ",
+              "instruction_addr": "0x55b95c5b9832",
+              "in_app": false
+            },
+            {
+              "function": "<std::thread::local::LocalKey<T>>::with::h443d9baf3a401142 ",
+              "instruction_addr": "0x55b95c5ba56e",
+              "in_app": false
+            },
+            {
+              "function": "<std::thread::local::LocalKey<T>>::with::h899f4e1afe99ecb6 ",
+              "instruction_addr": "0x55b95c5bb735",
+              "in_app": false
+            },
+            {
+              "function": "<std::thread::local::LocalKey<T>>::with::h2befa73a071a6170 ",
+              "instruction_addr": "0x55b95c5b9f37",
+              "in_app": false
+            },
+            {
+              "function": "<tokio_current_thread::Entered<'a, P>>::block_on::h45ae18bcb1b8db5c ",
+              "instruction_addr": "0x55b95c588e13",
+              "in_app": true
+            },
+            {
+              "function": "<tokio_current_thread::Entered<'a, P>>::tick::hcea2e6d62cc2b7e5 ",
+              "instruction_addr": "0x55b95c588cf4",
+              "in_app": true
+            },
+            {
+              "function": "<tokio_current_thread::scheduler::Scheduler<U>>::tick::he19f21143658e3f0 ",
+              "instruction_addr": "0x55b95c5b3b19",
+              "in_app": true
+            },
+            {
+              "function": "tokio_current_thread::CurrentRunner::set_spawn::h9e70e2daaa86c968 ",
+              "package": "tokio_current_thread",
+              "instruction_addr": "0x55b95c585783",
+              "in_app": true
+            },
+            {
+              "function": "<futures::task_impl::Spawn<T>>::poll_future_notify::h1da2d19e6bf539c6 ",
+              "instruction_addr": "0x55b95c5b7055",
+              "in_app": true
+            },
+            {
+              "function": "futures::task_impl::std::set::h1cc47adb4a176e58 ",
+              "package": "futures",
+              "instruction_addr": "0x55b95c5914e1",
+              "in_app": true
+            },
+            {
+              "function": "<actix::contextimpl::ContextFut<A, C> as futures::future::Future>::poll::h9de5fbebc1652d47 ",
+              "instruction_addr": "0x55b95bebee0d",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::then::Then<A, B, F> as futures::future::Future>::poll::h67e771243743eb30 ",
+              "instruction_addr": "0x55b95bf8999f",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::lazy::Lazy<F, R> as futures::future::Future>::poll::h9b62d88151002ac4 ",
+              "instruction_addr": "0x55b95bef8608",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::then::Then<A, B, F> as futures::future::Future>::poll::h5567ae25991a6daa ",
+              "instruction_addr": "0x55b95bf89129",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::map_err::MapErr<A, F> as futures::future::Future>::poll::he74c1a2a9e15b1b7 ",
+              "instruction_addr": "0x55b95c04c4e3",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::chain::Chain<A, B, C>>::poll::h7a8ce6865477e15d ",
+              "instruction_addr": "0x55b95bf6c656",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::map::Map<A, F> as futures::future::Future>::poll::h8e9ff78b067eab2e ",
+              "instruction_addr": "0x55b95bfefa21",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::join_all::JoinAll<I> as futures::future::Future>::poll::hbb462bf2c5cac86c ",
+              "instruction_addr": "0x55b95c016474",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::chain::Chain<A, B, C>>::poll::hbc46b1836174f434 ",
+              "instruction_addr": "0x55b95bf75b51",
+              "in_app": true
+            },
+            {
+              "function": "symbolicator::actors::symcaches::SymCacheFile::parse::hdccb68bbe02b50a3 ",
+              "package": "symbolicator",
+              "instruction_addr": "0x55b95bec3b73",
+              "in_app": true
+            },
+            {
+              "function": "symbolic_symcache::cache::SymCache::parse::hb8a4e051c56bfdd0 ",
+              "package": "symbolic_symcache",
+              "instruction_addr": "0x55b95c41433f",
+              "in_app": true
+            },
+            {
+              "function": "symbolic_symcache::format::Header::parse::h9e4b9050799f7a0b ",
+              "package": "symbolic_symcache",
+              "instruction_addr": "0x55b95c4159b0",
+              "in_app": true
+            },
+            {
+              "function": "<failure::error::error_impl::ErrorImpl as core::convert::From<F>>::from::he5d6dd47a3a261a9 ",
+              "instruction_addr": "0x55b95c4167b5",
+              "in_app": false
+            },
+            {
+              "function": "<failure::backtrace::Backtrace as core::default::Default>::default::h493a6077db117c42 ",
+              "instruction_addr": "0x55b95c69a1cf",
+              "in_app": false
+            },
+            {
+              "function": "failure::backtrace::internal::InternalBacktrace::new::h5c964837d568bbe5 ",
+              "package": "failure",
+              "instruction_addr": "0x55b95c699f2f",
+              "in_app": false
+            }
+          ]
+        },
+        "type": "SymCacheError",
+        "value": "failed to parse symcache"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/grouping/fingerprint_inputs/fingerprint-native-non-app.json b/tests/sentry/grouping/fingerprint_inputs/fingerprint-native-non-app.json
new file mode 100644
index 0000000000..812fc61d14
--- /dev/null
+++ b/tests/sentry/grouping/fingerprint_inputs/fingerprint-native-non-app.json
@@ -0,0 +1,450 @@
+{
+  "_fingerprinting_rules": [
+    {
+      "matchers": [
+        ["function", "symbolicator::actors::symcaches::*"],
+        ["app", "false"]
+      ],
+      "fingerprint": ["symcache-error"]
+    }
+  ],
+  "platform": "native",
+  "exception": {
+    "values": [
+      {
+        "type": "Custom",
+        "value": "out of range"
+      },
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "<unknown> ",
+              "instruction_addr": "0x0",
+              "in_app": true
+            },
+            {
+              "function": "_start ",
+              "instruction_addr": "0x55b95be9f979",
+              "in_app": true
+            },
+            {
+              "function": "__libc_start_main ",
+              "instruction_addr": "0x7f9c5f4242e0",
+              "in_app": true
+            },
+            {
+              "function": "main ",
+              "instruction_addr": "0x55b95be9fab1",
+              "in_app": true
+            },
+            {
+              "function": "std::panicking::try::h72cb0fef6e9c0ab1 ",
+              "abs_path": "src/libstd/panicking.rs",
+              "package": "std",
+              "filename": "panicking.rs",
+              "lineno": 276,
+              "in_app": false,
+              "instruction_addr": "0x55b95c701ac5"
+            },
+            {
+              "function": "__rust_maybe_catch_panic ",
+              "abs_path": "src/libpanic_unwind/lib.rs",
+              "filename": "lib.rs",
+              "lineno": 92,
+              "in_app": false,
+              "instruction_addr": "0x55b95c706549"
+            },
+            {
+              "function": "std::rt::lang_start_internal::{{closure}}::h8ad4264c6b68797c ",
+              "abs_path": "src/libstd/rt.rs",
+              "package": "std",
+              "filename": "rt.rs",
+              "lineno": 49,
+              "in_app": false,
+              "instruction_addr": "0x55b95c700eb2"
+            },
+            {
+              "function": "std::rt::lang_start::{{closure}}::h4e8f5f76222f4872 ",
+              "package": "std",
+              "instruction_addr": "0x55b95be9fac2",
+              "in_app": false
+            },
+            {
+              "function": "symbolicator::main::h6f87bb5c61153edd ",
+              "package": "symbolicator",
+              "instruction_addr": "0x55b95be9fa86",
+              "in_app": true
+            },
+            {
+              "function": "symbolicator::app::main::h81af9cd0e252b957 ",
+              "package": "symbolicator",
+              "instruction_addr": "0x55b95bec77d3",
+              "in_app": true
+            },
+            {
+              "function": "actix::system::SystemRunner::run::hc8b42dd589d5f34d ",
+              "package": "actix",
+              "instruction_addr": "0x55b95c5c57ab",
+              "in_app": true
+            },
+            {
+              "function": "tokio::runtime::current_thread::runtime::Runtime::block_on::h1384999a7df7dbf5 ",
+              "package": "tokio",
+              "instruction_addr": "0x55b95c5907cf",
+              "in_app": true
+            },
+            {
+              "function": "<std::thread::local::LocalKey<T>>::with::h118d351120ec801c ",
+              "instruction_addr": "0x55b95c5b9832",
+              "in_app": false
+            },
+            {
+              "function": "<std::thread::local::LocalKey<T>>::with::h443d9baf3a401142 ",
+              "instruction_addr": "0x55b95c5ba56e",
+              "in_app": false
+            },
+            {
+              "function": "<std::thread::local::LocalKey<T>>::with::h899f4e1afe99ecb6 ",
+              "instruction_addr": "0x55b95c5bb735",
+              "in_app": false
+            },
+            {
+              "function": "<std::thread::local::LocalKey<T>>::with::h2befa73a071a6170 ",
+              "instruction_addr": "0x55b95c5b9f37",
+              "in_app": false
+            },
+            {
+              "function": "<tokio_current_thread::Entered<'a, P>>::block_on::h45ae18bcb1b8db5c ",
+              "instruction_addr": "0x55b95c588e13",
+              "in_app": true
+            },
+            {
+              "function": "<tokio_current_thread::Entered<'a, P>>::tick::hcea2e6d62cc2b7e5 ",
+              "instruction_addr": "0x55b95c588cf4",
+              "in_app": true
+            },
+            {
+              "function": "<tokio_current_thread::scheduler::Scheduler<U>>::tick::he19f21143658e3f0 ",
+              "instruction_addr": "0x55b95c5b3b19",
+              "in_app": true
+            },
+            {
+              "function": "tokio_current_thread::CurrentRunner::set_spawn::h9e70e2daaa86c968 ",
+              "package": "tokio_current_thread",
+              "instruction_addr": "0x55b95c585783",
+              "in_app": true
+            },
+            {
+              "function": "<futures::task_impl::Spawn<T>>::poll_future_notify::h1da2d19e6bf539c6 ",
+              "instruction_addr": "0x55b95c5b7055",
+              "in_app": true
+            },
+            {
+              "function": "futures::task_impl::std::set::h1cc47adb4a176e58 ",
+              "package": "futures",
+              "instruction_addr": "0x55b95c5914e1",
+              "in_app": true
+            },
+            {
+              "function": "<actix::contextimpl::ContextFut<A, C> as futures::future::Future>::poll::h9de5fbebc1652d47 ",
+              "instruction_addr": "0x55b95bebee0d",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::then::Then<A, B, F> as futures::future::Future>::poll::h67e771243743eb30 ",
+              "instruction_addr": "0x55b95bf8999f",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::lazy::Lazy<F, R> as futures::future::Future>::poll::h9b62d88151002ac4 ",
+              "instruction_addr": "0x55b95bef8608",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::then::Then<A, B, F> as futures::future::Future>::poll::h5567ae25991a6daa ",
+              "instruction_addr": "0x55b95bf89129",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::map_err::MapErr<A, F> as futures::future::Future>::poll::he74c1a2a9e15b1b7 ",
+              "instruction_addr": "0x55b95c04c4e3",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::chain::Chain<A, B, C>>::poll::h7a8ce6865477e15d ",
+              "instruction_addr": "0x55b95bf6c656",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::map::Map<A, F> as futures::future::Future>::poll::h8e9ff78b067eab2e ",
+              "instruction_addr": "0x55b95bfefa21",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::join_all::JoinAll<I> as futures::future::Future>::poll::hbb462bf2c5cac86c ",
+              "instruction_addr": "0x55b95c016474",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::chain::Chain<A, B, C>>::poll::hbc46b1836174f434 ",
+              "instruction_addr": "0x55b95bf75b51",
+              "in_app": true
+            },
+            {
+              "function": "symbolicator::actors::symcaches::SymCacheFile::parse::hdccb68bbe02b50a3 ",
+              "package": "symbolicator",
+              "instruction_addr": "0x55b95bec3b73",
+              "in_app": true
+            },
+            {
+              "function": "symbolic_symcache::cache::SymCache::parse::hb8a4e051c56bfdd0 ",
+              "package": "symbolic_symcache",
+              "instruction_addr": "0x55b95c41433f",
+              "in_app": true
+            },
+            {
+              "function": "symbolic_symcache::format::Header::parse::h9e4b9050799f7a0b ",
+              "package": "symbolic_symcache",
+              "instruction_addr": "0x55b95c4159b0",
+              "in_app": true
+            },
+            {
+              "function": "<failure::error::error_impl::ErrorImpl as core::convert::From<F>>::from::he5d6dd47a3a261a9 ",
+              "instruction_addr": "0x55b95c4167b5",
+              "in_app": false
+            },
+            {
+              "function": "<failure::backtrace::Backtrace as core::default::Default>::default::h493a6077db117c42 ",
+              "instruction_addr": "0x55b95c69a1cf",
+              "in_app": false
+            },
+            {
+              "function": "failure::backtrace::internal::InternalBacktrace::new::h5c964837d568bbe5 ",
+              "package": "failure",
+              "instruction_addr": "0x55b95c699f2f",
+              "in_app": false
+            }
+          ]
+        },
+        "type": "SymCacheError",
+        "value": "invalid symcache header"
+      },
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "<unknown> ",
+              "instruction_addr": "0x0",
+              "in_app": true
+            },
+            {
+              "function": "_start ",
+              "instruction_addr": "0x55b95be9f979",
+              "in_app": true
+            },
+            {
+              "function": "__libc_start_main ",
+              "instruction_addr": "0x7f9c5f4242e0",
+              "in_app": true
+            },
+            {
+              "function": "main ",
+              "instruction_addr": "0x55b95be9fab1",
+              "in_app": true
+            },
+            {
+              "function": "std::panicking::try::h72cb0fef6e9c0ab1 ",
+              "abs_path": "src/libstd/panicking.rs",
+              "package": "std",
+              "filename": "panicking.rs",
+              "lineno": 276,
+              "in_app": false,
+              "instruction_addr": "0x55b95c701ac5"
+            },
+            {
+              "function": "__rust_maybe_catch_panic ",
+              "abs_path": "src/libpanic_unwind/lib.rs",
+              "filename": "lib.rs",
+              "lineno": 92,
+              "in_app": false,
+              "instruction_addr": "0x55b95c706549"
+            },
+            {
+              "function": "std::rt::lang_start_internal::{{closure}}::h8ad4264c6b68797c ",
+              "abs_path": "src/libstd/rt.rs",
+              "package": "std",
+              "filename": "rt.rs",
+              "lineno": 49,
+              "in_app": false,
+              "instruction_addr": "0x55b95c700eb2"
+            },
+            {
+              "function": "std::rt::lang_start::{{closure}}::h4e8f5f76222f4872 ",
+              "package": "std",
+              "instruction_addr": "0x55b95be9fac2",
+              "in_app": false
+            },
+            {
+              "function": "symbolicator::main::h6f87bb5c61153edd ",
+              "package": "symbolicator",
+              "instruction_addr": "0x55b95be9fa86",
+              "in_app": true
+            },
+            {
+              "function": "symbolicator::app::main::h81af9cd0e252b957 ",
+              "package": "symbolicator",
+              "instruction_addr": "0x55b95bec77d3",
+              "in_app": true
+            },
+            {
+              "function": "actix::system::SystemRunner::run::hc8b42dd589d5f34d ",
+              "package": "actix",
+              "instruction_addr": "0x55b95c5c57ab",
+              "in_app": true
+            },
+            {
+              "function": "tokio::runtime::current_thread::runtime::Runtime::block_on::h1384999a7df7dbf5 ",
+              "package": "tokio",
+              "instruction_addr": "0x55b95c5907cf",
+              "in_app": true
+            },
+            {
+              "function": "<std::thread::local::LocalKey<T>>::with::h118d351120ec801c ",
+              "instruction_addr": "0x55b95c5b9832",
+              "in_app": false
+            },
+            {
+              "function": "<std::thread::local::LocalKey<T>>::with::h443d9baf3a401142 ",
+              "instruction_addr": "0x55b95c5ba56e",
+              "in_app": false
+            },
+            {
+              "function": "<std::thread::local::LocalKey<T>>::with::h899f4e1afe99ecb6 ",
+              "instruction_addr": "0x55b95c5bb735",
+              "in_app": false
+            },
+            {
+              "function": "<std::thread::local::LocalKey<T>>::with::h2befa73a071a6170 ",
+              "instruction_addr": "0x55b95c5b9f37",
+              "in_app": false
+            },
+            {
+              "function": "<tokio_current_thread::Entered<'a, P>>::block_on::h45ae18bcb1b8db5c ",
+              "instruction_addr": "0x55b95c588e13",
+              "in_app": true
+            },
+            {
+              "function": "<tokio_current_thread::Entered<'a, P>>::tick::hcea2e6d62cc2b7e5 ",
+              "instruction_addr": "0x55b95c588cf4",
+              "in_app": true
+            },
+            {
+              "function": "<tokio_current_thread::scheduler::Scheduler<U>>::tick::he19f21143658e3f0 ",
+              "instruction_addr": "0x55b95c5b3b19",
+              "in_app": true
+            },
+            {
+              "function": "tokio_current_thread::CurrentRunner::set_spawn::h9e70e2daaa86c968 ",
+              "package": "tokio_current_thread",
+              "instruction_addr": "0x55b95c585783",
+              "in_app": true
+            },
+            {
+              "function": "<futures::task_impl::Spawn<T>>::poll_future_notify::h1da2d19e6bf539c6 ",
+              "instruction_addr": "0x55b95c5b7055",
+              "in_app": true
+            },
+            {
+              "function": "futures::task_impl::std::set::h1cc47adb4a176e58 ",
+              "package": "futures",
+              "instruction_addr": "0x55b95c5914e1",
+              "in_app": true
+            },
+            {
+              "function": "<actix::contextimpl::ContextFut<A, C> as futures::future::Future>::poll::h9de5fbebc1652d47 ",
+              "instruction_addr": "0x55b95bebee0d",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::then::Then<A, B, F> as futures::future::Future>::poll::h67e771243743eb30 ",
+              "instruction_addr": "0x55b95bf8999f",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::lazy::Lazy<F, R> as futures::future::Future>::poll::h9b62d88151002ac4 ",
+              "instruction_addr": "0x55b95bef8608",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::then::Then<A, B, F> as futures::future::Future>::poll::h5567ae25991a6daa ",
+              "instruction_addr": "0x55b95bf89129",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::map_err::MapErr<A, F> as futures::future::Future>::poll::he74c1a2a9e15b1b7 ",
+              "instruction_addr": "0x55b95c04c4e3",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::chain::Chain<A, B, C>>::poll::h7a8ce6865477e15d ",
+              "instruction_addr": "0x55b95bf6c656",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::map::Map<A, F> as futures::future::Future>::poll::h8e9ff78b067eab2e ",
+              "instruction_addr": "0x55b95bfefa21",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::join_all::JoinAll<I> as futures::future::Future>::poll::hbb462bf2c5cac86c ",
+              "instruction_addr": "0x55b95c016474",
+              "in_app": true
+            },
+            {
+              "function": "<futures::future::chain::Chain<A, B, C>>::poll::hbc46b1836174f434 ",
+              "instruction_addr": "0x55b95bf75b51",
+              "in_app": true
+            },
+            {
+              "function": "symbolicator::actors::symcaches::SymCacheFile::parse::hdccb68bbe02b50a3 ",
+              "package": "symbolicator",
+              "instruction_addr": "0x55b95bec3b73",
+              "in_app": true
+            },
+            {
+              "function": "symbolic_symcache::cache::SymCache::parse::hb8a4e051c56bfdd0 ",
+              "package": "symbolic_symcache",
+              "instruction_addr": "0x55b95c41433f",
+              "in_app": true
+            },
+            {
+              "function": "symbolic_symcache::format::Header::parse::h9e4b9050799f7a0b ",
+              "package": "symbolic_symcache",
+              "instruction_addr": "0x55b95c4159b0",
+              "in_app": true
+            },
+            {
+              "function": "<failure::error::error_impl::ErrorImpl as core::convert::From<F>>::from::he5d6dd47a3a261a9 ",
+              "instruction_addr": "0x55b95c4167b5",
+              "in_app": false
+            },
+            {
+              "function": "<failure::backtrace::Backtrace as core::default::Default>::default::h493a6077db117c42 ",
+              "instruction_addr": "0x55b95c69a1cf",
+              "in_app": false
+            },
+            {
+              "function": "failure::backtrace::internal::InternalBacktrace::new::h5c964837d568bbe5 ",
+              "package": "failure",
+              "instruction_addr": "0x55b95c699f2f",
+              "in_app": false
+            }
+          ]
+        },
+        "type": "SymCacheError",
+        "value": "failed to parse symcache"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/grouping/snapshots/test_enhancer/test_basic_parsing.pysnap b/tests/sentry/grouping/snapshots/test_enhancer/test_basic_parsing.pysnap
index 1824ea68b7..65979357ee 100644
--- a/tests/sentry/grouping/snapshots/test_enhancer/test_basic_parsing.pysnap
+++ b/tests/sentry/grouping/snapshots/test_enhancer/test_basic_parsing.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-04-03T18:39:26.343115Z'
+created: '2019-05-10T09:19:47.569014Z'
 creator: sentry
 source: tests/sentry/grouping/test_enhancer.py
 ---
@@ -71,4 +71,15 @@ rules:
     pattern: javascript
   - key: path
     pattern: '*/test.js'
+- actions:
+  - flag: false
+    key: app
+    range: null
+  matchers:
+  - key: family
+    pattern: javascript
+  - key: app
+    pattern: '1'
+  - key: path
+    pattern: '*/test.js'
 version: 1
diff --git a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_native_app.pysnap b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_native_app.pysnap
new file mode 100644
index 0000000000..460574251f
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_native_app.pysnap
@@ -0,0 +1,17 @@
+---
+created: '2019-05-10T09:35:38.127307Z'
+creator: sentry
+source: tests/sentry/grouping/test_fingerprinting.py
+---
+config:
+  rules:
+  - fingerprint:
+    - symcache-error
+    matchers:
+    - - function
+      - symbolicator::actors::symcaches::*
+    - - app
+      - 'true'
+  version: 1
+fingerprint:
+- symcache-error
diff --git a/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_native_non_app.pysnap b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_native_non_app.pysnap
new file mode 100644
index 0000000000..568723fd45
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_fingerprinting/test_event_hash_variant/fingerprint_native_non_app.pysnap
@@ -0,0 +1,17 @@
+---
+created: '2019-05-10T09:35:38.141252Z'
+creator: sentry
+source: tests/sentry/grouping/test_fingerprinting.py
+---
+config:
+  rules:
+  - fingerprint:
+    - symcache-error
+    matchers:
+    - - function
+      - symbolicator::actors::symcaches::*
+    - - app
+      - 'false'
+  version: 1
+fingerprint:
+- '{{ default }}'
diff --git a/tests/sentry/grouping/test_enhancer.py b/tests/sentry/grouping/test_enhancer.py
index 24cd3576d2..edb4457406 100644
--- a/tests/sentry/grouping/test_enhancer.py
+++ b/tests/sentry/grouping/test_enhancer.py
@@ -32,6 +32,7 @@ function:ThreadStartMac                         v-group
 family:native module:std::*                     -app
 module:core::*                                  -app
 family:javascript path:*/test.js                -app
+family:javascript app:1 path:*/test.js          -app
 ''', bases=['common:v1'])
 
     dumped = enhancement.dumps()
@@ -99,6 +100,32 @@ def test_family_matching():
     }, 'native'))
 
 
+def test_app_matching():
+    enhancement = Enhancements.from_config_string('''
+        family:javascript path:**/test.js app:yes       +app
+        family:native path:**/test.c app:no            -group
+    ''')
+    app_yes_rule, app_no_rule = enhancement.rules
+
+    assert bool(app_yes_rule.get_matching_frame_actions({
+        'abs_path': 'http://example.com/foo/TEST.js',
+        'in_app': True
+    }, 'javascript'))
+    assert not bool(app_yes_rule.get_matching_frame_actions({
+        'abs_path': 'http://example.com/foo/TEST.js',
+        'in_app': False
+    }, 'javascript'))
+
+    assert bool(app_no_rule.get_matching_frame_actions({
+        'abs_path': '/test.c',
+        'in_app': False
+    }, 'native'))
+    assert not bool(app_no_rule.get_matching_frame_actions({
+        'abs_path': '/test.c',
+        'in_app': True
+    }, 'native'))
+
+
 def test_package_matching():
     # This tests a bunch of different rules from the default in-app logic that
     # was ported from the former native plugin.
diff --git a/tests/sentry/grouping/test_fingerprinting.py b/tests/sentry/grouping/test_fingerprinting.py
index 2175277cd1..abb1097bc7 100644
--- a/tests/sentry/grouping/test_fingerprinting.py
+++ b/tests/sentry/grouping/test_fingerprinting.py
@@ -16,6 +16,7 @@ def test_basic_parsing(insta_snapshot):
 # This is a config
 type:DatabaseUnavailable                        -> DatabaseUnavailable
 function:assertion_failed module:foo            -> AssertionFailed, foo
+app:true                                        -> aha
 ''')
     assert rules._to_config_structure() == {
         'rules': [
@@ -23,7 +24,9 @@ function:assertion_failed module:foo            -> AssertionFailed, foo
              'fingerprint': ['DatabaseUnavailable']},
             {'matchers': [['function', 'assertion_failed'],
                           ['module', 'foo']],
-             'fingerprint': ['AssertionFailed', 'foo']}
+             'fingerprint': ['AssertionFailed', 'foo']},
+            {'matchers': [['app', 'true']],
+             'fingerprint': ['aha']},
         ],
         'version': 1
     }
