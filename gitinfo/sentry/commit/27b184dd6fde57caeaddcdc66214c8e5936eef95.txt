commit 27b184dd6fde57caeaddcdc66214c8e5936eef95
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jun 4 16:06:47 2013 -0700

    Correct TeamManager.get_for_user so it includes AccessGroup based teams

diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 889f6edbf0..8227f72b36 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -1197,7 +1197,7 @@ class TeamManager(BaseManager):
         Each <Team> returned has a ``membership`` attribute which holds the
         <TeamMember> instance.
         """
-        from sentry.models import TeamMember
+        from sentry.models import TeamMember, AccessGroup
 
         results = SortedDict()
 
@@ -1208,15 +1208,27 @@ class TeamManager(BaseManager):
             for team in self.order_by('name').iterator():
                 results[team.slug] = team
         else:
+            all_teams = set()
+
             qs = TeamMember.objects.filter(
                 user=user,
             ).select_related('team')
             if access is not None:
                 qs = qs.filter(type__lte=access)
 
-            for tm in sorted(qs, key=lambda x: x.team.name):
-                team = tm.team
-                team.membership = tm
+            for tm in qs:
+                all_teams.add(tm.team)
+
+            qs = AccessGroup.objects.filter(
+                members=user,
+            ).select_related('team')
+            if access is not None:
+                qs = qs.filter(type__lte=access)
+
+            for group in qs:
+                all_teams.add(group.team)
+
+            for team in sorted(all_teams, key=lambda x: x.name):
                 results[team.slug] = team
 
         return results
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 87cec56cbc..6ba0d68189 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -10,8 +10,9 @@ from django.utils import timezone
 from sentry.constants import MEMBER_OWNER, MEMBER_USER
 from sentry.interfaces import Interface
 from sentry.manager import get_checksum_from_event
-from sentry.models import (Event, Group, Project, GroupCountByMinute, ProjectCountByMinute,
-    SearchDocument, Team, EventMapping, User)
+from sentry.models import (
+    Event, Group, Project, GroupCountByMinute, ProjectCountByMinute,
+    SearchDocument, Team, EventMapping, User, AccessGroup)
 from sentry.utils.db import has_trending  # NOQA
 from sentry.testutils import TestCase
 
@@ -320,31 +321,22 @@ class ProjectManagerTest(TestCase):
 
 
 class TeamManagerTest(TestCase):
-    def test_public_install_returns_all_teams_without_access(self):
-        teams = {self.team.slug: self.team}
-        user = User.objects.create()
-
-        with self.Settings(SENTRY_PUBLIC=True):
-            result = Team.objects.get_for_user(user)
-
-        assert result == teams
-
-    def test_public_install_returns_accessible_teams_with_access(self):
-        user = User.objects.create()
+    def test_simple(self):
+        user = User.objects.create(username='foo')
+        user2 = User.objects.create(username='bar')
+        user3 = User.objects.create(username='baz')
         team = Team.objects.create(name='Test', owner=user)
-        teams = {team.slug: team}
+        group = AccessGroup.objects.create(name='Test', type=MEMBER_USER, team=team)
+        group.members.add(user2)
 
-        with self.Settings(SENTRY_PUBLIC=True):
-            result = Team.objects.get_for_user(user, access=MEMBER_OWNER)
+        result = Team.objects.get_for_user(user, access=MEMBER_OWNER)
+        assert result == {team.slug: team}
 
-        assert result == teams
-
-    def test_private_install_returns_accessible_teams(self):
-        user = User.objects.create()
-        team = Team.objects.create(name='Test', owner=user)
-        teams = {team.slug: team}
+        result = Team.objects.get_for_user(user2, access=MEMBER_OWNER)
+        assert result == {}
 
-        with self.Settings(SENTRY_PUBLIC=False):
-            result = Team.objects.get_for_user(user, access=MEMBER_OWNER)
+        result = Team.objects.get_for_user(user2, access=MEMBER_USER)
+        assert result == {team.slug: team}
 
-        assert result == teams
+        result = Team.objects.get_for_user(user3, access=MEMBER_OWNER)
+        assert result == {}
