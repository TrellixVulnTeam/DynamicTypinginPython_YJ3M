commit 4e3e220253399af756120435c1ea2c6b1a4015ea
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Mon Jul 23 11:17:58 2018 -0700

    ref(integrations): Actually check sync settings before syncing (#9119)

diff --git a/src/sentry/integrations/example/integration.py b/src/sentry/integrations/example/integration.py
index 3708ad624b..17d764e9da 100644
--- a/src/sentry/integrations/example/integration.py
+++ b/src/sentry/integrations/example/integration.py
@@ -44,6 +44,12 @@ metadata = IntegrationMetadata(
 
 
 class ExampleIntegration(Integration, IssueSyncMixin):
+    comment_key = 'sync_comments'
+    outbound_status_key = 'sync_status_outbound'
+    inbound_status_key = 'sync_status_inbound'
+    outbound_assignee_key = 'sync_assignee_outbound'
+    inbound_assignee_key = 'sync_assignee_inbound'
+
     def create_comment(self):
         pass
 
diff --git a/src/sentry/integrations/issues.py b/src/sentry/integrations/issues.py
index 3b1912aa31..e4abce332d 100644
--- a/src/sentry/integrations/issues.py
+++ b/src/sentry/integrations/issues.py
@@ -133,6 +133,24 @@ class IssueBasicMixin(object):
 
 
 class IssueSyncMixin(IssueBasicMixin):
+    comment_key = None
+    outbound_status_key = None
+    inbound_status_key = None
+    outbound_assignee_key = None
+    inbound_assignee_key = None
+
+    def should_sync(self, attribute):
+        try:
+            key = getattr(self, '%s_key' % attribute)
+        except AttributeError:
+            return False
+
+        if key is None:
+            return False
+
+        config = self.org_integration.config
+
+        return config.get(key, False)
 
     def sync_assignee_outbound(self, external_issue, user, assign=True, **kwargs):
         """
@@ -192,6 +210,8 @@ class IssueSyncMixin(IssueBasicMixin):
                 )
 
     def sync_status_inbound(self, issue_key, data):
+        if not self.should_sync('inbound_status'):
+            return
         affected_groups = list(
             Group.objects.get_groups_by_external_issue(
                 self.model, issue_key,
diff --git a/src/sentry/models/groupassignee.py b/src/sentry/models/groupassignee.py
index ade576cf63..4c4db4e1ed 100644
--- a/src/sentry/models/groupassignee.py
+++ b/src/sentry/models/groupassignee.py
@@ -54,10 +54,16 @@ def sync_group_assignee_inbound(integration, email, external_issue_key, assign=T
 
     logger = logging.getLogger('sentry.integrations.%s' % integration.provider)
 
+    orgs_with_sync_enabled = []
+    for org_id in integration.organizations.values_list('id', flat=True):
+        installation = integration.get_installation(org_id)
+        if installation.should_sync('inbound_assignee'):
+            orgs_with_sync_enabled.append(org_id)
+
     affected_groups = list(
         Group.objects.get_groups_by_external_issue(
             integration, external_issue_key,
-        ),
+        ).filter(project__organization_id__in=orgs_with_sync_enabled),
     )
 
     if not affected_groups:
diff --git a/src/sentry/tasks/integrations.py b/src/sentry/tasks/integrations.py
index 5ae0613539..a0f8c70637 100644
--- a/src/sentry/tasks/integrations.py
+++ b/src/sentry/tasks/integrations.py
@@ -17,9 +17,12 @@ def post_comment(external_issue_id, data, **kwargs):
     # sync Sentry comments to an external issue
     external_issue = ExternalIssue.objects.get(id=external_issue_id)
     integration = Integration.objects.get(id=external_issue.integration_id)
-    integration.get_installation(
-        organization_id=external_issue.organization_id).create_comment(
-        external_issue.key, data['text'])
+    installation = integration.get_installation(
+        organization_id=external_issue.organization_id,
+    )
+    if installation.should_sync('comment'):
+        installation.create_comment(
+            external_issue.key, data['text'])
 
 
 @instrumented_task(
@@ -49,9 +52,12 @@ def sync_assignee_outbound(external_issue_id, user_id, assign, **kwargs):
         user = None
     else:
         user = User.objects.get(id=user_id)
-    integration.get_installation(
-        organization_id=external_issue.organization_id).sync_assignee_outbound(
-        external_issue, user, assign=assign)
+
+    installation = integration.get_installation(
+        organization_id=external_issue.organization_id,
+    )
+    if installation.should_sync('outbound_assignee'):
+        installation.sync_assignee_outbound(external_issue, user, assign=assign)
 
 
 @instrumented_task(
@@ -76,9 +82,10 @@ def sync_status_outbound(group_id, external_issue_id, **kwargs):
         organization_id=external_issue.organization_id,
         project_id=group.project_id,
     )
-    installation.sync_status_outbound(
-        external_issue, group.status == GroupStatus.RESOLVED, group.project_id
-    )
+    if installation.should_sync('outbound_status'):
+        installation.sync_status_outbound(
+            external_issue, group.status == GroupStatus.RESOLVED, group.project_id
+        )
 
 
 @instrumented_task(
diff --git a/tests/sentry/api/endpoints/test_group_notes.py b/tests/sentry/api/endpoints/test_group_notes.py
index 03f05f06c8..4c9776dc6f 100644
--- a/tests/sentry/api/endpoints/test_group_notes.py
+++ b/tests/sentry/api/endpoints/test_group_notes.py
@@ -7,7 +7,7 @@ import mock
 from sentry.integrations.example.integration import ExampleIntegration
 from sentry.models import (
     Activity, GroupLink, GroupSubscription, GroupSubscriptionReason,
-    ExternalIssue, Integration
+    ExternalIssue, Integration, OrganizationIntegration
 )
 from sentry.testutils import APITestCase
 
@@ -184,6 +184,19 @@ class GroupNoteCreateTest(APITestCase):
         )
         integration.add_organization(group.organization.id)
 
+        OrganizationIntegration.objects.filter(
+            integration_id=integration.id,
+            organization_id=group.organization.id,
+        ).update(
+            config={
+                'sync_comments': True,
+                'sync_status_outbound': True,
+                'sync_status_inbound': True,
+                'sync_assignee_outbound': True,
+                'sync_assignee_inbound': True,
+            }
+        )
+
         external_issue = ExternalIssue.objects.create(
             organization_id=group.organization.id,
             integration_id=integration.id,
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index 83fed5c4a2..c39d415b32 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -13,7 +13,7 @@ from sentry import tagstore
 from sentry.models import (
     Activity, ApiToken, EventMapping, Group, GroupAssignee, GroupBookmark, GroupHash, GroupHashTombstone,
     GroupLink, GroupResolution, GroupSeen, GroupShare, GroupSnooze, GroupStatus, GroupSubscription,
-    GroupTombstone, ExternalIssue, Integration, Release, UserOption
+    GroupTombstone, ExternalIssue, Integration, Release, UserOption, OrganizationIntegration
 )
 from sentry.models.event import Event
 from sentry.testutils import APITestCase
@@ -211,10 +211,17 @@ class GroupListTest(APITestCase):
         group = self.create_group(checksum='a' * 32)
         self.create_group(checksum='b' * 32)
         event_id = 'c' * 32
-        event = self.create_event(project_id=self.project.id, group=group, event_id=event_id, tags={'environment': 'test'})
+        event = self.create_event(
+            project_id=self.project.id,
+            group=group,
+            event_id=event_id,
+            tags={
+                'environment': 'test'})
         self.login_as(user=self.user)
 
-        response = self.client.get('{}?query={}&environment=test'.format(self.path, 'c' * 32), format='json')
+        response = self.client.get(
+            '{}?query={}&environment=test'.format(
+                self.path, 'c' * 32), format='json')
         assert response.status_code == 200
         assert len(response.data) == 1
         assert response.data[0]['id'] == six.text_type(group.id)
@@ -462,6 +469,19 @@ class GroupUpdateTest(APITestCase):
             self.project.id, {
                 'resolve_status': 'Resolved', 'resolve_when': 'Resolved'})
         group = self.create_group(status=GroupStatus.UNRESOLVED, organization=org)
+
+        OrganizationIntegration.objects.filter(
+            integration_id=integration.id,
+            organization_id=group.organization.id,
+        ).update(
+            config={
+                'sync_comments': True,
+                'sync_status_outbound': True,
+                'sync_status_inbound': True,
+                'sync_assignee_outbound': True,
+                'sync_assignee_inbound': True,
+            }
+        )
         external_issue = ExternalIssue.objects.get_or_create(
             organization_id=org.id,
             integration_id=integration.id,
@@ -521,6 +541,18 @@ class GroupUpdateTest(APITestCase):
             name='Example',
         )
         integration.add_organization(org.id)
+        OrganizationIntegration.objects.filter(
+            integration_id=integration.id,
+            organization_id=group.organization.id,
+        ).update(
+            config={
+                'sync_comments': True,
+                'sync_status_outbound': True,
+                'sync_status_inbound': True,
+                'sync_assignee_outbound': True,
+                'sync_assignee_inbound': True,
+            }
+        )
         integration.add_project(
             group.project_id, {
                 'resolve_status': 'Resolved', 'resolve_when': 'Resolved'})
diff --git a/tests/sentry/integrations/test_issues.py b/tests/sentry/integrations/test_issues.py
index 13593e409f..37b8174cd1 100644
--- a/tests/sentry/integrations/test_issues.py
+++ b/tests/sentry/integrations/test_issues.py
@@ -1,6 +1,8 @@
 from __future__ import absolute_import
 
-from sentry.models import Group, GroupStatus, Integration, GroupLink, ExternalIssue
+from sentry.models import (
+    ExternalIssue, Group, GroupStatus, GroupLink, Integration, OrganizationIntegration
+)
 from sentry.testutils import TestCase
 
 
@@ -15,6 +17,19 @@ class IssueSyncIntegration(TestCase):
         )
         integration.add_organization(group.organization.id)
 
+        OrganizationIntegration.objects.filter(
+            integration_id=integration.id,
+            organization_id=group.organization.id,
+        ).update(
+            config={
+                'sync_comments': True,
+                'sync_status_outbound': True,
+                'sync_status_inbound': True,
+                'sync_assignee_outbound': True,
+                'sync_assignee_inbound': True,
+            }
+        )
+
         external_issue = ExternalIssue.objects.create(
             organization_id=group.organization.id,
             integration_id=integration.id,
@@ -53,6 +68,19 @@ class IssueSyncIntegration(TestCase):
         )
         integration.add_organization(group.organization.id)
 
+        OrganizationIntegration.objects.filter(
+            integration_id=integration.id,
+            organization_id=group.organization.id,
+        ).update(
+            config={
+                'sync_comments': True,
+                'sync_status_outbound': True,
+                'sync_status_inbound': True,
+                'sync_assignee_outbound': True,
+                'sync_assignee_inbound': True,
+            }
+        )
+
         external_issue = ExternalIssue.objects.create(
             organization_id=group.organization.id,
             integration_id=integration.id,
diff --git a/tests/sentry/models/test_groupassignee.py b/tests/sentry/models/test_groupassignee.py
index e7d9806f24..c2b3981f76 100644
--- a/tests/sentry/models/test_groupassignee.py
+++ b/tests/sentry/models/test_groupassignee.py
@@ -7,7 +7,7 @@ import six
 from sentry.integrations.example.integration import ExampleIntegration
 from sentry.models import (
     GroupAssignee, Activity, Integration, GroupLink, ExternalIssue,
-    sync_group_assignee_inbound
+    OrganizationIntegration, sync_group_assignee_inbound
 )
 from sentry.testutils import TestCase
 
@@ -114,6 +114,19 @@ class GroupAssigneeTestCase(TestCase):
         )
         integration.add_organization(group.organization.id)
 
+        OrganizationIntegration.objects.filter(
+            integration_id=integration.id,
+            organization_id=group.organization.id,
+        ).update(
+            config={
+                'sync_comments': True,
+                'sync_status_outbound': True,
+                'sync_status_inbound': True,
+                'sync_assignee_outbound': True,
+                'sync_assignee_inbound': True,
+            }
+        )
+
         external_issue = ExternalIssue.objects.create(
             organization_id=group.organization.id,
             integration_id=integration.id,
@@ -161,6 +174,19 @@ class GroupAssigneeTestCase(TestCase):
         )
         integration.add_organization(group.organization.id)
 
+        OrganizationIntegration.objects.filter(
+            integration_id=integration.id,
+            organization_id=group.organization.id,
+        ).update(
+            config={
+                'sync_comments': True,
+                'sync_status_outbound': True,
+                'sync_status_inbound': True,
+                'sync_assignee_outbound': True,
+                'sync_assignee_inbound': True,
+            }
+        )
+
         external_issue = ExternalIssue.objects.create(
             organization_id=group.organization.id,
             integration_id=integration.id,
@@ -205,6 +231,19 @@ class GroupAssigneeTestCase(TestCase):
         )
         integration.add_organization(group.organization.id)
 
+        OrganizationIntegration.objects.filter(
+            integration_id=integration.id,
+            organization_id=group.organization.id,
+        ).update(
+            config={
+                'sync_comments': True,
+                'sync_status_outbound': True,
+                'sync_status_inbound': True,
+                'sync_assignee_outbound': True,
+                'sync_assignee_inbound': True,
+            }
+        )
+
         external_issue = ExternalIssue.objects.create(
             organization_id=group.organization.id,
             integration_id=integration.id,
@@ -247,6 +286,19 @@ class GroupAssigneeTestCase(TestCase):
         )
         integration.add_organization(group.organization.id)
 
+        OrganizationIntegration.objects.filter(
+            integration_id=integration.id,
+            organization_id=group.organization.id,
+        ).update(
+            config={
+                'sync_comments': True,
+                'sync_status_outbound': True,
+                'sync_status_inbound': True,
+                'sync_assignee_outbound': True,
+                'sync_assignee_inbound': True,
+            }
+        )
+
         external_issue = ExternalIssue.objects.create(
             organization_id=group.organization.id,
             integration_id=integration.id,
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index fbc23c7143..9f6c90e22b 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -22,7 +22,7 @@ from sentry.event_manager import (
 from sentry.models import (
     Activity, Environment, Event, ExternalIssue, Group, GroupEnvironment, GroupHash, GroupLink,
     GroupRelease, GroupResolution, GroupStatus, GroupTombstone, EventMapping, Integration, Release,
-    ReleaseProjectEnvironment, UserReport
+    ReleaseProjectEnvironment, OrganizationIntegration, UserReport
 )
 from sentry.signals import event_discarded, event_saved
 from sentry.testutils import assert_mock_called_once_with_partial, TestCase, TransactionTestCase
@@ -529,6 +529,19 @@ class EventManagerTest(TransactionTestCase):
             name='Example',
         )
         integration.add_organization(org.id)
+        OrganizationIntegration.objects.filter(
+            integration_id=integration.id,
+            organization_id=group.organization.id,
+        ).update(
+            config={
+                'sync_comments': True,
+                'sync_status_outbound': True,
+                'sync_status_inbound': True,
+                'sync_assignee_outbound': True,
+                'sync_assignee_inbound': True,
+            }
+        )
+
         integration.add_project(
             group.project_id, {
                 'resolve_status': 'Resolved', 'resolve_when': 'Resolved'})
@@ -1389,6 +1402,7 @@ class GetHashesFromFingerprintTest(TestCase):
             message='Foo bar',
         )
         fp_checksums = get_hashes_from_fingerprint(event, ["{{default}}"])
+
         def_checksums = get_hashes_for_event(event)
         assert def_checksums == fp_checksums
 
@@ -1415,6 +1429,7 @@ class GetHashesFromFingerprintTest(TestCase):
             message='Foo bar',
         )
         fp_checksums = get_hashes_from_fingerprint(event, ["{{default}}", "custom"])
+
         def_checksums = get_hashes_for_event(event)
         assert len(fp_checksums) == len(def_checksums)
         assert def_checksums != fp_checksums
