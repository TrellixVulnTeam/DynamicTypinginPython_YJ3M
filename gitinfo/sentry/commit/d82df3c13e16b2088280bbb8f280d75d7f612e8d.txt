commit d82df3c13e16b2088280bbb8f280d75d7f612e8d
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Aug 28 00:28:32 2013 -0700

    Add User.ip_address

diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index 465b985a46..b5d684c31d 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -1120,21 +1120,25 @@ class User(Interface):
     """
     An interface which describes the authenticated User for a request.
 
-    All data is arbitrary and optional other than the ``id``
-    field which should be a string representing the user's unique identifier.
+    You should provide **at least** either an `id` (a unique identifier for
+    an authenticated user) or `ip_address` (their IP address).
+
+    All other data is.
 
     >>> {
     >>>     "id": "unique_id",
     >>>     "username": "my_user",
     >>>     "email": "foo@example.com"
+    >>>     "ip_address": "127.0.0.1"
     >>> }
     """
     attrs = ('id', 'email', 'username', 'data')
 
-    def __init__(self, id=None, email=None, username=None, **kwargs):
+    def __init__(self, id=None, email=None, username=None, ip_address=None, **kwargs):
         self.id = id
         self.email = email
         self.username = username
+        self.ip_address = ip_address
         self.data = kwargs
 
     def serialize(self):
@@ -1146,6 +1150,7 @@ class User(Interface):
             'id': self.id,
             'username': self.username,
             'email': self.email,
+            'ip_address': self.ip_address,
             'data': self.data,
         }
 
@@ -1158,6 +1163,7 @@ class User(Interface):
         return render_to_string('sentry/partial/interfaces/user.html', {
             'is_public': is_public,
             'event': event,
+            'user_ip_address': self.ip_address,
             'user_id': self.id,
             'user_username': self.username,
             'user_email': self.email,
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index d5bcdc8bc6..aabd5bea9f 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -378,6 +378,7 @@ class GroupManager(BaseManager, ChartMixin):
     use_for_related_fields = True
 
     def normalize_event_data(self, data):
+        # TODO(dcramer): store http.env.REMOTE_ADDR as user.ip
         # First we pull out our top-level (non-data attr) kwargs
         if not data.get('level') or data['level'] not in LOG_LEVELS:
             data['level'] = logging.ERROR
diff --git a/src/sentry/models.py b/src/sentry/models.py
index e9795f0cc8..93056d526a 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -522,7 +522,17 @@ class EventBase(Model):
     def ip_address(self):
         http_data = self.data.get('sentry.interfaces.Http')
         if http_data and 'env' in http_data:
-            return http_data['env'].get('REMOTE_ADDR')
+            value = http_data['env'].get('REMOTE_ADDR')
+            if value:
+                return value
+
+        user_data = self.data.get('sentry.interfaces.User')
+        if user_data:
+            value = user_data.get('ip_address')
+            if value:
+                return value
+
+        return None
 
     @property
     def user_ident(self):
