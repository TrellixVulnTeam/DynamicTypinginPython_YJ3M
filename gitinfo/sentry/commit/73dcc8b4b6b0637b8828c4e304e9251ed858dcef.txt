commit 73dcc8b4b6b0637b8828c4e304e9251ed858dcef
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue May 5 17:14:40 2020 -0700

    ref(alerts): Use single environments for alerts (#18634)

diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx
index 7577c5a18d..5bfd2a3a72 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx
@@ -25,6 +25,6 @@ export function createDefaultRule(): UnsavedIncidentRule {
     timeWindow: 1,
     triggers: [createDefaultTrigger()],
     projects: [],
-    environment: [],
+    environment: '',
   };
 }
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
index 495a5db7bf..79ac358b6d 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
@@ -30,15 +30,10 @@ class IncidentRulesDetails extends AsyncView<Props, State> {
     };
   }
 
-  getEndpoints() {
+  getEndpoints(): [string, string][] {
     const {orgId, projectId, ruleId} = this.props.params;
 
-    return [
-      ['rule', `/projects/${orgId}/${projectId}/alert-rules/${ruleId}/`] as [
-        string,
-        string
-      ],
-    ];
+    return [['rule', `/projects/${orgId}/${projectId}/alert-rules/${ruleId}/`]];
   }
 
   handleSubmitSuccess = () => {
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx
index d4a52a972c..f663fcd3b5 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx
@@ -7,11 +7,12 @@ import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {addErrorMessage} from 'app/actionCreators/indicator';
 import {defined} from 'app/utils';
 import {getDisplayName} from 'app/utils/environment';
-import {t} from 'app/locale';
+import {t, tct} from 'app/locale';
 import FormField from 'app/views/settings/components/forms/formField';
 import SearchBar from 'app/views/events/searchBar';
 import SelectField from 'app/views/settings/components/forms/selectField';
 import space from 'app/styles/space';
+import theme from 'app/utils/theme';
 import Tooltip from 'app/components/tooltip';
 
 import {AlertRuleAggregations, TimeWindow} from './types';
@@ -73,6 +74,26 @@ class RuleConditionsForm extends React.PureComponent<Props, State> {
 
   render() {
     const {organization, disabled, onFilterUpdate} = this.props;
+    const {environments} = this.state;
+
+    const environmentList: [string, React.ReactNode][] = defined(environments)
+      ? environments.map((env: Environment) => [env.name, getDisplayName(env)])
+      : [];
+
+    const anyEnvironmentLabel = (
+      <React.Fragment>
+        {t('All Environments')}
+        <div className="all-environment-note">
+          {tct(
+            `This will count events across every environment. For example,
+             having 50 [code1:production] events and 50 [code2:development]
+             events would trigger an alert with a critical threshold of 100.`,
+            {code1: <code />, code2: <code />}
+          )}
+        </div>
+      </React.Fragment>
+    );
+    environmentList.unshift(['', anyEnvironmentLabel]);
 
     return (
       <Panel>
@@ -146,18 +167,23 @@ class RuleConditionsForm extends React.PureComponent<Props, State> {
           <SelectField
             name="environment"
             label={t('Environment')}
+            placeholder={t('Select an environment')}
             help={t('Choose which environment events must match')}
-            placeholder={t('All environments')}
-            choices={
-              defined(this.state.environments)
-                ? this.state.environments.map((env: Environment) => [
-                    env.name,
-                    getDisplayName(env),
-                  ])
-                : []
-            }
+            styles={{
+              singleValue: (base: any) => ({
+                ...base,
+                '.all-environment-note': {display: 'none'},
+              }),
+              option: (base: any, state: any) => ({
+                ...base,
+                '.all-environment-note': {
+                  ...(!state.isSelected && !state.isFocused ? {color: theme.gray3} : {}),
+                  fontSize: theme.fontSizeSmall,
+                },
+              }),
+            }}
+            choices={environmentList}
             isDisabled={disabled || this.state.environments === null}
-            multiple
             isClearable
           />
         </PanelBody>
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
index f47a8fd594..03b3b8d0c1 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
@@ -426,7 +426,10 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
               aggregation: rule.aggregation,
               query: rule.query || '',
               timeWindow: rule.timeWindow,
-              environment: rule.environment || [],
+              environment:
+                (Array.isArray(rule.environment)
+                  ? rule.environment[0]
+                  : rule.environment) || '',
             }}
             saveOnBlur={false}
             onSubmit={this.handleSubmit}
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
index f18024829d..ae1086b2d5 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
@@ -45,7 +45,7 @@ export type UnsavedIncidentRule = {
   aggregation: AlertRuleAggregations;
   aggregations: AlertRuleAggregations[];
   projects: string[];
-  environment: string[];
+  environment: string | string[]; // Temporarily can be either
   query: string;
   timeWindow: number;
   triggers: Trigger[];
