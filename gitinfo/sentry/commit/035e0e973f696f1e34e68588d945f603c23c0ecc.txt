commit 035e0e973f696f1e34e68588d945f603c23c0ecc
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu May 10 15:51:25 2018 -0700

    feat(ui): Save last route when going to settings (APP-181) (#8329)
    
    * feat(ui): Save last route when going to settings
    
    ... this allows user to go back to the last route they were at within
    the new settings.
    
    * Add "lastProject" to latestContextStore
    * Add "lastRoute" to latestContextStore
    * Save last route when `OrganizationRoot` or `ProjectDetailsLayout` unmounts
    * Unset active project when `OrganizationRoot` mount
    * save state when settings is initially rendered (this is used in back button label)
    * change back button to ignore latest project, only use url params (if lastRoute is not set)

diff --git a/src/sentry/static/sentry/app/actionCreators/navigation.jsx b/src/sentry/static/sentry/app/actionCreators/navigation.jsx
index 95a4631cda..59385b148f 100644
--- a/src/sentry/static/sentry/app/actionCreators/navigation.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/navigation.jsx
@@ -2,6 +2,7 @@ import React from 'react';
 
 import {openModal} from 'app/actionCreators/modal';
 import ContextPickerModal from 'app/components/contextPickerModal';
+import NavigationActions from 'app/actions/navigationActions';
 
 export function navigateTo(to, router) {
   // Check for placeholder params
@@ -26,3 +27,7 @@ export function navigateTo(to, router) {
     router.push(to);
   }
 }
+
+export function setLastRoute(route) {
+  NavigationActions.setLastRoute(route);
+}
diff --git a/src/sentry/static/sentry/app/actions/navigationActions.jsx b/src/sentry/static/sentry/app/actions/navigationActions.jsx
new file mode 100644
index 0000000000..28c143b998
--- /dev/null
+++ b/src/sentry/static/sentry/app/actions/navigationActions.jsx
@@ -0,0 +1,3 @@
+import Reflux from 'reflux';
+
+export default Reflux.createActions(['setLastRoute']);
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 244151988c..e04955a4b9 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -50,6 +50,7 @@ import OrganizationMemberDetail from 'app/views/settings/organization/members/or
 import OrganizationMembersView from 'app/views/settings/organization/members/organizationMembersView';
 import OrganizationProjectsView from 'app/views/settings/organization/projects/organizationProjectsView';
 import OrganizationRateLimits from 'app/views/organizationRateLimits';
+import OrganizationRoot from 'app/views/organizationRoot';
 import OrganizationRepositoriesView from 'app/views/organizationRepositoriesView';
 import OrganizationGeneralSettingsView from 'app/views/settings/organization/general/organizationGeneralSettingsView';
 import OrganizationStats from 'app/views/organizationStats';
@@ -649,50 +650,51 @@ function routes() {
       </Route>
 
       <Route path="/:orgId/" component={errorHandler(OrganizationDetails)}>
-        <IndexRoute component={errorHandler(OrganizationDashboard)} />
+        <Route component={errorHandler(OrganizationRoot)}>
+          <IndexRoute component={errorHandler(OrganizationDashboard)} />
+          <Route
+            path="/organizations/:orgId/activity/"
+            component={errorHandler(OrganizationActivity)}
+          />
 
-        <Route
-          path="/organizations/:orgId/activity/"
-          component={errorHandler(OrganizationActivity)}
-        />
+          <Route
+            path="/organizations/:orgId/teams/new/"
+            component={errorHandler(TeamCreate)}
+          />
 
-        <Route
-          path="/organizations/:orgId/teams/new/"
-          component={errorHandler(TeamCreate)}
-        />
+          <Route path="/organizations/:orgId/" component={OrganizationHomeContainer}>
+            <Route
+              path="projects/"
+              component={errorHandler(OrganizationTeamsProjectsView)}
+            />
+            {hooksOrgRoutes}
+            {orgSettingsRoutes}
+            <Route path="stats/" component={errorHandler(OrganizationStats)} />
+          </Route>
 
-        <Route path="/organizations/:orgId/" component={OrganizationHomeContainer}>
           <Route
-            path="projects/"
-            component={errorHandler(OrganizationTeamsProjectsView)}
+            path="/organizations/:orgId/issues/assigned/"
+            component={errorHandler(MyIssuesAssignedToMe)}
+          />
+          <Route
+            path="/organizations/:orgId/issues/bookmarks/"
+            component={errorHandler(MyIssuesBookmarked)}
+          />
+          <Route
+            path="/organizations/:orgId/issues/history/"
+            component={errorHandler(MyIssuesViewed)}
           />
-          {hooksOrgRoutes}
-          {orgSettingsRoutes}
-          <Route path="stats/" component={errorHandler(OrganizationStats)} />
-        </Route>
-
-        <Route
-          path="/organizations/:orgId/issues/assigned/"
-          component={errorHandler(MyIssuesAssignedToMe)}
-        />
-        <Route
-          path="/organizations/:orgId/issues/bookmarks/"
-          component={errorHandler(MyIssuesBookmarked)}
-        />
-        <Route
-          path="/organizations/:orgId/issues/history/"
-          component={errorHandler(MyIssuesViewed)}
-        />
 
-        <Route
-          path="/organizations/:orgId/projects/new/"
-          component={errorHandler(NewProject)}
-        />
+          <Route
+            path="/organizations/:orgId/projects/new/"
+            component={errorHandler(NewProject)}
+          />
 
-        <Route
-          path="/organizations/:orgId/projects/choose/"
-          component={errorHandler(ProjectChooser)}
-        />
+          <Route
+            path="/organizations/:orgId/projects/choose/"
+            component={errorHandler(ProjectChooser)}
+          />
+        </Route>
 
         <Route
           path=":projectId/getting-started/"
diff --git a/src/sentry/static/sentry/app/stores/latestContextStore.jsx b/src/sentry/static/sentry/app/stores/latestContextStore.jsx
index 97fd54c007..4e98c6ed74 100644
--- a/src/sentry/static/sentry/app/stores/latestContextStore.jsx
+++ b/src/sentry/static/sentry/app/stores/latestContextStore.jsx
@@ -3,6 +3,7 @@ import Reflux from 'reflux';
 import ProjectActions from 'app/actions/projectActions';
 import OrganizationsActions from 'app/actions/organizationsActions';
 import EnvironmentActions from 'app/actions/environmentActions';
+import NavigationActions from 'app/actions/navigationActions';
 
 // Keeps track of last usable project/org
 // this currently won't track when users navigate out of a org/project completely,
@@ -23,17 +24,29 @@ const LatestContextStore = Reflux.createStore({
     this.listenTo(OrganizationsActions.update, this.onUpdateOrganization);
     this.listenTo(EnvironmentActions.setActive, this.onSetActiveEnvironment);
     this.listenTo(EnvironmentActions.clearActive, this.onClearActiveEnvironment);
+    this.listenTo(NavigationActions.setLastRoute, this.onSetLastRoute);
   },
 
   reset() {
     this.state = {
       project: null,
+      lastProject: null,
       organization: null,
       environment: null,
+      lastRoute: null,
     };
     return this.state;
   },
 
+  onSetLastRoute(route) {
+    this.state = {
+      ...this.state,
+      lastRoute: route,
+    };
+
+    this.trigger(this.state);
+  },
+
   onUpdateOrganization(org) {
     // Don't do anything if base/target orgs are falsey
     if (!this.state.organization) return;
@@ -71,12 +84,14 @@ const LatestContextStore = Reflux.createStore({
     if (!project) {
       this.state = {
         ...this.state,
+        lastProject: this.state.project,
         project: null,
       };
     } else if (!this.state.project || this.state.project.slug !== project.slug) {
       // Update only if different
       this.state = {
         ...this.state,
+        lastProject: this.state.project,
         project,
       };
     }
diff --git a/src/sentry/static/sentry/app/utils/withLatestContext.jsx b/src/sentry/static/sentry/app/utils/withLatestContext.jsx
index 96aaf22b0b..ad5615c34f 100644
--- a/src/sentry/static/sentry/app/utils/withLatestContext.jsx
+++ b/src/sentry/static/sentry/app/utils/withLatestContext.jsx
@@ -22,7 +22,7 @@ const withLatestContext = WrappedComponent =>
       render() {
         let {organizations} = this.props;
         let {latestContext} = this.state;
-        let {organization, project} = latestContext || {};
+        let {organization, project, lastRoute} = latestContext || {};
 
         // Even though org details exists in LatestContextStore,
         // fetch organization from OrganizationsStore so that we can
@@ -39,6 +39,7 @@ const withLatestContext = WrappedComponent =>
             organizations={organizations}
             organization={latestOrganization}
             project={project}
+            lastRoute={lastRoute}
             {...this.props}
           />
         );
diff --git a/src/sentry/static/sentry/app/views/organizationRoot.jsx b/src/sentry/static/sentry/app/views/organizationRoot.jsx
new file mode 100644
index 0000000000..95657a3c1e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationRoot.jsx
@@ -0,0 +1,28 @@
+import {withRouter} from 'react-router';
+import React from 'react';
+
+import {setActiveProject} from 'app/actionCreators/projects';
+import {setLastRoute} from 'app/actionCreators/navigation';
+
+/**
+ * This is the parent container for organization-level views such
+ * as the Dashboard, Stats, Activity, etc...
+ *
+ * Currently is just used to unset active project
+ */
+class OrganizationRoot extends React.Component {
+  componentDidMount() {
+    setActiveProject(null);
+  }
+  componentWillUnmount() {
+    // Save last route so that we can jump back to view from settings
+    setLastRoute(this.props.location.pathname);
+  }
+
+  render() {
+    return this.props.children;
+  }
+}
+
+export {OrganizationRoot};
+export default withRouter(OrganizationRoot);
diff --git a/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx b/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
index f06eb316be..96089f979e 100644
--- a/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
@@ -1,7 +1,9 @@
+import {withRouter} from 'react-router';
 import React from 'react';
 import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
 
+import {setLastRoute} from 'app/actionCreators/navigation';
 import SentryTypes from 'app/proptypes';
 import EnvironmentStore from 'app/stores/environmentStore';
 import ProjectHeader from 'app/components/projectHeader';
@@ -24,6 +26,11 @@ const ProjectDetailsLayout = createReactClass({
     };
   },
 
+  componentWillUnmount() {
+    // Save last route so that we can jump back to view from settings
+    setLastRoute(this.props.location.pathname);
+  },
+
   /**
    * This callback can be invoked by the child component
    * to update the active nav section (which is then passed
@@ -60,4 +67,5 @@ const ProjectDetailsLayout = createReactClass({
   },
 });
 
-export default withEnvironment(ProjectDetailsLayout);
+export {ProjectDetailsLayout};
+export default withRouter(withEnvironment(ProjectDetailsLayout));
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBackButton.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBackButton.jsx
index 46f02fe3d2..c300bc1a6b 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBackButton.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBackButton.jsx
@@ -1,8 +1,9 @@
 import {Link} from 'react-router';
 import React from 'react';
+import PropTypes from 'prop-types';
 import styled from 'react-emotion';
-import {t} from 'app/locale';
 
+import {t, tct} from 'app/locale';
 import InlineSvg from 'app/components/inlineSvg';
 import SentryTypes from 'app/proptypes';
 import replaceRouterParams from 'app/utils/replaceRouterParams';
@@ -29,25 +30,41 @@ const Icon = styled(InlineSvg)`
 class BackButton extends React.Component {
   static propTypes = {
     organization: SentryTypes.Organization,
-    project: SentryTypes.Project,
+    lastRoute: PropTypes.string,
+  };
+
+  static contextTypes = {
+    lastAppContext: PropTypes.oneOf(['project', 'organization']),
   };
 
   render() {
-    let {params, organization, project} = this.props;
+    let {params, organization, lastRoute} = this.props;
+    let {lastAppContext} = this.context;
+    // lastAppContext is set when Settings is initial loaded,
+    // so if that is truthy, determine if we have project context at that point
+    // otherwise use what we have in latest context (e.g. if you navigated to settings directly)
+    let shouldGoBackToProject = lastRoute && lastAppContext === 'project';
 
-    let projectId = params.projectId || (project && project.slug);
+    let projectId = shouldGoBackToProject || !lastAppContext ? params.projectId : null;
     let orgId = params.orgId || (organization && organization.slug);
     let url = projectId ? '/:orgId/:projectId/' : '/:orgId/';
-    let label = projectId ? t('Project') : t('Organization');
+    let label =
+      shouldGoBackToProject || (!lastAppContext && projectId)
+        ? t('Project')
+        : t('Organization');
 
     return (
       <BackButtonWrapper
-        to={replaceRouterParams(url, {
-          orgId,
-          projectId,
-        })}
+        to={
+          lastRoute ||
+          replaceRouterParams(url, {
+            orgId,
+            projectId,
+          })
+        }
       >
-        <Icon src="icon-chevron-left" size="10px" /> Back to {label}
+        <Icon src="icon-chevron-left" size="10px" />
+        {tct('Back to [label]', {label})}
       </BackButtonWrapper>
     );
   }
@@ -55,4 +72,5 @@ class BackButton extends React.Component {
 
 const SettingsBackButton = withLatestContext(BackButton);
 
+export {BackButton};
 export default SettingsBackButton;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsLayout.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsLayout.jsx
index 49cb2b15fc..cf597f55e9 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsLayout.jsx
@@ -113,7 +113,7 @@ class SettingsLayout extends React.Component {
         <SettingsHeader>
           <SettingsSubheader>
             <Container>
-              <SettingsBackButton params={params}>Back to Project</SettingsBackButton>
+              <SettingsBackButton params={params} />
             </Container>
           </SettingsSubheader>
           <Container>
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsWrapper.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsWrapper.jsx
index aadd5e2f58..c45faa78bc 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsWrapper.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsWrapper.jsx
@@ -1,8 +1,11 @@
 import $ from 'jquery';
 import React from 'react';
+import PropTypes from 'prop-types';
 import styled from 'react-emotion';
 
 import ScrollToTop from 'app/views/settings/components/scrollToTop';
+import SentryTypes from 'app/proptypes';
+import withLatestContext from 'app/utils/withLatestContext';
 
 const StyledSettingsWrapper = styled.div`
   font-family: 'Rubik', sans-serif;
@@ -18,9 +21,34 @@ const StyledSettingsWrapper = styled.div`
 `;
 
 class SettingsWrapper extends React.Component {
-  componentWillMount() {
+  static propTypes = {
+    project: SentryTypes.Project,
+    organization: SentryTypes.Organization,
+  };
+  static childContextTypes = {
+    lastAppContext: PropTypes.oneOf(['project', 'organization']),
+  };
+
+  constructor(props) {
+    super(props);
+    // save current context
+    this.state = {
+      lastAppContext: !!props.project
+        ? 'project'
+        : !!props.organization ? 'organization' : null,
+    };
+  }
+
+  getChildContext() {
+    return {
+      lastAppContext: this.state.lastAppContext,
+    };
+  }
+
+  componentDidMount() {
     $(document.body).addClass('new-settings');
   }
+
   componentWillUnmount() {
     $(document.body).removeClass('new-settings');
   }
@@ -34,4 +62,4 @@ class SettingsWrapper extends React.Component {
   }
 }
 
-export default SettingsWrapper;
+export default withLatestContext(SettingsWrapper);
diff --git a/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap b/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
index 51baf4c9fb..ce06971436 100644
--- a/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
@@ -5,9 +5,7 @@ exports[`SettingsLayout renders 1`] = `
   <SettingsHeader>
     <SettingsSubheader>
       <Container>
-        <withOrganizations>
-          Back to Project
-        </withOrganizations>
+        <withOrganizations />
       </Container>
     </SettingsSubheader>
     <Container>
diff --git a/tests/js/spec/views/organizationRoot.spec.jsx b/tests/js/spec/views/organizationRoot.spec.jsx
new file mode 100644
index 0000000000..284af393a1
--- /dev/null
+++ b/tests/js/spec/views/organizationRoot.spec.jsx
@@ -0,0 +1,34 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import {OrganizationRoot} from 'app/views/organizationRoot';
+import {setActiveProject} from 'app/actionCreators/projects';
+import {setLastRoute} from 'app/actionCreators/navigation';
+
+jest.mock('app/actionCreators/projects', () => ({
+  setActiveProject: jest.fn(),
+}));
+
+jest.mock('app/actionCreators/navigation', () => ({
+  setLastRoute: jest.fn(),
+}));
+
+describe('OrganizationRoot', function() {
+  it('sets active project as null when mounted', function() {
+    mount(<OrganizationRoot location={{}}>{null}</OrganizationRoot>);
+
+    expect(setActiveProject).toHaveBeenCalledWith(null);
+  });
+
+  it('calls `setLastRoute` when unmounted', function() {
+    let wrapper = mount(
+      <OrganizationRoot location={{pathname: '/org-slug/dashboard/'}}>
+        {null}
+      </OrganizationRoot>
+    );
+
+    wrapper.unmount();
+
+    expect(setLastRoute).toHaveBeenCalledWith('/org-slug/dashboard/');
+  });
+});
diff --git a/tests/js/spec/views/projects/projectDetailsLayout.spec.jsx b/tests/js/spec/views/projects/projectDetailsLayout.spec.jsx
new file mode 100644
index 0000000000..d801436e4b
--- /dev/null
+++ b/tests/js/spec/views/projects/projectDetailsLayout.spec.jsx
@@ -0,0 +1,23 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import {ProjectDetailsLayout} from 'app/views/projectDetailsLayout';
+import {setLastRoute} from 'app/actionCreators/navigation';
+
+jest.mock('app/actionCreators/navigation', () => ({
+  setLastRoute: jest.fn(),
+}));
+
+jest.unmock('app/utils/recreateRoute');
+
+describe('ProjectLayout', function() {
+  it('calls `setLastRoute` when unmounting', function() {
+    let wrapper = mount(
+      <ProjectDetailsLayout location={{pathname: '/org-slug/dashboard/'}} />
+    );
+
+    wrapper.unmount();
+
+    expect(setLastRoute).toHaveBeenCalledWith('/org-slug/dashboard/');
+  });
+});
diff --git a/tests/js/spec/views/settings/components/settingsBackButton.spec.jsx b/tests/js/spec/views/settings/components/settingsBackButton.spec.jsx
new file mode 100644
index 0000000000..771b0a7bcc
--- /dev/null
+++ b/tests/js/spec/views/settings/components/settingsBackButton.spec.jsx
@@ -0,0 +1,74 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import {BackButton} from 'app/views/settings/components/settingsBackButton';
+
+describe('SettingsBackButton', function() {
+  const project = TestStubs.Project();
+  const org = TestStubs.Organization();
+
+  describe('No Context From App', function() {
+    it('renders "Back to Organization" when no project slug', function() {
+      let wrapper = mount(<BackButton params={{}} organization={org} />);
+      expect(wrapper.find('BackButtonWrapper').text()).toBe('Back to Organization');
+      expect(wrapper.find('BackButtonWrapper').prop('to')).toBe('/org-slug/');
+    });
+
+    it('renders "Back to Project" only when projectId is present in route', function() {
+      let wrapper = mount(
+        <BackButton params={{projectId: 'project-slug'}} organization={org} />
+      );
+      expect(wrapper.find('BackButtonWrapper').text()).toBe('Back to Project');
+      expect(wrapper.find('BackButtonWrapper').prop('to')).toBe(
+        '/org-slug/project-slug/'
+      );
+    });
+
+    it('uses "last route" when provided', function() {
+      let wrapper = mount(
+        <BackButton
+          lastRoute="/org-slug/project-slug/foo/bar/"
+          params={{}}
+          organization={org}
+          project={project}
+        />
+      );
+      expect(wrapper.find('BackButtonWrapper').prop('to')).toBe(
+        '/org-slug/project-slug/foo/bar/'
+      );
+    });
+  });
+
+  describe('With Context From App', function() {
+    it('renders "Back to Project" only if `lastAppContext` is "project"', function() {
+      let wrapper = mount(
+        <BackButton
+          params={{projectId: 'project-slug'}}
+          organization={org}
+          lastRoute="/foo/"
+          project={project}
+        />,
+        {
+          context: {
+            lastAppContext: 'project',
+          },
+        }
+      );
+      expect(wrapper.find('BackButtonWrapper').text()).toBe('Back to Project');
+      expect(wrapper.find('BackButtonWrapper').prop('to')).toBe('/foo/');
+    });
+
+    it('renders "Back to Organization" if `lastAppContext` is "organization", even with projectId in route ', function() {
+      let wrapper = mount(
+        <BackButton params={{projectId: 'project-slug'}} organization={org} />,
+        {
+          context: {
+            lastAppContext: 'organization',
+          },
+        }
+      );
+      expect(wrapper.find('BackButtonWrapper').text()).toBe('Back to Organization');
+      expect(wrapper.find('BackButtonWrapper').prop('to')).toBe('/org-slug/');
+    });
+  });
+});
