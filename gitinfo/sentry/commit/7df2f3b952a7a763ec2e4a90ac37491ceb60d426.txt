commit 7df2f3b952a7a763ec2e4a90ac37491ceb60d426
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Feb 9 13:18:23 2015 -0800

    Add security token header to sourcemap requests

diff --git a/src/sentry/http.py b/src/sentry/http.py
index 3a2be7dc27..8f33a6c688 100644
--- a/src/sentry/http.py
+++ b/src/sentry/http.py
@@ -22,9 +22,7 @@ CHARSET_RE = re.compile(r'charset=(\S+)')
 
 DEFAULT_ENCODING = 'utf-8'
 
-DEFAULT_HEADERS = (
-    ('Accept-Encoding', 'gzip'),
-)
+DEFAULT_HEADERS = ()
 
 DEFAULT_USER_AGENT = 'sentry/%s' % sentry.VERSION
 
@@ -71,6 +69,7 @@ def safe_urlopen(url, data=None, headers=DEFAULT_HEADERS,
 
     req = urllib2.Request(url, data)
     req.add_header('User-Agent', user_agent)
+    req.add_header('Accept-Encoding', 'gzip')
     for key, value in headers:
         req.add_header(key, value)
 
diff --git a/src/sentry/tasks/fetch_source.py b/src/sentry/tasks/fetch_source.py
index 87ce887228..a8aeaf1d46 100644
--- a/src/sentry/tasks/fetch_source.py
+++ b/src/sentry/tasks/fetch_source.py
@@ -23,6 +23,7 @@ from urllib2 import HTTPError
 from sentry.constants import MAX_CULPRIT_LENGTH
 from sentry.http import safe_urlopen, safe_urlread
 from sentry.utils.cache import cache
+from sentry.utils.http import is_valid_origin
 from sentry.utils.sourcemaps import sourcemap_to_index, find_source
 from sentry.utils.strings import truncatechars
 
@@ -147,7 +148,7 @@ def discover_sourcemap(result):
     return sourcemap
 
 
-def fetch_url(url):
+def fetch_url(url, project=None):
     """
     Pull down a URL, returning a UrlResult object.
 
@@ -165,9 +166,19 @@ def fetch_url(url):
         if domain_result:
             return BAD_SOURCE
 
+        headers = []
+        if project and is_valid_origin(url, project=project):
+            token = project.get_option('sentry:token')
+            if token:
+                headers.append(('X-Sentry-Token', token))
+
         try:
-            request = safe_urlopen(url, allow_redirects=True,
-                                   timeout=settings.SENTRY_SOURCE_FETCH_TIMEOUT)
+            request = safe_urlopen(
+                url,
+                allow_redirects=True,
+                headers=headers,
+                timeout=settings.SENTRY_SOURCE_FETCH_TIMEOUT,
+            )
         except HTTPError:
             result = BAD_SOURCE
         except Exception:
@@ -193,11 +204,11 @@ def fetch_url(url):
     return UrlResult(url, *result)
 
 
-def fetch_sourcemap(url):
+def fetch_sourcemap(url, project=None):
     if is_data_uri(url):
         body = base64.b64decode(url[BASE64_PREAMBLE_LENGTH:])
     else:
-        result = fetch_url(url)
+        result = fetch_url(url, project=project)
         if result == BAD_SOURCE:
             return
 
@@ -234,6 +245,7 @@ def expand_javascript_source(data, max_fetches=MAX_RESOURCE_FETCHES, **kwargs):
     Mutates the input ``data`` with expanded context if available.
     """
     from sentry.interfaces.stacktrace import Stacktrace
+    from sentry.models import Project
 
     try:
         stacktraces = [
@@ -261,6 +273,8 @@ def expand_javascript_source(data, max_fetches=MAX_RESOURCE_FETCHES, **kwargs):
         logger.debug('Event %r has no frames with enough context to fetch remote source', data['event_id'])
         return data
 
+    project = Project.objects.get_from_cache(id=data['project'])
+
     pending_file_list = set()
     done_file_list = set()
     sourcemap_capable = set()
@@ -284,7 +298,7 @@ def expand_javascript_source(data, max_fetches=MAX_RESOURCE_FETCHES, **kwargs):
 
         # TODO: respect cache-contro/max-age headers to some extent
         logger.debug('Fetching remote source %r', filename)
-        result = fetch_url(filename)
+        result = fetch_url(filename, project=project)
 
         if result == BAD_SOURCE:
             logger.debug('Bad source file %r', filename)
@@ -317,7 +331,7 @@ def expand_javascript_source(data, max_fetches=MAX_RESOURCE_FETCHES, **kwargs):
             continue
 
         # pull down sourcemap
-        index = fetch_sourcemap(sourcemap)
+        index = fetch_sourcemap(sourcemap, project=project)
         if not index:
             logger.debug('Failed parsing sourcemap index: %r', sourcemap[:15])
             continue
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 2d7ff846b4..6a76c42b6c 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -44,6 +44,7 @@
                     <p>{% blocktrans %}This will restrict requests based on the <code>Origin</code> and <code>Referer</code> headers.{% endblocktrans %}</p>
                     {{ field|as_crispy_field }}
                 {% endwith %}
+                {{ form.token|as_crispy_field }}
             </fieldset>
             <div class="form-actions">
                 <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index 004793ab03..2dd8fe40b3 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -7,6 +7,7 @@ from django.core.validators import URLValidator
 from django.http import HttpResponseRedirect
 from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
+from uuid import uuid1
 
 from sentry.models import (
     AuditLogEntry, AuditLogEntryEvent, OrganizationMemberType, Project, Team
@@ -64,6 +65,8 @@ class EditProjectForm(forms.ModelForm):
     team = CustomTypedChoiceField(choices=(), coerce=int, required=False)
     origins = OriginsField(label=_('Allowed Domains'), required=False,
         help_text=_('Separate multiple entries with a newline.'))
+    token = forms.CharField(label=_('Security token'), required=True,
+        help_text=_('Outbound requests matching Allowed Domains will have the header "X-Sentry-Token: {token}" appended.'))
     resolve_age = RangeField(help_text=_('Treat an event as resolved if it hasn\'t been seen for this amount of time.'),
         required=False, min_value=0, max_value=168, step_value=1)
     scrub_data = forms.BooleanField(
@@ -180,10 +183,17 @@ class ProjectSettingsView(ProjectView):
             access=OrganizationMemberType.ADMIN,
         )
 
+        # TODO(dcramer): this update should happen within a lock
+        security_token = project.get_option('sentry:token', None)
+        if security_token is None:
+            security_token = uuid1().hex
+            project.update_option('sentry:token', security_token)
+
         return EditProjectForm(
             request, organization, team_list, request.POST or None,
             instance=project, initial={
                 'origins': '\n'.join(project.get_option('sentry:origins', None) or []),
+                'token': security_token,
                 'resolve_age': int(project.get_option('sentry:resolve_age', 0)),
                 'scrub_data': bool(project.get_option('sentry:scrub_data', True)),
                 'scrub_ip_address': bool(project.get_option('sentry:scrub_ip_address', False)),
@@ -195,7 +205,7 @@ class ProjectSettingsView(ProjectView):
 
         if form.is_valid():
             project = form.save()
-            for opt in ('origins', 'resolve_age', 'scrub_data', 'scrub_ip_address'):
+            for opt in ('origins', 'resolve_age', 'scrub_data', 'scrub_ip_address', 'token'):
                 value = form.cleaned_data.get(opt)
                 if value is None:
                     project.delete_option('sentry:%s' % (opt,))
diff --git a/tests/sentry/tasks/fetch_source/tests.py b/tests/sentry/tasks/fetch_source/tests.py
index a10a02d7ae..79ff08823f 100644
--- a/tests/sentry/tasks/fetch_source/tests.py
+++ b/tests/sentry/tasks/fetch_source/tests.py
@@ -23,7 +23,35 @@ class FetchUrlTest(TestCase):
         result = fetch_url('http://example.com')
 
         safe_urlopen.assert_called_once_with(
-            'http://example.com', allow_redirects=True, timeout=5)
+            'http://example.com', allow_redirects=True, timeout=5,
+            headers=[])
+        safe_urlread.assert_called_once_with(safe_urlopen.return_value)
+
+        assert result.url == 'http://example.com'
+        assert result.body == u'foo bar'
+        assert result.headers == {'content-type': 'application/json'}
+
+        # ensure we use the cached result
+        result2 = fetch_url('http://example.com')
+
+        safe_urlopen.assert_called_once()
+
+        assert result == result2
+
+    @patch('sentry.tasks.fetch_source.safe_urlopen')
+    @patch('sentry.tasks.fetch_source.safe_urlread')
+    def test_with_token(self, safe_urlread, safe_urlopen):
+        self.project.update_option('sentry:token', 'foobar')
+        self.project.update_option('sentry:origins', ['*'])
+
+        safe_urlopen.return_value.headers = (('content-type', 'application/json'),)
+        safe_urlread.return_value = u'foo bar'
+
+        result = fetch_url('http://example.com', project=self.project)
+
+        safe_urlopen.assert_called_once_with(
+            'http://example.com', allow_redirects=True, timeout=5,
+            headers=[('X-Sentry-Token', 'foobar')])
         safe_urlread.assert_called_once_with(safe_urlopen.return_value)
 
         assert result.url == 'http://example.com'
@@ -45,7 +73,8 @@ class FetchUrlTest(TestCase):
         result = fetch_url('http://example.com')
 
         safe_urlopen.assert_called_once_with(
-            'http://example.com', allow_redirects=True, timeout=5)
+            'http://example.com', allow_redirects=True, timeout=5,
+            headers=[])
         assert not safe_urlread.mock_calls
 
         assert result == BAD_SOURCE
@@ -66,7 +95,8 @@ class FetchUrlTest(TestCase):
         result = fetch_url('http://example.com')
 
         safe_urlopen.assert_called_once_with(
-            'http://example.com', allow_redirects=True, timeout=5)
+            'http://example.com', allow_redirects=True, timeout=5,
+            headers=[])
         safe_urlread.assert_called_once_with(safe_urlopen.return_value)
 
         assert result == BAD_SOURCE
@@ -115,6 +145,7 @@ class ExpandJavascriptSourceTest(TestCase):
     @patch('sentry.tasks.fetch_source.discover_sourcemap')
     def test_simple(self, discover_sourcemap, fetch_sourcemap, fetch_url, update):
         data = {
+            'project': self.project.id,
             'sentry.interfaces.Exception': {
                 'values': [{
                     'stacktrace': {
@@ -142,7 +173,8 @@ class ExpandJavascriptSourceTest(TestCase):
 
         expand_javascript_source(data)
 
-        fetch_url.assert_called_once_with('http://example.com/foo.js')
+        fetch_url.assert_called_once_with(
+            'http://example.com/foo.js', project=self.project)
 
         frame_list = data['sentry.interfaces.Exception']['values'][0]['stacktrace']['frames']
         frame = frame_list[0]
@@ -160,6 +192,7 @@ class ExpandJavascriptSourceTest(TestCase):
     @patch('sentry.tasks.fetch_source.discover_sourcemap')
     def test_inlined_sources(self, discover_sourcemap, fetch_url, update):
         data = {
+            'project': self.project.id,
             'sentry.interfaces.Exception': {
                 'values': [{
                     'stacktrace': {
@@ -180,7 +213,8 @@ class ExpandJavascriptSourceTest(TestCase):
         fetch_url.return_value.body = '\n'.join('<generated source>')
 
         expand_javascript_source(data)
-        fetch_url.assert_called_once_with('http://example.com/test.min.js')
+        fetch_url.assert_called_once_with(
+            'http://example.com/test.min.js', project=self.project)
 
         frame_list = data['sentry.interfaces.Exception']['values'][0]['stacktrace']['frames']
         frame = frame_list[0]
