commit fb1b35f541fd44edad97fdf0ecec54aea9f7cf62
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Thu Oct 18 10:06:33 2018 -0700

    feat(app-platform): Add sentry app details endpoint (#10071)
    
    * feat(app-platform): Add sentry app details endpoint

diff --git a/src/sentry/api/bases/sentryapps.py b/src/sentry/api/bases/sentryapps.py
index 04ad1fe53e..7ef8e0c8f8 100644
--- a/src/sentry/api/bases/sentryapps.py
+++ b/src/sentry/api/bases/sentryapps.py
@@ -1,8 +1,6 @@
 from __future__ import absolute_import
 
-from rest_framework.permissions import IsAuthenticated
-
-from sentry.api.base import Endpoint
+from sentry.api.base import Endpoint, SessionAuthentication
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import ScopedPermission
 from sentry.app import raven
@@ -11,16 +9,16 @@ from sentry.models import SentryApp, SentryAppInstallation
 
 class SentryAppDetailsPermission(ScopedPermission):
     def has_object_permission(self, request, view, sentry_app):
-        return sentry_app.owner in request.user.get_orgs()
+        return request.user.is_superuser or sentry_app.owner in request.user.get_orgs()
 
 
 class SentryAppDetailsEndpoint(Endpoint):
-    authentication_classes = (IsAuthenticated, )
+    authentication_classes = (SessionAuthentication, )
     permission_classes = (SentryAppDetailsPermission, )
 
-    def convert_args(self, request, slug, *args, **kwargs):
+    def convert_args(self, request, sentry_app_slug, *args, **kwargs):
         try:
-            sentry_app = SentryApp.objects.get_from_cache(slug=slug)
+            sentry_app = SentryApp.objects.get_from_cache(slug=sentry_app_slug)
         except SentryApp.DoesNotExist:
             raise ResourceDoesNotExist
 
@@ -42,7 +40,7 @@ class SentryAppInstallationDetailsPermission(ScopedPermission):
 
 
 class SentryAppInstallationDetailsEndpoint(Endpoint):
-    authentication_classes = (IsAuthenticated, )
+    authentication_classes = (SessionAuthentication, )
     permission_classes = (SentryAppInstallationDetailsPermission, )
 
     def convert_args(self, request, uuid, *args, **kwargs):
diff --git a/src/sentry/api/endpoints/sentry_app_details.py b/src/sentry/api/endpoints/sentry_app_details.py
new file mode 100644
index 0000000000..52ba78a593
--- /dev/null
+++ b/src/sentry/api/endpoints/sentry_app_details.py
@@ -0,0 +1,20 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.bases.sentryapps import SentryAppDetailsEndpoint as BaseEndpoint
+from sentry.api.serializers import serialize
+from sentry.constants import SentryAppStatus
+from sentry.features.helpers import requires_feature
+
+
+class SentryAppDetailsEndpoint(BaseEndpoint):
+
+    @requires_feature('organizations:internal-catchall', any_org=True)
+    def get(self, request, sentry_app):
+        # Superusers have access to the app, published or unpublished. Other
+        # users only have access to a published app (for now)
+        if request.user.is_superuser or sentry_app.status == SentryAppStatus.PUBLISHED:
+            return Response(serialize(sentry_app, request.user))
+
+        return Response(status=404)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index e535826342..cca0c16da2 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -154,6 +154,7 @@ from .endpoints.release_deploys import ReleaseDeploysEndpoint
 from .endpoints.debug_files import DebugFilesEndpoint, DifAssembleEndpoint, \
     UnknownDebugFilesEndpoint, AssociateDSymFilesEndpoint
 from .endpoints.sentry_apps import SentryAppsEndpoint
+from .endpoints.sentry_app_details import SentryAppDetailsEndpoint
 from .endpoints.shared_group_details import SharedGroupDetailsEndpoint
 from .endpoints.system_health import SystemHealthEndpoint
 from .endpoints.system_options import SystemOptionsEndpoint
@@ -1097,6 +1098,11 @@ urlpatterns = patterns(
         SentryAppsEndpoint.as_view(),
         name='sentry-api-0-sentry-apps'
     ),
+    url(
+        r'^sentry-apps/(?P<sentry_app_slug>[^\/]+)/$',
+        SentryAppDetailsEndpoint.as_view(),
+        name='sentry-api-0-sentry-app-details'
+    ),
 
     # Internal
     url(r'^internal/health/$', SystemHealthEndpoint.as_view(),
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index c664fd41db..2b81f7cf37 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -90,7 +90,7 @@ RESERVED_ORGANIZATION_SLUGS = frozenset(
         'security', 'terms', 'from', 'sponsorship', 'for', 'at', 'platforms', 'branding', 'vs',
         'answers', '_admin', 'support', 'contact', 'onboarding', 'ext', 'extension', 'extensions',
         'plugins', 'themonitor', 'settings', 'legal', 'avatar', 'organization-avatar',
-        'project-avatar', 'team-avatar', 'careers', '_experiment',
+        'project-avatar', 'team-avatar', 'careers', '_experiment', 'sentry-apps',
     )
 )
 
diff --git a/tests/sentry/api/endpoints/test_sentry_app_details.py b/tests/sentry/api/endpoints/test_sentry_app_details.py
new file mode 100644
index 0000000000..6048ba0514
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_sentry_app_details.py
@@ -0,0 +1,82 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+from sentry.testutils import APITestCase
+from sentry.testutils.helpers import with_feature
+from sentry.mediators.sentry_apps import Creator
+from sentry.constants import SentryAppStatus
+
+
+class SentryAppDetailsTest(APITestCase):
+    def setUp(self):
+        self.superuser = self.create_user(email='a@example.com', is_superuser=True)
+        self.user = self.create_user(email='boop@example.com')
+        self.org = self.create_organization(owner=self.user)
+        self.super_org = self.create_organization(owner=self.superuser)
+        self.published_app = Creator.run(
+            name='Test',
+            organization=self.org,
+            scopes=(),
+            webhook_url='https://example.com',
+        )
+        self.published_app.update(status=SentryAppStatus.PUBLISHED)
+        self.unpublished_app = Creator.run(
+            name='Testin',
+            organization=self.org,
+            scopes=(),
+            webhook_url='https://example.com',
+        )
+        self.url = reverse('sentry-api-0-sentry-app-details', args=[self.published_app.slug])
+
+
+class GetSentryAppDetailsTest(SentryAppDetailsTest):
+
+    @with_feature('organizations:internal-catchall')
+    def test_superuser_sees_all_apps(self):
+        self.login_as(user=self.superuser, superuser=True)
+        response = self.client.get(self.url, format='json')
+
+        assert response.status_code == 200
+        assert response.data == {
+            'name': self.published_app.name,
+            'scopes': [],
+            'uuid': self.published_app.uuid,
+            'webhook_url': self.published_app.webhook_url,
+        }
+
+        url = reverse('sentry-api-0-sentry-app-details', args=[self.unpublished_app.slug])
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200
+        assert response.data == {
+            'name': self.unpublished_app.name,
+            'scopes': [],
+            'uuid': self.unpublished_app.uuid,
+            'webhook_url': self.unpublished_app.webhook_url,
+        }
+
+    @with_feature('organizations:internal-catchall')
+    def test_users_only_see_published_apps(self):
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-sentry-app-details', args=[self.unpublished_app.slug])
+
+        response = self.client.get(self.url, format='json')
+
+        assert response.status_code == 200
+        assert response.data == {
+            'name': self.published_app.name,
+            'scopes': [],
+            'uuid': self.published_app.uuid,
+            'webhook_url': self.published_app.webhook_url,
+        }
+
+        url = reverse('sentry-api-0-sentry-app-details', args=[self.unpublished_app.slug])
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 404
+
+    def test_no_access_without_internal_catchall(self):
+        self.login_as(user=self.user)
+
+        response = self.client.get(self.url, format='json')
+        assert response.status_code == 404
