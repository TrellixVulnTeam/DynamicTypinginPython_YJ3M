commit 4473764a2af226faf8bb710c21c1665cd3f7da22
Author: David Cramer <dcramer@gmail.com>
Date:   Sun May 1 20:55:31 2011 -0700

    Ensure keys are coerced to strings in store view (fixes #131)

diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index fe15e9d0b3..926017c2d7 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -914,6 +914,19 @@ class RemoteSentryTest(TestCase):
         self.assertEquals(instance.level, 40)
         self.assertEquals(instance.site, 'not_a_real_site')
 
+    def testUnicodeKeys(self):
+        kwargs = {u'message': 'hello', u'server_name': 'not_dcramer.local', u'level': 40, u'site': 'not_a_real_site'}
+        resp = self.client.post(reverse('sentry-store'), {
+            'data': base64.b64encode(pickle.dumps(transform(kwargs)).encode('zlib')),
+            'key': conf.KEY,
+        })
+        self.assertEquals(resp.status_code, 200)
+        instance = Message.objects.get()
+        self.assertEquals(instance.message, 'hello')
+        self.assertEquals(instance.server_name, 'not_dcramer.local')
+        self.assertEquals(instance.level, 40)
+        self.assertEquals(instance.site, 'not_a_real_site')
+
     def testUngzippedData(self):
         kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
         resp = self.client.post(reverse('sentry-store'), {
@@ -1184,7 +1197,7 @@ class SentryClientTest(TestCase):
     #     self.assertEqual(message.message, 'view exception')
     # 
     #     conf.CLIENT = 'sentry.client.base.SentryClient'
-        
+
 class SentryManageTest(TestCase):
     fixtures = ['sentry/tests/fixtures/cleanup.json']
     
diff --git a/sentry/views.py b/sentry/views.py
index 01be746f12..b1948c67d2 100644
--- a/sentry/views.py
+++ b/sentry/views.py
@@ -15,6 +15,7 @@ from django.http import HttpResponse, HttpResponseBadRequest, \
 from django.shortcuts import get_object_or_404
 from django.template.loader import render_to_string
 from django.utils import simplejson
+from django.utils.encoding import smart_str
 from django.utils.safestring import mark_safe
 from django.views.decorators.csrf import csrf_protect, csrf_exempt
 
@@ -381,6 +382,9 @@ def store(request):
         logger.exception('Bad data received')
         return HttpResponseForbidden('Bad data reconstructing object (%s, %s)' % (e.__class__.__name__, e))
 
+    # XXX: ensure keys are coerced to strings
+    data = dict((smart_str(k), v) for k, v in data.iteritems())
+
     GroupedMessage.objects.from_kwargs(**data)
     
     return HttpResponse()
