commit 85afaf59be6a8a11fc6c638742929d034389b459
Author: Ben Vinegar <ben@benv.ca>
Date:   Fri Dec 4 14:34:18 2015 -0800

    Fix tests caused by "select all" changes

diff --git a/src/sentry/static/sentry/app/views/stream/actionLink.jsx b/src/sentry/static/sentry/app/views/stream/actionLink.jsx
index 6d46092330..234e41de87 100644
--- a/src/sentry/static/sentry/app/views/stream/actionLink.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actionLink.jsx
@@ -15,6 +15,7 @@ const ActionLink = React.createClass({
     neverConfirm: React.PropTypes.bool,
     onAction: React.PropTypes.func.isRequired,
     onlyIfBulk: React.PropTypes.bool,
+    selectAllActive: React.PropTypes.bool.isRequired // "select all" checkbox
   },
 
   mixins: [
diff --git a/tests/js/spec/views/stream/actions.spec.jsx b/tests/js/spec/views/stream/actions.spec.jsx
index 5cfc68eb85..4e79de1968 100644
--- a/tests/js/spec/views/stream/actions.spec.jsx
+++ b/tests/js/spec/views/stream/actions.spec.jsx
@@ -42,20 +42,26 @@ describe('StreamActions', function() {
         this.sandbox.stub(SelectedGroupStore, 'deselectAll');
         let callback = this.sandbox.stub();
 
-        this.actions.actionSelectedGroups(this.actions.props.actionTypes.ALL, callback);
+        this.actions.state.allSelected = true;
+
+        this.actions.actionSelectedGroups(callback);
 
         expect(callback.withArgs(undefined).calledOnce).to.be.ok;
         expect(SelectedGroupStore.deselectAll.calledOnce).to.be.ok;
+
+        // all selected is reset
+        expect(this.actions.state.allSelected, false);
       });
     });
 
-    describe('for selected items', function () {
+    describe('for page-selected items', function () {
       it('should invoke the callback with an array of selected items and deselect all', function () {
         this.sandbox.stub(SelectedGroupStore, 'deselectAll');
         this.sandbox.stub(SelectedGroupStore, 'getSelectedIds').returns(new Set([1,2,3]));
 
+        this.actions.state.allSelected = false;
         let callback = this.sandbox.stub();
-        this.actions.actionSelectedGroups(this.actions.props.actionTypes.SELECTED, callback);
+        this.actions.actionSelectedGroups(callback);
 
         expect(callback.withArgs([1,2,3]).calledOnce).to.be.ok;
         expect(SelectedGroupStore.deselectAll.calledOnce).to.be.ok;
