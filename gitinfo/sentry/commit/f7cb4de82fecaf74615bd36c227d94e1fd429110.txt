commit f7cb4de82fecaf74615bd36c227d94e1fd429110
Author: Jan Michael Auer <account@jauer.org>
Date:   Mon Oct 1 16:20:34 2018 +0200

    fix(api): Fix a race in the associate API call (#9947)
    
    * fix(api): Fix a race in the associate API call
    
    * fix(api): Fix a race during assemble
    
    * fix(api): Fix a race in assemble

diff --git a/src/sentry/api/endpoints/dif_files.py b/src/sentry/api/endpoints/dif_files.py
index ca85ca2a4b..2c8d17d84c 100644
--- a/src/sentry/api/endpoints/dif_files.py
+++ b/src/sentry/api/endpoints/dif_files.py
@@ -85,7 +85,7 @@ class DifAssembleEndpoint(ProjectEndpoint):
             dif = ProjectDSymFile.objects.filter(
                 project=project,
                 file__checksum=checksum
-            ).first()
+            ).select_related('file').first()
             if dif is not None:
                 file_response[checksum] = {
                     'state': ChunkFileState.OK,
diff --git a/src/sentry/api/endpoints/dsym_files.py b/src/sentry/api/endpoints/dsym_files.py
index 65741cce99..478088384f 100644
--- a/src/sentry/api/endpoints/dsym_files.py
+++ b/src/sentry/api/endpoints/dsym_files.py
@@ -184,8 +184,13 @@ class AssociateDSymFilesEndpoint(ProjectEndpoint):
             data={'name': data['name']},
             platform=DSYM_PLATFORMS[data['platform']],
         )
+
+        # There can be concurrent deletes on the underlying file object
+        # that the project dsym file references.  This means that we can
+        # get errors if we don't prefetch this when serializing.  Additionally
+        # performance wise it's a better idea to fetch this in one go.
         dsym_files = ProjectDSymFile.objects.find_by_checksums(
-            data['checksums'], project)
+            data['checksums'], project).select_related('file')
 
         for dsym_file in dsym_files:
             version_dsym_file, created = VersionDSymFile.objects.get_or_create(
diff --git a/src/sentry/models/dsymfile.py b/src/sentry/models/dsymfile.py
index 7264f6390a..97bc3dc8d5 100644
--- a/src/sentry/models/dsymfile.py
+++ b/src/sentry/models/dsymfile.py
@@ -319,7 +319,8 @@ def create_dsym_from_id(project, dsym_type, cpu_name, debug_id,
                 with transaction.atomic():
                     rv = ProjectDSymFile.objects.create(**kwargs)
             except IntegrityError:
-                rv = ProjectDSymFile.objects.get(debug_id=debug_id, project=project)
+                rv = ProjectDSymFile.objects.select_related('file') \
+                    .get(debug_id=debug_id, project=project)
                 oldfile = rv.file
                 rv.update(**kwargs)
                 oldfile.delete()
@@ -329,7 +330,8 @@ def create_dsym_from_id(project, dsym_type, cpu_name, debug_id,
             oldfile.delete()
     else:
         try:
-            rv = ProjectDSymFile.objects.get(debug_id=debug_id, project=project)
+            rv = ProjectDSymFile.objects.select_related('file') \
+                .get(debug_id=debug_id, project=project)
         except ProjectDSymFile.DoesNotExist:
             try:
                 with transaction.atomic():
@@ -341,7 +343,8 @@ def create_dsym_from_id(project, dsym_type, cpu_name, debug_id,
                         project=project,
                     )
             except IntegrityError:
-                rv = ProjectDSymFile.objects.get(debug_id=debug_id, project=project)
+                rv = ProjectDSymFile.objects.select_related('file') \
+                    .get(debug_id=debug_id, project=project)
                 oldfile = rv.file
                 rv.update(file=file)
                 oldfile.delete()
