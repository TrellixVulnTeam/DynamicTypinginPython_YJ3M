commit ed80ec777e30ae35282d16f378d741c327b37edf
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Sep 11 11:05:30 2018 -0700

    feat(ui): Allow use of react-virtualized in dropdown menus (#9577)
    
    This will help in components like the project selector for orgs with a large number of projects.

diff --git a/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx b/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
index cc41b2a0ee..a9507a7ef6 100644
--- a/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
@@ -1,3 +1,4 @@
+import {AutoSizer, List} from 'react-virtualized';
 import {Flex} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
@@ -81,6 +82,14 @@ class DropdownAutoCompleteMenu extends React.Component {
      */
     maxHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
 
+    /**
+     * Supplying this height will force the dropdown menu to be a virtualized list.
+     * This is very useful (and probably required) if you have a large list. e.g. Project selector with many projects.
+     *
+     * Currently, our implementation of the virtualized list requires a fixed height.
+     */
+    virtualizedHeight: PropTypes.number,
+
     /**
      * Search input's placeholder text
      */
@@ -158,6 +167,72 @@ class DropdownAutoCompleteMenu extends React.Component {
     return this.filterItems(items, inputValue).map((item, index) => ({...item, index}));
   };
 
+  renderList = ({items, ...otherProps}) => {
+    const {maxHeight, virtualizedHeight} = this.props;
+
+    // If `virtualizedHeight` is defined, use a virtualized list
+    if (typeof virtualizedHeight !== 'undefined') {
+      return (
+        <AutoSizer disableHeight>
+          {({width}) => (
+            <List
+              width={width}
+              height={Math.min(items.length * virtualizedHeight, maxHeight)}
+              rowCount={items.length}
+              rowHeight={virtualizedHeight}
+              rowRenderer={({key, index, style}) => {
+                const item = items[index];
+                return this.renderRow({
+                  item,
+                  style,
+                  key,
+                  ...otherProps,
+                });
+              }}
+            />
+          )}
+        </AutoSizer>
+      );
+    }
+
+    return items.map(item => {
+      const {index} = item;
+      const key = `${item.value}-${index}`;
+
+      return this.renderRow({item, key, ...otherProps});
+    });
+  };
+
+  renderRow = ({
+    item,
+    style,
+    itemSize,
+    key,
+    highlightedIndex,
+    inputValue,
+    getItemProps,
+  }) => {
+    const {index} = item;
+
+    return item.groupLabel ? (
+      !item.hideGroupLabel && (
+        <LabelWithBorder style={style} key={item.label || item.id}>
+          {item.label && <GroupLabel>{item.label}</GroupLabel>}
+        </LabelWithBorder>
+      )
+    ) : (
+      <AutoCompleteItem
+        size={itemSize}
+        key={key}
+        index={index}
+        highlightedIndex={highlightedIndex}
+        {...getItemProps({item, index, style})}
+      >
+        {typeof item.label === 'function' ? item.label({inputValue}) : item.label}
+      </AutoCompleteItem>
+    );
+  };
+
   render() {
     let {
       onSelect,
@@ -267,28 +342,13 @@ class DropdownAutoCompleteMenu extends React.Component {
                         </Flex>
                       )}
                       {!busy &&
-                        autoCompleteResults.map(
-                          ({index, ...item}) =>
-                            item.groupLabel ? (
-                              !item.hideGroupLabel && (
-                                <LabelWithBorder key={item.label || item.id}>
-                                  {item.label && <GroupLabel>{item.label}</GroupLabel>}
-                                </LabelWithBorder>
-                              )
-                            ) : (
-                              <AutoCompleteItem
-                                size={itemSize}
-                                key={`${item.value}-${index}`}
-                                index={index}
-                                highlightedIndex={highlightedIndex}
-                                {...getItemProps({item, index})}
-                              >
-                                {typeof item.label === 'function'
-                                  ? item.label({inputValue})
-                                  : item.label}
-                              </AutoCompleteItem>
-                            )
-                        )}
+                        this.renderList({
+                          items: autoCompleteResults,
+                          itemSize,
+                          highlightedIndex,
+                          inputValue,
+                          getItemProps,
+                        })}
                     </StyledItemList>
 
                     {menuFooter && <LabelWithPadding>{menuFooter}</LabelWithPadding>}
@@ -404,6 +464,12 @@ const getItemPaddingForSize = size => {
 };
 
 const AutoCompleteItem = styled('div')`
+  /* needed for virtualized lists that do not fill parent height */
+  /* e.g. breadcrumbs (org height > project, but want same fixed height for both) */
+  display: flex;
+  flex-direction: column;
+  justify-content: center;
+
   font-size: 0.9em;
   background-color: ${p =>
     p.index == p.highlightedIndex ? p.theme.offWhite : 'transparent'};
diff --git a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
index 96200baa2f..ad29d3a719 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
@@ -112,6 +112,7 @@ const ProjectSelector = withRouter(
           inputProps={{style: {padding: 8, paddingLeft: 14}}}
           emptyMessage={t('You have no projects')}
           noResultsMessage={t('No projects found')}
+          virtualizedHeight={33}
           menuFooter={
             !hasProjects && hasProjectWrite ? (
               <CreateProjectButton
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx
index 16145efaf3..56db77c3a7 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx
@@ -96,6 +96,7 @@ class BreadcrumbDropdown extends React.Component {
         items={items}
         onSelect={onSelect}
         isStyled
+        virtualizedHeight={41}
       >
         {({getActorProps, actions, isOpen}) => {
           return (
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 6cd7a9c303..a750210f14 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -39,6 +39,16 @@ jest.mock('react-lazyload', () => {
   return LazyLoadMock;
 });
 
+jest.mock('react-virtualized', () => {
+  const ActualReactVirtualized = require.requireActual('react-virtualized');
+  return {
+    ...ActualReactVirtualized,
+    AutoSizer: ({children}) => {
+      return children({width: 100, height: 100});
+    },
+  };
+});
+
 jest.mock('echarts-for-react/lib/core', () => {
   // We need to do this because `jest.mock` gets hoisted by babel and `React` is not
   // guaranteed to be in scope
diff --git a/tests/js/spec/components/__snapshots__/dropdownAutoCompleteMenu.spec.jsx.snap b/tests/js/spec/components/__snapshots__/dropdownAutoCompleteMenu.spec.jsx.snap
index 7b42f7e023..796010b617 100644
--- a/tests/js/spec/components/__snapshots__/dropdownAutoCompleteMenu.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/dropdownAutoCompleteMenu.spec.jsx.snap
@@ -138,7 +138,7 @@ exports[`DropdownAutoCompleteMenu renders with a group 1`] = `
                         onClick={[Function]}
                       >
                         <div
-                          className="css-le5ima-AutoCompleteItem ejumqxq3"
+                          className="css-2znhnp-AutoCompleteItem ejumqxq3"
                           onClick={[Function]}
                         >
                           <div>
@@ -153,7 +153,7 @@ exports[`DropdownAutoCompleteMenu renders with a group 1`] = `
                         onClick={[Function]}
                       >
                         <div
-                          className="css-14kg2cv-AutoCompleteItem ejumqxq3"
+                          className="css-zryfsl-AutoCompleteItem ejumqxq3"
                           onClick={[Function]}
                         >
                           <div>
@@ -297,7 +297,7 @@ exports[`DropdownAutoCompleteMenu renders without a group 1`] = `
                         onClick={[Function]}
                       >
                         <div
-                          className="css-le5ima-AutoCompleteItem ejumqxq3"
+                          className="css-2znhnp-AutoCompleteItem ejumqxq3"
                           onClick={[Function]}
                         >
                           <div>
@@ -312,7 +312,7 @@ exports[`DropdownAutoCompleteMenu renders without a group 1`] = `
                         onClick={[Function]}
                       >
                         <div
-                          className="css-14kg2cv-AutoCompleteItem ejumqxq3"
+                          className="css-zryfsl-AutoCompleteItem ejumqxq3"
                           onClick={[Function]}
                         >
                           <div>
@@ -327,7 +327,7 @@ exports[`DropdownAutoCompleteMenu renders without a group 1`] = `
                         onClick={[Function]}
                       >
                         <div
-                          className="css-14kg2cv-AutoCompleteItem ejumqxq3"
+                          className="css-zryfsl-AutoCompleteItem ejumqxq3"
                           onClick={[Function]}
                         >
                           <div>
