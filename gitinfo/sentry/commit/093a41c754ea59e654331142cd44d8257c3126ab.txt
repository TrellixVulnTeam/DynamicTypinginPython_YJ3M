commit 093a41c754ea59e654331142cd44d8257c3126ab
Author: Xavier Ordoquy <xordoquy@linovia.com>
Date:   Mon Jan 2 13:03:24 2012 +0100

    Added basic tests and bug fixes on processors.

diff --git a/sentry/models.py b/sentry/models.py
index c694956fe9..1fc1f8f244 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -363,7 +363,11 @@ class Event(MessageBase):
         module = self.data['__sentry__'].get('module', 'ver')
         return module, self.data['__sentry__']['version']
 
-post_save.connect(sentry.processors.post_save_processors)
+post_save.connect(
+    sentry.processors.post_save_processors,
+    sender=Event,
+    dispatch_uid="processors_post_save"
+)
 
 
 class FilterValue(models.Model):
diff --git a/sentry/processors/__init__.py b/sentry/processors/__init__.py
index 739d6af6e0..939f21a924 100644
--- a/sentry/processors/__init__.py
+++ b/sentry/processors/__init__.py
@@ -19,22 +19,13 @@ class BaseProcessor(object):
         """
         return
 
-#
-# Connect to Events post_save
-#
+PROCESSORS_CACHE = None
 
-# from django.db.models.signals import pre_save
-# from django.dispatch import receiver
 
-
-PROCESSORS_CACHE = []
-
-
-#@receiver(pre_save, sender=Events)
 def post_save_processors(sender, **kwargs):
     global PROCESSORS_CACHE
 
-    if PROCESSORS_CACHE:
+    if PROCESSORS_CACHE is not None:
         for processor in PROCESSORS_CACHE:
             processor.post_processing(sender)
 
@@ -49,7 +40,8 @@ def post_save_processors(sender, **kwargs):
             module_name, class_name = processor_.rsplit('.', 1)
             try:
                 module = __import__(module_name, {}, {}, class_name)
-                processor_ = getattr(module, class_name)
+                processor_class = getattr(module, class_name)
+                processor_ = processor_class()
             except Exception:
                 logger = logging.getLogger('sentry.errors')
                 logger.exception('Unable to import %s' % (processor_,))
diff --git a/tests/processor.py b/tests/processor.py
new file mode 100644
index 0000000000..6fed24bd89
--- /dev/null
+++ b/tests/processor.py
@@ -0,0 +1,6 @@
+
+from sentry.processors import BaseProcessor
+
+
+class TestProcessor(BaseProcessor):
+    pass
diff --git a/tests/tests.py b/tests/tests.py
index 2a1e9faea2..ae252bd9a0 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -595,14 +595,15 @@ class SentryManagerTest(TestCase):
 
 class SentryProcessorsTest(TestCase):
 
-    def setup(self):
-        settings.SENTRY_PROCESSORS = (
-            'tests.processor',
+    def setUp(self):
+        processors.PROCESSORS_CACHE = None
+        django_settings.SENTRY_PROCESSORS = (
+            'tests.processor.TestProcessor',
         )
 
     def tearDown(self):
-        settings.SENTRY_PROCESSORS = ()
-        processors.PROCESSORS_CACHE = []
+        django_settings.SENTRY_PROCESSORS = ()
+        processors.PROCESSORS_CACHE = None
 
     def create_event(self):
         kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
@@ -610,8 +611,9 @@ class SentryProcessorsTest(TestCase):
         self.assertEquals(resp.status_code, 200)
 
     def test_processors_cache(self):
-        self.assertEqual(processors.PROCESSORS_CACHE, [])
+        self.assertEqual(processors.PROCESSORS_CACHE, None)
         self.create_event()
+        print '[', django_settings.SENTRY_PROCESSORS, ']', processors.PROCESSORS_CACHE
         self.assertEqual(len(processors.PROCESSORS_CACHE), 1)
 
     def test_processors_called(self):
