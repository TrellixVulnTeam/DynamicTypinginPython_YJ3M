commit cd8bd317cdf6ed4eadf530027405c42e18f8fb0b
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Aug 9 11:18:50 2019 -0700

    fix(ui): Fix Organization crumb when on Org Settings index (#14324)
    
    This fixes switching organizations using the organization crumb dropdown (when on the org settings index).

diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/organizationCrumb.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/organizationCrumb.jsx
index 4b6cb61bf4..22c78aaf7f 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/organizationCrumb.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/organizationCrumb.jsx
@@ -30,10 +30,16 @@ class OrganizationCrumb extends React.Component {
     // e.g. if you are on API details, we want the API listing
     // This fails if our route tree is not nested
     const hasProjectParam = !!params.projectId;
-    const destination = hasProjectParam
+    let destination = hasProjectParam
       ? route
       : findFirstRouteWithoutRouteParam(routes.slice(routes.indexOf(route)));
 
+    // It's possible there is no route without route params (e.g. organization settings index),
+    // in which case, we can use the org settings index route (e.g. `route`)
+    if (!hasProjectParam && typeof destination === 'undefined') {
+      destination = route;
+    }
+
     browserHistory.push(
       recreateRoute(destination, {
         routes,
diff --git a/tests/js/spec/views/settings/components/settingsBreadcrumb/organizationCrumb.spec.jsx b/tests/js/spec/views/settings/components/settingsBreadcrumb/organizationCrumb.spec.jsx
new file mode 100644
index 0000000000..50b1a33259
--- /dev/null
+++ b/tests/js/spec/views/settings/components/settingsBreadcrumb/organizationCrumb.spec.jsx
@@ -0,0 +1,137 @@
+import {browserHistory} from 'react-router';
+import React from 'react';
+
+import {initializeOrg} from 'app-test/helpers/initializeOrg';
+import {mount} from 'enzyme';
+import OrganizationCrumb from 'app/views/settings/components/settingsBreadcrumb/organizationCrumb';
+
+jest.unmock('app/utils/recreateRoute');
+
+describe('OrganizationCrumb', function() {
+  const {organization, project, routerContext} = initializeOrg();
+  const organizations = [
+    organization,
+    TestStubs.Organization({
+      id: '234',
+      slug: 'org-slug2',
+    }),
+  ];
+
+  const switchOrganization = async wrapper => {
+    wrapper.find('Crumb').simulate('mouseEnter');
+    await tick();
+    wrapper.update();
+    wrapper
+      .find('AutoCompleteItem')
+      .at(1)
+      .simulate('click');
+  };
+
+  const createWrapper = props =>
+    mount(
+      <OrganizationCrumb
+        organizations={organizations}
+        organization={organization}
+        params={{orgId: organization.slug}}
+        {...props}
+      />,
+      routerContext
+    );
+
+  beforeEach(function() {
+    browserHistory.push.mockReset();
+  });
+
+  it('switches organizations on settings index', async function() {
+    const routes = [
+      {path: '/', childRoutes: []},
+      {childRoutes: []},
+      {path: '/foo/', childRoutes: []},
+      {childRoutes: []},
+      {path: ':bar', childRoutes: []},
+      {path: '/settings/', name: 'Settings'},
+      {name: 'Organizations', path: ':orgId/', childRoutes: []},
+    ];
+    const route = routes[6];
+
+    const wrapper = createWrapper({
+      routes,
+      route,
+    });
+
+    await switchOrganization(wrapper);
+    expect(browserHistory.push).toHaveBeenCalledWith('/settings/org-slug2/');
+  });
+
+  it('switches organizations while on API Keys Details route', async function() {
+    const routes = [
+      {path: '/', childRoutes: []},
+      {childRoutes: []},
+      {path: '/foo/', childRoutes: []},
+      {childRoutes: []},
+      {path: ':bar', childRoutes: []},
+      {path: '/settings/', name: 'Settings'},
+      {name: 'Organizations', path: ':orgId/', childRoutes: []},
+      {childRoutes: []},
+      {path: 'api-keys/', name: 'API Key'},
+      {path: ':apiKey/', name: 'API Key Details'},
+    ];
+    const route = routes[6];
+
+    const wrapper = createWrapper({
+      routes,
+      route,
+    });
+
+    await switchOrganization(wrapper);
+    expect(browserHistory.push).toHaveBeenCalledWith('/settings/org-slug2/api-keys/');
+  });
+
+  it('switches organizations while on API Keys List route', async function() {
+    const routes = [
+      {path: '/', childRoutes: []},
+      {childRoutes: []},
+      {path: '/foo/', childRoutes: []},
+      {childRoutes: []},
+      {path: ':bar', childRoutes: []},
+      {path: '/settings/', name: 'Settings'},
+      {name: 'Organizations', path: ':orgId/', childRoutes: []},
+      {childRoutes: []},
+      {path: 'api-keys/', name: 'API Key'},
+    ];
+    const route = routes[6];
+
+    const wrapper = createWrapper({
+      routes,
+      route,
+    });
+
+    await switchOrganization(wrapper);
+    expect(browserHistory.push).toHaveBeenCalledWith('/settings/org-slug2/api-keys/');
+  });
+
+  it('switches organizations while in Project Client Keys Details route', async function() {
+    const routes = [
+      {path: '/', childRoutes: []},
+      {path: '/settings/', name: 'Settings', childRoutes: []},
+      {name: 'Organization', path: ':orgId/', childRoutes: []},
+      {name: 'Project', path: 'projects/:projectId/', childRoutes: []},
+      {path: 'keys/', name: 'Client Keys'},
+      {path: ':keyId/', name: 'Details'},
+    ];
+
+    const route = routes[2];
+
+    const wrapper = createWrapper({
+      params: {
+        orgId: organization.slug,
+        projectId: project.slug,
+      },
+      routes,
+      route,
+    });
+
+    await switchOrganization(wrapper);
+    expect(browserHistory.push).toHaveBeenCalledWith('/settings/org-slug2/');
+  });
+});
