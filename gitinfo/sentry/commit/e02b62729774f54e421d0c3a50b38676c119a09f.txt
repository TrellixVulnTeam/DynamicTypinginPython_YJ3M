commit e02b62729774f54e421d0c3a50b38676c119a09f
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jan 8 13:44:58 2016 -0800

    Improve frame trimming in chained exceptions

diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 2c2143b8b8..9d86985311 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -158,7 +158,7 @@ class Exception(Interface):
         if not data['values']:
             raise InterfaceValidationError("No 'values' present")
 
-        trim_exceptions(data)
+        slim_frame_data(data)
 
         has_system_frames = cls.data_has_system_frames(data)
 
@@ -279,18 +279,33 @@ class Exception(Interface):
         return ''
 
 
-def trim_exceptions(data, max_values=settings.SENTRY_MAX_EXCEPTIONS):
-    # TODO: this doesnt account for cases where the client has already omitted
-    # exceptions
-    values = data['values']
-    exc_len = len(values)
-
-    if exc_len <= max_values:
+def slim_frame_data(data,
+                    frame_allowance=settings.SENTRY_MAX_STACKTRACE_FRAMES):
+    """
+    Removes various excess metadata from middle frames which go beyond
+    ``frame_allowance``.
+    """
+    # TODO(dcramer): it probably makes sense to prioritize a certain exception
+    # rather than keeping the top and bottom frames from the entire stack
+    frames_len = 0
+    for exception in data['values']:
+        if not exception.get('stacktrace'):
+            continue
+        frames_len += len(exception['stacktrace']['frames'])
+
+    if frames_len <= frame_allowance:
         return
 
-    half_max = max_values / 2
-
-    data['exc_omitted'] = (half_max, exc_len - half_max)
-
-    for n in xrange(half_max, exc_len - half_max):
-        del values[half_max]
+    half_max = frame_allowance / 2
+
+    pos = 0
+    for exception in data['values']:
+        if not exception.get('stacktrace'):
+            continue
+        for frame in exception['stacktrace']['frames']:
+            pos += 1
+            if pos > half_max and pos <= frames_len - half_max:
+                # remove heavy components
+                frame.pop('vars', None)
+                frame.pop('pre_context', None)
+                frame.pop('post_context', None)
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index 7fc7d451ac..57e91b56dd 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -5,7 +5,7 @@ from __future__ import absolute_import
 from exam import fixture
 
 from sentry.interfaces.exception import (
-    SingleException, Exception, trim_exceptions
+    SingleException, Exception, slim_frame_data
 )
 from sentry.testutils import TestCase
 
@@ -224,22 +224,44 @@ class SingleExceptionTest(TestCase):
 
 class TrimExceptionsTest(TestCase):
     def test_under_max(self):
-        value = {'values': [{'value': 'foo'}]}
-        trim_exceptions(value)
-        assert len(value['values']) == 1
-        assert value.get('exc_omitted') is None
+        value = {'values': [
+            {'value': 'foo',
+             'stacktrace': {'frames': [{'filename': 'foo'}]},
+            }
+        ]}
+        slim_frame_data(value)
+        assert len(value['values'][0]['stacktrace']['frames']) == 1
 
     def test_over_max(self):
         values = []
-        for n in xrange(5):
-            values.append({'value': 'frame %d' % n})
-        value = {'values': values}
-        trim_exceptions(value, max_values=4)
-
-        assert len(value['values']) == 4
-
-        for value, num in zip(values[:2], xrange(2)):
-            assert value['value'] == 'frame %d' % num
-
-        for value, num in zip(values[2:], xrange(3, 5)):
-            assert value['value'] == 'frame %d' % num
+        data = {'values': values}
+        for x in xrange(5):
+            exc = {'value': 'exc %d' % x, 'stacktrace': {'frames': []}}
+            values.append(exc)
+            for y in xrange(5):
+                exc['stacktrace']['frames'].append({
+                    'filename': 'frame %d' % y,
+                    'vars': {},
+                    'pre_context': [],
+                    'post_context': [],
+                })
+
+        # slim to 10 frames to make tests easier
+        slim_frame_data(data, 10)
+
+        assert len(values) == 5
+        for e_num, value in enumerate(values):
+            assert value['value'] == 'exc %d' % e_num
+            assert len(value['stacktrace']['frames']) == 5
+            for f_num, frame in enumerate(value['stacktrace']['frames']):
+                assert frame['filename'] == 'frame %d' % f_num
+                if e_num in (0, 4):
+                    assert frame['filename'] == 'frame %d' % f_num
+                    assert frame['vars'] is not None
+                    assert frame['pre_context'] is not None
+                    assert frame['post_context'] is not None
+                else:
+                    assert frame['filename'] == 'frame %d' % f_num
+                    assert 'vars' not in frame
+                    assert 'pre_context' not in frame
+                    assert 'post_context' not in frame
