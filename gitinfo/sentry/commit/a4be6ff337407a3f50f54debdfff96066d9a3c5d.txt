commit a4be6ff337407a3f50f54debdfff96066d9a3c5d
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Mar 24 11:16:13 2020 -0700

    perf(workflow): Make Alerts Stream and Details load "faster" (#17844)
    
    The alerts stream has some slow queries (loading the Trend, Users, and Events columns). Break the request into two parts and load the stats queries per row instead of on initial page load.

diff --git a/src/sentry/static/sentry/app/views/alerts/details/body.tsx b/src/sentry/static/sentry/app/views/alerts/details/body.tsx
index 9272fb471f..28545678e3 100644
--- a/src/sentry/static/sentry/app/views/alerts/details/body.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/details/body.tsx
@@ -26,13 +26,14 @@ import Projects from 'app/utils/projects';
 import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 
-import {Incident} from '../types';
+import {Incident, IncidentStats} from '../types';
 import Activity from './activity';
 import Chart from './chart';
 import SideHeader from './sideHeader';
 
 type Props = {
   incident?: Incident;
+  stats?: IncidentStats;
 } & RouteComponentProps<{alertId: string; orgId: string}, {}>;
 
 export default class DetailsBody extends React.Component<Props> {
@@ -152,15 +153,15 @@ export default class DetailsBody extends React.Component<Props> {
   }
 
   render() {
-    const {params, incident} = this.props;
+    const {params, incident, stats} = this.props;
 
     return (
       <StyledPageContent>
         <ChartWrapper>
-          {incident ? (
+          {incident && stats ? (
             <Chart
               aggregation={incident.alertRule?.aggregation}
-              data={incident.eventStats.data}
+              data={stats.eventStats.data}
               detected={incident.dateDetected}
               closed={incident.dateClosed}
             />
diff --git a/src/sentry/static/sentry/app/views/alerts/details/header.tsx b/src/sentry/static/sentry/app/views/alerts/details/header.tsx
index a7ef6370fa..904b60d080 100644
--- a/src/sentry/static/sentry/app/views/alerts/details/header.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/details/header.tsx
@@ -21,7 +21,7 @@ import SubscribeButton from 'app/components/subscribeButton';
 import getDynamicText from 'app/utils/getDynamicText';
 import space from 'app/styles/space';
 
-import {Incident} from '../types';
+import {Incident, IncidentStats} from '../types';
 import {isOpen} from '../utils';
 import Status from '../status';
 
@@ -30,6 +30,7 @@ type Props = {
   hasIncidentDetailsError: boolean;
   // Can be undefined when loading
   incident?: Incident;
+  stats?: IncidentStats;
   onSubscriptionChange: (event: React.MouseEvent) => void;
   onStatusChange: (eventKey: any) => void;
   params: Params;
@@ -66,7 +67,13 @@ export default class DetailsHeader extends React.Component<Props> {
   }
 
   render() {
-    const {hasIncidentDetailsError, incident, params, onSubscriptionChange} = this.props;
+    const {
+      hasIncidentDetailsError,
+      incident,
+      params,
+      stats,
+      onSubscriptionChange,
+    } = this.props;
     const isIncidentReady = !!incident && !hasIncidentDetailsError;
     const dateStarted = incident && moment(incident.dateStarted).format('LL');
     const duration =
@@ -118,14 +125,14 @@ export default class DetailsHeader extends React.Component<Props> {
                 </Projects>
               )}
             </ItemValue>
-            {incident && (
+            {stats && (
               <ItemValue>
-                <Count value={incident.uniqueUsers} />
+                <Count value={stats.uniqueUsers} />
               </ItemValue>
             )}
-            {incident && (
+            {stats && (
               <ItemValue>
-                <Count value={incident.totalEvents} />
+                <Count value={stats.totalEvents} />
               </ItemValue>
             )}
             {incident && (
diff --git a/src/sentry/static/sentry/app/views/alerts/details/index.tsx b/src/sentry/static/sentry/app/views/alerts/details/index.tsx
index b0b968cbbb..e4b81da215 100644
--- a/src/sentry/static/sentry/app/views/alerts/details/index.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/details/index.tsx
@@ -11,8 +11,14 @@ import {trackAnalyticsEvent} from 'app/utils/analytics';
 import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
 
-import {IncidentStatus, Incident} from '../types';
-import {fetchIncident, updateSubscription, updateStatus, isOpen} from '../utils';
+import {Incident, IncidentStats, IncidentStatus} from '../types';
+import {
+  fetchIncident,
+  fetchIncidentStats,
+  updateSubscription,
+  updateStatus,
+  isOpen,
+} from '../utils';
 import DetailsBody from './body';
 import DetailsHeader from './header';
 
@@ -25,6 +31,7 @@ type State = {
   isLoading: boolean;
   hasError: boolean;
   incident?: Incident;
+  stats?: IncidentStats;
 };
 
 class IncidentDetails extends React.Component<Props, State> {
@@ -54,8 +61,12 @@ class IncidentDetails extends React.Component<Props, State> {
     } = this.props;
 
     try {
-      const incident = await fetchIncident(api, orgId, alertId);
-      this.setState({incident, isLoading: false, hasError: false});
+      const [incident, stats] = await Promise.all([
+        fetchIncident(api, orgId, alertId),
+        fetchIncidentStats(api, orgId, alertId),
+      ]);
+
+      this.setState({incident, stats, isLoading: false, hasError: false});
       markIncidentAsSeen(api, orgId, incident);
     } catch (_err) {
       this.setState({isLoading: false, hasError: true});
@@ -123,7 +134,7 @@ class IncidentDetails extends React.Component<Props, State> {
   };
 
   render() {
-    const {incident, hasError} = this.state;
+    const {incident, stats, hasError} = this.state;
     const {params} = this.props;
 
     return (
@@ -132,11 +143,12 @@ class IncidentDetails extends React.Component<Props, State> {
           hasIncidentDetailsError={hasError}
           params={params}
           incident={incident}
+          stats={stats}
           onSubscriptionChange={this.handleSubscriptionChange}
           onStatusChange={this.handleStatusChange}
         />
 
-        <DetailsBody {...this.props} incident={incident} />
+        <DetailsBody {...this.props} incident={incident} stats={stats} />
       </React.Fragment>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/alerts/list/index.tsx b/src/sentry/static/sentry/app/views/alerts/list/index.tsx
index 772276a150..6418477f62 100644
--- a/src/sentry/static/sentry/app/views/alerts/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/list/index.tsx
@@ -2,15 +2,13 @@ import {RouteComponentProps} from 'react-router/lib/Router';
 import DocumentTitle from 'react-document-title';
 import React from 'react';
 import flatten from 'lodash/flatten';
-import memoize from 'lodash/memoize';
-import moment from 'moment';
 import omit from 'lodash/omit';
 import styled from '@emotion/styled';
 
 import {IconAdd, IconSettings} from 'app/icons';
 import {Organization} from 'app/types';
 import {PageContent, PageHeader} from 'app/styles/organization';
-import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {navigateTo} from 'app/actionCreators/navigation';
 import {t} from 'app/locale';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
@@ -19,24 +17,18 @@ import AsyncComponent from 'app/components/asyncComponent';
 import BetaTag from 'app/components/betaTag';
 import Button from 'app/components/button';
 import ButtonBar from 'app/components/buttonBar';
-import Count from 'app/components/count';
-import Duration from 'app/components/duration';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import ExternalLink from 'app/components/links/externalLink';
-import IdBadge from 'app/components/idBadge';
-import Link from 'app/components/links/link';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import PageHeading from 'app/components/pageHeading';
 import Pagination from 'app/components/pagination';
 import Projects from 'app/utils/projects';
-import getDynamicText from 'app/utils/getDynamicText';
-import overflowEllipsis from 'app/styles/overflowEllipsis';
 import space from 'app/styles/space';
 import withOrganization from 'app/utils/withOrganization';
 
 import {Incident} from '../types';
-import SparkLine from './sparkLine';
-import Status from '../status';
+import {TableLayout, TitleAndSparkLine} from './styles';
+import AlertListRow from './row';
 
 const DEFAULT_QUERY_STATUS = 'open';
 
@@ -69,51 +61,6 @@ class IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state'
     ];
   }
 
-  /**
-   * Memoized function to find a project from a list of projects
-   */
-  getProject = memoize((slug, projects) =>
-    projects.find(project => project.slug === slug)
-  );
-
-  renderListItem({incident, initiallyLoaded, projects}) {
-    const {orgId} = this.props.params;
-    const started = moment(incident.dateStarted);
-    const duration = moment
-      .duration(moment(incident.dateClosed || new Date()).diff(started))
-      .as('seconds');
-    const slug = incident.projects[0];
-
-    return (
-      <IncidentPanelItem key={incident.id}>
-        <TableLayout>
-          <TitleAndSparkLine>
-            <TitleLink to={`/organizations/${orgId}/alerts/${incident.identifier}/`}>
-              {incident.title}
-            </TitleLink>
-            <SparkLine incident={incident} />
-          </TitleAndSparkLine>
-          <ProjectColumn>
-            <IdBadge
-              project={!initiallyLoaded ? {slug} : this.getProject(slug, projects)}
-            />
-          </ProjectColumn>
-          <Status incident={incident} />
-          <div>
-            {started.format('L')}
-            <LightDuration seconds={getDynamicText({value: duration, fixed: 1200})} />
-          </div>
-          <NumericColumn>
-            <Count value={incident.uniqueUsers} />
-          </NumericColumn>
-          <NumericColumn>
-            <Count value={incident.totalEvents} />
-          </NumericColumn>
-        </TableLayout>
-      </IncidentPanelItem>
-    );
-  }
-
   renderEmpty() {
     return (
       <EmptyStateWarning>
@@ -141,13 +88,13 @@ class IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state'
             <TableLayout>
               <TitleAndSparkLine>
                 <div>{t('Alert')}</div>
-                <div>{t('Trend')}</div>
+                <RightAlignedHeader>{t('Trend')}</RightAlignedHeader>
               </TitleAndSparkLine>
               <div>{t('Project')}</div>
               <div>{t('Status')}</div>
               <div>{t('Start time (duration)')}</div>
-              <NumericColumn>{t('Users affected')}</NumericColumn>
-              <NumericColumn>{t('Total events')}</NumericColumn>
+              <RightAlignedHeader>{t('Users affected')}</RightAlignedHeader>
+              <RightAlignedHeader>{t('Total events')}</RightAlignedHeader>
             </TableLayout>
           </PanelHeader>
 
@@ -158,9 +105,15 @@ class IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state'
                 {incidentList.length === 0 && this.renderEmpty()}
                 <Projects orgId={orgId} slugs={Array.from(allProjectsFromIncidents)}>
                   {({initiallyLoaded, projects}) =>
-                    incidentList.map(incident =>
-                      this.renderListItem({incident, initiallyLoaded, projects})
-                    )
+                    incidentList.map(incident => (
+                      <AlertListRow
+                        key={incident.id}
+                        projectsLoaded={initiallyLoaded}
+                        projects={projects}
+                        incident={incident}
+                        orgId={orgId}
+                      />
+                    ))
                   }
                 </Projects>
               </React.Fragment>
@@ -326,41 +279,7 @@ const Actions = styled('div')`
   grid-auto-flow: column;
 `;
 
-const TableLayout = styled('div')`
-  display: grid;
-  grid-template-columns: 4fr 1fr 1fr 2fr 1fr 1fr;
-  grid-column-gap: ${space(1.5)};
-  width: 100%;
-  align-items: center;
-`;
-
-const LightDuration = styled(Duration)`
-  color: ${p => p.theme.gray1};
-  font-size: 0.9em;
-  margin-left: ${space(1)};
-`;
-
-const TitleAndSparkLine = styled('div')`
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-  padding-right: ${space(2)};
-  overflow: hidden;
-`;
-
-const TitleLink = styled(Link)`
-  ${overflowEllipsis}
-`;
-
-const IncidentPanelItem = styled(PanelItem)`
-  padding: ${space(1)} ${space(2)};
-`;
-
-const ProjectColumn = styled('div')`
-  overflow: hidden;
-`;
-
-const NumericColumn = styled('div')`
+const RightAlignedHeader = styled('div')`
   text-align: right;
 `;
 
diff --git a/src/sentry/static/sentry/app/views/alerts/list/row.tsx b/src/sentry/static/sentry/app/views/alerts/list/row.tsx
new file mode 100644
index 0000000000..60886d1b71
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/alerts/list/row.tsx
@@ -0,0 +1,123 @@
+import React from 'react';
+import memoize from 'lodash/memoize';
+import moment from 'moment';
+import styled from '@emotion/styled';
+
+import {PanelItem} from 'app/components/panels';
+import AsyncComponent from 'app/components/asyncComponent';
+import Count from 'app/components/count';
+import Duration from 'app/components/duration';
+import IdBadge from 'app/components/idBadge';
+import Link from 'app/components/links/link';
+import Placeholder from 'app/components/placeholder';
+import Projects from 'app/utils/projects';
+import getDynamicText from 'app/utils/getDynamicText';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
+import space from 'app/styles/space';
+
+import {Incident, IncidentStats} from '../types';
+import {TableLayout, TitleAndSparkLine} from './styles';
+import SparkLine from './sparkLine';
+import Status from '../status';
+
+type Props = {
+  incident: Incident;
+  projects: Parameters<React.ComponentProps<typeof Projects>['children']>[0]['projects'];
+  projectsLoaded: boolean;
+  orgId: string;
+} & AsyncComponent['props'];
+
+type State = {
+  stats: IncidentStats;
+} & AsyncComponent['state'];
+
+class AlertListRow extends AsyncComponent<Props, State> {
+  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {
+    const {orgId, incident} = this.props;
+    return [['stats', `/organizations/${orgId}/incidents/${incident.identifier}/stats/`]];
+  }
+  /**
+   * Memoized function to find a project from a list of projects
+   */
+  getProject = memoize((slug, projects) =>
+    projects.find(project => project.slug === slug)
+  );
+
+  renderLoading() {
+    return this.renderBody();
+  }
+
+  renderBody() {
+    const {incident, orgId, projectsLoaded, projects} = this.props;
+    const {loading, stats} = this.state;
+    const started = moment(incident.dateStarted);
+    const duration = moment
+      .duration(moment(incident.dateClosed || new Date()).diff(started))
+      .as('seconds');
+    const slug = incident.projects[0];
+
+    return (
+      <IncidentPanelItem>
+        <TableLayout>
+          <TitleAndSparkLine>
+            <TitleLink to={`/organizations/${orgId}/alerts/${incident.identifier}/`}>
+              {incident.title}
+            </TitleLink>
+
+            <SparkLine eventStats={stats?.eventStats} />
+          </TitleAndSparkLine>
+
+          <ProjectBadge
+            project={!projectsLoaded ? {slug} : this.getProject(slug, projects)}
+          />
+
+          <Status incident={incident} />
+
+          <div>
+            {started.format('L')}
+            <LightDuration seconds={getDynamicText({value: duration, fixed: 1200})} />
+          </div>
+
+          <NumericColumn>
+            {!loading ? <Count value={stats.uniqueUsers} /> : <NumericPlaceholder />}
+          </NumericColumn>
+
+          <NumericColumn>
+            {!loading ? <Count value={stats.totalEvents} /> : <NumericPlaceholder />}
+          </NumericColumn>
+        </TableLayout>
+      </IncidentPanelItem>
+    );
+  }
+}
+
+const LightDuration = styled(Duration)`
+  color: ${p => p.theme.gray1};
+  font-size: 0.9em;
+  margin-left: ${space(1)};
+`;
+
+const ProjectBadge = styled(IdBadge)`
+  flex-shrink: 0;
+`;
+
+const TitleLink = styled(Link)`
+  ${overflowEllipsis}
+`;
+
+const IncidentPanelItem = styled(PanelItem)`
+  padding: ${space(1)} ${space(2)};
+`;
+
+const NumericPlaceholder = styled(Placeholder)`
+  height: 100%;
+`;
+
+const NumericColumn = styled('div')`
+  height: 100%;
+  display: flex;
+  align-items: center;
+  justify-content: flex-end;
+`;
+
+export default AlertListRow;
diff --git a/src/sentry/static/sentry/app/views/alerts/list/sparkLine.tsx b/src/sentry/static/sentry/app/views/alerts/list/sparkLine.tsx
index dd7185815e..328fd9cc65 100644
--- a/src/sentry/static/sentry/app/views/alerts/list/sparkLine.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/list/sparkLine.tsx
@@ -2,16 +2,15 @@ import React from 'react';
 import styled from '@emotion/styled';
 
 import Placeholder from 'app/components/placeholder';
-import SentryTypes from 'app/sentryTypes';
 import theme from 'app/utils/theme';
-import {Incident} from 'app/views/alerts/types';
+import {IncidentStats} from 'app/views/alerts/types';
 
 // Height of sparkline
 const SPARKLINE_HEIGHT = 38;
 
 type Props = {
   className?: string;
-  incident: Incident;
+  eventStats: IncidentStats['eventStats'];
 };
 
 const Sparklines = React.lazy(() =>
@@ -22,14 +21,14 @@ const SparklinesLine = React.lazy(() =>
 );
 
 class SparkLine extends React.Component<Props> {
-  static propTypes = {
-    incident: SentryTypes.Incident.isRequired,
-  };
-
   render() {
-    const {className, incident} = this.props;
+    const {className, eventStats} = this.props;
+
+    if (!eventStats) {
+      return <SparkLinePlaceholder />;
+    }
 
-    const data = incident.eventStats.data.map(([, value]) =>
+    const data = eventStats.data.map(([, value]) =>
       value && Array.isArray(value) && value.length ? value[0].count || 0 : 0
     );
 
@@ -47,12 +46,11 @@ class SparkLine extends React.Component<Props> {
 
 const StyledSparkLine = styled(SparkLine)`
   flex-shrink: 0;
-  width: 120px;
+  width: 100%;
   height: ${SPARKLINE_HEIGHT}px;
 `;
 
 const SparkLinePlaceholder = styled(Placeholder)`
-  background-color: transparent;
   height: ${SPARKLINE_HEIGHT}px;
 `;
 
diff --git a/src/sentry/static/sentry/app/views/alerts/list/styles.tsx b/src/sentry/static/sentry/app/views/alerts/list/styles.tsx
new file mode 100644
index 0000000000..1ba155d843
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/alerts/list/styles.tsx
@@ -0,0 +1,22 @@
+import styled from '@emotion/styled';
+
+import space from 'app/styles/space';
+
+const TableLayout = styled('div')`
+  display: grid;
+  grid-template-columns: 4fr 1fr 1fr 2fr 1fr 1fr;
+  grid-column-gap: ${space(1.5)};
+  width: 100%;
+  align-items: center;
+`;
+
+const TitleAndSparkLine = styled('div')`
+  display: grid;
+  grid-gap: ${space(1)};
+  grid-template-columns: auto 120px;
+  align-items: center;
+  padding-right: ${space(2)};
+  overflow: hidden;
+`;
+
+export {TableLayout, TitleAndSparkLine};
diff --git a/src/sentry/static/sentry/app/views/alerts/types.tsx b/src/sentry/static/sentry/app/views/alerts/types.tsx
index 87c7886a10..049746184f 100644
--- a/src/sentry/static/sentry/app/views/alerts/types.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/types.tsx
@@ -8,9 +8,6 @@ export type Incident = {
   dateStarted: string;
   dateDetected: string;
   dateCreated: string;
-  eventStats: {
-    data: Data;
-  };
   id: string;
   identifier: string;
   isSubscribed: boolean;
@@ -21,12 +18,18 @@ export type Incident = {
   seenBy: User[];
   status: IncidentStatus;
   title: string;
-  totalEvents: number;
-  uniqueUsers: number;
   hasSeen: boolean;
   alertRule: IncidentRule;
 };
 
+export type IncidentStats = {
+  eventStats: {
+    data: Data;
+  };
+  totalEvents: number;
+  uniqueUsers: number;
+};
+
 export type IncidentSuspect = {
   author: User;
   dateCreated: string;
diff --git a/src/sentry/static/sentry/app/views/alerts/utils.tsx b/src/sentry/static/sentry/app/views/alerts/utils.tsx
index f3faefabc9..7209354244 100644
--- a/src/sentry/static/sentry/app/views/alerts/utils.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/utils.tsx
@@ -2,7 +2,7 @@ import {AlertRuleAggregations} from 'app/views/settings/incidentRules/types';
 import {Client} from 'app/api';
 import {t} from 'app/locale';
 
-import {Incident, IncidentStatus} from './types';
+import {Incident, IncidentStats, IncidentStatus} from './types';
 
 export function fetchIncident(
   api: Client,
@@ -12,6 +12,14 @@ export function fetchIncident(
   return api.requestPromise(`/organizations/${orgId}/incidents/${alertId}/`);
 }
 
+export function fetchIncidentStats(
+  api: Client,
+  orgId: string,
+  alertId: string
+): Promise<IncidentStats> {
+  return api.requestPromise(`/organizations/${orgId}/incidents/${alertId}/stats/`);
+}
+
 export function updateSubscription(
   api: Client,
   orgId: string,
diff --git a/tests/js/sentry-test/fixtures/incident.js b/tests/js/sentry-test/fixtures/incident.js
index 043070f995..bc7059fd63 100644
--- a/tests/js/sentry-test/fixtures/incident.js
+++ b/tests/js/sentry-test/fixtures/incident.js
@@ -12,12 +12,7 @@ export function Incident(params) {
     title: 'Too many Chrome errors',
     status: 0,
     projects: [],
-    totalEvents: 100,
-    uniqueUsers: 20,
     isSubscribed: true,
-    eventStats: {
-      data: [],
-    },
     alertRule: IncidentRule(),
     ...params,
   };
diff --git a/tests/js/sentry-test/fixtures/incidentStats.js b/tests/js/sentry-test/fixtures/incidentStats.js
new file mode 100644
index 0000000000..c6a11f5252
--- /dev/null
+++ b/tests/js/sentry-test/fixtures/incidentStats.js
@@ -0,0 +1,10 @@
+export function IncidentStats(params) {
+  return {
+    totalEvents: 100,
+    uniqueUsers: 20,
+    eventStats: {
+      data: [],
+    },
+    ...params,
+  };
+}
diff --git a/tests/js/spec/views/incidents/details/activity.spec.jsx b/tests/js/spec/views/alerts/details/activity.spec.jsx
similarity index 100%
rename from tests/js/spec/views/incidents/details/activity.spec.jsx
rename to tests/js/spec/views/alerts/details/activity.spec.jsx
diff --git a/tests/js/spec/views/incidents/details/index.spec.jsx b/tests/js/spec/views/alerts/details/index.spec.jsx
similarity index 92%
rename from tests/js/spec/views/incidents/details/index.spec.jsx
rename to tests/js/spec/views/alerts/details/index.spec.jsx
index d781a28b0d..13e1944635 100644
--- a/tests/js/spec/views/incidents/details/index.spec.jsx
+++ b/tests/js/spec/views/alerts/details/index.spec.jsx
@@ -31,11 +31,21 @@ describe('IncidentDetails', function() {
       body: [],
     });
 
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/incidents/123/stats/',
+      body: TestStubs.IncidentStats(),
+    });
+
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/incidents/123/seen/',
       method: 'POST',
     });
 
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/incidents/456/stats/',
+      body: TestStubs.IncidentStats({totalEvents: 555, uniqueUsers: 12}),
+    });
+
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/incidents/456/',
       statusCode: 404,
@@ -67,12 +77,16 @@ describe('IncidentDetails', function() {
     wrapper.update();
 
     expect(wrapper.find('IncidentTitle').text()).toBe('Too many Chrome errors');
+
+    // Number of users affected
     expect(
       wrapper
         .find('ItemValue')
         .at(2)
         .text()
     ).toBe('20');
+
+    // Number of events
     expect(
       wrapper
         .find('ItemValue')
diff --git a/tests/js/spec/views/incidents/index.spec.jsx b/tests/js/spec/views/alerts/index.spec.jsx
similarity index 100%
rename from tests/js/spec/views/incidents/index.spec.jsx
rename to tests/js/spec/views/alerts/index.spec.jsx
diff --git a/tests/js/spec/views/incidents/list/index.spec.jsx b/tests/js/spec/views/alerts/list/index.spec.jsx
similarity index 81%
rename from tests/js/spec/views/incidents/list/index.spec.jsx
rename to tests/js/spec/views/alerts/list/index.spec.jsx
index 387ac1c29a..3529e4c354 100644
--- a/tests/js/spec/views/incidents/list/index.spec.jsx
+++ b/tests/js/spec/views/alerts/list/index.spec.jsx
@@ -33,7 +33,7 @@ describe('IncidentsList', function() {
       body: [
         TestStubs.Incident({
           id: '123',
-          tidentifier: '1',
+          identifier: '1',
           title: 'First incident',
           projects: projects1,
         }),
@@ -45,6 +45,16 @@ describe('IncidentsList', function() {
         }),
       ],
     });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/incidents/1/stats/',
+      body: TestStubs.IncidentStats(),
+    });
+
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/incidents/2/stats/',
+      body: TestStubs.IncidentStats({totalEvents: 1000, uniqueUsers: 32}),
+    });
+
     projectMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/projects/',
       body: [
@@ -83,6 +93,38 @@ describe('IncidentsList', function() {
     ).toMatchObject({
       platform: 'javascript',
     });
+
+    expect(
+      items
+        .at(0)
+        .find('Count')
+        .at(0)
+        .text()
+    ).toBe('20');
+
+    expect(
+      items
+        .at(0)
+        .find('Count')
+        .at(1)
+        .text()
+    ).toBe('100');
+
+    expect(
+      items
+        .at(1)
+        .find('Count')
+        .at(0)
+        .text()
+    ).toBe('32');
+
+    expect(
+      items
+        .at(1)
+        .find('Count')
+        .at(1)
+        .text()
+    ).toBe('1k');
   });
 
   it('displays empty state', async function() {
