commit c7778401d13de1ff0d3bac11e0c10495500d788c
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Aug 2 14:27:40 2014 -0700

    Expand stream to correctly poll/limit/sort

diff --git a/src/sentry/static/sentry/app/controllers/projectStream.js b/src/sentry/static/sentry/app/controllers/projectStream.js
index 1369923b73..4c43e8d573 100644
--- a/src/sentry/static/sentry/app/controllers/projectStream.js
+++ b/src/sentry/static/sentry/app/controllers/projectStream.js
@@ -11,9 +11,14 @@
     init: function() {
       var self = this;
 
-      this.$scope.groupList = new this.Collection(this.$window.groupList);
-      this.timeoutId = null;
-
+      this.$scope.groupList = new this.Collection(this.$window.groupList, {
+        sortFunc: function(data) {
+          app.utils.sortArray(data, function(item){
+            return [new Date(item.lastSeen).getTime()];
+          });
+        },
+        limit: 50
+      });
       this.timeoutId = window.setTimeout(this.pollForChanges, 1000);
 
       this.$scope.$on('destroy', function(){
@@ -33,17 +38,14 @@
     pollForChanges: function() {
       var self = this;
 
-      this.$http.get('/api/0/projects/' + this.selectedProject.id + '/groups/').success(function(data){
-        for (var i = 0; i < data.length; i++) {
-          self.$scope.groupList.unshift(data[i]);
-        }
-        app.utils.sortArray(self.$scope.groupList, function(item){
-          return [new Date(item.lastSeen).getTime()];
-        }).splice(50);
-
-      }).finally(function(){
-        self.timeoutId = window.setTimeout(self.pollForChanges, 1000);
-      });
+      this.$http.get('/api/0/projects/' + this.selectedProject.id + '/groups/')
+        .success(function(data){
+          self.$timeout(function(){
+            self.$scope.groupList.extend(data);
+          });
+        }).finally(function(){
+          self.timeoutId = window.setTimeout(self.pollForChanges, 1000);
+        });
     }
   });
 }());
diff --git a/src/sentry/static/sentry/app/modules/collection.js b/src/sentry/static/sentry/app/modules/collection.js
index 421b85ae3b..2d306b9afb 100644
--- a/src/sentry/static/sentry/app/modules/collection.js
+++ b/src/sentry/static/sentry/app/modules/collection.js
@@ -5,7 +5,10 @@
     .factory('Collection', function(){
       var defaults = {
         sortFunc: null,
-        limit: null
+        limit: null,
+        equals: function(item, other) {
+          return item.id == other.id;
+        }
       };
 
       function Collection(collection, options) {
@@ -26,9 +29,7 @@
         this.options = options;
 
         if (collection !== undefined) {
-          for (i=0; i<collection.length; i++) {
-            this.push(collection[i]);
-          }
+          this.extend(collection);
         }
 
         return this;
@@ -38,9 +39,7 @@
 
       Collection.prototype.constructor = Collection;
 
-      // TODO(dcramer): we should probably make the behavior in updateItem actually
-      // be part of push/unshift
-      Collection.prototype.push = function push(item) {
+      Collection.prototype.add = function add(item) {
         if (this._updateExisting(item)) {
           return;
         }
@@ -54,20 +53,6 @@
         }
       };
 
-      Collection.prototype.unshift = function unshift(item) {
-        if (this._updateExisting(item)) {
-          return;
-        }
-
-        Array.prototype.unshift.apply(this, arguments);
-        if (this.options.sortFunc) {
-          this.options.sortFunc(this);
-        }
-        if (this.options.limit && this.length > this.options.limit) {
-          this.splice(this.options.limit, this.length - this.options.limit);
-        }
-      };
-
       Collection.prototype.remove = function remove(item) {
         for (var i = 0; i < this.length; i++) {
           if (this[i].id == item.id) {
@@ -83,13 +68,27 @@
         }
       };
 
-      Collection.prototype._updateExisting = function _updateExisting(item) {
+      Collection.prototype.extend = function extend(data) {
+        for (var i = 0; i < data.length; i++) {
+          this.add(data[i]);
+        }
+      };
+
+      Collection.prototype.indexOf = function indexOf(item) {
         for (var i = 0; i < this.length; i++) {
-          if (this[i].id == item.id) {
-            angular.extend(this[i], item);
-            return true;
+          if (this.options.equals(this[i], item)) {
+            return i;
           }
         }
+        return -1;
+      };
+
+      Collection.prototype._updateExisting = function _updateExisting(item) {
+        var existing = this.indexOf(item);
+        if (existing !== -1) {
+          $.extend(true, this[existing], item);
+          return true;
+        }
         return false;
       };
 
diff --git a/tests/js/spec/collectionSpec.js b/tests/js/spec/collectionSpec.js
index 9b33a349a0..a5b556ea20 100644
--- a/tests/js/spec/collectionSpec.js
+++ b/tests/js/spec/collectionSpec.js
@@ -8,11 +8,11 @@ describe('sentry.collection', function(){
     Collection = $injector.get('Collection');
   }));
 
-  describe('push', function() {
+  describe('add', function() {
     it('should append elements', function(){
       var c = new Collection();
-      c.push({id: 'foo'});
-      c.push({id: 'bar'});
+      c.add({id: 'foo'});
+      c.add({id: 'bar'});
 
       assert.equal(c.length, 2);
 
@@ -22,8 +22,8 @@ describe('sentry.collection', function(){
 
     it('should update existing elements', function(){
       var c = new Collection();
-      c.push({id: 'foo', biz: 'baz'});
-      c.push({id: 'foo', biz: 'boz'});
+      c.add({id: 'foo', biz: 'baz'});
+      c.add({id: 'foo', biz: 'boz'});
 
       assert.equal(c.length, 1);
 
@@ -33,9 +33,9 @@ describe('sentry.collection', function(){
 
     it('should should respect limit', function(){
       var c = new Collection([], {limit: 2});
-      c.push({id: 'foo'});
-      c.push({id: 'bar'});
-      c.push({id: 'baz'});
+      c.add({id: 'foo'});
+      c.add({id: 'bar'});
+      c.add({id: 'baz'});
 
       assert.equal(c.length, 2);
 
@@ -45,42 +45,6 @@ describe('sentry.collection', function(){
 
   });
 
-  describe('unshift', function() {
-    it('should prepend elements', function(){
-      var c = new Collection();
-      c.unshift({id: 'foo'});
-      c.unshift({id: 'bar'});
-
-      assert.equal(c.length, 2);
-
-      assert.equal(c[0].id, 'bar');
-      assert.equal(c[1].id, 'foo');
-    });
-
-    it('should update existing elements', function(){
-      var c = new Collection();
-      c.unshift({id: 'foo', biz: 'baz'});
-      c.unshift({id: 'foo', biz: 'boz'});
-
-      assert.equal(c.length, 1);
-
-      assert.equal(c[0].id, 'foo');
-      assert.equal(c[0].biz, 'boz');
-    });
-
-    it('should should respect limit', function(){
-      var c = new Collection([], {limit: 2});
-      c.unshift({id: 'foo'});
-      c.unshift({id: 'bar'});
-      c.unshift({id: 'baz'});
-
-      assert.equal(c.length, 2);
-
-      assert.equal(c[0].id, 'baz');
-      assert.equal(c[1].id, 'bar');
-    });
-  });
-
   describe('remove', function() {
     it('should not fail with missing elements', function(){
       var c = new Collection();
