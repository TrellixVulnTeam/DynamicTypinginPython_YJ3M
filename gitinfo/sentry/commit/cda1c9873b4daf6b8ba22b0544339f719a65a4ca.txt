commit cda1c9873b4daf6b8ba22b0544339f719a65a4ca
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Oct 16 10:30:06 2019 -0700

    test(eventstore): Add a pending test for transaction dataset (#15104)
    
    Add a pending test for getting a next or previous event on the transactions
    dataset.

diff --git a/tests/sentry/eventstore/snuba/test_backend.py b/tests/sentry/eventstore/snuba/test_backend.py
index ef32cc2315..c4fcfc8119 100644
--- a/tests/sentry/eventstore/snuba/test_backend.py
+++ b/tests/sentry/eventstore/snuba/test_backend.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import six
+import pytest
 
 from sentry.testutils import TestCase, SnubaTestCase
 from sentry.testutils.helpers.datetime import iso_format, before_now
@@ -53,23 +54,33 @@ class SnubaEventStorageTest(TestCase, SnubaTestCase):
         )
 
         event_data = load_data("transaction")
-        event_data["timestamp"] = self.min_ago
+        event_data["timestamp"] = iso_format(before_now(minutes=1))
+        event_data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=1))
         event_data["event_id"] = "d" * 32
 
         self.transaction_event = self.store_event(data=event_data, project_id=self.project2.id)
 
+        event_data_2 = load_data("transaction")
+        event_data_2["timestamp"] = iso_format(before_now(seconds=30))
+        event_data_2["start_timestamp"] = iso_format(before_now(seconds=31))
+
+        event_data_2["event_id"] = "e" * 32
+
+        self.transaction_event_2 = self.store_event(data=event_data_2, project_id=self.project2.id)
+
         self.eventstore = SnubaEventStorage()
 
     def test_get_events(self):
         events = self.eventstore.get_events(
             filter=Filter(project_ids=[self.project1.id, self.project2.id])
         )
-        assert len(events) == 4
+        assert len(events) == 5
         # Default sort is timestamp desc, event_id desc
-        assert events[0].id == "d" * 32
-        assert events[1].id == "c" * 32
-        assert events[2].id == "b" * 32
-        assert events[3].id == "a" * 32
+        assert events[0].id == "e" * 32
+        assert events[1].id == "d" * 32
+        assert events[2].id == "c" * 32
+        assert events[3].id == "b" * 32
+        assert events[4].id == "a" * 32
 
         # No events found
         project = self.create_project()
@@ -95,7 +106,7 @@ class SnubaEventStorageTest(TestCase, SnubaTestCase):
         assert len(event.snuba_data.keys()) == 17
 
         # Get non existent event
-        event = self.eventstore.get_event_by_id(self.project2.id, "e" * 32)
+        event = self.eventstore.get_event_by_id(self.project2.id, "f" * 32)
         assert event is None
 
     def test_get_next_prev_event_id(self):
@@ -116,9 +127,28 @@ class SnubaEventStorageTest(TestCase, SnubaTestCase):
         assert self.eventstore.get_prev_event_id(None, filter=filter) is None
         assert self.eventstore.get_next_event_id(None, filter=filter) is None
 
-    def test_get_transaction_event_by_id(self):
+    def test_transaction_get_event_by_id(self):
         event = self.eventstore.get_event_by_id(self.project2.id, self.transaction_event.event_id)
 
         assert event.id == "d" * 32
         assert event.get_event_type() == "transaction"
         assert event.project_id == self.project2.id
+
+    @pytest.mark.skip(reason="Not yet implemented")
+    def test_transaction_get_next_prev_event_id(self):
+        filter = Filter(
+            project_ids=[self.project1.id, self.project2.id],
+            conditions=[["type", "=", "transaction"]],
+        )
+
+        event = self.eventstore.get_event_by_id(self.project2.id, "e" * 32)
+        prev_event = self.eventstore.get_prev_event_id(event, filter=filter)
+        next_event = self.eventstore.get_next_event_id(event, filter=filter)
+        assert prev_event == (six.text_type(self.project2.id), "d" * 32)
+        assert next_event is None
+
+        event = self.eventstore.get_event_by_id(self.project2.id, "d" * 32)
+        prev_event = self.eventstore.get_prev_event_id(event, filter=filter)
+        next_event = self.eventstore.get_next_event_id(event, filter=filter)
+        assert prev_event is None
+        assert next_event == (six.text_type(self.project2.id), "e" * 32)
