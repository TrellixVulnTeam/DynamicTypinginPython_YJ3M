commit b46eab21e9ca4667e2d3f9a9fd4c414207dd5cac
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Wed Mar 14 16:56:05 2018 -0700

    feat(slack): Allow tags to be added

diff --git a/src/sentry/integrations/slack/notify_action.py b/src/sentry/integrations/slack/notify_action.py
index cf4e76b48f..bc0ba1e565 100644
--- a/src/sentry/integrations/slack/notify_action.py
+++ b/src/sentry/integrations/slack/notify_action.py
@@ -23,6 +23,12 @@ class SlackNotifyServiceForm(forms.Form):
         attrs={'placeholder': 'i.e #critical'},
     ))
     channel_id = forms.HiddenInput()
+    tags = forms.CharField(required=False, widget=forms.TextInput(
+        attrs={
+            'placeholder': 'i.e environment,user,my_tag',
+            'style': 'width:200px',
+        },
+    ))
 
     def __init__(self, *args, **kwargs):
         # NOTE: Workspace maps directly to the integration ID
@@ -66,7 +72,7 @@ class SlackNotifyServiceForm(forms.Form):
 
 class SlackNotifyServiceAction(EventAction):
     form_cls = SlackNotifyServiceForm
-    label = u'Send a notification to the Slack {workspace} workspace to {channel}'
+    label = u'Send a notification to the {workspace} Slack workspace to {channel} and include tags {tags}'
 
     def is_enabled(self):
         return self.get_integrations().exists()
@@ -74,6 +80,7 @@ class SlackNotifyServiceAction(EventAction):
     def after(self, event, state):
         integration_id = self.get_option('workspace')
         channel = self.get_option('channel_id')
+        tags = set(self.get_tags_list())
 
         try:
             integration = Integration.objects.get(
@@ -87,7 +94,7 @@ class SlackNotifyServiceAction(EventAction):
 
         def send_notification(event, futures):
             rules = [f.rule for f in futures]
-            attachment = build_attachment(event.group, event=event, rules=rules)
+            attachment = build_attachment(event.group, event=event, tags=tags, rules=rules)
 
             payload = {
                 'token': integration.metadata['access_token'],
@@ -112,16 +119,22 @@ class SlackNotifyServiceAction(EventAction):
             integration_name = Integration.objects.get(
                 provider='slack',
                 organizations=self.project.organization,
-                id=self.data.get('workspace')
+                id=self.get_option('workspace')
             ).name
         except Integration.DoesNotExist:
             integration_name = '[removed]'
 
+        tags = self.get_tags_list()
+
         return self.label.format(
             workspace=integration_name,
-            channel=self.data['channel'],
+            channel=self.get_option('channel'),
+            tags=u'[{}]'.format(', '.join(tags)),
         )
 
+    def get_tags_list(self):
+        return [s.strip() for s in self.get_option('tags', '').split(',')]
+
     def get_integrations(self):
         return Integration.objects.filter(
             provider='slack',
diff --git a/src/sentry/integrations/slack/utils.py b/src/sentry/integrations/slack/utils.py
index 39aaed159a..a904e6f634 100644
--- a/src/sentry/integrations/slack/utils.py
+++ b/src/sentry/integrations/slack/utils.py
@@ -115,7 +115,7 @@ def build_action_text(identity, action):
     )
 
 
-def build_attachment(group, event=None, identity=None, actions=None, rules=None):
+def build_attachment(group, event=None, tags=None, identity=None, actions=None, rules=None):
     # XXX(dcramer): options are limited to 100 choices, even when nested
     status = group.get_status()
     assignees = get_assignees(group)
@@ -179,6 +179,21 @@ def build_attachment(group, event=None, identity=None, actions=None, rules=None)
         },
     ]
 
+    fields = []
+
+    if tags:
+        event_tags = event.tags if event else group.get_latest_event().tags
+
+        for tag_key, tag_value in event_tags:
+            if tag_key in tags:
+                fields.append(
+                    {
+                        'title': tag_key.encode('utf-8'),
+                        'value': tag_value.encode('utf-8'),
+                        'short': True,
+                    }
+                )
+
     if actions:
         action_texts = filter(None, [build_action_text(identity, a) for a in actions])
         text += '\n' + '\n'.join(action_texts)
@@ -205,6 +220,7 @@ def build_attachment(group, event=None, identity=None, actions=None, rules=None)
         'title': build_attachment_title(group, event),
         'title_link': add_notification_referrer_param(group.get_absolute_url(), 'slack'),
         'text': text,
+        'fields': fields,
         'mrkdwn_in': ['text'],
         'callback_id': json.dumps({'issue': group.id}),
         'footer_icon': logo_url,
diff --git a/src/sentry/rules/base.py b/src/sentry/rules/base.py
index 193d5b1cf0..945aec38a1 100644
--- a/src/sentry/rules/base.py
+++ b/src/sentry/rules/base.py
@@ -75,8 +75,8 @@ class RuleBase(object):
     def is_enabled(self):
         return True
 
-    def get_option(self, key):
-        return self.data.get(key)
+    def get_option(self, key, default=None):
+        return self.data.get(key, default)
 
     def get_form_instance(self):
         if self.had_data:
diff --git a/tests/sentry/integrations/slack/test_notify_action.py b/tests/sentry/integrations/slack/test_notify_action.py
index a796a381f8..5d16a5df0d 100644
--- a/tests/sentry/integrations/slack/test_notify_action.py
+++ b/tests/sentry/integrations/slack/test_notify_action.py
@@ -64,9 +64,11 @@ class SlackNotifyActionTest(RuleTestCase):
         rule = self.get_rule(data={
             'workspace': self.integration.id,
             'channel': '#my-channel',
+            'tags': 'one, two'
         })
 
-        assert rule.render_label() == 'Send a notification to the Slack Awesome Team workspace to #my-channel'
+        assert rule.render_label(
+        ) == 'Send a notification to the Awesome Team Slack workspace to #my-channel and include tags [one, two]'
 
     def test_render_label_without_integration(self):
         self.integration.delete()
@@ -74,16 +76,18 @@ class SlackNotifyActionTest(RuleTestCase):
         rule = self.get_rule(data={
             'workspace': self.integration.id,
             'channel': '#my-channel',
+            'tags': '',
         })
 
         label = rule.render_label()
-        assert label == 'Send a notification to the Slack [removed] workspace to #my-channel'
+        assert label == 'Send a notification to the [removed] Slack workspace to #my-channel and include tags []'
 
     @responses.activate
     def test_valid_channel_selected(self):
         rule = self.get_rule(data={
             'workspace': self.integration.id,
             'channel': '#my-channel',
+            'tags': '',
         })
 
         channels = {
@@ -110,6 +114,7 @@ class SlackNotifyActionTest(RuleTestCase):
         rule = self.get_rule(data={
             'workspace': self.integration.id,
             'channel': '@morty',
+            'tags': '',
         })
 
         channels = {
@@ -152,6 +157,7 @@ class SlackNotifyActionTest(RuleTestCase):
         rule = self.get_rule(data={
             'workspace': self.integration.id,
             'channel': '#my-channel',
+            'tags': '',
         })
 
         channels = {
