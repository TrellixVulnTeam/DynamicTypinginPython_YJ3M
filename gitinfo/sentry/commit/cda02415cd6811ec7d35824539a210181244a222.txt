commit cda02415cd6811ec7d35824539a210181244a222
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Apr 13 09:55:31 2018 -0700

    feat(admin): Basic superuser prompt (#6852)
    
    * feat(admin): Basic superuser prompt
    
    This implements a basic verification procedure to allow users to be prompted when superuser access is required (at least in some situations).
    
    It includes:
    
    - superuser handling
    - re-authentication via PUT /api/0/auth/
    - refactoring several /manage/ components to use AsyncView
    - Update sudoModal to use `/auth/` endpoint, update NeedsSuperuser exception
    - add `is_superuser` to user context on user bootstrap
    - merge sudo endpoint with PUT `/auth/`
    - change async component to remount when `location.state` changes
    - allow resetOnError for forms (when no saveOnBlur)

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 3abeba2755..f0e1974e4c 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -84,7 +84,7 @@ class Endpoint(APIView):
 
     def handle_exception(self, request, exc):
         try:
-            return super(Endpoint, self).handle_exception(exc)
+            response = super(Endpoint, self).handle_exception(exc)
         except Exception as exc:
             import sys
             import traceback
@@ -94,7 +94,9 @@ class Endpoint(APIView):
                 'detail': 'Internal Error',
                 'errorId': event_id,
             }
-            return Response(context, status=500)
+            response = Response(context, status=500)
+            response.exception = True
+        return response
 
     def create_audit_entry(self, request, transaction_id=None, **kwargs):
         return create_audit_entry(request, transaction_id, audit_logger, **kwargs)
diff --git a/src/sentry/api/endpoints/auth_index.py b/src/sentry/api/endpoints/auth_index.py
index c7e4af156c..7667340288 100644
--- a/src/sentry/api/endpoints/auth_index.py
+++ b/src/sentry/api/endpoints/auth_index.py
@@ -2,14 +2,17 @@ from __future__ import absolute_import
 
 from django.contrib.auth import logout
 from django.contrib.auth.models import AnonymousUser
+from rest_framework import status
+from rest_framework.authentication import SessionAuthentication
 from rest_framework.response import Response
 
 from sentry.api.authentication import QuietBasicAuthentication
 from sentry.api.base import Endpoint
 from sentry.api.serializers import serialize
-from sentry.auth.superuser import is_active_superuser
+from sentry.api.validators import AuthVerifyValidator
 from sentry.models import Authenticator
-from sentry.utils import auth
+from sentry.utils import auth, json
+from sentry.utils.functional import extract_lazy_object
 
 
 class AuthIndexEndpoint(Endpoint):
@@ -21,7 +24,10 @@ class AuthIndexEndpoint(Endpoint):
     and simple HTTP authentication.
     """
 
-    authentication_classes = [QuietBasicAuthentication]
+    authentication_classes = [
+        QuietBasicAuthentication,
+        SessionAuthentication,
+    ]
 
     permission_classes = ()
 
@@ -31,10 +37,16 @@ class AuthIndexEndpoint(Endpoint):
 
     def get(self, request):
         if not request.user.is_authenticated():
-            return Response(status=400)
-
-        data = serialize(request.user, request.user)
-        data['isSuperuser'] = is_active_superuser(request)
+            return Response(status=status.HTTP_400_BAD_REQUEST)
+
+        user = extract_lazy_object(request._request.user)
+        data = serialize(user, user)
+        # XXX(dcramer): we dont use is_active_superuser here as we simply
+        # want to tell the UI that we're an authenticated superuser, and
+        # for requests that require an *active* session, they should prompt
+        # on-demand. This ensures things like links to the Sentry admin can
+        # still easily be rendered.
+        data['isSuperuser'] = user.is_superuser
         return Response(data)
 
     def post(self, request):
@@ -54,7 +66,7 @@ class AuthIndexEndpoint(Endpoint):
             curl -X ###METHOD### -u username:password ###URL###
         """
         if not request.user.is_authenticated():
-            return Response(status=400)
+            return Response(status=status.HTTP_400_BAD_REQUEST)
 
         # If 2fa login is enabled then we cannot sign in with username and
         # password through this api endpoint.
@@ -62,9 +74,9 @@ class AuthIndexEndpoint(Endpoint):
             return Response(
                 {
                     '2fa_required': True,
-                    'message': 'Cannot sign-in with basic auth when 2fa is enabled.'
+                    'message': 'Cannot sign-in with password authentication when 2fa is enabled.'
                 },
-                status=403
+                status=status.HTTP_403_FORBIDDEN
             )
 
         try:
@@ -73,11 +85,70 @@ class AuthIndexEndpoint(Endpoint):
         except auth.AuthUserPasswordExpired:
             return Response(
                 {
+                    'message': 'Cannot sign-in with password authentication because password has expired.',
+                },
+                status=status.HTTP_403_FORBIDDEN
+            )
+
+        request.user = request._request.user
+
+        return self.get(request)
+
+    def put(self, request):
+        """
+        Verify a User
+        `````````````
+
+        This endpoint verifies the currently authenticated user (for example, to gain superuser).
+
+        :auth: required
+        """
+        if not request.user.is_authenticated():
+            return Response(status=status.HTTP_401_UNAUTHORIZED)
+
+        validator = AuthVerifyValidator(data=request.DATA)
+        if not validator.is_valid():
+            return self.respond(validator.errors, status=status.HTTP_400_BAD_REQUEST)
+
+        authenticated = False
+
+        # See if we have a u2f challenge/response
+        if 'challenge' in validator.object and 'response' in validator.object:
+            try:
+                interface = Authenticator.objects.get_interface(request.user, 'u2f')
+                if not interface.is_enrolled:
+                    raise LookupError()
+
+                challenge = json.loads(validator.object['challenge'])
+                response = json.loads(validator.object['response'])
+                authenticated = interface.validate_response(request, challenge, response)
+            except ValueError:
+                pass
+            except LookupError:
+                pass
+
+        # attempt password authentication
+        else:
+            authenticated = request.user.check_password(validator.object['password'])
+
+        # UI treats 401s by redirecting, this 401 should be ignored
+        if not authenticated:
+            return Response({'detail': {'code': 'ignore'}}, status=status.HTTP_403_FORBIDDEN)
+
+        try:
+            # Must use the real request object that Django knows about
+            auth.login(request._request, request.user)
+        except auth.AuthUserPasswordExpired:
+            return Response(
+                {
+                    'code': 'password-expired',
                     'message': 'Cannot sign-in with basic auth because password has expired.',
                 },
-                status=403
+                status=status.HTTP_403_FORBIDDEN
             )
 
+        request.user = request._request.user
+
         return self.get(request)
 
     def delete(self, request, *args, **kwargs):
@@ -89,4 +160,4 @@ class AuthIndexEndpoint(Endpoint):
         """
         logout(request._request)
         request.user = AnonymousUser()
-        return Response(status=204)
+        return Response(status=status.HTTP_204_NO_CONTENT)
diff --git a/src/sentry/api/endpoints/sudo.py b/src/sentry/api/endpoints/sudo.py
deleted file mode 100644
index 8968c27e12..0000000000
--- a/src/sentry/api/endpoints/sudo.py
+++ /dev/null
@@ -1,44 +0,0 @@
-from __future__ import absolute_import
-
-from django.contrib import auth
-from rest_framework import status
-from rest_framework.response import Response
-from rest_framework.permissions import IsAuthenticated
-from sudo.utils import grant_sudo_privileges
-
-from sentry.api.base import Endpoint
-from sentry.models import Authenticator
-from sentry.utils import json
-
-
-class SudoEndpoint(Endpoint):
-    permission_classes = (IsAuthenticated, )
-
-    def post(self, request):
-        authenticated = False
-
-        if 'challenge' in request.DATA and 'response' in request.DATA:
-            try:
-                interface = Authenticator.objects.get_interface(request.user, 'u2f')
-                if not interface.is_enrolled:
-                    raise LookupError()
-
-                challenge = json.loads(request.DATA['challenge'])
-                response = json.loads(request.DATA['response'])
-                authenticated = interface.validate_response(request, challenge, response)
-            except ValueError:
-                pass
-            except LookupError:
-                pass
-
-        else:
-            authenticated = auth.authenticate(
-                username=request.user.email,
-                password=request.DATA.get('password'))
-
-        if authenticated:
-            grant_sudo_privileges(request._request)
-            return Response(status=status.HTTP_204_NO_CONTENT)
-
-        # UI treats 401s by redirecting, this 401 should be ignored
-        return Response({'detail': {'code': 'ignore'}}, status=status.HTTP_401_UNAUTHORIZED)
diff --git a/src/sentry/api/exceptions.py b/src/sentry/api/exceptions.py
index dfaccf9760..1b0c2738c8 100644
--- a/src/sentry/api/exceptions.py
+++ b/src/sentry/api/exceptions.py
@@ -39,6 +39,12 @@ class SsoRequired(SentryAPIException):
         )
 
 
+class SuperuserRequired(SentryAPIException):
+    status_code = status.HTTP_403_FORBIDDEN
+    code = 'superuser-required'
+    message = 'You need to re-authenticate for superuser.'
+
+
 class SudoRequired(SentryAPIException):
     status_code = status.HTTP_401_UNAUTHORIZED
     code = 'sudo-required'
diff --git a/src/sentry/api/permissions.py b/src/sentry/api/permissions.py
index 3372ed01df..86afac2a0d 100644
--- a/src/sentry/api/permissions.py
+++ b/src/sentry/api/permissions.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from rest_framework import permissions
 
+from sentry.api.exceptions import SuperuserRequired
 from sentry.auth.superuser import is_active_superuser
 
 
@@ -46,4 +47,6 @@ class SuperuserPermission(permissions.BasePermission):
     def has_permission(self, request, view):
         if is_active_superuser(request):
             return True
+        if request.user.is_authenticated() and request.user.is_superuser:
+            raise SuperuserRequired
         return False
diff --git a/src/sentry/api/serializers/models/user.py b/src/sentry/api/serializers/models/user.py
index 6e19ef438b..c6135e1399 100644
--- a/src/sentry/api/serializers/models/user.py
+++ b/src/sentry/api/serializers/models/user.py
@@ -70,6 +70,7 @@ class UserSerializer(Serializer):
             'email': obj.email,
             'avatarUrl': get_gravatar_url(obj.email, size=32),
             'isActive': obj.is_active,
+            'hasPasswordAuth': obj.password not in ('!', ''),
             'isManaged': obj.is_managed,
             'dateJoined': obj.date_joined,
             'lastLogin': obj.last_login,
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index e98ff84527..e830223cdf 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -133,7 +133,6 @@ from .endpoints.dif_files import DifAssembleEndpoint
 from .endpoints.shared_group_details import SharedGroupDetailsEndpoint
 from .endpoints.system_health import SystemHealthEndpoint
 from .endpoints.system_options import SystemOptionsEndpoint
-from .endpoints.sudo import SudoEndpoint
 from .endpoints.team_avatar import TeamAvatarEndpoint
 from .endpoints.team_details import TeamDetailsEndpoint
 from .endpoints.team_groups_new import TeamGroupsNewEndpoint
@@ -197,9 +196,6 @@ urlpatterns = patterns(
         AuthenticatorIndexEndpoint.as_view(),
         name='sentry-api-0-authenticator-index'),
 
-    # Sudo
-    url(r'^sudo/$', SudoEndpoint.as_view(), name='sentry-api-0-sudo'),
-
     # Broadcasts
     url(r'^broadcasts/$', BroadcastIndexEndpoint.as_view(),
         name='sentry-api-0-broadcast-index'),
diff --git a/src/sentry/api/validators/auth.py b/src/sentry/api/validators/auth.py
new file mode 100644
index 0000000000..54489c66ab
--- /dev/null
+++ b/src/sentry/api/validators/auth.py
@@ -0,0 +1,10 @@
+from __future__ import absolute_import
+
+from rest_framework import serializers
+
+
+class AuthVerifyValidator(serializers.Serializer):
+    password = serializers.CharField(required=False)
+    # For u2f
+    challenge = serializers.CharField(required=False)
+    response = serializers.CharField(required=False)
diff --git a/src/sentry/static/sentry/app/actionCreators/modal.jsx b/src/sentry/static/sentry/app/actionCreators/modal.jsx
index 3fa5aacab6..e3b05789a9 100644
--- a/src/sentry/static/sentry/app/actionCreators/modal.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/modal.jsx
@@ -16,12 +16,10 @@ export function closeModal() {
   ModalActions.closeModal();
 }
 
-export function openSudo({retryRequest, onClose} = {}) {
+export function openSudo({onClose, ...args} = {}) {
   import(/* webpackChunkName: "SudoModal" */ '../components/modals/sudoModal')
     .then(mod => mod.default)
-    .then(SudoModal =>
-      openModal(deps => <SudoModal {...deps} retryRequest={retryRequest} />, {onClose})
-    );
+    .then(SudoModal => openModal(deps => <SudoModal {...deps} {...args} />, {onClose}));
 }
 
 export function openDiffModal(options) {
diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index d830bcf2a4..922d816665 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -1,8 +1,9 @@
 import $ from 'jquery';
-import _ from 'lodash';
+import {isUndefined} from 'lodash';
+import idx from 'idx';
 
-import GroupActions from './actions/groupActions';
 import {openSudo} from './actionCreators/modal';
+import GroupActions from './actions/groupActions';
 
 export class Request {
   constructor(xhr) {
@@ -30,7 +31,7 @@ export function paramsToQueryArgs(params) {
 
 export class Client {
   constructor(options) {
-    if (_.isUndefined(options)) {
+    if (isUndefined(options)) {
       options = {};
     }
     this.baseUrl = options.baseUrl || '/api/0';
@@ -48,7 +49,7 @@ export class Client {
 
   wrapCallback(id, func, cleanup) {
     /*eslint consistent-return:0*/
-    if (_.isUndefined(func)) {
+    if (isUndefined(func)) {
       return;
     }
 
@@ -70,14 +71,13 @@ export class Client {
   }
 
   handleRequestError({id, path, requestOptions}, response, ...responseArgs) {
-    let isSudoRequired =
-      response &&
-      response.responseJSON &&
-      response.responseJSON.detail &&
-      response.responseJSON.detail.code === 'sudo-required';
+    let code = response && idx(response, _ => _.responseJSON.detail.code);
+    let isSudoRequired = code === 'sudo-required' || code === 'superuser-required';
 
     if (isSudoRequired) {
       openSudo({
+        superuser: code === 'superuser-required',
+        sudo: code === 'sudo-required',
         retryRequest: () => {
           return this.requestPromise(path, requestOptions)
             .then((...args) => {
@@ -111,7 +111,7 @@ export class Client {
     let data = options.data;
     let id = this.uniqueId();
 
-    if (!_.isUndefined(data) && method !== 'GET') {
+    if (!isUndefined(data) && method !== 'GET') {
       data = JSON.stringify(data);
     }
 
@@ -171,7 +171,7 @@ export class Client {
   }
 
   _chain(...funcs) {
-    funcs = funcs.filter(f => !_.isUndefined(f) && f);
+    funcs = funcs.filter(f => !isUndefined(f) && f);
     return (...args) => {
       funcs.forEach(func => {
         func.apply(funcs, args);
@@ -180,7 +180,7 @@ export class Client {
   }
 
   _wrapRequest(path, options, extraParams) {
-    if (_.isUndefined(extraParams)) {
+    if (isUndefined(extraParams)) {
       extraParams = {};
     }
 
diff --git a/src/sentry/static/sentry/app/components/asyncComponent.jsx b/src/sentry/static/sentry/app/components/asyncComponent.jsx
index 7a6c36fe28..ea7c8c860f 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.jsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.jsx
@@ -46,7 +46,8 @@ class AsyncComponent extends React.Component {
     // re-fetch data when router params change
     if (
       !isEqual(this.props.params, nextProps.params) ||
-      currentLocation.search !== nextLocation.search
+      currentLocation.search !== nextLocation.search ||
+      currentLocation.state !== nextLocation.state
     ) {
       this.remountComponent();
     }
@@ -125,23 +126,27 @@ class AsyncComponent extends React.Component {
             error = null;
           }
 
-          this.setState(prevState => {
-            return {
-              [stateKey]: null,
-              errors: {
-                ...prevState.errors,
-                [stateKey]: error,
-              },
-              remainingRequests: prevState.remainingRequests - 1,
-              loading: prevState.remainingRequests > 1,
-              error: prevState.error || !!error,
-            };
-          });
+          this.handleError(error, [stateKey, endpoint, params, options]);
         },
       });
     });
   };
 
+  handleError(error, [stateKey]) {
+    this.setState(prevState => {
+      return {
+        [stateKey]: null,
+        errors: {
+          ...prevState.errors,
+          [stateKey]: error,
+        },
+        remainingRequests: prevState.remainingRequests - 1,
+        loading: prevState.remainingRequests > 1,
+        error: prevState.error || !!error,
+      };
+    });
+  }
+
   // DEPRECATED: use getEndpoints()
   getEndpointParams() {
     // eslint-disable-next-line no-console
diff --git a/src/sentry/static/sentry/app/components/forms/apiForm.jsx b/src/sentry/static/sentry/app/components/forms/apiForm.jsx
index d1718ab893..114d93ec47 100644
--- a/src/sentry/static/sentry/app/components/forms/apiForm.jsx
+++ b/src/sentry/static/sentry/app/components/forms/apiForm.jsx
@@ -12,6 +12,14 @@ export default class ApiForm extends Form {
     onSubmit: PropTypes.func,
     apiMethod: PropTypes.string.isRequired,
     apiEndpoint: PropTypes.string.isRequired,
+    submitLoadingMessage: PropTypes.string,
+    submitErrorMessage: PropTypes.string,
+  };
+
+  static defaultProps = {
+    ...Form.defaultProps,
+    submitErrorMessage: t('There was an error saving your changes.'),
+    submitLoadingMessage: t('Saving changes..'),
   };
 
   constructor(props, context) {
@@ -38,7 +46,7 @@ export default class ApiForm extends Form {
         state: FormState.SAVING,
       },
       () => {
-        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        let loadingIndicator = IndicatorStore.add(this.props.submitLoadingMessage);
         this.api.request(this.props.apiEndpoint, {
           method: this.props.apiMethod,
           data,
@@ -48,7 +56,7 @@ export default class ApiForm extends Form {
           },
           error: error => {
             IndicatorStore.remove(loadingIndicator);
-            IndicatorStore.add(t('There was an error saving your changes.'), 'error');
+            IndicatorStore.add(this.props.submitErrorMessage, 'error');
             this.onSubmitError(error);
           },
         });
diff --git a/src/sentry/static/sentry/app/components/modals/sudoModal.jsx b/src/sentry/static/sentry/app/components/modals/sudoModal.jsx
index c250155d96..931a72fdcd 100644
--- a/src/sentry/static/sentry/app/components/modals/sudoModal.jsx
+++ b/src/sentry/static/sentry/app/components/modals/sudoModal.jsx
@@ -1,13 +1,18 @@
+import {withRouter} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
 import createReactClass from 'create-react-class';
 
 import {t} from '../../locale';
-import ApiForm from '../forms/apiForm';
+import Alert from '../alert';
 import ApiMixin from '../../mixins/apiMixin';
-import LoadingIndicator from '../loadingIndicator';
-import SimplePasswordField from '../forms/simplePasswordField';
+import Button from '../buttons/button';
+import ConfigStore from '../../stores/configStore';
+import Form from '../../views/settings/components/forms/form';
+import InputField from '../../views/settings/components/forms/inputField';
+import TextBlock from '../../views/settings/components/text/textBlock';
 import U2fContainer from '../u2fContainer';
+import space from '../../styles/space';
 
 class SudoModal extends React.Component {
   static propTypes = {
@@ -17,6 +22,9 @@ class SudoModal extends React.Component {
      * expects a function that returns a Promise
      */
     retryRequest: PropTypes.func.isRequired,
+    superuser: PropTypes.bool,
+    router: PropTypes.object,
+    user: PropTypes.object,
 
     Header: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,
     Body: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,
@@ -30,14 +38,15 @@ class SudoModal extends React.Component {
     };
   }
 
-  handleSubmit = () => {
-    this.setState({busy: true});
-  };
-
   handleSuccess = () => {
-    let {closeModal, retryRequest} = this.props;
+    let {closeModal, superuser, router, retryRequest} = this.props;
     if (!retryRequest) return;
 
+    if (superuser) {
+      router.replace({...router.getCurrentLocation(), state: {forceUpdate: new Date()}});
+      return;
+    }
+
     this.setState(
       {
         busy: true,
@@ -66,8 +75,8 @@ class SudoModal extends React.Component {
     this.setState({busy: true});
     // u2Interface expects this to return a promise
     return this.props.api
-      .requestPromise('/sudo/', {
-        method: 'POST',
+      .requestPromise('/auth/', {
+        method: 'PUT',
         data,
       })
       .then(() => {
@@ -82,36 +91,70 @@ class SudoModal extends React.Component {
   };
 
   render() {
-    let {closeModal, Header, Body} = this.props;
+    let {closeModal, user, Header, Body} = this.props;
 
     return (
-      <ApiForm
-        apiMethod="POST"
-        apiEndpoint="/sudo/"
-        footerClass="modal-footer"
-        submitLabel={t('Continue')}
-        onSubmit={this.handleSubmit}
-        onSubmitSuccess={this.handleSuccess}
-        onSubmitError={this.handleError}
-        hideErrors
-        resetOnError
-      >
+      <React.Fragment>
         <Header closeButton onHide={closeModal}>
           {t('Confirm Your Identity')}
         </Header>
 
         <Body>
-          {this.state.busy && <LoadingIndicator css={{zIndex: 1}} overlay />}
-          <p>{t('Help us keep your account safe by confirming your identity.')}</p>
-          {this.state.error && (
-            <div className="alert alert-error alert-block">{t('Incorrect password')}</div>
+          {!user.hasPasswordAuth ? (
+            <div>
+              <TextBlock>{t('You will need to reauthenticate to continue.')}</TextBlock>
+              <Button
+                priority="primary"
+                href={`/auth/login/?next=${encodeURIComponent(location.pathname)}`}
+              >
+                {t('Continue')}
+              </Button>
+            </div>
+          ) : (
+            <React.Fragment>
+              <TextBlock css={{marginBottom: space(1)}}>
+                {t('Help us keep your account safe by confirming your identity.')}
+              </TextBlock>
+
+              {this.state.error && (
+                <Alert
+                  css={{marginBottom: 0}}
+                  type="error"
+                  icon="icon-circle-exclamation"
+                >
+                  {t('Incorrect password')}
+                </Alert>
+              )}
+
+              <Form
+                apiMethod="PUT"
+                apiEndpoint="/auth/"
+                submitLabel={t('Continue')}
+                onSubmit={this.handleSubmit}
+                onSubmitSuccess={this.handleSuccess}
+                onSubmitError={this.handleError}
+                hideErrors
+                resetOnError
+                hideFooter={!user.hasPasswordAuth}
+              >
+                <InputField
+                  type="password"
+                  inline={false}
+                  label={t('Password')}
+                  flexibleControlStateSize
+                  name="password"
+                  css={{
+                    paddingLeft: 0,
+                    paddingRight: 0,
+                    borderBottom: 'none',
+                  }}
+                />
+                <U2fContainer displayMode="sudo" onTap={this.handleU2fTap} />
+              </Form>
+            </React.Fragment>
           )}
-
-          <SimplePasswordField label={t('Password')} required name="password" />
-
-          <U2fContainer displayMode="sudo" onTap={this.handleU2fTap} />
         </Body>
-      </ApiForm>
+      </React.Fragment>
     );
   }
 }
@@ -121,9 +164,10 @@ const SudoModalContainer = createReactClass({
   mixins: [ApiMixin],
 
   render() {
-    return <SudoModal {...this.props} api={this.api} />;
+    let user = ConfigStore.get('user');
+    return <SudoModal {...this.props} user={user} api={this.api} />;
   },
 });
 
-export default SudoModalContainer;
+export default withRouter(SudoModalContainer);
 export {SudoModal};
diff --git a/src/sentry/static/sentry/app/components/u2fContainer.jsx b/src/sentry/static/sentry/app/components/u2fContainer.jsx
index a2f0b0f437..5986626af7 100644
--- a/src/sentry/static/sentry/app/components/u2fContainer.jsx
+++ b/src/sentry/static/sentry/app/components/u2fContainer.jsx
@@ -31,10 +31,11 @@ class U2fContainer extends React.Component {
   }
 
   render() {
-    if (this.state.authenticators) {
+    let {className, authenticators} = this.state;
+    if (authenticators && authenticators.length) {
       return (
-        <div>
-          {this.state.authenticators.map(({id, ...other}) => {
+        <div className={className}>
+          {authenticators.map(({id, ...other}) => {
             if (id === 'u2f' && other.challenge) {
               return <U2fSign key={id} {...this.props} challengeData={other.challenge} />;
             }
diff --git a/src/sentry/static/sentry/app/views/adminBuffer.jsx b/src/sentry/static/sentry/app/views/adminBuffer.jsx
index ce57c79292..291d2d8d9c 100644
--- a/src/sentry/static/sentry/app/views/adminBuffer.jsx
+++ b/src/sentry/static/sentry/app/views/adminBuffer.jsx
@@ -1,19 +1,20 @@
 /*eslint getsentry/jsx-needs-il8n:0*/
 import React from 'react';
 
+import AsyncView from './asyncView';
 import InternalStatChart from '../components/internalStatChart';
 
-class AdminBuffer extends React.Component {
-  constructor(...args) {
-    super(...args);
-    this.state = {
-      since: new Date().getTime() / 1000 - 3600 * 24 * 7,
+export default class AdminBuffer extends AsyncView {
+  getDefaultState() {
+    return {
+      ...super.getDefaultState(),
       resolution: '1h',
     };
   }
 
-  render() {
+  renderBody() {
     // TODO(dcramer): show buffer configuration when its moved into option store
+    const since = new Date().getTime() / 1000 - 3600 * 24 * 7;
     return (
       <div>
         <h3>Buffers</h3>
@@ -39,7 +40,7 @@ class AdminBuffer extends React.Component {
             <h4>Updates Processed</h4>
           </div>
           <InternalStatChart
-            since={this.state.since}
+            since={since}
             resolution={this.state.resolution}
             stat="jobs.finished.sentry.tasks.process_buffer.process_incr"
             label="Jobs"
@@ -51,7 +52,7 @@ class AdminBuffer extends React.Component {
             <h4>Revoked Updates</h4>
           </div>
           <InternalStatChart
-            since={this.state.since}
+            since={since}
             resolution={this.state.resolution}
             stat="buffer.revoked"
             label="Jobs"
@@ -61,5 +62,3 @@ class AdminBuffer extends React.Component {
     );
   }
 }
-
-export default AdminBuffer;
diff --git a/src/sentry/static/sentry/app/views/adminLayout.jsx b/src/sentry/static/sentry/app/views/adminLayout.jsx
index 12c503a45a..683a6f3333 100644
--- a/src/sentry/static/sentry/app/views/adminLayout.jsx
+++ b/src/sentry/static/sentry/app/views/adminLayout.jsx
@@ -28,7 +28,7 @@ export default class extends React.Component {
   render() {
     return (
       <DocumentTitle title={this.getTitle()}>
-        <div className="app">
+        <div className="app" css={{paddingTop: 20}}>
           <Sidebar />
           <div className="container">
             <div className="content">
diff --git a/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx b/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx
index 6e4ab043e7..885ce8e820 100644
--- a/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx
+++ b/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx
@@ -34,6 +34,12 @@ export default createReactClass({
     this.fetchData();
   },
 
+  componentWillReceiveProps(nextProps) {
+    if (this.props.since !== nextProps.since) {
+      this.setState(this.getInitialState(), this.fetchData);
+    }
+  },
+
   fetchData() {
     let statNameList = [
       'client-api.all-versions.responses.2xx',
@@ -46,7 +52,7 @@ export default createReactClass({
         method: 'GET',
         data: {
           since: this.props.since,
-          resolution: '1h',
+          resolution: this.props.resolution,
           key: statName,
         },
         success: data => {
diff --git a/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx b/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx
index 78aca7eea9..591313f48a 100644
--- a/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx
+++ b/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx
@@ -35,6 +35,12 @@ export default createReactClass({
     this.fetchData();
   },
 
+  componentWillReceiveProps(nextProps) {
+    if (this.props.since !== nextProps.since) {
+      this.setState(this.getInitialState(), this.fetchData);
+    }
+  },
+
   fetchData() {
     let statNameList = ['events.total', 'events.dropped'];
 
diff --git a/src/sentry/static/sentry/app/views/adminOverview/index.jsx b/src/sentry/static/sentry/app/views/adminOverview/index.jsx
index 390077691b..e41669cd21 100644
--- a/src/sentry/static/sentry/app/views/adminOverview/index.jsx
+++ b/src/sentry/static/sentry/app/views/adminOverview/index.jsx
@@ -2,19 +2,22 @@
 import React from 'react';
 
 import ApiChart from './apiChart';
+import AsyncView from '../asyncView';
 import EventChart from './eventChart';
 import {t} from '../../locale';
 
-export default class extends React.Component {
-  constructor(...args) {
-    super(...args);
-    this.state = {
-      since: new Date().getTime() / 1000 - 3600 * 24 * 7,
-      resolution: '1h',
-    };
+export default class AdminOverview extends AsyncView {
+  getTitle() {
+    return 'Admin Overview';
   }
 
-  render() {
+  getEndpoints() {
+    return [];
+  }
+
+  renderBody() {
+    const resolution = '1h';
+    const since = new Date().getTime() / 1000 - 3600 * 24 * 7;
     return (
       <div>
         <h3>{t('System Overview')}</h3>
@@ -26,14 +29,14 @@ export default class extends React.Component {
               <span id="rate" className="pull-right" />
             </h4>
           </div>
-          <EventChart since={this.state.since} resolution={this.state.resolution} />
+          <EventChart since={since} resolution={resolution} />
         </div>
 
         <div className="box">
           <div className="box-header">
             <h4>{t('API Responses')}</h4>
           </div>
-          <ApiChart since={this.state.since} resolution={this.state.resolution} />
+          <ApiChart since={since} resolution={resolution} />
         </div>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/views/adminQueue.jsx b/src/sentry/static/sentry/app/views/adminQueue.jsx
index ab199f5f90..2c16602250 100644
--- a/src/sentry/static/sentry/app/views/adminQueue.jsx
+++ b/src/sentry/static/sentry/app/views/adminQueue.jsx
@@ -1,51 +1,24 @@
 /*eslint getsentry/jsx-needs-il8n:0*/
 import React from 'react';
 
-import createReactClass from 'create-react-class';
-
-import ApiMixin from '../mixins/apiMixin';
-import LoadingError from '../components/loadingError';
-import LoadingIndicator from '../components/loadingIndicator';
+import AsyncView from './asyncView';
 import InternalStatChart from '../components/internalStatChart';
 import {Select2Field} from '../components/forms';
 
-export default createReactClass({
-  displayName: 'adminQueue',
-  mixins: [ApiMixin],
-
-  getInitialState() {
+export default class AdminQueue extends AsyncView {
+  getDefaultState() {
     return {
+      ...super.getDefaultState(),
       timeWindow: '1w',
       since: new Date().getTime() / 1000 - 3600 * 24 * 7,
       resolution: '1h',
-      loading: true,
-      error: false,
       taskName: null,
-      taskList: [],
     };
-  },
+  }
 
-  componentDidMount() {
-    this.fetchData();
-  },
-
-  fetchData() {
-    this.api.request('/internal/queue/tasks/', {
-      method: 'GET',
-      success: data => {
-        this.setState({
-          taskList: data,
-          loading: false,
-          error: false,
-        });
-      },
-      error: data => {
-        this.setState({
-          error: true,
-        });
-      },
-    });
-  },
+  getEndpoints() {
+    return [['taskList', '/internal/queue/tasks/']];
+  }
 
   changeWindow(timeWindow) {
     let seconds;
@@ -62,13 +35,13 @@ export default createReactClass({
       since: new Date().getTime() / 1000 - seconds,
       timeWindow,
     });
-  },
+  }
 
   changeTask(value) {
     this.setState({activeTask: value});
-  },
+  }
 
-  render() {
+  renderBody() {
     let {activeTask, taskList} = this.state;
 
     return (
@@ -105,53 +78,47 @@ export default createReactClass({
 
         <h3 className="no-border">Task Details</h3>
 
-        {this.state.loading ? (
-          <LoadingIndicator />
-        ) : this.state.error ? (
-          <LoadingError onRetry={this.fetchData} />
-        ) : (
+        <div>
           <div>
+            <label>Show details for task:</label>
+            <Select2Field
+              name="task"
+              onChange={this.changeTask}
+              value={activeTask}
+              allowClear={true}
+              choices={[''].concat(...taskList).map(t => [t, t])}
+            />
+          </div>
+          {activeTask ? (
             <div>
-              <label>Show details for task:</label>
-              <Select2Field
-                name="task"
-                onChange={this.changeTask}
-                value={activeTask}
-                allowClear={true}
-                choices={[''].concat(...taskList).map(t => [t, t])}
-              />
-            </div>
-            {activeTask ? (
-              <div>
-                <div className="box box-mini" key="jobs.started">
-                  <div className="box-header">
-                    Jobs Started <small>{activeTask}</small>
-                  </div>
-                  <InternalStatChart
-                    since={this.state.since}
-                    resolution={this.state.resolution}
-                    stat={`jobs.started.${this.state.activeTask}`}
-                    label="jobs"
-                    height={100}
-                  />
+              <div className="box box-mini" key="jobs.started">
+                <div className="box-header">
+                  Jobs Started <small>{activeTask}</small>
                 </div>
-                <div className="box box-mini" key="jobs.finished">
-                  <div className="box-header">
-                    Jobs Finished <small>{activeTask}</small>
-                  </div>
-                  <InternalStatChart
-                    since={this.state.since}
-                    resolution={this.state.resolution}
-                    stat={`jobs.finished.${this.state.activeTask}`}
-                    label="jobs"
-                    height={100}
-                  />
+                <InternalStatChart
+                  since={this.state.since}
+                  resolution={this.state.resolution}
+                  stat={`jobs.started.${this.state.activeTask}`}
+                  label="jobs"
+                  height={100}
+                />
+              </div>
+              <div className="box box-mini" key="jobs.finished">
+                <div className="box-header">
+                  Jobs Finished <small>{activeTask}</small>
                 </div>
+                <InternalStatChart
+                  since={this.state.since}
+                  resolution={this.state.resolution}
+                  stat={`jobs.finished.${this.state.activeTask}`}
+                  label="jobs"
+                  height={100}
+                />
               </div>
-            ) : null}
-          </div>
-        )}
+            </div>
+          ) : null}
+        </div>
       </div>
     );
-  },
-});
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/adminQuotas.jsx b/src/sentry/static/sentry/app/views/adminQuotas.jsx
index db09ad9e6c..2765df3fd2 100644
--- a/src/sentry/static/sentry/app/views/adminQuotas.jsx
+++ b/src/sentry/static/sentry/app/views/adminQuotas.jsx
@@ -6,17 +6,18 @@ import {TextField} from '../components/forms';
 import InternalStatChart from '../components/internalStatChart';
 
 export default class AdminQuotas extends AsyncView {
-  getEndpoints() {
-    return [['config', '/internal/quotas/']];
-  }
-
   getDefaultState() {
     return {
+      ...super.getDefaultState(),
       since: new Date().getTime() / 1000 - 3600 * 24 * 7,
       resolution: '1h',
     };
   }
 
+  getEndpoints() {
+    return [['config', '/internal/quotas/']];
+  }
+
   renderBody() {
     let {config} = this.state;
     return (
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index 1f3b3692a8..a067b327c1 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -7,6 +7,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import createReactClass from 'create-react-class';
 import keydown from 'react-keydown';
+import idx from 'idx';
 
 import {openCommandPalette} from '../actionCreators/modal';
 import {t} from '../locale';
@@ -108,20 +109,16 @@ const App = createReactClass({
       // Ignore error unless it is a 401
       if (!jqXHR || jqXHR.status !== 401 || pageAllowsAnon) return;
 
-      let response = jqXHR.responseJSON;
+      let code = idx(jqXHR, _ => _.responseJSON.detail.code);
+      let extra = idx(jqXHR, _ => _.responseJSON.detail.extra);
 
       // 401s can also mean sudo is required or it's a request that is allowed to fail
       // Ignore if these are the cases
-      if (
-        response &&
-        response.detail &&
-        (response.detail.code === 'sudo-required' || response.detail.code === 'ignore')
-      )
-        return;
+      if (code === 'sudo-required' || code === 'ignore') return;
 
       // If user must login via SSO, redirect to org login page
-      if (response && response.detail && response.detail.code === 'sso-required') {
-        window.location.assign(response.detail.extra.loginUrl);
+      if (code === 'sso-required') {
+        window.location.assign(extra.loginUrl);
         return;
       }
 
diff --git a/src/sentry/static/sentry/app/views/asyncView.jsx b/src/sentry/static/sentry/app/views/asyncView.jsx
index f89f57b1fe..906e193a0b 100644
--- a/src/sentry/static/sentry/app/views/asyncView.jsx
+++ b/src/sentry/static/sentry/app/views/asyncView.jsx
@@ -3,14 +3,11 @@ import React from 'react';
 
 import AsyncComponent from '../components/asyncComponent';
 
-class AsyncView extends AsyncComponent {
-  constructor(...args) {
-    super(...args);
-  }
-
+export default class AsyncView extends AsyncComponent {
   getTitle() {
     return '';
   }
+
   render() {
     let title = this.getTitle();
     return (
@@ -20,5 +17,3 @@ class AsyncView extends AsyncComponent {
     );
   }
 }
-
-export default AsyncView;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx
index 8bf4603f83..6ab91d446a 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx
@@ -82,6 +82,11 @@ class Field extends React.Component {
      */
     children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
 
+    /**
+     * Class name for inner control
+     */
+    controlClassName: PropTypes.string,
+
     /** Inline style */
     style: PropTypes.object,
   };
@@ -95,7 +100,9 @@ class Field extends React.Component {
   };
 
   render() {
+    let {className, ...otherProps} = this.props;
     let {
+      controlClassName,
       alignRight,
       inline,
       highlighted,
@@ -110,7 +117,7 @@ class Field extends React.Component {
       p,
       children,
       style,
-    } = this.props;
+    } = otherProps;
     let isDisabled = typeof disabled === 'function' ? disabled(this.props) : disabled;
     let isVisible = typeof visible === 'function' ? visible(this.props) : visible;
     let Control;
@@ -120,6 +127,7 @@ class Field extends React.Component {
     }
 
     let controlProps = {
+      className: controlClassName,
       inline,
       alignRight,
       disabled: isDisabled,
@@ -130,7 +138,7 @@ class Field extends React.Component {
     // See comments in prop types
     if (typeof children === 'function') {
       Control = children({
-        ...this.props,
+        ...otherProps,
         ...controlProps,
       });
     } else {
@@ -140,6 +148,7 @@ class Field extends React.Component {
     return (
       <FieldWrapper
         p={p}
+        className={className}
         inline={inline}
         highlighted={highlighted}
         hasControlState={!flexibleControlStateSize}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx
index bfdac3b408..f3668b06c1 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx
@@ -21,11 +21,17 @@ export default class Form extends React.Component {
     footerStyle: PropTypes.object,
     extraButton: PropTypes.element,
     initialData: PropTypes.object,
+    // Require changes before able to submit form
     requireChanges: PropTypes.bool,
+    // Reset form when there are errors, after submit
+    resetOnError: PropTypes.bool,
+    // Hide Footer
     hideFooter: PropTypes.bool,
-    model: PropTypes.object,
+    // Allow undo
     allowUndo: PropTypes.bool,
+    // Save field on control blur
     saveOnBlur: PropTypes.bool,
+    model: PropTypes.object,
     apiMethod: PropTypes.string,
     apiEndpoint: PropTypes.string,
   };
@@ -55,6 +61,7 @@ export default class Form extends React.Component {
       saveOnBlur,
       apiEndpoint,
       apiMethod,
+      resetOnError,
       onSubmitSuccess,
       onSubmitError,
       onFieldChange,
@@ -66,6 +73,7 @@ export default class Form extends React.Component {
     this.model = model || new FormModel();
     this.model.setInitialData(initialData);
     this.model.setFormOptions({
+      resetOnError,
       allowUndo,
       onFieldChange,
       onSubmitSuccess,
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
index de624eca0e..929f3d1378 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
@@ -285,6 +285,7 @@ class FormField extends React.Component {
 
   render() {
     let {
+      className,
       name,
       hideErrorMessage,
       flexibleControlStateSize,
@@ -299,7 +300,7 @@ class FormField extends React.Component {
 
     return (
       <React.Fragment>
-        <Field id={id} name={name} {...props}>
+        <Field id={id} name={name} className={className} {...props}>
           {({alignRight, inline, disabled, disabledReason}) => (
             <FieldControl
               disabled={disabled}
@@ -331,6 +332,7 @@ class FormField extends React.Component {
                         innerRef={this.handleInputMount}
                         {...{
                           ...this.props,
+                          name,
                           id,
                           onKeyDown: this.handleKeyDown,
                           onChange: this.handleChange,
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
index 8b5613eb6c..e910a6de5b 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
@@ -22,10 +22,10 @@ export default class InputField extends React.Component {
   };
 
   render() {
-    let {field, ...otherProps} = this.props;
+    let {className, field, ...otherProps} = this.props;
 
     return (
-      <FormField {...this.props}>
+      <FormField className={className} {...this.props}>
         {({children, ...formFieldProps}) => {
           return field({
             ...otherProps,
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
index c68c235b1b..963e0846b1 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
@@ -348,6 +348,9 @@ class FormModel {
       .catch((resp, ...args) => {
         // should we revert field value to last known state?
         saveSnapshot = null;
+        if (this.options.resetOnError) {
+          this.setInitialData({});
+        }
         this.submitError(resp);
         if (this.options.onSubmitError) {
           this.options.onSubmitError(resp, this);
diff --git a/src/sentry/static/sentry/less/admin.less b/src/sentry/static/sentry/less/admin.less
index dbdd06c52b..a4c7f72806 100644
--- a/src/sentry/static/sentry/less/admin.less
+++ b/src/sentry/static/sentry/less/admin.less
@@ -1,4 +1,7 @@
 .admin {
+  .container {
+    padding-top: 20px;
+  }
   .box {
     h3 {
       border-bottom: none;
diff --git a/src/sentry/static/sentry/less/layout.less b/src/sentry/static/sentry/less/layout.less
index 61253a46a6..80d8cfda15 100644
--- a/src/sentry/static/sentry/less/layout.less
+++ b/src/sentry/static/sentry/less/layout.less
@@ -44,6 +44,10 @@ body.narrow {
 
   background: #fff;
 
+  &.dialog {
+    padding-top: 0;
+  }
+
   h3,
   h4 {
     line-height: 1.2;
@@ -441,6 +445,11 @@ footer {
     padding-top: 30px !important;
   }
 
+  .narrow.dialog .app > .container,
+  .narrow.dialog.windowed-small .app > .container {
+    padding-top: 10px !important;
+  }
+
   .nav-tabs {
     > li {
       text-transform: capitalize;
diff --git a/src/sentry/templatetags/sentry_react.py b/src/sentry/templatetags/sentry_react.py
index befbf00884..dd1518f496 100644
--- a/src/sentry/templatetags/sentry_react.py
+++ b/src/sentry/templatetags/sentry_react.py
@@ -94,6 +94,7 @@ def get_react_config(context):
 
     if user:
         user = extract_lazy_object(user)
+        is_superuser = user.is_superuser
 
     enabled_features = []
     if features.has('organizations:create', actor=user):
diff --git a/src/sentry/web/decorators.py b/src/sentry/web/decorators.py
index c964c3df27..8b6687edc3 100644
--- a/src/sentry/web/decorators.py
+++ b/src/sentry/web/decorators.py
@@ -45,6 +45,9 @@ def requires_admin(func):
     @wraps(func)
     def wrapped(request, *args, **kwargs):
         if not is_active_superuser(request):
+            if request.user.is_superuser:
+                auth.initiate_login(request, next_url=request.get_full_path())
+                return HttpResponseRedirect(auth.get_login_url())
             return render_to_response('sentry/missing_permissions.html', {}, request, status=400)
         return func(request, *args, **kwargs)
 
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 39ed692f5b..908f02c161 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -23,7 +23,7 @@ jest.mock('react-router', () => {
   };
 });
 
-const constantDate = new Date('2017-10-17T04:41:20'); //National Pasta Day
+const constantDate = new Date(1508208080000); //National Pasta Day
 MockDate.set(constantDate);
 
 // We generally use actual jQuery, and jest mocks takes precedence over node_modules
diff --git a/tests/js/spec/components/modals/sudoModal.spec.jsx b/tests/js/spec/components/modals/sudoModal.spec.jsx
index 61f6935bf4..8e30a91a66 100644
--- a/tests/js/spec/components/modals/sudoModal.spec.jsx
+++ b/tests/js/spec/components/modals/sudoModal.spec.jsx
@@ -49,6 +49,7 @@ describe('Sudo Modal', function() {
   });
 
   it('can delete an org with sudo flow', async function() {
+    ConfigStore.set('user', {hasPasswordAuth: true});
     let wrapper = mount(<App>{<div>placeholder content</div>}</App>);
 
     let api = new Client();
@@ -85,8 +86,8 @@ describe('Sudo Modal', function() {
       statusCode: 200,
     });
     let sudoMock = Client.addMockResponse({
-      url: '/sudo/',
-      method: 'POST',
+      url: '/auth/',
+      method: 'PUT',
       statusCode: 200,
     });
 
@@ -98,15 +99,15 @@ describe('Sudo Modal', function() {
       .simulate('change', {target: {value: 'password'}});
 
     wrapper.find('ModalDialog form').simulate('submit');
-    wrapper.find('ModalDialog [type="submit"]').simulate('click');
+    wrapper.find('ModalDialog Button[type="submit"]').simulate('click');
 
     await tick();
     wrapper.update();
 
     expect(sudoMock).toHaveBeenCalledWith(
-      '/sudo/',
+      '/auth/',
       expect.objectContaining({
-        method: 'POST',
+        method: 'PUT',
         data: {
           password: 'password',
         },
@@ -128,4 +129,31 @@ describe('Sudo Modal', function() {
     // Sudo Modal should be closed
     expect(wrapper.find('ModalDialog')).toHaveLength(0);
   });
+
+  it('shows button to redirect if user does not have password auth', async function() {
+    ConfigStore.set('user', {hasPasswordAuth: false});
+    let wrapper = mount(<App>{<div>placeholder content</div>}</App>);
+
+    let api = new Client();
+    let successCb = jest.fn();
+    let errorCb = jest.fn();
+
+    // No Modal
+    expect(wrapper.find('ModalDialog')).toHaveLength(0);
+
+    // Should return w/ `sudoRequired`
+    api.request('/organizations/org-slug/', {
+      method: 'DELETE',
+      success: successCb,
+      error: errorCb,
+    });
+
+    await tick();
+    await tick();
+    wrapper.update();
+
+    // Should have Modal + input
+    expect(wrapper.find('ModalDialog input')).toHaveLength(0);
+    expect(wrapper.find('Button').prop('href')).toMatch('/auth/login/?next=blank');
+  });
 });
diff --git a/tests/js/spec/views/__snapshots__/adminBuffer.spec.jsx.snap b/tests/js/spec/views/__snapshots__/adminBuffer.spec.jsx.snap
new file mode 100644
index 0000000000..16d9131695
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/adminBuffer.spec.jsx.snap
@@ -0,0 +1,72 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`AdminBuffer render() renders 1`] = `
+<SideEffect(DocumentTitle)
+  title="Sentry"
+>
+  <div>
+    <h3>
+      Buffers
+    </h3>
+    <div
+      className="box"
+    >
+      <div
+        className="box-header"
+      >
+        <h4>
+          About
+        </h4>
+      </div>
+      <div
+        className="box-content with-padding"
+      >
+        <p>
+          Sentry buffers are responsible for making changes to cardinality counters — such as an issues event count — as well as updating attributes like
+           
+          <em>
+            last seen
+          </em>
+          . These are flushed on a regularly interval, and are directly affected by the queue backlog.
+        </p>
+      </div>
+    </div>
+    <div
+      className="box"
+    >
+      <div
+        className="box-header"
+      >
+        <h4>
+          Updates Processed
+        </h4>
+      </div>
+      <internalStatChart
+        height={150}
+        label="Jobs"
+        resolution="1h"
+        since={1507603280}
+        stat="jobs.finished.sentry.tasks.process_buffer.process_incr"
+      />
+    </div>
+    <div
+      className="box"
+    >
+      <div
+        className="box-header"
+      >
+        <h4>
+          Revoked Updates
+        </h4>
+      </div>
+      <internalStatChart
+        height={150}
+        label="Jobs"
+        resolution="1h"
+        since={1507603280}
+        stat="buffer.revoked"
+      />
+    </div>
+  </div>
+</SideEffect(DocumentTitle)>
+`;
diff --git a/tests/js/spec/views/__snapshots__/adminQueue.spec.jsx.snap b/tests/js/spec/views/__snapshots__/adminQueue.spec.jsx.snap
new file mode 100644
index 0000000000..e320e46cb2
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/adminQueue.spec.jsx.snap
@@ -0,0 +1,254 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`AdminQueue render() renders 1`] = `
+<SideEffect(DocumentTitle)
+  title="Sentry"
+>
+  <div>
+    <div
+      className="btn-group pull-right"
+    >
+      <a
+        className="btn btn-sm btn-default"
+        key="1h"
+        onClick={[Function]}
+      >
+        1h
+      </a>
+      <a
+        className="btn btn-sm btn-default"
+        key="1d"
+        onClick={[Function]}
+      >
+        1d
+      </a>
+      <a
+        className="btn btn-sm btn-primary"
+        key="1w"
+        onClick={[Function]}
+      >
+        1w
+      </a>
+    </div>
+    <h3
+      className="no-border"
+    >
+      Queue Overview
+    </h3>
+    <div
+      className="box"
+    >
+      <div
+        className="box-header"
+      >
+        <h3>
+          Global Throughput
+        </h3>
+      </div>
+      <internalStatChart
+        height={150}
+        label="jobs started"
+        resolution="1h"
+        since={1507603280}
+        stat="jobs.all.started"
+      />
+    </div>
+    <h3
+      className="no-border"
+    >
+      Task Details
+    </h3>
+    <div>
+      <div>
+        <label>
+          Show details for task:
+        </label>
+        <Select2Field
+          allowClear={true}
+          allowEmpty={false}
+          choices={
+            Array [
+              Array [
+                "",
+                "",
+              ],
+              Array [
+                "celery.backend_cleanup",
+                "celery.backend_cleanup",
+              ],
+              Array [
+                "celery.chain",
+                "celery.chain",
+              ],
+              Array [
+                "celery.chord",
+                "celery.chord",
+              ],
+              Array [
+                "celery.chord_unlock",
+                "celery.chord_unlock",
+              ],
+              Array [
+                "celery.chunks",
+                "celery.chunks",
+              ],
+              Array [
+                "celery.group",
+                "celery.group",
+              ],
+              Array [
+                "celery.map",
+                "celery.map",
+              ],
+              Array [
+                "celery.starmap",
+                "celery.starmap",
+              ],
+              Array [
+                "sentry.celery.SentryTask",
+                "sentry.celery.SentryTask",
+              ],
+              Array [
+                "sentry.tasks.activity.send_activity_notifications",
+                "sentry.tasks.activity.send_activity_notifications",
+              ],
+              Array [
+                "sentry.tasks.clear_expired_resolutions",
+                "sentry.tasks.clear_expired_resolutions",
+              ],
+              Array [
+                "sentry.tasks.commits.fetch_commits",
+                "sentry.tasks.commits.fetch_commits",
+              ],
+              Array [
+                "sentry.tasks.deletion.delete_api_application",
+                "sentry.tasks.deletion.delete_api_application",
+              ],
+              Array [
+                "sentry.tasks.deletion.delete_group",
+                "sentry.tasks.deletion.delete_group",
+              ],
+              Array [
+                "sentry.tasks.deletion.delete_organization",
+                "sentry.tasks.deletion.delete_organization",
+              ],
+              Array [
+                "sentry.tasks.deletion.delete_project",
+                "sentry.tasks.deletion.delete_project",
+              ],
+              Array [
+                "sentry.tasks.deletion.delete_repository",
+                "sentry.tasks.deletion.delete_repository",
+              ],
+              Array [
+                "sentry.tasks.deletion.delete_team",
+                "sentry.tasks.deletion.delete_team",
+              ],
+              Array [
+                "sentry.tasks.deletion.generic_delete",
+                "sentry.tasks.deletion.generic_delete",
+              ],
+              Array [
+                "sentry.tasks.deletion.revoke_api_tokens",
+                "sentry.tasks.deletion.revoke_api_tokens",
+              ],
+              Array [
+                "sentry.tasks.deletion.run_deletion",
+                "sentry.tasks.deletion.run_deletion",
+              ],
+              Array [
+                "sentry.tasks.deletion.run_scheduled_deletions",
+                "sentry.tasks.deletion.run_scheduled_deletions",
+              ],
+              Array [
+                "sentry.tasks.digests.deliver_digest",
+                "sentry.tasks.digests.deliver_digest",
+              ],
+              Array [
+                "sentry.tasks.digests.schedule_digests",
+                "sentry.tasks.digests.schedule_digests",
+              ],
+              Array [
+                "sentry.tasks.email.process_inbound_email",
+                "sentry.tasks.email.process_inbound_email",
+              ],
+              Array [
+                "sentry.tasks.email.send_email",
+                "sentry.tasks.email.send_email",
+              ],
+              Array [
+                "sentry.tasks.email_unlink_notifications",
+                "sentry.tasks.email_unlink_notifications",
+              ],
+              Array [
+                "sentry.tasks.index_event_tags",
+                "sentry.tasks.index_event_tags",
+              ],
+              Array [
+                "sentry.tasks.merge.merge_group",
+                "sentry.tasks.merge.merge_group",
+              ],
+              Array [
+                "sentry.tasks.merge.rehash_group_events",
+                "sentry.tasks.merge.rehash_group_events",
+              ],
+              Array [
+                "sentry.tasks.post_process.plugin_post_process_group",
+                "sentry.tasks.post_process.plugin_post_process_group",
+              ],
+              Array [
+                "sentry.tasks.post_process.post_process_group",
+                "sentry.tasks.post_process.post_process_group",
+              ],
+              Array [
+                "sentry.tasks.process_buffer.process_incr",
+                "sentry.tasks.process_buffer.process_incr",
+              ],
+              Array [
+                "sentry.tasks.process_buffer.process_pending",
+                "sentry.tasks.process_buffer.process_pending",
+              ],
+              Array [
+                "sentry.tasks.send_sso_link_emails",
+                "sentry.tasks.send_sso_link_emails",
+              ],
+              Array [
+                "sentry.tasks.store.preprocess_event",
+                "sentry.tasks.store.preprocess_event",
+              ],
+              Array [
+                "sentry.tasks.store.preprocess_event_from_reprocessing",
+                "sentry.tasks.store.preprocess_event_from_reprocessing",
+              ],
+              Array [
+                "sentry.tasks.store.process_event",
+                "sentry.tasks.store.process_event",
+              ],
+              Array [
+                "sentry.tasks.store.process_event_from_reprocessing",
+                "sentry.tasks.store.process_event_from_reprocessing",
+              ],
+              Array [
+                "sentry.tasks.store.save_event",
+                "sentry.tasks.store.save_event",
+              ],
+              Array [
+                "sentry.tasks.unmerge",
+                "sentry.tasks.unmerge",
+              ],
+            ]
+          }
+          disabled={false}
+          escapeMarkup={true}
+          hideErrorMessage={false}
+          multiple={false}
+          name="task"
+          onChange={[Function]}
+          placeholder="--"
+          required={false}
+        />
+      </div>
+    </div>
+  </div>
+</SideEffect(DocumentTitle)>
+`;
diff --git a/tests/js/spec/views/__snapshots__/adminQuotas.spec.jsx.snap b/tests/js/spec/views/__snapshots__/adminQuotas.spec.jsx.snap
new file mode 100644
index 0000000000..a8be07c3bd
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/adminQuotas.spec.jsx.snap
@@ -0,0 +1,78 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`AdminQuotas render() renders 1`] = `
+<SideEffect(DocumentTitle)
+  title="Sentry"
+>
+  <div>
+    <h3>
+      Quotas
+    </h3>
+    <div
+      className="box"
+    >
+      <div
+        className="box-header"
+      >
+        <h4>
+          Config
+        </h4>
+      </div>
+      <div
+        className="box-content with-padding"
+      >
+        <TextField
+          disabled={true}
+          hideErrorMessage={false}
+          label="Backend"
+          required={false}
+          value="sentry.quotas.redis.RedisQuota"
+        />
+        <TextField
+          disabled={true}
+          hideErrorMessage={false}
+          label="Rate Limit"
+          required={false}
+          value={0}
+        />
+      </div>
+    </div>
+    <div
+      className="box"
+    >
+      <div
+        className="box-header"
+      >
+        <h4>
+          Total Events
+        </h4>
+      </div>
+      <internalStatChart
+        height={150}
+        label="Events"
+        resolution="1h"
+        since={1507603280}
+        stat="events.total"
+      />
+    </div>
+    <div
+      className="box"
+    >
+      <div
+        className="box-header"
+      >
+        <h4>
+          Dropped Events
+        </h4>
+      </div>
+      <internalStatChart
+        height={150}
+        label="Events"
+        resolution="1h"
+        since={1507603280}
+        stat="events.dropped"
+      />
+    </div>
+  </div>
+</SideEffect(DocumentTitle)>
+`;
diff --git a/tests/js/spec/views/__snapshots__/adminSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/adminSettings.spec.jsx.snap
index 1786622289..d3ad302181 100644
--- a/tests/js/spec/views/__snapshots__/adminSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/adminSettings.spec.jsx.snap
@@ -1,6 +1,6 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
-exports['AdminSettings render() renders 1'] = `
+exports[`AdminSettings render() renders 1`] = `
 <SideEffect(DocumentTitle)
   title="Sentry"
 >
@@ -33,7 +33,9 @@ exports['AdminSettings render() renders 1'] = `
       requireChanges={true}
       resetOnError={false}
       submitDisabled={false}
+      submitErrorMessage="There was an error saving your changes."
       submitLabel="Save Changes"
+      submitLoadingMessage="Saving changes.."
     >
       <h4>
         General
diff --git a/tests/js/spec/views/__snapshots__/apiNewToken.spec.jsx.snap b/tests/js/spec/views/__snapshots__/apiNewToken.spec.jsx.snap
index 8c24862bd3..692150cc3a 100644
--- a/tests/js/spec/views/__snapshots__/apiNewToken.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/apiNewToken.spec.jsx.snap
@@ -64,7 +64,9 @@ exports[`ApiNewToken render() renders 1`] = `
       requireChanges={false}
       resetOnError={false}
       submitDisabled={false}
+      submitErrorMessage="There was an error saving your changes."
       submitLabel="Save Changes"
+      submitLoadingMessage="Saving changes.."
     >
       <MultipleCheckboxField
         choices={
diff --git a/tests/js/spec/views/__snapshots__/organizationApiKeyDetailsView.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationApiKeyDetailsView.spec.jsx.snap
index b12479961e..0fa2fa6a8f 100644
--- a/tests/js/spec/views/__snapshots__/organizationApiKeyDetailsView.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationApiKeyDetailsView.spec.jsx.snap
@@ -52,7 +52,9 @@ exports[`OrganizationApiKeyDetailsView renders 1`] = `
           requireChanges={false}
           resetOnError={false}
           submitDisabled={false}
+          submitErrorMessage="There was an error saving your changes."
           submitLabel="Save Changes"
+          submitLoadingMessage="Saving changes.."
         >
           <form
             className="form-stacked"
diff --git a/tests/js/spec/views/__snapshots__/organizationAuthProvider.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationAuthProvider.spec.jsx.snap
index 14f20c855f..f65dea909c 100644
--- a/tests/js/spec/views/__snapshots__/organizationAuthProvider.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationAuthProvider.spec.jsx.snap
@@ -82,7 +82,9 @@ exports[`OrganizationAuthProvider renders 1`] = `
         requireChanges={false}
         resetOnError={false}
         submitDisabled={false}
+        submitErrorMessage="There was an error saving your changes."
         submitLabel="Save Settings"
+        submitLoadingMessage="Saving changes.."
       >
         <BooleanField
           disabled={false}
@@ -335,7 +337,9 @@ exports[`OrganizationAuthProvider renders with Unlinked members  1`] = `
         requireChanges={false}
         resetOnError={false}
         submitDisabled={false}
+        submitErrorMessage="There was an error saving your changes."
         submitLabel="Save Settings"
+        submitLoadingMessage="Saving changes.."
       >
         <BooleanField
           disabled={false}
@@ -519,7 +523,9 @@ Array [
       requireChanges={false}
       resetOnError={false}
       submitDisabled={false}
+      submitErrorMessage="There was an error saving your changes."
       submitLabel="Save Settings"
+      submitLoadingMessage="Saving changes.."
     >
       <BooleanField
         disabled={false}
diff --git a/tests/js/spec/views/__snapshots__/organizationAuthView.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationAuthView.spec.jsx.snap
index a06fe97a88..cd4c82f6c8 100644
--- a/tests/js/spec/views/__snapshots__/organizationAuthView.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationAuthView.spec.jsx.snap
@@ -63,7 +63,9 @@ exports[`OrganizationAuthView renders from api 1`] = `
         requireChanges={false}
         resetOnError={false}
         submitDisabled={false}
+        submitErrorMessage="There was an error saving your changes."
         submitLabel="Save Settings"
+        submitLoadingMessage="Saving changes.."
       >
         <BooleanField
           disabled={false}
diff --git a/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap
index 4acacbac94..4f02085a0f 100644
--- a/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap
@@ -28,7 +28,9 @@ exports[`OrganizationCreate render() renders with terms 1`] = `
       requireChanges={true}
       resetOnError={false}
       submitDisabled={false}
+      submitErrorMessage="There was an error saving your changes."
       submitLabel="Create Organization"
+      submitLoadingMessage="Saving changes.."
     >
       <TextField
         disabled={false}
@@ -102,7 +104,9 @@ exports[`OrganizationCreate render() renders without terms 1`] = `
       requireChanges={true}
       resetOnError={false}
       submitDisabled={false}
+      submitErrorMessage="There was an error saving your changes."
       submitLabel="Create Organization"
+      submitLoadingMessage="Saving changes.."
     >
       <TextField
         disabled={false}
diff --git a/tests/js/spec/views/__snapshots__/teamSettings.old.spec.jsx.snap b/tests/js/spec/views/__snapshots__/teamSettings.old.spec.jsx.snap
index 79cdd786ce..fb87c7964a 100644
--- a/tests/js/spec/views/__snapshots__/teamSettings.old.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/teamSettings.old.spec.jsx.snap
@@ -28,7 +28,9 @@ exports[`TeamSettings (Old) render() renders 1`] = `
         requireChanges={true}
         resetOnError={false}
         submitDisabled={false}
+        submitErrorMessage="There was an error saving your changes."
         submitLabel="Save Changes"
+        submitLoadingMessage="Saving changes.."
       >
         <TextField
           disabled={false}
diff --git a/tests/js/spec/views/__snapshots__/teamSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/teamSettings.spec.jsx.snap
index c95c73c73b..a740372cbb 100644
--- a/tests/js/spec/views/__snapshots__/teamSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/teamSettings.spec.jsx.snap
@@ -28,7 +28,9 @@ exports[`TeamSettings render() renders 1`] = `
         requireChanges={true}
         resetOnError={false}
         submitDisabled={false}
+        submitErrorMessage="There was an error saving your changes."
         submitLabel="Save Changes"
+        submitLoadingMessage="Saving changes.."
       >
         <TextField
           disabled={false}
@@ -80,7 +82,9 @@ exports[`TeamSettings render() renders with remove team 1`] = `
         requireChanges={true}
         resetOnError={false}
         submitDisabled={false}
+        submitErrorMessage="There was an error saving your changes."
         submitLabel="Save Changes"
+        submitLoadingMessage="Saving changes.."
       >
         <TextField
           disabled={false}
diff --git a/tests/js/spec/views/adminBuffer.spec.jsx b/tests/js/spec/views/adminBuffer.spec.jsx
new file mode 100644
index 0000000000..95bd61c688
--- /dev/null
+++ b/tests/js/spec/views/adminBuffer.spec.jsx
@@ -0,0 +1,19 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+
+import AdminBuffer from 'app/views/adminBuffer';
+
+// TODO(dcramer): this doesnt really test anything as we need to
+// mock the API Response/wait on it
+describe('AdminBuffer', function() {
+  describe('render()', function() {
+    it('renders', function() {
+      let wrapper = shallow(<AdminBuffer params={{}} />, {
+        context: {
+          router: TestStubs.router(),
+        },
+      });
+      expect(wrapper).toMatchSnapshot();
+    });
+  });
+});
diff --git a/tests/js/spec/views/adminQueue.spec.jsx b/tests/js/spec/views/adminQueue.spec.jsx
new file mode 100644
index 0000000000..486ecabe0e
--- /dev/null
+++ b/tests/js/spec/views/adminQueue.spec.jsx
@@ -0,0 +1,69 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+
+import {Client} from 'app/api';
+import AdminQueue from 'app/views/adminQueue';
+
+// TODO(dcramer): this doesnt really test anything as we need to
+// mock the API Response/wait on it
+describe('AdminQueue', function() {
+  describe('render()', function() {
+    beforeEach(() => {
+      Client.addMockResponse({
+        url: '/internal/queue/tasks/',
+        body: [
+          'celery.backend_cleanup',
+          'celery.chain',
+          'celery.chord',
+          'celery.chord_unlock',
+          'celery.chunks',
+          'celery.group',
+          'celery.map',
+          'celery.starmap',
+          'sentry.celery.SentryTask',
+          'sentry.tasks.activity.send_activity_notifications',
+          'sentry.tasks.clear_expired_resolutions',
+          'sentry.tasks.commits.fetch_commits',
+          'sentry.tasks.deletion.delete_api_application',
+          'sentry.tasks.deletion.delete_group',
+          'sentry.tasks.deletion.delete_organization',
+          'sentry.tasks.deletion.delete_project',
+          'sentry.tasks.deletion.delete_repository',
+          'sentry.tasks.deletion.delete_team',
+          'sentry.tasks.deletion.generic_delete',
+          'sentry.tasks.deletion.revoke_api_tokens',
+          'sentry.tasks.deletion.run_deletion',
+          'sentry.tasks.deletion.run_scheduled_deletions',
+          'sentry.tasks.digests.deliver_digest',
+          'sentry.tasks.digests.schedule_digests',
+          'sentry.tasks.email.process_inbound_email',
+          'sentry.tasks.email.send_email',
+          'sentry.tasks.email_unlink_notifications',
+          'sentry.tasks.index_event_tags',
+          'sentry.tasks.merge.merge_group',
+          'sentry.tasks.merge.rehash_group_events',
+          'sentry.tasks.post_process.plugin_post_process_group',
+          'sentry.tasks.post_process.post_process_group',
+          'sentry.tasks.process_buffer.process_incr',
+          'sentry.tasks.process_buffer.process_pending',
+          'sentry.tasks.send_sso_link_emails',
+          'sentry.tasks.store.preprocess_event',
+          'sentry.tasks.store.preprocess_event_from_reprocessing',
+          'sentry.tasks.store.process_event',
+          'sentry.tasks.store.process_event_from_reprocessing',
+          'sentry.tasks.store.save_event',
+          'sentry.tasks.unmerge',
+        ],
+      });
+    });
+
+    it('renders', function() {
+      let wrapper = shallow(<AdminQueue params={{}} />, {
+        context: {
+          router: TestStubs.router(),
+        },
+      });
+      expect(wrapper).toMatchSnapshot();
+    });
+  });
+});
diff --git a/tests/js/spec/views/adminQuotas.spec.jsx b/tests/js/spec/views/adminQuotas.spec.jsx
new file mode 100644
index 0000000000..c70b55e13f
--- /dev/null
+++ b/tests/js/spec/views/adminQuotas.spec.jsx
@@ -0,0 +1,32 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+
+import {Client} from 'app/api';
+import AdminQuotas from 'app/views/adminQuotas';
+
+// TODO(dcramer): this doesnt really test anything as we need to
+// mock the API Response/wait on it
+describe('AdminQuotas', function() {
+  describe('render()', function() {
+    beforeEach(() => {
+      Client.addMockResponse({
+        url: '/internal/quotas/',
+        body: {
+          options: {
+            'system.rate-limit': 0,
+          },
+          backend: 'sentry.quotas.redis.RedisQuota',
+        },
+      });
+    });
+
+    it('renders', function() {
+      let wrapper = shallow(<AdminQuotas params={{}} />, {
+        context: {
+          router: TestStubs.router(),
+        },
+      });
+      expect(wrapper).toMatchSnapshot();
+    });
+  });
+});
diff --git a/tests/sentry/api/endpoints/test_auth_index.py b/tests/sentry/api/endpoints/test_auth_index.py
new file mode 100644
index 0000000000..4f04419395
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_auth_index.py
@@ -0,0 +1,83 @@
+from __future__ import absolute_import
+
+import six
+
+from base64 import b64encode
+from sentry.testutils import APITestCase
+
+
+class AuthDetailsEndpointTest(APITestCase):
+    path = '/api/0/auth/'
+
+    def test_logged_in(self):
+        user = self.create_user('foo@example.com')
+        self.login_as(user)
+        response = self.client.get(self.path)
+        assert response.status_code == 200
+        assert response.data['id'] == six.text_type(user.id)
+
+    def test_logged_out(self):
+        response = self.client.get(self.path)
+        assert response.status_code == 400
+
+
+class AuthLoginEndpointTest(APITestCase):
+    path = '/api/0/auth/'
+
+    def test_valid_password(self):
+        user = self.create_user('foo@example.com')
+        response = self.client.post(self.path,
+                                    HTTP_AUTHORIZATION='Basic {}'.format(b64encode('{}:{}'.format(
+                                        user.username,
+                                        'admin',
+                                    ))),
+                                    )
+        assert response.status_code == 200
+        assert response.data['id'] == six.text_type(user.id)
+
+    def test_invalid_password(self):
+        user = self.create_user('foo@example.com')
+        response = self.client.post(self.path,
+                                    HTTP_AUTHORIZATION='Basic {}'.format(b64encode('{}:{}'.format(
+                                        user.username,
+                                        'foobar',
+                                    ))),
+                                    )
+        assert response.status_code == 401
+
+
+class AuthVerifyEndpointTest(APITestCase):
+    path = '/api/0/auth/'
+
+    def test_valid_password(self):
+        user = self.create_user('foo@example.com')
+        self.login_as(user)
+        response = self.client.put(self.path, data={
+            'password': 'admin',
+        })
+        assert response.status_code == 200
+        assert response.data['id'] == six.text_type(user.id)
+
+    def test_invalid_password(self):
+        user = self.create_user('foo@example.com')
+        self.login_as(user)
+        response = self.client.put(self.path, data={
+            'password': 'foobar',
+        })
+        assert response.status_code == 403
+
+
+class AuthLogoutEndpointTest(APITestCase):
+    path = '/api/0/auth/'
+
+    def test_logged_in(self):
+        user = self.create_user('foo@example.com')
+        self.login_as(user)
+        response = self.client.delete(self.path)
+        assert response.status_code == 204
+        assert list(self.client.session.keys()) == []
+
+    def test_logged_out(self):
+        response = self.client.delete(self.path)
+        assert response.status_code == 204
+        assert list(self.client.session.keys()) == []
diff --git a/tests/sentry/api/endpoints/test_sudo.py b/tests/sentry/api/endpoints/test_sudo.py
index f2e8d557fb..f54043268c 100644
--- a/tests/sentry/api/endpoints/test_sudo.py
+++ b/tests/sentry/api/endpoints/test_sudo.py
@@ -33,13 +33,13 @@ class SudoTest(APITestCase):
             assert response.data['detail']['message'] == 'Account verification required.'
             assert response.data['detail']['extra']['username'] == 'foo@example.com'
 
-            sudo_url = reverse('sentry-api-0-sudo', kwargs={})
+            sudo_url = reverse('sentry-api-0-auth', kwargs={})
             # Now try to gain sudo access
             response = self.client.post(sudo_url, {
                 'username': 'foo@example.com',
                 'password': 'admin',
             })
-            assert response.status_code == 204
+            assert response.status_code == 200
 
             # This should now work
             response = self.client.delete(url, is_sudo=False)
