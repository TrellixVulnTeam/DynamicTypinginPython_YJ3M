commit 6e41e890340d9944ac6836192c826c30dcd94e4a
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Dec 2 19:22:53 2012 -0800

    Some initial ghetto work on templates for accept invite

diff --git a/src/sentry/templates/sentry/teams/members/accept_invite.html b/src/sentry/templates/sentry/teams/members/accept_invite.html
new file mode 100644
index 0000000000..c1d47bda15
--- /dev/null
+++ b/src/sentry/templates/sentry/teams/members/accept_invite.html
@@ -0,0 +1,20 @@
+{% extends "sentry/layout.html" %}
+
+{% load i18n %}
+
+{% block title %}{% trans "Team Invite" %} | {{ block.super }}{% endblock %}
+
+{% block page_header_block %}{% endblock %}
+{% block bodyclass %}{% endblock %}
+
+{% block main %}
+    <section class="body">
+        <p>{% blocktrans with team.name as team_name %}You have been invited to join the <strong>{{ team_name }}</strong> team.{% endblocktrans %}</p>
+
+        <form method="POST">
+            {% csrf_token %}
+            <p>{% trans "If you do not wish to join this team, you can safely close this page and ignore the invite." %}
+            <p><button type="submit" class="btn btn-primary">{% blocktrans with team.name as team_name %}Join <em>{{ team_name }}</em>{% endblocktrans %}</button></p>
+        </form>
+    </section>
+{% endblock %}
diff --git a/src/sentry/web/forms/teams.py b/src/sentry/web/forms/teams.py
index e2649d6544..98b07a59c6 100644
--- a/src/sentry/web/forms/teams.py
+++ b/src/sentry/web/forms/teams.py
@@ -116,3 +116,7 @@ class NewTeamMemberForm(BaseTeamMemberForm):
             raise forms.ValidationError(_('User is already a member of this team'))
 
         return value
+
+
+class AcceptInviteForm(forms.Form):
+    pass
diff --git a/src/sentry/web/frontend/teams.py b/src/sentry/web/frontend/teams.py
index 0d820ea6fa..12cfba8d0e 100644
--- a/src/sentry/web/frontend/teams.py
+++ b/src/sentry/web/frontend/teams.py
@@ -18,7 +18,7 @@ from sentry.plugins import plugins
 from sentry.web.decorators import login_required, has_team_access
 from sentry.web.forms.teams import NewTeamForm, NewTeamAdminForm, \
   EditTeamForm, EditTeamAdminForm, EditTeamMemberForm, NewTeamMemberForm, \
-  InviteTeamMemberForm, RemoveTeamForm
+  InviteTeamMemberForm, RemoveTeamForm, AcceptInviteForm
 from sentry.web.helpers import render_to_response
 
 
@@ -161,6 +161,7 @@ def new_team_member(request, team):
     return render_to_response('sentry/teams/members/new.html', context, request)
 
 
+@csrf_protect
 def accept_invite(request, member_id, token):
     try:
         pending_member = PendingTeamMember.objects.get(pk=member_id)
@@ -182,16 +183,25 @@ def accept_invite(request, member_id, token):
         }
         return render_to_response('sentry/teams/members/accept_invite_unauthenticated.html', context, request)
 
-    team.member_set.get_or_create(
-        user=request.user,
-        type=pending_member.type,
-    )
+    form = AcceptInviteForm(request.POST or None)
+    if form.is_valid():
+        team.member_set.get_or_create(
+            user=request.user,
+            type=pending_member.type,
+        )
+
+        request.session.pop('can_register', None)
+
+        pending_member.delete()
 
-    request.session.pop('can_register', None)
+        return HttpResponseRedirect(reverse('sentry', args=[team.slug]))
 
-    pending_member.delete()
+    context = {
+        'team': team,
+        'form': form,
+    }
 
-    return HttpResponseRedirect(reverse('sentry', args=[team.slug]))
+    return render_to_response('sentry/teams/members/accept_invite.html', context, request)
 
 
 @csrf_protect
diff --git a/tests/sentry/web/frontend/teams/tests.py b/tests/sentry/web/frontend/teams/tests.py
index a55f6fffa4..11cf744d14 100644
--- a/tests/sentry/web/frontend/teams/tests.py
+++ b/tests/sentry/web/frontend/teams/tests.py
@@ -238,3 +238,63 @@ class NewTeamMemberTest(BaseTeamTest):
         ptm = PendingTeamMember.objects.get(email='newuser@example.com', team=self.team)
         self.assertEquals(ptm.type, MEMBER_USER)
         send_invite_email.assert_called_once_with()
+
+
+class AcceptInviteTEst(BaseTeamTest):
+    def test_redirects_on_invalid_member_id(self):
+        ptm = PendingTeamMember.objects.create(
+            email='newuser@example.com',
+            token='foobar',
+        )
+        resp = self.client.get(reverse('sentry-accept-invite', args=[self.team.slug]))
+        self.assertEquals(resp.status_code, 302)
+        self.assertTemplateUsed(resp, 'sentry/teams/members/new.html')
+
+    def test_cannot_add_existing_member(self):
+        resp = self.client.post(self.path, {
+            'add-type': MEMBER_USER,
+            'add-user': self.team.owner.username,
+        })
+        self.assertEquals(resp.status_code, 200)
+        self.assertIn('user', resp.context['add_form'].errors)
+
+    def test_does_add_existing_user_as_member(self):
+        user = User.objects.create(username='newuser')
+        resp = self.client.post(self.path, {
+            'add-type': MEMBER_USER,
+            'add-user': user.username,
+        })
+        self.assertEquals(resp.status_code, 302, resp.context['add_form'].errors if resp.status_code != 302 else None)
+        member = self.team.member_set.get(user=user)
+        self.assertEquals(member.type, MEMBER_USER)
+
+    def test_cannot_invite_existing_member(self):
+        resp = self.client.post(self.path, {
+            'invite-type': MEMBER_USER,
+            'invite-email': self.team.owner.email,
+        })
+        self.assertEquals(resp.status_code, 200)
+        self.assertIn('email', resp.context['invite_form'].errors)
+
+    @mock.patch('sentry.models.PendingTeamMember.send_invite_email')
+    def test_does_invite_already_registered_user(self, send_invite_email):
+        user = User.objects.create(username='newuser', email='newuser@example.com')
+        resp = self.client.post(self.path, {
+            'invite-type': MEMBER_USER,
+            'invite-email': user.email,
+        })
+        self.assertEquals(resp.status_code, 302)
+        ptm = PendingTeamMember.objects.get(email=user.email, team=self.team)
+        self.assertEquals(ptm.type, MEMBER_USER)
+        send_invite_email.assert_called_once_with()
+
+    @mock.patch('sentry.models.PendingTeamMember.send_invite_email')
+    def test_does_invite_unregistered_user(self, send_invite_email):
+        resp = self.client.post(self.path, {
+            'invite-type': MEMBER_USER,
+            'invite-email': 'newuser@example.com',
+        })
+        self.assertEquals(resp.status_code, 302)
+        ptm = PendingTeamMember.objects.get(email='newuser@example.com', team=self.team)
+        self.assertEquals(ptm.type, MEMBER_USER)
+        send_invite_email.assert_called_once_with()
