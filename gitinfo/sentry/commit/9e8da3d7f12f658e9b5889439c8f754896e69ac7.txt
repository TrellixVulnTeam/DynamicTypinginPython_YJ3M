commit 9e8da3d7f12f658e9b5889439c8f754896e69ac7
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Feb 12 13:11:08 2012 -0800

    Initial work on refactoring checksums to be done server-side

diff --git a/sentry/interfaces.py b/sentry/interfaces.py
index 6607455325..c5442eebcc 100644
--- a/sentry/interfaces.py
+++ b/sentry/interfaces.py
@@ -78,6 +78,9 @@ class Interface(object):
     def serialize(self):
         return dict((k, self.__dict__[k]) for k in self.attrs)
 
+    def get_hash(self):
+        return []
+
     def to_html(self, event):
         return ''
 
@@ -111,6 +114,9 @@ class Message(Interface):
             'params': self.params,
         }
 
+    def get_hash(self):
+        return [self.message]
+
     def get_search_context(self, event):
         if isinstance(self.params, (list, tuple)):
             params = list(self.params)
@@ -128,6 +134,9 @@ class Query(Interface):
         self.query = query
         self.engine = engine
 
+    def get_hash(self):
+        return [self.query]
+
     def serialize(self):
         return {
             'query': self.query,
@@ -141,6 +150,8 @@ class Query(Interface):
 
 
 class Stacktrace(Interface):
+    score = 1000
+
     def __init__(self, frames):
         self.frames = frames
         for frame in frames:
@@ -168,6 +179,13 @@ class Stacktrace(Interface):
             'frames': self.frames,
         }
 
+    def get_hash(self):
+        output = []
+        for frame in self.frames:
+            output.append(frame['module'])
+            output.append(frame['function'])
+        return output
+
     def to_html(self, event):
         frames = []
         for frame in self.frames:
@@ -244,6 +262,12 @@ class Exception(Interface):
             'module': self.module,
         }
 
+    def get_hash(self):
+        output = filter(bool, [self.module, self.type])
+        if not output:
+            output = [self.value]
+        return output
+
     def to_html(self, event):
         return render_to_string('sentry/partial/interfaces/exception.html', {
             'event': event,
@@ -375,6 +399,9 @@ class Template(Interface):
             'post_context': self.post_context,
         }
 
+    def get_hash(self):
+        return [self.filename, self.context_line]
+
     def to_html(self, event):
         context = get_context(self.lineno, self.context_line, self.pre_context, self.post_context)
 
diff --git a/sentry/manager.py b/sentry/manager.py
index 12a8211ec8..22c08dc4f6 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -32,6 +32,17 @@ from sentry.queue.tasks.index import index_event
 logger = logging.getLogger('sentry.errors')
 
 
+def get_checksum_from_event(event):
+    for interface in event.interfaces.itervalues():
+        result = interface.get_hash()
+        if result:
+            hash = hashlib.md5()
+            for r in result:
+                hash.update(r)
+            return hash.hexdigest()
+    return hashlib.md5(event.message).hexdigest()
+
+
 class ScoreClause(object):
     def __init__(self, group):
         self.group = group
@@ -212,7 +223,7 @@ class GroupManager(models.Manager, ChartMixin):
         # TODO: this function is way too damn long and needs refactored
         # the inner imports also suck so let's try to move it away from
         # the objects manager
-        from sentry.models import Event, Project, View, SearchDocument
+        from sentry.models import Event, Project, View
         from sentry.views import View as ViewHandler
 
         project = Project.objects.get(pk=project)
@@ -242,8 +253,6 @@ class GroupManager(models.Manager, ChartMixin):
             raise InvalidData('Missing required parameter: message')
 
         checksum = kwargs.pop('checksum', None)
-        if not checksum:
-            checksum = hashlib.md5(message).hexdigest()
 
         data = kwargs
 
@@ -286,6 +295,10 @@ class GroupManager(models.Manager, ChartMixin):
             **kwargs
         )
 
+        # Calculcate the checksum from the first highest scoring interface
+        if not checksum:
+            checksum = get_checksum_from_event(event)
+
         group_kwargs = kwargs.copy()
         group_kwargs.update({
             'last_seen': date,
