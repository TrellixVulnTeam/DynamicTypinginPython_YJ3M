commit 38cc35c5de1f7f24c11c224a53fa8651fec838c9
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Wed Nov 6 10:09:14 2019 -0500

    feat(apm): Properly format durations (#15455)

diff --git a/src/sentry/static/sentry/app/components/duration.tsx b/src/sentry/static/sentry/app/components/duration.tsx
index abaa6b1863..d818855f01 100644
--- a/src/sentry/static/sentry/app/components/duration.tsx
+++ b/src/sentry/static/sentry/app/components/duration.tsx
@@ -3,42 +3,63 @@ import React from 'react';
 
 import {tn} from 'app/locale';
 
-function getDuration(seconds: number): string {
+function roundWithFixed(
+  value: number,
+  fixedDigits: number
+): {label: string; result: number} {
+  const label = value.toFixed(fixedDigits);
+  const result = fixedDigits <= 0 ? Math.round(value) : value;
+
+  return {label, result};
+}
+
+function getDuration(
+  seconds: number,
+  fixedDigits: number = 0,
+  abbreviation: boolean = false
+): string {
   const value = Math.abs(seconds * 1000);
-  let result: number = 0;
 
   if (value >= 604800000) {
-    result = Math.round(value / 604800000);
-    return `${result} ${tn('week', 'weeks', result)}`;
+    const {label, result} = roundWithFixed(value / 604800000, fixedDigits);
+    return `${label} ${abbreviation ? 'wk' : tn('week', 'weeks', result)}`;
   }
   if (value >= 172800000) {
-    result = Math.round(value / 86400000);
-    return `${result} ${tn('day', 'days', result)}`;
+    const {label, result} = roundWithFixed(value / 86400000, fixedDigits);
+    return `${label} ${abbreviation ? 'd' : tn('day', 'days', result)}`;
   }
   if (value >= 7200000) {
-    result = Math.round(value / 3600000);
-    return `${result} ${tn('hour', 'hours', result)}`;
+    const {label, result} = roundWithFixed(value / 3600000, fixedDigits);
+    return `${label} ${abbreviation ? 'hr' : tn('hour', 'hours', result)}`;
   }
   if (value >= 120000) {
-    result = Math.round(value / 60000);
-    return `${result} ${tn('minute', 'minutes', result)}`;
+    const {label, result} = roundWithFixed(value / 60000, fixedDigits);
+    return `${label} ${abbreviation ? 'min' : tn('minute', 'minutes', result)}`;
   }
   if (value >= 1000) {
-    result = Math.round(value / 1000);
-    return `${result} ${tn('second', 'seconds', result)}`;
+    const {label, result} = roundWithFixed(value / 1000, fixedDigits);
+    return `${label} ${abbreviation ? 's' : tn('second', 'seconds', result)}`;
   }
 
-  return Math.round(value) + ' ms';
+  const {label} = roundWithFixed(value, fixedDigits);
+
+  return `${label} ms`;
 }
 
-type Props = React.HTMLProps<HTMLSpanElement> & {seconds: number};
+type Props = React.HTMLProps<HTMLSpanElement> & {
+  seconds: number;
+  fixedDigits?: number;
+  abbreviation?: boolean;
+};
 
-const Duration = ({seconds, ...props}: Props) => (
-  <span {...props}>{getDuration(seconds)}</span>
+const Duration = ({seconds, fixedDigits, abbreviation, ...props}: Props) => (
+  <span {...props}>{getDuration(seconds, fixedDigits, abbreviation)}</span>
 );
 
 Duration.propTypes = {
   seconds: PropTypes.number.isRequired,
+  fixedDigits: PropTypes.number,
+  abbreviation: PropTypes.bool,
 };
 
 export default Duration;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/data.tsx b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
index f982427a69..00a8ea6256 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/data.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
@@ -12,6 +12,7 @@ import getDynamicText from 'app/utils/getDynamicText';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 import pinIcon from 'app/../images/location-pin.png';
 import {EventViewv1, Organization} from 'app/types';
+import Duration from 'app/components/duration';
 
 import {QueryLink} from './styles';
 
@@ -218,6 +219,7 @@ type FieldFormatters = {
   number: FieldFormatter;
   date: FieldFormatter;
   string: FieldFormatter;
+  duration: FieldFormatter;
 };
 
 export type FieldTypes = keyof FieldFormatters;
@@ -289,6 +291,18 @@ export const FIELD_FORMATTERS: FieldFormatters = {
       return <QueryLink to={target}>{value}</QueryLink>;
     },
   },
+  duration: {
+    sortField: true,
+    renderFunc: (field, data) => (
+      <NumberContainer>
+        {typeof data[field] === 'number' ? (
+          <Duration seconds={data[field] / 1000} fixedDigits={2} abbreviation />
+        ) : (
+          emptyValue
+        )}
+      </NumberContainer>
+    ),
+  },
 };
 
 const eventLink = (
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
index bda00c3483..1279479993 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
@@ -154,3 +154,9 @@ export const TRACING_FIELDS = [
   'p95',
   'p75',
 ];
+
+// list of fields that are duration-like
+export const DURATION_FIELDS = ['transaction.duration', 'p95', 'p75'];
+// acceptable list of aggregate functions, that, when applied to any of the duration-like
+// fields in DURATION_FIELDS, the resulting expression is still duration-like
+export const DURATION_AGGREGATION_WHITELIST = ['min', 'max', 'sum', 'avg'];
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 23e18a6396..27003aea3c 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -21,6 +21,8 @@ import {
   AGGREGATIONS,
   FIELDS,
   ColumnValueType,
+  DURATION_FIELDS,
+  DURATION_AGGREGATION_WHITELIST,
 } from './eventQueryParams';
 import {TableColumn} from './table/types';
 
@@ -35,20 +37,32 @@ export type EventQuery = {
 const AGGREGATE_PATTERN = /^([^\(]+)\(([a-z\._+]*)\)$/;
 const ROUND_BRACKETS_PATTERN = /[\(\)]/;
 
+function explodeFieldString(field: string): {aggregation: string; field: string} {
+  const results = field.match(AGGREGATE_PATTERN);
+
+  if (results && results.length >= 3) {
+    return {aggregation: results[1], field: results[2]};
+  }
+
+  return {aggregation: '', field};
+}
+
 export function explodeField(
   field: FieldType
 ): {aggregation: string; field: string; fieldname: string} {
-  const results = field.field.match(AGGREGATE_PATTERN);
+  const results = explodeFieldString(field.field);
 
-  if (!results) {
-    return {aggregation: '', field: field.field, fieldname: field.title};
-  }
+  return {aggregation: results.aggregation, field: results.field, fieldname: field.title};
+}
 
-  if (results.length >= 3) {
-    return {aggregation: results[1], field: results[2], fieldname: field.title};
+function isDuration(input: {aggregation: string; field: string}): boolean {
+  if (input.aggregation !== '') {
+    if (!DURATION_AGGREGATION_WHITELIST.includes(input.aggregation)) {
+      return false;
+    }
   }
 
-  return {aggregation: '', field: field.field, fieldname: field.title};
+  return DURATION_FIELDS.includes(input.field);
 }
 
 /**
@@ -194,6 +208,12 @@ export function getFieldRenderer(
     return partial(LINK_FORMATTERS[fieldType], fieldName);
   }
 
+  const explodedField = explodeFieldString(field);
+
+  if (isDuration(explodedField)) {
+    return partial(FIELD_FORMATTERS.duration.renderFunc, fieldName);
+  }
+
   if (FIELD_FORMATTERS.hasOwnProperty(fieldType)) {
     return partial(FIELD_FORMATTERS[fieldType].renderFunc, fieldName);
   }
