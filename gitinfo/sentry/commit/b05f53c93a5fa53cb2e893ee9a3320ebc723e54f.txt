commit b05f53c93a5fa53cb2e893ee9a3320ebc723e54f
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Sat Jun 18 01:42:27 2016 +0200

    Initial pass on context data
    
    Refs #3510

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 7447fd8191..0e9d35367c 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -719,6 +719,7 @@ SENTRY_INTERFACES = {
     'user': 'sentry.interfaces.user.User',
     'applecrashreport': 'sentry.interfaces.applecrash.AppleCrashReport',
     'breadcrumbs': 'sentry.interfaces.breadcrumbs.Breadcrumbs',
+    'contexts': 'sentry.interfaces.contexts.Contexts',
     'sentry.interfaces.Exception': 'sentry.interfaces.exception.Exception',
     'sentry.interfaces.Message': 'sentry.interfaces.message.Message',
     'sentry.interfaces.Stacktrace': 'sentry.interfaces.stacktrace.Stacktrace',
@@ -729,6 +730,7 @@ SENTRY_INTERFACES = {
     'sentry.interfaces.Csp': 'sentry.interfaces.csp.Csp',
     'sentry.interfaces.AppleCrashReport': 'sentry.interfaces.applecrash.AppleCrashReport',
     'sentry.interfaces.Breadcrumbs': 'sentry.interfaces.breadcrumbs.Breadcrumbs',
+    'sentry.interfaces.Contexts': 'sentry.interfaces.contexts.Contexts',
 }
 
 SENTRY_EMAIL_BACKEND_ALIASES = {
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index f78f9bf194..049466bb0a 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -326,6 +326,8 @@ class EventManager(object):
             except Exception:
                 pass
 
+            data['tags'].extend(inst.iter_tags())
+
         # TODO(dcramer): this logic is duplicated in ``validate_data`` from
         # coreapi
 
diff --git a/src/sentry/interfaces/base.py b/src/sentry/interfaces/base.py
index 98b3c5374c..b8fc3c1fcc 100644
--- a/src/sentry/interfaces/base.py
+++ b/src/sentry/interfaces/base.py
@@ -121,6 +121,9 @@ class Interface(object):
     def get_score(self):
         return self.score
 
+    def iter_tags(self):
+        return iter(())
+
     def to_string(self, event, is_public=False, **kwargs):
         return ''
 
diff --git a/src/sentry/interfaces/breadcrumbs.py b/src/sentry/interfaces/breadcrumbs.py
index 0f87a1da58..349d31a18b 100644
--- a/src/sentry/interfaces/breadcrumbs.py
+++ b/src/sentry/interfaces/breadcrumbs.py
@@ -10,34 +10,9 @@ from __future__ import absolute_import
 
 __all__ = ('Breadcrumbs',)
 
-import pytz
-from datetime import datetime
-
 from sentry.interfaces.base import Interface, InterfaceValidationError
 from sentry.utils.safe import trim
-from sentry.utils.dates import to_timestamp, to_datetime
-
-
-def parse_new_timestamp(value):
-    # TODO(mitsuhiko): merge this code with coreapis date parser
-    if isinstance(value, datetime):
-        return value
-    elif isinstance(value, (int, long, float)):
-        return datetime.utcfromtimestamp(value).replace(tzinfo=pytz.utc)
-    value = (value or '').rstrip('Z').encode('ascii', 'replace').split('.', 1)
-    if not value:
-        return None
-    try:
-        rv = datetime.strptime(value[0], '%Y-%m-%dT%H:%M:%S')
-    except Exception:
-        return None
-    if len(value) == 2:
-        try:
-            rv = rv.replace(microsecond=int(value[1]
-                            .ljust(6, '0')[:6]))
-        except ValueError:
-            rv = None
-    return rv.replace(tzinfo=pytz.utc)
+from sentry.utils.dates import to_timestamp, to_datetime, parse_timestamp
 
 
 def _get_implied_category(category, type):
@@ -81,7 +56,7 @@ class Breadcrumbs(Interface):
     @classmethod
     def normalize_crumb(cls, crumb):
         ty = crumb.get('type') or 'default'
-        ts = parse_new_timestamp(crumb.get('timestamp'))
+        ts = parse_timestamp(crumb.get('timestamp'))
         if ts is None:
             raise InterfaceValidationError('Unable to determine timestamp '
                                            'for crumb')
diff --git a/src/sentry/interfaces/contexts.py b/src/sentry/interfaces/contexts.py
new file mode 100644
index 0000000000..8f2f12afa6
--- /dev/null
+++ b/src/sentry/interfaces/contexts.py
@@ -0,0 +1,114 @@
+"""
+sentry.interfaces.contexts
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from sentry.utils.safe import trim
+from sentry.interfaces.base import Interface
+
+
+__all__ = ('Contexts',)
+
+
+context_types = {}
+
+
+def contexttype(name):
+    def decorator(cls):
+        cls.type = name
+        context_types[name] = cls
+        return cls
+    return decorator
+
+
+class ContextType(object):
+    indexed_fields = []
+
+    def __init__(self, alias, data):
+        self.alias = alias
+        self.data = data
+
+    def to_json(self):
+        return self.data
+
+    def flatten_index_value(self, value):
+        if isinstance(value, (int, long, basestring)):
+            return value
+        return unicode(value)
+
+    def iter_tags(self):
+        for field in self.indexed_fields:
+            value = self.data.get(field)
+            if value is not None:
+                yield (
+                    '%s.%s' % (self.alias, field),
+                    self.flatten_index_value(value)
+                )
+
+
+@contexttype('default')
+class DefaultContextType(ContextType):
+    pass
+
+
+@contexttype('device')
+class DeviceContextType(ContextType):
+    indexed_fields = ['name', 'model', 'model_id', 'arch']
+
+
+@contexttype('runtime')
+class RuntimeContextType(ContextType):
+    indexed_fields = ['name', 'version', 'build']
+
+
+@contexttype('os')
+class OsContextType(ContextType):
+    indexed_fields = ['name', 'version', 'build']
+
+
+class Contexts(Interface):
+    """
+    This interface stores context specific information.
+    """
+    display_score = 1100
+    score = 800
+
+    @classmethod
+    def to_python(cls, data):
+        rv = {}
+        for alias, value in data.iteritems():
+            rv[alias] = cls.normalize_context(alias, value)
+        return cls(**rv)
+
+    @classmethod
+    def normalize_context(cls, alias, data):
+        type = data.get('type', alias)
+        data = trim(data)
+        cls = context_types.get(type, DefaultContextType)
+        data['type'] = cls.type
+        return cls(alias, data)
+
+    def iter_contexts(self):
+        return self._data.itervalues()
+
+    def to_json(self):
+        rv = {}
+        for alias, inst in self._data.iteritems():
+            rv[alias] = inst.to_json()
+        return rv
+
+    def iter_tags(self):
+        for inst in self.iter_contexts():
+            for tag in inst.iter_tags():
+                yield tag
+
+    def get_path(self):
+        return 'sentry.interfaces.Contexts'
+
+    def get_alias(self):
+        return 'contexts'
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index cb08bff6d1..359645eafe 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -201,26 +201,29 @@ def inject_apple_backtrace(data, frames, diagnosis=None, error=None,
 
 
 def inject_apple_device_data(data, system):
-    container = data.setdefault('device', {})
+    contexts = data.setdefault('sentry.interfaces.Contexts', {})
+
+    device = contexts.setdefault('device', {})
+    os = contexts.setdefault('os', {})
+
     try:
-        container['name'] = SDK_MAPPING[system['system_name']]
+        os['name'] = SDK_MAPPING[system['system_name']]
     except LookupError:
-        container['name'] = system.get('system_name') or 'Generic Apple'
+        os['name'] = system.get('system_name') or 'Generic Apple'
 
     if 'system_version' in system:
-        container['version'] = system['system_version']
+        os['version'] = system['system_version']
     if 'os_version' in system:
-        container['build'] = system['os_version']
+        os['build'] = system['os_version']
+    if 'kernel_version' in system:
+        os['kernel_version'] = system['kernel_version']
 
-    extra = container.setdefault('data', {})
     if 'cpu_arch' in system:
-        extra['cpu_arch'] = system['cpu_arch']
+        device['arch'] = system['cpu_arch']
     if 'model' in system:
-        extra['device_model_id'] = system['model']
+        device['model_id'] = system['model']
     if 'machine' in system:
-        extra['device_model'] = system['machine']
-    if 'kernel_version' in system:
-        extra['kernel_version'] = system['kernel_version']
+        device['model'] = system['machine']
 
 
 def record_no_symsynd(data):
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index 8bb0c670d2..8a49891d93 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -44,6 +44,7 @@ const EventEntries = React.createClass({
     template: require('./interfaces/template'),
     csp: require('./interfaces/csp'),
     breadcrumbs: require('./interfaces/breadcrumbs'),
+    contexts: require('./interfaces/contexts'),
   },
 
   render() {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/contexts.jsx b/src/sentry/static/sentry/app/components/events/interfaces/contexts.jsx
new file mode 100644
index 0000000000..4f90bf5d71
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/contexts.jsx
@@ -0,0 +1,80 @@
+import React from 'react';
+
+import GroupEventDataSection from '../eventDataSection';
+import PropTypes from '../../../proptypes';
+import KeyValueList from './keyValueList';
+
+const DefaultContextType = React.createClass({
+  propTypes: {
+    alias: React.PropTypes.string.isRequired,
+    data: React.PropTypes.object.isRequired,
+  },
+
+  render() {
+    return (
+      <div className="well">
+        <h4>{this.props.alias}</h4>
+        <KeyValueList data={this.props.data} />
+      </div>
+    );
+  }
+});
+
+const CONTEXT_TYPES = {
+  'default': DefaultContextType
+};
+
+
+const ContextsInterface = React.createClass({
+  propTypes: {
+    group: PropTypes.Group.isRequired,
+    event: PropTypes.Event.isRequired,
+    type: React.PropTypes.string.isRequired,
+    data: React.PropTypes.object.isRequired,
+    isShare: React.PropTypes.bool
+  },
+
+  contextTypes: {
+    organization: PropTypes.Organization,
+    project: PropTypes.Project
+  },
+
+  renderContextData() {
+    let rv = [];
+    for (let key in this.props.data) {
+      let value = this.props.data[key];
+      let Component = CONTEXT_TYPES[value.type] || DefaultContextType;
+      rv.push(
+        <Component key={key} alias={key} data={value}/>
+      );
+    }
+    return rv;
+  },
+
+  render() {
+    let group = this.props.group;
+    let evt = this.props.event;
+
+    let title = (
+      <div>
+        <h3>
+          <strong>{'Context'}</strong>
+        </h3>
+      </div>
+    );
+
+    return (
+      <GroupEventDataSection
+          className="context-box"
+          group={group}
+          event={evt}
+          type={this.props.type}
+          title={title}
+          wrapTitle={false}>
+        {this.renderContextData()}
+      </GroupEventDataSection>
+    );
+  }
+});
+
+export default ContextsInterface;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx
index a1ffae33b5..d8ebab3552 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx
@@ -5,7 +5,7 @@ import ContextData from '../../contextData';
 
 const KeyValueList = React.createClass({
   propTypes: {
-    data: React.PropTypes.array.isRequired,
+    data: React.PropTypes.any.isRequired,
     isContextData: React.PropTypes.bool,
     isSorted: React.PropTypes.bool,
     onClick: React.PropTypes.func
@@ -22,9 +22,14 @@ const KeyValueList = React.createClass({
     // TODO(dcramer): use non-string keys as reserved words ("unauthorized")
     // break rendering
 
-    let data = this.props.isSorted ?
-                  _.sortBy(this.props.data, (key, value) => key) :
-                  this.props.data;
+    let data = this.props.data;
+    if (data === undefined || data === null) {
+      data = [];
+    } else if (!(data instanceof Array)) {
+      data = Object.keys(data).map((key) => [key, data[key]]);
+    }
+
+    data = this.props.isSorted ? _.sortBy(data, (key, value) => key) : data;
 
     const props = (this.props.onClick) ? {onClick: this.props.onClick} : {};
     return (
diff --git a/src/sentry/utils/dates.py b/src/sentry/utils/dates.py
index 538cf45a0b..7e429733ff 100644
--- a/src/sentry/utils/dates.py
+++ b/src/sentry/utils/dates.py
@@ -81,3 +81,25 @@ def parse_date(datestr, timestr):
             return parse(datetimestr)
         except Exception:
             return
+
+
+def parse_timestamp(value):
+    # TODO(mitsuhiko): merge this code with coreapis date parser
+    if isinstance(value, datetime):
+        return value
+    elif isinstance(value, (int, long, float)):
+        return datetime.utcfromtimestamp(value).replace(tzinfo=pytz.utc)
+    value = (value or '').rstrip('Z').encode('ascii', 'replace').split('.', 1)
+    if not value:
+        return None
+    try:
+        rv = datetime.strptime(value[0], '%Y-%m-%dT%H:%M:%S')
+    except Exception:
+        return None
+    if len(value) == 2:
+        try:
+            rv = rv.replace(microsecond=int(value[1]
+                            .ljust(6, '0')[:6]))
+        except ValueError:
+            rv = None
+    return rv.replace(tzinfo=pytz.utc)
