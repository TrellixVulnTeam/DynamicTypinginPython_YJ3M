commit 3d144b09f9779bab71210707d75852b22b314270
Author: Dan Fuller <dfuller@sentry.io>
Date:   Tue Mar 10 15:14:39 2020 -0700

    Merge pull request #17367 from getsentry/danf/cache_incident_triggers
    
    perf(incidents): Cache incident triggers when processing subscription updates.

diff --git a/src/sentry/incidents/models.py b/src/sentry/incidents/models.py
index cdc11a158c..6f75501dc1 100644
--- a/src/sentry/incidents/models.py
+++ b/src/sentry/incidents/models.py
@@ -408,9 +408,40 @@ class TriggerStatus(Enum):
     RESOLVED = 1
 
 
+class IncidentTriggerManager(BaseManager):
+    CACHE_KEY = "incident:triggers:%s"
+
+    @classmethod
+    def _build_cache_key(self, incident_id):
+        return self.CACHE_KEY % incident_id
+
+    def get_for_incident(self, incident):
+        """
+        Fetches the IncidentTriggers associated with an Incident. Attempts to fetch from
+        cache then hits the database.
+        """
+        cache_key = self._build_cache_key(incident.id)
+        triggers = cache.get(cache_key)
+        if triggers is None:
+            triggers = list(IncidentTrigger.objects.filter(incident=incident))
+            cache.set(cache_key, triggers, 3600)
+
+        return triggers
+
+    @classmethod
+    def clear_incident_cache(cls, instance, **kwargs):
+        cache.delete(cls._build_cache_key(instance.id))
+
+    @classmethod
+    def clear_incident_trigger_cache(cls, instance, **kwargs):
+        cache.delete(cls._build_cache_key(instance.incident_id))
+
+
 class IncidentTrigger(Model):
     __core__ = True
 
+    objects = IncidentTriggerManager()
+
     incident = FlexibleForeignKey("sentry.Incident", db_index=False)
     alert_rule_trigger = FlexibleForeignKey("sentry.AlertRuleTrigger")
     status = models.SmallIntegerField()
@@ -608,3 +639,7 @@ post_delete.connect(AlertRuleTriggerManager.clear_trigger_cache, sender=AlertRul
 post_save.connect(IncidentManager.clear_active_incident_cache, sender=Incident)
 post_save.connect(IncidentManager.clear_active_incident_project_cache, sender=IncidentProject)
 post_delete.connect(IncidentManager.clear_active_incident_project_cache, sender=IncidentProject)
+
+post_delete.connect(IncidentTriggerManager.clear_incident_cache, sender=Incident)
+post_save.connect(IncidentTriggerManager.clear_incident_trigger_cache, sender=IncidentTrigger)
+post_delete.connect(IncidentTriggerManager.clear_incident_trigger_cache, sender=IncidentTrigger)
diff --git a/tests/sentry/incidents/test_models.py b/tests/sentry/incidents/test_models.py
index d1175818a3..ea1d6ffecb 100644
--- a/tests/sentry/incidents/test_models.py
+++ b/tests/sentry/incidents/test_models.py
@@ -18,7 +18,9 @@ from sentry.incidents.models import (
     AlertRuleTriggerAction,
     Incident,
     IncidentStatus,
+    IncidentTrigger,
     IncidentType,
+    TriggerStatus,
 )
 from sentry.incidents.logic import delete_alert_rule
 from sentry.testutils import TestCase
@@ -228,6 +230,52 @@ class ActiveIncidentClearCacheTest(TestCase):
         )
 
 
+class IncidentTriggerClearCacheTest(TestCase):
+    def setUp(self):
+        self.alert_rule = self.create_alert_rule()
+        self.trigger = self.create_alert_rule_trigger(self.alert_rule)
+        self.incident = self.create_incident(alert_rule=self.alert_rule, projects=[self.project])
+
+    def test_deleted_incident(self):
+        incident_trigger = IncidentTrigger.objects.create(
+            incident=self.incident,
+            alert_rule_trigger=self.trigger,
+            status=TriggerStatus.ACTIVE.value,
+        )
+        IncidentTrigger.objects.get_for_incident(self.incident)
+        assert cache.get(IncidentTrigger.objects._build_cache_key(self.incident.id)) == [
+            incident_trigger
+        ]
+        self.incident.delete()
+        assert cache.get(IncidentTrigger.objects._build_cache_key(self.incident.id)) is None
+
+    def test_updated_incident_trigger(self):
+        IncidentTrigger.objects.get_for_incident(self.incident)
+        assert cache.get(IncidentTrigger.objects._build_cache_key(self.incident.id)) == []
+        incident_trigger = IncidentTrigger.objects.create(
+            incident=self.incident,
+            alert_rule_trigger=self.trigger,
+            status=TriggerStatus.ACTIVE.value,
+        )
+        IncidentTrigger.objects.get_for_incident(self.incident)
+        assert cache.get(IncidentTrigger.objects._build_cache_key(self.incident.id)) == [
+            incident_trigger
+        ]
+
+    def test_deleted_incident_trigger(self):
+        incident_trigger = IncidentTrigger.objects.create(
+            incident=self.incident,
+            alert_rule_trigger=self.trigger,
+            status=TriggerStatus.ACTIVE.value,
+        )
+        IncidentTrigger.objects.get_for_incident(self.incident)
+        assert cache.get(IncidentTrigger.objects._build_cache_key(self.incident.id)) == [
+            incident_trigger
+        ]
+        self.trigger.delete()
+        assert (cache.get(IncidentTrigger.objects._build_cache_key(self.incident.id))) is None
+
+
 class IncidentCreationTest(TestCase):
     def test_simple(self):
         title = "hello"
