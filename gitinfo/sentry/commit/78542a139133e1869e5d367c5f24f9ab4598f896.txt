commit 78542a139133e1869e5d367c5f24f9ab4598f896
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Feb 25 15:02:54 2020 -0800

    fix(ui): Refactor and add error message for "Congrats Robots" (#17287)
    
    We have been getting errors where our "Congrats Robots" video fails to load (it is about 955KB). This is bad since it happens on the issue stream, and it also shows them a scary error message and prompts for feedback.
    
    * Refactors to typescript
    * Moves some files around
    * Change `<CongratsRobots>` so that we display image placeholder if video fails to load
    * Remove loading in favor of placeholder image (first frame of video)

diff --git a/jest.config.js b/jest.config.js
index c85ad55fad..229d379882 100644
--- a/jest.config.js
+++ b/jest.config.js
@@ -10,7 +10,7 @@ module.exports = {
   snapshotSerializers: ['enzyme-to-json/serializer'],
   moduleNameMapper: {
     '^sentry-test/(.*)': '<rootDir>/tests/js/sentry-test/$1',
-    '\\.(css|less|png|mp4)$': '<rootDir>/tests/js/sentry-test/importStyleMock.js',
+    '\\.(css|less|png|jpg|mp4)$': '<rootDir>/tests/js/sentry-test/importStyleMock.js',
     '\\.(svg)$': '<rootDir>/tests/js/sentry-test/svgMock.js',
     'integration-docs-platforms':
       '<rootDir>/tests/fixtures/integration-docs/_platforms.json',
diff --git a/src/sentry/static/sentry/app/types/fileLoader.d.ts b/src/sentry/static/sentry/app/types/fileLoader.d.ts
index 10b296b347..08700e0e66 100644
--- a/src/sentry/static/sentry/app/types/fileLoader.d.ts
+++ b/src/sentry/static/sentry/app/types/fileLoader.d.ts
@@ -2,7 +2,8 @@
 // TS compatibility for https://github.com/webpack-contrib/file-loader
 
 declare module '*.png';
-
+declare module '*.jpg';
+declare module '*.mp4';
 declare module '*.svg' {
   const content: any;
   export default content;
diff --git a/src/sentry/static/sentry/app/views/issueList/congratsRobots.jsx b/src/sentry/static/sentry/app/views/issueList/congratsRobots.jsx
deleted file mode 100644
index 81f24c4122..0000000000
--- a/src/sentry/static/sentry/app/views/issueList/congratsRobots.jsx
+++ /dev/null
@@ -1,61 +0,0 @@
-import React from 'react';
-import styled from '@emotion/styled';
-
-import {t} from 'app/locale';
-import space from 'app/styles/space';
-import video from 'app/../images/spot/congrats-robots.mp4';
-
-const Message = () => (
-  <React.Fragment>
-    <EmptyMessage>
-      {t("We couldn't find any issues that matched your filters.")}
-    </EmptyMessage>
-    <p>{t('Get out there and write some broken code!')}</p>
-  </React.Fragment>
-);
-
-const CongratsRobots = () => (
-  <CongratsRobotsWrapper>
-    <AnimatedScene>
-      <StyledVideo autoPlay loop>
-        <source src={video} type="video/mp4" />
-        {/* Show message if browser doesn't support video */}
-        <Message />
-      </StyledVideo>
-    </AnimatedScene>
-    <Message />
-  </CongratsRobotsWrapper>
-);
-
-const CongratsRobotsWrapper = styled('div')`
-  display: flex;
-  padding: ${space(4)} ${space(5)};
-  flex-direction: column;
-  align-items: center;
-  text-align: center;
-  color: ${p => p.theme.gray3};
-
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
-    font-size: ${p => p.theme.fontSizeMedium};
-  }
-`;
-
-const EmptyMessage = styled('div')`
-  font-weight: 600;
-
-  @media (min-width: ${p => p.theme.breakpoints[0]}) {
-    font-size: ${p => p.theme.fontSizeExtraLarge};
-  }
-`;
-
-const AnimatedScene = styled('div')`
-  max-width: 800px;
-`;
-
-const StyledVideo = styled('video')`
-  max-height: 320px;
-  max-width: 100%;
-  margin-bottom: ${space(1)};
-`;
-
-export default CongratsRobots;
diff --git a/src/sentry/static/sentry/app/views/issueList/noGroupsHandler/congratsRobots.tsx b/src/sentry/static/sentry/app/views/issueList/noGroupsHandler/congratsRobots.tsx
new file mode 100644
index 0000000000..077158999f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/issueList/noGroupsHandler/congratsRobots.tsx
@@ -0,0 +1,29 @@
+import React from 'react';
+
+import space from 'app/styles/space';
+import styled from '@emotion/styled';
+import video from 'app/../images/spot/congrats-robots.mp4';
+
+/**
+ * Note, video needs `muted` for `autoplay` to work on Chrome
+ * See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video
+ */
+const CongratsRobots = () => (
+  <AnimatedScene>
+    <StyledVideo autoPlay loop muted>
+      <source src={video} type="video/mp4" />
+    </StyledVideo>
+  </AnimatedScene>
+);
+
+export default CongratsRobots;
+
+const AnimatedScene = styled('div')`
+  max-width: 800px;
+`;
+
+const StyledVideo = styled('video')`
+  max-height: 320px;
+  max-width: 100%;
+  margin-bottom: ${space(1)};
+`;
diff --git a/src/sentry/static/sentry/app/views/issueList/noGroupsHandler.tsx b/src/sentry/static/sentry/app/views/issueList/noGroupsHandler/index.tsx
similarity index 84%
rename from src/sentry/static/sentry/app/views/issueList/noGroupsHandler.tsx
rename to src/sentry/static/sentry/app/views/issueList/noGroupsHandler/index.tsx
index 1421b01b59..afbc000a73 100644
--- a/src/sentry/static/sentry/app/views/issueList/noGroupsHandler.tsx
+++ b/src/sentry/static/sentry/app/views/issueList/noGroupsHandler/index.tsx
@@ -8,6 +8,8 @@ import EmptyStateWarning from 'app/components/emptyStateWarning';
 import ErrorRobot from 'app/components/errorRobot';
 import LoadingIndicator from 'app/components/loadingIndicator';
 
+import NoUnresolvedIssues from './noUnresolvedIssues';
+
 type Props = {
   api: Client;
   organization: LightWeightOrganization;
@@ -18,14 +20,10 @@ type Props = {
 
 type State = {
   fetchingSentFirstEvent: boolean;
-  firstEventProjects?: Project[];
+  firstEventProjects?: Project[] | null;
   sentFirstEvent?: boolean;
 };
 
-const CongratsRobots = React.lazy(() =>
-  import(/* webpackChunkName: "CongratsRobots" */ 'app/views/issueList/congratsRobots')
-);
-
 /**
  * Component which is rendered when no groups/issues were found. This could
  * either be caused by having no first events, having resolved all issues, or
@@ -33,12 +31,11 @@ const CongratsRobots = React.lazy(() =>
  * render one of those states.
  */
 class NoGroupsHandler extends React.Component<Props, State> {
-  constructor(props: Props) {
-    super(props);
-    this.state = {
-      fetchingSentFirstEvent: true,
-    };
-  }
+  state = {
+    fetchingSentFirstEvent: true,
+    sentFirstEvent: false,
+    firstEventProjects: null,
+  };
 
   componentDidMount() {
     this.fetchSentFirstEvent();
@@ -87,9 +84,9 @@ class NoGroupsHandler extends React.Component<Props, State> {
     return <LoadingIndicator />;
   }
 
-  renderAwaitingEvents(projects) {
+  renderAwaitingEvents(projects: State['firstEventProjects']) {
     const {organization} = this.props;
-    const project = projects.length > 0 ? projects[0] : null;
+    const project = projects && projects.length > 0 ? projects[0] : null;
 
     const sampleIssueId = this.props.groupIds.length > 0 ? this.props.groupIds[0] : '';
     return (
@@ -102,14 +99,6 @@ class NoGroupsHandler extends React.Component<Props, State> {
     );
   }
 
-  renderNoUnresolvedIssues() {
-    return (
-      <React.Suspense fallback={this.renderLoading()}>
-        <CongratsRobots data-test-id="congrats-robots" />
-      </React.Suspense>
-    );
-  }
-
   renderEmpty() {
     return (
       <EmptyStateWarning>
@@ -127,7 +116,7 @@ class NoGroupsHandler extends React.Component<Props, State> {
     } else if (!sentFirstEvent) {
       return this.renderAwaitingEvents(firstEventProjects);
     } else if (query === DEFAULT_QUERY) {
-      return this.renderNoUnresolvedIssues();
+      return <NoUnresolvedIssues />;
     } else {
       return this.renderEmpty();
     }
diff --git a/src/sentry/static/sentry/app/views/issueList/noGroupsHandler/noUnresolvedIssues.tsx b/src/sentry/static/sentry/app/views/issueList/noGroupsHandler/noUnresolvedIssues.tsx
new file mode 100644
index 0000000000..71fc517dec
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/issueList/noGroupsHandler/noUnresolvedIssues.tsx
@@ -0,0 +1,94 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import congratsRobotsPlaceholder from 'app/../images/spot/congrats-robots-placeholder.jpg';
+import space from 'app/styles/space';
+
+const Placeholder = () => (
+  <PlaceholderImage
+    alt={t('Congrats, you have no unresolved issues')}
+    src={congratsRobotsPlaceholder}
+  />
+);
+
+const Message = () => (
+  <React.Fragment>
+    <EmptyMessage>
+      {t("We couldn't find any issues that matched your filters.")}
+    </EmptyMessage>
+    <p>{t('Get out there and write some broken code!')}</p>
+  </React.Fragment>
+);
+
+const CongratsRobotsVideo = React.lazy(() =>
+  import(/* webpackChunkName: "CongratsRobotsVideo" */ './congratsRobots')
+);
+
+/**
+ * Error boundary for loading the robots video.
+ * This can error because of the file size of the video
+ *
+ * Silently ignore the error, this isn't really important enough to
+ * capture in Sentry
+ */
+class ErrorBoundary extends React.Component<
+  {children: React.ReactNode},
+  {hasError: boolean}
+> {
+  static getDerivedStateFromError() {
+    return {
+      hasError: true,
+    };
+  }
+
+  state = {
+    hasError: false,
+  };
+
+  render() {
+    if (this.state.hasError) {
+      return <Placeholder />;
+    }
+
+    return this.props.children;
+  }
+}
+
+const NoUnresolvedIssues = () => (
+  <Wrapper>
+    <ErrorBoundary>
+      <React.Suspense fallback={<Placeholder />}>
+        <CongratsRobotsVideo />
+      </React.Suspense>
+    </ErrorBoundary>
+    <Message />
+  </Wrapper>
+);
+
+const Wrapper = styled('div')`
+  display: flex;
+  padding: ${space(4)} ${space(4)};
+  flex-direction: column;
+  align-items: center;
+  text-align: center;
+  color: ${p => p.theme.gray3};
+
+  @media (max-width: ${p => p.theme.breakpoints[0]}) {
+    font-size: ${p => p.theme.fontSizeMedium};
+  }
+`;
+
+const EmptyMessage = styled('div')`
+  font-weight: 600;
+
+  @media (min-width: ${p => p.theme.breakpoints[0]}) {
+    font-size: ${p => p.theme.fontSizeExtraLarge};
+  }
+`;
+
+const PlaceholderImage = styled('img')`
+  max-height: 320px; /* This should be same height as video in CongratsRobots */
+`;
+
+export default NoUnresolvedIssues;
diff --git a/src/sentry/static/sentry/images/spot/congrats-robots-placeholder.jpg b/src/sentry/static/sentry/images/spot/congrats-robots-placeholder.jpg
new file mode 100644
index 0000000000..50eb3c0ce0
Binary files /dev/null and b/src/sentry/static/sentry/images/spot/congrats-robots-placeholder.jpg differ
diff --git a/tests/js/spec/views/issueList/congratsRobots.spec.jsx b/tests/js/spec/views/issueList/congratsRobots.spec.jsx
deleted file mode 100644
index c0c6496cf3..0000000000
--- a/tests/js/spec/views/issueList/congratsRobots.spec.jsx
+++ /dev/null
@@ -1,13 +0,0 @@
-import React from 'react';
-import {mountWithTheme} from 'sentry-test/enzyme';
-
-import CongratsRobots from 'app/views/issueList/congratsRobots';
-
-describe('CongratsRobots', function() {
-  it('renders', function() {
-    const wrapper = mountWithTheme(<CongratsRobots />);
-
-    expect(wrapper.find('AnimatedScene').exists()).toBe(true);
-    expect(wrapper.find('StyledVideo').exists()).toBe(true);
-  });
-});
diff --git a/tests/js/spec/views/issueList/noGroupsHandler/noUnresolvedIssues.spec.jsx b/tests/js/spec/views/issueList/noGroupsHandler/noUnresolvedIssues.spec.jsx
new file mode 100644
index 0000000000..768adb4681
--- /dev/null
+++ b/tests/js/spec/views/issueList/noGroupsHandler/noUnresolvedIssues.spec.jsx
@@ -0,0 +1,24 @@
+import React from 'react';
+import {mountWithTheme} from 'sentry-test/enzyme';
+
+import NoUnresolvedIssues from 'app/views/issueList/noGroupsHandler/noUnresolvedIssues';
+import CongratsRobotsVideo from 'app/views/issueList/noGroupsHandler/congratsRobots';
+
+// Mocking this because of https://github.com/airbnb/enzyme/issues/2326
+jest.mock('app/views/issueList/noGroupsHandler/congratsRobots', () =>
+  jest.fn(() => null)
+);
+
+describe('NoUnresolvedIssues', function() {
+  it('renders', async function() {
+    const wrapper = mountWithTheme(<NoUnresolvedIssues />);
+
+    // Need this because of suspense
+    await tick();
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('Message').exists()).toBe(true);
+    expect(wrapper.find(CongratsRobotsVideo).exists()).toBe(true);
+  });
+});
diff --git a/tests/js/spec/views/issueList/overview.spec.jsx b/tests/js/spec/views/issueList/overview.spec.jsx
index 55324ace7b..7e37c38c23 100644
--- a/tests/js/spec/views/issueList/overview.spec.jsx
+++ b/tests/js/spec/views/issueList/overview.spec.jsx
@@ -14,6 +14,9 @@ import TagStore from 'app/stores/tagStore';
 jest.mock('app/views/issueList/sidebar', () => jest.fn(() => null));
 jest.mock('app/views/issueList/actions', () => jest.fn(() => null));
 jest.mock('app/components/stream/group', () => jest.fn(() => null));
+jest.mock('app/views/issueList/noGroupsHandler/congratsRobots', () =>
+  jest.fn(() => null)
+);
 
 const DEFAULT_LINKS_HEADER =
   '<http://127.0.0.1:8000/api/0/organizations/org-slug/issues/?cursor=1443575731:0:1>; rel="previous"; results="false"; cursor="1443575731:0:1", ' +
@@ -572,6 +575,8 @@ describe('IssueList,', function() {
         })
       );
 
+      await tick();
+
       wrapper.setProps({
         location: {
           ...router.location,
@@ -665,6 +670,8 @@ describe('IssueList,', function() {
         .first()
         .simulate('click');
 
+      await tick();
+
       expect(browserHistory.push).toHaveBeenLastCalledWith(
         expect.objectContaining({
           pathname: '/organizations/org-slug/issues/searches/789/',
@@ -817,6 +824,8 @@ describe('IssueList,', function() {
         .simulate('change', {target: {value: 'assigned:me level:fatal'}});
       wrapper.find('SmartSearchBar form').simulate('submit');
 
+      await tick();
+
       expect(browserHistory.push).toHaveBeenLastCalledWith(
         expect.objectContaining({
           query: expect.objectContaining({
@@ -899,6 +908,7 @@ describe('IssueList,', function() {
       let pushArgs;
       createWrapper();
       await tick();
+      await tick();
       wrapper.update();
 
       expect(
@@ -923,6 +933,9 @@ describe('IssueList,', function() {
         .find('Pagination a')
         .last()
         .simulate('click');
+
+      await tick();
+
       pushArgs = {
         pathname: '/organizations/org-slug/issues/',
         query: {
@@ -937,7 +950,6 @@ describe('IssueList,', function() {
       expect(browserHistory.push).toHaveBeenLastCalledWith(pushArgs);
       wrapper.setProps({location: pushArgs});
       wrapper.setContext({location: pushArgs});
-      wrapper.update();
 
       expect(
         wrapper
@@ -952,6 +964,9 @@ describe('IssueList,', function() {
         .find('Pagination a')
         .last()
         .simulate('click');
+
+      await tick();
+
       pushArgs = {
         pathname: '/organizations/org-slug/issues/',
         query: {
@@ -966,13 +981,15 @@ describe('IssueList,', function() {
       expect(browserHistory.push).toHaveBeenLastCalledWith(pushArgs);
       wrapper.setProps({location: pushArgs});
       wrapper.setContext({location: pushArgs});
-      wrapper.update();
 
       // Click previous
       wrapper
         .find('Pagination a')
         .first()
         .simulate('click');
+
+      await tick();
+
       pushArgs = {
         pathname: '/organizations/org-slug/issues/',
         query: {
@@ -987,13 +1004,13 @@ describe('IssueList,', function() {
       expect(browserHistory.push).toHaveBeenLastCalledWith(pushArgs);
       wrapper.setProps({location: pushArgs});
       wrapper.setContext({location: pushArgs});
-      wrapper.update();
 
       // Click previous back to initial page
       wrapper
         .find('Pagination a')
         .first()
         .simulate('click');
+      await tick();
 
       // cursor is undefined because "prev" cursor is === initial "next" cursor
       expect(browserHistory.push).toHaveBeenLastCalledWith({
@@ -1377,7 +1394,7 @@ describe('IssueList,', function() {
       await tick();
       wrapper.update();
 
-      expect(wrapper.find('CongratsRobots').exists()).toBe(true);
+      expect(wrapper.find('NoUnresolvedIssues').exists()).toBe(true);
     });
 
     it('displays an empty resultset with is:unresolved and level:error query', async function() {
