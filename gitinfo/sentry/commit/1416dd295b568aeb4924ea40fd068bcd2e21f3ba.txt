commit 1416dd295b568aeb4924ea40fd068bcd2e21f3ba
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 29 20:20:57 2014 -0700

    Truncate chained exceptions down to (default) 25 values

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index ad4b64b616..f6ac99acfb 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -708,6 +708,7 @@ SENTRY_MAX_DICTIONARY_ITEMS = 50
 
 SENTRY_MAX_MESSAGE_LENGTH = 1024 * 2
 SENTRY_MAX_STACKTRACE_FRAMES = 25
+SENTRY_MAX_EXCEPTIONS = 25
 
 # Gravatar service base url
 SENTRY_GRAVATAR_BASE_URL = 'https://secure.gravatar.com'
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 695429e050..11cbe863e6 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -8,6 +8,8 @@ sentry.interfaces.exception
 
 __all__ = ('Exception',)
 
+from django.conf import settings
+
 from sentry.interfaces.base import Interface
 from sentry.interfaces.stacktrace import Stacktrace, is_newest_frame_first
 from sentry.utils.safe import trim
@@ -101,6 +103,11 @@ class SingleException(Interface):
             e_type = e_value
             e_value = None
 
+        if self.exc_omitted:
+            first_exc_omitted, last_exc_omitted = self.exc_omitted
+        else:
+            first_exc_omitted, last_exc_omitted = None, None
+
         return {
             'is_public': is_public,
             'event': event,
@@ -108,7 +115,9 @@ class SingleException(Interface):
             'exception_value': e_value,
             'exception_module': e_module,
             'fullname': fullname,
-            'last_frame': last_frame
+            'last_frame': last_frame,
+            'first_exc_omitted': first_exc_omitted,
+            'last_exc_omitted': last_exc_omitted,
         }
 
 
@@ -146,22 +155,32 @@ class Exception(Interface):
 
     @classmethod
     def to_python(cls, data):
-        if 'values' in data:
-            values = data['values']
-        else:
-            values = [data]
+        if 'values' not in data:
+            data = {'values': [data]}
 
-        assert values
+        assert data['values']
+
+        trim_exceptions(data)
 
         kwargs = {
-            'values': [SingleException.to_python(v) for v in values],
+            'values': [
+                SingleException.to_python(v)
+                for v in data['values']
+            ],
         }
 
+        if data.get('exc_omitted'):
+            assert len(data['exc_omitted']) == 2
+            kwargs['exc_omitted'] = data['exc_omitted']
+        else:
+            kwargs['exc_omitted'] = None
+
         return cls(**kwargs)
 
     def to_json(self):
         return {
             'values': [v.to_json() for v in self.values],
+            'exc_omitted': self.exc_omitted,
         }
 
     def __getitem__(self, key):
@@ -271,3 +290,20 @@ class Exception(Interface):
         if exc.stacktrace:
             return exc.stacktrace.get_stacktrace(*args, **kwargs)
         return ''
+
+
+def trim_exceptions(data, max_values=settings.SENTRY_MAX_EXCEPTIONS):
+    # TODO: this doesnt account for cases where the client has already omitted
+    # exceptions
+    values = data['values']
+    exc_len = len(values)
+
+    if exc_len <= max_values:
+        return
+
+    half_max = max_values / 2
+
+    data['exc_omitted'] = (half_max, exc_len - half_max)
+
+    for n in xrange(half_max, exc_len - half_max):
+        del values[half_max]
diff --git a/src/sentry/static/sentry/less/sentry.less b/src/sentry/static/sentry/less/sentry.less
index b44b7f46d8..e9ba5af4cf 100644
--- a/src/sentry/static/sentry/less/sentry.less
+++ b/src/sentry/static/sentry/less/sentry.less
@@ -1569,7 +1569,8 @@ ul.traceback {
   }
 }
 
-.frames-omitted {
+.frames-omitted,
+.exc-omitted {
   color: #999;
   border: 1px dotted #ddd;
   border-width: 1px 0;
diff --git a/src/sentry/templates/sentry/partial/interfaces/chained_exception.html b/src/sentry/templates/sentry/partial/interfaces/chained_exception.html
index 00243ea7df..c3ae9b8a49 100644
--- a/src/sentry/templates/sentry/partial/interfaces/chained_exception.html
+++ b/src/sentry/templates/sentry/partial/interfaces/chained_exception.html
@@ -37,6 +37,11 @@
                     {% endwith %}
                 {% endwith %}
             </div>
+            {% if forloop.counter == first_exc_omitted %}
+            <div class="exc-omitted">
+                Exceptions {{ first_exc_omitted }} until {{ last_exc_omitted }} were omitted and not available.
+            </li>
+            {% endif %}
         {% endfor %}
     </div>
 </div>
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index bd8412fed5..ce7219d90a 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -4,7 +4,9 @@ from __future__ import absolute_import
 
 from exam import fixture
 
-from sentry.interfaces.exception import SingleException, Exception
+from sentry.interfaces.exception import (
+    SingleException, Exception, trim_exceptions
+)
 from sentry.testutils import TestCase
 
 
@@ -122,3 +124,26 @@ class SingleExceptionTest(TestCase):
         SingleException.to_python(dict(
             value='ValueError',
         ))
+
+
+class TrimExceptionsTest(TestCase):
+    def test_under_max(self):
+        value = {'values': [{'value': 'foo'}]}
+        trim_exceptions(value)
+        assert len(value['values']) == 1
+        assert value.get('exc_omitted') is None
+
+    def test_over_max(self):
+        values = []
+        for n in xrange(5):
+            values.append({'value': 'frame %d' % n})
+        value = {'values': values}
+        trim_exceptions(value, max_values=4)
+
+        assert len(value['values']) == 4
+
+        for value, num in zip(values[:2], xrange(2)):
+            assert value['value'] == 'frame %d' % num
+
+        for value, num in zip(values[2:], xrange(3, 5)):
+            assert value['value'] == 'frame %d' % num
