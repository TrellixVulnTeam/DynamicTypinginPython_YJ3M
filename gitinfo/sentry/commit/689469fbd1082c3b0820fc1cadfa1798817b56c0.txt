commit 689469fbd1082c3b0820fc1cadfa1798817b56c0
Author: Jan Michael Auer <jan.auer@sentry.io>
Date:   Thu Feb 27 19:38:26 2020 +0100

    feat(signals): Send data category and quantity to ingestion signals (#17317)
    
    Adds data categories (introduced in #17248) and quantities to event ingestion signals.

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 64cf2b02b7..9e73e67168 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -16,6 +16,7 @@ from django.utils.encoding import force_text
 from sentry import buffer, eventstore, eventtypes, eventstream, features, tsdb
 from sentry.attachments import attachment_cache
 from sentry.constants import (
+    DataCategory,
     DEFAULT_STORE_NORMALIZER_ARGS,
     LOG_LEVELS_MAP,
     MAX_TAG_VALUE_LENGTH,
@@ -662,6 +663,7 @@ def _pull_out_data(jobs, projects):
         job["recorded_timestamp"] = data.get("timestamp")
         job["event"] = event = _get_event_instance(job["data"], project_id=job["project_id"])
         job["data"] = data = event.data.data
+        job["category"] = DataCategory.from_event_type(data.get("type"))
         job["platform"] = event.platform
         event._project_cache = projects[job["project_id"]]
 
@@ -786,7 +788,11 @@ def _materialize_metadata_many(jobs):
 def _send_event_saved_signal_many(jobs, projects):
     for job in jobs:
         event_saved.send_robust(
-            project=projects[job["project_id"]], event_size=job["event"].size, sender=EventManager
+            project=projects[job["project_id"]],
+            event_size=job["event"].size,
+            category=job["category"],
+            quantity=1,
+            sender=EventManager,
         )
 
 
diff --git a/src/sentry/ingest/outcomes_consumer.py b/src/sentry/ingest/outcomes_consumer.py
index 3ff8a23646..b5f55f5d37 100644
--- a/src/sentry/ingest/outcomes_consumer.py
+++ b/src/sentry/ingest/outcomes_consumer.py
@@ -30,6 +30,7 @@ from sentry.utils.batching_kafka_consumer import AbstractBatchWorker
 from django.conf import settings
 from django.core.cache import cache
 
+from sentry.constants import DataCategory
 from sentry.models.project import Project
 from sentry.db.models.manager import BaseManager
 from sentry.signals import event_filtered, event_dropped
@@ -98,12 +99,28 @@ def _process_signal(msg):
 
     reason = msg.get("reason")
     remote_addr = msg.get("remote_addr")
+    quantity = msg.get("quantity")
+
+    category = msg.get("category")
+    if category is not None:
+        category = DataCategory(category)
 
     if outcome == Outcome.FILTERED:
-        event_filtered.send_robust(ip=remote_addr, project=project, sender=OutcomesConsumerWorker)
+        event_filtered.send_robust(
+            ip=remote_addr,
+            project=project,
+            category=category,
+            quantity=quantity,
+            sender=OutcomesConsumerWorker,
+        )
     elif outcome == Outcome.RATE_LIMITED:
         event_dropped.send_robust(
-            ip=remote_addr, project=project, reason_code=reason, sender=OutcomesConsumerWorker
+            ip=remote_addr,
+            project=project,
+            reason_code=reason,
+            category=category,
+            quantity=quantity,
+            sender=OutcomesConsumerWorker,
         )
 
     # remember that we sent the signal just in case the processor dies before
diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index c5ebf000f1..f55494c353 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -52,14 +52,18 @@ class BetterSignal(Signal):
 
 
 buffer_incr_complete = BetterSignal(providing_args=["model", "columns", "extra", "result"])
-event_accepted = BetterSignal(providing_args=["ip", "data", "project"])
-event_discarded = BetterSignal(providing_args=["project"])
-event_dropped = BetterSignal(providing_args=["ip", "data", "project", "reason_code"])
-event_filtered = BetterSignal(providing_args=["ip", "data", "project"])
-event_received = BetterSignal(providing_args=["ip", "project"])
+event_discarded = BetterSignal(providing_args=["project", "category", "quantity"])
+event_dropped = BetterSignal(
+    providing_args=["ip", "data", "project", "reason_code", "category", "quantity"]
+)
+event_filtered = BetterSignal(providing_args=["ip", "project", "category", "quantity"])
 pending_delete = BetterSignal(providing_args=["instance", "actor"])
 event_processed = BetterSignal(providing_args=["project", "event"])
-event_saved = BetterSignal(providing_args=["project"])
+event_saved = BetterSignal(providing_args=["project", "category", "quantity"])
+
+# DEPRECATED
+event_received = BetterSignal(providing_args=["ip", "project"])
+event_accepted = BetterSignal(providing_args=["ip", "data", "project"])
 
 # Organization Onboarding Signals
 project_created = BetterSignal(providing_args=["project", "user", "default_rules"])
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index db47b1e618..54af7befec 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -223,7 +223,9 @@ def process_event(event_manager, project, key, remote_addr, helper, attachments,
         metrics.incr("events.blacklisted", tags={"reason": filter_reason}, skip_internal=False)
 
         if not signals_in_consumer:
-            event_filtered.send_robust(ip=remote_addr, project=project, sender=process_event)
+            event_filtered.send_robust(
+                ip=remote_addr, project=project, category=data_category, sender=process_event
+            )
 
         # relay will no longer be able to provide information about filter
         # status so to see the impact we're adding a way to turn on relay
@@ -267,7 +269,11 @@ def process_event(event_manager, project, key, remote_addr, helper, attachments,
         metrics.incr("events.dropped", tags={"reason": reason or "unknown"}, skip_internal=False)
         if not signals_in_consumer:
             event_dropped.send_robust(
-                ip=remote_addr, project=project, reason_code=reason, sender=process_event
+                ip=remote_addr,
+                project=project,
+                reason_code=reason,
+                category=data_category,
+                sender=process_event,
             )
 
         if rate_limit is not None:
