commit 5f41508c79f4c9e2583a8ed6f26f63c9e00b10db
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue May 28 10:06:34 2019 -0700

    feat(events-v2): Implement aggregate counts on the events API (#13373)
    
    Support aggregations on the events API. Also renames `fields` -> `field` for
    consistency and fixes typos with `groupBy` vs `groupby`.
    
    Ref: SEN-666

diff --git a/src/sentry/api/bases/organization_events.py b/src/sentry/api/bases/organization_events.py
index 14023bde8d..d0f1c99e8a 100644
--- a/src/sentry/api/bases/organization_events.py
+++ b/src/sentry/api/bases/organization_events.py
@@ -48,8 +48,7 @@ class OrganizationEventsEndpointBase(OrganizationEndpoint):
         except InvalidSearchQuery as exc:
             raise OrganizationEventsError(exc.message)
 
-        fields = request.GET.getlist('fields')[:]
-
+        fields = request.GET.getlist('field')[:]
         if fields:
             # If project.name is requested, get the project.id from Snuba so we
             # can use this to look up the name in Sentry
@@ -59,8 +58,10 @@ class OrganizationEventsEndpointBase(OrganizationEndpoint):
                     fields.append('project.id')
 
             snuba_args['selected_columns'] = fields
-        else:
-            raise OrganizationEventsError('No fields requested.')
+
+        aggregations = request.GET.getlist('aggregation')
+        if aggregations:
+            snuba_args['aggregations'] = [aggregation.split(',') for aggregation in aggregations]
 
         groupby = request.GET.getlist('groupby')
         if groupby:
diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index 260db6c4b8..e2dbc9958a 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -108,7 +108,7 @@ class OrganizationEventsEndpoint(OrganizationEventsEndpointBase):
             organization=organization,
             id__in=project_ids).values('id', 'slug')}
 
-        fields = request.GET.getlist('fields')
+        fields = request.GET.getlist('field')
 
         if 'project.name' in fields:
             for result in results:
diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index e99908c3dd..a37663b623 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -117,7 +117,7 @@ export const EventView = PropTypes.shape({
   data: PropTypes.shape({
     query: PropTypes.string.isRequired,
     fields: PropTypes.arrayOf(PropTypes.string).isRequired,
-    groupBy: PropTypes.arrayOf(PropTypes.string).isRequired,
+    groupby: PropTypes.arrayOf(PropTypes.string).isRequired,
     aggregations: PropTypes.arrayOf(PropTypes.array).isRequired,
     sort: PropTypes.string.isRequired,
   }).isRequired,
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx
index bf8ed74d2e..d58b41f5be 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx
@@ -13,7 +13,7 @@ export const ALL_VIEWS = deepFreeze([
     data: {
       query: '',
       fields: ['event', 'event.type', 'project.name', 'user', 'time'],
-      groupBy: [],
+      groupby: [],
       aggregations: [],
       sort: '',
     },
@@ -31,9 +31,9 @@ export const ALL_VIEWS = deepFreeze([
     name: 'Errors',
     data: {
       query: '',
-      fields: ['project.name', 'fingerprint', 'count', 'user_count'],
-      groupBy: ['count', 'user_count', 'project.name'],
-      aggregations: [['count', null, 'count'], ['count', 'user', 'user_count']],
+      fields: [],
+      groupby: ['issue.id'],
+      aggregations: [['uniq', 'id', 'event_count'], ['uniq', 'user', 'user_count']],
       sort: '',
     },
     tags: ['error.type', 'project.name'],
@@ -43,9 +43,9 @@ export const ALL_VIEWS = deepFreeze([
     name: 'CSP',
     data: {
       query: '',
-      fields: ['project.name', 'count', 'user_count'],
-      groupBy: ['count', 'user_count', 'project.name'],
-      aggregations: [['count', null, 'count'], ['count', 'user', 'user_count']],
+      fields: [],
+      groupby: ['issue.id'],
+      aggregations: [['uniq', 'id', 'event_count'], ['uniq', 'user', 'user_count']],
       sort: '',
     },
     tags: [
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
index 082c9d2f23..28c67f9d31 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
@@ -28,7 +28,7 @@ export function getQuery(view) {
     return list;
   }, []);
 
-  data.fields = [...new Set(fields)];
+  data.field = [...new Set(fields)];
 
   return data;
 }
diff --git a/tests/js/spec/views/organizationEventsV2/utils.spec.jsx b/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
index 518da3bfa8..4a586fdfcd 100644
--- a/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
@@ -26,7 +26,7 @@ describe('getQuery()', function() {
       tags: [],
     };
 
-    expect(getQuery(view).fields).toEqual([
+    expect(getQuery(view).field).toEqual([
       'title',
       'id',
       'project.name',
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index c6602209bf..4b9595e5aa 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -117,7 +117,7 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
                 self.url,
                 format='json',
                 data={
-                    'fields': ['id', 'project.id', 'user.email', 'user.ip', 'time'],
+                    'field': ['id', 'project.id', 'user.email', 'user.ip', 'time'],
                     'orderby': '-timestamp',
                 },
             )
@@ -145,7 +145,7 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
                 self.url,
                 format='json',
                 data={
-                    'fields': ['project.name', 'environment'],
+                    'field': ['project.name', 'environment'],
                 },
             )
 
@@ -188,7 +188,7 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
                 self.url,
                 format='json',
                 data={
-                    'fields': ['project.id', 'environment'],
+                    'field': ['project.id', 'environment'],
                     'groupby': ['project.id', 'environment'],
                     'orderby': 'environment',
                 },
@@ -201,7 +201,7 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
         assert response.data[1]['project.id'] == project.id
         assert response.data[1]['environment'] == 'staging'
 
-    def test_event_count(self):
+    def test_event_and_user_counts(self):
         self.login_as(user=self.user)
         project = self.create_project()
         self.store_event(
@@ -209,6 +209,9 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
                 'event_id': 'a' * 32,
                 'timestamp': self.min_ago,
                 'fingerprint': ['group_1'],
+                'user': {
+                    'email': 'foo@example.com',
+                },
             },
             project_id=project.id,
         )
@@ -216,7 +219,10 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
             data={
                 'event_id': 'b' * 32,
                 'timestamp': self.min_ago,
-                'fingerprint': ['group_1'],
+                'fingerprint': ['group_2'],
+                'user': {
+                    'email': 'foo@example.com',
+                },
             },
             project_id=project.id,
         )
@@ -225,6 +231,9 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
                 'event_id': 'c' * 32,
                 'timestamp': self.min_ago,
                 'fingerprint': ['group_2'],
+                'user': {
+                    'email': 'bar@example.com',
+                },
             },
             project_id=project.id,
         )
@@ -236,8 +245,8 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
                 self.url,
                 format='json',
                 data={
-                    'fields': ['issue.id'],
                     'groupby': ['issue.id'],
+                    'aggregation': ['uniq,id,event_count', 'uniq,sentry:user,user_count'],
                     'orderby': 'issue.id'
                 },
             )
@@ -245,4 +254,8 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
         assert response.status_code == 200, response.content
         assert len(response.data) == 2
         assert response.data[0]['issue.id'] == groups[0].id
+        assert response.data[0]['event_count'] == 1
+        assert response.data[0]['user_count'] == 1
         assert response.data[1]['issue.id'] == groups[1].id
+        assert response.data[1]['event_count'] == 2
+        assert response.data[1]['user_count'] == 2
