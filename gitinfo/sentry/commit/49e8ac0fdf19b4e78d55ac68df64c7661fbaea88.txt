commit 49e8ac0fdf19b4e78d55ac68df64c7661fbaea88
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Thu Oct 18 10:03:53 2018 -0700

    ref(api): Move get_date_range_from_params into utils

diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index 02265592af..3aaa412935 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -1,10 +1,7 @@
 from __future__ import absolute_import
 
-from datetime import timedelta
 from functools32 import partial
 
-from django.utils import timezone
-
 from rest_framework.exceptions import PermissionDenied
 from rest_framework.response import Response
 
@@ -13,47 +10,11 @@ from sentry.api.bases import OrganizationEndpoint
 from sentry.api.paginator import GenericOffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.event import SnubaEvent
-from sentry.api.utils import parse_stats_period
+from sentry.api.utils import get_date_range_from_params, InvalidParams
 from sentry.models import OrganizationMember, OrganizationMemberTeam, Project, ProjectStatus
-from sentry.search.utils import parse_datetime_string, InvalidQuery
 from sentry.utils.snuba import raw_query
 
 
-MIN_STATS_PERIOD = timedelta(hours=1)
-MAX_STATS_PERIOD = timedelta(days=90)
-
-
-class InvalidParams(Exception):
-    pass
-
-
-def get_date_range_from_params(params):
-    # Returns (start, end) or raises an `InvalidParams` exception
-    now = timezone.now()
-
-    end = now
-    start = now - MAX_STATS_PERIOD
-
-    stats_period = params.get('statsPeriod')
-    if stats_period is not None:
-        stats_period = parse_stats_period(stats_period)
-        if stats_period is None or stats_period < MIN_STATS_PERIOD or stats_period >= MAX_STATS_PERIOD:
-            raise InvalidParams('Invalid statsPeriod')
-        start = now - stats_period
-    elif params.get('start') or params.get('end'):
-        if not all([params.get('start'), params.get('end')]):
-            raise InvalidParams('start and end are both required')
-        try:
-            start = parse_datetime_string(params['start'])
-            end = parse_datetime_string(params['end'])
-        except InvalidQuery as exc:
-            raise InvalidParams(exc.message)
-        if start > end:
-            raise InvalidParams('start must be before end')
-
-    return (start, end)
-
-
 class OrganizationEventsEndpoint(OrganizationEndpoint):
 
     def get_project_ids(self, request, organization):
diff --git a/src/sentry/api/utils.py b/src/sentry/api/utils.py
index bd096ee568..38006ed4b7 100644
--- a/src/sentry/api/utils.py
+++ b/src/sentry/api/utils.py
@@ -3,6 +3,17 @@ from __future__ import absolute_import
 import re
 from datetime import timedelta
 
+from django.utils import timezone
+
+from sentry.search.utils import parse_datetime_string, InvalidQuery
+
+MIN_STATS_PERIOD = timedelta(hours=1)
+MAX_STATS_PERIOD = timedelta(days=90)
+
+
+class InvalidParams(Exception):
+    pass
+
 
 def parse_stats_period(period):
     """
@@ -19,3 +30,30 @@ def parse_stats_period(period):
     return timedelta(**{
         {'h': 'hours', 'd': 'days', 'm': 'minutes', 's': 'seconds'}[unit]: value,
     })
+
+
+def get_date_range_from_params(params):
+    # Returns (start, end) or raises an `InvalidParams` exception
+    now = timezone.now()
+
+    end = now
+    start = now - MAX_STATS_PERIOD
+
+    stats_period = params.get('statsPeriod')
+    if stats_period is not None:
+        stats_period = parse_stats_period(stats_period)
+        if stats_period is None or stats_period < MIN_STATS_PERIOD or stats_period >= MAX_STATS_PERIOD:
+            raise InvalidParams('Invalid statsPeriod')
+        start = now - stats_period
+    elif params.get('start') or params.get('end'):
+        if not all([params.get('start'), params.get('end')]):
+            raise InvalidParams('start and end are both required')
+        try:
+            start = parse_datetime_string(params['start'])
+            end = parse_datetime_string(params['end'])
+        except InvalidQuery as exc:
+            raise InvalidParams(exc.message)
+        if start > end:
+            raise InvalidParams('start must be before end')
+
+    return (start, end)
