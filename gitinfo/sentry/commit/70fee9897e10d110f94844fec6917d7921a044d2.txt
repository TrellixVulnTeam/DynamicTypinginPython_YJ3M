commit 70fee9897e10d110f94844fec6917d7921a044d2
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 12 14:20:02 2013 -0800

    Refactor counters to only store the number of events at a project level

diff --git a/src/sentry/counter/base.py b/src/sentry/counter/base.py
index e99315ab94..ddd9d34bcf 100644
--- a/src/sentry/counter/base.py
+++ b/src/sentry/counter/base.py
@@ -9,14 +9,12 @@ sentry.counter.base
 
 class Counter(object):
     """
-    Counters are temporary stores for querying real-time counts of events.
+    A counter is a temporary store for real-time counts for recent historical
+    data on events.
 
-    Specifically, they store the following distinct counters:
+    Specifically, they store the following:
 
-    - events (global)
-    - events per team
     - events per project
-    - events per group
 
     Each grouping tracks the following:
 
@@ -25,12 +23,14 @@ class Counter(object):
 
     Each counter stores counts at minute-level intervals for 15 minutes.
     """
+    MINUTES = 15
+
     def __init__(self, **options):
         pass
 
-    def incr(self, amount=1, is_new=False, **kwargs):
+    def incr(self, group, is_new=False, **kwargs):
         """
-        >>> incr(1, team_id=1, project_id=1, group_id=1, is_new=False)
+        >>> incr(group, is_new=False)
         """
         pass
 
diff --git a/src/sentry/counter/redis.py b/src/sentry/counter/redis.py
index 90da430bc2..5a5053fa06 100644
--- a/src/sentry/counter/redis.py
+++ b/src/sentry/counter/redis.py
@@ -15,9 +15,6 @@ from sentry.conf import settings
 
 
 class RedisCounter(Counter):
-    num_minutes = 15
-    key_expire = 60 * num_minutes
-
     def __init__(self, **options):
         if not options:
             # inherit default options from REDIS_OPTIONS
@@ -34,45 +31,41 @@ class RedisCounter(Counter):
             'hosts': options['hosts'],
         })
 
-    def _make_key(self, key, value, when=None, is_new=False):
+    def _make_key(self, prefix, when=None, is_new=False):
         """
         Returns a Redis-compatible key for the given key/value combination.
         """
         if when is None:
             when = time.time()
         when = int(when / 60)  # chop it down to the minute
-        return 'sentry.counter:%s:%s:%s=%s' % (when, int(is_new), key, value)
+        return 'sentry.counter:%s:%s:%s' % (prefix, when, int(is_new))
 
-    def incr(self, amount=1, is_new=False, **kwargs):
+    def incr(self, group, is_new=False):
         now = time.time()
         with self.conn.map() as conn:
-            keys = [self._make_key('global', '1', now)]
-            keys.extend(self._make_key(k, v, now, False) for k, v in kwargs.iteritems())
+            keys = [self._make_key('project', now)]
             if is_new:
-                keys.extend(self._make_key(k, v, now, True) for k, v in kwargs.iteritems())
+                keys.append(self._make_key('project', now, True))
+
             for key in keys:
-                conn.incr(key, amount)
-                conn.expire(key, self.key_expire)
+                conn.zincrby(key, group.project_id)
+                conn.expire(key, 60 * self.MINUTES)
 
-    def _get_count(self, key=None, value=None, minutes=None, is_new=False):
+    def _get_count(self, project, minutes=None, is_new=False):
         if minutes is None:
-            minutes = self.num_minutes
-
-        if key is value is None:
-            key = 'global'
-            value = '1'
+            minutes = self.MINUTES
 
         now = time.time()
         results = []
         with self.conn.map() as conn:
             for minute in xrange(minutes):
-                redis_key = self._make_key(key, value, now - (minute * 60), is_new)
-                results.append(conn.get(redis_key))
+                redis_key = self._make_key('project', now - (minute * 60), is_new)
+                results.append(conn.zscore(redis_key, project.id))
 
         return sum(int(r or 0) for r in results)
 
-    def total(self, key, value, minutes=None):
-        return self._get_count(key, value, minutes=minutes, is_new=False)
+    def total(self, project, minutes=None):
+        return self._get_count(project, minutes=minutes, is_new=False)
 
-    def new(self, key, value, minutes=None):
-        return self._get_count(key, value, minutes=minutes, is_new=True)
+    def new(self, project, minutes=None):
+        return self._get_count(project, minutes=minutes, is_new=True)
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index c6a17a1e1f..ad25fca067 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -617,10 +617,7 @@ class GroupManager(BaseManager, ChartMixin):
 
     def incr_counters(self, group, is_new):
         app.counter.incr(
-            amount=1,
-            group_id=group.id,
-            team_id=group.team.id,
-            project_id=group.project.id,
+            group=group,
             is_new=is_new,
         )
 
diff --git a/tests/sentry/counter/redis/tests.py b/tests/sentry/counter/redis/tests.py
index 1eb64d9340..c8572f99c7 100644
--- a/tests/sentry/counter/redis/tests.py
+++ b/tests/sentry/counter/redis/tests.py
@@ -27,26 +27,15 @@ class RedisCounterTest(TestCase):
         time = time.time
 
         time.return_value = 1360644295.816033
-        assert self.counter._make_key('team_id', 1, is_new=False) == 'sentry.counter:22677404:0:team_id=1'
+        assert self.counter._make_key('project', is_new=False) == 'sentry.counter:project:22677404:0'
         time.assert_called_once_with()
 
         now = 1360654295.816033
-        assert self.counter._make_key('team_id', 1, now, is_new=True) == 'sentry.counter:22677571:1:team_id=1'
-
-        assert self.counter._make_key('project_id', 'foo', now, is_new=True) == 'sentry.counter:22677571:1:project_id=foo'
+        assert self.counter._make_key('team', now, is_new=True) == 'sentry.counter:team:22677571:1'
 
     def test_all_the_things(self):
-        self.counter.incr(1, team_id=1, project_id=1, group_id=1, is_new=False)
-        self.counter.incr(1, team_id=1, project_id=1, group_id=1, is_new=True)
-        self.counter.incr(1, team_id=1, project_id=2, group_id=1, is_new=False)
-        self.counter.incr(2, team_id=1, project_id=2, group_id=2, is_new=True)
-        assert self.counter.total('team_id', 1) == 5
-        assert self.counter.total('project_id', 1) == 2
-        assert self.counter.total('project_id', 2) == 3
-        assert self.counter.total('group_id', 1) == 3
-        assert self.counter.total('group_id', 2) == 2
-        assert self.counter.new('team_id', 1) == 3
-        assert self.counter.new('project_id', 1) == 1
-        assert self.counter.new('project_id', 2) == 2
-        assert self.counter.new('group_id', 1) == 1
-        assert self.counter.new('group_id', 2) == 2
+        self.counter.incr(self.group, is_new=False)
+        self.counter.incr(self.group, is_new=False)
+        self.counter.incr(self.group, is_new=True)
+        assert self.counter.total(self.project) == 3
+        assert self.counter.new(self.project) == 1
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 53583e9671..eccb573363 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -266,10 +266,7 @@ class SentryManagerTest(TestCase):
         is_new = mock.Mock()
         Group.objects.incr_counters(self.group, is_new=is_new)
         incr.assert_called_once_with(
-            amount=1,
-            team_id=self.group.team.id,
-            project_id=self.group.project.id,
-            group_id=self.group.id,
+            group=self.group,
             is_new=is_new,
         )
 
