commit 5fd166ec7f93e5824352b9164ed8106ef0c59058
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Oct 29 10:14:25 2018 -0700

    feat(ui): Add default period for Org Events (#10261)
    
    This adds a default period of 7 days for org events

diff --git a/src/sentry/static/sentry/app/constants/index.jsx b/src/sentry/static/sentry/app/constants/index.jsx
index de5bfcd19a..3e719c7f1b 100644
--- a/src/sentry/static/sentry/app/constants/index.jsx
+++ b/src/sentry/static/sentry/app/constants/index.jsx
@@ -58,3 +58,5 @@ export const AVATAR_URL_MAP = {
 };
 
 export const MENU_CLOSE_DELAY = 200;
+
+export const DEFAULT_STATS_PERIOD = '7d';
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
index ca618e8b12..816a2c3f76 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
@@ -1,6 +1,7 @@
 import React from 'react';
 
 import {Panel, PanelHeader} from 'app/components/panels';
+import {getParams} from 'app/views/organizationEvents/utils';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
 import EventsChart from 'app/views/organizationEvents/eventsChart';
@@ -23,9 +24,19 @@ class OrganizationEvents extends AsyncView {
 
   getEndpoints() {
     const {organization, location} = this.props;
+    let {statsPeriod, ...query} = location.query;
 
     return [
-      ['events', `/organizations/${organization.slug}/events/`, {query: location.query}],
+      [
+        'events',
+        `/organizations/${organization.slug}/events/`,
+        {
+          query: getParams({
+            period: statsPeriod,
+            ...query,
+          }),
+        },
+      ],
     ];
   }
 
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
index 22fc2290aa..16a59d2d0b 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
@@ -4,7 +4,9 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
+import {DEFAULT_STATS_PERIOD} from 'app/constants';
 import {defined} from 'app/utils';
+import {getParams} from 'app/views/organizationEvents/utils';
 import EventsContext from 'app/views/organizationEvents/eventsContext';
 import Feature from 'app/components/acl/feature';
 import HeaderSeparator from 'app/components/organizations/headerSeparator';
@@ -41,7 +43,7 @@ class OrganizationEventsContainer extends React.Component {
     const values = {
       project,
       environment,
-      period: query.statsPeriod || (hasAbsolute ? null : '7d'),
+      period: query.statsPeriod || (hasAbsolute ? null : DEFAULT_STATS_PERIOD),
       start: query.start || null,
       end: query.end || null,
     };
@@ -62,26 +64,17 @@ class OrganizationEventsContainer extends React.Component {
     this.state = OrganizationEventsContainer.getInitialStateFromRouter(props);
   }
 
-  updateParams = ({period, ...obj}) => {
+  updateParams = obj => {
     const {router} = this.props;
     // Reset cursor when changing parameters
     // eslint-disable-next-line no-unused-vars
-    const {cursor, ...oldQuery} = router.location.query;
+    const {cursor, statsPeriod, ...oldQuery} = router.location.query;
 
-    // Filter null values
-    const newQuery = Object.entries({
+    const newQuery = getParams({
       ...oldQuery,
-      statsPeriod: period,
+      period: obj.period || statsPeriod,
       ...obj,
-    })
-      .filter(([key, value]) => value !== null)
-      .reduce(
-        (acc, [key, value]) => ({
-          ...acc,
-          [key]: value,
-        }),
-        {}
-      );
+    });
 
     router.push({
       pathname: router.location.pathname,
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/utils.jsx b/src/sentry/static/sentry/app/views/organizationEvents/utils.jsx
new file mode 100644
index 0000000000..1ef6653adc
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationEvents/utils.jsx
@@ -0,0 +1,35 @@
+import {DEFAULT_STATS_PERIOD} from 'app/constants';
+import {defined} from 'app/utils';
+
+// Filters out params with null values and returns a default
+// `statsPeriod` when necessary.
+//
+// Accepts `period` and `statsPeriod` but will only return `statsPeriod`
+//
+// TODO(billy): Make period parameter name consistent
+export function getParams(params = {}) {
+  let {start, end, period, statsPeriod, ...otherParams} = params;
+
+  // `statsPeriod` takes precendence for now
+  period = statsPeriod || period;
+
+  if (!start && !end && !period) {
+    period = DEFAULT_STATS_PERIOD;
+  }
+
+  // Filter null values
+  return Object.entries({
+    statsPeriod: period,
+    start: period ? null : start,
+    end: period ? null : end,
+    ...otherParams,
+  })
+    .filter(([key, value]) => defined(value))
+    .reduce(
+      (acc, [key, value]) => ({
+        ...acc,
+        [key]: value,
+      }),
+      {}
+    );
+}
diff --git a/tests/js/spec/views/organizationEvents/index.spec.jsx b/tests/js/spec/views/organizationEvents/index.spec.jsx
index 4656d6c3b4..0afabe79f7 100644
--- a/tests/js/spec/views/organizationEvents/index.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/index.spec.jsx
@@ -62,6 +62,7 @@ describe('OrganizationEvents', function() {
       pathname: '/organizations/org-slug/events/',
       query: {
         environment: ['production'],
+        statsPeriod: '7d',
       },
     });
     expect(wrapper.state('queryValues')).toEqual(
@@ -77,6 +78,7 @@ describe('OrganizationEvents', function() {
       pathname: '/organizations/org-slug/events/',
       query: {
         environment: ['production', 'staging'],
+        statsPeriod: '7d',
       },
     });
     expect(wrapper.state('queryValues')).toEqual(
@@ -94,6 +96,7 @@ describe('OrganizationEvents', function() {
       pathname: '/organizations/org-slug/events/',
       query: {
         environment: [],
+        statsPeriod: '7d',
       },
     });
   });
@@ -118,6 +121,7 @@ describe('OrganizationEvents', function() {
           pathname: '/organizations/org-slug/events/',
           query: {
             environment: ['production'],
+            statsPeriod: '7d',
           },
         },
       },
diff --git a/tests/js/spec/views/organizationEvents/utils.spec.jsx b/tests/js/spec/views/organizationEvents/utils.spec.jsx
new file mode 100644
index 0000000000..bb7beab714
--- /dev/null
+++ b/tests/js/spec/views/organizationEvents/utils.spec.jsx
@@ -0,0 +1,67 @@
+import {DEFAULT_STATS_PERIOD} from 'app/constants';
+import {getParams} from 'app/views/organizationEvents/utils';
+
+describe('OrganizationEvents utils', function() {
+  describe('getParams', function() {
+    it('has a default `statsPeriod` by default', function() {
+      expect(getParams()).toEqual({
+        statsPeriod: DEFAULT_STATS_PERIOD,
+      });
+    });
+
+    it('transforms `period` parameter to `statsPeriod`', function() {
+      expect(getParams({period: '24h'})).toEqual({
+        statsPeriod: '24h',
+      });
+    });
+
+    it('can be passed `statsPeriod` instead of `period`', function() {
+      expect(
+        getParams({
+          statsPeriod: '24h',
+        })
+      ).toEqual({
+        statsPeriod: '24h',
+      });
+    });
+
+    it('prefers `statsPeriod` over `period`', function() {
+      expect(
+        getParams({
+          statsPeriod: '24h',
+          period: '2h',
+        })
+      ).toEqual({
+        statsPeriod: '24h',
+      });
+    });
+
+    it('only returns `statsPeriod` if absolute range is supplied as well', function() {
+      // NOTE: This is an arbitrary decision, change as needed
+      expect(getParams({start: 'start', end: 'end', period: '24h'})).toEqual({
+        statsPeriod: '24h',
+      });
+    });
+
+    it('does not change other parameters', function() {
+      expect(getParams({foo: 'bar', period: '24h'})).toEqual({
+        foo: 'bar',
+        statsPeriod: '24h',
+      });
+    });
+
+    it('filters out only null and undefined, values', function() {
+      expect(
+        getParams({
+          foo: null,
+          bar: 0,
+          start: null,
+          period: '24h',
+        })
+      ).toEqual({
+        bar: 0,
+        statsPeriod: '24h',
+      });
+    });
+  });
+});
