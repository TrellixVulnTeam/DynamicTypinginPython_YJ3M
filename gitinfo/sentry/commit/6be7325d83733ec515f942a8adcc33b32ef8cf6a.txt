commit 6be7325d83733ec515f942a8adcc33b32ef8cf6a
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Jan 17 14:00:24 2017 +0100

    Resolve vmaddrs on event ingestion

diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 7012248109..f40bf38b08 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -349,14 +349,9 @@ class NativeStacktraceProcessor(StacktraceProcessor):
         StacktraceProcessor.__init__(self, data, stacktrace_infos)
         debug_meta = data.get('debug_meta')
         if debug_meta:
-            self.sdk_info = get_sdk_from_event(data)
-            is_debug_build = debug_meta.get('is_debug_build')
-            referenced_images = find_stacktrace_referenced_images(
-                debug_meta['images'], [x.stacktrace for x in stacktrace_infos])
-            self.sym = Symbolizer(self.project, debug_meta['images'],
-                                  referenced_images=referenced_images,
-                                  is_debug_build=is_debug_build)
             self.available = True
+            self.debug_meta = debug_meta
+            self.sdk_info = get_sdk_from_event(data)
         else:
             self.available = False
 
@@ -364,6 +359,23 @@ class NativeStacktraceProcessor(StacktraceProcessor):
         StacktraceProcessor.close(self)
         self.sym.close()
 
+    def preprocess_related_data(self):
+        if not self.available:
+            return False
+
+        is_debug_build = self.debug_meta.get('is_debug_build')
+        referenced_images = find_stacktrace_referenced_images(
+            self.debug_meta['images'], [
+                x.stacktrace for x in self.stacktrace_infos])
+        self.sym = Symbolizer(self.project, self.debug_meta['images'],
+                              referenced_images=referenced_images,
+                              is_debug_build=is_debug_build)
+
+        # The symbolizer gets a reference to the debug meta's images so
+        # when it resolves the missing vmaddrs it changes them in the data
+        # dict.
+        return self.sym.resolve_missing_vmaddrs()
+
     def process_frame(self, frame):
         # XXX: warn on missing availability?
 
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 9b2b35b060..d2d005efc9 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -3,9 +3,9 @@ from __future__ import absolute_import
 import re
 import six
 
-from symsynd.driver import Driver, SymbolicationError
+from symsynd.driver import Driver, SymbolicationError, normalize_dsym_path
 from symsynd.report import ReportSymbolizer
-from symsynd.macho.arch import get_cpu_name
+from symsynd.macho.arch import get_cpu_name, get_macho_vmaddr
 
 from sentry.lang.native.dsymcache import dsymcache
 from sentry.utils.safe import trim
@@ -136,6 +136,31 @@ class Symbolizer(object):
         self.images = dict((img['image_addr'], img) for img in binary_images)
         self.is_debug_build = is_debug_build
 
+    def resolve_missing_vmaddrs(self):
+        """When called this changes the vmaddr on all contained images from
+        the information in the dsym files (if there is no vmaddr already).
+        This changes both the image data from the original event submission
+        in the debug meta as well as the image data that the symbolizer uses.
+        """
+        changed_any = False
+
+        loaded_images = self.symsynd_symbolizer.images
+        for image_addr, image in six.iteritems(self.images):
+            if image.get('image_vmaddr') or not image.get('image_addr'):
+                continue
+            image_info = loaded_images.get(image['image_addr'])
+            if not image_info:
+                continue
+            dsym_path = normalize_dsym_path(image_info['dsym_path'])
+            cpu_name = image_info['cpu_name']
+            image_vmaddr = get_macho_vmaddr(dsym_path, cpu_name)
+            if image_vmaddr:
+                image['image_vmaddr'] = image_vmaddr
+                image_info['image_vmaddr'] = image_vmaddr
+                changed_any = True
+
+        return changed_any
+
     def close(self):
         self.symsynd_symbolizer.driver.close()
 
