commit 8ee8669c3a4aebe8ed154470a4a5fd9dd963c814
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Tue May 22 14:52:42 2018 -0700

    feat(integrations): Implement fetching create issue fields for JIRA (#8500)

diff --git a/src/sentry/integrations/jira/client.py b/src/sentry/integrations/jira/client.py
index 69010463cf..b6605da1b9 100644
--- a/src/sentry/integrations/jira/client.py
+++ b/src/sentry/integrations/jira/client.py
@@ -82,10 +82,13 @@ class JiraApiClient(ApiClient):
     def get_projects_list(self):
         return self.get_cached(self.PROJECT_URL)
 
-    def get_create_meta(self, project):
+    def get_create_meta(self, project=None):
+        params = {'expand': 'projects.issuetypes.fields'}
+        if project is not None:
+            params['projectKeys'] = project
         return self.get(
             self.META_URL,
-            params={'projectKeys': project, 'expand': 'projects.issuetypes.fields'},
+            params=params,
         )
 
     def get_create_meta_for_project(self, project):
diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index afd8364944..e56f2c0fa0 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -6,6 +6,7 @@ from django.utils.translation import ugettext_lazy as _
 from sentry.integrations import (
     Integration, IntegrationFeatures, IntegrationProvider, IntegrationMetadata
 )
+from sentry.integrations.exceptions import ApiUnauthorized, IntegrationError
 from sentry.integrations.issues import IssueSyncMixin
 
 from .client import JiraApiClient
@@ -29,9 +30,16 @@ metadata = IntegrationMetadata(
     },
 )
 
+# A list of common builtin custom field types for JIRA for easy reference.
+JIRA_CUSTOM_FIELD_TYPES = {
+    'select': 'com.atlassian.jira.plugin.system.customfieldtypes:select',
+    'textarea': 'com.atlassian.jira.plugin.system.customfieldtypes:textarea',
+    'multiuserpicker': 'com.atlassian.jira.plugin.system.customfieldtypes:multiuserpicker',
+    'tempo_account': 'com.tempoplugin.tempo-accounts:accounts.customfield'
+}
 
-class JiraIntegration(Integration, IssueSyncMixin):
 
+class JiraIntegration(Integration, IssueSyncMixin):
     def get_link_issue_config(self, group, **kwargs):
         fields = super(JiraIntegration, self).get_link_issue_config(group, **kwargs)
         org = group.organization
@@ -63,6 +71,167 @@ class JiraIntegration(Integration, IssueSyncMixin):
     def search_issues(self, query):
         return self.get_client().search_issues(query)
 
+    def make_choices(self, x):
+        return [(y['id'], y['name'] if 'name' in y else y['value']) for y in x] if x else []
+
+    def build_dynamic_field(self, group, field_meta):
+        """
+        Builds a field based on JIRA's meta field information
+        """
+        schema = field_meta['schema']
+
+        # set up some defaults for form fields
+        fieldtype = 'text'
+        fkwargs = {
+            'label': field_meta['name'],
+            'required': field_meta['required'],
+        }
+        # override defaults based on field configuration
+        if (schema['type'] in ['securitylevel', 'priority']
+                or schema.get('custom') == JIRA_CUSTOM_FIELD_TYPES['select']):
+            fieldtype = 'select'
+            fkwargs['choices'] = self.make_choices(field_meta.get('allowedValues'))
+        elif field_meta.get('autoCompleteUrl') and \
+                (schema.get('items') == 'user' or schema['type'] == 'user'):
+            pass
+            # TODO(jess): implement autocomplete for users
+            # fieldtype = 'select'
+            # sentry_url = '/api/0/issues/%s/plugins/%s/autocomplete' % (group.id, self.slug)
+            # fkwargs['url'] = '%s?jira_url=%s' % (
+            #     sentry_url, quote_plus(field_meta['autoCompleteUrl']),
+            # )
+            # fkwargs['has_autocomplete'] = True
+            # fkwargs['placeholder'] = 'Start typing to search for a user'
+        elif schema['type'] in ['timetracking']:
+            # TODO: Implement timetracking (currently unsupported alltogether)
+            return None
+        elif schema.get('items') in ['worklog', 'attachment']:
+            # TODO: Implement worklogs and attachments someday
+            return None
+        elif schema['type'] == 'array' and schema['items'] != 'string':
+            fieldtype = 'select'
+            fkwargs.update(
+                {
+                    'multiple': True,
+                    'choices': self.make_choices(field_meta.get('allowedValues')),
+                    'default': []
+                }
+            )
+
+        # break this out, since multiple field types could additionally
+        # be configured to use a custom property instead of a default.
+        if schema.get('custom'):
+            if schema['custom'] == JIRA_CUSTOM_FIELD_TYPES['textarea']:
+                fieldtype = 'textarea'
+
+        fkwargs['type'] = fieldtype
+        return fkwargs
+
+    def get_issue_type_meta(self, issue_type, meta):
+        issue_types = meta['issuetypes']
+        issue_type_meta = None
+        if issue_type:
+            matching_type = [t for t in issue_types if t['id'] == issue_type]
+            issue_type_meta = matching_type[0] if len(matching_type) > 0 else None
+
+        # still no issue type? just use the first one.
+        if not issue_type_meta:
+            issue_type_meta = issue_types[0]
+
+        return issue_type_meta
+
+    # def get_new_issue_fields(self, request, group, event, **kwargs):
+    def get_create_issue_config(self, group, **kwargs):
+        fields = super(JiraIntegration, self).get_create_issue_config(group, **kwargs)
+        params = kwargs.get('params', {})
+
+        # TODO(jess): update if we allow saving a default project key
+
+        client = self.get_client()
+        try:
+            resp = client.get_create_meta(params.get('projectKey'))
+        except ApiUnauthorized:
+            raise IntegrationError(
+                'JIRA returned: Unauthorized. '
+                'Please check your configuration settings.'
+            )
+
+        try:
+            meta = resp['projects'][0]
+        except IndexError:
+            raise IntegrationError(
+                'Error in JIRA configuration, no projects found.'
+            )
+
+        # check if the issuetype was passed as a parameter
+        issue_type = params.get('issuetype')
+
+        # TODO(jess): update if we allow specifying a default issuetype
+
+        issue_type_meta = self.get_issue_type_meta(issue_type, meta)
+
+        issue_type_choices = self.make_choices(meta['issuetypes'])
+
+        # make sure default issue type is actually
+        # one that is allowed for project
+        if issue_type:
+            if not any((c for c in issue_type_choices if c[0] == issue_type)):
+                issue_type = issue_type_meta['id']
+
+        fields = [
+            {
+                'name': 'project',
+                'label': 'Jira Project',
+                'choices': ((meta['key']), (meta['key'])),
+                'default': meta['key'],
+                'type': 'select',
+            }
+        ] + fields + [
+            {
+                'name': 'issuetype',
+                'label': 'Issue Type',
+                'default': issue_type or issue_type_meta['id'],
+                'type': 'select',
+                'choices': issue_type_choices
+            }
+        ]
+
+        # title is renamed to summary before sending to JIRA
+        standard_fields = [f['name'] for f in fields] + ['summary']
+
+        # TODO(jess): are we going to allow ignored fields?
+        # ignored_fields = (self.get_option('ignored_fields', group.project) or '').split(',')
+        ignored_fields = set()
+
+        # apply ordering to fields based on some known built-in JIRA fields.
+        # otherwise weird ordering occurs.
+        anti_gravity = {"priority": -150, "fixVersions": -125, "components": -100, "security": -50}
+
+        dynamic_fields = issue_type_meta.get('fields').keys()
+        dynamic_fields.sort(key=lambda f: anti_gravity.get(f) or 0)
+        # build up some dynamic fields based on required shit.
+        for field in dynamic_fields:
+            if field in standard_fields or field in [x.strip() for x in ignored_fields]:
+                # don't overwrite the fixed fields for the form.
+                continue
+            mb_field = self.build_dynamic_field(group, issue_type_meta['fields'][field])
+            if mb_field:
+                mb_field['name'] = field
+                fields.append(mb_field)
+
+        for field in fields:
+            if field['name'] == 'priority':
+                # whenever priorities are available, put the available ones in the list.
+                # allowedValues for some reason doesn't pass enough info.
+                field['choices'] = self.make_choices(client.get_priorities())
+                # TODO(jess): fix if we are going to allow default priority
+                # field['default'] = self.get_option('default_priority', group.project) or ''
+                field['default'] = ''
+            elif field['name'] == 'fixVersions':
+                field['choices'] = self.make_choices(client.get_versions(meta['key']))
+
+        return fields
+
 
 class JiraIntegrationProvider(IntegrationProvider):
     key = 'jira'
diff --git a/tests/sentry/integrations/jira/test_integration.py b/tests/sentry/integrations/jira/test_integration.py
index 77556775d5..bd96c6adcb 100644
--- a/tests/sentry/integrations/jira/test_integration.py
+++ b/tests/sentry/integrations/jira/test_integration.py
@@ -1,9 +1,107 @@
 from __future__ import absolute_import
 
+import json
+import mock
+
 from django.core.urlresolvers import reverse
 
 from sentry.models import Integration
 from sentry.testutils import APITestCase
+from sentry.utils.http import absolute_uri
+
+
+SAMPLE_CREATE_META_RESPONSE = """
+{
+  "projects": [
+    {
+      "self": "http://www.example.com/jira/rest/api/2/project/EX",
+      "id": "10000",
+      "key": "EX",
+      "name": "Example Project",
+      "avatarUrls": {
+        "48x48": "http://www.example.com/jira/secure/projectavatar?pid=10000&avatarId=10011",
+        "24x24": "http://www.example.com/jira/secure/projectavatar?size=small&pid=10000&avatarId=10011",
+        "16x16": "http://www.example.com/jira/secure/projectavatar?size=xsmall&pid=10000&avatarId=10011",
+        "32x32": "http://www.example.com/jira/secure/projectavatar?size=medium&pid=10000&avatarId=10011"
+      },
+      "issuetypes": [
+        {
+          "self": "http://www.example.com/jira/rest/api/2/issueType/1",
+          "id": "1",
+          "description": "An error in the code",
+          "iconUrl": "http://www.example.com/jira/images/icons/issuetypes/bug.png",
+          "name": "Bug",
+          "subtask": false,
+          "fields": {
+            "issuetype": {
+              "required": true,
+              "name": "Issue Type",
+              "key": "issuetype",
+              "hasDefaultValue": false,
+              "operations": [
+                "set"
+              ]
+            }
+          }
+        }
+      ]
+    }
+  ]
+}
+"""
+
+
+class MockJiraApiClient(object):
+    def get_create_meta(self, project=None):
+        return json.loads(SAMPLE_CREATE_META_RESPONSE)
+
+
+class JiraIntegrationTest(APITestCase):
+    def test_get_create_issue_config(self):
+        org = self.organization
+        self.login_as(self.user)
+        group = self.create_group()
+        self.create_event(group=group)
+
+        integration = Integration.objects.create(
+            provider='jira',
+            name='Example JIRA',
+        )
+        integration.add_organization(org.id)
+
+        installation = integration.get_installation()
+
+        def get_client():
+            return MockJiraApiClient()
+
+        with mock.patch.object(installation, 'get_client', get_client):
+            assert installation.get_create_issue_config(group) == [{
+                'default': 'EX',
+                'choices': ('EX', 'EX'),
+                'type': 'select',
+                'name': 'project',
+                'label': 'Jira Project',
+            }, {
+                'default': 'message',
+                'type': 'string',
+                'name': 'title',
+                'label': 'Title',
+            }, {
+                'default': ('%s\n\n```\n'
+                            'Stacktrace (most recent call last):\n\n  '
+                            'File "sentry/models/foo.py", line 29, in build_msg\n    '
+                            'string_max_length=self.string_max_length)\n\nmessage\n```'
+                            ) % (absolute_uri(group.get_absolute_url()),),
+                'type': 'textarea',
+                'name': 'description',
+                'label': 'Description',
+            }, {
+                'default': '1',
+                'choices': [('1', 'Bug')],
+                'type': 'select',
+                'name': 'issuetype',
+                'label': 'Issue Type'
+            }]
 
 
 class JiraSearchEndpointTest(APITestCase):
