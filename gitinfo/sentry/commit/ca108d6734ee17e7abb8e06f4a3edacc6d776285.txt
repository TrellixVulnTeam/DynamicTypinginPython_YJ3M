commit ca108d6734ee17e7abb8e06f4a3edacc6d776285
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Dec 19 12:25:20 2017 -0800

    ref: es6 components (#6793)
    
    * ref(ui): Convert components to es6 and purerendermixin to React purecomponent
    
    Currently excludes components with mixins

diff --git a/src/sentry/static/sentry/app/components/activity/item.jsx b/src/sentry/static/sentry/app/components/activity/item.jsx
index edcdc3cf21..6864e99793 100644
--- a/src/sentry/static/sentry/app/components/activity/item.jsx
+++ b/src/sentry/static/sentry/app/components/activity/item.jsx
@@ -13,26 +13,22 @@ import Version from '../../components/version';
 
 import {t, tn, tct} from '../../locale';
 
-const ActivityItem = React.createClass({
-  propTypes: {
+class ActivityItem extends React.Component {
+  static propTypes = {
     clipHeight: PropTypes.number,
     defaultClipped: PropTypes.bool,
     item: PropTypes.object.isRequired,
     orgId: PropTypes.string.isRequired,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      defaultClipped: false,
-      clipHeight: 68,
-    };
-  },
+  static defaultProps = {
+    defaultClipped: false,
+    clipHeight: 68,
+  };
 
-  getInitialState() {
-    return {
-      clipped: this.props.defaultClipped,
-    };
-  },
+  state = {
+    clipped: this.props.defaultClipped,
+  };
 
   componentDidMount() {
     if (this.refs.activityBubble) {
@@ -47,9 +43,9 @@ const ActivityItem = React.createClass({
         });
       }
     }
-  },
+  }
 
-  formatProjectActivity(author, item) {
+  formatProjectActivity = (author, item) => {
     let data = item.data;
     let orgId = this.props.orgId;
     let project = item.project;
@@ -264,7 +260,7 @@ const ActivityItem = React.createClass({
       default:
         return ''; // should never hit (?)
     }
-  },
+  };
 
   render() {
     let item = this.props.item;
@@ -361,7 +357,7 @@ const ActivityItem = React.createClass({
         </li>
       );
     }
-  },
-});
+  }
+}
 
 export default ActivityItem;
diff --git a/src/sentry/static/sentry/app/components/activity/note.jsx b/src/sentry/static/sentry/app/components/activity/note.jsx
index 5f0a7466ae..9ddf5662f6 100644
--- a/src/sentry/static/sentry/app/components/activity/note.jsx
+++ b/src/sentry/static/sentry/app/components/activity/note.jsx
@@ -7,18 +7,18 @@ import LinkWithConfirmation from '../../components/linkWithConfirmation';
 import {t} from '../../locale';
 import marked from '../../utils/marked';
 
-const Note = React.createClass({
-  propTypes: {
+class Note extends React.Component {
+  static propTypes = {
     author: PropTypes.object.isRequired,
     item: PropTypes.object.isRequired,
     onEdit: PropTypes.func.isRequired,
     onDelete: PropTypes.func.isRequired,
-  },
+  };
 
-  canEdit() {
+  canEdit = () => {
     let user = ConfigStore.get('user');
     return user.isSuperuser || user.id === this.props.item.user.id;
-  },
+  };
 
   render() {
     let {item, author, onEdit, onDelete} = this.props;
@@ -45,7 +45,7 @@ const Note = React.createClass({
         <div dangerouslySetInnerHTML={{__html: noteBody}} />
       </div>
     );
-  },
-});
+  }
+}
 
 export default Note;
diff --git a/src/sentry/static/sentry/app/components/activity/noteContainer.jsx b/src/sentry/static/sentry/app/components/activity/noteContainer.jsx
index 3cb37c2e37..75b982c915 100644
--- a/src/sentry/static/sentry/app/components/activity/noteContainer.jsx
+++ b/src/sentry/static/sentry/app/components/activity/noteContainer.jsx
@@ -4,33 +4,31 @@ import React from 'react';
 import Note from './note';
 import NoteInput from './noteInput';
 
-const NoteContainer = React.createClass({
-  propTypes: {
+class NoteContainer extends React.Component {
+  static propTypes = {
     group: PropTypes.object.isRequired,
     item: PropTypes.object.isRequired,
     author: PropTypes.object.isRequired,
     onDelete: PropTypes.func.isRequired,
     sessionUser: PropTypes.object.isRequired,
     memberList: PropTypes.array.isRequired,
-  },
+  };
 
-  getInitialState() {
-    return {
-      editing: false,
-    };
-  },
+  state = {
+    editing: false,
+  };
 
-  onEdit() {
+  onEdit = () => {
     this.setState({editing: true});
-  },
+  };
 
-  onFinish() {
+  onFinish = () => {
     this.setState({editing: false});
-  },
+  };
 
-  onDelete() {
+  onDelete = () => {
     this.props.onDelete(this.props.item);
-  },
+  };
 
   render() {
     let {group, item, author, sessionUser, memberList} = this.props;
@@ -58,7 +56,7 @@ const NoteContainer = React.createClass({
         </div>
       </li>
     );
-  },
-});
+  }
+}
 
 export default NoteContainer;
diff --git a/src/sentry/static/sentry/app/components/alertMessage.jsx b/src/sentry/static/sentry/app/components/alertMessage.jsx
index 6a6b802597..6325072e2e 100644
--- a/src/sentry/static/sentry/app/components/alertMessage.jsx
+++ b/src/sentry/static/sentry/app/components/alertMessage.jsx
@@ -1,27 +1,24 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import PureRenderMixin from 'react-addons-pure-render-mixin';
 
 import AlertActions from '../actions/alertActions';
 import {t} from '../locale';
 
-const AlertMessage = React.createClass({
-  propTypes: {
+export default class AlertMessage extends React.PureComponent {
+  static propTypes = {
     alert: PropTypes.shape({
       id: PropTypes.string,
       message: PropTypes.string.isRequired,
       type: PropTypes.oneOf(['success', 'error', 'warning']),
       url: PropTypes.string,
     }),
-  },
+  };
 
-  mixins: [PureRenderMixin],
-
-  closeAlert: function() {
+  closeAlert = () => {
     AlertActions.closeAlert(this.props.alert);
-  },
+  };
 
-  render: function() {
+  render = () => {
     let className = 'alert';
     if (this.props.alert.type !== '') {
       className += ' alert-' + this.props.alert.type;
@@ -47,7 +44,5 @@ const AlertMessage = React.createClass({
         </div>
       </div>
     );
-  },
-});
-
-export default AlertMessage;
+  };
+}
diff --git a/src/sentry/static/sentry/app/components/autoSelectText.jsx b/src/sentry/static/sentry/app/components/autoSelectText.jsx
index 46cc345a8e..0eb1f67697 100644
--- a/src/sentry/static/sentry/app/components/autoSelectText.jsx
+++ b/src/sentry/static/sentry/app/components/autoSelectText.jsx
@@ -4,21 +4,21 @@ import jQuery from 'jquery';
 
 import {selectText} from '../utils/selectText';
 
-const AutoSelectText = React.createClass({
+class AutoSelectText extends React.Component {
   componentDidMount() {
     let ref = ReactDOM.findDOMNode(this.refs.element);
     jQuery(ref).bind('click', this.selectText);
-  },
+  }
 
   componentWillUnmount() {
     let ref = ReactDOM.findDOMNode(this.refs.element);
     jQuery(ref).unbind('click', this.selectText);
-  },
+  }
 
-  selectText() {
+  selectText = () => {
     let node = ReactDOM.findDOMNode(this.refs.element).firstChild;
     selectText(node);
-  },
+  };
 
   render() {
     let {className, children, style} = this.props;
@@ -28,7 +28,7 @@ const AutoSelectText = React.createClass({
         {children}
       </div>
     );
-  },
-});
+  }
+}
 
 export default AutoSelectText;
diff --git a/src/sentry/static/sentry/app/components/avatar.jsx b/src/sentry/static/sentry/app/components/avatar.jsx
index 972010b5b5..4338e6244f 100644
--- a/src/sentry/static/sentry/app/components/avatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar.jsx
@@ -5,31 +5,27 @@ import MD5 from 'crypto-js/md5';
 import ConfigStore from '../stores/configStore';
 import UserLetterAvatar from '../components/userLetterAvatar';
 
-const Avatar = React.createClass({
-  propTypes: {
+class Avatar extends React.Component {
+  static propTypes = {
     user: PropTypes.object,
     size: PropTypes.number,
     default: PropTypes.string,
     title: PropTypes.string,
     gravatar: PropTypes.bool,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      className: 'avatar',
-      size: 64,
-      gravatar: true,
-    };
-  },
+  static defaultProps = {
+    className: 'avatar',
+    size: 64,
+    gravatar: true,
+  };
 
-  getInitialState() {
-    return {
-      showBackupAvatar: false,
-      loadError: false,
-    };
-  },
+  state = {
+    showBackupAvatar: false,
+    loadError: false,
+  };
 
-  buildGravatarUrl() {
+  buildGravatarUrl = () => {
     let url = ConfigStore.getConfig().gravatarBaseUrl + '/avatar/';
 
     url += MD5(this.props.user.email.toLowerCase());
@@ -42,25 +38,25 @@ const Avatar = React.createClass({
     url += '?' + $.param(query);
 
     return url;
-  },
+  };
 
-  buildProfileUrl() {
+  buildProfileUrl = () => {
     let url = '/avatar/' + this.props.user.avatar.avatarUuid + '/';
     if (this.props.size) {
       url += '?' + $.param({s: this.props.size});
     }
     return url;
-  },
+  };
 
-  onLoad() {
+  onLoad = () => {
     this.setState({showBackupAvatar: true});
-  },
+  };
 
-  onError() {
+  onError = () => {
     this.setState({showBackupAvatar: true, loadError: true});
-  },
+  };
 
-  renderImg() {
+  renderImg = () => {
     if (this.state.loadError) {
       return null;
     }
@@ -86,7 +82,7 @@ const Avatar = React.createClass({
     } else {
       return <UserLetterAvatar user={user} />;
     }
-  },
+  };
 
   render() {
     let user = this.props.user;
@@ -100,7 +96,7 @@ const Avatar = React.createClass({
         {this.renderImg()}
       </span>
     );
-  },
-});
+  }
+}
 
 export default Avatar;
diff --git a/src/sentry/static/sentry/app/components/avatarCropper.jsx b/src/sentry/static/sentry/app/components/avatarCropper.jsx
index 6486851bc0..289620eab0 100644
--- a/src/sentry/static/sentry/app/components/avatarCropper.jsx
+++ b/src/sentry/static/sentry/app/components/avatarCropper.jsx
@@ -4,36 +4,33 @@ import React from 'react';
 import AlertActions from '../actions/alertActions';
 import {t} from '../locale';
 
-const AvatarCropper = React.createClass({
-  propTypes: {
+class AvatarCropper extends React.Component {
+  static propTypes = {
     user: PropTypes.object.isRequired,
     updateDataUrlState: PropTypes.func.isRequired,
     savedDataUrl: PropTypes.string,
-  },
-
-  getInitialState() {
-    return {
-      mousePosition: {
-        pageX: null,
-        pageY: null,
-      },
-      resizeDimensions: {
-        top: 0,
-        left: 0,
-        size: 0,
-      },
-    };
-  },
+  };
+
+  state = {
+    mousePosition: {
+      pageX: null,
+      pageY: null,
+    },
+    resizeDimensions: {
+      top: 0,
+      left: 0,
+      size: 0,
+    },
+  };
 
   componentWillUnmount() {
     this.revokeObjectUrl();
-  },
-
-  MIN_DIMENSION: 256,
+  }
 
-  MAX_DIMENSION: 1024,
+  MIN_DIMENSION = 256;
+  MAX_DIMENSION = 1024;
 
-  onChange(ev) {
+  onChange = ev => {
     /*eslint consistent-return:0*/
     let file = ev.target.files[0];
 
@@ -52,13 +49,13 @@ const AvatarCropper = React.createClass({
         this.props.updateDataUrlState({savedDataUrl: null});
       }
     );
-  },
+  };
 
-  revokeObjectUrl() {
+  revokeObjectUrl = () => {
     this.state.objectURL && window.URL.revokeObjectURL(this.state.objectURL);
-  },
+  };
 
-  updateDimensions(ev) {
+  updateDimensions = ev => {
     let $container = $(this.refs.cropContainer);
     let resizeDimensions = this.state.resizeDimensions;
     let pageY = ev.pageY;
@@ -83,20 +80,20 @@ const AvatarCropper = React.createClass({
       resizeDimensions: Object.assign({}, resizeDimensions, {top, left}),
       mousePosition: {pageX, pageY},
     });
-  },
+  };
 
-  startMove() {
+  startMove = () => {
     $(document).on('mousemove', this.updateDimensions);
     $(document).on('mouseup', this.onMouseUp);
-  },
+  };
 
-  stopMove() {
+  stopMove = () => {
     $(document).off('mousemove', this.updateDimensions);
     $(document).off('mouseup', this.onMouseUp);
     this.drawToCanvas();
-  },
+  };
 
-  onMouseDown(ev) {
+  onMouseDown = ev => {
     ev.preventDefault();
     this.setState({
       mousePosition: {
@@ -105,14 +102,14 @@ const AvatarCropper = React.createClass({
       },
     });
     this.startMove();
-  },
+  };
 
-  onMouseUp(ev) {
+  onMouseUp = ev => {
     ev.preventDefault();
     this.stopMove();
-  },
+  };
 
-  startResize(direction, ev) {
+  startResize = (direction, ev) => {
     ev.stopPropagation();
     ev.preventDefault();
     $(document).on('mousemove', this.updateSize);
@@ -124,17 +121,17 @@ const AvatarCropper = React.createClass({
         pageX: ev.pageX,
       },
     });
-  },
+  };
 
-  stopResize(ev) {
+  stopResize = ev => {
     ev.stopPropagation();
     ev.preventDefault();
     $(document).off('mousemove', this.updateSize);
     $(document).off('mouseup', this.stopResize);
     this.drawToCanvas();
-  },
+  };
 
-  updateSize(ev) {
+  updateSize = ev => {
     let yDiff = ev.pageY - this.state.mousePosition.pageY;
     let xDiff = ev.pageX - this.state.mousePosition.pageX;
     let $container = $(this.refs.cropContainer);
@@ -143,28 +140,28 @@ const AvatarCropper = React.createClass({
       resizeDimensions: this.getNewDimensions($container, yDiff, xDiff),
       mousePosition: {pageX: ev.pageX, pageY: ev.pageY},
     });
-  },
+  };
 
   // Normalize diff accross dimensions so that negative diffs
   // are always making the cropper smaller and positive ones
   // are making the cropper larger
-  getDiffNW(yDiff, xDiff) {
+  getDiffNW = (yDiff, xDiff) => {
     return (yDiff - yDiff * 2 + (xDiff - xDiff * 2)) / 2;
-  },
+  };
 
-  getDiffNE(yDiff, xDiff) {
+  getDiffNE = (yDiff, xDiff) => {
     return (yDiff - yDiff * 2 + xDiff) / 2;
-  },
+  };
 
-  getDiffSW(yDiff, xDiff) {
+  getDiffSW = (yDiff, xDiff) => {
     return (yDiff + (xDiff - xDiff * 2)) / 2;
-  },
+  };
 
-  getDiffSE(yDiff, xDiff) {
+  getDiffSE = (yDiff, xDiff) => {
     return (yDiff + xDiff) / 2;
-  },
+  };
 
-  getNewDimensions($container, yDiff, xDiff) {
+  getNewDimensions = ($container, yDiff, xDiff) => {
     let oldDimensions = this.state.resizeDimensions;
     let resizeDirection = this.state.resizeDirection;
     let diff = this['getDiff' + resizeDirection.toUpperCase()](yDiff, xDiff);
@@ -225,16 +222,16 @@ const AvatarCropper = React.createClass({
       newDimensions.size = this.MIN_DIMENSION;
     }
     return Object.assign({}, oldDimensions, newDimensions);
-  },
+  };
 
-  handleError(msg) {
+  handleError = msg => {
     AlertActions.addAlert({
       message: t(msg),
       type: 'error',
     });
-  },
+  };
 
-  validateImage() {
+  validateImage = () => {
     let img = this.refs.image;
     if (img.naturalWidth < this.MIN_DIMENSION || img.naturalHeight < this.MIN_DIMENSION) {
       return (
@@ -254,9 +251,9 @@ const AvatarCropper = React.createClass({
         'px.'
       );
     }
-  },
+  };
 
-  onLoad(ev) {
+  onLoad = ev => {
     let error = this.validateImage();
     if (error) {
       window.URL.revokeObjectURL(this.state.objectURL);
@@ -272,9 +269,9 @@ const AvatarCropper = React.createClass({
       },
       this.drawToCanvas
     );
-  },
+  };
 
-  drawToCanvas() {
+  drawToCanvas = () => {
     let canvas = this.refs.canvas;
     let resizeDimensions = this.state.resizeDimensions;
     let img = this.refs.image;
@@ -297,24 +294,24 @@ const AvatarCropper = React.createClass({
         resizeDimensions.size * imgRatio
       );
     this.finishCrop();
-  },
+  };
 
-  finishCrop() {
+  finishCrop = () => {
     let canvas = this.refs.canvas;
     this.props.updateDataUrlState({dataUrl: canvas.toDataURL()});
-  },
+  };
 
-  getImgSrc() {
+  getImgSrc = () => {
     let uuid = this.props.user.avatar.avatarUuid;
     let photoUrl = uuid && '/avatar/' + uuid + '/';
     return this.props.savedDataUrl || this.state.objectURL || photoUrl;
-  },
+  };
 
-  onImgDrag(ev) {
+  onImgDrag = ev => {
     ev.preventDefault();
-  },
+  };
 
-  renderImageCrop() {
+  renderImageCrop = () => {
     let src = this.getImgSrc();
     if (!src) {
       return null;
@@ -347,14 +344,14 @@ const AvatarCropper = React.createClass({
         </div>
       </div>
     );
-  },
+  };
 
-  uploadClick(ev) {
+  uploadClick = ev => {
     ev.preventDefault();
     this.refs.file.click();
-  },
+  };
 
-  renderCanvas() {
+  renderCanvas = () => {
     if (!this.getImgSrc()) {
       return null;
     }
@@ -363,7 +360,7 @@ const AvatarCropper = React.createClass({
         <canvas ref="canvas" />
       </div>
     );
-  },
+  };
 
   render() {
     let src = this.getImgSrc();
@@ -397,7 +394,7 @@ const AvatarCropper = React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
 
 export default AvatarCropper;
diff --git a/src/sentry/static/sentry/app/components/badge.jsx b/src/sentry/static/sentry/app/components/badge.jsx
index 3dbab17c36..30d47f5987 100644
--- a/src/sentry/static/sentry/app/components/badge.jsx
+++ b/src/sentry/static/sentry/app/components/badge.jsx
@@ -1,11 +1,11 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
-const Badge = React.createClass({
-  propTypes: {
+class Badge extends React.Component {
+  static propTypes = {
     text: PropTypes.string,
     isNew: PropTypes.bool,
-  },
+  };
 
   render() {
     let className = 'badge';
@@ -13,7 +13,7 @@ const Badge = React.createClass({
       className += ' new';
     }
     return <span className={className}>{this.props.text}</span>;
-  },
-});
+  }
+}
 
 export default Badge;
diff --git a/src/sentry/static/sentry/app/components/barChart.jsx b/src/sentry/static/sentry/app/components/barChart.jsx
index 7a1188a27a..da08cd6150 100644
--- a/src/sentry/static/sentry/app/components/barChart.jsx
+++ b/src/sentry/static/sentry/app/components/barChart.jsx
@@ -2,8 +2,8 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import StackedBarChart from '../components/stackedBarChart';
 
-const BarChart = React.createClass({
-  propTypes: {
+class BarChart extends React.Component {
+  static propTypes = {
     points: PropTypes.arrayOf(
       PropTypes.shape({
         x: PropTypes.number.isRequired,
@@ -22,13 +22,11 @@ const BarChart = React.createClass({
         label: PropTypes.string,
       })
     ),
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      points: [],
-    };
-  },
+  static defaultProps = {
+    points: [],
+  };
 
   render() {
     let points = this.props.points.map(point => {
@@ -36,7 +34,7 @@ const BarChart = React.createClass({
     });
     let props = Object.assign({}, this.props, {points});
     return <StackedBarChart {...props} />;
-  },
-});
+  }
+}
 
 export default BarChart;
diff --git a/src/sentry/static/sentry/app/components/buttons/button.jsx b/src/sentry/static/sentry/app/components/buttons/button.jsx
index c91bd2d572..bf9880ec77 100644
--- a/src/sentry/static/sentry/app/components/buttons/button.jsx
+++ b/src/sentry/static/sentry/app/components/buttons/button.jsx
@@ -7,8 +7,8 @@ import FlowLayout from '../flowLayout';
 
 import '../../../less/components/button.less';
 
-const Button = React.createClass({
-  propTypes: {
+class Button extends React.Component {
+  static propTypes = {
     priority: PropTypes.oneOf(['primary', 'danger', 'link']),
     size: PropTypes.oneOf(['small', 'xsmall', 'large']),
     disabled: PropTypes.bool,
@@ -27,16 +27,14 @@ const Button = React.createClass({
     title: PropTypes.string,
     borderless: PropTypes.bool,
     onClick: PropTypes.func,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      disabled: false,
-    };
-  },
+  static defaultProps = {
+    disabled: false,
+  };
 
   // Intercept onClick and propagate
-  handleClick(...args) {
+  handleClick = (...args) => {
     let {disabled, busy, onClick} = this.props;
 
     // Don't allow clicks when disabled or busy
@@ -45,13 +43,13 @@ const Button = React.createClass({
     if (typeof onClick !== 'function') return;
 
     onClick(...args);
-  },
+  };
 
-  getUrl() {
+  getUrl = () => {
     let {disabled, to, href} = this.props;
     if (disabled) return null;
     return to || href;
-  },
+  };
 
   render() {
     let {
@@ -126,7 +124,7 @@ const Button = React.createClass({
 
     // Otherwise, fall back to basic button element
     return <button {...componentProps} />;
-  },
-});
+  }
+}
 
 export default Button;
diff --git a/src/sentry/static/sentry/app/components/checkbox.jsx b/src/sentry/static/sentry/app/components/checkbox.jsx
index ea9a6112bf..8fff7fceef 100644
--- a/src/sentry/static/sentry/app/components/checkbox.jsx
+++ b/src/sentry/static/sentry/app/components/checkbox.jsx
@@ -1,18 +1,16 @@
 import React from 'react';
 import classNames from 'classnames';
 
-const Checkbox = React.createClass({
-  getDefaultProps() {
-    return {
-      checked: false,
-    };
-  },
+class Checkbox extends React.Component {
+  static defaultProps = {
+    checked: false,
+  };
 
   render() {
     let {className, ...otherProps} = this.props;
     let cx = classNames('chk-select', className);
     return <input type="checkbox" className={cx} {...otherProps} />;
-  },
-});
+  }
+}
 
 export default Checkbox;
diff --git a/src/sentry/static/sentry/app/components/clippedBox.jsx b/src/sentry/static/sentry/app/components/clippedBox.jsx
index 7e459365e6..937fb87bb1 100644
--- a/src/sentry/static/sentry/app/components/clippedBox.jsx
+++ b/src/sentry/static/sentry/app/components/clippedBox.jsx
@@ -3,31 +3,27 @@ import React from 'react';
 import ReactDOM from 'react-dom';
 import {t} from '../locale';
 
-const ClippedBox = React.createClass({
-  propTypes: {
+class ClippedBox extends React.Component {
+  static propTypes = {
     title: PropTypes.string,
     defaultClipped: PropTypes.bool,
     clipHeight: PropTypes.number,
     btnClassName: PropTypes.string,
     btnText: PropTypes.string,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      defaultClipped: false,
-      clipHeight: 200,
-      renderedHeight: null,
-      btnClassName: 'btn btn-primary btn-xs show-more',
-      btnText: t('Show More'),
-    };
-  },
+  static defaultProps = {
+    defaultClipped: false,
+    clipHeight: 200,
+    renderedHeight: null,
+    btnClassName: 'btn btn-primary btn-xs show-more',
+    btnText: t('Show More'),
+  };
 
-  getInitialState() {
-    return {
-      clipped: this.props.defaultClipped,
-      revealed: false, // True once user has clicked "Show More" button
-    };
-  },
+  state = {
+    clipped: this.props.defaultClipped,
+    revealed: false, // True once user has clicked "Show More" button
+  };
 
   componentDidMount() {
     let renderedHeight = ReactDOM.findDOMNode(this).offsetHeight;
@@ -40,16 +36,16 @@ const ClippedBox = React.createClass({
         clipped: true,
       });
     }
-  },
+  }
 
-  reveal(e) {
+  reveal = e => {
     e.stopPropagation();
 
     this.setState({
       clipped: false,
       revealed: true,
     });
-  },
+  };
 
   render() {
     let className = 'box-clippable';
@@ -77,7 +73,7 @@ const ClippedBox = React.createClass({
         )}
       </div>
     );
-  },
-});
+  }
+}
 
 export default ClippedBox;
diff --git a/src/sentry/static/sentry/app/components/confirms/numberConfirm.jsx b/src/sentry/static/sentry/app/components/confirms/numberConfirm.jsx
index ffb15b7553..06c81b4048 100644
--- a/src/sentry/static/sentry/app/components/confirms/numberConfirm.jsx
+++ b/src/sentry/static/sentry/app/components/confirms/numberConfirm.jsx
@@ -4,18 +4,16 @@ import ReactCodeInput from 'react-code-input';
 import Modal from 'react-bootstrap/lib/Modal';
 import {t} from '../../locale';
 
-const NumberConfirm = React.createClass({
-  propTypes: {
+class NumberConfirm extends React.Component {
+  static propTypes = {
     digits: PropTypes.number.isRequired,
     show: PropTypes.bool,
     onFinished: PropTypes.func,
-  },
+  };
 
-  getInitialState() {
-    return {
-      showModal: this.props.show || false,
-    };
-  },
+  state = {
+    showModal: this.props.show || false,
+  };
 
   componentWillReceiveProps(nextProps) {
     if (nextProps.show != this.props.show) {
@@ -23,15 +21,15 @@ const NumberConfirm = React.createClass({
         showModal: nextProps.show,
       });
     }
-  },
+  }
 
-  closeModal() {
+  closeModal = () => {
     this.setState({
       showModal: false,
     });
-  },
+  };
 
-  onChange(number) {
+  onChange = number => {
     if (number === undefined && !Number.isInteger(number)) {
       return;
     }
@@ -41,7 +39,7 @@ const NumberConfirm = React.createClass({
       }
       this.closeModal();
     }
-  },
+  };
 
   render() {
     return (
@@ -65,7 +63,7 @@ const NumberConfirm = React.createClass({
         </Modal.Body>
       </Modal>
     );
-  },
-});
+  }
+}
 
 export default NumberConfirm;
diff --git a/src/sentry/static/sentry/app/components/customIgnoreCountModal.jsx b/src/sentry/static/sentry/app/components/customIgnoreCountModal.jsx
index f884406301..66e1fe83d7 100644
--- a/src/sentry/static/sentry/app/components/customIgnoreCountModal.jsx
+++ b/src/sentry/static/sentry/app/components/customIgnoreCountModal.jsx
@@ -4,8 +4,8 @@ import Modal from 'react-bootstrap/lib/Modal';
 import {Select2Field} from './forms';
 import {t} from '../locale';
 
-export default React.createClass({
-  propTypes: {
+export default class CustomIgnoreCountModal extends React.Component {
+  static propTypes = {
     onSelected: PropTypes.func,
     onCanceled: PropTypes.func,
     show: PropTypes.bool,
@@ -14,25 +14,23 @@ export default React.createClass({
     countName: PropTypes.string.isRequired,
     windowName: PropTypes.string.isRequired,
     windowChoices: PropTypes.array.isRequired,
-  },
+  };
 
-  getInitialState() {
-    return {
-      count: 100,
-      window: '',
-    };
-  },
+  state = {
+    count: 100,
+    window: '',
+  };
 
-  onSubmit() {
+  onSubmit = () => {
     this.props.onSelected({
       [this.props.countName]: this.state.count,
       [this.props.windowName]: this.state.window,
     });
-  },
+  };
 
-  onChange(name, value) {
+  onChange = (name, value) => {
     this.setState({[name]: value});
-  },
+  };
 
   render() {
     let {count, window} = this.state;
@@ -87,5 +85,5 @@ export default React.createClass({
         </div>
       </Modal>
     );
-  },
-});
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/customIgnoreDurationModal.jsx b/src/sentry/static/sentry/app/components/customIgnoreDurationModal.jsx
index ec0477bf65..73beb2180d 100644
--- a/src/sentry/static/sentry/app/components/customIgnoreDurationModal.jsx
+++ b/src/sentry/static/sentry/app/components/customIgnoreDurationModal.jsx
@@ -5,27 +5,23 @@ import {sprintf} from 'sprintf-js';
 
 import {t} from '../locale';
 
-export default React.createClass({
-  propTypes: {
+export default class CustomIgnoreDurationModal extends React.Component {
+  static propTypes = {
     onSelected: PropTypes.func,
     onCanceled: PropTypes.func,
     show: PropTypes.bool,
     label: PropTypes.string,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      label: t('Ignore this issue until it occurs after ..'),
-    };
-  },
+  static defaultProps = {
+    label: t('Ignore this issue until it occurs after ..'),
+  };
 
-  getInitialState() {
-    return {
-      dateWarning: false,
-    };
-  },
+  state = {
+    dateWarning: false,
+  };
 
-  selectedIgnoreMinutes() {
+  selectedIgnoreMinutes = () => {
     const dateStr = this.refs.snoozeDateInput.value; // YYYY-MM-DD
     const timeStr = this.refs.snoozeTimeInput.value; // HH:MM
     if (dateStr && timeStr) {
@@ -38,9 +34,9 @@ export default React.createClass({
       }
     }
     return 0;
-  },
+  };
 
-  snoozeClicked() {
+  snoozeClicked = () => {
     const minutes = this.selectedIgnoreMinutes();
 
     this.setState({
@@ -50,7 +46,7 @@ export default React.createClass({
     if (minutes > 0) {
       this.props.onSelected({ignoreDuration: minutes});
     }
-  },
+  };
 
   render() {
     // Give the user a sane starting point to select a date
@@ -121,5 +117,5 @@ export default React.createClass({
         </div>
       </Modal>
     );
-  },
-});
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/customResolutionModal.jsx b/src/sentry/static/sentry/app/components/customResolutionModal.jsx
index b69df37f48..ce5c4bafb8 100644
--- a/src/sentry/static/sentry/app/components/customResolutionModal.jsx
+++ b/src/sentry/static/sentry/app/components/customResolutionModal.jsx
@@ -11,35 +11,33 @@ import Version from './version';
 import {Select2FieldAutocomplete} from './forms';
 import {t} from '../locale';
 
-export default React.createClass({
-  propTypes: {
+export default class CustomResolutionModal extends React.Component {
+  static propTypes = {
     onSelected: PropTypes.func.isRequired,
     onCanceled: PropTypes.func.isRequired,
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
     show: PropTypes.bool,
-  },
+  };
 
-  getInitialState() {
-    return {version: ''};
-  },
+  state = {version: ''};
 
   componentDidUpdate(prevProps, prevState) {
     if (!prevProps.show && this.props.show) {
       // XXX(cramer): this is incorrect but idgaf
       jQuery('.modal').attr('tabindex', null);
     }
-  },
+  }
 
-  onSubmit() {
+  onSubmit = () => {
     this.props.onSelected({
       inRelease: this.state.version,
     });
-  },
+  };
 
-  onChange(value) {
+  onChange = value => {
     this.setState({version: value});
-  },
+  };
 
   render() {
     let {orgId, projectId} = this.props;
@@ -100,5 +98,5 @@ export default React.createClass({
         </div>
       </Modal>
     );
-  },
-});
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/dateTime.jsx b/src/sentry/static/sentry/app/components/dateTime.jsx
index 987a401b5a..87c0e68963 100644
--- a/src/sentry/static/sentry/app/components/dateTime.jsx
+++ b/src/sentry/static/sentry/app/components/dateTime.jsx
@@ -5,20 +5,18 @@ import _ from 'lodash';
 
 import ConfigStore from '../stores/configStore';
 
-const DateTime = React.createClass({
-  propTypes: {
+class DateTime extends React.Component {
+  static propTypes = {
     date: PropTypes.any.isRequired,
     dateOnly: PropTypes.bool,
     seconds: PropTypes.bool,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      seconds: true,
-    };
-  },
+  static defaultProps = {
+    seconds: true,
+  };
 
-  getFormat({clock24Hours}) {
+  getFormat = ({clock24Hours}) => {
     let {dateOnly, seconds} = this.props;
 
     // October 26, 2017
@@ -37,7 +35,7 @@ const DateTime = React.createClass({
 
     // Default is Oct 26, 2017 11:30 AM
     return 'lll';
-  },
+  };
 
   render() {
     let {
@@ -57,7 +55,7 @@ const DateTime = React.createClass({
     return (
       <time {...carriedProps}>{moment.tz(date, options.timezome).format(format)}</time>
     );
-  },
-});
+  }
+}
 
 export default DateTime;
diff --git a/src/sentry/static/sentry/app/components/errors/detailedError.jsx b/src/sentry/static/sentry/app/components/errors/detailedError.jsx
index 4ba3df8f53..12b446c9a7 100644
--- a/src/sentry/static/sentry/app/components/errors/detailedError.jsx
+++ b/src/sentry/static/sentry/app/components/errors/detailedError.jsx
@@ -5,8 +5,8 @@ import classNames from 'classnames';
 import {t} from '../../locale';
 import IconCircleExclamation from '../../icons/icon-circle-exclamation';
 
-const DetailedError = React.createClass({
-  propTypes: {
+class DetailedError extends React.Component {
+  static propTypes = {
     className: PropTypes.string,
     /* Retry callback */
     onRetry: PropTypes.func,
@@ -16,13 +16,11 @@ const DetailedError = React.createClass({
     message: PropTypes.node,
     /* Hide support links in footer of error message */
     hideSupportLinks: PropTypes.bool,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      hideSupportLinks: false,
-    };
-  },
+  static defaultProps = {
+    hideSupportLinks: false,
+  };
 
   render() {
     const {className, heading, message, onRetry, hideSupportLinks} = this.props;
@@ -62,7 +60,7 @@ const DetailedError = React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
 
 export default DetailedError;
diff --git a/src/sentry/static/sentry/app/components/errors/notFound.jsx b/src/sentry/static/sentry/app/components/errors/notFound.jsx
index ecc357a2a4..dc4766810e 100644
--- a/src/sentry/static/sentry/app/components/errors/notFound.jsx
+++ b/src/sentry/static/sentry/app/components/errors/notFound.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {t} from '../../locale';
 
-const NotFound = React.createClass({
+class NotFound extends React.Component {
   render() {
     return (
       <div className="alert alert-block alert-error">
@@ -31,7 +31,7 @@ const NotFound = React.createClass({
         </p>
       </div>
     );
-  },
-});
+  }
+}
 
 export default NotFound;
diff --git a/src/sentry/static/sentry/app/components/eventOrGroupTitle.jsx b/src/sentry/static/sentry/app/components/eventOrGroupTitle.jsx
index 37e2dac8f8..e2b6a126cf 100644
--- a/src/sentry/static/sentry/app/components/eventOrGroupTitle.jsx
+++ b/src/sentry/static/sentry/app/components/eventOrGroupTitle.jsx
@@ -2,15 +2,15 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import {Metadata} from '../proptypes';
 
-const EventOrGroupTitle = React.createClass({
-  propTypes: {
+class EventOrGroupTitle extends React.Component {
+  static propTypes = {
     data: PropTypes.shape({
       type: PropTypes.oneOf(['error', 'csp', 'default']).isRequired,
       title: PropTypes.string,
       metadata: Metadata.isRequired,
       culprit: PropTypes.string,
     }),
-  },
+  };
 
   render() {
     let {data} = this.props;
@@ -37,7 +37,7 @@ const EventOrGroupTitle = React.createClass({
       );
     }
     return <span>{title}</span>;
-  },
-});
+  }
+}
 
 export default EventOrGroupTitle;
diff --git a/src/sentry/static/sentry/app/components/events/contextSummary.jsx b/src/sentry/static/sentry/app/components/events/contextSummary.jsx
index ebee6f6e06..99edee779e 100644
--- a/src/sentry/static/sentry/app/components/events/contextSummary.jsx
+++ b/src/sentry/static/sentry/app/components/events/contextSummary.jsx
@@ -14,10 +14,10 @@ const generateClassName = function(name) {
     .replace(/\-+$/, '');
 };
 
-const NoSummary = React.createClass({
-  propTypes: {
+class NoSummary extends React.Component {
+  static propTypes = {
     title: PropTypes.string.isRequired,
-  },
+  };
 
   render() {
     return (
@@ -26,14 +26,14 @@ const NoSummary = React.createClass({
         <h3>{this.props.title}</h3>
       </div>
     );
-  },
-});
+  }
+}
 
-const GenericSummary = React.createClass({
-  propTypes: {
+class GenericSummary extends React.Component {
+  static propTypes = {
     data: PropTypes.object.isRequired,
     unknownTitle: PropTypes.string.isRequired,
-  },
+  };
 
   render() {
     let data = this.props.data;
@@ -53,13 +53,13 @@ const GenericSummary = React.createClass({
         </p>
       </div>
     );
-  },
-});
+  }
+}
 
-const UserSummary = React.createClass({
-  propTypes: {
+class UserSummary extends React.Component {
+  static propTypes = {
     data: PropTypes.object.isRequired,
-  },
+  };
 
   render() {
     let user = this.props.data;
@@ -96,13 +96,13 @@ const UserSummary = React.createClass({
         )}
       </div>
     );
-  },
-});
+  }
+}
 
-const DeviceSummary = React.createClass({
-  propTypes: {
+class DeviceSummary extends React.Component {
+  static propTypes = {
     data: PropTypes.object.isRequired,
-  },
+  };
 
   render() {
     let data = this.props.data;
@@ -121,14 +121,14 @@ const DeviceSummary = React.createClass({
         <p>{data.arch || data.model_id || ''}</p>
       </div>
     );
-  },
-});
+  }
+}
 
-const EventContextSummary = React.createClass({
-  propTypes: {
+class EventContextSummary extends React.Component {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
-  },
+  };
 
   render() {
     let evt = this.props.event;
@@ -187,7 +187,7 @@ const EventContextSummary = React.createClass({
     }
 
     return <div className="context-summary">{children}</div>;
-  },
-});
+  }
+}
 
 export default EventContextSummary;
diff --git a/src/sentry/static/sentry/app/components/events/contexts.jsx b/src/sentry/static/sentry/app/components/events/contexts.jsx
index bccd28bdd3..32e3453722 100644
--- a/src/sentry/static/sentry/app/components/events/contexts.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts.jsx
@@ -30,32 +30,30 @@ function getSourcePlugin(pluginContexts, contextType) {
   return null;
 }
 
-const ContextChunk = React.createClass({
-  propTypes: {
+class ContextChunk extends React.Component {
+  static propTypes = {
     event: PropTypes.object.isRequired,
     group: PropTypes.object.isRequired,
     type: PropTypes.string.isRequired,
     alias: PropTypes.string.isRequired,
     value: PropTypes.object.isRequired,
-  },
+  };
 
-  getInitialState() {
-    return {
-      isLoading: false,
-    };
-  },
+  state = {
+    isLoading: false,
+  };
 
   componentWillMount() {
     this.syncPlugin();
-  },
+  }
 
   componentDidUpdate(prevProps, prevState) {
     if (prevProps.group.id != this.props.group.id || prevProps.type != this.props.type) {
       this.syncPlugin();
     }
-  },
+  }
 
-  syncPlugin() {
+  syncPlugin = () => {
     let sourcePlugin = getSourcePlugin(this.props.group.pluginContexts, this.props.type);
     if (!sourcePlugin) {
       this.setState({
@@ -73,9 +71,9 @@ const ContextChunk = React.createClass({
         }
       );
     }
-  },
+  };
 
-  renderTitle(component) {
+  renderTitle = component => {
     let {value, alias, type} = this.props;
     let title = null;
     if (defined(value.title)) {
@@ -95,7 +93,7 @@ const ContextChunk = React.createClass({
         {alias !== type ? <small>({alias})</small> : null}
       </span>
     );
-  },
+  };
 
   render() {
     // if we are currently loading the plugin, just render nothing for now.
@@ -124,14 +122,14 @@ const ContextChunk = React.createClass({
         <Component alias={alias} data={value} />
       </GroupEventDataSection>
     );
-  },
-});
+  }
+}
 
-const ContextsInterface = React.createClass({
-  propTypes: {
+class ContextsInterface extends React.Component {
+  static propTypes = {
     event: PropTypes.object.isRequired,
     group: PropTypes.object.isRequired,
-  },
+  };
 
   render() {
     let group = this.props.group;
@@ -166,7 +164,7 @@ const ContextsInterface = React.createClass({
     }
 
     return <div>{children}</div>;
-  },
-});
+  }
+}
 
 export default ContextsInterface;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/app.jsx b/src/sentry/static/sentry/app/components/events/contexts/app.jsx
index 8d7e4e80cf..0b59d1b46c 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/app.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/app.jsx
@@ -3,11 +3,11 @@ import React from 'react';
 
 import ContextBlock from './contextBlock';
 
-const AppContextType = React.createClass({
-  propTypes: {
+class AppContextType extends React.Component {
+  static propTypes = {
     alias: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
-  },
+  };
 
   render() {
     let {
@@ -37,8 +37,8 @@ const AppContextType = React.createClass({
         alias={this.props.alias}
       />
     );
-  },
-});
+  }
+}
 
 AppContextType.getTitle = function(value) {
   return 'App';
diff --git a/src/sentry/static/sentry/app/components/events/contexts/contextBlock.jsx b/src/sentry/static/sentry/app/components/events/contexts/contextBlock.jsx
index 145d39ad7b..3608bee4d3 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/contextBlock.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/contextBlock.jsx
@@ -5,12 +5,12 @@ import _ from 'lodash';
 import KeyValueList from '../interfaces/keyValueList';
 import {defined} from '../../../utils';
 
-const ContextBlock = React.createClass({
-  propTypes: {
+class ContextBlock extends React.Component {
+  static propTypes = {
     alias: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
     knownData: PropTypes.array,
-  },
+  };
 
   render() {
     let data = [];
@@ -47,7 +47,7 @@ const ContextBlock = React.createClass({
         <KeyValueList data={data} isSorted={false} />
       </div>
     );
-  },
-});
+  }
+}
 
 export default ContextBlock;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/default.jsx b/src/sentry/static/sentry/app/components/events/contexts/default.jsx
index cb71eb5258..2ff50d3254 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/default.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/default.jsx
@@ -3,15 +3,15 @@ import React from 'react';
 
 import ContextBlock from './contextBlock';
 
-const DefaultContextType = React.createClass({
-  propTypes: {
+class DefaultContextType extends React.Component {
+  static propTypes = {
     alias: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
-  },
+  };
 
   render() {
     return <ContextBlock data={this.props.data} alias={this.props.alias} />;
-  },
-});
+  }
+}
 
 export default DefaultContextType;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/device.jsx b/src/sentry/static/sentry/app/components/events/contexts/device.jsx
index 62f3cf5ca6..d064656a77 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/device.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/device.jsx
@@ -4,13 +4,13 @@ import React from 'react';
 import ContextBlock from './contextBlock';
 import {defined, formatBytes} from '../../../utils';
 
-const DeviceContextType = React.createClass({
-  propTypes: {
+class DeviceContextType extends React.Component {
+  static propTypes = {
     alias: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
-  },
+  };
 
-  formatMemory(memory_size, free_memory, usable_memory) {
+  formatMemory = (memory_size, free_memory, usable_memory) => {
     if (
       !Number.isInteger(memory_size) ||
       memory_size <= 0 ||
@@ -25,14 +25,14 @@ const DeviceContextType = React.createClass({
       memory += ` / Usable: ${formatBytes(usable_memory)}`;
 
     return memory;
-  },
+  };
 
-  formatStorage(
+  formatStorage = (
     storage_size,
     free_storage,
     external_storage_size,
     external_free_storage
-  ) {
+  ) => {
     if (!Number.isInteger(storage_size) || storage_size <= 0) return null;
 
     let storage = `Total: ${formatBytes(storage_size)}`;
@@ -50,7 +50,7 @@ const DeviceContextType = React.createClass({
       )} / Free: ${formatBytes(external_free_storage)})`;
 
     return storage;
-  },
+  };
 
   render() {
     let {
@@ -99,8 +99,8 @@ const DeviceContextType = React.createClass({
         alias={this.props.alias}
       />
     );
-  },
-});
+  }
+}
 
 DeviceContextType.getTitle = function(value) {
   return 'Device';
diff --git a/src/sentry/static/sentry/app/components/events/contexts/os.jsx b/src/sentry/static/sentry/app/components/events/contexts/os.jsx
index f6ad35b761..c836559faa 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/os.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/os.jsx
@@ -4,11 +4,11 @@ import React from 'react';
 import ContextBlock from './contextBlock';
 import {defined} from '../../../utils';
 
-const OsContextType = React.createClass({
-  propTypes: {
+class OsContextType extends React.Component {
+  static propTypes = {
     alias: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
-  },
+  };
 
   render() {
     let {name, version, build, kernel_version, rooted, ...data} = this.props.data;
@@ -24,8 +24,8 @@ const OsContextType = React.createClass({
         alias={this.props.alias}
       />
     );
-  },
-});
+  }
+}
 
 OsContextType.getTitle = function(value) {
   return 'Operating System';
diff --git a/src/sentry/static/sentry/app/components/events/contexts/runtime.jsx b/src/sentry/static/sentry/app/components/events/contexts/runtime.jsx
index e292e0318a..d09744db3f 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/runtime.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/runtime.jsx
@@ -3,11 +3,11 @@ import React from 'react';
 
 import ContextBlock from './contextBlock';
 
-const RuntimeContextType = React.createClass({
-  propTypes: {
+class RuntimeContextType extends React.Component {
+  static propTypes = {
     alias: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
-  },
+  };
 
   render() {
     let {name, version, build, ...data} = this.props.data;
@@ -18,8 +18,8 @@ const RuntimeContextType = React.createClass({
         alias={this.props.alias}
       />
     );
-  },
-});
+  }
+}
 
 RuntimeContextType.getTitle = function(value) {
   return 'Runtime';
diff --git a/src/sentry/static/sentry/app/components/events/contexts/user.jsx b/src/sentry/static/sentry/app/components/events/contexts/user.jsx
index 41344fbe7c..59c34e18da 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/user.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/user.jsx
@@ -7,10 +7,10 @@ import _ from 'lodash';
 import Avatar from '../../../components/avatar';
 import KeyValueList from '../interfaces/keyValueList';
 
-const UserContextType = React.createClass({
-  propTypes: {
+class UserContextType extends React.Component {
+  static propTypes = {
     data: PropTypes.object.isRequired,
-  },
+  };
 
   render() {
     let user = this.props.data;
@@ -62,8 +62,8 @@ const UserContextType = React.createClass({
         {children && <KeyValueList data={children} isContextData={true} />}
       </div>
     );
-  },
-});
+  }
+}
 
 UserContextType.getTitle = function(value) {
   return 'User';
diff --git a/src/sentry/static/sentry/app/components/events/device.jsx b/src/sentry/static/sentry/app/components/events/device.jsx
index da0c291940..a781143133 100644
--- a/src/sentry/static/sentry/app/components/events/device.jsx
+++ b/src/sentry/static/sentry/app/components/events/device.jsx
@@ -6,15 +6,13 @@ import {t} from '../../locale';
 import ContextData from '../contextData';
 
 // TODO(hazat): Is this interface used somewhere? If not delete it?
-const DeviceInterface = React.createClass({
-  propTypes: {
+class DeviceInterface extends React.Component {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
-  },
+  };
 
-  getInitialState() {
-    return {};
-  },
+  state = {};
 
   render() {
     let {group, event} = this.props;
@@ -70,7 +68,7 @@ const DeviceInterface = React.createClass({
         </table>
       </GroupEventDataSection>
     );
-  },
-});
+  }
+}
 
 export default DeviceInterface;
diff --git a/src/sentry/static/sentry/app/components/events/errorItem.jsx b/src/sentry/static/sentry/app/components/events/errorItem.jsx
index 43088a9617..a328b128b2 100644
--- a/src/sentry/static/sentry/app/components/events/errorItem.jsx
+++ b/src/sentry/static/sentry/app/components/events/errorItem.jsx
@@ -2,24 +2,22 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import {t} from '../../locale';
 
-const EventErrorItem = React.createClass({
-  propTypes: {
+class EventErrorItem extends React.Component {
+  static propTypes = {
     error: PropTypes.object.isRequired,
-  },
+  };
 
-  getInitialState() {
-    return {
-      isOpen: false,
-    };
-  },
+  state = {
+    isOpen: false,
+  };
 
   shouldComponentUpdate(nextProps, nextState) {
     return this.state.isOpen !== nextState.isOpen;
-  },
+  }
 
-  toggle() {
+  toggle = () => {
     this.setState({isOpen: !this.state.isOpen});
-  },
+  };
 
   render() {
     let error = this.props.error;
@@ -38,7 +36,7 @@ const EventErrorItem = React.createClass({
         </pre>
       </li>
     );
-  },
-});
+  }
+}
 
 export default EventErrorItem;
diff --git a/src/sentry/static/sentry/app/components/events/errors.jsx b/src/sentry/static/sentry/app/components/events/errors.jsx
index 52ad29ee2d..859c61d2d3 100644
--- a/src/sentry/static/sentry/app/components/events/errors.jsx
+++ b/src/sentry/static/sentry/app/components/events/errors.jsx
@@ -6,32 +6,30 @@ import EventErrorItem from './errorItem';
 import SentryTypes from '../../proptypes';
 import {t, tn} from '../../locale';
 
-const EventErrors = React.createClass({
-  propTypes: {
+class EventErrors extends React.Component {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
-  },
+  };
 
-  getInitialState() {
-    return {
-      isOpen: false,
-    };
-  },
+  state = {
+    isOpen: false,
+  };
 
   shouldComponentUpdate(nextProps, nextState) {
     if (this.state.isOpen != nextState.isOpen) {
       return true;
     }
     return this.props.event.id !== nextProps.event.id;
-  },
+  }
 
-  toggle() {
+  toggle = () => {
     this.setState({isOpen: !this.state.isOpen});
-  },
+  };
 
-  uniqueErrors(errors) {
+  uniqueErrors = errors => {
     return _.uniqBy(errors, _.isEqual);
-  },
+  };
 
   render() {
     let errors = this.uniqueErrors(this.props.event.errors);
@@ -62,7 +60,7 @@ const EventErrors = React.createClass({
         </ul>
       </EventDataSection>
     );
-  },
-});
+  }
+}
 
 export default EventErrors;
diff --git a/src/sentry/static/sentry/app/components/events/eventDataSection.jsx b/src/sentry/static/sentry/app/components/events/eventDataSection.jsx
index 2873f3e833..c2a5839205 100644
--- a/src/sentry/static/sentry/app/components/events/eventDataSection.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventDataSection.jsx
@@ -3,8 +3,8 @@ import React from 'react';
 import SentryTypes from '../../proptypes';
 import {t} from '../../locale';
 
-const GroupEventDataSection = React.createClass({
-  propTypes: {
+class GroupEventDataSection extends React.Component {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     title: PropTypes.any,
@@ -12,14 +12,12 @@ const GroupEventDataSection = React.createClass({
     wrapTitle: PropTypes.bool,
     toggleRaw: PropTypes.func,
     raw: PropTypes.bool,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      wrapTitle: true,
-      raw: false,
-    };
-  },
+  static defaultProps = {
+    wrapTitle: true,
+    raw: false,
+  };
 
   componentDidMount() {
     if (location.hash) {
@@ -39,9 +37,9 @@ const GroupEventDataSection = React.createClass({
         // > Uncaught DOMException: Failed to execute 'querySelector' on 'Document': 'div#=' is not a valid selector.
       }
     }
-  },
+  }
 
-  render: function() {
+  render() {
     return (
       <div className={(this.props.className || '') + ' box'}>
         {this.props.title && (
@@ -77,7 +75,7 @@ const GroupEventDataSection = React.createClass({
         <div className="box-content with-padding">{this.props.children}</div>
       </div>
     );
-  },
-});
+  }
+}
 
 export default GroupEventDataSection;
diff --git a/src/sentry/static/sentry/app/components/events/eventRow.jsx b/src/sentry/static/sentry/app/components/events/eventRow.jsx
index d6f91d9cd8..53765f0bea 100644
--- a/src/sentry/static/sentry/app/components/events/eventRow.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventRow.jsx
@@ -5,18 +5,16 @@ import EventStore from '../../stores/eventStore';
 import Avatar from '../avatar';
 import TimeSince from '../timeSince';
 
-const EventRow = React.createClass({
-  propTypes: {
+class EventRow extends React.Component {
+  static propTypes = {
     id: PropTypes.string.isRequired,
     orgSlug: PropTypes.string.isRequired,
     projectSlug: PropTypes.string.isRequired,
-  },
+  };
 
-  getInitialState() {
-    return {
-      event: EventStore.get(this.props.id),
-    };
-  },
+  state = {
+    event: EventStore.get(this.props.id),
+  };
 
   componentWillReceiveProps(nextProps) {
     if (nextProps.id != this.props.id) {
@@ -24,11 +22,11 @@ const EventRow = React.createClass({
         event: EventStore.get(this.props.id),
       });
     }
-  },
+  }
 
   shouldComponentUpdate(nextProps, nextState) {
     return false;
-  },
+  }
 
   render() {
     let event = this.state.event;
@@ -71,7 +69,7 @@ const EventRow = React.createClass({
         </td>
       </tr>
     );
-  },
-});
+  }
+}
 
 export default EventRow;
diff --git a/src/sentry/static/sentry/app/components/events/eventTags.jsx b/src/sentry/static/sentry/app/components/events/eventTags.jsx
index 4bb4376757..91ba524246 100644
--- a/src/sentry/static/sentry/app/components/events/eventTags.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventTags.jsx
@@ -11,13 +11,13 @@ import {t} from '../../locale';
 import Pills from '../pills';
 import Pill from '../pill';
 
-const EventTags = React.createClass({
-  propTypes: {
+class EventTags extends React.Component {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
-  },
+  };
 
   render() {
     let tags = this.props.event.tags;
@@ -55,7 +55,7 @@ const EventTags = React.createClass({
         </Pills>
       </EventDataSection>
     );
-  },
-});
+  }
+}
 
 export default EventTags;
diff --git a/src/sentry/static/sentry/app/components/events/extraData.jsx b/src/sentry/static/sentry/app/components/events/extraData.jsx
index 5e6938662c..b09546d12e 100644
--- a/src/sentry/static/sentry/app/components/events/extraData.jsx
+++ b/src/sentry/static/sentry/app/components/events/extraData.jsx
@@ -6,27 +6,25 @@ import EventDataSection from './eventDataSection';
 import KeyValueList from './interfaces/keyValueList';
 import {t} from '../../locale';
 
-const EventExtraData = React.createClass({
-  propTypes: {
+class EventExtraData extends React.Component {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
-  },
+  };
 
-  getInitialState() {
-    return {
-      raw: false,
-    };
-  },
+  state = {
+    raw: false,
+  };
 
   shouldComponentUpdate(nextProps, nextState) {
     return this.props.event.id !== nextProps.event.id || this.state.raw !== nextState.raw;
-  },
+  }
 
-  toggleRaw(shouldBeRaw) {
+  toggleRaw = shouldBeRaw => {
     this.setState({
       raw: shouldBeRaw,
     });
-  },
+  };
 
   render() {
     let extraDataArray = objectToArray(this.props.event.context);
@@ -44,7 +42,7 @@ const EventExtraData = React.createClass({
         </EventDataSection>
       </div>
     );
-  },
-});
+  }
+}
 
 export default EventExtraData;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
index ef206e3d33..ac9d49fa35 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
@@ -32,38 +32,34 @@ Collapsed.propTypes = {
   count: PropTypes.number.isRequired,
 };
 
-const BreadcrumbsInterface = React.createClass({
-  propTypes: {
+class BreadcrumbsInterface extends React.Component {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     type: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
     isShare: PropTypes.bool,
-  },
+  };
 
-  contextTypes: {
+  static contextTypes = {
     organization: SentryTypes.Organization,
     project: SentryTypes.Project,
-  },
+  };
 
-  statics: {
-    MAX_CRUMBS_WHEN_COLLAPSED: 10,
-  },
+  static MAX_CRUMBS_WHEN_COLLAPSED = 10;
 
-  getInitialState() {
-    return {
-      collapsed: true,
-      queryValue: '',
-    };
-  },
+  state = {
+    collapsed: true,
+    queryValue: '',
+  };
 
-  onCollapseToggle() {
+  onCollapseToggle = () => {
     this.setState({
       collapsed: !this.state.collapsed,
     });
-  },
+  };
 
-  renderBreadcrumbs(crumbs) {
+  renderBreadcrumbs = crumbs => {
     // reverse array to get consistent idx between collapsed/expanded state
     // (indexes begin and increment from last breadcrumb)
     return crumbs
@@ -72,9 +68,9 @@ const BreadcrumbsInterface = React.createClass({
         return <Breadcrumb key={idx} crumb={item} />;
       })
       .reverse(); // un-reverse rendered result
-  },
+  };
 
-  renderNoMatch() {
+  renderNoMatch = () => {
     return (
       <li className="crumb-empty">
         <p>
@@ -83,9 +79,9 @@ const BreadcrumbsInterface = React.createClass({
         </p>
       </li>
     );
-  },
+  };
 
-  getVirtualCrumb() {
+  getVirtualCrumb = () => {
     let evt = this.props.event;
     let crumb;
 
@@ -120,15 +116,15 @@ const BreadcrumbsInterface = React.createClass({
     }
 
     return crumb;
-  },
+  };
 
-  setQuery(evt) {
+  setQuery = evt => {
     this.setState({
       queryValue: evt.target.value,
     });
-  },
+  };
 
-  filterCrumbs(crumbs, queryValue) {
+  filterCrumbs = (crumbs, queryValue) => {
     return crumbs.filter(item => {
       // return true if any of category, message, or level contain queryValue
       return !!['category', 'message', 'level'].find(prop => {
@@ -136,16 +132,16 @@ const BreadcrumbsInterface = React.createClass({
         return propValue.includes(queryValue);
       });
     });
-  },
+  };
 
-  clearSearch() {
+  clearSearch = () => {
     this.setState({
       queryValue: '',
       collapsed: true,
     });
-  },
+  };
 
-  getSearchField() {
+  getSearchField = () => {
     return (
       <div className="breadcrumb-filter">
         <input
@@ -166,7 +162,7 @@ const BreadcrumbsInterface = React.createClass({
         )}
       </div>
     );
-  },
+  };
 
   render() {
     let group = this.props.group;
@@ -227,7 +223,7 @@ const BreadcrumbsInterface = React.createClass({
         </ul>
       </GroupEventDataSection>
     );
-  },
-});
+  }
+}
 
 export default BreadcrumbsInterface;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx
index f46c788c08..5a14c12487 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx
@@ -6,8 +6,8 @@ import StacktraceContent from './stacktraceContent';
 import ExceptionContent from './exceptionContent';
 import RawExceptionContent from './rawExceptionContent';
 
-const CrashContent = React.createClass({
-  propTypes: {
+class CrashContent extends React.Component {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     stackView: PropTypes.string.isRequired,
@@ -15,9 +15,9 @@ const CrashContent = React.createClass({
     newestFirst: PropTypes.bool.isRequired,
     exception: PropTypes.object,
     stacktrace: PropTypes.object,
-  },
+  };
 
-  renderException() {
+  renderException = () => {
     const {event, stackView, stackType, newestFirst, exception} = this.props;
     return stackView === 'raw' ? (
       <RawExceptionContent
@@ -35,9 +35,9 @@ const CrashContent = React.createClass({
         newestFirst={newestFirst}
       />
     );
-  },
+  };
 
-  renderStacktrace() {
+  renderStacktrace = () => {
     const {event, stackView, newestFirst, stacktrace} = this.props;
     return stackView === 'raw' ? (
       <pre className="traceback plain">
@@ -52,7 +52,7 @@ const CrashContent = React.createClass({
         newestFirst={newestFirst}
       />
     );
-  },
+  };
 
   render() {
     if (this.props.exception) {
@@ -62,7 +62,7 @@ const CrashContent = React.createClass({
       return this.renderStacktrace();
     }
     return null;
-  },
-});
+  }
+}
 
 export default CrashContent;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx b/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx
index ae9ac09337..c2aa6e8478 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx
@@ -20,30 +20,31 @@ function getView(view, data) {
   }
 }
 
-const CSPInterface = React.createClass({
-  propTypes: {
+class CSPInterface extends React.Component {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     type: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
-  },
+  };
 
-  getInitialState() {
-    let {data} = this.props;
+  constructor(props) {
+    super(props);
+    let {data} = props;
     // hide the report-uri since this is redundant and silly
     data.original_policy = data.original_policy.replace(/(;\s+)?report-uri [^;]+/, '');
 
-    return {
+    this.state = {
       view: 'report',
       data,
     };
-  },
+  }
 
-  toggleView(value) {
+  toggleView = value => {
     this.setState({
       view: value,
     });
-  },
+  };
 
   render() {
     let {view, data} = this.state;
@@ -88,7 +89,7 @@ const CSPInterface = React.createClass({
         {children}
       </GroupEventDataSection>
     );
-  },
-});
+  }
+}
 
 export default CSPInterface;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/cspContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/cspContent.jsx
index c9f43f7307..b90140a3f0 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/cspContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/cspContent.jsx
@@ -4,10 +4,10 @@ import React from 'react';
 import {objectToArray} from '../../../utils';
 import KeyValueList from './keyValueList';
 
-const CSPContent = React.createClass({
-  propTypes: {
+class CSPContent extends React.Component {
+  static propTypes = {
     data: PropTypes.object.isRequired,
-  },
+  };
 
   render() {
     let {data} = this.props;
@@ -19,7 +19,7 @@ const CSPContent = React.createClass({
         <KeyValueList data={objectToArray(data)} isContextData={true} />
       </div>
     );
-  },
-});
+  }
+}
 
 export default CSPContent;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/cspHelp.jsx b/src/sentry/static/sentry/app/components/events/interfaces/cspHelp.jsx
index b0d43f8468..b1856c87fa 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/cspHelp.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/cspHelp.jsx
@@ -127,10 +127,10 @@ function getLink(key) {
   );
 }
 
-const CSPHelp = React.createClass({
-  propTypes: {
+class CSPHelp extends React.Component {
+  static propTypes = {
     data: PropTypes.object.isRequired,
-  },
+  };
 
   render() {
     let {data} = this.props;
@@ -144,7 +144,7 @@ const CSPHelp = React.createClass({
         <p style={{textAlign: 'right'}}>— MDN ({getLink(key)})</p>
       </div>
     );
-  },
-});
+  }
+}
 
 export default CSPHelp;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
index 85ac269fff..c6af6b8b35 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
@@ -6,14 +6,14 @@ import ClippedBox from '../../clippedBox';
 import KeyValueList from './keyValueList';
 import {t} from '../../../locale';
 
-const DebugMetaInterface = React.createClass({
-  propTypes: {
+class DebugMetaInterface extends React.Component {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     data: PropTypes.object.isRequired,
-  },
+  };
 
-  getImageDetail(img, evt) {
+  getImageDetail = (img, evt) => {
     // in particular proguard images do not have a name, skip them
     if (img.name === null || img.type === 'proguard') {
       return null;
@@ -39,7 +39,7 @@ const DebugMetaInterface = React.createClass({
     if (version) return [name, version];
 
     return null;
-  },
+  };
 
   render() {
     let data = this.props.data;
@@ -67,7 +67,7 @@ const DebugMetaInterface = React.createClass({
     }
 
     return result;
-  },
-});
+  }
+}
 
 export default DebugMetaInterface;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
index 820bd935dd..fd7652e984 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
@@ -6,25 +6,23 @@ import {isStacktraceNewestFirst} from './stacktrace';
 import CrashHeader from './crashHeader';
 import CrashContent from './crashContent';
 
-const ExceptionInterface = React.createClass({
-  propTypes: {
+class ExceptionInterface extends React.Component {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     type: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
-  },
+  };
 
-  getInitialState() {
-    return {
-      stackView: this.props.data.hasSystemFrames ? 'app' : 'full',
-      newestFirst: isStacktraceNewestFirst(),
-      stackType: 'original',
-    };
-  },
+  state = {
+    stackView: this.props.data.hasSystemFrames ? 'app' : 'full',
+    newestFirst: isStacktraceNewestFirst(),
+    stackType: 'original',
+  };
 
-  eventHasThreads() {
+  eventHasThreads = () => {
     return !!this.props.event.entries.find(x => x.type === 'threads');
-  },
+  };
 
   render() {
     let group = this.props.group;
@@ -73,7 +71,7 @@ const ExceptionInterface = React.createClass({
         />
       </GroupEventDataSection>
     );
-  },
-});
+  }
+}
 
 export default ExceptionInterface;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
index 2520a7e85c..615438c189 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
@@ -5,14 +5,14 @@ import {defined} from '../../../utils';
 import StacktraceContent from './stacktraceContent';
 import ExceptionMechanism from './exceptionMechanism';
 
-const ExceptionContent = React.createClass({
-  propTypes: {
+class ExceptionContent extends React.Component {
+  static propTypes = {
     type: PropTypes.oneOf(['original', 'minified']),
     values: PropTypes.array.isRequired,
     view: PropTypes.string.isRequired,
     platform: PropTypes.string,
     newestFirst: PropTypes.bool,
-  },
+  };
 
   render() {
     let stackView = this.props.view;
@@ -53,7 +53,7 @@ const ExceptionContent = React.createClass({
 
     // TODO(dcramer): implement exceptions omitted
     return <div>{children}</div>;
-  },
-});
+  }
+}
 
 export default ExceptionContent;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx
index ead15c9af0..bdbf2fc6b3 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx
@@ -3,11 +3,11 @@ import React from 'react';
 import Pills from '../../pills';
 import Pill from '../../pill';
 
-const ExceptionMechanism = React.createClass({
-  propTypes: {
+class ExceptionMechanism extends React.Component {
+  static propTypes = {
     data: PropTypes.object.isRequired,
     platform: PropTypes.string,
-  },
+  };
 
   render() {
     let pills = [];
@@ -47,7 +47,7 @@ const ExceptionMechanism = React.createClass({
         <Pills>{pills}</Pills>
       </div>
     );
-  },
-});
+  }
+}
 
 export default ExceptionMechanism;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.jsx
index 118b5fed75..e5b93cfb9a 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.jsx
@@ -4,16 +4,16 @@ import React from 'react';
 import {objectToArray} from '../../../utils';
 import KeyValueList from './keyValueList';
 
-const FrameVariables = React.createClass({
-  propTypes: {
+class FrameVariables extends React.Component {
+  static propTypes = {
     data: PropTypes.object.isRequired,
-  },
+  };
 
   // make sure that clicking on the variables does not actually do
   // anything on the containing element.
-  preventToggling(evt) {
+  preventToggling = evt => {
     evt.stopPropagation();
-  },
+  };
 
   render() {
     let data = objectToArray(this.props.data);
@@ -21,7 +21,7 @@ const FrameVariables = React.createClass({
     return (
       <KeyValueList data={data} isContextData={true} onClick={this.preventToggling} />
     );
-  },
-});
+  }
+}
 
 export default FrameVariables;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/message.jsx b/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
index cc037d772d..74c58e3df7 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
@@ -6,13 +6,13 @@ import SentryTypes from '../../../proptypes';
 import utils from '../../../utils';
 import {t} from '../../../locale';
 
-const MessageInterface = React.createClass({
-  propTypes: {
+class MessageInterface extends React.Component {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     type: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
-  },
+  };
 
   render() {
     let data = this.props.data;
@@ -40,7 +40,7 @@ const MessageInterface = React.createClass({
           )}
       </EventDataSection>
     );
-  },
-});
+  }
+}
 
 export default MessageInterface;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/request.jsx b/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
index 9cf9a3e73f..701ea94807 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
@@ -9,38 +9,36 @@ import {t} from '../../../locale';
 
 import Truncate from '../../../components/truncate';
 
-const RequestInterface = React.createClass({
-  propTypes: {
+class RequestInterface extends React.Component {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     type: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
     isShare: PropTypes.bool,
-  },
+  };
 
-  contextTypes: {
+  static contextTypes = {
     organization: SentryTypes.Organization,
     project: SentryTypes.Project,
-  },
+  };
 
-  getInitialState() {
-    return {
-      view: 'formatted',
-    };
-  },
+  state = {
+    view: 'formatted',
+  };
 
-  isPartial() {
+  isPartial = () => {
     // We assume we only have a partial interface is we're missing
     // an HTTP method. This means we don't have enough information
     // to reliably construct a full HTTP request.
     return !this.props.data.method;
-  },
+  };
 
-  toggleView(value) {
+  toggleView = value => {
     this.setState({
       view: value,
     });
-  },
+  };
 
   render() {
     let group = this.props.group;
@@ -122,7 +120,7 @@ const RequestInterface = React.createClass({
         )}
       </GroupEventDataSection>
     );
-  },
-});
+  }
+}
 
 export default RequestInterface;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
index aedefa583f..eaf7c533bb 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
@@ -10,12 +10,12 @@ import {objectToSortedTupleArray} from './utils';
 import {objectIsEmpty} from '../../../utils';
 import {t} from '../../../locale';
 
-const RichHttpContent = React.createClass({
-  propTypes: {
+class RichHttpContent extends React.Component {
+  static propTypes = {
     data: PropTypes.object.isRequired,
-  },
+  };
 
-  getBodySection(data) {
+  getBodySection = data => {
     // The http interface provides an inferred content type for the data body.
     switch (data.inferredContentType) {
       case 'application/json':
@@ -27,9 +27,9 @@ const RichHttpContent = React.createClass({
       default:
         return <pre>{JSON.stringify(data.data, null, 2)}</pre>;
     }
-  },
+  };
 
-  getQueryStringOrRaw(data) {
+  getQueryStringOrRaw = data => {
     try {
       // Sentry API abbreviates long query string values, sometimes resulting in
       // an un-parsable querystring ... stay safe kids
@@ -42,7 +42,7 @@ const RichHttpContent = React.createClass({
     } catch (e) {
       return <pre>{data}</pre>;
     }
-  },
+  };
 
   render() {
     let data = this.props.data;
@@ -81,7 +81,7 @@ const RichHttpContent = React.createClass({
         )}
       </div>
     );
-  },
-});
+  }
+}
 
 export default RichHttpContent;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
index 1f73091a35..ce48072f8b 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
@@ -22,27 +22,25 @@ export function isStacktraceNewestFirst() {
   }
 }
 
-const StacktraceInterface = React.createClass({
-  propTypes: {
+class StacktraceInterface extends React.Component {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     type: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
     platform: PropTypes.string,
-  },
+  };
 
-  getInitialState() {
-    return {
-      stackView: this.props.data.hasSystemFrames ? 'app' : 'full',
-      newestFirst: isStacktraceNewestFirst(),
-    };
-  },
+  state = {
+    stackView: this.props.data.hasSystemFrames ? 'app' : 'full',
+    newestFirst: isStacktraceNewestFirst(),
+  };
 
-  toggleStack(value) {
+  toggleStack = value => {
     this.setState({
       stackView: value,
     });
-  },
+  };
 
   render() {
     let group = this.props.group;
@@ -82,7 +80,7 @@ const StacktraceInterface = React.createClass({
         />
       </GroupEventDataSection>
     );
-  },
-});
+  }
+}
 
 export default StacktraceInterface;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/template.jsx b/src/sentry/static/sentry/app/components/events/interfaces/template.jsx
index c2bf58bfde..aedf309f9e 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/template.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/template.jsx
@@ -5,17 +5,15 @@ import SentryTypes from '../../../proptypes';
 import Frame from './frame';
 import {t} from '../../../locale';
 
-const TemplateInterface = React.createClass({
-  propTypes: {
+class TemplateInterface extends React.Component {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     type: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
-  },
+  };
 
-  getInitialState() {
-    return {};
-  },
+  state = {};
 
   render() {
     return (
@@ -32,7 +30,7 @@ const TemplateInterface = React.createClass({
         </div>
       </GroupEventDataSection>
     );
-  },
-});
+  }
+}
 
 export default TemplateInterface;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx b/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
index ecbadd7545..2dec8877ad 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
@@ -122,8 +122,8 @@ function findBestThread(threads) {
   return threads[0];
 }
 
-const Thread = React.createClass({
-  propTypes: {
+class Thread extends React.Component {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     data: PropTypes.object.isRequired,
@@ -132,9 +132,9 @@ const Thread = React.createClass({
     newestFirst: PropTypes.bool,
     exception: PropTypes.object,
     stacktrace: PropTypes.object,
-  },
+  };
 
-  renderMissingStacktrace() {
+  renderMissingStacktrace = () => {
     return (
       <div className="traceback missing-traceback">
         <ul>
@@ -148,12 +148,12 @@ const Thread = React.createClass({
         </ul>
       </div>
     );
-  },
+  };
 
-  hasMissingStacktrace() {
+  hasMissingStacktrace = () => {
     const {exception, stacktrace} = this.props;
     return !(exception || stacktrace);
-  },
+  };
 
   render() {
     const {
@@ -191,47 +191,49 @@ const Thread = React.createClass({
         )}
       </div>
     );
-  },
-});
+  }
+}
 
-const ThreadsInterface = React.createClass({
-  propTypes: {
+class ThreadsInterface extends React.Component {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     type: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
     platform: PropTypes.string,
-  },
+  };
+
+  constructor(props) {
+    super(props);
+    let thread = findBestThread(props.data.values);
 
-  getInitialState() {
-    let thread = findBestThread(this.props.data.values);
-    return {
+    this.state = {
       activeThread: thread,
-      stackView: getIntendedStackView(thread, this.props.event),
+      stackView: getIntendedStackView(thread, props.event),
       stackType: 'original',
       newestFirst: isStacktraceNewestFirst(),
     };
-  },
+  }
 
-  toggleStack(value) {
+  toggleStack = value => {
     this.setState({
       stackView: value,
     });
-  },
+  };
 
-  getStacktrace() {
+  getStacktrace = () => {
     return findThreadStacktrace(
       this.state.activeThread,
       this.props.event,
       this.state.stackType !== 'original'
     );
-  },
+  };
 
-  getException() {
+  getException = () => {
     return findThreadException(this.state.activeThread, this.props.event);
-  },
+  };
 
-  onSelectNewThread(thread) {
+  onSelectNewThread = thread => {
     let newStackView = this.state.stackView;
     if (this.state.stackView !== 'raw') {
       newStackView = getIntendedStackView(thread, this.props.event);
@@ -241,7 +243,7 @@ const ThreadsInterface = React.createClass({
       stackView: newStackView,
       stackType: 'original',
     });
-  },
+  };
 
   render() {
     let group = this.props.group;
@@ -309,7 +311,7 @@ const ThreadsInterface = React.createClass({
         />
       </GroupEventDataSection>
     );
-  },
-});
+  }
+}
 
 export default ThreadsInterface;
diff --git a/src/sentry/static/sentry/app/components/events/packageData.jsx b/src/sentry/static/sentry/app/components/events/packageData.jsx
index 1cbf5d82d1..254f142364 100644
--- a/src/sentry/static/sentry/app/components/events/packageData.jsx
+++ b/src/sentry/static/sentry/app/components/events/packageData.jsx
@@ -7,15 +7,15 @@ import ClippedBox from '../clippedBox';
 import KeyValueList from './interfaces/keyValueList';
 import {t} from '../../locale';
 
-const EventPackageData = React.createClass({
-  propTypes: {
+class EventPackageData extends React.Component {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
-  },
+  };
 
   shouldComponentUpdate(nextProps, nextState) {
     return this.props.event.id !== nextProps.event.id;
-  },
+  }
 
   render() {
     let packages = objectToArray(this.props.event.packages);
@@ -32,7 +32,7 @@ const EventPackageData = React.createClass({
         </ClippedBox>
       </EventDataSection>
     );
-  },
-});
+  }
+}
 
 export default EventPackageData;
diff --git a/src/sentry/static/sentry/app/components/events/sdk.jsx b/src/sentry/static/sentry/app/components/events/sdk.jsx
index 8860151138..ece81e2fb8 100644
--- a/src/sentry/static/sentry/app/components/events/sdk.jsx
+++ b/src/sentry/static/sentry/app/components/events/sdk.jsx
@@ -4,11 +4,11 @@ import SentryTypes from '../../proptypes';
 import GroupEventDataSection from './eventDataSection';
 import {t} from '../../locale';
 
-const EventSdk = React.createClass({
-  propTypes: {
+class EventSdk extends React.Component {
+  static propTypes = {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
-  },
+  };
 
   render() {
     let {group, event} = this.props;
@@ -48,7 +48,7 @@ const EventSdk = React.createClass({
         </table>
       </GroupEventDataSection>
     );
-  },
-});
+  }
+}
 
 export default EventSdk;
diff --git a/src/sentry/static/sentry/app/components/events/userReport.jsx b/src/sentry/static/sentry/app/components/events/userReport.jsx
index 4e91b52b4f..4268aedce2 100644
--- a/src/sentry/static/sentry/app/components/events/userReport.jsx
+++ b/src/sentry/static/sentry/app/components/events/userReport.jsx
@@ -5,13 +5,13 @@ import TimeSince from '../../components/timeSince';
 import utils from '../../utils';
 import Link from '../link';
 
-const EventUserReport = React.createClass({
-  propTypes: {
+class EventUserReport extends React.Component {
+  static propTypes = {
     report: PropTypes.object.isRequired,
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
     issueId: PropTypes.string.isRequired,
-  },
+  };
 
   render() {
     let {report, orgId, projectId, issueId} = this.props;
@@ -52,7 +52,7 @@ const EventUserReport = React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
 
 export default EventUserReport;
diff --git a/src/sentry/static/sentry/app/components/eventsTable/eventsTable.jsx b/src/sentry/static/sentry/app/components/eventsTable/eventsTable.jsx
index 3591293953..8beee88718 100644
--- a/src/sentry/static/sentry/app/components/eventsTable/eventsTable.jsx
+++ b/src/sentry/static/sentry/app/components/eventsTable/eventsTable.jsx
@@ -6,18 +6,16 @@ import {t} from '../../locale';
 import CustomPropTypes from '../../proptypes';
 import EventsTableRow from './eventsTableRow';
 
-const EventsTable = React.createClass({
-  propTypes: {
+class EventsTable extends React.Component {
+  static propTypes = {
     fixedDimensions: PropTypes.bool,
     events: PropTypes.arrayOf(CustomPropTypes.Event),
     tagList: PropTypes.arrayOf(CustomPropTypes.Tag),
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      fixedDimensions: false,
-    };
-  },
+  static defaultProps = {
+    fixedDimensions: false,
+  };
 
   render() {
     let {className, events, fixedDimensions, tagList} = this.props;
@@ -56,7 +54,7 @@ const EventsTable = React.createClass({
         </tbody>
       </table>
     );
-  },
-});
+  }
+}
 
 export default EventsTable;
diff --git a/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx b/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
index ae44ce01b7..4a2520ad54 100644
--- a/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
+++ b/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
@@ -10,8 +10,8 @@ import deviceNameMapper from '../../utils/deviceNameMapper';
 
 import '../../../less/components/eventsTableRow.less';
 
-const EventsTableRow = React.createClass({
-  propTypes: {
+class EventsTableRow extends React.Component {
+  static propTypes = {
     hasUser: PropTypes.bool,
     truncate: PropTypes.bool,
     orgId: PropTypes.string.isRequired,
@@ -19,13 +19,11 @@ const EventsTableRow = React.createClass({
     projectId: PropTypes.string.isRequired,
     event: CustomPropTypes.Event.isRequired,
     tagList: PropTypes.arrayOf(CustomPropTypes.Tag),
-  },
+  };
 
-  getDefaultProps() {
-    return {truncate: false};
-  },
+  static defaultProps = {truncate: false};
 
-  getEventTitle(event) {
+  getEventTitle = event => {
     switch (event.type) {
       case 'error':
         if (event.metadata.type && event.metadata.value)
@@ -38,7 +36,7 @@ const EventsTableRow = React.createClass({
       default:
         return event.message.split('\n')[0];
     }
-  },
+  };
 
   render() {
     let {
@@ -94,7 +92,7 @@ const EventsTableRow = React.createClass({
         })}
       </tr>
     );
-  },
-});
+  }
+}
 
 export default EventsTableRow;
diff --git a/src/sentry/static/sentry/app/components/fileSize.jsx b/src/sentry/static/sentry/app/components/fileSize.jsx
index deade3523d..df931707af 100644
--- a/src/sentry/static/sentry/app/components/fileSize.jsx
+++ b/src/sentry/static/sentry/app/components/fileSize.jsx
@@ -2,14 +2,14 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import {formatBytes} from '../utils';
 
-const FileSize = React.createClass({
-  propTypes: {
+class FileSize extends React.Component {
+  static propTypes = {
     bytes: PropTypes.number.isRequired,
-  },
+  };
 
-  render: function() {
+  render() {
     return <span>{formatBytes(this.props.bytes)}</span>;
-  },
-});
+  }
+}
 
 export default FileSize;
diff --git a/src/sentry/static/sentry/app/components/flowLayout.jsx b/src/sentry/static/sentry/app/components/flowLayout.jsx
index 7207bcb29d..6c035fafe2 100644
--- a/src/sentry/static/sentry/app/components/flowLayout.jsx
+++ b/src/sentry/static/sentry/app/components/flowLayout.jsx
@@ -5,21 +5,19 @@ import '../../less/components/flowLayout.less';
 
 // Simple horizontal layout with vertical centering
 // Takes up remaining space of a flexbox container (i.e. "flex: 1")
-const FlowLayout = React.createClass({
-  propTypes: {
+class FlowLayout extends React.Component {
+  static propTypes = {
     /** Centers content via `justify-content` */
     center: PropTypes.bool,
     /** Changes flex direction to be column */
     vertical: PropTypes.bool,
     /** Applies "overflow: hidden" to container so that children can be truncated */
     truncate: PropTypes.bool,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      truncate: true,
-    };
-  },
+  static defaultProps = {
+    truncate: true,
+  };
 
   render() {
     let {className, children, truncate, vertical, center, ...otherProps} = this.props;
@@ -34,7 +32,7 @@ const FlowLayout = React.createClass({
         {children}
       </div>
     );
-  },
-});
+  }
+}
 
 export default FlowLayout;
diff --git a/src/sentry/static/sentry/app/components/footer.jsx b/src/sentry/static/sentry/app/components/footer.jsx
index 577d232e69..53b7b0764c 100644
--- a/src/sentry/static/sentry/app/components/footer.jsx
+++ b/src/sentry/static/sentry/app/components/footer.jsx
@@ -4,18 +4,19 @@ import HookStore from '../stores/hookStore';
 import {t} from '../locale';
 import DynamicWrapper from './dynamicWrapper';
 
-const Footer = React.createClass({
-  getInitialState() {
+class Footer extends React.Component {
+  constructor(props) {
+    super(props);
     // Allow injection via getsentry et all
     let hooks = [];
     HookStore.get('footer').forEach(cb => {
       hooks.push(cb());
     });
 
-    return {
+    this.state = {
       hooks,
     };
-  },
+  }
 
   render() {
     let config = ConfigStore.getConfig();
@@ -51,7 +52,7 @@ const Footer = React.createClass({
         </div>
       </footer>
     );
-  },
-});
+  }
+}
 
 export default Footer;
diff --git a/src/sentry/static/sentry/app/components/groupListHeader.jsx b/src/sentry/static/sentry/app/components/groupListHeader.jsx
index ce7fa1bb12..44e84951ea 100644
--- a/src/sentry/static/sentry/app/components/groupListHeader.jsx
+++ b/src/sentry/static/sentry/app/components/groupListHeader.jsx
@@ -3,7 +3,7 @@ import {t} from '../locale';
 import Toolbar from './toolbar';
 import ToolbarHeader from './toolbarHeader';
 
-const GroupListHeader = React.createClass({
+class GroupListHeader extends React.Component {
   render() {
     return (
       <div className="group-header">
@@ -23,7 +23,7 @@ const GroupListHeader = React.createClass({
         </Toolbar>
       </div>
     );
-  },
-});
+  }
+}
 
 export default GroupListHeader;
diff --git a/src/sentry/static/sentry/app/components/hovercard.jsx b/src/sentry/static/sentry/app/components/hovercard.jsx
index de333dfd1a..769589e645 100644
--- a/src/sentry/static/sentry/app/components/hovercard.jsx
+++ b/src/sentry/static/sentry/app/components/hovercard.jsx
@@ -2,21 +2,19 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import classNames from 'classnames';
 
-const Hovercard = React.createClass({
-  propTypes: {
+class Hovercard extends React.Component {
+  static propTypes = {
     className: PropTypes.string,
     containerClassName: PropTypes.string,
     header: PropTypes.node,
     body: PropTypes.node,
-  },
+  };
 
-  getInitialState() {
-    return {
-      visible: false,
-    };
-  },
+  state = {
+    visible: false,
+  };
 
-  handleToggleHovercard() {
+  handleToggleHovercard = () => {
     let {header, body} = this.props;
 
     // Don't toggle hovercard if both of these are null
@@ -25,7 +23,7 @@ const Hovercard = React.createClass({
     this.setState({
       visible: !this.state.visible,
     });
-  },
+  };
 
   render() {
     let {containerClassName, className, header, body} = this.props;
@@ -50,7 +48,7 @@ const Hovercard = React.createClass({
         )}
       </span>
     );
-  },
-});
+  }
+}
 
 export default Hovercard;
diff --git a/src/sentry/static/sentry/app/components/inactivePlugins.jsx b/src/sentry/static/sentry/app/components/inactivePlugins.jsx
index 2d2beafe4d..c78836aa90 100644
--- a/src/sentry/static/sentry/app/components/inactivePlugins.jsx
+++ b/src/sentry/static/sentry/app/components/inactivePlugins.jsx
@@ -3,15 +3,15 @@ import React from 'react';
 
 import {t} from '../locale';
 
-export default React.createClass({
-  propTypes: {
+export default class extends React.Component {
+  static propTypes = {
     plugins: PropTypes.array.isRequired,
     onEnablePlugin: PropTypes.func.isRequired,
-  },
+  };
 
-  enablePlugin(plugin) {
+  enablePlugin = plugin => {
     return this.props.onEnablePlugin(plugin, true);
-  },
+  };
 
   render() {
     let plugins = this.props.plugins;
@@ -40,5 +40,5 @@ export default React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/issues/snoozeAction.jsx b/src/sentry/static/sentry/app/components/issues/snoozeAction.jsx
index a2ff5280b5..7556d01936 100644
--- a/src/sentry/static/sentry/app/components/issues/snoozeAction.jsx
+++ b/src/sentry/static/sentry/app/components/issues/snoozeAction.jsx
@@ -10,36 +10,34 @@ const Snooze = {
   '24HOURS': 60 * 24,
 };
 
-const SnoozeAction = React.createClass({
-  propTypes: {
+class SnoozeAction extends React.Component {
+  static propTypes = {
     disabled: PropTypes.bool,
     onSnooze: PropTypes.func.isRequired,
     tooltip: PropTypes.string,
-  },
+  };
 
-  getInitialState() {
-    return {
-      isModalOpen: false,
-    };
-  },
+  state = {
+    isModalOpen: false,
+  };
 
-  toggleModal() {
+  toggleModal = () => {
     if (this.props.disabled) {
       return;
     }
     this.setState({
       isModalOpen: !this.state.isModalOpen,
     });
-  },
+  };
 
-  closeModal() {
+  closeModal = () => {
     this.setState({isModalOpen: false});
-  },
+  };
 
-  onSnooze(duration) {
+  onSnooze = duration => {
     this.props.onSnooze(duration);
     this.closeModal();
-  },
+  };
 
   render() {
     return (
@@ -88,7 +86,7 @@ const SnoozeAction = React.createClass({
         </Modal>
       </a>
     );
-  },
-});
+  }
+}
 
 export default SnoozeAction;
diff --git a/src/sentry/static/sentry/app/components/lastCommit.jsx b/src/sentry/static/sentry/app/components/lastCommit.jsx
index 9139d5306d..8f62737250 100644
--- a/src/sentry/static/sentry/app/components/lastCommit.jsx
+++ b/src/sentry/static/sentry/app/components/lastCommit.jsx
@@ -6,13 +6,13 @@ import TimeSince from './timeSince';
 
 import {t} from '../locale';
 
-const LastCommit = React.createClass({
-  propTypes: {
+class LastCommit extends React.Component {
+  static propTypes = {
     commit: PropTypes.object.isRequired,
     headerClass: PropTypes.string,
-  },
+  };
 
-  renderMessage(message) {
+  renderMessage = message => {
     if (!message) {
       return t('No message provided');
     }
@@ -29,7 +29,7 @@ const LastCommit = React.createClass({
       return truncated + '...';
     }
     return firstLine;
-  },
+  };
 
   render() {
     let {commit, headerClass} = this.props;
@@ -53,7 +53,7 @@ const LastCommit = React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
 
 export default LastCommit;
diff --git a/src/sentry/static/sentry/app/components/link.jsx b/src/sentry/static/sentry/app/components/link.jsx
index 1089e6b7e4..f29137b6f0 100644
--- a/src/sentry/static/sentry/app/components/link.jsx
+++ b/src/sentry/static/sentry/app/components/link.jsx
@@ -6,14 +6,14 @@ import {Link as RouterLink} from 'react-router';
  * A context-aware version of Link (from react-router) that falls
  * back to <a> if there is no router present.
  */
-const Link = React.createClass({
-  propTypes: {
+class Link extends React.Component {
+  static propTypes = {
     to: PropTypes.string.isRequired,
-  },
+  };
 
-  contextTypes: {
+  static contextTypes = {
     location: PropTypes.object,
-  },
+  };
 
   render() {
     if (this.context.location) {
@@ -26,7 +26,7 @@ const Link = React.createClass({
         </a>
       );
     }
-  },
-});
+  }
+}
 
 export default Link;
diff --git a/src/sentry/static/sentry/app/components/listLink.jsx b/src/sentry/static/sentry/app/components/listLink.jsx
index 73219677c4..71a277a118 100644
--- a/src/sentry/static/sentry/app/components/listLink.jsx
+++ b/src/sentry/static/sentry/app/components/listLink.jsx
@@ -4,10 +4,10 @@ import _ from 'lodash';
 import {Link} from 'react-router';
 import classNames from 'classnames';
 
-const ListLink = React.createClass({
-  displayName: 'ListLink',
+class ListLink extends React.Component {
+  static displayName = 'ListLink';
 
-  propTypes: {
+  static propTypes = {
     activeClassName: PropTypes.string.isRequired,
     to: PropTypes.string.isRequired,
     query: PropTypes.object,
@@ -18,27 +18,25 @@ const ListLink = React.createClass({
     // is "active" or not ... overriding default behavior of strict
     // route matching
     isActive: PropTypes.func,
-  },
+  };
 
-  contextTypes: {
+  static contextTypes = {
     router: PropTypes.object.isRequired,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      activeClassName: 'active',
-      index: false,
-    };
-  },
+  static defaultProps = {
+    activeClassName: 'active',
+    index: false,
+  };
 
-  isActive() {
+  isActive = () => {
     return (this.props.isActive || this.context.router.isActive)(
       {pathname: this.props.to, query: this.props.query},
       this.props.index
     );
-  },
+  };
 
-  getClassName() {
+  getClassName = () => {
     let _classNames = {};
 
     if (this.props.className) _classNames[this.props.className] = true;
@@ -46,7 +44,7 @@ const ListLink = React.createClass({
     if (this.isActive()) _classNames[this.props.activeClassName] = true;
 
     return classNames(_classNames);
-  },
+  };
 
   render() {
     let carriedProps = _.omit(this.props, 'activeClassName', 'isActive', 'index');
@@ -57,7 +55,7 @@ const ListLink = React.createClass({
         </Link>
       </li>
     );
-  },
-});
+  }
+}
 
 export default ListLink;
diff --git a/src/sentry/static/sentry/app/components/loadingError.jsx b/src/sentry/static/sentry/app/components/loadingError.jsx
index b2eeb64a23..b61d650a04 100644
--- a/src/sentry/static/sentry/app/components/loadingError.jsx
+++ b/src/sentry/static/sentry/app/components/loadingError.jsx
@@ -2,21 +2,19 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import {t} from '../locale';
 
-const LoadingError = React.createClass({
-  propTypes: {
+class LoadingError extends React.Component {
+  static propTypes = {
     onRetry: PropTypes.func,
     message: PropTypes.string,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      message: t('There was an error loading data.'),
-    };
-  },
+  static defaultProps = {
+    message: t('There was an error loading data.'),
+  };
 
   shouldComponentUpdate() {
     return false;
-  },
+  }
 
   render() {
     return (
@@ -35,7 +33,7 @@ const LoadingError = React.createClass({
         </p>
       </div>
     );
-  },
-});
+  }
+}
 
 export default LoadingError;
diff --git a/src/sentry/static/sentry/app/components/menuItem.jsx b/src/sentry/static/sentry/app/components/menuItem.jsx
index 1d32fe50a0..7c9f005172 100644
--- a/src/sentry/static/sentry/app/components/menuItem.jsx
+++ b/src/sentry/static/sentry/app/components/menuItem.jsx
@@ -3,8 +3,8 @@ import React from 'react';
 import {Link} from 'react-router';
 import classNames from 'classnames';
 
-const MenuItem = React.createClass({
-  propTypes: {
+class MenuItem extends React.Component {
+  static propTypes = {
     header: PropTypes.bool,
     divider: PropTypes.bool,
     title: PropTypes.string,
@@ -19,16 +19,16 @@ const MenuItem = React.createClass({
     query: PropTypes.object,
     linkClassName: PropTypes.string,
     onClick: PropTypes.func,
-  },
+  };
 
-  handleClick(e) {
+  handleClick = e => {
     if (this.props.onSelect) {
       e.preventDefault();
       this.props.onSelect(this.props.eventKey);
     }
-  },
+  };
 
-  renderAnchor() {
+  renderAnchor = () => {
     if (this.props.to) {
       return (
         <Link
@@ -53,7 +53,7 @@ const MenuItem = React.createClass({
         {this.props.children}
       </a>
     );
-  },
+  };
 
   render() {
     let classes = {
@@ -82,7 +82,7 @@ const MenuItem = React.createClass({
         {children}
       </li>
     );
-  },
-});
+  }
+}
 
 export default MenuItem;
diff --git a/src/sentry/static/sentry/app/components/mutedBox.jsx b/src/sentry/static/sentry/app/components/mutedBox.jsx
index 04f75b2d1b..372b9e4283 100644
--- a/src/sentry/static/sentry/app/components/mutedBox.jsx
+++ b/src/sentry/static/sentry/app/components/mutedBox.jsx
@@ -1,19 +1,16 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import PureRenderMixin from 'react-addons-pure-render-mixin';
 
 import DateTime from './dateTime';
 import Duration from './duration';
 import {t} from '../locale';
 
-export default React.createClass({
-  propTypes: {
+export default class MutedBox extends React.PureComponent {
+  static propTypes = {
     statusDetails: PropTypes.object.isRequired,
-  },
+  };
 
-  mixins: [PureRenderMixin],
-
-  renderReason() {
+  renderReason = () => {
     let details = this.props.statusDetails;
     if (details.ignoreUntil) {
       return t(
@@ -50,9 +47,9 @@ export default React.createClass({
       );
     }
     return t('This issue has been ignored');
-  },
+  };
 
-  render() {
+  render = () => {
     return (
       <div className="box">
         <span className="icon icon-soundoff" />
@@ -64,5 +61,5 @@ export default React.createClass({
         </p>
       </div>
     );
-  },
-});
+  };
+}
diff --git a/src/sentry/static/sentry/app/components/narrowLayout.jsx b/src/sentry/static/sentry/app/components/narrowLayout.jsx
index 4fc03cfe64..9c3bede9aa 100644
--- a/src/sentry/static/sentry/app/components/narrowLayout.jsx
+++ b/src/sentry/static/sentry/app/components/narrowLayout.jsx
@@ -3,14 +3,14 @@ import React from 'react';
 
 import Footer from '../components/footer';
 
-const NarryLayout = React.createClass({
+class NarryLayout extends React.Component {
   componentWillMount() {
     jQuery(document.body).addClass('narrow');
-  },
+  }
 
   componentWillUnmount() {
     jQuery(document.body).removeClass('narrow');
-  },
+  }
 
   render() {
     return (
@@ -29,7 +29,7 @@ const NarryLayout = React.createClass({
         <Footer />
       </div>
     );
-  },
-});
+  }
+}
 
 export default NarryLayout;
diff --git a/src/sentry/static/sentry/app/components/onboardingWizard/confirmation.jsx b/src/sentry/static/sentry/app/components/onboardingWizard/confirmation.jsx
index f99c24945d..3b360e4e2f 100644
--- a/src/sentry/static/sentry/app/components/onboardingWizard/confirmation.jsx
+++ b/src/sentry/static/sentry/app/components/onboardingWizard/confirmation.jsx
@@ -2,18 +2,18 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import {t} from '../../locale';
 
-const Confirmation = React.createClass({
-  propTypes: {
+class Confirmation extends React.Component {
+  static propTypes = {
     onSkip: PropTypes.func.isRequired,
     dismiss: PropTypes.func.isRequired,
-  },
+  };
 
-  skip: function(e) {
+  skip = e => {
     e.preventDefault();
     this.props.onSkip();
-  },
+  };
 
-  render: function() {
+  render() {
     return (
       <div className="ob-confirmation" onClick={this.props.dismiss}>
         <h3>{t('Need help?')}</h3>
@@ -25,7 +25,7 @@ const Confirmation = React.createClass({
         </p>
       </div>
     );
-  },
-});
+  }
+}
 
 export default Confirmation;
diff --git a/src/sentry/static/sentry/app/components/organizationIssueList.jsx b/src/sentry/static/sentry/app/components/organizationIssueList.jsx
index c566645bf7..52f251bde5 100644
--- a/src/sentry/static/sentry/app/components/organizationIssueList.jsx
+++ b/src/sentry/static/sentry/app/components/organizationIssueList.jsx
@@ -7,28 +7,26 @@ import IssueList from './issueList';
 import OrganizationHomeContainer from './organizations/homeContainer';
 import {t} from '../locale';
 
-const OrganizationIssueList = React.createClass({
-  propTypes: {
+class OrganizationIssueList extends React.Component {
+  static propTypes = {
     title: PropTypes.string,
     endpoint: PropTypes.string.isRequired,
     pageSize: PropTypes.number,
-  },
+  };
 
-  getInitialState() {
-    return this.getQueryStringState(this.props);
-  },
+  state = this.getQueryStringState(this.props);
 
   componentWillReceiveProps(nextProps) {
     if (nextProps.location.search !== this.props.location.search) {
       this.setState(this.getQueryStringState(nextProps), this.fetchData);
     }
-  },
+  }
 
   componentWillUnmount() {
     GroupStore.reset();
-  },
+  }
 
-  getQueryStringState(props) {
+  getQueryStringState = props => {
     let location = props.location;
     let status = location.query.hasOwnProperty('status')
       ? location.query.status
@@ -36,7 +34,7 @@ const OrganizationIssueList = React.createClass({
     return {
       status,
     };
-  },
+  };
 
   render() {
     let path = this.props.location.pathname;
@@ -74,7 +72,7 @@ const OrganizationIssueList = React.createClass({
         />
       </OrganizationHomeContainer>
     );
-  },
-});
+  }
+}
 
 export default OrganizationIssueList;
diff --git a/src/sentry/static/sentry/app/components/pagination.jsx b/src/sentry/static/sentry/app/components/pagination.jsx
index 91a831dce4..99d9ef6654 100644
--- a/src/sentry/static/sentry/app/components/pagination.jsx
+++ b/src/sentry/static/sentry/app/components/pagination.jsx
@@ -5,27 +5,25 @@ import {browserHistory} from 'react-router';
 import utils from '../utils';
 import {t} from '../locale';
 
-export default React.createClass({
-  propTypes: {
+export default class Pagination extends React.Component {
+  static propTypes = {
     pageLinks: PropTypes.string,
     to: PropTypes.string,
     onCursor: PropTypes.func,
-  },
+  };
 
-  contextTypes: {
+  static contextTypes = {
     location: PropTypes.object,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      onCursor: (cursor, path, query) => {
-        browserHistory.pushState(null, path, {
-          ...query,
-          cursor,
-        });
-      },
-    };
-  },
+  static defaultProps = {
+    onCursor: (cursor, path, query) => {
+      browserHistory.pushState(null, path, {
+        ...query,
+        cursor,
+      });
+    },
+  };
 
   render() {
     let {onCursor, pageLinks} = this.props;
@@ -73,5 +71,5 @@ export default React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/pill.jsx b/src/sentry/static/sentry/app/components/pill.jsx
index 38e5d78f17..aa46b3dc10 100644
--- a/src/sentry/static/sentry/app/components/pill.jsx
+++ b/src/sentry/static/sentry/app/components/pill.jsx
@@ -2,14 +2,14 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import classNames from 'classnames';
 
-const Pill = React.createClass({
-  propTypes: {
+class Pill extends React.Component {
+  static propTypes = {
     className: PropTypes.string,
     name: PropTypes.string,
     value: PropTypes.any,
-  },
+  };
 
-  renderValue() {
+  renderValue = () => {
     const {value} = this.props;
     if (value === undefined) {
       return [null, null];
@@ -26,7 +26,7 @@ const Pill = React.createClass({
       renderedValue = value.toString();
     }
     return [extraClass, renderedValue];
-  },
+  };
 
   render() {
     const {name, children, className, ...props} = this.props;
@@ -41,7 +41,7 @@ const Pill = React.createClass({
         </span>
       </li>
     );
-  },
-});
+  }
+}
 
 export default Pill;
diff --git a/src/sentry/static/sentry/app/components/pills.jsx b/src/sentry/static/sentry/app/components/pills.jsx
index b6cc8c00d5..64a2128f44 100644
--- a/src/sentry/static/sentry/app/components/pills.jsx
+++ b/src/sentry/static/sentry/app/components/pills.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import classNames from 'classnames';
 
-const Pills = React.createClass({
+class Pills extends React.Component {
   render() {
     let {className, children, ...otherProps} = this.props;
     return (
@@ -9,7 +9,7 @@ const Pills = React.createClass({
         {children}
       </div>
     );
-  },
-});
+  }
+}
 
 export default Pills;
diff --git a/src/sentry/static/sentry/app/components/projectHeader/index.jsx b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
index 800c4f5aca..e7168356f4 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/index.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
@@ -7,12 +7,12 @@ import BookmarkToggle from '../projects/bookmarkToggle';
 
 import {t} from '../../locale';
 
-const ProjectHeader = React.createClass({
-  propTypes: {
+class ProjectHeader extends React.Component {
+  static propTypes = {
     project: PropTypes.object.isRequired,
     organization: PropTypes.object.isRequired,
     activeSection: PropTypes.string,
-  },
+  };
 
   render() {
     let navSection = this.props.activeSection;
@@ -81,7 +81,7 @@ const ProjectHeader = React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
 
 export default ProjectHeader;
diff --git a/src/sentry/static/sentry/app/components/projectLabel.jsx b/src/sentry/static/sentry/app/components/projectLabel.jsx
index 4fe9ec0e81..090fde1f57 100644
--- a/src/sentry/static/sentry/app/components/projectLabel.jsx
+++ b/src/sentry/static/sentry/app/components/projectLabel.jsx
@@ -1,14 +1,11 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import PureRenderMixin from 'react-addons-pure-render-mixin';
 
-const ProjectLabel = React.createClass({
-  propTypes: {
+export default class ProjectLabel extends React.PureComponent {
+  static propTypes = {
     project: PropTypes.object,
     organization: PropTypes.object,
-  },
-
-  mixins: [PureRenderMixin],
+  };
 
   render() {
     let project = this.props.project;
@@ -17,7 +14,5 @@ const ProjectLabel = React.createClass({
         <span className="project-name">{project.name}</span>
       </span>
     );
-  },
-});
-
-export default ProjectLabel;
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/radio.jsx b/src/sentry/static/sentry/app/components/radio.jsx
index 1fa0523910..ac05bc63fe 100644
--- a/src/sentry/static/sentry/app/components/radio.jsx
+++ b/src/sentry/static/sentry/app/components/radio.jsx
@@ -1,18 +1,16 @@
 import React from 'react';
 import classNames from 'classnames';
 
-const Radio = React.createClass({
-  getDefaultProps() {
-    return {
-      checked: false,
-    };
-  },
+class Radio extends React.Component {
+  static defaultProps = {
+    checked: false,
+  };
 
   render() {
     let {className, ...otherProps} = this.props;
     let cx = classNames('radio-select', className);
     return <input type="radio" className={cx} {...otherProps} />;
-  },
-});
+  }
+}
 
 export default Radio;
diff --git a/src/sentry/static/sentry/app/components/repositoryFileSummary.jsx b/src/sentry/static/sentry/app/components/repositoryFileSummary.jsx
index b7ef2723f1..cb929519b2 100644
--- a/src/sentry/static/sentry/app/components/repositoryFileSummary.jsx
+++ b/src/sentry/static/sentry/app/components/repositoryFileSummary.jsx
@@ -19,28 +19,24 @@ Collapsed.propTypes = {
   count: PropTypes.number.isRequired,
 };
 
-const RepositoryFileSummary = React.createClass({
-  propTypes: {
+class RepositoryFileSummary extends React.Component {
+  static propTypes = {
     fileChangeSummary: PropTypes.object,
     repository: PropTypes.string,
-  },
+  };
 
-  statics: {
-    MAX_WHEN_COLLAPSED: 5,
-  },
+  static MAX_WHEN_COLLAPSED = 5;
 
-  getInitialState() {
-    return {
-      loading: true,
-      collapsed: true,
-    };
-  },
+  state = {
+    loading: true,
+    collapsed: true,
+  };
 
-  onCollapseToggle() {
+  onCollapseToggle = () => {
     this.setState({
       collapsed: !this.state.collapsed,
     });
-  },
+  };
 
   render() {
     let {repository, fileChangeSummary} = this.props;
@@ -87,7 +83,7 @@ const RepositoryFileSummary = React.createClass({
         </ul>
       </div>
     );
-  },
-});
+  }
+}
 
 export default RepositoryFileSummary;
diff --git a/src/sentry/static/sentry/app/components/resolutionBox.jsx b/src/sentry/static/sentry/app/components/resolutionBox.jsx
index 7909dab39b..ff4488ad56 100644
--- a/src/sentry/static/sentry/app/components/resolutionBox.jsx
+++ b/src/sentry/static/sentry/app/components/resolutionBox.jsx
@@ -1,19 +1,16 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import PureRenderMixin from 'react-addons-pure-render-mixin';
 
 import Avatar from './avatar';
 import Version from './version';
 import {t, tct} from '../locale';
 
-export default React.createClass({
-  propTypes: {
+export default class ResolutionBox extends React.Component {
+  static propTypes = {
     statusDetails: PropTypes.object.isRequired,
-  },
+  };
 
-  mixins: [PureRenderMixin],
-
-  renderReason() {
+  renderReason = () => {
     let {params, statusDetails} = this.props;
     let actor = statusDetails.actor ? (
       <strong>
@@ -51,14 +48,14 @@ export default React.createClass({
       });
     }
     return t('This issue has been marked as resolved.');
-  },
+  };
 
-  render() {
+  render = () => {
     return (
       <div className="box">
         <span className="icon icon-checkmark" />
         <p>{this.renderReason()}</p>
       </div>
     );
-  },
-});
+  };
+}
diff --git a/src/sentry/static/sentry/app/components/scoreBar.jsx b/src/sentry/static/sentry/app/components/scoreBar.jsx
index e91850a209..9bdf1ed5cb 100644
--- a/src/sentry/static/sentry/app/components/scoreBar.jsx
+++ b/src/sentry/static/sentry/app/components/scoreBar.jsx
@@ -3,8 +3,8 @@ import React from 'react';
 import classNames from 'classnames';
 import '../../less/components/scoreBar.less';
 
-const ScoreBar = React.createClass({
-  propTypes: {
+class ScoreBar extends React.Component {
+  static propTypes = {
     vertical: PropTypes.bool,
     score: PropTypes.number.isRequired,
     /** Array of strings */
@@ -14,18 +14,14 @@ const ScoreBar = React.createClass({
     /** Default controlled by CSS */
     size: PropTypes.number,
     thickness: PropTypes.number,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      palette: [],
-      paletteClassNames: ['low', 'low-med', 'med', 'med-high', 'high'],
-    };
-  },
+  static defaultProps = {
+    palette: [],
+    paletteClassNames: ['low', 'low-med', 'med', 'med-high', 'high'],
+  };
 
-  getInitialState() {
-    return {};
-  },
+  state = {};
 
   render() {
     let {
@@ -82,7 +78,7 @@ const ScoreBar = React.createClass({
         ))}
       </div>
     );
-  },
-});
+  }
+}
 
 export default ScoreBar;
diff --git a/src/sentry/static/sentry/app/components/searchBar.jsx b/src/sentry/static/sentry/app/components/searchBar.jsx
index 6f66ada2f2..e0e16d3fa7 100644
--- a/src/sentry/static/sentry/app/components/searchBar.jsx
+++ b/src/sentry/static/sentry/app/components/searchBar.jsx
@@ -1,63 +1,56 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import ReactDOM from 'react-dom';
-import PureRenderMixin from 'react-addons-pure-render-mixin';
 
-const SearchBar = React.createClass({
-  propTypes: {
+class SearchBar extends React.PureComponent {
+  static propTypes = {
     query: PropTypes.string,
     defaultQuery: PropTypes.string,
     onSearch: PropTypes.func,
     onQueryChange: PropTypes.func,
     placeholder: PropTypes.string,
-  },
+  };
 
-  mixins: [PureRenderMixin],
+  static defaultProps = {
+    defaultQuery: '',
+    query: '',
+    onSearch: function() {},
+    onQueryChange: function() {},
+  };
 
-  getDefaultProps() {
-    return {
-      defaultQuery: '',
-      query: '',
-      onSearch: function() {},
-      onQueryChange: function() {},
-    };
-  },
+  state = {
+    query: this.props.query || this.props.defaultQuery,
+  };
 
-  getInitialState() {
-    return {
-      query: this.props.query || this.props.defaultQuery,
-    };
-  },
-
-  blur() {
+  blur = () => {
     ReactDOM.findDOMNode(this.refs.searchInput).blur();
-  },
+  };
 
-  onSubmit(evt) {
+  onSubmit = evt => {
     evt.preventDefault();
     this.blur();
     this.props.onSearch(this.state.query);
-  },
+  };
 
-  clearSearch() {
+  clearSearch = () => {
     this.setState({query: this.props.defaultQuery}, () =>
       this.props.onSearch(this.state.query)
     );
-  },
+  };
 
-  onQueryFocus() {
+  onQueryFocus = () => {
     this.setState({
       dropdownVisible: true,
     });
-  },
+  };
 
-  onQueryBlur() {
+  onQueryBlur = () => {
     this.setState({dropdownVisible: false});
-  },
+  };
 
-  onQueryChange(evt) {
+  onQueryChange = evt => {
     this.setState({query: evt.target.value});
-  },
+  };
 
   render() {
     return (
@@ -87,7 +80,7 @@ const SearchBar = React.createClass({
         </form>
       </div>
     );
-  },
-});
+  }
+}
 
 export default SearchBar;
diff --git a/src/sentry/static/sentry/app/components/selectInput.jsx b/src/sentry/static/sentry/app/components/selectInput.jsx
index 50d8b4c4ec..846291b1cd 100644
--- a/src/sentry/static/sentry/app/components/selectInput.jsx
+++ b/src/sentry/static/sentry/app/components/selectInput.jsx
@@ -2,31 +2,29 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import jQuery from 'jquery';
 
-const SelectInput = React.createClass({
-  propTypes: {
+class SelectInput extends React.Component {
+  static propTypes = {
     disabled: PropTypes.bool,
     multiple: PropTypes.bool,
     required: PropTypes.bool,
     placeholder: PropTypes.string,
     value: PropTypes.string,
     onChange: PropTypes.func,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      // HTML attrs
-      disabled: false,
-      multiple: false,
-      required: false,
+  static defaultProps = {
+    // HTML attrs
+    disabled: false,
+    multiple: false,
+    required: false,
 
-      // Extra options
-      placeholder: 'Select an option...',
+    // Extra options
+    placeholder: 'Select an option...',
 
-      // Component options
-      value: '',
-      onChange: $.noop,
-    };
-  },
+    // Component options
+    value: '',
+    onChange: $.noop,
+  };
 
   componentDidMount() {
     this.create();
@@ -43,38 +41,38 @@ const SelectInput = React.createClass({
         options[selectedIndex].selected = true;
       }
     }
-  },
+  }
 
   componentWillUpdate() {
     this.destroy();
-  },
+  }
 
   componentDidUpdate() {
     this.create();
-  },
+  }
 
   componentWillUnmount() {
     this.destroy();
-  },
+  }
 
-  getSelect2Value() {
+  getSelect2Value = () => {
     return this.select2.getValue();
-  },
+  };
 
-  create() {
+  create = () => {
     this.select2 = jQuery(this.refs.select).select2({
       width: 'element',
     });
     this.select2.on('change', this.onChange);
-  },
+  };
 
-  destroy() {
+  destroy = () => {
     jQuery(this.refs.select).select2('destroy');
-  },
+  };
 
-  onChange(...args) {
+  onChange = (...args) => {
     this.props.onChange.call(this, this.select2, ...args);
-  },
+  };
 
   render() {
     return (
@@ -82,7 +80,7 @@ const SelectInput = React.createClass({
         {this.props.children}
       </select>
     );
-  },
-});
+  }
+}
 
 export default SelectInput;
diff --git a/src/sentry/static/sentry/app/components/sidebar/userNav.jsx b/src/sentry/static/sentry/app/components/sidebar/userNav.jsx
index 3a2874568b..0fbde054df 100644
--- a/src/sentry/static/sentry/app/components/sidebar/userNav.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/userNav.jsx
@@ -6,14 +6,14 @@ import Avatar from '../avatar';
 import MenuItem from '../menuItem';
 import {t} from '../../locale';
 
-const UserNav = React.createClass({
-  contextTypes: {
+class UserNav extends React.Component {
+  static contextTypes = {
     location: PropTypes.object,
-  },
+  };
 
   shouldComponentUpdate(nextProps, nextState) {
     return false;
-  },
+  }
 
   render() {
     let user = ConfigStore.get('user');
@@ -37,7 +37,7 @@ const UserNav = React.createClass({
         <MenuItem href="/auth/logout/">{t('Sign out')}</MenuItem>
       </DropdownLink>
     );
-  },
-});
+  }
+}
 
 export default UserNav;
diff --git a/src/sentry/static/sentry/app/components/sidebarPanel.jsx b/src/sentry/static/sentry/app/components/sidebarPanel.jsx
index 213bebe4c0..870544e081 100644
--- a/src/sentry/static/sentry/app/components/sidebarPanel.jsx
+++ b/src/sentry/static/sentry/app/components/sidebarPanel.jsx
@@ -2,12 +2,12 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import SidebarPanelItem from './sidebarPanelItem';
 
-const SidebarPanel = React.createClass({
-  propTypes: {
+class SidebarPanel extends React.Component {
+  static propTypes = {
     title: PropTypes.string,
     items: PropTypes.array,
     hidePanel: PropTypes.func,
-  },
+  };
 
   render() {
     return (
@@ -28,7 +28,7 @@ const SidebarPanel = React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
 
 export default SidebarPanel;
diff --git a/src/sentry/static/sentry/app/components/sidebarPanelItem.jsx b/src/sentry/static/sentry/app/components/sidebarPanelItem.jsx
index 74f26f2b19..e17ef80a27 100644
--- a/src/sentry/static/sentry/app/components/sidebarPanelItem.jsx
+++ b/src/sentry/static/sentry/app/components/sidebarPanelItem.jsx
@@ -1,14 +1,14 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
-const SidebarPanelItem = React.createClass({
-  propTypes: {
+class SidebarPanelItem extends React.Component {
+  static propTypes = {
     title: PropTypes.string,
     image: PropTypes.string,
     message: PropTypes.any,
     link: PropTypes.string,
     hasSeen: PropTypes.bool,
-  },
+  };
 
   render() {
     let className = 'sidebar-panel-item';
@@ -35,7 +35,7 @@ const SidebarPanelItem = React.createClass({
         )}
       </div>
     );
-  },
-});
+  }
+}
 
 export default SidebarPanelItem;
diff --git a/src/sentry/static/sentry/app/components/similarScoreCard.jsx b/src/sentry/static/sentry/app/components/similarScoreCard.jsx
index 9e229b2c48..8e4a00e70d 100644
--- a/src/sentry/static/sentry/app/components/similarScoreCard.jsx
+++ b/src/sentry/static/sentry/app/components/similarScoreCard.jsx
@@ -17,16 +17,14 @@ const scoreComponents = {
 // classnames that map to colors to css
 const scoreClassNames = ['low', 'low', 'low-med', 'med', 'med-high', 'high'];
 
-const SimilarScoreCard = React.createClass({
-  propTypes: {
+class SimilarScoreCard extends React.Component {
+  static propTypes = {
     scoreList: PropTypes.arrayOf(PropTypes.array),
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      scoreList: [],
-    };
-  },
+  static defaultProps = {
+    scoreList: [],
+  };
 
   render() {
     let {className, scoreList} = this.props;
@@ -52,7 +50,7 @@ const SimilarScoreCard = React.createClass({
         ))}
       </div>
     );
-  },
-});
+  }
+}
 
 export default SimilarScoreCard;
diff --git a/src/sentry/static/sentry/app/components/similarSpectrum.jsx b/src/sentry/static/sentry/app/components/similarSpectrum.jsx
index 983080e93f..e1cb3f7f6b 100644
--- a/src/sentry/static/sentry/app/components/similarSpectrum.jsx
+++ b/src/sentry/static/sentry/app/components/similarSpectrum.jsx
@@ -4,16 +4,10 @@ import classNames from 'classnames';
 import {t} from '../locale';
 import '../../less/components/similarSpectrum.less';
 
-const SimilarSpectrum = React.createClass({
-  propTypes: {},
-
-  getDefaultProps() {
-    return {};
-  },
-
-  getInitialState() {
-    return {};
-  },
+class SimilarSpectrum extends React.Component {
+  static propTypes = {};
+  static defaultProps = {};
+  state = {};
 
   render() {
     let {className} = this.props;
@@ -30,7 +24,7 @@ const SimilarSpectrum = React.createClass({
         <span>{t('Not Similar')}</span>
       </div>
     );
-  },
-});
+  }
+}
 
 export default SimilarSpectrum;
diff --git a/src/sentry/static/sentry/app/components/splitDiff.jsx b/src/sentry/static/sentry/app/components/splitDiff.jsx
index 3a0a31f1f1..72c77885d8 100644
--- a/src/sentry/static/sentry/app/components/splitDiff.jsx
+++ b/src/sentry/static/sentry/app/components/splitDiff.jsx
@@ -10,22 +10,18 @@ const diffFnMap = {
   lines: diffLines,
 };
 
-const SplitDiff = React.createClass({
-  propTypes: {
+class SplitDiff extends React.Component {
+  static propTypes = {
     base: PropTypes.string,
     target: PropTypes.string,
     type: PropTypes.oneOf(['lines', 'words', 'chars']),
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      type: 'lines',
-    };
-  },
+  static defaultProps = {
+    type: 'lines',
+  };
 
-  getInitialState() {
-    return {};
-  },
+  state = {};
 
   render() {
     let {className, type, base, target} = this.props;
@@ -102,7 +98,7 @@ const SplitDiff = React.createClass({
         </tbody>
       </table>
     );
-  },
-});
+  }
+}
 
 export default SplitDiff;
diff --git a/src/sentry/static/sentry/app/components/stream/groupChart.jsx b/src/sentry/static/sentry/app/components/stream/groupChart.jsx
index 0ef31c0ff3..c8e01182c9 100644
--- a/src/sentry/static/sentry/app/components/stream/groupChart.jsx
+++ b/src/sentry/static/sentry/app/components/stream/groupChart.jsx
@@ -3,11 +3,11 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import BarChart from '../barChart';
 
-const GroupChart = React.createClass({
-  propTypes: {
+class GroupChart extends React.Component {
+  static propTypes = {
     statsPeriod: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
-  },
+  };
 
   shouldComponentUpdate(nextProps) {
     // Sometimes statsPeriod updates before graph data has been
@@ -15,7 +15,7 @@ const GroupChart = React.createClass({
     // don't update until data is available
     let {data, statsPeriod} = nextProps;
     return data.hasOwnProperty(statsPeriod);
-  },
+  }
 
   render() {
     let stats = this.props.statsPeriod
@@ -32,7 +32,7 @@ const GroupChart = React.createClass({
         <BarChart points={chartData} label="events" />
       </LazyLoad>
     );
-  },
-});
+  }
+}
 
 export default GroupChart;
diff --git a/src/sentry/static/sentry/app/components/strictClick.jsx b/src/sentry/static/sentry/app/components/strictClick.jsx
index 9d3639c4d5..a5d6a8e9f2 100644
--- a/src/sentry/static/sentry/app/components/strictClick.jsx
+++ b/src/sentry/static/sentry/app/components/strictClick.jsx
@@ -1,6 +1,5 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import PureRenderMixin from 'react-addons-pure-render-mixin';
 
 /**
  * Usage:
@@ -8,34 +7,28 @@ import PureRenderMixin from 'react-addons-pure-render-mixin';
  *     <button>Some button</button>
  *   </StrictClick>
  */
-const StrictClick = React.createClass({
-  propTypes: {
+class StrictClick extends React.PureComponent {
+  static propTypes = {
     onClick: PropTypes.func,
-  },
+  };
 
-  mixins: [PureRenderMixin],
+  static MAX_DELTA_X = 10;
+  static MAX_DELTA_Y = 10;
 
-  statics: {
-    MAX_DELTA_X: 10,
-    MAX_DELTA_Y: 10,
-  },
+  state = {
+    startCoords: null,
+  };
 
-  getInitialState() {
-    return {
-      startCoords: null,
-    };
-  },
-
-  handleMouseDown: function(evt) {
+  handleMouseDown = evt => {
     this.setState({
       startCoords: {
         x: evt.screenX,
         y: evt.screenY,
       },
     });
-  },
+  };
 
-  handleMouseClick: function(evt) {
+  handleMouseClick = evt => {
     // Click happens if mouse down/up in same element - click will
     // not fire if either initial mouse down OR final ouse up occurs in
     // different element
@@ -51,7 +44,7 @@ const StrictClick = React.createClass({
     this.setState({
       startCoords: null,
     });
-  },
+  };
 
   render() {
     // Bail out early if there is no onClick handler
@@ -61,7 +54,7 @@ const StrictClick = React.createClass({
       onMouseDown: this.handleMouseDown,
       onClick: this.handleMouseClick,
     });
-  },
-});
+  }
+}
 
 export default StrictClick;
diff --git a/src/sentry/static/sentry/app/components/switch.jsx b/src/sentry/static/sentry/app/components/switch.jsx
index 8a9e95ada3..d1cb4f19f0 100644
--- a/src/sentry/static/sentry/app/components/switch.jsx
+++ b/src/sentry/static/sentry/app/components/switch.jsx
@@ -2,15 +2,15 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import classNames from 'classnames';
 
-const Switch = React.createClass({
-  propTypes: {
+class Switch extends React.Component {
+  static propTypes = {
     id: PropTypes.string,
     size: PropTypes.string,
     isActive: PropTypes.bool,
     isLoading: PropTypes.bool,
     isDisabled: PropTypes.bool,
     toggle: PropTypes.func.isRequired,
-  },
+  };
 
   render() {
     let {size, isActive, isLoading, isDisabled, toggle, id} = this.props;
@@ -32,7 +32,7 @@ const Switch = React.createClass({
         <span className="switch-toggle" />
       </div>
     );
-  },
-});
+  }
+}
 
 export default Switch;
diff --git a/src/sentry/static/sentry/app/components/timeSince.jsx b/src/sentry/static/sentry/app/components/timeSince.jsx
index 3bd4ba0df2..a60add26be 100644
--- a/src/sentry/static/sentry/app/components/timeSince.jsx
+++ b/src/sentry/static/sentry/app/components/timeSince.jsx
@@ -2,52 +2,46 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import moment from 'moment-timezone';
 import _ from 'lodash';
-import PureRenderMixin from 'react-addons-pure-render-mixin';
 
 import ConfigStore from '../stores/configStore';
 import {t} from '../locale';
 
-const TimeSince = React.createClass({
-  propTypes: {
+class TimeSince extends React.PureComponent {
+  static propTypes = {
     date: PropTypes.any.isRequired,
     suffix: PropTypes.string,
-  },
+  };
 
-  mixins: [PureRenderMixin],
-
-  statics: {
-    getDateObj(date) {
-      if (_.isString(date) || _.isNumber(date)) {
-        date = new Date(date);
-      }
-      return date;
-    },
-  },
+  static getDateObj(date) {
+    if (_.isString(date) || _.isNumber(date)) {
+      date = new Date(date);
+    }
+    return date;
+  }
 
-  getDefaultProps() {
-    return {
-      suffix: 'ago',
-    };
-  },
+  static defaultProps = {
+    suffix: 'ago',
+  };
 
-  getInitialState() {
-    return {
+  constructor(props) {
+    super(props);
+    this.state = {
       relative: this.getRelativeDate(),
     };
-  },
+  }
 
   componentDidMount() {
     this.setRelativeDateTicker();
-  },
+  }
 
   componentWillUnmount() {
     if (this.ticker) {
       clearTimeout(this.ticker);
       this.ticker = null;
     }
-  },
+  }
 
-  setRelativeDateTicker() {
+  setRelativeDateTicker = () => {
     const ONE_MINUTE_IN_MS = 60000;
 
     this.ticker = setTimeout(() => {
@@ -56,9 +50,9 @@ const TimeSince = React.createClass({
       });
       this.setRelativeDateTicker();
     }, ONE_MINUTE_IN_MS);
-  },
+  };
 
-  getRelativeDate() {
+  getRelativeDate = () => {
     let date = TimeSince.getDateObj(this.props.date);
     if (!this.props.suffix) {
       return moment(date).fromNow(true);
@@ -69,7 +63,7 @@ const TimeSince = React.createClass({
     } else {
       throw new Error('Unsupported time format suffix');
     }
-  },
+  };
 
   render() {
     let date = TimeSince.getDateObj(this.props.date);
@@ -85,7 +79,7 @@ const TimeSince = React.createClass({
         {this.state.relative}
       </time>
     );
-  },
-});
+  }
+}
 
 export default TimeSince;
diff --git a/src/sentry/static/sentry/app/components/truncate.jsx b/src/sentry/static/sentry/app/components/truncate.jsx
index 1bfed30955..085a47d3b1 100644
--- a/src/sentry/static/sentry/app/components/truncate.jsx
+++ b/src/sentry/static/sentry/app/components/truncate.jsx
@@ -1,35 +1,31 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
-const Truncate = React.createClass({
-  propTypes: {
+class Truncate extends React.Component {
+  static propTypes = {
     value: PropTypes.string.isRequired,
     leftTrim: PropTypes.bool,
     maxLength: PropTypes.number,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      leftTrim: false,
-      maxLength: 50,
-    };
-  },
+  static defaultProps = {
+    leftTrim: false,
+    maxLength: 50,
+  };
 
-  getInitialState() {
-    return {
-      isExpanded: false,
-    };
-  },
+  state = {
+    isExpanded: false,
+  };
 
-  onFocus(e) {
+  onFocus = e => {
     let {value, maxLength} = this.props;
     if (value.length <= maxLength) return;
     this.setState({isExpanded: true});
-  },
+  };
 
-  onBlur(e) {
+  onBlur = e => {
     if (this.state.isExpanded) this.setState({isExpanded: false});
-  },
+  };
 
   render() {
     let {leftTrim, maxLength, value} = this.props;
@@ -64,7 +60,7 @@ const Truncate = React.createClass({
         {isTruncated && <span className="full-value">{value}</span>}
       </span>
     );
-  },
-});
+  }
+}
 
 export default Truncate;
diff --git a/src/sentry/static/sentry/app/components/u2fenrollment.jsx b/src/sentry/static/sentry/app/components/u2fenrollment.jsx
index b500921b77..bc97068c17 100644
--- a/src/sentry/static/sentry/app/components/u2fenrollment.jsx
+++ b/src/sentry/static/sentry/app/components/u2fenrollment.jsx
@@ -4,10 +4,10 @@ import React from 'react';
 import U2fInterface from './u2finterface';
 import {t} from '../locale';
 
-const U2fEnrollment = React.createClass({
-  propTypes: {
+class U2fEnrollment extends React.Component {
+  static propTypes = {
     enrollmentData: PropTypes.object,
-  },
+  };
 
   render() {
     return (
@@ -22,7 +22,7 @@ const U2fEnrollment = React.createClass({
         </p>
       </U2fInterface>
     );
-  },
-});
+  }
+}
 
 export default U2fEnrollment;
diff --git a/src/sentry/static/sentry/app/components/u2fsign.jsx b/src/sentry/static/sentry/app/components/u2fsign.jsx
index 5464caf691..07e728bf8a 100644
--- a/src/sentry/static/sentry/app/components/u2fsign.jsx
+++ b/src/sentry/static/sentry/app/components/u2fsign.jsx
@@ -4,17 +4,15 @@ import React from 'react';
 import U2fInterface from './u2finterface';
 import {t} from '../locale';
 
-const U2fSign = React.createClass({
-  propTypes: {
+class U2fSign extends React.Component {
+  static propTypes = {
     challengeData: PropTypes.object,
     displayMode: PropTypes.string,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      displayMode: 'signin',
-    };
-  },
+  static defaultProps = {
+    displayMode: 'signin',
+  };
 
   render() {
     const {displayMode} = this.props;
@@ -42,7 +40,7 @@ const U2fSign = React.createClass({
         </p>
       </U2fInterface>
     );
-  },
-});
+  }
+}
 
 export default U2fSign;
diff --git a/src/sentry/static/sentry/app/components/userInfo.jsx b/src/sentry/static/sentry/app/components/userInfo.jsx
index f52a47d812..0fd3d48b4f 100644
--- a/src/sentry/static/sentry/app/components/userInfo.jsx
+++ b/src/sentry/static/sentry/app/components/userInfo.jsx
@@ -9,10 +9,10 @@ function getUserDisplayName(name) {
   return parts[0].toLowerCase().replace(/[\.-_]+/, ' ');
 }
 
-const UserInfo = React.createClass({
-  propTypes: {
+class UserInfo extends React.Component {
+  static propTypes = {
     user: PropTypes.any.isRequired,
-  },
+  };
 
   render() {
     // XXX(dcramer): not supported by babel
@@ -33,7 +33,7 @@ const UserInfo = React.createClass({
         {displayName}
       </span>
     );
-  },
-});
+  }
+}
 
 export default UserInfo;
diff --git a/src/sentry/static/sentry/app/components/userLetterAvatar.jsx b/src/sentry/static/sentry/app/components/userLetterAvatar.jsx
index bdffce5d5e..da39071320 100644
--- a/src/sentry/static/sentry/app/components/userLetterAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/userLetterAvatar.jsx
@@ -2,20 +2,20 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import LetterAvatar from './letterAvatar';
 
-const UserLetterAvatar = React.createClass({
-  propTypes: {
+class UserLetterAvatar extends React.Component {
+  static propTypes = {
     user: PropTypes.object.isRequired,
-  },
+  };
 
-  getIdentifier() {
+  getIdentifier = () => {
     let user = this.props.user;
     return user.email || user.username || user.id || user.ip_address;
-  },
+  };
 
-  getDisplayName() {
+  getDisplayName = () => {
     let user = this.props.user;
     return user.name || user.email || user.username || '';
-  },
+  };
 
   render() {
     return (
@@ -24,7 +24,7 @@ const UserLetterAvatar = React.createClass({
         displayName={this.getDisplayName()}
       />
     );
-  },
-});
+  }
+}
 
 export default UserLetterAvatar;
diff --git a/src/sentry/static/sentry/app/components/version.jsx b/src/sentry/static/sentry/app/components/version.jsx
index 5828a841fc..c024517f60 100644
--- a/src/sentry/static/sentry/app/components/version.jsx
+++ b/src/sentry/static/sentry/app/components/version.jsx
@@ -4,19 +4,17 @@ import {Link} from 'react-router';
 
 import {getShortVersion} from '../utils';
 
-const Version = React.createClass({
-  propTypes: {
+class Version extends React.Component {
+  static propTypes = {
     anchor: PropTypes.bool,
     version: PropTypes.string.isRequired,
     orgId: PropTypes.string,
     projectId: PropTypes.string,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      anchor: true,
-    };
-  },
+  static defaultProps = {
+    anchor: true,
+  };
 
   render() {
     let {orgId, projectId, version} = this.props;
@@ -32,7 +30,7 @@ const Version = React.createClass({
       );
     }
     return <span title={version}>{shortVersion}</span>;
-  },
-});
+  }
+}
 
 export default Version;
diff --git a/src/sentry/static/sentry/app/views/accountLayout.jsx b/src/sentry/static/sentry/app/views/accountLayout.jsx
index 8d62a728be..46cadc03c3 100644
--- a/src/sentry/static/sentry/app/views/accountLayout.jsx
+++ b/src/sentry/static/sentry/app/views/accountLayout.jsx
@@ -5,7 +5,7 @@ import MenuItem from '../components/menuItem';
 import NarrowLayout from '../components/narrowLayout';
 import {t} from '../locale';
 
-const AccountLayout = React.createClass({
+class AccountLayout extends React.Component {
   render() {
     let header = (
       <div>
@@ -55,7 +55,7 @@ const AccountLayout = React.createClass({
         {this.props.children}
       </NarrowLayout>
     );
-  },
-});
+  }
+}
 
 export default AccountLayout;
diff --git a/src/sentry/static/sentry/app/views/adminBuffer.jsx b/src/sentry/static/sentry/app/views/adminBuffer.jsx
index 2a21f501a6..44b327fcca 100644
--- a/src/sentry/static/sentry/app/views/adminBuffer.jsx
+++ b/src/sentry/static/sentry/app/views/adminBuffer.jsx
@@ -3,13 +3,11 @@ import React from 'react';
 
 import InternalStatChart from '../components/internalStatChart';
 
-const AdminBuffer = React.createClass({
-  getInitialState() {
-    return {
-      since: new Date().getTime() / 1000 - 3600 * 24 * 7,
-      resolution: '1h',
-    };
-  },
+class AdminBuffer extends React.Component {
+  state = {
+    since: new Date().getTime() / 1000 - 3600 * 24 * 7,
+    resolution: '1h',
+  };
 
   render() {
     // TODO(dcramer): show buffer configuration when its moved into option store
@@ -58,7 +56,7 @@ const AdminBuffer = React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
 
 export default AdminBuffer;
diff --git a/src/sentry/static/sentry/app/views/adminLayout.jsx b/src/sentry/static/sentry/app/views/adminLayout.jsx
index 287b4ad80b..12c503a45a 100644
--- a/src/sentry/static/sentry/app/views/adminLayout.jsx
+++ b/src/sentry/static/sentry/app/views/adminLayout.jsx
@@ -7,22 +7,23 @@ import Sidebar from '../components/sidebar';
 import HookStore from '../stores/hookStore';
 import ListLink from '../components/listLink';
 
-export default React.createClass({
-  getInitialState() {
+export default class extends React.Component {
+  constructor(props) {
+    super(props);
     // Allow injection via getsentry et all
     let hooksManage = [];
     HookStore.get('admin:sidebar:manage').forEach(cb => {
       hooksManage.push(cb());
     });
 
-    return {
+    this.state = {
       hooksManage,
     };
-  },
+  }
 
-  getTitle() {
+  getTitle = () => {
     return 'Sentry Admin';
-  },
+  };
 
   render() {
     return (
@@ -78,5 +79,5 @@ export default React.createClass({
         </div>
       </DocumentTitle>
     );
-  },
-});
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/adminOrganizations.jsx b/src/sentry/static/sentry/app/views/adminOrganizations.jsx
index 515429c71e..99ffe9ef5a 100644
--- a/src/sentry/static/sentry/app/views/adminOrganizations.jsx
+++ b/src/sentry/static/sentry/app/views/adminOrganizations.jsx
@@ -6,8 +6,8 @@ import {Link} from 'react-router';
 import ResultGrid from '../components/resultGrid';
 import {t} from '../locale';
 
-const AdminOrganizations = React.createClass({
-  getRow(row) {
+class AdminOrganizations extends React.Component {
+  getRow = row => {
     return [
       <td>
         <strong>
@@ -17,7 +17,7 @@ const AdminOrganizations = React.createClass({
         <small>{row.slug}</small>
       </td>,
     ];
-  },
+  };
 
   render() {
     let columns = [<th>Organization</th>];
@@ -44,7 +44,7 @@ const AdminOrganizations = React.createClass({
         />
       </div>
     );
-  },
-});
+  }
+}
 
 export default AdminOrganizations;
diff --git a/src/sentry/static/sentry/app/views/adminOverview/index.jsx b/src/sentry/static/sentry/app/views/adminOverview/index.jsx
index b485b87d73..f47b6d2f85 100644
--- a/src/sentry/static/sentry/app/views/adminOverview/index.jsx
+++ b/src/sentry/static/sentry/app/views/adminOverview/index.jsx
@@ -4,13 +4,11 @@ import React from 'react';
 import ApiChart from './apiChart';
 import EventChart from './eventChart';
 
-export default React.createClass({
-  getInitialState() {
-    return {
-      since: new Date().getTime() / 1000 - 3600 * 24 * 7,
-      resolution: '1h',
-    };
-  },
+export default class extends React.Component {
+  state = {
+    since: new Date().getTime() / 1000 - 3600 * 24 * 7,
+    resolution: '1h',
+  };
 
   render() {
     return (
@@ -35,5 +33,5 @@ export default React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/adminProjects.jsx b/src/sentry/static/sentry/app/views/adminProjects.jsx
index 4abafa655f..74499777c8 100644
--- a/src/sentry/static/sentry/app/views/adminProjects.jsx
+++ b/src/sentry/static/sentry/app/views/adminProjects.jsx
@@ -10,8 +10,8 @@ export const prettyDate = function(x) {
   return moment(x).format('ll');
 };
 
-const AdminProjects = React.createClass({
-  getRow(row) {
+class AdminProjects extends React.Component {
+  getRow = row => {
     return [
       <td>
         <strong>
@@ -23,7 +23,7 @@ const AdminProjects = React.createClass({
       <td style={{textAlign: 'center'}}>{row.status}</td>,
       <td style={{textAlign: 'right'}}>{prettyDate(row.dateCreated)}</td>,
     ];
-  },
+  };
 
   render() {
     let columns = [
@@ -54,7 +54,7 @@ const AdminProjects = React.createClass({
         />
       </div>
     );
-  },
-});
+  }
+}
 
 export default AdminProjects;
diff --git a/src/sentry/static/sentry/app/views/adminUsers.jsx b/src/sentry/static/sentry/app/views/adminUsers.jsx
index 3317457c6e..f3f4f87f1e 100644
--- a/src/sentry/static/sentry/app/views/adminUsers.jsx
+++ b/src/sentry/static/sentry/app/views/adminUsers.jsx
@@ -10,8 +10,8 @@ export const prettyDate = function(x) {
   return moment(x).format('ll');
 };
 
-const AdminUsers = React.createClass({
-  getRow(row) {
+class AdminUsers extends React.Component {
+  getRow = row => {
     return [
       <td>
         <strong>
@@ -23,7 +23,7 @@ const AdminUsers = React.createClass({
       <td style={{textAlign: 'center'}}>{prettyDate(row.dateJoined)}</td>,
       <td style={{textAlign: 'center'}}>{prettyDate(row.lastLogin)}</td>,
     ];
-  },
+  };
 
   render() {
     let columns = [
@@ -54,7 +54,7 @@ const AdminUsers = React.createClass({
         />
       </div>
     );
-  },
-});
+  }
+}
 
 export default AdminUsers;
diff --git a/src/sentry/static/sentry/app/views/apiLayout.jsx b/src/sentry/static/sentry/app/views/apiLayout.jsx
index ef07912ef1..eb7f47fc15 100644
--- a/src/sentry/static/sentry/app/views/apiLayout.jsx
+++ b/src/sentry/static/sentry/app/views/apiLayout.jsx
@@ -4,7 +4,7 @@ import ListLink from '../components/listLink';
 import NarrowLayout from '../components/narrowLayout';
 import {t} from '../locale';
 
-const ApiDashboard = React.createClass({
+class ApiDashboard extends React.Component {
   render() {
     return (
       <NarrowLayout>
@@ -18,7 +18,7 @@ const ApiDashboard = React.createClass({
         {this.props.children}
       </NarrowLayout>
     );
-  },
-});
+  }
+}
 
 export default ApiDashboard;
diff --git a/src/sentry/static/sentry/app/views/groupMerged/mergedList.jsx b/src/sentry/static/sentry/app/views/groupMerged/mergedList.jsx
index dd1acf34e5..3674312fda 100644
--- a/src/sentry/static/sentry/app/views/groupMerged/mergedList.jsx
+++ b/src/sentry/static/sentry/app/views/groupMerged/mergedList.jsx
@@ -8,22 +8,22 @@ import MergedToolbar from './mergedToolbar';
 import Pagination from '../../components/pagination';
 import QueryCount from '../../components/queryCount';
 
-const MergedList = React.createClass({
-  propTypes: {
+class MergedList extends React.Component {
+  static propTypes = {
     onUnmerge: PropTypes.func.isRequired,
     onToggleCollapse: PropTypes.func.isRequired,
     items: PropTypes.arrayOf(Event),
     pageLinks: PropTypes.string,
-  },
+  };
 
-  renderEmpty() {
+  renderEmpty = () => {
     return (
       <div className="box empty-stream">
         <span className="icon icon-exclamation" />
         <p>{t("There don't seem to be any hashes for this issue.")}</p>
       </div>
     );
-  },
+  };
 
   render() {
     let {items, pageLinks, onToggleCollapse, onUnmerge, ...otherProps} = this.props;
@@ -62,7 +62,7 @@ const MergedList = React.createClass({
         <Pagination pageLinks={pageLinks} />
       </div>
     );
-  },
-});
+  }
+}
 
 export default MergedList;
diff --git a/src/sentry/static/sentry/app/views/groupSimilar/similarList.jsx b/src/sentry/static/sentry/app/views/groupSimilar/similarList.jsx
index fdd23fbc8b..650daaea3a 100644
--- a/src/sentry/static/sentry/app/views/groupSimilar/similarList.jsx
+++ b/src/sentry/static/sentry/app/views/groupSimilar/similarList.jsx
@@ -17,8 +17,8 @@ const SimilarItemPropType = PropTypes.shape({
   isBelowThreshold: PropTypes.bool,
 });
 
-const SimilarList = React.createClass({
-  propTypes: {
+class SimilarList extends React.Component {
+  static propTypes = {
     orgId: PropTypes.string.isRequired,
     groupId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
@@ -26,32 +26,28 @@ const SimilarList = React.createClass({
     pageLinks: PropTypes.string,
     items: PropTypes.arrayOf(SimilarItemPropType),
     filteredItems: PropTypes.arrayOf(SimilarItemPropType),
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      filteredItems: [],
-    };
-  },
+  static defaultProps = {
+    filteredItems: [],
+  };
 
-  getInitialState() {
-    return {
-      showAllItems: false,
-    };
-  },
+  state = {
+    showAllItems: false,
+  };
 
-  renderEmpty() {
+  renderEmpty = () => {
     return (
       <div className="box empty-stream">
         <span className="icon icon-exclamation" />
         <p>{t('There are no similar issues.')}</p>
       </div>
     );
-  },
+  };
 
-  handleShowAll() {
+  handleShowAll = () => {
     this.setState({showAllItems: true});
-  },
+  };
 
   render() {
     let {
@@ -107,7 +103,7 @@ const SimilarList = React.createClass({
         <Pagination pageLinks={pageLinks} />
       </div>
     );
-  },
-});
+  }
+}
 
 export default SimilarList;
diff --git a/src/sentry/static/sentry/app/views/inviteMember/roleSelect.jsx b/src/sentry/static/sentry/app/views/inviteMember/roleSelect.jsx
index 2513cd7896..0b79780422 100644
--- a/src/sentry/static/sentry/app/views/inviteMember/roleSelect.jsx
+++ b/src/sentry/static/sentry/app/views/inviteMember/roleSelect.jsx
@@ -5,8 +5,8 @@ import Radio from '../../components/radio';
 
 import {t} from '../../locale';
 
-const RoleSelect = React.createClass({
-  propTypes: {
+class RoleSelect extends React.Component {
+  static propTypes = {
     /**
      * Whether to disable or not using `allowed` prop from API request
      */
@@ -15,7 +15,7 @@ const RoleSelect = React.createClass({
     selectedRole: PropTypes.string,
     roleList: PropTypes.array,
     setRole: PropTypes.func,
-  },
+  };
 
   render() {
     let {disabled, enforceAllowed, roleList, selectedRole} = this.props;
@@ -49,7 +49,7 @@ const RoleSelect = React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
 
 export default RoleSelect;
diff --git a/src/sentry/static/sentry/app/views/inviteMember/teamSelect.jsx b/src/sentry/static/sentry/app/views/inviteMember/teamSelect.jsx
index 072d29f255..a07ecad93b 100644
--- a/src/sentry/static/sentry/app/views/inviteMember/teamSelect.jsx
+++ b/src/sentry/static/sentry/app/views/inviteMember/teamSelect.jsx
@@ -5,13 +5,13 @@ import Checkbox from '../../components/checkbox';
 
 import {t} from '../../locale';
 
-const TeamSelect = React.createClass({
-  propTypes: {
+class TeamSelect extends React.Component {
+  static propTypes = {
     disabled: PropTypes.bool,
     selectedTeams: PropTypes.instanceOf(Set),
     teams: PropTypes.array,
     toggleTeam: PropTypes.func,
-  },
+  };
 
   render() {
     let {disabled, teams, selectedTeams, toggleTeam} = this.props;
@@ -42,7 +42,7 @@ const TeamSelect = React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
 
 export default TeamSelect;
diff --git a/src/sentry/static/sentry/app/views/myIssues/assignedToMe.jsx b/src/sentry/static/sentry/app/views/myIssues/assignedToMe.jsx
index 97446f8955..16618cf894 100644
--- a/src/sentry/static/sentry/app/views/myIssues/assignedToMe.jsx
+++ b/src/sentry/static/sentry/app/views/myIssues/assignedToMe.jsx
@@ -3,14 +3,14 @@ import React from 'react';
 import OrganizationIssueList from '../../components/organizationIssueList';
 import {t} from '../../locale';
 
-const AssignedToMe = React.createClass({
-  getEndpoint() {
+class AssignedToMe extends React.Component {
+  getEndpoint = () => {
     return `/organizations/${this.props.params.orgId}/members/me/issues/assigned/`;
-  },
+  };
 
-  getTitle() {
+  getTitle = () => {
     return t('Assigned to me');
-  },
+  };
 
   render() {
     return (
@@ -20,7 +20,7 @@ const AssignedToMe = React.createClass({
         {...this.props}
       />
     );
-  },
-});
+  }
+}
 
 export default AssignedToMe;
diff --git a/src/sentry/static/sentry/app/views/myIssues/bookmarked.jsx b/src/sentry/static/sentry/app/views/myIssues/bookmarked.jsx
index ac4c722f5c..0e2268b1f6 100644
--- a/src/sentry/static/sentry/app/views/myIssues/bookmarked.jsx
+++ b/src/sentry/static/sentry/app/views/myIssues/bookmarked.jsx
@@ -3,14 +3,14 @@ import React from 'react';
 import OrganizationIssueList from '../../components/organizationIssueList';
 import {t} from '../../locale';
 
-const Bookmarked = React.createClass({
-  getEndpoint() {
+class Bookmarked extends React.Component {
+  getEndpoint = () => {
     return `/organizations/${this.props.params.orgId}/members/me/issues/bookmarked/`;
-  },
+  };
 
-  getTitle() {
+  getTitle = () => {
     return t('Bookmarks');
-  },
+  };
 
   render() {
     return (
@@ -20,7 +20,7 @@ const Bookmarked = React.createClass({
         {...this.props}
       />
     );
-  },
-});
+  }
+}
 
 export default Bookmarked;
diff --git a/src/sentry/static/sentry/app/views/myIssues/viewed.jsx b/src/sentry/static/sentry/app/views/myIssues/viewed.jsx
index 6fbbcc3a44..7726bb5984 100644
--- a/src/sentry/static/sentry/app/views/myIssues/viewed.jsx
+++ b/src/sentry/static/sentry/app/views/myIssues/viewed.jsx
@@ -3,14 +3,14 @@ import React from 'react';
 import OrganizationIssueList from '../../components/organizationIssueList';
 import {t} from '../../locale';
 
-const Viewed = React.createClass({
-  getEndpoint() {
+class Viewed extends React.Component {
+  getEndpoint = () => {
     return `/organizations/${this.props.params.orgId}/members/me/issues/viewed/`;
-  },
+  };
 
-  getTitle() {
+  getTitle = () => {
     return t('History');
-  },
+  };
 
   render() {
     return (
@@ -20,7 +20,7 @@ const Viewed = React.createClass({
         {...this.props}
       />
     );
-  },
-});
+  }
+}
 
 export default Viewed;
diff --git a/src/sentry/static/sentry/app/views/onboarding/configure/waiting.jsx b/src/sentry/static/sentry/app/views/onboarding/configure/waiting.jsx
index efee28a81f..28e0e7e767 100644
--- a/src/sentry/static/sentry/app/views/onboarding/configure/waiting.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/configure/waiting.jsx
@@ -2,11 +2,11 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import {t} from '../../../locale';
 
-const Waiting = React.createClass({
-  propTypes: {
+class Waiting extends React.Component {
+  static propTypes = {
     skip: PropTypes.func,
     hasEvent: PropTypes.bool.isRequired,
-  },
+  };
 
   render() {
     return (
@@ -28,7 +28,7 @@ const Waiting = React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
 
 export default Waiting;
diff --git a/src/sentry/static/sentry/app/views/onboarding/index.jsx b/src/sentry/static/sentry/app/views/onboarding/index.jsx
index 9bc61d0c17..5d8af299df 100644
--- a/src/sentry/static/sentry/app/views/onboarding/index.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/index.jsx
@@ -4,10 +4,10 @@ import DocumentTitle from 'react-document-title';
 
 import ProgressNodes from './progress';
 
-const OnboardingWizard = React.createClass({
-  contextTypes: {
+class OnboardingWizard extends React.Component {
+  static contextTypes = {
     organization: PropTypes.object,
-  },
+  };
 
   render() {
     return (
@@ -19,7 +19,7 @@ const OnboardingWizard = React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
 
 export default OnboardingWizard;
diff --git a/src/sentry/static/sentry/app/views/onboarding/project/index.jsx b/src/sentry/static/sentry/app/views/onboarding/project/index.jsx
index 0fc642dd17..6e23ab0596 100644
--- a/src/sentry/static/sentry/app/views/onboarding/project/index.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/project/index.jsx
@@ -7,8 +7,8 @@ import PlatformiconTile from './platformiconTile';
 import SelectInput from '../../../components/selectInput';
 import {t} from '../../../locale';
 
-const OnboardingProject = React.createClass({
-  propTypes: {
+class OnboardingProject extends React.Component {
+  static propTypes = {
     next: PropTypes.func,
     setPlatform: PropTypes.func,
     platform: PropTypes.string,
@@ -17,34 +17,30 @@ const OnboardingProject = React.createClass({
     team: PropTypes.string,
     setTeam: PropTypes.func,
     teams: PropTypes.array,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      team: '',
-      setTeam: () => {},
-      teams: [],
-    };
-  },
+  static defaultProps = {
+    team: '',
+    setTeam: () => {},
+    teams: [],
+  };
 
-  getInitialState() {
-    return {projectRequired: false};
-  },
+  state = {projectRequired: false};
 
   componentWillReceiveProps(newProps) {
     this.setWarning(newProps.name);
-  },
+  }
 
-  setWarning(value) {
+  setWarning = value => {
     this.setState({projectRequired: !value});
-  },
+  };
 
-  submit() {
+  submit = () => {
     this.setWarning(this.props.name);
     if (this.props.name) this.props.next();
-  },
+  };
 
-  renderTeamPicker() {
+  renderTeamPicker = () => {
     let {team, teams, setTeam} = this.props;
     if (teams.length < 2) return null;
     return (
@@ -66,7 +62,7 @@ const OnboardingProject = React.createClass({
         </div>
       </div>
     );
-  },
+  };
 
   render() {
     return (
@@ -107,7 +103,7 @@ const OnboardingProject = React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
 
 export default OnboardingProject;
diff --git a/src/sentry/static/sentry/app/views/onboarding/project/platformCard.jsx b/src/sentry/static/sentry/app/views/onboarding/project/platformCard.jsx
index 2a4b4db0c5..a3d5128d27 100644
--- a/src/sentry/static/sentry/app/views/onboarding/project/platformCard.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/project/platformCard.jsx
@@ -5,11 +5,11 @@ import classnames from 'classnames';
 import {flattenedPlatforms} from '../utils';
 import PlatformiconTile from './platformiconTile';
 
-const PlatformCard = React.createClass({
-  propTypes: {
+class PlatformCard extends React.Component {
+  static propTypes = {
     platform: PropTypes.string,
     onClick: PropTypes.func,
-  },
+  };
 
   render() {
     let platform = flattenedPlatforms.find(p => p.id === this.props.platform);
@@ -23,7 +23,7 @@ const PlatformCard = React.createClass({
         <h5> {platform.name} </h5>
       </span>
     );
-  },
-});
+  }
+}
 
 export default PlatformCard;
diff --git a/src/sentry/static/sentry/app/views/onboarding/project/platformiconTile.jsx b/src/sentry/static/sentry/app/views/onboarding/project/platformiconTile.jsx
index 39f58f8a11..a5fb678107 100644
--- a/src/sentry/static/sentry/app/views/onboarding/project/platformiconTile.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/project/platformiconTile.jsx
@@ -1,12 +1,12 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
-const PlatformiconTile = React.createClass({
-  propTypes: {
+class PlatformiconTile extends React.Component {
+  static propTypes = {
     platform: PropTypes.string,
     onClick: PropTypes.func,
     className: PropTypes.string,
-  },
+  };
 
   render() {
     let {platform, className, onClick} = this.props;
@@ -21,7 +21,7 @@ const PlatformiconTile = React.createClass({
         <span className={`platformicon platformicon-${platform}`} />
       </li>
     );
-  },
-});
+  }
+}
 
 export default PlatformiconTile;
diff --git a/src/sentry/static/sentry/app/views/onboarding/project/platformpicker.jsx b/src/sentry/static/sentry/app/views/onboarding/project/platformpicker.jsx
index c38b7ba139..9ecd25bd24 100644
--- a/src/sentry/static/sentry/app/views/onboarding/project/platformpicker.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/project/platformpicker.jsx
@@ -9,25 +9,21 @@ import {t} from '../../../locale';
 
 const categoryList = Object.keys(categoryLists).concat('All');
 
-const PlatformPicker = React.createClass({
-  propTypes: {
+class PlatformPicker extends React.Component {
+  static propTypes = {
     setPlatform: PropTypes.func.isRequired,
     platform: PropTypes.string,
     showOther: PropTypes.bool,
-  },
+  };
 
-  getDefaultProps() {
-    return {showOther: true};
-  },
+  static defaultProps = {showOther: true};
 
-  getInitialState() {
-    return {
-      tab: categoryList[0],
-      filter: (this.props.platform || '').split('-')[0],
-    };
-  },
+  state = {
+    tab: categoryList[0],
+    filter: (this.props.platform || '').split('-')[0],
+  };
 
-  renderPlatformList() {
+  renderPlatformList = () => {
     let {tab} = this.state;
 
     const tabSubset = flattenedPlatforms.filter(
@@ -74,7 +70,7 @@ const PlatformPicker = React.createClass({
         })}
       </ul>
     );
-  },
+  };
 
   render() {
     let {filter} = this.state;
@@ -113,7 +109,7 @@ const PlatformPicker = React.createClass({
         {this.renderPlatformList()}
       </div>
     );
-  },
-});
+  }
+}
 
 export default PlatformPicker;
diff --git a/src/sentry/static/sentry/app/views/organizationDetails.jsx b/src/sentry/static/sentry/app/views/organizationDetails.jsx
index 9bf076d345..995b6b72fd 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails.jsx
@@ -5,7 +5,7 @@ import OrganizationContext from './organizationContext';
 import Footer from '../components/footer';
 import Sidebar from '../components/sidebar';
 
-const OrganizationDetails = React.createClass({
+class OrganizationDetails extends React.Component {
   render() {
     return (
       <OrganizationContext {...this.props}>
@@ -14,7 +14,7 @@ const OrganizationDetails = React.createClass({
         <Footer />
       </OrganizationContext>
     );
-  },
-});
+  }
+}
 
 export default OrganizationDetails;
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/allTeamsList.jsx b/src/sentry/static/sentry/app/views/organizationTeams/allTeamsList.jsx
index f21ef1c9c6..5ad3548865 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/allTeamsList.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/allTeamsList.jsx
@@ -7,13 +7,13 @@ import SentryTypes from '../../proptypes';
 import AllTeamsRow from './allTeamsRow';
 import {tct} from '../../locale';
 
-const AllTeamsList = React.createClass({
-  propTypes: {
+class AllTeamsList extends React.Component {
+  static propTypes = {
     access: PropTypes.object,
     organization: SentryTypes.Organization,
     teamList: PropTypes.arrayOf(SentryTypes.Team),
     openMembership: PropTypes.bool,
-  },
+  };
 
   render() {
     let {access, organization, openMembership} = this.props;
@@ -46,7 +46,7 @@ const AllTeamsList = React.createClass({
         link: <Link to={`/organizations/${organization.slug}/teams/new/`} />,
       }
     );
-  },
-});
+  }
+}
 
 export default AllTeamsList;
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/statsBar.jsx b/src/sentry/static/sentry/app/views/projectDashboard/statsBar.jsx
index 45db19d349..e77fe02470 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/statsBar.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/statsBar.jsx
@@ -2,7 +2,7 @@ import React from 'react';
 
 import {t} from '../../locale';
 
-const TeamStatsBar = React.createClass({
+class TeamStatsBar extends React.Component {
   render() {
     return (
       <div className="row team-stats">
@@ -24,7 +24,7 @@ const TeamStatsBar = React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
 
 export default TeamStatsBar;
diff --git a/src/sentry/static/sentry/app/views/projectDetails.jsx b/src/sentry/static/sentry/app/views/projectDetails.jsx
index 6e00e3358d..e41830d084 100644
--- a/src/sentry/static/sentry/app/views/projectDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetails.jsx
@@ -3,7 +3,7 @@ import React from 'react';
 import ProjectContext from './projects/projectContext';
 import ProjectDetailsLayout from './projectDetailsLayout';
 
-const ProjectDetails = React.createClass({
+class ProjectDetails extends React.Component {
   render() {
     let {projectId, orgId} = this.props.params;
     return (
@@ -11,7 +11,7 @@ const ProjectDetails = React.createClass({
         <ProjectDetailsLayout>{this.props.children}</ProjectDetailsLayout>
       </ProjectContext>
     );
-  },
-});
+  }
+}
 
 export default ProjectDetails;
diff --git a/src/sentry/static/sentry/app/views/projectInstall/gettingStarted.jsx b/src/sentry/static/sentry/app/views/projectInstall/gettingStarted.jsx
index 1c05e64b91..66ff335f69 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/gettingStarted.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/gettingStarted.jsx
@@ -5,11 +5,11 @@ import ProjectContext from '../projects/projectContext';
 import ProjectDocsContext from './docsContext';
 import ProjectSelector from '../../components/projectHeader/projectSelector';
 
-const GettingStartedBody = React.createClass({
-  contextTypes: {
+class GettingStartedBody extends React.Component {
+  static contextTypes = {
     project: PropTypes.object,
     organization: PropTypes.object,
-  },
+  };
 
   render() {
     let {project, organization} = this.context;
@@ -32,10 +32,10 @@ const GettingStartedBody = React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
 
-const GettingStarted = React.createClass({
+class GettingStarted extends React.Component {
   render() {
     let {projectId, orgId} = this.props.params;
     return (
@@ -43,7 +43,7 @@ const GettingStarted = React.createClass({
         <GettingStartedBody>{this.props.children}</GettingStartedBody>
       </ProjectContext>
     );
-  },
-});
+  }
+}
 
 export default GettingStarted;
diff --git a/src/sentry/static/sentry/app/views/projectInstall/languageNav.jsx b/src/sentry/static/sentry/app/views/projectInstall/languageNav.jsx
index c90cb7d9ba..a275110515 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/languageNav.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/languageNav.jsx
@@ -1,21 +1,19 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
-const LanguageNav = React.createClass({
-  propTypes: {
+class LanguageNav extends React.Component {
+  static propTypes = {
     name: PropTypes.string.isRequired,
     active: PropTypes.bool,
-  },
+  };
 
-  getInitialState() {
-    return {
-      isVisible: this.props.active || false,
-    };
-  },
+  state = {
+    isVisible: this.props.active || false,
+  };
 
-  toggle() {
+  toggle = () => {
     this.setState({isVisible: !this.state.isVisible});
-  },
+  };
 
   render() {
     let {isVisible} = this.state;
@@ -44,7 +42,7 @@ const LanguageNav = React.createClass({
         </ul>
       </div>
     );
-  },
-});
+  }
+}
 
 export default LanguageNav;
diff --git a/src/sentry/static/sentry/app/views/projectInstall/overview.jsx b/src/sentry/static/sentry/app/views/projectInstall/overview.jsx
index 644796d27a..f4a931847f 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/overview.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/overview.jsx
@@ -7,22 +7,20 @@ import PlatformPicker from '../onboarding/project/platformpicker';
 
 import {t, tct} from '../../locale';
 
-const ProjectInstallOverview = React.createClass({
-  propTypes: {
+class ProjectInstallOverview extends React.Component {
+  static propTypes = {
     platformData: PropTypes.object,
-  },
+  };
 
-  getInitialState() {
-    return {
-      data: this.props.platformData,
-    };
-  },
+  state = {
+    data: this.props.platformData,
+  };
 
-  isGettingStarted() {
+  isGettingStarted = () => {
     return location.href.indexOf('getting-started') > 0;
-  },
+  };
 
-  redirectToDocs(platform) {
+  redirectToDocs = platform => {
     let {orgId, projectId} = this.props.params;
     let rootUrl = `/${orgId}/${projectId}/settings/install`;
 
@@ -31,11 +29,11 @@ const ProjectInstallOverview = React.createClass({
     }
 
     browserHistory.push(`${rootUrl}/${platform}/`);
-  },
+  };
 
-  toggleDsn() {
+  toggleDsn = () => {
     this.setState({showDsn: !this.state.showDsn});
-  },
+  };
 
   render() {
     let {data} = this.state;
@@ -98,7 +96,7 @@ const ProjectInstallOverview = React.createClass({
         </p>
       </div>
     );
-  },
-});
+  }
+}
 
 export default ProjectInstallOverview;
diff --git a/src/sentry/static/sentry/app/views/projectIssueTracking.jsx b/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
index 207c64c06d..c745a30d09 100644
--- a/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
+++ b/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
@@ -2,12 +2,12 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import PluginConfig from '../components/pluginConfig';
 
-const ProjectIssueTracking = React.createClass({
-  propTypes: {
+class ProjectIssueTracking extends React.Component {
+  static propTypes = {
     organization: PropTypes.object.isRequired,
     project: PropTypes.object.isRequired,
     dataList: PropTypes.array.isRequired,
-  },
+  };
 
   render() {
     if (!this.props.dataList.length) {
@@ -21,7 +21,7 @@ const ProjectIssueTracking = React.createClass({
         })}
       </div>
     );
-  },
-});
+  }
+}
 
 export default ProjectIssueTracking;
diff --git a/src/sentry/static/sentry/app/views/projectReleases/releaseList.jsx b/src/sentry/static/sentry/app/views/projectReleases/releaseList.jsx
index 1ff35dc499..7fe12457f0 100644
--- a/src/sentry/static/sentry/app/views/projectReleases/releaseList.jsx
+++ b/src/sentry/static/sentry/app/views/projectReleases/releaseList.jsx
@@ -6,12 +6,12 @@ import TimeSince from '../../components/timeSince';
 import Version from '../../components/version';
 import LatestDeployOrReleaseTime from '../../components/latestDeployOrReleaseTime';
 
-const ReleaseList = React.createClass({
-  propTypes: {
+class ReleaseList extends React.Component {
+  static propTypes = {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
     releaseList: PropTypes.array.isRequired,
-  },
+  };
 
   render() {
     let {orgId, projectId} = this.props;
@@ -51,7 +51,7 @@ const ReleaseList = React.createClass({
         })}
       </ul>
     );
-  },
-});
+  }
+}
 
 export default ReleaseList;
diff --git a/src/sentry/static/sentry/app/views/releaseAllEvents.jsx b/src/sentry/static/sentry/app/views/releaseAllEvents.jsx
index c86b97ccb7..93eb7cd7dd 100644
--- a/src/sentry/static/sentry/app/views/releaseAllEvents.jsx
+++ b/src/sentry/static/sentry/app/views/releaseAllEvents.jsx
@@ -4,10 +4,10 @@ import {Link} from 'react-router';
 import GroupList from '../components/groupList';
 import {t} from '../locale';
 
-const ReleaseAllEvents = React.createClass({
-  contextTypes: {
+class ReleaseAllEvents extends React.Component {
+  static contextTypes = {
     release: PropTypes.object,
-  },
+  };
 
   render() {
     let {orgId, projectId} = this.props.params;
@@ -33,7 +33,7 @@ const ReleaseAllEvents = React.createClass({
         />
       </div>
     );
-  },
-});
+  }
+}
 
 export default ReleaseAllEvents;
diff --git a/src/sentry/static/sentry/app/views/releaseNewEvents.jsx b/src/sentry/static/sentry/app/views/releaseNewEvents.jsx
index 2681c5ce52..8aea415ff9 100644
--- a/src/sentry/static/sentry/app/views/releaseNewEvents.jsx
+++ b/src/sentry/static/sentry/app/views/releaseNewEvents.jsx
@@ -4,10 +4,10 @@ import {Link} from 'react-router';
 import GroupList from '../components/groupList';
 import {t} from '../locale';
 
-const ReleaseNewEvents = React.createClass({
-  contextTypes: {
+class ReleaseNewEvents extends React.Component {
+  static contextTypes = {
     release: PropTypes.object,
-  },
+  };
 
   render() {
     let {orgId, projectId} = this.props.params;
@@ -33,7 +33,7 @@ const ReleaseNewEvents = React.createClass({
         />
       </div>
     );
-  },
-});
+  }
+}
 
 export default ReleaseNewEvents;
diff --git a/src/sentry/static/sentry/app/views/routeError.jsx b/src/sentry/static/sentry/app/views/routeError.jsx
index 73e21d1fc3..a5c04b75bc 100644
--- a/src/sentry/static/sentry/app/views/routeError.jsx
+++ b/src/sentry/static/sentry/app/views/routeError.jsx
@@ -3,12 +3,12 @@ import PropTypes from 'prop-types';
 import Raven from 'raven-js';
 import React from 'react';
 
-const RouteError = React.createClass({
-  propTypes: {
+class RouteError extends React.Component {
+  static propTypes = {
     error: PropTypes.object.isRequired,
     // not used yet, but future proofing
     onRetry: PropTypes.func,
-  },
+  };
 
   componentWillMount() {
     // TODO(dcramer): show something in addition to embed (that contains it?)
@@ -22,14 +22,14 @@ const RouteError = React.createClass({
         Raven.showReportDialog();
       }.bind(this)
     );
-  },
+  }
 
   componentWillUnmount() {
     if (this._timeout) {
       window.clearTimeout(this._timeout);
     }
     $('.sentry-error-embed-wrapper').remove();
-  },
+  }
 
   render() {
     // TODO(dcramer): show additional resource links
@@ -70,7 +70,7 @@ const RouteError = React.createClass({
         </ul>
       </div>
     );
-  },
-});
+  }
+}
 
 export default RouteError;
diff --git a/src/sentry/static/sentry/app/views/routeNotFound.jsx b/src/sentry/static/sentry/app/views/routeNotFound.jsx
index d623542516..b9c24bdf3f 100644
--- a/src/sentry/static/sentry/app/views/routeNotFound.jsx
+++ b/src/sentry/static/sentry/app/views/routeNotFound.jsx
@@ -4,10 +4,10 @@ import Footer from '../components/footer';
 import Sidebar from '../components/sidebar';
 import NotFound from '../components/errors/notFound';
 
-const RouteNotFound = React.createClass({
-  getTitle() {
+class RouteNotFound extends React.Component {
+  getTitle = () => {
     return 'Page Not Found';
-  },
+  };
 
   render() {
     // TODO(dcramer): show additional resource links
@@ -26,7 +26,7 @@ const RouteNotFound = React.createClass({
         </div>
       </DocumentTitle>
     );
-  },
-});
+  }
+}
 
 export default RouteNotFound;
diff --git a/src/sentry/static/sentry/app/views/ruleEditor/ruleNode.jsx b/src/sentry/static/sentry/app/views/ruleEditor/ruleNode.jsx
index 2d8ee043d1..a6ebf4a2c2 100644
--- a/src/sentry/static/sentry/app/views/ruleEditor/ruleNode.jsx
+++ b/src/sentry/static/sentry/app/views/ruleEditor/ruleNode.jsx
@@ -3,14 +3,14 @@ import React from 'react';
 import ReactDOM from 'react-dom';
 import $ from 'jquery';
 
-const RuleNode = React.createClass({
-  propTypes: {
+class RuleNode extends React.Component {
+  static propTypes = {
     data: PropTypes.object.isRequired,
     node: PropTypes.shape({
       html: PropTypes.string.isRequired,
     }).isRequired,
     onDelete: PropTypes.func.isRequired,
-  },
+  };
 
   componentDidMount() {
     let $html = $(ReactDOM.findDOMNode(this.refs.html));
@@ -36,7 +36,7 @@ const RuleNode = React.createClass({
         },
       });
     });
-  },
+  }
 
   render() {
     let {data, node} = this.props;
@@ -53,7 +53,7 @@ const RuleNode = React.createClass({
         </td>
       </tr>
     );
-  },
-});
+  }
+}
 
 export default RuleNode;
diff --git a/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx b/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx
index e12118b9d8..ec4c79fd13 100644
--- a/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx
+++ b/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx
@@ -4,23 +4,24 @@ import React from 'react';
 import SelectInput from '../../components/selectInput';
 import RuleNode from './ruleNode';
 
-const RuleNodeList = React.createClass({
-  propTypes: {
+class RuleNodeList extends React.Component {
+  static propTypes = {
     initialItems: PropTypes.array,
     nodes: PropTypes.array.isRequired,
-  },
+  };
 
-  getInitialState() {
+  constructor(props) {
+    super(props);
     let counter = 0;
-    let initialItems = (this.props.initialItems || []).map(item => {
+    let initialItems = (props.initialItems || []).map(item => {
       return {...item, key_attr: counter++};
     });
 
-    return {
+    this.state = {
       items: initialItems,
       counter,
     };
-  },
+  }
 
   componentWillMount() {
     this._nodesById = {};
@@ -28,9 +29,9 @@ const RuleNodeList = React.createClass({
     this.props.nodes.forEach(node => {
       this._nodesById[node.id] = node;
     });
-  },
+  }
 
-  onAddRow(sel) {
+  onAddRow = sel => {
     let nodeId = sel.val();
     if (!nodeId) return;
 
@@ -48,18 +49,18 @@ const RuleNodeList = React.createClass({
       items: this.state.items,
       counter: this.state.counter + 1,
     });
-  },
+  };
 
-  onDeleteRow(idx, e) {
+  onDeleteRow = (idx, e) => {
     this.state.items.splice(idx, 1);
     this.setState({
       items: this.state.items,
     });
-  },
+  };
 
-  getNode(id) {
+  getNode = id => {
     return this._nodesById[id];
-  },
+  };
 
   render() {
     return (
@@ -92,7 +93,7 @@ const RuleNodeList = React.createClass({
         </fieldset>
       </div>
     );
-  },
-});
+  }
+}
 
 export default RuleNodeList;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/stats/projectTable.jsx b/src/sentry/static/sentry/app/views/settings/organization/stats/projectTable.jsx
index c7e75eab7d..561144ca8d 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/stats/projectTable.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/stats/projectTable.jsx
@@ -1,7 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import {Link} from 'react-router';
-import PureRenderMixin from 'react-addons-pure-render-mixin';
 
 import Count from '../../../../components/count';
 import {t} from '../../../../locale';
@@ -16,15 +15,13 @@ let getPercent = (item, total) => {
   return parseInt(item / total * 100, 10) + '%';
 };
 
-const ProjectTable = React.createClass({
-  propTypes: {
+class ProjectTable extends React.PureComponent {
+  static propTypes = {
     projectMap: PropTypes.object.isRequired,
     projectTotals: PropTypes.array.isRequired,
     orgTotal: PropTypes.object.isRequired,
     organization: PropTypes.object.isRequired,
-  },
-
-  mixins: [PureRenderMixin],
+  };
 
   render() {
     let projectMap = this.props.projectMap;
@@ -101,7 +98,7 @@ const ProjectTable = React.createClass({
         </tbody>
       </table>
     );
-  },
-});
+  }
+}
 
 export default ProjectTable;
diff --git a/src/sentry/static/sentry/app/views/settings/team/allTeamsList.jsx b/src/sentry/static/sentry/app/views/settings/team/allTeamsList.jsx
index 0716818dfd..6fbdd91f58 100644
--- a/src/sentry/static/sentry/app/views/settings/team/allTeamsList.jsx
+++ b/src/sentry/static/sentry/app/views/settings/team/allTeamsList.jsx
@@ -8,14 +8,14 @@ import Panel from '../components/panel';
 import AllTeamsRow from './allTeamsRow';
 import {tct} from '../../../locale';
 
-const AllTeamsList = React.createClass({
-  propTypes: {
+class AllTeamsList extends React.Component {
+  static propTypes = {
     urlPrefix: PropTypes.string,
     access: PropTypes.object,
     organization: SentryTypes.Organization,
     teamList: PropTypes.arrayOf(SentryTypes.Team),
     openMembership: PropTypes.bool,
-  },
+  };
 
   render() {
     let {access, organization, urlPrefix, openMembership} = this.props;
@@ -43,7 +43,7 @@ const AllTeamsList = React.createClass({
         link: <Link to={`${urlPrefix}teams/new/`} />,
       }
     );
-  },
-});
+  }
+}
 
 export default AllTeamsList;
diff --git a/src/sentry/static/sentry/app/views/sharedGroupDetails/sharedGroupHeader.jsx b/src/sentry/static/sentry/app/views/sharedGroupDetails/sharedGroupHeader.jsx
index 5668b8bb88..4352d75eed 100644
--- a/src/sentry/static/sentry/app/views/sharedGroupDetails/sharedGroupHeader.jsx
+++ b/src/sentry/static/sentry/app/views/sharedGroupDetails/sharedGroupHeader.jsx
@@ -1,10 +1,10 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
-const SharedGroupHeader = React.createClass({
-  propTypes: {
+class SharedGroupHeader extends React.Component {
+  static propTypes = {
     group: PropTypes.object.isRequired,
-  },
+  };
 
   render() {
     let group = this.props.group;
@@ -19,7 +19,7 @@ const SharedGroupHeader = React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
 
 export default SharedGroupHeader;
diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/stream/filters.jsx
index 41c4b0444a..acd28454c7 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filters.jsx
@@ -6,8 +6,8 @@ import SearchBar from './searchBar';
 import SortOptions from './sortOptions';
 import {t} from '../../locale';
 
-const StreamFilters = React.createClass({
-  propTypes: {
+class StreamFilters extends React.Component {
+  static propTypes = {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
     access: PropTypes.object.isRequired,
@@ -28,23 +28,21 @@ const StreamFilters = React.createClass({
     onSearch: PropTypes.func,
     onSidebarToggle: PropTypes.func,
     onSavedSearchCreate: PropTypes.func.isRequired,
-  },
+  };
 
-  contextTypes: {
+  static contextTypes = {
     location: PropTypes.object,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      defaultQuery: '',
-      sort: '',
-      filter: '',
-      query: null,
-      onSortChange: function() {},
-      onSearch: function() {},
-      onSidebarToggle: function() {},
-    };
-  },
+  static defaultProps = {
+    defaultQuery: '',
+    sort: '',
+    filter: '',
+    query: null,
+    onSortChange: function() {},
+    onSearch: function() {},
+    onSidebarToggle: function() {},
+  };
 
   render() {
     let {
@@ -111,7 +109,7 @@ const StreamFilters = React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
 
 export default StreamFilters;
diff --git a/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx b/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
index 79ce2f1ef4..077eb8396b 100644
--- a/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
@@ -1,32 +1,27 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import PureRenderMixin from 'react-addons-pure-render-mixin';
 import classNames from 'classnames';
 
 import LoadingIndicator from '../../components/loadingIndicator';
 
-const SearchDropdown = React.createClass({
-  propTypes: {
+class SearchDropdown extends React.PureComponent {
+  static propTypes = {
     items: PropTypes.array.isRequired,
     searchSubstring: PropTypes.string,
     onClick: PropTypes.func.isRequired,
     loading: PropTypes.bool,
-  },
+  };
 
-  mixins: [PureRenderMixin],
+  static defaultProps = {
+    searchSubstring: '',
+    onClick: function() {},
+  };
 
-  getDefaultProps() {
-    return {
-      searchSubstring: '',
-      onClick: function() {},
-    };
-  },
-
-  onClick(itemValue) {
+  onClick = itemValue => {
     this.props.onClick(itemValue);
-  },
+  };
 
-  renderDescription(item) {
+  renderDescription = item => {
     let searchSubstring = this.props.searchSubstring;
     if (!searchSubstring) return item.desc;
 
@@ -42,7 +37,7 @@ const SearchDropdown = React.createClass({
         {text.substr(idx + searchSubstring.length)}
       </span>
     );
-  },
+  };
 
   render() {
     return (
@@ -78,7 +73,7 @@ const SearchDropdown = React.createClass({
         </ul>
       </div>
     );
-  },
-});
+  }
+}
 
 export default SearchDropdown;
diff --git a/src/sentry/static/sentry/app/views/stream/sortOptions.jsx b/src/sentry/static/sentry/app/views/stream/sortOptions.jsx
index 002364ae4a..d8c185145c 100644
--- a/src/sentry/static/sentry/app/views/stream/sortOptions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/sortOptions.jsx
@@ -1,31 +1,26 @@
-import PureRenderMixin from 'react-addons-pure-render-mixin';
 import PropTypes from 'prop-types';
 import React from 'react';
 import DropdownLink from '../../components/dropdownLink';
 import MenuItem from '../../components/menuItem';
 import {t} from '../../locale';
 
-const SortOptions = React.createClass({
-  propTypes: {
+class SortOptions extends React.PureComponent {
+  static propTypes = {
     sort: PropTypes.string,
     onSelect: PropTypes.func,
-  },
+  };
 
-  mixins: [PureRenderMixin],
-
-  getInitialState() {
-    return {
-      sortKey: this.props.sort || 'date',
-    };
-  },
+  state = {
+    sortKey: this.props.sort || 'date',
+  };
 
   componentWillReceiveProps(nextProps) {
     this.setState({
       sortKey: nextProps.sort || 'date',
     });
-  },
+  }
 
-  getMenuItem(key) {
+  getMenuItem = key => {
     return (
       <MenuItem
         onSelect={this.onSelect}
@@ -35,16 +30,16 @@ const SortOptions = React.createClass({
         {this.getSortLabel(key)}
       </MenuItem>
     );
-  },
+  };
 
-  onSelect(sort) {
+  onSelect = sort => {
     this.setState({sortKey: sort});
     if (this.props.onSelect) {
       this.props.onSelect(sort);
     }
-  },
+  };
 
-  getSortLabel(key) {
+  getSortLabel = key => {
     switch (key) {
       case 'new':
         return t('First Seen');
@@ -56,7 +51,7 @@ const SortOptions = React.createClass({
       default:
         return t('Last Seen');
     }
-  },
+  };
 
   render() {
     let dropdownTitle = (
@@ -74,7 +69,7 @@ const SortOptions = React.createClass({
         {this.getMenuItem('freq')}
       </DropdownLink>
     );
-  },
-});
+  }
+}
 
 export default SortOptions;
diff --git a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
index 859c655a46..a03ad5f436 100644
--- a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
+++ b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
@@ -3,38 +3,32 @@ import React from 'react';
 import ReactDOM from 'react-dom';
 import _ from 'lodash';
 
-const StreamTagFilter = React.createClass({
-  propTypes: {
+class StreamTagFilter extends React.Component {
+  static propTypes = {
     tag: PropTypes.object.isRequired,
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
     value: PropTypes.string,
     onSelect: PropTypes.func,
-  },
-
-  statics: {
-    tagValueToSelect2Format: key => {
-      return {
-        id: key,
-        text: key,
-      };
-    },
-  },
-
-  getDefaultProps() {
-    return {
-      tag: {},
-      value: '',
-    };
-  },
+  };
 
-  getInitialState() {
+  static tagValueToSelect2Format = key => {
     return {
-      query: '',
-      loading: false,
-      value: this.props.value,
+      id: key,
+      text: key,
     };
-  },
+  };
+
+  static defaultProps = {
+    tag: {},
+    value: '',
+  };
+
+  state = {
+    query: '',
+    loading: false,
+    value: this.props.value,
+  };
 
   componentDidMount() {
     let select = this.refs.select;
@@ -75,7 +69,7 @@ const StreamTagFilter = React.createClass({
       .select2(selectOpts)
       .select2('val', this.state.value)
       .on('change', this.onSelectValue);
-  },
+  }
 
   componentWillReceiveProps(nextProps) {
     if (nextProps.value !== this.state.value) {
@@ -89,26 +83,26 @@ const StreamTagFilter = React.createClass({
         }
       );
     }
-  },
+  }
 
   componentWillUnmount() {
     let select = ReactDOM.findDOMNode(this.refs.select);
     $(select).select2('destroy');
-  },
+  }
 
-  getTagValuesAPIEndpoint() {
+  getTagValuesAPIEndpoint = () => {
     return `/api/0/projects/${this.props.orgId}/${this.props.projectId}/tags/${this.props
       .tag.key}/values/`;
-  },
+  };
 
-  onSelectValue(evt) {
+  onSelectValue = evt => {
     let val = evt.target.value;
     this.setState({
       value: val,
     });
 
     this.props.onSelect && this.props.onSelect(this.props.tag, val);
-  },
+  };
 
   render() {
     // NOTE: need to specify empty onChange handler on <select> - even though this
@@ -131,7 +125,7 @@ const StreamTagFilter = React.createClass({
         )}
       </div>
     );
-  },
-});
+  }
+}
 
 export default StreamTagFilter;
diff --git a/tests/js/spec/components/actions/__snapshots__/ignore.spec.jsx.snap b/tests/js/spec/components/actions/__snapshots__/ignore.spec.jsx.snap
index 9aefaae2bc..97e7a4b77f 100644
--- a/tests/js/spec/components/actions/__snapshots__/ignore.spec.jsx.snap
+++ b/tests/js/spec/components/actions/__snapshots__/ignore.spec.jsx.snap
@@ -15,7 +15,7 @@ exports[`IgnoreActions with confirmation step renders 1`] = `
       }
     }
   >
-    <customIgnoreDurationModal
+    <CustomIgnoreDurationModal
       label="Ignore this issue until it occurs after .."
       onCanceled={[Function]}
       onSelected={[Function]}
@@ -69,8 +69,8 @@ exports[`IgnoreActions with confirmation step renders 1`] = `
           show={false}
         />
       </Modal>
-    </customIgnoreDurationModal>
-    <customIgnoreCountModal
+    </CustomIgnoreDurationModal>
+    <CustomIgnoreCountModal
       countLabel="Number of times"
       countName="ignoreCount"
       label="Ignore this issue until it occurs again .. "
@@ -143,8 +143,8 @@ exports[`IgnoreActions with confirmation step renders 1`] = `
           show={false}
         />
       </Modal>
-    </customIgnoreCountModal>
-    <customIgnoreCountModal
+    </CustomIgnoreCountModal>
+    <CustomIgnoreCountModal
       countLabel="Numbers of users"
       countName="ignoreUserCount"
       label="Ignore this issue until it affects an additional .. "
@@ -217,7 +217,7 @@ exports[`IgnoreActions with confirmation step renders 1`] = `
           show={false}
         />
       </Modal>
-    </customIgnoreCountModal>
+    </CustomIgnoreCountModal>
     <div
       className="btn-group"
     >
@@ -4851,7 +4851,7 @@ exports[`IgnoreActions without confirmation renders 1`] = `
       }
     }
   >
-    <customIgnoreDurationModal
+    <CustomIgnoreDurationModal
       label="Ignore this issue until it occurs after .."
       onCanceled={[Function]}
       onSelected={[Function]}
@@ -4905,8 +4905,8 @@ exports[`IgnoreActions without confirmation renders 1`] = `
           show={false}
         />
       </Modal>
-    </customIgnoreDurationModal>
-    <customIgnoreCountModal
+    </CustomIgnoreDurationModal>
+    <CustomIgnoreCountModal
       countLabel="Number of times"
       countName="ignoreCount"
       label="Ignore this issue until it occurs again .. "
@@ -4979,8 +4979,8 @@ exports[`IgnoreActions without confirmation renders 1`] = `
           show={false}
         />
       </Modal>
-    </customIgnoreCountModal>
-    <customIgnoreCountModal
+    </CustomIgnoreCountModal>
+    <CustomIgnoreCountModal
       countLabel="Numbers of users"
       countName="ignoreUserCount"
       label="Ignore this issue until it affects an additional .. "
@@ -5053,7 +5053,7 @@ exports[`IgnoreActions without confirmation renders 1`] = `
           show={false}
         />
       </Modal>
-    </customIgnoreCountModal>
+    </CustomIgnoreCountModal>
     <div
       className="btn-group"
     >
diff --git a/tests/js/spec/components/actions/__snapshots__/resolve.spec.jsx.snap b/tests/js/spec/components/actions/__snapshots__/resolve.spec.jsx.snap
index 9a2352c945..b109cb5435 100644
--- a/tests/js/spec/components/actions/__snapshots__/resolve.spec.jsx.snap
+++ b/tests/js/spec/components/actions/__snapshots__/resolve.spec.jsx.snap
@@ -19,7 +19,7 @@ exports[`ResolveActions with confirmation step renders 1`] = `
       }
     }
   >
-    <customResolutionModal
+    <CustomResolutionModal
       onCanceled={[Function]}
       onSelected={[Function]}
       orgId="org-1"
@@ -74,7 +74,7 @@ exports[`ResolveActions with confirmation step renders 1`] = `
           show={false}
         />
       </Modal>
-    </customResolutionModal>
+    </CustomResolutionModal>
     <div
       className="btn-group"
     >
@@ -412,7 +412,7 @@ exports[`ResolveActions without confirmation renders 1`] = `
       }
     }
   >
-    <customResolutionModal
+    <CustomResolutionModal
       onCanceled={[Function]}
       onSelected={[Function]}
       orgId="org-1"
@@ -467,7 +467,7 @@ exports[`ResolveActions without confirmation renders 1`] = `
           show={false}
         />
       </Modal>
-    </customResolutionModal>
+    </CustomResolutionModal>
     <div
       className="btn-group"
     >
diff --git a/tests/js/spec/views/__snapshots__/groupMergedView.spec.jsx.snap b/tests/js/spec/views/__snapshots__/groupMergedView.spec.jsx.snap
index 3424d8014f..dd6fbab9ce 100644
--- a/tests/js/spec/views/__snapshots__/groupMergedView.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/groupMergedView.spec.jsx.snap
@@ -1331,7 +1331,7 @@ exports[`Issues -> Merged View renders with mocked data 1`] = `
             </div>
           </MergedItem>
         </div>
-        <pagination
+        <Pagination
           onCursor={[Function]}
         />
       </div>
@@ -2655,7 +2655,7 @@ exports[`Issues -> Merged View renders with mocked data 2`] = `
             </div>
           </MergedItem>
         </div>
-        <pagination
+        <Pagination
           onCursor={[Function]}
         />
       </div>
diff --git a/tests/js/spec/views/__snapshots__/groupSimilarView.spec.jsx.snap b/tests/js/spec/views/__snapshots__/groupSimilarView.spec.jsx.snap
index 430bc66359..01a2514f78 100644
--- a/tests/js/spec/views/__snapshots__/groupSimilarView.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/groupSimilarView.spec.jsx.snap
@@ -1086,7 +1086,7 @@ exports[`Issues Similar View renders with mocked data 1`] = `
             </button>
           </div>
         </div>
-        <pagination
+        <Pagination
           onCursor={[Function]}
         />
       </div>
@@ -2165,7 +2165,7 @@ exports[`Issues Similar View renders with mocked data 2`] = `
             </button>
           </div>
         </div>
-        <pagination
+        <Pagination
           onCursor={[Function]}
         />
       </div>
