commit 9f074cf874a1c49914a9e5038e73e384b673019a
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Jan 3 12:23:10 2019 -0800

    feat(releases): Org release list component (#11141)
    
    *  feat(releases): Make pagination work on org releases page
    
    * ref(releases): Refactor release list component
    
    Refactor to use AsyncView and Feature components
    
    * use location.query
    
    * add global selection header
    
    * default renderError
    
    * remove global selection header defaults

diff --git a/src/sentry/static/sentry/app/views/releases/list/organizationReleases/index.jsx b/src/sentry/static/sentry/app/views/releases/list/organizationReleases/index.jsx
index ed0cc44365..15000304dc 100644
--- a/src/sentry/static/sentry/app/views/releases/list/organizationReleases/index.jsx
+++ b/src/sentry/static/sentry/app/views/releases/list/organizationReleases/index.jsx
@@ -1,6 +1,5 @@
 import React from 'react';
 import styled from 'react-emotion';
-import PropTypes from 'prop-types';
 import {browserHistory} from 'react-router';
 
 import SentryTypes from 'app/sentryTypes';
@@ -12,48 +11,36 @@ import Pagination from 'app/components/pagination';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import Alert from 'app/components/alert';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
+import Feature from 'app/components/acl/feature';
+import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
+import AsyncView from 'app/views/asyncView';
 
 import withOrganization from 'app/utils/withOrganization';
-import withGlobalSelection from 'app/utils/withGlobalSelection';
 
 import space from 'app/styles/space';
 
 import ReleaseList from '../shared/releaseList';
 import ReleaseListHeader from '../shared/releaseListHeader';
-import {fetchOrganizationReleases} from '../shared/utils';
+import {getQuery} from '../shared/utils';
 
-class OrganizationReleases extends React.Component {
+class OrganizationReleases extends AsyncView {
   static propTypes = {
     organization: SentryTypes.Organization,
-    selection: PropTypes.object,
   };
-  constructor(props) {
-    super(props);
-    this.state = {releaseList: [], loading: true, error: null};
-  }
-
-  componentDidMount() {
-    this.fetchData({query: this.props.location.query.query, ...this.props.selection});
-  }
 
-  componentDidUpdate(prevProps) {
-    const queryHasChanged =
-      prevProps.location.query.query !== this.props.location.query.query;
-
-    if (queryHasChanged) {
-      this.fetchData({query: this.props.location.query.query, ...this.props.selection});
-    }
+  getTitle() {
+    return `${t('Releases')} - ${this.props.organization.slug}`;
   }
 
-  fetchData(query) {
-    this.setState({loading: true});
-    fetchOrganizationReleases(this.props.organization, query)
-      .then(releaseList => {
-        this.setState({releaseList, loading: false, error: null});
-      })
-      .catch(error => {
-        this.setState({error, loading: false});
-      });
+  getEndpoints() {
+    const {organization, location} = this.props;
+    return [
+      [
+        'releaseList',
+        `/organizations/${organization.slug}/releases/`,
+        {query: getQuery(location.query)},
+      ],
+    ];
   }
 
   onSearch = query => {
@@ -100,34 +87,41 @@ class OrganizationReleases extends React.Component {
     );
   }
 
-  render() {
-    if (!new Set(this.props.organization.features).has('sentry10')) {
-      return this.renderNoAccess();
-    }
+  renderLoading() {
+    return this.renderBody();
+  }
+
+  renderBody() {
+    const {organization, location} = this.props;
 
     return (
-      <Content>
-        <Header>
-          <div>
+      <Feature
+        features={['organizations:sentry10']}
+        organization={organization}
+        renderDisabled={this.renderNoAccess}
+      >
+        <GlobalSelectionHeader organization={organization} />
+        <Content>
+          <Header>
             <HeaderTitle>{t('Releases')}</HeaderTitle>
-          </div>
-          <div>
-            <SearchBar
-              defaultQuery=""
-              placeholder={t('Search for a release')}
-              query={this.props.location.query.query}
-              onSearch={this.onSearch}
-            />
-          </div>
-        </Header>
-        <Body>
-          <Panel>
-            <ReleaseListHeader />
-            <PanelBody>{this.renderStreamBody()}</PanelBody>
-          </Panel>
-          <Pagination pageLinks={this.state.pageLinks} />
-        </Body>
-      </Content>
+            <div>
+              <SearchBar
+                defaultQuery=""
+                placeholder={t('Search for a release')}
+                query={location.query.query}
+                onSearch={this.onSearch}
+              />
+            </div>
+          </Header>
+          <Body>
+            <Panel>
+              <ReleaseListHeader />
+              <PanelBody>{this.renderStreamBody()}</PanelBody>
+            </Panel>
+            <Pagination pageLinks={this.state.releaseListPageLinks} />
+          </Body>
+        </Content>
+      </Feature>
     );
   }
 }
@@ -159,4 +153,4 @@ const HeaderTitle = styled('h4')`
 
 const Body = styled('div')``;
 
-export default withOrganization(withGlobalSelection(OrganizationReleases));
+export default withOrganization(OrganizationReleases);
diff --git a/src/sentry/static/sentry/app/views/releases/list/shared/utils.jsx b/src/sentry/static/sentry/app/views/releases/list/shared/utils.jsx
index 532dd39d85..6cab310e98 100644
--- a/src/sentry/static/sentry/app/views/releases/list/shared/utils.jsx
+++ b/src/sentry/static/sentry/app/views/releases/list/shared/utils.jsx
@@ -1,16 +1,16 @@
-import {Client} from 'app/api';
+import {pick} from 'lodash';
+import {URL_PARAM} from 'app/components/organizations/globalSelectionHeader/constants';
 
 /**
- * Fetch organization releases given the query filters.
+ * Get query term for API given location.query
  *
- * @param {Object} organization
- * @param {Object} query
- * @returns {Promise<Array>}
+ * @param {String} search
+ * @returns {Object}
  */
-export function fetchOrganizationReleases(organization, query) {
-  const api = new Client();
-
-  const options = {query: {query: query.query}};
-
-  return api.requestPromise(`/organizations/${organization.slug}/releases/`, options);
+export function getQuery(query) {
+  const validKeys = [...Object.values(URL_PARAM), 'cursor', 'query'];
+  return {
+    ...pick(query, validKeys),
+    per_page: 50,
+  };
 }
