commit 332c7dedc3f268aeccadfbc5de3c01e66f2835f8
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Jul 3 14:22:29 2018 -0700

    test(discover): Add tests for aggregation component

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx
index 4574209d6b..9b3137337a 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx
@@ -8,9 +8,9 @@ import {TOPK_COUNTS} from '../data';
 
 export default class Aggregation extends React.Component {
   static propTypes = {
-    value: PropTypes.array,
-    onChange: PropTypes.func,
-    columns: PropTypes.array,
+    value: PropTypes.array.isRequired,
+    onChange: PropTypes.func.isRequired,
+    columns: PropTypes.array.isRequired,
   };
 
   constructor(props) {
@@ -25,7 +25,7 @@ export default class Aggregation extends React.Component {
     return [{label: currentValue, value: currentValue}];
   }
 
-  filterOptions = (options, input, value) => {
+  filterOptions = (_options, input, _value) => {
     input = input || this.state.selectedFunction || '';
 
     let optionList = [
diff --git a/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx b/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx
new file mode 100644
index 0000000000..47dca8b104
--- /dev/null
+++ b/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx
@@ -0,0 +1,131 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import Aggregation from 'app/views/organizationDiscover/aggregations/aggregation';
+
+describe('Aggregation', function() {
+  describe('render()', function() {
+    it('renders empty, count, topK, uniq and avg', function() {
+      const data = [
+        {value: [null, null, null], expectedTextValue: ''},
+        {value: ['count', null, 'count'], expectedTextValue: 'count'},
+        {
+          value: ['uniq', 'environment', 'uniq_environment'],
+          expectedTextValue: 'uniq(environment)',
+        },
+        {
+          value: ['avg', 'retention_days', 'avg_retention_days'],
+          expectedTextValue: 'avg(retention_days)',
+        },
+        {
+          value: ['topK(5)', 'environment', 'topK_5_environment'],
+          expectedTextValue: 'topK(5)(environment)',
+        },
+      ];
+
+      data.forEach(function(item) {
+        const wrapper = mount(
+          <Aggregation value={item.value} onChange={jest.fn()} columns={[]} />
+        );
+        expect(wrapper.text()).toBe(item.expectedTextValue);
+      });
+    });
+  });
+
+  describe('filterOptions()', function() {
+    let wrapper;
+    beforeEach(function() {
+      const cols = [{name: 'col1', type: 'string'}, {name: 'col2', type: 'number'}];
+      wrapper = mount(
+        <Aggregation value={[null, null, null]} onChange={jest.fn()} columns={cols} />
+      );
+    });
+
+    it('displays top level options with no input', function() {
+      const options = wrapper.instance().filterOptions(null, '', null);
+
+      expect(options).toHaveLength(4);
+      expect(options.map(({value}) => value)).toEqual(['count', 'uniq', 'topK', 'avg']);
+    });
+
+    it('displays uniq options on input `uniq`', function() {
+      const options = wrapper.instance().filterOptions(null, 'uniq', null);
+      expect(options).toHaveLength(2);
+      expect(options[0]).toEqual({value: 'uniq(col1)', label: 'uniq(col1)'});
+      expect(options[1]).toEqual({value: 'uniq(col2)', label: 'uniq(col2)'});
+    });
+
+    it('displays number value options on input `avg`', function() {
+      const options = wrapper.instance().filterOptions(null, 'avg', null);
+      expect(options).toHaveLength(1);
+      expect(options[0]).toEqual({value: 'avg(col2)', label: 'avg(col2)'});
+    });
+
+    it('displays TopK value options on input `topK`', function() {
+      const options = wrapper.instance().filterOptions(null, 'topK', null);
+      expect(options).toHaveLength(5);
+      expect(options[0]).toEqual({value: 'topK(5)', label: 'topK(5)(...)'});
+    });
+
+    it('displays TopK column options on input topK(5)', function() {
+      const options = wrapper.instance().filterOptions(null, 'topK(5)', null);
+      expect(options).toHaveLength(2);
+      expect(options[0]).toEqual({value: 'topK(5)(col1)', label: 'topK(5)(col1)'});
+      expect(options[1]).toEqual({value: 'topK(5)(col2)', label: 'topK(5)(col2)'});
+    });
+  });
+
+  describe('handleChange()', function() {
+    let wrapper, focusSpy;
+    beforeEach(function() {
+      const cols = [{name: 'col1', type: 'string'}, {name: 'col2', type: 'number'}];
+      focusSpy = jest.spyOn(Aggregation.prototype, 'focus');
+
+      wrapper = mount(
+        <Aggregation value={[null, null, null]} onChange={jest.fn()} columns={cols} />
+      );
+    });
+
+    afterEach(function() {
+      jest.clearAllMocks();
+    });
+
+    describe('handles intermediate selections', function() {
+      it('uniq', function() {
+        wrapper.instance().handleChange({value: 'uniq'});
+        expect(wrapper.instance().state.selectedFunction).toBe('uniq');
+        expect(focusSpy).toHaveBeenCalled();
+      });
+
+      it('avg', function() {
+        wrapper.instance().handleChange({value: 'avg'});
+        expect(wrapper.instance().state.selectedFunction).toBe('avg');
+        expect(focusSpy).toHaveBeenCalled();
+      });
+
+      it('topK without number', function() {
+        wrapper.instance().handleChange({value: 'topK'});
+        expect(wrapper.instance().state.selectedFunction).toBe('topK');
+        expect(focusSpy).toHaveBeenCalled();
+      });
+
+      it('topK with number', function() {
+        wrapper.instance().handleChange({value: 'topK(10)'});
+        expect(wrapper.instance().state.selectedFunction).toBe('topK(10)');
+        expect(focusSpy).toHaveBeenCalled();
+      });
+    });
+
+    describe('handles final selections', function() {
+      const validFinalSelections = ['count', 'avg(col2)', 'uniq(col1)', 'topK(10)(col2)'];
+
+      it('handles count, avg, uniq, topK', function() {
+        validFinalSelections.forEach(function(value) {
+          wrapper.instance().handleChange({value});
+          expect(wrapper.instance().state.selectedFunction).toBe(null);
+          expect(focusSpy).not.toHaveBeenCalled();
+        });
+      });
+    });
+  });
+});
diff --git a/tests/js/spec/views/organizationDiscover/aggregations.spec.jsx b/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx
similarity index 100%
rename from tests/js/spec/views/organizationDiscover/aggregations.spec.jsx
rename to tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx
