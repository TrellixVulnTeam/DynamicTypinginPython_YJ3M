commit 60de3ab8b9480c5dd976c56ebdd8e218ca4d078a
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Mar 26 15:08:44 2018 -0700

    ref: Refactor alert rules configuration API to return form fields object (#7776)
    
    API returns form fields object for the UI instead of the raw HTML
    
    This supercedes #7325

diff --git a/src/sentry/api/endpoints/project_rules_configuration.py b/src/sentry/api/endpoints/project_rules_configuration.py
index 3b6b5f2105..8962d8893d 100644
--- a/src/sentry/api/endpoints/project_rules_configuration.py
+++ b/src/sentry/api/endpoints/project_rules_configuration.py
@@ -23,10 +23,14 @@ class ProjectRulesConfigurationEndpoint(ProjectEndpoint):
             context = {
                 'id': node.id,
                 'label': node.label,
+                # TODO: remove after we migrate UI to generate form from form_fields object
                 'html': node.render_form(),
                 'enabled': node.is_enabled(),
             }
 
+            if hasattr(node, 'form_fields'):
+                context['formFields'] = node.form_fields
+
             if rule_type.startswith('condition/'):
                 condition_list.append(context)
             elif rule_type.startswith('action/'):
diff --git a/src/sentry/integrations/slack/notify_action.py b/src/sentry/integrations/slack/notify_action.py
index 9fd3078f9c..2e2a0a45e1 100644
--- a/src/sentry/integrations/slack/notify_action.py
+++ b/src/sentry/integrations/slack/notify_action.py
@@ -74,6 +74,23 @@ class SlackNotifyServiceAction(EventAction):
     form_cls = SlackNotifyServiceForm
     label = u'Send a notification to the {workspace} Slack workspace to {channel} and include tags {tags}'
 
+    def __init__(self, *args, **kwargs):
+        super(SlackNotifyServiceAction, self).__init__(*args, **kwargs)
+        self.form_fields = {
+            'workspace': {
+                'type': 'choice',
+                'choices': [(i.id, i.name) for i in self.get_integrations()]
+            },
+            'channel': {
+                'type': 'string',
+                'placeholder': 'i.e #critical'
+            },
+            'tags': {
+                'type': 'string',
+                'placeholder': 'i.e environment,user,my_tag'
+            }
+        }
+
     def is_enabled(self):
         return self.get_integrations().exists()
 
diff --git a/src/sentry/rules/actions/notify_event_service.py b/src/sentry/rules/actions/notify_event_service.py
index 931caee604..308ca4f333 100644
--- a/src/sentry/rules/actions/notify_event_service.py
+++ b/src/sentry/rules/actions/notify_event_service.py
@@ -33,6 +33,15 @@ class NotifyEventServiceAction(EventAction):
     form_cls = NotifyEventServiceForm
     label = 'Send a notification via {service}'
 
+    def __init__(self, *args, **kwargs):
+        super(NotifyEventServiceAction, self).__init__(*args, **kwargs)
+        self.form_fields = {
+            'service': {
+                'type': 'choice',
+                'choices': [[i.slug, i.title] for i in self.get_plugins()]
+            }
+        }
+
     def after(self, event, state):
         service = self.get_option('service')
 
diff --git a/src/sentry/rules/conditions/event_attribute.py b/src/sentry/rules/conditions/event_attribute.py
index 1882e763a7..b9766102da 100644
--- a/src/sentry/rules/conditions/event_attribute.py
+++ b/src/sentry/rules/conditions/event_attribute.py
@@ -108,6 +108,22 @@ class EventAttributeCondition(EventCondition):
     form_cls = EventAttributeForm
     label = u'An event\'s {attribute} value {match} {value}'
 
+    form_fields = {
+        'attribute': {
+            'type': 'choice',
+            'placeholder': 'i.e. exception.type',
+            'choices': [[a, a] for a in ATTR_CHOICES]
+        },
+        'match': {
+            'type': 'choice',
+            'choices': MATCH_CHOICES.items()
+        },
+        'value': {
+            'type': 'string',
+            'placeholder': 'value'
+        }
+    }
+
     def _get_attribute_values(self, event, attr):
         # TODO(dcramer): we should validate attributes (when we can) before
 
diff --git a/src/sentry/rules/conditions/event_frequency.py b/src/sentry/rules/conditions/event_frequency.py
index c240ee83fa..f8dd29d630 100644
--- a/src/sentry/rules/conditions/event_frequency.py
+++ b/src/sentry/rules/conditions/event_frequency.py
@@ -40,6 +40,16 @@ class EventFrequencyForm(forms.Form):
 
 class BaseEventFrequencyCondition(EventCondition):
     form_cls = EventFrequencyForm
+    form_fields = {
+        'value': {'type': 'number', 'placeholder': 100},
+        'interval': {
+            'type': 'choice',
+            'choices': [
+                (key, label) for key, (label, duration) in sorted(intervals.items(), key=lambda key____label__duration: key____label__duration[1][1])
+            ]
+        }
+    }
+
     label = NotImplemented  # subclass must implement
 
     def __init__(self, *args, **kwargs):
diff --git a/src/sentry/rules/conditions/tagged_event.py b/src/sentry/rules/conditions/tagged_event.py
index da53e5b9de..44f334d790 100644
--- a/src/sentry/rules/conditions/tagged_event.py
+++ b/src/sentry/rules/conditions/tagged_event.py
@@ -50,6 +50,21 @@ class TaggedEventCondition(EventCondition):
     form_cls = TaggedEventForm
     label = u'An event\'s tags match {key} {match} {value}'
 
+    form_fields = {
+        'key': {
+            'type': 'string',
+            'placeholder': 'key'
+        },
+        'match': {
+            'type': 'choice',
+            'choices': MATCH_CHOICES.items()
+        },
+        'value': {
+            'type': 'string',
+            'placeholder': 'value',
+        }
+    }
+
     def passes(self, event, state, **kwargs):
         key = self.get_option('key')
         match = self.get_option('match')
