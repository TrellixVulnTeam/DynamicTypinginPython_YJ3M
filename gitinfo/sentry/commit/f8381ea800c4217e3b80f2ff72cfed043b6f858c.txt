commit f8381ea800c4217e3b80f2ff72cfed043b6f858c
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Jan 21 13:56:28 2020 -0800

    feat(workflow): Add "View in Discover" link in Alert Details (#16501)
    
    Also fixes header (duration was out of place)

diff --git a/src/sentry/static/sentry/app/utils/projects.tsx b/src/sentry/static/sentry/app/utils/projects.tsx
index 77750eb006..3270387acd 100644
--- a/src/sentry/static/sentry/app/utils/projects.tsx
+++ b/src/sentry/static/sentry/app/utils/projects.tsx
@@ -15,11 +15,15 @@ import parseLinkHeader from 'app/utils/parseLinkHeader';
 import withApi from 'app/utils/withApi';
 import withProjects from 'app/utils/withProjects';
 
+type ProjectPlaceholder = {
+  slug: string;
+};
+
 type State = {
   /**
    * Projects from API
    */
-  fetchedProjects: Project[] | {slug: string}[];
+  fetchedProjects: Project[] | ProjectPlaceholder[];
 
   /**
    * Projects fetched from store
@@ -61,7 +65,7 @@ type RenderProps = {
    * We want to make sure that at the minimum, we return a list of objects with only `slug`
    * while we load actual project data
    */
-  projects: State['fetchedProjects'];
+  projects: Project[] | ProjectPlaceholder[];
 
   /**
    * Calls API and searches for project, accepts a callback function with signature:
@@ -225,7 +229,7 @@ class Projects extends React.Component<Props, State> {
     // For each item in the fetch queue, lookup the project object and in the case
     // where something wrong has happened and we were unable to get project summary from
     // the server, just fill in with an object with only the slug
-    const projectsOrPlaceholder: Project[] | {slug: string}[] = Array.from(
+    const projectsOrPlaceholder: Project[] | ProjectPlaceholder[] = Array.from(
       this.fetchQueue
     ).map(slug => (projectsMap.has(slug) && projectsMap.get(slug)) || {slug});
 
@@ -336,7 +340,7 @@ class Projects extends React.Component<Props, State> {
   render() {
     const {slugs, children} = this.props;
 
-    return children({
+    const renderProps = {
       // We want to make sure that at the minimum, we return a list of objects with only `slug`
       // while we load actual project data
       projects: this.state.initiallyLoaded
@@ -364,7 +368,9 @@ class Projects extends React.Component<Props, State> {
 
       // The error that occurred if fetching failed
       fetchError: this.state.fetchError,
-    });
+    };
+
+    return children(renderProps);
   }
 }
 
diff --git a/src/sentry/static/sentry/app/views/incidents/details/body.tsx b/src/sentry/static/sentry/app/views/incidents/details/body.tsx
index 4959b8a4fc..2b4ec93044 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/body.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/body.tsx
@@ -2,14 +2,17 @@ import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
 import styled from '@emotion/styled';
 
+import {NewQuery, Project} from 'app/types';
 import {PageContent} from 'app/styles/organization';
 import {t} from 'app/locale';
+import EventView from 'app/views/eventsV2/eventView';
+import Feature from 'app/components/acl/feature';
 import InlineSvg from 'app/components/inlineSvg';
 import Link from 'app/components/links/link';
 import NavTabs from 'app/components/navTabs';
 import Placeholder from 'app/components/placeholder';
+import Projects from 'app/utils/projects';
 import SeenByList from 'app/components/seenByList';
-import overflowEllipsis from 'app/styles/overflowEllipsis';
 import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 
@@ -23,6 +26,36 @@ type Props = {
 } & RouteComponentProps<{incidentId: string; orgId: string}, {}>;
 
 export default class DetailsBody extends React.Component<Props> {
+  getDiscoverUrl(projects: Project[]) {
+    const {incident, params} = this.props;
+    const {orgId} = params;
+
+    if (!projects || !projects.length || !incident) {
+      return '';
+    }
+
+    const discoverQuery: NewQuery = {
+      id: undefined,
+      name: (incident && incident.title) || '',
+      fields: ['title', 'user', 'last_seen'],
+      widths: ['400', '200', '-1'],
+      orderby: '-last_seen',
+      query: (incident && incident.query) || '',
+      projects: projects
+        .filter(({slug}) => incident.projects.includes(slug))
+        .map(({id}) => Number(id)),
+      version: 2 as const,
+      range: '24h',
+    };
+
+    const discoverView = EventView.fromSavedQuery(discoverQuery);
+
+    return {
+      pathname: `/organizations/${orgId}/eventsv2/results/`,
+      query: discoverView.generateQueryStringObject(),
+    };
+  }
+
   render() {
     const {params, incident} = this.props;
 
@@ -74,7 +107,25 @@ export default class DetailsBody extends React.Component<Props> {
                 <span>1 hour</span>
               </RuleDetails>
 
-              <SideHeader>{t('Query')}</SideHeader>
+              <SideHeader>
+                <span>{t('Query')}</span>
+                <Feature features={['events-v2']}>
+                  <Projects slugs={incident && incident.projects} orgId={params.orgId}>
+                    {({initiallyLoaded, projects, fetching}) => (
+                      <DiscoverLink
+                        disabled={!incident || fetching || !initiallyLoaded}
+                        to={this.getDiscoverUrl(
+                          ((initiallyLoaded && projects) as Project[]) || []
+                        )}
+                      >
+                        <DiscoverIcon src="icon-telescope" />
+                        {t('View in Discover')}
+                      </DiscoverLink>
+                    )}
+                  </Projects>
+                </Feature>
+              </SideHeader>
+
               <Query>user.username:"Jane Doe" server:web-8 example error</Query>
 
               <EditRuleLink to="#">
@@ -126,6 +177,14 @@ const Sidebar = styled('div')`
   }
 `;
 
+const DiscoverLink = styled(Link)`
+  text-transform: none;
+`;
+
+const DiscoverIcon = styled(InlineSvg)`
+  margin-right: ${space(0.5)};
+`;
+
 const StyledPageContent = styled(PageContent)`
   padding: 0;
   flex-direction: column;
@@ -168,7 +227,6 @@ const Query = styled('div')`
   border-radius: ${p => p.theme.borderRadius};
   padding: ${space(0.5)} ${space(1)};
   color: ${p => p.theme.gray4};
-  ${overflowEllipsis}
 `;
 
 const EditRuleLink = styled(Link)`
diff --git a/src/sentry/static/sentry/app/views/incidents/details/header.tsx b/src/sentry/static/sentry/app/views/incidents/details/header.tsx
index fd63dd0001..b6d7fe2c32 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/header.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/header.tsx
@@ -126,11 +126,6 @@ export default class DetailsHeader extends React.Component<Props> {
                 </Projects>
               )}
             </ItemValue>
-            {incident && (
-              <ItemValue>
-                <Duration seconds={getDynamicText({value: duration || 0, fixed: 1200})} />
-              </ItemValue>
-            )}
             {incident && (
               <ItemValue>
                 <Count value={incident.uniqueUsers} />
@@ -144,6 +139,11 @@ export default class DetailsHeader extends React.Component<Props> {
                 </OpenLink>
               </ItemValue>
             )}
+            {incident && (
+              <ItemValue>
+                <Duration seconds={getDynamicText({value: duration || 0, fixed: 1200})} />
+              </ItemValue>
+            )}
             <ItemValue>
               <SubscribeButton
                 disabled={!isIncidentReady}
diff --git a/src/sentry/static/sentry/app/views/incidents/details/sideHeader.tsx b/src/sentry/static/sentry/app/views/incidents/details/sideHeader.tsx
index 7defc24e91..6bf91e04b8 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/sideHeader.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/sideHeader.tsx
@@ -33,6 +33,8 @@ const Title = styled('span', {
   color: ${p.theme.placeholderBackground};
   `
       : ''};
+  display: flex;
+  justify-content: space-between;
 `;
 
 export default SideHeader;
diff --git a/src/sentry/static/sentry/app/views/incidents/types.tsx b/src/sentry/static/sentry/app/views/incidents/types.tsx
index be1564d391..b7e015b26d 100644
--- a/src/sentry/static/sentry/app/views/incidents/types.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/types.tsx
@@ -16,7 +16,7 @@ export type Incident = {
   groups: string[]; // Array of group ids
   query: string;
   organizationId: string;
-  projects: string[];
+  projects: string[]; // Array of slugs
   seenBy: User[];
   status: number;
   title: string;
diff --git a/tests/js/spec/views/incidents/details/index.spec.jsx b/tests/js/spec/views/incidents/details/index.spec.jsx
index cb544421b6..24b21260a4 100644
--- a/tests/js/spec/views/incidents/details/index.spec.jsx
+++ b/tests/js/spec/views/incidents/details/index.spec.jsx
@@ -70,15 +70,21 @@ describe('IncidentDetails', function() {
     expect(
       wrapper
         .find('ItemValue')
-        .at(4)
+        .at(2)
         .text()
-    ).toBe('100');
+    ).toBe('20');
     expect(
       wrapper
         .find('ItemValue')
         .at(3)
         .text()
-    ).toBe('20');
+    ).toBe('100');
+    expect(
+      wrapper
+        .find('ItemValue')
+        .at(4)
+        .text()
+    ).toBe('2 weeks');
   });
 
   it('handles invalid incident', async function() {
