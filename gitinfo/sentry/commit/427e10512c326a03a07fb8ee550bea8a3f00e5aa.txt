commit 427e10512c326a03a07fb8ee550bea8a3f00e5aa
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jul 26 08:59:12 2016 -0700

    Remove replay event feature (#3793)
    
    * Remove replay event feature
    
    This feature is too brittle and often can't work correctly. We provide a ``curl`` mechanism which is a simpler and safer alternative to this.
    
    /cc @getsentry/team

diff --git a/CHANGES b/CHANGES
index 0e7662c91a..09d19f969b 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,6 +1,8 @@
 Version 8.7 (Unreleased)
 ------------------------
 
+- Removed "Replay Request" feature.
+
 Version 8.6
 -----------
 
diff --git a/src/sentry/replays.py b/src/sentry/replays.py
deleted file mode 100644
index 09651ed65b..0000000000
--- a/src/sentry/replays.py
+++ /dev/null
@@ -1,32 +0,0 @@
-from __future__ import absolute_import
-from requests import RequestException
-from sentry.http import safe_urlopen
-
-
-class Replayer(object):
-    def __init__(self, url, method, data=None, headers=None):
-        self.url = url
-        self.method = method
-        self.data = data
-        self.headers = headers
-
-    def replay(self):
-        try:
-            response = safe_urlopen(
-                url=self.url,
-                method=self.method,
-                data=self.data,
-                headers=self.headers or {}
-            )
-        except RequestException as e:
-            return {
-                'status': 'error',
-                'reason': str(e),
-            }
-
-        return {
-            'status': response.status_code,
-            'reason': response.reason,
-            'headers': response.headers,
-            'body': response.content,
-        }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/request.jsx b/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
index 165a33d170..5bf184ddba 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
@@ -5,7 +5,6 @@ import RichHttpContent from './richHttpContent';
 import {getCurlCommand} from './utils';
 import {t} from '../../../locale';
 
-import RequestActions from './requestActions';
 import Truncate from '../../../components/truncate';
 
 const RequestInterface = React.createClass({
@@ -63,14 +62,6 @@ const RequestInterface = React.createClass({
 
     if (!this.isPartial()) {
       children.push(
-        <div key="action-buttons" className="pull-right">
-          {!this.props.isShare &&
-            <RequestActions organization={this.context.organization}
-                            project={this.context.project}
-                            group={group}
-                            event={evt} />
-          }
-        </div>,
         <div key="view-buttons" className="btn-group">
           <a className={(view === 'rich' ? 'active' : '') + ' btn btn-default btn-sm'}
             onClick={this.toggleView.bind(this, 'rich')}>{
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/requestActions.jsx b/src/sentry/static/sentry/app/components/events/interfaces/requestActions.jsx
deleted file mode 100644
index b686468ace..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/requestActions.jsx
+++ /dev/null
@@ -1,31 +0,0 @@
-import React from 'react';
-
-import ConfigStore from '../../../stores/configStore';
-import {t} from '../../../locale';
-
-const RequestActions = React.createClass({
-  propTypes: {
-    organization: React.PropTypes.object.isRequired,
-    project: React.PropTypes.object.isRequired,
-    group: React.PropTypes.object.isRequired,
-    event: React.PropTypes.object.isRequired
-  },
-
-  render(){
-    let org = this.props.organization;
-    let project = this.props.project;
-    let group = this.props.group;
-    let evt = this.props.event;
-    let urlPrefix = (
-      ConfigStore.get('urlPrefix') + '/' + org.slug + '/' +
-      project.slug + '/issues/' + group.id
-    );
-
-    return (
-      <a href={urlPrefix + '/events/' + evt.id + '/replay/'}
-         className="btn btn-sm btn-default">{t('Replay Request')}</a>
-    );
-  }
-});
-
-export default RequestActions;
diff --git a/src/sentry/templates/sentry/events/replay_request.html b/src/sentry/templates/sentry/events/replay_request.html
deleted file mode 100644
index eea6aa4bc1..0000000000
--- a/src/sentry/templates/sentry/events/replay_request.html
+++ /dev/null
@@ -1,49 +0,0 @@
-{% extends "sentry/groups/details.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-
-{% block title %}{% trans "Replay Request" %} | {{ block.super }}{% endblock %}
-
-{% block content %}
-  <div class="box">
-    <div class="box-header">
-      <h3>Replay Request</h3>
-    </div>
-    <div class="box-content with-padding">
-      <ul class="nav nav-tabs" data-tabs="tabs">
-        <li{% if not result %} class="active"{% endif %}><a href="#request" data-toggle="tab">Request</a></li>
-        {% if result %}
-          <li class="active"><a href="#result" data-toggle="tab">Result</a></li>
-        {% endif %}
-      </ul>
-
-      <div class="tab-content">
-        <div class="tab-pane{% if not result %} active{% endif %}" id="request">
-          {% if form.errors %}
-            <p class="error">{% trans "Please fill out all fields." %}</p>
-          {% endif %}
-
-          <form action="" method="post">
-            {% csrf_token %}
-            {{ form|as_crispy_errors }}
-            {% for field in form %}
-              {{ field|as_crispy_field }}
-            {% endfor %}
-            <fieldset class="form-actions">
-              <button type="submit" class="btn btn-primary">{% trans "Submit" %}</button>
-            </fieldset>
-          </form>
-        </div>
-        {% if result %}
-          <div class="active tab-pane" id="result">
-            <pre><strong>{{ result.status }} {{ result.reason }}</strong>
-{% for key, value in result.headers.items %}{{ key }}: {{ value }}
-{% endfor %}
-{{ result.body }}</pre>
-          </div>
-        {% endif %}
-      </div>
-    </div>
-  </div>
-{% endblock %}
diff --git a/src/sentry/web/forms/__init__.py b/src/sentry/web/forms/__init__.py
index 64e7b09812..2749611597 100644
--- a/src/sentry/web/forms/__init__.py
+++ b/src/sentry/web/forms/__init__.py
@@ -10,32 +10,10 @@ from __future__ import absolute_import
 from django import forms
 from django.utils.translation import ugettext_lazy as _
 
-from urllib3._collections import HTTPHeaderDict
-from sentry.constants import HTTP_METHODS
 from sentry.models import User, Activity
 from sentry.web.forms.fields import RadioFieldRenderer, ReadOnlyTextField
 
 
-class ReplayForm(forms.Form):
-    url = forms.URLField(widget=forms.TextInput(attrs={'class': 'span8'}))
-    method = forms.ChoiceField(choices=((k, k) for k in HTTP_METHODS))
-    data = forms.CharField(required=False, widget=forms.Textarea(attrs={'class': 'span8'}))
-    headers = forms.CharField(required=False, widget=forms.Textarea(attrs={'class': 'span8'}))
-
-    def clean_headers(self):
-        value = self.cleaned_data.get('headers')
-        if not value:
-            return
-
-        # HTTPHeaderDict will properly handle duplicate header lines
-        # and merge them correctly
-        headers = HTTPHeaderDict(
-            line.split(': ', 1) for line in value.splitlines()
-        )
-        # Convert back into a normal dict for consumption elsewhere
-        return dict(headers)
-
-
 class BaseUserForm(forms.ModelForm):
     email = forms.EmailField()
     name = forms.CharField(required=True, label=_('Name'))
diff --git a/src/sentry/web/frontend/replay_event.py b/src/sentry/web/frontend/replay_event.py
deleted file mode 100644
index d87d8636ef..0000000000
--- a/src/sentry/web/frontend/replay_event.py
+++ /dev/null
@@ -1,67 +0,0 @@
-from __future__ import absolute_import
-
-import urlparse
-
-from django.core.urlresolvers import reverse
-
-from sentry.models import Event
-from sentry.replays import Replayer
-from sentry.utils.http import safe_urlencode
-from sentry.web.forms import ReplayForm
-from sentry.web.frontend.base import ProjectView
-
-
-class ReplayEventView(ProjectView):
-    required_scope = 'event:read'
-
-    def handle(self, request, organization, project, team, group_id, event_id):
-        try:
-            event = Event.objects.get(group_id=group_id, id=event_id)
-        except Event.DoesNotExist:
-            return self.redirect(reverse('sentry'))
-
-        Event.objects.bind_nodes([event], 'data')
-
-        interfaces = event.interfaces
-        if 'sentry.interfaces.Http' not in interfaces:
-            # TODO: show a proper error
-            return self.redirect(reverse('sentry'))
-
-        # TODO(mattrobenolt): Add Cookie as a header
-        http = interfaces['sentry.interfaces.Http']
-        if http.headers:
-            headers = '\n'.join('%s: %s' % (k, v) for k, v in http.headers if k[0].upper() == k[0])
-        else:
-            headers = ''
-
-        if isinstance(http.data, dict):
-            data = safe_urlencode(http.data)
-        else:
-            data = http.data
-
-        initial = {
-            'url': urlparse.urldefrag(http.full_url)[0],
-            'method': http.method,
-            'headers': headers,
-            'data': data,
-        }
-
-        form = ReplayForm(request.POST or None, initial=initial)
-        if form.is_valid():
-            result = Replayer(
-                url=form.cleaned_data['url'],
-                method=form.cleaned_data['method'],
-                data=form.cleaned_data['data'],
-                headers=form.cleaned_data['headers'],
-            ).replay()
-        else:
-            result = None
-
-        context = {
-            'group': event.group,
-            'event': event,
-            'form': form,
-            'result': result,
-        }
-
-        return self.respond('sentry/events/replay_request.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 6c2ccf3fde..4729f7811b 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -76,7 +76,6 @@ from sentry.web.frontend.remove_organization import RemoveOrganizationView
 from sentry.web.frontend.remove_project import RemoveProjectView
 from sentry.web.frontend.remove_project_key import RemoveProjectKeyView
 from sentry.web.frontend.remove_team import RemoveTeamView
-from sentry.web.frontend.replay_event import ReplayEventView
 from sentry.web.frontend.sudo import SudoView
 from sentry.web.frontend.unsubscribe_issue_notifications import \
     UnsubscribeIssueNotificationsView
@@ -478,8 +477,6 @@ urlpatterns += patterns(
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/$', react_page_view,
         name='sentry-stream'),
 
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/(?:group|issues)/(?P<group_id>\d+)/events/(?P<event_id>\d+)/replay/$', ReplayEventView.as_view(),
-        name='sentry-replay'),
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/(?:group|issues)/(?P<group_id>\d+)/events/(?P<event_id_or_latest>(\d+|latest))/json/$', GroupEventJsonView.as_view(),
         name='sentry-group-event-json'),
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/issues/(?P<group_id>\d+)/tags/(?P<key>[^\/]+)/export/$', GroupTagExportView.as_view(),
diff --git a/tests/sentry/web/forms/tests.py b/tests/sentry/web/forms/tests.py
index 371b68a5e3..c3961685ab 100644
--- a/tests/sentry/web/forms/tests.py
+++ b/tests/sentry/web/forms/tests.py
@@ -1,26 +1 @@
 from __future__ import absolute_import
-
-from sentry.web.forms import ReplayForm
-from sentry.testutils import TestCase
-
-
-class ReplayFormTest(TestCase):
-    def test_it_works(self):
-        form = ReplayForm(dict(
-            url='http://example.com',
-            method='GET',
-            data='',
-            headers='Foo: bar\nContent-Type: text/plain',
-        ))
-        assert form.is_valid()
-        assert form.cleaned_data['headers'] == {'Foo': 'bar', 'Content-Type': 'text/plain'}
-
-    def test_duplicate_headers(self):
-        form = ReplayForm(dict(
-            url='http://example.com',
-            method='GET',
-            data='',
-            headers='Foo: bar\nContent-Type: text/plain\nFoo: baz',
-        ))
-        assert form.is_valid()
-        assert form.cleaned_data['headers'] == {'Foo': 'bar, baz', 'Content-Type': 'text/plain'}
diff --git a/tests/sentry/web/frontend/test_replay_event.py b/tests/sentry/web/frontend/test_replay_event.py
deleted file mode 100644
index 2348d52dd3..0000000000
--- a/tests/sentry/web/frontend/test_replay_event.py
+++ /dev/null
@@ -1,24 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from exam import fixture
-
-from sentry.testutils import TestCase
-
-
-class ReplayTest(TestCase):
-    @fixture
-    def path(self):
-        return '/{}/{}/issues/{}/events/{}/replay/'.format(
-            self.organization.slug,
-            self.project.slug,
-            self.group.id,
-            self.event.id,
-        )
-
-    def test_does_render(self):
-        self.login_as(self.user)
-        resp = self.client.get(self.path)
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/events/replay_request.html')
