commit fe3aa57a37091b0293c739757d8bb020f5d0cb8a
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Fri May 24 15:11:58 2019 +0200

    fix(minidump): Avoid setting too old timestamps (#13386)
    
    This is a cheaper fix until we figure out if/how we deploy #13358

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 677ac98b9d..667d53488f 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -6,6 +6,7 @@ sentry.event_manager
 """
 from __future__ import absolute_import, print_function
 
+import time
 import jsonschema
 import logging
 import six
@@ -58,7 +59,6 @@ from sentry.utils.dates import to_timestamp
 from sentry.utils.db import is_postgres
 from sentry.utils.geo import rust_geoip
 from sentry.utils.safe import safe_execute, trim, get_path, setdefault_path
-from sentry.utils.validators import is_float
 from sentry.stacktraces.processing import normalize_stacktraces_for_grouping
 from sentry.culprit import generate_culprit
 
@@ -108,6 +108,35 @@ def time_limit(silence):  # ~ 3600 per hour
     return settings.SENTRY_MAX_SAMPLE_TIME
 
 
+def validate_and_set_timestamp(data, timestamp):
+    """
+    Helper function for event processors/enhancers to avoid setting broken timestamps.
+
+    If we set a too old or too new timestamp then this affects event retention
+    and search.
+    """
+    # XXX(markus): We should figure out if we could run normalization
+    # after event processing again. Right now we duplicate code between here
+    # and event normalization
+    if timestamp:
+        current = time.time()
+
+        if current - MAX_SECS_IN_PAST > timestamp:
+            data.setdefault('errors', []).append({
+                'ty': EventError.PAST_TIMESTAMP,
+                'name': 'timestamp',
+                'value': timestamp,
+            })
+        elif timestamp > current + MAX_SECS_IN_FUTURE:
+            data.setdefault('errors', []).append({
+                'ty': EventError.FUTURE_TIMESTAMP,
+                'name': 'timestamp',
+                'value': timestamp,
+            })
+        else:
+            data['timestamp'] = float(timestamp)
+
+
 def parse_client_as_sdk(value):
     if not value:
         return {}
@@ -150,74 +179,6 @@ def plugin_is_regression(group, event):
     return True
 
 
-def process_timestamp(value, meta, current_datetime=None):
-    original_value = value
-    if value is None:
-        return None
-
-    if is_float(value):
-        try:
-            value = datetime.fromtimestamp(float(value))
-        except Exception:
-            meta.add_error(EventError.INVALID_DATA, original_value)
-            return None
-    elif isinstance(value, six.string_types):
-        # all timestamps are in UTC, but the marker is optional
-        if value.endswith('Z'):
-            value = value[:-1]
-        if '.' in value:
-            # Python doesn't support long microsecond values
-            # https://github.com/getsentry/sentry/issues/1610
-            ts_bits = value.split('.', 1)
-            value = '%s.%s' % (ts_bits[0], ts_bits[1][:2])
-            fmt = '%Y-%m-%dT%H:%M:%S.%f'
-        else:
-            fmt = '%Y-%m-%dT%H:%M:%S'
-        try:
-            value = datetime.strptime(value, fmt)
-        except Exception:
-            meta.add_error(EventError.INVALID_DATA, original_value)
-            return None
-    elif not isinstance(value, datetime):
-        meta.add_error(EventError.INVALID_DATA, original_value)
-        return None
-
-    if current_datetime is None:
-        current_datetime = datetime.now()
-
-    if value > current_datetime + ALLOWED_FUTURE_DELTA:
-        meta.add_error(EventError.FUTURE_TIMESTAMP, original_value)
-        return None
-
-    if value < current_datetime - timedelta(days=30):
-        meta.add_error(EventError.PAST_TIMESTAMP, original_value)
-        return None
-
-    return float(value.strftime('%s'))
-
-
-def sanitize_fingerprint(value):
-    # Special case floating point values: Only permit floats that have an exact
-    # integer representation in JSON to avoid rounding issues.
-    if isinstance(value, float):
-        return six.text_type(int(value)) if abs(value) < (1 << 53) else None
-
-    # Stringify known types
-    if isinstance(value, six.string_types + six.integer_types):
-        return six.text_type(value)
-
-    # Silently skip all other values
-    return None
-
-
-def cast_fingerprint(value):
-    # Return incompatible values so that schema validation can emit errors
-    if not isinstance(value, list):
-        return value
-
-    return list(f for f in map(sanitize_fingerprint, value) if f is not None)
-
-
 def has_pending_commit_resolution(group):
     return GroupLink.objects.filter(
         group_id=group.id,
diff --git a/src/sentry/lang/native/minidump.py b/src/sentry/lang/native/minidump.py
index 64b727f39b..462a358fbd 100644
--- a/src/sentry/lang/native/minidump.py
+++ b/src/sentry/lang/native/minidump.py
@@ -5,6 +5,7 @@ import logging
 import dateutil.parser as dp
 from msgpack import unpack, Unpacker, UnpackException, ExtraData
 
+from sentry.event_manager import validate_and_set_timestamp
 from sentry.lang.native.utils import get_sdk_from_event, handle_symbolication_failed, merge_symbolicated_frame
 from sentry.lang.native.symbolicator import merge_symbolicator_image
 from sentry.lang.native.symbolizer import SymbolicationFailed
@@ -131,8 +132,7 @@ def merge_symbolicator_minidump_response(data, response):
     if response.get('crashed') is not None:
         data['level'] = 'fatal' if response['crashed'] else 'info'
 
-    if response.get('timestamp'):
-        data['timestamp'] = float(response['timestamp'])
+    validate_and_set_timestamp(data, response.get('timestamp'))
 
     if response.get('system_info'):
         merge_symbolicator_minidump_system_info(data, response['system_info'])
diff --git a/tests/sentry/event_manager/test_process_timestamp.py b/tests/sentry/event_manager/test_process_timestamp.py
deleted file mode 100644
index 01e2e4d6de..0000000000
--- a/tests/sentry/event_manager/test_process_timestamp.py
+++ /dev/null
@@ -1,55 +0,0 @@
-from __future__ import absolute_import
-
-from datetime import datetime
-
-from sentry.event_manager import process_timestamp
-from sentry.utils.meta import Meta
-from sentry.testutils import TestCase
-
-
-class ProcessTimestampTest(TestCase):
-    def setUp(self):
-        self.meta = Meta()
-
-    def test_iso_timestamp(self):
-        assert process_timestamp(
-            '2012-01-01T10:30:45',
-            self.meta,
-            current_datetime=datetime(2012, 1, 1, 10, 30, 45),
-        ) == 1325413845.0
-
-    def test_iso_timestamp_with_ms(self):
-        assert process_timestamp(
-            '2012-01-01T10:30:45.434',
-            self.meta,
-            current_datetime=datetime(2012, 1, 1, 10, 30, 45, 434000),
-        ) == 1325413845.0
-
-    def test_timestamp_iso_timestamp_with_Z(self):
-        assert process_timestamp(
-            '2012-01-01T10:30:45Z',
-            self.meta,
-            current_datetime=datetime(2012, 1, 1, 10, 30, 45),
-        ) == 1325413845.0
-
-    def test_invalid_timestamp(self):
-        assert process_timestamp('foo', self.meta) is None
-        assert len(list(self.meta.iter_errors())) == 1
-
-    def test_invalid_numeric_timestamp(self):
-        assert process_timestamp('100000000000000000000.0', self.meta) is None
-        assert len(list(self.meta.iter_errors())) == 1
-
-    def test_future_timestamp(self):
-        assert process_timestamp('2052-01-01T10:30:45Z', self.meta) is None
-        assert len(list(self.meta.iter_errors())) == 1
-
-    def test_long_microseconds_value(self):
-        assert process_timestamp(
-            '2012-01-01T10:30:45.341324Z',
-            self.meta,
-            current_datetime=datetime(2012, 1, 1, 10, 30, 45),
-        ) == 1325413845.0
-
-    def test_invalid_type(self):
-        assert process_timestamp({}, self.meta) is None
diff --git a/tests/symbolicator/snapshots/SymbolicatorMinidumpIntegrationTest/test_full_minidump.pysnap b/tests/symbolicator/snapshots/SymbolicatorMinidumpIntegrationTest/test_full_minidump.pysnap
index 7fde5a2c6d..88c33fb693 100644
--- a/tests/symbolicator/snapshots/SymbolicatorMinidumpIntegrationTest/test_full_minidump.pysnap
+++ b/tests/symbolicator/snapshots/SymbolicatorMinidumpIntegrationTest/test_full_minidump.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-05-22T14:32:18.114971Z'
+created: '2019-05-24T11:54:18.518831Z'
 creator: sentry
 source: tests/symbolicator/test_minidump_full.py
 ---
@@ -134,7 +134,10 @@ debug_meta:
     image_addr: '0x77170000'
     image_size: 1585152
     type: pe
-errors: null
+errors:
+- name: timestamp
+  ty: past_timestamp
+  value: 1521713273
 exception:
   values:
   - mechanism:
