commit 84b964280f612aeb34d576e88f5b20699edc896d
Author: Mark Story <mark@sentry.io>
Date:   Mon Apr 27 09:48:56 2020 -0400

    feat(perf-views) Add duration breakdown graphs (#18409)
    
    Add a visualization of a transaction's duration including each
    percentile as a separate series. This lets users visualize how
    a transaction performs over time and lets them zoom in, or toggle series
    they want to hide. Which chart is displayed is stored in the URL so that
    sharing links/views is simpler.

diff --git a/src/sentry/static/sentry/app/actionCreators/events.tsx b/src/sentry/static/sentry/app/actionCreators/events.tsx
index fb9f24803e..ba8caac6ec 100644
--- a/src/sentry/static/sentry/app/actionCreators/events.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/events.tsx
@@ -5,9 +5,9 @@ import {Client} from 'app/api';
 import {URL_PARAM} from 'app/constants/globalSelectionHeader';
 import {canIncludePreviousPeriod} from 'app/views/events/utils/canIncludePreviousPeriod';
 import {getPeriod} from 'app/utils/getPeriod';
-import {EventsStats, Organization, MultiSeriesEventsStats} from 'app/types';
+import {EventsStats, OrganizationSummary, MultiSeriesEventsStats} from 'app/types';
 
-function getBaseUrl(org: Organization, keyTransactions: boolean | undefined) {
+function getBaseUrl(org: OrganizationSummary, keyTransactions: boolean | undefined) {
   if (keyTransactions) {
     return `/organizations/${org.slug}/key-transactions-stats/`;
   }
@@ -16,7 +16,7 @@ function getBaseUrl(org: Organization, keyTransactions: boolean | undefined) {
 }
 
 type Options = {
-  organization: Organization;
+  organization: OrganizationSummary;
   project?: number[];
   environment?: string[];
   period?: string;
diff --git a/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx b/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
index 6140581396..0cfb8d45d6 100644
--- a/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
+++ b/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
@@ -4,7 +4,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 
 import {
-  Organization,
+  OrganizationSummary,
   EventsStats,
   MultiSeriesEventsStats,
   EventsStatsData,
@@ -90,7 +90,7 @@ type EventsRequestPartialProps = {
    * API client instance
    */
   api: Client;
-  organization: Organization;
+  organization: OrganizationSummary;
   /**
    * List of project ids to query
    */
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/charts.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/charts.tsx
new file mode 100644
index 0000000000..ad8076d248
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/charts.tsx
@@ -0,0 +1,109 @@
+import React from 'react';
+import {browserHistory} from 'react-router';
+import {Location} from 'history';
+
+import {OrganizationSummary, SelectValue} from 'app/types';
+import {t} from 'app/locale';
+import {Panel} from 'app/components/panels';
+import EventView from 'app/utils/discover/eventView';
+import {
+  ChartControls,
+  InlineContainer,
+  SectionHeading,
+  SectionValue,
+} from 'app/components/charts/styles';
+import OptionSelector from 'app/components/charts/optionSelector';
+
+import {ChartsContainer} from '../styles';
+import DurationChart from './durationChart';
+import LatencyChart from './latencyChart';
+
+enum DisplayModes {
+  DURATION = 'duration',
+  LATENCY = 'latency',
+}
+
+const DISPLAY_OPTIONS: SelectValue<string>[] = [
+  {value: DisplayModes.LATENCY, label: t('Latency Distribution')},
+  {value: DisplayModes.DURATION, label: t('Duration Breakdown')},
+];
+
+type Props = {
+  organization: OrganizationSummary;
+  location: Location;
+  eventView: EventView;
+  totalValues: number | null;
+};
+
+class TransactionSummaryCharts extends React.Component<Props> {
+  handleDisplayChange = (value: string) => {
+    const {location} = this.props;
+    browserHistory.push({
+      pathname: location.pathname,
+      query: {...location.query, display: value},
+    });
+  };
+
+  render() {
+    const {totalValues, eventView, organization, location} = this.props;
+    const display = location.query.display
+      ? Array.isArray(location.query.display)
+        ? location.query.display[0]
+        : location.query.display
+      : DisplayModes.LATENCY;
+
+    return (
+      <Panel>
+        <ChartsContainer>
+          {display === DisplayModes.LATENCY && (
+            <LatencyChart
+              organization={organization}
+              location={location}
+              query={eventView.query}
+              project={eventView.project}
+              environment={eventView.environment}
+              start={eventView.start}
+              end={eventView.end}
+              statsPeriod={eventView.statsPeriod}
+            />
+          )}
+          {display === DisplayModes.DURATION && (
+            <DurationChart
+              organization={organization}
+              query={eventView.query}
+              project={eventView.project}
+              environment={eventView.environment}
+              start={eventView.start}
+              end={eventView.end}
+              statsPeriod={eventView.statsPeriod}
+            />
+          )}
+        </ChartsContainer>
+
+        <ChartControls>
+          <InlineContainer>
+            <SectionHeading key="total-heading">{t('Total Events')}</SectionHeading>
+            <SectionValue key="total-value">{calculateTotal(totalValues)}</SectionValue>
+          </InlineContainer>
+          <InlineContainer>
+            <OptionSelector
+              title={t('Display')}
+              selected={display}
+              options={DISPLAY_OPTIONS}
+              onChange={this.handleDisplayChange}
+            />
+          </InlineContainer>
+        </ChartControls>
+      </Panel>
+    );
+  }
+}
+
+function calculateTotal(total: number | null) {
+  if (total === null) {
+    return '\u2014';
+  }
+  return total.toLocaleString();
+}
+
+export default TransactionSummaryCharts;
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
index f432c4079a..4744062ee2 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
@@ -13,7 +13,7 @@ import SummaryContentTable from './table';
 import Breadcrumb from './breadcrumb';
 import UserStats from './userStats';
 import KeyTransactionButton from './keyTransactionButton';
-import LatencyChart from './latencyChart';
+import TransactionSummaryCharts from './charts';
 
 const TOP_SLOWEST_TRANSACTIONS = 5;
 
@@ -59,15 +59,10 @@ class SummaryContent extends React.Component<Props> {
         </HeaderBox>
         <ContentBox>
           <div>
-            <LatencyChart
+            <TransactionSummaryCharts
               organization={organization}
               location={location}
-              query={eventView.query}
-              project={eventView.project}
-              environment={eventView.environment}
-              start={eventView.start}
-              end={eventView.end}
-              statsPeriod={eventView.statsPeriod}
+              eventView={eventView}
               totalValues={totalValues}
             />
             <DiscoverQuery
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/durationChart.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/durationChart.tsx
new file mode 100644
index 0000000000..e7efde4311
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/durationChart.tsx
@@ -0,0 +1,183 @@
+import React from 'react';
+import * as ReactRouter from 'react-router';
+
+import {OrganizationSummary} from 'app/types';
+import {Client} from 'app/api';
+import {t} from 'app/locale';
+import Tooltip from 'app/components/tooltip';
+import AreaChart from 'app/components/charts/areaChart';
+import ChartZoom from 'app/components/charts/chartZoom';
+import ErrorPanel from 'app/components/charts/components/errorPanel';
+import TransparentLoadingMask from 'app/components/charts/components/transparentLoadingMask';
+import TransitionChart from 'app/components/charts/transitionChart';
+import {AREA_COLORS, getInterval} from 'app/components/charts/utils';
+import {IconWarning} from 'app/icons';
+import EventsRequest from 'app/views/events/utils/eventsRequest';
+import {getUtcToLocalDateObject} from 'app/utils/dates';
+import EventView from 'app/utils/discover/eventView';
+import withApi from 'app/utils/withApi';
+import theme from 'app/utils/theme';
+import {getDuration} from 'app/utils/formatters';
+
+import {HeaderTitle, StyledIconQuestion} from '../styles';
+
+const QUERY_KEYS = [
+  'environment',
+  'project',
+  'query',
+  'start',
+  'end',
+  'statsPeriod',
+] as const;
+
+type ViewProps = Pick<EventView, typeof QUERY_KEYS[number]>;
+
+type Props = ReactRouter.WithRouterProps &
+  ViewProps & {
+    api: Client;
+    organization: OrganizationSummary;
+  };
+
+const YAXIS_VALUES = ['p50()', 'p75()', 'p95()', 'p99()', 'p100()'];
+
+/**
+ * Fetch and render a stacked area chart that shows duration
+ * percentiles over the past 7 days
+ */
+class DurationChart extends React.Component<Props> {
+  render() {
+    const {
+      api,
+      project,
+      environment,
+      organization,
+      query,
+      statsPeriod,
+      router,
+    } = this.props;
+
+    const start = this.props.start
+      ? getUtcToLocalDateObject(this.props.start)
+      : undefined;
+
+    const end = this.props.end ? getUtcToLocalDateObject(this.props.end) : undefined;
+
+    const legend = {
+      right: 16,
+      top: 0,
+      icon: 'circle',
+      itemHeight: 8,
+      itemWidth: 8,
+      itemGap: 12,
+      align: 'left',
+      textStyle: {
+        verticalAlign: 'top',
+        fontSize: 11,
+        fontFamily: 'Rubik',
+      },
+    };
+
+    const tooltip = {
+      valueFormatter(value: number) {
+        return getDuration(value / 1000, 2);
+      },
+    };
+
+    const datetimeSelection = {
+      start: start || null,
+      end: end || null,
+      period: statsPeriod,
+    };
+
+    return (
+      <React.Fragment>
+        <HeaderTitle>
+          {t('Duration Breakdown')}
+          <Tooltip
+            position="top"
+            title={t(
+              `This graph shows a breakdown of transaction durations by percentile over time.`
+            )}
+          >
+            <StyledIconQuestion size="sm" />
+          </Tooltip>
+        </HeaderTitle>
+        <ChartZoom
+          router={router}
+          period={statsPeriod}
+          projects={project}
+          environments={environment}
+        >
+          {zoomRenderProps => (
+            <EventsRequest
+              api={api}
+              organization={organization}
+              period={statsPeriod}
+              project={[...project]}
+              environment={[...environment]}
+              start={start}
+              end={end}
+              interval={getInterval(datetimeSelection, true)}
+              showLoading={false}
+              query={query}
+              includePrevious={false}
+              yAxis={YAXIS_VALUES}
+            >
+              {({results, errored, loading, reloading}) => {
+                if (errored) {
+                  return (
+                    <ErrorPanel>
+                      <IconWarning color={theme.gray2} size="lg" />
+                    </ErrorPanel>
+                  );
+                }
+                // Create a list of series based on the order of the fields,
+                // We need to flip it at the end to ensure the series stack right.
+                const series = results
+                  ? results
+                      .map((values, i: number) => {
+                        return {
+                          ...values,
+                          color: AREA_COLORS[i].line,
+                          lineStyle: {
+                            opacity: 0,
+                          },
+                          areaStyle: {
+                            color: AREA_COLORS[i].area,
+                            opacity: 1.0,
+                          },
+                        };
+                      })
+                      .reverse()
+                  : [];
+
+                return (
+                  <TransitionChart loading={loading} reloading={reloading}>
+                    <TransparentLoadingMask visible={reloading} />
+                    <AreaChart
+                      {...zoomRenderProps}
+                      legend={legend}
+                      series={series}
+                      seriesOptions={{
+                        showSymbol: false,
+                      }}
+                      tooltip={tooltip}
+                      grid={{
+                        left: '24px',
+                        right: '24px',
+                        top: '32px',
+                        bottom: '12px',
+                      }}
+                    />
+                  </TransitionChart>
+                );
+              }}
+            </EventsRequest>
+          )}
+        </ChartZoom>
+      </React.Fragment>
+    );
+  }
+}
+
+export default withApi(ReactRouter.withRouter(DurationChart));
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/latencyChart.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/latencyChart.tsx
index ca795fdf5e..471195020d 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/latencyChart.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/latencyChart.tsx
@@ -4,17 +4,10 @@ import {browserHistory} from 'react-router';
 import isEqual from 'lodash/isEqual';
 import pick from 'lodash/pick';
 
-import {Panel} from 'app/components/panels';
 import {IconWarning} from 'app/icons';
 import {t} from 'app/locale';
 import BarChart from 'app/components/charts/barChart';
 import ErrorPanel from 'app/components/charts/components/errorPanel';
-import {
-  ChartControls,
-  InlineContainer,
-  SectionHeading,
-  SectionValue,
-} from 'app/components/charts/styles';
 import AsyncComponent from 'app/components/asyncComponent';
 import Tooltip from 'app/components/tooltip';
 import {OrganizationSummary} from 'app/types';
@@ -24,7 +17,7 @@ import {trackAnalyticsEvent} from 'app/utils/analytics';
 import theme from 'app/utils/theme';
 import {getDuration} from 'app/utils/formatters';
 
-import {HeaderTitle, ChartsContainer, StyledIconQuestion} from '../styles';
+import {HeaderTitle, StyledIconQuestion} from '../styles';
 
 const NUM_BUCKETS = 15;
 const QUERY_KEYS = [
@@ -55,9 +48,14 @@ type State = AsyncComponent['state'] & {
 };
 
 /**
- * Fetch the chart data and then render the graph.
+ * Fetch and render a bar chart that shows event volume
+ * for each duration bucket. We always render 15 buckets of
+ * equal widths based on the endpoints min + max durations.
+ *
+ * This graph visualizes how many transactions were recorded
+ * at each duration bucket, showing the modality of the transaction.
  */
-class LatencyHistogram extends AsyncComponent<Props, State> {
+class LatencyChart extends AsyncComponent<Props, State> {
   getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {
     const {
       organization,
@@ -222,39 +220,22 @@ class LatencyHistogram extends AsyncComponent<Props, State> {
     };
 
     return (
-      <React.Fragment>
-        <BarChart
-          grid={{left: '10px', right: '10px', top: '16px', bottom: '0px'}}
-          xAxis={xAxis}
-          yAxis={{type: 'value'}}
-          series={transformData(chartData.data, this.bucketWidth)}
-          tooltip={tooltip}
-          colors={['rgba(140, 79, 189, 0.3)']}
-          onClick={this.handleClick}
-          onMouseOver={this.handleMouseOver}
-        />
-      </React.Fragment>
+      <BarChart
+        grid={{left: '10px', right: '10px', top: '16px', bottom: '0px'}}
+        xAxis={xAxis}
+        yAxis={{type: 'value'}}
+        series={transformData(chartData.data, this.bucketWidth)}
+        tooltip={tooltip}
+        colors={['rgba(140, 79, 189, 0.3)']}
+        onClick={this.handleClick}
+        onMouseOver={this.handleMouseOver}
+      />
     );
   }
-}
 
-function calculateTotal(total: number | null) {
-  if (total === null) {
-    return '\u2014';
-  }
-  return total.toLocaleString();
-}
-
-type WrapperProps = ViewProps & {
-  organization: OrganizationSummary;
-  location: Location;
-  totalValues: number | null;
-};
-
-function LatencyChart({totalValues, ...props}: WrapperProps) {
-  return (
-    <Panel>
-      <ChartsContainer>
+  render() {
+    return (
+      <React.Fragment>
         <HeaderTitle>
           {t('Latency Distribution')}
           <Tooltip
@@ -266,16 +247,10 @@ function LatencyChart({totalValues, ...props}: WrapperProps) {
             <StyledIconQuestion />
           </Tooltip>
         </HeaderTitle>
-        <LatencyHistogram {...props} />
-      </ChartsContainer>
-      <ChartControls>
-        <InlineContainer>
-          <SectionHeading key="total-heading">{t('Total Events')}</SectionHeading>
-          <SectionValue key="total-value">{calculateTotal(totalValues)}</SectionValue>
-        </InlineContainer>
-      </ChartControls>
-    </Panel>
-  );
+        {this.renderComponent()}
+      </React.Fragment>
+    );
+  }
 }
 
 /**
