commit 5fe5a1b9b56450498d46f849540f2536ce357b01
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Oct 20 14:52:40 2014 +0200

    Fix tests / convert remove project

diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index 9e6e329553..81428d6011 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -70,12 +70,6 @@ class BaseProjectForm(forms.ModelForm):
         model = Project
 
 
-class RemoveProjectForm(forms.Form):
-    def __init__(self, user, *args, **kwargs):
-        super(RemoveProjectForm, self).__init__(*args, **kwargs)
-        self.user = user
-
-
 class EditProjectForm(BaseProjectForm):
     public = forms.BooleanField(required=False,
         help_text=_('Imply public access to any event for this project.'))
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index d8b311f75a..1acfc95ac6 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -1,7 +1,8 @@
 from __future__ import absolute_import
 
 from django.core.context_processors import csrf
-from django.http import Http404, HttpResponseRedirect
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
 from django.utils.decorators import method_decorator
 from django.views.decorators.csrf import csrf_protect
 from django.views.generic import View
@@ -164,8 +165,7 @@ class OrganizationView(BaseView):
             organization_id=organization_id,
         )
         if active_organization is None:
-            # TODO
-            raise Http404
+            return HttpResponseRedirect(reverse('sentry'))
 
         kwargs['organization'] = active_organization
 
@@ -202,8 +202,7 @@ class TeamView(BaseView):
             access=self.required_access,
         )
         if active_team is None:
-            # TODO
-            raise Http404
+            return HttpResponseRedirect(reverse('sentry'))
 
         kwargs['team'] = active_team
         kwargs['organization'] = active_team.organization
@@ -225,7 +224,7 @@ class ProjectView(BaseView):
     required_access = None
 
     def get_context_data(self, request, organization, team, project, **kwargs):
-        context = super(TeamView, self).get_context_data(request)
+        context = super(ProjectView, self).get_context_data(request)
         context['organization'] = organization
         context['project'] = project
         context['team'] = team
@@ -243,8 +242,7 @@ class ProjectView(BaseView):
             team_slug=team_slug,
         )
         if active_team is None:
-            # TODO
-            raise Http404
+            return HttpResponseRedirect(reverse('sentry'))
 
         active_project = self.get_active_project(
             request=request,
@@ -253,8 +251,7 @@ class ProjectView(BaseView):
             access=self.required_access,
         )
         if active_project is None:
-            # TODO
-            raise Http404
+            return HttpResponseRedirect(reverse('sentry'))
 
         kwargs['project'] = active_project
         kwargs['team'] = active_team
diff --git a/src/sentry/web/frontend/projects/remove.py b/src/sentry/web/frontend/projects/remove.py
deleted file mode 100644
index 06f0fbc62d..0000000000
--- a/src/sentry/web/frontend/projects/remove.py
+++ /dev/null
@@ -1,51 +0,0 @@
-"""
-sentry.web.frontend.projects
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import
-
-from django.contrib import messages
-from django.core.context_processors import csrf
-from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect
-from django.views.decorators.csrf import csrf_protect
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.constants import MEMBER_OWNER, STATUS_HIDDEN
-from sentry.permissions import can_remove_project
-from sentry.tasks.deletion import delete_project
-from sentry.web.decorators import has_access
-from sentry.web.forms.projects import RemoveProjectForm
-from sentry.web.helpers import render_to_response
-
-
-@has_access(MEMBER_OWNER)
-@csrf_protect
-def remove_project(request, team, project):
-    if not can_remove_project(request.user, project):
-        return HttpResponseRedirect(reverse('sentry'))
-
-    form = RemoveProjectForm(request.user, request.POST or None)
-
-    if form.is_valid():
-        if project.status != STATUS_HIDDEN:
-            project.update(status=STATUS_HIDDEN)
-            delete_project.delay(object_id=project.id)
-
-        messages.add_message(
-            request, messages.SUCCESS,
-            _('Deletion has been queued and will happen automatically.'))
-
-        return HttpResponseRedirect(reverse('sentry-manage-team-projects', args=[project.team.slug]))
-
-    context = csrf(request)
-    context.update({
-        'team': team,
-        'form': form,
-        'project': project,
-    })
-
-    return render_to_response('sentry/projects/remove.html', context, request)
diff --git a/src/sentry/web/frontend/remove_project.py b/src/sentry/web/frontend/remove_project.py
new file mode 100644
index 0000000000..3ea6b5630d
--- /dev/null
+++ b/src/sentry/web/frontend/remove_project.py
@@ -0,0 +1,59 @@
+from __future__ import absolute_import
+
+from django import forms
+from django.contrib import messages
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.constants import STATUS_HIDDEN
+from sentry.models import TeamMemberType
+from sentry.permissions import can_remove_project
+from sentry.tasks.deletion import delete_project
+from sentry.web.frontend.base import ProjectView
+
+
+class RemoveProjectForm(forms.Form):
+    pass
+
+
+class RemoveProjectView(ProjectView):
+    required_access = TeamMemberType.ADMIN
+
+    def get_form(self, request):
+        return RemoveProjectForm(request.POST or None)
+
+    def get(self, request, organization, team, project):
+        if not can_remove_project(request.user, project):
+            return HttpResponseRedirect(reverse('sentry'))
+
+        form = self.get_form(request)
+
+        context = {
+            'form': form,
+        }
+
+        return self.respond('sentry/projects/remove.html', context)
+
+    def post(self, request, organization, team, project):
+        if not can_remove_project(request.user, project):
+            return HttpResponseRedirect(reverse('sentry'))
+
+        form = self.get_form(request)
+
+        if form.is_valid():
+            if project.status != STATUS_HIDDEN:
+                project.update(status=STATUS_HIDDEN)
+                delete_project.delay(object_id=project.id)
+
+            messages.add_message(
+                request, messages.SUCCESS,
+                _('Deletion has been queued and will happen automatically.'))
+
+            return HttpResponseRedirect(reverse('sentry-manage-team-projects', args=[team.slug]))
+
+        context = {
+            'form': form,
+        }
+
+        return self.respond('sentry/projects/remove.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index b4c5a2af03..42d12abbbd 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -27,7 +27,6 @@ import sentry.web.frontend.projects.keys
 import sentry.web.frontend.projects.notifications
 import sentry.web.frontend.projects.plugins
 import sentry.web.frontend.projects.quotas
-import sentry.web.frontend.projects.remove
 import sentry.web.frontend.projects.rules
 import sentry.web.frontend.projects.settings
 import sentry.web.frontend.projects.tags
@@ -43,6 +42,7 @@ from sentry.web.frontend.create_access_group import CreateAccessGroupView
 from sentry.web.frontend.create_project import CreateProjectView
 from sentry.web.frontend.create_team import CreateTeamView
 from sentry.web.frontend.create_team_member import CreateTeamMemberView
+from sentry.web.frontend.remove_project import RemoveProjectView
 from sentry.web.frontend.remove_team import RemoveTeamView
 from sentry.web.frontend.team_access_groups import TeamAccessGroupsView
 from sentry.web.frontend.team_members import TeamMembersView
@@ -212,8 +212,8 @@ urlpatterns += patterns('',
         sentry.web.frontend.projects.plugins.enable_project_plugin,
         name='sentry-enable-project-plugin'),
 
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/remove/$',
-        sentry.web.frontend.projects.remove.remove_project,
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/remove/$',
+        RemoveProjectView.as_view(),
         name='sentry-remove-project'),
 
     url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/tags/$',
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/tests.py
index d927261e5d..bf02d9711b 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/tests.py
@@ -233,46 +233,46 @@ class RemoveProjectTest(PermissionBase):
 
     @fixture
     def path(self):
-        return reverse('sentry-remove-project', kwargs={'team_slug': self.team.slug, 'project_id': self.project.id})
+        return reverse('sentry-remove-project', kwargs={'team_slug': self.team.slug, 'project_slug': self.project.slug})
 
     def test_admin_cannot_remove_default(self):
-        with self.settings(SENTRY_PROJECT=1):
+        with self.settings(SENTRY_PROJECT=self.project.id):
             self._assertPerm(self.path, self.template, self.admin.username, False)
 
     def test_owner_cannot_remove_default(self):
-        with self.settings(SENTRY_PROJECT=1):
+        with self.settings(SENTRY_PROJECT=self.project.id):
             self._assertPerm(self.path, self.template, self.owner.username, False)
 
     def test_anonymous_cannot_remove_default(self):
-        with self.settings(SENTRY_PROJECT=1):
+        with self.settings(SENTRY_PROJECT=self.project.id):
             self._assertPerm(self.path, self.template, None, False)
 
     def test_user_cannot_remove_default(self):
-        with self.settings(SENTRY_PROJECT=1):
+        with self.settings(SENTRY_PROJECT=self.project.id):
             self._assertPerm(self.path, self.template, self.nobody.username, False)
 
     def test_member_cannot_remove_default(self):
-        with self.settings(SENTRY_PROJECT=1):
+        with self.settings(SENTRY_PROJECT=self.project.id):
             self._assertPerm(self.path, self.template, self.member.username, False)
 
     def test_admin_can_load(self):
-        with self.settings(SENTRY_PROJECT=2):
+        with self.settings(SENTRY_PROJECT=-1):
             self._assertPerm(self.path, self.template, self.admin.username)
 
     def test_owner_can_load(self):
-        with self.settings(SENTRY_PROJECT=2):
+        with self.settings(SENTRY_PROJECT=-1):
             self._assertPerm(self.path, self.template, self.owner.username)
 
     def test_anonymous_cannot_load(self):
-        with self.settings(SENTRY_PROJECT=2):
+        with self.settings(SENTRY_PROJECT=-1):
             self._assertPerm(self.path, self.template, None, False)
 
     def test_user_cannot_load(self):
-        with self.settings(SENTRY_PROJECT=2):
+        with self.settings(SENTRY_PROJECT=-1):
             self._assertPerm(self.path, self.template, self.nobody.username, False)
 
     def test_member_cannot_load(self):
-        with self.settings(SENTRY_PROJECT=2):
+        with self.settings(SENTRY_PROJECT=-1):
             self._assertPerm(self.path, self.template, self.member.username, False)
 
 
