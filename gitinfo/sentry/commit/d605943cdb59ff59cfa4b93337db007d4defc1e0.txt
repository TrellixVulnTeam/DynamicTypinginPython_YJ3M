commit d605943cdb59ff59cfa4b93337db007d4defc1e0
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Aug 16 11:20:24 2018 -0700

    feat(ui): Add relative time selector (#9348)
    
    ...for `<TimeSelector>` used in Discover/Health
    
    (Still needs design love)

diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector.jsx
deleted file mode 100644
index 823fcfc25f..0000000000
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector.jsx
+++ /dev/null
@@ -1,72 +0,0 @@
-import React from 'react';
-import PropTypes from 'prop-types';
-import moment from 'moment';
-import styled from 'react-emotion';
-import {Flex, Box} from 'grid-emotion';
-
-import DateTimeField from 'app/components/forms/dateTimeField';
-import DropdownLink from 'app/components/dropdownLink';
-import Button from 'app/components/buttons/button';
-import DynamicWrapper from 'app/components/dynamicWrapper';
-import {t} from 'app/locale';
-
-class TimeRangeSelector extends React.Component {
-  static propTypes = {
-    start: PropTypes.string,
-    end: PropTypes.string,
-    onChange: PropTypes.func,
-    onUpdate: PropTypes.func,
-  };
-
-  formatDate(date) {
-    return moment(date).format('MMMM D, h:mm a');
-  }
-
-  render() {
-    const {className, start, end, onChange, onUpdate} = this.props;
-    const summary = `${this.formatDate(start)} to ${this.formatDate(end)}`;
-
-    return (
-      <Flex direction="column" justify="center" className={className}>
-        <label>{t('Time range')}</label>
-        <DropdownLink
-          title={<DynamicWrapper value={summary} fixed="start to end" />}
-          keepMenuOpen={true}
-          anchorRight={true}
-        >
-          <Box p={2}>
-            update time range (UTC)
-            <DateTimeField
-              name="start"
-              label={t('From')}
-              value={start}
-              onChange={val => onChange('start', val)}
-            />
-            <DateTimeField
-              name="end"
-              label={t('To')}
-              value={end}
-              onChange={val => onChange('end', val)}
-            />
-            <Button onClick={onUpdate}>{t('Update')}</Button>
-          </Box>
-        </DropdownLink>
-      </Flex>
-    );
-  }
-}
-
-export default styled(TimeRangeSelector)`
-  text-align: right;
-  label {
-    font-weight: 400;
-    font-size: 13px;
-    color: ${p => p.theme.gray6};
-    margin-bottom: 12px;
-  }
-  .dropdown-actor-title {
-    font-size: 15px;
-    height: auto;
-    color: ${p => p.theme.button.default.colorActive};
-  }
-`;
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/absoluteSelector.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/absoluteSelector.jsx
new file mode 100644
index 0000000000..ce0e2332ba
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/absoluteSelector.jsx
@@ -0,0 +1,51 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import moment from 'moment';
+import {Box} from 'grid-emotion';
+
+import DateTimeField from 'app/components/forms/dateTimeField';
+import {t} from 'app/locale';
+
+export default class AbsoluteSelector extends React.Component {
+  static propTypes = {
+    /**
+     * Start date value for absolute date selector
+     */
+    start: PropTypes.string,
+    /**
+     * End date value for absolute date selector
+     */
+    end: PropTypes.string,
+
+    /**
+     * Callback when value changes
+     */
+    onChange: PropTypes.func,
+  };
+
+  formatDate(date) {
+    return moment(date).format('MMMM D, h:mm a');
+  }
+
+  render() {
+    const {className, start, end, onChange} = this.props;
+
+    return (
+      <Box p={2} className={className}>
+        update time range (UTC)
+        <DateTimeField
+          name="start"
+          label={t('From')}
+          value={start}
+          onChange={val => onChange('start', val)}
+        />
+        <DateTimeField
+          name="end"
+          label={t('To')}
+          value={end}
+          onChange={val => onChange('end', val)}
+        />
+      </Box>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
new file mode 100644
index 0000000000..4ac2381de5
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
@@ -0,0 +1,134 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import moment from 'moment';
+import styled from 'react-emotion';
+import {Flex} from 'grid-emotion';
+
+import DropdownLink from 'app/components/dropdownLink';
+import Button from 'app/components/buttons/button';
+import DynamicWrapper from 'app/components/dynamicWrapper';
+import {t} from 'app/locale';
+
+import AbsoluteSelector from './absoluteSelector';
+import RelativeSelector from './relativeSelector';
+
+const ALLOWED_RELATIVE_DATES = {
+  '24h': t('Last 24 hours'),
+  '7d': t('Last 7 days'),
+  '14d': t('Last 14 days'),
+  '30d': t('Last 30 days'),
+};
+
+class TimeRangeSelector extends React.Component {
+  static propTypes = {
+    /**
+     * Show absolute date selectors
+     */
+    showAbsolute: PropTypes.bool,
+    /**
+     * Show relative date selectors
+     */
+    showRelative: PropTypes.bool,
+
+    /**
+     * Start date value for absolute date selector
+     */
+    start: PropTypes.string,
+    /**
+     * End date value for absolute date selector
+     */
+    end: PropTypes.string,
+
+    /**
+     * Relative date value
+     */
+    relative: PropTypes.string,
+
+    /**
+     * Callback when value changes
+     */
+    onChange: PropTypes.func,
+
+    /**
+     * Callback when "Update" button is clicked
+     */
+    onUpdate: PropTypes.func,
+  };
+
+  static defaultProps = {
+    showAbsolute: true,
+    showRelative: false,
+  };
+
+  formatDate(date) {
+    return moment(date).format('MMMM D, h:mm a');
+  }
+
+  render() {
+    const {
+      className,
+      start,
+      end,
+      relative,
+      showAbsolute,
+      showRelative,
+      onChange,
+      onUpdate,
+    } = this.props;
+    // Currently we will only show either absolute or relative selector, with "absolute" taking precedence
+    // Maybe an ideal selector would allow the user to choose between the two if both types of dates were allowed
+    const shouldShowAbsolute = showAbsolute || !showRelative;
+    const shouldShowRelative = !showAbsolute && showRelative;
+
+    const summary = shouldShowAbsolute
+      ? `${this.formatDate(start)} to ${this.formatDate(end)}`
+      : `${ALLOWED_RELATIVE_DATES[relative]}`;
+
+    return (
+      <Flex direction="column" justify="center" className={className}>
+        <Label>{t('Time range')}</Label>
+        <DropdownLink
+          title={<DynamicWrapper value={summary} fixed="start to end" />}
+          keepMenuOpen={true}
+          anchorRight={true}
+        >
+          <Flex direction="column">
+            {shouldShowAbsolute && (
+              <AbsoluteSelector onChange={onChange} start={start} end={end} />
+            )}
+            {shouldShowRelative && (
+              <RelativeSelector
+                choices={Object.entries(ALLOWED_RELATIVE_DATES)}
+                onChange={onChange}
+                value={relative}
+              />
+            )}
+
+            <div>
+              <Button onClick={onUpdate}>{t('Update')}</Button>
+            </div>
+          </Flex>
+        </DropdownLink>
+      </Flex>
+    );
+  }
+}
+
+const StyledTimeRangeSelector = styled(TimeRangeSelector)`
+  text-align: right;
+
+  .dropdown-actor-title {
+    font-size: 15px;
+    height: auto;
+    color: ${p => p.theme.button.default.colorActive};
+  }
+`;
+
+const Label = styled('label')`
+  font-weight: 400;
+  font-size: 13px;
+  color: ${p => p.theme.gray6};
+  margin-bottom: 12px;
+`;
+
+export default StyledTimeRangeSelector;
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/relativeSelector.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/relativeSelector.jsx
new file mode 100644
index 0000000000..42b0b2280a
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/relativeSelector.jsx
@@ -0,0 +1,41 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import {Box} from 'grid-emotion';
+
+import SelectControl from 'app/components/forms/selectControl';
+
+export default class RelativeSelector extends React.Component {
+  static propTypes = {
+    /**
+     * List of choice tuples to use for relative dates
+     */
+    choices: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),
+
+    /**
+     * The value for selector
+     */
+    value: PropTypes.string,
+
+    /**
+     * Callback when value changes
+     */
+    onChange: PropTypes.func,
+  };
+
+  handleChange = (value, e) => {
+    const {onChange} = this.props;
+    if (typeof onChange !== 'function') return;
+
+    onChange(value && value.value, e);
+  };
+
+  render() {
+    const {className, choices, value} = this.props;
+
+    return (
+      <Box p={2} className={className}>
+        <SelectControl value={value} choices={choices} onChange={this.handleChange} />
+      </Box>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/index.jsx b/src/sentry/static/sentry/app/views/organizationHealth/index.jsx
index dbb9766d48..790ee2217c 100644
--- a/src/sentry/static/sentry/app/views/organizationHealth/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationHealth/index.jsx
@@ -82,9 +82,9 @@ class OrganizationHealth extends React.Component {
                 />
                 <HeaderSeparator />
                 <TimeRangeSelector
-                  absolute={false}
-                  relative
-                  value={this.state.params.period}
+                  showAbsolute={false}
+                  showRelative
+                  relative={this.state.params.period}
                   onChange={this.handleChangeTime}
                 />
               </Header>
