commit c1e5ae4d9209f2823f89debc9abaaca3c6039915
Author: Chris Clark <christopherchristopherclark@gmail.com>
Date:   Thu May 2 16:01:59 2019 -0700

    Revert "fix(sidebar): scroll at small viewport heights (#12664)" (#13020)
    
    This reverts commit 58c2ee353f0f1e778d240491575bae8e5df8cc82.

diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index e8f6507340..4d134aaef0 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -235,7 +235,7 @@ class Sidebar extends React.Component {
 
     return (
       <StyledSidebar innerRef={this.sidebarRef} collapsed={collapsed}>
-        <SidebarSectionGroupPrimary>
+        <SidebarSectionGroup>
           <SidebarSection>
             <SidebarDropdown
               onClick={this.hidePanel}
@@ -247,123 +247,90 @@ class Sidebar extends React.Component {
             />
           </SidebarSection>
 
-          <PrimaryItems>
-            {hasOrganization && (
-              <React.Fragment>
-                <SidebarSection>
+          {hasOrganization && (
+            <React.Fragment>
+              <SidebarSection>
+                <SidebarItem
+                  {...sidebarItemProps}
+                  index
+                  onClick={this.hidePanel}
+                  icon={<InlineSvg src="icon-projects" />}
+                  label={t('Projects')}
+                  to={
+                    hasSentry10
+                      ? `/organizations/${organization.slug}/projects/`
+                      : `/${organization.slug}/`
+                  }
+                />
+                <Feature features={['sentry10']} organization={organization}>
                   <SidebarItem
                     {...sidebarItemProps}
-                    index
-                    onClick={this.hidePanel}
-                    icon={<InlineSvg src="icon-projects" />}
-                    label={t('Projects')}
-                    to={
-                      hasSentry10
-                        ? `/organizations/${organization.slug}/projects/`
-                        : `/${organization.slug}/`
+                    onClick={(_id, evt) =>
+                      this.navigateWithGlobalSelection(
+                        `/organizations/${organization.slug}/issues/`,
+                        evt
+                      )
+                    }
+                    icon={<InlineSvg src="icon-issues" />}
+                    label={t('Issues')}
+                    to={`/organizations/${organization.slug}/issues/`}
+                    id="issues"
+                  />
+                </Feature>
+
+                <Feature
+                  features={['events']}
+                  hookName="events-sidebar-item"
+                  organization={organization}
+                >
+                  <SidebarItem
+                    {...sidebarItemProps}
+                    onClick={(_id, evt) =>
+                      this.navigateWithGlobalSelection(
+                        `/organizations/${organization.slug}/events/`,
+                        evt
+                      )
                     }
+                    icon={<InlineSvg src="icon-stack" />}
+                    label={t('Events')}
+                    to={`/organizations/${organization.slug}/events/`}
+                    id="events"
                   />
-                  <Feature features={['sentry10']} organization={organization}>
+                </Feature>
+
+                {hasSentry10 && (
+                  <React.Fragment>
                     <SidebarItem
                       {...sidebarItemProps}
                       onClick={(_id, evt) =>
                         this.navigateWithGlobalSelection(
-                          `/organizations/${organization.slug}/issues/`,
+                          `/organizations/${organization.slug}/releases/`,
                           evt
                         )
                       }
-                      icon={<InlineSvg src="icon-issues" />}
-                      label={t('Issues')}
-                      to={`/organizations/${organization.slug}/issues/`}
-                      id="issues"
+                      icon={<InlineSvg src="icon-releases" />}
+                      label={t('Releases')}
+                      to={`/organizations/${organization.slug}/releases/`}
+                      id="releases"
                     />
-                  </Feature>
-
-                  <Feature
-                    features={['events']}
-                    hookName="events-sidebar-item"
-                    organization={organization}
-                  >
                     <SidebarItem
                       {...sidebarItemProps}
                       onClick={(_id, evt) =>
                         this.navigateWithGlobalSelection(
-                          `/organizations/${organization.slug}/events/`,
+                          `/organizations/${organization.slug}/user-feedback/`,
                           evt
                         )
                       }
-                      icon={<InlineSvg src="icon-stack" />}
-                      label={t('Events')}
-                      to={`/organizations/${organization.slug}/events/`}
-                      id="events"
+                      icon={<InlineSvg src="icon-support" />}
+                      label={t('User Feedback')}
+                      to={`/organizations/${organization.slug}/user-feedback/`}
+                      id="user-feedback"
                     />
-                  </Feature>
-
-                  {hasSentry10 && (
-                    <React.Fragment>
-                      <SidebarItem
-                        {...sidebarItemProps}
-                        onClick={(_id, evt) =>
-                          this.navigateWithGlobalSelection(
-                            `/organizations/${organization.slug}/releases/`,
-                            evt
-                          )
-                        }
-                        icon={<InlineSvg src="icon-releases" />}
-                        label={t('Releases')}
-                        to={`/organizations/${organization.slug}/releases/`}
-                        id="releases"
-                      />
-                      <SidebarItem
-                        {...sidebarItemProps}
-                        onClick={(_id, evt) =>
-                          this.navigateWithGlobalSelection(
-                            `/organizations/${organization.slug}/user-feedback/`,
-                            evt
-                          )
-                        }
-                        icon={<InlineSvg src="icon-support" />}
-                        label={t('User Feedback')}
-                        to={`/organizations/${organization.slug}/user-feedback/`}
-                        id="user-feedback"
-                      />
-                    </React.Fragment>
-                  )}
-
-                  {!hasSentry10 && (
-                    <Feature features={['discover']} organization={organization}>
-                      <SidebarItem
-                        {...sidebarItemProps}
-                        onClick={this.hidePanel}
-                        icon={<InlineSvg src="icon-discover" />}
-                        label={t('Discover')}
-                        to={`/organizations/${organization.slug}/discover/`}
-                        id="discover"
-                      />
-                    </Feature>
-                  )}
-                </SidebarSection>
+                  </React.Fragment>
+                )}
 
-                <SidebarSection>
-                  <Feature
-                    features={['sentry10', 'discover']}
-                    organization={organization}
-                  >
-                    <SidebarItem
-                      {...sidebarItemProps}
-                      index
-                      onClick={this.hidePanel}
-                      icon={<InlineSvg src="icon-health" />}
-                      label={t('Dashboards')}
-                      to={`/organizations/${organization.slug}/dashboards/`}
-                      id="customizable-dashboards"
-                    />
-                  </Feature>
-                  <Feature
-                    features={['sentry10', 'discover']}
-                    hookName="discover-sidebar-item"
-                    organization={organization}
-                  >
+                {!hasSentry10 && (
+                  <Feature features={['discover']} organization={organization}>
                     <SidebarItem
                       {...sidebarItemProps}
                       onClick={this.hidePanel}
@@ -373,85 +340,113 @@ class Sidebar extends React.Component {
                       id="discover"
                     />
                   </Feature>
-                  <Feature features={['monitors']} organization={organization}>
-                    <SidebarItem
-                      {...sidebarItemProps}
-                      onClick={(_id, evt) =>
-                        this.navigateWithGlobalSelection(
-                          `/organizations/${organization.slug}/monitors/`,
-                          evt
-                        )
-                      }
-                      icon={<InlineSvg src="icon-labs" />}
-                      label={t('Monitors')}
-                      to={`/organizations/${organization.slug}/monitors/`}
-                      id="monitors"
-                    />
-                  </Feature>
-                </SidebarSection>
-
-                {!hasSentry10 && (
-                  <SidebarSection>
-                    <SidebarItem
-                      {...sidebarItemProps}
-                      onClick={this.hidePanel}
-                      icon={<InlineSvg src="icon-user" />}
-                      label={t('Assigned to me')}
-                      to={`/organizations/${organization.slug}/issues/assigned/`}
-                      id="assigned"
-                    />
-                    <SidebarItem
-                      {...sidebarItemProps}
-                      onClick={this.hidePanel}
-                      icon={<InlineSvg src="icon-star" />}
-                      label={t('Bookmarked issues')}
-                      to={`/organizations/${organization.slug}/issues/bookmarks/`}
-                      id="bookmarks"
-                    />
-                    <SidebarItem
-                      {...sidebarItemProps}
-                      onClick={this.hidePanel}
-                      icon={<InlineSvg src="icon-history" />}
-                      label={t('Recently viewed')}
-                      to={`/organizations/${organization.slug}/issues/history/`}
-                      id="history"
-                    />
-                  </SidebarSection>
                 )}
+              </SidebarSection>
 
-                <SidebarSection>
+              <SidebarSection>
+                <Feature features={['sentry10', 'discover']} organization={organization}>
                   <SidebarItem
                     {...sidebarItemProps}
+                    index
                     onClick={this.hidePanel}
-                    icon={<InlineSvg src="icon-activity" size="22px" />}
-                    label={t('Activity')}
-                    to={`/organizations/${organization.slug}/activity/`}
-                    id="activity"
+                    icon={<InlineSvg src="icon-health" />}
+                    label={t('Dashboards')}
+                    to={`/organizations/${organization.slug}/dashboards/`}
+                    id="customizable-dashboards"
                   />
+                </Feature>
+                <Feature
+                  features={['sentry10', 'discover']}
+                  hookName="discover-sidebar-item"
+                  organization={organization}
+                >
                   <SidebarItem
                     {...sidebarItemProps}
                     onClick={this.hidePanel}
-                    icon={<InlineSvg src="icon-stats" />}
-                    label={t('Stats')}
-                    to={`/organizations/${organization.slug}/stats/`}
-                    id="stats"
+                    icon={<InlineSvg src="icon-discover" />}
+                    label={t('Discover')}
+                    to={`/organizations/${organization.slug}/discover/`}
+                    id="discover"
                   />
-                </SidebarSection>
+                </Feature>
+                <Feature features={['monitors']} organization={organization}>
+                  <SidebarItem
+                    {...sidebarItemProps}
+                    onClick={(_id, evt) =>
+                      this.navigateWithGlobalSelection(
+                        `/organizations/${organization.slug}/monitors/`,
+                        evt
+                      )
+                    }
+                    icon={<InlineSvg src="icon-labs" />}
+                    label={t('Monitors')}
+                    to={`/organizations/${organization.slug}/monitors/`}
+                    id="monitors"
+                  />
+                </Feature>
+              </SidebarSection>
 
+              {!hasSentry10 && (
                 <SidebarSection>
                   <SidebarItem
                     {...sidebarItemProps}
                     onClick={this.hidePanel}
-                    icon={<InlineSvg src="icon-settings" />}
-                    label={t('Settings')}
-                    to={`/settings/${organization.slug}/`}
-                    id="settings"
+                    icon={<InlineSvg src="icon-user" />}
+                    label={t('Assigned to me')}
+                    to={`/organizations/${organization.slug}/issues/assigned/`}
+                    id="assigned"
+                  />
+                  <SidebarItem
+                    {...sidebarItemProps}
+                    onClick={this.hidePanel}
+                    icon={<InlineSvg src="icon-star" />}
+                    label={t('Bookmarked issues')}
+                    to={`/organizations/${organization.slug}/issues/bookmarks/`}
+                    id="bookmarks"
+                  />
+                  <SidebarItem
+                    {...sidebarItemProps}
+                    onClick={this.hidePanel}
+                    icon={<InlineSvg src="icon-history" />}
+                    label={t('Recently viewed')}
+                    to={`/organizations/${organization.slug}/issues/history/`}
+                    id="history"
                   />
                 </SidebarSection>
-              </React.Fragment>
-            )}
-          </PrimaryItems>
-        </SidebarSectionGroupPrimary>
+              )}
+
+              <SidebarSection>
+                <SidebarItem
+                  {...sidebarItemProps}
+                  onClick={this.hidePanel}
+                  icon={<InlineSvg src="icon-activity" size="22px" />}
+                  label={t('Activity')}
+                  to={`/organizations/${organization.slug}/activity/`}
+                  id="activity"
+                />
+                <SidebarItem
+                  {...sidebarItemProps}
+                  onClick={this.hidePanel}
+                  icon={<InlineSvg src="icon-stats" />}
+                  label={t('Stats')}
+                  to={`/organizations/${organization.slug}/stats/`}
+                  id="stats"
+                />
+              </SidebarSection>
+
+              <SidebarSection>
+                <SidebarItem
+                  {...sidebarItemProps}
+                  onClick={this.hidePanel}
+                  icon={<InlineSvg src="icon-settings" />}
+                  label={t('Settings')}
+                  to={`/settings/${organization.slug}/`}
+                  id="settings"
+                />
+              </SidebarSection>
+            </React.Fragment>
+          )}
+        </SidebarSectionGroup>
 
         {hasOrganization && (
           <SidebarSectionGroup>
@@ -564,7 +559,7 @@ const StyledSidebar = styled('div')`
   background: linear-gradient(${p => p.theme.gray4}, ${p => p.theme.gray5});
   color: ${p => p.theme.sidebar.color};
   line-height: 1;
-  padding: 12px 0 2px; /* Allows for 32px avatars  */
+  padding: 12px 19px 2px; /* Allows for 32px avatars  */
   width: ${p => p.theme.sidebar.expandedWidth};
   position: fixed;
   top: 0;
@@ -582,74 +577,20 @@ const StyledSidebar = styled('div')`
     height: ${p => p.theme.sidebar.mobileHeight};
     bottom: auto;
     width: auto;
-    padding: 0 ${space(1)};
+    padding: 0;
     align-items: center;
   }
 `;
 
 const SidebarSectionGroup = styled('div')`
   ${responsiveFlex};
-`;
-
-const SidebarSectionGroupPrimary = styled(SidebarSectionGroup)`
-  /* necessary for child flexing on msedge and ff */
-  min-height: 0;
-  min-width: 0;
-  flex: 1;
-
-  /* expand to fill the entire height on mobile */
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
-    height: 100%;
-    align-items: center;
-  }
-`;
-
-const PrimaryItems = styled('div')`
-  overflow: auto;
-  flex: 1;
-  display: flex;
-  flex-direction: column;
-  -ms-overflow-style: -ms-autohiding-scrollbar;
-
-  @media (max-height: 600px) and (min-width: ${p => p.theme.breakpoints[0]}) {
-    border-bottom: 1px solid ${p => p.theme.gray3};
-    padding-bottom: ${p => space(1)};
-    box-shadow: rgba(0, 0, 0, 0.15) 0px -10px 10px inset;
-
-    &::-webkit-scrollbar {
-      background-color: transparent;
-      width: 8px;
-    }
-
-    &::-webkit-scrollbar-thumb {
-      background: ${p => p.theme.gray3};
-      border-radius: 8px;
-    }
-  }
-
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
-    overflow-y: visible;
-    flex-direction: row;
-    height: 100%;
-    align-items: center;
-    border-right: 1px solid ${p => p.theme.gray3};
-    padding-right: ${p => space(1)};
-    margin-right: ${p => space(0.5)};
-    box-shadow: rgba(0, 0, 0, 0.15) -10px 0px 10px inset;
-
-    ::-webkit-scrollbar {
-      display: none;
-    }
-  }
+  flex-shrink: 0;
 `;
 
 const SidebarSection = styled(SidebarSectionGroup)`
   ${p => !p.noMargin && `margin: ${space(1)} 0`};
-  padding: 0 19px;
-
   @media (max-width: ${p => p.theme.breakpoints[0]}) {
-    margin: 0;
-    padding: 0;
+    margin: 0 ${space(1)};
   }
 
   &:empty {
