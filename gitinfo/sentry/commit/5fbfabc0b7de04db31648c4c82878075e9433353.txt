commit 5fbfabc0b7de04db31648c4c82878075e9433353
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Feb 3 15:53:54 2013 -0800

    Replace get_project_list with Project.objects.get_for_user

diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index d14b345802..146951c9f3 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -22,7 +22,7 @@ from celery.signals import task_postrun
 from django.conf import settings as dj_settings
 from django.core.signals import request_finished
 from django.db import models, transaction, IntegrityError
-from django.db.models import Sum
+from django.db.models import Sum, Q
 from django.db.models.signals import post_save, post_delete, post_init, class_prepared
 from django.utils import timezone
 from django.utils.datastructures import SortedDict
@@ -779,7 +779,45 @@ class RawQuerySet(object):
 
 
 class ProjectManager(BaseManager, ChartMixin):
-    pass
+    def get_for_user(self, user=None, access=None, hidden=False, team=None):
+        """
+        Returns a SortedDict of all projects a user has some level of access to.
+        """
+        from sentry.models import Team
+
+        # TODO: the result of this function should be cached
+        is_authenticated = (user and user.is_authenticated())
+
+        base_qs = self
+        if not hidden:
+            base_qs = base_qs.filter(status=0)
+        if team:
+            base_qs = base_qs.filter(team=team)
+
+        # Collect kwarg queries to filter on. We can use this to perform a single
+        # query to get all of the desired projects ordered by name
+        filters = Q()
+
+        # If we're not requesting specific access include all
+        # public projects
+        if access is None:
+            filters |= Q(public=True)
+        elif not (user and user.is_authenticated()):
+            return SortedDict()
+
+        # If the user is authenticated, include their memberships
+        if is_authenticated:
+            teams = Team.objects.get_for_user(user, access).values()
+            if not teams and access is not None:
+                return SortedDict()
+            filters |= Q(team__in=teams)
+
+        projects = set(base_qs.filter(filters))
+
+        if is_authenticated:
+            projects |= set(base_qs.filter(accessgroup__members=user))
+
+        return sorted(projects, key=lambda x: x.name)
 
 
 class MetaManager(BaseManager):
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 7390669b87..8fefd796f2 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -9,9 +9,8 @@ from django import forms
 from django.contrib.auth.models import User
 from django.utils.translation import ugettext_lazy as _
 from sentry.plugins import Plugin
-from sentry.models import UserOption
+from sentry.models import UserOption, Project
 from sentry.utils.cache import cache
-from sentry.web.helpers import get_project_list
 from sentry.constants import MEMBER_USER
 
 
@@ -42,7 +41,10 @@ class NotificationUserOptionsForm(BaseNotificationUserOptionsForm):
     def __init__(self, *args, **kwargs):
         super(NotificationUserOptionsForm, self).__init__(*args, **kwargs)
         user = self.user
-        self.project_list = get_project_list(user, access=MEMBER_USER, key='slug')
+        self.project_list = dict(
+            (p.slug, p) for p in
+            Project.objects.get_for_user(user, access=MEMBER_USER)
+        )
         project_choices = sorted((p.slug, p.name) for p in self.project_list.values())
         self.fields['projects'].choices = project_choices
         self.fields['projects'].widget.choices = self.fields['projects'].choices
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index be8c697eb8..61e28f1d2a 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -36,7 +36,7 @@ from sentry.utils.javascript import to_json
 from sentry.utils.http import is_valid_origin, get_origins
 from sentry.web.decorators import has_access
 from sentry.web.frontend.groups import _get_group_list
-from sentry.web.helpers import render_to_response, get_project_list
+from sentry.web.helpers import render_to_response
 
 error_logger = logging.getLogger('sentry.errors.api.http')
 logger = logging.getLogger('sentry.api.http')
@@ -508,7 +508,7 @@ def chart(request, team=None, project=None):
 
         data = cache.get(cache_key)
         if data is None:
-            project_list = get_project_list(request.user).values()
+            project_list = Project.objects.get_for_user(request.user)
             data = Project.objects.get_chart_data_for_group(project_list, max_days=days)
             cache.set(cache_key, data, 300)
 
@@ -524,20 +524,20 @@ def get_group_trends(request, team=None, project=None):
     minutes = int(request.REQUEST.get('minutes', 15))
     limit = min(100, int(request.REQUEST.get('limit', 10)))
 
-    if team:
-        project_dict = get_project_list(request.user, team=team)
-    elif project:
-        project_dict = {project.id: project}
+    if not team and project:
+        project_list = [project]
     else:
-        project_dict = get_project_list(request.user)
+        project_list = Project.objects.get_for_user(request.user, team=team)
+
+    project_dict = dict((p.id, p) for p in project_list)
 
     base_qs = Group.objects.filter(
-        project__in=project_dict.keys(),
+        project__in=project_list,
         status=0,
     )
 
     if has_trending():
-        group_list = list(Group.objects.get_accelerated(project_dict.keys(), base_qs, minutes=(
+        group_list = list(Group.objects.get_accelerated(project_dict, base_qs, minutes=(
             minutes
         ))[:limit])
     else:
@@ -567,12 +567,12 @@ def get_new_groups(request, team=None, project=None):
     minutes = int(request.REQUEST.get('minutes', 15))
     limit = min(100, int(request.REQUEST.get('limit', 10)))
 
-    if team:
-        project_dict = get_project_list(request.user, team=team)
-    elif project:
-        project_dict = {project.id: project}
+    if not team and project:
+        project_list = [project]
     else:
-        project_dict = get_project_list(request.user)
+        project_list = Project.objects.get_for_user(request.user, team=team)
+
+    project_dict = dict((p.id, p) for p in project_list)
 
     cutoff = datetime.timedelta(minutes=minutes)
     cutoff_dt = timezone.now() - cutoff
@@ -601,21 +601,24 @@ def get_resolved_groups(request, team=None, project=None):
     minutes = int(request.REQUEST.get('minutes', 15))
     limit = min(100, int(request.REQUEST.get('limit', 10)))
 
-    if team:
-        project_list = get_project_list(request.user, team=team).values()
-    elif project:
+    if not team and project:
         project_list = [project]
     else:
-        project_list = get_project_list(request.user).values()
+        project_list = Project.objects.get_for_user(request.user, team=team)
+
+    project_dict = dict((p.id, p) for p in project_list)
 
     cutoff = datetime.timedelta(minutes=minutes)
     cutoff_dt = timezone.now() - cutoff
 
-    group_list = Group.objects.filter(
+    group_list = list(Group.objects.filter(
         project__in=project_list,
         status=STATUS_RESOLVED,
         resolved_at__gte=cutoff_dt,
-    ).select_related('project').order_by('-score')[:limit]
+    ).order_by('-score')[:limit])
+
+    for group in group_list:
+        group._project_cache = project_dict.get(group.project_id)
 
     data = to_json(group_list, request)
 
@@ -628,13 +631,13 @@ def get_resolved_groups(request, team=None, project=None):
 @never_cache
 @csrf_exempt
 @has_access
-def get_stats(request, project=None):
+def get_stats(request, team=None, project=None):
     minutes = int(request.REQUEST.get('minutes', 15))
 
-    if project:
+    if not team and project:
         project_list = [project]
     else:
-        project_list = get_project_list(request.user).values()
+        project_list = Project.objects.get_for_user(request.user, team=team)
 
     cutoff = datetime.timedelta(minutes=minutes)
     cutoff_dt = timezone.now() - cutoff
diff --git a/src/sentry/web/decorators.py b/src/sentry/web/decorators.py
index 18da8f4c64..6df0d174a4 100644
--- a/src/sentry/web/decorators.py
+++ b/src/sentry/web/decorators.py
@@ -4,7 +4,7 @@ from django.http import HttpResponseRedirect, HttpResponse
 from django.shortcuts import get_object_or_404
 
 from sentry.models import Project, Team, Group
-from sentry.web.helpers import get_project_list, render_to_response, \
+from sentry.web.helpers import render_to_response, \
   get_login_url
 
 
@@ -84,11 +84,13 @@ def has_access(access_or_func=None, team=None, access=None):
                             return HttpResponseRedirect(reverse('sentry'))
                 else:
                     key, value = lookup_kwargs.items()[0]
-                    project_list = get_project_list(request.user, access, key=key, team=team)
+                    project_list = Project.objects.get_for_user(request.user, access, team=team)
 
-                    try:
-                        project = project_list[value]
-                    except KeyError:
+                    for p in project_list:
+                        if getattr(p, key) == value:
+                            project = p
+                            break
+                    else:
                         return HttpResponseRedirect(reverse('sentry'))
             else:
                 project = None
diff --git a/src/sentry/web/frontend/projects.py b/src/sentry/web/frontend/projects.py
index 0216c91db4..e8e0381460 100644
--- a/src/sentry/web/frontend/projects.py
+++ b/src/sentry/web/frontend/projects.py
@@ -14,7 +14,7 @@ from django.views.decorators.http import require_http_methods
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.constants import MEMBER_OWNER
-from sentry.models import ProjectKey, Team, FilterKey
+from sentry.models import Project, ProjectKey, Team, FilterKey
 from sentry.permissions import (can_create_projects, can_remove_project, can_create_teams,
     can_add_project_key, can_remove_project_key)
 from sentry.plugins import plugins
@@ -23,8 +23,7 @@ from sentry.web.decorators import login_required, has_access
 from sentry.web.forms.projects import (NewProjectForm, NewProjectAdminForm,
     ProjectTagsForm, EditProjectForm, RemoveProjectForm, EditProjectAdminForm)
 from sentry.web.forms.teams import NewTeamForm, SelectTeamForm
-from sentry.web.helpers import (render_to_response, get_project_list,
-    plugin_config)
+from sentry.web.helpers import render_to_response, plugin_config
 
 
 @login_required
@@ -110,7 +109,7 @@ def remove_project(request, team, project):
     if not can_remove_project(request.user, project):
         return HttpResponseRedirect(reverse('sentry'))
 
-    project_list = filter(lambda x: x != project, get_project_list(request.user).itervalues())
+    project_list = filter(lambda x: x != project, Project.objects.get_for_user(request.user))
 
     form = RemoveProjectForm(request.user, project_list, request.POST or None)
 
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 93b44d1378..981059443d 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -11,7 +11,6 @@ import warnings
 
 from django.conf import settings as dj_settings
 from django.core.urlresolvers import reverse, resolve
-from django.db.models import Q
 from django.http import HttpResponse
 from django.template import loader, RequestContext, Context
 from django.utils.datastructures import SortedDict
@@ -26,43 +25,9 @@ logger = logging.getLogger('sentry.errors')
 
 
 def get_project_list(user=None, access=None, hidden=False, key='id', team=None):
-    """
-    Returns a SortedDict of all projects a user has some level of access to.
-    """
-    # TODO: the result of this function should be cached
-    is_authenticated = (user and user.is_authenticated())
-
-    base_qs = Project.objects
-    if not hidden:
-        base_qs = base_qs.filter(status=0)
-    if team:
-        base_qs = base_qs.filter(team=team)
-
-    # Collect kwarg queries to filter on. We can use this to perform a single
-    # query to get all of the desired projects ordered by name
-    filters = Q()
-
-    # If we're not requesting specific access include all
-    # public projects
-    if access is None:
-        filters |= Q(public=True)
-    elif not (user and user.is_authenticated()):
-        return SortedDict()
-
-    # If the user is authenticated, include their memberships
-    if is_authenticated:
-        teams = Team.objects.get_for_user(user, access).values()
-        if not teams and access is not None:
-            return SortedDict()
-        filters |= Q(team__in=teams)
-
-    projects = set(base_qs.filter(filters))
-
-    if is_authenticated:
-        projects |= set(base_qs.filter(accessgroup__members=user))
-
+    warnings.warn('get_project_list is Deprecated. Use Project.objects.get_for_user instead.', DeprecationWarning)
     return SortedDict((getattr(p, key), p)
-        for p in sorted(projects, key=lambda x: x.name))
+            for p in Project.objects.get_for_user(user, access))
 
 
 def get_team_list(user, access=None):
diff --git a/tests/sentry/web/helpers/tests.py b/tests/sentry/web/helpers/tests.py
index d71d911ab9..1d64dc148e 100644
--- a/tests/sentry/web/helpers/tests.py
+++ b/tests/sentry/web/helpers/tests.py
@@ -12,7 +12,7 @@ from sentry.web.helpers import get_project_list, get_login_url
 from sentry.testutils import TestCase
 
 
-class GetProjectListTEst(TestCase):
+class GetProjectListTest(TestCase):
     def setUp(self):
         self.user = User.objects.create(username="admin", email="admin@localhost")
         self.project = Project.objects.get()
