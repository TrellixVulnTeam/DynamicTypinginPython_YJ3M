commit 5c93fc10da5a09724e72580475c3ccf624e8fd80
Author: ted kaemming <ted@kaemming.com>
Date:   Tue Oct 24 11:57:06 2017 -0700

    ref: Delete assorted dead and orphaned code (#6413)

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 1c5f566cd8..b45ce2c80d 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -101,9 +101,6 @@ LOG_LEVELS_MAP = {v: k for k, v in six.iteritems(LOG_LEVELS)}
 DEFAULT_ALERT_PROJECT_THRESHOLD = (500, 25)  # 500%, 25 events
 DEFAULT_ALERT_GROUP_THRESHOLD = (1000, 25)  # 1000%, 25 events
 
-# Default paginator value
-EVENTS_PER_PAGE = 15
-
 # Default sort option for the group stream
 DEFAULT_SORT_OPTION = 'date'
 
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index c3bc424f2d..bc542a5365 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -127,10 +127,6 @@ class Event(Model):
         warnings.warn('Event.message_short is deprecated, use Event.title', DeprecationWarning)
         return self.title
 
-    def has_two_part_message(self):
-        warnings.warn('Event.has_two_part_message is no longer used', DeprecationWarning)
-        return False
-
     @property
     def team(self):
         return self.project.team
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 9d52bd8776..497fde5e1f 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -383,10 +383,6 @@ class Group(Model):
         warnings.warn('Group.message_short is deprecated, use Group.title', DeprecationWarning)
         return self.title
 
-    def has_two_part_message(self):
-        warnings.warn('Group.has_two_part_message is no longer used', DeprecationWarning)
-        return False
-
     @property
     def organization(self):
         return self.project.organization
diff --git a/src/sentry/templates/sentry/groups/public_details.html b/src/sentry/templates/sentry/groups/public_details.html
deleted file mode 100644
index 6a2fd994dc..0000000000
--- a/src/sentry/templates/sentry/groups/public_details.html
+++ /dev/null
@@ -1,65 +0,0 @@
-{% extends "sentry/groups/details.html" %}
-
-{% load i18n %}
-{% load sentry_activity %}
-{% load sentry_helpers %}
-{% load sentry_plugins %}
-
-{% block title %}{{ event.error }} | {{ block.super }}{% endblock %}
-
-{% block page_header_block %}
-    <section id="page-header" class="toolbar" style="height:5px;">
-    </section>
-{% endblock %}
-
-{% block bodyclass %}{% endblock %}
-
-{% block main %}
-    {% handle_before_events request group %}
-
-    <div id="details">
-        <div id="event_list" class="inactive"></div>
-    </div>
-
-    <section class="body">
-        {% block main %}
-
-            {% with event|get_rendered_interfaces:request as interface_list %}
-
-                <div class="btn-toolbar event-toolbar">
-                    <!-- We switch the ordering of events here as it makes more sense visually -->
-                    <a class="btn pull-left prev {% if not next_event %} disabled{% endif %}"{% if next_event %} href="{% url 'sentry-group-event' group.organization.slug group.project.slug group.id next_event.id %}"{% endif %}><span></span> {% trans "Newer Event" %}</a>
-                    <a class="btn pull-right next {% if not prev_event %} disabled{% endif %}"{% if prev_event %} href="{% url 'sentry-group-event' group.organization.slug group.project.slug group.id prev_event.id %}"{% endif %}>{% trans "Older Event" %} <span></span></a>
-                    <h4>Event at {{ event.datetime }} {{ event.datetime.tzinfo }}</h4>
-                </div>
-
-                <div class="alert alert-block alert-info">
-                    <p>{% trans "You are viewing a publicly available version of this event's data. Some information may not be available." %}</p>
-                </div>
-
-                {% if event.has_two_part_message %}
-                    <div class="box">
-                      <div class="box-header">
-                          <h3>{% trans "Full message" %}</h3>
-                      </div>
-                      <div class="box-content with-padding">
-                        <pre id="full-message">{{ event.message }}</pre>
-                      </div>
-                    </div>
-                {% endif %}
-
-                {% include "sentry/partial/_event_details.html" %}
-            {% endwith %}
-        {% endblock %}
-    </section>
-{% endblock %}
-
-{% block content_after %}
-    <script type="text/javascript">
-    $(document).ready(function() {
-        new app.GroupDetailsPage({
-            group: {{ group|to_json:request|safe }},
-        });
-    });
-    </script>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/users/details.html b/src/sentry/templates/sentry/users/details.html
deleted file mode 100644
index 9bda55f04d..0000000000
--- a/src/sentry/templates/sentry/users/details.html
+++ /dev/null
@@ -1,63 +0,0 @@
-{% extends "sentry/bases/admin.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-{% load sentry_plugins %}
-
-{% block title %}{{ tag.value }} | {{ block.super }}{% endblock %}
-
-{% block bodyclass %} with-sidebar{% endblock %}
-
-{% block sidebar %}
-    <h6>User Details</h6>
-    <dl>
-        <dt>Email:</dt>
-        <dd>{% if tag.data.email %}{{ tag.data.email }}{% else %}&mdash;{% endif %}</dd>
-        <dt>First Seen:</dt>
-        <dd>{{ tag.first_seen|timesince }}</dd>
-        <dt>Last Seen:</dt>
-        <dd>{{ tag.last_seen|timesince }}</dd>
-        <dt>Number of Events:</dt>
-        <dd>{{ tag.times_seen|small_count }}</dd>
-    </dl>
-    {% if tag.data.data %}
-        <h6>Metadata</h6>
-        <dl>
-            {% for key, value in tag.data.data.iteritems %}
-                <dt>{{ key|titlize }}</dt>
-                <dd>{{ value }}</dd>
-            {% endfor %}
-        </dl>
-    {% endif %}
-{% endblock %}
-
-{% block main %}
-    {% paginator event_list from request as event_list per_page EVENTS_PER_PAGE %}
-
-    <div class="btn-toolbar">
-        <div class="pull-left">
-            <h2 style="line-height:1;">{{ tag.value }}{% if tag.data.email %} <small>{{ tag.data.email }}</small>{% endif %}</h2>
-        </div>
-        <div class="btn-group pull-right">
-            <a class="btn prev{% if not event_list.paginator.has_previous %} disabled{% else %}" href="?p={{ event_list.paginator.previous_page }}{% endif %}"><span>{% trans "Previous" %}</span></a>
-            <a class="btn next{% if not event_list.paginator.has_next %} disabled{% else %}" href="?p={{ event_list.paginator.next_page }}{% endif %}"><span>{% trans "Next" %}</span></a>
-        </div>
-    </div>
-
-    <div id="event_list"></div>
-
-    <script>
-    new app.GroupListView({
-        className: 'group-list',
-        members: {{ event_list.paginator.objects|to_json:request|safe }},
-        id: "event_list"
-    });
-    </script>
-
-    <div class="btn-toolbar">
-        <div class="btn-group pull-right">
-            <a class="btn prev{% if not event_list.paginator.has_previous %} disabled{% else %}" href="?p={{ event_list.paginator.previous_page }}{% endif %}"><span>{% trans "Previous" %}</span></a>
-            <a class="btn next{% if not event_list.paginator.has_next %} disabled{% else %}" href="?p={{ event_list.paginator.next_page }}{% endif %}"><span>{% trans "Next" %}</span></a>
-        </div>
-    </div>
-{% endblock %}
diff --git a/src/sentry/templatetags/sentry_activity.py b/src/sentry/templatetags/sentry_activity.py
deleted file mode 100644
index 9ba53577b3..0000000000
--- a/src/sentry/templatetags/sentry_activity.py
+++ /dev/null
@@ -1,96 +0,0 @@
-"""
-sentry.templatetags.sentry_activity
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import
-
-import logging
-
-from django import template
-from django.utils.html import escape, urlize, linebreaks
-from django.utils.safestring import mark_safe
-
-from sentry.models import Activity, User
-from sentry.templatetags.sentry_helpers import timesince
-from sentry.utils.avatar import get_gravatar_url
-
-register = template.Library()
-
-ACTIVITY_ACTION_STRINGS = {
-    Activity.NOTE:
-    'left a note',
-    Activity.SET_RESOLVED:
-    'marked this event as resolved',
-    Activity.SET_UNRESOLVED:
-    'marked this event as unresolved',
-    Activity.SET_IGNORED:
-    'marked this event as ignored',
-    Activity.SET_PUBLIC:
-    'made this event public',
-    Activity.SET_PRIVATE:
-    'made this event private',
-    Activity.SET_REGRESSION:
-    'marked this event as a regression',
-    Activity.CREATE_ISSUE:
-    u'created an issue on {provider:s} titled <a href="{location:s}">{title:s}</a>',
-    Activity.FIRST_SEEN:
-    'first saw this event',
-    Activity.ASSIGNED:
-    'assigned this event to {user:s}',
-    Activity.UNASSIGNED:
-    'unassigned this event',
-    Activity.RELEASE:
-    'saw a new release: {version:s}',
-}
-
-
-@register.filter
-def render_activity(item):
-    if not item.group:
-        # not implemented
-        return
-
-    try:
-        action_str = ACTIVITY_ACTION_STRINGS[item.type]
-    except KeyError:
-        logging.warning('Unknown activity type present: %s', item.type)
-        return
-
-    if item.type == Activity.CREATE_ISSUE:
-        action_str = action_str.format(**item.data)
-    elif item.type == Activity.ASSIGNED:
-        if item.data['assignee'] == item.user_id:
-            assignee_name = 'themselves'
-        else:
-            try:
-                assignee = User.objects.get(id=item.data['assignee'])
-            except User.DoesNotExist:
-                assignee_name = 'unknown'
-            else:
-                assignee_name = assignee.get_display_name()
-        action_str = action_str.format(user=assignee_name)
-
-    output = ''
-
-    if item.user:
-        user = item.user
-        name = user.name or user.email
-        output += '<span class="avatar"><img src="%s"></span> ' % (
-            get_gravatar_url(user.email, size=20),
-        )
-        output += '<strong>%s</strong> %s' % (escape(name), action_str)
-    else:
-        output += '<span class="avatar sentry"></span> '
-        output += 'The system %s' % (action_str, )
-
-    output += ' <span class="sep">&mdash;</span> <span class="time">%s</span>' % (
-        timesince(item.datetime),
-    )
-
-    if item.type == Activity.NOTE:
-        output += linebreaks(urlize(escape(item.data['text'])))
-
-    return mark_safe(output)
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index 8ae8bf1c10..7c56de9bea 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -29,7 +29,6 @@ from sentry import options
 from sentry.api.serializers import serialize as serialize_func
 from sentry.models import Organization
 from sentry.utils import json
-from sentry.utils.javascript import to_json
 from sentry.utils.strings import soft_break as _soft_break
 from sentry.utils.strings import soft_hyphenate, to_unicode, truncatechars
 from six.moves import range
@@ -47,7 +46,10 @@ register = template.Library()
 truncatechars = register.filter(stringfilter(truncatechars))
 truncatechars.is_safe = True
 
-register.filter(to_json)
+
+@register.filter
+def to_json(obj, request=None):
+    return json.dumps_htmlsafe(obj)
 
 
 @register.filter
diff --git a/src/sentry/templatetags/sentry_plugins.py b/src/sentry/templatetags/sentry_plugins.py
index 2e23e88a3b..1b14adce3a 100644
--- a/src/sentry/templatetags/sentry_plugins.py
+++ b/src/sentry/templatetags/sentry_plugins.py
@@ -69,24 +69,6 @@ def get_widgets(group, request):
             yield resp.render(request)
 
 
-@register.filter
-def get_legacy_annotations(group, request=None):
-    project = group.project
-
-    annotation_list = []
-    for plugin in plugins.for_project(project, version=1):
-        results = safe_execute(
-            plugin.tags, request, group, annotation_list, _with_transaction=False
-        )
-
-        if not results:
-            continue
-
-        annotation_list = results
-
-    return annotation_list
-
-
 @register.filter
 def get_annotations(group, request=None):
     project = group.project
@@ -103,27 +85,6 @@ def get_annotations(group, request=None):
     return annotation_list
 
 
-@register.simple_tag
-def handle_before_events(request, event_list):
-    if not event_list:
-        return ''
-
-    if not hasattr(event_list, '__iter__'):
-        project = event_list.project
-        event_list = [event_list]
-    else:
-        projects = set(e.project for e in event_list)
-        if len(projects) == 1:
-            project = projects.pop()
-        else:
-            project = None
-
-    for plugin in plugins.for_project(project):
-        safe_execute(plugin.before_events, request, event_list)
-
-    return ''
-
-
 @register.filter
 def get_plugins(project):
     results = []
diff --git a/src/sentry/utils/javascript.py b/src/sentry/utils/javascript.py
index 6daf9a2822..249626accc 100644
--- a/src/sentry/utils/javascript.py
+++ b/src/sentry/utils/javascript.py
@@ -7,25 +7,6 @@ sentry.utils.javascript
 """
 from __future__ import absolute_import
 
-import six
-
-from datetime import timedelta
-from django.core.urlresolvers import reverse
-from django.utils import timezone
-from django.utils.html import escape
-
-from sentry import tsdb, tagstore
-from sentry.app import env
-from sentry.models import (
-    Group, GroupBookmark, GroupMeta, GroupSeen, GroupStatus
-)
-from sentry.templatetags.sentry_plugins import get_legacy_annotations
-from sentry.utils import json
-from sentry.utils.db import attach_foreignkey
-from sentry.utils.http import absolute_uri
-
-transformers = {}
-
 
 def has_sourcemap(event):
     if event.platform != 'javascript':
@@ -42,177 +23,3 @@ def has_sourcemap(event):
                 return True
 
     return False
-
-
-def transform(objects, request=None):
-    if request is None:
-        request = getattr(env, 'request', None)
-    if not objects:
-        return objects
-    elif not isinstance(objects, (list, tuple)):
-        return transform([objects], request=request)[0]
-    # elif isinstance(obj, dict):
-    #     return dict((k, transform(v, request=request)) for k, v in six.iteritems(obj))
-    t = transformers.get(type(objects[0]))
-
-    if t:
-        t.attach_metadata(objects, request=request)
-        return [t(o, request=request) for o in objects]
-    return objects
-
-
-def to_json(obj, request=None):
-    result = transform(obj, request=request)
-    return json.dumps_htmlsafe(result)
-
-
-def register(type):
-    def wrapped(cls):
-        transformers[type] = cls()
-        return cls
-
-    return wrapped
-
-
-class Transformer(object):
-    def __call__(self, obj, request=None):
-        return self.transform(obj, request)
-
-    def attach_metadata(self, objects, request=None):
-        pass
-
-    def transform(self, obj, request=None):
-        return {}
-
-
-@register(Group)
-class GroupTransformer(Transformer):
-    def attach_metadata(self, objects, request=None):
-        from sentry.templatetags.sentry_plugins import handle_before_events
-
-        attach_foreignkey(objects, Group.project, ['team'])
-
-        GroupMeta.objects.populate_cache(objects)
-
-        if request and objects:
-            handle_before_events(request, objects)
-
-        if request and request.user.is_authenticated() and objects:
-            bookmarks = set(
-                GroupBookmark.objects.filter(
-                    user=request.user,
-                    group__in=objects,
-                ).values_list('group_id', flat=True)
-            )
-            seen_groups = dict(
-                GroupSeen.objects.filter(
-                    user=request.user,
-                    group__in=objects,
-                ).values_list('group_id', 'last_seen')
-            )
-        else:
-            bookmarks = set()
-            seen_groups = {}
-
-        if objects:
-            end = timezone.now()
-            start = end - timedelta(days=1)
-
-            historical_data = tsdb.get_range(
-                model=tsdb.models.group,
-                keys=[g.id for g in objects],
-                start=start,
-                end=end,
-            )
-        else:
-            historical_data = {}
-
-        user_tagkeys = tagstore.get_group_tag_keys([o.id for o in objects], 'sentry:user')
-        user_counts = {}
-        for user_tagkey in user_tagkeys:
-            user_counts[user_tagkey.group_id] = user_tagkey.values_seen
-
-        for g in objects:
-            g.is_bookmarked = g.pk in bookmarks
-            g.historical_data = [x[1] for x in historical_data.get(g.id, [])]
-            active_date = g.active_at or g.first_seen
-            g.has_seen = seen_groups.get(g.id, active_date) > active_date
-            g.annotations = [{
-                'label': 'users',
-                'count': user_counts.get(g.id, 0),
-            }]
-
-    def localize_datetime(self, dt, request=None):
-        if not request:
-            return dt.isoformat()
-        elif getattr(request, 'timezone', None):
-            return dt.astimezone(request.timezone).isoformat()
-        return dt.isoformat()
-
-    def transform(self, obj, request=None):
-        status = obj.get_status()
-        if status == GroupStatus.RESOLVED:
-            status_label = 'resolved'
-        elif status == GroupStatus.IGNORED:
-            status_label = 'ignored'
-        else:
-            status_label = 'unresolved'
-
-        version = obj.last_seen
-        if obj.resolved_at:
-            version = max(obj.resolved_at, obj.last_seen)
-        version = int(version.strftime('%s'))
-
-        d = {
-            'id':
-            six.text_type(obj.id),
-            'count':
-            six.text_type(obj.times_seen),
-            'title':
-            escape(obj.title),
-            'message':
-            escape(obj.get_legacy_message()),
-            'level':
-            obj.level,
-            'levelName':
-            escape(obj.get_level_display()),
-            'logger':
-            escape(obj.logger),
-            'permalink':
-            absolute_uri(
-                reverse('sentry-group', args=[obj.organization.slug, obj.project.slug, obj.id])
-            ),
-            'firstSeen':
-            self.localize_datetime(obj.first_seen, request=request),
-            'lastSeen':
-            self.localize_datetime(obj.last_seen, request=request),
-            'canResolve':
-            request and request.user.is_authenticated(),
-            'status':
-            status_label,
-            'isResolved':
-            obj.get_status() == GroupStatus.RESOLVED,
-            'isPublic':
-            obj.is_public,
-            'score':
-            getattr(obj, 'sort_value', 0),
-            'project': {
-                'name': escape(obj.project.name),
-                'slug': obj.project.slug,
-            },
-            'version':
-            version,
-        }
-        if hasattr(obj, 'is_bookmarked'):
-            d['isBookmarked'] = obj.is_bookmarked
-        if hasattr(obj, 'has_seen'):
-            d['hasSeen'] = obj.has_seen
-        if hasattr(obj, 'historical_data'):
-            d['historicalData'] = obj.historical_data
-        if hasattr(obj, 'annotations'):
-            d['annotations'] = obj.annotations
-
-        # TODO(dcramer): these aren't tags, and annotations aren't annotations
-        if request:
-            d['tags'] = get_legacy_annotations(obj, request)
-        return d
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index e69a3e4369..8bb807f418 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -16,7 +16,6 @@ from django.template import loader, RequestContext, Context
 
 from sentry.api.serializers.base import serialize
 from sentry.auth import access
-from sentry.constants import EVENTS_PER_PAGE
 from sentry.models import Team
 from sentry.utils.auth import get_login_url  # NOQA: backwards compatibility
 
@@ -28,7 +27,6 @@ def get_default_context(request, existing_context=None, team=None):
     from sentry.plugins import plugins
 
     context = {
-        'EVENTS_PER_PAGE': EVENTS_PER_PAGE,
         'CSRF_COOKIE_NAME': settings.CSRF_COOKIE_NAME,
         'URL_PREFIX': options.get('system.url-prefix'),
         'SINGLE_ORGANIZATION': settings.SENTRY_SINGLE_ORGANIZATION,
