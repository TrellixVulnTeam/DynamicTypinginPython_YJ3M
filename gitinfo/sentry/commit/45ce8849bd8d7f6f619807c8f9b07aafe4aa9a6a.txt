commit 45ce8849bd8d7f6f619807c8f9b07aafe4aa9a6a
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Mon May 22 15:30:19 2017 -0700

    Parse repo url (#5374)

diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index 20c12d93ee..96f593ebd4 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -232,6 +232,14 @@ export function getShortVersion(version) {
   return version;
 }
 
+export function parseGitHubRepo(repo) {
+  let re = /github\.com\/([^\/]+\/[^\/]+)/i;
+  let match = repo.match(re);
+  let parsedRepo;
+  match ? (parsedRepo = match[1]) : (parsedRepo = repo);
+  return parsedRepo;
+}
+
 /**
  * Converts a multi-line textarea input value into an array,
  * eliminating empty lines
diff --git a/src/sentry/static/sentry/app/views/organizationRepositories.jsx b/src/sentry/static/sentry/app/views/organizationRepositories.jsx
index 93cd7d735c..183ef17bb2 100644
--- a/src/sentry/static/sentry/app/views/organizationRepositories.jsx
+++ b/src/sentry/static/sentry/app/views/organizationRepositories.jsx
@@ -10,7 +10,7 @@ import MenuItem from '../components/menuItem';
 import OrganizationHomeContainer from '../components/organizations/homeContainer';
 import PluginComponentBase from '../components/bases/pluginComponentBase';
 import {t, tct} from '../locale';
-import {sortArray} from '../utils';
+import {sortArray, parseGitHubRepo} from '../utils';
 
 const UNKNOWN_ERROR = {
   error_type: 'unknown'
@@ -51,6 +51,9 @@ class AddRepositoryLink extends PluginComponentBase {
 
   onSubmit() {
     // TODO(dcramer): set form saving state
+    let repoName = this.props.provider.id === 'github'
+      ? {name: parseGitHubRepo(this.state.formData.name)}
+      : this.state.formData;
     this.setState(
       {
         state: FormState.SAVING
@@ -59,7 +62,7 @@ class AddRepositoryLink extends PluginComponentBase {
         this.api.request(`/organizations/${this.props.orgId}/repos/`, {
           data: {
             provider: this.props.provider.id,
-            ...this.state.formData
+            ...repoName
           },
           method: 'POST',
           success: this.onSaveSuccess.bind(this, data => {
diff --git a/tests/js/spec/utils/utils.spec.jsx b/tests/js/spec/utils/utils.spec.jsx
index 97b3d65a5f..ef5b6e460f 100644
--- a/tests/js/spec/utils/utils.spec.jsx
+++ b/tests/js/spec/utils/utils.spec.jsx
@@ -1,4 +1,4 @@
-import {valueIsEqual, extractMultilineFields} from 'app/utils';
+import {valueIsEqual, extractMultilineFields, parseGitHubRepo} from 'app/utils';
 
 describe('utils.valueIsEqual', function() {
   it('should return true when objects are deeply equal', function() {
@@ -128,3 +128,27 @@ five`
     ).toEqual(['one', 'two', 'three', 'four', 'five']);
   });
 });
+
+describe('utils.parseGitHubRepo', function() {
+  it('should work for simple github url', function() {
+    expect(parseGitHubRepo('github.com/example/example')).toEqual('example/example');
+  });
+  it('should work for full github url', function() {
+    expect(parseGitHubRepo('https://github.com/example/example')).toEqual(
+      'example/example'
+    );
+  });
+  it('should work for trailing slash', function() {
+    expect(parseGitHubRepo('https://github.com/example/example/')).toEqual(
+      'example/example'
+    );
+  });
+  it('should work for repo only', function() {
+    expect(parseGitHubRepo('example/example')).toEqual('example/example');
+  });
+  it('should parse repo from url with extra info', function() {
+    expect(parseGitHubRepo('github.com/example/example/commits/adsadsa')).toEqual(
+      'example/example'
+    );
+  });
+});
