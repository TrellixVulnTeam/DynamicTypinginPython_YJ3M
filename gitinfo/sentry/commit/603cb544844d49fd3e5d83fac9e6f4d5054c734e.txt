commit 603cb544844d49fd3e5d83fac9e6f4d5054c734e
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Apr 16 17:14:04 2015 -0700

    Move tag plugins to Plugin2 architecture

diff --git a/src/sentry/plugins/bases/tag.py b/src/sentry/plugins/bases/tag.py
index 201cdef0f1..8979322fc6 100644
--- a/src/sentry/plugins/bases/tag.py
+++ b/src/sentry/plugins/bases/tag.py
@@ -8,11 +8,10 @@ sentry.plugins.bases.tag
 from __future__ import absolute_import
 
 from sentry.constants import MAX_TAG_VALUE_LENGTH
-from sentry.models import Group
-from sentry.plugins import Plugin
+from sentry.plugins import Plugin2
 
 
-class TagPlugin(Plugin):
+class TagPlugin(Plugin2):
     tag = None
     tag_label = None
     project_default_enabled = True
@@ -32,6 +31,3 @@ class TagPlugin(Plugin):
             for v in self.get_tag_values(event)
             if len(v) <= MAX_TAG_VALUE_LENGTH
         ]
-
-    def post_process(self, group, event, is_new, is_sample, **kwargs):
-        Group.objects.add_tags(group, self.get_tags(event))
diff --git a/src/sentry/plugins/sentry_interface_types/models.py b/src/sentry/plugins/sentry_interface_types/models.py
index 537ab834b6..5914a81bd9 100644
--- a/src/sentry/plugins/sentry_interface_types/models.py
+++ b/src/sentry/plugins/sentry_interface_types/models.py
@@ -21,6 +21,7 @@ class InterfaceTypePlugin(TagPlugin):
     the class name of each interface (e.g. Http, Stacktrace, Exception).
     """
     descrption = __doc__
+    slug = 'interface_types'
     title = _('Auto Tag: Interface Types')
     version = sentry.VERSION
     author = "Sentry Team"
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 7f1b3d23b4..2c55164edf 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -70,6 +70,8 @@ def post_process_group(event, is_new, is_regression, is_sample, **kwargs):
             expires=300,
         )
 
+    record_additional_tags(event=event)
+
     rp = RuleProcessor(event, is_new, is_regression, is_sample)
     # TODO(dcramer): ideally this would fanout, but serializing giant
     # objects back and forth isn't super efficient
@@ -77,6 +79,16 @@ def post_process_group(event, is_new, is_regression, is_sample, **kwargs):
         safe_execute(callback, event, futures)
 
 
+def record_additional_tags(event):
+    from sentry.models import Group
+
+    added_tags = []
+    for plugin in plugins.for_project(event.project, version=2):
+        added_tags.extend(safe_execute(plugin.get_tags, event) or ())
+    if added_tags:
+        Group.objects.add_tags(event.group, added_tags)
+
+
 @instrumented_task(
     name='sentry.tasks.post_process.plugin_post_process_group',
     stat_suffix=lambda plugin_slug, *a, **k: plugin_slug)
@@ -109,7 +121,9 @@ def record_affected_user(event, **kwargs):
         value = user_data.get(key)
         if value:
             tag_data[key] = value
-    tag_data['ip'] = event.ip_address
+    ip_address = event.ip_address
+    if ip_address:
+        tag_data['ip'] = ip_address
 
     Group.objects.add_tags(event.group, [
         ('sentry:user', user_ident, tag_data)
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index 613baf7ca1..7fc36feccc 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -7,7 +7,8 @@ from mock import Mock, patch
 from sentry.models import Group
 from sentry.testutils import TestCase
 from sentry.tasks.post_process import (
-    post_process_group, record_affected_user, record_affected_code
+    post_process_group, record_affected_user, record_affected_code,
+    record_additional_tags
 )
 
 
@@ -107,16 +108,29 @@ class RecordAffectedUserTest(TestCase):
         with patch.object(Group.objects, 'add_tags') as add_tags:
             record_affected_user(event=event)
 
-            add_tags.assert_called_once(event.group, [
+            add_tags.assert_called_once_with(event.group, [
                 ('sentry:user', 'email:foo@example.com', {
-                    'id': None,
                     'email': 'foo@example.com',
-                    'username': None,
-                    'data': None,
                 })
             ])
 
 
+class RecordAdditionalTagsTest(TestCase):
+    def test_simple(self):
+        # TODO(dcramer): this test ideally would actually test that tags get
+        # added
+        event = Group.objects.from_kwargs(1, message='foo', **{
+            'sentry.interfaces.User': {
+                'email': 'foo@example.com',
+            },
+        })
+
+        with patch.object(Group.objects, 'add_tags') as add_tags:
+            record_additional_tags(event=event)
+
+            assert not add_tags.called
+
+
 class RecordAffectedCodeTest(TestCase):
     def test_simple(self):
         event = Group.objects.from_kwargs(1, message='foo', **{
