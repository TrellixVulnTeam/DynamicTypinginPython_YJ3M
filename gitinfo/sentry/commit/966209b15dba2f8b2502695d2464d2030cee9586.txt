commit 966209b15dba2f8b2502695d2464d2030cee9586
Author: James Cunningham <jtcunning@getsentry.com>
Date:   Tue May 28 14:24:51 2019 -0700

    feat(metrics): Introduce the ability to individually override the sample rate. (#13431)
    
    * feat(metrics): Introduce the ability to individually override the sample rate.
    
    * Correct missing kwarg.
    
    * Add sample_rate to timer decorator.
    
    * Actually pass along the sample_rate to the internal metrics queue.

diff --git a/src/sentry/utils/metrics.py b/src/sentry/utils/metrics.py
index d868fe64c7..f3d9fe8cf5 100644
--- a/src/sentry/utils/metrics.py
+++ b/src/sentry/utils/metrics.py
@@ -34,14 +34,11 @@ def _get_key(key):
     return key
 
 
-def _should_sample():
-    sample_rate = settings.SENTRY_METRICS_SAMPLE_RATE
-
+def _should_sample(sample_rate):
     return sample_rate >= 1 or random() >= 1 - sample_rate
 
 
-def _sampled_value(value):
-    sample_rate = settings.SENTRY_METRICS_SAMPLE_RATE
+def _sampled_value(value, sample_rate):
     if sample_rate < 1:
         value = int(value * (1.0 / sample_rate))
     return value
@@ -58,8 +55,8 @@ class InternalMetrics(object):
             from sentry import tsdb
 
             while True:
-                key, instance, tags, amount = q.get()
-                amount = _sampled_value(amount)
+                key, instance, tags, amount, sample_rate = q.get()
+                amount = _sampled_value(amount, sample_rate)
                 if instance:
                     full_key = u'{}.{}'.format(key, instance)
                 else:
@@ -78,24 +75,25 @@ class InternalMetrics(object):
 
         self._started = True
 
-    def incr(self, key, instance=None, tags=None, amount=1):
+    def incr(self, key, instance=None, tags=None, amount=1,
+             sample_rate=settings.SENTRY_METRICS_SAMPLE_RATE):
         if not self._started:
             self._start()
-        self.q.put((key, instance, tags, amount))
+        self.q.put((key, instance, tags, amount, sample_rate))
 
 
 internal = InternalMetrics()
 
 
-def incr(key, amount=1, instance=None, tags=None, skip_internal=True):
-    sample_rate = settings.SENTRY_METRICS_SAMPLE_RATE
+def incr(key, amount=1, instance=None, tags=None, skip_internal=True,
+         sample_rate=settings.SENTRY_METRICS_SAMPLE_RATE):
     banned_prefix = key.startswith(metrics_skip_internal_prefixes)
     if (
         not skip_internal and
-        _should_sample() and
+        _should_sample(sample_rate) and
         not banned_prefix
     ):
-        internal.incr(key, instance, tags, amount)
+        internal.incr(key, instance, tags, amount, sample_rate)
     try:
         backend.incr(key, instance, tags, amount, sample_rate)
         if not skip_internal and not banned_prefix:
@@ -105,10 +103,8 @@ def incr(key, amount=1, instance=None, tags=None, skip_internal=True):
         logger.exception('Unable to record backend metric')
 
 
-def timing(key, value, instance=None, tags=None):
-    # TODO(dcramer): implement timing for tsdb
-    # TODO(dcramer): implement sampling for timing
-    sample_rate = settings.SENTRY_METRICS_SAMPLE_RATE
+def timing(key, value, instance=None, tags=None,
+           sample_rate=settings.SENTRY_METRICS_SAMPLE_RATE):
     try:
         backend.timing(key, value, instance, tags, sample_rate)
     except Exception:
@@ -117,7 +113,7 @@ def timing(key, value, instance=None, tags=None):
 
 
 @contextmanager
-def timer(key, instance=None, tags=None):
+def timer(key, instance=None, tags=None, sample_rate=settings.SENTRY_METRICS_SAMPLE_RATE):
     if tags is None:
         tags = {}
 
@@ -130,7 +126,7 @@ def timer(key, instance=None, tags=None):
     else:
         tags['result'] = 'success'
     finally:
-        timing(key, time() - start, instance, tags)
+        timing(key, time() - start, instance, tags, sample_rate)
 
 
 def wraps(key, instance=None, tags=None):
