commit 08e3d6a20dbea80731e3939f55a44bc0a7ad3338
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jan 2 23:45:30 2012 -0800

    Refactor Processor instance management into a generic class (for reuse later). Move processor tests into their own module. Change BaseProcessor -> Processor.

diff --git a/sentry/models.py b/sentry/models.py
index 6c26d57490..e003eebd2a 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -31,7 +31,7 @@ from sentry.utils import cached_property, \
 from sentry.utils.models import Model, GzippedDictField
 from sentry.utils.manager import GroupManager, ProjectManager
 from sentry.templatetags.sentry_helpers import truncatechars
-import sentry.processors
+import sentry.processors.base
 
 __all__ = ('Event', 'Group')
 
@@ -354,12 +354,6 @@ class Event(MessageBase):
         module = self.data['__sentry__'].get('module', 'ver')
         return module, self.data['__sentry__']['version']
 
-post_save.connect(
-    sentry.processors.post_save_processors,
-    sender=Event,
-    dispatch_uid="processors_post_save"
-)
-
 
 class FilterValue(models.Model):
     """
@@ -478,5 +472,13 @@ def create_default_project(created_models, verbosity=2, **kwargs):
             if verbosity > 0:
                 print 'done!'
 
-
-post_syncdb.connect(create_default_project)
+# Signal registration
+post_save.connect(
+    sentry.processors.base.post_save_processors,
+    sender=Event,
+    dispatch_uid="processors_post_save"
+)
+post_syncdb.connect(
+    create_default_project,
+    dispatch_uid="create_default_project"
+)
diff --git a/sentry/processors/__init__.py b/sentry/processors/__init__.py
index dddaa24d26..198a0ac0c9 100644
--- a/sentry/processors/__init__.py
+++ b/sentry/processors/__init__.py
@@ -6,44 +6,4 @@ sentry.processors
 :license: BSD, see LICENSE for more details.
 """
 
-
-import logging
-
-
-class BaseProcessor(object):
-    conditions = {}
-
-    def post_processing(self, event):
-        """
-        Called every time an event is created
-        """
-        return
-
-PROCESSORS_CACHE = None
-
-
-def post_save_processors(sender, **kwargs):
-    global PROCESSORS_CACHE
-
-    from sentry.conf import settings
-
-    if not settings.PROCESSORS:
-        return
-
-    if PROCESSORS_CACHE is None:
-        processors = []
-        for processor_ in settings.PROCESSORS:
-            module_name, class_name = processor_.rsplit('.', 1)
-            try:
-                module = __import__(module_name, {}, {}, class_name)
-                processor_class = getattr(module, class_name)
-                processor_ = processor_class()
-            except Exception:
-                logger = logging.getLogger('sentry.errors.processors')
-                logger.exception('Unable to import %s' % (processor_,))
-                continue
-            processors.append(processor_)
-        PROCESSORS_CACHE = processors
-
-    for processor in PROCESSORS_CACHE:
-        processor.post_processing(sender)
+from .base import Processor
diff --git a/sentry/processors/base.py b/sentry/processors/base.py
new file mode 100644
index 0000000000..d03d93b72d
--- /dev/null
+++ b/sentry/processors/base.py
@@ -0,0 +1,26 @@
+"""
+sentry.processors.base
+~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from sentry.conf import settings
+from sentry.utils import InstanceManager
+
+
+class Processor(object):
+    conditions = {}
+
+    def post_processing(self, event):
+        """
+        Called every time an event is created
+        """
+        return
+
+    objects = InstanceManager(settings.PROCESSORS)
+
+
+def post_save_processors(sender, **kwargs):
+    for processor in Processor.objects.all():
+        processor.post_processing(sender)
diff --git a/sentry/processors/console.py b/sentry/processors/console.py
index 28ce0afd17..d95b33f3fa 100644
--- a/sentry/processors/console.py
+++ b/sentry/processors/console.py
@@ -6,11 +6,10 @@ sentry.processors.console
 :license: BSD, see LICENSE for more details.
 """
 
-from sentry.processors import BaseProcessor
+from .base import Processor
 
 
-class ConsoleProcessor(BaseProcessor):
-
+class ConsoleProcessor(Processor):
     def post_processing(self, event):
         print 'Received an event:'
         print '  ID:', event.event_id
diff --git a/sentry/utils/__init__.py b/sentry/utils/__init__.py
index fc19368d80..c875e28470 100644
--- a/sentry/utils/__init__.py
+++ b/sentry/utils/__init__.py
@@ -16,6 +16,44 @@ from django.utils.encoding import force_unicode
 
 from sentry.conf import settings
 
+
+class InstanceManager(object):
+    def __init__(self, class_list):
+        self.update(class_list)
+
+    def update(self, class_list):
+        """
+        Updates the class list and wipes the cache.
+        """
+        self.cache = None
+        self.class_list = class_list
+
+    def all(self):
+        """
+        Returns a list of cached instances.
+        """
+        if not self.class_list:
+            return []
+
+        if self.cache is not None:
+            return self.cache
+
+        results = []
+        for cls_path in self.class_list:
+            module_name, class_name = cls_path.rsplit('.', 1)
+            try:
+                module = __import__(module_name, {}, {}, class_name)
+                cls = getattr(module, class_name)
+                instance = cls()
+            except Exception:
+                logger = logging.getLogger('sentry.errors')
+                logger.exception('Unable to import %s' % (cls_path,))
+                continue
+            results.append(instance)
+        self.cache = results
+
+        return results
+
 _FILTER_CACHE = None
 
 
diff --git a/tests/processors/__init__.py b/tests/processors/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/processor.py b/tests/processors/processor.py
similarity index 61%
rename from tests/processor.py
rename to tests/processors/processor.py
index 18e9b30e4f..01acd9f6fd 100644
--- a/tests/processor.py
+++ b/tests/processors/processor.py
@@ -1,8 +1,7 @@
+from sentry.processors import Processor
 
-from sentry.processors import BaseProcessor
 
-
-class TestProcessor(BaseProcessor):
+class TestProcessor(Processor):
 
     def __init__(self, *args, **kwargs):
         self.called = 0
diff --git a/tests/processors/tests.py b/tests/processors/tests.py
new file mode 100644
index 0000000000..d78555bfad
--- /dev/null
+++ b/tests/processors/tests.py
@@ -0,0 +1,50 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import, with_statement
+
+
+from sentry.processors import Processor
+from sentry.conf import settings
+
+from tests.testcases import TestCase
+
+from . import processor
+
+
+class SentryProcessorsTest(TestCase):
+    def setUp(self):
+        self.orig_processors = settings.PROCESSORS
+        Processor.objects.update((
+            'tests.processors.processor.TestProcessor',
+        ))
+        processor.CALLED = 0
+
+    def tearDown(self):
+        settings.PROCESSORS = self.orig_processors
+        Processor.objects.update(settings.PROCESSORS)
+
+    def create_event(self):
+        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
+        resp = self._postWithSignature(kwargs)
+        self.assertEquals(resp.status_code, 200)
+
+    def test_processors_cache(self):
+        # TODO: move these tests to base instance manager tests
+        self.assertEqual(Processor.objects.cache, None)
+
+        # ensure cache gets updated after all() is called
+        self.assertEqual(len(Processor.objects.all()), 1)
+        self.assertEqual(len(Processor.objects.cache), 1)
+
+        Processor.objects.cache = None
+
+        # ensure cache gets updated after create event
+        self.create_event()
+        self.assertEqual(len(Processor.objects.cache), 1)
+
+    def test_processors_called(self):
+        self.create_event()
+        self.create_event()
+        proc_list = Processor.objects.all()
+        self.assertEqual(len(proc_list), 1)
+        self.assertEqual(proc_list[0].called, 2)
diff --git a/tests/tests.py b/tests/tests.py
index 01f366f50e..f536e57b0f 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -608,35 +608,3 @@ class SentryUDPTest(TestCase):
         ts, message, sig = self._makeMessage(data)
         packet = get_auth_header(sig, ts, 'udpTest') + '\n\n' + message
         self.assertEquals(None, self.server.handle(packet, self.address))
-
-
-class SentryProcessorsTest(TestCase):
-    def setUp(self):
-        self.orig_processors = settings.PROCESSORS
-        processors.PROCESSORS_CACHE = None
-        settings.PROCESSORS = (
-            'tests.processor.TestProcessor',
-        )
-        from . import processor
-        processor.CALLED = 0
-
-    def tearDown(self):
-        settings.PROCESSORS = self.orig_processors
-        processors.PROCESSORS_CACHE = None
-
-    def create_event(self):
-        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
-        resp = self._postWithSignature(kwargs)
-        self.assertEquals(resp.status_code, 200)
-
-    def test_processors_cache(self):
-        self.assertEqual(processors.PROCESSORS_CACHE, None)
-        self.create_event()
-        self.assertEqual(len(processors.PROCESSORS_CACHE), 1)
-
-    def test_processors_called(self):
-        self.create_event()
-        self.create_event()
-        proc_list = processors.PROCESSORS_CACHE
-        self.assertEqual(len(proc_list), 1)
-        self.assertEqual(proc_list[0].called, 2)
