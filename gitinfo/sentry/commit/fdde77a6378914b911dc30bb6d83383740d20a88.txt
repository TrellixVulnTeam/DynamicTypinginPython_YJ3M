commit fdde77a6378914b911dc30bb6d83383740d20a88
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Sep 19 11:06:43 2019 -0700

    ref(ts): Convert `<TimeSince>` to typescript (#14767)
    
    typescript me

diff --git a/src/sentry/static/sentry/app/components/timeSince.jsx b/src/sentry/static/sentry/app/components/timeSince.jsx
deleted file mode 100644
index 6e84c655d0..0000000000
--- a/src/sentry/static/sentry/app/components/timeSince.jsx
+++ /dev/null
@@ -1,88 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import moment from 'moment-timezone';
-import _ from 'lodash';
-
-import ConfigStore from 'app/stores/configStore';
-import {t} from 'app/locale';
-
-class TimeSince extends React.PureComponent {
-  static propTypes = {
-    date: PropTypes.any.isRequired,
-    suffix: PropTypes.string,
-  };
-  static defaultProps = {
-    suffix: 'ago',
-  };
-
-  static getDateObj(date) {
-    if (_.isString(date) || _.isNumber(date)) {
-      date = new Date(date);
-    }
-    return date;
-  }
-
-  static getRelativeDate = (currentDateTime, suffix) => {
-    const date = TimeSince.getDateObj(currentDateTime);
-
-    if (!suffix) {
-      return moment(date).fromNow(true);
-    } else if (suffix === 'ago') {
-      return moment(date).fromNow();
-    } else if (suffix === 'old') {
-      return t('%(time)s old', {time: moment(date).fromNow(true)});
-    } else {
-      throw new Error('Unsupported time format suffix');
-    }
-  };
-
-  state = {
-    relative: '',
-  };
-
-  static getDerivedStateFromProps(props) {
-    return {
-      relative: TimeSince.getRelativeDate(props.date, props.suffix),
-    };
-  }
-
-  componentDidMount() {
-    this.setRelativeDateTicker();
-  }
-
-  componentWillUnmount() {
-    if (this.ticker) {
-      clearTimeout(this.ticker);
-      this.ticker = null;
-    }
-  }
-
-  setRelativeDateTicker = () => {
-    const ONE_MINUTE_IN_MS = 60000;
-
-    this.ticker = setTimeout(() => {
-      this.setState({
-        relative: TimeSince.getRelativeDate(this.props.date, this.props.suffix),
-      });
-      this.setRelativeDateTicker();
-    }, ONE_MINUTE_IN_MS);
-  };
-
-  render() {
-    const date = TimeSince.getDateObj(this.props.date);
-    const user = ConfigStore.get('user');
-    const options = user ? user.options : {};
-    const format = options.clock24Hours ? 'MMMM D YYYY HH:mm:ss z' : 'LLL z';
-    return (
-      <time
-        dateTime={date.toISOString()}
-        title={moment.tz(date, options.timezone).format(format)}
-        className={this.props.className}
-      >
-        {this.state.relative}
-      </time>
-    );
-  }
-}
-
-export default TimeSince;
diff --git a/src/sentry/static/sentry/app/components/timeSince.tsx b/src/sentry/static/sentry/app/components/timeSince.tsx
new file mode 100644
index 0000000000..ccaee0dfb3
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/timeSince.tsx
@@ -0,0 +1,111 @@
+import {isNumber, isString} from 'lodash';
+import PropTypes from 'prop-types';
+import React from 'react';
+import moment from 'moment-timezone';
+
+import ConfigStore from 'app/stores/configStore';
+import {t} from 'app/locale';
+
+const ONE_MINUTE_IN_MS = 60000;
+
+type RelaxedDateType = string | number | Date;
+
+type Props = {
+  /**
+   * The date value, can be string, number (e.g. timestamp), or instance of Date
+   */
+  date: RelaxedDateType;
+
+  /**
+   * Suffix after elapsed time
+   * e.g. "ago" in "5 minutes ago"
+   */
+
+  // TODO(ts): This should be "required", but emotion doesn't seem to like its defaultProps
+  suffix?: string;
+
+  className?: string;
+};
+
+class TimeSince extends React.PureComponent<Props> {
+  static propTypes = {
+    date: PropTypes.any.isRequired,
+    suffix: PropTypes.string,
+  };
+
+  static defaultProps = {
+    suffix: 'ago',
+  };
+
+  state = {
+    relative: '',
+  };
+
+  static getDerivedStateFromProps(props: Props) {
+    return {
+      relative: getRelativeDate(props.date, props.suffix),
+    };
+  }
+
+  componentDidMount() {
+    this.setRelativeDateTicker();
+  }
+
+  componentWillUnmount() {
+    if (this.ticker) {
+      window.clearTimeout(this.ticker);
+      this.ticker = null;
+    }
+  }
+
+  ticker: number | null = null;
+
+  setRelativeDateTicker = () => {
+    this.ticker = window.setTimeout(() => {
+      this.setState({
+        relative: getRelativeDate(this.props.date, this.props.suffix),
+      });
+      this.setRelativeDateTicker();
+    }, ONE_MINUTE_IN_MS);
+  };
+
+  render() {
+    const date = getDateObj(this.props.date);
+    const user = ConfigStore.get('user');
+    const options = user ? user.options : {};
+    const format = options.clock24Hours ? 'MMMM D YYYY HH:mm:ss z' : 'LLL z';
+
+    return (
+      <time
+        dateTime={date.toISOString()}
+        title={moment.tz(date, options.timezone).format(format)}
+        className={this.props.className}
+      >
+        {this.state.relative}
+      </time>
+    );
+  }
+}
+
+export default TimeSince;
+
+function getDateObj(date: RelaxedDateType): Date {
+  if (isString(date) || isNumber(date)) {
+    date = new Date(date);
+  }
+  return date;
+}
+
+function getRelativeDate(currentDateTime: RelaxedDateType, suffix?: string) {
+  const date = getDateObj(currentDateTime);
+
+  if (!suffix) {
+    return moment(date).fromNow(true);
+  } else if (suffix === 'ago') {
+    return moment(date).fromNow();
+  } else if (suffix === 'old') {
+    return t('%(time)s old', {time: moment(date).fromNow(true)});
+  } else {
+    throw new Error('Unsupported time format suffix');
+  }
+}
