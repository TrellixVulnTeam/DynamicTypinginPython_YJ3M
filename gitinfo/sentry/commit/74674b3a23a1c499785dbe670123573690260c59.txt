commit 74674b3a23a1c499785dbe670123573690260c59
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Dec 14 11:19:37 2017 -0800

    ref(settings): Convert plugin details pages to React (#6692)
    
    * ref(settings): Convert plugin details pages to React
    
    * ref(settings): Add projectPluginDetails tests
    
    * fix: Make reset plugin part of the project plugin endpoint

diff --git a/src/sentry/api/endpoints/project_plugin_details.py b/src/sentry/api/endpoints/project_plugin_details.py
index fb1ae3acc2..28094fdc9d 100644
--- a/src/sentry/api/endpoints/project_plugin_details.py
+++ b/src/sentry/api/endpoints/project_plugin_details.py
@@ -46,7 +46,7 @@ class ProjectPluginDetailsEndpoint(ProjectEndpoint):
 
     def post(self, request, project, plugin_id):
         """
-        Enable plugin or Test plugin
+        Enable plugin, Test plugin or Reset plugin values
         """
         plugin = self._get_plugin(plugin_id)
 
@@ -66,6 +66,12 @@ class ProjectPluginDetailsEndpoint(ProjectEndpoint):
                 test_results = 'No errors returned'
             return Response({'detail': test_results}, status=200)
 
+        if request.DATA.get('reset'):
+            plugin = self._get_plugin(plugin_id)
+            plugin.reset_options(project=project)
+            context = serialize(plugin, request.user, PluginWithConfigSerializer(project))
+            return Response(context, status=200)
+
         if not plugin.can_disable:
             return Response({'detail': ERR_ALWAYS_ENABLED}, status=400)
 
diff --git a/src/sentry/api/serializers/models/plugin.py b/src/sentry/api/serializers/models/plugin.py
index acffce7946..78076f600e 100644
--- a/src/sentry/api/serializers/models/plugin.py
+++ b/src/sentry/api/serializers/models/plugin.py
@@ -61,6 +61,14 @@ class PluginSerializer(Serializer):
                 'url': six.text_type(obj.author_url)
             }
 
+        if obj.description:
+            d['description'] = six.text_type(obj.description)
+
+        if obj.resource_links:
+            d['resourceLinks'] = [
+                {'title': title, 'url': url} for [title, url] in obj.resource_links
+            ]
+
         return d
 
 
diff --git a/src/sentry/static/sentry/app/components/pluginConfig.jsx b/src/sentry/static/sentry/app/components/pluginConfig.jsx
index 9f360611d6..95ddea0b37 100644
--- a/src/sentry/static/sentry/app/components/pluginConfig.jsx
+++ b/src/sentry/static/sentry/app/components/pluginConfig.jsx
@@ -38,9 +38,7 @@ const PluginConfig = React.createClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    if (!_.isEqual(nextProps.data, this.props.data)) {
-      this.loadPlugin(nextProps.data);
-    }
+    this.loadPlugin(nextProps.data);
   },
 
   shouldComponentUpdate(nextProps, nextState) {
@@ -50,8 +48,6 @@ const PluginConfig = React.createClass({
   },
 
   loadPlugin(data) {
-    if (plugins.isLoaded(data)) return;
-
     this.setState(
       {
         loading: true,
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index ea43ec8553..063cc6ecf4 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -82,6 +82,7 @@ import ProjectSettingsLayout from './views/settings/project/projectSettingsLayou
 import ProjectUserReportSettings from './views/projectUserReportSettings';
 import ProjectUserReports from './views/projectUserReports';
 import ProjectPlugins from './views/projectPlugins';
+import ProjectPluginDetails from './views/projectPluginDetails';
 import ReleaseAllEvents from './views/releaseAllEvents';
 import ReleaseArtifacts from './views/releaseArtifacts';
 import ReleaseCommits from './views/releases/releaseCommits';
@@ -304,6 +305,12 @@ const projectSettingsRoutes = [
     name="Integrations"
     component={errorHandler(ProjectPlugins)}
   />,
+  <Route
+    key="plugins/:pluginId/"
+    path="plugins/:pluginId/"
+    name="Integration Details"
+    component={errorHandler(ProjectPluginDetails)}
+  />,
   <Route
     key="install/"
     path="install/"
diff --git a/src/sentry/static/sentry/app/views/projectPluginDetails.jsx b/src/sentry/static/sentry/app/views/projectPluginDetails.jsx
new file mode 100644
index 0000000000..d4eed8dc8f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectPluginDetails.jsx
@@ -0,0 +1,178 @@
+import React from 'react';
+import AsyncView from './asyncView';
+import {t} from '../locale';
+import Button from '../components/buttons/button';
+import PluginConfig from '../components/pluginConfig';
+import ExternalLink from '../components/externalLink';
+import IndicatorStore from '../stores/indicatorStore';
+
+export default class ProjectPlugins extends AsyncView {
+  getTitle() {
+    let {plugin} = this.state;
+    if (plugin && plugin.name) {
+      return plugin.name;
+    } else {
+      return 'Sentry';
+    }
+  }
+
+  getEndpoints() {
+    let {projectId, orgId, pluginId} = this.props.params;
+    return [['plugin', `/projects/${orgId}/${projectId}/plugins/${pluginId}/`]];
+  }
+
+  trimSchema(value) {
+    return value.split('//')[1];
+  }
+
+  handleReset = () => {
+    let {projectId, orgId, pluginId} = this.props.params;
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    this.api.request(`/projects/${orgId}/${projectId}/plugins/${pluginId}/`, {
+      method: 'POST',
+      data: {reset: true},
+      success: plugin => {
+        this.setState({plugin});
+        IndicatorStore.addSuccess(t('Plugin was reset'));
+      },
+      error: () => {
+        IndicatorStore.addError(t('An error occurred'));
+      },
+      complete: () => IndicatorStore.remove(loadingIndicator),
+    });
+  };
+
+  enable = () => {
+    this.toggleEnable(true);
+  };
+
+  disable = () => {
+    this.toggleEnable(false);
+  };
+
+  handleDisable = () => {
+    this.setState(prevState => ({
+      plugin: {
+        ...prevState.plugin,
+        enabled: false,
+      },
+    }));
+  };
+
+  toggleEnable(shouldEnable) {
+    let method = shouldEnable ? 'POST' : 'DELETE';
+
+    let {orgId, projectId, pluginId} = this.props.params;
+
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+
+    this.api.request(`/projects/${orgId}/${projectId}/plugins/${pluginId}/`, {
+      method,
+      success: () => {
+        this.setState(prevState => ({
+          plugin: {
+            ...prevState.plugin,
+            enabled: shouldEnable,
+          },
+        }));
+        IndicatorStore.addSuccess(t('Plugin was updated'));
+      },
+      error: () => {
+        IndicatorStore.addError(t('An error occurred'));
+      },
+      complete: () => IndicatorStore.remove(loadingIndicator),
+    });
+  }
+
+  renderActions() {
+    let {plugin} = this.state;
+
+    let enable = (
+      <Button onClick={this.enable} style={{marginRight: '6px'}}>
+        {t('Enable Plugin')}
+      </Button>
+    );
+
+    let disable = (
+      <Button priority="danger" onClick={this.disable} style={{marginRight: '6px'}}>
+        {t('Disable Plugin')}
+      </Button>
+    );
+
+    let toggleEnable = plugin.enabled ? disable : enable;
+
+    return (
+      <div className="pull-right">
+        {plugin.canDisable && toggleEnable}
+        <Button onClick={this.handleReset}>{t('Reset Configuration')}</Button>
+      </div>
+    );
+  }
+
+  renderBody() {
+    let {organization, project} = this.props;
+    let {plugin} = this.state;
+
+    return (
+      <div>
+        {this.renderActions()}
+        <h2>{plugin.name}</h2>
+        <hr />
+        <div className="row">
+          <div className="col-md-7">
+            <PluginConfig
+              organization={organization}
+              project={project}
+              data={plugin}
+              onDisablePlugin={this.handleDisable}
+            />
+          </div>
+          <div className="col-md-4 col-md-offset-1">
+            <div className="plugin-meta">
+              <h4>{t('Plugin Information')}</h4>
+
+              <dl className="flat">
+                <dt>{t('Name')}</dt>
+                <dd>{plugin.name}</dd>
+                <dt>{t('Author')}</dt>
+                <dd>{plugin.author.name}</dd>
+                {plugin.author.url && (
+                  <div>
+                    <dt>{t('URL')}</dt>
+                    <dd>
+                      <ExternalLink href={plugin.author.url}>
+                        {this.trimSchema(plugin.author.url)}
+                      </ExternalLink>
+                    </dd>
+                  </div>
+                )}
+                <dt>{t('Version')}</dt>
+                <dd>{plugin.version}</dd>
+              </dl>
+
+              {plugin.description && (
+                <div>
+                  <h4>{t('Description')}</h4>
+                  <p className="description">{plugin.description}</p>
+                </div>
+              )}
+
+              {plugin.resourceLinks && (
+                <div>
+                  <h4>{t('Resources')}</h4>
+                  <dl className="flat">
+                    {plugin.resourceLinks.map(({title, url}) => (
+                      <dd key={url}>
+                        <ExternalLink href={url}>{title}</ExternalLink>
+                      </dd>
+                    ))}
+                  </dl>
+                </div>
+              )}
+            </div>
+          </div>
+        </div>
+      </div>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/projectPlugins.jsx b/src/sentry/static/sentry/app/views/projectPlugins.jsx
index 3b1426ed65..32b2aa6879 100644
--- a/src/sentry/static/sentry/app/views/projectPlugins.jsx
+++ b/src/sentry/static/sentry/app/views/projectPlugins.jsx
@@ -1,6 +1,7 @@
 import React from 'react';
 import AsyncView from './asyncView';
 import {t} from '../locale';
+import Link from '../components/link';
 import ExternalLink from '../components/externalLink';
 import Checkbox from '../components/checkbox';
 import IndicatorStore from '../stores/indicatorStore';
@@ -75,9 +76,9 @@ export default class ProjectPlugins extends AsyncView {
                             <span>
                               {' '}
                               &middot;{' '}
-                              <a href={`/${orgId}/${projectId}/settings/plugins/${id}`}>
-                                {t('Configure plugin')}
-                              </a>
+                              <Link to={`/${orgId}/${projectId}/settings/plugins/${id}`}>
+                                Configure plugin
+                              </Link>
                             </span>
                           )}
                         </p>
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 82031c5d63..f1d9aebedb 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -267,7 +267,7 @@
       </li>
       {% for p in plugins %}
         <li{% if page == 'plugin' and plugin.slug == p.slug %} class="active"{% endif %}>
-            <a href="{% url 'sentry-configure-project-plugin' project.organization.slug project.slug p.slug %}">{{ p.get_title }}</a>
+            <a href="{% absolute_uri '/{}/{}/settings/plugins/' project.organization.slug project.slug p.slug %}">{{ p.get_title }}</a>
         </li>
       {% endfor %}
     </ul>
diff --git a/src/sentry/templates/sentry/projects/plugins/configure.html b/src/sentry/templates/sentry/projects/plugins/configure.html
deleted file mode 100644
index 158b58a8c3..0000000000
--- a/src/sentry/templates/sentry/projects/plugins/configure.html
+++ /dev/null
@@ -1,83 +0,0 @@
-{% extends "sentry/projects/manage.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{{ plugin.get_title }}{% endblock %}
-
-{% block main %}
-    <div class="pull-right">
-
-        {% if plugin.can_disable %}
-            {% if not plugin_is_enabled %}
-                <form method="post" action="{% url 'sentry-enable-project-plugin' project.organization.slug project.slug plugin.slug %}"
-                      style="display:inline">
-                    {% csrf_token %}
-                    <button type="submit" class="btn btn-default">{% trans "Enable Plugin" %}</button>
-                </form>
-            {% else %}
-                <form method="post" action="{% url 'sentry-disable-project-plugin' project.organization.slug project.slug plugin.slug %}"
-                      style="display:inline">
-                    {% csrf_token %}
-                    <button type="submit" class="btn btn-danger">{% trans "Disable Plugin" %}</button>
-                </form>
-            {% endif %}
-        {% endif %}
-        <form method="post" action="{% url 'sentry-reset-project-plugin' project.organization.slug project.slug plugin.slug %}"
-              style="display:inline"
-              onsubmit="return confirm('{% trans "Are you sure you wish to reset all configuration for this plugin?" %}');">
-            {% csrf_token %}
-            <button type="submit" class="btn btn-default">{% trans "Reset Configuration" %}</button>
-        </form>
-    </div>
-    <h2>{{ plugin.get_title }}</h2>
-    <hr>
-    <div class="row">
-        <div class="col-md-7">
-            {% if request.GET.success %}
-                <div class="alert alert-success">
-                    {% trans "Changes to your project were saved successfully." %}
-                    <a class="close" data-dismiss="alert" href="javascript:void(0)">&times;</a>
-                </div>
-            {% endif %}
-            {% if view %}
-                {{ view }}
-            {% else %}
-                <div id="issue_plugins"></div>
-            {% endif %}
-        </div>
-        <div class="col-md-4 col-md-offset-1">
-            <div class="plugin-meta">
-                <h4>Plugin Information</h4>
-                <dl class="flat">
-                    <dt>Name:</dt>
-                    <dd>{{ plugin.get_title }}</dd>
-                    <dt>Author</dt>
-                    <dd>{{ plugin.author }}</dd>
-                    {% if plugin.author_url %}
-                        <dt>URL</dt>
-                        <dd><a href="{{ plugin.author_url }}">{{ plugin.author_url|trim_schema }}</a></dd>
-                    {% endif %}
-                    <dt>Version</dt>
-                    <dd>{{ plugin.version }}</dd>
-                </dl>
-                {% if plugin_description %}
-                    <h4>Description</h4>
-                    <div class="description">
-                        {{ plugin_description|linebreaks }}
-                    </div>
-                {% endif %}
-                {% with plugin.get_resource_links as resource_links %}
-                    {% if resource_links %}
-                        <h4>Resources</h4>
-                        <dl class="flat">
-                            {% for label, link in resource_links %}
-                                <dd><a href="{{ link }}">{{ label }}</a></dd>
-                            {% endfor %}
-                        </dl>
-                    {% endif %}
-                {% endwith %}
-            </div>
-        </div>
-    </div>
-{% endblock %}
diff --git a/src/sentry/web/frontend/project_plugin_configure.py b/src/sentry/web/frontend/project_plugin_configure.py
deleted file mode 100644
index 9cbaeefe16..0000000000
--- a/src/sentry/web/frontend/project_plugin_configure.py
+++ /dev/null
@@ -1,39 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-from django.http import HttpResponse
-
-from sentry.plugins import plugins
-from sentry.web.frontend.base import ProjectView
-
-
-class ProjectPluginConfigureView(ProjectView):
-    required_scope = 'project:write'
-
-    def handle(self, request, organization, team, project, slug):
-        try:
-            plugin = plugins.get(slug)
-        except KeyError:
-            return self.redirect(
-                reverse('sentry-manage-project', args=[project.organization.slug, project.slug])
-            )
-
-        if not plugin.can_configure_for_project(project):
-            return self.redirect(
-                reverse('sentry-manage-project', args=[project.organization.slug, project.slug])
-            )
-
-        is_enabled = plugin.is_enabled(project)
-        view = plugin.configure(request=request, project=project)
-        if isinstance(view, HttpResponse):
-            return view
-
-        context = {
-            'page': 'plugin',
-            'title': plugin.get_title(),
-            'view': view,
-            'plugin': plugin,
-            'plugin_is_enabled': is_enabled,
-        }
-
-        return self.respond('sentry/projects/plugins/configure.html', context)
diff --git a/src/sentry/web/frontend/project_plugin_disable.py b/src/sentry/web/frontend/project_plugin_disable.py
deleted file mode 100644
index 1fb3ab8edb..0000000000
--- a/src/sentry/web/frontend/project_plugin_disable.py
+++ /dev/null
@@ -1,38 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-
-from sentry.plugins import plugins
-from sentry.web.frontend.base import ProjectView
-
-
-class ProjectPluginDisableView(ProjectView):
-    required_scope = 'project:write'
-
-    def post(self, request, organization, team, project, slug):
-        try:
-            plugin = plugins.get(slug)
-        except KeyError:
-            return self.redirect(
-                reverse(
-                    'sentry-configure-project-plugin',
-                    args=[project.organization.slug, project.slug, slug]
-                )
-            )
-
-        if not plugin.is_enabled(project):
-            return self.redirect(
-                reverse(
-                    'sentry-configure-project-plugin',
-                    args=[project.organization.slug, project.slug, slug]
-                )
-            )
-
-        plugin.disable(project=project)
-
-        return self.redirect(
-            reverse(
-                'sentry-configure-project-plugin',
-                args=[project.organization.slug, project.slug, slug]
-            )
-        )
diff --git a/src/sentry/web/frontend/project_plugin_enable.py b/src/sentry/web/frontend/project_plugin_enable.py
deleted file mode 100644
index d0601bc798..0000000000
--- a/src/sentry/web/frontend/project_plugin_enable.py
+++ /dev/null
@@ -1,41 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-
-from sentry.plugins import plugins
-from sentry.signals import plugin_enabled
-from sentry.web.frontend.base import ProjectView
-
-
-class ProjectPluginEnableView(ProjectView):
-    required_scope = 'project:write'
-
-    def post(self, request, organization, team, project, slug):
-        try:
-            plugin = plugins.get(slug)
-        except KeyError:
-            return self.redirect(
-                reverse(
-                    'sentry-configure-project-plugin',
-                    args=[project.organization.slug, project.slug, slug]
-                )
-            )
-
-        if plugin.is_enabled(project):
-            return self.redirect(
-                reverse(
-                    'sentry-configure-project-plugin',
-                    args=[project.organization.slug, project.slug, slug]
-                )
-            )
-
-        plugin.enable(project=project)
-
-        plugin_enabled.send(plugin=plugin, project=project, user=request.user, sender=self)
-
-        return self.redirect(
-            reverse(
-                'sentry-configure-project-plugin',
-                args=[project.organization.slug, project.slug, slug]
-            )
-        )
diff --git a/src/sentry/web/frontend/project_plugin_reset.py b/src/sentry/web/frontend/project_plugin_reset.py
deleted file mode 100644
index 8ac0df8c40..0000000000
--- a/src/sentry/web/frontend/project_plugin_reset.py
+++ /dev/null
@@ -1,30 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-
-from sentry.plugins import plugins
-from sentry.web.frontend.base import ProjectView
-
-
-class ProjectPluginResetView(ProjectView):
-    required_scope = 'project:write'
-
-    def post(self, request, organization, team, project, slug):
-        try:
-            plugin = plugins.get(slug)
-        except KeyError:
-            return self.redirect(
-                reverse(
-                    'sentry-configure-project-plugin',
-                    args=[project.organization.slug, project.slug, slug]
-                )
-            )
-
-        plugin.reset_options(project=project)
-
-        return self.redirect(
-            reverse(
-                'sentry-configure-project-plugin',
-                args=[project.organization.slug, project.slug, slug]
-            )
-        )
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 1a5ddb5697..d9455a4aaf 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -45,11 +45,6 @@ from sentry.web.frontend.organization_integration_setup import \
 from sentry.web.frontend.out import OutView
 from sentry.web.frontend.organization_members import OrganizationMembersView
 from sentry.web.frontend.project_issue_tracking import ProjectIssueTrackingView
-from sentry.web.frontend.project_plugin_configure import \
-    ProjectPluginConfigureView
-from sentry.web.frontend.project_plugin_disable import ProjectPluginDisableView
-from sentry.web.frontend.project_plugin_enable import ProjectPluginEnableView
-from sentry.web.frontend.project_plugin_reset import ProjectPluginResetView
 from sentry.web.frontend.project_rule_edit import ProjectRuleEditView
 from sentry.web.frontend.project_settings import ProjectSettingsView
 from sentry.web.frontend.react_page import GenericReactPageView, ReactPageView
@@ -426,26 +421,6 @@ urlpatterns += patterns(
         ProjectIssueTrackingView.as_view(),
         name='sentry-project-issue-tracking'
     ),
-    url(
-        r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/plugins/(?P<slug>[\w_-]+)/$',
-        ProjectPluginConfigureView.as_view(),
-        name='sentry-configure-project-plugin'
-    ),
-    url(
-        r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/plugins/(?P<slug>[\w_-]+)/reset/$',
-        ProjectPluginResetView.as_view(),
-        name='sentry-reset-project-plugin'
-    ),
-    url(
-        r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/plugins/(?P<slug>[\w_-]+)/disable/$',
-        ProjectPluginDisableView.as_view(),
-        name='sentry-disable-project-plugin'
-    ),
-    url(
-        r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/plugins/(?P<slug>[\w_-]+)/enable/$',
-        ProjectPluginEnableView.as_view(),
-        name='sentry-enable-project-plugin'
-    ),
     url(
         r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/remove/$',
         RemoveProjectView.as_view(),
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 30d9d4ad7b..2262d30bb6 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -218,6 +218,8 @@ window.TestStubs = {
         name: 'Amazon SQS',
         slug: 'amazon-sqs',
         version: '8.23.0.dev0',
+        assets: [],
+        canDisable: true,
       },
       {
         author: {url: 'https://github.com/getsentry/sentry', name: 'Sentry Team'},
@@ -226,6 +228,8 @@ window.TestStubs = {
         name: 'GitHub',
         slug: 'github',
         version: '8.23.0.dev0',
+        assets: [],
+        canDisable: false,
       },
     ];
   },
diff --git a/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
new file mode 100644
index 0000000000..f4764c90d5
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
@@ -0,0 +1,300 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`ProjectPluginDetails renders 1`] = `
+<ProjectPlugins
+  organization={
+    Object {
+      "access": Array [
+        "org:read",
+        "org:write",
+        "org:admin",
+        "project:read",
+        "project:write",
+        "project:admin",
+        "team:read",
+        "team:write",
+        "team:admin",
+      ],
+      "features": Array [],
+      "id": "3",
+      "name": "Organization Name",
+      "onboardingTasks": Array [],
+      "slug": "org-slug",
+      "teams": Array [],
+    }
+  }
+  params={
+    Object {
+      "orgId": "org-slug",
+      "pluginId": "amazon-sqs",
+      "projectId": "project-slug",
+    }
+  }
+  project={
+    Object {
+      "digestsMaxDelay": 60,
+      "digestsMinDelay": 5,
+      "id": "2",
+      "name": "Project Name",
+      "slug": "project-slug",
+      "subjectTemplate": "[$project] \${tag:level}: $title",
+    }
+  }
+>
+  <DocumentTitle
+    title="Amazon SQS"
+  >
+    <div>
+      <div
+        className="pull-right"
+      >
+        <Button
+          disabled={false}
+          onClick={[Function]}
+          style={
+            Object {
+              "marginRight": "6px",
+            }
+          }
+        >
+          <button
+            className="button button-default"
+            disabled={false}
+            onClick={[Function]}
+            role="button"
+            style={
+              Object {
+                "marginRight": "6px",
+              }
+            }
+          >
+            <FlowLayout
+              truncate={false}
+            >
+              <div
+                className="flow-layout"
+              >
+                <span
+                  className="button-label"
+                >
+                  Enable Plugin
+                </span>
+              </div>
+            </FlowLayout>
+          </button>
+        </Button>
+        <Button
+          disabled={false}
+          onClick={[Function]}
+        >
+          <button
+            className="button button-default"
+            disabled={false}
+            onClick={[Function]}
+            role="button"
+          >
+            <FlowLayout
+              truncate={false}
+            >
+              <div
+                className="flow-layout"
+              >
+                <span
+                  className="button-label"
+                >
+                  Reset Configuration
+                </span>
+              </div>
+            </FlowLayout>
+          </button>
+        </Button>
+      </div>
+      <h2>
+        Amazon SQS
+      </h2>
+      <hr />
+      <div
+        className="row"
+      >
+        <div
+          className="col-md-7"
+        >
+          <PluginConfig
+            data={
+              Object {
+                "assets": Array [],
+                "author": Object {
+                  "name": "Sentry Team",
+                  "url": "https://github.com/getsentry/sentry",
+                },
+                "canDisable": true,
+                "enabled": false,
+                "id": "amazon-sqs",
+                "name": "Amazon SQS",
+                "slug": "amazon-sqs",
+                "version": "8.23.0.dev0",
+              }
+            }
+            onDisablePlugin={[Function]}
+            organization={
+              Object {
+                "access": Array [
+                  "org:read",
+                  "org:write",
+                  "org:admin",
+                  "project:read",
+                  "project:write",
+                  "project:admin",
+                  "team:read",
+                  "team:write",
+                  "team:admin",
+                ],
+                "features": Array [],
+                "id": "3",
+                "name": "Organization Name",
+                "onboardingTasks": Array [],
+                "slug": "org-slug",
+                "teams": Array [],
+              }
+            }
+            project={
+              Object {
+                "digestsMaxDelay": 60,
+                "digestsMinDelay": 5,
+                "id": "2",
+                "name": "Project Name",
+                "slug": "project-slug",
+                "subjectTemplate": "[$project] \${tag:level}: $title",
+              }
+            }
+          >
+            <div
+              className="box ref-plugin-config-amazon-sqs"
+            >
+              <div
+                className="box-header"
+              >
+                <h3>
+                  Amazon SQS
+                </h3>
+              </div>
+              <div
+                className="box-content with-padding"
+              >
+                <div
+                  dangerouslySetInnerHTML={
+                    Object {
+                      "__html": undefined,
+                    }
+                  }
+                />
+                <PluginSettings
+                  organization={
+                    Object {
+                      "access": Array [
+                        "org:read",
+                        "org:write",
+                        "org:admin",
+                        "project:read",
+                        "project:write",
+                        "project:admin",
+                        "team:read",
+                        "team:write",
+                        "team:admin",
+                      ],
+                      "features": Array [],
+                      "id": "3",
+                      "name": "Organization Name",
+                      "onboardingTasks": Array [],
+                      "slug": "org-slug",
+                      "teams": Array [],
+                    }
+                  }
+                  plugin={
+                    DefaultPlugin {
+                      "assets": Array [],
+                      "author": Object {
+                        "name": "Sentry Team",
+                        "url": "https://github.com/getsentry/sentry",
+                      },
+                      "canDisable": true,
+                      "enabled": false,
+                      "id": "amazon-sqs",
+                      "name": "Amazon SQS",
+                      "slug": "amazon-sqs",
+                      "version": "8.23.0.dev0",
+                    }
+                  }
+                  project={
+                    Object {
+                      "digestsMaxDelay": 60,
+                      "digestsMinDelay": 5,
+                      "id": "2",
+                      "name": "Project Name",
+                      "slug": "project-slug",
+                      "subjectTemplate": "[$project] \${tag:level}: $title",
+                    }
+                  }
+                />
+              </div>
+            </div>
+          </PluginConfig>
+        </div>
+        <div
+          className="col-md-4 col-md-offset-1"
+        >
+          <div
+            className="plugin-meta"
+          >
+            <h4>
+              Plugin Information
+            </h4>
+            <dl
+              className="flat"
+            >
+              <dt>
+                Name
+              </dt>
+              <dd>
+                Amazon SQS
+              </dd>
+              <dt>
+                Author
+              </dt>
+              <dd>
+                Sentry Team
+              </dd>
+              <div>
+                <dt>
+                  URL
+                </dt>
+                <dd>
+                  <ExternalLink
+                    href="https://github.com/getsentry/sentry"
+                    rel="noreferrer noopener"
+                    target="_blank"
+                  >
+                    <a
+                      href="https://github.com/getsentry/sentry"
+                      rel="noreferrer noopener"
+                      target="_blank"
+                    >
+                      github.com/getsentry/sentry
+                    </a>
+                  </ExternalLink>
+                </dd>
+              </div>
+              <dt>
+                Version
+              </dt>
+              <dd>
+                8.23.0.dev0
+              </dd>
+            </dl>
+          </div>
+        </div>
+      </div>
+    </div>
+  </DocumentTitle>
+</ProjectPlugins>
+`;
diff --git a/tests/js/spec/views/projectPluginDetails.spec.jsx b/tests/js/spec/views/projectPluginDetails.spec.jsx
new file mode 100644
index 0000000000..c8bc0f6c7d
--- /dev/null
+++ b/tests/js/spec/views/projectPluginDetails.spec.jsx
@@ -0,0 +1,60 @@
+import React from 'react';
+import {mount} from 'enzyme';
+import ProjectPluginDetails from 'app/views/projectPluginDetails';
+
+describe('ProjectPluginDetails', function() {
+  let org, project, component;
+
+  beforeEach(function() {
+    org = TestStubs.Organization();
+    project = TestStubs.Project();
+    let plugin = TestStubs.Plugins()[0];
+    let pluginId = plugin.id;
+
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/plugins/${pluginId}/`,
+      method: 'GET',
+      body: plugin,
+    });
+
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/plugins/${pluginId}/`,
+      method: 'POST',
+      body: {
+        ...plugin,
+        config: [{value: 'default'}],
+      },
+    });
+
+    component = mount(
+      <ProjectPluginDetails
+        organization={org}
+        project={project}
+        params={{orgId: org.slug, projectId: project.slug, pluginId: 'amazon-sqs'}}
+      />,
+      {
+        context: {
+          router: TestStubs.router(),
+        },
+      }
+    );
+  });
+  it('renders', function() {
+    expect(component).toMatchSnapshot();
+  });
+
+  it('enables/disables plugin', function() {
+    let btn = component.find('button').first();
+    expect(component.state().plugin.enabled).toBe(false);
+    expect(btn.text()).toBe('Enable Plugin');
+    btn.simulate('click');
+    expect(component.state().plugin.enabled).toBe(true);
+    expect(btn.text()).toBe('Disable Plugin');
+  });
+
+  it('resets plugin', function() {
+    let btn = component.find('button').at(1);
+    btn.simulate('click');
+    expect(component.state().plugin.config[0].value).toBe('default');
+  });
+});
diff --git a/tests/sentry/api/endpoints/test_project_plugin_details.py b/tests/sentry/api/endpoints/test_project_plugin_details.py
index 3604674853..e8c6acb883 100644
--- a/tests/sentry/api/endpoints/test_project_plugin_details.py
+++ b/tests/sentry/api/endpoints/test_project_plugin_details.py
@@ -96,6 +96,16 @@ class EnableProjectPluginTest(APITestCase):
         test_configuration.assert_called_once_with(project)
         assert response.status_code == 200, (response.status_code, response.content)
 
+        # Reset the plugin
+        response = self.client.post(url, {'reset': True})
+        test_configuration.assert_called_once_with(project)
+        assert response.status_code == 200, (response.status_code, response.content)
+
+        configs = response.data.get('config')
+
+        for config in configs:
+            assert config.get('value') is None
+
 
 class DisableProjectPluginTest(APITestCase):
     def test_simple(self):
