commit 72fb4ab4c6cec11286e2f6a347209b425242d620
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Aug 24 16:23:38 2013 -0700

    Initial work on embedding quotas (refs GH-976)

diff --git a/src/sentry/app.py b/src/sentry/app.py
index 1197cfc391..28e0894845 100644
--- a/src/sentry/app.py
+++ b/src/sentry/app.py
@@ -21,4 +21,5 @@ def get_instance(path, options):
     return cls(**options)
 
 buffer = get_instance(settings.SENTRY_BUFFER, settings.SENTRY_BUFFER_OPTIONS)
+quotas = get_instance(settings.SENTRY_QUOTAS, settings.SENTRY_QUOTA_OPTIONS)
 env = State()
diff --git a/src/sentry/buffer/redis.py b/src/sentry/buffer/redis.py
index 33e361b95b..6965038d08 100644
--- a/src/sentry/buffer/redis.py
+++ b/src/sentry/buffer/redis.py
@@ -5,18 +5,7 @@ sentry.buffer.redis
 :copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-
-from __future__ import with_statement
-
-from django.core.exceptions import ImproperlyConfigured
-
-for package in ('nydus', 'redis'):
-    try:
-        __import__(package, {}, {}, [], -1)
-    except ImportError:
-        raise ImproperlyConfigured(
-            'Missing %r package, which is required for Redis buffers' % (
-                package,))
+from __future__ import absolute_import
 
 from django.conf import settings
 from django.db import models
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 3fe9d9a9ce..e246272d3d 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -500,6 +500,13 @@ SENTRY_REDIS_OPTIONS = {}
 SENTRY_BUFFER = 'sentry.buffer.Buffer'
 SENTRY_BUFFER_OPTIONS = {}
 
+SENTRY_QUOTAS = 'sentry.quotas.Quota'
+SENTRY_QUOTA_OPTIONS = {}
+# The default value for project-level quotas
+SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE = '90%'
+# The maximum number of events per minute the system should accept.
+SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE = 100
+
 SENTRY_RAVEN_JS_URL = 'd3nslu0hdya83q.cloudfront.net/dist/1.0/raven.min.js'
 
 # URI Prefixes for generating DSN URLs
diff --git a/src/sentry/plugins/base.py b/src/sentry/plugins/base.py
index 4d4edda8fb..503f279417 100644
--- a/src/sentry/plugins/base.py
+++ b/src/sentry/plugins/base.py
@@ -426,13 +426,6 @@ class IPlugin(local):
 
     # Server side signals which do not have request context
 
-    def is_rate_limited(self, project, **kwargs):
-        """
-        Return True if this project (or the system) is over any defined
-        quotas.
-        """
-        return False
-
     def has_perm(self, user, perm, *objects, **kwargs):
         """
         Given a user, a permission name, and an optional list of objects
diff --git a/src/sentry/quotas/__init__.py b/src/sentry/quotas/__init__.py
new file mode 100644
index 0000000000..bd34411f87
--- /dev/null
+++ b/src/sentry/quotas/__init__.py
@@ -0,0 +1,9 @@
+"""
+sentry.quotas
+~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from .base import Quota  # NOQA
diff --git a/src/sentry/quotas/base.py b/src/sentry/quotas/base.py
new file mode 100644
index 0000000000..6f66751ae6
--- /dev/null
+++ b/src/sentry/quotas/base.py
@@ -0,0 +1,47 @@
+"""
+sentry.quotas.base
+~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+from django.conf import settings
+
+
+class Quota(object):
+    """
+    Buffers act as temporary stores for counters. The default implementation is just a passthru and
+    does not actually buffer anything.
+
+    A useful example might be a Redis buffer. Each time an event gets updated, we send several
+    add events which just store a key and increment its value. Additionally they fire off a task
+    to the queue. That task eventually runs and gets the current update value. If the value is
+    empty, it does nothing, otherwise it updates the row in the database.
+
+    This is useful in situations where a single event might be happening so fast that the queue cant
+    keep up with the updates.
+    """
+    def __init__(self, **options):
+        pass
+
+    def is_rate_limited(self, project):
+        return False
+
+    def get_project_quota(self, project):
+        proj_setting = self.get_option('per_minute', project, '')
+        if proj_setting is None:
+            proj_setting = settings.SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE
+        else:
+            proj_setting = int(proj_setting)
+        if proj_setting.endswith('%'):
+            pct = int(proj_setting[:-1])
+            proj_setting = self.get_team_quota(project.team) * pct / 100
+        return proj_setting
+
+    def get_team_quota(self, team):
+        return settings.SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE
+
+    def get_system_quota(self, team):
+        return settings.SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE
diff --git a/src/sentry/quotas/redis.py b/src/sentry/quotas/redis.py
new file mode 100644
index 0000000000..9c9c8c7416
--- /dev/null
+++ b/src/sentry/quotas/redis.py
@@ -0,0 +1,55 @@
+"""
+sentry.quotas.redis
+~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+from django.conf import settings
+from nydus.db import create_cluster
+from sentry.quotas.base import Quota
+
+
+import time
+
+
+class RedisQuota(Quota):
+    def __init__(self, **options):
+        if not options:
+            # inherit default options from REDIS_OPTIONS
+            options = settings.SENTRY_REDIS_OPTIONS
+        super(RedisQuota, self).__init__(**options)
+        options.setdefault('hosts', {0: {}})
+        options.setdefault('router', 'nydus.db.routers.keyvalue.PartitionRouter')
+        self.conn = create_cluster({
+            'engine': 'nydus.db.backends.redis.Redis',
+            'router': options['router'],
+            'hosts': options['hosts'],
+        })
+
+    def is_rate_limited(self, project):
+        quota = self.get_project_quota(project)
+        if not quota:
+            return False
+
+        sys_result, proj_result = self._incr_project(project)
+        return sys_result > quota or proj_result > quota
+
+    def _get_system_key(self, project):
+        return 'sentry_quotas:system:%s' % (int(time.time() / 60),)
+
+    def _get_project_key(self, project):
+        return 'sentry_quotas:%s:%s' % (project.id, int(time.time() / 60))
+
+    def _incr_project(self, project):
+        proj_key = self._get_project_key(project)
+        sys_key = self._get_system_key()
+        with self.conn.map() as conn:
+            proj_result = conn.incr(proj_key)
+            conn.expire(proj_key, 60)
+            sys_result = conn.incr(sys_key)
+            conn.expire(sys_key, 60)
+
+        return int(sys_result), int(proj_result)
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 80eeb70284..41417d5802 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -16,11 +16,7 @@
         <form class="form-stacked" action="" method="post">
             {% csrf_token %}
 
-            {% if request.GET.success %}
-                <div class="alert alert-success">{% trans "Changes to your project were saved successfully." %}</div>
-            {% else %}
-                {{ form|as_crispy_errors }}
-            {% endif %}
+            {{ form|as_crispy_errors }}
 
             <fieldset>
                 {% for field in form %}
@@ -70,6 +66,9 @@
         <li{% if page == 'notifications' %} class="active"{% endif %}>
             <a href="{% url 'sentry-project-notifications' project.team.slug project.slug %}">{% trans "Notifications" %}</a>
         </li>
+        <li{% if page == 'quotas' %} class="active"{% endif %}>
+            <a href="{% url 'sentry-manage-project-quotas' project.team.slug project.slug %}">{% trans "Quotas" %}</a>
+        </li>
         <li{% if page == 'tags' %} class="active"{% endif %}>
             <a href="{% url 'sentry-manage-project-tags' project.team.slug project.slug %}">{% trans "Tags" %}</a>
         </li>
diff --git a/src/sentry/templates/sentry/projects/quotas.html b/src/sentry/templates/sentry/projects/quotas.html
new file mode 100644
index 0000000000..211acd1978
--- /dev/null
+++ b/src/sentry/templates/sentry/projects/quotas.html
@@ -0,0 +1,39 @@
+{% extends "sentry/projects/manage.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block title %}{% trans "Quotas" %} | {{ block.super }}{% endblock %}
+
+{% block inner %}
+    <div class="page-header">
+        <h2>{% trans "Quotas" %}</h2>
+    </div>
+    <form action="" method="post" class="form-stacked">
+        <p>{% blocktrans %}With the nature of Sentry, sometimes the amount data collected can be overwhelming. You can set quotas per-project to ensure that a single flood of errors won't affect other any other projects utilizing Sentry.{% endblocktrans %}</p>
+
+        <p>{% blocktrans %}Quotas limit on a per-minute basis, which means that they rollover at the start of a new minute. When you attempt to send an event and the project is over it's quota, the client will receive an HTTP 429 (Too Many Requests) response.{% endblocktrans %}</p>
+
+        {% if team_quota %}
+            <p>{% blocktrans %}Your team has <strong>500 events per minute</strong> allocated collectively among projects.{% endblocktrans %}</p>
+        {% elif system_quota %}
+            <p>{% blocktrans %}The Sentry system has <strong>500 events per minute</strong> allocated collectively among projects.{% endblocktrans %}</p>
+        {% endif %}
+
+        {% csrf_token %}
+
+        {{ form|as_crispy_errors }}
+
+        <fieldset>
+            {% for field in form %}
+                {{ field|as_crispy_field }}
+            {% endfor %}
+        </fieldset>
+
+        <fieldset class="form-actions">
+            <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
+        </fieldset>
+    </form>
+{% endblock %}
+
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 7948d4e457..22d3680447 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -21,6 +21,7 @@ from django.views.decorators.csrf import csrf_exempt
 from django.views.decorators.vary import vary_on_cookie
 from django.views.generic.base import View as BaseView
 
+from sentry import app
 from sentry.constants import (
     MEMBER_USER, STATUS_MUTED, STATUS_UNRESOLVED, STATUS_RESOLVED,
     EVENTS_PER_PAGE)
@@ -38,7 +39,6 @@ from sentry.utils.cache import cache
 from sentry.utils.db import has_trending
 from sentry.utils.javascript import to_json
 from sentry.utils.http import is_valid_origin, get_origins, is_same_domain
-from sentry.utils.safe import safe_execute
 from sentry.web.decorators import has_access
 from sentry.web.frontend.groups import _get_group_list
 from sentry.web.helpers import render_to_response
@@ -264,14 +264,24 @@ class StoreView(APIView):
     @never_cache
     def get(self, request, project, auth, **kwargs):
         data = request.GET.get('sentry_data', '')
-        self.process(request, project, auth, data, **kwargs)
+        response = self.process(request, project, auth, data, **kwargs)
         # We should return a simple 1x1 gif for browser so they don't throw a warning
-        return HttpResponse(PIXEL, 'image/gif')
+        js_response = HttpResponse(PIXEL, 'image/gif')
+        js_response.status_code = response.status_code
+        try:
+            js_response['X-Sentry-Error'] = response['X-Sentry-Error']
+        except KeyError:
+            pass
+        return js_response
 
     def process(self, request, project, auth, data, **kwargs):
-        for plugin in plugins.all():
-            if safe_execute(plugin.is_rate_limited, project=project):
-                return HttpResponse('Creation of this event was denied due to rate limiting.', content_type='text/plain', status=429)
+        if app.quotas.is_rate_limited(project=project):
+            response = HttpResponse(
+                'Creation of this event was denied due to rate limiting.',
+                content_type='text/plain', status=429
+            )
+            response['X-Sentry-Error'] = response.content
+            return response
 
         result = plugins.first('has_perm', request.user, 'create_event', project)
         if result is False:
diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index 4b9e49b100..4f7a5f17a8 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -7,6 +7,7 @@ sentry.web.forms.projects
 """
 import itertools
 from django import forms
+from django.conf import settings
 from django.contrib.auth import authenticate
 from django.utils.translation import ugettext_lazy as _
 from sentry.constants import EMPTY_PASSWORD_VALUES
@@ -169,3 +170,37 @@ class NotificationTagValuesForm(forms.Form):
 
     def clean_values(self):
         return set(filter(bool, self.cleaned_data.get('values').split(',')))
+
+
+class ProjectQuotasForm(forms.Form):
+    per_minute = forms.CharField(
+        label=_('Maximum events per minute'),
+        widget=forms.TextInput(attrs={'placeholder': 'e.g. 90% or 100'}),
+        help_text=_('This cannot be higher than the team (or system) allotted maximum. The value can be either a fixed number, or a percentage that is relative to the team\'s overall quota.'),
+        required=False
+    )
+
+    def __init__(self, project, *args, **kwargs):
+        self.project = project
+        super(ProjectQuotasForm, self).__init__(*args, **kwargs)
+        self.fields['per_minute'].initial = ProjectOption.objects.get_value(
+            self.project, 'quotas:per_minute', settings.SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE
+        )
+
+    def clean_per_minute(self):
+        value = self.cleaned_data.get('per_minute')
+        if value.endswith('%'):
+            try:
+                pct = int(value[:-1])
+            except (TypeError, ValueError):
+                raise forms.ValidationError('Invalid percentage')
+            if pct > 100:
+                raise forms.ValidationError('Invalid percentage')
+            if pct == 0:
+                value = 0
+        return value
+
+    def save(self):
+        ProjectOption.objects.set_value(
+            self.project, 'quotas:per_minute', self.cleaned_data['per_minute'] or ''
+        )
diff --git a/src/sentry/web/frontend/projects.py b/src/sentry/web/frontend/projects.py
index 605c17a1fb..46201c66ea 100644
--- a/src/sentry/web/frontend/projects.py
+++ b/src/sentry/web/frontend/projects.py
@@ -22,7 +22,7 @@ from sentry.plugins import plugins
 from sentry.web.decorators import login_required, has_access
 from sentry.web.forms.projects import (
     ProjectTagsForm, RemoveProjectForm, EditProjectForm,
-    NotificationTagValuesForm, AlertSettingsForm)
+    NotificationTagValuesForm, AlertSettingsForm, ProjectQuotasForm)
 from sentry.web.helpers import render_to_response, plugin_config
 
 
@@ -260,6 +260,28 @@ def notification_settings(request, team, project):
     return render_to_response('sentry/projects/notifications.html', context, request)
 
 
+@has_access(MEMBER_OWNER)
+def manage_project_quotas(request, team, project):
+    form = ProjectQuotasForm(project, request.POST or None)
+
+    if form and form.is_valid():
+        form.save()
+
+        messages.add_message(
+            request, messages.SUCCESS,
+            _('Your settings were saved successfully.'))
+
+        return HttpResponseRedirect(reverse('sentry-manage-project-quotas', args=[project.team.slug, project.slug]))
+
+    context = {
+        'team': team,
+        'page': 'quotas',
+        'project': project,
+        'form': form,
+    }
+    return render_to_response('sentry/projects/quotas.html', context, request)
+
+
 @has_access(MEMBER_OWNER)
 @csrf_protect
 def manage_plugins(request, team, project):
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 2b9d94129f..0f36b6127d 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -132,6 +132,8 @@ urlpatterns = patterns('',
         name='sentry-remove-project'),
     url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/tags/$', projects.manage_project_tags,
         name='sentry-manage-project-tags'),
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/quotas/$', projects.manage_project_quotas,
+        name='sentry-manage-project-quotas'),
     url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/notifications/$', projects.notification_settings,
         name='sentry-project-notifications'),
 
