commit 513ef3eb7c28f1dba64ca21e72bf071297c8cfca
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Mon Feb 26 16:56:48 2018 -0800

    feat(integrations): Add metadata

diff --git a/src/sentry/api/endpoints/organization_config_integrations.py b/src/sentry/api/endpoints/organization_config_integrations.py
index 053aabd5d2..aa3805ed5b 100644
--- a/src/sentry/api/endpoints/organization_config_integrations.py
+++ b/src/sentry/api/endpoints/organization_config_integrations.py
@@ -10,10 +10,14 @@ class OrganizationConfigIntegrationsEndpoint(OrganizationEndpoint):
     def get(self, request, organization):
         providers = []
         for provider in integrations.all():
+            metadata = provider.metadata
+            metadata = metadata and metadata._asdict() or None
+
             providers.append(
                 {
                     'key': provider.key,
                     'name': provider.name,
+                    'metadata': metadata,
                     'config': provider.get_config(),
                     'setupDialog': dict(
                         url='/organizations/{}/integrations/{}/setup/'.format(
diff --git a/src/sentry/integrations/base.py b/src/sentry/integrations/base.py
index 340f026778..c223de9daf 100644
--- a/src/sentry/integrations/base.py
+++ b/src/sentry/integrations/base.py
@@ -1,12 +1,21 @@
 from __future__ import absolute_import
 
-__all__ = ['Integration']
+__all__ = ['Integration', 'IntegrationMetadata']
 
 import logging
+from collections import namedtuple
 
 from sentry.utils.pipeline import PipelineProvider
 
 
+IntegrationMetadata = namedtuple('IntegrationMetadata', [
+    'description',  # A markdown description of the integration
+    'author',       # The integration author's name
+    'issue_url',    # URL where issues should be opened
+    'source_url',   # URL to view the source
+])
+
+
 class Integration(PipelineProvider):
     """
     An integration describes a third party that can be registered within Sentry.
@@ -27,6 +36,10 @@ class Integration(PipelineProvider):
     # a human readable name (e.g. 'Slack')
     name = None
 
+    # an IntegrationMetadata object, used to provider extra details in the
+    # configuration interface of the integration.
+    metadata = None
+
     # configuration for the setup dialog
     setup_dialog_config = {
         'width': 600,
diff --git a/src/sentry/integrations/slack/integration.py b/src/sentry/integrations/slack/integration.py
index e4707c4fd2..051be73be2 100644
--- a/src/sentry/integrations/slack/integration.py
+++ b/src/sentry/integrations/slack/integration.py
@@ -1,14 +1,32 @@
 from __future__ import absolute_import
 
-from sentry.integrations import Integration
+from sentry.integrations import Integration, IntegrationMetadata
 from sentry.utils.pipeline import NestedPipelineView
 from sentry.identity.pipeline import IdentityProviderPipeline
 from sentry.utils.http import absolute_uri
 
+DESCRIPTION = """
+Define a relationship between Sentry and your Slack workspace(s).
+
+ * Unfurls Sentry URLs in slack, providing context and actionability on issues
+   directly within your Slack workspace.
+ * Resolve, ignore, and assign issues with minimal context switching.
+ * Configure rule based Slack notifications to automatically be posted into the
+   specified channel.
+"""
+
+metadata = IntegrationMetadata(
+    description=DESCRIPTION.strip(),
+    author='The Sentry Team',
+    issue_url='https://github.com/getsentry/sentry/issues/new?title=Slack%20Integration:%20&labels=Component%3A%20Integrations',
+    source_url='https://github.com/getsentry/sentry/tree/master/src/sentry/integrations/slack'
+)
+
 
 class SlackIntegration(Integration):
     key = 'slack'
     name = 'Slack'
+    metadata = metadata
 
     identity_oauth_scopes = frozenset([
         'bot',
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsPageHeader.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsPageHeader.jsx
index 06e33788ad..760cbcc9d9 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsPageHeader.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsPageHeader.jsx
@@ -1,10 +1,11 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
-import {Flex} from 'grid-emotion';
+import {Flex, Box} from 'grid-emotion';
 
 class SettingsPageHeading extends React.Component {
   static propTypes = {
+    icon: PropTypes.node,
     title: PropTypes.node,
     action: PropTypes.node,
     tabs: PropTypes.node,
@@ -14,6 +15,7 @@ class SettingsPageHeading extends React.Component {
     return (
       <Wrapper tabs={this.props.tabs}>
         <Flex align="center">
+          {this.props.icon && <Box pr={1}>{this.props.icon}</Box>}
           {this.props.title && <Title>{this.props.title}</Title>}
           {this.props.action && <div>{this.props.action}</div>}
         </Flex>
