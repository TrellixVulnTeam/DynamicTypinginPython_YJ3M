commit 9c530edace3fc0a647b4e493eabe6ba4086873d4
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Oct 12 07:44:08 2014 -0700

    Remove global STATUS_ constants usage

diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index ee2dfa2514..83d8e01573 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -8,8 +8,8 @@ from sentry.api.base import DocSection, Endpoint
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
 from sentry.db.models.query import create_or_update
-from sentry.constants import STATUS_CHOICES, STATUS_RESOLVED
-from sentry.models import Activity, Group, GroupBookmark, GroupSeen
+from sentry.constants import STATUS_CHOICES
+from sentry.models import Activity, Group, GroupBookmark, GroupSeen, GroupStatus
 
 
 class GroupSerializer(serializers.Serializer):
@@ -93,12 +93,12 @@ class GroupDetailsEndpoint(Endpoint):
             now = timezone.now()
 
             group.resolved_at = now
-            group.status = STATUS_RESOLVED
+            group.status = GroupStatus.RESOLVED
 
             happened = Group.objects.filter(
                 id=group.id,
-            ).exclude(status=STATUS_RESOLVED).update(
-                status=STATUS_RESOLVED,
+            ).exclude(status=GroupStatus.RESOLVED).update(
+                status=GroupStatus.RESOLVED,
                 resolved_at=now,
             )
 
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 60e24f2409..b238270e18 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -11,11 +11,11 @@ from sentry.api.base import DocSection, Endpoint
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
 from sentry.constants import (
-    DEFAULT_SORT_OPTION, STATUS_CHOICES, STATUS_RESOLVED
+    DEFAULT_SORT_OPTION, STATUS_CHOICES
 )
 from sentry.db.models.query import create_or_update
 from sentry.models import (
-    Activity, Group, GroupBookmark, GroupMeta, Project, TagKey
+    Activity, Group, GroupBookmark, GroupMeta, GroupStatus, Project, TagKey
 )
 from sentry.search.utils import parse_query
 from sentry.tasks.deletion import delete_group
@@ -182,9 +182,9 @@ class ProjectGroupIndexEndpoint(Endpoint):
             now = timezone.now()
 
             happened = Group.objects.filter(filters).exclude(
-                status=STATUS_RESOLVED,
+                status=GroupStatus.RESOLVED,
             ).update(
-                status=STATUS_RESOLVED,
+                status=GroupStatus.RESOLVED,
                 resolved_at=now,
             )
 
diff --git a/src/sentry/api/endpoints/team_groups_new.py b/src/sentry/api/endpoints/team_groups_new.py
index 710e2601d3..1309b8c9ea 100644
--- a/src/sentry/api/endpoints/team_groups_new.py
+++ b/src/sentry/api/endpoints/team_groups_new.py
@@ -5,8 +5,7 @@ from rest_framework.response import Response
 from sentry.api.base import Endpoint
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
-from sentry.constants import STATUS_UNRESOLVED
-from sentry.models import Group, Project, Team
+from sentry.models import Group, GroupStatus, Project, Team
 
 
 class TeamGroupsNewEndpoint(Endpoint):
@@ -36,7 +35,7 @@ class TeamGroupsNewEndpoint(Endpoint):
 
         group_list = list(Group.objects.filter(
             project__in=project_dict.keys(),
-            status=STATUS_UNRESOLVED,
+            status=GroupStatus.UNRESOLVED,
             active_at__gte=cutoff_dt,
         ).extra(
             select={'sort_value': 'score'},
diff --git a/src/sentry/api/endpoints/team_groups_trending.py b/src/sentry/api/endpoints/team_groups_trending.py
index 5c749004f6..b5af549f1c 100644
--- a/src/sentry/api/endpoints/team_groups_trending.py
+++ b/src/sentry/api/endpoints/team_groups_trending.py
@@ -5,8 +5,7 @@ from rest_framework.response import Response
 from sentry.api.base import Endpoint
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
-from sentry.constants import STATUS_UNRESOLVED
-from sentry.models import Group, Project, Team
+from sentry.models import Group, GroupStatus, Project, Team
 
 
 class TeamGroupsTrendingEndpoint(Endpoint):
@@ -36,7 +35,7 @@ class TeamGroupsTrendingEndpoint(Endpoint):
 
         group_list = list(Group.objects.filter(
             project__in=project_dict.keys(),
-            status=STATUS_UNRESOLVED,
+            status=GroupStatus.UNRESOLVED,
             last_seen__gte=cutoff_dt,
         ).extra(
             select={'sort_value': 'score'},
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 7a5d0d9f00..8a82bdd9a5 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -7,9 +7,9 @@ from django.utils import timezone
 
 from sentry.api.serializers import Serializer, register
 from sentry.app import tsdb
-from sentry.constants import STATUS_RESOLVED, STATUS_MUTED, TAG_LABELS
+from sentry.constants import TAG_LABELS
 from sentry.models import (
-    Group, GroupBookmark, GroupTagKey, GroupSeen
+    Group, GroupBookmark, GroupTagKey, GroupSeen, GroupStatus
 )
 from sentry.utils.db import attach_foreignkey
 from sentry.utils.http import absolute_uri
@@ -85,9 +85,9 @@ class GroupSerializer(Serializer):
 
     def serialize(self, obj, attrs, user):
         status = obj.get_status()
-        if status == STATUS_RESOLVED:
+        if status == GroupStatus.RESOLVED:
             status_label = 'resolved'
-        elif status == STATUS_MUTED:
+        elif status == GroupStatus.MUTED:
             status_label = 'muted'
         else:
             status_label = 'unresolved'
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 626faeac9a..e76b1c39c8 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -44,17 +44,11 @@ SEARCH_SORT_OPTIONS = SortedDict((
     ('new', _('First Seen')),
 ))
 
-STATUS_ACTIVE = 0
-STATUS_INACTIVE = 1
-
+# XXX: Deprecated: use GroupStatus instead
 STATUS_UNRESOLVED = 0
 STATUS_RESOLVED = 1
 STATUS_MUTED = 2
-STATUS_LEVELS = (
-    (STATUS_UNRESOLVED, _('Unresolved')),
-    (STATUS_RESOLVED, _('Resolved')),
-    (STATUS_MUTED, _('Muted')),
-)
+
 STATUS_CHOICES = {
     'resolved': STATUS_RESOLVED,
     'unresolved': STATUS_UNRESOLVED,
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 96976bed9f..b3809d60e6 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -20,10 +20,11 @@ from uuid import uuid4
 
 from sentry.app import buffer, tsdb
 from sentry.constants import (
-    STATUS_RESOLVED, STATUS_UNRESOLVED, LOG_LEVELS,
-    DEFAULT_LOGGER_NAME, MAX_CULPRIT_LENGTH
+    LOG_LEVELS, DEFAULT_LOGGER_NAME, MAX_CULPRIT_LENGTH
+)
+from sentry.models import (
+    Event, EventMapping, Group, GroupHash, GroupStatus, Project
 )
-from sentry.models import Event, EventMapping, Group, GroupHash, Project
 from sentry.plugins import plugins
 from sentry.signals import regression_signal
 from sentry.utils.logging import suppress_exceptions
@@ -479,15 +480,15 @@ class EventManager(object):
             # Making things atomic
             is_regression = bool(Group.objects.filter(
                 id=group.id,
-                status=STATUS_RESOLVED,
+                status=GroupStatus.RESOLVED,
             ).exclude(
                 active_at__gte=date,
-            ).update(active_at=date, status=STATUS_UNRESOLVED))
+            ).update(active_at=date, status=GroupStatus.UNRESOLVED))
 
             transaction.commit_unless_managed(using=group._state.db)
 
             group.active_at = date
-            group.status = STATUS_UNRESOLVED
+            group.status = GroupStatus.UNRESOLVED
 
         group.last_seen = extra['last_seen']
 
diff --git a/src/sentry/models/alert.py b/src/sentry/models/alert.py
index 86c2325b6a..a1e5d15f52 100644
--- a/src/sentry/models/alert.py
+++ b/src/sentry/models/alert.py
@@ -13,13 +13,17 @@ from django.db import models
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.constants import STATUS_RESOLVED, STATUS_UNRESOLVED
 from sentry.db.models import (
     Model, GzippedDictField, BoundedPositiveIntegerField, sane_repr
 )
 from sentry.utils.http import absolute_uri
 
 
+class AlertStatus(object):
+    UNRESOLVED = 0
+    RESOLVED = 1
+
+
 class Alert(Model):
     project = models.ForeignKey('sentry.Project')
     group = models.ForeignKey('sentry.Group', null=True)
@@ -28,8 +32,8 @@ class Alert(Model):
     data = GzippedDictField(null=True)
     related_groups = models.ManyToManyField('sentry.Group', through='sentry.AlertRelatedGroup', related_name='related_alerts')
     status = BoundedPositiveIntegerField(default=0, choices=(
-        (STATUS_UNRESOLVED, _('Unresolved')),
-        (STATUS_RESOLVED, _('Resolved')),
+        (AlertStatus.UNRESOLVED, _('Unresolved')),
+        (AlertStatus.RESOLVED, _('Resolved')),
     ), db_index=True)
 
     class Meta:
@@ -45,7 +49,7 @@ class Alert(Model):
             project=project_id,
             group_id__isnull=True,
             datetime__gte=timezone.now() - timedelta(minutes=60),
-            status=STATUS_UNRESOLVED,
+            status=AlertStatus.UNRESOLVED,
         ).order_by('-datetime')
 
     @classmethod
@@ -82,7 +86,7 @@ class Alert(Model):
 
     @property
     def is_resolved(self):
-        return (self.status == STATUS_RESOLVED
+        return (self.status == AlertStatus.RESOLVED
                 or self.datetime < timezone.now() - timedelta(minutes=60))
 
     def get_absolute_url(self):
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 351fd6f602..359f5e7959 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -20,10 +20,7 @@ from django.utils.translation import ugettext_lazy as _
 
 import six
 
-from sentry.constants import (
-    LOG_LEVELS, STATUS_LEVELS, MAX_CULPRIT_LENGTH, STATUS_RESOLVED,
-    STATUS_UNRESOLVED, STATUS_MUTED
-)
+from sentry.constants import LOG_LEVELS, MAX_CULPRIT_LENGTH
 from sentry.db.models import (
     Model, GzippedDictField, BoundedIntegerField, BoundedPositiveIntegerField,
     sane_repr
@@ -33,6 +30,13 @@ from sentry.utils.http import absolute_uri
 from sentry.utils.strings import truncatechars, strip
 
 
+# TODO(dcramer): pull in enum library
+class GroupStatus(object):
+    UNRESOLVED = 0
+    RESOLVED = 1
+    MUTED = 2
+
+
 class Group(Model):
     """
     Aggregated message which summarizes a set of Events.
@@ -50,8 +54,11 @@ class Group(Model):
     checksum = models.CharField(max_length=32, db_index=True)
     num_comments = BoundedPositiveIntegerField(default=0, null=True)
     platform = models.CharField(max_length=64, null=True)
-    status = BoundedPositiveIntegerField(
-        default=0, choices=STATUS_LEVELS, db_index=True)
+    status = BoundedPositiveIntegerField(default=0, choices=(
+        (GroupStatus.UNRESOLVED, _('Unresolved')),
+        (GroupStatus.RESOLVED, _('Resolved')),
+        (GroupStatus.MUTED, _('Muted')),
+    ), db_index=True)
     times_seen = BoundedPositiveIntegerField(default=1, db_index=True)
     last_seen = models.DateTimeField(default=timezone.now, db_index=True)
     first_seen = models.DateTimeField(default=timezone.now, db_index=True)
@@ -113,14 +120,14 @@ class Group(Model):
         return self.last_seen < timezone.now() - timedelta(hours=int(resolve_age))
 
     def is_muted(self):
-        return self.get_status() == STATUS_MUTED
+        return self.get_status() == GroupStatus.MUTED
 
     def is_resolved(self):
-        return self.get_status() == STATUS_RESOLVED
+        return self.get_status() == GroupStatus.RESOLVED
 
     def get_status(self):
-        if self.status == STATUS_UNRESOLVED and self.is_over_resolve_age():
-            return STATUS_RESOLVED
+        if self.status == GroupStatus.UNRESOLVED and self.is_over_resolve_age():
+            return GroupStatus.RESOLVED
         return self.status
 
     def get_score(self):
diff --git a/src/sentry/models/grouprulestatus.py b/src/sentry/models/grouprulestatus.py
index 3219a9644c..39e608542b 100644
--- a/src/sentry/models/grouprulestatus.py
+++ b/src/sentry/models/grouprulestatus.py
@@ -8,15 +8,17 @@ sentry.models.grouprulestatus
 from django.db import models
 from django.utils import timezone
 
-from sentry.constants import STATUS_ACTIVE
 from sentry.db.models import Model, sane_repr
 
 
 class GroupRuleStatus(Model):
+    ACTIVE = 0
+    INACTIVE = 1
+
     project = models.ForeignKey('sentry.Project')
     rule = models.ForeignKey('sentry.Rule')
     group = models.ForeignKey('sentry.Group')
-    status = models.PositiveSmallIntegerField(default=STATUS_ACTIVE)
+    status = models.PositiveSmallIntegerField(default=ACTIVE)
     date_added = models.DateTimeField(default=timezone.now)
 
     class Meta:
diff --git a/src/sentry/plugins/base.py b/src/sentry/plugins/base.py
index 80f8797f51..782a500d52 100644
--- a/src/sentry/plugins/base.py
+++ b/src/sentry/plugins/base.py
@@ -479,7 +479,7 @@ class IPlugin(local):
 
     def is_regression(self, group, event, **kwargs):
         """
-        Called on new events when the group's status is STATUS_RESOLVED.
+        Called on new events when the group's status is resolved.
         Return True if this event is a regression, False if it is not,
         None to defer to other plugins.
 
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 3786c053e6..9bbdb21bac 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -13,7 +13,6 @@ import logging
 from django.conf import settings
 from hashlib import md5
 
-from sentry.constants import STATUS_ACTIVE, STATUS_INACTIVE
 from sentry.plugins import plugins
 from sentry.rules import EventState, rules
 from sentry.tasks.base import instrumented_task
@@ -88,7 +87,7 @@ def post_process_group(event, is_new, is_regression, is_sample, **kwargs):
             group=event.group,
             defaults={
                 'project': project,
-                'status': STATUS_INACTIVE,
+                'status': GroupRuleStatus.INACTIVE,
             },
         )
 
@@ -96,7 +95,7 @@ def post_process_group(event, is_new, is_regression, is_sample, **kwargs):
             is_new=is_new,
             is_regression=is_regression,
             is_sample=is_sample,
-            rule_is_active=rule_status.status == STATUS_ACTIVE,
+            rule_is_active=rule_status.status == GroupRuleStatus.ACTIVE,
         )
 
         condition_iter = (
@@ -119,18 +118,18 @@ def post_process_group(event, is_new, is_regression, is_sample, **kwargs):
                                match, rule.id)
             continue
 
-        if passed and rule_status.status == STATUS_INACTIVE:
+        if passed and rule_status.status == GroupRuleStatus.INACTIVE:
             # we only fire if we're able to say that the state has changed
             GroupRuleStatus.objects.filter(
                 id=rule_status.id,
-                status=STATUS_INACTIVE,
-            ).update(status=STATUS_ACTIVE)
-        elif not passed and rule_status.status == STATUS_ACTIVE:
+                status=GroupRuleStatus.INACTIVE,
+            ).update(status=GroupRuleStatus.ACTIVE)
+        elif not passed and rule_status.status == GroupRuleStatus.ACTIVE:
             # update the state to suggest this rule can fire again
             GroupRuleStatus.objects.filter(
                 id=rule_status.id,
-                status=STATUS_ACTIVE,
-            ).update(status=STATUS_INACTIVE)
+                status=GroupRuleStatus.ACTIVE,
+            ).update(status=GroupRuleStatus.INACTIVE)
 
         if passed:
             execute_rule.apply_async(
diff --git a/src/sentry/utils/javascript.py b/src/sentry/utils/javascript.py
index 7ec155d08a..75a19101c7 100644
--- a/src/sentry/utils/javascript.py
+++ b/src/sentry/utils/javascript.py
@@ -12,9 +12,9 @@ from django.utils import timezone
 from django.utils.html import escape
 
 from sentry.app import env, tsdb
-from sentry.constants import STATUS_RESOLVED, STATUS_MUTED, TAG_LABELS
+from sentry.constants import TAG_LABELS
 from sentry.models import (
-    Group, GroupBookmark, GroupTagKey, GroupSeen, ProjectOption
+    Group, GroupBookmark, GroupTagKey, GroupSeen, GroupStatus, ProjectOption
 )
 from sentry.templatetags.sentry_plugins import get_tags
 from sentry.utils import json
@@ -145,9 +145,9 @@ class GroupTransformer(Transformer):
 
     def transform(self, obj, request=None):
         status = obj.get_status()
-        if status == STATUS_RESOLVED:
+        if status == GroupStatus.RESOLVED:
             status_label = 'resolved'
-        elif status == STATUS_MUTED:
+        elif status == GroupStatus.MUTED:
             status_label = 'muted'
         else:
             status_label = 'unresolved'
@@ -171,7 +171,7 @@ class GroupTransformer(Transformer):
             'timeSpent': obj.avg_time_spent,
             'canResolve': request and request.user.is_authenticated(),
             'status': status_label,
-            'isResolved': obj.get_status() == STATUS_RESOLVED,
+            'isResolved': obj.get_status() == GroupStatus.RESOLVED,
             'isPublic': obj.is_public,
             'score': getattr(obj, 'sort_value', 0),
             'project': {
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 05e9c86594..55d2191851 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -30,9 +30,7 @@ from raven.contrib.django.models import client as Raven
 
 from sentry import app
 from sentry.app import tsdb
-from sentry.constants import (
-    MEMBER_USER, STATUS_MUTED, STATUS_UNRESOLVED, STATUS_RESOLVED,
-)
+from sentry.constants import MEMBER_USER
 from sentry.coreapi import (
     project_from_auth_vars, decode_and_decompress_data,
     safely_load_json_string, validate_data, insert_data_to_database, APIError,
@@ -41,7 +39,7 @@ from sentry.coreapi import (
 from sentry.exceptions import InvalidData, InvalidOrigin, InvalidRequest
 from sentry.event_manager import EventManager
 from sentry.models import (
-    Group, GroupTagValue, Project, TagValue, Activity, User)
+    Group, GroupStatus, GroupTagValue, Project, TagValue, Activity, User)
 from sentry.signals import event_received
 from sentry.plugins import plugins
 from sentry.quotas.base import RateLimit
@@ -417,7 +415,7 @@ def resolve_group(request, team, project, group_id):
         return HttpResponseForbidden()
 
     happened = group.update(
-        status=STATUS_RESOLVED,
+        status=GroupStatus.RESOLVED,
         resolved_at=timezone.now(),
     )
     if happened:
@@ -442,7 +440,7 @@ def mute_group(request, team, project, group_id):
         return HttpResponseForbidden()
 
     happened = group.update(
-        status=STATUS_MUTED,
+        status=GroupStatus.MUTED,
         resolved_at=timezone.now(),
     )
     if happened:
@@ -467,7 +465,7 @@ def unresolve_group(request, team, project, group_id):
         return HttpResponseForbidden()
 
     happened = group.update(
-        status=STATUS_UNRESOLVED,
+        status=GroupStatus.UNRESOLVED,
         active_at=timezone.now(),
     )
     if happened:
@@ -572,7 +570,7 @@ def get_group_trends(request, team=None, project=None):
     cutoff_dt = timezone.now() - cutoff
 
     group_list = list(base_qs.filter(
-        status=STATUS_UNRESOLVED,
+        status=GroupStatus.UNRESOLVED,
         last_seen__gte=cutoff_dt
     ).extra(select={'sort_value': 'score'}).order_by('-score')[:limit])
 
@@ -606,7 +604,7 @@ def get_new_groups(request, team=None, project=None):
 
     group_list = list(Group.objects.filter(
         project__in=project_dict.keys(),
-        status=STATUS_UNRESOLVED,
+        status=GroupStatus.UNRESOLVED,
         active_at__gte=cutoff_dt,
     ).extra(select={'sort_value': 'score'}).order_by('-score', '-first_seen')[:limit])
 
@@ -640,7 +638,7 @@ def get_resolved_groups(request, team=None, project=None):
 
     group_list = list(Group.objects.filter(
         project__in=project_list,
-        status=STATUS_RESOLVED,
+        status=GroupStatus.RESOLVED,
         resolved_at__gte=cutoff_dt,
     ).order_by('-score')[:limit])
 
@@ -687,7 +685,7 @@ def get_stats(request, team=None, project=None):
     # TODO(dcramer); move this into tsdb
     num_resolved = Group.objects.filter(
         project__in=project_list,
-        status=STATUS_RESOLVED,
+        status=GroupStatus.RESOLVED,
         resolved_at__gte=start,
     ).aggregate(t=Sum('times_seen'))['t'] or 0
 
diff --git a/src/sentry/web/frontend/alerts.py b/src/sentry/web/frontend/alerts.py
index fdda92771e..5bc08b1398 100644
--- a/src/sentry/web/frontend/alerts.py
+++ b/src/sentry/web/frontend/alerts.py
@@ -13,8 +13,7 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.utils import timezone
 
-from sentry.constants import STATUS_RESOLVED, STATUS_UNRESOLVED
-from sentry.models import Alert
+from sentry.models import Alert, AlertStatus
 from sentry.web.decorators import has_access, login_required
 from sentry.web.helpers import render_to_response
 
@@ -24,7 +23,7 @@ from sentry.web.helpers import render_to_response
 def alert_list(request, team, project=None):
     alert_list = Alert.objects.filter(
         group__isnull=True,
-        status=STATUS_UNRESOLVED,
+        status=AlertStatus.UNRESOLVED,
         datetime__gte=timezone.now() - timedelta(days=3),
     ).order_by('-datetime')
 
@@ -72,6 +71,6 @@ def resolve_alert(request, team, project, alert_id):
     except Alert.DoesNotExist:
         return HttpResponseRedirect(reverse('sentry-alerts', args=[team.slug, project.slug]))
 
-    alert.update(status=STATUS_RESOLVED)
+    alert.update(status=AlertStatus.RESOLVED)
 
     return HttpResponseRedirect(reverse('sentry-alert-details', args=[team.slug, project.slug, alert.id]))
diff --git a/tests/sentry/api/endpoints/test_group_details.py b/tests/sentry/api/endpoints/test_group_details.py
index 3ef4708950..e3937de88f 100644
--- a/tests/sentry/api/endpoints/test_group_details.py
+++ b/tests/sentry/api/endpoints/test_group_details.py
@@ -2,8 +2,7 @@ from __future__ import absolute_import, print_function
 
 from django.core.urlresolvers import reverse
 
-from sentry.constants import STATUS_RESOLVED
-from sentry.models import Group, GroupBookmark
+from sentry.models import Group, GroupBookmark, GroupStatus
 from sentry.testutils import APITestCase
 
 
@@ -38,7 +37,7 @@ class GroupDetailsTest(APITestCase):
             id=group.id,
             project=group.project.id,
         )
-        assert group.status == STATUS_RESOLVED
+        assert group.status == GroupStatus.RESOLVED
 
     def test_bookmark(self):
         self.login_as(user=self.user)
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index 4506dea5ff..41dc09d4c8 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -3,8 +3,7 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 from mock import patch
 
-from sentry.constants import STATUS_MUTED, STATUS_RESOLVED, STATUS_UNRESOLVED
-from sentry.models import Group, GroupBookmark
+from sentry.models import Group, GroupBookmark, GroupStatus
 from sentry.testutils import APITestCase
 
 
@@ -22,12 +21,12 @@ class GroupListTest(APITestCase):
 
 class GroupUpdateTest(APITestCase):
     def test_global_status_update(self):
-        group1 = self.create_group(checksum='a' * 32, status=STATUS_RESOLVED)
-        group2 = self.create_group(checksum='b' * 32, status=STATUS_UNRESOLVED)
-        group3 = self.create_group(checksum='c' * 32, status=STATUS_MUTED)
+        group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
+        group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
+        group3 = self.create_group(checksum='c' * 32, status=GroupStatus.MUTED)
         group4 = self.create_group(
             project=self.create_project(slug='foo'),
-            checksum='b' * 32, status=STATUS_UNRESOLVED)
+            checksum='b' * 32, status=GroupStatus.UNRESOLVED)
 
         self.login_as(user=self.user)
         url = reverse('sentry-api-0-project-group-index', kwargs={
@@ -38,28 +37,28 @@ class GroupUpdateTest(APITestCase):
         assert response.status_code == 204
 
         new_group1 = Group.objects.get(id=group1.id)
-        assert new_group1.status == STATUS_RESOLVED
+        assert new_group1.status == GroupStatus.RESOLVED
         assert new_group1.resolved_at is None
 
         new_group2 = Group.objects.get(id=group2.id)
-        assert new_group2.status == STATUS_RESOLVED
+        assert new_group2.status == GroupStatus.RESOLVED
         assert new_group2.resolved_at is not None
 
         new_group3 = Group.objects.get(id=group3.id)
-        assert new_group3.status == STATUS_RESOLVED
+        assert new_group3.status == GroupStatus.RESOLVED
         assert new_group3.resolved_at is not None
 
         new_group4 = Group.objects.get(id=group4.id)
-        assert new_group4.status == STATUS_UNRESOLVED
+        assert new_group4.status == GroupStatus.UNRESOLVED
         assert new_group4.resolved_at is None
 
     def test_selective_status_update(self):
-        group1 = self.create_group(checksum='a' * 32, status=STATUS_RESOLVED)
-        group2 = self.create_group(checksum='b' * 32, status=STATUS_UNRESOLVED)
-        group3 = self.create_group(checksum='c' * 32, status=STATUS_MUTED)
+        group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
+        group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
+        group3 = self.create_group(checksum='c' * 32, status=GroupStatus.MUTED)
         group4 = self.create_group(
             project=self.create_project(slug='foo'),
-            checksum='b' * 32, status=STATUS_UNRESOLVED)
+            checksum='b' * 32, status=GroupStatus.UNRESOLVED)
 
         self.login_as(user=self.user)
         url = '{url}?id={group1.id}&id={group2.id}&group4={group4.id}'.format(
@@ -80,23 +79,23 @@ class GroupUpdateTest(APITestCase):
 
         new_group2 = Group.objects.get(id=group2.id)
         assert new_group2.resolved_at is not None
-        assert new_group2.status == STATUS_RESOLVED
+        assert new_group2.status == GroupStatus.RESOLVED
 
         new_group3 = Group.objects.get(id=group3.id)
         assert new_group3.resolved_at is None
-        assert new_group3.status == STATUS_MUTED
+        assert new_group3.status == GroupStatus.MUTED
 
         new_group4 = Group.objects.get(id=group4.id)
         assert new_group4.resolved_at is None
-        assert new_group4.status == STATUS_UNRESOLVED
+        assert new_group4.status == GroupStatus.UNRESOLVED
 
     def test_set_bookmarked(self):
-        group1 = self.create_group(checksum='a' * 32, status=STATUS_RESOLVED)
-        group2 = self.create_group(checksum='b' * 32, status=STATUS_UNRESOLVED)
-        group3 = self.create_group(checksum='c' * 32, status=STATUS_MUTED)
+        group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
+        group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
+        group3 = self.create_group(checksum='c' * 32, status=GroupStatus.MUTED)
         group4 = self.create_group(
             project=self.create_project(slug='foo'),
-            checksum='b' * 32, status=STATUS_UNRESOLVED)
+            checksum='b' * 32, status=GroupStatus.UNRESOLVED)
 
         self.login_as(user=self.user)
         url = '{url}?id={group1.id}&id={group2.id}&group4={group4.id}'.format(
@@ -161,12 +160,12 @@ class GroupDeleteTest(APITestCase):
         assert response.status_code == 400
 
     def test_delete_by_id(self):
-        group1 = self.create_group(checksum='a' * 32, status=STATUS_RESOLVED)
-        group2 = self.create_group(checksum='b' * 32, status=STATUS_UNRESOLVED)
-        group3 = self.create_group(checksum='c' * 32, status=STATUS_MUTED)
+        group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
+        group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
+        group3 = self.create_group(checksum='c' * 32, status=GroupStatus.MUTED)
         group4 = self.create_group(
             project=self.create_project(slug='foo'),
-            checksum='b' * 32, status=STATUS_UNRESOLVED)
+            checksum='b' * 32, status=GroupStatus.UNRESOLVED)
 
         self.login_as(user=self.user)
         url = '{url}?id={group1.id}&id={group2.id}&group4={group4.id}'.format(
diff --git a/tests/sentry/models/test_group.py b/tests/sentry/models/test_group.py
index 26d2b649d7..5f6c0b2fdc 100644
--- a/tests/sentry/models/test_group.py
+++ b/tests/sentry/models/test_group.py
@@ -3,19 +3,19 @@ from __future__ import absolute_import
 from datetime import timedelta
 from django.utils import timezone
 
-from sentry.constants import STATUS_RESOLVED, STATUS_UNRESOLVED, STATUS_MUTED
+from sentry.models import GroupStatus
 from sentry.testutils import TestCase
 
 
 class GroupTest(TestCase):
     def test_is_resolved(self):
-        group = self.create_group(status=STATUS_RESOLVED)
+        group = self.create_group(status=GroupStatus.RESOLVED)
         assert group.is_resolved()
 
-        group.status = STATUS_MUTED
+        group.status = GroupStatus.MUTED
         assert not group.is_resolved()
 
-        group.status = STATUS_UNRESOLVED
+        group.status = GroupStatus.UNRESOLVED
         assert not group.is_resolved()
 
         group.last_seen = timezone.now() - timedelta(hours=12)
diff --git a/tests/sentry/search/django/tests.py b/tests/sentry/search/django/tests.py
index 42cd72070b..6a173b1b64 100644
--- a/tests/sentry/search/django/tests.py
+++ b/tests/sentry/search/django/tests.py
@@ -4,8 +4,7 @@ from __future__ import absolute_import
 
 from datetime import datetime, timedelta
 
-from sentry.constants import STATUS_RESOLVED, STATUS_UNRESOLVED
-from sentry.models import GroupBookmark, GroupTagValue
+from sentry.models import GroupBookmark, GroupStatus, GroupTagValue
 from sentry.search.django.backend import DjangoSearchBackend
 from sentry.testutils import TestCase
 
@@ -25,7 +24,7 @@ class DjangoSearchBackendTest(TestCase):
             checksum='a' * 32,
             message='foo',
             times_seen=5,
-            status=STATUS_UNRESOLVED,
+            status=GroupStatus.UNRESOLVED,
             last_seen=datetime(2013, 8, 13, 3, 8, 24, 880386),
             first_seen=datetime(2013, 7, 13, 3, 8, 24, 880386),
         )
@@ -43,7 +42,7 @@ class DjangoSearchBackendTest(TestCase):
             checksum='b' * 32,
             message='bar',
             times_seen=10,
-            status=STATUS_RESOLVED,
+            status=GroupStatus.RESOLVED,
             last_seen=datetime(2013, 7, 14, 3, 8, 24, 880386),
             first_seen=datetime(2013, 7, 14, 3, 8, 24, 880386),
         )
@@ -109,11 +108,11 @@ class DjangoSearchBackendTest(TestCase):
         assert results[1] == self.group1
 
     def test_status(self):
-        results = self.backend.query(self.project1, status=STATUS_UNRESOLVED)
+        results = self.backend.query(self.project1, status=GroupStatus.UNRESOLVED)
         assert len(results) == 1
         assert results[0] == self.group1
 
-        results = self.backend.query(self.project1, status=STATUS_RESOLVED)
+        results = self.backend.query(self.project1, status=GroupStatus.RESOLVED)
         assert len(results) == 1
         assert results[0] == self.group2
 
diff --git a/tests/sentry/search/test_utils.py b/tests/sentry/search/test_utils.py
index d435bb86a2..611d97ad91 100644
--- a/tests/sentry/search/test_utils.py
+++ b/tests/sentry/search/test_utils.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from sentry.constants import STATUS_RESOLVED
+from sentry.models import GroupStatus
 from sentry.testutils import TestCase
 from sentry.search.utils import parse_query
 
@@ -36,7 +36,7 @@ class ParseQueryTest(TestCase):
 
     def test_is_resolved(self):
         result = parse_query('is:resolved', self.user)
-        assert result == {'status': STATUS_RESOLVED, 'tags': {}, 'query': ''}
+        assert result == {'status': GroupStatus.RESOLVED, 'tags': {}, 'query': ''}
 
     def test_assigned_me(self):
         result = parse_query('assigned:me', self.user)
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index e2c712e4ba..66d55e3e67 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -8,9 +8,9 @@ from mock import patch
 
 from django.conf import settings
 
-from sentry.constants import MAX_CULPRIT_LENGTH, STATUS_RESOLVED
+from sentry.constants import MAX_CULPRIT_LENGTH
 from sentry.event_manager import EventManager, get_hashes_for_event
-from sentry.models import Event, Group, EventMapping
+from sentry.models import Event, Group, GroupStatus, EventMapping
 from sentry.testutils import TestCase
 
 
@@ -114,7 +114,7 @@ class EventManagerTest(TestCase):
         print(event)
 
         group = Group.objects.get(id=event.group_id)
-        group.status = STATUS_RESOLVED
+        group.status = GroupStatus.RESOLVED
         group.save()
         assert group.is_resolved()
 
@@ -141,7 +141,7 @@ class EventManagerTest(TestCase):
         event = manager.save(1)
 
         group = Group.objects.get(id=event.group_id)
-        group.status = STATUS_RESOLVED
+        group.status = GroupStatus.RESOLVED
         group.save()
         assert group.is_resolved()
 
