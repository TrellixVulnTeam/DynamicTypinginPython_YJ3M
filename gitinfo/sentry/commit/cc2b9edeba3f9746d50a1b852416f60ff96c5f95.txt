commit cc2b9edeba3f9746d50a1b852416f60ff96c5f95
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Mar 27 15:44:05 2018 -0700

    ref(ui): Simplify issue link
    
    - Composes Hovercard into the issue link, removing the logic for
       displaying the card from the component.
     - Convert the component into a ES6 style class.
     - Remove unused ApiMixin.
     - Use `classNames`.

diff --git a/src/sentry/static/sentry/app/components/issueLink.jsx b/src/sentry/static/sentry/app/components/issueLink.jsx
index e1bf5e1c4f..0727f62c68 100644
--- a/src/sentry/static/sentry/app/components/issueLink.jsx
+++ b/src/sentry/static/sentry/app/components/issueLink.jsx
@@ -1,45 +1,27 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
+import classNames from 'classnames';
 import {Link} from 'react-router';
 
-import ApiMixin from '../mixins/apiMixin';
+import Hovercard from './hovercard';
 import Count from './count';
 import EventOrGroupTitle from './eventOrGroupTitle';
 import TimeSince from './timeSince';
 
-export default createReactClass({
-  displayName: 'issueLink',
-
-  propTypes: {
+export default class IssueLink extends React.Component {
+  static propTypes = {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
     issue: PropTypes.object.isRequired,
     card: PropTypes.bool,
-  },
-
-  mixins: [ApiMixin],
-
-  getDefaultProps() {
-    return {
-      card: true,
-    };
-  },
-
-  getInitialState() {
-    return {
-      visible: false,
-    };
-  },
+  };
 
-  toggleHovercard() {
-    this.setState({
-      visible: !this.state.visible,
-    });
-  },
+  static defaultProps = {
+    card: true,
+  };
 
   getMessage(data) {
-    let metadata = data.metadata;
+    const metadata = data.metadata;
     switch (data.type) {
       case 'error':
         return metadata.value;
@@ -48,91 +30,76 @@ export default createReactClass({
       default:
         return data.culprit || '';
     }
-  },
+  }
 
   renderBody() {
-    let {issue, orgId, projectId} = this.props;
-    let message = this.getMessage(issue);
+    const {issue, orgId, projectId} = this.props;
+    const message = this.getMessage(issue);
 
-    let className = '';
-    className += ' type-' + issue.type;
-    className += ' level-' + issue.level;
-    if (issue.isBookmarked) {
-      className += ' isBookmarked';
-    }
-    if (issue.hasSeen) {
-      className += ' hasSeen';
-    }
-    if (issue.status === 'resolved') {
-      className += ' isResolved';
-    }
+    const className = classNames(`type-${issue.type}`, `level-${issue.level}`, {
+      isBookmarked: issue.isBookmarked,
+      hasSeen: issue.hasSeen,
+      isResolved: issue.status === 'resolved',
+    });
 
     return (
-      <div>
-        <div className="hovercard-header">
-          <span>{issue.shortId}</span>
+      <div className={className}>
+        <div style={{marginBottom: 20}}>
+          <h3>
+            <EventOrGroupTitle data={issue} />
+          </h3>
+          <div className="event-message">
+            <span className="error-level">{issue.level}</span>
+            {message && <span className="message">{message}</span>}
+            {issue.logger && (
+              <span className="event-annotation">
+                <Link
+                  to={{
+                    pathname: `/${orgId}/${projectId}/`,
+                    query: {query: 'logger:' + issue.logger},
+                  }}
+                >
+                  {issue.logger}
+                </Link>
+              </span>
+            )}
+            {issue.annotations.map((annotation, i) => {
+              return (
+                <span
+                  className="event-annotation"
+                  key={i}
+                  dangerouslySetInnerHTML={{__html: annotation}}
+                />
+              );
+            })}
+          </div>
         </div>
-        <div className="hovercard-body">
-          <div className={className}>
-            <div style={{marginBottom: 20}}>
-              <h3>
-                <EventOrGroupTitle data={issue} />
-              </h3>
-              <div className="event-message">
-                <span className="error-level">{issue.level}</span>
-                {message && <span className="message">{message}</span>}
-                {issue.logger && (
-                  <span className="event-annotation">
-                    <Link
-                      to={{
-                        pathname: `/${orgId}/${projectId}/`,
-                        query: {query: 'logger:' + issue.logger},
-                      }}
-                    >
-                      {issue.logger}
-                    </Link>
-                  </span>
-                )}
-                {issue.annotations.map((annotation, i) => {
-                  return (
-                    <span
-                      className="event-annotation"
-                      key={i}
-                      dangerouslySetInnerHTML={{__html: annotation}}
-                    />
-                  );
-                })}
-              </div>
-            </div>
-            <div className="row row-flex" style={{marginBottom: 20}}>
-              <div className="col-xs-6">
-                <h6>First Seen</h6>
-                <TimeSince date={issue.firstSeen} />
-              </div>
-              <div className="col-xs-6">
-                <h6>Last Seen</h6>
-                <TimeSince date={issue.lastSeen} />
-              </div>
-            </div>
-            <div className="row row-flex">
-              <div className="col-xs-6">
-                <h6>Occurrences</h6>
-                <Count value={issue.count} />
-              </div>
-              <div className="col-xs-6">
-                <h6>Users Affected</h6>
-                <Count value={issue.userCount} />
-              </div>
-            </div>
+        <div className="row row-flex" style={{marginBottom: 20}}>
+          <div className="col-xs-6">
+            <h6>First Seen</h6>
+            <TimeSince date={issue.firstSeen} />
+          </div>
+          <div className="col-xs-6">
+            <h6>Last Seen</h6>
+            <TimeSince date={issue.lastSeen} />
+          </div>
+        </div>
+        <div className="row row-flex">
+          <div className="col-xs-6">
+            <h6>Occurrences</h6>
+            <Count value={issue.count} />
+          </div>
+          <div className="col-xs-6">
+            <h6>Users Affected</h6>
+            <Count value={issue.userCount} />
           </div>
         </div>
       </div>
     );
-  },
+  }
 
   render() {
     let {card, issue, orgId, projectId} = this.props;
-    let {visible} = this.state;
     if (!card)
       return (
         <Link to={`/${orgId}/${projectId}/issues/${issue.id}/`}>
@@ -141,21 +108,11 @@ export default createReactClass({
       );
 
     return (
-      <span
-        onMouseEnter={this.toggleHovercard}
-        onMouseLeave={this.toggleHovercard}
-        style={{position: 'relative'}}
-      >
+      <Hovercard body={this.renderBody()} header={issue.shortId}>
         <Link to={`/${orgId}/${projectId}/issues/${issue.id}/`}>
           {this.props.children}
         </Link>
-        {visible && (
-          <div className="hovercard">
-            <div className="hovercard-hoverlap" />
-            {this.renderBody()}
-          </div>
-        )}
-      </span>
+      </Hovercard>
     );
-  },
-});
+  }
+}
