commit 50a15964d8e49e3c175334b26f6bea664d868da5
Author: Jan Michael Auer <account@jauer.org>
Date:   Tue Oct 2 18:05:59 2018 +0200

    feat(api): Include PII meta data in API context (#9912)
    
    * build: Bump libsemaphore to 0.2.0
    
    * feat: Prepare meta serialization in interfaces
    
    * feat: Ensure interface meta has the same structure as API context
    
    * feat: Preserve logentry meta data during normalization
    
    * feat: Emit meta for packages and tags
    
    * fix: Chunk meta of entries and top-level attributes
    
    * feat: Fix tags meta emission
    
    * fix: Fetch meta for legacy message
    
    * test: Add tests for renamed attributes
    
    * fix: Always include top level meta

diff --git a/requirements-base.txt b/requirements-base.txt
index 511caba97b..433a6276da 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -54,7 +54,7 @@ redis-py-cluster==1.3.4
 redis>=2.10.3,<2.10.6
 requests[security]>=2.18.4,<2.19.0
 selenium==3.11.0
-semaphore>=0.1.0,<0.2.0
+semaphore>=0.2.0,<0.3.0
 setproctitle>=1.1.7,<1.2.0
 simplejson>=3.2.0,<3.9.0
 six>=1.10.0,<1.11.0
diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index a9007148f5..1b291a78dc 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -5,6 +5,7 @@ import six
 from datetime import datetime
 from django.utils import timezone
 
+from semaphore import meta_with_chunks
 from sentry.api.serializers import Serializer, register
 from sentry.models import Event, EventError
 
@@ -16,7 +17,10 @@ class EventSerializer(Serializer):
 
     def _get_entries(self, event, user, is_public=False):
         # XXX(dcramer): These are called entries for future-proofing
+
+        meta = event.data.get('_meta') or {}
         interface_list = []
+
         for key, interface in six.iteritems(event.interfaces):
             # we treat user as a special contextual item
             if key in self._reserved_keys:
@@ -31,41 +35,101 @@ class EventSerializer(Serializer):
                 'data': data,
                 'type': interface.get_alias(),
             }
-            interface_list.append((interface, entry))
+
+            api_meta = None
+            if meta.get(key):
+                api_meta = interface.get_api_meta(meta[key], is_public=is_public)
+                api_meta = meta_with_chunks(data, api_meta)
+
+            interface_list.append((interface, entry, api_meta))
+
         interface_list.sort(
             key=lambda x: x[0].get_display_score(), reverse=True)
 
-        return [i[1] for i in interface_list]
+        return (
+            [i[1] for i in interface_list],
+            {k: {'data': i[2]} for k, i in enumerate(interface_list) if i[2]}
+        )
+
+    def _get_interface_with_meta(self, event, name, is_public=False):
+        interface = event.interfaces.get(name)
+        if not interface:
+            return (None, None)
+
+        data = interface.get_api_context(is_public=is_public)
+        event_meta = event.data.get('_meta') or {}
+        if not data or not event_meta.get(name):
+            return (data, None)
+
+        api_meta = interface.get_api_meta(event_meta[name], is_public=is_public)
+        # data might not be returned for e.g. a public HTTP repr
+        if not api_meta:
+            return (data, None)
+
+        return (data, meta_with_chunks(data, api_meta))
+
+    def _get_tags_with_meta(self, event):
+        meta = (event.data.get('_meta') or {}).get('tags') or {}
+
+        tags = sorted(
+            [{
+                'key': k.split('sentry:', 1)[-1],
+                'value': v,
+                '_meta': meta.get(k) or meta.get(six.text_type(i), {}).get('1') or None,
+            } for i, (k, v) in enumerate(event.data.get('tags') or ())],
+            key=lambda x: x['key']
+        )
+
+        tags_meta = {
+            six.text_type(i): {'value': e.pop('_meta')}
+            for i, e in enumerate(tags) if e.get('_meta')
+        }
+
+        return (tags, meta_with_chunks(tags, tags_meta))
+
+    def _get_attr_with_meta(self, event, attr, default=None):
+        value = event.data.get(attr, default)
+        meta = (event.data.get('_meta') or {}).get(attr)
+        return (value, meta_with_chunks(value, meta))
+
+    def _get_message_with_meta(self, event):
+        meta = event.data.get('_meta') or {}
+
+        if 'logentry' not in event.data:
+            message = event.message
+            msg_meta = meta.get('message')
+        elif 'formatted' in event.data['logentry']:
+            message = event.data['logentry']['formatted']
+            msg_meta = meta.get('logentry', {}).get('formatted')
+        else:
+            message = event.data['logentry']['message']
+            msg_meta = meta.get('logentry', {}).get('message')
+
+        return (message, meta_with_chunks(message, msg_meta))
 
     def get_attrs(self, item_list, user, is_public=False):
         Event.objects.bind_nodes(item_list, 'data')
 
         results = {}
         for item in item_list:
-            user_interface = item.interfaces.get('sentry.interfaces.User')
             # TODO(dcramer): convert to get_api_context
-            if user_interface:
-                user_data = user_interface.to_json()
-            else:
-                user_data = None
-
-            contexts_interface = item.interfaces.get('contexts')
-            if contexts_interface:
-                contexts_data = contexts_interface.get_api_context()
-            else:
-                contexts_data = {}
-
-            sdk_interface = item.interfaces.get('sdk')
-            if sdk_interface:
-                sdk_data = sdk_interface.get_api_context()
-            else:
-                sdk_data = None
+            (user_data, user_meta) = self._get_interface_with_meta(item, 'user', is_public)
+            (contexts_data, contexts_meta) = self._get_interface_with_meta(item, 'contexts', is_public)
+            (sdk_data, sdk_meta) = self._get_interface_with_meta(item, 'sdk', is_public)
+
+            (entries, entries_meta) = self._get_entries(item, user, is_public=is_public)
 
             results[item] = {
-                'entries': self._get_entries(item, user, is_public=is_public),
+                'entries': entries,
                 'user': user_data,
-                'contexts': contexts_data,
+                'contexts': contexts_data or {},
                 'sdk': sdk_data,
+                '_meta': {
+                    'entries': entries_meta,
+                    'user': user_meta,
+                    'contexts': contexts_meta,
+                    'sdk': sdk_meta,
+                }
             }
         return results
 
@@ -80,13 +144,10 @@ class EventSerializer(Serializer):
             }
             errors.append(error_result)
 
-        tags = sorted(
-            [{
-                'key': k.split('sentry:', 1)[-1],
-                'value': v
-            } for k, v in obj.get_tags()],
-            key=lambda x: x['key']
-        )
+        (message, message_meta) = self._get_message_with_meta(obj)
+        (tags, tags_meta) = self._get_tags_with_meta(obj)
+        (context, context_meta) = self._get_attr_with_meta(obj, 'extra', {})
+        (packages, packages_meta) = self._get_attr_with_meta(obj, 'modules', {})
 
         received = obj.data.get('received')
         if received:
@@ -113,13 +174,13 @@ class EventSerializer(Serializer):
             'entries': attrs['entries'],
             'dist': obj.dist,
             # See GH-3248
-            'message': obj.get_legacy_message(),
+            'message': message,
             'user': attrs['user'],
             'contexts': attrs['contexts'],
             'sdk': attrs['sdk'],
             # TODO(dcramer): move into contexts['extra']
-            'context': obj.data.get('extra', {}),
-            'packages': obj.data.get('modules', {}),
+            'context': context,
+            'packages': packages,
             'type': obj.get_event_type(),
             'metadata': obj.get_event_metadata(),
             'tags': tags,
@@ -131,6 +192,16 @@ class EventSerializer(Serializer):
                 md5_from_hash(h)
                 for h in get_hashes_from_fingerprint(obj, obj.data.get('fingerprint', ['{{ default }}']))
             ],
+            '_meta': {
+                'entries': attrs['_meta']['entries'],
+                'message': message_meta,
+                'user': attrs['_meta']['user'],
+                'contexts': attrs['_meta']['contexts'],
+                'sdk': attrs['_meta']['sdk'],
+                'context': context_meta,
+                'packages': packages_meta,
+                'tags': tags_meta,
+            },
         }
         return d
 
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 7f4cc10f31..75eb379969 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -358,9 +358,20 @@ class EventManager(object):
         # See GH-3248
         msg_str = data.pop('message', None)
         if msg_str:
-            msg_if = data.setdefault('sentry.interfaces.Message', {'message': msg_str})
+            msg_if = data.get('logentry')
+            msg_meta = data.get('_meta', {}).get('message')
+
+            if not msg_if:
+                msg_if = data['logentry'] = {'message': msg_str}
+                if msg_meta:
+                    data.setdefault('_meta', {}).setdefault('logentry', {})['message'] = msg_meta
+
             if msg_if.get('message') != msg_str:
-                msg_if.setdefault('formatted', msg_str)
+                if not msg_if.get('formatted'):
+                    msg_if['formatted'] = msg_str
+                    if msg_meta:
+                        data.setdefault('_meta', {}).setdefault(
+                            'logentry', {})['formatted'] = msg_meta
 
         # Fill in ip addresses marked as {{auto}}
         client_ip = request_env.get('client_ip')
diff --git a/src/sentry/interfaces/base.py b/src/sentry/interfaces/base.py
index 0afbaff745..467645f0f5 100644
--- a/src/sentry/interfaces/base.py
+++ b/src/sentry/interfaces/base.py
@@ -67,7 +67,7 @@ class Interface(object):
         self._data = data or {}
 
     def __eq__(self, other):
-        if type(self) != type(other):
+        if not isinstance(self, type(other)):
             return False
         return self._data == other._data
 
@@ -95,6 +95,9 @@ class Interface(object):
     def get_api_context(self, is_public=False):
         return self.to_json()
 
+    def get_api_meta(self, meta, is_public=False):
+        return meta
+
     def to_json(self):
         # eliminate empty values for serialization to compress the keyspace
         # and save (seriously) ridiculous amounts of bytes
diff --git a/src/sentry/interfaces/breadcrumbs.py b/src/sentry/interfaces/breadcrumbs.py
index 6aa9b2c089..56350e7a16 100644
--- a/src/sentry/interfaces/breadcrumbs.py
+++ b/src/sentry/interfaces/breadcrumbs.py
@@ -130,3 +130,9 @@ class Breadcrumbs(Interface):
         return {
             'values': [_convert(v) for v in self.values],
         }
+
+    def get_api_meta(self, meta, is_public=False):
+        if meta and 'values' not in meta:
+            return {'values': meta}
+        else:
+            return meta
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 7c7c3d4c99..642c93fb8e 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -907,7 +907,8 @@ class SingleException(Interface):
 
     def get_api_context(self, is_public=False):
         mechanism = isinstance(self.mechanism, Mechanism) and \
-            self.mechanism.to_json() or self.mechanism or None
+            self.mechanism.get_api_context(is_public=is_public) or \
+            self.mechanism or None
 
         if self.stacktrace:
             stacktrace = self.stacktrace.get_api_context(is_public=is_public)
@@ -929,6 +930,25 @@ class SingleException(Interface):
             'rawStacktrace': raw_stacktrace,
         }
 
+    def get_api_meta(self, meta, is_public=False):
+        mechanism_meta = self.mechanism.get_api_meta(meta['mechanism'], is_public=is_public) \
+            if isinstance(self.mechanism, Mechanism) and meta.get('mechanism') \
+            else None
+
+        stacktrace_meta = self.stacktrace.get_api_meta(meta, is_public=is_public) \
+            if self.stacktrace and meta.get('stacktrace') \
+            else None
+
+        return {
+            '': meta.get(''),
+            'type': meta.get('type'),
+            'value': meta.get('value'),
+            'mechanism': mechanism_meta,
+            'threadId': meta.get('thread_id'),
+            'module': meta.get('module'),
+            'stacktrace': stacktrace_meta,
+        }
+
     def get_alias(self):
         return 'exception'
 
@@ -1073,6 +1093,18 @@ class Exception(Interface):
             self.exc_omitted,
         }
 
+    def get_api_meta(self, meta, is_public=False):
+        if not meta:
+            return meta
+
+        result = {}
+        values = meta.get('values', meta)
+        for index, value in six.iteritems(values):
+            exc = self.values[int(index)]
+            result[index] = exc.get_api_meta(value, is_public=is_public)
+
+        return {'values': result}
+
     def to_string(self, event, is_public=False, **kwargs):
         if not self.values:
             return ''
diff --git a/src/sentry/interfaces/http.py b/src/sentry/interfaces/http.py
index a1885359d1..008a777e83 100644
--- a/src/sentry/interfaces/http.py
+++ b/src/sentry/interfaces/http.py
@@ -264,3 +264,32 @@ class Http(Interface):
             'inferredContentType': self.inferred_content_type,
         }
         return data
+
+    def get_api_meta(self, meta, is_public=False):
+        if is_public:
+            return None
+
+        headers = meta.get('headers')
+        if headers:
+            headers_meta = headers.pop('', None)
+            headers = {six.text_type(i): {'1': h[1]} for i, h in enumerate(sorted(headers.items()))}
+            if headers_meta:
+                headers[''] = headers_meta
+
+        cookies = meta.get('cookies')
+        if cookies:
+            cookies_meta = cookies.pop('', None)
+            cookies = {six.text_type(i): {'1': h[1]} for i, h in enumerate(sorted(cookies.items()))}
+            if cookies_meta:
+                cookies[''] = cookies_meta
+
+        return {
+            '': meta.get(''),
+            'method': meta.get('method'),
+            'url': meta.get('url'),
+            'query': meta.get('query_string'),
+            'data': meta.get('data'),
+            'headers': headers,
+            'cookies': cookies,
+            'env': meta.get('env'),
+        }
diff --git a/src/sentry/interfaces/message.py b/src/sentry/interfaces/message.py
index 57f2ba91e9..d5c7685548 100644
--- a/src/sentry/interfaces/message.py
+++ b/src/sentry/interfaces/message.py
@@ -61,7 +61,7 @@ class Message(Interface):
 
         if kwargs['formatted']:
             if not isinstance(kwargs['formatted'], six.string_types):
-                data['formatted'] = json.dumps(data['formatted'])
+                kwargs['formatted'] = json.dumps(data['formatted'])
         # support python-esque formatting (e.g. %s)
         elif '%' in kwargs['message'] and kwargs['params']:
             if isinstance(kwargs['params'], list):
diff --git a/src/sentry/interfaces/sdk.py b/src/sentry/interfaces/sdk.py
index ceb9d26d86..d61eb5cff7 100644
--- a/src/sentry/interfaces/sdk.py
+++ b/src/sentry/interfaces/sdk.py
@@ -70,12 +70,13 @@ class Sdk(Interface):
             'integrations': integrations,
             'packages': packages,
         }
+
         return cls(**kwargs)
 
     def get_path(self):
         return 'sdk'
 
-    def get_api_context(self):
+    def get_api_context(self, is_public=False):
         newest_version = get_with_prefix(settings.SDK_VERSIONS, self.name)
         newest_name = get_with_prefix(settings.DEPRECATED_SDKS, self.name, self.name)
         if newest_version is not None:
@@ -100,3 +101,10 @@ class Sdk(Interface):
                 'url': get_with_prefix(settings.SDK_URLS, newest_name),
             },
         }
+
+    def get_api_meta(self, meta, is_public=False):
+        return {
+            '': meta.get(''),
+            'name': meta.get('name'),
+            'version': meta.get('version'),
+        }
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 535653fd85..4b1929d3f8 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -458,40 +458,26 @@ class Frame(Interface):
 
     def get_api_context(self, is_public=False, pad_addr=None):
         data = {
-            'filename':
-            self.filename,
-            'absPath':
-            self.abs_path,
-            'module':
-            self.module,
-            'package':
-            self.package,
-            'platform':
-            self.platform,
-            'instructionAddr':
-            pad_hex_addr(self.instruction_addr, pad_addr),
-            'symbolAddr':
-            pad_hex_addr(self.symbol_addr, pad_addr),
-            'function':
-            self.function,
-            'symbol':
-            self.symbol,
-            'context':
-            get_context(
+            'filename': self.filename,
+            'absPath': self.abs_path,
+            'module': self.module,
+            'package': self.package,
+            'platform': self.platform,
+            'instructionAddr': pad_hex_addr(self.instruction_addr, pad_addr),
+            'symbolAddr': pad_hex_addr(self.symbol_addr, pad_addr),
+            'function': self.function,
+            'symbol': self.symbol,
+            'context': get_context(
                 lineno=self.lineno,
                 context_line=self.context_line,
                 pre_context=self.pre_context,
                 post_context=self.post_context,
                 filename=self.filename or self.module,
             ),
-            'lineNo':
-            self.lineno,
-            'colNo':
-            self.colno,
-            'inApp':
-            self.in_app,
-            'errors':
-            self.errors,
+            'lineNo': self.lineno,
+            'colNo': self.colno,
+            'inApp': self.in_app,
+            'errors': self.errors,
         }
         if not is_public:
             data['vars'] = self.vars
@@ -512,6 +498,33 @@ class Frame(Interface):
 
         return data
 
+    def get_meta_context(self, meta, is_public=False):
+        if not meta:
+            return
+
+        return {
+            'filename': meta.get('filename'),
+            'absPath': meta.get('abs_path'),
+            'module': meta.get('module'),
+            'package': meta.get('package'),
+            'platform': meta.get('platform'),
+            'instructionAddr': meta.get('instruction_addr'),
+            'symbolAddr': meta.get('symbol_addr'),
+            'function': meta.get('function'),
+            'symbol': meta.get('symbol'),
+            'context': get_context(
+                lineno=meta.get('lineno'),
+                context_line=meta.get('context_line'),
+                pre_context=meta.get('pre_context'),
+                post_context=meta.get('post_context'),
+                filename=meta.get('filename') if self.filename else meta.get('module'),
+            ),
+            'lineNo': meta.get('lineno'),
+            'colNo': meta.get('colno'),
+            'inApp': meta.get('in_app'),
+            'errors': meta.get('errors'),
+        }
+
     def is_url(self):
         if not self.abs_path:
             return False
@@ -750,6 +763,22 @@ class Stacktrace(Interface):
             'hasSystemFrames': self.get_has_system_frames(),
         }
 
+    def get_api_meta(self, meta, is_public=False):
+        if not meta:
+            return meta
+
+        frame_meta = {}
+        for index, value in six.iteritems(meta.get('frames', {})):
+            frame = self.frames[int(index)]
+            frame_meta[index] = frame.get_api_meta(value, is_public=is_public)
+
+        return {
+            '': meta.get(''),
+            'frames': frame_meta,
+            'framesOmitted': meta.get('frames_omitted'),
+            'registers': meta.get('registers'),
+        }
+
     def to_json(self):
         return {
             'frames': [f.to_json() for f in self.frames],
diff --git a/src/sentry/interfaces/template.py b/src/sentry/interfaces/template.py
index 2b590dbd12..4477cd7c1e 100644
--- a/src/sentry/interfaces/template.py
+++ b/src/sentry/interfaces/template.py
@@ -95,12 +95,9 @@ class Template(Interface):
 
     def get_api_context(self, is_public=False):
         return {
-            'lineNo':
-            self.lineno,
-            'filename':
-            self.filename,
-            'context':
-            get_context(
+            'lineNo': self.lineno,
+            'filename': self.filename,
+            'context': get_context(
                 lineno=self.lineno,
                 context_line=self.context_line,
                 pre_context=self.pre_context,
@@ -108,3 +105,17 @@ class Template(Interface):
                 filename=self.filename,
             ),
         }
+
+    def get_api_meta(self, meta, is_public=False):
+        return {
+            '': meta.get(''),
+            'lineNo': meta.get('lineno'),
+            'filename': meta.get('filename'),
+            'context': get_context(
+                lineno=meta.get('lineno'),
+                context_line=meta.get('context_line'),
+                pre_context=meta.get('pre_context'),
+                post_context=meta.get('post_context'),
+                filename=meta.get('filename'),
+            ),
+        }
diff --git a/src/sentry/interfaces/threads.py b/src/sentry/interfaces/threads.py
index 6c61542b74..c78a12dfe1 100644
--- a/src/sentry/interfaces/threads.py
+++ b/src/sentry/interfaces/threads.py
@@ -75,6 +75,12 @@ class Threads(Interface):
             'values': [export_thread(x) for x in self.values],
         }
 
+    def get_meta_context(self, meta, is_public=False):
+        if meta and 'values' not in meta:
+            return {'values': meta}
+        else:
+            return meta
+
     def get_path(self):
         return 'threads'
 
diff --git a/src/sentry/interfaces/user.py b/src/sentry/interfaces/user.py
index 3d41ec3d28..3897b1441c 100644
--- a/src/sentry/interfaces/user.py
+++ b/src/sentry/interfaces/user.py
@@ -114,11 +114,22 @@ class User(Interface):
             'id': self.id,
             'email': self.email,
             'username': self.username,
-            'ipAddress': self.ip_address,
+            'ip_address': self.ip_address,
             'name': self.name,
             'data': self.data,
         }
 
+    def get_api_meta(self, meta, is_public=False):
+        return {
+            '': meta.get(''),
+            'id': meta.get('id'),
+            'email': meta.get('email'),
+            'username': meta.get('username'),
+            'ip_address': meta.get('ip_address'),
+            'name': meta.get('name'),
+            'data': meta.get('data'),
+        }
+
     def get_path(self):
         return 'sentry.interfaces.User'
 
diff --git a/tests/sentry/api/serializers/test_event.py b/tests/sentry/api/serializers/test_event.py
index 08c24038d5..f20ecfb607 100644
--- a/tests/sentry/api/serializers/test_event.py
+++ b/tests/sentry/api/serializers/test_event.py
@@ -35,6 +35,126 @@ class EventSerializerTest(TestCase):
         assert u'ü' in result['errors'][0]['message']
         assert result['errors'][0]['data'] == {'name': u'ü'}
 
+    def test_renamed_attributes(self):
+        # Only includes meta for simple top-level attributes
+        event = self.create_event(
+            data={
+                'extra': {'extra': True},
+                'modules': {'modules': True},
+                '_meta': {
+                    'extra': {'': {'err': ['extra error']}},
+                    'modules': {'': {'err': ['modules error']}},
+                }
+            }
+        )
+
+        result = serialize(event)
+        assert result['context'] == {'extra': True}
+        assert result['_meta']['context'] == {'': {'err': ['extra error']}}
+        assert result['packages'] == {'modules': True}
+        assert result['_meta']['packages'] == {'': {'err': ['modules error']}}
+
+    def test_message_interface(self):
+        event = self.create_event(
+            data={
+                'logentry': {'message': 'bar'},
+                '_meta': {
+                    'logentry': {
+                        'message': {'': {'err': ['some error']}},
+                    },
+                },
+            }
+        )
+
+        result = serialize(event)
+        assert result['message'] == 'bar'
+        assert result['_meta']['message'] == {'': {'err': ['some error']}}
+
+    def test_message_formatted(self):
+        event = self.create_event(
+            data={
+                'logentry': {'message': 'bar', 'formatted': 'baz'},
+                '_meta': {
+                    'logentry': {
+                        'formatted': {'': {'err': ['some error']}},
+                    },
+                },
+            }
+        )
+
+        result = serialize(event)
+        assert result['message'] == 'baz'
+        assert result['_meta']['message'] == {'': {'err': ['some error']}}
+
+    def test_message_legacy(self):
+        # TODO: This test case can be removed once validation is implemented by
+        # libsemaphore and enforced on all payloads
+        event = self.create_event(
+            data={
+                'message': 'foo',
+                '_meta': {
+                    'message': {'': {'err': ['some error']}},
+                },
+            }
+        )
+
+        # create_event automatically creates the logentry interface
+        del event.data['logentry']
+
+        result = serialize(event)
+        assert result['message'] == 'foo'
+        assert result['_meta']['message'] == {'': {'err': ['some error']}}
+
+    def test_tags_tuples(self):
+        event = self.create_event(
+            data={
+                'tags': [
+                    ['foo', 'foo'],
+                    ['bar', 'bar'],
+                ],
+                '_meta': {
+                    'tags': {
+                        '0': {
+                            '1': {'': {'err': ['foo error']}},
+                        },
+                        '1': {
+                            '1': {'': {'err': ['bar error']}},
+                        },
+                    },
+                },
+            }
+        )
+
+        result = serialize(event)
+        assert result['tags'][0]['value'] == 'bar'
+        assert result['tags'][1]['value'] == 'foo'
+        assert result['_meta']['tags']['0']['value'] == {'': {'err': ['bar error']}}
+        assert result['_meta']['tags']['1']['value'] == {'': {'err': ['foo error']}}
+
+    def test_tags_dict(self):
+        event = self.create_event(
+            data={
+                # Sentry normalizes this internally, it is actually passed in as
+                # object {"foo": "foo", "bar": "bar"}
+                'tags': [
+                    ['foo', 'foo'],
+                    ['bar', 'bar'],
+                ],
+                '_meta': {
+                    'tags': {
+                        'foo': {'': {'err': ['foo error']}},
+                        'bar': {'': {'err': ['bar error']}},
+                    },
+                },
+            }
+        )
+
+        result = serialize(event)
+        assert result['tags'][0]['value'] == 'bar'
+        assert result['tags'][1]['value'] == 'foo'
+        assert result['_meta']['tags']['0']['value'] == {'': {'err': ['bar error']}}
+        assert result['_meta']['tags']['1']['value'] == {'': {'err': ['foo error']}}
+
 
 class SharedEventSerializerTest(TestCase):
     def test_simple(self):
