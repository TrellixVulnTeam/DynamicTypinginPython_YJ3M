commit a34d7b902e31efcb6570033442beb70a02101d07
Author: William Mak <william@wmak.io>
Date:   Wed Jun 24 13:00:33 2020 -0400

    ref(discover): Snuba Error handling (#19499)
    
    * ref: Handling snuba errors a bit better
    - This catches errors from snuba a bit better, we should be worried if a
      response was valid and couldn't decode the json. But otherwise its
      just an error
    
    * ref: Creating a singular error handler for discover queries
    - This way all our discover endpoints can use this instead of rewriting
      this everytime, and so that they all have the same error handling when
      something goes wrong.
      - eg. right now if there's an invalid snuba query stats/meta would 500
        while eventsv2 would 400 as expected

diff --git a/src/sentry/api/bases/organization_events.py b/src/sentry/api/bases/organization_events.py
index 99fc140066..9b3f2fba2f 100644
--- a/src/sentry/api/bases/organization_events.py
+++ b/src/sentry/api/bases/organization_events.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from contextlib import contextmanager
 import sentry_sdk
 import six
 from rest_framework.exceptions import PermissionDenied
@@ -107,6 +108,38 @@ class OrganizationEventsEndpointBase(OrganizationEndpoint):
                 )
         return results
 
+    @contextmanager
+    def handle_query_errors(self):
+        try:
+            yield
+        except (discover.InvalidSearchQuery, snuba.QueryOutsideRetentionError) as error:
+            raise ParseError(detail=six.text_type(error))
+        except snuba.QueryIllegalTypeOfArgument:
+            raise ParseError(detail="Invalid query. Argument to function is wrong type.")
+        except snuba.SnubaError as error:
+            message = "Internal error. Please try again."
+            if isinstance(
+                error,
+                (
+                    snuba.RateLimitExceeded,
+                    snuba.QueryMemoryLimitExceeded,
+                    snuba.QueryTooManySimultaneous,
+                ),
+            ):
+                message = "Query timeout. Please try again. If the problem persists try a smaller date range or fewer projects."
+            elif isinstance(
+                error,
+                (
+                    snuba.UnqualifiedQueryError,
+                    snuba.QueryExecutionError,
+                    snuba.SchemaValidationError,
+                ),
+            ):
+                sentry_sdk.capture_exception(error)
+                message = "Internal error. Your query failed to run."
+
+            raise ParseError(detail=message)
+
 
 class OrganizationEventsV2EndpointBase(OrganizationEventsEndpointBase):
     def handle_results_with_meta(self, request, organization, project_ids, results):
@@ -157,7 +190,7 @@ class OrganizationEventsV2EndpointBase(OrganizationEventsEndpointBase):
         return results
 
     def get_event_stats_data(self, request, organization, get_event_stats, top_events=False):
-        try:
+        with self.handle_query_errors():
             with sentry_sdk.start_span(
                 op="discover.endpoint", description="base.stats_query_creation"
             ):
@@ -194,8 +227,7 @@ class OrganizationEventsV2EndpointBase(OrganizationEventsEndpointBase):
 
             with sentry_sdk.start_span(op="discover.endpoint", description="base.stats_query"):
                 result = get_event_stats(query_columns, query, params, rollup, reference_event)
-        except (discover.InvalidSearchQuery, snuba.QueryOutsideRetentionError) as error:
-            raise ParseError(detail=six.text_type(error))
+
         serializer = SnubaTSResultSerializer(organization, None, request.user)
 
         with sentry_sdk.start_span(op="discover.endpoint", description="base.stats_serialization"):
diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index c8231149e0..94c13da80c 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -20,7 +20,6 @@ from sentry.api.paginator import GenericOffsetPaginator
 from sentry.api.serializers import EventSerializer, serialize, SimpleEventSerializer
 from sentry import eventstore, features
 from sentry.snuba import discover
-from sentry.utils import snuba
 from sentry.utils.snuba import MAX_FIELDS
 from sentry.utils.http import absolute_uri
 from sentry.models.project import Project
@@ -157,7 +156,7 @@ class OrganizationEventsV2Endpoint(OrganizationEventsV2EndpointBase):
                 use_aggregate_conditions=True,
             )
 
-        try:
+        with self.handle_query_errors():
             return self.paginate(
                 request=request,
                 paginator=GenericOffsetPaginator(data_fn=data_fn),
@@ -165,30 +164,3 @@ class OrganizationEventsV2Endpoint(OrganizationEventsV2EndpointBase):
                     request, organization, params["project_id"], results
                 ),
             )
-        except (discover.InvalidSearchQuery, snuba.QueryOutsideRetentionError) as error:
-            raise ParseError(detail=six.text_type(error))
-        except snuba.QueryIllegalTypeOfArgument:
-            raise ParseError(detail="Invalid query. Argument to function is wrong type.")
-        except snuba.SnubaError as error:
-            message = "Internal error. Please try again."
-            if isinstance(
-                error,
-                (
-                    snuba.RateLimitExceeded,
-                    snuba.QueryMemoryLimitExceeded,
-                    snuba.QueryTooManySimultaneous,
-                ),
-            ):
-                message = "Query timeout. Please try again. If the problem persists try a smaller date range or fewer projects."
-            elif isinstance(
-                error,
-                (
-                    snuba.UnqualifiedQueryError,
-                    snuba.QueryExecutionError,
-                    snuba.SchemaValidationError,
-                ),
-            ):
-                sentry_sdk.capture_exception(error)
-                message = "Internal error. Your query failed to run."
-
-            raise ParseError(detail=message)
diff --git a/src/sentry/api/endpoints/organization_events_facets.py b/src/sentry/api/endpoints/organization_events_facets.py
index 105c16b2af..41d5e5c894 100644
--- a/src/sentry/api/endpoints/organization_events_facets.py
+++ b/src/sentry/api/endpoints/organization_events_facets.py
@@ -1,7 +1,6 @@
 from __future__ import absolute_import
 
 import sentry_sdk
-import six
 
 from collections import defaultdict
 from rest_framework.response import Response
@@ -9,7 +8,6 @@ from rest_framework.exceptions import ParseError
 
 from sentry.api.bases import OrganizationEventsEndpointBase, NoProjects
 from sentry.snuba import discover
-from sentry.utils import snuba
 from sentry import features, tagstore
 
 
@@ -27,14 +25,12 @@ class OrganizationEventsFacetsEndpoint(OrganizationEventsEndpointBase):
             self._validate_project_ids(request, organization, params)
 
         with sentry_sdk.start_span(op="discover.endpoint", description="discover_query"):
-            try:
+            with self.handle_query_errors():
                 facets = discover.get_facets(
                     query=request.GET.get("query"),
                     params=params,
                     referrer="api.organization-events-facets.top-tags",
                 )
-            except (discover.InvalidSearchQuery, snuba.QueryOutsideRetentionError) as error:
-                raise ParseError(detail=six.text_type(error))
 
         with sentry_sdk.start_span(op="discover.endpoint", description="populate_results") as span:
             span.set_data("facet_count", len(facets or []))
diff --git a/src/sentry/api/endpoints/organization_events_meta.py b/src/sentry/api/endpoints/organization_events_meta.py
index 6222117485..e02d172bb0 100644
--- a/src/sentry/api/endpoints/organization_events_meta.py
+++ b/src/sentry/api/endpoints/organization_events_meta.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 import re
 import sentry_sdk
-import six
 
 from rest_framework.response import Response
 from rest_framework.exceptions import ParseError
@@ -15,7 +14,6 @@ from sentry.api.event_search import parse_search_query
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.group import GroupSerializer
 from sentry.snuba import discover
-from sentry.utils import snuba
 
 
 class OrganizationEventsMetaEndpoint(OrganizationEventsEndpointBase):
@@ -28,15 +26,13 @@ class OrganizationEventsMetaEndpoint(OrganizationEventsEndpointBase):
                 return Response({"count": 0})
             params = self.quantize_date_params(request, params)
 
-        try:
+        with self.handle_query_errors():
             result = discover.query(
                 selected_columns=["count()"],
                 params=params,
                 query=request.query_params.get("query"),
                 referrer="api.organization-events-meta",
             )
-        except (discover.InvalidSearchQuery, snuba.QueryOutsideRetentionError) as error:
-            raise ParseError(detail=six.text_type(error))
 
         return Response({"count": result["data"][0]["count"]})
 
@@ -66,7 +62,7 @@ class OrganizationEventsRelatedIssuesEndpoint(OrganizationEventsEndpointBase, En
                     status=400,
                 )
 
-        try:
+        with self.handle_query_errors():
             with sentry_sdk.start_span(op="discover.endpoint", description="filter_creation"):
                 projects = self.get_projects(request, organization)
                 query_kwargs = build_query_params_from_request(
@@ -87,8 +83,6 @@ class OrganizationEventsRelatedIssuesEndpoint(OrganizationEventsEndpointBase, En
 
             with sentry_sdk.start_span(op="discover.endpoint", description="issue_search"):
                 results = search.query(**query_kwargs)
-        except discover.InvalidSearchQuery as err:
-            raise ParseError(detail=six.text_type(err))
 
         with sentry_sdk.start_span(op="discover.endpoint", description="serialize_results") as span:
             results = list(results)
diff --git a/src/sentry/api/endpoints/organization_tags.py b/src/sentry/api/endpoints/organization_tags.py
index 8890e5a3ee..9cdb52dc6d 100644
--- a/src/sentry/api/endpoints/organization_tags.py
+++ b/src/sentry/api/endpoints/organization_tags.py
@@ -14,11 +14,13 @@ class OrganizationTagsEndpoint(OrganizationEventsEndpointBase):
         except NoProjects:
             return Response([])
 
-        results = tagstore.get_tag_keys_for_projects(
-            filter_params["project_id"],
-            filter_params.get("environment"),
-            filter_params["start"],
-            filter_params["end"],
-            use_cache=request.GET.get("use_cache", "0") == "1",
-        )
+        with self.handle_query_errors():
+            results = tagstore.get_tag_keys_for_projects(
+                filter_params["project_id"],
+                filter_params.get("environment"),
+                filter_params["start"],
+                filter_params["end"],
+                use_cache=request.GET.get("use_cache", "0") == "1",
+            )
+
         return Response(serialize(results, request.user))
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index 19f81ef68b..93e128de05 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -5,6 +5,7 @@ from copy import deepcopy
 from contextlib import contextmanager
 from datetime import datetime, timedelta
 from dateutil.parser import parse as parse_datetime
+import logging
 import functools
 import os
 import pytz
@@ -37,6 +38,9 @@ from sentry.snuba.events import Columns
 from sentry.snuba.dataset import Dataset
 from sentry.utils.compat import map
 
+
+logger = logging.getLogger(__name__)
+
 # TODO remove this when Snuba accepts more than 500 issues
 MAX_ISSUES = 500
 MAX_HASHES = 5000
@@ -611,6 +615,9 @@ def bulk_raw_query(snuba_param_list, referrer=None):
         try:
             body = json.loads(response.data)
         except ValueError:
+            if response.status != 200:
+                logger.error("snuba.query.invalid-json")
+                raise SnubaError("Failed to parse snuba error response")
             raise UnexpectedResponseError(
                 u"Could not decode JSON response: {}".format(response.data)
             )
diff --git a/tests/snuba/api/endpoints/test_organization_events_facets.py b/tests/snuba/api/endpoints/test_organization_events_facets.py
index 1ea251a0da..9fa04f04d9 100644
--- a/tests/snuba/api/endpoints/test_organization_events_facets.py
+++ b/tests/snuba/api/endpoints/test_organization_events_facets.py
@@ -7,6 +7,7 @@ from datetime import timedelta
 from django.utils import timezone
 from django.core.urlresolvers import reverse
 from uuid import uuid4
+from rest_framework.exceptions import ParseError
 
 from sentry.testutils import APITestCase, SnubaTestCase
 from sentry.testutils.helpers.datetime import before_now, iso_format
@@ -423,6 +424,14 @@ class OrganizationEventsFacetsEndpointTest(SnubaTestCase, APITestCase):
             "detail": "Parse error at '\n\n\n\n' (column 1). This is commonly caused by unmatched parentheses. Enclose any text in double quotes."
         }
 
+    @mock.patch("sentry.snuba.discover.raw_query")
+    def test_handling_snuba_errors(self, mock_query):
+        mock_query.side_effect = ParseError("test")
+        with self.feature(self.feature_list):
+            response = self.client.get(self.url, format="json")
+
+        assert response.status_code == 400, response.content
+
     def test_environment(self):
         self.store_event(
             data={
diff --git a/tests/snuba/api/endpoints/test_organization_events_meta.py b/tests/snuba/api/endpoints/test_organization_events_meta.py
index 4b6070f251..7c07779680 100644
--- a/tests/snuba/api/endpoints/test_organization_events_meta.py
+++ b/tests/snuba/api/endpoints/test_organization_events_meta.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import mock
 
 from pytz import utc
+from rest_framework.exceptions import ParseError
 
 from django.core.urlresolvers import reverse
 
@@ -116,6 +117,14 @@ class OrganizationEventsMetaEndpoint(APITestCase, SnubaTestCase):
             )
         assert response.status_code == 400
 
+    @mock.patch("sentry.snuba.discover.raw_query")
+    def test_handling_snuba_errors(self, mock_query):
+        mock_query.side_effect = ParseError("test")
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(self.url, format="json")
+
+        assert response.status_code == 400, response.content
+
     @mock.patch("sentry.utils.snuba.quantize_time")
     def test_quantize_dates(self, mock_quantize):
         mock_quantize.return_value = before_now(days=1).replace(tzinfo=utc)
