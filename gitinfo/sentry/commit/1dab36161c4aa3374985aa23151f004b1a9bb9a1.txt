commit 1dab36161c4aa3374985aa23151f004b1a9bb9a1
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Nov 20 12:08:28 2015 -0800

    Allow users to authenticate when missing org access
    
    Fixes GH-2347

diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 38ed55024f..5c2d9bf3d7 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -31,6 +31,19 @@ class OrganizationMixin(object):
         Returns the currently active organization for the request or None
         if no organization.
         """
+
+        # TODO(dcramer): this is a huge hack, and we should refactor this
+        # it is currently needed to handle the is_auth_required check on
+        # OrganizationBase
+        active_organization = getattr(self, '_active_org', None)
+        cached_active_org = (
+            active_organization
+            and active_organization[0].slug == organization_slug
+            and active_organization[1] == request.user
+        )
+        if cached_active_org:
+            return active_organization[0]
+
         active_organization = None
 
         is_implicit = organization_slug is None
@@ -83,6 +96,8 @@ class OrganizationMixin(object):
             if active_organization.slug != request.session.get('activeorg'):
                 request.session['activeorg'] = active_organization.slug
 
+        self._active_org = (active_organization, request.user)
+
         return active_organization
 
     def _is_org_member(self, user, organization):
@@ -243,6 +258,29 @@ class OrganizationView(BaseView):
             return False
         return True
 
+    def is_auth_required(self, request, organization_slug=None, *args, **kwargs):
+        result = super(OrganizationView, self).is_auth_required(
+            request, *args, **kwargs
+        )
+        if result:
+            return result
+
+        # if the user is attempting to access an organization that *may* be
+        # accessible if they simply re-authenticate, we want to allow that
+        # this opens up a privacy hole, but the pros outweigh the cons
+        active_organization = self.get_active_organization(
+            request=request,
+            organization_slug=organization_slug,
+        )
+        if not active_organization:
+            try:
+                Organization.objects.get_from_cache(slug=organization_slug)
+            except Organization.DoesNotExist:
+                pass
+            else:
+                return True
+        return False
+
     def handle_permission_required(self, request, organization, *args, **kwargs):
         needs_link = (
             organization and request.user.is_authenticated()
diff --git a/tests/sentry/web/frontend/test_react_page.py b/tests/sentry/web/frontend/test_react_page.py
new file mode 100644
index 0000000000..58dc53951c
--- /dev/null
+++ b/tests/sentry/web/frontend/test_react_page.py
@@ -0,0 +1,44 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import TestCase
+
+
+class ReactPageViewTest(TestCase):
+    def test_renders_with_context(self):
+        org = self.create_organization(owner=self.user)
+        path = reverse('sentry-organization-home', args=[org.slug])
+
+        self.login_as(self.user)
+
+        resp = self.client.get(path)
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/bases/react.html')
+        assert resp.context['request']
+
+    def test_redirects_user_to_auth_without_membership(self):
+        org = self.create_organization(owner=self.user)
+        user = self.create_user('foo@example.com')
+
+        path = reverse('sentry-organization-home', args=[org.slug])
+
+        self.login_as(user)
+
+        resp = self.client.get(path)
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'http://testserver{}'.format(
+            reverse('sentry-auth-organization', args=[org.slug]),
+        )
+
+        # ensure we dont redirect to auth if its not a valid org
+        path = reverse('sentry-organization-home', args=['foobar'])
+
+        resp = self.client.get(path)
+
+        assert resp.status_code == 302
+        assert resp['Location'] != 'http://testserver{}'.format(
+            reverse('sentry-auth-organization', args=[org.slug]),
+        )
