commit 4a886b59c971453bfc71ae058a43dfa655461764
Author: adhiraj <693121+adhiraj@users.noreply.github.com>
Date:   Thu Jul 12 13:56:45 2018 -0700

    feat(assistant): Separate guides from support drawer (#9007)
    
    This separates the assistant cue and guides from the "Need Help?" bubble and moves the guides to the bottom center of the screen to make it more prominent. Also allows us to experiment with the placement in the future.
    
    - Move guide-handling logic from AssistantHelper to GuideDrawer
    - Refactor CSS

diff --git a/src/sentry/static/sentry/app/actionCreators/guides.jsx b/src/sentry/static/sentry/app/actionCreators/guides.jsx
index d5c90d4c1c..379d81e9a6 100644
--- a/src/sentry/static/sentry/app/actionCreators/guides.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/guides.jsx
@@ -25,8 +25,8 @@ export function nextStep() {
   GuideActions.nextStep();
 }
 
-export function closeGuideOrSupport() {
-  GuideActions.closeGuideOrSupport();
+export function closeGuide() {
+  GuideActions.closeGuide();
 }
 
 export function recordFinish(guideId, useful) {
diff --git a/src/sentry/static/sentry/app/actions/guideActions.jsx b/src/sentry/static/sentry/app/actions/guideActions.jsx
index e3db8d5f17..c833b80204 100644
--- a/src/sentry/static/sentry/app/actions/guideActions.jsx
+++ b/src/sentry/static/sentry/app/actions/guideActions.jsx
@@ -1,7 +1,7 @@
 import Reflux from 'reflux';
 
 let GuideActions = Reflux.createActions([
-  'closeGuideOrSupport',
+  'closeGuide',
   'fetchSucceeded',
   'nextStep',
   'registerAnchor',
diff --git a/src/sentry/static/sentry/app/components/assistant/assistantContainer.jsx b/src/sentry/static/sentry/app/components/assistant/assistantContainer.jsx
deleted file mode 100644
index e66f13246b..0000000000
--- a/src/sentry/static/sentry/app/components/assistant/assistantContainer.jsx
+++ /dev/null
@@ -1,19 +0,0 @@
-import styled from 'react-emotion';
-
-const AssistantContainer = styled('div')`
-  position: fixed;
-  z-index: ${p => p.theme.zIndex.modal};
-  width: 25vw;
-  max-width: 450px;
-  min-width: 300px;
-  bottom: 1vw;
-  right: 1vw;
-  background: ${p => p.theme.offWhite};
-  border: 1px solid ${p => p.theme.borderLight};
-  border-radius: 1.45em;
-  color: ${p => p.theme.purple};
-  font-weight: bold;
-  box-shadow: ${p => p.theme.dropShadowHeavy};
-`;
-
-export default AssistantContainer;
diff --git a/src/sentry/static/sentry/app/components/assistant/closeIcon.jsx b/src/sentry/static/sentry/app/components/assistant/closeIcon.jsx
deleted file mode 100644
index c8ef27efcf..0000000000
--- a/src/sentry/static/sentry/app/components/assistant/closeIcon.jsx
+++ /dev/null
@@ -1,13 +0,0 @@
-import React from 'react';
-import styled from 'react-emotion';
-import InlineSvg from 'app/components/inlineSvg';
-
-const CloseIcon = styled(props => <InlineSvg src="icon-close-lg" {...props} />)`
-  stroke-width: 3px;
-  width: 0.75em;
-  height: 0.75em;
-  margin: 0 0.875em 0 0.66em;
-  cursor: pointer;
-`;
-
-export default CloseIcon;
diff --git a/src/sentry/static/sentry/app/components/assistant/cueIcon.jsx b/src/sentry/static/sentry/app/components/assistant/cueIcon.jsx
deleted file mode 100644
index c7558973ae..0000000000
--- a/src/sentry/static/sentry/app/components/assistant/cueIcon.jsx
+++ /dev/null
@@ -1,16 +0,0 @@
-import React from 'react';
-import styled from 'react-emotion';
-import InlineSvg from 'app/components/inlineSvg';
-
-const QuestionMarkIcon = styled(({hasGuide, ...props}) => (
-  <InlineSvg
-    src={hasGuide ? 'icon-circle-exclamation' : 'icon-circle-question'}
-    {...props}
-  />
-))`
-  width: 2.75em;
-  height: 2.75em;
-  color: ${p => (p.hasGuide ? p.theme.greenLight : p.theme.purple)};
-`;
-
-export default QuestionMarkIcon;
diff --git a/src/sentry/static/sentry/app/components/assistant/guideDrawer.jsx b/src/sentry/static/sentry/app/components/assistant/guideDrawer.jsx
index abb574b64e..75df6cc576 100644
--- a/src/sentry/static/sentry/app/components/assistant/guideDrawer.jsx
+++ b/src/sentry/static/sentry/app/components/assistant/guideDrawer.jsx
@@ -1,70 +1,126 @@
-import PropTypes from 'prop-types';
 import React from 'react';
+import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 import Button from 'app/components/buttons/button';
+import GuideStore from 'app/stores/guideStore';
 import {t} from 'app/locale';
-import {recordFinish, nextStep} from 'app/actionCreators/guides';
-import CueIcon from 'app/components/assistant/cueIcon';
-import CloseIcon from 'app/components/assistant/closeIcon';
-import AssistantContainer from 'app/components/assistant/assistantContainer';
-
-// GuideDrawer is what slides up when the user clicks on a guide cue.
-export default class GuideDrawer extends React.Component {
-  static propTypes = {
-    // `guide` must be a valid guide.
-    guide: PropTypes.object.isRequired,
-    // `step` must be > 0.
-    step: PropTypes.number.isRequired,
-    onFinish: PropTypes.func.isRequired,
-    onDismiss: PropTypes.func.isRequired,
-    orgSlug: PropTypes.string,
-    projectSlug: PropTypes.string,
-  };
-
-  handleFinish = useful => {
-    recordFinish(this.props.guide.id, useful);
-    this.props.onFinish();
-  };
+import {
+  closeGuide,
+  fetchGuides,
+  nextStep,
+  recordDismiss,
+  recordFinish,
+} from 'app/actionCreators/guides';
+import {
+  AssistantContainer,
+  CloseIcon,
+  CueContainer,
+  CueIcon,
+  CueText,
+} from 'app/components/assistant/styles';
+
+/* GuideDrawer is what slides up when the user clicks on a guide cue. */
+const GuideDrawer = createReactClass({
+  displayName: 'GuideDrawer',
+
+  mixins: [Reflux.listenTo(GuideStore, 'onGuideStateChange')],
+
+  getInitialState() {
+    return {
+      currentGuide: null,
+      currentStep: 0,
+      currentOrgSlug: null,
+      currentProjectSlug: null,
+    };
+  },
+
+  componentDidMount() {
+    fetchGuides();
+  },
+
+  onGuideStateChange(data) {
+    this.setState({
+      currentGuide: data.currentGuide,
+      currentStep: data.currentStep,
+      currentOrgSlug: data.currentOrg ? data.currentOrg.slug : null,
+      currentProjectSlug: data.currentProject ? data.currentProject.slug : null,
+    });
+  },
+
+  /* Terminology:
+   - A guide can be FINISHED by answering whether or not is was useful in the last step.
+   - A guide can be DISMISSED by x-ing out of it at any time (including when it's cued).
+   - In both cases we consider it CLOSED.
+  */
+  handleFinish(useful) {
+    recordFinish(this.state.currentGuide.id, useful);
+    closeGuide();
+  },
+
+  handleDismiss(e) {
+    e.stopPropagation();
+    recordDismiss(this.state.currentGuide.id, this.state.currentStep);
+    closeGuide();
+  },
 
   interpolate(template, variables) {
     let regex = /\${([^{]+)}/g;
     return template.replace(regex, (match, g1) => {
       return variables[g1.trim()];
     });
-  }
+  },
 
   render() {
+    let {currentGuide, currentStep} = this.state;
+
+    if (!currentGuide) {
+      return null;
+    }
+
+    if (currentStep === 0) {
+      return (
+        <StyledCueContainer onClick={nextStep} className="assistant-cue">
+          {<CueIcon hasGuide={true} />}
+          <StyledCueText>{currentGuide.cue}</StyledCueText>
+          <div style={{display: 'flex'}} onClick={this.handleDismiss}>
+            <CloseIcon />
+          </div>
+        </StyledCueContainer>
+      );
+    }
+
     let messageVariables = {
-      orgSlug: this.props.orgSlug,
-      projectSlug: this.props.projectSlug,
+      orgSlug: this.state.currentOrgSlug,
+      projectSlug: this.state.currentProjectSlug,
     };
 
     return (
-      <StyledAssistantContainer>
-        <StyledAssistantInputRow>
+      <GuideContainer>
+        <GuideInputRow>
           <CueIcon hasGuide={true} />
-          <StyledTitle>{this.props.guide.steps[this.props.step - 1].title}</StyledTitle>
-          {this.props.step < this.props.guide.steps.length && (
+          <StyledTitle>{currentGuide.steps[currentStep - 1].title}</StyledTitle>
+          {currentStep < currentGuide.steps.length && (
             <div
               className="close-button"
               style={{display: 'flex'}}
-              onClick={this.props.onDismiss}
+              onClick={this.handleDismiss}
             >
               <CloseIcon />
             </div>
           )}
-        </StyledAssistantInputRow>
+        </GuideInputRow>
         <StyledContent>
           <div
             dangerouslySetInnerHTML={{
               __html: this.interpolate(
-                this.props.guide.steps[this.props.step - 1].message,
+                currentGuide.steps[currentStep - 1].message,
                 messageVariables
               ),
             }}
           />
           <div style={{marginTop: '1em'}}>
-            {this.props.step < this.props.guide.steps.length ? (
+            {currentStep < currentGuide.steps.length ? (
               <div>
                 <Button priority="success" size="small" onClick={nextStep}>
                   {t('Next')} &rarr;
@@ -92,19 +148,35 @@ export default class GuideDrawer extends React.Component {
             )}
           </div>
         </StyledContent>
-      </StyledAssistantContainer>
+      </GuideContainer>
     );
-  }
-}
+  },
+});
 
-const StyledAssistantContainer = styled(AssistantContainer)`
+const StyledCueText = styled(CueText)`
+  width: auto;
+  opacity: 1;
+  margin-left: 8px;
+`;
+
+const StyledCueContainer = styled(CueContainer)`
+  right: 50%;
+  transform: translateX(50%);
+  background-color: ${p => p.theme.greenDark};
+  border-color: ${p => p.theme.greenLight};
+  color: ${p => p.theme.offWhite};
+`;
+
+const GuideContainer = styled(AssistantContainer)`
   background-color: ${p => p.theme.greenDark};
   border-color: ${p => p.theme.greenLight};
   color: ${p => p.theme.offWhite};
   height: auto;
+  right: 50%;
+  transform: translateX(50%);
 `;
 
-const StyledAssistantInputRow = styled('div')`
+const GuideInputRow = styled('div')`
   display: flex;
   align-items: center;
 `;
@@ -123,3 +195,5 @@ const StyledContent = styled('div')`
     color: ${p => p.theme.greenLight};
   }
 `;
+
+export default GuideDrawer;
diff --git a/src/sentry/static/sentry/app/components/assistant/helper.jsx b/src/sentry/static/sentry/app/components/assistant/helper.jsx
index b8582e2648..35c3f01f39 100644
--- a/src/sentry/static/sentry/app/components/assistant/helper.jsx
+++ b/src/sentry/static/sentry/app/components/assistant/helper.jsx
@@ -1,155 +1,24 @@
 import React from 'react';
-import Reflux from 'reflux';
-import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
-import {t} from 'app/locale';
-import {
-  closeGuideOrSupport,
-  fetchGuides,
-  nextStep,
-  recordDismiss,
-} from 'app/actionCreators/guides';
-import SupportDrawer from 'app/components/assistant/supportDrawer';
 import GuideDrawer from 'app/components/assistant/guideDrawer';
-import GuideStore from 'app/stores/guideStore';
-import CueIcon from 'app/components/assistant/cueIcon';
-import AssistantContainer from 'app/components/assistant/assistantContainer';
-import CloseIcon from 'app/components/assistant/closeIcon';
-
-// AssistantHelper is responsible for rendering the cue message, guide drawer and support drawer.
-const AssistantHelper = createReactClass({
-  displayName: 'AssistantHelper',
-
-  mixins: [Reflux.listenTo(GuideStore, 'onGuideStateChange')],
-
-  getInitialState() {
-    return {
-      currentGuide: null,
-      // currentStep is applicable to the Need-Help button too. When currentGuide
-      // is null, if currentStep is 0 the Need-Help button is cued, and if it's > 0
-      // the support widget is open.
-      currentStep: 0,
-      currentOrgSlug: null,
-      currentProjectSlug: null,
-    };
-  },
-
-  componentDidMount() {
-    fetchGuides();
-  },
-
-  onGuideStateChange(data) {
-    this.setState({
-      currentGuide: data.currentGuide,
-      currentStep: data.currentStep,
-      currentOrgSlug: data.currentOrg ? data.currentOrg.slug : null,
-      currentProjectSlug: data.currentProject ? data.currentProject.slug : null,
-    });
-  },
-
-  // Terminology:
-  // - A guide can be FINISHED by answering whether or not is was useful in the last step.
-  // - A guide can be DISMISSED by x-ing out of it at any time (including when it's cued).
-  // In both cases we consider it CLOSED.
-  handleGuideDismiss(e) {
-    e.stopPropagation();
-    recordDismiss(this.state.currentGuide.id, this.state.currentStep);
-    closeGuideOrSupport();
-  },
+import SupportDrawer from 'app/components/assistant/supportDrawer';
 
+/* AssistantHelper is responsible for rendering the guide and support drawers. */
+export default class AssistantHelper extends React.Component {
   render() {
-    let {currentGuide, currentStep} = this.state;
-    const cueText = (currentGuide && currentGuide.cue) || t('Need Help?');
-
     return (
       <StyledHelper>
-        {currentGuide !== null &&
-          currentStep > 0 && (
-            <GuideDrawer
-              guide={currentGuide}
-              step={currentStep}
-              onFinish={closeGuideOrSupport}
-              onDismiss={this.handleGuideDismiss}
-              orgSlug={this.state.currentOrgSlug}
-              projectSlug={this.state.currentProjectSlug}
-            />
-          )}
-
-        {currentGuide === null &&
-          currentStep > 0 && <SupportDrawer onClose={closeGuideOrSupport} />}
-
-        {!currentStep && (
-          <StyledAssistantContainer
-            onClick={nextStep}
-            className="assistant-cue"
-            hasGuide={currentGuide}
-          >
-            <CueIcon hasGuide={currentGuide} />
-            <StyledCueText hasGuide={currentGuide}>{cueText}</StyledCueText>
-            {currentGuide && (
-              <div style={{display: 'flex'}} onClick={this.handleGuideDismiss}>
-                <CloseIcon />
-              </div>
-            )}
-          </StyledAssistantContainer>
-        )}
+        <SupportDrawer />
+        <GuideDrawer />
       </StyledHelper>
     );
-  },
-});
+  }
+}
 
-//this globally controls the size of the component
+/* this globally controls the size of the component */
 const StyledHelper = styled('div')`
   font-size: 1.4rem;
   @media (max-width: 600px) {
     display: none;
   }
 `;
-
-const StyledCueText = styled('span')`
-  width: 0px;
-  overflow: hidden;
-  opacity: 0;
-  transition: 0.2s all;
-  white-space: nowrap;
-  color: ${p => p.purpleDark};
-
-  ${p =>
-    p.hasGuide &&
-    `
-    width: auto;
-    opacity: 1;
-    margin-left: 8px;
-  `};
-`;
-
-const StyledAssistantContainer = styled(AssistantContainer)`
-  display: flex;
-  align-items: center;
-  cursor: pointer;
-  max-width: 300px;
-  min-width: 0;
-  width: auto;
-
-  &:hover ${StyledCueText} {
-    ${p =>
-      !p.hasGuide &&
-      `
-      width: 6em;
-      // this is roughly long enough for the copy 'need help?'
-      // at any base font size. if you change the copy, change this value
-      opacity: 1;
-      margin: 0 0.5em;
-    `};
-  }
-
-  ${p =>
-    p.hasGuide &&
-    `
-    background-color: ${p.theme.greenDark};
-    border-color: ${p.theme.greenLight};
-    color: ${p.theme.offWhite};
-    `};
-`;
-
-export default AssistantHelper;
diff --git a/src/sentry/static/sentry/app/components/assistant/styles.jsx b/src/sentry/static/sentry/app/components/assistant/styles.jsx
new file mode 100644
index 0000000000..b6017e3853
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/assistant/styles.jsx
@@ -0,0 +1,53 @@
+import React from 'react';
+import styled from 'react-emotion';
+import InlineSvg from 'app/components/inlineSvg';
+
+/* styles common to the guide and support cue/drawer. */
+const AssistantContainer = styled('div')`
+  position: fixed;
+  z-index: ${p => p.theme.zIndex.modal};
+  width: 25vw;
+  max-width: 450px;
+  min-width: 300px;
+  bottom: 1vw;
+  border-radius: 1.45em;
+  font-weight: bold;
+  box-shadow: ${p => p.theme.dropShadowHeavy};
+`;
+
+const CueContainer = styled(AssistantContainer)`
+  display: flex;
+  align-items: center;
+  cursor: pointer;
+  max-width: none;
+  min-width: 0;
+  width: auto;
+  height: 2.75em;
+`;
+
+const CueIcon = styled(({hasGuide, ...props}) => (
+  <InlineSvg
+    src={hasGuide ? 'icon-circle-exclamation' : 'icon-circle-question'}
+    {...props}
+  />
+))`
+  width: 2.75em;
+  height: 2.75em;
+  color: ${p => (p.hasGuide ? p.theme.greenLight : p.theme.purple)};
+`;
+
+const CloseIcon = styled(props => <InlineSvg src="icon-close-lg" {...props} />)`
+  stroke-width: 3px;
+  width: 0.75em;
+  height: 0.75em;
+  margin: 0 0.875em 0 0.66em;
+  cursor: pointer;
+`;
+
+const CueText = styled('span')`
+  overflow: hidden;
+  transition: 0.2s all;
+  white-space: nowrap;
+`;
+
+export {AssistantContainer, CueContainer, CueIcon, CueText, CloseIcon};
diff --git a/src/sentry/static/sentry/app/components/assistant/supportDrawer.jsx b/src/sentry/static/sentry/app/components/assistant/supportDrawer.jsx
index 6a961a0198..0246a8398b 100644
--- a/src/sentry/static/sentry/app/components/assistant/supportDrawer.jsx
+++ b/src/sentry/static/sentry/app/components/assistant/supportDrawer.jsx
@@ -1,4 +1,3 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 import _ from 'lodash';
 import createReactClass from 'create-react-class';
@@ -8,9 +7,13 @@ import {t} from 'app/locale';
 import analytics from 'app/utils/analytics';
 import ExternalLink from 'app/components/externalLink';
 import HookStore from 'app/stores/hookStore';
-import CueIcon from 'app/components/assistant/cueIcon';
-import CloseIcon from 'app/components/assistant/closeIcon';
-import AssistantContainer from 'app/components/assistant/assistantContainer';
+import {
+  AssistantContainer,
+  CloseIcon,
+  CueContainer,
+  CueIcon,
+  CueText,
+} from 'app/components/assistant/styles';
 import Input from 'app/views/settings/components/forms/controls/input';
 import InlineSvg from 'app/components/inlineSvg';
 
@@ -18,15 +21,12 @@ import InlineSvg from 'app/components/inlineSvg';
 const SupportDrawer = createReactClass({
   displayName: 'SupportDrawer',
 
-  propTypes: {
-    onClose: PropTypes.func.isRequired,
-  },
-
   getInitialState() {
     return {
       inputVal: '',
       docResults: [],
       helpcenterResults: [],
+      isOpen: false,
     };
   },
 
@@ -101,9 +101,9 @@ const SupportDrawer = createReactClass({
     let results = helpcenterResults.concat(docsResults);
     let hasResults = results && results.length > 0;
 
-    return (
-      <StyledAssistantContainer hasResults={hasResults}>
-        <StyledAssistantInputRow>
+    return this.state.isOpen ? (
+      <SupportContainer hasResults={hasResults}>
+        <SupportInputRow>
           <CueIcon />
           <StyledSearchContainer>
             <StyledSearchIcon src="icon-search" />
@@ -116,28 +116,60 @@ const SupportDrawer = createReactClass({
             />
             <div
               className="close-button"
-              onClick={this.props.onClose}
+              onClick={() => this.setState({isOpen: false})}
               style={{display: 'flex'}}
             >
               <CloseIcon />
             </div>
           </StyledSearchContainer>
-        </StyledAssistantInputRow>
+        </SupportInputRow>
         {hasResults && <StyledResults>{results}</StyledResults>}
         {HookStore.get('assistant:support-button').map(cb => cb(this.state.inputVal))}
-      </StyledAssistantContainer>
+      </SupportContainer>
+    ) : (
+      <StyledCueContainer
+        onClick={() => this.setState({isOpen: true})}
+        className="assistant-cue"
+      >
+        <CueIcon hasGuide={false} />
+        <StyledCueText>{t('Need Help?')}</StyledCueText>
+      </StyledCueContainer>
     );
   },
 });
 
-const StyledAssistantContainer = styled(AssistantContainer)`
+const StyledCueText = styled(CueText)`
+  width: 0px;
+  opacity: 0;
+`;
+
+const StyledCueContainer = styled(CueContainer)`
+  background: ${p => p.theme.offWhite};
+  right: 1vw;
+  color: ${p => p.theme.purple};
+  border: 1px solid ${p => p.theme.borderLight};
+  &:hover ${StyledCueText} {
+    width: 6em;
+    /* this is roughly long enough for the copy 'need help?'
+       at any base font size. if you change the copy, change this value
+    */
+    opacity: 1;
+    margin: 0 0.5em;
+  }
+`;
+
+const SupportContainer = styled(AssistantContainer)`
   display: flex;
   flex-direction: column;
   transition: 0.1s height;
   ${p => (p.hasResults ? 'height: 300px' : '')};
+  right: 1vw;
+  background: ${p => p.theme.offWhite};
+  color: ${p => p.theme.purple};
+  border: 1px solid ${p => p.theme.borderLight};
 `;
 
-const StyledAssistantInputRow = styled('div')`
+const SupportInputRow = styled('div')`
   display: flex;
   align-items: center;
 `;
diff --git a/src/sentry/static/sentry/app/stores/guideStore.jsx b/src/sentry/static/sentry/app/stores/guideStore.jsx
index 6ebcb2afe7..6f9989bf15 100644
--- a/src/sentry/static/sentry/app/stores/guideStore.jsx
+++ b/src/sentry/static/sentry/app/stores/guideStore.jsx
@@ -26,7 +26,7 @@ const GuideStore = Reflux.createStore({
       prevGuide: null,
     };
     this.listenTo(GuideActions.fetchSucceeded, this.onFetchSucceeded);
-    this.listenTo(GuideActions.closeGuideOrSupport, this.onCloseGuideOrSupport);
+    this.listenTo(GuideActions.closeGuide, this.onCloseGuide);
     this.listenTo(GuideActions.nextStep, this.onNextStep);
     this.listenTo(GuideActions.registerAnchor, this.onRegisterAnchor);
     this.listenTo(GuideActions.unregisterAnchor, this.onUnregisterAnchor);
@@ -62,16 +62,13 @@ const GuideStore = Reflux.createStore({
     this.updateCurrentGuide();
   },
 
-  // This handles both closing a guide and the support drawer.
-  onCloseGuideOrSupport() {
+  onCloseGuide() {
     let {currentGuide} = this.state;
-    if (currentGuide) {
-      this.state.guides[
-        Object.keys(this.state.guides).find(key => {
-          return this.state.guides[key].id == currentGuide.id;
-        })
-      ].seen = true;
-    }
+    this.state.guides[
+      Object.keys(this.state.guides).find(key => {
+        return this.state.guides[key].id == currentGuide.id;
+      })
+    ].seen = true;
     // Don't continue to force show if the user dismissed the guide.
     this.state.forceShow = false;
     this.updateCurrentGuide();
diff --git a/tests/js/spec/components/assistant/__snapshots__/guideDrawer.spec.jsx.snap b/tests/js/spec/components/assistant/__snapshots__/guideDrawer.spec.jsx.snap
index 9e843edaea..0252a81c17 100644
--- a/tests/js/spec/components/assistant/__snapshots__/guideDrawer.spec.jsx.snap
+++ b/tests/js/spec/components/assistant/__snapshots__/guideDrawer.spec.jsx.snap
@@ -1,9 +1,9 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
 exports[`GuideDrawer gets dismissed 1`] = `
-<StyledAssistantContainer>
-  <StyledAssistantInputRow>
-    <QuestionMarkIcon
+<GuideContainer>
+  <GuideInputRow>
+    <CueIcon
       hasGuide={true}
     />
     <StyledTitle>
@@ -11,7 +11,7 @@ exports[`GuideDrawer gets dismissed 1`] = `
     </StyledTitle>
     <div
       className="close-button"
-      onClick={[MockFunction]}
+      onClick={[Function]}
       style={
         Object {
           "display": "flex",
@@ -20,12 +20,12 @@ exports[`GuideDrawer gets dismissed 1`] = `
     >
       <CloseIcon />
     </div>
-  </StyledAssistantInputRow>
+  </GuideInputRow>
   <StyledContent>
     <div
       dangerouslySetInnerHTML={
         Object {
-          "__html": "Message 1 test",
+          "__html": "Message 1 testorg",
         }
       }
     />
@@ -49,19 +49,43 @@ exports[`GuideDrawer gets dismissed 1`] = `
       </div>
     </div>
   </StyledContent>
-</StyledAssistantContainer>
+</GuideContainer>
+`;
+
+exports[`GuideDrawer renders drawer 1`] = `
+<StyledCueContainer
+  className="assistant-cue"
+  onClick={[Function]}
+>
+  <CueIcon
+    hasGuide={true}
+  />
+  <StyledCueText>
+    Click here for a tour of the issue page
+  </StyledCueText>
+  <div
+    onClick={[Function]}
+    style={
+      Object {
+        "display": "flex",
+      }
+    }
+  >
+    <CloseIcon />
+  </div>
+</StyledCueContainer>
 `;
 
 exports[`GuideDrawer renders next step 1`] = `
-<StyledAssistantContainer>
-  <StyledAssistantInputRow>
-    <QuestionMarkIcon
+<GuideContainer>
+  <GuideInputRow>
+    <CueIcon
       hasGuide={true}
     />
     <StyledTitle>
       2. Title 2
     </StyledTitle>
-  </StyledAssistantInputRow>
+  </GuideInputRow>
   <StyledContent>
     <div
       dangerouslySetInnerHTML={
@@ -113,5 +137,5 @@ exports[`GuideDrawer renders next step 1`] = `
       </div>
     </div>
   </StyledContent>
-</StyledAssistantContainer>
+</GuideContainer>
 `;
diff --git a/tests/js/spec/components/assistant/__snapshots__/helper.spec.jsx.snap b/tests/js/spec/components/assistant/__snapshots__/helper.spec.jsx.snap
deleted file mode 100644
index e5d574ee7e..0000000000
--- a/tests/js/spec/components/assistant/__snapshots__/helper.spec.jsx.snap
+++ /dev/null
@@ -1,54 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`Helper renders cue 1`] = `
-<StyledHelper>
-  <StyledAssistantContainer
-    className="assistant-cue"
-    hasGuide={null}
-    onClick={[Function]}
-  >
-    <QuestionMarkIcon
-      hasGuide={null}
-    />
-    <StyledCueText
-      hasGuide={null}
-    >
-      Need Help?
-    </StyledCueText>
-  </StyledAssistantContainer>
-</StyledHelper>
-`;
-
-exports[`Helper renders guide drawer 1`] = `
-<StyledHelper>
-  <GuideDrawer
-    guide={
-      Object {
-        "cue": "Click here for a tour of the issue page",
-        "id": 1,
-        "page": "issue",
-        "required_targets": Array [
-          "target 1",
-        ],
-        "steps": Array [
-          Object {
-            "message": "Message 1",
-            "target": "target 1",
-            "title": "1. Title 1",
-          },
-          Object {
-            "message": "Message 2",
-            "target": "target 2",
-            "title": "2. Title 2",
-          },
-        ],
-      }
-    }
-    onDismiss={[Function]}
-    onFinish={[Function]}
-    orgSlug={null}
-    projectSlug={null}
-    step={1}
-  />
-</StyledHelper>
-`;
diff --git a/tests/js/spec/components/assistant/__snapshots__/supportDrawer.spec.jsx.snap b/tests/js/spec/components/assistant/__snapshots__/supportDrawer.spec.jsx.snap
index 2a7c73568c..542b143ca4 100644
--- a/tests/js/spec/components/assistant/__snapshots__/supportDrawer.spec.jsx.snap
+++ b/tests/js/spec/components/assistant/__snapshots__/supportDrawer.spec.jsx.snap
@@ -1,34 +1,15 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
-exports[`SupportDrawer renders 1`] = `
-<StyledAssistantContainer
-  hasResults={false}
+exports[`SupportDrawer renders cue 1`] = `
+<StyledCueContainer
+  className="assistant-cue"
+  onClick={[Function]}
 >
-  <StyledAssistantInputRow>
-    <QuestionMarkIcon />
-    <StyledSearchContainer>
-      <StyledSearchIcon
-        src="icon-search"
-      />
-      <StyledInput
-        autoFocus={true}
-        onChange={[Function]}
-        placeholder="Search FAQs and docs..."
-        type="text"
-        value=""
-      />
-      <div
-        className="close-button"
-        onClick={[Function]}
-        style={
-          Object {
-            "display": "flex",
-          }
-        }
-      >
-        <CloseIcon />
-      </div>
-    </StyledSearchContainer>
-  </StyledAssistantInputRow>
-</StyledAssistantContainer>
+  <CueIcon
+    hasGuide={false}
+  />
+  <StyledCueText>
+    Need Help?
+  </StyledCueText>
+</StyledCueContainer>
 `;
diff --git a/tests/js/spec/components/assistant/guideDrawer.spec.jsx b/tests/js/spec/components/assistant/guideDrawer.spec.jsx
index 3e6091b632..13e346424a 100644
--- a/tests/js/spec/components/assistant/guideDrawer.spec.jsx
+++ b/tests/js/spec/components/assistant/guideDrawer.spec.jsx
@@ -15,51 +15,77 @@ describe('GuideDrawer', function() {
     ],
   };
 
+  beforeEach(function() {
+    MockApiClient.addMockResponse({
+      url: '/assistant/',
+    });
+    MockApiClient.addMockResponse({
+      method: 'PUT',
+      url: '/assistant/',
+    });
+  });
+
+  it('renders drawer', function() {
+    const wrapper = shallow(<GuideDrawer />);
+    const component = wrapper.instance();
+    component.onGuideStateChange({
+      currentGuide: data,
+      currentStep: 0,
+    });
+    wrapper.update();
+    wrapper
+      .find('.assistant-cue')
+      .first()
+      .simulate('click');
+    expect(wrapper).toMatchSnapshot();
+  });
+
   it('gets dismissed', function() {
-    let mock = jest.fn();
-    let mock2 = jest.fn();
-    let slug = 'test';
-    let wrapper = shallow(
-      <GuideDrawer
-        guide={data}
-        step={1}
-        onFinish={mock}
-        onDismiss={mock2}
-        orgSlug={slug}
-      />
-    );
+    let wrapper = shallow(<GuideDrawer />);
+    const component = wrapper.instance();
+    component.onGuideStateChange({
+      currentGuide: data,
+      currentStep: 1,
+      currentOrg: {slug: 'testorg'},
+    });
+    wrapper.update();
     expect(wrapper).toMatchSnapshot();
+
+    let closeMock = Client.addMockResponse({
+      url: '/assistant/',
+      method: 'PUT',
+    });
     wrapper
       .find('.close-button')
       .last()
-      .simulate('click');
-    expect(mock2).toHaveBeenCalled();
+      .simulate('click', {stopPropagation: () => {}});
+    expect(closeMock).toHaveBeenCalledWith(
+      '/assistant/',
+      expect.objectContaining({
+        method: 'PUT',
+        data: {
+          guide_id: 1,
+          status: 'dismissed',
+        },
+      })
+    );
   });
 
   it('renders next step', function() {
-    let mock = jest.fn();
-    let mock2 = jest.fn();
-    let slug = 'test';
-    let wrapper = shallow(
-      <GuideDrawer
-        guide={data}
-        step={2}
-        onFinish={mock}
-        onDismiss={mock2}
-        orgSlug={slug}
-      />
-    );
+    let wrapper = shallow(<GuideDrawer />);
+    const component = wrapper.instance();
+    component.onGuideStateChange({
+      currentGuide: data,
+      currentStep: 2,
+      currentOrg: {slug: 'testorg'},
+    });
+    wrapper.update();
     expect(wrapper).toMatchSnapshot();
 
     // Mark as useful.
     let usefulMock = Client.addMockResponse({
       url: '/assistant/',
       method: 'PUT',
-      data: {
-        guide_id: 1,
-        status: 'viewed',
-        useful: true,
-      },
     });
     wrapper
       .find('Button')
diff --git a/tests/js/spec/components/assistant/helper.spec.jsx b/tests/js/spec/components/assistant/helper.spec.jsx
deleted file mode 100644
index b3c377c763..0000000000
--- a/tests/js/spec/components/assistant/helper.spec.jsx
+++ /dev/null
@@ -1,52 +0,0 @@
-import React from 'react';
-import {shallow, mount} from 'enzyme';
-import AssistantHelper from 'app/components/assistant/helper';
-
-describe('Helper', function() {
-  beforeEach(function() {
-    MockApiClient.addMockResponse({
-      url: '/assistant/',
-    });
-  });
-
-  it('renders cue', function() {
-    let wrapper = shallow(<AssistantHelper />);
-    expect(wrapper).toMatchSnapshot();
-  });
-
-  it('renders support drawer', async function() {
-    let wrapper = mount(<AssistantHelper />, TestStubs.routerContext());
-    wrapper
-      .find('.assistant-cue')
-      .first()
-      .simulate('click');
-    await tick();
-    wrapper.update();
-    expect(wrapper.find('SupportDrawer')).toHaveLength(1);
-  });
-
-  it('renders guide drawer', function() {
-    const wrapper = shallow(<AssistantHelper />);
-    const component = wrapper.instance();
-    component.onGuideStateChange({
-      currentGuide: {
-        cue: 'Click here for a tour of the issue page',
-        id: 1,
-        page: 'issue',
-        required_targets: ['target 1'],
-        steps: [
-          {message: 'Message 1', target: 'target 1', title: '1. Title 1'},
-          {message: 'Message 2', target: 'target 2', title: '2. Title 2'},
-        ],
-      },
-      currentStep: 1,
-      currentOrgSlug: 'testorg',
-      currentProjectSlug: 'testproj',
-    });
-    wrapper
-      .find('.assistant-cue')
-      .first()
-      .simulate('click');
-    expect(wrapper).toMatchSnapshot();
-  });
-});
diff --git a/tests/js/spec/components/assistant/supportDrawer.spec.jsx b/tests/js/spec/components/assistant/supportDrawer.spec.jsx
index 6ededb1eb7..e2d0f3ea47 100644
--- a/tests/js/spec/components/assistant/supportDrawer.spec.jsx
+++ b/tests/js/spec/components/assistant/supportDrawer.spec.jsx
@@ -1,10 +1,21 @@
 import React from 'react';
-import {shallow} from 'enzyme';
+import {shallow, mount} from 'enzyme';
 import SupportDrawer from 'app/components/assistant/supportDrawer';
 
 describe('SupportDrawer', function() {
-  it('renders', function() {
-    let wrapper = shallow(<SupportDrawer onClose={() => {}} />);
+  it('renders cue', function() {
+    let wrapper = shallow(<SupportDrawer />, TestStubs.routerContext());
     expect(wrapper).toMatchSnapshot();
   });
+
+  it('renders drawer', async function() {
+    let wrapper = mount(<SupportDrawer />, TestStubs.routerContext());
+    wrapper
+      .find('.assistant-cue')
+      .first()
+      .simulate('click');
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('SupportContainer')).toHaveLength(1);
+  });
 });
diff --git a/tests/js/spec/stores/guideStore.spec.jsx b/tests/js/spec/stores/guideStore.spec.jsx
index f3da550ac6..4203bffa88 100644
--- a/tests/js/spec/stores/guideStore.spec.jsx
+++ b/tests/js/spec/stores/guideStore.spec.jsx
@@ -65,7 +65,7 @@ describe('GuideStore', function() {
     expect(GuideStore.state.currentStep).toEqual(1);
     GuideStore.onNextStep();
     expect(GuideStore.state.currentStep).toEqual(2);
-    GuideStore.onCloseGuideOrSupport();
+    GuideStore.onCloseGuide();
     expect(
       Object.keys(GuideStore.state.guides).filter(
         key => GuideStore.state.guides[key].seen == true
@@ -89,9 +89,9 @@ describe('GuideStore', function() {
     GuideStore.state.forceShow = true;
     GuideStore.onFetchSucceeded(data);
     expect(GuideStore.state.currentGuide.id).toEqual(1);
-    GuideStore.onCloseGuideOrSupport();
+    GuideStore.onCloseGuide();
     expect(GuideStore.state.currentGuide.id).toEqual(2);
-    GuideStore.onCloseGuideOrSupport();
+    GuideStore.onCloseGuide();
     expect(GuideStore.state.currentGuide).toEqual(null);
   });
 
@@ -104,7 +104,7 @@ describe('GuideStore', function() {
     GuideStore.onFetchSucceeded(data);
     expect(mockRecordCue).toHaveBeenCalledWith(data.issue.id, data.issue.cue);
     expect(mockRecordCue).toHaveBeenCalledTimes(1);
-    GuideStore.onCloseGuideOrSupport();
+    GuideStore.onCloseGuide();
 
     // Should trigger a record when a new guide is cued
     expect(GuideStore.state.currentGuide).toEqual(data.other);
