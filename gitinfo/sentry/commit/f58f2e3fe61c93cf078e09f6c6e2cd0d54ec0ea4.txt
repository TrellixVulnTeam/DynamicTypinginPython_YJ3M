commit f58f2e3fe61c93cf078e09f6c6e2cd0d54ec0ea4
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Thu Oct 19 16:02:33 2017 -0700

    fix(discard): Simplify minified frame hashing (#6371)

diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 019da1de0c..b710bf62a2 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -370,7 +370,7 @@ class Frame(Interface):
 
         return cls(**kwargs)
 
-    def get_hash(self, platform=None, is_processed_data=True):
+    def _get_processed_hash(self, platform=None):
         """
         The hash of the frame varies depending on the data available.
 
@@ -413,11 +413,10 @@ class Frame(Interface):
         # XXX: hack around what appear to be non-useful lines of context
         if can_use_context:
             output.append(self.context_line)
-        elif not output and is_processed_data:
+        elif not output:
             # If we were unable to achieve any context at this point
             # (likely due to a bad JavaScript error) we should just
-            # bail on recording this frame unless we're working with
-            # unprocessed data
+            # bail on recording this frame
             return output
         elif self.symbol:
             output.append(self.symbol)
@@ -428,10 +427,32 @@ class Frame(Interface):
                 output.append(remove_function_outliers(self.function))
         elif self.lineno is not None:
             output.append(self.lineno)
-            if not is_processed_data and self.colno is not None:
-                output.append(self.colno)
         return output
 
+    def _get_unprocessed_hash(self, platform=None):
+        from sentry.filters.preprocess_hashes import UnableToGenerateHash
+
+        platform = self.platform or platform
+        # TODO(jess): consider special casing mobile/native
+        if platform == 'javascript':
+            # Safari throws [native code] frames in for calls like ``forEach``
+            # whereas Chrome ignores these. Let's remove it from the hashing algo
+            # so that they're more likely to group together
+            if self.filename == '[native code]':
+                return []
+
+            attrs = [self.filename, self.function, self.colno, self.lineno]
+            if all(attrs):
+                return attrs
+            raise UnableToGenerateHash
+        else:
+            return self._get_processed_hash(platform=platform)
+
+    def get_hash(self, platform=None, is_processed_data=True):
+        if is_processed_data:
+            return self._get_processed_hash(platform=platform)
+        return self._get_unprocessed_hash(platform=platform)
+
     def get_api_context(self, is_public=False, pad_addr=None):
         data = {
             'filename':
diff --git a/tests/sentry/filters/test_preprocess_hashes.py b/tests/sentry/filters/test_preprocess_hashes.py
index 8bb025cbcb..e03c5becfd 100644
--- a/tests/sentry/filters/test_preprocess_hashes.py
+++ b/tests/sentry/filters/test_preprocess_hashes.py
@@ -241,8 +241,78 @@ class PreProcessingHashTest(TestCase):
         )
 
         assert get_preprocess_hash_inputs(event_data) == [[
+            u'/_static/373562702009df1692da6eb80a933139f29e094b/sentry/dist/vendor.js',
             u'Object.receiveComponent',
+            22,
+            17866,
+            u'/_static/373562702009df1692da6eb80a933139f29e094b/sentry/dist/vendor.js',
             u'ReactCompositeComponentWrapper.receiveComponent',
+            10,
+            74002,
+            u'/_static/373562702009df1692da6eb80a933139f29e094b/sentry/dist/app.js',
             u'Constructor.render',
+            9,
+            47628,
             u'TypeError'
         ]]
+
+    def test_exception_with_stacktrace_raises(self):
+        data = {
+            'exception': {
+                'values': [
+                    {
+                        'stacktrace': {
+                            'frames': [
+                                {
+                                    'colno':
+                                    22,
+                                    'function':
+                                    u'Object.receiveComponent',
+                                    'in_app':
+                                    True,
+                                    'lineno':
+                                    17866
+                                }, {
+                                    'colno':
+                                    10,
+                                    'filename':
+                                    u'/_static/373562702009df1692da6eb80a933139f29e094b/sentry/dist/vendor.js',
+                                    'function':
+                                    u'ReactCompositeComponentWrapper.receiveComponent',
+                                    'in_app':
+                                    True,
+                                    'lineno':
+                                    74002
+                                }, {
+                                    'colno':
+                                    9,
+                                    'filename':
+                                    u'/_static/373562702009df1692da6eb80a933139f29e094b/sentry/dist/app.js',
+                                    'function':
+                                    u'Constructor.render',
+                                    'in_app':
+                                    True,
+                                    'lineno':
+                                    47628
+                                }
+                            ],
+                            'frames_omitted':
+                            None,
+                            'registers':
+                            None
+                        },
+                        'thread_id': None,
+                        'type': u'TypeError',
+                        'value': u"Cannot set property 'b' of null"
+                    }
+                ]
+            }
+        }
+
+        event_data = self.make_event_data(
+            data=data,
+            platform='javascript',
+        )
+
+        with self.assertRaises(UnableToGenerateHash):
+            get_preprocess_hash_inputs(event_data)
