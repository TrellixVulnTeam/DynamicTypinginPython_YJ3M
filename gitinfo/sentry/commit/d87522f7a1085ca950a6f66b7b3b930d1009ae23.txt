commit d87522f7a1085ca950a6f66b7b3b930d1009ae23
Author: David Cramer <cramer@dropbox.com>
Date:   Tue May 20 11:18:48 2014 -0700

    Standardize interface handling and store as canonical path

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 2b1c73016b..118baa5e46 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -26,12 +26,12 @@ from sentry.constants import (
     DEFAULT_LOG_LEVEL, LOG_LEVELS, MAX_CULPRIT_LENGTH, MAX_TAG_VALUE_LENGTH,
     MAX_TAG_KEY_LENGTH)
 from sentry.exceptions import InvalidTimestamp
+from sentry.interfaces.base import get_interface
 from sentry.models import Project, ProjectKey
 from sentry.tasks.store import preprocess_event
 from sentry.utils import is_float, json
 from sentry.utils.auth import parse_auth_header
 from sentry.utils.compat import StringIO
-from sentry.utils.imports import import_string
 from sentry.utils.strings import decompress, truncatechars
 
 
@@ -91,20 +91,6 @@ class APIRateLimited(APIError):
         self.retry_after = retry_after
 
 
-def get_interface(name):
-    try:
-        import_path = settings.SENTRY_INTERFACES[name]
-    except KeyError:
-        raise ValueError('Invalid interface name: %s' % (name,))
-
-    try:
-        interface = import_string(import_path)
-    except Exception:
-        raise ValueError('Unable to load interface: %s' % (name,))
-
-    return interface
-
-
 def client_metadata(client=None, project=None, exception=None, tags=None, extra=None):
     if not extra:
         extra = {}
@@ -382,7 +368,7 @@ def validate_data(project, data, client=None):
 
         try:
             inst = interface.to_python(value)
-            data[k] = inst.to_json()
+            data[interface.get_path()] = inst.to_json()
         except Exception as e:
             if isinstance(e, AssertionError):
                 log = logger.info
diff --git a/src/sentry/interfaces/base.py b/src/sentry/interfaces/base.py
index ec88d44abe..0fe723ca00 100644
--- a/src/sentry/interfaces/base.py
+++ b/src/sentry/interfaces/base.py
@@ -1,6 +1,23 @@
+from django.conf import settings
 from django.utils.html import escape
 from django.utils.translation import ugettext as _
 
+from sentry.utils.imports import import_string
+
+
+def get_interface(name):
+    try:
+        import_path = settings.SENTRY_INTERFACES[name]
+    except KeyError:
+        raise ValueError('Invalid interface name: %s' % (name,))
+
+    try:
+        interface = import_string(import_path)
+    except Exception:
+        raise ValueError('Unable to load interface: %s' % (name,))
+
+    return interface
+
 
 class Interface(object):
     """
@@ -44,6 +61,9 @@ class Interface(object):
             (k, v) for k, v in self._data.iteritems() if v
         )
 
+    def get_path(self):
+        return '%s.%s' % (self.__module__, self.__name__)
+
     def get_alias(self):
         return self.get_slug()
 
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index c924f98d6b..a50a2de108 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -5,7 +5,6 @@ sentry.models.event
 :copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-from django.conf import settings
 from django.db import models
 from django.utils import timezone
 from django.utils.datastructures import SortedDict
@@ -15,8 +14,8 @@ from sentry.db.models import (
     Model, NodeField, BoundedIntegerField, BoundedPositiveIntegerField,
     BaseManager, sane_repr
 )
+from sentry.interfaces.base import get_interface
 from sentry.utils.cache import memoize
-from sentry.utils.imports import import_string
 from sentry.utils.safe import safe_execute
 from sentry.utils.strings import truncatechars, strip
 
@@ -126,15 +125,10 @@ class Event(Model):
     def interfaces(self):
         result = []
         for key, data in self.data.iteritems():
-            if '.' not in key:
-                continue
-
             try:
-                cls = import_string(settings.SENTRY_INTERFACES[key])
-            except KeyError:
+                cls = get_interface(key)
+            except ValueError:
                 continue
-            except ImportError:
-                continue  # suppress invalid interfaces
 
             value = safe_execute(cls.to_python, data)
             if not value:
