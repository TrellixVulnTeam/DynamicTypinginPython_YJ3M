commit c1ca963f4d5d57b155e6ba5a117f572a6c8ed3fe
Author: Nola Chen <chen.no@husky.neu.edu>
Date:   Fri Nov 22 15:38:09 2019 -0800

    feat(app-platform):  Create RequestLog component, add filtering abilities (#15673)
    
    * pull Request Log into its own component, add filtering
    
    * delete comments
    
    * Add tests & Return 400 error when requesting invalid event type
    
    * Improve SentryApp UI component typing
    
    * Review fixes
    
    * address review comments
    
    * Add noop onChange to checkbox again

diff --git a/src/sentry/api/endpoints/sentry_app_requests.py b/src/sentry/api/endpoints/sentry_app_requests.py
index ac89dd78b7..8eac689fff 100644
--- a/src/sentry/api/endpoints/sentry_app_requests.py
+++ b/src/sentry/api/endpoints/sentry_app_requests.py
@@ -4,7 +4,10 @@ from rest_framework.response import Response
 
 from sentry.api.bases import SentryAppBaseEndpoint, SentryAppStatsPermission
 
-from sentry.utils.sentryappwebhookrequests import SentryAppWebhookRequestsBuffer
+from sentry.utils.sentryappwebhookrequests import (
+    SentryAppWebhookRequestsBuffer,
+    EXTENDED_VALID_EVENTS,
+)
 
 from sentry.models import Organization
 
@@ -32,12 +35,26 @@ class SentryAppRequestsEndpoint(SentryAppBaseEndpoint):
         return formatted_request
 
     def get(self, request, sentry_app):
-
-        # TODO add optional query params for event type
-        # for now I'm just getting all requests for all events
+        """
+        :qparam string eventType: Optionally specify a specific event type to filter requests
+        :qparam bool errorsOnly: If this is true, only return error/warning requests (300-599)
+        """
+
+        event_type = request.GET.get("eventType")
+        errors_only = request.GET.get("errorsOnly")
+
+        kwargs = {}
+        if event_type:
+            if event_type not in EXTENDED_VALID_EVENTS:
+                return Response({"detail": "Invalid event type."}, status=400)
+            kwargs["event"] = event_type
+        if errors_only:
+            kwargs["errors_only"] = True
 
         buffer = SentryAppWebhookRequestsBuffer(sentry_app)
 
-        formatted_requests = [self.format_request(req, sentry_app) for req in buffer.get_requests()]
+        formatted_requests = [
+            self.format_request(req, sentry_app) for req in buffer.get_requests(**kwargs)
+        ]
 
         return Response(formatted_requests)
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 4995629089..7aa3114213 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -423,6 +423,29 @@ export type WebhookEvent = 'issue' | 'error';
 
 export type Scope = typeof API_SCOPES[number];
 
+export type SentryAppSchemaIssueLink = {
+  type: 'issue-link';
+  create: {
+    uri: string;
+    required_fields: any[];
+    optional_fields?: any[];
+  };
+  link: {
+    uri: string;
+    required_fields: any[];
+    optional_fields?: any[];
+  };
+};
+
+export type SentryAppSchemaStacktraceLink = {
+  type: 'stacktrace-link';
+  uri: string;
+};
+
+export type SentryAppSchemaElement =
+  | SentryAppSchemaIssueLink
+  | SentryAppSchemaStacktraceLink;
+
 export type SentryApp = {
   status: 'unpublished' | 'published' | 'internal';
   scopes: Scope[];
@@ -434,7 +457,7 @@ export type SentryApp = {
   author: string;
   events: WebhookEvent[];
   schema: {
-    elements?: object[]; //TODO(ts)
+    elements?: SentryAppSchemaElement[];
   };
   //possible null params
   webhookUrl: string | null;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/index.tsx
similarity index 68%
rename from src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.tsx
rename to src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/index.tsx
index 5ef3c5bbd9..12e2a78494 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/index.tsx
@@ -1,53 +1,19 @@
 import React from 'react';
 import styled from 'react-emotion';
 
-import moment from 'moment-timezone';
-
 import AsyncView from 'app/views/asyncView';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import LineChart from 'app/components/charts/lineChart';
 
-import {
-  Panel,
-  PanelBody,
-  PanelHeader,
-  PanelFooter,
-  PanelItem,
-} from 'app/components/panels';
+import {Panel, PanelBody, PanelHeader, PanelFooter} from 'app/components/panels';
 import BarChart from 'app/components/charts/barChart';
-import DateTime from 'app/components/dateTime';
-import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import Link from 'app/components/links/link';
-import Tag from 'app/views/settings/components/tag';
 
 import space from 'app/styles/space';
-import {SentryApp, SentryAppWebhookRequest} from 'app/types';
 import {t} from 'app/locale';
+import {SentryApp} from 'app/types';
 
-const ResponseCode = ({code}: {code: number}) => {
-  let priority = 'error';
-  if (code <= 399 && code >= 300) {
-    priority = 'warning';
-  } else if (code <= 299 && code >= 100) {
-    priority = 'success';
-  }
-
-  return (
-    <div>
-      <Tag priority={priority}>{code === 0 ? 'timeout' : code}</Tag>
-    </div>
-  );
-};
-
-const TimestampLink = ({date, link}: {date: moment.MomentInput; link?: string}) => {
-  return link ? (
-    <Link to={link}>
-      <DateTime date={date} />
-    </Link>
-  ) : (
-    <DateTime date={date} />
-  );
-};
+import RequestLog from './requestLog';
 
 type Props = AsyncView['props'];
 
@@ -58,7 +24,6 @@ type State = AsyncView['state'] & {
     installStats: [number, number][];
     uninstallStats: [number, number][];
   };
-  requests: SentryAppWebhookRequest[];
   interactions: {
     componentInteractions: {
       [key: string]: [number, number][];
@@ -71,16 +36,18 @@ type State = AsyncView['state'] & {
 export default class SentryApplicationDashboard extends AsyncView<Props, State> {
   getEndpoints(): Array<[string, string, any] | [string, string]> {
     const {appSlug} = this.props.params;
+
     // Default time range for now: 90 days ago to now
     const now = Math.floor(new Date().getTime() / 1000);
     const ninety_days_ago = 3600 * 24 * 90;
+
     return [
       [
         'stats',
         `/sentry-apps/${appSlug}/stats/`,
         {query: {since: now - ninety_days_ago, until: now}},
       ],
-      ['requests', `/sentry-apps/${appSlug}/requests/`],
+
       [
         'interactions',
         `/sentry-apps/${appSlug}/interaction/`,
@@ -98,7 +65,7 @@ export default class SentryApplicationDashboard extends AsyncView<Props, State>
     const {totalUninstalls, totalInstalls} = this.state.stats;
     return (
       <React.Fragment>
-        <h5>{t('Installation Data')}</h5>
+        <h5>{t('Installation & Interaction Data')}</h5>
         <Row>
           <StatsSection>
             <StatsHeader>{t('Total installs')}</StatsHeader>
@@ -156,53 +123,6 @@ export default class SentryApplicationDashboard extends AsyncView<Props, State>
     );
   }
 
-  renderRequestLog() {
-    const {requests, app} = this.state;
-    return (
-      <React.Fragment>
-        <h5>{t('Request Log')}</h5>
-        <p>
-          {t(
-            'This log shows outgoing webhook requests for the following events: issue.assigned, issue.ignored, issue.resolved, issue.created, error.created'
-          )}
-        </p>
-        <Panel>
-          <PanelHeader>
-            <TableLayout>
-              <div>{t('Time')}</div>
-              <div>{t('Status Code')}</div>
-              {app.status !== 'internal' && <div>{t('Organization')}</div>}
-              <div>{t('Event Type')}</div>
-              <div>{t('Webhook URL')}</div>
-            </TableLayout>
-          </PanelHeader>
-
-          <PanelBody>
-            {requests.length > 0 ? (
-              requests.map((request, idx) => (
-                <PanelItem key={idx}>
-                  <TableLayout>
-                    <TimestampLink date={request.date} />
-                    <ResponseCode code={request.responseCode} />
-                    {app.status !== 'internal' && request.organization && (
-                      <div>{request.organization.name}</div>
-                    )}
-                    <div>{request.eventType}</div>
-                    <OverflowBox>{request.webhookUrl}</OverflowBox>
-                  </TableLayout>
-                </PanelItem>
-              ))
-            ) : (
-              <EmptyMessage icon="icon-circle-exclamation">
-                {t('No requests found.')}
-              </EmptyMessage>
-            )}
-          </PanelBody>
-        </Panel>
-      </React.Fragment>
-    );
-  }
-
   renderIntegrationViews() {
     const {views} = this.state.interactions;
     const {appSlug, orgId} = this.props.params;
@@ -268,11 +188,11 @@ export default class SentryApplicationDashboard extends AsyncView<Props, State>
 
     return (
       <div>
-        {<SettingsPageHeader title={app.name} />}
+        <SettingsPageHeader title={`${t('Integration Dashboard')} - ${app.name}`} />
         {app.status === 'published' && this.renderInstallData()}
-        {this.renderRequestLog()}
         {app.status === 'published' && this.renderIntegrationViews()}
         {app.schema.elements && this.renderComponentInteractions()}
+        <RequestLog app={app} />
       </div>
     );
   }
@@ -325,18 +245,6 @@ const StatsHeader = styled('h6')`
   color: ${p => p.theme.gray3};
 `;
 
-const TableLayout = styled('div')`
-  display: grid;
-  grid-template-columns: 1fr 0.5fr 1fr 1fr 1fr;
-  grid-column-gap: ${space(1.5)};
-  width: 100%;
-  align-items: center;
-`;
-
-const OverflowBox = styled('div')`
-  word-break: break-word;
-`;
-
 const StyledFooter = styled('div')`
   padding: ${space(1.5)};
 `;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/requestLog.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/requestLog.tsx
new file mode 100644
index 0000000000..5b9a57ed17
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/requestLog.tsx
@@ -0,0 +1,344 @@
+import React from 'react';
+import styled from 'react-emotion';
+import moment from 'moment-timezone';
+import memoize from 'lodash/memoize';
+
+import AsyncComponent from 'app/components/asyncComponent';
+
+import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
+import EmptyMessage from 'app/views/settings/components/emptyMessage';
+import DateTime from 'app/components/dateTime';
+import DropdownControl, {DropdownItem} from 'app/components/dropdownControl';
+import DropdownButton from 'app/components/dropdownButton';
+import Tag from 'app/views/settings/components/tag';
+import Link from 'app/components/links/link';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import Checkbox from 'app/components/checkbox';
+import Button from 'app/components/button';
+
+import space from 'app/styles/space';
+import {t} from 'app/locale';
+import {SentryApp, SentryAppWebhookRequest, SentryAppSchemaIssueLink} from 'app/types';
+
+const ALL_EVENTS = t('All Events');
+const MAX_PER_PAGE = 10;
+
+const componentHasSelectUri = (issueLinkComponent: SentryAppSchemaIssueLink): boolean => {
+  const hasSelectUri = (fields: any[]): boolean =>
+    fields.some(field => field.type === 'select' && 'uri' in field);
+
+  const createHasSelectUri =
+    hasSelectUri(issueLinkComponent.create.required_fields) ||
+    hasSelectUri(issueLinkComponent.create.optional_fields || []);
+
+  const linkHasSelectUri =
+    hasSelectUri(issueLinkComponent.link.required_fields) ||
+    hasSelectUri(issueLinkComponent.link.optional_fields || []);
+
+  return createHasSelectUri || linkHasSelectUri;
+};
+
+const getEventTypes = memoize((app: SentryApp) => {
+  // TODO(nola): ideally this would be kept in sync with EXTENDED_VALID_EVENTS on the backend
+
+  let issueLinkEvents: string[] = [];
+  const issueLinkComponent = (app.schema.elements || []).find(
+    element => element.type === 'issue-link'
+  );
+  if (issueLinkComponent) {
+    issueLinkEvents = ['external_issue.created', 'external_issue.linked'];
+    if (componentHasSelectUri(issueLinkComponent as SentryAppSchemaIssueLink)) {
+      issueLinkEvents.push('select_options.requested');
+    }
+  }
+
+  const events = [
+    ALL_EVENTS,
+    'installation.created',
+    'installation.deleted',
+    ...(app.events.includes('error') ? ['error.created'] : []),
+    ...(app.events.includes('issue')
+      ? ['issue.created', 'issue.resolved', 'issue.ignored', 'issue.assigned']
+      : []),
+    ...(app.isAlertable ? ['event_alert.triggered'] : []),
+    ...issueLinkEvents,
+  ];
+
+  return events;
+});
+
+const ResponseCode = ({code}: {code: number}) => {
+  let priority = 'error';
+  if (code <= 399 && code >= 300) {
+    priority = 'warning';
+  } else if (code <= 299 && code >= 100) {
+    priority = 'success';
+  }
+
+  return (
+    <div>
+      <Tag priority={priority}>{code === 0 ? 'timeout' : code}</Tag>
+    </div>
+  );
+};
+
+const TimestampLink = ({date, link}: {date: moment.MomentInput; link?: string}) => {
+  return link ? (
+    <Link to={link}>
+      <DateTime date={date} />
+    </Link>
+  ) : (
+    <DateTime date={date} />
+  );
+};
+
+type Props = AsyncComponent['props'] & {
+  app: SentryApp;
+};
+
+type State = AsyncComponent['state'] & {
+  eventType: string;
+  errorsOnly: boolean;
+  currentPage: number;
+  requests: SentryAppWebhookRequest[];
+};
+
+export default class RequestLog extends AsyncComponent<Props, State> {
+  shouldReload = true;
+
+  get hasNextPage() {
+    return (this.state.currentPage + 1) * MAX_PER_PAGE < this.state.requests.length;
+  }
+
+  get hasPrevPage() {
+    return this.state.currentPage > 0;
+  }
+
+  getEndpoints(): Array<[string, string, any] | [string, string]> {
+    const {slug} = this.props.app;
+
+    const query: any = {};
+    if (this.state) {
+      if (this.state.eventType !== ALL_EVENTS) {
+        query.eventType = this.state.eventType;
+      }
+      if (this.state.errorsOnly) {
+        query.errorsOnly = true;
+      }
+    }
+
+    return [['requests', `/sentry-apps/${slug}/requests/`, {query}]];
+  }
+
+  getDefaultState() {
+    return {
+      ...super.getDefaultState(),
+      requests: [],
+      eventType: ALL_EVENTS,
+      errorsOnly: false,
+      currentPage: 0,
+    };
+  }
+
+  handleChangeEventType = (eventType: string) => {
+    this.setState({
+      eventType,
+      currentPage: 0,
+    });
+    this.remountComponent();
+  };
+
+  handleChangeErrorsOnly = () => {
+    this.setState({
+      errorsOnly: !this.state.errorsOnly,
+      currentPage: 0,
+    });
+    this.remountComponent();
+  };
+
+  handleNextPage = () => {
+    this.setState({
+      currentPage: this.state.currentPage + 1,
+    });
+  };
+
+  handlePrevPage = () => {
+    this.setState({
+      currentPage: this.state.currentPage - 1,
+    });
+  };
+
+  renderLoading() {
+    return this.renderBody();
+  }
+
+  renderBody() {
+    const {requests, eventType, errorsOnly, currentPage} = this.state;
+    const {app} = this.props;
+
+    const currentRequests = requests.slice(
+      currentPage * MAX_PER_PAGE,
+      (currentPage + 1) * MAX_PER_PAGE
+    );
+
+    return (
+      <React.Fragment>
+        <h5>{t('Request Log')}</h5>
+
+        <div>
+          <p>
+            {t(
+              'This log shows the status of any outgoing webhook requests from Sentry to your integration.'
+            )}
+          </p>
+
+          <RequestLogFilters>
+            <DropdownControl
+              label={eventType}
+              menuWidth="220px"
+              button={({isOpen, getActorProps}) => (
+                <StyledDropdownButton
+                  {...getActorProps({isStyled: true})}
+                  isOpen={isOpen}
+                >
+                  {eventType}
+                </StyledDropdownButton>
+              )}
+            >
+              {getEventTypes(app).map(type => (
+                <DropdownItem
+                  key={type}
+                  onSelect={this.handleChangeEventType}
+                  eventKey={type}
+                  isActive={eventType === type}
+                >
+                  {type}
+                </DropdownItem>
+              ))}
+            </DropdownControl>
+
+            <StyledErrorsOnlyButton onClick={this.handleChangeErrorsOnly}>
+              <ErrorsOnlyCheckbox>
+                <Checkbox checked={errorsOnly} onChange={() => {}} />
+                {t('Errors Only')}
+              </ErrorsOnlyCheckbox>
+            </StyledErrorsOnlyButton>
+          </RequestLogFilters>
+        </div>
+
+        <Panel>
+          <PanelHeader>
+            <TableLayout>
+              <div>{t('Time')}</div>
+              <div>{t('Status Code')}</div>
+              {app.status !== 'internal' && <div>{t('Organization')}</div>}
+              <div>{t('Event Type')}</div>
+              <div>{t('Webhook URL')}</div>
+            </TableLayout>
+          </PanelHeader>
+
+          {!this.state.loading ? (
+            <PanelBody>
+              {currentRequests.length > 0 ? (
+                currentRequests.map((request, idx) => (
+                  <PanelItem key={idx}>
+                    <TableLayout>
+                      <TimestampLink date={request.date} />
+                      <ResponseCode code={request.responseCode} />
+                      {app.status !== 'internal' && request.organization && (
+                        <div>{request.organization.name}</div>
+                      )}
+                      <div>{request.eventType}</div>
+                      <OverflowBox>{request.webhookUrl}</OverflowBox>
+                    </TableLayout>
+                  </PanelItem>
+                ))
+              ) : (
+                <EmptyMessage icon="icon-circle-exclamation">
+                  {t('No requests found in the last 30 days.')}
+                </EmptyMessage>
+              )}
+            </PanelBody>
+          ) : (
+            <LoadingIndicator />
+          )}
+        </Panel>
+
+        <PaginationButtons>
+          <Button
+            icon="icon-chevron-left"
+            onClick={this.handlePrevPage}
+            disabled={!this.hasPrevPage}
+            label={t('Previous page')}
+          />
+          <Button
+            icon="icon-chevron-right"
+            onClick={this.handleNextPage}
+            disabled={!this.hasNextPage}
+            label={t('Next page')}
+          />
+        </PaginationButtons>
+      </React.Fragment>
+    );
+  }
+}
+
+const TableLayout = styled('div')`
+  display: grid;
+  grid-template-columns: 1fr 0.5fr 1fr 1fr 1fr;
+  grid-column-gap: ${space(1.5)};
+  width: 100%;
+  align-items: center;
+`;
+
+const OverflowBox = styled('div')`
+  word-break: break-word;
+`;
+
+const PaginationButtons = styled('div')`
+  display: flex;
+  justify-content: flex-end;
+  align-items: center;
+
+  > :first-child {
+    border-top-right-radius: 0;
+    border-bottom-right-radius: 0;
+  }
+
+  > :nth-child(2) {
+    margin-left: -1px;
+    border-top-left-radius: 0;
+    border-bottom-left-radius: 0;
+  }
+`;
+
+const RequestLogFilters = styled('div')`
+  display: flex;
+  align-items: center;
+  padding-bottom: ${space(1)};
+`;
+
+const ErrorsOnlyCheckbox = styled('div')`
+  input {
+    margin: 0 ${space(1)} 0 0;
+  }
+
+  display: flex;
+  align-items: center;
+`;
+
+const StyledDropdownButton = styled(
+  React.forwardRef((prop, ref) => <DropdownButton innerRef={ref} {...prop} />)
+)`
+  z-index: ${p => p.theme.zIndex.header - 1};
+  white-space: nowrap;
+
+  border-top-right-radius: 0;
+  border-bottom-right-radius: 0;
+`;
+
+const StyledErrorsOnlyButton = styled(Button)`
+  margin-left: -1px;
+  border-top-left-radius: 0;
+  border-bottom-left-radius: 0;
+`;
diff --git a/src/sentry/utils/sentryappwebhookrequests.py b/src/sentry/utils/sentryappwebhookrequests.py
index 659d17b8fc..bc9077fe5a 100644
--- a/src/sentry/utils/sentryappwebhookrequests.py
+++ b/src/sentry/utils/sentryappwebhookrequests.py
@@ -101,11 +101,8 @@ class SentryAppWebhookRequestsBuffer(object):
                 for request in self._get_all_from_buffer(self._get_redis_key(event, error=error))
             ]
 
-    def get_errors(self, event=None):
-        return self._get_requests(event=event, error=True)
-
-    def get_requests(self, event=None):
-        return self._get_requests(event=event, error=False)
+    def get_requests(self, event=None, errors_only=False):
+        return self._get_requests(event=event, error=errors_only)
 
     def add_request(self, response_code, org_id, event, url):
         if event not in EXTENDED_VALID_EVENTS:
@@ -129,7 +126,7 @@ class SentryAppWebhookRequestsBuffer(object):
         self._add_to_buffer_pipeline(request_key, request_data, pipe)
 
         # If it's an error add it to the error buffer
-        if 400 <= response_code <= 599:
+        if 400 <= response_code <= 599 or response_code == 0:
             error_key = self._get_redis_key(event, error=True)
             self._add_to_buffer_pipeline(error_key, request_data, pipe)
 
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.spec.jsx b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.spec.jsx
index b872fcc1c1..84af9ddf1f 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.spec.jsx
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.spec.jsx
@@ -27,7 +27,14 @@ describe('Sentry Application Dashboard', function() {
       sentryApp = TestStubs.SentryApp({
         status: 'published',
         schema: {
-          elements: [{type: 'stacktrace-link', uri: '/test'}, {type: 'issue-link'}],
+          elements: [
+            {type: 'stacktrace-link', uri: '/test'},
+            {
+              type: 'issue-link',
+              create: {uri: '/test', required_fields: []},
+              link: {uri: '/test', required_fields: []},
+            },
+          ],
         },
       });
       request = TestStubs.SentryAppWebhookRequest();
@@ -127,7 +134,7 @@ describe('Sentry Application Dashboard', function() {
 
       expect(wrapper.find('PanelBody').exists('PanelItem')).toBeFalsy();
       expect(wrapper.find('EmptyMessage').text()).toEqual(
-        expect.stringContaining('No requests found.')
+        expect.stringContaining('No requests found in the last 30 days.')
       );
     });
 
@@ -240,7 +247,7 @@ describe('Sentry Application Dashboard', function() {
 
       expect(wrapper.find('PanelBody').exists('PanelItem')).toBeFalsy();
       expect(wrapper.find('EmptyMessage').text()).toEqual(
-        expect.stringContaining('No requests found.')
+        expect.stringContaining('No requests found in the last 30 days.')
       );
     });
 
diff --git a/tests/sentry/api/endpoints/test_sentry_app_requests.py b/tests/sentry/api/endpoints/test_sentry_app_requests.py
index 96455c8222..2b5ddf515c 100644
--- a/tests/sentry/api/endpoints/test_sentry_app_requests.py
+++ b/tests/sentry/api/endpoints/test_sentry_app_requests.py
@@ -142,3 +142,55 @@ class GetSentryAppRequestsTest(SentryAppRequestsTest):
         assert "organization" not in response.data[0]
         assert response.data[0]["sentryAppSlug"] == self.internal_app.slug
         assert response.data[0]["responseCode"] == 200
+
+    def test_event_type_filter(self):
+        self.login_as(user=self.user)
+        buffer = SentryAppWebhookRequestsBuffer(self.published_app)
+        buffer.add_request(
+            response_code=200,
+            org_id=self.org.id,
+            event="issue.assigned",
+            url=self.published_app.webhook_url,
+        )
+
+        url = reverse("sentry-api-0-sentry-app-requests", args=[self.published_app.slug])
+        response1 = self.client.get("{}?eventType=issue.created".format(url), format="json")
+        assert response1.status_code == 200
+        assert len(response1.data) == 0
+
+        response2 = self.client.get("{}?eventType=issue.assigned".format(url), format="json")
+        assert response2.status_code == 200
+        assert len(response2.data) == 1
+
+    def test_invalid_event_type(self):
+        self.login_as(user=self.user)
+
+        url = reverse("sentry-api-0-sentry-app-requests", args=[self.published_app.slug])
+        response = self.client.get("{}?eventType=invalid_type".format(url), format="json")
+
+        assert response.status_code == 400
+
+    def test_errors_only_filter(self):
+        self.login_as(user=self.user)
+        buffer = SentryAppWebhookRequestsBuffer(self.published_app)
+        buffer.add_request(
+            response_code=200,
+            org_id=self.org.id,
+            event="issue.assigned",
+            url=self.published_app.webhook_url,
+        )
+        buffer.add_request(
+            response_code=500,
+            org_id=self.org.id,
+            event="issue.assigned",
+            url=self.published_app.webhook_url,
+        )
+
+        url = reverse("sentry-api-0-sentry-app-requests", args=[self.published_app.slug])
+        errors_only_response = self.client.get("{}?errorsOnly=true".format(url), format="json")
+        assert errors_only_response.status_code == 200
+        assert len(errors_only_response.data) == 1
+
+        response = self.client.get(url, format="json")
+        assert response.status_code == 200
+        assert len(response.data) == 2
