commit 2d93c441d57f9fe05f4fb68ca96686a5292bca21
Author: Mark Story <mark@sentry.io>
Date:   Tue Mar 24 14:33:19 2020 -0400

    ref(ts) Replace StringMap with Record (#17879)
    
    I recently learned about Record and it fits the same use case as
    StringMap does but is provided by typescript.

diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index bd44188e10..e73a57dde8 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -899,10 +899,6 @@ export type SelectValue<T> = {
   value: T;
 };
 
-export type StringMap<T> = {
-  [key: string]: T;
-};
-
 /**
  * The issue config form fields we get are basically the form fields we use in
  * the UI but with some extra information. Some fields marked optional in the
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
index 683097a09e..2cf01d79da 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
@@ -9,7 +9,7 @@ import {
 } from 'app/components/events/interfaces/spans/utils';
 import {IconAdd, IconDelete, IconGrabbable} from 'app/icons';
 import {t} from 'app/locale';
-import {SelectValue, OrganizationSummary, StringMap} from 'app/types';
+import {SelectValue, OrganizationSummary} from 'app/types';
 import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 
@@ -35,7 +35,7 @@ type State = {
   left: undefined | number;
   top: undefined | number;
   // Stored as a object so we can find elements later.
-  fieldOptions: StringMap<SelectValue<FieldValue>>;
+  fieldOptions: Record<string, SelectValue<FieldValue>>;
 };
 
 const DRAG_CLASS = 'draggable-item';
@@ -100,7 +100,7 @@ class ColumnEditCollection extends React.Component<Props, State> {
       fields = fields.filter(item => !TRACING_FIELDS.includes(item));
       functions = functions.filter(item => !TRACING_FIELDS.includes(item));
     }
-    const fieldOptions: StringMap<SelectValue<FieldValue>> = {};
+    const fieldOptions: Record<string, SelectValue<FieldValue>> = {};
 
     // Index items by prefixed keys as custom tags
     // can overlap both fields and function names.
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx
index 6fea0e0940..744be2e27d 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx
@@ -5,7 +5,7 @@ import cloneDeep from 'lodash/cloneDeep';
 
 import Badge from 'app/components/badge';
 import SelectControl from 'app/components/forms/selectControl';
-import {SelectValue, StringMap} from 'app/types';
+import {SelectValue} from 'app/types';
 import {t} from 'app/locale';
 import space from 'app/styles/space';
 
@@ -13,7 +13,7 @@ import {FieldValueKind, FieldValue} from './types';
 import {ColumnType, AggregateParameter} from '../eventQueryParams';
 import {Column} from '../eventView';
 
-type FieldOptions = StringMap<SelectValue<FieldValue>>;
+type FieldOptions = Record<string, SelectValue<FieldValue>>;
 
 // Intermediate type that combines the current column
 // data with the AggregateParameter type.
@@ -407,7 +407,7 @@ class BufferedInput extends React.Component<InputProps, InputState> {
   };
 
   render() {
-    const {onUpdate, ...props} = this.props;
+    const {onUpdate: _, ...props} = this.props;
     return (
       <StyledInput
         {...props}
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 0204aa5c4e..96634af7c3 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -7,7 +7,7 @@ import {browserHistory} from 'react-router';
 
 import {tokenizeSearch, stringifyQueryObject} from 'app/utils/tokenizeSearch';
 import {t} from 'app/locale';
-import {Event, StringMap, Organization, OrganizationSummary} from 'app/types';
+import {Event, Organization, OrganizationSummary} from 'app/types';
 import {Client} from 'app/api';
 import {getTitle} from 'app/utils/events';
 import {getUtcDateString} from 'app/utils/dates';
@@ -146,7 +146,7 @@ export function fetchTotalCount(
     .then((res: Response) => res.count);
 }
 
-export type MetaType = StringMap<FieldTypes>;
+export type MetaType = Record<string, FieldTypes>;
 
 /**
  * Get the field renderer for the named field and metadata
@@ -353,7 +353,7 @@ const TRANSFORM_AGGREGATES: {[field: string]: string | undefined} = {
  */
 export function getExpandedResults(
   eventView: EventView,
-  additionalConditions: StringMap<string>,
+  additionalConditions: Record<string, string>,
   dataRow?: TableDataRow | Event
 ): EventView {
   // Find aggregate fields and flag them for updates.
@@ -446,9 +446,9 @@ export function getExpandedResults(
 function generateAdditionalConditions(
   eventView: EventView,
   dataRow?: TableDataRow | Event
-): StringMap<string> {
+): Record<string, string> {
   const specialKeys = Object.values(URL_PARAM);
-  const conditions: StringMap<string> = {};
+  const conditions: Record<string, string> = {};
 
   if (!dataRow) {
     return conditions;
@@ -499,7 +499,7 @@ function generateAdditionalConditions(
 
 function generateExpandedConditions(
   eventView: EventView,
-  additionalConditions: StringMap<string>,
+  additionalConditions: Record<string, string>,
   dataRow?: TableDataRow | Event
 ): string {
   const parsedQuery = tokenizeSearch(eventView.query);
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formPanel.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/formPanel.tsx
index a69690665c..a149bed734 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formPanel.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formPanel.tsx
@@ -3,7 +3,7 @@ import React from 'react';
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';
 import {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';
-import {Scope, StringMap} from 'app/types';
+import {Scope} from 'app/types';
 
 import {FieldObject, JsonFormObject} from './type';
 
@@ -20,7 +20,7 @@ type Props = {
 
   // TODO(ts): See if this is still in use
   access?: Scope[];
-  features?: StringMap<any>;
+  features?: Record<string, any>;
 
   additionalFieldProps: {[key: string]: any};
 
