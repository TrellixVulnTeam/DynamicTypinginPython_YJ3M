commit 9d9545957138eea6a003f587d5d2441052e48a4e
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jan 23 11:32:20 2020 -0800

    feat(monitors): Improve event context for monitor failures
    
    This adds additional context to monitor events including:
    
    - a reason for the failure (used to fingerprint/differentiate failures)
    - config/name/status/type attributes on the monitor context (useful for building different kinds of alerts)

diff --git a/src/sentry/api/serializers/models/monitor.py b/src/sentry/api/serializers/models/monitor.py
index 4791c678ba..74d113eb7c 100644
--- a/src/sentry/api/serializers/models/monitor.py
+++ b/src/sentry/api/serializers/models/monitor.py
@@ -3,10 +3,7 @@ from __future__ import absolute_import
 import six
 
 from sentry.api.serializers import Serializer, register, serialize
-from sentry.models import Monitor, Project, ScheduleType
-
-
-SCHEDULE_TYPES = dict(ScheduleType.as_choices())
+from sentry.models import Monitor, Project
 
 
 @register(Monitor)
@@ -28,7 +25,7 @@ class MonitorSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         config = obj.config.copy()
         if "schedule_type" in config:
-            config["schedule_type"] = SCHEDULE_TYPES.get(config["schedule_type"], "unknown")
+            config["schedule_type"] = obj.get_schedule_type_display()
         return {
             "id": six.text_type(obj.guid),
             "status": obj.get_status_display(),
diff --git a/src/sentry/models/monitor.py b/src/sentry/models/monitor.py
index 01eacf24dd..863b292730 100644
--- a/src/sentry/models/monitor.py
+++ b/src/sentry/models/monitor.py
@@ -55,6 +55,20 @@ def get_next_schedule(base_datetime, schedule_type, schedule):
     return next_schedule
 
 
+def get_monitor_context(monitor):
+    config = monitor.config.copy()
+    if "schedule_type" in config:
+        config["schedule_type"] = monitor.get_schedule_type_display()
+
+    return {
+        "id": six.text_type(monitor.guid),
+        "name": monitor.name,
+        "config": monitor.config,
+        "status": monitor.get_status_display(),
+        "type": monitor.get_type_display(),
+    }
+
+
 class MonitorStatus(ObjectStatus):
     OK = 4
     ERROR = 5
@@ -86,6 +100,16 @@ class MonitorType(object):
             (cls.CRON_JOB, "cron_job"),
         )
 
+    @classmethod
+    def get_name(cls, value):
+        return dict(cls.as_choices())[value]
+
+
+class MonitorFailure(object):
+    UNKNOWN = "unknown"
+    MISSED_CHECKIN = "missed_checkin"
+    DURATION = "duration"
+
 
 class ScheduleType(object):
     UNKNOWN = 0
@@ -96,6 +120,10 @@ class ScheduleType(object):
     def as_choices(cls):
         return ((cls.UNKNOWN, "unknown"), (cls.CRONTAB, "crontab"), (cls.INTERVAL, "interval"))
 
+    @classmethod
+    def get_name(cls, value):
+        return dict(cls.as_choices())[value]
+
 
 class Monitor(Model):
     __core__ = True
@@ -122,6 +150,9 @@ class Monitor(Model):
 
     __repr__ = sane_repr("guid", "project_id", "name")
 
+    def get_schedule_type_display(self):
+        return ScheduleType.get_name(self.config.get("schedule_type", ScheduleType.CRONTAB))
+
     def get_audit_log_data(self):
         return {"name": self.name, "type": self.type, "status": self.status, "config": self.config}
 
@@ -134,7 +165,7 @@ class Monitor(Model):
         next_checkin = get_next_schedule(base_datetime, schedule_type, self.config["schedule"])
         return next_checkin + timedelta(minutes=int(self.config.get("checkin_margin") or 0))
 
-    def mark_failed(self, last_checkin=None):
+    def mark_failed(self, last_checkin=None, reason=MonitorFailure.UNKNOWN):
         from sentry.coreapi import ClientApiHelper
         from sentry.event_manager import EventManager
         from sentry.models import Project
@@ -162,8 +193,9 @@ class Monitor(Model):
 
         event_manager = EventManager(
             {
-                "logentry": {"message": "Monitor failure: %s" % (self.name,)},
-                "contexts": {"monitor": {"id": six.text_type(self.guid)}},
+                "logentry": {"message": "Monitor failure: %s (%s)" % (self.name, reason)},
+                "contexts": {"monitor": get_monitor_context(self)},
+                "fingerprint": ["monitor", six.text_type(self.guid), reason],
             },
             project=Project(id=self.project_id),
         )
diff --git a/src/sentry/tasks/check_monitors.py b/src/sentry/tasks/check_monitors.py
index b0d26573be..9f36947593 100644
--- a/src/sentry/tasks/check_monitors.py
+++ b/src/sentry/tasks/check_monitors.py
@@ -5,7 +5,14 @@ import logging
 from datetime import timedelta
 from django.utils import timezone
 
-from sentry.models import CheckInStatus, Monitor, MonitorCheckIn, MonitorStatus, MonitorType
+from sentry.models import (
+    CheckInStatus,
+    Monitor,
+    MonitorCheckIn,
+    MonitorFailure,
+    MonitorStatus,
+    MonitorType,
+)
 from sentry.tasks.base import instrumented_task
 
 
@@ -33,7 +40,7 @@ def check_monitors(current_datetime=None):
     ]
     for monitor in qs:
         logger.info("monitor.missed-checkin", extra={"monitor_id": monitor.id})
-        monitor.mark_failed()
+        monitor.mark_failed(reason=MonitorFailure.MISSED_CHECKIN)
 
     qs = MonitorCheckIn.objects.filter(status=CheckInStatus.IN_PROGRESS).select_related("monitor")[
         :10000
@@ -62,4 +69,4 @@ def check_monitors(current_datetime=None):
             status__in=[CheckInStatus.OK, CheckInStatus.ERROR],
         ).exists()
         if not has_newer_result:
-            monitor.mark_failed()
+            monitor.mark_failed(reason=MonitorFailure.DURATION)
diff --git a/tests/sentry/models/test_monitor.py b/tests/sentry/models/test_monitor.py
index dac31c6d42..077d6f7a2e 100644
--- a/tests/sentry/models/test_monitor.py
+++ b/tests/sentry/models/test_monitor.py
@@ -1,8 +1,11 @@
 from __future__ import absolute_import, print_function
 
+import six
+
 from datetime import datetime
 from django.utils import timezone
-from sentry.models import Monitor, ScheduleType
+from mock import patch
+from sentry.models import Monitor, MonitorFailure, MonitorType, ScheduleType
 from sentry.testutils import TestCase
 
 
@@ -43,3 +46,77 @@ class MonitorTestCase(TestCase):
         assert monitor.get_next_scheduled_checkin() == datetime(
             2019, 2, 1, 1, 10, 20, tzinfo=timezone.utc
         )
+
+    @patch("sentry.coreapi.ClientApiHelper.insert_data_to_database")
+    def test_mark_failed_default_params(self, mock_insert_data_to_database):
+        monitor = Monitor.objects.create(
+            name="test monitor",
+            organization_id=self.organization.id,
+            project_id=self.project.id,
+            type=MonitorType.CRON_JOB,
+            config={"schedule": [1, "month"], "schedule_type": ScheduleType.INTERVAL},
+        )
+        assert monitor.mark_failed()
+
+        assert len(mock_insert_data_to_database.mock_calls) == 1
+
+        event = mock_insert_data_to_database.mock_calls[0].args[0]
+
+        assert dict(
+            event,
+            **{
+                "level": "error",
+                "project": self.project.id,
+                "platform": "other",
+                "contexts": {
+                    "monitor": {
+                        "status": "active",
+                        "type": "cron_job",
+                        "config": {"schedule_type": 2, "schedule": [1, u"month"]},
+                        "id": six.text_type(monitor.guid),
+                        "name": monitor.name,
+                    }
+                },
+                "logentry": {"formatted": "Monitor failure: test monitor (unknown)"},
+                "fingerprint": ["monitor", six.text_type(monitor.guid), u"unknown"],
+                "logger": "",
+                "type": "default",
+            }
+        ) == dict(event)
+
+    @patch("sentry.coreapi.ClientApiHelper.insert_data_to_database")
+    def test_mark_failed_with_reason(self, mock_insert_data_to_database):
+        monitor = Monitor.objects.create(
+            name="test monitor",
+            organization_id=self.organization.id,
+            project_id=self.project.id,
+            type=MonitorType.CRON_JOB,
+            config={"schedule": [1, "month"], "schedule_type": ScheduleType.INTERVAL},
+        )
+        assert monitor.mark_failed(reason=MonitorFailure.DURATION)
+
+        assert len(mock_insert_data_to_database.mock_calls) == 1
+
+        event = mock_insert_data_to_database.mock_calls[0].args[0]
+
+        assert dict(
+            event,
+            **{
+                "level": "error",
+                "project": self.project.id,
+                "platform": "other",
+                "contexts": {
+                    "monitor": {
+                        "status": "active",
+                        "type": "cron_job",
+                        "config": {"schedule_type": 2, "schedule": [1, u"month"]},
+                        "id": six.text_type(monitor.guid),
+                        "name": monitor.name,
+                    }
+                },
+                "logentry": {"formatted": "Monitor failure: test monitor (duration)"},
+                "fingerprint": ["monitor", six.text_type(monitor.guid), u"duration"],
+                "logger": "",
+                "type": "default",
+            }
+        ) == dict(event)
