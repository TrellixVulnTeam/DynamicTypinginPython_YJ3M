commit affeb8ac4009f837fd3a1ab03a4a4a1222fc1729
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Fri May 18 11:06:53 2018 -0700

    feat(pipeline): Integration Pipeline Handles Pre-existing integration object (#8476)
    
    * Added the ability for the pipeline to recieve a reference to the integration object. And create it from there.
    
    * Added missing exists()
    
    * Added a teardown so that the method isn't broken for other tests.
    
    * Made revisions based off feedback.
    
    * Removed yarn.lock. Not sure how it got in there.

diff --git a/src/sentry/integrations/base.py b/src/sentry/integrations/base.py
index 6459e21186..1777110600 100644
--- a/src/sentry/integrations/base.py
+++ b/src/sentry/integrations/base.py
@@ -130,6 +130,17 @@ class IntegrationProvider(PipelineProvider):
         >>>         'name': state['name'],
         >>>         'metadata': {url': state['url']},
         >>>     }
+
+        This can return the 'expect_exists' flag, and this method  will expect
+        that the passed 'external_id' exists and will not attempt to recreate
+        or update the integration.
+
+        >>> def build_integration(self, state):
+        >>>    return {
+        >>>        'external_id': state['id'],
+        >>>        'expect_exists': True,
+        >>>    }
+
         """
         raise NotImplementedError
 
diff --git a/src/sentry/integrations/pipeline.py b/src/sentry/integrations/pipeline.py
index bf596674be..3b43e16062 100644
--- a/src/sentry/integrations/pipeline.py
+++ b/src/sentry/integrations/pipeline.py
@@ -53,7 +53,13 @@ class IntegrationPipeline(Pipeline):
         return response
 
     def _finish_pipeline(self, data):
-        integration = ensure_integration(self.provider.key, data)
+        if 'expect_exists' in data:
+            integration = Integration.objects.get(
+                provider=self.provider.key,
+                external_id=data['external_id'],
+            )
+        else:
+            integration = ensure_integration(self.provider.key, data)
         integration.add_organization(self.organization.id)
 
         # Does this integration provide a user identity for the user setting up
diff --git a/tests/sentry/integrations/test_pipeline.py b/tests/sentry/integrations/test_pipeline.py
new file mode 100644
index 0000000000..b4f59d2ff7
--- /dev/null
+++ b/tests/sentry/integrations/test_pipeline.py
@@ -0,0 +1,90 @@
+from __future__ import absolute_import
+
+from sentry.models import Integration, OrganizationIntegration
+from sentry.testutils import IntegrationTestCase
+from sentry.integrations.example import ExampleIntegrationProvider
+
+
+class FinishPipelineTestCase(IntegrationTestCase):
+    provider = ExampleIntegrationProvider
+
+    def setUp(self):
+        super(FinishPipelineTestCase, self).setUp()
+        self.original_build_integration = self.provider.build_integration
+        self.provider.build_integration = lambda self, data: data
+        self.external_id = 'dummy_id-123'
+
+    def tearDown(self):
+        self.provider.build_integration = self.original_build_integration
+
+    def test_with_data(self):
+        data = {
+            'external_id': self.external_id,
+            'name': 'Name',
+            'metadata': {'url': 'https://example.com'},
+        }
+        self.pipeline.state.data = data
+        resp = self.pipeline.finish_pipeline()
+
+        self.assertDialogSuccess(resp)
+
+        integration = Integration.objects.get(
+            provider=self.provider.key,
+            external_id=self.external_id,
+        )
+        assert integration.name == data['name']
+        assert integration.metadata == data['metadata']
+        assert OrganizationIntegration.objects.filter(
+            organization_id=self.organization.id,
+            integration_id=integration.id,
+        ).exists()
+
+    def test_with_expect_exists(self):
+        old_integration = Integration.objects.create(
+            provider=self.provider.key,
+            external_id=self.external_id,
+            name='Tester',
+        )
+        self.pipeline.state.data = {
+            'expect_exists': True,
+            'external_id': self.external_id,
+        }
+        resp = self.pipeline.finish_pipeline()
+
+        self.assertDialogSuccess(resp)
+        integration = Integration.objects.get(
+            provider=self.provider.key,
+            external_id=self.external_id,
+        )
+        assert integration.name == old_integration.name
+        assert OrganizationIntegration.objects.filter(
+            organization_id=self.organization.id,
+            integration_id=integration.id,
+        ).exists()
+
+    def test_expect_exists_does_not_update(self):
+        old_integration = Integration.objects.create(
+            provider=self.provider.key,
+            external_id=self.external_id,
+            name='Tester',
+            metadata={'url': 'https://example.com'},
+        )
+        self.pipeline.state.data = {
+            'expect_exists': True,
+            'external_id': self.external_id,
+            'name': 'Should Not Update',
+            'metadata': {'url': 'https://wrong.com'},
+        }
+        resp = self.pipeline.finish_pipeline()
+
+        self.assertDialogSuccess(resp)
+        integration = Integration.objects.get(
+            provider=self.provider.key,
+            external_id=self.external_id,
+        )
+        assert integration.name == old_integration.name
+        assert integration.metadata == old_integration.metadata
+        assert OrganizationIntegration.objects.filter(
+            organization_id=self.organization.id,
+            integration_id=integration.id,
+        ).exists()
