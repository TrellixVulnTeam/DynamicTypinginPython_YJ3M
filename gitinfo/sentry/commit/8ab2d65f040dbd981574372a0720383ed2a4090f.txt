commit 8ab2d65f040dbd981574372a0720383ed2a4090f
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Jun 22 15:02:18 2013 -0700

    Improve documentation and usability around mail, making it no longer appear like a typical plugin, but rather a builtin system

diff --git a/src/sentry/plugins/base.py b/src/sentry/plugins/base.py
index ce5496e99b..2022d8c1e1 100644
--- a/src/sentry/plugins/base.py
+++ b/src/sentry/plugins/base.py
@@ -150,6 +150,7 @@ class IPlugin(local):
 
     # Global enabled state
     enabled = True
+    can_disable = True
 
     # Should this plugin be enabled by default for projects?
     project_default_enabled = False
@@ -167,6 +168,8 @@ class IPlugin(local):
         """
         if not self.enabled:
             return False
+        if not self.can_disable:
+            return True
         if not self.can_enable_for_projects():
             return True
 
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 29e7db7215..0fe12954ba 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -14,9 +14,7 @@ from sentry.constants import MEMBER_USER
 
 
 class NotificationConfigurationForm(forms.Form):
-    send_to_members = forms.BooleanField(
-        label=_('Include project members'), initial=False, required=False,
-        help_text=_('Notify members of this project.'))
+    pass
 
 
 class BaseNotificationUserOptionsForm(forms.Form):
@@ -132,9 +130,6 @@ class NotificationPlugin(Plugin):
 
         The logic for this is a bit complicated, but it does the following:
 
-        - Includes members if ``send_to_members`` is enabled **and** the user has not disabled alerts
-          for this project
-
         The results of this call can be fairly expensive to calculate, so the send_to list gets cached
         for 60 seconds.
         """
@@ -149,8 +144,7 @@ class NotificationPlugin(Plugin):
         if send_to_list is None:
             send_to_list = set()
 
-            send_to_members = self.get_option('send_to_members', project)
-            if send_to_members and project and project.team:
+            if project and project.team:
                 member_set = self.get_sendable_users(project)
                 send_to_list |= set(self.get_emails_for_users(member_set))
 
@@ -187,9 +181,6 @@ class NotificationPlugin(Plugin):
 
     ## plugin hooks
 
-    def get_form_initial(self, project=None):
-        return {'send_to_members': True}
-
     def post_process(self, group, event, is_new, is_sample, **kwargs):
         if not is_new:
             return
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 6ad34c0f77..8930302156 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -7,26 +7,18 @@ sentry.plugins.sentry_mail.models
 """
 import sentry
 
-from django import forms
 from django.core.mail import EmailMultiAlternatives
-from django.core.validators import email_re, ValidationError
 from django.core.urlresolvers import reverse
 from django.template.loader import render_to_string
 from django.utils.translation import ugettext_lazy as _
 from sentry.conf import settings
 from sentry.plugins import register
-from sentry.plugins.bases.notify import (
-    NotificationPlugin, NotificationConfigurationForm,
-    NotificationUserOptionsForm)
-from sentry.utils.cache import cache
+from sentry.plugins.bases.notify import NotificationPlugin
 from sentry.utils.http import absolute_uri
 
-import re
-
 from pynliner import Pynliner
 
 NOTSET = object()
-split_re = re.compile(r'\s*,\s*|\s+')
 
 
 class UnicodeSafePynliner(Pynliner):
@@ -40,22 +32,7 @@ class UnicodeSafePynliner(Pynliner):
         return self.output
 
 
-class MailConfigurationForm(NotificationConfigurationForm):
-    send_to = forms.CharField(label=_('Send to'), required=False,
-        help_text=_('Enter one or more emails separated by commas or lines.'),
-        widget=forms.Textarea(attrs={
-            'placeholder': 'you@example.com'}))
-
-    def clean_send_to(self):
-        value = self.cleaned_data['send_to']
-        emails = filter(bool, split_re.split(value))
-        for email in emails:
-            if not email_re.match(email):
-                raise ValidationError('%s is not a valid e-mail address.' % (email,))
-        return ','.join(emails)
-
-
-class MailProcessor(NotificationPlugin):
+class MailPlugin(NotificationPlugin):
     title = _('Mail')
     conf_key = 'mail'
     slug = 'mail'
@@ -63,17 +40,9 @@ class MailProcessor(NotificationPlugin):
     author = "Sentry Team"
     author_url = "https://github.com/getsentry/sentry"
     project_default_enabled = True
-    project_conf_form = MailConfigurationForm
-
-    def __init__(self, min_level=0, include_loggers=None, exclude_loggers=None,
-                 send_to=None, send_to_members=True, *args, **kwargs):
-        super(MailProcessor, self).__init__(*args, **kwargs)
-        self.min_level = min_level
-        self.include_loggers = include_loggers
-        self.exclude_loggers = exclude_loggers
-        self.send_to = send_to
-        self.send_to_members = send_to_members
-        self.subject_prefix = settings.EMAIL_SUBJECT_PREFIX
+    project_conf_form = None
+    can_disable = False
+    subject_prefix = settings.EMAIL_SUBJECT_PREFIX
 
     def _send_mail(self, subject, body, html_body=None, project=None, fail_silently=False, headers=None):
         send_to = self.get_send_to(project)
@@ -103,45 +72,6 @@ class MailProcessor(NotificationPlugin):
     def get_notification_settings_url(self):
         return absolute_uri(reverse('sentry-account-settings-notifications'))
 
-    def get_send_to(self, project=None):
-        """
-        Returns a list of email addresses for the users that should be notified of alerts.
-
-        The logic for this is a bit complicated, but it does the following:
-
-        - Includes members if ``send_to_members`` is enabled **and** the user has not disabled alerts
-          for this project
-
-        The results of this call can be fairly expensive to calculate, so the send_to list gets cached
-        for 60 seconds.
-        """
-        if project:
-            project_id = project.pk
-        else:
-            project_id = ''
-        conf_key = self.get_conf_key()
-        cache_key = '%s:send_to:%s' % (conf_key, project_id)
-
-        send_to_list = cache.get(cache_key)
-        if send_to_list is None:
-            send_to_list = self.get_option('send_to', project) or []
-
-            if isinstance(send_to_list, basestring):
-                send_to_list = [s.strip() for s in send_to_list.split(',')]
-
-            send_to_list = set(send_to_list)
-
-            send_to_members = self.get_option('send_to_members', project)
-            if send_to_members and project and project.team:
-                member_set = self.get_sendable_users(project)
-                send_to_list |= set(self.get_emails_for_users(member_set))
-
-            send_to_list = set(s for s in send_to_list if s)
-
-            cache.set(cache_key, send_to_list, 60)  # 1 minute cache
-
-        return send_to_list
-
     def on_alert(self, alert):
         project = alert.project
         subject = '[{0}] ALERT: {1}'.format(
@@ -231,15 +161,8 @@ class MailProcessor(NotificationPlugin):
             'settings_link': self.get_notification_settings_url(),
         })).run()
 
-    def get_option(self, key, *args, **kwargs):
-        value = super(MailProcessor, self).get_option(key, *args, **kwargs)
-        if value is None and key in ('min_level', 'include_loggers', 'exclude_loggers',
-                                     'send_to_members', 'send_to',
-                                     'subject_prefix'):
-            value = getattr(self, key)
-        return value
 
-    def get_notification_forms(self, **kwargs):
-        return [NotificationUserOptionsForm]
+# Legacy compatibility
+MailProcessor = MailPlugin
 
-register(MailProcessor)
+register(MailPlugin)
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 00ea529f77..3fbf5ab7db 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -101,9 +101,9 @@
     </ul>
     {% with project|get_plugins as plugins %}
         <ul class="nav nav-list">
-            <li class="nav-header">{% trans "Plugins" %}</li>
+            <li class="nav-header">{% trans "Integrations" %}</li>
             <li class="{% if page == 'plugins' %} active{% endif %}">
-                <a href="{% url 'sentry-manage-project-plugins' project.team.slug project.slug %}">{% trans "Manage Plugins" %} ({{ PLUGINS|length }})</a>
+                <a href="{% url 'sentry-manage-project-plugins' project.team.slug project.slug %}">{% trans "Manage Integrations" %} ({{ PLUGINS|length }})</a>
             </li>
             {% for p in plugins %}
                 <li{% if page == 'plugin' and plugin.slug == p.slug %} class="active"{% endif %}>
diff --git a/src/sentry/templates/sentry/projects/notifications.html b/src/sentry/templates/sentry/projects/notifications.html
index 45d1bbf943..48d316e7e6 100644
--- a/src/sentry/templates/sentry/projects/notifications.html
+++ b/src/sentry/templates/sentry/projects/notifications.html
@@ -13,10 +13,18 @@
     <form action="" method="post" class="form-stacked">
         {% csrf_token %}
 
+        <div class="page-header">
+            <h3>{% trans "Events" %}</h3>
+        </div>
+
+        <p>{% trans "Sentry will automatically notify you whenever an event is first seen, or its state changes from resolved to unresolved." %}</p>
+
         <div class="page-header">
             <h3>{% trans "Alerts" %}</h3>
         </div>
-        <p>{% trans "Alerts are calculated based on the acceleration of an event. Values represent a 60-second interval." %}
+
+        <p>{% blocktrans %}Alerts are triggered when the rate of events for the entire project increase by a relative amount. Values represent a 60-second interval.{% endblocktrans %}</p>
+
         {{ alert_form|as_crispy_errors }}
 
         {% for field in alert_form %}
diff --git a/src/sentry/templates/sentry/projects/plugins/configure.html b/src/sentry/templates/sentry/projects/plugins/configure.html
index 7066d8110e..80d996d80d 100644
--- a/src/sentry/templates/sentry/projects/plugins/configure.html
+++ b/src/sentry/templates/sentry/projects/plugins/configure.html
@@ -6,15 +6,17 @@
 {% block inner %}
     <div class="page-header">
         <div class="pull-right">
-            {% if not plugin_is_enabled %}
-                <a href="{% url 'sentry-enable-project-plugin' project.team.slug project.slug plugin.slug %}" class="btn">{% trans "Enable Plugin" %}</a>
-            {% else %}
-                <a href="{% url 'sentry-disable-project-plugin' project.team.slug project.slug plugin.slug %}" class="btn">{% trans "Disable Plugin" %}</a>
+            {% if plugin.can_disable %}
+                {% if not plugin_is_enabled %}
+                    <a href="{% url 'sentry-enable-project-plugin' project.team.slug project.slug plugin.slug %}" class="btn">{% trans "Enable Plugin" %}</a>
+                {% else %}
+                    <a href="{% url 'sentry-disable-project-plugin' project.team.slug project.slug plugin.slug %}" class="btn">{% trans "Disable Plugin" %}</a>
+                {% endif %}
             {% endif %}
             <a href="{% url 'sentry-reset-project-plugin' project.team.slug project.slug plugin.slug %}" class="btn"
                 onclick="return confirm('{% trans "Are you sure you wish to reset all configuration for this plugin?" %}');">{% trans "Reset Configuration" %}</a>
         </div>
-        <h2>{% trans "Configure Plugin" %}</h2>
+        <h2>{% blocktrans with plugin.get_title as name %}Configure {{ name }}{% endblocktrans %}</h2>
     </div>
     <div class="row-fluid">
         <div class="span8">
diff --git a/src/sentry/templates/sentry/projects/plugins/list.html b/src/sentry/templates/sentry/projects/plugins/list.html
index 4318791625..70108b8530 100644
--- a/src/sentry/templates/sentry/projects/plugins/list.html
+++ b/src/sentry/templates/sentry/projects/plugins/list.html
@@ -4,18 +4,18 @@
 {% load sentry_helpers %}
 {% load sentry_plugins %}
 
-{% block title %}{% trans "Manage Plugins" %} | {{ block.super }}{% endblock %}
+{% block title %}{% trans "Manage Integrations" %} | {{ block.super }}{% endblock %}
 
 {% block inner %}
     <div class="page-header">
-        <h2>{% trans "Manage Plugins" %}</h2>
+        <h2>{% trans "Manage Integrations" %}</h2>
     </div>
     <form method="POST">
         {% csrf_token %}
         <table class="table table-striped">
             <thead>
                 <tr>
-                    <th>{% trans "Plugin" %}</th>
+                    <th>{% trans "Integration" %}</th>
                     <th style="width:100px;text-align:center;">{% trans "Version" %}</th>
                     <th style="width:100px;text-align:center;">{% trans "Enabled" %}</th>
                 </tr>
@@ -38,7 +38,7 @@
                             {% if plugin.version %}{{ plugin.version }}{% else %}<em>{% trans "n/a" %}</em>{% endif %}
                         </td>
                         <td style="text-align:center;">
-                            {% if plugin.can_enable_for_projects %}
+                            {% if plugin.can_disable and plugin.can_enable_for_projects %}
                                 <input type="checkbox" name="plugin" value="{{ plugin.slug }}"{% if is_enabled %} checked="checked"{% endif %}/>
                             {% else %}
                                 <em>{% trans "n/a" %}</em>
diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index 103c941d01..4b9e49b100 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -149,10 +149,12 @@ class EditProjectForm(BaseProjectForm):
 
 
 class AlertSettingsForm(forms.Form):
-    pct_threshold = RangeField(label=_('Threshold'), help_text=_('Notify when an event increases by this percentage.'),
-        required=False, min_value=0, max_value=1000, step_value=100)
-    min_events = forms.IntegerField(label=_('Minimum Events'), help_text=_('Generate an alert only when an event is seen more than this many times during the interval.'),
-        required=False, min_value=0)
+    pct_threshold = RangeField(
+        label=_('Threshold'), required=False, min_value=0, max_value=1000, step_value=100,
+        help_text=_('Notify when the rate of events increases by this percentage.'))
+    min_events = forms.IntegerField(
+        label=_('Minimum Events'), required=False, min_value=0,
+        help_text=_('Generate an alert only when an event is seen more than this many times during the interval.'),)
 
 
 class NotificationTagValuesForm(forms.Form):
diff --git a/src/sentry/web/frontend/projects.py b/src/sentry/web/frontend/projects.py
index d49c6f7dce..7d725c2597 100644
--- a/src/sentry/web/frontend/projects.py
+++ b/src/sentry/web/frontend/projects.py
@@ -350,10 +350,12 @@ def enable_project_plugin(request, team, project, slug):
     try:
         plugin = plugins.get(slug)
     except KeyError:
-        return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug]))
+        return HttpResponseRedirect(reverse('sentry-manage-project-plugins', args=[project.team.slug, project.slug]))
+
+    redirect_to = reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug])
 
     if plugin.is_enabled(project) or not plugin.can_enable_for_projects():
-        return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug]))
+        return HttpResponseRedirect(redirect_to)
 
     result = plugins.first('has_perm', request.user, 'configure_project_plugin', project, plugin)
     if result is False and not request.user.is_superuser:
@@ -361,7 +363,7 @@ def enable_project_plugin(request, team, project, slug):
 
     plugin.set_option('enabled', True, project)
 
-    return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug]))
+    return HttpResponseRedirect(redirect_to)
 
 
 @has_access(MEMBER_OWNER)
@@ -370,10 +372,12 @@ def disable_project_plugin(request, team, project, slug):
     try:
         plugin = plugins.get(slug)
     except KeyError:
-        return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug]))
+        return HttpResponseRedirect(reverse('sentry-manage-project-plugins', args=[project.team.slug, project.slug]))
 
-    if not plugin.is_enabled(project) or not plugin.can_enable_for_projects():
-        return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug]))
+    redirect_to = reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug])
+
+    if not (plugin.can_disable and plugin.is_enabled(project) and plugin.can_enable_for_projects()):
+        return HttpResponseRedirect(redirect_to)
 
     result = plugins.first('has_perm', request.user, 'configure_project_plugin', project, plugin)
     if result is False and not request.user.is_superuser:
@@ -381,4 +385,4 @@ def disable_project_plugin(request, team, project, slug):
 
     plugin.set_option('enabled', False, project)
 
-    return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug]))
+    return HttpResponseRedirect(redirect_to)
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index d43e5f29e9..f3b956677f 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -6,65 +6,22 @@ import mock
 from mock import Mock
 from django.utils import timezone
 from sentry.interfaces import Stacktrace
-from sentry.models import Alert, Event, Group, Project, AccessGroup
-from sentry.plugins.sentry_mail.models import MailProcessor
+from sentry.models import Alert, Event, Group, AccessGroup
+from sentry.plugins.sentry_mail.models import MailPlugin
 from sentry.testutils import TestCase, fixture
 
 
-class MailProcessorTest(TestCase):
+class MailPluginTest(TestCase):
     @fixture
     def plugin(self):
-        return MailProcessor()
+        return MailPlugin()
 
     @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
-    @mock.patch('sentry.plugins.sentry_mail.models.MailProcessor.get_send_to', Mock(return_value=[]))
+    @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin.get_send_to', Mock(return_value=[]))
     def test_should_notify_no_send_to(self):
         assert not self.plugin.should_notify(group=Mock(), event=Mock())
 
-    @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
-    @mock.patch('sentry.plugins.sentry_mail.models.MailProcessor.get_send_to', Mock(return_value=['foo@example.com']))
-    def test_should_notify_not_min_level(self):
-        p = MailProcessor(min_level=2)
-        group = Mock(spec=Group)
-        group.project = Project()
-        group.level = 1
-        self.assertFalse(p.should_notify(group=group, event=Mock()))
-
-    @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
-    @mock.patch('sentry.plugins.sentry_mail.models.MailProcessor.get_send_to', Mock(return_value=['foo@example.com']))
-    def test_should_notify_not_included(self):
-        p = MailProcessor(min_level=None, include_loggers=['foo'])
-        group = Mock(spec=Group)
-        group.project = Project()
-        group.level = 5
-        group.logger = 'root'
-        self.assertFalse(p.should_notify(group=group, event=Mock()))
-
-    @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
-    @mock.patch('sentry.plugins.sentry_mail.models.MailProcessor.get_send_to', Mock(return_value=['foo@example.com']))
-    def test_should_notify_excluded(self):
-        p = MailProcessor(min_level=None, exclude_loggers=['root'])
-        group = Mock(spec=Group)
-        group.project = Project()
-        group.level = 5
-        group.logger = 'root'
-        self.assertFalse(p.should_notify(group=group, event=Mock()))
-
-    @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
-    @mock.patch('sentry.plugins.sentry_mail.models.MailProcessor.get_send_to', Mock(return_value=['foo@example.com']))
-    def test_should_notify_match(self):
-        p = MailProcessor(min_level=None)
-        group = Mock(spec=Group)
-        group.level = 5
-        group.project = Project()
-        group.logger = 'root'
-        event = Mock()
-        event.data = {}
-        self.assertTrue
-
-        (p.should_notify(group=group, event=event))
-
-    @mock.patch('sentry.plugins.sentry_mail.models.MailProcessor._send_mail')
+    @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin._send_mail')
     def test_notify_users_renders_interfaces(self, _send_mail):
         group = Group(
             id=2,
@@ -85,13 +42,12 @@ class MailProcessorTest(TestCase):
         event.interfaces = {'sentry.interfaces.Stacktrace': stacktrace}
 
         with self.Settings(SENTRY_URL_PREFIX='http://example.com'):
-            p = MailProcessor(send_to=['foo@example.com'])
-            p.notify_users(group, event)
+            self.plugin.notify_users(group, event)
 
         stacktrace.get_title.assert_called_once_with()
         stacktrace.to_string.assert_called_once_with(event)
 
-    @mock.patch('sentry.plugins.sentry_mail.models.MailProcessor._send_mail')
+    @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin._send_mail')
     def test_notify_users_renders_interfaces_with_utf8(self, _send_mail):
         group = Group(
             id=2,
@@ -112,13 +68,12 @@ class MailProcessorTest(TestCase):
         event.interfaces = {'sentry.interfaces.Stacktrace': stacktrace}
 
         with self.Settings(SENTRY_URL_PREFIX='http://example.com'):
-            p = MailProcessor(send_to=['foo@example.com'])
-            p.notify_users(group, event)
+            self.plugin.notify_users(group, event)
 
         stacktrace.get_title.assert_called_once_with()
         stacktrace.to_string.assert_called_once_with(event)
 
-    @mock.patch('sentry.plugins.sentry_mail.models.MailProcessor._send_mail')
+    @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin._send_mail')
     def test_notify_users_renders_interfaces_with_utf8_fix_issue_422(self, _send_mail):
         group = Group(
             id=2,
@@ -139,13 +94,12 @@ class MailProcessorTest(TestCase):
         event.interfaces = {'sentry.interfaces.Stacktrace': stacktrace}
 
         with self.Settings(SENTRY_URL_PREFIX='http://example.com'):
-            p = MailProcessor(send_to=['foo@example.com'])
-            p.notify_users(group, event)
+            self.plugin.notify_users(group, event)
 
         stacktrace.get_title.assert_called_once_with()
         stacktrace.to_string.assert_called_once_with(event)
 
-    @mock.patch('sentry.plugins.sentry_mail.models.MailProcessor._send_mail')
+    @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin._send_mail')
     def test_notify_users_does_email(self, _send_mail):
         group = Group(
             id=2,
@@ -163,8 +117,7 @@ class MailProcessorTest(TestCase):
         )
 
         with self.Settings(SENTRY_URL_PREFIX='http://example.com'):
-            p = MailProcessor(send_to=['foo@example.com'])
-            p.notify_users(group, event)
+            self.plugin.notify_users(group, event)
 
         _send_mail.assert_called_once()
         args, kwargs = _send_mail.call_args
@@ -172,7 +125,7 @@ class MailProcessorTest(TestCase):
         self.assertEquals(kwargs.get('project'), self.project)
         assert kwargs.get('subject') == u"[{0}] ERROR: hello world".format(self.project.name)
 
-    @mock.patch('sentry.plugins.sentry_mail.models.MailProcessor._send_mail')
+    @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin._send_mail')
     def test_multiline_error(self, _send_mail):
         group = Group(
             id=2,
@@ -190,42 +143,12 @@ class MailProcessorTest(TestCase):
         )
 
         with self.Settings(SENTRY_URL_PREFIX='http://example.com'):
-            p = MailProcessor(send_to=['foo@example.com'])
-            p.notify_users(group, event)
+            self.plugin.notify_users(group, event)
 
         _send_mail.assert_called_once()
         args, kwargs = _send_mail.call_args
         assert kwargs.get('subject') == u"[{0}] ERROR: hello world".format(self.project.name)
 
-    @mock.patch('sentry.utils.cache.cache.get', mock.Mock(return_value=None))
-    @mock.patch('sentry.models.ProjectOption.objects.get_value')
-    @mock.patch('sentry.plugins.sentry_mail.models.MailProcessor.get_sendable_users')
-    @mock.patch('sentry.plugins.sentry_mail.models.MailProcessor.get_emails_for_users')
-    def test_send_to(self, get_emails_for_users, get_sendable_users, get_value):
-        opts = {}
-
-        member_emails = ['2', '3']
-        project_emails = ['2', '4']
-
-        get_value.side_effect = lambda p, k, d: opts.get(k, d)
-        get_emails_for_users.side_effect = lambda x: x
-        get_sendable_users.return_value = member_emails
-
-        project = mock.Mock()
-        project.id = 1
-        project.pk = project.id
-
-        p = MailProcessor()
-        # member emails without admins
-        self.assertEqual(sorted(set(member_emails)),
-                         sorted(p.get_send_to(project)))
-
-        # project emails without members
-        opts = {'mail:send_to': ','.join(project_emails),
-                'mail:send_to_members': False}
-        self.assertEqual(sorted(set(project_emails)),
-                         sorted(p.get_send_to(project)))
-
     def test_get_emails_for_users(self):
         from sentry.models import UserOption, User
 
@@ -269,7 +192,7 @@ class MailProcessorTest(TestCase):
 
         assert user2.pk not in self.plugin.get_sendable_users(project)
 
-    @mock.patch('sentry.plugins.sentry_mail.models.MailProcessor._send_mail')
+    @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin._send_mail')
     def test_on_alert(self, _send_mail):
         alert = Alert.objects.create(message='This is a test alert', project=self.project)
 
