commit 51169114f219857f8c230d24b017c7713b5fd730
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Mon Jun 18 16:22:12 2018 -0500

    feat(snuba): Implement get_group_event_filter (formerly get_group_eveâ€¦ (#8728)
    
    * feat(snuba): Implement get_group_event_filter (formerly get_group_event_ids)
    
    In order to hit Snuba to search tags within an event the tagstore
    interface had to change slightly. This isn't a long term solution,
    eventually we'll probably want Event search to be its own service
    abstraction (like issue search) and all (or almost all) of the search
    can be implemented in a single Snuba query.
    
    For now this kicks the can down the road so we can continue comparison
    testing.

diff --git a/src/sentry/api/endpoints/group_events.py b/src/sentry/api/endpoints/group_events.py
index 00ab6c7201..320b48df2d 100644
--- a/src/sentry/api/endpoints/group_events.py
+++ b/src/sentry/api/endpoints/group_events.py
@@ -92,17 +92,17 @@ class GroupEventsEndpoint(GroupEndpoint, EnvironmentMixin):
             events = events.filter(q)
 
         if tags:
-            event_ids = tagstore.get_group_event_ids(
+            event_filter = tagstore.get_group_event_filter(
                 group.project_id,
                 group.id,
                 environment.id if environment is not None else None,
                 tags,
             )
 
-            if not event_ids:
+            if not event_filter:
                 return respond(events.none())
 
-            events = events.filter(id__in=event_ids)
+            events = events.filter(**event_filter)
 
         # filter out events which are beyond the retention period
         retention = quotas.get_event_retention(organization=group.project.organization)
diff --git a/src/sentry/tagstore/base.py b/src/sentry/tagstore/base.py
index ef88e2dec3..4d752ed8ac 100644
--- a/src/sentry/tagstore/base.py
+++ b/src/sentry/tagstore/base.py
@@ -43,7 +43,7 @@ class TagStorage(Service):
         'get_group_list_tag_value',
 
         'get_groups_user_counts',
-        'get_group_event_ids',
+        'get_group_event_filter',
         'get_group_tag_value_count',
         'get_top_group_tag_values',
         'get_first_release',
@@ -288,9 +288,9 @@ class TagStorage(Service):
         """
         raise NotImplementedError
 
-    def get_group_event_ids(self, project_id, group_id, environment_id, tags):
+    def get_group_event_filter(self, project_id, group_id, environment_id, tags):
         """
-        >>> get_group_event_ids(1, 2, 3, {'key1': 'value1', 'key2': 'value2'})
+        >>> get_group_event_filter(1, 2, 3, {'key1': 'value1', 'key2': 'value2'})
         """
         raise NotImplementedError
 
diff --git a/src/sentry/tagstore/legacy/backend.py b/src/sentry/tagstore/legacy/backend.py
index 045cf04b2f..34a76efefc 100644
--- a/src/sentry/tagstore/legacy/backend.py
+++ b/src/sentry/tagstore/legacy/backend.py
@@ -439,7 +439,7 @@ class LegacyTagStorage(TagStorage):
                     },
                     extra=extra)
 
-    def get_group_event_ids(self, project_id, group_id, environment_id, tags):
+    def get_group_event_filter(self, project_id, group_id, environment_id, tags):
         tagkeys = dict(
             models.TagKey.objects.filter(
                 project_id=project_id,
@@ -464,7 +464,7 @@ class LegacyTagStorage(TagStorage):
         except KeyError:
             # one or more tags were invalid, thus the result should be an empty
             # set
-            return set()
+            return None
 
         # Django doesnt support union, so we limit results and try to find
         # reasonable matches
@@ -491,9 +491,9 @@ class LegacyTagStorage(TagStorage):
                 ).values_list('event_id', flat=True)[:1000]
             )
             if not matches:
-                return set()
+                return None
 
-        return set(matches)
+        return {'id__in': set(matches)}
 
     def get_groups_user_counts(self, project_id, group_ids, environment_id):
         qs = models.GroupTagKey.objects.filter(
diff --git a/src/sentry/tagstore/snuba/backend.py b/src/sentry/tagstore/snuba/backend.py
index b947f2ac02..786e98555a 100644
--- a/src/sentry/tagstore/snuba/backend.py
+++ b/src/sentry/tagstore/snuba/backend.py
@@ -380,10 +380,23 @@ class SnubaTagStorage(TagStorage):
                              referrer='tagstore.get_groups_user_counts')
         return defaultdict(int, {k: v for k, v in result.items() if v})
 
-    def get_group_event_ids(self, project_id, group_id, environment_id, tags):
-        # This method is not implemented since the `event.id` column doesn't
-        # exist in Snuba.
-        raise NotImplementedError
+    def get_group_event_filter(self, project_id, group_id, environment_id, tags):
+        start, end = self.get_time_range()
+        filters = {
+            'project_id': [project_id],
+            'environment': [environment_id],
+            'issue': [group_id],
+        }
+
+        conditions = [[['tags[{}]'.format(k), '=', v] for (k, v) in tags.items()]]
+
+        result = snuba.query(start, end, groupby=['event_id'], conditions=conditions,
+            filter_keys=filters, limit=1000, referrer='tagstore.get_group_event_filter')
+
+        if not result:
+            return None
+
+        return {'event_id__in': set(result.keys())}
 
     def get_group_ids_for_search_filter(
             self, project_id, environment_id, tags, candidates=None, limit=1000):
diff --git a/src/sentry/tagstore/v2/backend.py b/src/sentry/tagstore/v2/backend.py
index ff2f9b86a1..1a49356b78 100644
--- a/src/sentry/tagstore/v2/backend.py
+++ b/src/sentry/tagstore/v2/backend.py
@@ -652,7 +652,7 @@ class V2TagStorage(TagStorage):
                         },
                         extra=extra)
 
-    def get_group_event_ids(self, project_id, group_id, environment_id, tags):
+    def get_group_event_filter(self, project_id, group_id, environment_id, tags):
         # NOTE: `environment_id=None` needs to be filtered differently in this method.
         # EventTag never has NULL `environment_id` fields (individual Events always have an environment),
         # and so `environment_id=None` needs to query EventTag for *all* environments (except, ironically
@@ -691,7 +691,7 @@ class V2TagStorage(TagStorage):
         except KeyError:
             # one or more tags were invalid, thus the result should be an empty
             # set
-            return set()
+            return None
 
         # Django doesnt support union, so we limit results and try to find
         # reasonable matches
@@ -720,9 +720,9 @@ class V2TagStorage(TagStorage):
                 ).values_list('event_id', flat=True)[:1000]
             )
             if not matches:
-                return set()
+                return None
 
-        return set(matches)
+        return {'id__in': set(matches)}
 
     def get_groups_user_counts(self, project_id, group_ids, environment_id):
         qs = models.GroupTagKey.objects.filter(
@@ -922,7 +922,7 @@ class V2TagStorage(TagStorage):
 
         # ANY matches should come last since they're the least specific and
         # will provide the largest range of matches
-        tag_lookups = sorted(six.iteritems(tags), key=lambda (k, v): v == ANY)
+        tag_lookups = sorted(six.iteritems(tags), key=lambda k_v: k_v[1] == ANY)
 
         # get initial matches to start the filter
         matches = candidates or []
diff --git a/tests/sentry/tagstore/v2/test_backend.py b/tests/sentry/tagstore/v2/test_backend.py
index 19f9143618..177c661aa3 100644
--- a/tests/sentry/tagstore/v2/test_backend.py
+++ b/tests/sentry/tagstore/v2/test_backend.py
@@ -423,7 +423,7 @@ class TagStorage(TestCase):
 
         assert models.GroupTagValue.objects.count() == 0
 
-    def test_get_group_event_ids(self):
+    def test_get_group_event_filter(self):
         tags = {
             'abc': 'xyz',
             'foo': 'bar',
@@ -455,12 +455,12 @@ class TagStorage(TestCase):
             tags=different_tags.items(),
         )
 
-        assert len(
-            self.ts.get_group_event_ids(
-                self.proj1.id,
-                self.proj1group1.id,
-                self.proj1env1.id,
-                tags)) == 2
+        assert self.ts.get_group_event_filter(
+            self.proj1.id,
+            self.proj1group1.id,
+            self.proj1env1.id,
+            tags
+        ) == {'id__in': set([self.proj1group1event1.id, self.proj1group1event2.id])}
 
     def test_get_groups_user_counts(self):
         k1, _ = self.ts.get_or_create_group_tag_key(
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index 92d95acb5f..8ad8c273b2 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -235,12 +235,12 @@ class IndexEventTagsTest(TestCase):
                 tags=[('foo', 'bar'), ('biz', 'baz')],
             )
 
-        assert tagstore.get_group_event_ids(
+        assert tagstore.get_group_event_filter(
             self.project.id,
             group.id,
             self.environment.id,
             {'foo': 'bar', 'biz': 'baz'},
-        ) == set([event.id])
+        ) == {'id__in': set([event.id])}
 
         # ensure it safely handles repeat runs
         with self.tasks():
@@ -253,9 +253,9 @@ class IndexEventTagsTest(TestCase):
                 tags=[('foo', 'bar'), ('biz', 'baz')],
             )
 
-        assert tagstore.get_group_event_ids(
+        assert tagstore.get_group_event_filter(
             self.project.id,
             group.id,
             self.environment.id,
             {'foo': 'bar', 'biz': 'baz'},
-        ) == set([event.id])
+        ) == {'id__in': set([event.id])}
diff --git a/tests/snuba/tagstore/test_tagstore_backend.py b/tests/snuba/tagstore/test_tagstore_backend.py
index 105855f9ac..92d78eea0b 100644
--- a/tests/snuba/tagstore/test_tagstore_backend.py
+++ b/tests/snuba/tagstore/test_tagstore_backend.py
@@ -301,17 +301,17 @@ class TagStorageTest(SnubaTestCase):
         assert tags[0].first_seen == one_second_ago
         assert tags[0].times_seen == 1
 
-    def test_get_group_event_ids(self):
-        assert set(self.ts.get_group_event_ids(
+    def test_get_group_event_filter(self):
+        assert self.ts.get_group_event_filter(
             self.proj1.id,
             self.proj1group1.id,
             self.proj1env1.id,
             {
                 'foo': 'bar',
             }
-        )) == set(["1" * 32, "2" * 32])
+        ) == {'event_id__in': set(["1" * 32, "2" * 32])}
 
-        assert set(self.ts.get_group_event_ids(
+        assert self.ts.get_group_event_filter(
             self.proj1.id,
             self.proj1group1.id,
             self.proj1env1.id,
@@ -319,22 +319,22 @@ class TagStorageTest(SnubaTestCase):
                 'foo': 'bar',  # OR
                 'release': '200'
             }
-        )) == set(["1" * 32, "2" * 32])
+        ) == {'event_id__in': set(["1" * 32, "2" * 32])}
 
-        assert set(self.ts.get_group_event_ids(
+        assert self.ts.get_group_event_filter(
             self.proj1.id,
             self.proj1group2.id,
             self.proj1env1.id,
             {
                 'browser': 'chrome'
             }
-        )) == set(["3" * 32])
+        ) == {'event_id__in': set(["3" * 32])}
 
-        assert set(self.ts.get_group_event_ids(
+        assert self.ts.get_group_event_filter(
             self.proj1.id,
             self.proj1group2.id,
             self.proj1env1.id,
             {
                 'browser': 'ie'
             }
-        )) == set([])
+        ) is None
