commit c14b7a9b04ae1f2fe67c6f6badcfd10268813f83
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Dec 17 11:44:48 2014 -0800

    Fix/test create project permissions

diff --git a/src/sentry/web/frontend/create_project.py b/src/sentry/web/frontend/create_project.py
index e2e93d7e2e..616db53f74 100644
--- a/src/sentry/web/frontend/create_project.py
+++ b/src/sentry/web/frontend/create_project.py
@@ -1,13 +1,19 @@
 from __future__ import absolute_import
 
 from django import forms
+from django.contrib import messages
 from django.core.urlresolvers import reverse
 
-from sentry.models import OrganizationMemberType, Project, Team
+from sentry.models import (
+    OrganizationMember, OrganizationMemberType, Project, Team
+)
 from sentry.web.forms.add_project import AddProjectForm
 from sentry.web.frontend.base import OrganizationView
 
 
+ERR_NO_TEAMS = 'You cannot create a new project because there are no teams to assign it to.'
+
+
 class AddProjectWithTeamForm(AddProjectForm):
     team = forms.ChoiceField(choices=(), required=True)
 
@@ -42,21 +48,35 @@ class CreateProjectView(OrganizationView):
     # TODO(dcramer): I'm 95% certain the access is incorrect here as it would
     # be probably validating against global org access, and all we care about is
     # team admin
-    required_access = OrganizationMemberType.ADMIN
+    def get_form(self, request, organization, team_list):
+        return AddProjectWithTeamForm(request.user, team_list, request.POST or None, initial={
+            'team': request.GET.get('team'),
+        })
+
+    def has_permission(self, request, organization):
+        if organization is None:
+            return False
+        if request.user.is_superuser:
+            return True
+        # we special case permissions here as a team admin can create projects
+        # but they are restricted to only creating projects on teams where they
+        # are an admin
+        return OrganizationMember.objects.filter(
+            user=request.user,
+            type__lte=OrganizationMemberType.ADMIN,
+        )
 
-    def get_form(self, request, organization):
+    def handle(self, request, organization):
         team_list = Team.objects.get_for_user(
             organization=organization,
             user=request.user,
             access=OrganizationMemberType.ADMIN,
         )
+        if not team_list:
+            messages.error(request, ERR_NO_TEAMS)
+            return self.redirect(reverse('sentry-organization-home', args=[organization.slug]))
 
-        return AddProjectWithTeamForm(request.user, team_list, request.POST or None, initial={
-            'team': request.GET.get('team'),
-        })
-
-    def handle(self, request, organization):
-        form = self.get_form(request, organization)
+        form = self.get_form(request, organization, team_list)
         if form.is_valid():
             project = form.save(request.user, request.META['REMOTE_ADDR'])
 
diff --git a/tests/sentry/web/frontend/test_create_project.py b/tests/sentry/web/frontend/test_create_project.py
index 252ac22ca0..be85265f6c 100644
--- a/tests/sentry/web/frontend/test_create_project.py
+++ b/tests/sentry/web/frontend/test_create_project.py
@@ -3,7 +3,28 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 
 from sentry.models import Project
-from sentry.testutils import TestCase
+from sentry.testutils import TestCase, PermissionTestCase
+
+
+class CreateProjectPermissionTest(PermissionTestCase):
+    def setUp(self):
+        super(CreateProjectPermissionTest, self).setUp()
+        self.path = reverse('sentry-create-project', args=[self.organization.slug])
+
+    def test_teamless_admin_cannot_load(self):
+        self.assert_teamless_admin_cannot_access(self.path)
+
+    def test_team_member_can_load(self):
+        self.assert_team_member_cannot_access(self.path)
+
+    def test_team_admin_can_load(self):
+        self.assert_team_admin_can_access(self.path)
+
+    def test_org_member_cannot_load(self):
+        self.assert_org_member_cannot_access(self.path)
+
+    def test_org_admin_can_load(self):
+        self.assert_org_admin_can_access(self.path)
 
 
 class CreateProjectTest(TestCase):
