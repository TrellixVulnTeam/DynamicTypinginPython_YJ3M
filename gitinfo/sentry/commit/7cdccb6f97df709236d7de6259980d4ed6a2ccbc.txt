commit 7cdccb6f97df709236d7de6259980d4ed6a2ccbc
Author: Nola Chen <chen.no@husky.neu.edu>
Date:   Tue Nov 12 11:00:55 2019 -0800

    ref(app-platform): change SentryAppWebhookError foreign keys to integer fields (#15523)
    
    * remove model from state
    
    * Delete FK constraints so Django works
    
    * fix constraint names
    
    * Actually add the operations field in the migration
    
    * remove db stuff
    
    * Turn FKs into Integer fields
    
    * Ensure naming of fields is correct
    
    * Ensure naming of fields is correct

diff --git a/src/sentry/api/serializers/models/sentry_app_webhook_error.py b/src/sentry/api/serializers/models/sentry_app_webhook_error.py
deleted file mode 100644
index 22c29f50e0..0000000000
--- a/src/sentry/api/serializers/models/sentry_app_webhook_error.py
+++ /dev/null
@@ -1,24 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.api.serializers import Serializer, register
-from sentry.models import SentryAppWebhookError
-
-
-@register(SentryAppWebhookError)
-class SentryAppWebhookErrorSerializer(Serializer):
-    def serialize(self, obj, attrs, user):
-        data = {
-            "app": {
-                "uuid": obj.sentry_app.uuid,
-                "slug": obj.sentry_app.slug,
-                "name": obj.sentry_app.name,
-            },
-            "date": obj.date_added,
-            "organization": {"slug": obj.organization.slug, "name": obj.organization.name},
-            "request": {"body": obj.request_body, "headers": obj.request_headers},
-            "eventType": obj.event_type,
-            "webhookUrl": obj.webhook_url,
-            "response": {"body": obj.response_body, "statusCode": obj.response_code},
-        }
-
-        return data
diff --git a/src/sentry/migrations/0013_auto_20191111_1829.py b/src/sentry/migrations/0013_auto_20191111_1829.py
new file mode 100644
index 0000000000..935e30753a
--- /dev/null
+++ b/src/sentry/migrations/0013_auto_20191111_1829.py
@@ -0,0 +1,39 @@
+# -*- coding: utf-8 -*-
+from __future__ import unicode_literals
+
+from django.db import migrations, models
+import sentry.db.models.fields.bounded
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Adding indexes to large tables. These indexes should be created concurrently,
+    #   unfortunately we can't run migrations outside of a transaction until Django
+    #   1.10. So until then these should be run manually.
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+
+    dependencies = [
+        ('sentry', '0012_remove_pagerdutyservice_service_id'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='sentryappwebhookerror',
+            name='organization',
+            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_column=b'organization_id'),
+        ),
+        migrations.AlterField(
+            model_name='sentryappwebhookerror',
+            name='sentry_app',
+            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_column=b'sentry_app_id'),
+        ),
+    ]
diff --git a/src/sentry/models/sentryappwebhookerror.py b/src/sentry/models/sentryappwebhookerror.py
index 2ff26bdea1..4df4145fbb 100644
--- a/src/sentry/models/sentryappwebhookerror.py
+++ b/src/sentry/models/sentryappwebhookerror.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from django.db import models
 from django.utils import timezone
 
-from sentry.db.models import EncryptedJsonField, FlexibleForeignKey, Model
+from sentry.db.models import EncryptedJsonField, BoundedBigIntegerField, Model
 
 
 class SentryAppWebhookError(Model):
@@ -11,11 +11,9 @@ class SentryAppWebhookError(Model):
 
     date_added = models.DateTimeField(db_index=True, default=timezone.now)
 
-    sentry_app = FlexibleForeignKey("sentry.SentryApp", related_name="webhook_errors")
+    sentry_app = BoundedBigIntegerField(db_column="sentry_app_id")
 
-    organization = FlexibleForeignKey(
-        "sentry.Organization", related_name="sentry_app_webhook_errors"
-    )
+    organization = BoundedBigIntegerField(db_column="organization_id")
 
     request_body = EncryptedJsonField()
 
diff --git a/src/sentry/testutils/factories.py b/src/sentry/testutils/factories.py
index 7000494270..29ffd0ee30 100644
--- a/src/sentry/testutils/factories.py
+++ b/src/sentry/testutils/factories.py
@@ -68,7 +68,6 @@ from sentry.models import (
     EventAttachment,
     UserReport,
     PlatformExternalIssue,
-    SentryAppWebhookError,
 )
 from sentry.models.integrationfeature import Feature, IntegrationFeature
 from sentry.signals import project_created
@@ -841,36 +840,6 @@ class Factories(object):
 
         return integration_feature
 
-    @staticmethod
-    def create_sentry_app_webhook_error(sentry_app=None, organization=None, event_type=None):
-        if not sentry_app:
-            sentry_app = Factories.create_sentry_app()
-        if not organization:
-            organization = Factories.create_organization()
-        if not event_type:
-            event_type = "issue.assigned"
-
-        request_body = {}
-        request_headers = {
-            "Request-ID": "c2f0ab98bd2a4f8eba6a67a91c43c7c8",
-            "Sentry-Hook-Signature": "656e2aad9b01327fcd9860deff06fe1f55ddca9655eba05aa92ff4f96f5c1a42",
-            "Content-Type": "application/json",
-            "Sentry-Hook-Resource": "issue",
-            "Sentry-Hook-Timestamp": "1569455694",
-        }
-        error = SentryAppWebhookError.objects.create(
-            sentry_app=sentry_app,
-            organization=organization,
-            request_body=request_body,
-            request_headers=request_headers,
-            event_type=event_type,
-            webhook_url="https://example.com/webhook",
-            response_body="This is an error",
-            response_code=400,
-        )
-
-        return error
-
     @staticmethod
     def create_userreport(group, project=None, event_id=None, **kwargs):
         return UserReport.objects.create(
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 6394c8a11b..55c0a03755 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -197,9 +197,6 @@ class Fixtures(object):
     def create_sentry_app_feature(self, *args, **kwargs):
         return Factories.create_sentry_app_feature(*args, **kwargs)
 
-    def create_sentry_app_webhook_error(self, *args, **kwargs):
-        return Factories.create_sentry_app_webhook_error(*args, **kwargs)
-
     def create_service_hook(self, *args, **kwargs):
         return Factories.create_service_hook(*args, **kwargs)
 
