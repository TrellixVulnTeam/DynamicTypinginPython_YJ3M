commit 4924d9c7f55515bde246cf53dd04185f478acc8a
Author: Dan Fuller <dfuller@sentry.io>
Date:   Thu Feb 6 12:10:00 2020 -0800

    fix(subscriptions): Fix expected format for messages from subscription results
    
    We had a slight mismatch with the update schema from subscriptions, fixing it and also fixing the
    json schema which didn't catch differences.

diff --git a/src/sentry/incidents/subscription_processor.py b/src/sentry/incidents/subscription_processor.py
index f5dfe51b62..9608dc7a3f 100644
--- a/src/sentry/incidents/subscription_processor.py
+++ b/src/sentry/incidents/subscription_processor.py
@@ -129,7 +129,7 @@ class SubscriptionProcessor(object):
 
         aggregation = QueryAggregations(self.alert_rule.aggregation)
         aggregation_name = query_aggregation_to_snuba[aggregation][2]
-        aggregation_value = subscription_update["values"]["data"][aggregation_name]
+        aggregation_value = subscription_update["values"]["data"][0][aggregation_name]
 
         for trigger in self.triggers:
             alert_operator, resolve_operator = self.THRESHOLD_TYPE_OPERATORS[
diff --git a/src/sentry/snuba/json_schemas.py b/src/sentry/snuba/json_schemas.py
index d547d998d6..54d1f5b26e 100644
--- a/src/sentry/snuba/json_schemas.py
+++ b/src/sentry/snuba/json_schemas.py
@@ -17,7 +17,15 @@ SUBSCRIPTION_PAYLOAD_VERSIONS = {
             "values": {
                 "type": "object",
                 "properties": {
-                    "data": {"minProperties": 1, "additionalProperties": {"type": "number"}}
+                    "data": {
+                        "type": "array",
+                        "minItems": 1,
+                        "items": {
+                            "type": "object",
+                            "minProperties": 1,
+                            "additionalProperties": {"type": "number"},
+                        },
+                    }
                 },
                 "required": ["data"],
             },
diff --git a/tests/sentry/incidents/test_subscription_processor.py b/tests/sentry/incidents/test_subscription_processor.py
index d8833d3054..f9a7f471d0 100644
--- a/tests/sentry/incidents/test_subscription_processor.py
+++ b/tests/sentry/incidents/test_subscription_processor.py
@@ -122,7 +122,7 @@ class ProcessUpdateTest(TestCase):
             ]
             value = randint(0, 100) if value is None else value
             data = {aggregation_type[2]: value}
-        values = {"data": data}
+        values = {"data": [data]}
         return {
             "subscription_id": subscription.subscription_id if subscription else uuid4().hex,
             "values": values,
diff --git a/tests/sentry/snuba/test_query_subscription_consumer.py b/tests/sentry/snuba/test_query_subscription_consumer.py
index 96dc128e7d..aa5becab25 100644
--- a/tests/sentry/snuba/test_query_subscription_consumer.py
+++ b/tests/sentry/snuba/test_query_subscription_consumer.py
@@ -34,7 +34,7 @@ class BaseQuerySubscriptionTest(object):
     def valid_payload(self):
         return {
             "subscription_id": "1234",
-            "values": {"data": {"hello": 50}},
+            "values": {"data": [{"hello": 50}]},
             "timestamp": "2020-01-01T01:23:45.1234",
         }
 
diff --git a/tests/snuba/incidents/test_tasks.py b/tests/snuba/incidents/test_tasks.py
index e9dd58c68b..b1168f1b50 100644
--- a/tests/snuba/incidents/test_tasks.py
+++ b/tests/snuba/incidents/test_tasks.py
@@ -118,7 +118,7 @@ class HandleSnubaQueryUpdateTest(TestCase):
             "version": 1,
             "payload": {
                 "subscription_id": self.subscription.subscription_id,
-                "values": {"data": {value_name: self.trigger.alert_threshold + 1}},
+                "values": {"data": [{value_name: self.trigger.alert_threshold + 1}]},
                 "timestamp": "2020-01-01T01:23:45.1234",
             },
         }
diff --git a/tests/snuba/snuba/test_query_subscription_consumer.py b/tests/snuba/snuba/test_query_subscription_consumer.py
index 019153d0d2..bca65da67c 100644
--- a/tests/snuba/snuba/test_query_subscription_consumer.py
+++ b/tests/snuba/snuba/test_query_subscription_consumer.py
@@ -34,7 +34,7 @@ class QuerySubscriptionConsumerTest(TestCase, SnubaTestCase):
     def valid_payload(self):
         return {
             "subscription_id": self.subscription_id,
-            "values": {"data": {"hello": 50}},
+            "values": {"data": [{"hello": 50}]},
             "timestamp": "2020-01-01T01:23:45.1234",
         }
 
