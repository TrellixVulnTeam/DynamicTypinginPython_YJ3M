commit 7e9420c56ae1fbb7cb4a38e34ba76b3a9d7ecf68
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Jan 10 18:14:08 2018 -0800

    test(js): Use jest mock fns in API Client mock (#6945)
    
    `addMockResponse` now returns a jest mock function that represents
    `Client.request` calls. Now we can write assertions with jest matchers
    for Client.request.

diff --git a/src/sentry/static/sentry/app/__mocks__/api.jsx b/src/sentry/static/sentry/app/__mocks__/api.jsx
index 17791ab483..b88fb9bdc1 100644
--- a/src/sentry/static/sentry/app/__mocks__/api.jsx
+++ b/src/sentry/static/sentry/app/__mocks__/api.jsx
@@ -19,26 +19,28 @@ class Client {
     Client.mockResponses = [];
   }
 
+  // Returns a jest mock that represents Client.request calls
   static addMockResponse(response) {
-    Client.mockResponses.push({
-      statusCode: 200,
-      body: '',
-      method: 'GET',
-      callCount: 0,
-      ...response,
-    });
+    let mock = jest.fn();
+    Client.mockResponses.push([
+      {
+        statusCode: 200,
+        body: '',
+        method: 'GET',
+        ...response,
+      },
+      mock,
+    ]);
+
+    return mock;
   }
 
   static findMockResponse(url, options) {
-    return Client.mockResponses.find(response => {
+    return Client.mockResponses.find(([response]) => {
       return url === response.url && (options.method || 'GET') === response.method;
     });
   }
 
-  static getCallCount(response) {
-    return Client.findMockResponse(response.url, response).callCount;
-  }
-
   clear() {}
 
   static mockAsync = false;
@@ -67,7 +69,8 @@ class Client {
   }
 
   request(url, options) {
-    let response = Client.findMockResponse(url, options);
+    let [response, mock] = Client.findMockResponse(url, options) || [];
+
     if (!response) {
       // eslint-disable-next-line no-console
       console.error(
@@ -81,30 +84,38 @@ class Client {
         responseJSON: null,
       };
       respond(Client.mockAsync, options.error, resp);
-    } else if (response.statusCode !== 200) {
-      response.callCount++;
-      let resp = {
-        status: response.statusCode,
-        responseText: JSON.stringify(response.body),
-        responseJSON: response.body,
-      };
-      this.handleRequestError(
-        {
-          path: url,
-          requestOptions: options,
-        },
-        resp
-      );
     } else {
-      response.callCount++;
-      respond(
-        Client.mockAsync,
-        options.success,
-        response.body,
-        {},
-        {getResponseHeader: () => {}}
-      );
+      // has mocked response
+
+      // mock gets returned when we add a mock response, will represent calls to api.request
+      mock(url, options);
+
+      if (response.statusCode !== 200) {
+        response.callCount++;
+        let resp = {
+          status: response.statusCode,
+          responseText: JSON.stringify(response.body),
+          responseJSON: response.body,
+        };
+        this.handleRequestError(
+          {
+            path: url,
+            requestOptions: options,
+          },
+          resp
+        );
+      } else {
+        response.callCount++;
+        respond(
+          Client.mockAsync,
+          options.success,
+          response.body,
+          {},
+          {getResponseHeader: () => {}}
+        );
+      }
     }
+
     respond(Client.mockAsync, options.complete);
   }
 }
diff --git a/tests/js/spec/sudoModal.spec.jsx b/tests/js/spec/sudoModal.spec.jsx
index d91c68a1e0..0267e2d9a3 100644
--- a/tests/js/spec/sudoModal.spec.jsx
+++ b/tests/js/spec/sudoModal.spec.jsx
@@ -41,6 +41,7 @@ describe('Sudo Modal', function() {
     let api = new Client();
     let successCb = jest.fn();
     let errorCb = jest.fn();
+    let orgDeleteMock;
 
     // No Modal
     expect($('.modal input').length).toBe(0);
@@ -53,51 +54,63 @@ describe('Sudo Modal', function() {
     });
 
     setTimeout(() => {
-      // SudoModal
-      const $input = $('.modal input');
-      expect($input.length).toBe(1);
+      try {
+        // SudoModal
+        const $input = $('.modal input');
+        expect($input.length).toBe(1);
 
-      // Original callbacks should not have been called
-      expect(successCb).not.toBeCalled();
-      expect(errorCb).not.toBeCalled();
+        // Original callbacks should not have been called
+        expect(successCb).not.toBeCalled();
+        expect(errorCb).not.toBeCalled();
 
-      // Clear mocks and allow DELETE
-      Client.clearMockResponses();
-      Client.addMockResponse({
-        url: '/organizations/org-slug/',
-        method: 'DELETE',
-        statusCode: 200,
-      });
-      Client.addMockResponse({
-        url: '/sudo/',
-        method: 'POST',
-        statusCode: 200,
-      });
+        // Clear mocks and allow DELETE
+        Client.clearMockResponses();
+        orgDeleteMock = Client.addMockResponse({
+          url: '/organizations/org-slug/',
+          method: 'DELETE',
+          statusCode: 200,
+        });
+        let sudoMock = Client.addMockResponse({
+          url: '/sudo/',
+          method: 'POST',
+          statusCode: 200,
+        });
 
-      // "Sudo" auth
-      $input.val('password');
-      $('.modal [type="submit"]').click();
+        expect(sudoMock).not.toHaveBeenCalled();
 
-      expect(
-        Client.getCallCount(
-          Client.findMockResponse('/sudo/', {
+        // "Sudo" auth
+        $input.val('password');
+        $('.modal [type="submit"]').click();
+
+        expect(sudoMock).toHaveBeenCalledWith(
+          '/sudo/',
+          expect.objectContaining({
             method: 'POST',
+            // XXX: This doesn't submit with password in tests because modal is rendered outside of
+            // react tree. So we can't simulate react events on input
+            // data: {
+            // password: 'password',
+            // },
           })
-        )
-      ).toBe(1);
-
+        );
+      } catch (err) {
+        done(err);
+      }
       setTimeout(() => {
-        // Modal can be around but should be "busy"
+        try {
+          // Modal can be around but should be "busy"
 
-        // Retry API request
-        expect(successCb).toHaveBeenCalled();
-        expect(
-          Client.getCallCount(
-            Client.findMockResponse('/organizations/org-slug/', {
+          // Retry API request
+          expect(successCb).toHaveBeenCalled();
+          expect(orgDeleteMock).toHaveBeenCalledWith(
+            '/organizations/org-slug/',
+            expect.objectContaining({
               method: 'DELETE',
             })
-          )
-        ).toBe(1);
+          );
+        } catch (err) {
+          done(err);
+        }
         done();
       }, 1);
     }, 1);
diff --git a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
index 1160348f6d..84c7be477d 100644
--- a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
+++ b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
@@ -138,7 +138,7 @@ describe('CreateProject', function() {
         body: {},
       };
 
-      Client.addMockResponse(inviteRequest);
+      let mock = Client.addMockResponse(inviteRequest);
 
       let wrapper = mount(<InviteMember {...baseProps} />, baseContext);
 
@@ -161,7 +161,7 @@ describe('CreateProject', function() {
       node.props().onClick({preventDefault: () => {}});
       expect(wrapper.state('busy')).toBe(true);
       expect(wrapper.state('error')).toBe(undefined);
-      expect(Client.getCallCount(inviteRequest)).toBe(3);
+      expect(mock).toHaveBeenCalledTimes(3);
     });
   });
 });
