commit a64b6613fd427133a700b4ea0edf44460e08b433
Author: Ryan Skonnord <ryan.skonnord@sentry.io>
Date:   Mon Jun 1 17:33:16 2020 -0700

    perf(models): Instrument Group.get_absolute_url (#19124)
    
    Targets a performance bottleneck measured from
    GroupSerializerBase._get_permalink.
    
    Clean up spans in GroupSerializerBase that are no longer needed.

diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 902246c0bb..9cc20913ab 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -405,22 +405,11 @@ class GroupSerializerBase(Serializer):
                 request.auth, obj.organization
             )
 
-        with sentry_sdk.start_span(op="GroupSerializerBase.serialize.permalink.check") as span:
-
-            def user_is_in_org():
-                exists = user.get_orgs().filter(id=obj.organization.id).exists()
-                span.set_data("user_is_in_org", exists)
-                return exists
-
-            permalink_is_visible = (
-                is_superuser or (user.is_authenticated() and user_is_in_org()) or is_valid_sentryapp
-            )
-
-            span.set_data("is_superuser", is_superuser)
-            span.set_data("is_valid_sentryapp", is_valid_sentryapp)
-            span.set_data("permalink_is_visible", permalink_is_visible)
-
-        if permalink_is_visible:
+        if (
+            is_superuser
+            or is_valid_sentryapp
+            or (user.is_authenticated() and user.get_orgs().filter(id=obj.organization.id).exists())
+        ):
             with sentry_sdk.start_span(op="GroupSerializerBase.serialize.permalink.build"):
                 return obj.get_absolute_url()
         else:
@@ -440,12 +429,9 @@ class GroupSerializerBase(Serializer):
         return is_subscribed, subscription_details
 
     def serialize(self, obj, attrs, user):
-        with sentry_sdk.start_span(op="GroupSerializerBase.serialize.status"):
-            status_details, status_label = self._get_status(attrs, obj)
-        with sentry_sdk.start_span(op="GroupSerializerBase.serialize.permalink"):
-            permalink = self._get_permalink(obj, user)
-        with sentry_sdk.start_span(op="GroupSerializerBase.serialize.subscription"):
-            is_subscribed, subscription_details = self._get_subscription(attrs)
+        status_details, status_label = self._get_status(attrs, obj)
+        permalink = self._get_permalink(obj, user)
+        is_subscribed, subscription_details = self._get_subscription(attrs)
         share_id = attrs["share_id"]
 
         return {
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 9c934aee63..a4bb09417c 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -15,6 +15,8 @@ from django.utils import timezone
 from django.utils.http import urlencode
 from django.utils.translation import ugettext_lazy as _
 
+import sentry_sdk
+
 from sentry import eventstore, eventtypes, tagstore
 from sentry.constants import DEFAULT_LOGGER_NAME, LOG_LEVELS, MAX_CULPRIT_LENGTH
 from sentry.db.models import (
@@ -318,10 +320,16 @@ class Group(Model):
         super(Group, self).save(*args, **kwargs)
 
     def get_absolute_url(self, params=None):
-        url = reverse("sentry-organization-issue", args=[self.organization.slug, self.id])
+        url_args = [self.organization.slug, self.id]
+        with sentry_sdk.start_span(op="models.group.absolute_url.reverse") as span:
+            span.set_data("url_args", url_args)
+            url = reverse("sentry-organization-issue", args=url_args)
         if params:
-            url = url + "?" + urlencode(params)
-        return absolute_uri(url)
+            with sentry_sdk.start_span(op="models.group.absolute_url.params") as span:
+                span.set_data("params", params)
+                url = url + "?" + urlencode(params)
+        with sentry_sdk.start_span(op="models.group.absolute_url.format", description=url):
+            return absolute_uri(url)
 
     @property
     def qualified_short_id(self):
diff --git a/src/sentry/utils/http.py b/src/sentry/utils/http.py
index 2d56f742de..7174fc8ff4 100644
--- a/src/sentry/utils/http.py
+++ b/src/sentry/utils/http.py
@@ -7,6 +7,8 @@ from django.conf import settings
 from six.moves.urllib.parse import parse_qs, quote, urlencode, urljoin, urlparse
 from functools import partial
 
+import sentry_sdk
+
 from sentry import options
 from sentry.utils import json
 from sentry.utils.compat import map
@@ -16,9 +18,11 @@ ParsedUriMatch = namedtuple("ParsedUriMatch", ["scheme", "domain", "path"])
 
 
 def absolute_uri(url=None):
+    with sentry_sdk.start_span(op="http.absolute_uri.options"):
+        url_prefix = options.get("system.url-prefix")
     if not url:
-        return options.get("system.url-prefix")
-    return urljoin(options.get("system.url-prefix").rstrip("/") + "/", url.lstrip("/"))
+        return url_prefix
+    return urljoin(url_prefix.rstrip("/") + "/", url.lstrip("/"))
 
 
 def origin_from_url(url):
