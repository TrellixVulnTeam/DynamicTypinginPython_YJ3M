commit 9f629ffe49f45e87224737f31cec27e04d442b1d
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 4 16:26:17 2014 -0700

    Initial cache abstraction

diff --git a/src/sentry/app.py b/src/sentry/app.py
index cfd6598b8f..1e4389ac86 100644
--- a/src/sentry/app.py
+++ b/src/sentry/app.py
@@ -24,6 +24,7 @@ def get_instance(path, options):
 
 
 buffer = get_instance(settings.SENTRY_BUFFER, settings.SENTRY_BUFFER_OPTIONS)
+cache = get_instance(settings.SENTRY_CACHE, settings.SENTRY_CACHE_OPTIONS)
 quotas = get_instance(settings.SENTRY_QUOTAS, settings.SENTRY_QUOTA_OPTIONS)
 nodestore = get_instance(
     settings.SENTRY_NODESTORE, settings.SENTRY_NODESTORE_OPTIONS)
diff --git a/src/sentry/cache/__init__.py b/src/sentry/cache/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/src/sentry/cache/base.py b/src/sentry/cache/base.py
new file mode 100644
index 0000000000..9907f969ca
--- /dev/null
+++ b/src/sentry/cache/base.py
@@ -0,0 +1,22 @@
+"""
+sentry.cache.base
+~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from threading import local
+
+
+class BaseCache(local):
+    def set(self, key, value, timeout):
+        raise NotImplementedError
+
+    def delete(self, key):
+        raise NotImplementedError
+
+    def get(self, key):
+        raise NotImplementedError
diff --git a/src/sentry/cache/django.py b/src/sentry/cache/django.py
new file mode 100644
index 0000000000..4d05284b02
--- /dev/null
+++ b/src/sentry/cache/django.py
@@ -0,0 +1,23 @@
+"""
+sentry.cache.django
+~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from django.core.cache import cache
+from threading import local
+
+
+class DjangoCache(local):
+    def set(self, key, value, timeout):
+        cache.set(key, value, timeout)
+
+    def delete(self, key):
+        cache.delete(key)
+
+    def get(self, key):
+        return cache.get(key)
diff --git a/src/sentry/cache/redis.py b/src/sentry/cache/redis.py
new file mode 100644
index 0000000000..9856e93884
--- /dev/null
+++ b/src/sentry/cache/redis.py
@@ -0,0 +1,43 @@
+"""
+sentry.cache.redis
+~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from django.conf import settings
+from nydus.db import create_cluster
+from threading import local
+
+
+class RedisCache(local):
+    key_expire = 60 * 60  # 1 hour
+
+    def __init__(self, **options):
+        if not options:
+            # inherit default options from REDIS_OPTIONS
+            options = settings.SENTRY_REDIS_OPTIONS
+
+        options.setdefault('hosts', {
+            0: {},
+        })
+        options.setdefault('router', 'nydus.db.routers.keyvalue.PartitionRouter')
+        self.conn = create_cluster({
+            'engine': 'nydus.db.backends.redis.Redis',
+            'router': options['router'],
+            'hosts': options['hosts'],
+        })
+
+    def set(self, key, value, timeout):
+        with self.conn.map() as conn:
+            conn.set(key, value)
+            conn.expire(key, timeout)
+
+    def delete(self, key):
+        self.conn.delete(key)
+
+    def get(self, key):
+        return self.conn.get(key)
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 6b75dbe15b..4fc37278fe 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -591,6 +591,10 @@ SENTRY_REDIS_OPTIONS = {}
 SENTRY_BUFFER = 'sentry.buffer.Buffer'
 SENTRY_BUFFER_OPTIONS = {}
 
+# Cache backend
+SENTRY_CACHE = 'sentry.cache.django.DjangoCache'
+SENTRY_CACHE_OPTIONS = {}
+
 # Quota backend
 SENTRY_QUOTAS = 'sentry.quotas.Quota'
 SENTRY_QUOTA_OPTIONS = {}
diff --git a/src/sentry/utils/runner.py b/src/sentry/utils/runner.py
index 5b92080f15..3154f4548b 100644
--- a/src/sentry/utils/runner.py
+++ b/src/sentry/utils/runner.py
@@ -55,20 +55,6 @@ DATABASES = {
 # If you're expecting any kind of real traffic on Sentry, we highly recommend
 # configuring the CACHES and Redis settings
 
-###########
-## CACHE ##
-###########
-
-# You'll need to install the required dependencies for Memcached:
-#   pip install python-memcached
-#
-# CACHES = {
-#     'default': {
-#         'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
-#         'LOCATION': ['127.0.0.1:11211'],
-#     }
-# }
-
 ###########
 ## Redis ##
 ###########
@@ -85,6 +71,25 @@ SENTRY_REDIS_OPTIONS = {
     }
 }
 
+###########
+## CACHE ##
+###########
+
+# If you wish to use memcached, install the dependencies and adjust the config
+# as shown:
+#
+#   pip install python-memcached
+#
+# CACHES = {
+#     'default': {
+#         'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
+#         'LOCATION': ['127.0.0.1:11211'],
+#     }
+# }
+#
+# SENTRY_CACHE = 'sentry.cache.django.DjangoCache'
+
+SENTRY_CACHE = 'sentry.cache.redis.RedisCache'
 
 ###########
 ## Queue ##
diff --git a/tests/sentry/cache/__init__.py b/tests/sentry/cache/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/cache/test_redis.py b/tests/sentry/cache/test_redis.py
new file mode 100644
index 0000000000..6554c19725
--- /dev/null
+++ b/tests/sentry/cache/test_redis.py
@@ -0,0 +1,24 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.cache.redis import RedisCache
+from sentry.testutils import TestCase
+
+
+class RedisCacheTest(TestCase):
+    def setUp(self):
+        self.backend = RedisCache(hosts={
+            0: {'db': 9}
+        })
+
+    def test_integration(self):
+        self.backend.set('foo', 'bar', 50)
+
+        result = self.backend.get('foo')
+        assert result == 'bar'
+
+        self.backend.delete('foo')
+
+        result = self.backend.get('foo')
+        assert result is None
