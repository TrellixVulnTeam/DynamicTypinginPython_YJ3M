commit 975d437a06e175bedae42a87fd17e2c871303cc3
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jan 25 20:20:50 2012 -0800

    Added several helper shortcuts for handling options in plugins

diff --git a/sentry/manager.py b/sentry/manager.py
index 360159fa4c..25e0aa7488 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -512,6 +512,12 @@ class MetaManager(models.Manager):
             return result[key]
         return result.get(key, default)
 
+    def unset_value(self, key):
+        self.filter(key=key).delete()
+        if not hasattr(self, '_metadata'):
+            return
+        self._metadata.pop(key, None)
+
     def set_value(self, key, value):
         inst, created = self.get_or_create(
             key=key,
@@ -550,6 +556,14 @@ class InstanceMetaManager(models.Manager):
             return result[key]
         return result.get(key, default)
 
+    def unset_value(self, instance, key):
+        self.filter(**{self.field_name: instance, 'key': key}).delete()
+        if not hasattr(self, '_metadata'):
+            return
+        if instance.pk not in self._metadata:
+            return
+        self._metadata[instance.pk].pop(key, None)
+
     def set_value(self, instance, key, value):
         inst, created = self.get_or_create(**{
             self.field_name: instance,
diff --git a/sentry/plugins/__init__.py b/sentry/plugins/__init__.py
index eebb06796c..d1883a6ff2 100644
--- a/sentry/plugins/__init__.py
+++ b/sentry/plugins/__init__.py
@@ -7,3 +7,4 @@ sentry.plugins
 """
 
 from .base import *
+from .helpers import *
diff --git a/sentry/plugins/helpers.py b/sentry/plugins/helpers.py
new file mode 100644
index 0000000000..237c85e9e8
--- /dev/null
+++ b/sentry/plugins/helpers.py
@@ -0,0 +1,38 @@
+"""
+sentry.plugins.helpers
+~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from sentry.models import ProjectOption, Option
+
+__all__ = ('set_option', 'get_option', 'unset_option')
+
+
+def set_option(key, value, project=None):
+    if project:
+        result = ProjectOption.objects.set_value(project, key, value)
+    else:
+        result = Option.objects.set_value(key, value)
+
+    return result
+
+
+def get_option(key, project=None):
+    if project:
+        result = ProjectOption.objects.get_value(project, key)
+    else:
+        result = Option.objects.get_value(key)
+
+    return result
+
+
+def unset_option(key, project=None):
+    if project:
+        result = ProjectOption.objects.unset_value(project, key)
+    else:
+        result = Option.objects.unset_value(key)
+
+    return result
diff --git a/tests/plugins/tests.py b/tests/plugins/tests.py
index 2c0eb7672a..3492c4665f 100644
--- a/tests/plugins/tests.py
+++ b/tests/plugins/tests.py
@@ -2,8 +2,50 @@
 
 from __future__ import absolute_import
 
+import mock
+from sentry.plugins.helpers import set_option, \
+  unset_option, get_option
 from tests.base import TestCase
 
 
 class SentryPluginTest(TestCase):
-    pass
+    def test_set_option_with_project(self):
+        with mock.patch('sentry.models.ProjectOption.objects.set_value') as set_value:
+            project = mock.Mock()
+            set_option('key', 'value', project)
+
+            set_value.assert_called_once_with(project, 'key', 'value')
+
+    def test_set_option_without_project(self):
+        with mock.patch('sentry.models.Option.objects.set_value') as set_value:
+            set_option('key', 'value')
+
+            set_value.assert_called_once_with('key', 'value')
+
+    def test_unset_option_with_project(self):
+        with mock.patch('sentry.models.ProjectOption.objects.unset_value') as unset_value:
+            project = mock.Mock()
+            unset_option('key', project)
+
+            unset_value.assert_called_once_with(project, 'key')
+
+    def test_unset_option_without_project(self):
+        with mock.patch('sentry.models.Option.objects.unset_value') as unset_value:
+            unset_option('key')
+
+            unset_value.assert_called_once_with('key')
+
+    def test_get_option_with_project(self):
+        with mock.patch('sentry.models.ProjectOption.objects.get_value') as get_value:
+            project = mock.Mock()
+            result = get_option('key', project)
+            self.assertEquals(result, get_value.return_value)
+
+            get_value.assert_called_once_with(project, 'key')
+
+    def test_get_option_without_project(self):
+        with mock.patch('sentry.models.Option.objects.get_value') as get_value:
+            result = get_option('key')
+            self.assertEquals(result, get_value.return_value)
+
+            get_value.assert_called_once_with('key')
