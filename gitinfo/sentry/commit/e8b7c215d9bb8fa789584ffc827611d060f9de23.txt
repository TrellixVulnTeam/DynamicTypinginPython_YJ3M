commit e8b7c215d9bb8fa789584ffc827611d060f9de23
Author: Dan Fuller <dfuller@sentry.io>
Date:   Fri May 1 17:11:35 2020 -0700

    feat(alerts): Add new model to represent a snuba query. Change aggregate field to be a string. (#18555)
    
    As part of performance alerts we need to support custom aggregates. To do so, we're going to use the
    same format as discover, which is to store the aggregate as a string, which can look like:
     - `count()`
     - `error_rate()`
     - `avg(transaction.duration)`
    
    At the moment, query fields are duplicated across both `AlertRule` and `SubscriptionQuery`. I'm
    going to clean this up with the new `SnubaQuery` model. The data model will look like:
    
    AlertRule M -> 1 Query 1 -> M QuerySubscription
    
    This allows us to clean up our data model a fair bit:
     - `AlertRuleQuerySubscription` will no longer be needed, since we can join through the query.
     - `AlertRuleEnvironment` will no longer be needed. Since we will now only have 0-1
       environments per alert rule, we can just have that reference in `SnubaQuery` and remove it from
       other tables.
     - We can remove the duplicate fields from `AlertRule` and `QuerySubscription`.
     - There will be one source of truth for what a query actually looks like, rather than it being
       duplicated over many `QuerySubscription` rows.

diff --git a/migrations_lockfile.txt b/migrations_lockfile.txt
index e8cd71bcce..f0a5331ecb 100644
--- a/migrations_lockfile.txt
+++ b/migrations_lockfile.txt
@@ -10,7 +10,7 @@ auth: 0008_alter_user_username_max_length
 contenttypes: 0002_remove_content_type_name
 jira_ac: 0001_initial
 nodestore: 0001_initial
-sentry: 0071_add_default_fields_model_subclass
+sentry: 0072_alert_rules_query_changes
 sessions: 0001_initial
 sites: 0002_alter_domain_unique
 social_auth: 0001_initial
diff --git a/src/sentry/incidents/models.py b/src/sentry/incidents/models.py
index fdcc87c7c7..8c153ce854 100644
--- a/src/sentry/incidents/models.py
+++ b/src/sentry/incidents/models.py
@@ -395,6 +395,7 @@ class AlertRule(Model):
     objects_with_snapshots = BaseManager()
 
     organization = FlexibleForeignKey("sentry.Organization", null=True)
+    snuba_query = FlexibleForeignKey("sentry.SnubaQuery", null=True, unique=True)
     query_subscriptions = models.ManyToManyField(
         "sentry.QuerySubscription", related_name="alert_rules", through=AlertRuleQuerySubscription
     )
@@ -403,8 +404,8 @@ class AlertRule(Model):
     )
     name = models.TextField()
     status = models.SmallIntegerField(default=AlertRuleStatus.PENDING.value)
-    dataset = models.TextField()
-    query = models.TextField()
+    dataset = models.TextField(null=True)
+    query = models.TextField(null=True)
     environment = models.ManyToManyField(
         "sentry.Environment", related_name="alert_rule_environment", through=AlertRuleEnvironment
     )
@@ -412,9 +413,9 @@ class AlertRule(Model):
     # organization in this rule.
     include_all_projects = models.BooleanField(default=False)
     # TODO: Remove this default after we migrate
-    aggregation = models.IntegerField(default=QueryAggregations.TOTAL.value)
-    time_window = models.IntegerField()
-    resolution = models.IntegerField()
+    aggregation = models.IntegerField(default=QueryAggregations.TOTAL.value, null=True)
+    time_window = models.IntegerField(null=True)
+    resolution = models.IntegerField(null=True)
     threshold_period = models.IntegerField()
     date_modified = models.DateTimeField(default=timezone.now)
     date_added = models.DateTimeField(default=timezone.now)
diff --git a/src/sentry/migrations/0072_alert_rules_query_changes.py b/src/sentry/migrations/0072_alert_rules_query_changes.py
new file mode 100644
index 0000000000..0b0d38a907
--- /dev/null
+++ b/src/sentry/migrations/0072_alert_rules_query_changes.py
@@ -0,0 +1,112 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.29 on 2020-05-01 23:36
+from __future__ import unicode_literals
+
+from django.db import migrations, models
+import django.db.models.deletion
+import django.utils.timezone
+import sentry.db.models.fields.bounded
+import sentry.db.models.fields.foreignkey
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+    # This flag is used to decide whether to run this migration in a transaction or not.
+    # By default we prefer to run in a transaction, but for migrations where you want
+    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
+    # want to create an index concurrently when adding one to an existing table.
+    atomic = True
+
+
+    dependencies = [
+        ('sentry', '0071_add_default_fields_model_subclass'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='SnubaQuery',
+            fields=[
+                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
+                ('dataset', models.TextField()),
+                ('query', models.TextField()),
+                ('aggregate', models.TextField()),
+                ('time_window', models.IntegerField()),
+                ('resolution', models.IntegerField()),
+                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
+                ('environment', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Environment')),
+            ],
+            options={
+                'db_table': 'sentry_snubaquery',
+            },
+        ),
+        migrations.AlterField(
+            model_name='alertrule',
+            name='aggregation',
+            field=models.IntegerField(default=0, null=True),
+        ),
+        migrations.AlterField(
+            model_name='alertrule',
+            name='dataset',
+            field=models.TextField(null=True),
+        ),
+        migrations.AlterField(
+            model_name='alertrule',
+            name='query',
+            field=models.TextField(null=True),
+        ),
+        migrations.AlterField(
+            model_name='alertrule',
+            name='resolution',
+            field=models.IntegerField(null=True),
+        ),
+        migrations.AlterField(
+            model_name='alertrule',
+            name='time_window',
+            field=models.IntegerField(null=True),
+        ),
+        migrations.AlterField(
+            model_name='querysubscription',
+            name='aggregation',
+            field=models.IntegerField(default=0, null=True),
+        ),
+        migrations.AlterField(
+            model_name='querysubscription',
+            name='dataset',
+            field=models.TextField(null=True),
+        ),
+        migrations.AlterField(
+            model_name='querysubscription',
+            name='query',
+            field=models.TextField(null=True),
+        ),
+        migrations.AlterField(
+            model_name='querysubscription',
+            name='resolution',
+            field=models.IntegerField(null=True),
+        ),
+        migrations.AlterField(
+            model_name='querysubscription',
+            name='time_window',
+            field=models.IntegerField(null=True),
+        ),
+        migrations.AddField(
+            model_name='alertrule',
+            name='snuba_query',
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.SnubaQuery', unique=True),
+        ),
+        migrations.AddField(
+            model_name='querysubscription',
+            name='snuba_query',
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='sentry.SnubaQuery'),
+        ),
+    ]
diff --git a/src/sentry/snuba/models.py b/src/sentry/snuba/models.py
index b2bb8f836a..b3ff750ac2 100644
--- a/src/sentry/snuba/models.py
+++ b/src/sentry/snuba/models.py
@@ -38,6 +38,22 @@ class QuerySubscriptionEnvironment(Model):
         unique_together = (("query_subscription", "environment"),)
 
 
+class SnubaQuery(Model):
+    __core__ = True
+
+    environment = FlexibleForeignKey("sentry.Environment", null=True, db_constraint=False)
+    dataset = models.TextField()
+    query = models.TextField()
+    aggregate = models.TextField()
+    time_window = models.IntegerField()
+    resolution = models.IntegerField()
+    date_added = models.DateTimeField(default=timezone.now)
+
+    class Meta:
+        app_label = "sentry"
+        db_table = "sentry_snubaquery"
+
+
 class QuerySubscription(Model):
     __core__ = True
 
@@ -51,15 +67,15 @@ class QuerySubscription(Model):
     environments = models.ManyToManyField(
         "sentry.Environment", through=QuerySubscriptionEnvironment
     )
+    snuba_query = FlexibleForeignKey("sentry.SnubaQuery", null=True, related_name="subscriptions")
     type = models.TextField()
     status = models.SmallIntegerField(default=Status.ACTIVE.value)
     subscription_id = models.TextField(unique=True, null=True)
-    dataset = models.TextField()
-    query = models.TextField()
-    # TODO: Remove this default after we migrate
-    aggregation = models.IntegerField(default=0)
-    time_window = models.IntegerField()
-    resolution = models.IntegerField()
+    dataset = models.TextField(null=True)
+    query = models.TextField(null=True)
+    aggregation = models.IntegerField(default=0, null=True)
+    time_window = models.IntegerField(null=True)
+    resolution = models.IntegerField(null=True)
     date_added = models.DateTimeField(default=timezone.now)
 
     objects = BaseManager(
