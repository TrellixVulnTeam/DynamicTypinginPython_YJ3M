commit d2603a3830932359c9532a544d504da29dad689f
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Sep 1 15:06:51 2015 +0200

    Fixed the project creation API endpoint.

diff --git a/src/sentry/api/endpoints/team_project_index.py b/src/sentry/api/endpoints/team_project_index.py
index 4e216e38bf..4a74705f59 100644
--- a/src/sentry/api/endpoints/team_project_index.py
+++ b/src/sentry/api/endpoints/team_project_index.py
@@ -6,18 +6,18 @@ from rest_framework.response import Response
 from sentry.api.base import DocSection
 from sentry.api.bases.team import TeamEndpoint
 from sentry.api.serializers import serialize
-from sentry.models import Project
+from sentry.models import Project, AuditLogEntryEvent
 
 
-class ProjectSerializer(serializers.ModelSerializer):
-    class Meta:
-        model = Project
-        fields = ('name', 'slug')
+class ProjectSerializer(serializers.Serializer):
+    name = serializers.CharField(max_length=200, required=True)
+    slug = serializers.CharField(max_length=200, required=False)
 
 
 class TeamProjectIndexEndpoint(TeamEndpoint):
     doc_section = DocSection.TEAMS
 
+    @attach_scenarios([list_team_projects_scenario])
     def get(self, request, team):
         """
         List a Team's Projects
@@ -36,19 +36,44 @@ class TeamProjectIndexEndpoint(TeamEndpoint):
 
         return Response(serialize(results, request.user))
 
+    @attach_scenarios([create_project_scenario])
     def post(self, request, team):
         """
         Create a New Project
         ````````````````````
 
         Create a new project bound to a team.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          team belongs to.
+        :pparam string team_slug: the slug of the team to create a new project
+                                  for.
+        :param string name: the name for the new project.
+        :param string slug: optionally a slug for the new project.  If it's
+                            not provided a slug is generated from the name.
+        :auth: required
         """
         serializer = ProjectSerializer(data=request.DATA)
 
         if serializer.is_valid():
-            project = serializer.object
-            project.team = team
-            project.organization = team.organization
-            project.save()
+            result = serializer.object
+
+            project = Project.objects.create(
+                name=result['name'],
+                slug=result.get('slug'),
+                organization=team.organization,
+                team=team
+            )
+
+            # XXX: create sample event?
+
+            self.create_audit_entry(
+                request=request,
+                organization=team.organization,
+                target_object=project.id,
+                event=AuditLogEntryEvent.PROJECT_ADD,
+                data=project.get_audit_log_data(),
+            )
+
             return Response(serialize(project, request.user), status=201)
         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
