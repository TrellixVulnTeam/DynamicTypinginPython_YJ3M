commit 39ba63fe55745ffa49ca6366609befdf491d7f96
Author: David Cramer <dcramer@gmail.com>
Date:   Mon May 6 20:14:25 2013 -0700

    Tag functions and files from stacktraces

diff --git a/src/sentry/filters/helpers.py b/src/sentry/filters/helpers.py
index cdcd37b95a..e2f9acac7a 100644
--- a/src/sentry/filters/helpers.py
+++ b/src/sentry/filters/helpers.py
@@ -43,6 +43,10 @@ def get_filters(model=None, project=None):
 
     if project:
         for tag in project.get_tags():
+            # sentry:* are reserved
+            if tag.startswith('sentry:'):
+                continue
+
             if tag not in TAG_FILTER_CACHE:
                 # Generate a new filter class because we are lazy and do
                 # not want to rewrite code
diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index c3cf22a5ad..00801d7390 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -40,7 +40,7 @@ def is_url(filename):
 
 
 def get_context(lineno, context_line, pre_context=None, post_context=None, filename=None,
-        format=False):
+                format=False):
     lineno = int(lineno)
     context = []
     start_lineno = lineno - len(pre_context or [])
@@ -260,9 +260,10 @@ class Frame(object):
     attrs = ('abs_path', 'filename', 'lineno', 'colno', 'in_app', 'context_line',
              'pre_context', 'post_context', 'vars', 'module', 'function', 'data')
 
-    def __init__(self, abs_path=None, filename=None, lineno=None, colno=None, in_app=False,
-                 context_line=None, pre_context=(), post_context=(), vars=None,
-                 module=None, function=None, data=None, **kwargs):
+    def __init__(self, abs_path=None, filename=None, lineno=None, colno=None,
+                 in_app=None, context_line=None, pre_context=(),
+                 post_context=(), vars=None, module=None, function=None,
+                 data=None, **kwargs):
         self.abs_path = abs_path or filename
         self.filename = filename or abs_path
 
@@ -372,8 +373,10 @@ class Frame(object):
         else:
             choices = []
         choices.append('default')
-        templates = ['sentry/partial/frames/%s.txt' % choice
-                      for choice in choices]
+        templates = [
+            'sentry/partial/frames/%s.txt' % choice
+            for choice in choices
+        ]
         return render_to_string(templates, {
             'abs_path': self.abs_path,
             'filename': self.filename,
@@ -464,6 +467,9 @@ class Stacktrace(Interface):
     def __init__(self, frames, **kwargs):
         self.frames = [Frame(**f) for f in frames]
 
+    def __iter__(self):
+        return iter(self.frames)
+
     def validate(self):
         for frame in self.frames:
             # ensure we've got the correct required values
@@ -482,6 +488,9 @@ class Stacktrace(Interface):
             'frames': frames,
         }
 
+    def has_app_frames(self):
+        return any(f.in_app is not None for f in self.frames)
+
     def unserialize(self, data):
         data['frames'] = [Frame(**f) for f in data.pop('frames', [])]
         return data
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 65277e3d83..ec546f6aa1 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -7,6 +7,8 @@ sentry.tasks.post_process
 """
 
 from celery.task import task
+from hashlib import md5
+
 from sentry.plugins import plugins
 from sentry.utils.safe import safe_execute
 
@@ -20,6 +22,7 @@ def post_process_group(group, event, **kwargs):
         plugin_post_process_group.delay(
             plugin.slug, group=group, event=event, **kwargs)
 
+    record_affected_code.delay(group=group, event=event)
     record_affected_user.delay(group=group, event=event)
 
 
@@ -40,12 +43,14 @@ def plugin_post_process_group(plugin_slug, group, **kwargs):
 def record_affected_user(group, event, **kwargs):
     from sentry.models import Group
 
+    data = event.data.get('sentry.interfaces.User')
+    if not data:
+        return
+
     user_ident = event.user_ident
     if not user_ident:
         return
 
-    data = event.data.get('sentry.interfaces.User')
-
     Group.objects.add_tags(group, [
         ('sentry:user', user_ident, {
             'id': data.get('id'),
@@ -54,3 +59,42 @@ def record_affected_user(group, event, **kwargs):
             'data': data.get('data'),
         })
     ])
+
+
+@task(
+    name='sentry.tasks.post_process.record_affected_code',
+    queue='triggers')
+def record_affected_code(group, event, **kwargs):
+    from sentry.models import Group
+
+    data = event.interfaces.get('sentry.interfaces.Exception')
+    if not data:
+        print "no data"
+        return
+
+    checksum = lambda x: md5(x).hexdigest()
+
+    tags = []
+    for exception in data:
+        if not exception.stacktrace:
+            print "no stack"
+            continue
+        has_app_frames = exception.stacktrace.has_app_frames()
+        for frame in exception.stacktrace:
+            if has_app_frames and not frame.in_app:
+                continue
+            tags.extend((
+                (
+                    'sentry:filename',
+                    checksum(frame.filename),
+                    {'filename': frame.filename},
+                ),
+                (
+                    'sentry:function',
+                    checksum('%s:%s' % (frame.filename, frame.function)),
+                    {'filename': frame.filename, 'function': frame.function}
+                )
+            ))
+
+    if tags:
+        Group.objects.add_tags(group, tags)
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index 3e378e93bb..4af1dda6c1 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -424,6 +424,10 @@ def group_tag_list(request, team, project, group):
     # O(N) db access
     tag_list = []
     for tag_name in group.get_tags():
+        # sentry:* are reserved
+        if tag_name.startswith('sentry:'):
+            continue
+
         tag_list.append((tag_name, [
             (value, times_seen, percent(group.times_seen, times_seen))
             for (value, times_seen, first_seen, last_seen)
diff --git a/src/sentry/web/frontend/projects.py b/src/sentry/web/frontend/projects.py
index e3ccc492aa..fc82c8a4f1 100644
--- a/src/sentry/web/frontend/projects.py
+++ b/src/sentry/web/frontend/projects.py
@@ -100,7 +100,8 @@ def manage_project(request, team, project):
         project = form.save()
         project.update_option('sentry:origins', form.cleaned_data.get('origins') or [])
         project.update_option('sentry:resolve_age', form.cleaned_data.get('resolve_age'))
-        messages.add_message(request, messages.SUCCESS,
+        messages.add_message(
+            request, messages.SUCCESS,
             _('Changes to your project were saved.'))
 
         return HttpResponseRedirect(reverse('sentry-manage-project', args=[team.slug, project.slug]))
@@ -175,7 +176,8 @@ def remove_project_key(request, team, project, key_id):
         return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.team.slug, project.slug]))
 
     key.delete()
-    messages.add_message(request, messages.SUCCESS,
+    messages.add_message(
+        request, messages.SUCCESS,
         _('The API key (%s) was revoked.') % (key.public_key,))
 
     return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.team.slug, project.slug]))
@@ -183,7 +185,10 @@ def remove_project_key(request, team, project, key_id):
 
 @has_access(MEMBER_OWNER)
 def manage_project_tags(request, team, project):
-    tag_list = TagKey.objects.all_keys(project)
+    tag_list = filter(
+        lambda x: not x.startswith('sentry:'),
+        TagKey.objects.all_keys(project))
+
     if tag_list:
         form = ProjectTagsForm(project, tag_list, request.POST or None)
     else:
@@ -192,7 +197,8 @@ def manage_project_tags(request, team, project):
     if form and form.is_valid():
         form.save()
 
-        messages.add_message(request, messages.SUCCESS,
+        messages.add_message(
+            request, messages.SUCCESS,
             _('Your settings were saved successfully.'))
 
         return HttpResponseRedirect(reverse('sentry-manage-project-tags', args=[project.team.slug, project.slug]))
@@ -249,7 +255,8 @@ def notification_settings(request, team, project):
         project.update_option('alert:threshold', (
             alert_form.cleaned_data['pct_threshold'], alert_form.cleaned_data['min_events']))
 
-        messages.add_message(request, messages.SUCCESS,
+        messages.add_message(
+            request, messages.SUCCESS,
             _('Your settings were saved successfully.'))
 
         return HttpResponseRedirect(reverse('sentry-project-notifications', args=[project.team.slug, project.slug]))
@@ -280,7 +287,8 @@ def manage_plugins(request, team, project):
             if plugin.can_enable_for_projects():
                 plugin.set_option('enabled', plugin.slug in enabled, project)
 
-        messages.add_message(request, messages.SUCCESS,
+        messages.add_message(
+            request, messages.SUCCESS,
             _('Your settings were saved successfully.'))
 
         return HttpResponseRedirect(request.path)
@@ -318,7 +326,8 @@ def configure_project_plugin(request, team, project, slug):
 
     action, view = plugin_config(plugin, project, request)
     if action == 'redirect':
-        messages.add_message(request, messages.SUCCESS,
+        messages.add_message(
+            request, messages.SUCCESS,
             _('Your settings were saved successfully.'))
 
         return HttpResponseRedirect(request.path)
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index a19d7f3acb..f73222654a 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -6,11 +6,12 @@ import mock
 
 from sentry.models import Group
 from sentry.testutils import TestCase
-from sentry.tasks.post_process import record_affected_user
+from sentry.tasks.post_process import (
+    record_affected_user, record_affected_code)
 
 
 class RecordAffectedUserTest(TestCase):
-    def test_records_users_seen(self):
+    def test_simple(self):
         event = Group.objects.from_kwargs(1, message='foo', **{
             'sentry.interfaces.User': {
                 'email': 'foo@example.com',
@@ -28,3 +29,34 @@ class RecordAffectedUserTest(TestCase):
                     'data': None,
                 })
             ])
+
+
+class RecordAffectedCodeTest(TestCase):
+    def test_simple(self):
+        event = Group.objects.from_kwargs(1, message='foo', **{
+            'sentry.interfaces.Exception': {
+                'values': [{
+                    'type': 'TypeError',
+                    'value': 'test',
+                    'stacktrace': {
+                        'frames': [{
+                            'function': 'bar',
+                            'filename': 'foo.py',
+                        }],
+                    },
+                }],
+            },
+        })
+
+        with mock.patch.object(Group.objects, 'add_tags') as add_tags:
+            record_affected_code(group=event.group, event=event)
+
+            add_tags.assert_called_once_with(event.group, [
+                ('sentry:filename', '1effb24729ae4c43efa36b460511136a', {
+                    'filename': 'foo.py',
+                }),
+                ('sentry:function', '7823c20ad591da0bbb78d083c118609c', {
+                    'filename': 'foo.py',
+                    'function': 'bar',
+                })
+            ])
