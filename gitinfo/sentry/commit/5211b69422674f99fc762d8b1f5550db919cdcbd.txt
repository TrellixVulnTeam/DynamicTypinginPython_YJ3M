commit 5211b69422674f99fc762d8b1f5550db919cdcbd
Author: evanh <evanh@users.noreply.github.com>
Date:   Tue Apr 28 12:39:33 2020 -0400

    fix(discover) Only send project ids we need (#18418)
    
    Update the automatic fields/conditions to factor in if the user is filtering to
    a particular project, and only send to snuba the project IDs that the user is
    filtering for.

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index d0e5caa97a..4acdb73666 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -799,6 +799,8 @@ def get_filter(query=None, params=None):
             return value
         return [value]
 
+    # Used to avoid doing multiple conditions on project ID
+    project_to_filter = None
     for term in parsed_terms:
         if isinstance(term, SearchFilter):
             name = term.key.name
@@ -819,6 +821,9 @@ def get_filter(query=None, params=None):
                 term = SearchFilter(SearchKey("project_id"), term.operator, SearchValue(project.id))
                 converted_filter = convert_search_filter_to_snuba_query(term)
                 if converted_filter:
+                    if term.operator == "=":
+                        project_to_filter = project.id
+
                     kwargs["conditions"].append(converted_filter)
             elif name == ISSUE_ID_ALIAS and term.value.value != "":
                 # A blank term value means that this is a has filter
@@ -869,7 +874,10 @@ def get_filter(query=None, params=None):
             kwargs[key] = params.get(key, None)
         # OrganizationEndpoint.get_filter() uses project_id, but eventstore.Filter uses project_ids
         if "project_id" in params:
-            kwargs["project_ids"] = params["project_id"]
+            if project_to_filter:
+                kwargs["project_ids"] = [project_to_filter]
+            else:
+                kwargs["project_ids"] = params["project_id"]
         if "environment" in params:
             term = SearchFilter(SearchKey("environment"), "=", SearchValue(params["environment"]))
             kwargs["conditions"].append(convert_search_filter_to_snuba_query(term))
@@ -1403,7 +1411,14 @@ def resolve_field_list(fields, snuba_filter, auto_fields=True):
             project_key = PROJECT_NAME_ALIAS
 
     if project_key:
-        project_ids = snuba_filter.filter_keys.get("project_id", [])
+        # Check to see if there's a condition on project ID already, to avoid unnecessary lookups
+        filtered_project_ids = None
+        if snuba_filter.conditions:
+            for cond in snuba_filter.conditions:
+                if cond[0] == "project_id":
+                    filtered_project_ids = [cond[2]] if cond[1] == "=" else cond[2]
+
+        project_ids = filtered_project_ids or snuba_filter.filter_keys.get("project_id", [])
         projects = Project.objects.filter(id__in=project_ids).values("slug", "id")
         aggregations.append(
             [
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index cefecf39b2..394e2f1407 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -329,6 +329,11 @@ def get_query_params_to_update_for_projects(query_params, with_org=False):
                 for k in query_params.filter_keys
             ]
             project_ids = list(set.union(*map(set, ids)))
+    elif query_params.conditions:
+        project_ids = []
+        for cond in query_params.conditions:
+            if cond[0] == "project_id":
+                project_ids = [cond[2]] if cond[1] == "=" else cond[2]
     else:
         project_ids = []
 
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 6bbd7dc81c..7d0dcc49db 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -1198,8 +1198,8 @@ class GetSnubaQueryArgsTest(TestCase):
         params = {"project_id": [p1.id, p2.id]}
         _filter = get_filter("project.name:{}".format(p1.slug), params)
         assert _filter.conditions == [["project_id", "=", p1.id]]
-        assert _filter.filter_keys == {"project_id": [p1.id, p2.id]}
-        assert _filter.project_ids == [p1.id, p2.id]
+        assert _filter.filter_keys == {"project_id": [p1.id]}
+        assert _filter.project_ids == [p1.id]
 
         params = {"project_id": [p1.id, p2.id]}
         _filter = get_filter("!project.name:{}".format(p1.slug), params)
diff --git a/tests/sentry/snuba/test_discover.py b/tests/sentry/snuba/test_discover.py
index b42626a4c3..02b4bff730 100644
--- a/tests/sentry/snuba/test_discover.py
+++ b/tests/sentry/snuba/test_discover.py
@@ -398,6 +398,42 @@ class QueryTransformTest(TestCase):
             referrer=None,
         )
 
+    @patch("sentry.snuba.discover.raw_query")
+    def test_project_filter_limits_automatic_fields(self, mock_query):
+        project2 = self.create_project(organization=self.organization)
+        mock_query.return_value = {
+            "meta": [{"name": "title"}, {"name": "project_id"}],
+            "data": [{"title": "stuff", "project_id": project2.id}],
+        }
+        discover.query(
+            selected_columns=["title", "project"],
+            query="project:{}".format(project2.slug),
+            params={"project_id": [self.project.id, project2.id]},
+        )
+        mock_query.assert_called_with(
+            selected_columns=["title", "project_id"],
+            aggregations=[
+                [
+                    "transform(project_id, array({}), array('{}'), '')".format(
+                        six.text_type(project2.id), project2.slug
+                    ),
+                    None,
+                    "project",
+                ]
+            ],
+            filter_keys={"project_id": [project2.id]},
+            dataset=Dataset.Discover,
+            end=None,
+            start=None,
+            conditions=[["project_id", "=", project2.id]],
+            groupby=["title", "project_id"],
+            having=[],
+            orderby=None,
+            limit=50,
+            offset=None,
+            referrer=None,
+        )
+
     @patch("sentry.snuba.discover.raw_query")
     def test_selected_columns_no_auto_fields(self, mock_query):
         mock_query.return_value = {
@@ -840,7 +876,7 @@ class QueryTransformTest(TestCase):
         mock_query.assert_called_with(
             selected_columns=["transaction", "duration"],
             conditions=[["project_id", "=", project2.id]],
-            filter_keys={"project_id": [self.project.id, project2.id]},
+            filter_keys={"project_id": [project2.id]},
             groupby=[],
             dataset=Dataset.Discover,
             aggregations=[],
diff --git a/tests/snuba/api/endpoints/test_organization_events_facets.py b/tests/snuba/api/endpoints/test_organization_events_facets.py
index 013c812aab..d6d05a03f0 100644
--- a/tests/snuba/api/endpoints/test_organization_events_facets.py
+++ b/tests/snuba/api/endpoints/test_organization_events_facets.py
@@ -25,6 +25,16 @@ class OrganizationEventsFacetsEndpointTest(SnubaTestCase, APITestCase):
         )
         self.min_ago_iso = iso_format(self.min_ago)
 
+    def assert_facet(self, response, key, expected):
+        actual = None
+        for facet in response.data:
+            if facet["key"] == key:
+                actual = facet
+                break
+        assert actual is not None, "Could not find {} facet in {}".format(key, response.data)
+        assert "topValues" in actual
+        assert sorted(expected) == sorted(actual["topValues"])
+
     def test_simple(self):
         self.store_event(
             data={
@@ -270,6 +280,33 @@ class OrganizationEventsFacetsEndpointTest(SnubaTestCase, APITestCase):
         expected = [{"name": "two", "value": "two", "count": 1}]
         self.assert_facet(response, "number", expected)
 
+    def test_project_filtered(self):
+        self.store_event(
+            data={
+                "event_id": uuid4().hex,
+                "timestamp": self.min_ago_iso,
+                "tags": {"number": "two"},
+            },
+            project_id=self.project.id,
+        )
+        self.store_event(
+            data={
+                "event_id": uuid4().hex,
+                "timestamp": self.min_ago_iso,
+                "tags": {"number": "one"},
+            },
+            project_id=self.project2.id,
+        )
+
+        with self.feature(self.feature_list):
+            response = self.client.get(
+                self.url, {"query": "project:{}".format(self.project.slug)}, format="json"
+            )
+
+        assert response.status_code == 200, response.content
+        expected = [{"name": "two", "value": "two", "count": 1}]
+        self.assert_facet(response, "number", expected)
+
     def test_project_key(self):
         self.store_event(
             data={
@@ -449,16 +486,6 @@ class OrganizationEventsFacetsEndpointTest(SnubaTestCase, APITestCase):
             ]
             self.assert_facet(response, "environment", expected)
 
-    def assert_facet(self, response, key, expected):
-        actual = None
-        for facet in response.data:
-            if facet["key"] == key:
-                actual = facet
-                break
-        assert actual is not None, "Could not find {} facet in {}".format(key, response.data)
-        assert "topValues" in actual
-        assert sorted(expected) == sorted(actual["topValues"])
-
     def test_out_of_retention(self):
         with self.options({"system.event-retention-days": 10}):
             with self.feature(self.feature_list):
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 354ddf7e06..1dfd304613 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -308,6 +308,30 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
             == "Invalid query. Project morty does not exist or is not an actively selected project."
         )
 
+    def test_project_condition_used_for_automatic_filters(self):
+        self.login_as(user=self.user)
+        project = self.create_project()
+        self.store_event(
+            data={"event_id": "a" * 32, "environment": "staging", "timestamp": self.min_ago},
+            project_id=project.id,
+        )
+
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "field": ["project", "count()"],
+                    "query": 'project:"%s"' % project.slug,
+                    "statsPeriod": "14d",
+                },
+            )
+
+        assert response.status_code == 200, response.content
+        assert len(response.data["data"]) == 1
+        assert response.data["data"][0]["project"] == project.slug
+        assert "project.id" not in response.data["data"][0]
+
     def test_user_search(self):
         self.login_as(user=self.user)
 
