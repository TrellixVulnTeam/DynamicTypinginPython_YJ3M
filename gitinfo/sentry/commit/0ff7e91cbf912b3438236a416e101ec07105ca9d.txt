commit 0ff7e91cbf912b3438236a416e101ec07105ca9d
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Wed Oct 30 18:44:42 2019 -0400

    feat(discover2): Add "save as", "update", and "delete" saved queries into the discover dashboard (#15342)

diff --git a/src/sentry/static/sentry/app/components/sidebar/discover2Item.tsx b/src/sentry/static/sentry/app/components/sidebar/discover2Item.tsx
index 801c69645c..b0e78c2199 100644
--- a/src/sentry/static/sentry/app/components/sidebar/discover2Item.tsx
+++ b/src/sentry/static/sentry/app/components/sidebar/discover2Item.tsx
@@ -4,12 +4,7 @@ import {browserHistory} from 'react-router';
 
 import {Client} from 'app/api';
 import AutoComplete from 'app/components/autoComplete';
-import Button from 'app/components/button';
-import ButtonBar from 'app/components/buttonBar';
-import {
-  fetchSavedQueries,
-  deleteSavedQuery,
-} from 'app/actionCreators/discoverSavedQueries';
+import {fetchSavedQueries} from 'app/actionCreators/discoverSavedQueries';
 import Highlight from 'app/components/highlight';
 import InlineSvg from 'app/components/inlineSvg';
 import {t} from 'app/locale';
@@ -89,24 +84,6 @@ class Discover2Item extends React.Component<Props, State> {
     browserHistory.push(target);
   };
 
-  handleEdit = (event: React.MouseEvent<Element>, item: SavedQuery) => {
-    event.preventDefault();
-    event.stopPropagation();
-    const {organization} = this.props;
-    const target = {
-      pathname: `/organizations/${organization.slug}/eventsv2/`,
-      query: {...EventView.fromSavedQuery(item).generateQueryStringObject(), edit: true},
-    };
-    browserHistory.push(target);
-  };
-
-  handleDelete = (event: React.MouseEvent<Element>, item: SavedQuery) => {
-    const {organization, api} = this.props;
-    event.preventDefault();
-    event.stopPropagation();
-    deleteSavedQuery(api, organization.slug, item.id);
-  };
-
   renderSavedQueries({inputValue, getItemProps, highlightedIndex}) {
     const {savedQueries} = this.props;
     if (!savedQueries || savedQueries.length === 0) {
@@ -134,20 +111,6 @@ class Discover2Item extends React.Component<Props, State> {
             <QueryName>
               <Highlight text={inputValue}>{item.name}</Highlight>
             </QueryName>
-            <ButtonBar>
-              <MenuItemButton
-                borderless
-                size="xxsmall"
-                icon="icon-edit"
-                onClick={event => this.handleEdit(event, item)}
-              />
-              <MenuItemButton
-                borderless
-                size="xxsmall"
-                icon="icon-trash"
-                onClick={event => this.handleDelete(event, item)}
-              />
-            </ButtonBar>
           </MenuItem>
         );
       });
@@ -275,11 +238,6 @@ const StyledLabel = styled('label')<{htmlFor: string}>`
   padding: ${space(1.5)} ${space(1)} ${space(1.5)} ${space(2)};
 `;
 
-const MenuItemButton = styled(Button)`
-  color: ${p => p.theme.gray3};
-  margin-left: ${space(0.5)};
-`;
-
 const InputContainer = styled('div')`
   display: flex;
   align-items: center;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index 766caf6ce8..e7a71e2a16 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -1,5 +1,6 @@
 import {Location, Query} from 'history';
 import {isString, cloneDeep, pick, isEqual} from 'lodash';
+import moment from 'moment';
 
 import {DEFAULT_PER_PAGE} from 'app/constants';
 import {EventViewv1} from 'app/types';
@@ -272,7 +273,7 @@ function isLegacySavedQuery(
 
 const queryStringFromSavedQuery = (saved: LegacySavedQuery | SavedQuery): string => {
   if (!isLegacySavedQuery(saved) && saved.query) {
-    return saved.query;
+    return saved.query || '';
   }
   if (isLegacySavedQuery(saved) && saved.conditions) {
     const conditions = saved.conditions.map(item => {
@@ -295,7 +296,7 @@ class EventView {
   fields: Readonly<Field[]>;
   sorts: Readonly<Sort[]>;
   tags: Readonly<string[]>;
-  query: string | undefined;
+  query: string;
   project: Readonly<number[]>;
   start: string | undefined;
   end: string | undefined;
@@ -308,7 +309,7 @@ class EventView {
     fields: Readonly<Field[]>;
     sorts: Readonly<Sort[]>;
     tags: Readonly<string[]>;
-    query?: string | undefined;
+    query: string;
     project: Readonly<number[]>;
     start: string | undefined;
     end: string | undefined;
@@ -340,7 +341,7 @@ class EventView {
     this.fields = props.fields;
     this.sorts = sorts;
     this.tags = props.tags;
-    this.query = props.query;
+    this.query = typeof props.query === 'string' ? props.query : '';
     this.project = props.project;
     this.start = props.start;
     this.end = props.end;
@@ -355,7 +356,7 @@ class EventView {
       fields: decodeFields(location),
       sorts: decodeSorts(location),
       tags: collectQueryStringByKey(location.query, 'tag'),
-      query: decodeQuery(location),
+      query: decodeQuery(location) || '',
       project: decodeProjects(location),
       start: decodeScalar(location.query.start),
       end: decodeScalar(location.query.end),
@@ -377,7 +378,7 @@ class EventView {
       name: eventViewV1.name,
       sorts: fromSorts(eventViewV1.data.sort),
       tags: eventViewV1.tags,
-      query: eventViewV1.data.query,
+      query: eventViewV1.data.query || '',
       project: [],
       id: undefined,
       start: undefined,
@@ -421,6 +422,49 @@ class EventView {
     });
   }
 
+  isEqualTo(other: EventView): boolean {
+    const keys = [
+      'id',
+      'name',
+      'query',
+      'statsPeriod',
+      'fields',
+      'sorts',
+      'tags',
+      'project',
+      'environment',
+    ];
+
+    for (const key of keys) {
+      const currentValue = this[key];
+      const otherValue = other[key];
+
+      if (!isEqual(currentValue, otherValue)) {
+        return false;
+      }
+    }
+
+    // compare datetime selections using moment
+
+    const dateTimeKeys = ['start', 'end'];
+
+    for (const key of dateTimeKeys) {
+      const currentValue = this[key];
+      const otherValue = other[key];
+
+      if (currentValue && otherValue) {
+        const currentDateTime = moment.utc(currentValue);
+        const othereDateTime = moment.utc(otherValue);
+
+        if (!currentDateTime.isSame(othereDateTime)) {
+          return false;
+        }
+      }
+    }
+
+    return true;
+  }
+
   toNewQuery(): NewQuery {
     const orderby = this.sorts.length > 0 ? encodeSorts(this.sorts)[0] : undefined;
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/index.tsx
index 21507ae264..128d5591da 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/index.tsx
@@ -21,7 +21,7 @@ import withOrganization from 'app/utils/withOrganization';
 
 import Events from './events';
 import EventDetails from './eventDetails';
-import EventsSaveQueryButton from './saveQueryButton';
+import SavedQueryButtonGroup from './savedQueryButtonGroup';
 import {getFirstQueryString} from './utils';
 import {ALL_VIEWS, TRANSACTION_VIEWS} from './data';
 import EventView from './eventView';
@@ -84,8 +84,7 @@ class EventsV2 extends React.Component<Props> {
     const eventSlug = getFirstQueryString(location.query, 'eventSlug');
     const eventView = EventView.fromLocation(location);
 
-    const hasQuery =
-      location.query.field || location.query.eventSlug || location.query.view;
+    const hasQuery = location.query.field || location.query.eventSlug;
 
     const documentTitle = this.getEventViewName()
       .reverse()
@@ -103,8 +102,7 @@ class EventsV2 extends React.Component<Props> {
                     {pageTitle} <BetaTag />
                   </PageHeading>
                   {hasQuery && (
-                    <EventsSaveQueryButton
-                      isEditing={!!location.query.edit}
+                    <SavedQueryButtonGroup
                       location={location}
                       organization={organization}
                       eventView={eventView}
diff --git a/src/sentry/static/sentry/app/views/eventsV2/saveQueryButton.tsx b/src/sentry/static/sentry/app/views/eventsV2/saveQueryButton.tsx
index 24b49aad9d..c0e189ee90 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/saveQueryButton.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/saveQueryButton.tsx
@@ -6,10 +6,7 @@ import {Location} from 'history';
 import {Client} from 'app/api';
 import {Organization} from 'app/types';
 import {t} from 'app/locale';
-import {
-  createSavedQuery,
-  updateSavedQuery,
-} from 'app/actionCreators/discoverSavedQueries';
+import {createSavedQuery} from 'app/actionCreators/discoverSavedQueries';
 import {addSuccessMessage} from 'app/actionCreators/indicator';
 import DropdownControl from 'app/components/dropdownControl';
 import DropdownButton from 'app/components/dropdownButton';
@@ -18,6 +15,7 @@ import Input from 'app/components/forms/input';
 import InlineSvg from 'app/components/inlineSvg';
 import space from 'app/styles/space';
 import withApi from 'app/utils/withApi';
+import {SavedQuery} from 'app/stores/discoverSavedQueriesStore';
 
 import EventView from './eventView';
 
@@ -26,7 +24,8 @@ type Props = {
   organization: Organization;
   eventView: EventView;
   location: Location;
-  isEditing: boolean;
+  savedQueries: SavedQuery[];
+  isEditingExistingQuery: boolean;
 };
 
 type State = {
@@ -38,21 +37,6 @@ class EventsSaveQueryButton extends React.Component<Props, State> {
     queryName: '',
   };
 
-  componentDidUpdate(prevProps: Props) {
-    // Going from one query to another whilst not leaving edit mode
-    if (
-      (this.props.isEditing === true &&
-        this.props.eventView.id !== prevProps.eventView.id) ||
-      this.props.isEditing !== prevProps.isEditing
-    ) {
-      const queryName =
-        this.props.isEditing === true ? this.props.eventView.name || '' : '';
-
-      // eslint-disable-next-line react/no-did-update-set-state
-      this.setState({queryName});
-    }
-  }
-
   swallowEvent = (event: React.MouseEvent) => {
     // Stop propagation for the input and container so
     // people can interact with the inputs in the dropdown.
@@ -67,19 +51,14 @@ class EventsSaveQueryButton extends React.Component<Props, State> {
   };
 
   handleSave = () => {
-    const {api, eventView, organization, location, isEditing} = this.props;
+    const {api, eventView, organization, location} = this.props;
 
     const payload = eventView.toNewQuery();
     if (this.state.queryName) {
       payload.name = this.state.queryName;
     }
-    let promise;
-    if (isEditing) {
-      promise = updateSavedQuery(api, organization.slug, payload);
-    } else {
-      promise = createSavedQuery(api, organization.slug, payload);
-    }
-    promise.then(saved => {
+
+    createSavedQuery(api, organization.slug, payload).then(saved => {
       const view = EventView.fromSavedQuery(saved);
       addSuccessMessage(t('Query saved'));
 
@@ -96,8 +75,9 @@ class EventsSaveQueryButton extends React.Component<Props, State> {
   };
 
   render() {
-    const {isEditing} = this.props;
-    const buttonText = isEditing ? t('Update') : t('Save');
+    const newQueryLabel = this.props.isEditingExistingQuery
+      ? t('Save as...')
+      : t('Save query');
 
     return (
       <DropdownControl
@@ -110,7 +90,7 @@ class EventsSaveQueryButton extends React.Component<Props, State> {
             showChevron={false}
           >
             <StyledInlineSvg src="icon-bookmark" size="14" />
-            {t('Save Search')}
+            {newQueryLabel}
           </StyledDropdownButton>
         )}
       >
@@ -122,7 +102,7 @@ class EventsSaveQueryButton extends React.Component<Props, State> {
             onChange={this.handleInputChange}
           />
           <Button size="small" onClick={this.handleSave} priority="primary">
-            {buttonText}
+            {t('Save')}
           </Button>
         </SaveQueryContainer>
       </DropdownControl>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/savedQueryButtonGroup.tsx b/src/sentry/static/sentry/app/views/eventsV2/savedQueryButtonGroup.tsx
new file mode 100644
index 0000000000..4424325041
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/eventsV2/savedQueryButtonGroup.tsx
@@ -0,0 +1,158 @@
+import React from 'react';
+import {Location} from 'history';
+import styled from 'react-emotion';
+import {browserHistory} from 'react-router';
+
+import space from 'app/styles/space';
+import {Client} from 'app/api';
+import {t} from 'app/locale';
+import Button from 'app/components/button';
+import {Organization} from 'app/types';
+import {
+  deleteSavedQuery,
+  updateSavedQuery,
+} from 'app/actionCreators/discoverSavedQueries';
+import {SavedQuery} from 'app/stores/discoverSavedQueriesStore';
+import withApi from 'app/utils/withApi';
+import withDiscoverSavedQueries from 'app/utils/withDiscoverSavedQueries';
+import {addSuccessMessage} from 'app/actionCreators/indicator';
+
+import EventView from './eventView';
+import EventsSaveQueryButton from './saveQueryButton';
+
+type Props = {
+  api: Client;
+  eventView: EventView;
+  location: Location;
+  organization: Organization;
+  savedQueries: SavedQuery[];
+};
+
+class SavedQueryButtonGroup extends React.Component<Props> {
+  getExistingSavedQuery = (): EventView | undefined => {
+    const {savedQueries, eventView} = this.props;
+
+    const index = savedQueries.findIndex(needle => {
+      return needle.id === eventView.id;
+    });
+
+    if (index < 0) {
+      return undefined;
+    }
+
+    const savedQuery = savedQueries[index];
+
+    return EventView.fromSavedQuery(savedQuery);
+  };
+
+  isEditingExistingQuery = (): boolean => {
+    const {eventView} = this.props;
+
+    const isValidId = typeof eventView.id === 'string';
+
+    return !!this.getExistingSavedQuery() && isValidId;
+  };
+
+  deleteQuery = (event: React.MouseEvent<Element>) => {
+    event.preventDefault();
+    event.stopPropagation();
+
+    if (!this.isEditingExistingQuery()) {
+      return;
+    }
+
+    const {organization, api, eventView} = this.props;
+
+    deleteSavedQuery(api, organization.slug, eventView.id!).then(() => {
+      addSuccessMessage(t('Query deleted'));
+
+      // redirect to the primary discover2 page
+
+      browserHistory.push({
+        pathname: location.pathname,
+        query: {},
+      });
+    });
+  };
+
+  renderDeleteButton = () => {
+    if (!this.isEditingExistingQuery()) {
+      return null;
+    }
+
+    return <Button icon="icon-trash" onClick={this.deleteQuery} />;
+  };
+
+  handleSaveQuery = (event: React.MouseEvent<Element>) => {
+    event.preventDefault();
+    event.stopPropagation();
+
+    if (!this.isEditingExistingQuery()) {
+      return;
+    }
+
+    const {organization, api, eventView} = this.props;
+
+    const payload = eventView.toNewQuery();
+
+    updateSavedQuery(api, organization.slug, payload).then(_saved => {
+      addSuccessMessage(t('Query updated'));
+
+      // NOTE: there is no need to convert _saved into an EventView and push it
+      //       to the browser history, since this.props.eventView already
+      //       derives from location.
+    });
+  };
+
+  isQueryModified = (): boolean => {
+    const previousSavedQuery = this.getExistingSavedQuery();
+
+    if (!previousSavedQuery) {
+      return false;
+    }
+
+    const {eventView} = this.props;
+
+    return !eventView.isEqualTo(previousSavedQuery);
+  };
+
+  renderSaveButton = () => {
+    if (!this.isEditingExistingQuery()) {
+      return null;
+    }
+
+    return (
+      <Button disabled={!this.isQueryModified()} onClick={this.handleSaveQuery}>
+        {t('Update query')}
+      </Button>
+    );
+  };
+
+  render() {
+    const {location, organization, eventView, savedQueries} = this.props;
+
+    return (
+      <ButtonGroup>
+        {this.renderDeleteButton()}
+        <EventsSaveQueryButton
+          location={location}
+          organization={organization}
+          eventView={eventView}
+          savedQueries={savedQueries}
+          isEditingExistingQuery={this.isEditingExistingQuery()}
+        />
+        {this.renderSaveButton()}
+      </ButtonGroup>
+    );
+  }
+}
+
+const ButtonGroup = styled('div')`
+  display: flex;
+
+  > * + * {
+    margin-left: ${space(1)};
+  }
+`;
+
+export default withApi(withDiscoverSavedQueries(SavedQueryButtonGroup));
diff --git a/tests/js/spec/components/sidebar/discover2Item.spec.jsx b/tests/js/spec/components/sidebar/discover2Item.spec.jsx
index da14512395..23513b0057 100644
--- a/tests/js/spec/components/sidebar/discover2Item.spec.jsx
+++ b/tests/js/spec/components/sidebar/discover2Item.spec.jsx
@@ -1,6 +1,5 @@
 import React from 'react';
 import {mountWithTheme} from 'sentry-test/enzyme';
-import {browserHistory} from 'react-router';
 
 import {Client} from 'app/api';
 import Discover2Item from 'app/components/sidebar/discover2Item';
@@ -81,39 +80,4 @@ describe('Sidebar > Discover2Item', function() {
     const menuItems = menu.find('MenuItem');
     expect(menuItems).toHaveLength(2);
   });
-
-  it('handles delete buttons', async function() {
-    const deleteRequest = Client.addMockResponse({
-      url: '/organizations/org-slug/discover/saved/1/',
-      method: 'DELETE',
-    });
-    const wrapper = makeWrapper({organization, client});
-    // Wait for reflux
-    await tick();
-    await tick();
-
-    const nav = wrapper.find('nav');
-    nav.simulate('mouseEnter');
-    await wrapper.update();
-
-    const item = wrapper.find('Menu MenuItem').first();
-    item.find('MenuItemButton[icon="icon-trash"]').simulate('click');
-
-    expect(deleteRequest).toHaveBeenCalled();
-  });
-
-  it('handles edit buttons', async function() {
-    const wrapper = makeWrapper({organization, client});
-    // Wait for reflux
-    await tick();
-    await tick();
-
-    const nav = wrapper.find('nav');
-    nav.simulate('mouseEnter');
-    await wrapper.update();
-
-    const item = wrapper.find('Menu MenuItem').first();
-    item.find('MenuItemButton[icon="icon-edit"]').simulate('click');
-    expect(browserHistory.push).toHaveBeenCalled();
-  });
 });
diff --git a/tests/js/spec/views/eventsV2/eventView.spec.jsx b/tests/js/spec/views/eventsV2/eventView.spec.jsx
index faddd5eae8..f01bfda96c 100644
--- a/tests/js/spec/views/eventsV2/eventView.spec.jsx
+++ b/tests/js/spec/views/eventsV2/eventView.spec.jsx
@@ -57,6 +57,28 @@ describe('EventView.fromLocation()', function() {
       environment: ['staging'],
     });
   });
+
+  it('generates event view when there are no query strings', function() {
+    const location = {
+      query: {},
+    };
+
+    const eventView = EventView.fromLocation(location);
+
+    expect(eventView).toMatchObject({
+      id: void 0,
+      name: void 0,
+      fields: [],
+      sorts: [],
+      tags: [],
+      query: '',
+      project: [],
+      start: void 0,
+      end: void 0,
+      statsPeriod: void 0,
+      environment: [],
+    });
+  });
 });
 
 describe('EventView.fromSavedQuery()', function() {
@@ -90,6 +112,39 @@ describe('EventView.fromSavedQuery()', function() {
     });
   });
 
+  it('maps saved query with no conditions', function() {
+    const saved = {
+      orderby: '-count_id',
+      name: 'foo bar',
+      fields: ['release', 'count(id)'],
+      fieldnames: ['Release tags', 'counts'],
+      dateCreated: '2019-10-30T06:13:17.632078Z',
+      environment: ['dev', 'production'],
+      version: 2,
+      createdBy: '1',
+      dateUpdated: '2019-10-30T06:13:17.632096Z',
+      id: '5',
+      projects: [1],
+    };
+
+    const eventView = EventView.fromSavedQuery(saved);
+
+    const expected = {
+      id: '5',
+      name: 'foo bar',
+      fields: [
+        {field: 'release', title: 'Release tags'},
+        {field: 'count(id)', title: 'counts'},
+      ],
+      sorts: generateSorts(['count_id']),
+      query: '',
+      project: [1],
+      environment: ['dev', 'production'],
+    };
+
+    expect(eventView).toMatchObject(expected);
+  });
+
   it('maps equality conditions', function() {
     const saved = {
       fields: ['count()', 'id'],
@@ -118,6 +173,83 @@ describe('EventView.fromSavedQuery()', function() {
     expect(eventView.start).toEqual('');
     expect(eventView.end).toEqual('');
   });
+
+  it('saved queries are equal when start and end datetime differ in format', function() {
+    const saved = {
+      orderby: '-count_timestamp',
+      end: '2019-10-23T19:27:04+0000',
+      name: 'release query',
+      fields: ['release', 'count(timestamp)'],
+      fieldnames: ['release', 'counts'],
+      dateCreated: '2019-10-30T05:10:23.718937Z',
+      environment: ['dev', 'production'],
+      start: '2019-10-20T21:02:51+0000',
+      version: 2,
+      createdBy: '1',
+      dateUpdated: '2019-10-30T07:25:58.291917Z',
+      id: '3',
+      projects: [1],
+    };
+
+    const eventView = EventView.fromSavedQuery(saved);
+
+    const eventView2 = EventView.fromSavedQuery({
+      ...saved,
+      start: '2019-10-20T21:02:51Z',
+      end: '2019-10-23T19:27:04Z',
+    });
+
+    expect(eventView.isEqualTo(eventView2)).toBe(true);
+
+    const eventView3 = EventView.fromSavedQuery({
+      ...saved,
+      start: '2019-10-20T21:02:51Z',
+    });
+
+    expect(eventView.isEqualTo(eventView3)).toBe(true);
+
+    const eventView4 = EventView.fromSavedQuery({
+      ...saved,
+      end: '2019-10-23T19:27:04Z',
+    });
+
+    expect(eventView.isEqualTo(eventView4)).toBe(true);
+  });
+
+  it('saved queries are not equal when datetime selection are invalid', function() {
+    const saved = {
+      orderby: '-count_timestamp',
+      end: '2019-10-23T19:27:04+0000',
+      name: 'release query',
+      fields: ['release', 'count(timestamp)'],
+      fieldnames: ['release', 'counts'],
+      dateCreated: '2019-10-30T05:10:23.718937Z',
+      environment: ['dev', 'production'],
+      start: '2019-10-20T21:02:51+0000',
+      version: 2,
+      createdBy: '1',
+      dateUpdated: '2019-10-30T07:25:58.291917Z',
+      id: '3',
+      projects: [1],
+    };
+
+    const eventView = EventView.fromSavedQuery(saved);
+
+    const eventView2 = EventView.fromSavedQuery({
+      ...saved,
+      start: 'invalid',
+    });
+
+    expect(eventView.isEqualTo(eventView2)).toBe(false);
+
+    const eventView3 = EventView.fromSavedQuery({
+      ...saved,
+      end: 'invalid',
+    });
+
+    expect(eventView.isEqualTo(eventView3)).toBe(false);
+    expect(eventView2.isEqualTo(eventView3)).toBe(false);
+  });
 });
 
 describe('EventView.generateQueryStringObject()', function() {
@@ -608,6 +740,7 @@ describe('EventView.clone()', function() {
 
     expect(eventView).toMatchObject(state);
     expect(eventView2).toMatchObject(state);
+    expect(eventView.isEqualTo(eventView2)).toBe(true);
   });
 });
 
@@ -1262,6 +1395,174 @@ describe('EventView.sortOnField()', function() {
   });
 });
 
+describe('EventView.isEqualTo()', function() {
+  it('should be true when equal', function() {
+    const state = {
+      id: '1234',
+      name: 'best query',
+      fields: [
+        {field: 'count()', title: 'events'},
+        {field: 'project.id', title: 'project'},
+      ],
+      sorts: generateSorts(['count']),
+      tags: ['foo', 'bar'],
+      query: 'event.type:error',
+      project: [42],
+      start: '2019-10-01T00:00:00',
+      end: '2019-10-02T00:00:00',
+      statsPeriod: '14d',
+      environment: ['staging'],
+    };
+
+    const eventView = new EventView(state);
+    const eventView2 = new EventView(state);
+
+    expect(eventView2 !== eventView).toBeTruthy();
+
+    expect(eventView).toMatchObject(state);
+    expect(eventView2).toMatchObject(state);
+    expect(eventView.isEqualTo(eventView2)).toBe(true);
+
+    // commutativity property holds
+    expect(eventView2.isEqualTo(eventView)).toBe(true);
+  });
+
+  it('should be true when datetime are equal but differ in format', function() {
+    const state = {
+      id: '1234',
+      name: 'best query',
+      fields: [
+        {field: 'count()', title: 'events'},
+        {field: 'project.id', title: 'project'},
+      ],
+      sorts: generateSorts(['count']),
+      tags: ['foo', 'bar'],
+      query: 'event.type:error',
+      project: [42],
+      start: '2019-10-20T21:02:51+0000',
+      end: '2019-10-23T19:27:04+0000',
+      environment: ['staging'],
+    };
+
+    const eventView = new EventView(state);
+    const eventView2 = new EventView({
+      ...state,
+      start: '2019-10-20T21:02:51Z',
+      end: '2019-10-23T19:27:04Z',
+    });
+
+    expect(eventView.isEqualTo(eventView2)).toBe(true);
+  });
+
+  it('should be false when not equal', function() {
+    const state = {
+      id: '1234',
+      name: 'best query',
+      fields: [
+        {field: 'count()', title: 'events'},
+        {field: 'project.id', title: 'project'},
+      ],
+      sorts: generateSorts(['count']),
+      tags: ['foo', 'bar'],
+      query: 'event.type:error',
+      project: [42],
+      start: '2019-10-01T00:00:00',
+      end: '2019-10-02T00:00:00',
+      statsPeriod: '14d',
+      environment: ['staging'],
+    };
+
+    const eventView = new EventView(state);
+
+    // id differs
+
+    let eventView2 = new EventView({...state, id: '12'});
+    expect(eventView.isEqualTo(eventView2)).toBe(false);
+
+    // name differs
+
+    eventView2 = new EventView({...state, name: 'new query'});
+    expect(eventView.isEqualTo(eventView2)).toBe(false);
+
+    // field differs
+
+    eventView2 = new EventView({
+      ...state,
+      fields: [
+        // swapped columns
+        {field: 'project.id', title: 'project'},
+        {field: 'count()', title: 'events'},
+      ],
+    });
+    expect(eventView.isEqualTo(eventView2)).toBe(false);
+
+    // sort differs
+
+    eventView2 = new EventView({
+      ...state,
+      sorts: [
+        {
+          field: 'count',
+          kind: 'asc',
+        },
+      ],
+    });
+    expect(eventView.isEqualTo(eventView2)).toBe(false);
+
+    // tags differs
+
+    eventView2 = new EventView({
+      ...state,
+      tags: ['foo', 'baz'],
+    });
+    expect(eventView.isEqualTo(eventView2)).toBe(false);
+
+    // query differs
+
+    eventView2 = new EventView({
+      ...state,
+      query: 'event.type:transaction',
+    });
+    expect(eventView.isEqualTo(eventView2)).toBe(false);
+
+    // project differs
+
+    eventView2 = new EventView({
+      ...state,
+      project: [24],
+    });
+    expect(eventView.isEqualTo(eventView2)).toBe(false);
+
+    // date time differs
+
+    eventView2 = new EventView({
+      ...state,
+      start: '2019-09-01T00:00:00',
+    });
+    expect(eventView.isEqualTo(eventView2)).toBe(false);
+
+    eventView2 = new EventView({
+      ...state,
+      end: '2020-09-01T00:00:00',
+    });
+    expect(eventView.isEqualTo(eventView2)).toBe(false);
+
+    eventView2 = new EventView({
+      ...state,
+      statsPeriod: '24d',
+    });
+    expect(eventView.isEqualTo(eventView2)).toBe(false);
+
+    // environment differs
+
+    eventView2 = new EventView({
+      ...state,
+      environment: [],
+    });
+    expect(eventView.isEqualTo(eventView2)).toBe(false);
+  });
+});
+
 describe('isAPIPayloadSimilar', function() {
   const state = {
     id: '1234',
diff --git a/tests/js/spec/views/eventsV2/saveQueryButton.spec.jsx b/tests/js/spec/views/eventsV2/saveQueryButton.spec.jsx
index 906511bf54..84757f9db7 100644
--- a/tests/js/spec/views/eventsV2/saveQueryButton.spec.jsx
+++ b/tests/js/spec/views/eventsV2/saveQueryButton.spec.jsx
@@ -30,7 +30,7 @@ describe('EventsV2 > SaveQueryButton', function() {
       TestStubs.routerContext()
     );
     const button = wrapper.find('StyledDropdownButton');
-    expect(button.text()).toEqual('Save Search');
+    expect(button.text()).toEqual('Save query');
   });
 
   it('renders a popover for a new query', function() {
@@ -69,7 +69,7 @@ describe('EventsV2 > SaveQueryButton', function() {
 
     const submit = wrapper.find('SaveQueryContainer Button');
     expect(submit).toHaveLength(1);
-    expect(submit.text()).toEqual('Update');
+    expect(submit.text()).toEqual('Save');
   });
 
   it('sets input value based on props', function() {
@@ -86,22 +86,6 @@ describe('EventsV2 > SaveQueryButton', function() {
 
     // Creating a new query
     expect(wrapper.find('StyledInput').props().value).toEqual('');
-
-    // Enter edit mode
-    wrapper.setProps({isEditing: true});
-    wrapper.update();
-    expect(wrapper.find('StyledInput').props().value).toEqual(errorsView.name);
-
-    // Edit a different view
-    const otherView = {...errorsView, name: 'other view', id: 99};
-    wrapper.setProps({isEditing: true, eventView: otherView});
-    wrapper.update();
-    expect(wrapper.find('StyledInput').props().value).toEqual(otherView.name);
-
-    // Leave edit mode
-    wrapper.setProps({isEditing: false});
-    wrapper.update();
-    expect(wrapper.find('StyledInput').props().value).toEqual('');
   });
 
   it('saves a new query', async function() {
@@ -150,56 +134,4 @@ describe('EventsV2 > SaveQueryButton', function() {
       },
     });
   });
-
-  it('updates an existing query', async function() {
-    MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/discover/saved/1/',
-      method: 'PUT',
-      body: {
-        id: '1',
-        name: 'my query',
-        fields: ['title', 'count()'],
-        fieldnames: ['title', 'total'],
-      },
-    });
-    const errors = EventView.fromEventViewv1(
-      ALL_VIEWS.find(view => view.name === 'Errors')
-    );
-    errors.id = '1';
-    const wrapper = mountWithTheme(
-      <EventSaveQueryButton
-        organization={organization}
-        location={location}
-        eventView={errors}
-        isEditing
-      />,
-      TestStubs.routerContext()
-    );
-    const button = wrapper.find('StyledDropdownButton');
-    button.simulate('click');
-
-    const input = wrapper.find('SaveQueryContainer input');
-    input.simulate('change', {target: {value: 'my query'}});
-
-    const submit = wrapper.find('button[aria-label="Update"]');
-    submit.simulate('click');
-
-    // Wait for reflux
-    await tick();
-    await tick();
-
-    // should redirect to query
-    expect(browserHistory.push).toHaveBeenCalledWith({
-      pathname: location.pathname,
-      query: {
-        field: ['title', 'count()'],
-        id: '1',
-        fieldnames: ['title', 'total'],
-        name: 'my query',
-        query: '',
-        sort: [],
-        tag: [],
-      },
-    });
-  });
 });
