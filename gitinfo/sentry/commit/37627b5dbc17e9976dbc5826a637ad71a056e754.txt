commit 37627b5dbc17e9976dbc5826a637ad71a056e754
Author: Mark Story <mark@sentry.io>
Date:   Wed May 29 09:48:45 2019 -0400

    ref(events-v2) Remove group prop from many interface components (#13422)
    
    Many of the event interface ui components had `group` as a required prop
    but it isn't used other than to pass onto EventDataSection which also
    doesn't use the prop. By removing all these redundant props I can fix
    numerous prop type warnings that are blocking the modal for events-v2.
    
    Refs SEN-697

diff --git a/src/sentry/static/sentry/app/components/events/device.jsx b/src/sentry/static/sentry/app/components/events/device.jsx
index fdb43819ec..cd9042a5ac 100644
--- a/src/sentry/static/sentry/app/components/events/device.jsx
+++ b/src/sentry/static/sentry/app/components/events/device.jsx
@@ -8,12 +8,11 @@ import ContextData from 'app/components/contextData';
 // TODO(hazat): Is this interface used somewhere? If not delete it?
 class DeviceInterface extends React.Component {
   static propTypes = {
-    group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
   };
 
   render() {
-    const {group, event} = this.props;
+    const {event} = this.props;
     const data = event.device;
     const extras = Object.keys(data.data || {}).map(key => {
       const value = data.data[key];
@@ -29,7 +28,6 @@ class DeviceInterface extends React.Component {
 
     return (
       <GroupEventDataSection
-        group={group}
         event={event}
         type="device"
         title={t('Device')}
diff --git a/src/sentry/static/sentry/app/components/events/errors.jsx b/src/sentry/static/sentry/app/components/events/errors.jsx
index d87880a09b..0345d4fcb4 100644
--- a/src/sentry/static/sentry/app/components/events/errors.jsx
+++ b/src/sentry/static/sentry/app/components/events/errors.jsx
@@ -10,7 +10,6 @@ const MAX_ERRORS = 100;
 
 class EventErrors extends React.Component {
   static propTypes = {
-    group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
   };
 
@@ -44,12 +43,7 @@ class EventErrors extends React.Component {
     const numErrors = errors.length;
     const isOpen = this.state.isOpen;
     return (
-      <EventDataSection
-        group={this.props.group}
-        event={this.props.event}
-        type="errors"
-        className="errors"
-      >
+      <EventDataSection event={this.props.event} type="errors" className="errors">
         <span className="icon icon-alert" />
         <p>
           <a className="pull-right errors-toggle" onClick={this.toggle}>
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index afef273473..c57d5131a2 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -97,7 +97,7 @@ class EventEntries extends React.Component {
   }
 
   renderEntries() {
-    const {event, group, isShare} = this.props;
+    const {event, project, isShare} = this.props;
 
     return event.entries.map((entry, entryIdx) => {
       try {
@@ -112,7 +112,7 @@ class EventEntries extends React.Component {
         return (
           <Component
             key={'entry-' + entryIdx}
-            group={group}
+            projectId={project.slug}
             event={event}
             type={entry.type}
             data={entry.data}
@@ -123,7 +123,7 @@ class EventEntries extends React.Component {
         logException(ex);
         return (
           <EventDataSection
-            group={group}
+            projectId={project.slug}
             event={event}
             type={entry.type}
             title={entry.type}
@@ -153,9 +153,7 @@ class EventEntries extends React.Component {
 
     return (
       <div className="entries">
-        {!utils.objectIsEmpty(event.errors) && (
-          <EventErrors group={group} event={event} />
-        )}{' '}
+        {!utils.objectIsEmpty(event.errors) && <EventErrors event={event} />}{' '}
         {!isShare && !!group.firstRelease && (
           <EventCause event={event} orgId={orgId} projectId={project.slug} />
         )}
@@ -167,7 +165,7 @@ class EventEntries extends React.Component {
             issueId={group.id}
           />
         )}
-        {hasContext && <EventContextSummary group={group} event={event} />}
+        {hasContext && <EventContextSummary event={event} />}
         <EventTags
           organization={organization}
           group={group}
@@ -177,19 +175,13 @@ class EventEntries extends React.Component {
         />
         {this.renderEntries()}
         {hasContext && <EventContexts group={group} event={event} />}
-        {!utils.objectIsEmpty(event.context) && (
-          <EventExtraData group={group} event={event} />
-        )}
-        {!utils.objectIsEmpty(event.packages) && (
-          <EventPackageData group={group} event={event} />
-        )}
-        {!utils.objectIsEmpty(event.device) && (
-          <EventDevice group={group} event={event} />
-        )}
+        {!utils.objectIsEmpty(event.context) && <EventExtraData event={event} />}
+        {!utils.objectIsEmpty(event.packages) && <EventPackageData event={event} />}
+        {!utils.objectIsEmpty(event.device) && <EventDevice event={event} />}
         {!isShare && features.has('event-attachments') && (
           <EventAttachments event={event} orgId={orgId} projectId={project.slug} />
         )}
-        {!utils.objectIsEmpty(event.sdk) && <EventSdk group={group} event={event} />}
+        {!utils.objectIsEmpty(event.sdk) && <EventSdk event={event} />}
         {!utils.objectIsEmpty(event.sdk) && event.sdk.upstream.isNewer && (
           <div className="alert-block alert-info box">
             <span className="icon-exclamation" />
@@ -205,7 +197,7 @@ class EventEntries extends React.Component {
           </div>
         )}{' '}
         {!isShare && features.has('grouping-info') && (
-          <EventGroupingInfo group={group} event={event} />
+          <EventGroupingInfo projectId={project.slug} event={event} />
         )}
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/events/extraData.jsx b/src/sentry/static/sentry/app/components/events/extraData.jsx
index d66977cf56..b818ea72b8 100644
--- a/src/sentry/static/sentry/app/components/events/extraData.jsx
+++ b/src/sentry/static/sentry/app/components/events/extraData.jsx
@@ -9,7 +9,6 @@ import SentryTypes from 'app/sentryTypes';
 
 class EventExtraData extends React.Component {
   static propTypes = {
-    group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
   };
 
@@ -35,7 +34,6 @@ class EventExtraData extends React.Component {
     return (
       <div className="extra-data">
         <EventDataSection
-          group={this.props.group}
           event={this.props.event}
           type="extra"
           title={t('Additional Data')}
diff --git a/src/sentry/static/sentry/app/components/events/groupingInfo.jsx b/src/sentry/static/sentry/app/components/events/groupingInfo.jsx
index ba85e68400..9d15e6580d 100644
--- a/src/sentry/static/sentry/app/components/events/groupingInfo.jsx
+++ b/src/sentry/static/sentry/app/components/events/groupingInfo.jsx
@@ -249,13 +249,14 @@ class EventGroupingInfo extends AsyncComponent {
     api: PropTypes.object,
     organization: SentryTypes.Organization.isRequired,
     group: SentryTypes.Group.isRequired,
+    projectId: PropTypes.string.isRequired,
     event: SentryTypes.Event.isRequired,
   };
 
   getEndpoints() {
-    const {organization, group, event} = this.props;
+    const {organization, event, projectId} = this.props;
 
-    let path = `/projects/${organization.slug}/${group.project.slug}/events/${
+    let path = `/projects/${organization.slug}/${projectId}/events/${
       event.id
     }/grouping-info/`;
     if (this.state && this.state.configOverride) {
@@ -350,7 +351,6 @@ class EventGroupingInfo extends AsyncComponent {
     const isOpen = this.state.isOpen;
     return (
       <EventDataSection
-        group={this.props.group}
         event={this.props.event}
         type="grouping-info"
         className="grouping-info"
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
index 02600f0688..d0f74a39f1 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
@@ -37,7 +37,6 @@ function moduleToCategory(module) {
 
 class BreadcrumbsInterface extends React.Component {
   static propTypes = {
-    group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     type: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
@@ -170,7 +169,6 @@ class BreadcrumbsInterface extends React.Component {
   };
 
   render() {
-    const group = this.props.group;
     const evt = this.props.event;
     const data = this.props.data;
 
@@ -215,7 +213,6 @@ class BreadcrumbsInterface extends React.Component {
     return (
       <GroupEventDataSection
         className="breadcrumb-box"
-        group={group}
         event={evt}
         type={this.props.type}
         title={title}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx
index e5a3de7dbd..fe8be21dfd 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx
@@ -12,19 +12,19 @@ class CrashContent extends React.Component {
   static propTypes = {
     event: SentryTypes.Event.isRequired,
     stackView: PropTypes.string.isRequired,
-    stackType: PropTypes.string,
+    projectId: PropTypes.string.isRequired,
     newestFirst: PropTypes.bool.isRequired,
+    stackType: PropTypes.string,
     exception: PropTypes.object,
     stacktrace: PropTypes.object,
-    group: SentryTypes.Group,
   };
 
   renderException = () => {
-    const {event, stackView, stackType, newestFirst, exception, group} = this.props;
+    const {event, stackView, stackType, newestFirst, exception, projectId} = this.props;
     return stackView === 'raw' ? (
       <RawExceptionContent
         eventId={event.id}
-        projectId={group.project.slug}
+        projectId={projectId}
         type={stackType}
         values={exception.values}
         platform={event.platform}
@@ -33,7 +33,6 @@ class CrashContent extends React.Component {
       <ExceptionContent
         type={stackType}
         view={stackView}
-        group={group}
         values={exception.values}
         platform={event.platform}
         newestFirst={newestFirst}
@@ -42,7 +41,7 @@ class CrashContent extends React.Component {
   };
 
   renderStacktrace = () => {
-    const {event, stackView, newestFirst, stacktrace, group} = this.props;
+    const {event, stackView, newestFirst, stacktrace} = this.props;
     return stackView === 'raw' ? (
       <pre className="traceback plain">
         {rawStacktraceContent(stacktrace, event.platform)}
@@ -54,7 +53,6 @@ class CrashContent extends React.Component {
         includeSystemFrames={stackView === 'full'}
         platform={event.platform}
         newestFirst={newestFirst}
-        group={group}
       />
     );
   };
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx b/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx
index 0b27844f60..f9282822d9 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx
@@ -22,7 +22,6 @@ function getView(view, data) {
 
 export default class CspInterface extends React.Component {
   static propTypes = {
-    group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     data: PropTypes.object.isRequired,
   };
@@ -47,7 +46,7 @@ export default class CspInterface extends React.Component {
 
   render() {
     const {view, data} = this.state;
-    const {group, event} = this.props;
+    const {event} = this.props;
 
     const title = (
       <div>
@@ -78,13 +77,7 @@ export default class CspInterface extends React.Component {
     const children = getView(view, data);
 
     return (
-      <GroupEventDataSection
-        group={group}
-        event={event}
-        type="csp"
-        title={title}
-        wrapTitle={false}
-      >
+      <GroupEventDataSection event={event} type="csp" title={title} wrapTitle={false}>
         {children}
       </GroupEventDataSection>
     );
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
index 03737ded70..7ab6931819 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
@@ -8,7 +8,6 @@ import {t} from 'app/locale';
 
 class DebugMetaInterface extends React.Component {
   static propTypes = {
-    group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     data: PropTypes.object.isRequired,
   };
@@ -42,7 +41,6 @@ class DebugMetaInterface extends React.Component {
     return (
       <div>
         <EventDataSection
-          group={this.props.group}
           event={this.props.event}
           type="packages"
           title={t('Images Loaded')}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
index 656ec7d6c7..2bc0ea1ee9 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
@@ -9,10 +9,10 @@ import CrashContent from 'app/components/events/interfaces/crashContent';
 
 class ExceptionInterface extends React.Component {
   static propTypes = {
-    group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     type: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
+    projectId: PropTypes.string.isRequired,
   };
 
   constructor(...args) {
@@ -29,12 +29,8 @@ class ExceptionInterface extends React.Component {
   };
 
   render() {
-    const group = this.props.group;
-    const event = this.props.event;
-    const data = this.props.data;
-    const stackView = this.state.stackView;
-    const stackType = this.state.stackType;
-    const newestFirst = this.state.newestFirst;
+    const {projectId, event, data, type} = this.props;
+    const {stackView, stackType, newestFirst} = this.state;
 
     // in case there are threads in the event data, we don't render the
     // exception block.  Instead the exception is contained within the
@@ -45,7 +41,6 @@ class ExceptionInterface extends React.Component {
 
     const title = (
       <CrashHeader
-        group={group}
         title={t('Exception')}
         platform={event.platform}
         exception={data}
@@ -59,15 +54,9 @@ class ExceptionInterface extends React.Component {
     );
 
     return (
-      <GroupEventDataSection
-        group={group}
-        event={event}
-        type={this.props.type}
-        title={title}
-        wrapTitle={false}
-      >
+      <GroupEventDataSection event={event} type={type} title={title} wrapTitle={false}>
         <CrashContent
-          group={group}
+          projectId={projectId}
           event={event}
           stackType={stackType}
           stackView={stackView}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
index d0b285a19b..4689fd0d05 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
@@ -1,5 +1,4 @@
 import PropTypes from 'prop-types';
-import SentryTypes from 'app/sentryTypes';
 import React from 'react';
 
 import {defined} from 'app/utils';
@@ -14,13 +13,11 @@ class ExceptionContent extends React.Component {
     view: PropTypes.string.isRequired,
     platform: PropTypes.string,
     newestFirst: PropTypes.bool,
-    group: SentryTypes.Group,
   };
 
   render() {
     const stackView = this.props.view;
     const newestFirst = this.props.newestFirst;
-    const group = this.props.group;
     const children = this.props.values.map((exc, excIdx) => {
       return (
         <div key={excIdx} className="exception">
@@ -50,7 +47,6 @@ class ExceptionContent extends React.Component {
               includeSystemFrames={stackView === 'full'}
               platform={this.props.platform}
               newestFirst={newestFirst}
-              group={group}
             />
           )}
         </div>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/generic.jsx b/src/sentry/static/sentry/app/components/events/interfaces/generic.jsx
index d6f7f174f5..738d5bb59c 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/generic.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/generic.jsx
@@ -19,7 +19,6 @@ function getView(view, data) {
 }
 export default class GenericInterface extends Component {
   static propTypes = {
-    group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     type: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
@@ -42,7 +41,7 @@ export default class GenericInterface extends Component {
 
   render() {
     const {view, data} = this.state;
-    const {group, event, type} = this.props;
+    const {event, type} = this.props;
 
     const title = (
       <div>
@@ -67,13 +66,7 @@ export default class GenericInterface extends Component {
     const children = getView(view, data);
 
     return (
-      <GroupEventDataSection
-        group={group}
-        event={event}
-        type={type}
-        title={title}
-        wrapTitle={false}
-      >
+      <GroupEventDataSection event={event} type={type} title={title} wrapTitle={false}>
         {children}
       </GroupEventDataSection>
     );
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/message.jsx b/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
index 25117ef7b9..3c398f30eb 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
@@ -10,7 +10,6 @@ import {objectIsEmpty} from 'app/utils';
 
 class MessageInterface extends React.Component {
   static propTypes = {
-    group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     data: PropTypes.object.isRequired,
   };
@@ -34,10 +33,10 @@ class MessageInterface extends React.Component {
   }
 
   render() {
-    const {data, group, event} = this.props;
+    const {data, event} = this.props;
 
     return (
-      <EventDataSection group={group} event={event} type="message" title={t('Message')}>
+      <EventDataSection event={event} type="message" title={t('Message')}>
         <pre className="plain">
           <Annotated object={data} prop="formatted" />
         </pre>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/request.jsx b/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
index 8270454340..178e30cc1f 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
@@ -12,7 +12,6 @@ import Truncate from 'app/components/truncate';
 
 class RequestInterface extends React.Component {
   static propTypes = {
-    group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     type: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
@@ -44,9 +43,7 @@ class RequestInterface extends React.Component {
   };
 
   render() {
-    const group = this.props.group;
-    const evt = this.props.event;
-    const data = this.props.data;
+    const {event, data, type} = this.props;
     const view = this.state.view;
 
     let fullUrl = getFullUrl(data);
@@ -111,9 +108,8 @@ class RequestInterface extends React.Component {
 
     return (
       <GroupEventDataSection
-        group={group}
-        event={evt}
-        type={this.props.type}
+        event={event}
+        type={type}
         title={title}
         wrapTitle={false}
         className="request"
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
index caa20fb320..22831ab82a 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
@@ -24,10 +24,10 @@ export function isStacktraceNewestFirst() {
 
 class StacktraceInterface extends React.Component {
   static propTypes = {
-    group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     type: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
+    projectId: PropTypes.string.isRequired,
   };
 
   constructor(...args) {
@@ -45,17 +45,13 @@ class StacktraceInterface extends React.Component {
   };
 
   render() {
-    const group = this.props.group;
-    const evt = this.props.event;
-    const data = this.props.data;
-    const stackView = this.state.stackView;
-    const newestFirst = this.state.newestFirst;
+    const {projectId, event, data} = this.props;
+    const {stackView, newestFirst} = this.state;
 
     const title = (
       <CrashHeader
         title={t('Stacktrace')}
-        group={group}
-        platform={evt.platform}
+        platform={event.platform}
         stacktrace={data}
         stackView={stackView}
         newestFirst={newestFirst}
@@ -67,15 +63,14 @@ class StacktraceInterface extends React.Component {
 
     return (
       <GroupEventDataSection
-        group={group}
-        event={evt}
+        event={event}
         type={this.props.type}
         title={title}
         wrapTitle={false}
       >
         <CrashContent
-          group={group}
-          event={evt}
+          projectId={projectId}
+          event={event}
           stackView={stackView}
           newestFirst={newestFirst}
           stacktrace={data}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
index 9cc9a181b8..9fed1e5832 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
@@ -1,8 +1,6 @@
 import PropTypes from 'prop-types';
-import SentryTypes from 'app/sentryTypes';
 import React from 'react';
 import createReactClass from 'create-react-class';
-//import GroupEventDataSection from "../eventDataSection";
 import Frame from 'app/components/events/interfaces/frame';
 import {t} from 'app/locale';
 import OrganizationState from 'app/mixins/organizationState';
@@ -16,7 +14,6 @@ const StacktraceContent = createReactClass({
     expandFirstFrame: PropTypes.bool,
     platform: PropTypes.string,
     newestFirst: PropTypes.bool,
-    group: SentryTypes.Group,
   },
 
   mixins: [OrganizationState],
@@ -99,7 +96,6 @@ const StacktraceContent = createReactClass({
             prevFrame={prevFrame}
             platform={this.props.platform}
             timesRepeated={nRepeats}
-            group={this.props.group}
           />
         );
       }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/template.jsx b/src/sentry/static/sentry/app/components/events/interfaces/template.jsx
index 47ce7b15a6..2cf4f6929d 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/template.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/template.jsx
@@ -7,7 +7,6 @@ import {t} from 'app/locale';
 
 class TemplateInterface extends React.Component {
   static propTypes = {
-    group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     type: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
@@ -16,7 +15,6 @@ class TemplateInterface extends React.Component {
   render() {
     return (
       <GroupEventDataSection
-        group={this.props.group}
         event={this.props.event}
         type={this.props.type}
         title={<div>{t('Template')}</div>}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx b/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
index c268aaeeb4..8950a99a74 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
@@ -126,7 +126,6 @@ function findBestThread(threads) {
 
 class Thread extends React.Component {
   static propTypes = {
-    group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     data: PropTypes.object.isRequired,
     stackView: PropTypes.string,
@@ -160,7 +159,6 @@ class Thread extends React.Component {
   render() {
     const {
       data,
-      group,
       event,
       stackView,
       stackType,
@@ -182,7 +180,6 @@ class Thread extends React.Component {
           this.renderMissingStacktrace()
         ) : (
           <CrashContent
-            group={group}
             event={event}
             stackType={stackType}
             stackView={stackView}
@@ -198,7 +195,6 @@ class Thread extends React.Component {
 
 class ThreadsInterface extends React.Component {
   static propTypes = {
-    group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     type: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
@@ -247,7 +243,6 @@ class ThreadsInterface extends React.Component {
   };
 
   render() {
-    const group = this.props.group;
     const evt = this.props.event;
     const {stackView, stackType, newestFirst, activeThread} = this.state;
     const exception = this.getException();
@@ -278,7 +273,6 @@ class ThreadsInterface extends React.Component {
       <CrashHeader
         title={null}
         beforeTitle={threadSelector}
-        group={group}
         platform={evt.platform}
         thread={activeThread}
         stacktrace={stacktrace}
@@ -294,14 +288,12 @@ class ThreadsInterface extends React.Component {
 
     return (
       <GroupEventDataSection
-        group={group}
         event={evt}
         type={this.props.type}
         title={title}
         wrapTitle={false}
       >
         <Thread
-          group={group}
           data={activeThread}
           exception={exception}
           stackView={stackView}
diff --git a/src/sentry/static/sentry/app/components/events/packageData.jsx b/src/sentry/static/sentry/app/components/events/packageData.jsx
index a004da4392..eef7c4a610 100644
--- a/src/sentry/static/sentry/app/components/events/packageData.jsx
+++ b/src/sentry/static/sentry/app/components/events/packageData.jsx
@@ -10,7 +10,6 @@ import SentryTypes from 'app/sentryTypes';
 
 class EventPackageData extends React.Component {
   static propTypes = {
-    group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
   };
 
@@ -22,12 +21,7 @@ class EventPackageData extends React.Component {
     const packages = objectToArray(this.props.event.packages);
 
     return (
-      <EventDataSection
-        group={this.props.group}
-        event={this.props.event}
-        type="packages"
-        title={t('Packages')}
-      >
+      <EventDataSection event={this.props.event} type="packages" title={t('Packages')}>
         <ClippedBox>
           <ErrorBoundary mini>
             <KeyValueList data={packages} />
diff --git a/src/sentry/static/sentry/app/components/events/sdk.jsx b/src/sentry/static/sentry/app/components/events/sdk.jsx
index 834226c6d0..8402776f77 100644
--- a/src/sentry/static/sentry/app/components/events/sdk.jsx
+++ b/src/sentry/static/sentry/app/components/events/sdk.jsx
@@ -6,22 +6,15 @@ import {t} from 'app/locale';
 
 class EventSdk extends React.Component {
   static propTypes = {
-    group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
   };
 
   render() {
-    const {group, event} = this.props;
+    const {event} = this.props;
     const data = event.sdk;
 
     return (
-      <GroupEventDataSection
-        group={group}
-        event={event}
-        type="sdk"
-        title={t('SDK')}
-        wrapTitle={true}
-      >
+      <GroupEventDataSection event={event} type="sdk" title={t('SDK')} wrapTitle={true}>
         <table className="table key-value">
           <tbody>
             <tr key="name">
diff --git a/tests/js/spec/components/events/__snapshots__/crashContent.spec.jsx.snap b/tests/js/spec/components/events/__snapshots__/crashContent.spec.jsx.snap
index 5b343a1289..37be76cb7c 100644
--- a/tests/js/spec/components/events/__snapshots__/crashContent.spec.jsx.snap
+++ b/tests/js/spec/components/events/__snapshots__/crashContent.spec.jsx.snap
@@ -27,6 +27,7 @@ exports[`CrashContent renders with meta data 1`] = `
     }
   }
   newestFirst={true}
+  projectId="sentry"
   stackType="original"
   stackView="full"
 >
diff --git a/tests/js/spec/components/events/crashContent.spec.jsx b/tests/js/spec/components/events/crashContent.spec.jsx
index dd9d7bd14e..cc5ab1da16 100644
--- a/tests/js/spec/components/events/crashContent.spec.jsx
+++ b/tests/js/spec/components/events/crashContent.spec.jsx
@@ -13,6 +13,7 @@ describe('CrashContent', function() {
   it('renders with meta data', function() {
     const wrapper = mount(
       <CrashContent
+        projectId="sentry"
         stackView="full"
         stackType="original"
         event={event}
diff --git a/tests/js/spec/components/events/interfaces/breadcrumbComponents/breadcrumbs.spec.jsx b/tests/js/spec/components/events/interfaces/breadcrumbComponents/breadcrumbs.spec.jsx
index 2b128665e1..90eca63a17 100644
--- a/tests/js/spec/components/events/interfaces/breadcrumbComponents/breadcrumbs.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/breadcrumbComponents/breadcrumbs.spec.jsx
@@ -8,9 +8,6 @@ describe('BreadcrumbsInterface', function() {
 
   beforeEach(() => {
     PROPS = {
-      group: {
-        id: '1',
-      },
       event: {
         entries: [],
         id: '4',
diff --git a/tests/js/spec/views/sharedGroupDetails/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/sharedGroupDetails/__snapshots__/index.spec.jsx.snap
index 202c6cb8cd..e11d2ad704 100644
--- a/tests/js/spec/views/sharedGroupDetails/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/sharedGroupDetails/__snapshots__/index.spec.jsx.snap
@@ -813,102 +813,9 @@ exports[`SharedGroupDetails renders 1`] = `
                                     "tags": Array [],
                                   }
                                 }
-                                group={
-                                  Object {
-                                    "activity": Array [],
-                                    "annotations": Array [],
-                                    "assignedTo": null,
-                                    "count": "327482",
-                                    "culprit": "fetchData(app/components/group/suggestedOwners)",
-                                    "firstRelease": null,
-                                    "firstSeen": "2019-04-05T19:44:05.963Z",
-                                    "hasSeen": false,
-                                    "id": "1",
-                                    "isBookmarked": false,
-                                    "isPublic": false,
-                                    "isSubscribed": false,
-                                    "lastRelease": null,
-                                    "lastSeen": "2019-04-11T01:08:59Z",
-                                    "latestEvent": Object {
-                                      "dateCreated": "2019-05-21T18:01:48.762Z",
-                                      "entries": Array [
-                                        Object {
-                                          "data": Object {
-                                            "formatted": "Blocked script",
-                                          },
-                                          "id": "1",
-                                          "type": "message",
-                                        },
-                                      ],
-                                      "eventID": "12345678901234567890123456789012",
-                                      "groupID": "1",
-                                      "id": "1",
-                                      "message": "ApiException",
-                                      "tags": Array [],
-                                    },
-                                    "level": "warning",
-                                    "logger": null,
-                                    "metadata": Object {
-                                      "function": "fetchData",
-                                      "type": "RequestError",
-                                    },
-                                    "numComments": 0,
-                                    "participants": Array [],
-                                    "permalink": "https://foo.io/organizations/foo/issues/1234/",
-                                    "platform": "javascript",
-                                    "pluginActions": Array [],
-                                    "pluginContexts": Array [],
-                                    "pluginIssues": Array [],
-                                    "project": Object {
-                                      "environments": Array [],
-                                      "hasAccess": true,
-                                      "id": "2",
-                                      "isBookmarked": false,
-                                      "isMember": true,
-                                      "name": "Project Name",
-                                      "organization": Object {
-                                        "slug": "test-org",
-                                      },
-                                      "slug": "project-slug",
-                                      "teams": Array [],
-                                    },
-                                    "seenBy": Array [],
-                                    "shareId": null,
-                                    "shortId": "JAVASCRIPT-6QS",
-                                    "stats": Object {
-                                      "24h": Array [
-                                        Array [
-                                          1517281200,
-                                          2,
-                                        ],
-                                        Array [
-                                          1517310000,
-                                          1,
-                                        ],
-                                      ],
-                                      "30d": Array [
-                                        Array [
-                                          1514764800,
-                                          1,
-                                        ],
-                                        Array [
-                                          1515024000,
-                                          122,
-                                        ],
-                                      ],
-                                    },
-                                    "status": "unresolved",
-                                    "statusDetails": Object {},
-                                    "subscriptionDetails": null,
-                                    "tags": Array [],
-                                    "title": "ZeroDivisionError",
-                                    "type": "error",
-                                    "userCount": 35097,
-                                    "userReportCount": 0,
-                                  }
-                                }
                                 isShare={true}
                                 key="entry-0"
+                                projectId="project-slug"
                                 type="message"
                               >
                                 <GroupEventDataSection
@@ -931,100 +838,6 @@ exports[`SharedGroupDetails renders 1`] = `
                                       "tags": Array [],
                                     }
                                   }
-                                  group={
-                                    Object {
-                                      "activity": Array [],
-                                      "annotations": Array [],
-                                      "assignedTo": null,
-                                      "count": "327482",
-                                      "culprit": "fetchData(app/components/group/suggestedOwners)",
-                                      "firstRelease": null,
-                                      "firstSeen": "2019-04-05T19:44:05.963Z",
-                                      "hasSeen": false,
-                                      "id": "1",
-                                      "isBookmarked": false,
-                                      "isPublic": false,
-                                      "isSubscribed": false,
-                                      "lastRelease": null,
-                                      "lastSeen": "2019-04-11T01:08:59Z",
-                                      "latestEvent": Object {
-                                        "dateCreated": "2019-05-21T18:01:48.762Z",
-                                        "entries": Array [
-                                          Object {
-                                            "data": Object {
-                                              "formatted": "Blocked script",
-                                            },
-                                            "id": "1",
-                                            "type": "message",
-                                          },
-                                        ],
-                                        "eventID": "12345678901234567890123456789012",
-                                        "groupID": "1",
-                                        "id": "1",
-                                        "message": "ApiException",
-                                        "tags": Array [],
-                                      },
-                                      "level": "warning",
-                                      "logger": null,
-                                      "metadata": Object {
-                                        "function": "fetchData",
-                                        "type": "RequestError",
-                                      },
-                                      "numComments": 0,
-                                      "participants": Array [],
-                                      "permalink": "https://foo.io/organizations/foo/issues/1234/",
-                                      "platform": "javascript",
-                                      "pluginActions": Array [],
-                                      "pluginContexts": Array [],
-                                      "pluginIssues": Array [],
-                                      "project": Object {
-                                        "environments": Array [],
-                                        "hasAccess": true,
-                                        "id": "2",
-                                        "isBookmarked": false,
-                                        "isMember": true,
-                                        "name": "Project Name",
-                                        "organization": Object {
-                                          "slug": "test-org",
-                                        },
-                                        "slug": "project-slug",
-                                        "teams": Array [],
-                                      },
-                                      "seenBy": Array [],
-                                      "shareId": null,
-                                      "shortId": "JAVASCRIPT-6QS",
-                                      "stats": Object {
-                                        "24h": Array [
-                                          Array [
-                                            1517281200,
-                                            2,
-                                          ],
-                                          Array [
-                                            1517310000,
-                                            1,
-                                          ],
-                                        ],
-                                        "30d": Array [
-                                          Array [
-                                            1514764800,
-                                            1,
-                                          ],
-                                          Array [
-                                            1515024000,
-                                            122,
-                                          ],
-                                        ],
-                                      },
-                                      "status": "unresolved",
-                                      "statusDetails": Object {},
-                                      "subscriptionDetails": null,
-                                      "tags": Array [],
-                                      "title": "ZeroDivisionError",
-                                      "type": "error",
-                                      "userCount": 35097,
-                                      "userReportCount": 0,
-                                    }
-                                  }
                                   raw={false}
                                   title="Message"
                                   type="message"
