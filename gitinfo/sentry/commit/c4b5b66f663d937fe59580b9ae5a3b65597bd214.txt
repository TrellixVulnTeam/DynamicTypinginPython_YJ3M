commit c4b5b66f663d937fe59580b9ae5a3b65597bd214
Author: Eric Feng <erichfeng@gmail.com>
Date:   Fri Feb 19 16:23:19 2016 -0800

    adding tests for onboarding

diff --git a/src/sentry/receivers/onboarding.py b/src/sentry/receivers/onboarding.py
index e397d9c9c1..2a2d6f77b7 100644
--- a/src/sentry/receivers/onboarding.py
+++ b/src/sentry/receivers/onboarding.py
@@ -123,19 +123,16 @@ def record_member_invited(member, user, **kwargs):
 
 @member_joined.connect(weak=False)
 def record_member_joined(member, **kwargs):
-    try:
-        OrganizationOnboardingTask.objects.filter(
-            organization=member.organization,
-            task=OnboardingTask.INVITE_MEMBER
-        ).exclude(
-            status=OnboardingTaskStatus.COMPLETE
-        ).update(
-            status=OnboardingTaskStatus.COMPLETE,
-            date_completed=timezone.now(),
-            data={'invited_member_id': member.id}
-        )
-    except IntegrityError:
-        pass
+    OrganizationOnboardingTask.objects.create_or_update(
+        organization=member.organization,
+        task=OnboardingTask.INVITE_MEMBER,
+        status=OnboardingTaskStatus.PENDING,
+        values={
+            'status': OnboardingTaskStatus.COMPLETE,
+            'date_completed': timezone.now(),
+            'data': {'invited_member_id': member.id}
+        }
+    )
 
 
 @event_processed.connect(weak=False)
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 305d520ab8..076de312ca 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -7,6 +7,7 @@ sentry.testutils.fixtures
 """
 from __future__ import absolute_import, print_function, unicode_literals
 
+import json
 import six
 import warnings
 
@@ -177,6 +178,82 @@ class Fixtures(object):
         event.save()
         return event
 
+    def create_full_event(self, event_id='a', **kwargs):
+        payload = """
+            {
+                "id": "f5dd88e612bc406ba89dfebd09120769",
+                "project": 11276,
+                "release": "e1b5d1900526feaf20fe2bc9cad83d392136030a",
+                "platform": "javascript",
+                "culprit": "app/components/events/eventEntries in map",
+                "message": "TypeError: Cannot read property '1' of null",
+                "tags": [
+                    ["environment", "prod"],
+                    ["sentry_version", "e1b5d1900526feaf20fe2bc9cad83d392136030a"],
+                    ["level", "error"],
+                    ["logger", "javascript"],
+                    ["sentry:release", "e1b5d1900526feaf20fe2bc9cad83d392136030a"],
+                    ["browser", "Chrome 48.0"],
+                    ["device", "Other"],
+                    ["os", "Windows 10"],
+                    ["url", "https://app.getsentry.com/katon-direct/localhost/issues/112734598/"],
+                    ["sentry:user", "id:41656"]
+                ],
+                "errors": [{
+                    "url": "<anonymous>",
+                    "type": "js_no_source"
+                }],
+                "extra": {
+                    "session:duration": 40364
+                },
+                "sentry.interfaces.Exception": {
+                    "exc_omitted": null,
+                    "values": [{
+                        "stacktrace": {
+                            "has_system_frames": false,
+                            "frames": [{
+                                "function": "batchedUpdates",
+                                "abs_path": "webpack:////usr/src/getsentry/src/sentry/~/react/lib/ReactUpdates.js",
+                                "pre_context": ["  // verify that that's the case. (This is called by each top-level update", "  // function, like setProps, setState, forceUpdate, etc.; creation and", "  // destruction of top-level components is guarded in ReactMount.)", "", "  if (!batchingStrategy.isBatchingUpdates) {"],
+                                "post_context": ["    return;", "  }", "", "  dirtyComponents.push(component);", "}"],
+                                "filename": "~/react/lib/ReactUpdates.js",
+                                "module": "react/lib/ReactUpdates",
+                                "colno": 0,
+                                "in_app": false,
+                                "data": {
+                                    "orig_filename": "/_static/29e365f8b0d923bc123e8afa38d890c3/sentry/dist/vendor.js",
+                                    "orig_abs_path": "https://media.getsentry.com/_static/29e365f8b0d923bc123e8afa38d890c3/sentry/dist/vendor.js",
+                                    "sourcemap": "https://media.getsentry.com/_static/29e365f8b0d923bc123e8afa38d890c3/sentry/dist/vendor.js.map",
+                                    "orig_lineno": 37,
+                                    "orig_function": "Object.s [as enqueueUpdate]",
+                                    "orig_colno": 16101
+                                },
+                                "context_line": "    batchingStrategy.batchedUpdates(enqueueUpdate, component);",
+                                "lineno": 176
+                            }],
+                            "frames_omitted": null
+                        },
+                        "type": "TypeError",
+                        "value": "Cannot read property '1' of null",
+                        "module": null
+                    }]
+                },
+                "sentry.interfaces.Http": {
+                    "url": "https://app.getsentry.com/katon-direct/localhost/issues/112734598/",
+                    "headers": [
+                        ["Referer", "https://getsentry.com/welcome/"],
+                        ["User-Agent", "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36"]
+                    ]
+                },
+                "sentry.interfaces.User": {
+                    "ip_address": "0.0.0.0",
+                    "id": "41656",
+                    "email": "test@example.com"
+                },
+                "version": "7"
+            }"""
+        return self.create_event(event_id=event_id, platform='javascript', data=json.loads(payload))
+
     def create_group(self, project=None, checksum=None, **kwargs):
         if checksum:
             warnings.warn('Checksum passed to create_group', DeprecationWarning)
@@ -185,3 +262,4 @@ class Fixtures(object):
             project=project or self.project,
             **kwargs
         )
+
diff --git a/src/sentry/utils/javascript.py b/src/sentry/utils/javascript.py
index 79601ac886..100e257435 100644
--- a/src/sentry/utils/javascript.py
+++ b/src/sentry/utils/javascript.py
@@ -30,15 +30,13 @@ transformers = {}
 
 def has_sourcemap(event):
     if event.platform != 'javascript':
+        print(event.platform)
         return False
-
     data = event.data
 
     if 'sentry.interfaces.Exception' not in data:
         return False
-
     exception = data['sentry.interfaces.Exception']
-
     for value in exception['values']:
         stacktrace = value.get('stacktrace', {})
         for frame in stacktrace.get('frames', []):
diff --git a/tests/sentry/api/endpoints/test_onboarding.py b/tests/sentry/api/endpoints/test_onboarding.py
new file mode 100644
index 0000000000..54b90c16be
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_onboarding.py
@@ -0,0 +1,26 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import (
+    OrganizationOnboardingTask, OnboardingTask, OnboardingTaskStatus
+)
+from sentry.testutils import APITestCase
+
+
+class SkipOnboardingTaskTest(APITestCase):
+    def test_skip_onboarding_task(self):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name='foo', owner=self.user)
+        user = self.create_user('bar@example.com')
+        url = reverse('sentry-api-0-organization-onboardingtasks', kwargs={'organization_slug': organization.slug})
+        self.client.post(url, data={'task': 9, 'status': 'Skipped'}, format='json')
+
+        oot = OrganizationOnboardingTask.objects.get(
+            organization=organization,
+            task=OnboardingTask.ISSUE_TRACKER,
+            status=OnboardingTaskStatus.SKIPPED
+        )
+
+        assert oot
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index e4a8ae957b..0a91bdf186 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -4,6 +4,7 @@ from django.core.urlresolvers import reverse
 from mock import patch
 
 from sentry.models import Organization, OrganizationOption, OrganizationStatus
+from sentry.signals import project_created
 from sentry.testutils import APITestCase
 
 
@@ -14,10 +15,20 @@ class OrganizationDetailsTest(APITestCase):
         url = reverse('sentry-api-0-organization-details', kwargs={
             'organization_slug': org.slug,
         })
-        response = self.client.get(url)
+        response = self.client.get(url, format='json')
+        assert response.data['onboardingTasks'] == []
         assert response.status_code == 200, response.content
         assert response.data['id'] == str(org.id)
 
+        project = self.create_project(organization=org)
+        project_created.send(project=project, user=self.user, sender=type(project))
+
+        url = reverse('sentry-api-0-organization-details', kwargs={
+            'organization_slug': org.slug,
+        })
+        response = self.client.get(url, format='json')
+        assert len(response.data['onboardingTasks']) == 1
+        assert response.data['onboardingTasks'][0]['task'] == 1
 
 class OrganizationUpdateTest(APITestCase):
     def test_simple(self):
diff --git a/tests/sentry/receivers/test_onboarding.py b/tests/sentry/receivers/test_onboarding.py
index ef709c0e9e..29fecde846 100644
--- a/tests/sentry/receivers/test_onboarding.py
+++ b/tests/sentry/receivers/test_onboarding.py
@@ -5,7 +5,17 @@ from django.utils import timezone
 from sentry.models import (
     OnboardingTask, OnboardingTaskStatus, OrganizationOnboardingTask
 )
-from sentry.signals import first_event_pending, first_event_received
+from sentry.signals import (
+    event_processed,
+    project_created,
+    first_event_pending,
+    first_event_received,
+    member_invited,
+    member_joined,
+    plugin_enabled,
+    issue_tracker_used,
+)
+from sentry.plugins import IssueTrackingPlugin, NotificationPlugin
 from sentry.testutils import TestCase
 
 
@@ -59,3 +69,124 @@ class OrganizationOnboardingTaskTest(TestCase):
         task = OrganizationOnboardingTask.objects.get(id=task.id)
         assert task.status == OnboardingTaskStatus.COMPLETE
         assert not task.project
+
+    # Tests on the receivers
+    def test_event_processed(self):
+        project = self.create_project(first_event=timezone.now())
+        event = self.create_full_event()
+        event_processed.send(project=project, group=self.group, event=event, sender=type(project))
+
+        task = OrganizationOnboardingTask.objects.get(
+            organization=project.organization,
+            task=OnboardingTask.RELEASE_TRACKING,
+            status=OnboardingTaskStatus.COMPLETE,
+        )
+        assert task is not None
+
+        task = OrganizationOnboardingTask.objects.get(
+            organization=project.organization,
+            task=OnboardingTask.USER_CONTEXT,
+            status=OnboardingTaskStatus.COMPLETE,
+        )
+        assert task is not None
+
+        task = OrganizationOnboardingTask.objects.get(
+            organization=project.organization,
+            task=OnboardingTask.SOURCEMAPS,
+            status=OnboardingTaskStatus.COMPLETE,
+        )
+        assert task is not None
+
+    def test_project_created(self):
+        project = self.create_project(first_event=timezone.now())
+        project_created.send(project=project, user=self.user, sender=type(project))
+
+        task = OrganizationOnboardingTask.objects.get(
+            organization=project.organization,
+            task=OnboardingTask.FIRST_PROJECT,
+            status=OnboardingTaskStatus.COMPLETE,
+        )
+        assert task is not None
+
+    def test_first_event_pending(self):
+        project = self.create_project(first_event=timezone.now())
+        first_event_pending.send(project=project, user=self.user, sender=type(project))
+
+        task = OrganizationOnboardingTask.objects.get(
+            organization=project.organization,
+            task=OnboardingTask.FIRST_EVENT,
+            status=OnboardingTaskStatus.PENDING,
+        )
+        assert task is not None
+
+    def test_first_event_received(self):
+        project = self.create_project(first_event=timezone.now())
+        first_event_received.send(project=project, group=self.group, sender=type(project))
+
+        task = OrganizationOnboardingTask.objects.get(
+            organization=project.organization,
+            task=OnboardingTask.FIRST_EVENT,
+            status=OnboardingTaskStatus.COMPLETE,
+        )
+        assert task is not None
+
+    def test_member_invited(self):
+        user = self.create_user(email='test@example.org')
+        member = self.create_member(organization=self.organization, teams=[self.team], user=user)
+        member_invited.send(member=member, user=user, sender=type(member))
+
+        task = OrganizationOnboardingTask.objects.get(
+            organization=self.organization,
+            task=OnboardingTask.INVITE_MEMBER,
+            status=OnboardingTaskStatus.PENDING,
+        )
+        assert task is not None
+
+    def test_member_joined(self):
+        user = self.create_user(email='test@example.org')
+        member = self.create_member(organization=self.organization, teams=[self.team], user=user)
+        member_joined.send(member=member, sender=type(member))
+
+        task = OrganizationOnboardingTask.objects.get(
+            organization=self.organization,
+            task=OnboardingTask.INVITE_MEMBER,
+            status=OnboardingTaskStatus.COMPLETE,
+        )
+        assert task is not None
+
+        user2 = self.create_user(email='test@example.com')
+        member2 = self.create_member(organization=self.organization, teams=[self.team], user=user2)
+        member_joined.send(member=member2, sender=type(member2))
+
+        task = OrganizationOnboardingTask.objects.get(
+            organization=self.organization,
+            task=OnboardingTask.INVITE_MEMBER,
+            status=OnboardingTaskStatus.COMPLETE,
+        )
+        assert task.data['invited_member_id'] == member.id
+
+    def test_issue_tracker_onboarding(self):
+        plugin_enabled.send(plugin=IssueTrackingPlugin(), project=self.project, user=self.user, sender=type(IssueTrackingPlugin))
+        task = OrganizationOnboardingTask.objects.get(
+            organization=self.organization,
+            task=OnboardingTask.ISSUE_TRACKER,
+            status=OnboardingTaskStatus.PENDING,
+        )
+        assert task is not None
+
+        issue_tracker_used.send(plugin=IssueTrackingPlugin(), project=self.project, user=self.user, sender=type(IssueTrackingPlugin))
+        task = OrganizationOnboardingTask.objects.get(
+            organization=self.organization,
+            task=OnboardingTask.ISSUE_TRACKER,
+            status=OnboardingTaskStatus.COMPLETE,
+        )
+        assert task is not None
+
+    def test_notification_added(self):
+        plugin_enabled.send(plugin=NotificationPlugin(), project=self.project, user=self.user, sender=type(NotificationPlugin))
+        task = OrganizationOnboardingTask.objects.get(
+            organization=self.organization,
+            task=OnboardingTask.NOTIFICATION_SERVICE,
+            status=OnboardingTaskStatus.COMPLETE,
+        )
+        assert task is not None
