commit 2ca992babc31c3921b95e7e432792d4e8ae1a525
Author: Mark Story <mark@mark-story.com>
Date:   Thu Mar 7 10:33:15 2019 -0500

    fix(integrations) Allow admin role users to create repositories (#12316)
    
    Admin users can create and delete integrations, but cannot create
    repositories. This is problematic for some folks and allowing admin
    role users makes permissions more consistent for integrations.
    
    Fixes SEN-244

diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index 8a88ce474c..b363dce42e 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -84,6 +84,15 @@ class OrganizationIntegrationsPermission(OrganizationPermission):
     }
 
 
+class OrganizationRepositoryPermission(OrganizationPermission):
+    scope_map = {
+        'GET': ['org:read', 'org:write', 'org:admin', 'org:integrations'],
+        'POST': ['org:write', 'org:admin', 'org:integrations'],
+        'PUT': ['org:write', 'org:admin'],
+        'DELETE': ['org:admin'],
+    }
+
+
 class OrganizationAdminPermission(OrganizationPermission):
     scope_map = {
         'GET': ['org:admin'],
diff --git a/src/sentry/api/endpoints/organization_repositories.py b/src/sentry/api/endpoints/organization_repositories.py
index ae73448835..47343a4aa9 100644
--- a/src/sentry/api/endpoints/organization_repositories.py
+++ b/src/sentry/api/endpoints/organization_repositories.py
@@ -4,7 +4,10 @@ from rest_framework.response import Response
 
 from sentry import features
 from sentry.api.base import DocSection
-from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.bases.organization import (
+    OrganizationEndpoint,
+    OrganizationRepositoryPermission
+)
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.constants import ObjectStatus
@@ -15,6 +18,7 @@ from sentry.utils.sdk import capture_exception
 
 class OrganizationRepositoriesEndpoint(OrganizationEndpoint):
     doc_section = DocSection.ORGANIZATIONS
+    permission_classes = (OrganizationRepositoryPermission,)
 
     def has_feature(self, request, organization):
         return features.has(
diff --git a/src/sentry/api/endpoints/organization_repository_details.py b/src/sentry/api/endpoints/organization_repository_details.py
index 869486369f..e47d94844d 100644
--- a/src/sentry/api/endpoints/organization_repository_details.py
+++ b/src/sentry/api/endpoints/organization_repository_details.py
@@ -7,7 +7,10 @@ from rest_framework.response import Response
 from uuid import uuid4
 
 from sentry.api.base import DocSection
-from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.bases.organization import (
+    OrganizationEndpoint,
+    OrganizationRepositoryPermission
+)
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import serialize
 from sentry.constants import ObjectStatus
@@ -32,6 +35,7 @@ class RepositorySerializer(serializers.Serializer):
 
 class OrganizationRepositoryDetailsEndpoint(OrganizationEndpoint):
     doc_section = DocSection.ORGANIZATIONS
+    permission_classes = (OrganizationRepositoryPermission,)
 
     def put(self, request, organization, repo_id):
         if not request.user.is_authenticated():
diff --git a/tests/sentry/api/endpoints/test_organization_repositories.py b/tests/sentry/api/endpoints/test_organization_repositories.py
index f950a5e657..e9190fb3f5 100644
--- a/tests/sentry/api/endpoints/test_organization_repositories.py
+++ b/tests/sentry/api/endpoints/test_organization_repositories.py
@@ -191,3 +191,51 @@ class OrganizationRepositoriesCreateTest(APITestCase):
         repo = Repository.objects.get(id=response.data['id'])
         assert repo.provider == 'dummy'
         assert repo.name == 'getsentry/sentry'
+
+    def test_admin_ok(self):
+        org = self.create_organization(owner=self.user, name='baz')
+        team = self.create_team(name='people', organization=org)
+
+        user = self.create_user(email='admin@example.org')
+        self.create_member(
+            organization=org,
+            user=user,
+            teams=[team],
+            role='admin')
+
+        self.login_as(user=user)
+
+        with patch.object(DummyRepositoryProvider, 'needs_auth', return_value=False):
+            url = reverse('sentry-api-0-organization-repositories', args=[org.slug])
+            response = self.client.post(
+                url, data={
+                    'provider': 'dummy',
+                    'name': 'getsentry/sentry',
+                }
+            )
+
+        assert response.status_code == 201, (response.status_code, response.content)
+
+    def test_no_access(self):
+        org = self.create_organization(owner=self.user, name='baz')
+        team = self.create_team(name='people', organization=org)
+
+        user = self.create_user(email='member@example.org')
+        self.create_member(
+            organization=org,
+            user=user,
+            teams=[team],
+            role='member')
+
+        self.login_as(user=user)
+
+        with patch.object(DummyRepositoryProvider, 'needs_auth', return_value=False):
+            url = reverse('sentry-api-0-organization-repositories', args=[org.slug])
+            response = self.client.post(
+                url, data={
+                    'provider': 'dummy',
+                    'name': 'getsentry/sentry',
+                }
+            )
+
+        assert response.status_code == 403, (response.status_code, response.content)
