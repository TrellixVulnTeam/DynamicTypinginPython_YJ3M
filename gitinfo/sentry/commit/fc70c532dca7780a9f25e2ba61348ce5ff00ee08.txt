commit fc70c532dca7780a9f25e2ba61348ce5ff00ee08
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Fri Oct 12 08:51:42 2018 -0700

    feat(api): Add basic organization events endpoint (#10079)

diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
new file mode 100644
index 0000000000..439ad76b64
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -0,0 +1,65 @@
+from __future__ import absolute_import
+
+from datetime import timedelta
+from django.utils import timezone
+from functools32 import partial
+
+from sentry import roles
+from sentry.api.bases import OrganizationEndpoint
+from sentry.api.paginator import GenericOffsetPaginator
+from sentry.api.serializers import serialize
+from sentry.api.serializers.models.event import SnubaEvent
+from sentry.models import OrganizationMember, OrganizationMemberTeam, Project, ProjectStatus
+from sentry.utils.snuba import raw_query
+
+
+class OrganizationEventsEndpoint(OrganizationEndpoint):
+
+    def get_project_ids(self, request, organization):
+        om_role = OrganizationMember.objects.filter(
+            user=request.user,
+            organization=organization,
+        ).values_list('role', flat=True).get()
+
+        if request.user.is_superuser or (om_role and roles.get(om_role).is_global):
+            qs = Project.objects.filter(
+                organization=organization,
+                status=ProjectStatus.VISIBLE,
+            )
+        else:
+            qs = Project.objects.filter(
+                organization=organization,
+                teams__in=OrganizationMemberTeam.objects.filter(
+                    organizationmember__user=request.user,
+                    organizationmember__organization=organization,
+                ).values_list('team'),
+                status=ProjectStatus.VISIBLE,
+            )
+
+        return list(qs.values_list('id', flat=True))
+
+    def get(self, request, organization):
+        query = request.GET.get('query')
+        conditions = []
+        if query:
+            conditions.append(['message', 'LIKE', '%%%s%%' % (query,)])
+
+        now = timezone.now()
+
+        data_fn = partial(
+            # extract 'data' from raw_query result
+            lambda *args, **kwargs: raw_query(*args, **kwargs)['data'],
+            start=now - timedelta(days=90),
+            end=now,
+            conditions=conditions,
+            filter_keys={'project_id': self.get_project_ids(request, organization)},
+            selected_columns=SnubaEvent.selected_columns,
+            orderby='-timestamp',
+        )
+
+        return self.paginate(
+            request=request,
+            on_results=lambda results: serialize(
+                [SnubaEvent(row) for row in results], request.user),
+            paginator=GenericOffsetPaginator(data_fn=data_fn)
+        )
diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 634bec7ca4..ac90e4a222 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -234,10 +234,12 @@ class SnubaEvent(object):
     # out a proper event object.
     selected_columns = [
         'event_id',
+        'project_id',
         'message',
         'user_id',
         'username',
         'email',
+        'timestamp',
     ]
 
     def __init__(self, kv):
@@ -256,7 +258,9 @@ class SnubaEventSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         return {
             'eventID': six.text_type(obj.event_id),
+            'projectID': six.text_type(obj.project_id),
             'message': obj.message,
+            'timestamp': obj.timestamp,
             'user': {
                 'id': obj.user_id,
                 'email': obj.email,
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 843e7bc2ee..afbcbb5b3a 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -61,6 +61,7 @@ from .endpoints.organization_details import OrganizationDetailsEndpoint
 from .endpoints.organization_discover_query import OrganizationDiscoverQueryEndpoint
 from .endpoints.organization_discover_saved_queries import OrganizationDiscoverSavedQueriesEndpoint
 from .endpoints.organization_discover_saved_query_detail import OrganizationDiscoverSavedQueryDetailEndpoint
+from .endpoints.organization_events import OrganizationEventsEndpoint
 from .endpoints.organization_health import OrganizationHealthTopEndpoint, OrganizationHealthGraphEndpoint
 from .endpoints.organization_shortid import ShortIdLookupEndpoint
 from .endpoints.organization_environments import OrganizationEnvironmentsEndpoint
@@ -477,6 +478,11 @@ urlpatterns = patterns(
         OrganizationConfigRepositoriesEndpoint.as_view(),
         name='sentry-api-0-organization-config-repositories'
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/events/$',
+        OrganizationEventsEndpoint.as_view(),
+        name='sentry-api-0-organization-events'
+    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/issues/new/$',
         OrganizationIssuesNewEndpoint.as_view(),
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
new file mode 100644
index 0000000000..e24cfedd21
--- /dev/null
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -0,0 +1,65 @@
+from __future__ import absolute_import
+
+from datetime import timedelta
+from django.utils import timezone
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase, SnubaTestCase
+
+
+class OrganizationEventsTest(APITestCase, SnubaTestCase):
+    def setUp(self):
+        super(OrganizationEventsTest, self).setUp()
+        self.min_ago = timezone.now() - timedelta(minutes=1)
+
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        project2 = self.create_project()
+        group = self.create_group(project=project)
+        group2 = self.create_group(project=project2)
+        event_1 = self.create_event('a' * 32, group=group, datetime=self.min_ago)
+        event_2 = self.create_event('b' * 32, group=group2, datetime=self.min_ago)
+
+        url = reverse(
+            'sentry-api-0-organization-events',
+            kwargs={
+                'organization_slug': project.organization.slug,
+            }
+        )
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+        assert sorted(map(lambda x: x['eventID'], response.data)) == sorted(
+            [
+                event_1.event_id,
+                event_2.event_id,
+            ]
+        )
+
+    def test_message_search(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        group = self.create_group(project=project)
+        self.create_event('x' * 32, group=group, message="how to make fast", datetime=self.min_ago)
+        event_2 = self.create_event(
+            'y' * 32,
+            group=group,
+            message="delet the data",
+            datetime=self.min_ago)
+
+        url = reverse(
+            'sentry-api-0-organization-events',
+            kwargs={
+                'organization_slug': project.organization.slug,
+            }
+        )
+        response = self.client.get(url, {'query': 'delet'}, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]['eventID'] == event_2.event_id
+        assert response.data[0]['message'] == 'delet the data'
