commit c24ad98a420b72cbacddbadf32116f2cdd0abb9f
Author: Jan Michael Auer <jan.auer@sentry.io>
Date:   Tue Sep 10 18:00:23 2019 +0200

    fix(grouping): Properly trim MSVC anonymous namespaces (#14636)
    
    Fixes rendering of anonymous namespaces in Windows stack traces.

diff --git a/src/sentry/stacktraces/functions.py b/src/sentry/stacktraces/functions.py
index 37bf37a543..5f880f9fc1 100644
--- a/src/sentry/stacktraces/functions.py
+++ b/src/sentry/stacktraces/functions.py
@@ -26,7 +26,12 @@ _lambda_re = re.compile(
     (?:
         \$_\d+\b
     )
-"""
+    """
+)
+_anon_namespace_re = re.compile(
+    r"""(?x)
+    \?A0x[a-f0-9]{8}::
+    """
 )
 
 
@@ -121,6 +126,7 @@ def trim_function_name(function, platform, normalize_lambdas=True):
         .replace("operator<", u"operator⟨")
         .replace("operator()", u"operator◯")
         .replace(" -> ", u" ⟿ ")
+        .replace("`anonymous namespace'", u"〔anonymousnamespace〕")
     )
 
     # normalize C++ lambdas.  This is necessary because different
@@ -133,6 +139,14 @@ def trim_function_name(function, platform, normalize_lambdas=True):
     if normalize_lambdas:
         function = _lambda_re.sub("lambda", function)
 
+    # Normalize MSVC anonymous namespaces from inline functions.  For inline
+    # functions, the compiler inconsistently renders anonymous namespaces with
+    # their hash.  For regular functions,  "`anonymous namespace'" is used.
+    # The regular expression matches the trailing "::" to avoid accidental
+    # replacement in mangled function names.
+    if normalize_lambdas:
+        function = _anon_namespace_re.sub(u"〔anonymousnamespace〕::", function)
+
     # Remove the arguments if there is one.
     def process_args(value, start):
         value = value.strip()
@@ -170,7 +184,12 @@ def trim_function_name(function, platform, normalize_lambdas=True):
             func_token = None
 
     if func_token:
-        function = func_token.replace(u"⟨", "<").replace(u"◯", "()").replace(u" ⟿ ", " -> ")
+        function = (
+            func_token.replace(u"⟨", "<")
+            .replace(u"◯", "()")
+            .replace(u" ⟿ ", " -> ")
+            .replace(u"〔anonymousnamespace〕", "`anonymous namespace'")
+        )
 
     # This really should never happen
     else:
diff --git a/tests/sentry/grouping/grouping_inputs/native-windows-anon-namespace.json b/tests/sentry/grouping/grouping_inputs/native-windows-anon-namespace.json
new file mode 100644
index 0000000000..4058650485
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/native-windows-anon-namespace.json
@@ -0,0 +1,60 @@
+{
+  "event_id": "f79bf3f80cb444e0a2eda68ad7c95d93",
+  "platform": "native",
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "__scrt_common_main_seh",
+              "filename": "exe_common.inl",
+              "lineno": 288,
+              "in_app": false,
+              "instruction_addr": "0xeb2d91"
+            },
+            {
+              "function": "invoke_main",
+              "filename": "exe_common.inl",
+              "lineno": 78,
+              "in_app": false,
+              "instruction_addr": "0xeb2dac"
+            },
+            {
+              "function": "main",
+              "filename": "main.cpp",
+              "lineno": 35,
+              "in_app": false,
+              "instruction_addr": "0xeb2a4d"
+            },
+            {
+              "function": "`anonymous namespace'::start",
+              "filename": "main.cpp",
+              "in_app": false,
+              "instruction_addr": "0xeb2a4d",
+              "lineno": 28
+            },
+            {
+              "function": "?A0xc3a0617d::crash",
+              "filename": "main.cpp",
+              "in_app": false,
+              "instruction_addr": "0xeb2a4d",
+              "lineno": 24
+            }
+          ]
+        },
+        "type": "EXCEPTION_ACCESS_VIOLATION_WRITE",
+        "value": "Fatal Error: EXCEPTION_ACCESS_VIOLATION_WRITE",
+        "mechanism": {
+          "synthetic": true,
+          "type": "minidump",
+          "handled": false
+        },
+        "thread_id": 3804
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined@2019_04_07/native_windows_anon_namespace.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined@2019_04_07/native_windows_anon_namespace.pysnap
new file mode 100644
index 0000000000..f6794cddbf
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined@2019_04_07/native_windows_anon_namespace.pysnap
@@ -0,0 +1,72 @@
+---
+created: '2019-09-10T09:51:01.536615Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'exe_common.inl'
+            function*
+              u'__scrt_common_main_seh'
+          frame (non app frame)
+            filename*
+              u'exe_common.inl'
+            function*
+              u'invoke_main'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u"`anonymous namespace'::start"
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'?A0xc3a0617d::crash'
+        type (ignored because exception is synthetic)
+          u'EXCEPTION_ACCESS_VIOLATION_WRITE'
+--------------------------------------------------------------------------
+system:
+  hash: '6fc07910e6c6a6d4051f823aed855991'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'exe_common.inl'
+            function*
+              u'__scrt_common_main_seh'
+          frame*
+            filename*
+              u'exe_common.inl'
+            function*
+              u'invoke_main'
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u"`anonymous namespace'::start"
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'?A0xc3a0617d::crash'
+        type (ignored because exception is synthetic)
+          u'EXCEPTION_ACCESS_VIOLATION_WRITE'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy@2019_03_12/native_windows_anon_namespace.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy@2019_03_12/native_windows_anon_namespace.pysnap
new file mode 100644
index 0000000000..6f830b1770
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy@2019_03_12/native_windows_anon_namespace.pysnap
@@ -0,0 +1,96 @@
+---
+created: '2019-09-10T09:51:02.717347Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace*
+          frame* (frame considered in-app because no frame is in-app)
+            filename*
+              u'exe_common.inl'
+            function*
+              u'__scrt_common_main_seh'
+            lineno (function takes precedence)
+              288
+          frame* (frame considered in-app because no frame is in-app)
+            filename*
+              u'exe_common.inl'
+            function*
+              u'invoke_main'
+            lineno (function takes precedence)
+              78
+          frame* (frame considered in-app because no frame is in-app)
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+            lineno (function takes precedence)
+              35
+          frame* (frame considered in-app because no frame is in-app)
+            filename*
+              u'main.cpp'
+            function*
+              u"`anonymous namespace'::start"
+            lineno (function takes precedence)
+              28
+          frame* (frame considered in-app because no frame is in-app)
+            filename*
+              u'main.cpp'
+            function*
+              u'?A0xc3a0617d::crash'
+            lineno (function takes precedence)
+              24
+        type*
+          u'EXCEPTION_ACCESS_VIOLATION_WRITE'
+        value (stacktrace and type take precedence)
+          u'Fatal Error: EXCEPTION_ACCESS_VIOLATION_WRITE'
+--------------------------------------------------------------------------
+system:
+  hash: 'f133068802b8a7f6162e0c7d8fc6b984'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'exe_common.inl'
+            function*
+              u'__scrt_common_main_seh'
+            lineno (function takes precedence)
+              288
+          frame*
+            filename*
+              u'exe_common.inl'
+            function*
+              u'invoke_main'
+            lineno (function takes precedence)
+              78
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+            lineno (function takes precedence)
+              35
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u"`anonymous namespace'::start"
+            lineno (function takes precedence)
+              28
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'?A0xc3a0617d::crash'
+            lineno (function takes precedence)
+              24
+        type*
+          u'EXCEPTION_ACCESS_VIOLATION_WRITE'
+        value (stacktrace and type take precedence)
+          u'Fatal Error: EXCEPTION_ACCESS_VIOLATION_WRITE'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_05/native_windows_anon_namespace.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_05/native_windows_anon_namespace.pysnap
new file mode 100644
index 0000000000..e67328d814
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_05/native_windows_anon_namespace.pysnap
@@ -0,0 +1,72 @@
+---
+created: '2019-09-10T09:51:03.965040Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'exe_common.inl'
+            function*
+              u'__scrt_common_main_seh'
+          frame (non app frame)
+            filename*
+              u'exe_common.inl'
+            function*
+              u'invoke_main'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u"`anonymous namespace'::start"
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'?A0xc3a0617d::crash'
+        type (ignored because exception is synthetic)
+          u'EXCEPTION_ACCESS_VIOLATION_WRITE'
+--------------------------------------------------------------------------
+system:
+  hash: '6fc07910e6c6a6d4051f823aed855991'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'exe_common.inl'
+            function*
+              u'__scrt_common_main_seh'
+          frame*
+            filename*
+              u'exe_common.inl'
+            function*
+              u'invoke_main'
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u"`anonymous namespace'::start"
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'?A0xc3a0617d::crash'
+        type (ignored because exception is synthetic)
+          u'EXCEPTION_ACCESS_VIOLATION_WRITE'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_17/native_windows_anon_namespace.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_17/native_windows_anon_namespace.pysnap
new file mode 100644
index 0000000000..492c23de67
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_17/native_windows_anon_namespace.pysnap
@@ -0,0 +1,76 @@
+---
+created: '2019-09-10T09:49:13.787660Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'exe_common.inl'
+            function*
+              u'__scrt_common_main_seh'
+          frame (non app frame)
+            filename*
+              u'exe_common.inl'
+            function*
+              u'invoke_main'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u"`anonymous namespace'::start"
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u"`anonymous namespace'::crash"
+        type (ignored because exception is synthetic)
+          u'EXCEPTION_ACCESS_VIOLATION_WRITE'
+        value*
+          u'Fatal Error: EXCEPTION_ACCESS_VIOLATION_WRITE'
+--------------------------------------------------------------------------
+system:
+  hash: '15d397771f229af8dc42783542f81dd4'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'exe_common.inl'
+            function*
+              u'__scrt_common_main_seh'
+          frame*
+            filename*
+              u'exe_common.inl'
+            function*
+              u'invoke_main'
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u"`anonymous namespace'::start"
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u"`anonymous namespace'::crash"
+        type (ignored because exception is synthetic)
+          u'EXCEPTION_ACCESS_VIOLATION_WRITE'
+        value (ignored because stacktrace takes precedence)
+          u'Fatal Error: EXCEPTION_ACCESS_VIOLATION_WRITE'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/native_windows_anon_namespace.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/native_windows_anon_namespace.pysnap
new file mode 100644
index 0000000000..af23381c96
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/native_windows_anon_namespace.pysnap
@@ -0,0 +1,76 @@
+---
+created: '2019-09-10T09:49:14.992868Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'exe_common.inl'
+            function*
+              u'__scrt_common_main_seh'
+          frame (non app frame)
+            filename*
+              u'exe_common.inl'
+            function*
+              u'invoke_main'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u"`anonymous namespace'::start"
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u"`anonymous namespace'::crash"
+        type (ignored because exception is synthetic)
+          u'EXCEPTION_ACCESS_VIOLATION_WRITE'
+        value*
+          u'Fatal Error: EXCEPTION_ACCESS_VIOLATION_WRITE'
+--------------------------------------------------------------------------
+system:
+  hash: '15d397771f229af8dc42783542f81dd4'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'exe_common.inl'
+            function*
+              u'__scrt_common_main_seh'
+          frame*
+            filename*
+              u'exe_common.inl'
+            function*
+              u'invoke_main'
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u"`anonymous namespace'::start"
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u"`anonymous namespace'::crash"
+        type (ignored because exception is synthetic)
+          u'EXCEPTION_ACCESS_VIOLATION_WRITE'
+        value (ignored because stacktrace takes precedence)
+          u'Fatal Error: EXCEPTION_ACCESS_VIOLATION_WRITE'
