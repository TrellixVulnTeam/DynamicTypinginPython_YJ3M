commit 4e36ab552cff08f1419db5f14509a90e25ca1bbe
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Jul 21 12:37:10 2015 +0200

    Imported new docs for federation

diff --git a/.gitignore b/.gitignore
index 4c4cc512bb..25fa4b25e9 100644
--- a/.gitignore
+++ b/.gitignore
@@ -17,8 +17,7 @@ celerybeat-schedule
 /dist
 /env
 /node_modules/
-/docs/html
-/docs/doctrees
+/docs/_build
 example/db.sqlite
 /src/sentry/static/sentry/dist/
 /src/sentry/static/sentry/vendor/
diff --git a/.gitmodules b/.gitmodules
index e69de29bb2..1e6464ab94 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -0,0 +1,3 @@
+[submodule "docs/_sentryext"]
+	path = docs/_sentryext
+	url = https://github.com/getsentry/sentry-doc-support
diff --git a/Makefile b/Makefile
index 06db9245d9..1fbd27ac76 100644
--- a/Makefile
+++ b/Makefile
@@ -18,7 +18,7 @@ dev-mysql: develop
 	pip install "file://`pwd`#egg=sentry[mysql]"
 
 dev-docs:
-	pip install -r docs/requirements.txt
+	pip install -r doc-requirements.txt
 
 reset-db:
 	@echo "--> Dropping existing 'sentry' database"
diff --git a/docs/requirements.txt b/doc-requirements.txt
similarity index 100%
rename from docs/requirements.txt
rename to doc-requirements.txt
diff --git a/docs/Makefile b/docs/Makefile
index ed016ccb12..1db8f3cd8c 100644
--- a/docs/Makefile
+++ b/docs/Makefile
@@ -5,7 +5,7 @@
 SPHINXOPTS    =
 SPHINXBUILD   = sphinx-build
 PAPER         =
-BUILDDIR      = ./
+BUILDDIR      = ./_build
 
 # Internal variables.
 PAPEROPT_a4     = -D latex_paper_size=a4
diff --git a/docs/_sentryext b/docs/_sentryext
new file mode 160000
index 0000000000..7a2aab71ee
--- /dev/null
+++ b/docs/_sentryext
@@ -0,0 +1 @@
+Subproject commit 7a2aab71ee148ac47df530c84375b7d86f2dfdb8
diff --git a/docs/beacon.rst b/docs/beacon.rst
index be7a60f8a6..d7e7f9e659 100644
--- a/docs/beacon.rst
+++ b/docs/beacon.rst
@@ -1,24 +1,29 @@
 Beacon
 ======
 
-Sentry will periodically communicate with a remote beacon server. This is utilized for a couple of things, primarily:
+Sentry will periodically communicate with a remote beacon server. This is
+utilized for a couple of things, primarily:
 
 - Getting information about the current version of Sentry
 - Retrieving important system notices
 
-The remote server is operated by the Sentry team (getsentry.com), and the information reported follows the company's `privacy policy <https://www.getsentry.com/privacy/>`_.
+The remote server is operated by the Sentry team (getsentry.com), and the
+information reported follows the company's `privacy policy
+<https://www.getsentry.com/privacy/>`_.
 
 The following information is reported:
 
 - A unique installation ID
 - The version of Sentry
 - A technical contact email (``SENTRY_ADMIN_EMAIL``)
-- General anonymous statistics on the data pattern (such as the number of users)
+- General anonymous statistics on the data pattern (such as the number of
+  users)
 
-Note: The contact email is utilized for security announcements, and will never be used outside of such.
+Note: The contact email is utilized for security announcements, and will
+never be used outside of such.
 
-The data reported is minimal and it greatly helps the development team behind Sentry. With that said, you can disable the beacon with the following setting:
-
-.. code-block:: python
+The data reported is minimal and it greatly helps the development team
+behind Sentry. With that said, you can disable the beacon with the
+following setting::
 
 	SENTRY_BEACON = False
diff --git a/docs/buffer.rst b/docs/buffer.rst
new file mode 100644
index 0000000000..0eecb5cdbb
--- /dev/null
+++ b/docs/buffer.rst
@@ -0,0 +1,59 @@
+Updating Buffers
+================
+
+Sentry provides the ability to buffer certain updates to events, such as
+counts and timestamps. This is extremely helpful if you have high
+concurrency, especially if they're frequently the same event.
+
+For example, if you happen to receive 100,000 events/second, and 10% of
+those are reporting a connection issue to the database (where they'd get
+grouped together), enabling a buffer backend will change things so that
+each count update is actually put into a queue, and all updates are
+performed at the rate of how fast the queue can keep up.
+
+Choosing a Backend
+------------------
+
+To specify a backend, simply modify the ``SENTRY_BUFFER`` and
+``SENTRY_BUFFER_OPTIONS`` values in your configuration::
+
+    SENTRY_BUFFER = 'sentry.buffer.base.Buffer'
+    SENTRY_BUFFER_OPTIONS = {}
+
+
+The Redis Backend
+-----------------
+
+Configuring the Redis backend **requires the queue** or you won't see any
+gains (in fact you'll just negatively impact your performance).
+
+Configuration is fairly straight forward::
+
+    SENTRY_BUFFER = 'sentry.buffer.redis.RedisBuffer'
+    SENTRY_BUFFER_OPTIONS = {
+        'hosts': {
+            0: {
+                'host': 'localhost',
+                'port': 6379
+            }
+        }
+    }
+
+Because the Redis buffer relies on the Nydus package, this gives you the
+ability to specify multiple nodes and have keys automatically distributed.
+It's unlikely that you'll need this functionality, but if you do, a simple
+configuration might look like this::
+
+    SENTRY_BUFFER_OPTIONS = {
+        'hosts': {
+            0: {
+                'host': '192.168.1.1'
+            },
+            1: {
+                'host': '192.168.1.2'
+            }
+        },
+    }
+
+With the default configuration this will distribute keys using a simple
+partition router (relatively even distribution).
diff --git a/docs/buffer/index.rst b/docs/buffer/index.rst
deleted file mode 100644
index 146c7bee0b..0000000000
--- a/docs/buffer/index.rst
+++ /dev/null
@@ -1,61 +0,0 @@
-Update Buffers
-==============
-
-Sentry provides the ability to buffer certain updates to events, such as counts and timestamps. This is
-extremely helpful if you have high concurrency, especially if they're frequently the same event.
-
-For example, if you happen to receive 100,000 events/second, and 10% of those are reporting a connection
-issue to the database (where they'd get grouped together), enabling a buffer backend will change things
-so that each count update is actually put into a queue, and all updates are performed at the rate of how
-fast the queue can keep up.
-
-Choosing a Backend
-------------------
-
-To specify a backend, simply modify the ``SENTRY_BUFFER`` and ``SENTRY_BUFFER_OPTIONS`` values in your configuration:
-
-.. code-block:: python
-
-    SENTRY_BUFFER = 'sentry.buffer.base.Buffer'
-    SENTRY_BUFFER_OPTIONS = {}
-
-
-The Redis Backend
------------------
-
-Configuring the Redis backend **requires the queue** or you won't see any gains (in fact you'll just negatively
-impact your performance).
-
-Configuration is fairly straight forward:
-
-.. code-block:: python
-
-    SENTRY_BUFFER = 'sentry.buffer.redis.RedisBuffer'
-    SENTRY_BUFFER_OPTIONS = {
-        'hosts': {
-            0: {
-                'host': 'localhost',
-                'port': 6379
-            }
-        }
-    }
-
-Because the Redis buffer relies on the Nydus package, this gives you the ability to specify multiple nodes and
-have keys automatically distributed. It's unlikely that you'll need this functionality, but if you do, a simple
-configuration might look like this:
-
-::
-
-    SENTRY_BUFFER_OPTIONS = {
-        'hosts': {
-            0: {
-                'host': '192.168.1.1'
-            }
-            1: {
-                'host': '192.168.1.2'
-            }
-        },
-    }
-
-With the default configuration this will distribute keys using a simple partition router (relatively even
-distribution).
diff --git a/docs/changelog.rst b/docs/changelog.rst
new file mode 100644
index 0000000000..3b6a0a9cc1
--- /dev/null
+++ b/docs/changelog.rst
@@ -0,0 +1,4 @@
+Changelog
+=========
+
+.. include:: ../CHANGES
diff --git a/docs/changelog/index.rst b/docs/changelog/index.rst
deleted file mode 100644
index f8b67d626f..0000000000
--- a/docs/changelog/index.rst
+++ /dev/null
@@ -1,4 +0,0 @@
-Changelog
-=========
-
-.. include:: ../../CHANGES
diff --git a/docs/cli/index.rst b/docs/cli.rst
similarity index 56%
rename from docs/cli/index.rst
rename to docs/cli.rst
index a89345a07d..d56dcbe47c 100644
--- a/docs/cli/index.rst
+++ b/docs/cli.rst
@@ -1,24 +1,23 @@
 Command Line Usage
 ==================
 
-Sentry installs a command line script under the name ``sentry``. This will allow you to
-perform most required operations that are unachievable within the web UI.
+Sentry installs a command line script under the name ``sentry``. This will
+allow you to perform most required operations that are unachievable within
+the web UI.
 
-If you're using a non-standard configuration location you'll need to use the SENTRY_CONF environment
-variable to specify the path:
+If you're using a non-standard configuration location, you'll need to
+prefix every command with --config (excluding init, which is a special
+case). For example::
 
-    SENTRY_CONF=/etc/sentry.conf.py sentry help
+    sentry --config=/etc/sentry.conf.py help
 
-For a list of commands, you can also use ``sentry help``, or ``sentry [command] --help``
-for help on a specific command.
-
-.. note:: The script is powered by a library called `Logan <https://github.com/dcramer/logan>`_
-          and simply acts as a conduit to django-admin.py.
+For a list of commands, you can also use ``sentry help``, or ``sentry
+[command] --help`` for help on a specific command.
 
 Builtin Commands
 ----------------
 
-.. data:: init [config]
+.. describe:: init [config]
 
     Initializes the configuration file for Sentry.
 
@@ -28,10 +27,11 @@ Builtin Commands
 
         sentry init /etc/sentry.conf.py
 
-    .. note:: The init command requires you to pass the configuration value as the parameter whereas other
-              commands require you to use SENTRY_CONF for passing the location of this file.
+    .. note:: The init command requires you to pass the configuration
+              value as the parameter whereas other commands require you
+              to use --config for passing the location of this file.
 
-.. data:: start [service]
+.. describe:: start [service]
 
     Starts a Sentry service. By default this value is 'http'.
 
@@ -39,16 +39,16 @@ Builtin Commands
 
         sentry start
 
-.. data:: upgrade
+.. describe:: upgrade
 
     Performs any needed database migrations. This is similar to running
     ``django-admin.py syncdb --migrate``.
 
-.. data:: cleanup
+.. describe:: cleanup
 
     Performs all trim operations based on your configuration.
 
-.. data:: repair
+.. describe:: repair
 
     Performs any needed repair against the Sentry database. This will attempt to correct
     things like missing teams, project keys, etc.
@@ -56,4 +56,3 @@ Builtin Commands
     If you specify ``--owner`` it will also update ownerless projects::
 
         sentry repair --owner=<username>
-
diff --git a/docs/client/index.rst b/docs/client/index.rst
deleted file mode 100644
index 9d00cef01e..0000000000
--- a/docs/client/index.rst
+++ /dev/null
@@ -1,41 +0,0 @@
-Available Clients
-=================
-
-The following clients are officially recognized as production-ready, generally supported by the Sentry team, and work with the current Sentry
-protocol:
-
-- Python (`raven-python <http://github.com/getsentry/raven-python>`_)
-- PHP (`raven-php <http://github.com/getsentry/raven-php>`_)
-- Java (`raven-java <https://github.com/kencochrane/raven-java>`_)
-- Ruby (`raven-ruby <https://github.com/getsentry/raven-ruby>`_)
-- Chef (`chef-sentry-handler <https://github.com/coderanger/chef-sentry-handler>`_)
-- JavaScript (`raven-js <https://github.com/getsentry/raven-js>`_)
-- Node.js (`raven-node <https://github.com/mattrobenolt/raven-node>`_)
-- iOS / Objective-C (`raven-objc <https://github.com/getsentry/raven-objc>`_)
-- C# (`raven-csharp <https://github.com/getsentry/raven-csharp>`_)
-
-Additionally, the following third party/experimental clients are available:
-
-- Action Script 3 (`raven-as3 <https://github.com/skitoo/raven-as3>`_)
-- Android (`Sentry-Android <https://github.com/joshdholtz/Sentry-Android>`_)
-- CFML (`raven-cfml <https://github.com/jmacul2/raven-cfml>`_)
-- Erlang (`raven-erlang <https://github.com/soundrop/raven-erlang>`_)
-- Go (`raven-go <https://github.com/getsentry/raven-go>`_)
-- Grails (`raven-grails <https://github.com/informant-army/raven-grails>`_)
-- Perl (`perl-raven <https://github.com/rentrak/perl-raven>`_)
-- PL/SQL (Oracle) (`raven-plsql <https://github.com/teopost/raven-plsql>`_)
-- R (`logging <http://logging.r-forge.r-project.org/>`_)
-- Server-Side ActionScript (`raven-ssas <https://github.com/seegno/raven-ssas>`_)
-
-Client Criteria
----------------
-
-If you're developing a client for your platform, there's several things we highly encourage:
-
-* It should fully implement the current version of the Sentry protocol.
-
-* It should conform to the standard DSN configuration method.
-
-* It should contain an acceptable level of documentation and tests.
-
-* The client should be properly packaged, and named raven-<platform>.
diff --git a/docs/conf.py b/docs/conf.py
index 421e07eea6..225cf81fb4 100644
--- a/docs/conf.py
+++ b/docs/conf.py
@@ -199,7 +199,7 @@ htmlhelp_basename = 'Sentrydoc'
 latex_documents = [
     (
         'index', 'Sentry.tex', u'Sentry Documentation',
-        u'David Cramer', 'manual'
+        u'Functional Software Inc.', 'manual'
     ),
 ]
 
@@ -233,5 +233,10 @@ latex_documents = [
 # (source start file, name, description, authors, manual section).
 man_pages = [
     ('index', 'sentry', u'Sentry Documentation',
-     [u'David Cramer'], 1)
+     [u'Functional Software Inc.'], 1)
 ]
+
+if os.environ.get('SENTRY_FEDERATED_DOCS') != '1':
+    sys.path.insert(0, os.path.abspath('_sentryext'))
+    import sentryext
+    sentryext.activate()
diff --git a/docs/config/index.rst b/docs/config.rst
similarity index 70%
rename from docs/config/index.rst
rename to docs/config.rst
index fdb636a472..8e321a579c 100644
--- a/docs/config/index.rst
+++ b/docs/config.rst
@@ -1,26 +1,28 @@
-Configuration
-=============
+Configuring Sentry
+==================
 
-This document describes additional configuration options available to the Sentry server. If you are looking for documentation for the client, it is maintained in the `Raven <http://github.com/getsentry/raven-python>`_ project.
+This document describes additional configuration options available to the
+Sentry server itself.
 
-.. data:: SENTRY_URL_PREFIX
-    :noindex:
+.. describe:: SENTRY_URL_PREFIX
 
-	Absolute URL to the sentry root directory. Should not include a trailing slash.
+    Absolute URL to the sentry root directory. Should not include a
+    trailing slash.
 
-	Defaults to ``""``.
+    Defaults to ``""``.
 
-	::
+    ::
 
-		SENTRY_URL_PREFIX = 'http://sentry.example.com'
+        SENTRY_URL_PREFIX = 'http://sentry.example.com'
 
 
 Authentication
 --------------
 
+The following keys control the authentication support.
+
 
-.. data:: SENTRY_FEATURES['auth:register']
-    :noindex:
+.. describe:: SENTRY_FEATURES['auth:register']
 
     Should Sentry allow users to create new accounts?
 
@@ -30,11 +32,10 @@ Authentication
 
         SENTRY_FEATURES['auth:register'] = True
 
-.. data:: SENTRY_PUBLIC
-    :noindex:
+.. describe:: SENTRY_PUBLIC
 
-    Should Sentry make all data publicly accessible? This should **only** be
-    used if you're installing Sentry behind your company's firewall.
+    Should Sentry make all data publicly accessible? This should **only**
+    be used if you're installing Sentry behind your company's firewall.
 
     Users will still need to have an account to view any data.
 
@@ -44,11 +45,10 @@ Authentication
 
         SENTRY_PUBLIC = True
 
-.. data:: SENTRY_ALLOW_PUBLIC_PROJECTS
-    :noindex:
+.. describe:: SENTRY_ALLOW_PUBLIC_PROJECTS
 
-    Should Sentry allow users without the 'sentry.change_project' permission to
-    make projects globally public?
+    Should Sentry allow users without the 'sentry.change_project'
+    permission to make projects globally public?
 
     Defaults to ``True`` (can set public status).
 
@@ -57,13 +57,12 @@ Authentication
         SENTRY_ALLOW_PUBLIC_PROJECTS = False
 
 
-.. data:: SENTRY_ALLOW_ORIGIN
-    :noindex:
+.. describe:: SENTRY_ALLOW_ORIGIN
 
-    If provided, Sentry will set the Access-Control-Allow-Origin header to this
-    value on /api/store/ responses. In addition, the
-    Access-Control-Allow-Headers header will be set to 'X-Sentry-Auth'. This
-    allows JavaScript clients to submit cross-domain error reports.
+    If provided, Sentry will set the Access-Control-Allow-Origin header to
+    this value on /api/store/ responses. In addition, the
+    Access-Control-Allow-Headers header will be set to 'X-Sentry-Auth'.
+    This allows JavaScript clients to submit cross-domain error reports.
 
     You can read more about these headers in the `Mozilla developer docs`_.
 
@@ -76,16 +75,12 @@ Authentication
 .. _Mozilla developer docs: https://developer.mozilla.org/En/HTTP_access_control#Simple_requests
 
 
-Services
---------
-
 Web Server
-~~~~~~~~~~
+----------
 
 The following settings are available for the built-in webserver:
 
-.. data:: SENTRY_WEB_HOST
-    :noindex:
+.. describe:: SENTRY_WEB_HOST
 
     The hostname which the webserver should bind to.
 
@@ -95,8 +90,7 @@ The following settings are available for the built-in webserver:
 
         SENTRY_WEB_HOST = '0.0.0.0'  # bind to all addresses
 
-.. data:: SENTRY_WEB_PORT
-    :noindex:
+.. describe:: SENTRY_WEB_PORT
 
     The port which the webserver should listen on.
 
@@ -107,8 +101,7 @@ The following settings are available for the built-in webserver:
         SENTRY_WEB_PORT = 9000
 
 
-.. data:: SENTRY_WEB_OPTIONS
-    :noindex:
+.. describe:: SENTRY_WEB_OPTIONS
 
     A dictionary of additional configuration options to pass to gunicorn.
 
@@ -129,12 +122,11 @@ The following settings are available for the built-in webserver:
 .. _config-smtp-server:
 
 SMTP Server
-~~~~~~~~~~~
+-----------
 
 The following settings are available for the built-in SMTP mail server:
 
-.. data:: SENTRY_SMTP_HOST
-    :noindex:
+.. describe:: SENTRY_SMTP_HOST
 
     The hostname which the smtp server should bind to.
 
@@ -144,8 +136,7 @@ The following settings are available for the built-in SMTP mail server:
 
         SENTRY_SMTP_HOST = '0.0.0.0'  # bind to all addresses
 
-.. data:: SENTRY_SMTP_PORT
-    :noindex:
+.. describe:: SENTRY_SMTP_PORT
 
     The port which the smtp server should listen on.
 
@@ -155,8 +146,7 @@ The following settings are available for the built-in SMTP mail server:
 
         SENTRY_SMTP_PORT = 1025
 
-.. data:: SENTRY_SMTP_HOSTNAME
-    :noindex:
+.. describe:: SENTRY_SMTP_HOSTNAME
 
     The hostname which matches the server's MX record.
 
@@ -166,12 +156,10 @@ The following settings are available for the built-in SMTP mail server:
 
         SENTRY_SMTP_HOSTNAME = 'reply.getsentry.com'
 
-
 Data Sampling
 -------------
 
-.. data:: SENTRY_SAMPLE_DATA
-    :noindex:
+.. describe:: SENTRY_SAMPLE_DATA
 
     .. versionadded:: 1.10.0
 
@@ -179,7 +167,8 @@ Data Sampling
 
     Defaults to ``True``.
 
-    If this is enabled, data will be sampled in a manner similar to the following:
+    If this is enabled, data will be sampled in a manner similar to the
+    following:
 
     * 50 messages stores ~50 results
     * 1000 messages stores ~400 results
@@ -191,3 +180,14 @@ Data Sampling
     ::
 
         SENTRY_SAMPLE_DATA = False
+
+Beacon
+------
+
+.. describe:: SENTRY_BEACON
+ 
+    Controls the :doc:`beacon`.
+
+    ::
+
+        SENTRY_SAMPLE_DATA = True
diff --git a/docs/contributing/index.rst b/docs/contributing/index.rst
deleted file mode 100644
index 74f29ffdf5..0000000000
--- a/docs/contributing/index.rst
+++ /dev/null
@@ -1,196 +0,0 @@
-Contributing
-============
-
-Want to contribute back to Sentry? This page describes the general development flow,
-our philosophy, the test suite, and issue tracking.
-
-
-Documentation
--------------
-
-If you're looking to help document Sentry, you can get set up with Sphinx, our documentation tool,
-but first you will want to make sure you have a few things on your local system:
-
-* python-dev (if you're on OS X, you already have this)
-* pip
-* virtualenvwrapper
-
-Once you've got all that, the rest is simple:
-
-::
-
-    # If you have a fork, you'll want to clone it instead
-    git clone git://github.com/getsentry/sentry.git
-
-    # Create a python virtualenv
-    mkvirtualenv sentry
-
-    # Make the magic happen
-    make dev-docs
-
-Running ``make dev-docs`` will install the basic requirements to get Sphinx running.
-
-
-Building Documentation
-~~~~~~~~~~~~~~~~~~~~~~
-
-Inside the ``docs`` directory, you can run ``make`` to build the documentation.
-See ``make help`` for available options and the `Sphinx Documentation <http://sphinx-doc.org/contents.html>`_ for more information.
-
-
-Localization
-------------
-
-If you're just looking to help translate Sentry, apply for membership via `Transifex <https://www.transifex.com/projects/p/sentry/>`_.
-
-
-Developing Against HEAD
------------------------
-
-We try to make it easy to get up and running in a development environment using a git checkout
-of Sentry. You'll want to make sure you have a few things on your local system first:
-
-* python-dev (if you're on OS X, you already have this)
-* pip
-* virtualenv (ideally virtualenvwrapper)
-* node.js (for npm and building css/javascript)
-* (Optional) Redis
-* (Optional) Potgresql
-
-Once you've got all that, the rest is simple:
-
-::
-
-    # If you have a fork, you'll want to clone it instead
-    git clone git://github.com/getsentry/sentry.git
-
-    # Create a python virtualenv
-    mkvirtualenv sentry
-
-    # Make the magic happen
-    make
-
-Running ``make`` will do several things, including:
-
-* Setting up any submodules (including Bootstrap)
-* Installing Python requirements
-* Installing NPM requirements
-
-.. note::
-    You will want to store your virtualenv out of the ``sentry`` directory you cloned above,
-    otherwise ``make`` will fail.
-
-Create a default Sentry configation just as if this were a production instance:
-
-::
-
-    sentry init
-
-You'll likely want to make some changes to the default configuration (we recommend developing against Postgres, for example). Once done, migrate your database using the following command:
-
-::
-
-	sentry upgrade
-
-
-.. note:: The ``upgrade`` shortcut is simply a combination of South's migrate, and Django's syncdb commands.
-
-
-Coding Standards
-----------------
-
-Sentry follows the guidelines laid out in `pep8 <http://www.python.org/dev/peps/pep-0008/>`_  with a little bit
-of flexibility on things like line length. We always give way for the `Zen of Python <http://www.python.org/dev/peps/pep-0020/>`_. We also use strict mode for JavaScript, enforced by jshint.
-
-You can run all linters with ``make lint``, or respectively ``lint-python`` or ``lint-js``.
-
-Spacing
-~~~~~~~
-
-Python:
-  4 Spaces
-
-JavaScript:
-  2 Spaces
-
-CSS:
-  2 Spaces
-
-HTML:
-  2 Spaces
-
-
-Django Templates
-~~~~~~~~~~~~~~~~
-
-Newer style code prefers a flat hierarchy of templates to ensure simplicity.
-
-For example, the "create team" template lives at sentry/create-team.html, whereas legacy templates have a url-like hierarchy.
-
-**All new templates that are not partials or base layouts must follow this hierarchy.**
-
-
-Running the Test Suite
-----------------------
-
-The test suite consists of multiple parts, testing both the Python and JavaScript components in Sentry. If you've setup your environment correctly, you can run the entire suite with the following command:
-
-::
-
-    make test
-
-If you only need to run the Python tests, you can do so with ``make test-python``, as well as ``test-js`` for the JavaScript tests.
-
-
-You'll notice that the test suite is structured based on where the code lives, and strongly encourages using the mock library to drive more accurate individual tests.
-
-.. note:: We use py.test for the Python test suite, and a combination of phantomjs and jasmine for the JavaScript tests.
-
-
-Static Media
-------------
-
-Sentry uses a library that compiles it's static media assets (LESS and JS files) automatically. If you're developing using
-runserver you'll see changes happen not only in the original files, but also the minified or processed versions of the file.
-
-If you've made changes and need to compile them by hand for any reason, you can do so by running:
-
-::
-
-    sentry compilestatic
-
-The minified and processed files should be committed alongside the unprocessed changes.
-
-Developing with Django
-----------------------
-
-Because Sentry is just Django, you can use all of the standard Django functionality. The only difference is you'll be accessing commands that would normally go through manage.py using the ``sentry`` CLI helper instead.
-
-For example, you probably don't want to use ``sentry start`` for development, as it doesn't support anything like
-automatic reloading on code changes. For that you'd want to use the standard builtin ``runserver`` command:
-
-::
-
-	sentry runserver
-
-
-DDL (Schema Changes)
---------------------
-
-Schema changes should always introduce the new schema in a commit, and then introduce code relying on that schema in a followup commit. This also means that new columns must be NULLable.
-
-Removing columns and tables requires a slightly more painful flow, and should resemble the follow multi-commit flow:
-
-- Remove all references to the column or table (but dont remove the Model itself)
-- Remove the model code
-- Remove the table or column
-
-
-Contributing Back Code
-----------------------
-
-All patches should be sent as a pull request on GitHub, include tests, and documentation where needed. If you're fixing a bug or making a large change the patch **must** include test coverage.
-
-Uncertain about how to write tests? Take a look at some existing tests that are similar to the code you're changing, and go from there.
-
-You can see a list of open pull requests (pending changes) by visiting https://github.com/getsentry/sentry/pulls
diff --git a/docs/developer/client/index.rst b/docs/developer/client/index.rst
deleted file mode 100644
index 48d1bdaecc..0000000000
--- a/docs/developer/client/index.rst
+++ /dev/null
@@ -1,595 +0,0 @@
-Writing a Client
-================
-
-.. note:: This document describes protocol version 6 which was introduced in Sentry 7.
-
-A client at its core is simply a set of utilities for capturing various
-logging parameters. Given these parameters, it then builds a JSON payload
-which it will send to a Sentry server using some sort of authentication
-method.
-
-The following items are expected of production-ready clients:
-
-* DSN configuration
-* Graceful failures (e.g. Sentry server unreachable)
-* Scrubbing w/ processors
-* Tag support
-
-Feature based support is required for the following:
-
-* If cookie data is available, it's not sent by default
-* If POST data is available, it's not sent by default
-
-Additionally, the following features are highly encouraged:
-
-* Automated error handling (e.g. default error handlers)
-* Logging integration (to whatever standard solution is available)
-* Non-blocking event submission
-* Basic data sanitization (e.g. filtering out values that look like passwords)
-
-
-Client Usage (End-user)
------------------------
-
-Generally, a client consists of three steps to the end user, which should look
-almost identical no matter the language:
-
-1. Creation of the client (sometimes this is hidden to the user)
-
-  ::
-
-      var myClient = new RavenClient('http://public_key:secret_key@example.com/project-id');
-
-2. Capturing an event
-
-  ::
-
-      var $resultId = myClient->captureException($myException);
-
-3. Using the result of an event capture
-
-  ::
-
-      println('Your exception was recorded as %s', $resultId);
-
-The constructor ideally allows several configuration methods. The first argument should
-always be the DSN value (if possible), followed by an optional secondary argument which is
-a map of options::
-
-    client = new RavenClient('http://public_key:secret_key@example.com/project-id', {
-        'tags': {'foo': 'bar'}
-    })
-
-.. note:: If an empty DSN is passed, you should treat it as valid option which signifies disabling the client.
-
-Which options you support is up to you, but ideally you would provide defaults for generic values
-that can be passed to the capture methods.
-
-Once you accept the options, you should output a logging message describing whether the client has been configured
-actively (as in, it will send to the remote server), or if it has been disabled. This should be done with whatever
-standard logging module is available for your platform.
-
-Additionally, you should provide methods (depending on the platform) which allow for capturing of a basic message and
-an exception-type:
-
-* RavenClient::captureMessage(string $message)
-* RavenClient::captureException(exception $exception)
-
-The above methods should also allow optional arguments (or a map of arguments). For example::
-
-    client.captureException(myException, {
-        'tags': {'foo': 'bar'},
-    })
-
-If your platform supports block statements, it is recommend you provide something
-like the following::
-
-    with client.captureExceptions(tags={'foo': 'bar'}):
-        # do something that will cause an error
-        1 / 0
-
-.. note:: In the above example, we're passing any options that would normally be passed to the capture methods along with
-          the block wrapper.
-
-Finally, provide a CLI to test your client's configuration. Python example::
-
-    raven test http://public_key:secret_key@example.com/project-id
-
-Ruby example::
-
-    rake raven:test http://public_key:secret_key@example.com/project-id
-
-Parsing the DSN
----------------
-
-Clients are encouraged to allow arbitrary options via the constructor, but must
-allow the first argument as a DSN string. This string contains the following bits:
-
-::
-
-    '{PROTOCOL}://{PUBLIC_KEY}:{SECRET_KEY}@{HOST}/{PATH}{PROJECT_ID}'
-
-For example, given the following constructor::
-
-    new RavenClient('https://public:secret@example.com/sentry/project-id')
-
-You should parse the following settings:
-
-* URI = 'https://example.com/sentry/'
-* Public Key = 'public'
-* Secret Key = 'secret'
-* Project ID = 'project-id'
-
-If any of these values are not present, the client should notify the user immediately
-that they've misconfigured the client.
-
-The final endpoint you'll be sending requests to is constructed per the following:
-
-::
-
-    '{URI}api/{PROJECT ID}/store/'
-
-So in this case, it would end up as:
-
-::
-
-    'https://example.com/sentry/api/project-id/store/'
-
-
-Building the JSON Packet
-------------------------
-
-The body of the post is a string representation of a JSON object. It is also preferably gzip encoded,
-which also means its expected to be base64-encoded.
-
-For example, with an included Exception event, a basic JSON body might resemble the following::
-
-        {
-            "event_id": "fc6d8c0c43fc4630ad850ee518f1b9d0",
-            "culprit": "my.module.function_name",
-            "timestamp": "2011-05-02T17:41:36",
-            "message": "SyntaxError: Wattttt!",
-            "tags": {
-                "ios_version": "4.0"
-            },
-            "exception": [{
-                "type": "SyntaxError",
-                "value": "Wattttt!",
-                "module": "__builtins__"
-            }]
-        }
-
-The following attributes are required for all events:
-
-.. data:: event_id
-
-    Hexadecimal string representing a uuid4 value.
-
-    Maximum length is 32 characters.
-
-    ::
-
-        {
-            "event_id": "fc6d8c0c43fc4630ad850ee518f1b9d0"
-        }
-
-.. data:: message
-
-    User-readable representation of this event
-
-    Maximum length is 1000 characters.
-
-    ::
-
-        {
-            "message": "SyntaxError: Wattttt!"
-        }
-
-.. data:: timestamp
-
-    Indicates when the logging record was created (in the Sentry client).
-
-    Defaults to ``datetime.datetime.utcnow()``
-
-    The Sentry server assumes the time is in UTC.
-
-    The timestamp should be in ISO 8601 format, without a timezone.
-
-    ::
-
-        {
-            "timestamp": "2011-05-02T17:41:36"
-        }
-
-.. data:: level
-
-    The record severity.
-
-    Defaults to ``error``.
-
-    The value can either be the integer value or the string label
-    as specified in ``SENTRY_LOG_LEVELS``.
-
-    ::
-
-        {
-            "level": "warning"
-        }
-
-    Acceptable values are:
-
-    * fatal
-    * error
-    * warning
-    * info
-    * debug
-
-.. data:: logger
-
-    The name of the logger which created the record.
-
-    If missing, defaults to the string ``root``.
-
-    ::
-
-        {
-            "logger": "my.logger.name"
-        }
-
-Additionally, there are several optional values which Sentry recognizes and are
-highly encouraged:
-
-
-.. data:: platform
-
-    A string representing the platform the client is submitting from. This will
-    be used by the Sentry interface to customize various components in the
-    interface.
-
-    ::
-
-        {
-            "platform": "python"
-        }
-
-
-.. data:: culprit
-
-    Function call which was the primary perpetrator of this event.
-
-    ::
-
-        {
-            "culprit": "my.module.function_name"
-        }
-
-
-.. data:: server_name
-
-    Identifies the host client from which the event was recorded.
-
-    ::
-
-        {
-            "server_name": "foo.example.com"
-        }
-
-
-.. data:: release
-
-    The release version of the application.
-
-    This value will generally be something along the lines of the git SHA for the given project.
-
-    ::
-
-        {
-            "release": "721e41770371db95eee98ca2707686226b993eda"
-        }
-
-
-.. data:: tags
-
-    A map or list of tags for this event.
-
-    ::
-
-        {
-            "tags": {
-                "ios_version": "4.0",
-                "context": "production"
-            }
-        }
-
-    ::
-
-        {
-            "tags": [
-                ["ios_version", "4.0"],
-                ["context", "production"]
-            ]
-        }
-
-.. data:: modules
-
-    A list of relevant modules and their versions.
-
-    ::
-
-        {
-            "modules": {
-                "my.module.name": "1.0"
-            }
-        }
-
-.. data:: extra
-
-    An arbitrary mapping of additional metadata to store with the event.
-
-    ::
-
-        {
-            "extra": {
-                "my_key": 1,
-                "some_other_value": "foo bar"
-            }
-        }
-
-Any additional value is assumed to be a data interface, where the key is the Python path to the interface
-class name, and the value is the data expected by the interface. Interfaces are used in a variety of ways
-including storing stacktraces, HTTP request information, and other metadata.
-
-See :doc:`../interfaces/index` for information on Sentry's builtin interfaces and how to create your own.
-
-Authentication
---------------
-
-An authentication header is expected to be sent along with the message body, which acts as an ownership identifier::
-
-    X-Sentry-Auth: Sentry sentry_version=5,
-    sentry_client=<client version, arbitrary>,
-    sentry_timestamp=<current timestamp>,
-    sentry_key=<public api key>,
-    sentry_secret=<secret api key>
-
-.. note:: You should include the client version string in the User-Agent portion of the header, and it will be used if
-          sentry_client is not sent in the auth header.
-
-.. data:: sentry_version
-
-    The protocol version. This should be sent as the value '5'.
-
-.. data:: sentry_client
-
-    An arbitrary string which identifies your client, including its version.
-
-    The typical pattern for this is '**client_name**/**client_version**'.
-
-    For example, the Python client might send this as 'raven-python/1.0'.
-
-.. data:: sentry_timestamp
-
-    The unix timestamp representing the time at which this event was generated.
-
-.. data:: sentry_key
-
-    The public key which should be provided as part of the client configuration.
-
-.. data:: sentry_secret
-
-    The secret key which should be provided as part of the client configuration.
-
-    .. note:: You should only pass the secret key if you're communicating via
-              secure communication to the server. Client-side behavior (such
-              as JavaScript) should use CORS, and only pass the public key.
-
-crossdomain.xml
-~~~~~~~~~~~~~~~
-
-Cross domain requests from flash are supported within the API by specifying sub-policy, which is located at
-`/api/<project id>/crossdomain.xml`.
-
-A Working Example
------------------
-
-When all is said and done, you should be sending an HTTP POST request to a Sentry webserver, where
-the path is the BASE_URI/api/PROJECT_ID/store/. So given the following DSN::
-
-    https://b70a31b3510c4cf793964a185cfe1fd0:b7d80b520139450f903720eb7991bf3d@example.com/1
-
-The request body should then somewhat resemble the following::
-
-    POST /api/project-id/store/
-    User-Agent: raven-python/1.0
-    X-Sentry-Auth: Sentry sentry_version=5, sentry_timestamp=1329096377,
-        sentry_key=b70a31b3510c4cf793964a185cfe1fd0, sentry_client=raven-python/1.0,
-        sentry_secret=b7d80b520139450f903720eb7991bf3d
-
-    {
-        "event_id": "fc6d8c0c43fc4630ad850ee518f1b9d0",
-        "culprit": "my.module.function_name",
-        "timestamp": "2011-05-02T17:41:36",
-        "message": "SyntaxError: Wattttt!",
-        "exception": [{
-            "type": "SyntaxError",
-            "value": "Wattttt!",
-            "module": "__builtins__"
-        }]
-    }
-
-Reading the Response
---------------------
-
-If you're using HTTP, you'll receive a response from the server. The response
-looks something like this:
-
-::
-
-    HTTP/1.1 200 OK
-    Content-Type: application/json
-
-    {
-        "id": "fc6d8c0c43fc4630ad850ee518f1b9d0"
-    }
-
-One thing to take note of is the response status code. Sentry uses this in a
-variety of ways. You'll **always** want to check for a 200 response if you want
-to ensure that the message was delivered, as a small level of validation
-happens immediately that may result in a different response code (and message).
-
-For example, you might get something like this:
-
-::
-
-
-    HTTP/1.1 400 Bad Request
-    X-Sentry-Error: Client request error: Missing client version identifier
-
-    Client request error: Missing client version identifier
-
-
-.. note:: The X-Sentry-Error header will always be present with the precise
-          error message and it is the preferred way to identify the root cause.
-
-          If it's not available, it's likely the request was not handled by the
-          API server, or a critical system failure has occurred.
-
-Handling Failures
------------------
-
-It is **highly encouraged** that your client handles failures from the Sentry server gracefully. This means taking
-care of several key things:
-
-* Soft failures when the Sentry server fails to respond in a reasonable amount of time (e.g. 3s)
-* Exponential backoff when Sentry fails (don't continue trying if the server is offline)
-* Failover to a standard logging module on errors.
-
-For example, the Python client will log any failed requests to the Sentry server to a named logger, ``sentry.errors``.
-It will also only retry every few seconds, based on how many consecutive failures its seen. The code for this is simple::
-
-    def should_try(self):
-        if self.status == self.ONLINE:
-            return True
-
-        interval = min(self.retry_number, 6) ** 2
-
-        if time.time() - self.last_check > interval:
-            return True
-
-        return False
-
-Scrubbing Data
---------------
-
-Clients should provide some mechanism for scrubbing data. Ideally through an extensible interface that the user
-can customize the behavior of.
-
-This is generally done as part of the client configuration::
-
-    client = Client(..., {
-        'processors': ['processor.className'],
-    })
-
-Each processor listed would be some sort of extensible class or a function callback. It would have a single designated
-method that is passed the data (after it's been populated), and would then return the data fully intact, or modified
-with various bits filtered out.
-
-For example, if you simply supported callbacks for processors, it might look like this::
-
-    function my_processor($data) {
-        foreach ($data['extra'] as $key => $value) {
-            if (strpos($value, 'password')) {
-                $data[$key] = '********';
-            }
-        }
-    }
-
-We recommend scrubbing the following values::
-
-* Values where the keyname matches 'password', 'passwd', or 'secret'.
-* Values that match the regular expression of ``r'^(?:\d[ -]*?){13,16}$'`` (credit card-like).
-* Session cookies.
-* The Authentication header (HTTP).
-
-Keep in mind, that if your client is passing extra interface data (e.g. HTTP POST variables) you will also
-want to scrub those interfaces. Given that, it is a good idea to simply recursively scrub most variables
-other than predefined things (like HTTP headers).
-
-Tags
-----
-
-Tags are key/value pairs that describe an event. They should be configurable in the following contexts:
-
-* Environment (client-level)
-* Thread (block-level)
-* Event (as part of capture)
-
-Each of these should inherit its parent. So for example, if you configure your client as so::
-
-    client = Client(..., {
-        'tags': {'foo': 'bar'},
-    })
-
-And then you capture an event::
-
-    client.captureMessage('test', {
-        'tags': {'foo': 'baz'},
-    })
-
-The client should send the following upstream for ``tags``::
-
-    {
-        "tags": [
-            ["foo", "bar"],
-            ["foo", "baz"]
-        ],
-    }
-
-You should also provide relevant contextual interfaces. These should last for the lifecycle of a request, and the general interface is "bind some kind of context", and then at the end of a request lifecycle, clear any present context.
-
-This interface consists of \*_context methods, as well as a "clear context" method. The following is an example API which is implemented in most clients:
-
-::
-
-    # Bind sentry.interfaces.User
-    client.user_context({
-        'email': 'foo@example.com',
-    })
-
-    # Merge in additional tag context
-    client.tags_context({
-        'key': 'value',
-    })
-
-    # Merge in additional extra context
-    client.extra_context({
-        'key': 'value',
-    })
-
-    # Clear context
-    client.context.clear()
-
-Some additional examples of context helpers which might be relevant:
-
-- http_context(data) -- bind sentry.interfaces.Http
-- wsgi_context(env) -- bind http_context based on a wsgi environment
-
-
-Variable Size
--------------
-
-Most arbitrary values in Sentry have their size restricted. This means any
-values that are sent as metadata (such as variables in a stacktrace) as well
-as things like extra data, or tags.
-
-- Mappings of values (such as HTTP data, extra data, etc) are limited to 50
-  item pairs.
-- Event IDs are limited to 32 characters.
-- Tag keys are limited to 32 characters.
-- Tag values are limited to 200 characters.
-- Culprits are limited to 200 characters.
-- Most contextual variables are limited to 512 characters.
-- Extra contextual data is limited to 4096 characters.
-- Messages are limited to ~10kb.
-- Http data (the body) is limited to 2048 characters.
-- Stacktrace's are limited to 50 frames. If more are sent, data will be removed from the middle of the stack.
diff --git a/docs/developer/interfaces/index.rst b/docs/developer/interfaces/index.rst
deleted file mode 100644
index 7cba14a211..0000000000
--- a/docs/developer/interfaces/index.rst
+++ /dev/null
@@ -1,51 +0,0 @@
-Interfaces
-==========
-
-Sentry implements data interfaces for storing structured data. At its core, an interface describes what it's storing, and optionally how its data should be rendered.
-
-Within the client, interfaces are referenced by their full Python module path. For example, if you were sending data
-for the ``sentry.interfaces.Message`` class, it would look like this in your JSON packet::
-
-    {
-        // etc.
-        "message": "Hello world"
-        "sentry.interfaces.Message": {
-            "message": "Hello world"
-        }
-    }
-
-Aliases
--------
-
-As of protocol version 4, most built-in interface types are aliases for easier
-reference. For example, instead of using the key 'sentry.interfaces.Exception',
-you can send the key 'exception'.
-
-The mapping is as follows::
-
-* 'exception' => 'sentry.interfaces.Exception'
-* 'logentry' => 'sentry.interfaces.Message'
-* 'request' => 'sentry.interfaces.Http'
-* 'stacktrace' => 'sentry.interfaces.Stacktrace'
-* 'template' => 'sentry.interfaces.Template'
-* 'query' => 'sentry.interfaces.Query'
-* 'user' => 'sentry.interfaces.User'
-
-For the canonical names, please see the ``get_path`` method on each individual Interface.
-
-Provided Interfaces
--------------------
-
-.. autoclass:: sentry.interfaces.message.Message
-
-.. autoclass:: sentry.interfaces.exception.Exception
-
-.. autoclass:: sentry.interfaces.stacktrace.Stacktrace
-
-.. autoclass:: sentry.interfaces.template.Template
-
-.. autoclass:: sentry.interfaces.http.Http
-
-.. autoclass:: sentry.interfaces.user.User
-
-.. autoclass:: sentry.interfaces.query.Query
diff --git a/docs/developer/plugins/index.rst b/docs/developer/plugins/index.rst
deleted file mode 100644
index 6e090fa62a..0000000000
--- a/docs/developer/plugins/index.rst
+++ /dev/null
@@ -1,93 +0,0 @@
-Writing a Plugin
-================
-
-**The plugin interface is a work in progress.**
-
-Several interfaces exist for extending Sentry:
-
-* Event Filters (sentry.filters)
-* Data Interfaces (sentry.interfaces)
-* Plugins (sentry.plugins)
-
-Until we get sample docs up, it's suggested that you review the builtin plugins
-and the base classes to understand how the system works.
-
-One thing to note, is that all extended methods (outside of data interfaces) should
-accept ``**kwargs`` to handle future changes.
-
-Structure
----------
-
-A plugins layout generally looks like the following::
-
-    setup.py
-    sentry_pluginname/
-    sentry_pluginname/__init__.py
-    sentry_pluginname/plugin.py
-
-The ``__init__.py`` file should contain no plugin logic, and at most, a VERSION = 'x.x.x' line. For example,
-if you want to pull the version using pkg_resources (which is what we recommend), your file might contain::
-
-    try:
-        VERSION = __import__('pkg_resources') \
-            .get_distribution(__name__).version
-    except Exception, e:
-        VERSION = 'unknown'
-
-Inside of ``plugin.py``, you'll declare your Plugin class::
-
-    import sentry_pluginname
-    from sentry.plugins import Plugin
-
-    class PluginName(Plugin):
-        title = 'Plugin Name'
-        slug = 'pluginname'
-        description = 'My awesome plugin!'
-        version = sentry_pluginname.VERSION
-
-        author = 'Your Name'
-        author_url = 'https://github.com/yourname/sentry_pluginname'
-
-        def widget(self, request, group, **kwargs):
-            return "<p>Absolutely useless widget</p>"
-
-And you'll register it via ``entry_points`` in your ``setup.py``::
-
-    setup(
-        # ...
-        entry_points={
-           'sentry.plugins': [
-                'pluginname = sentry_pluginname.plugin:PluginName'
-            ],
-        },
-    )
-
-If you're using models or templates, you'll also want to include the ``sentry.apps`` entry point to ensure full
-registration of your app::
-
-    setup(
-        # ...
-        entry_points={
-           'sentry.apps': [
-                'pluginname = sentry_pluginname'
-            ],
-        },
-    )
-
-That's it! Users will be able to install your plugin via ``pip install <package name>`` and configure it
-via the web interface based on the hooks you enable.
-
-Next Steps
-----------
-
-Dig into the rest of the plugin documentation, and take a look at existing plugins for ideas/best practices.
-
-.. toctree::
-   :maxdepth: 1
-
-   v1interface
-   v2interface
-   permissions
-   testing
-
-More and better docs coming soon..
diff --git a/docs/developer/plugins/permissions.rst b/docs/developer/plugins/permissions.rst
deleted file mode 100644
index 79716a2691..0000000000
--- a/docs/developer/plugins/permissions.rst
+++ /dev/null
@@ -1,69 +0,0 @@
-Permissions
-===========
-
-As described in the plugin interface, Sentry provides a large suite of permissions which all fire through the
-``has_perm`` extension point.
-
-In most cases, a superuser (that is, if User.is_superuser is ``True``), will be granted implicit permissions
-on everything. Additionally, several cases provide overrides via Django's standard permission system. All
-permissions are also bound to some level of inherent permission logic, such as projects only being editable
-by someone who has some level of control on that project.
-
-This page attempts to describe those permissions, and the contextual objects along with them.
-
-.. data:: add_project
-
-         Controls whether a user can create a new project.
-
-         ::
-
-            >>> has_perm('add_project', user)
-
-.. data:: edit_project
-
-         Controls whether a user can edit an existing project.
-
-         ::
-
-            >>> has_perm('edit_project', user, project)
-
-.. data:: remove_project
-
-         Controls whether a user can remove an existing project.
-
-         ::
-
-            >>> has_perm('remove_project', user, project)
-
-.. data:: add_project_member
-
-         Controls whether a user can add a new member to a project.
-
-         ::
-
-            >>> has_perm('add_project_member', user, project)
-
-.. data:: edit_project_member
-
-         Controls whether a user can edit an existing member on a project.
-
-         ::
-
-            >>> has_perm('edit_project_member', user, member)
-
-.. data:: remove_project_member
-
-         Controls whether a user can remove an existing member on a project.
-
-         ::
-
-            >>> has_perm('remove_project_member', user, member)
-
-
-.. data:: create_event
-
-         Controls whether a user can create an event on a project (via the API).
-
-         ::
-
-            >>> has_perm('create_event', user, project)
\ No newline at end of file
diff --git a/docs/developer/plugins/testing.rst b/docs/developer/plugins/testing.rst
deleted file mode 100644
index aa7a0b9cca..0000000000
--- a/docs/developer/plugins/testing.rst
+++ /dev/null
@@ -1,71 +0,0 @@
-Testing
-=======
-
-Sentry provides a basic py.test-based testing framework for extensions.
-
-.. versionadded:: 7.2.0
-
-In a simple project, you'll need to do a few things to get it working:
-
-setup.py
---------
-
-Augment your setup.py to ensure at least the following:
-
-.. code-block:: python
-
-   setup(
-       # ...
-      install_requires=[
-          'sentry>=7.2.0',
-      ]
-   )
-
-
-conftest.py
------------
-
-The ``conftest.py`` file is our main entry-point for py.test. We need to configure it to load the Sentry pytest configuration:
-
-.. code-block:: python
-
-   from __future__ import absolute_import
-
-   pytest_plugins = [
-       'sentry.utils.pytest'
-   ]
-
-
-Test Cases
-----------
-
-You can now inherit from Sentry's core test classes. These are Django-based and ensure the database and other basic utilities are in a clean state:
-
-.. code-block:: python
-
-   # test_myextension.py
-   from __future__ import absolute_import
-
-   from sentry.testutils import TestCase
-
-   class MyExtensionTest(TestCase):
-       def test_simple(self):
-          assert 1 != 2
-
-
-Running Tests
--------------
-
-Running tests follows the py.test standard. As long as your test files and methods are named appropriately (``test_filename.py`` and ``test_function()``) you can simply call out to py.test:
-
-::
-
-    $ py.test -v
-    ============================== test session starts ==============================
-    platform darwin -- Python 2.7.9 -- py-1.4.26 -- pytest-2.6.4/python2.7
-    plugins: django
-    collected 1 items
-
-    tests/test_myextension.py::MyExtensionTest::test_simple PASSED
-
-    =========================== 1 passed in 0.35 seconds ============================
diff --git a/docs/developer/plugins/v1interface.rst b/docs/developer/plugins/v1interface.rst
deleted file mode 100644
index 7958ebe0e8..0000000000
--- a/docs/developer/plugins/v1interface.rst
+++ /dev/null
@@ -1,7 +0,0 @@
-Plugin Interface (v1)
-=====================
-
-This document describes version 1 of Plugin API Interface. If you're working on a new plugin you should transition to version 2.
-
-.. autoclass:: sentry.plugins.base.v1.IPlugin
-   :members:
diff --git a/docs/developer/plugins/v2interface.rst b/docs/developer/plugins/v2interface.rst
deleted file mode 100644
index 9ac5a1b0cf..0000000000
--- a/docs/developer/plugins/v2interface.rst
+++ /dev/null
@@ -1,11 +0,0 @@
-Plugin Interface (v2)
-=====================
-
-This document describes version 2 of Plugin API Interface.
-
-.. versionadded:: 7.1.0
-
-.. note:: Version 2 of the plugin interface is under active development. If there's a feature you'd like to see consider `opening a ticket <https://github.com/getsentry/sentry/issues>`_ or submitting a pull request.
-
-.. autoclass:: sentry.plugins.base.v2.IPlugin2
-   :members:
diff --git a/docs/faq.rst b/docs/faq.rst
new file mode 100644
index 0000000000..86f1f3be67
--- /dev/null
+++ b/docs/faq.rst
@@ -0,0 +1,71 @@
+Frequently Asked Questions
+==========================
+
+Common Problems
+---------------
+
+My sentry is running at **example.com:9000** but whenever I visit it I get
+redirected to **example.com**.
+
+    You likely have not correctly configured **SENTRY_URL_PREFIX**. See
+    :doc:`config` for more information.
+
+AJAX requests do not seem to work properly.
+
+    It's likely you have not correctly configured **SENTRY_URL_PREFIX**, so
+    you're hitting CORS issues. . See :doc:`config` for more information.
+
+The client reports success (200 OK) but I don't see events
+
+    Something is misconfigured. A 200 OK from the API means "I have
+    validated and enqueued this event", so the first thing you should check
+    is your workers.
+
+Counts on events aren't increasing.
+
+    Counts are incremented in bulk asyncrhonously utilizing the buffer and
+    queue subsystems. Check your configuration on those.
+
+
+How do I
+--------
+
+... script the Sentry installation to bootstrap things like projects and users?
+
+    Sentry is a simple Django (Python) application that runs using a utility
+    runner. A script that creates a project and default user might look something
+    like this::
+
+        # Bootstrap the Sentry environment
+        from sentry.utils.runner import configure
+        configure()
+
+        # Do something crazy
+        from sentry.models import Team, Project, ProjectKey, User, Organization
+
+        user = User()
+        user.username = 'admin'
+        user.email = 'admin@localhost'
+        user.is_superuser = True
+        user.set_password('admin')
+        user.save()
+
+        organization = Organization()
+        organization.name = 'MyOrg'
+        organization.owner = user
+        organization.save()
+
+        team = Team()
+        team.name = 'Sentry'
+        team.organization = organization
+        team.owner = user
+        team.save()
+
+        project = Project()
+        project.team = team
+        project.name = 'Default'
+        project.organization = organization
+        project.save()
+
+        key = ProjectKey.objects.filter(project=project)[0]
+        print 'SENTRY_DSN = "%s"' % (key.get_dsn(),)
diff --git a/docs/faq/index.rst b/docs/faq/index.rst
deleted file mode 100644
index 2a479604c9..0000000000
--- a/docs/faq/index.rst
+++ /dev/null
@@ -1,64 +0,0 @@
-Frequently Asked Questions
-==========================
-
-Common Problems
----------------
-
-My sentry is running at **example.com:9000** but whenever I visit it I get redirected to **example.com**
-  You likely have not correctly configured **SENTRY_URL_PREFIX**. See
-  :doc:`../config/index` for more information.
-
-AJAX requests do not seem to work properly
-  It's likely you have not correctly configured **SENTRY_URL_PREFIX**, so
-  you're hitting CORS issues. . See :doc:`../config/index` for more information.
-
-The client reports success (200 OK) but I don't see events
-  Something is misconfigured. A 200 OK from the API means "I have validated and enqueued this event", so
-  the first thing you should check is your workers.
-
-Counts on events aren't increasing
-  Counts are incremented in bulk asyncrhonously utilizing the buffer and queue subsystems. Check your configuration on those.
-
-
-How do I
---------
-
-... script the Sentry installation to bootstrap things like projects and users?
-  Sentry is a simple Django (Python) application that runs using a utility
-  runner. A script that creates a project and default user might look something
-  like this:
-
-  .. code-block:: python
-
-     # Bootstrap the Sentry environment
-     from sentry.utils.runner import configure
-     configure()
-
-     # Do something crazy
-     from sentry.models import Team, Project, ProjectKey, User, Organization
-
-     user = User()
-     user.username = 'admin'
-     user.email = 'admin@localhost'
-     user.is_superuser = True
-     user.set_password('admin')
-     user.save()
-
-     organization = Organization()
-     organization.name = 'MyOrg'
-     organization.owner = user
-     organization.save()
-
-     team = Team()
-     team.name = 'Sentry'
-     team.organization = organization
-     team.save()
-
-     project = Project()
-     project.team = team
-     project.name = 'Default'
-     project.organization = organization
-     project.save()
-
-     key = ProjectKey.objects.filter(project=project)[0]
-     print 'SENTRY_DSN = "%s"' % (key.get_dsn(),)
diff --git a/docs/getting-started/index.rst b/docs/getting-started/index.rst
deleted file mode 100644
index a01539f209..0000000000
--- a/docs/getting-started/index.rst
+++ /dev/null
@@ -1,420 +0,0 @@
-Getting Started
-===============
-
-This guide will step you through setting up a Python-based virtualenv, installing the required packages,
-and configuring the basic web service.
-
-Disclaimer: While Sentry is seemingly easy to get up and running, it's a fairly complex system. This documentation does not intend to teach you how to maintain and configure many of the services, and the task should not be taken lightly.
-
-Dependencies
-------------
-
-Some basic prerequisites which you'll need in order to run Sentry:
-
-* A UNIX-based operating system. We test on Ubuntu.
-* Python 2.7
-* python-setuptools, python-pip, python-dev, libxslt1-dev, libxml2-dev, libz-dev, libffi-dev, libssl-dev
-* A real database (PostgreSQL)
-* Redis (2.6.12 or newer)
-* Nginx (with RealIP, i.e. nginx-full)
-* A dedicated domain to host Sentry on (i.e. sentry.yourcompany.com).
-
-Hardware
---------
-
-Sentry provides a number of mechanisms to scale its capacity out horizontally, however there is still a primary
-SPOF at the database level. In an HA setup, the database is only utilized for event indexing and basic data
-storage, and becomes much less of a capacity concern (see also :doc:`../nodestore/index`).
-
-We don't have any real numbers to tell you what kind of hardware you're going to need, but we'll help you make
-your decision based on existing usage from real customers.
-
-If you're looking for an HA, and high throughput setup, you're going to need to setup a fairly complex cluster
-of machines, and utilize all of Sentry's advanced configuration options. This means you'll need Postgres, Riak,
-Redis, Memcached, and RabbitMQ. It's very rare you'd need this complex of a cluster, and the primary usecase for
-this is `getsentry.com <https://getsentry.com/>`_.
-
-For more typical, but still fairly high throughput setups, you can run off of a single machine as long as it has
-reasonable IO (ideally SSDs), and a good amount of memory.
-
-The main things you need to consider are:
-
-- TTL on events (how long do you need to keep historical data around)
-- Average event throughput
-- How many events get grouped together (which means they get sampled)
-
-At a point, getsentry.com was processing approximately 4 million events a day. A majority of this data is stored
-for 90 days, which accounted for around 1.5TB of SSDs. Web and worker nodes were commodity (8GB-12GB RAM, cheap
-SATA drives, 8 cores), the only two additional nodes were a dedicated RabbitMQ and Postgres instance (both on SSDs,
-12GB-24GB of memory). In theory, given a single high-memory machine, with 16+ cores, and SSDs, you could handle
-the entirety of the given data set.
-
-Setting up an Environment
--------------------------
-
-The first thing you'll need is the Python ``virtualenv`` package. You probably already
-have this, but if not, you can install it with::
-
-  pip install -U virtualenv
-
-Once that's done, choose a location for the environment, and create it with the ``virtualenv``
-command. For our guide, we're going to choose ``/www/sentry/``::
-
-  virtualenv /www/sentry/
-
-Finally, activate your virtualenv::
-
-  source /www/sentry/bin/activate
-
-.. note:: Activating the environment adjusts your PATH, so that things like pip now
-          install into the virtualenv by default.
-
-Install Sentry
---------------
-
-Once you've got the environment setup, you can install Sentry and all its dependencies with
-the same command you used to grab virtualenv::
-
-  pip install -U sentry
-
-Don't be worried by the amount of dependencies Sentry has. We have a philosophy of using the right tools for
-the job, and not reinventing them if they already exist.
-
-Once everything's installed, you should be able to execute the Sentry CLI, via ``sentry``, and get something
-like the following:
-
-.. code-block:: bash
-
-  $ sentry
-  usage: [SENTRY_CONF=/path/to/settings.py] sentry [command] [options]
-
-
-Using MySQL or Postgres
-~~~~~~~~~~~~~~~~~~~~~~~
-
-We **highly** recommend using PostgreSQL for your database. The default database is sqlite and is only intended
-for Sentry's development environment. MySQL will work with various caveats (you should use InnoDB, for one), but
-is not officially supported by the Sentry team.
-
-These databases require additional packages, but Sentry provides a couple of meta packages to make things easier:
-
-::
-
-  # install sentry and its postgresql dependencies
-  pip install -U sentry[postgres]
-
-  # or if you choose, mysql
-  pip install -U sentry[mysql]
-
-
-Installing from Source
-~~~~~~~~~~~~~~~~~~~~~~
-
-If you're installing the Sentry source (e.g. from git), you'll also need to install **npm**.
-
-Once your system is prepared, symlink your source into the virtualenv:
-
-.. code-block:: bash
-
-  $ python setup.py develop
-
-.. Note:: This command will install npm dependencies as well as compile static assets.
-
-
-Initializing the Configuration
-------------------------------
-
-Now you'll need to create the default configuration. To do this, you'll use the ``init`` command
-You can specify an alternative configuration path as the argument to init, otherwise it will use
-the default of ``~/.sentry/sentry.conf.py``.
-
-::
-
-    # the path is optional
-    sentry init /etc/sentry.conf.py
-
-The configuration for the server is based on ``sentry.conf.server``, which contains a basic Django project
-configuration, as well as the default Sentry configuration values. It defaults to SQLite, however **SQLite
-is not a fully supported database and should not be used in production**.
-
-::
-
-    # ~/.sentry/sentry.conf.py
-
-    # for more information on DATABASES, see the Django configuration at:
-    # https://docs.djangoproject.com/en/1.6/ref/databases/
-    DATABASES = {
-        'default': {
-            # We suggest PostgreSQL for optimal performance
-            'ENGINE': 'sentry.db.postgres',
-
-            # Alternatively you can use MySQL
-            'ENGINE': 'django.db.backends.mysql',
-
-            'NAME': 'sentry',
-            'USER': 'postgres',
-            'PASSWORD': '',
-            'HOST': '',
-            'PORT': '',
-        }
-    }
-
-    # No trailing slash!
-    SENTRY_URL_PREFIX = 'http://sentry.example.com'
-
-    SENTRY_WEB_HOST = '0.0.0.0'
-    SENTRY_WEB_PORT = 9000
-    SENTRY_WEB_OPTIONS = {
-        'workers': 3,  # the number of gunicorn workers
-        'secure_scheme_headers': {'X-FORWARDED-PROTO': 'https'},  # detect HTTPS mode from X-Forwarded-Proto header
-    }
-
-
-Configure Redis
----------------
-
-Redis is used as the default implementation for various backend services, including the time-series
-storage, SQL update buffers, and rate limiting.
-
-We recommend running two separate Redis clusters: one for persistent data (TSDB) and one for temporal
-data (buffers, rate limits). This is because you can configure the nodes in very different ones to
-enable more aggressive/optimized LRU.
-
-That said, if you're running a small install you can probably get away with just setting up the defaults:
-
-::
-
-    SENTRY_REDIS_OPTIONS = {
-        'hosts': {
-            0: {
-                'host': '127.0.0.1',
-                'port': 6379,
-                'timeout': 3,
-                #'password': 'redis auth password'
-            }
-        }
-    }
-
-All built-in Redis implementations (other than the queue) will use these default settings, but each
-individual service also will allow you to override it's cluster settings.
-
-See the individual documentation for :doc:`the queue <../queue/index>`, :doc:`update buffers <../buffer/index>`,
-:doc:`quotas <../throttling/index>`, and :doc:`time-series storage <../tsdb/index>` for more details.
-
-Configure Outbound Mail
------------------------
-
-Several settings exist as part of the Django framework which will configure your outbound mail server. For the
-standard implementation, using a simple SMTP server, you can simply configure the following:
-
-.. code-block:: python
-
-    EMAIL_HOST = 'localhost'
-    EMAIL_HOST_PASSWORD = ''
-    EMAIL_HOST_USER = ''
-    EMAIL_PORT = 25
-    EMAIL_USE_TLS = False
-
-Being that Django is a pluggable framework, you also have the ability to specify different mail backends. See the
-`official Django documentation <https://docs.djangoproject.com/en/1.3/topics/email/?from=olddocs#email-backends>`_ for
-more information on alternative backends.
-
-Running Migrations
-------------------
-
-Sentry provides an easy way to run migrations on the database on version upgrades. Before running it for
-the first time you'll need to make sure you've created the database:
-
-.. code-block:: bash
-
-    # If you're using Postgres, and kept the database ``NAME`` as ``sentry``
-    $ createdb -E utf-8 sentry
-
-    # alternatively if you're using MySQL, ensure you've created the database:
-    $ mysql -e 'create database sentry'
-
-Once done, you can create the initial schema using the ``upgrade`` command:
-
-.. code-block:: python
-
-    $ SENTRY_CONF=/etc/sentry.conf.py sentry upgrade
-
-Next up you'll need to create the first user, which will act as a superuser:
-
-.. code-block:: bash
-
-    # create a new user
-    $ SENTRY_CONF=/etc/sentry.conf.py sentry createuser
-
-All schema changes and database upgrades are handled via the ``upgrade`` command, and this is the first
-thing you'll want to run when upgrading to future versions of Sentry.
-
-.. note:: Internally, this uses `South <http://south.aeracode.org>`_ to manage database migrations.
-
-Starting the Web Service
-------------------------
-
-Sentry provides a built-in webserver (powered by gunicorn and eventlet) to get you off the ground quickly,
-also you can setup Sentry as WSGI application, in that case skip to section `Running Sentry as WSGI application`.
-
-To start the webserver, you simply use ``sentry start``. If you opted to use an alternative configuration path
-you can pass that via the SENTRY_CONF parameter.
-
-::
-
-  # Sentry's server runs on port 9000 by default. Make sure your client reflects
-  # the correct host and port!
-  $ SENTRY_CONF=/etc/sentry.conf.py sentry start
-
-You should now be able to test the web service by visiting `http://localhost:9000/`.
-
-.. note:: This doesn't run any workers in the background, so assuming queueing is enabled (default in 7.0.0+)
-          no asynchronous tasks will be running.
-
-Starting the Workers
---------------------
-
-A large amount of Sentry's work is typically done via it's workers. While Sentry will seemingly work without
-using a queue you will not actually see anything show up in Sentry.  Once you've configured the queue, you'll
-also need to run workers. Generally, this is as simple as running "celery" from the Sentry CLI.
-
-So do not forget to run the workers!
-
-::
-
-  $ SENTRY_CONF=/etc/sentry.conf.py sentry celery worker -B
-
-Technically there is a way to run sentry without the queues by setting ``CELERY_ALWAYS_EAGER`` to `True`
-but this is heavily discouraged and not supported.
-
-.. note:: `Celery <http://celeryproject.org/>`_ is an open source task framework for Python.
-
-Setup a Reverse Proxy
----------------------
-
-By default, Sentry runs on port 9000. Even if you change this, under normal conditions you won't be able to bind to
-port 80. To get around this (and to avoid running Sentry as a privileged user, which you shouldn't), we recommend
-you setup a simple web proxy.
-
-Proxying with Apache
-~~~~~~~~~~~~~~~~~~~~
-
-Apache requires the use of mod_proxy for forwarding requests::
-
-    ProxyPass / http://localhost:9000/
-    ProxyPassReverse / http://localhost:9000/
-    ProxyPreserveHost On
-    RequestHeader set X-Forwarded-Proto "https" env=HTTPS
-
-You will need to enable ``headers``, ``proxy``, and ``proxy_http`` apache modules to use these settings.
-
-Proxying with Nginx
-~~~~~~~~~~~~~~~~~~~
-
-You'll use the builtin HttpProxyModule within Nginx to handle proxying::
-
-    location / {
-      proxy_pass         http://localhost:9000;
-      proxy_redirect     off;
-
-      proxy_set_header   Host              $host;
-      proxy_set_header   X-Real-IP         $remote_addr;
-      proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
-      proxy_set_header   X-Forwarded-Proto $scheme;
-    }
-
-See :doc:`nginx` for more details on using Nginx.
-
-Enabling SSL
-~~~~~~~~~~~~~
-
-If you are planning to use SSL, you will also need to ensure that you've
-enabled detection within the reverse proxy (see the instructions above), as
-well as within the Sentry configuration:
-
-.. code-block:: python
-
-    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
-    SESSION_COOKIE_SECURE = True
-
-Running Sentry as a Service
----------------------------
-
-We recommend using whatever software you are most familiar with for managing Sentry processes. For us, that software
-of choice is `Supervisor <http://supervisord.org/>`_.
-
-Configure ``supervisord``
-~~~~~~~~~~~~~~~~~~~~~~~~~
-
-Configuring Supervisor couldn't be more simple. Just point it to the ``sentry`` executable in your virtualenv's bin/
-folder and you're good to go.
-
-::
-
-  [program:sentry-web]
-  directory=/www/sentry/
-  command=/www/sentry/bin/sentry start
-  autostart=true
-  autorestart=true
-  redirect_stderr=true
-  stdout_logfile=syslog
-  stderr_logfile=syslog
-
-  [program:sentry-worker]
-  directory=/www/sentry/
-  command=/www/sentry/bin/sentry celery worker -B
-  autostart=true
-  autorestart=true
-  redirect_stderr=true
-  stdout_logfile=syslog
-  stderr_logfile=syslog
-
-
-Removing Old Data
------------------
-
-One of the most important things you're going to need to be aware of is storage costs. You'll want to setup a cron job that runs to automatically trim stale data. This won't guarantee space is reclaimed (i.e. by SQL), but it will try to minimize the footprint. This task is designed to run under various environments so it doesn't delete things in the most optimal way possible, but as long as you run it routinely (i.e. daily) you should be fine.
-
-.. code-block:: bash
-
-  $ crontab -e
-  0 3 * * * sentry cleanup --days=30
-
-
-Additional Utilities
---------------------
-
-If you're familiar with Python you'll quickly find yourself at home, and even more so if you've used Django. The
-``sentry`` command is just a simple wrapper around Django's ``django-admin.py``, which means you get all of the
-power and flexibility that goes with it.
-
-Some of those which you'll likely find useful are:
-
-createuser
-~~~~~~~~~~
-
-Quick and easy creation of superusers. These users have full access to the entirety of the Sentry server.
-
-runserver
-~~~~~~~~~
-
-Testing Sentry locally? Spin up Django's builtin runserver (or ``pip install django-devserver`` for something
-slightly better).
-
-
-What's Next?
-------------
-
-There are several applications you may want to add to the default Sentry install for various security or other uses. This
-is a bit outside of the scope of normal (locked down) installs, as typically you'll host things on your internal network. That
-said, you'll first need to understand how you can modify the default settings.
-
-First pop open your ``sentry.conf.py``, and add the following to the **very top** of the file:
-
-.. code-block:: python
-
-  from sentry.conf.server import *
-
-Now you'll have access to all of the default settings (Django and Sentry) to modify at your own will.
-
-We recommend going over all of the defaults in the generated settings file, and familiarizing yourself with how the system is setup.
diff --git a/docs/images/dashboard.png b/docs/images/dashboard.png
deleted file mode 100644
index 6f89c68a08..0000000000
Binary files a/docs/images/dashboard.png and /dev/null differ
diff --git a/docs/images/event.png b/docs/images/event.png
deleted file mode 100644
index 37f10d95b4..0000000000
Binary files a/docs/images/event.png and /dev/null differ
diff --git a/docs/images/group_list.png b/docs/images/group_list.png
deleted file mode 100644
index e8afa11412..0000000000
Binary files a/docs/images/group_list.png and /dev/null differ
diff --git a/docs/inbound-mail.rst b/docs/inbound-mail.rst
new file mode 100644
index 0000000000..c412d9c175
--- /dev/null
+++ b/docs/inbound-mail.rst
@@ -0,0 +1,111 @@
+Inbound Mail
+============
+
+Sentry provides support for handling incoming email in various situations.
+Currently it only supports processing replies to error and note
+notifications.
+
+For configuration you can pick from different backends.
+
+
+Inbound Email via Mailgun
+-------------------------
+
+.. versionadded:: 7.2.0
+
+Start by choosing a domain to handle inbound email. We find it easiest if
+you maintain a separate domain from anything else. In our example, we're
+going to choose ``inbound.sentry.example.com``. You'll need to configure
+your DNS records for the given domain according to the Mailgun
+documentation.
+
+Create a new route in mailgun::
+
+    Priority:
+      0
+    Filter Expression:
+      catch_all()
+    Actions:
+      forward("https://sentry.example.com/api/hooks/mailgun/inbound/")
+    Description:
+      Sentry inbound handler
+
+Configure Sentry with the appropriate settings::
+
+    # Your Mailgun API key (used to verify incoming webhooks)
+    MAILGUN_API_KEY = ''
+
+    # Set the SMTP hostname to your configured inbound domain
+    SENTRY_SMTP_HOSTNAME = 'inbound.sentry.example.com'
+
+    # Inform Sentry to send the appropriate mail headers to enable
+    # incoming replies
+    SENTRY_ENABLE_EMAIL_REPLIES = True
+
+
+That's it! You'll now be able to respond to activity notifications on
+errors via your email client.
+
+
+.. _nginx-mail:
+
+Inbound Email via Nginx
+-----------------------
+
+Start by choosing a domain to handle inbound email. We find it easiest if
+you maintain a separate domain from anything else. In our example, we're
+going to choose ``inbound.sentry.example.com``. You'll need to configure
+your DNS records appropriately.
+
+Add another supervisor config to run the Sentry ``smtp`` service::
+
+    [program:sentry-inbound-mail]
+    directory=/www/sentry/
+    command=/www/sentry/bin/sentry start smtp
+    autostart=true
+    autorestart=true
+    stdout_logfile syslog
+    stderr_logfile syslog
+
+Configure an Nginx route as an SMTP mail proxy::
+
+    http {
+      # Bind an http server to localhost only just for the smtp auth
+      server {
+        listen 127.0.0.1:80;
+
+        # Return back the address and port for the listening
+        # Sentry smtp server. Default is 127.0.0.1:1025.
+        location = /smtp {
+          add_header Auth-Server 127.0.0.1;
+          add_header Auth-Port   1025;
+          return 200;
+        }
+      }
+    }
+
+    mail {
+      auth_http localhost/smtp;
+
+      server {
+        listen 25;
+
+        protocol   smtp;
+        proxy      on;
+        smtp_auth  none;
+        xclient    off;
+      }
+    }
+
+
+And finally, update Sentry with the appropriate settings::
+
+    # Set the SMTP hostname to your configured inbound domain
+    SENTRY_SMTP_HOSTNAME = 'inbound.sentry.example.com'
+
+    # Inform Sentry to send the appropriate mail headers to enable
+    # incoming replies
+    SENTRY_ENABLE_EMAIL_REPLIES = True
+
+That's it! You'll now be able to respond to activity notifications on
+errors via your email client.
diff --git a/docs/inbound-mail/index.rst b/docs/inbound-mail/index.rst
deleted file mode 100644
index 1c82028cd2..0000000000
--- a/docs/inbound-mail/index.rst
+++ /dev/null
@@ -1,12 +0,0 @@
-Inbound Mail
-============
-
-Sentry provides support for handling incoming email in various situations. Currently it only supports processing replies to error and note notifications.
-
-For configuration instructions, choose a backend:
-
-.. toctree::
-   :maxdepth: 1
-
-   mailgun
-   nginx
diff --git a/docs/inbound-mail/mailgun.rst b/docs/inbound-mail/mailgun.rst
deleted file mode 100644
index c89b324ef5..0000000000
--- a/docs/inbound-mail/mailgun.rst
+++ /dev/null
@@ -1,36 +0,0 @@
-Inbound Email via Mailgun
-=========================
-
-.. versionadded:: 7.2.0
-
-Start by choosing a domain to handle inbound email. We find it easiest if you maintain a separate domain from anything else. In our example, we're going to choose ``inbound.sentry.example.com``. You'll need to configure your DNS records for the given domain according to the Mailgun documentation.
-
-Create a new route in mailgun:
-
-::
-
-    Priority:
-      0
-    Filter Expression:
-      catch_all()
-    Actions:
-      forward("https://sentry.example.com/api/hooks/mailgun/inbound/")
-    Description:
-      Sentry inbound handler
-
-Configure Sentry with the appropriate settings:
-
-.. code-block:: python
-
-    # Your Mailgun API key (used to verify incoming webhooks)
-    MAILGUN_API_KEY = ''
-
-    # Set the SMTP hostname to your configured inbound domain
-    SENTRY_SMTP_HOSTNAME = 'inbound.sentry.example.com'
-
-    # Inform Sentry to send the appropriate mail headers to enable
-    # incoming replies
-    SENTRY_ENABLE_EMAIL_REPLIES = True
-
-
-That's it! You'll now be able to respond to activity notifications on errors via your email client.
diff --git a/docs/inbound-mail/nginx.rst b/docs/inbound-mail/nginx.rst
deleted file mode 100644
index 90900b0aaa..0000000000
--- a/docs/inbound-mail/nginx.rst
+++ /dev/null
@@ -1,62 +0,0 @@
-Inbound Email via Nginx
-=======================
-
-Start by choosing a domain to handle inbound email. We find it easiest if you maintain a separate domain from anything else. In our example, we're going to choose ``inbound.sentry.example.com``. You'll need to configure your DNS records appropriately.
-
-Add another supervisor config to run the Sentry ``smtp`` service:
-
-::
-
-    [program:sentry-inbound-mail]
-    directory=/www/sentry/
-    command=/www/sentry/bin/sentry start smtp
-    autostart=true
-    autorestart=true
-    stdout_logfile syslog
-    stderr_logfile syslog
-
-Configure an Nginx route as an SMTP mail proxy:
-
-::
-
-    http {
-      # Bind an http server to localhost only just for the smtp auth
-      server {
-        listen 127.0.0.1:80;
-
-        # Return back the address and port for the listening
-        # Sentry smtp server. Default is 127.0.0.1:1025.
-        location = /smtp {
-          add_header Auth-Server 127.0.0.1;
-          add_header Auth-Port   1025;
-          return 200;
-        }
-      }
-    }
-
-    mail {
-      auth_http localhost/smtp;
-
-      server {
-        listen 25;
-
-        protocol   smtp;
-        proxy      on;
-        smtp_auth  none;
-        xclient    off;
-      }
-    }
-
-
-And finally, update Sentry with the appropriate settings:
-
-.. code-block:: python
-
-    # Set the SMTP hostname to your configured inbound domain
-    SENTRY_SMTP_HOSTNAME = 'inbound.sentry.example.com'
-
-    # Inform Sentry to send the appropriate mail headers to enable
-    # incoming replies
-    SENTRY_ENABLE_EMAIL_REPLIES = True
-
-That's it! You'll now be able to respond to activity notifications on errors via your email client.
diff --git a/docs/index.rst b/docs/index.rst
index 36731e2a36..b76d4c0329 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -1,89 +1,33 @@
-Sentry
-======
+Sentry Server
+=============
 
-Sentry is a modern error logging and aggregation platform.
+The Sentry Server is the core Python application that powers all of our
+Sentry installations.  This covers everything related to getting it
+running on your own infrastructure.
 
-It's important to note that Sentry should not be thought of as a log stream,
-but as an aggregator. It fits somewhere in-between a simple metrics
-solution (such as `Graphite <http://graphite.wikidot.com/>`_) and a full-on
-log stream aggregator (like `Logstash <http://logstash.net/>`_).
-
-Users Guide
------------
-
-.. toctree::
-   :maxdepth: 2
-
-   getting-started/index
-   getting-started/nginx
-   upgrading/index
-   config/index
-   queue/index
-   buffer/index
-   nodestore/index
-   throttling/index
-   tsdb/index
-   inbound-mail/index
-   beacon
-   performance/index
-   cli/index
-   client/index
-   plugins/index
-   faq/index
-
-Developers
-----------
-
-.. toctree::
-   :maxdepth: 2
-
-   contributing/index
-   developer/client/index
-   developer/plugins/index
-   developer/interfaces/index
-
-Internals
----------
 
 .. toctree::
    :maxdepth: 1
 
-   internals/options
-
-Reference
----------
-
-.. toctree::
-   :maxdepth: 1
-
-   changelog/index
-   license/index
-
-Resources
----------
-
-* `Transifex <https://www.transifex.com/projects/p/sentry/>`_ (Translate Sentry!)
-* `Bug Tracker <http://github.com/getsentry/sentry/issues>`_
-* `Code <http://github.com/getsentry/sentry>`_
-* `Mailing List <https://groups.google.com/group/getsentry>`_
-* `IRC <irc://irc.freenode.net/sentry>`_  (irc.freenode.net, #sentry)
-
-Screenshots
------------
-
-Aggregated Events
-`````````````````
-
-.. image:: images/group_list.png
-   :alt: aggregated events
+   installation
+   upgrading
+   config
+   nginx
+   nodestore
+   queue
+   buffer
+   throttling
+   tsdb
+   inbound-mail
+   beacon
+   performance
+   cli
+   plugins
+   faq
 
-Event Details
-`````````````
-.. image:: images/event.png
-   :alt: event details
+.. sentry:edition:: self
 
-Deprecation Notes
------------------
+    .. toctree::
+       :maxdepth: 1
 
-Milestones releases are 1.3 or 1.4, and our deprecation policy is to a two version step. For example,
-a feature will be deprecated in 1.3, and completely removed in 1.4.
+       changelog
diff --git a/docs/installation.rst b/docs/installation.rst
new file mode 100644
index 0000000000..5ac4f2a4b6
--- /dev/null
+++ b/docs/installation.rst
@@ -0,0 +1,514 @@
+Installation
+============
+
+This guide will step you through setting up a Python-based virtualenv,
+installing the required packages, and configuring the basic web service.
+
+Dependencies
+------------
+
+Some basic prerequisites which you'll need in order to run Sentry:
+
+* A UNIX-based operating system. We test on Ubuntu and this documentation
+  assumes an ubuntu based system.
+* Python 2.7
+* ``python-setuptools``, ``python-pip``, ``python-dev``, ``libxslt1-dev``,
+  ``libxml2-dev``, ``libz-dev``, ``libffi-dev``, ``libssl-dev``
+* A real database (PostgreSQL is preferred, MySQL also works with caveats)
+* Redis
+* Nginx (with RealIP, i.e. ``nginx-full``)
+* A dedicated domain to host Sentry on (i.e. `sentry.yourcompany.com`).
+
+Hardware
+--------
+
+Sentry provides a number of mechanisms to scale its capacity out
+horizontally, however there is still a primary SPOF at the database level.
+In an HA setup, the database is only utilized for event indexing and basic
+data storage, and becomes much less of a capacity concern (see also
+:doc:`nodestore`).
+
+We don't have any real numbers to tell you what kind of hardware you're
+going to need, but we'll help you make your decision based on existing
+usage from real customers.
+
+If you're looking for an HA, and high throughput setup, you're going to
+need to setup a fairly complex cluster of machines, and utilize all of
+Sentry's advanced configuration options.  This means you'll need Postgres,
+Riak, Redis, Memcached, and RabbitMQ.  It's very rare you'd need this
+complex of a cluster, and the primary usecase for this is for the
+Hosted Sentry on `getsentry.com <https://getsentry.com/>`_.
+
+For more typical, but still fairly high throughput setups, you can run off
+of a single machine as long as it has reasonable IO (ideally SSDs), and a
+good amount of memory.
+
+The main things you need to consider are:
+
+- TTL on events (how long do you need to keep historical data around)
+- Average event throughput
+- How many events get grouped together (which means they get sampled)
+
+At a point, getsentry.com was processing approximately 4 million events a
+day. A majority of this data is stored for 90 days, which accounted for
+around 1.5TB of SSDs. Web and worker nodes were commodity (8GB-12GB RAM,
+cheap SATA drives, 8 cores), the only two additional nodes were a
+dedicated RabbitMQ and Postgres instance (both on SSDs, 12GB-24GB of
+memory). In theory, given a single high-memory machine, with 16+ cores,
+and SSDs, you could handle the entirety of the given data set.
+
+Setting up an Environment
+-------------------------
+
+The first thing you'll need is the Python ``virtualenv`` package. You
+probably already have this, but if not, you can install it with::
+
+    pip install -U virtualenv
+
+It's also available as ``python-virtualenv`` on ubuntu in the package
+manager.
+
+Once that's done, choose a location for the environment, and create it
+with the ``virtualenv`` command. For our guide, we're going to choose
+``/www/sentry/``::
+
+    virtualenv /www/sentry/
+
+Finally, activate your virtualenv::
+
+    source /www/sentry/bin/activate
+
+.. note:: Activating the environment adjusts your ``PATH``, so that things
+          like pip now install into the virtualenv by default.
+
+Install Sentry
+--------------
+
+Once you've got the environment setup, you can install Sentry and all its
+dependencies with the same command you used to grab virtualenv::
+
+  pip install -U sentry
+
+Don't be worried by the amount of dependencies Sentry has. We have a
+philosophy of using the right tools for the job, and not reinventing them
+if they already exist.
+
+Once everything's installed, you should be able to execute the Sentry CLI,
+via ``sentry``, and get something like the following:
+
+.. code-block:: bash
+
+  $ sentry
+  usage: sentry [--config=/path/to/settings.py] [command] [options]
+
+
+Using Postgres or MySQL
+~~~~~~~~~~~~~~~~~~~~~~~
+
+We **highly** recommend using PostgreSQL for your database, or MySQL if
+you have no other choice. The default is sqlite and will handle very
+little load. If you're using MySQL, you should use InnoDB as your storage
+engine.
+
+These databases require additional packages, but Sentry provides a couple
+of meta packages to make things easier:
+
+::
+
+    # install sentry and its postgresql dependencies
+    pip install -U sentry[postgres]
+
+    # or if you choose, mysql
+    pip install -U sentry[mysql]
+
+
+Installing from Source
+~~~~~~~~~~~~~~~~~~~~~~
+
+If you're installing the Sentry source (e.g. from git), you'll also need
+to install ``npm``.
+
+Once your system is prepared, symlink your source into the virtualenv:
+
+.. code-block:: bash
+
+  $ python setup.py develop
+
+.. Note:: This command will install npm dependencies as well as compile
+          static assets.
+
+
+Initializing the Configuration
+------------------------------
+
+Now you'll need to create the default configuration. To do this, you'll
+use the ``init`` command You can specify an alternative configuration path
+as the argument to init, otherwise it will use the default of
+``~/.sentry/sentry.conf.py``.
+
+::
+
+    # the path is optional
+    sentry init /etc/sentry.conf.py
+
+The configuration for the server is based on ``sentry.conf.server``, which
+contains a basic Django project configuration, as well as the default
+Sentry configuration values. It defaults to SQLite, however **SQLite is
+not a fully supported database and should not be used in production**.
+
+::
+
+    # ~/.sentry/sentry.conf.py
+
+    # for more information on DATABASES, see the Django configuration at:
+    # https://docs.djangoproject.com/en/1.6/ref/databases/
+    DATABASES = {
+        'default': {
+            # We suggest PostgreSQL for optimal performance
+            'ENGINE': 'django.db.backends.postgresql_psycopg2',
+
+            # Alternatively you can use MySQL
+            'ENGINE': 'django.db.backends.mysql',
+
+            'NAME': 'sentry',
+            'USER': 'postgres',
+            'PASSWORD': '',
+            'HOST': '',
+            'PORT': '',
+        }
+    }
+
+    # No trailing slash!
+    SENTRY_URL_PREFIX = 'http://sentry.example.com'
+
+    SENTRY_WEB_HOST = '0.0.0.0'
+    SENTRY_WEB_PORT = 9000
+    SENTRY_WEB_OPTIONS = {
+        'workers': 3,  # the number of gunicorn workers
+        # detect HTTPS mode from X-Forwarded-Proto header
+        'secure_scheme_headers': {'X-FORWARDED-PROTO': 'https'},
+    }
+
+
+Configure Redis
+---------------
+
+Redis is used as the default implementation for various backend services,
+including the time-series storage, SQL update buffers, and rate limiting.
+
+We recommend running two separate Redis clusters: one for persistent data
+(TSDB) and one for temporal data (buffers, rate limits). This is because
+you can configure the nodes in very different ones to enable more
+aggressive/optimized LRU.
+
+That said, if you're running a small install you can probably get away
+with just setting up the defaults::
+
+    SENTRY_REDIS_OPTIONS = {
+        'hosts': {
+            0: {
+                'host': '127.0.0.1',
+                'port': 6379,
+                'timeout': 3,
+                #'password': 'redis auth password'
+            }
+        }
+    }
+
+All built-in Redis implementations (other than the queue) will use these
+default settings, but each individual service also will allow you to
+override it's cluster settings.
+
+See the individual documentation for :doc:`the queue <queue/>`,
+:doc:`update buffers <buffer>`, :doc:`quotas <throttling>`, and
+:doc:`time-series storage <tsdb>` for more details.
+
+Configure Outbound Mail
+-----------------------
+
+Several settings exist as part of the Django framework which will
+configure your outbound mail server. For the standard implementation,
+using a simple SMTP server, you can simply configure the following:
+
+.. code-block:: python
+
+    EMAIL_HOST = 'localhost'
+    EMAIL_HOST_PASSWORD = ''
+    EMAIL_HOST_USER = ''
+    EMAIL_PORT = 25
+    EMAIL_USE_TLS = False
+
+Being that Django is a pluggable framework, you also have the ability to
+specify different mail backends. See the `official Django documentation
+<https://docs.djangoproject.com/en/1.3/topics/email/?from=olddocs#email-backends>`_
+for more information on alternative backends.
+
+Running Migrations
+------------------
+
+Sentry provides an easy way to run migrations on the database on version
+upgrades. Before running it for the first time you'll need to make sure
+you've created the database:
+
+.. code-block:: bash
+
+    # If you're using Postgres, and kept the database ``NAME`` as ``sentry``
+    $ createdb -E utf-8 sentry
+
+    # alternatively if you're using MySQL, ensure you've created the database:
+    $ mysql -e 'create database sentry'
+
+Once done, you can create the initial schema using the ``upgrade``
+command:
+
+.. code-block:: python
+
+    $ sentry --config=/etc/sentry.conf.py upgrade
+
+Next up you'll need to create the first user, which will act as a superuser:
+
+.. code-block:: bash
+
+    # create a new user
+    $ sentry --config=/etc/sentry.conf.py createuser
+
+All schema changes and database upgrades are handled via the ``upgrade``
+command, and this is the first thing you'll want to run when upgrading to
+future versions of Sentry.
+
+.. note:: Internally, this uses `South <http://south.aeracode.org>`_ to
+          manage database migrations.
+
+Starting the Web Service
+------------------------
+
+Sentry provides a built-in webserver (powered by gunicorn and eventlet) to
+get you off the ground quickly, also you can setup Sentry as WSGI
+application, in that case skip to section `Running Sentry as WSGI
+application`.
+
+To start the webserver, you simply use ``sentry start``. If you opted to
+use an alternative configuration path you can pass that via the --config
+option.
+
+::
+
+  # Sentry's server runs on port 9000 by default. Make sure your client reflects
+  # the correct host and port!
+  sentry --config=/etc/sentry.conf.py start
+
+You should now be able to test the web service by visiting `http://localhost:9000/`.
+
+.. note:: This doesn't run any workers in the background, so assuming
+          queueing is enabled (default in 7.0.0+) no asyncrhonous tasks
+          will be running.
+
+Starting the Workers
+--------------------
+
+A large amount of Sentry's work is typically done via it's workers. While
+Sentry will seemingly work without using a queue you will not actually see
+anything show up in Sentry.  Once you've configured the queue, you'll also
+need to run workers. Generally, this is as simple as running "celery" from
+the Sentry CLI.
+
+So do not forget to run the workers!
+
+::
+
+  sentry --config=/etc/sentry.conf.py celery worker -B
+
+Technically there is a way to run sentry without the queues by setting
+``CELERY_ALWAYS_EAGER`` to `True` but this is heavily discouraged and not
+supported.
+
+.. note:: `Celery <http://celeryproject.org/>`_ is an open source task
+          framework for Python.
+
+Setup a Reverse Proxy
+---------------------
+
+By default, Sentry runs on port 9000. Even if you change this, under
+normal conditions you won't be able to bind to port 80. To get around this
+(and to avoid running Sentry as a privileged user, which you shouldn't),
+we recommend you setup a simple web proxy.
+
+Proxying with Apache
+~~~~~~~~~~~~~~~~~~~~
+
+Apache requires the use of mod_proxy for forwarding requests::
+
+    ProxyPass / http://localhost:9000/
+    ProxyPassReverse / http://localhost:9000/
+    ProxyPreserveHost On
+    RequestHeader set X-Forwarded-Proto "https" env=HTTPS
+
+You will need to enable ``headers``, ``proxy``, and ``proxy_http`` apache
+modules to use these settings.
+
+Proxying with Nginx
+~~~~~~~~~~~~~~~~~~~
+
+You'll use the builtin HttpProxyModule within Nginx to handle proxying::
+
+    location / {
+      proxy_pass         http://localhost:9000;
+      proxy_redirect     off;
+
+      proxy_set_header   Host              $host;
+      proxy_set_header   X-Real-IP         $remote_addr;
+      proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
+      proxy_set_header   X-Forwarded-Proto $scheme;
+    }
+
+See :doc:`nginx` for more details on using Nginx.
+
+Enabling SSL
+~~~~~~~~~~~~~
+
+If you are planning to use SSL, you will also need to ensure that you've
+enabled detection within the reverse proxy (see the instructions above), as
+well as within the Sentry configuration:
+
+.. code-block:: python
+
+    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
+
+Running Sentry as a Service
+---------------------------
+
+We recommend using whatever software you are most familiar with for
+managing Sentry processes. For us, that software of choice is `Supervisor
+<http://supervisord.org/>`_.
+
+Configure ``supervisord``
+~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Configuring Supervisor couldn't be more simple. Just point it to the
+``sentry`` executable in your virtualenv's bin/ folder and you're good to
+go.
+
+::
+
+  [program:sentry-web]
+  directory=/www/sentry/
+  command=/www/sentry/bin/sentry start
+  autostart=true
+  autorestart=true
+  redirect_stderr=true
+  stdout_logfile syslog
+  stderr_logfile syslog
+
+  [program:sentry-worker]
+  directory=/www/sentry/
+  command=/www/sentry/bin/sentry celery worker -B
+  autostart=true
+  autorestart=true
+  redirect_stderr=true
+  stdout_logfile syslog
+  stderr_logfile syslog
+
+
+Removing Old Data
+-----------------
+
+One of the most important things you're going to need to be aware of is
+storage costs. You'll want to setup a cron job that runs to automatically
+trim stale data. This won't guarantee space is reclaimed (i.e. by SQL),
+but it will try to minimize the footprint. This task is designed to run
+under various environments so it doesn't delete things in the most optimal
+way possible, but as long as you run it routinely (i.e. daily) you should
+be fine.
+
+.. code-block:: bash
+
+  $ crontab -e
+  0 3 * * * sentry cleanup --days=30
+
+
+Additional Utilities
+--------------------
+
+If you're familiar with Python you'll quickly find yourself at home, and
+even more so if you've used Django. The ``sentry`` command is just a
+simple wrapper around Django's ``django-admin.py``, which means you get
+all of the power and flexibility that goes with it.
+
+Some of those which you'll likely find useful are:
+
+createuser
+~~~~~~~~~~
+
+Quick and easy creation of superusers. These users have full access to the
+entirety of the Sentry server.
+
+runserver
+~~~~~~~~~
+
+Testing Sentry locally? Spin up Django's builtin runserver (or ``pip
+install django-devserver`` for something slightly better).
+
+
+Enabling Third Party Auth
+-------------------------
+
+Most of the time it doesn't really matter **how** someone authenticates to
+the service, so much as it that they do. In these cases, Sentry provides
+integrating with several common services, including: Google and GitHub.
+Enabling this is as simple as setting up an application with the
+respective services, and configuring a couple values in your
+``sentry.conf.py`` file.
+
+By default, users will be able to both signup (create a new account) as
+well as associate an existing account. If you want to disable account
+creation, simply set the following value::
+
+  SENTRY_FEATURES = {
+    'social-auth:register': False,
+  }
+
+
+Google
+~~~~~~
+
+Register an application at
+http://code.google.com/apis/accounts/docs/OAuth2.html#Registering. Take
+the values given on the page, and configure the following::
+
+  GOOGLE_OAUTH2_CLIENT_ID = ''
+  GOOGLE_OAUTH2_CLIENT_SECRET = ''
+
+
+GitHub
+~~~~~~
+
+Register an application at https://github.com/settings/applications/new.
+Take the values given on the page, and configure the following::
+
+  GITHUB_APP_ID = ''
+  GITHUB_API_SECRET = ''
+
+For more information on configuring social authentication services,
+consult the `documentation on django-social-auth
+<https://github.com/omab/django-social-auth/>`_.
+
+
+What's Next?
+------------
+
+There are several applications you may want to add to the default Sentry
+install for various security or other uses. This is a bit outside of the
+scope of normal (locked down) installs, as typically you'll host things on
+your internal network. That said, you'll first need to understand how you
+can modify the default settings.
+
+First pop open your ``sentry.conf.py``, and add the following to the
+**very top** of the file::
+
+  from sentry.conf.server import *
+
+Now you'll have access to all of the default settings (Django and Sentry)
+to modify at your own will.
+
+We recommend going over all of the defaults in the generated settings
+file, and familiarizing yourself with how the system is setup.
diff --git a/docs/internals/options.rst b/docs/internals/options.rst
deleted file mode 100644
index e8ec303cca..0000000000
--- a/docs/internals/options.rst
+++ /dev/null
@@ -1,27 +0,0 @@
-System Options
-==============
-
-System configuration is handled at two stages:
-
-- In the ``sentry_options`` table.
-- In Sentry configuration (Django settings via SENTRY_OPTIONS).
-
-The options package should be the primary point of configuration outside of
-critical systems (such as database connection information).
-
-:mod:`sentry.options`
----------------------
-
-The options manager is exported as ``sentry.options.default_manager`` and
-the public API is also exposed at options module level:
-
-.. code:: python
-
-    from sentry import options
-
-    if options.get('foo') == 'bar':
-       print('foo is set to bar')
-
-
-.. autoclass:: sentry.options.manager.OptionsManager
-   :members:
diff --git a/docs/license/index.rst b/docs/license/index.rst
deleted file mode 100644
index 4fb75bbe31..0000000000
--- a/docs/license/index.rst
+++ /dev/null
@@ -1,20 +0,0 @@
-License
-=======
-
-Sentry is licensed under a three clause BSD License.
-
-The full license text can be found below (:ref:`sentry-license`).
-
-Authors
--------
-
-Sentry was originally written and is maintained by David Cramer.
-
-A lit of additional contributors can be seen on `GitHub <https://github.com/getsentry/sentry/contributors>`_.
-
-.. _sentry-license:
-
-Sentry License
---------------
-
-.. include:: ../../LICENSE
diff --git a/docs/getting-started/nginx.rst b/docs/nginx.rst
similarity index 84%
rename from docs/getting-started/nginx.rst
rename to docs/nginx.rst
index 66d0270840..fe22059f21 100644
--- a/docs/getting-started/nginx.rst
+++ b/docs/nginx.rst
@@ -1,15 +1,20 @@
-Configuring Sentry with Nginx
-=============================
+Deploying Sentry with Nginx
+===========================
 
+Nginx provides a very powerful platform for running in front of Sentry as
+it gives us features like rate limiting.
 
-Nginx provides a very powerful platform for running in front of Sentry as it
-gives us features like rate limiting.
+If you're on Ubuntu, you can simply install the ``nginx-full`` package
+which will include the required RealIP module. Otherwise you'll need to
+compile Nginx from source with ``--with-http_realip_module``.
 
-If you're on Ubuntu, you can simply install the ``nginx-full`` package which will include the required RealIP module. Otherwise you'll need to compile Nginx from source with ``--with-http_realip_module``.
+For configuration instructinos with regards to incoming mail via nginx see
+:ref:`nginx-mail`.
 
-Below is a sample production ready configuration for Nginx with Sentry:
+Basic Configuration
+-------------------
 
-::
+Below is a sample production ready configuration for Nginx with Sentry::
 
     http {
       # set REMOTE_ADDR from any internal proxies
@@ -76,21 +81,18 @@ Below is a sample production ready configuration for Nginx with Sentry:
 
 
 Proxying uWSGI
-~~~~~~~~~~~~~~
+--------------
 
-While Sentry provides a default webserver, you'll likely want to move to something
-a bit more powerful. We suggest using `uWSGI <http://projects.unbit.it/uwsgi/>`_ to
-run Sentry.
+While Sentry provides a default webserver, you'll likely want to move to
+something a bit more powerful. We suggest using `uWSGI
+<http://projects.unbit.it/uwsgi/>`_ to run Sentry.
 
-Install uWSGI into your virtualenv (refer to quickstart if you're confused):
-
-::
+Install uWSGI into your virtualenv (refer to quickstart if you're
+confused)::
 
     pip install uwsgi
 
-Create a uWSGI configuration which references the Sentry configuration:
-
-::
+Create a uWSGI configuration which references the Sentry configuration::
 
     [uwsgi]
     env = SENTRY_CONF=/etc/sentry.conf.py
@@ -119,8 +121,6 @@ Create a uWSGI configuration which references the Sentry configuration:
     log-x-forwarded-for = true
 
 
-Finally, re-configure supervisor to run uwsgi instead of 'sentry start':
-
-::
+Finally, re-configure supervisor to run uwsgi instead of 'sentry start'::
 
   /www/sentry/bin/uwsgi --ini /www/sentry/uwsgi.ini
diff --git a/docs/nodestore/index.rst b/docs/nodestore.rst
similarity index 82%
rename from docs/nodestore/index.rst
rename to docs/nodestore.rst
index c7819a1e4d..ed2714e974 100644
--- a/docs/nodestore/index.rst
+++ b/docs/nodestore.rst
@@ -1,17 +1,20 @@
 Node Storage
 ============
 
-Sentry provides an abstraction called 'nodestore' which is used for storing key/value blobs.
+Sentry provides an abstraction called 'nodestore' which is used for
+storing key/value blobs.
 
-The default backend simply stores them as gzipped blobs in in the 'nodestore_node' table
-of your default database.
+The default backend simply stores them as gzipped blobs in in the
+'nodestore_node' table of your default database.
 
 Django Backend
 --------------
 
-The Django backend stores all data in the 'nodestore_node' table, using a the gzipped json blob-as-text pattern.
+The Django backend stores all data in the 'nodestore_node' table, using a
+the gzipped json blob-as-text pattern.
 
-The backend provides no options, so it should simply be set to an empty dict.
+The backend provides no options, so it should simply be set to an empty
+dict.
 
 ::
 
@@ -22,14 +25,17 @@ The backend provides no options, so it should simply be set to an empty dict.
 Riak Backend
 ------------
 
-Riak is the recommended backend for installations which have a large data consumption pattern, and would prefer to
-scale out, rather than scale up a single SQL node.
+Riak is the recommended backend for installations which have a large data
+consumption pattern, and would prefer to scale out, rather than scale up a
+single SQL node.
 
 Some notes on your Riak installation:
 
-- You will want to the ``leveldb`` backend as blobs are larger, and compression helps greatly.
+- You will want to the ``leveldb`` backend as blobs are larger, and
+  compression helps greatly.
 - Reads explicitly use ``r=1``.
-- We recommend ``n=2`` for replicas, but if the data isn't extremely important, ``n=1`` is fine.
+- We recommend ``n=2`` for replicas, but if the data isn't extremely
+  important, ``n=1`` is fine.
 
 ::
 
@@ -51,9 +57,11 @@ Some notes on your Riak installation:
 Cassandra Backend
 -----------------
 
-Cassandra is a horizontally scalable datastore in many of the same ways as Riak.
+Cassandra is a horizontally scalable datastore in many of the same ways as
+Riak.
 
-The Sentry Cassandra backend only operates over the native CQL interface, so requires Cassandra 1.2+.
+The Sentry Cassandra backend only operates over the native CQL interface,
+so requires Cassandra 1.2+.
 
 ::
 
@@ -92,10 +100,12 @@ The Sentry Cassandra backend only operates over the native CQL interface, so req
 Custom Backends
 ---------------
 
-If you have a favorite data storage solution, it only has to operate under a few rules for it to work w/ Sentry's blob storage:
+If you have a favorite data storage solution, it only has to operate under
+a few rules for it to work w/ Sentry's blob storage:
 
 - set key to value
 - get key
 - delete key
 
-For more information on implementating your own backend, take a look at ``sentry.nodestore.base.NodeStorage``.
+For more information on implementating your own backend, take a look at
+``sentry.nodestore.base.NodeStorage``.
diff --git a/docs/performance/index.rst b/docs/performance.rst
similarity index 77%
rename from docs/performance/index.rst
rename to docs/performance.rst
index 361a19278a..94fefcbf4a 100644
--- a/docs/performance/index.rst
+++ b/docs/performance.rst
@@ -1,7 +1,8 @@
 Performance Tuning
 ==================
 
-This document describes a set of best practices which may help you squeeze more performance out of various Sentry configurations.
+This document describes a set of best practices which may help you squeeze
+more performance out of various Sentry configurations.
 
 
 Redis
@@ -9,9 +10,11 @@ Redis
 
 **Ensure you're using at least Redis 2.4**
 
-All Redis usage in Sentry is temporal, which means the append-log/fsync models in Redis do not need to apply.
+All Redis usage in Sentry is temporal, which means the append-log/fsync
+models in Redis do not need to apply.
 
-With that in mind, we recommend the following changes to (some) default configurations:
+With that in mind, we recommend the following changes to (some) default
+configurations:
 
 - Disable saving by removing all ``save XXXX`` lines.
 - Set ``maxmemory-policy allkeys-lru`` to aggressively prune all keys.
@@ -21,11 +24,11 @@ With that in mind, we recommend the following changes to (some) default configur
 Web Server
 ----------
 
-Switching off of the default Sentry worker model and to uWSGI + emperor mode can yield very good results.
+Switching off of the default Sentry worker model and to uWSGI + emperor
+mode can yield very good results.
 
-If you're using supervisord, you can easily implement emperor mode and uWSGI yourself by doing something along the lines of:
-
-::
+If you're using supervisord, you can easily implement emperor mode and
+uWSGI yourself by doing something along the lines of::
 
 	[program:web]
 	command=newrelic-admin run-program /srv/www/getsentry.com/env/bin/uwsgi -s 127.0.0.1:90%(process_num)02d --log-x-forwarded-for --buffer-size 32768 --post-buffering 65536 --need-app --disable-logging --wsgi-file getsentry/wsgi.py --processes 1 --threads 6
@@ -43,9 +46,8 @@ If you're using supervisord, you can easily implement emperor mode and uWSGI you
 	stdout_logfile syslog
 	stderr_logfile syslog
 
-Once you're running multiple processes, you'll of course need to also configure something like Nginx to load balance to them:
-
-::
+Once you're running multiple processes, you'll of course need to also
+configure something like Nginx to load balance to them::
 
 	upstream internal {
 	  least_conn;
@@ -108,11 +110,15 @@ See uWSGI's official documentation for emperor mode details.
 Celery
 ------
 
-Celery can be difficult to tune. Your goal is to maximize the CPU usage without running out of memory. If you have JavaScript clients this becomes more difficult, as currently the sourcemap and context scraping can buffer large amounts of memory depending on your configurations and the size of your source files.
+Celery can be difficult to tune. Your goal is to maximize the CPU usage
+without running out of memory. If you have JavaScript clients this becomes
+more difficult, as currently the sourcemap and context scraping can buffer
+large amounts of memory depending on your configurations and the size of
+your source files.
 
-On a completely anecdotal note, you can take the same approach that you might take with improving the webserver: spawn more processes. We again look to supervisord for managing this for us:
-
-::
+On a completely anecdotal note, you can take the same approach that you
+might take with improving the webserver: spawn more processes. We again
+look to supervisord for managing this for us::
 
 	[program:celeryd]
 	command=/srv/www/getsentry.com/env/bin/sentry celery worker -c 6 -P processes -l WARNING -n worker-%(process_num)02d.worker-3
@@ -133,11 +139,14 @@ On a completely anecdotal note, you can take the same approach that you might ta
 Monitoring Memory
 -----------------
 
-There are cases where Sentry currently buffers large amounts of memory. This may depend on the client (javascript vs python) as well as the size of your events. If you repeatedly run into issues where workers or web nodes are using a lot of memory, you'll want to ensure you have some mechanisms for monitoring and resolving this.
-
-If you're using supervisord, we recommend taking a look at `superlance <http://superlance.readthedocs.org>`_ which aids in this situation:
+There are cases where Sentry currently buffers large amounts of memory.
+This may depend on the client (javascript vs python) as well as the size
+of your events. If you repeatedly run into issues where workers or web
+nodes are using a lot of memory, you'll want to ensure you have some
+mechanisms for monitoring and resolving this.
 
-::
+If you're using supervisord, we recommend taking a look at `superlance
+<http://superlance.readthedocs.org>`_ which aids in this situation::
 
 	[eventlistener:memmon]
 	command=memmon -a 400MB -m ops@example.com
diff --git a/docs/plugins/index.rst b/docs/plugins.rst
similarity index 78%
rename from docs/plugins/index.rst
rename to docs/plugins.rst
index 0cf429ef21..ca0fc24b62 100644
--- a/docs/plugins/index.rst
+++ b/docs/plugins.rst
@@ -1,8 +1,8 @@
 Plugins
 =======
 
-There are several interfaces currently available to extend Sentry. These are a work in
-progress and the API is not frozen.
+There are several interfaces currently available to extend Sentry. These
+are a work in progress and the API is not frozen.
 
 Bundled Plugins
 ---------------
@@ -17,18 +17,15 @@ Sentry includes several plugins by default. Builtin plugins are controlled via t
       'sentry.plugins.sentry_useragents',
     ]
 
-.. data:: sentry.plugins.sentry_urls
-    :noindex:
+.. describe:: sentry.plugins.sentry_urls
 
     Enables auto tagging of urls based on the Http interface contents.
 
-.. data:: sentry.plugins.sentry_mail
-    :noindex:
+.. describe:: sentry.plugins.sentry_mail
 
     Enables email notifications when new events or regressions happen.
 
-.. data:: sentry.plugins.sentry_useragents
-    :noindex:
+.. describe:: sentry.plugins.sentry_useragents
 
     Enables auto tagging of browsers and operating systems based on the
     'User-Agent' header in the HTTP interface.
@@ -44,19 +41,14 @@ The following extensions are available and maintained by members of the Sentry c
 * `sentry-campfire <https://github.com/mkhattab/sentry-campfire>`_
 * `sentry-flowdock <https://github.com/getsentry/sentry-flowdock>`_
 * `sentry-fogbugz <https://github.com/glasslion/sentry-fogbugz>`_
-* `sentry-freight <https://github.com/getsentry/sentry-freight>`_
 * `sentry-github <https://github.com/getsentry/sentry-github>`_
 * `sentry-groveio <https://github.com/mattrobenolt/sentry-groveio>`_
 * `sentry-hipchat <https://github.com/linovia/sentry-hipchat>`_
-* `sentry-heroku <https://github.com/getsentry/sentry-heroku>`_
 * `sentry-irc <https://github.com/gisce/sentry-irc>`_
 * `sentry-irccat <https://github.com/russss/sentry-irccat>`_
 * `sentry-jira <https://github.com/thurloat/sentry-jira>`_
-* `sentry-kafka <https://github.com/Banno/getsentry-kafka>`_
-* `sentry-ldap-auth <https://github.com/banno/getsentry-ldap-auth>`_
 * `sentry-lighthouse <https://github.com/gthb/sentry-lighthouse>`_
 * `sentry-notifico <https://github.com/lukegb/sentry-notifico>`_
-* `sentry-opsgenie <http://github.com/getsentry/sentry-opsgenie>`_
 * `sentry-phabricator <https://github.com/getsentry/sentry-phabricator>`_
 * `sentry-pivotal <https://github.com/getsentry/sentry-pivotal>`_
 * `sentry-pushover <https://github.com/dz0ny/sentry-pushover>`_
@@ -70,7 +62,6 @@ The following extensions are available and maintained by members of the Sentry c
 * `sentry-youtrack <https://github.com/bogdal/sentry-youtrack>`_
 * `sentry-slack <https://github.com/getsentry/sentry-slack>`_
 * `sentry-zabbix <https://github.com/m0n5t3r/sentry-zabbix>`_
-* `sentry-taiga <https://github.com/rochsystems/sentry-taiga>`_
 
-Have an extension that should be listed here? Submit a `pull request <https://github.com/getsentry/sentry>`_ and we'll
-get it added.
+Have an extension that should be listed here? Submit a `pull request
+<https://github.com/getsentry/sentry>`_ and we'll get it added.
diff --git a/docs/queue/index.rst b/docs/queue.rst
similarity index 59%
rename from docs/queue/index.rst
rename to docs/queue.rst
index 0f99808a15..eff079351e 100644
--- a/docs/queue/index.rst
+++ b/docs/queue.rst
@@ -7,7 +7,8 @@ of writing it to the database immediately, it sends a job to the queue so
 that the request can be returned right away, and the background workers
 handle actually saving that data.
 
-.. note:: As of version 3.3.0 the queue is now powered by `Celery <http://celeryproject.org/>`_.
+.. note:: As of version 3.3.0 the queue is now powered by `Celery
+          <http://celeryproject.org/>`_.
 
 Running a Worker
 ----------------
@@ -19,38 +20,36 @@ which is the worker manager process of the Celery library.
 
     sentry celery worker -B
 
-.. note:: You will need to run both celery workers and celerybeat. In our example, the -B flag runs a beat instance (in addition to the worker), but in production you may want to run them separately.
+.. note:: You will need to run both celery workers and celerybeat. In our
+          example, the -B flag runs a beat instance (in addition to the worker),
+          but in production you may want to run them separately.
 
-We again recommend running this as a service. Below is an example configuration with supervisor:
+We again recommend running this as a service. Below is an example
+configuration with supervisor::
 
-::
-
-  [program:sentry-worker]
-  directory=/www/sentry/
-  command=/www/sentry/bin/sentry celery worker -B -l WARNING
-  autostart=true
-  autorestart=true
-  redirect_stderr=true
-  killasgroup=true
+    [program:sentry-worker]
+    directory=/www/sentry/
+    command=/www/sentry/bin/sentry celery worker -B -l WARNING
+    autostart=true
+    autorestart=true
+    redirect_stderr=true
+    killasgroup=true
 
 
 Enable the Queue
 ----------------
 
 Once you've brought up a worker, the next step is to enable the queue. This is
-done with a simple settings flag:
-
-::
+done with a simple settings flag::
 
     CELERY_ALWAYS_EAGER = False
 
-It's also **highly** recommended that you switch away from the default queue settings, which
-rely on the database, and move to something more efficient. These are documented in more
-details as part of the `Celery documentation <http://celeryproject.org/>`_, but something simple
-like Redis will do just fine.
-
-An example configuration using a local Redis server might look like this:
+It's also **highly** recommended that you switch away from the default
+queue settings, which rely on the database, and move to something more
+efficient. These are documented in more details as part of the `Celery
+documentation <http://celeryproject.org/>`_, but something simple like
+Redis will do just fine.
 
-::
+An example configuration using a local Redis server might look like this::
 
     BROKER_URL = "redis://localhost:6379/0"
diff --git a/docs/throttling/index.rst b/docs/throttling.rst
similarity index 69%
rename from docs/throttling/index.rst
rename to docs/throttling.rst
index bad33d72e7..588fd34cdd 100644
--- a/docs/throttling/index.rst
+++ b/docs/throttling.rst
@@ -1,20 +1,20 @@
 Throttles and Rate Limiting
 ===========================
 
-With the way Sentry works you may find yourself in a situation where you'll see
-too much inbound traffic without a good way to drop excess messages. There's a
-few solutions to this, and you'll likely want to employ them all if you are
-faced with this problem.
+With the way Sentry works you may find yourself in a situation where
+you'll see too much inbound traffic without a good way to drop excess
+messages. There's a few solutions to this, and you'll likely want to
+employ them all if you are faced with this problem.
 
 Enabling Quotas
 ---------------
 
-Sentry provides a built-in quota mechanism to limit on per-project and system-wide basis.
+Sentry provides a built-in quota mechanism to limit on per-project and
+system-wide basis.
 
-As of version 7.0.0, quotas are enabled by default and configured to use the Redis backend. To
-adjust the settings or the backend, you can use the following settings:
-
-.. code-block:: python
+As of version 7.0.0, quotas are enabled by default and configured to use
+the Redis backend. To adjust the settings or the backend, you can use the
+following settings::
 
    SENTRY_QUOTAS = 'sentry.quotas.redis.RedisQuota'
    SENTRY_QUOTA_OPTIONS = {
@@ -26,27 +26,25 @@ adjust the settings or the backend, you can use the following settings:
        }
    }
 
-You can additionally configure system-wide maximums, and a default value for all projects:
-
-.. code-block:: python
+You can additionally configure system-wide maximums, and a default value
+for all projects::
 
    SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE = '90%'
    SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE = 500
 
-If you have additional needs, you're freely available to extend the base Quota class just as the
-Redis implementation does.
+If you have additional needs, you're freely available to extend the base
+Quota class just as the Redis implementation does.
 
 Rate Limiting with IPTables
 ---------------------------
 
 One of your most effective options is to rate limit with your system's
-firewall, in our case, IPTables. If you're not sure how IPTables works, take a
-look at `Ubuntu's IPTables How-to <https://help.ubuntu.com/community/IptablesHowTo>`_.
+firewall, in our case, IPTables. If you're not sure how IPTables works,
+take a look at `Ubuntu's IPTables How-to
+<https://help.ubuntu.com/community/IptablesHowTo>`_.
 
-A sampe configuration, which will limit a single IP from bursting more than 5
-messages in a 10 second period might look like this:
-
-::
+A sampe configuration, which will limit a single IP from bursting more
+than 5 messages in a 10 second period might look like this::
 
     # create a new chain for rate limiting
     -N LIMITED
@@ -64,14 +62,15 @@ messages in a 10 second period might look like this:
 Rate Limiting with Nginx
 ------------------------
 
-While IPTables will help prevent DDOS they don't effectively communicate to the client that it's being rate
-limited. This can be important depending on how the client chooses to respond to the situation.
-
-An alternative (or rather, an addition) is to use something like `ngx_http_limit_conn_module <http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html>`_.
+While IPTables will help prevent DDOS they don't effectively communicate
+to the client that it's being rate limited. This can be important
+depending on how the client chooses to respond to the situation.
 
-An example configuration looks something like this:
+An alternative (or rather, an addition) is to use something like
+`ngx_http_limit_conn_module
+<http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html>`_.
 
-::
+An example configuration looks something like this::
 
     limit_req_zone  $binary_remote_addr  zone=one:100m   rate=3r/s;
     limit_req_zone  $projectid  zone=two:100m   rate=6r/s;
@@ -96,8 +95,9 @@ An example configuration looks something like this:
 Using Cyclops (Client Proxy)
 ----------------------------
 
-An additional option for rate limiting is to do it on the client side. `Cyclops <https://github.com/heynemann/cyclops>`_
-is a third-party proxy written in Python (using Tornado) which aims to solve this.
+An additional option for rate limiting is to do it on the client side.
+`Cyclops <https://github.com/heynemann/cyclops>`_ is a third-party proxy
+written in Python (using Tornado) which aims to solve this.
 
-It's not officially supported, however it is used in production by several large
-users.
+It's not officially supported, however it is used in production by several
+large users.
diff --git a/docs/tsdb/index.rst b/docs/tsdb.rst
similarity index 57%
rename from docs/tsdb/index.rst
rename to docs/tsdb.rst
index ce2ce91be1..2b04a9b4e3 100644
--- a/docs/tsdb/index.rst
+++ b/docs/tsdb.rst
@@ -1,15 +1,15 @@
 Time-series Storage
 ===================
 
-Sentry provides a service to store time-series data. Primarily this is used to display aggregate information
-for events and projects, as well as calculating (in real-time) the rates of events.
+Sentry provides a service to store time-series data. Primarily this is
+used to display aggregate information for events and projects, as well as
+calculating (in real-time) the rates of events.
 
 Choosing a Backend
 ------------------
 
-To specify a backend, simply modify the ``SENTRY_TSDB`` and ``SENTRY_TSDB_OPTIONS`` values in your configuration:
-
-.. code-block:: python
+To specify a backend, simply modify the ``SENTRY_TSDB`` and
+``SENTRY_TSDB_OPTIONS`` values in your configuration::
 
     SENTRY_TSDB = 'sentry.tsdb.dummy.DummyTSDB'
     SENTRY_TSDB_OPTIONS = {}
@@ -18,9 +18,7 @@ To specify a backend, simply modify the ``SENTRY_TSDB`` and ``SENTRY_TSDB_OPTION
 The Redis Backend
 -----------------
 
-Configuration is fairly straight forward:
-
-.. code-block:: python
+Configuration is fairly straight forward::
 
     SENTRY_TSDB = 'sentry.tsdb.redis.RedisTSDB'
     SENTRY_TSDB_OPTIONS = {
@@ -32,11 +30,10 @@ Configuration is fairly straight forward:
         }
     }
 
-Because the Redis buffer relies on the Nydus package, this gives you the ability to specify multiple nodes and
-have keys automatically distributed. It's unlikely that you'll need this functionality, but if you do, a simple
-configuration might look like this:
-
-::
+Because the Redis buffer relies on the Nydus package, this gives you the
+ability to specify multiple nodes and have keys automatically distributed.
+It's unlikely that you'll need this functionality, but if you do, a simple
+configuration might look like this::
 
     SENTRY_TSDB_OPTIONS = {
         'hosts': {
@@ -49,5 +46,5 @@ configuration might look like this:
         },
     }
 
-With the default configuration this will distribute keys using a simple partition router (relatively even
-distribution).
+With the default configuration this will distribute keys using a simple
+partition router (relatively even distribution).
diff --git a/docs/upgrading/index.rst b/docs/upgrading.rst
similarity index 63%
rename from docs/upgrading/index.rst
rename to docs/upgrading.rst
index 1b4483e4c2..c1644f4737 100644
--- a/docs/upgrading/index.rst
+++ b/docs/upgrading.rst
@@ -4,9 +4,10 @@ Upgrading
 **Always upgrade the Sentry server before upgrading your clients** unless
 the client states otherwise.
 
-Upgrading Sentry simply requires you to run migrations and restart your web services. We recommend
-you run the migrations from a separate install so that they can be completed before updating the
-code which runs the webserver.
+Upgrading Sentry simply requires you to run migrations and restart your
+web services. We recommend you run the migrations from a separate install
+so that they can be completed before updating the code which runs the
+webserver.
 
 Generally, you'll start by installing the upgraded Sentry package::
 
@@ -21,13 +22,18 @@ Finally, restart any Sentry services you had running.
 Upgrading to 7.x
 ~~~~~~~~~~~~~~~~
 
-An extremely large amount of changes happened between the 6.x and 7.x series. Many of them are backwards incompatible so you should review the setup guide again.
+An extremely large amount of changes happened between the 6.x and 7.x
+series. Many of them are backwards incompatible so you should review the
+setup guide again.
 
-- Redis (at least version 2.4) is now a requirement
+- Redis is now a requirement
 - The queue and buffer systems are no longer optional for production systems
-- Time series data (graphs) have been moved to a new system (there is no data migration)
+- Time series data (graphs) have been moved to a new system (there is no
+  data migration)
 - The default sentry.conf.py has greatly changed
 
-Due to the configuration generation being greatly improved, we recommend merging your existing settings with the new defaults. To do that just backup your `sentry.conf.py` and generate a new one using `sentry init`.
+Due to the configuration generation being greatly improved, we recommend
+merging your existing settings with the new defaults. To do that just
+backup your `sentry.conf.py` and generate a new one using `sentry init`.
 
 See the Changelog for additional backwards incompatible APIs.
