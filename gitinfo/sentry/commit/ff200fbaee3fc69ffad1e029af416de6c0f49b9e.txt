commit ff200fbaee3fc69ffad1e029af416de6c0f49b9e
Author: James Cunningham <cunninghamjt09@gmail.com>
Date:   Tue Dec 20 16:05:59 2016 -0800

    Add old/new events so we can better find why a merge was requested. (#4700)
    
    * Add old/new events so we can better find why a merge was requested.
    
    * Add hash IDs too.
    
    * update the log statement to be recursive-friendly and gracefully recover IDs
    
    * gotta make ted happy.

diff --git a/src/sentry/tasks/merge.py b/src/sentry/tasks/merge.py
index a78b87be4f..8f90734dd6 100644
--- a/src/sentry/tasks/merge.py
+++ b/src/sentry/tasks/merge.py
@@ -23,7 +23,8 @@ delete_logger = logging.getLogger('sentry.deletions.async')
 @instrumented_task(name='sentry.tasks.merge.merge_group', queue='merge',
                    default_retry_delay=60 * 5, max_retries=None)
 @retry
-def merge_group(from_object_id=None, to_object_id=None, transaction_id=None, **kwargs):
+def merge_group(from_object_id=None, to_object_id=None, transaction_id=None,
+                recursed=False, **kwargs):
     # TODO(mattrobenolt): Write tests for all of this
     from sentry.models import (
         Activity, Group, GroupAssignee, GroupHash, GroupRuleStatus,
@@ -55,11 +56,17 @@ def merge_group(from_object_id=None, to_object_id=None, transaction_id=None, **k
         })
         return
 
-    logger.info('merge.queued', extra={
-        'transaction_id': transaction_id,
-        'new_group_id': new_group.id,
-        'old_group_id': group.id,
-    })
+    if not recursed:
+        logger.info('merge.queued', extra={
+            'transaction_id': transaction_id,
+            'new_group_id': new_group.id,
+            'old_group_id': group.id,
+            'new_event_id': getattr(new_group.event_set.order_by('-id').first(), 'id', None),
+            'old_event_id': getattr(group.event_set.order_by('-id').first(), 'id', None),
+            'new_hash_id': getattr(new_group.grouphash_set.order_by('-id').first(), 'id', None),
+            'old_hash_id': getattr(group.grouphash_set.order_by('-id').first(), 'id', None),
+
+        })
 
     model_list = (
         Activity, GroupAssignee, GroupHash, GroupRuleStatus, GroupSubscription,
@@ -80,6 +87,7 @@ def merge_group(from_object_id=None, to_object_id=None, transaction_id=None, **k
             from_object_id=from_object_id,
             to_object_id=to_object_id,
             transaction_id=transaction_id,
+            recursed=True,
         )
         return
 
