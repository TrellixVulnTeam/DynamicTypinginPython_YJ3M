commit e89a5a762730cfff357363a3d4be5d1bca05e088
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Wed Mar 7 16:49:33 2018 -0600

    fix: Add partition_key to BulkModelDeletionTask to support deleting câ€¦ (#7504)

diff --git a/src/sentry/deletions/base.py b/src/sentry/deletions/base.py
index e4559d4c08..6d8824fc17 100644
--- a/src/sentry/deletions/base.py
+++ b/src/sentry/deletions/base.py
@@ -19,11 +19,15 @@ class BaseRelation(object):
 
 
 class ModelRelation(BaseRelation):
-    def __init__(self, model, query, task=None):
+    def __init__(self, model, query, task=None, partition_key=None):
         params = {
             'model': model,
             'query': query,
         }
+
+        if partition_key:
+            params['partition_key'] = partition_key
+
         super(ModelRelation, self).__init__(params=params, task=task)
 
 
@@ -238,6 +242,11 @@ class BulkModelDeletionTask(ModelDeletionTask):
     """
     DEFAULT_CHUNK_SIZE = 10000
 
+    def __init__(self, manager, model, query, partition_key=None, **kwargs):
+        super(BulkModelDeletionTask, self).__init__(manager, model, query, **kwargs)
+
+        self.partition_key = partition_key
+
     def chunk(self):
         return self.delete_instance_bulk()
 
@@ -247,6 +256,7 @@ class BulkModelDeletionTask(ModelDeletionTask):
                 model=self.model,
                 limit=self.chunk_size,
                 transaction_id=self.transaction_id,
+                partition_key=self.partition_key,
                 **self.query
             )
         finally:
diff --git a/src/sentry/tagstore/base.py b/src/sentry/tagstore/base.py
index 087356d41e..998e1b6b76 100644
--- a/src/sentry/tagstore/base.py
+++ b/src/sentry/tagstore/base.py
@@ -85,9 +85,16 @@ class TagStorage(Service):
     def setup_deletions(self, tagkey_model, tagvalue_model, grouptagkey_model,
                         grouptagvalue_model, eventtag_model):
         from sentry.deletions import default_manager as deletion_manager
-        from sentry.deletions.defaults import BulkModelDeletionTask
-        from sentry.deletions.base import ModelRelation, ModelDeletionTask
-        from sentry.models import Group, Event, Project
+        from sentry.deletions.defaults import BulkModelDeletionTask, ModelDeletionTask
+        from sentry.deletions.base import ModelRelation
+        from sentry.models import Event, Group, Project
+
+        deletion_manager.add_bulk_dependencies(Event, [
+            lambda instance_list: ModelRelation(eventtag_model,
+                                                {'event_id__in': [i.id for i in instance_list],
+                                                 'project_id': instance_list[0].project_id},
+                                                ModelDeletionTask),
+        ])
 
         deletion_manager.register(tagvalue_model, BulkModelDeletionTask)
         deletion_manager.register(grouptagkey_model, BulkModelDeletionTask)
@@ -95,21 +102,38 @@ class TagStorage(Service):
         deletion_manager.register(eventtag_model, BulkModelDeletionTask)
 
         deletion_manager.add_dependencies(Group, [
-            lambda instance: ModelRelation(eventtag_model, {'group_id': instance.id}),
-            lambda instance: ModelRelation(grouptagkey_model, {'group_id': instance.id}),
-            lambda instance: ModelRelation(grouptagvalue_model, {'group_id': instance.id}),
-        ])
-        deletion_manager.add_bulk_dependencies(Event, [
-            lambda instance_list: ModelRelation(eventtag_model,
-                                                {'event_id__in': [i.id for i in instance_list]},
-                                                ModelDeletionTask),
+            lambda instance: ModelRelation(
+                eventtag_model,
+                query={
+                    'group_id': instance.id,
+                    'project_id': instance.project_id
+                },
+                partition_key={'project_id': instance.project_id}),
+            lambda instance: ModelRelation(
+                grouptagkey_model,
+                query={
+                    'group_id': instance.id,
+                    'project_id': instance.project_id
+                },
+                partition_key={'project_id': instance.project_id}),
+            lambda instance: ModelRelation(
+                grouptagvalue_model,
+                query={
+                    'group_id': instance.id,
+                    'project_id': instance.project_id
+                },
+                partition_key={'project_id': instance.project_id}),
         ])
 
         deletion_manager.add_dependencies(Project, [
-            lambda instance: ModelRelation(tagkey_model, {'project_id': instance.id}),
-            lambda instance: ModelRelation(tagvalue_model, {'project_id': instance.id}),
-            lambda instance: ModelRelation(grouptagkey_model, {'project_id': instance.id}),
-            lambda instance: ModelRelation(grouptagvalue_model, {'project_id': instance.id}),
+            lambda instance: ModelRelation(tagkey_model,
+                                           query={'project_id': instance.id}),
+            lambda instance: ModelRelation(tagvalue_model,
+                                           query={'project_id': instance.id}),
+            lambda instance: ModelRelation(grouptagkey_model,
+                                           query={'project_id': instance.id}),
+            lambda instance: ModelRelation(grouptagvalue_model,
+                                           query={'project_id': instance.id}),
         ])
 
     def setup_cleanup(self, tagvalue_model, grouptagvalue_model, eventtag_model):
diff --git a/src/sentry/tagstore/v2/backend.py b/src/sentry/tagstore/v2/backend.py
index faf7e783a7..127d4d439c 100644
--- a/src/sentry/tagstore/v2/backend.py
+++ b/src/sentry/tagstore/v2/backend.py
@@ -73,6 +73,8 @@ class V2TagStorage(TagStorage):
         from sentry.deletions import default_manager as deletion_manager
         from sentry.deletions.base import ModelRelation, ModelDeletionTask
 
+        # NOTE: EventTag is handled by cleanup
+
         class TagKeyDeletionTask(ModelDeletionTask):
             def get_child_relations(self, instance):
                 # in bulk
diff --git a/src/sentry/utils/query.py b/src/sentry/utils/query.py
index 54b446661b..7ab7ceb043 100644
--- a/src/sentry/utils/query.py
+++ b/src/sentry/utils/query.py
@@ -291,12 +291,20 @@ def merge_into(self, other, callback=lambda x: x, using='default'):
                 post_save.send(created=True, **signal_kwargs)
 
 
-def bulk_delete_objects(model, limit=10000, transaction_id=None, logger=None, **filters):
+def bulk_delete_objects(model, limit=10000, transaction_id=None,
+                        logger=None, partition_key=None, **filters):
     connection = connections[router.db_for_write(model)]
     quote_name = connection.ops.quote_name
 
     query = []
     params = []
+    partition_query = []
+
+    if partition_key:
+        for column, value in partition_key.items():
+            partition_query.append('%s = %%s' % (quote_name(column), ))
+            params.append(value)
+
     for column, value in filters.items():
         query.append('%s = %%s' % (quote_name(column), ))
         params.append(value)
@@ -304,13 +312,14 @@ def bulk_delete_objects(model, limit=10000, transaction_id=None, logger=None, **
     if db.is_postgres():
         query = """
             delete from %(table)s
-            where id = any(array(
+            where %(partition_query)s id = any(array(
                 select id
                 from %(table)s
                 where (%(query)s)
                 limit %(limit)d
             ))
         """ % dict(
+            partition_query=(' AND '.join(partition_query)) + (' AND ' if partition_query else ''),
             query=' AND '.join(query),
             table=model._meta.db_table,
             limit=limit,
@@ -318,9 +327,10 @@ def bulk_delete_objects(model, limit=10000, transaction_id=None, logger=None, **
     elif db.is_mysql():
         query = """
             delete from %(table)s
-            where (%(query)s)
+            where %(partition_query)s (%(query)s)
             limit %(limit)d
         """ % dict(
+            partition_query=(' AND '.join(partition_query)) + (' AND ' if partition_query else ''),
             query=' AND '.join(query),
             table=model._meta.db_table,
             limit=limit,
