commit 3bf35f09f1182bc7b8934c1d99b2723e6c76956e
Author: William Mak <william@wmak.io>
Date:   Thu Apr 9 18:30:59 2020 -0400

    fix(perf-views) - Add owner to key transactions unique together
    
    - Not marking as dangerous because key transactions is still a very
      small table

diff --git a/migrations_lockfile.txt b/migrations_lockfile.txt
index ec21a2f78d..3babdab1b9 100644
--- a/migrations_lockfile.txt
+++ b/migrations_lockfile.txt
@@ -10,7 +10,7 @@ auth: 0008_alter_user_username_max_length
 contenttypes: 0002_remove_content_type_name
 jira_ac: 0001_initial
 nodestore: 0001_initial
-sentry: 0061_alertrule_partial_index
+sentry: 0062_key_transactions_unique_with_owner
 sessions: 0001_initial
 sites: 0002_alter_domain_unique
 social_auth: 0001_initial
diff --git a/src/sentry/discover/models.py b/src/sentry/discover/models.py
index 7ecfd5d799..fb1de31e6c 100644
--- a/src/sentry/discover/models.py
+++ b/src/sentry/discover/models.py
@@ -74,4 +74,4 @@ class KeyTransaction(Model):
     class Meta:
         app_label = "sentry"
         db_table = "sentry_discoverkeytransaction"
-        unique_together = (("project", "transaction"),)
+        unique_together = (("project", "owner", "transaction"),)
diff --git a/src/sentry/migrations/0062_key_transactions_unique_with_owner.py b/src/sentry/migrations/0062_key_transactions_unique_with_owner.py
new file mode 100644
index 0000000000..be72e18faa
--- /dev/null
+++ b/src/sentry/migrations/0062_key_transactions_unique_with_owner.py
@@ -0,0 +1,36 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.28 on 2020-04-09 22:30
+from __future__ import unicode_literals
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+    # This flag is used to decide whether to run this migration in a transaction or not.
+    # By default we prefer to run in a transaction, but for migrations where you want
+    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
+    # want to create an index concurrently when adding one to an existing table.
+    atomic = True
+
+
+    dependencies = [
+        ('sentry', '0061_alertrule_partial_index'),
+    ]
+
+    operations = [
+        migrations.AlterUniqueTogether(
+            name='keytransaction',
+            unique_together=set([('project', 'owner', 'transaction')]),
+        ),
+    ]
diff --git a/tests/snuba/api/endpoints/test_discover_key_transactions.py b/tests/snuba/api/endpoints/test_discover_key_transactions.py
index 92d8711c5e..535d8b001c 100644
--- a/tests/snuba/api/endpoints/test_discover_key_transactions.py
+++ b/tests/snuba/api/endpoints/test_discover_key_transactions.py
@@ -55,6 +55,28 @@ class KeyTransactionTest(APITestCase, SnubaTestCase):
         assert key_transaction.transaction == data["transaction"]
         assert key_transaction.organization == self.org
 
+    def test_multiple_user_save(self):
+        data = load_data("transaction")
+        with self.feature("organizations:performance-view"):
+            url = reverse("sentry-api-0-organization-key-transactions", args=[self.org.slug])
+            response = self.client.post(
+                url + "?project={}".format(self.project.id), {"transaction": data["transaction"]}
+            )
+
+        user = self.create_user()
+        self.create_member(user=user, organization=self.org, role="member")
+
+        self.login_as(user=user, superuser=False)
+        with self.feature("organizations:performance-view"):
+            url = reverse("sentry-api-0-organization-key-transactions", args=[self.org.slug])
+            response = self.client.post(
+                url + "?project={}".format(self.project.id), {"transaction": data["transaction"]}
+            )
+        assert response.status_code == 201
+
+        key_transactions = KeyTransaction.objects.filter(transaction=data["transaction"])
+        assert len(key_transactions) == 2
+
     def test_duplicate_key_transaction(self):
         data = load_data("transaction")
         with self.feature("organizations:performance-view"):
