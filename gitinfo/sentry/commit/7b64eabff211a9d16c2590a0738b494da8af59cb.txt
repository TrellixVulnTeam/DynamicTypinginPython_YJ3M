commit 7b64eabff211a9d16c2590a0738b494da8af59cb
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Nov 22 14:28:50 2017 -0800

    feat(auth): Tighten session restrictions around superusers
    
    - Utilize a secondary session for escalated superuser authentication
    - Restrict superuser sessions to browser session
    - Automatically timeout superuser sessions after a max age, and an idle window

diff --git a/src/sentry/api/client.py b/src/sentry/api/client.py
index 2ac9b5c9f0..e516d19099 100644
--- a/src/sentry/api/client.py
+++ b/src/sentry/api/client.py
@@ -5,6 +5,7 @@ __all__ = ('ApiClient', )
 from django.core.urlresolvers import resolve
 from rest_framework.test import APIRequestFactory, force_authenticate
 
+from sentry.auth.superuser import Superuser
 from sentry.utils import json
 from sentry.utils.compat import implements_to_string
 
@@ -68,18 +69,20 @@ class ApiClient(object):
                 mock_request.is_sudo = lambda: request.is_sudo()
             else:
                 mock_request.is_sudo = lambda: is_sudo
+            mock_request.session = request.session
 
             if is_superuser is None:
-                mock_request.is_superuser = lambda: request.is_superuser()
+                mock_request.superuser = request.superuser
             else:
-                mock_request.is_superuser = lambda: is_superuser
-            mock_request.session = request.session
+                mock_request.superuser = Superuser(mock_request)
         else:
             mock_request.auth = auth
             mock_request.user = user
             mock_request.is_sudo = lambda: is_sudo
-            mock_request.is_superuser = lambda: is_superuser
             mock_request.session = {}
+            mock_request.superuser = Superuser(mock_request)
+
+        mock_request.is_superuser = lambda: mock_request.superuser.is_active
 
         if request:
             # superuser checks require access to IP
diff --git a/src/sentry/api/permissions.py b/src/sentry/api/permissions.py
index 768ea49719..3372ed01df 100644
--- a/src/sentry/api/permissions.py
+++ b/src/sentry/api/permissions.py
@@ -2,6 +2,8 @@ from __future__ import absolute_import
 
 from rest_framework import permissions
 
+from sentry.auth.superuser import is_active_superuser
+
 
 class NoPermission(permissions.BasePermission):
     def has_permission(self, request, view):
@@ -42,6 +44,6 @@ class ScopedPermission(permissions.BasePermission):
 
 class SuperuserPermission(permissions.BasePermission):
     def has_permission(self, request, view):
-        if request.is_superuser():
+        if is_active_superuser(request):
             return True
         return False
diff --git a/src/sentry/auth/superuser.py b/src/sentry/auth/superuser.py
new file mode 100644
index 0000000000..365269703d
--- /dev/null
+++ b/src/sentry/auth/superuser.py
@@ -0,0 +1,274 @@
+from __future__ import absolute_import
+
+import ipaddress
+import logging
+import six
+
+from datetime import datetime, timedelta
+from django.conf import settings
+from django.core.signing import BadSignature
+from django.utils import timezone
+from django.utils.crypto import constant_time_compare, get_random_string
+
+logger = logging.getLogger('sentry.superuser')
+
+SESSION_KEY = '_su'
+
+COOKIE_NAME = getattr(settings, 'SUPERUSER_COOKIE_NAME', 'su')
+
+COOKIE_SALT = getattr(settings, 'SUPERUSER_COOKIE_SALT', '')
+
+COOKIE_SECURE = getattr(settings, 'SUPERUSER_COOKIE_SECURE', settings.SESSION_COOKIE_SECURE)
+
+COOKIE_DOMAIN = getattr(settings, 'SUPERUSER_COOKIE_DOMAIN', settings.SESSION_COOKIE_DOMAIN)
+
+COOKIE_PATH = getattr(settings, 'SUPERUSER_COOKIE_PATH', settings.SESSION_COOKIE_PATH)
+
+COOKIE_HTTPONLY = getattr(settings, 'SUPERUSER_COOKIE_HTTPONLY', True)
+
+# the maximum time the session can stay alive
+MAX_AGE = getattr(settings, 'SUPERUSER_MAX_AGE', timedelta(hours=6))
+
+# the maximum time the session can stay alive without making another request
+IDLE_MAX_AGE = getattr(settings, 'SUPERUSER_IDLE_MAX_AGE', timedelta(minutes=15))
+
+ALLOWED_IPS = frozenset(getattr(settings, 'SUPERUSER_ALLOWED_IPS', settings.INTERNAL_IPS) or ())
+
+UNSET = object()
+
+
+def is_active_superuser(request):
+    su = getattr(request, 'superuser', None) or Superuser(request)
+    return su.is_active
+
+
+class Superuser(object):
+    allowed_ips = [
+        ipaddress.ip_network(six.text_type(v), strict=False) for v in ALLOWED_IPS
+    ]
+
+    def __init__(self, request, allowed_ips=UNSET, current_datetime=None):
+        self.request = request
+        if allowed_ips is not UNSET:
+            self.allowed_ips = frozenset(
+                ipaddress.ip_network(six.text_type(v), strict=False) for v in allowed_ips or ()
+            )
+        self._populate(current_datetime=current_datetime)
+
+    def is_privileged_request(self):
+        allowed_ips = self.allowed_ips
+        # if there's no IPs configured, we allow assume its the same as *
+        if not allowed_ips:
+            return True
+        ip = ipaddress.ip_address(six.text_type(self.request.META['REMOTE_ADDR']))
+        if not any(ip in addr for addr in allowed_ips):
+            return False
+        return True
+
+    def get_session_data(self, current_datetime=None):
+        """
+        Return the current session data, with native types coerced.
+        """
+        request = self.request
+        data = request.session.get(SESSION_KEY)
+
+        try:
+            cookie_token = request.get_signed_cookie(
+                key=COOKIE_NAME,
+                default=None,
+                salt=COOKIE_SALT,
+                max_age=MAX_AGE.total_seconds()
+            )
+        except BadSignature:
+            logger.exception('superuser.bad-cookie-signature', extra={
+                'ip_address': request.META['REMOTE_ADDR'],
+                'user_id': request.user.id,
+            })
+            return
+
+        if not cookie_token:
+            if data:
+                logger.warn('superuser.missing-cookie-token', extra={
+                    'ip_address': request.META['REMOTE_ADDR'],
+                    'user_id': request.user.id,
+                })
+            return False
+        elif not data:
+            logger.warn('superuser.missing-session-data', extra={
+                'ip_address': request.META['REMOTE_ADDR'],
+                'user_id': request.user.id,
+            })
+            return
+
+        session_token = data.get('tok')
+        if not session_token:
+            logger.warn('superuser.missing-session-token', extra={
+                'ip_address': request.META['REMOTE_ADDR'],
+                'user_id': request.user.id,
+            })
+            return
+
+        if not constant_time_compare(cookie_token, session_token):
+            logger.warn('superuser.invalid-token', extra={
+                'ip_address': request.META['REMOTE_ADDR'],
+                'user_id': request.user.id,
+            })
+            return
+
+        if data['uid'] != six.text_type(request.user.id):
+            logger.warn('superuser.invalid-uid', extra={
+                'ip_address': request.META['REMOTE_ADDR'],
+                'user_id': request.user.id,
+                'expected_user_id': data['uid'],
+            })
+            return
+
+        if current_datetime is None:
+            current_datetime = timezone.now()
+
+        try:
+            data['idl'] = datetime.utcfromtimestamp(float(data['idl'])).replace(
+                tzinfo=timezone.utc)
+        except (TypeError, ValueError):
+            logger.warn('superuser.invalid-idle-expiration', extra={
+                'ip_address': request.META['REMOTE_ADDR'],
+                'user_id': request.user.id,
+            }, exc_info=True)
+            return
+
+        if data['idl'] < current_datetime:
+            logger.info('superuser.session-expired', extra={
+                'ip_address': request.META['REMOTE_ADDR'],
+                'user_id': request.user.id,
+            })
+            return
+
+        try:
+            data['exp'] = datetime.utcfromtimestamp(float(data['exp'])).replace(
+                tzinfo=timezone.utc)
+        except (TypeError, ValueError):
+            logger.warn('superuser.invalid-expiration', extra={
+                'ip_address': request.META['REMOTE_ADDR'],
+                'user_id': request.user.id,
+            }, exc_info=True)
+            return
+
+        if data['exp'] < current_datetime:
+            logger.info('superuser.session-expired', extra={
+                'ip_address': request.META['REMOTE_ADDR'],
+                'user_id': request.user.id,
+            })
+            return
+
+        return data
+
+    def _populate(self, current_datetime=None):
+        if current_datetime is None:
+            current_datetime = timezone.now()
+
+        request = self.request
+        user = getattr(request, 'user', None)
+        if not hasattr(request, 'session'):
+            data = None
+        elif not (user and user.is_superuser):
+            data = None
+        else:
+            data = self.get_session_data(current_datetime=current_datetime)
+
+        if not data:
+            self._set_logged_out()
+        else:
+            self._set_logged_in(
+                expires=data['exp'],
+                token=data['tok'],
+                user=user,
+            )
+
+            if not self.is_active:
+                logger.warn('superuser.invalid-ip', extra={
+                    'ip_address': request.META['REMOTE_ADDR'],
+                    'user_id': request.user.id,
+                })
+
+    def _set_logged_in(self, expires, token, user, current_datetime=None):
+        # we bind uid here, as if you change users in the same request
+        # we wouldn't want to still support superuser auth (given
+        # the superuser check happens right here)
+        assert user.is_superuser
+        if current_datetime is None:
+            current_datetime = timezone.now()
+        self.token = token
+        self.uid = six.text_type(user.id)
+        # the absolute maximum age of this session
+        self.expires = expires
+        # do we have a valid superuser session?
+        self.is_valid = True
+        # is the session active? (it could be valid, but inactive)
+        self.is_active = self.is_privileged_request()
+        self.request.session[SESSION_KEY] = {
+            'exp': self.expires.strftime('%s'),
+            'idl': (current_datetime + IDLE_MAX_AGE).strftime('%s'),
+            'tok': self.token,
+            # XXX(dcramer): do we really need the uid safety m echanism
+            'uid': self.uid,
+        }
+
+    def _set_logged_out(self):
+        self.uid = None
+        self.expires = None
+        self.token = None
+        self.is_active = False
+        self.is_valid = False
+        self.request.session.pop(SESSION_KEY, None)
+
+    def set_logged_in(self, user, current_datetime=None):
+        """
+        Mark a session as superuser-enabled.
+        """
+        request = self.request
+        if current_datetime is None:
+            current_datetime = timezone.now()
+        self._set_logged_in(
+            expires=current_datetime + MAX_AGE,
+            token=get_random_string(12),
+            user=user,
+            current_datetime=current_datetime,
+        )
+        logger.info('superuser.logged-in', extra={
+            'ip_address': request.META['REMOTE_ADDR'],
+            'user_id': user.id,
+        })
+
+    def set_logged_out(self):
+        """
+        Mark a session as superuser-disabled.
+        """
+        request = self.request
+        self._set_logged_out()
+        logger.info('superuser.logged-out', extra={
+            'ip_address': request.META['REMOTE_ADDR'],
+            'user_id': request.user.id,
+        })
+
+    def on_response(self, response, current_datetime=None):
+        request = self.request
+
+        if current_datetime is None:
+            current_datetime = timezone.now()
+
+        # always re-bind the cookie to update the idle expiration window
+        if self.is_active:
+            response.set_signed_cookie(
+                COOKIE_NAME,
+                self.token,
+                salt=COOKIE_SALT,
+                # set max_age to None, as we want this cookie to expire on browser close
+                max_age=None,
+                secure=request.is_secure() if COOKIE_SECURE is None else COOKIE_SECURE,
+                httponly=COOKIE_HTTPONLY,
+                path=COOKIE_PATH,
+                domain=COOKIE_DOMAIN,
+            )
+        # otherwise, if the session is invalid and there's a cookie set, clear it
+        elif not self.is_valid and request.COOKIES.get(COOKIE_NAME):
+            response.delete_cookie(COOKIE_NAME)
diff --git a/src/sentry/auth/utils.py b/src/sentry/auth/utils.py
deleted file mode 100644
index 6073c97947..0000000000
--- a/src/sentry/auth/utils.py
+++ /dev/null
@@ -1,26 +0,0 @@
-from __future__ import absolute_import
-
-from django.conf import settings
-
-
-def is_internal_ip(request):
-    if not settings.INTERNAL_IPS:
-        return False
-    ip = request.META['REMOTE_ADDR']
-    if not any(ip in addr for addr in settings.INTERNAL_IPS):
-        return False
-    return True
-
-
-def is_privileged_request(request):
-    if settings.INTERNAL_IPS:
-        return is_internal_ip(request)
-    return True
-
-
-def is_active_superuser(request):
-    user = getattr(request, 'user', None)
-    if not user or not user.is_superuser:
-        return False
-
-    return is_privileged_request(request)
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index eec22283b7..870b5b3767 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -264,6 +264,10 @@ if django.VERSION < (1, 7):
 STATIC_ROOT = os.path.realpath(os.path.join(PROJECT_ROOT, 'static'))
 STATIC_URL = '/_static/{version}/'
 
+# various middleware will use this to identify resources which should not access
+# cookies
+ANONYMOUS_STATIC_PREFIXES = ('/_static/', '/avatar/')
+
 STATICFILES_FINDERS = (
     "django.contrib.staticfiles.finders.FileSystemFinder",
     "django.contrib.staticfiles.finders.AppDirectoriesFinder",
diff --git a/src/sentry/debug/middleware.py b/src/sentry/debug/middleware.py
index 1ab1d106e7..9a8c4650cf 100644
--- a/src/sentry/debug/middleware.py
+++ b/src/sentry/debug/middleware.py
@@ -42,6 +42,11 @@ class DebugMiddleware(object):
     _body_regexp = re.compile(re.escape('</body>'), flags=re.IGNORECASE)
 
     def show_toolbar_for_request(self, request):
+        # This avoids touching user session, which means we avoid
+        # setting `Vary: Cookie` as a response header which will
+        # break HTTP caching entirely.
+        if request.path_info.startswith(settings.ANONYMOUS_STATIC_PREFIXES):
+            return
         if not settings.SENTRY_DEBUGGER:
             return False
         if not request.is_superuser():
diff --git a/src/sentry/middleware/locale.py b/src/sentry/middleware/locale.py
index c98bfbdd2d..4182c12529 100644
--- a/src/sentry/middleware/locale.py
+++ b/src/sentry/middleware/locale.py
@@ -10,6 +10,7 @@ from __future__ import absolute_import
 
 import pytz
 
+from django.conf import settings
 from django.middleware.locale import LocaleMiddleware
 
 from sentry.models import UserOption
@@ -22,9 +23,7 @@ class SentryLocaleMiddleware(LocaleMiddleware):
         # This avoids touching user session, which means we avoid
         # setting `Vary: Cookie` as a response header which will
         # break HTTP caching entirely.
-        self.__skip_caching = (
-            request.path_info[:9] == '/_static/' or request.path_info[:8] == '/avatar/'
-        )
+        self.__skip_caching = request.path_info.startswith(settings.ANONYMOUS_STATIC_PREFIXES)
         if self.__skip_caching:
             return
 
diff --git a/src/sentry/middleware/superuser.py b/src/sentry/middleware/superuser.py
index bf9cf76966..6ca9a51ddc 100644
--- a/src/sentry/middleware/superuser.py
+++ b/src/sentry/middleware/superuser.py
@@ -1,8 +1,39 @@
 from __future__ import absolute_import
 
-from sentry.auth.utils import is_active_superuser
+from django.conf import settings
+
+from sentry.auth.superuser import logger, Superuser
 
 
 class SuperuserMiddleware(object):
     def process_request(self, request):
-        request.is_superuser = lambda: is_active_superuser(request)
+        # This avoids touching user session, which means we avoid
+        # setting `Vary: Cookie` as a response header which will
+        # break HTTP caching entirely.
+        self.__skip_caching = request.path_info.startswith(settings.ANONYMOUS_STATIC_PREFIXES)
+        if self.__skip_caching:
+            return
+
+        su = Superuser(request)
+
+        request.superuser = su
+        request.is_superuser = lambda: request.superuser.is_active
+
+        if su.is_active:
+            logger.info('superuser.request', extra={
+                'url': request.build_absolute_uri(),
+                'method': request.method,
+                'ip_address': request.META['REMOTE_ADDR'],
+                'user_id': request.user.id,
+            })
+
+    def process_response(self, request, response):
+        try:
+            if self.__skip_caching:
+                return response
+        except AttributeError:
+            pass
+        su = getattr(request, 'superuser', None)
+        if su:
+            su.on_response(response)
+        return response
diff --git a/src/sentry/receivers/superuser.py b/src/sentry/receivers/superuser.py
new file mode 100644
index 0000000000..b05d43414e
--- /dev/null
+++ b/src/sentry/receivers/superuser.py
@@ -0,0 +1,33 @@
+from __future__ import absolute_import
+
+from django.contrib.auth.signals import user_logged_in, user_logged_out
+
+
+# Upon login, we automatically want to enable superuser
+# status
+def enable_superuser(request, user, **kwargs):
+    su = getattr(request, 'superuser', None)
+    if su:
+        if user.is_superuser:
+            su.set_logged_in(user)
+        else:
+            su.set_logged_out()
+
+
+def disable_superuser(request, user, **kwargs):
+    su = getattr(request, 'superuser', None)
+    if su:
+        su.set_logged_out()
+
+
+user_logged_in.connect(
+    enable_superuser,
+    dispatch_uid='enable_superuser',
+    weak=False,
+)
+
+user_logged_out.connect(
+    disable_superuser,
+    dispatch_uid='disable_superuser',
+    weak=False
+)
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index d3fecd49eb..cf7ca6bd80 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -27,6 +27,7 @@ from datetime import datetime
 from django.conf import settings
 from django.contrib.auth import login
 from django.contrib.auth.models import AnonymousUser
+from django.core import signing
 from django.core.cache import cache
 from django.core.urlresolvers import reverse
 from django.http import HttpRequest
@@ -41,6 +42,9 @@ from six.moves.urllib.parse import urlencode
 
 from sentry import auth
 from sentry.auth.providers.dummy import DummyProvider
+from sentry.auth.superuser import (
+    Superuser, COOKIE_SALT as SU_COOKIE_SALT, COOKIE_NAME as SU_COOKIE_NAME
+)
 from sentry.constants import MODULE_ROOT
 from sentry.models import GroupMeta, ProjectOption
 from sentry.plugins import plugins
@@ -108,13 +112,24 @@ class BaseTestCase(Fixtures, Exam):
         self.client.cookies[session_cookie] = self.session.session_key
         self.client.cookies[session_cookie].update(cookie_data)
 
-    def make_request(self, user=None):
+    def make_request(self, user=None, auth=None, method=None):
         request = HttpRequest()
+        if method:
+            request.method = method
+        request.META['REMOTE_ADDR'] = '127.0.0.1'
+        request.META['SERVER_NAME'] = 'testserver'
+        request.META['SERVER_PORT'] = 80
+        # order matters here, session -> user -> other things
         request.session = self.session
+        request.auth = auth
         request.user = user or AnonymousUser()
+        request.superuser = Superuser(request)
+        request.is_superuser = lambda: request.superuser.is_active
         return request
 
-    def login_as(self, user, organization_id=None):
+    # TODO(dcramer): we want to make the default behavior be ``superuser=False``
+    # but for compatibility reasons we need to update other projects first
+    def login_as(self, user, organization_id=None, superuser=True):
         user.backend = settings.AUTHENTICATION_BACKENDS[0]
 
         request = self.make_request()
@@ -122,7 +137,18 @@ class BaseTestCase(Fixtures, Exam):
         request.user = user
         if organization_id:
             request.session[SSO_SESSION_KEY] = six.text_type(organization_id)
-
+        # logging in implicitly binds superuser, but for test cases we
+        # want that action to be explicit to avoid accidentally testing
+        # superuser-only code
+        if not superuser:
+            request.superuser.set_logged_out()
+        elif request.user.is_superuser and superuser:
+            request.superuser.set_logged_in(request.user)
+            # XXX(dcramer): awful hack to ensure future attempts to instantiate
+            # the Superuser object are successful
+            self.client.cookies[SU_COOKIE_NAME] = signing.get_cookie_signer(
+                salt=SU_COOKIE_NAME + SU_COOKIE_SALT,
+            ).sign(request.superuser.token)
         # Save the session values.
         self.save_session()
 
diff --git a/src/sentry/web/frontend/admin.py b/src/sentry/web/frontend/admin.py
index e38e71fc66..22b2f9704a 100644
--- a/src/sentry/web/frontend/admin.py
+++ b/src/sentry/web/frontend/admin.py
@@ -57,9 +57,6 @@ def configure_plugin(request, slug):
 @transaction.atomic
 @csrf_protect
 def create_new_user(request):
-    if not request.is_superuser():
-        return HttpResponseRedirect(auth.get_login_url())
-
     form = NewUserForm(
         request.POST or None, initial={
             'send_welcome_mail': True,
@@ -107,9 +104,6 @@ def create_new_user(request):
 @requires_admin
 @csrf_protect
 def edit_user(request, user_id):
-    if not request.is_superuser():
-        return HttpResponseRedirect(auth.get_login_url())
-
     try:
         user = User.objects.get(pk=user_id)
     except User.DoesNotExist:
diff --git a/tests/sentry/api/bases/test_organization.py b/tests/sentry/api/bases/test_organization.py
index 25ce4afd75..4093b0f722 100644
--- a/tests/sentry/api/bases/test_organization.py
+++ b/tests/sentry/api/bases/test_organization.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-from mock import Mock
-
 from sentry.api.bases.organization import OrganizationPermission
 from sentry.models import ApiKey
 from sentry.testutils import TestCase
@@ -14,11 +12,9 @@ class OrganizationPermissionBase(TestCase):
 
     def has_object_perm(self, method, obj, auth=None, user=None, is_superuser=None):
         perm = OrganizationPermission()
-        request = Mock()
-        request.auth = auth
-        request.user = user
-        request.method = method
-        request.is_superuser = lambda: is_superuser if is_superuser is not None else user.is_superuser
+        request = self.make_request(user=user, auth=auth, method=method)
+        if is_superuser:
+            request.superuser.set_logged_in(request.user)
         return (
             perm.has_permission(request, None) and perm.has_object_permission(request, None, obj)
         )
@@ -31,7 +27,7 @@ class OrganizationPermissionTest(OrganizationPermissionBase):
 
     def test_superuser(self):
         user = self.create_user(is_superuser=True)
-        assert self.has_object_perm('GET', self.org, user=user)
+        assert self.has_object_perm('GET', self.org, user=user, is_superuser=True)
 
     def test_org_member(self):
         user = self.create_user()
diff --git a/tests/sentry/api/bases/test_project.py b/tests/sentry/api/bases/test_project.py
index 6f99d37b01..69c5111ec1 100644
--- a/tests/sentry/api/bases/test_project.py
+++ b/tests/sentry/api/bases/test_project.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-from mock import Mock
-
 from sentry.api.bases.project import ProjectPermission
 from sentry.models import ApiKey
 from sentry.testutils import TestCase
@@ -16,11 +14,9 @@ class ProjectPermissionBase(TestCase):
 
     def has_object_perm(self, method, obj, auth=None, user=None, is_superuser=None):
         perm = ProjectPermission()
-        request = Mock()
-        request.auth = auth
-        request.user = user
-        request.method = method
-        request.is_superuser = lambda: is_superuser if is_superuser is not None else user.is_superuser
+        request = self.make_request(user=user, auth=auth, method=method)
+        if is_superuser:
+            request.superuser.set_logged_in(request.user)
         return (
             perm.has_permission(request, None) and perm.has_object_permission(request, None, obj)
         )
@@ -33,7 +29,7 @@ class ProjectPermissionTest(ProjectPermissionBase):
 
     def test_superuser(self):
         user = self.create_user(is_superuser=True)
-        assert self.has_object_perm('GET', self.project, user=user)
+        assert self.has_object_perm('GET', self.project, user=user, is_superuser=True)
 
     def test_member_for_project_read(self):
         user = self.create_user(is_superuser=False)
diff --git a/tests/sentry/api/bases/test_team.py b/tests/sentry/api/bases/test_team.py
index 04cb2e13da..7371398427 100644
--- a/tests/sentry/api/bases/test_team.py
+++ b/tests/sentry/api/bases/test_team.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-from mock import Mock
-
 from sentry.api.bases.team import TeamPermission
 from sentry.models import ApiKey
 from sentry.testutils import TestCase
@@ -15,11 +13,9 @@ class TeamPermissionBase(TestCase):
 
     def has_object_perm(self, method, obj, auth=None, user=None, is_superuser=None):
         perm = TeamPermission()
-        request = Mock()
-        request.auth = auth
-        request.user = user
-        request.method = method
-        request.is_superuser = lambda: is_superuser if is_superuser is not None else user.is_superuser
+        request = self.make_request(user=user, auth=auth, method=method)
+        if is_superuser:
+            request.superuser.set_logged_in(request.user)
         return (
             perm.has_permission(request, None) and perm.has_object_permission(request, None, obj)
         )
@@ -32,7 +28,7 @@ class TeamPermissionTest(TeamPermissionBase):
 
     def test_get_superuser(self):
         user = self.create_user(is_superuser=True)
-        assert self.has_object_perm('GET', self.team, user=user)
+        assert self.has_object_perm('GET', self.team, user=user, is_superuser=True)
 
     def test_get_without_team_membership(self):
         user = self.create_user()
diff --git a/tests/sentry/api/endpoints/test_group_details.py b/tests/sentry/api/endpoints/test_group_details.py
index c4296e4a89..2da14586dc 100644
--- a/tests/sentry/api/endpoints/test_group_details.py
+++ b/tests/sentry/api/endpoints/test_group_details.py
@@ -267,7 +267,7 @@ class GroupUpdateTest(APITestCase):
 
     def test_mark_seen_as_non_member(self):
         user = self.create_user('foo@example.com', is_superuser=True)
-        self.login_as(user=user)
+        self.login_as(user=user, superuser=True)
 
         group = self.create_group()
 
diff --git a/tests/sentry/api/endpoints/test_internal_queue_tasks.py b/tests/sentry/api/endpoints/test_internal_queue_tasks.py
index 233de36f81..91cc893899 100644
--- a/tests/sentry/api/endpoints/test_internal_queue_tasks.py
+++ b/tests/sentry/api/endpoints/test_internal_queue_tasks.py
@@ -5,7 +5,7 @@ from sentry.testutils import APITestCase
 
 class InternalQueueTasksListTest(APITestCase):
     def test_anonymous(self):
-        self.login_as(self.user)
+        self.login_as(self.user, superuser=True)
         url = '/api/0/internal/queue/tasks/'
         response = self.client.get(url)
         assert response.status_code == 200
diff --git a/tests/sentry/api/endpoints/test_system_options.py b/tests/sentry/api/endpoints/test_system_options.py
index fc032aee37..d0ac4a9864 100644
--- a/tests/sentry/api/endpoints/test_system_options.py
+++ b/tests/sentry/api/endpoints/test_system_options.py
@@ -9,8 +9,13 @@ from sentry.testutils import APITestCase
 class SystemOptionsTest(APITestCase):
     url = reverse('sentry-api-0-system-options')
 
+    def test_without_superuser(self):
+        self.login_as(user=self.user, superuser=False)
+        response = self.client.get(self.url)
+        assert response.status_code == 403
+
     def test_simple(self):
-        self.login_as(user=self.user)
+        self.login_as(user=self.user, superuser=True)
         response = self.client.get(self.url)
         assert response.status_code == 200
         assert 'system.secret-key' in response.data
@@ -18,13 +23,13 @@ class SystemOptionsTest(APITestCase):
         assert 'system.admin-email' in response.data
 
     def test_bad_query(self):
-        self.login_as(user=self.user)
+        self.login_as(user=self.user, superuser=True)
         response = self.client.get(self.url, {'query': 'nonsense'})
         assert response.status_code == 400
         assert 'nonsense' in response.data
 
     def test_required(self):
-        self.login_as(user=self.user)
+        self.login_as(user=self.user, superuser=True)
         response = self.client.get(self.url, {'query': 'is:required'})
         assert response.status_code == 200
         assert 'system.rate-limit' not in response.data
@@ -37,7 +42,7 @@ class SystemOptionsTest(APITestCase):
         assert response.status_code == 401
 
     def test_disabled_smtp(self):
-        self.login_as(user=self.user)
+        self.login_as(user=self.user, superuser=True)
 
         with self.options({'mail.backend': 'smtp'}):
             response = self.client.get(self.url)
@@ -52,14 +57,14 @@ class SystemOptionsTest(APITestCase):
             assert response.data['mail.host']['field']['disabledReason'] == 'smtpDisabled'
 
     def test_put_int_for_boolean(self):
-        self.login_as(user=self.user)
+        self.login_as(user=self.user, superuser=True)
         response = self.client.put(self.url, {
             'auth.allow-registration': 1,
         })
         assert response.status_code == 200
 
     def test_put_unknown_option(self):
-        self.login_as(user=self.user)
+        self.login_as(user=self.user, superuser=True)
         response = self.client.put(self.url, {
             'xxx': 'lol',
         })
@@ -67,7 +72,7 @@ class SystemOptionsTest(APITestCase):
         assert response.data['error'] == 'unknown_option'
 
     def test_put_simple(self):
-        self.login_as(user=self.user)
+        self.login_as(user=self.user, superuser=True)
         assert options.get('mail.host') != 'lolcalhost'
         response = self.client.put(self.url, {
             'mail.host': 'lolcalhost',
diff --git a/tests/sentry/api/endpoints/test_user_details.py b/tests/sentry/api/endpoints/test_user_details.py
index 4f64fbd53c..cdcfac0754 100644
--- a/tests/sentry/api/endpoints/test_user_details.py
+++ b/tests/sentry/api/endpoints/test_user_details.py
@@ -44,7 +44,7 @@ class UserDetailsTest(APITestCase):
         user = self.create_user(email='a@example.com')
         superuser = self.create_user(email='b@example.com', is_superuser=True)
 
-        self.login_as(user=superuser)
+        self.login_as(user=superuser, superuser=True)
 
         url = reverse(
             'sentry-api-0-user-details', kwargs={
@@ -97,7 +97,7 @@ class UserUpdateTest(APITestCase):
         user = self.create_user(email='a@example.com')
         superuser = self.create_user(email='b@example.com', is_superuser=True)
 
-        self.login_as(user=superuser)
+        self.login_as(user=superuser, superuser=True)
 
         url = reverse(
             'sentry-api-0-user-details', kwargs={
diff --git a/tests/sentry/api/endpoints/test_user_index.py b/tests/sentry/api/endpoints/test_user_index.py
index 6b9c24712d..e462a04a21 100644
--- a/tests/sentry/api/endpoints/test_user_index.py
+++ b/tests/sentry/api/endpoints/test_user_index.py
@@ -18,7 +18,7 @@ class UserListTest(APITestCase):
         assert response.status_code == 403
 
     def test_simple(self):
-        self.login_as(user=self.user)
+        self.login_as(user=self.user, superuser=True)
         response = self.client.get(self.path)
         assert response.status_code == 200
         assert len(response.data) >= 1
diff --git a/tests/sentry/auth/test_superuser.py b/tests/sentry/auth/test_superuser.py
new file mode 100644
index 0000000000..915f6d4810
--- /dev/null
+++ b/tests/sentry/auth/test_superuser.py
@@ -0,0 +1,150 @@
+from __future__ import absolute_import
+
+import six
+
+from datetime import timedelta
+from django.core import signing
+from django.utils import timezone
+from mock import Mock
+
+from sentry.auth.superuser import (
+    COOKIE_DOMAIN, COOKIE_HTTPONLY, COOKIE_NAME, COOKIE_PATH, COOKIE_SALT, COOKIE_SECURE,
+    IDLE_MAX_AGE, MAX_AGE, SESSION_KEY, Superuser
+)
+from sentry.middleware.superuser import SuperuserMiddleware
+from sentry.models import User
+from sentry.testutils import TestCase
+
+UNSET = object()
+
+
+class SuperuserTestCase(TestCase):
+    def setUp(self):
+        super(SuperuserTestCase, self).setUp()
+        self.current_datetime = timezone.now()
+        self.default_token = 'abcdefghjiklmnog'
+
+    def build_request(self, cookie_token=UNSET, session_token=UNSET,
+                      expires=UNSET, idle_expires=UNSET, uid=UNSET,
+                      session_data=True, user=None):
+        if user is None:
+            user = self.create_user('foo@example.com', is_superuser=True)
+        current_datetime = self.current_datetime
+        request = self.make_request(user=user)
+        if cookie_token is not None:
+            request.COOKIES[COOKIE_NAME] = signing.get_cookie_signer(
+                salt=COOKIE_NAME + COOKIE_SALT,
+            ).sign(self.default_token if cookie_token is UNSET else cookie_token)
+        if session_data:
+            request.session[SESSION_KEY] = {
+                'exp': (current_datetime + timedelta(hours=6) if expires is UNSET else expires).strftime('%s'),
+                'idl': (current_datetime + timedelta(minutes=15) if idle_expires is UNSET else idle_expires).strftime('%s'),
+                'tok': self.default_token if session_token is UNSET else session_token,
+                'uid': six.text_type(user.id) if uid is UNSET else uid,
+            }
+        return request
+
+    def test_ips(self):
+        user = User(is_superuser=True)
+        request = self.make_request(user=user)
+        request.META['REMOTE_ADDR'] = '10.0.0.1'
+
+        # no ips = any host
+        superuser = Superuser(request, allowed_ips=())
+        superuser.set_logged_in(request.user)
+        assert superuser.is_active is True
+
+        superuser = Superuser(request, allowed_ips=('127.0.0.1',))
+        superuser.set_logged_in(request.user)
+        assert superuser.is_active is False
+
+        superuser = Superuser(request, allowed_ips=('10.0.0.1',))
+        superuser.set_logged_in(request.user)
+        assert superuser.is_active is True
+
+    def test_valid_data(self):
+        request = self.build_request()
+        superuser = Superuser(request, allowed_ips=())
+        assert superuser.is_active is True
+
+    def test_missing_cookie(self):
+        request = self.build_request(cookie_token=None)
+        superuser = Superuser(request, allowed_ips=())
+        assert superuser.is_active is False
+
+    def test_invalid_cookie_token(self):
+        request = self.build_request(cookie_token='foobar')
+        superuser = Superuser(request, allowed_ips=())
+        assert superuser.is_active is False
+
+    def test_invalid_session_token(self):
+        request = self.build_request(session_token='foobar')
+        superuser = Superuser(request, allowed_ips=())
+        assert superuser.is_active is False
+
+    def test_missing_data(self):
+        request = self.build_request(session_data=False)
+        superuser = Superuser(request, allowed_ips=())
+        assert superuser.is_active is False
+
+    def test_invalid_uid(self):
+        request = self.build_request(uid=-1)
+        superuser = Superuser(request, allowed_ips=())
+        assert superuser.is_active is False
+
+    def test_expired(self):
+        request = self.build_request(expires=self.current_datetime)
+        superuser = Superuser(request, allowed_ips=())
+        assert superuser.is_active is False
+
+    def test_idle_expired(self):
+        request = self.build_request(idle_expires=self.current_datetime)
+        superuser = Superuser(request, allowed_ips=())
+        assert superuser.is_active is False
+
+    def test_login_saves_session(self):
+        user = self.create_user('foo@example.com', is_superuser=True)
+        request = self.make_request()
+        superuser = Superuser(request, allowed_ips=(), current_datetime=self.current_datetime)
+        superuser.set_logged_in(user, current_datetime=self.current_datetime)
+
+        assert superuser.is_active
+
+        data = request.session.get(SESSION_KEY)
+        assert data
+        assert data['exp'] == (self.current_datetime + MAX_AGE).strftime('%s')
+        assert data['idl'] == (self.current_datetime + IDLE_MAX_AGE).strftime('%s')
+        assert len(data['tok']) == 12
+        assert data['uid'] == six.text_type(user.id)
+
+    def test_logout_clears_session(self):
+        request = self.build_request()
+        superuser = Superuser(request, allowed_ips=(), current_datetime=self.current_datetime)
+        superuser.set_logged_out()
+
+        assert not superuser.is_active
+        assert not request.session.get(SESSION_KEY)
+
+    def test_middleware_as_superuser(self):
+        request = self.build_request()
+
+        delattr(request, 'superuser')
+        delattr(request, 'is_superuser')
+
+        middleware = SuperuserMiddleware()
+        middleware.process_request(request)
+        assert request.superuser.is_active
+        assert request.is_superuser()
+
+        response = Mock()
+        middleware.process_response(request, response)
+        response.set_signed_cookie.assert_called_once_with(
+            COOKIE_NAME,
+            request.superuser.token,
+            salt=COOKIE_SALT,
+            max_age=None,
+            secure=request.is_secure() if COOKIE_SECURE is None else COOKIE_SECURE,
+            httponly=COOKIE_HTTPONLY,
+            path=COOKIE_PATH,
+            domain=COOKIE_DOMAIN,
+        )
diff --git a/tests/sentry/auth/test_utils.py b/tests/sentry/auth/test_utils.py
deleted file mode 100644
index 15dbf5d897..0000000000
--- a/tests/sentry/auth/test_utils.py
+++ /dev/null
@@ -1,25 +0,0 @@
-from __future__ import absolute_import
-
-from django.http import HttpRequest
-from django.test.utils import override_settings
-
-from sentry.models import User
-from sentry.auth.utils import is_active_superuser
-
-
-def test_is_active_superuser():
-    request = HttpRequest()
-    request.META['REMOTE_ADDR'] = '10.0.0.1'
-
-    with override_settings(INTERNAL_IPS=()):
-        assert is_active_superuser(request) is False
-        request.user = User()
-        assert is_active_superuser(request) is False
-        request.user.is_superuser = True
-        assert is_active_superuser(request) is True
-
-    with override_settings(INTERNAL_IPS=('127.0.0.1', )):
-        assert is_active_superuser(request) is False
-
-    with override_settings(INTERNAL_IPS=('10.0.0.1', )):
-        assert is_active_superuser(request) is True
diff --git a/tests/sentry/web/frontend/test_admin.py b/tests/sentry/web/frontend/test_admin.py
index be61e0b10b..dd5cd70486 100644
--- a/tests/sentry/web/frontend/test_admin.py
+++ b/tests/sentry/web/frontend/test_admin.py
@@ -18,7 +18,7 @@ class EnvStatusTest(TestCase):
         self.assertEquals(resp.status_code, 302)
 
     def test_renders_template(self):
-        self.login_as(self.user)
+        self.login_as(self.user, superuser=True)
 
         resp = self.client.get(self.path)
         self.assertEquals(resp.status_code, 200)
@@ -35,7 +35,7 @@ class PackageStatusTest(TestCase):
         self.assertEquals(resp.status_code, 302)
 
     def test_renders_template(self):
-        self.login_as(self.user)
+        self.login_as(self.user, superuser=True)
 
         resp = self.client.get(self.path)
         self.assertEquals(resp.status_code, 200)
@@ -52,7 +52,7 @@ class MailStatusTest(TestCase):
         self.assertEquals(resp.status_code, 302)
 
     def test_renders_template(self):
-        self.login_as(self.user)
+        self.login_as(self.user, superuser=True)
 
         resp = self.client.get(self.path)
         self.assertEquals(resp.status_code, 200)
