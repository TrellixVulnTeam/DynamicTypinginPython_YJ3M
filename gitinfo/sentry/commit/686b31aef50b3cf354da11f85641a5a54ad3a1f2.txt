commit 686b31aef50b3cf354da11f85641a5a54ad3a1f2
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Aug 21 10:25:28 2018 -0700

    feat(ui): Change assignee selector to use DropdownAutocomplete (#8941)
    
    This also allows for keyboard navigation of the assignee selector.
    
    Old:
    ![image](https://user-images.githubusercontent.com/79684/43616731-eba4eabe-9672-11e8-978e-8f68fb06646b.png)
    
    New:
    ![image](https://user-images.githubusercontent.com/79684/43616747-f907e4fe-9672-11e8-99b3-6dc9361f3f7a.png)
    
    Uses the same component as e.g.:
    ![image](https://user-images.githubusercontent.com/79684/43616758-120fc0a2-9673-11e8-83b6-318bfe28c312.png)

diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index 33b649419f..170d07ab48 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -1,28 +1,30 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import Reflux from 'reflux';
-import classNames from 'classnames';
 import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 
+import {StyledMenu} from 'app/components/dropdownAutoCompleteMenu';
 import {assignToUser, assignToActor, clearAssignment} from 'app/actionCreators/group';
 import {t} from 'app/locale';
 import {valueIsEqual, buildUserId, buildTeamId} from 'app/utils';
 import ActorAvatar from 'app/components/actorAvatar';
 import Avatar from 'app/components/avatar';
 import ConfigStore from 'app/stores/configStore';
-import DropdownLink from 'app/components/dropdownLink';
-import FlowLayout from 'app/components/flowLayout';
+import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
+import Feature from 'app/components/feature';
 import GroupStore from 'app/stores/groupStore';
+import Highlight from 'app/components/highlight';
 import InlineSvg from 'app/components/inlineSvg';
+import Link from 'app/components/link';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import MemberListStore from 'app/stores/memberListStore';
-import MenuItem from 'app/components/menuItem';
 import ProjectsStore from 'app/stores/projectsStore';
 import SentryTypes from 'app/sentryTypes';
 import TextOverflow from 'app/components/textOverflow';
+import space from 'app/styles/space';
 
-const AssigneeSelector = createReactClass({
+const AssigneeSelectorComponent = createReactClass({
   displayName: 'AssigneeSelector',
 
   propTypes: {
@@ -39,21 +41,10 @@ const AssigneeSelector = createReactClass({
   ],
 
   statics: {
-    filterAssignees(itemList, filter) {
-      if (!itemList) return [];
-      if (!filter) return itemList;
-
-      filter = filter.toLowerCase();
-
-      return itemList.filter(item => {
-        let fullName = [item.name, item.email, item.slug].join(' ').toLowerCase();
-
-        return fullName.indexOf(filter) !== -1;
-      });
-    },
-
     putSessionUserFirst(members) {
       // If session user is in the filtered list of members, put them at the top
+      if (!members) return [];
+
       let sessionUser = ConfigStore.get('user');
       let sessionUserIndex = members.findIndex(
         member => sessionUser && member.id === sessionUser.id
@@ -75,18 +66,19 @@ const AssigneeSelector = createReactClass({
 
   getInitialState() {
     let group = GroupStore.get(this.props.id);
+    let memberList = MemberListStore.loaded ? MemberListStore.getAll() : null;
+    let loading = GroupStore.hasStatus(this.props.id, 'assignTo');
+
     return {
       assignedTo: group && group.assignedTo,
-      memberList: MemberListStore.loaded ? MemberListStore.getAll() : null,
-      filter: '',
-      isOpen: false,
-      loading: false,
+      memberList,
+      loading,
     };
   },
 
   componentWillReceiveProps(nextProps) {
     let loading = GroupStore.hasStatus(nextProps.id, 'assignTo');
-    if (nextProps.id != this.props.id || loading != this.state.loading) {
+    if (nextProps.id !== this.props.id || loading !== this.state.loading) {
       let group = GroupStore.get(this.props.id);
       this.setState({
         loading,
@@ -96,11 +88,7 @@ const AssigneeSelector = createReactClass({
   },
 
   shouldComponentUpdate(nextProps, nextState) {
-    if (
-      nextState.isOpen !== this.state.isOpen ||
-      nextState.filter !== this.state.filter ||
-      nextState.loading !== this.state.loading
-    ) {
+    if (nextState.loading !== this.state.loading) {
       return true;
     }
 
@@ -119,17 +107,16 @@ const AssigneeSelector = createReactClass({
   assignableTeams() {
     let group = GroupStore.get(this.props.id);
 
-    return AssigneeSelector.filterAssignees(
-      (ProjectsStore.getBySlug(group.project.slug) || {
-        teams: [],
-      }).teams.sort((a, b) => a.slug.localeCompare(b.slug)),
-      this.state.filter
-    ).map(team => ({
-      id: buildTeamId(team.id),
-      display: `#${team.slug}`,
-      email: team.id,
-      team,
-    }));
+    return (ProjectsStore.getBySlug(group.project.slug) || {
+      teams: [],
+    }).teams
+      .sort((a, b) => a.slug.localeCompare(b.slug))
+      .map(team => ({
+        id: buildTeamId(team.id),
+        display: `#${team.slug}`,
+        email: team.id,
+        team,
+      }));
   },
 
   onGroupChange(itemIds) {
@@ -145,258 +132,193 @@ const AssigneeSelector = createReactClass({
 
   assignToUser(user) {
     assignToUser({id: this.props.id, user});
-    this.setState({filter: '', loading: true});
+    this.setState({loading: true});
   },
 
   assignToTeam(team) {
     assignToActor({actor: {id: team.id, type: 'team'}, id: this.props.id});
-    this.setState({filter: '', loading: true});
-  },
-
-  clearAssignTo() {
-    //clears assignment
-    clearAssignment(this.props.id);
-    this.setState({filter: '', loading: true});
-  },
-
-  onFilterKeyUp(evt) {
-    if (evt.key === 'Escape') {
-      this.onDropdownClose();
-    } else {
-      this.setState({
-        filter: evt.target.value,
-      });
-    }
+    this.setState({loading: true});
   },
 
-  onFilterKeyDown(evt) {
-    if (evt.key === 'Enter' && this.state.filter) {
-      let members = AssigneeSelector.filterAssignees(
-        this.state.memberList,
-        this.state.filter
-      );
-      if (members.length > 0) {
-        this.assignToUser(members[0]);
-      }
+  handleAssign({value: {type, assignee}}, state, e) {
+    if (type === 'member') {
+      this.assignToUser(assignee);
     }
-  },
 
-  onFilterMount(ref) {
-    if (ref) {
-      // focus filter input
-      ref.focus();
+    if (type === 'team') {
+      this.assignToTeam(assignee);
     }
-  },
 
-  onFilterClick(e) {
-    // Prevent dropdown menu from closing when filter input is clicked
     e.stopPropagation();
   },
 
-  onDropdownOpen() {
-    this.setState({isOpen: true});
-  },
-
-  onDropdownClose() {
-    this.setState({
-      isOpen: false,
-      filter: '',
-    });
-  },
-
-  highlight(text, highlightText) {
-    if (!highlightText) {
-      return text;
-    }
-    highlightText = highlightText.toLowerCase();
-    let idx = text.toLowerCase().indexOf(highlightText);
-    if (idx === -1) {
-      return text;
-    }
-    return (
-      <React.Fragment>
-        {text.substr(0, idx)}
-        <strong className="highlight">{text.substr(idx, highlightText.length)}</strong>
-        {text.substr(idx + highlightText.length)}
-      </React.Fragment>
-    );
+  clearAssignTo(e) {
+    // clears assignment
+    clearAssignment(this.props.id);
+    this.setState({loading: true});
+    e.stopPropagation();
   },
 
-  renderMemberNodes() {
-    let {filter, memberList} = this.state;
+  renderNewMemberNodes() {
+    let {memberList} = this.state;
     let {size} = this.props;
-    let members = AssigneeSelector.filterAssignees(memberList, filter);
-    members = AssigneeSelector.putSessionUserFirst(members);
-
-    return members.map(item => {
-      return (
-        <MenuItem
-          key={buildUserId(item.id)}
-          onSelect={this.assignToUser.bind(this, item)}
-        >
-          <MenuItemWrapper>
+    let members = AssigneeSelectorComponent.putSessionUserFirst(memberList);
+
+    return members.map(member => {
+      return {
+        value: {type: 'member', assignee: member},
+        searchKey: `${member.email} ${member.name} ${member.slug}`,
+        label: ({inputValue}) => (
+          <MenuItemWrapper
+            key={buildUserId(member.id)}
+            onSelect={this.assignToUser.bind(this, member)}
+          >
             <IconContainer>
-              <Avatar user={item} size={size} />
+              <Avatar user={member} size={size} />
             </IconContainer>
-            <Label>{this.highlight(item.name || item.email, filter)}</Label>
+            <Label>
+              <Highlight text={inputValue}>{member.name || member.email}</Highlight>
+            </Label>
           </MenuItemWrapper>
-        </MenuItem>
-      );
+        ),
+      };
     });
   },
 
-  renderTeamNodes() {
-    let {filter} = this.state;
+  renderNewTeamNodes() {
     let {size} = this.props;
 
     return this.assignableTeams().map(({id, display, team}) => {
-      return (
-        <MenuItem key={id} onSelect={this.assignToTeam.bind(this, team)}>
-          <MenuItemWrapper>
+      return {
+        value: {type: 'team', assignee: team},
+        searchKey: team.slug,
+        label: ({inputValue}) => (
+          <MenuItemWrapper key={id} onSelect={this.assignToTeam.bind(this, team)}>
             <IconContainer>
               <Avatar team={team} size={size} />
             </IconContainer>
-            <Label>{this.highlight(display, filter)}</Label>
+            <Label>
+              <Highlight text={inputValue}>{display}</Highlight>
+            </Label>
           </MenuItemWrapper>
-        </MenuItem>
-      );
+        ),
+      };
     });
   },
 
-  renderDropdownItems() {
-    let {loading, assignedTo} = this.state;
-    let teams = this.renderTeamNodes();
-    let members = this.renderMemberNodes();
-    let hasTeamsAndMembers = teams.length && members.length;
-    let hasTeamsOrMembers = teams.length || members.length;
+  renderNewDropdownItems() {
+    let teams = this.renderNewTeamNodes();
+    let members = this.renderNewMemberNodes();
 
-    return (
-      <React.Fragment>
-        <MenuItem noAnchor>
-          <input
-            type="text"
-            className="form-control input-sm"
-            placeholder={t('Filter teams and people')}
-            ref={ref => this.onFilterMount(ref)}
-            onClick={this.onFilterClick}
-            onKeyDown={this.onFilterKeyDown}
-            onKeyUp={this.onFilterKeyUp}
-          />
-        </MenuItem>
-
-        {assignedTo && (
-          <MenuItem
-            className="clear-assignee"
-            disabled={!loading}
-            onSelect={this.clearAssignTo}
-          >
-            <MenuItemWrapper py={0}>
-              <IconContainer>
-                <ClearAssigneeIcon />
-              </IconContainer>
-              <Label>{t('Clear Assignee')}</Label>
-            </MenuItemWrapper>
-          </MenuItem>
-        )}
-
-        <li>
-          <ul>
-            {teams}
-            {hasTeamsAndMembers ? <Divider key="divider" /> : null}
-            {members}
-            {!hasTeamsOrMembers && (
-              <li className="not-found">
-                <span>{t('No matches found.')}</span>
-              </li>
-            )}
-          </ul>
-        </li>
-      </React.Fragment>
-    );
+    return [
+      {id: 'team-header', hideGroupLabel: true, items: teams},
+      {id: 'members-header', items: members},
+    ];
   },
 
   render() {
-    let {loading, assignedTo} = this.state;
-    let group = GroupStore.get(this.props.id);
-
-    let org = this.context.organization;
-    let access = new Set(org.access);
-
-    let assigneeListLoading = this.state.memberList === null || !group;
-
-    if (loading) {
-      return (
-        <div>
-          <div className="assignee-selector anchor-right">
-            <LoadingIndicator mini style={{marginRight: '10px'}} />
-          </div>
-        </div>
-      );
-    }
-
-    let className = classNames('assignee-selector anchor-right', {
-      unassigned: !assignedTo,
-    });
+    let {className} = this.props;
+    let {loading, assignedTo, memberList} = this.state;
+    let canInvite = ConfigStore.get('invitesEnabled');
 
     return (
       <div className={className}>
-        <DropdownLink
-          className="assignee-selector-toggle"
-          onOpen={this.onDropdownOpen}
-          onClose={this.onDropdownClose}
-          isOpen={this.state.isOpen}
-          alwaysRenderMenu={false}
-          title={
-            assignedTo ? (
-              <ActorAvatar actor={assignedTo} className="avatar" size={24} />
-            ) : (
-              <span className="icon-user" />
-            )
-          }
-        >
-          {assigneeListLoading ? (
-            <li>
-              <FlowLayout center className="list-loading-container">
-                <LoadingIndicator mini />
-              </FlowLayout>
-            </li>
-          ) : (
-            this.renderDropdownItems()
-          )}
-          {ConfigStore.get('invitesEnabled') &&
-            access.has('org:write') && (
-              <React.Fragment>
-                <Divider />
-                <MenuItem
-                  className="invite-member"
+        {loading && (
+          <LoadingIndicator mini style={{height: '24px', margin: 0, marginRight: 11}} />
+        )}
+        {!loading && (
+          <DropdownAutoComplete
+            maxHeight={400}
+            zIndex={2}
+            onOpen={e => {
+              // This can be called multiple times and does not always have `event`
+              if (!e) return;
+              e.stopPropagation();
+            }}
+            busy={memberList === null}
+            items={memberList !== null ? this.renderNewDropdownItems() : []}
+            alignMenu="right"
+            onSelect={this.handleAssign}
+            itemSize="small"
+            searchPlaceholder={t('Filter teams and people')}
+            menuWithArrow
+            menuHeader={
+              assignedTo && (
+                <ClearAssignee
+                  data-test-id="clear-assignee"
                   disabled={!loading}
-                  to={`/settings/${this.context.organization.slug}/members/new/`}
-                  query={{referrer: 'assignee_selector'}}
+                  onClick={this.clearAssignTo}
+                  py={0}
                 >
-                  <MenuItemWrapper>
-                    <IconContainer>
-                      <InviteMemberIcon />
-                    </IconContainer>
-                    <Label>{t('Invite Member')}</Label>
-                  </MenuItemWrapper>
-                </MenuItem>
-              </React.Fragment>
-            )}
-        </DropdownLink>
+                  <IconContainer>
+                    <ClearAssigneeIcon />
+                  </IconContainer>
+                  <Label>{t('Clear Assignee')}</Label>
+                </ClearAssignee>
+              )
+            }
+            menuFooter={
+              canInvite && (
+                <Feature access={['org:write']}>
+                  <InviteMemberLink
+                    data-test-id="invite-member"
+                    disabled={loading}
+                    to={`/settings/${this.context.organization
+                      .slug}/members/new/?referrer=assignee_selector`}
+                  >
+                    <MenuItemWrapper>
+                      <IconContainer>
+                        <InviteMemberIcon />
+                      </IconContainer>
+                      <Label>{t('Invite Member')}</Label>
+                    </MenuItemWrapper>
+                  </InviteMemberLink>
+                </Feature>
+              )
+            }
+          >
+            {({getActorProps}) => {
+              return (
+                <DropdownButton {...getActorProps({})}>
+                  {assignedTo ? (
+                    <ActorAvatar actor={assignedTo} className="avatar" size={20} />
+                  ) : (
+                    <IconUser src="icon-user" />
+                  )}
+                  <StyledChevron src="icon-chevron-down" />
+                </DropdownButton>
+              );
+            }}
+          </DropdownAutoComplete>
+        )}
       </div>
     );
   },
 });
 
+const AssigneeSelector = styled(AssigneeSelectorComponent)`
+  display: flex;
+  justify-content: flex-end;
+
+  /* manually align menu underneath dropdown caret */
+  /* stylelint-disable-next-line no-duplicate-selectors */
+  ${StyledMenu} {
+    right: -14px;
+  }
+`;
+
 export default AssigneeSelector;
+export {AssigneeSelectorComponent};
 
 const getSvgStyle = () => `
   font-size: 16px;
   opacity: 0.3;
 `;
 
-const Divider = styled.hr`
-  margin: 0;
+const IconUser = styled(InlineSvg)`
+  color: ${p => p.theme.gray3};
+  height: 24px;
+  width: 24px;
 `;
 
 const IconContainer = styled.div`
@@ -409,17 +331,27 @@ const IconContainer = styled.div`
 `;
 
 const MenuItemWrapper = styled(({py, ...props}) => <div {...props} />)`
+  cursor: pointer;
   display: flex;
   align-items: center;
-  padding: 5px 8px;
-  ${p =>
-    typeof p.py !== 'undefined' &&
+  font-size: 13px;
+  ${props =>
+    typeof props.py !== 'undefined' &&
     `
-      padding-top: ${p.py};
-      padding-bottom: ${p.py};
+      padding-top: ${props.py};
+      padding-bottom: ${props.py};
     `};
 `;
 
+const ClearAssignee = styled(MenuItemWrapper)`
+  background: rgba(52, 60, 69, 0.03);
+  border-bottom: 1px solid rgba(52, 60, 69, 0.06);
+`;
+
+const InviteMemberLink = styled(Link)`
+  color: ${p => p.theme.textColor};
+`;
+
 const Label = styled(TextOverflow)`
   margin-left: 6px;
 `;
@@ -433,3 +365,15 @@ const ClearAssigneeIcon = styled(props => (
 const InviteMemberIcon = styled(props => <InlineSvg {...props} src="icon-circle-add" />)`
   ${getSvgStyle};
 `;
+
+const StyledChevron = styled(InlineSvg)`
+  margin-left: ${space(1)};
+  width: 12px;
+  height: 12px;
+`;
+
+const DropdownButton = styled('div')`
+  display: flex;
+  align-items: center;
+  font-size: 20px;
+`;
diff --git a/src/sentry/static/sentry/app/components/autoComplete.jsx b/src/sentry/static/sentry/app/components/autoComplete.jsx
index f37f66e699..b13be98f78 100644
--- a/src/sentry/static/sentry/app/components/autoComplete.jsx
+++ b/src/sentry/static/sentry/app/components/autoComplete.jsx
@@ -42,6 +42,7 @@ class AutoComplete extends React.Component {
     onSelect: PropTypes.func,
     onOpen: PropTypes.func,
     onClose: PropTypes.func,
+    onMenuOpen: PropTypes.func,
   };
 
   static defaultProps = {
@@ -143,7 +144,7 @@ class AutoComplete extends React.Component {
       e.key === 'Enter' && this.items.size && this.items.has(this.state.highlightedIndex);
 
     if (shouldSelectWithEnter) {
-      this.handleSelect(this.items.get(this.state.highlightedIndex));
+      this.handleSelect(this.items.get(this.state.highlightedIndex), e);
       e.preventDefault();
     }
 
@@ -179,10 +180,10 @@ class AutoComplete extends React.Component {
   /**
    * When an item is selected via clicking or using the keyboard (e.g. pressing "Enter")
    */
-  handleSelect = item => {
+  handleSelect = (item, e) => {
     let {onSelect, itemToString} = this.props;
 
-    callIfFunction(onSelect, item, this.state);
+    callIfFunction(onSelect, item, this.state, e);
 
     this.closeMenu();
     this.setState({
@@ -271,11 +272,15 @@ class AutoComplete extends React.Component {
   });
 
   render() {
-    let {children} = this.props;
+    let {children, onMenuOpen} = this.props;
     let isOpen = this.getOpenState();
 
     return (
-      <DropdownMenu isOpen={isOpen} onClickOutside={this.handleClickOutside}>
+      <DropdownMenu
+        isOpen={isOpen}
+        onClickOutside={this.handleClickOutside}
+        onOpen={onMenuOpen}
+      >
         {dropdownMenuProps =>
           children({
             ...dropdownMenuProps,
diff --git a/src/sentry/static/sentry/app/components/avatar/baseAvatar.jsx b/src/sentry/static/sentry/app/components/avatar/baseAvatar.jsx
index ee4f432865..8b6f3a8e40 100644
--- a/src/sentry/static/sentry/app/components/avatar/baseAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar/baseAvatar.jsx
@@ -131,7 +131,7 @@ class BaseAvatar extends React.Component {
   }
 
   render() {
-    let {className, hasTooltip, size, tooltip, tooltipOptions, style} = this.props;
+    let {className, round, hasTooltip, size, tooltip, tooltipOptions, style} = this.props;
     let sizeStyle = {};
 
     if (size) {
@@ -145,6 +145,7 @@ class BaseAvatar extends React.Component {
       <Tooltip title={tooltip} tooltipOptions={tooltipOptions} disabled={!hasTooltip}>
         <StyledBaseAvatar
           className={classNames('avatar', className)}
+          round={round}
           style={{
             ...sizeStyle,
             ...style,
@@ -164,6 +165,8 @@ export default BaseAvatar;
 // sensible default.
 const StyledBaseAvatar = styled('span')`
   flex-shrink: 0;
+  background-color: ${p => p.theme.whiteDark};
+  ${p => p.round && 'border-radius: 100%;'};
 `;
 
 const Image = styled('img')`
diff --git a/src/sentry/static/sentry/app/components/dropdownAutoComplete.jsx b/src/sentry/static/sentry/app/components/dropdownAutoComplete.jsx
index c2427a70fe..42ff3e101e 100644
--- a/src/sentry/static/sentry/app/components/dropdownAutoComplete.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownAutoComplete.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import styled from 'react-emotion';
 
 import DropdownAutoCompleteMenu from 'app/components/dropdownAutoCompleteMenu';
 
@@ -27,9 +28,14 @@ class DropdownAutoComplete extends React.Component {
           } = renderProps.getActorProps();
 
           return (
-            <div role="button" onClick={renderProps.actions.open} {...actorProps}>
+            <Actor
+              isOpen={renderProps.isOpen}
+              role="button"
+              onClick={renderProps.actions.open}
+              {...actorProps}
+            >
               {children(renderProps)}
-            </div>
+            </Actor>
           );
         }}
       </DropdownAutoCompleteMenu>
@@ -37,4 +43,10 @@ class DropdownAutoComplete extends React.Component {
   }
 }
 
+const Actor = styled('div')`
+  position: relative;
+  /* This is needed to be able to cover dropdown menu so that it looks like one unit */
+  ${p => p.isOpen && `z-index: ${p.theme.zIndex.dropdownAutocomplete.actor}`};
+`;
+
 export default DropdownAutoComplete;
diff --git a/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx b/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
index 8890618545..990bcf9ab7 100644
--- a/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
@@ -32,6 +32,8 @@ class DropdownAutoCompleteMenu extends React.Component {
               searchKey: PropTypes.string,
             })
           ),
+          // Should hide group label
+          hideGroupLabel: PropTypes.bool,
         })
       ),
     ]),
@@ -48,6 +50,11 @@ class DropdownAutoCompleteMenu extends React.Component {
      */
     onChange: PropTypes.func,
 
+    /**
+     * Callback for when dropdown menu opens
+     */
+    onOpen: PropTypes.func,
+
     /**
      * Message to display when there are no items initially
      */
@@ -66,10 +73,32 @@ class DropdownAutoCompleteMenu extends React.Component {
      * Dropdown menu alignment.
      */
     alignMenu: PropTypes.oneOf(['left', 'right']),
+
     /**
      * Should menu visually lock to a direction (so we don't display a rounded corner)
      */
     blendCorner: PropTypes.bool,
+
+    /**
+     * Max height of dropdown menu. Units are assumed as `px` if number, otherwise will assume string has units
+     */
+    maxHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
+
+    /**
+     * Search input's placeholder text
+     */
+    searchPlaceholder: PropTypes.string,
+
+    /**
+     * Size for dropdown items
+     */
+    itemSize: PropTypes.oneOf(['zero', 'small', '']),
+
+    /**
+     * Changes the menu style to have an arrow at the top
+     */
+    menuWithArrow: PropTypes.bool,
+
     menuFooter: PropTypes.element,
     menuHeader: PropTypes.element,
 
@@ -84,8 +113,10 @@ class DropdownAutoCompleteMenu extends React.Component {
 
   static defaultProps = {
     onSelect: () => {},
+    maxHeight: 300,
     blendCorner: true,
     emptyMessage: t('No items'),
+    searchPlaceholder: t('Filter search'),
   };
 
   filterItems = (items, inputValue) =>
@@ -127,16 +158,21 @@ class DropdownAutoCompleteMenu extends React.Component {
     let {
       onSelect,
       onChange,
+      onOpen,
       children,
       items,
       menuProps,
       alignMenu,
       blendCorner,
+      maxHeight,
       emptyMessage,
       noResultsMessage,
       style,
       menuHeader,
       menuFooter,
+      menuWithArrow,
+      searchPlaceholder,
+      itemSize,
       busy,
       ...props
     } = this.props;
@@ -147,6 +183,7 @@ class DropdownAutoCompleteMenu extends React.Component {
         itemToString={item => ''}
         onSelect={onSelect}
         inputIsActor={false}
+        onOpen={onOpen}
         {...props}
       >
         {({
@@ -188,12 +225,13 @@ class DropdownAutoCompleteMenu extends React.Component {
                     css: this.props.css,
                     blendCorner,
                     alignMenu,
+                    menuWithArrow,
                   })}
                 >
                   <Flex>
                     <StyledInput
                       autoFocus
-                      placeholder="Filter search"
+                      placeholder={searchPlaceholder}
                       {...getInputProps({onChange})}
                     />
                     <InputLoadingWrapper>
@@ -201,36 +239,46 @@ class DropdownAutoCompleteMenu extends React.Component {
                     </InputLoadingWrapper>
                   </Flex>
                   <div>
-                    {menuHeader && <StyledLabel>{menuHeader}</StyledLabel>}
-
-                    {showNoItems && <EmptyMessage>{emptyMessage}</EmptyMessage>}
-                    {showNoResultsMessage && (
-                      <EmptyMessage>
-                        {noResultsMessage || `${emptyMessage} ${t('found')}`}
-                      </EmptyMessage>
-                    )}
-                    {busy && (
-                      <Flex justify="center" p={1}>
-                        <EmptyMessage>{t('Searching...')}</EmptyMessage>
-                      </Flex>
-                    )}
-                    {!busy &&
-                      autoCompleteResults.map(
-                        ({index, ...item}) =>
-                          item.groupLabel ? (
-                            <StyledLabel key={item.value}>{item.label}</StyledLabel>
-                          ) : (
-                            <AutoCompleteItem
-                              key={`${item.value}-${index}`}
-                              index={index}
-                              highlightedIndex={highlightedIndex}
-                              {...getItemProps({item, index})}
-                            >
-                              {item.label}
-                            </AutoCompleteItem>
-                          )
+                    {menuHeader && <LabelWithPadding>{menuHeader}</LabelWithPadding>}
+
+                    <StyledItemList maxHeight={maxHeight}>
+                      {showNoItems && <EmptyMessage>{emptyMessage}</EmptyMessage>}
+                      {showNoResultsMessage && (
+                        <EmptyMessage>
+                          {noResultsMessage || `${emptyMessage} ${t('found')}`}
+                        </EmptyMessage>
+                      )}
+                      {busy && (
+                        <Flex justify="center" p={1}>
+                          <EmptyMessage>{t('Searching...')}</EmptyMessage>
+                        </Flex>
                       )}
-                    {menuFooter && <StyledLabel>{menuFooter}</StyledLabel>}
+                      {!busy &&
+                        autoCompleteResults.map(
+                          ({index, ...item}) =>
+                            item.groupLabel ? (
+                              !item.hideGroupLabel && (
+                                <LabelWithBorder key={item.label || item.id}>
+                                  {item.label && <GroupLabel>{item.label}</GroupLabel>}
+                                </LabelWithBorder>
+                              )
+                            ) : (
+                              <AutoCompleteItem
+                                size={itemSize}
+                                key={`${item.value}-${index}`}
+                                index={index}
+                                highlightedIndex={highlightedIndex}
+                                {...getItemProps({item, index})}
+                              >
+                                {typeof item.label === 'function'
+                                  ? item.label({inputValue})
+                                  : item.label}
+                              </AutoCompleteItem>
+                            )
+                        )}
+                    </StyledItemList>
+
+                    {menuFooter && <LabelWithPadding>{menuFooter}</LabelWithPadding>}
                   </div>
                 </StyledMenu>
               )}
@@ -264,6 +312,47 @@ const getMenuBorderRadius = ({blendCorner, alignMenu, theme}) => {
   `;
 };
 
+const getMenuArrow = ({menuWithArrow, alignMenu}) => {
+  if (!menuWithArrow) return '';
+  let alignRight = alignMenu === 'right';
+
+  return css`
+    top: 32px;
+
+    &::before {
+      width: 0;
+      height: 0;
+      border-left: 9px solid transparent;
+      border-right: 9px solid transparent;
+      border-bottom: 9px solid rgba(52, 60, 69, 0.35);
+      content: '';
+      display: block;
+      position: absolute;
+      top: -9px;
+      left: 10px;
+      z-index: -2;
+      ${alignRight && 'left: auto;'};
+      ${alignRight && 'right: 10px;'};
+    }
+
+    &:after {
+      width: 0;
+      height: 0;
+      border-left: 8px solid transparent;
+      border-right: 8px solid transparent;
+      border-bottom: 8px solid #fff;
+      content: '';
+      display: block;
+      position: absolute;
+      top: -8px;
+      left: 11px;
+      z-index: -1;
+      ${alignRight && 'left: auto;'};
+      ${alignRight && 'right: 11px;'};
+    }
+  `;
+};
+
 const AutoCompleteRoot = styled(({isOpen, ...props}) => <div {...props} />)`
   position: relative;
   display: inline-block;
@@ -285,20 +374,27 @@ const StyledInput = styled(Input)`
   &:hover {
     border: 1px solid transparent;
     border-bottom: 1px solid ${p => p.theme.borderLight};
-    border-radius: 0;
+    border-radius: ${p => `${p.theme.borderRadius} ${p.theme.borderRadius} 0 0`};
     box-shadow: none;
     font-size: 13px;
-    padding: ${space(2)} ${space(1)};
+    padding: ${space(1)};
     font-weight: normal;
     color: ${p => p.gray2};
   }
 `;
 
+const getItemPaddingForSize = size => {
+  if (size === 'small') return `${space(0.5)} ${space(1)}`;
+  if (size === 'zero') return '0';
+
+  return space(1);
+};
+
 const AutoCompleteItem = styled('div')`
   font-size: 0.9em;
   background-color: ${p =>
     p.index == p.highlightedIndex ? p.theme.offWhite : 'transparent'};
-  padding: ${space(1)};
+  padding: ${p => getItemPaddingForSize(p.size)};
   cursor: pointer;
   border-bottom: 1px solid ${p => p.theme.borderLighter};
 
@@ -311,8 +407,7 @@ const AutoCompleteItem = styled('div')`
   }
 `;
 
-const StyledLabel = styled('div')`
-  padding: ${space(0.25)} ${space(1)};
+const LabelWithBorder = styled('div')`
   background-color: ${p => p.theme.offWhite};
   border: 1px solid ${p => p.theme.borderLight};
   border-width: 1px 0;
@@ -320,6 +415,17 @@ const StyledLabel = styled('div')`
   &:first-child {
     border-top: none;
   }
+  &:last-child {
+    border-bottom: none;
+  }
+`;
+
+const LabelWithPadding = styled(LabelWithBorder)`
+  padding: ${space(0.25)} ${space(1)};
+`;
+
+const GroupLabel = styled('div')`
+  padding: ${space(0.25)} ${space(1)};
 `;
 
 const StyledMenu = styled('div')`
@@ -328,14 +434,22 @@ const StyledMenu = styled('div')`
   position: absolute;
   top: calc(100% - 1px);
   min-width: 250px;
-  z-index: 1;
-  max-height: 300px;
-  overflow-y: auto;
+  z-index: ${p =>
+    p.theme.zIndex.dropdownAutocomplete
+      .menu}; /* This is needed to be able to cover e.g. pagination buttons, but also be below dropdown actor button's zindex */
   right: 0;
   box-shadow: ${p => p.theme.dropShadowLight};
 
   ${getMenuBorderRadius};
   ${({alignMenu}) => (alignMenu === 'left' ? 'left: 0;' : '')};
+
+  ${getMenuArrow};
+`;
+
+const StyledItemList = styled('div')`
+  max-height: ${p =>
+    typeof p.maxHeight === 'number' ? `${p.maxHeight}px` : p.maxHeight};
+  overflow-y: auto;
 `;
 
 const EmptyMessage = styled('div')`
@@ -346,3 +460,5 @@ const EmptyMessage = styled('div')`
 `;
 
 export default DropdownAutoCompleteMenu;
+
+export {StyledMenu};
diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.jsx b/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.jsx
index df6f52e0bc..86d2471f70 100644
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.jsx
@@ -223,7 +223,7 @@ const StyledAvatar = styled(Avatar)`
   margin-bottom: 2px;
   margin-right: ${p => (p.collapsed ? '0' : '12px')};
   box-shadow: 0 2px 0 rgba(0, 0, 0, 0.08);
-  border-radius: 4px;
+  border-radius: 6px; /* Fixes background bleeding on corners */
 `;
 
 const OrgAndUserMenu = styled('div')`
diff --git a/src/sentry/static/sentry/app/components/stream/group.jsx b/src/sentry/static/sentry/app/components/stream/group.jsx
index 3c802746bc..7da62e4ef5 100644
--- a/src/sentry/static/sentry/app/components/stream/group.jsx
+++ b/src/sentry/static/sentry/app/components/stream/group.jsx
@@ -1,24 +1,23 @@
-import jQuery from 'jquery';
+import {Flex, Box} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
+import jQuery from 'jquery';
 import styled from 'react-emotion';
-import {Flex, Box} from 'grid-emotion';
 
+import {PanelItem} from 'app/components/panels';
+import {valueIsEqual} from 'app/utils';
 import AssigneeSelector from 'app/components/assigneeSelector';
 import Count from 'app/components/count';
+import EventOrGroupExtraDetails from 'app/components/eventOrGroupExtraDetails';
+import EventOrGroupHeader from 'app/components/eventOrGroupHeader';
 import GroupChart from 'app/components/stream/groupChart';
 import GroupCheckBox from 'app/components/stream/groupCheckBox';
-import ProjectState from 'app/mixins/projectState';
 import GroupStore from 'app/stores/groupStore';
 import GuideAnchor from 'app/components/assistant/guideAnchor';
+import ProjectState from 'app/mixins/projectState';
 import SelectedGroupStore from 'app/stores/selectedGroupStore';
-import EventOrGroupHeader from 'app/components/eventOrGroupHeader';
-import EventOrGroupExtraDetails from 'app/components/eventOrGroupExtraDetails';
-import {PanelItem} from 'app/components/panels';
-
-import {valueIsEqual} from 'app/utils';
 
 const StreamGroup = createReactClass({
   displayName: 'StreamGroup',
diff --git a/src/sentry/static/sentry/app/utils/theme.jsx b/src/sentry/static/sentry/app/utils/theme.jsx
index 76cf9b2e5b..5ac1eecd41 100644
--- a/src/sentry/static/sentry/app/utils/theme.jsx
+++ b/src/sentry/static/sentry/app/utils/theme.jsx
@@ -67,6 +67,10 @@ const theme = {
     dropdown: 1001,
     modal: 10000,
     toast: 10001,
+    dropdownAutocomplete: {
+      actor: 3, // needs to be above menu
+      menu: 2, // needs to be below actor but above other page elements (e.g. pagination)
+    },
   },
 
   alert: {
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index a6ce7bcc34..6c9e117051 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -1639,95 +1639,6 @@ ul.faces {
   }
 }
 
-/**
-* Assignee Selector
-* ============================================================================
-*/
-
-.assignee-selector {
-  display: flex;
-  justify-content: flex-end;
-
-  .icon-arrow-down {
-    position: static;
-    top: 0;
-  }
-
-  .dropdown-toggle {
-    color: inherit;
-  }
-
-  .dropdown-menu {
-    right: -14px !important;
-    min-width: 180px;
-    max-width: 250px;
-    padding: 0;
-    font-size: 13px;
-
-    .form-control {
-      border: 0;
-      border-bottom: 1px solid #e9ebec;
-      padding-bottom: 8px;
-      box-shadow: none;
-      border-radius: 0;
-      font-size: 13px;
-
-      &:focus {
-        box-shadow: none;
-      }
-    }
-
-    ul {
-      .list-unstyled();
-      max-height: 500px;
-      overflow-y: auto;
-    }
-
-    li {
-      &.not-found span {
-        padding: 5px 8px;
-        display: block;
-        font-style: italic;
-        text-align: center;
-      }
-
-      strong {
-        font-weight: normal;
-        background: lighten(@yellow, 15);
-      }
-
-      a {
-        padding: 0;
-      }
-    }
-  }
-
-  &.unassigned {
-    .icon-user {
-      display: block;
-      margin-right: 3px;
-      font-size: 20px;
-    }
-  }
-
-  .invite-member a {
-    .icon-plus {
-      font-size: 16px;
-      opacity: 0.3;
-      margin-right: 5px;
-    }
-  }
-
-  .clear-assignee a {
-    background: rgba(52, 60, 69, 0.03);
-    border-bottom: 1px solid rgba(52, 60, 69, 0.06);
-  }
-
-  .list-loading-container {
-    padding: 15px 0 10px 0;
-  }
-}
-
 /**
 * Box
 * ============================================================================
diff --git a/tests/js/spec/components/__snapshots__/dropdownAutoCompleteMenu.spec.jsx.snap b/tests/js/spec/components/__snapshots__/dropdownAutoCompleteMenu.spec.jsx.snap
index 62094109b9..1d41292e4b 100644
--- a/tests/js/spec/components/__snapshots__/dropdownAutoCompleteMenu.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/dropdownAutoCompleteMenu.spec.jsx.snap
@@ -1,25 +1,349 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
 exports[`DropdownAutoCompleteMenu renders with a group 1`] = `
-<AutoComplete
-  disabled={false}
-  inputIsActor={false}
+<DropdownAutoCompleteMenu
+  blendCorner={true}
+  emptyMessage="No items"
   isOpen={true}
-  itemToString={[Function]}
+  items={
+    Array [
+      Object {
+        "items": Array [
+          Object {
+            "label": <div>
+              New Zealand
+            </div>,
+            "value": "new zealand",
+          },
+          Object {
+            "label": <div>
+              Australia
+            </div>,
+            "value": "australia",
+          },
+        ],
+        "label": "countries",
+        "value": "countries",
+      },
+    ]
+  }
+  maxHeight={300}
   onSelect={[Function]}
-  resetInputOnClose={true}
-/>
+  searchPlaceholder="Filter search"
+>
+  <AutoComplete
+    disabled={false}
+    inputIsActor={false}
+    isOpen={true}
+    itemToString={[Function]}
+    onSelect={[Function]}
+    resetInputOnClose={true}
+  >
+    <DropdownMenu
+      isOpen={true}
+      keepMenuOpen={false}
+      onClickOutside={[Function]}
+    >
+      <AutoCompleteRoot>
+        <Component
+          className="css-6v04yn-AutoCompleteRoot ejumqxq0"
+        >
+          <div
+            className="css-6v04yn-AutoCompleteRoot ejumqxq0"
+          >
+            Click Me!
+            <StyledMenu
+              blendCorner={true}
+              innerRef={[Function]}
+              onClick={[Function]}
+              onMouseDown={[Function]}
+              onMouseEnter={[Function]}
+              onMouseLeave={[Function]}
+            >
+              <div
+                className="css-rlm8zr-StyledMenu-getMenuBorderRadius ejumqxq7"
+                onClick={[Function]}
+                onMouseDown={[Function]}
+                onMouseEnter={[Function]}
+                onMouseLeave={[Function]}
+              >
+                <Flex>
+                  <Base
+                    className="css-sncxrr"
+                  >
+                    <div
+                      className="css-sncxrr"
+                      is={null}
+                    >
+                      <StyledInput
+                        autoFocus={true}
+                        onBlur={[Function]}
+                        onChange={[Function]}
+                        onFocus={[Function]}
+                        onKeyDown={[Function]}
+                        placeholder="Filter search"
+                        value=""
+                      >
+                        <input
+                          autoFocus={true}
+                          className="css-p4015a-Input-inputStyles-StyledInput ejumqxq2"
+                          onBlur={[Function]}
+                          onChange={[Function]}
+                          onFocus={[Function]}
+                          onKeyDown={[Function]}
+                          placeholder="Filter search"
+                          value=""
+                        />
+                      </StyledInput>
+                      <InputLoadingWrapper>
+                        <Base
+                          className="css-1ren11q-InputLoadingWrapper ejumqxq1"
+                        >
+                          <div
+                            className="css-1ren11q-InputLoadingWrapper ejumqxq1"
+                            is={null}
+                          />
+                        </Base>
+                      </InputLoadingWrapper>
+                    </div>
+                  </Base>
+                </Flex>
+                <div>
+                  <StyledItemList
+                    maxHeight={300}
+                  >
+                    <div
+                      className="css-5kh8cy-StyledItemList ejumqxq8"
+                    >
+                      <LabelWithBorder
+                        key="countries"
+                      >
+                        <div
+                          className="css-o8s6pc-LabelWithBorder ejumqxq4"
+                        >
+                          <GroupLabel>
+                            <div
+                              className="css-1oz0skv-GroupLabel ejumqxq6"
+                            >
+                              countries
+                            </div>
+                          </GroupLabel>
+                        </div>
+                      </LabelWithBorder>
+                      <AutoCompleteItem
+                        highlightedIndex={0}
+                        index={0}
+                        key="new zealand-0"
+                        onClick={[Function]}
+                      >
+                        <div
+                          className="css-le5ima-AutoCompleteItem ejumqxq3"
+                          onClick={[Function]}
+                        >
+                          <div>
+                            New Zealand
+                          </div>
+                        </div>
+                      </AutoCompleteItem>
+                      <AutoCompleteItem
+                        highlightedIndex={0}
+                        index={1}
+                        key="australia-1"
+                        onClick={[Function]}
+                      >
+                        <div
+                          className="css-14kg2cv-AutoCompleteItem ejumqxq3"
+                          onClick={[Function]}
+                        >
+                          <div>
+                            Australia
+                          </div>
+                        </div>
+                      </AutoCompleteItem>
+                    </div>
+                  </StyledItemList>
+                </div>
+              </div>
+            </StyledMenu>
+          </div>
+        </Component>
+      </AutoCompleteRoot>
+    </DropdownMenu>
+  </AutoComplete>
+</DropdownAutoCompleteMenu>
 `;
 
 exports[`DropdownAutoCompleteMenu renders without a group 1`] = `
-<AutoComplete
-  disabled={false}
-  inputIsActor={false}
+<DropdownAutoCompleteMenu
+  blendCorner={true}
+  emptyMessage="No items"
   isOpen={true}
-  itemToString={[Function]}
+  items={
+    Array [
+      Object {
+        "label": <div>
+          Apple
+        </div>,
+        "value": "apple",
+      },
+      Object {
+        "label": <div>
+          Bacon
+        </div>,
+        "value": "bacon",
+      },
+      Object {
+        "label": <div>
+          Corn
+        </div>,
+        "value": "corn",
+      },
+    ]
+  }
+  maxHeight={300}
   onSelect={[Function]}
-  resetInputOnClose={true}
-/>
+  searchPlaceholder="Filter search"
+>
+  <AutoComplete
+    disabled={false}
+    inputIsActor={false}
+    isOpen={true}
+    itemToString={[Function]}
+    onSelect={[Function]}
+    resetInputOnClose={true}
+  >
+    <DropdownMenu
+      isOpen={true}
+      keepMenuOpen={false}
+      onClickOutside={[Function]}
+    >
+      <AutoCompleteRoot>
+        <Component
+          className="css-6v04yn-AutoCompleteRoot ejumqxq0"
+        >
+          <div
+            className="css-6v04yn-AutoCompleteRoot ejumqxq0"
+          >
+            Click Me!
+            <StyledMenu
+              blendCorner={true}
+              innerRef={[Function]}
+              onClick={[Function]}
+              onMouseDown={[Function]}
+              onMouseEnter={[Function]}
+              onMouseLeave={[Function]}
+            >
+              <div
+                className="css-rlm8zr-StyledMenu-getMenuBorderRadius ejumqxq7"
+                onClick={[Function]}
+                onMouseDown={[Function]}
+                onMouseEnter={[Function]}
+                onMouseLeave={[Function]}
+              >
+                <Flex>
+                  <Base
+                    className="css-sncxrr"
+                  >
+                    <div
+                      className="css-sncxrr"
+                      is={null}
+                    >
+                      <StyledInput
+                        autoFocus={true}
+                        onBlur={[Function]}
+                        onChange={[Function]}
+                        onFocus={[Function]}
+                        onKeyDown={[Function]}
+                        placeholder="Filter search"
+                        value=""
+                      >
+                        <input
+                          autoFocus={true}
+                          className="css-p4015a-Input-inputStyles-StyledInput ejumqxq2"
+                          onBlur={[Function]}
+                          onChange={[Function]}
+                          onFocus={[Function]}
+                          onKeyDown={[Function]}
+                          placeholder="Filter search"
+                          value=""
+                        />
+                      </StyledInput>
+                      <InputLoadingWrapper>
+                        <Base
+                          className="css-1ren11q-InputLoadingWrapper ejumqxq1"
+                        >
+                          <div
+                            className="css-1ren11q-InputLoadingWrapper ejumqxq1"
+                            is={null}
+                          />
+                        </Base>
+                      </InputLoadingWrapper>
+                    </div>
+                  </Base>
+                </Flex>
+                <div>
+                  <StyledItemList
+                    maxHeight={300}
+                  >
+                    <div
+                      className="css-5kh8cy-StyledItemList ejumqxq8"
+                    >
+                      <AutoCompleteItem
+                        highlightedIndex={0}
+                        index={0}
+                        key="apple-0"
+                        onClick={[Function]}
+                      >
+                        <div
+                          className="css-le5ima-AutoCompleteItem ejumqxq3"
+                          onClick={[Function]}
+                        >
+                          <div>
+                            Apple
+                          </div>
+                        </div>
+                      </AutoCompleteItem>
+                      <AutoCompleteItem
+                        highlightedIndex={0}
+                        index={1}
+                        key="bacon-1"
+                        onClick={[Function]}
+                      >
+                        <div
+                          className="css-14kg2cv-AutoCompleteItem ejumqxq3"
+                          onClick={[Function]}
+                        >
+                          <div>
+                            Bacon
+                          </div>
+                        </div>
+                      </AutoCompleteItem>
+                      <AutoCompleteItem
+                        highlightedIndex={0}
+                        index={2}
+                        key="corn-2"
+                        onClick={[Function]}
+                      >
+                        <div
+                          className="css-14kg2cv-AutoCompleteItem ejumqxq3"
+                          onClick={[Function]}
+                        >
+                          <div>
+                            Corn
+                          </div>
+                        </div>
+                      </AutoCompleteItem>
+                    </div>
+                  </StyledItemList>
+                </div>
+              </div>
+            </StyledMenu>
+          </div>
+        </Component>
+      </AutoCompleteRoot>
+    </DropdownMenu>
+  </AutoComplete>
+</DropdownAutoCompleteMenu>
 `;
 
 exports[`DropdownAutoCompleteMenu selects 1`] = `[MockFunction]`;
diff --git a/tests/js/spec/components/__snapshots__/streamGroup.spec.jsx.snap b/tests/js/spec/components/__snapshots__/streamGroup.spec.jsx.snap
index bda680f88a..a30702c3f9 100644
--- a/tests/js/spec/components/__snapshots__/streamGroup.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/streamGroup.spec.jsx.snap
@@ -197,7 +197,6 @@ exports[`StreamGroup renders with anchors 1`] = `
   >
     <AssigneeSelector
       id="1337"
-      size={20}
     />
   </Box>
 </Group>
diff --git a/tests/js/spec/components/assigneeSelector.spec.jsx b/tests/js/spec/components/assigneeSelector.spec.jsx
index 4cca853a1c..9e2def20b6 100644
--- a/tests/js/spec/components/assigneeSelector.spec.jsx
+++ b/tests/js/spec/components/assigneeSelector.spec.jsx
@@ -1,31 +1,26 @@
 import React from 'react';
-import {mount} from 'enzyme';
-import AssigneeSelector from 'app/components/assigneeSelector';
 
-import LoadingIndicator from 'app/components/loadingIndicator';
+import {AssigneeSelectorComponent} from 'app/components/assigneeSelector';
 import {Client} from 'app/api';
-
+import {mount} from 'enzyme';
+import ConfigStore from 'app/stores/configStore';
 import GroupStore from 'app/stores/groupStore';
 import MemberListStore from 'app/stores/memberListStore';
-import ConfigStore from 'app/stores/configStore';
-import TeamStore from 'app/stores/teamStore';
 import ProjectsStore from 'app/stores/projectsStore';
-
-import stubReactComponents from '../../helpers/stubReactComponent';
+import TeamStore from 'app/stores/teamStore';
 
 describe('AssigneeSelector', function() {
   let sandbox;
   let assigneeSelector;
-  let assignToUser;
+  let assignMock;
+  let openMenu;
   let USER_1, USER_2, USER_3;
   let TEAM_1;
   let PROJECT_1;
   let GROUP_1;
-  let PATH;
 
   beforeEach(function() {
     sandbox = sinon.sandbox.create();
-    stubReactComponents(sandbox, [LoadingIndicator]);
 
     USER_1 = TestStubs.User({
       id: '1',
@@ -61,316 +56,272 @@ describe('AssigneeSelector', function() {
       },
     });
 
-    PATH = `/issues/${GROUP_1.id}/`;
-
-    sandbox.stub(MemberListStore, 'getAll').returns([USER_1, USER_2]);
+    sandbox.stub(MemberListStore, 'getAll').returns(null);
     sandbox.stub(TeamStore, 'getAll').returns([TEAM_1]);
     sandbox.stub(ProjectsStore, 'getAll').returns([PROJECT_1]);
     sandbox.stub(GroupStore, 'get').returns(GROUP_1);
-  });
 
-  afterEach(function() {
-    sandbox.restore();
-  });
-
-  describe('statics', function() {
-    const filterAssignees = AssigneeSelector.filterAssignees;
-
-    describe('filterAssignees()', function() {
-      it('should return the full array when filter is falsy', function() {
-        expect(filterAssignees([USER_1, USER_2], '')).toEqual([USER_1, USER_2]);
-        expect(filterAssignees([USER_1, USER_2], null)).toEqual([USER_1, USER_2]);
-        expect(filterAssignees([USER_1, USER_2], undefined)).toEqual([USER_1, USER_2]);
-      });
-
-      it('should match on email', function() {
-        expect(filterAssignees([USER_1, USER_2], 'johnsmith@example.com')).toEqual([
-          USER_2,
-        ]);
-      });
-
-      it('should match on name', function() {
-        expect(filterAssignees([USER_1, USER_2], 'John Smith')).toEqual([USER_2]);
-      });
-
-      it('should ignore capitalization', function() {
-        expect(filterAssignees([USER_1], 'Jane')).toEqual([USER_1]);
-        expect(filterAssignees([USER_1], 'jane')).toEqual([USER_1]);
-      });
-    });
-
-    const putSessionUserFirst = AssigneeSelector.putSessionUserFirst;
-
-    describe('putSessionUserFirst()', function() {
-      it('should place the session user at the top of the member list if present', function() {
-        sandbox
-          .stub(ConfigStore, 'get')
-          .withArgs('user')
-          .returns({
-            id: '2',
-            name: 'John Smith',
-            email: 'johnsmith@example.com',
-          });
-        expect(putSessionUserFirst([USER_1, USER_2])).toEqual([USER_2, USER_1]);
-      });
-
-      it("should return the same member list if the session user isn't present", function() {
-        sandbox
-          .stub(ConfigStore, 'get')
-          .withArgs('user')
-          .returns({
-            id: '555',
-            name: 'Here Comes a New Challenger',
-            email: 'guile@mail.us.af.mil',
-          });
-
-        expect(putSessionUserFirst([USER_1, USER_2])).toEqual([USER_1, USER_2]);
-      });
-    });
-  });
-
-  describe('loading', function() {
-    let openMenu;
-
-    beforeEach(function() {
-      // Reset sandbox because we don't want <LoadingIndicator /> stubbed
-      sandbox.restore();
-      sandbox = sinon.sandbox.create();
-      sandbox.stub(MemberListStore, 'getAll').returns([USER_1, USER_2]);
-      sandbox.stub(TeamStore, 'getAll').returns([TEAM_1]);
-      sandbox.stub(ProjectsStore, 'getAll').returns([PROJECT_1]);
-      sandbox.stub(GroupStore, 'get').returns(GROUP_1);
-
-      Client.addMockResponse({
-        method: 'PUT',
-        url: `/issues/${GROUP_1.id}/`,
-        body: {
-          ...GROUP_1,
-          assignedTo: USER_1,
-        },
-      });
-
-      MemberListStore.items = [];
-      MemberListStore.loaded = false;
-
-      assigneeSelector = mount(
-        <AssigneeSelector id={GROUP_1.id} />,
-        TestStubs.routerContext()
-      );
-
-      openMenu = () => assigneeSelector.find('a').simulate('click');
-    });
-
-    afterEach(function() {
-      Client.clearMockResponses();
-    });
-
-    it('should initially have loading state', function() {
-      openMenu();
-      expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(true);
-    });
-
-    it('does not have loading state and shows member list after calling MemberListStore.loadInitialData', function() {
-      openMenu();
-      MemberListStore.loadInitialData([USER_1, USER_2]);
-      assigneeSelector.update();
-      expect(assigneeSelector.instance().assignableTeams()).toHaveLength(1);
-
-      expect(assigneeSelector.find('Avatar')).toHaveLength(3);
-      expect(assigneeSelector.find('UserAvatar')).toHaveLength(2);
-      expect(assigneeSelector.find('TeamAvatar')).toHaveLength(1);
-      expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(false);
+    assignMock = Client.addMockResponse({
+      method: 'PUT',
+      url: `/issues/${GROUP_1.id}/`,
+      body: {
+        ...GROUP_1,
+        assignedTo: USER_1,
+      },
     });
 
-    it('does NOT update member list after initial load', function() {
-      openMenu();
-      MemberListStore.loadInitialData([USER_1, USER_2]);
-      assigneeSelector.update();
-
-      expect(assigneeSelector.find('Avatar')).toHaveLength(3);
-      expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(false);
-
-      MemberListStore.loadInitialData([USER_1, USER_2, USER_3]);
-      assigneeSelector.update();
+    MemberListStore.items = [];
+    MemberListStore.loaded = false;
 
-      expect(assigneeSelector.find('Avatar')).toHaveLength(3);
-      expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(false);
-    });
+    assigneeSelector = mount(
+      <AssigneeSelectorComponent id={GROUP_1.id} />,
+      TestStubs.routerContext()
+    );
 
-    it('successfully assigns users', function(done) {
-      openMenu();
-      MemberListStore.loadInitialData([USER_1, USER_2]);
-      assigneeSelector.update();
-      assigneeSelector
-        .find('Avatar')
-        .first()
-        .simulate('click');
-      assigneeSelector.update();
-      expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(true);
-
-      setTimeout(() => {
-        assigneeSelector.update();
-        expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(false);
-        expect(assigneeSelector.find('ActorAvatar')).toHaveLength(1);
-        done();
-      }, 100); //hack
-    });
+    openMenu = () => assigneeSelector.find('DropdownButton').simulate('click');
+  });
 
-    it('successfully assigns teams', function(done) {
-      openMenu();
-      MemberListStore.loadInitialData([USER_1, USER_2]);
-      assigneeSelector.update();
-      assigneeSelector
-        .find('TeamAvatar')
-        .first()
-        .simulate('click');
-      assigneeSelector.update();
-      expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(true);
-
-      setTimeout(() => {
-        assigneeSelector.update();
-        expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(false);
-        expect(assigneeSelector.find('ActorAvatar')).toHaveLength(1);
-        done();
-      }, 100); //hack
-    });
+  afterEach(function() {
+    sandbox.restore();
+    Client.clearMockResponses();
+  });
 
-    it('successfully clears assignment', function() {
-      openMenu();
-      MemberListStore.loadInitialData([USER_1, USER_2]);
-      assigneeSelector.update();
-      assigneeSelector
-        .find('Avatar')
-        .first()
-        .simulate('click');
-      assigneeSelector.update();
-      expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(true);
-
-      expect(
-        Client.findMockResponse(PATH, {
-          method: 'PUT',
-        })[0].callCount
-      ).toBe(1);
-
-      assigneeSelector.instance().clearAssignTo();
-
-      expect(
-        Client.findMockResponse(PATH, {
-          method: 'PUT',
-        })[0].callCount
-      ).toBe(2);
-      //api was called with empty string, clearing assignment
-      expect(
-        Client.findMockResponse(PATH, {
-          method: 'PUT',
-        })[1].mock.calls[1][1].data.assignedTo
-      ).toBe('');
+  describe('putSessionUserFirst()', function() {
+    const putSessionUserFirst = AssigneeSelectorComponent.putSessionUserFirst;
+    it('should place the session user at the top of the member list if present', function() {
+      sandbox
+        .stub(ConfigStore, 'get')
+        .withArgs('user')
+        .returns({
+          id: '2',
+          name: 'John Smith',
+          email: 'johnsmith@example.com',
+        });
+      expect(putSessionUserFirst([USER_1, USER_2])).toEqual([USER_2, USER_1]);
     });
 
-    it('shows invite member button', function() {
-      openMenu();
-      assigneeSelector.update();
-      expect(assigneeSelector.find('MenuItem.invite-member').exists()).toBe(false);
-
+    it("should return the same member list if the session user isn't present", function() {
       sandbox
         .stub(ConfigStore, 'get')
-        .withArgs('invitesEnabled')
-        .returns(true);
-      // Create a new selector because assigneeSelector.update() won't re-render
-      // if the state doesn't change.
-      let sel = mount(<AssigneeSelector id={GROUP_1.id} />, TestStubs.routerContext());
-      sel.find('a').simulate('click');
-      expect(sel.find('MenuItem.invite-member')).toHaveLength(1);
-
-      // Remove org:write access permission and make sure invite member button is not shown.
-      sel = mount(<AssigneeSelector id={GROUP_1.id} />, TestStubs.routerContext());
-      sel.setContext({
-        organization: {id: '1'},
-      });
-      sel.find('a').simulate('click');
-      expect(sel.find('MenuItem.invite-member').exists()).toBe(false);
+        .withArgs('user')
+        .returns({
+          id: '555',
+          name: 'Here Comes a New Challenger',
+          email: 'guile@mail.us.af.mil',
+        });
+
+      expect(putSessionUserFirst([USER_1, USER_2])).toEqual([USER_1, USER_2]);
     });
   });
 
-  describe('onFilterKeyDown()', function() {
-    beforeEach(function() {
-      MemberListStore.loaded = true;
-      if (assigneeSelector) {
-        assigneeSelector.unmount();
-      }
-      assigneeSelector = mount(
-        <AssigneeSelector id={GROUP_1.id} />,
-        TestStubs.routerContext()
-      );
-      // open menu
-      assigneeSelector.find('a').simulate('click');
-
-      assignToUser = sandbox.stub(assigneeSelector.instance(), 'assignToUser');
-    });
-
-    afterEach(function() {
-      MemberListStore.loaded = false;
-    });
-
-    it('should assign the first filtered member when the Enter key is pressed and filter is truthy', function() {
-      assigneeSelector.setState({filter: 'Jane'});
-
-      let filter = assigneeSelector.find('input');
-      filter.simulate('keyDown', {key: 'Enter', keyCode: 13, which: 13});
+  it('should initially have loading state', function() {
+    openMenu();
+    expect(assigneeSelector.find('LoadingIndicator')).toHaveLength(1);
+  });
 
-      expect(assignToUser.calledOnce).toBeTruthy();
-      expect(assignToUser.lastCall.args[0]).toHaveProperty('name', 'Jane Doe');
-    });
+  it('does not have loading state and shows member list after calling MemberListStore.loadInitialData', async function() {
+    openMenu();
+    MemberListStore.loadInitialData([USER_1, USER_2]);
+    assigneeSelector.update();
+    expect(assigneeSelector.instance().assignableTeams()).toHaveLength(1);
 
-    it('should do nothing when the Enter key is pressed, but filter is the empty string', function() {
-      assigneeSelector.setState({filter: ''});
+    expect(assigneeSelector.find('LoadingIndicator')).toHaveLength(0);
+    expect(assigneeSelector.find('Avatar')).toHaveLength(3);
+    expect(assigneeSelector.find('UserAvatar')).toHaveLength(2);
+    expect(assigneeSelector.find('TeamAvatar')).toHaveLength(1);
+  });
 
-      let filter = assigneeSelector.find('input');
-      filter.simulate('keyDown', {key: 'Enter', keyCode: 13, which: 13});
+  it('does NOT update member list after initial load', function() {
+    openMenu();
+    MemberListStore.loadInitialData([USER_1, USER_2]);
+    assigneeSelector.update();
 
-      expect(assignToUser.notCalled).toBeTruthy();
-    });
+    expect(assigneeSelector.find('Avatar')).toHaveLength(3);
+    expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(false);
 
-    it('should do nothing if a non-Enter key is pressed', function() {
-      assigneeSelector.setState({filter: 'Jane'});
+    MemberListStore.loadInitialData([USER_1, USER_2, USER_3]);
+    assigneeSelector.update();
 
-      let filter = assigneeSelector.find('input');
-      filter.simulate('keyDown', {key: 'h', keyCode: 72, which: 72});
-      expect(assignToUser.notCalled).toBeTruthy();
-    });
+    expect(assigneeSelector.find('Avatar')).toHaveLength(3);
+    expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(false);
   });
 
-  describe('onFilterKeyUp()', function() {
-    beforeEach(function() {
-      MemberListStore.loaded = true;
-      if (assigneeSelector) {
-        assigneeSelector.unmount();
-      }
-
-      assigneeSelector = mount(
-        <AssigneeSelector id={GROUP_1.id} />,
-        TestStubs.routerContext()
-      );
+  it('successfully assigns users', async function() {
+    openMenu();
+    MemberListStore.loadInitialData([USER_1, USER_2]);
+    assigneeSelector.update();
+    expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(false);
+
+    assigneeSelector
+      .find('UserAvatar')
+      .first()
+      .simulate('click');
+
+    expect(assignMock).toHaveBeenLastCalledWith(
+      '/issues/1337/',
+      expect.objectContaining({
+        data: {assignedTo: 'user:1'},
+      })
+    );
+
+    assigneeSelector.update();
+    expect(assigneeSelector.find('LoadingIndicator')).toHaveLength(1);
+
+    // Flakey with 1 tick
+    await tick();
+    await tick();
+    assigneeSelector.update();
+    expect(assigneeSelector.find('LoadingIndicator')).toHaveLength(0);
+    expect(assigneeSelector.find('ActorAvatar')).toHaveLength(1);
+  });
 
-      // open menu
-      assigneeSelector.find('a').simulate('click');
-    });
+  it('successfully assigns teams', async function() {
+    openMenu();
+    MemberListStore.loadInitialData([USER_1, USER_2]);
+    assigneeSelector.update();
+    expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(false);
+
+    assigneeSelector
+      .find('TeamAvatar')
+      .first()
+      .simulate('click');
+
+    assigneeSelector.update();
+    expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(true);
+
+    expect(assignMock).toHaveBeenCalledWith(
+      '/issues/1337/',
+      expect.objectContaining({
+        data: {assignedTo: 'team:3'},
+      })
+    );
+
+    // Flakey with 1 tick
+    await tick();
+    await tick();
+    assigneeSelector.update();
+    expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(false);
+    expect(assigneeSelector.find('ActorAvatar')).toHaveLength(1);
+  });
 
-    afterEach(function() {
-      MemberListStore.loaded = false;
-    });
+  it('successfully clears assignment', async function() {
+    openMenu();
+    MemberListStore.loadInitialData([USER_1, USER_2]);
+
+    // Assign first item in list, which is TEAM_1
+    assigneeSelector.update();
+    assigneeSelector
+      .find('Avatar')
+      .first()
+      .simulate('click');
+    assigneeSelector.update();
+    expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(true);
+
+    expect(assignMock).toHaveBeenCalledWith(
+      '/issues/1337/',
+      expect.objectContaining({
+        data: {assignedTo: 'team:3'},
+      })
+    );
+
+    // Waiting for assignment to finish updating
+    // Flakey with 1 tick
+    await tick();
+    await tick();
+    assigneeSelector.update();
+
+    openMenu();
+    assigneeSelector
+      .find('ClearAssignee[data-test-id="clear-assignee"]')
+      .simulate('click');
+
+    // api was called with empty string, clearing assignment
+    expect(assignMock).toHaveBeenLastCalledWith(
+      '/issues/1337/',
+      expect.objectContaining({
+        data: {assignedTo: ''},
+      })
+    );
+  });
 
-    it('should close the dropdown when keyup is triggered with the Escape key', function() {
-      let filter = assigneeSelector.find('input');
-      filter.simulate('keyUp', {key: 'Escape'});
+  it('shows invite member button', async function() {
+    let routerContext = TestStubs.routerContext();
+
+    openMenu();
+    MemberListStore.loadInitialData([USER_1, USER_2]);
+    assigneeSelector.update();
+    expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(false);
+    expect(
+      assigneeSelector.find('InviteMemberLink[data-test-id="invite-member"]')
+    ).toHaveLength(0);
+
+    assigneeSelector.unmount();
+    sandbox
+      .stub(ConfigStore, 'get')
+      .withArgs('invitesEnabled')
+      .returns(true);
+    assigneeSelector = mount(
+      <AssigneeSelectorComponent id={GROUP_1.id} />,
+      routerContext
+    );
+    await tick();
+    assigneeSelector.update();
+    openMenu();
+    expect(
+      assigneeSelector.find('InviteMemberLink[data-test-id="invite-member"]')
+    ).toHaveLength(1);
+  });
 
-      expect(assigneeSelector.state('isOpen')).toBe(false);
+  it('requires org:write to invite member', async function() {
+    MemberListStore.loadInitialData([USER_1, USER_2]);
+    sandbox
+      .stub(ConfigStore, 'get')
+      .withArgs('invitesEnabled')
+      .returns(true);
+
+    // Remove org:write access permission and make sure invite member button is not shown.
+    assigneeSelector.unmount();
+    assigneeSelector = mount(
+      <AssigneeSelectorComponent id={GROUP_1.id} />,
+      TestStubs.routerContext()
+    );
+    assigneeSelector.setContext({
+      organization: {id: '1', access: []},
     });
+    openMenu();
+    assigneeSelector.update();
+    expect(
+      assigneeSelector.find('InviteMemberLink[data-test-id="invite-member"]')
+    ).toHaveLength(0);
+  });
 
-    it('should update the local filter state if any other key is pressed', function() {
-      let filter = assigneeSelector.find('input');
-      filter.simulate('keyUp', {target: {value: 'foo'}});
-      expect(assigneeSelector.state('filter')).toEqual('foo');
-    });
+  it('filters user by email and selects with keyboard', async function() {
+    openMenu();
+    MemberListStore.loadInitialData([USER_1, USER_2]);
+    assigneeSelector.update();
+    expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(false);
+
+    assigneeSelector
+      .find('StyledInput')
+      .simulate('change', {target: {value: 'JohnSmith@example.com'}});
+
+    expect(assigneeSelector.find('Avatar')).toHaveLength(1);
+    expect(assigneeSelector.find('Avatar').prop('user')).toEqual(USER_2);
+
+    assigneeSelector.find('StyledInput').simulate('keyDown', {key: 'Enter'});
+    assigneeSelector.update();
+    expect(assignMock).toHaveBeenLastCalledWith(
+      '/issues/1337/',
+      expect.objectContaining({
+        data: {assignedTo: 'user:2'},
+      })
+    );
+    expect(assigneeSelector.find('LoadingIndicator')).toHaveLength(1);
+
+    await tick();
+    await tick();
+    assigneeSelector.update();
+    expect(assigneeSelector.find('LoadingIndicator')).toHaveLength(0);
+    expect(assigneeSelector.find('ActorAvatar')).toHaveLength(1);
   });
 });
diff --git a/tests/js/spec/components/autoComplete.spec.jsx b/tests/js/spec/components/autoComplete.spec.jsx
index 8d6999746f..48e9e1f986 100644
--- a/tests/js/spec/components/autoComplete.spec.jsx
+++ b/tests/js/spec/components/autoComplete.spec.jsx
@@ -198,7 +198,8 @@ describe('AutoComplete', function() {
         .simulate('click');
       expect(mocks.onSelect).toHaveBeenCalledWith(
         items[1],
-        expect.objectContaining({inputValue: '', highlightedIndex: 0})
+        expect.objectContaining({inputValue: '', highlightedIndex: 0}),
+        expect.anything()
       );
 
       expect(wrapper.state('inputValue')).toBe('Pineapple');
@@ -221,7 +222,8 @@ describe('AutoComplete', function() {
 
       expect(mocks.onSelect).toHaveBeenCalledWith(
         items[2],
-        expect.objectContaining({inputValue: '', highlightedIndex: 2})
+        expect.objectContaining({inputValue: '', highlightedIndex: 2}),
+        expect.anything()
       );
       expect(wrapper.instance().items.size).toBe(0);
       expect(wrapper.state('inputValue')).toBe('Orange');
@@ -285,7 +287,8 @@ describe('AutoComplete', function() {
       input.simulate('keyDown', {key: 'Enter'});
       expect(mocks.onSelect).toHaveBeenCalledWith(
         items[1],
-        expect.objectContaining({inputValue: 'ap', highlightedIndex: 1})
+        expect.objectContaining({inputValue: 'ap', highlightedIndex: 1}),
+        expect.anything()
       );
       expect(wrapper.instance().items.size).toBe(0);
       expect(wrapper.state('inputValue')).toBe('Pineapple');
@@ -394,7 +397,8 @@ describe('AutoComplete', function() {
         .simulate('click');
       expect(mocks.onSelect).toHaveBeenCalledWith(
         items[1],
-        expect.objectContaining({inputValue: '', highlightedIndex: 0})
+        expect.objectContaining({inputValue: '', highlightedIndex: 0}),
+        expect.anything()
       );
 
       expect(wrapper.state('inputValue')).toBe('Pineapple');
@@ -416,7 +420,8 @@ describe('AutoComplete', function() {
 
       expect(mocks.onSelect).toHaveBeenCalledWith(
         items[2],
-        expect.objectContaining({inputValue: '', highlightedIndex: 2})
+        expect.objectContaining({inputValue: '', highlightedIndex: 2}),
+        expect.anything()
       );
       expect(mocks.onClose).toHaveBeenCalledTimes(1);
       expect(wrapper.state('inputValue')).toBe('Orange');
@@ -478,7 +483,8 @@ describe('AutoComplete', function() {
       input.simulate('keyDown', {key: 'Enter'});
       expect(mocks.onSelect).toHaveBeenCalledWith(
         items[1],
-        expect.objectContaining({inputValue: 'ap', highlightedIndex: 1})
+        expect.objectContaining({inputValue: 'ap', highlightedIndex: 1}),
+        expect.anything()
       );
       expect(mocks.onClose).toHaveBeenCalledTimes(1);
       expect(wrapper.state('inputValue')).toBe('Pineapple');
diff --git a/tests/js/spec/components/avatar/__snapshots__/avatarList.spec.jsx.snap b/tests/js/spec/components/avatar/__snapshots__/avatarList.spec.jsx.snap
index 0318495e8e..6b6c2f21a5 100644
--- a/tests/js/spec/components/avatar/__snapshots__/avatarList.spec.jsx.snap
+++ b/tests/js/spec/components/avatar/__snapshots__/avatarList.spec.jsx.snap
@@ -212,6 +212,7 @@ exports[`AvatarList renders with collapsed avatar count if > 5 users 1`] = `
                 >
                   <StyledBaseAvatar
                     className="tip avatar css-ptswrs-StyledAvatar-Circle e1axh4r50"
+                    round={true}
                     style={
                       Object {
                         "height": "28px",
@@ -221,7 +222,7 @@ exports[`AvatarList renders with collapsed avatar count if > 5 users 1`] = `
                     title="Foo Bar (foo@example.com)"
                   >
                     <span
-                      className="tip avatar e1axh4r50 css-1a6phbt-StyledBaseAvatar-StyledAvatar-Circle e1z0ohzl0"
+                      className="tip avatar e1axh4r50 css-1t1vzng-StyledBaseAvatar-StyledAvatar-Circle e1z0ohzl0"
                       style={
                         Object {
                           "height": "28px",
@@ -359,6 +360,7 @@ exports[`AvatarList renders with collapsed avatar count if > 5 users 1`] = `
                 >
                   <StyledBaseAvatar
                     className="tip avatar css-ptswrs-StyledAvatar-Circle e1axh4r50"
+                    round={true}
                     style={
                       Object {
                         "height": "28px",
@@ -368,7 +370,7 @@ exports[`AvatarList renders with collapsed avatar count if > 5 users 1`] = `
                     title="Foo Bar (foo@example.com)"
                   >
                     <span
-                      className="tip avatar e1axh4r50 css-1a6phbt-StyledBaseAvatar-StyledAvatar-Circle e1z0ohzl0"
+                      className="tip avatar e1axh4r50 css-1t1vzng-StyledBaseAvatar-StyledAvatar-Circle e1z0ohzl0"
                       style={
                         Object {
                           "height": "28px",
@@ -506,6 +508,7 @@ exports[`AvatarList renders with collapsed avatar count if > 5 users 1`] = `
                 >
                   <StyledBaseAvatar
                     className="tip avatar css-ptswrs-StyledAvatar-Circle e1axh4r50"
+                    round={true}
                     style={
                       Object {
                         "height": "28px",
@@ -515,7 +518,7 @@ exports[`AvatarList renders with collapsed avatar count if > 5 users 1`] = `
                     title="Foo Bar (foo@example.com)"
                   >
                     <span
-                      className="tip avatar e1axh4r50 css-1a6phbt-StyledBaseAvatar-StyledAvatar-Circle e1z0ohzl0"
+                      className="tip avatar e1axh4r50 css-1t1vzng-StyledBaseAvatar-StyledAvatar-Circle e1z0ohzl0"
                       style={
                         Object {
                           "height": "28px",
@@ -653,6 +656,7 @@ exports[`AvatarList renders with collapsed avatar count if > 5 users 1`] = `
                 >
                   <StyledBaseAvatar
                     className="tip avatar css-ptswrs-StyledAvatar-Circle e1axh4r50"
+                    round={true}
                     style={
                       Object {
                         "height": "28px",
@@ -662,7 +666,7 @@ exports[`AvatarList renders with collapsed avatar count if > 5 users 1`] = `
                     title="Foo Bar (foo@example.com)"
                   >
                     <span
-                      className="tip avatar e1axh4r50 css-1a6phbt-StyledBaseAvatar-StyledAvatar-Circle e1z0ohzl0"
+                      className="tip avatar e1axh4r50 css-1t1vzng-StyledBaseAvatar-StyledAvatar-Circle e1z0ohzl0"
                       style={
                         Object {
                           "height": "28px",
@@ -800,6 +804,7 @@ exports[`AvatarList renders with collapsed avatar count if > 5 users 1`] = `
                 >
                   <StyledBaseAvatar
                     className="tip avatar css-ptswrs-StyledAvatar-Circle e1axh4r50"
+                    round={true}
                     style={
                       Object {
                         "height": "28px",
@@ -809,7 +814,7 @@ exports[`AvatarList renders with collapsed avatar count if > 5 users 1`] = `
                     title="Foo Bar (foo@example.com)"
                   >
                     <span
-                      className="tip avatar e1axh4r50 css-1a6phbt-StyledBaseAvatar-StyledAvatar-Circle e1z0ohzl0"
+                      className="tip avatar e1axh4r50 css-1t1vzng-StyledBaseAvatar-StyledAvatar-Circle e1z0ohzl0"
                       style={
                         Object {
                           "height": "28px",
@@ -1002,6 +1007,7 @@ exports[`AvatarList renders with user avatars 1`] = `
                 >
                   <StyledBaseAvatar
                     className="tip avatar css-ptswrs-StyledAvatar-Circle e1axh4r50"
+                    round={true}
                     style={
                       Object {
                         "height": "28px",
@@ -1011,7 +1017,7 @@ exports[`AvatarList renders with user avatars 1`] = `
                     title="Foo Bar (foo@example.com)"
                   >
                     <span
-                      className="tip avatar e1axh4r50 css-1a6phbt-StyledBaseAvatar-StyledAvatar-Circle e1z0ohzl0"
+                      className="tip avatar e1axh4r50 css-1t1vzng-StyledBaseAvatar-StyledAvatar-Circle e1z0ohzl0"
                       style={
                         Object {
                           "height": "28px",
@@ -1149,6 +1155,7 @@ exports[`AvatarList renders with user avatars 1`] = `
                 >
                   <StyledBaseAvatar
                     className="tip avatar css-ptswrs-StyledAvatar-Circle e1axh4r50"
+                    round={true}
                     style={
                       Object {
                         "height": "28px",
@@ -1158,7 +1165,7 @@ exports[`AvatarList renders with user avatars 1`] = `
                     title="Foo Bar (foo@example.com)"
                   >
                     <span
-                      className="tip avatar e1axh4r50 css-1a6phbt-StyledBaseAvatar-StyledAvatar-Circle e1z0ohzl0"
+                      className="tip avatar e1axh4r50 css-1t1vzng-StyledBaseAvatar-StyledAvatar-Circle e1z0ohzl0"
                       style={
                         Object {
                           "height": "28px",
diff --git a/tests/js/spec/components/dropdownAutoComplete.spec.jsx b/tests/js/spec/components/dropdownAutoComplete.spec.jsx
index 7e32f59608..13bcba9cfb 100644
--- a/tests/js/spec/components/dropdownAutoComplete.spec.jsx
+++ b/tests/js/spec/components/dropdownAutoComplete.spec.jsx
@@ -4,6 +4,8 @@ import {mount} from 'enzyme';
 import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
 
 describe('DropdownAutoComplete', function() {
+  const routerContext = TestStubs.routerContext();
+
   it('has actor wrapper', function() {
     const wrapper = mount(
       <DropdownAutoComplete
@@ -23,10 +25,11 @@ describe('DropdownAutoComplete', function() {
         ]}
       >
         {() => 'Click Me!'}
-      </DropdownAutoComplete>
+      </DropdownAutoComplete>,
+      routerContext
     );
-    expect(wrapper.find('[role="button"]')).toHaveLength(1);
-    expect(wrapper.find('[role="button"]').text()).toBe('Click Me!');
+    expect(wrapper.find('div[role="button"]')).toHaveLength(1);
+    expect(wrapper.find('div[role="button"]').text()).toBe('Click Me!');
   });
 
   it('opens dropdown menu when actor is clicked', function() {
@@ -48,9 +51,10 @@ describe('DropdownAutoComplete', function() {
         ]}
       >
         {() => 'Click Me!'}
-      </DropdownAutoComplete>
+      </DropdownAutoComplete>,
+      routerContext
     );
-    wrapper.find('[role="button"]').simulate('click');
+    wrapper.find('Actor[role="button"]').simulate('click');
     expect(wrapper.find('StyledMenu')).toHaveLength(1);
   });
 });
diff --git a/tests/js/spec/components/dropdownAutoCompleteMenu.spec.jsx b/tests/js/spec/components/dropdownAutoCompleteMenu.spec.jsx
index b075e41b0b..423cdbe6e0 100644
--- a/tests/js/spec/components/dropdownAutoCompleteMenu.spec.jsx
+++ b/tests/js/spec/components/dropdownAutoCompleteMenu.spec.jsx
@@ -1,9 +1,10 @@
 import React from 'react';
-import {mount, shallow} from 'enzyme';
+import {mount} from 'enzyme';
 
 import DropdownAutoCompleteMenu from 'app/components/dropdownAutoCompleteMenu';
 
 describe('DropdownAutoCompleteMenu', function() {
+  const routerContext = TestStubs.routerContext();
   const items = [
     {
       value: 'apple',
@@ -19,24 +20,23 @@ describe('DropdownAutoCompleteMenu', function() {
     },
   ];
   it('renders without a group', function() {
-    const wrapper = shallow(
+    const wrapper = mount(
       <DropdownAutoCompleteMenu isOpen={true} items={items}>
         {() => 'Click Me!'}
-      </DropdownAutoCompleteMenu>
+      </DropdownAutoCompleteMenu>,
+      routerContext
     );
     expect(wrapper).toMatchSnapshot();
   });
 
   it('renders with a group', function() {
-    const wrapper = shallow(
+    const wrapper = mount(
       <DropdownAutoCompleteMenu
         isOpen={true}
         items={[
           {
-            group: {
-              value: 'countries',
-              label: 'countries',
-            },
+            value: 'countries',
+            label: 'countries',
             items: [
               {
                 value: 'new zealand',
@@ -51,7 +51,8 @@ describe('DropdownAutoCompleteMenu', function() {
         ]}
       >
         {() => 'Click Me!'}
-      </DropdownAutoCompleteMenu>
+      </DropdownAutoCompleteMenu>,
+      routerContext
     );
     expect(wrapper).toMatchSnapshot();
   });
@@ -80,7 +81,8 @@ describe('DropdownAutoCompleteMenu', function() {
         ]}
       >
         {({selectedItem}) => (selectedItem ? selectedItem.label : 'Click me!')}
-      </DropdownAutoCompleteMenu>
+      </DropdownAutoCompleteMenu>,
+      routerContext
     );
 
     wrapper
@@ -94,7 +96,8 @@ describe('DropdownAutoCompleteMenu', function() {
     const wrapper = mount(
       <DropdownAutoCompleteMenu isOpen={true} items={[]} emptyMessage="No items!">
         {({selectedItem}) => (selectedItem ? selectedItem.label : 'Click me!')}
-      </DropdownAutoCompleteMenu>
+      </DropdownAutoCompleteMenu>,
+      routerContext
     );
 
     expect(wrapper.find('EmptyMessage')).toHaveLength(1);
@@ -111,7 +114,8 @@ describe('DropdownAutoCompleteMenu', function() {
     const wrapper = mount(
       <DropdownAutoCompleteMenu isOpen={true} items={items} emptyMessage="No items!">
         {({selectedItem}) => (selectedItem ? selectedItem.label : 'Click me!')}
-      </DropdownAutoCompleteMenu>
+      </DropdownAutoCompleteMenu>,
+      routerContext
     );
 
     wrapper.find('StyledInput').simulate('change', {target: {value: 'U-S-A'}});
@@ -128,7 +132,8 @@ describe('DropdownAutoCompleteMenu', function() {
         noResultsMessage="No search results"
       >
         {({selectedItem}) => (selectedItem ? selectedItem.label : 'Click me!')}
-      </DropdownAutoCompleteMenu>
+      </DropdownAutoCompleteMenu>,
+      routerContext
     );
 
     wrapper.find('StyledInput').simulate('change', {target: {value: 'U-S-A'}});
diff --git a/tests/js/spec/components/group/__snapshots__/suggestedOwners.spec.jsx.snap b/tests/js/spec/components/group/__snapshots__/suggestedOwners.spec.jsx.snap
index ca47b3e8ce..e1010889b1 100644
--- a/tests/js/spec/components/group/__snapshots__/suggestedOwners.spec.jsx.snap
+++ b/tests/js/spec/components/group/__snapshots__/suggestedOwners.spec.jsx.snap
@@ -106,10 +106,11 @@ exports[`SuggestedOwners render() should not show owners committers without feat
                   >
                     <StyledBaseAvatar
                       className="avatar tip"
+                      round={true}
                       style={Object {}}
                     >
                       <span
-                        className="avatar tip css-15umz1j-StyledBaseAvatar e1z0ohzl0"
+                        className="avatar tip css-1ttlt2k-StyledBaseAvatar e1z0ohzl0"
                         style={Object {}}
                       >
                         <LetterAvatar
@@ -315,10 +316,11 @@ exports[`SuggestedOwners render() should show owners when enable 1`] = `
                   >
                     <StyledBaseAvatar
                       className="avatar tip"
+                      round={true}
                       style={Object {}}
                     >
                       <span
-                        className="avatar tip css-15umz1j-StyledBaseAvatar e1z0ohzl0"
+                        className="avatar tip css-1ttlt2k-StyledBaseAvatar e1z0ohzl0"
                         style={Object {}}
                       >
                         <LetterAvatar
diff --git a/tests/js/spec/components/settingsBreadcrumbDropdown.spec.jsx b/tests/js/spec/components/settingsBreadcrumbDropdown.spec.jsx
index fa03499330..23ef0d779b 100644
--- a/tests/js/spec/components/settingsBreadcrumbDropdown.spec.jsx
+++ b/tests/js/spec/components/settingsBreadcrumbDropdown.spec.jsx
@@ -14,7 +14,8 @@ describe('Settings Breadcrumb Dropdown', function() {
 
   beforeEach(function() {
     wrapper = mount(
-      <BreadcrumbDropdown items={items} name="Test" hasMenu onSelect={selectMock} />
+      <BreadcrumbDropdown items={items} name="Test" hasMenu onSelect={selectMock} />,
+      TestStubs.routerContext()
     );
   });
 
diff --git a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
index 791d3ae041..8aadb92757 100644
--- a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
@@ -295,7 +295,7 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
                     }
                   >
                     <span
-                      className="avatar css-1m7k3tg-StyledBaseAvatar e1z0ohzl0"
+                      className="avatar css-1muke4e-StyledBaseAvatar e1z0ohzl0"
                       style={
                         Object {
                           "height": "36px",
@@ -742,6 +742,7 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
                                     >
                                       <StyledBaseAvatar
                                         className="avatar css-1u6j7yz-StyledAvatar ev46mzr4"
+                                        round={true}
                                         style={
                                           Object {
                                             "height": "32px",
@@ -750,7 +751,7 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
                                         }
                                       >
                                         <span
-                                          className="avatar ev46mzr4 css-1dbvbxh-StyledBaseAvatar-StyledAvatar e1z0ohzl0"
+                                          className="avatar ev46mzr4 css-l5crk4-StyledBaseAvatar-StyledAvatar e1z0ohzl0"
                                           style={
                                             Object {
                                               "height": "32px",
@@ -1801,6 +1802,7 @@ exports[`Sidebar renders without org and router 1`] = `
                                     >
                                       <StyledBaseAvatar
                                         className="avatar css-1u6j7yz-StyledAvatar ev46mzr4"
+                                        round={true}
                                         style={
                                           Object {
                                             "height": "32px",
@@ -1809,7 +1811,7 @@ exports[`Sidebar renders without org and router 1`] = `
                                         }
                                       >
                                         <span
-                                          className="avatar ev46mzr4 css-1dbvbxh-StyledBaseAvatar-StyledAvatar e1z0ohzl0"
+                                          className="avatar ev46mzr4 css-l5crk4-StyledBaseAvatar-StyledAvatar e1z0ohzl0"
                                           style={
                                             Object {
                                               "height": "32px",
diff --git a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
index 9aa26498eb..ba123a7e7d 100644
--- a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
@@ -78,7 +78,9 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                             },
                           ]
                         }
+                        maxHeight={300}
                         onSelect={[Function]}
+                        searchPlaceholder="Filter search"
                       >
                         <AutoComplete
                           disabled={false}
@@ -99,116 +101,125 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                 <div
                                   className="css-6v04yn-AutoCompleteRoot ejumqxq0"
                                 >
-                                  <div
+                                  <Actor
+                                    isOpen={false}
                                     onClick={[Function]}
                                     onMouseEnter={[Function]}
                                     onMouseLeave={[Function]}
                                     role="button"
                                   >
-                                    <DropdownButton
-                                      isOpen={false}
-                                      size="xsmall"
+                                    <div
+                                      className="css-dy1pax-Actor e53us8t0"
+                                      onClick={[Function]}
+                                      onMouseEnter={[Function]}
+                                      onMouseLeave={[Function]}
+                                      role="button"
                                     >
-                                      <StyledButton
+                                      <DropdownButton
                                         isOpen={false}
                                         size="xsmall"
                                       >
-                                        <Component
-                                          className="css-o27a2e-StyledButton e1yghndz1"
+                                        <StyledButton
                                           isOpen={false}
                                           size="xsmall"
                                         >
-                                          <Button
+                                          <Component
                                             className="css-o27a2e-StyledButton e1yghndz1"
-                                            disabled={false}
+                                            isOpen={false}
                                             size="xsmall"
                                           >
-                                            <StyledButton
+                                            <Button
                                               className="css-o27a2e-StyledButton e1yghndz1"
                                               disabled={false}
-                                              onClick={[Function]}
-                                              role="button"
                                               size="xsmall"
                                             >
-                                              <Component
-                                                className="e1yghndz1 css-108zzii-StyledButton-getColors-StyledButton e17811v30"
+                                              <StyledButton
+                                                className="css-o27a2e-StyledButton e1yghndz1"
                                                 disabled={false}
                                                 onClick={[Function]}
                                                 role="button"
                                                 size="xsmall"
                                               >
-                                                <button
+                                                <Component
                                                   className="e1yghndz1 css-108zzii-StyledButton-getColors-StyledButton e17811v30"
                                                   disabled={false}
                                                   onClick={[Function]}
                                                   role="button"
                                                   size="xsmall"
                                                 >
-                                                  <ButtonLabel
+                                                  <button
+                                                    className="e1yghndz1 css-108zzii-StyledButton-getColors-StyledButton e17811v30"
+                                                    disabled={false}
+                                                    onClick={[Function]}
+                                                    role="button"
                                                     size="xsmall"
                                                   >
-                                                    <Component
-                                                      className="css-6q5v1w-ButtonLabel e17811v31"
+                                                    <ButtonLabel
                                                       size="xsmall"
                                                     >
-                                                      <Flex
-                                                        align="center"
+                                                      <Component
                                                         className="css-6q5v1w-ButtonLabel e17811v31"
                                                         size="xsmall"
                                                       >
-                                                        <Base
+                                                        <Flex
                                                           align="center"
-                                                          className="e17811v31 css-dqr4rq-ButtonLabel"
+                                                          className="css-6q5v1w-ButtonLabel e17811v31"
                                                           size="xsmall"
                                                         >
-                                                          <div
+                                                          <Base
+                                                            align="center"
                                                             className="e17811v31 css-dqr4rq-ButtonLabel"
-                                                            is={null}
                                                             size="xsmall"
                                                           >
-                                                            Add Project
-                                                            <StyledChevronDown>
-                                                              <Component
-                                                                className="css-17v3tc-StyledChevronDown e1yghndz0"
-                                                              >
-                                                                <InlineSvg
+                                                            <div
+                                                              className="e17811v31 css-dqr4rq-ButtonLabel"
+                                                              is={null}
+                                                              size="xsmall"
+                                                            >
+                                                              Add Project
+                                                              <StyledChevronDown>
+                                                                <Component
                                                                   className="css-17v3tc-StyledChevronDown e1yghndz0"
-                                                                  src="icon-chevron-down"
                                                                 >
-                                                                  <StyledSvg
+                                                                  <InlineSvg
                                                                     className="css-17v3tc-StyledChevronDown e1yghndz0"
-                                                                    height="1em"
-                                                                    viewBox={Object {}}
-                                                                    width="1em"
+                                                                    src="icon-chevron-down"
                                                                   >
-                                                                    <svg
-                                                                      className="e1yghndz0 css-1gdv3x4-StyledSvg-StyledChevronDown e2idor0"
+                                                                    <StyledSvg
+                                                                      className="css-17v3tc-StyledChevronDown e1yghndz0"
                                                                       height="1em"
                                                                       viewBox={Object {}}
                                                                       width="1em"
                                                                     >
-                                                                      <use
-                                                                        href="#test"
-                                                                        xlinkHref="#test"
-                                                                      />
-                                                                    </svg>
-                                                                  </StyledSvg>
-                                                                </InlineSvg>
-                                                              </Component>
-                                                            </StyledChevronDown>
-                                                          </div>
-                                                        </Base>
-                                                      </Flex>
-                                                    </Component>
-                                                  </ButtonLabel>
-                                                </button>
-                                              </Component>
-                                            </StyledButton>
-                                          </Button>
-                                        </Component>
-                                      </StyledButton>
-                                    </DropdownButton>
-                                  </div>
+                                                                      <svg
+                                                                        className="e1yghndz0 css-1gdv3x4-StyledSvg-StyledChevronDown e2idor0"
+                                                                        height="1em"
+                                                                        viewBox={Object {}}
+                                                                        width="1em"
+                                                                      >
+                                                                        <use
+                                                                          href="#test"
+                                                                          xlinkHref="#test"
+                                                                        />
+                                                                      </svg>
+                                                                    </StyledSvg>
+                                                                  </InlineSvg>
+                                                                </Component>
+                                                              </StyledChevronDown>
+                                                            </div>
+                                                          </Base>
+                                                        </Flex>
+                                                      </Component>
+                                                    </ButtonLabel>
+                                                  </button>
+                                                </Component>
+                                              </StyledButton>
+                                            </Button>
+                                          </Component>
+                                        </StyledButton>
+                                      </DropdownButton>
+                                    </div>
+                                  </Actor>
                                 </div>
                               </Component>
                             </AutoCompleteRoot>
diff --git a/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap b/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap
index aebe013fbf..58eaac0265 100644
--- a/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap
@@ -2490,6 +2490,7 @@ exports[`RuleBuilder renders with suggestions 1`] = `
                                             >
                                               <StyledBaseAvatar
                                                 className="tip avatar"
+                                                round={true}
                                                 style={
                                                   Object {
                                                     "height": "28px",
@@ -2499,7 +2500,7 @@ exports[`RuleBuilder renders with suggestions 1`] = `
                                                 title="Jane Doe (janedoe@example.com)"
                                               >
                                                 <span
-                                                  className="tip avatar css-15umz1j-StyledBaseAvatar e1z0ohzl0"
+                                                  className="tip avatar css-1ttlt2k-StyledBaseAvatar e1z0ohzl0"
                                                   style={
                                                     Object {
                                                       "height": "28px",
diff --git a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
index 7711e43b64..e95836efab 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
@@ -486,6 +486,10 @@ exports[`OrganizationIntegrations render() with installed integrations Displays
                                                 "yellowOrangeLight": "#FFC087",
                                                 "zIndex": Object {
                                                   "dropdown": 1001,
+                                                  "dropdownAutocomplete": Object {
+                                                    "actor": 3,
+                                                    "menu": 2,
+                                                  },
                                                   "header": 1000,
                                                   "modal": 10000,
                                                   "sidebar": 1002,
@@ -700,6 +704,10 @@ exports[`OrganizationIntegrations render() with installed integrations Displays
                                                   "yellowOrangeLight": "#FFC087",
                                                   "zIndex": Object {
                                                     "dropdown": 1001,
+                                                    "dropdownAutocomplete": Object {
+                                                      "actor": 3,
+                                                      "menu": 2,
+                                                    },
                                                     "header": 1000,
                                                     "modal": 10000,
                                                     "sidebar": 1002,
@@ -1197,6 +1205,10 @@ exports[`OrganizationIntegrations render() with installed integrations Displays
                                                 "yellowOrangeLight": "#FFC087",
                                                 "zIndex": Object {
                                                   "dropdown": 1001,
+                                                  "dropdownAutocomplete": Object {
+                                                    "actor": 3,
+                                                    "menu": 2,
+                                                  },
                                                   "header": 1000,
                                                   "modal": 10000,
                                                   "sidebar": 1002,
@@ -1411,6 +1423,10 @@ exports[`OrganizationIntegrations render() with installed integrations Displays
                                                   "yellowOrangeLight": "#FFC087",
                                                   "zIndex": Object {
                                                     "dropdown": 1001,
+                                                    "dropdownAutocomplete": Object {
+                                                      "actor": 3,
+                                                      "menu": 2,
+                                                    },
                                                     "header": 1000,
                                                     "modal": 10000,
                                                     "sidebar": 1002,
@@ -2612,6 +2628,10 @@ exports[`OrganizationIntegrations render() without integrations Displays integra
                                                 "yellowOrangeLight": "#FFC087",
                                                 "zIndex": Object {
                                                   "dropdown": 1001,
+                                                  "dropdownAutocomplete": Object {
+                                                    "actor": 3,
+                                                    "menu": 2,
+                                                  },
                                                   "header": 1000,
                                                   "modal": 10000,
                                                   "sidebar": 1002,
@@ -2826,6 +2846,10 @@ exports[`OrganizationIntegrations render() without integrations Displays integra
                                                   "yellowOrangeLight": "#FFC087",
                                                   "zIndex": Object {
                                                     "dropdown": 1001,
+                                                    "dropdownAutocomplete": Object {
+                                                      "actor": 3,
+                                                      "menu": 2,
+                                                    },
                                                     "header": 1000,
                                                     "modal": 10000,
                                                     "sidebar": 1002,
@@ -3289,6 +3313,10 @@ exports[`OrganizationIntegrations render() without integrations Displays integra
                                                 "yellowOrangeLight": "#FFC087",
                                                 "zIndex": Object {
                                                   "dropdown": 1001,
+                                                  "dropdownAutocomplete": Object {
+                                                    "actor": 3,
+                                                    "menu": 2,
+                                                  },
                                                   "header": 1000,
                                                   "modal": 10000,
                                                   "sidebar": 1002,
@@ -3503,6 +3531,10 @@ exports[`OrganizationIntegrations render() without integrations Displays integra
                                                   "yellowOrangeLight": "#FFC087",
                                                   "zIndex": Object {
                                                     "dropdown": 1001,
+                                                    "dropdownAutocomplete": Object {
+                                                      "actor": 3,
+                                                      "menu": 2,
+                                                    },
                                                     "header": 1000,
                                                     "modal": 10000,
                                                     "sidebar": 1002,
