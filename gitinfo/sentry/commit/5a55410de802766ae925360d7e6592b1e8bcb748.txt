commit 5a55410de802766ae925360d7e6592b1e8bcb748
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Jul 7 11:32:38 2020 -0700

    chore(ts): Convert onboarding views (#19738)

diff --git a/package.json b/package.json
index 6af6b91ed7..7ae7c39ebe 100644
--- a/package.json
+++ b/package.json
@@ -49,6 +49,7 @@
     "@types/react-virtualized": "^9.20.1",
     "@types/reflexbox": "^4.0.0",
     "@types/reflux": "0.4.1",
+    "@types/scroll-to-element": "^2.0.0",
     "algoliasearch": "^3.32.0",
     "babel-loader": "^8.1.0",
     "babel-plugin-add-react-displayname": "^0.0.5",
diff --git a/src/sentry/static/sentry/app/actionCreators/projects.tsx b/src/sentry/static/sentry/app/actionCreators/projects.tsx
index 019b293955..fc9420b52a 100644
--- a/src/sentry/static/sentry/app/actionCreators/projects.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/projects.tsx
@@ -3,6 +3,7 @@ import debounce from 'lodash/debounce';
 import {Query} from 'history';
 
 import {Client} from 'app/api';
+import {PlatformKey} from 'app/data/platformCategories';
 import {Project, Team} from 'app/types';
 import {
   addLoadingMessage,
@@ -333,7 +334,7 @@ export function loadDocs(
   api: Client,
   orgSlug: string,
   projectSlug: string,
-  platform: string
+  platform: PlatformKey
 ) {
   return api.requestPromise(`/projects/${orgSlug}/${projectSlug}/docs/${platform}/`);
 }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/inlineDocs.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/inlineDocs.tsx
index 40dcd782a1..2b8b918b98 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/inlineDocs.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/inlineDocs.tsx
@@ -7,6 +7,7 @@ import {Client} from 'app/api';
 import {loadDocs} from 'app/actionCreators/projects';
 import {t, tct} from 'app/locale';
 import LoadingIndicator from 'app/components/loadingIndicator';
+import {PlatformKey} from 'app/data/platformCategories';
 
 type Props = {
   api: Client;
@@ -42,7 +43,7 @@ class InlineDocs extends React.Component<Props, State> {
 
     this.setState({loading: true});
 
-    let tracingPlatform = '';
+    let tracingPlatform: PlatformKey = '';
     switch (platform) {
       case 'sentry.python': {
         tracingPlatform = 'python-tracing';
diff --git a/src/sentry/static/sentry/app/data/platformCategories.tsx b/src/sentry/static/sentry/app/data/platformCategories.tsx
index 480a9c9899..1742c3d44c 100644
--- a/src/sentry/static/sentry/app/data/platformCategories.tsx
+++ b/src/sentry/static/sentry/app/data/platformCategories.tsx
@@ -92,11 +92,17 @@ export const sourceMaps: PlatformKey[] = [
   'electron',
 ];
 
+// TODO(epurkhiser): I've added these since there was a need to have them in
+// the platform key type. However I have not added them anywhere else.
+const tracing = ['python-tracing', 'node-tracing'];
+
 export type PlatformKey =
   | typeof popular[number]
   | typeof frontend[number]
   | typeof mobile[number]
   | typeof backend[number]
-  | typeof desktop[number];
+  | typeof desktop[number]
+  | typeof tracing[number]
+  | 'other';
 
 export default categoryList;
diff --git a/src/sentry/static/sentry/app/types/hooks.ts b/src/sentry/static/sentry/app/types/hooks.ts
index b2e681bac7..2a7aa5b260 100644
--- a/src/sentry/static/sentry/app/types/hooks.ts
+++ b/src/sentry/static/sentry/app/types/hooks.ts
@@ -5,6 +5,7 @@ import {User, Organization, Project, IntegrationProvider} from 'app/types';
 import {ExperimentKey} from 'app/types/experiments';
 import FeatureDisabled from 'app/components/acl/featureDisabled';
 import SidebarItem from 'app/components/sidebar/sidebarItem';
+import {StepProps} from 'app/views/onboarding/types';
 
 // XXX(epurkhiser): A Note about `_`.
 //
@@ -311,9 +312,7 @@ type SidebarBottomItemsHook = (
  * Wrapper component to allow for customization of the onboarding member
  * invitation component.
  */
-type OnboardingInviteMembersHook = () => React.ComponentType<{
-  organization: Organization;
-}>;
+type OnboardingInviteMembersHook = () => React.ComponentType<StepProps>;
 
 /**
  * The DecoratedIntegrationFeature differs from the IntegrationFeature as it is
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index bbd7f53657..d93f87ca6e 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -151,6 +151,7 @@ export type AvatarProject = {
 
 export type Project = {
   id: string;
+  dateCreated: string;
   isMember: boolean;
   teams: Team[];
   features: string[];
diff --git a/src/sentry/static/sentry/app/views/onboarding/onboarding.jsx b/src/sentry/static/sentry/app/views/onboarding/onboarding.tsx
similarity index 84%
rename from src/sentry/static/sentry/app/views/onboarding/onboarding.jsx
rename to src/sentry/static/sentry/app/views/onboarding/onboarding.tsx
index d7512e2642..4887abf07e 100644
--- a/src/sentry/static/sentry/app/views/onboarding/onboarding.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/onboarding.tsx
@@ -1,6 +1,5 @@
-import {browserHistory} from 'react-router';
+import {browserHistory, RouteComponentProps} from 'react-router';
 import DocumentTitle from 'react-document-title';
-import PropTypes from 'prop-types';
 import React from 'react';
 import {motion, AnimatePresence} from 'framer-motion';
 import scrollToElement from 'scroll-to-element';
@@ -11,24 +10,32 @@ import {analytics} from 'app/utils/analytics';
 import {t} from 'app/locale';
 import Hook from 'app/components/hook';
 import InlineSvg from 'app/components/inlineSvg';
-import OnboardingPlatform from 'app/views/onboarding/platform';
-import OnboardingProjectSetup from 'app/views/onboarding/projectSetup';
-import OnboardingWelcome from 'app/views/onboarding/welcome';
 import PageHeading from 'app/components/pageHeading';
-import SentryTypes from 'app/sentryTypes';
 import space from 'app/styles/space';
 import withOrganization from 'app/utils/withOrganization';
 import withProjects from 'app/utils/withProjects';
 import testableTransition from 'app/utils/testableTransition';
+import {Organization, Project} from 'app/types';
 
-const recordAnalyticStepComplete = ({organization, project, step}) =>
+import {StepDescriptor, StepData} from './types';
+import OnboardingPlatform from './platform';
+import OnboardingProjectSetup from './projectSetup';
+import OnboardingWelcome from './welcome';
+
+type AnalyticsOpts = {
+  organization: Organization;
+  project: Project | null;
+  step: StepDescriptor;
+};
+
+const recordAnalyticStepComplete = ({organization, project, step}: AnalyticsOpts) =>
   analytics('onboarding_v2.step_compete', {
     org_id: parseInt(organization.id, 10),
     project: project ? project.slug : null,
     step: step.id,
   });
 
-const ONBOARDING_STEPS = [
+const ONBOARDING_STEPS: StepDescriptor[] = [
   {
     id: 'welcome',
     title: t('Welcome to Sentry'),
@@ -46,24 +53,29 @@ const ONBOARDING_STEPS = [
   },
 ];
 
-const stepShape = PropTypes.shape({
-  id: PropTypes.string,
-  title: PropTypes.string,
-  Component: PropTypes.func,
-});
-
-class Onboarding extends React.Component {
-  static propTypes = {
-    steps: PropTypes.arrayOf(stepShape),
-    projects: PropTypes.arrayOf(SentryTypes.Project),
-    organization: SentryTypes.Organization,
+type RouteParams = {
+  orgId: string;
+  step: string;
+};
+
+type DefaultProps = {
+  steps: StepDescriptor[];
+};
+
+type Props = RouteComponentProps<RouteParams, {}> &
+  DefaultProps & {
+    organization: Organization;
+    projects: Project[];
   };
 
-  static defaultProps = {
+type State = StepData;
+
+class Onboarding extends React.Component<Props, State> {
+  static defaultProps: DefaultProps = {
     steps: ONBOARDING_STEPS,
   };
 
-  state = {};
+  state: State = {};
 
   componentDidMount() {
     this.validateActiveStep();
@@ -90,21 +102,21 @@ class Onboarding extends React.Component {
 
   get firstProject() {
     const sortedProjects = this.props.projects.sort(
-      (a, b) => new Date(a.dateCreated) - new Date(b.dateCreated)
+      (a, b) => new Date(a.dateCreated).getTime() - new Date(b.dateCreated).getTime()
     );
 
     return sortedProjects.length > 0 ? sortedProjects[0] : null;
   }
 
   get projectPlatform() {
-    return this.state.platform || (this.firstProject && this.firstProject.platform);
+    return this.state.platform ?? this.firstProject?.platform ?? null;
   }
 
-  handleUpdate = data => {
+  handleUpdate = (data: StepData) => {
     this.setState(data);
   };
 
-  handleNextStep(step, data) {
+  handleNextStep(step: StepDescriptor, data: StepData) {
     this.handleUpdate(data);
 
     if (step !== this.activeStep) {
@@ -123,7 +135,7 @@ class Onboarding extends React.Component {
     browserHistory.push(`/onboarding/${orgId}/${nextStep.id}/`);
   }
 
-  handleReturnToStep(step, data) {
+  handleReturnToStep(step: StepDescriptor, data: StepData) {
     const {orgId} = this.props.params;
 
     this.handleUpdate(data);
@@ -134,6 +146,7 @@ class Onboarding extends React.Component {
     const step = this.activeStep;
     scrollToElement(`#onboarding_step_${step.id}`, {
       align: 'middle',
+      offset: 0,
       // Disable animations in CI - must be < 0 to disable
       duration: IS_CI ? -1 : 300,
     });
@@ -260,7 +273,7 @@ const ProgressBar = styled('div')`
   }
 `;
 
-const ProgressStep = styled('div')`
+const ProgressStep = styled('div')<{active: boolean}>`
   position: relative;
   width: 16px;
   height: 16px;
@@ -284,7 +297,7 @@ ProgressStatus.defaultProps = {
   transition: testableTransition(),
 };
 
-const OnboardingStep = styled(motion.div)`
+const OnboardingStep = styled(motion.div)<{active: boolean}>`
   margin: 70px 0;
   margin-left: -20px;
   padding-left: 18px;
@@ -315,15 +328,4 @@ OnboardingStep.defaultProps = {
   transition: testableTransition(),
 };
 
-export const stepPropTypes = {
-  scrollTargetId: PropTypes.string,
-  active: PropTypes.bool,
-  orgId: PropTypes.string,
-  project: SentryTypes.Project,
-  platform: PropTypes.string,
-  onReturnToStep: PropTypes.func,
-  onComplete: PropTypes.func,
-  onUpdate: PropTypes.func,
-};
-
 export default withOrganization(withProjects(Onboarding));
diff --git a/src/sentry/static/sentry/app/views/onboarding/platform.jsx b/src/sentry/static/sentry/app/views/onboarding/platform.tsx
similarity index 75%
rename from src/sentry/static/sentry/app/views/onboarding/platform.jsx
rename to src/sentry/static/sentry/app/views/onboarding/platform.tsx
index 5b73ff16bd..4d7fb15daf 100644
--- a/src/sentry/static/sentry/app/views/onboarding/platform.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/platform.tsx
@@ -1,44 +1,50 @@
 import {ClassNames} from '@emotion/core';
-import PropTypes from 'prop-types';
 import React from 'react';
 
 import {addErrorMessage} from 'app/actionCreators/indicator';
 import {createProject} from 'app/actionCreators/projects';
-import {stepPropTypes} from 'app/views/onboarding/onboarding';
 import {t, tct} from 'app/locale';
 import Button from 'app/components/button';
 import PlatformPicker from 'app/components/platformPicker';
 import ProjectActions from 'app/actions/projectActions';
-import SentryTypes from 'app/sentryTypes';
 import space from 'app/styles/space';
 import withApi from 'app/utils/withApi';
 import withTeams from 'app/utils/withTeams';
-
-class OnboardingPlatform extends React.Component {
-  static propTypes = {
-    ...stepPropTypes,
-    api: PropTypes.object,
-    teams: PropTypes.arrayOf(SentryTypes.Team),
-  };
-
-  state = {
-    /**
-     * This will be flipped to true immediately before creating the first
-     * project. We use state here to avoid the intermittent prop value where
-     * the project is created but the store hasn't propagated its value to the
-     * component yet, leaving a brief period where the button will flash
-     * between labels / disabled states.
-     */
+import {Client} from 'app/api';
+import {Team} from 'app/types';
+import {PlatformKey} from 'app/data/platformCategories';
+
+import {StepProps} from './types';
+
+type Props = StepProps & {
+  api: Client;
+  teams: Team[];
+};
+
+type State = {
+  /**
+   * This will be flipped to true immediately before creating the first
+   * project. We use state here to avoid the intermittent prop value where
+   * the project is created but the store hasn't propagated its value to the
+   * component yet, leaving a brief period where the button will flash
+   * between labels / disabled states.
+   */
+  firstProjectCreated: boolean;
+  /**
+   * `progressing` indicates that we are moving to the next step. Again, this
+   * is kept as state to avoid intermittent states causing flickering of the
+   * button.
+   */
+  progressing: boolean;
+};
+
+class OnboardingPlatform extends React.Component<Props, State> {
+  state: State = {
     firstProjectCreated: false,
-    /**
-     * `progressing` indicates that we are moving to the next step. Again, this
-     * is kept as state to avoid intermittent states causing flickering of the
-     * button.
-     */
     progressing: false,
   };
 
-  componentDidUpdate(prevProps) {
+  componentDidUpdate(prevProps: Props) {
     if (prevProps.active && !this.props.active) {
       // eslint-disable-next-line react/no-did-update-set-state
       this.setState({progressing: false});
@@ -62,7 +68,7 @@ class OnboardingPlatform extends React.Component {
     return t('Setup Your Project');
   }
 
-  async createFirstProject(platform) {
+  async createFirstProject(platform: PlatformKey) {
     const {api, orgId, teams} = this.props;
 
     if (this.hasFirstProject) {
@@ -84,7 +90,7 @@ class OnboardingPlatform extends React.Component {
     }
   }
 
-  handleSetPlatform = platform => {
+  handleSetPlatform = (platform: PlatformKey) => {
     const {onUpdate, onReturnToStep} = this.props;
 
     if (platform) {
@@ -97,10 +103,16 @@ class OnboardingPlatform extends React.Component {
 
   handleContinue = async () => {
     this.setState({progressing: true});
+    const {platform} = this.props;
+
+    if (platform === null) {
+      return;
+    }
+
     // Create their first project if they don't already have one. This is a
     // no-op if they already have a project.
-    await this.createFirstProject(this.props.platform);
-    this.props.onComplete();
+    await this.createFirstProject(platform);
+    this.props.onComplete({});
   };
 
   render() {
diff --git a/src/sentry/static/sentry/app/views/onboarding/projectSetup/index.jsx b/src/sentry/static/sentry/app/views/onboarding/projectSetup/index.tsx
similarity index 79%
rename from src/sentry/static/sentry/app/views/onboarding/projectSetup/index.jsx
rename to src/sentry/static/sentry/app/views/onboarding/projectSetup/index.tsx
index ba1fbd5149..db0751fc7e 100644
--- a/src/sentry/static/sentry/app/views/onboarding/projectSetup/index.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/projectSetup/index.tsx
@@ -3,19 +3,24 @@ import {motion, AnimatePresence} from 'framer-motion';
 import styled from '@emotion/styled';
 
 import {analytics} from 'app/utils/analytics';
-import {stepPropTypes} from 'app/views/onboarding/onboarding';
 import {t} from 'app/locale';
 import HookOrDefault from 'app/components/hookOrDefault';
-import SentryTypes from 'app/sentryTypes';
 import withOrganization from 'app/utils/withOrganization';
 import testableTransition from 'app/utils/testableTransition';
+import {Organization} from 'app/types';
 
+import {StepProps} from '../types';
 import InviteMembers from './inviteMembers';
 import LearnMore from './learnMore';
 import ProjectDocs from './projectDocs';
 import SetupChoices from './setupChoices';
 
-const recordAnalyticsOptionSelected = ({organization, choice}) =>
+type AnalyticsOpts = {
+  organization: Organization;
+  choice: string;
+};
+
+const recordAnalyticsOptionSelected = ({organization, choice}: AnalyticsOpts) =>
   analytics('onboarding_v2.setup_choice_selected', {
     org_id: parseInt(organization.id, 10),
     choice,
@@ -28,7 +33,13 @@ const InviteMembersComponent = HookOrDefault({
   defaultComponent: InviteMembers,
 });
 
-const SETUP_CHOICES = [
+export type SetupDescriptor = {
+  id: string;
+  title: string;
+  component: React.ComponentType<StepProps>;
+};
+
+const SETUP_CHOICES: SetupDescriptor[] = [
   {
     id: 'install-guide',
     title: t('Installation Guide'),
@@ -48,17 +59,20 @@ const SETUP_CHOICES = [
 
 const DEFAULT_SETUP_OPTION = 'install-guide';
 
-class OnboardingProjectSetup extends React.Component {
-  static propTypes = {
-    ...stepPropTypes,
-    organization: SentryTypes.Organization,
-  };
+type Props = StepProps & {
+  organization: Organization;
+};
+
+type State = {
+  selectedChoice: string;
+};
 
-  state = {
+class OnboardingProjectSetup extends React.Component<Props, State> {
+  state: State = {
     selectedChoice: DEFAULT_SETUP_OPTION,
   };
 
-  handleSelect = id => {
+  handleSelect = (id: string) => {
     const {organization} = this.props;
     this.setState({selectedChoice: id});
     recordAnalyticsOptionSelected({organization, choice: id});
@@ -66,7 +80,7 @@ class OnboardingProjectSetup extends React.Component {
 
   render() {
     const {selectedChoice} = this.state;
-    const SelectedComponent = SETUP_CHOICES.find(item => item.id === selectedChoice)
+    const SelectedComponent = SETUP_CHOICES.find(item => item.id === selectedChoice)!
       .component;
 
     return (
diff --git a/src/sentry/static/sentry/app/views/onboarding/projectSetup/inviteMembers.jsx b/src/sentry/static/sentry/app/views/onboarding/projectSetup/inviteMembers.tsx
similarity index 82%
rename from src/sentry/static/sentry/app/views/onboarding/projectSetup/inviteMembers.jsx
rename to src/sentry/static/sentry/app/views/onboarding/projectSetup/inviteMembers.tsx
index e5dabceddb..18244cf3fc 100644
--- a/src/sentry/static/sentry/app/views/onboarding/projectSetup/inviteMembers.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/projectSetup/inviteMembers.tsx
@@ -1,4 +1,3 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
 
@@ -11,29 +10,42 @@ import EmailField from 'app/views/settings/components/forms/emailField';
 import Form from 'app/views/settings/components/forms/form';
 import Panel from 'app/components/panels/panel';
 import SelectField from 'app/views/settings/components/forms/selectField';
-import SentryTypes from 'app/sentryTypes';
 import TextBlock from 'app/views/settings/components/text/textBlock';
 import space from 'app/styles/space';
 import withApi from 'app/utils/withApi';
 import withConfig from 'app/utils/withConfig';
 import withOrganization from 'app/utils/withOrganization';
+import {Client} from 'app/api';
+import {Organization, Config, Project, MemberRole} from 'app/types';
+import FormModel from 'app/views/settings/components/forms/model';
 
-const recordAnalyticsUserInvited = ({organization, project}) =>
+import {StepProps} from '../types';
+
+type AnalyticsOpts = {
+  organization: Organization;
+  project: Project | null;
+};
+
+const recordAnalyticsUserInvited = ({organization, project}: AnalyticsOpts) =>
   analytics('onboarding_v2.user_invited', {
-    org_id: parseInt(organization.id, 10),
-    project: project.slug,
+    org_id: organization.id,
+    project: project?.slug,
   });
 
-class InviteMembers extends React.Component {
-  static propTypes = {
-    api: PropTypes.object.isRequired,
-    organization: SentryTypes.Organization.isRequired,
-    project: SentryTypes.Project.isRequired,
-    config: SentryTypes.Config.isRequired,
-    formProps: PropTypes.object,
-  };
+type Props = StepProps & {
+  api: Client;
+  organization: Organization;
+  config: Config;
+  formProps?: Form['props'];
+};
+
+type State = {
+  invitedEmails: string[];
+  roleList: MemberRole[];
+};
 
-  state = {
+class InviteMembers extends React.Component<Props, State> {
+  state: State = {
     invitedEmails: [],
     roleList: [],
   };
@@ -54,7 +66,7 @@ class InviteMembers extends React.Component {
     return this.props.config.user.email.split('@')[1];
   }
 
-  handleSubmitSuccess = (data, model) => {
+  handleSubmitSuccess = (data: any, model: FormModel) => {
     model.fields.set('email', '');
     this.setState(state => ({invitedEmails: [...state.invitedEmails, data.email]}));
     addSuccessMessage(t('Invited %s to your organization', data.email));
@@ -82,7 +94,7 @@ class InviteMembers extends React.Component {
             apiMethod="POST"
             submitLabel={t('Invite Member')}
             onSubmitSuccess={this.handleSubmitSuccess}
-            initialData={{teams: [project.team.slug]}}
+            initialData={{teams: [project?.teams[0]?.slug]}}
             {...formProps}
           >
             <HelpText>
diff --git a/src/sentry/static/sentry/app/views/onboarding/projectSetup/learnMore.jsx b/src/sentry/static/sentry/app/views/onboarding/projectSetup/learnMore.tsx
similarity index 65%
rename from src/sentry/static/sentry/app/views/onboarding/projectSetup/learnMore.jsx
rename to src/sentry/static/sentry/app/views/onboarding/projectSetup/learnMore.tsx
index 7f8de7dbeb..d494d5516f 100644
--- a/src/sentry/static/sentry/app/views/onboarding/projectSetup/learnMore.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/projectSetup/learnMore.tsx
@@ -5,9 +5,11 @@ import {t, tct} from 'app/locale';
 import CreateSampleEventButton from 'app/views/onboarding/createSampleEventButton';
 import Panel from 'app/components/panels/panel';
 import PanelBody from 'app/components/panels/panelBody';
-import SentryTypes from 'app/sentryTypes';
 import getDynamicText from 'app/utils/getDynamicText';
 import space from 'app/styles/space';
+import Alert from 'app/components/alert';
+
+import {StepProps} from '../types';
 
 const LEARN_MORE_VIDEO = 'https://player.vimeo.com/video/319554213';
 
@@ -23,33 +25,33 @@ const learnMoveVideo = getDynamicText({
   ),
 });
 
-const LearnMore = ({project}) => (
+const LearnMore = ({project}: StepProps) => (
   <React.Fragment>
     <DemoVideo>{learnMoveVideo}</DemoVideo>
-    <Panel>
-      <SampleEventPanelBody withPadding>
-        {tct(
-          `Want to see more of what Sentry can do before integrating into your
+    {project ? (
+      <Panel>
+        <SampleEventPanelBody withPadding>
+          {tct(
+            `Want to see more of what Sentry can do before integrating into your
            application? Create a [strong:Sample Error Event] and poke around to
            get a better feel for the Sentry workflow.`,
-          {strong: <strong />}
-        )}
-        <CreateSampleEventButton
-          project={project}
-          source="onboarding_setup"
-          priority="primary"
-        >
-          {t('Create A Sample Event')}
-        </CreateSampleEventButton>
-      </SampleEventPanelBody>
-    </Panel>
+            {strong: <strong />}
+          )}
+          <CreateSampleEventButton
+            project={project}
+            source="onboarding_setup"
+            priority="primary"
+          >
+            {t('Create A Sample Event')}
+          </CreateSampleEventButton>
+        </SampleEventPanelBody>
+      </Panel>
+    ) : (
+      <Alert type="info">{t('Create a project to view a sample event!')}</Alert>
+    )}
   </React.Fragment>
 );
 
-LearnMore.propTypes = {
-  project: SentryTypes.Project,
-};
-
 const DemoVideo = styled(Panel)`
   display: flex;
   justify-content: center;
diff --git a/src/sentry/static/sentry/app/views/onboarding/projectSetup/projectDocs.jsx b/src/sentry/static/sentry/app/views/onboarding/projectSetup/projectDocs.tsx
similarity index 84%
rename from src/sentry/static/sentry/app/views/onboarding/projectSetup/projectDocs.jsx
rename to src/sentry/static/sentry/app/views/onboarding/projectSetup/projectDocs.tsx
index a09bcd6758..c30e518682 100644
--- a/src/sentry/static/sentry/app/views/onboarding/projectSetup/projectDocs.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/projectSetup/projectDocs.tsx
@@ -15,13 +15,18 @@ import LoadingError from 'app/components/loadingError';
 import Panel from 'app/components/panels/panel';
 import PanelBody from 'app/components/panels/panelBody';
 import PlatformIcon from 'app/components/platformIcon';
-import SentryTypes from 'app/sentryTypes';
 import platforms from 'app/data/platforms';
 import space from 'app/styles/space';
 import withApi from 'app/utils/withApi';
 import getDynamicText from 'app/utils/getDynamicText';
 import withOrganization from 'app/utils/withOrganization';
 import testableTransition from 'app/utils/testableTransition';
+import {Organization, Project} from 'app/types';
+import {PlatformKey} from 'app/data/platformCategories';
+import {Client} from 'app/api';
+import {Theme} from 'app/utils/theme';
+
+import {StepProps} from '../types';
 
 /**
  * The documentation will include the following string should it be missing the
@@ -29,23 +34,32 @@ import testableTransition from 'app/utils/testableTransition';
  */
 const INCOMPLETE_DOC_FLAG = 'TODO-ADD-VERIFICATION-EXAMPLE';
 
-const recordAnalyticsDocsClicked = ({organization, project, platform}) =>
+type AnalyticsOpts = {
+  organization: Organization;
+  project: Project | null;
+  platform: PlatformKey | null;
+};
+
+const recordAnalyticsDocsClicked = ({organization, project, platform}: AnalyticsOpts) =>
   analytics('onboarding_v2.full_docs_clicked', {
-    org_id: parseInt(organization.id, 10),
-    project: project.slug,
+    org_id: organization.id,
+    project: project?.slug,
     platform,
   });
 
-class ProjectDocs extends React.Component {
-  static propTypes = {
-    api: PropTypes.object,
-    organization: SentryTypes.Organization,
-    project: SentryTypes.Project,
-    platform: PropTypes.string,
-    scrollTargetId: PropTypes.string,
-  };
+type Props = StepProps & {
+  api: Client;
+  organization: Organization;
+};
 
-  state = {
+type State = {
+  platformDocs: {html: string; link: string} | null;
+  loadedPlatform: PlatformKey | null;
+  hasError: boolean;
+};
+
+class ProjectDocs extends React.Component<Props, State> {
+  state: State = {
     platformDocs: null,
     loadedPlatform: null,
     hasError: false,
@@ -55,7 +69,7 @@ class ProjectDocs extends React.Component {
     this.fetchData();
   }
 
-  componentDidUpdate(nextProps) {
+  componentDidUpdate(nextProps: Props) {
     if (
       nextProps.platform !== this.props.platform ||
       nextProps.project !== this.props.project
@@ -67,7 +81,7 @@ class ProjectDocs extends React.Component {
   fetchData = async () => {
     const {api, project, organization, platform} = this.props;
 
-    if (!project) {
+    if (!project || !platform) {
       return;
     }
 
@@ -113,8 +127,8 @@ class ProjectDocs extends React.Component {
            yet! If you have trouble sending your first event be sure to consult
            the [docsLink:full documentation] for [platform].`,
           {
-            docsLink: <ExternalLink href={platformDocs && platformDocs.link} />,
-            platform: platforms.find(p => p.id === loadedPlatform).name,
+            docsLink: <ExternalLink href={platformDocs?.link} />,
+            platform: platforms.find(p => p.id === loadedPlatform)?.name,
           }
         )}
       </Alert>
@@ -128,7 +142,7 @@ class ProjectDocs extends React.Component {
     const introduction = (
       <Panel>
         <PanelBody withPadding>
-          <PlatformHeading platform={loadedPlatform || platform} />
+          <PlatformHeading platform={loadedPlatform ?? platform ?? 'other'} />
 
           <Description id={scrollTargetId}>
             {tct(
@@ -148,7 +162,7 @@ class ProjectDocs extends React.Component {
               <Button
                 external
                 onClick={this.handleFullDocsClick}
-                href={platformDocs && platformDocs.link}
+                href={platformDocs?.link}
                 size="small"
               >
                 {t('Full Documentation')}
@@ -260,7 +274,10 @@ const PlatformHeading = ({platform}) => (
       <Heading key={platform}>
         <StyledPlatformIcon platform={platform} />
         <Header>
-          {t('%s SDK Installation Guide', platforms.find(p => p.id === platform).name)}
+          {t(
+            '%s SDK Installation Guide',
+            platforms.find(p => p.id === platform)?.name ?? t('Unknown')
+          )}
         </Header>
       </Heading>
     </AnimatePresence>
@@ -271,8 +288,11 @@ PlatformHeading.propTypes = {
   platform: PropTypes.string.isRequired,
 };
 
-const getAlertClass = type => (type === 'default' ? 'alert' : `alert-${type}`);
-const mapAlertStyles = p => type =>
+type AlertType = React.ComponentProps<typeof Alert>['type'];
+
+const getAlertClass = (type: AlertType) => (type === 'muted' ? 'alert' : `alert-${type}`);
+
+const mapAlertStyles = (p: {theme: Theme}, type: AlertType) =>
   css`
     .${getAlertClass(type)} {
       ${alertStyles({theme: p.theme, type})};
@@ -326,7 +346,7 @@ const DocsWrapper = styled(motion.div)`
     margin-bottom: 0;
   }
 
-  ${p => Object.keys(p.theme.alert).map(mapAlertStyles(p))}
+  ${p => Object.keys(p.theme.alert).map(type => mapAlertStyles(p, type as AlertType))}
 `;
 
 DocsWrapper.defaultProps = {
diff --git a/src/sentry/static/sentry/app/views/onboarding/projectSetup/setupChoices.jsx b/src/sentry/static/sentry/app/views/onboarding/projectSetup/setupChoices.tsx
similarity index 60%
rename from src/sentry/static/sentry/app/views/onboarding/projectSetup/setupChoices.jsx
rename to src/sentry/static/sentry/app/views/onboarding/projectSetup/setupChoices.tsx
index 668c310bf2..76d673b00c 100644
--- a/src/sentry/static/sentry/app/views/onboarding/projectSetup/setupChoices.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/projectSetup/setupChoices.tsx
@@ -1,16 +1,19 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 
 import NavTabs from 'app/components/navTabs';
 
-const itemsShape = PropTypes.shape({
-  title: PropTypes.string.isRequired,
-});
+import {SetupDescriptor} from '.';
 
-const SetupChoices = ({choices, selectedChoice, onSelect}) => (
+type Props = {
+  choices: SetupDescriptor[];
+  selectedChoice: string;
+  onSelect: (choice: string) => void;
+};
+
+const SetupChoices = ({choices, selectedChoice, onSelect}: Props) => (
   <NavTabs underlined>
     {choices.map(({id, title}) => (
-      <li key={id} className={id === selectedChoice ? 'active' : null}>
+      <li key={id} className={id === selectedChoice ? 'active' : undefined}>
         <a
           href="#"
           data-test-id={`onboarding-getting-started-${id}`}
@@ -26,10 +29,4 @@ const SetupChoices = ({choices, selectedChoice, onSelect}) => (
   </NavTabs>
 );
 
-SetupChoices.propTypes = {
-  choices: PropTypes.arrayOf(itemsShape),
-  selectedChoice: PropTypes.string,
-  onSelect: PropTypes.func,
-};
-
 export default SetupChoices;
diff --git a/src/sentry/static/sentry/app/views/onboarding/types.tsx b/src/sentry/static/sentry/app/views/onboarding/types.tsx
new file mode 100644
index 0000000000..4dfef14996
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/onboarding/types.tsx
@@ -0,0 +1,23 @@
+import {Project} from 'app/types';
+import {PlatformKey} from 'app/data/platformCategories';
+
+export type StepData = {
+  platform?: PlatformKey;
+};
+
+export type StepProps = {
+  scrollTargetId: string;
+  active: boolean;
+  orgId: string;
+  project: Project | null;
+  platform: PlatformKey | null;
+  onReturnToStep: (data: StepData) => void;
+  onComplete: (data: StepData) => void;
+  onUpdate: (data: StepData) => void;
+};
+
+export type StepDescriptor = {
+  id: string;
+  title: string;
+  Component: React.ComponentType<StepProps>;
+};
diff --git a/src/sentry/static/sentry/app/views/onboarding/welcome.jsx b/src/sentry/static/sentry/app/views/onboarding/welcome.jsx
deleted file mode 100644
index 1d62c5450e..0000000000
--- a/src/sentry/static/sentry/app/views/onboarding/welcome.jsx
+++ /dev/null
@@ -1,85 +0,0 @@
-import React from 'react';
-import styled from '@emotion/styled';
-
-import {analytics} from 'app/utils/analytics';
-import {stepPropTypes} from 'app/views/onboarding/onboarding';
-import {t, tct} from 'app/locale';
-import Button from 'app/components/button';
-import SentryTypes from 'app/sentryTypes';
-import withConfig from 'app/utils/withConfig';
-import withOrganization from 'app/utils/withOrganization';
-
-const recordAnalyticsOnboardingSkipped = ({organization}) =>
-  analytics('onboarding_v2.skipped', {
-    org_id: parseInt(organization.id, 10),
-  });
-
-class OnboardingWelcome extends React.Component {
-  static propTypes = {
-    ...stepPropTypes,
-    config: SentryTypes.Config.isRequired,
-  };
-
-  skipOnboarding = () => {
-    const {organization} = this.props;
-    recordAnalyticsOnboardingSkipped({organization});
-  };
-
-  render() {
-    const {onComplete, config, active} = this.props;
-    const {user} = config;
-
-    return (
-      <React.Fragment>
-        <p>
-          {tct("We're happy you're here, [name]!", {
-            name: <strong>{user.name.split(' ')[0]}</strong>,
-          })}
-        </p>
-        <p>
-          {t(
-            `With Sentry, you can find and fix bugs before your customers even
-             notice a problem. When things go to hell, we'll help you fight the
-             fires. In the next two steps you will…`
-          )}
-        </p>
-        <ul>
-          <li>{t('Choose your platform.')}</li>
-          <li>
-            {t(
-              `Integrate Sentry into your application, invite your team, or take
-               a tour of Sentry.`
-            )}
-          </li>
-        </ul>
-        <ActionGroup>
-          <Button
-            data-test-id="welcome-next"
-            disabled={!active}
-            priority="primary"
-            onClick={() => onComplete()}
-          >
-            {t("I'm Ready!")}
-          </Button>
-          <SecondaryAction>
-            {tct('Not your first Sentry rodeo? [exitLink:Skip this onboarding].', {
-              exitLink: <Button priority="link" onClick={this.skipOnboarding} href="/" />,
-            })}
-          </SecondaryAction>
-        </ActionGroup>
-      </React.Fragment>
-    );
-  }
-}
-
-const ActionGroup = styled('div')`
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-`;
-
-const SecondaryAction = styled('small')`
-  color: ${p => p.theme.gray600};
-`;
-
-export default withOrganization(withConfig(OnboardingWelcome));
diff --git a/src/sentry/static/sentry/app/views/onboarding/welcome.tsx b/src/sentry/static/sentry/app/views/onboarding/welcome.tsx
new file mode 100644
index 0000000000..73c051bf1d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/onboarding/welcome.tsx
@@ -0,0 +1,77 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {analytics} from 'app/utils/analytics';
+import {t, tct} from 'app/locale';
+import Button from 'app/components/button';
+import withConfig from 'app/utils/withConfig';
+import withOrganization from 'app/utils/withOrganization';
+import {Config, Organization} from 'app/types';
+
+import {StepProps} from './types';
+
+const recordAnalyticsOnboardingSkipped = ({organization}: {organization: Organization}) =>
+  analytics('onboarding_v2.skipped', {org_id: organization.id});
+
+type Props = StepProps & {
+  organization: Organization;
+  config: Config;
+};
+
+const OnboardingWelcome = ({organization, onComplete, config, active}: Props) => {
+  const {user} = config;
+  const skipOnboarding = () => recordAnalyticsOnboardingSkipped({organization});
+
+  return (
+    <React.Fragment>
+      <p>
+        {tct("We're happy you're here, [name]!", {
+          name: <strong>{user.name.split(' ')[0]}</strong>,
+        })}
+      </p>
+      <p>
+        {t(
+          `With Sentry, you can find and fix bugs before your customers even
+             notice a problem. When things go to hell, we'll help you fight the
+             fires. In the next two steps you will…`
+        )}
+      </p>
+      <ul>
+        <li>{t('Choose your platform.')}</li>
+        <li>
+          {t(
+            `Integrate Sentry into your application, invite your team, or take
+               a tour of Sentry.`
+          )}
+        </li>
+      </ul>
+      <ActionGroup>
+        <Button
+          data-test-id="welcome-next"
+          disabled={!active}
+          priority="primary"
+          onClick={() => onComplete({})}
+        >
+          {t("I'm Ready!")}
+        </Button>
+        <SecondaryAction>
+          {tct('Not your first Sentry rodeo? [exitLink:Skip this onboarding].', {
+            exitLink: <Button priority="link" onClick={skipOnboarding} href="/" />,
+          })}
+        </SecondaryAction>
+      </ActionGroup>
+    </React.Fragment>
+  );
+};
+
+const ActionGroup = styled('div')`
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+`;
+
+const SecondaryAction = styled('small')`
+  color: ${p => p.theme.gray600};
+`;
+
+export default withOrganization(withConfig(OnboardingWelcome));
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
index 21a91cd5cf..a854073391 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
@@ -180,6 +180,7 @@ export default class SentryApplicationDetails extends AsyncView<Props, State> {
       if (firstErrorFieldId) {
         scrollToElement(`#${firstErrorFieldId}`, {
           align: 'middle',
+          offset: 0,
         });
       }
     }
diff --git a/yarn.lock b/yarn.lock
index 3eb830c454..ebfaf26045 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -3002,6 +3002,11 @@
   resolved "https://registry.yarnpkg.com/@types/reflux/-/reflux-0.4.1.tgz#1f91d5ede2172c535107e9f79755bda70234f9c1"
   integrity sha1-H5HV7eIXLFNRB+n3l1W9pwI0+cE=
 
+"@types/scroll-to-element@^2.0.0":
+  version "2.0.0"
+  resolved "https://registry.yarnpkg.com/@types/scroll-to-element/-/scroll-to-element-2.0.0.tgz#caa1e37747db5cf8023b1283b8449a5560c0be4f"
+  integrity sha512-MyhKHHONq0jP4e44PVbic8xrjjawsn7Rp+cijvL7K/I6Hi0KWvD98SB1muqjtIkxoopOPdUqL+DGE67JqNkPsQ==
+
 "@types/smoothscroll-polyfill@^0.3.0":
   version "0.3.1"
   resolved "https://registry.yarnpkg.com/@types/smoothscroll-polyfill/-/smoothscroll-polyfill-0.3.1.tgz#77fb3a6e116bdab4a5959122e3b8e201224dcd49"
