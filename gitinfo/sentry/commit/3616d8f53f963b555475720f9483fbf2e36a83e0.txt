commit 3616d8f53f963b555475720f9483fbf2e36a83e0
Author: Danny Lee <dlee@sentry.io>
Date:   Mon Dec 9 15:11:30 2019 -0800

    fix(discover1): Fix date for GlobalSelectionHeader not being updated (#15948)

diff --git a/src/sentry/static/sentry/app/views/discover/index.tsx b/src/sentry/static/sentry/app/views/discover/index.tsx
index e70955b483..2d37f0c512 100644
--- a/src/sentry/static/sentry/app/views/discover/index.tsx
+++ b/src/sentry/static/sentry/app/views/discover/index.tsx
@@ -40,8 +40,6 @@ type State = {
 };
 
 class DiscoverContainer extends React.Component<Props, State> {
-  private queryBuilder: any;
-
   constructor(props: Props) {
     super(props);
 
@@ -53,7 +51,6 @@ class DiscoverContainer extends React.Component<Props, State> {
 
     const {search} = props.location;
     const {organization} = props;
-
     const query = getQueryFromQueryString(search);
 
     if (query.hasOwnProperty('projects')) {
@@ -65,17 +62,7 @@ class DiscoverContainer extends React.Component<Props, State> {
     }
 
     if (['range', 'start', 'end'].some(key => query.hasOwnProperty(key))) {
-      // Update global store with datetime from querystring
-      const timezone = getUserTimezone();
-
-      // start/end will always be in UTC, however we need to coerce into
-      // system time for date picker to be able to synced.
-      updateDateTime({
-        start: (query.start && getUtcToLocalDateObject(query.start)) || null,
-        end: (query.end && getUtcToLocalDateObject(query.end)) || null,
-        period: query.range || null,
-        utc: query.utc || timezone === 'UTC',
-      });
+      this.setGlobalSelectionDate(query);
     } else {
       // Update query with global datetime values
       query.start = props.selection.datetime.start;
@@ -87,6 +74,18 @@ class DiscoverContainer extends React.Component<Props, State> {
     this.queryBuilder = createQueryBuilder(query, organization);
   }
 
+  static getDerivedStateFromProps(nextProps: Props, currState): State {
+    const nextState = {...currState};
+    nextState.view = getView(nextProps.params, nextProps.location.query.view);
+
+    if (!nextProps.params.savedQueryId) {
+      nextState.savedQuery = null;
+      return nextState;
+    }
+
+    return nextState;
+  }
+
   componentDidMount() {
     document.body.classList.add('body-discover');
 
@@ -101,24 +100,30 @@ class DiscoverContainer extends React.Component<Props, State> {
     }
   }
 
-  componentWillReceiveProps(nextProps: Props) {
-    if (!nextProps.params.savedQueryId) {
-      this.setState({savedQuery: null});
-      // Reset querybuilder if we're switching from a saved query
-      if (this.props.params.savedQueryId) {
-        const {datetime, projects} = nextProps.selection;
-        const {start, end, period: range} = datetime;
-        this.queryBuilder.reset({projects, range, start, end});
-      }
+  componentDidUpdate(prevProps: Props, prevState: State) {
+    const currProps = this.props;
+    const currState = this.state;
+
+    // Switching from Saved to New
+    if (!currProps.params.savedQueryId && prevProps.params.savedQueryId) {
+      const {datetime, projects} = prevProps.selection;
+      const {start, end, period: range} = datetime;
+      this.queryBuilder.reset({projects, range, start, end});
+
+      // Reset to default 14d
+      this.setGlobalSelectionDate(null);
       return;
     }
 
-    if (nextProps.params.savedQueryId !== this.props.params.savedQueryId) {
-      this.fetchSavedQuery(nextProps.params.savedQueryId);
+    // Switching from a Saved to another Saved
+    if (currProps.params.savedQueryId !== prevProps.params.savedQueryId) {
+      this.fetchSavedQuery(currProps.params.savedQueryId);
+      return;
     }
 
-    if (nextProps.location.query.view !== this.props.location.query.view) {
-      this.setState({view: getView(nextProps.params, nextProps.location.query.view)});
+    // If there are updates within the same SavedQuery
+    if (currState.savedQuery !== prevState.savedQuery) {
+      this.setGlobalSelectionDate(currState.savedQuery);
     }
   }
 
@@ -127,10 +132,34 @@ class DiscoverContainer extends React.Component<Props, State> {
     document.body.classList.remove('body-discover');
   }
 
+  private queryBuilder: any;
+
   loadTags = () => {
     return this.queryBuilder.load();
   };
 
+  setGlobalSelectionDate(query: ReturnType<typeof getQueryFromQueryString> | null) {
+    if (query) {
+      const timezone = getUserTimezone();
+
+      // start/end will always be in UTC, however we need to coerce into
+      // system time for date picker to be able to synced.
+      updateDateTime({
+        start: (query.start && getUtcToLocalDateObject(query.start)) || null,
+        end: (query.end && getUtcToLocalDateObject(query.end)) || null,
+        period: query.range || null,
+        utc: query.utc || timezone === 'UTC',
+      });
+    } else {
+      updateDateTime({
+        start: null,
+        end: null,
+        period: null,
+        utc: true,
+      });
+    }
+  }
+
   setLoadedState = () => {
     this.setState({isLoading: false});
   };
diff --git a/src/sentry/static/sentry/app/views/discover/sidebar/savedQueryList.tsx b/src/sentry/static/sentry/app/views/discover/sidebar/savedQueryList.tsx
index 31c46d23fe..11391bd467 100644
--- a/src/sentry/static/sentry/app/views/discover/sidebar/savedQueryList.tsx
+++ b/src/sentry/static/sentry/app/views/discover/sidebar/savedQueryList.tsx
@@ -26,50 +26,43 @@ type SavedQueriesProps = {
 type SavedQueriesState = {
   isLoading: boolean;
   data: SavedQuery[];
-  topSavedQuery: SavedQuery | null;
+  savedQuery: SavedQuery | null;
 };
 
 export default class SavedQueries extends React.Component<
   SavedQueriesProps,
   SavedQueriesState
 > {
-  constructor(props: SavedQueriesProps) {
-    super(props);
-    this.state = {
-      isLoading: true,
-      data: [],
-      topSavedQuery: props.savedQuery,
-    };
+  state: SavedQueriesState = {
+    isLoading: true,
+    data: [],
+    savedQuery: null,
+  };
+
+  static getDerivedStateFromProps(
+    nextProps: SavedQueriesProps,
+    prevState: SavedQueriesState
+  ): Partial<SavedQueriesState> {
+    const nextState: Partial<SavedQueriesState> = {};
+
+    if (nextProps.savedQuery && nextProps.savedQuery !== prevState.savedQuery) {
+      nextState.data = prevState.data.map(q =>
+        q.id === nextProps.savedQuery!.id ? nextProps.savedQuery! : q
+      );
+    }
+
+    return nextState;
   }
 
   componentDidMount() {
     this.fetchAll();
   }
 
-  componentWillReceiveProps(nextProps: SavedQueriesProps) {
-    // Refetch on deletion
-    if (!nextProps.savedQuery && this.props.savedQuery !== nextProps.savedQuery) {
+  componentDidUpdate(prevProps) {
+    // Re-fetch on deletion
+    if (!this.props.savedQuery && prevProps.savedQuery) {
       this.fetchAll();
     }
-
-    // Update query in the list with new data
-    if (nextProps.savedQuery && nextProps.savedQuery !== this.props.savedQuery) {
-      const data = this.state.data.map(savedQuery =>
-        savedQuery.id === nextProps.savedQuery!.id ? nextProps.savedQuery! : savedQuery
-      );
-      this.setState({data});
-    }
-
-    // Update saved query if any name / details have been updated
-    if (
-      nextProps.savedQuery &&
-      (!this.state.topSavedQuery ||
-        nextProps.savedQuery.id === this.state.topSavedQuery.id)
-    ) {
-      this.setState({
-        topSavedQuery: nextProps.savedQuery,
-      });
-    }
   }
 
   fetchAll() {
@@ -101,9 +94,11 @@ export default class SavedQueries extends React.Component<
 
     const {id, name, dateUpdated} = query;
     const {organization} = this.props;
+    const relativeLink = `/organizations/${organization.slug}/discover/saved/${id}/`;
+
     return (
       <SavedQueryListItem key={id} isActive={savedQuery && savedQuery.id === id}>
-        <SavedQueryLink to={`/organizations/${organization.slug}/discover/saved/${id}/`}>
+        <SavedQueryLink to={relativeLink}>
           {getDynamicText({value: name, fixed: 'saved query'})}
           <SavedQueryUpdated>
             {tct('Updated [date] (UTC)', {
@@ -119,25 +114,18 @@ export default class SavedQueries extends React.Component<
   }
 
   renderList() {
-    const {data, topSavedQuery} = this.state;
-
-    const savedQueryId = topSavedQuery ? topSavedQuery.id : null;
-
-    if (!data.length) {
-      return this.renderEmpty();
-    }
+    const {data} = this.state;
 
-    return data.map(query => {
-      return query.id !== savedQueryId ? this.renderListItem(query) : null;
-    });
+    return data.length
+      ? data.map(query => this.renderListItem(query))
+      : this.renderEmpty();
   }
 
   render() {
-    const {topSavedQuery, isLoading} = this.state;
+    const {isLoading} = this.state;
 
     return (
       <SavedQueryList>
-        {topSavedQuery && this.renderListItem(topSavedQuery)}
         {isLoading ? this.renderLoading() : this.renderList()}
       </SavedQueryList>
     );
diff --git a/src/sentry/static/sentry/app/views/discover/utils.tsx b/src/sentry/static/sentry/app/views/discover/utils.tsx
index bf9e241cba..c00b09f7dd 100644
--- a/src/sentry/static/sentry/app/views/discover/utils.tsx
+++ b/src/sentry/static/sentry/app/views/discover/utils.tsx
@@ -146,7 +146,7 @@ export function fetchSavedQueries(organization: any): Promise<any> {
 
   return api.requestPromise(endpoint, {
     method: 'GET',
-    query: {all: 1, query: 'version:1'},
+    query: {all: 1, query: 'version:1', sortBy: '-dateUpdated'},
   } as any); // TODO: Remove as any
 }
 
diff --git a/tests/js/spec/views/discover/index.spec.jsx b/tests/js/spec/views/discover/index.spec.jsx
index b757f12486..9b8c6807b9 100644
--- a/tests/js/spec/views/discover/index.spec.jsx
+++ b/tests/js/spec/views/discover/index.spec.jsx
@@ -31,6 +31,13 @@ describe('DiscoverContainer', function() {
           meta: [],
         },
       });
+      MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/projects',
+        method: 'GET',
+        body: {
+          data: organization.projects,
+        },
+      });
       wrapper = mountWithTheme(
         <DiscoverContainer
           location={{query: {}, search: ''}}
