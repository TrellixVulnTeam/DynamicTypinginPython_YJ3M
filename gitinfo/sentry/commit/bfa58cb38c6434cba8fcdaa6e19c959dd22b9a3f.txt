commit bfa58cb38c6434cba8fcdaa6e19c959dd22b9a3f
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Jan 31 12:00:56 2015 -0800

    Draft code for handling optimistic updates

diff --git a/src/sentry/static/sentry/app/stores/aggregateListStore.jsx b/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
index d27acd56b9..07fc0f4fd0 100644
--- a/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
+++ b/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
@@ -11,13 +11,40 @@ var ERR_CHANGE_ASSIGNEE = 'Unable to change assignee. Please try again.';
 var OK_SCHEDULE_DELETE = 'The selected events have been scheduled for deletion.';
 var OK_SCHEDULE_MERGE = 'The selected events have been scheduled for merge.';
 
+// TODO(dcramer): what we want to actually do is keep this as a simple
+// list and have stream add/remove items as they're modified within stream
+// itself
+var _items = [];
+var _pendingChanges = [];
+
+
+var _bulkMutateAll = function(params, timestamp) {
+  _items.forEach(function(item){
+    if (!item._validAt || item._validAt <= timestamp) {
+      $.extend(item, params);
+      item._validAt = timestamp;
+    }
+  });
+};
+
+var bulkMutate = function(params, timestamp, itemIds) {
+  var itemIdsHash = {};
+  itemIds.forEach(function(id){
+    itemIdsHash[id] = 1;
+  });
+
+  _items.forEach(function(item){
+    if (typeof itemIdsHash[item.id] !== 'undefined') {
+      if (!item._validAt || item._validAt <= timestamp) {
+        $.extend(item, params);
+        item._validAt = timestamp;
+      }
+    }
+  });
+};
+
 var AggregateListStore = Reflux.createStore({
   init: function() {
-    // TODO(dcramer): what we want to actually do is keep this as a simple
-    // list and have stream add/remove items as they're modified within stream
-    // itself
-    this.items = new utils.Collection();
-
     // TODO(dcramer): theres no documented way to do listenables via these
     this.listenTo(AggregateListActions.assignTo.completed, this.onAssignToCompleted);
     this.listenTo(AggregateListActions.assignTo.failed, this.onAssignToFailed);
@@ -25,13 +52,65 @@ var AggregateListStore = Reflux.createStore({
 
   // TODO(dcramer): this should actually come from an action of some sorts
   loadInitialData: function(items) {
-    this.items.empty();
-    this.items.push(items);
-    this.trigger(this.items, 'initial');
+    _items.empty();
+    _dirtyItems.empty();
+    items.forEach(function(item){
+      _items.push(item);
+    });
+    this.trigger(this.getAllItems(), 'initial');
+  },
+
+  getItem: function(id) {
+    var pendingForId = [];
+    _pendingChanges.forEach(function(change){
+      if (change.id === id) {
+        pendingForId.push(change);
+      }
+    });
+
+    for (var i = 0; i < _items.length; i++) {
+      if (_items[i].id === id) {
+        var rItem = _items[i];
+        if (pendingForId.length) {
+          // copy the object so dirty state doesnt mutate original
+          rItem = $.extend(true, {}, rItem);
+
+          for (var c = 0; c < pendingForId.length; c++) {
+            rItem = $.extend(true, rItem, pendingForId[c].params);
+          }
+        }
+        return rItem;
+      }
+    }
+  },
+
+  getAllItems: function() {
+    // regroup pending changes by their itemID
+    var pendingById = {};
+    _pendingChanges.forEach(function(change){
+      if (typeof pendingById[change.id] === 'undefined') {
+        pendingById[change.id] = [];
+      }
+      pendingById[change.id].push(change);
+    });
+
+    var results = [];
+    _items.forEach(function(item){
+      var rItem = item;
+      if (typeof pendingById[item.id] !== 'undefined') {
+        // copy the object so dirty state doesnt mutate original
+        rItem = $.extend(true, {}, rItem);
+        pendingById[item.id].forEach(function(change){
+          rItem = $.extend(true, rItem, change.params);
+        });
+      }
+      results.push(cItem);
+    });
+    return results;
   },
 
   onAssignToCompleted: function(id, email) {
-    var item = this.items.get(id);
+    var item = _items.get(id);
     if (!item) {
       return;
     }
@@ -43,10 +122,10 @@ var AggregateListStore = Reflux.createStore({
         item.assignedTo = member;
       }
     }
-    this.trigger(this.items);
+    this.trigger(_items);
   },
 
-  onBulkDeleteCompleted: function(params) {
+  onBulkDeleteCompleted: function(params, timestamp) {
     AlertActions.addAlert(OK_SCHEDULE_DELETE, 'success');
   },
 
