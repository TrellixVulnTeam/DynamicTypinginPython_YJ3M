commit d853d1bb5bb5d5ed17d169ce2fee5da01973010c
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Aug 4 19:51:28 2013 -0700

    normalize exception + stacktrace interface as part of coreapi submission

diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index bf9e98ab4f..20a38429eb 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -430,19 +430,31 @@ class GroupManager(BaseManager, ChartMixin):
 
         trim_dict(data['extra'], max_size=MAX_EXTRA_VARIABLE_SIZE)
 
-        # HACK: move this to interfaces code
+        if 'sentry.interfaces.Exception' in data:
+            if 'values' not in data['sentry.interfaces.Exception']:
+                data['sentry.interfaces.Exception'] = {
+                    'values': [data['sentry.interfaces.Exception']]
+                }
+
+            # convert stacktrace + exception into expanded exception
+            if 'sentry.interfaces.Stacktrace' in data:
+                data['sentry.interfaces.Exception']['values'][0]['stacktrace'] = data.pop('sentry.interfaces.Stacktrace')
+
+            for exc_data in data['sentry.interfaces.Exception']['values']:
+                for key in ('type', 'module', 'value'):
+                    value = exc_data.get(key)
+                    if value:
+                        exc_data[key] = trim(value)
+                if exc_data.get('stacktrace'):
+                    for frame in exc_data['stacktrace']['frames']:
+                        stack_vars = frame.get('vars', {})
+                        trim_dict(stack_vars)
+
         if 'sentry.interfaces.Stacktrace' in data:
             for frame in data['sentry.interfaces.Stacktrace']['frames']:
                 stack_vars = frame.get('vars', {})
                 trim_dict(stack_vars)
 
-        if 'sentry.interfaces.Exception' in data:
-            exc_data = data['sentry.interfaces.Exception']
-            for key in ('type', 'module', 'value'):
-                value = exc_data.get(key)
-                if value:
-                    exc_data[key] = trim(value)
-
         if 'sentry.interfaces.Message' in data:
             msg_data = data['sentry.interfaces.Message']
             trim(msg_data['message'], 1024)
diff --git a/src/sentry/tasks/fetch_source.py b/src/sentry/tasks/fetch_source.py
index 4e37a47957..f4943083a7 100644
--- a/src/sentry/tasks/fetch_source.py
+++ b/src/sentry/tasks/fetch_source.py
@@ -173,19 +173,13 @@ def expand_javascript_source(data, **kwargs):
     """
     from sentry.interfaces import Stacktrace
 
-    # TODO: clean this up
-    legacy_style = ('sentry.interfaces.Stacktrace' in data)
-
-    if legacy_style:
-        stacktraces = [Stacktrace(**data['sentry.interfaces.Stacktrace'])]
-    else:
-        try:
-            stacktraces = [
-                Stacktrace(**e['stacktrace'])
-                for e in data['sentry.interfaces.Exception']['values']
-            ]
-        except KeyError:
-            stacktraces = []
+    try:
+        stacktraces = [
+            Stacktrace(**e['stacktrace'])
+            for e in data['sentry.interfaces.Exception']['values']
+        ]
+    except KeyError:
+        stacktraces = []
 
     if not stacktraces:
         logger.debug('No stacktrace for event %r', data['event_id'])
@@ -300,8 +294,5 @@ def expand_javascript_source(data, **kwargs):
 
     if has_changes:
         logger.debug('Updating stacktraces with expanded source context')
-        if legacy_style:
-            data['sentry.interfaces.Stacktrace'] = stacktraces[0].serialize()
-        else:
-            for exception, stacktrace in itertools.izip(data['sentry.interfaces.Exception']['values'], stacktraces):
-                exception['stacktrace'] = stacktrace.serialize()
+        for exception, stacktrace in itertools.izip(data['sentry.interfaces.Exception']['values'], stacktraces):
+            exception['stacktrace'] = stacktrace.serialize()
diff --git a/tests/sentry/tasks/fetch_source/tests.py b/tests/sentry/tasks/fetch_source/tests.py
index 21529ef286..78d00d64ab 100644
--- a/tests/sentry/tasks/fetch_source/tests.py
+++ b/tests/sentry/tasks/fetch_source/tests.py
@@ -12,47 +12,7 @@ class ExpandJavascriptSourceTest(TestCase):
     @mock.patch('sentry.models.Event.update')
     @mock.patch('sentry.tasks.fetch_source.fetch_url')
     @mock.patch('sentry.tasks.fetch_source.fetch_sourcemap')
-    def test_legacy_style(self, fetch_sourcemap, fetch_url, update):
-        data = {
-            'sentry.interfaces.Stacktrace': {
-                'frames': [
-                    {
-                        'abs_path': 'http://example.com/foo.js',
-                        'filename': 'foo.js',
-                        'lineno': 4,
-                        'colno': 0,
-                    },
-                    {
-                        'abs_path': 'http://example.com/foo.js',
-                        'filename': 'foo.js',
-                        'lineno': 1,
-                        'colno': 0,
-                    },
-                ],
-            },
-        }
-        fetch_sourcemap.return_value = None
-        fetch_url.return_value.body = '\n'.join('hello world')
-
-        expand_javascript_source(data)
-
-        fetch_url.assert_called_once_with('http://example.com/foo.js')
-
-        frame_list = data['sentry.interfaces.Stacktrace']['frames']
-        frame = frame_list[0]
-        assert frame['pre_context'] == ['h', 'e', 'l']
-        assert frame['context_line'] == 'l'
-        assert frame['post_context'] == ['o', ' ', 'w', 'o', 'r']
-
-        frame = frame_list[1]
-        assert frame['pre_context'] == []
-        assert frame['context_line'] == 'h'
-        assert frame['post_context'] == ['e', 'l', 'l', 'o', ' ']
-
-    @mock.patch('sentry.models.Event.update')
-    @mock.patch('sentry.tasks.fetch_source.fetch_url')
-    @mock.patch('sentry.tasks.fetch_source.fetch_sourcemap')
-    def test_new_style(self, fetch_sourcemap, fetch_url, update):
+    def test_simple(self, fetch_sourcemap, fetch_url, update):
         data = {
             'sentry.interfaces.Exception': {
                 'values': [{
