commit 33a4cb97feff391c950d8923736ad1ab996debd6
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Sun Mar 6 22:54:10 2016 +0100

    Added the ability to jump to short ids in the search field

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index f6c31f82ab..eaaabd97c6 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -17,6 +17,7 @@ from sentry.models import (
     Activity, EventMapping, Group, GroupBookmark, GroupResolution, GroupSeen,
     GroupSnooze, GroupStatus, Release, TagKey
 )
+from sentry.models.group import looks_like_short_id
 from sentry.search.utils import parse_query
 from sentry.tasks.deletion import delete_group
 from sentry.tasks.merge import merge_group
@@ -158,6 +159,12 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
 
         :qparam string statsPeriod: an optional stat period (can be one of
                                     ``"24h"``, ``"14d"``, and ``""``).
+        :qparam bool shortIdLookup: if this is set to true then short IDs are
+                                    looked up by this function as well.  This
+                                    can cause the return value of the function
+                                    to return an event group of a different
+                                    project which is why this is an opt-in.
+                                    Set to `1` to enable.
         :qparam querystring query: an optional Sentry structured search
                                    query.  If not provided an implied
                                    ``"is:resolved"`` is assumed.)
@@ -178,22 +185,36 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
             stats_period = None
 
         query = request.GET.get('query')
-        if query and len(query) == 32:
-            # check to see if we've got an event ID
-            try:
-                mapping = EventMapping.objects.get(
-                    project_id=project.id,
-                    event_id=query,
-                )
-            except EventMapping.DoesNotExist:
-                pass
-            else:
-                matching_group = Group.objects.get(id=mapping.group_id)
-                return Response(serialize(
+        if query:
+            matching_group = None
+            if len(query) == 32:
+                # check to see if we've got an event ID
+                try:
+                    mapping = EventMapping.objects.get(
+                        project_id=project.id,
+                        event_id=query,
+                    )
+                except EventMapping.DoesNotExist:
+                    pass
+                else:
+                    matching_group = Group.objects.get(id=mapping.group_id)
+
+            # If the query looks like a short id, we want to provide some
+            # information about where that is.  Note that this can return
+            # results for another project.  The UI deals with this.
+            elif request.GET.get('shortIdLookup') == '1' and \
+                    looks_like_short_id(query):
+                matching_group = Group.objects.by_qualified_short_id(
+                    project.organization, query)
+
+            if matching_group is not None:
+                response = Response(serialize(
                     [matching_group], request.user, StreamGroupSerializer(
                         stats_period=stats_period
                     )
                 ))
+                response['X-Sentry-Direct-Hit'] = '1'
+                return response
 
         try:
             query_kwargs = self._build_query_params_from_request(request, project)
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 9692038075..6018e65e69 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -37,6 +37,10 @@ from sentry.utils.numbers import base36_encode, base36_decode
 _short_id_re = re.compile(r'^(.*?)(?:[\s_-])([A-Za-z0-9]+)$')
 
 
+def looks_like_short_id(value):
+    return _short_id_re.match((value or '').strip()) is not None
+
+
 # TODO(dcramer): pull in enum library
 class GroupStatus(object):
     UNRESOLVED = 0
@@ -51,7 +55,7 @@ class GroupManager(BaseManager):
     use_for_related_fields = True
 
     def by_qualified_short_id(self, org, short_id):
-        match = _short_id_re.match(short_id)
+        match = _short_id_re.match(short_id.strip())
         if match is None:
             return
         from sentry.models import Project
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 3232bf708f..1169d7cd5c 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -298,7 +298,8 @@ const Stream = React.createClass({
       query: this.state.query,
       limit: this.props.maxItems,
       sort: this.state.sort,
-      statsPeriod: this.state.statsPeriod
+      statsPeriod: this.state.statsPeriod,
+      shortIdLookup: '1',
     };
 
     let currentQuery = this.props.location.query || {};
@@ -322,15 +323,27 @@ const Stream = React.createClass({
           let params = this.props.params;
           let groupId = data[0].id;
 
-          return void this.history.pushState(null, `/${params.orgId}/${params.projectId}/issues/${groupId}/`);
+          this.history.pushState(null, `/${params.orgId}/${params.projectId}/issues/${groupId}/`);
+          return;
         }
 
+        // if this is a direct hit, but for another project we need to
+        // redirect.
+        if (jqXHR.getResponseHeader('X-Sentry-Direct-Hit') === '1') {
+          let project = this.getProject();
+          if (data[0].project.slug !== project.slug) {
+            let org = this.getOrganization();
+            this.context.history.pushState(null,
+              `/${org.slug}/${data[0].project.slug}/?query=${encodeURIComponent(this.state.query)}`);
+            return;
+          }
+        }
         this._streamManager.push(data);
 
         this.setState({
           error: false,
           dataLoading: false,
-          pageLinks: jqXHR.getResponseHeader('Link')
+          pageLinks: jqXHR.getResponseHeader('Link'),
         });
       },
       error: () => {
