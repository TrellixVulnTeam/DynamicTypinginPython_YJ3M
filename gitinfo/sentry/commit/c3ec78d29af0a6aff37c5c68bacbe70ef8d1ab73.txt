commit c3ec78d29af0a6aff37c5c68bacbe70ef8d1ab73
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Wed Oct 4 07:47:03 2017 -0500

    ref: Remove legacy annotations from GroupTransformer (#6252)

diff --git a/src/sentry/utils/javascript.py b/src/sentry/utils/javascript.py
index 3f87517f89..24e56f00c7 100644
--- a/src/sentry/utils/javascript.py
+++ b/src/sentry/utils/javascript.py
@@ -9,7 +9,6 @@ from __future__ import absolute_import
 
 import six
 
-from collections import defaultdict
 from datetime import timedelta
 from django.core.urlresolvers import reverse
 from django.utils import timezone
@@ -17,9 +16,8 @@ from django.utils.html import escape
 
 from sentry import tsdb
 from sentry.app import env
-from sentry.constants import TAG_LABELS
 from sentry.models import (
-    Group, GroupBookmark, GroupMeta, GroupTagKey, GroupSeen, GroupStatus, ProjectOption
+    Group, GroupBookmark, GroupMeta, GroupTagKey, GroupSeen, GroupStatus
 )
 from sentry.templatetags.sentry_plugins import get_legacy_annotations
 from sentry.utils import json
@@ -129,41 +127,23 @@ class GroupTransformer(Transformer):
         else:
             historical_data = {}
 
-        project_list = set(o.project for o in objects)
-        tag_keys = set(['sentry:user'])
-        project_annotations = {}
-        for project in project_list:
-            enabled_annotations = ProjectOption.objects.get_value(
-                project, 'annotations', ['sentry:user']
-            )
-            project_annotations[project] = enabled_annotations
-            tag_keys.update(enabled_annotations)
-
-        annotation_counts = defaultdict(dict)
-        annotation_results = GroupTagKey.objects.filter(
+        user_tagkeys = GroupTagKey.objects.filter(
             group_id__in=[o.id for o in objects],
-            key__in=tag_keys,
-        ).values_list('key', 'group', 'values_seen')
-        for key, group_id, values_seen in annotation_results:
-            annotation_counts[key][group_id] = values_seen
+            key='sentry:user',
+        )
+        user_counts = {}
+        for user_tagkey in user_tagkeys:
+            user_counts[user_tagkey.group_id] = user_tagkey.values_seen
 
         for g in objects:
             g.is_bookmarked = g.pk in bookmarks
             g.historical_data = [x[1] for x in historical_data.get(g.id, [])]
             active_date = g.active_at or g.first_seen
             g.has_seen = seen_groups.get(g.id, active_date) > active_date
-            g.annotations = []
-            for key in sorted(tag_keys):
-                if key in project_annotations[project]:
-                    label = TAG_LABELS.get(key, key.replace('_', ' ')).lower() + 's'
-                    try:
-                        value = annotation_counts[key].get(g.id, 0)
-                    except KeyError:
-                        value = 0
-                    g.annotations.append({
-                        'label': label,
-                        'count': value,
-                    })
+            g.annotations = [{
+                'label': 'users',
+                'count': user_counts.get(g.id, 0),
+            }]
 
     def localize_datetime(self, dt, request=None):
         if not request:
