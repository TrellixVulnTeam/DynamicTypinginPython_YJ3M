commit 6734ecea6b49e02e386ca93aab09457960ee7cd6
Author: Alex Hofsteede <alex@hofsteede.com>
Date:   Thu Jan 3 15:09:22 2019 -0800

    ref: serialize release and userReport (#10921)
    
    * ref: serialize release and userReport
    
    * add detailed event serializer

diff --git a/src/sentry/api/endpoints/event_details.py b/src/sentry/api/endpoints/event_details.py
index 3d4573a90e..19cc199ce0 100644
--- a/src/sentry/api/endpoints/event_details.py
+++ b/src/sentry/api/endpoints/event_details.py
@@ -7,28 +7,14 @@ from rest_framework.response import Response
 from sentry.api.base import Endpoint
 from sentry.api.bases.group import GroupPermission
 from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.api.serializers import serialize
+from sentry.api.serializers import DetailedEventSerializer, serialize
 from sentry.constants import EVENT_ORDERING_KEY
-from sentry.models import Event, Release, UserReport
+from sentry.models import Event
 
 
 class EventDetailsEndpoint(Endpoint):
     permission_classes = (GroupPermission, )
 
-    def _get_release_info(self, request, event):
-        version = event.get_tag('sentry:release')
-        if not version:
-            return None
-        try:
-            release = Release.objects.get(
-                projects=event.project,
-                organization_id=event.project.organization_id,
-                version=version,
-            )
-        except Release.DoesNotExist:
-            return {'version': version}
-        return serialize(release, request.user)
-
     def get(self, request, event_id):
         """
         Retrieve an Event
@@ -95,17 +81,7 @@ class EventDetailsEndpoint(Endpoint):
                 prev_event = e
                 break
 
-        try:
-            user_report = UserReport.objects.get(
-                event_id=event.event_id,
-                project=event.project,
-            )
-        except UserReport.DoesNotExist:
-            user_report = None
-
-        data = serialize(event, request.user)
-        data['userReport'] = serialize(user_report, request.user)
-        data['release'] = self._get_release_info(request, event)
+        data = serialize(event, request.user, DetailedEventSerializer())
 
         if next_event:
             data['nextEventID'] = six.text_type(next_event.id)
diff --git a/src/sentry/api/endpoints/project_event_details.py b/src/sentry/api/endpoints/project_event_details.py
index a56f4611eb..084edd8aa9 100644
--- a/src/sentry/api/endpoints/project_event_details.py
+++ b/src/sentry/api/endpoints/project_event_details.py
@@ -6,8 +6,8 @@ from rest_framework.response import Response
 
 from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint
-from sentry.api.serializers import serialize
-from sentry.models import Event, Release, UserReport
+from sentry.api.serializers import DetailedEventSerializer, serialize
+from sentry.models import Event
 from sentry.utils.apidocs import scenario, attach_scenarios
 from sentry.utils.validators import is_event_id
 
@@ -24,20 +24,6 @@ def retrieve_event_for_project_scenario(runner):
 class ProjectEventDetailsEndpoint(ProjectEndpoint):
     doc_section = DocSection.EVENTS
 
-    def _get_release_info(self, request, event):
-        version = event.get_tag('sentry:release')
-        if not version:
-            return None
-        try:
-            release = Release.objects.get(
-                projects=event.project,
-                organization_id=event.project.organization_id,
-                version=version,
-            )
-        except Release.DoesNotExist:
-            return {'version': version}
-        return serialize(release, request.user)
-
     @attach_scenarios([retrieve_event_for_project_scenario])
     def get(self, request, project, event_id):
         """
@@ -104,17 +90,7 @@ class ProjectEventDetailsEndpoint(ProjectEndpoint):
         except IndexError:
             prev_event = None
 
-        try:
-            user_report = UserReport.objects.get(
-                event_id=event.event_id,
-                project=event.project,
-            )
-        except UserReport.DoesNotExist:
-            user_report = None
-
-        data = serialize(event, request.user)
-        data['userReport'] = serialize(user_report, request.user)
-        data['release'] = self._get_release_info(request, event)
+        data = serialize(event, request.user, DetailedEventSerializer())
 
         if next_event:
             data['nextEventID'] = six.text_type(next_event.event_id)
diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 5487a11401..312ce52ea6 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -7,7 +7,7 @@ from django.utils import timezone
 from semaphore import meta_with_chunks
 
 from sentry.api.serializers import Serializer, register, serialize
-from sentry.models import Event, EventError, EventAttachment
+from sentry.models import Event, EventError, EventAttachment, Release, UserReport
 from sentry.utils.safe import get_path
 
 
@@ -125,6 +125,30 @@ class EventSerializer(Serializer):
 
         return (message, meta_with_chunks(message, msg_meta))
 
+    def _get_release_info(self, user, event):
+        version = event.get_tag('sentry:release')
+        if not version:
+            return None
+        try:
+            release = Release.objects.get(
+                projects=event.project,
+                organization_id=event.project.organization_id,
+                version=version,
+            )
+        except Release.DoesNotExist:
+            return {'version': version}
+        return serialize(release, user)
+
+    def _get_user_report(self, user, event):
+        try:
+            user_report = UserReport.objects.get(
+                event_id=event.event_id,
+                project=event.project,
+            )
+        except UserReport.DoesNotExist:
+            user_report = None
+        return serialize(user_report, user)
+
     def get_attrs(self, item_list, user, is_public=False):
         Event.objects.bind_nodes(item_list, 'data')
 
@@ -177,7 +201,6 @@ class EventSerializer(Serializer):
             except TypeError:
                 received = None
 
-        # TODO(dcramer): move release serialization here
         d = {
             'id': six.text_type(obj.id),
             'groupID': six.text_type(obj.group_id),
@@ -216,6 +239,17 @@ class EventSerializer(Serializer):
         return d
 
 
+class DetailedEventSerializer(EventSerializer):
+    """
+    Adds release and user report info to the serialized event.
+    """
+    def serialize(self, obj, attrs, user):
+        result = super(DetailedEventSerializer, self).serialize(obj, attrs, user)
+        result['release'] = self._get_release_info(user, obj)
+        result['userReport'] = self._get_user_report(user, obj)
+        return result
+
+
 class SharedEventSerializer(EventSerializer):
     def get_attrs(self, item_list, user):
         return super(SharedEventSerializer, self).get_attrs(item_list, user, is_public=True)
