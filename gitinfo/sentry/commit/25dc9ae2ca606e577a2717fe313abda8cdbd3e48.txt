commit 25dc9ae2ca606e577a2717fe313abda8cdbd3e48
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed May 16 11:19:34 2018 -0700

    feat(errors): Add better `RouteError` context + fingerprint (#8440)

diff --git a/src/sentry/static/sentry/app/utils/getRouteStringFromRoutes.jsx b/src/sentry/static/sentry/app/utils/getRouteStringFromRoutes.jsx
new file mode 100644
index 0000000000..e7029aa720
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/getRouteStringFromRoutes.jsx
@@ -0,0 +1,21 @@
+/**
+ * Creates a route string from an array of `routes` from react-router
+ * Note this is currently only used for error context logging. It does
+ * not attempt to do anything smart (e.g. absolute vs relative paths in the list)
+ *
+ * @param {Array<{}>} routes An array of route objects from react-router
+ * @return String Returns a route path
+ */
+export default function getRouteStringFromRoutes(routes) {
+  if (!Array.isArray(routes)) return '';
+
+  // Strip the first route (path: '/') since the subsequent children routes
+  // are all absolute paths
+  return (
+    routes
+      .splice(1)
+      .filter(({path}) => path)
+      .map(({path}) => path)
+      .join('') || ''
+  );
+}
diff --git a/src/sentry/static/sentry/app/views/permissionDenied.jsx b/src/sentry/static/sentry/app/views/permissionDenied.jsx
index 57b881c5af..4887ff4b9f 100644
--- a/src/sentry/static/sentry/app/views/permissionDenied.jsx
+++ b/src/sentry/static/sentry/app/views/permissionDenied.jsx
@@ -7,6 +7,7 @@ import React from 'react';
 import {t, tct} from 'app/locale';
 import ExternalLink from 'app/components/externalLink';
 import LoadingError from 'app/components/loadingError';
+import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
 
 const ERROR_NAME = 'Permission Denied';
 
@@ -24,14 +25,7 @@ class PermissionDenied extends React.Component {
     let {routes} = this.props;
     let {organization, project} = this.context;
 
-    let route =
-      (Array.isArray(routes) &&
-        routes
-          .filter(({path}) => path)
-          .map(({path}) => path)
-          .join('')) ||
-      '';
-
+    let route = getRouteStringFromRoutes(routes);
     Raven.captureException(new Error(ERROR_NAME), {
       fingerprint: [ERROR_NAME, route],
       extra: {
diff --git a/src/sentry/static/sentry/app/views/routeError.jsx b/src/sentry/static/sentry/app/views/routeError.jsx
index aebdfea929..68b549d64b 100644
--- a/src/sentry/static/sentry/app/views/routeError.jsx
+++ b/src/sentry/static/sentry/app/views/routeError.jsx
@@ -1,20 +1,39 @@
+import {withRouter} from 'react-router';
 import $ from 'jquery';
 import PropTypes from 'prop-types';
 import Raven from 'raven-js';
 import React from 'react';
+import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
 
 class RouteError extends React.Component {
   static propTypes = {
     error: PropTypes.object.isRequired,
+    routes: PropTypes.array,
+  };
+
+  static contextTypes = {
+    organization: PropTypes.object,
+    project: PropTypes.object,
   };
 
   componentWillMount() {
+    let {routes} = this.props;
+    let {organization, project} = this.context;
     // TODO(dcramer): show something in addition to embed (that contains it?)
-    // TODO(dcramer): capture better context
     // throw this in a timeout so if it errors we dont fall over
     this._timeout = window.setTimeout(
       function() {
-        Raven.captureException(this.props.error);
+        let route = getRouteStringFromRoutes(routes);
+
+        Raven.captureException(this.props.error, {
+          fingerprint: [this.props.error, route],
+          extra: {
+            route,
+            orgFeatures: (organization && organization.features) || [],
+            orgAccess: (organization && organization.access) || [],
+            projectFeatures: (project && project.features) || [],
+          },
+        });
         // TODO(dcramer): we do not have errorId until send() is called which
         // has latency in production so this will literally never fire
         Raven.showReportDialog();
@@ -71,4 +90,4 @@ class RouteError extends React.Component {
   }
 }
 
-export default RouteError;
+export default withRouter(RouteError);
diff --git a/tests/js/spec/utils/getRouteStringFromRoutes.spec.jsx b/tests/js/spec/utils/getRouteStringFromRoutes.spec.jsx
new file mode 100644
index 0000000000..a2e3f29f05
--- /dev/null
+++ b/tests/js/spec/utils/getRouteStringFromRoutes.spec.jsx
@@ -0,0 +1,23 @@
+import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
+
+describe('getRouteStringFromRoutes', function() {
+  const routes = [
+    {path: '/'},
+    {path: '/:orgId/'},
+    {name: 'this should be skipped'},
+    {path: '/organizations/:orgId/'},
+    {path: 'api-keys/', name: 'API Key'},
+  ];
+  it('can get a route string from routes array and skips routes that do not have a path', function() {
+    expect(getRouteStringFromRoutes(routes)).toBe(
+      '/:orgId//organizations/:orgId/api-keys/'
+    );
+  });
+
+  it('handles invalid `routes` values', function() {
+    expect(getRouteStringFromRoutes(null)).toBe('');
+    expect(getRouteStringFromRoutes('')).toBe('');
+    expect(getRouteStringFromRoutes({})).toBe('');
+    expect(getRouteStringFromRoutes(false)).toBe('');
+  });
+});
diff --git a/tests/js/spec/views/projectPlugins/projectPlugins.spec.jsx b/tests/js/spec/views/projectPlugins/projectPlugins.spec.jsx
index 318a9fd0c8..2b86bef8f6 100644
--- a/tests/js/spec/views/projectPlugins/projectPlugins.spec.jsx
+++ b/tests/js/spec/views/projectPlugins/projectPlugins.spec.jsx
@@ -42,7 +42,7 @@ describe('ProjectPlugins', function() {
       routerContext
     );
 
-    expect(wrapper.find('RouteError')).toHaveLength(1);
+    expect(wrapper.dive().find('RouteError')).toHaveLength(1);
   });
 
   it('has error state when plugins=[]', function() {
@@ -55,7 +55,6 @@ describe('ProjectPlugins', function() {
       />,
       routerContext
     );
-
-    expect(wrapper.find('RouteError')).toHaveLength(1);
+    expect(wrapper.dive().find('RouteError')).toHaveLength(1);
   });
 });
