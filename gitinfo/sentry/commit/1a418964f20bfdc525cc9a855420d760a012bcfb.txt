commit 1a418964f20bfdc525cc9a855420d760a012bcfb
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Mar 25 16:47:32 2020 -0700

    ref(workflow): Change Alert Rules list to use `<PanelTable>` (#17905)
    
    Uses CSS grid properly for the Panel where previously there was some hackery going on with nested grids and flexbox.
    
    Hopefully this fixes our flakey percy tests too.

diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/list.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/list.tsx
index 31c504b2ff..1a88c932a8 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/list.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/list.tsx
@@ -5,12 +5,11 @@ import styled from '@emotion/styled';
 import {IconAdd} from 'app/icons';
 import {IssueAlertRule} from 'app/types/alerts';
 import {Organization} from 'app/types';
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import {PanelTable} from 'app/components/panels';
 import {SavedIncidentRule} from 'app/views/settings/incidentRules/types';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
 import Button from 'app/components/button';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
 import OnboardingHovercard from 'app/views/settings/projectAlerts/onboardingHovercard';
 import PermissionAlert from 'app/views/settings/project/permissionAlert';
 import RuleRow from 'app/views/settings/projectAlerts/ruleRow';
@@ -47,14 +46,6 @@ class ProjectAlertRules extends AsyncView<Props, State> {
     return routeTitle(t('Alert Rules'), projectId);
   }
 
-  renderEmpty() {
-    return (
-      <EmptyStateWarning>
-        <p>{t('There are no alerts configured for this project.')}</p>
-      </EmptyStateWarning>
-    );
-  }
-
   renderResults() {
     const {canEditRule, params} = this.props;
     const {orgId, projectId} = params;
@@ -120,24 +111,21 @@ class ProjectAlertRules extends AsyncView<Props, State> {
         />
         <PermissionAlert />
 
-        <Panel>
-          <RuleHeader>
-            <div>{t('Type')}</div>
-            <div>{t('Name')}</div>
-            <TriggerAndActions>
-              <div>{t('Conditions/Triggers')}</div>
-              <div>{t('Action(s)')}</div>
-            </TriggerAndActions>
-          </RuleHeader>
-
-          <PanelBody>
-            {loading
-              ? super.renderLoading()
-              : !!rules.length
-              ? this.renderResults()
-              : this.renderEmpty()}
-          </PanelBody>
-        </Panel>
+        <ScrollWrapper>
+          <StyledPanelTable
+            isLoading={loading}
+            isEmpty={!loading && !rules.length}
+            emptyMessage={t('There are no alerts configured for this project.')}
+            headers={[
+              <div key="type">{t('Type')}</div>,
+              <div key="name">{t('Name')}</div>,
+              <div key="conditions">{t('Conditions/Triggers')}</div>,
+              <div key="actions">{t('Action(s)')}</div>,
+            ]}
+          >
+            {() => this.renderResults()}
+          </StyledPanelTable>
+        </ScrollWrapper>
       </React.Fragment>
     );
   }
@@ -145,17 +133,17 @@ class ProjectAlertRules extends AsyncView<Props, State> {
 
 export default ProjectAlertRules;
 
-const RuleHeader = styled(PanelHeader)`
-  display: grid;
-  grid-gap: ${space(1)};
-  grid-template-columns: 1fr 3fr 6fr;
-  grid-auto-flow: column;
+const ScrollWrapper = styled('div')`
+  width: 100%;
+  overflow-x: auto;
 `;
 
-const TriggerAndActions = styled('div')`
-  display: grid;
-  grid-template-columns: 1fr 1fr;
-  grid-auto-flow: column;
+/**
+ * TODO(billy): Not sure if this should be default for PanelTable or not
+ */
+const StyledPanelTable = styled(PanelTable)`
+  width: fit-content;
+  min-width: 100%;
 `;
 
 const HeaderActions = styled('div')`
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
index a3f936d8db..d7366ddb8b 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
@@ -5,7 +5,6 @@ import React from 'react';
 import styled from '@emotion/styled';
 
 import {IssueAlertRule} from 'app/types/alerts';
-import {PanelItem} from 'app/components/panels';
 import {SavedIncidentRule} from 'app/views/settings/incidentRules/types';
 import {getDisplayName} from 'app/utils/environment';
 import {t, tct} from 'app/locale';
@@ -53,7 +52,7 @@ class RuleRow extends React.Component<Props, State> {
       : t('All Environments');
 
     return (
-      <RuleItem>
+      <React.Fragment>
         <RuleType>{t('Issue')}</RuleType>
         <div>
           {canEdit ? <RuleName to={editLink}>{data.name}</RuleName> : data.name}
@@ -62,29 +61,27 @@ class RuleRow extends React.Component<Props, State> {
           </RuleDescription>
         </div>
 
-        <TriggerAndActions>
-          <div>
-            <MatchTypeHeader>
-              {tct('[matchType] of the following:', {
-                matchType: data.actionMatch,
-              })}
-            </MatchTypeHeader>
-            {data.conditions.length !== 0 && (
-              <Conditions>
-                {data.conditions.map((condition, i) => (
-                  <div key={i}>{condition.name}</div>
-                ))}
-              </Conditions>
-            )}
-          </div>
-
-          <Actions>
-            {data.actions.map((action, i) => (
-              <div key={i}>{action.name}</div>
-            ))}
-          </Actions>
-        </TriggerAndActions>
-      </RuleItem>
+        <ConditionsWithHeader>
+          <MatchTypeHeader>
+            {tct('[matchType] of the following:', {
+              matchType: data.actionMatch,
+            })}
+          </MatchTypeHeader>
+          {data.conditions.length !== 0 && (
+            <Conditions>
+              {data.conditions.map((condition, i) => (
+                <div key={i}>{condition.name}</div>
+              ))}
+            </Conditions>
+          )}
+        </ConditionsWithHeader>
+
+        <Actions>
+          {data.actions.map((action, i) => (
+            <Action key={i}>{action.name}</Action>
+          ))}
+        </Actions>
+      </React.Fragment>
     );
   }
 
@@ -96,36 +93,39 @@ class RuleRow extends React.Component<Props, State> {
       location,
     });
 
+    const numberOfTriggers = data.triggers.length;
+
     return (
-      <RuleItem>
-        <RuleType>{t('Metric')}</RuleType>
-        <div>
+      <React.Fragment>
+        <RuleType rowSpans={numberOfTriggers}>{t('Metric')}</RuleType>
+        <RuleNameAndDescription rowSpans={numberOfTriggers}>
           {canEdit ? <RuleName to={editLink}>{data.name}</RuleName> : data.name}
           <RuleDescription />
-        </div>
-
-        <div>
-          {data.triggers.length !== 0 &&
-            data.triggers.map((trigger, i) => (
-              <TriggerAndActions key={i}>
-                <Trigger>
+        </RuleNameAndDescription>
+
+        {numberOfTriggers !== 0 &&
+          data.triggers.map((trigger, i) => {
+            const hideBorder = i !== numberOfTriggers - 1;
+            return (
+              <React.Fragment key={i}>
+                <Trigger key={`trigger-${i}`} hideBorder={hideBorder}>
                   <StatusBadge>{trigger.label}</StatusBadge>
-                  <div>
+                  <TriggerDescription>
                     {data.aggregations[0] === 0 ? t('Events') : t('Users')}{' '}
                     {trigger.thresholdType === 0 ? t('above') : t('below')}{' '}
                     {trigger.alertThreshold}/{data.timeWindow}
                     {t('min')}
-                  </div>
+                  </TriggerDescription>
                 </Trigger>
-                <Actions>
+                <Actions key={`actions-${i}`} hideBorder={hideBorder}>
                   {trigger.actions?.map((action, j) => (
-                    <div key={j}>{action.desc}</div>
+                    <Action key={j}>{action.desc}</Action>
                   ))}
                 </Actions>
-              </TriggerAndActions>
-            ))}
-        </div>
-      </RuleItem>
+              </React.Fragment>
+            );
+          })}
+      </React.Fragment>
     );
   }
 
@@ -138,18 +138,24 @@ class RuleRow extends React.Component<Props, State> {
 
 export default RuleRow;
 
-const RuleItem = styled(PanelItem)`
-  display: grid;
-  grid-gap: ${space(1)};
-  grid-template-columns: 1fr 3fr 6fr;
-  grid-auto-flow: column;
-`;
+type RowSpansProp = {
+  rowSpans?: number;
+};
 
-const RuleType = styled('div')`
+type HasBorderProp = {
+  hideBorder?: boolean;
+};
+
+const RuleType = styled('div')<RowSpansProp>`
   color: ${p => p.theme.gray3};
   font-size: ${p => p.theme.fontSizeSmall};
   font-weight: bold;
   text-transform: uppercase;
+  ${p => p.rowSpans && `grid-row: auto / span ${p.rowSpans}`};
+`;
+
+const RuleNameAndDescription = styled('div')<RowSpansProp>`
+  ${p => p.rowSpans && `grid-row: auto / span ${p.rowSpans}`};
 `;
 
 const RuleName = styled(Link)`
@@ -164,14 +170,18 @@ const Conditions = styled('div')`
 `;
 
 // For tests
-const Actions = styled('div')``;
+const Actions = styled('div')<HasBorderProp>`
+  font-size: ${p => p.theme.fontSizeSmall};
+
+  ${p => p.hideBorder && `border-bottom: none`};
+`;
+
+const Action = styled('div')`
+  line-height: 14px;
+`;
 
-const TriggerAndActions = styled('div')`
-  display: grid;
-  grid-template-columns: 1fr 1fr;
-  grid-auto-flow: column;
+const ConditionsWithHeader = styled('div')`
   font-size: ${p => p.theme.fontSizeSmall};
-  margin-bottom: ${space(1)};
 `;
 
 const MatchTypeHeader = styled('div')`
@@ -184,11 +194,19 @@ const MatchTypeHeader = styled('div')`
 const RuleDescription = styled('div')`
   font-size: ${p => p.theme.fontSizeSmall};
   margin: ${space(0.5)} 0;
+  white-space: nowrap;
 `;
 
-const Trigger = styled('div')`
+const Trigger = styled('div')<HasBorderProp>`
   display: flex;
-  align-items: center;
+  align-items: flex-start;
+  font-size: ${p => p.theme.fontSizeSmall};
+
+  ${p => p.hideBorder && `border-bottom: none`};
+`;
+
+const TriggerDescription = styled('div')`
+  white-space: nowrap;
 `;
 
 const StatusBadge = styled('div')`
diff --git a/tests/js/spec/views/settings/projectAlerts/list.spec.jsx b/tests/js/spec/views/settings/projectAlerts/list.spec.jsx
index ba749efafa..16336bc8d1 100644
--- a/tests/js/spec/views/settings/projectAlerts/list.spec.jsx
+++ b/tests/js/spec/views/settings/projectAlerts/list.spec.jsx
@@ -42,35 +42,35 @@ describe('ProjectAlertsList', function() {
 
     expect(
       wrapper
-        .find('RuleItem RuleType')
+        .find('RuleType')
         .at(0)
         .text()
     ).toBe('Issue');
 
     expect(
       wrapper
-        .find('RuleItem RuleName')
+        .find('RuleName')
         .at(0)
         .text()
     ).toBe('My alert rule');
 
     expect(
       wrapper
-        .find('RuleItem RuleDescription')
+        .find('RuleDescription')
         .at(0)
         .text()
     ).toBe('Environment: Staging');
 
     expect(
       wrapper
-        .find('RuleItem Conditions')
+        .find('Conditions')
         .at(0)
         .text()
     ).toBe('An alert is first seen');
 
     expect(
       wrapper
-        .find('RuleItem Actions')
+        .find('Actions')
         .at(0)
         .text()
     ).toBe('Send a notification to all services');
@@ -91,7 +91,7 @@ describe('ProjectAlertsList', function() {
     ).toBe(true);
     expect(
       wrapper
-        .find('RuleItem RuleDescription')
+        .find('RuleDescription')
         .at(0)
         .text()
     ).toBe('Environment: Staging');
