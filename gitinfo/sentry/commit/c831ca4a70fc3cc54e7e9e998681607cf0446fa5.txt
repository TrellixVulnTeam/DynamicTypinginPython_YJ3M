commit c831ca4a70fc3cc54e7e9e998681607cf0446fa5
Author: evanh <evanh@users.noreply.github.com>
Date:   Thu Jan 16 13:47:01 2020 -0500

    fix(tasks) Change update_user_reports to use bulk queries (#16465)
    
    I noticed that sometimes this task was failing with timeouts/rate limit errors,
    so change it to use bulk queries to hopefully avoid this problem.

diff --git a/src/sentry/tasks/update_user_reports.py b/src/sentry/tasks/update_user_reports.py
index bd9c68e035..5124122335 100644
--- a/src/sentry/tasks/update_user_reports.py
+++ b/src/sentry/tasks/update_user_reports.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from datetime import timedelta
 import logging
+import six
 
 from django.utils import timezone
 
@@ -19,16 +20,48 @@ def update_user_reports(**kwargs):
         group__isnull=True, environment__isnull=True, date_added__gte=now - timedelta(days=1)
     )
 
-    count = 0
-    updated = 0
-    for report in user_reports:
-        count += 1
-        event = eventstore.get_event_by_id(report.project_id, report.event_id)
-        if event:
-            report.update(group_id=event.group_id, environment=event.get_environment())
-            updated += 1
+    # We do one query per project, just to avoid the small case that two projects have the same event ID
+    project_map = {}
+    for r in user_reports:
+        project_map.setdefault(r.project_id, []).append(r)
+
+    # Logging values
+    total_reports = len(user_reports)
+    reports_with_event = 0
+    updated_reports = 0
+    samples = None
+
+    for project_id, reports in six.iteritems(project_map):
+        event_ids = [r.event_id for r in reports]
+        report_by_event = {r.event_id: r for r in reports}
+        snuba_filter = eventstore.Filter(
+            project_ids=[project_id],
+            event_ids=event_ids,
+            start=now - timedelta(days=2),
+            end=now + timedelta(minutes=5),  # Just to catch clock skew
+        )
+        events = eventstore.get_events(filter=snuba_filter)
+
+        for event in events:
+            report = report_by_event.get(event.event_id)
+            if report:
+                reports_with_event += 1
+                report.update(group_id=event.group_id, environment=event.get_environment())
+                updated_reports += 1
+
+        if not samples and len(reports) <= 10:
+            samples = {
+                "project_id": project_id,
+                "event_ids": event_ids,
+                "reports_event_ids": {r.id: r.event_id for r in reports},
+            }
 
     logger.info(
         "update_user_reports.records_updated",
-        extra={"records_updated": updated, "records_to_update": count},
+        extra={
+            "reports_to_update": total_reports,
+            "reports_with_event": reports_with_event,
+            "updated_reports": updated_reports,
+            "samples": samples,
+        },
     )
diff --git a/tests/sentry/tasks/test_update_user_reports.py b/tests/sentry/tasks/test_update_user_reports.py
index 6c09a02549..3c91472ed1 100644
--- a/tests/sentry/tasks/test_update_user_reports.py
+++ b/tests/sentry/tasks/test_update_user_reports.py
@@ -16,8 +16,10 @@ class UpdateUserReportTest(TestCase):
         event1 = self.store_event(data={}, project_id=project.id)
         report1 = UserReport.objects.create(project=project, event_id=event1.event_id)
         event2 = self.store_event(data={}, project_id=project.id)
-        report2 = UserReport.objects.create(
-            project=project, event_id=event2.event_id, date_added=now - timedelta(days=2)
+        report2 = UserReport.objects.create(project=project, event_id=event2.event_id)
+        event3 = self.store_event(data={}, project_id=project.id)
+        report3 = UserReport.objects.create(
+            project=project, event_id=event3.event_id, date_added=now - timedelta(days=2)
         )
 
         with self.tasks():
@@ -25,7 +27,10 @@ class UpdateUserReportTest(TestCase):
 
         report1 = UserReport.objects.get(project=project, event_id=event1.id)
         report2 = UserReport.objects.get(project=project, event_id=event2.id)
+        report3 = UserReport.objects.get(project=project, event_id=event3.id)
         assert report1.group_id == event1.group_id
         assert report1.environment == event1.get_environment()
-        assert report2.group is None
-        assert report2.environment is None
+        assert report2.group_id == event2.group_id
+        assert report2.environment == event2.get_environment()
+        assert report3.group is None
+        assert report3.environment is None
