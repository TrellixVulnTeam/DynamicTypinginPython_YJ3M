commit d946f66faf590bdd5dfe8c8818aa3d65ae52c46a
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Oct 4 17:56:53 2016 -0700

    [plugins] Remove unused allowed_to_disconnect functionality

diff --git a/src/social_auth/backends/__init__.py b/src/social_auth/backends/__init__.py
index fa5673c847..fa6b6c0459 100644
--- a/src/social_auth/backends/__init__.py
+++ b/src/social_auth/backends/__init__.py
@@ -26,7 +26,7 @@ from social_auth.utils import (
 from social_auth.exceptions import (
     StopPipeline, AuthFailed, AuthCanceled, AuthUnknownError,
     AuthTokenError, AuthMissingParameter, AuthStateMissing, AuthStateForbidden,
-    NotAllowedToDisconnect, BackendError)
+    BackendError)
 from social_auth.backends.utils import build_consumer_oauth_request
 from oauth2 import Consumer as OAuthConsumer, Token, Request as OAuthRequest
 
@@ -314,23 +314,20 @@ class BaseAuth(object):
         Override if extra operations are needed.
         """
         name = self.AUTH_BACKEND.name
-        if UserSocialAuth.allowed_to_disconnect(user, name, association_id):
-            do_revoke = setting('SOCIAL_AUTH_REVOKE_TOKENS_ON_DISCONNECT')
-            filter_args = {}
+        do_revoke = setting('SOCIAL_AUTH_REVOKE_TOKENS_ON_DISCONNECT')
+        filter_args = {}
 
-            if association_id:
-                filter_args['id'] = association_id
-            else:
-                filter_args['provider'] = name
-            instances = UserSocialAuth.get_social_auth_for_user(user)\
-                                      .filter(**filter_args)
-
-            if do_revoke:
-                for instance in instances:
-                    instance.revoke_token(drop_token=False)
-            instances.delete()
+        if association_id:
+            filter_args['id'] = association_id
         else:
-            raise NotAllowedToDisconnect()
+            filter_args['provider'] = name
+        instances = UserSocialAuth.get_social_auth_for_user(user)\
+                                  .filter(**filter_args)
+
+        if do_revoke:
+            for instance in instances:
+                instance.revoke_token(drop_token=False)
+        instances.delete()
 
     def build_absolute_uri(self, path=None):
         """Build absolute URI for given path. Replace http:// schema with
diff --git a/src/social_auth/exceptions.py b/src/social_auth/exceptions.py
index 897b4fff96..08b9f0501f 100644
--- a/src/social_auth/exceptions.py
+++ b/src/social_auth/exceptions.py
@@ -22,11 +22,6 @@ class WrongBackend(BackendError):
             self.backend_name
 
 
-class NotAllowedToDisconnect(SocialAuthBaseException):
-    """User is not allowed to disconnect it's social account."""
-    pass
-
-
 class StopPipeline(SocialAuthBaseException):
     """Stop pipeline process exception.
     Raise this exception to stop the rest of the pipeline process.
diff --git a/src/social_auth/models.py b/src/social_auth/models.py
index cb831de98d..428c97f0d9 100644
--- a/src/social_auth/models.py
+++ b/src/social_auth/models.py
@@ -43,7 +43,7 @@ class UserSocialAuth(models.Model):
 
     def __unicode__(self):
         """Return associated user unicode representation"""
-        return u'%s - %s' % (unicode(self.user), self.provider.title())
+        return u'%s - %s' % (six.text_type(self.user), self.provider.title())
 
     def get_backend(self):
         # Make import here to avoid recursive imports :-/
@@ -116,21 +116,6 @@ class UserSocialAuth(models.Model):
     def clean_username(cls, value):
         return CLEAN_USERNAME_REGEX.sub('', value)
 
-    @classmethod
-    def allowed_to_disconnect(cls, user, backend_name, association_id=None):
-        if association_id is not None:
-            qs = cls.objects.exclude(id=association_id)
-        else:
-            qs = cls.objects.exclude(provider=backend_name)
-        qs = qs.filter(user=user)
-
-        if hasattr(user, 'has_usable_password'):
-            valid_password = user.has_usable_password()
-        else:
-            valid_password = True
-
-        return valid_password or qs.count() > 0
-
     @classmethod
     def user_username(cls, user):
         if hasattr(user, 'USERNAME_FIELD'):
@@ -192,7 +177,7 @@ class UserSocialAuth(models.Model):
     @classmethod
     def create_social_auth(cls, user, uid, provider):
         if not isinstance(uid, six.string_types):
-            uid = str(uid)
+            uid = six.text_type(uid)
         return cls.objects.create(user=user, uid=uid, provider=provider)
 
     @classmethod
