commit d44683ab882c00865a0f54f0f4a6b6f317649853
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Thu Jan 2 12:44:41 2020 -0500

    fix(apm): Subtract transaction span duration from cumulativeDuration  (#16204)

diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
index 559eaa6786..c128f48eb4 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
@@ -31,7 +31,7 @@ import EventInterfaces from './eventInterfaces';
 import LinkedIssue from './linkedIssue';
 import DiscoverBreadcrumb from '../breadcrumb';
 import {SectionHeading} from '../styles';
-import EventBreakdown from './transaction/eventBreakdown';
+import OpsBreakdown from './transaction/opsBreakdown';
 
 const slugValidator = function(
   props: {[key: string]: any},
@@ -176,7 +176,7 @@ class EventDetailsContent extends AsyncComponent<Props, State> {
               organization={organization}
               projectId={this.projectId}
             />
-            <EventBreakdown event={event} />
+            <OpsBreakdown event={event} />
             {event.groupID && (
               <LinkedIssue groupId={event.groupID} eventId={event.eventID} />
             )}
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/eventBreakdown.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx
similarity index 82%
rename from src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/eventBreakdown.tsx
rename to src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx
index 014ed87bf0..830ea7dcab 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/eventBreakdown.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx
@@ -1,6 +1,7 @@
 import React from 'react';
 import styled from 'react-emotion';
 import get from 'lodash/get';
+import isFinite from 'lodash/isFinite';
 
 import {Event} from 'app/types';
 import {
@@ -18,7 +19,7 @@ type OpStats = {percentage: number; totalDuration: number};
 
 const TOP_N_SPANS = 4;
 
-type EventBreakdownType = {
+type OpBreakdownType = {
   // top TOP_N_SPANS spans
   ops: ({name: string} & OpStats)[];
   // the rest of the spans
@@ -29,7 +30,7 @@ type Props = {
   event: Event;
 };
 
-class EventBreakdown extends React.Component<Props> {
+class OpsBreakdown extends React.Component<Props> {
   getTransactionEvent(): SentryTransactionEvent | undefined {
     const {event} = this.props;
 
@@ -40,7 +41,7 @@ class EventBreakdown extends React.Component<Props> {
     return undefined;
   }
 
-  generateStats(): EventBreakdownType {
+  generateStats(): OpBreakdownType {
     const event = this.getTransactionEvent();
 
     if (!event) {
@@ -110,6 +111,22 @@ class EventBreakdown extends React.Component<Props> {
       {}
     );
 
+    // cumulativeDuration is the cumulative duration sum of the transaction span,
+    // and all of its descendants.
+    // If the cumulative duration sum of the transaction's descendants (excluding the transaction span)
+    // is non-zero, then we can subtract the transaction span's duration away from cumulativeDuration.
+    //
+    // In cases when (cumulativeDuration - transactionDuration) <= 0, this could mean either:
+    // 1. There are no descendants, or
+    // 2. All descendants have durations of 0.
+    //
+    // This change for cumulativeDuration ensures that the duration sum of the transaction
+    // span with respect to cumulativeDuration is at least 100%.
+    const transactionDuration = Math.abs(event.endTimestamp - event.startTimestamp);
+    if (cumulativeDuration - transactionDuration > 0) {
+      cumulativeDuration = cumulativeDuration - transactionDuration;
+    }
+
     const ops = Object.keys(aggregateByOp).map(opName => {
       return {
         name: opName,
@@ -170,7 +187,7 @@ class EventBreakdown extends React.Component<Props> {
         {results.ops.map(currOp => {
           const {name, percentage, totalDuration} = currOp;
           const durLabel = Math.round(totalDuration * 1000 * 100) / 100;
-          const pctLabel = Math.round(percentage * 100);
+          const pctLabel = isFinite(percentage) ? Math.round(percentage * 100) : 'âˆž';
           const opsColor: string = pickSpanBarColour(name);
 
           return (
@@ -226,4 +243,4 @@ const Pct = styled('div')`
   text-align: right;
 `;
 
-export default EventBreakdown;
+export default OpsBreakdown;
