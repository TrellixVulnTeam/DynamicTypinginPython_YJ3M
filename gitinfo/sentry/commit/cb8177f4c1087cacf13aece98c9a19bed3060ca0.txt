commit cb8177f4c1087cacf13aece98c9a19bed3060ca0
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Mon Nov 11 18:17:19 2019 -0500

    feat(discover2): Add minigraphs for the landing page (#15508)

diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 091ba1eac8..ea4f306ff6 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -252,8 +252,8 @@ export type GlobalSelection = {
   environments: string[];
   forceUrlSync?: boolean;
   datetime: {
-    start: string;
-    end: string;
+    start: Date | null;
+    end: Date | null;
     period: string;
     utc: boolean;
   };
diff --git a/src/sentry/static/sentry/app/views/eventsV2/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/index.tsx
index a3428fbf04..e62a8e352e 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/index.tsx
@@ -34,6 +34,7 @@ import EventInputName from './eventInputName';
 import {getFirstQueryString} from './utils';
 import {ALL_VIEWS, TRANSACTION_VIEWS, SAMPLE_VIEWS} from './data';
 import QueryCard from './querycard';
+import MiniGraph from './miniGraph';
 
 type Props = {
   organization: Organization;
@@ -87,6 +88,15 @@ class EventsV2 extends React.Component<Props> {
           to={to}
           title={eventView.name}
           queryDetail={eventView.query}
+          renderGraph={() => {
+            return (
+              <MiniGraph
+                query={eventView.getEventsAPIPayload(location).query}
+                eventView={eventView}
+                organization={organization}
+              />
+            );
+          }}
           onEventClick={() => {
             trackAnalyticsEvent({
               eventKey: 'discover_v2.prebuilt_query_click',
diff --git a/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx b/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx
new file mode 100644
index 0000000000..8784152b01
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx
@@ -0,0 +1,92 @@
+import React from 'react';
+
+import withApi from 'app/utils/withApi';
+import withGlobalSelection from 'app/utils/withGlobalSelection';
+import {Client} from 'app/api';
+import {GlobalSelection, Organization} from 'app/types';
+import EventsRequest from 'app/views/events/utils/eventsRequest';
+import AreaChart from 'app/components/charts/areaChart';
+import {getInterval} from 'app/components/charts/utils';
+
+import EventView from './eventView';
+
+type Props = {
+  organization: Organization;
+  eventView: EventView;
+  api: Client;
+  selection: GlobalSelection;
+  query: string;
+};
+
+class MiniGraph extends React.Component<Props> {
+  render() {
+    const {organization, api, selection, query} = this.props;
+    const {start, end, period} = selection.datetime;
+
+    return (
+      <EventsRequest
+        organization={organization}
+        api={api}
+        query={query}
+        start={start}
+        end={end}
+        period={period}
+        interval={getInterval({start, end, period}, true)}
+      >
+        {({loading, timeseriesData}) => {
+          if (loading) {
+            return null;
+          }
+
+          const data = (timeseriesData || []).map(series => {
+            return {
+              ...series,
+              areaStyle: {
+                opacity: 0.4,
+              },
+              lineStyle: {
+                opacity: 0,
+              },
+              smooth: true,
+            };
+          });
+
+          return (
+            <AreaChart
+              height={100}
+              series={[...data]}
+              xAxis={{
+                show: false,
+                axisPointer: {
+                  show: false,
+                },
+              }}
+              yAxis={{
+                show: false,
+              }}
+              tooltip={{
+                show: false,
+              }}
+              toolBox={{
+                show: false,
+              }}
+              grid={{
+                left: 0,
+                top: 0,
+                right: 0,
+                bottom: 0,
+                containLabel: false,
+              }}
+              colors={['#6d5fc7']}
+              options={{
+                hoverAnimation: false,
+              }}
+            />
+          );
+        }}
+      </EventsRequest>
+    );
+  }
+}
+
+export default withApi(withGlobalSelection(MiniGraph));
diff --git a/src/sentry/static/sentry/app/views/eventsV2/querycard.tsx b/src/sentry/static/sentry/app/views/eventsV2/querycard.tsx
index 2d473c072c..aa30b0a195 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/querycard.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/querycard.tsx
@@ -10,11 +10,12 @@ type Props = {
   queryDetail?: string;
   to?: string | object;
   onEventClick?: () => void;
+  renderGraph: () => React.ReactNode;
 };
 
 class QueryCard extends React.PureComponent<Props> {
   render() {
-    const {title, queryDetail, onEventClick, to} = this.props;
+    const {title, queryDetail, onEventClick, to, renderGraph} = this.props;
 
     return (
       <StyledQueryCard onClick={onEventClick} to={to}>
@@ -22,7 +23,7 @@ class QueryCard extends React.PureComponent<Props> {
           <StyledTitle>{title}</StyledTitle>
           <StyledQueryDetail>{queryDetail}</StyledQueryDetail>
         </QueryCardHeader>
-        <QueryCardBody />
+        <QueryCardBody>{renderGraph()}</QueryCardBody>
         <QueryCardFooter>
           <StyledCreator>
             <small>Pre-Built Query</small>
@@ -52,6 +53,11 @@ const StyledQueryCard = styled(Link)`
   &:active {
     box-shadow: 0px 0px 0px 6px rgba(209, 202, 216, 0.5);
   }
+
+  /* This is to ensure the graph is visually clickable */
+  * {
+    cursor: pointer;
+  }
 `;
 
 const QueryCardHeader = styled('div')`
