commit c35e0cabba1a1a2d273fb0045118db2ccedb4136
Author: Mark Story <mark@sentry.io>
Date:   Tue Mar 24 10:44:38 2020 -0400

    ref(ts) Move ActivityItem components to typescript/function components. (#17831)
    
    I had to adjust a few other components to get the typings to match up.

diff --git a/src/sentry/static/sentry/app/components/activity/item/avatar.jsx b/src/sentry/static/sentry/app/components/activity/item/avatar.jsx
deleted file mode 100644
index f5d1e2b412..0000000000
--- a/src/sentry/static/sentry/app/components/activity/item/avatar.jsx
+++ /dev/null
@@ -1,59 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from '@emotion/styled';
-
-import UserAvatar from 'app/components/avatar/userAvatar';
-import InlineSvg from 'app/components/inlineSvg';
-import Placeholder from 'app/components/placeholder';
-import SentryTypes from 'app/sentryTypes';
-
-class ActivityAvatar extends React.Component {
-  static propTypes = {
-    type: PropTypes.oneOf(['system', 'user']),
-    user: SentryTypes.User,
-    size: PropTypes.number,
-  };
-
-  static defaultProps = {
-    size: 38,
-  };
-
-  render() {
-    const {className, type, user, size} = this.props;
-    if (user) {
-      return <UserAvatar user={user} size={size} className={className} />;
-    }
-
-    if (type === 'system') {
-      // Return Sentry avatar
-      return (
-        <SystemAvatar className={className} size={size}>
-          <Logo src="icon-sentry" size={`${Math.round(size * 0.8)}px`} />
-        </SystemAvatar>
-      );
-    }
-
-    return (
-      <Placeholder
-        className={className}
-        width={`${size}px`}
-        height={`${size}px`}
-        shape="circle"
-      />
-    );
-  }
-}
-
-export default ActivityAvatar;
-
-const SystemAvatar = styled('span')`
-  display: flex;
-  justify-content: center;
-  align-items: center;
-  width: ${p => p.size}px;
-  height: ${p => p.size}px;
-`;
-
-const Logo = styled(InlineSvg)`
-  color: ${p => p.theme.gray5};
-`;
diff --git a/src/sentry/static/sentry/app/components/activity/item/avatar.tsx b/src/sentry/static/sentry/app/components/activity/item/avatar.tsx
new file mode 100644
index 0000000000..75f9e76af5
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/activity/item/avatar.tsx
@@ -0,0 +1,64 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {AvatarUser} from 'app/types';
+import UserAvatar from 'app/components/avatar/userAvatar';
+import InlineSvg from 'app/components/inlineSvg';
+import Placeholder from 'app/components/placeholder';
+import SentryTypes from 'app/sentryTypes';
+
+type Props = {
+  type: 'system' | 'user';
+  user?: AvatarUser;
+  className?: string;
+  size?: number;
+};
+
+function ActivityAvatar({className, type, user, size = 38}: Props) {
+  if (user) {
+    return <UserAvatar user={user} size={size} className={className} />;
+  }
+
+  if (type === 'system') {
+    // Return Sentry avatar
+    return (
+      <SystemAvatar className={className} size={size}>
+        <Logo src="icon-sentry" size={`${Math.round(size * 0.8)}px`} />
+      </SystemAvatar>
+    );
+  }
+
+  return (
+    <Placeholder
+      className={className}
+      width={`${size}px`}
+      height={`${size}px`}
+      shape="circle"
+    />
+  );
+}
+
+ActivityAvatar.propTypes = {
+  user: SentryTypes.User,
+  type: PropTypes.oneOf(['system', 'user']),
+  size: PropTypes.number,
+};
+
+export default ActivityAvatar;
+
+type SystemAvatarProps = {
+  size: number;
+};
+
+const SystemAvatar = styled('span')<SystemAvatarProps>`
+  display: flex;
+  justify-content: center;
+  align-items: center;
+  width: ${p => p.size}px;
+  height: ${p => p.size}px;
+`;
+
+const Logo = styled(InlineSvg)`
+  color: ${p => p.theme.gray5};
+`;
diff --git a/src/sentry/static/sentry/app/components/activity/item/bubble.jsx b/src/sentry/static/sentry/app/components/activity/item/bubble.tsx
similarity index 91%
rename from src/sentry/static/sentry/app/components/activity/item/bubble.jsx
rename to src/sentry/static/sentry/app/components/activity/item/bubble.tsx
index 3b8cdd1fdb..43d520f34e 100644
--- a/src/sentry/static/sentry/app/components/activity/item/bubble.jsx
+++ b/src/sentry/static/sentry/app/components/activity/item/bubble.tsx
@@ -1,11 +1,16 @@
 import PropTypes from 'prop-types';
 import styled from '@emotion/styled';
 
+type Props = {
+  backgroundColor?: string;
+  borderColor?: string;
+};
+
 /**
  * This creates a bordered box that has a left pointing arrow
  * on the left-side at the top.
  */
-const ActivityBubble = styled('div')`
+const ActivityBubble = styled('div')<Props>`
   flex: 1;
   background-color: ${p => p.backgroundColor};
   border: 1px solid ${p => p.borderColor || p.theme.borderLight};
diff --git a/src/sentry/static/sentry/app/components/activity/item/index.jsx b/src/sentry/static/sentry/app/components/activity/item/index.jsx
deleted file mode 100644
index 1b1451b47e..0000000000
--- a/src/sentry/static/sentry/app/components/activity/item/index.jsx
+++ /dev/null
@@ -1,155 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from '@emotion/styled';
-
-import DateTime from 'app/components/dateTime';
-import TimeSince from 'app/components/timeSince';
-import space from 'app/styles/space';
-import textStyles from 'app/styles/text';
-
-import ActivityAvatar from './avatar';
-import ActivityBubble from './bubble';
-
-class ActivityItem extends React.Component {
-  static propTypes = {
-    /**
-     * This is used to uniquely identify the activity item for use as an anchor
-     */
-    id: PropTypes.string,
-
-    /**
-     * If supplied, will show the time since this date
-     */
-    date: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.string]),
-
-    /**
-     * Used to render an avatar for the author. Currently can be a user, otherwise
-     * defaults as a "system" avatar (i.e. sentry)
-     *
-     * `user` is required if `type` is "user"
-     */
-    author: PropTypes.shape({
-      type: ActivityAvatar.propTypes.type,
-      user: ActivityAvatar.propTypes.user,
-    }),
-
-    avatarSize: PropTypes.number,
-
-    // Hides date in header
-    hideDate: PropTypes.bool,
-
-    // Instead of showing a relative time/date, show the time
-    showTime: PropTypes.bool,
-
-    /**
-     * Can be a react node or a render function. render function will not include default wrapper
-     */
-    header: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
-
-    /**
-     * Can be a react node or a render function. render function will not include default wrapper
-     */
-    footer: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
-
-    bubbleProps: PropTypes.shape(ActivityBubble.propTypes),
-  };
-
-  render() {
-    const {
-      className,
-      children,
-      avatarSize,
-      id,
-      date,
-      author,
-      hideDate,
-      showTime,
-      header,
-      footer,
-      bubbleProps,
-    } = this.props;
-
-    const headerRenderFunc = typeof header === 'function';
-    const footerRenderFunc = typeof footer === 'function';
-    const childrenRenderFunc = typeof children === 'function';
-    const showDate = !hideDate && date;
-
-    return (
-      <ActivityItemWrapper data-test-id="activity-item" className={className}>
-        {id && <a id={id} />}
-
-        <StyledActivityAvatar
-          type={author && author.type}
-          user={author && author.user}
-          size={avatarSize}
-        />
-
-        <ActivityBubble {...bubbleProps}>
-          {header && headerRenderFunc && header()}
-          {header && !headerRenderFunc && (
-            <ActivityHeader>
-              <ActivityHeaderContent>{header}</ActivityHeaderContent>
-
-              {showDate && !showTime && <StyledTimeSince date={date} />}
-              {showDate && showTime && <StyledDateTime timeOnly date={date} />}
-            </ActivityHeader>
-          )}
-
-          {children && childrenRenderFunc && children()}
-          {children && !childrenRenderFunc && <ActivityBody>{children}</ActivityBody>}
-
-          {footer && footerRenderFunc && footer()}
-          {footer && !footerRenderFunc && <ActivityFooter>{footer}</ActivityFooter>}
-        </ActivityBubble>
-      </ActivityItemWrapper>
-    );
-  }
-}
-
-const ActivityItemWrapper = styled('div')`
-  display: flex;
-  margin-bottom: ${space(2)};
-`;
-
-const HeaderAndFooter = styled('div')`
-  padding: 6px ${space(2)};
-`;
-
-const ActivityHeader = styled(HeaderAndFooter)`
-  display: flex;
-  border-bottom: 1px solid ${p => p.theme.borderLight};
-  font-size: ${p => p.theme.fontSizeMedium};
-
-  &:last-child {
-    border-bottom: none;
-  }
-`;
-
-const ActivityHeaderContent = styled('div')`
-  flex: 1;
-`;
-
-const ActivityFooter = styled(HeaderAndFooter)`
-  display: flex;
-  border-top: 1px solid ${p => p.theme.borderLight};
-  font-size: ${p => p.theme.fontSizeMedium};
-`;
-
-const ActivityBody = styled('div')`
-  padding: ${space(2)} ${space(2)};
-  ${textStyles}
-`;
-
-const StyledActivityAvatar = styled(ActivityAvatar)`
-  margin-right: ${space(1)};
-`;
-
-const StyledTimeSince = styled(TimeSince)`
-  color: ${p => p.theme.gray2};
-`;
-
-const StyledDateTime = styled(DateTime)`
-  color: ${p => p.theme.gray2};
-`;
-
-export default ActivityItem;
diff --git a/src/sentry/static/sentry/app/components/activity/item/index.tsx b/src/sentry/static/sentry/app/components/activity/item/index.tsx
new file mode 100644
index 0000000000..cb120e85dc
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/activity/item/index.tsx
@@ -0,0 +1,172 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {AvatarUser} from 'app/types';
+import DateTime from 'app/components/dateTime';
+import TimeSince from 'app/components/timeSince';
+import space from 'app/styles/space';
+import textStyles from 'app/styles/text';
+import {isRenderFunc} from 'app/utils/isRenderFunc';
+
+import ActivityAvatar from './avatar';
+import ActivityBubble from './bubble';
+
+type ChildFunction = () => React.ReactNode;
+
+type Props = {
+  children?: React.ReactChild | ChildFunction;
+  className?: string;
+  /**
+   * This is used to uniquely identify the activity item for use as an anchor
+   */
+  id?: string;
+
+  /**
+   * If supplied, will show the time since this date
+   */
+  date?: string | Date;
+
+  /**
+   * Used to render an avatar for the author. Currently can be a user, otherwise
+   * defaults as a "system" avatar (i.e. sentry)
+   *
+   * `user` is required if `type` is "user"
+   */
+  author?: {
+    type: 'user' | 'system';
+    user?: AvatarUser;
+  };
+
+  // Size of the avatar.
+  avatarSize?: number;
+
+  // Hides date in header
+  hideDate?: boolean;
+
+  // Instead of showing a relative time/date, show the time
+  showTime?: boolean;
+
+  /**
+   * Can be a react node or a render function. render function will not include default wrapper
+   */
+  header?: React.ReactNode | ChildFunction;
+
+  /**
+   * Can be a react node or a render function. render function will not include default wrapper
+   */
+  footer?: React.ReactNode | ChildFunction;
+
+  bubbleProps?: React.ComponentProps<typeof ActivityBubble>;
+};
+
+function ActivityItem({
+  author,
+  avatarSize,
+  bubbleProps,
+  className,
+  children,
+  date,
+  footer,
+  id,
+  header,
+  hideDate = false,
+  showTime = false,
+}: Props) {
+  const showDate = !hideDate && date;
+
+  return (
+    <ActivityItemWrapper data-test-id="activity-item" className={className}>
+      {id && <a id={id} />}
+
+      {author && (
+        <StyledActivityAvatar type={author.type} user={author.user} size={avatarSize} />
+      )}
+
+      <ActivityBubble {...bubbleProps}>
+        {header && isRenderFunc<ChildFunction>(header) && header()}
+        {header && !isRenderFunc<ChildFunction>(header) && (
+          <ActivityHeader>
+            <ActivityHeaderContent>{header}</ActivityHeaderContent>
+
+            {date && showDate && !showTime && <StyledTimeSince date={date} />}
+            {date && showDate && showTime && <StyledDateTime timeOnly date={date} />}
+          </ActivityHeader>
+        )}
+
+        {children && isRenderFunc<ChildFunction>(children) && children()}
+        {children && !isRenderFunc<ChildFunction>(children) && (
+          <ActivityBody>{children}</ActivityBody>
+        )}
+
+        {footer && isRenderFunc<ChildFunction>(footer) && footer()}
+        {footer && !isRenderFunc<ChildFunction>(footer) && (
+          <ActivityFooter>{footer}</ActivityFooter>
+        )}
+      </ActivityBubble>
+    </ActivityItemWrapper>
+  );
+}
+
+ActivityItem.propTypes = {
+  id: PropTypes.string,
+  date: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.string]),
+  author: PropTypes.shape({
+    type: ActivityAvatar.propTypes.type,
+    user: ActivityAvatar.propTypes.user,
+  }),
+  avatarSize: PropTypes.number,
+  hideDate: PropTypes.bool,
+  showTime: PropTypes.bool,
+  header: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
+  footer: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
+  bubbleProps: PropTypes.shape(ActivityBubble.propTypes as any),
+};
+
+const ActivityItemWrapper = styled('div')`
+  display: flex;
+  margin-bottom: ${space(2)};
+`;
+
+const HeaderAndFooter = styled('div')`
+  padding: 6px ${space(2)};
+`;
+
+const ActivityHeader = styled(HeaderAndFooter)`
+  display: flex;
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+  font-size: ${p => p.theme.fontSizeMedium};
+
+  &:last-child {
+    border-bottom: none;
+  }
+`;
+
+const ActivityHeaderContent = styled('div')`
+  flex: 1;
+`;
+
+const ActivityFooter = styled(HeaderAndFooter)`
+  display: flex;
+  border-top: 1px solid ${p => p.theme.borderLight};
+  font-size: ${p => p.theme.fontSizeMedium};
+`;
+
+const ActivityBody = styled('div')`
+  padding: ${space(2)} ${space(2)};
+  ${textStyles}
+`;
+
+const StyledActivityAvatar = styled(ActivityAvatar)`
+  margin-right: ${space(1)};
+`;
+
+const StyledTimeSince = styled(TimeSince)`
+  color: ${p => p.theme.gray2};
+`;
+
+const StyledDateTime = styled(DateTime)`
+  color: ${p => p.theme.gray2};
+`;
+
+export default ActivityItem;
diff --git a/src/sentry/static/sentry/app/components/events/userFeedback.tsx b/src/sentry/static/sentry/app/components/events/userFeedback.tsx
index 23ce14175b..bea661811d 100644
--- a/src/sentry/static/sentry/app/components/events/userFeedback.tsx
+++ b/src/sentry/static/sentry/app/components/events/userFeedback.tsx
@@ -36,12 +36,19 @@ class EventUserFeedback extends React.Component<Props> {
 
   render() {
     const {className, report} = this.props;
+    const user = report.user || {
+      name: report.name,
+      email: report.email,
+      id: '',
+      username: '',
+      ip_address: '',
+    };
 
     return (
       <div className={className}>
         <ActivityItem
           date={report.dateCreated}
-          author={{type: 'user', user: report}}
+          author={{type: 'user', user}}
           header={
             <div>
               <ActivityAuthor>{report.name}</ActivityAuthor>
diff --git a/src/sentry/static/sentry/app/utils/isRenderFunc.tsx b/src/sentry/static/sentry/app/utils/isRenderFunc.tsx
index 76fda38027..5d63b3d2d7 100644
--- a/src/sentry/static/sentry/app/utils/isRenderFunc.tsx
+++ b/src/sentry/static/sentry/app/utils/isRenderFunc.tsx
@@ -1,5 +1,5 @@
 /**
- * Generic type guard for children a function patterns.
+ * Generic type guard for children as a function patterns.
  */
 export function isRenderFunc<T>(func: React.ReactNode | Function): func is T {
   return typeof func === 'function';
diff --git a/src/sentry/static/sentry/app/views/alerts/details/activity/activityPlaceholder.tsx b/src/sentry/static/sentry/app/views/alerts/details/activity/activityPlaceholder.tsx
index 73a0888e70..c94d45b88a 100644
--- a/src/sentry/static/sentry/app/views/alerts/details/activity/activityPlaceholder.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/details/activity/activityPlaceholder.tsx
@@ -7,9 +7,8 @@ import theme from 'app/utils/theme';
 
 const ActivityPlaceholder = () => (
   <ActivityItem
-    author={null}
     bubbleProps={{
-      background: theme.placeholderBackground,
+      backgroundColor: theme.placeholderBackground,
       borderColor: theme.placeholderBackground,
     }}
   >
diff --git a/src/sentry/static/sentry/app/views/alerts/details/activity/statusItem.tsx b/src/sentry/static/sentry/app/views/alerts/details/activity/statusItem.tsx
index bc67918a5e..f8ebb7b4a2 100644
--- a/src/sentry/static/sentry/app/views/alerts/details/activity/statusItem.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/details/activity/statusItem.tsx
@@ -50,7 +50,7 @@ class StatusItem extends React.Component<Props> {
         showTime={showTime}
         author={{
           type: activity.user ? 'user' : 'system',
-          user: activity.user,
+          user: activity.user || undefined,
         }}
         header={
           <div>
