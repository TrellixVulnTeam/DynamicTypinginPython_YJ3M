commit 009b84bc32a0ccda250fbcd67547f021fa98a705
Author: Mark Story <mark@sentry.io>
Date:   Wed Apr 8 15:11:08 2020 -0400

    fix(discover) Format apdex and error_rate functions as percentages (#18156)
    
    Consolidate a few single function modules into the formatters module
    so we have fewer files to remember. Format apdex and error_rate as
    percentages across both performance views and discover2 results.

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index d51848758a..b31e274416 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -1083,7 +1083,7 @@ FUNCTIONS = {
         "name": "apdex",
         "args": [NumberRange("satisfaction", 0, None)],
         "transform": u"apdex(duration, {satisfaction:g})",
-        "result_type": "number",
+        "result_type": "percentage",
     },
     "impact": {
         "name": "impact",
@@ -1100,7 +1100,7 @@ FUNCTIONS = {
         "name": "error_rate",
         "args": [],
         "transform": "divide(countIf(and(notEquals(transaction_status, 0), notEquals(transaction_status, 2))), count())",
-        "result_type": "number",
+        "result_type": "percentage",
     },
     # The user facing signature for this function is histogram(<column>, <num_buckets>)
     # Internally, snuba.discover.query() expands the user request into this value by
diff --git a/src/sentry/static/sentry/app/components/count.tsx b/src/sentry/static/sentry/app/components/count.tsx
index 8ce9aa50de..7e8cd72486 100644
--- a/src/sentry/static/sentry/app/components/count.tsx
+++ b/src/sentry/static/sentry/app/components/count.tsx
@@ -1,7 +1,7 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
-import formatAbbreviatedNumber from 'app/utils/formatAbbreviatedNumber';
+import {formatAbbreviatedNumber} from 'app/utils/formatters';
 
 type Props = {
   value: string | number;
diff --git a/src/sentry/static/sentry/app/components/stackedBarChart.jsx b/src/sentry/static/sentry/app/components/stackedBarChart.jsx
index 152c787b05..07bd76ffb2 100644
--- a/src/sentry/static/sentry/app/components/stackedBarChart.jsx
+++ b/src/sentry/static/sentry/app/components/stackedBarChart.jsx
@@ -9,7 +9,7 @@ import Tooltip from 'app/components/tooltip';
 import Count from 'app/components/count';
 import ConfigStore from 'app/stores/configStore';
 import theme from 'app/utils/theme';
-import floatFormat from 'app/utils/floatFormat';
+import {formatFloat} from 'app/utils/formatters';
 
 class StackedBarChart extends React.Component {
   static propTypes = {
@@ -293,7 +293,7 @@ class StackedBarChart extends React.Component {
     let prevPct = 0;
     const pts = point.y.map((y, i) => {
       const pct = Math.max(
-        totalY && floatFormat((y / totalY) * totalPct * maxPercentage, 2),
+        totalY && formatFloat((y / totalY) * totalPct * maxPercentage, 2),
         this.getMinHeight(i, point.y.length)
       );
 
@@ -342,7 +342,7 @@ class StackedBarChart extends React.Component {
     const totalPoints = Math.max(...series.map(s => s.data.length));
     // we expand the graph just a hair beyond 100% prevent a subtle white line on the edge
     const nudge = 0.1;
-    const pointWidth = floatFormat((100.0 + this.props.gap + nudge) / totalPoints, 2);
+    const pointWidth = formatFloat((100.0 + this.props.gap + nudge) / totalPoints, 2);
 
     const maxval = this.maxPointValue();
     const markers = this.props.markers.slice();
diff --git a/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx b/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx
index dce0997b21..ecbb807881 100644
--- a/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx
@@ -10,7 +10,7 @@ import UserBadge from 'app/components/idBadge/userBadge';
 import getDynamicText from 'app/utils/getDynamicText';
 import Duration from 'app/components/duration';
 import ShortId from 'app/components/shortId';
-import floatFormat from 'app/utils/floatFormat';
+import {formatFloat, formatPercentage} from 'app/utils/formatters';
 import Version from 'app/components/version';
 import {getAggregateAlias} from 'app/utils/discover/fields';
 
@@ -49,11 +49,12 @@ type FieldFormatter = {
 
 type FieldFormatters = {
   boolean: FieldFormatter;
+  date: FieldFormatter;
+  duration: FieldFormatter;
   integer: FieldFormatter;
   number: FieldFormatter;
-  date: FieldFormatter;
+  percentage: FieldFormatter;
   string: FieldFormatter;
-  duration: FieldFormatter;
 };
 
 export type FieldTypes = keyof FieldFormatters;
@@ -75,6 +76,31 @@ const FIELD_FORMATTERS: FieldFormatters = {
       return <Container>{value}</Container>;
     },
   },
+  date: {
+    sortField: true,
+    renderFunc: (field, data) => (
+      <Container>
+        {data[field]
+          ? getDynamicText({
+              value: <StyledDateTime date={data[field]} />,
+              fixed: 'timestamp',
+            })
+          : emptyValue}
+      </Container>
+    ),
+  },
+  duration: {
+    sortField: true,
+    renderFunc: (field, data) => (
+      <NumberContainer>
+        {typeof data[field] === 'number' ? (
+          <Duration seconds={data[field] / 1000} fixedDigits={2} abbreviation />
+        ) : (
+          emptyValue
+        )}
+      </NumberContainer>
+    ),
+  },
   integer: {
     sortField: true,
     renderFunc: (field, data) => (
@@ -87,21 +113,16 @@ const FIELD_FORMATTERS: FieldFormatters = {
     sortField: true,
     renderFunc: (field, data) => (
       <NumberContainer>
-        {typeof data[field] === 'number' ? floatFormat(data[field], 5) : emptyValue}
+        {typeof data[field] === 'number' ? formatFloat(data[field], 5) : emptyValue}
       </NumberContainer>
     ),
   },
-  date: {
+  percentage: {
     sortField: true,
     renderFunc: (field, data) => (
-      <Container>
-        {data[field]
-          ? getDynamicText({
-              value: <StyledDateTime date={data[field]} />,
-              fixed: 'timestamp',
-            })
-          : emptyValue}
-      </Container>
+      <NumberContainer>
+        {typeof data[field] === 'number' ? formatPercentage(data[field]) : emptyValue}
+      </NumberContainer>
     ),
   },
   string: {
@@ -112,18 +133,6 @@ const FIELD_FORMATTERS: FieldFormatters = {
       return <Container>{value}</Container>;
     },
   },
-  duration: {
-    sortField: true,
-    renderFunc: (field, data) => (
-      <NumberContainer>
-        {typeof data[field] === 'number' ? (
-          <Duration seconds={data[field] / 1000} fixedDigits={2} abbreviation />
-        ) : (
-          emptyValue
-        )}
-      </NumberContainer>
-    ),
-  },
 };
 
 type SpecialFieldRenderFunc = (
diff --git a/src/sentry/static/sentry/app/utils/discover/fields.tsx b/src/sentry/static/sentry/app/utils/discover/fields.tsx
index e1aa35984d..a4fc12c0bf 100644
--- a/src/sentry/static/sentry/app/utils/discover/fields.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/fields.tsx
@@ -13,12 +13,13 @@ export type Field = {
 };
 
 export type ColumnType =
-  | 'string'
+  | 'boolean'
+  | 'date'
+  | 'duration'
   | 'integer'
   | 'number'
-  | 'duration'
-  | 'date'
-  | 'boolean';
+  | 'percentage'
+  | 'string';
 
 export type ColumnValueType = ColumnType | 'never'; // Matches to nothing
 
@@ -157,7 +158,7 @@ export const AGGREGATIONS = {
   },
   error_rate: {
     parameters: [],
-    outputType: 'number',
+    outputType: 'percentage',
     isSortable: true,
   },
   apdex: {
@@ -169,7 +170,7 @@ export const AGGREGATIONS = {
         required: true,
       },
     ],
-    outputType: 'number',
+    outputType: 'percentage',
     isSortable: true,
   },
   impact: {
diff --git a/src/sentry/static/sentry/app/utils/floatFormat.tsx b/src/sentry/static/sentry/app/utils/floatFormat.tsx
deleted file mode 100644
index f9acdcee42..0000000000
--- a/src/sentry/static/sentry/app/utils/floatFormat.tsx
+++ /dev/null
@@ -1,4 +0,0 @@
-export default function floatFormat(number: number, places: number) {
-  const multi = Math.pow(10, places);
-  return parseInt((number * multi).toString(), 10) / multi;
-}
diff --git a/src/sentry/static/sentry/app/utils/formatAbbreviatedNumber.tsx b/src/sentry/static/sentry/app/utils/formatAbbreviatedNumber.tsx
deleted file mode 100644
index dca4f4ec67..0000000000
--- a/src/sentry/static/sentry/app/utils/formatAbbreviatedNumber.tsx
+++ /dev/null
@@ -1,30 +0,0 @@
-import floatFormat from './floatFormat';
-
-const numberFormats = [
-  [1000000000, 'b'],
-  [1000000, 'm'],
-  [1000, 'k'],
-] as const;
-
-export default function formatNumber(number: number | string) {
-  number = Number(number);
-
-  let lookup: typeof numberFormats[number];
-
-  // eslint-disable-next-line no-cond-assign
-  for (let i = 0; (lookup = numberFormats[i]); i++) {
-    const [suffixNum, suffix] = lookup;
-    const shortValue = Math.floor(number / suffixNum);
-    const fitsBound = number % suffixNum;
-
-    if (shortValue <= 0) {
-      continue;
-    }
-
-    return shortValue / 10 > 1 || !fitsBound
-      ? `${shortValue}${suffix}`
-      : `${floatFormat(number / suffixNum, 1)}${suffix}`;
-  }
-
-  return number.toLocaleString();
-}
diff --git a/src/sentry/static/sentry/app/utils/formatters.tsx b/src/sentry/static/sentry/app/utils/formatters.tsx
index 95d9187d29..9c540d4707 100644
--- a/src/sentry/static/sentry/app/utils/formatters.tsx
+++ b/src/sentry/static/sentry/app/utils/formatters.tsx
@@ -144,3 +144,47 @@ export function getExactDuration(seconds: number, abbreviation: boolean = false)
 
   return `0${abbreviation ? t('ms') : ` ${t('milliseconds')}`}`;
 }
+
+export function formatFloat(number: number, places: number) {
+  const multi = Math.pow(10, places);
+  return parseInt((number * multi).toString(), 10) / multi;
+}
+
+/**
+ * Format a value between 0 and 1 as a percentage
+ */
+export function formatPercentage(value: number, places: number = 2) {
+  if (value === 0) {
+    return '0%';
+  }
+  return (value * 100).toFixed(places) + '%';
+}
+
+const numberFormats = [
+  [1000000000, 'b'],
+  [1000000, 'm'],
+  [1000, 'k'],
+] as const;
+
+export function formatAbbreviatedNumber(number: number | string) {
+  number = Number(number);
+
+  let lookup: typeof numberFormats[number];
+
+  // eslint-disable-next-line no-cond-assign
+  for (let i = 0; (lookup = numberFormats[i]); i++) {
+    const [suffixNum, suffix] = lookup;
+    const shortValue = Math.floor(number / suffixNum);
+    const fitsBound = number % suffixNum;
+
+    if (shortValue <= 0) {
+      continue;
+    }
+
+    return shortValue / 10 > 1 || !fitsBound
+      ? `${shortValue}${suffix}`
+      : `${formatFloat(number / suffixNum, 1)}${suffix}`;
+  }
+
+  return number.toLocaleString();
+}
diff --git a/src/sentry/static/sentry/app/views/events/eventsChart.jsx b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
index 5030d4a8ed..e36c959450 100644
--- a/src/sentry/static/sentry/app/views/events/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
@@ -15,11 +15,12 @@ import {IconWarning} from 'app/icons';
 import theme from 'app/utils/theme';
 import TransparentLoadingMask from 'app/components/charts/components/transparentLoadingMask';
 import ErrorPanel from 'app/components/charts/components/errorPanel';
-import {getDuration} from 'app/utils/formatters';
+import {getDuration, formatPercentage} from 'app/utils/formatters';
 
 import EventsRequest from './utils/eventsRequest';
 
 const DURATION_AGGREGATE_PATTERN = /^(p75|p95|p99|percentile)|transaction\.duration/;
+const PERCENTAGE_AGGREGATE_PATTERN = /^(apdex|error_rate)/;
 
 class EventsAreaChart extends React.Component {
   static propTypes = {
@@ -150,6 +151,9 @@ class EventsChart extends React.Component {
         if (DURATION_AGGREGATE_PATTERN.test(yAxis)) {
           return getDuration(value / 1000, 2);
         }
+        if (PERCENTAGE_AGGREGATE_PATTERN.test(yAxis)) {
+          return formatPercentage(value, 2);
+        }
         if (typeof value === 'number') {
           return value.toLocaleString();
         }
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/headerCell.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/headerCell.tsx
index 38481befb2..248126aab8 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/headerCell.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/headerCell.tsx
@@ -19,7 +19,7 @@ function HeaderCell(props: Props) {
   const {children, column, tableData} = props;
 
   // establish alignment based on the type
-  const alignedTypes: ColumnValueType[] = ['number', 'duration', 'integer'];
+  const alignedTypes: ColumnValueType[] = ['number', 'duration', 'integer', 'percentage'];
   let align: Alignments = alignedTypes.includes(column.type) ? 'right' : 'left';
 
   if (column.type === 'never') {
@@ -29,7 +29,7 @@ function HeaderCell(props: Props) {
         ? tableData.meta[getAggregateAlias(column.name)]
         : undefined;
 
-    if (maybeType === 'integer' || maybeType === 'number') {
+    if (maybeType !== undefined && alignedTypes.includes(maybeType)) {
       align = 'right';
     }
   }
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersChart.jsx b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersChart.jsx
index 0b818f25a4..2c5a914389 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersChart.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersChart.jsx
@@ -11,7 +11,7 @@ import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import StackedBarChart from 'app/components/stackedBarChart';
-import formatAbbreviatedNumber from 'app/utils/formatAbbreviatedNumber';
+import {formatAbbreviatedNumber} from 'app/utils/formatters';
 
 class ProjectFiltersChart extends React.Component {
   static propTypes = {
diff --git a/tests/js/spec/utils/floatFormat.spec.jsx b/tests/js/spec/utils/floatFormat.spec.jsx
deleted file mode 100644
index 6b7b45ab56..0000000000
--- a/tests/js/spec/utils/floatFormat.spec.jsx
+++ /dev/null
@@ -1,12 +0,0 @@
-import floatFormat from 'app/utils/floatFormat';
-
-describe('floatFormat()', function() {
-  it('should format decimals', function() {
-    expect(floatFormat(0, 0)).toBe(0);
-    expect(floatFormat(10.513434, 1)).toBe(10.5);
-    expect(floatFormat(10.513494, 3)).toBe(10.513);
-  });
-  it('should not round', function() {
-    expect(floatFormat(10.513494, 4)).toBe(10.5134);
-  });
-});
diff --git a/tests/js/spec/utils/formatAbbreviatedNumber.spec.jsx b/tests/js/spec/utils/formatters.spec.jsx
similarity index 52%
rename from tests/js/spec/utils/formatAbbreviatedNumber.spec.jsx
rename to tests/js/spec/utils/formatters.spec.jsx
index 71a1ad62db..b52159cb6b 100644
--- a/tests/js/spec/utils/formatAbbreviatedNumber.spec.jsx
+++ b/tests/js/spec/utils/formatters.spec.jsx
@@ -1,4 +1,8 @@
-import formatAbbreviatedNumber from 'app/utils/formatAbbreviatedNumber';
+import {
+  formatFloat,
+  formatAbbreviatedNumber,
+  formatPercentage,
+} from 'app/utils/formatters';
 
 describe('formatAbbreviatedNumber()', function() {
   it('should abbreviate numbers', function() {
@@ -19,3 +23,24 @@ describe('formatAbbreviatedNumber()', function() {
     expect(formatAbbreviatedNumber('1000000000000')).toBe('1000b');
   });
 });
+
+describe('formatFloat()', function() {
+  it('should format decimals', function() {
+    expect(formatFloat(0, 0)).toBe(0);
+    expect(formatFloat(10.513434, 1)).toBe(10.5);
+    expect(formatFloat(10.513494, 3)).toBe(10.513);
+  });
+  it('should not round', function() {
+    expect(formatFloat(10.513494, 4)).toBe(10.5134);
+  });
+});
+
+describe('formatPercentage()', function() {
+  it('should format decimals', function() {
+    expect(formatPercentage(0.0, 0)).toBe('0%');
+    expect(formatPercentage(0.0, 2)).toBe('0%');
+    expect(formatPercentage(0.10513434, 1)).toBe('10.5%');
+    expect(formatPercentage(0.10513494, 3)).toBe('10.513%');
+    expect(formatPercentage(0.10513494, 4)).toBe('10.5135%');
+  });
+});
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index adaf16e215..483de2455a 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -46,7 +46,8 @@ def test_get_json_meta_type():
     assert get_json_meta_type("p75", "number") == "duration"
     assert get_json_meta_type("p95", "number") == "duration"
     assert get_json_meta_type("p99", "number") == "duration"
-    assert get_json_meta_type("apdex_transaction_duration_300", "number") == "number"
+    assert get_json_meta_type("apdex_transaction_duration_300", "number") == "percentage"
+    assert get_json_meta_type("error_rate", "number") == "percentage"
     assert get_json_meta_type("impact_300", "number") == "number"
     assert get_json_meta_type("percentile_transaction_duration_0_95", "number") == "duration"
 
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 761619fc20..0ddb1c88b1 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -1694,7 +1694,8 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
             assert meta["p75"] == "duration"
             assert meta["p95"] == "duration"
             assert meta["percentile_transaction_duration_0_99"] == "duration"
-            assert meta["apdex_300"] == "number"
+            assert meta["apdex_300"] == "percentage"
+            assert meta["error_rate"] == "percentage"
             assert meta["impact"] == "number"
 
             data = response.data["data"]
