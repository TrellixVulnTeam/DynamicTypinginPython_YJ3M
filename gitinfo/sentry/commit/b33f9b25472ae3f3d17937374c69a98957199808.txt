commit b33f9b25472ae3f3d17937374c69a98957199808
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Jul 31 10:05:38 2018 -0700

    feat(health): Add initial Health view (#9133)
    
    Add initial (empty) layout for Health.

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 3b001229f7..649917b6a3 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -490,6 +490,7 @@ function routes() {
               : OrganizationMembers
           }
         />
+
         <Route
           path="new/"
           name="Invite"
@@ -497,6 +498,7 @@ function routes() {
             import(/*webpackChunkName: InviteMember*/ './views/settings/organizationMembers/inviteMember')}
           component={errorHandler(LazyLoad)}
         />
+
         <Route
           path=":memberId/"
           name="Details"
@@ -740,6 +742,19 @@ function routes() {
             component={errorHandler(OrganizationActivity)}
           />
 
+          <Route
+            path="/organizations/:orgId/health/"
+            componentPromise={() =>
+              import(/*webpackChunkName: OrganizationHealth*/ './views/organizationHealth')}
+            component={errorHandler(LazyLoad)}
+          >
+            <IndexRoute
+              componentPromise={() =>
+                import(/*webpackChunkName: HealthOverview*/ './views/organizationHealth/overview')}
+              component={errorHandler(LazyLoad)}
+            />
+          </Route>
+
           <Route
             path="/organizations/:orgId/teams/new/"
             componentPromise={() =>
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/healthNavigationMenu.jsx b/src/sentry/static/sentry/app/views/organizationHealth/healthNavigationMenu.jsx
new file mode 100644
index 0000000000..70bf91856a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationHealth/healthNavigationMenu.jsx
@@ -0,0 +1,71 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t} from 'app/locale';
+import Link from 'app/components/link';
+import SentryTypes from 'app/sentryTypes';
+import space from 'app/styles/space';
+import withLatestContext from 'app/utils/withLatestContext';
+
+const HealthNavigationMenu = styled(
+  withLatestContext(
+    class HealthNavigationMenu extends React.Component {
+      static propTypes = {
+        organization: SentryTypes.Organization,
+      };
+
+      render() {
+        let {className, organization} = this.props;
+        return (
+          <div className={className}>
+            <NavigationGroup title={t('Monitoring')}>
+              <NavItem to={`/organizations/${organization.slug}/health/`}>
+                {t('Overview')}
+              </NavItem>
+            </NavigationGroup>
+          </div>
+        );
+      }
+    }
+  )
+)`
+  border-right: 1px solid ${p => p.theme.borderLight};
+  width: 180px;
+  flex-shrink: 0;
+`;
+
+export default HealthNavigationMenu;
+
+const NavigationGroup = styled(
+  class NavigationGroup extends React.Component {
+    static propTypes = {
+      title: PropTypes.node,
+    };
+
+    render() {
+      let {className, title, children} = this.props;
+      return (
+        <div className={className}>
+          <Title>{title}</Title>
+          {children}
+        </div>
+      );
+    }
+  }
+)`
+  display: flex;
+  flex-direction: column;
+`;
+
+const Title = styled('div')`
+  color: ${p => p.theme.gray1};
+  font-size: 0.9em;
+  padding: ${space(2)};
+  margin-bottom: ${space(0)};
+  text-transform: uppercase;
+`;
+
+const NavItem = styled(Link)`
+  padding: 0 ${space(2)};
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/index.jsx b/src/sentry/static/sentry/app/views/organizationHealth/index.jsx
new file mode 100644
index 0000000000..50489000bd
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationHealth/index.jsx
@@ -0,0 +1,117 @@
+import {Flex} from 'grid-emotion';
+import React from 'react';
+import styled from 'react-emotion';
+
+import Feature from 'app/components/feature';
+import HeaderSeparator from 'app/components/organizations/headerSeparator';
+import MultipleEnvironmentSelector from 'app/components/organizations/multipleEnvironmentSelector';
+import MultipleProjectSelector from 'app/components/organizations/multipleProjectSelector';
+import SentryTypes from 'app/sentryTypes';
+import TimeRangeSelector from 'app/components/organizations/timeRangeSelector';
+import space from 'app/styles/space';
+import withLatestContext from 'app/utils/withLatestContext';
+
+import HealthContext from './util/healthContext';
+import HealthNavigationMenu from './healthNavigationMenu';
+
+class OrganizationHealth extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization,
+  };
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      params: {
+        projects: [],
+        environments: [],
+        period: '7d',
+      },
+    };
+  }
+
+  updateParams = obj => {
+    this.setState(state => ({
+      ...state,
+      params: {
+        ...state.params,
+        ...obj,
+      },
+    }));
+  };
+
+  handleChangeProjects = projects => {
+    this.updateParams({projects});
+  };
+
+  handleChangeEnvironments = environments => {
+    this.updateParams({environments});
+  };
+
+  handleChangeTime = period => {
+    this.updateParams({period});
+  };
+
+  render() {
+    let {organization, children} = this.props;
+
+    // TODO(billy): Is this what we want, only projects user is member of?
+    let projects = organization.projects.filter(({isMember}) => isMember);
+
+    return (
+      <Feature feature={['health']} renderNoFeatureMessage>
+        <HealthContext.Provider value={this.state.params}>
+          <HealthWrapper>
+            <HealthNavigationMenu />
+            <Content>
+              <Header>
+                <MultipleProjectSelector
+                  projects={projects}
+                  value={this.state.params.projects}
+                  onChange={this.handleChangeProjects}
+                />
+                <HeaderSeparator />
+                <MultipleEnvironmentSelector
+                  organization={organization}
+                  value={this.state.params.environments}
+                  onChange={this.handleChangeEnvironments}
+                />
+                <HeaderSeparator />
+                <TimeRangeSelector
+                  absolute={false}
+                  relative
+                  value={this.state.params.period}
+                  onChange={this.handleChangeTime}
+                />
+              </Header>
+              <Body>{children}</Body>
+            </Content>
+          </HealthWrapper>
+        </HealthContext.Provider>
+      </Feature>
+    );
+  }
+}
+
+export default withLatestContext(OrganizationHealth);
+export {OrganizationHealth};
+
+const HealthWrapper = styled(Flex)`
+  flex: 1;
+  margin-bottom: -20px; /* <footer> has margin-top: 20px; */
+`;
+const Content = styled(Flex)`
+  flex-direction: column;
+  flex: 1;
+  overflow: hidden;
+`;
+
+const Header = styled(Flex)`
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+  font-size: 18px;
+`;
+
+const Body = styled('div')`
+  flex: 1;
+  padding: ${space(3)};
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/overview.jsx b/src/sentry/static/sentry/app/views/organizationHealth/overview.jsx
new file mode 100644
index 0000000000..cd41010ee4
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationHealth/overview.jsx
@@ -0,0 +1,9 @@
+import React from 'react';
+
+class OrganizationHealthOverview extends React.Component {
+  render() {
+    return <div>Overview</div>;
+  }
+}
+
+export default OrganizationHealthOverview;
diff --git a/tests/acceptance/test_health.py b/tests/acceptance/test_health.py
new file mode 100644
index 0000000000..2dde0fcf84
--- /dev/null
+++ b/tests/acceptance/test_health.py
@@ -0,0 +1,40 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class HealthTest(AcceptanceTestCase):
+    def setUp(self):
+        super(HealthTest, self).setUp()
+        self.user = self.create_user('foo@example.com')
+        self.org = self.create_organization(
+            name='Rowdy Tiger Rowdy Tiger',
+            owner=None,
+        )
+        self.team = self.create_team(organization=self.org, name='Mariachi Band Mariachi Band')
+        self.project = self.create_project(
+            organization=self.org,
+            teams=[self.team],
+            name='Bengal',
+        )
+
+        self.create_member(
+            user=self.user,
+            organization=self.org,
+            role='owner',
+            teams=[self.team],
+        )
+
+        self.login_as(self.user)
+        self.path = '/organizations/{}/health'.format(self.org.slug)
+
+    def test_overview_without_feature_flag(self):
+        self.browser.get('{}/'.format(self.path))
+        self.browser.wait_until_not('.loading-indicator')
+        self.browser.snapshot('health overview - no permissions')
+
+    def test_overview(self):
+        with self.feature('organizations:health'):
+            self.browser.get('{}/'.format(self.path))
+            self.browser.wait_until_not('.loading-indicator')
+            self.browser.snapshot('health overview')
diff --git a/tests/js/spec/views/organizationHealth/__snapshots__/overview.spec.jsx.snap b/tests/js/spec/views/organizationHealth/__snapshots__/overview.spec.jsx.snap
new file mode 100644
index 0000000000..3d29b27357
--- /dev/null
+++ b/tests/js/spec/views/organizationHealth/__snapshots__/overview.spec.jsx.snap
@@ -0,0 +1,9 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`OrganizationHealthOverview renders 1`] = `
+<OrganizationHealthOverview>
+  <div>
+    Overview
+  </div>
+</OrganizationHealthOverview>
+`;
diff --git a/tests/js/spec/views/organizationHealth/index.spec.jsx b/tests/js/spec/views/organizationHealth/index.spec.jsx
new file mode 100644
index 0000000000..d523ae3764
--- /dev/null
+++ b/tests/js/spec/views/organizationHealth/index.spec.jsx
@@ -0,0 +1,52 @@
+import React from 'react';
+
+import {OrganizationHealth} from 'app/views/organizationHealth';
+import {mount} from 'enzyme';
+import {setActiveOrganization} from 'app/actionCreators/organizations';
+
+import {selectByLabel} from '../../../helpers/select';
+
+describe('OrganizationHealth', function() {
+  let wrapper;
+  const project = TestStubs.Project({isMember: true});
+  const organization = TestStubs.Organization({
+    features: ['health'],
+    projects: [project],
+  });
+
+  beforeAll(async function() {
+    MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/environments/`,
+      body: TestStubs.Environments(),
+    });
+
+    setActiveOrganization(organization);
+    await tick();
+
+    wrapper = mount(
+      <OrganizationHealth organization={organization}>
+        <div />
+      </OrganizationHealth>,
+      TestStubs.routerContext([
+        {
+          organization,
+        },
+      ])
+    );
+  });
+
+  it('renders', function() {
+    expect(wrapper.find('HealthWrapper')).toHaveLength(1);
+  });
+
+  it('changes environments', async function() {
+    wrapper.find('MultipleEnvironmentSelector .dropdown-actor').simulate('click');
+    await tick();
+    wrapper.update();
+
+    selectByLabel(wrapper, 'production', {control: true, name: 'environments'});
+    expect(wrapper.state('params').environments).toEqual(['production']);
+    selectByLabel(wrapper, 'staging', {control: true, name: 'environments'});
+    expect(wrapper.state('params').environments).toEqual(['production', 'staging']);
+  });
+});
diff --git a/tests/js/spec/views/organizationHealth/overview.spec.jsx b/tests/js/spec/views/organizationHealth/overview.spec.jsx
new file mode 100644
index 0000000000..27b32eafdd
--- /dev/null
+++ b/tests/js/spec/views/organizationHealth/overview.spec.jsx
@@ -0,0 +1,11 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import OrganizationHealthOverview from 'app/views/organizationHealth/overview';
+
+describe('OrganizationHealthOverview', function() {
+  it('renders', function() {
+    let wrapper = mount(<OrganizationHealthOverview />);
+    expect(wrapper).toMatchSnapshot();
+  });
+});
