commit 9e7aa82ae871d044292920518fefbdc6eaba180b
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Oct 14 15:26:33 2019 -0700

    ref(ts): Convert ConfigStore to TypeScript (#15075)
    
    Also fixes the config features and permissions types which should be
    sets instead of arrays.

diff --git a/src/sentry/static/sentry/app/stores/configStore.jsx b/src/sentry/static/sentry/app/stores/configStore.tsx
similarity index 73%
rename from src/sentry/static/sentry/app/stores/configStore.jsx
rename to src/sentry/static/sentry/app/stores/configStore.tsx
index fad536777f..6aaab52af0 100644
--- a/src/sentry/static/sentry/app/stores/configStore.jsx
+++ b/src/sentry/static/sentry/app/stores/configStore.tsx
@@ -2,28 +2,29 @@ import moment from 'moment-timezone';
 import Reflux from 'reflux';
 import qs from 'query-string';
 import {setLocale} from 'app/locale';
+import {Config} from 'app/types';
 
 const ConfigStore = Reflux.createStore({
-  init() {
+  init(): void {
     this.config = {};
   },
 
-  get(key) {
+  get(key: string): any {
     return this.config[key];
   },
 
-  set(key, value) {
+  set(key: string, value: any): void {
     this.config[key] = value;
     const out = {};
     out[key] = value;
     this.trigger(out);
   },
 
-  getConfig() {
+  getConfig(): Config {
     return this.config;
   },
 
-  loadInitialData(config) {
+  loadInitialData(config): void {
     config.features = new Set(config.features || []);
     this.config = config;
 
@@ -35,7 +36,7 @@ const ConfigStore = Reflux.createStore({
       config.user.permissions = new Set(config.user.permissions);
       moment.tz.setDefault(config.user.options.timezone);
 
-      let queryString = {};
+      let queryString: qs.ParsedQuery = {};
 
       // Parse query string for `lang`
       try {
@@ -46,7 +47,13 @@ const ConfigStore = Reflux.createStore({
         // e.g. unencoded "%"
       }
 
-      languageCode = queryString.lang || config.user.options.language || languageCode;
+      let queryStringLang = queryString.lang;
+
+      if (Array.isArray(queryStringLang)) {
+        queryStringLang = queryStringLang[0];
+      }
+
+      languageCode = queryStringLang || config.user.options.language || languageCode;
     }
 
     // Priority:
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 97bdcf1fb5..e3fb4defa7 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -190,7 +190,7 @@ export type User = {
   avatar: {avatarUuid: string | null; avatarType: 'letter_avatar' | 'upload'};
   ip_address: string;
   hasPasswordAuth: boolean;
-  permissions: string[];
+  permissions: Set<string>;
   email: string;
 };
 
@@ -250,7 +250,7 @@ type Authenticator = {
 export type Config = {
   languageCode: string;
   csrfCookieName: string;
-  features: string[];
+  features: Set<string>;
   singleOrganization: boolean;
   urlPrefix: string;
   needsUpgrade: boolean;
