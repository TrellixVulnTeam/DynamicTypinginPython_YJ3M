commit 449f08ade1545ecdb0dfb7653141e22cbdf53c54
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Wed Jun 13 09:30:18 2018 -0700

    feat(api): Add ability to delete/disconnect external issues (#8636)

diff --git a/src/sentry/api/endpoints/group_integration_details.py b/src/sentry/api/endpoints/group_integration_details.py
index f87bd90641..793988b5f4 100644
--- a/src/sentry/api/endpoints/group_integration_details.py
+++ b/src/sentry/api/endpoints/group_integration_details.py
@@ -9,7 +9,7 @@ from sentry.api.serializers import serialize
 from sentry.api.serializers.models.integration import IntegrationIssueConfigSerializer
 from sentry.integrations import IntegrationFeatures
 from sentry.integrations.exceptions import IntegrationError
-from sentry.models import ExternalIssue, GroupLink, OrganizationIntegration
+from sentry.models import ExternalIssue, GroupLink, Integration
 
 
 class GroupIntegrationDetailsEndpoint(GroupEndpoint):
@@ -23,13 +23,12 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
 
         organization_id = group.project.organization_id
         try:
-            # check org permissions
             # TODO(jess): should this eventually check ProjectIntegration?
-            integration = OrganizationIntegration.objects.filter(
-                integration_id=integration_id,
-                organization_id=organization_id,
-            ).select_related('integration').get().integration
-        except OrganizationIntegration.DoesNotExist:
+            integration = Integration.objects.get(
+                id=integration_id,
+                organizations=organization_id,
+            )
+        except Integration.DoesNotExist:
             return Response(status=404)
 
         if not integration.has_feature(IntegrationFeatures.ISSUE_SYNC):
@@ -53,13 +52,12 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
 
         organization_id = group.project.organization_id
         try:
-            # check org permissions
             # TODO(jess): should this eventually check ProjectIntegration?
-            integration = OrganizationIntegration.objects.filter(
-                integration_id=integration_id,
-                organization_id=organization_id,
-            ).select_related('integration').get().integration
-        except OrganizationIntegration.DoesNotExist:
+            integration = Integration.objects.get(
+                id=integration_id,
+                organizations=organization_id,
+            )
+        except Integration.DoesNotExist:
             return Response(status=404)
 
         if not integration.has_feature(IntegrationFeatures.ISSUE_SYNC):
@@ -105,13 +103,12 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
     def post(self, request, group, integration_id):
         organization_id = group.project.organization_id
         try:
-            # check org permissions
             # TODO(jess): should this eventually check ProjectIntegration?
-            integration = OrganizationIntegration.objects.filter(
-                integration_id=integration_id,
-                organization_id=organization_id,
-            ).select_related('integration').get().integration
-        except OrganizationIntegration.DoesNotExist:
+            integration = Integration.objects.get(
+                id=integration_id,
+                organizations=organization_id,
+            )
+        except Integration.DoesNotExist:
             return Response(status=404)
 
         if not integration.has_feature(IntegrationFeatures.ISSUE_SYNC):
@@ -148,3 +145,51 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
 
         # TODO(jess): return serialized issue
         return Response(status=201)
+
+    def delete(self, request, group, integration_id):
+        # note here externalIssue refers to `ExternalIssue.id` wheras above
+        # it refers to the id from the provider
+        external_issue_id = request.GET.get('externalIssue')
+        if not external_issue_id:
+            return Response({'detail': 'External ID required'}, status=400)
+
+        organization_id = group.project.organization_id
+        try:
+            integration = Integration.objects.get(
+                id=integration_id,
+                organizations=organization_id,
+            )
+        except Integration.DoesNotExist:
+            return Response(status=404)
+
+        if not integration.has_feature(IntegrationFeatures.ISSUE_SYNC):
+            return Response(
+                {'detail': 'This feature is not supported for this integration.'}, status=400)
+
+        try:
+            external_issue = ExternalIssue.objects.get(
+                organization_id=organization_id,
+                integration_id=integration.id,
+                id=external_issue_id,
+            )
+        except ExternalIssue.DoesNotExist:
+            return Response(status=404)
+
+        with transaction.atomic():
+            GroupLink.objects.filter(
+                group_id=group.id,
+                project_id=group.project_id,
+                linked_type=GroupLink.LinkedType.issue,
+                linked_id=external_issue_id,
+                relationship=GroupLink.Relationship.references,
+            ).delete()
+
+            # check if other groups reference this external issue
+            # and delete if not
+            if not GroupLink.objects.filter(
+                linked_type=GroupLink.LinkedType.issue,
+                linked_id=external_issue_id,
+            ).exists():
+                external_issue.delete()
+
+        return Response(status=204)
diff --git a/tests/sentry/api/endpoints/test_group_integration_details.py b/tests/sentry/api/endpoints/test_group_integration_details.py
index d68c5f7322..3ddbbe9286 100644
--- a/tests/sentry/api/endpoints/test_group_integration_details.py
+++ b/tests/sentry/api/endpoints/test_group_integration_details.py
@@ -144,3 +144,37 @@ class GroupIntegrationDetailsTest(APITestCase):
             group_id=group.id,
             linked_id=external_issue.id,
         ).exists()
+
+    def test_simple_delete(self):
+        self.login_as(user=self.user)
+        org = self.organization
+        group = self.create_group()
+        integration = Integration.objects.create(
+            provider='example',
+            name='Example',
+        )
+        integration.add_organization(org.id)
+
+        external_issue = ExternalIssue.objects.get_or_create(
+            organization_id=org.id,
+            integration_id=integration.id,
+            key='APP-123',
+        )[0]
+
+        group_link = GroupLink.objects.get_or_create(
+            group_id=group.id,
+            project_id=group.project_id,
+            linked_type=GroupLink.LinkedType.issue,
+            linked_id=external_issue.id,
+            relationship=GroupLink.Relationship.references,
+        )[0]
+
+        path = '/api/0/issues/{}/integrations/{}/?externalIssue={}'.format(
+            group.id, integration.id, external_issue.id,
+        )
+
+        response = self.client.delete(path)
+
+        assert response.status_code == 204
+        assert not ExternalIssue.objects.filter(id=external_issue.id).exists()
+        assert not GroupLink.objects.filter(id=group_link.id).exists()
