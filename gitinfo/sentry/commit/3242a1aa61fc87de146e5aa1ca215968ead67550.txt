commit 3242a1aa61fc87de146e5aa1ca215968ead67550
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Jan 16 11:54:50 2019 -0800

    ref(ui): Remove GroupState (#11545)
    
    Remove all usage of GroupState. Since we're moving to
    organization level views, this mixin won't be useful anymore.

diff --git a/src/sentry/static/sentry/app/components/events/eventAttachments.jsx b/src/sentry/static/sentry/app/components/events/eventAttachments.jsx
index d0c81cb92b..477e4a90bd 100644
--- a/src/sentry/static/sentry/app/components/events/eventAttachments.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventAttachments.jsx
@@ -5,7 +5,6 @@ import {Box} from 'grid-emotion';
 
 import ApiMixin from 'app/mixins/apiMixin';
 import FileSize from 'app/components/fileSize';
-import GroupState from 'app/mixins/groupState';
 
 import {t} from 'app/locale';
 
@@ -20,7 +19,7 @@ export default createReactClass({
     projectId: PropTypes.string.isRequired,
   },
 
-  mixins: [ApiMixin, GroupState],
+  mixins: [ApiMixin],
 
   getInitialState() {
     return {attachmentList: undefined, expanded: false};
diff --git a/src/sentry/static/sentry/app/components/events/eventCause.jsx b/src/sentry/static/sentry/app/components/events/eventCause.jsx
index bfdc89a94b..37df884a97 100644
--- a/src/sentry/static/sentry/app/components/events/eventCause.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventCause.jsx
@@ -5,7 +5,6 @@ import {uniqBy, flatMap} from 'lodash';
 import styled from 'react-emotion';
 
 import ApiMixin from 'app/mixins/apiMixin';
-import GroupState from 'app/mixins/groupState';
 import CommitRow from 'app/components/commitRow';
 import InlineSvg from 'app/components/inlineSvg';
 
@@ -29,7 +28,7 @@ export default createReactClass({
     projectId: PropTypes.string.isRequired,
   },
 
-  mixins: [ApiMixin, GroupState],
+  mixins: [ApiMixin],
 
   getInitialState() {
     return {committers: undefined, expanded: false};
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index bf799d1762..756ac8587e 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -1,8 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
-import createReactClass from 'create-react-class';
-
 import {analytics} from 'app/utils/analytics';
 import {logException} from 'app/utils/logging';
 import EventAttachments from 'app/components/events/eventAttachments';
@@ -18,8 +16,8 @@ import EventSdk from 'app/components/events/sdk';
 import EventDevice from 'app/components/events/device';
 import EventUserFeedback from 'app/components/events/userFeedback';
 import SentryTypes from 'app/sentryTypes';
-import GroupState from 'app/mixins/groupState';
 import utils from 'app/utils';
+import withOrganization from 'app/utils/withOrganization';
 import {t} from 'app/locale';
 
 import ExceptionInterface from 'app/components/events/interfaces/exception';
@@ -48,10 +46,9 @@ export const INTERFACES = {
   debugmeta: DebugMetaInterface,
 };
 
-const EventEntries = createReactClass({
-  displayName: 'EventEntries',
-
-  propTypes: {
+class EventEntries extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization.isRequired,
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     orgId: PropTypes.string.isRequired,
@@ -59,15 +56,11 @@ const EventEntries = createReactClass({
     // TODO(dcramer): ideally isShare would be replaced with simple permission
     // checks
     isShare: PropTypes.bool,
-  },
+  };
 
-  mixins: [GroupState],
-
-  getDefaultProps() {
-    return {
-      isShare: false,
-    };
-  },
+  static defaultProps = {
+    isShare: false,
+  };
 
   componentDidMount() {
     let {event} = this.props;
@@ -78,15 +71,15 @@ const EventEntries = createReactClass({
     let errorMessages = errors.map(errorEntries => errorEntries.message);
 
     this.recordIssueError(errorTypes, errorMessages);
-  },
+  }
 
   shouldComponentUpdate(nextProps, nextState) {
     return this.props.event.id !== nextProps.event.id;
-  },
+  }
 
   recordIssueError(errorTypes, errorMessages) {
-    let {project, event} = this.props;
-    let orgId = this.getOrganization().id;
+    let {organization, project, event} = this.props;
+    let orgId = organization.id;
 
     analytics('issue_error_banner.viewed', {
       org_id: parseInt(orgId, 10),
@@ -95,16 +88,14 @@ const EventEntries = createReactClass({
       error_type: errorTypes,
       error_message: errorMessages,
     });
-  },
-
-  interfaces: INTERFACES,
+  }
 
   renderEntries() {
     let {event, group, isShare} = this.props;
 
     return event.entries.map((entry, entryIdx) => {
       try {
-        let Component = this.interfaces[entry.type];
+        let Component = INTERFACES[entry.type];
         if (!Component) {
           /*eslint no-console:0*/
           window.console &&
@@ -136,12 +127,11 @@ const EventEntries = createReactClass({
         );
       }
     });
-  },
+  }
 
   render() {
-    let {group, isShare, project, event, orgId} = this.props;
+    let {organization, group, isShare, project, event, orgId} = this.props;
 
-    let organization = this.getOrganization();
     let features = organization ? new Set(organization.features) : new Set();
 
     let hasContext =
@@ -207,7 +197,7 @@ const EventEntries = createReactClass({
           )}{' '}
       </div>
     );
-  },
-});
+  }
+}
 
-export default EventEntries;
+export default withOrganization(EventEntries);
diff --git a/src/sentry/static/sentry/app/mixins/groupState.jsx b/src/sentry/static/sentry/app/mixins/groupState.jsx
deleted file mode 100644
index 16212249dc..0000000000
--- a/src/sentry/static/sentry/app/mixins/groupState.jsx
+++ /dev/null
@@ -1,16 +0,0 @@
-import SentryTypes from 'app/sentryTypes';
-import ProjectState from 'app/mixins/projectState';
-
-let GroupState = {
-  mixins: [ProjectState],
-
-  contextTypes: {
-    group: SentryTypes.Group.isRequired,
-  },
-
-  getGroup() {
-    return this.context.group;
-  },
-};
-
-export default GroupState;
diff --git a/src/sentry/static/sentry/app/views/groupDetails/project/groupEvents.jsx b/src/sentry/static/sentry/app/views/groupDetails/project/groupEvents.jsx
index 6baec0dead..ad053d8ef8 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/project/groupEvents.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/project/groupEvents.jsx
@@ -15,7 +15,6 @@ import {t, tct} from 'app/locale';
 import ApiMixin from 'app/mixins/apiMixin';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import EventsTable from 'app/components/eventsTable/eventsTable';
-import GroupState from 'app/mixins/groupState';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import Pagination from 'app/components/pagination';
@@ -28,10 +27,11 @@ const GroupEvents = createReactClass({
   displayName: 'GroupEvents',
 
   propTypes: {
+    group: SentryTypes.Group,
     environment: SentryTypes.Environment,
   },
 
-  mixins: [ApiMixin, GroupState],
+  mixins: [ApiMixin],
 
   getInitialState() {
     const queryParams = this.props.location.query;
@@ -177,7 +177,7 @@ const GroupEvents = createReactClass({
   },
 
   renderResults() {
-    let group = this.getGroup();
+    let group = this.props.group;
     let tagList = group.tags.filter(tag => tag.key !== 'user') || [];
 
     return (
diff --git a/src/sentry/static/sentry/app/views/groupDetails/project/groupTags.jsx b/src/sentry/static/sentry/app/views/groupDetails/project/groupTags.jsx
index 0f5aa66ebc..3b637fa7dd 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/project/groupTags.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/project/groupTags.jsx
@@ -7,7 +7,7 @@ import SentryTypes from 'app/sentryTypes';
 import ApiMixin from 'app/mixins/apiMixin';
 import Count from 'app/components/count';
 import DeviceName from 'app/components/deviceName';
-import GroupState from 'app/mixins/groupState';
+import ProjectState from 'app/mixins/projectState';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import {percent} from 'app/utils';
@@ -20,10 +20,11 @@ const GroupTags = createReactClass({
   displayName: 'GroupTags',
 
   propTypes: {
+    group: SentryTypes.Group,
     environment: SentryTypes.Environment,
   },
 
-  mixins: [ApiMixin, GroupState],
+  mixins: [ApiMixin, ProjectState],
 
   getInitialState() {
     return {
@@ -57,7 +58,7 @@ const GroupTags = createReactClass({
 
     // TODO(dcramer): each tag should be a separate query as the tags endpoint
     // is not performant
-    this.api.request('/issues/' + this.getGroup().id + '/tags/', {
+    this.api.request('/issues/' + this.props.group.id + '/tags/', {
       query,
       success: data => {
         this.setState({
@@ -90,7 +91,7 @@ const GroupTags = createReactClass({
 
     let orgId = this.getOrganization().slug;
     let projectId = this.getProject().slug;
-    let groupId = this.getGroup().id;
+    let groupId = this.props.group.id;
 
     if (this.state.tagList) {
       children = this.state.tagList.map((tag, tagIdx) => {
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupActivity.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupActivity.jsx
index d8bdd19b0d..5efe7e8137 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupActivity.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupActivity.jsx
@@ -14,7 +14,6 @@ import CommitLink from 'app/components/commitLink';
 import ConfigStore from 'app/stores/configStore';
 import Duration from 'app/components/duration';
 import ErrorBoundary from 'app/components/errorBoundary';
-import GroupState from 'app/mixins/groupState';
 import GroupStore from 'app/stores/groupStore';
 import MemberListStore from 'app/stores/memberListStore';
 import NoteContainer from 'app/components/activity/noteContainer';
@@ -212,7 +211,7 @@ const GroupActivity = createReactClass({
     group: PropTypes.object,
   },
 
-  mixins: [GroupState, ApiMixin],
+  mixins: [ApiMixin],
 
   onNoteDelete(item) {
     let {group} = this.props;
diff --git a/tests/js/spec/views/groupDetails/projectGroupEvents.spec.jsx b/tests/js/spec/views/groupDetails/projectGroupEvents.spec.jsx
index 946be5883d..774b7506ef 100644
--- a/tests/js/spec/views/groupDetails/projectGroupEvents.spec.jsx
+++ b/tests/js/spec/views/groupDetails/projectGroupEvents.spec.jsx
@@ -18,11 +18,12 @@ describe('groupEvents', function() {
   it('renders', function() {
     const component = shallow(
       <GroupEvents
+        group={TestStubs.Group()}
         params={{orgId: 'orgId', projectId: 'projectId', groupId: '1'}}
         location={{query: {}}}
       />,
       {
-        context: {...TestStubs.router(), group: TestStubs.Group()},
+        context: TestStubs.router(),
         childContextTypes: {
           router: PropTypes.object,
         },
@@ -35,11 +36,12 @@ describe('groupEvents', function() {
   it('handles search', function() {
     const component = shallow(
       <GroupEvents
+        group={TestStubs.Group()}
         params={{orgId: 'orgId', projectId: 'projectId', groupId: '1'}}
         location={{query: {}}}
       />,
       {
-        context: {...TestStubs.router(), group: TestStubs.Group()},
+        context: TestStubs.router(),
         childContextTypes: {
           router: PropTypes.object,
         },
@@ -67,12 +69,13 @@ describe('groupEvents', function() {
     beforeEach(function() {
       component = shallow(
         <GroupEvents
+          group={TestStubs.Group()}
           params={{orgId: 'orgId', projectId: 'projectId', groupId: '1'}}
           location={{query: {}}}
           environment={TestStubs.Environments()[0]}
         />,
         {
-          context: {...TestStubs.router(), group: TestStubs.Group()},
+          context: TestStubs.router(),
           childContextTypes: {
             router: PropTypes.object,
           },
