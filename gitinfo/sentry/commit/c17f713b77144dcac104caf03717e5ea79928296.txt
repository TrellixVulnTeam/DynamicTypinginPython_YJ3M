commit c17f713b77144dcac104caf03717e5ea79928296
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Fri Jul 20 14:51:44 2018 -0700

    feat(integrations): Vsts Repository Setup Flow (#9041)
    
    * Added repo mixin
    
    * added the repos more explicitly to that call.
    
    * Added repo stuff.
    
    * added reinstall.
    
    * Added return
    
    * Addd beginning changes to validate config
    
    * Just getting things working.
    
    * Added my previous changes.
    
    * finished repo setup
    
    * Fixed test
    
    * Removed bitbucket changes.
    
    * Fixed docstring, removed integrations from old repo page, removed backticks
    
    * removed has_github flag.

diff --git a/src/sentry/api/endpoints/organization_config_repositories.py b/src/sentry/api/endpoints/organization_config_repositories.py
index e59cad8110..6ad7946051 100644
--- a/src/sentry/api/endpoints/organization_config_repositories.py
+++ b/src/sentry/api/endpoints/organization_config_repositories.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
-from sentry import features
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.plugins import bindings
 
@@ -11,23 +10,12 @@ class OrganizationConfigRepositoriesEndpoint(OrganizationEndpoint):
 
     def get(self, request, organization):
         provider_bindings = bindings.get('repository.provider')
-        integrations_provider_bindings = bindings.get('integration-repository.provider')
-        has_catchall = features.has(
-            'organizations:internal-catchall',
-            organization,
-            actor=request.user)
-        has_github_apps = features.has('organizations:github-apps',
-                                       organization,
-                                       actor=request.user)
-
         providers = []
         for provider_id in provider_bindings:
             provider = provider_bindings.get(provider_id)(id=provider_id)
             # TODO(jess): figure out better way to exclude this
             if provider_id == 'github_apps':
                 continue
-            if has_github_apps and provider_id == 'github':
-                continue
             providers.append(
                 {
                     'id': provider_id,
@@ -36,17 +24,6 @@ class OrganizationConfigRepositoriesEndpoint(OrganizationEndpoint):
                 }
             )
 
-        for provider_id in integrations_provider_bindings:
-            provider = integrations_provider_bindings.get(provider_id)(id=provider_id)
-            if has_catchall or (has_github_apps and provider_id == 'integrations:github'):
-                providers.append(
-                    {
-                        'id': provider_id,
-                        'name': provider.name,
-                        'config': provider.get_config(organization),
-                    }
-                )
-
         return Response({
             'providers': providers,
         })
diff --git a/src/sentry/integrations/repositories.py b/src/sentry/integrations/repositories.py
index 3a0b172401..89e3356574 100644
--- a/src/sentry/integrations/repositories.py
+++ b/src/sentry/integrations/repositories.py
@@ -14,8 +14,8 @@ class RepositoryMixin(object):
         >>>     return self.get_client().get_repositories()
 
         return [{
-            'name': 'repo_name',
-            'full_name': 'account_name/repo_name',
+            'name': display_name,
+            'identifier': external_repo_id,
         }]
         """
         raise NotImplementedError
diff --git a/src/sentry/integrations/vsts/client.py b/src/sentry/integrations/vsts/client.py
index 16c6337a42..57548409bb 100644
--- a/src/sentry/integrations/vsts/client.py
+++ b/src/sentry/integrations/vsts/client.py
@@ -22,7 +22,8 @@ class VstsApiPath(object):
     commits_changes = u'https://{account_name}/DefaultCollection/_apis/git/repositories/{repo_id}/commits/{commit_id}/changes'
     delete = 'https://{account_name}/_apis/hooks/subscriptions/{subscription_id}'
     projects = u'https://{account_name}/DefaultCollection/_apis/projects'
-    repositories = u'https://{account_name}/DefaultCollection/{project}_apis/git/repositories/{repo_id}'
+    repository = u'https://{account_name}/DefaultCollection/{project}_apis/git/repositories/{repo_id}'
+    repositories = u'https://{account_name}/{project}/_apis/git/repositories'
     subscriptions = u'https://{account_name}/_apis/hooks/subscriptions'
     work_items = u'https://{account_name}/DefaultCollection/_apis/wit/workitems/{id}'
     work_items_create = u'https://{account_name}/{project}/_apis/wit/workitems/${type}'
@@ -167,13 +168,21 @@ class VstsApiClient(ApiClient, OAuth2RefreshMixin):
 
     def get_repo(self, instance, name_or_id, project=None):
         return self.get(
-            VstsApiPath.repositories.format(
+            VstsApiPath.repository.format(
                 account_name=instance,
                 project='{}/'.format(project) if project else '',
                 repo_id=name_or_id,
             ),
         )
 
+    def get_repos(self, instance, project=None):
+        return self.get(
+            VstsApiPath.repositories.format(
+                account_name=instance,
+                project='{}/'.format(project) if project else '',
+            ),
+        )
+
     def get_commits(self, instance, repo_id, commit, limit=100):
         return self.get(
             VstsApiPath.commits.format(
diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index 000240b2ea..bbcbf676a7 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -9,6 +9,7 @@ from sentry import http
 from sentry.models import Integration as IntegrationModel
 from sentry.integrations import Integration, IntegrationFeatures, IntegrationProvider, IntegrationMetadata
 from sentry.integrations.exceptions import ApiError
+from sentry.integrations.repositories import RepositoryMixin
 from sentry.integrations.vsts.issues import VstsIssueSync
 from sentry.pipeline import NestedPipelineView
 from sentry.identity.pipeline import IdentityProviderPipeline
@@ -33,13 +34,29 @@ metadata = IntegrationMetadata(
 )
 
 
-class VstsIntegration(Integration, VstsIssueSync):
+class VstsIntegration(Integration, RepositoryMixin, VstsIssueSync):
     logger = logging.getLogger('sentry.integrations')
 
     def __init__(self, *args, **kwargs):
         super(VstsIntegration, self).__init__(*args, **kwargs)
         self.default_identity = None
 
+    def reinstall(self):
+        self.reinstall_repositories()
+
+    def get_repositories(self):
+        try:
+            repos = self.get_client().get_repos(self.instance)
+        except ApiError:
+            repos = []
+        data = []
+        for repo in repos['value']:
+            data.append({
+                'name': '%s\%s' % (repo['project']['name'], repo['name']),
+                'identifier': repo['id'],
+            })
+        return data
+
     def get_client(self):
         if self.default_identity is None:
             self.default_identity = self.get_default_identity()
@@ -137,7 +154,7 @@ class VstsIntegrationProvider(IntegrationProvider):
     oauth_redirect_url = '/extensions/vsts/setup/'
     needs_default_identity = True
     integration_cls = VstsIntegration
-    features = frozenset([IntegrationFeatures.ISSUE_SYNC])
+    features = frozenset([IntegrationFeatures.ISSUE_SYNC, IntegrationFeatures.COMMITS])
 
     setup_dialog_config = {
         'width': 600,
diff --git a/src/sentry/integrations/vsts/repository.py b/src/sentry/integrations/vsts/repository.py
index 9e21e69869..b6eb88b9f9 100644
--- a/src/sentry/integrations/vsts/repository.py
+++ b/src/sentry/integrations/vsts/repository.py
@@ -3,7 +3,6 @@ from __future__ import absolute_import
 import six
 
 from sentry.plugins import providers
-from six.moves.urllib.parse import urlparse
 from sentry.models import Integration
 
 MAX_COMMIT_DATA_REQUESTS = 90
@@ -23,62 +22,24 @@ class VstsRepositoryProvider(providers.IntegrationRepositoryProvider):
 
         return integration_model.get_installation(organization_id)
 
-    def get_config(self, organization):
-        choices = []
-        for i in Integration.objects.filter(organizations=organization, provider='vsts'):
-            choices.append((i.id, i.name))
+    def validate_config(self, organization, config):
+        installation = self.get_installation(config['installation'], organization.id)
+        client = installation.get_client()
+        instance = installation.instance
 
-        if not choices:
-            choices = [('', '')]
-        return [
-            {
-                'name': 'integration_id',
-                'label': 'Visual Studio Installation',
-                'type': 'choice',
-                'choices': choices,
-                'initial': choices[0][0],
-                'help': 'Select which %s integration to authenticate with.' % self.name,
-                'required': True,
-            },
-            {
-                'name': 'url',
-                'label': 'Repository URL',
-                'type': 'text',
-                'placeholder': 'e.g. https://example.visualstudio.com/_git/MyFirstProject',
-                'required': True,
-            },
-            {
-                'name': 'project',
-                'label': 'Project Name',
-                'type': 'text',
-                'placeholder': 'e.g. MyFirstProject',
-                'help': 'Optional project name if it does not match the repository name',
-                'required': False,
-            }
-        ]
+        repo_id = config['identifier']
 
-    def validate_config(self, organization, config):
-        if config.get('url'):
-            installation = self.get_installation(config['integration_id'], organization.id)
-            client = installation.get_client()
-
-            # parse out the repo name and the instance
-            parts = urlparse(config['url'])
-            instance = parts.netloc
-            name = parts.path.rsplit('_git/', 1)[-1]
-            project = config.get('project') or name
-
-            try:
-                repo = client.get_repo(instance, name, project)
-            except Exception as e:
-                installation.raise_error(e)
-            config.update({
-                'instance': instance,
-                'project': project,
-                'name': repo['name'],
-                'external_id': six.text_type(repo['id']),
-                'url': repo['_links']['web']['href'],
-            })
+        try:
+            repo = client.get_repo(instance, repo_id)
+        except Exception as e:
+            installation.raise_error(e)
+        config.update({
+            'instance': instance,
+            'project': repo['project']['name'],
+            'name': repo['name'],
+            'external_id': six.text_type(repo['id']),
+            'url': repo['_links']['web']['href'],
+        })
         return config
 
     def create_repository(self, organization, data):
@@ -91,7 +52,7 @@ class VstsRepositoryProvider(providers.IntegrationRepositoryProvider):
                 'project': data['project'],
                 'name': data['name'],
             },
-            'integration_id': data['integration_id'],
+            'integration_id': data['installation'],
         }
 
     def transform_changes(self, patch_set):
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
index 5d2b857abd..203e256d22 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
@@ -71,7 +71,7 @@ export default class IntegrationRepos extends AsyncComponent {
     this.api.request(`/organizations/${orgId}/repos/`, {
       data: {
         installation: integration.id,
-        name: selection.value,
+        identifier: selection.value,
         provider: `integrations:${integration.provider.key}`,
       },
       method: 'POST',
@@ -148,8 +148,8 @@ export default class IntegrationRepos extends AsyncComponent {
     let repositories = this.state.integrationRepos.repos;
     let items = (repositories || []).map(repo => {
       return {
-        searchKey: `${repo.name}`,
-        value: `${repo.full_name}`,
+        searchKey: repo.name,
+        value: repo.identifier,
         label: (
           <StyledListElement>
             <StyledName>{repo.name}</StyledName>
diff --git a/tests/sentry/integrations/vsts/test_repository.py b/tests/sentry/integrations/vsts/test_repository.py
index 2a1e0d1c90..d5a13394bc 100644
--- a/tests/sentry/integrations/vsts/test_repository.py
+++ b/tests/sentry/integrations/vsts/test_repository.py
@@ -90,7 +90,7 @@ class VisualStudioRepositoryProviderTest(TestCase):
             'url': 'https://mbittker.visualstudio.com/_git/MyFirstProject/',
             'instance': 'https://visualstudio.com',
             'project': 'MyFirstProject',
-            'integration_id': integration.id,
+            'installation': integration.id,
         }
         data = self.provider.create_repository(organization, data)
 
