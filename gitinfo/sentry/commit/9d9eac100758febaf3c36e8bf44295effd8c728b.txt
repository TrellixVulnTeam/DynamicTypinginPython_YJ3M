commit 9d9eac100758febaf3c36e8bf44295effd8c728b
Author: James Cunningham <jtcunning@getsentry.com>
Date:   Mon Jul 11 13:07:22 2016 -0700

    Switch log_level_option decorator to take log format also.

diff --git a/src/sentry/runner/commands/devserver.py b/src/sentry/runner/commands/devserver.py
index d58f74f0b0..c366ace742 100644
--- a/src/sentry/runner/commands/devserver.py
+++ b/src/sentry/runner/commands/devserver.py
@@ -8,7 +8,7 @@ sentry.runner.commands.devserver
 from __future__ import absolute_import, print_function
 
 import click
-from sentry.runner.decorators import configuration, log_level_option
+from sentry.runner.decorators import configuration, log_options
 
 
 @click.command()
@@ -16,7 +16,7 @@ from sentry.runner.decorators import configuration, log_level_option
 @click.option('--watchers/--no-watchers', default=True, help='Watch static files and recompile on changes.')
 @click.option('--workers/--no-workers', default=False, help='Run asynchronous workers.')
 @click.argument('bind', default='127.0.0.1:8000', metavar='ADDRESS')
-@log_level_option()
+@log_options()
 @configuration
 def devserver(reload, watchers, workers, bind):
     "Starts a lightweight web server for development."
diff --git a/src/sentry/runner/commands/run.py b/src/sentry/runner/commands/run.py
index 5833896e71..be33f33e97 100644
--- a/src/sentry/runner/commands/run.py
+++ b/src/sentry/runner/commands/run.py
@@ -12,7 +12,7 @@ from multiprocessing import cpu_count
 
 import click
 
-from sentry.runner.decorators import configuration, log_level_option
+from sentry.runner.decorators import configuration, log_options
 
 
 class AddressParamType(click.ParamType):
@@ -56,7 +56,7 @@ def run():
 @click.option('--workers', '-w', default=0, help='The number of worker processes for handling requests.')
 @click.option('--upgrade', default=False, is_flag=True, help='Upgrade before starting.')
 @click.option('--noinput', default=False, is_flag=True, help='Do not prompt the user for input of any kind.')
-@log_level_option()
+@log_options()
 @configuration
 def web(bind, workers, upgrade, noinput):
     "Run web service."
@@ -116,7 +116,7 @@ def smtp(bind, upgrade, noinput):
 @click.option('--quiet', '-q', is_flag=True, default=False)
 @click.option('--no-color', is_flag=True, default=False)
 @click.option('--autoreload', is_flag=True, default=False, help='Enable autoreloading.')
-@log_level_option()
+@log_options()
 @configuration
 def worker(**options):
     "Run background worker instance."
@@ -152,7 +152,7 @@ def worker(**options):
 @click.option('--quiet', '-q', is_flag=True, default=False)
 @click.option('--no-color', is_flag=True, default=False)
 @click.option('--autoreload', is_flag=True, default=False, help='Enable autoreloading.')
-@log_level_option()
+@log_options()
 @configuration
 def cron(**options):
     "Run periodic task dispatcher."
diff --git a/src/sentry/runner/decorators.py b/src/sentry/runner/decorators.py
index 698de7bb96..763d9440ae 100644
--- a/src/sentry/runner/decorators.py
+++ b/src/sentry/runner/decorators.py
@@ -36,20 +36,31 @@ def configuration(f):
     return update_wrapper(inner, f)
 
 
-def log_level_option(default=None):
+def log_options(default=None):
     def decorator(f):
-        "Give ability to configure global logging level. Must be used before configuration."
+        """
+        Give ability to configure global logging level/format.
+        Must be used before configuration.
+        """
         import click
         from functools import update_wrapper
+        from sentry.logging import LoggingFormat
+        formats = [LoggingFormat.HUMAN.upper(), LoggingFormat.MACHINE.upper()]
 
         @click.pass_context
         @click.option('--loglevel', '-l', default=default,
             help='Global logging level. Use wisely.',
             envvar='SENTRY_LOG_LEVEL',
             type=CaseInsensitiveChoice(LOG_LEVELS))
-        def inner(ctx, loglevel=None, *args, **kwargs):
+        @click.option('--logformat', '-f', default=default,
+            help='Log line format.',
+            envvar='SENTRY_LOG_FORMAT',
+            type=CaseInsensitiveChoice(formats))
+        def inner(ctx, loglevel=None, logformat=None, *args, **kwargs):
             if loglevel:
                 os.environ['SENTRY_LOG_LEVEL'] = loglevel
+            if logformat:
+                os.environ['SENTRY_LOG_FORMAT'] = logformat
             return ctx.invoke(f, *args, **kwargs)
         return update_wrapper(inner, f)
     return decorator
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index da99ff872e..e18e4c9f86 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -171,7 +171,13 @@ def configure_structlog():
             structlog.processors.StackInfoRenderer(),
         ]
     }
+
+    fmt_from_env = os.environ.get('SENTRY_LOG_FORMAT')
+    if fmt_from_env:
+        settings.SENTRY_OPTIONS['system.logging-format'] = fmt_from_env.lower()
+
     fmt = options.get('system.logging-format')
+
     if fmt == LoggingFormat.HUMAN:
         from sentry.logging.handlers import HumanRenderer
         kwargs['processors'].extend([
