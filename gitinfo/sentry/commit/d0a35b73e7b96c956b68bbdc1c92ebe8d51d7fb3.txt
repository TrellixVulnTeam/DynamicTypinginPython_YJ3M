commit d0a35b73e7b96c956b68bbdc1c92ebe8d51d7fb3
Author: Leander Rodrigues <leandergrodrigues@gmail.com>
Date:   Tue Feb 18 10:28:33 2020 -0800

    chore(ts): Convert groupTagValues (#16986)

diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index e45c28a2ff..627c2e4244 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -834,6 +834,20 @@ export type Tag = {
   predefined?: boolean;
 };
 
+export type TagValue = {
+  count: number;
+  name: string;
+  value: string;
+  lastSeen: string;
+  key: string;
+  firstSeen: string;
+  query?: string;
+  email?: string;
+  username?: string;
+  identifier?: string;
+  ipAddress?: string;
+} & AvatarUser;
+
 export type Level = 'error' | 'fatal' | 'info' | 'warning' | 'sample';
 
 export type Meta = {
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.jsx
deleted file mode 100644
index 8e9aad9792..0000000000
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.jsx
+++ /dev/null
@@ -1,195 +0,0 @@
-import sortBy from 'lodash/sortBy';
-import property from 'lodash/property';
-import isEqual from 'lodash/isEqual';
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import {isUrl, percent} from 'app/utils';
-import {t} from 'app/locale';
-import withApi from 'app/utils/withApi';
-import UserAvatar from 'app/components/avatar/userAvatar';
-import DeviceName from 'app/components/deviceName';
-import ExternalLink from 'app/components/links/externalLink';
-import GlobalSelectionLink from 'app/components/globalSelectionLink';
-import LoadingError from 'app/components/loadingError';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import Pagination from 'app/components/pagination';
-import SentryTypes from 'app/sentryTypes';
-import TimeSince from 'app/components/timeSince';
-import withOrganization from 'app/utils/withOrganization';
-
-class GroupTagValues extends React.Component {
-  static propTypes = {
-    api: PropTypes.object,
-    group: SentryTypes.Group.isRequired,
-    location: PropTypes.shape({
-      query: PropTypes.object,
-    }),
-  };
-
-  state = {
-    tagKey: null,
-    tagValueList: null,
-    loading: true,
-    error: false,
-    pageLinks: '',
-  };
-
-  componentDidMount() {
-    this.fetchData();
-  }
-
-  componentDidUpdate(prevProps) {
-    const queryHasChanged = !isEqual(prevProps.location.query, this.props.location.query);
-    if (queryHasChanged || prevProps.params.tagKey !== this.props.params.tagKey) {
-      this.fetchData();
-    }
-  }
-
-  fetchData = async () => {
-    const {
-      params,
-      location: {query},
-    } = this.props;
-    this.setState({
-      loading: true,
-      error: false,
-    });
-
-    const promises = [
-      this.props.api.requestPromise(`/issues/${params.groupId}/tags/${params.tagKey}/`, {
-        query,
-      }),
-      this.props.api.requestPromise(
-        `/issues/${params.groupId}/tags/${params.tagKey}/values/`,
-        {
-          query,
-          includeAllArgs: true,
-        }
-      ),
-    ];
-
-    try {
-      const [tagKey, tagValueResponse] = await Promise.all(promises);
-      const [tagValueList, , jqXHR] = tagValueResponse;
-
-      this.setState({
-        tagKey,
-        tagValueList,
-        loading: false,
-        pageLinks: jqXHR.getResponseHeader('Link'),
-      });
-    } catch (rejections) {
-      // eslint-disable-next-line no-console
-      console.error(rejections);
-      this.setState({
-        error: true,
-        loading: false,
-      });
-    }
-  };
-
-  getUserDisplayName(item) {
-    return item.email || item.username || item.identifier || item.ipAddress || item.value;
-  }
-
-  render() {
-    if (this.state.loading) {
-      return <LoadingIndicator />;
-    } else if (this.state.error) {
-      return <LoadingError onRetry={this.fetchData} />;
-    }
-
-    const {
-      group,
-      params: {orgId},
-    } = this.props;
-    const tagKey = this.state.tagKey;
-
-    const sortedTagValueList = sortBy(
-      this.state.tagValueList,
-      property('count')
-    ).reverse();
-
-    const issuesPath = `/organizations/${orgId}/issues/`;
-
-    const children = sortedTagValueList.map((tagValue, tagValueIdx) => {
-      const pct = percent(tagValue.count, tagKey.totalValues).toFixed(2);
-      const query = tagValue.query || `${tagKey.key}:"${tagValue.value}"`;
-      return (
-        <tr key={tagValueIdx}>
-          <td className="bar-cell">
-            <span className="bar" style={{width: pct + '%'}} />
-            <span className="label">{pct}%</span>
-          </td>
-          <td>
-            <GlobalSelectionLink
-              to={{
-                pathname: issuesPath,
-                query: {query},
-              }}
-            >
-              {tagKey.key === 'user' ? (
-                <React.Fragment>
-                  <UserAvatar user={tagValue} size={20} className="avatar" />
-                  <span style={{marginLeft: 10}}>
-                    {this.getUserDisplayName(tagValue)}
-                  </span>
-                </React.Fragment>
-              ) : (
-                <DeviceName>{tagValue.name}</DeviceName>
-              )}
-            </GlobalSelectionLink>
-            {tagValue.email && (
-              <ExternalLink href={`mailto:${tagValue.email}`} className="external-icon">
-                <em className="icon-envelope" />
-              </ExternalLink>
-            )}
-            {isUrl(tagValue.value) && (
-              <a href={tagValue.value} className="external-icon">
-                <em className="icon-open" />
-              </a>
-            )}
-          </td>
-          <td>
-            <TimeSince date={tagValue.lastSeen} />
-          </td>
-        </tr>
-      );
-    });
-
-    return (
-      <div>
-        <h3>
-          {tagKey.key === 'user' ? t('Affected Users') : tagKey.name}
-          <a
-            href={`/${orgId}/${group.project.slug}/issues/${group.id}/tags/${this.props.params.tagKey}/export/`}
-            className="btn btn-default btn-sm"
-            style={{marginLeft: 10}}
-          >
-            {t('Export to CSV')}
-          </a>
-        </h3>
-        <table className="table table-striped">
-          <thead>
-            <tr>
-              <th style={{width: 30}}>%</th>
-              <th />
-              <th style={{width: 200}}>{t('Last Seen')}</th>
-            </tr>
-          </thead>
-          <tbody>{children}</tbody>
-        </table>
-        <Pagination pageLinks={this.state.pageLinks} />
-        <p>
-          <small>
-            {t('Note: Percentage of issue is based on events seen in the last 7 days.')}
-          </small>
-        </p>
-      </div>
-    );
-  }
-}
-
-export {GroupTagValues};
-export default withApi(withOrganization(GroupTagValues));
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.tsx
new file mode 100644
index 0000000000..7a36550717
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.tsx
@@ -0,0 +1,151 @@
+import sortBy from 'lodash/sortBy';
+import property from 'lodash/property';
+import React from 'react';
+import {RouteComponentProps} from 'react-router/lib/Router';
+import styled from '@emotion/styled';
+
+import {isUrl, percent} from 'app/utils';
+import {t} from 'app/locale';
+import AsyncComponent from 'app/components/asyncComponent';
+import UserAvatar from 'app/components/avatar/userAvatar';
+import DeviceName from 'app/components/deviceName';
+import ExternalLink from 'app/components/links/externalLink';
+import GlobalSelectionLink from 'app/components/globalSelectionLink';
+import Pagination from 'app/components/pagination';
+import TimeSince from 'app/components/timeSince';
+import space from 'app/styles/space';
+import {Group, Tag, TagValue} from 'app/types';
+
+type RouteParams = {
+  groupId: string;
+  orgId: string;
+  tagKey: string;
+};
+
+type Props = {
+  group: Group;
+} & RouteComponentProps<RouteParams, {}>;
+
+type State = {
+  tag: Tag;
+  tagValueList: TagValue[];
+  tagValueListPageLinks: string;
+};
+
+class GroupTagValues extends AsyncComponent<
+  Props & AsyncComponent['props'],
+  State & AsyncComponent['state']
+> {
+  getEndpoints(): [string, string][] {
+    const {groupId, tagKey} = this.props.params;
+    return [
+      ['tag', `/issues/${groupId}/tags/${tagKey}/`],
+      ['tagValueList', `/issues/${groupId}/tags/${tagKey}/values/`],
+    ];
+  }
+
+  getUserDisplayName(item: TagValue): string {
+    return item.email || item.username || item.identifier || item.ipAddress || item.value;
+  }
+
+  renderBody() {
+    const {
+      group,
+      params: {orgId, tagKey},
+    } = this.props;
+    const {tag, tagValueList, tagValueListPageLinks} = this.state;
+    const sortedTagValueList: TagValue[] = sortBy(
+      tagValueList,
+      property('count')
+    ).reverse();
+
+    const issuesPath = `/organizations/${orgId}/issues/`;
+
+    const children = sortedTagValueList.map((tagValue, tagValueIdx) => {
+      const pct = tag.totalValues
+        ? `${percent(tagValue.count, tag.totalValues).toFixed(2)}%`
+        : '--';
+      const query = tagValue.query || `${tag.key}:"${tagValue.value}"`;
+      return (
+        <tr key={tagValueIdx}>
+          <td className="bar-cell">
+            <span className="label">{pct}</span>
+          </td>
+          <td>
+            <GlobalSelectionLink
+              to={{
+                pathname: issuesPath,
+                query: {query},
+              }}
+            >
+              {tag.key === 'user' ? (
+                <React.Fragment>
+                  <UserAvatar user={tagValue} size={20} className="avatar" />
+                  <span className="m-left">{this.getUserDisplayName(tagValue)}</span>
+                </React.Fragment>
+              ) : (
+                <DeviceName>{tagValue.name}</DeviceName>
+              )}
+            </GlobalSelectionLink>
+            {tagValue.email && (
+              <ExternalLink href={`mailto:${tagValue.email}`} className="external-icon">
+                <em className="icon-envelope" />
+              </ExternalLink>
+            )}
+            {isUrl(tagValue.value) && (
+              <a href={tagValue.value} className="external-icon">
+                <em className="icon-open" />
+              </a>
+            )}
+          </td>
+          <td>
+            <TimeSince date={tagValue.lastSeen} />
+          </td>
+        </tr>
+      );
+    });
+
+    return (
+      <TableWrapper>
+        <h3>
+          {tag.key === 'user' ? t('Affected Users') : tag.name}
+          <a
+            href={`/${orgId}/${group.project.slug}/issues/${group.id}/tags/${tagKey}/export/`}
+            className="btn btn-default btn-sm m-left"
+          >
+            {t('Export to CSV')}
+          </a>
+        </h3>
+        <table className="table table-striped">
+          <thead>
+            <tr>
+              <TableHeader width={20}>%</TableHeader>
+              <th />
+              <TableHeader width={300}>{t('Last Seen')}</TableHeader>
+            </tr>
+          </thead>
+          <tbody>{children}</tbody>
+        </table>
+        <Pagination pageLinks={tagValueListPageLinks} />
+        <p>
+          <small>
+            {t('Note: Percentage of issue is based on events seen in the last 7 days.')}
+          </small>
+        </p>
+      </TableWrapper>
+    );
+  }
+}
+
+const TableWrapper = styled('div')`
+  .m-left {
+    margin-left: ${space(1.5)};
+  }
+`;
+
+const TableHeader = styled('th')<{width: number}>`
+  width: ${p => p.width}px;
+`;
+
+export {GroupTagValues};
+export default GroupTagValues;
