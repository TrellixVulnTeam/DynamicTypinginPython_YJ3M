commit 9e7303530c7d77c977df7c5e58af1d5bf5af7fe4
Author: Ted Kaemming <ted@kaemming.com>
Date:   Wed Nov 11 14:02:31 2015 -0800

    Break digest feature flags into `store` and `deliver`.

diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 9a4a507200..957223ab23 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -9,7 +9,8 @@ default_manager = FeatureManager()
 default_manager.add('auth:register')
 default_manager.add('organizations:create')
 default_manager.add('organizations:sso', OrganizationFeature)
-default_manager.add('projects:digests', ProjectFeature)
+default_manager.add('projects:digests:deliver', ProjectFeature)
+default_manager.add('projects:digests:store', ProjectFeature)
 default_manager.add('projects:quotas', ProjectFeature)
 default_manager.add('projects:user-reports', ProjectFeature)
 default_manager.add('projects:plugins', ProjectPluginFeature)
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 7c05dbfda0..160dcd8265 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -55,10 +55,6 @@ class NotificationPlugin(Plugin):
         event = notification.event
         return self.notify_users(event.group, event)
 
-    def __can_be_digested(self, event):
-        return hasattr(self, 'notify_digest') and \
-            features.has('projects:digests', event.group.project)
-
     def rule_notify(self, event, futures):
         rules = []
         for future in futures:
@@ -67,10 +63,21 @@ class NotificationPlugin(Plugin):
                 continue
             raise NotImplementedError('The default behavior for notification de-duplication does not support args')
 
-        if self.__can_be_digested(event):
-            key = unsplit_key(self, event.group.project)
-            if digests.add(key, event_to_record(event, rules)):
-                deliver_digest.delay(key)
+        if hasattr(self, 'notify_digest'):
+            project = event.group.project
+            if features.has('projects:digests:store', project):
+                key = unsplit_key(self, event.group.project)
+                if digests.add(key, event_to_record(event, rules)):
+                    deliver_digest.delay(key)
+
+            # If digest delivery is disabled, we still need to send a
+            # notification -- we also need to check rate limits, since
+            # ``should_notify`` skips this step if the plugin supports digests.
+            if not features.has('projects:digests:deliver', project) \
+                    and not self.__is_rate_limited(event.group, event):
+                notification = Notification(event=event, rules=rules)
+                self.notify(notification)
+
         else:
             notification = Notification(event=event, rules=rules)
             self.notify(notification)
@@ -110,13 +117,7 @@ class NotificationPlugin(Plugin):
 
         return member_set
 
-    def should_notify(self, group, event):
-        if group.is_muted():
-            return False
-
-        if self.__can_be_digested(event):
-            return True
-
+    def __is_rate_limited(self, group, event):
         project = group.project
 
         rate_limited = ratelimiter.is_limited(
@@ -131,6 +132,17 @@ class NotificationPlugin(Plugin):
 
         return not rate_limited
 
+    def should_notify(self, group, event):
+        if group.is_muted():
+            return False
+
+        # If the plugin doesn't support digests, perform rate limit checks to
+        # support backwards compatibility with older plugins.
+        if not hasattr(self, 'notify_digest'):
+            return not self.__is_rate_limited(group, event)
+
+        return True
+
     def test_configuration(self, project):
         from sentry.utils.samples import create_sample_event
         event = create_sample_event(project, platform='python')
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 83adfa8b83..08a46bcd66 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -18,6 +18,7 @@ from django.template.loader import render_to_string
 from django.utils.encoding import force_text
 from django.utils.safestring import mark_safe
 
+from sentry import features
 from sentry.plugins import register
 from sentry.plugins.base.structs import Notification
 from sentry.plugins.bases.notify import NotificationPlugin
@@ -39,7 +40,7 @@ class MailPlugin(NotificationPlugin):
     project_conf_form = None
     subject_prefix = settings.EMAIL_SUBJECT_PREFIX
 
-    def _send_mail(self, subject, template=None, html_template=None, body=None,
+    def _build_message(self, subject, template=None, html_template=None, body=None,
                    project=None, group=None, headers=None, context=None):
         send_to = self.get_send_to(project)
         if not send_to:
@@ -59,7 +60,10 @@ class MailPlugin(NotificationPlugin):
             reference=group,
         )
         msg.add_users(send_to, project=project)
-        return msg.send()
+        return msg
+
+    def _send_mail(self, *args, **kwargs):
+        return self._build_message(*args, **kwargs).send()
 
     def send_test_mail(self, project=None):
         self._send_mail(
@@ -196,7 +200,7 @@ class MailPlugin(NotificationPlugin):
             'counts': counts,
         }
 
-        self._send_mail(
+        message = self._build_message(
             subject=render_to_string('sentry/emails/digests/subject.txt', context).rstrip(),
             template='sentry/emails/digests/body.txt',
             html_template='sentry/emails/digests/body.html',
@@ -204,6 +208,9 @@ class MailPlugin(NotificationPlugin):
             context=context,
         )
 
+        if features.has('projects:digests:deliver', project):
+            message.send()
+
 
 # Legacy compatibility
 MailProcessor = MailPlugin
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 7fb73ec14d..57ce58b2cd 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -9,6 +9,7 @@ from django.utils import timezone
 from exam import fixture
 from mock import Mock
 
+from sentry import features
 from sentry.digests.notifications import (
     build_digest,
     event_to_record,
@@ -228,7 +229,12 @@ class MailPluginTest(TestCase):
 
     @mock.patch.object(MailPlugin, 'notify', side_effect=MailPlugin.notify, autospec=True)
     @mock.patch.object(MessageBuilder, 'send', autospec=True)
-    def test_notify_digest(self, send, notify):
+    @mock.patch.object(features, 'has')
+    def test_notify_digest(self, has, send, notify):
+        has.side_effect = lambda label, *a, **k: {
+            'projects:digests:deliver': True,
+        }.get(label, False)
+
         project = self.event.project
         rule = project.rule_set.all()[0]
         digest = build_digest(
