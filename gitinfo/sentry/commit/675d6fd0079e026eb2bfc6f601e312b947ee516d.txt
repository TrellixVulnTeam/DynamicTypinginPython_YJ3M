commit 675d6fd0079e026eb2bfc6f601e312b947ee516d
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Fri Jun 22 12:31:11 2018 -0700

    fix(integrations): Fixed errors with refresh oauth vsts (#8807)
    
    * Fixed errors with refresh oauth vsts
    
    * Added test
    
    * Added changes evan asked for.
    
    * Added apierror

diff --git a/src/sentry/identity/oauth2.py b/src/sentry/identity/oauth2.py
index e376d7db57..da01e29cc9 100644
--- a/src/sentry/identity/oauth2.py
+++ b/src/sentry/identity/oauth2.py
@@ -9,6 +9,7 @@ from django.views.decorators.csrf import csrf_exempt
 
 from sentry.auth.exceptions import IdentityNotValid
 from sentry.http import safe_urlopen, safe_urlread
+from sentry.integrations.exceptions import ApiError
 from sentry.utils import json
 from sentry.utils.http import absolute_uri
 from sentry.pipeline import PipelineView
@@ -108,7 +109,7 @@ class OAuth2Provider(Provider):
     def get_oauth_data(self, payload):
         data = {'access_token': payload['access_token']}
         if 'expires_in' in payload:
-            data['expires'] = int(time()) + payload['expires_in']
+            data['expires'] = int(time()) + int(payload['expires_in'])
         if 'refresh_token' in payload:
             data['refresh_token'] = payload['refresh_token']
         if 'token_type' in payload:
@@ -116,6 +117,33 @@ class OAuth2Provider(Provider):
 
         return data
 
+    def handle_refresh_error(self, req, payload):
+        error_name = 'unknown_error'
+        error_description = 'no description available'
+        for name_key in ['error', 'Error']:
+            if name_key in payload:
+                error_name = payload.get(name_key)
+                break
+
+        for desc_key in ['error_description', 'ErrorDescription']:
+            if desc_key in payload:
+                error_description = payload.get(desc_key)
+                break
+
+        formatted_error = 'HTTP {} ({}): {}'.format(req.status_code, error_name, error_description)
+
+        if req.status_code == 401:
+            raise IdentityNotValid(formatted_error)
+
+        if req.status_code == 400:
+            # this may not be common, but at the very least Google will return
+            # an invalid grant when a user is suspended
+            if error_name == 'invalid_grant':
+                raise IdentityNotValid(formatted_error)
+
+        if req.status_code != 200:
+            raise ApiError(formatted_error)
+
     def refresh_identity(self, identity, *args, **kwargs):
         refresh_token = identity.data.get('refresh_token')
 
@@ -136,22 +164,7 @@ class OAuth2Provider(Provider):
         except Exception:
             payload = {}
 
-        error = payload.get('error', 'unknown_error')
-        error_description = payload.get('error_description', 'no description available')
-
-        formatted_error = 'HTTP {} ({}): {}'.format(req.status_code, error, error_description)
-
-        if req.status_code == 401:
-            raise IdentityNotValid(formatted_error)
-
-        if req.status_code == 400:
-            # this may not be common, but at the very least Google will return
-            # an invalid grant when a user is suspended
-            if error == 'invalid_grant':
-                raise IdentityNotValid(formatted_error)
-
-        if req.status_code != 200:
-            raise Exception(formatted_error)
+        self.handle_refresh_error(req, payload)
 
         identity.data.update(self.get_oauth_data(payload))
         return identity.update(data=identity.data)
diff --git a/src/sentry/identity/vsts/provider.py b/src/sentry/identity/vsts/provider.py
index c615bc8cfd..e80b42f0ed 100644
--- a/src/sentry/identity/vsts/provider.py
+++ b/src/sentry/identity/vsts/provider.py
@@ -19,6 +19,7 @@ class VSTSIdentityProvider(OAuth2Provider):
     oauth_authorize_url = 'https://app.vssps.visualstudio.com/oauth2/authorize'
     oauth_scopes = (
         'vso.code',
+        'vso.graph',
         'vso.project',
         'vso.release',
         'vso.serviceendpoint_manage',
@@ -50,7 +51,7 @@ class VSTSIdentityProvider(OAuth2Provider):
             AccountConfigView(),
         ]
 
-    def get_refresh_token_header(self):
+    def get_refresh_token_headers(self):
         return {
             'Content-Type': 'application/x-www-form-urlencoded',
             'Content-Length': '1654',
diff --git a/src/sentry/integrations/vsts/client.py b/src/sentry/integrations/vsts/client.py
index 80e52190f1..9d7e99fe12 100644
--- a/src/sentry/integrations/vsts/client.py
+++ b/src/sentry/integrations/vsts/client.py
@@ -10,6 +10,7 @@ FIELD_MAP = {
     'comment': '/fields/System.History',
     'link': '/relations/-',
 }
+INVALID_ACCESS_TOKEN = 'HTTP 400 (invalid_request): The access token is not valid'
 
 
 class VstsApiPath(object):
diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index b3ceef6886..e4a2b08087 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -45,7 +45,8 @@ class VstsIntegration(Integration, VstsIssueSync):
         except ApiError:
             # TODO(LB): Disable for now. Need to decide what to do with this in the future
             # should a message be shown to the user?
-            # Should we try refreshing the token? For VSTS that often clears up the problem
+            #  If INVALID_ACCESS_TOKEN ask the user to reinstall integration?
+
             project_choices = []
             disabled = True
         else:
diff --git a/tests/sentry/integrations/vsts/test_integration.py b/tests/sentry/integrations/vsts/test_integration.py
index 8ba8a82ff5..5e529f70d4 100644
--- a/tests/sentry/integrations/vsts/test_integration.py
+++ b/tests/sentry/integrations/vsts/test_integration.py
@@ -153,3 +153,12 @@ class VstsIntegrationTest(APITestCase):
         assert project_field['disabled'] is False
         assert project_field['choices'] == self.projects
         assert project_field['initial'] == self.projects[1]
+
+    def test_get_project_config_failure(self):
+        fields = self.integration.get_project_config()
+        assert len(fields) == 1
+        project_field = fields[0]
+        assert project_field['name'] == 'default_project'
+        assert project_field['disabled'] is True
+        assert project_field['choices'] == []
+        assert project_field['initial'] == ('', '')
