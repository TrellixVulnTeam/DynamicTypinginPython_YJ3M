commit ec5afddfb00281cdd472a51993dee5a2c2e4633a
Author: Filippo Pacifici <filippo.pacifici@gmail.com>
Date:   Wed Jul 1 16:47:15 2020 -0700

    fix(test_snuba) Fix tagstore and tsdb tests (#19675)
    
    Adds the version field to these messages. Now this is mandatory in Snuba, these tests were using the old format

diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 753ab153e8..1b982b6d9e 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -897,7 +897,7 @@ class SnubaTestCase(BaseTestCase):
 
         assert (
             requests.post(
-                settings.SENTRY_SNUBA + "/tests/events/insert", data=json.dumps(events)
+                settings.SENTRY_SNUBA + "/tests/events/insert", data=json.dumps(events),
             ).status_code
             == 200
         )
diff --git a/tests/snuba/tagstore/test_tagstore_backend.py b/tests/snuba/tagstore/test_tagstore_backend.py
index 87ea425203..cb5db04c5e 100644
--- a/tests/snuba/tagstore/test_tagstore_backend.py
+++ b/tests/snuba/tagstore/test_tagstore_backend.py
@@ -42,64 +42,85 @@ class TagStorageTest(TestCase, SnubaTestCase):
         self.now = timezone.now().replace(microsecond=0)
         data = json.dumps(
             [
-                {
-                    "event_id": six.text_type(r) * 32,
-                    "primary_hash": hash1,
-                    "group_id": self.proj1group1.id,
-                    "project_id": self.proj1.id,
-                    "message": "message 1",
-                    "platform": "python",
-                    "datetime": (self.now - timedelta(seconds=r)).strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
-                    "data": {
-                        "received": calendar.timegm(self.now.timetuple()) - r,
-                        "tags": {
-                            "foo": "bar",
-                            "baz": "quux",
-                            "environment": self.proj1env1.name,
-                            "sentry:release": 100 * r,
-                            "sentry:user": u"id:user{}".format(r),
+                (
+                    2,
+                    "insert",
+                    {
+                        "event_id": six.text_type(r) * 32,
+                        "primary_hash": hash1,
+                        "group_id": self.proj1group1.id,
+                        "project_id": self.proj1.id,
+                        "message": "message 1",
+                        "platform": "python",
+                        "datetime": (self.now - timedelta(seconds=r)).strftime(
+                            "%Y-%m-%dT%H:%M:%S.%fZ"
+                        ),
+                        "data": {
+                            "received": calendar.timegm(self.now.timetuple()) - r,
+                            "tags": {
+                                "foo": "bar",
+                                "baz": "quux",
+                                "environment": self.proj1env1.name,
+                                "sentry:release": 100 * r,
+                                "sentry:user": u"id:user{}".format(r),
+                            },
+                            "user": {
+                                "id": u"user{}".format(r),
+                                "email": u"user{}@sentry.io".format(r),
+                            },
+                            "exception": {"values": [{"stacktrace": {"frames": [{"lineno": 29}]}}]},
                         },
-                        "user": {"id": u"user{}".format(r), "email": u"user{}@sentry.io".format(r)},
-                        "exception": {"values": [{"stacktrace": {"frames": [{"lineno": 29}]}}]},
                     },
-                }
+                )
                 for r in [1, 2]
             ]
             + [
-                {
-                    "event_id": "3" * 32,
-                    "primary_hash": hash2,
-                    "group_id": self.proj1group2.id,
-                    "project_id": self.proj1.id,
-                    "message": "message 2",
-                    "platform": "python",
-                    "datetime": (self.now - timedelta(seconds=2)).strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
-                    "data": {
-                        "received": calendar.timegm(self.now.timetuple()) - 2,
-                        "tags": {
-                            "browser": "chrome",
-                            "environment": self.proj1env1.name,
-                            "sentry:user": "id:user1",
+                (
+                    2,
+                    "insert",
+                    {
+                        "event_id": "3" * 32,
+                        "primary_hash": hash2,
+                        "group_id": self.proj1group2.id,
+                        "project_id": self.proj1.id,
+                        "message": "message 2",
+                        "platform": "python",
+                        "datetime": (self.now - timedelta(seconds=2)).strftime(
+                            "%Y-%m-%dT%H:%M:%S.%fZ"
+                        ),
+                        "data": {
+                            "received": calendar.timegm(self.now.timetuple()) - 2,
+                            "tags": {
+                                "browser": "chrome",
+                                "environment": self.proj1env1.name,
+                                "sentry:user": "id:user1",
+                            },
+                            "user": {"id": "user1"},
                         },
-                        "user": {"id": "user1"},
                     },
-                }
+                )
             ]
             + [
-                {
-                    "event_id": "4" * 32,
-                    "primary_hash": hash2,
-                    "group_id": self.proj1group1.id,
-                    "project_id": self.proj1.id,
-                    "message": "message 2",
-                    "platform": "python",
-                    "datetime": (self.now - timedelta(seconds=2)).strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
-                    "data": {
-                        "received": calendar.timegm(self.now.timetuple()) - 2,
-                        "tags": {"foo": "bar", "environment": self.proj1env2.name},
-                        "user": {"id": "user1"},
+                (
+                    2,
+                    "insert",
+                    {
+                        "event_id": "4" * 32,
+                        "primary_hash": hash2,
+                        "group_id": self.proj1group1.id,
+                        "project_id": self.proj1.id,
+                        "message": "message 2",
+                        "platform": "python",
+                        "datetime": (self.now - timedelta(seconds=2)).strftime(
+                            "%Y-%m-%dT%H:%M:%S.%fZ"
+                        ),
+                        "data": {
+                            "received": calendar.timegm(self.now.timetuple()) - 2,
+                            "tags": {"foo": "bar", "environment": self.proj1env2.name},
+                            "user": {"id": "user1"},
+                        },
                     },
-                }
+                )
             ]
         )
 
diff --git a/tests/snuba/test_snuba.py b/tests/snuba/test_snuba.py
index 8ba595caf0..ccc7c34038 100644
--- a/tests/snuba/test_snuba.py
+++ b/tests/snuba/test_snuba.py
@@ -15,16 +15,20 @@ from sentry.utils import snuba
 class SnubaTest(TestCase, SnubaTestCase):
     def _insert_event_for_time(self, ts, hash="a" * 32, group_id=None):
         self.snuba_insert(
-            {
-                "event_id": uuid.uuid4().hex,
-                "primary_hash": hash,
-                "group_id": group_id if group_id else int(hash[:16], 16),
-                "project_id": self.project.id,
-                "message": "message",
-                "platform": "python",
-                "datetime": ts.strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
-                "data": {"received": time.mktime(ts.timetuple())},
-            }
+            (
+                2,
+                "insert",
+                {
+                    "event_id": uuid.uuid4().hex,
+                    "primary_hash": hash,
+                    "group_id": group_id if group_id else int(hash[:16], 16),
+                    "project_id": self.project.id,
+                    "message": "message",
+                    "platform": "python",
+                    "datetime": ts.strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
+                    "data": {"received": time.mktime(ts.timetuple())},
+                },
+            )
         )
 
     def test(self):
@@ -33,16 +37,20 @@ class SnubaTest(TestCase, SnubaTestCase):
         now = datetime.now()
 
         events = [
-            {
-                "event_id": "x" * 32,
-                "primary_hash": "1" * 32,
-                "group_id": 1,
-                "project_id": self.project.id,
-                "message": "message",
-                "platform": "python",
-                "datetime": now.strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
-                "data": {"received": time.mktime(now.timetuple())},
-            }
+            (
+                2,
+                "insert",
+                {
+                    "event_id": "x" * 32,
+                    "primary_hash": "1" * 32,
+                    "group_id": 1,
+                    "project_id": self.project.id,
+                    "message": "message",
+                    "platform": "python",
+                    "datetime": now.strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
+                    "data": {"received": time.mktime(now.timetuple())},
+                },
+            )
         ]
 
         self.snuba_insert(events)
diff --git a/tests/snuba/tsdb/test_tsdb_backend.py b/tests/snuba/tsdb/test_tsdb_backend.py
index dbac1a838f..1af88b2dba 100644
--- a/tests/snuba/tsdb/test_tsdb_backend.py
+++ b/tests/snuba/tsdb/test_tsdb_backend.py
@@ -98,32 +98,38 @@ class SnubaTSDBTest(TestCase, SnubaTestCase):
 
         data = json.dumps(
             [
-                {
-                    "event_id": (six.text_type(r) * 32)[:32],
-                    "primary_hash": [hash1, hash2][(r // 600) % 2],  # Switch every 10 mins
-                    "group_id": [self.proj1group1.id, self.proj1group2.id][(r // 600) % 2],
-                    "project_id": self.proj1.id,
-                    "message": "message 1",
-                    "platform": "python",
-                    "datetime": (self.now + timedelta(seconds=r)).strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
-                    "data": {
-                        "type": "transaction" if r % 1200 == 0 else "error",
-                        "received": calendar.timegm(self.now.timetuple()) + r,
-                        "tags": {
-                            "foo": "bar",
-                            "baz": "quux",
-                            # Switch every 2 hours
-                            "environment": [self.proj1env1.name, None][(r // 7200) % 3],
-                            "sentry:user": u"id:user{}".format(r // 3300),
-                            "sentry:release": six.text_type(r // 3600) * 10,  # 1 per hour
-                        },
-                        "user": {
-                            # change every 55 min so some hours have 1 user, some have 2
-                            "id": u"user{}".format(r // 3300),
-                            "email": u"user{}@sentry.io".format(r),
+                (
+                    2,
+                    "insert",
+                    {
+                        "event_id": (six.text_type(r) * 32)[:32],
+                        "primary_hash": [hash1, hash2][(r // 600) % 2],  # Switch every 10 mins
+                        "group_id": [self.proj1group1.id, self.proj1group2.id][(r // 600) % 2],
+                        "project_id": self.proj1.id,
+                        "message": "message 1",
+                        "platform": "python",
+                        "datetime": (self.now + timedelta(seconds=r)).strftime(
+                            "%Y-%m-%dT%H:%M:%S.%fZ"
+                        ),
+                        "data": {
+                            "type": "transaction" if r % 1200 == 0 else "error",
+                            "received": calendar.timegm(self.now.timetuple()) + r,
+                            "tags": {
+                                "foo": "bar",
+                                "baz": "quux",
+                                # Switch every 2 hours
+                                "environment": [self.proj1env1.name, None][(r // 7200) % 3],
+                                "sentry:user": u"id:user{}".format(r // 3300),
+                                "sentry:release": six.text_type(r // 3600) * 10,  # 1 per hour
+                            },
+                            "user": {
+                                # change every 55 min so some hours have 1 user, some have 2
+                                "id": u"user{}".format(r // 3300),
+                                "email": u"user{}@sentry.io".format(r),
+                            },
                         },
                     },
-                }
+                )
                 for r in range(0, 14400, 600)
             ]
         )  # Every 10 min for 4 hours
