commit b9baabff5d6e83f98331769a10f2cf064a5e21dd
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Aug 3 10:52:33 2018 -0700

    feat(charts): Add "100% Stacked Percentage Column Chart" (#9247)

diff --git a/docs-ui/components/percentageBarChart.stories.js b/docs-ui/components/percentageBarChart.stories.js
new file mode 100644
index 0000000000..42c00fa069
--- /dev/null
+++ b/docs-ui/components/percentageBarChart.stories.js
@@ -0,0 +1,162 @@
+import React from 'react';
+
+import {storiesOf} from '@storybook/react';
+import {withInfo} from '@storybook/addon-info';
+
+import PercentageBarChart from 'app/components/charts/percentageBarChart';
+
+const TOTAL = 6;
+
+// eslint-disable-next-line
+storiesOf('Charts/PercentageBarChart', module).add(
+  'default',
+  withInfo('Stacked PercentageBar')(() => {
+    const NOW = new Date().getTime();
+    const getValue = () => Math.round(Math.random() * 1000);
+    const getDate = num => NOW - (TOTAL - num) * 86400000;
+
+    return (
+      <div style={{padding: 20, backgroundColor: 'white'}}>
+        <h2>Percentage Bar Charts Over Time</h2>
+
+        <PercentageBarChart
+          style={{height: 400}}
+          series={[
+            {
+              seriesName: 'v2.0.0',
+              data: [
+                {
+                  value: getValue(),
+                  name: getDate(0),
+                },
+                {
+                  value: 0,
+                  name: getDate(1),
+                },
+                {
+                  value: getValue(),
+                  name: getDate(2),
+                },
+                {
+                  value: getValue(),
+                  name: getDate(3),
+                },
+                {
+                  value: getValue(),
+                  name: getDate(4),
+                },
+                {
+                  value: getValue(),
+                  name: getDate(5),
+                },
+                {
+                  value: getValue(),
+                  name: getDate(6),
+                },
+              ],
+            },
+            {
+              seriesName: 'v2.1.0',
+              data: [
+                {
+                  value: getValue(),
+                  name: getDate(0),
+                },
+                {
+                  value: 0,
+                  name: getDate(1),
+                },
+                {
+                  value: getValue(),
+                  name: getDate(2),
+                },
+                {
+                  value: getValue(),
+                  name: getDate(3),
+                },
+                {
+                  value: getValue(),
+                  name: getDate(4),
+                },
+                {
+                  value: getValue(),
+                  name: getDate(5),
+                },
+                {
+                  value: getValue(),
+                  name: getDate(6),
+                },
+              ],
+            },
+            {
+              seriesName: 'v2.1.1',
+              data: [
+                {
+                  value: getValue(),
+                  name: getDate(0),
+                },
+                {
+                  value: 0,
+                  name: getDate(1),
+                },
+                {
+                  value: getValue(),
+                  name: getDate(2),
+                },
+                {
+                  value: getValue(),
+                  name: getDate(3),
+                },
+                {
+                  value: getValue(),
+                  name: getDate(4),
+                },
+                {
+                  value: getValue(),
+                  name: getDate(5),
+                },
+                {
+                  value: getValue(),
+                  name: getDate(6),
+                },
+              ],
+            },
+            {
+              seriesName: 'v3.0.0',
+              data: [
+                {
+                  value: getValue(),
+                  name: getDate(0),
+                },
+                {
+                  value: 0,
+                  name: getDate(1),
+                },
+                {
+                  value: getValue(),
+                  name: getDate(2),
+                },
+                {
+                  value: getValue(),
+                  name: getDate(3),
+                },
+                {
+                  value: getValue(),
+                  name: getDate(4),
+                },
+                {
+                  value: getValue(),
+                  name: getDate(5),
+                },
+                {
+                  value: getValue(),
+                  name: getDate(6),
+                },
+              ],
+            },
+          ]}
+        />
+      </div>
+    );
+  })
+);
diff --git a/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx b/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx
index 2b20b2d29d..630d79f18b 100644
--- a/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx
+++ b/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx
@@ -6,15 +6,18 @@ export default function XAxis(props = {}) {
     axisLine: {
       lineStyle: {
         color: theme.gray1,
+        ...(props.axisLine || {}),
       },
     },
     axisTick: {
       lineStyle: {
         color: theme.gray1,
       },
+      ...(props.axisTick || {}),
     },
     axisLabel: {
       margin: 12,
+      ...(props.axisLabel || {}),
     },
     ...props,
   };
diff --git a/src/sentry/static/sentry/app/components/charts/percentageBarChart.jsx b/src/sentry/static/sentry/app/components/charts/percentageBarChart.jsx
new file mode 100644
index 0000000000..294c1028eb
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/percentageBarChart.jsx
@@ -0,0 +1,121 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import moment from 'moment';
+
+import BarSeries from './series/barSeries.jsx';
+import BaseChart from './baseChart';
+import Tooltip from './components/tooltip';
+import XAxis from './components/xAxis';
+import YAxis from './components/yAxis';
+
+const FILLER_NAME = '__filler';
+
+/**
+ * A stacked 100% column chart over time
+ *
+ * See https://exceljet.net/chart-type/100-stacked-bar-chart
+ */
+export default class PercentageBarChart extends React.Component {
+  static propTypes = {
+    ...BaseChart.propTypes,
+
+    getDataItemName: PropTypes.func,
+    getValue: PropTypes.func,
+  };
+
+  static get defaultProps() {
+    // TODO(billyvg): Move these into BaseChart? or get rid completely
+    return {
+      getDataItemName: ({name}) => name,
+      getValue: ({name, value}, total) =>
+        !total ? 0 : Math.round(value / total * 1000) / 10,
+    };
+  }
+
+  getSeries() {
+    let {series, getDataItemName, getValue} = this.props;
+
+    const totalsArray = series[0].data.map(({name, value}, i) => {
+      return [name, series.reduce((sum, {data}) => sum + data[i].value, 0)];
+    });
+    const totals = new Map(totalsArray);
+    return [
+      ...series.map(({seriesName, data}) =>
+        BarSeries({
+          barCategoryGap: 0,
+          name: seriesName,
+          stack: 'percentageBarChartStack',
+          data: data.map(dataObj => [
+            getDataItemName(dataObj),
+            getValue(dataObj, totals.get(dataObj.name)),
+          ]),
+        })
+      ),
+      // Bar outline/filler if entire column is 0
+      BarSeries({
+        name: FILLER_NAME,
+        stack: 'percentageBarChartStack',
+        silent: true,
+        itemStyle: {
+          normal: {
+            color: '#eee',
+          },
+        },
+        emphasis: {
+          itemStyle: {
+            color: '#eee',
+          },
+        },
+        data: totalsArray.map(([name, total]) => [name, total === 0 ? 100 : 0]),
+      }),
+    ];
+  }
+
+  render() {
+    const series = this.getSeries();
+    return (
+      <BaseChart
+        {...this.props}
+        options={{
+          tooltip: Tooltip({
+            // Make sure tooltip is inside of chart (because of overflow: hidden)
+            confine: true,
+            formatter: seriesParams => {
+              // Filter series that have 0 counts
+              const date =
+                `${seriesParams.length &&
+                  moment(seriesParams[0].axisValue).format('MMM D, YYYY')}<br />` || '';
+              return `${date} ${seriesParams
+                .filter(
+                  ({seriesName, data}) => data[1] > 0.001 && seriesName !== FILLER_NAME
+                )
+                .map(
+                  ({marker, seriesName, data}) =>
+                    `${marker} ${seriesName}:  <strong>${data[1]}</strong>%`
+                )
+                .join('<br />')}`;
+            },
+          }),
+          xAxis: XAxis({
+            type: 'time',
+            axisLabel: {
+              formatter: (value, index) => moment(value).format('MMM D'),
+            },
+          }),
+          yAxis: YAxis({
+            min: 0,
+            max: 100,
+            type: 'value',
+            interval: 25,
+            splitNumber: 4,
+            data: [0, 25, 50, 100],
+            axisLabel: {
+              formatter: '{value}%',
+            },
+          }),
+          series,
+        }}
+      />
+    );
+  }
+}
