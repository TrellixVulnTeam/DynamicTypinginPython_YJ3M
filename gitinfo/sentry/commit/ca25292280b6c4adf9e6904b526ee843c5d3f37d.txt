commit ca25292280b6c4adf9e6904b526ee843c5d3f37d
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Jun 23 00:11:44 2016 +0200

    Remember used 2FA OTP tokens

diff --git a/src/sentry/models/authenticator.py b/src/sentry/models/authenticator.py
index aef1ed70bb..e6965f7707 100644
--- a/src/sentry/models/authenticator.py
+++ b/src/sentry/models/authenticator.py
@@ -19,6 +19,7 @@ from u2flib_server import jsapi as u2f_jsapi
 from cryptography.exceptions import InvalidSignature, InvalidKey
 
 from django.db import models
+from django.core.cache import cache
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 from django.utils.functional import cached_property
@@ -340,9 +341,32 @@ class OtpMixin(object):
     def make_otp(self):
         return TOTP(self.secret)
 
+    def _get_otp_counter_cache_key(self, counter):
+        if self.authenticator is not None:
+            return 'used-otp-counters:%s:%s' % (
+                self.authenticator.user.id,
+                counter,
+            )
+
+    def check_otp_counter(self, counter):
+        cache_key = self._get_otp_counter_cache_key(counter)
+        return cache_key is None or cache.get(cache_key) != '1'
+
+    def mark_otp_counter_used(self, counter):
+        cache_key = self._get_otp_counter_cache_key(counter)
+        if cache_key is not None:
+            # Mark us used for three windows
+            cache.set(cache_key, '1', timeout=120)
+
     def validate_otp(self, otp):
         otp = otp.strip().replace('-', '').replace(' ', '')
-        return self.make_otp().verify(otp)
+        used_counter = self.make_otp().verify(
+            otp, return_counter=True,
+            check_counter_func=self.check_otp_counter)
+        if used_counter is not None:
+            self.mark_otp_counter_used(used_counter)
+            return True
+        return False
 
 
 @register_authenticator
diff --git a/src/sentry/utils/otp.py b/src/sentry/utils/otp.py
index 6119816ef7..217bd02daa 100644
--- a/src/sentry/utils/otp.py
+++ b/src/sentry/utils/otp.py
@@ -46,9 +46,10 @@ class TOTP(object):
         self.interval = interval
         self.default_window = default_window
 
-    def generate_otp(self, ts=None, offset=0):
-        ts = _get_ts(ts)
-        counter = int(ts) // self.interval + offset
+    def generate_otp(self, ts=None, offset=0, counter=None):
+        if counter is None:
+            ts = _get_ts(ts)
+            counter = int(ts) // self.interval + offset
         h = bytearray(hmac.HMAC(
             base64.b32decode(self.secret.encode('ascii'), casefold=True),
             _pack_int(counter),
@@ -60,13 +61,24 @@ class TOTP(object):
         str_code = str(code % 10 ** self.digits)
         return ('0' * (self.digits - len(str_code))) + str_code
 
-    def verify(self, otp, ts=None, window=None):
+    def verify(self, otp, ts=None, window=None, return_counter=False,
+               check_counter_func=None):
         ts = _get_ts(ts)
         if window is None:
             window = self.default_window
         for i in xrange(-window, window + 1):
-            if constant_time_compare(otp, self.generate_otp(ts, i)):
+            counter = int(ts) // self.interval + i
+            if constant_time_compare(otp, self.generate_otp(counter=counter)):
+                # Check for blacklisted counters after the constant time
+                # compare
+                if check_counter_func is not None \
+                   and not check_counter_func(counter):
+                    continue
+                if return_counter:
+                    return counter
                 return True
+        if return_counter:
+            return None
         return False
 
     def get_provision_url(self, user, issuer=None):
