commit 6f6a06fe2dd8260c7e70477dd86a7264fd014866
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Fri Jan 27 15:08:47 2017 -0800

    newsletter: add initial support and backends

diff --git a/CHANGES b/CHANGES
index e722b41fe8..e91f326b00 100644
--- a/CHANGES
+++ b/CHANGES
@@ -14,6 +14,7 @@ Version 8.13 (Unreleased)
 - Fixed bug where workflow notification subject may not include a custom email prefix.
 - Added configurable subject templates for individual alert emails (`mail:subject_template` option).
 - Added data migration to populate ReleaseProject.new_groups
+- Added support for managing newsletter subscriptions with Sentry.io
 
 Schema Changes
 ~~~~~~~~~~~~~~
diff --git a/src/sentry/app.py b/src/sentry/app.py
index 7624caee97..d36959d306 100644
--- a/src/sentry/app.py
+++ b/src/sentry/app.py
@@ -51,6 +51,7 @@ quotas = get_instance('SENTRY_QUOTAS', settings.SENTRY_QUOTA_OPTIONS)
 nodestore = get_instance('SENTRY_NODESTORE', settings.SENTRY_NODESTORE_OPTIONS)
 ratelimiter = get_instance('SENTRY_RATELIMITER', settings.SENTRY_RATELIMITER_OPTIONS)
 search = get_instance('SENTRY_SEARCH', settings.SENTRY_SEARCH_OPTIONS)
+newsletter = get_instance('SENTRY_NEWSLETTER', settings.SENTRY_NEWSLETTER_OPTIONS)
 
 from sentry.tsdb.dummy import DummyTSDB
 tsdb = get_instance('SENTRY_TSDB', settings.SENTRY_TSDB_OPTIONS, (DummyTSDB,))
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index b1883758f4..f7e0b9936e 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -890,6 +890,9 @@ SENTRY_SEARCH_OPTIONS = {}
 SENTRY_TSDB = 'sentry.tsdb.dummy.DummyTSDB'
 SENTRY_TSDB_OPTIONS = {}
 
+SENTRY_NEWSLETTER = 'sentry.newsletter.base.Newsletter'
+SENTRY_NEWSLETTER_OPTIONS = {}
+
 # rollups must be ordered from highest granularity to lowest
 SENTRY_TSDB_ROLLUPS = (
     # (time in seconds, samples to keep)
diff --git a/src/sentry/models/useremail.py b/src/sentry/models/useremail.py
index e0c7581bba..be43f7c9f6 100644
--- a/src/sentry/models/useremail.py
+++ b/src/sentry/models/useremail.py
@@ -41,6 +41,9 @@ class UserEmail(Model):
     def hash_is_valid(self):
         return self.validation_hash and self.date_hash_added > timezone.now() - timedelta(hours=48)
 
+    def is_primary(self):
+        return self.user.email == self.email
+
     @classmethod
     def get_primary_email(self, user):
         return UserEmail.objects.get_or_create(
diff --git a/src/sentry/newsletter/__init__.py b/src/sentry/newsletter/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/sentry/newsletter/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/sentry/newsletter/base.py b/src/sentry/newsletter/base.py
new file mode 100644
index 0000000000..e45886c0ff
--- /dev/null
+++ b/src/sentry/newsletter/base.py
@@ -0,0 +1,20 @@
+from __future__ import absolute_import
+
+
+class Newsletter(object):
+    DEFAULT_LIST_ID = 1
+
+    enabled = False
+
+    def is_enabled(self):
+        return self.enabled
+
+    def get_subscriptions(self, user):
+        return None
+
+    def update_subscription(self, user, **kwargs):
+        return None
+
+    def create_or_update_subscription(self, user, **kwargs):
+        kwargs['create'] = True
+        return self.update_subscription(user, **kwargs)
diff --git a/src/sentry/newsletter/remote.py b/src/sentry/newsletter/remote.py
new file mode 100644
index 0000000000..c09570f604
--- /dev/null
+++ b/src/sentry/newsletter/remote.py
@@ -0,0 +1,63 @@
+from __future__ import absolute_import
+
+import logging
+from uuid import uuid4
+from hashlib import sha1
+
+from sentry.http import safe_urlopen
+from sentry.newsletter.base import Newsletter
+from sentry.utils import json
+
+logger = logging.getLogger('sentry.newsletter')
+
+
+def get_install_id():
+    from sentry import options
+    install_id = options.get('sentry:install-id')
+    if not install_id:
+        install_id = sha1(uuid4().bytes).hexdigest()
+        options.set('sentry:install-id', install_id)
+    return install_id
+
+
+class RemoteNewsletter(Newsletter):
+    enabled = True
+    endpoint = 'https://sentry.io/remote/newsletter/subscription/'
+
+    def __init__(self, endpoint=None):
+        if endpoint is not None:
+            self.endpoint = endpoint
+
+    def update_subscription(self, user, **kwargs):
+        kwargs['user_id'] = user.id
+        kwargs['email'] = user.email
+        kwargs['referral'] = 'onpremise'
+        kwargs['install_id'] = get_install_id()
+        try:
+            response = safe_urlopen(
+                self.endpoint,
+                method='POST',
+                headers={'Content-Type': 'application/json'},
+                data=json.dumps(kwargs),
+            )
+            response.raise_for_status()
+            return response.json()
+        except Exception:
+            logger.exception('update.failed')
+            return None
+
+    def get_subscriptions(self, user):
+        try:
+            response = safe_urlopen(
+                self.endpoint,
+                method='GET',
+                params={
+                    'user_id': user.id,
+                    'install_id': get_install_id(),
+                },
+            )
+            response.raise_for_status()
+            return response.json()
+        except Exception:
+            logger.exception('fetch.failed')
+            return None
diff --git a/src/sentry/receivers/useremail.py b/src/sentry/receivers/useremail.py
index 61d9e01555..bd6e62decf 100644
--- a/src/sentry/receivers/useremail.py
+++ b/src/sentry/receivers/useremail.py
@@ -2,8 +2,10 @@ from __future__ import absolute_import
 
 from django.db import IntegrityError
 from django.db.models.signals import post_save
+from django.utils import timezone
 
 from sentry.models import User, UserEmail
+from sentry.signals import email_verified
 
 
 def create_user_email(instance, created, **kwargs):
@@ -19,3 +21,20 @@ post_save.connect(
     dispatch_uid="create_user_email",
     weak=False
 )
+
+
+@email_verified.connect(weak=False)
+def verify_newsletter_subscription(sender, **kwargs):
+    from sentry.app import newsletter
+
+    if not newsletter.enabled:
+        return
+
+    if not sender.is_primary():
+        return
+
+    newsletter.update_subscription(
+        sender.user,
+        verified=True,
+        verified_date=timezone.now(),
+    )
diff --git a/src/sentry/templates/sentry/account/subscriptions.html b/src/sentry/templates/sentry/account/subscriptions.html
new file mode 100644
index 0000000000..fa0e530fff
--- /dev/null
+++ b/src/sentry/templates/sentry/account/subscriptions.html
@@ -0,0 +1,46 @@
+{% extends "sentry/bases/account.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+{% load sentry_auth %}
+{% load sentry_helpers %}
+
+{% block title %}{% trans "Subscriptions" %} | {{ block.super }}{% endblock %}
+
+{% block main %}
+    {% if not email.is_verified %}
+      <div class="alert alert-warning alert-block">
+        {% trans "Your email address has not been verified. " %}
+        <form action="{% url 'sentry-account-confirm-email-send' %}" method="post" class="email-alert-button">
+          {% csrf_token %}
+          <input type="hidden" name="email" value="{{ email.email }}">
+          <button type="submit" name="primary-email" class="btn-link">{% trans "Resend Verification Email." %}</button>
+        </form>
+      </div>
+    {% endif %}
+
+    <legend class="m-t-0">Subscriptions</legend>
+    {% for subscription in subscriptions.subscriptions %}
+        <div class="row">
+            <div class="col-md-9">
+                <h5>{{ subscription.list_name }}</h5>
+            </div>
+            <div class="col-md-3 align-right" style="padding-right: 25px">
+                <div data-list-id="{{ subscription.list_id }}" class="switch switch-lg{% if subscription.subscribed %} switch-on{% endif %}" role="checkbox">
+                    <span class="switch-toggle"></span>
+                </div>
+            </div>
+        </div>
+    {% endfor %}
+
+    <script>
+    $('div.switch').click(function(){
+        var $e = $(this);
+        $e.toggleClass('switch-on');
+        $.post('{% url 'sentry-account-settings-subscriptions' %}', {
+            'subscribed': $e.hasClass('switch-on') ? '1' : '0',
+            'listId': $e.data('list-id')
+        });
+    });
+    </script>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/bases/account.html b/src/sentry/templates/sentry/bases/account.html
index 15376946e2..a445f652f8 100644
--- a/src/sentry/templates/sentry/bases/account.html
+++ b/src/sentry/templates/sentry/bases/account.html
@@ -41,6 +41,9 @@
           <li{% if page == 'identities' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings-identities' %}">{% trans "Identities" %}</a></li>
         {% endif %}
         <li{% if page == 'security' %} class="active"{% endif %}><a href="{% url 'sentry-account-security' %}">{% trans "Security" %}</a></li>
+        {% if has_newsletters %}
+          <li{% if page == 'subscriptions' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings-subscriptions' %}">{% trans "Subscriptions" %}</a></li>
+        {% endif %}
       </ul>
     {% endblock %}
 
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 2e2cc2413f..ad13e24e0b 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -18,7 +18,7 @@ from django.utils.translation import ugettext_lazy as _
 
 from sentry import options
 from sentry.auth import password_validation
-from sentry.app import ratelimiter
+from sentry.app import ratelimiter, newsletter
 from sentry.constants import LANGUAGES
 from sentry.models import (
     Organization, OrganizationStatus, User, UserOption, UserOptionValue
@@ -163,6 +163,16 @@ class RegistrationForm(forms.ModelForm):
         widget=forms.TextInput(attrs={'placeholder': 'you@example.com'}))
     password = forms.CharField(
         widget=forms.PasswordInput(attrs={'placeholder': 'something super secret'}))
+    subscribe = forms.BooleanField(
+        label=_('Subscribe to product updates newsletter'),
+        required=False,
+        initial=True,
+    )
+
+    def __init__(self, *args, **kwargs):
+        super(RegistrationForm, self).__init__(*args, **kwargs)
+        if not newsletter.enabled:
+            del self.fields['subscribe']
 
     class Meta:
         fields = ('username',)
@@ -187,6 +197,9 @@ class RegistrationForm(forms.ModelForm):
         user.set_password(self.cleaned_data['password'])
         if commit:
             user.save()
+            if self.cleaned_data.get('subscribe'):
+                newsletter.create_or_update_subscription(
+                    user, list_id=newsletter.DEFAULT_LIST_ID)
         return user
 
 
diff --git a/src/sentry/web/frontend/account_security.py b/src/sentry/web/frontend/account_security.py
index 5959b09fa3..f593608f7e 100644
--- a/src/sentry/web/frontend/account_security.py
+++ b/src/sentry/web/frontend/account_security.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from sentry.app import newsletter
 from sentry.models import Authenticator
 from sentry.utils.auth import get_auth_providers
 from sentry.web.frontend.base import BaseView
@@ -11,4 +12,5 @@ class AccountSecurityView(BaseView):
             'page': 'security',
             'has_2fa': Authenticator.objects.user_has_2fa(request.user),
             'AUTH_PROVIDERS': get_auth_providers(),
+            'has_newsletters': newsletter.is_enabled,
         })
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 8407fa27be..584a39f573 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -27,6 +27,7 @@ from social_auth.backends import get_backend
 from social_auth.models import UserSocialAuth
 from sudo.decorators import sudo_required
 
+from sentry.app import newsletter
 from sentry.models import (
     UserEmail, LostPasswordHash, Project, UserOption, Authenticator
 )
@@ -273,6 +274,7 @@ def account_settings(request):
         'has_2fa': Authenticator.objects.user_has_2fa(request.user),
         'AUTH_PROVIDERS': auth.get_auth_providers(),
         'email': UserEmail.get_primary_email(user),
+        'has_newsletters': newsletter.is_enabled,
     })
     return render_to_response('sentry/account/settings.html', context, request)
 
@@ -294,6 +296,7 @@ def twofactor_settings(request):
         'page': 'security',
         'has_2fa': any(x.is_enrolled and not x.is_backup_interface for x in interfaces),
         'interfaces': interfaces,
+        'has_newsletters': newsletter.is_enabled,
     })
     return render_to_response('sentry/account/twofactor.html', context, request)
 
@@ -307,6 +310,7 @@ def avatar_settings(request):
     context.update({
         'page': 'avatar',
         'AUTH_PROVIDERS': auth.get_auth_providers(),
+        'has_newsletters': newsletter.is_enabled,
     })
     return render_to_response('sentry/account/avatar.html', context, request)
 
@@ -336,6 +340,7 @@ def appearance_settings(request):
         'form': form,
         'page': 'appearance',
         'AUTH_PROVIDERS': auth.get_auth_providers(),
+        'has_newsletters': newsletter.is_enabled,
     })
     return render_to_response('sentry/account/appearance.html', context, request)
 
@@ -378,6 +383,7 @@ def list_identities(request):
         'identity_list': identity_list,
         'page': 'identities',
         'AUTH_PROVIDERS': AUTH_PROVIDERS,
+        'has_newsletters': newsletter.is_enabled,
     })
     return render_to_response('sentry/account/identities.html', context, request)
 
@@ -480,6 +486,11 @@ def show_emails(request):
                 user_email.set_hash()
                 user_email.save()
                 user.send_confirm_email_singular(user_email)
+                # Update newsletter subscription and mark as unverified
+                newsletter.update_subscription(
+                    user=user,
+                    verified=False,
+                )
                 logger.info('user.email.add', extra={
                     'user_id': user.id,
                     'ip_address': request.META['REMOTE_ADDR'],
@@ -529,5 +540,47 @@ def show_emails(request):
         'alt_emails': alt_emails,
         'page': 'emails',
         'AUTH_PROVIDERS': auth.get_auth_providers(),
+        'has_newsletters': newsletter.is_enabled,
     })
     return render_to_response('sentry/account/emails.html', context, request)
+
+
+@csrf_protect
+@never_cache
+@login_required
+def manage_subscriptions(request):
+    user = request.user
+    email = UserEmail.get_primary_email(user)
+
+    if request.method == 'GET':
+        context = csrf(request)
+        context.update({
+            'page': 'subscriptions',
+            'email': email,
+            'AUTH_PROVIDERS': auth.get_auth_providers(),
+            'has_newsletters': newsletter.is_enabled,
+            'subscriptions': newsletter.get_subscriptions(user),
+        })
+        return render_to_response('sentry/account/subscriptions.html', context, request)
+
+    subscribed = request.POST.get('subscribed') == '1'
+    try:
+        list_id = int(request.POST.get('listId', ''))
+    except ValueError:
+        return HttpResponse('bad request', status=400)
+
+    kwargs = {
+        'list_id': list_id,
+        'subscribed': subscribed,
+        'verified': email.is_verified,
+    }
+    if not subscribed:
+        kwargs['unsubscribed_date'] = timezone.now()
+    else:
+        kwargs['subscribed_date'] = timezone.now()
+
+    newsletter.create_or_update_subscription(
+        user,
+        **kwargs
+    )
+    return HttpResponse()
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index d6916b0f16..d446ff9ec3 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -277,6 +277,8 @@ urlpatterns += patterns(
         name='sentry-account-settings-appearance'),
     url(r'^account/settings/identities/$', accounts.list_identities,
         name='sentry-account-settings-identities'),
+    url(r'^account/settings/subscriptions/$', accounts.manage_subscriptions,
+        name='sentry-account-settings-subscriptions'),
     url(r'^account/settings/identities/(?P<identity_id>[^\/]+)/disconnect/$',
         accounts.disconnect_identity,
         name='sentry-account-disconnect-identity'),
