commit 7ab07b7d059b8f75140f282f6b1984701eeb7f0b
Author: Ben Vinegar <ben@benv.ca>
Date:   Mon Sep 14 10:55:11 2015 -0700

    Can now replace a term in-place using autocomplete results

diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index b78806a850..652a1b2b7c 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -91,6 +91,27 @@ var SearchBar = React.createClass({
     });
   },
 
+  statics: {
+    /**
+     * Given a query, and the current cursor position, return the string-delimiting
+     * index of the search term designated by the cursor.
+     */
+    getLastTermIndex(query, cursor) {
+      // TODO: work with quoted-terms
+      let cursorOffset = query.slice(cursor).search(/\s|$/);
+      return cursor + (cursorOffset === -1 ? 0 : cursorOffset);
+    },
+
+    /**
+     * Returns an array of query terms, including incomplete terms
+     *
+     * e.g. ["is:unassigned", "browser:\"Chrome 33.0\"", "assigned"]
+     */
+    getQueryTerms(query, cursor) {
+      return query.slice(0, cursor).match(/\S+:"[^"]*"?|\S+/g);
+    }
+  },
+
   blur() {
     this.refs.searchInput.getDOMNode().blur();
   },
@@ -141,15 +162,6 @@ var SearchBar = React.createClass({
     return this.refs.searchInput.getDOMNode().selectionStart;
   },
 
-  /**
-   * Returns an array of query terms, including incomplete terms
-   *
-   * e.g. ["is:unassigned", "browser:\"Chrome 33.0\"", "assigned"]
-   */
-  getQueryTerms(query, cursor) {
-    return query.slice(0, cursor).match(/\S+:"[^"]*"?|\S+/g);
-  },
-
   /**
    * Returns a tag object matching the given tag name. Includes
    * predefined tags (e..g "is:" and "assigned:").
@@ -259,7 +271,9 @@ var SearchBar = React.createClass({
 
     var cursor = this.getCursorPosition();
     var query = this.state.query;
-    let terms = this.getQueryTerms(query);
+
+    let lastTermIndex = SearchBar.getLastTermIndex(query, cursor);
+    let terms = SearchBar.getQueryTerms(query.slice(0, lastTermIndex));
 
     if (!terms || // no terms
         terms.length === 0 || // no terms
@@ -366,7 +380,8 @@ var SearchBar = React.createClass({
     let cursor = this.getCursorPosition();
     let query = this.state.query;
 
-    let terms = this.getQueryTerms(query);
+    let lastTermIndex = SearchBar.getLastTermIndex(query, cursor);
+    let terms = SearchBar.getQueryTerms(query.slice(0, lastTermIndex));
     let newQuery;
 
     // If not postfixed with : (tag value), add trailing space
@@ -377,7 +392,7 @@ var SearchBar = React.createClass({
     } else {
       let last = terms.pop();
 
-      newQuery = query.slice(0, cursor); // get text preceding cursor
+      newQuery = query.slice(0, lastTermIndex); // get text preceding last term
 
       newQuery = last.indexOf(':') > -1
         // tag key present: replace everything after colon with replaceText
@@ -385,7 +400,7 @@ var SearchBar = React.createClass({
         // no tag key present: replace last token with replaceText
         : newQuery.replace(/\S+$/, replaceText);
 
-      newQuery = newQuery.concat(query.slice(cursor));
+      newQuery = newQuery.concat(query.slice(lastTermIndex));
     }
 
     // prevent enter keypress from losing focus
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index 4381864f1b..bb801250df 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -41,17 +41,27 @@ describe("SearchBar", function() {
 
   describe("getQueryTerms()", function () {
     it ("should extract query terms from a query string", function () {
-      let searchBar = React.render(<this.ContextStubbedSearchBar/>, document.body).refs.wrapped;
-      let query;
-
-      query = "tagname: ";
-      expect(searchBar.getQueryTerms(query, query.length)).to.eql(["tagname:"]);
+      let query = "tagname: ";
+      expect(SearchBar.getQueryTerms(query, query.length)).to.eql(["tagname:"]);
 
       query = "tagname:derp browser:";
-      expect(searchBar.getQueryTerms(query, query.length)).to.eql(["tagname:derp", "browser:"]);
+      expect(SearchBar.getQueryTerms(query, query.length)).to.eql(["tagname:derp", "browser:"]);
 
       query = "   browser:\"Chrome 33.0\"    ";
-      expect(searchBar.getQueryTerms(query, query.length)).to.eql(["browser:\"Chrome 33.0\""]);
+      expect(SearchBar.getQueryTerms(query, query.length)).to.eql(["browser:\"Chrome 33.0\""]);
+    });
+  });
+
+  describe("getLastTermIndex()", function () {
+    it("should provide the index of the last query term, given cursor index", function () {
+      let query = "tagname:";
+      expect(SearchBar.getLastTermIndex(query, 0)).to.eql(8);
+
+      query = "tagname:foo"; // 'f' (index 9)
+      expect(SearchBar.getLastTermIndex(query, 9)).to.eql(11);
+
+      query = "tagname:foo anothertag:bar"; // 'f' (index 9)
+      expect(SearchBar.getLastTermIndex(query, 9)).to.eql(11);
     });
   });
 
