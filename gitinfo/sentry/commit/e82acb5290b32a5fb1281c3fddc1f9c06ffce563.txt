commit e82acb5290b32a5fb1281c3fddc1f9c06ffce563
Author: Colleen O'Rourke <colleen@sentry.io>
Date:   Tue Feb 18 15:04:41 2020 -0800

    feat(Slack): Instrument Slack to emit Datadog metrics (#17060)
    
    * feat(Slack): Instrument Slack to emit Datadog metrics

diff --git a/src/sentry/integrations/slack/action_endpoint.py b/src/sentry/integrations/slack/action_endpoint.py
index 1970d1aa97..9db8fb11ba 100644
--- a/src/sentry/integrations/slack/action_endpoint.py
+++ b/src/sentry/integrations/slack/action_endpoint.py
@@ -11,7 +11,7 @@ from sentry.utils import json
 
 from .link_identity import build_linking_url
 from .requests import SlackActionRequest, SlackRequestError
-from .utils import build_group_attachment, logger
+from .utils import build_group_attachment, logger, track_response_code
 
 LINK_IDENTITY_MESSAGE = "Looks like you haven't linked your Sentry account with your Slack identity yet! <{associate_url}|Link your identity now> to perform actions in Sentry through Slack."
 
@@ -122,9 +122,11 @@ class SlackActionEndpoint(Endpoint):
 
         session = http.build_session()
         req = session.post("https://slack.com/api/dialog.open", data=payload)
+        status_code = req.status_code
         resp = req.json()
         if not resp.get("ok"):
             logger.error("slack.action.response-error", extra={"response": resp})
+        track_response_code(status_code, resp.get("ok"))
 
     def construct_reply(self, attachment, is_message=False):
         # XXX(epurkhiser): Slack is inconsistent about it's expected responses
@@ -229,10 +231,11 @@ class SlackActionEndpoint(Endpoint):
             # use the original response_url to update the link attachment
             session = http.build_session()
             req = session.post(slack_request.callback_data["orig_response_url"], json=body)
+            status_code = req.status_code
             resp = req.json()
             if not resp.get("ok"):
                 logger.error("slack.action.response-error", extra={"response": resp})
-
+            track_response_code(status_code, resp.get("ok"))
             return self.respond()
 
         # Usually we'll want to respond with the updated attachment including
diff --git a/src/sentry/integrations/slack/event_endpoint.py b/src/sentry/integrations/slack/event_endpoint.py
index 4313b5ae63..078adc4265 100644
--- a/src/sentry/integrations/slack/event_endpoint.py
+++ b/src/sentry/integrations/slack/event_endpoint.py
@@ -14,7 +14,7 @@ from sentry.incidents.models import Incident
 from sentry.models import Group, Project
 
 from .requests import SlackEventRequest, SlackRequestError
-from .utils import build_group_attachment, build_incident_attachment, logger
+from .utils import build_group_attachment, build_incident_attachment, logger, track_response_code
 
 # XXX(dcramer): this could be more tightly bound to our configured domain,
 # but slack limits what we can unfurl anyways so its probably safe
@@ -124,11 +124,12 @@ class SlackEventEndpoint(Endpoint):
 
         session = http.build_session()
         req = session.post("https://slack.com/api/chat.unfurl", data=payload)
+        status_code = req.status_code
+        response = req.json()
+        track_response_code(status_code, response.get("ok"))
         req.raise_for_status()
-        resp = req.json()
-        if not resp.get("ok"):
-            logger.error("slack.event.unfurl-error", extra={"response": resp})
-
+        if not response.get("ok"):
+            logger.error("slack.event.unfurl-error", extra={"response": response})
         return self.respond()
 
     # TODO(dcramer): implement app_uninstalled and tokens_revoked
diff --git a/src/sentry/integrations/slack/integration.py b/src/sentry/integrations/slack/integration.py
index 757f26656a..d61b6847ee 100644
--- a/src/sentry/integrations/slack/integration.py
+++ b/src/sentry/integrations/slack/integration.py
@@ -13,6 +13,7 @@ from sentry.integrations import (
 )
 from sentry.pipeline import NestedPipelineView
 from sentry.utils.http import absolute_uri
+from .utils import track_response_code
 
 DESCRIPTION = """
 Connect your Sentry organization to one or more Slack workspaces, and start
@@ -112,7 +113,9 @@ class SlackIntegrationProvider(IntegrationProvider):
         session = http.build_session()
         resp = session.get("https://slack.com/api/team.info", params=payload)
         resp.raise_for_status()
+        status_code = resp.status_code
         resp = resp.json()
+        track_response_code(status_code, resp.get("ok"))
 
         return resp["team"]
 
@@ -122,7 +125,9 @@ class SlackIntegrationProvider(IntegrationProvider):
         session = http.build_session()
         resp = session.get("https://slack.com/api/auth.test", params=payload)
         resp.raise_for_status()
+        status_code = resp.status_code
         resp = resp.json()
+        track_response_code(status_code, resp.get("ok"))
 
         return resp["user_id"]
 
diff --git a/src/sentry/integrations/slack/link_identity.py b/src/sentry/integrations/slack/link_identity.py
index 603181a1d1..2458d7b2e8 100644
--- a/src/sentry/integrations/slack/link_identity.py
+++ b/src/sentry/integrations/slack/link_identity.py
@@ -13,7 +13,7 @@ from sentry.utils.signing import sign, unsign
 from sentry.web.frontend.base import BaseView
 from sentry.web.helpers import render_to_response
 
-from .utils import logger
+from .utils import logger, track_response_code
 
 
 def build_linking_url(integration, organization, slack_id, channel_id, response_url):
@@ -84,6 +84,7 @@ class SlackLinkIdentityView(BaseView):
 
         session = http.build_session()
         req = session.post(params["response_url"], json=payload)
+        status_code = req.status_code
         resp = req.json()
 
         # If the user took their time to link their slack account, we may no
@@ -93,6 +94,7 @@ class SlackLinkIdentityView(BaseView):
         # XXX(epurkhiser): Yes the error string has a space in it.
         if not resp.get("ok") and resp.get("error") != "Expired url":
             logger.error("slack.link-notify.response-error", extra={"response": resp})
+        track_response_code(status_code, resp.get("ok"))
 
         return render_to_response(
             "sentry/slack-linked.html",
diff --git a/src/sentry/integrations/slack/notify_action.py b/src/sentry/integrations/slack/notify_action.py
index c044a14ea6..168921ef39 100644
--- a/src/sentry/integrations/slack/notify_action.py
+++ b/src/sentry/integrations/slack/notify_action.py
@@ -8,7 +8,7 @@ from sentry.rules.actions.base import EventAction
 from sentry.utils import metrics, json
 from sentry.models import Integration
 
-from .utils import build_group_attachment, get_channel_id, strip_channel_name
+from .utils import build_group_attachment, get_channel_id, strip_channel_name, track_response_code
 
 
 class SlackNotifyServiceForm(forms.Form):
@@ -115,13 +115,15 @@ class SlackNotifyServiceAction(EventAction):
 
             session = http.build_session()
             resp = session.post("https://slack.com/api/chat.postMessage", data=payload, timeout=5)
+            status_code = resp.status_code
+            response = resp.json()
+            track_response_code(status_code, response.get("ok"))
             resp.raise_for_status()
-            resp = resp.json()
-            if not resp.get("ok"):
+            if not response.get("ok"):
                 self.logger.info(
                     "rule.fail.slack_post",
                     extra={
-                        "error": resp.get("error"),
+                        "error": response.get("error"),
                         "project_id": event.project_id,
                         "event_id": event.event_id,
                     },
diff --git a/src/sentry/integrations/slack/utils.py b/src/sentry/integrations/slack/utils.py
index d4a83f1ae2..9799edb720 100644
--- a/src/sentry/integrations/slack/utils.py
+++ b/src/sentry/integrations/slack/utils.py
@@ -11,7 +11,7 @@ from sentry import tagstore
 from sentry.api.fields.actor import Actor
 from sentry.incidents.logic import get_incident_aggregates
 from sentry.incidents.models import IncidentStatus
-from sentry.utils import json
+from sentry.utils import metrics, json
 from sentry.utils.assets import get_asset_url
 from sentry.utils.dates import to_timestamp
 from sentry.utils.http import absolute_uri
@@ -43,6 +43,15 @@ MEMBER_PREFIX = "@"
 CHANNEL_PREFIX = "#"
 strip_channel_chars = "".join([MEMBER_PREFIX, CHANNEL_PREFIX])
 SLACK_DEFAULT_TIMEOUT = 10
+SLACK_DATADOG_METRIC = "integrations.slack.http_response"
+
+
+def track_response_code(status_code, is_ok):
+    metrics.incr(
+        SLACK_DATADOG_METRIC,
+        sample_rate=1.0,
+        tags={"ok": False if is_ok is False else True, "status": status_code},
+    )
 
 
 def format_actor_option(actor):
@@ -381,7 +390,9 @@ def get_channel_id_with_timeout(integration, name, timeout):
                 # Slack limits the response of `<list_type>.list` to 1000 channels
                 params=dict(payload, cursor=cursor, limit=1000),
             )
+            status_code = items.status_code
             items = items.json()
+            track_response_code(status_code, items.get("ok"))
             if not items.get("ok"):
                 logger.info(
                     "rule.slack.%s_list_failed" % list_type, extra={"error": items.get("error")}
@@ -413,7 +424,9 @@ def send_incident_alert_notification(integration, incident, channel):
 
     session = http.build_session()
     resp = session.post("https://slack.com/api/chat.postMessage", data=payload, timeout=5)
+    status_code = resp.status_code
+    response = resp.json()
+    track_response_code(status_code, response.get("ok"))
     resp.raise_for_status()
-    resp = resp.json()
-    if not resp.get("ok"):
-        logger.info("rule.fail.slack_post", extra={"error": resp.get("error")})
+    if not response.get("ok"):
+        logger.info("rule.fail.slack_post", extra={"error": response.get("error")})
