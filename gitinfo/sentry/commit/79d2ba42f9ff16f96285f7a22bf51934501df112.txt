commit 79d2ba42f9ff16f96285f7a22bf51934501df112
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu May 17 11:52:00 2018 -0700

    feat(ui): Allow uploading Org/Team avatars (#8360)

diff --git a/src/sentry/static/sentry/app/actionCreators/teams.jsx b/src/sentry/static/sentry/app/actionCreators/teams.jsx
index 056f6505fd..738fb11004 100644
--- a/src/sentry/static/sentry/app/actionCreators/teams.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/teams.jsx
@@ -37,6 +37,10 @@ export function fetchTeamDetails(api, params, options) {
   });
 }
 
+export function updateTeamSuccess(teamId, data) {
+  TeamActions.updateSuccess(teamId, data);
+}
+
 export function updateTeam(api, params, options) {
   let endpoint = `/teams/${params.orgId}/${params.teamId}/`;
   TeamActions.update(params.teamId, params.data);
@@ -45,7 +49,7 @@ export function updateTeam(api, params, options) {
     method: 'PUT',
     data: params.data,
     success: data => {
-      TeamActions.updateSuccess(params.teamId, data);
+      updateTeamSuccess(params.teamId, data);
       doCallback(options, 'success', data);
     },
     error: error => {
diff --git a/src/sentry/static/sentry/app/components/avatar/baseAvatar.jsx b/src/sentry/static/sentry/app/components/avatar/baseAvatar.jsx
index b666a3ed81..d266fcedba 100644
--- a/src/sentry/static/sentry/app/components/avatar/baseAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar/baseAvatar.jsx
@@ -22,6 +22,15 @@ class BaseAvatar extends React.Component {
     default: PropTypes.string,
     hasTooltip: PropTypes.bool,
     type: PropTypes.string,
+    /**
+     * Path to uploaded avatar (differs based on model type)
+     */
+    uploadPath: PropTypes.oneOf([
+      'avatar',
+      'team-avatar',
+      'organization-avatar',
+      'project-avatar',
+    ]),
     uploadId: PropTypes.string,
     gravatarId: PropTypes.string,
     letterId: PropTypes.string,
@@ -35,6 +44,7 @@ class BaseAvatar extends React.Component {
     style: {},
     hasTooltip: false,
     type: 'letter_avatar',
+    uploadPath: 'avatar',
   };
 
   constructor(...args) {
@@ -74,9 +84,11 @@ class BaseAvatar extends React.Component {
   };
 
   buildUploadUrl = () => {
-    let {uploadId} = this.props;
+    let {uploadPath, uploadId} = this.props;
 
-    return `/avatar/${uploadId}/?${qs.stringify({s: this.getRemoteImageSize()})}`;
+    return `/${uploadPath || 'avatar'}/${uploadId}/?${qs.stringify({
+      s: 120,
+    })}`;
   };
 
   handleLoad = () => {
diff --git a/src/sentry/static/sentry/app/components/avatar/index.jsx b/src/sentry/static/sentry/app/components/avatar/index.jsx
index 630c80876c..354dab4007 100644
--- a/src/sentry/static/sentry/app/components/avatar/index.jsx
+++ b/src/sentry/static/sentry/app/components/avatar/index.jsx
@@ -1,16 +1,17 @@
 import React from 'react';
 
 import SentryTypes from 'app/proptypes';
-import SlugAvatar from 'app/components/avatar/slugAvatar';
 import TeamAvatar from 'app/components/avatar/teamAvatar';
+import OrganizationAvatar from 'app/components/avatar/organizationAvatar';
+import ProjectAvatar from 'app/components/avatar/projectAvatar';
 import UserAvatar from 'app/components/avatar/userAvatar';
 
 class Avatar extends React.Component {
   static propTypes = {
     team: SentryTypes.Team,
     organization: SentryTypes.Organization,
+    project: SentryTypes.Project,
     ...UserAvatar.propTypes,
-    ...SlugAvatar.propTypes,
   };
 
   static defaultProps = {
@@ -18,7 +19,7 @@ class Avatar extends React.Component {
   };
 
   render() {
-    let {user, team, organization, ...props} = this.props;
+    let {user, team, project, organization, ...props} = this.props;
 
     if (user) {
       return <UserAvatar user={user} {...props} />;
@@ -28,8 +29,12 @@ class Avatar extends React.Component {
       return <TeamAvatar team={team} {...props} />;
     }
 
+    if (project) {
+      return <ProjectAvatar project={project} {...props} />;
+    }
+
     // Could support project too
-    return <SlugAvatar model={organization} {...props} />;
+    return <OrganizationAvatar organization={organization} {...props} />;
   }
 }
 
diff --git a/src/sentry/static/sentry/app/components/avatar/organizationAvatar.jsx b/src/sentry/static/sentry/app/components/avatar/organizationAvatar.jsx
new file mode 100644
index 0000000000..7dd2857ca9
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/avatar/organizationAvatar.jsx
@@ -0,0 +1,32 @@
+import React from 'react';
+
+import {explodeSlug} from 'app/utils';
+import BaseAvatar from 'app/components/avatar/baseAvatar';
+import SentryTypes from 'app/proptypes';
+
+class OrganizationAvatar extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization.isRequired,
+    ...BaseAvatar.propTypes,
+  };
+
+  render() {
+    let {organization, ...props} = this.props;
+    if (!organization) return null;
+    let slug = (organization && organization.slug) || '';
+    let title = explodeSlug(slug);
+
+    return (
+      <BaseAvatar
+        {...props}
+        type={(organization.avatar && organization.avatar.avatarType) || 'letter_avatar'}
+        uploadPath="organization-avatar"
+        uploadId={organization.avatar && organization.avatar.avatarUuid}
+        letterId={slug}
+        tooltip={slug}
+        title={title}
+      />
+    );
+  }
+}
+export default OrganizationAvatar;
diff --git a/src/sentry/static/sentry/app/components/avatar/projectAvatar.jsx b/src/sentry/static/sentry/app/components/avatar/projectAvatar.jsx
new file mode 100644
index 0000000000..e9c78bf04f
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/avatar/projectAvatar.jsx
@@ -0,0 +1,32 @@
+import React from 'react';
+
+import {explodeSlug} from 'app/utils';
+import BaseAvatar from 'app/components/avatar/baseAvatar';
+import SentryTypes from 'app/proptypes';
+
+class ProjectAvatar extends React.Component {
+  static propTypes = {
+    project: SentryTypes.Project.isRequired,
+    ...BaseAvatar.propTypes,
+  };
+
+  render() {
+    let {project, ...props} = this.props;
+    if (!project) return null;
+    let slug = (project && project.slug) || '';
+    let title = explodeSlug(slug);
+
+    return (
+      <BaseAvatar
+        {...props}
+        type={(project.avatar && project.avatar.avatarType) || 'letter_avatar'}
+        uploadPath="project-avatar"
+        uploadId={project.avatar && project.avatar.avatarUuid}
+        letterId={slug}
+        tooltip={slug}
+        title={title}
+      />
+    );
+  }
+}
+export default ProjectAvatar;
diff --git a/src/sentry/static/sentry/app/components/avatar/slugAvatar.jsx b/src/sentry/static/sentry/app/components/avatar/slugAvatar.jsx
deleted file mode 100644
index f06e5a24e0..0000000000
--- a/src/sentry/static/sentry/app/components/avatar/slugAvatar.jsx
+++ /dev/null
@@ -1,36 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import {explodeSlug} from 'app/utils';
-import BaseAvatar from 'app/components/avatar/baseAvatar';
-
-class SlugAvatar extends React.Component {
-  static propTypes = {
-    model: PropTypes.shape({
-      slug: PropTypes.string.isRequired,
-    }),
-    ...BaseAvatar.propTypes,
-  };
-
-  render() {
-    let {model, ...props} = this.props;
-    if (!model) return null;
-    let slug = (model && model.slug) || '';
-
-    // Letter avatar uses letters from first 2 words
-    // Previously we used displayName (which allows spaces) but is deprecated in
-    // favor of using slugs only (which do not allow spaces)
-    let title = explodeSlug(slug);
-
-    return (
-      <BaseAvatar
-        {...props}
-        type="letter_avatar"
-        letterId={slug}
-        tooltip={slug}
-        title={title}
-      />
-    );
-  }
-}
-export default SlugAvatar;
diff --git a/src/sentry/static/sentry/app/components/avatar/teamAvatar.jsx b/src/sentry/static/sentry/app/components/avatar/teamAvatar.jsx
index a301645915..70135b7ea5 100644
--- a/src/sentry/static/sentry/app/components/avatar/teamAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar/teamAvatar.jsx
@@ -20,7 +20,9 @@ class TeamAvatar extends React.Component {
     return (
       <BaseAvatar
         {...props}
-        type="letter_avatar"
+        type={(team.avatar && team.avatar.avatarType) || 'letter_avatar'}
+        uploadPath="team-avatar"
+        uploadId={team.avatar && team.avatar.avatarUuid}
         letterId={slug}
         tooltip={tooltip}
         title={title}
diff --git a/src/sentry/static/sentry/app/components/avatar/userAvatar.jsx b/src/sentry/static/sentry/app/components/avatar/userAvatar.jsx
index 63a2f9e00f..43f7727344 100644
--- a/src/sentry/static/sentry/app/components/avatar/userAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar/userAvatar.jsx
@@ -38,6 +38,7 @@ class UserAvatar extends React.Component {
       <BaseAvatar
         {...props}
         type={type}
+        uploadPath="avatar"
         uploadId={user.avatar && user.avatar.avatarUuid}
         gravatarId={user && user.email && user.email.toLowerCase()}
         letterId={user.email || user.username || user.id || user.ip_address}
diff --git a/src/sentry/static/sentry/app/components/avatarChooser.jsx b/src/sentry/static/sentry/app/components/avatarChooser.jsx
new file mode 100644
index 0000000000..fd7344cdc4
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/avatarChooser.jsx
@@ -0,0 +1,230 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import createReactClass from 'create-react-class';
+import styled from 'react-emotion';
+
+import {Panel, PanelBody, PanelHeader} from './panels';
+import {addErrorMessage, addSuccessMessage} from '../actionCreators/indicator';
+import {t} from '../locale';
+import ApiMixin from '../mixins/apiMixin';
+import Avatar from './avatar';
+import AvatarCropper from './avatarCropper';
+import Button from './buttons/button';
+import ExternalLink from './externalLink';
+import LoadingError from './loadingError';
+import LoadingIndicator from './loadingIndicator';
+import RadioGroup from '../views/settings/components/forms/controls/radioGroup';
+
+const AvatarChooser = createReactClass({
+  displayName: 'AvatarChooser',
+
+  propTypes: {
+    endpoint: PropTypes.string.isRequired,
+    allowGravatar: PropTypes.bool,
+    allowLetter: PropTypes.bool,
+    allowUpload: PropTypes.bool,
+    type: PropTypes.oneOf(['user', 'team', 'organization', 'project']),
+    model: PropTypes.shape({
+      avatar: PropTypes.shape({
+        avatarType: PropTypes.oneOf(['upload', 'letter_avatar', 'gravatar']),
+      }),
+    }),
+    // Is this a chooser for a User account?
+    isUser: PropTypes.bool,
+    savedDataUrl: PropTypes.string,
+    onSave: PropTypes.func,
+  },
+
+  mixins: [ApiMixin],
+
+  getDefaultProps() {
+    return {
+      allowGravatar: true,
+      allowLetter: true,
+      allowUpload: true,
+      onSave: () => {},
+    };
+  },
+
+  getInitialState() {
+    return {
+      model: this.props.model,
+      savedDataUrl: null,
+      dataUrl: null,
+      hasError: false,
+    };
+  },
+
+  componentWillReceiveProps(nextProps) {
+    // Update local state if defined in props
+    if (typeof nextProps.model !== 'undefined') {
+      this.setState({model: nextProps.model});
+    }
+  },
+
+  updateState(model) {
+    this.setState({model});
+  },
+
+  updateDataUrlState(dataUrlState) {
+    this.setState(dataUrlState);
+  },
+
+  handleError(msg) {
+    addErrorMessage(msg);
+  },
+
+  handleSuccess(model) {
+    let {onSave} = this.props;
+    this.setState({model});
+    onSave(model);
+    addSuccessMessage(t('Successfully saved avatar preferences'));
+  },
+
+  handleSaveSettings(ev) {
+    let {endpoint} = this.props;
+    let {model, dataUrl} = this.state;
+    ev.preventDefault();
+    let data = {};
+    let avatarType = model && model.avatar ? model.avatar.avatarType : undefined;
+    let avatarPhoto = dataUrl ? dataUrl.split(',')[1] : null;
+
+    data = {
+      avatar_photo: avatarPhoto,
+      avatar_type: avatarType,
+    };
+
+    this.api.request(endpoint, {
+      method: 'PUT',
+      data,
+      success: resp => {
+        this.setState({savedDataUrl: this.state.dataUrl});
+        this.handleSuccess(resp);
+      },
+      error: this.handleError.bind(this, 'There was an error saving your preferences.'),
+    });
+  },
+
+  handleChange(id) {
+    let model = {...this.state.model};
+    model.avatar.avatarType = id;
+    this.updateState(model);
+  },
+
+  render() {
+    let {
+      allowGravatar,
+      allowUpload,
+      allowLetter,
+      savedDataUrl,
+      type,
+      isUser,
+    } = this.props;
+    let {hasError, model} = this.state;
+
+    if (hasError) {
+      return <LoadingError />;
+    }
+    if (!model) {
+      return <LoadingIndicator />;
+    }
+
+    let avatarType = (model.avatar && model.avatar.avatarType) || 'letter_avatar';
+    let isLetter = avatarType === 'letter_avatar';
+    // let isUpload = avatarType === 'upload';
+    let isTeam = type === 'team';
+    let isOrganization = type === 'organization';
+    let isProject = type === 'project';
+    let choices = [];
+
+    if (allowLetter) {
+      choices.push(['letter_avatar', 'Use initials']);
+    }
+    if (allowUpload) {
+      choices.push(['upload', 'Upload an image']);
+    }
+    if (allowGravatar) {
+      choices.push(['gravatar', 'Use Gravatar']);
+    }
+
+    return (
+      <Panel>
+        <PanelHeader>Avatar</PanelHeader>
+        <PanelBody>
+          <AvatarForm>
+            <AvatarGroup inline={isLetter}>
+              <RadioGroup
+                style={{flex: 1}}
+                choices={choices}
+                value={avatarType}
+                label="Avatar Type"
+                onChange={id => this.handleChange(id)}
+              />
+
+              {isLetter && (
+                <Avatar
+                  gravatar={false}
+                  style={{width: 90, height: 90}}
+                  user={isUser ? model : null}
+                  organization={isOrganization ? model : null}
+                  project={isProject ? model : null}
+                  team={isTeam ? model : null}
+                />
+              )}
+            </AvatarGroup>
+
+            <AvatarUploadSection>
+              {allowGravatar &&
+                avatarType === 'gravatar' && (
+                  <div className="well">
+                    {t('Gravatars are managed through ')}
+                    <ExternalLink href="http://gravatar.com">Gravatar.com</ExternalLink>
+                  </div>
+                )}
+
+              {avatarType === 'upload' && (
+                <AvatarCropper
+                  {...this.props}
+                  model={model}
+                  savedDataUrl={savedDataUrl}
+                  updateDataUrlState={this.updateDataUrlState}
+                />
+              )}
+              <AvatarSubmit className="form-actions">
+                <Button
+                  type="button"
+                  priority="primary"
+                  onClick={this.handleSaveSettings}
+                >
+                  {t('Save Avatar')}
+                </Button>
+              </AvatarSubmit>
+            </AvatarUploadSection>
+          </AvatarForm>
+        </PanelBody>
+      </Panel>
+    );
+  },
+});
+
+const AvatarGroup = styled.div`
+  display: flex;
+  flex-direction: ${p => (p.inline ? 'row' : 'column')};
+`;
+
+const AvatarForm = styled('div')`
+  line-height: 1.5em;
+  padding: 1em 1.25em;
+`;
+
+const AvatarSubmit = styled('fieldset')`
+  display: flex;
+  justify-content: flex-end;
+  margin-top: 1em;
+`;
+
+const AvatarUploadSection = styled('div')`
+  margin-top: 1em;
+`;
+
+export default AvatarChooser;
diff --git a/src/sentry/static/sentry/app/components/avatarCropper.jsx b/src/sentry/static/sentry/app/components/avatarCropper.jsx
index 815c573050..3062f30085 100644
--- a/src/sentry/static/sentry/app/components/avatarCropper.jsx
+++ b/src/sentry/static/sentry/app/components/avatarCropper.jsx
@@ -2,12 +2,14 @@ import PropTypes from 'prop-types';
 import React from 'react';
 
 import {addErrorMessage} from 'app/actionCreators/indicator';
+import {AVATAR_URL_MAP} from 'app/constants';
 import {t} from 'app/locale';
 
 class AvatarCropper extends React.Component {
   static propTypes = {
-    user: PropTypes.object.isRequired,
+    model: PropTypes.object.isRequired,
     updateDataUrlState: PropTypes.func.isRequired,
+    type: PropTypes.oneOf(['user', 'team', 'organization', 'project']),
     savedDataUrl: PropTypes.string,
   };
 
@@ -312,9 +314,10 @@ class AvatarCropper extends React.Component {
   };
 
   getImgSrc = () => {
-    let uuid = this.props.user.avatar.avatarUuid;
-    let photoUrl = uuid && '/avatar/' + uuid + '/';
-    return this.props.savedDataUrl || this.state.objectURL || photoUrl;
+    let {savedDataUrl, model, type} = this.props;
+    let uuid = model.avatar.avatarUuid;
+    let photoUrl = uuid && `/${AVATAR_URL_MAP[type] || 'avatar'}/${uuid}/`;
+    return savedDataUrl || this.state.objectURL || photoUrl;
   };
 
   onImgDrag = ev => {
diff --git a/src/sentry/static/sentry/app/components/idBadge/organizationBadge.jsx b/src/sentry/static/sentry/app/components/idBadge/organizationBadge.jsx
index d1a462fc8f..572bf45152 100644
--- a/src/sentry/static/sentry/app/components/idBadge/organizationBadge.jsx
+++ b/src/sentry/static/sentry/app/components/idBadge/organizationBadge.jsx
@@ -1,11 +1,15 @@
-import React from 'react';
+import {isEqual} from 'lodash';
+import createReactClass from 'create-react-class';
 import PropTypes from 'prop-types';
+import React from 'react';
+import Reflux from 'reflux';
 
 import BaseBadge from 'app/components/idBadge/baseBadge';
-import SentryTypes from 'app/proptypes';
 import BadgeDisplayName from 'app/components/idBadge/badgeDisplayName';
+import OrganizationStore from 'app/stores/organizationsStore';
+import SentryTypes from 'app/proptypes';
 
-export default class OrganizationBadge extends React.Component {
+class OrganizationBadge extends React.Component {
   static propTypes = {
     ...BaseBadge.propTypes,
     organization: SentryTypes.Organization.isRequired,
@@ -39,3 +43,39 @@ export default class OrganizationBadge extends React.Component {
     );
   }
 }
+
+const OrganizationBadgeContainer = createReactClass({
+  displayName: 'OrganizationBadgeContainer',
+  propTypes: {
+    organization: SentryTypes.Organization.isRequired,
+  },
+  mixins: [Reflux.listenTo(OrganizationStore, 'onOrganizationStoreUpdate')],
+  getInitialState() {
+    return {
+      organization: this.props.organization,
+    };
+  },
+
+  componentWillReceiveProps(nextProps) {
+    if (this.state.organization === nextProps.organization) return;
+    if (isEqual(this.state.organization, nextProps.organization)) return;
+
+    this.setState({
+      organization: nextProps.organization,
+    });
+  },
+
+  onOrganizationStoreUpdate() {
+    let org = OrganizationStore.get(this.state.organization.slug);
+    if (isEqual(org.avatar, this.state.organization.avatar)) return;
+
+    this.setState({
+      organization: OrganizationStore.get(this.state.organization.slug),
+    });
+  },
+
+  render() {
+    return <OrganizationBadge {...this.props} organization={this.state.organization} />;
+  },
+});
+export default OrganizationBadgeContainer;
diff --git a/src/sentry/static/sentry/app/components/idBadge/teamBadge.jsx b/src/sentry/static/sentry/app/components/idBadge/teamBadge.jsx
index 595a053562..9db155db51 100644
--- a/src/sentry/static/sentry/app/components/idBadge/teamBadge.jsx
+++ b/src/sentry/static/sentry/app/components/idBadge/teamBadge.jsx
@@ -1,11 +1,15 @@
+import {isEqual} from 'lodash';
+import createReactClass from 'create-react-class';
 import React from 'react';
+import Reflux from 'reflux';
 import PropTypes from 'prop-types';
 
 import BaseBadge from 'app/components/idBadge/baseBadge';
-import SentryTypes from 'app/proptypes';
 import BadgeDisplayName from 'app/components/idBadge/badgeDisplayName';
+import SentryTypes from 'app/proptypes';
+import TeamStore from 'app/stores/teamStore';
 
-export default class TeamBadge extends React.Component {
+class TeamBadge extends React.Component {
   static propTypes = {
     ...BaseBadge.propTypes,
     team: SentryTypes.Team.isRequired,
@@ -37,3 +41,41 @@ export default class TeamBadge extends React.Component {
     );
   }
 }
+
+const TeamBadgeContainer = createReactClass({
+  displayName: 'TeamBadgeContainer',
+  propTypes: {
+    team: SentryTypes.Team.isRequired,
+  },
+  mixins: [Reflux.listenTo(TeamStore, 'onTeamStoreUpdate')],
+  getInitialState() {
+    return {
+      team: this.props.team,
+    };
+  },
+
+  componentWillReceiveProps(nextProps) {
+    if (this.state.team === nextProps.team) return;
+    if (isEqual(this.state.team, nextProps.team)) return;
+
+    this.setState({
+      team: nextProps.team,
+    });
+  },
+
+  onTeamStoreUpdate(updatedTeam) {
+    if (!updatedTeam.has(this.state.team.id)) return;
+
+    let team = TeamStore.getById(this.state.team.id);
+    if (isEqual(team.avatar, this.state.team.avatar)) return;
+
+    this.setState({
+      team: TeamStore.getById(this.state.team.id),
+    });
+  },
+
+  render() {
+    return <TeamBadge {...this.props} team={this.state.team} />;
+  },
+});
+export default TeamBadgeContainer;
diff --git a/src/sentry/static/sentry/app/constants/index.jsx b/src/sentry/static/sentry/app/constants/index.jsx
index 6c47a3ea37..de5bfcd19a 100644
--- a/src/sentry/static/sentry/app/constants/index.jsx
+++ b/src/sentry/static/sentry/app/constants/index.jsx
@@ -49,4 +49,12 @@ export const DEFAULT_FUSE_OPTIONS = {
   // findAllMatches: true,
 };
 
+// Maps a `type: string` -> `url-prefix: string`
+export const AVATAR_URL_MAP = {
+  team: 'team-avatar',
+  organization: 'organization-avatar',
+  project: 'project-avatar',
+  user: 'avatar',
+};
+
 export const MENU_CLOSE_DELAY = 200;
diff --git a/src/sentry/static/sentry/app/views/settings/account/avatar.jsx b/src/sentry/static/sentry/app/views/settings/account/accountAvatar.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/settings/account/avatar.jsx
rename to src/sentry/static/sentry/app/views/settings/account/accountAvatar.jsx
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountDetails.jsx b/src/sentry/static/sentry/app/views/settings/account/accountDetails.jsx
index 72f99148f6..ae76e9c354 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountDetails.jsx
@@ -1,8 +1,8 @@
 import React from 'react';
 
 import {updateUser} from 'app/actionCreators/account';
-import AccountAvatar from 'app/views/settings/account/avatar';
 import AsyncView from 'app/views/asyncView';
+import AvatarChooser from 'app/components/avatarChooser';
 import Form from 'app/views/settings/components/forms/form';
 import JsonForm from 'app/views/settings/components/forms/jsonForm';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
@@ -29,7 +29,6 @@ class AccountDetails extends AsyncView {
     return (
       <div>
         <SettingsPageHeader title="Account Details" />
-
         <Form
           apiMethod="PUT"
           apiEndpoint={ENDPOINT}
@@ -44,7 +43,6 @@ class AccountDetails extends AsyncView {
             additionalFieldProps={{user}}
           />
         </Form>
-
         <Form
           apiMethod="PUT"
           apiEndpoint={ENDPOINT}
@@ -55,7 +53,12 @@ class AccountDetails extends AsyncView {
           <JsonForm location={this.props.location} forms={accountPreferencesFields} />
         </Form>
 
-        <AccountAvatar onSave={this.handleSubmitSuccess} user={user} />
+        <AvatarChooser
+          endpoint="/users/me/avatar/"
+          model={user}
+          onSave={this.handleSubmitSuccess}
+          isUser
+        />
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx b/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx
index a93ddf4be7..847b2fcbf6 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx
@@ -1,11 +1,12 @@
 import {Box} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
-
 import createReactClass from 'create-react-class';
 
 import {addErrorMessage} from 'app/actionCreators/indicator';
+import {updateOrganization} from 'app/actionCreators/organizations';
 import ApiMixin from 'app/mixins/apiMixin';
+import AvatarChooser from 'app/components/avatarChooser';
 import Form from 'app/views/settings/components/forms/form';
 import JsonForm from 'app/views/settings/components/forms/jsonForm';
 import organizationSettingsFields from 'app/data/forms/organizationGeneralSettings';
@@ -26,12 +27,12 @@ const OrganizationSettingsForm = createReactClass({
 
   render() {
     let {initialData, orgId, onSave, access} = this.props;
-
+    let endpoint = `/organizations/${orgId}/`;
     return (
       <Form
         className="ref-organization-settings"
         apiMethod="PUT"
-        apiEndpoint={`/organizations/${orgId}/`}
+        apiEndpoint={endpoint}
         saveOnBlur
         allowUndo
         initialData={initialData}
@@ -57,6 +58,13 @@ const OrganizationSettingsForm = createReactClass({
             location={this.props.location}
             forms={organizationSettingsFields}
           />
+          <AvatarChooser
+            type="organization"
+            allowGravatar={false}
+            endpoint={`${endpoint}avatar/`}
+            model={initialData}
+            onSave={updateOrganization}
+          />
         </Box>
       </Form>
     );
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsRow.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsRow.jsx
index 80cedc7217..41687f9cb4 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsRow.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsRow.jsx
@@ -9,6 +9,7 @@ import {joinTeam, leaveTeam} from 'app/actionCreators/teams';
 import {t, tct} from 'app/locale';
 import ApiMixin from 'app/mixins/apiMixin';
 import {PanelItem} from 'app/components/panels';
+import IdBadge from 'app/components/idBadge';
 
 // TODO(dcramer): this isnt great UX
 
@@ -115,7 +116,7 @@ const AllTeamsRow = createReactClass({
   render() {
     let {access, team, urlPrefix, openMembership, organization} = this.props;
     let features = new Set(organization.features);
-    let display = features.has('new-teams') ? `#${team.slug}` : team.name;
+    let display = features.has('new-teams') ? <IdBadge team={team} /> : team.name;
     return (
       <PanelItem p={0} align="center">
         <Box flex="1" p={2}>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamDetails.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamDetails.jsx
index ba4a0ef9e7..298c9d9665 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamDetails.jsx
@@ -8,6 +8,7 @@ import {fetchTeamDetails} from 'app/actionCreators/teams';
 import {t} from 'app/locale';
 import ApiMixin from 'app/mixins/apiMixin';
 import DropdownLink from 'app/components/dropdownLink';
+import IdBadge from 'app/components/idBadge';
 import ListLink from 'app/components/listLink';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
@@ -97,7 +98,13 @@ const TeamDetails = createReactClass({
     const features = new Set(this.context.organization.features);
     return (
       <div>
-        <h3>{features.has('new-teams') ? `#${team.slug}` : team.name}</h3>
+        <h3>
+          {features.has('new-teams') ? (
+            <IdBadge hideAvatar team={team} avatarSize={36} />
+          ) : (
+            team.name
+          )}
+        </h3>
 
         {!features.has('new-settings') &&
           access.has('team:admin') && (
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamSettings/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamSettings/index.jsx
index e6ea5ac05d..04a4d00bcf 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamSettings/index.jsx
@@ -4,9 +4,10 @@ import React from 'react';
 
 import {Panel, PanelHeader} from 'app/components/panels';
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
-import {removeTeam} from 'app/actionCreators/teams';
+import {removeTeam, updateTeamSuccess} from 'app/actionCreators/teams';
 import {t, tct} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
+import AvatarChooser from 'app/components/avatarChooser';
 import Button from 'app/components/buttons/button';
 import Confirm from 'app/components/confirm';
 import Field from 'app/views/settings/components/forms/field';
@@ -46,6 +47,7 @@ export default class TeamSettings extends AsyncView {
   }
 
   handleSubmitSuccess = (resp, model, id, change) => {
+    updateTeamSuccess(resp.slug, resp);
     if (id === 'slug') {
       addSuccessMessage(t('Team name changed'));
       this.props.router.push(
@@ -86,6 +88,16 @@ export default class TeamSettings extends AsyncView {
           </Box>
         </Form>
 
+        {organization.features.includes('internal-catchall') && (
+          <AvatarChooser
+            type="team"
+            allowGravatar={false}
+            endpoint={`/teams/${organization.slug}/${team.slug}/avatar/`}
+            model={team}
+            onSave={this.handleSubmitSuccess}
+          />
+        )}
+
         {access.has('team:admin') && (
           <Panel>
             <PanelHeader>{t('Remove Team')}</PanelHeader>
diff --git a/tests/js/spec/components/avatar.spec.jsx b/tests/js/spec/components/avatar.spec.jsx
index 1d3eed8912..2655d08b51 100644
--- a/tests/js/spec/components/avatar.spec.jsx
+++ b/tests/js/spec/components/avatar.spec.jsx
@@ -61,7 +61,7 @@ describe('Avatar', function() {
       );
     });
 
-    it('should show an upload with the correct size', function() {
+    it('should show an upload with the correct size (static 120 size)', function() {
       let user = Object.assign({}, USER, {
         avatar: {
           avatarType: 'upload',
@@ -70,7 +70,7 @@ describe('Avatar', function() {
       });
       let avatar = mount(<Avatar user={user} size={76} />);
       expect(avatar.find('BaseAvatar img').prop('src')).toMatch(
-        '/avatar/2d641b5d-8c74-44de-9cb6-fbd54701b35e/?s=80'
+        '/avatar/2d641b5d-8c74-44de-9cb6-fbd54701b35e/?s=120'
       );
 
       avatar = mount(<Avatar user={user} size={121} />);
@@ -80,12 +80,12 @@ describe('Avatar', function() {
 
       avatar = mount(<Avatar user={user} size={32} />);
       expect(avatar.find('BaseAvatar img').prop('src')).toMatch(
-        '/avatar/2d641b5d-8c74-44de-9cb6-fbd54701b35e/?s=32'
+        '/avatar/2d641b5d-8c74-44de-9cb6-fbd54701b35e/?s=120'
       );
 
       avatar = mount(<Avatar user={user} size={1} />);
       expect(avatar.find('BaseAvatar img').prop('src')).toMatch(
-        '/avatar/2d641b5d-8c74-44de-9cb6-fbd54701b35e/?s=20'
+        '/avatar/2d641b5d-8c74-44de-9cb6-fbd54701b35e/?s=120'
       );
     });
 
diff --git a/tests/js/spec/components/avatar/__snapshots__/avatarList.spec.jsx.snap b/tests/js/spec/components/avatar/__snapshots__/avatarList.spec.jsx.snap
index 69320e27e9..90cf201104 100644
--- a/tests/js/spec/components/avatar/__snapshots__/avatarList.spec.jsx.snap
+++ b/tests/js/spec/components/avatar/__snapshots__/avatarList.spec.jsx.snap
@@ -199,6 +199,7 @@ exports[`AvatarList renders with collapsed avatar count if > 5 users 1`] = `
                   title="Foo Bar"
                   tooltip="Foo Bar (foo@example.com)"
                   type="gravatar"
+                  uploadPath="avatar"
                 >
                   <Tooltip
                     disabled={false}
@@ -332,6 +333,7 @@ exports[`AvatarList renders with collapsed avatar count if > 5 users 1`] = `
                   title="Foo Bar"
                   tooltip="Foo Bar (foo@example.com)"
                   type="gravatar"
+                  uploadPath="avatar"
                 >
                   <Tooltip
                     disabled={false}
@@ -465,6 +467,7 @@ exports[`AvatarList renders with collapsed avatar count if > 5 users 1`] = `
                   title="Foo Bar"
                   tooltip="Foo Bar (foo@example.com)"
                   type="gravatar"
+                  uploadPath="avatar"
                 >
                   <Tooltip
                     disabled={false}
@@ -598,6 +601,7 @@ exports[`AvatarList renders with collapsed avatar count if > 5 users 1`] = `
                   title="Foo Bar"
                   tooltip="Foo Bar (foo@example.com)"
                   type="gravatar"
+                  uploadPath="avatar"
                 >
                   <Tooltip
                     disabled={false}
@@ -731,6 +735,7 @@ exports[`AvatarList renders with collapsed avatar count if > 5 users 1`] = `
                   title="Foo Bar"
                   tooltip="Foo Bar (foo@example.com)"
                   type="gravatar"
+                  uploadPath="avatar"
                 >
                   <Tooltip
                     disabled={false}
@@ -933,6 +938,7 @@ exports[`AvatarList renders with user avatars 1`] = `
                   title="Foo Bar"
                   tooltip="Foo Bar (foo@example.com)"
                   type="gravatar"
+                  uploadPath="avatar"
                 >
                   <Tooltip
                     disabled={false}
@@ -1066,6 +1072,7 @@ exports[`AvatarList renders with user avatars 1`] = `
                   title="Foo Bar"
                   tooltip="Foo Bar (foo@example.com)"
                   type="gravatar"
+                  uploadPath="avatar"
                 >
                   <Tooltip
                     disabled={false}
diff --git a/tests/js/spec/components/avatarCropper.spec.jsx b/tests/js/spec/components/avatarCropper.spec.jsx
index 600c3433be..b97a7c1e22 100644
--- a/tests/js/spec/components/avatarCropper.spec.jsx
+++ b/tests/js/spec/components/avatarCropper.spec.jsx
@@ -17,7 +17,7 @@ describe('AvatarCropper', function() {
         'are positive (cropper is getting smaller)',
       function() {
         let cropper = shallow(
-          <AvatarCropper user={USER} updateDataUrlState={function() {}} />
+          <AvatarCropper model={USER} updateDataUrlState={function() {}} />
         ).instance();
         let diff = cropper.getDiffNW(4, 5);
         expect(diff).toEqual(-4.5);
@@ -29,7 +29,7 @@ describe('AvatarCropper', function() {
         'are negative (cropper is getting bigger)',
       function() {
         let cropper = shallow(
-          <AvatarCropper user={USER} updateDataUrlState={function() {}} />
+          <AvatarCropper model={USER} updateDataUrlState={function() {}} />
         ).instance();
         let diff = cropper.getDiffNW(-4, -5);
         expect(diff).toEqual(4.5);
@@ -43,7 +43,7 @@ describe('AvatarCropper', function() {
         'xDiff is positive (cropper is getting bigger)',
       function() {
         let cropper = shallow(
-          <AvatarCropper user={USER} updateDataUrlState={function() {}} />
+          <AvatarCropper model={USER} updateDataUrlState={function() {}} />
         ).instance();
         let diff = cropper.getDiffNE(-4, 5);
         expect(diff).toEqual(4.5);
@@ -55,7 +55,7 @@ describe('AvatarCropper', function() {
         'xDiff is negative (cropper is getting smaller)',
       function() {
         let cropper = shallow(
-          <AvatarCropper user={USER} updateDataUrlState={function() {}} />
+          <AvatarCropper model={USER} updateDataUrlState={function() {}} />
         ).instance();
         let diff = cropper.getDiffNE(4, -5);
         expect(diff).toEqual(-4.5);
@@ -69,7 +69,7 @@ describe('AvatarCropper', function() {
         'xDiff are positive (cropper is getting bigger)',
       function() {
         let cropper = shallow(
-          <AvatarCropper user={USER} updateDataUrlState={function() {}} />
+          <AvatarCropper model={USER} updateDataUrlState={function() {}} />
         ).instance();
         let diff = cropper.getDiffSE(4, 5);
         expect(diff).toEqual(4.5);
@@ -81,7 +81,7 @@ describe('AvatarCropper', function() {
         'xDiff are negative (cropper is getting smaller)',
       function() {
         let cropper = shallow(
-          <AvatarCropper user={USER} updateDataUrlState={function() {}} />
+          <AvatarCropper model={USER} updateDataUrlState={function() {}} />
         ).instance();
         let diff = cropper.getDiffSE(-4, -5);
         expect(diff).toEqual(-4.5);
@@ -95,7 +95,7 @@ describe('AvatarCropper', function() {
         'xDiff is negative (cropper is getting bigger)',
       function() {
         let cropper = shallow(
-          <AvatarCropper user={USER} updateDataUrlState={function() {}} />
+          <AvatarCropper model={USER} updateDataUrlState={function() {}} />
         ).instance();
         let diff = cropper.getDiffSW(4, -5);
         expect(diff).toEqual(4.5);
@@ -107,7 +107,7 @@ describe('AvatarCropper', function() {
         'xDiff is positive (cropper is getting smaller)',
       function() {
         let cropper = shallow(
-          <AvatarCropper user={USER} updateDataUrlState={function() {}} />
+          <AvatarCropper model={USER} updateDataUrlState={function() {}} />
         ).instance();
         let diff = cropper.getDiffSW(-4, 5);
         expect(diff).toEqual(-4.5);
diff --git a/tests/js/spec/components/group/__snapshots__/suggestedOwners.spec.jsx.snap b/tests/js/spec/components/group/__snapshots__/suggestedOwners.spec.jsx.snap
index ba9806cd01..0173b60d52 100644
--- a/tests/js/spec/components/group/__snapshots__/suggestedOwners.spec.jsx.snap
+++ b/tests/js/spec/components/group/__snapshots__/suggestedOwners.spec.jsx.snap
@@ -110,6 +110,7 @@ exports[`SuggestedOwners render() should show owners when enable 1`] = `
                   title="Jane Doe"
                   tooltip="Jane Doe (janedoe@example.com)"
                   type="gravatar"
+                  uploadPath="avatar"
                 >
                   <Tooltip
                     disabled={true}
diff --git a/tests/js/spec/components/idBadge/index.spec.jsx b/tests/js/spec/components/idBadge/index.spec.jsx
index a062789ec4..da6a3dd59a 100644
--- a/tests/js/spec/components/idBadge/index.spec.jsx
+++ b/tests/js/spec/components/idBadge/index.spec.jsx
@@ -14,7 +14,7 @@ describe('IdBadge', function() {
   it('renders the correct component when `team` property is passed', function() {
     let wrapper = shallow(<IdBadge team={TestStubs.Team()} />, routerContext);
 
-    expect(wrapper.find('TeamBadge')).toHaveLength(1);
+    expect(wrapper.find('TeamBadgeContainer')).toHaveLength(1);
   });
 
   it('renders the correct component when `project` property is passed', function() {
@@ -30,7 +30,7 @@ describe('IdBadge', function() {
       routerContext
     );
 
-    expect(wrapper.find('OrganizationBadge')).toHaveLength(1);
+    expect(wrapper.find('OrganizationBadgeContainer')).toHaveLength(1);
   });
 
   it('throws when no valid properties are passed', function() {
diff --git a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
index 43871df99a..e90817be6d 100644
--- a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
@@ -235,10 +235,10 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
             }
             size={36}
           >
-            <SlugAvatar
+            <OrganizationAvatar
               className="css-6su6fj"
               hasTooltip={false}
-              model={
+              organization={
                 Object {
                   "access": Array [
                     "org:read",
@@ -275,6 +275,7 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
                 title="org slug"
                 tooltip="org-slug"
                 type="letter_avatar"
+                uploadPath="organization-avatar"
               >
                 <Tooltip
                   disabled={true}
@@ -334,7 +335,7 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
                   </StyledBaseAvatar>
                 </Tooltip>
               </BaseAvatar>
-            </SlugAvatar>
+            </OrganizationAvatar>
           </Avatar>
           <Details>
             <div
@@ -722,6 +723,7 @@ exports[`Sidebar SidebarDropdown can open Sidebar org/name dropdown menu 1`] = `
                                     title="Foo Bar"
                                     tooltip="Foo Bar (foo@example.com)"
                                     type="gravatar"
+                                    uploadPath="avatar"
                                   >
                                     <Tooltip
                                       disabled={true}
@@ -1739,6 +1741,7 @@ exports[`Sidebar renders without org and router 1`] = `
                                     title="Foo Bar"
                                     tooltip="Foo Bar (foo@example.com)"
                                     type="gravatar"
+                                    uploadPath="avatar"
                                   >
                                     <Tooltip
                                       disabled={true}
diff --git a/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap b/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap
index e908fd6164..cf7ad5648b 100644
--- a/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap
@@ -2052,6 +2052,7 @@ exports[`RuleBuilder renders with suggestions 1`] = `
                                             title="Jane Doe"
                                             tooltip="Jane Doe (janedoe@example.com)"
                                             type="gravatar"
+                                            uploadPath="avatar"
                                           >
                                             <Tooltip
                                               disabled={false}
diff --git a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
index 7448faa123..4e349a23e3 100644
--- a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
+++ b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
@@ -480,10 +480,8 @@ exports[`CreateProject should render roles when available and allowed, and handl
                                       className="css-otlbo1-InlineErrorBoundary e83vi020"
                                       mini={true}
                                     >
-                                      <TeamBadge
-                                        avatarSize={24}
+                                      <TeamBadgeContainer
                                         hideAvatar={true}
-                                        hideOverflow={true}
                                         team={
                                           Object {
                                             "hasAccess": true,
@@ -493,17 +491,10 @@ exports[`CreateProject should render roles when available and allowed, and handl
                                           }
                                         }
                                       >
-                                        <BaseBadge
+                                        <TeamBadge
                                           avatarSize={24}
-                                          displayName={
-                                            <BadgeDisplayName
-                                              hideOverflow={true}
-                                            >
-                                              #
-                                              bar
-                                            </BadgeDisplayName>
-                                          }
                                           hideAvatar={true}
+                                          hideOverflow={true}
                                           team={
                                             Object {
                                               "hasAccess": true,
@@ -513,37 +504,58 @@ exports[`CreateProject should render roles when available and allowed, and handl
                                             }
                                           }
                                         >
-                                          <Flex
-                                            align="center"
+                                          <BaseBadge
+                                            avatarSize={24}
+                                            displayName={
+                                              <BadgeDisplayName
+                                                hideOverflow={true}
+                                              >
+                                                #
+                                                bar
+                                              </BadgeDisplayName>
+                                            }
+                                            hideAvatar={true}
+                                            team={
+                                              Object {
+                                                "hasAccess": true,
+                                                "id": "1",
+                                                "name": "bar",
+                                                "slug": "bar",
+                                              }
+                                            }
                                           >
-                                            <Base
+                                            <Flex
                                               align="center"
-                                              className="css-5ipae5"
                                             >
-                                              <div
+                                              <Base
+                                                align="center"
                                                 className="css-5ipae5"
-                                                is={null}
                                               >
-                                                <BadgeDisplayName
-                                                  hideOverflow={true}
+                                                <div
+                                                  className="css-5ipae5"
+                                                  is={null}
                                                 >
-                                                  <Component
-                                                    className="css-1boiawc-BadgeDisplayName eeoia0v0"
+                                                  <BadgeDisplayName
                                                     hideOverflow={true}
                                                   >
-                                                    <span
+                                                    <Component
                                                       className="css-1boiawc-BadgeDisplayName eeoia0v0"
+                                                      hideOverflow={true}
                                                     >
-                                                      #
-                                                      bar
-                                                    </span>
-                                                  </Component>
-                                                </BadgeDisplayName>
-                                              </div>
-                                            </Base>
-                                          </Flex>
-                                        </BaseBadge>
-                                      </TeamBadge>
+                                                      <span
+                                                        className="css-1boiawc-BadgeDisplayName eeoia0v0"
+                                                      >
+                                                        #
+                                                        bar
+                                                      </span>
+                                                    </Component>
+                                                  </BadgeDisplayName>
+                                                </div>
+                                              </Base>
+                                            </Flex>
+                                          </BaseBadge>
+                                        </TeamBadge>
+                                      </TeamBadgeContainer>
                                     </ErrorBoundary>
                                   </InlineErrorBoundary>
                                 </IdBadge>
@@ -600,10 +612,8 @@ exports[`CreateProject should render roles when available and allowed, and handl
                                       className="css-otlbo1-InlineErrorBoundary e83vi020"
                                       mini={true}
                                     >
-                                      <TeamBadge
-                                        avatarSize={24}
+                                      <TeamBadgeContainer
                                         hideAvatar={true}
-                                        hideOverflow={true}
                                         team={
                                           Object {
                                             "hasAccess": false,
@@ -613,17 +623,10 @@ exports[`CreateProject should render roles when available and allowed, and handl
                                           }
                                         }
                                       >
-                                        <BaseBadge
+                                        <TeamBadge
                                           avatarSize={24}
-                                          displayName={
-                                            <BadgeDisplayName
-                                              hideOverflow={true}
-                                            >
-                                              #
-                                              foo
-                                            </BadgeDisplayName>
-                                          }
                                           hideAvatar={true}
+                                          hideOverflow={true}
                                           team={
                                             Object {
                                               "hasAccess": false,
@@ -633,37 +636,58 @@ exports[`CreateProject should render roles when available and allowed, and handl
                                             }
                                           }
                                         >
-                                          <Flex
-                                            align="center"
+                                          <BaseBadge
+                                            avatarSize={24}
+                                            displayName={
+                                              <BadgeDisplayName
+                                                hideOverflow={true}
+                                              >
+                                                #
+                                                foo
+                                              </BadgeDisplayName>
+                                            }
+                                            hideAvatar={true}
+                                            team={
+                                              Object {
+                                                "hasAccess": false,
+                                                "id": "2",
+                                                "name": "foo",
+                                                "slug": "foo",
+                                              }
+                                            }
                                           >
-                                            <Base
+                                            <Flex
                                               align="center"
-                                              className="css-5ipae5"
                                             >
-                                              <div
+                                              <Base
+                                                align="center"
                                                 className="css-5ipae5"
-                                                is={null}
                                               >
-                                                <BadgeDisplayName
-                                                  hideOverflow={true}
+                                                <div
+                                                  className="css-5ipae5"
+                                                  is={null}
                                                 >
-                                                  <Component
-                                                    className="css-1boiawc-BadgeDisplayName eeoia0v0"
+                                                  <BadgeDisplayName
                                                     hideOverflow={true}
                                                   >
-                                                    <span
+                                                    <Component
                                                       className="css-1boiawc-BadgeDisplayName eeoia0v0"
+                                                      hideOverflow={true}
                                                     >
-                                                      #
-                                                      foo
-                                                    </span>
-                                                  </Component>
-                                                </BadgeDisplayName>
-                                              </div>
-                                            </Base>
-                                          </Flex>
-                                        </BaseBadge>
-                                      </TeamBadge>
+                                                      <span
+                                                        className="css-1boiawc-BadgeDisplayName eeoia0v0"
+                                                      >
+                                                        #
+                                                        foo
+                                                      </span>
+                                                    </Component>
+                                                  </BadgeDisplayName>
+                                                </div>
+                                              </Base>
+                                            </Flex>
+                                          </BaseBadge>
+                                        </TeamBadge>
+                                      </TeamBadgeContainer>
                                     </ErrorBoundary>
                                   </InlineErrorBoundary>
                                 </IdBadge>
