commit 3c168335539db11a68a9b76712490dc280f3b5d9
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Feb 20 11:35:18 2019 -0800

    git rebase masterfeat(monitors): Expose additional configuration
    
    - Add interval schedule_type
    - Add checkin_margin
    - Add max_runtime

diff --git a/src/sentry/api/validators/monitor.py b/src/sentry/api/validators/monitor.py
index 3be6c1a899..f081d1985e 100644
--- a/src/sentry/api/validators/monitor.py
+++ b/src/sentry/api/validators/monitor.py
@@ -43,6 +43,8 @@ class CronJobValidator(serializers.Serializer):
         choices=zip(SCHEDULE_TYPES.keys(), SCHEDULE_TYPES.keys()),
     )
     schedule = serializers.WritableField()
+    checkin_margin = serializers.IntegerField(required=False)
+    max_runtime = serializers.IntegerField(required=False)
 
     def validate_schedule_type(self, attrs, source):
         value = attrs[source]
diff --git a/src/sentry/static/sentry/app/views/organizationMonitors/monitorForm.jsx b/src/sentry/static/sentry/app/views/organizationMonitors/monitorForm.jsx
index 34074a19e5..da88f39cd4 100644
--- a/src/sentry/static/sentry/app/views/organizationMonitors/monitorForm.jsx
+++ b/src/sentry/static/sentry/app/views/organizationMonitors/monitorForm.jsx
@@ -5,6 +5,7 @@ import {Observer} from 'mobx-react';
 import Access from 'app/components/acl/access';
 import Field from 'app/views/settings/components/forms/field';
 import Form from 'app/views/settings/components/forms/form';
+import NumberField from 'app/views/settings/components/forms/numberField';
 import SelectField from 'app/views/settings/components/forms/selectField';
 import TextCopyInput from 'app/views/settings/components/forms/textCopyInput';
 import TextField from 'app/views/settings/components/forms/textField';
@@ -16,6 +17,19 @@ import withOrganization from 'app/utils/withOrganization';
 
 import MonitorModel from './monitorModel';
 
+const SCHEDULE_TYPES = [['crontab', 'Crontab'], ['interval', 'Interval']];
+
+const MONITOR_TYPES = [['cron_job', 'Cron Job']];
+
+const INTERVALS = [
+  ['minute', 'minute(s)'],
+  ['hour', 'hour(s)'],
+  ['day', 'day(s)'],
+  ['week', 'week(s)'],
+  ['month', 'month(s)'],
+  ['year', 'year(s)'],
+];
+
 class MonitorForm extends Component {
   static propTypes = {
     monitor: SentryTypes.Monitor,
@@ -32,15 +46,26 @@ class MonitorForm extends Component {
   }
 
   formDataFromConfig(type, config) {
+    const rv = {};
     switch (type) {
       case 'cron_job':
-        return {
-          'config.schedule_type': config.schedule_type,
-          'config.schedule': config.schedule,
-        };
+        rv['config.schedule_type'] = config.schedule_type;
+        rv['config.checkin_margin'] = config.checkin_margin;
+        rv['config.max_runtime'] = config.max_runtime;
+
+        switch (config.schedule_type) {
+          case 'interval':
+            rv['config.schedule.frequency'] = config.schedule[0];
+            rv['config.schedule.interval'] = config.schedule[1];
+            break;
+          case 'crontab':
+          default:
+            rv['config.schedule'] = config.schedule;
+        }
+        break;
       default:
-        return {};
     }
+    return rv;
   }
 
   render() {
@@ -111,43 +136,99 @@ class MonitorForm extends Component {
                   name="type"
                   label={t('Type')}
                   disabled={!hasAccess}
-                  choices={[['cron_job', 'Cron Job']]}
+                  choices={MONITOR_TYPES}
                   required
                 />
                 <Observer>
                   {() => {
-                    return (
-                      this.form.getValue('type') === 'cron_job' && (
-                        <SelectField
-                          name="config.schedule_type"
-                          label={t('Schedule Type')}
-                          disabled={!hasAccess}
-                          choices={[['crontab', 'Crontab']]}
-                          required
-                        />
-                      )
-                    );
+                    switch (this.form.getValue('type')) {
+                      case 'cron_job':
+                        return (
+                          <React.Fragment>
+                            <NumberField
+                              name="config.max_runtime"
+                              label={t('Max Runtime')}
+                              disabled={!hasAccess}
+                              help={t(
+                                "The maximum runtime (in minutes) a check-in is allowed before it's marked as a failure."
+                              )}
+                              placeholder="e.g. 30"
+                            />
+                            <SelectField
+                              name="config.schedule_type"
+                              label={t('Schedule Type')}
+                              disabled={!hasAccess}
+                              choices={SCHEDULE_TYPES}
+                              required
+                            />
+                          </React.Fragment>
+                        );
+                      default:
+                        return null;
+                    }
                   }}
                 </Observer>
                 <Observer>
                   {() => {
-                    return (
-                      this.form.getValue('config.schedule_type') === 'crontab' && (
-                        <TextField
-                          name="config.schedule"
-                          label={t('Schedule')}
-                          disabled={!hasAccess}
-                          placeholder="*/5 * * *"
-                          required
-                          help={tct(
-                            'Changes to the schedule will apply on the next check-in. See [link:Wikipedia] for crontab syntax.',
-                            {
-                              link: <a href="https://en.wikipedia.org/wiki/Cron" />,
-                            }
-                          )}
-                        />
-                      )
-                    );
+                    switch (this.form.getValue('config.schedule_type')) {
+                      case 'crontab':
+                        return (
+                          <React.Fragment>
+                            <TextField
+                              name="config.schedule"
+                              label={t('Schedule')}
+                              disabled={!hasAccess}
+                              placeholder="*/5 * * *"
+                              required
+                              help={tct(
+                                'Changes to the schedule will apply on the next check-in. See [link:Wikipedia] for crontab syntax.',
+                                {
+                                  link: <a href="https://en.wikipedia.org/wiki/Cron" />,
+                                }
+                              )}
+                            />
+                            <NumberField
+                              name="config.checkin_margin"
+                              label={t('Check-in Margin')}
+                              disabled={!hasAccess}
+                              help={t(
+                                "The margin (in minutes) a check-in is allowed to exceed it's scheduled window before being treated as missed."
+                              )}
+                              placeholder="e.g. 30"
+                            />
+                          </React.Fragment>
+                        );
+                      case 'interval':
+                        return (
+                          <React.Fragment>
+                            <NumberField
+                              name="config.schedule.frequency"
+                              label={t('Frequency')}
+                              disabled={!hasAccess}
+                              placeholder="e.g. 1"
+                              required
+                            />
+                            <SelectField
+                              name="config.schedule.interval"
+                              label={t('Interval')}
+                              disabled={!hasAccess}
+                              choices={INTERVALS}
+                              required
+                            />
+                            <NumberField
+                              name="config.checkin_margin"
+                              label={t('Check-in Margin')}
+                              disabled={!hasAccess}
+                              help={t(
+                                "The margin (in minutes) a check-in is allowed to exceed it's scheduled window before being treated as missed."
+                              )}
+                              placeholder="e.g. 30"
+                            />
+                          </React.Fragment>
+                        );
+                      default:
+                        return null;
+                    }
                   }}
                 </Observer>
               </PanelBody>
diff --git a/src/sentry/static/sentry/app/views/organizationMonitors/monitorModel.jsx b/src/sentry/static/sentry/app/views/organizationMonitors/monitorModel.jsx
index a6a79d52d3..6d71a03a2d 100644
--- a/src/sentry/static/sentry/app/views/organizationMonitors/monitorModel.jsx
+++ b/src/sentry/static/sentry/app/views/organizationMonitors/monitorModel.jsx
@@ -5,7 +5,20 @@ export default class MonitorModel extends FormModel {
     return Object.entries(this.fields.toJSON()).reduce((data, [k, v]) => {
       if (k.indexOf('config.') === 0) {
         if (!data.config) data.config = {};
-        data.config[k.substr(7)] = v;
+        if (k === 'config.schedule.frequency' || k === 'config.schedule.interval') {
+          if (!Array.isArray(data.config.schedule)) {
+            data.config.schedule = [0, 'minute'];
+          }
+          data.config.schedule[0] = parseInt(v, 10);
+        }
+
+        if (k === 'config.schedule.frequency') {
+          data.config.schedule[0] = parseInt(v, 10);
+        } else if (k === 'config.schedule.interval') {
+          data.config.schedule[1] = v;
+        } else {
+          data.config[k.substr(7)] = v;
+        }
       } else {
         data[k] = v;
       }
diff --git a/src/sentry/tasks/check_monitors.py b/src/sentry/tasks/check_monitors.py
index b80ab4aeb8..59c154b18e 100644
--- a/src/sentry/tasks/check_monitors.py
+++ b/src/sentry/tasks/check_monitors.py
@@ -11,7 +11,8 @@ from sentry.tasks.base import instrumented_task
 
 logger = logging.getLogger('sentry')
 
-TIMEOUT = timedelta(hours=12)
+# default maximum runtime for a monitor, in minutes
+TIMEOUT = 12 * 60
 
 
 @instrumented_task(name='sentry.tasks.check_monitors', time_limit=15, soft_time_limit=10)
@@ -31,12 +32,15 @@ def check_monitors(current_datetime=None):
         })
         monitor.mark_failed()
 
-    # timeout any monitors still marked as in progress after X time
     qs = MonitorCheckIn.objects.filter(
         status=CheckInStatus.IN_PROGRESS,
-        date_updated__lt=current_datetime - TIMEOUT,
     ).select_related('monitor')[:10000]
+    # check for any monitors which are still running and have exceeded their maximum runtime
     for checkin in qs:
+        timeout = timedelta(minutes=(checkin.monitor.config or {}).get('max_runtime') or TIMEOUT)
+        if checkin.date_updated > current_datetime - timeout:
+            continue
+
         monitor = checkin.monitor
         logger.info('monitor.checkin-timeout', extra={
             'monitor_id': monitor.id,
diff --git a/tests/sentry/api/endpoints/test_monitor_details.py b/tests/sentry/api/endpoints/test_monitor_details.py
index 459efea020..f9bf73fbef 100644
--- a/tests/sentry/api/endpoints/test_monitor_details.py
+++ b/tests/sentry/api/endpoints/test_monitor_details.py
@@ -101,6 +101,48 @@ class UpdateMonitorTest(APITestCase):
         monitor = Monitor.objects.get(id=self.monitor.id)
         assert monitor.status == MonitorStatus.OK
 
+    def test_checkin_margin(self):
+        with self.feature({'organizations:monitors': True}):
+            resp = self.client.put(self.path, data={
+                'config': {
+                    'checkin_margin': 30,
+                }
+            })
+
+        assert resp.status_code == 200, resp.content
+        assert resp.data['id'] == six.text_type(self.monitor.guid)
+
+        monitor = Monitor.objects.get(id=self.monitor.id)
+        assert monitor.config['checkin_margin'] == 30
+
+    def test_max_runtime(self):
+        with self.feature({'organizations:monitors': True}):
+            resp = self.client.put(self.path, data={
+                'config': {
+                    'max_runtime': 30,
+                }
+            })
+
+        assert resp.status_code == 200, resp.content
+        assert resp.data['id'] == six.text_type(self.monitor.guid)
+
+        monitor = Monitor.objects.get(id=self.monitor.id)
+        assert monitor.config['max_runtime'] == 30
+
+    def test_invalid_config_param(self):
+        with self.feature({'organizations:monitors': True}):
+            resp = self.client.put(self.path, data={
+                'config': {
+                    'invalid': True,
+                }
+            })
+
+        assert resp.status_code == 200, resp.content
+        assert resp.data['id'] == six.text_type(self.monitor.guid)
+
+        monitor = Monitor.objects.get(id=self.monitor.id)
+        assert 'invalid' not in monitor.config
+
     def test_cronjob_crontab(self):
         with self.feature({'organizations:monitors': True}):
             resp = self.client.put(self.path, data={
@@ -113,10 +155,8 @@ class UpdateMonitorTest(APITestCase):
         assert resp.data['id'] == six.text_type(self.monitor.guid)
 
         monitor = Monitor.objects.get(id=self.monitor.id)
-        assert monitor.config == {
-            'schedule_type': ScheduleType.CRONTAB,
-            'schedule': '*/5 * * * *',
-        }
+        assert monitor.config['schedule_type'] == ScheduleType.CRONTAB
+        assert monitor.config['schedule'] == '*/5 * * * *'
 
     # TODO(dcramer): would be lovely to run the full spectrum, but it requires
     # this test to not be class-based
@@ -140,10 +180,8 @@ class UpdateMonitorTest(APITestCase):
         assert resp.data['id'] == six.text_type(self.monitor.guid)
 
         monitor = Monitor.objects.get(id=self.monitor.id)
-        assert monitor.config == {
-            'schedule_type': ScheduleType.CRONTAB,
-            'schedule': '0 0 1 * *',
-        }
+        assert monitor.config['schedule_type'] == ScheduleType.CRONTAB
+        assert monitor.config['schedule'] == '0 0 1 * *'
 
     def test_cronjob_crontab_invalid(self):
         with self.feature({'organizations:monitors': True}):
@@ -176,10 +214,8 @@ class UpdateMonitorTest(APITestCase):
         assert resp.data['id'] == six.text_type(self.monitor.guid)
 
         monitor = Monitor.objects.get(id=self.monitor.id)
-        assert monitor.config == {
-            'schedule_type': ScheduleType.INTERVAL,
-            'schedule': [1, 'month'],
-        }
+        assert monitor.config['schedule_type'] == ScheduleType.INTERVAL
+        assert monitor.config['schedule'] == [1, 'month']
 
     def test_cronjob_interval_invalid_inteval(self):
         with self.feature({'organizations:monitors': True}):
diff --git a/tests/sentry/api/endpoints/test_organization_monitors.py b/tests/sentry/api/endpoints/test_organization_monitors.py
index 062f46c5d6..4cbbf83ac5 100644
--- a/tests/sentry/api/endpoints/test_organization_monitors.py
+++ b/tests/sentry/api/endpoints/test_organization_monitors.py
@@ -86,4 +86,6 @@ class CreateOrganizationMonitorTest(APITestCase):
         assert monitor.config == {
             'schedule_type': ScheduleType.CRONTAB,
             'schedule': '0 0 * * *',
+            'checkin_margin': None,
+            'max_runtime': None,
         }
diff --git a/tests/sentry/tasks/test_check_monitors.py b/tests/sentry/tasks/test_check_monitors.py
index ce73e0a29c..d5f39e8131 100644
--- a/tests/sentry/tasks/test_check_monitors.py
+++ b/tests/sentry/tasks/test_check_monitors.py
@@ -153,3 +153,41 @@ class CheckMonitorsTest(TestCase):
             id=monitor.id,
             status=MonitorStatus.OK,
         ).exists()
+
+    def test_timeout_with_via_configuration(self):
+        org = self.create_organization()
+        project = self.create_project(organization=org)
+
+        current_datetime = timezone.now() - timedelta(hours=24)
+
+        monitor = Monitor.objects.create(
+            organization_id=org.id,
+            project_id=project.id,
+            next_checkin=current_datetime + timedelta(hours=1, minutes=1),
+            last_checkin=current_datetime + timedelta(hours=1),
+            type=MonitorType.CRON_JOB,
+            config={'schedule': '0 0 * * *', 'max_runtime': 60},
+            status=MonitorStatus.OK,
+            date_added=current_datetime,
+        )
+        checkin = MonitorCheckIn.objects.create(
+            monitor=monitor,
+            project_id=project.id,
+            status=CheckInStatus.IN_PROGRESS,
+            date_added=current_datetime,
+            date_updated=current_datetime,
+        )
+
+        assert checkin.date_added == checkin.date_updated == current_datetime
+
+        check_monitors(current_datetime=current_datetime + timedelta(hours=1, minutes=1))
+
+        assert MonitorCheckIn.objects.filter(
+            id=checkin.id,
+            status=CheckInStatus.ERROR,
+        ).exists()
+
+        assert Monitor.objects.filter(
+            id=monitor.id,
+            status=MonitorStatus.ERROR,
+        ).exists()
