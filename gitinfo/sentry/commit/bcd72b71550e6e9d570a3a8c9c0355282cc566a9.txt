commit bcd72b71550e6e9d570a3a8c9c0355282cc566a9
Author: Katie Byers <katie.byers@sentry.io>
Date:   Tue Sep 10 00:18:41 2019 -0700

    fix(VCS integrations): Make repo-data-update on webhook events more complete (#12290)
    
    Currently:
    
    - webhook events from BitBucket and GitHub update some but not all repo data
    - webhook events from GitLab don't update repo data
    
    This makes it so all information which could possibly change is updated for all three. This will keep our data up to date, and prevent us from ending up in a broken state where some parts of our data don't match others, leading to problems with, for instance, adding GitHub repos to the global integration*.
    
    \*This handles most cases of that problem; other cases can be handled at the time the user tries to add the repo. Will do that in a separate PR.

diff --git a/src/sentry/integrations/bitbucket/webhook.py b/src/sentry/integrations/bitbucket/webhook.py
index 9e44471a36..1c5a0b265d 100644
--- a/src/sentry/integrations/bitbucket/webhook.py
+++ b/src/sentry/integrations/bitbucket/webhook.py
@@ -34,11 +34,6 @@ BITBUCKET_IPS = [u"34.198.203.127", u"34.198.178.64", u"34.198.32.85"]
 PROVIDER_NAME = "integrations:bitbucket"
 
 
-class Webhook(object):
-    def __call__(self, organization, event):
-        raise NotImplementedError
-
-
 def parse_raw_user_email(raw):
     # captures content between angle brackets
     match = re.search("(?<=<).*(?=>$)", raw)
@@ -52,6 +47,38 @@ def parse_raw_user_name(raw):
     return raw.split("<")[0].strip()
 
 
+class Webhook(object):
+    def __call__(self, organization, event):
+        raise NotImplementedError
+
+    def update_repo_data(self, repo, event):
+        """
+        Given a webhook payload, update stored repo data if needed.
+
+        NB: Assumes event['repository']['full_name'] is defined. Rework this if
+        that stops being a safe assumption.
+        """
+
+        name_from_event = event["repository"]["full_name"]
+        # build the URL manually since it doesn't come back from the API in
+        # the form that we need
+        # see https://confluence.atlassian.com/bitbucket/event-payloads-740262817.html#EventPayloads-entity_repository
+        # and click on 'Repository property' underneath the table for example data
+        # (all entries are from the `api` subdomain, rather than bitbucket.org)
+        url_from_event = u"https://bitbucket.org/{}".format(name_from_event)
+
+        if (
+            repo.name != name_from_event
+            or repo.config.get("name") != name_from_event
+            or repo.url != url_from_event
+        ):
+            repo.update(
+                name=name_from_event,
+                url=url_from_event,
+                config=dict(repo.config, name=name_from_event),
+            )
+
+
 class PushEventWebhook(Webhook):
     # https://confluence.atlassian.com/bitbucket/event-payloads-740262817.html#EventPayloads-Push
     def __call__(self, organization, event):
@@ -66,9 +93,8 @@ class PushEventWebhook(Webhook):
         except Repository.DoesNotExist:
             raise Http404()
 
-        if repo.config.get("name") != event["repository"]["full_name"]:
-            repo.config["name"] = event["repository"]["full_name"]
-            repo.save()
+        # while we're here, make sure repo data is up to date
+        self.update_repo_data(repo, event)
 
         for change in event["push"]["changes"]:
             for commit in change.get("commits", []):
diff --git a/src/sentry/integrations/github/webhook.py b/src/sentry/integrations/github/webhook.py
index 1c910b5509..6a78b7b974 100644
--- a/src/sentry/integrations/github/webhook.py
+++ b/src/sentry/integrations/github/webhook.py
@@ -72,14 +72,30 @@ class Webhook(object):
                 external_id=six.text_type(event["repository"]["id"]),
             )
             for repo in repos:
-                # We need to track GitHub's "full_name" which is the repository slug.
-                # This is needed to access the API since `external_id` isn't sufficient.
-                if repo.config.get("name") != event["repository"]["full_name"]:
-                    repo.config["name"] = event["repository"]["full_name"]
-                    repo.save()
-
                 self._handle(integration, event, orgs[repo.organization_id], repo)
 
+    def update_repo_data(self, repo, event):
+        """
+        Given a webhook payload, update stored repo data if needed.
+
+        Assumes a 'repository' key in event payload, with certain subkeys.
+        Rework this if that stops being a safe assumption.
+        """
+
+        name_from_event = event["repository"]["full_name"]
+        url_from_event = event["repository"]["html_url"]
+
+        if (
+            repo.name != name_from_event
+            or repo.config.get("name") != name_from_event
+            or repo.url != url_from_event
+        ):
+            repo.update(
+                name=name_from_event,
+                url=url_from_event,
+                config=dict(repo.config, name=name_from_event),
+            )
+
 
 class InstallationEventWebhook(Webhook):
     # https://developer.github.com/v3/activity/events/types/#installationevent
@@ -142,6 +158,9 @@ class PushEventWebhook(Webhook):
         return GitHubRepositoryProvider.should_ignore_commit(commit["message"])
 
     def _handle(self, integration, event, organization, repo, host=None):
+        # while we're here, make sure repo data is up to date
+        self.update_repo_data(repo, event)
+
         authors = {}
         client = integration.get_installation(organization_id=organization.id).get_client()
         gh_username_cache = {}
@@ -284,6 +303,9 @@ class PullRequestEventWebhook(Webhook):
         return options.get("github-app.id")
 
     def _handle(self, integration, event, organization, repo, host=None):
+        # while we're here, make sure repo data is up to date
+        self.update_repo_data(repo, event)
+
         pull_request = event["pull_request"]
         number = pull_request["number"]
         title = pull_request["title"]
diff --git a/src/sentry/integrations/gitlab/webhooks.py b/src/sentry/integrations/gitlab/webhooks.py
index da4d949de7..126d7c676a 100644
--- a/src/sentry/integrations/gitlab/webhooks.py
+++ b/src/sentry/integrations/gitlab/webhooks.py
@@ -27,6 +27,11 @@ class Webhook(object):
         raise NotImplementedError
 
     def get_repo(self, integration, organization, event):
+        """
+        Given a webhook payload, get the associated Repository record.
+
+        Assumes a 'project' key in event payload.
+        """
         try:
             project_id = event["project"]["id"]
         except KeyError:
@@ -44,6 +49,31 @@ class Webhook(object):
             return None
         return repo
 
+    def update_repo_data(self, repo, event):
+        """
+        Given a webhook payload, update stored repo data if needed.
+
+        Assumes a 'project' key in event payload, with certain subkeys. Rework
+        this if that stops being a safe assumption.
+        """
+
+        project = event["project"]
+
+        name_from_event = u"{} / {}".format(project["namespace"], project["name"])
+        url_from_event = project["web_url"]
+        path_from_event = project["path_with_namespace"]
+
+        if (
+            repo.name != name_from_event
+            or repo.url != url_from_event
+            or repo.config.get("path") != path_from_event
+        ):
+            repo.update(
+                name=name_from_event,
+                url=url_from_event,
+                config=dict(repo.config, path=path_from_event),
+            )
+
 
 class MergeEventWebhook(Webhook):
     """
@@ -56,6 +86,10 @@ class MergeEventWebhook(Webhook):
         repo = self.get_repo(integration, organization, event)
         if repo is None:
             return
+
+        # while we're here, make sure repo data is up to date
+        self.update_repo_data(repo, event)
+
         try:
             number = event["object_attributes"]["iid"]
             title = event["object_attributes"]["title"]
@@ -111,6 +145,9 @@ class PushEventWebhook(Webhook):
         if repo is None:
             return
 
+        # while we're here, make sure repo data is up to date
+        self.update_repo_data(repo, event)
+
         authors = {}
 
         # TODO gitlab only sends a max of 20 commits. If a push contains
diff --git a/src/sentry/integrations/vsts/webhooks.py b/src/sentry/integrations/vsts/webhooks.py
index 714a9cc118..6c9a5f491f 100644
--- a/src/sentry/integrations/vsts/webhooks.py
+++ b/src/sentry/integrations/vsts/webhooks.py
@@ -44,6 +44,7 @@ class WorkItemWebhook(Endpoint):
         except KeyError as e:
             logger.info("vsts.invalid-webhook-payload", extra={"error": six.text_type(e)})
 
+        # https://docs.microsoft.com/en-us/azure/devops/service-hooks/events?view=azure-devops#workitem.updated
         if event_type == "workitem.updated":
             try:
                 integration = Integration.objects.get(
diff --git a/tests/sentry/integrations/bitbucket/test_webhook.py b/tests/sentry/integrations/bitbucket/test_webhook.py
index a337655110..a9c84d0537 100644
--- a/tests/sentry/integrations/bitbucket/test_webhook.py
+++ b/tests/sentry/integrations/bitbucket/test_webhook.py
@@ -154,3 +154,75 @@ class PushEventWebhookTest(APITestCase):
         assert commit.author.email == "max@getsentry.com"
         assert commit.author.external_id is None
         assert commit.date_added == datetime(2017, 5, 24, 1, 5, 47, tzinfo=timezone.utc)
+
+    def test_update_repo_name(self):
+        repo_out_of_date_name = Repository.objects.create(
+            organization_id=self.project.organization.id,
+            external_id="{c78dfb25-7882-4550-97b1-4e0d38f32859}",
+            provider=PROVIDER_NAME,
+            name="maxbittker/newssames",  # out of date
+            url="https://bitbucket.org/maxbittker/newsdiffs",
+            config={"name": "maxbittker/newsdiffs"},
+        )
+
+        response = self.client.post(
+            path=self.url,
+            data=PUSH_EVENT_EXAMPLE,
+            content_type="application/json",
+            HTTP_X_EVENT_KEY="repo:push",
+            REMOTE_ADDR=BITBUCKET_IP,
+        )
+
+        assert response.status_code == 204
+
+        # name has been updated
+        repo_out_of_date_name.refresh_from_db()
+        assert repo_out_of_date_name.name == "maxbittker/newsdiffs"
+
+    def test_update_repo_config_name(self):
+        repo_out_of_date_config_name = Repository.objects.create(
+            organization_id=self.project.organization.id,
+            external_id="{c78dfb25-7882-4550-97b1-4e0d38f32859}",
+            provider=PROVIDER_NAME,
+            name="maxbittker/newsdiffs",
+            url="https://bitbucket.org/maxbittker/newsdiffs",
+            config={"name": "maxbittker/newssames"},  # out of date
+        )
+
+        response = self.client.post(
+            path=self.url,
+            data=PUSH_EVENT_EXAMPLE,
+            content_type="application/json",
+            HTTP_X_EVENT_KEY="repo:push",
+            REMOTE_ADDR=BITBUCKET_IP,
+        )
+
+        assert response.status_code == 204
+
+        # config name has been updated
+        repo_out_of_date_config_name.refresh_from_db()
+        assert repo_out_of_date_config_name.config["name"] == "maxbittker/newsdiffs"
+
+    def test_update_repo_url(self):
+        repo_out_of_date_url = Repository.objects.create(
+            organization_id=self.project.organization.id,
+            external_id="{c78dfb25-7882-4550-97b1-4e0d38f32859}",
+            provider=PROVIDER_NAME,
+            name="maxbittker/newsdiffs",
+            url="https://bitbucket.org/maxbittker/newssames",  # out of date
+            config={"name": "maxbittker/newsdiffs"},
+        )
+
+        response = self.client.post(
+            path=self.url,
+            data=PUSH_EVENT_EXAMPLE,
+            content_type="application/json",
+            HTTP_X_EVENT_KEY="repo:push",
+            REMOTE_ADDR=BITBUCKET_IP,
+        )
+
+        assert response.status_code == 204
+
+        # url has been updated
+        repo_out_of_date_url.refresh_from_db()
+        assert repo_out_of_date_url.url == "https://bitbucket.org/maxbittker/newsdiffs"
diff --git a/tests/sentry/integrations/bitbucket/testutils.py b/tests/sentry/integrations/bitbucket/testutils.py
index 3009d362d9..504c234d52 100644
--- a/tests/sentry/integrations/bitbucket/testutils.py
+++ b/tests/sentry/integrations/bitbucket/testutils.py
@@ -33,6 +33,7 @@ index 89821ce..9e09a8a 100644
 \ No newline at end of file
 +A twitter bot to when words are said by the NYT for the first time.sdfsdf
 \ No newline at end of file"""
+
 PUSH_EVENT_EXAMPLE = b"""{
     "push": {
         "changes": [
diff --git a/tests/sentry/integrations/github/test_webhooks.py b/tests/sentry/integrations/github/test_webhooks.py
index fce7033d86..ddd3f10a49 100644
--- a/tests/sentry/integrations/github/test_webhooks.py
+++ b/tests/sentry/integrations/github/test_webhooks.py
@@ -67,6 +67,123 @@ class WebhookTest(APITestCase):
 
         assert response.status_code == 401
 
+    def test_update_repo_name(self):
+        project = self.project  # force creation
+        url = "/extensions/github/webhook/"
+        secret = "b3002c3e321d4b7880360d397db2ccfd"
+        options.set("github-app.webhook-secret", secret)
+
+        future_expires = datetime.now().replace(microsecond=0) + timedelta(minutes=5)
+        integration = Integration.objects.create(
+            provider="github",
+            external_id="12345",
+            name="octocat",
+            metadata={"access_token": "1234", "expires_at": future_expires.isoformat()},
+        )
+        integration.add_organization(project.organization, self.user)
+
+        repo_out_of_date_name = Repository.objects.create(
+            organization_id=project.organization.id,
+            external_id="35129377",
+            provider="integrations:github",
+            name="emmathehacker/public-repo",  # out of date
+            url="https://github.com/baxterthehacker/public-repo",
+            config={"name": "baxterthehacker/public-repo"},
+        )
+
+        response = self.client.post(
+            path=url,
+            data=PULL_REQUEST_OPENED_EVENT_EXAMPLE,
+            content_type="application/json",
+            HTTP_X_GITHUB_EVENT="pull_request",
+            HTTP_X_HUB_SIGNATURE="sha1=bc7ce12fc1058a35bf99355e6fc0e6da72c35de3",
+            HTTP_X_GITHUB_DELIVERY=six.text_type(uuid4()),
+        )
+
+        assert response.status_code == 204
+
+        # name has been updated
+        repo_out_of_date_name.refresh_from_db()
+        assert repo_out_of_date_name.name == "baxterthehacker/public-repo"
+
+    def test_update_repo_config_name(self):
+        project = self.project  # force creation
+        url = "/extensions/github/webhook/"
+        secret = "b3002c3e321d4b7880360d397db2ccfd"
+        options.set("github-app.webhook-secret", secret)
+
+        future_expires = datetime.now().replace(microsecond=0) + timedelta(minutes=5)
+        integration = Integration.objects.create(
+            provider="github",
+            external_id="12345",
+            name="octocat",
+            metadata={"access_token": "1234", "expires_at": future_expires.isoformat()},
+        )
+        integration.add_organization(project.organization, self.user)
+
+        repo_out_of_date_config_name = Repository.objects.create(
+            organization_id=project.organization.id,
+            external_id="35129377",
+            provider="integrations:github",
+            name="baxterthehacker/public-repo",
+            url="https://github.com/baxterthehacker/public-repo",
+            config={"name": "emmathehacker/public-repo"},  # out of date
+        )
+
+        response = self.client.post(
+            path=url,
+            data=PULL_REQUEST_OPENED_EVENT_EXAMPLE,
+            content_type="application/json",
+            HTTP_X_GITHUB_EVENT="pull_request",
+            HTTP_X_HUB_SIGNATURE="sha1=bc7ce12fc1058a35bf99355e6fc0e6da72c35de3",
+            HTTP_X_GITHUB_DELIVERY=six.text_type(uuid4()),
+        )
+
+        assert response.status_code == 204
+
+        # config name has been updated
+        repo_out_of_date_config_name.refresh_from_db()
+        assert repo_out_of_date_config_name.config["name"] == "baxterthehacker/public-repo"
+
+    def test_update_repo_url(self):
+        project = self.project  # force creation
+        url = "/extensions/github/webhook/"
+        secret = "b3002c3e321d4b7880360d397db2ccfd"
+        options.set("github-app.webhook-secret", secret)
+
+        future_expires = datetime.now().replace(microsecond=0) + timedelta(minutes=5)
+        integration = Integration.objects.create(
+            provider="github",
+            external_id="12345",
+            name="octocat",
+            metadata={"access_token": "1234", "expires_at": future_expires.isoformat()},
+        )
+        integration.add_organization(project.organization, self.user)
+
+        repo_out_of_date_url = Repository.objects.create(
+            organization_id=project.organization.id,
+            external_id="35129377",
+            provider="integrations:github",
+            name="baxterthehacker/public-repo",
+            url="https://github.com/emmathehacker/public-repo",  # out of date
+            config={"name": "baxterthehacker/public-repo"},
+        )
+
+        response = self.client.post(
+            path=url,
+            data=PULL_REQUEST_OPENED_EVENT_EXAMPLE,
+            content_type="application/json",
+            HTTP_X_GITHUB_EVENT="pull_request",
+            HTTP_X_HUB_SIGNATURE="sha1=bc7ce12fc1058a35bf99355e6fc0e6da72c35de3",
+            HTTP_X_GITHUB_DELIVERY=six.text_type(uuid4()),
+        )
+
+        assert response.status_code == 204
+
+        # url has been updated
+        repo_out_of_date_url.refresh_from_db()
+        assert repo_out_of_date_url.url == "https://github.com/baxterthehacker/public-repo"
+
 
 class PushEventWebhookTest(APITestCase):
     @patch("sentry.integrations.github.client.get_jwt")
diff --git a/tests/sentry/integrations/gitlab/test_webhook.py b/tests/sentry/integrations/gitlab/test_webhook.py
index 8ef4a5f72e..b6425a8f36 100644
--- a/tests/sentry/integrations/gitlab/test_webhook.py
+++ b/tests/sentry/integrations/gitlab/test_webhook.py
@@ -15,6 +15,25 @@ from .testutils import (
 class WebhookTest(GitLabTestCase):
     url = "/extensions/gitlab/webhook/"
 
+    def assert_commit_author(self, author):
+        assert author.email
+        assert author.name
+        assert author.organization_id == self.organization.id
+
+    def assert_pull_request(self, pull, author):
+        assert pull.title
+        assert pull.message
+        assert pull.date_added
+        assert pull.author == author
+        assert pull.merge_commit_sha is None
+        assert pull.organization_id == self.organization.id
+
+    def assert_group_link(self, group, pull):
+        link = GroupLink.objects.all().first()
+        assert link.group_id == group.id
+        assert link.linked_type == GroupLink.LinkedType.pull_request
+        assert link.linked_id == pull.id
+
     def test_get(self):
         response = self.client.get(self.url)
         assert response.status_code == 405
@@ -254,21 +273,72 @@ class WebhookTest(GitLabTestCase):
         self.assert_pull_request(pull, author)
         self.assert_group_link(group, pull)
 
-    def assert_commit_author(self, author):
-        assert author.email
-        assert author.name
-        assert author.organization_id == self.organization.id
+    def test_update_repo_name(self):
+        repo_out_of_date_name = self.create_repo(
+            name="Uncool Group / Sentry",  # name out of date
+            url="http://example.com/cool-group/sentry",
+        )
+        repo_out_of_date_name.update(
+            config=dict(repo_out_of_date_name.config, path="cool-group/sentry")
+        )
 
-    def assert_pull_request(self, pull, author):
-        assert pull.title
-        assert pull.message
-        assert pull.date_added
-        assert pull.author == author
-        assert pull.merge_commit_sha is None
-        assert pull.organization_id == self.organization.id
+        response = self.client.post(
+            self.url,
+            data=PUSH_EVENT,
+            content_type="application/json",
+            HTTP_X_GITLAB_TOKEN=WEBHOOK_TOKEN,
+            HTTP_X_GITLAB_EVENT="Push Hook",
+        )
 
-    def assert_group_link(self, group, pull):
-        link = GroupLink.objects.all().first()
-        assert link.group_id == group.id
-        assert link.linked_type == GroupLink.LinkedType.pull_request
-        assert link.linked_id == pull.id
+        assert response.status_code == 204
+
+        # name has been updated
+        repo_out_of_date_name.refresh_from_db()
+        assert repo_out_of_date_name.name == "Cool Group / Sentry"
+
+    def test_update_repo_path(self):
+        repo_out_of_date_path = self.create_repo(
+            name="Cool Group / Sentry", url="http://example.com/cool-group/sentry"
+        )
+        repo_out_of_date_path.update(
+            config=dict(
+                repo_out_of_date_path.config, path="uncool-group/sentry"  # path out of date
+            )
+        )
+
+        response = self.client.post(
+            self.url,
+            data=PUSH_EVENT,
+            content_type="application/json",
+            HTTP_X_GITLAB_TOKEN=WEBHOOK_TOKEN,
+            HTTP_X_GITLAB_EVENT="Push Hook",
+        )
+
+        assert response.status_code == 204
+
+        # path has been updated
+        repo_out_of_date_path.refresh_from_db()
+        assert repo_out_of_date_path.config["path"] == "cool-group/sentry"
+
+    def test_update_repo_url(self):
+        repo_out_of_date_url = self.create_repo(
+            name="Cool Group / Sentry",
+            url="http://example.com/uncool-group/sentry",  # url out of date
+        )
+        repo_out_of_date_url.update(
+            config=dict(repo_out_of_date_url.config, path="cool-group/sentry")
+        )
+
+        response = self.client.post(
+            self.url,
+            data=PUSH_EVENT,
+            content_type="application/json",
+            HTTP_X_GITLAB_TOKEN=WEBHOOK_TOKEN,
+            HTTP_X_GITLAB_EVENT="Push Hook",
+        )
+
+        assert response.status_code == 204
+
+        # url has been updated
+        repo_out_of_date_url.refresh_from_db()
+        assert repo_out_of_date_url.url == "http://example.com/cool-group/sentry"
diff --git a/tests/sentry/integrations/gitlab/testutils.py b/tests/sentry/integrations/gitlab/testutils.py
index 14bb42a890..bffba3550c 100644
--- a/tests/sentry/integrations/gitlab/testutils.py
+++ b/tests/sentry/integrations/gitlab/testutils.py
@@ -183,13 +183,13 @@ PUSH_EVENT = b"""
   "project_id": 15,
   "project":{
     "id": 15,
-    "name":"Diaspora",
+    "name":"Sentry",
     "description":"",
     "web_url":"http://example.com/cool-group/sentry",
     "avatar_url":null,
     "git_ssh_url":"git@example.com:cool-group/sentry.git",
     "git_http_url":"http://example.com/cool-group/sentry.git",
-    "namespace":"Mike",
+    "namespace":"Cool Group",
     "visibility_level":0,
     "path_with_namespace":"cool-group/sentry",
     "default_branch":"master",
