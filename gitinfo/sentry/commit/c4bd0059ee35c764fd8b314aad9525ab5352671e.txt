commit c4bd0059ee35c764fd8b314aad9525ab5352671e
Author: Danny Lee <dlee@sentry.io>
Date:   Sun Oct 6 13:25:24 2019 -0700

    ref(ts): Convert AssigneeSelector (#14919)
    
    * ref(ts): Convert AssigneeSelector
    
    - Update tests for AssigneeSelector

diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.tsx
similarity index 88%
rename from src/sentry/static/sentry/app/components/assigneeSelector.jsx
rename to src/sentry/static/sentry/app/components/assigneeSelector.tsx
index c8315a926c..f8f8bf22f6 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.tsx
@@ -4,6 +4,9 @@ import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 
+import SentryTypes from 'app/sentryTypes';
+import {Member, User} from 'app/types';
+
 import {assignToUser, assignToActor, clearAssignment} from 'app/actionCreators/group';
 import {t} from 'app/locale';
 import {valueIsEqual, buildUserId, buildTeamId} from 'app/utils';
@@ -19,11 +22,22 @@ import Link from 'app/components/links/link';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import MemberListStore from 'app/stores/memberListStore';
 import ProjectsStore from 'app/stores/projectsStore';
-import SentryTypes from 'app/sentryTypes';
 import TextOverflow from 'app/components/textOverflow';
 import space from 'app/styles/space';
 
-const AssigneeSelectorComponent = createReactClass({
+type Props = {
+  id: string | null;
+  size: number;
+  memberList?: Member[];
+};
+
+type State = {
+  loading: boolean;
+  assignedTo: User;
+  memberList: Member[];
+};
+
+const AssigneeSelectorComponent = createReactClass<Props, State>({
   displayName: 'AssigneeSelector',
 
   propTypes: {
@@ -45,31 +59,11 @@ const AssigneeSelectorComponent = createReactClass({
     Reflux.connect(MemberListStore, 'memberList'),
   ],
 
-  statics: {
-    putSessionUserFirst(members) {
-      // If session user is in the filtered list of members, put them at the top
-      if (!members) {
-        return [];
-      }
-
-      const sessionUser = ConfigStore.get('user');
-      const sessionUserIndex = members.findIndex(
-        member => sessionUser && member.id === sessionUser.id
-      );
-
-      if (sessionUserIndex === -1) {
-        return members;
-      }
-
-      return [members[sessionUserIndex]]
-        .concat(members.slice(0, sessionUserIndex))
-        .concat(members.slice(sessionUserIndex + 1));
-    },
-  },
-
   getDefaultProps() {
     return {
+      id: null,
       size: 20,
+      memberList: undefined,
     };
   },
 
@@ -121,10 +115,7 @@ const AssigneeSelectorComponent = createReactClass({
   },
 
   memberList() {
-    if (this.props.memberList) {
-      return this.props.memberList;
-    }
-    return this.state.memberList;
+    return this.props.memberList ? this.props.memberList : this.state.memberList;
   },
 
   assignableTeams() {
@@ -165,13 +156,7 @@ const AssigneeSelectorComponent = createReactClass({
     this.setState({loading: true});
   },
 
-  handleAssign(
-    {
-      value: {type, assignee},
-    },
-    state,
-    e
-  ) {
+  handleAssign({value: {type, assignee}}, _state, e) {
     if (type === 'member') {
       this.assignToUser(assignee);
     }
@@ -192,12 +177,12 @@ const AssigneeSelectorComponent = createReactClass({
 
   renderNewMemberNodes() {
     const {size} = this.props;
-    const members = AssigneeSelectorComponent.putSessionUserFirst(this.memberList());
+    const members = putSessionUserFirst(this.memberList());
 
     return members.map(member => {
       return {
         value: {type: 'member', assignee: member},
-        searchKey: `${member.email} ${member.name} ${member.slug}`,
+        searchKey: `${member.email} ${member.name}`,
         label: ({inputValue}) => (
           <MenuItemWrapper
             data-test-id="assignee-option"
@@ -287,7 +272,6 @@ const AssigneeSelectorComponent = createReactClass({
               assignedTo && (
                 <MenuItemWrapper
                   data-test-id="clear-assignee"
-                  disabled={!loading}
                   onClick={this.clearAssignTo}
                   py={0}
                 >
@@ -337,6 +321,28 @@ const AssigneeSelectorComponent = createReactClass({
   },
 });
 
+export function putSessionUserFirst(members: Member[]): Member[] {
+  // If session user is in the filtered list of members, put them at the top
+  if (!members) {
+    return [];
+  }
+
+  const sessionUser = ConfigStore.get('user');
+  const sessionUserIndex = members.findIndex(
+    member => sessionUser && member.id === sessionUser.id
+  );
+
+  if (sessionUserIndex === -1) {
+    return members;
+  }
+
+  const arrangedMembers = [members[sessionUserIndex]];
+  arrangedMembers.push(...members.slice(0, sessionUserIndex));
+  arrangedMembers.push(...members.slice(sessionUserIndex + 1));
+
+  return arrangedMembers;
+}
+
 const AssigneeSelector = styled(AssigneeSelectorComponent)`
   display: flex;
   justify-content: flex-end;
@@ -373,16 +379,18 @@ const IconContainer = styled('div')`
   flex-shrink: 0;
 `;
 
-const MenuItemWrapper = styled(({py, ...props}) => <div {...props} />)`
+const MenuItemWrapper = styled('div')<{
+  py?: number;
+}>`
   cursor: pointer;
   display: flex;
   align-items: center;
   font-size: 13px;
-  ${props =>
-    typeof props.py !== 'undefined' &&
+  ${p =>
+    typeof p.py !== 'undefined' &&
     `
-      padding-top: ${props.py};
-      padding-bottom: ${props.py};
+      padding-top: ${p.py};
+      padding-bottom: ${p.py};
     `};
 `;
 
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index d8eb661647..51b18ec00b 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -340,6 +340,21 @@ export type Group = {
   userReportCount: number;
 };
 
+export type Member = {
+  id: string;
+  user: User;
+  name: string;
+  email: string;
+  pending: boolean | undefined;
+  role: string;
+  roleName: string;
+  flags: {
+    'sso:linked': boolean;
+    'sso:invalid': boolean;
+  };
+  dateCreated: string;
+};
+
 export type EventViewv1 = {
   name: string;
   data: {
diff --git a/tests/js/spec/components/assigneeSelector.spec.jsx b/tests/js/spec/components/assigneeSelector.spec.jsx
index 0fbbf6fd6e..21df7ea08a 100644
--- a/tests/js/spec/components/assigneeSelector.spec.jsx
+++ b/tests/js/spec/components/assigneeSelector.spec.jsx
@@ -1,6 +1,9 @@
 import React from 'react';
 
-import {AssigneeSelectorComponent} from 'app/components/assigneeSelector';
+import {
+  AssigneeSelectorComponent,
+  putSessionUserFirst,
+} from 'app/components/assigneeSelector';
 import {Client} from 'app/api';
 import {mount} from 'enzyme';
 import ConfigStore from 'app/stores/configStore';
@@ -105,7 +108,6 @@ describe('AssigneeSelector', function() {
   });
 
   describe('putSessionUserFirst()', function() {
-    const putSessionUserFirst = AssigneeSelectorComponent.putSessionUserFirst;
     it('should place the session user at the top of the member list if present', function() {
       jest.spyOn(ConfigStore, 'get').mockImplementation(() => ({
         id: '2',
