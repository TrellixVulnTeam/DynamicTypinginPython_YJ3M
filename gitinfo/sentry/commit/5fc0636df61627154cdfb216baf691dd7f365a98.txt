commit 5fc0636df61627154cdfb216baf691dd7f365a98
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Tue Jun 2 19:55:43 2020 +0200

    ref: Add more manual instrumentation to eventstore (#18914)

diff --git a/src/sentry/eventstore/base.py b/src/sentry/eventstore/base.py
index a613d316ff..d9f1d64bc3 100644
--- a/src/sentry/eventstore/base.py
+++ b/src/sentry/eventstore/base.py
@@ -2,6 +2,8 @@ from __future__ import absolute_import
 
 from copy import deepcopy
 
+import sentry_sdk
+
 from sentry import nodestore
 from sentry.snuba.events import Columns
 from sentry.utils.services import Service
@@ -227,17 +229,18 @@ class EventStorage(Service):
         It's not necessary to bind a single Event object since data will be lazily
         fetched on any attempt to access a property.
         """
-        object_node_list = [
-            (i, getattr(i, node_name)) for i in object_list if getattr(i, node_name).id
-        ]
+        with sentry_sdk.start_span(op="eventstore.base.bind_nodes"):
+            object_node_list = [
+                (i, getattr(i, node_name)) for i in object_list if getattr(i, node_name).id
+            ]
 
-        # Remove duplicates from the list of nodes to be fetched
-        node_ids = list({n.id for _, n in object_node_list})
-        if not node_ids:
-            return
+            # Remove duplicates from the list of nodes to be fetched
+            node_ids = list({n.id for _, n in object_node_list})
+            if not node_ids:
+                return
 
-        node_results = nodestore.get_multi(node_ids)
+            node_results = nodestore.get_multi(node_ids)
 
-        for item, node in object_node_list:
-            data = node_results.get(node.id) or {}
-            node.bind_data(data, ref=node.get_ref(item))
+            for item, node in object_node_list:
+                data = node_results.get(node.id) or {}
+                node.bind_data(data, ref=node.get_ref(item))
diff --git a/src/sentry/eventstore/snuba/backend.py b/src/sentry/eventstore/snuba/backend.py
index 69de5fdb87..ab668cac6b 100644
--- a/src/sentry/eventstore/snuba/backend.py
+++ b/src/sentry/eventstore/snuba/backend.py
@@ -5,6 +5,7 @@ import six
 from copy import deepcopy
 from datetime import timedelta
 import logging
+import sentry_sdk
 
 from sentry.eventstore.base import EventStorage
 from sentry.snuba.events import Columns
@@ -57,14 +58,15 @@ class SnubaEventStorage(EventStorage):
         """
         Get events from Snuba, with node data loaded.
         """
-        return self.__get_events(
-            filter,  # NOQA
-            orderby=orderby,
-            limit=limit,
-            offset=offset,
-            referrer=referrer,
-            should_bind_nodes=True,
-        )
+        with sentry_sdk.start_span(op="eventstore.snuba.get_events"):
+            return self.__get_events(
+                filter,  # NOQA
+                orderby=orderby,
+                limit=limit,
+                offset=offset,
+                referrer=referrer,
+                should_bind_nodes=True,
+            )
 
     def get_unfetched_events(
         self,
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index dfef034465..f326642c2d 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -762,7 +762,23 @@ def resolve_condition(cond, column_resolver):
     raise ValueError("Unexpected condition format %s" % cond)
 
 
-def aliased_query(
+def aliased_query(**kwargs):
+    """
+    Wrapper around raw_query that selects the dataset based on the
+    selected_columns, conditions and groupby parameters.
+    Useful for taking arbitrary end user queries and running
+    them on one of the snuba datasets.
+
+    This function will also resolve column aliases to match the selected dataset
+
+    This method should be used sparingly. Instead prefer to use sentry.eventstore
+    sentry.tagstore, or sentry.snuba.discover instead when reading data.
+    """
+    with sentry_sdk.start_span(op="sentry.snuba.aliased_query"):
+        return _aliased_query_impl(**kwargs)
+
+
+def _aliased_query_impl(
     start=None,
     end=None,
     groupby=None,
@@ -777,17 +793,6 @@ def aliased_query(
     condition_resolver=None,
     **kwargs
 ):
-    """
-    Wrapper around raw_query that selects the dataset based on the
-    selected_columns, conditions and groupby parameters.
-    Useful for taking arbitrary end user queries and running
-    them on one of the snuba datasets.
-
-    This function will also resolve column aliases to match the selected dataset
-
-    This method should be used sparingly. Instead prefer to use sentry.eventstore
-    sentry.tagstore, or sentry.snuba.discover instead when reading data.
-    """
     if dataset is None:
         raise ValueError("A dataset is required, and is no longer automatically detected.")
 
