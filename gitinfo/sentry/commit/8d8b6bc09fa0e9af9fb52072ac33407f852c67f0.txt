commit 8d8b6bc09fa0e9af9fb52072ac33407f852c67f0
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Mar 6 07:31:48 2018 +0900

    feat(settings): Fix org overrides in project always disabled (#7439)
    
    * feat(settings): Fix org overrides in project always disabled
    
    * ref(settings): Cleanup AsyncView deprecation
    
    * fix(settings): subjectTemplate
    
    * remove project general settings snapshot in favor of explicit assertions

diff --git a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
index 747be4f306..2ae9fc0d67 100644
--- a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
@@ -30,9 +30,8 @@ const ORG_DISABLED_REASON = t(
   "This option is enforced by your organization's settings and cannot be customized per-project."
 );
 
-// Check if a field has been set at the organization level.
-const hasOrgOverride = ({organization, name}) =>
-  typeof organization[name] !== 'undefined';
+// Check if a field has been set AND IS TRUTHY at the organization level.
+const hasOrgOverride = ({organization, name}) => organization[name];
 
 const formGroups = [
   {
@@ -73,7 +72,7 @@ const formGroups = [
     title: t('Email'),
     fields: [
       {
-        name: 'subjectPrefix',
+        name: 'subjectTemplate',
         type: 'string',
         label: t('Subject Prefix'),
         help: t('Choose a custom prefix for emails from this project'),
@@ -124,6 +123,9 @@ const formGroups = [
         disabled: hasOrgOverride,
         disabledReason: ORG_DISABLED_REASON,
         help: t('Enable server-side data scrubbing'),
+        // `props` are the props given to FormField
+        setValue: (val, props) =>
+          (props.organization && props.organization[props.name]) || val,
       },
       {
         name: 'dataScrubberDefaults',
@@ -134,6 +136,20 @@ const formGroups = [
         help: t(
           'Apply default scrubbers to prevent things like passwords and credit cards from being stored'
         ),
+        // `props` are the props given to FormField
+        setValue: (val, props) =>
+          (props.organization && props.organization[props.name]) || val,
+      },
+      {
+        name: 'scrubIPAddresses',
+        type: 'boolean',
+        disabled: hasOrgOverride,
+        disabledReason: ORG_DISABLED_REASON,
+        // `props` are the props given to FormField
+        setValue: (val, props) =>
+          (props.organization && props.organization[props.name]) || val,
+        label: t('Prevent Storing of IP Addresses'),
+        help: t('Preventing IP addresses from being stored for new events'),
       },
       {
         name: 'sensitiveFields',
@@ -159,14 +175,6 @@ const formGroups = [
         getValue: val => extractMultilineFields(val),
         setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
       },
-      {
-        name: 'scrubIPAddresses',
-        type: 'boolean',
-        disabled: hasOrgOverride,
-        disabledReason: ORG_DISABLED_REASON,
-        label: t("Don't Store IP Addresses"),
-        help: t('Preventing IP addresses from being stored for new events'),
-      },
     ],
   },
 
diff --git a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
index c253575c39..79d97f75ba 100644
--- a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
@@ -38,9 +38,9 @@ export default class ProjectGeneralSettings extends AsyncView {
     organization: PropTypes.object.isRequired,
   };
 
-  getEndpoint() {
+  getEndpoints() {
     let {orgId, projectId} = this.props.params;
-    return `/projects/${orgId}/${projectId}/`;
+    return [['data', `/projects/${orgId}/${projectId}/`]];
   }
 
   renderRemoveProject() {
@@ -155,26 +155,8 @@ export default class ProjectGeneralSettings extends AsyncView {
   renderBody() {
     let {organization} = this.context;
     let project = this.state.data;
-    let {projectId} = this.props.params;
-    let initialData = {
-      name: project.name,
-      slug: project.slug,
-      team: project.team && project.team.slug,
-      allowedDomains: project.allowedDomains,
-      resolveAge: project.resolveAge,
-      dataScrubber: project.dataScrubber,
-      dataScrubberDefaults: project.dataScrubberDefaults,
-      sensitiveFields: project.sensitiveFields,
-      safeFields: project.safeFields,
-      defaultEnvironment: project.defaultEnvironment,
-      subjectPrefix: project.subjectPrefix,
-      scrubIPAddresses: project.scrubIPAddresses,
-      securityToken: project.securityToken,
-      securityHeader: project.securityHeader,
-      securityTokenHeader: project.securityTokenHeader,
-      verifySSL: project.verifySSL,
-      scrapeJavaScript: project.scrapeJavaScript,
-    };
+    let {orgId, projectId} = this.props.params;
+    let endpoint = `/projects/${orgId}/${projectId}/`;
 
     return (
       <div>
@@ -183,9 +165,12 @@ export default class ProjectGeneralSettings extends AsyncView {
         <Form
           saveOnBlur
           allowUndo
-          initialData={initialData}
+          initialData={{
+            ...project,
+            team: project.team && project.team.slug,
+          }}
           apiMethod="PUT"
-          apiEndpoint={this.getEndpoint()}
+          apiEndpoint={endpoint}
           onSubmitSuccess={resp => {
             // Reload if slug has changed
             if (projectId !== resp.slug) {
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
index 3931e9ff87..ca48dcf112 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
@@ -132,7 +132,7 @@ class FormModel {
   setFieldDescriptor(id, props) {
     this.fieldDescriptor.set(id, props);
     if (typeof props.setValue === 'function') {
-      this.initialData[id] = props.setValue(this.initialData[id]);
+      this.initialData[id] = props.setValue(this.initialData[id], props);
       this.setValue(id, this.initialData[id]);
     }
   }
diff --git a/tests/js/setup.js b/tests/js/setup.js
index d237295c0b..38e10a63fa 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -559,6 +559,17 @@ window.TestStubs = {
       subjectTemplate: '[$project] ${tag:level}: $title',
       digestsMinDelay: 5,
       digestsMaxDelay: 60,
+      dataScrubber: false,
+      dataScrubberDefaults: false,
+      scrubIPAddresses: false,
+      resolveAge: 48,
+      sensitiveFields: ['creditcard', 'ssn'],
+      safeFields: ['business-email', 'company'],
+      allowedDomains: ['example.com', 'https://example.com'],
+      scrapeJavaScript: true,
+      securityToken: 'security-token',
+      securityTokenHeader: 'x-security-header',
+      verifySSL: true,
       ...params,
     };
   },
diff --git a/tests/js/spec/views/__snapshots__/organizationProjects.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationProjects.spec.jsx.snap
index de30531b81..81a5f319e7 100644
--- a/tests/js/spec/views/__snapshots__/organizationProjects.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationProjects.spec.jsx.snap
@@ -114,12 +114,32 @@ exports[`OrganizationProjectsView render() Should render the projects in the sto
     projects={
       Array [
         Object {
+          "allowedDomains": Array [
+            "example.com",
+            "https://example.com",
+          ],
+          "dataScrubber": false,
+          "dataScrubberDefaults": false,
           "digestsMaxDelay": 60,
           "digestsMinDelay": 5,
           "id": "2",
           "name": "Project Name",
+          "resolveAge": 48,
+          "safeFields": Array [
+            "business-email",
+            "company",
+          ],
+          "scrapeJavaScript": true,
+          "scrubIPAddresses": false,
+          "securityToken": "security-token",
+          "securityTokenHeader": "x-security-header",
+          "sensitiveFields": Array [
+            "creditcard",
+            "ssn",
+          ],
           "slug": "project-slug",
           "subjectTemplate": "[$project] \${tag:level}: $title",
+          "verifySSL": true,
         },
       ]
     }
@@ -323,12 +343,32 @@ exports[`OrganizationProjectsView render() Should render the projects in the sto
                                   }
                                   project={
                                     Object {
+                                      "allowedDomains": Array [
+                                        "example.com",
+                                        "https://example.com",
+                                      ],
+                                      "dataScrubber": false,
+                                      "dataScrubberDefaults": false,
                                       "digestsMaxDelay": 60,
                                       "digestsMinDelay": 5,
                                       "id": "2",
                                       "name": "Project Name",
+                                      "resolveAge": 48,
+                                      "safeFields": Array [
+                                        "business-email",
+                                        "company",
+                                      ],
+                                      "scrapeJavaScript": true,
+                                      "scrubIPAddresses": false,
+                                      "securityToken": "security-token",
+                                      "securityTokenHeader": "x-security-header",
+                                      "sensitiveFields": Array [
+                                        "creditcard",
+                                        "ssn",
+                                      ],
                                       "slug": "project-slug",
                                       "subjectTemplate": "[$project] \${tag:level}: $title",
+                                      "verifySSL": true,
                                     }
                                   }
                                 >
@@ -399,12 +439,32 @@ exports[`OrganizationProjectsView render() Should render the projects in the sto
                                             }
                                             project={
                                               Object {
+                                                "allowedDomains": Array [
+                                                  "example.com",
+                                                  "https://example.com",
+                                                ],
+                                                "dataScrubber": false,
+                                                "dataScrubberDefaults": false,
                                                 "digestsMaxDelay": 60,
                                                 "digestsMinDelay": 5,
                                                 "id": "2",
                                                 "name": "Project Name",
+                                                "resolveAge": 48,
+                                                "safeFields": Array [
+                                                  "business-email",
+                                                  "company",
+                                                ],
+                                                "scrapeJavaScript": true,
+                                                "scrubIPAddresses": false,
+                                                "securityToken": "security-token",
+                                                "securityTokenHeader": "x-security-header",
+                                                "sensitiveFields": Array [
+                                                  "creditcard",
+                                                  "ssn",
+                                                ],
                                                 "slug": "project-slug",
                                                 "subjectTemplate": "[$project] \${tag:level}: $title",
+                                                "verifySSL": true,
                                               }
                                             }
                                           >
@@ -443,12 +503,32 @@ exports[`OrganizationProjectsView render() Should render the projects in the sto
                                   key="2"
                                   project={
                                     Object {
+                                      "allowedDomains": Array [
+                                        "example.com",
+                                        "https://example.com",
+                                      ],
+                                      "dataScrubber": false,
+                                      "dataScrubberDefaults": false,
                                       "digestsMaxDelay": 60,
                                       "digestsMinDelay": 5,
                                       "id": "2",
                                       "name": "Project Name",
+                                      "resolveAge": 48,
+                                      "safeFields": Array [
+                                        "business-email",
+                                        "company",
+                                      ],
+                                      "scrapeJavaScript": true,
+                                      "scrubIPAddresses": false,
+                                      "securityToken": "security-token",
+                                      "securityTokenHeader": "x-security-header",
+                                      "sensitiveFields": Array [
+                                        "creditcard",
+                                        "ssn",
+                                      ],
                                       "slug": "project-slug",
                                       "subjectTemplate": "[$project] \${tag:level}: $title",
+                                      "verifySSL": true,
                                     }
                                   }
                                 >
diff --git a/tests/js/spec/views/__snapshots__/organizationRateLimits.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationRateLimits.spec.jsx.snap
index 82cc2f6623..568dfc9c4d 100644
--- a/tests/js/spec/views/__snapshots__/organizationRateLimits.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationRateLimits.spec.jsx.snap
@@ -111,12 +111,32 @@ exports[`OrganizationStats renders 1`] = `
     projectMap={
       Object {
         "2": Object {
+          "allowedDomains": Array [
+            "example.com",
+            "https://example.com",
+          ],
+          "dataScrubber": false,
+          "dataScrubberDefaults": false,
           "digestsMaxDelay": 60,
           "digestsMinDelay": 5,
           "id": "2",
           "name": "Project Name",
+          "resolveAge": 48,
+          "safeFields": Array [
+            "business-email",
+            "company",
+          ],
+          "scrapeJavaScript": true,
+          "scrubIPAddresses": false,
+          "securityToken": "security-token",
+          "securityTokenHeader": "x-security-header",
+          "sensitiveFields": Array [
+            "creditcard",
+            "ssn",
+          ],
           "slug": "project-slug",
           "subjectTemplate": "[$project] \${tag:level}: $title",
+          "verifySSL": true,
         },
       }
     }
@@ -176,12 +196,32 @@ exports[`OrganizationStats renders 1`] = `
       projectMap={
         Object {
           "2": Object {
+            "allowedDomains": Array [
+              "example.com",
+              "https://example.com",
+            ],
+            "dataScrubber": false,
+            "dataScrubberDefaults": false,
             "digestsMaxDelay": 60,
             "digestsMinDelay": 5,
             "id": "2",
             "name": "Project Name",
+            "resolveAge": 48,
+            "safeFields": Array [
+              "business-email",
+              "company",
+            ],
+            "scrapeJavaScript": true,
+            "scrubIPAddresses": false,
+            "securityToken": "security-token",
+            "securityTokenHeader": "x-security-header",
+            "sensitiveFields": Array [
+              "creditcard",
+              "ssn",
+            ],
             "slug": "project-slug",
             "subjectTemplate": "[$project] \${tag:level}: $title",
+            "verifySSL": true,
           },
         }
       }
diff --git a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
index 9161b441d1..33b786d075 100644
--- a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
@@ -224,12 +224,32 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                             }
                             project={
                               Object {
+                                "allowedDomains": Array [
+                                  "example.com",
+                                  "https://example.com",
+                                ],
+                                "dataScrubber": false,
+                                "dataScrubberDefaults": false,
                                 "digestsMaxDelay": 60,
                                 "digestsMinDelay": 5,
                                 "id": "2",
                                 "name": "Project Name",
+                                "resolveAge": 48,
+                                "safeFields": Array [
+                                  "business-email",
+                                  "company",
+                                ],
+                                "scrapeJavaScript": true,
+                                "scrubIPAddresses": false,
+                                "securityToken": "security-token",
+                                "securityTokenHeader": "x-security-header",
+                                "sensitiveFields": Array [
+                                  "creditcard",
+                                  "ssn",
+                                ],
                                 "slug": "project-slug",
                                 "subjectTemplate": "[$project] \${tag:level}: $title",
+                                "verifySSL": true,
                               }
                             }
                           >
@@ -300,12 +320,32 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                       }
                                       project={
                                         Object {
+                                          "allowedDomains": Array [
+                                            "example.com",
+                                            "https://example.com",
+                                          ],
+                                          "dataScrubber": false,
+                                          "dataScrubberDefaults": false,
                                           "digestsMaxDelay": 60,
                                           "digestsMinDelay": 5,
                                           "id": "2",
                                           "name": "Project Name",
+                                          "resolveAge": 48,
+                                          "safeFields": Array [
+                                            "business-email",
+                                            "company",
+                                          ],
+                                          "scrapeJavaScript": true,
+                                          "scrubIPAddresses": false,
+                                          "securityToken": "security-token",
+                                          "securityTokenHeader": "x-security-header",
+                                          "sensitiveFields": Array [
+                                            "creditcard",
+                                            "ssn",
+                                          ],
                                           "slug": "project-slug",
                                           "subjectTemplate": "[$project] \${tag:level}: $title",
+                                          "verifySSL": true,
                                         }
                                       }
                                     >
diff --git a/tests/js/spec/views/__snapshots__/projectAlertRuleDetails.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectAlertRuleDetails.spec.jsx.snap
index ea37ee9d55..ed0945580e 100644
--- a/tests/js/spec/views/__snapshots__/projectAlertRuleDetails.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectAlertRuleDetails.spec.jsx.snap
@@ -79,12 +79,32 @@ exports[`ProjectAlertRuleDetails Edit alert rule renders 1`] = `
         }
         project={
           Object {
+            "allowedDomains": Array [
+              "example.com",
+              "https://example.com",
+            ],
+            "dataScrubber": false,
+            "dataScrubberDefaults": false,
             "digestsMaxDelay": 60,
             "digestsMinDelay": 5,
             "id": "2",
             "name": "Project Name",
+            "resolveAge": 48,
+            "safeFields": Array [
+              "business-email",
+              "company",
+            ],
+            "scrapeJavaScript": true,
+            "scrubIPAddresses": false,
+            "securityToken": "security-token",
+            "securityTokenHeader": "x-security-header",
+            "sensitiveFields": Array [
+              "creditcard",
+              "ssn",
+            ],
             "slug": "project-slug",
             "subjectTemplate": "[$project] \${tag:level}: $title",
+            "verifySSL": true,
           }
         }
       >
@@ -680,12 +700,32 @@ exports[`ProjectAlertRuleDetails New alert rule renders 1`] = `
         }
         project={
           Object {
+            "allowedDomains": Array [
+              "example.com",
+              "https://example.com",
+            ],
+            "dataScrubber": false,
+            "dataScrubberDefaults": false,
             "digestsMaxDelay": 60,
             "digestsMinDelay": 5,
             "id": "2",
             "name": "Project Name",
+            "resolveAge": 48,
+            "safeFields": Array [
+              "business-email",
+              "company",
+            ],
+            "scrapeJavaScript": true,
+            "scrubIPAddresses": false,
+            "securityToken": "security-token",
+            "securityTokenHeader": "x-security-header",
+            "sensitiveFields": Array [
+              "creditcard",
+              "ssn",
+            ],
             "slug": "project-slug",
             "subjectTemplate": "[$project] \${tag:level}: $title",
+            "verifySSL": true,
           }
         }
       >
diff --git a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
index 6ad1b99736..d0c00f4b96 100644
--- a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
@@ -106,12 +106,32 @@ exports[`ProjectAlertSettings render() renders 1`] = `
       pluginList={Array []}
       project={
         Object {
+          "allowedDomains": Array [
+            "example.com",
+            "https://example.com",
+          ],
+          "dataScrubber": false,
+          "dataScrubberDefaults": false,
           "digestsMaxDelay": 60,
           "digestsMinDelay": 5,
           "id": "2",
           "name": "Project Name",
+          "resolveAge": 48,
+          "safeFields": Array [
+            "business-email",
+            "company",
+          ],
+          "scrapeJavaScript": true,
+          "scrubIPAddresses": false,
+          "securityToken": "security-token",
+          "securityTokenHeader": "x-security-header",
+          "sensitiveFields": Array [
+            "creditcard",
+            "ssn",
+          ],
           "slug": "project-slug",
           "subjectTemplate": "[$project] \${tag:level}: $title",
+          "verifySSL": true,
         }
       }
     />
diff --git a/tests/js/spec/views/__snapshots__/projectGeneralSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectGeneralSettings.spec.jsx.snap
deleted file mode 100644
index c5aac0ece6..0000000000
--- a/tests/js/spec/views/__snapshots__/projectGeneralSettings.spec.jsx.snap
+++ /dev/null
@@ -1,361 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`projectGeneralSettings renders 1`] = `
-<SideEffect(DocumentTitle)
-  title="Sentry"
->
-  <div>
-    <SettingsPageHeading
-      title="Project Settings"
-    />
-    <Form
-      allowUndo={true}
-      apiEndpoint="/projects/org-slug/project-slug/"
-      apiMethod="PUT"
-      cancelLabel="Cancel"
-      className="form-stacked"
-      footerClass="form-actions align-right"
-      initialData={
-        Object {
-          "allowedDomains": undefined,
-          "dataScrubber": undefined,
-          "dataScrubberDefaults": undefined,
-          "defaultEnvironment": undefined,
-          "name": "Project Name",
-          "resolveAge": undefined,
-          "safeFields": undefined,
-          "scrapeJavaScript": undefined,
-          "scrubIPAddresses": undefined,
-          "securityHeader": undefined,
-          "securityToken": undefined,
-          "securityTokenHeader": undefined,
-          "sensitiveFields": undefined,
-          "slug": "project-slug",
-          "subjectPrefix": undefined,
-          "team": undefined,
-          "verifySSL": undefined,
-        }
-      }
-      onSubmitError={[Function]}
-      onSubmitSuccess={[Function]}
-      requireChanges={false}
-      saveOnBlur={true}
-      submitDisabled={false}
-      submitLabel="Save Changes"
-    >
-      <JsonForm
-        access={
-          Set {
-            "org:read",
-            "org:write",
-            "org:admin",
-            "project:read",
-            "project:write",
-            "project:admin",
-            "team:read",
-            "team:write",
-            "team:admin",
-          }
-        }
-        additionalFieldProps={
-          Object {
-            "organization": Object {
-              "access": Array [
-                "org:read",
-                "org:write",
-                "org:admin",
-                "project:read",
-                "project:write",
-                "project:admin",
-                "team:read",
-                "team:write",
-                "team:admin",
-              ],
-              "features": Array [],
-              "id": "3",
-              "name": "Organization Name",
-              "onboardingTasks": Array [],
-              "projects": Array [],
-              "slug": "org-slug",
-              "status": Object {
-                "id": "active",
-                "name": "active",
-              },
-              "teams": Array [],
-            },
-          }
-        }
-        forms={
-          Array [
-            Object {
-              "fields": Array [
-                Object {
-                  "help": "The name of your project",
-                  "label": "Project Name",
-                  "name": "name",
-                  "placeholder": "My Service Name",
-                  "required": true,
-                  "type": "string",
-                },
-                Object {
-                  "help": "A unique ID used to identify this project",
-                  "label": "Short Name",
-                  "name": "slug",
-                  "placeholder": "my-service-name",
-                  "required": true,
-                  "type": "string",
-                },
-                Object {
-                  "choices": [Function],
-                  "help": "Update the team that owns this project",
-                  "label": "Team",
-                  "name": "team",
-                  "type": "array",
-                  "visible": [Function],
-                },
-              ],
-              "title": "Project Details",
-            },
-            Object {
-              "fields": Array [
-                Object {
-                  "help": "Choose a custom prefix for emails from this project",
-                  "label": "Subject Prefix",
-                  "name": "subjectPrefix",
-                  "type": "string",
-                },
-              ],
-              "title": "Email",
-            },
-            Object {
-              "fields": Array [
-                Object {
-                  "help": "The default selected environment when viewing issues",
-                  "label": "Default Environment",
-                  "name": "defaultEnvironment",
-                  "placeholder": "production",
-                  "type": "string",
-                },
-                Object {
-                  "allowedValues": Array [
-                    0,
-                    1,
-                    2,
-                    3,
-                    4,
-                    5,
-                    6,
-                    7,
-                    8,
-                    9,
-                    10,
-                    11,
-                    12,
-                    15,
-                    18,
-                    21,
-                    24,
-                    30,
-                    36,
-                    48,
-                    72,
-                    96,
-                    120,
-                    144,
-                    168,
-                    192,
-                    216,
-                    240,
-                    264,
-                    288,
-                    312,
-                    336,
-                    360,
-                    384,
-                    408,
-                    432,
-                    456,
-                    480,
-                    504,
-                    528,
-                    552,
-                    576,
-                    600,
-                    624,
-                    648,
-                    672,
-                    696,
-                    720,
-                  ],
-                  "formatLabel": [Function],
-                  "help": "Automatically resolve an issue if it hasn't been seen for this amount of time",
-                  "label": "Auto Resolve",
-                  "name": "resolveAge",
-                  "type": "range",
-                },
-              ],
-              "title": "Event Settings",
-            },
-            Object {
-              "fields": Array [
-                Object {
-                  "disabled": [Function],
-                  "disabledReason": "This option is enforced by your organization's settings and cannot be customized per-project.",
-                  "help": "Enable server-side data scrubbing",
-                  "label": "Data Scrubber",
-                  "name": "dataScrubber",
-                  "type": "boolean",
-                },
-                Object {
-                  "disabled": [Function],
-                  "disabledReason": "This option is enforced by your organization's settings and cannot be customized per-project.",
-                  "help": "Apply default scrubbers to prevent things like passwords and credit cards from being stored",
-                  "label": "Use Default Scrubbers",
-                  "name": "dataScrubberDefaults",
-                  "type": "boolean",
-                },
-                Object {
-                  "getValue": [Function],
-                  "help": "Additional field names to match against when scrubbing data. Separate multiple entries with a newline",
-                  "label": "Additional Sensitive Fields",
-                  "multiline": true,
-                  "name": "sensitiveFields",
-                  "placeholder": "email",
-                  "setValue": [Function],
-                  "type": "string",
-                },
-                Object {
-                  "getValue": [Function],
-                  "help": "Field names which data scrubbers should ignore. Separate multiple entries with a newline",
-                  "label": "Safe Fields",
-                  "multiline": true,
-                  "name": "safeFields",
-                  "placeholder": "business-email",
-                  "setValue": [Function],
-                  "type": "string",
-                },
-                Object {
-                  "disabled": [Function],
-                  "disabledReason": "This option is enforced by your organization's settings and cannot be customized per-project.",
-                  "help": "Preventing IP addresses from being stored for new events",
-                  "label": "Don't Store IP Addresses",
-                  "name": "scrubIPAddresses",
-                  "type": "boolean",
-                },
-              ],
-              "title": "Data Privacy",
-            },
-            Object {
-              "fields": Array [
-                Object {
-                  "getValue": [Function],
-                  "help": "Separate multiple entries with a newline",
-                  "label": "Allowed Domains",
-                  "multiline": true,
-                  "name": "allowedDomains",
-                  "placeholder": "https://example.com or example.com",
-                  "setValue": [Function],
-                  "type": "string",
-                },
-                Object {
-                  "help": "Allow Sentry to scrape missing JavaScript source context when possible",
-                  "label": "Enable JavaScript source fetching",
-                  "name": "scrapeJavaScript",
-                  "type": "boolean",
-                },
-                Object {
-                  "help": "Outbound requests matching Allowed Domains will have the header \\"{token_header}: {token}\\" appended",
-                  "label": "Security Token",
-                  "name": "securityToken",
-                  "type": "string",
-                },
-                Object {
-                  "help": "Outbound requests matching Allowed Domains will have the header \\"{token_header}: {token}\\" appended.",
-                  "label": "Security Token Header",
-                  "name": "securityTokenHeader",
-                  "placeholder": "X-Sentry-Token",
-                  "type": "string",
-                },
-                Object {
-                  "help": "Outbound requests will verify TLS (sometimes known as SSL) connections.",
-                  "label": "Verify TLS/SSL",
-                  "name": "verifySSL",
-                  "type": "boolean",
-                },
-              ],
-              "title": "Client Security",
-            },
-          ]
-        }
-        renderBodyStart={[Function]}
-        renderFooter={[Function]}
-      />
-    </Form>
-    <Panel>
-      <PanelHeader>
-        Project Administration
-      </PanelHeader>
-      <FieldWrapper
-        inline={true}
-      >
-        <FieldDescription
-          inline={true}
-        >
-          <FieldLabel>
-            Remove Project
-          </FieldLabel>
-          <FieldHelp>
-            Remove the 
-            <strong>
-              project-slug
-            </strong>
-             project and all related data.
-            <br />
-            Careful, this action cannot be undone.
-          </FieldHelp>
-        </FieldDescription>
-        <FieldControl
-          hideControlState={false}
-        >
-          <a
-            className="btn btn-danger"
-            href="/org-slug/project-slug/settings/remove/"
-          >
-            Remove Project
-          </a>
-        </FieldControl>
-      </FieldWrapper>
-      <FieldWrapper
-        inline={true}
-      >
-        <FieldDescription
-          inline={true}
-        >
-          <FieldLabel>
-            Transfer Project
-          </FieldLabel>
-          <FieldHelp>
-            Transfer the 
-            <strong>
-              project-slug
-            </strong>
-             project and all related data.
-            <br />
-            Careful, this action cannot be undone.
-          </FieldHelp>
-        </FieldDescription>
-        <FieldControl
-          hideControlState={false}
-        >
-          <a
-            className="btn btn-danger"
-            href="/org-slug/project-slug/settings/transfer/"
-          >
-            Transfer Project
-          </a>
-        </FieldControl>
-      </FieldWrapper>
-    </Panel>
-  </div>
-</SideEffect(DocumentTitle)>
-`;
diff --git a/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
index 4e6a832fa2..326891a1d0 100644
--- a/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
@@ -169,12 +169,32 @@ exports[`ProjectPluginDetails renders 1`] = `
   }
   project={
     Object {
+      "allowedDomains": Array [
+        "example.com",
+        "https://example.com",
+      ],
+      "dataScrubber": false,
+      "dataScrubberDefaults": false,
       "digestsMaxDelay": 60,
       "digestsMinDelay": 5,
       "id": "2",
       "name": "Project Name",
+      "resolveAge": 48,
+      "safeFields": Array [
+        "business-email",
+        "company",
+      ],
+      "scrapeJavaScript": true,
+      "scrubIPAddresses": false,
+      "securityToken": "security-token",
+      "securityTokenHeader": "x-security-header",
+      "sensitiveFields": Array [
+        "creditcard",
+        "ssn",
+      ],
       "slug": "project-slug",
       "subjectTemplate": "[$project] \${tag:level}: $title",
+      "verifySSL": true,
     }
   }
 >
@@ -228,12 +248,32 @@ exports[`ProjectPluginDetails renders 1`] = `
     }
     project={
       Object {
+        "allowedDomains": Array [
+          "example.com",
+          "https://example.com",
+        ],
+        "dataScrubber": false,
+        "dataScrubberDefaults": false,
         "digestsMaxDelay": 60,
         "digestsMinDelay": 5,
         "id": "2",
         "name": "Project Name",
+        "resolveAge": 48,
+        "safeFields": Array [
+          "business-email",
+          "company",
+        ],
+        "scrapeJavaScript": true,
+        "scrubIPAddresses": false,
+        "securityToken": "security-token",
+        "securityTokenHeader": "x-security-header",
+        "sensitiveFields": Array [
+          "creditcard",
+          "ssn",
+        ],
         "slug": "project-slug",
         "subjectTemplate": "[$project] \${tag:level}: $title",
+        "verifySSL": true,
       }
     }
   >
@@ -417,12 +457,32 @@ exports[`ProjectPluginDetails renders 1`] = `
                 }
                 project={
                   Object {
+                    "allowedDomains": Array [
+                      "example.com",
+                      "https://example.com",
+                    ],
+                    "dataScrubber": false,
+                    "dataScrubberDefaults": false,
                     "digestsMaxDelay": 60,
                     "digestsMinDelay": 5,
                     "id": "2",
                     "name": "Project Name",
+                    "resolveAge": 48,
+                    "safeFields": Array [
+                      "business-email",
+                      "company",
+                    ],
+                    "scrapeJavaScript": true,
+                    "scrubIPAddresses": false,
+                    "securityToken": "security-token",
+                    "securityTokenHeader": "x-security-header",
+                    "sensitiveFields": Array [
+                      "creditcard",
+                      "ssn",
+                    ],
                     "slug": "project-slug",
                     "subjectTemplate": "[$project] \${tag:level}: $title",
+                    "verifySSL": true,
                   }
                 }
               >
@@ -601,12 +661,32 @@ exports[`ProjectPluginDetails renders 1`] = `
                               }
                               project={
                                 Object {
+                                  "allowedDomains": Array [
+                                    "example.com",
+                                    "https://example.com",
+                                  ],
+                                  "dataScrubber": false,
+                                  "dataScrubberDefaults": false,
                                   "digestsMaxDelay": 60,
                                   "digestsMinDelay": 5,
                                   "id": "2",
                                   "name": "Project Name",
+                                  "resolveAge": 48,
+                                  "safeFields": Array [
+                                    "business-email",
+                                    "company",
+                                  ],
+                                  "scrapeJavaScript": true,
+                                  "scrubIPAddresses": false,
+                                  "securityToken": "security-token",
+                                  "securityTokenHeader": "x-security-header",
+                                  "sensitiveFields": Array [
+                                    "creditcard",
+                                    "ssn",
+                                  ],
                                   "slug": "project-slug",
                                   "subjectTemplate": "[$project] \${tag:level}: $title",
+                                  "verifySSL": true,
                                 }
                               }
                             />
diff --git a/tests/js/spec/views/projectGeneralSettings.spec.jsx b/tests/js/spec/views/projectGeneralSettings.spec.jsx
index f3ca22e271..66c6006708 100644
--- a/tests/js/spec/views/projectGeneralSettings.spec.jsx
+++ b/tests/js/spec/views/projectGeneralSettings.spec.jsx
@@ -1,6 +1,6 @@
 import React from 'react';
 import {ThemeProvider} from 'emotion-theming';
-import {mount, shallow} from 'enzyme';
+import {mount} from 'enzyme';
 
 import {Client} from 'app/api';
 
@@ -19,40 +19,73 @@ describe('projectGeneralSettings', function() {
     });
   });
 
-  it('renders', function() {
-    let component = shallow(
-      <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />,
-      {
-        context: {
-          organization: org,
-        },
-      }
+  it('renders form fields', function() {
+    let wrapper = mount(
+      <ThemeProvider theme={theme}>
+        <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />
+      </ThemeProvider>,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('Input[name="name"]').prop('value')).toBe('Project Name');
+    expect(wrapper.find('Input[name="slug"]').prop('value')).toBe('project-slug');
+    expect(wrapper.find('Input[name="subjectTemplate"]').prop('value')).toBe(
+      '[$project] ${tag:level}: $title'
     );
-    expect(component).toMatchSnapshot();
+    expect(wrapper.find('Input[name="defaultEnvironment"]').prop('value')).toBe('');
+    expect(wrapper.find('RangeSlider[name="resolveAge"]').prop('value')).toBe(48);
+    expect(wrapper.find('Switch[name="dataScrubber"]').prop('isActive')).toBeFalsy();
+    expect(
+      wrapper.find('Switch[name="dataScrubberDefaults"]').prop('isActive')
+    ).toBeFalsy();
+    expect(wrapper.find('Switch[name="scrubIPAddresses"]').prop('isActive')).toBeFalsy();
+    expect(wrapper.find('TextArea[name="sensitiveFields"]').prop('value')).toBe(
+      'creditcard\nssn'
+    );
+    expect(wrapper.find('TextArea[name="safeFields"]').prop('value')).toBe(
+      'business-email\ncompany'
+    );
+    expect(wrapper.find('TextArea[name="allowedDomains"]').prop('value')).toBe(
+      'example.com\nhttps://example.com'
+    );
+    expect(wrapper.find('Switch[name="scrapeJavaScript"]').prop('isActive')).toBeTruthy();
+    expect(wrapper.find('Input[name="securityToken"]').prop('value')).toBe(
+      'security-token'
+    );
+    expect(wrapper.find('Input[name="securityTokenHeader"]').prop('value')).toBe(
+      'x-security-header'
+    );
+    expect(wrapper.find('Switch[name="verifySSL"]').prop('isActive')).toBeTruthy();
   });
 
-  it('disables field with an org override', function() {
+  it('disables field when equivalent org setting is true', function() {
     let routerContext = TestStubs.routerContext();
     routerContext.context.organization.dataScrubber = true;
-    let component = mount(
+    routerContext.context.organization.scrubIPAddresses = false;
+    let wrapper = mount(
       <ThemeProvider theme={theme}>
         <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />
       </ThemeProvider>,
       routerContext
     );
-    expect(component.find('Switch[name="dataScrubber"]').prop('isDisabled')).toBe(true);
+    expect(wrapper.find('Switch[name="scrubIPAddresses"]').prop('isDisabled')).toBe(
+      false
+    );
+    expect(wrapper.find('Switch[name="scrubIPAddresses"]').prop('isActive')).toBeFalsy();
+    expect(wrapper.find('Switch[name="dataScrubber"]').prop('isDisabled')).toBe(true);
+    expect(wrapper.find('Switch[name="dataScrubber"]').prop('isActive')).toBe(true);
   });
 
   it('project admins can transfer or remove project', function() {
-    let component = mount(
+    let wrapper = mount(
       <ThemeProvider theme={theme}>
         <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />
       </ThemeProvider>,
       TestStubs.routerContext()
     );
 
-    let removeBtn = component.find('a.btn.btn-danger').first();
-    let transferBtn = component.find('a.btn.btn-danger').at(1);
+    let removeBtn = wrapper.find('a.btn.btn-danger').first();
+    let transferBtn = wrapper.find('a.btn.btn-danger').at(1);
 
     expect(removeBtn.text()).toBe('Remove Project');
     expect(transferBtn.text()).toBe('Transfer Project');
@@ -61,17 +94,17 @@ describe('projectGeneralSettings', function() {
   it('displays transfer/remove message for non-admins', function() {
     let routerContext = TestStubs.routerContext();
     routerContext.context.organization.access = ['org:read'];
-    let component = mount(
+    let wrapper = mount(
       <ThemeProvider theme={theme}>
         <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />
       </ThemeProvider>,
       routerContext
     );
 
-    expect(component.html()).toContain(
+    expect(wrapper.html()).toContain(
       'You do not have the required permission to remove this project.'
     );
-    expect(component.html()).toContain(
+    expect(wrapper.html()).toContain(
       'You do not have the required permission to transfer this project.'
     );
   });
