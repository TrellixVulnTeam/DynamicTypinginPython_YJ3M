commit 5f782df60b8e6ecb8839f37cdd1eb63f2f91fcdb
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Sep 15 21:31:51 2010 -0700

    Added the ability to sort and pause the realtime feed

diff --git a/sentry/media/scripts/global.js b/sentry/media/scripts/global.js
index 0ece03d4a4..961d340154 100644
--- a/sentry/media/scripts/global.js
+++ b/sentry/media/scripts/global.js
@@ -1,3 +1,5 @@
+sentryRealtime = true;
+
 function getElementsByClassName(oElm, strTagName, strClassName){
 	// Written by Jonathan Snook, http://www.snook.ca/jon; Add-ons by Robert Nyman, http://www.robertnyman.com
 	var arrElements = (strTagName == "*" && document.all)? document.all :
@@ -92,15 +94,15 @@ function sentryResolve(gid, remove){
 function sentryRefresh(){
     data = getQueryParams();
     data.op = 'poll';
+    if (!sentryRealtime) {
+        return;
+    }
     $.ajax({
       url: SENTRY_JS_API_URL,
       type: 'get',
       dataType: 'json',
       data: data,
       success: function(groups){
-          // $('#message_list').each(function(){
-          //               $(this).removeClass('fresh');
-          //           })
           if (groups.length) {
               $('#no_messages').remove();
           }
@@ -133,3 +135,18 @@ function sentryRefresh(){
       }
     });
 }
+$(document).ready(function(){
+    $('#sentry_realtime').click(function(){
+        if ($(this).hasClass('realtime-play')) {
+            $(this).removeClass('realtime-play');
+            $(this).addClass('realtime-pause');
+            $(this).text('Pause Feed');
+            sentryRealtime = true;
+        } else {
+            $(this).addClass('realtime-play');
+            $(this).removeClass('realtime-pause');
+            $(this).text('Go Live');
+            sentryRealtime = false;
+        }
+    });
+});
\ No newline at end of file
diff --git a/sentry/media/styles/global.css b/sentry/media/styles/global.css
index 76071b6654..d60d506775 100644
--- a/sentry/media/styles/global.css
+++ b/sentry/media/styles/global.css
@@ -381,12 +381,12 @@ pre {
     display: inline; float: right;
     margin: 10px 10px 0 0;
     font-size: 14px;
-    line-height: 16px;
+    line-height: 17px;
     color: #aaa;
     font-weight: bold;
 }
 .paging-meta {
-    padding: 4px 8px;
+    padding: 6px 8px;
 }
 .paging-endless {
     display: inline; float: left;
@@ -402,8 +402,8 @@ pre {
     display: inline-block;
 	padding: 6px 8px 6px 8px;
     color: #aaa;
-    font-size: 11px;
-    line-height: 12px;
+    font-size: 12px;
+    line-height: 17px;
     border:1px solid #ddd;
 	text-decoration: none;
 	-webkit-border-radius: 6px;
@@ -421,8 +421,8 @@ pre {
     text-decoration: none;
 	color: #888;
 	padding: 6px 8px 6px 8px;
-    font-size: 11px;
-    line-height: 11px;
+    font-size: 12px;
+    line-height: 17px;
     border:1px solid #C5C5C5;
 	text-decoration: none;
 	-webkit-border-radius: 6px;
@@ -433,7 +433,9 @@ pre {
     background:-moz-linear-gradient(center top , #FFFFFF 0pt, #DCDCDC 100%) repeat scroll 0 0 transparent;    
 }
 
-.paging-endless li a:hover {
+.paging-endless li a:hover,
+.realtime:hover {
+    cursor: pointer;
     border:1px solid #3079d0;
     color: #fff;
     text-shadow: 0 -1px 0 #3079d0;
@@ -442,6 +444,10 @@ pre {
 	background: -moz-linear-gradient(top,  #4da2e5,  #3079d0); /* for firefox 3.6+ */
 }
 
+.sort-by select {
+    border: 0;
+    background: inherit;
+}
 
 #search {
     float: right;
diff --git a/sentry/templates/sentry/index.html b/sentry/templates/sentry/index.html
index 73965b5104..7336152792 100644
--- a/sentry/templates/sentry/index.html
+++ b/sentry/templates/sentry/index.html
@@ -45,9 +45,23 @@
 					{% if message_list.objects %}
 						<div class="clearfix">
 							<div class="paging-wrap">
+								<form method="GET" action="">
+									{% for k, v in request.GET.iteritems %}
+										<input type="hidden" name="{{ k }}" value="{{ v }}"/>
+									{% endfor %}
+									<div class="sort-by">Sort by: <select name="sort" onchange="this.form.submit()">
+										<option value=""{% ifequal sort 'priority' %} selected="selected"{% endifequal %}>Priority</option>
+										<option value="date"{% ifequal sort 'date' %} selected="selected"{% endifequal %}>Last Seen</option>
+										<option value="new"{% ifequal sort 'new' %} selected="selected"{% endifequal %}>First Seen</option>
+									</select>
+									</div>
+								</form>
+								{% if has_realtime %}
+									<a id="sentry_realtime" class="realtime realtime-pause">Pause Feed</a>
+								{% endif %}
 								{{ message_list.paging }}
 							</div>
-						</div>                   
+						</div>
 						<ul class="messages" id="message_list">
 							{% for group, priority in message_list.objects|with_priority %}
 								{% include "sentry/partial/_group.html" %}
@@ -70,6 +84,7 @@
 	</body>
 	{% if has_realtime %}
 	<script type="text/javascript">
+	sentryRealtime = true;
 	$(document).ready(function(){
 		//$("div.column").setAllToMaxHeight();
 		setTimeout(sentryRefresh, 3000);
diff --git a/sentry/views.py b/sentry/views.py
index 4831610350..a84f66753e 100644
--- a/sentry/views.py
+++ b/sentry/views.py
@@ -105,7 +105,17 @@ def index(request):
         select={
             'score': GroupedMessage.get_score_clause(),
         }
-    ).order_by('-score', '-last_seen').distinct()
+    )
+
+    sort = request.GET.get('sort')
+    if sort == 'date':
+        message_list = message_list.order_by('-last_seen')
+    elif sort == 'new':
+        message_list = message_list.order_by('-first_seen')
+    else:
+        sort = 'priority'
+        message_list = message_list.order_by('-score', '-last_seen').distinct()
+
     
     any_filter = False
     for filter_ in filters:
@@ -133,7 +143,16 @@ def ajax_handler(request):
             select={
                 'score': GroupedMessage.get_score_clause(),
             }
-        ).order_by('-score', '-last_seen')
+        )
+        
+        sort = request.GET.get('sort')
+        if sort == 'date':
+            message_list = message_list.order_by('-last_seen')
+        elif sort == 'new':
+            message_list = message_list.order_by('-first_seen')
+        else:
+            sort = 'priority'
+            message_list = message_list.order_by('-score', '-last_seen').distinct()
         
         for filter_ in filters:
             if not filter_.is_set():
