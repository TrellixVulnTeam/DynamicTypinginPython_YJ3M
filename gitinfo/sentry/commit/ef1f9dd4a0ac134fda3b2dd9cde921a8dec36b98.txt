commit ef1f9dd4a0ac134fda3b2dd9cde921a8dec36b98
Author: Mark Story <mark@sentry.io>
Date:   Mon Aug 26 10:14:02 2019 -0400

    ref(ui) Replace more createReactClass usage (#14493)
    
    Also update the MissingProjectMembership component to use more current
    icon assets and add missing margins.

diff --git a/src/sentry/static/sentry/app/components/errorRobot.jsx b/src/sentry/static/sentry/app/components/errorRobot.jsx
index 7f72c57ad1..8040feb2da 100644
--- a/src/sentry/static/sentry/app/components/errorRobot.jsx
+++ b/src/sentry/static/sentry/app/components/errorRobot.jsx
@@ -1,7 +1,6 @@
 import {Link} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 
 import {t} from 'app/locale';
@@ -9,10 +8,8 @@ import Button from 'app/components/button';
 import CreateSampleEventButton from 'app/views/onboarding/createSampleEventButton';
 import withApi from 'app/utils/withApi';
 
-const ErrorRobot = createReactClass({
-  displayName: 'ErrorRobot',
-
-  propTypes: {
+class ErrorRobot extends React.Component {
+  static propTypes = {
     api: PropTypes.object,
     org: PropTypes.object.isRequired,
     project: PropTypes.object,
@@ -24,19 +21,17 @@ const ErrorRobot = createReactClass({
     sampleIssueId: PropTypes.string,
 
     gradient: PropTypes.bool,
-  },
+  };
 
-  getInitialState() {
-    return {
-      error: false,
-      loading: false,
-      sampleIssueId: this.props.sampleIssueId,
-    };
-  },
+  state = {
+    error: false,
+    loading: false,
+    sampleIssueId: this.props.sampleIssueId,
+  };
 
   componentWillMount() {
     this.fetchData();
-  },
+  }
 
   fetchData() {
     const {org, project} = this.props;
@@ -54,7 +49,7 @@ const ErrorRobot = createReactClass({
       this.props.api.request(url, {
         method: 'GET',
         data: requestParams,
-        success: (data, ignore, jqXHR) => {
+        success: data => {
           this.setState({
             loading: false,
             sampleIssueId: (data.length > 0 && data[0].id) || '',
@@ -70,7 +65,7 @@ const ErrorRobot = createReactClass({
         },
       });
     }
-  },
+  }
 
   render() {
     const {loading, error, sampleIssueId} = this.state;
@@ -139,8 +134,8 @@ const ErrorRobot = createReactClass({
         </div>
       </ErrorRobotWrapper>
     );
-  },
-});
+  }
+}
 
 export {ErrorRobot};
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index 620a14b4c8..57ca009061 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -1,7 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import classNames from 'classnames';
-import createReactClass from 'create-react-class';
 import styled, {css} from 'react-emotion';
 
 import {defined, objectIsEmpty, isUrl} from 'app/utils';
@@ -30,12 +29,9 @@ class FunctionName extends React.Component {
     frame: PropTypes.object,
   };
 
-  constructor(props) {
-    super(props);
-    this.state = {
-      rawFunction: false,
-    };
-  }
+  state = {
+    rawFunction: false,
+  };
 
   toggle = event => {
     event.stopPropagation();
@@ -62,10 +58,8 @@ class FunctionName extends React.Component {
   }
 }
 
-export const Frame = createReactClass({
-  displayName: 'Frame',
-
-  propTypes: {
+export class Frame extends React.Component {
+  static propTypes = {
     data: PropTypes.object.isRequired,
     nextFrame: PropTypes.object,
     prevFrame: PropTypes.object,
@@ -76,43 +70,39 @@ export const Frame = createReactClass({
     timesRepeated: PropTypes.number,
     registers: PropTypes.objectOf(PropTypes.string.isRequired),
     components: PropTypes.array.isRequired,
-  },
-
-  getDefaultProps() {
-    return {
-      isExpanded: false,
-      emptySourceNotation: false,
-    };
-  },
-
-  getInitialState() {
-    // isExpanded can be initialized to true via parent component;
-    // data synchronization is not important
-    // https://facebook.github.io/react/tips/props-in-getInitialState-as-anti-pattern.html
-    return {
-      isExpanded: this.props.isExpanded,
-    };
-  },
-
-  toggleContext(evt) {
+  };
+
+  static defaultProps = {
+    isExpanded: false,
+    emptySourceNotation: false,
+  };
+
+  // isExpanded can be initialized to true via parent component;
+  // data synchronization is not important
+  // https://facebook.github.io/react/tips/props-in-getInitialState-as-anti-pattern.html
+  state = {
+    isExpanded: this.props.isExpanded,
+  };
+
+  toggleContext = evt => {
     evt && evt.preventDefault();
 
     this.setState({
       isExpanded: !this.state.isExpanded,
     });
-  },
+  };
 
   hasContextSource() {
     return defined(this.props.data.context) && this.props.data.context.length;
-  },
+  }
 
   hasContextVars() {
     return !objectIsEmpty(this.props.data.vars);
-  },
+  }
 
   hasContextRegisters() {
     return !objectIsEmpty(this.props.registers);
-  },
+  }
 
   isExpandable() {
     return (
@@ -121,7 +111,7 @@ export const Frame = createReactClass({
       this.hasContextVars() ||
       this.hasContextRegisters()
     );
-  },
+  }
 
   renderOriginalSourceInfo() {
     const data = this.props.data;
@@ -135,13 +125,13 @@ export const Frame = createReactClass({
         <br />
       </React.Fragment>
     );
-  },
+  }
 
   getPlatform() {
     // prioritize the frame platform but fall back to the platform
     // of the stacktrace / exception
     return this.props.data.platform || this.props.platform;
-  },
+  }
 
   shouldPrioritizeModuleName() {
     switch (this.getPlatform()) {
@@ -151,15 +141,15 @@ export const Frame = createReactClass({
       default:
         return false;
     }
-  },
+  }
 
-  preventCollapse(evt) {
+  preventCollapse = evt => {
     evt.stopPropagation();
-  },
+  };
 
   getSentryAppComponents() {
     return this.props.components;
-  },
+  }
 
   renderDefaultTitle() {
     const data = this.props.data;
@@ -178,7 +168,7 @@ export const Frame = createReactClass({
       const enablePathTooltip = defined(data.absPath) && data.absPath !== pathName;
 
       title.push(
-        <Tooltip title={data.absPath} disabled={!enablePathTooltip}>
+        <Tooltip key={pathName} title={data.absPath} disabled={!enablePathTooltip}>
           <code key="filename" className="filename">
             <Truncate value={pathName} maxLength={100} leftTrim={true} />
           </code>
@@ -189,7 +179,7 @@ export const Frame = createReactClass({
       // we want to show a litle (?) icon that on hover shows the actual filename
       if (shouldPrioritizeModuleName && data.filename) {
         title.push(
-          <Tooltip title={data.filename}>
+          <Tooltip key={data.filename} title={data.filename}>
             <a className="in-at real-filename">
               <span className="icon-question" />
             </a>
@@ -263,7 +253,7 @@ export const Frame = createReactClass({
     }
 
     return title;
-  },
+  }
 
   renderContext() {
     const data = this.props.data;
@@ -350,7 +340,7 @@ export const Frame = createReactClass({
       );
     }
     return context;
-  },
+  }
 
   renderExpander() {
     if (!this.isExpandable()) {
@@ -366,11 +356,11 @@ export const Frame = createReactClass({
         <span className={this.state.isExpanded ? 'icon-minus' : 'icon-plus'} />
       </a>
     );
-  },
+  }
 
   leadsToApp() {
     return !this.props.data.inApp && this.props.nextFrame && this.props.nextFrame.inApp;
-  },
+  }
 
   isInlineFrame() {
     return (
@@ -378,7 +368,7 @@ export const Frame = createReactClass({
       this.getPlatform() === (this.props.prevFrame.platform || this.props.platform) &&
       this.props.data.instructionAddr === this.props.prevFrame.instructionAddr
     );
-  },
+  }
 
   getFrameHint() {
     if (this.isInlineFrame()) {
@@ -400,7 +390,7 @@ export const Frame = createReactClass({
       }
     }
     return null;
-  },
+  }
 
   renderLeadHint() {
     if (this.leadsToApp() && !this.state.isExpanded) {
@@ -408,7 +398,7 @@ export const Frame = createReactClass({
     } else {
       return null;
     }
-  },
+  }
 
   renderRepeats() {
     const timesRepeated = this.props.timesRepeated;
@@ -426,7 +416,7 @@ export const Frame = createReactClass({
     } else {
       return null;
     }
-  },
+  }
 
   renderDefaultLine() {
     return (
@@ -443,7 +433,7 @@ export const Frame = createReactClass({
         </DefaultLine>
       </StrictClick>
     );
-  },
+  }
 
   renderNativeLine() {
     const data = this.props.data;
@@ -487,7 +477,7 @@ export const Frame = createReactClass({
         </DefaultLine>
       </StrictClick>
     );
-  },
+  }
 
   renderLine() {
     switch (this.getPlatform()) {
@@ -500,7 +490,7 @@ export const Frame = createReactClass({
       default:
         return this.renderDefaultLine();
     }
-  },
+  }
 
   render() {
     const data = this.props.data;
@@ -524,8 +514,8 @@ export const Frame = createReactClass({
         {context}
       </li>
     );
-  },
-});
+  }
+}
 
 const RepeatedFrames = styled('div')`
   display: inline-block;
diff --git a/src/sentry/static/sentry/app/components/letterAvatar.jsx b/src/sentry/static/sentry/app/components/letterAvatar.jsx
index 9ec96402ca..2da1928a28 100644
--- a/src/sentry/static/sentry/app/components/letterAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/letterAvatar.jsx
@@ -1,43 +1,39 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 
 import {imageStyle} from 'app/components/avatar/styles';
 
+const COLORS = [
+  '#4674ca', // blue
+  '#315cac', // blue_dark
+  '#57be8c', // green
+  '#3fa372', // green_dark
+  '#f9a66d', // yellow_orange
+  '#ec5e44', // red
+  '#e63717', // red_dark
+  '#f868bc', // pink
+  '#6c5fc7', // purple
+  '#4e3fb4', // purple_dark
+  '#57b1be', // teal
+  '#847a8c', // gray
+];
+
 /**
  * Also see avatar.py. Anything changed in this file (how colors
  * are selected, the svg, etc) will also need to be changed there.
  */
-
-const LetterAvatar = createReactClass({
-  displayName: 'LetterAvatar',
-
-  propTypes: {
+class LetterAvatar extends React.Component {
+  static propTypes = {
     identifier: PropTypes.string,
     displayName: PropTypes.string,
     round: PropTypes.bool,
-  },
-
-  COLORS: [
-    '#4674ca', // blue
-    '#315cac', // blue_dark
-    '#57be8c', // green
-    '#3fa372', // green_dark
-    '#f9a66d', // yellow_orange
-    '#ec5e44', // red
-    '#e63717', // red_dark
-    '#f868bc', // pink
-    '#6c5fc7', // purple
-    '#4e3fb4', // purple_dark
-    '#57b1be', // teal
-    '#847a8c', // gray
-  ],
+  };
 
   getColor() {
     const id = this.hashIdentifier(this.props.identifier);
-    return this.COLORS[id % this.COLORS.length];
-  },
+    return COLORS[id % COLORS.length];
+  }
 
   hashIdentifier(identifier) {
     identifier += '';
@@ -46,7 +42,7 @@ const LetterAvatar = createReactClass({
       hash += identifier.charCodeAt(i);
     }
     return hash;
-  },
+  }
 
   getInitials() {
     const names = (this.props.displayName.trim() || '?').split(' ');
@@ -57,7 +53,7 @@ const LetterAvatar = createReactClass({
       initials += Array.from(names[names.length - 1])[0];
     }
     return initials.toUpperCase();
-  },
+  }
 
   render() {
     return (
@@ -87,8 +83,8 @@ const LetterAvatar = createReactClass({
         </text>
       </Svg>
     );
-  },
-});
+  }
+}
 
 export default LetterAvatar;
 
diff --git a/src/sentry/static/sentry/app/components/projects/missingProjectMembership.jsx b/src/sentry/static/sentry/app/components/projects/missingProjectMembership.jsx
index 5661124551..b77f5485fb 100644
--- a/src/sentry/static/sentry/app/components/projects/missingProjectMembership.jsx
+++ b/src/sentry/static/sentry/app/components/projects/missingProjectMembership.jsx
@@ -1,33 +1,35 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-
-import createReactClass from 'create-react-class';
+import styled from 'react-emotion';
 
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import IndicatorStore from 'app/stores/indicatorStore';
 import {joinTeam} from 'app/actionCreators/teams';
+import HeroIcon from 'app/components/heroIcon';
+import Well from 'app/components/well';
 import withApi from 'app/utils/withApi';
+import space from 'app/styles/space';
 import {t} from 'app/locale';
 
-const MissingProjectMembership = createReactClass({
-  displayName: 'MissingProjectMembership',
-
-  propTypes: {
+class MissingProjectMembership extends React.Component {
+  static propTypes = {
     api: PropTypes.object,
     organization: PropTypes.object.isRequired,
     projectId: PropTypes.string.isRequired,
-  },
+  };
+
+  constructor(props) {
+    super(props);
 
-  getInitialState() {
     const {organization, projectId} = this.props;
     const project = organization.projects.find(p => p.slug === projectId);
 
-    return {
+    this.state = {
       loading: false,
       error: false,
       project,
     };
-  },
+  }
 
   joinTeam(team) {
     this.setState({
@@ -59,7 +61,7 @@ const MissingProjectMembership = createReactClass({
         },
       }
     );
-  },
+  }
 
   renderJoinTeam(team, features) {
     if (!team) {
@@ -81,7 +83,7 @@ const MissingProjectMembership = createReactClass({
         {t('Request Access')}
       </a>
     );
-  },
+  }
 
   renderExplanation(features) {
     if (features.has('open-membership')) {
@@ -91,7 +93,7 @@ const MissingProjectMembership = createReactClass({
         'To view this data you must first request access to one of the following teams:'
       );
     }
-  },
+  }
 
   renderJoinTeams(features) {
     const {teams} = this.state.project;
@@ -112,7 +114,7 @@ const MissingProjectMembership = createReactClass({
         </p>
       );
     });
-  },
+  }
 
   render() {
     const {organization} = this.props;
@@ -120,16 +122,24 @@ const MissingProjectMembership = createReactClass({
 
     return (
       <div className="container">
-        <div className="box alert-box">
-          <span className="icon icon-exclamation" />
+        <StyledWell centered>
+          <StyledHeroIcon src="icon-circle-exclamation" />
           <p>{t("You're not a member of this project.")}</p>
           <p>{this.renderExplanation(features)}</p>
           {this.renderJoinTeams(features)}
-        </div>
+        </StyledWell>
       </div>
     );
-  },
-});
+  }
+}
+
+const StyledWell = styled(Well)`
+  margin-top: ${space(2)};
+`;
+
+const StyledHeroIcon = styled(HeroIcon)`
+  margin-bottom: ${space(2)};
+`;
 
 export {MissingProjectMembership};
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsProjectItem.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsProjectItem.jsx
index 98c2cb2995..86f4f53a7e 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsProjectItem.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsProjectItem.jsx
@@ -1,6 +1,5 @@
 import styled from 'react-emotion';
 import React from 'react';
-import createReactClass from 'create-react-class';
 
 import BookmarkStar from 'app/components/projects/bookmarkStar';
 import Link from 'app/components/links/link';
@@ -8,23 +7,22 @@ import ProjectLabel from 'app/components/projectLabel';
 import SentryTypes from 'app/sentryTypes';
 import space from 'app/styles/space';
 
-const ProjectItem = createReactClass({
-  displayName: 'ProjectItem',
-
-  propTypes: {
+class ProjectItem extends React.Component {
+  static propTypes = {
     project: SentryTypes.Project,
     organization: SentryTypes.Organization,
-  },
+  };
 
-  getInitialState() {
-    return {
+  constructor(props) {
+    super(props);
+    this.state = {
       isBookmarked: this.props.project.isBookmarked,
     };
-  },
+  }
 
-  handleToggleBookmark(isBookmarked) {
+  handleToggleBookmark = isBookmarked => {
     this.setState({isBookmarked});
-  },
+  };
 
   render() {
     const {project, organization} = this.props;
@@ -42,8 +40,8 @@ const ProjectItem = createReactClass({
         </Link>
       </Container>
     );
-  },
-});
+  }
+}
 
 const Container = styled('div')`
   display: flex;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx b/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx
index 2d1631e431..28622e8192 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx
@@ -1,6 +1,5 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
 
 import {addErrorMessage} from 'app/actionCreators/indicator';
 import {updateOrganization} from 'app/actionCreators/organizations';
@@ -12,17 +11,15 @@ import SentryTypes from 'app/sentryTypes';
 import organizationSettingsFields from 'app/data/forms/organizationGeneralSettings';
 import withOrganization from 'app/utils/withOrganization';
 
-const OrganizationSettingsForm = createReactClass({
-  displayName: 'OrganizationSettingsForm',
-
-  propTypes: {
+class OrganizationSettingsForm extends React.Component {
+  static propTypes = {
     location: PropTypes.object,
     organization: SentryTypes.Organization,
     orgId: PropTypes.string.isRequired,
     access: PropTypes.object.isRequired,
     initialData: PropTypes.object.isRequired,
     onSave: PropTypes.func.isRequired,
-  },
+  };
 
   render() {
     const {initialData, organization, orgId, onSave, access} = this.props;
@@ -35,13 +32,13 @@ const OrganizationSettingsForm = createReactClass({
         saveOnBlur
         allowUndo
         initialData={initialData}
-        onSubmitSuccess={(resp, model, fieldName, change) => {
+        onSubmitSuccess={(_resp, model) => {
           // Special case for slug, need to forward to new slug
           if (typeof onSave === 'function') {
             onSave(initialData, model.initialData);
           }
         }}
-        onSubmitError={err => addErrorMessage('Unable to save change')}
+        onSubmitError={() => addErrorMessage('Unable to save change')}
       >
         <PermissionAlert />
         <JsonForm
@@ -61,7 +58,7 @@ const OrganizationSettingsForm = createReactClass({
         />
       </Form>
     );
-  },
-});
+  }
+}
 
 export default withOrganization(OrganizationSettingsForm);
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectEnvironments.jsx b/src/sentry/static/sentry/app/views/settings/project/projectEnvironments.jsx
index bf5a91c0f7..d15db1654b 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectEnvironments.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectEnvironments.jsx
@@ -1,7 +1,6 @@
 import {Flex} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 
 import {ALL_ENVIRONMENTS_KEY} from 'app/constants';
@@ -22,24 +21,22 @@ import recreateRoute from 'app/utils/recreateRoute';
 import space from 'app/styles/space';
 import {getUrlRoutingName, getDisplayName} from 'app/utils/environment';
 
-const ProjectEnvironments = createReactClass({
-  propTypes: {
+class ProjectEnvironments extends React.Component {
+  static propTypes = {
     api: PropTypes.object,
     routes: PropTypes.array,
     params: PropTypes.object,
-  },
+  };
 
-  getInitialState() {
-    return {
-      project: null,
-      environments: null,
-      isLoading: true,
-    };
-  },
+  state = {
+    project: null,
+    environments: null,
+    isLoading: true,
+  };
 
   componentDidMount() {
     this.fetchData();
-  },
+  }
 
   componentDidUpdate(prevProps) {
     if (
@@ -48,7 +45,7 @@ const ProjectEnvironments = createReactClass({
     ) {
       this.fetchData();
     }
-  },
+  }
 
   fetchData() {
     const isHidden = this.props.location.pathname.endsWith('hidden/');
@@ -66,7 +63,7 @@ const ProjectEnvironments = createReactClass({
         this.setState({environments, isLoading: false});
       },
     });
-  },
+  }
 
   fetchProjectDetails() {
     const {orgId, projectId} = this.props.params;
@@ -75,10 +72,10 @@ const ProjectEnvironments = createReactClass({
         this.setState({project});
       },
     });
-  },
+  }
 
   // Toggle visibility of environment
-  toggleEnv(env, shouldHide) {
+  toggleEnv = (env, shouldHide) => {
     const {orgId, projectId} = this.props.params;
 
     this.props.api.request(
@@ -89,24 +86,24 @@ const ProjectEnvironments = createReactClass({
           name: env.name,
           isHidden: shouldHide,
         },
-        success: e => {
+        success: () => {
           addSuccessMessage(
             tct('Updated [environment]', {
               environment: getDisplayName(env),
             })
           );
         },
-        error: err => {
+        error: () => {
           addErrorMessage(
             tct('Unable to update [environment]', {
               environment: getDisplayName(env),
             })
           );
         },
-        complete: this.fetchData,
+        complete: this.fetchData.bind(this),
       }
     );
-  },
+  };
 
   renderEmpty() {
     const isHidden = this.props.location.pathname.endsWith('hidden/');
@@ -114,7 +111,7 @@ const ProjectEnvironments = createReactClass({
       ? t("You don't have any hidden environments.")
       : t("You don't have any environments yet.");
     return <EmptyMessage>{message}</EmptyMessage>;
-  },
+  }
 
   /**
    * Renders rows for "system" environments:
@@ -138,7 +135,7 @@ const ProjectEnvironments = createReactClass({
         isSystemRow
       />
     );
-  },
+  }
 
   renderEnvironmentList(envs) {
     const isHidden = this.props.location.pathname.endsWith('hidden/');
@@ -162,7 +159,7 @@ const ProjectEnvironments = createReactClass({
         })}
       </React.Fragment>
     );
-  },
+  }
 
   renderBody() {
     const {environments, isLoading} = this.state;
@@ -178,7 +175,7 @@ const ProjectEnvironments = createReactClass({
           : this.renderEmpty()}
       </PanelBody>
     );
-  },
+  }
 
   render() {
     const {routes, params, location} = this.props;
@@ -208,8 +205,8 @@ const ProjectEnvironments = createReactClass({
         </Panel>
       </div>
     );
-  },
-});
+  }
+}
 
 class EnvironmentRow extends React.Component {
   static propTypes = {
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx
index 47809b5747..30b2b2547b 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx
@@ -3,7 +3,6 @@ import {Link} from 'react-router';
 import DocumentTitle from 'react-document-title';
 import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 
 import {
@@ -27,10 +26,8 @@ import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader
 import TextBlock from 'app/views/settings/components/text/textBlock';
 import recreateRoute from 'app/utils/recreateRoute';
 
-const KeyRow = createReactClass({
-  displayName: 'KeyRow',
-
-  propTypes: {
+class KeyRow extends React.Component {
+  static propTypes = {
     api: PropTypes.object.isRequired,
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
@@ -38,16 +35,14 @@ const KeyRow = createReactClass({
     access: PropTypes.object.isRequired,
     onToggle: PropTypes.func.isRequired,
     onRemove: PropTypes.func.isRequired,
-  },
+  };
 
-  getInitialState() {
-    return {
-      loading: false,
-      error: false,
-    };
-  },
+  state = {
+    loading: false,
+    error: false,
+  };
 
-  handleRemove() {
+  handleRemove = () => {
     if (this.state.loading) {
       return;
     }
@@ -56,7 +51,7 @@ const KeyRow = createReactClass({
     const {orgId, projectId, data} = this.props;
     this.props.api.request(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {
       method: 'DELETE',
-      success: (d, _, jqXHR) => {
+      success: () => {
         this.props.onRemove();
         removeIndicator(loadingIndicator);
         addSuccessMessage(t('Revoked key'));
@@ -70,9 +65,9 @@ const KeyRow = createReactClass({
         addErrorMessage(t('Unable to revoke key'));
       },
     });
-  },
+  };
 
-  handleUpdate(params, cb) {
+  handleUpdate = (params, cb) => {
     if (this.state.loading) {
       return;
     }
@@ -81,7 +76,7 @@ const KeyRow = createReactClass({
     this.props.api.request(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {
       method: 'PUT',
       data: params,
-      success: (d, _, jqXHR) => {
+      success: d => {
         removeIndicator(loadingIndicator);
         cb(d);
       },
@@ -93,25 +88,25 @@ const KeyRow = createReactClass({
         removeIndicator(loadingIndicator);
       },
     });
-  },
+  };
 
-  handleEnable() {
+  handleEnable = () => {
     this.handleUpdate(
       {
         isActive: true,
       },
       this.props.onToggle
     );
-  },
+  };
 
-  handleDisable() {
+  handleDisable = () => {
     this.handleUpdate(
       {
         isActive: false,
       },
       this.props.onToggle
     );
-  },
+  };
 
   render() {
     const {access, data} = this.props;
@@ -170,8 +165,8 @@ const KeyRow = createReactClass({
         </ClippedBox>
       </ClientKeyItemPanel>
     );
-  },
-});
+  }
+}
 
 export default class ProjectKeys extends AsyncView {
   static propTypes = {
@@ -219,7 +214,7 @@ export default class ProjectKeys extends AsyncView {
     const {orgId, projectId} = this.props.params;
     this.api.request(`/projects/${orgId}/${projectId}/keys/`, {
       method: 'POST',
-      success: (data, _, jqXHR) => {
+      success: data => {
         this.setState(state => {
           return {
             keyList: [...state.keyList, data],
@@ -316,7 +311,9 @@ export default class ProjectKeys extends AsyncView {
   }
 }
 
-const ClientKeyItemPanel = styled(({disabled, ...props}) => <Panel {...props} />)`
+const ClientKeyItemPanel = styled(({disabled: _disabled, ...props}) => (
+  <Panel {...props} />
+))`
   ${p => (p.disabled ? 'opacity: 0.5;' : '')};
 
   .box-clippable {
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
index 0241fcf219..5bec43d8d2 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
@@ -2,7 +2,6 @@ import {Box, Flex} from 'grid-emotion';
 import {browserHistory} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
 
 import {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';
 import {
@@ -54,16 +53,17 @@ const RATE_LIMIT_FORMAT_MAP = new Map([
 
 const formatRateLimitWindow = val => RATE_LIMIT_FORMAT_MAP.get(val);
 
-const KeyStats = createReactClass({
-  propTypes: {
+class KeyStats extends React.Component {
+  static propTypes = {
     api: PropTypes.object.isRequired,
-  },
+  };
 
-  getInitialState() {
+  constructor(props) {
+    super(props);
     const until = Math.floor(new Date().getTime() / 1000);
     const since = until - 3600 * 24 * 30;
 
-    return {
+    this.state = {
       since,
       until,
       loading: true,
@@ -71,13 +71,13 @@ const KeyStats = createReactClass({
       stats: null,
       emptyStats: false,
     };
-  },
+  }
 
   componentWillMount() {
     this.fetchData();
-  },
+  }
 
-  fetchData() {
+  fetchData = () => {
     const {keyId, orgId, projectId} = this.props.params;
     this.props.api.request(`/projects/${orgId}/${projectId}/keys/${keyId}/stats/`, {
       query: {
@@ -107,9 +107,9 @@ const KeyStats = createReactClass({
         this.setState({error: true, loading: false});
       },
     });
-  },
+  };
 
-  renderTooltip(point, _pointIdx, chart) {
+  renderTooltip = (point, _pointIdx, chart) => {
     const timeLabel = chart.getTimeLabel(point);
     const [accepted, dropped, filtered] = point.y;
 
@@ -133,7 +133,7 @@ const KeyStats = createReactClass({
         </div>
       </div>
     );
-  },
+  };
 
   render() {
     if (this.state.loading) {
@@ -170,8 +170,8 @@ const KeyStats = createReactClass({
         </PanelBody>
       </Panel>
     );
-  },
-});
+  }
+}
 
 class KeyRateLimitsForm extends React.Component {
   static propTypes = {
@@ -301,20 +301,18 @@ class KeyRateLimitsForm extends React.Component {
   }
 }
 
-const KeySettings = createReactClass({
-  displayName: 'KeySettings',
-
-  propTypes: {
+class KeySettings extends React.Component {
+  static propTypes = {
     api: PropTypes.object.isRequired,
     data: SentryTypes.ProjectKey.isRequired,
     onRemove: PropTypes.func.isRequired,
-  },
+  };
 
-  getInitialState() {
-    return {loading: false};
-  },
+  state = {
+    loading: false,
+  };
 
-  handleRemove() {
+  handleRemove = () => {
     if (this.state.loading) {
       return;
     }
@@ -337,7 +335,7 @@ const KeySettings = createReactClass({
         addErrorMessage(t('Unable to revoke key'));
       },
     });
-  },
+  };
 
   render() {
     const {keyId, orgId, projectId} = this.props.params;
@@ -476,8 +474,8 @@ const KeySettings = createReactClass({
         )}
       </Access>
     );
-  },
-});
+  }
+}
 
 export default class ProjectKeyDetails extends AsyncView {
   getTitle() {
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx b/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx
index 7cc03163f9..4fea65726d 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx
@@ -1,7 +1,6 @@
 import PropTypes from 'prop-types';
 import {Link} from 'react-router';
 import React from 'react';
-import createReactClass from 'create-react-class';
 
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
@@ -14,22 +13,18 @@ import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader
 import Switch from 'app/components/switch';
 import Truncate from 'app/components/truncate';
 
-const ServiceHookRow = createReactClass({
-  displayName: 'ServiceHookRow',
-
-  propTypes: {
+class ServiceHookRow extends React.Component {
+  static propTypes = {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
     hook: PropTypes.object.isRequired,
     onToggleActive: PropTypes.func.isRequired,
-  },
+  };
 
-  getInitialState() {
-    return {
-      loading: false,
-      error: false,
-    };
-  },
+  state = {
+    loading: false,
+    error: false,
+  };
 
   render() {
     const {orgId, projectId, hook} = this.props;
@@ -57,8 +52,8 @@ const ServiceHookRow = createReactClass({
         />
       </Field>
     );
-  },
-});
+  }
+}
 
 export default class ProjectServiceHooks extends AsyncView {
   static contextTypes = {
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx
index b17a780de2..9e259b82cb 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx
@@ -1,5 +1,4 @@
 import React from 'react';
-import createReactClass from 'create-react-class';
 
 import HookStore from 'app/stores/hookStore';
 import SentryTypes from 'app/sentryTypes';
@@ -8,13 +7,14 @@ import getConfiguration from 'app/views/settings/project/navigationConfiguration
 import withOrganization from 'app/utils/withOrganization';
 import withProject from 'app/utils/withProject';
 
-const ProjectSettingsNavigation = createReactClass({
-  propTypes: {
+class ProjectSettingsNavigation extends React.Component {
+  static propTypes = {
     organization: SentryTypes.Organization,
     project: SentryTypes.Project,
-  },
+  };
 
-  getInitialState() {
+  constructor(props) {
+    super(props);
     // Allow injection via getsentry et all
     const org = this.props.organization;
     const hooks = [];
@@ -22,10 +22,10 @@ const ProjectSettingsNavigation = createReactClass({
       hooks.push(cb(org));
     });
 
-    return {
+    this.state = {
       hooks,
     };
-  },
+  }
 
   render() {
     const {organization, project} = this.props;
@@ -40,7 +40,7 @@ const ProjectSettingsNavigation = createReactClass({
         hooks={this.state.hooks}
       />
     );
-  },
-});
+  }
+}
 
 export default withProject(withOrganization(ProjectSettingsNavigation));
diff --git a/src/sentry/static/sentry/app/views/settings/project/serviceHookSettingsForm.jsx b/src/sentry/static/sentry/app/views/settings/project/serviceHookSettingsForm.jsx
index 3f570e3c77..0fc9a83ec0 100644
--- a/src/sentry/static/sentry/app/views/settings/project/serviceHookSettingsForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/serviceHookSettingsForm.jsx
@@ -1,7 +1,6 @@
 import {browserHistory} from 'react-router';
 import React from 'react';
 import PropTypes from 'prop-types';
-import createReactClass from 'create-react-class';
 
 import {t} from 'app/locale';
 import ApiForm from 'app/views/settings/components/forms/apiForm';
@@ -13,20 +12,18 @@ import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 
 const EVENT_CHOICES = ['event.alert', 'event.created'].map(e => [e, e]);
 
-export default createReactClass({
-  displayName: 'ServiceHookSettingsForm',
-
-  propTypes: {
+export default class ServiceHookSettingsForm extends React.Component {
+  static propTypes = {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
     hookId: PropTypes.string,
     initialData: PropTypes.object.isRequired,
-  },
+  };
 
-  onSubmitSuccess() {
+  onSubmitSuccess = () => {
     const {orgId, projectId} = this.props;
     browserHistory.push(`/settings/${orgId}/projects/${projectId}/hooks/`);
-  },
+  };
 
   render() {
     const {initialData, orgId, projectId, hookId} = this.props;
@@ -42,7 +39,6 @@ export default createReactClass({
           apiEndpoint={endpoint}
           initialData={initialData}
           onSubmitSuccess={this.onSubmitSuccess}
-          onCancel={this.onCancel}
           footerStyle={{
             marginTop: 0,
             paddingRight: 20,
@@ -77,5 +73,5 @@ export default createReactClass({
         </ApiForm>
       </Panel>
     );
-  },
-});
+  }
+}
