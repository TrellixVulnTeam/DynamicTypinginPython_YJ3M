commit 2b628d7610764fd335b3734cbee59a5681ff11de
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 1 14:16:54 2011 -0700

    Added support for custom LOGIN_URL in settings.py. Missing permissions will now show a forbidden page rather than force a logout. (fixes #188)

diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index 0a687897e2..955b18ae02 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -50,11 +50,6 @@ CLIENT = 'sentry.client.base.SentryClient'
 
 NAME = socket.gethostname()
 
-INSTALLED_APPS = (
-    'sentry',
-    'sentry.client'
-)
-
 # We allow setting the site name either by explicitly setting it with the
 # SENTRY_SITE setting, or using the django.contrib.sites framework for
 # fetching the current site. Since we can't reliably query the database
@@ -84,6 +79,8 @@ INTERNAL_IPS = set()
 
 SERVER_EMAIL = 'root@localhost'
 
+LOGIN_URL = None
+
 ## The following settings refer to the built-in webserver
 
 WEB_HOST = 'localhost'
diff --git a/sentry/conf/settings.py b/sentry/conf/settings.py
index 4154d7ce85..3e840404aa 100644
--- a/sentry/conf/settings.py
+++ b/sentry/conf/settings.py
@@ -1,6 +1,7 @@
 from sentry.conf.defaults import *
 
 from django.conf import settings
+from django.core.urlresolvers import resolve
 from django.utils.hashcompat import md5_constructor
 from django.utils.translation import ugettext_lazy as _
 
@@ -25,6 +26,14 @@ if REMOTE_URL:
     elif not isinstance(REMOTE_URL, (list, tuple)):
         raise ValueError("Sentry setting 'REMOTE_URL' must be of type list.")
 
+# if LOGIN_URL resolves force login_required to it instead of our own
+try:
+    resolve(settings.LOGIN_URL)
+except:
+    pass
+else:
+    LOGIN_URL = settings.LOGIN_URL
+
 def configure(**kwargs):
     for k, v in kwargs.iteritems():
         if k.upper() != k:
diff --git a/sentry/templates/sentry/missing_permissions.html b/sentry/templates/sentry/missing_permissions.html
new file mode 100644
index 0000000000..8e03959008
--- /dev/null
+++ b/sentry/templates/sentry/missing_permissions.html
@@ -0,0 +1,17 @@
+{% extends "sentry/layout.html" %}
+
+{% load i18n %}
+
+{% block title %}{% trans "Forbidden" %} | {{ block.super }}{% endblock %}
+
+{% block heading %}{% trans "Forbidden" %}{% endblock %}
+
+{% block search %}{% endblock %}
+
+{% block content %}
+    <div id="body">
+        <div class="login-area">
+            <p>{% trans "You do not have access to this page with your current permissions." %}</p>
+        </div>
+    </div>
+{% endblock %}
diff --git a/sentry/web/views.py b/sentry/web/views.py
index a9bc304be4..a2ba012016 100644
--- a/sentry/web/views.py
+++ b/sentry/web/views.py
@@ -34,13 +34,16 @@ def iter_data(obj):
             continue
         yield k, v
 
-def render_to_response(template, context={}):
+def render_to_response(template, context={}, status=200):
     from django.shortcuts import render_to_response
 
     context.update({
         'has_search': bool(settings.SEARCH_ENGINE),
     })
-    return render_to_response(template, context)
+
+    response = render_to_response(template, context)
+    response.status_code = status
+    return response
 
 def get_search_query_set(query):
     from haystack.query import SearchQuerySet
@@ -68,9 +71,9 @@ def login_required(func):
     def wrapped(request, *args, **kwargs):
         if not settings.PUBLIC:
             if not request.user.is_authenticated():
-                return HttpResponseRedirect(reverse('sentry-login'))
+                return HttpResponseRedirect(settings.LOGIN_URL or reverse('sentry-login'))
             if not request.user.has_perm('sentry.can_view'):
-                return HttpResponseRedirect(reverse('sentry-login'))
+                return render_to_response('missing_permissions.html', status=400)
         return func(request, *args, **kwargs)
     wrapped.__doc__ = func.__doc__
     wrapped.__name__ = func.__name__
