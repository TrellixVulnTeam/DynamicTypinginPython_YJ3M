commit 81c1dabb37956e56335dcaf7ddc72c8ecd66ec47
Author: Stephen Cefali <scefali@sentry.io>
Date:   Thu Jul 11 10:23:35 2019 -0700

    Feat/publish integration via email (#13937)
    
    * adds button to request to publish an integration
    
    * change button rendering
    
    * refactored buttons
    
    * add comment
    
    * update PR from suggestions
    
    * update tests
    
    * remvoe console
    
    * adds handler for internal and published apps
    
    * update format
    
    * update error message
    
    * change app to integration
    
    * update import

diff --git a/src/sentry/api/bases/sentryapps.py b/src/sentry/api/bases/sentryapps.py
index 3e5bcc4af5..23aa22bd88 100644
--- a/src/sentry/api/bases/sentryapps.py
+++ b/src/sentry/api/bases/sentryapps.py
@@ -113,12 +113,14 @@ class SentryAppPermission(SentryPermission):
     unpublished_scope_map = {
         'GET': ('org:read', 'org:integrations', 'org:write', 'org:admin'),
         'PUT': ('org:read', 'org:integrations', 'org:write', 'org:admin'),
+        'POST': ('org:write', 'org:admin'),  # used for publishing an app
         'DELETE': ('org:write', 'org:admin'),
     }
 
     published_scope_map = {
         'GET': (),  # Public endpoint.
         'PUT': ('org:write', 'org:admin'),
+        'POST': ('org:write', 'org:admin'),
         'DELETE': ('org:admin'),
     }
 
diff --git a/src/sentry/api/endpoints/sentry_app_publish_request.py b/src/sentry/api/endpoints/sentry_app_publish_request.py
new file mode 100644
index 0000000000..cb8bc00f91
--- /dev/null
+++ b/src/sentry/api/endpoints/sentry_app_publish_request.py
@@ -0,0 +1,38 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry import options
+from sentry import features
+from sentry.api.bases.sentryapps import SentryAppBaseEndpoint
+from sentry.utils import email
+
+
+class SentryAppPublishRequestEndpoint(SentryAppBaseEndpoint):
+    def post(self, request, sentry_app):
+        if not features.has('organizations:sentry-apps',
+                            sentry_app.owner,
+                            actor=request.user):
+
+            return Response(status=404)
+
+        # check status of app to make sure it is unpublished
+        if sentry_app.is_published:
+            return Response({'detail': 'Cannot publish already published integration'}, status=400)
+
+        if sentry_app.is_internal:
+            return Response({'detail': 'Cannot publish internal integration'}, status=400)
+
+        # For now, just send an email that a request to publish has been amde
+        message = 'User %s of organization %s wants to publish %s' % (
+            request.user.email, sentry_app.owner.slug, sentry_app.slug)
+
+        email.send_mail(
+            'Sentry App Publication Request',
+            message,
+            options.get('mail.from'),
+            ['partners@sentry.io'],
+            fail_silently=False
+        )
+
+        return Response(status=201)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 62c1258613..3fbb422f48 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -231,6 +231,7 @@ from .endpoints.sentry_app_components import (
 )
 from .endpoints.sentry_app_details import SentryAppDetailsEndpoint
 from .endpoints.sentry_app_features import SentryAppFeaturesEndpoint
+from .endpoints.sentry_app_publish_request import SentryAppPublishRequestEndpoint
 from .endpoints.sentry_app_installation_details import SentryAppInstallationDetailsEndpoint
 from .endpoints.sentry_app_installation_external_issues import (
     SentryAppInstallationExternalIssuesEndpoint
@@ -359,7 +360,8 @@ urlpatterns = patterns(
     url(r'^monitors/', include([
         url(r'^(?P<monitor_id>[^\/]+)/$', MonitorDetailsEndpoint.as_view()),
         url(r'^(?P<monitor_id>[^\/]+)/checkins/$', MonitorCheckInsEndpoint.as_view()),
-        url(r'^(?P<monitor_id>[^\/]+)/checkins/(?P<checkin_id>[^\/]+)/$', MonitorCheckInDetailsEndpoint.as_view()),
+        url(r'^(?P<monitor_id>[^\/]+)/checkins/(?P<checkin_id>[^\/]+)/$',
+            MonitorCheckInDetailsEndpoint.as_view()),
         url(r'^(?P<monitor_id>[^\/]+)/stats/$', MonitorStatsEndpoint.as_view()),
     ])),
 
@@ -1436,7 +1438,11 @@ urlpatterns = patterns(
         SentryAppAuthorizationsEndpoint.as_view(),
         name='sentry-api-0-sentry-app-authorizations'
     ),
-
+    url(
+        r'^sentry-apps/(?P<sentry_app_slug>[^\/]+)/publish-request/$',
+        SentryAppPublishRequestEndpoint.as_view(),
+        name='sentry-api-0-sentry-app-publish-request'
+    ),
     # Grouping configs
     url(
         r'^grouping-configs/$', GroupingConfigsEndpoint.as_view(),
diff --git a/src/sentry/static/sentry/app/actionCreators/sentryApps.jsx b/src/sentry/static/sentry/app/actionCreators/sentryApps.jsx
index 8c66783581..4961408ed5 100644
--- a/src/sentry/static/sentry/app/actionCreators/sentryApps.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/sentryApps.jsx
@@ -19,12 +19,32 @@ export function removeSentryApp(client, app) {
   });
   promise.then(
     () => {
-      addSuccessMessage(t(`${app.slug} successfully removed.`));
+      addSuccessMessage(t('%s successfully removed.', app.slug));
     },
     () => {
       clearIndicators();
-      addErrorMessage(t(`Unable to remove ${app.slug} application`));
+      addErrorMessage(t('Unable to remove %s integration', app.slug));
     }
   );
   return promise;
 }
+
+/**
+ * Request a Sentry Application to be published
+ *
+ * @param {Object} client ApiClient
+ * @param {Object} app SentryApp
+ */
+export async function publishRequestSentryApp(client, app) {
+  addLoadingMessage();
+  try {
+    await client.requestPromise(`/sentry-apps/${app.slug}/publish-request/`, {
+      method: 'POST',
+    });
+    addSuccessMessage(t('Request to publish %s successful.', app.slug));
+  } catch (err) {
+    clearIndicators();
+    addErrorMessage(t('Request to publish %s fails.', app.slug));
+    throw err;
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/index.jsx
index 2d6cbb8147..98c516fcdf 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/index.jsx
@@ -5,7 +5,7 @@ import AsyncView from 'app/views/asyncView';
 import Button from 'app/components/button';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
-import {removeSentryApp} from 'app/actionCreators/sentryApps';
+import {removeSentryApp, publishRequestSentryApp} from 'app/actionCreators/sentryApps';
 import SentryTypes from 'app/sentryTypes';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import SentryApplicationRow from 'app/views/settings/organizationDeveloperSettings/sentryApplicationRow';
@@ -33,6 +33,11 @@ class OrganizationDeveloperSettings extends AsyncView {
     );
   };
 
+  publishRequest = app => {
+    // TODO(scefali) May want to do some state change after the request to show that the publish request has been made
+    publishRequestSentryApp(this.api, app);
+  };
+
   renderBody() {
     const {organization} = this.props;
     const {orgId} = this.props.params;
@@ -84,6 +89,7 @@ class OrganizationDeveloperSettings extends AsyncView {
                     app={app}
                     organization={organization}
                     onRemoveApp={this.removeApp}
+                    onPublishRequest={this.publishRequest}
                     showPublishStatus={true}
                   />
                 );
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.jsx
index d68cb57962..d9d987d59b 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.jsx
@@ -1,6 +1,7 @@
 import React from 'react';
 import {Box, Flex} from 'grid-emotion';
 import {Link} from 'react-router';
+import {omit} from 'lodash';
 
 import Access from 'app/components/acl/access';
 import BetaTag from 'app/components/betaTag';
@@ -26,6 +27,7 @@ export default class SentryApplicationRow extends React.PureComponent {
     onInstall: PropTypes.func,
     onUninstall: PropTypes.func,
     onRemoveApp: PropTypes.func,
+    onPublishRequest: PropTypes.func,
     showPublishStatus: PropTypes.bool,
     isInternal: PropTypes.bool,
   };
@@ -35,6 +37,55 @@ export default class SentryApplicationRow extends React.PureComponent {
     isInternal: false,
   };
 
+  renderUnpublishedAdminButtons(app) {
+    return (
+      <ButtonHolder>
+        {app.status === 'internal'
+          ? this.renderDisabledPublishRequestButton(
+              'Internal integrations cannot be published'
+            )
+          : this.renderPublishRequest(app)}
+        {this.renderRemoveApp(app)}
+      </ButtonHolder>
+    );
+  }
+
+  renderDisabledPublishRequestButton(message) {
+    return (
+      <StyledButton disabled title={t(message)} size="small" icon="icon-upgrade">
+        {t('Publish')}
+      </StyledButton>
+    );
+  }
+
+  renderDisabledRemoveButton(message) {
+    return <Button disabled title={t(message)} size="small" icon="icon-trash" />;
+  }
+
+  renderUnpublishedNonAdminButtons() {
+    return (
+      <ButtonHolder>
+        {this.renderDisabledPublishRequestButton(
+          'Organization owner permissions are required for this action.'
+        )}
+        {this.renderDisabledRemoveButton(
+          'Organization owner permissions are required for this action.'
+        )}
+      </ButtonHolder>
+    );
+  }
+
+  renderPublishedAppButtons() {
+    return (
+      <ButtonHolder>
+        {this.renderDisabledPublishRequestButton(
+          'Published integrations cannot be re-published.'
+        )}
+        {this.renderDisabledRemoveButton('Published integrations cannot be removed.')}
+      </ButtonHolder>
+    );
+  }
+
   renderRemoveApp(app) {
     const message = t(
       `Deleting ${app.slug} will also delete any and all of its installations. \
@@ -52,6 +103,26 @@ export default class SentryApplicationRow extends React.PureComponent {
     );
   }
 
+  renderPublishRequest(app) {
+    const message = t(
+      `Sentry will evaluate your integration ${
+        app.slug
+      } and make it available to all users. \
+       Do you wish to continue?`
+    );
+    return (
+      <Confirm
+        message={message}
+        priority="primary"
+        onConfirm={() => this.props.onPublishRequest(app)}
+      >
+        <StyledButton icon="icon-upgrade" size="small">
+          {t('Publish')}
+        </StyledButton>
+      </Confirm>
+    );
+  }
+
   renderUninstall(install) {
     const message = t(
       `Are you sure you want to remove the ${install.app.slug} installation ?`
@@ -73,7 +144,7 @@ export default class SentryApplicationRow extends React.PureComponent {
     const {app, showPublishStatus, isInternal} = this.props;
     const isInstalled = this.isInstalled;
     if (isInternal) {
-      return <Status enabled isInternal />;
+      return <Status enabled isInternal={isInternal} />;
     }
     if (showPublishStatus) {
       return <PublishStatus status={app.status} />;
@@ -147,28 +218,14 @@ export default class SentryApplicationRow extends React.PureComponent {
                 <Access access={['org:admin']}>
                   {({hasAccess}) => (
                     <React.Fragment>
-                      {!hasAccess && (
-                        <Button
-                          disabled
-                          title={t(
-                            'Organization owner permissions are required for this action.'
-                          )}
-                          size="small"
-                          icon="icon-trash"
-                        />
-                      )}
-
-                      {hasAccess && this.renderRemoveApp(app)}
+                      {hasAccess
+                        ? this.renderUnpublishedAdminButtons(app)
+                        : this.renderUnpublishedNonAdminButtons()}
                     </React.Fragment>
                   )}
                 </Access>
               ) : (
-                <Button
-                  disabled
-                  title={t('Published apps cannot be removed.')}
-                  size="small"
-                  icon="icon-trash"
-                />
+                this.renderPublishedAppButtons()
               )}
             </Box>
           )}
@@ -217,14 +274,16 @@ const StyledButton = styled(Button)`
 `;
 
 const Status = styled(
-  withTheme(({enabled, isInternal, ...props}) => {
+  withTheme(({enabled, ...props}) => {
+    //need to omit isInternal
+    const propsToPass = omit(props, ['isInternal']);
     return (
       <Flex align="center">
         <CircleIndicator
           size={6}
           color={enabled ? props.theme.success : props.theme.gray2}
         />
-        <div {...props}>{enabled ? t('Installed') : t('Not Installed')}</div>
+        <div {...propsToPass}>{enabled ? t('Installed') : t('Not Installed')}</div>
       </Flex>
     );
   })
@@ -253,3 +312,11 @@ const PublishStatus = styled(({status, ...props}) => {
   font-weight: light;
   margin-right: ${space(0.75)};
 `;
+
+const ButtonHolder = styled.div`
+  flex-direction: row;
+  display: flex;
+  & > * {
+    margin-left: ${space(0.5)};
+  }
+`;
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/index.spec.jsx b/tests/js/spec/views/settings/organizationDeveloperSettings/index.spec.jsx
index 57d21de264..6a9eb2ed41 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/index.spec.jsx
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/index.spec.jsx
@@ -9,6 +9,8 @@ describe('Organization Developer Settings', function() {
   const sentryApp = TestStubs.SentryApp();
   const routerContext = TestStubs.routerContext();
 
+  const publishButtonSelector = 'StyledButton[icon="icon-upgrade"]';
+
   beforeEach(() => {
     Client.clearMockResponses();
   });
@@ -51,17 +53,20 @@ describe('Organization Developer Settings', function() {
   });
 
   describe('with unpublished apps', () => {
-    Client.addMockResponse({
-      url: `/organizations/${org.slug}/sentry-apps/`,
-      body: [sentryApp],
-    });
+    let wrapper;
 
-    org.features = ['sentry-apps'];
+    beforeEach(() => {
+      Client.addMockResponse({
+        url: `/organizations/${org.slug}/sentry-apps/`,
+        body: [sentryApp],
+      });
 
-    const wrapper = mount(
-      <OrganizationDeveloperSettings params={{orgId: org.slug}} organization={org} />,
-      routerContext
-    );
+      org.features = ['sentry-apps'];
+      wrapper = mount(
+        <OrganizationDeveloperSettings params={{orgId: org.slug}} organization={org} />,
+        routerContext
+      );
+    });
 
     it('displays all Apps owned by the Org', () => {
       expect(wrapper.find('SentryApplicationRow').prop('app').name).toBe('Sample App');
@@ -74,7 +79,6 @@ describe('Organization Developer Settings', function() {
         method: 'DELETE',
         body: [],
       });
-      org.features = ['sentry-apps'];
 
       expect(wrapper.find('[icon="icon-trash"]').prop('disabled')).toEqual(false);
       wrapper.find('[icon="icon-trash"]').simulate('click');
@@ -88,6 +92,20 @@ describe('Organization Developer Settings', function() {
       wrapper.update();
       expect(wrapper.text()).toMatch('No integrations have been created yet');
     });
+
+    it('can make a request to publish an integration', async () => {
+      const mock = Client.addMockResponse({
+        url: `/sentry-apps/${sentryApp.slug}/publish-request/`,
+        method: 'POST',
+      });
+
+      expect(wrapper.find(publishButtonSelector).prop('disabled')).toEqual(false);
+      wrapper.find(publishButtonSelector).simulate('click');
+      wrapper.find('Button[data-test-id="confirm-modal"]').simulate('click');
+      await tick();
+      wrapper.update();
+      expect(mock).toHaveBeenCalled();
+    });
   });
 
   describe('with published apps', () => {
@@ -111,6 +129,10 @@ describe('Organization Developer Settings', function() {
     it('trash button is disabled', () => {
       expect(wrapper.find('[icon="icon-trash"]').prop('disabled')).toEqual(true);
     });
+
+    it('publish button is disabled', () => {
+      expect(wrapper.find(publishButtonSelector).prop('disabled')).toEqual(true);
+    });
   });
 
   describe('with Internal Integrations', () => {
@@ -129,6 +151,10 @@ describe('Organization Developer Settings', function() {
     it('allows deleting', () => {
       expect(wrapper.find('[icon="icon-trash"]').prop('disabled')).toEqual(false);
     });
+
+    it('publish button is disabled', () => {
+      expect(wrapper.find(publishButtonSelector).prop('disabled')).toEqual(true);
+    });
   });
 
   describe('without Owner permissions', () => {
@@ -151,5 +177,9 @@ describe('Organization Developer Settings', function() {
     it('trash button is disabled', () => {
       expect(wrapper.find('[icon="icon-trash"]').prop('disabled')).toEqual(true);
     });
+
+    it('publish button is disabled', () => {
+      expect(wrapper.find(publishButtonSelector).prop('disabled')).toEqual(true);
+    });
   });
 });
diff --git a/tests/sentry/api/endpoints/test_sentry_app_publish_request.py b/tests/sentry/api/endpoints/test_sentry_app_publish_request.py
new file mode 100644
index 0000000000..05847929b5
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_sentry_app_publish_request.py
@@ -0,0 +1,56 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+import mock
+from sentry.testutils import APITestCase
+from sentry.testutils.helpers import with_feature
+from sentry.constants import SentryAppStatus
+
+
+class SentryAppPublishRequestTest(APITestCase):
+    def setUp(self):
+        # create user as superuser
+        self.user = self.create_user(email='boop@example.com', is_superuser=True)
+        self.org = self.create_organization(owner=self.user, name='My Org')
+        self.project = self.create_project(organization=self.org)
+
+        self.sentry_app = self.create_sentry_app(
+            name='Testin',
+            organization=self.org,
+        )
+
+        self.url = reverse(
+            'sentry-api-0-sentry-app-publish-request',
+            args=[self.sentry_app.slug],
+        )
+
+    @with_feature('organizations:sentry-apps')
+    @mock.patch('sentry.utils.email.send_mail')
+    def test_publish_request(self, send_mail):
+        self.login_as(user=self.user)
+        response = self.client.post(self.url, format='json')
+        assert response.status_code == 201
+        send_mail.assert_called_with('Sentry App Publication Request',
+                                     'User boop@example.com of organization my-org wants to publish testin',
+                                     'root@localhost', ['partners@sentry.io'], fail_silently=False)
+
+    @with_feature('organizations:sentry-apps')
+    @mock.patch('sentry.utils.email.send_mail')
+    def test_publish_already_published(self, send_mail):
+        self.sentry_app.update(status=SentryAppStatus.PUBLISHED)
+        self.login_as(user=self.user)
+        response = self.client.post(self.url, format='json')
+        assert response.status_code == 400
+        assert response.data['detail'] == 'Cannot publish already published integration'
+        send_mail.asssert_not_called()
+
+    @with_feature('organizations:sentry-apps')
+    @mock.patch('sentry.utils.email.send_mail')
+    def test_publish_internal(self, send_mail):
+        self.sentry_app.update(status=SentryAppStatus.INTERNAL)
+        self.login_as(user=self.user)
+        response = self.client.post(self.url, format='json')
+        assert response.status_code == 400
+        assert response.data['detail'] == 'Cannot publish internal integration'
+        send_mail.asssert_not_called()
