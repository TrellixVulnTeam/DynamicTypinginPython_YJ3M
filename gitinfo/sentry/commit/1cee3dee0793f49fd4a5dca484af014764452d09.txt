commit 1cee3dee0793f49fd4a5dca484af014764452d09
Author: Dave Smith <dsmith@hirevue.com>
Date:   Wed Oct 12 09:16:05 2016 -0600

    Allow users to ignore issues until a specific date/time
    
    This helps teams who have a regular release schedule, e.g., bi-weekly,
    so they can ignore an issue until the next release.
    
    *edit: changed "snooze" to "ignore"
    
    /cc @getsentry/team

diff --git a/src/sentry/static/sentry/app/components/customSnoozeModal.jsx b/src/sentry/static/sentry/app/components/customSnoozeModal.jsx
new file mode 100644
index 0000000000..dd159f338c
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/customSnoozeModal.jsx
@@ -0,0 +1,101 @@
+import React from 'react';
+import Modal from 'react-bootstrap/lib/Modal';
+import {t} from '../locale';
+import {sprintf} from 'sprintf-js';
+
+const CustomSnoozeModal = React.createClass({
+  propTypes: {
+    onSelected: React.PropTypes.func,
+    onCanceled: React.PropTypes.func,
+    show: React.PropTypes.bool,
+  },
+
+  getInitialState() {
+    return {
+      dateWarning: false
+    };
+  },
+
+  selectedSnoozeMinutes() {
+    const dateStr = this.refs.snoozeDateInput.value; // YYYY-MM-DD
+    const timeStr = this.refs.snoozeTimeInput.value; // HH:MM
+    if (dateStr && timeStr) {
+      const selectedDate = new Date(dateStr + 'T' + timeStr); // poor man's ISO datetime
+      if (!isNaN(selectedDate)) {
+        const now = new Date();
+        const millis = selectedDate.getTime() - now.getTime();
+        const minutes = parseInt(Math.ceil(millis / 1000.0 / 60.0), 10);
+        return minutes;
+      }
+    }
+    return 0;
+  },
+
+  snoozeClicked() {
+    const minutes = this.selectedSnoozeMinutes();
+
+    this.setState({
+      dateWarning: minutes <= 0
+    });
+
+    if (minutes > 0) {
+      this.props.onSelected(minutes);
+    }
+  },
+
+  render() {
+    const inputStyle = {
+      marginLeft: '5px',
+      width: '150px',
+    };
+
+    // Give the user a sane starting point to select a date
+    // (prettier than the empty date/time inputs):
+    let defaultDate = new Date();
+    defaultDate.setDate(defaultDate.getDate() + 14);
+    defaultDate.setSeconds(0);
+    defaultDate.setMilliseconds(0);
+
+    const defaultDateVal = sprintf('%d-%02d-%02d',
+        defaultDate.getUTCFullYear(),
+        defaultDate.getUTCMonth() + 1,
+        defaultDate.getUTCDate());
+
+    const defaultTimeVal = sprintf('%02d:00',
+        defaultDate.getUTCHours());
+
+    return (
+      <Modal show={this.props.show} animation={false} bsSize="sm">
+        <div className="modal-body">
+          <h5>{t('Ignore until:')}</h5>
+          <form>
+            <div className="form-group">
+              <label htmlFor="snooze-until-date">{t('Date:')}</label>
+              <input id="snooze-until-date" type="date"
+                     defaultValue={defaultDateVal} ref="snoozeDateInput" style={inputStyle}/>
+            </div>
+            <div className="form-group">
+              <label htmlFor="snooze-until-time">{t('Time:')}</label>
+              <input id="snooze-until-time" type="time"
+                     defaultValue={defaultTimeVal} ref="snoozeTimeInput" style={inputStyle}/>
+              <span> {t('UTC')}</span>
+            </div>
+          </form>
+        </div>
+        {this.state.dateWarning &&
+          <div className="alert alert-error" style={{'margin-top': '5px'}}>
+            {t('Please enter a valid date in the future')}
+          </div>}
+        <div className="modal-footer">
+          <button type="button" className="btn btn-primary"
+                  onClick={this.snoozeClicked}>{t('Ignore')}</button>
+          <button type="button" className="btn btn-default"
+                  onClick={this.props.onCanceled}>{t('Cancel')}</button>
+        </div>
+      </Modal>
+    );
+  },
+
+});
+
+export default CustomSnoozeModal;
diff --git a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
index 916d854f72..e0cb22c699 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
@@ -2,6 +2,7 @@ import React from 'react';
 import {History} from 'react-router';
 import ApiMixin from '../../mixins/apiMixin';
 import DropdownLink from '../../components/dropdownLink';
+import CustomSnoozeModal from '../../components/customSnoozeModal';
 import GroupState from '../../mixins/groupState';
 import IndicatorStore from '../../stores/indicatorStore';
 import IssuePluginActions from '../../components/group/issuePluginActions';
@@ -78,6 +79,23 @@ const GroupActions = React.createClass({
     });
   },
 
+  customSnoozeClicked() {
+    this.setState({
+      isCustomSnoozeModalOpen: true
+    });
+  },
+
+  customSnoozeSelected(duration) {
+    this.onSnooze(duration);
+    this.customSnoozeCanceled();
+  },
+
+  customSnoozeCanceled() {
+    this.setState({
+      isCustomSnoozeModalOpen: false
+    });
+  },
+
   render() {
     let group = this.getGroup();
 
@@ -103,6 +121,10 @@ const GroupActions = React.createClass({
 
     return (
       <div className="group-actions">
+        <CustomSnoozeModal
+            show={this.state && this.state.isCustomSnoozeModalOpen}
+            onSelected={this.customSnoozeSelected}
+            onCanceled={this.customSnoozeCanceled}/>
         <div className="btn-group">
           {group.status === 'resolved' ? (
             group.statusDetails.autoResolved ?
@@ -176,6 +198,9 @@ const GroupActions = React.createClass({
               <MenuItem noAnchor={true}>
                 <a onClick={this.onSnooze.bind(this, Snooze.ONEWEEK)}>{t('for 1 week')}</a>
               </MenuItem>
+              <MenuItem noAnchor={true}>
+                <a onClick={this.customSnoozeClicked.bind(this)}>{t('until custom date...')}</a>
+              </MenuItem>
               <MenuItem noAnchor={true}>
                 <a onClick={this.onUpdate.bind(this, {status: 'ignored'})}>{t('forever')}</a>
               </MenuItem>
