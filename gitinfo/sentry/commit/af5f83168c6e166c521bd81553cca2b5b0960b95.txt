commit af5f83168c6e166c521bd81553cca2b5b0960b95
Author: Mark Story <mark@sentry.io>
Date:   Wed Apr 15 17:08:33 2020 -0400

    feat(discover) Add display modes to discover chart (#18238)
    
    We'd like to expand the number of visualization options we offer. Those
    new options will be incompatible with previous + release markers. Moving
    the current options into a dropdown will also enable us to reduce the
    noise and clutter that release markers and previous period data can
    introduce.
    
    Disable animation on charts to remove jank. When animating between
    states when we replace data causes tearing jank which is unsightly.
    Disabling animation removes that jank.

diff --git a/src/sentry/static/sentry/app/components/charts/areaChart.jsx b/src/sentry/static/sentry/app/components/charts/areaChart.jsx
index 4ddfaa834e..a91a7622de 100644
--- a/src/sentry/static/sentry/app/components/charts/areaChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/areaChart.jsx
@@ -26,6 +26,9 @@ class AreaChart extends React.Component {
               color: '#C4BFE9',
               opacity: 1.0,
             },
+            animation: false,
+            animationThreshold: 1,
+            animationDuration: 0,
             ...otherSeriesProps,
           })
         )}
diff --git a/src/sentry/static/sentry/app/components/charts/optionSelector.tsx b/src/sentry/static/sentry/app/components/charts/optionSelector.tsx
index 652ff42940..cff68ef3ad 100644
--- a/src/sentry/static/sentry/app/components/charts/optionSelector.tsx
+++ b/src/sentry/static/sentry/app/components/charts/optionSelector.tsx
@@ -2,14 +2,19 @@ import React from 'react';
 import PropTypes from 'prop-types';
 import styled from '@emotion/styled';
 
-import {SelectValue} from 'app/types';
 import DropdownButton from 'app/components/dropdownButton';
 import {InlineContainer, SectionHeading} from 'app/components/charts/styles';
 import DropdownControl, {DropdownItem} from 'app/components/dropdownControl';
 import space from 'app/styles/space';
 
+type Option = {
+  label: string;
+  value: string;
+  disabled?: boolean;
+};
+
 type Props = {
-  options: SelectValue<string>[];
+  options: Option[];
   selected: string;
   onChange: (value: string) => void;
   title: string;
@@ -36,6 +41,7 @@ function OptionSelector({options, onChange, selected, title, menuWidth = 'auto'}
             key={opt.value}
             onSelect={onChange}
             eventKey={opt.value}
+            disabled={opt.disabled}
             isActive={selected === opt.value}
           >
             {opt.label}
diff --git a/src/sentry/static/sentry/app/components/charts/styles.tsx b/src/sentry/static/sentry/app/components/charts/styles.tsx
index 78f97b88e4..f22cc9ee92 100644
--- a/src/sentry/static/sentry/app/components/charts/styles.tsx
+++ b/src/sentry/static/sentry/app/components/charts/styles.tsx
@@ -37,4 +37,9 @@ export const InlineContainer = styled('div')`
   display: flex;
   flex-direction: row;
   align-items: center;
+  margin-left: ${space(2)};
+
+  &:first-child {
+    margin-left: 0;
+  }
 `;
diff --git a/src/sentry/static/sentry/app/utils/discover/eventView.tsx b/src/sentry/static/sentry/app/utils/discover/eventView.tsx
index 8d66a97d94..c3c8e64b32 100644
--- a/src/sentry/static/sentry/app/utils/discover/eventView.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/eventView.tsx
@@ -24,6 +24,7 @@ import {
   getAggregateAlias,
 } from './fields';
 import {getSortField} from './fieldRenderers';
+import {CHART_AXIS_OPTIONS, DisplayModes, DISPLAY_MODE_OPTIONS} from './types';
 
 // Metadata mapping for discover results.
 export type MetaType = Record<string, ColumnType>;
@@ -46,12 +47,6 @@ const EXTERNAL_QUERY_STRING_KEYS: Readonly<Array<keyof LocationQuery>> = [
   'cursor',
 ];
 
-// default list of yAxis options
-export const CHART_AXIS_OPTIONS = [
-  {label: 'count()', value: 'count()'},
-  {label: 'count_unique(users)', value: 'count_unique(user)'},
-];
-
 const reverseSort = (sort: Sort): Sort => ({
   kind: sort.kind === 'desc' ? 'asc' : 'desc',
   field: sort.field,
@@ -979,6 +974,18 @@ class EventView {
 
     return defaultOption;
   }
+
+  getDisplayOptions() {
+    if (!this.start && !this.end) {
+      return DISPLAY_MODE_OPTIONS;
+    }
+    return DISPLAY_MODE_OPTIONS.map(item => {
+      if (item.value === DisplayModes.PREVIOUS) {
+        return {...item, disabled: true};
+      }
+      return item;
+    });
+  }
 }
 
 export const isAPIPayloadSimilar = (
diff --git a/src/sentry/static/sentry/app/utils/discover/types.tsx b/src/sentry/static/sentry/app/utils/discover/types.tsx
new file mode 100644
index 0000000000..05522b3118
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/discover/types.tsx
@@ -0,0 +1,20 @@
+import {t} from 'app/locale';
+import {SelectValue} from 'app/types';
+
+export enum DisplayModes {
+  NONE = 'none',
+  PREVIOUS = 'previous',
+  RELEASES = 'releases',
+}
+
+export const DISPLAY_MODE_OPTIONS: SelectValue<string>[] = [
+  {value: DisplayModes.NONE, label: t('None')},
+  {value: DisplayModes.PREVIOUS, label: t('Previous Period')},
+  {value: DisplayModes.RELEASES, label: t('Release Markers')},
+];
+
+// default list of yAxis options
+export const CHART_AXIS_OPTIONS = [
+  {label: 'count()', value: 'count()'},
+  {label: 'count_unique(users)', value: 'count_unique(user)'},
+];
diff --git a/src/sentry/static/sentry/app/views/events/eventsChart.jsx b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
index d0f8287d84..811a7b56bd 100644
--- a/src/sentry/static/sentry/app/views/events/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
@@ -117,6 +117,7 @@ class EventsChart extends React.Component {
     showLegend: PropTypes.bool,
     yAxis: PropTypes.string,
     disablePrevious: PropTypes.bool,
+    disableReleases: PropTypes.bool,
     currentSeriesName: PropTypes.string,
     previousSeriesName: PropTypes.string,
   };
@@ -135,6 +136,7 @@ class EventsChart extends React.Component {
       showLegend,
       yAxis,
       disablePrevious,
+      disableReleases,
       currentSeriesName: currentName,
       previousSeriesName: previousName,
       ...props
@@ -162,6 +164,52 @@ class EventsChart extends React.Component {
       },
     };
 
+    let chartImplementation = ({
+      zoomRenderProps,
+      releaseSeries,
+      errored,
+      loading,
+      reloading,
+      timeseriesData,
+      previousTimeseriesData,
+    }) => {
+      if (errored) {
+        return (
+          <ErrorPanel>
+            <IconWarning color={theme.gray2} size="lg" />
+          </ErrorPanel>
+        );
+      }
+
+      return (
+        <TransitionChart loading={loading} reloading={reloading}>
+          <TransparentLoadingMask visible={reloading} />
+          <EventsAreaChart
+            {...zoomRenderProps}
+            tooltip={tooltip}
+            loading={loading}
+            reloading={reloading}
+            utc={utc}
+            showLegend={showLegend}
+            releaseSeries={releaseSeries || []}
+            timeseriesData={timeseriesData}
+            previousTimeseriesData={previousTimeseriesData}
+            currentSeriesName={currentSeriesName}
+            previousSeriesName={previousSeriesName}
+          />
+        </TransitionChart>
+      );
+    };
+
+    if (!disableReleases) {
+      const previousChart = chartImplementation;
+      chartImplementation = chartProps => (
+        <ReleaseSeries utc={utc} api={api} projects={projects}>
+          {({releaseSeries}) => previousChart({...chartProps, releaseSeries})}
+        </ReleaseSeries>
+      );
+    }
+
     return (
       <ChartZoom
         router={router}
@@ -188,40 +236,7 @@ class EventsChart extends React.Component {
             previousSeriesName={previousSeriesName}
             yAxis={yAxis}
           >
-            {({loading, reloading, errored, timeseriesData, previousTimeseriesData}) => (
-              <ReleaseSeries utc={utc} api={api} projects={projects}>
-                {({releaseSeries}) => {
-                  if (errored) {
-                    return (
-                      <ErrorPanel>
-                        <IconWarning color={theme.gray2} size="lg" />
-                      </ErrorPanel>
-                    );
-                  }
-
-                  return (
-                    <TransitionChart loading={loading} reloading={reloading}>
-                      <React.Fragment>
-                        <TransparentLoadingMask visible={reloading} />
-                        <EventsAreaChart
-                          {...zoomRenderProps}
-                          tooltip={tooltip}
-                          loading={loading}
-                          reloading={reloading}
-                          utc={utc}
-                          showLegend={showLegend}
-                          releaseSeries={releaseSeries}
-                          timeseriesData={timeseriesData}
-                          previousTimeseriesData={previousTimeseriesData}
-                          currentSeriesName={currentSeriesName}
-                          previousSeriesName={previousSeriesName}
-                        />
-                      </React.Fragment>
-                    </TransitionChart>
-                  );
-                }}
-              </ReleaseSeries>
-            )}
+            {eventData => chartImplementation({...eventData, zoomRenderProps})}
           </EventsRequest>
         )}
       </ChartZoom>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/chartFooter.tsx b/src/sentry/static/sentry/app/views/eventsV2/chartFooter.tsx
index 93f9226154..56e8bc109a 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/chartFooter.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/chartFooter.tsx
@@ -15,6 +15,9 @@ type Props = {
   yAxisValue: string;
   yAxisOptions: SelectValue<string>[];
   onAxisChange: (value: string) => void;
+  displayMode: string;
+  displayOptions: SelectValue<string>[];
+  onDisplayChange: (value: string) => void;
 };
 
 export default function ChartFooter({
@@ -22,6 +25,9 @@ export default function ChartFooter({
   yAxisValue,
   yAxisOptions,
   onAxisChange,
+  displayMode,
+  displayOptions,
+  onDisplayChange,
 }: Props) {
   const elements: React.ReactNode[] = [];
 
@@ -29,7 +35,7 @@ export default function ChartFooter({
   elements.push(
     total === null ? (
       <SectionValue data-test-id="loading-placeholder" key="total-value">
-        -
+        &mdash;
       </SectionValue>
     ) : (
       <SectionValue key="total-value">{total.toLocaleString()}</SectionValue>
@@ -39,12 +45,21 @@ export default function ChartFooter({
   return (
     <ChartControls>
       <InlineContainer>{elements}</InlineContainer>
-      <OptionSelector
-        title={t('Y-Axis')}
-        selected={yAxisValue}
-        options={yAxisOptions}
-        onChange={onAxisChange}
-      />
+      <InlineContainer>
+        <OptionSelector
+          title={t('Display')}
+          selected={displayMode}
+          options={displayOptions}
+          onChange={onDisplayChange}
+          menuWidth="170px"
+        />
+        <OptionSelector
+          title={t('Y-Axis')}
+          selected={yAxisValue}
+          options={yAxisOptions}
+          onChange={onAxisChange}
+        />
+      </InlineContainer>
     </ChartControls>
   );
 }
diff --git a/src/sentry/static/sentry/app/views/eventsV2/results.tsx b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
index 7b81b06a68..699a061e23 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/results.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
@@ -160,6 +160,20 @@ class Results extends React.Component<Props, State> {
     });
   };
 
+  handleDisplayChange = (value: string) => {
+    const {router, location} = this.props;
+
+    const newQuery = {
+      ...location.query,
+      display: value,
+    };
+
+    router.push({
+      pathname: location.pathname,
+      query: newQuery,
+    });
+  };
+
   getDocumentTitle(): string {
     const {eventView} = this.state;
     if (!eventView) {
@@ -232,6 +246,7 @@ class Results extends React.Component<Props, State> {
                     eventView={eventView}
                     location={location}
                     onAxisChange={this.handleYAxisChange}
+                    onDisplayChange={this.handleDisplayChange}
                     total={totalValues}
                   />
                 </Top>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx b/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
index 1a53fd1440..2bc7f13f8b 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
@@ -12,6 +12,7 @@ import {Panel} from 'app/components/panels';
 import getDynamicText from 'app/utils/getDynamicText';
 import {EventsChart} from 'app/views/events/eventsChart';
 import EventView from 'app/utils/discover/eventView';
+import {DisplayModes} from 'app/utils/discover/types';
 
 import ChartFooter from './chartFooter';
 
@@ -67,6 +68,8 @@ class ResultsChart extends React.Component<ResultsChartProps> {
               start={start}
               end={end}
               period={globalSelection.statsPeriod}
+              disablePrevious={eventView.display !== DisplayModes.PREVIOUS}
+              disableReleases={eventView.display !== DisplayModes.RELEASES}
               utc={utc === 'true'}
             />
           ),
@@ -77,7 +80,7 @@ class ResultsChart extends React.Component<ResultsChartProps> {
   }
 }
 
-type ResultsChartContainerProps = {
+type ContainerProps = {
   api: Client;
   router: ReactRouter.InjectedRouter;
   eventView: EventView;
@@ -87,10 +90,11 @@ type ResultsChartContainerProps = {
   // chart footer props
   total: number | null;
   onAxisChange: (value: string) => void;
+  onDisplayChange: (value: string) => void;
 };
 
-class ResultsChartContainer extends React.Component<ResultsChartContainerProps> {
-  shouldComponentUpdate(nextProps: ResultsChartContainerProps) {
+class ResultsChartContainer extends React.Component<ContainerProps> {
+  shouldComponentUpdate(nextProps: ContainerProps) {
     const {eventView, ...restProps} = this.props;
     const {eventView: nextEventView, ...restNextProps} = nextProps;
 
@@ -109,6 +113,7 @@ class ResultsChartContainer extends React.Component<ResultsChartContainerProps>
       router,
       total,
       onAxisChange,
+      onDisplayChange,
       organization,
     } = this.props;
 
@@ -128,6 +133,9 @@ class ResultsChartContainer extends React.Component<ResultsChartContainerProps>
           yAxisValue={yAxisValue}
           yAxisOptions={eventView.getYAxisOptions()}
           onAxisChange={onAxisChange}
+          displayOptions={eventView.getDisplayOptions()}
+          displayMode={eventView.display || DisplayModes.NONE}
+          onDisplayChange={onDisplayChange}
         />
       </StyledPanel>
     );
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/latencyChart.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/latencyChart.tsx
index 26c1550b7b..ca7ed93779 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/latencyChart.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/latencyChart.tsx
@@ -240,7 +240,7 @@ class LatencyHistogram extends AsyncComponent<Props, State> {
 
 function calculateTotal(total: number | null) {
   if (total === null) {
-    return '\u2015';
+    return '\u2014';
   }
   return total.toLocaleString();
 }
diff --git a/tests/js/spec/utils/discover/eventView.spec.jsx b/tests/js/spec/utils/discover/eventView.spec.jsx
index d70a87c26c..e58d860250 100644
--- a/tests/js/spec/utils/discover/eventView.spec.jsx
+++ b/tests/js/spec/utils/discover/eventView.spec.jsx
@@ -1,9 +1,9 @@
 import EventView, {
-  CHART_AXIS_OPTIONS,
   isAPIPayloadSimilar,
   pickRelevantLocationQueryStrings,
 } from 'app/utils/discover/eventView';
 import {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable/utils';
+import {CHART_AXIS_OPTIONS, DISPLAY_MODE_OPTIONS} from 'app/utils/discover/types';
 
 const generateFields = fields =>
   fields.map(field => ({
@@ -2116,6 +2116,35 @@ describe('EventView.getYAxis', function() {
   });
 });
 
+describe('EventView.getDisplayOptions()', function() {
+  const state = {
+    fields: [],
+    sorts: [],
+    query: '',
+    project: [],
+    statsPeriod: '42d',
+    environment: [],
+  };
+
+  it('should return default options', function() {
+    const eventView = new EventView(state);
+
+    expect(eventView.getDisplayOptions()).toEqual(DISPLAY_MODE_OPTIONS);
+  });
+
+  it('should disable previous when start/end are used.', function() {
+    const eventView = new EventView({
+      ...state,
+      end: '2020-04-13T12:13:14',
+      start: '2020-04-01T12:13:14',
+    });
+
+    const options = eventView.getDisplayOptions();
+    expect(options[1].value).toEqual('previous');
+    expect(options[1].disabled).toBeTruthy();
+  });
+});
+
 describe('EventView.hasAggregateField', function() {
   it('ensures an eventview has an aggregate field', function() {
     let eventView = new EventView({
diff --git a/tests/js/spec/views/eventsV2/results.spec.jsx b/tests/js/spec/views/eventsV2/results.spec.jsx
index fd160e1690..a25f8031dd 100644
--- a/tests/js/spec/views/eventsV2/results.spec.jsx
+++ b/tests/js/spec/views/eventsV2/results.spec.jsx
@@ -226,8 +226,8 @@ describe('EventsV2 > Results', function() {
       />,
       initialData.routerContext
     );
-    const selector = wrapper.find('OptionSelector');
-    expect(selector).toHaveLength(1);
+    // y-axis selector is last.
+    const selector = wrapper.find('OptionSelector').last();
 
     // Open the selector
     selector.find('StyledDropdownButton button').simulate('click');
@@ -242,4 +242,43 @@ describe('EventsV2 > Results', function() {
     const eventsRequest = wrapper.find('EventsChart');
     expect(eventsRequest.props().yAxis).toEqual('count()');
   });
+
+  it('renders a display selector', function() {
+    const organization = TestStubs.Organization({
+      features,
+      projects: [TestStubs.Project()],
+    });
+
+    const initialData = initializeOrg({
+      organization,
+      router: {
+        location: {query: {...generateFields(), display: 'previoux'}},
+      },
+    });
+
+    const wrapper = mountWithTheme(
+      <Results
+        organization={organization}
+        location={initialData.router.location}
+        router={initialData.router}
+      />,
+      initialData.routerContext
+    );
+    // display selector is first.
+    const selector = wrapper.find('OptionSelector').first();
+
+    // Open the selector
+    selector.find('StyledDropdownButton button').simulate('click');
+
+    // Click the 'none' option.
+    selector
+      .find('DropdownMenu MenuItem span')
+      .first()
+      .simulate('click');
+    wrapper.update();
+
+    const eventsRequest = wrapper.find('EventsChart').props();
+    expect(eventsRequest.disableReleases).toEqual(true);
+    expect(eventsRequest.disablePrevious).toEqual(true);
+  });
 });
