commit 3aff9738f838d736b9030509a4b47fed506b5423
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Jan 7 13:02:23 2019 -0800

    feat(charts): Add PercentageTableChart (#11331)
    
    This component is revived from Health with some changes:
    
    * Remove last column from PercentageTableChart
    * Fix when there is no previous data available
    * Fixed headers instead of accepting an array of headings

diff --git a/src/sentry/static/sentry/app/components/charts/percentageTableChart.jsx b/src/sentry/static/sentry/app/components/charts/percentageTableChart.jsx
new file mode 100644
index 0000000000..9ec7569bac
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/percentageTableChart.jsx
@@ -0,0 +1,174 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t} from 'app/locale';
+import Count from 'app/components/count';
+import InlineSvg from 'app/components/inlineSvg';
+import TableChart from 'app/components/charts/tableChart';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
+import space from 'app/styles/space';
+
+const Delta = ({current, previous, className}) => {
+  if (typeof previous === 'undefined') {
+    return null;
+  }
+  const changePercent = Math.round(Math.abs(current - previous) / previous * 100);
+  const direction = !changePercent ? 0 : current - previous;
+  return (
+    <StyledDelta direction={direction} className={className}>
+      {!!direction && <DeltaCaret direction={direction} src="icon-chevron-down" />}
+      {changePercent !== 0 ? `${changePercent}%` : <span>&mdash;</span>}
+    </StyledDelta>
+  );
+};
+Delta.propTypes = {
+  current: PropTypes.number,
+  previous: PropTypes.number,
+};
+
+const DeltaCaret = styled(InlineSvg)`
+  /* should probably have a chevron-up svg (: */
+  ${p => p.direction > 0 && 'transform: rotate(180deg)'};
+  width: 10px;
+  height: 10px;
+`;
+
+const StyledDelta = styled('div')`
+  display: flex;
+  align-items: center;
+  padding: 0 ${space(0.25)};
+  margin-right: ${space(0.5)};
+  font-size: ${p => p.theme.fontSizeSmall};
+  color: ${p =>
+    p.direction > 0 ? p.theme.green : p.direction < 0 ? p.theme.red : p.theme.gray2};
+`;
+
+class PercentageTableChart extends React.Component {
+  static propTypes = {
+    title: PropTypes.node,
+    countTitle: PropTypes.node,
+    onRowClick: PropTypes.func,
+    data: PropTypes.arrayOf(
+      PropTypes.shape({
+        name: PropTypes.node,
+        percentage: PropTypes.number,
+        value: PropTypes.number,
+        lastValue: PropTypes.number,
+      })
+    ),
+  };
+
+  static defaultProps = {
+    title: '',
+    countTitle: t('Count'),
+    onRowClick: () => {},
+  };
+
+  handleRowClick = ({specifier}, e) => {
+    const {onRowClick} = this.props;
+    onRowClick(specifier, e);
+  };
+
+  render() {
+    const {title, countTitle, data} = this.props;
+
+    return (
+      <TableChart
+        headers={[title, countTitle, t('Percentage')]}
+        data={data.map(({value, lastValue, name, percentage}) => [
+          <Name key="name">{name}</Name>,
+          <CountColumn key="count">
+            <Delta current={value} previous={lastValue} />
+            <Count value={value} />
+          </CountColumn>,
+          <React.Fragment key="bar">
+            <BarWrapper>
+              <Bar width={percentage} />
+            </BarWrapper>
+            <Percentage>{percentage}%</Percentage>
+          </React.Fragment>,
+        ])}
+        renderRow={({items, rowIndex, ...other}) => (
+          <Row onClick={this.handleRowClick} data={data} rowIndex={rowIndex}>
+            <NameAndCountContainer justify="space-between" align="center">
+              {items[0]}
+              <div>{items[1]}</div>
+            </NameAndCountContainer>
+            <PercentageContainer justify="space-between" align="center">
+              <PercentageLabel>{items[2]}</PercentageLabel>
+            </PercentageContainer>
+          </Row>
+        )}
+      />
+    );
+  }
+}
+
+const Row = styled(function RowComponent({className, data, rowIndex, onClick, children}) {
+  return (
+    <div
+      className={className}
+      onClick={e => typeof onClick === 'function' && onClick(data[rowIndex], e)}
+    >
+      {children}
+    </div>
+  );
+})`
+  display: flex;
+  flex: 1;
+  cursor: pointer;
+`;
+
+const StyledPercentageTableChart = styled(PercentageTableChart)`
+  width: 100%;
+`;
+
+const NameAndCountContainer = styled('div')`
+  display: flex;
+  flex-shrink: 0;
+  margin-right: ${space(2)};
+  width: 50%;
+`;
+
+const PercentageContainer = styled('div')`
+  display: flex;
+  width: 50%;
+`;
+
+const PercentageLabel = styled('div')`
+  flex: 1;
+  align-items: center;
+`;
+
+const BarWrapper = styled('div')`
+  flex: 1;
+  margin-right: ${space(1)};
+  background-color: ${p => p.theme.whiteDark};
+`;
+
+const Percentage = styled('div')`
+  flex-shrink: 0;
+  text-align: right;
+  width: 60px;
+`;
+
+const Bar = styled(({width, ...props}) => <div {...props} />)`
+  flex: 1;
+  width: ${p => p.width}%;
+  background-color: ${p => p.theme.gray1};
+  height: 12px;
+  border-radius: 2px;
+`;
+
+const Name = styled('span')`
+  ${overflowEllipsis};
+`;
+
+const CountColumn = styled(Name)`
+  display: flex;
+  align-items: center;
+  margin-left: ${space(0.5)};
+`;
+
+export default StyledPercentageTableChart;
diff --git a/tests/js/spec/components/charts/percentageTableChart.spec.jsx b/tests/js/spec/components/charts/percentageTableChart.spec.jsx
new file mode 100644
index 0000000000..bb63e9efa7
--- /dev/null
+++ b/tests/js/spec/components/charts/percentageTableChart.spec.jsx
@@ -0,0 +1,143 @@
+import React from 'react';
+import {mount} from 'enzyme';
+import PercentageTableChart from 'app/components/charts/percentageTableChart';
+
+describe('PercentageTableChart', function() {
+  let wrapper;
+
+  describe('With Previous Data', function() {
+    beforeEach(function() {
+      wrapper = mount(
+        <PercentageTableChart
+          title="User"
+          data={[
+            {
+              value: 40,
+              lastValue: 20,
+              name: 'billy',
+              percentage: 40,
+            },
+            {
+              value: 60,
+              lastValue: 120,
+              name: 'not billy',
+              percentage: 60,
+            },
+          ]}
+        />
+      );
+    });
+
+    it('renders headers', function() {
+      expect(
+        wrapper.find('PanelHeader NameAndCountContainer').prop('children')
+      ).toHaveLength(2);
+
+      expect(wrapper.find('PanelHeader').text()).toContain('User');
+      expect(wrapper.find('PanelHeader').text()).toContain('Count');
+      expect(wrapper.find('PanelHeader').text()).toContain('Percentage');
+    });
+
+    it('renders data rows', function() {
+      expect(wrapper.find('TableChartRow')).toHaveLength(2);
+
+      expect(
+        wrapper
+          .find('TableChartRow Name')
+          .at(0)
+          .text()
+      ).toBe('billy');
+
+      expect(
+        wrapper
+          .find('TableChartRow CountColumn DeltaCaret')
+          .at(0)
+          .prop('direction')
+      ).toBeGreaterThan(0);
+
+      expect(
+        wrapper
+          .find('TableChartRow Bar')
+          .at(0)
+          .prop('width')
+      ).toBe(40);
+
+      expect(
+        wrapper
+          .find('TableChartRow Name')
+          .at(1)
+          .text()
+      ).toBe('not billy');
+
+      expect(
+        wrapper
+          .find('TableChartRow CountColumn DeltaCaret')
+          .at(1)
+          .prop('direction')
+      ).toBeLessThan(0);
+
+      expect(
+        wrapper
+          .find('TableChartRow Bar')
+          .at(1)
+          .prop('width')
+      ).toBe(60);
+    });
+  });
+
+  describe('Without Previous Data', function() {
+    beforeEach(function() {
+      wrapper = mount(
+        <PercentageTableChart
+          title="User"
+          data={[
+            {
+              value: 40,
+              name: 'billy',
+              percentage: 40,
+            },
+            {
+              value: 60,
+              name: 'not billy',
+              percentage: 60,
+            },
+          ]}
+        />
+      );
+    });
+
+    it('renders data rows', function() {
+      expect(wrapper.find('TableChartRow')).toHaveLength(2);
+
+      expect(
+        wrapper
+          .find('TableChartRow Name')
+          .at(0)
+          .text()
+      ).toBe('billy');
+
+      expect(wrapper.find('TableChartRow CountColumn DeltaCaret')).toHaveLength(0);
+
+      expect(
+        wrapper
+          .find('TableChartRow Bar')
+          .at(0)
+          .prop('width')
+      ).toBe(40);
+
+      expect(
+        wrapper
+          .find('TableChartRow Name')
+          .at(1)
+          .text()
+      ).toBe('not billy');
+
+      expect(
+        wrapper
+          .find('TableChartRow Bar')
+          .at(1)
+          .prop('width')
+      ).toBe(60);
+    });
+  });
+});
