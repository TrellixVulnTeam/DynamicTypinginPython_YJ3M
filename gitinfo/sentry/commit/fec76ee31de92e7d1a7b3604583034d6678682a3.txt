commit fec76ee31de92e7d1a7b3604583034d6678682a3
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Mon Sep 23 12:41:47 2019 -0700

    fix(slack): Check plugin first before SentryApp (#14800)
    
    * fix(slack): Check plugin first before SentryApp

diff --git a/src/sentry/rules/actions/notify_event_service.py b/src/sentry/rules/actions/notify_event_service.py
index bbd88e93f3..6421d61310 100644
--- a/src/sentry/rules/actions/notify_event_service.py
+++ b/src/sentry/rules/actions/notify_event_service.py
@@ -47,6 +47,7 @@ class NotifyEventServiceAction(EventAction):
             self.logger.info("rules.fail.is_configured", extra=extra)
             return
 
+        plugin = None
         app = None
         try:
             app = SentryApp.objects.get(slug=service)
@@ -57,15 +58,18 @@ class NotifyEventServiceAction(EventAction):
             kwargs = {"sentry_app": app}
             metrics.incr("notifications.sent", instance=app.slug, skip_internal=False)
             yield self.future(notify_sentry_app, **kwargs)
-        else:
-            try:
-                plugin = plugins.get(service)
-            except KeyError:
-                # If we've removed the plugin no need to error, just skip.
+
+        try:
+            plugin = plugins.get(service)
+        except KeyError:
+            if not app:
+                # If we can't find the sentry app OR plugin,
+                # we've removed the plugin no need to error, just skip.
                 extra["plugin"] = service
                 self.logger.info("rules.fail.plugin_does_not_exist", extra=extra)
                 return
 
+        if plugin:
             if not plugin.is_enabled(self.project):
                 extra["project_id"] = self.project.id
                 self.logger.info("rules.fail.is_enabled", extra=extra)
diff --git a/src/sentry/tasks/sentry_apps.py b/src/sentry/tasks/sentry_apps.py
index 56ac950f47..dc45bf95fd 100644
--- a/src/sentry/tasks/sentry_apps.py
+++ b/src/sentry/tasks/sentry_apps.py
@@ -25,7 +25,7 @@ from sentry.models import (
 )
 from sentry.models.sentryapp import VALID_EVENTS
 
-logger = logging.Logger("sentry.tasks.sentry_apps")
+logger = logging.getLogger("sentry.tasks.sentry_apps")
 
 TASK_OPTIONS = {
     "queue": "app_platform",
diff --git a/tests/sentry/rules/actions/test_notify_event_service.py b/tests/sentry/rules/actions/test_notify_event_service.py
index 1a2fe4209f..4880b4bade 100644
--- a/tests/sentry/rules/actions/test_notify_event_service.py
+++ b/tests/sentry/rules/actions/test_notify_event_service.py
@@ -41,3 +41,24 @@ class NotifyEventServiceActionTest(RuleTestCase):
 
         assert len(results) is 1
         assert results[0].callback is notify_sentry_app
+
+    def test_notify_sentry_app_and_plugin_with_same_slug(self):
+        event = self.get_event()
+
+        self.create_sentry_app(organization=event.organization, name="Notify", is_alertable=True)
+
+        plugin = MagicMock()
+        plugin.is_enabled.return_value = True
+        plugin.should_notify.return_value = True
+
+        rule = self.get_rule(data={"service": "notify"})
+
+        with patch("sentry.plugins.plugins.get") as get_plugin:
+            get_plugin.return_value = plugin
+
+            results = list(rule.after(event=event, state=self.get_state()))
+
+        assert len(results) is 2
+        assert plugin.should_notify.call_count is 1
+        assert results[0].callback is notify_sentry_app
+        assert results[1].callback is plugin.rule_notify
