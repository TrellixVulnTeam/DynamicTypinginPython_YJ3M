commit beabb5ab5f39a60f3545b2f1650f6142f79d05a2
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Oct 9 11:25:12 2018 -0700

    feat(ui): Fallback to onboarding project for project avatars (ISSUE-121) (#10028)
    
    Attempt to get platforms based on recent events, but fallback to platform selected during onboarding if events do not exist

diff --git a/src/sentry/static/sentry/app/components/avatar/projectAvatar.jsx b/src/sentry/static/sentry/app/components/avatar/projectAvatar.jsx
index 8a5fbc3d1a..535d277f9a 100644
--- a/src/sentry/static/sentry/app/components/avatar/projectAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar/projectAvatar.jsx
@@ -10,10 +10,27 @@ class ProjectAvatar extends React.Component {
     ...BaseAvatar.propTypes,
   };
 
+  getPlatforms = project => {
+    // `platforms` is a list of platforms that come from events received in the project (in a certain timeframe)
+    // i.e. if you haven't received recent events with a platform, it could be an empty array.
+    if (project && project.platforms && project.platforms.length > 0) {
+      return project.platforms;
+    }
+
+    // `platform` is a user selectable option that is performed during the onboarding process. The reason why this
+    // is not the default is because there currently is no way to update it. Fallback to this if project does not
+    // have recent events with a platform.
+    if (project && project.platform) {
+      return [project.platform];
+    }
+
+    return [];
+  };
+
   render() {
     let {project, ...props} = this.props;
 
-    return <PlatformList platforms={(project && project.platforms) || []} {...props} />;
+    return <PlatformList platforms={this.getPlatforms(project)} {...props} />;
   }
 }
 export default ProjectAvatar;
diff --git a/tests/js/spec/components/avatar.spec.jsx b/tests/js/spec/components/avatar.spec.jsx
index d30c79d257..2f59d3b528 100644
--- a/tests/js/spec/components/avatar.spec.jsx
+++ b/tests/js/spec/components/avatar.spec.jsx
@@ -136,5 +136,28 @@ describe('Avatar', function() {
       expect(avatar.find('LetterAvatar').prop('displayName')).toBe('test organization');
       expect(avatar.find('LetterAvatar').prop('identifier')).toBe('test-organization');
     });
+
+    it('displays platform list icons for project Avatar', function() {
+      let project = TestStubs.Project({
+        platforms: ['python', 'javascript'],
+        platform: 'java',
+      });
+      let avatar = mount(<Avatar project={project} />);
+      expect(avatar.find('PlatformList').prop('platforms')).toEqual([
+        'python',
+        'javascript',
+      ]);
+    });
+
+    it('displays a fallback platform list for project Avatar using the `platform` specified during onboarding', function() {
+      let project = TestStubs.Project({platform: 'java'});
+      let avatar = mount(<Avatar project={project} />);
+      expect(avatar.find('PlatformList').prop('platforms')).toEqual(['java']);
+    });
+    it('uses onboarding project when platforms is an empty array', function() {
+      let project = TestStubs.Project({platforms: [], platform: 'java'});
+      let avatar = mount(<Avatar project={project} />);
+      expect(avatar.find('PlatformList').prop('platforms')).toEqual(['java']);
+    });
   });
 });
