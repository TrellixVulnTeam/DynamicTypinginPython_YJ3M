commit 048959680a6015f824ab708fd73e615c78d21e16
Author: David Cramer <dcramer@gmail.com>
Date:   Thu May 10 17:41:41 2012 -0500

    Add missing tests for RedisBuffer backend

diff --git a/tests/sentry/buffer/redis/tests.py b/tests/sentry/buffer/redis/tests.py
index 186c180b0d..301149f563 100644
--- a/tests/sentry/buffer/redis/tests.py
+++ b/tests/sentry/buffer/redis/tests.py
@@ -32,6 +32,11 @@ class RedisBufferTest(TestCase):
         filters = {'pk': 1}
         self.assertEquals(self.buf._make_key(Group, filters, column), 'sentry.group:88b48b31b5f100719c64316596b10b0f:times_seen')
 
+    def test_make_extra_key_response(self):
+        filters = {'pk': 1}
+        self.assertEquals(self.buf._make_extra_key(Group, filters), 'sentry.group:extra:88b48b31b5f100719c64316596b10b0f')
+
+    @mock.patch('sentry.buffer.redis.RedisBuffer._make_extra_key', mock.Mock(return_value='extra'))
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_key', mock.Mock(return_value='foo'))
     @mock.patch('sentry.buffer.base.maybe_delay')
     def test_incr_delays_task(self, maybe_delay):
@@ -41,6 +46,7 @@ class RedisBufferTest(TestCase):
         self.buf.incr(model, columns, filters)
         maybe_delay.assert_called_once_with(process_incr, model=model, columns=columns, filters=filters, extra=None)
 
+    @mock.patch('sentry.buffer.redis.RedisBuffer._make_extra_key', mock.Mock(return_value='extra'))
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_key', mock.Mock(return_value='foo'))
     @mock.patch('sentry.buffer.base.maybe_delay', mock.Mock())
     def test_incr_does_buffer_to_conn(self):
@@ -50,6 +56,7 @@ class RedisBufferTest(TestCase):
         self.buf.incr(model, columns, filters)
         self.assertEquals(self.buf.conn.get('foo'), '1')
 
+    @mock.patch('sentry.buffer.redis.RedisBuffer._make_extra_key', mock.Mock(return_value='extra'))
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_key', mock.Mock(return_value='foo'))
     @mock.patch('sentry.buffer.base.Buffer.process')
     def test_process_does_not_save_empty_results(self, process):
@@ -59,6 +66,7 @@ class RedisBufferTest(TestCase):
         self.buf.process(Group, columns, filters)
         self.assertFalse(process.called)
 
+    @mock.patch('sentry.buffer.redis.RedisBuffer._make_extra_key', mock.Mock(return_value='extra'))
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_key', mock.Mock(return_value='foo'))
     @mock.patch('sentry.buffer.base.Buffer.process')
     def test_process_does_save_call_with_results(self, process):
@@ -69,6 +77,7 @@ class RedisBufferTest(TestCase):
         self.buf.process(Group, columns, filters)
         process.assert_called_once_with(Group, {'times_seen': 2}, filters, None)
 
+    @mock.patch('sentry.buffer.redis.RedisBuffer._make_extra_key', mock.Mock(return_value='extra'))
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_key', mock.Mock(return_value='foo'))
     @mock.patch('sentry.buffer.base.Buffer.process')
     def test_process_does_clear_buffer(self, process):
@@ -79,6 +88,16 @@ class RedisBufferTest(TestCase):
         self.buf.process(Group, columns, filters)
         self.assertEquals(self.buf.conn.get('foo'), '0')
 
+    @mock.patch('sentry.buffer.redis.RedisBuffer._make_extra_key', mock.Mock(return_value='extra'))
+    @mock.patch('sentry.buffer.redis.RedisBuffer._make_key', mock.Mock(return_value='foo'))
+    @mock.patch('sentry.buffer.base.maybe_delay', mock.Mock())
+    def test_incr_does_buffer_extra_to_conn(self):
+        model = mock.Mock()
+        columns = {'times_seen': 1}
+        filters = {'pk': 1}
+        self.buf.incr(model, columns, filters, extra={'foo': 'bar'})
+        self.assertEquals(self.buf.conn.hget('extra', 'foo'), pickle.dumps('bar'))
+
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_key', mock.Mock(return_value='foo'))
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_extra_key', mock.Mock(return_value='extra'))
     def test_process_saves_extra(self):
