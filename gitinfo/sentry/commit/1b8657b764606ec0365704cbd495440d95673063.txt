commit 1b8657b764606ec0365704cbd495440d95673063
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Dec 2 16:53:16 2014 -0800

    Remove Project.owner

diff --git a/CHANGES b/CHANGES
index 2d7bbf0794..777853029f 100644
--- a/CHANGES
+++ b/CHANGES
@@ -15,6 +15,7 @@ Backwards Incompatible Changes
 - sentry.plugins.sentry_sites has been removed
 - The Search API has been rewritten and now powers the entire stream.
 - Removed Event.{logger,site,logger,level,culprit} references/columns. Legacy attributes for transitional behavior are available.
+- Removed Project.owner.
 
 Version 6.4.0
 -------------
diff --git a/docs/faq/index.rst b/docs/faq/index.rst
index 4a1d8a38f1..f0791e137c 100644
--- a/docs/faq/index.rst
+++ b/docs/faq/index.rst
@@ -43,7 +43,6 @@ How do I
 
      project = Project()
      project.team = team
-     project.owner = user
      project.name = 'Default'
      project.save()
 
diff --git a/src/sentry/api/endpoints/team_project_index.py b/src/sentry/api/endpoints/team_project_index.py
index 3e219da1b3..7dacf21e9f 100644
--- a/src/sentry/api/endpoints/team_project_index.py
+++ b/src/sentry/api/endpoints/team_project_index.py
@@ -40,7 +40,6 @@ class TeamProjectIndexEndpoint(Endpoint):
         if serializer.is_valid():
             project = serializer.object
             project.team = team
-            project.owner = team.owner
             project.save()
             return Response(serialize(project, request.user), status=201)
         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/management/commands/repair.py b/src/sentry/management/commands/repair.py
index 83531a2827..2249c41f62 100644
--- a/src/sentry/management/commands/repair.py
+++ b/src/sentry/management/commands/repair.py
@@ -39,9 +39,9 @@ class Command(BaseCommand):
         # Create teams for any projects that are missing them
         print("Creating missing teams on projects")
         for project in Project.objects.filter(team__isnull=True, owner__isnull=False):
+            # TODO(dcramer): this needs owners
             team = Team(
                 name=project.name,
-                owner=project.owner,
             )
             base_slug = slugify(team.name)
             slug = base_slug
diff --git a/src/sentry/migrations/0130_auto__del_field_project_owner.py b/src/sentry/migrations/0130_auto__del_field_project_owner.py
new file mode 100644
index 0000000000..ff4e3a006e
--- /dev/null
+++ b/src/sentry/migrations/0130_auto__del_field_project_owner.py
@@ -0,0 +1,313 @@
+# -*- coding: utf-8 -*-
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        # Deleting field 'Project.owner'
+        db.delete_column(u'sentry_project', 'owner_id')
+
+
+    def backwards(self, orm):
+        # Adding field 'Project.owner'
+        db.add_column(u'sentry_project', 'owner',
+                      self.gf('django.db.models.fields.related.ForeignKey')(related_name='sentry_owned_project_set', null=True, to=orm['sentry.User']),
+                      keep_default=False)
+
+
+    models = {
+        'sentry.accessgroup': {
+            'Meta': {'unique_together': "(('team', 'name'),)", 'object_name': 'AccessGroup'},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.User']", 'symmetrical': 'False'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Project']", 'symmetrical': 'False'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '50'})
+        },
+        'sentry.activity': {
+            'Meta': {'object_name': 'Activity'},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Event']", 'null': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
+        'sentry.alert': {
+            'Meta': {'object_name': 'Alert'},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'related_groups': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'related_alerts'", 'symmetrical': 'False', 'through': "orm['sentry.AlertRelatedGroup']", 'to': "orm['sentry.Group']"}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.alertrelatedgroup': {
+            'Meta': {'unique_together': "(('group', 'alert'),)", 'object_name': 'AlertRelatedGroup'},
+            'alert': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Alert']"}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'})
+        },
+        'sentry.broadcast': {
+            'Meta': {'object_name': 'Broadcast'},
+            'badge': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
+            'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.CharField', [], {'max_length': '256'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'", 'index_together': "(('group', 'datetime'),)"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent': ('django.db.models.fields.IntegerField', [], {'null': 'True'})
+        },
+        'sentry.eventmapping': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'EventMapping'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        'sentry.groupassignee': {
+            'Meta': {'object_name': 'GroupAssignee', 'db_table': "'sentry_groupasignee'"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'assignee_set'", 'unique': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'assignee_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_assignee_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.grouphash': {
+            'Meta': {'unique_together': "(('project', 'hash'),)", 'object_name': 'GroupHash'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.grouprulestatus': {
+            'Meta': {'unique_together': "(('rule', 'group'),)", 'object_name': 'GroupRuleStatus'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'rule': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Rule']"}),
+            'status': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'})
+        },
+        'sentry.groupseen': {
+            'Meta': {'unique_together': "(('user', 'group'),)", 'object_name': 'GroupSeen'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.User']", 'db_index': 'False'})
+        },
+        'sentry.grouptagkey': {
+            'Meta': {'unique_together': "(('project', 'group', 'key'),)", 'object_name': 'GroupTagKey'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'values_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.grouptagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'GroupTagValue', 'db_table': "'sentry_messagefiltervalue'"},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'grouptag'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'grouptag'", 'null': 'True', 'to': "orm['sentry.Project']"}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.lostpasswordhash': {
+            'Meta': {'object_name': 'LostPasswordHash'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.User']", 'unique': 'True'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'last_updated': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.pendingteammember': {
+            'Meta': {'unique_together': "(('team', 'email'),)", 'object_name': 'PendingTeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pending_member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '50'})
+        },
+        'sentry.project': {
+            'Meta': {'unique_together': "(('team', 'slug'),)", 'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'null': 'True'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Team']", 'null': 'True'})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'roles': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'}),
+            'user_added': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'keys_added_set'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.release': {
+            'Meta': {'unique_together': "(('project', 'version'),)", 'object_name': 'Release'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'version': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.rule': {
+            'Meta': {'object_name': 'Rule'},
+            'data': ('django.db.models.fields.TextField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.tagkey': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'TagKey', 'db_table': "'sentry_filterkey'"},
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'values_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.tagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'TagValue', 'db_table': "'sentry_filtervalue'"},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.team': {
+            'Meta': {'object_name': 'Team'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'team_memberships'", 'symmetrical': 'False', 'through': "orm['sentry.TeamMember']", 'to': "orm['sentry.User']"}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.User']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.teammember': {
+            'Meta': {'unique_together': "(('team', 'user'),)", 'object_name': 'TeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '50'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_teammember_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.user': {
+            'Meta': {'object_name': 'User', 'db_table': "'auth_user'"},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.User']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        }
+    }
+
+    complete_apps = ['sentry']
\ No newline at end of file
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 715c8b5b5f..6ac138c7ad 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -40,7 +40,6 @@ class Project(Model):
 
     slug = models.SlugField(null=True)
     name = models.CharField(max_length=200)
-    owner = models.ForeignKey(settings.AUTH_USER_MODEL, related_name="sentry_owned_project_set", null=True)
     team = models.ForeignKey('sentry.Team', null=True)
     public = models.BooleanField(default=False)
     date_added = models.DateTimeField(default=timezone.now)
diff --git a/src/sentry/receivers/core.py b/src/sentry/receivers/core.py
index 6217237b5b..3f3f78cfd2 100644
--- a/src/sentry/receivers/core.py
+++ b/src/sentry/receivers/core.py
@@ -8,8 +8,6 @@ from pkg_resources import parse_version as Version
 
 from sentry import options
 from sentry.constants import MEMBER_OWNER
-from sentry.db.models import update
-from sentry.db.models.utils import slugify_instance
 from sentry.models import (
     Project, User, Team, ProjectKey, UserOption, TagKey, TagValue,
     GroupTagValue, GroupTagKey, Activity, TeamMember, Alert)
@@ -70,7 +68,6 @@ def create_default_project(id, name, slug, verbosity=2, **kwargs):
         public=False,
         name=name,
         slug=slug,
-        owner=user,
         team=team,
         **kwargs
     )
@@ -103,7 +100,7 @@ def set_sentry_version(latest=None, **kwargs):
     options.set('sentry:latest_version', (latest or current))
 
 
-def create_team_and_keys_for_project(instance, created, **kwargs):
+def create_keys_for_project(instance, created, **kwargs):
     if not created or kwargs.get('raw'):
         return
 
@@ -112,15 +109,6 @@ def create_team_and_keys_for_project(instance, created, **kwargs):
             project=instance,
         )
 
-    if not instance.owner:
-        return
-
-    if not instance.team:
-        team = Team(owner=instance.owner, name=instance.name)
-        slugify_instance(team, instance.slug)
-        team.save()
-        update(instance, team=team)
-
 
 def create_team_member_for_owner(instance, created, **kwargs):
     if not created:
@@ -212,9 +200,9 @@ post_syncdb.connect(
     weak=False,
 )
 post_save.connect(
-    create_team_and_keys_for_project,
+    create_keys_for_project,
     sender=Project,
-    dispatch_uid="create_team_and_keys_for_project",
+    dispatch_uid="create_keys_for_project",
     weak=False,
 )
 post_save.connect(
diff --git a/src/sentry/templates/sentry/admin/projects/list.html b/src/sentry/templates/sentry/admin/projects/list.html
index 7dde721ec3..d41493729b 100644
--- a/src/sentry/templates/sentry/admin/projects/list.html
+++ b/src/sentry/templates/sentry/admin/projects/list.html
@@ -51,15 +51,6 @@
                                 {% else %}
                                     <strong>{{ project.slug }}</strong>
                                 {% endif %}
-                                {% if project.owner %}
-                                    <small>Owned by <a href="{% url 'sentry-admin-edit-user' project.owner.pk %}">
-                                        {% if project.owner.email %}
-                                            {{ project.owner.email }}
-                                        {% else %}
-                                            {{ project.owner.username }}
-                                        {% endif %}
-                                    </a></smalL>
-                                {% endif %}
                             </td>
                             <td style="text-align:center; vertical-align:middle;">
                                 {{ avg_events|small_count }}
diff --git a/src/sentry/templates/sentry/projects/base.html b/src/sentry/templates/sentry/projects/base.html
index c0ec39e8c4..fabe18c6d9 100644
--- a/src/sentry/templates/sentry/projects/base.html
+++ b/src/sentry/templates/sentry/projects/base.html
@@ -11,48 +11,4 @@
 {% block bodyclass %}{% endblock %}
 
 {% block main %}
-    <section class="body">
-        {% if PROJECT_LIST %}
-            <p>{% trans "The following is a list of projects that you are a member of." %}</p>
-            <table class="table table-striped">
-                <colgroup>
-                    <col>
-                    <col style="width:100px;">
-                    <col style="width:150px;">
-                    <col style="width:100px;">
-                </colgroup>
-                <thead>
-                    <tr>
-                        <th>{% trans "Name" %}</th>
-                        <th style="text-align:center;">{% trans "Membership" %}</th>
-                        <th style="text-align:center;">{% trans "Owner" %}</th>
-                        <th style="text-align:center;">{% trans "Status" %}</th>
-                    </tr>
-                </thead>
-                <tbody>
-                    {% for project in PROJECT_LIST %}
-                        <tr>
-                            <td>
-                                <a href="{% url 'sentry-manage-project' project.team.slug project.slug %}">{{ project.name }}</a><br/>
-                                {% if project.member_dsn %}
-                                    <small><code class="clippy">{{ project.member_dsn }}</code></small>
-                                {% endif %}
-                            </td>
-                            <td style="text-align:center;vertical-align:middle;">{{ project.member_type }}</td>
-                            <td style="text-align:center;vertical-align:middle;">
-                                {% if project.owner %}
-                                    {{ project.owner.username }}
-                                {% else %}
-                                    <em>{% trans "no owner" %}</em>
-                                {% endif %}
-                            </td>
-                            <td style="text-align:center;vertical-align:middle;">{{ project.get_status_display }}</td>
-                        </tr>
-                    {% endfor %}
-                </tbody>
-            </table>
-        {% else %}
-            <div class="alert alert-info">You do not have access to any projects. Would you like to <a href="{% url 'sentry-new-project' team.slug %}">create a new project</a>?</div>
-        {% endif %}
-    </section>
 {% endblock %}
diff --git a/src/sentry/templates/sentry/projects/list.html b/src/sentry/templates/sentry/projects/list.html
index 9c104c9c2d..ec7f14d6b5 100644
--- a/src/sentry/templates/sentry/projects/list.html
+++ b/src/sentry/templates/sentry/projects/list.html
@@ -23,7 +23,6 @@
                     <tr>
                         <th>{% trans "Name" %}</th>
                         <th style="text-align:center;">{% trans "Membership" %}</th>
-                        <th style="text-align:center;">{% trans "Owner" %}</th>
                         <th style="text-align:center;">{% trans "Status" %}</th>
                     </tr>
                 </thead>
@@ -37,13 +36,6 @@
                                 {% endif %}
                             </td>
                             <td style="text-align:center;vertical-align:middle;">{{ project.member_type }}</td>
-                            <td style="text-align:center;vertical-align:middle;">
-                                {% if project.owner %}
-                                    {{ project.owner.username }}
-                                {% else %}
-                                    <em>{% trans "no owner" %}</em>
-                                {% endif %}
-                            </td>
                             <td style="text-align:center;vertical-align:middle;">{{ project.get_status_display }}</td>
                         </tr>
                     {% endfor %}
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index e7c104f034..6380572d61 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -36,7 +36,8 @@ class Fixtures(object):
         return self.create_team(
             name='foo',
             slug='foo',
-            owner=self.user)
+            owner=self.user,
+        )
 
     @fixture
     def project(self):
@@ -44,7 +45,6 @@ class Fixtures(object):
             name='Bar',
             slug='bar',
             team=self.team,
-            owner=self.user,
         )
 
     @fixture
@@ -78,8 +78,6 @@ class Fixtures(object):
             kwargs['slug'] = slugify(six.text_type(kwargs['name']))
         if not kwargs.get('team'):
             kwargs['team'] = self.team
-        if not kwargs.get('owner'):
-            kwargs['owner'] = kwargs['team'].owner
 
         return Project.objects.create(**kwargs)
 
diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index cc2ddba165..1bf9ada68b 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -15,7 +15,8 @@ from sentry.constants import TAG_LABELS
 from sentry.models import Project, ProjectOption
 from sentry.permissions import can_set_public_projects
 from sentry.web.forms.fields import (
-    UserField, OriginsField, RangeField, get_team_choices)
+    OriginsField, RangeField, get_team_choices
+)
 
 
 BLANK_CHOICE = [("", "")]
@@ -75,8 +76,6 @@ class NewProjectForm(BaseProjectForm):
 
 
 class NewProjectAdminForm(NewProjectForm):
-    owner = UserField(required=False)
-
     class Meta:
         fields = ('name', 'platform')
         model = Project
@@ -96,10 +95,9 @@ class EditProjectForm(BaseProjectForm):
         help_text=_('Separate multiple entries with a newline.'))
     resolve_age = RangeField(help_text=_('Treat an event as resolved if it hasn\'t been seen for this amount of time.'),
         required=False, min_value=0, max_value=168, step_value=1)
-    owner = UserField(required=False)
 
     class Meta:
-        fields = ('name', 'platform', 'public', 'team', 'owner', 'slug')
+        fields = ('name', 'platform', 'public', 'team', 'slug')
         model = Project
 
     def __init__(self, request, team_list, data, instance, *args, **kwargs):
diff --git a/src/sentry/web/frontend/projects/settings.py b/src/sentry/web/frontend/projects/settings.py
index e38237bdf2..b1c383b830 100644
--- a/src/sentry/web/frontend/projects/settings.py
+++ b/src/sentry/web/frontend/projects/settings.py
@@ -30,11 +30,10 @@ def manage_project(request, team, project):
     if result is False and not request.user.is_superuser:
         return HttpResponseRedirect(reverse('sentry'))
 
-    team_list = Team.objects.get_for_user(project.owner or request.user, MEMBER_OWNER)
+    team_list = Team.objects.get_for_user(team.owner or request.user, MEMBER_OWNER)
 
     form = EditProjectForm(request, team_list, request.POST or None, instance=project, initial={
         'origins': '\n'.join(project.get_option('sentry:origins', None) or []),
-        'owner': project.owner,
         'resolve_age': int(project.get_option('sentry:resolve_age', 0)),
     })
 
diff --git a/src/sentry/web/frontend/teams.py b/src/sentry/web/frontend/teams.py
index 0be0a5f33e..2c0521d8e6 100644
--- a/src/sentry/web/frontend/teams.py
+++ b/src/sentry/web/frontend/teams.py
@@ -111,9 +111,6 @@ def manage_team(request, team):
                     'type': MEMBER_OWNER,
                 }
             )
-            team.project_set.update(
-                owner=team.owner,
-            )
 
         messages.add_message(request, messages.SUCCESS,
             _('Changes to your team were saved.'))
@@ -443,8 +440,6 @@ def create_new_team_project(request, team):
     if form.is_valid():
         project = form.save(commit=False)
         project.team = team
-        if not project.owner:
-            project.owner = request.user
         project.save()
 
         create_sample_event(project)
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index 0797d0ab5e..43de426a0a 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -15,7 +15,7 @@ from gzip import GzipFile
 from exam import fixture
 from raven import Client
 
-from sentry.models import Group, Event, Project, User
+from sentry.models import Group, Event, User
 from sentry.testutils import TestCase
 from sentry.testutils.helpers import get_auth_header
 from sentry.utils.compat import StringIO
@@ -76,7 +76,8 @@ class RavenIntegrationTest(TestCase):
     """
     def setUp(self):
         self.user = User.objects.create(username='coreapi')
-        self.project = Project.objects.create(owner=self.user, name='Foo', slug='bar')
+        self.team = self.create_team(owner=self.user)
+        self.project = self.create_project(team=self.team)
         self.pm = self.project.team.member_set.get_or_create(user=self.user)[0]
         self.pk = self.project.key_set.get_or_create(user=self.user)[0]
 
diff --git a/tests/sentry/api/endpoints/test_project_releases.py b/tests/sentry/api/endpoints/test_project_releases.py
index 828c68ca3a..6a3971cb33 100644
--- a/tests/sentry/api/endpoints/test_project_releases.py
+++ b/tests/sentry/api/endpoints/test_project_releases.py
@@ -9,8 +9,9 @@ class ProjectReleasesTest(APITestCase):
     def test_simple(self):
         self.login_as(user=self.user)
 
-        project1 = self.create_project(owner=self.user, name='foo')
-        project2 = self.create_project(owner=self.user, name='bar')
+        team = self.create_team(owner=self.user)
+        project1 = self.create_project(team=team, name='foo')
+        project2 = self.create_project(team=team, name='bar')
 
         release1 = Release.objects.create(
             project=project1,
diff --git a/tests/sentry/api/endpoints/test_project_stats.py b/tests/sentry/api/endpoints/test_project_stats.py
index 0e76e2e697..8acdd133e4 100644
--- a/tests/sentry/api/endpoints/test_project_stats.py
+++ b/tests/sentry/api/endpoints/test_project_stats.py
@@ -8,8 +8,10 @@ class ProjectStatsTest(APITestCase):
     def test_simple(self):
         self.login_as(user=self.user)
 
-        project1 = self.create_project(owner=self.user, name='foo')
-        project2 = self.create_project(owner=self.user, name='bar')
+        team = self.create_team(owner=self.user)
+
+        project1 = self.create_project(team=team, name='foo')
+        project2 = self.create_project(team=team, name='bar')
 
         tsdb.incr(tsdb.models.project, project1.id, count=3)
         tsdb.incr(tsdb.models.project, project2.id, count=5)
diff --git a/tests/sentry/api/endpoints/test_team_project_index.py b/tests/sentry/api/endpoints/test_team_project_index.py
index 4806c2638c..55524d6f38 100644
--- a/tests/sentry/api/endpoints/test_team_project_index.py
+++ b/tests/sentry/api/endpoints/test_team_project_index.py
@@ -37,5 +37,4 @@ class TeamProjectCreateTest(APITestCase):
         project = Project.objects.get(id=resp.data['id'])
         assert project.name == 'hello world'
         assert project.slug == 'foobar'
-        assert project.owner == self.user
         assert project.team == team
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index b34c479a48..e3fc6184e0 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -7,7 +7,7 @@ import mock
 from datetime import datetime
 from uuid import UUID
 
-from sentry.models import Project, User
+from sentry.models import User
 from sentry.exceptions import InvalidTimestamp
 from sentry.coreapi import (
     extract_auth_vars, project_from_auth_vars, APIForbidden, ensure_has_ip,
@@ -19,7 +19,8 @@ from sentry.testutils import TestCase
 class BaseAPITest(TestCase):
     def setUp(self):
         self.user = User.objects.create(username='coreapi')
-        self.project = Project.objects.create(owner=self.user, name='Foo', slug='bar')
+        self.team = self.create_team(name='Foo', owner=self.user)
+        self.project = self.create_project(name='Foo', slug='bar', team=self.team)
         self.pm = self.project.team.member_set.get_or_create(user=self.user)[0]
         self.pk = self.project.key_set.get_or_create(user=self.user)[0]
 
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 9e73e4096c..aa14bf9b80 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -45,7 +45,8 @@ class ProjectManagerTest(TestCase):
     def setUp(self):
         self.project = Project.objects.get()
         self.project.update(public=True)
-        self.project2 = Project.objects.create(name='Test', slug='test', owner=self.user, public=False)
+        self.team2 = self.create_team(owner=self.user)
+        self.project2 = self.create_project(team=self.team2, name='Test', public=False)
 
     @mock.patch('sentry.models.Team.objects.get_for_user', mock.Mock(return_value={}))
     def test_does_not_include_public_projects(self):
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index ffeb242adf..937e9ba579 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -67,15 +67,10 @@ class ProjectKeyTest(TestCase):
         with self.settings(SENTRY_ENDPOINT='http://endpoint.com'):
             self.assertEquals(key.get_dsn(), 'http://public:secret@endpoint.com/1')
 
-    def test_key_is_created_for_project_with_existing_team(self):
+    def test_key_is_created_for_project(self):
         user = User.objects.create(username='admin')
-        team = Team.objects.create(name='Test', slug='test', owner=user)
-        project = Project.objects.create(name='Test', slug='test', owner=user, team=team)
-        assert project.key_set.filter(user__isnull=True).exists() is True
-
-    def test_key_is_created_for_project_with_new_team(self):
-        user = User.objects.create(username='admin')
-        project = Project.objects.create(name='Test', slug='test', owner=user)
+        team = self.create_team(name='Test', owner=user)
+        project = self.create_project(name='Test', team=team)
         assert project.key_set.filter(user__isnull=True).exists() is True
 
 
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index be6c49e16c..acc59d7d24 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -155,22 +155,24 @@ class MailPluginTest(TestCase):
             self.team.name, self.project.name)
 
     def test_get_sendable_users(self):
-        from sentry.models import Project, UserOption, User
+        from sentry.models import UserOption, User
 
-        user = User.objects.create(username='foo', email='foo@example.com', is_active=True)
-        user2 = User.objects.create(username='baz', email='baz@example.com', is_active=True)
-        user3 = User.objects.create(username='baz2', email='bar@example.com', is_active=True)
+        user = self.create_user(email='foo@example.com', is_active=True)
+        user2 = self.create_user(email='baz@example.com', is_active=True)
+        user3 = self.create_user(email='baz2@example.com', is_active=True)
 
         # user with inactive account
-        User.objects.create(username='bar', email='bar@example.com', is_active=False)
+        self.create_user(email='bar@example.com', is_active=False)
         # user not in any groups
-        User.objects.create(username='bar2', email='bar@example.com', is_active=True)
+        self.create_user(email='bar2@example.com', is_active=True)
 
-        project = Project.objects.create(name='Test', slug='test', owner=user)
-        project.team.member_set.get_or_create(user=user)
-        project.team.member_set.get_or_create(user=user2)
+        team = self.create_team(owner=user)
 
-        ag = AccessGroup.objects.create(team=project.team)
+        project = self.create_project(name='Test', team=team)
+        team.member_set.get_or_create(user=user)
+        team.member_set.get_or_create(user=user2)
+
+        ag = AccessGroup.objects.create(team=team)
         ag.members.add(user3)
         ag.projects.add(project)
 
diff --git a/tests/sentry/receivers/test_core.py b/tests/sentry/receivers/test_core.py
index bb2868a9f0..931114a361 100644
--- a/tests/sentry/receivers/test_core.py
+++ b/tests/sentry/receivers/test_core.py
@@ -20,7 +20,6 @@ class CreateDefaultProjectsTest(TestCase):
         create_default_projects(created_models=[Project])
 
         project = Project.objects.get(id=settings.SENTRY_PROJECT)
-        assert project.owner == user
         assert project.public is False
         assert project.name == 'Backend'
         assert project.slug == 'backend'
@@ -46,7 +45,6 @@ class CreateDefaultProjectsTest(TestCase):
         user = User.objects.get(username='sentry')
 
         project = Project.objects.get(id=settings.SENTRY_PROJECT)
-        assert project.owner == user
         assert project.public is False
         assert project.name == 'Backend'
         assert project.slug == 'backend'
diff --git a/tests/sentry/signals/tests.py b/tests/sentry/signals/tests.py
index d36c2ace63..ddb64baa3a 100644
--- a/tests/sentry/signals/tests.py
+++ b/tests/sentry/signals/tests.py
@@ -3,16 +3,11 @@
 from __future__ import absolute_import
 
 from sentry.constants import MEMBER_OWNER
-from sentry.models import Project, Team, User
+from sentry.models import Team, User
 from sentry.testutils import TestCase
 
 
 class SentrySignalTest(TestCase):
-    def test_create_team_for_project(self):
-        user = User.objects.create(username='foo')
-        project = Project.objects.create(name='foo', owner=user, slug='foo')
-        self.assertNotEquals(project.team, None)
-
     def test_create_team_member_for_owner(self):
         user = User.objects.create(username='foo')
         team = Team.objects.create(name='foo', slug='foo', owner=user)
diff --git a/tests/sentry/utils/query/tests.py b/tests/sentry/utils/query/tests.py
index 6e0ee55ec6..b01a6da4ad 100644
--- a/tests/sentry/utils/query/tests.py
+++ b/tests/sentry/utils/query/tests.py
@@ -1,18 +1,16 @@
 from __future__ import absolute_import
 
-from sentry.models import User, Team, Project, AccessGroup
+from sentry.models import User, Team, AccessGroup
 from sentry.testutils import TestCase
 from sentry.utils.query import merge_into
 
 
 class MergeIntoTest(TestCase):
     def test_all_the_things(self):
-        user_1 = User.objects.create(username='original')
-        user_2 = User.objects.create(username='new')
-        team_1 = Team.objects.create(owner=user_1)
-        team_2 = Team.objects.create(owner=user_2)
-        project_1 = Project.objects.create(owner=user_1, team=team_1)
-        project_2 = Project.objects.create(owner=user_2, team=team_2)
+        user_1 = self.create_user('foo@example.com')
+        user_2 = self.create_user('bar@example.com')
+        team_1 = self.create_team(owner=user_1, name='foo')
+        team_2 = self.create_team(owner=user_2, name='bar')
         ag = AccessGroup.objects.create(team=team_2)
         ag.members.add(user_1)
         ag.members.add(user_2)
@@ -21,8 +19,6 @@ class MergeIntoTest(TestCase):
 
         assert Team.objects.get(id=team_1.id).owner == user_2
         assert Team.objects.get(id=team_2.id).owner == user_2
-        assert Project.objects.get(id=project_1.id).owner == user_2
-        assert Project.objects.get(id=project_2.id).owner == user_2
         assert list(ag.members.all()) == [user_2]
 
         # make sure we didn't remove the instance
