commit 237a6c5e902d00ebfced3c5c492a70828c6ba139
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Jul 24 10:15:35 2018 -0700

    feat(ui): Add `withApi` HoC (#9131)
    
    Add a HoC so that we can start removing ApiMixin

diff --git a/src/sentry/static/sentry/app/utils/withApi.jsx b/src/sentry/static/sentry/app/utils/withApi.jsx
new file mode 100644
index 0000000000..e68204d67c
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/withApi.jsx
@@ -0,0 +1,22 @@
+import React from 'react';
+
+import {Client} from 'app/api';
+
+/**
+ * HoC that provides "api" client when mounted, and clears API requests when component is unmounted
+ */
+const withApi = WrappedComponent =>
+  class extends React.Component {
+    constructor(props) {
+      super(props);
+      this.api = new Client();
+    }
+    componentWillUnmount() {
+      this.api.clear();
+    }
+    render() {
+      return <WrappedComponent api={this.api} {...this.props} />;
+    }
+  };
+
+export default withApi;
diff --git a/tests/js/spec/utils/withApi.spec.jsx b/tests/js/spec/utils/withApi.spec.jsx
new file mode 100644
index 0000000000..a6a67899a3
--- /dev/null
+++ b/tests/js/spec/utils/withApi.spec.jsx
@@ -0,0 +1,34 @@
+import {mount} from 'enzyme';
+import React from 'react';
+
+import withApi from 'app/utils/withApi';
+
+describe('withApi', function() {
+  let apiInstance;
+  const MyComponent = jest.fn(props => {
+    apiInstance = props.api;
+    return <div />;
+  });
+
+  it('renders MyComponent with an api prop', function() {
+    const MyComponentWithApi = withApi(MyComponent);
+    mount(<MyComponentWithApi />);
+    expect(MyComponent).toHaveBeenCalledWith(
+      expect.objectContaining({
+        api: expect.anything(),
+      }),
+      expect.anything()
+    );
+  });
+
+  it('cancels pending API requests when component is unmounted', function() {
+    const MyComponentWithApi = withApi(MyComponent);
+    const wrapper = mount(<MyComponentWithApi />);
+    jest.spyOn(apiInstance, 'clear');
+    expect(apiInstance.clear).not.toHaveBeenCalled();
+    wrapper.unmount();
+    expect(apiInstance.clear).toHaveBeenCalled();
+
+    apiInstance.clear.mockRestore();
+  });
+});
