commit a8b2411bc13a79427cffee88ee0eb5b2ef52aa58
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Aug 27 20:39:57 2015 +0200

    Big API doc update.

diff --git a/api-docs/cache/endpoints/delete-group-details.json b/api-docs/cache/endpoints/delete-group-details.json
index fbf9f0be4e..adcc88f05c 100644
--- a/api-docs/cache/endpoints/delete-group-details.json
+++ b/api-docs/cache/endpoints/delete-group-details.json
@@ -3,9 +3,14 @@
   "internal_path": "sentry.api.endpoints.group_details.GroupDetailsEndpoint:delete",
   "method": "DELETE",
   "path": "/api/0/groups/{group_id}/",
+  "scenarios": [
+    "DeleteAggregate"
+  ],
   "section": "events",
   "text": [
-    "Deletes an individual aggregate."
+    "Removes an individual aggregate.",
+    "",
+    ":pparam int group_id: the ID of the group to delete."
   ],
-  "title": "Delete an Aggregate"
+  "title": "Remove an Aggregate"
 }
diff --git a/api-docs/cache/endpoints/delete-organization-details.json b/api-docs/cache/endpoints/delete-organization-details.json
index ab8e55bca5..b6a95a7d6b 100644
--- a/api-docs/cache/endpoints/delete-organization-details.json
+++ b/api-docs/cache/endpoints/delete-organization-details.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.organization_details.OrganizationDetailsEndpoint:delete",
   "method": "DELETE",
   "path": "/api/0/organizations/{organization_slug}/",
+  "scenarios": [],
   "section": "organizations",
   "text": [
     "Schedules an organization for deletion.",
diff --git a/api-docs/cache/endpoints/delete-project-details.json b/api-docs/cache/endpoints/delete-project-details.json
index e8c445d107..50badcdbc4 100644
--- a/api-docs/cache/endpoints/delete-project-details.json
+++ b/api-docs/cache/endpoints/delete-project-details.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.project_details.ProjectDetailsEndpoint:delete",
   "method": "DELETE",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/",
+  "scenarios": [],
   "section": "projects",
   "text": [
     "Schedules a project for deletion.",
diff --git a/api-docs/cache/endpoints/delete-project-group-index.json b/api-docs/cache/endpoints/delete-project-group-index.json
index 83412ff297..102af4d53d 100644
--- a/api-docs/cache/endpoints/delete-project-group-index.json
+++ b/api-docs/cache/endpoints/delete-project-group-index.json
@@ -3,14 +3,26 @@
   "internal_path": "sentry.api.endpoints.project_group_index.ProjectGroupIndexEndpoint:delete",
   "method": "DELETE",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/groups/",
+  "scenarios": [
+    "BulkRemoveAggregates"
+  ],
   "section": "events",
   "text": [
-    "Permanently remove the given aggregates.",
+    "Permanently remove the given aggregates. The list of groups to",
+    "modify is given through the `id` query parameter.  It is repeated",
+    "for each group that should be removed.",
     "",
     "Only queries by 'id' are accepted.",
     "",
     "If any ids are out of scope this operation will succeed without",
-    "any data mutation."
+    "any data mutation.",
+    "",
+    ":qparam int id: a list of IDs of the groups to be removed.  This",
+    "                parameter shall be repeated for each group.",
+    ":pparam string organization_slug: the slug of the organization the",
+    "                                  groups belong to.",
+    ":pparam string project_slug: the slug of the project the groups",
+    "                             belong to."
   ],
   "title": "Bulk Remove a List of Aggregates"
 }
diff --git a/api-docs/cache/endpoints/delete-project-key-details.json b/api-docs/cache/endpoints/delete-project-key-details.json
index 1be88c735d..929b73b1ce 100644
--- a/api-docs/cache/endpoints/delete-project-key-details.json
+++ b/api-docs/cache/endpoints/delete-project-key-details.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.project_key_details.ProjectKeyDetailsEndpoint:delete",
   "method": "DELETE",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/keys/{key_id}/",
+  "scenarios": [],
   "section": "projects",
   "text": [
     "Delete a client key."
diff --git a/api-docs/cache/endpoints/delete-release-details.json b/api-docs/cache/endpoints/delete-release-details.json
index 3a0f07807a..7429be68f5 100644
--- a/api-docs/cache/endpoints/delete-release-details.json
+++ b/api-docs/cache/endpoints/delete-release-details.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.release_details.ReleaseDetailsEndpoint:delete",
   "method": "DELETE",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/releases/{version}/",
+  "scenarios": [],
   "section": "releases",
   "text": [
     "Permanently remove a release and all of its files."
diff --git a/api-docs/cache/endpoints/delete-release-file-details.json b/api-docs/cache/endpoints/delete-release-file-details.json
index 9b0b0993a7..bc60b63282 100644
--- a/api-docs/cache/endpoints/delete-release-file-details.json
+++ b/api-docs/cache/endpoints/delete-release-file-details.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.release_file_details.ReleaseFileDetailsEndpoint:delete",
   "method": "DELETE",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/releases/{version}/files/{file_id}/",
+  "scenarios": [],
   "section": "releases",
   "text": [
     "Permanently remove a file from a release.",
diff --git a/api-docs/cache/endpoints/delete-team-details.json b/api-docs/cache/endpoints/delete-team-details.json
index c07343c71b..5f51b2eb8a 100644
--- a/api-docs/cache/endpoints/delete-team-details.json
+++ b/api-docs/cache/endpoints/delete-team-details.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.team_details.TeamDetailsEndpoint:delete",
   "method": "DELETE",
   "path": "/api/0/teams/{organization_slug}/{team_slug}/",
+  "scenarios": [],
   "section": "teams",
   "text": [
     "Schedules a team for deletion.",
diff --git a/api-docs/cache/endpoints/get-group-details.json b/api-docs/cache/endpoints/get-group-details.json
index 3789b71f05..f1fbdcf0a3 100644
--- a/api-docs/cache/endpoints/get-group-details.json
+++ b/api-docs/cache/endpoints/get-group-details.json
@@ -3,6 +3,9 @@
   "internal_path": "sentry.api.endpoints.group_details.GroupDetailsEndpoint:get",
   "method": "GET",
   "path": "/api/0/groups/{group_id}/",
+  "scenarios": [
+    "RetrieveAggregate"
+  ],
   "section": "events",
   "text": [
     "Return details on an individual aggregate.  Aggregates are also",
@@ -10,7 +13,7 @@
     "the group (the bar graph), some overall numbers (number of comments,",
     "user reports) as well as the summarized event data.",
     "",
-    ".. sentry:api-scenario:: RetrieveAggregate"
+    ":pparam int group_id: the ID of the group to retrieve."
   ],
   "title": "Retrieve an Aggregate"
 }
diff --git a/api-docs/cache/endpoints/get-group-events-latest.json b/api-docs/cache/endpoints/get-group-events-latest.json
index 1fa8212908..adf4021b7c 100644
--- a/api-docs/cache/endpoints/get-group-events-latest.json
+++ b/api-docs/cache/endpoints/get-group-events-latest.json
@@ -3,9 +3,14 @@
   "internal_path": "sentry.api.endpoints.group_events_latest.GroupEventsLatestEndpoint:get",
   "method": "GET",
   "path": "/api/0/groups/{group_id}/events/latest/",
+  "scenarios": [
+    "GetLatestGroupSample"
+  ],
   "section": "events",
   "text": [
-    "Retrieves the details of the latest sample for an aggregate."
+    "Retrieves the details of the latest sample for an aggregate.",
+    "",
+    ":pparam int group_id: the ID of the group to get the latest sample of."
   ],
   "title": "Latest Sample"
 }
diff --git a/api-docs/cache/endpoints/get-group-events.json b/api-docs/cache/endpoints/get-group-events.json
index 87f0326ddb..1e95136bcb 100644
--- a/api-docs/cache/endpoints/get-group-events.json
+++ b/api-docs/cache/endpoints/get-group-events.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.group_events.GroupEventsEndpoint:get",
   "method": "GET",
   "path": "/api/0/groups/{group_id}/events/",
+  "scenarios": [],
   "section": "events",
   "text": [
     "This endpoint lists an aggregate's available samples."
diff --git a/api-docs/cache/endpoints/get-group-tag-key-details.json b/api-docs/cache/endpoints/get-group-tag-key-details.json
index d12b81ed8c..94d51b3add 100644
--- a/api-docs/cache/endpoints/get-group-tag-key-details.json
+++ b/api-docs/cache/endpoints/get-group-tag-key-details.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.group_tagkey_details.GroupTagKeyDetailsEndpoint:get",
   "method": "GET",
   "path": "/api/0/groups/{group_id}/tags/{key}/",
+  "scenarios": [],
   "section": "events",
   "text": [
     "Returns a list of details about the given tag key."
diff --git a/api-docs/cache/endpoints/get-group-tag-key-values.json b/api-docs/cache/endpoints/get-group-tag-key-values.json
index adfc2a8b3c..24a9d23525 100644
--- a/api-docs/cache/endpoints/get-group-tag-key-values.json
+++ b/api-docs/cache/endpoints/get-group-tag-key-values.json
@@ -3,9 +3,13 @@
   "internal_path": "sentry.api.endpoints.group_tagkey_values.GroupTagKeyValuesEndpoint:get",
   "method": "GET",
   "path": "/api/0/groups/{group_id}/tags/{key}/values/",
+  "scenarios": [],
   "section": "events",
   "text": [
-    "Return a list of values associated with this key."
+    "Return a list of values associated with this key.",
+    "",
+    ":pparam int group_id: the ID of the group to retrieve.",
+    ":pparam string key: the tag key to look the values up for."
   ],
   "title": "List a Tag's Values"
 }
diff --git a/api-docs/cache/endpoints/get-organization-details.json b/api-docs/cache/endpoints/get-organization-details.json
index 79fc891efd..b6368f91a4 100644
--- a/api-docs/cache/endpoints/get-organization-details.json
+++ b/api-docs/cache/endpoints/get-organization-details.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.organization_details.OrganizationDetailsEndpoint:get",
   "method": "GET",
   "path": "/api/0/organizations/{organization_slug}/",
+  "scenarios": [],
   "section": "organizations",
   "text": [
     "Return details on an individual organization including various details",
diff --git a/api-docs/cache/endpoints/get-organization-index.json b/api-docs/cache/endpoints/get-organization-index.json
index f43e252a2f..429b7d9298 100644
--- a/api-docs/cache/endpoints/get-organization-index.json
+++ b/api-docs/cache/endpoints/get-organization-index.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.organization_index.OrganizationIndexEndpoint:get",
   "method": "GET",
   "path": "/api/0/organizations/",
+  "scenarios": [],
   "section": "organizations",
   "text": [
     "Return a list of organizations available to the authenticated session."
diff --git a/api-docs/cache/endpoints/get-organization-projects.json b/api-docs/cache/endpoints/get-organization-projects.json
index dc35248058..2d3c9179f1 100644
--- a/api-docs/cache/endpoints/get-organization-projects.json
+++ b/api-docs/cache/endpoints/get-organization-projects.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.organization_projects.OrganizationProjectsEndpoint:get",
   "method": "GET",
   "path": "/api/0/organizations/{organization_slug}/projects/",
+  "scenarios": [],
   "section": "organizations",
   "text": [
     "Return a list of projects bound to a organization."
diff --git a/api-docs/cache/endpoints/get-organization-stats.json b/api-docs/cache/endpoints/get-organization-stats.json
index 274600c0d1..73d5411148 100644
--- a/api-docs/cache/endpoints/get-organization-stats.json
+++ b/api-docs/cache/endpoints/get-organization-stats.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.organization_stats.OrganizationStatsEndpoint:get",
   "method": "GET",
   "path": "/api/0/organizations/{organization_slug}/stats/",
+  "scenarios": [],
   "section": "organizations",
   "text": [
     "**Draft:** This endpoint may change in the future without notice.",
diff --git a/api-docs/cache/endpoints/get-organization-teams.json b/api-docs/cache/endpoints/get-organization-teams.json
index 1cbeee0380..12c22a3218 100644
--- a/api-docs/cache/endpoints/get-organization-teams.json
+++ b/api-docs/cache/endpoints/get-organization-teams.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.organization_teams.OrganizationTeamsEndpoint:get",
   "method": "GET",
   "path": "/api/0/organizations/{organization_slug}/teams/",
+  "scenarios": [],
   "section": "organizations",
   "text": [
     "Return a list of teams bound to a organization."
diff --git a/api-docs/cache/endpoints/get-project-details.json b/api-docs/cache/endpoints/get-project-details.json
index fabca7299a..6c35a4eefe 100644
--- a/api-docs/cache/endpoints/get-project-details.json
+++ b/api-docs/cache/endpoints/get-project-details.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.project_details.ProjectDetailsEndpoint:get",
   "method": "GET",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/",
+  "scenarios": [],
   "section": "projects",
   "text": [
     "Return details on an individual project."
diff --git a/api-docs/cache/endpoints/get-project-event-details.json b/api-docs/cache/endpoints/get-project-event-details.json
index 8485f863a7..cbb86c547d 100644
--- a/api-docs/cache/endpoints/get-project-event-details.json
+++ b/api-docs/cache/endpoints/get-project-event-details.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.project_event_details.ProjectEventDetailsEndpoint:get",
   "method": "GET",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/events/{event_id}/",
+  "scenarios": [],
   "section": "events",
   "text": [
     "Return details on an individual event."
diff --git a/api-docs/cache/endpoints/get-project-events.json b/api-docs/cache/endpoints/get-project-events.json
index 950d4d40bb..5bfd94ed7e 100644
--- a/api-docs/cache/endpoints/get-project-events.json
+++ b/api-docs/cache/endpoints/get-project-events.json
@@ -3,9 +3,17 @@
   "internal_path": "sentry.api.endpoints.project_events.ProjectEventsEndpoint:get",
   "method": "GET",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/events/",
+  "scenarios": [
+    "ListProjectAvailableSamples"
+  ],
   "section": "events",
   "text": [
-    "Return a list of sampled events bound to a project."
+    "Return a list of sampled events bound to a project.",
+    "",
+    ":pparam string organization_slug: the slug of the organization the",
+    "                                  groups belong to.",
+    ":pparam string project_slug: the slug of the project the groups",
+    "                             belong to."
   ],
   "title": "List a Project's Available Samples"
 }
diff --git a/api-docs/cache/endpoints/get-project-group-index.json b/api-docs/cache/endpoints/get-project-group-index.json
index f8a80bb753..c750d178b7 100644
--- a/api-docs/cache/endpoints/get-project-group-index.json
+++ b/api-docs/cache/endpoints/get-project-group-index.json
@@ -3,20 +3,31 @@
   "internal_path": "sentry.api.endpoints.project_group_index.ProjectGroupIndexEndpoint:get",
   "method": "GET",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/groups/",
+  "scenarios": [
+    "ListProjectAggregates"
+  ],
   "section": "events",
   "text": [
-    "Return a list of aggregates bound to a project.",
+    "Return a list of aggregates bound to a project.  All parameters are",
+    "supplied as query string parameters.",
     "",
-    "A default query of 'is:resolved' is applied. To return results",
-    "with other statuses send an new query value (i.e. ?query= for all",
+    "A default query of ``is:resolved`` is applied. To return results",
+    "with other statuses send an new query value (i.e. ``?query=`` for all",
     "results).",
     "",
-    "Any standard Sentry structured search query can be passed via the",
-    "``query`` parameter.",
-    "",
     "The ``statsPeriod`` parameter can be used to select the timeline",
     "stats which should be present. Possible values are: '' (disable),",
-    "'24h', '14d'"
+    "'24h', '14d'",
+    "",
+    ":qparam string statsPeriod: an optional stat period (can be one of",
+    "                            ``\"24h\"``, ``\"14d\"``, and ``\"\"``).",
+    ":qparam querystring query: an optional Sentry structured search",
+    "                           query.  If not provided an implied",
+    "                           ``\"is:resolved\"`` is assumed.)",
+    ":pparam string organization_slug: the slug of the organization the",
+    "                                  groups belong to.",
+    ":pparam string project_slug: the slug of the project the groups",
+    "                             belong to."
   ],
   "title": "List a Project's Aggregates"
 }
diff --git a/api-docs/cache/endpoints/get-project-keys.json b/api-docs/cache/endpoints/get-project-keys.json
index 937abe199d..baebc40bd1 100644
--- a/api-docs/cache/endpoints/get-project-keys.json
+++ b/api-docs/cache/endpoints/get-project-keys.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.project_keys.ProjectKeysEndpoint:get",
   "method": "GET",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/keys/",
+  "scenarios": [],
   "section": "projects",
   "text": [
     "Return a list of client keys bound to a project."
diff --git a/api-docs/cache/endpoints/get-project-releases.json b/api-docs/cache/endpoints/get-project-releases.json
index 37c9e52399..273164cad2 100644
--- a/api-docs/cache/endpoints/get-project-releases.json
+++ b/api-docs/cache/endpoints/get-project-releases.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.project_releases.ProjectReleasesEndpoint:get",
   "method": "GET",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/releases/",
+  "scenarios": [],
   "section": "releases",
   "text": [
     "Retrieve a list of releases for a given project.",
diff --git a/api-docs/cache/endpoints/get-project-stats.json b/api-docs/cache/endpoints/get-project-stats.json
index 88533a5632..cccead0e55 100644
--- a/api-docs/cache/endpoints/get-project-stats.json
+++ b/api-docs/cache/endpoints/get-project-stats.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.project_stats.ProjectStatsEndpoint:get",
   "method": "GET",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/stats/",
+  "scenarios": [],
   "section": "projects",
   "text": [
     "**Draft:** This endpoint may change in the future without notice.",
diff --git a/api-docs/cache/endpoints/get-project-tag-key-values.json b/api-docs/cache/endpoints/get-project-tag-key-values.json
index ea7a38bbed..51608316b4 100644
--- a/api-docs/cache/endpoints/get-project-tag-key-values.json
+++ b/api-docs/cache/endpoints/get-project-tag-key-values.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.project_tagkey_values.ProjectTagKeyValuesEndpoint:get",
   "method": "GET",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/tags/{key}/values/",
+  "scenarios": [],
   "section": "projects",
   "text": [
     "Return a list of values associated with this key."
diff --git a/api-docs/cache/endpoints/get-release-details.json b/api-docs/cache/endpoints/get-release-details.json
index 2d6e3f5312..59be821bce 100644
--- a/api-docs/cache/endpoints/get-release-details.json
+++ b/api-docs/cache/endpoints/get-release-details.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.release_details.ReleaseDetailsEndpoint:get",
   "method": "GET",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/releases/{version}/",
+  "scenarios": [],
   "section": "releases",
   "text": [
     "Return details on an individual release."
diff --git a/api-docs/cache/endpoints/get-release-file-details.json b/api-docs/cache/endpoints/get-release-file-details.json
index d139a91346..29f6916618 100644
--- a/api-docs/cache/endpoints/get-release-file-details.json
+++ b/api-docs/cache/endpoints/get-release-file-details.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.release_file_details.ReleaseFileDetailsEndpoint:get",
   "method": "GET",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/releases/{version}/files/{file_id}/",
+  "scenarios": [],
   "section": "releases",
   "text": [
     "Return details on an individual file within a release."
diff --git a/api-docs/cache/endpoints/get-release-files.json b/api-docs/cache/endpoints/get-release-files.json
index e678982d79..b6a2543f05 100644
--- a/api-docs/cache/endpoints/get-release-files.json
+++ b/api-docs/cache/endpoints/get-release-files.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.release_files.ReleaseFilesEndpoint:get",
   "method": "GET",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/releases/{version}/files/",
+  "scenarios": [],
   "section": "releases",
   "text": [
     "Retrieve a list of files for a given release."
diff --git a/api-docs/cache/endpoints/get-team-details.json b/api-docs/cache/endpoints/get-team-details.json
index 6e3ca21d1b..6d7cced60a 100644
--- a/api-docs/cache/endpoints/get-team-details.json
+++ b/api-docs/cache/endpoints/get-team-details.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.team_details.TeamDetailsEndpoint:get",
   "method": "GET",
   "path": "/api/0/teams/{organization_slug}/{team_slug}/",
+  "scenarios": [],
   "section": "teams",
   "text": [
     "Return details on an individual team.",
diff --git a/api-docs/cache/endpoints/get-team-project-index.json b/api-docs/cache/endpoints/get-team-project-index.json
index 3af82d12c8..275faa6975 100644
--- a/api-docs/cache/endpoints/get-team-project-index.json
+++ b/api-docs/cache/endpoints/get-team-project-index.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.team_project_index.TeamProjectIndexEndpoint:get",
   "method": "GET",
   "path": "/api/0/teams/{organization_slug}/{team_slug}/projects/",
+  "scenarios": [],
   "section": "teams",
   "text": [
     "Return a list of projects bound to a team.",
diff --git a/api-docs/cache/endpoints/get-team-stats.json b/api-docs/cache/endpoints/get-team-stats.json
index d1fe3f87ae..3dee62c38b 100644
--- a/api-docs/cache/endpoints/get-team-stats.json
+++ b/api-docs/cache/endpoints/get-team-stats.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.team_stats.TeamStatsEndpoint:get",
   "method": "GET",
   "path": "/api/0/teams/{organization_slug}/{team_slug}/stats/",
+  "scenarios": [],
   "section": "teams",
   "text": [
     "**Draft:** This endpoint may change in the future without notice.",
diff --git a/api-docs/cache/endpoints/post-organization-index.json b/api-docs/cache/endpoints/post-organization-index.json
index c13a1686ec..50c5e99979 100644
--- a/api-docs/cache/endpoints/post-organization-index.json
+++ b/api-docs/cache/endpoints/post-organization-index.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.organization_index.OrganizationIndexEndpoint:post",
   "method": "POST",
   "path": "/api/0/organizations/",
+  "scenarios": [],
   "section": "organizations",
   "text": [
     "Create a new organization."
diff --git a/api-docs/cache/endpoints/post-organization-teams.json b/api-docs/cache/endpoints/post-organization-teams.json
index d7294c65a7..ceb85133a1 100644
--- a/api-docs/cache/endpoints/post-organization-teams.json
+++ b/api-docs/cache/endpoints/post-organization-teams.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.organization_teams.OrganizationTeamsEndpoint:post",
   "method": "POST",
   "path": "/api/0/organizations/{organization_slug}/teams/",
+  "scenarios": [],
   "section": "organizations",
   "text": [
     "Create a new team bound to an organization."
diff --git a/api-docs/cache/endpoints/post-project-keys.json b/api-docs/cache/endpoints/post-project-keys.json
index 1029d194cc..a28fae05bc 100644
--- a/api-docs/cache/endpoints/post-project-keys.json
+++ b/api-docs/cache/endpoints/post-project-keys.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.project_keys.ProjectKeysEndpoint:post",
   "method": "POST",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/keys/",
+  "scenarios": [],
   "section": "projects",
   "text": [
     "Create a new client key bound to a project."
diff --git a/api-docs/cache/endpoints/post-project-releases.json b/api-docs/cache/endpoints/post-project-releases.json
index 1ea553ddec..5e4b15c8dc 100644
--- a/api-docs/cache/endpoints/post-project-releases.json
+++ b/api-docs/cache/endpoints/post-project-releases.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.project_releases.ProjectReleasesEndpoint:post",
   "method": "POST",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/releases/",
+  "scenarios": [],
   "section": "releases",
   "text": [
     "Create a new release for the given project."
diff --git a/api-docs/cache/endpoints/post-release-files.json b/api-docs/cache/endpoints/post-release-files.json
index 6b88172a7f..0946c5f4b9 100644
--- a/api-docs/cache/endpoints/post-release-files.json
+++ b/api-docs/cache/endpoints/post-release-files.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.release_files.ReleaseFilesEndpoint:post",
   "method": "POST",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/releases/{version}/files/",
+  "scenarios": [],
   "section": "releases",
   "text": [
     "Upload a new file for the given release.",
diff --git a/api-docs/cache/endpoints/post-team-project-index.json b/api-docs/cache/endpoints/post-team-project-index.json
index b788d7e38e..08c801e1b6 100644
--- a/api-docs/cache/endpoints/post-team-project-index.json
+++ b/api-docs/cache/endpoints/post-team-project-index.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.team_project_index.TeamProjectIndexEndpoint:post",
   "method": "POST",
   "path": "/api/0/teams/{organization_slug}/{team_slug}/projects/",
+  "scenarios": [],
   "section": "teams",
   "text": [
     "Create a new project bound to a team."
diff --git a/api-docs/cache/endpoints/put-group-details.json b/api-docs/cache/endpoints/put-group-details.json
index 8a443cb5a6..94b598c250 100644
--- a/api-docs/cache/endpoints/put-group-details.json
+++ b/api-docs/cache/endpoints/put-group-details.json
@@ -3,6 +3,9 @@
   "internal_path": "sentry.api.endpoints.group_details.GroupDetailsEndpoint:put",
   "method": "PUT",
   "path": "/api/0/groups/{group_id}/",
+  "scenarios": [
+    "UpdateAggregate"
+  ],
   "section": "events",
   "text": [
     "Updates an individual aggregate's attributes.  Only the attributes",
@@ -15,10 +18,8 @@
     "In case the API call is invoked in a user context, these",
     "attributes can also be modified:",
     "",
-    "- ``hasSeen``: `true`, false`",
-    "- ``isBookmarked``: `true`, false`",
-    "",
-    ".. sentry:api-scenario:: UpdateAggregate"
+    "- ``hasSeen``: `true`, `false`",
+    "- ``isBookmarked``: `true`, `false`"
   ],
   "title": "Update an Aggregate"
 }
diff --git a/api-docs/cache/endpoints/put-organization-details.json b/api-docs/cache/endpoints/put-organization-details.json
index 5afac29047..5e24889a7f 100644
--- a/api-docs/cache/endpoints/put-organization-details.json
+++ b/api-docs/cache/endpoints/put-organization-details.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.organization_details.OrganizationDetailsEndpoint:put",
   "method": "PUT",
   "path": "/api/0/organizations/{organization_slug}/",
+  "scenarios": [],
   "section": "organizations",
   "text": [
     "Update various attributes and configurable settings for the given",
diff --git a/api-docs/cache/endpoints/put-project-details.json b/api-docs/cache/endpoints/put-project-details.json
index fd7925b22d..7b6b82dc02 100644
--- a/api-docs/cache/endpoints/put-project-details.json
+++ b/api-docs/cache/endpoints/put-project-details.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.project_details.ProjectDetailsEndpoint:put",
   "method": "PUT",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/",
+  "scenarios": [],
   "section": "projects",
   "text": [
     "Update various attributes and configurable settings for the given",
diff --git a/api-docs/cache/endpoints/put-project-group-index.json b/api-docs/cache/endpoints/put-project-group-index.json
index e614d3563a..03b5f5d7e3 100644
--- a/api-docs/cache/endpoints/put-project-group-index.json
+++ b/api-docs/cache/endpoints/put-project-group-index.json
@@ -3,26 +3,52 @@
   "internal_path": "sentry.api.endpoints.project_group_index.ProjectGroupIndexEndpoint:put",
   "method": "PUT",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/groups/",
+  "scenarios": [
+    "BulkUpdateAggregates"
+  ],
   "section": "events",
   "text": [
-    "Bulk mutate various attributes on aggregates.",
-    "",
-    "- For non-status updates, the 'id' parameter is required.",
-    "- For status updates, the 'id' parameter may be omitted for a batch",
-    "  \"update all\" query.",
-    "- An optional 'status' parameter may be used to restrict mutations to",
-    "  only events with the given status.",
+    "Bulk mutate various attributes on aggregates.  The list of groups",
+    "to modify is given through the `id` query parameter.  It is repeated",
+    "for each group that should be modified.",
     "",
-    "Attributes:",
+    "- For non-status updates, the `id` query parameter is required.",
+    "- For status updates, the `id` query parameter may be omitted",
+    "  for a batch \"update all\" query.",
+    "- An optional `status` query parameter may be used to restrict",
+    "  mutations to only events with the given status.",
     "",
-    "- ``status``: resolved, unresolved, muted",
-    "- ``hasSeen``: true, false",
-    "- ``isBookmarked``: true, false",
-    "- ``isPublic``: true, false",
-    "- ``merge``: true, false",
+    "The following attributes can be modified and are supplied as",
+    "JSON object in the body:",
     "",
     "If any ids are out of scope this operation will succeed without",
-    "any data mutation."
+    "any data mutation.",
+    "",
+    ":qparam int id: a list of IDs of the groups to be mutated.  This",
+    "                parameter shall be repeated for each group.  It",
+    "                is optional only if a status is mutated in which",
+    "                case an implicit `update all` is assumed.",
+    ":qparam string status: optionally limits the query to groups of the",
+    "                       specified status.  Valid values are",
+    "                       ``\"resolved\"``, ``\"unresolved\"`` and",
+    "                       ``\"muted\"``.",
+    ":pparam string organization_slug: the slug of the organization the",
+    "                                  groups belong to.",
+    ":pparam string project_slug: the slug of the project the groups",
+    "                             belong to.",
+    ":param string status: the new status for the groups.  Valid values",
+    "                      are ``\"resolved\"``, ``\"unresolved\"`` and",
+    "                      ``\"muted\"``.",
+    ":param boolean isPublic: sets the group to public or private.",
+    ":param boolean merge: allows to merge or unmerge different groups.",
+    ":param boolean hasSeen: in case this API call is invoked with a user",
+    "                        context this allows changing of the flag",
+    "                        that indicates if the user has seen the",
+    "                        event.",
+    ":param boolean isBookmarked: in case this API call is invoked with a",
+    "                             user context this allows changing of",
+    "                             the bookmark flag.",
+    ":auth: required"
   ],
   "title": "Bulk Mutate a List of Aggregates"
 }
diff --git a/api-docs/cache/endpoints/put-project-key-details.json b/api-docs/cache/endpoints/put-project-key-details.json
index fbd2be58a9..112802f041 100644
--- a/api-docs/cache/endpoints/put-project-key-details.json
+++ b/api-docs/cache/endpoints/put-project-key-details.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.project_key_details.ProjectKeyDetailsEndpoint:put",
   "method": "PUT",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/keys/{key_id}/",
+  "scenarios": [],
   "section": "projects",
   "text": [
     "Update a client key."
diff --git a/api-docs/cache/endpoints/put-release-details.json b/api-docs/cache/endpoints/put-release-details.json
index 1daa0f8385..a80f786358 100644
--- a/api-docs/cache/endpoints/put-release-details.json
+++ b/api-docs/cache/endpoints/put-release-details.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.release_details.ReleaseDetailsEndpoint:put",
   "method": "PUT",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/releases/{version}/",
+  "scenarios": [],
   "section": "releases",
   "text": [
     "Update a release."
diff --git a/api-docs/cache/endpoints/put-release-file-details.json b/api-docs/cache/endpoints/put-release-file-details.json
index 8d9d8c3fec..ec1547ca73 100644
--- a/api-docs/cache/endpoints/put-release-file-details.json
+++ b/api-docs/cache/endpoints/put-release-file-details.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.release_file_details.ReleaseFileDetailsEndpoint:put",
   "method": "PUT",
   "path": "/api/0/projects/{organization_slug}/{project_slug}/releases/{version}/files/{file_id}/",
+  "scenarios": [],
   "section": "releases",
   "text": [
     "Update metadata about an existing file."
diff --git a/api-docs/cache/endpoints/put-team-details.json b/api-docs/cache/endpoints/put-team-details.json
index c3a68d9007..18fcb8060a 100644
--- a/api-docs/cache/endpoints/put-team-details.json
+++ b/api-docs/cache/endpoints/put-team-details.json
@@ -3,6 +3,7 @@
   "internal_path": "sentry.api.endpoints.team_details.TeamDetailsEndpoint:put",
   "method": "PUT",
   "path": "/api/0/teams/{organization_slug}/{team_slug}/",
+  "scenarios": [],
   "section": "teams",
   "text": [
     "Update various attributes and configurable settings for the given",
diff --git a/api-docs/cache/scenarios/BulkRemoveAggregates.json b/api-docs/cache/scenarios/BulkRemoveAggregates.json
new file mode 100644
index 0000000000..a34d37588f
--- /dev/null
+++ b/api-docs/cache/scenarios/BulkRemoveAggregates.json
@@ -0,0 +1,27 @@
+{
+  "ident": "BulkRemoveAggregates",
+  "requests": [
+    {
+      "request": {
+        "data": null,
+        "headers": {},
+        "method": "DELETE",
+        "path": "/api/0/projects/the-interstellar-jurisdiction/amazing-plumbing/groups/?id=6&id=5"
+      },
+      "response": {
+        "data": "",
+        "headers": {
+          "allow": "GET, PUT, DELETE, HEAD, OPTIONS",
+          "content-language": "en-us",
+          "content-length": "0",
+          "vary": "Accept-Language, Cookie"
+        },
+        "is_json": false,
+        "reason": "NO CONTENT",
+        "status": 204
+      }
+    }
+  ],
+  "text": [],
+  "title": null
+}
diff --git a/api-docs/cache/scenarios/BulkUpdateAggregates.json b/api-docs/cache/scenarios/BulkUpdateAggregates.json
new file mode 100644
index 0000000000..53d63fb53f
--- /dev/null
+++ b/api-docs/cache/scenarios/BulkUpdateAggregates.json
@@ -0,0 +1,35 @@
+{
+  "ident": "BulkUpdateAggregates",
+  "requests": [
+    {
+      "request": {
+        "data": {
+          "isPublic": false,
+          "status": "unresolved"
+        },
+        "headers": {
+          "Content-Type": "application/json"
+        },
+        "method": "PUT",
+        "path": "/api/0/projects/the-interstellar-jurisdiction/pump-station/groups/?id=2&id=1"
+      },
+      "response": {
+        "data": {
+          "isPublic": false,
+          "status": "unresolved"
+        },
+        "headers": {
+          "allow": "GET, PUT, DELETE, HEAD, OPTIONS",
+          "content-language": "en-us",
+          "content-type": "application/json",
+          "vary": "Accept-Language, Cookie"
+        },
+        "is_json": true,
+        "reason": "OK",
+        "status": 200
+      }
+    }
+  ],
+  "text": [],
+  "title": null
+}
diff --git a/api-docs/cache/scenarios/DeleteAggregate.json b/api-docs/cache/scenarios/DeleteAggregate.json
new file mode 100644
index 0000000000..c2e6bad319
--- /dev/null
+++ b/api-docs/cache/scenarios/DeleteAggregate.json
@@ -0,0 +1,26 @@
+{
+  "ident": "DeleteAggregate",
+  "requests": [
+    {
+      "request": {
+        "data": null,
+        "headers": {},
+        "method": "DELETE",
+        "path": "/api/0/groups/7/"
+      },
+      "response": {
+        "data": "",
+        "headers": {
+          "allow": "GET, PUT, DELETE, HEAD, OPTIONS",
+          "content-language": "en-us",
+          "vary": "Accept-Language, Cookie"
+        },
+        "is_json": false,
+        "reason": "ACCEPTED",
+        "status": 202
+      }
+    }
+  ],
+  "text": [],
+  "title": null
+}
diff --git a/api-docs/cache/scenarios/GetLatestGroupSample.json b/api-docs/cache/scenarios/GetLatestGroupSample.json
new file mode 100644
index 0000000000..ced4e95e58
--- /dev/null
+++ b/api-docs/cache/scenarios/GetLatestGroupSample.json
@@ -0,0 +1,509 @@
+{
+  "ident": "GetLatestGroupSample",
+  "requests": [
+    {
+      "request": {
+        "data": null,
+        "headers": {},
+        "method": "GET",
+        "path": "/api/0/groups/1/events/latest/"
+      },
+      "response": {
+        "data": {
+          "context": {
+            "emptyList": [],
+            "emptyMap": {},
+            "results": [
+              1,
+              2,
+              3,
+              4,
+              5
+            ],
+            "session": {
+              "foo": "bar"
+            }
+          },
+          "dateCreated": "2015-08-27T18:36:04Z",
+          "entries": [
+            {
+              "data": {
+                "context": [
+                  [
+                    11,
+                    "{% endif %}\n"
+                  ],
+                  [
+                    12,
+                    "<script src=\"{% static 'debug_toolbar/js/toolbar.js' %}\"></script>\n"
+                  ],
+                  [
+                    13,
+                    "<div id=\"djDebug\" hidden=\"hidden\" dir=\"ltr\"\n"
+                  ],
+                  [
+                    14,
+                    "     data-store-id=\"{{ toolbar.store_id }}\" data-render-panel-url=\"{% url 'djdt:render_panel' %}\"\n"
+                  ],
+                  [
+                    15,
+                    "     {{ toolbar.config.ROOT_TAG_EXTRA_ATTRS|safe }}>\n"
+                  ],
+                  [
+                    16,
+                    "\t<div hidden=\"hidden\" id=\"djDebugToolbar\">\n"
+                  ],
+                  [
+                    17,
+                    "\t\t<ul id=\"djDebugPanelList\">\n"
+                  ]
+                ],
+                "filename": "debug_toolbar/base.html",
+                "lineNo": 14
+              },
+              "type": "template"
+            },
+            {
+              "data": {
+                "frames": [
+                  {
+                    "absPath": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/base.py",
+                    "colNo": null,
+                    "context": [
+                      [
+                        298,
+                        "                frames = stack"
+                      ],
+                      [
+                        299,
+                        ""
+                      ],
+                      [
+                        300,
+                        "            data.update({"
+                      ],
+                      [
+                        301,
+                        "                'sentry.interfaces.Stacktrace': {"
+                      ],
+                      [
+                        302,
+                        "                    'frames': get_stack_info(frames,"
+                      ],
+                      [
+                        303,
+                        "                        transformer=self.transform)"
+                      ],
+                      [
+                        304,
+                        "                },"
+                      ],
+                      [
+                        305,
+                        "            })"
+                      ],
+                      [
+                        306,
+                        ""
+                      ],
+                      [
+                        307,
+                        "        if 'sentry.interfaces.Stacktrace' in data:"
+                      ],
+                      [
+                        308,
+                        "            if self.include_paths:"
+                      ]
+                    ],
+                    "errors": null,
+                    "filename": "raven/base.py",
+                    "function": "build_msg",
+                    "inApp": false,
+                    "lineNo": 303,
+                    "module": "raven.base",
+                    "vars": {
+                      "'culprit'": null,
+                      "'data'": {
+                        "'message'": "u'This is a test message generated using ``raven test``'",
+                        "'sentry.interfaces.Message'": {
+                          "'message'": "u'This is a test message generated using ``raven test``'",
+                          "'params'": []
+                        }
+                      },
+                      "'date'": "datetime.datetime(2013, 8, 13, 3, 8, 24, 880386)",
+                      "'event_id'": "'54a322436e1b47b88e239b78998ae742'",
+                      "'event_type'": "'raven.events.Message'",
+                      "'extra'": {
+                        "'loadavg'": [
+                          0.37255859375,
+                          0.5341796875,
+                          0.62939453125
+                        ],
+                        "'user'": "'dcramer'"
+                      },
+                      "'frames'": "<generator object iter_stack_frames at 0x107bcc3c0>",
+                      "'handler'": "<raven.events.Message object at 0x107bd0890>",
+                      "'k'": "'sentry.interfaces.Message'",
+                      "'kwargs'": {
+                        "'level'": 20,
+                        "'message'": "'This is a test message generated using ``raven test``'"
+                      },
+                      "'public_key'": null,
+                      "'result'": {
+                        "'message'": "u'This is a test message generated using ``raven test``'",
+                        "'sentry.interfaces.Message'": {
+                          "'message'": "u'This is a test message generated using ``raven test``'",
+                          "'params'": []
+                        }
+                      },
+                      "'self'": "<raven.base.Client object at 0x107bb8210>",
+                      "'stack'": true,
+                      "'tags'": null,
+                      "'time_spent'": null,
+                      "'v'": {
+                        "'message'": "u'This is a test message generated using ``raven test``'",
+                        "'params'": []
+                      }
+                    }
+                  },
+                  {
+                    "absPath": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/base.py",
+                    "colNo": null,
+                    "context": [
+                      [
+                        454,
+                        "        if not self.is_enabled():"
+                      ],
+                      [
+                        455,
+                        "            return"
+                      ],
+                      [
+                        456,
+                        ""
+                      ],
+                      [
+                        457,
+                        "        data = self.build_msg("
+                      ],
+                      [
+                        458,
+                        "            event_type, data, date, time_spent, extra, stack, tags=tags,"
+                      ],
+                      [
+                        459,
+                        "            **kwargs)"
+                      ],
+                      [
+                        460,
+                        ""
+                      ],
+                      [
+                        461,
+                        "        self.send(**data)"
+                      ],
+                      [
+                        462,
+                        ""
+                      ],
+                      [
+                        463,
+                        "        return (data.get('event_id'),)"
+                      ],
+                      [
+                        464,
+                        ""
+                      ]
+                    ],
+                    "errors": null,
+                    "filename": "raven/base.py",
+                    "function": "capture",
+                    "inApp": false,
+                    "lineNo": 459,
+                    "module": "raven.base",
+                    "vars": {
+                      "'data'": null,
+                      "'date'": null,
+                      "'event_type'": "'raven.events.Message'",
+                      "'extra'": {
+                        "'loadavg'": [
+                          0.37255859375,
+                          0.5341796875,
+                          0.62939453125
+                        ],
+                        "'user'": "'dcramer'"
+                      },
+                      "'kwargs'": {
+                        "'level'": 20,
+                        "'message'": "'This is a test message generated using ``raven test``'"
+                      },
+                      "'self'": "<raven.base.Client object at 0x107bb8210>",
+                      "'stack'": true,
+                      "'tags'": null,
+                      "'time_spent'": null
+                    }
+                  },
+                  {
+                    "absPath": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/base.py",
+                    "colNo": null,
+                    "context": [
+                      [
+                        572,
+                        "        \"\"\""
+                      ],
+                      [
+                        573,
+                        "        Creates an event from ``message``."
+                      ],
+                      [
+                        574,
+                        ""
+                      ],
+                      [
+                        575,
+                        "        >>> client.captureMessage('My event just happened!')"
+                      ],
+                      [
+                        576,
+                        "        \"\"\""
+                      ],
+                      [
+                        577,
+                        "        return self.capture('raven.events.Message', message=message, **kwargs)"
+                      ],
+                      [
+                        578,
+                        ""
+                      ],
+                      [
+                        579,
+                        "    def captureException(self, exc_info=None, **kwargs):"
+                      ],
+                      [
+                        580,
+                        "        \"\"\""
+                      ],
+                      [
+                        581,
+                        "        Creates an event from an exception."
+                      ],
+                      [
+                        582,
+                        ""
+                      ]
+                    ],
+                    "errors": null,
+                    "filename": "raven/base.py",
+                    "function": "captureMessage",
+                    "inApp": false,
+                    "lineNo": 577,
+                    "module": "raven.base",
+                    "vars": {
+                      "'kwargs'": {
+                        "'data'": null,
+                        "'extra'": {
+                          "'loadavg'": [
+                            0.37255859375,
+                            0.5341796875,
+                            0.62939453125
+                          ],
+                          "'user'": "'dcramer'"
+                        },
+                        "'level'": 20,
+                        "'stack'": true,
+                        "'tags'": null
+                      },
+                      "'message'": "'This is a test message generated using ``raven test``'",
+                      "'self'": "<raven.base.Client object at 0x107bb8210>"
+                    }
+                  },
+                  {
+                    "absPath": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/scripts/runner.py",
+                    "colNo": null,
+                    "context": [
+                      [
+                        72,
+                        "        level=logging.INFO,"
+                      ],
+                      [
+                        73,
+                        "        stack=True,"
+                      ],
+                      [
+                        74,
+                        "        tags=options.get('tags', {}),"
+                      ],
+                      [
+                        75,
+                        "        extra={"
+                      ],
+                      [
+                        76,
+                        "            'user': get_uid(),"
+                      ],
+                      [
+                        77,
+                        "            'loadavg': get_loadavg(),"
+                      ],
+                      [
+                        78,
+                        "        },"
+                      ],
+                      [
+                        79,
+                        "    ))"
+                      ],
+                      [
+                        80,
+                        ""
+                      ],
+                      [
+                        81,
+                        "    if client.state.did_fail():"
+                      ],
+                      [
+                        82,
+                        "        print('error!')"
+                      ]
+                    ],
+                    "errors": null,
+                    "filename": "raven/scripts/runner.py",
+                    "function": "send_test_message",
+                    "inApp": false,
+                    "lineNo": 77,
+                    "module": "raven.scripts.runner",
+                    "vars": {
+                      "'client'": "<raven.base.Client object at 0x107bb8210>",
+                      "'data'": null,
+                      "'k'": "'secret_key'",
+                      "'options'": {
+                        "'data'": null,
+                        "'tags'": null
+                      }
+                    }
+                  },
+                  {
+                    "absPath": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/scripts/runner.py",
+                    "colNo": null,
+                    "context": [
+                      [
+                        107,
+                        "    print(\"Using DSN configuration:\")"
+                      ],
+                      [
+                        108,
+                        "    print(\" \", dsn)"
+                      ],
+                      [
+                        109,
+                        "    print()"
+                      ],
+                      [
+                        110,
+                        ""
+                      ],
+                      [
+                        111,
+                        "    client = Client(dsn, include_paths=['raven'])"
+                      ],
+                      [
+                        112,
+                        "    send_test_message(client, opts.__dict__)"
+                      ]
+                    ],
+                    "errors": null,
+                    "filename": "raven/scripts/runner.py",
+                    "function": "main",
+                    "inApp": false,
+                    "lineNo": 112,
+                    "module": "raven.scripts.runner",
+                    "vars": {
+                      "'args'": [
+                        "'test'",
+                        "'https://ebc35f33e151401f9deac549978bda11:f3403f81e12e4c24942d505f086b2cad@app.getsentry.com/1'"
+                      ],
+                      "'client'": "<raven.base.Client object at 0x107bb8210>",
+                      "'dsn'": "'https://ebc35f33e151401f9deac549978bda11:f3403f81e12e4c24942d505f086b2cad@app.getsentry.com/1'",
+                      "'opts'": "<Values at 0x107ba3b00: {'data': None, 'tags': None}>",
+                      "'parser'": "<optparse.OptionParser instance at 0x107ba3368>",
+                      "'root'": "<logging.Logger object at 0x107ba5b10>"
+                    }
+                  }
+                ],
+                "framesOmitted": null
+              },
+              "type": "stacktrace"
+            },
+            {
+              "data": {
+                "cookies": null,
+                "data": "{\"hello\": \"world\"}",
+                "env": null,
+                "fragment": "",
+                "headers": {
+                  "Content-Type": "application/json",
+                  "Referer": "http://example.com",
+                  "User-Agent": "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36"
+                },
+                "method": "GET",
+                "query": "foo=bar",
+                "url": "http://example.com/foo"
+              },
+              "type": "request"
+            }
+          ],
+          "errors": [],
+          "eventID": "9c98100ee1464abdad072045d5ff3d32",
+          "groupID": 1,
+          "id": "1",
+          "message": "This is an example Python exception",
+          "nextEventID": null,
+          "packages": {
+            "my.package": "1.0.0"
+          },
+          "platform": "python",
+          "previousEventID": null,
+          "release": {
+            "data": {},
+            "dateCreated": "2015-08-27T18:36:04.555Z",
+            "dateReleased": null,
+            "dateStarted": null,
+            "firstEvent": null,
+            "lastEvent": null,
+            "newGroups": 0,
+            "ref": null,
+            "shortVersion": "d1f60347554a",
+            "url": null,
+            "version": "d1f60347554a5d9912804637a1eb2fa97fedff75"
+          },
+          "size": 6705,
+          "tags": {
+            "browser": "Chrome 28.0",
+            "device": "Other",
+            "level": "error",
+            "os": "Windows 8",
+            "sentry:release": "d1f60347554a5d9912804637a1eb2fa97fedff75",
+            "url": "http://example.com/foo"
+          },
+          "timeSpent": null,
+          "user": {
+            "email": "foo@example.com",
+            "id": "1671",
+            "username": "getsentry"
+          }
+        },
+        "headers": {
+          "allow": "GET, HEAD, OPTIONS",
+          "content-language": "en-us",
+          "content-type": "application/json",
+          "vary": "Accept-Language, Cookie"
+        },
+        "is_json": true,
+        "reason": "OK",
+        "status": 200
+      }
+    }
+  ],
+  "text": [],
+  "title": null
+}
diff --git a/api-docs/cache/scenarios/ListProjectAggregates.json b/api-docs/cache/scenarios/ListProjectAggregates.json
new file mode 100644
index 0000000000..77084e2786
--- /dev/null
+++ b/api-docs/cache/scenarios/ListProjectAggregates.json
@@ -0,0 +1,287 @@
+{
+  "ident": "ListProjectAggregates",
+  "requests": [
+    {
+      "request": {
+        "data": null,
+        "headers": {},
+        "method": "GET",
+        "path": "/api/0/projects/the-interstellar-jurisdiction/pump-station/groups/?statsPeriod=24h"
+      },
+      "response": {
+        "data": [
+          {
+            "annotations": [],
+            "assignedTo": null,
+            "count": "1",
+            "culprit": "javax.servlet.ServletException",
+            "firstSeen": "2015-08-27T18:36:06Z",
+            "hasSeen": false,
+            "id": "2",
+            "isBookmarked": false,
+            "isPublic": false,
+            "lastSeen": "2015-08-27T18:36:06Z",
+            "level": "error",
+            "logger": null,
+            "numComments": 0,
+            "permalink": "https://app.getsentry.com/the-interstellar-jurisdiction/pump-station/group/2/",
+            "project": {
+              "name": "Pump Station",
+              "slug": "pump-station"
+            },
+            "shareId": "322e32",
+            "stats": {
+              "24h": [
+                [
+                  1440612000,
+                  15174
+                ],
+                [
+                  1440615600,
+                  13641
+                ],
+                [
+                  1440619200,
+                  14216
+                ],
+                [
+                  1440622800,
+                  14121
+                ],
+                [
+                  1440626400,
+                  12480
+                ],
+                [
+                  1440630000,
+                  12812
+                ],
+                [
+                  1440633600,
+                  12700
+                ],
+                [
+                  1440637200,
+                  13711
+                ],
+                [
+                  1440640800,
+                  15791
+                ],
+                [
+                  1440644400,
+                  13457
+                ],
+                [
+                  1440648000,
+                  12886
+                ],
+                [
+                  1440651600,
+                  13985
+                ],
+                [
+                  1440655200,
+                  12904
+                ],
+                [
+                  1440658800,
+                  13676
+                ],
+                [
+                  1440662400,
+                  14877
+                ],
+                [
+                  1440666000,
+                  16004
+                ],
+                [
+                  1440669600,
+                  13009
+                ],
+                [
+                  1440673200,
+                  9560
+                ],
+                [
+                  1440676800,
+                  8629
+                ],
+                [
+                  1440680400,
+                  8909
+                ],
+                [
+                  1440684000,
+                  8754
+                ],
+                [
+                  1440687600,
+                  7340
+                ],
+                [
+                  1440691200,
+                  8454
+                ],
+                [
+                  1440694800,
+                  11259
+                ],
+                [
+                  1440698400,
+                  9022
+                ]
+              ]
+            },
+            "status": "unresolved",
+            "tags": {},
+            "timeSpent": null,
+            "title": "This is an example Java exception"
+          },
+          {
+            "annotations": [],
+            "assignedTo": null,
+            "count": "1",
+            "culprit": "raven.scripts.runner in main",
+            "firstSeen": "2015-08-27T18:36:04Z",
+            "hasSeen": false,
+            "id": "1",
+            "isBookmarked": false,
+            "isPublic": false,
+            "lastSeen": "2015-08-27T18:36:04Z",
+            "level": "error",
+            "logger": null,
+            "numComments": 0,
+            "permalink": "https://app.getsentry.com/the-interstellar-jurisdiction/pump-station/group/1/",
+            "project": {
+              "name": "Pump Station",
+              "slug": "pump-station"
+            },
+            "shareId": "322e31",
+            "stats": {
+              "24h": [
+                [
+                  1440612000,
+                  14059
+                ],
+                [
+                  1440615600,
+                  15258
+                ],
+                [
+                  1440619200,
+                  15693
+                ],
+                [
+                  1440622800,
+                  14020
+                ],
+                [
+                  1440626400,
+                  14830
+                ],
+                [
+                  1440630000,
+                  15685
+                ],
+                [
+                  1440633600,
+                  12746
+                ],
+                [
+                  1440637200,
+                  12680
+                ],
+                [
+                  1440640800,
+                  14078
+                ],
+                [
+                  1440644400,
+                  15456
+                ],
+                [
+                  1440648000,
+                  14726
+                ],
+                [
+                  1440651600,
+                  11834
+                ],
+                [
+                  1440655200,
+                  13315
+                ],
+                [
+                  1440658800,
+                  13340
+                ],
+                [
+                  1440662400,
+                  12514
+                ],
+                [
+                  1440666000,
+                  13276
+                ],
+                [
+                  1440669600,
+                  11594
+                ],
+                [
+                  1440673200,
+                  9433
+                ],
+                [
+                  1440676800,
+                  7218
+                ],
+                [
+                  1440680400,
+                  7804
+                ],
+                [
+                  1440684000,
+                  10991
+                ],
+                [
+                  1440687600,
+                  8282
+                ],
+                [
+                  1440691200,
+                  8321
+                ],
+                [
+                  1440694800,
+                  10036
+                ],
+                [
+                  1440698400,
+                  10478
+                ]
+              ]
+            },
+            "status": "unresolved",
+            "tags": {},
+            "timeSpent": null,
+            "title": "This is an example Python exception"
+          }
+        ],
+        "headers": {
+          "allow": "GET, PUT, DELETE, HEAD, OPTIONS",
+          "content-language": "en-us",
+          "content-type": "application/json",
+          "link": "<https://app.getsentry.com/api/0/projects/the-interstellar-jurisdiction/pump-station/groups/?statsPeriod=24h&cursor=1440700566:0:1>; rel=\"previous\"; results=\"false\"; cursor=\"1440700566:0:1\", <https://app.getsentry.com/api/0/projects/the-interstellar-jurisdiction/pump-station/groups/?statsPeriod=24h&cursor=1440700564:0:0>; rel=\"next\"; results=\"false\"; cursor=\"1440700564:0:0\"",
+          "vary": "Accept-Language, Cookie"
+        },
+        "is_json": true,
+        "reason": "OK",
+        "status": 200
+      }
+    }
+  ],
+  "text": [],
+  "title": null
+}
diff --git a/api-docs/cache/scenarios/ListProjectAvailableSamples.json b/api-docs/cache/scenarios/ListProjectAvailableSamples.json
new file mode 100644
index 0000000000..b6b0dee43d
--- /dev/null
+++ b/api-docs/cache/scenarios/ListProjectAvailableSamples.json
@@ -0,0 +1,956 @@
+{
+  "ident": "ListProjectAvailableSamples",
+  "requests": [
+    {
+      "request": {
+        "data": null,
+        "headers": {},
+        "method": "GET",
+        "path": "/api/0/projects/the-interstellar-jurisdiction/pump-station/events/"
+      },
+      "response": {
+        "data": [
+          {
+            "context": {
+              "emptyList": [],
+              "emptyMap": {},
+              "results": [
+                1,
+                2,
+                3,
+                4,
+                5
+              ],
+              "session": {
+                "foo": "bar"
+              }
+            },
+            "dateCreated": "2015-08-27T18:36:06Z",
+            "entries": [
+              {
+                "data": {
+                  "excOmitted": null,
+                  "hasSystemFrames": false,
+                  "values": [
+                    {
+                      "module": null,
+                      "stacktrace": {
+                        "frames": [
+                          {
+                            "absPath": "QueuedThreadPool.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "QueuedThreadPool.java",
+                            "function": "run",
+                            "inApp": true,
+                            "lineNo": 582,
+                            "module": "org.mortbay.thread.QueuedThreadPool$PoolThread",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "SocketConnector.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "SocketConnector.java",
+                            "function": "run",
+                            "inApp": true,
+                            "lineNo": 228,
+                            "module": "org.mortbay.jetty.bio.SocketConnector$Connection",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "HttpConnection.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "HttpConnection.java",
+                            "function": "handle",
+                            "inApp": true,
+                            "lineNo": 404,
+                            "module": "org.mortbay.jetty.HttpConnection",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "HttpParser.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "HttpParser.java",
+                            "function": "parseAvailable",
+                            "inApp": true,
+                            "lineNo": 218,
+                            "module": "org.mortbay.jetty.HttpParser",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "HttpParser.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "HttpParser.java",
+                            "function": "parseNext",
+                            "inApp": true,
+                            "lineNo": 756,
+                            "module": "org.mortbay.jetty.HttpParser",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "HttpConnection.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "HttpConnection.java",
+                            "function": "content",
+                            "inApp": true,
+                            "lineNo": 943,
+                            "module": "org.mortbay.jetty.HttpConnection$RequestHandler",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "HttpConnection.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "HttpConnection.java",
+                            "function": "handleRequest",
+                            "inApp": true,
+                            "lineNo": 542,
+                            "module": "org.mortbay.jetty.HttpConnection",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "Server.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "Server.java",
+                            "function": "handle",
+                            "inApp": true,
+                            "lineNo": 326,
+                            "module": "org.mortbay.jetty.Server",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "HandlerWrapper.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "HandlerWrapper.java",
+                            "function": "handle",
+                            "inApp": true,
+                            "lineNo": 152,
+                            "module": "org.mortbay.jetty.handler.HandlerWrapper",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "WebAppContext.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "WebAppContext.java",
+                            "function": "handle",
+                            "inApp": true,
+                            "lineNo": 418,
+                            "module": "org.mortbay.jetty.webapp.WebAppContext",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "ContextHandler.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "ContextHandler.java",
+                            "function": "handle",
+                            "inApp": true,
+                            "lineNo": 765,
+                            "module": "org.mortbay.jetty.handler.ContextHandler",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "SessionHandler.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "SessionHandler.java",
+                            "function": "handle",
+                            "inApp": true,
+                            "lineNo": 182,
+                            "module": "org.mortbay.jetty.servlet.SessionHandler",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "SecurityHandler.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "SecurityHandler.java",
+                            "function": "handle",
+                            "inApp": true,
+                            "lineNo": 216,
+                            "module": "org.mortbay.jetty.security.SecurityHandler",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "ServletHandler.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "ServletHandler.java",
+                            "function": "handle",
+                            "inApp": true,
+                            "lineNo": 388,
+                            "module": "org.mortbay.jetty.servlet.ServletHandler",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "ServletHandler.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "ServletHandler.java",
+                            "function": "doFilter",
+                            "inApp": true,
+                            "lineNo": 1157,
+                            "module": "org.mortbay.jetty.servlet.ServletHandler$CachedChain",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "OutputBufferFilter.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "OutputBufferFilter.java",
+                            "function": "doFilter",
+                            "inApp": true,
+                            "lineNo": 33,
+                            "module": "com.example.myproject.OutputBufferFilter",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "ServletHandler.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "ServletHandler.java",
+                            "function": "doFilter",
+                            "inApp": true,
+                            "lineNo": 1157,
+                            "module": "org.mortbay.jetty.servlet.ServletHandler$CachedChain",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "ExceptionHandlerFilter.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "ExceptionHandlerFilter.java",
+                            "function": "doFilter",
+                            "inApp": true,
+                            "lineNo": 28,
+                            "module": "com.example.myproject.ExceptionHandlerFilter",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "ServletHandler.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "ServletHandler.java",
+                            "function": "doFilter",
+                            "inApp": true,
+                            "lineNo": 1157,
+                            "module": "org.mortbay.jetty.servlet.ServletHandler$CachedChain",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "OpenSessionInViewFilter.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "OpenSessionInViewFilter.java",
+                            "function": "doFilter",
+                            "inApp": true,
+                            "lineNo": 60,
+                            "module": "com.example.myproject.OpenSessionInViewFilter",
+                            "vars": {}
+                          }
+                        ],
+                        "framesOmitted": null
+                      },
+                      "type": "javax.servlet.ServletException",
+                      "value": "Something bad happened"
+                    },
+                    {
+                      "module": null,
+                      "stacktrace": {
+                        "frames": [
+                          {
+                            "absPath": "OpenSessionInViewFilter.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "OpenSessionInViewFilter.java",
+                            "function": "doFilter",
+                            "inApp": true,
+                            "lineNo": 30,
+                            "module": "com.example.myproject.OpenSessionInViewFilter",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "ServletHandler.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "ServletHandler.java",
+                            "function": "doFilter",
+                            "inApp": true,
+                            "lineNo": 1166,
+                            "module": "org.mortbay.jetty.servlet.ServletHandler$CachedChain",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "ServletHolder.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "ServletHolder.java",
+                            "function": "handle",
+                            "inApp": true,
+                            "lineNo": 511,
+                            "module": "org.mortbay.jetty.servlet.ServletHolder",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "HttpServlet.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "HttpServlet.java",
+                            "function": "service",
+                            "inApp": true,
+                            "lineNo": 820,
+                            "module": "javax.servlet.http.HttpServlet",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "HttpServlet.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "HttpServlet.java",
+                            "function": "service",
+                            "inApp": true,
+                            "lineNo": 727,
+                            "module": "javax.servlet.http.HttpServlet",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "MyServlet.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "MyServlet.java",
+                            "function": "doPost",
+                            "inApp": true,
+                            "lineNo": 169,
+                            "module": "com.example.myproject.MyServlet",
+                            "vars": {}
+                          }
+                        ],
+                        "framesOmitted": null
+                      },
+                      "type": "com.example.myproject.MyProjectServletException",
+                      "value": ""
+                    },
+                    {
+                      "module": null,
+                      "stacktrace": {
+                        "frames": [
+                          {
+                            "absPath": "AbstractSelectingDelegate.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "AbstractSelectingDelegate.java",
+                            "function": "performInsert",
+                            "inApp": true,
+                            "lineNo": 57,
+                            "module": "org.hibernate.id.insert.AbstractSelectingDelegate",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": "NewProxyPreparedStatement.java",
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": "NewProxyPreparedStatement.java",
+                            "function": "executeUpdate",
+                            "inApp": true,
+                            "lineNo": 105,
+                            "module": "com.mchange.v2.c3p0.impl.NewProxyPreparedStatement",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": null,
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": null,
+                            "function": "executeUpdate",
+                            "inApp": true,
+                            "lineNo": null,
+                            "module": "org.hsqldb.jdbc.jdbcPreparedStatement",
+                            "vars": {}
+                          },
+                          {
+                            "absPath": null,
+                            "colNo": null,
+                            "context": [],
+                            "errors": null,
+                            "filename": null,
+                            "function": "throwError",
+                            "inApp": true,
+                            "lineNo": null,
+                            "module": "org.hsqldb.jdbc.Util",
+                            "vars": {}
+                          }
+                        ],
+                        "framesOmitted": null
+                      },
+                      "type": "java.sql.SQLException",
+                      "value": "Violation of unique constraint MY_ENTITY_UK_1: duplicate value(s) for column(s) MY_COLUMN in statement [...]"
+                    }
+                  ]
+                },
+                "type": "exception"
+              },
+              {
+                "data": {
+                  "cookies": null,
+                  "data": "{\"hello\": \"world\"}",
+                  "env": null,
+                  "fragment": "",
+                  "headers": {
+                    "Content-Type": "application/json",
+                    "Referer": "http://example.com",
+                    "User-Agent": "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36"
+                  },
+                  "method": "GET",
+                  "query": "foo=bar",
+                  "url": "http://example.com/foo"
+                },
+                "type": "request"
+              }
+            ],
+            "errors": [],
+            "eventID": "80dd9b7ab5fe41c98f960cfce10dbd42",
+            "groupID": 2,
+            "id": "2",
+            "message": "This is an example Java exception",
+            "packages": {
+              "my.package": "1.0.0"
+            },
+            "platform": "java",
+            "size": 6211,
+            "tags": {
+              "browser": "Chrome 28.0",
+              "device": "Other",
+              "level": "error",
+              "os": "Windows 8",
+              "sentry:release": "d1f60347554a5d9912804637a1eb2fa97fedff75",
+              "url": "http://example.com/foo"
+            },
+            "timeSpent": null,
+            "user": {
+              "email": "foo@example.com",
+              "id": "1671",
+              "username": "getsentry"
+            }
+          },
+          {
+            "context": {
+              "emptyList": [],
+              "emptyMap": {},
+              "results": [
+                1,
+                2,
+                3,
+                4,
+                5
+              ],
+              "session": {
+                "foo": "bar"
+              }
+            },
+            "dateCreated": "2015-08-27T18:36:04Z",
+            "entries": [
+              {
+                "data": {
+                  "context": [
+                    [
+                      11,
+                      "{% endif %}\n"
+                    ],
+                    [
+                      12,
+                      "<script src=\"{% static 'debug_toolbar/js/toolbar.js' %}\"></script>\n"
+                    ],
+                    [
+                      13,
+                      "<div id=\"djDebug\" hidden=\"hidden\" dir=\"ltr\"\n"
+                    ],
+                    [
+                      14,
+                      "     data-store-id=\"{{ toolbar.store_id }}\" data-render-panel-url=\"{% url 'djdt:render_panel' %}\"\n"
+                    ],
+                    [
+                      15,
+                      "     {{ toolbar.config.ROOT_TAG_EXTRA_ATTRS|safe }}>\n"
+                    ],
+                    [
+                      16,
+                      "\t<div hidden=\"hidden\" id=\"djDebugToolbar\">\n"
+                    ],
+                    [
+                      17,
+                      "\t\t<ul id=\"djDebugPanelList\">\n"
+                    ]
+                  ],
+                  "filename": "debug_toolbar/base.html",
+                  "lineNo": 14
+                },
+                "type": "template"
+              },
+              {
+                "data": {
+                  "frames": [
+                    {
+                      "absPath": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/base.py",
+                      "colNo": null,
+                      "context": [
+                        [
+                          298,
+                          "                frames = stack"
+                        ],
+                        [
+                          299,
+                          ""
+                        ],
+                        [
+                          300,
+                          "            data.update({"
+                        ],
+                        [
+                          301,
+                          "                'sentry.interfaces.Stacktrace': {"
+                        ],
+                        [
+                          302,
+                          "                    'frames': get_stack_info(frames,"
+                        ],
+                        [
+                          303,
+                          "                        transformer=self.transform)"
+                        ],
+                        [
+                          304,
+                          "                },"
+                        ],
+                        [
+                          305,
+                          "            })"
+                        ],
+                        [
+                          306,
+                          ""
+                        ],
+                        [
+                          307,
+                          "        if 'sentry.interfaces.Stacktrace' in data:"
+                        ],
+                        [
+                          308,
+                          "            if self.include_paths:"
+                        ]
+                      ],
+                      "errors": null,
+                      "filename": "raven/base.py",
+                      "function": "build_msg",
+                      "inApp": false,
+                      "lineNo": 303,
+                      "module": "raven.base",
+                      "vars": {
+                        "'culprit'": null,
+                        "'data'": {
+                          "'message'": "u'This is a test message generated using ``raven test``'",
+                          "'sentry.interfaces.Message'": {
+                            "'message'": "u'This is a test message generated using ``raven test``'",
+                            "'params'": []
+                          }
+                        },
+                        "'date'": "datetime.datetime(2013, 8, 13, 3, 8, 24, 880386)",
+                        "'event_id'": "'54a322436e1b47b88e239b78998ae742'",
+                        "'event_type'": "'raven.events.Message'",
+                        "'extra'": {
+                          "'loadavg'": [
+                            0.37255859375,
+                            0.5341796875,
+                            0.62939453125
+                          ],
+                          "'user'": "'dcramer'"
+                        },
+                        "'frames'": "<generator object iter_stack_frames at 0x107bcc3c0>",
+                        "'handler'": "<raven.events.Message object at 0x107bd0890>",
+                        "'k'": "'sentry.interfaces.Message'",
+                        "'kwargs'": {
+                          "'level'": 20,
+                          "'message'": "'This is a test message generated using ``raven test``'"
+                        },
+                        "'public_key'": null,
+                        "'result'": {
+                          "'message'": "u'This is a test message generated using ``raven test``'",
+                          "'sentry.interfaces.Message'": {
+                            "'message'": "u'This is a test message generated using ``raven test``'",
+                            "'params'": []
+                          }
+                        },
+                        "'self'": "<raven.base.Client object at 0x107bb8210>",
+                        "'stack'": true,
+                        "'tags'": null,
+                        "'time_spent'": null,
+                        "'v'": {
+                          "'message'": "u'This is a test message generated using ``raven test``'",
+                          "'params'": []
+                        }
+                      }
+                    },
+                    {
+                      "absPath": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/base.py",
+                      "colNo": null,
+                      "context": [
+                        [
+                          454,
+                          "        if not self.is_enabled():"
+                        ],
+                        [
+                          455,
+                          "            return"
+                        ],
+                        [
+                          456,
+                          ""
+                        ],
+                        [
+                          457,
+                          "        data = self.build_msg("
+                        ],
+                        [
+                          458,
+                          "            event_type, data, date, time_spent, extra, stack, tags=tags,"
+                        ],
+                        [
+                          459,
+                          "            **kwargs)"
+                        ],
+                        [
+                          460,
+                          ""
+                        ],
+                        [
+                          461,
+                          "        self.send(**data)"
+                        ],
+                        [
+                          462,
+                          ""
+                        ],
+                        [
+                          463,
+                          "        return (data.get('event_id'),)"
+                        ],
+                        [
+                          464,
+                          ""
+                        ]
+                      ],
+                      "errors": null,
+                      "filename": "raven/base.py",
+                      "function": "capture",
+                      "inApp": false,
+                      "lineNo": 459,
+                      "module": "raven.base",
+                      "vars": {
+                        "'data'": null,
+                        "'date'": null,
+                        "'event_type'": "'raven.events.Message'",
+                        "'extra'": {
+                          "'loadavg'": [
+                            0.37255859375,
+                            0.5341796875,
+                            0.62939453125
+                          ],
+                          "'user'": "'dcramer'"
+                        },
+                        "'kwargs'": {
+                          "'level'": 20,
+                          "'message'": "'This is a test message generated using ``raven test``'"
+                        },
+                        "'self'": "<raven.base.Client object at 0x107bb8210>",
+                        "'stack'": true,
+                        "'tags'": null,
+                        "'time_spent'": null
+                      }
+                    },
+                    {
+                      "absPath": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/base.py",
+                      "colNo": null,
+                      "context": [
+                        [
+                          572,
+                          "        \"\"\""
+                        ],
+                        [
+                          573,
+                          "        Creates an event from ``message``."
+                        ],
+                        [
+                          574,
+                          ""
+                        ],
+                        [
+                          575,
+                          "        >>> client.captureMessage('My event just happened!')"
+                        ],
+                        [
+                          576,
+                          "        \"\"\""
+                        ],
+                        [
+                          577,
+                          "        return self.capture('raven.events.Message', message=message, **kwargs)"
+                        ],
+                        [
+                          578,
+                          ""
+                        ],
+                        [
+                          579,
+                          "    def captureException(self, exc_info=None, **kwargs):"
+                        ],
+                        [
+                          580,
+                          "        \"\"\""
+                        ],
+                        [
+                          581,
+                          "        Creates an event from an exception."
+                        ],
+                        [
+                          582,
+                          ""
+                        ]
+                      ],
+                      "errors": null,
+                      "filename": "raven/base.py",
+                      "function": "captureMessage",
+                      "inApp": false,
+                      "lineNo": 577,
+                      "module": "raven.base",
+                      "vars": {
+                        "'kwargs'": {
+                          "'data'": null,
+                          "'extra'": {
+                            "'loadavg'": [
+                              0.37255859375,
+                              0.5341796875,
+                              0.62939453125
+                            ],
+                            "'user'": "'dcramer'"
+                          },
+                          "'level'": 20,
+                          "'stack'": true,
+                          "'tags'": null
+                        },
+                        "'message'": "'This is a test message generated using ``raven test``'",
+                        "'self'": "<raven.base.Client object at 0x107bb8210>"
+                      }
+                    },
+                    {
+                      "absPath": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/scripts/runner.py",
+                      "colNo": null,
+                      "context": [
+                        [
+                          72,
+                          "        level=logging.INFO,"
+                        ],
+                        [
+                          73,
+                          "        stack=True,"
+                        ],
+                        [
+                          74,
+                          "        tags=options.get('tags', {}),"
+                        ],
+                        [
+                          75,
+                          "        extra={"
+                        ],
+                        [
+                          76,
+                          "            'user': get_uid(),"
+                        ],
+                        [
+                          77,
+                          "            'loadavg': get_loadavg(),"
+                        ],
+                        [
+                          78,
+                          "        },"
+                        ],
+                        [
+                          79,
+                          "    ))"
+                        ],
+                        [
+                          80,
+                          ""
+                        ],
+                        [
+                          81,
+                          "    if client.state.did_fail():"
+                        ],
+                        [
+                          82,
+                          "        print('error!')"
+                        ]
+                      ],
+                      "errors": null,
+                      "filename": "raven/scripts/runner.py",
+                      "function": "send_test_message",
+                      "inApp": false,
+                      "lineNo": 77,
+                      "module": "raven.scripts.runner",
+                      "vars": {
+                        "'client'": "<raven.base.Client object at 0x107bb8210>",
+                        "'data'": null,
+                        "'k'": "'secret_key'",
+                        "'options'": {
+                          "'data'": null,
+                          "'tags'": null
+                        }
+                      }
+                    },
+                    {
+                      "absPath": "/home/ubuntu/.virtualenvs/getsentry/src/raven/raven/scripts/runner.py",
+                      "colNo": null,
+                      "context": [
+                        [
+                          107,
+                          "    print(\"Using DSN configuration:\")"
+                        ],
+                        [
+                          108,
+                          "    print(\" \", dsn)"
+                        ],
+                        [
+                          109,
+                          "    print()"
+                        ],
+                        [
+                          110,
+                          ""
+                        ],
+                        [
+                          111,
+                          "    client = Client(dsn, include_paths=['raven'])"
+                        ],
+                        [
+                          112,
+                          "    send_test_message(client, opts.__dict__)"
+                        ]
+                      ],
+                      "errors": null,
+                      "filename": "raven/scripts/runner.py",
+                      "function": "main",
+                      "inApp": false,
+                      "lineNo": 112,
+                      "module": "raven.scripts.runner",
+                      "vars": {
+                        "'args'": [
+                          "'test'",
+                          "'https://ebc35f33e151401f9deac549978bda11:f3403f81e12e4c24942d505f086b2cad@app.getsentry.com/1'"
+                        ],
+                        "'client'": "<raven.base.Client object at 0x107bb8210>",
+                        "'dsn'": "'https://ebc35f33e151401f9deac549978bda11:f3403f81e12e4c24942d505f086b2cad@app.getsentry.com/1'",
+                        "'opts'": "<Values at 0x107ba3b00: {'data': None, 'tags': None}>",
+                        "'parser'": "<optparse.OptionParser instance at 0x107ba3368>",
+                        "'root'": "<logging.Logger object at 0x107ba5b10>"
+                      }
+                    }
+                  ],
+                  "framesOmitted": null
+                },
+                "type": "stacktrace"
+              },
+              {
+                "data": {
+                  "cookies": null,
+                  "data": "{\"hello\": \"world\"}",
+                  "env": null,
+                  "fragment": "",
+                  "headers": {
+                    "Content-Type": "application/json",
+                    "Referer": "http://example.com",
+                    "User-Agent": "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36"
+                  },
+                  "method": "GET",
+                  "query": "foo=bar",
+                  "url": "http://example.com/foo"
+                },
+                "type": "request"
+              }
+            ],
+            "errors": [],
+            "eventID": "9c98100ee1464abdad072045d5ff3d32",
+            "groupID": 1,
+            "id": "1",
+            "message": "This is an example Python exception",
+            "packages": {
+              "my.package": "1.0.0"
+            },
+            "platform": "python",
+            "size": 6705,
+            "tags": {
+              "browser": "Chrome 28.0",
+              "device": "Other",
+              "level": "error",
+              "os": "Windows 8",
+              "sentry:release": "d1f60347554a5d9912804637a1eb2fa97fedff75",
+              "url": "http://example.com/foo"
+            },
+            "timeSpent": null,
+            "user": {
+              "email": "foo@example.com",
+              "id": "1671",
+              "username": "getsentry"
+            }
+          }
+        ],
+        "headers": {
+          "allow": "GET, HEAD, OPTIONS",
+          "content-language": "en-us",
+          "content-type": "application/json",
+          "link": "<https://app.getsentry.com/api/0/projects/the-interstellar-jurisdiction/pump-station/events/?&cursor=1440700566:0:1>; rel=\"previous\"; results=\"false\"; cursor=\"1440700566:0:1\", <https://app.getsentry.com/api/0/projects/the-interstellar-jurisdiction/pump-station/events/?&cursor=1440700564:0:0>; rel=\"next\"; results=\"false\"; cursor=\"1440700564:0:0\"",
+          "vary": "Accept-Language, Cookie"
+        },
+        "is_json": true,
+        "reason": "OK",
+        "status": 200
+      }
+    }
+  ],
+  "text": [],
+  "title": null
+}
diff --git a/api-docs/cache/scenarios/ListTagValues.json b/api-docs/cache/scenarios/ListTagValues.json
new file mode 100644
index 0000000000..f8900133cd
--- /dev/null
+++ b/api-docs/cache/scenarios/ListTagValues.json
@@ -0,0 +1,29 @@
+{
+  "ident": "ListTagValues",
+  "requests": [
+    {
+      "request": {
+        "data": null,
+        "headers": {},
+        "method": "GET",
+        "path": "/api/0/groups/1/tags/browser/values/"
+      },
+      "response": {
+        "data": {
+          "detail": ""
+        },
+        "headers": {
+          "allow": "GET, HEAD, OPTIONS",
+          "content-language": "en-us",
+          "content-type": "application/json",
+          "vary": "Accept-Language, Cookie"
+        },
+        "is_json": true,
+        "reason": "NOT FOUND",
+        "status": 404
+      }
+    }
+  ],
+  "text": [],
+  "title": null
+}
diff --git a/api-docs/cache/scenarios/RetrieveAggregate.json b/api-docs/cache/scenarios/RetrieveAggregate.json
index 7a33d32f50..d7d235c9dd 100644
--- a/api-docs/cache/scenarios/RetrieveAggregate.json
+++ b/api-docs/cache/scenarios/RetrieveAggregate.json
@@ -13,7 +13,7 @@
           "activity": [
             {
               "data": {},
-              "dateCreated": "2015-08-25T18:08:03Z",
+              "dateCreated": "2015-08-27T18:36:04Z",
               "id": "None",
               "type": "first_seen",
               "user": null
@@ -25,24 +25,24 @@
           "culprit": "raven.scripts.runner in main",
           "firstRelease": {
             "data": {},
-            "dateCreated": "2015-08-25T18:08:03.915Z",
+            "dateCreated": "2015-08-27T18:36:04.555Z",
             "dateReleased": null,
             "dateStarted": null,
             "firstEvent": null,
             "lastEvent": null,
             "newGroups": 0,
             "ref": null,
-            "shortVersion": "4c9d053e744a",
+            "shortVersion": "d1f60347554a",
             "url": null,
-            "version": "4c9d053e744aa9916b580dd8790f58da7de1d3c2"
+            "version": "d1f60347554a5d9912804637a1eb2fa97fedff75"
           },
-          "firstSeen": "2015-08-25T18:08:03Z",
+          "firstSeen": "2015-08-27T18:36:04Z",
           "hasSeen": false,
           "id": "1",
           "isBookmarked": false,
           "isPublic": false,
           "lastRelease": null,
-          "lastSeen": "2015-08-25T18:08:03Z",
+          "lastSeen": "2015-08-27T18:36:04Z",
           "level": "error",
           "logger": null,
           "numComments": 0,
@@ -57,230 +57,230 @@
           "stats": {
             "24h": [
               [
-                1440439200,
-                9331
+                1440612000,
+                14059
               ],
               [
-                1440442800,
-                10017
+                1440615600,
+                15258
               ],
               [
-                1440446400,
-                11559
+                1440619200,
+                15693
               ],
               [
-                1440450000,
-                8500
+                1440622800,
+                14020
               ],
               [
-                1440453600,
-                7427
+                1440626400,
+                14830
               ],
               [
-                1440457200,
-                7278
+                1440630000,
+                15685
               ],
               [
-                1440460800,
-                6957
+                1440633600,
+                12746
               ],
               [
-                1440464400,
-                6500
+                1440637200,
+                12680
               ],
               [
-                1440468000,
-                5943
+                1440640800,
+                14078
               ],
               [
-                1440471600,
-                7475
+                1440644400,
+                15456
               ],
               [
-                1440475200,
-                6930
+                1440648000,
+                14726
               ],
               [
-                1440478800,
-                6758
+                1440651600,
+                11834
               ],
               [
-                1440482400,
-                8201
+                1440655200,
+                13315
               ],
               [
-                1440486000,
-                5136
+                1440658800,
+                13340
               ],
               [
-                1440489600,
-                8452
+                1440662400,
+                12514
               ],
               [
-                1440493200,
-                7262
+                1440666000,
+                13276
               ],
               [
-                1440496800,
-                7537
+                1440669600,
+                11594
               ],
               [
-                1440500400,
-                6243
+                1440673200,
+                9433
               ],
               [
-                1440504000,
-                6413
+                1440676800,
+                7218
               ],
               [
-                1440507600,
-                6913
+                1440680400,
+                7804
               ],
               [
-                1440511200,
-                5136
+                1440684000,
+                10991
               ],
               [
-                1440514800,
-                6149
+                1440687600,
+                8282
               ],
               [
-                1440518400,
-                5194
+                1440691200,
+                8321
               ],
               [
-                1440522000,
-                8463
+                1440694800,
+                10036
               ],
               [
-                1440525600,
-                2217
+                1440698400,
+                10478
               ]
             ],
             "30d": [
-              [
-                1437868800,
-                601792
-              ],
-              [
-                1437955200,
-                728694
-              ],
               [
                 1438041600,
-                724116
+                1000423
               ],
               [
                 1438128000,
-                730657
+                1222892
               ],
               [
                 1438214400,
-                739763
+                1227116
               ],
               [
                 1438300800,
-                717106
+                1214455
               ],
               [
                 1438387200,
-                716251
+                1202192
               ],
               [
                 1438473600,
-                724735
+                1205598
               ],
               [
                 1438560000,
-                726244
+                1216235
               ],
               [
                 1438646400,
-                718954
+                1223437
               ],
               [
                 1438732800,
-                725529
+                1225518
               ],
               [
                 1438819200,
-                724123
+                1212312
               ],
               [
                 1438905600,
-                719159
+                1206532
               ],
               [
                 1438992000,
-                733515
+                1214842
               ],
               [
                 1439078400,
-                738478
+                1234110
               ],
               [
                 1439164800,
-                729727
+                1226719
               ],
               [
                 1439251200,
-                746352
+                1243454
               ],
               [
                 1439337600,
-                729758
+                1208460
               ],
               [
                 1439424000,
-                734458
+                1231213
               ],
               [
                 1439510400,
-                728328
+                1206341
               ],
               [
                 1439596800,
-                724141
+                1208806
               ],
               [
                 1439683200,
-                709946
+                1199977
               ],
               [
                 1439769600,
-                718829
+                1208451
               ],
               [
                 1439856000,
-                728983
+                1215416
               ],
               [
                 1439942400,
-                725152
+                1195448
               ],
               [
                 1440028800,
-                667490
+                1160811
               ],
               [
                 1440115200,
-                427886
+                915687
               ],
               [
                 1440201600,
-                295686
+                789458
               ],
               [
                 1440288000,
-                275291
+                769284
               ],
               [
                 1440374400,
-                225712
+                723308
               ],
               [
                 1440460800,
-                123879
+                608285
+              ],
+              [
+                1440547200,
+                428953
+              ],
+              [
+                1440633600,
+                218122
               ]
             ]
           },
@@ -296,9 +296,12 @@
           "content-type": "application/json",
           "vary": "Accept-Language, Cookie"
         },
+        "is_json": true,
         "reason": "OK",
         "status": 200
       }
     }
-  ]
+  ],
+  "text": [],
+  "title": null
 }
diff --git a/api-docs/cache/scenarios/UpdateAggregate.json b/api-docs/cache/scenarios/UpdateAggregate.json
index b7e73bae4b..94720195fb 100644
--- a/api-docs/cache/scenarios/UpdateAggregate.json
+++ b/api-docs/cache/scenarios/UpdateAggregate.json
@@ -18,12 +18,12 @@
           "assignedTo": null,
           "count": "1",
           "culprit": "raven.scripts.runner in main",
-          "firstSeen": "2015-08-25T18:08:03Z",
+          "firstSeen": "2015-08-27T18:36:04Z",
           "hasSeen": false,
           "id": "1",
           "isBookmarked": false,
           "isPublic": false,
-          "lastSeen": "2015-08-25T18:08:03Z",
+          "lastSeen": "2015-08-27T18:36:04Z",
           "level": "error",
           "logger": null,
           "numComments": 0,
@@ -44,9 +44,12 @@
           "content-type": "application/json",
           "vary": "Accept-Language, Cookie"
         },
+        "is_json": true,
         "reason": "OK",
         "status": 200
       }
     }
-  ]
+  ],
+  "text": [],
+  "title": null
 }
diff --git a/api-docs/cache/sections.json b/api-docs/cache/sections.json
index 7b08ce57a2..01393b5bce 100644
--- a/api-docs/cache/sections.json
+++ b/api-docs/cache/sections.json
@@ -6,7 +6,7 @@
     },
     "events": {
       "entries": {
-        "delete-group-details": "Delete an Aggregate",
+        "delete-group-details": "Remove an Aggregate",
         "delete-project-group-index": "Bulk Remove a List of Aggregates",
         "get-group-details": "Retrieve an Aggregate",
         "get-group-events": "List Available Samples",
diff --git a/api-docs/generator.py b/api-docs/generator.py
index dc8581c7ba..67c4717b4b 100644
--- a/api-docs/generator.py
+++ b/api-docs/generator.py
@@ -127,6 +127,7 @@ class SentryBox(object):
     def __init__(self):
         self.redis = None
         self.sentry = None
+        self.task_runner = None
 
     def __enter__(self):
         self.redis = launch_redis()
@@ -159,7 +160,7 @@ def dump_json(path, data):
 
 
 def run_scenario(vars, scenario_ident, func):
-    runner = Runner(scenario_ident, **vars)
+    runner = Runner(scenario_ident, func, **vars)
     report('scenario', 'Running scenario "%s"' % scenario_ident)
     func(runner)
     dump_json('scenarios/%s.json' % scenario_ident, runner.to_json())
@@ -186,11 +187,15 @@ def cli():
             project = utils.create_project(project_name, team=team, org=org)
             release = utils.create_release(project=project, user=user)
             report('event', 'Creating event for "%s"' % project_name)
-            event = utils.create_event(project=project, release=release)
+
+            event1 = utils.create_event(project=project, release=release,
+                                        platform='python')
+            event2 = utils.create_event(project=project, release=release,
+                                        platform='java')
             projects.append({
                 'project': project,
                 'release': release,
-                'events': [event],
+                'events': [event1, event2],
             })
 
         vars = {
diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 3b60ceb6cd..7350802e80 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -18,12 +18,12 @@ from sentry.models import (
 )
 from sentry.plugins import plugins
 from sentry.utils.safe import safe_execute
-from sentry.utils.apidocs import scenario
+from sentry.utils.apidocs import scenario, attach_scenarios
 
 
 @scenario('RetrieveAggregate')
 def retrieve_aggregate_scenario(runner):
-    group = Group.objects.get(project=runner.default_project)
+    group = Group.objects.filter(project=runner.default_project).first()
     runner.request(
         method='GET',
         path='/groups/%s/' % group.id,
@@ -32,7 +32,7 @@ def retrieve_aggregate_scenario(runner):
 
 @scenario('UpdateAggregate')
 def update_aggregate_scenario(runner):
-    group = Group.objects.get(project=runner.default_project)
+    group = Group.objects.filter(project=runner.default_project).first()
     runner.request(
         method='PUT',
         path='/groups/%s/' % group.id,
@@ -40,6 +40,16 @@ def update_aggregate_scenario(runner):
     )
 
 
+@scenario('DeleteAggregate')
+def delete_aggregate_scenario(runner):
+    with runner.isolated_project('Boring Mushrooms') as project:
+        group = Group.objects.filter(project=project).first()
+        runner.request(
+            method='DELETE',
+            path='/groups/%s/' % group.id,
+        )
+
+
 class GroupSerializer(serializers.Serializer):
     status = serializers.ChoiceField(choices=zip(
         STATUS_CHOICES.keys(), STATUS_CHOICES.keys()
@@ -112,6 +122,7 @@ class GroupDetailsEndpoint(GroupEndpoint):
             return {'version': version}
         return serialize(release, request.user)
 
+    @attach_scenarios([retrieve_aggregate_scenario])
     def get(self, request, group):
         """
         Retrieve an Aggregate
@@ -122,7 +133,7 @@ class GroupDetailsEndpoint(GroupEndpoint):
         the group (the bar graph), some overall numbers (number of comments,
         user reports) as well as the summarized event data.
 
-        .. sentry:api-scenario:: RetrieveAggregate
+        :pparam int group_id: the ID of the group to retrieve.
         """
         # TODO(dcramer): handle unauthenticated/public response
         data = serialize(group, request.user)
@@ -195,6 +206,7 @@ class GroupDetailsEndpoint(GroupEndpoint):
 
         return Response(data)
 
+    @attach_scenarios([update_aggregate_scenario])
     def put(self, request, group):
         """
         Update an Aggregate
@@ -212,8 +224,6 @@ class GroupDetailsEndpoint(GroupEndpoint):
 
         - ``hasSeen``: `true`, `false`
         - ``isBookmarked``: `true`, `false`
-
-        .. sentry:api-scenario:: UpdateAggregate
         """
         serializer = GroupSerializer(data=request.DATA, partial=True)
         if not serializer.is_valid():
@@ -335,12 +345,15 @@ class GroupDetailsEndpoint(GroupEndpoint):
 
         return Response(serialize(group, request.user))
 
+    @attach_scenarios([delete_aggregate_scenario])
     def delete(self, request, group):
         """
-        Delete an Aggregate
+        Remove an Aggregate
         ```````````````````
 
-        Deletes an individual aggregate.
+        Removes an individual aggregate.
+
+        :pparam int group_id: the ID of the group to delete.
         """
         from sentry.tasks.deletion import delete_group
 
diff --git a/src/sentry/api/endpoints/group_events_latest.py b/src/sentry/api/endpoints/group_events_latest.py
index 1b263ba72a..584f952dee 100644
--- a/src/sentry/api/endpoints/group_events_latest.py
+++ b/src/sentry/api/endpoints/group_events_latest.py
@@ -5,17 +5,32 @@ from rest_framework.response import Response
 from sentry.api import client
 from sentry.api.base import DocSection
 from sentry.api.bases.group import GroupEndpoint
+from sentry.models import Group
+from sentry.utils.apidocs import scenario, attach_scenarios
+
+
+@scenario('GetLatestGroupSample')
+def get_latest_group_sample_scenario(runner):
+    project = runner.default_project
+    group = Group.objects.filter(project=project).first()
+    runner.request(
+        method='GET',
+        path='/groups/%s/events/latest/' % group.id,
+    )
 
 
 class GroupEventsLatestEndpoint(GroupEndpoint):
     doc_section = DocSection.EVENTS
 
+    @attach_scenarios([get_latest_group_sample_scenario])
     def get(self, request, group):
         """
         Latest Sample
         `````````````
 
         Retrieves the details of the latest sample for an aggregate.
+
+        :pparam int group_id: the ID of the group to get the latest sample of.
         """
         event = group.get_latest_event()
         if not event:
diff --git a/src/sentry/api/endpoints/group_tagkey_values.py b/src/sentry/api/endpoints/group_tagkey_values.py
index 82f9964075..cc5336f996 100644
--- a/src/sentry/api/endpoints/group_tagkey_values.py
+++ b/src/sentry/api/endpoints/group_tagkey_values.py
@@ -4,18 +4,34 @@ from sentry.api.base import DocSection
 from sentry.api.bases.group import GroupEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import serialize
-from sentry.models import GroupTagValue, TagKey, TagKeyStatus
+from sentry.models import GroupTagValue, TagKey, TagKeyStatus, Group
+from sentry.utils.apidocs import scenario
+
+
+@scenario('ListTagValues')
+def list_tag_values_scenario(runner):
+    group = Group.objects.filter(project=runner.default_project).first()
+    runner.request(
+        method='GET',
+        path='/groups/%s/tags/%s/values/' % (
+            group.id, 'browser'),
+    )
 
 
 class GroupTagKeyValuesEndpoint(GroupEndpoint):
     doc_section = DocSection.EVENTS
 
+    # XXX: this scenario does not work for some inexplicable reasons
+    # @attach_scenarios([list_tag_values_scenario])
     def get(self, request, group, key):
         """
         List a Tag's Values
         ```````````````````
 
         Return a list of values associated with this key.
+
+        :pparam int group_id: the ID of the group to retrieve.
+        :pparam string key: the tag key to look the values up for.
         """
         # XXX(dcramer): kill sentry prefix for internal reserved tags
         if key in ('release', 'user', 'filename', 'function'):
diff --git a/src/sentry/api/endpoints/project_events.py b/src/sentry/api/endpoints/project_events.py
index 2ae2ef3d99..a12da0f5ec 100644
--- a/src/sentry/api/endpoints/project_events.py
+++ b/src/sentry/api/endpoints/project_events.py
@@ -5,17 +5,33 @@ from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.paginator import DateTimePaginator
 from sentry.models import Event
+from sentry.utils.apidocs import scenario, attach_scenarios
+
+
+@scenario('ListProjectAvailableSamples')
+def list_project_available_samples_scenario(runner):
+    runner.request(
+        method='GET',
+        path='/projects/%s/%s/events/' % (
+            runner.org.slug, runner.default_project.slug)
+    )
 
 
 class ProjectEventsEndpoint(ProjectEndpoint):
     doc_section = DocSection.EVENTS
 
+    @attach_scenarios([list_project_available_samples_scenario])
     def get(self, request, project):
         """
         List a Project's Available Samples
         ``````````````````````````````````
 
         Return a list of sampled events bound to a project.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          groups belong to.
+        :pparam string project_slug: the slug of the project the groups
+                                     belong to.
         """
 
         events = Event.objects.filter(
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 3ef6ec55b3..5693249842 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -22,10 +22,44 @@ from sentry.search.utils import parse_query
 from sentry.tasks.deletion import delete_group
 from sentry.tasks.merge import merge_group
 from sentry.utils.cursors import Cursor
+from sentry.utils.apidocs import scenario, attach_scenarios
 
 ERR_INVALID_STATS_PERIOD = "Invalid stats_period. Valid choices are '', '24h', and '14d'"
 
 
+@scenario('BulkUpdateAggregates')
+def bulk_update_aggregates_scenario(runner):
+    project = runner.default_project
+    group1, group2 = Group.objects.filter(project=project)[:2]
+    runner.request(
+        method='PUT',
+        path='/projects/%s/%s/groups/?id=%s&id=%s' % (
+            runner.org.slug, project.slug, group1.id, group2.id),
+        data={'status': 'unresolved', 'isPublic': False}
+    )
+
+
+@scenario('BulkRemoveAggregates')
+def bulk_remove_aggregates_scenario(runner):
+    with runner.isolated_project('Amazing Plumbing') as project:
+        group1, group2 = Group.objects.filter(project=project)[:2]
+        runner.request(
+            method='DELETE',
+            path='/projects/%s/%s/groups/?id=%s&id=%s' % (
+                runner.org.slug, project.slug, group1.id, group2.id),
+        )
+
+
+@scenario('ListProjectAggregates')
+def list_project_aggregates_scenario(runner):
+    project = runner.default_project
+    runner.request(
+        method='GET',
+        path='/projects/%s/%s/groups/?statsPeriod=24h' % (
+            runner.org.slug, project.slug),
+    )
+
+
 class GroupSerializer(serializers.Serializer):
     status = serializers.ChoiceField(choices=zip(
         STATUS_CHOICES.keys(), STATUS_CHOICES.keys()
@@ -55,23 +89,32 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
     # status=<x>
     # <tag>=<value>
     # statsPeriod=24h
+    @attach_scenarios([list_project_aggregates_scenario])
     def get(self, request, project):
         """
         List a Project's Aggregates
         ```````````````````````````
 
-        Return a list of aggregates bound to a project.
+        Return a list of aggregates bound to a project.  All parameters are
+        supplied as query string parameters.
 
-        A default query of 'is:resolved' is applied. To return results
-        with other statuses send an new query value (i.e. ?query= for all
+        A default query of ``is:resolved`` is applied. To return results
+        with other statuses send an new query value (i.e. ``?query=`` for all
         results).
 
-        Any standard Sentry structured search query can be passed via the
-        ``query`` parameter.
-
         The ``statsPeriod`` parameter can be used to select the timeline
         stats which should be present. Possible values are: '' (disable),
         '24h', '14d'
+
+        :qparam string statsPeriod: an optional stat period (can be one of
+                                    ``"24h"``, ``"14d"``, and ``""``).
+        :qparam querystring query: an optional Sentry structured search
+                                   query.  If not provided an implied
+                                   ``"is:resolved"`` is assumed.)
+        :pparam string organization_slug: the slug of the organization the
+                                          groups belong to.
+        :pparam string project_slug: the slug of the project the groups
+                                     belong to.
         """
         query_kwargs = {
             'project': project,
@@ -183,29 +226,53 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
 
         return response
 
+    @attach_scenarios([bulk_update_aggregates_scenario])
     def put(self, request, project):
         """
         Bulk Mutate a List of Aggregates
         ````````````````````````````````
 
-        Bulk mutate various attributes on aggregates.
-
-        - For non-status updates, the 'id' parameter is required.
-        - For status updates, the 'id' parameter may be omitted for a batch
-          "update all" query.
-        - An optional 'status' parameter may be used to restrict mutations to
-          only events with the given status.
+        Bulk mutate various attributes on aggregates.  The list of groups
+        to modify is given through the `id` query parameter.  It is repeated
+        for each group that should be modified.
 
-        Attributes:
+        - For non-status updates, the `id` query parameter is required.
+        - For status updates, the `id` query parameter may be omitted
+          for a batch "update all" query.
+        - An optional `status` query parameter may be used to restrict
+          mutations to only events with the given status.
 
-        - ``status``: resolved, unresolved, muted
-        - ``hasSeen``: true, false
-        - ``isBookmarked``: true, false
-        - ``isPublic``: true, false
-        - ``merge``: true, false
+        The following attributes can be modified and are supplied as
+        JSON object in the body:
 
         If any ids are out of scope this operation will succeed without
         any data mutation.
+
+        :qparam int id: a list of IDs of the groups to be mutated.  This
+                        parameter shall be repeated for each group.  It
+                        is optional only if a status is mutated in which
+                        case an implicit `update all` is assumed.
+        :qparam string status: optionally limits the query to groups of the
+                               specified status.  Valid values are
+                               ``"resolved"``, ``"unresolved"`` and
+                               ``"muted"``.
+        :pparam string organization_slug: the slug of the organization the
+                                          groups belong to.
+        :pparam string project_slug: the slug of the project the groups
+                                     belong to.
+        :param string status: the new status for the groups.  Valid values
+                              are ``"resolved"``, ``"unresolved"`` and
+                              ``"muted"``.
+        :param boolean isPublic: sets the group to public or private.
+        :param boolean merge: allows to merge or unmerge different groups.
+        :param boolean hasSeen: in case this API call is invoked with a user
+                                context this allows changing of the flag
+                                that indicates if the user has seen the
+                                event.
+        :param boolean isBookmarked: in case this API call is invoked with a
+                                     user context this allows changing of
+                                     the bookmark flag.
+        :auth: required
         """
         group_ids = request.GET.getlist('id')
         if group_ids:
@@ -366,17 +433,27 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
 
         return Response(result)
 
+    @attach_scenarios([bulk_remove_aggregates_scenario])
     def delete(self, request, project):
         """
         Bulk Remove a List of Aggregates
         ````````````````````````````````
 
-        Permanently remove the given aggregates.
+        Permanently remove the given aggregates. The list of groups to
+        modify is given through the `id` query parameter.  It is repeated
+        for each group that should be removed.
 
         Only queries by 'id' are accepted.
 
         If any ids are out of scope this operation will succeed without
         any data mutation.
+
+        :qparam int id: a list of IDs of the groups to be removed.  This
+                        parameter shall be repeated for each group.
+        :pparam string organization_slug: the slug of the organization the
+                                          groups belong to.
+        :pparam string project_slug: the slug of the project the groups
+                                     belong to.
         """
         group_ids = request.GET.getlist('id')
         if group_ids:
diff --git a/src/sentry/utils/apidocs.py b/src/sentry/utils/apidocs.py
index 88805015dc..7e47d4e1fb 100644
--- a/src/sentry/utils/apidocs.py
+++ b/src/sentry/utils/apidocs.py
@@ -8,6 +8,7 @@ import requests
 from pytz import utc
 from datetime import datetime, timedelta
 from random import randint
+from contextlib import contextmanager
 
 from django.conf import settings
 
@@ -139,6 +140,7 @@ def extract_endpoint_info(pattern, internal_endpoint):
             method=method_name,
             title=title,
             text=text,
+            scenarios=getattr(method, 'api_scenarios', None) or [],
             section=section.name.lower(),
             internal_path='%s:%s' % (
                 get_endpoint_path(internal_endpoint),
@@ -166,6 +168,13 @@ def scenario(ident):
     return decorator
 
 
+def attach_scenarios(scenarios):
+    def decorator(f):
+        f.api_scenarios = [x.api_scenario_ident for x in scenarios]
+        return f
+    return decorator
+
+
 def iter_scenarios():
     # Make sure everything is imported.
     for endpoint in iter_endpoints():
@@ -301,12 +310,13 @@ class MockUtils(object):
         )
         return release
 
-    def create_event(self, project, release):
+    def create_event(self, project, release, platform='python', raw=True):
         from sentry.utils.samples import create_sample_event
         event = create_sample_event(
             project=project,
-            platform='python',
+            platform=platform,
             release=release.version,
+            raw=raw
         )
         create_sample_time_series(event)
         return event
@@ -319,8 +329,9 @@ class Runner(object):
     so that the scenarios can be run separately if needed.
     """
 
-    def __init__(self, ident, api_key, org, me, teams=None):
+    def __init__(self, ident, func, api_key, org, me, teams=None):
         self.ident = ident
+        self.func = func
         self.requests = []
 
         self.utils = MockUtils()
@@ -330,6 +341,10 @@ class Runner(object):
         self.me = me
         self.teams = teams
 
+    @property
+    def default_team(self):
+        return self.teams[0]['team']
+
     @property
     def default_project(self):
         return self.teams[0]['projects'][0]['project']
@@ -342,6 +357,21 @@ class Runner(object):
     def default_event(self):
         return self.teams[0]['projects'][0]['events']
 
+    @contextmanager
+    def isolated_project(self, project_name):
+        project = self.utils.create_project(project_name,
+                                            team=self.default_team,
+                                            org=self.org)
+        release = self.utils.create_release(project=project, user=self.me)
+        self.utils.create_event(project=project, release=release,
+                                platform='python')
+        self.utils.create_event(project=project, release=release,
+                                platform='java')
+        try:
+            yield project
+        finally:
+            project.delete()
+
     def request(self, method, path, headers=None, data=None):
         path = '/api/0/' + path.lstrip('/')
         headers = dict(headers or {})
@@ -368,6 +398,13 @@ class Runner(object):
         response_headers.pop('server', None)
         response_headers.pop('date', None)
 
+        if response.headers.get('Content-Type') == 'application/json':
+            response_data = response.json()
+            is_json = True
+        else:
+            response_data = response.text
+            is_json = False
+
         rv = {
             'request': {
                 'method': method,
@@ -379,7 +416,8 @@ class Runner(object):
                 'headers': response_headers,
                 'status': response.status_code,
                 'reason': response.reason,
-                'data': response.json(),
+                'data': response_data,
+                'is_json': is_json,
             }
         }
 
@@ -387,7 +425,11 @@ class Runner(object):
         return rv
 
     def to_json(self):
+        doc = extract_documentation(self.func)
+        title, text = extract_title_and_text(doc)
         return {
             'ident': self.ident,
             'requests': self.requests,
+            'title': title,
+            'text': text,
         }
diff --git a/src/sentry/utils/samples.py b/src/sentry/utils/samples.py
index 4b34734fce..ad0a1c8b5e 100644
--- a/src/sentry/utils/samples.py
+++ b/src/sentry/utils/samples.py
@@ -70,7 +70,8 @@ def load_data(platform, default=None):
     return data
 
 
-def create_sample_event(project, platform=None, default=None, **kwargs):
+def create_sample_event(project, platform=None, default=None, raw=True,
+                        **kwargs):
     if not platform:
         platform = project.platform
 
@@ -88,4 +89,4 @@ def create_sample_event(project, platform=None, default=None, **kwargs):
 
     manager = EventManager(data)
     manager.normalize()
-    return manager.save(project.id, raw=True)
+    return manager.save(project.id, raw=raw)
