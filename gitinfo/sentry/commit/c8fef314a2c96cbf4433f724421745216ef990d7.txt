commit c8fef314a2c96cbf4433f724421745216ef990d7
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Tue Oct 2 17:23:19 2018 -0700

    test(integrations): Add a test case for fetch_commits that uses integrations (#9991)

diff --git a/src/sentry/integrations/example/repository.py b/src/sentry/integrations/example/repository.py
new file mode 100644
index 0000000000..1d53629ca7
--- /dev/null
+++ b/src/sentry/integrations/example/repository.py
@@ -0,0 +1,20 @@
+from __future__ import absolute_import
+
+from sentry.plugins import providers
+from sentry.models import Integration
+
+from sentry.integrations.exceptions import IntegrationError
+
+
+class ExampleRepositoryProvider(providers.IntegrationRepositoryProvider):
+    name = 'Example'
+
+    def compare_commits(self, repo, start_sha, end_sha):
+        installation = Integration.objects.get(
+            id=repo.integration_id,
+        ).get_installation(repo.organization_id)
+
+        try:
+            raise IntegrationError("{'error': 'Repository not found'}")
+        except Exception as e:
+            installation.raise_error(e)
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index acf904c899..059727513a 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -204,7 +204,9 @@ def register_extensions():
 
     from sentry import integrations
     from sentry.integrations.bitbucket import BitbucketIntegrationProvider
-    from sentry.integrations.example import ExampleIntegrationProvider, AliasedIntegrationProvider
+    from sentry.integrations.example import (
+        ExampleIntegrationProvider, AliasedIntegrationProvider, ExampleRepositoryProvider
+    )
     from sentry.integrations.github import GitHubIntegrationProvider
     from sentry.integrations.github_enterprise import GitHubEnterpriseIntegrationProvider
     from sentry.integrations.gitlab import GitlabIntegrationProvider
@@ -227,6 +229,10 @@ def register_extensions():
     from sentry.plugins.providers.dummy import DummyRepositoryProvider
 
     bindings.add('repository.provider', DummyRepositoryProvider, id='dummy')
+    bindings.add(
+        'integration-repository.provider',
+        ExampleRepositoryProvider,
+        id='integrations:example')
 
 
 def pytest_runtest_teardown(item):
diff --git a/tests/sentry/tasks/test_commits.py b/tests/sentry/tasks/test_commits.py
index d63fcc4e38..a2178f4efb 100644
--- a/tests/sentry/tasks/test_commits.py
+++ b/tests/sentry/tasks/test_commits.py
@@ -5,7 +5,9 @@ from mock import patch
 from social_auth.models import UserSocialAuth
 
 from sentry.exceptions import InvalidIdentity, PluginError
-from sentry.models import Commit, Deploy, LatestRelease, Release, ReleaseHeadCommit, Repository
+from sentry.models import (
+    Commit, Deploy, Integration, LatestRelease, Release, ReleaseHeadCommit, Repository
+)
 from sentry.tasks.commits import fetch_commits, handle_invalid_identity
 from sentry.testutils import TestCase
 
@@ -265,6 +267,63 @@ class FetchCommitsTest(TestCase):
         assert msg.to == [self.user.email]
         assert 'You can read me' in msg.body
 
+    def test_fetch_error_random_exception_integration(self):
+        self.login_as(user=self.user)
+        org = self.create_organization(owner=self.user, name='baz')
+
+        integration = Integration.objects.create(
+            provider='example',
+            name='Example',
+        )
+        integration.add_organization(org)
+
+        repo = Repository.objects.create(
+            name='example',
+            provider='integrations:example',
+            organization_id=org.id,
+            integration_id=integration.id,
+        )
+        release = Release.objects.create(
+            organization_id=org.id,
+            version='abcabcabc',
+        )
+
+        commit = Commit.objects.create(
+            organization_id=org.id,
+            repository_id=repo.id,
+            key='a' * 40,
+        )
+
+        ReleaseHeadCommit.objects.create(
+            organization_id=org.id,
+            repository_id=repo.id,
+            release=release,
+            commit=commit,
+        )
+
+        refs = [{
+            'repository': repo.name,
+            'commit': 'b' * 40,
+        }]
+
+        release2 = Release.objects.create(
+            organization_id=org.id,
+            version='12345678',
+        )
+
+        with self.tasks():
+            fetch_commits(
+                release_id=release2.id,
+                user_id=self.user.id,
+                refs=refs,
+                previous_release_id=release.id,
+            )
+
+        msg = mail.outbox[-1]
+        assert msg.subject == 'Unable to Fetch Commits'
+        assert msg.to == [self.user.email]
+        assert 'Repository not found' in msg.body
+
 
 class HandleInvalidIdentityTest(TestCase):
     def test_simple(self):
