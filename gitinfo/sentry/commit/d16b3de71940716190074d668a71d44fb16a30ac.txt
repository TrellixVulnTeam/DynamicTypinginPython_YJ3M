commit d16b3de71940716190074d668a71d44fb16a30ac
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Sep 24 15:11:59 2015 -0700

    Move metrics into process and increment tsdb

diff --git a/src/sentry/tsdb/base.py b/src/sentry/tsdb/base.py
index 9592e92d82..beeace6e96 100644
--- a/src/sentry/tsdb/base.py
+++ b/src/sentry/tsdb/base.py
@@ -30,16 +30,19 @@ class TSDBModel(Enum):
     project_total_received = 100
     # the number of events rejected due to rate limiting
     project_total_rejected = 101
-
     # the number of operations
     project_operations = 102
     # the number of operations with an error state
     project_operation_errors = 103
+    # the number of events blocked due to being blacklisted
+    project_total_blacklisted = 104
 
     # the number of events sent to the server
     organization_total_received = 200
     # the number of events rejected due to rate limiting
     organization_total_rejected = 201
+    # the number of events blocked due to being blacklisted
+    organization_total_blacklisted = 202
 
 
 class BaseTSDB(object):
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index b0a13bb01f..6a5e25aa5e 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -183,10 +183,6 @@ class APIView(BaseView):
             if not is_valid_origin(origin, project):
                 raise APIForbidden('Invalid origin: %s' % (origin,))
 
-        if project and not is_valid_ip(request.META['REMOTE_ADDR'], project):
-            metrics.incr('events.blacklisted')
-            raise APIForbidden('Blacklisted IP address: %s' % (request.META['REMOTE_ADDR'],))
-
         # XXX: It seems that the OPTIONS call does not always include custom headers
         if request.method == 'OPTIONS':
             response = self.options(request, project)
@@ -296,7 +292,18 @@ class StoreView(APIView):
     def process(self, request, project, auth, helper, data, **kwargs):
         metrics.incr('events.total')
 
-        event_received.send_robust(ip=request.META['REMOTE_ADDR'], sender=type(self))
+        remote_addr = request.META['REMOTE_ADDR']
+        event_received.send_robust(ip=remote_addr, sender=type(self))
+
+        if not is_valid_ip(remote_addr, project):
+            app.tsdb.incr_multi([
+                (app.tsdb.models.project_total_received, project.id),
+                (app.tsdb.models.project_total_blacklisted, project.id),
+                (app.tsdb.models.organization_total_received, project.organization_id),
+                (app.tsdb.models.organization_total_blacklisted, project.organization_id),
+            ])
+            metrics.incr('events.blacklisted')
+            raise APIForbidden('Blacklisted IP address: %s' % (remote_addr,))
 
         # TODO: improve this API (e.g. make RateLimit act on __ne__)
         rate_limit = safe_execute(app.quotas.is_rate_limited, project=project,
@@ -340,7 +347,7 @@ class StoreView(APIView):
 
         # insert IP address if not available
         if auth.is_public and not scrub_ip_address:
-            helper.ensure_has_ip(data, request.META['REMOTE_ADDR'])
+            helper.ensure_has_ip(data, remote_addr)
 
         event_id = data['event_id']
 
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index e33df3755a..8343337f65 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -69,11 +69,7 @@ class StoreViewTest(TestCase):
 
     @mock.patch('sentry.web.api.is_valid_ip', mock.Mock(return_value=False))
     def test_request_with_backlisted_ip(self):
-        resp = self.client.get(self.path)
-        assert resp.status_code == 403, resp.content
-        resp = self.client.post(self.path)
-        assert resp.status_code == 403, resp.content
-        resp = self.client.options(self.path)
+        resp = self._postWithHeader({})
         assert resp.status_code == 403, resp.content
 
     @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')
