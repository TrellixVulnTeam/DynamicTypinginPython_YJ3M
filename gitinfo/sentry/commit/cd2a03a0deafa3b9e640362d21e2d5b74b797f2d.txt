commit cd2a03a0deafa3b9e640362d21e2d5b74b797f2d
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Jan 28 21:34:11 2012 -0800

    Initial search implementation

diff --git a/sentry/interfaces.py b/sentry/interfaces.py
index 76162eb11d..8b2ebce75a 100644
--- a/sentry/interfaces.py
+++ b/sentry/interfaces.py
@@ -9,6 +9,7 @@ validated and rendered.
 :license: BSD, see LICENSE for more details.
 """
 
+import itertools
 import urlparse
 
 from django.http import QueryDict
@@ -83,6 +84,12 @@ class Interface(object):
     def to_string(self, event):
         return ''
 
+    def get_search_context(self, event):
+        return {
+            # '': ['...'],
+            # 'field_name': ['...'],
+        }
+
 
 class Message(Interface):
     def __init__(self, message, params=()):
@@ -95,6 +102,11 @@ class Message(Interface):
             'params': self.params,
         }
 
+    def get_search_context(self, event):
+        return {
+            '': [self.message] + self.params,
+        }
+
 
 class Query(Interface):
     def __init__(self, query, engine=None):
@@ -107,6 +119,11 @@ class Query(Interface):
             'engine': self.engine,
         }
 
+    def get_search_context(self, event):
+        return {
+            '': [self.query],
+        }
+
 
 class Stacktrace(Interface):
     def __init__(self, frames):
@@ -170,6 +187,11 @@ class Stacktrace(Interface):
 
         return '\n'.join(result)
 
+    def get_search_context(self, event):
+        return {
+            '': list(itertools.chain(*[[f['filename'], f['function'], f['context_line']] for f in self.frames])),
+        }
+
 
 class Exception(Interface):
     def __init__(self, value, type=None, module=None):
@@ -195,6 +217,11 @@ class Exception(Interface):
             'exception_module': self.module,
         })
 
+    def get_search_context(self, event):
+        return {
+            '': [self.value, self.type, self.module]
+        }
+
 
 class Http(Interface):
     score = 100
@@ -285,6 +312,11 @@ class Http(Interface):
             'env': self.env,
         })
 
+    def get_search_context(self, event):
+        return {
+            'url': [self.url],
+        }
+
 
 class Template(Interface):
     def __init__(self, filename, context_line, lineno, pre_context=None, post_context=None,
@@ -328,6 +360,11 @@ class Template(Interface):
 
         return '\n'.join(result)
 
+    def get_search_context(self, event):
+        return {
+            '': [self.abs_path, self.filename, self.context_line, self.pre_context, self.post_context],
+        }
+
 
 class User(Interface):
     pass
diff --git a/sentry/manager.py b/sentry/manager.py
index 25e0aa7488..dd7fcf5791 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -6,6 +6,7 @@ sentry.manager
 :license: BSD, see LICENSE for more details.
 """
 
+from collections import defaultdict
 import datetime
 import hashlib
 import itertools
@@ -590,3 +591,71 @@ class InstanceMetaManager(models.Manager):
             }).values_list('key', 'value'))
             self._metadata[instance.pk] = result
         return self._metadata[instance.pk]
+
+
+class SearchDocumentManager(models.Manager):
+    def _tokenize(self, text):
+        return text.split(' ')
+
+    def search(self, query):
+        tokens = self._tokenize(query)
+        return self.raw("""
+            SELECT SUM(st.times_seen) / sd.total_events as score, sd.group_id
+            FROM sentry_searchdocument as sd
+            INNER JOIN sentry_searchtoken as st
+                ON st.document_id = sd.id
+            WHERE st.field = ''
+                AND st.token IN (%s)
+            GROUP BY score, group_id
+            ORDER BY SUM(st.times_seen) / sd.total_events DESC
+            LIMIT 100 OFFSET 0
+        """ % (', '.join('%s' for i in range(len(tokens))),), tokens)
+
+    def index(self, event):
+        group = event.group
+        document, created = self.get_or_create(
+            project=event.project,
+            group=group,
+            defaults={
+                'total_events': 1,
+                'date_added': group.first_seen,
+                'date_changed': group.last_seen,
+            }
+        )
+        if not created:
+            document.update(
+                total_events=F('total_events') + 1,
+                date_changed=group.last_seen,
+            )
+
+        context = defaultdict(list)
+        for interface in event.interfaces.itervalues():
+            for k, v in interface.get_search_context(event).iteritems():
+                context[k].extend(v)
+
+        context[''].extend([event.message, event.logger, event.server_name])
+
+        token_counts = defaultdict(lambda: defaultdict(int))
+        for field, values in context.iteritems():
+            if field == '':
+                # we only tokenize the base text field
+                values = itertools.chain(*[self._tokenize(v) for v in values])
+            for value in values:
+                if not value:
+                    continue
+                token_counts[field][value] += 1
+
+        # TODO: might be worthwhile to make this update then create
+        for field, tokens in token_counts.iteritems():
+            for token, count in tokens.iteritems():
+                token, created = document.token_set.get_or_create(
+                    field=field,
+                    token=token.lower(),
+                    defaults={
+                        'times_seen': count,
+                    }
+                )
+                if not created:
+                    token.update(
+                        times_seen=F('times_seen') + count,
+                    )
diff --git a/sentry/migrations/0038_auto__add_searchtoken__add_unique_searchtoken_document_field_token__ad.py b/sentry/migrations/0038_auto__add_searchtoken__add_unique_searchtoken_document_field_token__ad.py
new file mode 100644
index 0000000000..258d3a47e3
--- /dev/null
+++ b/sentry/migrations/0038_auto__add_searchtoken__add_unique_searchtoken_document_field_token__ad.py
@@ -0,0 +1,238 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Adding model 'SearchToken'
+        db.create_table('sentry_searchtoken', (
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('document', self.gf('django.db.models.fields.related.ForeignKey')(related_name='token_set', to=orm['sentry.SearchDocument'])),
+            ('field', self.gf('django.db.models.fields.CharField')(default='text', max_length=64)),
+            ('token', self.gf('django.db.models.fields.CharField')(max_length=128)),
+            ('times_seen', self.gf('django.db.models.fields.PositiveIntegerField')(default=1)),
+        ))
+        db.send_create_signal('sentry', ['SearchToken'])
+
+        # Adding unique constraint on 'SearchToken', fields ['document', 'field', 'token']
+        db.create_unique('sentry_searchtoken', ['document_id', 'field', 'token'])
+
+        # Adding model 'SearchDocument'
+        db.create_table('sentry_searchdocument', (
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('project', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sentry.Project'])),
+            ('group', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sentry.Group'])),
+            ('total_events', self.gf('django.db.models.fields.PositiveIntegerField')(default=1)),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+            ('date_changed', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+        ))
+        db.send_create_signal('sentry', ['SearchDocument'])
+
+        # Adding unique constraint on 'SearchDocument', fields ['project', 'group']
+        db.create_unique('sentry_searchdocument', ['project_id', 'group_id'])
+
+
+    def backwards(self, orm):
+        
+        # Removing unique constraint on 'SearchDocument', fields ['project', 'group']
+        db.delete_unique('sentry_searchdocument', ['project_id', 'group_id'])
+
+        # Removing unique constraint on 'SearchToken', fields ['document', 'field', 'token']
+        db.delete_unique('sentry_searchtoken', ['document_id', 'field', 'token'])
+
+        # Deleting model 'SearchToken'
+        db.delete_table('sentry_searchtoken')
+
+        # Deleting model 'SearchDocument'
+        db.delete_table('sentry_searchdocument')
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'sentry.event': {
+            'Meta': {'object_name': 'Event', 'db_table': "'sentry_message'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'time_spent': ('django.db.models.fields.FloatField', [], {'null': 'True'})
+        },
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'logger', 'culprit', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
+            'views': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.View']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.project': {
+            'Meta': {'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'owned_project_set'", 'null': 'True', 'to': "orm['auth.User']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.projectdomain': {
+            'Meta': {'unique_together': "(('project', 'domain'),)", 'object_name': 'ProjectDomain'},
+            'domain': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'domain_set'", 'to': "orm['sentry.Project']"})
+        },
+        'sentry.projectmember': {
+            'Meta': {'unique_together': "(('project', 'user'),)", 'object_name': 'ProjectMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'project_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.searchdocument': {
+            'Meta': {'unique_together': "(('project', 'group'),)", 'object_name': 'SearchDocument'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_changed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'total_events': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'})
+        },
+        'sentry.searchtoken': {
+            'Meta': {'unique_together': "(('document', 'field', 'token'),)", 'object_name': 'SearchToken'},
+            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'token_set'", 'to': "orm['sentry.SearchDocument']"}),
+            'field': ('django.db.models.fields.CharField', [], {'default': "'text'", 'max_length': '64'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'token': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.view': {
+            'Meta': {'object_name': 'View'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
+            'verbose_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'verbose_name_plural': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/models.py b/sentry/models.py
index a990aa64e2..54865fe6dc 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -26,9 +26,9 @@ from django.utils.translation import ugettext_lazy as _
 
 from sentry.conf import settings
 from sentry.manager import GroupManager, ProjectManager, \
-  MetaManager, InstanceMetaManager
+  MetaManager, InstanceMetaManager, SearchDocumentManager
 from sentry.utils import cached_property, \
-                         MockDjangoRequest
+  MockDjangoRequest
 from sentry.utils.models import Model, GzippedDictField
 from sentry.templatetags.sentry_helpers import truncatechars
 
@@ -557,6 +557,28 @@ class MessageCountByMinute(Model):
         return u'group_id=%s, times_seen=%s, date=%s' % (self.group_id, self.times_seen, self.date)
 
 
+class SearchDocument(Model):
+    project = models.ForeignKey(Project)
+    group = models.ForeignKey(Group)
+    total_events = models.PositiveIntegerField(default=1)
+    date_added = models.DateTimeField(default=datetime.now)
+    date_changed = models.DateTimeField(default=datetime.now)
+
+    objects = SearchDocumentManager()
+
+    class Meta:
+        unique_together = (('project', 'group'),)
+
+
+class SearchToken(Model):
+    document = models.ForeignKey(SearchDocument, related_name="token_set")
+    field = models.CharField(max_length=64, default='text')
+    token = models.CharField(max_length=128)
+    times_seen = models.PositiveIntegerField(default=1)
+
+    class Meta:
+        unique_together = (('document', 'field', 'token'),)
+
 ### django-indexer
 
 
