commit 1af7eef7df236b0d7d7f0476ea0499de4d5b70ae
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Tue Sep 24 14:39:16 2019 -0700

    ref(app-platform): Mask auth tokens and client secret when needed (#14808)
    
    * ref(app-platform): Mask auth tokens and client secret when needed

diff --git a/src/sentry/api/endpoints/organization_sentry_apps.py b/src/sentry/api/endpoints/organization_sentry_apps.py
index 8303204301..8c470088b4 100644
--- a/src/sentry/api/endpoints/organization_sentry_apps.py
+++ b/src/sentry/api/endpoints/organization_sentry_apps.py
@@ -16,5 +16,5 @@ class OrganizationSentryAppsEndpoint(OrganizationEndpoint):
             queryset=queryset,
             order_by="-date_added",
             paginator_cls=OffsetPaginator,
-            on_results=lambda x: serialize(x, request.user),
+            on_results=lambda x: serialize(x, request.user, access=request.access),
         )
diff --git a/src/sentry/api/endpoints/sentry_app_details.py b/src/sentry/api/endpoints/sentry_app_details.py
index 003001ab72..200077a446 100644
--- a/src/sentry/api/endpoints/sentry_app_details.py
+++ b/src/sentry/api/endpoints/sentry_app_details.py
@@ -17,7 +17,7 @@ logger = logging.getLogger(__name__)
 
 class SentryAppDetailsEndpoint(SentryAppBaseEndpoint):
     def get(self, request, sentry_app):
-        return Response(serialize(sentry_app, request.user))
+        return Response(serialize(sentry_app, request.user, access=request.access))
 
     @catch_raised_errors
     def put(self, request, sentry_app):
@@ -59,7 +59,7 @@ class SentryAppDetailsEndpoint(SentryAppBaseEndpoint):
                 allowed_origins=result.get("allowedOrigins"),
             )
 
-            return Response(serialize(updated_app, request.user))
+            return Response(serialize(updated_app, request.user, access=request.access))
 
         # log any errors with schema
         if "schema" in serializer.errors:
diff --git a/src/sentry/api/endpoints/sentry_apps.py b/src/sentry/api/endpoints/sentry_apps.py
index 12b4824099..24c0595cfa 100644
--- a/src/sentry/api/endpoints/sentry_apps.py
+++ b/src/sentry/api/endpoints/sentry_apps.py
@@ -45,7 +45,7 @@ class SentryAppsEndpoint(SentryAppsBaseEndpoint):
             queryset=queryset,
             order_by="-date_added",
             paginator_cls=OffsetPaginator,
-            on_results=lambda x: serialize(x, request.user),
+            on_results=lambda x: serialize(x, request.user, access=request.access),
         )
 
     def post(self, request, organization):
@@ -91,7 +91,7 @@ class SentryAppsEndpoint(SentryAppsBaseEndpoint):
             creator = InternalCreator if data.get("isInternal") else Creator
             sentry_app = creator.run(request=request, **data)
 
-            return Response(serialize(sentry_app), status=201)
+            return Response(serialize(sentry_app, access=request.access), status=201)
 
         # log any errors with schema
         if "schema" in serializer.errors:
diff --git a/src/sentry/api/endpoints/sentry_internal_app_tokens.py b/src/sentry/api/endpoints/sentry_internal_app_tokens.py
index 91d25eb66b..d17a83f186 100644
--- a/src/sentry/api/endpoints/sentry_internal_app_tokens.py
+++ b/src/sentry/api/endpoints/sentry_internal_app_tokens.py
@@ -5,6 +5,7 @@ from rest_framework import status
 
 from sentry.api.bases import SentryInternalAppTokenPermission, SentryAppBaseEndpoint
 from sentry.models import ApiToken, SentryAppInstallation
+from sentry.models.sentryapp import MASKED_VALUE
 from sentry.mediators.sentry_app_installation_tokens import Creator
 from sentry.api.serializers.models.apitoken import ApiTokenSerializer
 from sentry.exceptions import ApiTokenLimitError
@@ -19,9 +20,17 @@ class SentryInternalAppTokensEndpoint(SentryAppBaseEndpoint):
 
         tokens = ApiToken.objects.filter(application_id=sentry_app.application_id)
         attrs = {"application": None}
-        return Response(
+
+        token_list = [
             ApiTokenSerializer().serialize(token, attrs, request.user) for token in tokens
-        )
+        ]
+
+        if not sentry_app.show_auth_info(request.access):
+            for token in token_list:
+                token["token"] = MASKED_VALUE
+                token["refreshToken"] = MASKED_VALUE
+
+        return Response(token_list)
 
     def post(self, request, sentry_app):
         if not sentry_app.is_internal:
@@ -40,4 +49,10 @@ class SentryInternalAppTokensEndpoint(SentryAppBaseEndpoint):
 
         # hack so the token is included in the response
         attrs = {"application": None}
-        return Response(ApiTokenSerializer().serialize(api_token, attrs, request.user), status=201)
+        token = ApiTokenSerializer().serialize(api_token, attrs, request.user)
+
+        if not sentry_app.show_auth_info(request.access):
+            token["token"] = MASKED_VALUE
+            token["refreshToken"] = MASKED_VALUE
+
+        return Response(token, status=201)
diff --git a/src/sentry/api/serializers/models/sentry_app.py b/src/sentry/api/serializers/models/sentry_app.py
index 367552ef21..e65454ed5b 100644
--- a/src/sentry/api/serializers/models/sentry_app.py
+++ b/src/sentry/api/serializers/models/sentry_app.py
@@ -4,11 +4,12 @@ from sentry.app import env
 from sentry.auth.superuser import is_active_superuser
 from sentry.api.serializers import Serializer, register
 from sentry.models import SentryApp
+from sentry.models.sentryapp import MASKED_VALUE
 
 
 @register(SentryApp)
 class SentryAppSerializer(Serializer):
-    def serialize(self, obj, attrs, user):
+    def serialize(self, obj, attrs, user, access):
         from sentry.mediators.service_hooks.creator import consolidate_events
 
         data = {
@@ -31,10 +32,13 @@ class SentryAppSerializer(Serializer):
         if is_active_superuser(env.request) or (
             hasattr(user, "get_orgs") and obj.owner in user.get_orgs()
         ):
+            client_secret = (
+                obj.application.client_secret if obj.show_auth_info(access) else MASKED_VALUE
+            )
             data.update(
                 {
                     "clientId": obj.application.client_id,
-                    "clientSecret": obj.application.client_secret,
+                    "clientSecret": client_secret,
                     "owner": {"id": obj.owner.id, "slug": obj.owner.slug},
                 }
             )
diff --git a/src/sentry/models/sentryapp.py b/src/sentry/models/sentryapp.py
index 2972fcff18..e44398cfa8 100644
--- a/src/sentry/models/sentryapp.py
+++ b/src/sentry/models/sentryapp.py
@@ -49,6 +49,8 @@ REQUIRED_EVENT_PERMISSIONS = {
 # events.
 VALID_EVENTS = tuple(itertools.chain(*EVENT_EXPANSION.values()))
 
+MASKED_VALUE = "*" * 64
+
 
 def default_uuid():
     return six.binary_type(uuid.uuid4())
@@ -153,3 +155,7 @@ class SentryApp(ParanoidModel, HasApiScopes):
         return hmac.new(
             key=secret.encode("utf-8"), msg=body.encode("utf-8"), digestmod=sha256
         ).hexdigest()
+
+    def show_auth_info(self, access):
+        encoded_scopes = set({u"%s" % scope for scope in list(access.scopes)})
+        return set(self.scope_list).issubset(encoded_scopes)
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
index c9121dc783..931a1749fb 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
@@ -31,6 +31,7 @@ import {
   removeSentryAppToken,
 } from 'app/actionCreators/sentryAppTokens';
 import {SentryApp, InternalAppApiToken} from 'app/types';
+import Tooltip from 'app/components/tooltip';
 
 class SentryAppFormModel extends FormModel {
   /**
@@ -143,6 +144,14 @@ export default class SentryApplicationDetails extends AsyncView<Props, State> {
     return this.props.route.path === 'new-internal/';
   }
 
+  get showAuthInfo() {
+    const {app} = this.state;
+    if (app && app.clientSecret && app.clientSecret[0] === '*') {
+      return false;
+    }
+    return true;
+  }
+
   onAddToken = async (evt: React.MouseEvent): Promise<void> => {
     evt.preventDefault();
     const {app, tokens} = this.state;
@@ -178,9 +187,18 @@ export default class SentryApplicationDetails extends AsyncView<Props, State> {
         return (
           <StyledPanelItem key={token.token}>
             <TokenItem>
-              <TextCopyInput>
-                {getDynamicText({value: token.token, fixed: 'xxxxxx'})}
-              </TextCopyInput>
+              <Tooltip
+                disabled={this.showAuthInfo}
+                position="right"
+                containerDisplayMode="inline"
+                title={t(
+                  'You do not have access to view these credentials because the permissions for this integration exceed those of your role.'
+                )}
+              >
+                <TextCopyInput>
+                  {getDynamicText({value: token.token, fixed: 'xxxxxx'})}
+                </TextCopyInput>
+              </Tooltip>
             </TokenItem>
             <CreatedDate>
               <CreatedTitle>Created:</CreatedTitle>
@@ -311,9 +329,18 @@ export default class SentryApplicationDetails extends AsyncView<Props, State> {
                 <FormField overflow name="clientSecret" label="Client Secret">
                   {({value}) => {
                     return value ? (
-                      <TextCopyInput>
-                        {getDynamicText({value, fixed: 'PERCY_CLIENT_SECRET'})}
-                      </TextCopyInput>
+                      <Tooltip
+                        disabled={this.showAuthInfo}
+                        position="right"
+                        containerDisplayMode="inline"
+                        title={t(
+                          'You do not have access to view these credentials because the permissions for this integration exceed those of your role.'
+                        )}
+                      >
+                        <TextCopyInput>
+                          {getDynamicText({value, fixed: 'PERCY_CLIENT_SECRET'})}
+                        </TextCopyInput>
+                      </Tooltip>
                     ) : (
                       <em>hidden</em>
                     );
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
index 7ece6a0b5c..e1e8a92377 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
@@ -18,6 +18,7 @@ describe('Sentry Application Details', function() {
 
   const verifyInstallToggle = 'Switch[name="verifyInstall"]';
   const redirectUrlInput = 'Input[name="redirectUrl"]';
+  const maskedValue = '*'.repeat(64);
 
   beforeEach(() => {
     Client.clearMockResponses();
@@ -211,6 +212,45 @@ describe('Sentry Application Details', function() {
     });
   });
 
+  describe('Renders masked values', () => {
+    beforeEach(() => {
+      sentryApp = TestStubs.SentryApp({
+        status: 'internal',
+        clientSecret: maskedValue,
+      });
+      token = TestStubs.SentryAppToken({token: maskedValue, refreshToken: maskedValue});
+      sentryApp.events = ['issue'];
+
+      Client.addMockResponse({
+        url: `/sentry-apps/${sentryApp.slug}/`,
+        body: sentryApp,
+      });
+
+      Client.addMockResponse({
+        url: `/sentry-apps/${sentryApp.slug}/api-tokens/`,
+        body: [token],
+      });
+
+      wrapper = mount(
+        <SentryApplicationDetails params={{appSlug: sentryApp.slug, orgId}} />,
+        TestStubs.routerContext()
+      );
+    });
+
+    it('shows masked tokens', function() {
+      expect(
+        wrapper
+          .find('TextCopyInput input')
+          .first()
+          .prop('value')
+      ).toBe(maskedValue);
+    });
+
+    it('shows masked clientSecret', function() {
+      expect(wrapper.find('#clientSecret input').prop('value')).toBe(maskedValue);
+    });
+  });
+
   describe('Editing internal app tokens', () => {
     beforeEach(() => {
       sentryApp = TestStubs.SentryApp({
diff --git a/tests/sentry/api/endpoints/test_sentry_apps.py b/tests/sentry/api/endpoints/test_sentry_apps.py
index 6f5c37d58c..b8c6d5fcf5 100644
--- a/tests/sentry/api/endpoints/test_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_sentry_apps.py
@@ -11,6 +11,7 @@ from sentry.utils import json
 from sentry.testutils import APITestCase
 from sentry.testutils.helpers import with_feature
 from sentry.models import SentryApp, SentryAppInstallationToken, SentryAppInstallation, ApiToken
+from sentry.models.sentryapp import MASKED_VALUE
 
 
 class SentryAppsTest(APITestCase):
@@ -230,6 +231,36 @@ class GetSentryAppsTest(SentryAppsTest):
         assert self.unpublished_app not in response_uuids
         assert self.unowned_unpublished_app.uuid not in response_uuids
 
+    def test_client_secret_is_masked(self):
+        user = self.create_user(email="bloop@example.com")
+        self.create_member(organization=self.org, user=user)
+        # create an app with higher permissions that what the member role has
+        sentry_app = self.create_sentry_app(
+            name="Boo Far", organization=self.org, scopes=("project:write",)
+        )
+        self.login_as(user=user)
+        url = u"{}?status=unpublished".format(self.url)
+        response = self.client.get(url, format="json")
+        assert {
+            "name": sentry_app.name,
+            "author": sentry_app.author,
+            "slug": sentry_app.slug,
+            "scopes": ["project:write"],
+            "events": [],
+            "status": sentry_app.get_status_display(),
+            "uuid": sentry_app.uuid,
+            "webhookUrl": sentry_app.webhook_url,
+            "redirectUrl": sentry_app.redirect_url,
+            "isAlertable": sentry_app.is_alertable,
+            "verifyInstall": sentry_app.verify_install,
+            "clientId": sentry_app.application.client_id,
+            "clientSecret": MASKED_VALUE,
+            "overview": sentry_app.overview,
+            "allowedOrigins": [],
+            "schema": {},
+            "owner": {"id": self.org.id, "slug": self.org.slug},
+        } in json.loads(response.content)
+
     def test_users_dont_see_unpublished_apps_their_org_owns(self):
         self.login_as(user=self.user)
 
diff --git a/tests/sentry/api/endpoints/test_sentry_internal_app_tokens.py b/tests/sentry/api/endpoints/test_sentry_internal_app_tokens.py
index 6877af4874..7783ac5575 100644
--- a/tests/sentry/api/endpoints/test_sentry_internal_app_tokens.py
+++ b/tests/sentry/api/endpoints/test_sentry_internal_app_tokens.py
@@ -7,6 +7,7 @@ from django.core.urlresolvers import reverse
 from sentry.testutils import APITestCase
 from sentry.utils import json
 from sentry.models import ApiToken
+from sentry.models.sentryapp import MASKED_VALUE
 
 
 class SentryInternalAppTokenTest(APITestCase):
@@ -83,3 +84,20 @@ class GetSentryInternalAppTokenTest(SentryInternalAppTokenTest):
 
         assert response_content[0]["id"] == six.text_type(token.id)
         assert response_content[0]["token"] == token.token
+
+    def test_token_is_masked(self):
+        user = self.create_user(email="meep@example.com")
+        self.create_member(organization=self.org, user=user)
+        # create an app with scopes higher than what a member role has
+        sentry_app = self.create_internal_integration(
+            name="AnothaOne", organization=self.org, scopes=("project:write",)
+        )
+
+        self.login_as(user)
+
+        url = reverse("sentry-api-0-sentry-internal-app-tokens", args=[sentry_app.slug])
+        response = self.client.get(url, format="json")
+        response_content = json.loads(response.content)
+
+        assert response_content[0]["token"] == MASKED_VALUE
+        assert response_content[0]["refreshToken"] == MASKED_VALUE
