commit 4e5af1405c1e9bc57f53aaa84cf2d33b1ac01c28
Author: Jan Michael Auer <account@jauer.org>
Date:   Tue Apr 17 20:04:53 2018 +0200

    feat(ui): Add the minidump and rust platforms (#8064)
    
    * feat(ui): Add the minidump and rust platforms
    
    * ref(minidump): Always render a slash in the minidump URL
    
    * test(wizard): Add fixtures for the minidump and rust platforms

diff --git a/src/sentry/models/projectkey.py b/src/sentry/models/projectkey.py
index ae0228b14b..5340250a48 100644
--- a/src/sentry/models/projectkey.py
+++ b/src/sentry/models/projectkey.py
@@ -180,7 +180,7 @@ class ProjectKey(Model):
         if not endpoint:
             endpoint = options.get('system.url-prefix')
 
-        return '%s%s?sentry_key=%s' % (
+        return '%s%s/?sentry_key=%s' % (
             endpoint,
             reverse('sentry-api-minidump', args=[self.project_id]),
             self.public_key,
diff --git a/src/sentry/static/sentry/app/views/onboarding/utils.js b/src/sentry/static/sentry/app/views/onboarding/utils.js
index eafd3ca954..2f7d1c2de5 100644
--- a/src/sentry/static/sentry/app/views/onboarding/utils.js
+++ b/src/sentry/static/sentry/app/views/onboarding/utils.js
@@ -65,10 +65,11 @@ const backend = [
   'ruby',
   'ruby-rails',
   'ruby-rack',
+  'rust',
   'elixir',
 ];
 
-const desktop = ['cocoa', 'csharp', 'java', 'electron'];
+const desktop = ['cocoa', 'csharp', 'java', 'electron', 'minidump'];
 
 const categoryList = [
   {id: 'popular', name: t('Popular'), platforms: popular},
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.jsx
index 655c7c7f52..4a1b92c481 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.jsx
@@ -2,6 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 
 import {t, tct} from '../../../../locale';
+import ExternalLink from '../../../../components/externalLink';
 import Field from '../../components/forms/field';
 import TextCopyInput from '../../components/forms/textCopyInput';
 import SentryTypes from '../../../../proptypes';
@@ -89,9 +90,13 @@ class ProjectKeyCredentials extends React.Component {
           <Field
             label={t('Minidump Endpoint')}
             help={tct(
-              'Use this endpoint to upload minidump crash reports, for example with Electron, Crashpad or Breakpad.',
+              'Use this endpoint to upload [link], for example with Electron, Crashpad or Breakpad.',
               {
-                /* TODO: add a link to minidump docs */
+                link: (
+                  <ExternalLink href="https://docs.sentry.io/clients/minidump/">
+                    minidump crash reports
+                  </ExternalLink>
+                ),
               }
             )}
             inline={false}
diff --git a/tests/fixtures/integration-docs/_platforms.json b/tests/fixtures/integration-docs/_platforms.json
index 6f9f9d6889..c7fcfb06ff 100644
--- a/tests/fixtures/integration-docs/_platforms.json
+++ b/tests/fixtures/integration-docs/_platforms.json
@@ -162,6 +162,18 @@
       "id": "javascript",
       "name": "JavaScript"
     },
+    {
+      "integrations": [
+        {
+          "link": "https://docs.getsentry.com/hosted/clients/minidump/",
+          "type": "language",
+          "id": "minidump",
+          "name": "Minidump"
+        }
+      ],
+      "id": "minidump",
+      "name": "Minidump"
+    },
     {
       "integrations": [
         {
@@ -330,6 +342,18 @@
       "id": "ruby",
       "name": "Ruby"
     },
+    {
+      "integrations": [
+        {
+          "link": "https://docs.getsentry.com/hosted/clients/rust/",
+          "type": "language",
+          "id": "rust",
+          "name": "Rust"
+        }
+      ],
+      "id": "rust",
+      "name": "Rust"
+    },
     {
       "integrations": [
         {
@@ -341,7 +365,8 @@
       ],
       "id": "swift",
       "name": "Swift"
-    }, {
+    },
+    {
       "integrations": [
         {
           "link": "",
diff --git a/tests/fixtures/integration-docs/minidump.json b/tests/fixtures/integration-docs/minidump.json
new file mode 100644
index 0000000000..46e893f1fb
--- /dev/null
+++ b/tests/fixtures/integration-docs/minidump.json
@@ -0,0 +1,6 @@
+{
+  "html": "<div class=\"section\" id=\"platform-and-language-support\">\n<h2>Platform and Language Support</h2>\n<p>Minidumps are currently supported for <strong>Windows, macOS and Linux</strong>. There is no\nlimitation as to which programming language can be used. Sentry can also\ndemangle symbols from the following languages; other languages will show the\nmangled name instead:</p>\n<ul class=\"simple\">\n<li>C and C++</li>\n<li>ObjectiveC and ObjectiveC++</li>\n<li>Swift</li>\n<li>Rust</li>\n</ul>\n</div>\n\n\n<div class=\"section\" id=\"creating-and-uploading-minidumps\">\n<span id=\"minidump-integration\"></span><h2>Creating and Uploading Minidumps</h2>\n<p>Depending on your operating system and programming language, there are various\nalternatives to create minidumps and upload them to Sentry. See the following\nresources for libraries that support generating minidump crash reports:</p>\n<div class=\"toctree-wrapper compound\">\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://docs.getsentry.com/hosted/clients/minidump/breakpad/\">Google Breakpad</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://docs.getsentry.com/hosted/clients/minidump/crashpad/\">Google Crashpad</a></li>\n</ul>\n</div>\n<p>If you have already integrated a library that generates minidumps and would just\nlike to upload them to Sentry, you need to configure the <em>Minidump Endpoint\nURL</em>, which can be found at <em>Project Settings &gt; Client Keys (DSN)</em>. This\nendpoint expects a <code class=\"docutils literal\"><span class=\"pre\">POST</span></code> request with the minidump in the\n<code class=\"docutils literal\"><span class=\"pre\">upload_file_minidump</span></code> field:</p>\n<div class=\"code shell highlight-python\"><div class=\"highlight\" style=\"background: #ffffff\"><pre style=\"line-height: 125%\"><span></span>$ curl -X POST \\\n  &#39;___MINIDUMP_URL___&#39; \\\n  -F upload_file_minidump=@mini.dmp\n</pre></div>\n</div>\n<p>To send additional information, simply add more form fields to this request. For\na full description of fields accepted by Sentry, see <a class=\"reference internal\" href=\"#minidump-additional\"><span>Passing Additional Data</span></a>.</p>\n</div>\n", 
+  "link": "https://docs.getsentry.com/hosted/clients/minidump/", 
+  "id": "minidump", 
+  "name": "Minidump"
+}
diff --git a/tests/fixtures/integration-docs/rust.json b/tests/fixtures/integration-docs/rust.json
new file mode 100644
index 0000000000..81ae445a54
--- /dev/null
+++ b/tests/fixtures/integration-docs/rust.json
@@ -0,0 +1,6 @@
+{
+  "html": "<div class=\"section\" id=\"installation\">\n<h2>Installation</h2>\n<p>Sentry-Rust is distributed as a normal crate from crates.io.  You can add\nit to your project as a dependency in your <cite>Cargo.toml</cite> file:</p>\n<div class=\"highlight-python\"><div class=\"highlight\" style=\"background: #ffffff\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #111111\">[dependencies]</span>\n<span style=\"color: #111111\">sentry</span> <span style=\"color: #4b4f5c\">=</span> <span style=\"color: #e8535a\">&quot;0.3&quot;</span>\n</pre></div>\n</div>\n<p>Additionally you can configure a bunch of features to enable or disable\nfunctionality in the crate.  By default the most common features are\ncompiled into the crate.  For a list of features that are available refer\nto the <a class=\"reference external\" href=\"https://docs.rs/sentry\">API Documentation</a>.</p>\n</div>\n\n\n<div class=\"section\" id=\"configuring-the-client\">\n<h2>Configuring the Client</h2>\n<p>The client is configured by calling <code class=\"docutils literal\"><span class=\"pre\">sentry::init</span></code> with a value that can\nbe converted into a configuration object.  These are the most common\nvalues:</p>\n<ul class=\"simple\">\n<li><em>an empty tuple</em>: in that case the client is configured from the\n<span class=\"target\" id=\"index-0\"></span><code class=\"xref std std-envvar docutils literal\"><span class=\"pre\">SENTRY_DSN</span></code> environment variable.</li>\n<li><em>a string holding a DSN</em>: if you pass a string then a DSN is parsed\nand the client is initialized with that DSN.</li>\n<li><em>a tuple in the form (dsn, options)</em>: This is a form where the client\nis configured with a DSN plus an options object that allows you to\nconfigure additional features.</li>\n</ul>\n<p>This is the most common case for client configuration:</p>\n<div class=\"highlight-rust\"><div class=\"highlight\" style=\"background: #ffffff\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #2eb0f7\">extern</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #2eb0f7\">crate</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #111111\">sentry;</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n\n<span style=\"color: #2eb0f7\">fn</span> <span style=\"color: #111111\">main()</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #111111\">{</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n<span style=\"color: #f8f8f8; text-decoration: underline\">    </span><span style=\"color: #111111\">sentry</span>::<span style=\"color: #111111\">init(</span><span style=\"color: #e8535a\">&quot;___PUBLIC_DSN___&quot;</span><span style=\"color: #111111\">);</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n<span style=\"color: #f8f8f8; text-decoration: underline\">    </span><span style=\"color: #34c08b; font-style: italic\">// code using sentry goes here.</span>\n<span style=\"color: #111111\">}</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n</pre></div>\n</div>\n<p>To configure releases automatically you can use the\n<code class=\"docutils literal\"><span class=\"pre\">sentry_crate_release!</span></code> macro in combination with the tuple config\nsyntax:</p>\n<div class=\"highlight-rust\"><div class=\"highlight\" style=\"background: #ffffff\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #34c08b\">#[macro_use]</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #2eb0f7\">extern</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #2eb0f7\">crate</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #111111\">sentry;</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n\n<span style=\"color: #2eb0f7\">fn</span> <span style=\"color: #111111\">main()</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #111111\">{</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n<span style=\"color: #f8f8f8; text-decoration: underline\">    </span><span style=\"color: #111111\">sentry</span>::<span style=\"color: #111111\">init((</span><span style=\"color: #e8535a\">&quot;___PUBLIC_DSN___&quot;</span><span style=\"color: #111111\">,</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #111111\">sentry</span>::<span style=\"color: #111111\">ClientOptions</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #111111\">{</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n<span style=\"color: #f8f8f8; text-decoration: underline\">        </span><span style=\"color: #111111\">release</span>: <span style=\"color: #111111\">sentry_crate_release</span><span style=\"color: #4b4f5c\">!</span><span style=\"color: #111111\">(),</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n<span style=\"color: #f8f8f8; text-decoration: underline\">        </span><span style=\"color: #111111\">..</span><span style=\"color: #2eb0f7\">Default</span>::<span style=\"color: #111111\">default()</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n<span style=\"color: #f8f8f8; text-decoration: underline\">    </span><span style=\"color: #111111\">}));</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n<span style=\"color: #f8f8f8; text-decoration: underline\">    </span><span style=\"color: #34c08b; font-style: italic\">// code using sentry goes here.</span>\n<span style=\"color: #111111\">}</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n</pre></div>\n</div>\n</div>\n\n\n<div class=\"section\" id=\"reporting-errors\">\n<h2>Reporting Errors</h2>\n<p>Once Sentry is configured errors and other events can be emitted.  Since\nRust has different mechanisms by which errors can be issued different\nfunctionality is provided for them.  By default support for the new\n<a class=\"reference external\" href=\"https://docs.rs/failure\">failure</a> error system is provided.</p>\n<p>For instance to report a <code class=\"docutils literal\"><span class=\"pre\">failure::Error</span></code> this code can be used:</p>\n<div class=\"highlight-rust\"><div class=\"highlight\" style=\"background: #ffffff\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #2eb0f7\">use</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #111111\">sentry</span>::<span style=\"color: #111111\">integrations</span>::<span style=\"color: #111111\">failure</span>::<span style=\"color: #111111\">capture_error;</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n\n<span style=\"color: #2eb0f7\">let</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #111111\">result</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #4b4f5c\">=</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #2eb0f7\">match</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #111111\">a_function_that_might_fail()</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #111111\">{</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n<span style=\"color: #f8f8f8; text-decoration: underline\">    </span><span style=\"color: #2eb0f7\">Ok</span><span style=\"color: #111111\">(val)</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #4b4f5c\">=&gt;</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #111111\">val,</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n<span style=\"color: #f8f8f8; text-decoration: underline\">    </span><span style=\"color: #2eb0f7\">Err</span><span style=\"color: #111111\">(err)</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #4b4f5c\">=&gt;</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #111111\">{</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n<span style=\"color: #f8f8f8; text-decoration: underline\">        </span><span style=\"color: #111111\">capture_error(</span><span style=\"color: #4b4f5c\">&amp;</span><span style=\"color: #111111\">err);</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n<span style=\"color: #f8f8f8; text-decoration: underline\">        </span><span style=\"color: #2eb0f7\">return</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #2eb0f7\">Err</span><span style=\"color: #111111\">(err);</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n<span style=\"color: #f8f8f8; text-decoration: underline\">    </span><span style=\"color: #111111\">}</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n<span style=\"color: #111111\">};</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n</pre></div>\n</div>\n<p>For this particular case a shortcut is also provided:</p>\n<div class=\"highlight-rust\"><div class=\"highlight\" style=\"background: #ffffff\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #2eb0f7\">use</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #111111\">sentry</span>::<span style=\"color: #111111\">integrations</span>::<span style=\"color: #111111\">failure</span>::<span style=\"color: #111111\">tap_error;</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n\n<span style=\"color: #2eb0f7\">let</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #111111\">result</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #4b4f5c\">=</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #111111\">tap_error(a_function_that_might_fail())</span><span style=\"color: #4b4f5c\">?</span><span style=\"color: #111111\">;</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n</pre></div>\n</div>\n<p>Similarly the functions <code class=\"docutils literal\"><span class=\"pre\">capture_fail</span></code> and <code class=\"docutils literal\"><span class=\"pre\">tap_fail</span></code> can be used to\nwork with <cite>Fail</cite> trait objects instead.</p>\n</div>\n\n\n<div class=\"section\" id=\"catching-panics\">\n<h2>Catching Panics</h2>\n<p>To automatically catch panics the panic integration can be used:</p>\n<div class=\"highlight-rust\"><div class=\"highlight\" style=\"background: #ffffff\"><pre style=\"line-height: 125%\"><span></span><span style=\"color: #2eb0f7\">use</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #111111\">sentry</span>::<span style=\"color: #111111\">integrations</span>::<span style=\"color: #111111\">panic</span>::<span style=\"color: #111111\">register_panic_handler;</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n\n<span style=\"color: #2eb0f7\">fn</span> <span style=\"color: #111111\">main()</span><span style=\"color: #f8f8f8; text-decoration: underline\"> </span><span style=\"color: #111111\">{</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n<span style=\"color: #f8f8f8; text-decoration: underline\">    </span><span style=\"color: #111111\">sentry</span>::<span style=\"color: #111111\">init(...);</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n<span style=\"color: #f8f8f8; text-decoration: underline\">    </span><span style=\"color: #111111\">register_panic_handler();</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n<span style=\"color: #111111\">}</span><span style=\"color: #f8f8f8; text-decoration: underline\"></span>\n</pre></div>\n</div>\n</div>\n", 
+  "link": "https://docs.getsentry.com/hosted/clients/rust/", 
+  "id": "rust", 
+  "name": "Rust"
+}
diff --git a/tests/js/spec/views/onboarding/project/__snapshots__/platformpicker.spec.jsx.snap b/tests/js/spec/views/onboarding/project/__snapshots__/platformpicker.spec.jsx.snap
index 76d1c7326b..3ba90beccb 100644
--- a/tests/js/spec/views/onboarding/project/__snapshots__/platformpicker.spec.jsx.snap
+++ b/tests/js/spec/views/onboarding/project/__snapshots__/platformpicker.spec.jsx.snap
@@ -1182,6 +1182,36 @@ exports[`PlatformPicker render() should update State.tab onClick when particular
           </h5>
         </span>
       </PlatformCard>
+      <PlatformCard
+        className=""
+        key="minidump"
+        onClick={[Function]}
+        platform="minidump"
+      >
+        <span
+          className="platform-card"
+          onClick={[Function]}
+        >
+          <PlatformiconTile
+            className=""
+            onClick={[Function]}
+            platform="minidump"
+          >
+            <li
+              className="platform-tile list-unstyled minidump minidump "
+            >
+              <span
+                className="platformicon platformicon-minidump"
+              />
+            </li>
+          </PlatformiconTile>
+          <h5>
+             
+            Minidump
+             
+          </h5>
+        </span>
+      </PlatformCard>
       <PlatformCard
         className=""
         key="node-connect"
@@ -1842,6 +1872,36 @@ exports[`PlatformPicker render() should update State.tab onClick when particular
           </h5>
         </span>
       </PlatformCard>
+      <PlatformCard
+        className=""
+        key="rust"
+        onClick={[Function]}
+        platform="rust"
+      >
+        <span
+          className="platform-card"
+          onClick={[Function]}
+        >
+          <PlatformiconTile
+            className=""
+            onClick={[Function]}
+            platform="rust"
+          >
+            <li
+              className="platform-tile list-unstyled rust rust "
+            >
+              <span
+                className="platformicon platformicon-rust"
+              />
+            </li>
+          </PlatformiconTile>
+          <h5>
+             
+            Rust
+             
+          </h5>
+        </span>
+      </PlatformCard>
       <PlatformCard
         className=""
         key="swift"
diff --git a/tests/sentry/models/test_projectkey.py b/tests/sentry/models/test_projectkey.py
index f9e59ff797..de8c1a8242 100644
--- a/tests/sentry/models/test_projectkey.py
+++ b/tests/sentry/models/test_projectkey.py
@@ -55,4 +55,4 @@ class ProjectKeyTest(TestCase):
         assert key.dsn_private == 'http://abc:xyz@testserver/1'
         assert key.dsn_public == 'http://abc@testserver/1'
         assert key.csp_endpoint == 'http://testserver/api/1/csp-report/?sentry_key=abc'
-        assert key.minidump_endpoint == 'http://testserver/api/1/minidump?sentry_key=abc'
+        assert key.minidump_endpoint == 'http://testserver/api/1/minidump/?sentry_key=abc'
