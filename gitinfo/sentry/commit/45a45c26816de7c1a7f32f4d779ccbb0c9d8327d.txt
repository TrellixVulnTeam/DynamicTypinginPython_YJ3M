commit 45a45c26816de7c1a7f32f4d779ccbb0c9d8327d
Author: Katie Byers <katie.byers@sentry.io>
Date:   Fri Oct 11 05:05:30 2019 -0700

    fix(event processing): Extend data scrubbing to all user attributes (#14812)
    
    During event processing, after normalization, user data looks like this:
    
    ```
    user = {
        "id": "1226",
        "email": "hi@hello.com",
        # other standard attributes (name, username, ip_address, geo)
        "data": {
            "non-standard key 1": "stuff",
            "non-standard key 2": "things",
        },
    }
    ```
    Currently, we only run `user["data"]` through the data scrubber. This means that there's no way to scrub PII like name, email, etc.*
    
    This change:
    - extends the scrubbing to all user data
    - removes filtered entries from the data used to display the user summary at the top of event details, so only good data comes through**
    - makes sure that even if data is filtered, we don't end up with a circle with a `[` in the center as the user avatar, in either the user summary or user context section**
    - tests the whole business
    
    
    * This in spite of the fact that our exemplar blacklist field is, in fact, `email`.
    
    ** These two will have to be revisited once the mask value becomes dynamic.

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 8a0a6cff61..223a3a5440 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -273,6 +273,9 @@ OK_PLUGIN_SAVED = _("Configuration for the {name} integration has been saved.")
 
 WARN_SESSION_EXPIRED = "Your session has expired."  # TODO: translate this
 
+# If this value changes, also change it in src/sentry/static/sentry/app/constants/index.tsx
+# TODO(kmclb): once relay is doing the filtering, this will change, at minimum to become
+# "DEFAULT_FILTER_MASK" or some such, since the mask value will be dynamic
 FILTER_MASK = "[Filtered]"
 
 # Maximum length of a symbol
diff --git a/src/sentry/static/sentry/app/components/events/contextSummary.jsx b/src/sentry/static/sentry/app/components/events/contextSummary.jsx
index 9252f512e5..43f2caefcb 100644
--- a/src/sentry/static/sentry/app/components/events/contextSummary.jsx
+++ b/src/sentry/static/sentry/app/components/events/contextSummary.jsx
@@ -3,6 +3,7 @@ import React from 'react';
 
 import Avatar from 'app/components/avatar';
 import DeviceName from 'app/components/deviceName';
+import {removeFilterMaskedEntries} from 'app/components/events/interfaces/utils';
 import SentryTypes from 'app/sentryTypes';
 import {t} from 'app/locale';
 import {objectIsEmpty} from 'app/utils';
@@ -25,7 +26,7 @@ class NoSummary extends React.Component {
     return (
       <div className="context-item">
         <span className="context-item-icon" />
-        <h3>{this.props.title}</h3>
+        <h3 data-test-id="no-summary-title">{this.props.title}</h3>
       </div>
     );
   }
@@ -103,13 +104,13 @@ export class OsSummary extends React.Component {
   }
 }
 
-class UserSummary extends React.Component {
+export class UserSummary extends React.Component {
   static propTypes = {
     data: PropTypes.object.isRequired,
   };
 
   render() {
-    const user = this.props.data;
+    const user = removeFilterMaskedEntries(this.props.data);
 
     if (objectIsEmpty(user)) {
       return <NoSummary title={t('Unknown User')} />;
@@ -130,7 +131,7 @@ class UserSummary extends React.Component {
         ) : (
           <span className="context-item-icon" />
         )}
-        <h3>{userTitle}</h3>
+        <h3 data-test-id="user-title">{userTitle}</h3>
         {user.id && user.id !== userTitle ? (
           <p>
             <strong>{t('ID:')}</strong> {user.id}
diff --git a/src/sentry/static/sentry/app/components/events/contexts/user.jsx b/src/sentry/static/sentry/app/components/events/contexts/user.jsx
index d2d6d4697c..a144f991c6 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/user.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/user.jsx
@@ -7,6 +7,7 @@ import Avatar from 'app/components/avatar';
 import ErrorBoundary from 'app/components/errorBoundary';
 import ExternalLink from 'app/components/links/externalLink';
 import KeyValueList from 'app/components/events/interfaces/keyValueList';
+import {removeFilterMaskedEntries} from 'app/components/events/interfaces/utils';
 
 const EMAIL_REGEX = /[^@]+@[^\.]+\..+/;
 
@@ -20,7 +21,7 @@ class UserContextType extends React.Component {
     const builtins = [];
     const children = [];
 
-    // Handle our native attributes special
+    // Handle our native attributes specially
     user.id && builtins.push(['ID', <pre>{user.id}</pre>]);
     user.email &&
       builtins.push([
@@ -46,7 +47,7 @@ class UserContextType extends React.Component {
     return (
       <div className="user-widget">
         <div className="pull-left">
-          <Avatar user={user} size={48} gravatar={false} />
+          <Avatar user={removeFilterMaskedEntries(user)} size={48} gravatar={false} />
         </div>
         <table className="key-value table">
           <tbody>
@@ -56,7 +57,11 @@ class UserContextType extends React.Component {
                   <td className="key" key="0">
                     {key}
                   </td>
-                  <td className="value" key="1">
+                  <td
+                    className="value"
+                    key="1"
+                    data-test-id={`user-context-${key.toLowerCase()}-value`}
+                  >
                     {value}
                   </td>
                 </tr>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
index 8ac3e664c4..928fd70055 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
@@ -2,6 +2,7 @@ import {isEmpty, isString} from 'lodash';
 import * as Sentry from '@sentry/browser';
 import queryString from 'query-string';
 
+import {FILTER_MASK} from 'app/constants';
 import {defined} from 'app/utils';
 
 export function escapeQuotes(v) {
@@ -123,3 +124,14 @@ export function objectToSortedTupleArray(obj) {
       return keyA < keyB ? -1 : 1;
     });
 }
+
+// for context summaries and avatars
+export function removeFilterMaskedEntries(rawData) {
+  const cleanedData = {};
+  for (const key of Object.getOwnPropertyNames(rawData)) {
+    if (rawData[key] !== FILTER_MASK) {
+      cleanedData[key] = rawData[key];
+    }
+  }
+  return cleanedData;
+}
diff --git a/src/sentry/static/sentry/app/constants/index.tsx b/src/sentry/static/sentry/app/constants/index.tsx
index 0e0995d8cd..d81230675e 100644
--- a/src/sentry/static/sentry/app/constants/index.tsx
+++ b/src/sentry/static/sentry/app/constants/index.tsx
@@ -205,3 +205,8 @@ export const DEPLOY_PREVIEW_CONFIG = process.env.DEPLOY_PREVIEW_CONFIG;
 // Webpack configures EXPERIMENTAL_SPA.
 // eslint-disable-next-line no-undef
 export const EXPERIMENTAL_SPA = process.env.EXPERIMENTAL_SPA;
+
+// so we don't use filtered values in certain display contexts
+// TODO(kmclb): once relay is doing the scrubbing, the masking value will be dynamic,
+// so this will have to change
+export const FILTER_MASK = '[Filtered]';
diff --git a/src/sentry/utils/data_scrubber.py b/src/sentry/utils/data_scrubber.py
index 73aae34bd2..e4acb8e9d9 100644
--- a/src/sentry/utils/data_scrubber.py
+++ b/src/sentry/utils/data_scrubber.py
@@ -163,10 +163,10 @@ class SensitiveDataFilter(object):
                 # already been decoded by the request interface.
                 data[n] = varmap(self.sanitize, data[n])
 
-    def filter_user(self, data):
-        if not data.get("data"):
-            return
-        data["data"] = varmap(self.sanitize, data["data"])
+    def filter_user(self, user):
+        for key in user:
+            if user[key]:  # no need to scrub falsy values, as there's no data there
+                user[key] = varmap(self.sanitize, user[key], name=key)
 
     def filter_crumb(self, data):
         for key in "data", "message":
diff --git a/tests/js/spec/components/events/__snapshots__/contextSummary.spec.jsx.snap b/tests/js/spec/components/events/__snapshots__/contextSummary.spec.jsx.snap
index dc88284ea5..24e6020354 100644
--- a/tests/js/spec/components/events/__snapshots__/contextSummary.spec.jsx.snap
+++ b/tests/js/spec/components/events/__snapshots__/contextSummary.spec.jsx.snap
@@ -1,8 +1,38 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
-exports[`ContextSummary render() should bail out with empty contexts 1`] = `""`;
+exports[`ContextSummary render() renders at least three contexts 1`] = `
+<div
+  className="context-summary"
+>
+  <UserSummary
+    data={
+      Object {
+        "email": "mail@example.org",
+        "id": "1",
+      }
+    }
+    key="user"
+  />
+  <GenericSummary
+    data={Object {}}
+    key="browser"
+    unknownTitle="Unknown Browser"
+  />
+  <DeviceSummary
+    data={
+      Object {
+        "arch": "x86",
+        "family": "iOS",
+        "model": "iPhone10,5",
+        "type": "device",
+      }
+    }
+    key="device"
+  />
+</div>
+`;
 
-exports[`ContextSummary render() should prefer client_os over os 1`] = `
+exports[`ContextSummary render() renders client_os too 1`] = `
 <div
   className="context-summary"
 >
@@ -51,39 +81,11 @@ exports[`ContextSummary render() should prefer client_os over os 1`] = `
 </div>
 `;
 
-exports[`ContextSummary render() should render at least three contexts 1`] = `
-<div
-  className="context-summary"
->
-  <UserSummary
-    data={
-      Object {
-        "email": "mail@example.org",
-        "id": "1",
-      }
-    }
-    key="user"
-  />
-  <GenericSummary
-    data={Object {}}
-    key="browser"
-    unknownTitle="Unknown Browser"
-  />
-  <DeviceSummary
-    data={
-      Object {
-        "arch": "x86",
-        "family": "iOS",
-        "model": "iPhone10,5",
-        "type": "device",
-      }
-    }
-    key="device"
-  />
-</div>
-`;
+exports[`ContextSummary render() renders nothing with a single user context 1`] = `""`;
 
-exports[`ContextSummary render() should render client_os too 1`] = `
+exports[`ContextSummary render() renders nothing without contexts 1`] = `""`;
+
+exports[`ContextSummary render() renders up to four contexts 1`] = `
 <div
   className="context-summary"
 >
@@ -127,16 +129,14 @@ exports[`ContextSummary render() should render client_os too 1`] = `
         "version": "10.13.4",
       }
     }
-    key="client_os"
+    key="os"
   />
 </div>
 `;
 
-exports[`ContextSummary render() should render nothing with a single user context 1`] = `""`;
-
-exports[`ContextSummary render() should render nothing without contexts 1`] = `""`;
+exports[`ContextSummary render() should bail out with empty contexts 1`] = `""`;
 
-exports[`ContextSummary render() should render up to four contexts 1`] = `
+exports[`ContextSummary render() should prefer client_os over os 1`] = `
 <div
   className="context-summary"
 >
@@ -180,7 +180,7 @@ exports[`ContextSummary render() should render up to four contexts 1`] = `
         "version": "10.13.4",
       }
     }
-    key="os"
+    key="client_os"
   />
 </div>
 `;
@@ -276,7 +276,7 @@ exports[`ContextSummary render() should skip non-default named contexts 1`] = `
 </div>
 `;
 
-exports[`GpuSummary render() should render name and vendor 1`] = `
+exports[`GpuSummary render() renders name and vendor 1`] = `
 <div
   className="context-item arm"
 >
@@ -296,7 +296,7 @@ exports[`GpuSummary render() should render name and vendor 1`] = `
 </div>
 `;
 
-exports[`GpuSummary render() should render unknown when no vendor 1`] = `
+exports[`GpuSummary render() renders unknown when no vendor 1`] = `
 <div
   className="context-item apple-a"
 >
@@ -316,7 +316,7 @@ exports[`GpuSummary render() should render unknown when no vendor 1`] = `
 </div>
 `;
 
-exports[`OsSummary render() should render the kernel version when no version 1`] = `
+exports[`OsSummary render() renders the kernel version when no version 1`] = `
 <div
   className="context-item mac-os-x"
 >
@@ -336,7 +336,7 @@ exports[`OsSummary render() should render the kernel version when no version 1`]
 </div>
 `;
 
-exports[`OsSummary render() should render the version string 1`] = `
+exports[`OsSummary render() renders the version string 1`] = `
 <div
   className="context-item mac-os-x"
 >
@@ -356,7 +356,7 @@ exports[`OsSummary render() should render the version string 1`] = `
 </div>
 `;
 
-exports[`OsSummary render() should render unknown when no version 1`] = `
+exports[`OsSummary render() renders unknown when no version 1`] = `
 <div
   className="context-item mac-os-x"
 >
diff --git a/tests/js/spec/components/events/contextSummary.spec.jsx b/tests/js/spec/components/events/contextSummary.spec.jsx
index 247f388d3a..d55dc7d33d 100644
--- a/tests/js/spec/components/events/contextSummary.spec.jsx
+++ b/tests/js/spec/components/events/contextSummary.spec.jsx
@@ -1,10 +1,12 @@
 import React from 'react';
-import {shallow} from 'enzyme';
+import {shallow, mount} from 'enzyme';
 
 import ContextSummary, {
   OsSummary,
   GpuSummary,
+  UserSummary,
 } from 'app/components/events/contextSummary';
+import {FILTER_MASK} from 'app/constants';
 
 const CONTEXT_USER = {
   email: 'mail@example.org',
@@ -47,7 +49,7 @@ const CONTEXT_BROWSER = {
 
 describe('ContextSummary', function() {
   describe('render()', function() {
-    it('should render nothing without contexts', () => {
+    it('renders nothing without contexts', () => {
       const event = {
         id: '',
         contexts: {},
@@ -57,7 +59,7 @@ describe('ContextSummary', function() {
       expect(wrapper).toMatchSnapshot();
     });
 
-    it('should render nothing with a single user context', () => {
+    it('renders nothing with a single user context', () => {
       const event = {
         id: '',
         user: CONTEXT_USER,
@@ -82,7 +84,7 @@ describe('ContextSummary', function() {
       expect(wrapper).toMatchSnapshot();
     });
 
-    it('should render at least three contexts', () => {
+    it('renders at least three contexts', () => {
       const event = {
         id: '',
         user: CONTEXT_USER,
@@ -95,7 +97,7 @@ describe('ContextSummary', function() {
       expect(wrapper).toMatchSnapshot();
     });
 
-    it('should render up to four contexts', () => {
+    it('renders up to four contexts', () => {
       const event = {
         id: '',
         user: CONTEXT_USER,
@@ -127,7 +129,7 @@ describe('ContextSummary', function() {
       expect(wrapper).toMatchSnapshot();
     });
 
-    it('should render client_os too', () => {
+    it('renders client_os too', () => {
       const event = {
         id: '',
         user: CONTEXT_USER,
@@ -177,7 +179,7 @@ describe('ContextSummary', function() {
 
 describe('OsSummary', function() {
   describe('render()', function() {
-    it('should render the version string', () => {
+    it('renders the version string', () => {
       const os = {
         kernel_version: '17.5.0',
         version: '10.13.4',
@@ -190,7 +192,7 @@ describe('OsSummary', function() {
       expect(wrapper).toMatchSnapshot();
     });
 
-    it('should render the kernel version when no version', () => {
+    it('renders the kernel version when no version', () => {
       const os = {
         kernel_version: '17.5.0',
         type: 'os',
@@ -202,7 +204,7 @@ describe('OsSummary', function() {
       expect(wrapper).toMatchSnapshot();
     });
 
-    it('should render unknown when no version', () => {
+    it('renders unknown when no version', () => {
       const os = {
         type: 'os',
         build: '17E199',
@@ -217,7 +219,7 @@ describe('OsSummary', function() {
 
 describe('GpuSummary', function() {
   describe('render()', function() {
-    it('should render name and vendor', () => {
+    it('renders name and vendor', () => {
       const gpu = {
         name: 'Mali-T880',
         vendor_name: 'ARM',
@@ -228,7 +230,7 @@ describe('GpuSummary', function() {
       expect(wrapper).toMatchSnapshot();
     });
 
-    it('should render unknown when no vendor', () => {
+    it('renders unknown when no vendor', () => {
       const gpu = {
         type: 'gpu',
         name: 'Apple A8 GPU',
@@ -239,3 +241,132 @@ describe('GpuSummary', function() {
     });
   });
 });
+
+describe('UserSummary', function() {
+  describe('render', function() {
+    it('prefers email, then IP, then id, then username for title', function() {
+      const user1 = {
+        email: 'maisey@dogsrule.com',
+        ip_address: '12.31.20.12',
+        id: '26',
+        username: 'maiseythedog',
+        name: 'Maisey Dog',
+        data: {siblings: ['Charlie Dog'], dreamsOf: 'squirrels'},
+      };
+
+      const wrapper1 = shallow(<UserSummary data={user1} />);
+      expect(wrapper1.find('[data-test-id="user-title"]').text()).toEqual(user1.email);
+
+      const user2 = {
+        ip_address: '12.31.20.12',
+        id: '26',
+        username: 'maiseythedog',
+        name: 'Maisey Dog',
+        data: {siblings: ['Charlie Dog'], dreamsOf: 'squirrels'},
+      };
+
+      const wrapper2 = shallow(<UserSummary data={user2} />);
+      expect(wrapper2.find('[data-test-id="user-title"]').text()).toEqual(
+        user2.ip_address
+      );
+
+      const user3 = {
+        id: '26',
+        username: 'maiseythedog',
+        name: 'Maisey Dog',
+        data: {siblings: ['Charlie Dog'], dreamsOf: 'squirrels'},
+      };
+
+      const wrapper3 = shallow(<UserSummary data={user3} />);
+      expect(wrapper3.find('[data-test-id="user-title"]').text()).toEqual(user3.id);
+
+      const user4 = {
+        username: 'maiseythedog',
+        name: 'Maisey Dog',
+        data: {siblings: ['Charlie Dog'], dreamsOf: 'squirrels'},
+      };
+
+      const wrapper4 = shallow(<UserSummary data={user4} />);
+      expect(wrapper4.find('[data-test-id="user-title"]').text()).toEqual(user4.username);
+    });
+
+    it('renders NoSummary if no email, IP, id, or username', function() {
+      const user = {
+        name: 'Maisey Dog',
+        data: {siblings: ['Charlie Dog'], dreamsOf: 'squirrels'},
+      };
+
+      const wrapper = mount(<UserSummary data={user} />);
+      expect(wrapper.find('[data-test-id="user-title"]')).toHaveLength(0);
+      expect(wrapper.find('[data-test-id="no-summary-title"]').text()).toEqual(
+        'Unknown User'
+      );
+    });
+
+    it('does not use filtered values for title', function() {
+      const user1 = {
+        email: FILTER_MASK,
+      };
+
+      const wrapper1 = mount(<UserSummary data={user1} />);
+      expect(wrapper1.find('[data-test-id="user-title"]')).toHaveLength(0);
+      expect(wrapper1.find('[data-test-id="no-summary-title"]').text()).toEqual(
+        'Unknown User'
+      );
+
+      // TODO: currently, the IP filter just eliminates IP addresses rather than
+      // filtering them like other user data, so here, where you'd expect a filtered
+      // IP address, there isn't one. Add a similar entry to the above and below
+      // if/when that changes.
+
+      const user2 = {
+        id: FILTER_MASK,
+      };
+
+      const wrapper2 = mount(<UserSummary data={user2} />);
+      expect(wrapper2.find('[data-test-id="user-title"]')).toHaveLength(0);
+      expect(wrapper2.find('[data-test-id="no-summary-title"]').text()).toEqual(
+        'Unknown User'
+      );
+
+      const user3 = {
+        username: FILTER_MASK,
+      };
+
+      const wrapper3 = mount(<UserSummary data={user3} />);
+      expect(wrapper3.find('[data-test-id="user-title"]')).toHaveLength(0);
+      expect(wrapper3.find('[data-test-id="no-summary-title"]').text()).toEqual(
+        'Unknown User'
+      );
+    });
+
+    it('does not use filtered values for avatar', function() {
+      // id is never used for avatar purposes, but is enough to keep us from
+      // ending up with a NoSummary component where the UserSummary component
+      // should be
+      const user1 = {
+        id: '26',
+        name: FILTER_MASK,
+      };
+
+      const wrapper1 = mount(<UserSummary data={user1} />);
+      expect(wrapper1.find('LetterAvatar').text()).toEqual('?');
+
+      const user2 = {
+        id: '26',
+        email: FILTER_MASK,
+      };
+
+      const wrapper2 = mount(<UserSummary data={user2} />);
+      expect(wrapper2.find('LetterAvatar').text()).toEqual('?');
+
+      const user3 = {
+        id: '26',
+        username: FILTER_MASK,
+      };
+
+      const wrapper3 = mount(<UserSummary data={user3} />);
+      expect(wrapper3.find('LetterAvatar').text()).toEqual('?');
+    });
+  });
+});
diff --git a/tests/js/spec/components/events/interfaces/contexts.spec.jsx b/tests/js/spec/components/events/interfaces/contexts.spec.jsx
new file mode 100644
index 0000000000..9697b8e683
--- /dev/null
+++ b/tests/js/spec/components/events/interfaces/contexts.spec.jsx
@@ -0,0 +1,42 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import UserContextType from 'app/components/events/contexts/user';
+import {FILTER_MASK} from 'app/constants';
+
+describe('UserContextType', function() {
+  it("displays filtered values but doesn't use them for avatar", function() {
+    const user1 = {
+      id: '26',
+      name: FILTER_MASK,
+    };
+
+    const wrapper1 = mount(<UserContextType data={user1} />);
+    expect(wrapper1.find('[data-test-id="user-context-name-value"]').text()).toEqual(
+      FILTER_MASK
+    );
+    expect(wrapper1.find('LetterAvatar').text()).toEqual('?');
+
+    const user2 = {
+      id: '26',
+      email: FILTER_MASK,
+    };
+
+    const wrapper2 = mount(<UserContextType data={user2} />);
+    expect(wrapper2.find('[data-test-id="user-context-email-value"]').text()).toEqual(
+      FILTER_MASK
+    );
+    expect(wrapper2.find('LetterAvatar').text()).toEqual('?');
+
+    const user3 = {
+      id: '26',
+      username: FILTER_MASK,
+    };
+
+    const wrapper3 = mount(<UserContextType data={user3} />);
+    expect(wrapper3.find('[data-test-id="user-context-username-value"]').text()).toEqual(
+      FILTER_MASK
+    );
+    expect(wrapper3.find('LetterAvatar').text()).toEqual('?');
+  });
+});
diff --git a/tests/js/spec/components/events/interfaces/utils.spec.jsx b/tests/js/spec/components/events/interfaces/utils.spec.jsx
index 313aba2218..056c23806e 100644
--- a/tests/js/spec/components/events/interfaces/utils.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/utils.spec.jsx
@@ -2,7 +2,9 @@ import {MetaProxy, withMeta} from 'app/components/events/meta/metaProxy';
 import {
   getCurlCommand,
   objectToSortedTupleArray,
+  removeFilterMaskedEntries,
 } from 'app/components/events/interfaces/utils';
+import {FILTER_MASK} from 'app/constants';
 
 describe('components/interfaces/utils', function() {
   describe('getCurlCommand()', function() {
@@ -167,4 +169,25 @@ describe('components/interfaces/utils', function() {
       ).toEqual([['foo', 'bar'], ['foo', 'baz']]);
     });
   });
+
+  describe('removeFilterMaskedEntries()', function() {
+    const rawData = {
+      id: '26',
+      name: FILTER_MASK,
+      username: 'maiseythedog',
+      email: FILTER_MASK,
+    };
+    it('should remove filtered values', function() {
+      const result = removeFilterMaskedEntries(rawData);
+      expect(result).not.toHaveProperty('name');
+      expect(result).not.toHaveProperty('email');
+    });
+    it('should preserve unfiltered values', function() {
+      const result = removeFilterMaskedEntries(rawData);
+      expect(result).toHaveProperty('id');
+      expect(result.id).toEqual('26');
+      expect(result).toHaveProperty('username');
+      expect(result.username).toEqual('maiseythedog');
+    });
+  });
 });
diff --git a/tests/sentry/utils/test_data_scrubber.py b/tests/sentry/utils/test_data_scrubber.py
index b7e8273496..aaac80a7d1 100644
--- a/tests/sentry/utils/test_data_scrubber.py
+++ b/tests/sentry/utils/test_data_scrubber.py
@@ -91,14 +91,44 @@ class SensitiveDataFilterTest(TestCase):
         assert "headers" in http
         self._check_vars_sanitized(dict(http["headers"]), proc)
 
-    def test_user(self):
-        data = {"user": {"username": "secret", "data": VARS}}
+    def test_user_standard_entries(self):
+        """
+        Make sure we filter the entries we call out specifically. See
+        https://github.com/getsentry/semaphore/blob/5b6e46f6159843451027b5217902c81e134d7c40/general/src/protocol/user.rs#L25
+        for a list of those entries.
+        """
+
+        data = {
+            "user": {
+                "id": "26",
+                "username": "maiseythedog",
+                "email": "maisey@dogsrule.com",
+                "name": "Maisey Dog",
+            }
+        }
+        additional_sensitive_fields = ["email", "name"]
+
+        proc = SensitiveDataFilter(additional_sensitive_fields)
+        proc.apply(data)
+
+        assert data["user"]["id"] == "26"
+        assert data["user"]["username"] == FILTER_MASK
+        assert data["user"]["email"] == FILTER_MASK
+        assert data["user"]["name"] == FILTER_MASK
+
+    def test_user_extra_data(self):
+        """
+        Make sure we filter non-standard user entries, which all end up in
+        user["data"] after normalization. See
+        https://github.com/getsentry/semaphore/blob/5b6e46f6159843451027b5217902c81e134d7c40/general/src/protocol/user.rs#L54.
+        """
+
+        data = {"user": {"data": VARS}}
 
         proc = SensitiveDataFilter()
         proc.apply(data)
 
         assert "user" in data
-        assert data["user"]["username"] == "secret"
         self._check_vars_sanitized(data["user"]["data"], proc)
 
     def test_extra(self):
