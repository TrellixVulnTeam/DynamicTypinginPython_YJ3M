commit 69583db7dee99cb85f70ab4a14fdfcb333b4b93f
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Wed Dec 20 13:34:27 2017 -0600

    ref(tags): Drop environment_id from everything but TagKey in v2 (#6771)

diff --git a/src/sentry/tagstore/base.py b/src/sentry/tagstore/base.py
index 97419cda4b..d64d4840e0 100644
--- a/src/sentry/tagstore/base.py
+++ b/src/sentry/tagstore/base.py
@@ -69,9 +69,7 @@ class TagStorage(Service):
         'get_first_release',
         'get_last_release',
         'get_release_tags',
-        'incr_tag_key_values_seen',
         'incr_tag_value_times_seen',
-        'incr_group_tag_key_values_seen',
         'incr_group_tag_value_times_seen',
         'get_group_ids_for_users',
         'get_group_tag_values_for_users',
@@ -296,12 +294,6 @@ class TagStorage(Service):
         """
         raise NotImplementedError
 
-    def incr_tag_key_values_seen(self, project_id, environment_id, key, count=1):
-        """
-        >>> incr_tag_key_values_seen(1, 2, "key1")
-        """
-        raise NotImplementedError
-
     def incr_tag_value_times_seen(self, project_id, environment_id,
                                   key, value, extra=None, count=1):
         """
@@ -309,12 +301,6 @@ class TagStorage(Service):
         """
         raise NotImplementedError
 
-    def incr_group_tag_key_values_seen(self, project_id, group_id, environment_id, key, count=1):
-        """
-        >>> incr_group_tag_key_values_seen(1, 2, 3, "key1")
-        """
-        raise NotImplementedError
-
     def incr_group_tag_value_times_seen(
             self, project_id, group_id, environment_id, key, value, extra=None, count=1):
         """
diff --git a/src/sentry/tagstore/legacy/backend.py b/src/sentry/tagstore/legacy/backend.py
index de7b6682e9..cd379881d0 100644
--- a/src/sentry/tagstore/legacy/backend.py
+++ b/src/sentry/tagstore/legacy/backend.py
@@ -128,9 +128,16 @@ class LegacyTagStorage(TagStorage):
                 return
 
             project_id = filters['project_id']
-            environment_id = filters.get('environment_id')
+            key = filters['key']
 
-            self.incr_tag_key_values_seen(project_id, environment_id, filters['key'])
+            buffer.incr(TagKey,
+                        columns={
+                            'values_seen': 1,
+                        },
+                        filters={
+                            'project_id': project_id,
+                            'key': key,
+                        })
 
         @buffer_incr_complete.connect(sender=GroupTagValue, weak=False)
         def record_group_tag_count(filters, created, extra, **kwargs):
@@ -139,10 +146,17 @@ class LegacyTagStorage(TagStorage):
 
             project_id = extra['project_id']
             group_id = filters['group_id']
-            environment_id = filters.get('environment_id')
-
-            self.incr_group_tag_key_values_seen(
-                project_id, group_id, environment_id, filters['key'])
+            key = filters['key']
+
+            buffer.incr(GroupTagKey,
+                        columns={
+                            'values_seen': 1,
+                        },
+                        filters={
+                            'project_id': project_id,
+                            'group_id': group_id,
+                            'key': key,
+                        })
 
     def create_tag_key(self, project_id, environment_id, key, **kwargs):
         return TagKey.objects.create(project_id=project_id, key=key, **kwargs)
@@ -316,16 +330,6 @@ class LegacyTagStorage(TagStorage):
             group_id=group_id,
         ).delete()
 
-    def incr_tag_key_values_seen(self, project_id, environment_id, key, count=1):
-        buffer.incr(TagKey,
-                    columns={
-                        'values_seen': count,
-                    },
-                    filters={
-                        'project_id': project_id,
-                        'key': key,
-                    })
-
     def incr_tag_value_times_seen(self, project_id, environment_id,
                                   key, value, extra=None, count=1):
         buffer.incr(TagValue,
@@ -339,17 +343,6 @@ class LegacyTagStorage(TagStorage):
                     },
                     extra=extra)
 
-    def incr_group_tag_key_values_seen(self, project_id, group_id, environment_id, key, count=1):
-        buffer.incr(GroupTagKey,
-                    columns={
-                        'values_seen': count,
-                    },
-                    filters={
-                        'project_id': project_id,
-                        'group_id': group_id,
-                        'key': key,
-                    })
-
     def incr_group_tag_value_times_seen(self, project_id, group_id, environment_id,
                                         key, value, extra=None, count=1):
         buffer.incr(GroupTagValue,
diff --git a/src/sentry/tagstore/south_migrations/0004_auto__del_tagkey__del_unique_tagkey_project_id_environment_id_key__del.py b/src/sentry/tagstore/south_migrations/0004_auto__del_tagkey__del_unique_tagkey_project_id_environment_id_key__del.py
new file mode 100644
index 0000000000..27d9062518
--- /dev/null
+++ b/src/sentry/tagstore/south_migrations/0004_auto__del_tagkey__del_unique_tagkey_project_id_environment_id_key__del.py
@@ -0,0 +1,187 @@
+# -*- coding: utf-8 -*-
+from south.utils import datetime_utils as datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    # Flag to indicate if this migration is too risky
+    # to run online and needs to be coordinated for offline
+    is_dangerous = True
+
+    def forwards(self, orm):
+        # Removing unique constraint on 'GroupTagValue', fields ['project_id',
+        # 'group_id', 'environment_id', '_key', '_value']
+        db.delete_unique(
+            u'tagstore_grouptagvalue', [
+                'project_id', 'group_id', 'environment_id', 'key_id', 'value_id'])
+
+        # Removing unique constraint on 'EventTag', fields ['event_id', 'key', 'value']
+        db.delete_unique(u'tagstore_eventtag', ['event_id', 'key_id', 'value_id'])
+
+        # Removing unique constraint on 'GroupTagKey', fields ['project_id',
+        # 'group_id', 'environment_id', '_key']
+        db.delete_unique(
+            u'tagstore_grouptagkey', [
+                'project_id', 'group_id', 'environment_id', 'key_id'])
+
+        # Removing unique constraint on 'TagValue', fields ['project_id',
+        # 'environment_id', '_key', 'value']
+        db.delete_unique(u'tagstore_tagvalue', ['project_id', 'environment_id', 'key_id', 'value'])
+
+        # Removing unique constraint on 'TagKey', fields ['project_id', 'environment_id', 'key']
+        db.delete_unique(u'tagstore_tagkey', ['project_id', 'environment_id', 'key'])
+
+        # Removing index on 'TagValue', fields ['project_id', '_key', 'last_seen']
+        db.delete_index(u'tagstore_tagvalue', ['project_id', 'key_id', 'last_seen'])
+
+        # Deleting model 'GroupTagKey'
+        db.delete_table(u'tagstore_grouptagkey')
+
+        # Removing index on 'EventTag', fields ['project_id', 'key', 'value']
+        db.delete_index(u'tagstore_eventtag', ['project_id', 'key_id', 'value_id'])
+
+        # Removing index on 'EventTag', fields ['group_id', 'key', 'value']
+        db.delete_index(u'tagstore_eventtag', ['group_id', 'key_id', 'value_id'])
+
+        # Removing index on 'EventTag', fields ['environment_id', 'key', 'value']
+        db.delete_index(u'tagstore_eventtag', ['environment_id', 'key_id', 'value_id'])
+
+        # Removing index on 'GroupTagValue', fields ['project_id', '_key', '_value', 'last_seen']
+        db.delete_index(
+            u'tagstore_grouptagvalue', [
+                'project_id', 'key_id', 'value_id', 'last_seen'])
+
+        # Deleting model 'TagKey'
+        db.delete_table(u'tagstore_tagkey')
+
+        # Deleting model 'TagValue'
+        db.delete_table(u'tagstore_tagvalue')
+
+        # Deleting model 'EventTag'
+        db.delete_table(u'tagstore_eventtag')
+
+        # Deleting model 'GroupTagValue'
+        db.delete_table(u'tagstore_grouptagvalue')
+
+    def backwards(self, orm):
+        # Adding model 'TagKey'
+        db.create_table(u'tagstore_tagkey', (
+            ('status', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
+            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
+            ('values_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
+            ('key', self.gf('django.db.models.fields.CharField')(max_length=32)),
+            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+        ))
+        db.send_create_signal('tagstore', ['TagKey'])
+
+        # Adding unique constraint on 'TagKey', fields ['project_id', 'environment_id', 'key']
+        db.create_unique(u'tagstore_tagkey', ['project_id', 'environment_id', 'key'])
+
+        # Adding model 'TagValue'
+        db.create_table(u'tagstore_tagvalue', (
+            ('times_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
+            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
+            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                to=orm['tagstore.TagKey'], db_column='key_id')),
+            ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
+                default=datetime.datetime.now, null=True, db_index=True)),
+            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
+            ('data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')(null=True, blank=True)),
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+            ('value', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
+                default=datetime.datetime.now, null=True, db_index=True)),
+        ))
+        db.send_create_signal('tagstore', ['TagValue'])
+
+        # Adding unique constraint on 'TagValue', fields ['project_id',
+        # 'environment_id', '_key', 'value']
+        db.create_unique(u'tagstore_tagvalue', ['project_id', 'environment_id', 'key_id', 'value'])
+
+        # Adding model 'GroupTagKey'
+        db.create_table(u'tagstore_grouptagkey', (
+            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
+            ('values_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
+            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                to=orm['tagstore.TagKey'], db_column='key_id')),
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
+            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
+        ))
+        db.send_create_signal('tagstore', ['GroupTagKey'])
+
+        # Adding unique constraint on 'GroupTagKey', fields ['project_id',
+        # 'group_id', 'environment_id', '_key']
+        db.create_unique(
+            u'tagstore_grouptagkey', [
+                'project_id', 'group_id', 'environment_id', 'key_id'])
+
+        # Adding model 'EventTag'
+        db.create_table(u'tagstore_eventtag', (
+            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
+            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
+            ('key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                to=orm['tagstore.TagKey'], db_column='key_id')),
+            ('event_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(
+                default=datetime.datetime.now, db_index=True)),
+            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+            ('value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                to=orm['tagstore.TagValue'], db_column='value_id')),
+        ))
+        db.send_create_signal('tagstore', ['EventTag'])
+
+        # Adding unique constraint on 'EventTag', fields ['event_id', 'key', 'value']
+        db.create_unique(u'tagstore_eventtag', ['event_id', 'key_id', 'value_id'])
+
+        # Adding model 'GroupTagValue'
+        db.create_table(u'tagstore_grouptagvalue', (
+            ('_value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                to=orm['tagstore.TagValue'], db_column='value_id')),
+            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
+            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
+            ('times_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
+            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                to=orm['tagstore.TagKey'], db_column='key_id')),
+            ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
+                default=datetime.datetime.now, null=True, db_index=True)),
+            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+            ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
+                default=datetime.datetime.now, null=True, db_index=True)),
+        ))
+        db.send_create_signal('tagstore', ['GroupTagValue'])
+
+        # Adding unique constraint on 'GroupTagValue', fields ['project_id',
+        # 'group_id', 'environment_id', '_key', '_value']
+        db.create_unique(
+            u'tagstore_grouptagvalue', [
+                'project_id', 'group_id', 'environment_id', 'key_id', 'value_id'])
+
+        # Adding index on 'GroupTagValue', fields ['project_id', '_key', '_value', 'last_seen']
+        db.create_index(
+            u'tagstore_grouptagvalue', [
+                'project_id', 'key_id', 'value_id', 'last_seen'])
+
+        # Adding index on 'EventTag', fields ['environment_id', 'key', 'value']
+        db.create_index(u'tagstore_eventtag', ['environment_id', 'key_id', 'value_id'])
+
+        # Adding index on 'EventTag', fields ['group_id', 'key', 'value']
+        db.create_index(u'tagstore_eventtag', ['group_id', 'key_id', 'value_id'])
+
+        # Adding index on 'EventTag', fields ['project_id', 'key', 'value']
+        db.create_index(u'tagstore_eventtag', ['project_id', 'key_id', 'value_id'])
+
+        # Adding index on 'TagValue', fields ['project_id', '_key', 'last_seen']
+        db.create_index(u'tagstore_tagvalue', ['project_id', 'key_id', 'last_seen'])
+
+    models = {
+
+    }
+
+    complete_apps = ['tagstore']
diff --git a/src/sentry/tagstore/south_migrations/0005_auto__add_tagvalue__add_unique_tagvalue_project_id__key_value__add_ind.py b/src/sentry/tagstore/south_migrations/0005_auto__add_tagvalue__add_unique_tagvalue_project_id__key_value__add_ind.py
new file mode 100644
index 0000000000..5b1cda133c
--- /dev/null
+++ b/src/sentry/tagstore/south_migrations/0005_auto__add_tagvalue__add_unique_tagvalue_project_id__key_value__add_ind.py
@@ -0,0 +1,217 @@
+# -*- coding: utf-8 -*-
+from south.utils import datetime_utils as datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    # Flag to indicate if this migration is too risky
+    # to run online and needs to be coordinated for offline
+    is_dangerous = True
+
+    def forwards(self, orm):
+        # Adding model 'TagValue'
+        db.create_table(u'tagstore_tagvalue', (
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
+            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                to=orm['tagstore.TagKey'], db_column='key_id')),
+            ('value', self.gf('django.db.models.fields.CharField')(max_length=200)),
+            ('data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')(null=True, blank=True)),
+            ('times_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
+            ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
+                default=datetime.datetime.now, null=True, db_index=True)),
+            ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
+                default=datetime.datetime.now, null=True, db_index=True)),
+        ))
+        db.send_create_signal('tagstore', ['TagValue'])
+
+        # Adding unique constraint on 'TagValue', fields ['project_id', '_key', 'value']
+        db.create_unique(u'tagstore_tagvalue', ['project_id', 'key_id', 'value'])
+
+        # Adding index on 'TagValue', fields ['project_id', '_key', 'last_seen']
+        db.create_index(u'tagstore_tagvalue', ['project_id', 'key_id', 'last_seen'])
+
+        # Adding model 'TagKey'
+        db.create_table(u'tagstore_tagkey', (
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
+            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
+            ('key', self.gf('django.db.models.fields.CharField')(max_length=32)),
+            ('values_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
+            ('status', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
+        ))
+        db.send_create_signal('tagstore', ['TagKey'])
+
+        # Adding unique constraint on 'TagKey', fields ['project_id', 'environment_id', 'key']
+        db.create_unique(u'tagstore_tagkey', ['project_id', 'environment_id', 'key'])
+
+        # Adding model 'GroupTagKey'
+        db.create_table(u'tagstore_grouptagkey', (
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
+            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
+            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                to=orm['tagstore.TagKey'], db_column='key_id')),
+            ('values_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
+        ))
+        db.send_create_signal('tagstore', ['GroupTagKey'])
+
+        # Adding unique constraint on 'GroupTagKey', fields ['project_id', 'group_id', '_key']
+        db.create_unique(u'tagstore_grouptagkey', ['project_id', 'group_id', 'key_id'])
+
+        # Adding model 'EventTag'
+        db.create_table(u'tagstore_eventtag', (
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
+            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
+            ('event_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
+            ('key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                to=orm['tagstore.TagKey'], db_column='key_id')),
+            ('value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                to=orm['tagstore.TagValue'], db_column='value_id')),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(
+                default=datetime.datetime.now, db_index=True)),
+        ))
+        db.send_create_signal('tagstore', ['EventTag'])
+
+        # Adding unique constraint on 'EventTag', fields ['event_id', 'key', 'value']
+        db.create_unique(u'tagstore_eventtag', ['event_id', 'key_id', 'value_id'])
+
+        # Adding index on 'EventTag', fields ['project_id', 'key', 'value']
+        db.create_index(u'tagstore_eventtag', ['project_id', 'key_id', 'value_id'])
+
+        # Adding index on 'EventTag', fields ['group_id', 'key', 'value']
+        db.create_index(u'tagstore_eventtag', ['group_id', 'key_id', 'value_id'])
+
+        # Adding model 'GroupTagValue'
+        db.create_table(u'tagstore_grouptagvalue', (
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
+            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
+            ('times_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
+            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                to=orm['tagstore.TagKey'], db_column='key_id')),
+            ('_value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                to=orm['tagstore.TagValue'], db_column='value_id')),
+            ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
+                default=datetime.datetime.now, null=True, db_index=True)),
+            ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
+                default=datetime.datetime.now, null=True, db_index=True)),
+        ))
+        db.send_create_signal('tagstore', ['GroupTagValue'])
+
+        # Adding unique constraint on 'GroupTagValue', fields ['project_id',
+        # 'group_id', '_key', '_value']
+        db.create_unique(
+            u'tagstore_grouptagvalue', [
+                'project_id', 'group_id', 'key_id', 'value_id'])
+
+        # Adding index on 'GroupTagValue', fields ['project_id', '_key', '_value', 'last_seen']
+        db.create_index(
+            u'tagstore_grouptagvalue', [
+                'project_id', 'key_id', 'value_id', 'last_seen'])
+
+    def backwards(self, orm):
+        # Removing index on 'GroupTagValue', fields ['project_id', '_key', '_value', 'last_seen']
+        db.delete_index(
+            u'tagstore_grouptagvalue', [
+                'project_id', 'key_id', 'value_id', 'last_seen'])
+
+        # Removing unique constraint on 'GroupTagValue', fields ['project_id',
+        # 'group_id', '_key', '_value']
+        db.delete_unique(
+            u'tagstore_grouptagvalue', [
+                'project_id', 'group_id', 'key_id', 'value_id'])
+
+        # Removing index on 'EventTag', fields ['group_id', 'key', 'value']
+        db.delete_index(u'tagstore_eventtag', ['group_id', 'key_id', 'value_id'])
+
+        # Removing index on 'EventTag', fields ['project_id', 'key', 'value']
+        db.delete_index(u'tagstore_eventtag', ['project_id', 'key_id', 'value_id'])
+
+        # Removing unique constraint on 'EventTag', fields ['event_id', 'key', 'value']
+        db.delete_unique(u'tagstore_eventtag', ['event_id', 'key_id', 'value_id'])
+
+        # Removing unique constraint on 'GroupTagKey', fields ['project_id', 'group_id', '_key']
+        db.delete_unique(u'tagstore_grouptagkey', ['project_id', 'group_id', 'key_id'])
+
+        # Removing unique constraint on 'TagKey', fields ['project_id', 'environment_id', 'key']
+        db.delete_unique(u'tagstore_tagkey', ['project_id', 'environment_id', 'key'])
+
+        # Removing index on 'TagValue', fields ['project_id', '_key', 'last_seen']
+        db.delete_index(u'tagstore_tagvalue', ['project_id', 'key_id', 'last_seen'])
+
+        # Removing unique constraint on 'TagValue', fields ['project_id', '_key', 'value']
+        db.delete_unique(u'tagstore_tagvalue', ['project_id', 'key_id', 'value'])
+
+        # Deleting model 'TagValue'
+        db.delete_table(u'tagstore_tagvalue')
+
+        # Deleting model 'TagKey'
+        db.delete_table(u'tagstore_tagkey')
+
+        # Deleting model 'GroupTagKey'
+        db.delete_table(u'tagstore_grouptagkey')
+
+        # Deleting model 'EventTag'
+        db.delete_table(u'tagstore_eventtag')
+
+        # Deleting model 'GroupTagValue'
+        db.delete_table(u'tagstore_grouptagvalue')
+
+    models = {
+        'tagstore.eventtag': {
+            'Meta': {'unique_together': "(('event_id', 'key', 'value'),)", 'object_name': 'EventTag', 'index_together': "(('project_id', 'key', 'value'), ('group_id', 'key', 'value'))"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'value': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagValue']", 'db_column': "'value_id'"})
+        },
+        'tagstore.grouptagkey': {
+            'Meta': {'unique_together': "(('project_id', 'group_id', '_key'),)", 'object_name': 'GroupTagKey'},
+            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'tagstore.grouptagvalue': {
+            'Meta': {'unique_together': "(('project_id', 'group_id', '_key', '_value'),)", 'object_name': 'GroupTagValue', 'index_together': "(('project_id', '_key', '_value', 'last_seen'),)"},
+            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
+            '_value': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagValue']", 'db_column': "'value_id'"}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'tagstore.tagkey': {
+            'Meta': {'unique_together': "(('project_id', 'environment_id', 'key'),)", 'object_name': 'TagKey'},
+            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'tagstore.tagvalue': {
+            'Meta': {'unique_together': "(('project_id', '_key', 'value'),)", 'object_name': 'TagValue', 'index_together': "(('project_id', '_key', 'last_seen'),)"},
+            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        }
+    }
+
+    complete_apps = ['tagstore']
diff --git a/src/sentry/tagstore/tasks.py b/src/sentry/tagstore/tasks.py
index 449a5b75cc..98c18328e4 100644
--- a/src/sentry/tagstore/tasks.py
+++ b/src/sentry/tagstore/tasks.py
@@ -41,6 +41,7 @@ def delete_tag_key(object_id, model=None, transaction_id=None, **kwargs):
     if has_more:
         delete_tag_key.apply_async(
             kwargs={'object_id': object_id,
+                    'model': model,
                     'transaction_id': transaction_id},
             countdown=15,
         )
diff --git a/src/sentry/tagstore/v2/backend.py b/src/sentry/tagstore/v2/backend.py
index 47684594e1..097482f3d7 100644
--- a/src/sentry/tagstore/v2/backend.py
+++ b/src/sentry/tagstore/v2/backend.py
@@ -86,9 +86,16 @@ class V2TagStorage(TagStorage):
                 return
 
             project_id = filters['project_id']
-            environment_id = filters['environment_id']
+            key_id = filters['_key_id']
 
-            self.incr_tag_key_values_seen(project_id, environment_id, filters['_key_id'])
+            buffer.incr(TagKey,
+                        columns={
+                            'values_seen': 1,
+                        },
+                        filters={
+                            'id': key_id,
+                            'project_id': project_id,
+                        })
 
         @buffer_incr_complete.connect(sender=GroupTagValue, weak=False)
         def record_group_tag_count(filters, created, extra, **kwargs):
@@ -97,10 +104,17 @@ class V2TagStorage(TagStorage):
 
             project_id = extra['project_id']
             group_id = filters['group_id']
-            environment_id = filters['environment_id']
+            key_id = filters['_key_id']
 
-            self.incr_group_tag_key_values_seen(
-                project_id, group_id, environment_id, filters['_key_id'])
+            buffer.incr(GroupTagKey,
+                        columns={
+                            'values_seen': 1,
+                        },
+                        filters={
+                            'project_id': project_id,
+                            'group_id': group_id,
+                            '_key_id': key_id,
+                        })
 
     def create_tag_key(self, project_id, environment_id, key, **kwargs):
         return TagKey.objects.create(
@@ -128,7 +142,6 @@ class V2TagStorage(TagStorage):
 
         return TagValue.objects.create(
             project_id=project_id,
-            environment_id=environment_id,
             _key_id=tag_key.id,
             value=value,
             **kwargs
@@ -143,7 +156,6 @@ class V2TagStorage(TagStorage):
 
         return TagValue.objects.get_or_create(
             project_id=project_id,
-            environment_id=environment_id,
             _key_id=key_id,
             value=value,
             **kwargs
@@ -159,7 +171,6 @@ class V2TagStorage(TagStorage):
         return GroupTagKey.objects.create(
             project_id=project_id,
             group_id=group_id,
-            environment_id=environment_id,
             _key_id=tag_key.id,
             **kwargs
         )
@@ -171,7 +182,6 @@ class V2TagStorage(TagStorage):
         return GroupTagKey.objects.get_or_create(
             project_id=project_id,
             group_id=group_id,
-            environment_id=environment_id,
             _key_id=tag_key.id,
             **kwargs
         )
@@ -191,7 +201,6 @@ class V2TagStorage(TagStorage):
         return GroupTagValue.objects.create(
             project_id=project_id,
             group_id=group_id,
-            environment_id=environment_id,
             _key_id=tag_key.id,
             _value_id=tag_value.id,
             **kwargs
@@ -208,7 +217,6 @@ class V2TagStorage(TagStorage):
         return GroupTagValue.objects.get_or_create(
             project_id=project_id,
             group_id=group_id,
-            environment_id=environment_id,
             _key_id=tag_key.id,
             _value_id=tag_value.id,
             **kwargs
@@ -233,7 +241,6 @@ class V2TagStorage(TagStorage):
                 EventTag.objects.bulk_create([
                     EventTag(
                         project_id=project_id,
-                        environment_id=environment_id,
                         group_id=group_id,
                         event_id=event_id,
                         key_id=key_id,
@@ -246,7 +253,6 @@ class V2TagStorage(TagStorage):
                 'tagstore.create_event_tags.integrity_error',
                 extra={
                     'project_id': project_id,
-                    'environment_id': environment_id,
                     'group_id': group_id,
                     'event_id': event_id,
                 }
@@ -258,9 +264,10 @@ class V2TagStorage(TagStorage):
         qs = TagKey.objects.filter(
             project_id=project_id,
             key=key,
-            **self._get_environment_filter(environment_id)
         )
 
+        qs = self._add_environment_filter(qs, environment_id)
+
         if status is not None:
             qs = qs.filter(status=status)
 
@@ -272,9 +279,10 @@ class V2TagStorage(TagStorage):
     def get_tag_keys(self, project_id, environment_id, status=TagKeyStatus.VISIBLE):
         qs = TagKey.objects.filter(
             project_id=project_id,
-            **self._get_environment_filter(environment_id)
         )
 
+        qs = self._add_environment_filter(qs, environment_id)
+
         if status is not None:
             qs = qs.filter(status=status)
 
@@ -287,9 +295,10 @@ class V2TagStorage(TagStorage):
             project_id=project_id,
             _key__key=key,
             value=value,
-            **self._get_environment_filter(environment_id)
         )
 
+        qs = self._add_environment_filter(qs, environment_id)
+
         try:
             return qs.get()
         except TagValue.DoesNotExist:
@@ -299,9 +308,10 @@ class V2TagStorage(TagStorage):
         qs = TagValue.objects.filter(
             project_id=project_id,
             _key__key=key,
-            **self._get_environment_filter(environment_id)
         )
 
+        qs = self._add_environment_filter(qs, environment_id)
+
         return list(qs)
 
     def get_group_tag_key(self, project_id, group_id, environment_id, key):
@@ -311,9 +321,10 @@ class V2TagStorage(TagStorage):
             project_id=project_id,
             group_id=group_id,
             _key__key=key,
-            **self._get_environment_filter(environment_id)
         )
 
+        qs = self._add_environment_filter(qs, environment_id)
+
         try:
             return qs.get()
         except GroupTagKey.DoesNotExist:
@@ -322,9 +333,10 @@ class V2TagStorage(TagStorage):
     def get_group_tag_keys(self, project_id, group_id, environment_id, limit=None):
         qs = GroupTagKey.objects.filter(
             group_id=group_id,
-            **self._get_environment_filter(environment_id)
         )
 
+        qs = self._add_environment_filter(qs, environment_id)
+
         if limit is not None:
             qs = qs[:limit]
 
@@ -338,9 +350,10 @@ class V2TagStorage(TagStorage):
             group_id=group_id,
             _key__key=key,
             _value__value=value,
-            **self._get_environment_filter(environment_id)
         )
 
+        qs = self._add_environment_filter(qs, environment_id)
+
         try:
             return qs.get()
         except GroupTagValue.DoesNotExist:
@@ -350,9 +363,10 @@ class V2TagStorage(TagStorage):
         qs = GroupTagValue.objects.filter(
             group_id=group_id,
             _key__key=key,
-            **self._get_environment_filter(environment_id)
         )
 
+        qs = self._add_environment_filter(qs, environment_id)
+
         return list(qs)
 
     def delete_tag_key(self, project_id, key):
@@ -388,18 +402,6 @@ class V2TagStorage(TagStorage):
             group_id=group_id,
         ).delete()
 
-    def incr_tag_key_values_seen(self, project_id, environment_id, key, count=1):
-        # key is passed `key_id` from `buffer_incr_complete.connect(sender=TagValue)`
-        buffer.incr(TagKey,
-                    columns={
-                        'values_seen': count,
-                    },
-                    filters={
-                        'id': key,
-                        'project_id': project_id,
-                        'environment_id': environment_id,
-                    })
-
     def incr_tag_value_times_seen(self, project_id, environment_id,
                                   key, value, extra=None, count=1):
         for env in [environment_id, None]:
@@ -411,25 +413,11 @@ class V2TagStorage(TagStorage):
                         },
                         filters={
                             'project_id': project_id,
-                            'environment_id': env,
                             '_key_id': tagkey.id,
                             'value': value,
                         },
                         extra=extra)
 
-    def incr_group_tag_key_values_seen(self, project_id, group_id, environment_id, key, count=1):
-        # key is passed `key_id` from `buffer_incr_complete.connect(sender=GroupTagValue)`
-        buffer.incr(GroupTagKey,
-                    columns={
-                        'values_seen': count,
-                    },
-                    filters={
-                        'project_id': project_id,
-                        'group_id': group_id,
-                        'environment_id': environment_id,
-                        '_key_id': key,
-                    })
-
     def incr_group_tag_value_times_seen(self, project_id, group_id, environment_id,
                                         key, value, extra=None, count=1):
         for env in [environment_id, None]:
@@ -443,7 +431,6 @@ class V2TagStorage(TagStorage):
                         filters={
                             'project_id': project_id,
                             'group_id': group_id,
-                            'environment_id': env,
                             '_key_id': tagkey.id,
                             '_value_id': tagvalue.id,
                         },
@@ -457,9 +444,9 @@ class V2TagStorage(TagStorage):
 
         if environment_id is None:
             # filter for all 'real' environments
-            env_filter = {'environment_id__isnull': False}
+            env_filter = {'_key__environment_id__isnull': False}
         else:
-            env_filter = {'environment_id': environment_id}
+            env_filter = {'_key__environment_id': environment_id}
 
         tagvalue_qs = TagValue.objects.filter(
             reduce(or_, (Q(_key__key=k, _key__status=TagKeyStatus.VISIBLE, value=v)
@@ -518,9 +505,10 @@ class V2TagStorage(TagStorage):
             project_id=project_id,
             group_id__in=group_ids,
             _key__key='sentry:user',
-            **self._get_environment_filter(environment_id)
         )
 
+        qs = self._add_environment_filter(qs, environment_id)
+
         return defaultdict(int, qs.values_list('group_id', 'values_seen'))
 
     def get_group_tag_value_count(self, project_id, group_id, environment_id, key):
@@ -538,7 +526,7 @@ class V2TagStorage(TagStorage):
                     INNER JOIN tagstore_tagkey
                     ON (tagstore_grouptagvalue.key_id = tagstore_tagkey.id)
                     WHERE tagstore_grouptagvalue.group_id = %%s
-                    AND tagstore_grouptagvalue.environment_id %s %%s
+                    AND tagstore_tagkey.environment_id %s %%s
                     AND tagstore_tagkey.key = %%s
                     ORDER BY last_seen DESC
                     LIMIT 10000
@@ -548,12 +536,13 @@ class V2TagStorage(TagStorage):
             return cursor.fetchone()[0] or 0
 
         cutoff = timezone.now() - timedelta(days=7)
-        return GroupTagValue.objects.filter(
+        qs = GroupTagValue.objects.filter(
             group_id=group_id,
             _key__key=key,
             last_seen__gte=cutoff,
-            **self._get_environment_filter(environment_id)
-        ).aggregate(t=Sum('times_seen'))['t']
+        )
+        qs = self._add_environment_filter(qs, environment_id)
+        return qs.aggregate(t=Sum('times_seen'))['t']
 
     def get_top_group_tag_values(self, project_id, group_id, environment_id, key, limit=3):
         if db.is_postgres():
@@ -567,7 +556,6 @@ class V2TagStorage(TagStorage):
                     SELECT tagstore_grouptagvalue.id,
                            tagstore_grouptagvalue.project_id,
                            tagstore_grouptagvalue.group_id,
-                           tagstore_grouptagvalue.environment_id,
                            tagstore_grouptagvalue.times_seen,
                            tagstore_grouptagvalue.key_id,
                            tagstore_grouptagvalue.value_id,
@@ -577,7 +565,7 @@ class V2TagStorage(TagStorage):
                     INNER JOIN tagstore_tagkey
                     ON (tagstore_grouptagvalue.key_id = tagstore_tagkey.id)
                     WHERE tagstore_grouptagvalue.group_id = %%s
-                    AND tagstore_grouptagvalue.environment_id %s %%s
+                    AND tagstore_tagkey.environment_id %s %%s
                     AND tagstore_tagkey.key = %%s
                     ORDER BY last_seen DESC
                     LIMIT 10000
@@ -589,14 +577,13 @@ class V2TagStorage(TagStorage):
             )
 
         cutoff = timezone.now() - timedelta(days=7)
-        return list(
-            GroupTagValue.objects.filter(
-                group_id=group_id,
-                _key__key=key,
-                last_seen__gte=cutoff,
-                **self._get_environment_filter(environment_id)
-            ).order_by('-times_seen')[:limit]
+        qs = GroupTagValue.objects.filter(
+            group_id=group_id,
+            _key__key=key,
+            last_seen__gte=cutoff,
         )
+        qs = self._add_environment_filter(qs, environment_id)
+        return list(qs.order_by('-times_seen')[:limit])
 
     def get_first_release(self, project_id, group_id):
         try:
@@ -623,17 +610,20 @@ class V2TagStorage(TagStorage):
         return last_release.value
 
     def get_release_tags(self, project_ids, environment_id, versions):
-        return list(TagValue.objects.filter(
+        qs = TagValue.objects.filter(
             project_id__in=project_ids,
             _key__key='sentry:release',
             value__in=versions,
-            **self._get_environment_filter(environment_id)
-        ))
+        )
+
+        qs = self._add_environment_filter(qs, environment_id)
+
+        return list(qs)
 
     def get_group_ids_for_users(self, project_ids, event_users, limit=100):
         return list(GroupTagValue.objects.filter(
             project_id__in=project_ids,
-            environment_id__isnull=True,
+            _key__environment_id__isnull=True,
             _key__key='sentry:user',
             _value__value__in=[eu.tag_value for eu in event_users],
         ).order_by('-last_seen').values_list('group_id', flat=True)[:limit])
@@ -646,7 +636,7 @@ class V2TagStorage(TagStorage):
 
         return list(GroupTagValue.objects.filter(
             reduce(or_, tag_filters),
-            environment_id__isnull=True,
+            _key__environment_id__isnull=True,
             _key__key='sentry:user',
         ).order_by('-last_seen')[:limit])
 
@@ -673,15 +663,15 @@ class V2TagStorage(TagStorage):
                     project_id=project_id,
                     _key__key=k,
                     _value__value=v,
-                    **self._get_environment_filter(environment_id)
                 )
+                base_qs = self._add_environment_filter(base_qs, environment_id)
 
             else:
                 base_qs = GroupTagValue.objects.filter(
                     project_id=project_id,
                     _key__key=k,
-                    **self._get_environment_filter(environment_id)
-                ).distinct()
+                )
+                base_qs = self._add_environment_filter(base_qs, environment_id).distinct()
 
             if matches:
                 base_qs = base_qs.filter(group_id__in=matches)
@@ -707,30 +697,31 @@ class V2TagStorage(TagStorage):
                 values_seen=GroupTagValue.objects.filter(
                     project_id=instance.project_id,
                     group_id=instance.group_id,
-                    environment_id=instance.environment_id,
                     _key_id=instance._key_id,
                 ).count(),
             )
 
     def get_tag_value_qs(self, project_id, environment_id, key, query=None):
-        queryset = TagValue.objects.filter(
+        qs = TagValue.objects.filter(
             project_id=project_id,
             _key__key=key,
-            **self._get_environment_filter(environment_id)
         )
 
+        qs = self._add_environment_filter(qs, environment_id)
+
         if query:
-            queryset = queryset.filter(value__contains=query)
+            qs = qs.filter(value__contains=query)
 
-        return queryset
+        return qs
 
     def get_group_tag_value_qs(self, project_id, group_id, environment_id, key):
-        return GroupTagValue.objects.filter(
+        qs = GroupTagValue.objects.filter(
             project_id=project_id,
             group_id=group_id,
             _key__key=key,
-            **self._get_environment_filter(environment_id)
         )
+        qs = self._add_environment_filter(qs, environment_id)
+        return qs
 
     def update_group_for_events(self, project_id, event_ids, destination_id):
         return EventTag.objects.filter(
@@ -738,8 +729,20 @@ class V2TagStorage(TagStorage):
             event_id__in=event_ids,
         ).update(group_id=destination_id)
 
-    def _get_environment_filter(self, environment_id):
-        if environment_id is None:
-            return {'environment_id__isnull': True}
+    def _add_environment_filter(self, queryset, environment_id):
+        """\
+        Filter a queryset by the provided `environment_id`, handling
+        whether a JOIN is required or not depending on the model.
+        """
+        if queryset.model == TagKey:
+            if environment_id is None:
+                return queryset.filter(environment_id__isnull=True)
+            else:
+                return queryset.filter(environment_id=environment_id)
+        elif queryset.model in (TagValue, GroupTagKey, GroupTagValue):
+            if environment_id is None:
+                return queryset.filter(_key__environment_id__isnull=True)
+            else:
+                return queryset.filter(_key__environment_id=environment_id)
         else:
-            return {'environment_id': environment_id}
+            raise ValueError("queryset of unsupported model '%s' provided" % queryset.model)
diff --git a/src/sentry/tagstore/v2/models/eventtag.py b/src/sentry/tagstore/v2/models/eventtag.py
index 443fe353e6..19f1f16c7d 100644
--- a/src/sentry/tagstore/v2/models/eventtag.py
+++ b/src/sentry/tagstore/v2/models/eventtag.py
@@ -17,7 +17,6 @@ class EventTag(Model):
     __core__ = False
 
     project_id = BoundedPositiveIntegerField()
-    environment_id = BoundedPositiveIntegerField()
     group_id = BoundedPositiveIntegerField()
     event_id = BoundedPositiveIntegerField()
     key = FlexibleForeignKey('tagstore.TagKey', db_column='key_id')
@@ -30,7 +29,6 @@ class EventTag(Model):
         index_together = (
             ('project_id', 'key', 'value'),
             ('group_id', 'key', 'value'),
-            ('environment_id', 'key', 'value'),
         )
 
     __repr__ = sane_repr('event_id', 'key', 'value')
diff --git a/src/sentry/tagstore/v2/models/grouptagkey.py b/src/sentry/tagstore/v2/models/grouptagkey.py
index 99ebf75b83..4a1403ec32 100644
--- a/src/sentry/tagstore/v2/models/grouptagkey.py
+++ b/src/sentry/tagstore/v2/models/grouptagkey.py
@@ -27,7 +27,6 @@ class GroupTagKey(Model):
 
     project_id = BoundedPositiveIntegerField(db_index=True)
     group_id = BoundedPositiveIntegerField(db_index=True)
-    environment_id = BoundedPositiveIntegerField(null=True)
     _key = FlexibleForeignKey('tagstore.TagKey', db_column='key_id')
     values_seen = BoundedPositiveIntegerField(default=0)
 
@@ -35,9 +34,9 @@ class GroupTagKey(Model):
 
     class Meta:
         app_label = 'tagstore'
-        unique_together = (('project_id', 'group_id', 'environment_id', '_key'), )
+        unique_together = (('project_id', 'group_id', '_key'), )
 
-    __repr__ = sane_repr('project_id', 'group_id', 'environment_id', '_key')
+    __repr__ = sane_repr('project_id', 'group_id', '_key')
 
     @property
     def key(self):
@@ -50,12 +49,10 @@ class GroupTagKey(Model):
             with transaction.atomic(using=router.db_for_write(GroupTagKey)):
                 GroupTagKey.objects.filter(
                     group_id=new_group.id,
-                    environment_id=self.environment_id,
                     _key_id=self._key_id,
                 ).update(
                     values_seen=GroupTagValue.objects.filter(
                         group_id=new_group.id,
-                        environment_id=self.environment_id,
                         _key_id=self._key_id,
                     ).count()
                 )
diff --git a/src/sentry/tagstore/v2/models/grouptagvalue.py b/src/sentry/tagstore/v2/models/grouptagvalue.py
index 71ec8d6510..f70f504cbb 100644
--- a/src/sentry/tagstore/v2/models/grouptagvalue.py
+++ b/src/sentry/tagstore/v2/models/grouptagvalue.py
@@ -27,7 +27,6 @@ class GroupTagValue(Model):
 
     project_id = BoundedPositiveIntegerField(db_index=True)
     group_id = BoundedPositiveIntegerField(db_index=True)
-    environment_id = BoundedPositiveIntegerField(null=True)
     times_seen = BoundedPositiveIntegerField(default=0)
     _key = FlexibleForeignKey('tagstore.TagKey', db_column='key_id')
     _value = FlexibleForeignKey('tagstore.TagValue', db_column='value_id')
@@ -40,7 +39,7 @@ class GroupTagValue(Model):
 
     class Meta:
         app_label = 'tagstore'
-        unique_together = (('project_id', 'group_id', 'environment_id', '_key', '_value'), )
+        unique_together = (('project_id', 'group_id', '_key', '_value'), )
         index_together = (('project_id', '_key', '_value', 'last_seen'), )
 
     __repr__ = sane_repr('project_id', 'group_id', '_key', '_value')
@@ -63,7 +62,6 @@ class GroupTagValue(Model):
             with transaction.atomic(using=router.db_for_write(GroupTagValue)):
                 new_obj = GroupTagValue.objects.get(
                     group_id=new_group.id,
-                    environment_id=self.environment_id,
                     _key_id=self._key_id,
                     _value_id=self._value_id,
                 )
diff --git a/src/sentry/tagstore/v2/models/tagvalue.py b/src/sentry/tagstore/v2/models/tagvalue.py
index 53a0516e27..da35bc4b02 100644
--- a/src/sentry/tagstore/v2/models/tagvalue.py
+++ b/src/sentry/tagstore/v2/models/tagvalue.py
@@ -26,7 +26,6 @@ class TagValue(Model):
     __core__ = False
 
     project_id = BoundedPositiveIntegerField(db_index=True)
-    environment_id = BoundedPositiveIntegerField(null=True)
     _key = FlexibleForeignKey('tagstore.TagKey', db_column='key_id')
     value = models.CharField(max_length=MAX_TAG_VALUE_LENGTH)
     data = GzippedDictField(blank=True, null=True)
@@ -40,10 +39,10 @@ class TagValue(Model):
 
     class Meta:
         app_label = 'tagstore'
-        unique_together = (('project_id', 'environment_id', '_key', 'value'), )
+        unique_together = (('project_id', '_key', 'value'), )
         index_together = (('project_id', '_key', 'last_seen'), )
 
-    __repr__ = sane_repr('project_id', 'environment_id', '_key', 'value')
+    __repr__ = sane_repr('project_id', '_key', 'value')
 
     @property
     def key(self):
diff --git a/tests/sentry/tagstore/v2/test_backend.py b/tests/sentry/tagstore/v2/test_backend.py
index 968890c4b7..f17c73da5b 100644
--- a/tests/sentry/tagstore/v2/test_backend.py
+++ b/tests/sentry/tagstore/v2/test_backend.py
@@ -148,7 +148,7 @@ class TagStorage(TestCase):
 
         assert TagValue.objects.filter(
             project_id=self.proj1.id,
-            environment_id=self.proj1env1.id,
+            _key__environment_id=self.proj1env1.id,
             _key_id=tk.id,
             value=self.value1,
         ).count() == 1
@@ -224,7 +224,7 @@ class TagStorage(TestCase):
         assert GroupTagKey.objects.filter(
             project_id=self.proj1.id,
             group_id=self.proj1group1.id,
-            environment_id=self.proj1env1.id,
+            _key__environment_id=self.proj1env1.id,
             _key_id=tk.id,
         ).count() == 1
         assert GroupTagKey.objects.all().count() == 1
@@ -301,7 +301,7 @@ class TagStorage(TestCase):
 
         tv = TagValue.objects.get(
             project_id=self.proj1.id,
-            environment_id=self.proj1env1.id,
+            _key__environment_id=self.proj1env1.id,
             _key_id=tk.id,
             value=self.value1,
         )
@@ -310,7 +310,7 @@ class TagStorage(TestCase):
         assert GroupTagValue.objects.filter(
             project_id=self.proj1.id,
             group_id=self.proj1group1.id,
-            environment_id=self.proj1env1.id,
+            _key__environment_id=self.proj1env1.id,
             _key_id=tk.id,
             _value_id=tv.id,
         ).count() == 1
@@ -335,7 +335,7 @@ class TagStorage(TestCase):
             assert EventTag.objects.get(
                 project_id=self.proj1.id,
                 group_id=self.proj1group1.id,
-                environment_id=self.proj1env1.id,
+                key__environment_id=self.proj1env1.id,
                 event_id=self.proj1group1event1.id,
                 key_id=k.id,
                 value_id=v.id,
diff --git a/tests/sentry/tasks/test_deletion.py b/tests/sentry/tasks/test_deletion.py
index 91f274129d..f176d3eb1d 100644
--- a/tests/sentry/tasks/test_deletion.py
+++ b/tests/sentry/tasks/test_deletion.py
@@ -257,7 +257,8 @@ class DeleteTagKeyTest(TestCase):
         )
 
         with self.tasks():
-            delete_tag_key_task(object_id=tk.id)
+            from sentry.tagstore.models import TagKey
+            delete_tag_key_task(object_id=tk.id, model=TagKey)
 
             try:
                 tagstore.get_group_tag_value(group.project_id, group.id, None, key, value)
diff --git a/tests/sentry/tasks/test_unmerge.py b/tests/sentry/tasks/test_unmerge.py
index 14431cad93..a0c66adb56 100644
--- a/tests/sentry/tasks/test_unmerge.py
+++ b/tests/sentry/tasks/test_unmerge.py
@@ -421,7 +421,7 @@ class UnmergeTestCase(TestCase):
         ])
 
         if settings.SENTRY_TAGSTORE.startswith('sentry.tagstore.v2'):
-            env_filter = {'environment_id': environment.id}
+            env_filter = {'_key__environment_id': environment.id}
         else:
             env_filter = {}
 
