commit f33163cf7a627b61e80de9a002d367776365404c
Author: Ben Vinegar <ben@benv.ca>
Date:   Mon Nov 30 15:28:46 2015 -0800

    Fix missed let/vars

diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index a64a07822a..7e9338e6c2 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -2,11 +2,11 @@ import jQuery from 'jquery';
 
 // setup jquery for CSRF tokens
 function getCookie(name) {
-  var cookieValue = null;
+  let cookieValue = null;
   if (document.cookie && document.cookie !== '') {
-    var cookies = document.cookie.split(';');
-    for (var i = 0; i < cookies.length; i++) {
-      var cookie = jQuery.trim(cookies[i]);
+    let cookies = document.cookie.split(';');
+    for (let i = 0; i < cookies.length; i++) {
+      let cookie = jQuery.trim(cookies[i]);
       // Does this cookie string begin with the name we want?
       if (cookie.substring(0, name.length + 1) == (name + '=')) {
         cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
@@ -17,7 +17,7 @@ function getCookie(name) {
   return cookieValue;
 }
 
-var csrftoken = getCookie('csrf');
+let csrftoken = getCookie('csrf');
 
 function csrfSafeMethod(method) {
   // these HTTP methods do not require CSRF protection
diff --git a/tests/js/spec/stores/selectedGroupStore.spec.js b/tests/js/spec/stores/selectedGroupStore.spec.js
index 24fe42e4ac..c638d7f2fa 100644
--- a/tests/js/spec/stores/selectedGroupStore.spec.js
+++ b/tests/js/spec/stores/selectedGroupStore.spec.js
@@ -1,5 +1,5 @@
-var GroupStore = require('app/stores/groupStore');
-var SelectedGroupStore = require('app/stores/selectedGroupStore');
+const GroupStore = require('app/stores/groupStore');
+const SelectedGroupStore = require('app/stores/selectedGroupStore');
 
 describe('SelectedGroupStore', function() {
 
@@ -132,7 +132,7 @@ describe('SelectedGroupStore', function() {
 
     it('returns selected ids', function() {
       SelectedGroupStore.records = {1: true, 2: false, 3: true};
-      var ids = SelectedGroupStore.getSelectedIds();
+      let ids = SelectedGroupStore.getSelectedIds();
 
       expect(ids.has('1')).to.be.true;
       expect(ids.has('3')).to.be.true;
@@ -141,7 +141,7 @@ describe('SelectedGroupStore', function() {
 
     it('returns empty set with no selected ids', function() {
       SelectedGroupStore.records = {1: false};
-      var ids = SelectedGroupStore.getSelectedIds();
+      let ids = SelectedGroupStore.getSelectedIds();
 
       expect(ids.has('1')).to.be.false;
       expect(ids.size).to.eql(0);
diff --git a/tests/js/spec/utils/streamManager.spec.js b/tests/js/spec/utils/streamManager.spec.js
index ff1f7eba00..9f0a353bf9 100644
--- a/tests/js/spec/utils/streamManager.spec.js
+++ b/tests/js/spec/utils/streamManager.spec.js
@@ -1,5 +1,5 @@
-var Reflux = require('reflux');
-var StreamManager = require('app/utils/streamManager');
+const Reflux = require('reflux');
+const StreamManager = require('app/utils/streamManager');
 
 describe('StreamManager', function() {
 
@@ -12,8 +12,8 @@ describe('StreamManager', function() {
   });
 
   it('allows options configuration', function() {
-    var options = {limit: 2};
-    var mgr = new StreamManager(this.store, options);
+    let options = {limit: 2};
+    let mgr = new StreamManager(this.store, options);
 
     expect(mgr.limit).to.eql(options.limit);
   });
@@ -21,16 +21,16 @@ describe('StreamManager', function() {
   describe('push()', function() {
 
     it('allows passing no items', function() {
-      var mgr = new StreamManager(this.store);
+      let mgr = new StreamManager(this.store);
       expect(mgr.push()).not.to.throw;
       expect(mgr.push([])).not.to.throw;
       expect(mgr.idList.length).to.eql(0);
     });
 
     it('adds items', function() {
-      var storeAdd = sinon.spy(this.store, 'add');
-      var mgr = new StreamManager(this.store);
-      var items = [{id: 1}];
+      let storeAdd = sinon.spy(this.store, 'add');
+      let mgr = new StreamManager(this.store);
+      let items = [{id: 1}];
       mgr.push(items);
 
       expect(mgr.idList.length).to.eql(1);
@@ -38,9 +38,9 @@ describe('StreamManager', function() {
     });
 
     it('allows adding a single item', function() {
-      var storeAdd = sinon.spy(this.store, 'add');
-      var mgr = new StreamManager(this.store);
-      var item = {id: 1};
+      let storeAdd = sinon.spy(this.store, 'add');
+      let mgr = new StreamManager(this.store);
+      let item = {id: 1};
       mgr.push(item);
 
       expect(mgr.idList.length).to.eql(1);
@@ -48,9 +48,9 @@ describe('StreamManager', function() {
     });
 
     it('trims after adding', function() {
-      var mgr = new StreamManager(this.store, {limit: 1});
-      var storeRemove = sinon.spy(this.store, 'remove');
-      var mgrTrim = sinon.spy(mgr, 'trim');
+      let mgr = new StreamManager(this.store, {limit: 1});
+      let storeRemove = sinon.spy(this.store, 'remove');
+      let mgrTrim = sinon.spy(mgr, 'trim');
       mgr.push([{id: 1}, {id: 2}]);
 
       expect(mgr.idList.length).to.eql(1);
@@ -59,7 +59,7 @@ describe('StreamManager', function() {
     });
 
     it('preserves NEW order of duplicates', function() {
-      var mgr = new StreamManager(this.store);
+      let mgr = new StreamManager(this.store);
       mgr.push([{id: 1}, {id: 3}]);
       mgr.push([{id: 1}, {id: 2}]); // New order of "1" if after "3"
 
@@ -71,8 +71,8 @@ describe('StreamManager', function() {
   describe('trim()', function() {
 
     it('removes trailing items in excess of the limit', function() {
-      var storeRemove = sinon.spy(this.store, 'remove');
-      var mgr = new StreamManager(this.store, {limit: 1});
+      let storeRemove = sinon.spy(this.store, 'remove');
+      let mgr = new StreamManager(this.store, {limit: 1});
       mgr.idList = [1, 2, 3];
       mgr.trim();
 
@@ -83,8 +83,8 @@ describe('StreamManager', function() {
     });
 
     it('does nothing with fewer items than limit', function() {
-      var storeRemove = sinon.spy(this.store, 'remove');
-      var mgr = new StreamManager(this.store, {limit: 10});
+      let storeRemove = sinon.spy(this.store, 'remove');
+      let mgr = new StreamManager(this.store, {limit: 10});
       mgr.idList = [1, 2, 3];
       mgr.trim();
 
@@ -98,24 +98,24 @@ describe('StreamManager', function() {
   describe('getAllItems()', function() {
 
     it('retrives ordered items from store', function() {
-      var storeGetAllItems = sinon.stub(this.store, 'getAllItems', function() {
+      let storeGetAllItems = sinon.stub(this.store, 'getAllItems', function() {
         return [{id: 1}, {id: 2}];
       });
-      var mgr = new StreamManager(this.store);
+      let mgr = new StreamManager(this.store);
       mgr.push({id: 2});
       mgr.push({id: 1});
-      var items = mgr.getAllItems();
+      let items = mgr.getAllItems();
 
       expect(items).to.eql([{id: 2}, {id: 1}]);
       expect(storeGetAllItems.called).to.be.true;
     });
 
     it('does not mutate store', function() {
-      var storeItems = [{id: 1}, {id: 2}];
+      let storeItems = [{id: 1}, {id: 2}];
       sinon.stub(this.store, 'getAllItems', function() {
         return storeItems;
       });
-      var mgr = new StreamManager(this.store);
+      let mgr = new StreamManager(this.store);
       mgr.push([{id: 2}, {id: 1}]);
       mgr.getAllItems();
 
@@ -127,8 +127,8 @@ describe('StreamManager', function() {
   describe('unshift()', function() {
 
     it('adds items to the start of the list', function() {
-      var storeAdd = sinon.spy(this.store, 'add');
-      var mgr = new StreamManager(this.store);
+      let storeAdd = sinon.spy(this.store, 'add');
+      let mgr = new StreamManager(this.store);
       mgr.unshift([{id: 2}]);
       mgr.unshift([{id: 1}]);
 
@@ -138,7 +138,7 @@ describe('StreamManager', function() {
     });
 
     it('moves duplicates to the start of the list', function() {
-      var mgr = new StreamManager(this.store);
+      let mgr = new StreamManager(this.store);
       mgr.unshift([{id: 2}, {id: 1}]);
       mgr.unshift([{id: 1}]);
 
@@ -146,7 +146,7 @@ describe('StreamManager', function() {
     });
 
     it('moves a duplicate array to the start of the list and preserves order', function() {
-      var mgr = new StreamManager(this.store);
+      let mgr = new StreamManager(this.store);
       mgr.unshift([{id: 3}, {id: 2}, {id: 1}]);
       mgr.unshift([{id: 2}, {id: 1}]);
 
@@ -154,7 +154,7 @@ describe('StreamManager', function() {
     });
 
     it('allows adding a single item', function() {
-      var mgr = new StreamManager(this.store);
+      let mgr = new StreamManager(this.store);
       mgr.unshift({id: 1});
 
       expect(mgr.idList).to.eql([1]);
