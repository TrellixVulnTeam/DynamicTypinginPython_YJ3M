commit 432ddc9473d3860d2a0ea967c8db72cfbcc81e3c
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Mar 18 01:17:56 2014 -0700

    Refactored into a middleware + fixed tests

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index cfd751df14..5fb69c6cfc 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -116,6 +116,7 @@ MIDDLEWARE_CLASSES = (
     'django.contrib.sessions.middleware.SessionMiddleware',
     'django.middleware.csrf.CsrfViewMiddleware',
     'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'sentry.middleware.sudo.SudoMiddleware',
     'sentry.middleware.locale.SentryLocaleMiddleware',
     'sentry.middleware.social_auth.SentrySocialAuthExceptionMiddleware',
     'django.middleware.locale.LocaleMiddleware',
diff --git a/src/sentry/middleware/sudo.py b/src/sentry/middleware/sudo.py
new file mode 100644
index 0000000000..65b59d3254
--- /dev/null
+++ b/src/sentry/middleware/sudo.py
@@ -0,0 +1,13 @@
+"""
+sentry.middleware.sudo
+~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from sentry.utils.sudo import has_sudo_privileges
+
+
+class SudoMiddleware(object):
+    def process_request(self, request):
+        request.is_sudo = lambda: has_sudo_privileges(request)
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index dd7518393c..005fdeabcb 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -30,6 +30,7 @@ from rest_framework.test import APITestCase as BaseAPITestCase
 from sentry.constants import MODULE_ROOT
 from sentry.models import Option, ProjectOption
 from sentry.utils import json
+from sentry.utils.sudo import grant_sudo_privileges, SUDO_COOKIE_NAME
 
 from .fixtures import Fixtures
 from .helpers import get_auth_header
@@ -55,6 +56,7 @@ class BaseTestCase(Fixtures, Exam):
             request.session = engine.SessionStore()
 
         login(request, user)
+        sudo_token = grant_sudo_privileges(request)
 
         # Save the session values.
         request.session.save()
@@ -70,6 +72,7 @@ class BaseTestCase(Fixtures, Exam):
             'expires': None,
         }
         self.client.cookies[session_cookie].update(cookie_data)
+        self.client.cookies[SUDO_COOKIE_NAME] = sudo_token
 
     def login(self):
         self.login_as(self.user)
diff --git a/src/sentry/utils/sudo.py b/src/sentry/utils/sudo.py
index 038cfb28d8..3070c6730d 100644
--- a/src/sentry/utils/sudo.py
+++ b/src/sentry/utils/sudo.py
@@ -16,7 +16,7 @@ from django.utils.crypto import get_random_string
 SUDO_COOKIE_NAME = getattr(settings, 'SUDO_COOKIE_NAME', 'sudo')
 
 
-def grant_sudo_privileges(request, response, max_age=3600):
+def grant_sudo_privileges(request, response=None, max_age=3600):
     """
     Assigns a random token to the user's session that allows them to have elevated permissions
     """
@@ -24,6 +24,11 @@ def grant_sudo_privileges(request, response, max_age=3600):
     token = get_random_string()
     request.session[SUDO_COOKIE_NAME] = token
     request.session.modified = True
+    request._sentry_sudo = True
+
+    if response is None:
+        return token
+
     response.set_cookie(
         SUDO_COOKIE_NAME, token,
         max_age=max_age,  # If max_age is None, it's a session cookie
@@ -37,14 +42,17 @@ def has_sudo_privileges(request):
     """
     Check if a request is allowed to perform sudo actions
     """
-    try:
-        return (
-            request.user.is_authenticated() and
-            request.COOKIES[SUDO_COOKIE_NAME] == request.session[SUDO_COOKIE_NAME]
-        )
-    except KeyError:
-        pass
-    return False
+    if not hasattr(request, '_sentry_sudo'):
+        try:
+            is_sudo = (
+                request.user.is_authenticated() and
+                request.COOKIES[SUDO_COOKIE_NAME] == request.session[SUDO_COOKIE_NAME]
+            )
+        except KeyError:
+            is_sudo = False
+
+        request._sentry_sudo = is_sudo
+    return request._sentry_sudo
 
 
 def redirect_to_sudo(next_url):
@@ -66,7 +74,7 @@ def sudo_required(func):
     """
     @wraps(func)
     def inner(request, *args, **kwargs):
-        if not has_sudo_privileges(request):
+        if not request.is_sudo():
             return redirect_to_sudo(request.get_full_path())
         return func(request, *args, **kwargs)
     return inner
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index ae25e0831f..87ab83c50f 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -28,8 +28,7 @@ from sentry.web.forms.accounts import (
 from sentry.web.helpers import render_to_response
 from sentry.utils.auth import get_auth_providers
 from sentry.utils.safe import safe_execute
-from sentry.utils.sudo import (
-    grant_sudo_privileges, has_sudo_privileges, sudo_required)
+from sentry.utils.sudo import grant_sudo_privileges, sudo_required
 
 
 @csrf_protect
@@ -66,7 +65,7 @@ def login(request):
 def sudo(request):
     redirect_to = request.GET.get('next', '/')
 
-    if has_sudo_privileges(request):
+    if request.is_sudo():
         return HttpResponseRedirect(redirect_to)
 
     form = SudoForm(request.user, request.POST or None)
