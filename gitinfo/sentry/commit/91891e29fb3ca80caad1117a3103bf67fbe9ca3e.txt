commit 91891e29fb3ca80caad1117a3103bf67fbe9ca3e
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Apr 16 12:30:02 2019 -0700

    feat(superuser): Make non member projects clearer in dropdown (#12770)
    
    Moves projects without membership to the bottom of the project dropdown,
    make them visually different with a grey text color. This change
    currently only affects superusers.

diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx
index f00d387e7d..892bd6235d 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx
@@ -1,4 +1,4 @@
-import {pick, isEqual} from 'lodash';
+import {isEqual, pick, partition} from 'lodash';
 import {withRouter} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
@@ -301,14 +301,19 @@ class GlobalSelectionHeader extends React.Component {
   };
 
   getProjects = () => {
-    const {isSuperuser} = ConfigStore.get('user');
     const {projects} = this.props;
+    const {isSuperuser} = ConfigStore.get('user');
+
+    const [memberProjects, nonMemberProjects] = partition(
+      projects,
+      project => project.isMember
+    );
 
     if (isSuperuser) {
-      return projects;
+      return [...memberProjects, ...nonMemberProjects];
     }
 
-    return projects.filter(project => project.isMember);
+    return memberProjects;
   };
 
   getFirstProject = () => {
diff --git a/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx b/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
index ccb9f943f2..5e5717af87 100644
--- a/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
@@ -20,7 +20,7 @@ export default class MultipleProjectSelector extends React.PureComponent {
   static propTypes = {
     organization: SentryTypes.Organization.isRequired,
     value: PropTypes.array,
-    projects: PropTypes.array,
+    projects: PropTypes.array.isRequired,
     onChange: PropTypes.func,
     onUpdate: PropTypes.func,
     multi: PropTypes.bool,
diff --git a/src/sentry/static/sentry/app/components/projectSelector.jsx b/src/sentry/static/sentry/app/components/projectSelector.jsx
index 0582c7dff3..3f73643b80 100644
--- a/src/sentry/static/sentry/app/components/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/projectSelector.jsx
@@ -335,11 +335,13 @@ class ProjectSelectorItem extends React.PureComponent {
       <BadgeAndActionsWrapper
         bookmarkHasChanged={this.state.bookmarkHasChanged}
         onAnimationEnd={this.clearAnimation}
+        isProjectMember={project.isMember}
       >
         <GlobalSelectionHeaderRow
           checked={isChecked}
           onCheckClick={this.handleClick}
           multi={multi}
+          priority="secondary"
         >
           <BadgeWrapper multi={multi}>
             <IdBadge
@@ -426,6 +428,12 @@ const SettingsIcon = styled(InlineSvg)`
   width: 16px;
 `;
 
+const getNonMemberStyles = p => {
+  return `
+    color: ${p.theme.gray2};
+  `;
+};
+
 const BadgeAndActionsWrapper = styled('div')`
   animation: ${p => (p.bookmarkHasChanged ? `1s ${alertHighlight('info')}` : 'none')};
   z-index: ${p => (p.bookmarkHasChanged ? 1 : 'inherit')};
@@ -433,7 +441,7 @@ const BadgeAndActionsWrapper = styled('div')`
   border-style: solid;
   border-width: 1px 0;
   border-color: transparent;
-
+  ${p => (p.isProjectMember ? null : getNonMemberStyles(p))}
   &:hover ${StyledBookmarkStar}, &:hover ${SettingsIconLink} {
     opacity: 1;
   }
diff --git a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
index 24a9da26c7..29c93f791f 100644
--- a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
+++ b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
@@ -6,6 +6,7 @@ import GlobalSelectionHeader from 'app/components/organizations/globalSelectionH
 import GlobalSelectionStore from 'app/stores/globalSelectionStore';
 import * as globalActions from 'app/actionCreators/globalSelection';
 import ProjectsStore from 'app/stores/projectsStore';
+import ConfigStore from 'app/stores/configStore';
 
 const changeQuery = (routerContext, query) => ({
   ...routerContext,
@@ -307,4 +308,49 @@ describe('GlobalSelectionHeader', function() {
       expect(items.at(0).text()).toBe('staging');
     });
   });
+
+  describe('projects list', function() {
+    let wrapper, memberProject, nonMemberProject, initialData;
+    beforeEach(function() {
+      memberProject = TestStubs.Project({id: '3', isMember: true});
+      nonMemberProject = TestStubs.Project({id: '4', isMember: false});
+      const org = TestStubs.Organization({projects: [memberProject, nonMemberProject]});
+      ProjectsStore.loadInitialData(org.projects);
+
+      initialData = initializeOrg({
+        organization: org,
+        router: {
+          location: {query: {}},
+        },
+      });
+
+      wrapper = mount(
+        <GlobalSelectionHeader organization={initialData.organization} />,
+        initialData.routerContext
+      );
+    });
+    it('gets member projects', function() {
+      expect(wrapper.find('MultipleProjectSelector').prop('projects')).toEqual([
+        memberProject,
+      ]);
+    });
+
+    it('gets all projects if superuser', function() {
+      ConfigStore.config = {
+        user: {
+          isSuperuser: true,
+        },
+      };
+
+      wrapper = mount(
+        <GlobalSelectionHeader organization={initialData.organization} />,
+        initialData.routerContext
+      );
+
+      expect(wrapper.find('MultipleProjectSelector').prop('projects')).toEqual([
+        memberProject,
+        nonMemberProject,
+      ]);
+    });
+  });
 });
