commit defdf67413af2e49eda803d4ecad51969fb32205
Author: Mark Story <mark@sentry.io>
Date:   Thu Oct 31 14:28:44 2019 -0400

    feat(discover) Persist the overview chart state in saved queries (#15371)
    
    Include the overview chart state in URL state and saved queries. I've
    also fixed a problem in the event-stats endpoint where invalid
    aggregates would result in 500s.

diff --git a/src/sentry/api/endpoints/organization_events_stats.py b/src/sentry/api/endpoints/organization_events_stats.py
index f4550db333..df7809fd75 100644
--- a/src/sentry/api/endpoints/organization_events_stats.py
+++ b/src/sentry/api/endpoints/organization_events_stats.py
@@ -66,7 +66,10 @@ class OrganizationEventsStatsEndpoint(OrganizationEventsEndpointBase):
             resolved = resolve_field_list([y_axis], {})
         except InvalidSearchQuery as err:
             raise ParseError(detail=six.text_type(err))
-        aggregate = resolved["aggregations"][0]
+        try:
+            aggregate = resolved["aggregations"][0]
+        except IndexError:
+            raise ParseError(detail="Invalid yAxis value requested.")
         aggregate[2] = "count"
         snuba_args["aggregations"] = [aggregate]
 
diff --git a/src/sentry/api/serializers/models/discoversavedquery.py b/src/sentry/api/serializers/models/discoversavedquery.py
index df9952d30f..f3bd6bdd1b 100644
--- a/src/sentry/api/serializers/models/discoversavedquery.py
+++ b/src/sentry/api/serializers/models/discoversavedquery.py
@@ -24,6 +24,7 @@ class DiscoverSavedQuerySerializer(Serializer):
             "limit",
             "version",
             "tags",
+            "yAxis",
         ]
 
         data = {
diff --git a/src/sentry/discover/endpoints/serializers.py b/src/sentry/discover/endpoints/serializers.py
index 3cb2bc75a6..e811d352c0 100644
--- a/src/sentry/discover/endpoints/serializers.py
+++ b/src/sentry/discover/endpoints/serializers.py
@@ -161,9 +161,10 @@ class DiscoverSavedQuerySerializer(serializers.Serializer):
     fieldnames = ListField(child=serializers.CharField(), required=False, allow_null=True)
     query = serializers.CharField(required=False, allow_null=True)
     tags = ListField(child=serializers.CharField(), required=False, allow_null=True)
+    yAxis = serializers.CharField(required=False, allow_null=True)
 
     disallowed_fields = {
-        1: set(["environment", "fieldnames", "query", "tags"]),
+        1: set(["environment", "fieldnames", "query", "tags", "yAxis"]),
         2: set(["groupby", "rollup", "aggregations", "conditions", "limit"]),
     }
 
@@ -200,6 +201,7 @@ class DiscoverSavedQuerySerializer(serializers.Serializer):
             "orderby",
             "limit",
             "tags",
+            "yAxis",
         ]
 
         for key in query_keys:
diff --git a/src/sentry/static/sentry/app/stores/discoverSavedQueriesStore.tsx b/src/sentry/static/sentry/app/stores/discoverSavedQueriesStore.tsx
index 107be5a478..96d280b25f 100644
--- a/src/sentry/static/sentry/app/stores/discoverSavedQueriesStore.tsx
+++ b/src/sentry/static/sentry/app/stores/discoverSavedQueriesStore.tsx
@@ -17,6 +17,7 @@ export type NewQuery = {
   end?: string;
   environment?: Readonly<string[]>;
   tags?: Readonly<string[]>;
+  yAxis?: string;
 };
 
 export type SavedQuery = NewQuery & {
diff --git a/src/sentry/static/sentry/app/views/events/eventsChart.jsx b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
index baf966a772..c72b421460 100644
--- a/src/sentry/static/sentry/app/views/events/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
@@ -12,6 +12,7 @@ import ReleaseSeries from 'app/components/charts/releaseSeries';
 import SentryTypes from 'app/sentryTypes';
 import withApi from 'app/utils/withApi';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
+import {callIfFunction} from 'app/utils/callIfFunction';
 
 import EventsRequest from './utils/eventsRequest';
 import YAxisSelector from './yAxisSelector';
@@ -99,24 +100,27 @@ class EventsChart extends React.Component {
     router: PropTypes.object,
     showLegend: PropTypes.bool,
     yAxisOptions: PropTypes.array,
+    yAxisValue: PropTypes.string,
+    onYAxisChange: PropTypes.func,
   };
 
-  constructor(props) {
-    super(props);
-    const value =
-      props.yAxisOptions && props.yAxisOptions.length
-        ? props.yAxisOptions[0].value
-        : undefined;
-
-    this.state = {
-      yAxis: value,
-    };
-  }
-
   handleYAxisChange = value => {
-    this.setState({yAxis: value});
+    const {onYAxisChange} = this.props;
+    callIfFunction(onYAxisChange, value);
   };
 
+  getYAxisValue() {
+    const {yAxisValue, yAxisOptions} = this.props;
+    if (yAxisValue) {
+      return yAxisValue;
+    }
+    if (yAxisOptions && yAxisOptions.length) {
+      return yAxisOptions[0].value;
+    }
+
+    return undefined;
+  }
+
   render() {
     const {
       api,
@@ -134,6 +138,7 @@ class EventsChart extends React.Component {
     } = this.props;
     // Include previous only on relative dates (defaults to relative if no start and end)
     const includePrevious = !start && !end;
+    const yAxis = this.getYAxisValue();
 
     return (
       <ChartZoom
@@ -157,7 +162,7 @@ class EventsChart extends React.Component {
             showLoading={false}
             query={query}
             includePrevious={includePrevious}
-            yAxis={this.state.yAxis}
+            yAxis={yAxis}
           >
             {({loading, reloading, timeseriesData, previousTimeseriesData}) => {
               return (
@@ -172,7 +177,7 @@ class EventsChart extends React.Component {
                         <TransparentLoadingMask visible={reloading} />
                         {yAxisOptions && (
                           <YAxisSelector
-                            selected={this.state.yAxis}
+                            selected={yAxis}
                             options={yAxisOptions}
                             onChange={this.handleYAxisChange}
                           />
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index 784226b050..71d68986d8 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -26,6 +26,7 @@ type LocationQuery = {
   utc?: string | string[];
   statsPeriod?: string | string[];
   cursor?: string | string[];
+  yAxis?: string | string[];
 };
 
 const EXTERNAL_QUERY_STRING_KEYS: Readonly<Array<keyof LocationQuery>> = [
@@ -303,6 +304,7 @@ class EventView {
   end: string | undefined;
   statsPeriod: string | undefined;
   environment: Readonly<string[]>;
+  yAxis: string | undefined;
 
   constructor(props: {
     id: string | undefined;
@@ -316,6 +318,7 @@ class EventView {
     end: string | undefined;
     statsPeriod: string | undefined;
     environment: Readonly<string[]>;
+    yAxis: string | undefined;
   }) {
     // only include sort keys that are included in the fields
 
@@ -348,6 +351,7 @@ class EventView {
     this.end = props.end;
     this.statsPeriod = props.statsPeriod;
     this.environment = props.environment;
+    this.yAxis = props.yAxis;
   }
 
   static fromLocation(location: Location): EventView {
@@ -365,6 +369,7 @@ class EventView {
       end: decodeScalar(end),
       statsPeriod: decodeScalar(statsPeriod),
       environment: collectQueryStringByKey(location.query, 'environment'),
+      yAxis: decodeScalar(location.query.yAxis),
     });
   }
 
@@ -388,21 +393,24 @@ class EventView {
       end: undefined,
       statsPeriod: undefined,
       environment: [],
+      yAxis: undefined,
     });
   }
 
   static fromSavedQuery(saved: SavedQuery | LegacySavedQuery): EventView {
-    let fields;
+    let fields, yAxis;
     if (isLegacySavedQuery(saved)) {
       fields = saved.fields.map(field => {
         return {field, title: field};
       });
+      yAxis = undefined;
     } else {
       fields = saved.fields.map((field, i) => {
         const title =
           saved.fieldnames && saved.fieldnames[i] ? saved.fieldnames[i] : field;
         return {field, title};
       });
+      yAxis = saved.yAxis;
     }
 
     // normalize datetime selection
@@ -435,6 +443,7 @@ class EventView {
         },
         'environment'
       ),
+      yAxis,
     });
   }
 
@@ -498,6 +507,7 @@ class EventView {
       end: this.end,
       range: this.statsPeriod,
       environment: this.environment,
+      yAxis: this.yAxis,
     };
 
     if (!newQuery.query) {
@@ -518,6 +528,7 @@ class EventView {
       sort: encodeSorts(this.sorts),
       tag: this.tags,
       query: this.query,
+      yAxis: this.yAxis,
     };
 
     for (const field of EXTERNAL_QUERY_STRING_KEYS) {
@@ -587,6 +598,7 @@ class EventView {
       end: this.end,
       statsPeriod: this.statsPeriod,
       environment: this.environment,
+      yAxis: this.yAxis,
     });
   }
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/events.tsx b/src/sentry/static/sentry/app/views/eventsV2/events.tsx
index b5a92440c9..04e79fef30 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/events.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/events.tsx
@@ -30,7 +30,7 @@ type EventsProps = {
 };
 
 export default class Events extends React.Component<EventsProps> {
-  handleSearch = query => {
+  handleSearch = (query: string) => {
     const {router, location} = this.props;
 
     const queryParams = getParams({
@@ -47,6 +47,20 @@ export default class Events extends React.Component<EventsProps> {
     });
   };
 
+  handleYAxisChange = (value: string) => {
+    const {router, location} = this.props;
+
+    const newQuery = {
+      ...location.query,
+      yAxis: value,
+    };
+
+    router.push({
+      pathname: location.pathname,
+      query: newQuery,
+    });
+  };
+
   renderTagsTable = () => {
     const {organization, eventView, location} = this.props;
 
@@ -83,6 +97,8 @@ export default class Events extends React.Component<EventsProps> {
                 organization={organization}
                 showLegend
                 yAxisOptions={yAxisOptions}
+                yAxisValue={eventView.yAxis}
+                onYAxisChange={this.handleYAxisChange}
               />
             ),
             fixed: 'events chart',
diff --git a/tests/js/spec/views/eventsV2/eventView.spec.jsx b/tests/js/spec/views/eventsV2/eventView.spec.jsx
index 52f8651e8d..cae7168233 100644
--- a/tests/js/spec/views/eventsV2/eventView.spec.jsx
+++ b/tests/js/spec/views/eventsV2/eventView.spec.jsx
@@ -38,6 +38,7 @@ describe('EventView.fromLocation()', function() {
         end: '2019-10-02T00:00:00',
         statsPeriod: '14d',
         environment: ['staging'],
+        yAxis: 'p95',
       },
     };
 
@@ -55,6 +56,7 @@ describe('EventView.fromLocation()', function() {
       end: undefined,
       statsPeriod: '14d',
       environment: ['staging'],
+      yAxis: 'p95',
     });
   });
 
@@ -145,12 +147,13 @@ describe('EventView.fromLocation()', function() {
       end: void 0,
       statsPeriod: '14d',
       environment: [],
+      yAxis: void 0,
     });
   });
 });
 
 describe('EventView.fromSavedQuery()', function() {
-  it('maps basic properties', function() {
+  it('maps basic properties of legacy query', function() {
     const saved = {
       id: '42',
       name: 'best query',
@@ -178,6 +181,7 @@ describe('EventView.fromSavedQuery()', function() {
       // statsPeriod has precedence
       statsPeriod: '14d',
       environment: ['staging'],
+      yAxis: undefined,
     });
 
     const eventView2 = EventView.fromSavedQuery({
@@ -212,6 +216,7 @@ describe('EventView.fromSavedQuery()', function() {
       dateUpdated: '2019-10-30T06:13:17.632096Z',
       id: '5',
       projects: [1],
+      yAxis: 'count(id)',
     };
 
     const eventView = EventView.fromSavedQuery(saved);
@@ -227,6 +232,7 @@ describe('EventView.fromSavedQuery()', function() {
       query: '',
       project: [1],
       environment: ['dev', 'production'],
+      yAxis: 'count(id)',
     };
 
     expect(eventView).toMatchObject(expected);
@@ -352,6 +358,7 @@ describe('EventView.generateQueryStringObject()', function() {
       statsPeriod: '',
       start: null,
       end: undefined,
+      yAxis: undefined,
     });
     const query = eventView.generateQueryStringObject();
     expect(query.environment).toBeUndefined();
@@ -359,6 +366,7 @@ describe('EventView.generateQueryStringObject()', function() {
     expect(query.start).toBeUndefined();
     expect(query.end).toBeUndefined();
     expect(query.project).toBeUndefined();
+    expect(query.yAxis).toBeUndefined();
   });
 
   it('generates query string object', function() {
@@ -377,6 +385,7 @@ describe('EventView.generateQueryStringObject()', function() {
       end: '2019-10-02T00:00:00',
       statsPeriod: '14d',
       environment: ['staging'],
+      yAxis: 'count(id)',
     };
 
     const eventView = new EventView(state);
@@ -394,6 +403,7 @@ describe('EventView.generateQueryStringObject()', function() {
       end: '2019-10-02T00:00:00',
       statsPeriod: '14d',
       environment: ['staging'],
+      yAxis: 'count(id)',
     };
 
     expect(eventView.generateQueryStringObject()).toEqual(expected);
@@ -524,6 +534,7 @@ describe('EventView.getEventsAPIPayload()', function() {
         utc: 'true',
         statsPeriod: '14d',
         cursor: 'some cursor',
+        yAxis: 'count(id)',
 
         // non-relevant query strings
         bestCountry: 'canada',
diff --git a/tests/snuba/api/endpoints/test_discover_saved_queries.py b/tests/snuba/api/endpoints/test_discover_saved_queries.py
index 3a20eb0f1d..7887bde719 100644
--- a/tests/snuba/api/endpoints/test_discover_saved_queries.py
+++ b/tests/snuba/api/endpoints/test_discover_saved_queries.py
@@ -170,6 +170,7 @@ class DiscoverSavedQueriesVersion2Test(DiscoverSavedQueryBase):
                     "query": "event.type:error browser.name:Firefox",
                     "range": "24h",
                     "tags": ["release", "environment"],
+                    "yAxis": "count(id)",
                     "version": 2,
                 },
             )
@@ -181,6 +182,7 @@ class DiscoverSavedQueriesVersion2Test(DiscoverSavedQueryBase):
         assert data["environment"] == ["dev"]
         assert data["query"] == "event.type:error browser.name:Firefox"
         assert data["tags"] == ["release", "environment"]
+        assert data["yAxis"] == "count(id)"
 
     def test_post_success_no_fieldnames(self):
         with self.feature(self.feature_name):
diff --git a/tests/snuba/api/endpoints/test_organization_events_stats.py b/tests/snuba/api/endpoints/test_organization_events_stats.py
index 6e61210a0d..3e452a8aa9 100644
--- a/tests/snuba/api/endpoints/test_organization_events_stats.py
+++ b/tests/snuba/api/endpoints/test_organization_events_stats.py
@@ -171,6 +171,20 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
             [{"count": 2}],
         ]
 
+    def test_invalid_aggregate(self):
+        with self.feature("organizations:events-v2"):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "start": iso_format(self.day_ago),
+                    "end": iso_format(self.day_ago + timedelta(hours=1, minutes=59)),
+                    "interval": "1h",
+                    "yAxis": "rubbish",
+                },
+            )
+        assert response.status_code == 400, response.content
+
     def test_aggregate_function_user_count(self):
         with self.feature("organizations:events-v2"):
             response = self.client.get(
