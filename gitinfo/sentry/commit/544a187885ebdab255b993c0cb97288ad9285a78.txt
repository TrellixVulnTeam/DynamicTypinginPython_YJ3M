commit 544a187885ebdab255b993c0cb97288ad9285a78
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jul 5 18:19:18 2017 -0700

    pep8: format src/sentry

diff --git a/src/sentry/admin.py b/src/sentry/admin.py
index d38334bcd2..5441f84100 100644
--- a/src/sentry/admin.py
+++ b/src/sentry/admin.py
@@ -225,9 +225,9 @@ class UserAdmin(admin.ModelAdmin):
     def get_urls(self):
         from django.conf.urls import patterns
         return patterns('',
-            (r'^(\d+)/password/$',
-             self.admin_site.admin_view(self.user_change_password))
-        ) + super(UserAdmin, self).get_urls()
+                        (r'^(\d+)/password/$',
+                         self.admin_site.admin_view(self.user_change_password))
+                        ) + super(UserAdmin, self).get_urls()
 
     def lookup_allowed(self, lookup, value):
         # See #20078: we don't want to allow any lookups involving passwords.
@@ -301,9 +301,9 @@ class UserAdmin(admin.ModelAdmin):
             'show_save': True,
         }
         return TemplateResponse(request,
-            self.change_user_password_template or
-            'admin/auth/user/change_password.html',
-            context, current_app=self.admin_site.name)
+                                self.change_user_password_template or
+                                'admin/auth/user/change_password.html',
+                                context, current_app=self.admin_site.name)
 
     def response_add(self, request, obj, post_url_continue=None):
         """
diff --git a/src/sentry/api/content_negotiation.py b/src/sentry/api/content_negotiation.py
index 24795c7385..b54bd79b52 100644
--- a/src/sentry/api/content_negotiation.py
+++ b/src/sentry/api/content_negotiation.py
@@ -8,6 +8,7 @@ class ConditionalContentNegotiation(DefaultContentNegotiation):
     """
     Overrides the parsers on POST to support file uploads.
     """
+
     def select_parser(self, request, parsers):
         if request.method == 'POST':
             parsers = [FormParser(), MultiPartParser()]
diff --git a/src/sentry/api/endpoints/event_apple_crash_report.py b/src/sentry/api/endpoints/event_apple_crash_report.py
index a3e7ea4c56..b6dea20500 100644
--- a/src/sentry/api/endpoints/event_apple_crash_report.py
+++ b/src/sentry/api/endpoints/event_apple_crash_report.py
@@ -52,7 +52,7 @@ class EventAppleCrashReportEndpoint(Endpoint):
         symbolicated = (request.GET.get('minified') not in ('1', 'true'))
         debug_images = None
         if (event.data.get('debug_meta') and
-           event.data.get('debug_meta').get('images')):
+                event.data.get('debug_meta').get('images')):
             debug_images = event.data.get('debug_meta').get('images')
 
         apple_crash_report_string = six.text_type(AppleCrashReport(
diff --git a/src/sentry/api/endpoints/organization_config_repositories.py b/src/sentry/api/endpoints/organization_config_repositories.py
index 42585a2e1f..f43813e793 100644
--- a/src/sentry/api/endpoints/organization_config_repositories.py
+++ b/src/sentry/api/endpoints/organization_config_repositories.py
@@ -14,7 +14,8 @@ class OrganizationConfigRepositoriesEndpoint(OrganizationEndpoint):
         providers = []
         for provider_id in provider_bindings:
             provider = provider_bindings.get(provider_id)(id=provider_id)
-            if provider_id != 'bitbucket' or features.has('organizations:bitbucket-repos', organization):
+            if provider_id != 'bitbucket' or features.has(
+                    'organizations:bitbucket-repos', organization):
                 providers.append({
                     'id': provider_id,
                     'name': provider.name,
diff --git a/src/sentry/api/endpoints/organization_release_file_details.py b/src/sentry/api/endpoints/organization_release_file_details.py
index f7125ef841..b5cfd5084c 100644
--- a/src/sentry/api/endpoints/organization_release_file_details.py
+++ b/src/sentry/api/endpoints/organization_release_file_details.py
@@ -33,7 +33,8 @@ class OrganizationReleaseFileDetailsEndpoint(OrganizationReleasesBaseEndpoint):
             content_type=file.headers.get('content-type', 'application/octet-stream'),
         )
         response['Content-Length'] = file.size
-        response['Content-Disposition'] = 'attachment; filename="%s"' % posixpath.basename(" ".join(releasefile.name.split()))
+        response['Content-Disposition'] = 'attachment; filename="%s"' % posixpath.basename(
+            " ".join(releasefile.name.split()))
         return response
 
     def get(self, request, organization, version, file_id):
diff --git a/src/sentry/api/endpoints/organization_release_files.py b/src/sentry/api/endpoints/organization_release_files.py
index a93e699d2c..032c1eb1cc 100644
--- a/src/sentry/api/endpoints/organization_release_files.py
+++ b/src/sentry/api/endpoints/organization_release_files.py
@@ -106,7 +106,8 @@ class OrganizationReleaseFilesEndpoint(OrganizationReleasesBaseEndpoint):
         name = full_name.rsplit('/', 1)[-1]
 
         if _filename_re.search(name):
-            return Response({'detail': 'File name must not contain special whitespace characters'}, status=400)
+            return Response(
+                {'detail': 'File name must not contain special whitespace characters'}, status=400)
 
         dist_name = request.DATA.get('dist')
         dist = None
@@ -123,7 +124,8 @@ class OrganizationReleaseFilesEndpoint(OrganizationReleasesBaseEndpoint):
                 return Response({'detail': 'header value was not formatted correctly'}, status=400)
             else:
                 if _filename_re.search(v):
-                    return Response({'detail': 'header value must not contain special whitespace characters'}, status=400)
+                    return Response(
+                        {'detail': 'header value must not contain special whitespace characters'}, status=400)
                 headers[k] = v.strip()
 
         file = File.objects.create(
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 95289f6dec..a4b24af5a0 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -89,7 +89,8 @@ class ProjectAdminSerializer(serializers.Serializer):
 
     def validate_digestsMaxDelay(self, attrs, source):
         if attrs[source] < attrs['digestsMinDelay']:
-            raise serializers.ValidationError('The maximum delay on digests must be higher than the minimum.')
+            raise serializers.ValidationError(
+                'The maximum delay on digests must be higher than the minimum.')
         return attrs
 
 
@@ -251,7 +252,9 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             if 'sentry:scrub_data' in options:
                 project.update_option('sentry:scrub_data', bool(options['sentry:scrub_data']))
             if 'sentry:scrub_defaults' in options:
-                project.update_option('sentry:scrub_defaults', bool(options['sentry:scrub_defaults']))
+                project.update_option(
+                    'sentry:scrub_defaults', bool(
+                        options['sentry:scrub_defaults']))
             if 'sentry:safe_fields' in options:
                 project.update_option(
                     'sentry:safe_fields',
@@ -263,16 +266,20 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                     [s.strip().lower() for s in options['sentry:sensitive_fields']]
                 )
             if 'sentry:csp_ignored_sources_defaults' in options:
-                project.update_option('sentry:csp_ignored_sources_defaults', bool(options['sentry:csp_ignored_sources_defaults']))
+                project.update_option(
+                    'sentry:csp_ignored_sources_defaults', bool(
+                        options['sentry:csp_ignored_sources_defaults']))
             if 'sentry:csp_ignored_sources' in options:
                 project.update_option(
                     'sentry:csp_ignored_sources',
                     clean_newline_inputs(options['sentry:csp_ignored_sources']))
             if 'feedback:branding' in options:
-                project.update_option('feedback:branding', '1' if options['feedback:branding'] else '0')
+                project.update_option(
+                    'feedback:branding',
+                    '1' if options['feedback:branding'] else '0')
             if 'sentry:reprocessing_active' in options:
                 project.update_option('sentry:reprocessing_active',
-                    bool(options['sentry:reprocessing_active']))
+                                      bool(options['sentry:reprocessing_active']))
             if 'filters:blacklisted_ips' in options:
                 project.update_option(
                     'sentry:blacklisted_ips',
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index fcb902f4df..3cffaa1c4c 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -112,7 +112,8 @@ class StatusDetailsValidator(serializers.Serializer):
                     organization_id=project.organization_id,
                 ).order_by('-date_added')[0]
             except IndexError:
-                raise serializers.ValidationError('No release data present in the system to form a basis for \'Next Release\'')
+                raise serializers.ValidationError(
+                    'No release data present in the system to form a basis for \'Next Release\'')
         else:
             try:
                 attrs[source] = Release.objects.get(
@@ -121,7 +122,8 @@ class StatusDetailsValidator(serializers.Serializer):
                     version=value,
                 )
             except Release.DoesNotExist:
-                raise serializers.ValidationError('Unable to find a release with the given version.')
+                raise serializers.ValidationError(
+                    'Unable to find a release with the given version.')
         return attrs
 
     def validate_inNextRelease(self, attrs, source):
@@ -130,7 +132,8 @@ class StatusDetailsValidator(serializers.Serializer):
             projects=project,
             organization_id=project.organization_id,
         ).exists():
-            raise serializers.ValidationError('No release data present in the system to form a basis for \'Next Release\'')
+            raise serializers.ValidationError(
+                'No release data present in the system to form a basis for \'Next Release\'')
         return attrs
 
 
@@ -215,7 +218,9 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
             try:
                 query_kwargs.update(parse_query(project, query, request.user))
             except InvalidQuery as e:
-                raise ValidationError(u'Your search query could not be parsed: {}'.format(e.message))
+                raise ValidationError(
+                    u'Your search query could not be parsed: {}'.format(
+                        e.message))
 
         return query_kwargs
 
@@ -315,11 +320,16 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                     matching_group = None
 
             if matching_group is not None:
-                response = Response(serialize(
-                    [matching_group], request.user, StreamGroupSerializer(
-                        stats_period=stats_period, matching_event_id=getattr(matching_event, 'id', None)
-                    )
-                ))
+                response = Response(
+                    serialize(
+                        [matching_group],
+                        request.user,
+                        StreamGroupSerializer(
+                            stats_period=stats_period,
+                            matching_event_id=getattr(
+                                matching_event,
+                                'id',
+                                None))))
                 response['X-Sentry-Direct-Hit'] = '1'
                 return response
 
@@ -598,15 +608,17 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                                     'user_window': ignore_user_window,
                                     'state': state,
                                     'actor_id': request.user.id if request.user.is_authenticated() else None,
-                                }
-                            )
+                                })
                             result['statusDetails'] = {
                                 'ignoreCount': ignore_count,
                                 'ignoreUntil': ignore_until,
                                 'ignoreUserCount': ignore_user_count,
                                 'ignoreUserWindow': ignore_user_window,
                                 'ignoreWindow': ignore_window,
-                                'actor': serialize(extract_lazy_object(request.user), request.user),
+                                'actor': serialize(
+                                    extract_lazy_object(
+                                        request.user),
+                                    request.user),
                             }
                     else:
                         GroupSnooze.objects.filter(
@@ -832,7 +844,9 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
             group_ids = [g.id for g in group_list]
         else:
             # missing any kind of filter
-            return Response('{"detail": "You must specify a list of IDs for this operation"}', status=400)
+            return Response(
+                '{"detail": "You must specify a list of IDs for this operation"}',
+                status=400)
 
         if not group_ids:
             return Response(status=204)
diff --git a/src/sentry/api/endpoints/project_release_file_details.py b/src/sentry/api/endpoints/project_release_file_details.py
index 708d8698e5..caa9bba97b 100644
--- a/src/sentry/api/endpoints/project_release_file_details.py
+++ b/src/sentry/api/endpoints/project_release_file_details.py
@@ -85,7 +85,8 @@ class ProjectReleaseFileDetailsEndpoint(ProjectEndpoint):
             content_type=file.headers.get('content-type', 'application/octet-stream'),
         )
         response['Content-Length'] = file.size
-        response['Content-Disposition'] = 'attachment; filename="%s"' % posixpath.basename(" ".join(releasefile.name.split()))
+        response['Content-Disposition'] = 'attachment; filename="%s"' % posixpath.basename(
+            " ".join(releasefile.name.split()))
         return response
 
     @attach_scenarios([retrieve_file_scenario])
diff --git a/src/sentry/api/endpoints/project_release_files.py b/src/sentry/api/endpoints/project_release_files.py
index 8a08459bbf..cc0a4405ae 100644
--- a/src/sentry/api/endpoints/project_release_files.py
+++ b/src/sentry/api/endpoints/project_release_files.py
@@ -142,7 +142,8 @@ class ProjectReleaseFilesEndpoint(ProjectEndpoint):
         name = full_name.rsplit('/', 1)[-1]
 
         if _filename_re.search(name):
-            return Response({'detail': 'File name must not contain special whitespace characters'}, status=400)
+            return Response(
+                {'detail': 'File name must not contain special whitespace characters'}, status=400)
 
         dist_name = request.DATA.get('dist')
         dist = None
@@ -159,7 +160,8 @@ class ProjectReleaseFilesEndpoint(ProjectEndpoint):
                 return Response({'detail': 'header value was not formatted correctly'}, status=400)
             else:
                 if _filename_re.search(v):
-                    return Response({'detail': 'header value must not contain special whitespace characters'}, status=400)
+                    return Response(
+                        {'detail': 'header value must not contain special whitespace characters'}, status=400)
                 headers[k] = v.strip()
 
         file = File.objects.create(
diff --git a/src/sentry/api/endpoints/system_health.py b/src/sentry/api/endpoints/system_health.py
index d0fd716ae5..a688ec4d9a 100644
--- a/src/sentry/api/endpoints/system_health.py
+++ b/src/sentry/api/endpoints/system_health.py
@@ -24,7 +24,7 @@ class SystemHealthEndpoint(Endpoint):
                     'url': problem.url,
                 }
                 for problem in sorted(itertools.chain.from_iterable(results.values()),
-                                     reverse=True)
+                                      reverse=True)
             ],
             'healthy': {type(check).__name__: not problems for check, problems in results.items()},
         })
diff --git a/src/sentry/api/serializers/models/grouphash.py b/src/sentry/api/serializers/models/grouphash.py
index 5cff8e4246..d9599fa62f 100644
--- a/src/sentry/api/serializers/models/grouphash.py
+++ b/src/sentry/api/serializers/models/grouphash.py
@@ -18,7 +18,8 @@ def get_latest_events(group_hash_list):
 
     events_by_group_hash = {}
     for project_id, group_hash_list_chunk in group_hashes_by_project_id.items():
-        event_id_list = GroupHash.fetch_last_processed_event_id(project_id, [i.id for i in group_hash_list_chunk])
+        event_id_list = GroupHash.fetch_last_processed_event_id(
+            project_id, [i.id for i in group_hash_list_chunk])
         event_by_event_id = {
             event.event_id: event
             for event in
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 26f6bf7370..7563cf16df 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -28,6 +28,7 @@ class ProjectSerializer(Serializer):
     This is primarily used to summarize projects. We utilize it when doing bulk loads for things
     such as "show all projects for this organization", and its attributes be kept to a minimum.
     """
+
     def get_attrs(self, item_list, user):
         project_ids = [i.id for i in item_list]
         if user.is_authenticated() and item_list:
diff --git a/src/sentry/api/serializers/rest_framework/group_notes.py b/src/sentry/api/serializers/rest_framework/group_notes.py
index 10133b48b4..71b6c731c5 100644
--- a/src/sentry/api/serializers/rest_framework/group_notes.py
+++ b/src/sentry/api/serializers/rest_framework/group_notes.py
@@ -13,7 +13,11 @@ class NoteSerializer(serializers.Serializer):
         if source in attrs and 'group' in self.context:
             mentions = attrs[source]
             project = self.context['group'].project
-            member_ids = set(project.member_set.filter(user_id__in=mentions).values_list('user_id', flat=True))
+            member_ids = set(
+                project.member_set.filter(
+                    user_id__in=mentions).values_list(
+                    'user_id',
+                    flat=True))
             invalid_user_ids = [m for m in mentions if int(m) not in member_ids]
             if invalid_user_ids:
                 raise serializers.ValidationError('Cannot mention a non-team member')
diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index a80688aab7..7a1da63a75 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -29,7 +29,8 @@ from . import manager
 
 OK_LINK_IDENTITY = _('You have successfully linked your account to your SSO provider.')
 
-OK_SETUP_SSO = _('SSO has been configured for your organization and any existing members have been sent an email to link their accounts.')
+OK_SETUP_SSO = _(
+    'SSO has been configured for your organization and any existing members have been sent an email to link their accounts.')
 
 ERR_UID_MISMATCH = _('There was an error encountered during authentication.')
 
@@ -677,7 +678,10 @@ class AuthHelper(object):
             redirect_uri = reverse('sentry-auth-organization', args=[self.organization.slug])
 
         elif session['flow'] == self.FLOW_SETUP_PROVIDER:
-            redirect_uri = reverse('sentry-organization-auth-settings', args=[self.organization.slug])
+            redirect_uri = reverse(
+                'sentry-organization-auth-settings',
+                args=[
+                    self.organization.slug])
 
         messages.add_message(
             self.request, messages.ERROR,
diff --git a/src/sentry/auth/password_validation.py b/src/sentry/auth/password_validation.py
index 9a15aad7d9..285f15d91e 100644
--- a/src/sentry/auth/password_validation.py
+++ b/src/sentry/auth/password_validation.py
@@ -81,6 +81,7 @@ class MinimumLengthValidator(object):
     """
     Validate whether the password is of a minimum length.
     """
+
     def __init__(self, min_length=8):
         self.min_length = min_length
 
@@ -90,10 +91,10 @@ class MinimumLengthValidator(object):
                 ungettext(
                     "This password is too short. It must contain at least %(min_length)d character.",
                     "This password is too short. It must contain at least %(min_length)d characters.",
-                    self.min_length
-                ),
+                    self.min_length),
                 code='password_too_short',
-                params={'min_length': self.min_length},
+                params={
+                    'min_length': self.min_length},
             )
 
     def get_help_text(self):
@@ -108,6 +109,7 @@ class MaximumLengthValidator(object):
     """
     Validate whether the password is of a maximum length.
     """
+
     def __init__(self, max_length=256):
         self.max_length = max_length
 
@@ -117,10 +119,10 @@ class MaximumLengthValidator(object):
                 ungettext(
                     "This password is too long. It must contain no more than %(max_length)d character.",
                     "This password is too long. It must contain no more than %(max_length)d characters.",
-                    self.max_length
-                ),
+                    self.max_length),
                 code='password_too_long',
-                params={'max_length': self.max_length},
+                params={
+                    'max_length': self.max_length},
             )
 
     def get_help_text(self):
@@ -135,6 +137,7 @@ class NumericPasswordValidator(object):
     """
     Validate whether the password is alphanumeric.
     """
+
     def validate(self, password):
         if password.isdigit():
             raise ValidationError(
diff --git a/src/sentry/buffer/inprocess.py b/src/sentry/buffer/inprocess.py
index d218df92b8..ff51e56a12 100644
--- a/src/sentry/buffer/inprocess.py
+++ b/src/sentry/buffer/inprocess.py
@@ -17,5 +17,6 @@ class InProcessBuffer(Buffer):
     **Note**: This does not actually buffer anything, and should only be used
               in development and testing environments.
     """
+
     def incr(self, model, columns, filters, extra=None):
         self.process(model, columns, filters, extra)
diff --git a/src/sentry/buffer/redis.py b/src/sentry/buffer/redis.py
index 57224a182a..06f16f2479 100644
--- a/src/sentry/buffer/redis.py
+++ b/src/sentry/buffer/redis.py
@@ -79,7 +79,7 @@ class RedisBuffer(Buffer):
             model._meta,
             md5_text(
                 '&'.join('%s=%s' % (k, self._coerce_val(v))
-                    for k, v in sorted(six.iteritems(filters)))
+                         for k, v in sorted(six.iteritems(filters)))
             ).hexdigest(),
         )
 
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index c51fd458dd..520f6b659c 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -23,7 +23,8 @@ from sentry.utils.types import type_from_value
 from datetime import timedelta
 from six.moves.urllib.parse import urlparse
 
-gettext_noop = lambda s: s
+
+def gettext_noop(s): return s
 
 socket.setdefaulttimeout(5)
 
@@ -424,7 +425,9 @@ AUTH_PROVIDER_LABELS = {
 
 import random
 
-SOCIAL_AUTH_DEFAULT_USERNAME = lambda: random.choice(['Darth Vader', 'Obi-Wan Kenobi', 'R2-D2', 'C-3PO', 'Yoda'])
+
+def SOCIAL_AUTH_DEFAULT_USERNAME(): return random.choice(
+    ['Darth Vader', 'Obi-Wan Kenobi', 'R2-D2', 'C-3PO', 'Yoda'])
 SOCIAL_AUTH_PROTECTED_USER_FIELDS = ['email']
 SOCIAL_AUTH_FORCE_POST_DISCONNECT = True
 
@@ -1083,54 +1086,80 @@ SENTRY_DEFAULT_ROLE = 'member'
 # they're presented in the UI. This is primarily important in that a member
 # that is earlier in the chain cannot manage the settings of a member later
 # in the chain (they still require the appropriate scope).
-SENTRY_ROLES = (
-    {
-        'id': 'member',
-        'name': 'Member',
-        'desc': 'Members can view and act on events, as well as view most other data within the organization.',
-        'scopes': set([
-            'event:read', 'event:write', 'event:admin', 'project:releases',
-            'project:read', 'org:read', 'member:read', 'team:read',
-        ]),
-    },
-    {
-        'id': 'admin',
-        'name': 'Admin',
-        'desc': 'Admin privileges on any teams of which they\'re a member. They can create new teams and projects, as well as remove teams and projects which they already hold membership on.',
-        'scopes': set([
-            'event:read', 'event:write', 'event:admin',
-            'org:read', 'member:read',
-            'project:read', 'project:write', 'project:admin', 'project:releases',
-            'team:read', 'team:write', 'team:admin',
-        ]),
-    },
-    {
-        'id': 'manager',
-        'name': 'Manager',
-        'desc': 'Gains admin access on all teams as well as the ability to add and remove members.',
-        'is_global': True,
-        'scopes': set([
-            'event:read', 'event:write', 'event:admin',
-            'member:read', 'member:write', 'member:admin',
-            'project:read', 'project:write', 'project:admin', 'project:releases',
-            'team:read', 'team:write', 'team:admin',
-            'org:read', 'org:write',
-        ]),
-    },
-    {
-        'id': 'owner',
-        'name': 'Owner',
-        'desc': 'Gains full permission across the organization. Can manage members as well as perform catastrophic operations such as removing the organization.',
-        'is_global': True,
-        'scopes': set([
-            'org:read', 'org:write', 'org:admin',
-            'member:read', 'member:write', 'member:admin',
-            'team:read', 'team:write', 'team:admin',
-            'project:read', 'project:write', 'project:admin', 'project:releases',
-            'event:read', 'event:write', 'event:admin',
-        ]),
-    },
-)
+SENTRY_ROLES = ({'id': 'member',
+                 'name': 'Member',
+                 'desc': 'Members can view and act on events, as well as view most other data within the organization.',
+                 'scopes': set(['event:read',
+                                'event:write',
+                                'event:admin',
+                                'project:releases',
+                                'project:read',
+                                'org:read',
+                                'member:read',
+                                 'team:read',
+                                ]),
+                 },
+                {'id': 'admin',
+                 'name': 'Admin',
+                 'desc': 'Admin privileges on any teams of which they\'re a member. They can create new teams and projects, as well as remove teams and projects which they already hold membership on.',
+                 'scopes': set(['event:read',
+                                'event:write',
+                                'event:admin',
+                                'org:read',
+                                'member:read',
+                                'project:read',
+                                'project:write',
+                                'project:admin',
+                                'project:releases',
+                                'team:read',
+                                'team:write',
+                                'team:admin',
+                                ]),
+                 },
+                {'id': 'manager',
+                 'name': 'Manager',
+                 'desc': 'Gains admin access on all teams as well as the ability to add and remove members.',
+                 'is_global': True,
+                 'scopes': set(['event:read',
+                                'event:write',
+                                'event:admin',
+                                'member:read',
+                                'member:write',
+                                'member:admin',
+                                'project:read',
+                                'project:write',
+                                'project:admin',
+                                'project:releases',
+                                'team:read',
+                                'team:write',
+                                'team:admin',
+                                'org:read',
+                                'org:write',
+                                ]),
+                 },
+                {'id': 'owner',
+                 'name': 'Owner',
+                 'desc': 'Gains full permission across the organization. Can manage members as well as perform catastrophic operations such as removing the organization.',
+                 'is_global': True,
+                 'scopes': set(['org:read',
+                                'org:write',
+                                'org:admin',
+                                'member:read',
+                                'member:write',
+                                'member:admin',
+                                'team:read',
+                                'team:write',
+                                'team:admin',
+                                'project:read',
+                                'project:write',
+                                'project:admin',
+                                'project:releases',
+                                'event:read',
+                                'event:write',
+                                'event:admin',
+                                ]),
+                 },
+                )
 
 # See sentry/options/__init__.py for more information
 SENTRY_OPTIONS = {}
@@ -1156,9 +1185,12 @@ SENTRY_API_RESPONSE_DELAY = 150 if IS_DEV else None
 # XXX(dcramer): this doesn't work outside of a source distribution as the
 # webpack.config.js is not part of Sentry's datafiles
 SENTRY_WATCHERS = (
-    ('webpack', [os.path.join(NODE_MODULES_ROOT, '.bin', 'webpack'), '--output-pathinfo', '--watch',
-     "--config={}".format(os.path.normpath(os.path.join(PROJECT_ROOT, os.pardir, os.pardir, "webpack.config.js")))]),
-)
+    ('webpack', [
+        os.path.join(
+            NODE_MODULES_ROOT, '.bin', 'webpack'), '--output-pathinfo', '--watch', "--config={}".format(
+                os.path.normpath(
+                    os.path.join(
+                        PROJECT_ROOT, os.pardir, os.pardir, "webpack.config.js")))]), )
 
 # Max file size for avatar photo uploads
 SENTRY_MAX_AVATAR_SIZE = 5000000
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index c945fe0cd9..0fd2d7a41b 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -289,8 +289,8 @@ class ClientApiHelper(object):
             # bug somewhere in the client's code.
             self.log.debug(six.text_type(e), exc_info=True)
             raise APIError('Bad data decoding request (%s, %s)' %
-                (type(e).__name__, e)
-            )
+                           (type(e).__name__, e)
+                           )
 
     def decode_and_decompress_data(self, encoded_data):
         try:
@@ -303,8 +303,8 @@ class ClientApiHelper(object):
             # bug somewhere in the client's code.
             self.log.debug(six.text_type(e), exc_info=True)
             raise APIError('Bad data decoding request (%s, %s)' %
-                (type(e).__name__, e)
-            )
+                           (type(e).__name__, e)
+                           )
 
     def safely_load_json_string(self, json_string):
         try:
@@ -317,8 +317,8 @@ class ClientApiHelper(object):
             # bug somewhere in the client's code.
             self.log.debug(six.text_type(e), exc_info=True)
             raise APIError('Bad data reconstructing object (%s, %s)' %
-                (type(e).__name__, e)
-            )
+                           (type(e).__name__, e)
+                           )
         return obj
 
     def _process_data_timestamp(self, data, current_datetime=None):
@@ -535,7 +535,7 @@ class ClientApiHelper(object):
                         v = six.text_type(v)
                     except Exception:
                         self.log.debug('Discarded invalid tag value: %s=%r',
-                                      k, type(v))
+                                       k, type(v))
                         data['errors'].append({
                             'type': EventError.INVALID_DATA,
                             'name': 'tags',
@@ -785,7 +785,7 @@ class ClientApiHelper(object):
         task = from_reprocessing and \
             preprocess_event_from_reprocessing or preprocess_event
         task.delay(cache_key=cache_key, start_time=time(),
-            event_id=data['event_id'])
+                   event_id=data['event_id'])
 
 
 class CspApiHelper(ClientApiHelper):
diff --git a/src/sentry/db/models/fields/bounded.py b/src/sentry/db/models/fields/bounded.py
index 94d57732db..2f5d0463d7 100644
--- a/src/sentry/db/models/fields/bounded.py
+++ b/src/sentry/db/models/fields/bounded.py
@@ -110,4 +110,5 @@ if 'south' in settings.INSTALLED_APPS:
     add_introspection_rules([], ["^sentry\.db\.models\.fields\.bounded\.BoundedBigAutoField"])
     add_introspection_rules([], ["^sentry\.db\.models\.fields\.bounded\.BoundedIntegerField"])
     add_introspection_rules([], ["^sentry\.db\.models\.fields\.bounded\.BoundedBigIntegerField"])
-    add_introspection_rules([], ["^sentry\.db\.models\.fields\.bounded\.BoundedPositiveIntegerField"])
+    add_introspection_rules(
+        [], ["^sentry\.db\.models\.fields\.bounded\.BoundedPositiveIntegerField"])
diff --git a/src/sentry/db/models/fields/encrypted.py b/src/sentry/db/models/fields/encrypted.py
index d551e05bc4..4febd8a4af 100644
--- a/src/sentry/db/models/fields/encrypted.py
+++ b/src/sentry/db/models/fields/encrypted.py
@@ -98,7 +98,8 @@ if hasattr(models, 'SubfieldBase'):
 if 'south' in settings.INSTALLED_APPS:
     from south.modelsinspector import add_introspection_rules
 
-    add_introspection_rules([], ["^sentry\.db\.models\.fields\.encrypted\.EncryptedPickledObjectField"])
+    add_introspection_rules(
+        [], ["^sentry\.db\.models\.fields\.encrypted\.EncryptedPickledObjectField"])
     add_introspection_rules([], ["^sentry\.db\.models\.fields\.encrypted\.EncryptedCharField"])
     add_introspection_rules([], ["^sentry\.db\.models\.fields\.encrypted\.EncryptedJsonField"])
     add_introspection_rules([], ["^sentry\.db\.models\.fields\.encrypted\.EncryptedTextField"])
diff --git a/src/sentry/db/models/fields/gzippeddict.py b/src/sentry/db/models/fields/gzippeddict.py
index af849b3518..929cb7c65f 100644
--- a/src/sentry/db/models/fields/gzippeddict.py
+++ b/src/sentry/db/models/fields/gzippeddict.py
@@ -27,6 +27,7 @@ class GzippedDictField(models.TextField):
     Slightly different from a JSONField in the sense that the default
     value is a dictionary.
     """
+
     def to_python(self, value):
         if isinstance(value, six.string_types) and value:
             try:
diff --git a/src/sentry/db/models/fields/node.py b/src/sentry/db/models/fields/node.py
index 59ea3ce80e..0171888a85 100644
--- a/src/sentry/db/models/fields/node.py
+++ b/src/sentry/db/models/fields/node.py
@@ -115,6 +115,7 @@ class NodeField(GzippedDictField):
     Similar to the gzippedictfield except that it stores a reference
     to an external node.
     """
+
     def __init__(self, *args, **kwargs):
         self.ref_func = kwargs.pop('ref_func', None)
         self.ref_version = kwargs.pop('ref_version', None)
diff --git a/src/sentry/db/models/query.py b/src/sentry/db/models/query.py
index 7d94428b86..500d4f8f4c 100644
--- a/src/sentry/db/models/query.py
+++ b/src/sentry/db/models/query.py
@@ -44,7 +44,8 @@ def update(self, using=None, **kwargs):
     elif affected == 0:
         return affected
     elif affected < 0:
-        raise ValueError("Somehow we have updated a negative amount of rows, you seem to have a problem with your db backend.")
+        raise ValueError(
+            "Somehow we have updated a negative amount of rows, you seem to have a problem with your db backend.")
     else:
         raise ValueError("Somehow we have updated multiple rows, and you are now royally fucked.")
 
diff --git a/src/sentry/db/postgres/decorators.py b/src/sentry/db/postgres/decorators.py
index ad66d82ed6..6a6ffd21ea 100644
--- a/src/sentry/db/postgres/decorators.py
+++ b/src/sentry/db/postgres/decorators.py
@@ -57,7 +57,8 @@ def capture_transaction_exceptions(func):
     some cruft about transaction aborted.
     """
     def raise_the_exception(conn, exc):
-        if 'current transaction is aborted, commands ignored until end of transaction block' in six.text_type(exc):
+        if 'current transaction is aborted, commands ignored until end of transaction block' in six.text_type(
+                exc):
             exc_info = getattr(conn, '_last_exception', None)
             if exc_info is None:
                 raise
diff --git a/src/sentry/digests/backends/base.py b/src/sentry/digests/backends/base.py
index ada05635b9..8d39bd6306 100644
--- a/src/sentry/digests/backends/base.py
+++ b/src/sentry/digests/backends/base.py
@@ -101,7 +101,8 @@ class Backend(Service):
             self.truncation_chance = options.pop('truncation_chance', 1.0 / self.capacity)
         else:
             if options.get('truncation_chance') is not None:
-                raise TypeError('No timeline capacity has been set, "truncation_chance" must be None.')
+                raise TypeError(
+                    'No timeline capacity has been set, "truncation_chance" must be None.')
             else:
                 self.truncation_chance = 0.0
 
diff --git a/src/sentry/digests/backends/redis.py b/src/sentry/digests/backends/redis.py
index 7d44d23828..2e42191ce4 100644
--- a/src/sentry/digests/backends/redis.py
+++ b/src/sentry/digests/backends/redis.py
@@ -122,6 +122,7 @@ class RedisBackend(Backend):
         2) "1444847638"
 
     """
+
     def __init__(self, **options):
         self.cluster, options = get_cluster_from_options('SENTRY_DIGESTS_OPTIONS', options)
         self.locks = LockManager(RedisLockBackend(self.cluster))
@@ -325,7 +326,8 @@ class RedisBackend(Backend):
             for result in map(try_lock, entries):
                 can_reschedule[result[0] is not None].append(result)
 
-            logger.debug('Fetched %s items, able to reschedule %s.', len(entries), len(can_reschedule[True]))
+            logger.debug('Fetched %s items, able to reschedule %s.',
+                         len(entries), len(can_reschedule[True]))
 
             # Set the start position for the next query. (If there are no
             # items, we don't need to worry about this, since there won't
@@ -380,10 +382,9 @@ class RedisBackend(Backend):
                         should_reschedule[entry.timestamp > timeout].append(entry)
 
                     logger.debug(
-                        'Identified %s items that should be rescheduled, and %s that will be removed.',
-                        len(should_reschedule[True]),
-                        len(should_reschedule[False]),
-                    )
+                        'Identified %s items that should be rescheduled, and %s that will be removed.', len(
+                            should_reschedule[True]), len(
+                            should_reschedule[False]), )
 
                     # Move items that should be rescheduled to the waiting state.
                     if should_reschedule[True]:
@@ -463,11 +464,16 @@ class RedisBackend(Backend):
             # before sending. This acts as a throttling mechanism to prevent
             # sending a digest before it's next scheduled delivery time in a
             # race condition scenario.
-            if connection.zscore(make_schedule_key(self.namespace, SCHEDULE_STATE_READY), key) is None:
+            if connection.zscore(
+                    make_schedule_key(
+                        self.namespace,
+                        SCHEDULE_STATE_READY),
+                    key) is None:
                 raise InvalidState('Timeline is not in the ready state.')
 
             with connection.pipeline() as pipeline:
-                pipeline.watch(digest_key)  # This shouldn't be necessary, but better safe than sorry?
+                # This shouldn't be necessary, but better safe than sorry?
+                pipeline.watch(digest_key)
 
                 if pipeline.exists(digest_key):
                     pipeline.multi()
@@ -483,7 +489,8 @@ class RedisBackend(Backend):
                         pipeline.execute()
                     except ResponseError as error:
                         if 'no such key' in six.text_type(error):
-                            logger.debug('Could not move timeline for digestion (likely has no contents.)')
+                            logger.debug(
+                                'Could not move timeline for digestion (likely has no contents.)')
                         else:
                             raise
 
@@ -512,18 +519,27 @@ class RedisBackend(Backend):
             yield itertools.islice(get_records_for_digest(), self.capacity)
 
             def cleanup_records(pipeline):
-                record_keys = [make_record_key(timeline_key, record_key) for record_key, score in records]
+                record_keys = [make_record_key(timeline_key, record_key)
+                               for record_key, score in records]
                 pipeline.delete(digest_key, *record_keys)
 
             def reschedule():
                 with connection.pipeline() as pipeline:
-                    pipeline.watch(digest_key)  # This shouldn't be necessary, but better safe than sorry?
+                    # This shouldn't be necessary, but better safe than sorry?
+                    pipeline.watch(digest_key)
                     pipeline.multi()
 
                     cleanup_records(pipeline)
                     pipeline.zrem(make_schedule_key(self.namespace, SCHEDULE_STATE_READY), key)
-                    pipeline.zadd(make_schedule_key(self.namespace, SCHEDULE_STATE_WAITING), time.time() + minimum_delay, key)
-                    pipeline.setex(make_last_processed_timestamp_key(timeline_key), self.ttl, int(time.time()))
+                    pipeline.zadd(
+                        make_schedule_key(
+                            self.namespace,
+                            SCHEDULE_STATE_WAITING),
+                        time.time() +
+                        minimum_delay,
+                        key)
+                    pipeline.setex(make_last_processed_timestamp_key(
+                        timeline_key), self.ttl, int(time.time()))
                     pipeline.execute()
 
             def unschedule():
@@ -536,7 +552,11 @@ class RedisBackend(Backend):
                         cleanup_records(pipeline)
                         pipeline.delete(make_last_processed_timestamp_key(timeline_key))
                         pipeline.zrem(make_schedule_key(self.namespace, SCHEDULE_STATE_READY), key)
-                        pipeline.zrem(make_schedule_key(self.namespace, SCHEDULE_STATE_WAITING), key)
+                        pipeline.zrem(
+                            make_schedule_key(
+                                self.namespace,
+                                SCHEDULE_STATE_WAITING),
+                            key)
                         pipeline.execute()
 
             # If there were records in the digest, we need to schedule it so
diff --git a/src/sentry/digests/notifications.py b/src/sentry/digests/notifications.py
index 4bfe76a2ad..61092972c6 100644
--- a/src/sentry/digests/notifications.py
+++ b/src/sentry/digests/notifications.py
@@ -65,12 +65,11 @@ def fetch_state(project, records):
 
     groups = Group.objects.in_bulk(record.value.event.group_id for record in records)
     return {
-        'project': project,
-        'groups': groups,
-        'rules': Rule.objects.in_bulk(itertools.chain.from_iterable(record.value.rules for record in records)),
-        'event_counts': tsdb.get_sums(tsdb.models.group, groups.keys(), start, end),
-        'user_counts': tsdb.get_distinct_counts_totals(tsdb.models.users_affected_by_group, groups.keys(), start, end),
-    }
+        'project': project, 'groups': groups, 'rules': Rule.objects.in_bulk(
+            itertools.chain.from_iterable(
+                record.value.rules for record in records)), 'event_counts': tsdb.get_sums(
+            tsdb.models.group, groups.keys(), start, end), 'user_counts': tsdb.get_distinct_counts_totals(
+                    tsdb.models.users_affected_by_group, groups.keys(), start, end), }
 
 
 def attach_state(project, groups, rules, event_counts, user_counts):
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 03b847fd2d..59524cf2c2 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -847,7 +847,8 @@ class EventManager(object):
         # ``GroupHash`` instance, since we only want to record this for events
         # that not only include the hash but were also placed into the
         # associated group.)
-        relevant_group_hashes = set([instance for instance in all_hashes if instance.group_id == group.id])
+        relevant_group_hashes = set(
+            [instance for instance in all_hashes if instance.group_id == group.id])
 
         # If all hashes are brand new we treat this event as new
         is_new = False
diff --git a/src/sentry/http.py b/src/sentry/http.py
index c9e758cf80..3c14323424 100644
--- a/src/sentry/http.py
+++ b/src/sentry/http.py
@@ -42,8 +42,8 @@ MAX_URL_LENGTH = 150
 
 # UrlResult.body **must** be bytes
 UrlResult = namedtuple('UrlResult',
-    ['url', 'headers', 'body', 'status', 'encoding']
-)
+                       ['url', 'headers', 'body', 'status', 'encoding']
+                       )
 
 
 # In case SSL is unavailable (light builds) we can't import this here.
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index b11be3e08a..d463f0b854 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -794,13 +794,17 @@ class Stacktrace(Interface):
             start, stop = None, None
 
         if not newest_first and visible_frames < num_frames:
-            result.extend(('(%d additional frame(s) were not displayed)' % (num_frames - visible_frames,), '...'))
+            result.extend(
+                ('(%d additional frame(s) were not displayed)' %
+                 (num_frames - visible_frames,), '...'))
 
         for frame in frames[start:stop]:
             result.append(frame.to_string(event))
 
         if newest_first and visible_frames < num_frames:
-            result.extend(('...', '(%d additional frame(s) were not displayed)' % (num_frames - visible_frames,)))
+            result.extend(
+                ('...', '(%d additional frame(s) were not displayed)' %
+                 (num_frames - visible_frames,)))
 
         return '\n'.join(result)
 
diff --git a/src/sentry/lang/java/plugin.py b/src/sentry/lang/java/plugin.py
index f0cd797e9c..040304eeac 100644
--- a/src/sentry/lang/java/plugin.py
+++ b/src/sentry/lang/java/plugin.py
@@ -70,13 +70,13 @@ class JavaStacktraceProcessor(StacktraceProcessor):
                 'mapping_uuid': image_uuid,
             })
             report_processing_issue(self.data,
-                scope='proguard',
-                object='mapping:%s' % image_uuid,
-                type=error_type,
-                data={
-                    'mapping_uuid': image_uuid,
-                }
-            )
+                                    scope='proguard',
+                                    object='mapping:%s' % image_uuid,
+                                    type=error_type,
+                                    data={
+                                        'mapping_uuid': image_uuid,
+                                    }
+                                    )
 
     def process_frame(self, processable_frame, processing_task):
         new_module = None
diff --git a/src/sentry/lang/javascript/errormapping.py b/src/sentry/lang/javascript/errormapping.py
index 16ebd5d9ba..4b00359b2c 100644
--- a/src/sentry/lang/javascript/errormapping.py
+++ b/src/sentry/lang/javascript/errormapping.py
@@ -55,9 +55,9 @@ class Processor(object):
         try:
             http_session = http.build_session()
             response = http_session.get(self.mapping_url,
-                allow_redirects=True,
-                timeout=settings.SENTRY_SOURCE_FETCH_TIMEOUT,
-            )
+                                        allow_redirects=True,
+                                        timeout=settings.SENTRY_SOURCE_FETCH_TIMEOUT,
+                                        )
             # Make sure we only get a 2xx to prevent caching bad data
             response.raise_for_status()
             data = response.json()
diff --git a/src/sentry/lang/javascript/plugin.py b/src/sentry/lang/javascript/plugin.py
index 929d7c2d51..46278eaa47 100644
--- a/src/sentry/lang/javascript/plugin.py
+++ b/src/sentry/lang/javascript/plugin.py
@@ -27,7 +27,7 @@ def generate_modules(data):
                 continue
             abs_path = frame.get('abs_path')
             if abs_path and abs_path.startswith(('http:', 'https:',
-                    'webpack:', 'app:')):
+                                                 'webpack:', 'app:')):
                 frame['module'] = generate_module(abs_path)
 
 
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 1f381e704d..c2bf6b8bf7 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -268,7 +268,9 @@ def fetch_release_file(filename, release, dist=None):
             encoding = result[3]
         except IndexError:
             encoding = None
-        result = http.UrlResult(filename, result[0], zlib.decompress(result[1]), result[2], encoding)
+        result = http.UrlResult(
+            filename, result[0], zlib.decompress(
+                result[1]), result[2], encoding)
 
     return result
 
@@ -316,7 +318,9 @@ def fetch_file(url, project=None, release=None, dist=None,
                 encoding = None
             # We got a cache hit, but the body is compressed, so we
             # need to decompress it before handing it off
-            result = http.UrlResult(result[0], result[1], zlib.decompress(result[2]), result[3], encoding)
+            result = http.UrlResult(
+                result[0], result[1], zlib.decompress(
+                    result[2]), result[3], encoding)
 
     if result is None:
         headers = {}
@@ -342,7 +346,12 @@ def fetch_file(url, project=None, release=None, dist=None,
     # binary and say utf8 encoding.
     if not isinstance(result.body, six.binary_type):
         try:
-            result = http.UrlResult(result.url, result.headers, result.body.encode('utf8'), result.status, result.encoding)
+            result = http.UrlResult(
+                result.url,
+                result.headers,
+                result.body.encode('utf8'),
+                result.status,
+                result.encoding)
         except UnicodeEncodeError:
             error = {
                 'type': EventError.FETCH_INVALID_ENCODING,
@@ -352,12 +361,14 @@ def fetch_file(url, project=None, release=None, dist=None,
             raise http.CannotFetch(error)
 
     # For JavaScript files, check if content is something other than JavaScript/JSON (i.e. HTML)
-    # NOTE: possible to have JS files that don't actually end w/ ".js", but this should catch 99% of cases
+    # NOTE: possible to have JS files that don't actually end w/ ".js", but
+    # this should catch 99% of cases
     if url.endswith('.js'):
         # Check if response is HTML by looking if the first non-whitespace character is an open tag ('<').
         # This cannot parse as valid JS/JSON.
         # NOTE: not relying on Content-Type header because apps often don't set this correctly
-        body_start = result.body[:20].lstrip()  # Discard leading whitespace (often found before doctype)
+        # Discard leading whitespace (often found before doctype)
+        body_start = result.body[:20].lstrip()
 
         if body_start[:1] == u'<':
             error = {
diff --git a/src/sentry/lang/native/applecrashreport.py b/src/sentry/lang/native/applecrashreport.py
index 5a677347bc..e368492f55 100644
--- a/src/sentry/lang/native/applecrashreport.py
+++ b/src/sentry/lang/native/applecrashreport.py
@@ -13,7 +13,7 @@ REPORT_VERSION = '104'
 class AppleCrashReport(object):
 
     def __init__(self, threads=None, context=None, debug_images=None,
-            symbolicated=False, exception=None):
+                 symbolicated=False, exception=None):
         self.threads = threads
         self.context = context
         self.debug_images = debug_images
@@ -65,7 +65,7 @@ class AppleCrashReport(object):
 
             if exception.get('value'):
                 rv.append('\nApplication Specific Information:\n%s' %
-                    exception['value'])
+                          exception['value'])
 
         return '\n'.join(rv)
 
@@ -153,9 +153,9 @@ class AppleCrashReport(object):
         if self.symbolicated or self.debug_images is None:
             return ''
         binary_images = map(lambda i:
-            self._convert_debug_meta_to_binary_image_row(debug_image=i),
-            sorted(self.debug_images, key=lambda i: parse_addr(i['image_addr'])
-        ))
+                            self._convert_debug_meta_to_binary_image_row(debug_image=i),
+                            sorted(self.debug_images, key=lambda i: parse_addr(i['image_addr'])
+                                   ))
         return 'Binary Images:\n' + '\n'.join(binary_images)
 
     def _convert_debug_meta_to_binary_image_row(self, debug_image):
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 822680f445..cc3cde4742 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -211,16 +211,16 @@ class NativeStacktraceProcessor(StacktraceProcessor):
                 # issues
                 if e.is_user_fixable and e.is_fatal:
                     report_processing_issue(self.data,
-                        scope='native',
-                        object='dsym:%s' % e.image_uuid,
-                        type=e.type,
-                        data={
-                            'image_path': e.image_path,
-                            'image_uuid': e.image_uuid,
-                            'image_arch': e.image_arch,
-                            'message': e.message,
-                        }
-                    )
+                                            scope='native',
+                                            object='dsym:%s' % e.image_uuid,
+                                            type=e.type,
+                                            data={
+                                                'image_path': e.image_path,
+                                                'image_uuid': e.image_uuid,
+                                                'image_arch': e.image_arch,
+                                                'message': e.message,
+                                            }
+                                            )
 
                 # This in many ways currently does not really do anything.
                 # The reason is that once a processing issue is reported
@@ -265,7 +265,7 @@ class NativeStacktraceProcessor(StacktraceProcessor):
                 new_frame['package'] = sfrm['package']
             if new_frame.get('in_app') is None:
                 new_frame['in_app'] = (in_app and
-                    not self.sym.is_internal_function(new_frame['function']))
+                                       not self.sym.is_internal_function(new_frame['function']))
             new_frames.append(new_frame)
 
         return new_frames, [raw_frame], []
diff --git a/src/sentry/logging/handlers.py b/src/sentry/logging/handlers.py
index 53a464dd9c..19ae8a0556 100644
--- a/src/sentry/logging/handlers.py
+++ b/src/sentry/logging/handlers.py
@@ -27,7 +27,8 @@ _default_encoder = JSONEncoder(
 ).encode
 
 # These are values that come default from logging.LogRecord.
-# They are defined here: https://github.com/python/cpython/blob/2.7/Lib/logging/__init__.py#L237-L310
+# They are defined here:
+# https://github.com/python/cpython/blob/2.7/Lib/logging/__init__.py#L237-L310
 throwaways = frozenset((
     'threadName', 'thread', 'created', 'process', 'processName', 'args',
     'module', 'filename', 'levelno', 'exc_text', 'msg', 'pathname', 'lineno',
@@ -44,9 +45,9 @@ class HumanRenderer(object):
     def __call__(self, logger, name, event_dict):
         level = event_dict.pop('level')
         real_level = (level.upper()
-            if isinstance(level, six.string_types)
-            else logging.getLevelName(level)
-        )
+                      if isinstance(level, six.string_types)
+                      else logging.getLevelName(level)
+                      )
         base = '%s [%s] %s: %s' % (
             now().strftime('%H:%M:%S'),
             real_level,
@@ -54,7 +55,7 @@ class HumanRenderer(object):
             event_dict.pop('event', ''),
         )
         join = ' '.join(k + '=' + repr(v)
-               for k, v in six.iteritems(event_dict))
+                        for k, v in six.iteritems(event_dict))
         return '%s%s' % (base, (' (%s)' % join if join else ''))
 
 
diff --git a/src/sentry/management/commands/check_notifications.py b/src/sentry/management/commands/check_notifications.py
index d916468729..2ffc7ae35e 100644
--- a/src/sentry/management/commands/check_notifications.py
+++ b/src/sentry/management/commands/check_notifications.py
@@ -36,19 +36,19 @@ class Command(BaseCommand):
 
     option_list = BaseCommand.option_list + (
         make_option('--organization',
-            action='store',
-            type='int',
-            dest='organization',
-            default=0,
-            help='',
-        ),
+                    action='store',
+                    type='int',
+                    dest='organization',
+                    default=0,
+                    help='',
+                    ),
         make_option('--project',
-            action='store',
-            type='int',
-            dest='project',
-            default=0,
-            help='',
-        ),
+                    action='store',
+                    type='int',
+                    dest='project',
+                    default=0,
+                    help='',
+                    ),
     )
 
     def handle(self, *args, **options):
diff --git a/src/sentry/management/commands/create_sample_event.py b/src/sentry/management/commands/create_sample_event.py
index c810eb36ba..8fc43ac9f6 100644
--- a/src/sentry/management/commands/create_sample_event.py
+++ b/src/sentry/management/commands/create_sample_event.py
@@ -32,7 +32,8 @@ class Command(BaseCommand):
                 t_slug, p_slug = options['project'].split('/', 1)
                 project = Project.objects.get(slug=p_slug, team__slug=t_slug)
             else:
-                raise CommandError('Project must be specified as team-slug/project-slug or a project id')
+                raise CommandError(
+                    'Project must be specified as team-slug/project-slug or a project id')
 
         platform = options['platform']
         event = create_sample_event(project, platform)
diff --git a/src/sentry/management/commands/diff.py b/src/sentry/management/commands/diff.py
index ba1141e267..3b358d660e 100644
--- a/src/sentry/management/commands/diff.py
+++ b/src/sentry/management/commands/diff.py
@@ -59,7 +59,8 @@ def print_unified_diff(left, right):
     left_fingerprint = [k[0] for k in left]
     right_fingerprint = [k[0] for k in right]
     if left_fingerprint != right_fingerprint:
-        echo('!! Different fingerprint algorithms: %r vs %r' % (left_fingerprint, right_fingerprint))
+        echo('!! Different fingerprint algorithms: %r vs %r' %
+             (left_fingerprint, right_fingerprint))
         return
 
     bits = left_fingerprint
@@ -87,11 +88,11 @@ class Command(BaseCommand):
 
     option_list = BaseCommand.option_list + (
         make_option('--group',
-            action='store_true',
-            dest='group',
-            default=False,
-            help='Compare latest event by group id'
-        ),
+                    action='store_true',
+                    dest='group',
+                    default=False,
+                    help='Compare latest event by group id'
+                    ),
     )
 
     def handle(self, *args, **options):
diff --git a/src/sentry/management/commands/merge_users.py b/src/sentry/management/commands/merge_users.py
index 8b682b4918..856125fc33 100644
--- a/src/sentry/management/commands/merge_users.py
+++ b/src/sentry/management/commands/merge_users.py
@@ -77,7 +77,9 @@ class Command(BaseCommand):
             sys.stdout.write("No users with duplicate accounts found for merging.\n")
             return
 
-        sys.stdout.write("Found {} unique account(s) with duplicate identities.\n".format(len(unique_users)))
+        sys.stdout.write(
+            "Found {} unique account(s) with duplicate identities.\n".format(
+                len(unique_users)))
 
         for user_list in unique_users:
             user_list.sort(key=lambda x: (x.is_superuser, not x.managed, x.date_joined))
diff --git a/src/sentry/management/commands/send_fake_data.py b/src/sentry/management/commands/send_fake_data.py
index cff76f6097..bdffb61a77 100644
--- a/src/sentry/management/commands/send_fake_data.py
+++ b/src/sentry/management/commands/send_fake_data.py
@@ -34,7 +34,9 @@ def funcs():
 
     # def query(client):
     #     duration = random.randint(0, 10000) / 1000.0
-    #     return client.capture('Query', query=queries.next(), engine=engine.next(), time_spent=duration, data={'logger': loggers.next(), 'site': 'sql'})
+    # return client.capture('Query', query=queries.next(),
+    # engine=engine.next(), time_spent=duration, data={'logger':
+    # loggers.next(), 'site': 'sql'})
 
     def exception(client):
         timestamp = datetime.datetime.utcnow() - datetime.timedelta(seconds=six.next(timestamps))
@@ -58,8 +60,14 @@ class Command(BaseCommand):
     help = 'Sends fake data to the internal Sentry project'
 
     option_list = BaseCommand.option_list + (
-        make_option('--project', dest='project', help="project ID or organization-slug/project-slug"),
-        make_option('--num', dest='num_events', type=int),
+        make_option(
+            '--project',
+            dest='project',
+            help="project ID or organization-slug/project-slug"),
+        make_option(
+            '--num',
+            dest='num_events',
+            type=int),
     )
 
     def handle(self, **options):
@@ -76,7 +84,8 @@ class Command(BaseCommand):
                 o_slug, p_slug = options['project'].split('/', 1)
                 project = Project.objects.get(slug=p_slug, organization__slug=o_slug)
             else:
-                raise CommandError('Project must be specified as organization-slug/project-slug or a project id')
+                raise CommandError(
+                    'Project must be specified as organization-slug/project-slug or a project id')
 
         client.project = project.id
 
diff --git a/src/sentry/middleware/profiler.py b/src/sentry/middleware/profiler.py
index ad6f2749b6..742f5e9dee 100644
--- a/src/sentry/middleware/profiler.py
+++ b/src/sentry/middleware/profiler.py
@@ -35,6 +35,7 @@ class ProfileMiddleware(object):
 
     WARNING: It uses hotshot profiler which is not thread safe.
     """
+
     def can(self, request):
         if 'prof' not in request.GET:
             return False
diff --git a/src/sentry/middleware/security.py b/src/sentry/middleware/security.py
index 1e813c4ae2..99883562ae 100644
--- a/src/sentry/middleware/security.py
+++ b/src/sentry/middleware/security.py
@@ -5,6 +5,7 @@ class SecurityHeadersMiddleware(object):
     """
     Ensure that we have proper security headers set
     """
+
     def process_response(self, request, response):
         # NOTE: there is no `response.setdefault()`
         if 'X-Frame-Options' not in response:
diff --git a/src/sentry/models/auditlogentry.py b/src/sentry/models/auditlogentry.py
index 0a5535fe62..f05a20094e 100644
--- a/src/sentry/models/auditlogentry.py
+++ b/src/sentry/models/auditlogentry.py
@@ -74,7 +74,7 @@ class AuditLogEntry(Model):
     actor_key = FlexibleForeignKey('sentry.ApiKey', null=True, blank=True)
     target_object = BoundedPositiveIntegerField(null=True)
     target_user = FlexibleForeignKey('sentry.User', null=True, blank=True,
-                                    related_name='audit_targets')
+                                     related_name='audit_targets')
     # TODO(dcramer): we want to compile this mapping into JSX for the UI
     event = BoundedPositiveIntegerField(choices=(
         # We emulate github a bit with event naming
@@ -160,9 +160,11 @@ class AuditLogEntry(Model):
         elif self.event == AuditLogEntryEvent.MEMBER_REMOVE:
             if self.target_user == self.actor:
                 return 'left the organization'
-            return 'removed member %s' % (self.data.get('email') or self.target_user.get_display_name(),)
+            return 'removed member %s' % (self.data.get(
+                'email') or self.target_user.get_display_name(),)
         elif self.event == AuditLogEntryEvent.MEMBER_EDIT:
-            return 'edited member %s' % (self.data.get('email') or self.target_user.get_display_name(),)
+            return 'edited member %s' % (self.data.get(
+                'email') or self.target_user.get_display_name(),)
         elif self.event == AuditLogEntryEvent.MEMBER_JOIN_TEAM:
             if self.target_user == self.actor:
                 return 'joined team %s' % (self.data['team_slug'],)
diff --git a/src/sentry/models/authenticator.py b/src/sentry/models/authenticator.py
index 0e71845a95..d2313c5928 100644
--- a/src/sentry/models/authenticator.py
+++ b/src/sentry/models/authenticator.py
@@ -64,7 +64,7 @@ class AuthenticatorManager(BaseManager):
         has enabled.  If `return_missing` is set to `True` then all
         interfaces are returned even if not enabled.
         """
-        _sort = lambda x: sorted(x, key=lambda x: (x.type == 0, x.type))
+        def _sort(x): return sorted(x, key=lambda x: (x.type == 0, x.type))
 
         # Collect interfaces user is enrolled in
         ifaces = [x.interface for x in Authenticator.objects.filter(
diff --git a/src/sentry/models/commit.py b/src/sentry/models/commit.py
index 3ba0f4e406..c5170dc330 100644
--- a/src/sentry/models/commit.py
+++ b/src/sentry/models/commit.py
@@ -10,7 +10,9 @@ from sentry.db.models import (
 )
 from sentry.utils.cache import memoize
 
-_fixes_re = re.compile(r'\b(?:Fix|Fixes|Fixed|Close|Closes|Closed|Resolve|Resolves|Resolved)\s+([A-Za-z0-9_\-\s\,]+)\b', re.I)
+_fixes_re = re.compile(
+    r'\b(?:Fix|Fixes|Fixed|Close|Closes|Closed|Resolve|Resolves|Resolved)\s+([A-Za-z0-9_\-\s\,]+)\b',
+    re.I)
 _short_id_re = re.compile(r'\b([A-Z0-9_-]+-[A-Z0-9]+)\b', re.I)
 
 
diff --git a/src/sentry/models/dsymfile.py b/src/sentry/models/dsymfile.py
index f409c1a9f9..808de99e2d 100644
--- a/src/sentry/models/dsymfile.py
+++ b/src/sentry/models/dsymfile.py
@@ -111,12 +111,12 @@ class DSymAppManager(BaseManager):
             return existing_app
 
         return BaseManager.create(self,
-            sync_id=sync_id,
-            app_id=app_id,
-            data=data,
-            project=project,
-            platform=platform
-        )
+                                  sync_id=sync_id,
+                                  app_id=app_id,
+                                  data=data,
+                                  project=project,
+                                  platform=platform
+                                  )
 
 
 class DSymApp(Model):
@@ -349,7 +349,7 @@ class DSymCache(object):
         rv = {}
         for image_uuid in uuids:
             path = self.fetch_dsym(project, image_uuid,
-                on_dsym_file_referenced=on_dsym_file_referenced)
+                                   on_dsym_file_referenced=on_dsym_file_referenced)
             if path is not None:
                 rv[image_uuid] = path
         return rv
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 42e2ce2fd9..ed8000d412 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -178,7 +178,9 @@ class Event(Model):
 
             result.append((key, value))
 
-        return OrderedDict((k, v) for k, v in sorted(result, key=lambda x: x[1].get_score(), reverse=True))
+        return OrderedDict(
+            (k, v) for k, v in sorted(
+                result, key=lambda x: x[1].get_score(), reverse=True))
 
     @memoize
     def interfaces(self):
diff --git a/src/sentry/models/eventerror.py b/src/sentry/models/eventerror.py
index a47d872e30..f7041bf911 100644
--- a/src/sentry/models/eventerror.py
+++ b/src/sentry/models/eventerror.py
@@ -10,6 +10,7 @@ class dontexplodedict(object):
     return back a sensible default value to be used in
     string formatting.
     """
+
     def __init__(self, d=None):
         self.data = d or {}
 
@@ -61,10 +62,12 @@ class EventError(object):
         UNKNOWN_ERROR: u'Unknown error',
         SECURITY_VIOLATION: u'Cannot fetch resource due to security violation on {url}',
         RESTRICTED_IP: u'Cannot fetch resource due to restricted IP address on {url}',
-        JS_GENERIC_FETCH_ERROR: u'Unable to fetch resource: {url}',  # deprecated in favor of FETCH_GENERIC_ERROR
+        # deprecated in favor of FETCH_GENERIC_ERROR
+        JS_GENERIC_FETCH_ERROR: u'Unable to fetch resource: {url}',
         FETCH_GENERIC_ERROR: u'Unable to fetch resource: {url}',
         JS_INVALID_HTTP_CODE: u'HTTP returned {value} response on {url}',
-        FETCH_INVALID_HTTP_CODE: u'HTTP returned {value} response on {url}',  # deprecated in favor of FETCH_INVALID_HTTP_CODE
+        # deprecated in favor of FETCH_INVALID_HTTP_CODE
+        FETCH_INVALID_HTTP_CODE: u'HTTP returned {value} response on {url}',
         JS_INVALID_CONTENT: u'Source file was not JavaScript: {url}',
         JS_NO_COLUMN: u'Cannot expand sourcemap due to no column information for {url}',
         JS_MISSING_SOURCE: u'Source code was not found for {url}',
@@ -73,9 +76,11 @@ class EventError(object):
         JS_INVALID_SOURCE_ENCODING: u'Source file was not \'{value}\' encoding: {url}',
         FETCH_INVALID_ENCODING: u'Source file was not \'{value}\' encoding: {url}',
         JS_INVALID_SOURCEMAP_LOCATION: u'Invalid location in sourcemap: ({column}, {row})',
-        JS_TOO_LARGE: u'Remote file too large: ({max_size:g}MB, {url})',  # deprecated in favor of FETCH_TOO_LARGE
+        # deprecated in favor of FETCH_TOO_LARGE
+        JS_TOO_LARGE: u'Remote file too large: ({max_size:g}MB, {url})',
         FETCH_TOO_LARGE: u'Remote file too large: ({max_size:g}MB, {url})',
-        JS_FETCH_TIMEOUT: u'Remote file took too long to load: ({timeout}s, {url})',  # deprecated in favor of FETCH_TIMEOUT
+        # deprecated in favor of FETCH_TIMEOUT
+        JS_FETCH_TIMEOUT: u'Remote file took too long to load: ({timeout}s, {url})',
         FETCH_TIMEOUT: u'Remote file took too long to load: ({timeout}s, {url})',
         NATIVE_NO_CRASHED_THREAD: u'No crashed thread found in crash report',
         NATIVE_INTERNAL_FAILURE: u'Internal failure when attempting to symbolicate: {error}',
diff --git a/src/sentry/models/featureadoption.py b/src/sentry/models/featureadoption.py
index 69dcdd87c1..0734bdc92b 100644
--- a/src/sentry/models/featureadoption.py
+++ b/src/sentry/models/featureadoption.py
@@ -50,26 +50,49 @@ manager.add(27, "zope", "Zope", "integration", prerequisite=["python"])
 # Configuration
 manager.add(40, "first_event", "First Event", "code", prerequisite=["first_project"])
 manager.add(41, "release_tracking", "Release Tracking", "code", prerequisite=["first_event"])
-manager.add(42, "environment_tracking", "Environment Tracking", "code", prerequisite=["first_event"])
+manager.add(
+    42,
+    "environment_tracking",
+    "Environment Tracking",
+    "code",
+    prerequisite=["first_event"])
 manager.add(43, "user_tracking", "User Tracking", "code", prerequisite=["first_event"])
 manager.add(44, "custom_tags", "Custom Tags", "code", prerequisite=["first_event"])
 manager.add(45, "source_maps", "Source Maps", "code", prerequisite=["first_event", "javascript"])
 manager.add(46, "user_feedback", "User Feedback", "code", prerequisite=["user_tracking"])
-# manager.add(47, "api", "API", "code", prerequisite=["first_event"])  # Challenging to determine what organization (i.e. api/0/organizations/)
-manager.add(48, "breadcrumbs", "Breadcrumbs", "code", prerequisite=["first_event", ("python", "javascript", "node", "php")])
-# TODO(ehfeng) manager.add("resolve_in_commit", "Resolve in Commit", "code", prerequisite=["first_event", "releases"])
+# manager.add(47, "api", "API", "code", prerequisite=["first_event"])  #
+# Challenging to determine what organization (i.e. api/0/organizations/)
+manager.add(48, "breadcrumbs", "Breadcrumbs", "code", prerequisite=[
+            "first_event", ("python", "javascript", "node", "php")])
+# TODO(ehfeng) manager.add("resolve_in_commit", "Resolve in Commit",
+# "code", prerequisite=["first_event", "releases"])
 
 # Web UI
 manager.add(60, "first_project", "First Project", "web")
 manager.add(61, "invite_team", "Invite Team", "web", prerequisite=["first_project"])
 manager.add(62, "assignment", "Assign Issue", "web", prerequisite=["invite_team", "first_event"])
-manager.add(63, "resolved_in_release", "Resolve in Next Release", "web", prerequisite=["release_tracking"])
+manager.add(
+    63,
+    "resolved_in_release",
+    "Resolve in Next Release",
+    "web",
+    prerequisite=["release_tracking"])
 manager.add(64, "advanced_search", "Advanced Search", "web", prerequisite=["first_event"])
 manager.add(65, "saved_search", "Saved Search", "web", prerequisite=["advanced_search"])
 manager.add(66, "inbound_filters", "Inbound Filters", "web", prerequisite=["first_event"])
 manager.add(67, "alert_rules", "Alert Rules", "web", prerequisite=["first_event"])
-manager.add(68, "issue_tracker_integration", "Issue Tracker Integration", "web", prerequisite=["first_project"])
-manager.add(69, "notification_integration", "Notification Integration", "web", prerequisite=["first_project"])
+manager.add(
+    68,
+    "issue_tracker_integration",
+    "Issue Tracker Integration",
+    "web",
+    prerequisite=["first_project"])
+manager.add(
+    69,
+    "notification_integration",
+    "Notification Integration",
+    "web",
+    prerequisite=["first_project"])
 # TODO(ehfeng) manager.add("snooze", "Snooze Issue", "web", prerequisite=["first_event"])
 # TODO(ehfeng) manager.add("merge", "Merge Issues", "web", prerequisite=["first_event"])
 # TODO(ehfeng) manager.add("releases", "Releases", "web", prerequisite=["first_project"])
@@ -153,14 +176,16 @@ class FeatureAdoptionManager(BaseManager):
                 return True
 
         except IntegrityError as e:
-            # This can occur if redis somehow loses the set of complete features and we attempt to insert duplicate (org_id, feature_id) rows
+            # This can occur if redis somehow loses the set of complete features and
+            # we attempt to insert duplicate (org_id, feature_id) rows
             logger.exception(e)
             return False
         finally:
             return self.bulk_set_cache(organization_id, *incomplete_feature_ids)
 
     def get_by_slug(self, organization, slug):
-        return self.filter(organization=organization, feature_id=manager.get_by_slug(slug).id).first()
+        return self.filter(organization=organization,
+                           feature_id=manager.get_by_slug(slug).id).first()
 
 
 class FeatureAdoption(Model):
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index fad11dbfb0..60e9bc905a 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -287,7 +287,13 @@ class Group(Model):
         return cls.objects.get(project=project_id, id=group_id)
 
     def get_score(self):
-        return int(math.log(self.times_seen) * 600 + float(time.mktime(self.last_seen.timetuple())))
+        return int(
+            math.log(
+                self.times_seen) *
+            600 +
+            float(
+                time.mktime(
+                    self.last_seen.timetuple())))
 
     def get_latest_event(self):
         from sentry.models import Event
diff --git a/src/sentry/models/organization.py b/src/sentry/models/organization.py
index 04adebada5..13d019998b 100644
--- a/src/sentry/models/organization.py
+++ b/src/sentry/models/organization.py
@@ -82,19 +82,28 @@ class Organization(Model):
         (OrganizationStatus.DELETION_IN_PROGRESS, _('Deletion in Progress')),
     ), default=OrganizationStatus.VISIBLE)
     date_added = models.DateTimeField(default=timezone.now)
-    members = models.ManyToManyField(settings.AUTH_USER_MODEL, through='sentry.OrganizationMember', related_name='org_memberships')
+    members = models.ManyToManyField(
+        settings.AUTH_USER_MODEL,
+        through='sentry.OrganizationMember',
+        related_name='org_memberships')
     default_role = models.CharField(
         choices=roles.get_choices(),
         max_length=32,
         default=roles.get_default().id,
     )
 
-    flags = BitField(flags=(
-        ('allow_joinleave', 'Allow members to join and leave teams without requiring approval.'),
-        ('enhanced_privacy', 'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.'),
-        ('disable_shared_issues', 'Disable sharing of limited details on issues to anonymous users.'),
-        ('early_adopter', 'Enable early adopter status, gaining access to features prior to public release.'),
-    ), default=1)
+    flags = BitField(
+        flags=(
+            ('allow_joinleave',
+             'Allow members to join and leave teams without requiring approval.'),
+            ('enhanced_privacy',
+             'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.'),
+            ('disable_shared_issues',
+             'Disable sharing of limited details on issues to anonymous users.'),
+            ('early_adopter',
+             'Enable early adopter status, gaining access to features prior to public release.'),
+        ),
+        default=1)
 
     objects = OrganizationManager(cache_fields=(
         'pk',
@@ -189,7 +198,8 @@ class Organization(Model):
             Repository, Team, Environment,
         )
 
-        for from_member in OrganizationMember.objects.filter(organization=from_org, user__isnull=False):
+        for from_member in OrganizationMember.objects.filter(
+                organization=from_org, user__isnull=False):
             try:
                 to_member = OrganizationMember.objects.get(
                     organization=to_org,
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index 5939365ba3..8a4ea4e3e0 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -66,7 +66,7 @@ class OrganizationMember(Model):
     organization = FlexibleForeignKey('sentry.Organization', related_name="member_set")
 
     user = FlexibleForeignKey(settings.AUTH_USER_MODEL, null=True, blank=True,
-                             related_name="sentry_orgmember_set")
+                              related_name="sentry_orgmember_set")
     email = models.EmailField(null=True, blank=True)
     role = models.CharField(
         choices=roles.get_choices(),
diff --git a/src/sentry/models/organizationonboardingtask.py b/src/sentry/models/organizationonboardingtask.py
index 747f0a4bb2..12edc21b22 100644
--- a/src/sentry/models/organizationonboardingtask.py
+++ b/src/sentry/models/organizationonboardingtask.py
@@ -89,7 +89,8 @@ class OrganizationOnboardingTask(Model):
     __core__ = False
 
     TASK_CHOICES = (
-        (OnboardingTask.FIRST_EVENT, 'First event'),  # Send an organization's first event to Sentry
+        # Send an organization's first event to Sentry
+        (OnboardingTask.FIRST_EVENT, 'First event'),
         (OnboardingTask.INVITE_MEMBER, 'Invite member'),  # Add a second member to your Sentry org.
         (OnboardingTask.ISSUE_TRACKER, 'Issue tracker'),  # Hook up an external issue tracker.
         (OnboardingTask.NOTIFICATION_SERVICE, 'Notification services'),  # Setup a notification services
diff --git a/src/sentry/models/processingissue.py b/src/sentry/models/processingissue.py
index 621fa079ab..fc8dbb4d62 100644
--- a/src/sentry/models/processingissue.py
+++ b/src/sentry/models/processingissue.py
@@ -61,9 +61,9 @@ class ProcessingIssueManager(BaseManager):
         """
         from sentry.models import RawEvent
         rv = list(RawEvent.objects
-            .filter(project_id=project_id)
-            .annotate(eventissue_count=Count('eventprocessingissue'))
-            .filter(eventissue_count=0)[:limit])
+                  .filter(project_id=project_id)
+                  .annotate(eventissue_count=Count('eventprocessingissue'))
+                  .filter(eventissue_count=0)[:limit])
         if len(rv) > limit:
             rv = rv[:limit]
             has_more = True
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 0e1abbdb53..a67888dcbf 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -168,7 +168,9 @@ class Project(Model):
 
     def is_internal_project(self):
         for value in (settings.SENTRY_FRONTEND_PROJECT, settings.SENTRY_PROJECT):
-            if six.text_type(self.id) == six.text_type(value) or six.text_type(self.slug) == six.text_type(value):
+            if six.text_type(
+                    self.id) == six.text_type(value) or six.text_type(
+                    self.slug) == six.text_type(value):
                 return True
         return False
 
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 968c23ea06..5d8a7da124 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -89,7 +89,8 @@ class Release(Model):
 
     @staticmethod
     def is_valid_version(value):
-        return not (any(c in value for c in BAD_RELEASE_CHARS) or value in ('.', '..') or not value)
+        return not (any(c in value for c in BAD_RELEASE_CHARS)
+                    or value in ('.', '..') or not value)
 
     @classmethod
     def get_cache_key(cls, organization_id, version):
@@ -346,7 +347,8 @@ class Release(Model):
             commit_author_by_commit = {}
             latest_commit = None
             for idx, data in enumerate(commit_list):
-                repo_name = data.get('repository') or 'organization-{}'.format(self.organization_id)
+                repo_name = data.get(
+                    'repository') or 'organization-{}'.format(self.organization_id)
                 if repo_name not in repos:
                     repos[repo_name] = repo = Repository.objects.get_or_create(
                         organization_id=self.organization_id,
@@ -357,8 +359,12 @@ class Release(Model):
 
                 author_email = data.get('author_email')
                 if author_email is None and data.get('author_name'):
-                    author_email = (re.sub(r'[^a-zA-Z0-9\-_\.]*', '', data['author_name']).lower() +
-                                    '@localhost')
+                    author_email = (
+                        re.sub(
+                            r'[^a-zA-Z0-9\-_\.]*',
+                            '',
+                            data['author_name']).lower() +
+                        '@localhost')
 
                 if not author_email:
                     author = None
diff --git a/src/sentry/models/useroption.py b/src/sentry/models/useroption.py
index 67e8fe4b72..9473adf44c 100644
--- a/src/sentry/models/useroption.py
+++ b/src/sentry/models/useroption.py
@@ -69,7 +69,8 @@ class UserOptionManager(BaseManager):
         return result.get(key, default)
 
     def unset_value(self, user, project, key):
-        # this isn't implemented for user-organization scoped options yet, because it hasn't been needed
+        # this isn't implemented for user-organization scoped options yet, because
+        # it hasn't been needed
         self.filter(user=user, project=project, key=key).delete()
         if not hasattr(self, '_metadata'):
             return
diff --git a/src/sentry/nodestore/cassandra/backend.py b/src/sentry/nodestore/cassandra/backend.py
index de05371406..6b3138a5b2 100644
--- a/src/sentry/nodestore/cassandra/backend.py
+++ b/src/sentry/nodestore/cassandra/backend.py
@@ -24,6 +24,7 @@ class CassandraNodeStorage(NodeStorage):
     ...     columnfamily='nodestore',
     ... )
     """
+
     def __init__(self, servers, keyspace='sentry',
                  columnfamily='nodestore', **kwargs):
         self.servers = servers
diff --git a/src/sentry/nodestore/multi/backend.py b/src/sentry/nodestore/multi/backend.py
index 9c728e654f..d15e992f05 100644
--- a/src/sentry/nodestore/multi/backend.py
+++ b/src/sentry/nodestore/multi/backend.py
@@ -29,6 +29,7 @@ class MultiNodeStorage(NodeStorage):
     >>>     ('sentry.nodestore.riak.backend.RiakNodeStorage', {}),
     >>> ], read_selector=lambda backends: backends[0])
     """
+
     def __init__(self, backends, read_selector=random.choice, **kwargs):
         assert backends, "you should provide at least one backend"
 
diff --git a/src/sentry/nodestore/riak/backend.py b/src/sentry/nodestore/riak/backend.py
index 7a5ce6b1c8..10041c0f6f 100644
--- a/src/sentry/nodestore/riak/backend.py
+++ b/src/sentry/nodestore/riak/backend.py
@@ -37,6 +37,7 @@ class RiakNodeStorage(NodeStorage):
 
     >>> RiakNodeStorage(nodes=[{'host':'127.0.0.1','port':8098}])
     """
+
     def __init__(self, nodes, bucket='nodes', timeout=1, cooldown=5,
                  max_retries=3, multiget_pool_size=5, tcp_keepalive=True,
                  protocol=None):
diff --git a/src/sentry/nodestore/riak/client.py b/src/sentry/nodestore/riak/client.py
index ba9d25583f..bdee04379b 100644
--- a/src/sentry/nodestore/riak/client.py
+++ b/src/sentry/nodestore/riak/client.py
@@ -42,6 +42,7 @@ class SimpleThreadedWorkerPool(object):
     Manages a simple threaded worker pool. The pool will be started when the
     first job is submitted, and will run to process completion.
     """
+
     def __init__(self, size):
         assert size > 0, 'pool must have at laest one worker thread'
 
@@ -84,6 +85,7 @@ class RiakClient(object):
     A thread-safe simple light-weight riak client that does only
     the bare minimum.
     """
+
     def __init__(self, multiget_pool_size=5, **kwargs):
         self.manager = ConnectionManager(**kwargs)
         self.pool = SimpleThreadedWorkerPool(multiget_pool_size)
@@ -179,6 +181,7 @@ class ConnectionManager(object):
     """
     A thread-safe multi-host http connection manager.
     """
+
     def __init__(self, hosts=DEFAULT_NODES, strategy=RoundRobinStrategy, randomize=True,
                  timeout=3, cooldown=5, max_retries=None, tcp_keepalive=True):
         assert hosts
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index a1961cfa7a..354377f488 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -78,7 +78,8 @@ register('u2f.facets', default=(), type=Sequence,
 
 register('auth.ip-rate-limit', default=0, flags=FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK)
 register('auth.user-rate-limit', default=0, flags=FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK)
-register('auth.allow-registration', default=False, flags=FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK | FLAG_REQUIRED)
+register('auth.allow-registration', default=False,
+         flags=FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK | FLAG_REQUIRED)
 
 register('api.rate-limit.org-create', default=5, flags=FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK)
 
diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index a8409e7969..8754a0e23f 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -86,7 +86,8 @@ class OptionsManager(object):
         # Enforce immutability on key
         assert not (opt.flags & FLAG_IMMUTABLE), '%r cannot be changed at runtime' % key
         # Enforce immutability if value is already set on disk
-        assert not (opt.flags & FLAG_PRIORITIZE_DISK and settings.SENTRY_OPTIONS.get(key)), '%r cannot be changed at runtime because it is configured on disk' % key
+        assert not (opt.flags & FLAG_PRIORITIZE_DISK and settings.SENTRY_OPTIONS.get(
+            key)), '%r cannot be changed at runtime because it is configured on disk' % key
 
         if coerce:
             value = opt.type(value)
@@ -201,7 +202,8 @@ class OptionsManager(object):
         # see what value is returns, so we can use that to derive the type
         if not callable(default):
             default_value = default
-            default = lambda: default_value
+
+            def default(): return default_value
         else:
             default_value = default()
 
@@ -211,7 +213,8 @@ class OptionsManager(object):
             # is specified and we assume six.text_type for safety
             if default_value is None:
                 default_value = u''
-                default = lambda: default_value
+
+                def default(): return default_value
             type = type_from_value(default_value)
 
         # We disallow None as a value for options since this is ambiguous and doesn't
diff --git a/src/sentry/plugins/base/manager.py b/src/sentry/plugins/base/manager.py
index a5f2e28484..edd3bef157 100644
--- a/src/sentry/plugins/base/manager.py
+++ b/src/sentry/plugins/base/manager.py
@@ -70,9 +70,9 @@ class PluginManager(InstanceManager):
             except Exception as e:
                 logger = logging.getLogger('sentry.plugins.%s' % (type(plugin).slug,))
                 logger.error('%s.process_error', func_name,
-                    exc_info=True,
-                    extra={'exception': e},
-                )
+                             exc_info=True,
+                             extra={'exception': e},
+                             )
                 continue
 
             if result is not None:
diff --git a/src/sentry/plugins/base/v1.py b/src/sentry/plugins/base/v1.py
index 75e2c16721..28831380a3 100644
--- a/src/sentry/plugins/base/v1.py
+++ b/src/sentry/plugins/base/v1.py
@@ -36,7 +36,8 @@ class PluginMount(type):
             new_cls.title = new_cls.__name__
         if not new_cls.slug:
             new_cls.slug = new_cls.title.replace(' ', '-').lower()
-        if not hasattr(new_cls, 'logger') or new_cls.logger in [getattr(b, 'logger', None) for b in bases]:
+        if not hasattr(new_cls, 'logger') or new_cls.logger in [
+                getattr(b, 'logger', None) for b in bases]:
             new_cls.logger = logging.getLogger('sentry.plugins.%s' % (new_cls.slug,))
         return new_cls
 
@@ -166,7 +167,13 @@ class IPlugin(local, PluggableViewMixin, PluginConfigMixin, PluginStatusMixin):
 
         >>> plugin.get_url(group)
         """
-        return reverse('sentry-group-plugin-action', args=(group.organization.slug, group.project.slug, group.pk, self.slug))
+        return reverse(
+            'sentry-group-plugin-action',
+            args=(
+                group.organization.slug,
+                group.project.slug,
+                group.pk,
+                self.slug))
 
     def get_conf_key(self):
         """
diff --git a/src/sentry/plugins/base/view.py b/src/sentry/plugins/base/view.py
index 061fe5781f..1fddcbb2b3 100644
--- a/src/sentry/plugins/base/view.py
+++ b/src/sentry/plugins/base/view.py
@@ -12,6 +12,7 @@ class PluggableViewMixin(object):
     A mix-in which provides a render method which returns a special object to
     enable embedding of content within base-views.
     """
+
     def redirect(self, url):
         """
         Returns a redirect response type.
diff --git a/src/sentry/plugins/bases/issue.py b/src/sentry/plugins/bases/issue.py
index f2ef23d504..4a6dbc0906 100644
--- a/src/sentry/plugins/bases/issue.py
+++ b/src/sentry/plugins/bases/issue.py
@@ -99,7 +99,10 @@ class IssueTrackingPlugin(Plugin):
         if not request.user.is_authenticated():
             return True
 
-        return bool(not UserSocialAuth.objects.filter(user=request.user, provider=self.auth_provider).exists())
+        return bool(
+            not UserSocialAuth.objects.filter(
+                user=request.user,
+                provider=self.auth_provider).exists())
 
     def get_new_issue_title(self, **kwargs):
         """
@@ -117,7 +120,12 @@ class IssueTrackingPlugin(Plugin):
         """
         Return a Form for the "Create new issue" page.
         """
-        return self.new_issue_form(request.POST or None, initial=self.get_initial_form_data(request, group, event))
+        return self.new_issue_form(
+            request.POST or None,
+            initial=self.get_initial_form_data(
+                request,
+                group,
+                event))
 
     def get_new_issue_read_only_fields(self, *args, **kwargs):
         """
@@ -187,7 +195,10 @@ class IssueTrackingPlugin(Plugin):
 
     def view(self, request, group, **kwargs):
         has_auth_configured = self.has_auth_configured()
-        if not (has_auth_configured and self.is_configured(project=group.project, request=request)):
+        if not (
+            has_auth_configured and self.is_configured(
+                project=group.project,
+                request=request)):
             if self.auth_provider:
                 required_auth_settings = settings.AUTH_PROVIDERS[self.auth_provider]
             else:
@@ -250,7 +261,11 @@ class IssueTrackingPlugin(Plugin):
                     data=issue_information,
                 )
 
-                issue_tracker_used.send(plugin=self, project=group.project, user=request.user, sender=IssueTrackingPlugin)
+                issue_tracker_used.send(
+                    plugin=self,
+                    project=group.project,
+                    user=request.user,
+                    sender=IssueTrackingPlugin)
                 return self.redirect(group.get_absolute_url())
 
         elif op == 'link':
@@ -317,9 +332,9 @@ class IssueTrackingPlugin(Plugin):
             return tag_list
 
         tag_list.append(format_html('<a href="{}" rel="noreferrer">{}</a>',
-            self.get_issue_url(group=group, issue_id=issue_id),
-            self.get_issue_label(group=group, issue_id=issue_id),
-        ))
+                                    self.get_issue_url(group=group, issue_id=issue_id),
+                                    self.get_issue_label(group=group, issue_id=issue_id),
+                                    ))
 
         return tag_list
 
diff --git a/src/sentry/plugins/bases/issue2.py b/src/sentry/plugins/bases/issue2.py
index 9163e7fa99..ab7177f56b 100644
--- a/src/sentry/plugins/bases/issue2.py
+++ b/src/sentry/plugins/bases/issue2.py
@@ -85,7 +85,7 @@ class IssueTrackingPlugin2(Plugin):
                     PluginGroupEndpoint.as_view(
                         view=getattr(self, view_method_name),
                     ),
-                )
+                    )
             )
         return _urls
 
@@ -114,7 +114,8 @@ class IssueTrackingPlugin2(Plugin):
         if not request.user.is_authenticated():
             return True
 
-        return not UserSocialAuth.objects.filter(user=request.user, provider=self.auth_provider).exists()
+        return not UserSocialAuth.objects.filter(
+            user=request.user, provider=self.auth_provider).exists()
 
     def get_new_issue_fields(self, request, group, event, **kwargs):
         """
@@ -232,7 +233,11 @@ class IssueTrackingPlugin2(Plugin):
             data=issue_information,
         )
 
-        issue_tracker_used.send(plugin=self, project=group.project, user=request.user, sender=IssueTrackingPlugin2)
+        issue_tracker_used.send(
+            plugin=self,
+            project=group.project,
+            user=request.user,
+            sender=IssueTrackingPlugin2)
         return Response({'issue_url': self.get_issue_url(group=group, issue_id=issue_id)})
 
     def view_unlink(self, request, group, **kwargs):
@@ -308,7 +313,10 @@ class IssueTrackingPlugin2(Plugin):
 
     def check_config_and_auth(self, request, group):
         has_auth_configured = self.has_auth_configured()
-        if not (has_auth_configured and self.is_configured(project=group.project, request=request)):
+        if not (
+            has_auth_configured and self.is_configured(
+                project=group.project,
+                request=request)):
             if self.auth_provider:
                 required_auth_settings = settings.AUTH_PROVIDERS[self.auth_provider]
             else:
@@ -362,9 +370,9 @@ class IssueTrackingPlugin2(Plugin):
             return tag_list
 
         tag_list.append(format_html('<a href="{}">{}</a>',
-            self.get_issue_url(group=group, issue_id=issue_id),
-            self.get_issue_label(group=group, issue_id=issue_id),
-        ))
+                                    self.get_issue_url(group=group, issue_id=issue_id),
+                                    self.get_issue_label(group=group, issue_id=issue_id),
+                                    ))
 
         return tag_list
 
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 1d44cbc508..c1d638dea8 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -44,8 +44,9 @@ class BaseNotificationUserOptionsForm(forms.Form):
 
 
 class NotificationPlugin(Plugin):
-    description = ('Notify project members when a new event is seen for the first time, or when an '
-                   'already resolved event has changed back to unresolved.')
+    description = (
+        'Notify project members when a new event is seen for the first time, or when an '
+        'already resolved event has changed back to unresolved.')
     # site_conf_form = NotificationConfigurationForm
     project_conf_form = NotificationConfigurationForm
 
@@ -72,12 +73,13 @@ class NotificationPlugin(Plugin):
             extra['rule_id'] = future.rule.id
             if not future.kwargs:
                 continue
-            raise NotImplementedError('The default behavior for notification de-duplication does not support args')
+            raise NotImplementedError(
+                'The default behavior for notification de-duplication does not support args')
 
         project = event.group.project
         extra['project_id'] = project.id
         if hasattr(self, 'notify_digest') and digests.enabled(project):
-            get_digest_option = lambda key: ProjectOption.objects.get_value(
+            def get_digest_option(key): return ProjectOption.objects.get_value(
                 project,
                 get_digest_option_key(self.get_conf_key(), key),
             )
@@ -138,7 +140,12 @@ class NotificationPlugin(Plugin):
         # If the plugin doesn't support digests or they are not enabled,
         # perform rate limit checks to support backwards compatibility with
         # older plugins.
-        if not (hasattr(self, 'notify_digest') and digests.enabled(project)) and self.__is_rate_limited(group, event):
+        if not (
+                hasattr(
+                    self,
+                    'notify_digest') and digests.enabled(project)) and self.__is_rate_limited(
+                group,
+                event):
             logger = logging.getLogger('sentry.plugins.{0}'.format(self.get_conf_key()))
             logger.info('notification.rate_limited', extra={'project_id': project.id})
             return False
diff --git a/src/sentry/plugins/helpers.py b/src/sentry/plugins/helpers.py
index 9ec308dec1..7b998dc0bc 100644
--- a/src/sentry/plugins/helpers.py
+++ b/src/sentry/plugins/helpers.py
@@ -15,7 +15,9 @@ __all__ = ('set_option', 'get_option', 'unset_option')
 
 def reset_options(prefix, project=None, user=None):
     if user:
-        UserOption.objects.filter(key__startswith='%s:' % (prefix,), project=project, user=user).delete()
+        UserOption.objects.filter(
+            key__startswith='%s:' %
+            (prefix,), project=project, user=user).delete()
         UserOption.objects.clear_cache()
     elif project:
         ProjectOption.objects.filter(key__startswith='%s:' % (prefix,), project=project).delete()
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 7d4c253931..a701b64138 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -52,8 +52,8 @@ class MailPlugin(NotificationPlugin):
         return options.get('mail.subject-prefix')
 
     def _build_message(self, project, subject, template=None, html_template=None,
-                   body=None, reference=None, reply_reference=None, headers=None,
-                   context=None, send_to=None, type=None):
+                       body=None, reference=None, reply_reference=None, headers=None,
+                       context=None, send_to=None, type=None):
         if send_to is None:
             send_to = self.get_send_to(project)
         if not send_to:
@@ -120,8 +120,10 @@ class MailPlugin(NotificationPlugin):
         return send_to_list
 
     def add_unsubscribe_link(self, context, user_id, project):
-        context['unsubscribe_link'] = generate_signed_link(user_id,
-            'sentry-account-email-unsubscribe-project', kwargs={
+        context['unsubscribe_link'] = generate_signed_link(
+            user_id,
+            'sentry-account-email-unsubscribe-project',
+            kwargs={
                 'project_id': project.id,
             })
 
diff --git a/src/sentry/receivers/features.py b/src/sentry/receivers/features.py
index f82bf66f59..5e68f518de 100644
--- a/src/sentry/receivers/features.py
+++ b/src/sentry/receivers/features.py
@@ -23,11 +23,35 @@ from sentry.signals import (
 )
 from sentry.utils.javascript import has_sourcemap
 
-DEFAULT_TAGS = frozenset(['level', 'logger', 'transaction', 'url', 'browser', 'sentry:user',
-    'os', 'server_name', 'device', 'os.name', 'browser.name', 'sentry:release', 'environment',
-    'device.family', 'site', 'version', 'interface_type', 'rake_task', 'runtime', 'runtime.name',
-    'type', 'php_version', 'app', 'app.device', 'locale', 'os_version', 'device_model',
-    'deviceModel', 'sentry_version'])
+DEFAULT_TAGS = frozenset(['level',
+                          'logger',
+                          'transaction',
+                          'url',
+                          'browser',
+                          'sentry:user',
+                          'os',
+                          'server_name',
+                          'device',
+                          'os.name',
+                          'browser.name',
+                          'sentry:release',
+                          'environment',
+                          'device.family',
+                          'site',
+                          'version',
+                          'interface_type',
+                          'rake_task',
+                          'runtime',
+                          'runtime.name',
+                          'type',
+                          'php_version',
+                          'app',
+                          'app.device',
+                          'locale',
+                          'os_version',
+                          'device_model',
+                          'deviceModel',
+                          'sentry_version'])
 
 
 # First Event
diff --git a/src/sentry/receivers/onboarding.py b/src/sentry/receivers/onboarding.py
index 2b9af50860..1965b2e113 100644
--- a/src/sentry/receivers/onboarding.py
+++ b/src/sentry/receivers/onboarding.py
@@ -25,10 +25,13 @@ from sentry.utils.javascript import has_sourcemap
 
 
 def check_for_onboarding_complete(organization_id):
-    if OrganizationOption.objects.filter(organization_id=organization_id, key="onboarding:complete").exists():
+    if OrganizationOption.objects.filter(
+            organization_id=organization_id,
+            key="onboarding:complete").exists():
         return
 
-    completed = set(OrganizationOnboardingTask.objects.filter(Q(organization_id=organization_id) & (Q(status=OnboardingTaskStatus.COMPLETE) | Q(status=OnboardingTaskStatus.SKIPPED))).values_list('task', flat=True))
+    completed = set(OrganizationOnboardingTask.objects.filter(Q(organization_id=organization_id) & (
+        Q(status=OnboardingTaskStatus.COMPLETE) | Q(status=OnboardingTaskStatus.SKIPPED))).values_list('task', flat=True))
     if completed >= OnboardingTask.REQUIRED_ONBOARDING_TASKS:
         try:
             with transaction.atomic():
@@ -107,7 +110,8 @@ def record_first_event(project, group, **kwargs):
             return
 
         # Only counts if it's a new project and platform
-        if oot.project_id != project.id and oot.data.get('platform', group.platform) != group.platform:
+        if oot.project_id != project.id and oot.data.get(
+                'platform', group.platform) != group.platform:
             OrganizationOnboardingTask.objects.create_or_update(
                 organization_id=project.organization_id,
                 task=OnboardingTask.SECOND_PLATFORM,
diff --git a/src/sentry/rules/actions/notify_event.py b/src/sentry/rules/actions/notify_event.py
index cd9fea66ec..170163829e 100644
--- a/src/sentry/rules/actions/notify_event.py
+++ b/src/sentry/rules/actions/notify_event.py
@@ -36,7 +36,11 @@ class NotifyEventAction(EventAction):
         group = event.group
 
         for plugin in self.get_plugins():
-            if not safe_execute(plugin.should_notify, group=group, event=event, _with_transaction=False):
+            if not safe_execute(
+                    plugin.should_notify,
+                    group=group,
+                    event=event,
+                    _with_transaction=False):
                 continue
 
             metrics.incr('notifications.sent', instance=plugin.slug)
diff --git a/src/sentry/runner/commands/backup.py b/src/sentry/runner/commands/backup.py
index 3907669c80..21432aac0a 100644
--- a/src/sentry/runner/commands/backup.py
+++ b/src/sentry/runner/commands/backup.py
@@ -92,10 +92,12 @@ def sort_dependencies(app_list):
             else:
                 skipped.append((model, deps))
         if not changed:
-            raise RuntimeError("Can't resolve dependencies for %s in serialized app list." %
-                ', '.join('%s.%s' % (model._meta.app_label, model._meta.object_name)
-                for model, deps in sorted(skipped, key=lambda obj: obj[0].__name__))
-            )
+            raise RuntimeError(
+                "Can't resolve dependencies for %s in serialized app list." %
+                ', '.join(
+                    '%s.%s' %
+                    (model._meta.app_label, model._meta.object_name) for model, deps in sorted(
+                        skipped, key=lambda obj: obj[0].__name__)))
         model_dependencies = skipped
 
     return model_list
@@ -104,7 +106,10 @@ def sort_dependencies(app_list):
 @click.command()
 @click.argument('dest', default='-', type=click.File('wb'))
 @click.option('--silent', '-q', default=False, is_flag=True, help='Silence all debug output.')
-@click.option('--indent', default=2, help='Number of spaces to indent for the JSON output. (default: 2)')
+@click.option(
+    '--indent',
+    default=2,
+    help='Number of spaces to indent for the JSON output. (default: 2)')
 @click.option('--exclude', default=None, help='Models to exclude from export.', metavar='MODELS')
 @configuration
 def export(dest, silent, indent, exclude):
diff --git a/src/sentry/runner/commands/cleanup.py b/src/sentry/runner/commands/cleanup.py
index b3079946e8..9c071b5c3b 100644
--- a/src/sentry/runner/commands/cleanup.py
+++ b/src/sentry/runner/commands/cleanup.py
@@ -35,11 +35,14 @@ def get_project(value):
 @click.command()
 @click.option('--days', default=30, show_default=True, help='Numbers of days to truncate on.')
 @click.option('--project', help='Limit truncation to only entries from project.')
-@click.option('--concurrency', type=int, default=1, show_default=True, help='The number of concurrent workers to run.')
-@click.option('--silent', '-q', default=False, is_flag=True, help='Run quietly. No output on success.')
+@click.option('--concurrency', type=int, default=1, show_default=True,
+              help='The number of concurrent workers to run.')
+@click.option('--silent', '-q', default=False, is_flag=True,
+              help='Run quietly. No output on success.')
 @click.option('--model', '-m', multiple=True)
 @click.option('--router', '-r', default=None, help='Database router')
-@click.option('--timed', '-t', default=False, is_flag=True, help='Send the duration of this command to internal metrics.')
+@click.option('--timed', '-t', default=False, is_flag=True,
+              help='Send the duration of this command to internal metrics.')
 @configuration
 def cleanup(days, project, concurrency, silent, model, router, timed):
     """Delete a portion of trailing data based on creation date.
@@ -193,7 +196,9 @@ def cleanup(days, project, concurrency, silent, model, router, timed):
             if concurrency > 1:
                 threads = []
                 for shard_id in range(concurrency):
-                    t = Thread(target=lambda shard_id=shard_id: query.execute_sharded(concurrency, shard_id))
+                    t = Thread(
+                        target=lambda shard_id=shard_id: query.execute_sharded(
+                            concurrency, shard_id))
                     t.start()
                     threads.append(t)
 
diff --git a/src/sentry/runner/commands/devserver.py b/src/sentry/runner/commands/devserver.py
index 10fe999588..96ddf4bde2 100644
--- a/src/sentry/runner/commands/devserver.py
+++ b/src/sentry/runner/commands/devserver.py
@@ -15,9 +15,11 @@ from sentry.runner.decorators import configuration, log_options
 
 @click.command()
 @click.option('--reload/--no-reload', default=True, help='Autoreloading of python files.')
-@click.option('--watchers/--no-watchers', default=True, help='Watch static files and recompile on changes.')
+@click.option('--watchers/--no-watchers', default=True,
+              help='Watch static files and recompile on changes.')
 @click.option('--workers/--no-workers', default=False, help='Run asynchronous workers.')
-@click.option('--browser-reload/--no-browser-reload', default=False, help='Automatic browser refreshing on webpack builds')
+@click.option('--browser-reload/--no-browser-reload', default=False,
+              help='Automatic browser refreshing on webpack builds')
 @click.option('--environment', default='development', help='The environment name.')
 @click.argument('bind', default='127.0.0.1:8000', metavar='ADDRESS')
 @log_options()
@@ -76,7 +78,8 @@ def devserver(reload, watchers, workers, browser_reload, environment, bind):
 
     if workers:
         if settings.CELERY_ALWAYS_EAGER:
-            raise click.ClickException('Disable CELERY_ALWAYS_EAGER in your settings file to spawn workers.')
+            raise click.ClickException(
+                'Disable CELERY_ALWAYS_EAGER in your settings file to spawn workers.')
 
         daemons += [
             ('worker', ['sentry', 'run', 'worker', '-c', '1', '--autoreload']),
diff --git a/src/sentry/runner/commands/init.py b/src/sentry/runner/commands/init.py
index 1c0230bb78..50751e1271 100644
--- a/src/sentry/runner/commands/init.py
+++ b/src/sentry/runner/commands/init.py
@@ -12,7 +12,8 @@ import click
 
 
 @click.command()
-@click.option('--dev', default=False, is_flag=True, help='Use settings more conducive to local development.')
+@click.option('--dev', default=False, is_flag=True,
+              help='Use settings more conducive to local development.')
 @click.argument('directory', required=False)
 @click.pass_context
 def init(ctx, dev, directory):
@@ -27,7 +28,9 @@ def init(ctx, dev, directory):
     # must maintain old behavior, and just abort
     if yaml is None and os.path.isfile(py):
         # TODO: Link to docs explaining about new behavior of SENTRY_CONF?
-        raise click.ClickException("Found legacy '%s' file, so aborting." % click.format_filename(py))
+        raise click.ClickException(
+            "Found legacy '%s' file, so aborting." %
+            click.format_filename(py))
 
     if yaml is None:
         raise click.ClickException("DIRECTORY must not be a file.")
@@ -38,13 +41,16 @@ def init(ctx, dev, directory):
     py_contents, yaml_contents = generate_settings(dev)
 
     if os.path.isfile(yaml):
-        click.confirm("File already exists at '%s', overwrite?" % click.format_filename(yaml), abort=True)
+        click.confirm("File already exists at '%s', overwrite?" %
+                      click.format_filename(yaml), abort=True)
 
     with click.open_file(yaml, 'w') as fp:
         fp.write(yaml_contents)
 
     if os.path.isfile(py):
-        click.confirm("File already exists at '%s', overwrite?" % click.format_filename(py), abort=True)
+        click.confirm(
+            "File already exists at '%s', overwrite?" %
+            click.format_filename(py), abort=True)
 
     with click.open_file(py, 'w') as fp:
         fp.write(py_contents)
diff --git a/src/sentry/runner/commands/queues.py b/src/sentry/runner/commands/queues.py
index 1834908ae5..89a64d28a6 100644
--- a/src/sentry/runner/commands/queues.py
+++ b/src/sentry/runner/commands/queues.py
@@ -62,6 +62,8 @@ def purge(force, queue):
         return
 
     if not force:
-        click.confirm('Are you sure you want to purge %d messages from the queue \'%s\'?' % (size, queue), abort=True)
+        click.confirm(
+            'Are you sure you want to purge %d messages from the queue \'%s\'?' %
+            (size, queue), abort=True)
 
     click.echo('Poof, %d messages deleted' % backend.purge_queue(queue), err=True)
diff --git a/src/sentry/runner/commands/run.py b/src/sentry/runner/commands/run.py
index 4511ca398c..26d0b6b294 100644
--- a/src/sentry/runner/commands/run.py
+++ b/src/sentry/runner/commands/run.py
@@ -75,10 +75,16 @@ def run():
 
 @run.command()
 @click.option('--bind', '-b', default=None, help='Bind address.', type=Address)
-@click.option('--workers', '-w', default=0, help='The number of worker processes for handling requests.')
+@click.option(
+    '--workers',
+    '-w',
+    default=0,
+    help='The number of worker processes for handling requests.')
 @click.option('--upgrade', default=False, is_flag=True, help='Upgrade before starting.')
-@click.option('--with-lock', default=False, is_flag=True, help='Use a lock if performing an upgrade.')
-@click.option('--noinput', default=False, is_flag=True, help='Do not prompt the user for input of any kind.')
+@click.option('--with-lock', default=False, is_flag=True,
+              help='Use a lock if performing an upgrade.')
+@click.option('--noinput', default=False, is_flag=True,
+              help='Do not prompt the user for input of any kind.')
 @log_options()
 @configuration
 def web(bind, workers, upgrade, with_lock, noinput):
@@ -93,7 +99,9 @@ def web(bind, workers, upgrade, with_lock, noinput):
             )
         except click.ClickException:
             if with_lock:
-                click.echo('!! Upgrade currently running from another process, skipping.', err=True)
+                click.echo(
+                    '!! Upgrade currently running from another process, skipping.',
+                    err=True)
             else:
                 raise
 
@@ -108,7 +116,8 @@ def web(bind, workers, upgrade, with_lock, noinput):
 @run.command()
 @click.option('--bind', '-b', default=None, help='Bind address.', type=Address)
 @click.option('--upgrade', default=False, is_flag=True, help='Upgrade before starting.')
-@click.option('--noinput', default=False, is_flag=True, help='Do not prompt the user for input of any kind.')
+@click.option('--noinput', default=False, is_flag=True,
+              help='Do not prompt the user for input of any kind.')
 @configuration
 def smtp(bind, upgrade, noinput):
     "Run inbound email service."
@@ -155,7 +164,8 @@ def worker(**options):
     "Run background worker instance."
     from django.conf import settings
     if settings.CELERY_ALWAYS_EAGER:
-        raise click.ClickException('Disable CELERY_ALWAYS_EAGER in your settings file to spawn workers.')
+        raise click.ClickException(
+            'Disable CELERY_ALWAYS_EAGER in your settings file to spawn workers.')
 
     from sentry.celery import app
     worker = app.Worker(
@@ -194,7 +204,8 @@ def cron(**options):
     "Run periodic task dispatcher."
     from django.conf import settings
     if settings.CELERY_ALWAYS_EAGER:
-        raise click.ClickException('Disable CELERY_ALWAYS_EAGER in your settings file to spawn workers.')
+        raise click.ClickException(
+            'Disable CELERY_ALWAYS_EAGER in your settings file to spawn workers.')
 
     from sentry.celery import app
     app.Beat(
diff --git a/src/sentry/runner/commands/start.py b/src/sentry/runner/commands/start.py
index 905edd84ae..f72cc0b63a 100644
--- a/src/sentry/runner/commands/start.py
+++ b/src/sentry/runner/commands/start.py
@@ -19,9 +19,14 @@ SERVICES = {
 
 @click.command()
 @click.option('--bind', '-b', default=None, help='Bind address.', metavar='ADDRESS')
-@click.option('--workers', '-w', default=0, help='The number of worker processes for handling requests.')
+@click.option(
+    '--workers',
+    '-w',
+    default=0,
+    help='The number of worker processes for handling requests.')
 @click.option('--upgrade', default=False, is_flag=True, help='Upgrade before starting.')
-@click.option('--noinput', default=False, is_flag=True, help='Do not prompt the user for input of any kind.')
+@click.option('--noinput', default=False, is_flag=True,
+              help='Do not prompt the user for input of any kind.')
 @click.argument('service', default='http', type=click.Choice(sorted(SERVICES.keys())))
 @configuration
 @click.pass_context
diff --git a/src/sentry/runner/commands/tsdb.py b/src/sentry/runner/commands/tsdb.py
index 6b872d8a55..373e37e785 100644
--- a/src/sentry/runner/commands/tsdb.py
+++ b/src/sentry/runner/commands/tsdb.py
@@ -74,7 +74,8 @@ def organizations(metrics, since, until):
 
     stdout = click.get_text_stream('stdout')
     stderr = click.get_text_stream('stderr')
-    aggregate = lambda series: sum(value for timestamp, value in series)
+
+    def aggregate(series): return sum(value for timestamp, value in series)
 
     metrics = OrderedDict((name, getattr(tsdb.models, name)) for name in metrics)
     if not metrics:
diff --git a/src/sentry/runner/commands/upgrade.py b/src/sentry/runner/commands/upgrade.py
index c204e7ff2b..d6cd8e60ca 100644
--- a/src/sentry/runner/commands/upgrade.py
+++ b/src/sentry/runner/commands/upgrade.py
@@ -39,8 +39,10 @@ def _upgrade(interactive, traceback, verbosity, repair):
 @click.command()
 @click.option('--verbosity', '-v', default=1, help='Verbosity level.')
 @click.option('--traceback', default=True, is_flag=True, help='Raise on exception.')
-@click.option('--noinput', default=False, is_flag=True, help='Do not prompt the user for input of any kind.')
-@click.option('--lock', default=False, is_flag=True, help='Hold a global lock and limit upgrade to one concurrent.')
+@click.option('--noinput', default=False, is_flag=True,
+              help='Do not prompt the user for input of any kind.')
+@click.option('--lock', default=False, is_flag=True,
+              help='Hold a global lock and limit upgrade to one concurrent.')
 @click.option('--no-repair', default=False, is_flag=True, help='Skip repair step.')
 @configuration
 @click.pass_context
diff --git a/src/sentry/runner/decorators.py b/src/sentry/runner/decorators.py
index 3e62c4e171..f8a45548fe 100644
--- a/src/sentry/runner/decorators.py
+++ b/src/sentry/runner/decorators.py
@@ -50,13 +50,13 @@ def log_options(default=None):
 
         @click.pass_context
         @click.option('--loglevel', '-l', default=default,
-            help='Global logging level. Use wisely.',
-            envvar='SENTRY_LOG_LEVEL',
-            type=CaseInsensitiveChoice(LOG_LEVELS))
+                      help='Global logging level. Use wisely.',
+                      envvar='SENTRY_LOG_LEVEL',
+                      type=CaseInsensitiveChoice(LOG_LEVELS))
         @click.option('--logformat', default=default,
-            help='Log line format.',
-            envvar='SENTRY_LOG_FORMAT',
-            type=CaseInsensitiveChoice(formats))
+                      help='Log line format.',
+                      envvar='SENTRY_LOG_FORMAT',
+                      type=CaseInsensitiveChoice(formats))
         def inner(ctx, loglevel=None, logformat=None, *args, **kwargs):
             if loglevel:
                 os.environ['SENTRY_LOG_LEVEL'] = loglevel
diff --git a/src/sentry/runner/importer.py b/src/sentry/runner/importer.py
index f88291f5fc..2930031549 100644
--- a/src/sentry/runner/importer.py
+++ b/src/sentry/runner/importer.py
@@ -66,7 +66,8 @@ class Importer(object):
 
         settings_mod = imp.new_module(self.name)
 
-        # Django doesn't play too nice without the config file living as a real file, so let's fake it.
+        # Django doesn't play too nice without the config file living as a real
+        # file, so let's fake it.
         settings_mod.__file__ = self.config_path
 
         # install the default settings for this app
@@ -125,7 +126,11 @@ def add_settings(mod, settings):
             continue
 
         setting_value = getattr(mod, setting)
-        if setting in ('INSTALLED_APPS', 'TEMPLATE_DIRS') and isinstance(setting_value, six.string_types):
+        if setting in (
+                'INSTALLED_APPS',
+                'TEMPLATE_DIRS') and isinstance(
+                setting_value,
+                six.string_types):
             setting_value = (setting_value,)  # In case the user forgot the comma.
 
         # Any setting that starts with EXTRA_ and matches a setting that is a list or tuple
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index 59067490e2..7abd2184f6 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -31,7 +31,9 @@ def register_plugins(settings):
             plugin = ep.load()
         except Exception:
             import traceback
-            click.echo("Failed to load plugin %r:\n%s" % (ep.name, traceback.format_exc()), err=True)
+            click.echo(
+                "Failed to load plugin %r:\n%s" %
+                (ep.name, traceback.format_exc()), err=True)
         else:
             plugins.register(plugin)
 
@@ -413,7 +415,8 @@ def apply_legacy_settings(settings):
 
     if hasattr(settings, 'SENTRY_REDIS_OPTIONS'):
         if 'redis.clusters' in settings.SENTRY_OPTIONS:
-            raise Exception("Cannot specify both SENTRY_OPTIONS['redis.clusters'] option and SENTRY_REDIS_OPTIONS setting.")
+            raise Exception(
+                "Cannot specify both SENTRY_OPTIONS['redis.clusters'] option and SENTRY_REDIS_OPTIONS setting.")
         else:
             warnings.warn(
                 DeprecatedSettingWarning(
@@ -449,7 +452,10 @@ def apply_legacy_settings(settings):
         settings.ALLOWED_HOSTS = ['*']
 
     if hasattr(settings, 'SENTRY_ALLOW_REGISTRATION'):
-        warnings.warn(DeprecatedSettingWarning('SENTRY_ALLOW_REGISTRATION', 'SENTRY_FEATURES["auth:register"]'))
+        warnings.warn(
+            DeprecatedSettingWarning(
+                'SENTRY_ALLOW_REGISTRATION',
+                'SENTRY_FEATURES["auth:register"]'))
         settings.SENTRY_FEATURES['auth:register'] = settings.SENTRY_ALLOW_REGISTRATION
 
     settings.DEFAULT_FROM_EMAIL = settings.SENTRY_OPTIONS.get(
@@ -461,7 +467,8 @@ def apply_legacy_settings(settings):
     # trigger the Installation Wizard, not abort startup.
     if not settings.SENTRY_OPTIONS.get('system.secret-key'):
         from .importer import ConfigurationError
-        raise ConfigurationError("`system.secret-key` MUST be set. Use 'sentry config generate-secret-key' to get one.")
+        raise ConfigurationError(
+            "`system.secret-key` MUST be set. Use 'sentry config generate-secret-key' to get one.")
 
 
 def skip_migration_if_applied(settings, app_name, table_name,
diff --git a/src/sentry/runner/settings.py b/src/sentry/runner/settings.py
index 383aa0a259..90aa672819 100644
--- a/src/sentry/runner/settings.py
+++ b/src/sentry/runner/settings.py
@@ -124,11 +124,15 @@ def configure(ctx, py, yaml, skip_service_validation=False):
         # directly to a file, in which case, this file must exist
         if not os.path.exists(py):
             if ctx:
-                raise click.ClickException("Configuration file does not exist. Use 'sentry init' to initialize the file.")
-            raise ValueError("Configuration file does not exist at '%s'" % click.format_filename(py))
+                raise click.ClickException(
+                    "Configuration file does not exist. Use 'sentry init' to initialize the file.")
+            raise ValueError(
+                "Configuration file does not exist at '%s'" %
+                click.format_filename(py))
     elif not os.path.exists(yaml) and not os.path.exists(py):
         if ctx:
-            raise click.ClickException("Configuration file does not exist. Use 'sentry init' to initialize the file.")
+            raise click.ClickException(
+                "Configuration file does not exist. Use 'sentry init' to initialize the file.")
         raise ValueError("Configuration file does not exist at '%s'" % click.format_filename(yaml))
 
     # Add autoreload for config.yml file if needed
diff --git a/src/sentry/services/http.py b/src/sentry/services/http.py
index 273527fd5a..a8418526d3 100644
--- a/src/sentry/services/http.py
+++ b/src/sentry/services/http.py
@@ -73,7 +73,9 @@ class SentryHTTPServer(Service):
         options.setdefault('disable-write-exception', True)
         options.setdefault('virtualenv', sys.prefix)
         options.setdefault('die-on-term', True)
-        options.setdefault('log-format', '%(addr) - %(user) [%(ltime)] "%(method) %(uri) %(proto)" %(status) %(size) "%(referer)" "%(uagent)"')
+        options.setdefault(
+            'log-format',
+            '%(addr) - %(user) [%(ltime)] "%(method) %(uri) %(proto)" %(status) %(size) "%(referer)" "%(uagent)"')
 
         options.setdefault('%s-socket' % options['protocol'], '%s:%s' % (host, port))
 
diff --git a/src/sentry/similarity.py b/src/sentry/similarity.py
index 43362a47d0..e888d9f285 100644
--- a/src/sentry/similarity.py
+++ b/src/sentry/similarity.py
@@ -91,7 +91,8 @@ class MinHashIndex(object):
 
         for idx, features in items:
             arguments.append(idx)
-            arguments.extend([','.join(map('{}'.format, band)) for band in self.get_signature(features)])
+            arguments.extend([','.join(map('{}'.format, band))
+                              for band in self.get_signature(features)])
 
         return index(
             self.cluster.get_local_client_for_key(scope),
@@ -274,11 +275,15 @@ def get_exception_frames(exception):
     try:
         frames = exception['stacktrace']['frames']
     except (TypeError, KeyError):
-        logger.info('Could not extract frames from exception, returning empty sequence.', exc_info=True)
+        logger.info(
+            'Could not extract frames from exception, returning empty sequence.',
+            exc_info=True)
         frames = []
     else:
         if not isinstance(frames, Sequence):
-            logger.info('Expected frames to be a sequence but got %r, returning empty sequence instead.', type(frames))
+            logger.info(
+                'Expected frames to be a sequence but got %r, returning empty sequence instead.',
+                type(frames))
             frames = []
 
     return frames
@@ -310,16 +315,26 @@ class ExceptionFeature(object):
         try:
             exceptions = event.data['sentry.interfaces.Exception']['values']
         except KeyError as error:
-            logger.info('Could not extract characteristic(s) from %r due to error: %r', event, error, exc_info=True)
+            logger.info(
+                'Could not extract characteristic(s) from %r due to error: %r',
+                event,
+                error,
+                exc_info=True)
             return
 
         for exception in exceptions:
             try:
                 yield self.function(exception)
             except InsufficientContext as error:
-                logger.debug('Could not extract characteristic(s) from exception in %r due to expected error: %r', event, error)
+                logger.debug(
+                    'Could not extract characteristic(s) from exception in %r due to expected error: %r',
+                    event,
+                    error)
             except Exception as error:
-                logger.exception('Could not extract characteristic(s) from exception in %r due to error: %r', event, error)
+                logger.exception(
+                    'Could not extract characteristic(s) from exception in %r due to error: %r',
+                    event,
+                    error)
 
 
 class MessageFeature(object):
@@ -330,13 +345,20 @@ class MessageFeature(object):
         try:
             message = event.data['sentry.interfaces.Message']
         except KeyError as error:
-            logger.info('Could not extract characteristic(s) from %r due to error: %r', event, error, exc_info=True)
+            logger.info(
+                'Could not extract characteristic(s) from %r due to error: %r',
+                event,
+                error,
+                exc_info=True)
             return
 
         try:
             yield self.function(message)
         except Exception as error:
-            logger.exception('Could not extract characteristic(s) from message of %r due to error: %r', event, error)
+            logger.exception(
+                'Could not extract characteristic(s) from message of %r due to error: %r',
+                event,
+                error)
 
 
 class FeatureSet(object):
@@ -408,7 +430,8 @@ class FeatureSet(object):
 
         unsafe_scopes = set(scopes.keys()) - set([self.__get_scope(destination)])
         if unsafe_scopes and not allow_unsafe:
-            raise ValueError('all groups must belong to same project if unsafe merges are not allowed')
+            raise ValueError(
+                'all groups must belong to same project if unsafe merges are not allowed')
 
         destination_scope = self.__get_scope(destination)
         destination_key = self.__get_key(destination)
diff --git a/src/sentry/status_checks/celery_app_version.py b/src/sentry/status_checks/celery_app_version.py
index 862c43b388..d5fd0e75d7 100644
--- a/src/sentry/status_checks/celery_app_version.py
+++ b/src/sentry/status_checks/celery_app_version.py
@@ -19,8 +19,9 @@ class CeleryAppVersionCheck(StatusCheck):
         if version == sentry.VERSION:
             return []
         return [
-            Problem("Celery workers are referencing a different version of Sentry ({version1} vs {version2})".format(
-                version1=sentry.VERSION,
-                version2=version,
-            )),
+            Problem(
+                "Celery workers are referencing a different version of Sentry ({version1} vs {version2})".format(
+                    version1=sentry.VERSION,
+                    version2=version,
+                )),
         ]
diff --git a/src/sentry/tasks/merge.py b/src/sentry/tasks/merge.py
index b8b9d42995..d21823c92e 100644
--- a/src/sentry/tasks/merge.py
+++ b/src/sentry/tasks/merge.py
@@ -102,7 +102,8 @@ def merge_group(from_object_id=None, to_object_id=None, transaction_id=None,
     for model in [tsdb.models.users_affected_by_group]:
         tsdb.merge_distinct_counts(model, new_group.id, [group.id])
 
-    for model in [tsdb.models.frequent_releases_by_group, tsdb.models.frequent_environments_by_group]:
+    for model in [tsdb.models.frequent_releases_by_group,
+                  tsdb.models.frequent_environments_by_group]:
         tsdb.merge_frequencies(model, new_group.id, [group.id])
 
     previous_group_id = group.id
diff --git a/src/sentry/tasks/reports.py b/src/sentry/tasks/reports.py
index 8bbb499c8c..abf5850a8c 100644
--- a/src/sentry/tasks/reports.py
+++ b/src/sentry/tasks/reports.py
@@ -737,9 +737,9 @@ def deliver_organization_user_report(timestamp, duration, organization_id, user_
 
     if not reports:
         logger.debug('Skipping report for %r to %r, no qualifying reports to deliver.',
-            organization,
-            user,
-        )
+                     organization,
+                     user,
+                     )
         return Skipped.NoReports
 
     message = build_message(
diff --git a/src/sentry/tasks/reprocessing.py b/src/sentry/tasks/reprocessing.py
index dc9d49b6f5..1b4887735f 100644
--- a/src/sentry/tasks/reprocessing.py
+++ b/src/sentry/tasks/reprocessing.py
@@ -34,7 +34,7 @@ def reprocess_events(project_id, **kwargs):
                     helper.insert_data_to_database(raw_event.data.data,
                                                    from_reprocessing=True)
                     create_reprocessing_report(project_id=project_id,
-                        event_id=raw_event.event_id)
+                                               event_id=raw_event.event_id)
                     raw_event.delete()
     except UnableToAcquireLock as error:
         logger.warning('reprocess_events.fail', extra={'error': error})
diff --git a/src/sentry/tasks/scheduler.py b/src/sentry/tasks/scheduler.py
index a058ce8975..a848a2b064 100644
--- a/src/sentry/tasks/scheduler.py
+++ b/src/sentry/tasks/scheduler.py
@@ -25,6 +25,6 @@ def enqueue_scheduled_jobs(**kwargs):
 
         for job in job_list:
             logger.debug('Sending scheduled job %s with payload %r',
-                        job.name, job.payload)
+                         job.name, job.payload)
             app.send_task(job.name, kwargs=job.payload)
             job.delete()
diff --git a/src/sentry/tasks/store.py b/src/sentry/tasks/store.py
index 0ec9630479..2b256abf74 100644
--- a/src/sentry/tasks/store.py
+++ b/src/sentry/tasks/store.py
@@ -55,7 +55,7 @@ def _do_preprocess_event(cache_key, data, start_time, event_id,
     if data is None:
         metrics.incr('events.failed', tags={'reason': 'cache', 'stage': 'pre'})
         error_logger.error('preprocess.failed.empty',
-            extra={'cache_key': cache_key})
+                           extra={'cache_key': cache_key})
         return
 
     project = data['project']
@@ -65,7 +65,7 @@ def _do_preprocess_event(cache_key, data, start_time, event_id,
 
     if should_process(data):
         process_event.delay(cache_key=cache_key, start_time=start_time,
-            event_id=event_id)
+                            event_id=event_id)
         return
 
     # If we get here, that means the event had no preprocessing needed to be done
@@ -73,7 +73,7 @@ def _do_preprocess_event(cache_key, data, start_time, event_id,
     if cache_key:
         data = None
     save_event.delay(cache_key=cache_key, data=data, start_time=start_time,
-        event_id=event_id)
+                     event_id=event_id)
 
 
 @instrumented_task(
@@ -107,7 +107,7 @@ def _do_process_event(cache_key, start_time, event_id):
     if data is None:
         metrics.incr('events.failed', tags={'reason': 'cache', 'stage': 'process'})
         error_logger.error('process.failed.empty',
-            extra={'cache_key': cache_key})
+                           extra={'cache_key': cache_key})
         return
 
     project = data['project']
@@ -145,7 +145,7 @@ def _do_process_event(cache_key, start_time, event_id):
         default_cache.set(cache_key, data, 3600)
 
     save_event.delay(cache_key=cache_key, data=None, start_time=start_time,
-        event_id=event_id)
+                     event_id=event_id)
 
 
 @instrumented_task(
@@ -171,7 +171,7 @@ def process_event_from_reprocessing(cache_key, start_time=None, event_id=None, *
 def delete_raw_event(project_id, event_id, allow_hint_clear=False):
     if event_id is None:
         error_logger.error('process.failed_delete_raw_event',
-            extra={'project_id': project_id})
+                           extra={'project_id': project_id})
         return
     from sentry.models import RawEvent, ReprocessingReport
     RawEvent.objects.filter(
diff --git a/src/sentry/tasks/unmerge.py b/src/sentry/tasks/unmerge.py
index df899cb55d..cbb3c193dc 100644
--- a/src/sentry/tasks/unmerge.py
+++ b/src/sentry/tasks/unmerge.py
@@ -496,7 +496,15 @@ def unlock_hashes(project_id, fingerprints):
 
 
 @instrumented_task(name='sentry.tasks.unmerge', queue='unmerge')
-def unmerge(project_id, source_id, destination_id, fingerprints, actor_id, cursor=None, batch_size=500, source_fields_reset=False):
+def unmerge(
+        project_id,
+        source_id,
+        destination_id,
+        fingerprints,
+        actor_id,
+        cursor=None,
+        batch_size=500,
+        source_fields_reset=False):
     # XXX: The queryset chunking logic below is awfully similar to
     # ``RangeQuerySetWrapper``. Ideally that could be refactored to be able to
     # be run without iteration by passing around a state object and we could
diff --git a/src/sentry/templatetags/sentry_activity.py b/src/sentry/templatetags/sentry_activity.py
index 667fa7d501..85f35b5cd2 100644
--- a/src/sentry/templatetags/sentry_activity.py
+++ b/src/sentry/templatetags/sentry_activity.py
@@ -67,13 +67,15 @@ def render_activity(item):
     if item.user:
         user = item.user
         name = user.name or user.email
-        output += '<span class="avatar"><img src="%s"></span> ' % (get_gravatar_url(user.email, size=20),)
+        output += '<span class="avatar"><img src="%s"></span> ' % (
+            get_gravatar_url(user.email, size=20),)
         output += '<strong>%s</strong> %s' % (escape(name), action_str)
     else:
         output += '<span class="avatar sentry"></span> '
         output += 'The system %s' % (action_str,)
 
-    output += ' <span class="sep">&mdash;</span> <span class="time">%s</span>' % (timesince(item.datetime),)
+    output += ' <span class="sep">&mdash;</span> <span class="time">%s</span>' % (
+        timesince(item.datetime),)
 
     if item.type == Activity.NOTE:
         output += linebreaks(urlize(escape(item.data['text'])))
diff --git a/src/sentry/templatetags/sentry_features.py b/src/sentry/templatetags/sentry_features.py
index 20753080ac..d3c533dd5e 100644
--- a/src/sentry/templatetags/sentry_features.py
+++ b/src/sentry/templatetags/sentry_features.py
@@ -11,7 +11,9 @@ register = template.Library()
 def feature(parser, token):
     bits = token.split_contents()
     if len(bits) < 2:
-        raise template.TemplateSyntaxError("%r tag requires an argument" % token.contents.split()[0])
+        raise template.TemplateSyntaxError(
+            "%r tag requires an argument" %
+            token.contents.split()[0])
 
     name = bits[1]
     params = bits[2:]
diff --git a/src/sentry/templatetags/sentry_plugins.py b/src/sentry/templatetags/sentry_plugins.py
index 08f69e2a8b..c20c2eeaac 100644
--- a/src/sentry/templatetags/sentry_plugins.py
+++ b/src/sentry/templatetags/sentry_plugins.py
@@ -89,7 +89,11 @@ def get_annotations(group, request=None):
 
     annotation_list = []
     for plugin in plugins.for_project(project, version=2):
-        for value in (safe_execute(plugin.get_annotations, group=group, _with_transaction=False) or ()):
+        for value in (
+            safe_execute(
+                plugin.get_annotations,
+                group=group,
+                _with_transaction=False) or ()):
             annotation = safe_execute(Annotation, _with_transaction=False, **value)
             if annotation:
                 annotation_list.append(annotation)
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 0c72c1eedc..f367bddbd8 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -428,7 +428,9 @@ class PluginTestCase(TestCase):
                 ep_path = ep.module_name
                 if ep_path == path:
                     return
-                self.fail('Found app in entry_points, but wrong class. Got %r, expected %r' % (ep_path, path))
+                self.fail(
+                    'Found app in entry_points, but wrong class. Got %r, expected %r' %
+                    (ep_path, path))
         self.fail('Missing app from entry_points: %r' % (name,))
 
     def assertPluginInstalled(self, name, plugin):
@@ -438,7 +440,9 @@ class PluginTestCase(TestCase):
                 ep_path = ep.module_name + ':' + '.'.join(ep.attrs)
                 if ep_path == path:
                     return
-                self.fail('Found plugin in entry_points, but wrong class. Got %r, expected %r' % (ep_path, path))
+                self.fail(
+                    'Found plugin in entry_points, but wrong class. Got %r, expected %r' %
+                    (ep_path, path))
         self.fail('Missing plugin from entry_points: %r' % (name,))
 
 
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 8fc0dc5b8c..94ade302dd 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -492,7 +492,10 @@ class Fixtures(object):
                 }
             }"""
 
-        return self.create_event(event_id=event_id, platform='javascript', data=json.loads(payload))
+        return self.create_event(
+            event_id=event_id,
+            platform='javascript',
+            data=json.loads(payload))
 
     def create_group(self, project=None, checksum=None, **kwargs):
         if checksum:
diff --git a/src/sentry/tsdb/dummy.py b/src/sentry/tsdb/dummy.py
index 348f47cb4d..13fecac996 100644
--- a/src/sentry/tsdb/dummy.py
+++ b/src/sentry/tsdb/dummy.py
@@ -14,6 +14,7 @@ class DummyTSDB(BaseTSDB):
     """
     A no-op time-series storage.
     """
+
     def incr(self, model, key, timestamp=None, count=1):
         pass
 
diff --git a/src/sentry/tsdb/inmemory.py b/src/sentry/tsdb/inmemory.py
index 5e55045a7a..dfac9c4d32 100644
--- a/src/sentry/tsdb/inmemory.py
+++ b/src/sentry/tsdb/inmemory.py
@@ -22,6 +22,7 @@ class InMemoryTSDB(BaseTSDB):
 
     This should not be used in production as it will leak memory.
     """
+
     def __init__(self, *args, **kwargs):
         super(InMemoryTSDB, self).__init__(*args, **kwargs)
         self.flush()
@@ -224,7 +225,9 @@ class InMemoryTSDB(BaseTSDB):
     def get_frequency_totals(self, model, items, start, end=None, rollup=None):
         results = {}
 
-        for key, series in six.iteritems(self.get_frequency_series(model, items, start, end, rollup)):
+        for key, series in six.iteritems(
+            self.get_frequency_series(
+                model, items, start, end, rollup)):
             result = results[key] = {}
             for timestamp, scores in series:
                 for member, score in scores.items():
diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index 34e8961fc7..29e46b83a7 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -332,7 +332,8 @@ class RedisTSDB(BaseTSDB):
                         ),
                     ))
 
-        return {key: [(timestamp, promise.value) for timestamp, promise in value] for key, value in six.iteritems(responses)}
+        return {key: [(timestamp, promise.value) for timestamp, promise in value]
+                for key, value in six.iteritems(responses)}
 
     def get_distinct_counts_totals(self, model, keys, start, end=None, rollup=None):
         """
@@ -656,7 +657,9 @@ class RedisTSDB(BaseTSDB):
 
         responses = {}
 
-        for key, series in six.iteritems(self.get_frequency_series(model, items, start, end, rollup)):
+        for key, series in six.iteritems(
+            self.get_frequency_series(
+                model, items, start, end, rollup)):
             response = responses[key] = {}
             for timestamp, results in series:
                 for member, value in results.items():
@@ -728,5 +731,6 @@ class RedisTSDB(BaseTSDB):
                     for model in models:
                         for key in keys:
                             c = client.target_key(key)
-                            for k in self.make_frequency_table_keys(model, rollup, to_timestamp(timestamp), key):
+                            for k in self.make_frequency_table_keys(
+                                    model, rollup, to_timestamp(timestamp), key):
                                 c.delete(k)
diff --git a/src/sentry/utils/auth.py b/src/sentry/utils/auth.py
index d14ffe8c0c..bbe5fbb77f 100644
--- a/src/sentry/utils/auth.py
+++ b/src/sentry/utils/auth.py
@@ -281,6 +281,7 @@ class EmailAuthBackend(ModelBackend):
 
     Supports authenticating via an email address or a username.
     """
+
     def authenticate(self, username=None, password=None):
         users = find_users(username)
         if users:
diff --git a/src/sentry/utils/cache.py b/src/sentry/utils/cache.py
index 7aebcef7da..d02a9c16f0 100644
--- a/src/sentry/utils/cache.py
+++ b/src/sentry/utils/cache.py
@@ -52,6 +52,7 @@ class cached_for_request(memoize):
     >>>     def func(self):
     >>>         return 'foo'
     """
+
     def _get_key(self, args, kwargs):
         return (self, tuple(args), tuple(kwargs.items()))
 
diff --git a/src/sentry/utils/compat/__init__.py b/src/sentry/utils/compat/__init__.py
index 7b82b25c29..45705e1a5c 100644
--- a/src/sentry/utils/compat/__init__.py
+++ b/src/sentry/utils/compat/__init__.py
@@ -7,7 +7,8 @@ try:
 except ImportError:
     import pickle  # NOQA
 
-_identity = lambda x: x
+
+def _identity(x): return x
 
 if six.PY2:
     # https://github.com/pallets/werkzeug/blob/master/werkzeug/_compat.py
diff --git a/src/sentry/utils/datastructures.py b/src/sentry/utils/datastructures.py
index 1374ce1dc5..a7b2a00022 100644
--- a/src/sentry/utils/datastructures.py
+++ b/src/sentry/utils/datastructures.py
@@ -15,6 +15,7 @@ class BidirectionalMapping(MutableMapping):
     when ``a`` is used as a key, and ``a`` can *also* be found when ``b`` is
     provided to ``get_key``.
     """
+
     def __init__(self, data):
         self.__data = data
         self.__inverse = {v: k for k, v in self.__data.items()}
diff --git a/src/sentry/utils/dates.py b/src/sentry/utils/dates.py
index 476db59e96..d1aa7b0ebc 100644
--- a/src/sentry/utils/dates.py
+++ b/src/sentry/utils/dates.py
@@ -72,7 +72,8 @@ def get_sql_date_trunc(col, db='default', grouper='hour'):
     engine = get_db_engine(db)
     # TODO: does extract work for sqlite?
     if engine.startswith('oracle'):
-        method = DATE_TRUNC_GROUPERS['oracle'].get(grouper, DATE_TRUNC_GROUPERS['default'][grouper])
+        method = DATE_TRUNC_GROUPERS['oracle'].get(
+            grouper, DATE_TRUNC_GROUPERS['default'][grouper])
         if '"' not in col:
             col = '"%s"' % col.upper()
     else:
@@ -113,7 +114,7 @@ def parse_timestamp(value):
     if len(value) == 2:
         try:
             rv = rv.replace(microsecond=int(value[1]
-                            .ljust(6, '0')[:6]))
+                                            .ljust(6, '0')[:6]))
         except ValueError:
             rv = None
     return rv.replace(tzinfo=pytz.utc)
diff --git a/src/sentry/utils/distutils/commands/base.py b/src/sentry/utils/distutils/commands/base.py
index b6db1f52d6..6eba6f7955 100644
--- a/src/sentry/utils/distutils/commands/base.py
+++ b/src/sentry/utils/distutils/commands/base.py
@@ -102,7 +102,7 @@ class BaseBuildCommand(Command):
             self.set_undefined_options('build',
                                        ('build_lib', 'build_lib'))
             log.debug('regular js build: build path is %s' %
-                     self.build_lib)
+                      self.build_lib)
 
         if self.work_path is None:
             self.work_path = self.get_root_path()
@@ -139,7 +139,8 @@ class BaseBuildCommand(Command):
 
         if node_version[2] is not None:
             log.info('using node ({0}) and yarn ({2})'.format(*node_version))
-            self._run_command(['yarn', 'install', '--production', '--pure-lockfile', '--ignore-optional'])
+            self._run_command(['yarn', 'install', '--production',
+                               '--pure-lockfile', '--ignore-optional'])
         else:
             log.info('using node ({0}) and npm ({1})'.format(*node_version))
             self._run_command(['npm', 'install', '--production', '--quiet'])
diff --git a/src/sentry/utils/email.py b/src/sentry/utils/email.py
index e397d22fdd..17a3e1eee7 100644
--- a/src/sentry/utils/email.py
+++ b/src/sentry/utils/email.py
@@ -67,6 +67,7 @@ class _CaseInsensitiveSigner(Signer):
     clients, coughAirmailcough, treat email addresses as being case-insensitive,
     and sends the value as all lowercase.
     """
+
     def signature(self, value):
         sig = super(_CaseInsensitiveSigner, self).signature(value)
         return sig.lower()
@@ -177,7 +178,9 @@ def get_email_addresses(user_ids, project=None):
                 pending.discard(user_id)
 
     if pending:
-        logger.warning('Could not resolve email addresses for user IDs in %r, discarding...', pending)
+        logger.warning(
+            'Could not resolve email addresses for user IDs in %r, discarding...',
+            pending)
 
     return results
 
@@ -462,6 +465,7 @@ class PreviewBackend(BaseEmailBackend):
 
     Probably only works on OS X.
     """
+
     def send_messages(self, email_messages):
         for message in email_messages:
             content = six.binary_type(message.message())
diff --git a/src/sentry/utils/encryption.py b/src/sentry/utils/encryption.py
index 83db44b6d0..4868a0ef9c 100644
--- a/src/sentry/utils/encryption.py
+++ b/src/sentry/utils/encryption.py
@@ -16,9 +16,11 @@ class EncryptionManager(object):
     def __init__(self, schemes=()):
         for key, value in schemes:
             if not isinstance(key, six.string_types):
-                raise ValueError('Encryption scheme type must be a string. Value was: {!r}'.format(value))
+                raise ValueError(
+                    'Encryption scheme type must be a string. Value was: {!r}'.format(value))
             if not hasattr(value, 'encrypt') or not hasattr(value, 'decrypt'):
-                raise ValueError('Encryption scheme value must have \'encrypt\' and \'decrypt\' callables. Value was: {!r}'.format(value))
+                raise ValueError(
+                    'Encryption scheme value must have \'encrypt\' and \'decrypt\' callables. Value was: {!r}'.format(value))
         self.schemes = OrderedDict(schemes)
         if not schemes:
             self.default_scheme = None
diff --git a/src/sentry/utils/hashlib.py b/src/sentry/utils/hashlib.py
index f336649659..67243a2155 100644
--- a/src/sentry/utils/hashlib.py
+++ b/src/sentry/utils/hashlib.py
@@ -13,5 +13,7 @@ from hashlib import sha1 as _sha1
 from django.utils.encoding import force_bytes
 
 
-md5_text = lambda x: _md5(force_bytes(x, errors='replace'))
-sha1_text = lambda x: _sha1(force_bytes(x, errors='replace'))
+def md5_text(x): return _md5(force_bytes(x, errors='replace'))
+
+
+def sha1_text(x): return _sha1(force_bytes(x, errors='replace'))
diff --git a/src/sentry/utils/http.py b/src/sentry/utils/http.py
index ed526c9aca..b28e91a9f3 100644
--- a/src/sentry/utils/http.py
+++ b/src/sentry/utils/http.py
@@ -225,7 +225,9 @@ def is_valid_ip(ip_address, project):
 
         # Check to make sure it's actually a range before
         try:
-            if '/' in addr and ipaddress.ip_address(six.text_type(ip_address)) in ipaddress.ip_network(six.text_type(addr), strict=False):
+            if '/' in addr and ipaddress.ip_address(
+                    six.text_type(ip_address)) in ipaddress.ip_network(
+                    six.text_type(addr), strict=False):
                 return False
         except ValueError:
             # Ignore invalid values here
diff --git a/src/sentry/utils/javascript.py b/src/sentry/utils/javascript.py
index 5f93eec41a..826e274c08 100644
--- a/src/sentry/utils/javascript.py
+++ b/src/sentry/utils/javascript.py
@@ -183,23 +183,43 @@ class GroupTransformer(Transformer):
         version = int(version.strftime('%s'))
 
         d = {
-            'id': six.text_type(obj.id),
-            'count': six.text_type(obj.times_seen),
-            'title': escape(obj.title),
-            'message': escape(obj.get_legacy_message()),
+            'id': six.text_type(
+                obj.id),
+            'count': six.text_type(
+                obj.times_seen),
+            'title': escape(
+                obj.title),
+            'message': escape(
+                obj.get_legacy_message()),
             'level': obj.level,
-            'levelName': escape(obj.get_level_display()),
-            'logger': escape(obj.logger),
-            'permalink': absolute_uri(reverse('sentry-group', args=[obj.organization.slug, obj.project.slug, obj.id])),
-            'firstSeen': self.localize_datetime(obj.first_seen, request=request),
-            'lastSeen': self.localize_datetime(obj.last_seen, request=request),
+            'levelName': escape(
+                obj.get_level_display()),
+            'logger': escape(
+                obj.logger),
+            'permalink': absolute_uri(
+                reverse(
+                    'sentry-group',
+                    args=[
+                        obj.organization.slug,
+                        obj.project.slug,
+                        obj.id])),
+            'firstSeen': self.localize_datetime(
+                obj.first_seen,
+                request=request),
+            'lastSeen': self.localize_datetime(
+                obj.last_seen,
+                request=request),
             'canResolve': request and request.user.is_authenticated(),
             'status': status_label,
             'isResolved': obj.get_status() == GroupStatus.RESOLVED,
             'isPublic': obj.is_public,
-            'score': getattr(obj, 'sort_value', 0),
+            'score': getattr(
+                obj,
+                'sort_value',
+                0),
             'project': {
-                'name': escape(obj.project.name),
+                'name': escape(
+                    obj.project.name),
                 'slug': obj.project.slug,
             },
             'version': version,
diff --git a/src/sentry/utils/locking/backends/__init__.py b/src/sentry/utils/locking/backends/__init__.py
index 4a3183a43f..9d5b8e1c9a 100644
--- a/src/sentry/utils/locking/backends/__init__.py
+++ b/src/sentry/utils/locking/backends/__init__.py
@@ -6,6 +6,7 @@ class LockBackend(object):
     Interface for providing lock behavior that is used by the
     ``sentry.utils.locking.Lock`` class.
     """
+
     def acquire(self, key, duration, routing_key=None):
         """
         Acquire a lock, represented by the given key for the given duration (in
diff --git a/src/sentry/utils/locking/lock.py b/src/sentry/utils/locking/lock.py
index 23ce507929..14dc255967 100644
--- a/src/sentry/utils/locking/lock.py
+++ b/src/sentry/utils/locking/lock.py
@@ -33,7 +33,10 @@ class Lock(object):
         try:
             self.backend.acquire(self.key, self.duration, self.routing_key)
         except Exception as error:
-            six.raise_from(UnableToAcquireLock('Unable to acquire {!r} due to error: {}'.format(self, error)), error)
+            six.raise_from(
+                UnableToAcquireLock(
+                    'Unable to acquire {!r} due to error: {}'.format(
+                        self, error)), error)
 
         @contextmanager
         def releaser():
diff --git a/src/sentry/utils/pytest/selenium.py b/src/sentry/utils/pytest/selenium.py
index 008ca3fe0d..dfe8fda703 100644
--- a/src/sentry/utils/pytest/selenium.py
+++ b/src/sentry/utils/pytest/selenium.py
@@ -18,7 +18,11 @@ from six.moves.urllib.parse import quote, urlparse
 # if we're not running in a PR, we kill the PERCY_TOKEN because its a push
 # to a branch, and we dont want percy comparing things
 # we do need to ensure its run on master so that changes get updated
-if os.environ.get('TRAVIS_PULL_REQUEST', 'false') == 'false' and os.environ.get('TRAVIS_BRANCH', 'master') != 'master':
+if os.environ.get(
+        'TRAVIS_PULL_REQUEST',
+        'false') == 'false' and os.environ.get(
+            'TRAVIS_BRANCH',
+        'master') != 'master':
     os.environ.setdefault('PERCY_ENABLE', '0')
 
 
@@ -122,13 +126,9 @@ class Browser(object):
         # selenium API because....
         # http://stackoverflow.com/questions/37103621/adding-cookies-working-with-firefox-webdriver-but-not-in-phantomjs
         # TODO(dcramer): this should be escaped, but idgaf
-        self.driver.execute_script("document.cookie = '{name}={value}; path={path}; domain={domain}; expires={expires}';\n".format(
-            name=name,
-            value=value,
-            expires=expires,
-            path=path,
-            domain=self.domain,
-        ))
+        self.driver.execute_script(
+            "document.cookie = '{name}={value}; path={path}; domain={domain}; expires={expires}';\n".format(
+                name=name, value=value, expires=expires, path=path, domain=self.domain, ))
 
 
 def pytest_addoption(parser):
diff --git a/src/sentry/utils/query.py b/src/sentry/utils/query.py
index 6f3f7edd6f..20f1fa3f98 100644
--- a/src/sentry/utils/query.py
+++ b/src/sentry/utils/query.py
@@ -29,6 +29,7 @@ class RangeQuerySetWrapper(object):
 
     Very efficient, but ORDER BY statements will not work.
     """
+
     def __init__(self, queryset, step=1000, limit=None, min_id=None,
                  order_by='pk', callbacks=()):
         # Support for slicing
@@ -151,6 +152,7 @@ class EverythingCollector(Collector):
     More or less identical to the default Django collector except we always
     return relations (even when they shouldn't matter).
     """
+
     def collect(self, objs, source=None, nullable=False, collect_related=True,
                 source_attr=None, reverse_dependency=False):
         new_objs = self.add(objs)
diff --git a/src/sentry/utils/raven.py b/src/sentry/utils/raven.py
index ce09155df1..427d46bf99 100644
--- a/src/sentry/utils/raven.py
+++ b/src/sentry/utils/raven.py
@@ -114,7 +114,9 @@ class SentryInternalClient(DjangoClient):
             message = kwargs.get('message')
             if not message:
                 msg_interface = kwargs.get('sentry.interface.Message', {})
-                message = msg_interface.get('formatted', msg_interface.get('message', 'unknown error'))
+                message = msg_interface.get(
+                    'formatted', msg_interface.get(
+                        'message', 'unknown error'))
             self.error_logger.error(
                 'Unable to record event: %s\nEvent was: %r', e,
                 message, exc_info=True)
diff --git a/src/sentry/utils/redis.py b/src/sentry/utils/redis.py
index 2400eca994..072e77193a 100644
--- a/src/sentry/utils/redis.py
+++ b/src/sentry/utils/redis.py
@@ -89,7 +89,8 @@ def get_cluster_from_options(setting, options, cluster_manager=clusters):
     cluster_constructor_option_names = frozenset(('hosts',))
 
     options = options.copy()
-    cluster_options = {key: options.pop(key) for key in set(options.keys()).intersection(cluster_constructor_option_names)}
+    cluster_options = {key: options.pop(key) for key in set(
+        options.keys()).intersection(cluster_constructor_option_names)}
     if cluster_options:
         if cluster_option_name in options:
             raise InvalidConfiguration(
diff --git a/src/sentry/utils/retries.py b/src/sentry/utils/retries.py
index f7dbeaa7cc..c772f02e68 100644
--- a/src/sentry/utils/retries.py
+++ b/src/sentry/utils/retries.py
@@ -39,10 +39,11 @@ class TimedRetryPolicy(RetryPolicy):
     The ``delay`` function accepts one argument, a number which represents the
     number of this attempt (starting at 1.)
     """
+
     def __init__(self, timeout, delay=None, exceptions=(Exception,)):
         if delay is None:
             # 100ms +/- 50ms of randomized jitter
-            delay = lambda i: 0.1 + ((random.random() - 0.5) / 10)
+            def delay(i): return 0.1 + ((random.random() - 0.5) / 10)
 
         self.timeout = timeout
         self.delay = delay
@@ -59,9 +60,8 @@ class TimedRetryPolicy(RetryPolicy):
                 now = self.clock.time()
                 if (now + delay) > (start + self.timeout):
                     raise RetryException(
-                        'Could not successfully execute %r within %.3f seconds (%s attempts.)' % (function, now - start, i),
-                        error,
-                    )
+                        'Could not successfully execute %r within %.3f seconds (%s attempts.)' %
+                        (function, now - start, i), error, )
                 else:
                     logger.debug(
                         'Failed to execute %r due to %r on attempt #%s, retrying in %s seconds...',
diff --git a/src/sentry/utils/services.py b/src/sentry/utils/services.py
index 2343da6106..e8ef74738d 100644
--- a/src/sentry/utils/services.py
+++ b/src/sentry/utils/services.py
@@ -39,6 +39,7 @@ class LazyServiceWrapper(LazyObject):
     >>> service = LazyServiceWrapper(...)
     >>> service.expose(locals())
     """
+
     def __init__(self, backend_base, backend_path, options, dangerous=()):
         super(LazyServiceWrapper, self).__init__()
         self.__dict__.update({
diff --git a/src/sentry/utils/settings.py b/src/sentry/utils/settings.py
index e570d8fcaa..3af9f72e2a 100644
--- a/src/sentry/utils/settings.py
+++ b/src/sentry/utils/settings.py
@@ -66,7 +66,8 @@ def validate_dependency(settings, dependency_type, dependency, package):
     try:
         import_string(package)
     except ImportError:
-        msg = ConfigurationError.get_error_message("%s %s" % (dependency_type, dependency), package)
+        msg = ConfigurationError.get_error_message(
+            "%s %s" % (dependency_type, dependency), package)
         reraise_as(ConfigurationError(msg))
 
 
@@ -78,6 +79,4 @@ class ConfigurationError(ValueError):
     @classmethod
     def get_error_message(cls, dependency, package):
         return """Python could not find %(package)s in your current environment (required by %(dependency)s). If you have it installed, maybe you are using the wrong python binary to run sentry?""" % {
-            "dependency": dependency,
-            "package": package
-        }
+            "dependency": dependency, "package": package}
diff --git a/src/sentry/utils/sms.py b/src/sentry/utils/sms.py
index a989862677..7047ecb6a0 100644
--- a/src/sentry/utils/sms.py
+++ b/src/sentry/utils/sms.py
@@ -24,7 +24,7 @@ def send_sms(body, to, from_=None):
     url = 'https://api.twilio.com/2010-04-01/Accounts/%s/Messages.json' % \
         quote(account)
     rv = requests.post(url, auth=(account,
-                             options.get('sms.twilio-token')), data={
+                                  options.get('sms.twilio-token')), data={
         'To': to,
         'From': options.get('sms.twilio-number'),
         'Body': body,
diff --git a/src/sentry/utils/strings.py b/src/sentry/utils/strings.py
index 0c23de5258..e7e9683fc3 100644
--- a/src/sentry/utils/strings.py
+++ b/src/sentry/utils/strings.py
@@ -191,9 +191,9 @@ valid_dot_atom_characters = frozenset(
 def is_valid_dot_atom(value):
     """Validate an input string as an RFC 2822 dot-atom-text value."""
     return (isinstance(value, six.string_types)  # must be a string type
-        and not value[0] == '.'
-        and not value[-1] == '.'  # cannot start or end with a dot
-        and set(value).issubset(valid_dot_atom_characters))  # can only contain valid characters
+            and not value[0] == '.'
+            and not value[-1] == '.'  # cannot start or end with a dot
+            and set(value).issubset(valid_dot_atom_characters))  # can only contain valid characters
 
 
 def count_sprintf_parameters(string):
diff --git a/src/sentry/utils/warnings.py b/src/sentry/utils/warnings.py
index 876e061c27..7c617eb8b3 100644
--- a/src/sentry/utils/warnings.py
+++ b/src/sentry/utils/warnings.py
@@ -44,6 +44,7 @@ class WarningManager(object):
     """
     Transforms warnings into a standard form and invokes handlers.
     """
+
     def __init__(self, handlers, default_category=Warning):
         self.__handlers = handlers
         self.__default_category = default_category
@@ -72,6 +73,7 @@ class WarningSet(collections.Set):
     """
     Add-only set structure for storing unique warnings.
     """
+
     def __init__(self):
         self.__warnings = {}
 
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index f23d5d11c8..db0357c69f 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -77,7 +77,10 @@ class APIView(BaseView):
         auth = helper.auth_from_request(request)
 
         if auth.version not in PROTOCOL_VERSIONS:
-            raise APIError('Client using unsupported server protocol version (%r)' % six.text_type(auth.version or ''))
+            raise APIError(
+                'Client using unsupported server protocol version (%r)' %
+                six.text_type(
+                    auth.version or ''))
 
         if not auth.client:
             raise APIError("Client did not send 'client' identifier")
@@ -214,7 +217,8 @@ class APIView(BaseView):
                     # un-authenticated CORS checks for POST, we basially
                     # are obsoleting our need for a secret key entirely.
                     if origin is None and request.method != 'GET':
-                        raise APIForbidden('Missing required attribute in authentication header: sentry_secret')
+                        raise APIForbidden(
+                            'Missing required attribute in authentication header: sentry_secret')
 
                     if not is_valid_origin(origin, project):
                         raise APIForbidden('Missing required Origin or Referer header')
@@ -282,6 +286,7 @@ class StoreView(APIView):
        the user be authenticated, and a project_id be sent in the GET variables.
 
     """
+
     def post(self, request, **kwargs):
         try:
             data = request.body
diff --git a/src/sentry/web/forms/__init__.py b/src/sentry/web/forms/__init__.py
index 2749611597..776e428e06 100644
--- a/src/sentry/web/forms/__init__.py
+++ b/src/sentry/web/forms/__init__.py
@@ -20,8 +20,8 @@ class BaseUserForm(forms.ModelForm):
 
 
 class NewUserForm(BaseUserForm):
-    send_welcome_mail = forms.BooleanField(required=False,
-        help_text=_("Send this user a welcome email which will contain their generated password."))
+    send_welcome_mail = forms.BooleanField(required=False, help_text=_(
+        "Send this user a welcome email which will contain their generated password."))
 
     class Meta:
         fields = ('name', 'username', 'email')
@@ -29,11 +29,12 @@ class NewUserForm(BaseUserForm):
 
 
 class ChangeUserForm(BaseUserForm):
-    is_staff = forms.BooleanField(required=False, label=_('Admin'),
-        help_text=_("Designates whether this user can perform administrative functions."))
-    is_superuser = forms.BooleanField(required=False, label=_('Superuser'),
-        help_text=_('Designates whether this user has all permissions without '
-                    'explicitly assigning them.'))
+    is_staff = forms.BooleanField(required=False, label=_('Admin'), help_text=_(
+        "Designates whether this user can perform administrative functions."))
+    is_superuser = forms.BooleanField(
+        required=False, label=_('Superuser'), help_text=_(
+            'Designates whether this user has all permissions without '
+            'explicitly assigning them.'))
 
     class Meta:
         fields = ('name', 'username', 'email', 'is_active', 'is_staff',
@@ -64,7 +65,11 @@ class TestEmailForm(forms.Form):
 
 
 class NewNoteForm(forms.Form):
-    text = forms.CharField(widget=forms.Textarea(attrs={'rows': '1', 'placeholder': 'Type a note and press enter...'}))
+    text = forms.CharField(
+        widget=forms.Textarea(
+            attrs={
+                'rows': '1',
+                'placeholder': 'Type a note and press enter...'}))
 
     def save(self, group, user, event=None):
         activity = Activity.objects.create(
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 7198b4a331..39947f2bef 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -49,12 +49,12 @@ class AuthenticationForm(forms.Form):
     username = forms.CharField(
         label=_('Account'), max_length=128, widget=forms.TextInput(
             attrs={'placeholder': _('username or email'),
-        }),
+                   }),
     )
     password = forms.CharField(
         label=_('Password'), widget=forms.PasswordInput(
             attrs={'placeholder': _('password'),
-        }),
+                   }),
     )
 
     error_messages = {
@@ -190,7 +190,8 @@ class RegistrationForm(forms.ModelForm):
         if not value:
             return
         if User.objects.filter(username__iexact=value).exists():
-            raise forms.ValidationError(_('An account is already registered with that email address.'))
+            raise forms.ValidationError(
+                _('An account is already registered with that email address.'))
         return value.lower()
 
     def clean_password(self):
@@ -223,10 +224,12 @@ class RecoverPasswordForm(forms.Form):
 
         users = [u for u in users if not u.is_managed]
         if not users:
-            raise forms.ValidationError(_("The account you are trying to recover is managed and does not support password recovery."))
+            raise forms.ValidationError(
+                _("The account you are trying to recover is managed and does not support password recovery."))
 
         if len(users) > 1:
-            raise forms.ValidationError(_("Multiple accounts were found matching this email address."))
+            raise forms.ValidationError(
+                _("Multiple accounts were found matching this email address."))
         return users[0]
 
 
@@ -268,7 +271,8 @@ class EmailForm(forms.Form):
         if value and not self.user.check_password(value):
             raise forms.ValidationError(_('The password you entered is not correct.'))
         elif not value:
-            raise forms.ValidationError(_('You must confirm your current password to make changes.'))
+            raise forms.ValidationError(
+                _('You must confirm your current password to make changes.'))
         return value
 
 
@@ -321,7 +325,7 @@ class AccountSettingsForm(forms.Form):
 
     def _clean_managed_field(self, field):
         if self.user.is_managed and (field == 'username' or
-                field in settings.SENTRY_MANAGED_USER_FIELDS):
+                                     field in settings.SENTRY_MANAGED_USER_FIELDS):
             return getattr(self.user, field)
         return self.cleaned_data[field]
 
@@ -329,7 +333,8 @@ class AccountSettingsForm(forms.Form):
         value = self._clean_managed_field('email').lower()
         if self.user.email.lower() == value:
             return value
-        if User.objects.filter(Q(email__iexact=value) | Q(username__iexact=value)).exclude(id=self.user.id).exists():
+        if User.objects.filter(Q(email__iexact=value) | Q(
+                username__iexact=value)).exclude(id=self.user.id).exists():
             raise forms.ValidationError(
                 _("There was an error adding %s: that email is already in use")
                 % self.cleaned_data['email']
@@ -642,7 +647,7 @@ class ProjectEmailOptionsForm(forms.Form):
     alert = forms.BooleanField(required=False)
     workflow = forms.BooleanField(required=False)
     email = forms.ChoiceField(label="", choices=(), required=False,
-        widget=forms.Select())
+                              widget=forms.Select())
 
     def __init__(self, project, user, *args, **kwargs):
         self.project = project
@@ -700,7 +705,7 @@ class TwoFactorForm(forms.Form):
         label=_('One-time password'), max_length=20, widget=forms.TextInput(
             attrs={'placeholder': _('Code from authenticator'),
                    'autofocus': True,
-        }),
+                   }),
     )
 
 
@@ -726,5 +731,6 @@ class ConfirmPasswordForm(forms.Form):
         if value and not self.user.check_password(value):
             raise forms.ValidationError(_('The password you entered is not correct.'))
         elif not value:
-            raise forms.ValidationError(_('You must confirm your current password to make changes.'))
+            raise forms.ValidationError(
+                _('You must confirm your current password to make changes.'))
         return value
diff --git a/src/sentry/web/forms/add_project.py b/src/sentry/web/forms/add_project.py
index 34ba39a724..3820db881d 100644
--- a/src/sentry/web/forms/add_project.py
+++ b/src/sentry/web/forms/add_project.py
@@ -13,11 +13,11 @@ BLANK_CHOICE = [("", "")]
 
 class AddProjectForm(forms.ModelForm):
     name = forms.CharField(label=_('Name'), max_length=64,
-        widget=forms.TextInput(attrs={
-            'placeholder': _('i.e. API, Frontend, My Application Name'),
-        }),
-        help_text=_('Using the repository name generally works well.'),
-    )
+                           widget=forms.TextInput(attrs={
+                               'placeholder': _('i.e. API, Frontend, My Application Name'),
+                           }),
+                           help_text=_('Using the repository name generally works well.'),
+                           )
 
     class Meta:
         fields = ('name',)
diff --git a/src/sentry/web/forms/add_team.py b/src/sentry/web/forms/add_team.py
index c27c3120d9..fce251d5ec 100644
--- a/src/sentry/web/forms/add_team.py
+++ b/src/sentry/web/forms/add_team.py
@@ -10,11 +10,14 @@ from sentry.models import (
 
 
 class AddTeamForm(forms.ModelForm):
-    name = forms.CharField(label=_('Name'), max_length=200,
-        widget=forms.TextInput(attrs={
-            'placeholder': _('E.g. Operations, Web, Desktop, ...'),
-            'required': '',
-        }),
+    name = forms.CharField(
+        label=_('Name'),
+        max_length=200,
+        widget=forms.TextInput(
+            attrs={
+                'placeholder': _('E.g. Operations, Web, Desktop, ...'),
+                'required': '',
+            }),
         help_text='The team name has no significant impact and can be changed later.',
     )
 
diff --git a/src/sentry/web/forms/fields.py b/src/sentry/web/forms/fields.py
index 466109dc3d..6d0b1f322f 100644
--- a/src/sentry/web/forms/fields.py
+++ b/src/sentry/web/forms/fields.py
@@ -54,8 +54,10 @@ class RadioFieldRenderer(RadioFieldRenderer):
     we didn't have to create this stupid code, but Django widgets are not
     flexible.
     """
+
     def render(self):
-        return mark_safe(u'\n<div class="inputs-list">%s</div>\n' % u'\n'.join([force_text(w) for w in self]))
+        return mark_safe(u'\n<div class="inputs-list">%s</div>\n' %
+                         u'\n'.join([force_text(w) for w in self]))
 
 
 class UserField(CharField):
diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index 8320479a2a..b576d1ebd3 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -30,7 +30,8 @@ class DigestSettingsForm(forms.Form):
     def clean(self):
         cleaned = super(DigestSettingsForm, self).clean()
         if cleaned['minimum_delay'] > cleaned['maximum_delay']:
-            raise forms.ValidationError(_('Maximum delivery frequency must be equal to or greater than the minimum delivery frequency.'))
+            raise forms.ValidationError(
+                _('Maximum delivery frequency must be equal to or greater than the minimum delivery frequency.'))
         return cleaned
 
 
diff --git a/src/sentry/web/frontend/accept_organization_invite.py b/src/sentry/web/frontend/accept_organization_invite.py
index db665b3ba3..5ae9c14ec0 100644
--- a/src/sentry/web/frontend/accept_organization_invite.py
+++ b/src/sentry/web/frontend/accept_organization_invite.py
@@ -101,7 +101,9 @@ class AcceptOrganizationInviteView(BaseView):
 
         form = self.get_form(request)
         if form.is_valid():
-            if OrganizationMember.objects.filter(organization=organization, user=request.user).exists():
+            if OrganizationMember.objects.filter(
+                    organization=organization,
+                    user=request.user).exists():
                 messages.add_message(
                     request, messages.SUCCESS,
                     _('You are already a member of the %r organization.') % (
diff --git a/src/sentry/web/frontend/account_notification.py b/src/sentry/web/frontend/account_notification.py
index e693961caf..d7e4cb479f 100644
--- a/src/sentry/web/frontend/account_notification.py
+++ b/src/sentry/web/frontend/account_notification.py
@@ -74,8 +74,13 @@ class AccountNotificationView(BaseView):
         ext_forms = []
         for plugin in plugins.all():
             for form in safe_execute(plugin.get_notification_forms, _with_transaction=False) or ():
-                form = safe_execute(form, plugin, request.user, request.POST or None, prefix=plugin.slug,
-                                    _with_transaction=False)
+                form = safe_execute(
+                    form,
+                    plugin,
+                    request.user,
+                    request.POST or None,
+                    prefix=plugin.slug,
+                    _with_transaction=False)
                 if not form:
                     continue
                 ext_forms.append(form)
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 785a6e92af..c0a8ea8f6c 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -491,11 +491,12 @@ def show_emails(request):
     if 'primary' in request.POST:
         new_primary = request.POST['new_primary_email'].lower()
 
-        if User.objects.filter(Q(email__iexact=new_primary) | Q(username__iexact=new_primary)).exclude(id=user.id).exists():
+        if User.objects.filter(Q(email__iexact=new_primary) | Q(
+                username__iexact=new_primary)).exclude(id=user.id).exists():
             messages.add_message(request,
-                messages.ERROR,
-                _("That email is already in use for another user")
-            )
+                                 messages.ERROR,
+                                 _("That email is already in use for another user")
+                                 )
 
         elif new_primary != user.email:
 
@@ -531,7 +532,8 @@ def show_emails(request):
         alternative_email = email_form.cleaned_data['alt_email'].lower()
 
         # check if this alternative email already exists for user
-        if alternative_email and not UserEmail.objects.filter(user=user, email__iexact=alternative_email):
+        if alternative_email and not UserEmail.objects.filter(
+                user=user, email__iexact=alternative_email):
             # create alternative email for user
             try:
                 with transaction.atomic():
diff --git a/src/sentry/web/frontend/admin.py b/src/sentry/web/frontend/admin.py
index 033d643694..79f3e0d20f 100644
--- a/src/sentry/web/frontend/admin.py
+++ b/src/sentry/web/frontend/admin.py
@@ -223,14 +223,14 @@ def status_warnings(request):
 
     sort_by_message = functools.partial(sorted, key=six.binary_type)
 
-    return render_to_response(
-        'sentry/admin/status/warnings.html',
-        {
-            'groups': sorted([(groupings[key], sort_by_message(values)) for key, values in groups.items()]),
-            'warnings': sort_by_message(warnings),
-        },
-        request,
-    )
+    return render_to_response('sentry/admin/status/warnings.html',
+                              {'groups': sorted([(groupings[key],
+                                                  sort_by_message(values)) for key,
+                                                 values in groups.items()]),
+                                  'warnings': sort_by_message(warnings),
+                               },
+                              request,
+                              )
 
 
 @requires_admin
diff --git a/src/sentry/web/frontend/auth_close.py b/src/sentry/web/frontend/auth_close.py
index 2d8533b661..42bb950da7 100644
--- a/src/sentry/web/frontend/auth_close.py
+++ b/src/sentry/web/frontend/auth_close.py
@@ -9,8 +9,9 @@ class AuthCloseView(BaseView):
     """This is a view to handle when sentry log in has been opened from
     another window. This view loads an html page with a script that sends a message
     back to the window opener and closes the window"""
+
     def handle(self, request):
         logged_in = request.user.is_authenticated()
 
         return render_to_response('sentry/auth_close.html',
-            {'logged_in': logged_in})
+                                  {'logged_in': logged_in})
diff --git a/src/sentry/web/frontend/auth_login.py b/src/sentry/web/frontend/auth_login.py
index 6420f179aa..dcf9be1da4 100644
--- a/src/sentry/web/frontend/auth_login.py
+++ b/src/sentry/web/frontend/auth_login.py
@@ -90,13 +90,16 @@ class AuthLoginView(BaseView):
             from sentry.app import ratelimiter
             from sentry.utils.hashlib import md5_text
 
-            login_attempt = op == 'login' and request.POST.get('username') and request.POST.get('password')
+            login_attempt = op == 'login' and request.POST.get(
+                'username') and request.POST.get('password')
 
             if login_attempt and ratelimiter.is_limited(
-                u'auth:login:username:{}'.format(md5_text(request.POST['username'].lower()).hexdigest()),
+                u'auth:login:username:{}'.format(
+                    md5_text(request.POST['username'].lower()).hexdigest()),
                 limit=10, window=60,  # 10 per minute should be enough for anyone
             ):
-                login_form.errors['__all__'] = [u'You have made too many login attempts. Please try again later.']
+                login_form.errors['__all__'] = [
+                    u'You have made too many login attempts. Please try again later.']
             elif login_form.is_valid():
                 user = login_form.get_user()
 
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 3654edde59..55993730b8 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -64,7 +64,7 @@ class OrganizationMixin(object):
                         raise Organization.DoesNotExist
                 except Organization.DoesNotExist:
                     logger.info('Active organization [%s] not found',
-                        organization_slug)
+                                organization_slug)
 
         if active_organization is None:
             organizations = Organization.objects.get_for_user(
@@ -79,7 +79,7 @@ class OrganizationMixin(object):
                 )
             except StopIteration:
                 logger.info('Active organization [%s] not found in scope',
-                    organization_slug)
+                            organization_slug)
                 if is_implicit:
                     del request.session['activeorg']
                 active_organization = None
@@ -309,7 +309,7 @@ class OrganizationView(BaseView):
                 return False
         if self.required_scope and not request.access.has_scope(self.required_scope):
             logger.info('User %s does not have %s permission to access organization %s',
-                request.user, self.required_scope, organization)
+                        request.user, self.required_scope, organization)
             return False
         return True
 
@@ -410,6 +410,7 @@ class TeamView(OrganizationView):
     - organization
     - team
     """
+
     def get_context_data(self, request, organization, team, **kwargs):
         context = super(TeamView, self).get_context_data(request, organization)
         context['team'] = team
@@ -424,11 +425,11 @@ class TeamView(OrganizationView):
         if self.required_scope:
             if not request.access.has_team_scope(team, self.required_scope):
                 logger.info('User %s does not have %s permission to access team %s',
-                    request.user, self.required_scope, team)
+                            request.user, self.required_scope, team)
                 return False
         elif not request.access.has_team(team):
             logger.info('User %s does not have access to team %s',
-                request.user, team)
+                        request.user, team)
             return False
         return True
 
@@ -464,6 +465,7 @@ class ProjectView(TeamView):
     - team
     - project
     """
+
     def get_context_data(self, request, organization, team, project, **kwargs):
         context = super(ProjectView, self).get_context_data(request, organization, team)
         context['project'] = project
@@ -481,11 +483,11 @@ class ProjectView(TeamView):
         if self.required_scope:
             if not request.access.has_team_scope(team, self.required_scope):
                 logger.info('User %s does not have %s permission to access project %s',
-                    request.user, self.required_scope, project)
+                            request.user, self.required_scope, project)
                 return False
         elif not request.access.has_team(team):
             logger.info('User %s does not have access to project %s',
-                request.user, project)
+                        request.user, project)
             return False
         return True
 
diff --git a/src/sentry/web/frontend/create_organization_member.py b/src/sentry/web/frontend/create_organization_member.py
index d340a86616..4c8cd5aa65 100644
--- a/src/sentry/web/frontend/create_organization_member.py
+++ b/src/sentry/web/frontend/create_organization_member.py
@@ -59,13 +59,16 @@ class CreateOrganizationMemberView(OrganizationView):
 
             if created:
                 messages.add_message(request, messages.SUCCESS,
-                    _('The organization member %s was added.') % user_display)
+                                     _('The organization member %s was added.') % user_display)
 
                 member_invited.send(member=om, user=request.user, sender=self)
 
             else:
-                messages.add_message(request, messages.INFO,
-                    _('The organization member %s already exists.') % user_display)
+                messages.add_message(
+                    request,
+                    messages.INFO,
+                    _('The organization member %s already exists.') %
+                    user_display)
 
             redirect = reverse('sentry-organization-members', args=[organization.slug])
 
diff --git a/src/sentry/web/frontend/debug/debug_new_processing_issues_email.py b/src/sentry/web/frontend/debug/debug_new_processing_issues_email.py
index efd51fedec..c372b57aba 100644
--- a/src/sentry/web/frontend/debug/debug_new_processing_issues_email.py
+++ b/src/sentry/web/frontend/debug/debug_new_processing_issues_email.py
@@ -35,35 +35,29 @@ class DebugNewProcessingIssuesEmailView(View):
             name='My Project',
         )
 
-        return MailPreview(
-            html_template='sentry/emails/activity/new_processing_issues.html',
-            text_template='sentry/emails/activity/new_processing_issues.txt',
-            context={
-                'project': project,
-                'reason': GroupSubscriptionReason.descriptions[
-                    GroupSubscriptionReason.processing_issue
-                ],
-                'issues': summarize_issues([
-                    {'data': {'image_arch': 'arm64',
-                              'image_path': '/var/containers/Bundle/Application/FB14D416-DE4E-4224-9789-6B88E9C42601/CrashProbeiOS.app/CrashProbeiOS',
-                              'image_uuid': 'a2df1794-e0c7-371c-baa4-93eac340a78a'},
-                     'object': 'dsym:a2df1794-e0c7-371c-baa4-93eac340a78a',
-                     'scope': 'native',
-                     'type': 'native_missing_dsym'},
-                    {'data': {'image_arch': 'arm64',
-                              'image_path': '/var/containers/Bundle/Application/FB14D416-DE4E-4224-9789-6B88E9C42601/CrashProbeiOS.app/libCrashProbeiOS',
-                              'image_uuid': '12dc1b4c-a01b-463f-ae88-5cf0c31ae680'},
-                     'object': 'dsym:12dc1b4c-a01b-463f-ae88-5cf0c31ae680',
-                     'scope': 'native',
-                     'type': 'native_bad_dsym'},
-                ]),
-                'reprocessing_active': self.reprocessing_active,
-                'info_url': absolute_uri('/{}/{}/settings/processing-issues/'.format(
-                    org.slug,
-                    project.slug,
-                )),
-            },
-        ).render(request)
+        return MailPreview(html_template='sentry/emails/activity/new_processing_issues.html',
+                           text_template='sentry/emails/activity/new_processing_issues.txt',
+                           context={'project': project,
+                                    'reason': GroupSubscriptionReason.descriptions[GroupSubscriptionReason.processing_issue],
+                                    'issues': summarize_issues([{'data': {'image_arch': 'arm64',
+                                                                          'image_path': '/var/containers/Bundle/Application/FB14D416-DE4E-4224-9789-6B88E9C42601/CrashProbeiOS.app/CrashProbeiOS',
+                                                                          'image_uuid': 'a2df1794-e0c7-371c-baa4-93eac340a78a'},
+                                                                 'object': 'dsym:a2df1794-e0c7-371c-baa4-93eac340a78a',
+                                                                 'scope': 'native',
+                                                                 'type': 'native_missing_dsym'},
+                                                                {'data': {'image_arch': 'arm64',
+                                                                          'image_path': '/var/containers/Bundle/Application/FB14D416-DE4E-4224-9789-6B88E9C42601/CrashProbeiOS.app/libCrashProbeiOS',
+                                                                          'image_uuid': '12dc1b4c-a01b-463f-ae88-5cf0c31ae680'},
+                                                                 'object': 'dsym:12dc1b4c-a01b-463f-ae88-5cf0c31ae680',
+                                                                 'scope': 'native',
+                                                                 'type': 'native_bad_dsym'},
+                                                                ]),
+                                    'reprocessing_active': self.reprocessing_active,
+                                    'info_url': absolute_uri('/{}/{}/settings/processing-issues/'.format(org.slug,
+                                                                                                         project.slug,
+                                                                                                         )),
+                                    },
+                           ).render(request)
 
 
 class DebugNewProcessingIssuesNoReprocessingEmailView(DebugNewProcessingIssuesEmailView):
diff --git a/src/sentry/web/frontend/debug/debug_oauth_authorize.py b/src/sentry/web/frontend/debug/debug_oauth_authorize.py
index eed4cab633..74e6d71e55 100644
--- a/src/sentry/web/frontend/debug/debug_oauth_authorize.py
+++ b/src/sentry/web/frontend/debug/debug_oauth_authorize.py
@@ -27,6 +27,9 @@ class DebugOAuthAuthorizeView(View):
 
 class DebugOAuthAuthorizeErrorView(View):
     def get(self, request):
-        return render_to_response('sentry/oauth-error.html', {
-            'error': 'We were unable to complete your request. Please re-initiate the authorization flow.',
-        }, request)
+        return render_to_response(
+            'sentry/oauth-error.html',
+            {
+                'error': 'We were unable to complete your request. Please re-initiate the authorization flow.',
+            },
+            request)
diff --git a/src/sentry/web/frontend/debug/mail.py b/src/sentry/web/frontend/debug/mail.py
index 7e0fb6dec9..3c82e1bdac 100644
--- a/src/sentry/web/frontend/debug/mail.py
+++ b/src/sentry/web/frontend/debug/mail.py
@@ -66,11 +66,15 @@ def make_group_metadata(random, group):
         'type': 'error',
         'metadata': {
             'type': '{}Error'.format(
-                ''.join(word.title() for word in random.sample(loremipsum.words, random.randint(1, 3))),
+                ''.join(
+                    word.title() for word in random.sample(
+                        loremipsum.words,
+                        random.randint(
+                            1,
+                            3))),
             ),
             'value': make_message(random),
-        }
-    }
+        }}
 
 
 def make_group_generator(random, project):
@@ -492,8 +496,12 @@ def report(request):
         ) for i in xrange(0, 7)]
 
         aggregates = [
-            random.randint(0, daily_maximum * 7) if random.random() < 0.9 else None for _ in xrange(0, 4)
-        ]
+            random.randint(
+                0,
+                daily_maximum *
+                7) if random.random() < 0.9 else None for _ in xrange(
+                0,
+                4)]
 
         return reports.Report(
             series,
diff --git a/src/sentry/web/frontend/generic.py b/src/sentry/web/frontend/generic.py
index 2b463a7533..25862ee770 100644
--- a/src/sentry/web/frontend/generic.py
+++ b/src/sentry/web/frontend/generic.py
@@ -58,7 +58,8 @@ def static_media(request, **kwargs):
         # for static files, rather than our full blown HTML.
         return HttpResponseNotFound('', content_type='text/plain')
 
-    if 'gzip' in request.META.get('HTTP_ACCEPT_ENCODING', '') and not path.endswith('.gz') and not settings.DEBUG:
+    if 'gzip' in request.META.get('HTTP_ACCEPT_ENCODING',
+                                  '') and not path.endswith('.gz') and not settings.DEBUG:
         paths = (path + '.gz', path)
     else:
         paths = (path,)
diff --git a/src/sentry/web/frontend/oauth_authorize.py b/src/sentry/web/frontend/oauth_authorize.py
index cf9abbd80c..b13698ff1a 100644
--- a/src/sentry/web/frontend/oauth_authorize.py
+++ b/src/sentry/web/frontend/oauth_authorize.py
@@ -141,7 +141,8 @@ class OAuthAuthorizeView(BaseView):
                         pending_scopes.remove(scope)
 
             if pending_scopes:
-                raise NotImplementedError('{} scopes did not have descriptions'.format(pending_scopes))
+                raise NotImplementedError(
+                    '{} scopes did not have descriptions'.format(pending_scopes))
 
         context = {
             'user': request.user,
@@ -155,14 +156,14 @@ class OAuthAuthorizeView(BaseView):
         try:
             payload = request.session['oa2']
         except KeyError:
-            return self.respond('sentry/oauth-error.html', {
-                'error': 'We were unable to complete your request. Please re-initiate the authorization flow.',
-            })
+            return self.respond(
+                'sentry/oauth-error.html', {
+                    'error': 'We were unable to complete your request. Please re-initiate the authorization flow.', })
 
         if payload['uid'] != request.user.id:
-            return self.respond('sentry/oauth-error.html', {
-                'error': 'We were unable to complete your request. Please re-initiate the authorization flow.',
-            })
+            return self.respond(
+                'sentry/oauth-error.html', {
+                    'error': 'We were unable to complete your request. Please re-initiate the authorization flow.', })
 
         try:
             application = ApiApplication.objects.get(
diff --git a/src/sentry/web/frontend/organization_api_key_settings.py b/src/sentry/web/frontend/organization_api_key_settings.py
index 97e60f0db1..75ab7d9d07 100644
--- a/src/sentry/web/frontend/organization_api_key_settings.py
+++ b/src/sentry/web/frontend/organization_api_key_settings.py
@@ -13,7 +13,7 @@ from sentry.web.frontend.base import OrganizationView
 
 class ApiKeyForm(forms.ModelForm):
     allowed_origins = OriginsField(label=_('Allowed Domains'), required=False,
-        help_text=_('Separate multiple entries with a newline.'))
+                                   help_text=_('Separate multiple entries with a newline.'))
 
     class Meta:
         model = ApiKey
diff --git a/src/sentry/web/frontend/organization_auth_settings.py b/src/sentry/web/frontend/organization_auth_settings.py
index ca07331dae..e4e74d6912 100644
--- a/src/sentry/web/frontend/organization_auth_settings.py
+++ b/src/sentry/web/frontend/organization_auth_settings.py
@@ -22,7 +22,8 @@ ERR_NO_SSO = _('The SSO feature is not enabled for this organization.')
 
 OK_PROVIDER_DISABLED = _('SSO authentication has been disabled.')
 
-OK_REMINDERS_SENT = _('A reminder email has been sent to members who have not yet linked their accounts.')
+OK_REMINDERS_SENT = _(
+    'A reminder email has been sent to members who have not yet linked their accounts.')
 
 
 class AuthProviderSettingsForm(forms.Form):
@@ -132,7 +133,11 @@ class OrganizationAuthSettingsView(OrganizationView):
         context = {
             'form': form,
             'pending_links_count': pending_links_count,
-            'login_url': absolute_uri(reverse('sentry-organization-home', args=[organization.slug])),
+            'login_url': absolute_uri(
+                reverse(
+                    'sentry-organization-home',
+                    args=[
+                        organization.slug])),
             'auth_provider': auth_provider,
             'provider_name': provider.name,
             'content': response,
@@ -157,7 +162,11 @@ class OrganizationAuthSettingsView(OrganizationView):
                 request, messages.ERROR,
                 ERR_NO_SSO,
             )
-            return HttpResponseRedirect(reverse('sentry-organization-home', args=[organization.slug]))
+            return HttpResponseRedirect(
+                reverse(
+                    'sentry-organization-home',
+                    args=[
+                        organization.slug]))
 
         try:
             auth_provider = AuthProvider.objects.get(
diff --git a/src/sentry/web/frontend/organization_member_settings.py b/src/sentry/web/frontend/organization_member_settings.py
index af34e3c827..82b1b1e4e2 100644
--- a/src/sentry/web/frontend/organization_member_settings.py
+++ b/src/sentry/web/frontend/organization_member_settings.py
@@ -34,14 +34,14 @@ class OrganizationMemberSettingsView(OrganizationView):
         if regen:
             member.update(token=member.generate_token())
             messages.success(request, ugettext('A new invitation has been generated and sent to %(email)s') % {
-                'organization': organization.name,
-                'email': member.email,
-            })
+                             'organization': organization.name, 'email': member.email, })
         else:
-            messages.success(request, ugettext('An invitation to join %(organization)s has been sent to %(email)s') % {
-                'organization': organization.name,
-                'email': member.email,
-            })
+            messages.success(
+                request,
+                ugettext('An invitation to join %(organization)s has been sent to %(email)s') % {
+                    'organization': organization.name,
+                    'email': member.email,
+                })
 
         member.send_invite_email()
 
@@ -90,7 +90,7 @@ class OrganizationMemberSettingsView(OrganizationView):
             member = form.save(request.user, organization, request.META['REMOTE_ADDR'])
 
             messages.add_message(request, messages.SUCCESS,
-                _('Your changes were saved.'))
+                                 _('Your changes were saved.'))
 
             redirect = reverse('sentry-organization-member-settings',
                                args=[organization.slug, member.id])
diff --git a/src/sentry/web/frontend/organization_settings.py b/src/sentry/web/frontend/organization_settings.py
index 8f168d3d97..4d1052056d 100644
--- a/src/sentry/web/frontend/organization_settings.py
+++ b/src/sentry/web/frontend/organization_settings.py
@@ -51,24 +51,30 @@ class OrganizationSettingsForm(forms.ModelForm):
     )
     sensitive_fields = forms.CharField(
         label=_('Global additional sensitive fields'),
-        help_text=_('Additional field names to match against when scrubbing data for all projects. '
-                    'Separate multiple entries with a newline.<br /><strong>Note: These fields will be used in addition to project specific fields.</strong>'),
-        widget=forms.Textarea(attrs={
-            'placeholder': mark_safe(_('e.g. email')),
-            'class': 'span8',
-            'rows': '3',
-        }),
+        help_text=_(
+            'Additional field names to match against when scrubbing data for all projects. '
+            'Separate multiple entries with a newline.<br /><strong>Note: These fields will be used in addition to project specific fields.</strong>'),
+        widget=forms.Textarea(
+            attrs={
+                'placeholder': mark_safe(
+                    _('e.g. email')),
+                'class': 'span8',
+                'rows': '3',
+            }),
         required=False,
     )
     safe_fields = forms.CharField(
         label=_('Global safe fields'),
-        help_text=_('Field names which data scrubbers should ignore. '
-                    'Separate multiple entries with a newline.<br /><strong>Note: These fields will be used in addition to project specific fields.</strong>'),
-        widget=forms.Textarea(attrs={
-            'placeholder': mark_safe(_('e.g. email')),
-            'class': 'span8',
-            'rows': '3',
-        }),
+        help_text=_(
+            'Field names which data scrubbers should ignore. '
+            'Separate multiple entries with a newline.<br /><strong>Note: These fields will be used in addition to project specific fields.</strong>'),
+        widget=forms.Textarea(
+            attrs={
+                'placeholder': mark_safe(
+                    _('e.g. email')),
+                'class': 'span8',
+                'rows': '3',
+            }),
         required=False,
     )
     require_scrub_ip_address = forms.BooleanField(
@@ -163,12 +169,16 @@ class OrganizationSettingsView(OrganizationView):
             )
 
             messages.add_message(request, messages.SUCCESS,
-                _('Changes to your organization were saved.'))
+                                 _('Changes to your organization were saved.'))
 
             if any((scrubbing_field in form.cleaned_data for scrubbing_field in data_scrubbing_options)):
                 data_scrubber_enabled.send(organization=organization, sender=request.user)
 
-            return HttpResponseRedirect(reverse('sentry-organization-settings', args=[organization.slug]))
+            return HttpResponseRedirect(
+                reverse(
+                    'sentry-organization-settings',
+                    args=[
+                        organization.slug]))
 
         context = {
             'form': form,
diff --git a/src/sentry/web/frontend/project_plugin_configure.py b/src/sentry/web/frontend/project_plugin_configure.py
index fc812198a3..6a11e309da 100644
--- a/src/sentry/web/frontend/project_plugin_configure.py
+++ b/src/sentry/web/frontend/project_plugin_configure.py
@@ -14,10 +14,20 @@ class ProjectPluginConfigureView(ProjectView):
         try:
             plugin = plugins.get(slug)
         except KeyError:
-            return self.redirect(reverse('sentry-manage-project', args=[project.organization.slug, project.slug]))
+            return self.redirect(
+                reverse(
+                    'sentry-manage-project',
+                    args=[
+                        project.organization.slug,
+                        project.slug]))
 
         if not plugin.can_configure_for_project(project):
-            return self.redirect(reverse('sentry-manage-project', args=[project.organization.slug, project.slug]))
+            return self.redirect(
+                reverse(
+                    'sentry-manage-project',
+                    args=[
+                        project.organization.slug,
+                        project.slug]))
 
         is_enabled = plugin.is_enabled(project)
         view = plugin.configure(request=request, project=project)
diff --git a/src/sentry/web/frontend/project_plugin_disable.py b/src/sentry/web/frontend/project_plugin_disable.py
index 8a202086ca..3e3074df3d 100644
--- a/src/sentry/web/frontend/project_plugin_disable.py
+++ b/src/sentry/web/frontend/project_plugin_disable.py
@@ -13,11 +13,29 @@ class ProjectPluginDisableView(ProjectView):
         try:
             plugin = plugins.get(slug)
         except KeyError:
-            return self.redirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
+            return self.redirect(
+                reverse(
+                    'sentry-configure-project-plugin',
+                    args=[
+                        project.organization.slug,
+                        project.slug,
+                        slug]))
 
         if not plugin.is_enabled(project):
-            return self.redirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
+            return self.redirect(
+                reverse(
+                    'sentry-configure-project-plugin',
+                    args=[
+                        project.organization.slug,
+                        project.slug,
+                        slug]))
 
         plugin.disable(project=project)
 
-        return self.redirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
+        return self.redirect(
+            reverse(
+                'sentry-configure-project-plugin',
+                args=[
+                    project.organization.slug,
+                    project.slug,
+                    slug]))
diff --git a/src/sentry/web/frontend/project_plugin_enable.py b/src/sentry/web/frontend/project_plugin_enable.py
index befa28ef6b..4d9b438665 100644
--- a/src/sentry/web/frontend/project_plugin_enable.py
+++ b/src/sentry/web/frontend/project_plugin_enable.py
@@ -14,13 +14,31 @@ class ProjectPluginEnableView(ProjectView):
         try:
             plugin = plugins.get(slug)
         except KeyError:
-            return self.redirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
+            return self.redirect(
+                reverse(
+                    'sentry-configure-project-plugin',
+                    args=[
+                        project.organization.slug,
+                        project.slug,
+                        slug]))
 
         if plugin.is_enabled(project):
-            return self.redirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
+            return self.redirect(
+                reverse(
+                    'sentry-configure-project-plugin',
+                    args=[
+                        project.organization.slug,
+                        project.slug,
+                        slug]))
 
         plugin.enable(project=project)
 
         plugin_enabled.send(plugin=plugin, project=project, user=request.user, sender=self)
 
-        return self.redirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
+        return self.redirect(
+            reverse(
+                'sentry-configure-project-plugin',
+                args=[
+                    project.organization.slug,
+                    project.slug,
+                    slug]))
diff --git a/src/sentry/web/frontend/project_plugin_reset.py b/src/sentry/web/frontend/project_plugin_reset.py
index 266b61d61d..244e942097 100644
--- a/src/sentry/web/frontend/project_plugin_reset.py
+++ b/src/sentry/web/frontend/project_plugin_reset.py
@@ -13,8 +13,20 @@ class ProjectPluginResetView(ProjectView):
         try:
             plugin = plugins.get(slug)
         except KeyError:
-            return self.redirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
+            return self.redirect(
+                reverse(
+                    'sentry-configure-project-plugin',
+                    args=[
+                        project.organization.slug,
+                        project.slug,
+                        slug]))
 
         plugin.reset_options(project=project)
 
-        return self.redirect(reverse('sentry-configure-project-plugin', args=[project.organization.slug, project.slug, slug]))
+        return self.redirect(
+            reverse(
+                'sentry-configure-project-plugin',
+                args=[
+                    project.organization.slug,
+                    project.slug,
+                    slug]))
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index 7c937f44fd..e7511f7a67 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -23,14 +23,14 @@ BLANK_CHOICE = [("", "")]
 
 class EditProjectForm(forms.ModelForm):
     name = forms.CharField(label=_('Project Name'), max_length=200,
-        widget=forms.TextInput(attrs={'placeholder': _('Production')}))
+                           widget=forms.TextInput(attrs={'placeholder': _('Production')}))
     slug = forms.SlugField(
         label=_('Short name'),
         help_text=_('A unique ID used to identify this project.'),
     )
     team = CustomTypedChoiceField(choices=(), coerce=int, required=False)
     origins = OriginsField(label=_('Allowed Domains'), required=False,
-        help_text=_('Separate multiple entries with a newline.'))
+                           help_text=_('Separate multiple entries with a newline.'))
     token = forms.CharField(
         label=_('Security token'),
         help_text=_('Outbound requests matching Allowed Domains will have the header "{token_header}: {token}" appended.'),
@@ -39,9 +39,10 @@ class EditProjectForm(forms.ModelForm):
     token_header = forms.CharField(
         label=_('Security token header'),
         help_text=_('Outbound requests matching Allowed Domains will have the header "{token_header}: {token}" appended.'),
-        widget=forms.TextInput(attrs={
-            'placeholder': _('X-Sentry-Token'),
-        }),
+        widget=forms.TextInput(
+            attrs={
+                'placeholder': _('X-Sentry-Token'),
+            }),
         required=False,
     )
     verify_ssl = forms.BooleanField(
@@ -49,8 +50,12 @@ class EditProjectForm(forms.ModelForm):
         help_text=_('Outbound requests will verify TLS (sometimes known as SSL) connections.'),
         required=False,
     )
-    resolve_age = RangeField(label=_('Auto resolve'), required=False,
-        min_value=0, max_value=720, step_value=1,
+    resolve_age = RangeField(
+        label=_('Auto resolve'),
+        required=False,
+        min_value=0,
+        max_value=720,
+        step_value=1,
         help_text=_('Automatically resolve an issue if it hasn\'t been seen for this amount of time.'))
     scrub_data = forms.BooleanField(
         label=_('Data Scrubber'),
@@ -60,16 +65,17 @@ class EditProjectForm(forms.ModelForm):
     scrub_defaults = forms.BooleanField(
         label=_('Use Default Scrubbers'),
         help_text=_('Apply default scrubbers to prevent things like passwords and credit cards from being stored.'),
-        required=False
-    )
+        required=False)
     sensitive_fields = forms.CharField(
         label=_('Additional sensitive fields'),
         help_text=_('Additional field names to match against when scrubbing data. Separate multiple entries with a newline.'),
-        widget=forms.Textarea(attrs={
-            'placeholder': mark_safe(_('e.g. email')),
-            'class': 'span8',
-            'rows': '3',
-        }),
+        widget=forms.Textarea(
+            attrs={
+                'placeholder': mark_safe(
+                    _('e.g. email')),
+                'class': 'span8',
+                'rows': '3',
+            }),
         required=False,
     )
     safe_fields = forms.CharField(
@@ -309,7 +315,11 @@ class ProjectSettingsView(ProjectView):
                 request, messages.SUCCESS,
                 _('Changes to your project were saved.'))
 
-            redirect = reverse('sentry-manage-project', args=[project.organization.slug, project.slug])
+            redirect = reverse(
+                'sentry-manage-project',
+                args=[
+                    project.organization.slug,
+                    project.slug])
 
             return HttpResponseRedirect(redirect)
 
diff --git a/src/sentry/web/frontend/react_page.py b/src/sentry/web/frontend/react_page.py
index a2054f47b4..42fabe8318 100644
--- a/src/sentry/web/frontend/react_page.py
+++ b/src/sentry/web/frontend/react_page.py
@@ -40,7 +40,9 @@ class ReactMixin(object):
 class ReactPageView(OrganizationView, ReactMixin):
     def handle(self, request, organization, **kwargs):
         if 'project_id' in kwargs and request.GET.get('onboarding'):
-            project = Project.objects.filter(organization=organization, slug=kwargs['project_id']).first()
+            project = Project.objects.filter(
+                organization=organization,
+                slug=kwargs['project_id']).first()
             first_event_pending.send(project=project, user=request.user, sender=self)
         return self.handle_react(request)
 
diff --git a/src/sentry/web/frontend/remove_organization.py b/src/sentry/web/frontend/remove_organization.py
index cfd63ebc74..a0118aa83c 100644
--- a/src/sentry/web/frontend/remove_organization.py
+++ b/src/sentry/web/frontend/remove_organization.py
@@ -75,7 +75,7 @@ class RemoveOrganizationView(OrganizationView):
                 })
 
             messages.add_message(request, messages.SUCCESS,
-                MSG_REMOVE_SUCCESS % (organization.name,))
+                                 MSG_REMOVE_SUCCESS % (organization.name,))
 
             return self.redirect(reverse('sentry'))
 
diff --git a/src/sentry/web/frontend/remove_project.py b/src/sentry/web/frontend/remove_project.py
index adac15ea1e..781fa353c0 100644
--- a/src/sentry/web/frontend/remove_project.py
+++ b/src/sentry/web/frontend/remove_project.py
@@ -34,7 +34,11 @@ class RemoveProjectView(ProjectView):
                 request, messages.SUCCESS,
                 _(u'The project %r was scheduled for deletion.') % (project.name.encode('utf-8'),))
 
-            return HttpResponseRedirect(reverse('sentry-organization-home', args=[team.organization.slug]))
+            return HttpResponseRedirect(
+                reverse(
+                    'sentry-organization-home',
+                    args=[
+                        team.organization.slug]))
 
         context = {
             'form': form,
diff --git a/src/sentry/web/frontend/restore_organization.py b/src/sentry/web/frontend/restore_organization.py
index cb1542749c..e317ef3bc9 100644
--- a/src/sentry/web/frontend/restore_organization.py
+++ b/src/sentry/web/frontend/restore_organization.py
@@ -81,7 +81,7 @@ class RestoreOrganizationView(OrganizationView):
                 'model': Organization.__name__,
             })
             messages.add_message(request, messages.SUCCESS,
-                MSG_RESTORE_SUCCESS)
+                                 MSG_RESTORE_SUCCESS)
 
         return self.redirect(
             reverse('sentry-organization-home', args=[organization.slug])
diff --git a/src/sentry/wsgi.py b/src/sentry/wsgi.py
index 7c089ee387..e5e4536326 100644
--- a/src/sentry/wsgi.py
+++ b/src/sentry/wsgi.py
@@ -37,6 +37,7 @@ class FileWrapperWSGIHandler(WSGIHandler):
 
     Note: this was added natively into Django 1.8, so if by some reason,
     we upgraded, this wouldn't be relevant anymore."""
+
     def __call__(self, environ, start_response):
         response = super(FileWrapperWSGIHandler, self).__call__(environ, start_response)
         if hasattr(response, 'streaming') and response.streaming:
