commit 04e172a8f3fd0afd5a3c8e92a055a1a72cfc7ea5
Author: Matte Noble <me@mattenoble.com>
Date:   Tue Nov 6 11:05:38 2018 -0800

    feat(app-platform): Installation webhook (#10360)
    
    When an application is installed to an Organization, this sends a
    request to the app service notifying them of the event.

diff --git a/src/sentry/api/endpoints/sentry_app_installations.py b/src/sentry/api/endpoints/sentry_app_installations.py
index ad2bb5de2f..a15bd42414 100644
--- a/src/sentry/api/endpoints/sentry_app_installations.py
+++ b/src/sentry/api/endpoints/sentry_app_installations.py
@@ -55,6 +55,7 @@ class SentryAppInstallationsEndpoint(SentryAppInstallationsBaseEndpoint):
         install, _ = Creator.run(
             organization=organization,
             slug=serializer.object.get('slug'),
+            user=request.user,
         )
 
         return Response(serialize(install))
diff --git a/src/sentry/api/serializers/models/app_platform_event.py b/src/sentry/api/serializers/models/app_platform_event.py
new file mode 100644
index 0000000000..47952e6acc
--- /dev/null
+++ b/src/sentry/api/serializers/models/app_platform_event.py
@@ -0,0 +1,11 @@
+from __future__ import absolute_import
+
+
+def app_platform_event(action, install, data, actor=None):
+    return {
+        'action': action,
+        'installation': {
+            'uuid': install.uuid,
+        },
+        'data': data,
+    }
diff --git a/src/sentry/api/serializers/models/sentry_app_installation.py b/src/sentry/api/serializers/models/sentry_app_installation.py
index 4b1a059622..524169d68f 100644
--- a/src/sentry/api/serializers/models/sentry_app_installation.py
+++ b/src/sentry/api/serializers/models/sentry_app_installation.py
@@ -8,8 +8,18 @@ from sentry.models import SentryAppInstallation
 @register(SentryAppInstallation)
 class SentryAppInstallationSerializer(Serializer):
     def serialize(self, obj, attrs, user):
-        return {
-            'app': obj.sentry_app.slug,
-            'organization': obj.organization.slug,
+        data = {
+            'app': {
+                'uuid': obj.sentry_app.uuid,
+                'slug': obj.sentry_app.slug,
+            },
+            'organization': {
+                'slug': obj.organization.slug,
+            },
             'uuid': obj.uuid,
         }
+
+        if 'code' in attrs:
+            data['code'] = attrs['code']
+
+        return data
diff --git a/src/sentry/mediators/mediator.py b/src/sentry/mediators/mediator.py
index db512c9933..fe74d69b6a 100644
--- a/src/sentry/mediators/mediator.py
+++ b/src/sentry/mediators/mediator.py
@@ -193,7 +193,13 @@ class Mediator(object):
         if param and param.has_default:
             return param.default(self)
 
-        return self.__getattribute__(key)
+        if not param.is_required and not param.has_default:
+            return None
+
+        try:
+            return self.__getattribute__(key)
+        except AttributeError:
+            return None
 
     @property
     def _params(self):
diff --git a/src/sentry/mediators/param.py b/src/sentry/mediators/param.py
index 55a0c8b5af..7cac942e5b 100644
--- a/src/sentry/mediators/param.py
+++ b/src/sentry/mediators/param.py
@@ -77,7 +77,7 @@ class Param(object):
     """
 
     def __init__(self, type, **kwargs):
-        self.type = type
+        self._type = type
         self.kwargs = kwargs
 
     def setup(self, target, name):
@@ -95,9 +95,9 @@ class Param(object):
         if self._missing_value(value):
             raise AttributeError(u'Missing required param: `{}`'.format(name))
 
-        if self.is_required and not self._type_match(value):
+        if self.is_required and not isinstance(value, self.type):
             raise TypeError(u'`{}` must be a {}, received {}'.format(
-                name, self.type, self._eval_type(value)
+                name, self.type, type(value)
             ))
 
         return True
@@ -113,6 +113,12 @@ class Param(object):
 
         return value
 
+    @memoize
+    def type(self):
+        if isinstance(self._type, six.string_types):
+            return self._eval_string_type()
+        return self._type
+
     @memoize
     def has_default(self):
         return 'default' in self.kwargs
@@ -127,13 +133,16 @@ class Param(object):
             return False
         return True
 
-    def _type_match(self, value):
-        if isinstance(self.type, six.string_types):
-            self.type = self._eval_type()
-        return isinstance(value, self.type)
+    def _eval_string_type(self):
+        """
+        Converts a class path in string form to the actual class object.
 
-    def _eval_type(self):
-        mod, klass = self.type.rsplit('.', 1)
+        Example:
+            >>> self._type = 'sentry.models.Project'
+            >>> self._eval_string_type()
+            sentry.models.project.Project
+        """
+        mod, klass = self._type.rsplit('.', 1)
         return getattr(sys.modules[mod], klass)
 
     def _missing_value(self, value):
diff --git a/src/sentry/mediators/sentry_app_installations/__init__.py b/src/sentry/mediators/sentry_app_installations/__init__.py
index fa8f120988..ff31386c2a 100644
--- a/src/sentry/mediators/sentry_app_installations/__init__.py
+++ b/src/sentry/mediators/sentry_app_installations/__init__.py
@@ -3,3 +3,4 @@ from __future__ import absolute_import
 from .creator import Creator  # NOQA
 from .destroyer import Destroyer  # NOQA
 from .authorizer import Authorizer  # NOQA
+from .installation_notifier import InstallationNotifier  # NOQA
diff --git a/src/sentry/mediators/sentry_app_installations/creator.py b/src/sentry/mediators/sentry_app_installations/creator.py
index df5088cfdc..453e774a58 100644
--- a/src/sentry/mediators/sentry_app_installations/creator.py
+++ b/src/sentry/mediators/sentry_app_installations/creator.py
@@ -7,16 +7,19 @@ from sentry.models import (
     ApiAuthorization, ApiGrant, SentryApp, SentryAppInstallation
 )
 from sentry.utils.cache import memoize
+from sentry.tasks.app_platform import installation_webhook
 
 
 class Creator(Mediator):
     organization = Param('sentry.models.Organization')
     slug = Param(six.string_types)
+    user = Param('sentry.models.User')
 
     def call(self):
         self._create_authorization()
         self._create_api_grant()
         self._create_install()
+        self._notify_service()
         return (self.install, self.api_grant)
 
     def _create_authorization(self):
@@ -40,6 +43,9 @@ class Creator(Mediator):
             application=self.api_application,
         )
 
+    def _notify_service(self):
+        installation_webhook.delay(self.install.id, self.user.id)
+
     @memoize
     def api_application(self):
         return self.sentry_app.application
diff --git a/src/sentry/mediators/sentry_app_installations/installation_notifier.py b/src/sentry/mediators/sentry_app_installations/installation_notifier.py
new file mode 100644
index 0000000000..d286111604
--- /dev/null
+++ b/src/sentry/mediators/sentry_app_installations/installation_notifier.py
@@ -0,0 +1,42 @@
+from __future__ import absolute_import
+
+from sentry.api.serializers import SentryAppInstallationSerializer, app_platform_event
+from sentry.http import safe_urlopen, safe_urlread
+from sentry.mediators import Mediator, Param
+from sentry.utils.cache import memoize
+
+
+class InstallationNotifier(Mediator):
+    install = Param('sentry.models.SentryAppInstallation')
+    user = Param('sentry.models.User')
+
+    def call(self):
+        self._send_webhook()
+
+    def _send_webhook(self):
+        safe_urlread(
+            safe_urlopen(self.sentry_app.webhook_url, json=self.body, timeout=5)
+        )
+
+    @property
+    def body(self):
+        data = SentryAppInstallationSerializer().serialize(
+            self.install,
+            attrs={'code': self.api_grant.code},
+            user=self.user,
+        )
+
+        return app_platform_event(
+            action='installation',
+            install=self.install,
+            data=data,
+            actor=self.user,
+        )
+
+    @memoize
+    def sentry_app(self):
+        return self.install.sentry_app
+
+    @memoize
+    def api_grant(self):
+        return self.install.api_grant
diff --git a/src/sentry/tasks/app_platform.py b/src/sentry/tasks/app_platform.py
new file mode 100644
index 0000000000..371083339f
--- /dev/null
+++ b/src/sentry/tasks/app_platform.py
@@ -0,0 +1,50 @@
+from __future__ import absolute_import
+
+import logging
+
+from requests.exceptions import RequestException
+
+from sentry.models import SentryAppInstallation, User
+from sentry.tasks.base import instrumented_task, retry
+
+logger = logging.Logger('sentry.tasks.app_platform')
+
+
+@instrumented_task(
+    name='sentry.tasks.app_platform.installation_webhook',
+    queue='integrations',  # Sharing this for now. Should it have its own?
+    default_retry_delay=(60 * 5),  # 5 minutes
+    max_retries=3,
+)
+@retry(on=(RequestException, ))
+def installation_webhook(installation_id, user_id):
+    from sentry.mediators.sentry_app_installations import InstallationNotifier
+
+    try:
+        install = SentryAppInstallation.objects.get(id=installation_id)
+    except SentryAppInstallation.DoesNotExist:
+        logger.info(
+            'installation_webhook.missing_installation',
+            extra={
+                'installation_id': installation_id,
+                'user_id': user_id,
+            },
+        )
+        return
+
+    try:
+        user = User.objects.get(id=user_id)
+    except User.DoesNotExist:
+        logger.info(
+            'installation_webhook.missing_user',
+            extra={
+                'installation_id': installation_id,
+                'user_id': user_id,
+            },
+        )
+        return
+
+    InstallationNotifier.run(
+        install=install,
+        user=user,
+    )
diff --git a/tests/sentry/api/bases/test_sentryapps.py b/tests/sentry/api/bases/test_sentryapps.py
index ab58b82830..d68199c263 100644
--- a/tests/sentry/api/bases/test_sentryapps.py
+++ b/tests/sentry/api/bases/test_sentryapps.py
@@ -74,6 +74,7 @@ class SentryAppInstallationPermissionTest(TestCase):
         self.installation, _ = SentryAppInstallationCreator.run(
             slug=self.sentry_app.slug,
             organization=self.org,
+            user=self.user,
         )
 
         self.request = self.make_request(user=self.user, method='GET')
@@ -122,6 +123,7 @@ class SentryAppInstallationBaseEndpointTest(TestCase):
         self.installation, _ = SentryAppInstallationCreator.run(
             slug=self.sentry_app.slug,
             organization=self.org,
+            user=self.user,
         )
 
     def test_retrieves_installation(self):
diff --git a/tests/sentry/api/endpoints/test_organization_sentry_app_installation_details.py b/tests/sentry/api/endpoints/test_organization_sentry_app_installation_details.py
index 6f35b383fa..493327659d 100644
--- a/tests/sentry/api/endpoints/test_organization_sentry_app_installation_details.py
+++ b/tests/sentry/api/endpoints/test_organization_sentry_app_installation_details.py
@@ -23,6 +23,7 @@ class SentryAppInstallationDetailsTest(APITestCase):
         self.installation, _ = Creator.run(
             slug=self.published_app.slug,
             organization=self.super_org,
+            user=self.superuser,
         )
 
         self.unpublished_app = self.create_sentry_app(
@@ -33,6 +34,7 @@ class SentryAppInstallationDetailsTest(APITestCase):
         self.installation2, _ = Creator.run(
             slug=self.unpublished_app.slug,
             organization=self.org,
+            user=self.user,
         )
 
         self.url = reverse(
@@ -49,8 +51,13 @@ class GetSentryAppInstallationDetailsTest(SentryAppInstallationDetailsTest):
 
         assert response.status_code == 200, response.content
         assert response.data == {
-            'app': self.unpublished_app.slug,
-            'organization': self.org.slug,
+            'app': {
+                'uuid': self.unpublished_app.uuid,
+                'slug': self.unpublished_app.slug,
+            },
+            'organization': {
+                'slug': self.org.slug,
+            },
             'uuid': self.installation2.uuid,
         }
 
diff --git a/tests/sentry/api/endpoints/test_organization_sentry_app_installations.py b/tests/sentry/api/endpoints/test_organization_sentry_app_installations.py
index 989d0a5aa3..98b92b4cd0 100644
--- a/tests/sentry/api/endpoints/test_organization_sentry_app_installations.py
+++ b/tests/sentry/api/endpoints/test_organization_sentry_app_installations.py
@@ -29,11 +29,13 @@ class SentryAppInstallationsTest(APITestCase):
         self.installation, _ = Creator.run(
             slug=self.published_app.slug,
             organization=self.super_org,
+            user=self.superuser,
         )
 
         self.installation2, _ = Creator.run(
             slug=self.unpublished_app.slug,
             organization=self.org,
+            user=self.user,
         )
 
         self.url = reverse(
@@ -50,8 +52,13 @@ class GetSentryAppInstallationsTest(SentryAppInstallationsTest):
 
         assert response.status_code == 200
         assert response.data == [{
-            'app': self.unpublished_app.slug,
-            'organization': self.org.slug,
+            'app': {
+                'slug': self.unpublished_app.slug,
+                'uuid': self.unpublished_app.uuid,
+            },
+            'organization': {
+                'slug': self.org.slug,
+            },
             'uuid': self.installation2.uuid,
         }]
 
@@ -64,8 +71,13 @@ class GetSentryAppInstallationsTest(SentryAppInstallationsTest):
 
         assert response.status_code == 200
         assert response.data == [{
-            'app': self.published_app.slug,
-            'organization': self.super_org.slug,
+            'app': {
+                'slug': self.published_app.slug,
+                'uuid': self.published_app.uuid,
+            },
+            'organization': {
+                'slug': self.super_org.slug,
+            },
             'uuid': self.installation.uuid,
         }]
 
@@ -76,8 +88,13 @@ class GetSentryAppInstallationsTest(SentryAppInstallationsTest):
 
         assert response.status_code == 200
         assert response.data == [{
-            'app': self.unpublished_app.slug,
-            'organization': self.org.slug,
+            'app': {
+                'slug': self.unpublished_app.slug,
+                'uuid': self.unpublished_app.uuid,
+            },
+            'organization': {
+                'slug': self.org.slug,
+            },
             'uuid': self.installation2.uuid,
         }]
 
@@ -111,8 +128,13 @@ class PostSentryAppInstallationsTest(SentryAppInstallationsTest):
             format='json',
         )
         expected = {
-            'app': app.slug,
-            'organization': self.org.slug,
+            'app': {
+                'slug': app.slug,
+                'uuid': app.uuid,
+            },
+            'organization': {
+                'slug': self.org.slug,
+            },
         }
 
         assert response.status_code == 200, response.content
@@ -132,8 +154,13 @@ class PostSentryAppInstallationsTest(SentryAppInstallationsTest):
             format='json',
         )
         expected = {
-            'app': app.slug,
-            'organization': self.org.slug,
+            'app': {
+                'slug': app.slug,
+                'uuid': app.uuid,
+            },
+            'organization': {
+                'slug': self.org.slug,
+            },
         }
 
         assert response.status_code == 200, response.content
diff --git a/tests/sentry/api/endpoints/test_sentry_app_authorizations.py b/tests/sentry/api/endpoints/test_sentry_app_authorizations.py
index 8f28a87025..ed11b8a5f7 100644
--- a/tests/sentry/api/endpoints/test_sentry_app_authorizations.py
+++ b/tests/sentry/api/endpoints/test_sentry_app_authorizations.py
@@ -35,6 +35,7 @@ class TestSentryAppAuthorizations(APITestCase):
         self.install, self.grant = SentryAppInstallationCreator.run(
             organization=self.org,
             slug='nulldb',
+            user=self.user,
         )
 
         self.url = reverse(
@@ -86,6 +87,7 @@ class TestSentryAppAuthorizations(APITestCase):
         self.install, _ = SentryAppInstallationCreator.run(
             organization=self.org,
             slug='slowdb',
+            user=self.user,
         )
 
         # URL with this new Install's uuid in it
diff --git a/tests/sentry/auth/test_access.py b/tests/sentry/auth/test_access.py
index 774635a3c9..f0fc453b04 100644
--- a/tests/sentry/auth/test_access.py
+++ b/tests/sentry/auth/test_access.py
@@ -181,6 +181,7 @@ class FromSentryAppTest(TestCase):
         self.install = SentryAppInstallationCreator.run(
             organization=self.org,
             slug=self.sentry_app.slug,
+            user=self.user,
         )
 
     def test_has_access(self):
diff --git a/tests/sentry/mediators/sentry_app_installations/test_authorizer.py b/tests/sentry/mediators/sentry_app_installations/test_authorizer.py
index c92c9533b1..546d3ceac9 100644
--- a/tests/sentry/mediators/sentry_app_installations/test_authorizer.py
+++ b/tests/sentry/mediators/sentry_app_installations/test_authorizer.py
@@ -20,6 +20,7 @@ class TestAuthorizer(TestCase):
         self.install, self.grant = Creator.run(
             organization=self.org,
             slug='nulldb',
+            user=self.user,
         )
 
         self.authorizer = Authorizer(
diff --git a/tests/sentry/mediators/sentry_app_installations/test_creator.py b/tests/sentry/mediators/sentry_app_installations/test_creator.py
index 1981b78f07..501aa0dfe7 100644
--- a/tests/sentry/mediators/sentry_app_installations/test_creator.py
+++ b/tests/sentry/mediators/sentry_app_installations/test_creator.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+from mock import patch
+
 from sentry.mediators.sentry_app_installations import Creator
 from sentry.models import ApiAuthorization
 from sentry.testutils import TestCase
@@ -16,7 +18,11 @@ class TestCreator(TestCase):
             scopes=('project:read',),
         )
 
-        self.creator = Creator(organization=self.org, slug='nulldb')
+        self.creator = Creator(
+            organization=self.org,
+            slug='nulldb',
+            user=self.user,
+        )
 
     def test_creates_api_authorization(self):
         install, grant = self.creator.call()
@@ -35,6 +41,11 @@ class TestCreator(TestCase):
         install, grant = self.creator.call()
         assert grant.pk
 
+    @patch('sentry.tasks.app_platform.installation_webhook.delay')
+    def test_notifies_service(self, installation_webhook):
+        install, _ = self.creator.call()
+        installation_webhook.assert_called_once_with(install.id, self.user.id)
+
     def test_associations(self):
         install, grant = self.creator.call()
 
diff --git a/tests/sentry/mediators/sentry_app_installations/test_destroyer.py b/tests/sentry/mediators/sentry_app_installations/test_destroyer.py
index 513aad1c58..588250dc98 100644
--- a/tests/sentry/mediators/sentry_app_installations/test_destroyer.py
+++ b/tests/sentry/mediators/sentry_app_installations/test_destroyer.py
@@ -21,6 +21,7 @@ class TestDestroyer(TestCase):
         self.install, self.grant = Creator.run(
             organization=self.org,
             slug='nulldb',
+            user=self.user,
         )
 
         self.destroyer = Destroyer(install=self.install)
diff --git a/tests/sentry/mediators/sentry_app_installations/test_installation_notifier.py b/tests/sentry/mediators/sentry_app_installations/test_installation_notifier.py
new file mode 100644
index 0000000000..c2727ee0fa
--- /dev/null
+++ b/tests/sentry/mediators/sentry_app_installations/test_installation_notifier.py
@@ -0,0 +1,57 @@
+from __future__ import absolute_import
+
+from mock import patch
+
+from sentry.mediators import sentry_apps
+from sentry.mediators.sentry_app_installations import Creator, InstallationNotifier
+from sentry.testutils import TestCase
+
+
+class TestInstallationNotifier(TestCase):
+    def setUp(self):
+        super(TestInstallationNotifier, self).setUp()
+
+        self.user = self.create_user()
+        self.org = self.create_organization(owner=self.user)
+
+        self.sentry_app = sentry_apps.Creator.run(
+            name='foo',
+            organization=self.org,
+            webhook_url='https://example.com',
+            scopes=(),
+        )
+
+        self.install, _ = Creator.run(
+            slug='foo',
+            organization=self.org,
+            user=self.user,
+        )
+
+    @patch('sentry.mediators.sentry_app_installations.installation_notifier.safe_urlopen')
+    def test_task_enqueued(self, safe_urlopen):
+        InstallationNotifier.run(
+            install=self.install,
+            user=self.user,
+        )
+
+        safe_urlopen.assert_called_once_with(
+            'https://example.com',
+            json={
+                'action': 'installation',
+                'installation': {
+                    'uuid': self.install.uuid,
+                },
+                'data': {
+                    'app': {
+                        'uuid': self.sentry_app.uuid,
+                        'slug': self.sentry_app.slug,
+                    },
+                    'organization': {
+                        'slug': self.org.slug,
+                    },
+                    'uuid': self.install.uuid,
+                    'code': self.install.api_grant.code,
+                },
+            },
+            timeout=5,
+        )
diff --git a/tests/sentry/mediators/test_mediator.py b/tests/sentry/mediators/test_mediator.py
index 1bef7ce05e..85de8a1bcf 100644
--- a/tests/sentry/mediators/test_mediator.py
+++ b/tests/sentry/mediators/test_mediator.py
@@ -56,6 +56,10 @@ class TestMediator(TestCase):
     def test_param_default_access(self):
         assert self.mediator.name == 'Example'
 
+    def test_missing_params(self):
+        with self.assertRaises(AttributeError):
+            MockMediator.run(name='Pete', age=30)
+
     def test_log(self):
         with patch.object(self.logger, 'info') as mock:
             self.mediator.log(at='test')
diff --git a/tests/sentry/tasks/test_app_platform.py b/tests/sentry/tasks/test_app_platform.py
new file mode 100644
index 0000000000..7c6365992e
--- /dev/null
+++ b/tests/sentry/tasks/test_app_platform.py
@@ -0,0 +1,33 @@
+from __future__ import absolute_import
+
+from mock import patch
+
+from sentry.mediators import sentry_app_installations
+from sentry.tasks.app_platform import installation_webhook
+from sentry.testutils import TestCase
+
+
+class TestAppPlatformTasks(TestCase):
+    def setUp(self):
+        self.user = self.create_user()
+        self.org = self.create_organization(owner=self.user)
+
+        self.sentry_app = self.create_sentry_app(
+            name='foo',
+            organization=self.org,
+            webhook_url='https://example.com',
+            scopes=(),
+        )
+
+        self.install, _ = sentry_app_installations.Creator.run(
+            slug='foo',
+            organization=self.org,
+            user=self.user,
+        )
+
+    @patch('sentry.mediators.sentry_app_installations.InstallationNotifier.run')
+    def test_installation_webhook(self, run):
+        with self.tasks():
+            installation_webhook(self.install.id, self.user.id)
+
+        run.assert_called_once_with(install=self.install, user=self.user)
