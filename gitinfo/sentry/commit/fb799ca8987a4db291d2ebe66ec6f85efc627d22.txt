commit fb799ca8987a4db291d2ebe66ec6f85efc627d22
Author: Alex Hofsteede <alex@hofsteede.com>
Date:   Thu Nov 2 14:01:03 2017 -0600

    fix: Actually convert fingerprints to strings. (#6501)
    
    Found this when comparing results to new json schema validation. The
    list ofstringified fingerprints is never actually used because
    process_finterprints doesn't mutate the data directly. This code should
    be going away any minute now, but I have to fix it here to get a clean
    comparison.

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index b67d0968e0..29f9e7e917 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -472,7 +472,7 @@ class ClientApiHelper(object):
 
         if 'fingerprint' in data:
             try:
-                self._process_fingerprint(data)
+                data['fingerprint'] = self._process_fingerprint(data)
             except InvalidFingerprint as e:
                 self.log.debug(
                     'Discarded invalid value for fingerprint: %r',
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index ca957d4ae8..5143354f04 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -15,7 +15,6 @@ from sentry.coreapi import (
     APIUnauthorized,
     Auth,
     ClientApiHelper,
-    InvalidFingerprint,
     InvalidTimestamp,
     get_interface,
     CspApiHelper,
@@ -122,29 +121,6 @@ class ProjectIdFromAuthTest(BaseAPITest):
         self.assertRaises(APIUnauthorized, self.helper.project_id_from_auth, auth)
 
 
-class ProcessFingerprintTest(BaseAPITest):
-    def test_invalid_as_string(self):
-        self.assertRaises(
-            InvalidFingerprint, self.helper._process_fingerprint, {
-                'fingerprint': '2012-01-01T10:30:45',
-            }
-        )
-
-    def test_invalid_component(self):
-        self.assertRaises(
-            InvalidFingerprint, self.helper._process_fingerprint, {
-                'fingerprint': ['foo', ['bar']],
-            }
-        )
-
-    def simple(self):
-        data = self.helper._process_fingerprint({
-            'fingerprint': ['{{default}}', 1, 'bar', 4.5],
-        })
-        self.assertTrue('fingerprint' in data)
-        self.assertEquals(data['fingerprint'], ['{{default}}', '1', 'bar', '4.5'])
-
-
 class ProcessDataTimestampTest(BaseAPITest):
     def test_iso_timestamp(self):
         d = datetime(2012, 1, 1, 10, 30, 45)
@@ -508,6 +484,96 @@ class ValidateDataTest(BaseAPITest):
         })
         assert data['time_spent'] == 123
 
+    def test_fingerprints(self):
+        data = self.helper.validate_data(self.project, {
+            'fingerprint': '2012-01-01T10:30:45',
+        })
+        assert not data.get('fingerprint')
+        assert data['errors'][0]['type'] == 'invalid_data'
+        assert data['errors'][0]['name'] == 'fingerprint'
+
+        data = self.helper.validate_data(self.project, {
+            'fingerprint': ['foo', ['bar']],
+        })
+        assert not data.get('fingerprint')
+        assert data['errors'][0]['type'] == 'invalid_data'
+        assert data['errors'][0]['name'] == 'fingerprint'
+
+        data = self.helper.validate_data(self.project, {
+            'fingerprint': ['{{default}}', 1, 'bar', 4.5],
+        })
+        assert data.get('fingerprint') == ['{{default}}', '1', 'bar', '4.5']
+        assert len(data['errors']) == 0
+
+    def test_messages(self):
+        # Just 'message': wrap it in interface
+        data = self.helper.validate_data(self.project, {
+            'message': 'foo is bar',
+        })
+        assert 'message' not in data
+        assert data['sentry.interfaces.Message'] == {'message': 'foo is bar'}
+
+        # both 'message' and interface with no 'formatted' value, put 'message'
+        # into 'formatted'.
+        data = self.helper.validate_data(self.project, {
+            'message': 'foo is bar',
+            'sentry.interfaces.Message': {
+                'message': 'something else',
+            }
+        })
+        assert 'message' not in data
+        assert data['sentry.interfaces.Message'] == {
+            'message': 'something else',
+            'formatted': 'foo is bar'
+        }
+
+        # both 'message' and complete interface, 'message' is discarded
+        data = self.helper.validate_data(self.project, {
+            'message': 'foo is bar',
+            'sentry.interfaces.Message': {
+                'message': 'something else',
+                'formatted': 'something else formatted',
+            }
+        })
+        assert 'message' not in data
+        assert len(data['errors']) == 0
+        assert data['sentry.interfaces.Message'] == {
+            'message': 'something else',
+            'formatted': 'something else formatted'
+        }
+
+    def test_messages_old_behavior(self):
+        # both 'message' and complete valid interface but interface has the same
+        # value for both keys so the 'formatted' value is discarded and ends up
+        # being replaced with 'message'
+        data = self.helper.validate_data(self.project, {
+            'message': 'foo is bar',
+            'sentry.interfaces.Message': {
+                'message': 'something else',
+                'formatted': 'something else',
+            }
+        })
+        assert 'message' not in data
+        assert len(data['errors']) == 0
+        assert data['sentry.interfaces.Message'] == {
+            'message': 'something else',
+            'formatted': 'foo is bar'
+        }
+
+        # interface discarded as invalid, replaced by new interface containing
+        # wrapped 'message'
+        data = self.helper.validate_data(self.project, {
+            'message': 'foo is bar',
+            'sentry.interfaces.Message': {
+                'invalid': 'invalid',
+            }
+        })
+        assert 'message' not in data
+        assert len(data['errors']) == 1
+        assert data['sentry.interfaces.Message'] == {
+            'message': 'foo is bar'
+        }
+
 
 class SafelyLoadJSONStringTest(BaseAPITest):
     def test_valid_payload(self):
