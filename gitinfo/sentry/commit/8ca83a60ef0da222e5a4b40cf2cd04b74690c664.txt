commit 8ca83a60ef0da222e5a4b40cf2cd04b74690c664
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Tue Apr 25 16:40:51 2017 -0700

    Add deploy to hovercard (#5264)

diff --git a/src/sentry/static/sentry/app/components/latestDeployOrReleaseTime.jsx b/src/sentry/static/sentry/app/components/latestDeployOrReleaseTime.jsx
new file mode 100644
index 0000000000..d6855b0b9b
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/latestDeployOrReleaseTime.jsx
@@ -0,0 +1,110 @@
+import React from 'react';
+import ApiMixin from '../mixins/apiMixin';
+import TooltipMixin from '../mixins/tooltip';
+import LoadingIndicator from './loadingIndicator';
+import LoadingError from './loadingError';
+import TimeSince from './timeSince';
+import {t} from '../locale';
+
+const LatestDeployOrReleaseTime = React.createClass({
+  propTypes: {
+    orgId: React.PropTypes.string.isRequired,
+    version: React.PropTypes.string.isRequired,
+    releaseDateCreated: React.PropTypes.string.isRequired
+  },
+
+  mixins: [
+    ApiMixin,
+    TooltipMixin({
+      selector: '.tip'
+    })
+  ],
+
+  getInitialState() {
+    return {
+      deploys: [],
+      loading: true
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  componentDidUpdate(prevProps, prevState) {
+    if (prevState.loading && !this.state.loading) {
+      this.removeTooltips();
+      this.attachTooltips();
+    }
+  },
+
+  fetchData() {
+    let deployPath = `/organizations/${this.props.orgId}/releases/${encodeURIComponent(this.props.version)}/deploys/`;
+    this.api.request(deployPath, {
+      method: 'GET',
+      success: data => {
+        this.setState({
+          deploys: data,
+          loading: false
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+  render() {
+    if (this.state.loading) {
+      return <LoadingIndicator mini={true} />;
+    }
+    if (this.state.error) {
+      return <LoadingError />;
+    }
+    let {releaseDateCreated} = this.props;
+    let {deploys} = this.state;
+    let earlierDeploysNum = deploys.length - 1;
+    let latestDeploy = deploys[0];
+    // if there are deploys associated with the release
+    // render the most recent deploy (API will return data ordered by dateFinished)
+    // otherwise, render the dateCreated associated with release
+    return (
+      <div>
+        {deploys.length > 0 && latestDeploy.dateFinished
+          ? <div className="deploy">
+              <p className="m-b-0 text-light">
+                <span
+                  className="repo-label"
+                  style={{
+                    padding: 3,
+                    display: 'inline-block',
+                    width: 70,
+                    maxWidth: 86,
+                    textAlign: 'center',
+                    fontSize: 12
+                  }}>
+                  {latestDeploy.environment + ' '}
+                </span>
+                {' '}
+                <span className="icon icon-clock" />
+                {' '}
+                <TimeSince date={latestDeploy.dateFinished} />
+                {earlierDeploysNum > 0 &&
+                  <span className="tip" title={earlierDeploysNum + t(' earlier deploys')}>
+                    <span className="badge">{earlierDeploysNum}</span>
+                  </span>}
+              </p>
+            </div>
+          : <p className="m-b-0 text-light">
+              <span className="icon icon-clock" />
+              {' '}
+              <TimeSince date={releaseDateCreated} />
+            </p>}
+      </div>
+    );
+  }
+});
+
+export default LatestDeployOrReleaseTime;
diff --git a/src/sentry/static/sentry/app/components/versionHoverCard.jsx b/src/sentry/static/sentry/app/components/versionHoverCard.jsx
index 89c4479135..6b0025e826 100644
--- a/src/sentry/static/sentry/app/components/versionHoverCard.jsx
+++ b/src/sentry/static/sentry/app/components/versionHoverCard.jsx
@@ -27,7 +27,8 @@ const VersionHoverCard = React.createClass({
       error: false,
       data: {},
       visible: false,
-      hasRepos: false
+      hasRepos: false,
+      deploys: []
     };
   },
 
@@ -37,7 +38,7 @@ const VersionHoverCard = React.createClass({
 
   fetchData() {
     let {orgId, projectId, version} = this.props;
-    let done = _.after(2, () => {
+    let done = _.after(3, () => {
       this.setState({loading: false});
     });
 
@@ -74,6 +75,23 @@ const VersionHoverCard = React.createClass({
       },
       complete: done
     });
+
+    //deploys
+    let deployPath = `/organizations/${orgId}/releases/${encodeURIComponent(version)}/deploys/`;
+    this.api.request(deployPath, {
+      method: 'GET',
+      success: data => {
+        this.setState({
+          deploys: data
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true
+        });
+      },
+      complete: done
+    });
   },
 
   toggleHovercard() {
@@ -116,75 +134,123 @@ const VersionHoverCard = React.createClass({
   },
 
   renderBody() {
-    let {release} = this.state;
+    let {release, deploys} = this.state;
     let {version} = this.props;
-
     let lastCommit = release.lastCommit;
     let commitAuthor = lastCommit && lastCommit.author;
     let shortVersion = getShortVersion(version);
 
+    let recentDeploysByEnviroment = deploys.reduce(function(dbe, deploy) {
+      let {dateFinished, environment} = deploy;
+      if (!dbe.hasOwnProperty(environment)) {
+        dbe[environment] = dateFinished;
+      }
+
+      return dbe;
+    }, {});
+    let mostRecentDeploySlice = Object.keys(recentDeploysByEnviroment);
+    if (Object.keys(recentDeploysByEnviroment).length > 3) {
+      mostRecentDeploySlice = Object.keys(recentDeploysByEnviroment).slice(0, 3);
+    }
     return (
       <div>
         <div className="hovercard-header">
           <span className="truncate">Release {shortVersion}</span>
         </div>
         <div className="hovercard-body">
-          {this.state.loading
-            ? <LoadingIndicator mini={true} />
-            : this.state.error
-                ? <LoadingError />
-                : <div>
-                    <div className="row row-flex">
-                      <div className="col-xs-4">
-                        <h6>New Issues</h6>
-                        <div className="count">{release.newGroups}</div>
-                      </div>
-                      <div className="col-xs-8">
-                        <h6>
-                          {release.commitCount}
-                          {' '}
-                          {release.commitCount !== 1 ? t('commits ') : t('commit ')}
-                          {' '}
-                          {t('by ')}
-                          {' '}
-                          {release.authors.length}
-                          {' '}
-                          {release.authors.length !== 1 ? t('authors') : t('author')}
-                          {' '}
-                        </h6>
-                        <div className="avatar-grid">
-                          {release.authors.map((author, i) => {
-                            return (
-                              <span
-                                key={i}
-                                className="avatar-grid-item tip"
-                                title={author.name + ' ' + author.email}>
-                                <Avatar user={author} />
-                              </span>
-                            );
-                          })}
-                        </div>
-                      </div>
+          <div className="row row-flex">
+            <div className="col-xs-4">
+              <h6>New Issues</h6>
+              <div className="count">{release.newGroups}</div>
+            </div>
+            <div className="col-xs-8">
+              <h6>
+                {release.commitCount}
+                {' '}
+                {release.commitCount !== 1 ? t('commits ') : t('commit ')}
+                {' '}
+                {t('by ')}
+                {' '}
+                {release.authors.length}
+                {' '}
+                {release.authors.length !== 1 ? t('authors') : t('author')}
+                {' '}
+              </h6>
+              <div className="avatar-grid">
+                {release.authors.map((author, idx) => {
+                  return (
+                    <span
+                      className="avatar-grid-item tip"
+                      title={author.name + ' ' + author.email}
+                      key={idx}>
+                      <Avatar user={author} />
+                    </span>
+                  );
+                })}
+              </div>
+            </div>
+          </div>
+          {lastCommit &&
+            <div>
+              <div className="divider">
+                <h6 className="commit-heading">Last commit</h6>
+              </div>
+              <div className="commit">
+                <div className="commit-avatar">
+                  <Avatar user={commitAuthor || {username: '?'}} />
+                </div>
+                <div className="commit-meta">
+                  <TimeSince
+                    date={lastCommit.dateCreated}
+                    className="pull-right text-light"
+                  />
+                  <strong>
+                    {(commitAuthor && commitAuthor.name) || t('Unknown Author')}
+                  </strong>
+                </div>
+                <div className="commit-message break-word">
+                  {this.renderMessage(lastCommit.message)}
+                </div>
+              </div>
+            </div>}
+          {deploys.length > 0 &&
+            <div>
+              <div className="divider">
+                <h6 className="deploy-heading">Deploys</h6>
+              </div>
+              {mostRecentDeploySlice.map((env, idx) => {
+                let dateFinished = recentDeploysByEnviroment[env];
+                return (
+                  <div className="deploy" key={idx}>
+                    <div className="deploy-meta" style={{position: 'relative'}}>
+                      <strong
+                        className="repo-label truncate"
+                        style={{
+                          padding: 3,
+                          display: 'inline-block',
+                          width: 86,
+                          maxWidth: 86,
+                          textAlign: 'center',
+                          fontSize: 12
+                        }}>
+                        {env}
+                      </strong>
+                      {dateFinished &&
+                        <span
+                          className="text-light"
+                          style={{
+                            position: 'absolute',
+                            left: 98,
+                            width: '50%',
+                            padding: '3px 0'
+                          }}>
+                          <TimeSince date={dateFinished} />
+                        </span>}
                     </div>
-                    {lastCommit &&
-                      <div>
-                        <h6 className="commit-heading">Last commit</h6>
-                        <div className="commit">
-                          <div className="commit-avatar">
-                            <Avatar user={commitAuthor || {username: '?'}} />
-                          </div>
-                          <div className="commit-message truncate">
-                            {this.renderMessage(lastCommit.message)}
-                          </div>
-                          <div className="commit-meta">
-                            <strong>
-                              {(commitAuthor && commitAuthor.name) || t('Unknown Author')}
-                            </strong>&nbsp;
-                            <TimeSince date={lastCommit.dateCreated} />
-                          </div>
-                        </div>
-                      </div>}
-                  </div>}
+                  </div>
+                );
+              })}
+            </div>}
         </div>
       </div>
     );
@@ -198,7 +264,11 @@ const VersionHoverCard = React.createClass({
         {visible &&
           <div className="hovercard">
             <div className="hovercard-hoverlap" />
-            {this.state.hasRepos ? this.renderBody() : this.renderRepoLink()}
+            {this.state.loading
+              ? <div className="hovercard-body"><LoadingIndicator mini={true} /></div>
+              : this.state.error
+                  ? <div className="hovercard-body"><LoadingError /></div>
+                  : this.state.hasRepos ? this.renderBody() : this.renderRepoLink()}
           </div>}
       </span>
     );
diff --git a/src/sentry/static/sentry/app/views/projectReleases/releaseList.jsx b/src/sentry/static/sentry/app/views/projectReleases/releaseList.jsx
index ff323ba7f5..5e1bb102cc 100644
--- a/src/sentry/static/sentry/app/views/projectReleases/releaseList.jsx
+++ b/src/sentry/static/sentry/app/views/projectReleases/releaseList.jsx
@@ -3,6 +3,7 @@ import ReleaseStats from '../../components/releaseStats';
 import Count from '../../components/count';
 import TimeSince from '../../components/timeSince';
 import Version from '../../components/version';
+import LatestDeployOrReleaseTime from '../../components/latestDeployOrReleaseTime';
 
 const ReleaseList = React.createClass({
   propTypes: {
@@ -28,11 +29,11 @@ const ReleaseList = React.createClass({
                       version={release.version}
                     />
                   </h2>
-                  <p className="m-b-0 text-light">
-                    <span className="icon icon-clock" />
-                    {' '}
-                    <TimeSince date={release.dateCreated} />
-                  </p>
+                  <LatestDeployOrReleaseTime
+                    orgId={orgId}
+                    releaseDateCreated={release.dateCreated}
+                    version={release.version}
+                  />
                 </div>
                 <div className="col-sm-4 hidden-xs">
                   <ReleaseStats release={release} />
diff --git a/src/sentry/static/sentry/less/sentry-hovercard.less b/src/sentry/static/sentry/less/sentry-hovercard.less
index 0f999bc8fa..ceaddcca1c 100644
--- a/src/sentry/static/sentry/less/sentry-hovercard.less
+++ b/src/sentry/static/sentry/less/sentry-hovercard.less
@@ -5,40 +5,36 @@
 
 .hovercard {
   @hovercard-padding: 15px;
-  .dropdown-menu;
+  border: none;
+  border-radius: 2px;
+  box-shadow: 0 0 0 1px rgba(52, 60, 69, .2), 0 1px 3px rgba(70, 82, 98, .25);
+  -webkit-background-clip: padding-box;
+  -moz-background-clip: padding;
+  background-clip: padding-box;
+  background: #fff;
+  color: @gray-darker;
+  text-align: left;
+  position: absolute;
   display: block;
-  top: auto;
-  left: auto;
   right: 0;
   bottom: 35px;
   width: 295px;
   padding: 0;
-  border-radius: 4px;
+  border-radius: 5px;
   line-height: 1;
+  z-index: 1000;
+  box-shadow: 0 6px 24px 0 rgba(67,62,75,0.35), 0 1px 12px 0 rgba(67,61,74,0.16);
 
   &:before, &:after {
-    top: auto;
-    left: auto;
-  }
-
-  .hovercard-hoverlap {
+    width: 0;
+    height: 0;
+    content: "";
+    display: block;
     position: absolute;
-    bottom: -16px;
-    height: 16px;
-    left: 0;
-    right: 0;
-  }
-
-  &:before {
-    bottom: -22px;
-    right: 20px;
-    border-bottom: 11px solid transparent;
-    border-left: 11px solid transparent;
-    border-right: 11px solid transparent;
-    border-top: 11px solid rgba(52, 60, 69, 0.35);
   }
 
   &:after {
+    z-index: -1;
     bottom: -20px;
     right: 21px;
     border-bottom: 10px solid transparent;
@@ -47,11 +43,19 @@
     border-top: 10px solid #fff;
   }
 
+  .hovercard-hoverlap {
+    position: absolute;
+    bottom: -16px;
+    height: 16px;
+    left: 0;
+    right: 0;
+  }
+
   .hovercard-header {
-    padding: (@hovercard-padding/1.5) @hovercard-padding;
+    padding: @hovercard-padding;
     background: @white-dark;
     border-bottom: 1px solid @trim;
-    border-radius: 4px 4px 0 0;
+    border-radius: 5px 5px 0 0;
     font-weight: 600;
     word-wrap: break-word;
 
@@ -71,6 +75,31 @@
     min-height: 74px;
   }
 
+  .divider {
+    position: relative;
+    margin: 10px 0;
+    padding: 0 10px;
+
+    &:before {
+      display: block;
+      position: absolute;
+      content: "";
+      height: 1px;
+      top: 50%;
+      left: -@hovercard-padding;
+      right: -@hovercard-padding;
+      background: @trim;
+      opacity: .6;
+    }
+
+    h6 {
+      display: inline;
+      background: #fff;
+      padding: 0 5px;
+      margin-left: -15px;
+    }
+  }
+
   h6 {
     color: @50 !important;
     margin-bottom: 4px !important;
@@ -83,12 +112,20 @@
 
   .count {
     color: @80;
-    font-size: 24px;
+    font-size: 22px;
     padding: 3px 0 0;
   }
 
   .avatar-grid {
-    margin-top: 2px;
+    margin-top: 7px;
+
+    .avatar-grid-item {
+      margin-bottom: 0;
+
+      .avatar {
+        .square(20px);
+      }
+    }
 
     .tip {
       border-bottom: 0 !important;
@@ -102,17 +139,17 @@
   .commit {
     margin-top: 5px;
     position: relative;
-    padding: 1px 0 0 25px;
+    padding: 1px 0 0 38px;
     font-size: 13px;
 
     .commit-avatar {
       position: absolute;
-      .square(19px);
-      top: 2px;
+      .square(30px);
+      top: 1px;
       left: 0;
 
       .avatar {
-        .square(19px);
+        .square(30px);
       }
     }
 
@@ -124,6 +161,25 @@
     .commit-meta {
       font-size: 12px;
       color: @70;
+
+      strong {
+        color: @gray-dark;
+      }
+    }
+  }
+
+  .deploy-heading {
+    margin: 10px 0;
+  }
+
+  .deploy {
+    margin-top: 5px;
+    font-size: 13px;
+
+
+    .deploy-meta {
+      font-size: 12px;
+      color: @70;
     }
   }
 }
diff --git a/src/sentry/static/sentry/less/type.less b/src/sentry/static/sentry/less/type.less
index d097f82ff4..36678495e0 100644
--- a/src/sentry/static/sentry/less/type.less
+++ b/src/sentry/static/sentry/less/type.less
@@ -88,11 +88,11 @@ th, dt, strong {
 }
 
 .text-light {
-  color: @60;
+  color: @60 !important;
 }
 
 .text-dark {
-  color: @100;
+  color: @100 !important;
 }
 
 /**
