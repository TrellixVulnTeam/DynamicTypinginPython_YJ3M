commit 184c02f5e96a8198ba8e00b2b9ab20b01b3117da
Author: Priscila Oliveira <priscila.oliveira@sentry.io>
Date:   Fri Mar 6 11:39:33 2020 +0100

    ref(ui): added new datascrubbers settings (#17128)

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 90ee092f66..93d8379f8f 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -392,6 +392,18 @@ function routes() {
         }
         component={errorHandler(LazyLoad)}
       />
+
+      <Route
+        name={t('Data Privacy')}
+        path="data-privacy/"
+        component={errorHandler(LazyLoad)}
+        componentPromise={() =>
+          import(
+            /* webpackChunkName: "ProjectDataPrivacy" */ 'app/views/settings/projectDataPrivacy/projectDataPrivacy'
+          )
+        }
+      />
+
       <Route
         path="debug-symbols/"
         name="Debug Information Files"
diff --git a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.tsx b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.tsx
index ed15b195bb..e91ba86e38 100644
--- a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.tsx
+++ b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.tsx
@@ -46,6 +46,13 @@ export default function getConfiguration({project}: ConfigParams): NavigationSec
           title: t('Issue Owners'),
           description: t('Manage issue ownership rules for a project'),
         },
+        {
+          path: `${pathPrefix}/data-privacy/`,
+          title: t('Data Privacy'),
+          description: t('Configure Datascrubbers for a project'),
+          show: ({features}) => features!.has('datascrubbers-v2'),
+          badge: () => 'new',
+        },
         {
           path: `${pathPrefix}/data-forwarding/`,
           title: t('Data Forwarding'),
diff --git a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacy.tsx b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacy.tsx
new file mode 100644
index 0000000000..4437094b59
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacy.tsx
@@ -0,0 +1,29 @@
+import React from 'react';
+
+import Feature from 'app/components/acl/feature';
+import FeatureDisabled from 'app/components/acl/featureDisabled';
+import {PanelAlert} from 'app/components/panels';
+import {t} from 'app/locale';
+
+import ProjectDataPrivacyContent from './projectDataPrivacyContent';
+
+const ProjectDataPrivacy = ({
+  params,
+  organization,
+}: ProjectDataPrivacyContent['props']) => (
+  <Feature
+    features={['datascrubbers-v2']}
+    organization={organization}
+    renderDisabled={() => (
+      <FeatureDisabled
+        alert={PanelAlert}
+        features={organization.features}
+        featureName={t('Data Privacy - new')}
+      />
+    )}
+  >
+    <ProjectDataPrivacyContent params={params} organization={organization} />
+  </Feature>
+);
+
+export default ProjectDataPrivacy;
diff --git a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
new file mode 100644
index 0000000000..335a8da885
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
@@ -0,0 +1,77 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import {t} from 'app/locale';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import JsonForm from 'app/views/settings/components/forms/jsonForm';
+import Form from 'app/views/settings/components/forms/form';
+import {fields} from 'app/data/forms/projectGeneralSettings';
+import AsyncView from 'app/views/asyncView';
+import ProjectActions from 'app/actions/projectActions';
+import {Organization} from 'app/types';
+
+type Props = {
+  organization: Organization;
+  params: {
+    orgId: string;
+    projectId: string;
+  };
+};
+
+class ProjectDataPrivacyContent extends AsyncView<Props> {
+  static contextTypes = {
+    // left the router contextType to satisfy the compiler
+    router: PropTypes.object,
+  };
+
+  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {
+    const {orgId, projectId} = this.props.params;
+    return [['data', `/projects/${orgId}/${projectId}/`]];
+  }
+
+  renderBody() {
+    const {organization} = this.context;
+    const project = this.state.data;
+    const {orgId, projectId} = this.props.params;
+    const endpoint = `/projects/${orgId}/${projectId}/`;
+    const access = new Set(organization.access);
+    const features = new Set(organization.features);
+
+    return (
+      <React.Fragment>
+        <SettingsPageHeader title={t('Data Privacy')} />
+        <Form
+          saveOnBlur
+          allowUndo
+          initialData={project}
+          apiMethod="PUT"
+          apiEndpoint={endpoint}
+          onSubmitSuccess={resp => {
+            // This will update our project context
+            ProjectActions.updateSuccess(resp);
+          }}
+        >
+          <JsonForm
+            title={t('Data Privacy')}
+            additionalFieldProps={{
+              organization,
+            }}
+            features={features}
+            disabled={!access.has('project:write')}
+            fields={[
+              fields.dataScrubber,
+              fields.dataScrubberDefaults,
+              fields.scrubIPAddresses,
+              fields.sensitiveFields,
+              fields.safeFields,
+              fields.storeCrashReports,
+              fields.relayPiiConfig,
+            ]}
+          />
+        </Form>
+      </React.Fragment>
+    );
+  }
+}
+
+export default ProjectDataPrivacyContent;
diff --git a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
index 540ab51965..9d2115273e 100644
--- a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
@@ -31,6 +31,9 @@ import handleXhrErrorResponse from 'app/utils/handleXhrErrorResponse';
 import marked from 'app/utils/marked';
 import recreateRoute from 'app/utils/recreateRoute';
 import routeTitleGen from 'app/utils/routeTitle';
+import Link from 'app/components/links/link';
+import EmptyMessage from 'app/views/settings/components/emptyMessage';
+import Feature from 'app/components/acl/feature';
 
 class ProjectGeneralSettings extends AsyncView {
   static propTypes = {
@@ -471,19 +474,37 @@ class ProjectGeneralSettings extends AsyncView {
             />
           )}
 
-          <JsonForm
-            {...jsonFormProps}
-            title={t('Data Privacy')}
-            fields={[
-              fields.dataScrubber,
-              fields.dataScrubberDefaults,
-              fields.scrubIPAddresses,
-              fields.sensitiveFields,
-              fields.safeFields,
-              fields.storeCrashReports,
-              fields.relayPiiConfig,
-            ]}
-          />
+          <Feature features={['datascrubbers-v2']}>
+            {({hasFeature}) =>
+              hasFeature ? (
+                <Panel>
+                  <PanelHeader>{t('Data Privacy')}</PanelHeader>
+                  <EmptyMessage
+                    title={t('Data Privacy section now has its own tab')}
+                    description={
+                      <Link to={`/settings/${orgId}/projects/${projectId}/data-privacy/`}>
+                        {t('Go to Data Privacy')}
+                      </Link>
+                    }
+                  />
+                </Panel>
+              ) : (
+                <JsonForm
+                  {...jsonFormProps}
+                  title={t('Data Privacy')}
+                  fields={[
+                    fields.dataScrubber,
+                    fields.dataScrubberDefaults,
+                    fields.scrubIPAddresses,
+                    fields.sensitiveFields,
+                    fields.safeFields,
+                    fields.storeCrashReports,
+                    fields.relayPiiConfig,
+                  ]}
+                />
+              )
+            }
+          </Feature>
 
           <JsonForm
             {...jsonFormProps}
