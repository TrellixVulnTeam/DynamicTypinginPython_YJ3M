commit 3a7746dbd474459bfc7bc7049ec3d6cd33e81563
Author: David Cramer <dcramer@gmail.com>
Date:   Wed May 28 19:55:16 2014 -0700

    Initial work on sort_by support in ES

diff --git a/src/sentry/search/elastic_search/backend.py b/src/sentry/search/elastic_search/backend.py
index 2478782023..f5b4a93ec0 100644
--- a/src/sentry/search/elastic_search/backend.py
+++ b/src/sentry/search/elastic_search/backend.py
@@ -117,14 +117,27 @@ class ElasticSearchBackend(SearchBackend):
             # we are doing tags?
             raise NotImplementedError
 
+        if sort_by == 'date':
+            sort_clause = [{'last_seen': {'order': 'desc'}}]
+        elif sort_by == 'new':
+            sort_clause = [{'first_seen': {'order': 'desc'}}]
+        elif sort_by == 'priority':
+            sort_clause = [{'score': {'order': 'desc'}}]
+        elif sort_by == 'freq':
+            sort_clause = [{'times_seen': {'order': 'desc'}}]
+        elif sort_by == 'tottime':
+            raise NotImplementedError
+        elif sort_by == 'avgtime':
+            raise NotImplementedError
+        else:
+            raise ValueError('Invalid sort_by: %s' % (sort_by,))
+
         results = self.backend.search(
             index=self.index_prefix + 'sentry-1',
             doc_type='group',
             body={
                 'query': {'filtered': query_body},
-                'sort': [
-                    {'last_seen': {'order': 'desc'}},
-                ],
+                'sort': sort_clause,
             },
         )
         if not results.get('hits'):
diff --git a/tests/sentry/search/django/tests.py b/tests/sentry/search/django/tests.py
index 30884c71dc..96841d2a1a 100644
--- a/tests/sentry/search/django/tests.py
+++ b/tests/sentry/search/django/tests.py
@@ -55,8 +55,6 @@ class DjangoSearchBackendTest(TestCase):
             }
         )
 
-        print self.event1.data['tags'], self.event2.data['tags']
-
         for key, value in self.event1.data['tags']:
             GroupTagValue.objects.create(
                 group=self.group1,
diff --git a/tests/sentry/search/elastic_search/test_backend.py b/tests/sentry/search/elastic_search/test_backend.py
index 78b13a2c17..8928e43adb 100644
--- a/tests/sentry/search/elastic_search/test_backend.py
+++ b/tests/sentry/search/elastic_search/test_backend.py
@@ -2,7 +2,10 @@
 
 from __future__ import absolute_import
 
+from datetime import datetime
+
 from sentry.constants import STATUS_RESOLVED, STATUS_UNRESOLVED
+from sentry.models import GroupTagValue
 from sentry.search.elastic_search.backend import ElasticSearchBackend
 from sentry.testutils import TestCase
 from sentry.testutils.skips import requires_elastic_search
@@ -10,7 +13,12 @@ from sentry.testutils.skips import requires_elastic_search
 
 @requires_elastic_search
 class ElasticSearchTest(TestCase):
+    def create_backend(self):
+        return ElasticSearchBackend(index_prefix='test-')
+
     def setUp(self):
+        self.backend = self.create_backend()
+
         from elasticsearch import Elasticsearch
 
         self.conn = Elasticsearch()
@@ -19,35 +27,40 @@ class ElasticSearchTest(TestCase):
         except Exception:
             pass
 
-        self.backend = ElasticSearchBackend(index_prefix='test-')
+        self.backend = self.create_backend()
         self.backend.upgrade()
 
-    def test_simple(self):
-        project1 = self.project
-        project2 = self.create_project(team=self.team, name='estest')
-        group1 = self.create_group(
-            project=project1,
+        self.project1 = self.create_project(name='foo')
+        self.project2 = self.create_project(name='bar')
+
+        self.group1 = self.create_group(
+            project=self.project1,
             checksum='a' * 40,
             message='foo',
-            status=STATUS_RESOLVED,
+            status=STATUS_UNRESOLVED,
+            last_seen=datetime(2013, 8, 13, 3, 8, 24, 880386),
+            first_seen=datetime(2013, 7, 13, 3, 8, 24, 880386),
         )
-        event1 = self.create_event(
+        self.event1 = self.create_event(
             event_id='a' * 40,
-            group=group1,
+            group=self.group1,
             tags={
                 'server': 'example.com',
                 'env': 'production',
             }
         )
-        group2 = self.create_group(
-            project=project1,
+
+        self.group2 = self.create_group(
+            project=self.project1,
             checksum='b' * 40,
             message='bar',
-            status=STATUS_UNRESOLVED,
+            status=STATUS_RESOLVED,
+            last_seen=datetime(2013, 7, 14, 3, 8, 24, 880386),
+            first_seen=datetime(2013, 7, 14, 3, 8, 24, 880386),
         )
-        event2 = self.create_event(
+        self.event2 = self.create_event(
             event_id='b' * 40,
-            group=group2,
+            group=self.group2,
             tags={
                 'server': 'example.com',
                 'env': 'staging',
@@ -55,33 +68,65 @@ class ElasticSearchTest(TestCase):
             }
         )
 
-        self.backend.index(event1)
-        self.backend.index(event2)
+        for key, value in self.event1.data['tags']:
+            GroupTagValue.objects.create(
+                group=self.group1,
+                key=key,
+                value=value,
+            )
+        for key, value in self.event2.data['tags']:
+            GroupTagValue.objects.create(
+                group=self.group2,
+                key=key,
+                value=value,
+            )
+
+        self.backend.index(self.event1)
+        self.backend.index(self.event2)
 
         self.conn.indices.refresh(index='test-sentry-1')
 
-        results = self.backend.query(project1, query='foo')
+    def test_query(self):
+        backend = self.create_backend()
+
+        results = self.backend.query(self.project1, query='foo')
         assert len(results) == 1
-        assert results[0] == group1
+        assert results[0] == self.group1
 
-        results = self.backend.query(project1, query='bar')
+        results = self.backend.query(self.project1, query='bar')
         assert len(results) == 1
-        assert results[0] == group2
+        assert results[0] == self.group2
 
-        results = self.backend.query(project2, query='bar')
-        assert len(results) == 0
+    def test_sort(self):
+        backend = self.create_backend()
 
-        results = self.backend.query(project1, tags={'env': 'staging'})
-        assert len(results) == 1
-        assert results[0] == group2
+        results = self.backend.query(self.project1, sort_by='date')
+        assert len(results) == 2
+        assert results[0] == self.group1
+        assert results[1] == self.group2
 
-        results = self.backend.query(project1, query='foo', tags={'env': 'staging'})
-        assert len(results) == 0
+        results = self.backend.query(self.project1, sort_by='new')
+        assert len(results) == 2
+        assert results[0] == self.group2
+        assert results[1] == self.group1
+
+    def test_status(self):
+        results = self.backend.query(self.project1, status=STATUS_UNRESOLVED)
+        assert len(results) == 1
+        assert results[0] == self.group1
 
-        results = self.backend.query(project1, status=STATUS_RESOLVED)
+        results = self.backend.query(self.project1, status=STATUS_RESOLVED)
         assert len(results) == 1
-        assert results[0] == group1
+        assert results[0] == self.group2
 
-        results = self.backend.query(project1, status=STATUS_UNRESOLVED)
+    def test_tags(self):
+        results = self.backend.query(self.project1, tags={'env': 'staging'})
         assert len(results) == 1
-        assert results[0] == group2
+        assert results[0] == self.group2
+
+        results = self.backend.query(self.project1, tags={'env': 'example.com'})
+        assert len(results) == 0
+
+    def test_project(self):
+        results = self.backend.query(self.project2)
+        assert len(results) == 0
