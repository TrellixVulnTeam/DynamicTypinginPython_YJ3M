commit f67cc3dae7c58b7bdc191c7894831c3e94302ac6
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Jul 6 16:01:46 2016 +0500

    Test app and system frames independently

diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 5abdf6b63c..7e7bf7675d 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -77,33 +77,43 @@ class Symbolizer(object):
             rv['uuid'] = img['uuid']
         return rv
 
-    def symbolize_frame(self, frame, sdk_info=None, report_error=None):
-        error = None
+    def symbolize_app_frame(self, frame):
+        img = self.images.get(frame['object_addr'])
+        new_frame = self.symsynd_symbolizer.symbolize_frame(
+            frame, silent=False)
+        if new_frame is not None:
+            return self._process_frame(new_frame, img)
+
+    def symbolize_system_frame(self, frame, sdk_info):
         img = self.images.get(frame['object_addr'])
+        if img is None:
+            return
+
+        symbol = find_system_symbol(img, frame['instruction_addr'],
+                                    sdk_info)
+        if symbol is None:
+            return
 
+        symbol = demangle_symbol(symbol) or symbol
+        rv = dict(frame, symbol_name=symbol, filename=None,
+                  line=0, column=0, uuid=img['uuid'],
+                  object_name=img['name'])
+        return self._process_frame(rv, img)
+
+    def symbolize_frame(self, frame, sdk_info=None, report_error=None):
         # Step one: try to symbolize with cached dsym files.
         try:
-            new_frame = self.symsynd_symbolizer.symbolize_frame(
-                frame, silent=False)
-            if new_frame is not None:
-                return self._process_frame(new_frame, img)
+            rv = self.symbolize_app_frame(frame)
+            if rv is not None:
+                return rv
         except SymbolicationError as e:
-            error = e
+            if report_error is not None:
+                report_error(e)
 
         # If that does not work, look up system symbols.
-        if img is not None:
-            symbol = find_system_symbol(img, frame['instruction_addr'],
-                                        sdk_info)
-            if symbol is not None:
-                symbol = demangle_symbol(symbol) or symbol
-                rv = dict(frame, symbol_name=symbol, filename=None,
-                          line=0, column=0, uuid=img['uuid'],
-                          object_name=img['name'])
-                return self._process_frame(rv, img)
-
-        if report_error is not None and error is not None:
-            report_error(error)
-        return self._process_frame(frame, img)
+        rv = self.symbolize_system_frame(frame, sdk_info)
+        if rv is not None:
+            return rv
 
     def symbolize_backtrace(self, backtrace, sdk_info=None):
         rv = []
diff --git a/tests/sentry/lang/native/test_plugin.py b/tests/sentry/lang/native/test_plugin.py
index c83085e42a..ca8ceaa5f8 100644
--- a/tests/sentry/lang/native/test_plugin.py
+++ b/tests/sentry/lang/native/test_plugin.py
@@ -6,7 +6,7 @@ from sentry.testutils import TestCase
 
 class BasicResolvingIntegrationTest(TestCase):
 
-    @patch('sentry.lang.native.symbolizer.Symbolizer.symbolize_frame')
+    @patch('sentry.lang.native.symbolizer.Symbolizer.symbolize_app_frame')
     def test_frame_resolution(self, symbolize_frame):
         object_name = (
             "/var/containers/Bundle/Application/"
diff --git a/tests/sentry/lang/native/test_processor.py b/tests/sentry/lang/native/test_processor.py
index 35afc843bd..b7e92fe944 100644
--- a/tests/sentry/lang/native/test_processor.py
+++ b/tests/sentry/lang/native/test_processor.py
@@ -4,26 +4,51 @@ from sentry.testutils import TestCase
 from sentry.lang.native.plugin import resolve_frame_symbols
 
 
-class BasicResolvingFileTest(TestCase):
+OBJECT_NAME = (
+    "/var/containers/Bundle/Application/B33C37A8-F933-4B6B-9FFA-152282BFDF13/"
+    "SentryTest.app/SentryTest"
+)
+
+SDK_INFO = {
+    "dsym_type": "macho",
+    "sdk_name": "iOS",
+    "version_major": 9,
+    "version_minor": 3,
+    "version_patchlevel": 0
+}
 
-    @patch('sentry.lang.native.symbolizer.Symbolizer.symbolize_frame')
-    def test_frame_resolution(self, symbolize_frame):
-        object_name = (
-            "/var/containers/Bundle/Application/"
-            "B33C37A8-F933-4B6B-9FFA-152282BFDF13/"
-            "SentryTest.app/SentryTest"
-        )
 
-        symbolize_frame.return_value = {
+def patched_symbolize_app_frame(self, frame):
+    if frame['instruction_addr'] == 4295123760:
+        return {
             'filename': 'Foo.swift',
             'line': 42,
             'column': 23,
-            'object_name': object_name,
+            'object_name': OBJECT_NAME,
             'symbol_name': 'real_main',
             'symbol_addr': '0x1000262a0',
-            "instruction_addr": '0x100026330',
+            'instruction_addr': '0x100026330',
+        }
+
+
+def patched_symbolize_system_frame(self, frame, sdk_info):
+    assert sdk_info == SDK_INFO
+    if frame['instruction_addr'] == 4295123360:
+        return {
+            'object_name': '/usr/lib/whatever.dylib',
+            'symbol_name': 'whatever_system',
+            'symbol_addr': '0x100026110',
+            'instruction_addr': '0x1000261a0',
         }
 
+
+class BasicResolvingFileTest(TestCase):
+
+    @patch('sentry.lang.native.symbolizer.Symbolizer.symbolize_app_frame',
+           new=patched_symbolize_app_frame)
+    @patch('sentry.lang.native.symbolizer.Symbolizer.symbolize_system_frame',
+           new=patched_symbolize_system_frame)
+    def test_frame_resolution(self):
         event_data = {
             "sentry.interfaces.User": {
                 "ip_address": "31.172.207.97"
@@ -41,16 +66,10 @@ class BasicResolvingFileTest(TestCase):
                         "image_addr": 4295098368,
                         "cpu_type": 16777228,
                         "image_size": 32768,
-                        "name": object_name,
+                        "name": OBJECT_NAME,
                     }
                 ],
-                "sdk_info": {
-                    "dsym_type": "macho",
-                    "sdk_name": "iOS",
-                    "version_major": 9,
-                    "version_minor": 3,
-                    "version_patchlevel": 0
-                }
+                "sdk_info": SDK_INFO,
             },
             "sentry.interfaces.Exception": {
                 "values": [
@@ -74,6 +93,12 @@ class BasicResolvingFileTest(TestCase):
                                     "symbol_addr": 4295123616,
                                     "image_addr": 4295098368
                                 },
+                                {
+                                    "function": "whatever_system",
+                                    "instruction_addr": 4295123360,
+                                    "symbol_addr": 4295123216,
+                                    "image_addr": 4295092368
+                                },
                                 {
                                     "platform": "javascript",
                                     "function": "merge",
@@ -137,6 +162,11 @@ class BasicResolvingFileTest(TestCase):
         assert frames[1]['function'] == 'real_main'
         assert frames[1]['lineno'] == 42
         assert frames[1]['colno'] == 23
-        assert frames[1]['package'] == object_name
+        assert frames[1]['package'] == OBJECT_NAME
         assert frames[1]['instruction_addr'] == '0x100026330'
         assert frames[1].get('instruction_offset') is None
+
+        assert frames[2]['function'] == 'whatever_system'
+        assert frames[2]['package'] == '/usr/lib/whatever.dylib'
+        assert frames[2]['instruction_addr'] == '0x1000261a0'
+        assert frames[2].get('instruction_offset') == 144
