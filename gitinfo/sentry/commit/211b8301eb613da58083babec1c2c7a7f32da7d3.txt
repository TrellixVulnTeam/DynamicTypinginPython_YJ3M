commit 211b8301eb613da58083babec1c2c7a7f32da7d3
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jun 27 14:03:05 2017 -0700

    ui: various fixes for form context

diff --git a/src/sentry/static/sentry/app/components/forms/form.jsx b/src/sentry/static/sentry/app/components/forms/form.jsx
index d6f5e1f4cf..b8062c9c28 100644
--- a/src/sentry/static/sentry/app/components/forms/form.jsx
+++ b/src/sentry/static/sentry/app/components/forms/form.jsx
@@ -24,7 +24,7 @@ export default class Form extends React.Component {
   };
 
   static childContextTypes = {
-    form: React.PropTypes.object
+    form: React.PropTypes.object.isRequired
   };
 
   constructor(props) {
diff --git a/src/sentry/static/sentry/app/components/forms/formField.jsx b/src/sentry/static/sentry/app/components/forms/formField.jsx
index 9e38c9a0c2..9be0c4c218 100644
--- a/src/sentry/static/sentry/app/components/forms/formField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/formField.jsx
@@ -29,32 +29,37 @@ export default class FormField extends React.Component {
     form: React.PropTypes.object
   };
 
-  static childContextTypes = {
-    form: React.PropTypes.object
-  };
-
-  constructor(props) {
+  constructor(props, context) {
     super(props);
 
     this.state = {
-      value: this.getValue(props)
+      value: this.getValue(props, context)
     };
   }
 
-  getValue(props) {
-    let form = (this.context || {}).form;
+  componentWillReceiveProps(nextProps, nextContext) {
+    if (
+      this.props.value !== nextProps.value ||
+      (!defined(this.context.form) && defined(nextContext.form))
+    ) {
+      this.setState({value: this.getValue(nextProps, nextContext)});
+    }
+  }
+
+  getValue(props, context) {
+    let form = (context || this.context || {}).form;
     props = props || this.props;
     if (defined(props.value)) {
       return props.value;
     }
-    if (form) {
-      return idx(form, _ => _.data[props.name]);
+    if (form && form.data.hasOwnProperty(props.name)) {
+      return form.data[props.name];
     }
     return props.defaultValue || '';
   }
 
-  getError(props) {
-    let form = (this.context || {}).form;
+  getError(props, context) {
+    let form = (context || this.context || {}).form;
     props = props || this.props;
     if (defined(props.error)) {
       return props.error;
diff --git a/tests/js/spec/components/forms/__snapshots__/textField.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/textField.spec.jsx.snap
index 3f77cebda6..8b7f237c28 100644
--- a/tests/js/spec/components/forms/__snapshots__/textField.spec.jsx.snap
+++ b/tests/js/spec/components/forms/__snapshots__/textField.spec.jsx.snap
@@ -14,7 +14,7 @@ exports[`TextField render() renders with form context 1`] = `
       onChange={[Function]}
       required={false}
       type="text"
-      value=""
+      value="fieldValue"
     />
   </div>
 </div>
