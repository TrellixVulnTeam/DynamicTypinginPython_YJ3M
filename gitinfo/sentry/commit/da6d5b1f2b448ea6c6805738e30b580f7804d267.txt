commit da6d5b1f2b448ea6c6805738e30b580f7804d267
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Mon Jul 23 11:17:23 2018 -0700

    feat(jira): Support syncing JIRA status to Sentry issues (#8873)

diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index 303a27750e..64e1bfa57b 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -559,6 +559,27 @@ class JiraIntegration(Integration, IssueSyncMixin):
 
         client.transition_issue(external_issue.key, transition['id'])
 
+    def _get_done_statuses(self):
+        client = self.get_client()
+        statuses = client.get_valid_statuses()
+        return {
+            s['id'] for s in statuses if s['statusCategory']['key'] == 'done'
+        }
+
+    def should_unresolve(self, data):
+        done_statuses = self._get_done_statuses()
+        c_from = data['changelog']['from']
+        c_to = data['changelog']['to']
+        return c_from in done_statuses and \
+            c_to not in done_statuses
+
+    def should_resolve(self, data):
+        done_statuses = self._get_done_statuses()
+        c_from = data['changelog']['from']
+        c_to = data['changelog']['to']
+        return c_to in done_statuses and \
+            c_from not in done_statuses
+
 
 class JiraIntegrationProvider(IntegrationProvider):
     key = 'jira'
diff --git a/src/sentry/integrations/jira/webhooks.py b/src/sentry/integrations/jira/webhooks.py
index 39dfdc2d10..97683b026c 100644
--- a/src/sentry/integrations/jira/webhooks.py
+++ b/src/sentry/integrations/jira/webhooks.py
@@ -1,4 +1,5 @@
 from __future__ import absolute_import
+import logging
 
 from django.views.decorators.csrf import csrf_exempt
 
@@ -7,6 +8,8 @@ from sentry.api.base import Endpoint
 from sentry.integrations.atlassian_connect import AtlassianConnectValidationError, get_integration_from_jwt
 from sentry.models import sync_group_assignee_inbound
 
+logger = logging.getLogger('sentry.integrations.jira.webhooks')
+
 
 class JiraIssueUpdatedWebhook(Endpoint):
     authentication_classes = ()
@@ -16,6 +19,43 @@ class JiraIssueUpdatedWebhook(Endpoint):
     def dispatch(self, request, *args, **kwargs):
         return super(JiraIssueUpdatedWebhook, self).dispatch(request, *args, **kwargs)
 
+    def handle_assignee_change(self, integration, data):
+        assignee = data['issue']['fields']['assignee']
+        issue_key = data['issue']['key']
+
+        if assignee is None:
+            sync_group_assignee_inbound(
+                integration, None, issue_key, assign=False,
+            )
+        else:
+            sync_group_assignee_inbound(
+                integration, assignee['emailAddress'], issue_key, assign=True,
+            )
+
+    def handle_status_change(self, integration, data):
+        issue_key = data['issue']['key']
+
+        try:
+            changelog = next(
+                item for item in data['changelog']['items'] if item['field'] == 'status'
+            )
+        except StopIteration:
+            logger.info(
+                'missing-changelog', extra={
+                    'issue_key': issue_key,
+                    'integration_id': integration.id,
+                }
+            )
+            return
+
+        for org_id in integration.organizations.values_list('id', flat=True):
+            installation = integration.get_installation(org_id)
+
+            installation.sync_status_inbound(issue_key, {
+                'changelog': changelog,
+                'issue': data['issue'],
+            })
+
     def post(self, request, *args, **kwargs):
         try:
             token = request.META['HTTP_AUTHORIZATION'].split(' ', 1)[1]
@@ -28,26 +68,22 @@ class JiraIssueUpdatedWebhook(Endpoint):
             item for item in data['changelog']['items'] if item['field'] == 'assignee'
         )
 
-        if not assignee_changed:
-            return self.respond()
+        status_changed = any(
+            item for item in data['changelog']['items'] if item['field'] == 'status'
+        )
 
-        try:
-            integration = get_integration_from_jwt(
-                token, request.path, request.GET, method='POST'
-            )
-        except AtlassianConnectValidationError:
-            return self.respond(status=400)
+        if assignee_changed or status_changed:
+            try:
+                integration = get_integration_from_jwt(
+                    token, request.path, request.GET, method='POST'
+                )
+            except AtlassianConnectValidationError:
+                return self.respond(status=400)
 
-        assignee = data['issue']['fields']['assignee']
-        issue_key = data['issue']['key']
+            if assignee_changed:
+                self.handle_assignee_change(integration, data)
 
-        if assignee is None:
-            sync_group_assignee_inbound(
-                integration, None, issue_key, assign=False,
-            )
-        else:
-            sync_group_assignee_inbound(
-                integration, assignee['emailAddress'], issue_key, assign=True,
-            )
+            if status_changed:
+                self.handle_status_change(integration, data)
 
         return self.respond()
diff --git a/tests/sentry/integrations/jira/test_webhooks.py b/tests/sentry/integrations/jira/test_webhooks.py
index c08db43075..0fa66b66d6 100644
--- a/tests/sentry/integrations/jira/test_webhooks.py
+++ b/tests/sentry/integrations/jira/test_webhooks.py
@@ -6,6 +6,7 @@ from mock import patch
 
 from django.core.urlresolvers import reverse
 
+from sentry.integrations.issues import IssueSyncMixin
 from sentry.models import Integration
 from sentry.testutils import APITestCase
 
@@ -58,6 +59,32 @@ SAMPLE_EDIT_ISSUE_PAYLOAD_ASSIGNEE = """
 }
 """
 
+SAMPLE_EDIT_ISSUE_PAYLOAD_STATUS = """
+{
+    "changelog": {
+        "items": [{
+            "from": "10101",
+            "field": "status",
+            "fromString": "Done",
+            "to": "3",
+            "toString": "In Progress",
+            "fieldtype": "jira",
+            "fieldId": "status"
+        }],
+        "id": "10196"
+    },
+    "issue": {
+        "fields": {
+            "project": {
+                "id": "10000",
+                "key": "APP"
+            }
+        },
+        "key": "APP-123"
+    }
+}
+"""
+
 
 class JiraSearchEndpointTest(APITestCase):
     @patch('sentry.integrations.jira.webhooks.sync_group_assignee_inbound')
@@ -105,3 +132,40 @@ class JiraSearchEndpointTest(APITestCase):
             mock_sync_group_assignee_inbound.assert_called_with(
                 integration, None, 'APP-123', assign=False,
             )
+
+    @patch.object(IssueSyncMixin, 'sync_status_inbound')
+    def test_simple_status_sync_inbound(self, mock_sync_status_inbound):
+        org = self.organization
+
+        integration = Integration.objects.create(
+            provider='jira',
+            name='Example Jira',
+        )
+        integration.add_organization(org.id)
+
+        path = reverse('sentry-extensions-jira-issue-updated')
+
+        with patch('sentry.integrations.jira.webhooks.get_integration_from_jwt', return_value=integration):
+            resp = self.client.post(
+                path,
+                data=json.loads(SAMPLE_EDIT_ISSUE_PAYLOAD_STATUS.strip()),
+                HTTP_AUTHORIZATION='JWT anexampletoken',
+            )
+            assert resp.status_code == 200
+            mock_sync_status_inbound.assert_called_with('APP-123', {
+                'changelog': {
+                    'from': '10101',
+                    'field': 'status',
+                    'fromString': 'Done',
+                    'to': '3',
+                    'toString': 'In Progress',
+                    'fieldtype': 'jira',
+                    'fieldId': 'status',
+                }, 'issue': {
+                    'fields': {
+                        'project': {
+                            'id': '10000', 'key': 'APP',
+                        }
+                    }, u'key': u'APP-123',
+                },
+            })
