commit c1335ef1507743943d9b1f70dc449ca0fd8b52ae
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 19 14:47:21 2016 -0700

    Improve auth redirect abstraction (#4165)
    
    - Added initiate_login helper to build default session
    - Move get_login_url into sentry.utils.auth
    - Ensure 2fa is reset upon login initialization

diff --git a/src/sentry/middleware/social_auth.py b/src/sentry/middleware/social_auth.py
index 097b5eb1bb..14e7251937 100644
--- a/src/sentry/middleware/social_auth.py
+++ b/src/sentry/middleware/social_auth.py
@@ -10,10 +10,10 @@ from __future__ import absolute_import
 
 from social_auth.middleware import SocialAuthExceptionMiddleware
 
+from sentry.utils import auth
 from sentry.utils.http import absolute_uri
-from sentry.web.helpers import get_login_url
 
 
 class SentrySocialAuthExceptionMiddleware(SocialAuthExceptionMiddleware):
     def get_redirect_uri(self, request, exception):
-        return absolute_uri(get_login_url())
+        return absolute_uri(auth.get_login_url())
diff --git a/src/sentry/utils/auth.py b/src/sentry/utils/auth.py
index 1eb6ad56d2..e76b6cb809 100644
--- a/src/sentry/utils/auth.py
+++ b/src/sentry/utils/auth.py
@@ -8,19 +8,20 @@ sentry.utils.auth
 from __future__ import absolute_import
 
 import six
-import time
 import logging
 
 from django.conf import settings
 from django.contrib.auth import login as _login
 from django.contrib.auth.backends import ModelBackend
-from django.core.urlresolvers import reverse
+from django.core.urlresolvers import reverse, resolve
+from time import time
 
 from sentry.models import User, Authenticator
-from sentry.web.helpers import get_login_url
 
 logger = logging.getLogger('sentry.auth')
 
+_LOGIN_URL = None
+
 
 class AuthUserPasswordExpired(Exception):
 
@@ -66,6 +67,44 @@ def has_pending_2fa(request):
     return request.session.get('_pending_2fa') is not None
 
 
+def get_login_url(reset=False):
+    global _LOGIN_URL
+
+    if _LOGIN_URL is None or reset:
+        # if LOGIN_URL resolves force login_required to it instead of our own
+        # XXX: this must be done as late as possible to avoid idempotent requirements
+        try:
+            resolve(settings.LOGIN_URL)
+        except Exception:
+            _LOGIN_URL = settings.SENTRY_LOGIN_URL
+        else:
+            _LOGIN_URL = settings.LOGIN_URL
+
+        if _LOGIN_URL is None:
+            _LOGIN_URL = reverse('sentry-login')
+    return _LOGIN_URL
+
+
+def initiate_login(request, next_url=None):
+    try:
+        del request.session['_after_2fa']
+    except KeyError:
+        pass
+
+    try:
+        del request.session['_pending_2fa']
+    except KeyError:
+        pass
+
+    if next_url:
+        request.session['_next'] = next_url
+    else:
+        try:
+            del request.session['_next']
+        except KeyError:
+            pass
+
+
 def get_login_redirect(request, default=None):
     if default is None:
         default = get_login_url()
diff --git a/src/sentry/web/decorators.py b/src/sentry/web/decorators.py
index cdeca8aeb3..2d2f180956 100644
--- a/src/sentry/web/decorators.py
+++ b/src/sentry/web/decorators.py
@@ -6,7 +6,8 @@ from django.http import HttpResponseRedirect
 from django.contrib import messages
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.web.helpers import render_to_response, get_login_url
+from sentry.utils import auth
+from sentry.web.helpers import render_to_response
 
 ERR_BAD_SIGNATURE = _('The link you followed is invalid or expired.')
 
@@ -15,12 +16,12 @@ def login_required(func):
     @wraps(func)
     def wrapped(request, *args, **kwargs):
         if not request.user.is_authenticated():
-            request.session['_next'] = request.get_full_path()
+            auth.initiate_login(request, next_url=request.get_full_path())
             if 'organization_slug' in kwargs:
                 redirect_uri = reverse('sentry-auth-organization',
                                        args=[kwargs['organization_slug']])
             else:
-                redirect_uri = get_login_url()
+                redirect_uri = auth.get_login_url()
             return HttpResponseRedirect(redirect_uri)
         return func(request, *args, **kwargs)
     return wrapped
@@ -32,7 +33,7 @@ def signed_auth_required(func):
         if not request.user_from_signed_request:
             messages.add_message(
                 request, messages.ERROR, ERR_BAD_SIGNATURE)
-            return HttpResponseRedirect(get_login_url())
+            return HttpResponseRedirect(auth.get_login_url())
         return func(request, *args, **kwargs)
     return wrapped
 
diff --git a/src/sentry/web/frontend/accept_organization_invite.py b/src/sentry/web/frontend/accept_organization_invite.py
index 5075629c4f..58398a25e0 100644
--- a/src/sentry/web/frontend/accept_organization_invite.py
+++ b/src/sentry/web/frontend/accept_organization_invite.py
@@ -10,6 +10,7 @@ from sentry.models import (
     AuditLogEntryEvent, OrganizationMember, Project
 )
 from sentry.signals import member_joined
+from sentry.utils import auth
 from sentry.web.frontend.base import BaseView
 
 ERR_INVITE_INVALID = _('The invite link you followed is not valid.')
@@ -72,7 +73,7 @@ class AcceptOrganizationInviteView(BaseView):
 
         if not request.user.is_authenticated():
             # Show login or register form
-            request.session['_next'] = request.get_full_path()
+            auth.initiate_login(request, next_url=request.get_full_path())
             request.session['can_register'] = True
             request.session['invite_email'] = om.email
 
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index ba3237f4d5..4b52c60fe0 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -28,8 +28,8 @@ from sentry.web.forms.accounts import (
     AccountSettingsForm, AppearanceSettingsForm,
     RecoverPasswordForm, ChangePasswordRecoverForm,
 )
-from sentry.web.helpers import render_to_response, get_login_url
-from sentry.utils.auth import get_auth_providers, get_login_redirect
+from sentry.web.helpers import render_to_response
+from sentry.utils import auth
 
 
 def send_password_recovery_mail(user):
@@ -46,7 +46,7 @@ def send_password_recovery_mail(user):
 
 @login_required
 def login_redirect(request):
-    login_url = get_login_redirect(request)
+    login_url = auth.get_login_redirect(request)
     return HttpResponseRedirect(login_url)
 
 
@@ -195,7 +195,7 @@ def settings(request):
         'form': form,
         'page': 'settings',
         'has_2fa': Authenticator.objects.user_has_2fa(request.user),
-        'AUTH_PROVIDERS': get_auth_providers(),
+        'AUTH_PROVIDERS': auth.get_auth_providers(),
     })
     return render_to_response('sentry/account/settings.html', context, request)
 
@@ -229,7 +229,7 @@ def avatar_settings(request):
     context = csrf(request)
     context.update({
         'page': 'avatar',
-        'AUTH_PROVIDERS': get_auth_providers(),
+        'AUTH_PROVIDERS': auth.get_auth_providers(),
     })
     return render_to_response('sentry/account/avatar.html', context, request)
 
@@ -258,7 +258,7 @@ def appearance_settings(request):
     context.update({
         'form': form,
         'page': 'appearance',
-        'AUTH_PROVIDERS': get_auth_providers(),
+        'AUTH_PROVIDERS': auth.get_auth_providers(),
     })
     return render_to_response('sentry/account/appearance.html', context, request)
 
@@ -280,7 +280,7 @@ def email_unsubscribe_project(request, project_id):
         if 'cancel' not in request.POST:
             UserOption.objects.set_value(
                 request.user, project, 'mail:alert', 0)
-        return HttpResponseRedirect(get_login_url())
+        return HttpResponseRedirect(auth.get_login_url())
 
     context = csrf(request)
     context['project'] = project
@@ -296,7 +296,7 @@ def list_identities(request):
 
     identity_list = list(UserSocialAuth.objects.filter(user=request.user))
 
-    AUTH_PROVIDERS = get_auth_providers()
+    AUTH_PROVIDERS = auth.get_auth_providers()
 
     context = csrf(request)
     context.update({
diff --git a/src/sentry/web/frontend/admin.py b/src/sentry/web/frontend/admin.py
index 5edc6ecf81..c10676a144 100644
--- a/src/sentry/web/frontend/admin.py
+++ b/src/sentry/web/frontend/admin.py
@@ -33,13 +33,14 @@ from sentry.web.decorators import requires_admin
 from sentry.web.forms import (
     ChangeUserForm, NewUserForm, RemoveUserForm, TestEmailForm
 )
-from sentry.web.helpers import render_to_response, render_to_string, get_login_url
+from sentry.utils import auth
+from sentry.web.helpers import render_to_response, render_to_string
 
 
 def configure_plugin(request, slug):
     plugin = plugins.get(slug)
     if not plugin.has_site_conf():
-        return HttpResponseRedirect(get_login_url())
+        return HttpResponseRedirect(auth.get_login_url())
 
     view = plugin.configure(request=request)
     if isinstance(view, HttpResponse):
@@ -58,7 +59,7 @@ def configure_plugin(request, slug):
 @csrf_protect
 def create_new_user(request):
     if not request.is_superuser():
-        return HttpResponseRedirect(get_login_url())
+        return HttpResponseRedirect(auth.get_login_url())
 
     form = NewUserForm(request.POST or None, initial={
         'send_welcome_mail': True,
@@ -77,7 +78,7 @@ def create_new_user(request):
             context = {
                 'username': user.username,
                 'password': password,
-                'url': absolute_uri(get_login_url()),
+                'url': absolute_uri(auth.get_login_url()),
             }
             body = render_to_string('sentry/emails/welcome_mail.txt', context, request)
 
@@ -105,7 +106,7 @@ def create_new_user(request):
 @csrf_protect
 def edit_user(request, user_id):
     if not request.is_superuser():
-        return HttpResponseRedirect(get_login_url())
+        return HttpResponseRedirect(auth.get_login_url())
 
     try:
         user = User.objects.get(pk=user_id)
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 716647e527..78a0ce4a5f 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -19,7 +19,8 @@ from sentry.models import (
     AuditLogEntry, Organization, OrganizationMember, OrganizationStatus, Project,
     ProjectStatus, Team, TeamStatus
 )
-from sentry.web.helpers import get_login_url, render_to_response
+from sentry.utils import auth
+from sentry.web.helpers import render_to_response
 
 ERR_MISSING_SSO_LINK = _('You need to link your account with the SSO provider to continue.')
 
@@ -204,12 +205,12 @@ class BaseView(View, OrganizationMixin):
         )
 
     def handle_auth_required(self, request, *args, **kwargs):
-        request.session['_next'] = request.get_full_path()
+        auth.initiate_login(request, next_url=request.get_full_path())
         if 'organization_slug' in kwargs:
             redirect_to = reverse('sentry-auth-organization',
                                   args=[kwargs['organization_slug']])
         else:
-            redirect_to = get_login_url()
+            redirect_to = auth.get_login_url()
         return self.redirect(redirect_to)
 
     def is_sudo_required(self, request, *args, **kwargs):
@@ -338,7 +339,7 @@ class OrganizationView(BaseView):
             and self.valid_sso_required and not request.access.sso_is_valid
         )
 
-        request.session['_next'] = request.get_full_path()
+        auth.initiate_login(request, next_url=request.get_full_path())
 
         if needs_link:
             messages.add_message(
diff --git a/src/sentry/web/frontend/organization_member_settings.py b/src/sentry/web/frontend/organization_member_settings.py
index fc5ab276d0..af34e3c827 100644
--- a/src/sentry/web/frontend/organization_member_settings.py
+++ b/src/sentry/web/frontend/organization_member_settings.py
@@ -8,9 +8,9 @@ from django.utils.translation import ugettext_lazy as _, ugettext
 from sentry import roles
 from sentry.models import OrganizationMember, OrganizationMemberTeam, \
     Team, TeamStatus
+from sentry.utils import auth
 from sentry.web.frontend.base import OrganizationView
 from sentry.web.forms.edit_organization_member import EditOrganizationMemberForm
-from sentry.web.helpers import get_login_url
 
 
 class OrganizationMemberSettingsView(OrganizationView):
@@ -68,7 +68,7 @@ class OrganizationMemberSettingsView(OrganizationView):
                 id=member_id,
             )
         except OrganizationMember.DoesNotExist:
-            return self.redirect(get_login_url())
+            return self.redirect(auth.get_login_url())
 
         if request.POST.get('op') == 'reinvite' and member.is_pending:
             return self.resend_invite(request, organization, member)
diff --git a/src/sentry/web/frontend/twofactor.py b/src/sentry/web/frontend/twofactor.py
index 04ef7c411e..cc038af00e 100644
--- a/src/sentry/web/frontend/twofactor.py
+++ b/src/sentry/web/frontend/twofactor.py
@@ -9,7 +9,7 @@ from django.utils.translation import ugettext as _
 from sentry import options
 from sentry.web.frontend.base import BaseView
 from sentry.web.forms.accounts import TwoFactorForm
-from sentry.web.helpers import render_to_response, get_login_url
+from sentry.web.helpers import render_to_response
 from sentry.utils import auth, json
 from sentry.models import Authenticator
 
@@ -100,7 +100,7 @@ class TwoFactorAuthView(BaseView):
     def handle(self, request):
         user = auth.get_pending_2fa_user(request)
         if user is None or request.user.is_authenticated():
-            return HttpResponseRedirect(get_login_url())
+            return HttpResponseRedirect(auth.get_login_url())
 
         interfaces = Authenticator.objects.all_interfaces_for_user(user)
 
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index cc50afa248..bc3d9db869 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -11,7 +11,6 @@ import logging
 
 from django.conf import settings
 from django.contrib.auth.models import AnonymousUser
-from django.core.urlresolvers import reverse, resolve
 from django.http import HttpResponse
 from django.template import loader, RequestContext, Context
 
@@ -19,31 +18,11 @@ from sentry.api.serializers.base import serialize
 from sentry.auth import access
 from sentry.constants import EVENTS_PER_PAGE
 from sentry.models import Team
+from sentry.utils.auth import get_login_url  # NOQA: backwards compatibility
 
 logger = logging.getLogger('sentry')
 
 
-_LOGIN_URL = None
-
-
-def get_login_url(reset=False):
-    global _LOGIN_URL
-
-    if _LOGIN_URL is None or reset:
-        # if LOGIN_URL resolves force login_required to it instead of our own
-        # XXX: this must be done as late as possible to avoid idempotent requirements
-        try:
-            resolve(settings.LOGIN_URL)
-        except Exception:
-            _LOGIN_URL = settings.SENTRY_LOGIN_URL
-        else:
-            _LOGIN_URL = settings.LOGIN_URL
-
-        if _LOGIN_URL is None:
-            _LOGIN_URL = reverse('sentry-login')
-    return _LOGIN_URL
-
-
 def get_default_context(request, existing_context=None, team=None):
     from sentry import options
     from sentry.plugins import plugins
