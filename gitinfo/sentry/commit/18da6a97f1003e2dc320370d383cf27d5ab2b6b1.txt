commit 18da6a97f1003e2dc320370d383cf27d5ab2b6b1
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jan 7 20:25:59 2015 -0800

    Use threadlocal for cache (refs GH-1368)

diff --git a/src/sentry/models/groupmeta.py b/src/sentry/models/groupmeta.py
index 7626ca8b72..ce97688705 100644
--- a/src/sentry/models/groupmeta.py
+++ b/src/sentry/models/groupmeta.py
@@ -7,6 +7,8 @@ sentry.models.groupmeta
 """
 from __future__ import absolute_import
 
+import threading
+
 from celery.signals import task_postrun
 from django.core.signals import request_finished
 from django.db import models
@@ -24,7 +26,7 @@ class GroupMetaManager(BaseManager):
         super(GroupMetaManager, self).__init__(*args, **kwargs)
         task_postrun.connect(self.clear_local_cache)
         request_finished.connect(self.clear_local_cache)
-        self.__cache = {}
+        self.__local_cache = threading.local()
 
     def __getstate__(self):
         d = self.__dict__.copy()
@@ -33,14 +35,24 @@ class GroupMetaManager(BaseManager):
 
     def __setstate__(self, state):
         self.__dict__.update(state)
-        self.__cache = {}
+        self.__local_cache = threading.local()
+
+    def _get_cache(self):
+        if not hasattr(self.__local_cache, 'value'):
+            self.__local_cache.value = {}
+        return self.__local_cache.value
+
+    def _set_cache(self, value):
+        self.__local_cache.value = value
+
+    __cache = property(_get_cache, _set_cache)
 
     def contribute_to_class(self, model, name):
         model.CacheNotPopulated = CacheNotPopulated
         return super(GroupMetaManager, self).contribute_to_class(model, name)
 
     def clear_local_cache(self, **kwargs):
-        self.__cache = {}
+        self.__local_cache = threading.local()
 
     def populate_cache(self, instance_list):
         for group in instance_list:
