commit 6b04cfb6bcfc621777fcbfdba83bf0d94cd4b4fc
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Thu Jun 7 20:15:42 2018 +0200

    feat: JS SDK loader - CDN support (#8640)
    
    * feat: Add correct header for sdk loader
    
    * feat: Remove sdk url field from settings
    
    * ref: Remove unused data attr fetch
    
    * feat: Add .min.js for request, Remove middleware
    
    * feat: Add tests for vary header + minified version
    
    * ref: Move .min to seperate file, Move urls into settings
    
    * feat: Make changes to cdn url
    
    * feat: Remove placeholder in config, Add noop tmpl
    
    * ref: Remove regex check

diff --git a/src/sentry/api/endpoints/project_key_details.py b/src/sentry/api/endpoints/project_key_details.py
index 706691d9e5..508f091624 100644
--- a/src/sentry/api/endpoints/project_key_details.py
+++ b/src/sentry/api/endpoints/project_key_details.py
@@ -40,7 +40,6 @@ class RateLimitSerializer(serializers.Serializer):
 
 class KeySerializer(serializers.Serializer):
     name = serializers.CharField(max_length=200, required=False)
-    jsSdkUrl = serializers.URLField(max_length=255, required=False)
     isActive = serializers.BooleanField(required=False)
     rateLimit = RateLimitSerializer(required=False)
 
@@ -89,11 +88,6 @@ class ProjectKeyDetailsEndpoint(ProjectEndpoint):
         if serializer.is_valid():
             result = serializer.object
 
-            if result.get('jsSdkUrl') == '':
-                key.data = {}
-            else:
-                key.data = {'js_sdk_url': result.get('jsSdkUrl', None)}
-
             if result.get('name'):
                 key.label = result['name']
 
diff --git a/src/sentry/api/serializers/models/project_key.py b/src/sentry/api/serializers/models/project_key.py
index a3610edb92..28f0655cdf 100644
--- a/src/sentry/api/serializers/models/project_key.py
+++ b/src/sentry/api/serializers/models/project_key.py
@@ -2,14 +2,12 @@ from __future__ import absolute_import
 
 from sentry.api.serializers import Serializer, register
 from sentry.models import ProjectKey
-from sentry.relay import Config
 
 
 @register(ProjectKey)
 class ProjectKeySerializer(Serializer):
     def serialize(self, obj, attrs, user):
         name = obj.label or obj.public_key[:14]
-        config = Config(obj.project)
         d = {
             'id': obj.public_key,
             'name': name,
@@ -29,11 +27,8 @@ class ProjectKeySerializer(Serializer):
                 'csp': obj.csp_endpoint,
                 'security': obj.security_endpoint,
                 'minidump': obj.minidump_endpoint,
+                'cdn': obj.js_sdk_loader_cdn_url,
             },
-            'relay': {
-                'url': config.get_cdn_url(obj),
-            },
-            'jsSdkUrl': obj.data.get('js_sdk_url', None),
             'dateCreated': obj.date_added,
         }
         return d
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 690bd52286..ba6830e685 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -268,6 +268,7 @@ STATIC_URL = '/_static/{version}/'
 # cookies
 ANONYMOUS_STATIC_PREFIXES = (
     '/_static/', '/avatar/', '/organization-avatar/', '/team-avatar/', '/project-avatar/',
+    '/js-sdk-loader/'
 )
 
 STATICFILES_FINDERS = (
@@ -1343,3 +1344,13 @@ SENTRY_MINIDUMP_PATH = '/tmp/minidump'
 # Relay
 # List of PKs whitelisted by Sentry
 SENTRY_RELAY_WHITELIST_PK = []
+
+# CDN
+# If this is an absolute url like e.g.: https://js.sentry-cdn.com/
+# the full url will look like this: https://js.sentry-cdn.com/<public_key>.min.js
+# otherwise django reverse url lookup will be used.
+JS_SDK_LOADER_CDN_URL = ''
+# Version of the SDK - Used in header Surrogate-Key sdk/JS_SDK_LOADER_SDK_VERSION
+JS_SDK_LOADER_SDK_VERSION = ''
+# This should be the url pointing to the JS SDK
+JS_SDK_LOADER_DEFAULT_SDK_URL = ''
diff --git a/src/sentry/middleware/user.py b/src/sentry/middleware/user.py
index aa5e3e721e..48550b57de 100644
--- a/src/sentry/middleware/user.py
+++ b/src/sentry/middleware/user.py
@@ -12,6 +12,7 @@ class UserActiveMiddleware(object):
         'sentry.web.frontend.project_avatar',
         'sentry.web.frontend.team_avatar',
         'sentry.web.frontend.user_avatar',
+        'sentry.web.frontend.js_sdk_loader',
     )
 
     def process_view(self, request, view_func, view_args, view_kwargs):
diff --git a/src/sentry/models/projectkey.py b/src/sentry/models/projectkey.py
index 6d6b740c3a..836502ab5c 100644
--- a/src/sentry/models/projectkey.py
+++ b/src/sentry/models/projectkey.py
@@ -29,8 +29,9 @@ from sentry.db.models import (
 
 _uuid4_re = re.compile(r'^[a-f0-9]{32}$')
 
-
 # TODO(dcramer): pull in enum library
+
+
 class ProjectKeyStatus(object):
     ACTIVE = 0
     INACTIVE = 1
@@ -167,9 +168,7 @@ class ProjectKey(Model):
 
     @property
     def csp_endpoint(self):
-        endpoint = settings.SENTRY_PUBLIC_ENDPOINT or settings.SENTRY_ENDPOINT
-        if not endpoint:
-            endpoint = options.get('system.url-prefix')
+        endpoint = self.get_endpoint()
 
         return '%s%s?sentry_key=%s' % (
             endpoint,
@@ -179,9 +178,7 @@ class ProjectKey(Model):
 
     @property
     def security_endpoint(self):
-        endpoint = settings.SENTRY_PUBLIC_ENDPOINT or settings.SENTRY_ENDPOINT
-        if not endpoint:
-            endpoint = options.get('system.url-prefix')
+        endpoint = self.get_endpoint()
 
         return '%s%s?sentry_key=%s' % (
             endpoint,
@@ -191,9 +188,7 @@ class ProjectKey(Model):
 
     @property
     def minidump_endpoint(self):
-        endpoint = settings.SENTRY_PUBLIC_ENDPOINT or settings.SENTRY_ENDPOINT
-        if not endpoint:
-            endpoint = options.get('system.url-prefix')
+        endpoint = self.get_endpoint()
 
         return '%s%s/?sentry_key=%s' % (
             endpoint,
@@ -201,6 +196,23 @@ class ProjectKey(Model):
             self.public_key,
         )
 
+    @property
+    def js_sdk_loader_cdn_url(self):
+        if settings.JS_SDK_LOADER_CDN_URL:
+            return '%s%s.min.js' % (settings.JS_SDK_LOADER_CDN_URL, self.public_key)
+        else:
+            endpoint = self.get_endpoint()
+            return '%s%s' % (
+                endpoint,
+                reverse('sentry-js-sdk-loader', args=[self.public_key, '.min'])
+            )
+
+    def get_endpoint(self):
+        endpoint = settings.SENTRY_PUBLIC_ENDPOINT or settings.SENTRY_ENDPOINT
+        if not endpoint:
+            endpoint = options.get('system.url-prefix')
+        return endpoint
+
     def get_allowed_origins(self):
         from sentry.utils.http import get_origins
         return get_origins(self.project)
diff --git a/src/sentry/relay/config.py b/src/sentry/relay/config.py
index 1d24f89e33..725c1d17bd 100644
--- a/src/sentry/relay/config.py
+++ b/src/sentry/relay/config.py
@@ -5,10 +5,7 @@ import uuid
 from datetime import datetime
 from pytz import utc
 
-from django.core.urlresolvers import reverse
-
 from sentry.models import ProjectStatus, ProjectKey
-from sentry.utils.http import absolute_uri
 
 
 class Config(object):
@@ -51,7 +48,3 @@ class Config(object):
 
     def is_project_enabled(self):
         return self.project.status != ProjectStatus.VISIBLE
-
-    def get_cdn_url(self, project_key):
-        """Return the url to the js cdn file for a specific project key"""
-        return absolute_uri(reverse('sentry-relay-cdn-loader', args=[project_key.public_key]))
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
index df48a84012..dd0d482538 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
@@ -292,7 +292,7 @@ const KeySettings = createReactClass({
     data: SentryTypes.ProjectKey.isRequired,
     onRemove: PropTypes.func.isRequired,
     rateLimitsEnabled: PropTypes.bool,
-    relayEnabled: PropTypes.bool,
+    jsSdkLoaderEnabled: PropTypes.bool,
   },
 
   mixins: [ApiMixin],
@@ -332,7 +332,7 @@ const KeySettings = createReactClass({
       access,
       data,
       rateLimitsEnabled,
-      relayEnabled,
+      jsSdkLoaderEnabled,
       organization,
       project,
     } = this.props;
@@ -379,7 +379,7 @@ const KeySettings = createReactClass({
           hooksDisabled={this.state.hooksDisabled}
         />
 
-        {relayEnabled && (
+        {jsSdkLoaderEnabled && (
           <Form
             saveOnBlur
             allowUndo
@@ -390,23 +390,13 @@ const KeySettings = createReactClass({
             <Panel>
               <PanelHeader>{t('CDN')}</PanelHeader>
               <PanelBody>
-                <TextField
-                  name="jsSdkUrl"
-                  help={t(
-                    'Change this to the URL of the SDK of your choice. By default this is the latest SDK version. If you set an URL here you need to update it manually.'
-                  )}
-                  label={t('Url of SDK to be loaded')}
-                  placeholder={t('Leave empty to use default')}
-                  required={false}
-                />
-
                 <Field
                   help={t('Copy this into your website and you are good to go')}
                   inline={false}
                   flexibleControlStateSize
                 >
-                  <TextCopyInput>{`<script src='${data.relay
-                    .url}'></script>`}</TextCopyInput>
+                  <TextCopyInput>{`<script src='${data.dsn
+                    .cdn}'></script>`}</TextCopyInput>
                 </Field>
               </PanelBody>
             </Panel>
@@ -491,7 +481,7 @@ export default class ProjectKeyDetails extends AsyncView {
     let features = new Set(project.features);
     let hasRateLimitsEnabled = features.has('rate-limits');
     let orgFeatures = new Set(organization.features);
-    let hasRelayEnabled = orgFeatures.has('relay');
+    let hasjsSdkLoaderEnabled = orgFeatures.has('relay');
 
     return (
       <div className="ref-key-details">
@@ -505,7 +495,7 @@ export default class ProjectKeyDetails extends AsyncView {
           access={access}
           params={params}
           rateLimitsEnabled={hasRateLimitsEnabled}
-          relayEnabled={hasRelayEnabled}
+          jsSdkLoaderEnabled={hasjsSdkLoaderEnabled}
           data={data}
           onRemove={this.handleRemove}
         />
diff --git a/src/sentry/templates/sentry/js-sdk-loader-noop.js.tmpl b/src/sentry/templates/sentry/js-sdk-loader-noop.js.tmpl
new file mode 100644
index 0000000000..086a3e94f1
--- /dev/null
+++ b/src/sentry/templates/sentry/js-sdk-loader-noop.js.tmpl
@@ -0,0 +1 @@
+// Please set JS_SDK_LOADER_DEFAULT_SDK_URL in your config to point to a valid js file
diff --git a/src/sentry/templates/sentry/js-sdk-loader.js.tmpl b/src/sentry/templates/sentry/js-sdk-loader.js.tmpl
new file mode 100644
index 0000000000..43869e3730
--- /dev/null
+++ b/src/sentry/templates/sentry/js-sdk-loader.js.tmpl
@@ -0,0 +1,74 @@
+{% load sentry_helpers %}
+// Sentry Loader
+(function(_window, _document, _script, _onerror, _onunhandledrejection) {
+  // Create a namespace and attach function that will store captured exception
+  // Because functions are also objects, we can attach the queue itself straight to it and save some bytes
+  var queue = function(exception) {
+    queue.data.push(exception);
+  };
+  queue.data = [];
+
+  // Store reference to the old `onerror` handler and override it with our own function
+  // that will just push exceptions to the queue and call through old handler if we found one
+  var _oldOnerror = _window[_onerror];
+  _window[_onerror] = function(message, source, lineno, colno, exception) {
+    // Use keys as "data type" to save some characters"
+    queue({
+      e: [].slice.call(arguments)
+    });
+
+    if (_oldOnerror) _oldOnerror.apply(_window, arguments);
+  };
+
+  // Do the same store/queue/call operations for `onunhandledrejection` event
+  var _oldOnunhandledrejection = _window[_onunhandledrejection];
+  _window[_onunhandledrejection] = function(exception) {
+    queue({
+      p: exception.reason
+    });
+    if (_oldOnunhandledrejection) _oldOnunhandledrejection.apply(_window, arguments);
+  };
+
+  // Create a `script` tag with provided SDK `url` and attach it just before the first, already existing `script` tag
+  // Scripts that are dynamically created and added to the document are async by default,
+  // they don't block rendering and execute as soon as they download, meaning they could
+  // come out in the wrong order. Because of that we don't need async=1 as GA does.
+  // it was probably(?) a legacy behavior that they left to not modify few years old snippet
+  // https://www.html5rocks.com/en/tutorials/speed/script-loading/
+  var _currentScriptTag = _document.getElementsByTagName(_script)[0];
+  var _newScriptTag = _document.createElement(_script);
+  _newScriptTag.src = '{{ jsSdkUrl|safe }}';
+  _newScriptTag.crossorigin = 'anonymous';
+
+  // Once our SDK is loaded
+  _newScriptTag.addEventListener('load', function() {
+    try {
+      // Restore onerror/onunhandledrejection handlers
+      _window[_onerror] = _oldOnerror;
+      _window[_onunhandledrejection] = _oldOnunhandledrejection;
+
+      var data = queue.data;
+      var SDK = _window.Sentry;
+      // Configure it using provided DSN and config object
+      SDK.init({{ config|to_json|safe }});
+      // Because we installed the SDK, at this point we have an access to TraceKit's handler,
+      // which can take care of browser differences (eg. missing exception argument in onerror)
+      var tracekitErrorHandler = _window[_onerror];
+
+      // And capture all previously caught exceptions
+      if (data.length) {
+        for (var i = 0; i < data.length; i++) {
+          if (data[i].e) {
+            tracekitErrorHandler(data[i].e);
+          } else if (data[i].p) {
+            SDK.captureException(data[i].p);
+          }
+        }
+      }
+    } catch (o_O) {
+      console.log(o_O);
+    }
+  });
+
+  _currentScriptTag.parentNode.insertBefore(_newScriptTag, _currentScriptTag);
+})(window, document, 'script', 'onerror', 'onunhandledrejection');
diff --git a/src/sentry/templates/sentry/js-sdk-loader.min.js.tmpl b/src/sentry/templates/sentry/js-sdk-loader.min.js.tmpl
new file mode 100644
index 0000000000..b6bb08b4e2
--- /dev/null
+++ b/src/sentry/templates/sentry/js-sdk-loader.min.js.tmpl
@@ -0,0 +1,2 @@
+{% load sentry_helpers %}(function(c,a,g,e,h){var f=function(b){f.data.push(b)};f.data=[];var k=c[e];c[e]=function(b,a,e,d,h){f({e:[].slice.call(arguments)});k&&k.apply(c,arguments)};var l=c[h];c[h]=function(b){f({p:b.reason});l&&l.apply(c,arguments)};var m=a.getElementsByTagName(g)[0];a=a.createElement(g);a.src="{{ jsSdkUrl|safe }}";a.crossorigin="anonymous";a.addEventListener("load",function(){try{c[e]=k;c[h]=l;var b=f.data,a=c.Sentry;a.init({{ config|to_json|safe }});
+var g=c[e];if(b.length)for(var d=0;d<b.length;d++)b[d].e?g(b[d].e):b[d].p&&a.captureException(b[d].p)}catch(n){console.log(n)}});m.parentNode.insertBefore(a,m)})(window,document,"script","onerror","onunhandledrejection");
diff --git a/src/sentry/templates/sentry/relay-loader.js.tmpl b/src/sentry/templates/sentry/relay-loader.js.tmpl
deleted file mode 100644
index bdb86e12f1..0000000000
--- a/src/sentry/templates/sentry/relay-loader.js.tmpl
+++ /dev/null
@@ -1,104 +0,0 @@
-{% load sentry_helpers %}
-// We use so many arguments, to let minifier optimize naming as much as possible
-
-// url and namespace are placed last, so that users can change them when necessary
-
-// Everything after `_namespace` is a temp variable so that we don't have to use `var x =`
-// as engine creates it for us thanks to its hoisting functionality
-// as well as let Google Closure compiler optimize it
-
-(function(
-  _window,
-  _document,
-  _onerror,
-  _onunhandledrejection,
-  _namespace,
-  _newScriptTag,
-  _currentScriptTag,
-  _oldOnerror,
-  _oldOnunhandledrejection
-) {
-  // Store namespace reference inside a global variable, so user can change it
-  // in a function call, and we still know how to access it
-  _window.SentryObject = _namespace;
-
-  // Create a namespace and attach function that will store captured exception
-  // Because functions are also objects, we can attach the queue itself straight to it and save some bytes
-  _window[_namespace] =
-    _window[_namespace] ||
-    function(exception) {
-      (_window[_namespace].q = _window[_namespace].q || []).push(exception);
-    };
-
-  // Store reference to the old `onerror` handler and override it with our own function
-  // that will just push exceptions to the queue and call through old handler if we found one
-  _oldOnerror = _window[_onerror];
-  _window[_onerror] = function(message, source, lineno, colno, exception) {
-    _window[_namespace](exception);
-    if (_oldOnerror) _oldOnerror.apply(_window, arguments);
-  };
-
-  // Do the same store/queue/call operations for `onunhandledrejection` event
-  _oldOnunhandledrejection = _window[_onunhandledrejection];
-  _window[_onunhandledrejection] = function(exception) {
-    _window[_namespace](exception.reason);
-    if (_oldOnunhandledrejection) _oldOnunhandledrejection.apply(_window, arguments);
-  };
-
-
-  function drainQueue() {
-    var SDK = _window.Sentry;
-
-    {% if debug %}
-    console.log('Draining queue...');
-    {% endif %}
-
-    for (var i = 0; i < _window[_namespace].q.length; i++) {
-      {% if debug %}
-      console.log('Queued event captured');
-      {% endif %}
-      SDK.captureException(_window[_namespace].q[i]);
-    }
-  }
-
-  function attachSDK(url) {
-    var head = _document.getElementsByTagName('head')[0];
-    var script = _document.createElement('script');
-    script.type = 'text/javascript';
-    script.src = url;
-    head.appendChild(script);
-    return script;
-  }
-
-  function configSDK(config) {
-    _window.Sentry.init(config);
-    {% if debug %}
-    console.log('@sentry/browser configured');
-    {% endif %}
-  }
-
-  var script = attachSDK('{{ jsSdkUrl|safe }}');
-  {% if debug %}
-  console.log('Fetching @sentry/browser...');
-  {% endif %}
-  script.addEventListener('load', function() {
-    {% if debug %}
-    console.log('@sentry/browser fetched');
-    {% endif %}
-    configSDK({{ config|to_json|safe }});
-    if (_window[_namespace].q.length) {
-      {% if debug %}
-      console.log(_window[_namespace].q.length + ' exceptions captured and queued');
-      {% endif %}
-      drainQueue();
-    }
-  });
-})(
-  // predefined references, that should never be changed
-  window,
-  document,
-  'onerror',
-  'onunhandledrejection',
-  // namespace that will be used to store the exceptions captured before SDK has been loaded
-  '_sentry_errors'
-);
diff --git a/src/sentry/web/frontend/js_sdk_loader.py b/src/sentry/web/frontend/js_sdk_loader.py
new file mode 100644
index 0000000000..a7ca543149
--- /dev/null
+++ b/src/sentry/web/frontend/js_sdk_loader.py
@@ -0,0 +1,48 @@
+from __future__ import absolute_import
+
+from django.http import Http404
+from django.conf import settings
+
+from sentry.relay import Config
+from sentry.models import ProjectKey
+from sentry.web.frontend.base import BaseView
+from sentry.web.helpers import render_to_response
+
+
+CACHE_CONTROL = 'public, max-age=30, s-maxage=60, stale-while-revalidate=315360000, stale-if-error=315360000'
+
+
+class JavaScriptSdkLoader(BaseView):
+    auth_required = False
+
+    def get(self, request, public_key, minified):
+        """Returns a js file that can be integrated into a website"""
+        try:
+            key = ProjectKey.objects.get(
+                public_key=public_key
+            )
+        except ProjectKey.DoesNotExist:
+            raise Http404
+
+        sdk_url = settings.JS_SDK_LOADER_DEFAULT_SDK_URL
+
+        if not sdk_url:
+            tmpl = 'sentry/js-sdk-loader-noop.js.tmpl'
+        elif minified is not None:
+            tmpl = 'sentry/js-sdk-loader.min.js.tmpl'
+        else:
+            tmpl = 'sentry/js-sdk-loader.js.tmpl'
+
+        config = Config(key.project)
+        context = {
+            'config': config.get_project_key_config(key),
+            'jsSdkUrl': sdk_url
+        }
+
+        response = render_to_response(tmpl, context, content_type="text/javascript")
+
+        response['Cache-Control'] = CACHE_CONTROL
+        response['Surrogate-Key'] = 'project/%s sdk/%s sdk-loader' % (
+            key.project_id, settings.JS_SDK_LOADER_SDK_VERSION)
+
+        return response
diff --git a/src/sentry/web/frontend/relay_cdn.py b/src/sentry/web/frontend/relay_cdn.py
deleted file mode 100644
index 0779ca24c7..0000000000
--- a/src/sentry/web/frontend/relay_cdn.py
+++ /dev/null
@@ -1,31 +0,0 @@
-from __future__ import absolute_import
-
-from django.conf import settings
-
-from sentry.relay import Config
-from sentry.models import ProjectKey
-from sentry.web.frontend.base import BaseView
-from sentry.web.helpers import render_to_response
-
-
-DEFAULT_SDK_URL = 'https://s3.amazonaws.com/getsentry-cdn/@sentry/browser/0.5.2/bundle.min.js'
-
-
-class RelayJavaScriptLoader(BaseView):
-    auth_required = False
-
-    def get(self, request, public_key):
-        """Returns a js file that can be integrated into a website"""
-        key = ProjectKey.objects.get(
-            public_key=public_key
-        )
-
-        config = Config(key.project)
-        context = {
-            'config': config.get_project_key_config(key),
-            'jsSdkUrl': key.data.get('js_sdk_url', DEFAULT_SDK_URL),
-            'debug': settings.DEBUG
-        }
-
-        return render_to_response('sentry/relay-loader.js.tmpl', context,
-                                  content_type="text/javascript")
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 839269139c..0aa5fbe5db 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -58,7 +58,7 @@ from sentry.web.frontend.unsubscribe_issue_notifications import \
     UnsubscribeIssueNotificationsView
 from sentry.web.frontend.user_avatar import UserAvatarPhotoView
 from sentry.web.frontend.setup_wizard import SetupWizardView
-from sentry.web.frontend.relay_cdn import RelayJavaScriptLoader
+from sentry.web.frontend.js_sdk_loader import JavaScriptSdkLoader
 
 
 __all__ = ('urlpatterns', )
@@ -135,12 +135,12 @@ urlpatterns += patterns(
         name='sentry-media'
     ),
 
-    # Relay CDN
+    # Javascript SDK Loader
 
     url(
-        r'^cdn/(?P<public_key>[^/]+)\.js$',
-        RelayJavaScriptLoader.as_view(),
-        name='sentry-relay-cdn-loader'
+        r'^js-sdk-loader/(?P<public_key>[^/\.]+)(?:(?P<minified>\.min))?\.js$',
+        JavaScriptSdkLoader.as_view(),
+        name='sentry-js-sdk-loader'
     ),
 
     # API
diff --git a/tests/sentry/web/frontend/test_js_sdk_loader.py b/tests/sentry/web/frontend/test_js_sdk_loader.py
new file mode 100644
index 0000000000..8cd0f40333
--- /dev/null
+++ b/tests/sentry/web/frontend/test_js_sdk_loader.py
@@ -0,0 +1,72 @@
+from __future__ import absolute_import
+
+from exam import fixture
+from django.conf import settings
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import TestCase
+
+
+class JavaScriptSdkLoaderTest(TestCase):
+    @fixture
+    def path(self):
+        settings.JS_SDK_LOADER_SDK_VERSION = '0.5.2'
+        settings.JS_SDK_LOADER_DEFAULT_SDK_URL = 'https://s3.amazonaws.com/getsentry-cdn/@sentry/browser/%s/bundle.min.js' % settings.JS_SDK_LOADER_SDK_VERSION
+        return reverse('sentry-js-sdk-loader', args=[self.projectkey.public_key])
+
+    def test_404(self):
+        resp = self.client.get(reverse('sentry-js-sdk-loader', args=['abc']))
+        assert resp.status_code == 404
+
+    def test_noop(self):
+        settings.JS_SDK_LOADER_DEFAULT_SDK_URL = ''
+        resp = self.client.get(reverse('sentry-js-sdk-loader', args=[self.projectkey.public_key]))
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/js-sdk-loader-noop.js.tmpl')
+
+    def test_renders_js_loader(self):
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/js-sdk-loader.js.tmpl')
+        self.assertIn(self.projectkey.public_key, resp.content)
+        self.assertIn(settings.JS_SDK_LOADER_DEFAULT_SDK_URL, resp.content)
+
+    def test_minified(self):
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        min_resp = self.client.get(
+            reverse(
+                'sentry-js-sdk-loader',
+                args=[
+                    self.projectkey.public_key,
+                    '.min']))
+        assert min_resp.status_code == 200
+        self.assertTemplateUsed(min_resp, 'sentry/js-sdk-loader.min.js.tmpl')
+        self.assertIn(self.projectkey.public_key, min_resp.content)
+        self.assertIn(settings.JS_SDK_LOADER_DEFAULT_SDK_URL, min_resp.content)
+        assert len(resp.content) > len(min_resp.content)
+
+    def test_headers(self):
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200, resp
+        self.assertIn('stale-if-error', resp['Cache-Control'])
+        self.assertIn('stale-while-revalidate', resp['Cache-Control'])
+        self.assertIn('s-maxage', resp['Cache-Control'])
+        self.assertIn('max-age', resp['Cache-Control'])
+        self.assertIn('project/%s' % self.projectkey.project_id, resp['Surrogate-Key'])
+        self.assertIn('sdk/%s' % settings.JS_SDK_LOADER_SDK_VERSION, resp['Surrogate-Key'])
+        self.assertIn('sdk-loader', resp['Surrogate-Key'])
+        assert 'Content-Encoding' not in resp
+        assert 'Set-Cookie' not in resp
+        assert 'Vary' not in resp
+
+    def test_absolute_url(self):
+        assert reverse(
+            'sentry-js-sdk-loader',
+            args=[
+                self.projectkey.public_key,
+                '.min']) in self.projectkey.js_sdk_loader_cdn_url
+        settings.JS_SDK_LOADER_CDN_URL = 'https://js.sentry-cdn.com/'
+        assert 'https://js.sentry-cdn.com/%s.min.js' % (
+            self.projectkey.public_key == self.projectkey.js_sdk_loader_cdn_url
+        )
diff --git a/tests/sentry/web/frontend/test_relay_cdn.py b/tests/sentry/web/frontend/test_relay_cdn.py
deleted file mode 100644
index dc5c98a6ab..0000000000
--- a/tests/sentry/web/frontend/test_relay_cdn.py
+++ /dev/null
@@ -1,27 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-from exam import fixture
-
-from sentry.testutils import TestCase
-
-
-class RelayJavaScriptLoaderTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-relay-cdn-loader', args=[self.projectkey.public_key])
-
-    def test_renders_js_loader(self):
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/relay-loader.js.tmpl')
-        self.assertIn(self.projectkey.public_key, resp.content)
-
-    def test_renders_js_loader_with_different_url(self):
-        url = 'https://get-sentry.com'
-        self.projectkey.data = {'js_sdk_url': url}
-        self.projectkey.save()
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/relay-loader.js.tmpl')
-        self.assertIn(url, resp.content)
