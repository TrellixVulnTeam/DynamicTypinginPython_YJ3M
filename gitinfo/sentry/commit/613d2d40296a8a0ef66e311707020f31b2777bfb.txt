commit 613d2d40296a8a0ef66e311707020f31b2777bfb
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Oct 12 07:33:58 2014 -0700

    Add group merge support

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 4d2c036f33..60e24f2409 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -19,6 +19,7 @@ from sentry.models import (
 )
 from sentry.search.utils import parse_query
 from sentry.tasks.deletion import delete_group
+from sentry.tasks.merge import merge_group
 from sentry.utils.cursors import Cursor
 from sentry.utils.dates import parse_date
 
@@ -28,6 +29,7 @@ class GroupSerializer(serializers.Serializer):
         STATUS_CHOICES.keys(), STATUS_CHOICES.keys()
     ))
     isBookmarked = serializers.BooleanField()
+    merge = serializers.BooleanField()
 
 
 class ProjectGroupIndexEndpoint(Endpoint):
@@ -141,6 +143,7 @@ class ProjectGroupIndexEndpoint(Endpoint):
 
         - status=[resolved|unresolved|muted]
         - isBookmarked=[1|0]
+        - merge=[1|0]
 
         If any ids are out of scope this operation will succeed without any data
         mutation.
@@ -216,6 +219,18 @@ class ProjectGroupIndexEndpoint(Endpoint):
                 user=request.user,
             ).delete()
 
+        # XXX(dcramer): this feels a bit shady like it should be its own
+        # endpoint
+        if result.get('merge') and len(group_list) > 1:
+            primary_group = sorted(group_list, key=lambda x: -x.times_seen)[0]
+            for group in group_list:
+                if group == primary_group:
+                    continue
+                merge_group.delay(
+                    from_object_id=group.id,
+                    to_object_id=primary_group.id,
+                )
+
         return Response(status=204)
 
     def delete(self, request, project_id):
diff --git a/src/sentry/static/sentry/app/controllers/projectStream.js b/src/sentry/static/sentry/app/controllers/projectStream.js
index cd97b6f4db..3602ef0343 100644
--- a/src/sentry/static/sentry/app/controllers/projectStream.js
+++ b/src/sentry/static/sentry/app/controllers/projectStream.js
@@ -220,6 +220,21 @@
         });
       });
 
+      $('.stream-actions .action-merge').click(function(e){
+        e.preventDefault();
+
+        confirmAction({
+          actionLabel: 'Merge',
+          canActionAll: true,
+          action: function(selectedGroupIds){
+            actionGroups({
+              ids: selectedGroupIds,
+              data: {merge: '1'}
+            });
+          }
+        });
+      });
+
       $('.stream-actions .action-delete').click(function(e){
         e.preventDefault();
 
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index af16dd760d..4506dea5ff 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -1,4 +1,7 @@
+from __future__ import absolute_import
+
 from django.core.urlresolvers import reverse
+from mock import patch
 
 from sentry.constants import STATUS_MUTED, STATUS_RESOLVED, STATUS_UNRESOLVED
 from sentry.models import Group, GroupBookmark
@@ -121,6 +124,31 @@ class GroupUpdateTest(APITestCase):
         bookmark4 = GroupBookmark.objects.filter(group=group4, user=self.user)
         assert not bookmark4.exists()
 
+    @patch('sentry.api.endpoints.project_group_index.merge_group')
+    def test_merge(self, merge_group):
+        group1 = self.create_group(checksum='a' * 32, times_seen=1)
+        group2 = self.create_group(checksum='b' * 32, times_seen=50)
+        group3 = self.create_group(checksum='c' * 32, times_seen=2)
+        group4 = self.create_group(checksum='d' * 32)
+
+        self.login_as(user=self.user)
+        url = '{url}?id={group1.id}&id={group2.id}&id={group3.id}'.format(
+            url=reverse('sentry-api-0-project-group-index', kwargs={
+                'project_id': self.project.id
+            }),
+            group1=group1,
+            group2=group2,
+            group3=group3,
+        )
+        response = self.client.put(url, data={
+            'merge': '1',
+        }, format='json')
+        assert response.status_code == 204
+
+        assert len(merge_group.mock_calls) == 2
+        merge_group.delay.assert_any_call(from_object_id=group1.id, to_object_id=group2.id)
+        merge_group.delay.assert_any_call(from_object_id=group3.id, to_object_id=group2.id)
+
 
 class GroupDeleteTest(APITestCase):
     def test_global_is_forbidden(self):
