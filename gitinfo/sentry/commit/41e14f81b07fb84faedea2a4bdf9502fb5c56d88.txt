commit 41e14f81b07fb84faedea2a4bdf9502fb5c56d88
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu May 19 12:51:40 2016 +0200

    Added support for signing urls

diff --git a/src/sentry/middleware/auth.py b/src/sentry/middleware/auth.py
index 352e3b53e1..971ca258ad 100644
--- a/src/sentry/middleware/auth.py
+++ b/src/sentry/middleware/auth.py
@@ -2,6 +2,18 @@ from __future__ import absolute_import
 
 from django.contrib.auth import middleware
 
+from sentry.utils.linksign import process_signature
+
 
 class AuthenticationMiddleware(middleware.AuthenticationMiddleware):
-    pass
+
+    def process_request(self, request):
+        middleware.AuthenticationMiddleware.process_request(self, request)
+        request.user_from_signed_request = False
+
+        # If there is a valid signature on the request we override the
+        # user with the user contained within the signature.
+        user = process_signature(request)
+        if user is not None:
+            request.user = user
+            request.user_from_signed_request = True
diff --git a/src/sentry/utils/linksign.py b/src/sentry/utils/linksign.py
new file mode 100644
index 0000000000..8f0ed33dc2
--- /dev/null
+++ b/src/sentry/utils/linksign.py
@@ -0,0 +1,54 @@
+from django.core import signing
+from django.core.urlresolvers import reverse
+
+from sentry.models import User
+from sentry.utils.http import absolute_uri
+from sentry.utils.numbers import base36_encode
+
+
+def get_signer():
+    return signing.TimestampSigner(salt='sentry-link-signature')
+
+
+def generate_signed_link(user, viewname, args=None, kwargs=None):
+    """This returns an absolute URL where the given user is signed in for
+    the given viewname with args and kwargs.  This returns a redirect link
+    that if followed sends the user to another URL which carries another
+    signature that is valid for that URL only.
+    """
+    if not user.is_authenticated():
+        raise RuntimeError('Need an authenticated user to sign a link.')
+
+    path = reverse(viewname, args=args, kwargs=kwargs)
+    item = '%s|%s' % (path, user.id)
+    signature = ':'.join(get_signer().sign(item).rsplit(':', 2)[1:])
+
+    return '%s?_=%s:%s' % (
+        absolute_uri(path),
+        base36_encode(user.id),
+        signature,
+    )
+
+
+def process_signature(request, max_age=60 * 60 * 24 * 2):
+    """Given a request object this validates the signature from the
+    current request and returns the user.
+    """
+    sig = request.GET.get('_')
+    if not sig or sig.count(':') < 2:
+        return None
+
+    signed_data = '%s|%s' % (request.path, sig)
+    try:
+        data = get_signer().unsign(signed_data, max_age=max_age)
+    except signing.BadSignature:
+        return None
+
+    signed_path, user_id = data.rsplit('|', 1)
+    if signed_path != request.path:
+        return None
+
+    try:
+        return User.objects.get(pk=int(user_id))
+    except User.DoesNotExist:
+        return None
