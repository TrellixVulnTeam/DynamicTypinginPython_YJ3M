commit e995a54054f1157df34a09a7ca41b375bb749f16
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Mar 31 13:52:43 2016 -0700

    Add an InvalidFrame marker in Stacktraces
    
    Rather than discard an entire stacktrace when there's one malformed
    frame, opt to store an InvalidFrame instance.
    
    Fixes GH-2808

diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 8b48f78a18..d81b3a8ad1 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -197,6 +197,14 @@ def handle_nan(value):
     return value
 
 
+class InvalidFrame(Interface):
+    def __init__(self, reason):
+        self._data = {'errors': [reason]}
+
+    def get_hash(self):
+        return ['<invalid_frame>']
+
+
 class Frame(Interface):
     @classmethod
     def to_python(cls, data):
@@ -207,7 +215,7 @@ class Frame(Interface):
 
         for name in ('abs_path', 'filename', 'function', 'module'):
             if not isinstance(data.get(name), (string_types, NoneType)):
-                raise InterfaceValidationError("Invalid value for '%s'" % name)
+                return InvalidFrame("Invalid value for '%s'" % name)
 
         # absolute path takes priority over filename
         # (in the end both will get set)
@@ -226,7 +234,7 @@ class Frame(Interface):
                 filename = abs_path
 
         if not (filename or function or module):
-            raise InterfaceValidationError("No 'filename' or 'function' or 'module'")
+            return InvalidFrame("No 'filename' or 'function' or 'module'")
 
         if function == '?':
             function = None
@@ -260,12 +268,12 @@ class Frame(Interface):
         try:
             in_app = validate_bool(data.get('in_app'), False)
         except AssertionError:
-            raise InterfaceValidationError("Invalid value for 'in_app'")
+            return InvalidFrame("Invalid value for 'in_app'")
 
         instruction_offset = data.get('instruction_offset')
         if instruction_offset is not None and \
            not isinstance(instruction_offset, (int, long)):
-            raise InterfaceValidationError("Invalid value for 'instruction_offset'")
+            return InvalidFrame("Invalid value for 'instruction_offset'")
 
         kwargs = {
             'abs_path': trim(abs_path, 256),
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index cc7b283cdd..2939cb2852 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -145,6 +145,18 @@ const Frame = React.createClass({
     if (data.inApp) {
       title.push(<span key="in-app"><span className="divider"/>{t('application')}</span>);
     }
+
+    if (!title.length) {
+      title = [<code key="title">{'<invalid frame>'}</code>];
+      if (defined(data.errors)) {
+        title.push(
+          <a key="frame-errors" className="in-at tip original-src" data-title={data.errors.join(', ')}>
+            <span className="icon-question" />
+          </a>
+        );
+      }
+    }
+
     return title;
   },
 
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index 115a4ecb71..2e64f9b0c2 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -10,7 +10,7 @@ from exam import fixture
 
 from sentry.interfaces.base import InterfaceValidationError
 from sentry.interfaces.stacktrace import (
-    Frame, Stacktrace, get_context, slim_frame_data
+    Frame, InvalidFrame, Stacktrace, get_context, slim_frame_data
 )
 from sentry.models import Event
 from sentry.testutils import TestCase
@@ -45,9 +45,10 @@ class StacktraceTest(TestCase):
         assert interface == event.interfaces['sentry.interfaces.Stacktrace']
 
     def test_requires_filename(self):
-        with self.assertRaises(InterfaceValidationError):
-            Stacktrace.to_python(dict(frames=[{}]))
-
+        assert isinstance(
+            Stacktrace.to_python(dict(frames=[{}])).frames[0],
+            InvalidFrame,
+        )
         Stacktrace.to_python(dict(frames=[{
             'filename': 'foo.py',
         }]))
@@ -393,26 +394,22 @@ class StacktraceTest(TestCase):
         self.assertEquals(result, 'Stacktrace (most recent call last):\n\n  File "foo", line 3, in biz\n    def foo(r):\n  File "bar", line 5, in baz\n    return None')
 
     def test_bad_input(self):
-        with self.assertRaises(InterfaceValidationError):
-            Frame.to_python({
-                'filename': 1,
-            })
-
-        with self.assertRaises(InterfaceValidationError):
-            Frame.to_python({
-                'filename': 'foo',
-                'abs_path': 1,
-            })
-
-        with self.assertRaises(InterfaceValidationError):
-            Frame.to_python({
-                'function': 1,
-            })
-
-        with self.assertRaises(InterfaceValidationError):
-            Frame.to_python({
-                'module': 1,
-            })
+        assert isinstance(Frame.to_python({
+            'filename': 1,
+        }), InvalidFrame)
+
+        assert isinstance(Frame.to_python({
+            'filename': 'foo',
+            'abs_path': 1,
+        }), InvalidFrame)
+
+        assert isinstance(Frame.to_python({
+            'function': 1,
+        }), InvalidFrame)
+
+        assert isinstance(Frame.to_python({
+            'module': 1,
+        }), InvalidFrame)
 
     def test_context_with_nan(self):
         self.assertEquals(
