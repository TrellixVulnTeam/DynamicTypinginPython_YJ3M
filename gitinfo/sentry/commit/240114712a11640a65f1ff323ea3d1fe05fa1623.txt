commit 240114712a11640a65f1ff323ea3d1fe05fa1623
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Oct 30 22:57:39 2012 -0700

    Move all test helpers into testutils

diff --git a/src/sentry/testutils.py b/src/sentry/testutils.py
index 7dcb373a1d..73acf1e098 100644
--- a/src/sentry/testutils.py
+++ b/src/sentry/testutils.py
@@ -6,4 +6,162 @@ sentry.testutils
 :license: BSD, see LICENSE for more details.
 """
 
-from sentry.utils import cached_property as fixture
+from __future__ import absolute_import
+
+import base64
+import time
+
+from sentry.conf import settings
+from sentry.utils import json
+from sentry.utils.auth import get_signature, get_auth_header
+from sentry.utils.compat import pickle
+
+
+from django.conf import settings as django_settings
+from django.core.cache import cache
+from django.core.management import call_command
+from django.core.urlresolvers import reverse
+from django.db import connections, DEFAULT_DB_ALIAS
+from django.test import TestCase, TransactionTestCase
+from django.test.client import Client
+
+from sentry.models import ProjectOption, Option
+from sentry.utils import cached_property
+
+
+fixture = cached_property
+
+
+class Settings(object):
+    """
+    Allows you to define settings that are required for this function to work.
+
+    >>> with Settings(SENTRY_LOGIN_URL='foo'): #doctest: +SKIP
+    >>>     print settings.SENTRY_LOGIN_URL #doctest: +SKIP
+    """
+
+    NotDefined = object()
+
+    def __init__(self, **overrides):
+        self.overrides = overrides
+        self._orig = {}
+        self._orig_sentry = {}
+
+    def __enter__(self):
+        for k, v in self.overrides.iteritems():
+            self._orig[k] = getattr(django_settings, k, self.NotDefined)
+            setattr(django_settings, k, v)
+            if k.startswith('SENTRY_'):
+                nk = k.split('SENTRY_', 1)[1]
+                self._orig_sentry[nk] = getattr(settings, nk, self.NotDefined)
+                setattr(settings, nk, v)
+
+    def __exit__(self, exc_type, exc_value, traceback):
+        for k, v in self._orig.iteritems():
+            if v is self.NotDefined:
+                delattr(django_settings, k)
+            else:
+                setattr(django_settings, k, v)
+        for k, v in self._orig_sentry.iteritems():
+            if v is self.NotDefined:
+                delattr(settings, k)
+            else:
+                setattr(settings, k, v)
+
+
+class BaseTestCase(object):
+    urls = 'tests.sentry.web.urls'
+
+    Settings = Settings
+
+    def _pre_setup(self):
+        cache.clear()
+        ProjectOption.objects.clear_cache()
+        Option.objects.clear_cache()
+        super(BaseTestCase, self)._pre_setup()
+
+    def _postWithKey(self, data, key=None):
+        resp = self.client.post(reverse('sentry-api-store'), {
+            'data': base64.b64encode(pickle.dumps(data)),
+            'key': settings.KEY,
+        })
+        return resp
+
+    def _makeMessage(self, data, key=None):
+        ts = time.time()
+        message = base64.b64encode(json.dumps(data))
+        sig = get_signature(message, ts, key)
+        return ts, message, sig
+
+    def _postWithSignature(self, data, key=None):
+        ts, message, sig = self._makeMessage(data, key)
+
+        resp = self.client.post(reverse('sentry-api-store'), message,
+            content_type='application/octet-stream',
+            HTTP_AUTHORIZATION=get_auth_header(sig, ts, '_postWithSignature', key),
+        )
+        return resp
+
+    def _postWithNewSignature(self, data, key=None):
+        ts, message, sig = self._makeMessage(data, key)
+
+        resp = self.client.post(reverse('sentry-api-store'), message,
+            content_type='application/octet-stream',
+            HTTP_X_SENTRY_AUTH=get_auth_header(sig, ts, '_postWithSignature', key),
+        )
+        return resp
+
+
+class TestCase(BaseTestCase, TestCase):
+    pass
+
+
+class TransactionTestCase(BaseTestCase, TransactionTestCase):
+    """
+    Subclass of ``django.test.TransactionTestCase`` that quickly tears down
+    fixtures and doesn't `flush` on setup.  This enables tests to be run in
+    any order.
+    """
+    urls = 'tests.urls'
+
+    def __call__(self, result=None):
+        """
+        Wrapper around default __call__ method to perform common Django test
+        set up. This means that user-defined Test Cases aren't required to
+        include a call to super().setUp().
+        """
+        self.client = getattr(self, 'client_class', Client)()
+        try:
+            self._pre_setup()
+        except (KeyboardInterrupt, SystemExit):
+            raise
+        except Exception:
+            import sys
+            result.addError(self, sys.exc_info())
+            return
+        try:
+            super(TransactionTestCase, self).__call__(result)
+        finally:
+            try:
+                self._post_teardown()
+            except (KeyboardInterrupt, SystemExit):
+                raise
+            except Exception:
+                import sys
+                result.addError(self, sys.exc_info())
+
+    def _get_databases(self):
+        if getattr(self, 'multi_db', False):
+            return connections
+        return [DEFAULT_DB_ALIAS]
+
+    def _fixture_setup(self):
+        for db in self._get_databases():
+            if hasattr(self, 'fixtures') and self.fixtures:
+                # We have to use this slightly awkward syntax due to the fact
+                # that we're using *args and **kwargs together.
+                call_command('loaddata', *self.fixtures, **{'verbosity': 0, 'database': db})
+
+    def _fixture_teardown(self):
+        for db in self._get_databases():
+            call_command('flush', verbosity=0, interactive=False, database=db)
diff --git a/tests/base.py b/tests/base.py
deleted file mode 100644
index bc75572370..0000000000
--- a/tests/base.py
+++ /dev/null
@@ -1,155 +0,0 @@
-from __future__ import absolute_import
-
-import base64
-import time
-
-from sentry.conf import settings
-from sentry.utils import json
-from sentry.utils.auth import get_signature, get_auth_header
-from sentry.utils.compat import pickle
-
-
-from django.conf import settings as django_settings
-from django.core.cache import cache
-from django.core.management import call_command
-from django.core.urlresolvers import reverse
-from django.db import connections, DEFAULT_DB_ALIAS
-from django.test import TestCase, TransactionTestCase
-from django.test.client import Client
-
-from sentry.models import ProjectOption, Option
-
-
-class Settings(object):
-    """
-    Allows you to define settings that are required for this function to work.
-
-    >>> with Settings(SENTRY_LOGIN_URL='foo'): #doctest: +SKIP
-    >>>     print settings.SENTRY_LOGIN_URL #doctest: +SKIP
-    """
-
-    NotDefined = object()
-
-    def __init__(self, **overrides):
-        self.overrides = overrides
-        self._orig = {}
-        self._orig_sentry = {}
-
-    def __enter__(self):
-        for k, v in self.overrides.iteritems():
-            self._orig[k] = getattr(django_settings, k, self.NotDefined)
-            setattr(django_settings, k, v)
-            if k.startswith('SENTRY_'):
-                nk = k.split('SENTRY_', 1)[1]
-                self._orig_sentry[nk] = getattr(settings, nk, self.NotDefined)
-                setattr(settings, nk, v)
-
-    def __exit__(self, exc_type, exc_value, traceback):
-        for k, v in self._orig.iteritems():
-            if v is self.NotDefined:
-                delattr(django_settings, k)
-            else:
-                setattr(django_settings, k, v)
-        for k, v in self._orig_sentry.iteritems():
-            if v is self.NotDefined:
-                delattr(settings, k)
-            else:
-                setattr(settings, k, v)
-
-
-class BaseTestCase(object):
-    urls = 'tests.sentry.web.urls'
-
-    Settings = Settings
-
-    def _pre_setup(self):
-        cache.clear()
-        ProjectOption.objects.clear_cache()
-        Option.objects.clear_cache()
-        super(BaseTestCase, self)._pre_setup()
-
-    def _postWithKey(self, data, key=None):
-        resp = self.client.post(reverse('sentry-api-store'), {
-            'data': base64.b64encode(pickle.dumps(data)),
-            'key': settings.KEY,
-        })
-        return resp
-
-    def _makeMessage(self, data, key=None):
-        ts = time.time()
-        message = base64.b64encode(json.dumps(data))
-        sig = get_signature(message, ts, key)
-        return ts, message, sig
-
-    def _postWithSignature(self, data, key=None):
-        ts, message, sig = self._makeMessage(data, key)
-
-        resp = self.client.post(reverse('sentry-api-store'), message,
-            content_type='application/octet-stream',
-            HTTP_AUTHORIZATION=get_auth_header(sig, ts, '_postWithSignature', key),
-        )
-        return resp
-
-    def _postWithNewSignature(self, data, key=None):
-        ts, message, sig = self._makeMessage(data, key)
-
-        resp = self.client.post(reverse('sentry-api-store'), message,
-            content_type='application/octet-stream',
-            HTTP_X_SENTRY_AUTH=get_auth_header(sig, ts, '_postWithSignature', key),
-        )
-        return resp
-
-
-class TestCase(BaseTestCase, TestCase):
-    pass
-
-
-class TransactionTestCase(BaseTestCase, TransactionTestCase):
-    """
-    Subclass of ``django.test.TransactionTestCase`` that quickly tears down
-    fixtures and doesn't `flush` on setup.  This enables tests to be run in
-    any order.
-    """
-    urls = 'tests.urls'
-
-    def __call__(self, result=None):
-        """
-        Wrapper around default __call__ method to perform common Django test
-        set up. This means that user-defined Test Cases aren't required to
-        include a call to super().setUp().
-        """
-        self.client = getattr(self, 'client_class', Client)()
-        try:
-            self._pre_setup()
-        except (KeyboardInterrupt, SystemExit):
-            raise
-        except Exception:
-            import sys
-            result.addError(self, sys.exc_info())
-            return
-        try:
-            super(TransactionTestCase, self).__call__(result)
-        finally:
-            try:
-                self._post_teardown()
-            except (KeyboardInterrupt, SystemExit):
-                raise
-            except Exception:
-                import sys
-                result.addError(self, sys.exc_info())
-
-    def _get_databases(self):
-        if getattr(self, 'multi_db', False):
-            return connections
-        return [DEFAULT_DB_ALIAS]
-
-    def _fixture_setup(self):
-        for db in self._get_databases():
-            if hasattr(self, 'fixtures') and self.fixtures:
-                # We have to use this slightly awkward syntax due to the fact
-                # that we're using *args and **kwargs together.
-                call_command('loaddata', *self.fixtures, **{'verbosity': 0, 'database': db})
-
-    def _fixture_teardown(self):
-        for db in self._get_databases():
-            call_command('flush', verbosity=0, interactive=False, database=db)
diff --git a/tests/sentry/app/tests.py b/tests/sentry/app/tests.py
index 345504b491..99caa74b45 100644
--- a/tests/sentry/app/tests.py
+++ b/tests/sentry/app/tests.py
@@ -3,7 +3,7 @@
 from __future__ import absolute_import
 
 from sentry import app
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class AppTest(TestCase):
diff --git a/tests/sentry/buffer/base/tests.py b/tests/sentry/buffer/base/tests.py
index d9b9f4d40b..3179a0810a 100644
--- a/tests/sentry/buffer/base/tests.py
+++ b/tests/sentry/buffer/base/tests.py
@@ -9,7 +9,7 @@ from django.utils import timezone
 from sentry.buffer.base import Buffer
 from sentry.models import Group, Project
 from sentry.tasks.process_buffer import process_incr
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class BufferTest(TestCase):
diff --git a/tests/sentry/buffer/redis/tests.py b/tests/sentry/buffer/redis/tests.py
index 47160ae43c..7bccba0cbf 100644
--- a/tests/sentry/buffer/redis/tests.py
+++ b/tests/sentry/buffer/redis/tests.py
@@ -10,7 +10,7 @@ from sentry.buffer.redis import RedisBuffer
 from sentry.models import Group, Project
 from sentry.tasks.process_buffer import process_incr
 from sentry.utils.compat import pickle
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class RedisBufferTest(TestCase):
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index ae089251cc..f6ad0668d2 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -16,7 +16,7 @@ from sentry.coreapi import project_from_id, project_from_api_key_and_id, \
   insert_data_to_database, validate_data
 from sentry.utils.auth import get_signature
 
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class BaseAPITest(TestCase):
diff --git a/tests/sentry/http/tests.py b/tests/sentry/http/tests.py
index cb646c35d5..cc249a6488 100644
--- a/tests/sentry/http/tests.py
+++ b/tests/sentry/http/tests.py
@@ -12,7 +12,7 @@ from raven import Client
 from sentry.conf import settings
 from sentry.models import Group, Event
 
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class RavenIntegrationTest(TestCase):
diff --git a/tests/sentry/interfaces/stacktrace/tests.py b/tests/sentry/interfaces/stacktrace/tests.py
index 2e3d3b02fc..9b34754f3e 100644
--- a/tests/sentry/interfaces/stacktrace/tests.py
+++ b/tests/sentry/interfaces/stacktrace/tests.py
@@ -7,7 +7,7 @@ import mock
 from sentry.interfaces import Stacktrace
 from sentry.models import Event
 
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class StacktraceTest(TestCase):
diff --git a/tests/sentry/interfaces/template/tests.py b/tests/sentry/interfaces/template/tests.py
index 68ef4e5c80..ef4820d035 100644
--- a/tests/sentry/interfaces/template/tests.py
+++ b/tests/sentry/interfaces/template/tests.py
@@ -7,7 +7,7 @@ import mock
 from sentry.interfaces import Template
 from sentry.models import Event
 
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class TemplateTest(TestCase):
diff --git a/tests/sentry/interfaces/tests.py b/tests/sentry/interfaces/tests.py
index 4c32888d82..e07d883c78 100644
--- a/tests/sentry/interfaces/tests.py
+++ b/tests/sentry/interfaces/tests.py
@@ -6,7 +6,7 @@ import pickle
 
 from sentry.interfaces import Interface
 
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class InterfaceTests(TestCase):
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 27a36d395b..a02328d292 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -12,7 +12,7 @@ from sentry.interfaces import Interface
 from sentry.models import Event, Group, Project, MessageCountByMinute, ProjectCountByMinute, \
   SearchDocument
 from sentry.utils.db import has_trending
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class DummyInterface(Interface):
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index b767495a14..c4622bc0c0 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -8,7 +8,7 @@ from django.contrib.auth.models import User
 from sentry.models import Project, ProjectKey, Group, Event, Team, \
   MessageFilterValue, MessageCountByMinute, FilterValue, PendingTeamMember
 
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class ProjectTest(TestCase):
diff --git a/tests/sentry/permissions/tests.py b/tests/sentry/permissions/tests.py
index ec19ee11f4..0d7a5f644c 100644
--- a/tests/sentry/permissions/tests.py
+++ b/tests/sentry/permissions/tests.py
@@ -4,7 +4,7 @@ from __future__ import absolute_import
 
 from django.contrib.auth.models import User, AnonymousUser
 from sentry.permissions import can_create_projects, can_set_public_projects
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class CanCreateProjectTest(TestCase):
diff --git a/tests/sentry/plugins/bases/issue/tests.py b/tests/sentry/plugins/bases/issue/tests.py
index d2b535e4fc..568d5c0983 100644
--- a/tests/sentry/plugins/bases/issue/tests.py
+++ b/tests/sentry/plugins/bases/issue/tests.py
@@ -7,7 +7,7 @@ import mock
 from django.contrib.auth.models import User
 from social_auth.models import UserSocialAuth
 from sentry.plugins.bases.issue import IssuePlugin
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class GetAuthForUserTest(TestCase):
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 88900f038c..a051248eaa 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -9,7 +9,7 @@ from sentry.interfaces import Stacktrace
 from sentry.models import Event, Group, Project
 from sentry.plugins.sentry_mail.models import MailProcessor
 
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class MailProcessorTest(TestCase):
diff --git a/tests/sentry/plugins/tests.py b/tests/sentry/plugins/tests.py
index 5a7a0869be..393a7f1cb6 100644
--- a/tests/sentry/plugins/tests.py
+++ b/tests/sentry/plugins/tests.py
@@ -5,7 +5,7 @@ from __future__ import absolute_import
 import mock
 from sentry.plugins.helpers import set_option, \
   unset_option, get_option
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class SentryPluginTest(TestCase):
diff --git a/tests/sentry/search/tests.py b/tests/sentry/search/tests.py
index 3dd38cc368..0a853583b2 100644
--- a/tests/sentry/search/tests.py
+++ b/tests/sentry/search/tests.py
@@ -4,7 +4,7 @@ from __future__ import absolute_import
 
 from sentry.models import Event, SearchDocument
 
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class SearchIndexTest(TestCase):
diff --git a/tests/sentry/signals/tests.py b/tests/sentry/signals/tests.py
index a9dbaa6251..9521f56429 100644
--- a/tests/sentry/signals/tests.py
+++ b/tests/sentry/signals/tests.py
@@ -6,7 +6,7 @@ from django.contrib.auth.models import User
 from sentry.constants import MEMBER_OWNER
 from sentry.models import Project, Team
 
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class SentrySignalTest(TestCase):
diff --git a/tests/sentry/tasks/cleanup/tests.py b/tests/sentry/tasks/cleanup/tests.py
index 54c864ca7f..28b5dd07a9 100644
--- a/tests/sentry/tasks/cleanup/tests.py
+++ b/tests/sentry/tasks/cleanup/tests.py
@@ -8,7 +8,7 @@ from celery.task import Task
 from sentry.models import Event, Group, MessageCountByMinute, \
   MessageFilterValue
 from sentry.tasks.cleanup import cleanup
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class SentryCleanupTest(TestCase):
diff --git a/tests/sentry/tasks/process_buffer/tests.py b/tests/sentry/tasks/process_buffer/tests.py
index b13356721d..4daedf16b0 100644
--- a/tests/sentry/tasks/process_buffer/tests.py
+++ b/tests/sentry/tasks/process_buffer/tests.py
@@ -6,7 +6,7 @@ import mock
 
 from celery.task import Task
 from sentry.tasks.process_buffer import process_incr
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class ProcessIncrTest(TestCase):
diff --git a/tests/sentry/tasks/store/tests.py b/tests/sentry/tasks/store/tests.py
index 6665fe458e..a33b311264 100644
--- a/tests/sentry/tasks/store/tests.py
+++ b/tests/sentry/tasks/store/tests.py
@@ -6,7 +6,7 @@ import mock
 
 from celery.task import Task
 from sentry.tasks.store import store_event
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class StoreEventTest(TestCase):
diff --git a/tests/sentry/udp/tests.py b/tests/sentry/udp/tests.py
index a8ec0acfda..083ffc1480 100644
--- a/tests/sentry/udp/tests.py
+++ b/tests/sentry/udp/tests.py
@@ -5,7 +5,7 @@ from __future__ import absolute_import
 from sentry.utils.auth import get_auth_header
 from sentry.services.udp import SentryUDPServer
 
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class SentryUDPTest(TestCase):
diff --git a/tests/sentry/utils/auth/tests.py b/tests/sentry/utils/auth/tests.py
index bb87aae14b..9bb3c93290 100644
--- a/tests/sentry/utils/auth/tests.py
+++ b/tests/sentry/utils/auth/tests.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from sentry.utils.auth import EmailAuthBackend
 from django.contrib.auth.models import User
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class EmailAuthBackendTest(TestCase):
diff --git a/tests/sentry/utils/db/tests.py b/tests/sentry/utils/db/tests.py
index 97015a96ca..5989f739be 100644
--- a/tests/sentry/utils/db/tests.py
+++ b/tests/sentry/utils/db/tests.py
@@ -3,7 +3,7 @@
 from __future__ import absolute_import
 
 from sentry.utils.db import get_db_engine
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class GetDbEngineTest(TestCase):
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index 0c28d962fc..d72de30e63 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -7,7 +7,7 @@ from django.http import HttpResponse
 from sentry.utils.http import is_same_domain, apply_access_control_headers, \
   is_valid_origin
 
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class SameDomainTestCase(TestCase):
diff --git a/tests/sentry/utils/json/tests.py b/tests/sentry/utils/json/tests.py
index df91c1699e..aaa449ef0c 100644
--- a/tests/sentry/utils/json/tests.py
+++ b/tests/sentry/utils/json/tests.py
@@ -7,7 +7,7 @@ import uuid
 
 from sentry.utils import json
 
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class JSONTest(TestCase):
diff --git a/tests/sentry/utils/queue/tests.py b/tests/sentry/utils/queue/tests.py
index a6f47242ce..da2384603c 100644
--- a/tests/sentry/utils/queue/tests.py
+++ b/tests/sentry/utils/queue/tests.py
@@ -1,8 +1,7 @@
 from __future__ import absolute_import
 
-from unittest2 import TestCase
 from sentry.utils.queue import can_queue
-from tests.base import Settings
+from sentry.testutils import TestCase
 
 
 def test_func():
@@ -11,21 +10,21 @@ def test_func():
 
 class CanQueueTest(TestCase):
     def test_disabled(self):
-        with Settings(SENTRY_USE_QUEUE=False):
+        with self.Settings(SENTRY_USE_QUEUE=False):
             self.assertFalse(can_queue(test_func))
 
     def test_empty_whitelist(self):
-        with Settings(SENTRY_USE_QUEUE=()):
+        with self.Settings(SENTRY_USE_QUEUE=()):
             self.assertFalse(can_queue(test_func))
 
     def test_enabled(self):
-        with Settings(SENTRY_USE_QUEUE=True):
+        with self.Settings(SENTRY_USE_QUEUE=True):
             self.assertTrue(can_queue(test_func))
 
     def test_in_whitelist(self):
-        with Settings(SENTRY_USE_QUEUE=('%s.test_func' % (__name__,))):
+        with self.Settings(SENTRY_USE_QUEUE=('%s.test_func' % (__name__,))):
             self.assertTrue(can_queue(test_func))
 
     def test_not_in_whitelist(self):
-        with Settings(SENTRY_USE_QUEUE=('%s.foo' % (__name__,))):
+        with self.Settings(SENTRY_USE_QUEUE=('%s.foo' % (__name__,))):
             self.assertFalse(can_queue(test_func))
diff --git a/tests/sentry/views/tests.py b/tests/sentry/views/tests.py
index 2c8212e73b..2a16346983 100644
--- a/tests/sentry/views/tests.py
+++ b/tests/sentry/views/tests.py
@@ -8,7 +8,7 @@ from sentry.conf import settings
 from sentry.models import Event
 from sentry.views import View, Exception, Query, Message
 
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class ViewIntegrationTest(TestCase):
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index 0a55284e5f..3b05a66a95 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -6,7 +6,7 @@ from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
 from sentry.models import UserOption
 from sentry.testutils import fixture
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class LoginTest(TestCase):
diff --git a/tests/sentry/web/frontend/projects/tests.py b/tests/sentry/web/frontend/projects/tests.py
index 1e4a7a5937..813c4c561d 100644
--- a/tests/sentry/web/frontend/projects/tests.py
+++ b/tests/sentry/web/frontend/projects/tests.py
@@ -10,7 +10,7 @@ from django.core.urlresolvers import reverse
 from sentry.constants import MEMBER_OWNER
 from sentry.models import Project, Team
 from sentry.testutils import fixture
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 logger = logging.getLogger(__name__)
 
diff --git a/tests/sentry/web/frontend/teams/tests.py b/tests/sentry/web/frontend/teams/tests.py
index c1ada6a87d..1672ccf1fa 100644
--- a/tests/sentry/web/frontend/teams/tests.py
+++ b/tests/sentry/web/frontend/teams/tests.py
@@ -10,7 +10,7 @@ from django.core.urlresolvers import reverse
 from sentry.constants import MEMBER_OWNER, MEMBER_USER
 from sentry.models import Team
 from sentry.testutils import fixture
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class BaseTeamTest(TestCase):
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/tests.py
index 9a7e14e291..bfa5492778 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/tests.py
@@ -13,7 +13,7 @@ from sentry.constants import MEMBER_USER
 from sentry.models import Group, Project, TeamMember, Team
 from sentry.testutils import fixture
 
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 logger = logging.getLogger(__name__)
 
diff --git a/tests/sentry/web/helpers/tests.py b/tests/sentry/web/helpers/tests.py
index 4cd4ced189..3a712af9ad 100644
--- a/tests/sentry/web/helpers/tests.py
+++ b/tests/sentry/web/helpers/tests.py
@@ -9,7 +9,7 @@ from django.core.urlresolvers import reverse
 from sentry.constants import MEMBER_USER
 from sentry.models import Project
 from sentry.web.helpers import get_project_list, get_login_url
-from tests.base import TestCase
+from sentry.testutils import TestCase
 
 
 class GetProjectListTEst(TestCase):
