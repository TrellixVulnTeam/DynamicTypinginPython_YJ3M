commit ac6edb25625c6a26b52796c79e328a0f878afb72
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Oct 14 12:41:07 2015 -0700

    Improve access requests
    
    - All actionable members get emailed for new requests
    - Ensure team admins can approve requests within their team
    
    Fixes GH-2178

diff --git a/src/sentry/api/endpoints/organization_access_request_details.py b/src/sentry/api/endpoints/organization_access_request_details.py
index 315aa178e5..a1662dbac6 100644
--- a/src/sentry/api/endpoints/organization_access_request_details.py
+++ b/src/sentry/api/endpoints/organization_access_request_details.py
@@ -3,18 +3,45 @@ from __future__ import absolute_import
 from rest_framework import serializers
 from rest_framework.response import Response
 
-from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.bases.organization import (
+    OrganizationEndpoint, OrganizationPermission
+)
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.models import (
     AuditLogEntryEvent, OrganizationAccessRequest, OrganizationMemberTeam
 )
 
 
+class AccessRequestPermission(OrganizationPermission):
+    scope_map = {
+        'GET': [],
+        'POST': [],
+        'PUT': [
+            'org:write',
+            'team:write',
+            'member:write',
+        ],
+        'DELETE': [],
+    }
+
+
 class AccessRequestSerializer(serializers.Serializer):
     isApproved = serializers.BooleanField()
 
 
 class OrganizationAccessRequestDetailsEndpoint(OrganizationEndpoint):
+    permission_classes = [AccessRequestPermission]
+
+    # TODO(dcramer): this should go onto AccessRequestPermission
+    def _can_access(self, request, access_request):
+        if request.access.has_scope('org:write'):
+            return True
+        if request.access.has_scope('member:write'):
+            return True
+        if request.access.has_team_scope(access_request.team, 'team:write'):
+            return True
+        return False
+
     def put(self, request, organization, request_id):
         """
         Approve or deny a request
@@ -32,6 +59,9 @@ class OrganizationAccessRequestDetailsEndpoint(OrganizationEndpoint):
         except OrganizationAccessRequest.DoesNotExist:
             raise ResourceDoesNotExist
 
+        if not self._can_access(request, access_request):
+            return Response(status=403)
+
         serializer = AccessRequestSerializer(data=request.DATA, partial=True)
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
diff --git a/src/sentry/api/endpoints/organization_member_team_details.py b/src/sentry/api/endpoints/organization_member_team_details.py
index 6b9647fd5d..a19e35de84 100644
--- a/src/sentry/api/endpoints/organization_member_team_details.py
+++ b/src/sentry/api/endpoints/organization_member_team_details.py
@@ -22,14 +22,19 @@ class OrganizationMemberTeamSerializer(serializers.Serializer):
 
 
 class RelaxedOrganizationPermission(OrganizationPermission):
+    _allowed_scopes = [
+        'org:read', 'org:write', 'org:delete',
+        'member:read', 'member:write', 'member:delete',
+    ]
+
     scope_map = {
-        'GET': ['org:read', 'org:write', 'org:delete'],
-        'POST': ['org:read', 'org:write', 'org:delete'],
-        'PUT': ['org:read', 'org:write', 'org:delete'],
+        'GET': _allowed_scopes,
+        'POST': _allowed_scopes,
+        'PUT': _allowed_scopes,
 
         # DELETE checks for role comparison as you can either remove a member
         # with a lower access role, or yourself, without having the req. scope
-        'DELETE': ['org:read', 'org:write', 'org:delete'],
+        'DELETE': _allowed_scopes,
     }
 
 
diff --git a/src/sentry/api/serializers/models/team.py b/src/sentry/api/serializers/models/team.py
index 680d0c892e..365723aab1 100644
--- a/src/sentry/api/serializers/models/team.py
+++ b/src/sentry/api/serializers/models/team.py
@@ -6,21 +6,24 @@ from collections import defaultdict
 
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.models import (
-    OrganizationAccessRequest, Project, ProjectStatus, Team
+    OrganizationAccessRequest, OrganizationMemberTeam, Project, ProjectStatus,
+    Team
 )
 
 
 @register(Team)
 class TeamSerializer(Serializer):
     def get_attrs(self, item_list, user):
-        organization = item_list[0].organization
-        # TODO(dcramer): kill this off when we fix OrganizaitonMemberTeam
-        team_map = dict(
-            (t.id, t) for t in Team.objects.get_for_user(
-                organization=organization,
-                user=user,
+        if user.is_authenticated():
+            memberships = frozenset(
+                OrganizationMemberTeam.objects.filter(
+                    organizationmember__user=user,
+                    team__in=item_list,
+                    is_active=True,
+                ).values_list('team', flat=True)
             )
-        )
+        else:
+            memberships = frozenset()
 
         if user.is_authenticated():
             access_requests = frozenset(
@@ -36,7 +39,7 @@ class TeamSerializer(Serializer):
         for team in item_list:
             result[team] = {
                 'pending_request': team.id in access_requests,
-                'is_member': team.id in team_map,
+                'is_member': team.id in memberships,
             }
         return result
 
diff --git a/src/sentry/models/organizationaccessrequest.py b/src/sentry/models/organizationaccessrequest.py
index 74603cd2c2..5674f74467 100644
--- a/src/sentry/models/organizationaccessrequest.py
+++ b/src/sentry/models/organizationaccessrequest.py
@@ -7,10 +7,10 @@ sentry.models.organizationmember
 """
 from __future__ import absolute_import, print_function
 
-import logging
-
 from django.core.urlresolvers import reverse
+from django.db.models import Q
 
+from sentry import roles
 from sentry.db.models import FlexibleForeignKey, Model, sane_repr
 from sentry.utils.http import absolute_uri
 
@@ -27,6 +27,7 @@ class OrganizationAccessRequest(Model):
     __repr__ = sane_repr('team_id', 'member_id')
 
     def send_request_email(self):
+        from sentry.models import OrganizationMember
         from sentry.utils.email import MessageBuilder
 
         user = self.member.user
@@ -50,11 +51,22 @@ class OrganizationAccessRequest(Model):
             context=context,
         )
 
-        try:
-            msg.send([email])
-        except Exception as e:
-            logger = logging.getLogger('sentry.mail.errors')
-            logger.exception(e)
+        roles_capable = [
+            r.id for r in roles.with_scope('team:write')
+        ]
+        non_global_roles = [
+            r for r in roles_capable
+            if not roles.get(r).is_global or roles.get(r).has_scope('member:write')
+        ]
+
+        # find members which are either team scoped or have access to all teams
+        member_list = OrganizationMember.objects.filter(
+            Q(role__in=non_global_roles) |
+            Q(teams=self.team, role__in=roles_capable),
+            organization=self.team.organization,
+        ).select_related('user')
+
+        msg.send_async([m.user.email for m in member_list])
 
     def send_approved_email(self):
         from sentry.utils.email import MessageBuilder
@@ -77,8 +89,4 @@ class OrganizationAccessRequest(Model):
             context=context,
         )
 
-        try:
-            msg.send([email])
-        except Exception as e:
-            logger = logging.getLogger('sentry.mail.errors')
-            logger.exception(e)
+        msg.send_async([email])
diff --git a/src/sentry/templates/sentry/organization-members.html b/src/sentry/templates/sentry/organization-members.html
index 956528285b..88e0e75070 100644
--- a/src/sentry/templates/sentry/organization-members.html
+++ b/src/sentry/templates/sentry/organization-members.html
@@ -57,7 +57,7 @@
         <th>Member</th>
         <th>&nbsp;</th>
         <th>Role</th>
-        {% if can_admin %}
+        {% if can_remove_members or member_can_leave %}
           <th class="squash">&nbsp;</th>
         {% endif %}
       </tr>
@@ -85,10 +85,19 @@
             {% endif %}
           </td>
           <td>{{ member.get_role_display }}</td>
-          {% if can_admin %}
+          {% if can_remove_members or member_can_leave %}
           <td class="align-right squash">
-            {% if member.user != request.user or member_can_leave %}
-              <a href="javascript:void(0)" class="btn btn-default btn-sm remove-member" data-member-id="{{ member.id }}"><span class="icon icon-trash"></span> &nbsp;Remove</a>
+            {% if member.user != request.user and can_remove_members %}
+              <a href="javascript:void(0)" class="btn btn-default btn-sm remove-member"
+                  data-member-id="{{ member.id }}">
+                <span class="icon icon-trash"></span> &nbsp;Remove
+              </a>
+            {% elif member.user == request.user and member_can_leave %}
+              <a href="javascript:void(0)" class="btn btn-default btn-sm remove-member"
+                  data-member-id="{{ member.id }}"
+                  data-message="Are you sure you wish to leave this organization?">
+                <span class="icon icon-trash"></span> &nbsp;Leave
+              </a>
             {% endif %}
           </td>
           {% endif %}
@@ -106,11 +115,13 @@
   </style>
   <script>
   $('.remove-member').click(function(){
-    if (!confirm('Are you sure you wish to remove this member?')) {
+    var $this = $(this);
+    var msg = $this.data('message') || 'Are you sure you wish to remove this member?';
+
+    if (!confirm(msg)) {
       return;
     }
 
-    var $this = $(this);
     $.ajax({
       url: '{{ URL_PREFIX }}/api/0/organizations/{{ organization.slug }}/members/' + $this.data('member-id') + '/',
       method: 'DELETE',
diff --git a/src/sentry/web/frontend/organization_members.py b/src/sentry/web/frontend/organization_members.py
index c4466101b4..32d7183777 100644
--- a/src/sentry/web/frontend/organization_members.py
+++ b/src/sentry/web/frontend/organization_members.py
@@ -2,15 +2,14 @@ from __future__ import absolute_import
 
 from sentry import roles
 from sentry.models import (
-    AuthProvider, OrganizationAccessRequest, OrganizationMember
+    AuthProvider, OrganizationAccessRequest, OrganizationMember,
+    OrganizationMemberTeam
 )
 from sentry.web.frontend.base import OrganizationView
 
 
 class OrganizationMembersView(OrganizationView):
     def handle(self, request, organization):
-        can_admin = request.access.has_scope('member:delete')
-
         queryset = OrganizationMember.objects.filter(
             organization=organization,
         ).select_related('user')
@@ -35,20 +34,33 @@ class OrganizationMembersView(OrganizationView):
                 and om.user is not None)
         )
 
+        can_approve_requests_globally = (
+            request.access.has_scope('member:write')
+            or request.access.has_scope('org:write')
+        )
+        can_remove_members = request.access.has_scope('member:delete')
+
         # pending requests
-        if can_admin:
+        if can_approve_requests_globally:
             access_requests = list(OrganizationAccessRequest.objects.filter(
                 team__organization=organization,
             ).select_related('team', 'member__user'))
+        elif request.access.has_scope('team:write'):
+            access_requests = list(OrganizationAccessRequest.objects.filter(
+                team__in=OrganizationMemberTeam.objects.filter(
+                    organizationmember__organization=organization,
+                    organizationmember__user=request.user,
+                ).values('team'),
+            ).select_related('team', 'member__user'))
         else:
             access_requests = []
 
         context = {
             'org_has_sso': auth_provider is not None,
-            'can_admin': can_admin,
             'member_list': member_list,
             'request_list': access_requests,
             'ref': request.GET.get('ref'),
+            'can_remove_members': can_remove_members,
             'member_can_leave': member_can_leave,
         }
 
diff --git a/tests/sentry/api/endpoints/test_organization_access_request_details.py b/tests/sentry/api/endpoints/test_organization_access_request_details.py
index 4174b98953..223df4313f 100644
--- a/tests/sentry/api/endpoints/test_organization_access_request_details.py
+++ b/tests/sentry/api/endpoints/test_organization_access_request_details.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-from django.core import mail
 from django.core.urlresolvers import reverse
 
 from sentry.models import (
@@ -45,8 +44,6 @@ class UpdateOrganizationAccessRequestTest(APITestCase):
             id=access_request.id,
         ).exists()
 
-        assert len(mail.outbox) == 1
-
     def test_deny_request(self):
         self.login_as(user=self.user)
 
@@ -81,3 +78,69 @@ class UpdateOrganizationAccessRequestTest(APITestCase):
         assert not OrganizationAccessRequest.objects.filter(
             id=access_request.id,
         ).exists()
+
+    def test_team_admin_can_approve(self):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name='foo', owner=self.user)
+        user = self.create_user('bar@example.com')
+        member = self.create_member(
+            organization=organization,
+            user=user,
+            role='member',
+        )
+        team = self.create_team(name='foo', organization=organization)
+
+        access_request = OrganizationAccessRequest.objects.create(
+            member=member,
+            team=team,
+        )
+
+        admin_user = self.create_user('admin@example.com')
+        self.create_member(
+            organization=organization,
+            user=admin_user,
+            role='admin',
+            teams=[team],
+        )
+
+        path = reverse('sentry-api-0-organization-access-request-details', args=[organization.slug, access_request.id])
+
+        self.login_as(admin_user)
+
+        resp = self.client.put(path, data={'isApproved': 1})
+
+        assert resp.status_code == 204
+
+    def test_teamless_admin_cannot_approve(self):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name='foo', owner=self.user)
+        user = self.create_user('bar@example.com')
+        member = self.create_member(
+            organization=organization,
+            user=user,
+            role='member',
+        )
+        team = self.create_team(name='foo', organization=organization)
+
+        access_request = OrganizationAccessRequest.objects.create(
+            member=member,
+            team=team,
+        )
+
+        admin_user = self.create_user('admin@example.com')
+        self.create_member(
+            organization=organization,
+            user=admin_user,
+            role='admin',
+            teams=[],
+        )
+
+        path = reverse('sentry-api-0-organization-access-request-details', args=[organization.slug, access_request.id])
+
+        self.login_as(admin_user)
+
+        resp = self.client.put(path, data={'isApproved': 1})
+
+        assert resp.status_code == 403
diff --git a/tests/sentry/models/test_organizationaccessrequest.py b/tests/sentry/models/test_organizationaccessrequest.py
new file mode 100644
index 0000000000..7c081d2342
--- /dev/null
+++ b/tests/sentry/models/test_organizationaccessrequest.py
@@ -0,0 +1,60 @@
+from __future__ import absolute_import
+
+from django.core import mail
+
+from sentry.models import (
+    OrganizationAccessRequest, OrganizationMember, OrganizationMemberTeam
+)
+from sentry.testutils import TestCase
+
+
+class SendRequestEmailTest(TestCase):
+    def test_sends_email_to_everyone(self):
+        owner = self.create_user('owner@example.com')
+        team_admin = self.create_user('team-admin@example.com')
+        random_member = self.create_user('member@example.com')
+        requesting_user = self.create_user('requesting@example.com')
+
+        org = self.create_organization(owner=owner)
+        team = self.create_team(organization=org)
+
+        OrganizationMemberTeam.objects.create(
+            organizationmember=OrganizationMember.objects.get(
+                organization=org,
+                user=owner,
+            ),
+            team=team,
+        )
+
+        self.create_member(
+            organization=org,
+            user=team_admin,
+            role='admin',
+            teams=[team],
+        )
+
+        self.create_member(
+            organization=org,
+            user=random_member,
+            role='member',
+            teams=[team],
+        )
+
+        requesting_member = self.create_member(
+            organization=org,
+            user=requesting_user,
+            role='member',
+            teams=[],
+        )
+
+        request = OrganizationAccessRequest.objects.create(
+            member=requesting_member,
+            team=team,
+        )
+
+        with self.tasks():
+            request.send_request_email()
+
+        assert len(mail.outbox) == 2, [m.subject for m in mail.outbox]
+        assert sorted([m.to[0] for m in mail.outbox]) == \
+            sorted([owner.email, team_admin.email])
diff --git a/tests/sentry/web/frontend/test_organization_members.py b/tests/sentry/web/frontend/test_organization_members.py
index 9439157b5e..947d84442e 100644
--- a/tests/sentry/web/frontend/test_organization_members.py
+++ b/tests/sentry/web/frontend/test_organization_members.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
-from sentry.models import OrganizationMember
+from sentry.models import OrganizationAccessRequest, OrganizationMember
 from sentry.testutils import TestCase, PermissionTestCase
 
 
@@ -56,3 +56,47 @@ class OrganizationMembersTest(TestCase):
             (owner_om, False),
             (member_om, False),
         ]
+
+    def test_shows_access_requests_for_team_admin(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+        team_1 = self.create_team(name='foo', organization=organization)
+        team_2 = self.create_team(name='bar', organization=organization)
+
+        team_admin = self.create_user('admin@example.com')
+        self.create_member(
+            organization=organization,
+            user=team_admin,
+            role='admin',
+            teams=[team_1],
+        )
+
+        other_user = self.create_user('bar@example.com')
+        other_member = self.create_member(
+            organization=organization,
+            user=other_user,
+            role='member',
+            teams=[],
+        )
+
+        request_1 = OrganizationAccessRequest.objects.create(
+            member=other_member,
+            team=team_1,
+        )
+        OrganizationAccessRequest.objects.create(
+            member=other_member,
+            team=team_2,
+        )
+
+        path = reverse('sentry-organization-members', args=[organization.slug])
+
+        self.login_as(team_admin)
+
+        resp = self.client.get(path)
+
+        assert resp.status_code == 200
+
+        self.assertTemplateUsed(resp, 'sentry/organization-members.html')
+
+        assert resp.context['organization'] == organization
+        assert len(resp.context['request_list']) == 1
+        assert resp.context['request_list'][0] == request_1
