commit 72df7bae7a79f9c7f7c062460fafd49548e05cdf
Author: Mark Story <mark@sentry.io>
Date:   Mon Sep 16 14:48:09 2019 -0400

    ref(ui) Consolidate code to update query text with tags (#14732)
    
    We had two different implementations of the same logic. Now there is
    one.
    
    Fixes SEN-1031

diff --git a/src/sentry/static/sentry/app/components/events/eventTags.tsx b/src/sentry/static/sentry/app/components/events/eventTags.tsx
index 9b3abd40fa..49be985ebe 100644
--- a/src/sentry/static/sentry/app/components/events/eventTags.tsx
+++ b/src/sentry/static/sentry/app/components/events/eventTags.tsx
@@ -14,6 +14,7 @@ import Pills from 'app/components/pills';
 import Pill from 'app/components/pill';
 import VersionHoverCard from 'app/components/versionHoverCard';
 import InlineSvg from 'app/components/inlineSvg';
+import {appendTagCondition} from 'app/utils/queryString';
 
 type EventTagsProps = {
   group: Group;
@@ -42,11 +43,7 @@ class EventTags extends React.Component<EventTagsProps> {
         query.project = tag.value;
         break;
       default:
-        const origQuery = query.query ? query.query + ' ' : '';
-        query.query =
-          tag.value.indexOf(' ') > -1
-            ? `${origQuery}${tag.key}:"${tag.value}"`
-            : `${origQuery}${tag.key}:${tag.value}`;
+        query.query = appendTagCondition(query.query, tag.key, tag.value);
     }
 
     const locationSearch = `?${queryString.stringify(query)}`;
diff --git a/src/sentry/static/sentry/app/utils/queryString.tsx b/src/sentry/static/sentry/app/utils/queryString.tsx
index 3ebbc71482..31a9a88600 100644
--- a/src/sentry/static/sentry/app/utils/queryString.tsx
+++ b/src/sentry/static/sentry/app/utils/queryString.tsx
@@ -1,5 +1,7 @@
 import queryString from 'query-string';
 import parseurl from 'parseurl';
+import {isString} from 'lodash';
+
 // remove leading and trailing whitespace and remove double spaces
 export function formatQueryString(qs: string): string {
   return qs.trim().replace(/\s+/g, ' ');
@@ -21,7 +23,34 @@ export function addQueryParamsToExistingUrl(
   return `${url.protocol}//${url.host}${url.pathname}?${queryString.stringify(query)}`;
 }
 
+type QueryValue = string | string[] | undefined | null;
+
+/**
+ * Append a tag key:value to a query string.
+ *
+ * Handles spacing and quoting if necessary.
+ */
+export function appendTagCondition(
+  query: QueryValue,
+  key: string,
+  value: string
+): string {
+  let currentQuery = Array.isArray(query) ? query.pop() : isString(query) ? query : '';
+
+  if (isString(value) && value.indexOf(' ') > -1) {
+    value = `"${value}"`;
+  }
+  if (currentQuery) {
+    currentQuery += ` ${key}:${value}`;
+  } else {
+    currentQuery = `${key}:${value}`;
+  }
+
+  return currentQuery;
+}
+
 export default {
   formatQueryString,
   addQueryParamsToExistingUrl,
+  appendTagCondition,
 };
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 63f2ff1925..907db9b649 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -3,6 +3,7 @@ import {Location} from 'history';
 
 import {Client} from 'app/api';
 import {URL_PARAM} from 'app/constants/globalSelectionHeader';
+import {appendTagCondition} from 'app/utils/queryString';
 import {
   AGGREGATE_ALIASES,
   SPECIAL_FIELDS,
@@ -53,12 +54,8 @@ export function getEventTagSearchUrl(
   location: Location
 ) {
   const query = {...location.query};
-  // Add tag key/value to search
-  if (query.query) {
-    query.query += ` ${tagKey}:"${tagValue}"`;
-  } else {
-    query.query = `${tagKey}:"${tagValue}"`;
-  }
+  query.query = appendTagCondition(query.query, tagKey, tagValue);
+
   // Remove the event slug so the user sees new search results.
   delete query.eventSlug;
 
diff --git a/tests/js/spec/utils/queryString.spec.js b/tests/js/spec/utils/queryString.spec.js
index aca4b3d22c..f3b3edad65 100644
--- a/tests/js/spec/utils/queryString.spec.js
+++ b/tests/js/spec/utils/queryString.spec.js
@@ -29,3 +29,30 @@ describe('addQueryParamsToExistingUrl', function() {
     expect(utils.addQueryParamsToExistingUrl(url, newParams)).toBe('');
   });
 });
+
+describe('appendTagCondition', function() {
+  it('adds simple values', function() {
+    const result = utils.appendTagCondition('error+text', 'color', 'red');
+    expect(result).toEqual('error+text color:red');
+  });
+
+  it('handles array current value', function() {
+    const result = utils.appendTagCondition(['', 'thing'], 'color', 'red');
+    expect(result).toEqual('thing color:red');
+  });
+
+  it('handles empty string current value', function() {
+    const result = utils.appendTagCondition('', 'color', 'red');
+    expect(result).toEqual('color:red');
+  });
+
+  it('handles null current value', function() {
+    const result = utils.appendTagCondition(null, 'color', 'red');
+    expect(result).toEqual('color:red');
+  });
+
+  it('wraps values with spaces', function() {
+    const result = utils.appendTagCondition(null, 'color', 'purple red');
+    expect(result).toEqual('color:"purple red"');
+  });
+});
diff --git a/tests/js/spec/views/eventsV2/eventDetails.spec.jsx b/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
index 0ad25157ce..7357a1660f 100644
--- a/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
+++ b/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
@@ -250,7 +250,7 @@ describe('EventsV2 > EventDetails', function() {
     // the view to re-render
     expect(tagLink.props().to).toEqual({
       pathname: '/organizations/org-slug/events/',
-      query: {query: 'browser:"Firefox"'},
+      query: {query: 'browser:Firefox'},
     });
   });
 
@@ -286,7 +286,7 @@ describe('EventsV2 > EventDetails', function() {
     // the view to re-render
     expect(tagLink.props().to).toEqual({
       pathname: '/organizations/org-slug/events/',
-      query: {query: 'Dumpster browser:"Firefox"'},
+      query: {query: 'Dumpster browser:Firefox'},
     });
   });
 });
diff --git a/tests/js/spec/views/eventsV2/utils.spec.jsx b/tests/js/spec/views/eventsV2/utils.spec.jsx
index 8679b184c3..294ba0608f 100644
--- a/tests/js/spec/views/eventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/eventsV2/utils.spec.jsx
@@ -19,15 +19,15 @@ describe('eventTagSearchUrl()', function() {
   it('adds a query', function() {
     expect(getEventTagSearchUrl('browser', 'firefox', location)).toEqual({
       pathname: location.pathname,
-      query: {query: 'browser:"firefox"'},
+      query: {query: 'browser:firefox'},
     });
   });
 
   it('removes eventSlug', function() {
     location.query.eventSlug = 'project-slug:deadbeef';
-    expect(getEventTagSearchUrl('browser', 'firefox', location)).toEqual({
+    expect(getEventTagSearchUrl('browser', 'firefox 69', location)).toEqual({
       pathname: location.pathname,
-      query: {query: 'browser:"firefox"'},
+      query: {query: 'browser:"firefox 69"'},
     });
   });
 
@@ -35,7 +35,7 @@ describe('eventTagSearchUrl()', function() {
     location.query.query = 'failure';
     expect(getEventTagSearchUrl('browser', 'firefox', location)).toEqual({
       pathname: location.pathname,
-      query: {query: 'failure browser:"firefox"'},
+      query: {query: 'failure browser:firefox'},
     });
   });
 });
