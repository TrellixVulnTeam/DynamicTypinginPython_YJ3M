commit 5eb804bdb2144c13fda117ef6da6fbc0c6cc54ca
Author: Dena Mwangi <dena@getsentry.com>
Date:   Fri Aug 17 10:39:07 2018 -0700

    feat(analytics): Log exposure abstraction (#9105)

diff --git a/src/sentry/static/sentry/app/utils/logExperiment.jsx b/src/sentry/static/sentry/app/utils/logExperiment.jsx
new file mode 100644
index 0000000000..341c8334b8
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/logExperiment.jsx
@@ -0,0 +1,18 @@
+import HookStore from 'app/stores/hookStore';
+
+/**
+ * @param {String} experimentName Name of the experiment
+ * @param {Object} experiments Config
+ * @param {Object} data Experiment data to be recorded: {unit_name, unit_id, params}
+ * 					note that params need to be string
+ */
+export default function logExperiment(experimentName, experiments, data) {
+  let assignment = experiments[experimentName];
+  let param = data.params;
+
+  if (assignment === null) return;
+
+  data.experiment_name = experimentName;
+  data.params = `{${param}: ${assignment}}`;
+  HookStore.get('analytics:log-experiment').forEach(cb => cb(data));
+}
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.jsx
index 5ce165c5f9..615620322d 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.jsx
@@ -4,7 +4,7 @@ import React from 'react';
 
 import SettingsNavigationGroup from 'app/views/settings/components/settingsNavigationGroup';
 import SentryTypes from 'app/sentryTypes';
-import HookStore from 'app/stores/hookStore';
+import logExperiment from 'app/utils/logExperiment';
 
 class SettingsNavigation extends React.Component {
   static propTypes = {
@@ -23,19 +23,12 @@ class SettingsNavigation extends React.Component {
     let {organization} = this.props;
     if (!organization || !organization.experiments) return;
 
-    let exposed = organization.experiments.SSOPaywallExperiment;
-
     //Experiment exposure is already assigned - this logs the exposure i.e. when the user gets to the settings page
-    if (exposed === 0 || exposed === 1) {
-      let data = {
-        experiment_name: 'SSOPaywallExperiment',
-        unit_name: 'org_id',
-        unit_id: parseInt(organization.id, 10),
-        params: `{exposed: ${exposed}}`,
-      };
-
-      HookStore.get('analytics:log-experiment').forEach(cb => cb(data));
-    }
+    logExperiment('SSOPaywallExperiment', organization.experiments, {
+      unit_name: 'org_id',
+      unit_id: organization.id,
+      params: 'exposed',
+    });
   }
 
   render() {
diff --git a/tests/js/spec/utils/logExperiment.spec.jsx b/tests/js/spec/utils/logExperiment.spec.jsx
new file mode 100644
index 0000000000..4bff198551
--- /dev/null
+++ b/tests/js/spec/utils/logExperiment.spec.jsx
@@ -0,0 +1,33 @@
+import HookStore from 'app/stores/hookStore';
+import logExperiment from 'app/utils/logExperiment';
+
+describe('utils/logExperiment', function() {
+  let sandbox;
+  let myMockFn;
+
+  beforeEach(function() {
+    myMockFn = jest.fn();
+    sandbox = sinon.sandbox.create();
+    sandbox.stub(HookStore, 'get').returns([myMockFn]);
+  });
+
+  afterEach(function() {
+    sandbox.restore();
+  });
+
+  it('logs experiment for those with assignment', function() {
+    let experiments = {testExperimentName: 0};
+    let data = {unit_name: 'org_id', unit_id: 1, params: 'exposed'};
+    logExperiment('testExperimentName', experiments, data);
+    data.experiment_name = 'testExperimentName';
+    data.params = '{exposed: 0}';
+    expect(myMockFn).toHaveBeenCalledWith(data);
+  });
+
+  it('does not log experiment without assignment', function() {
+    let experiments = {testExperimentName: null};
+    let data = {unit_name: 'org_id', unit_id: 1, params: 'exposed'};
+    logExperiment('testExperimentName', experiments, data);
+    expect(myMockFn).toHaveBeenCalledTimes(0);
+  });
+});
