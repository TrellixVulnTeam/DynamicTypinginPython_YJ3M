commit e7ff07394ce565c2b0114fd84573fdcca4e1e4ea
Author: Stephen Cefali <scefali@sentry.io>
Date:   Thu Oct 17 13:21:21 2019 -0700

    feat(app-platform): minor changes to how publication request works (#15078)

diff --git a/src/sentry/api/endpoints/sentry_app_publish_request.py b/src/sentry/api/endpoints/sentry_app_publish_request.py
index 02ff53c6f3..a35843bc0b 100644
--- a/src/sentry/api/endpoints/sentry_app_publish_request.py
+++ b/src/sentry/api/endpoints/sentry_app_publish_request.py
@@ -28,7 +28,11 @@ class SentryAppPublishRequestEndpoint(SentryAppBaseEndpoint):
         subject = "Sentry Integration Publication Request from %s" % sentry_app.owner.slug
 
         email.send_mail(
-            subject, message, options.get("mail.from"), ["partners@sentry.io"], fail_silently=False
+            subject,
+            message,
+            options.get("mail.from"),
+            ["partners@sentry.io"],
+            reply_to=[request.user.email],
         )
 
         return Response(status=201)
diff --git a/src/sentry/static/sentry/app/components/modals/sentryAppPublishRequestModal.tsx b/src/sentry/static/sentry/app/components/modals/sentryAppPublishRequestModal.tsx
index bf58c5a414..608f4f90a1 100644
--- a/src/sentry/static/sentry/app/components/modals/sentryAppPublishRequestModal.tsx
+++ b/src/sentry/static/sentry/app/components/modals/sentryAppPublishRequestModal.tsx
@@ -5,12 +5,39 @@ import React from 'react';
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 import _ from 'lodash';
 
-import {SentryApp} from 'app/types';
+import {SentryApp, Scope} from 'app/types';
 import {t} from 'app/locale';
 import Form from 'app/views/settings/components/forms/form';
 import FormModel from 'app/views/settings/components/forms/model';
 import JsonForm from 'app/views/settings/components/forms/jsonForm';
 import space from 'app/styles/space';
+import {SENTRY_APP_PERMISSIONS, PermissionChoice} from 'app/constants';
+
+/**
+ * Given an array of scopes, return the choices the user has picked for each option
+ * @param scopes {Array}
+ */
+const getPermissionSelectionsFromScopes = (scopes: Scope[]) => {
+  const permissions: string[] = [];
+  for (const permObj of SENTRY_APP_PERMISSIONS) {
+    let highestChoice: PermissionChoice | undefined;
+    for (const perm in permObj.choices) {
+      const choice = permObj.choices[perm];
+      const intersection = _.intersection(choice.scopes, scopes);
+      if (intersection.length > 0 && intersection.length === choice.scopes.length) {
+        if (!highestChoice || intersection.length > highestChoice.scopes.length) {
+          highestChoice = choice;
+        }
+      }
+    }
+    if (highestChoice) {
+      //we can remove the read part of "Read & Write"
+      const label = highestChoice.label.replace('Read & Write', 'Write');
+      permissions.push(`${permObj.resource} ${label}`);
+    }
+  }
+  return permissions;
+};
 
 class PublishRequestFormModel extends FormModel {
   getTransformedData() {
@@ -41,18 +68,20 @@ export default class SentryAppPublishRequestModal extends React.Component<Props>
 
   get formFields() {
     const {app} = this.props;
-    //replace the : with a . so we can reserve the colon for the question
-    const scopes = app.scopes.map(scope => scope.replace(/:/, '-'));
-    const scopeQuestionBaseText =
-      'Please justify why you are requesting each of the following scopes: ';
-    const scopeQuestionPlainText = `${scopeQuestionBaseText}${scopes.join(', ')}.`;
+    const permissions = getPermissionSelectionsFromScopes(app.scopes);
 
-    const scopeLabel = (
+    const permissionQuestionBaseText =
+      'Please justify why you are requesting each of the following permissions: ';
+    const permissionQuestionPlainText = `${permissionQuestionBaseText}${permissions.join(
+      ', '
+    )}.`;
+
+    const permissionLabel = (
       <React.Fragment>
-        {scopeQuestionBaseText}
-        {scopes.map((scope, i) => (
-          <React.Fragment key={scope}>
-            {i > 0 && ', '} <code>{scope}</code>
+        {permissionQuestionBaseText}
+        {permissions.map((permission, i) => (
+          <React.Fragment key={permission}>
+            {i > 0 && ', '} <code>{permission}</code>
           </React.Fragment>
         ))}
         .
@@ -80,21 +109,26 @@ export default class SentryAppPublishRequestModal extends React.Component<Props>
       {
         type: 'textarea',
         required: true,
-        label: scopeLabel,
+        label: 'Do you operate the web service your integration communicates with?',
         autosize: true,
         rows: 1,
         inline: false,
-        meta: scopeQuestionPlainText,
       },
-      {
+    ];
+
+    //Only add the permissions question if there are perms to add
+    if (permissions.length > 0) {
+      baseFields.push({
         type: 'textarea',
         required: true,
-        label: 'Do you operate the web service your integration communicates with?',
+        label: permissionLabel,
         autosize: true,
         rows: 1,
         inline: false,
-      },
-    ];
+        meta: permissionQuestionPlainText,
+      });
+    }
+
     //dynamically generate the name based off the index
     return baseFields.map((field, index) =>
       Object.assign({name: `question${index}`}, field)
diff --git a/src/sentry/static/sentry/app/constants/index.tsx b/src/sentry/static/sentry/app/constants/index.tsx
index c5082eed73..486b65dca1 100644
--- a/src/sentry/static/sentry/app/constants/index.tsx
+++ b/src/sentry/static/sentry/app/constants/index.tsx
@@ -3,6 +3,7 @@
  */
 
 import {t} from 'app/locale';
+import {Scope} from 'app/types';
 
 export const API_SCOPES = [
   'project:read',
@@ -13,11 +14,13 @@ export const API_SCOPES = [
   'team:write',
   'team:admin',
   'event:read',
+  'event:write',
   'event:admin',
   'org:read',
   'org:write',
   'org:admin',
   'member:read',
+  'member:write',
   'member:admin',
 ] as const;
 
@@ -62,10 +65,26 @@ export const MEMBER_ROLES = [
   },
 ];
 
+export type PermissionChoice = {
+  label: 'No Access' | 'Read' | 'Read & Write' | 'Admin';
+  scopes: Scope[];
+};
+type PermissionObj = {
+  resource: 'Project' | 'Team' | 'Release' | 'Event' | 'Organization' | 'Member';
+  help: string;
+  label?: string;
+  choices: {
+    'no-access': PermissionChoice;
+    read?: PermissionChoice;
+    write?: PermissionChoice;
+    admin: PermissionChoice;
+  };
+};
+
 // We expose permissions for Sentry Apps in a more resource-centric way.
 // All of the API_SCOPES from above should be represented in a more
 // User-friendly way here.
-export const SENTRY_APP_PERMISSIONS = [
+export const SENTRY_APP_PERMISSIONS: PermissionObj[] = [
   {
     resource: 'Project',
     help: 'Projects, Tags, Debug Files, and Feedback',
diff --git a/src/sentry/utils/email.py b/src/sentry/utils/email.py
index f7827114c6..fdadb3c3a7 100644
--- a/src/sentry/utils/email.py
+++ b/src/sentry/utils/email.py
@@ -15,8 +15,7 @@ from random import randrange
 import lxml
 import toronado
 from django.conf import settings
-from django.core.mail import get_connection as _get_connection
-from django.core.mail import send_mail as _send_mail
+from django.core import mail
 from django.core.mail import EmailMultiAlternatives
 from django.core.mail.backends.base import BaseEmailBackend
 from django.core.signing import BadSignature, Signer
@@ -435,7 +434,7 @@ def get_connection(fail_silently=False):
     """
     Gets an SMTP connection using our OptionsStore
     """
-    return _get_connection(
+    return mail.get_connection(
         backend=get_mail_backend(),
         host=options.get("mail.host"),
         port=options.get("mail.port"),
@@ -447,17 +446,20 @@ def get_connection(fail_silently=False):
     )
 
 
-def send_mail(subject, message, from_email, recipient_list, fail_silently=False):
+def send_mail(subject, message, from_email, recipient_list, fail_silently=False, **kwargs):
     """
     Wrapper that forces sending mail through our connection.
+    Uses EmailMessage class which has more options than the simple send_mail
     """
-    return _send_mail(
+    email = mail.EmailMessage(
         subject,
         message,
         from_email,
         recipient_list,
         connection=get_connection(fail_silently=fail_silently),
+        **kwargs
     )
+    return email.send(fail_silently=fail_silently)
 
 
 def is_smtp_enabled(backend=None):
diff --git a/tests/js/spec/views/__snapshots__/apiNewToken.spec.jsx.snap b/tests/js/spec/views/__snapshots__/apiNewToken.spec.jsx.snap
index 648b89859b..7693653c3f 100644
--- a/tests/js/spec/views/__snapshots__/apiNewToken.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/apiNewToken.spec.jsx.snap
@@ -108,6 +108,10 @@ exports[`ApiNewToken render() renders 1`] = `
                   "event:read",
                   "event:read",
                 ],
+                Array [
+                  "event:write",
+                  "event:write",
+                ],
                 Array [
                   "event:admin",
                   "event:admin",
@@ -128,6 +132,10 @@ exports[`ApiNewToken render() renders 1`] = `
                   "member:read",
                   "member:read",
                 ],
+                Array [
+                  "member:write",
+                  "member:write",
+                ],
                 Array [
                   "member:admin",
                   "member:admin",
diff --git a/tests/js/spec/views/settings/__snapshots__/organizationApiKeyDetailsView.spec.jsx.snap b/tests/js/spec/views/settings/__snapshots__/organizationApiKeyDetailsView.spec.jsx.snap
index dbf03f454b..b734c253c7 100644
--- a/tests/js/spec/views/settings/__snapshots__/organizationApiKeyDetailsView.spec.jsx.snap
+++ b/tests/js/spec/views/settings/__snapshots__/organizationApiKeyDetailsView.spec.jsx.snap
@@ -201,6 +201,10 @@ exports[`OrganizationApiKeyDetails renders 1`] = `
                       "event:read",
                       "event:read",
                     ],
+                    Array [
+                      "event:write",
+                      "event:write",
+                    ],
                     Array [
                       "event:admin",
                       "event:admin",
@@ -221,6 +225,10 @@ exports[`OrganizationApiKeyDetails renders 1`] = `
                       "member:read",
                       "member:read",
                     ],
+                    Array [
+                      "member:write",
+                      "member:write",
+                    ],
                     Array [
                       "member:admin",
                       "member:admin",
@@ -364,6 +372,19 @@ exports[`OrganizationApiKeyDetails renders 1`] = `
                       />
                       event:read
                     </label>
+                    <label
+                      className="checkbox"
+                      key="event:write"
+                    >
+                      <input
+                        checked={false}
+                        disabled={false}
+                        onChange={[Function]}
+                        type="checkbox"
+                        value="event:write"
+                      />
+                      event:write
+                    </label>
                     <label
                       className="checkbox"
                       key="event:admin"
@@ -429,6 +450,19 @@ exports[`OrganizationApiKeyDetails renders 1`] = `
                       />
                       member:read
                     </label>
+                    <label
+                      className="checkbox"
+                      key="member:write"
+                    >
+                      <input
+                        checked={false}
+                        disabled={false}
+                        onChange={[Function]}
+                        type="checkbox"
+                        value="member:write"
+                      />
+                      member:write
+                    </label>
                     <label
                       className="checkbox"
                       key="member:admin"
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/index.spec.jsx b/tests/js/spec/views/settings/organizationDeveloperSettings/index.spec.jsx
index 8311010482..93cef4a285 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/index.spec.jsx
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/index.spec.jsx
@@ -7,7 +7,16 @@ import App from 'app/views/app';
 
 describe('Organization Developer Settings', function() {
   const org = TestStubs.Organization();
-  const sentryApp = TestStubs.SentryApp();
+  const sentryApp = TestStubs.SentryApp({
+    scopes: [
+      'team:read',
+      'project:releases',
+      'event:read',
+      'event:write',
+      'org:read',
+      'org:write',
+    ],
+  });
   const routerContext = TestStubs.routerContext();
 
   const publishButtonSelector = 'StyledButton[icon="icon-upgrade"]';
@@ -151,12 +160,12 @@ describe('Organization Developer Settings', function() {
               {
                 answer: 'Answer 2',
                 question:
-                  'Please justify why you are requesting each of the following scopes: project-read.',
+                  'Do you operate the web service your integration communicates with?',
               },
               {
                 answer: 'Answer 3',
                 question:
-                  'Do you operate the web service your integration communicates with?',
+                  'Please justify why you are requesting each of the following permissions: Team Read, Release Admin, Event Write, Organization Write.',
               },
             ],
           },
diff --git a/tests/sentry/api/endpoints/test_sentry_app_publish_request.py b/tests/sentry/api/endpoints/test_sentry_app_publish_request.py
index c616fa54b9..b9d72bb142 100644
--- a/tests/sentry/api/endpoints/test_sentry_app_publish_request.py
+++ b/tests/sentry/api/endpoints/test_sentry_app_publish_request.py
@@ -43,7 +43,7 @@ class SentryAppPublishRequestTest(APITestCase):
             message,
             "root@localhost",
             ["partners@sentry.io"],
-            fail_silently=False,
+            reply_to=[self.user.email],
         )
 
     @mock.patch("sentry.utils.email.send_mail")
diff --git a/tests/sentry/utils/email/tests.py b/tests/sentry/utils/email/tests.py
index a7f38cbc5f..0876d70f47 100644
--- a/tests/sentry/utils/email/tests.py
+++ b/tests/sentry/utils/email/tests.py
@@ -16,6 +16,7 @@ from sentry.utils.email import (
     get_from_email_domain,
     get_mail_backend,
     create_fake_email,
+    send_mail,
 )
 
 
@@ -336,3 +337,22 @@ class MiscTestCase(TestCase):
 
         with self.options({"mail.backend": "something.else"}):
             assert get_mail_backend() == "something.else"
+
+
+class SendMail(TestCase):
+    @patch("django.core.mail.EmailMessage", autospec=True)
+    @patch("django.core.mail.get_connection", return_value="connection")
+    def test_send_mail_with_kwargs(self, get_connection, MockEmailMessage):
+        patch.object(MockEmailMessage.return_value, "send")
+        send_mail(
+            "subject", "my_message", "fake@example.com", ["a@b.com"], reply_to=["emusk@tesla.com"]
+        )
+        MockEmailMessage.assert_called_once_with(
+            "subject",
+            "my_message",
+            "fake@example.com",
+            ["a@b.com"],
+            connection="connection",
+            reply_to=["emusk@tesla.com"],
+        )
+        MockEmailMessage.return_value.send.assert_called_once_with(fail_silently=False)
