commit 75b6e4708d140523e568c29825a266b0d5513510
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Fri Jan 27 15:09:47 2017 -0800

    Commit, Release serializers both use author helper

diff --git a/src/sentry/api/serializers/models/commit.py b/src/sentry/api/serializers/models/commit.py
index 6511a40879..32d4b41c74 100644
--- a/src/sentry/api/serializers/models/commit.py
+++ b/src/sentry/api/serializers/models/commit.py
@@ -18,7 +18,7 @@ class CommitSerializer(Serializer):
         for item in item_list:
             result[item] = {
                 'repository': repository_objs.get(item.repository_id, {}),
-                'user': author_objs.get(item.author.email, {})
+                'user': author_objs.get(item.author_id, {})
             }
 
         return result
diff --git a/src/sentry/api/serializers/models/release.py b/src/sentry/api/serializers/models/release.py
index 7131644d5e..cb402672ce 100644
--- a/src/sentry/api/serializers/models/release.py
+++ b/src/sentry/api/serializers/models/release.py
@@ -13,7 +13,19 @@ from sentry.models import Release, ReleaseCommit, ReleaseProject, TagValue, User
 
 
 def get_users_for_commits(item_list):
-
+    """
+    Returns a dictionary of author_id => user, if a Sentry
+    user object exists for that email. If there is no matching
+    Sentry user, a {user, email} dict representation of that
+    author is returned.
+
+    e.g.
+    {
+        1: serialized(<User id=1>),
+        2: {email: 'not-a-user@example.com', name: 'dunno'},
+        ...
+    }
+    """
     authors = set(c.author for c in item_list if c.author is not None)
     if not len(authors):
         return {}
@@ -45,7 +57,7 @@ def get_users_for_commits(item_list):
 
     author_objs = {}
     for author in authors:
-        author_objs[author.email] = users_by_email.get(author.email, {
+        author_objs[author.id] = users_by_email.get(author.email, {
             "name": author.name,
             "email": author.email
         })
@@ -129,11 +141,7 @@ class ReleaseSerializer(Serializer):
         if not len(release_commits):
             return None
 
-        org_ids = set(item.organization_id for item in item_list)
-        assert len(org_ids) == 1
-        org_id = org_ids.pop()
-
-        users_by_email = self._get_users_for_commits(release_commits, org_id)
+        users_by_email = get_users_for_commits([rc.commit for rc in release_commits])
         commit_count_by_release_id = Counter()
         authors_by_release_id = defaultdict(dict)
 
