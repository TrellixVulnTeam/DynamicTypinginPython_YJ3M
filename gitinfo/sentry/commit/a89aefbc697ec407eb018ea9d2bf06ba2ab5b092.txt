commit a89aefbc697ec407eb018ea9d2bf06ba2ab5b092
Author: Jen Song <jennifer.song@sentry.io>
Date:   Mon Jun 29 08:27:30 2020 -0700

    feat(transaction): adding warning banner about missing transaction usage (#19535)

diff --git a/src/sentry/static/sentry/app/views/organizationStats/organizationStatsDetails.jsx b/src/sentry/static/sentry/app/views/organizationStats/organizationStatsDetails.jsx
index 46a95dd90b..61c54e2bb5 100644
--- a/src/sentry/static/sentry/app/views/organizationStats/organizationStatsDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStats/organizationStatsDetails.jsx
@@ -16,6 +16,7 @@ import {
   ProjectTableDataElement,
 } from 'app/views/organizationStats/projectTableLayout';
 import {PageContent} from 'app/styles/organization';
+import PerformanceAlert from 'app/views/organizationStats/performanceAlert';
 
 class OrganizationStats extends React.Component {
   static propTypes = {
@@ -79,11 +80,11 @@ class OrganizationStats extends React.Component {
             <TextBlock>
               {t(
                 `The chart below reflects events the system has received
-            across your entire organization. Events are broken down into
-            three categories: Accepted, Rate Limited, and Filtered. Rate
-            Limited events are entries that the system threw away due to quotas
-            being hit, and Filtered events are events that were blocked
-            due to your inbound data filter rules.`
+                across your entire organization. Events are broken down into
+                three categories: Accepted, Rate Limited, and Filtered. Rate
+                Limited events are entries that the system threw away due to quotas
+                being hit, and Filtered events are events that were blocked
+                due to your inbound data filter rules.`
               )}
             </TextBlock>
           </div>
@@ -95,6 +96,7 @@ class OrganizationStats extends React.Component {
           )}
         </div>
         <div>
+          <PerformanceAlert />
           {statsLoading ? (
             <LoadingIndicator />
           ) : statsError ? (
diff --git a/src/sentry/static/sentry/app/views/organizationStats/performanceAlert.tsx b/src/sentry/static/sentry/app/views/organizationStats/performanceAlert.tsx
new file mode 100644
index 0000000000..94accfeeaf
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationStats/performanceAlert.tsx
@@ -0,0 +1,26 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import {IconInfo} from 'app/icons';
+import Alert from 'app/components/alert';
+import Feature from 'app/components/acl/feature';
+
+type Props = {message?: React.ReactNode};
+
+const PerformanceAlert = ({message}: Props) => (
+  <Feature features={['performance-view']}>
+    <AlertContainer>
+      <Alert type="info" icon={<IconInfo />} data-test-id="performance-usage">
+        {message || t('Transactions and attachments are not yet included in the chart.')}
+      </Alert>
+    </AlertContainer>
+  </Feature>
+);
+
+const AlertContainer = styled('div')`
+  display: grid;
+  grid-auto-columns: max-content;
+`;
+
+export default PerformanceAlert;
diff --git a/tests/js/spec/views/organizationStats/organizationStatsDetails.spec.jsx b/tests/js/spec/views/organizationStats/organizationStatsDetails.spec.jsx
new file mode 100644
index 0000000000..01ef39ca29
--- /dev/null
+++ b/tests/js/spec/views/organizationStats/organizationStatsDetails.spec.jsx
@@ -0,0 +1,53 @@
+import React from 'react';
+
+import {mountWithTheme} from 'sentry-test/enzyme';
+
+import OrganizationStats from 'app/views/organizationStats/organizationStatsDetails';
+
+describe('OrganizationStats', function() {
+  it('renders', function() {
+    const organization = TestStubs.Organization();
+    const props = {
+      statsLoading: false,
+      projectsLoading: false,
+      orgTotal: {},
+      orgStats: [],
+      projectTotals: [],
+      projectMap: {},
+      organization,
+    };
+
+    const wrapper = mountWithTheme(
+      <OrganizationStats {...props} />,
+      TestStubs.routerContext([{organization}])
+    );
+
+    expect(wrapper.find('PageHeading').text()).toBe('Organization Stats');
+    expect(wrapper.find('Panel[className="bar-chart"]').exists()).toBe(true);
+    expect(wrapper.find('ProjectTable').exists()).toBe(true);
+    expect(wrapper.find('Alert[data-test-id="performance-usage"]').exists()).toBe(false);
+  });
+
+  it('renders alert for performance feature', function() {
+    const organization = TestStubs.Organization({features: ['performance-view']});
+    const props = {
+      statsLoading: false,
+      projectsLoading: false,
+      orgTotal: {},
+      orgStats: [],
+      projectTotals: [],
+      projectMap: {},
+      organization,
+    };
+
+    const wrapper = mountWithTheme(
+      <OrganizationStats {...props} />,
+      TestStubs.routerContext([{organization}])
+    );
+
+    expect(wrapper.find('PageHeading').text()).toBe('Organization Stats');
+    expect(wrapper.find('Panel[className="bar-chart"]').exists()).toBe(true);
+    expect(wrapper.find('ProjectTable').exists()).toBe(true);
+    expect(wrapper.find('Alert[data-test-id="performance-usage"]').exists()).toBe(true);
+  });
+});
