commit b88ce74d518670b33b5d5e40a29622c86079e78a
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Mar 14 10:38:00 2018 -0700

    feat(ui): Refresh Project Keys/Details UI (#7423)
    
    * Move projectKeys files into `views/settings/project/projectKeys`
    * codesplit
    * Change background color of TextCopyInput to look more disabled
    * feat(ui): Fix padding on `Field` when no `ControlState` is present
    * add layout props to `PanelHeader`

diff --git a/src/sentry/static/sentry/app/proptypes.jsx b/src/sentry/static/sentry/app/proptypes.jsx
index c4ffb10840..8ff993f96c 100644
--- a/src/sentry/static/sentry/app/proptypes.jsx
+++ b/src/sentry/static/sentry/app/proptypes.jsx
@@ -187,6 +187,28 @@ export const PluginsStore = PropTypes.shape({
   pageLinks: PropTypes.any,
 });
 
+export const ProjectDsn = {
+  secret: PropTypes.string,
+  minidump: PropTypes.string,
+  public: PropTypes.string,
+  csp: PropTypes.string,
+};
+
+export const ProjectDsnShape = PropTypes.shape(ProjectDsn);
+
+export const ProjectKey = PropTypes.shape({
+  dsn: ProjectDsnShape,
+  public: PropTypes.string,
+  secret: PropTypes.string,
+  name: PropTypes.string,
+  rateLimit: PropTypes.number,
+  projectId: PropTypes.number,
+  dateCreated: PropTypes.string,
+  id: PropTypes.string,
+  isActive: PropTypes.bool,
+  label: PropTypes.string,
+});
+
 let SentryTypes = {
   AnyModel: PropTypes.shape({
     id: PropTypes.string.isRequired,
@@ -211,6 +233,7 @@ let SentryTypes = {
   Plugin,
   PluginShape,
   PluginsStore,
+  ProjectKey,
   User,
 };
 
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index bd952e48d6..409fb2acd5 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -73,8 +73,6 @@ import ProjectGeneralSettings from './views/projectGeneralSettings';
 import ProjectGettingStarted from './views/projectInstall/gettingStarted';
 import ProjectInstallOverview from './views/projectInstall/overview';
 import ProjectInstallPlatform from './views/projectInstall/platform';
-import ProjectKeyDetails from './views/projectKeyDetails';
-import ProjectKeys from './views/projectKeys';
 import ProjectPicker from './views/settings/components/projectPicker';
 import ProjectIssueTracking from './views/projectIssueTracking';
 import ProjectReleases from './views/projectReleases';
@@ -326,7 +324,6 @@ const projectSettingsRoutes = (
         import(/*webpackChunkName: "ProjectProcessingIssues"*/ './views/settings/project/projectProcessingIssues')}
       component={errorHandler(LazyLoad)}
     />
-
     <Route
       path="filters/"
       name="Inbound Filters"
@@ -337,13 +334,21 @@ const projectSettingsRoutes = (
       <IndexRedirect to="data-filters/" />
       <Route path=":filterType/" />
     </Route>
+    <Route path="keys/" name="Client Keys">
+      <IndexRoute
+        componentPromise={() =>
+          import(/*webpackChunkName: "ProjectKeys"*/ './views/settings/project/projectKeys')}
+        component={errorHandler(LazyLoad)}
+      />
 
-    <Route path="keys/" name="Client Keys" component={errorHandler(ProjectKeys)} />
-    <Route
-      path="keys/:keyId/"
-      name="Client Key Details"
-      component={errorHandler(ProjectKeyDetails)}
-    />
+      <Route
+        path=":keyId/"
+        name="Details"
+        componentPromise={() =>
+          import(/*webpackChunkName: "ProjectKeyDetails"*/ './views/settings/project/projectKeys/projectKeyDetails')}
+        component={errorHandler(LazyLoad)}
+      />
+    </Route>
     <Route
       path="user-feedback/"
       name="User Feedback"
diff --git a/src/sentry/static/sentry/app/views/projectKeyDetails.jsx b/src/sentry/static/sentry/app/views/projectKeyDetails.jsx
deleted file mode 100644
index 2d14e6075a..0000000000
--- a/src/sentry/static/sentry/app/views/projectKeyDetails.jsx
+++ /dev/null
@@ -1,615 +0,0 @@
-import {browserHistory} from 'react-router';
-import {isEqual} from 'lodash';
-import DocumentTitle from 'react-document-title';
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-import idx from 'idx';
-
-import {
-  BooleanField,
-  FormState,
-  NumberField,
-  Select2Field,
-  TextField,
-} from '../components/forms';
-import {t, tct} from '../locale';
-import ApiMixin from '../mixins/apiMixin';
-import AutoSelectText from '../components/autoSelectText';
-import DateTime from '../components/dateTime';
-import DynamicWrapper from '../components/dynamicWrapper';
-import FlowLayout from '../components/flowLayout';
-import HookStore from '../stores/hookStore';
-import IndicatorStore from '../stores/indicatorStore';
-import LoadingError from '../components/loadingError';
-import LoadingIndicator from '../components/loadingIndicator';
-import ProjectState from '../mixins/projectState';
-import StackedBarChart from '../components/stackedBarChart';
-
-// Exporting this only so we can quickly and simply unit test it
-// Not moving this to utils because this is tightly coupled to the UI
-export const getRateLimitError = (obj, key) => {
-  if (!obj || !obj.rateLimit || !Array.isArray(obj.rateLimit)) return null;
-
-  return !!obj.rateLimit.find(errorObj => errorObj[key] && errorObj[key].length);
-};
-
-const KeyStats = createReactClass({
-  displayName: 'KeyStats',
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    let until = Math.floor(new Date().getTime() / 1000);
-    let since = until - 3600 * 24 * 30;
-
-    return {
-      since,
-      until,
-      loading: true,
-      error: false,
-      stats: null,
-      emptyStats: false,
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  fetchData() {
-    let {keyId, orgId, projectId} = this.props.params;
-    this.api.request(`/projects/${orgId}/${projectId}/keys/${keyId}/stats/`, {
-      query: {
-        since: this.state.since,
-        until: this.state.until,
-        resolution: '1d',
-      },
-      success: data => {
-        let emptyStats = true;
-        let stats = data.map(p => {
-          if (p.total) emptyStats = false;
-          return {
-            x: p.ts,
-            y: [p.accepted, p.dropped],
-          };
-        });
-        this.setState({
-          stats,
-          emptyStats,
-          error: false,
-          loading: false,
-        });
-      },
-      error: () => {
-        this.setState({error: true, loading: false});
-      },
-    });
-  },
-
-  renderTooltip(point, pointIdx, chart) {
-    let timeLabel = chart.getTimeLabel(point);
-    let [accepted, dropped, filtered] = point.y;
-
-    let value = `${accepted.toLocaleString()} accepted`;
-    if (dropped) {
-      value += `<br>${dropped.toLocaleString()} rate limited`;
-    }
-    if (filtered) {
-      value += `<br>${filtered.toLocaleString()} filtered`;
-    }
-
-    return (
-      '<div style="width:150px">' +
-      `<div class="time-label">${timeLabel}</div>` +
-      `<div class="value-label">${value}</div>` +
-      '</div>'
-    );
-  },
-
-  render() {
-    if (this.state.loading)
-      return (
-        <div className="box">
-          <LoadingIndicator />
-        </div>
-      );
-    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
-
-    return (
-      <div className="box">
-        <div className="box-header">
-          <h5>{t('Key usage in the last 30 days (by day)')}</h5>
-        </div>
-        {!this.state.emptyStats ? (
-          <StackedBarChart
-            points={this.state.stats}
-            height={150}
-            label="events"
-            barClasses={['accepted', 'rate-limited']}
-            className="standard-barchart"
-            tooltip={this.renderTooltip}
-          />
-        ) : (
-          <div className="box-content">
-            <div className="blankslate p-y-2">
-              <h5>{t('Nothing recorded in the last 30 days.')}</h5>
-              <p className="m-b-0">
-                {t('Total events captured using these credentials.')}
-              </p>
-            </div>
-          </div>
-        )}
-      </div>
-    );
-  },
-});
-
-const KeySettings = createReactClass({
-  displayName: 'KeySettings',
-
-  propTypes: {
-    organization: PropTypes.object.isRequired,
-    project: PropTypes.object.isRequired,
-    access: PropTypes.object.isRequired,
-    data: PropTypes.object.isRequired,
-    initialData: PropTypes.object,
-    onRemove: PropTypes.func.isRequired,
-    onSave: PropTypes.func.isRequired,
-    rateLimitsEnabled: PropTypes.bool,
-  },
-
-  mixins: [ApiMixin, ProjectState],
-
-  getInitialState() {
-    return {
-      formData: Object.assign({}, this.props.initialData),
-      errors: {},
-      hooksDisabled: HookStore.get('project:rate-limits:disabled'),
-    };
-  },
-
-  onFieldChange(name, value) {
-    this.setState(state => {
-      return {
-        formData: {
-          ...state.formData,
-          [name]: value,
-        },
-      };
-    });
-  },
-
-  onRateLimitChange(name, value) {
-    this.setState(state => {
-      return {
-        formData: {
-          ...state.formData,
-          rateLimit: {
-            ...(state.formData.rateLimit || {}),
-            [name]: value,
-          },
-        },
-      };
-    });
-  },
-
-  onSubmit(e) {
-    e.preventDefault();
-
-    if (this.state.state == FormState.SAVING) {
-      return;
-    }
-    this.setState(
-      {
-        state: FormState.SAVING,
-      },
-      () => {
-        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-        let {keyId, orgId, projectId} = this.props.params;
-        this.api.request(`/projects/${orgId}/${projectId}/keys/${keyId}/`, {
-          method: 'PUT',
-          data: this.state.formData,
-          success: data => {
-            this.props.onSave(data);
-            this.setState({
-              state: FormState.READY,
-              errors: {},
-            });
-          },
-          error: error => {
-            this.setState({
-              state: FormState.ERROR,
-              errors: error.responseJSON,
-            });
-          },
-          complete: () => {
-            IndicatorStore.remove(loadingIndicator);
-          },
-        });
-      }
-    );
-  },
-
-  onRemove(e) {
-    e.preventDefault();
-    if (this.state.loading) return;
-
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-    let {keyId, orgId, projectId} = this.props.params;
-    this.api.request(`/projects/${orgId}/${projectId}/keys/${keyId}/`, {
-      method: 'DELETE',
-      success: (d, _, jqXHR) => {
-        this.props.onRemove();
-        IndicatorStore.remove(loadingIndicator);
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false,
-        });
-        IndicatorStore.remove(loadingIndicator);
-      },
-    });
-  },
-
-  getRateLimitWindows() {
-    return [
-      ['', ''],
-      [60, '1 minute'],
-      [300, '5 minutes'],
-      [900, '15 minutes'],
-      [3600, '1 hour'],
-      [7200, '2 hours'],
-      [14400, '4 hours'],
-      [21600, '6 hours'],
-      [43200, '12 hours'],
-      [86400, '24 hours'],
-    ];
-  },
-
-  render() {
-    let features = this.getProjectFeatures();
-    let isSaving = this.state.state === FormState.SAVING;
-    let {errors, formData} = this.state;
-    let hasChanges = !isEqual(this.props.initialData, formData);
-    let {access, data, rateLimitsEnabled, organization, project} = this.props;
-    let rateLimitWindowError = getRateLimitError(errors, 'window');
-    let rateLimitCountError = getRateLimitError(errors, 'count');
-
-    return (
-      <form onSubmit={this.onSubmit} className="form-stacked">
-        {this.state.state === FormState.ERROR && (
-          <div className="alert alert-error alert-block">
-            {t(
-              'Unable to save your changes. Please ensure all fields are valid and try again.'
-            )}
-          </div>
-        )}
-        <div className="box">
-          <div className="box-header">
-            <h3>{t('Details')}</h3>
-          </div>
-          <div className="box-content with-padding">
-            <TextField
-              key="name"
-              name="name"
-              label={t('Name')}
-              value={formData.name}
-              required={false}
-              error={errors.name}
-              onChange={this.onFieldChange.bind(this, 'name')}
-            />
-
-            <BooleanField
-              key="isActive"
-              name="isActive"
-              label={t('Enabled')}
-              value={formData.isActive}
-              required={false}
-              error={errors.isActive}
-              help={
-                'Accept events from this key? This may be used to temporarily suspend a key.'
-              }
-              onChange={this.onFieldChange.bind(this, 'isActive')}
-            />
-
-            <div className="form-group">
-              <label>{t('Created')}</label>
-              <div className="controls">
-                <DateTime date={data.dateCreated} />
-              </div>
-            </div>
-
-            <fieldset className="form-actions">
-              <button
-                type="submit"
-                className="btn btn-primary"
-                disabled={isSaving || !hasChanges}
-              >
-                {t('Save Changes')}
-              </button>
-            </fieldset>
-          </div>
-        </div>
-
-        {!rateLimitsEnabled ? (
-          this.state.hooksDisabled
-            .map(hook => {
-              return hook(organization, project, data);
-            })
-            .shift()
-        ) : (
-          <div className="box">
-            <div className="box-header">
-              <h3>{t('Rate Limits')}</h3>
-            </div>
-            <div className="box-content with-padding">
-              <p>
-                {
-                  'Rate limits provide a flexible way to manage your event volume. If you have a noisy project or environment you can configure a rate limit for this key to reduce the number of events processed.'
-                }
-              </p>
-              <div className="form-group rate-limit-group">
-                <label>{t('Rate Limit')}</label>
-                <FlowLayout truncate={false}>
-                  <div style={{width: 80}}>
-                    <NumberField
-                      hideErrorMessage
-                      key="rateLimit.count"
-                      name="rateLimit.count"
-                      min={0}
-                      value={idx(formData, _ => _.rateLimit.count)}
-                      required={false}
-                      error={rateLimitCountError}
-                      placeholder={t('count')}
-                      onChange={this.onRateLimitChange.bind(this, 'count')}
-                      className=""
-                    />
-                  </div>
-                  <div style={{margin: '0 10px'}}>
-                    <small>event(s) in</small>
-                  </div>
-                  <div style={{width: 150}}>
-                    <Select2Field
-                      width="100%"
-                      hideErrorMessage
-                      key="rateLimit.window"
-                      name="rateLimit.window"
-                      choices={this.getRateLimitWindows()}
-                      value={idx(formData, _ => _.rateLimit.window)}
-                      required={false}
-                      error={rateLimitWindowError}
-                      placeholder={t('window')}
-                      allowClear={true}
-                      onChange={this.onRateLimitChange.bind(this, 'window')}
-                      className=""
-                    />
-                  </div>
-                </FlowLayout>
-
-                <div className="help-block">
-                  {t(
-                    'Apply a rate limit to this credential to cap the amount of events accepted during a time window.'
-                  )}
-                </div>
-              </div>
-              <fieldset className="form-actions">
-                <button
-                  type="submit"
-                  className="btn btn-primary"
-                  disabled={isSaving || !hasChanges}
-                >
-                  {t('Save Changes')}
-                </button>
-              </fieldset>
-            </div>
-          </div>
-        )}
-        <div className="box dsn-credentials">
-          <div className="box-header">
-            <h3>{t('Credentials')}</h3>
-          </div>
-          <div className="box-content with-padding">
-            <p>
-              {t(
-                'Your credentials are coupled to a public and secret key. Different clients will require different credentials, so make sure you check the documentation before plugging things in.'
-              )}
-            </p>
-            <div className="form-group">
-              <label>{t('DSN')}</label>
-              <AutoSelectText className="form-control disabled">
-                <DynamicWrapper
-                  value={data.dsn.secret}
-                  fixed={data.dsn.secret.replace(data.projectId, '<<projectId>>')}
-                />
-              </AutoSelectText>
-            </div>
-
-            <div className="form-group">
-              <label>{t('DSN (Public)')}</label>
-              <AutoSelectText className="form-control disabled">
-                <DynamicWrapper
-                  value={data.dsn.public}
-                  fixed={data.dsn.public.replace(data.projectId, '<<projectId>>')}
-                />
-              </AutoSelectText>
-              <div className="help-block">
-                {tct('Use your public DSN with browser-based SDKs such as [raven-js].', {
-                  'raven-js': (
-                    <a href="https://github.com/getsentry/raven-js">raven-js</a>
-                  ),
-                })}
-              </div>
-            </div>
-            <div className="form-group">
-              <label>{t('CSP Endpoint')}</label>
-              <AutoSelectText className="form-control disabled">
-                <DynamicWrapper
-                  value={data.dsn.csp}
-                  fixed={data.dsn.csp.replace(data.projectId, '<<projectId>>')}
-                />
-              </AutoSelectText>
-              <div className="help-block">
-                {tct(
-                  'Use your CSP endpoint in the [directive] directive in your [header] header.',
-                  {
-                    directive: <code>report-uri</code>,
-                    header: <code>Content-Security-Policy</code>,
-                  }
-                )}
-              </div>
-            </div>
-            {features.has('minidump') && (
-              <div className="form-group">
-                <label>{t('Minidump Endpoint')}</label>
-                <AutoSelectText className="form-control disabled">
-                  {data.dsn.minidump}
-                </AutoSelectText>
-                <div className="help-block">
-                  {tct(
-                    'Use this endpoint to upload minidump crash reports, for example with Electron, Crashpad or Breakpad.',
-                    {
-                      /* TODO: add a link to minidump docs */
-                    }
-                  )}
-                </div>
-              </div>
-            )}
-            <div className="form-group">
-              <label>{t('Public Key')}</label>
-              <div className="controls">
-                <AutoSelectText className="form-control disabled">
-                  {data.public}
-                </AutoSelectText>
-              </div>
-            </div>
-            <div className="form-group">
-              <label>{t('Secret Key')}</label>
-              <div className="controls">
-                <AutoSelectText className="form-control disabled">
-                  {data.secret}
-                </AutoSelectText>
-              </div>
-            </div>
-            <div className="form-group">
-              <label>{t('Project ID')}</label>
-              <div className="controls">
-                <AutoSelectText className="form-control disabled">
-                  <DynamicWrapper value={data.projectId} fixed="<<projectId>>" />
-                </AutoSelectText>
-              </div>
-            </div>
-          </div>
-        </div>
-
-        {access.has('project:admin') && (
-          <div className="box">
-            <div className="box-header">
-              <h3>{t('Revoke Key')}</h3>
-            </div>
-            <div className="box-content with-padding">
-              <p>
-                {t(
-                  'Revoking this key will immediately remove and suspend the credentials. This action is irreversible.'
-                )}
-              </p>
-
-              <fieldset className="form-actions">
-                <a onClick={this.onRemove} className="btn btn-danger">
-                  {t('Revoke Key')}
-                </a>
-              </fieldset>
-            </div>
-          </div>
-        )}
-      </form>
-    );
-  },
-});
-
-export default createReactClass({
-  displayName: 'projectKeyDetails',
-  mixins: [ApiMixin, ProjectState],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      data: null,
-    };
-  },
-
-  componentDidMount() {
-    this.fetchData();
-  },
-
-  fetchData() {
-    let {keyId, orgId, projectId} = this.props.params;
-    this.api.request(`/projects/${orgId}/${projectId}/keys/${keyId}/`, {
-      success: (data, _, jqXHR) => {
-        this.setState({
-          error: false,
-          loading: false,
-          data,
-        });
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false,
-        });
-      },
-    });
-  },
-
-  handleRemove(data) {
-    let {orgId, projectId} = this.props.params;
-    browserHistory.push(`/${orgId}/${projectId}/settings/keys/`);
-  },
-
-  handleSave(data) {
-    this.setState({data: {...this.state.data, ...data}});
-  },
-
-  renderLoading() {
-    return (
-      <div className="box">
-        <LoadingIndicator />
-      </div>
-    );
-  },
-
-  render() {
-    if (this.state.loading) return this.renderLoading();
-    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
-
-    let {data} = this.state;
-    let {params} = this.props;
-
-    return (
-      <DocumentTitle title={t('Key Details')}>
-        <div className="ref-key-details">
-          <h2>{t('Key Details')}</h2>
-
-          <KeyStats params={params} />
-
-          <KeySettings
-            organization={this.getOrganization()}
-            project={this.getProject()}
-            access={this.getAccess()}
-            params={params}
-            initialData={{
-              isActive: data.isActive,
-              name: data.name,
-              rateLimit: data.rateLimit,
-            }}
-            rateLimitsEnabled={this.getProjectFeatures().has('rate-limits')}
-            data={data}
-            onSave={this.handleSave}
-            onRemove={this.handleRemove}
-          />
-        </div>
-      </DocumentTitle>
-    );
-  },
-});
diff --git a/src/sentry/static/sentry/app/views/projectKeys.jsx b/src/sentry/static/sentry/app/views/projectKeys.jsx
deleted file mode 100644
index 01434da860..0000000000
--- a/src/sentry/static/sentry/app/views/projectKeys.jsx
+++ /dev/null
@@ -1,396 +0,0 @@
-import {Link} from 'react-router';
-import DocumentTitle from 'react-document-title';
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-
-import {t, tct} from '../locale';
-import ApiMixin from '../mixins/apiMixin';
-import AutoSelectText from '../components/autoSelectText';
-import Button from '../components/buttons/button';
-import ClippedBox from '../components/clippedBox';
-import Confirm from '../components/confirm';
-import DynamicWrapper from '../components/dynamicWrapper';
-import IndicatorStore from '../stores/indicatorStore';
-import LoadingError from '../components/loadingError';
-import LoadingIndicator from '../components/loadingIndicator';
-import OrganizationState from '../mixins/organizationState';
-import Pagination from '../components/pagination';
-import ProjectState from '../mixins/projectState';
-import SettingsPageHeader from './settings/components/settingsPageHeader';
-import TextBlock from './settings/components/text/textBlock';
-
-const KeyRow = createReactClass({
-  displayName: 'KeyRow',
-
-  propTypes: {
-    orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
-    data: PropTypes.object.isRequired,
-    access: PropTypes.object.isRequired,
-    onToggle: PropTypes.func.isRequired,
-    onRemove: PropTypes.func.isRequired,
-  },
-
-  mixins: [ApiMixin, ProjectState],
-
-  getInitialState() {
-    return {
-      loading: false,
-      error: false,
-    };
-  },
-
-  handleRemove() {
-    if (this.state.loading) return;
-
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-    let {orgId, projectId, data} = this.props;
-    this.api.request(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {
-      method: 'DELETE',
-      success: (d, _, jqXHR) => {
-        this.props.onRemove();
-        IndicatorStore.remove(loadingIndicator);
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false,
-        });
-        IndicatorStore.remove(loadingIndicator);
-      },
-    });
-  },
-
-  handleUpdate(params, cb) {
-    if (this.state.loading) return;
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-    let {orgId, projectId, data} = this.props;
-    this.api.request(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {
-      method: 'PUT',
-      data: params,
-      success: (d, _, jqXHR) => {
-        IndicatorStore.remove(loadingIndicator);
-        cb(d);
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false,
-        });
-        IndicatorStore.remove(loadingIndicator);
-      },
-    });
-  },
-
-  handleEnable() {
-    this.handleUpdate(
-      {
-        isActive: true,
-      },
-      this.props.onToggle
-    );
-  },
-
-  handleDisable() {
-    this.handleUpdate(
-      {
-        isActive: false,
-      },
-      this.props.onToggle
-    );
-  },
-
-  render() {
-    let features = this.getProjectFeatures();
-    let {access, data, orgId, projectId} = this.props;
-    let editUrl = `/${orgId}/${projectId}/settings/keys/${data.id}/`;
-    let controls = [
-      <Link key="edit" to={editUrl} className="btn btn-default btn-sm">
-        {t('Details')}
-      </Link>,
-    ];
-    if (access.has('project:write')) {
-      controls.push(
-        <a
-          key="toggle"
-          className="btn btn-default btn-sm"
-          onClick={data.isActive ? this.handleDisable : this.handleEnable}
-          disabled={this.state.loading}
-        >
-          {data.isActive ? t('Disable') : t('Enable')}
-        </a>
-      );
-      controls.push(
-        <Confirm
-          key="remove"
-          priority="danger"
-          disabled={this.state.loading}
-          onConfirm={this.handleRemove}
-          confirmText={t('Remove Key')}
-          message={t(
-            'Are you sure you want to remove this key? This action is irreversible.'
-          )}
-        >
-          <a className="btn btn-sm btn-default" disabled={this.state.loading}>
-            <span className="icon icon-trash" />
-          </a>
-        </Confirm>
-      );
-    }
-
-    return (
-      <div className={`client-key-item ${!data.isActive ? 'disabled' : ''}`}>
-        <div className="pull-right" style={{marginTop: -10}}>
-          {controls.map((c, n) => <span key={n}> {c}</span>)}
-        </div>
-        <h5>
-          <Link to={editUrl}>{data.label}</Link>
-          {!data.isActive && (
-            <small>
-              {' '}
-              <i className="icon icon-ban" /> {t('Disabled')}
-            </small>
-          )}
-        </h5>
-
-        <ClippedBox
-          clipHeight={150}
-          defaultClipped={true}
-          btnClassName="btn btn-default btn-sm"
-          btnText={t('Expand')}
-        >
-          <div className="form-group">
-            <label>{t('DSN')}</label>
-            <AutoSelectText className="form-control disabled">
-              <DynamicWrapper
-                value={data.dsn.secret}
-                fixed={data.dsn.secret.replace(
-                  new RegExp(`\/${data.projectId}$`),
-                  '/<<projectId>>'
-                )}
-              />
-            </AutoSelectText>
-          </div>
-
-          <div className="form-group">
-            <label>{t('DSN (Public)')}</label>
-            <AutoSelectText className="form-control disabled">
-              <DynamicWrapper
-                value={data.dsn.public}
-                fixed={data.dsn.public.replace(
-                  new RegExp(`\/${data.projectId}$`),
-                  '/<<projectId>>'
-                )}
-              />
-            </AutoSelectText>
-            <div className="help-block">
-              {tct('Use your public DSN with browser-based SDKs such as [raven-js].', {
-                'raven-js': <a href="https://github.com/getsentry/raven-js">raven-js</a>,
-              })}
-            </div>
-          </div>
-          <div className="form-group">
-            <label>{t('CSP Endpoint')}</label>
-            <AutoSelectText className="form-control disabled">
-              {data.dsn.csp}
-            </AutoSelectText>
-            <div className="help-block">
-              {tct(
-                'Use your CSP endpoint in the [directive] directive in your [header] header.',
-                {
-                  directive: <code>report-uri</code>,
-                  header: <code>Content-Security-Policy</code>,
-                }
-              )}
-            </div>
-          </div>
-          {features.has('minidump') && (
-            <div className="form-group">
-              <label>{t('Minidump Endpoint')}</label>
-              <AutoSelectText className="form-control disabled">
-                {data.dsn.minidump}
-              </AutoSelectText>
-              <div className="help-block">
-                {tct(
-                  'Use this endpoint to upload minidump crash reports, for example with Electron, Crashpad or Breakpad.',
-                  {
-                    /* TODO: add a link to minidump docs */
-                  }
-                )}
-              </div>
-            </div>
-          )}
-        </ClippedBox>
-      </div>
-    );
-  },
-});
-
-export default createReactClass({
-  displayName: 'projectKeys',
-  mixins: [ApiMixin, OrganizationState],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      keyList: [],
-    };
-  },
-
-  componentDidMount() {
-    this.fetchData();
-  },
-
-  fetchData() {
-    let {orgId, projectId} = this.props.params;
-    this.api.request(`/projects/${orgId}/${projectId}/keys/`, {
-      success: (data, _, jqXHR) => {
-        this.setState({
-          error: false,
-          loading: false,
-          keyList: data,
-          pageLinks: jqXHR.getResponseHeader('Link'),
-        });
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false,
-        });
-      },
-    });
-  },
-
-  handleRemoveKey(data) {
-    this.setState(state => {
-      return {
-        keyList: state.keyList.filter(key => {
-          return key.id !== data.id;
-        }),
-      };
-    });
-  },
-
-  handleToggleKey(data, newData) {
-    this.setState(state => {
-      let keyList = state.keyList;
-      keyList.forEach(key => {
-        if (key.id === data.id) {
-          key.isActive = newData.isActive;
-        }
-      });
-      return {keyList};
-    });
-  },
-
-  onCreateKey() {
-    let {orgId, projectId} = this.props.params;
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-    this.api.request(`/projects/${orgId}/${projectId}/keys/`, {
-      method: 'POST',
-      success: (data, _, jqXHR) => {
-        this.setState(state => {
-          return {
-            keyList: [...state.keyList, data],
-          };
-        });
-        IndicatorStore.remove(loadingIndicator);
-      },
-      error: () => {
-        IndicatorStore.remove(loadingIndicator);
-        IndicatorStore.add(t('Unable to create new key. Please try again.'), 'error');
-      },
-    });
-  },
-
-  renderBody() {
-    let body;
-    if (this.state.loading) body = this.renderLoading();
-    else if (this.state.error) body = <LoadingError onRetry={this.fetchData} />;
-    else if (this.state.keyList.length > 0) body = this.renderResults();
-    else body = this.renderEmpty();
-    return body;
-  },
-
-  renderLoading() {
-    return (
-      <div className="box">
-        <LoadingIndicator />
-      </div>
-    );
-  },
-
-  renderEmpty() {
-    return (
-      <div className="box empty-stream">
-        <span className="icon icon-exclamation" />
-        <p>{t('There are no keys active for this project.')}</p>
-      </div>
-    );
-  },
-
-  renderResults() {
-    let {orgId, projectId} = this.props.params;
-    let access = this.getAccess();
-    return (
-      <div>
-        <div className="client-key-list">
-          {this.state.keyList.map(key => {
-            return (
-              <KeyRow
-                access={access}
-                key={key.id}
-                orgId={orgId}
-                projectId={projectId}
-                data={key}
-                onToggle={this.handleToggleKey.bind(this, key)}
-                onRemove={this.handleRemoveKey.bind(this, key)}
-              />
-            );
-          })}
-        </div>
-        <Pagination pageLinks={this.state.pageLinks} />
-      </div>
-    );
-  },
-
-  render() {
-    let access = this.getAccess();
-    return (
-      <DocumentTitle title={t('Client Keys')}>
-        <div className="ref-keys">
-          <SettingsPageHeader
-            title={t('Client Keys')}
-            action={
-              access.has('project:write') ? (
-                <Button
-                  onClick={this.onCreateKey}
-                  size="small"
-                  priority="primary"
-                  icon="icon-circle-add"
-                >
-                  {t('Generate New Key')}
-                </Button>
-              ) : null
-            }
-          />
-          <TextBlock>
-            {tct(
-              `To send data to Sentry you will need to configure an SDK with a client key
-            (usually referred to as the [code:SENTRY_DSN] value). For more
-            information on integrating Sentry with your application take a look at our
-            [link:documentation].`,
-              {
-                link: <a href="https://docs.sentry.io/" />,
-                code: <code />,
-              }
-            )}
-          </TextBlock>
-          {this.renderBody()}
-        </div>
-      </DocumentTitle>
-    );
-  },
-});
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
index cb9bfc2039..59f5c1282a 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
@@ -15,7 +15,14 @@ class RangeSlider extends React.Component {
      * max allowed value, not needed if using `allowedValues`
      */
     max: PropTypes.number,
-    value: PropTypes.number,
+    /**
+     * String is a valid type here only for empty string
+     * Otherwise react complains:
+     * "`value` prop on `input` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components."
+     *
+     * And we want this to be a controlled input when value is empty
+     */
+    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
     step: PropTypes.number,
     onChange: PropTypes.func,
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldWrapper.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldWrapper.jsx
index 8879711d13..4f9368bad5 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldWrapper.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldWrapper.jsx
@@ -19,8 +19,13 @@ const highlightedStyle = p =>
       `
     : '';
 
-const FieldWrapper = styled(({highlighted, inline, ...props}) => <Flex {...props} />)`
-  padding: 0.9em 0 0.9em 1.3em;
+/**
+ * `hasControlState` - adds padding to right if this is false
+ */
+const FieldWrapper = styled(({highlighted, inline, hasControlState, ...props}) => (
+  <Flex {...props} />
+))`
+  padding: 0.9em ${p => (p.hasControlState ? '0' : '1.3em')} 0.9em 1.3em;
   border-bottom: 1px solid ${p => p.theme.borderLight};
   transition: background 0.15s;
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx
index a66b7a194b..2e6f2f143e 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx
@@ -47,6 +47,11 @@ class Field extends React.Component {
      */
     disabledReason: PropTypes.string,
 
+    /**
+     * Hide ControlState component
+     */
+    hideControlState: PropTypes.bool,
+
     /**
      * User-facing field name
      */
@@ -90,6 +95,7 @@ class Field extends React.Component {
       visible,
       disabled,
       disabledReason,
+      hideControlState,
       label,
       help,
       id,
@@ -118,6 +124,7 @@ class Field extends React.Component {
           alignRight={alignRight}
           disabled={isDisabled}
           disabledReason={disabledReason}
+          hideControlState={hideControlState}
         >
           {children}
         </FieldControl>
@@ -125,7 +132,11 @@ class Field extends React.Component {
     }
 
     return (
-      <FieldWrapper inline={inline} highlighted={highlighted}>
+      <FieldWrapper
+        inline={inline}
+        highlighted={highlighted}
+        hasControlState={!hideControlState}
+      >
         <FieldDescription inline={inline} htmlFor={id}>
           {label && (
             <FieldLabel>
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/textCopyInput.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/textCopyInput.jsx
index d3369cdb8e..719b0a55ed 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/textCopyInput.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/textCopyInput.jsx
@@ -14,6 +14,7 @@ const StyledInput = styled(props => {
   return <input {...props} />;
 })`
   ${inputStyles};
+  background-color: ${p => p.theme.offWhite};
   border-right-width: 0;
   border-top-right-radius: 0;
   border-bottom-right-radius: 0;
diff --git a/src/sentry/static/sentry/app/views/settings/components/panelHeader.jsx b/src/sentry/static/sentry/app/views/settings/components/panelHeader.jsx
index e6b7af2a4d..1c9787298a 100644
--- a/src/sentry/static/sentry/app/views/settings/components/panelHeader.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/panelHeader.jsx
@@ -22,21 +22,21 @@ const StyledPanelHeader = styled(({disablePadding, hasButtons, ...props}) => (
   ${getPadding};
 `;
 
-const StyledPanelHeading = styled(({lightText, isFlex, justify, ...props}) => (
+const StyledPanelHeading = styled(({lightText, isFlex, align, justify, ...props}) => (
   <PanelHeading {...props} />
 ))`
   font-size: inherit;
   text-transform: inherit;
   margin: 0;
-  ${p => (p.justify ? `justify-content: ${p.justify};` : '')};
-  ${p => (p.align ? `align-items: ${p.align};` : '')};
   ${getFlex};
   ${p => (p.lightText ? `color: ${p.theme.gray2}` : '')};
+  ${p => (p.align ? `align-items: ${p.align};` : '')};
+  ${p => (p.justify ? `justify-content: ${p.justify};` : '')};
 `;
 
 class PanelHeader extends React.Component {
   render() {
-    let {lightText, isFlex, justify, align, children, ...props} = this.props;
+    let {lightText, isFlex, align, justify, children, ...props} = this.props;
 
     return (
       <StyledPanelHeader {...props}>
@@ -55,11 +55,11 @@ class PanelHeader extends React.Component {
 
 PanelHeader.propTypes = {
   isFlex: PropTypes.bool,
-  justify: PropTypes.string,
-  align: PropTypes.string,
   disablePadding: PropTypes.bool,
   hasButtons: PropTypes.bool,
   lightText: PropTypes.bool,
+  align: PropTypes.string,
+  justify: PropTypes.string,
 };
 
 export default PanelHeader;
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx
new file mode 100644
index 0000000000..7ae0876dcd
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx
@@ -0,0 +1,350 @@
+import {Box} from 'grid-emotion';
+import {Link} from 'react-router';
+import DocumentTitle from 'react-document-title';
+import PropTypes from 'prop-types';
+import React from 'react';
+import createReactClass from 'create-react-class';
+import styled from 'react-emotion';
+
+import {
+  addErrorMessage,
+  addLoadingMessage,
+  addSuccessMessage,
+  removeIndicator,
+} from '../../../../actionCreators/indicator';
+import {getOrganizationState} from '../../../../mixins/organizationState';
+import {t, tct} from '../../../../locale';
+import ApiMixin from '../../../../mixins/apiMixin';
+import AsyncView from '../../../asyncView';
+import Button from '../../../../components/buttons/button';
+import ClippedBox from '../../../../components/clippedBox';
+import Confirm from '../../../../components/confirm';
+import EmptyMessage from '../../components/emptyMessage';
+import ExternalLink from '../../../../components/externalLink';
+import Pagination from '../../../../components/pagination';
+import Panel from '../../components/panel';
+import PanelBody from '../../components/panelBody';
+import PanelHeader from '../../components/panelHeader';
+import ProjectKeyCredentials from './projectKeyCredentials';
+import SentryTypes from '../../../../proptypes';
+import SettingsPageHeader from '../../components/settingsPageHeader';
+import TextBlock from '../../components/text/textBlock';
+import recreateRoute from '../../../../utils/recreateRoute';
+
+const KeyRow = createReactClass({
+  displayName: 'KeyRow',
+
+  propTypes: {
+    orgId: PropTypes.string.isRequired,
+    projectId: PropTypes.string.isRequired,
+    data: PropTypes.object.isRequired,
+    access: PropTypes.object.isRequired,
+    features: PropTypes.object.isRequired,
+    onToggle: PropTypes.func.isRequired,
+    onRemove: PropTypes.func.isRequired,
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      loading: false,
+      error: false,
+    };
+  },
+
+  handleRemove() {
+    if (this.state.loading) return;
+
+    let loadingIndicator = addLoadingMessage(t('Saving changes..'));
+    let {orgId, projectId, data} = this.props;
+    this.api.request(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {
+      method: 'DELETE',
+      success: (d, _, jqXHR) => {
+        this.props.onRemove();
+        removeIndicator(loadingIndicator);
+        addSuccessMessage(t('Revoked key'));
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false,
+        });
+        removeIndicator(loadingIndicator);
+        addErrorMessage(t('Unable to revoke key'));
+      },
+    });
+  },
+
+  handleUpdate(params, cb) {
+    if (this.state.loading) return;
+    let loadingIndicator = addLoadingMessage(t('Saving changes..'));
+    let {orgId, projectId, data} = this.props;
+    this.api.request(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {
+      method: 'PUT',
+      data: params,
+      success: (d, _, jqXHR) => {
+        removeIndicator(loadingIndicator);
+        cb(d);
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false,
+        });
+        removeIndicator(loadingIndicator);
+      },
+    });
+  },
+
+  handleEnable() {
+    this.handleUpdate(
+      {
+        isActive: true,
+      },
+      this.props.onToggle
+    );
+  },
+
+  handleDisable() {
+    this.handleUpdate(
+      {
+        isActive: false,
+      },
+      this.props.onToggle
+    );
+  },
+
+  render() {
+    let {access, features, data} = this.props;
+    let editUrl = recreateRoute(`${data.id}/`, this.props);
+    let controls = [
+      <Button key="edit" to={editUrl} size="small">
+        {t('Details')}
+      </Button>,
+    ];
+
+    if (access.has('project:write')) {
+      controls.push(
+        <Button
+          key="toggle"
+          size="small"
+          onClick={data.isActive ? this.handleDisable : this.handleEnable}
+          disabled={this.state.loading}
+        >
+          {data.isActive ? t('Disable') : t('Enable')}
+        </Button>
+      );
+      controls.push(
+        <Confirm
+          key="remove"
+          priority="danger"
+          disabled={this.state.loading}
+          onConfirm={this.handleRemove}
+          confirmText={t('Remove Key')}
+          message={t(
+            'Are you sure you want to remove this key? This action is irreversible.'
+          )}
+        >
+          <Button size="small" disabled={this.state.loading}>
+            <span className="icon icon-trash" />
+          </Button>
+        </Confirm>
+      );
+    }
+
+    return (
+      <ClientKeyItemPanel disabled={!data.isActive}>
+        <PanelHeader isFlex hasButtons align="center">
+          <Box flex="1">
+            <PanelHeaderLink to={editUrl}>{data.label}</PanelHeaderLink>
+            {!data.isActive && (
+              <small>
+                {' '}
+                <i className="icon icon-ban" /> {t('Disabled')}
+              </small>
+            )}
+          </Box>
+          <div>{controls.map((c, n) => <span key={n}> {c}</span>)}</div>
+        </PanelHeader>
+
+        <ClippedBox
+          clipHeight={150}
+          defaultClipped={true}
+          btnClassName="btn btn-default btn-sm"
+          btnText={t('Expand')}
+        >
+          <PanelBody>
+            <ProjectKeyCredentials
+              projectId={`${data.projectId}`}
+              data={data}
+              features={features}
+            />
+          </PanelBody>
+        </ClippedBox>
+      </ClientKeyItemPanel>
+    );
+  },
+});
+
+export default class ProjectKeys extends AsyncView {
+  static propTypes = {
+    routes: PropTypes.array.isRequired,
+    params: PropTypes.object.isRequired,
+  };
+
+  static contextTypes = {
+    organization: SentryTypes.Organization,
+    project: SentryTypes.Project,
+  };
+
+  getTitle() {
+    return t('Client Keys');
+  }
+
+  getEndpoints() {
+    let {orgId, projectId} = this.props.params;
+    return [['keyList', `/projects/${orgId}/${projectId}/keys/`]];
+  }
+
+  handleRemoveKey = data => {
+    this.setState(state => {
+      return {
+        keyList: state.keyList.filter(key => {
+          return key.id !== data.id;
+        }),
+      };
+    });
+  };
+
+  handleToggleKey = (data, newData) => {
+    this.setState(state => {
+      let keyList = state.keyList;
+      keyList.forEach(key => {
+        if (key.id === data.id) {
+          key.isActive = newData.isActive;
+        }
+      });
+      return {keyList};
+    });
+  };
+
+  handleCreateKey = () => {
+    let {orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/keys/`, {
+      method: 'POST',
+      success: (data, _, jqXHR) => {
+        this.setState(state => {
+          return {
+            keyList: [...state.keyList, data],
+          };
+        });
+        addSuccessMessage(t('Created a new key.'));
+      },
+      error: () => {
+        addErrorMessage(t('Unable to create new key. Please try again.'));
+      },
+    });
+  };
+
+  renderEmpty() {
+    return (
+      <Panel>
+        <EmptyMessage>
+          <span className="icon icon-exclamation" />
+          <p>{t('There are no keys active for this project.')}</p>
+        </EmptyMessage>
+      </Panel>
+    );
+  }
+
+  renderResults() {
+    let {routes, params} = this.props;
+    let {orgId, projectId} = params;
+    let access = getOrganizationState(this.context.organization).getAccess();
+    let features = new Set(this.context.project.features);
+
+    return (
+      <div>
+        <div>
+          {this.state.keyList.map(key => {
+            return (
+              <KeyRow
+                features={features}
+                api={this.api}
+                routes={routes}
+                params={params}
+                access={access}
+                key={key.id}
+                orgId={orgId}
+                projectId={`${projectId}`}
+                data={key}
+                onToggle={this.handleToggleKey.bind(this, key)}
+                onRemove={this.handleRemoveKey.bind(this, key)}
+              />
+            );
+          })}
+        </div>
+        <Pagination pageLinks={this.state.keyListPageLinks} />
+      </div>
+    );
+  }
+
+  renderBody() {
+    let access = getOrganizationState(this.context.organization).getAccess();
+    let isEmpty = !this.state.keyList.length;
+
+    return (
+      <DocumentTitle title={t('Client Keys')}>
+        <div className="ref-keys">
+          <SettingsPageHeader
+            title={t('Client Keys')}
+            action={
+              access.has('project:write') ? (
+                <Button
+                  onClick={this.handleCreateKey}
+                  size="small"
+                  priority="primary"
+                  icon="icon-circle-add"
+                >
+                  {t('Generate New Key')}
+                </Button>
+              ) : null
+            }
+          />
+          <TextBlock>
+            {tct(
+              `To send data to Sentry you will need to configure an SDK with a client key
+            (usually referred to as the [code:SENTRY_DSN] value). For more
+            information on integrating Sentry with your application take a look at our
+            [link:documentation].`,
+              {
+                link: <ExternalLink href="https://docs.sentry.io/" />,
+                code: <code />,
+              }
+            )}
+          </TextBlock>
+
+          {isEmpty ? this.renderEmpty() : this.renderResults()}
+        </div>
+      </DocumentTitle>
+    );
+  }
+}
+
+const ClientKeyItemPanel = styled(({disabled, ...props}) => <Panel {...props} />)`
+  ${p => (p.disabled ? 'opacity: 0.5;' : '')};
+
+  .box-clippable {
+    padding: 0;
+    margin: 0;
+
+    .clip-fade {
+      padding-bottom: 20px;
+    }
+  }
+`;
+
+const PanelHeaderLink = styled(Link)`
+  color: ${p => p.theme.gray3};
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.jsx
new file mode 100644
index 0000000000..9fca53729f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.jsx
@@ -0,0 +1,180 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {t, tct} from '../../../../locale';
+import ExternalLink from '../../../../components/externalLink';
+import Field from '../../components/forms/field';
+import TextCopyInput from '../../components/forms/textCopyInput';
+import SentryTypes from '../../../../proptypes';
+import getDynamicText from '../../../../utils/getDynamicText';
+
+class ProjectKeyCredentials extends React.Component {
+  static propTypes = {
+    projectId: PropTypes.string.isRequired,
+    data: SentryTypes.ProjectKey,
+    features: PropTypes.object,
+
+    showDsn: PropTypes.bool,
+    showDsnPublic: PropTypes.bool,
+    showCspEndpoint: PropTypes.bool,
+    showMinidump: PropTypes.bool,
+    showPublicKey: PropTypes.bool,
+    showSecretKey: PropTypes.bool,
+    showProjectId: PropTypes.bool,
+  };
+
+  static defaultProps = {
+    showDsn: true,
+    showDsnPublic: true,
+    showCspEndpoint: true,
+    showMinidump: true,
+    showPublicKey: false,
+    showSecretKey: false,
+    showProjectId: false,
+  };
+
+  render() {
+    let {
+      features,
+      projectId,
+      data,
+      showDsn,
+      showDsnPublic,
+      showCspEndpoint,
+      showMinidump,
+      showPublicKey,
+      showSecretKey,
+      showProjectId,
+    } = this.props;
+
+    return (
+      <React.Fragment>
+        {showDsn && (
+          <Field label={t('DSN')} inline={false} hideControlState>
+            <TextCopyInput>
+              {getDynamicText({
+                value: data.dsn.secret,
+                fixed: data.dsn.secret.replace(
+                  new RegExp(`\/${projectId}$`),
+                  '/<<projectId>>'
+                ),
+              })}
+            </TextCopyInput>
+          </Field>
+        )}
+
+        {showDsnPublic && (
+          <Field
+            label={t('DSN (Public)')}
+            help={tct(
+              'Use your public DSN with browser-based SDKs such as [link:raven-js].',
+              {
+                link: (
+                  <ExternalLink href="https://github.com/getsentry/raven-js">
+                    raven-js
+                  </ExternalLink>
+                ),
+              }
+            )}
+            inline={false}
+            hideControlState
+          >
+            <TextCopyInput>
+              {getDynamicText({
+                value: data.dsn.public,
+                fixed: data.dsn.public.replace(
+                  new RegExp(`\/${projectId}$`),
+                  '/<<projectId>>'
+                ),
+              })}
+            </TextCopyInput>
+          </Field>
+        )}
+
+        {showCspEndpoint && (
+          <Field
+            label={t('CSP Endpoint')}
+            help={tct(
+              'Use your CSP endpoint in the [directive] directive in your [header] header.',
+              {
+                directive: <code>report-uri</code>,
+                header: <code>Content-Security-Policy</code>,
+              }
+            )}
+            inline={false}
+            hideControlState
+          >
+            <TextCopyInput>
+              {getDynamicText({
+                value: data.dsn.csp,
+                fixed: data.dsn.csp.replace(
+                  new RegExp(`\/${projectId}$`),
+                  '/<<projectId>>'
+                ),
+              })}
+            </TextCopyInput>
+          </Field>
+        )}
+
+        {showMinidump &&
+          features.has('minidump') && (
+            <Field
+              label={t('Minidump Endpoint')}
+              help={tct(
+                'Use this endpoint to upload minidump crash reports, for example with Electron, Crashpad or Breakpad.',
+                {
+                  /* TODO: add a link to minidump docs */
+                }
+              )}
+              inline={false}
+              hideControlState
+            >
+              <TextCopyInput>
+                {getDynamicText({
+                  value: data.dsn.minidump,
+                  fixed: data.dsn.minidump.replace(
+                    new RegExp(`\/${projectId}$`),
+                    '/<<projectId>>'
+                  ),
+                })}
+              </TextCopyInput>
+            </Field>
+          )}
+
+        {showPublicKey && (
+          <Field label={t('Public Key')} inline={true} hideControlState>
+            <TextCopyInput>
+              {getDynamicText({
+                value: data.public,
+                fixed: '__PUBLICKEY__',
+              })}
+            </TextCopyInput>
+          </Field>
+        )}
+
+        {showSecretKey && (
+          <Field label={t('Secret Key')} inline={true} hideControlState>
+            <TextCopyInput>
+              {getDynamicText({
+                value: data.secret,
+                fixed: '__SECRETKEY__',
+              })}
+            </TextCopyInput>
+          </Field>
+        )}
+
+        {showProjectId && (
+          <Field label={t('Project ID')} inline={true} hideControlState>
+            <TextCopyInput>
+              {getDynamicText({
+                value: projectId,
+                fixed: '__PROJECTID__',
+              })}
+            </TextCopyInput>
+          </Field>
+        )}
+      </React.Fragment>
+    );
+  }
+}
+export default ProjectKeyCredentials;
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
new file mode 100644
index 0000000000..d7d81d0d70
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
@@ -0,0 +1,479 @@
+import {Box, Flex} from 'grid-emotion';
+import {browserHistory} from 'react-router';
+import PropTypes from 'prop-types';
+import React from 'react';
+import createReactClass from 'create-react-class';
+import styled from 'react-emotion';
+
+import {
+  addErrorMessage,
+  addLoadingMessage,
+  addSuccessMessage,
+  removeIndicator,
+} from '../../../../actionCreators/indicator';
+import {getOrganizationState} from '../../../../mixins/organizationState';
+import {t} from '../../../../locale';
+import ApiMixin from '../../../../mixins/apiMixin';
+import AsyncView from '../../../asyncView';
+import BooleanField from '../../components/forms/booleanField';
+import Button from '../../../../components/buttons/button';
+import Confirm from '../../../../components/confirm';
+import DateTime from '../../../../components/dateTime';
+import EmptyMessage from '../../components/emptyMessage';
+import Field from '../../components/forms/field';
+import Form from '../../components/forms/form';
+import FormField from '../../components/forms/formField';
+import HookStore from '../../../../stores/hookStore';
+import InputControl from '../../components/forms/controls/input';
+import LoadingError from '../../../../components/loadingError';
+import LoadingIndicator from '../../../../components/loadingIndicator';
+import Panel from '../../components/panel';
+import PanelAlert from '../../components/panelAlert';
+import PanelBody from '../../components/panelBody';
+import PanelHeader from '../../components/panelHeader';
+import ProjectKeyCredentials from './projectKeyCredentials';
+import RangeSlider from '../../components/forms/controls/rangeSlider';
+import SentryTypes from '../../../../proptypes';
+import SettingsPageHeader from '../../components/settingsPageHeader';
+import StackedBarChart from '../../../../components/stackedBarChart';
+import TextBlock from '../../components/text/textBlock';
+import TextField from '../../components/forms/textField';
+
+const RATE_LIMIT_FORMAT_MAP = new Map([
+  [0, 'None'],
+  [60, '1 minute'],
+  [300, '5 minutes'],
+  [900, '15 minutes'],
+  [3600, '1 hour'],
+  [7200, '2 hours'],
+  [14400, '4 hours'],
+  [21600, '6 hours'],
+  [43200, '12 hours'],
+  [86400, '24 hours'],
+]);
+
+const formatRateLimitWindow = val => RATE_LIMIT_FORMAT_MAP.get(val);
+
+const KeyStats = createReactClass({
+  displayName: 'KeyStats',
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    let until = Math.floor(new Date().getTime() / 1000);
+    let since = until - 3600 * 24 * 30;
+
+    return {
+      since,
+      until,
+      loading: true,
+      error: false,
+      stats: null,
+      emptyStats: false,
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  fetchData() {
+    let {keyId, orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/keys/${keyId}/stats/`, {
+      query: {
+        since: this.state.since,
+        until: this.state.until,
+        resolution: '1d',
+      },
+      success: data => {
+        let emptyStats = true;
+        let stats = data.map(p => {
+          if (p.total) emptyStats = false;
+          return {
+            x: p.ts,
+            y: [p.accepted, p.dropped],
+          };
+        });
+        this.setState({
+          stats,
+          emptyStats,
+          error: false,
+          loading: false,
+        });
+      },
+      error: () => {
+        this.setState({error: true, loading: false});
+      },
+    });
+  },
+
+  renderTooltip(point, pointIdx, chart) {
+    let timeLabel = chart.getTimeLabel(point);
+    let [accepted, dropped, filtered] = point.y;
+
+    let value = `${accepted.toLocaleString()} accepted`;
+    if (dropped) {
+      value += `<br>${dropped.toLocaleString()} rate limited`;
+    }
+    if (filtered) {
+      value += `<br>${filtered.toLocaleString()} filtered`;
+    }
+
+    return (
+      '<div style="width:150px">' +
+      `<div class="time-label">${timeLabel}</div>` +
+      `<div class="value-label">${value}</div>` +
+      '</div>'
+    );
+  },
+
+  render() {
+    if (this.state.loading)
+      return (
+        <div className="box">
+          <LoadingIndicator />
+        </div>
+      );
+    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
+
+    return (
+      <Panel>
+        <PanelHeader>{t('Key usage in the last 30 days (by day)')}</PanelHeader>
+        <PanelBody>
+          {!this.state.emptyStats ? (
+            <StackedBarChart
+              points={this.state.stats}
+              height={150}
+              label="events"
+              barClasses={['accepted', 'rate-limited']}
+              className="standard-barchart"
+              style={{border: 'none'}}
+              tooltip={this.renderTooltip}
+            />
+          ) : (
+            <EmptyMessage css={{flexDirection: 'column', alignItems: 'center'}}>
+              <EmptyHeader>{t('Nothing recorded in the last 30 days.')}</EmptyHeader>
+              <TextBlock css={{marginBottom: 0}}>
+                {t('Total events captured using these credentials.')}
+              </TextBlock>
+            </EmptyMessage>
+          )}
+        </PanelBody>
+      </Panel>
+    );
+  },
+});
+
+class KeyRateLimitsForm extends React.Component {
+  static propTypes = {
+    organization: PropTypes.object.isRequired,
+    project: PropTypes.object.isRequired,
+    data: SentryTypes.ProjectKey.isRequired,
+    enabled: PropTypes.bool,
+    hooksDisabled: PropTypes.arrayOf(PropTypes.func),
+  };
+
+  handleChangeWindow = (onChange, onBlur, currentValueObj, value, e) => {
+    let valueObj = {
+      ...currentValueObj,
+      window: value,
+    };
+    onChange(valueObj, e);
+    onBlur(valueObj, e);
+  };
+
+  handleChangeCount = (cb, value, e) => {
+    let valueObj = {
+      ...value,
+      count: e.target.value,
+    };
+
+    cb(valueObj, e);
+  };
+
+  render() {
+    let {enabled, data, project, organization, hooksDisabled} = this.props;
+    let {keyId, orgId, projectId} = this.props.params;
+    let apiEndpoint = `/projects/${orgId}/${projectId}/keys/${keyId}/`;
+    let showPanel = enabled || !!hooksDisabled.length;
+
+    if (!showPanel) return null;
+
+    return (
+      <Form saveOnBlur apiEndpoint={apiEndpoint} apiMethod="PUT" initialData={data}>
+        <Panel>
+          <PanelHeader>{t('Rate Limits')}</PanelHeader>
+          {!enabled ? (
+            <PanelBody disablePadding={false}>
+              {hooksDisabled
+                .map(hook => {
+                  return hook(organization, project, data);
+                })
+                .shift()}
+            </PanelBody>
+          ) : (
+            <PanelBody>
+              <PanelAlert type="info" icon="icon-circle-exclamation" m={0} mb={0}>
+                {t(
+                  'Rate limits provide a flexible way to manage your event volume. If you have a noisy project or environment you can configure a rate limit for this key to reduce the number of events processed.'
+                )}
+              </PanelAlert>
+
+              <FormField
+                className="rate-limit-group"
+                name="rateLimit"
+                label={t('Rate Limit')}
+                validate={({id, form, model}) => {
+                  let isValid =
+                    form &&
+                    form.rateLimit &&
+                    typeof form.rateLimit.count !== 'undefined' &&
+                    typeof form.rateLimit.window !== 'undefined';
+
+                  if (isValid) {
+                    return [];
+                  }
+
+                  return [['rateLimit', t('Fill in both fields first')]];
+                }}
+                help={t(
+                  'Apply a rate limit to this credential to cap the amount of events accepted during a time window.'
+                )}
+                inline={false}
+              >
+                {({onChange, onBlur, value}) => {
+                  return (
+                    <Flex>
+                      <Flex flex="2" align="center">
+                        <InputControl
+                          type="number"
+                          name="rateLimit.count"
+                          min={0}
+                          value={value && value.count}
+                          placeholder={t('Count')}
+                          onChange={this.handleChangeCount.bind(this, onChange, value)}
+                          onBlur={this.handleChangeCount.bind(this, onBlur, value)}
+                        />
+                      </Flex>
+                      <Flex justify="center" align="center" mx={10} flex="1">
+                        <small css={{whiteSpace: 'nowrap'}}>event(s) in</small>
+                      </Flex>
+                      <Box flex="2">
+                        <RangeSlider
+                          name="rateLimit.window"
+                          allowedValues={Array.from(RATE_LIMIT_FORMAT_MAP.keys())}
+                          value={value && value.window}
+                          placeholder={t('Window')}
+                          formatLabel={formatRateLimitWindow}
+                          onChange={this.handleChangeWindow.bind(
+                            this,
+                            onChange,
+                            onBlur,
+                            value
+                          )}
+                        />
+                      </Box>
+                    </Flex>
+                  );
+                }}
+              </FormField>
+            </PanelBody>
+          )}
+        </Panel>
+      </Form>
+    );
+  }
+}
+
+const KeySettings = createReactClass({
+  displayName: 'KeySettings',
+
+  propTypes: {
+    organization: PropTypes.object.isRequired,
+    project: PropTypes.object.isRequired,
+    access: PropTypes.object.isRequired,
+    features: PropTypes.object.isRequired,
+    data: SentryTypes.ProjectKey.isRequired,
+    onRemove: PropTypes.func.isRequired,
+    rateLimitsEnabled: PropTypes.bool,
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      hooksDisabled: HookStore.get('project:rate-limits:disabled'),
+    };
+  },
+
+  handleRemove(e) {
+    if (this.state.loading) return;
+
+    let loadingIndicator = addLoadingMessage(t('Saving changes..'));
+    let {keyId, orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/keys/${keyId}/`, {
+      method: 'DELETE',
+      success: (d, _, jqXHR) => {
+        this.props.onRemove();
+        removeIndicator(loadingIndicator);
+        addSuccessMessage(t('Revoked key'));
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false,
+        });
+        removeIndicator(loadingIndicator);
+        addErrorMessage(t('Unable to revoke key'));
+      },
+    });
+  },
+
+  render() {
+    let {keyId, orgId, projectId} = this.props.params;
+    let {access, features, data, rateLimitsEnabled, organization, project} = this.props;
+    let apiEndpoint = `/projects/${orgId}/${projectId}/keys/${keyId}/`;
+
+    return (
+      <React.Fragment>
+        <Form
+          saveOnBlur
+          allowUndo
+          apiEndpoint={apiEndpoint}
+          apiMethod="PUT"
+          initialData={data}
+        >
+          <Panel>
+            <PanelHeader>{t('Details')}</PanelHeader>
+
+            <PanelBody>
+              <TextField name="name" label={t('Name')} required={false} />
+
+              <BooleanField
+                name="isActive"
+                label={t('Enabled')}
+                required={false}
+                help={
+                  'Accept events from this key? This may be used to temporarily suspend a key.'
+                }
+              />
+              <Field label={t('Created')}>
+                <div className="controls">
+                  <DateTime date={data.dateCreated} />
+                </div>
+              </Field>
+            </PanelBody>
+          </Panel>
+        </Form>
+
+        <KeyRateLimitsForm
+          params={this.props.params}
+          data={data}
+          organization={organization}
+          project={project}
+          enabled={rateLimitsEnabled}
+          hooksDisabled={this.state.hooksDisabled}
+        />
+
+        <Panel>
+          <PanelHeader>{t('Credentials')}</PanelHeader>
+          <PanelBody>
+            <PanelAlert type="info" icon="icon-circle-exclamation" m={0} mb={0}>
+              {t(
+                'Your credentials are coupled to a public and secret key. Different clients will require different credentials, so make sure you check the documentation before plugging things in.'
+              )}
+            </PanelAlert>
+
+            <ProjectKeyCredentials
+              projectId={`${data.projectId}`}
+              data={data}
+              features={features}
+              showPublicKey
+              showSecretKey
+              showProjectId
+            />
+          </PanelBody>
+        </Panel>
+
+        {access.has('project:admin') && (
+          <Panel>
+            <PanelHeader>{t('Revoke Key')}</PanelHeader>
+            <PanelBody>
+              <Field
+                label={t('Revoke Key')}
+                help={t(
+                  'Revoking this key will immediately remove and suspend the credentials. This action is irreversible.'
+                )}
+              >
+                <div>
+                  <Confirm
+                    priority="danger"
+                    message={t(
+                      'Are you sure you want to revoke this key? This will immediately remove and suspend the credentials.'
+                    )}
+                    onConfirm={this.handleRemove}
+                    confirmText={t('Revoke Key')}
+                  >
+                    <Button priority="danger">{t('Revoke Key')}</Button>
+                  </Confirm>
+                </div>
+              </Field>
+            </PanelBody>
+          </Panel>
+        )}
+      </React.Fragment>
+    );
+  },
+});
+
+export default class ProjectKeyDetails extends AsyncView {
+  static contextTypes = {
+    organization: SentryTypes.Organization,
+    project: SentryTypes.Project,
+  };
+
+  getTitle() {
+    return t('Key Details');
+  }
+
+  getEndpoints() {
+    let {keyId, orgId, projectId} = this.props.params;
+    return [['data', `/projects/${orgId}/${projectId}/keys/${keyId}/`]];
+  }
+
+  handleRemove = data => {
+    let {orgId, projectId} = this.props.params;
+    browserHistory.push(`/${orgId}/${projectId}/settings/keys/`);
+  };
+
+  renderBody() {
+    let {data} = this.state;
+    let {params} = this.props;
+    let {organization, project} = this.context;
+    let access = getOrganizationState(organization).getAccess();
+    let features = new Set(project.features);
+    let hasRateLimitsEnabled = true || features.has('rate-limits') > -1;
+
+    return (
+      <div className="ref-key-details">
+        <SettingsPageHeader title={t('Key Details')} />
+
+        <KeyStats params={params} />
+
+        <KeySettings
+          organization={organization}
+          project={project}
+          access={access}
+          features={features}
+          params={params}
+          rateLimitsEnabled={hasRateLimitsEnabled}
+          data={data}
+          onRemove={this.handleRemove}
+        />
+      </div>
+    );
+  }
+}
+
+const EmptyHeader = styled.div`
+  font-size: 1.3em;
+`;
diff --git a/src/sentry/static/sentry/less/project-settings.less b/src/sentry/static/sentry/less/project-settings.less
index 482c961be7..55e1b3dd8d 100644
--- a/src/sentry/static/sentry/less/project-settings.less
+++ b/src/sentry/static/sentry/less/project-settings.less
@@ -263,52 +263,3 @@
     }
   }
 }
-
-/**
-  * Client Keys
-  * ============================================================================
-  */
-
-.client-key-list {
-  border: 1px solid @trim;
-  border-radius: 4px;
-  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.03);
-
-  h5 {
-    margin-bottom: 15px;
-
-    a {
-      color: @gray;
-      &:hover {
-        color: @gray-dark;
-      }
-    }
-  }
-  .client-key-item {
-    border-bottom: 1px solid lighten(@trim, 6);
-    padding: 20px;
-
-    &:last-child {
-      border: 0;
-    }
-
-    .pull-right {
-      margin-top: -5px;
-    }
-
-    .form-control {
-      overflow: hidden;
-      border: 1px solid @trim;
-      background: #f7f8f9;
-    }
-
-    .btn-revoke:hover {
-      background: @red;
-      border-color: darken(@red, 25);
-      color: #fff;
-    }
-  }
-  .client-key-item.disabled {
-    opacity: 0.5;
-  }
-}
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 22d329a006..a0e1adeabe 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -679,6 +679,31 @@ window.TestStubs = {
     },
   ],
 
+  ProjectKeys: () => {
+    return [
+      {
+        dsn: {
+          secret:
+            'http://188ee45a58094d939428d8585aa6f661:a33bf9aba64c4bbdaf873bb9023b6d2d@dev.getsentry.net:8000/1',
+          minidump:
+            'http://dev.getsentry.net:8000/api/1/minidump?sentry_key=188ee45a58094d939428d8585aa6f661',
+          public: 'http://188ee45a58094d939428d8585aa6f661@dev.getsentry.net:8000/1',
+          csp:
+            'http://dev.getsentry.net:8000/api/1/csp-report/?sentry_key=188ee45a58094d939428d8585aa6f661',
+        },
+        public: '188ee45a58094d939428d8585aa6f661',
+        secret: 'a33bf9aba64c4bbdaf873bb9023b6d2d',
+        name: 'Natural Halibut',
+        rateLimit: null,
+        projectId: 1,
+        dateCreated: '2018-02-28T07:13:51.087Z',
+        id: '188ee45a58094d939428d8585aa6f661',
+        isActive: true,
+        label: 'Natural Halibut',
+      },
+    ];
+  },
+
   Repository: params => {
     return {
       id: '4',
diff --git a/tests/js/spec/utils/getRateLimitError.spec.jsx b/tests/js/spec/utils/getRateLimitError.spec.jsx
deleted file mode 100644
index 4227793a08..0000000000
--- a/tests/js/spec/utils/getRateLimitError.spec.jsx
+++ /dev/null
@@ -1,30 +0,0 @@
-import {getRateLimitError} from 'app/views/projectKeyDetails';
-
-describe('getRateLimitError', function() {
-  const errorObj = {
-    rateLimit: [
-      {
-        foo: [],
-        window: ['Ensure this value is less than or equal to 1440.'],
-      },
-      {
-        bar: [],
-        count: ['Ensure this value is greater than or equal to 3.'],
-        window: ['Ensure this value is less than or equal to 1440.'],
-      },
-    ],
-  };
-
-  it('has no errors for keys: `foo` and `bar`', function() {
-    expect(getRateLimitError(errorObj, 'foo')).toBe(false);
-    expect(getRateLimitError(errorObj, 'bar')).toBe(false);
-  });
-
-  it('has an error for `window`', function() {
-    expect(getRateLimitError(errorObj, 'window')).toBe(true);
-  });
-
-  it('has an error for `count`', function() {
-    expect(getRateLimitError(errorObj, 'count')).toBe(true);
-  });
-});
diff --git a/tests/js/spec/views/projectKeyDetails.spec.jsx b/tests/js/spec/views/projectKeyDetails.spec.jsx
new file mode 100644
index 0000000000..4627042045
--- /dev/null
+++ b/tests/js/spec/views/projectKeyDetails.spec.jsx
@@ -0,0 +1,158 @@
+import {ThemeProvider} from 'emotion-theming';
+
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {mount} from 'enzyme';
+import ProjectKeyDetails from 'app/views/settings/project/projectKeys/projectKeyDetails';
+import theme from 'app/utils/theme';
+
+jest.mock('react-router', () => ({
+  browserHistory: {push: jest.fn()},
+}));
+
+describe('ProjectKeyDetails', function() {
+  let org;
+  let project;
+  let wrapper;
+  let deleteMock;
+  let statsMock;
+  let putMock;
+  let projectKeys;
+
+  beforeEach(function() {
+    org = TestStubs.Organization();
+    project = TestStubs.Project();
+    projectKeys = TestStubs.ProjectKeys();
+
+    MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/keys/${projectKeys[0].id}/`,
+      method: 'GET',
+      body: projectKeys[0],
+    });
+    putMock = MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/keys/${projectKeys[0].id}/`,
+      method: 'PUT',
+    });
+    statsMock = MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/keys/${projectKeys[0].id}/stats/`,
+      method: 'GET',
+      body: [
+        {filtered: 0, accepted: 0, total: 0, ts: 1517270400, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1517356800, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1517443200, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1517529600, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1517616000, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1517702400, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1517788800, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1517875200, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1517961600, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1518048000, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1518134400, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1518220800, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1518307200, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1518393600, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1518480000, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1518566400, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1518652800, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1518739200, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1518825600, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1518912000, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1518998400, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1519084800, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1519171200, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1519257600, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1519344000, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1519430400, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1519516800, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1519603200, dropped: 0},
+        {filtered: 0, accepted: 0, total: 0, ts: 1519689600, dropped: 0},
+        {filtered: 0, accepted: 5, total: 12, ts: 1519776000, dropped: 7},
+        {filtered: 0, accepted: 14, total: 14, ts: 1519862400, dropped: 0},
+      ],
+    });
+    deleteMock = MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/keys/${projectKeys[0].id}/`,
+      method: 'DELETE',
+    });
+    let routerContext = TestStubs.routerContext();
+
+    wrapper = mount(
+      <ThemeProvider theme={theme}>
+        <ProjectKeyDetails
+          routes={[]}
+          params={{
+            keyId: projectKeys[0].id,
+            orgId: org.slug,
+            projectId: project.slug,
+          }}
+        />
+      </ThemeProvider>,
+      {
+        ...routerContext,
+        context: {
+          ...routerContext.context,
+          project: TestStubs.Project(),
+        },
+        childContextTypes: {
+          ...routerContext.childContextTypes,
+          project: PropTypes.object,
+        },
+      }
+    );
+  });
+
+  it('has stats box', function() {
+    expect(wrapper.find('KeyStats')).toHaveLength(1);
+    expect(statsMock).toHaveBeenCalled();
+  });
+
+  it('changes name', function() {
+    wrapper
+      .find('input[name="name"]')
+      .simulate('change', {target: {value: 'New Name'}})
+      .simulate('blur');
+
+    expect(putMock).toHaveBeenCalledWith(
+      `/projects/${org.slug}/${project.slug}/keys/${projectKeys[0].id}/`,
+      expect.objectContaining({
+        data: {
+          name: 'New Name',
+        },
+      })
+    );
+  });
+
+  it('disable and enables key', function() {
+    wrapper.find('Switch[name="isActive"]').simulate('click');
+
+    expect(putMock).toHaveBeenCalledWith(
+      `/projects/${org.slug}/${project.slug}/keys/${projectKeys[0].id}/`,
+      expect.objectContaining({
+        data: {isActive: false},
+      })
+    );
+
+    wrapper.find('Switch[name="isActive"]').simulate('click');
+
+    expect(putMock).toHaveBeenCalledWith(
+      `/projects/${org.slug}/${project.slug}/keys/${projectKeys[0].id}/`,
+      expect.objectContaining({
+        data: {isActive: false},
+      })
+    );
+  });
+
+  it('revokes a key', function() {
+    wrapper
+      .find('Button[priority="danger"]')
+      .simulate('click', {preventDefault: () => {}});
+
+    wrapper.find('ModalDialog Button[priority="danger"]').simulate('click');
+
+    wrapper.update();
+
+    expect(deleteMock).toHaveBeenCalled();
+  });
+});
diff --git a/tests/js/spec/views/projectKeys.spec.jsx b/tests/js/spec/views/projectKeys.spec.jsx
new file mode 100644
index 0000000000..d61de289c0
--- /dev/null
+++ b/tests/js/spec/views/projectKeys.spec.jsx
@@ -0,0 +1,110 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {mount} from 'enzyme';
+import ProjectKeys from 'app/views/settings/project/projectKeys';
+
+describe('ProjectKeys', function() {
+  let org, project, wrapper;
+  let deleteMock;
+  let projectKeys;
+
+  beforeEach(function() {
+    org = TestStubs.Organization();
+    project = TestStubs.Project();
+    projectKeys = TestStubs.ProjectKeys();
+
+    MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/keys/`,
+      method: 'GET',
+      body: projectKeys,
+    });
+    deleteMock = MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/keys/${projectKeys[0].id}/`,
+      method: 'DELETE',
+    });
+    let routerContext = TestStubs.routerContext();
+
+    wrapper = mount(
+      <ProjectKeys routes={[]} params={{orgId: org.slug, projectId: project.slug}} />,
+      {
+        ...routerContext,
+        context: {
+          ...routerContext.context,
+          project: TestStubs.Project(),
+        },
+        childContextTypes: {
+          ...routerContext.childContextTypes,
+          project: PropTypes.object,
+        },
+      }
+    );
+  });
+
+  it('renders empty', function() {
+    MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/keys/`,
+      method: 'GET',
+      body: [],
+    });
+
+    wrapper = mount(
+      <ProjectKeys routes={[]} params={{orgId: org.slug, projectId: project.slug}} />,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('EmptyMessage')).toHaveLength(1);
+  });
+
+  it('has clippable box', function() {
+    expect(wrapper.find('.clip-fade .btn')).toHaveLength(1);
+    wrapper.find('.clip-fade .btn').simulate('click');
+    expect(wrapper.find('.clip-fade .btn')).toHaveLength(0);
+  });
+
+  it('deletes key', function() {
+    wrapper
+      .find('PanelHeader Button')
+      .last()
+      .simulate('click');
+
+    wrapper.find('ModalDialog Button[priority="danger"]').simulate('click');
+
+    wrapper.update();
+
+    expect(deleteMock).toHaveBeenCalled();
+  });
+
+  it('disable and enables key', function() {
+    let enableMock = MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/keys/${projectKeys[0].id}/`,
+      method: 'PUT',
+    });
+
+    wrapper
+      .find('PanelHeader Button')
+      .at(1)
+      .simulate('click');
+
+    expect(enableMock).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        data: {isActive: false},
+      })
+    );
+
+    wrapper
+      .find('PanelHeader Button')
+      .at(1)
+      .simulate('click');
+
+    expect(enableMock).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        data: {isActive: true},
+      })
+    );
+  });
+});
diff --git a/tests/sentry/api/endpoints/test_project_key_details.py b/tests/sentry/api/endpoints/test_project_key_details.py
index 76a5e1f022..8b796ee50c 100644
--- a/tests/sentry/api/endpoints/test_project_key_details.py
+++ b/tests/sentry/api/endpoints/test_project_key_details.py
@@ -91,7 +91,7 @@ class UpdateProjectKeyTest(APITestCase):
         assert key.rate_limit_window == 60
 
 
-class DeleteProjectKeTest(APITestCase):
+class DeleteProjectKeyTest(APITestCase):
     def test_simple(self):
         project = self.create_project()
         self.login_as(user=self.user)
