commit 722af51185cf537f9bdfd1ae1c47b5bd8b573612
Author: Mark Story <mark@sentry.io>
Date:   Wed Jul 31 14:07:40 2019 -0400

    ref(ui) Remove a few more uses of createReactClass (#14228)
    
    Excise a few more of these so that we can one day remove the
    create-react-class package.

diff --git a/src/sentry/static/sentry/app/components/group/seenInfo.jsx b/src/sentry/static/sentry/app/components/group/seenInfo.jsx
index ab62c1aae9..991eb45f7a 100644
--- a/src/sentry/static/sentry/app/components/group/seenInfo.jsx
+++ b/src/sentry/static/sentry/app/components/group/seenInfo.jsx
@@ -1,6 +1,5 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
 import DateTime from 'app/components/dateTime';
 import TimeSince from 'app/components/timeSince';
 import Version from 'app/components/version';
@@ -9,10 +8,8 @@ import Tooltip from 'app/components/tooltip';
 import {defined, toTitleCase} from 'app/utils';
 import {t} from 'app/locale';
 
-const SeenInfo = createReactClass({
-  displayName: 'SeenInfo',
-
-  propTypes: {
+class SeenInfo extends React.Component {
+  static propTypes = {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
     date: PropTypes.any,
@@ -23,24 +20,24 @@ const SeenInfo = createReactClass({
     environment: PropTypes.string,
     hasRelease: PropTypes.bool.isRequired,
     title: PropTypes.string.isRequired,
-  },
+  };
 
-  contextTypes: {
+  static contextTypes = {
     organization: PropTypes.object,
-  },
+  };
 
-  shouldComponentUpdate(nextProps, nextState) {
+  shouldComponentUpdate(nextProps, _nextState) {
     return (
       (this.props.release || {}).version !== (nextProps.release || {}).version ||
       this.props.date !== nextProps.date
     );
-  },
+  }
 
   getReleaseTrackingUrl() {
     const {orgId, projectId} = this.props;
 
     return `/settings/${orgId}/projects/${projectId}/release-tracking/`;
-  },
+  }
 
   getTooltipTitle() {
     const {date, dateGlobal, title, environment} = this.props;
@@ -64,7 +61,7 @@ const SeenInfo = createReactClass({
         </dl>
       </div>
     );
-  },
+  }
 
   render() {
     const {date, dateGlobal, environment, release, orgId, projectId} = this.props;
@@ -121,7 +118,7 @@ const SeenInfo = createReactClass({
         )}
       </dl>
     );
-  },
-});
+  }
+}
 
 export default SeenInfo;
diff --git a/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx b/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
index 3730ab2ad8..fdfd44c871 100644
--- a/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
+++ b/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
@@ -1,6 +1,5 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
 
 import {assignToUser, assignToActor} from 'app/actionCreators/group';
 import {openCreateOwnershipRule} from 'app/actionCreators/modal';
@@ -14,28 +13,27 @@ import SuggestedOwnerHovercard from 'app/components/group/suggestedOwnerHovercar
 import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
 
-const SuggestedOwners = createReactClass({
-  displayName: 'SuggestedOwners',
-
-  propTypes: {
+class SuggestedOwners extends React.Component {
+  static propTypes = {
     api: PropTypes.object,
     organization: SentryTypes.Organization,
     project: SentryTypes.Project,
     group: SentryTypes.Group,
     event: SentryTypes.Event,
-  },
+  };
 
-  getInitialState() {
-    return {
+  constructor(props) {
+    super(props);
+    this.state = {
       rules: null,
       owners: [],
       committers: [],
     };
-  },
+  }
 
   componentDidMount() {
     this.fetchData(this.props.event);
-  },
+  }
 
   componentWillReceiveProps(nextProps) {
     if (this.props.event && nextProps.event) {
@@ -47,7 +45,7 @@ const SuggestedOwners = createReactClass({
       //going from having no event to having an event
       this.fetchData(nextProps.event);
     }
-  },
+  }
 
   fetchData(event) {
     if (!event) {
@@ -62,12 +60,12 @@ const SuggestedOwners = createReactClass({
       api.request(
         `/projects/${organization.slug}/${project.slug}/events/${event.id}/committers/`,
         {
-          success: (data, _, jqXHR) => {
+          success: data => {
             this.setState({
               committers: data.committers,
             });
           },
-          error: error => {
+          error: () => {
             this.setState({
               committers: [],
             });
@@ -79,20 +77,20 @@ const SuggestedOwners = createReactClass({
     api.request(
       `/projects/${organization.slug}/${project.slug}/events/${event.id}/owners/`,
       {
-        success: (data, _, jqXHR) => {
+        success: data => {
           this.setState({
             owners: data.owners,
             rules: data.rules,
           });
         },
-        error: error => {
+        error: () => {
           this.setState({
             owners: [],
           });
         },
       }
     );
-  },
+  }
 
   assign(actor) {
     if (actor.id === undefined) {
@@ -106,7 +104,7 @@ const SuggestedOwners = createReactClass({
     if (actor.type === 'team') {
       assignToActor({id: this.props.event.groupID, actor});
     }
-  },
+  }
 
   /**
    * Combine the commiter and ownership data into a single array, merging
@@ -151,7 +149,7 @@ const SuggestedOwners = createReactClass({
     });
 
     return owners;
-  },
+  }
 
   render() {
     const {group, organization, project} = this.props;
@@ -211,8 +209,8 @@ const SuggestedOwners = createReactClass({
         </Access>
       </React.Fragment>
     );
-  },
-});
+  }
+}
 export {SuggestedOwners};
 export default withApi(withOrganization(SuggestedOwners));
 
diff --git a/src/sentry/static/sentry/app/components/releaseStats.jsx b/src/sentry/static/sentry/app/components/releaseStats.jsx
index 915ff055c0..94ecdaea80 100644
--- a/src/sentry/static/sentry/app/components/releaseStats.jsx
+++ b/src/sentry/static/sentry/app/components/releaseStats.jsx
@@ -1,17 +1,14 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 
 import AvatarList from 'app/components/avatar/avatarList';
-import {t} from 'app/locale';
+import {t, tn} from 'app/locale';
 
-const ReleaseStats = createReactClass({
-  displayName: 'ReleaseStats',
-
-  propTypes: {
+class ReleaseStats extends React.Component {
+  static propTypes = {
     release: PropTypes.object,
-  },
+  };
 
   render() {
     const release = this.props.release;
@@ -21,12 +18,11 @@ const ReleaseStats = createReactClass({
       return null;
     }
 
-    const releaseSummary =
-      commitCount +
-      t(commitCount !== 1 ? ' commits ' : ' commit ') +
-      t('by ') +
-      authorCount +
-      t(authorCount !== 1 ? ' authors' : ' author');
+    const releaseSummary = [
+      tn('%s commit', '%s commits', commitCount),
+      t('by'),
+      tn('%s author', '%s authors', authorCount),
+    ].join(' ');
 
     return (
       <div className="release-stats">
@@ -36,8 +32,8 @@ const ReleaseStats = createReactClass({
         </span>
       </div>
     );
-  },
-});
+  }
+}
 
 const ReleaseSummaryHeading = styled('div')`
   color: ${p => p.theme.gray2};
