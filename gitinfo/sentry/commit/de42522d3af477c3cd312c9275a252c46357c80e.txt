commit de42522d3af477c3cd312c9275a252c46357c80e
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Wed Oct 31 14:12:04 2018 -0700

    feat(ui): Add select all to teams (#10292)

diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index 5b8d6632f7..ba0fc930fa 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -166,7 +166,7 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
                 # TODO(dcramer): proper error message
                 return Response({'detail': ERR_UNINVITABLE}, status=400)
 
-        if result.get('teams'):
+        if 'teams' in result:
             # dupe code from member_index
             # ensure listed teams are real teams
             teams = list(Team.objects.filter(
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
index ee60612f6f..14d2506db0 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
@@ -203,6 +203,28 @@ const InviteMember = createReactClass({
     });
   },
 
+  allSelected() {
+    let {teams} = this.getOrganization();
+    let {selectedTeams} = this.state;
+    return teams.length === selectedTeams.size;
+  },
+
+  handleSelectAll() {
+    let {teams} = this.getOrganization();
+
+    this.setState(state => {
+      let {selectedTeams} = state;
+      if (this.allSelected()) {
+        selectedTeams.clear();
+      } else {
+        selectedTeams = new Set(teams.map(({slug}) => slug));
+      }
+      return {
+        selectedTeams,
+      };
+    });
+  },
+
   render() {
     let {error, loading, roleList, selectedRole, selectedTeams} = this.state;
     let {teams} = this.getOrganization();
@@ -246,6 +268,8 @@ const InviteMember = createReactClass({
               teams={teams}
               selectedTeams={selectedTeams}
               toggleTeam={this.toggleTeam}
+              onSelectAll={this.handleSelectAll}
+              allSelected={this.allSelected}
             />
             <Button
               priority="primary"
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/teamSelect.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/teamSelect.jsx
index f29358e66b..a3a4ec59cb 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/teamSelect.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/teamSelect.jsx
@@ -3,31 +3,49 @@ import React from 'react';
 import styled from 'react-emotion';
 
 import {t} from 'app/locale';
+import Button from 'app/components/button';
 import Checkbox from 'app/components/checkbox';
 import IdBadge from 'app/components/idBadge';
 import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
 
-const TeamItem = styled.div`
-  width: 25%;
-  padding: 6px;
-`;
-
 class TeamSelect extends React.Component {
   static propTypes = {
     disabled: PropTypes.bool,
     selectedTeams: PropTypes.instanceOf(Set),
     teams: PropTypes.array,
     toggleTeam: PropTypes.func,
+    onSelectAll: PropTypes.func,
+    allSelected: PropTypes.func,
   };
 
   render() {
-    let {disabled, teams, selectedTeams, toggleTeam} = this.props;
+    let {
+      disabled,
+      teams,
+      selectedTeams,
+      toggleTeam,
+      onSelectAll,
+      allSelected,
+    } = this.props;
     //no need to select a team when there's only one option
     if (teams.length < 2) return null;
+    let hasSelectAll = !!onSelectAll && !!allSelected;
 
     return (
       <Panel className="new-invite-team">
-        <PanelHeader>{t('Team')}</PanelHeader>
+        <PanelHeader hasButtons={hasSelectAll}>
+          {t('Team')}
+          {hasSelectAll && (
+            <Button
+              data-test-id="select-all"
+              size="small"
+              disabled={disabled}
+              onClick={onSelectAll}
+            >
+              <SelectAll>{allSelected() ? t('Deselect') : t('Select All')}</SelectAll>
+            </Button>
+          )}
+        </PanelHeader>
 
         <PanelBody className="grouping-controls team-choices">
           <PanelItem css={{flexWrap: 'wrap'}}>
@@ -54,4 +72,14 @@ class TeamSelect extends React.Component {
   }
 }
 
+const TeamItem = styled.div`
+  width: 25%;
+  padding: 6px;
+`;
+
+const SelectAll = styled.span`
+  font-size: 13px;
+  color: ${p => (p.lightText ? p.theme.gray2 : p.theme.gray3)};
+`;
+
 export default TeamSelect;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx
index e85dfb19a1..5d8ca6d4d1 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx
@@ -118,6 +118,30 @@ class OrganizationMemberDetail extends AsyncView {
     });
   };
 
+  allSelected = () => {
+    let {member} = this.state;
+    let {teams} = this.getOrganization();
+    return teams.length === member.teams.length;
+  };
+
+  handleSelectAll = () => {
+    let {member, selectedTeams} = this.state;
+    let {teams} = this.getOrganization();
+
+    if (this.allSelected()) {
+      selectedTeams.clear();
+    } else {
+      selectedTeams = new Set(teams.map(({slug}) => slug));
+    }
+
+    this.setState({
+      member: {
+        ...member,
+        teams: Array.from(selectedTeams.values()),
+      },
+    });
+  };
+
   renderBody() {
     let {error, member} = this.state;
     let {teams, access} = this.getOrganization();
@@ -208,7 +232,10 @@ class OrganizationMemberDetail extends AsyncView {
                       {t('Generate New Invite')}
                     </Button>
                     {canResend && (
-                      <Button data-test-id="resend-invite" onClick={() => this.handleInvite(false)}>
+                      <Button
+                        data-test-id="resend-invite"
+                        onClick={() => this.handleInvite(false)}
+                      >
                         {t('Resend Invite')}
                       </Button>
                     )}
@@ -232,6 +259,8 @@ class OrganizationMemberDetail extends AsyncView {
           selectedTeams={new Set(member.teams)}
           toggleTeam={this.handleToggleTeam}
           disabled={!canEdit}
+          onSelectAll={this.handleSelectAll}
+          allSelected={this.allSelected}
         />
 
         <Button
diff --git a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
index b1f3de60bf..925a771842 100644
--- a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
+++ b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
@@ -338,6 +338,8 @@ exports[`CreateProject should render roles when available and allowed, and handl
         </Panel>
       </RoleSelect>
       <TeamSelect
+        allSelected={[Function]}
+        onSelectAll={[Function]}
         selectedTeams={
           Set {
             "bar",
@@ -370,25 +372,81 @@ exports[`CreateProject should render roles when available and allowed, and handl
             <div
               className="new-invite-team css-yahxlu-Panel e1laxa7d0"
             >
-              <PanelHeader>
+              <PanelHeader
+                hasButtons={true}
+              >
                 <Component
-                  className="css-gxu3mm-PanelHeader-getPadding e1p8v8nv0"
+                  className="css-xm0vov-PanelHeader-getPadding e1p8v8nv0"
+                  hasButtons={true}
                 >
                   <Flex
                     align="center"
-                    className="css-gxu3mm-PanelHeader-getPadding e1p8v8nv0"
+                    className="css-xm0vov-PanelHeader-getPadding e1p8v8nv0"
                     justify="space-between"
                   >
                     <Base
                       align="center"
-                      className="e1p8v8nv0 css-18dn1ya-PanelHeader-getPadding"
+                      className="e1p8v8nv0 css-13rknte-PanelHeader-getPadding"
                       justify="space-between"
                     >
                       <div
-                        className="e1p8v8nv0 css-18dn1ya-PanelHeader-getPadding"
+                        className="e1p8v8nv0 css-13rknte-PanelHeader-getPadding"
                         is={null}
                       >
                         Team
+                        <Button
+                          data-test-id="select-all"
+                          disabled={false}
+                          onClick={[Function]}
+                          size="small"
+                        >
+                          <StyledButton
+                            data-test-id="select-all"
+                            disabled={false}
+                            onClick={[Function]}
+                            role="button"
+                            size="small"
+                          >
+                            <Component
+                              className="css-dkprmi-StyledButton-getColors eqrebog0"
+                              data-test-id="select-all"
+                              disabled={false}
+                              onClick={[Function]}
+                              role="button"
+                              size="small"
+                            >
+                              <button
+                                className="css-dkprmi-StyledButton-getColors eqrebog0"
+                                data-test-id="select-all"
+                                disabled={false}
+                                onClick={[Function]}
+                                role="button"
+                                size="small"
+                              >
+                                <ButtonLabel
+                                  size="small"
+                                >
+                                  <Component
+                                    className="css-7ui8bl-ButtonLabel eqrebog1"
+                                    size="small"
+                                  >
+                                    <span
+                                      className="css-7ui8bl-ButtonLabel eqrebog1"
+                                    >
+                                      <SelectAll>
+                                        <span
+                                          className="css-7qfmdl-SelectAll e1tbg1m41"
+                                        >
+                                          Select All
+                                        </span>
+                                      </SelectAll>
+                                    </span>
+                                  </Component>
+                                </ButtonLabel>
+                              </button>
+                            </Component>
+                          </StyledButton>
+                        </Button>
                       </div>
                     </Base>
                   </Flex>
diff --git a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
index cdb191e59f..1fb80e4c03 100644
--- a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
+++ b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
@@ -71,6 +71,58 @@ describe('CreateProject', function() {
     expect(wrapper.state('selectedTeams').has(team[0].slug)).toBe(true);
   });
 
+  it('can select and deselect all teams', function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/testOrg/members/me/',
+      body: {
+        roles: [
+          {
+            id: '1',
+            name: 'member',
+            desc: 'a normal member',
+            allowed: true,
+          },
+        ],
+      },
+    });
+
+    let wrapper = mount(<InviteMember {...baseProps} />, baseContext);
+
+    let first = 'TeamSelect Checkbox[id="bar"]';
+    let last = 'TeamSelect Checkbox[id="foo"]';
+    let selectAllButton = wrapper.find('Button[data-test-id="select-all"]');
+
+    expect(wrapper.state('selectedTeams').size).toBe(0);
+    expect(selectAllButton).toHaveLength(1);
+
+    // select and deselect all
+    selectAllButton.simulate('click');
+    expect(wrapper.state('selectedTeams').size).toBe(2);
+    expect(wrapper.find(first).prop('checked')).toBe(true);
+    expect(wrapper.find(last).prop('checked')).toBe(true);
+
+    selectAllButton.simulate('click');
+    expect(wrapper.state('selectedTeams').size).toBe(0);
+    expect(wrapper.find(first).prop('checked')).toBe(false);
+    expect(wrapper.find(last).prop('checked')).toBe(false);
+
+    // select one, then select all
+    wrapper.find(first).simulate('change');
+    expect(wrapper.state('selectedTeams').size).toBe(1);
+    selectAllButton.simulate('click');
+    expect(wrapper.state('selectedTeams').size).toBe(2);
+    selectAllButton.simulate('click');
+    expect(wrapper.state('selectedTeams').size).toBe(0);
+
+    // select both, then deselect all
+    wrapper.find(first).simulate('change');
+    expect(wrapper.state('selectedTeams').size).toBe(1);
+    wrapper.find(last).simulate('change');
+    expect(wrapper.state('selectedTeams').size).toBe(2);
+    selectAllButton.simulate('click');
+    expect(wrapper.state('selectedTeams').size).toBe(0);
+  });
+
   it('should use invite/add language based on config', function() {
     sandbox.restore(ConfigStore, 'getConfig');
     sandbox.stub(ConfigStore, 'getConfig').returns({id: 1, invitesEnabled: false});
diff --git a/tests/js/spec/views/settings/organizationMembers/organizationMemberDetail.spec.jsx b/tests/js/spec/views/settings/organizationMembers/organizationMemberDetail.spec.jsx
index f7c78a090b..1026db83c7 100644
--- a/tests/js/spec/views/settings/organizationMembers/organizationMemberDetail.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/organizationMemberDetail.spec.jsx
@@ -42,7 +42,7 @@ describe('OrganizationMemberDetail', function() {
     teams: [team.slug],
     invite_link: 'http://example.com/i/abc123',
     pending: true,
-    expired: true
+    expired: true,
   });
 
   describe('Can Edit', function() {
@@ -147,6 +147,49 @@ describe('OrganizationMemberDetail', function() {
     });
   });
 
+  it('can select and deselect all', function() {
+    wrapper = mount(
+      <OrganizationMemberDetail params={{memberId: member.id}} />,
+      routerContext
+    );
+
+    let first = 'TeamSelect Checkbox[id="team-slug"]';
+    let last = 'TeamSelect Checkbox[id="new-team"]';
+    let selectAllButton = wrapper.find('Button[data-test-id="select-all"]');
+
+    expect(selectAllButton).toHaveLength(1);
+    expect(wrapper.find(first).prop('checked')).toBe(true);
+    expect(wrapper.find(last).prop('checked')).toBe(false);
+    expect(wrapper.state('member').teams).toHaveLength(1);
+
+    // select and deselect all
+    selectAllButton.simulate('click');
+    expect(wrapper.find(first).prop('checked')).toBe(true);
+    expect(wrapper.find(last).prop('checked')).toBe(true);
+    expect(wrapper.state('member').teams).toHaveLength(2);
+
+    selectAllButton.simulate('click');
+    expect(wrapper.find(first).prop('checked')).toBe(false);
+    expect(wrapper.find(last).prop('checked')).toBe(false);
+    expect(wrapper.state('member').teams).toHaveLength(0);
+
+    // select one, then select all
+    wrapper.find(first).simulate('change');
+    expect(wrapper.state('member').teams).toHaveLength(1);
+    selectAllButton.simulate('click');
+    expect(wrapper.state('member').teams).toHaveLength(2);
+    selectAllButton.simulate('click');
+    expect(wrapper.state('member').teams).toHaveLength(0);
+
+    // select both, then deselect all
+    wrapper.find(first).simulate('change');
+    expect(wrapper.state('member').teams).toHaveLength(1);
+    wrapper.find(last).simulate('change');
+    expect(wrapper.state('member').teams).toHaveLength(2);
+    selectAllButton.simulate('click');
+    expect(wrapper.state('member').teams).toHaveLength(0);
+  });
+
   describe('Cannot Edit', function() {
     beforeAll(function() {
       organization = TestStubs.Organization({teams, access: ['org:read']});
@@ -162,7 +205,12 @@ describe('OrganizationMemberDetail', function() {
       // Should have 4 roles
       expect(wrapper.find('RoleSelect').prop('disabled')).toBe(true);
       expect(wrapper.find('TeamSelect').prop('disabled')).toBe(true);
-      expect(wrapper.find('Button').prop('disabled')).toBe(true);
+      expect(
+        wrapper.find('Button[className="invite-member-submit"]').prop('disabled')
+      ).toBe(true);
+      expect(wrapper.find('Button[data-test-id="select-all"]').prop('disabled')).toBe(
+        true
+      );
     });
   });
 
@@ -178,7 +226,9 @@ describe('OrganizationMemberDetail', function() {
         routerContext
       );
 
-      expect(wrapper.find('[data-test-id="member-status"]').text()).toEqual('Invitation Pending');
+      expect(wrapper.find('[data-test-id="member-status"]').text()).toEqual(
+        'Invitation Pending'
+      );
     });
 
     it('display expired status', function() {
@@ -187,7 +237,9 @@ describe('OrganizationMemberDetail', function() {
         routerContext
       );
 
-      expect(wrapper.find('[data-test-id="member-status"]').text()).toEqual('Invitation Expired');
+      expect(wrapper.find('[data-test-id="member-status"]').text()).toEqual(
+        'Invitation Expired'
+      );
     });
   });
 
