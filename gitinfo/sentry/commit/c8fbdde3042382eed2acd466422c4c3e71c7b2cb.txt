commit c8fbdde3042382eed2acd466422c4c3e71c7b2cb
Author: Jess MacQueen <jess@getsentry.com>
Date:   Wed Jul 5 15:18:11 2017 -0700

    move discarding from group_details to project_group_index

diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 354019ed2b..6ddb694285 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -15,7 +15,7 @@ from sentry.api.serializers import serialize
 from sentry.api.serializers.models.plugin import PluginSerializer
 from sentry.models import (
     Activity, Group, GroupHash, GroupSeen, GroupStatus, GroupTagKey,
-    GroupTombstone, Release, User, UserReport,
+    Release, User, UserReport,
 )
 from sentry.plugins import IssueTrackingPlugin2, plugins
 from sentry.utils.safe import safe_execute
@@ -150,44 +150,6 @@ class GroupDetailsEndpoint(GroupEndpoint):
             return {'version': version}
         return serialize(release, request.user)
 
-    def _delete_group(self, request, group):
-        from sentry.tasks.deletion import delete_group
-
-        updated = Group.objects.filter(
-            id=group.id,
-        ).exclude(
-            status__in=[
-                GroupStatus.PENDING_DELETION,
-                GroupStatus.DELETION_IN_PROGRESS,
-            ]
-        ).update(status=GroupStatus.PENDING_DELETION)
-        if updated:
-            GroupHash.objects.filter(group=group).delete()
-
-            transaction_id = uuid4().hex
-            project = group.project
-
-            delete_group.apply_async(
-                kwargs={
-                    'object_id': group.id,
-                    'transaction_id': transaction_id,
-                },
-                countdown=3600,
-            )
-
-            self.create_audit_entry(
-                request=request,
-                organization_id=project.organization_id if project else None,
-                target_object=group.id,
-                transaction_id=transaction_id,
-            )
-
-            delete_logger.info('object.delete.queued', extra={
-                'object_id': group.id,
-                'transaction_id': transaction_id,
-                'model': type(group).__name__,
-            })
-
     @attach_scenarios([retrieve_aggregate_scenario])
     def get(self, request, group):
         """
@@ -290,25 +252,6 @@ class GroupDetailsEndpoint(GroupEndpoint):
         :auth: required
         """
         discard = request.DATA.get('discard')
-        if discard:
-            # TODO(jess): do we want a lock here to prevent
-            # multiple tombstones from being created from a group?
-            tombstone = GroupTombstone.objects.create(
-                project_id=group.project_id,
-                level=group.level,
-                message=group.message,
-                culprit=group.culprit,
-                type=group.get_event_type(),
-            )
-            GroupHash.objects.filter(
-                group=group,
-            ).update(
-                group=None,
-                group_tombstone=tombstone,
-            )
-            self._delete_group(request, group)
-
-            return Response(status=204)
 
         # TODO(dcramer): we need to implement assignedTo in the bulk mutation
         # endpoint
@@ -324,6 +267,10 @@ class GroupDetailsEndpoint(GroupEndpoint):
             request=request,
         )
 
+        # if action was discard, there isn't a group to serialize anymore
+        if discard:
+            return response
+
         # we need to fetch the object against as the bulk mutation endpoint
         # only returns a delta, and object mutation returns a complete updated
         # entity.
@@ -346,6 +293,41 @@ class GroupDetailsEndpoint(GroupEndpoint):
         :pparam string issue_id: the ID of the issue to delete.
         :auth: required
         """
-        self._delete_group(request, group)
+        from sentry.tasks.deletion import delete_group
+
+        updated = Group.objects.filter(
+            id=group.id,
+        ).exclude(
+            status__in=[
+                GroupStatus.PENDING_DELETION,
+                GroupStatus.DELETION_IN_PROGRESS,
+            ]
+        ).update(status=GroupStatus.PENDING_DELETION)
+        if updated:
+            GroupHash.objects.filter(group=group).delete()
+
+            transaction_id = uuid4().hex
+            project = group.project
+
+            delete_group.apply_async(
+                kwargs={
+                    'object_id': group.id,
+                    'transaction_id': transaction_id,
+                },
+                countdown=3600,
+            )
+
+            self.create_audit_entry(
+                request=request,
+                organization_id=project.organization_id if project else None,
+                target_object=group.id,
+                transaction_id=transaction_id,
+            )
+
+            delete_logger.info('object.delete.queued', extra={
+                'object_id': group.id,
+                'transaction_id': transaction_id,
+                'model': type(group).__name__,
+            })
 
         return Response(status=202)
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index fcb902f4df..9f5e2e2e01 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -23,7 +23,7 @@ from sentry.db.models.query import create_or_update
 from sentry.models import (
     Activity, EventMapping, Group, GroupAssignee, GroupBookmark, GroupHash,
     GroupResolution, GroupSeen, GroupSnooze, GroupStatus, GroupSubscription,
-    GroupSubscriptionReason, Release, TagKey, UserOption
+    GroupSubscriptionReason, GroupTombstone, Release, TagKey, UserOption
 )
 from sentry.models.event import Event
 from sentry.models.group import looks_like_short_id
@@ -144,6 +144,7 @@ class GroupValidator(serializers.Serializer):
     isPublic = serializers.BooleanField()
     isSubscribed = serializers.BooleanField()
     merge = serializers.BooleanField()
+    discard = serializers.BooleanField()
     ignoreDuration = serializers.IntegerField()
     ignoreCount = serializers.IntegerField()
     # in hours, max of one week
@@ -162,6 +163,15 @@ class GroupValidator(serializers.Serializer):
             raise serializers.ValidationError('Cannot assign to non-team member')
         return attrs
 
+    def validate(self, attrs):
+        attrs = super(GroupValidator, self).validate(attrs)
+        if 'discard' in attrs:
+            if len(attrs) > 1:
+                raise serializers.ValidationError(
+                    'Other attributes cannot be updated when discarding'
+                )
+        return attrs
+
 
 class ProjectGroupIndexEndpoint(ProjectEndpoint):
     doc_section = DocSection.EVENTS
@@ -450,6 +460,29 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
             id__in=group_ids,
         )
 
+        discard = result.get('discard')
+        if discard:
+            group_list = list(queryset)
+            for group in group_list:
+                # TODO(jess): do we want a lock here to prevent
+                # multiple tombstones from being created from a group?
+                tombstone = GroupTombstone.objects.create(
+                    project_id=group.project_id,
+                    level=group.level,
+                    message=group.message,
+                    culprit=group.culprit,
+                    type=group.get_event_type(),
+                )
+                GroupHash.objects.filter(
+                    group=group,
+                ).update(
+                    group=None,
+                    group_tombstone=tombstone,
+                )
+            self._delete_groups(request, project, group_list)
+
+            return Response(status=204)
+
         statusDetails = result.pop('statusDetails', result)
         status = result.get('status')
         if status in ('resolved', 'resolvedInNextRelease'):
@@ -828,15 +861,20 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                     GroupStatus.DELETION_IN_PROGRESS,
                 ]
             ))
-            # filter down group ids to only valid matches
-            group_ids = [g.id for g in group_list]
         else:
             # missing any kind of filter
             return Response('{"detail": "You must specify a list of IDs for this operation"}', status=400)
 
-        if not group_ids:
+        if not group_list:
             return Response(status=204)
 
+        self._delete_groups(request, project, group_list)
+
+        return Response(status=204)
+
+    def _delete_groups(self, request, project, group_list):
+        group_ids = [g.id for g in group_list]
+
         Group.objects.filter(
             id__in=group_ids,
         ).exclude(
@@ -870,5 +908,3 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                 'transaction_id': transaction_id,
                 'model': type(group).__name__,
             })
-
-        return Response(status=204)
