commit a2edca1331e178bc801f4c4f5728749de8dc4f03
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Sep 3 20:47:10 2015 -0700

    validate email addresses in User interface

diff --git a/src/sentry/interfaces/user.py b/src/sentry/interfaces/user.py
index ed3d691029..a4f56f8d29 100644
--- a/src/sentry/interfaces/user.py
+++ b/src/sentry/interfaces/user.py
@@ -15,6 +15,19 @@ from sentry.web.helpers import render_to_string
 from ipaddr import IPAddress
 
 
+def validate_email(value, required=True):
+    if not required and not value:
+        return
+
+    if not isinstance(value, basestring):
+        raise TypeError('object of type %r is not an email address' % type(value).__name__)
+
+    # safe to assume an email address at least has a @ in it.
+    if '@' not in value:
+        raise ValueError('malformed email address')
+    return value
+
+
 def validate_ip(value, required=True):
     if not required and not value:
         return
@@ -51,7 +64,7 @@ class User(Interface):
 
         kwargs = {
             'id': trim(data.pop('id', None), 128),
-            'email': trim(data.pop('email', None), 128),
+            'email': trim(validate_email(data.pop('email', None), False), 128),
             'username': trim(data.pop('username', None), 128),
             'ip_address': validate_ip(data.pop('ip_address', None), False),
         }
diff --git a/tests/sentry/interfaces/test_user.py b/tests/sentry/interfaces/test_user.py
index 488eac8d0b..031642c115 100644
--- a/tests/sentry/interfaces/test_user.py
+++ b/tests/sentry/interfaces/test_user.py
@@ -33,6 +33,23 @@ class UserTest(TestCase):
             'data': {'favorite_color': 'brown'}
         }
 
+    def test_invalid_ip_address(self):
+        with self.assertRaises(Exception):
+            User.to_python(dict(
+                ip_address='abc',
+            ))
+
+    def test_invalid_email_address(self):
+        with self.assertRaises(Exception):
+            User.to_python(dict(
+                email=1,
+            ))
+
+        with self.assertRaises(Exception):
+            User.to_python(dict(
+                email='foo',
+            ))
+
     def test_serialize_unserialize_behavior(self):
         result = type(self.interface).to_python(self.interface.to_json())
         assert result.to_json() == self.interface.to_json()
