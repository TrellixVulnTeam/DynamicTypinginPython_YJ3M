commit d1fb7b4dc7174b5d9c0f47a2ce1250a3844a1ec7
Author: David Cramer <dcramer@gmail.com>
Date:   Tue May 5 08:06:49 2015 +0800

    Add enhanced Postgres support
    
    This pulls in getsentry.db.postgres (based on disqus-postgres):
    
    - Adds reconnection support to better handle pgbouncer drops
    - Improves tracebacks to include unformatted queries
    - Improves tracebacks on transactional exceptions
    - Bump logan to 0.7.x
    
    Refs GH-1521

diff --git a/CHANGES b/CHANGES
index feecc955d1..83c8908dde 100644
--- a/CHANGES
+++ b/CHANGES
@@ -19,6 +19,7 @@ This release removes the ability to login or create accounts using a social auth
 - TeamMember has been removed.
 - PendingTeamMember has been removed.
 - Added OrganizationMember.counter.
+- Added 'sentry.db.postgres' optimized Postgres backend.
 
 Version 7.4.3
 -------------
diff --git a/docs/quickstart/index.rst b/docs/quickstart/index.rst
index a6dc77817b..e2ee707391 100644
--- a/docs/quickstart/index.rst
+++ b/docs/quickstart/index.rst
@@ -143,7 +143,7 @@ is not a fully supported database and should not be used in production**.
     DATABASES = {
         'default': {
             # We suggest PostgreSQL for optimal performance
-            'ENGINE': 'django.db.backends.postgresql_psycopg2',
+            'ENGINE': 'sentry.db.postgres',
 
             # Alternatively you can use MySQL
             'ENGINE': 'django.db.backends.mysql',
diff --git a/setup.py b/setup.py
index 91fcb20162..b6cff5445a 100755
--- a/setup.py
+++ b/setup.py
@@ -84,7 +84,7 @@ install_requires = [
     'exam>=0.5.1',
     'gunicorn>=19.2.1,<20.0.0',
     'ipaddr>=2.1.11,<2.2.0',
-    'logan>=0.5.8.2,<0.6.0',
+    'logan>=0.7.0,<0.8.0',
     'lxml>=3.4.1',
     'mock>=0.8.0',
     'nydus>=0.11.0,<0.12.0',
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index e89c1f1bd4..1c831ce6d5 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -75,7 +75,7 @@ if 'DATABASE_URL' in os.environ:
         'PORT': url.port,
     })
     if url.scheme == 'postgres':
-        DATABASES['default']['ENGINE'] = 'django.db.backends.postgresql_psycopg2'
+        DATABASES['default']['ENGINE'] = 'sentry.db.postgres'
 
     if url.scheme == 'mysql':
         DATABASES['default']['ENGINE'] = 'django.db.backends.mysql'
diff --git a/src/sentry/db/exceptions.py b/src/sentry/db/exceptions.py
index 7f8d93991a..d4f2e45765 100644
--- a/src/sentry/db/exceptions.py
+++ b/src/sentry/db/exceptions.py
@@ -5,7 +5,6 @@ sentry.db.exceptions
 :copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-
 from __future__ import absolute_import
 
 
diff --git a/src/sentry/db/postgres/__init__.py b/src/sentry/db/postgres/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/sentry/db/postgres/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/sentry/db/postgres/base.py b/src/sentry/db/postgres/base.py
new file mode 100644
index 0000000000..c8a7b546fa
--- /dev/null
+++ b/src/sentry/db/postgres/base.py
@@ -0,0 +1,80 @@
+from __future__ import absolute_import
+
+import psycopg2 as Database
+
+# Some of these imports are unused, but they are inherited from other engines
+# and should be available as part of the backend ``base.py`` namespace.
+from django.db.backends.postgresql_psycopg2.base import (  # NOQA
+    DatabaseWrapper, DatabaseFeatures, DatabaseOperations, DatabaseClient,
+    DatabaseCreation, DatabaseIntrospection
+)
+
+from .decorators import (
+    capture_transaction_exceptions, auto_reconnect_cursor,
+    auto_reconnect_connection, less_shitty_error_messages
+)
+
+
+__all__ = ('DatabaseWrapper', 'DatabaseFeatures', 'DatabaseOperations',
+           'DatabaseOperations', 'DatabaseClient', 'DatabaseCreation',
+           'DatabaseIntrospection')
+
+
+class CursorWrapper(object):
+    """
+    A wrapper around the postgresql_psycopg2 backend which handles various events
+    from cursors, such as auto reconnects and lazy time zone evaluation.
+    """
+
+    def __init__(self, db, cursor):
+        self.db = db
+        self.cursor = cursor
+
+    def __getattr__(self, attr):
+        return getattr(self.cursor, attr)
+
+    @capture_transaction_exceptions
+    @auto_reconnect_cursor
+    @less_shitty_error_messages
+    def execute(self, sql, params=None):
+        if params is not None:
+            return self.cursor.execute(sql, params)
+        return self.cursor.execute(sql)
+
+    @capture_transaction_exceptions
+    @auto_reconnect_cursor
+    @less_shitty_error_messages
+    def executemany(self, sql, paramlist=()):
+        return self.cursor.executemany(sql, paramlist)
+
+
+class DatabaseWrapper(DatabaseWrapper):
+    @auto_reconnect_connection
+    def _set_isolation_level(self, level):
+        return super(DatabaseWrapper, self)._set_isolation_level(level)
+
+    @auto_reconnect_connection
+    def _cursor(self, *args, **kwargs):
+        cursor = super(DatabaseWrapper, self)._cursor()
+        return CursorWrapper(self, cursor)
+
+    def close(self, reconnect=False):
+        """
+        This ensures we dont error if the connection has already been closed.
+        """
+        if self.connection is not None:
+            if not self.connection.closed:
+                try:
+                    self.connection.close()
+                except Database.InterfaceError:
+                    # connection was already closed by something
+                    # like pgbouncer idle timeout.
+                    pass
+            self.connection = None
+
+
+class DatabaseFeatures(DatabaseFeatures):
+    can_return_id_from_insert = True
+
+    def __init__(self, connection):
+        self.connection = connection
diff --git a/src/sentry/db/postgres/decorators.py b/src/sentry/db/postgres/decorators.py
new file mode 100644
index 0000000000..d2c5e9f7bf
--- /dev/null
+++ b/src/sentry/db/postgres/decorators.py
@@ -0,0 +1,96 @@
+from __future__ import absolute_import
+
+import six
+import sys
+
+from functools import wraps
+
+from .exceptions import TransactionAborted
+from .helpers import can_reconnect
+
+
+def auto_reconnect_cursor(func):
+    """
+    Attempt to safely reconnect when an error is hit that resembles the
+    bouncer disconnecting the client due to a timeout/etc during a cursor
+    execution.
+    """
+    @wraps(func)
+    def inner(self, *args, **kwargs):
+        try:
+            return func(self, *args, **kwargs)
+        except Exception as e:
+            if not can_reconnect(e):
+                raise
+
+            self.db.close(reconnect=True)
+            self.cursor = self.db.create_cursor()
+
+            return func(self, *args, **kwargs)
+
+    return inner
+
+
+def auto_reconnect_connection(func):
+    """
+    Attempt to safely reconnect when an error is hit that resembles the
+    bouncer disconnecting the client due to a timeout/etc.
+    """
+    @wraps(func)
+    def inner(self, *args, **kwargs):
+        try:
+            return func(self, *args, **kwargs)
+        except Exception as e:
+            if not can_reconnect(e):
+                raise
+
+            self.close(reconnect=True)
+
+            return func(self, *args, **kwargs)
+
+    return inner
+
+
+def capture_transaction_exceptions(func):
+    """
+    Catches database errors and reraises them on subsequent errors that throw
+    some cruft about transaction aborted.
+    """
+    def raise_the_exception(conn, exc):
+        if 'current transaction is aborted, commands ignored until end of transaction block' in str(exc):
+            exc_info = getattr(conn, '_last_exception', None)
+            if exc_info is None:
+                raise
+            new_exc = TransactionAborted(sys.exc_info(), exc_info)
+            raise new_exc.__class__, new_exc, exc_info[2]
+
+        conn._last_exception = sys.exc_info()
+        raise
+
+    @wraps(func)
+    def inner(self, *args, **kwargs):
+        try:
+            return func(self, *args, **kwargs)
+        except Exception as e:
+            raise_the_exception(self.db, e)
+
+    return inner
+
+
+def less_shitty_error_messages(func):
+    """
+    Wraps functions where the first param is a SQL statement and enforces
+    any exceptions thrown will also contain the statement in the message.
+    """
+    @wraps(func)
+    def inner(self, sql, *args, **kwargs):
+        try:
+            return func(self, sql, *args, **kwargs)
+        except Exception as e:
+            exc_info = sys.exc_info()
+            msg = '{}\nSQL: {}'.format(
+                e.message,
+                sql,
+            )
+            six.reraise(exc_info[0], exc_info[0](msg), exc_info[2])
+    return inner
diff --git a/src/sentry/db/postgres/exceptions.py b/src/sentry/db/postgres/exceptions.py
new file mode 100644
index 0000000000..f01363529d
--- /dev/null
+++ b/src/sentry/db/postgres/exceptions.py
@@ -0,0 +1,51 @@
+from __future__ import absolute_import
+
+import psycopg2
+import traceback
+
+
+class CompositeTraceback(object):
+    def __init__(self, tb_list):
+        assert isinstance(tb_list, (list, tuple))
+        self.__tb_list = tb_list
+        self.__iterator = iter(self)
+
+    def __iter__(self):
+        for tb in self.__tb_list:
+            print repr(tb)
+            while tb:
+                self.__curframe = tb
+                tb = tb.tb_next
+                print '*', repr(tb)
+                yield tb
+
+    def tb_frame(self):
+        return self.__curframe.tb_frame
+
+    def tb_lasti(self):
+        return self.__curframe.tb_lasti
+
+    def tb_lineno(self):
+        return self.__curframe.tb_lineno
+
+    def tb_next(self):
+        self.__iterator.next()
+        return self
+
+
+class TransactionAborted(psycopg2.DatabaseError):
+    def __init__(self, exc_info, cur_exc_info):
+        self.exc_info = exc_info
+        self.cur_exc_info = cur_exc_info
+
+    def __repr__(self):
+        return '\n'.join(traceback.format_exception(self.__class__, self, self.get_traceback()))
+
+    def __str__(self):
+        return str(unicode(self))
+
+    def __unicode__(self):
+        return u'(%s) %s' % (self.cur_exc_info[0].__name__, self.cur_exc_info[1])
+
+    def get_traceback(self):
+        return CompositeTraceback([self.exc_info[2], self.cur_exc_info[2]])
diff --git a/src/sentry/db/postgres/helpers.py b/src/sentry/db/postgres/helpers.py
new file mode 100644
index 0000000000..fcf19d19c3
--- /dev/null
+++ b/src/sentry/db/postgres/helpers.py
@@ -0,0 +1,24 @@
+from __future__ import absolute_import
+
+import psycopg2
+
+from django.db.utils import DatabaseError
+
+
+def can_reconnect(exc):
+    if isinstance(exc, psycopg2.InterfaceError):
+        return True
+    elif isinstance(exc, psycopg2.OperationalError):
+        exc_msg = str(exc)
+        if "can't fetch default_isolation_level" in exc_msg:
+            return True
+        elif "can't set datestyle to ISO" in exc_msg:
+            return True
+        return True
+    elif isinstance(exc, DatabaseError):
+        exc_msg = str(exc)
+        if 'server closed the connection unexpectedly' in exc_msg:
+            return True
+        elif 'client_idle_timeout' in exc_msg:
+            return True
+    return False
diff --git a/src/sentry/utils/pytest.py b/src/sentry/utils/pytest.py
index 88399eea37..4c370746ab 100644
--- a/src/sentry/utils/pytest.py
+++ b/src/sentry/utils/pytest.py
@@ -21,7 +21,7 @@ def pytest_configure(config):
             })
         elif test_db == 'postgres':
             settings.DATABASES['default'].update({
-                'ENGINE': 'django.db.backends.postgresql_psycopg2',
+                'ENGINE': 'sentry.db.postgres',
                 'USER': 'postgres',
                 'NAME': 'sentry',
             })
@@ -99,9 +99,11 @@ def pytest_configure(config):
     from sentry.testutils.cases import flush_redis
     flush_redis()
 
-    from sentry.utils.runner import initialize_receivers
+    from sentry.utils.runner import initialize_receivers, fix_south
     initialize_receivers()
 
+    fix_south(settings)
+
     # force celery registration
     from sentry.celery import app  # NOQA
 
diff --git a/src/sentry/utils/runner.py b/src/sentry/utils/runner.py
index f2d1b5e07a..cc93962741 100644
--- a/src/sentry/utils/runner.py
+++ b/src/sentry/utils/runner.py
@@ -32,7 +32,7 @@ DATABASES = {
     'default': {
         # You can swap out the engine for MySQL easily by changing this value
         # to ``django.db.backends.mysql`` or to PostgreSQL with
-        # ``django.db.backends.postgresql_psycopg2``
+        # ``sentry.db.postgres``
 
         # If you change this, you'll also need to install the appropriate python
         # package: psycopg2 (Postgres) or mysql-python
@@ -288,12 +288,9 @@ def initialize_app(config):
 
     settings = config['settings']
 
-    install_plugins(settings)
+    fix_south(settings)
 
-    skip_migration_if_applied(
-        settings, 'kombu.contrib.django', 'djkombu_queue')
-    skip_migration_if_applied(
-        settings, 'social_auth', 'social_auth_association')
+    install_plugins(settings)
 
     apply_legacy_settings(config)
 
@@ -305,12 +302,21 @@ def initialize_app(config):
                       'See http://sentry.readthedocs.org/en/latest/queue/index.html for more information.')
 
     if settings.SENTRY_SINGLE_ORGANIZATION:
-        # Update default features
         settings.SENTRY_FEATURES['organizations:create'] = False
 
     initialize_receivers()
 
 
+def fix_south(settings):
+    # South needs an adapter defined conditionally
+    if settings.DATABASES['default']['ENGINE'] != 'sentry.db.postgres':
+        return
+
+    settings.SOUTH_DATABASE_ADAPTERS = {
+        'default': 'south.db.postgresql_psycopg2'
+    }
+
+
 def apply_legacy_settings(config):
     settings = config['settings']
 
@@ -384,6 +390,18 @@ def skip_migration_if_applied(settings, app_name, table_name,
         skip_if_table_exists(migration.forwards), migration)
 
 
+def on_configure(config):
+    """
+    Executes after settings are full installed and configured.
+    """
+    settings = config['settings']
+
+    skip_migration_if_applied(
+        settings, 'kombu.contrib.django', 'djkombu_queue')
+    skip_migration_if_applied(
+        settings, 'social_auth', 'social_auth_association')
+
+
 def configure(config_path=None):
     configure_app(
         project='sentry',
@@ -393,6 +411,7 @@ def configure(config_path=None):
         settings_initializer=generate_settings,
         settings_envvar='SENTRY_CONF',
         initializer=initialize_app,
+        on_configure=on_configure,
     )
 
 
diff --git a/src/sentry/utils/settings.py b/src/sentry/utils/settings.py
index 3daf094487..e570d8fcaa 100644
--- a/src/sentry/utils/settings.py
+++ b/src/sentry/utils/settings.py
@@ -15,6 +15,7 @@ from sentry.utils.imports import import_string
 
 PACKAGES = {
     'django.db.backends.postgresql_psycopg2': 'psycopg2.extensions',
+    'sentry.db.postgres': 'psycopg2.extensions',
     'django.db.backends.mysql': 'MySQLdb',
     'django.db.backends.oracle': 'cx_Oracle',
     'django.core.cache.backends.memcached.MemcachedCache': 'memcache',
