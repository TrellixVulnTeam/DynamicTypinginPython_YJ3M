commit 92d8dd46400763e5186888ed8e40b95c9ac99f0d
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Mar 4 13:05:13 2015 -0800

    Move cache into its own namespace

diff --git a/src/sentry/app.py b/src/sentry/app.py
index 2663da760b..32268c104f 100644
--- a/src/sentry/app.py
+++ b/src/sentry/app.py
@@ -27,7 +27,6 @@ def get_instance(path, options):
 # TODO(dcramer): this is getting heavy, we should find a better way to structure
 # this
 buffer = get_instance(settings.SENTRY_BUFFER, settings.SENTRY_BUFFER_OPTIONS)
-cache = get_instance(settings.SENTRY_CACHE, settings.SENTRY_CACHE_OPTIONS)
 quotas = get_instance(settings.SENTRY_QUOTAS, settings.SENTRY_QUOTA_OPTIONS)
 nodestore = get_instance(
     settings.SENTRY_NODESTORE, settings.SENTRY_NODESTORE_OPTIONS)
diff --git a/src/sentry/cache/__init__.py b/src/sentry/cache/__init__.py
index c3961685ab..1334dbf049 100644
--- a/src/sentry/cache/__init__.py
+++ b/src/sentry/cache/__init__.py
@@ -1 +1,15 @@
 from __future__ import absolute_import
+
+__all__ = ['default_cache']
+
+from django.conf import settings
+from django.core.exceptions import ImproperlyConfigured
+
+from sentry.utils.imports import import_string
+
+if not settings.SENTRY_CACHE:
+    raise ImproperlyConfigured('You must configure ``SENTRY_CACHE``.')
+
+default_cache = import_string(settings.SENTRY_CACHE)(
+    **settings.SENTRY_CACHE_OPTIONS
+)
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 6d1861e756..83c782910e 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -21,7 +21,8 @@ from django.utils.crypto import constant_time_compare
 from django.utils.encoding import smart_str
 from gzip import GzipFile
 
-from sentry.app import cache, env
+from sentry.app import env
+from sentry.cache import default_cache
 from sentry.constants import (
     DEFAULT_LOG_LEVEL, LOG_LEVELS, MAX_TAG_VALUE_LENGTH,
     MAX_TAG_KEY_LENGTH)
@@ -415,5 +416,5 @@ def ensure_has_ip(data, ip_address):
 
 def insert_data_to_database(data):
     cache_key = 'e:{1}:{0}'.format(data['project'], data['event_id'])
-    cache.set(cache_key, data, timeout=3600)
+    default_cache.set(cache_key, data, timeout=3600)
     preprocess_event.delay(cache_key=cache_key)
diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index a161d321eb..18bd4c1b0f 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -13,7 +13,7 @@ from django.conf import settings
 from django.utils import timezone
 from hashlib import md5
 
-from sentry.app import cache
+from sentry.cache import default_cache
 from sentry.db.models.query import create_or_update
 from sentry.models import Option
 
@@ -43,7 +43,7 @@ class OptionsManager(object):
     - Values must be strings.
     - Empty values are identical to null values which are represented by ''.
     """
-    cache = cache
+    cache = default_cache
 
     logger = logging.getLogger('sentry')
 
@@ -52,7 +52,7 @@ class OptionsManager(object):
 
     def __init__(self, cache=None, ttl=None, logger=None):
         if cache is not None:
-            self.cache = cache
+            self.cache = default_cache
 
         if ttl is not None:
             self.ttl = ttl
diff --git a/src/sentry/tasks/store.py b/src/sentry/tasks/store.py
index 8c81884438..2cdecfc807 100644
--- a/src/sentry/tasks/store.py
+++ b/src/sentry/tasks/store.py
@@ -8,6 +8,7 @@ sentry.tasks.store
 
 from __future__ import absolute_import
 
+from sentry.cache import default_cache
 from sentry.tasks.base import instrumented_task
 from sentry.utils.safe import safe_execute
 
@@ -16,11 +17,10 @@ from sentry.utils.safe import safe_execute
     name='sentry.tasks.store.preprocess_event',
     queue='events')
 def preprocess_event(cache_key=None, data=None, **kwargs):
-    from sentry.app import cache
     from sentry.plugins import plugins
 
     if cache_key:
-        data = cache.get(cache_key)
+        data = default_cache.get(cache_key)
 
     logger = preprocess_event.get_logger()
 
@@ -42,7 +42,7 @@ def preprocess_event(cache_key=None, data=None, **kwargs):
     assert data['project'] == project, 'Project cannot be mutated by preprocessor'
 
     if has_changed and cache_key:
-        cache.set(cache_key, data, 3600)
+        default_cache.set(cache_key, data, 3600)
 
     if cache_key:
         data = None
@@ -56,11 +56,10 @@ def save_event(cache_key=None, data=None, **kwargs):
     """
     Saves an event to the database.
     """
-    from sentry.app import cache
     from sentry.event_manager import EventManager
 
     if cache_key:
-        data = cache.get(cache_key)
+        data = default_cache.get(cache_key)
 
     if data is None:
         return
@@ -72,4 +71,4 @@ def save_event(cache_key=None, data=None, **kwargs):
         manager.save(project)
     finally:
         if cache_key:
-            cache.delete(cache_key)
+            default_cache.delete(cache_key)
