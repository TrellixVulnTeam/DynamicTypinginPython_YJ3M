commit f750d9876de5f3eee0039d740736039c33f3ad4a
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 3 14:50:30 2015 -0800

    Initial work on Celery 3.1

diff --git a/setup.py b/setup.py
index 40e0eebe4c..60444b16cc 100755
--- a/setup.py
+++ b/setup.py
@@ -64,11 +64,11 @@ tests_require = [
 
 install_requires = [
     'BeautifulSoup>=3.2.1,<3.3.0',
-    'celery>=3.0.15,<3.1.0',
+    'celery>=3.1.7,<3.2.0',
     'cssutils>=0.9.9,<0.10.0',
     'Django>=1.6.0,<1.7',
     'django-bitfield>=1.7.0,<1.8.0',
-    'django-celery>=3.0.11,<3.1.0',
+    'django-celery>=3.1.6,<3.2.0',
     'django-crispy-forms>=1.2.3,<1.3.0',
     'django-paging>=0.2.5,<0.3.0',
     'django-picklefield>=0.3.0,<0.4.0',
diff --git a/src/sentry/app.py b/src/sentry/app.py
index 2663da760b..6b1cd7ac92 100644
--- a/src/sentry/app.py
+++ b/src/sentry/app.py
@@ -7,6 +7,7 @@ sentry.app
 """
 from __future__ import absolute_import
 
+from celery import Celery
 from django.conf import settings
 from sentry.utils.imports import import_string
 from threading import local
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 9d7cccb243..d2eb2603fd 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -657,7 +657,3 @@ SENTRY_OPTIONS = {}
 # You should not change this setting after your database has been created
 # unless you have altered all schemas first
 SENTRY_USE_BIG_INTS = False
-
-# Configure celery
-import djcelery
-djcelery.setup_loader()
diff --git a/src/sentry/management/commands/celery.py b/src/sentry/management/commands/celery.py
new file mode 100644
index 0000000000..161ae77f0c
--- /dev/null
+++ b/src/sentry/management/commands/celery.py
@@ -0,0 +1,25 @@
+from __future__ import absolute_import, unicode_literals
+
+from celery.bin import celery
+from djcelery.management.base import CeleryCommand
+
+from sentry.app import celery
+
+base = celery.CeleryCommand(app=celery)
+
+
+# this is a reimplementation of the djcelery 'celery' command
+class Command(CeleryCommand):
+    """The celery command."""
+    help = 'celery commands, see celery help'
+    options = (CeleryCommand.options
+               + base.get_options()
+               + base.preload_options)
+
+    def run_from_argv(self, argv):
+        argv = self.handle_default_options(argv)
+        if self.requires_model_validation:
+            self.validate()
+        base.execute_from_commandline(
+            ['{0[0]} {0[1]}'.format(argv)] + argv[2:],
+        )
diff --git a/src/sentry/management/commands/celerybeat.py b/src/sentry/management/commands/celerybeat.py
new file mode 100644
index 0000000000..93a359072e
--- /dev/null
+++ b/src/sentry/management/commands/celerybeat.py
@@ -0,0 +1,25 @@
+"""
+
+Start the celery clock service from the Django management command.
+
+"""
+from __future__ import absolute_import, unicode_literals
+
+from celery.bin import beat
+from djcelery.management.base import CeleryCommand
+
+from sentry.app import celery
+
+beat = beat.beat(app=celery)
+
+
+# this is a reimplementation of the djcelery 'celerybeat' command
+class Command(CeleryCommand):
+    """Run the celery periodic task scheduler."""
+    options = (CeleryCommand.options
+               + beat.get_options()
+               + beat.preload_options)
+    help = 'Old alias to the "celery beat" command.'
+
+    def handle(self, *args, **options):
+        beat.run(*args, **options)
diff --git a/src/sentry/utils/pytest.py b/src/sentry/utils/pytest.py
index 6ac2225e1c..ea6454e5e5 100644
--- a/src/sentry/utils/pytest.py
+++ b/src/sentry/utils/pytest.py
@@ -7,11 +7,10 @@ from django.conf import settings
 
 
 def pytest_configure(config):
-    os.environ['RECAPTCHA_TESTING'] = 'True'
+    os.environ.setdefault('RECAPTCHA_TESTING', 'True')
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sentry.conf.server')
 
     if not settings.configured:
-        os.environ['DJANGO_SETTINGS_MODULE'] = 'sentry.conf.server'
-
         # only configure the db if its not already done
         test_db = os.environ.get('DB', 'sqlite')
         if test_db == 'mysql':
@@ -32,22 +31,7 @@ def pytest_configure(config):
                 'NAME': ':memory:',
             })
 
-    # http://djangosnippets.org/snippets/646/
-    class InvalidVarException(object):
-        def __mod__(self, missing):
-            try:
-                missing_str = unicode(missing)
-            except:
-                missing_str = 'Failed to create string representation'
-            raise Exception('Unknown template variable %r %s' % (missing, missing_str))
-
-        def __contains__(self, search):
-            if search == '%s':
-                return True
-            return False
-
     settings.TEMPLATE_DEBUG = True
-    # settings.TEMPLATE_STRING_IF_INVALID = InvalidVarException()
 
     # Disable static compiling in tests
     settings.STATIC_BUNDLES = {}
@@ -78,6 +62,7 @@ def pytest_configure(config):
 
     # disable error reporting by default
     settings.SENTRY_REDIS_OPTIONS = {'hosts': {0: {'db': 9}}}
+    settings.BROKER_URL = 'redis://localhost:6379/9'
 
     settings.SENTRY_ALLOW_ORIGIN = '*'
 
@@ -105,13 +90,16 @@ def pytest_configure(config):
     patcher = mock.patch('socket.getfqdn', return_value='localhost')
     patcher.start()
 
-    from sentry.utils.runner import initialize_receivers
-    initialize_receivers()
-
     from sentry.testutils.cases import flush_redis
     flush_redis()
 
+    from sentry.utils.runner import initialize_celery, initialize_receivers
+    initialize_celery(settings)
+    initialize_receivers()
+
 
 def pytest_runtest_teardown(item):
-    from sentry.app import tsdb
-    tsdb.flush()
+    from redis import StrictRedis
+
+    client = StrictRedis(db=9)
+    client.flushdb()
diff --git a/src/sentry/utils/runner.py b/src/sentry/utils/runner.py
index dcff9c81db..915031c07f 100644
--- a/src/sentry/utils/runner.py
+++ b/src/sentry/utils/runner.py
@@ -309,6 +309,8 @@ def initialize_app(config):
 
     apply_legacy_settings(config)
 
+    initialize_celery(settings)
+
     # Commonly setups don't correctly configure themselves for production envs
     # so lets try to provide a bit more guidance
     if settings.CELERY_ALWAYS_EAGER and not settings.DEBUG:
@@ -319,6 +321,16 @@ def initialize_app(config):
     initialize_receivers()
 
 
+def initialize_celery(settings):
+    # Configure celery
+    import djcelery
+    djcelery.setup_loader()
+
+    from celery.app import default_app
+    default_app.config_from_object(settings, force=True)
+
+
+
 def apply_legacy_settings(config):
     settings = config['settings']
 
