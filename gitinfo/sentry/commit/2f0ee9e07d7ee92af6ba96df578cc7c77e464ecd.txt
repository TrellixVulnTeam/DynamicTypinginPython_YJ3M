commit 2f0ee9e07d7ee92af6ba96df578cc7c77e464ecd
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Sep 9 01:40:04 2010 -0700

    Better support for db engine detection

diff --git a/sentry/helpers.py b/sentry/helpers.py
index cd7a172062..9b32e7d924 100644
--- a/sentry/helpers.py
+++ b/sentry/helpers.py
@@ -1,5 +1,6 @@
 import logging
 
+import django
 from django.conf import settings
 from django.utils.hashcompat import md5_constructor
 
@@ -24,6 +25,15 @@ def get_filters():
     for f in _FILTER_CACHE:
         yield f
 
+def get_db_engine(alias='default'):
+    has_multidb = django.VERSION >= (1, 2)
+    if has_multidb:
+        value = settings.DATABASES[alias]['ENGINE']
+    else:
+        assert alias == 'default', 'You cannot fetch a database engine other than the default on Django < 1.2'
+        value = settings.DATABASE_ENGINE
+    return value.rsplit('.', 1)[-1]
+
 def construct_checksum(level=logging.ERROR, class_name='', traceback='', message='', **kwargs):
     checksum = md5_constructor(str(level))
     checksum.update(class_name or '')
diff --git a/sentry/models.py b/sentry/models.py
index f754c2db1c..e060a28613 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -18,7 +18,7 @@ from django.utils.translation import ugettext_lazy as _
 
 from sentry import settings
 from sentry.client.base import SentryClient
-from sentry.helpers import construct_checksum, get_installed_apps, transform
+from sentry.helpers import construct_checksum, get_installed_apps, transform, get_db_engine
 from sentry.manager import SentryManager, GroupedMessageManager
 
 _reqs = ('paging', 'indexer')
@@ -130,7 +130,7 @@ class GroupedMessage(MessageBase):
 
     @classmethod
     def get_score_clause(cls):
-        engine = dj_settings.DATABASE_ENGINE.rsplit('.', 1)[-1]
+        engine = get_db_engine()
         if engine.startswith('postgresql'):
             return 'times_seen / (pow((floor(extract(epoch from now() - last_seen) / 3600) + 2), 1.25) + 1)'
         if engine.startswith('mysql'):
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 2f0a43a522..8f48491c8d 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -616,4 +616,27 @@ class SentryFeedsTest(TestCase):
         self.assertTrue('<link>http://testserver/</link>' in response.content)
         self.assertTrue('<title>log summaries</title>' in response.content)
         self.assertTrue('<link>http://testserver/group/1</link>' in response.content, response.content)
-        self.assertTrue('<title>(1) TypeError: TypeError: exceptions must be old-style classes or derived from BaseException, not NoneType</title>' in response.content)
\ No newline at end of file
+        self.assertTrue('<title>(1) TypeError: TypeError: exceptions must be old-style classes or derived from BaseException, not NoneType</title>' in response.content)
+
+class SentryHelpersTest(TestCase):
+    def test_get_db_engine(self):
+        from django.conf import settings
+        from sentry.helpers import get_db_engine
+        _databases = settings.DATABASES
+        _engine = settings.DATABASE_ENGINE
+        
+        settings.DATABASE_ENGINE = ''
+        settings.DATABASES['default'] = {'ENGINE': 'blah.sqlite3'}
+        
+        self.assertEquals(get_db_engine(), 'sqlite3')
+
+        settings.DATABASE_ENGINE = 'mysql'
+
+        self.assertEquals(get_db_engine(), 'sqlite3')
+
+        settings.DATABASES['default'] = {'ENGINE': 'blah.mysql'}
+
+        self.assertEquals(get_db_engine(), 'mysql')
+        
+        settings.DATABASES = _databases
+        settings.DATABASE_ENGINE = _engine
\ No newline at end of file
diff --git a/sentry/views.py b/sentry/views.py
index e62537307c..375a6912c6 100644
--- a/sentry/views.py
+++ b/sentry/views.py
@@ -25,6 +25,7 @@ from django.utils.safestring import mark_safe
 from django.views.decorators.csrf import csrf_protect, csrf_exempt
 
 from sentry import settings
+from sentry.helpers import get_db_engine
 from sentry.models import GroupedMessage, Message
 from sentry.templatetags.sentry_helpers import with_priority
 from sentry.reporter import ImprovedExceptionReporter, FakeRequest
@@ -201,7 +202,7 @@ def group(request, group_id):
     
     unique_servers = message_list.filter(server_name__isnull=False).values_list('server_name', 'logger', 'view', 'checksum').annotate(times_seen=Count('server_name')).values('server_name', 'times_seen').order_by('-times_seen')
     
-    engine = dj_settings.DATABASE_ENGINE.rsplit('.', 1)[-1]
+    engine = get_db_engine()
     if SimpleLineChart and not engine.startswith('sqlite'):
         today = datetime.datetime.now()
 
