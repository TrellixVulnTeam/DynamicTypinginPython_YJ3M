commit b8c421609d3dd354f397d151b80bf052c0088a1e
Author: Stephen Cefali <scefali@sentry.io>
Date:   Tue Dec 17 13:54:22 2019 -0800

    feat(plugins): adds the configuration for dependent issue fields for IssuePlugin2 plugins (#16119)

diff --git a/src/sentry/static/sentry/app/components/forms/selectField.jsx b/src/sentry/static/sentry/app/components/forms/selectField.jsx
index 7b3731026b..80cbb25089 100644
--- a/src/sentry/static/sentry/app/components/forms/selectField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectField.jsx
@@ -111,6 +111,7 @@ export default class SelectField extends FormField {
       disabled,
       required,
       name,
+      isLoading,
     } = this.props;
 
     return (
@@ -127,6 +128,7 @@ export default class SelectField extends FormField {
         clearable={clearable}
         multiple={this.isMultiple()}
         name={name}
+        isLoading={isLoading}
       />
     );
   }
diff --git a/src/sentry/static/sentry/app/plugins/components/issueActions.jsx b/src/sentry/static/sentry/app/plugins/components/issueActions.jsx
index ae1ead25cd..f2bd552d69 100644
--- a/src/sentry/static/sentry/app/plugins/components/issueActions.jsx
+++ b/src/sentry/static/sentry/app/plugins/components/issueActions.jsx
@@ -28,6 +28,7 @@ class IssueActions extends PluginComponentBase {
       error: null,
       createFormData: {},
       linkFormData: {},
+      dependentFieldState: {},
     });
   }
 
@@ -43,6 +44,24 @@ class IssueActions extends PluginComponentBase {
     return this.props.organization;
   }
 
+  getFieldListKey() {
+    return this.props.actionType + 'FieldList';
+  }
+
+  getFormDataKey() {
+    return this.props.actionType + 'FormData';
+  }
+
+  getFormData() {
+    const key = this.getFormDataKey();
+    return this.state[key] || {};
+  }
+
+  getFieldList() {
+    const key = this.getFieldListKey();
+    return this.state[key] || [];
+  }
+
   componentDidMount() {
     const plugin = this.props.plugin;
     if (!plugin.issue && this.props.actionType !== 'unlink') {
@@ -68,6 +87,83 @@ class IssueActions extends PluginComponentBase {
     );
   }
 
+  setDependentFieldState(fieldName, state) {
+    const dependentFieldState = {...this.state.dependentFieldState, [fieldName]: state};
+    this.setState({dependentFieldState});
+  }
+
+  loadOptionsForDependentField = async field => {
+    const formData = this.getFormData();
+
+    const groupId = this.getGroup().id;
+    const pluginSlug = this.props.plugin.slug;
+    const url = `/issues/${groupId}/plugins/${pluginSlug}/options/`;
+
+    //find the fields that this field is dependent on
+    const dependentFormValues = Object.fromEntries(
+      field.depends.map(fieldKey => [fieldKey, formData[fieldKey]])
+    );
+    const query = {
+      option_field: field.name,
+      ...dependentFormValues,
+    };
+    try {
+      this.setDependentFieldState(field.name, FormState.LOADING);
+      const result = await this.api.requestPromise(url, {query});
+      this.updateOptionsOfDependentField(field, result[field.name]);
+      this.setDependentFieldState(field.name, FormState.READY);
+    } catch (err) {
+      this.setDependentFieldState(field.name, FormState.ERROR);
+      this.errorHandler(err);
+    }
+  };
+
+  updateOptionsOfDependentField = (field, choices) => {
+    const formListKey = this.getFieldListKey();
+    let fieldList = this.state[formListKey];
+
+    //find the location of the field in our list and replace it
+    const indexOfField = fieldList.findIndex(({name}) => name === field.name);
+    field = {...field, choices};
+
+    //make a copy of the array to avoid mutation
+    fieldList = fieldList.slice();
+    fieldList[indexOfField] = field;
+
+    this.setState({[formListKey]: fieldList});
+  };
+
+  resetOptionsOfDependentField = field => {
+    this.updateOptionsOfDependentField(field, []);
+    const formDataKey = this.getFormDataKey();
+    const formData = {...this.state[formDataKey]};
+    formData[field.name] = '';
+    this.setState({[formDataKey]: formData});
+    this.setDependentFieldState(field.name, FormState.DISABLED);
+  };
+
+  getInputProps(field) {
+    const props = {};
+
+    //special logic for fields that have dependencies
+    if (field.depends && field.depends.length > 0) {
+      switch (this.state.dependentFieldState[field.name]) {
+        case FormState.LOADING:
+          props.isLoading = true;
+          props.readonly = true;
+          break;
+        case FormState.DISABLED:
+        case FormState.ERROR:
+          props.readonly = true;
+          break;
+        default:
+          break;
+      }
+    }
+
+    return props;
+  }
+
   setError(error, defaultMessage) {
     let errorBody;
     if (error.status === 400 && error.responseJSON) {
@@ -90,6 +186,18 @@ class IssueActions extends PluginComponentBase {
     this.setState(state);
   }
 
+  onLoadSuccess(...args) {
+    super.onLoadSuccess(...args);
+
+    //dependent fields need to be set to disabled upon loading
+    const fieldList = this.getFieldList();
+    fieldList.forEach(field => {
+      if (field.depends && field.depends.length > 0) {
+        this.setDependentFieldState(field.name, FormState.DISABLED);
+      }
+    });
+  }
+
   fetchData() {
     if (this.props.actionType === 'create') {
       this.api.request(this.getPluginCreateEndpoint(), {
@@ -170,12 +278,36 @@ class IssueActions extends PluginComponentBase {
   }
 
   changeField(action, name, value) {
-    const key = action + 'FormData';
-    const formData = this.state[key];
+    const formDataKey = action + 'FormData';
+
+    //copy so we don't mutate
+    const formData = {...this.state[formDataKey]};
+    const fieldList = this.getFieldList();
+
     formData[name] = value;
-    const state = {};
-    state[key] = formData;
-    this.setState(state);
+
+    let callback = () => {};
+
+    //only works with one impacted field
+    const impactedField = fieldList.find(({depends}) => {
+      if (!depends || !depends.length) {
+        return false;
+      }
+      // must be dependent on the field we just set
+      return depends.includes(name);
+    });
+
+    if (impactedField) {
+      //if every dependent field is set, then search
+      if (!impactedField.depends.some(dependentField => !formData[dependentField])) {
+        callback = () => this.loadOptionsForDependentField(impactedField);
+      } else {
+        //otherwise reset the options
+        callback = () => this.resetOptionsOfDependentField(impactedField);
+      }
+    }
+
+    this.setState({[formDataKey]: formData}, callback);
   }
 
   renderForm() {
@@ -206,7 +338,7 @@ class IssueActions extends PluginComponentBase {
                 return (
                   <div key={field.name}>
                     {this.renderField({
-                      config: field,
+                      config: {...field, ...this.getInputProps(field)},
                       formData: this.state.createFormData,
                       onChange: this.changeField.bind(this, 'create', field.name),
                     })}
@@ -238,7 +370,7 @@ class IssueActions extends PluginComponentBase {
                 return (
                   <div key={field.name}>
                     {this.renderField({
-                      config: field,
+                      config: {...field, ...this.getInputProps(field)},
                       formData: this.state.linkFormData,
                       onChange: this.changeField.bind(this, 'link', field.name),
                     })}
