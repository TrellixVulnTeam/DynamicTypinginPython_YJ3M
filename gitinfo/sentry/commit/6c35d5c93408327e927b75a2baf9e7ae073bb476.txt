commit 6c35d5c93408327e927b75a2baf9e7ae073bb476
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Mar 17 15:32:05 2016 -0700

    Refactor queue monitoring code to not require Celery

diff --git a/src/sentry/monitoring/queues.py b/src/sentry/monitoring/queues.py
index 1155cc2d6d..928a993d6f 100644
--- a/src/sentry/monitoring/queues.py
+++ b/src/sentry/monitoring/queues.py
@@ -5,12 +5,20 @@ sentry.monitoring.queues
 :copyright: (c) 2016 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+from __future__ import absolute_import, print_function
+
+from urlparse import urlparse
+from django.utils.functional import cached_property
 
 
 class RedisBackend(object):
-    def __init__(self, app):
+    def __init__(self, broker_url):
+        self.broker_url = broker_url
+
+    @cached_property
+    def client(self):
         from redis import StrictRedis
-        self.client = StrictRedis.from_url(app.conf.BROKER_URL)
+        return StrictRedis.from_url(self.broker_url)
 
     def bulk_get_sizes(self, queues):
         return [(queue.name, self.get_size(queue)) for queue in queues]
@@ -27,45 +35,55 @@ class RedisBackend(object):
 
 
 class AmqpBackend(object):
-    def __init__(self, app):
-        self.app = app
-
-    def _get_size_from_conn(self, conn, queue):
+    def __init__(self, broker_url):
+        dsn = urlparse(broker_url)
+        self.conn_info = dict(
+            host=dsn.hostname,
+            port=dsn.port,
+            userid=dsn.username,
+            password=dsn.password,
+            virtual_host=dsn.path[1:],
+        )
+
+    def get_conn(self):
+        from librabbitmq import Connection
+        return Connection(**self.conn_info)
+
+    def _get_size_from_channel(self, channel, queue):
         # In AMQP, the way to do this is to attempt to create a queue passively.
         # which is basically checking for it's existence (passive=True), this also
         # returns back the queue size.
         try:
-            _, size, _ = queue(conn.default_channel).queue_declare(passive=True)
+            _, size, _ = channel.queue_declare(queue.name, passive=True)
         except Exception:
             return 0
         return size
 
     def bulk_get_sizes(self, queues):
         sizes = []
-        with self.app.connection_or_acquire() as conn:
-            for queue in queues:
-                sizes.append((queue.name, self._get_size_from_conn(conn, queue)))
-        return sizes
+        with self.get_conn() as conn:
+            with conn.channel() as channel:
+                for queue in queues:
+                    sizes.append((queue.name, self._get_size_from_channel(channel, queue)))
+                return sizes
 
     def get_size(self, queue):
-        with self.app.connection_or_acquire() as conn:
-            return self._get_size_from_conn(conn, queue)
+        with self.get_conn() as conn:
+            with conn.channel() as channel:
+                return self._get_size_from_channel(channel, queue)
 
     def purge_queue(self, queue):
-        with self.app.connection_or_acquire() as conn:
-            return queue(conn.default_channel).purge()
+        with self.get_conn() as conn:
+            with conn.channel() as channel:
+                return channel.queue_purge(queue.name)
 
 
-def get_backend_for_celery(app):
-    from urlparse import urlparse
-    return backends[urlparse(app.conf.BROKER_URL).scheme](app)
+def get_backend_for_broker(broker_url):
+    return backends[urlparse(broker_url).scheme](broker_url)
 
 
 backends = {
     'redis': RedisBackend,
     'amqp': AmqpBackend,
-
-    # Ideally these are never used
     'librabbitmq': AmqpBackend,
-    'pyamqp': AmqpBackend,
 }
diff --git a/src/sentry/runner/commands/queues.py b/src/sentry/runner/commands/queues.py
index 9054b5b1e0..e8379b2b9b 100644
--- a/src/sentry/runner/commands/queues.py
+++ b/src/sentry/runner/commands/queues.py
@@ -23,15 +23,15 @@ def queues():
 def list(sort_size, reverse):
     "List queues."
 
-    from sentry.celery import app
-    from sentry.monitoring.queues import get_backend_for_celery
+    from django.conf import settings
+    from sentry.monitoring.queues import get_backend_for_broker
 
     try:
-        backend = get_backend_for_celery(app)
+        backend = get_backend_for_broker(settings.BROKER_URL)
     except KeyError as e:
         raise click.ClickException('unknown broker type: %r' % e.message)
 
-    queues = backend.bulk_get_sizes(app.conf.CELERY_QUEUES)
+    queues = backend.bulk_get_sizes(settings.CELERY_QUEUES)
 
     if sort_size:
         queues = sorted(queues, key=lambda q: (-q[1], q[0]), reverse=reverse)
@@ -47,18 +47,20 @@ def list(sort_size, reverse):
 @click.argument('queue')
 @configuration
 def purge(force, queue):
-    from sentry.celery import app
-    for q in app.conf.CELERY_QUEUES:
+    "Purge all messages from a queue."
+
+    from django.conf import settings
+    for q in settings.CELERY_QUEUES:
         if q.name == queue:
             queue = q
             break
     else:
         raise click.ClickException('unknown queue: %r' % queue)
 
-    from sentry.monitoring.queues import get_backend_for_celery
+    from sentry.monitoring.queues import get_backend_for_broker
 
     try:
-        backend = get_backend_for_celery(app)
+        backend = get_backend_for_broker(settings.BROKER_URL)
     except KeyError as e:
         raise click.ClickException('unknown broker type: %r' % e.message)
 
