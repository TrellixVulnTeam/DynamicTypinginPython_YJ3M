commit b108989f19b74c45913eb14bde2ceb516b5c2a8e
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Mar 23 10:27:15 2018 -0700

    feat(django): Various compatibility for Django 1.8
    
    - Adapted file upload API to detect default name behavior
    - Disable deferred fields (only/defer) on querysets
    - Remove any invalid uses of select_related
    - Adapt Model.update to support used newer expression classes
    - Require Django 1.8 to pass CI

diff --git a/.travis.yml b/.travis.yml
index e212e48c14..ee2c89be9d 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -31,6 +31,7 @@ env:
     - CXX=g++-4.8
     - SOUTH_TESTS_MIGRATE=1
     - JEST_JUNIT_OUTPUT=jest.junit.xml
+    - DJANGO_VERSION=">=1.6,<1.7"
 install:
   - 'export PATH=$PATH:~/.bin'
   - nvm install $TRAVIS_NODE_VERSION
@@ -67,9 +68,6 @@ after_failure:
 # each attribute in the matrix will override the global attribute
 matrix:
   fast_finish: true
-  allow_failures:
-    - python: 2.7
-      env: TEST_SUITE=django-18
   include:
     # only the sqlite suite runs riak tests
     - python: 2.7
@@ -112,7 +110,7 @@ matrix:
     - python: 2.7
       env: TEST_SUITE=dist
     - python: 2.7
-      env: TEST_SUITE=django-18
+      env: TEST_SUITE=postgres DJANGO_VERSION=">=1.8,<1.9"
       services:
         - memcached
         - redis-server
diff --git a/Makefile b/Makefile
index e54c8bb036..f4e6b07f01 100644
--- a/Makefile
+++ b/Makefile
@@ -1,5 +1,6 @@
 NPM_ROOT = ./node_modules
 STATIC_DIR = src/sentry/static/sentry
+DJANGO_VERSION := ">=1.6,<1.7"
 
 ifneq "$(wildcard /usr/local/opt/libxmlsec1/lib)" ""
 	LDFLAGS += -L/usr/local/opt/libxmlsec1/lib
@@ -197,6 +198,7 @@ travis-setup-cassandra:
 	echo "create keyspace sentry with replication = {'class' : 'SimpleStrategy', 'replication_factor': 1};" | cqlsh --cqlversion=3.1.7
 	echo 'create table nodestore (key text primary key, value blob, flags int);' | cqlsh -k sentry --cqlversion=3.1.7
 travis-install-python:
+	pip install Django${DJANGO_VERSION}
 	$(MAKE) travis-upgrade-pip
 	$(MAKE) install-python-base
 	$(MAKE) install-python-tests
@@ -228,7 +230,6 @@ travis-install-dist:
 	$(MAKE) travis-upgrade-pip
 	$(MAKE) travis-install-python install-yarn
 travis-install-django-18: travis-install-postgres
-	pip install "Django>=1.8,<1.9"
 
 .PHONY: travis-install-sqlite travis-install-postgres travis-install-js travis-install-cli travis-install-dist
 
diff --git a/requirements-base.txt b/requirements-base.txt
index 9f3d9899b1..2e45f3a421 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -4,7 +4,7 @@ celery>=3.1.8,<3.1.19
 click>=5.0,<7.0
 # 'cryptography>=1.3,<1.4
 cssutils>=0.9.9,<0.10.0
-Django>=1.6.0,<1.7
+Django>=1.6.11,<1.7
 django-crispy-forms>=1.4.0,<1.5.0
 django-jsonfield>=0.9.13,<0.9.14
 django-picklefield>=0.3.0,<0.4.0
diff --git a/setup.py b/setup.py
index 555ca33f52..ea5e0c5288 100755
--- a/setup.py
+++ b/setup.py
@@ -75,6 +75,14 @@ dev_requires = get_requirements('dev')
 tests_require = get_requirements('test')
 optional_requires = get_requirements('optional')
 
+DJANGO_VERSION = os.environ.get('DJANGO_VERSION')
+if DJANGO_VERSION:
+    install_requires = [
+        'Django{}'.format(DJANGO_VERSION[1:-1])
+        if k.startswith('Django>=') else k
+        for k in install_requires
+    ]
+
 
 class SentrySDistCommand(SDistCommand):
     # If we are not a light build we want to also execute build_assets as
diff --git a/src/sentry/api/endpoints/dsym_files.py b/src/sentry/api/endpoints/dsym_files.py
index 5d357d32fb..e600b2da2e 100644
--- a/src/sentry/api/endpoints/dsym_files.py
+++ b/src/sentry/api/endpoints/dsym_files.py
@@ -111,7 +111,7 @@ class DSymFilesEndpoint(ProjectEndpoint):
         apps = DSymApp.objects.filter(project=project)
         dsym_files = VersionDSymFile.objects.filter(
             dsym_app=apps
-        ).select_related('projectdsymfile').order_by('-build', 'version')
+        ).select_related('dsym_file').order_by('-build', 'version')
 
         file_list = ProjectDSymFile.objects.filter(
             project=project,
diff --git a/src/sentry/api/endpoints/organization_release_files.py b/src/sentry/api/endpoints/organization_release_files.py
index 65eba754a1..45c76f038d 100644
--- a/src/sentry/api/endpoints/organization_release_files.py
+++ b/src/sentry/api/endpoints/organization_release_files.py
@@ -100,7 +100,7 @@ class OrganizationReleaseFilesEndpoint(OrganizationReleasesBaseEndpoint):
         fileobj = request.FILES['file']
 
         full_name = request.DATA.get('name', fileobj.name)
-        if not full_name:
+        if not full_name or full_name == 'file':
             return Response({'detail': 'File name must be specified'}, status=400)
 
         name = full_name.rsplit('/', 1)[-1]
diff --git a/src/sentry/api/endpoints/project_release_files.py b/src/sentry/api/endpoints/project_release_files.py
index 505fc9cbec..841447e493 100644
--- a/src/sentry/api/endpoints/project_release_files.py
+++ b/src/sentry/api/endpoints/project_release_files.py
@@ -134,7 +134,7 @@ class ProjectReleaseFilesEndpoint(ProjectEndpoint):
         fileobj = request.FILES['file']
 
         full_name = request.DATA.get('name', fileobj.name)
-        if not full_name:
+        if not full_name or full_name == 'file':
             return Response({'detail': 'File name must be specified'}, status=400)
 
         name = full_name.rsplit('/', 1)[-1]
diff --git a/src/sentry/api/endpoints/project_user_reports.py b/src/sentry/api/endpoints/project_user_reports.py
index 0dbc3e7422..67d3adce76 100644
--- a/src/sentry/api/endpoints/project_user_reports.py
+++ b/src/sentry/api/endpoints/project_user_reports.py
@@ -119,7 +119,7 @@ class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
 
         try:
             event = Event.objects.filter(project_id=project.id,
-                                         event_id=report.event_id).select_related('group')[0]
+                                         event_id=report.event_id)[0]
         except IndexError:
             try:
                 report.group = Group.objects.from_event_id(project, report.event_id)
diff --git a/src/sentry/api/serializers/models/organization_member.py b/src/sentry/api/serializers/models/organization_member.py
index 69b6bdfa0d..584b17c3c7 100644
--- a/src/sentry/api/serializers/models/organization_member.py
+++ b/src/sentry/api/serializers/models/organization_member.py
@@ -44,18 +44,20 @@ class OrganizationMemberWithTeamsSerializer(OrganizationMemberSerializer):
                       self).get_attrs(item_list, user)
 
         member_team_map = list(OrganizationMemberTeam.objects.filter(
+            team__status=TeamStatus.VISIBLE,
             organizationmember__in=item_list,
-            team__status=TeamStatus.VISIBLE).values(
-            'organizationmember_id', 'team_id'))
+        ).values_list(
+            'organizationmember_id', 'team_id'
+        ))
 
         teams = {team.id: team for team in Team.objects.filter(
-            id__in=[item['team_id'] for item in member_team_map])}
+            id__in=[team_id for _, team_id in member_team_map])}
         results = defaultdict(list)
 
         # results is a map of member id -> team_slug[]
-        for m in member_team_map:
-            results[m['organizationmember_id']].append(
-                teams[m['team_id']].slug)
+        for member_id, team_id in member_team_map:
+            results[member_id].append(
+                teams[team_id].slug)
 
         for item in item_list:
             teams = results.get(item.id, [])
diff --git a/src/sentry/api/serializers/models/processingissue.py b/src/sentry/api/serializers/models/processingissue.py
index 2f57235509..10d6d5d1af 100644
--- a/src/sentry/api/serializers/models/processingissue.py
+++ b/src/sentry/api/serializers/models/processingissue.py
@@ -17,11 +17,9 @@ class ProcessingIssueSerializer(Serializer):
                 missing_counts.append(pk)
 
         if missing_counts:
-            extra_counts = ProcessingIssue.objects.with_num_events().filter(
+            counts.update(dict(ProcessingIssue.objects.with_num_events().filter(
                 pk__in=list(missing_counts)
-            ).values('id', 'num_events')
-            for d in extra_counts:
-                counts[d['id']] = d['num_events']
+            ).values_list('id', 'num_events')))
 
         result = {}
         for item in item_list:
diff --git a/src/sentry/api/serializers/models/userreport.py b/src/sentry/api/serializers/models/userreport.py
index 4744493730..4f93b094f6 100644
--- a/src/sentry/api/serializers/models/userreport.py
+++ b/src/sentry/api/serializers/models/userreport.py
@@ -17,12 +17,10 @@ class UserReportSerializer(Serializer):
 
         # If a event list with multiple project IDs is passed to this and event IDs are not unique
         # this could return the wrong eventIDs
-        events_list = Event.objects.filter(
+        events_dict = dict(Event.objects.filter(
             project_id__in={i.project_id for i in item_list},
             event_id__in=[i.event_id for i in item_list]
-        ).values('id', 'event_id')
-
-        events_dict = {e['event_id']: e['id'] for e in events_list}
+        ).values_list('id', 'event_id'))
 
         attrs = {}
         for item in item_list:
diff --git a/src/sentry/db/models/base.py b/src/sentry/db/models/base.py
index 39f0b77655..220be85d7c 100644
--- a/src/sentry/db/models/base.py
+++ b/src/sentry/db/models/base.py
@@ -15,6 +15,7 @@ import six
 from bitfield.types import BitHandler
 from django.db import models
 from django.db.models import signals
+from django.db.models.query_utils import DeferredAttribute
 
 from .fields.bounded import BoundedBigAutoField
 from .manager import BaseManager
@@ -24,6 +25,8 @@ __all__ = ('BaseModel', 'Model', 'sane_repr')
 
 UNSAVED = object()
 
+DEFERRED = object()
+
 
 def sane_repr(*attrs):
     if 'id' not in attrs and 'pk' not in attrs:
@@ -57,6 +60,13 @@ class BaseModel(models.Model):
         d.pop('_Model__data', None)
         return d
 
+    def __hash__(self):
+        # Django decided that it shouldnt let us hash objects even though they have
+        # memory addresses. We need that behavior, so let's revert.
+        if self.pk:
+            return models.Model.__hash__(self)
+        return id(self)
+
     def __reduce__(self):
         (model_unpickle, stuff, _) = super(BaseModel, self).__reduce__()
         return (model_unpickle, stuff, self.__getstate__())
@@ -66,15 +76,21 @@ class BaseModel(models.Model):
         self._update_tracked_data()
 
     def __get_field_value(self, field):
+        if isinstance(type(field).__dict__.get(field.attname), DeferredAttribute):
+            return DEFERRED
         if isinstance(field, models.ForeignKey):
             return getattr(self, field.column, None)
-        return getattr(self, field.name, None)
+        return getattr(self, field.attname, None)
 
     def _update_tracked_data(self):
         "Updates a local copy of attributes values"
         if self.id:
             data = {}
             for f in self._meta.fields:
+                # XXX(dcramer): this is how Django determines this (copypasta from Model)
+                if isinstance(type(f).__dict__.get(f.attname),
+                              DeferredAttribute) or f.column is None:
+                    continue
                 try:
                     v = self.__get_field_value(f)
                 except AttributeError as e:
@@ -93,12 +109,18 @@ class BaseModel(models.Model):
         if self.__data is UNSAVED:
             return False
         field = self._meta.get_field(field_name)
-        return self.__data.get(field_name) != self.__get_field_value(field)
+        value = self.__get_field_value(field)
+        if value is DEFERRED:
+            return False
+        return self.__data.get(field_name) != value
 
     def old_value(self, field_name):
         "Returns the previous value of ``field``"
         if self.__data is UNSAVED:
             return None
+        value = self.__data.get(field_name)
+        if value is DEFERRED:
+            return None
         return self.__data.get(field_name)
 
 
diff --git a/src/sentry/db/models/manager.py b/src/sentry/db/models/manager.py
index 86dc14a6f0..1feedda80d 100644
--- a/src/sentry/db/models/manager.py
+++ b/src/sentry/db/models/manager.py
@@ -15,7 +15,8 @@ import weakref
 
 from django.conf import settings
 from django.db import router
-from django.db.models import Manager, Model
+from django.db.models import Model
+from django.db.models.manager import Manager, QuerySet
 from django.db.models.signals import (post_save, post_delete, post_init, class_prepared)
 from django.utils.encoding import smart_text
 
@@ -55,12 +56,27 @@ def make_key(model, prefix, kwargs):
     return '%s:%s:%s' % (prefix, model.__name__, md5_text(kwargs_bits).hexdigest())
 
 
+class BaseQuerySet(QuerySet):
+    # XXX(dcramer): we prefer values_list, but we cant disable values as Django uses it
+    # internally
+    # def values(self, *args, **kwargs):
+    #     raise NotImplementedError('Use ``values_list`` instead [performance].')
+
+    def defer(self, *args, **kwargs):
+        raise NotImplementedError('Use ``values_list`` instead [performance].')
+
+    def only(self, *args, **kwargs):
+        raise NotImplementedError('Use ``values_list`` instead [performance].')
+
+
 class BaseManager(Manager):
     lookup_handlers = {
         'iexact': lambda x: x.upper(),
     }
     use_for_related_fields = True
 
+    _queryset_class = BaseQuerySet
+
     def __init__(self, *args, **kwargs):
         self.cache_fields = kwargs.pop('cache_fields', [])
         self.cache_ttl = kwargs.pop('cache_ttl', 60 * 5)
@@ -304,3 +320,12 @@ class BaseManager(Manager):
         """
         Triggered when a model bound to this manager is deleted.
         """
+
+    def get_queryset(self):
+        """
+        Returns a new QuerySet object.  Subclasses can override this method to
+        easily customize the behavior of the Manager.
+        """
+        if hasattr(self, '_hints'):
+            return self._queryset_class(self.model, using=self._db, hints=self._hints)
+        return self._queryset_class(self.model, using=self._db)
diff --git a/src/sentry/db/models/utils.py b/src/sentry/db/models/utils.py
index 08c35ee6bb..a8e217c002 100644
--- a/src/sentry/db/models/utils.py
+++ b/src/sentry/db/models/utils.py
@@ -10,17 +10,23 @@ from __future__ import absolute_import
 
 import operator
 
+from django.db.models import F
+from django.utils.crypto import get_random_string
+from django.template.defaultfilters import slugify
 from uuid import uuid4
 
-from django.db.models import F
+from sentry.db.exceptions import CannotResolveExpression
+
+
+class _UnknownType(object):
+    pass
+
 try:
     from django.db.models.expressions import ExpressionNode
+    Value = _UnknownType
 except ImportError:
-    from django.db.models.expressions import Combinable as ExpressionNode
-from django.utils.crypto import get_random_string
-from django.template.defaultfilters import slugify
+    from django.db.models.expressions import Combinable as ExpressionNode, Value
 
-from sentry.db.exceptions import CannotResolveExpression
 
 EXPRESSION_NODE_CALLBACKS = {
     ExpressionNode.ADD: operator.add,
@@ -41,17 +47,27 @@ except AttributeError:
 
 def resolve_expression_node(instance, node):
     def _resolve(instance, node):
+        if isinstance(node, Value):
+            return node.value
         if isinstance(node, F):
             return getattr(instance, node.name)
-        elif isinstance(node, ExpressionNode):
+        if isinstance(node, ExpressionNode):
             return resolve_expression_node(instance, node)
         return node
 
+    if isinstance(node, Value):
+        return node.value
+    if not hasattr(node, 'connector'):
+        raise CannotResolveExpression
     op = EXPRESSION_NODE_CALLBACKS.get(node.connector, None)
     if not op:
         raise CannotResolveExpression
-    runner = _resolve(instance, node.children[0])
-    for n in node.children[1:]:
+    if hasattr(node, 'children'):
+        children = node.children
+    else:
+        children = [node.lhs, node.rhs]
+    runner = _resolve(instance, children[0])
+    for n in children[1:]:
         runner = op(runner, _resolve(instance, n))
     return runner
 
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index a01ea656b1..f4189987b0 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -240,36 +240,68 @@ class HashDiscarded(Exception):
     pass
 
 
-class ScoreClause(object):
-    def __init__(self, group):
-        self.group = group
-
-    def __int__(self):
-        # Calculate the score manually when coercing to an int.
-        # This is used within create_or_update and friends
-        return self.group.get_score()
-
-    def prepare_database_save(self, unused):
-        return self
-
-    def prepare(self, evaluator, query, allow_joins):
-        return
-
-    def evaluate(self, node, qn, connection):
-        engine = get_db_engine(getattr(connection, 'alias', 'default'))
-        if engine.startswith('postgresql'):
-            sql = 'log(times_seen) * 600 + last_seen::abstime::int'
-        elif engine.startswith('mysql'):
-            sql = 'log(times_seen) * 600 + unix_timestamp(last_seen)'
-        else:
-            # XXX: if we cant do it atomically let's do it the best we can
-            sql = int(self)
+try:
+    from django.db.models import Func
+except ImportError:
+    # XXX(dramer): compatibility hack for Django 1.6
+    class ScoreClause(object):
+        def __init__(self, group, *args, **kwargs):
+            self.group = group
+            super(ScoreClause, self).__init__(*args, **kwargs)
+
+        def __int__(self):
+            # Calculate the score manually when coercing to an int.
+            # This is used within create_or_update and friends
+            return self.group.get_score()
+
+        def prepare_database_save(self, unused):
+            return self
+
+        def prepare(self, evaluator, query, allow_joins):
+            return
+
+        def evaluate(self, node, qn, connection):
+            engine = get_db_engine(getattr(connection, 'alias', 'default'))
+            if engine.startswith('postgresql'):
+                sql = 'log(times_seen) * 600 + last_seen::abstime::int'
+            elif engine.startswith('mysql'):
+                sql = 'log(times_seen) * 600 + unix_timestamp(last_seen)'
+            else:
+                # XXX: if we cant do it atomically let's do it the best we can
+                sql = int(self)
+
+            return (sql, [])
+
+        @classmethod
+        def calculate(cls, times_seen, last_seen):
+            return math.log(times_seen) * 600 + float(last_seen.strftime('%s'))
+else:
+    # XXX(dramer): compatibility hack for Django 1.8+
+    class ScoreClause(Func):
+        def __init__(self, group, *args, **kwargs):
+            self.group = group
+            super(ScoreClause, self).__init__(*args, **kwargs)
+
+        def __int__(self):
+            # Calculate the score manually when coercing to an int.
+            # This is used within create_or_update and friends
+            return self.group.get_score()
+
+        def as_sql(self, compiler, connection, function=None, template=None):
+            engine = get_db_engine(getattr(connection, 'alias', 'default'))
+            if engine.startswith('postgresql'):
+                sql = 'log(times_seen) * 600 + last_seen::abstime::int'
+            elif engine.startswith('mysql'):
+                sql = 'log(times_seen) * 600 + unix_timestamp(last_seen)'
+            else:
+                # XXX: if we cant do it atomically let's do it the best we can
+                sql = int(self)
 
-        return (sql, [])
+            return (sql, [])
 
-    @classmethod
-    def calculate(cls, times_seen, last_seen):
-        return math.log(times_seen) * 600 + float(last_seen.strftime('%s'))
+        @classmethod
+        def calculate(cls, times_seen, last_seen):
+            return math.log(times_seen) * 600 + float(last_seen.strftime('%s'))
 
 
 class InvalidTimestamp(Exception):
diff --git a/src/sentry/plugins/sentry_mail/activity/release.py b/src/sentry/plugins/sentry_mail/activity/release.py
index bbb4afe51c..855e370ef0 100644
--- a/src/sentry/plugins/sentry_mail/activity/release.py
+++ b/src/sentry/plugins/sentry_mail/activity/release.py
@@ -46,14 +46,14 @@ class ReleaseActivityEmail(ActivityEmail):
                 ).select_related('commit', 'commit__author')
             ]
             repos = {
-                r['id']: {
-                    'name': r['name'],
+                r_id: {
+                    'name': r_name,
                     'commits': [],
                 }
-                for r in Repository.objects.filter(
+                for r_id, r_name in Repository.objects.filter(
                     organization_id=self.project.organization_id,
                     id__in={c.repository_id for c in self.commit_list}
-                ).values('id', 'name')
+                ).values_list('id', 'name')
             }
 
             self.email_list = set([c.author.email for c in self.commit_list if c.author])
@@ -82,18 +82,15 @@ class ReleaseActivityEmail(ActivityEmail):
                 id=self.deploy.environment_id
             ).name or 'Default Environment'
 
-            self.group_counts_by_project = {
-                row['project']: row['num_groups']
-                for row in Group.objects.filter(
-                    project__in=self.projects,
-                    id__in=GroupLink.objects.filter(
-                        linked_type=GroupLink.LinkedType.commit,
-                        linked_id__in=ReleaseCommit.objects.filter(
-                            release=self.release,
-                        ).values_list('commit_id', flat=True),
-                    ).values_list('group_id', flat=True),
-                ).values('project').annotate(num_groups=Count('id'))
-            }
+            self.group_counts_by_project = dict(Group.objects.filter(
+                project__in=self.projects,
+                id__in=GroupLink.objects.filter(
+                    linked_type=GroupLink.LinkedType.commit,
+                    linked_id__in=ReleaseCommit.objects.filter(
+                        release=self.release,
+                    ).values_list('commit_id', flat=True),
+                ).values_list('group_id', flat=True),
+            ).values_list('project').annotate(num_groups=Count('id')))
 
     def should_email(self):
         return bool(self.release and self.deploy)
@@ -152,9 +149,9 @@ class ReleaseActivityEmail(ActivityEmail):
             user_teams = defaultdict(list)
             queryset = User.objects.filter(
                 sentry_orgmember_set__organization_id=self.organization.id
-            ).values('id', 'sentry_orgmember_set__teams')
-            for user_team in queryset:
-                user_teams[user_team['id']].append(user_team['sentry_orgmember_set__teams'])
+            ).values_list('id', 'sentry_orgmember_set__teams')
+            for user_id, team_id in queryset:
+                user_teams[user_id].append(team_id)
             self.user_id_team_lookup = user_teams
         return self.user_id_team_lookup
 
diff --git a/src/sentry/runner/importer.py b/src/sentry/runner/importer.py
index 47e5f58d76..8db5b6a482 100644
--- a/src/sentry/runner/importer.py
+++ b/src/sentry/runner/importer.py
@@ -59,7 +59,7 @@ class Importer(object):
 
     def _load_module(self, fullname):
         if self.default_settings:
-            from django.utils.importlib import import_module
+            from importlib import import_module
             default_settings_mod = import_module(self.default_settings)
         else:
             default_settings_mod = None
@@ -110,7 +110,8 @@ def install_plugin_apps(entry_point, settings):
     from pkg_resources import iter_entry_points
     installed_apps = list(settings.INSTALLED_APPS)
     for ep in iter_entry_points(entry_point):
-        installed_apps.append(ep.module_name)
+        if ep.module_name not in installed_apps:
+            installed_apps.append(ep.module_name)
     settings.INSTALLED_APPS = tuple(installed_apps)
 
 
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index 2eae8d5a34..5e7c6c8563 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -266,8 +266,6 @@ def initialize_app(config, skip_service_validation=False):
 
     apply_legacy_settings(settings)
 
-    bind_cache_to_option_store()
-
     # Commonly setups don't correctly configure themselves for production envs
     # so lets try to provide a bit more guidance
     if settings.CELERY_ALWAYS_EAGER and not settings.DEBUG:
@@ -301,6 +299,13 @@ def initialize_app(config, skip_service_validation=False):
         version=settings.ASSET_VERSION,
     )
 
+    import django
+    if hasattr(django, 'setup'):
+        # support for Django 1.7+
+        django.setup()
+
+    bind_cache_to_option_store()
+
     register_plugins(settings)
 
     initialize_receivers()
diff --git a/src/sentry/tagstore/v2/backend.py b/src/sentry/tagstore/v2/backend.py
index 9dbd87d178..068d9d7a06 100644
--- a/src/sentry/tagstore/v2/backend.py
+++ b/src/sentry/tagstore/v2/backend.py
@@ -719,14 +719,7 @@ class V2TagStorage(TagStorage):
                     """
                 SELECT *
                 FROM (
-                    SELECT tagstore_grouptagvalue.id,
-                           tagstore_grouptagvalue.project_id,
-                           tagstore_grouptagvalue.group_id,
-                           tagstore_grouptagvalue.times_seen,
-                           tagstore_grouptagvalue.key_id,
-                           tagstore_grouptagvalue.value_id,
-                           tagstore_grouptagvalue.last_seen,
-                           tagstore_grouptagvalue.first_seen
+                    SELECT tagstore_grouptagvalue.*
                     FROM tagstore_grouptagvalue
                     INNER JOIN tagstore_tagkey
                     ON (tagstore_grouptagvalue.key_id = tagstore_tagkey.id)
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index 9d51e29821..8d4e770054 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -148,6 +148,9 @@ def pytest_configure(config):
     patcher = mock.patch('socket.getfqdn', return_value='localhost')
     patcher.start()
 
+    if not settings.SOUTH_TESTS_MIGRATE:
+        settings.INSTALLED_APPS = tuple(i for i in settings.INSTALLED_APPS if i != 'south')
+
     from sentry.runner.initializer import (
         bootstrap_options, configure_structlog, initialize_receivers, fix_south,
         bind_cache_to_option_store, setup_services
