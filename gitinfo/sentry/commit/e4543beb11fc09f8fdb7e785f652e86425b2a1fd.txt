commit e4543beb11fc09f8fdb7e785f652e86425b2a1fd
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue May 21 13:33:15 2019 -0700

    feat(ui): Allow UI to create incident comments [SEN-581] (#13297)
    
    Note this only allows creation for comments in Incidents, it will not render afterwards
    Requires https://github.com/getsentry/sentry/pull/13294 to render
    Fixes SEN-581

diff --git a/src/sentry/static/sentry/app/actionCreators/incident.jsx b/src/sentry/static/sentry/app/actionCreators/incident.jsx
index 48eaa13257..9c9072810f 100644
--- a/src/sentry/static/sentry/app/actionCreators/incident.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/incident.jsx
@@ -51,13 +51,23 @@ export async function fetchIncidentActivities(api, orgId, incidentId) {}
 /**
  * Creates a note for an incident
  */
-export async function createIncidentNote(api, incidentId, note) {
+export async function createIncidentNote(api, orgId, incidentId, note) {
   addLoadingMessage(t('Posting comment...'));
 
   try {
-    // TODO: Implement me
+    const result = await api.requestPromise(
+      `/organizations/${orgId}/incidents/${incidentId}/comments/`,
+      {
+        method: 'POST',
+        data: {
+          comment: note.text,
+        },
+      }
+    );
 
     clearIndicators();
+
+    return result;
   } catch (err) {
     addErrorMessage(t('Unable to post comment'));
     throw err;
diff --git a/src/sentry/static/sentry/app/components/activity/item/index.jsx b/src/sentry/static/sentry/app/components/activity/item/index.jsx
index ed1732447a..fa125522d5 100644
--- a/src/sentry/static/sentry/app/components/activity/item/index.jsx
+++ b/src/sentry/static/sentry/app/components/activity/item/index.jsx
@@ -20,7 +20,7 @@ class ActivityItem extends React.Component {
     /**
      * If supplied, will show the time since this date
      */
-    date: PropTypes.string,
+    date: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.string]),
 
     /**
      * Used to render an avatar for the author. Currently can be a user, otherwise
diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index 72babba996..6d5833036b 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -440,6 +440,15 @@ export const Activity = PropTypes.shape({
   }),
 });
 
+export const IncidentActivity = PropTypes.shape({
+  id: PropTypes.string.isRequired,
+  type: PropTypes.number.isRequired,
+  dateCreated: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.string])
+    .isRequired,
+  user: User,
+  comment: PropTypes.string,
+});
+
 export const GlobalSelection = PropTypes.shape({
   projects: PropTypes.arrayOf(PropTypes.number),
   environments: PropTypes.arrayOf(PropTypes.string),
@@ -975,6 +984,7 @@ const SentryTypes = {
   GlobalSelection,
   Group,
   Incident,
+  IncidentActivity,
   Tag,
   Monitor,
   PageLinks,
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/activity.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/activity.jsx
index 5a1b337abc..e08d271dc4 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/details/activity.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/activity.jsx
@@ -4,6 +4,7 @@ import React from 'react';
 import moment from 'moment';
 import styled from 'react-emotion';
 
+import {INCIDENT_ACTIVITY_TYPE} from 'app/views/organizationIncidents/utils';
 import {
   createIncidentNote,
   deleteIncidentNote,
@@ -43,11 +44,15 @@ class Activity extends React.Component {
     loading: PropTypes.bool,
     error: PropTypes.bool,
     me: SentryTypes.User,
-    activities: PropTypes.arrayOf(SentryTypes.Activity),
+    activities: PropTypes.arrayOf(SentryTypes.IncidentActivity),
+
+    createError: PropTypes.bool,
+    createBusy: PropTypes.bool,
+    createErrorJSON: PropTypes.object,
+    onCreateNote: PropTypes.func.isRequired,
   };
 
   state = {
-    createBusy: false,
     updateBusy: false,
     requestError: false,
     errorJSON: null,
@@ -58,30 +63,9 @@ class Activity extends React.Component {
    * This can be abstracted a bit if we create more objects that can have activities
    */
   handleCreateNote = async note => {
-    const {api, incidentId} = this.props;
-
-    this.setState({
-      createBusy: true,
-    });
-
-    try {
-      await createIncidentNote(api, incidentId, note);
-
-      this.setState({
-        createBusy: false,
+    const {onCreateNote} = this.props;
 
-        // This is used as a `key` to Note Input so that after successful post
-        // we reset the value of the input
-        inputId: uniqueId(),
-      });
-    } catch (error) {
-      // TODO: Optimistic update
-      this.setState({
-        createBusy: false,
-        requestError: true,
-        errorJSON: error.responseJSON || makeDefaultErrorJson(),
-      });
-    }
+    onCreateNote(note);
   };
 
   handleDeleteNote = async item => {
@@ -117,13 +101,22 @@ class Activity extends React.Component {
   };
 
   render() {
-    const {loading, error, me, incidentId, activities} = this.props;
+    const {
+      loading,
+      error,
+      me,
+      incidentId,
+      activities,
+      createBusy,
+      createError,
+      createErrorJSON,
+    } = this.props;
+
     const noteProps = {
       memberList: [],
       teams: [],
       minHeight: 80,
     };
-
     const activitiesByDate = groupBy(activities, ({dateCreated}) =>
       moment(dateCreated).format('ll')
     );
@@ -137,9 +130,9 @@ class Activity extends React.Component {
               storageKey="incidentIdinput"
               itemKey={incidentId}
               onCreate={this.handleCreateNote}
-              busy={this.state.createBusy}
-              error={this.state.requestError}
-              errorJSON={this.state.errorJSON}
+              busy={createBusy}
+              error={createError}
+              errorJSON={createErrorJSON}
               placeholder={t(
                 'Leave a comment, paste a tweet, or link any other relevant information about this Incident...'
               )}
@@ -177,7 +170,7 @@ class Activity extends React.Component {
                   activitiesForDate.map(activity => {
                     const authorName = activity.user ? activity.user.name : 'Sentry';
 
-                    if (activity.type === 'note') {
+                    if (activity.type === INCIDENT_ACTIVITY_TYPE.COMMENT) {
                       return (
                         <ErrorBoundary mini key={`note-${activity.id}`}>
                           <Note
@@ -229,6 +222,9 @@ class ActivityContainer extends React.Component {
   state = {
     loading: true,
     error: false,
+    createBusy: false,
+    createError: false,
+    activities: null,
   };
 
   componentDidMount() {
@@ -247,8 +243,58 @@ class ActivityContainer extends React.Component {
     }
   }
 
+  handleCreateNote = async note => {
+    const {api, params} = this.props;
+    const {incidentId, orgId} = params;
+
+    this.setState({
+      createBusy: true,
+    });
+
+    const newActivity = {
+      comment: note.text,
+      type: INCIDENT_ACTIVITY_TYPE.COMMENT,
+      dateCreated: new Date(),
+      user: ConfigStore.get('user'),
+      id: uniqueId(),
+      incidentIdentifier: incidentId,
+    };
+
+    this.setState(state => ({
+      createBusy: false,
+
+      activities: [newActivity, ...(state.activities || [])],
+    }));
+
+    try {
+      const newNote = await createIncidentNote(api, orgId, incidentId, note);
+
+      this.setState(state => {
+        const activities = [
+          newNote,
+          ...state.activities.filter(activity => activity !== newActivity),
+        ];
+
+        return {
+          createBusy: false,
+          activities,
+        };
+      });
+    } catch (error) {
+      this.setState(state => {
+        const activities = state.activities.filter(activity => activity !== newActivity);
+
+        return {
+          activities,
+          createBusy: false,
+          createError: true,
+          createErrorJSON: error.responseJSON || makeDefaultErrorJson(),
+        };
+      });
+    }
+  };
+
   render() {
-    const {loading, error, activities} = this.state;
     const {api, params, ...props} = this.props;
     const {incidentId, orgId} = params;
     const me = ConfigStore.get('user');
@@ -257,11 +303,10 @@ class ActivityContainer extends React.Component {
       <Activity
         incidentId={incidentId}
         orgId={orgId}
-        loading={loading}
-        error={error}
         me={me}
-        activities={activities}
         api={api}
+        {...this.state}
+        onCreateNote={this.handleCreateNote}
         {...props}
       />
     );
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/utils.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/utils.jsx
index 985a765191..e82a5716b7 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/utils.jsx
@@ -4,6 +4,13 @@ export const INCIDENT_STATUS = {
   CLOSED: 2,
 };
 
+export const INCIDENT_ACTIVITY_TYPE = {
+  CREATED: 0,
+  DETECTED: 1,
+  STATUS_CHANGE: 2,
+  COMMENT: 3,
+};
+
 export function fetchIncident(api, orgId, incidentId) {
   return api.requestPromise(`/organizations/${orgId}/incidents/${incidentId}/`);
 }
diff --git a/tests/js/fixtures/incidentActivity.jsx b/tests/js/fixtures/incidentActivity.jsx
new file mode 100644
index 0000000000..516b0f319b
--- /dev/null
+++ b/tests/js/fixtures/incidentActivity.jsx
@@ -0,0 +1,13 @@
+import {User} from 'app-test/fixtures/user';
+
+export function IncidentActivity(params) {
+  return {
+    comment: 'incident activity comment',
+    type: 3,
+    dateCreated: new Date(),
+    user: User(),
+    id: '123',
+    incidentIdentifier: '999',
+    ...params,
+  };
+}
diff --git a/tests/js/spec/views/organizationIncidents/details/activity.spec.jsx b/tests/js/spec/views/organizationIncidents/details/activity.spec.jsx
index b3acdca1fa..7487ac3780 100644
--- a/tests/js/spec/views/organizationIncidents/details/activity.spec.jsx
+++ b/tests/js/spec/views/organizationIncidents/details/activity.spec.jsx
@@ -1,12 +1,13 @@
-// import React from 'react';
-// import {mount} from 'enzyme';
+import React from 'react';
+import {mount} from 'enzyme';
 
-// import {initializeOrg} from 'app-test/helpers/initializeOrg';
-// import IncidentActivity from 'app/views/organizationIncidents/details/activity';
+import {initializeOrg} from 'app-test/helpers/initializeOrg';
+import IncidentActivity from 'app/views/organizationIncidents/details/activity';
+import changeReactMentionsInput from 'app-test/helpers/changeReactMentionsInput';
 
-describe('IncidentDetails', function() {
-  // const incident = TestStubs.Incident();
-  // const {organization, routerContext} = initializeOrg();
+describe('IncidentDetails -> Activity', function() {
+  const incident = TestStubs.Incident();
+  const {organization, routerContext} = initializeOrg();
 
   beforeAll(function() {});
 
@@ -14,17 +15,40 @@ describe('IncidentDetails', function() {
     MockApiClient.clearMockResponses();
   });
 
-  // const createWrapper = props =>
-  // mount(
-  // <IncidentActivity
-  // params={{incidentId: incident.id, orgId: organization.slug}}
-  // {...props}
-  // />,
-  // routerContext
-  // );
+  const createWrapper = props =>
+    mount(
+      <IncidentActivity
+        params={{incidentId: incident.identifier, orgId: organization.slug}}
+        {...props}
+      />,
+      routerContext
+    );
 
   it.todo('fetches and renders activities');
-  it.todo('creates a new note');
+  it('creates a new note', async function() {
+    const createNote = MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/incidents/${
+        incident.identifier
+      }/comments/`,
+      method: 'POST',
+      body: TestStubs.IncidentActivity({
+        comment: 'new incident comment',
+      }),
+    });
+
+    const wrapper = createWrapper();
+
+    changeReactMentionsInput(wrapper, 'new incident comment');
+    // wrapper.find('NoteInput Button[type="submit"]').simulate('click');
+    wrapper.find('textarea').simulate('keyDown', {key: 'Enter', ctrlKey: true});
+
+    await tick();
+    expect(createNote).toHaveBeenCalledWith(
+      `/organizations/${organization.slug}/incidents/${incident.identifier}/comments/`,
+      expect.objectContaining({data: {comment: 'new incident comment'}})
+    );
+  });
+
   it.todo('fails to create a new note');
   it.todo('updates an existing note');
   it.todo('fails to update an existing note');
