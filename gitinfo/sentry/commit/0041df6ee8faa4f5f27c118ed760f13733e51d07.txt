commit 0041df6ee8faa4f5f27c118ed760f13733e51d07
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 22 16:57:04 2016 -0700

    Break up contexts into individual components

diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 7902c53b18..8cf74d82ab 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -9,7 +9,10 @@ from sentry.models import Event, EventError
 
 @register(Event)
 class EventSerializer(Serializer):
-    _reserved_keys = frozenset(['sentry.interfaces.User', 'sdk', 'device'])
+    _reserved_keys = frozenset([
+        'sentry.interfaces.User', 'sdk', 'device',
+        'contexts'
+    ])
 
     def _get_entries(self, event, user, is_public=False):
         # XXX(dcramer): These are called entries for future-proofing
@@ -43,6 +46,13 @@ class EventSerializer(Serializer):
                 user_data = user_interface.to_json()
             else:
                 user_data = None
+
+            contexts_interface = item.interfaces.get('contexts')
+            if contexts_interface:
+                contexts_data = contexts_interface.to_json()
+            else:
+                contexts_data = {}
+
             device_interface = item.interfaces.get('device')
             if device_interface:
                 device_data = device_interface.to_json()
@@ -58,6 +68,7 @@ class EventSerializer(Serializer):
             results[item] = {
                 'entries': self._get_entries(item, user, is_public=is_public),
                 'user': user_data,
+                'contexts': contexts_data,
                 'sdk': sdk_data,
                 'device': device_data,
             }
@@ -114,6 +125,7 @@ class EventSerializer(Serializer):
             # See GH-3248
             'message': obj.get_legacy_message(),
             'user': attrs['user'],
+            'contexts': attrs['contexts'],
             'sdk': attrs['sdk'],
             'device': attrs['device'],
             'context': obj.data.get('extra', {}),
@@ -138,6 +150,7 @@ class SharedEventSerializer(EventSerializer):
     def serialize(self, obj, attrs, user):
         result = super(SharedEventSerializer, self).serialize(obj, attrs, user)
         del result['context']
+        del result['contexts']
         del result['user']
         del result['tags']
         return result
diff --git a/src/sentry/static/sentry/app/components/events/contexts.jsx b/src/sentry/static/sentry/app/components/events/contexts.jsx
new file mode 100644
index 0000000000..fb9c2f640b
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts.jsx
@@ -0,0 +1,55 @@
+import React from 'react';
+
+import GroupEventDataSection from './eventDataSection';
+import {toTitleCase} from '../../utils';
+
+const CONTEXT_TYPES = {
+  'default': require('./contexts/default'),
+  'device': require('./contexts/device'),
+  'os': require('./contexts/os'),
+  'runtime': require('./contexts/runtime'),
+};
+
+
+const ContextsInterface = React.createClass({
+  propTypes: {
+    event: React.PropTypes.object.isRequired,
+    group: React.PropTypes.object.isRequired
+  },
+
+  render() {
+    let group = this.props.group;
+    let evt = this.props.event;
+    let rv = [];
+    for (let key in evt.contexts) {
+      let value = evt.contexts[key];
+      let Component = CONTEXT_TYPES[value.type] || CONTEXT_TYPES.default;
+
+      let title = (
+        <div>
+          <h3>
+            <strong>{value.title || toTitleCase(key)}</strong>
+            <small> ({key})</small>
+          </h3>
+        </div>
+      );
+
+      rv.push((
+        <GroupEventDataSection
+            className="context-box"
+            group={group}
+            event={evt}
+            key={key}
+            type={`${key}-context`}
+            wrapTitle={false}
+            title={title}>
+          <Component alias={key} data={value} />
+        </GroupEventDataSection>
+
+      ));
+    }
+    return <div>{rv}</div>;
+  },
+});
+
+export default ContextsInterface;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/contexts/contextBlock.jsx b/src/sentry/static/sentry/app/components/events/contexts/contextBlock.jsx
similarity index 73%
rename from src/sentry/static/sentry/app/components/events/interfaces/contexts/contextBlock.jsx
rename to src/sentry/static/sentry/app/components/events/contexts/contextBlock.jsx
index dbed31eff1..0de06d3dc8 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/contexts/contextBlock.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/contextBlock.jsx
@@ -1,8 +1,8 @@
 import React from 'react';
 import _ from 'underscore';
 
-import {defined} from '../../../../utils';
-import KeyValueList from '../keyValueList';
+import {defined} from '../../../utils';
+import KeyValueList from '../interfaces/keyValueList';
 
 
 const ContextBlock = React.createClass({
@@ -16,16 +16,6 @@ const ContextBlock = React.createClass({
   render() {
     let data = [];
     let className = `context-block context-block-${this.props.data.type}`;
-    let title = this.props.title || this.props.data.title;
-    let alias = null;
-
-    if (!title) {
-      title = this.props.alias;
-    } else {
-      alias = (
-        <small>{' ('}{this.props.alias})</small>
-      );
-    }
 
     (this.props.knownData || []).forEach(([key, value]) => {
       if (defined(value)) {
@@ -46,7 +36,6 @@ const ContextBlock = React.createClass({
 
     return (
       <div className={className}>
-        <h4>{title}{alias}</h4>
         <KeyValueList data={data} isSorted={false} />
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/contexts/default.jsx b/src/sentry/static/sentry/app/components/events/contexts/default.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/components/events/interfaces/contexts/default.jsx
rename to src/sentry/static/sentry/app/components/events/contexts/default.jsx
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/contexts/device.jsx b/src/sentry/static/sentry/app/components/events/contexts/device.jsx
similarity index 90%
rename from src/sentry/static/sentry/app/components/events/interfaces/contexts/device.jsx
rename to src/sentry/static/sentry/app/components/events/contexts/device.jsx
index 009cb6ebac..951c316df0 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/contexts/device.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/device.jsx
@@ -18,8 +18,7 @@ const DeviceContextType = React.createClass({
           ['Model', model + (model_id ? ` (${model_id})` : '')],
           ['Architecture', arch]
         ]}
-        alias={this.props.alias}
-        title="Device" />
+        alias={this.props.alias} />
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/contexts/os.jsx b/src/sentry/static/sentry/app/components/events/contexts/os.jsx
similarity index 89%
rename from src/sentry/static/sentry/app/components/events/interfaces/contexts/os.jsx
rename to src/sentry/static/sentry/app/components/events/contexts/os.jsx
index 18a74fb28e..c761850c6f 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/contexts/os.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/os.jsx
@@ -18,8 +18,7 @@ const OsContextType = React.createClass({
           ['Version', version + (build ? ` (${build})` : '')],
           ['Kernel Version', kernel_version],
         ]}
-        alias={this.props.alias}
-        title="Operating System" />
+        alias={this.props.alias} />
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/contexts/runtime.jsx b/src/sentry/static/sentry/app/components/events/contexts/runtime.jsx
similarity index 89%
rename from src/sentry/static/sentry/app/components/events/interfaces/contexts/runtime.jsx
rename to src/sentry/static/sentry/app/components/events/contexts/runtime.jsx
index 98da504f45..9e0dc0d061 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/contexts/runtime.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/runtime.jsx
@@ -17,8 +17,7 @@ const RuntimeContextType = React.createClass({
           ['Name', name],
           ['Version', version + (build ? ` (${build})` : '')],
         ]}
-        alias={this.props.alias}
-        title="Runtime" />
+        alias={this.props.alias} />
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index 8a49891d93..1dd7834468 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -1,6 +1,7 @@
 import React from 'react';
 
 import {logException} from '../../utils/logging';
+import EventContexts from './contexts';
 import EventDataSection from './eventDataSection';
 import EventErrors from './errors';
 import EventExtraData from './extraData';
@@ -44,7 +45,6 @@ const EventEntries = React.createClass({
     template: require('./interfaces/template'),
     csp: require('./interfaces/csp'),
     breadcrumbs: require('./interfaces/breadcrumbs'),
-    contexts: require('./interfaces/contexts'),
   },
 
   render() {
@@ -106,6 +106,11 @@ const EventEntries = React.createClass({
             group={group}
             event={evt} />
         }
+        {!utils.objectIsEmpty(evt.contexts) &&
+          <EventContexts
+            group={group}
+            event={evt} />
+        }
         {entries}
         {!utils.objectIsEmpty(evt.context) &&
           <EventExtraData
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/contexts.jsx b/src/sentry/static/sentry/app/components/events/interfaces/contexts.jsx
deleted file mode 100644
index 02c93da06d..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/contexts.jsx
+++ /dev/null
@@ -1,67 +0,0 @@
-import React from 'react';
-
-import GroupEventDataSection from '../eventDataSection';
-import PropTypes from '../../../proptypes';
-
-
-const CONTEXT_TYPES = {
-  'default': require('./contexts/default'),
-  'device': require('./contexts/device'),
-  'os': require('./contexts/os'),
-  'runtime': require('./contexts/runtime'),
-};
-
-
-const ContextsInterface = React.createClass({
-  propTypes: {
-    group: PropTypes.Group.isRequired,
-    event: PropTypes.Event.isRequired,
-    type: React.PropTypes.string.isRequired,
-    data: React.PropTypes.object.isRequired,
-    isShare: React.PropTypes.bool
-  },
-
-  contextTypes: {
-    organization: PropTypes.Organization,
-    project: PropTypes.Project
-  },
-
-  renderContextData() {
-    let rv = [];
-    for (let key in this.props.data) {
-      let value = this.props.data[key];
-      let Component = CONTEXT_TYPES[value.type] || CONTEXT_TYPES.default;
-      rv.push(
-        <Component key={key} alias={key} data={value}/>
-      );
-    }
-    return rv;
-  },
-
-  render() {
-    let group = this.props.group;
-    let evt = this.props.event;
-
-    let title = (
-      <div>
-        <h3>
-          <strong>{'Context'}</strong>
-        </h3>
-      </div>
-    );
-
-    return (
-      <GroupEventDataSection
-          className="context-box"
-          group={group}
-          event={evt}
-          type={this.props.type}
-          title={title}
-          wrapTitle={false}>
-        {this.renderContextData()}
-      </GroupEventDataSection>
-    );
-  }
-});
-
-export default ContextsInterface;
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 4ac16de751..6ef0b30029 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1578,22 +1578,6 @@ pre.val, span.val {
   }
 }
 
-/**
-* Context
-* ============================================================================
-*/
-.context-block {
-  .well;
-
-  table.key-value {
-    background: transparent;
-    margin-bottom: 0;
-    pre {
-      background: white;
-    }
-  }
-}
-
 /**
 * Breadcrumbs / Timeline
 * ============================================================================
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 692237e9d8..6fe8bdba72 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -396,77 +396,6 @@ pre.plain {
   color: @gray;
 }
 
-table.vars {
-  margin-bottom: 0;
-  border: 0;
-
-  th, td {
-    border: none;
-    padding: 5px 8px;
-    word-break: break-all;
-    border: 1px solid #E9EBEC !important;
-  }
-
-  td .btn, th .btn {
-    white-space: nowrap
-  }
-
-  td.values, td.code {
-    overflow: hidden;
-
-    > pre {
-      background-color: inherit;
-      padding: 0;
-      border: 0;
-      margin-bottom: 0;
-    }
-  }
-}
-
-table.table.vars {
-  margin-top: -5px;
-  border-radius: 0;
-
-  tr:first-child > td, tr:first-child > th {
-    border-top: 0 !important;
-  }
-
-  td, th {
-    padding: 12px 0 !important;
-    border: 0;
-    vertical-align: top !important;
-    border: 0 !important;
-    border-top: 1px solid #f1f2f3 !important;
-    border-radius: 0 !important;
-  }
-  td table {
-    border-top: 0;
-    margin-top: -12px;
-    margin-bottom: -10px;
-  }
-  thead th,
-  thead td {
-    background-color: #fff !important;
-  }
-  tbody > tr:nth-child(odd) > td,
-  tbody > tr:nth-child(odd) > th {
-    background-color: #fff;
-  }
-  tbody > tr:nth-child(even) > td,
-  tbody > tr:nth-child(even) > th {
-    background-color: #fff;
-  }
-}
-
-table.vars .toggle-expand {
-  border-top: 0 !important;
-  padding-top: 2px !important;
-
-  .btn {
-    background: rgba(0,0,0, .02);
-  }
-}
-
 table.table.key-value {
   border: none;
 
