commit 872ddd947f6929bec56efbaa86d4ea0a81ef56ec
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Dec 3 09:53:44 2014 -0800

    Ensure auto resolve marks items as regressions

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index e9ee9e83d9..7c302347c3 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -20,8 +20,7 @@ from uuid import uuid4
 
 from sentry.app import buffer, tsdb
 from sentry.constants import (
-    STATUS_RESOLVED, STATUS_UNRESOLVED, LOG_LEVELS,
-    DEFAULT_LOGGER_NAME, MAX_CULPRIT_LENGTH
+    STATUS_UNRESOLVED, LOG_LEVELS, DEFAULT_LOGGER_NAME, MAX_CULPRIT_LENGTH
 )
 from sentry.models import Event, EventMapping, Group, GroupHash, Project
 from sentry.plugins import plugins
@@ -482,7 +481,6 @@ class EventManager(object):
             # Making things atomic
             is_regression = bool(Group.objects.filter(
                 id=group.id,
-                status=STATUS_RESOLVED,
             ).exclude(
                 active_at__gte=date,
             ).update(active_at=date, status=STATUS_UNRESOLVED))
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index 53cabf168a..c4a939a729 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -111,7 +111,6 @@ class EventManagerTest(TestCase):
             timestamp=1403007314,
         ))
         event = manager.save(1)
-        print(event)
 
         group = Group.objects.get(id=event.group_id)
         group.status = STATUS_RESOLVED
@@ -155,6 +154,29 @@ class EventManagerTest(TestCase):
         group = Group.objects.get(id=group.id)
         assert group.is_resolved()
 
+    @patch('sentry.models.Group.is_resolved')
+    def test_unresolves_group_with_auto_resolve(self, mock_is_resolved):
+        # N.B. EventManager won't unresolve the group unless the event2 has a
+        # later timestamp than event1. MySQL doesn't support microseconds.
+
+        mock_is_resolved.return_value = False
+        manager = EventManager(self.make_event(
+            event_id='a' * 32, checksum='a' * 32,
+            timestamp=1403007314,
+        ))
+        event = manager.save(1)
+
+        mock_is_resolved.return_value = True
+        manager = EventManager(self.make_event(
+            event_id='b' * 32, checksum='a' * 32,
+            timestamp=1403007315,
+        ))
+        event2 = manager.save(1)
+        assert event.group_id == event2.group_id
+
+        group = Group.objects.get(id=event.group.id)
+        assert group.active_at == event2.datetime
+
     def test_long_culprit(self):
         manager = EventManager(self.make_event(
             culprit='x' * (MAX_CULPRIT_LENGTH + 1),
