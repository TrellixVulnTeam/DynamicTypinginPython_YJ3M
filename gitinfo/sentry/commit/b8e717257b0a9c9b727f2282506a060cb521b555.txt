commit b8e717257b0a9c9b727f2282506a060cb521b555
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Thu Mar 7 13:44:56 2019 -0800

    feat(app-platform): Add endpoint for install external requests (#12315)
    
    * feat(app-platform): Add endpoint for Sentry App Install external requests

diff --git a/src/sentry/api/endpoints/sentry_app_installation_external_requests.py b/src/sentry/api/endpoints/sentry_app_installation_external_requests.py
new file mode 100644
index 0000000000..ad19e6ad9e
--- /dev/null
+++ b/src/sentry/api/endpoints/sentry_app_installation_external_requests.py
@@ -0,0 +1,38 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry import features
+from sentry.api.bases import SentryAppInstallationBaseEndpoint
+from sentry.mediators import external_requests
+from sentry.models import Project
+
+
+class SentryAppInstallationExternalRequestsEndpoint(SentryAppInstallationBaseEndpoint):
+    def get(self, request, installation):
+        if not features.has('organizations:sentry-apps',
+                            installation.organization,
+                            actor=request.user):
+            return Response(status=404)
+
+        try:
+            project = Project.objects.get(
+                id=request.GET.get('projectId'),
+                organization_id=installation.organization_id,
+            )
+        except Project.DoesNotExist:
+            project = None
+
+        kwargs = {
+            'install': installation,
+            'uri': request.GET.get('uri'),
+        }
+        if project:
+            kwargs.update({'project': project})
+
+        try:
+            choices = external_requests.SelectRequester.run(**kwargs)
+        except Exception:
+            return Response({'error': 'Error communicating with Sentry App service'}, status=400)
+
+        return Response(choices)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 7db253aa3a..49f38022e9 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -113,6 +113,7 @@ from .endpoints.organization_user_reports import OrganizationUserReportsEndpoint
 from .endpoints.organization_users import OrganizationUsersEndpoint
 from .endpoints.sentry_app_installations import SentryAppInstallationsEndpoint
 from .endpoints.sentry_app_installation_details import SentryAppInstallationDetailsEndpoint
+from .endpoints.sentry_app_installation_external_requests import SentryAppInstallationExternalRequestsEndpoint
 from .endpoints.organization_stats import OrganizationStatsEndpoint
 from .endpoints.organization_teams import OrganizationTeamsEndpoint
 from .endpoints.organization_user_issues import OrganizationUserIssuesEndpoint
@@ -717,6 +718,11 @@ urlpatterns = patterns(
         SentryAppInstallationDetailsEndpoint.as_view(),
         name='sentry-api-0-sentry-app-installation-details'
     ),
+    url(
+        r'^sentry-app-installations/(?P<uuid>[^\/]+)/external-requests/$',
+        SentryAppInstallationExternalRequestsEndpoint.as_view(),
+        name='sentry-api-0-sentry-app-installation-external-requests'
+    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/sentry-apps/$',
         OrganizationSentryAppsEndpoint.as_view(),
diff --git a/src/sentry/mediators/external_requests/select_requester.py b/src/sentry/mediators/external_requests/select_requester.py
index 7400e471e1..2ff77a1dba 100644
--- a/src/sentry/mediators/external_requests/select_requester.py
+++ b/src/sentry/mediators/external_requests/select_requester.py
@@ -26,7 +26,7 @@ class SelectRequester(Mediator):
     """
 
     install = Param('sentry.models.SentryAppInstallation')
-    project = Param('sentry.models.Project')
+    project = Param('sentry.models.Project', required=False)
     uri = Param(six.string_types)
 
     def call(self):
@@ -35,10 +35,10 @@ class SelectRequester(Mediator):
     def _build_url(self):
         domain = urlparse(self.sentry_app.webhook_url).netloc
         url = u'https://{}{}'.format(domain, self.uri)
-        url += '?' + urlencode({
-            'installationId': self.install.uuid,
-            'projectSlug': self.project.slug,
-        })
+        params = {'installationId': self.install.uuid}
+        if self.project:
+            params['projectSlug'] = self.project.slug
+        url += '?' + urlencode(params)
         return url
 
     def _make_request(self):
@@ -65,11 +65,26 @@ class SelectRequester(Mediator):
         if not self._validate_response(response):
             raise APIError()
 
-        return response
+        return self._format_response(response)
 
     def _validate_response(self, resp):
         return validate(instance=resp, schema_type='select')
 
+    def _format_response(self, resp):
+        # the UI expects the following form:
+        # choices: [[label, value]]
+        # default: [label, value]
+        response = {}
+        choices = []
+
+        for option in resp:
+            choices.append([option['label'], option['value']])
+            if option.get('default'):
+                response['default'] = [option['label'], option['value']]
+
+        response['choices'] = choices
+        return response
+
     def _build_headers(self):
         request_uuid = uuid4().hex
 
diff --git a/tests/sentry/api/endpoints/test_sentry_app_installation_external_requests.py b/tests/sentry/api/endpoints/test_sentry_app_installation_external_requests.py
new file mode 100644
index 0000000000..7f1d85f311
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_sentry_app_installation_external_requests.py
@@ -0,0 +1,73 @@
+from __future__ import absolute_import
+
+import responses
+
+from django.core.urlresolvers import reverse
+from sentry.testutils import APITestCase
+from sentry.testutils.helpers import with_feature
+
+
+class SentryAppInstallationExternalRequestsEndpointTest(APITestCase):
+    def setUp(self):
+        self.user = self.create_user(email='boop@example.com')
+        self.org = self.create_organization(owner=self.user)
+        self.project = self.create_project(organization=self.org)
+
+        self.sentry_app = self.create_sentry_app(
+            name='Testin',
+            organization=self.org,
+            webhook_url='https://example.com',
+        )
+
+        self.install = self.create_sentry_app_installation(
+            organization=self.org,
+            slug=self.sentry_app.slug,
+            user=self.user,
+        )
+
+        self.url = reverse(
+            'sentry-api-0-sentry-app-installation-external-requests',
+            args=[self.install.uuid],
+        )
+
+    @responses.activate
+    @with_feature('organizations:sentry-apps')
+    def test_makes_external_request(self):
+        self.login_as(user=self.user)
+        options = [{
+            'label': 'Project Name',
+            'value': '1234'
+        }]
+        responses.add(
+            method=responses.GET,
+            url=u'https://example.com/get-projects?projectSlug={}&installationId={}'.format(
+                self.project.slug,
+                self.install.uuid,
+            ),
+            json=options,
+            status=200,
+            content_type='application/json',
+        )
+        url = self.url + u'?projectId={}&uri={}'.format(self.project.id, '/get-projects')
+        response = self.client.get(url, format='json')
+        assert response.status_code == 200
+        assert response.data == {
+            'choices': [['Project Name', '1234']]
+        }
+
+    @responses.activate
+    @with_feature('organizations:sentry-apps')
+    def test_external_request_fails(self):
+        self.login_as(user=self.user)
+        responses.add(
+            method=responses.GET,
+            url=u'https://example.com/get-projects?installationId={}'.format(
+                self.project.slug,
+                self.install.uuid,
+            ),
+            status=500,
+            content_type='application/json',
+        )
+        url = self.url + u'?uri={}'.format(self.project.id, '/get-projects')
+        response = self.client.get(url, format='json')
+        assert response.status_code == 400
diff --git a/tests/sentry/mediators/external_requests/test_select_requester.py b/tests/sentry/mediators/external_requests/test_select_requester.py
index 7a1aa9a6d1..b5881ee24c 100644
--- a/tests/sentry/mediators/external_requests/test_select_requester.py
+++ b/tests/sentry/mediators/external_requests/test_select_requester.py
@@ -30,11 +30,22 @@ class TestSelectRequester(TestCase):
 
     @responses.activate
     def test_makes_request(self):
+        options = [
+            {
+                'label': 'An Issue',
+                'value': '123',
+                'default': True,
+            },
+            {
+                'label': 'Another Issue',
+                'value': '456',
+            },
 
+        ]
         responses.add(
             method=responses.GET,
             url='https://example.com/get-issues?projectSlug=boop&installationId=f3d37e3a-9a87-4651-8463-d375118f4996',
-            body='[{"label": "An Issue", "value": "12345"}]',
+            json=options,
             status=200,
             content_type='application/json',
         )
@@ -44,7 +55,13 @@ class TestSelectRequester(TestCase):
             project=self.project,
             uri='/get-issues',
         )
-        assert result == [{'value': '12345', 'label': 'An Issue'}]
+        assert result == {
+            'choices': [
+                ['An Issue', '123'],
+                ['Another Issue', '456']
+            ],
+            'default': ['An Issue', '123'],
+        }
 
         request = responses.calls[0].request
         assert request.headers['Sentry-App-Signature']
