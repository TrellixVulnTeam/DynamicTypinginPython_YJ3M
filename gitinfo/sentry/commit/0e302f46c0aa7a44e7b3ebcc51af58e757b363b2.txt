commit 0e302f46c0aa7a44e7b3ebcc51af58e757b363b2
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 22 18:14:54 2016 -0700

    Merge contexts together

diff --git a/src/sentry/static/sentry/app/components/events/contexts.jsx b/src/sentry/static/sentry/app/components/events/contexts.jsx
index fb9c2f640b..d7fd9c0077 100644
--- a/src/sentry/static/sentry/app/components/events/contexts.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts.jsx
@@ -1,15 +1,46 @@
 import React from 'react';
 
 import GroupEventDataSection from './eventDataSection';
-import {toTitleCase} from '../../utils';
+import {objectIsEmpty, toTitleCase} from '../../utils';
+import {t} from '../../locale';
 
 const CONTEXT_TYPES = {
   'default': require('./contexts/default'),
   'device': require('./contexts/device'),
   'os': require('./contexts/os'),
   'runtime': require('./contexts/runtime'),
+  'user': require('./contexts/user'),
 };
 
+const ContextChunk = React.createClass({
+  propTypes: {
+    type: React.PropTypes.string.isRequired,
+    alias: React.PropTypes.string.isRequired,
+    value: React.PropTypes.object.isRequired,
+  },
+
+  render() {
+    let {type, alias, value} = this.props;
+    let title = value.title || toTitleCase(alias);
+    let Component = CONTEXT_TYPES[type] || CONTEXT_TYPES.default;
+
+    return (
+      <div className="context-box">
+        <div className="context-header">
+          <h5>
+            <strong>{title}</strong>
+            {value.title &&
+              <small> ({name})</small>
+            }
+          </h5>
+        </div>
+        <div className="context-content">
+          <Component alias={alias} data={value} />
+        </div>
+      </div>
+    );
+  },
+});
 
 const ContextsInterface = React.createClass({
   propTypes: {
@@ -20,35 +51,40 @@ const ContextsInterface = React.createClass({
   render() {
     let group = this.props.group;
     let evt = this.props.event;
-    let rv = [];
-    for (let key in evt.contexts) {
-      let value = evt.contexts[key];
-      let Component = CONTEXT_TYPES[value.type] || CONTEXT_TYPES.default;
-
-      let title = (
-        <div>
-          <h3>
-            <strong>{value.title || toTitleCase(key)}</strong>
-            <small> ({key})</small>
-          </h3>
-        </div>
-      );
-
-      rv.push((
-        <GroupEventDataSection
-            className="context-box"
-            group={group}
-            event={evt}
-            key={key}
-            type={`${key}-context`}
-            wrapTitle={false}
-            title={title}>
-          <Component alias={key} data={value} />
-        </GroupEventDataSection>
+    let children = [];
+    if (!objectIsEmpty(evt.user)) {
+      children.push((
+        <ContextChunk
+          type="user"
+          alias="user"
+          value={evt.user}
+          key="user" />
+      ));
+    }
 
+    let value = null;
+    for (let key in evt.contexts) {
+      value = evt.contexts[key];
+      children.push((
+        <ContextChunk
+          type={value.type}
+          alias={key}
+          value={value}
+          key={key} />
       ));
     }
-    return <div>{rv}</div>;
+
+    return (
+      <GroupEventDataSection
+          className="context-section"
+          group={group}
+          event={evt}
+          key="context"
+          type="contexts"
+          title={t('Context')}>
+        {children}
+      </GroupEventDataSection>
+    );
   },
 });
 
diff --git a/src/sentry/static/sentry/app/components/events/contexts/user.jsx b/src/sentry/static/sentry/app/components/events/contexts/user.jsx
new file mode 100644
index 0000000000..a9424d1bb5
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/user.jsx
@@ -0,0 +1,42 @@
+import React from 'react';
+import _ from 'underscore';
+
+import Avatar from '../../../components/avatar';
+import KeyValueList from '../interfaces/keyValueList';
+
+const UserContextType = React.createClass({
+  propTypes: {
+    data: React.PropTypes.object.isRequired,
+  },
+
+  render() {
+    let user = this.props.data;
+    let builtins = [];
+    let children = [];
+
+    // Handle our native attributes special
+    user.id && builtins.push(['ID', user.id]);
+    user.email && builtins.push(['Email', user.email]);
+    user.username && builtins.push(['Username', user.username]);
+    user.ip_address && builtins.push(['IP Address', user.ip_address]);
+
+    // We also attach user supplied data as 'user.data'
+    _.each(user.data, function(value, key) {
+      children.push([key, value]);
+    });
+
+    return (
+      <div className="user-widget">
+        <div className="pull-left">
+          <Avatar user={user} size={96} />
+        </div>
+        <KeyValueList data={builtins} isContextData={false} />
+        {children &&
+          <KeyValueList data={children} isContextData={true} />
+        }
+      </div>
+    );
+  }
+});
+
+export default UserContextType;
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index 1dd7834468..b41258e115 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -9,7 +9,6 @@ import EventPackageData from './packageData';
 import EventTags from './eventTags';
 import EventSdk from './sdk';
 import EventDevice from './device';
-import EventUser from './user';
 import EventUserReport from './userReport';
 import PropTypes from '../../proptypes';
 import utils from '../../utils';
@@ -101,12 +100,7 @@ const EventEntries = React.createClass({
           event={evt}
           orgId={this.props.orgId}
           projectId={project.slug} />
-        {!utils.objectIsEmpty(evt.user) &&
-          <EventUser
-            group={group}
-            event={evt} />
-        }
-        {!utils.objectIsEmpty(evt.contexts) &&
+        {(!utils.objectIsEmpty(evt.user) || !utils.objectIsEmpty(evt.contexts)) &&
           <EventContexts
             group={group}
             event={evt} />
diff --git a/src/sentry/static/sentry/app/components/events/user.jsx b/src/sentry/static/sentry/app/components/events/user.jsx
deleted file mode 100644
index ffc93290ed..0000000000
--- a/src/sentry/static/sentry/app/components/events/user.jsx
+++ /dev/null
@@ -1,52 +0,0 @@
-import React from 'react';
-import _ from 'underscore';
-
-import Avatar from '../../components/avatar';
-import KeyValueList from './interfaces/keyValueList';
-import EventDataSection from './eventDataSection';
-import {t} from '../../locale';
-
-
-const EventUser = React.createClass({
-  propTypes: {
-    event: React.PropTypes.object.isRequired,
-    group: React.PropTypes.object.isRequired
-  },
-
-  render() {
-    let user = this.props.event.user;
-    let builtins = [];
-    let children = [];
-
-    // Handle our native attributes special
-    user.id && builtins.push(['ID', user.id]);
-    user.email && builtins.push(['Email', user.email]);
-    user.username && builtins.push(['Username', user.username]);
-    user.ip_address && builtins.push(['IP Address', user.ip_address]);
-
-    // We also attach user supplied data as 'user.data'
-    _.each(user.data, function(value, key) {
-      children.push([key, value]);
-    });
-
-    return (
-      <EventDataSection
-          group={this.props.group}
-          event={this.props.event}
-          type="user"
-          title={t('User')}>
-        <div className="user-widget">
-          <div className="pull-left">
-            <Avatar user={user} size={96} />
-          </div>
-          <KeyValueList data={builtins} isContextData={false} />
-          {children &&
-            <KeyValueList data={children} isContextData={true} />
-          }
-        </div>
-      </EventDataSection>
-    );
-  }
-});
-
-export default EventUser;
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 6ef0b30029..ee96215668 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -799,27 +799,80 @@
   }
 }
 
-// User widget
+// Context
 
-.user-widget {
-  position: relative;
+.context-section {
+  > .box-content.with-padding {
+    padding: 0;
+  }
+}
 
-  margin: 0 0 20px;
+.context-box {
+  &:first-child .context-header {
+    border-top: 0;
+  }
 
-  .avatar {
-    .square(48px);
-    position: absolute;
-    top: 0;
-    right: 0;
-    box-shadow: 0 0 0 5px #fff;
+  .context-header {
+    padding: 10px 20px;
+    font-size: 13px;
+    margin: 0;
+    line-height: 16px;
+    background: lighten(@blue-light, 30);
+    border-top: 1px solid @trim;
+    border-bottom: 1px solid @trim;
+
+    h5 {
+      font-size: inherit;
+      color: inherit;
+      margin: 0;
+    }
   }
 
-  .btn-group {
-    margin-top: -15px;
+  .context-content {
+    padding: 10px 20px;
+
+    table.key-value {
+      margin: 0;
+
+      td {
+        border-bottom: 1px solid @trim !important;
+
+        &.key {
+          width: 125px;
+          max-width: 125px;
+        }
+
+        &.value pre {
+          background: inherit;
+        }
+      }
+
+      tr:last-child {
+        td {
+          border-bottom: 0 !important;
+        }
+      }
+    }
   }
 
-  .table {
-    margin-bottom: 0;
+  .user-widget {
+    position: relative;
+
+    .avatar {
+      .square(48px);
+      position: absolute;
+      top: 0;
+      right: 0;
+      box-shadow: 0 0 0 5px #fff;
+    }
+
+    .btn-group {
+      margin-top: -15px;
+    }
+
+    .table {
+      margin-bottom: 0;
+    }
   }
 }
 
@@ -907,7 +960,6 @@ div.traceback > ul {
     border-top: 0;
   }
 
-
   .frame {
     list-style-type: none;
     position: relative;
