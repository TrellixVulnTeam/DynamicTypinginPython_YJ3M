commit 3989787c3287005e7dc27ef9dc4b7919789c0e4b
Author: ted kaemming <ted@kaemming.com>
Date:   Tue Mar 6 13:09:42 2018 -0800

    ref: Add SequencePaginator (#7414)

diff --git a/src/sentry/api/paginator.py b/src/sentry/api/paginator.py
index 1a02551d36..7ebd955a17 100644
--- a/src/sentry/api/paginator.py
+++ b/src/sentry/api/paginator.py
@@ -7,6 +7,8 @@ sentry.api.paginator
 """
 from __future__ import absolute_import
 
+import bisect
+import functools
 import math
 
 from datetime import datetime
@@ -19,6 +21,9 @@ from sentry.utils.cursors import build_cursor, Cursor, CursorResult
 quote_name = connections['default'].ops.quote_name
 
 
+MAX_HITS_LIMIT = 1000
+
+
 class BasePaginator(object):
     def __init__(self, queryset, order_by=None, max_limit=100):
         if order_by:
@@ -113,11 +118,9 @@ class BasePaginator(object):
         # TODO(dcramer): this does not yet work correctly for ``is_prev`` when
         # the key is not unique
         if count_hits:
-            max_hits = 1000
-            hits = self.count_hits(max_hits)
+            hits = self.count_hits(MAX_HITS_LIMIT)
         else:
             hits = None
-            max_hits = None
 
         offset = cursor.offset
         # this effectively gets us the before row, and the current (after) row
@@ -137,7 +140,7 @@ class BasePaginator(object):
             results=results,
             limit=limit,
             hits=hits,
-            max_hits=max_hits,
+            max_hits=MAX_HITS_LIMIT if count_hits else None,
             cursor=cursor,
             is_desc=self.desc,
             key=self.get_item_key,
@@ -220,3 +223,95 @@ class OffsetPaginator(BasePaginator):
             next=next_cursor,
             prev=prev_cursor,
         )
+
+
+def reverse_bisect_left(a, x, lo=0, hi=None):
+    """\
+    Similar to ``bisect.bisect_left``, but expects the data in the array ``a``
+    to be provided in descending order, rather than the ascending order assumed
+    by ``bisect_left``.
+
+    The returned index ``i`` partitions the array ``a`` into two halves so that:
+
+    - left side: ``all(val > x for val in a[lo:i])``
+    - right side: ``all(val <= x for val in a[i:hi])``
+    """
+    if lo < 0:
+        raise ValueError('lo must be non-negative')
+
+    if hi is None:
+        hi = len(a)
+
+    while lo < hi:
+        mid = (lo + hi) // 2
+        if a[mid] > x:
+            lo = mid + 1
+        else:
+            hi = mid
+
+    return lo
+
+
+class SequencePaginator(object):
+    def __init__(self, data, reverse=False):
+        self.scores, self.values = map(
+            list,
+            zip(*sorted(data, reverse=reverse)),
+        ) if data else ([], [])
+        self.reverse = reverse
+        self.search = functools.partial(
+            reverse_bisect_left if reverse else bisect.bisect_left,
+            self.scores,
+        )
+
+    def get_result(self, limit, cursor=None):
+        if cursor is None:
+            cursor = Cursor(0, 0, False)
+
+        assert cursor.offset > -1
+
+        if cursor.value == 0:
+            position = len(self.scores) if cursor.is_prev else 0
+        else:
+            position = self.search(cursor.value)
+
+        position = position + cursor.offset
+
+        if cursor.is_prev:
+            # TODO: It might make sense to ensure that this hi value is at
+            # least the length of the page + 1 if we want to ensure we return a
+            # full page of results when paginating backwards while data is
+            # being mutated.
+            hi = min(position, len(self.scores))
+            lo = max(hi - limit, 0)
+        else:
+            lo = max(position, 0)
+            hi = min(lo + limit, len(self.scores))
+
+        if self.scores:
+            prev_score = self.scores[min(lo, len(self.scores) - 1)]
+            prev_cursor = Cursor(
+                prev_score,
+                lo - self.search(prev_score, hi=lo),
+                True,
+                True if lo > 0 else False,
+            )
+
+            next_score = self.scores[min(hi, len(self.scores) - 1)]
+            next_cursor = Cursor(
+                next_score,
+                hi - self.search(next_score, hi=hi),
+                False,
+                True if hi < len(self.scores) else False,
+            )
+        else:
+            prev_cursor = Cursor(cursor.value, cursor.offset, True, False)
+            next_cursor = Cursor(cursor.value, cursor.offset, False, False)
+
+        return CursorResult(
+            self.values[lo:hi],
+            prev=prev_cursor,
+            next=next_cursor,
+            hits=min(len(self.scores), MAX_HITS_LIMIT),
+            max_hits=MAX_HITS_LIMIT,
+        )
diff --git a/src/sentry/utils/cursors.py b/src/sentry/utils/cursors.py
index 4a16273999..3527cc1957 100644
--- a/src/sentry/utils/cursors.py
+++ b/src/sentry/utils/cursors.py
@@ -22,6 +22,13 @@ class Cursor(object):
     def __str__(self):
         return '%s:%s:%s' % (self.value, self.offset, int(self.is_prev))
 
+    def __eq__(self, other):
+        return all(
+            getattr(self, attr) == getattr(other, attr)
+            for attr in
+            ('value', 'offset', 'is_prev', 'has_results')
+        )
+
     def __repr__(self):
         return '<%s: value=%s offset=%s is_prev=%s>' % (
             type(self), self.value, self.offset, int(self.is_prev)
diff --git a/tests/sentry/api/test_paginator.py b/tests/sentry/api/test_paginator.py
index 8aeba8b9be..3bcd5af1b5 100644
--- a/tests/sentry/api/test_paginator.py
+++ b/tests/sentry/api/test_paginator.py
@@ -3,10 +3,17 @@ from __future__ import absolute_import
 import pytest
 from datetime import timedelta
 from django.utils import timezone
-
-from sentry.api.paginator import (Paginator, DateTimePaginator, OffsetPaginator)
+from unittest import TestCase as SimpleTestCase
+
+from sentry.api.paginator import (
+    Paginator,
+    DateTimePaginator,
+    OffsetPaginator,
+    SequencePaginator,
+    reverse_bisect_left)
 from sentry.models import User
 from sentry.testutils import TestCase
+from sentry.utils.cursors import Cursor
 from sentry.utils.db import is_mysql
 
 
@@ -240,3 +247,157 @@ class DateTimePaginatorTest(TestCase):
 
         result5 = paginator.get_result(limit=10, cursor=result4.prev)
         assert len(result5) == 0, list(result5)
+
+
+def test_reverse_bisect_left():
+    assert reverse_bisect_left([], 0) == 0
+
+    assert reverse_bisect_left([1], -1) == 1
+    assert reverse_bisect_left([1], 0) == 1
+    assert reverse_bisect_left([1], 1) == 0
+    assert reverse_bisect_left([1], 2) == 0
+
+    assert reverse_bisect_left([2, 1], -1) == 2
+    assert reverse_bisect_left([2, 1], 0) == 2
+    assert reverse_bisect_left([2, 1], 1) == 1
+    assert reverse_bisect_left([2, 1], 2) == 0
+    assert reverse_bisect_left([2, 1], 3) == 0
+
+    assert reverse_bisect_left([3, 2, 1], -1) == 3
+    assert reverse_bisect_left([3, 2, 1], 0) == 3
+    assert reverse_bisect_left([3, 2, 1], 1) == 2
+    assert reverse_bisect_left([3, 2, 1], 2) == 1
+    assert reverse_bisect_left([3, 2, 1], 3) == 0
+    assert reverse_bisect_left([3, 2, 1], 4) == 0
+
+    assert reverse_bisect_left([4, 3, 2, 1], -1) == 4
+    assert reverse_bisect_left([4, 3, 2, 1], 0) == 4
+    assert reverse_bisect_left([4, 3, 2, 1], 1) == 3
+    assert reverse_bisect_left([4, 3, 2, 1], 2) == 2
+    assert reverse_bisect_left([4, 3, 2, 1], 3) == 1
+    assert reverse_bisect_left([4, 3, 2, 1], 4) == 0
+    assert reverse_bisect_left([4, 3, 2, 1], 5) == 0
+
+    assert reverse_bisect_left([1, 1], 0) == 2
+    assert reverse_bisect_left([1, 1], 1) == 0
+    assert reverse_bisect_left([1, 1], 2) == 0
+
+    assert reverse_bisect_left([2, 1, 1], 0) == 3
+    assert reverse_bisect_left([2, 1, 1], 1) == 1
+    assert reverse_bisect_left([2, 1, 1], 2) == 0
+
+    assert reverse_bisect_left([2, 2, 1], 0) == 3
+    assert reverse_bisect_left([2, 2, 1], 1) == 2
+    assert reverse_bisect_left([2, 2, 1], 2) == 0
+
+
+class SequencePaginatorTestCase(SimpleTestCase):
+    def test_empty_results(self):
+        paginator = SequencePaginator([])
+        result = paginator.get_result(5)
+        assert list(result) == []
+        assert result.prev == Cursor(0, 0, True, False)
+        assert result.next == Cursor(0, 0, False, False)
+
+        paginator = SequencePaginator([], reverse=True)
+        result = paginator.get_result(5)
+        assert list(result) == []
+        assert result.prev == Cursor(0, 0, True, False)
+        assert result.next == Cursor(0, 0, False, False)
+
+    def test_ascending_simple(self):
+        paginator = SequencePaginator([(i, i) for i in range(10)], reverse=False)
+
+        result = paginator.get_result(5)
+        assert list(result) == [0, 1, 2, 3, 4]
+        assert result.prev == Cursor(0, 0, True, False)
+        assert result.next == Cursor(5, 0, False, True)
+
+        result = paginator.get_result(5, result.next)
+        assert list(result) == [5, 6, 7, 8, 9]
+        assert result.prev == Cursor(5, 0, True, True)
+        assert result.next == Cursor(9, 1, False, False)
+
+        result = paginator.get_result(5, result.prev)
+        assert list(result) == [0, 1, 2, 3, 4]
+        assert result.prev == Cursor(0, 0, True, False)
+        assert result.next == Cursor(5, 0, False, True)
+
+        result = paginator.get_result(5, Cursor(100, 0, False))
+        assert list(result) == []
+        assert result.prev == Cursor(9, 1, True, True)
+        assert result.next == Cursor(9, 1, False, False)
+
+    def test_descending_simple(self):
+        paginator = SequencePaginator([(i, i) for i in range(10)], reverse=True)
+
+        result = paginator.get_result(5)
+        assert list(result) == [9, 8, 7, 6, 5]
+        assert result.prev == Cursor(9, 0, True, False)
+        assert result.next == Cursor(4, 0, False, True)
+
+        result = paginator.get_result(5, result.next)
+        assert list(result) == [4, 3, 2, 1, 0]
+        assert result.prev == Cursor(4, 0, True, True)
+        assert result.next == Cursor(0, 1, False, False)
+
+        result = paginator.get_result(5, result.prev)
+        assert list(result) == [9, 8, 7, 6, 5]
+        assert result.prev == Cursor(9, 0, True, False)
+        assert result.next == Cursor(4, 0, False, True)
+
+        result = paginator.get_result(5, Cursor(-10, 0, False))
+        assert list(result) == []
+        assert result.prev == Cursor(0, 1, True, True)
+        assert result.next == Cursor(0, 1, False, False)
+
+    def test_ascending_repeated_scores(self):
+        paginator = SequencePaginator([(1, i) for i in range(10)], reverse=False)
+
+        result = paginator.get_result(5)
+        assert list(result) == [0, 1, 2, 3, 4]
+        assert result.prev == Cursor(1, 0, True, False)
+        assert result.next == Cursor(1, 5, False, True)
+
+        result = paginator.get_result(5, result.next)
+        assert list(result) == [5, 6, 7, 8, 9]
+        assert result.prev == Cursor(1, 5, True, True)
+        assert result.next == Cursor(1, 10, False, False)
+
+        result = paginator.get_result(5, result.prev)
+        assert list(result) == [0, 1, 2, 3, 4]
+        assert result.prev == Cursor(1, 0, True, False)
+        assert result.next == Cursor(1, 5, False, True)
+
+        result = paginator.get_result(5, Cursor(100, 0, False))
+        assert list(result) == []
+        assert result.prev == Cursor(1, 10, True, True)
+        assert result.next == Cursor(1, 10, False, False)
+
+    def test_descending_repeated_scores(self):
+        paginator = SequencePaginator([(1, i) for i in range(10)], reverse=True)
+
+        result = paginator.get_result(5)
+        assert list(result) == [9, 8, 7, 6, 5]
+        assert result.prev == Cursor(1, 0, True, False)
+        assert result.next == Cursor(1, 5, False, True)
+
+        result = paginator.get_result(5, result.next)
+        assert list(result) == [4, 3, 2, 1, 0]
+        assert result.prev == Cursor(1, 5, True, True)
+        assert result.next == Cursor(1, 10, False, False)
+
+        result = paginator.get_result(5, result.prev)
+        assert list(result) == [9, 8, 7, 6, 5]
+        assert result.prev == Cursor(1, 0, True, False)
+        assert result.next == Cursor(1, 5, False, True)
+
+        result = paginator.get_result(5, Cursor(-10, 0, False))
+        assert list(result) == []
+        assert result.prev == Cursor(1, 10, True, True)
+        assert result.next == Cursor(1, 10, False, False)
+
+    def test_hits(self):
+        n = 10
+        paginator = SequencePaginator([(i, i) for i in range(n)])
+        assert paginator.get_result(5).hits == n
