commit 65d094d7f13176b29dd688b6895fa83b0e5650dc
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Dec 16 13:56:09 2015 -0800

    Expand information from user reports endpoint

diff --git a/src/sentry/api/endpoints/project_user_reports.py b/src/sentry/api/endpoints/project_user_reports.py
index 3b09cdd71a..ce0fb7e59d 100644
--- a/src/sentry/api/endpoints/project_user_reports.py
+++ b/src/sentry/api/endpoints/project_user_reports.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 from sentry.api.bases.project import ProjectEndpoint
-from sentry.api.serializers import serialize
+from sentry.api.serializers import serialize, ProjectUserReportSerializer
 from sentry.api.paginator import DateTimePaginator
 from sentry.models import UserReport
 
@@ -11,12 +11,12 @@ class ProjectUserReportsEndpoint(ProjectEndpoint):
         queryset = UserReport.objects.filter(
             project=project,
             group__isnull=False,
-        )
+        ).select_related('group')
 
         return self.paginate(
             request=request,
             queryset=queryset,
             order_by='-date_added',
-            on_results=lambda x: serialize(x, request.user),
+            on_results=lambda x: serialize(x, request.user, ProjectUserReportSerializer()),
             paginator_cls=DateTimePaginator,
         )
diff --git a/src/sentry/api/serializers/models/userreport.py b/src/sentry/api/serializers/models/userreport.py
index 4bbc40469a..6e99888437 100644
--- a/src/sentry/api/serializers/models/userreport.py
+++ b/src/sentry/api/serializers/models/userreport.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from sentry.api.serializers import Serializer, register
+from sentry.api.serializers import register, serialize, Serializer
 from sentry.models import UserReport
 
 
@@ -17,3 +17,24 @@ class UserReportSerializer(Serializer):
             'comments': obj.comments,
             'dateCreated': obj.date_added,
         }
+
+
+class ProjectUserReportSerializer(UserReportSerializer):
+    def get_attrs(self, item_list, user):
+        # TODO(dcramer); assert on relations
+        groups = dict(zip(
+            item_list,
+            serialize([i.group for i in item_list], user)
+        ))
+
+        attrs = {}
+        for item in item_list:
+            attrs[item] = {'group': groups[item]}
+        return attrs
+
+    def serialize(self, obj, attrs, user):
+        context = super(ProjectUserReportSerializer, self).serialize(
+            obj, attrs, user,
+        )
+        context['issue'] = attrs['group']
+        return context
