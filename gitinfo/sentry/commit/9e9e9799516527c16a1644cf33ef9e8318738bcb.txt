commit 9e9e9799516527c16a1644cf33ef9e8318738bcb
Author: Mark Story <mark@mark-story.com>
Date:   Tue Apr 23 18:10:38 2019 -0400

    fix(jira) Don't 500 when request token requests timeout (#12884)
    
    When a customer's jira-server times out while getting a request token we
    don't need to 500. Instead we should convert the timeout to an ApiError
    instance which all integrations should be handling correctly.
    
    Fixes SEN-511
    Fixes SENTRY-AG9

diff --git a/src/sentry/integrations/client.py b/src/sentry/integrations/client.py
index c024dead9d..ba27d6d447 100644
--- a/src/sentry/integrations/client.py
+++ b/src/sentry/integrations/client.py
@@ -9,13 +9,19 @@ from time import time
 
 from BeautifulSoup import BeautifulStoneSoup
 from django.utils.functional import cached_property
-from requests.exceptions import ConnectionError, HTTPError
+from requests.exceptions import ConnectionError, Timeout, HTTPError
 from sentry.exceptions import InvalidIdentity
 from sentry.http import build_session
 from sentry.utils import metrics
 from six.moves.urllib.parse import urlparse
 
-from .exceptions import ApiHostError, ApiError, ApiUnauthorized, UnsupportedResponseType
+from .exceptions import (
+    ApiHostError,
+    ApiTimeoutError,
+    ApiError,
+    ApiUnauthorized,
+    UnsupportedResponseType
+)
 
 
 class BaseApiResponse(object):
@@ -173,6 +179,12 @@ class ApiClient(object):
                 'status': 'connection_error'
             })
             raise ApiHostError.from_exception(e)
+        except Timeout as e:
+            metrics.incr('integrations.http_response', tags={
+                'host': host,
+                'status': 'timeout'
+            })
+            raise ApiTimeoutError.from_exception(e)
         except HTTPError as e:
             resp = e.response
             if resp is None:
diff --git a/src/sentry/integrations/exceptions.py b/src/sentry/integrations/exceptions.py
index 0cc4cbf09c..fd64b8ed12 100644
--- a/src/sentry/integrations/exceptions.py
+++ b/src/sentry/integrations/exceptions.py
@@ -53,6 +53,21 @@ class ApiHostError(ApiError):
         return cls(u'Unable to reach host: {}'.format(host))
 
 
+class ApiTimeoutError(ApiError):
+    code = 504
+
+    @classmethod
+    def from_exception(cls, exception):
+        if getattr(exception, 'request'):
+            return cls.from_request(exception.request)
+        return cls('Timed out reaching host')
+
+    @classmethod
+    def from_request(cls, request):
+        host = urlparse(request.url).netloc
+        return cls(u'Timed out attempting to reach host: {}'.format(host))
+
+
 class ApiUnauthorized(ApiError):
     code = 401
 
diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index 62aacbb454..4d3febda27 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -764,7 +764,7 @@ class JiraIntegrationProvider(IntegrationProvider):
         return []
 
     def build_integration(self, state):
-        # Most information is not availabe during integration install time,
+        # Most information is not available during integration installation,
         # since the integration won't have been fully configired on JIRA's side
         # yet, we can't make API calls for more details like the server name or
         # Icon.
diff --git a/src/sentry/integrations/jira_server/integration.py b/src/sentry/integrations/jira_server/integration.py
index 1453ee4eaf..dd7d21aefa 100644
--- a/src/sentry/integrations/jira_server/integration.py
+++ b/src/sentry/integrations/jira_server/integration.py
@@ -183,7 +183,7 @@ class OAuthLoginView(PipelineView):
                 'url': config.get('url'),
                 'error': error
             })
-            return pipeline.error('Could not fetch a request token from Jira')
+            return pipeline.error('Could not fetch a request token from Jira. %s' % error)
 
 
 class OAuthCallbackView(PipelineView):
diff --git a/tests/sentry/integrations/jira_server/test_integration.py b/tests/sentry/integrations/jira_server/test_integration.py
index 910b030f30..bed10fcb7a 100644
--- a/tests/sentry/integrations/jira_server/test_integration.py
+++ b/tests/sentry/integrations/jira_server/test_integration.py
@@ -1,7 +1,9 @@
 from __future__ import absolute_import
 
 import jwt
+import responses
 
+from requests.exceptions import ReadTimeout
 from sentry.integrations.jira_server import JiraServerIntegrationProvider
 from sentry.models import (
     Identity,
@@ -13,8 +15,6 @@ from sentry.testutils import IntegrationTestCase
 from sentry.utils import json
 from .testutils import EXAMPLE_PRIVATE_KEY
 
-import responses
-
 
 class JiraServerIntegrationTest(IntegrationTestCase):
     provider = JiraServerIntegrationProvider
@@ -66,6 +66,30 @@ class JiraServerIntegrationTest(IntegrationTestCase):
         self.assertContains(
             resp, 'Private key must be a valid SSH private key encoded in a PEM format.')
 
+    @responses.activate
+    def test_authentication_request_token_timeout(self):
+        timeout = ReadTimeout('Read timed out. (read timeout=30)')
+        responses.add(
+            responses.POST,
+            'https://jira.example.com/plugins/servlet/oauth/request-token',
+            body=timeout)
+
+        # Start pipeline and go to setup page.
+        self.client.get(self.setup_path)
+
+        # Submit credentials
+        data = {
+            'url': 'https://jira.example.com/',
+            'verify_ssl': False,
+            'consumer_key': 'sentry-bot',
+            'private_key': EXAMPLE_PRIVATE_KEY
+        }
+        resp = self.client.post(self.setup_path, data=data)
+        assert resp.status_code == 200
+        self.assertContains(resp, 'Setup Error')
+        self.assertContains(resp, 'request token from Jira')
+        self.assertContains(resp, 'Timed out')
+
     @responses.activate
     def test_authentication_request_token_fails(self):
         responses.add(
