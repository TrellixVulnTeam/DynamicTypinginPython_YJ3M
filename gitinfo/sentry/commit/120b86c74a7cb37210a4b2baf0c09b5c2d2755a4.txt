commit 120b86c74a7cb37210a4b2baf0c09b5c2d2755a4
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jun 30 21:10:21 2016 -0700

    Implement functional subscription actions

diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 6768ca4abe..41eebbe209 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -15,7 +15,7 @@ from sentry.constants import STATUS_CHOICES
 from sentry.models import (
     Activity, Group, GroupAssignee, GroupSeen, GroupSubscription,
     GroupSubscriptionReason, GroupStatus, GroupTagKey, GroupTagValue, Release,
-    UserReport
+    User, UserReport
 )
 from sentry.plugins import plugins
 from sentry.utils.safe import safe_execute
@@ -200,11 +200,17 @@ class GroupDetailsEndpoint(GroupEndpoint):
             group=group,
         )[:100])
 
+        participants = list(User.objects.filter(
+            groupsubscription__is_active=True,
+            groupsubscription__group=group,
+        ))
+
         data.update({
             'firstRelease': first_release,
             'lastRelease': last_release,
             'activity': serialize(activity, request.user),
             'seenBy': seen_by,
+            'participants': serialize(participants, request.user),
             'pluginActions': action_list,
             'userReportCount': UserReport.objects.filter(group=group).count(),
             'tags': sorted(serialize(tags, request.user), key=lambda x: x['name']),
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index fac0d170b3..7942e8ad18 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -11,7 +11,7 @@ from sentry.constants import LOG_LEVELS
 from sentry.models import (
     Group, GroupAssignee, GroupBookmark, GroupMeta, GroupResolution,
     GroupResolutionStatus, GroupSeen, GroupSnooze, GroupSubscription,
-    GroupStatus, GroupTagKey
+    GroupStatus, GroupTagKey, UserOption, UserOptionValue
 )
 from sentry.utils.db import attach_foreignkey
 from sentry.utils.http import absolute_uri
@@ -20,6 +20,28 @@ from sentry.utils.safe import safe_execute
 
 @register(Group)
 class GroupSerializer(Serializer):
+    def _get_subscriptions(self, item_list, user):
+        default_subscribed = UserOption.objects.get_value(
+            user=user,
+            project=None,
+            key='workflow:notifications',
+        )
+        if default_subscribed == UserOptionValue.participating_only:
+            subscriptions = set(GroupSubscription.objects.filter(
+                group__in=item_list,
+                user=user,
+                is_active=True,
+            ).values_list('group_id', flat=True))
+        else:
+            subscriptions = set([i.id for i in item_list]).difference(
+                GroupSubscription.objects.filter(
+                    group__in=item_list,
+                    user=user,
+                    is_active=False,
+                ).values_list('group_id', flat=True),
+            )
+        return subscriptions
+
     def get_attrs(self, item_list, user):
         from sentry.plugins import plugins
 
@@ -36,11 +58,7 @@ class GroupSerializer(Serializer):
                 user=user,
                 group__in=item_list,
             ).values_list('group_id', 'last_seen'))
-            subscriptions = set(GroupSubscription.objects.filter(
-                group__in=item_list,
-                user=user,
-                is_active=True,
-            ).values_list('group_id', flat=True))
+            subscriptions = self._get_subscriptions(item_list, user)
         else:
             bookmarks = set()
             seen_groups = {}
diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index d089c8bfd1..4c32c0fc9d 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -1,14 +1,70 @@
 import React from 'react';
+
+import ApiMixin from '../../mixins/apiMixin';
+import Avatar from '../avatar';
 import GroupChart from './chart';
 import GroupState from '../../mixins/groupState';
+import IndicatorStore from '../../stores/indicatorStore';
 import SeenInfo from './seenInfo';
 import TagDistributionMeter from './tagDistributionMeter';
 import {t} from '../../locale';
 
+const GroupParticipants = React.createClass({
+  propTypes: {
+    group: React.PropTypes.object,
+  },
+
+  render() {
+    let group = this.props.group;
+
+    return (
+      <div>
+        <h6><span>{group.participants.length} Participants</span></h6>
+        <ul className="faces">
+          {group.participants.map((user) => {
+            return (
+              <li>
+                <Avatar size={32} user={user} />
+              </li>
+            );
+          })}
+        </ul>
+      </div>
+    );
+  },
+});
+
 const GroupSidebar = React.createClass({
-  mixins: [GroupState],
+  propTypes: {
+    group: React.PropTypes.object,
+  },
+
+  mixins: [
+    ApiMixin,
+    GroupState
+  ],
+
+  toggleSubscription() {
+    let group = this.props.group;
+    let project = this.getProject();
+    let org = this.getOrganization();
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
 
-  render(){
+    this.api.bulkUpdate({
+      orgId: org.slug,
+      projectId: project.slug,
+      itemIds: [group.id],
+      data: {
+        isSubscribed: !group.isSubscribed
+      }
+    }, {
+      complete: () => {
+        IndicatorStore.remove(loadingIndicator);
+      }
+    });
+  },
+
+  render() {
     let orgId = this.getOrganization().slug;
     let projectId = this.getProject().slug;
     let group = this.getGroup();
@@ -51,16 +107,20 @@ const GroupSidebar = React.createClass({
               tag={data.key} />
           );
         })}
-        <h6><span>3 {t('Participants')}</span></h6>
-        <ul className="faces">
-          <li><span className="avatar"><img src="https://github.com/dcramer.png" /></span></li>
-          <li><span className="avatar"><img src="https://github.com/tkaemming.png" /></span></li>
-          <li><span className="avatar"><img src="https://github.com/macqueen.png" /></span></li>
-        </ul>
+        {group.participants.length !== 0 &&
+          <GroupParticipants group={group} />
+        }
 
         <h6><span>{t('Notifications')}</span></h6>
-        <p className="help-block">You're subscribed to this issue because you are mentioned in the comments.</p>
-        <a className="btn btn-default btn-subscribe subscribed"><span className="icon-signal" /> Unsubscribe</a>
+        {group.isSubscribed ?
+          <p className="help-block">{t('You\'re subscribed to this issue and will get notified when updates happen.')}</p>
+        :
+          <p className="help-block">{t('You\'re not subscribed in this issue.')}</p>
+        }
+        <a className={`btn btn-default btn-subscribe ${group.isSubscribed && 'subscribed'}`}
+           onClick={this.toggleSubscription}>
+          <span className="icon-signal" /> {group.isSubscribed ? t('Unsubscribe') : t('Subscribe')}
+        </a>
       </div>
     );
   }
diff --git a/tests/sentry/api/serializers/test_group.py b/tests/sentry/api/serializers/test_group.py
index d75eb192d9..8af5651a25 100644
--- a/tests/sentry/api/serializers/test_group.py
+++ b/tests/sentry/api/serializers/test_group.py
@@ -125,12 +125,12 @@ class GroupSerializerTest(TestCase):
         result = serialize(group, user)
         assert not result['isSubscribed']
 
-    def test_implicit_unsubscribed(self):
+    def test_implicit_subscribed(self):
         user = self.create_user()
         group = self.create_group()
 
         result = serialize(group, user)
-        assert not result['isSubscribed']
+        assert result['isSubscribed']
 
     def test_no_user_unsubscribed(self):
         group = self.create_group()
