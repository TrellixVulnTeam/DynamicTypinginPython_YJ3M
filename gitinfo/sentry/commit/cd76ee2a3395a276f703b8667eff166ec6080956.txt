commit cd76ee2a3395a276f703b8667eff166ec6080956
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Wed Mar 14 13:57:41 2018 -0700

    feat(slack): Support DMing users

diff --git a/src/sentry/api/serializers/rest_framework/rule.py b/src/sentry/api/serializers/rest_framework/rule.py
index 1ec5e7d484..29e3bd3ea9 100644
--- a/src/sentry/api/serializers/rest_framework/rule.py
+++ b/src/sentry/api/serializers/rest_framework/rule.py
@@ -53,6 +53,9 @@ class RuleNodeField(serializers.WritableField):
                 'Ensure at least one action is enabled and all required fields are filled in.'
             )
 
+        # Update data from cleaned form values
+        data.update(form.cleaned_data)
+
         return data
 
 
diff --git a/src/sentry/integrations/slack/notify_action.py b/src/sentry/integrations/slack/notify_action.py
index 7576b941af..cf4e76b48f 100644
--- a/src/sentry/integrations/slack/notify_action.py
+++ b/src/sentry/integrations/slack/notify_action.py
@@ -10,65 +10,80 @@ from sentry.models import Integration
 
 from .utils import build_attachment
 
+MEMBER_PREFIX = '@'
+CHANNEL_PREFIX = '#'
+strip_channel_chars = ''.join([MEMBER_PREFIX, CHANNEL_PREFIX])
+
 
 class SlackNotifyServiceForm(forms.Form):
-    team = forms.ChoiceField(choices=(), widget=forms.Select(
+    workspace = forms.ChoiceField(choices=(), widget=forms.Select(
         attrs={'style': 'width:150px'},
     ))
     channel = forms.CharField(widget=forms.TextInput(
-        attrs={'placeholder': 'i.e #critical-errors'},
+        attrs={'placeholder': 'i.e #critical'},
     ))
+    channel_id = forms.HiddenInput()
 
     def __init__(self, *args, **kwargs):
-        # NOTE: Team maps directly to the integration ID
-        team_list = [(i.id, i.name) for i in kwargs.pop('integrations')]
+        # NOTE: Workspace maps directly to the integration ID
+        workspace_list = [(i.id, i.name) for i in kwargs.pop('integrations')]
         self.channel_transformer = kwargs.pop('channel_transformer')
 
         super(SlackNotifyServiceForm, self).__init__(*args, **kwargs)
 
-        if team_list:
-            self.fields['team'].initial = team_list[0][0]
+        if workspace_list:
+            self.fields['workspace'].initial = workspace_list[0][0]
+
+        self.fields['workspace'].choices = workspace_list
+        self.fields['workspace'].widget.choices = self.fields['workspace'].choices
 
-        self.fields['team'].choices = team_list
-        self.fields['team'].widget.choices = self.fields['team'].choices
+    def clean(self):
+        cleaned_data = super(SlackNotifyServiceForm, self).clean()
 
-    def clean_channel(self):
-        team = self.cleaned_data.get('team')
-        channel = self.cleaned_data.get('channel', '').lstrip('#')
+        workspace = cleaned_data.get('workspace')
+        channel = cleaned_data.get('channel', '').lstrip(strip_channel_chars)
 
-        channel_id = self.channel_transformer(team, channel)
+        channel_id = self.channel_transformer(workspace, channel)
 
-        if channel_id is None and team is not None:
+        if channel_id is None and workspace is not None:
             params = {
                 'channel': channel,
-                'team': dict(self.fields['team'].choices).get(int(team)),
+                'workspace': dict(self.fields['workspace'].choices).get(int(workspace)),
             }
 
             raise forms.ValidationError(
-                _('The #%(channel)s channel does not exist in the %(team)s Slack team.'),
+                _('The "%(channel)s" channel or user does not exist in the %(workspace)s Slack workspace.'),
                 code='invalid',
                 params=params,
             )
 
-        return channel
+        channel_prefix, channel_id = channel_id
+        cleaned_data['channel'] = channel_prefix + channel
+        cleaned_data['channel_id'] = channel_id
+
+        return cleaned_data
 
 
 class SlackNotifyServiceAction(EventAction):
     form_cls = SlackNotifyServiceForm
-    label = u'Send a notification to the Slack {team} team in {channel}'
+    label = u'Send a notification to the Slack {workspace} workspace to {channel}'
 
     def is_enabled(self):
         return self.get_integrations().exists()
 
     def after(self, event, state):
-        integration_id = self.get_option('team')
-        channel = self.get_option('channel')
+        integration_id = self.get_option('workspace')
+        channel = self.get_option('channel_id')
 
-        integration = Integration.objects.get(
-            provider='slack',
-            organizations=self.project.organization,
-            id=integration_id
-        )
+        try:
+            integration = Integration.objects.get(
+                provider='slack',
+                organizations=self.project.organization,
+                id=integration_id
+            )
+        except Integration.DoesNotExist:
+            # Integration removed, rule still active.
+            return
 
         def send_notification(event, futures):
             rules = [f.rule for f in futures]
@@ -97,14 +112,14 @@ class SlackNotifyServiceAction(EventAction):
             integration_name = Integration.objects.get(
                 provider='slack',
                 organizations=self.project.organization,
-                id=self.data['team'],
+                id=self.data.get('workspace')
             ).name
         except Integration.DoesNotExist:
             integration_name = '[removed]'
 
         return self.label.format(
-            team=integration_name,
-            channel='#' + self.data['channel'],
+            workspace=integration_name,
+            channel=self.data['channel'],
         )
 
     def get_integrations(self):
@@ -113,7 +128,7 @@ class SlackNotifyServiceAction(EventAction):
             organizations=self.project.organization,
         )
 
-    def get_channel_id(self, integration_id, channel_name):
+    def get_channel_id(self, integration_id, name):
         try:
             integration = Integration.objects.get(
                 provider='slack',
@@ -123,6 +138,7 @@ class SlackNotifyServiceAction(EventAction):
         except Integration.DoesNotExist:
             return None
 
+        # Look for channel ID
         payload = {
             'token': integration.metadata['access_token'],
             'exclude_archived': False,
@@ -131,13 +147,33 @@ class SlackNotifyServiceAction(EventAction):
 
         session = http.build_session()
         resp = session.get('https://slack.com/api/channels.list', params=payload)
-        resp.raise_for_status()
         resp = resp.json()
         if not resp.get('ok'):
             self.logger.info('rule.slack.channel_list_failed', extra={'error': resp.get('error')})
             return None
 
-        return {c['name']: c['id'] for c in resp['channels']}.get(channel_name)
+        channel_id = {c['name']: c['id'] for c in resp['channels']}.get(name)
+
+        if channel_id:
+            return (CHANNEL_PREFIX, channel_id)
+
+        # Look for user ID
+        payload = {
+            'token': integration.metadata['access_token'],
+        }
+
+        resp = session.get('https://slack.com/api/users.list', params=payload)
+        resp = resp.json()
+        if not resp.get('ok'):
+            self.logger.info('rule.slack.user_list_failed', extra={'error': resp.get('error')})
+            return None
+
+        member_id = {c['name']: c['id'] for c in resp['members']}.get(name)
+
+        if member_id:
+            return (MEMBER_PREFIX, member_id)
+
+        return None
 
     def get_form_instance(self):
         return self.form_cls(
diff --git a/tests/sentry/integrations/slack/test_notify_action.py b/tests/sentry/integrations/slack/test_notify_action.py
index fc1deb69bf..a796a381f8 100644
--- a/tests/sentry/integrations/slack/test_notify_action.py
+++ b/tests/sentry/integrations/slack/test_notify_action.py
@@ -35,8 +35,8 @@ class SlackNotifyActionTest(RuleTestCase):
         event = self.get_event()
 
         rule = self.get_rule(data={
-            'team': self.integration.id,
-            'channel': 'my-channel',
+            'workspace': self.integration.id,
+            'channel': '#my-channel',
         })
 
         results = list(rule.after(event=event, state=self.get_state()))
@@ -62,28 +62,28 @@ class SlackNotifyActionTest(RuleTestCase):
 
     def test_render_label(self):
         rule = self.get_rule(data={
-            'team': self.integration.id,
-            'channel': 'my-channel',
+            'workspace': self.integration.id,
+            'channel': '#my-channel',
         })
 
-        assert rule.render_label() == 'Send a notification to the Slack Awesome Team team in #my-channel'
+        assert rule.render_label() == 'Send a notification to the Slack Awesome Team workspace to #my-channel'
 
     def test_render_label_without_integration(self):
         self.integration.delete()
 
         rule = self.get_rule(data={
-            'team': self.integration.id,
-            'channel': 'my-channel',
+            'workspace': self.integration.id,
+            'channel': '#my-channel',
         })
 
         label = rule.render_label()
-        assert label == 'Send a notification to the Slack [removed] team in #my-channel'
+        assert label == 'Send a notification to the Slack [removed] workspace to #my-channel'
 
     @responses.activate
     def test_valid_channel_selected(self):
         rule = self.get_rule(data={
-            'team': self.integration.id,
-            'channel': 'my-channel',
+            'workspace': self.integration.id,
+            'channel': '#my-channel',
         })
 
         channels = {
@@ -105,11 +105,53 @@ class SlackNotifyActionTest(RuleTestCase):
         form = rule.get_form_instance()
         assert form.is_valid()
 
+    @responses.activate
+    def test_valid_member_selected(self):
+        rule = self.get_rule(data={
+            'workspace': self.integration.id,
+            'channel': '@morty',
+        })
+
+        channels = {
+            'ok': 'true',
+            'channels': [
+                {'name': 'my-channel', 'id': 'chan-id'},
+                {'name': 'other-chann', 'id': 'chan-id'},
+            ],
+        }
+
+        responses.add(
+            method=responses.GET,
+            url='https://slack.com/api/channels.list',
+            status=200,
+            content_type='application/json',
+            body=json.dumps(channels),
+        )
+
+        members = {
+            'ok': 'true',
+            'members': [
+                {'name': 'morty', 'id': 'morty-id'},
+                {'name': 'other-user', 'id': 'user-id'},
+            ],
+        }
+
+        responses.add(
+            method=responses.GET,
+            url='https://slack.com/api/users.list',
+            status=200,
+            content_type='application/json',
+            body=json.dumps(members),
+        )
+
+        form = rule.get_form_instance()
+        assert form.is_valid()
+
     @responses.activate
     def test_invalid_channel_selected(self):
         rule = self.get_rule(data={
-            'team': self.integration.id,
-            'channel': 'my-channel',
+            'workspace': self.integration.id,
+            'channel': '#my-channel',
         })
 
         channels = {
@@ -125,6 +167,19 @@ class SlackNotifyActionTest(RuleTestCase):
             body=json.dumps(channels),
         )
 
+        members = {
+            'ok': 'true',
+            'members': [{'name': 'other-member', 'id': 'member-id'}],
+        }
+
+        responses.add(
+            method=responses.GET,
+            url='https://slack.com/api/users.list',
+            status=200,
+            content_type='application/json',
+            body=json.dumps(members),
+        )
+
         form = rule.get_form_instance()
 
         assert not form.is_valid()
