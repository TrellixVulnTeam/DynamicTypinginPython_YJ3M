commit 1c8a37389234f61bca568e7206b97e7cc7ace6a9
Author: Ben Vinegar <ben@benv.ca>
Date:   Mon Nov 30 14:59:05 2015 -0800

    Prefer let over var (eslintrc change)

diff --git a/.eslintrc b/.eslintrc
index 00b1a7ce0b..cf1ac08852 100644
--- a/.eslintrc
+++ b/.eslintrc
@@ -28,7 +28,7 @@
     /**
      * ES6
      */
-    "no-var": 0,                     // http://eslint.org/docs/rules/no-var
+    "no-var": 2,                     // http://eslint.org/docs/rules/no-var
     "prefer-const": 0,               // http://eslint.org/docs/rules/prefer-const
 
     /**
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx b/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx
index 4ae00995a7..42868fdd69 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx
@@ -48,7 +48,7 @@ const CSPInterface = React.createClass({
     let {view, data} = this.state;
     let {group, event} = this.props;
 
-    var title = (
+    let title = (
       <div>
         <div className="btn-group">
           <a className={(view === 'report' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleView.bind(this, 'report')}>{t('Report')}</a>
diff --git a/src/sentry/static/sentry/app/components/header/broadcasts.jsx b/src/sentry/static/sentry/app/components/header/broadcasts.jsx
index 52f01a7cf7..9a481b3dc2 100644
--- a/src/sentry/static/sentry/app/components/header/broadcasts.jsx
+++ b/src/sentry/static/sentry/app/components/header/broadcasts.jsx
@@ -5,7 +5,7 @@ import DropdownLink from '../dropdownLink';
 import LoadingIndicator from '../loadingIndicator';
 import {t} from '../../locale';
 
-var Broadcasts = React.createClass({
+const Broadcasts = React.createClass({
   getInitialState() {
     return {
       broadcasts: [],
diff --git a/src/sentry/static/sentry/app/locale.jsx b/src/sentry/static/sentry/app/locale.jsx
index 5d0b41443b..1c1a286942 100644
--- a/src/sentry/static/sentry/app/locale.jsx
+++ b/src/sentry/static/sentry/app/locale.jsx
@@ -38,8 +38,8 @@ const i18n = new Jed({
 });
 
 function formatForReact(formatString, args) {
-  var rv = [];
-  var cursor = 0;
+  let rv = [];
+  let cursor = 0;
 
   // always re-parse, do not cache, because we change the match
   sprintf.parse(formatString).forEach((match, idx) => {
@@ -151,7 +151,7 @@ export function renderComponentTemplate(template, components) {
 
     // in case we cannot find our component, we call back to an empty
     // span so that stuff shows up at least.
-    var reference = components[group] || <span />;
+    let reference = components[group] || <span />;
     if (!React.isValidElement(reference)) {
       reference = <span>{reference}</span>;
     }
@@ -171,7 +171,7 @@ function mark(rv) {
     return rv;
   }
 
-  var proxy = {
+  let proxy = {
     $$typeof: Symbol.for('react.element'),
     type: 'span',
     key: null,
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 15a236e1be..71d2b033fd 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -31,7 +31,7 @@ import SharedGroupDetails from './views/sharedGroupDetails';
 import Stream from './views/stream';
 
 function appendTrailingSlash(nextState, replaceState) {
-  var lastChar = nextState.location.pathname.slice(-1);
+  let lastChar = nextState.location.pathname.slice(-1);
   if (lastChar !== '/') {
     replaceState(nextState, nextState.location.pathname + '/');
   }
diff --git a/src/sentry/static/sentry/app/stores/alertStore.jsx b/src/sentry/static/sentry/app/stores/alertStore.jsx
index 9b1e8bb005..fdb97a77ca 100644
--- a/src/sentry/static/sentry/app/stores/alertStore.jsx
+++ b/src/sentry/static/sentry/app/stores/alertStore.jsx
@@ -13,7 +13,7 @@ const AlertStore = Reflux.createStore({
     // intentionally recreate array via concat because of Reflux
     // "bug" where React components are given same reference to tracked
     // data objects, and don't *see* that values have changed
-    var alertId = this.count++;
+    let alertId = this.count++;
 
     this.alerts = this.alerts.concat([{
       id: alertId,
diff --git a/src/sentry/static/sentry/app/translations.jsx b/src/sentry/static/sentry/app/translations.jsx
index 0a8447a734..44f9eeeebb 100644
--- a/src/sentry/static/sentry/app/translations.jsx
+++ b/src/sentry/static/sentry/app/translations.jsx
@@ -1,15 +1,15 @@
 import {_} from 'underscore';
 
 const catalogs = (function() {
-  var info = require('../../../locale/catalogs.json');
+  let info = require('../../../locale/catalogs.json');
   return info.supported_locales;
 })();
 
 const translations = (function() {
-  var ctx = require.context('../../../locale/', true, /\.po$/);
-  var rv = {};
+  let ctx = require.context('../../../locale/', true, /\.po$/);
+  let rv = {};
   ctx.keys().forEach((translation) => {
-    var langCode = translation.match(/([a-zA-Z_]+)/)[1];
+    let langCode = translation.match(/([a-zA-Z_]+)/)[1];
     if (_.contains(catalogs, langCode)) {
       rv[langCode] = ctx(translation);
     }
diff --git a/tests/js/spec/components/assigneeSelector.spec.jsx b/tests/js/spec/components/assigneeSelector.spec.jsx
index 121bf68133..65684f43be 100644
--- a/tests/js/spec/components/assigneeSelector.spec.jsx
+++ b/tests/js/spec/components/assigneeSelector.spec.jsx
@@ -61,14 +61,14 @@ describe('AssigneeSelector', function() {
         assignedTo: null
       });
 
-      var assigneeSelector = this.assigneeSelector =
+      let assigneeSelector = this.assigneeSelector =
         TestUtils.renderIntoDocument(<AssigneeSelector id={1337}/>);
 
       this.sandbox.stub(assigneeSelector, 'assignTo');
     });
 
     it('should assign the first filtered member when the Enter key is pressed and filter is truthy', function () {
-      var assigneeSelector = this.assigneeSelector;
+      let assigneeSelector = this.assigneeSelector;
       assigneeSelector.state.filter = 'Jane';
 
       TestUtils.Simulate.keyDown(assigneeSelector.refs.filter,
@@ -79,7 +79,7 @@ describe('AssigneeSelector', function() {
     });
 
     it('should do nothing when the Enter key is pressed, but filter is the empty string', function () {
-      var assigneeSelector = this.assigneeSelector;
+      let assigneeSelector = this.assigneeSelector;
       assigneeSelector.state.filter = '';
 
       TestUtils.Simulate.keyDown(assigneeSelector.refs.filter,
@@ -89,7 +89,7 @@ describe('AssigneeSelector', function() {
     });
 
     it('should do nothing if a non-Enter key is pressed', function () {
-      var assigneeSelector = this.assigneeSelector;
+      let assigneeSelector = this.assigneeSelector;
       assigneeSelector.state.filter = 'Jane';
 
       TestUtils.Simulate.keyDown(assigneeSelector.refs.filter,
diff --git a/tests/js/spec/views/releaseArtifacts.spec.jsx b/tests/js/spec/views/releaseArtifacts.spec.jsx
index 152c43d382..1ee1b011ac 100644
--- a/tests/js/spec/views/releaseArtifacts.spec.jsx
+++ b/tests/js/spec/views/releaseArtifacts.spec.jsx
@@ -29,9 +29,9 @@ describe('ReleaseArtifacts', function() {
           params={{orgId: '123', projectId: '456', version: 'abcdef'}}/>
       );
 
-      var apiArgs = this.stubbedApiRequest.lastCall.args;
+      let apiArgs = this.stubbedApiRequest.lastCall.args;
       expect(apiArgs[0]).to.eql('/projects/123/456/releases/abcdef/files/');
       expect(apiArgs[1].data).to.have.property('cursor', '0:0:100');
     });
   });
-});
\ No newline at end of file
+});
