commit 9833defd780bf64ffdc905a624c9ff51e7b6cca7
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Mar 12 13:27:39 2020 +0100

    feat(sessions): Added session data to release endpoint (#17620)

diff --git a/src/sentry/api/endpoints/organization_releases.py b/src/sentry/api/endpoints/organization_releases.py
index 771031303f..2ecae92fb6 100644
--- a/src/sentry/api/endpoints/organization_releases.py
+++ b/src/sentry/api/endpoints/organization_releases.py
@@ -11,7 +11,6 @@ from sentry.api.bases.organization import OrganizationReleasesBaseEndpoint
 from sentry.api.exceptions import InvalidRepository
 from sentry.api.paginator import OffsetPaginator, MergingOffsetPaginator
 from sentry.api.serializers import serialize
-from sentry.api.serializers.models.release import ReleaseSerializer
 from sentry.api.serializers.rest_framework import (
     ReleaseHeadCommitSerializer,
     ReleaseHeadCommitSerializerDeprecated,
@@ -236,16 +235,17 @@ class OrganizationReleasesEndpoint(OrganizationReleasesBaseEndpoint, Environment
                 params=[filter_params["start"], filter_params["end"]],
             )
 
-        serializer = ReleaseSerializer(
-            with_health_data=with_health,
-            health_stats_period=health_stats_period,
-            summary_stats_period=summary_stats_period,
-        )
         return self.paginate(
             request=request,
             queryset=queryset,
             paginator_cls=paginator_cls,
-            on_results=lambda x: serialize(x, request.user, serializer=serializer),
+            on_results=lambda x: serialize(
+                x,
+                request.user,
+                with_health_data=with_health,
+                health_stats_period=health_stats_period,
+                summary_stats_period=summary_stats_period,
+            ),
             **paginator_kwargs
         )
 
diff --git a/src/sentry/api/endpoints/project_release_details.py b/src/sentry/api/endpoints/project_release_details.py
index 62b8cedf92..c3efdc39e5 100644
--- a/src/sentry/api/endpoints/project_release_details.py
+++ b/src/sentry/api/endpoints/project_release_details.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 from rest_framework.response import Response
+from rest_framework.exceptions import ParseError
 
 from sentry.api.bases.project import ProjectEndpoint, ProjectReleasePermission
 from sentry.api.exceptions import ResourceDoesNotExist
@@ -10,6 +11,12 @@ from sentry.api.serializers.rest_framework import ReleaseSerializer
 from sentry.models import Activity, Group, Release, ReleaseFile
 from sentry.plugins.interfaces.releasehook import ReleaseHook
 
+from sentry.api.endpoints.organization_releases import (
+    SUMMARY_STATS_PERIOD,
+    HEALTH_STATS_PERIOD,
+    get_stats_period_detail,
+)
+
 
 ERR_RELEASE_REFERENCED = "This release is referenced by active issues and cannot be removed."
 
@@ -31,6 +38,18 @@ class ProjectReleaseDetailsEndpoint(ProjectEndpoint):
         :pparam string version: the version identifier of the release.
         :auth: required
         """
+        with_health = request.GET.get("health") == "1"
+        summary_stats_period = request.GET.get("summaryStatsPeriod") or "48h"
+        health_stats_period = request.GET.get("healthStatsPeriod") or ("24h" if with_health else "")
+        if summary_stats_period not in SUMMARY_STATS_PERIOD:
+            raise ParseError(
+                detail=get_stats_period_detail("summaryStatsPeriod", SUMMARY_STATS_PERIOD)
+            )
+        if health_stats_period not in HEALTH_STATS_PERIOD:
+            raise ParseError(
+                detail=get_stats_period_detail("healthStatsPeriod", HEALTH_STATS_PERIOD)
+            )
+
         try:
             release = Release.objects.get(
                 organization_id=project.organization_id, projects=project, version=version
@@ -38,7 +57,19 @@ class ProjectReleaseDetailsEndpoint(ProjectEndpoint):
         except Release.DoesNotExist:
             raise ResourceDoesNotExist
 
-        return Response(serialize(release, request.user, project=project))
+        if with_health:
+            release._for_project_id = project.id
+
+        return Response(
+            serialize(
+                release,
+                request.user,
+                project=project,
+                with_health_data=with_health,
+                summary_stats_period=summary_stats_period,
+                health_stats_period=health_stats_period,
+            )
+        )
 
     def put(self, request, project, version):
         """
diff --git a/src/sentry/api/serializers/models/release.py b/src/sentry/api/serializers/models/release.py
index f1f7e1bdea..4f7dc359ab 100644
--- a/src/sentry/api/serializers/models/release.py
+++ b/src/sentry/api/serializers/models/release.py
@@ -72,12 +72,6 @@ def get_users_for_authors(organization_id, authors, user=None):
 
 @register(Release)
 class ReleaseSerializer(Serializer):
-    def __init__(self, *args, **kwargs):
-        self.with_health_data = kwargs.pop("with_health_data", False)
-        self.health_stats_period = kwargs.pop("health_stats_period", None)
-        self.summary_stats_period = kwargs.pop("summary_stats_period", None)
-        Serializer.__init__(self, *args, **kwargs)
-
     def _get_commit_metadata(self, item_list, user):
         """
         Returns a dictionary of release_id => commit metadata,
@@ -236,6 +230,10 @@ class ReleaseSerializer(Serializer):
     def get_attrs(self, item_list, user, **kwargs):
         project = kwargs.get("project")
         environment = kwargs.get("environment")
+        with_health_data = kwargs.get("with_health_data", False)
+        health_stats_period = kwargs.get("health_stats_period")
+        summary_stats_period = kwargs.get("summary_stats_period")
+
         if environment is None:
             first_seen, last_seen, issue_counts_by_release = self.__get_release_data_no_environment(
                 project, item_list
@@ -257,11 +255,11 @@ class ReleaseSerializer(Serializer):
             "release_id", "release__version", "project__slug", "project__name", "project__id"
         )
 
-        if self.with_health_data:
+        if with_health_data:
             health_data = get_release_health_data_overview(
                 [(pr["project__id"], pr["release__version"]) for pr in project_releases],
-                health_stats_period=self.health_stats_period,
-                summary_stats_period=self.summary_stats_period,
+                health_stats_period=health_stats_period,
+                summary_stats_period=summary_stats_period,
             )
         else:
             health_data = None
@@ -339,6 +337,7 @@ class ReleaseSerializer(Serializer):
                 "totalUsers": data["total_users"],
                 "adoption": data["adoption"],
                 "stats": data.get("stats"),
+                "hasHealthData": data["has_health_data"],
             }
 
         def expose_project(project):
diff --git a/src/sentry/snuba/sessions.py b/src/sentry/snuba/sessions.py
index 176a0c2319..1f0e007a65 100644
--- a/src/sentry/snuba/sessions.py
+++ b/src/sentry/snuba/sessions.py
@@ -34,6 +34,22 @@ def get_changed_project_release_model_adoptions(project_ids):
     return rv
 
 
+def check_has_health_data(project_releases):
+    conditions = [["release", "IN", list(x[1] for x in project_releases)]]
+    filter_keys = {"project_id": list(set(x[0] for x in project_releases))}
+    return set(
+        (x["project_id"], x["release"])
+        for x in raw_query(
+            dataset=Dataset.Sessions,
+            selected_columns=["release", "project_id"],
+            groupby=["release", "project_id"],
+            start=datetime.utcnow() - timedelta(days=90),
+            conditions=conditions,
+            filter_keys=filter_keys,
+        )["data"]
+    )
+
+
 def get_project_releases_by_stability(
     project_ids, offset, limit, scope, stats_period=None, environments=None
 ):
@@ -131,6 +147,7 @@ def get_release_health_data_overview(
     )["data"]:
         total_users[x["project_id"]] = x["users"]
 
+    missing_releases = set(project_releases)
     rv = {}
     for x in raw_query(
         dataset=Dataset.Sessions,
@@ -164,12 +181,35 @@ def get_release_health_data_overview(
             "sessions_crashed": x["sessions_crashed"],
             "sessions_errored": x["sessions_errored"],
             "adoption": x["users"] / x_total_users * 100 if x_total_users and x["users"] else None,
+            "has_health_data": True,
         }
         if health_stats_period:
             rp["stats"] = {
                 health_stats_period: _make_stats(stats_start, stats_rollup, stats_buckets)
             }
         rv[x["project_id"], x["release"]] = rp
+        missing_releases.discard((x["project_id"], x["release"]))
+
+    # Add releases without data points
+    if missing_releases:
+        has_health_data = check_has_health_data(missing_releases)
+        for key in missing_releases:
+            rv[key] = {
+                "duration_p50": None,
+                "duration_p90": None,
+                "crash_free_users": None,
+                "crash_free_sessions": None,
+                "total_users": 0,
+                "total_sessions": 0,
+                "sessions_crashed": 0,
+                "sessions_errored": 0,
+                "adoption": None,
+                "has_health_data": key in has_health_data,
+            }
+            if health_stats_period:
+                rv[key]["stats"] = {
+                    health_stats_period: _make_stats(stats_start, stats_rollup, stats_buckets)
+                }
 
     if health_stats_period:
         for x in raw_query(
