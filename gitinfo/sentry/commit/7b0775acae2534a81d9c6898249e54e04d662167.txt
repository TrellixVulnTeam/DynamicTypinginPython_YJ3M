commit 7b0775acae2534a81d9c6898249e54e04d662167
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Oct 11 19:08:58 2011 -0700

    Sentry will now setup its default configuration

diff --git a/docs/install/index.rst b/docs/install/index.rst
index 55394846c9..db05818c96 100644
--- a/docs/install/index.rst
+++ b/docs/install/index.rst
@@ -133,7 +133,7 @@ configuration via --config, you will likely want to preface the file with import
 	    }
 	}
 
-	SENTRY_LOG_FILE = '/var/log/sentry.log'
+    SENTRY_LOG_FILE = '/var/log/sentry.log'
     SENTRY_WEB_HOST = '0.0.0.0'
 	SENTRY_WEB_PORT = 9000
 
diff --git a/sentry/scripts/runner.py b/sentry/scripts/runner.py
index a2b9c3fcf9..5ecc3d5f71 100644
--- a/sentry/scripts/runner.py
+++ b/sentry/scripts/runner.py
@@ -15,6 +15,54 @@ from eventlet import wsgi
 from optparse import OptionParser
 from sentry import VERSION
 
+KEY_LENGTH = 40
+
+SETTINGS_TEMPLATE = """
+import os.path
+
+from sentry.conf.server import *
+
+ROOT = os.path.dirname(__file__)
+
+DATABASES = {
+    'default': {
+        # You can swap out the engine for MySQL easily by changing this value
+        # to ``django.db.backends.mysql``
+        'ENGINE': 'django.db.backends.postgresql_psycopg2',
+        'NAME': 'sentry',
+        'USER': 'postgres',
+        'PASSWORD': '',
+        'HOST': '',
+        'PORT': '',
+    }
+}
+
+SENTRY_KEY = %(default_key)r
+
+# Set this to false to require authentication
+SENTRY_PUBLIC = True
+
+SENTRY_WEB_HOST = '0.0.0.0'
+SENTRY_WEB_PORT = 9000
+
+SENTRY_WEB_LOG_FILE = os.path.join(ROOT, 'sentry.log')
+SENTRY_WEB_PID_FILE = os.path.join(ROOT, 'sentry.pid')
+"""
+
+def copy_default_settings(filepath):
+    """
+    Creates a default settings file at ``filepath``.
+    """
+    dirname = os.path.dirname(filepath)
+    if not os.path.exists(dirname):
+        os.makedirs(dirname)
+
+    with open(filepath, 'w') as fp:
+        key = os.urandom(KEY_LENGTH)
+
+        output = SETTINGS_TEMPLATE % dict(default_key=key)
+        fp.write(output)
+
 def settings_from_file(filename, silent=False):
     """
     Configures django settings from an arbitrary (non sys.path) filename.
@@ -28,9 +76,9 @@ def settings_from_file(filename, silent=False):
             return False
         e.strerror = 'Unable to load configuration file (%s)' % e.strerror
         raise
-    
+
     tuple_settings = ("INSTALLED_APPS", "TEMPLATE_DIRS")
-    
+
     if not django_settings.configured:
         django_settings.configure()
 
@@ -54,7 +102,7 @@ class SentryServer(DaemonRunner):
 
         logfile = os.path.realpath(logfile)
         pidfile = os.path.realpath(pidfile or settings.WEB_PID_FILE)
-        
+
         if daemonize:
             detach_process = True
         else:
@@ -80,7 +128,7 @@ class SentryServer(DaemonRunner):
 
         # Upgrade needs to happen before forking
         upgrade()
-        
+
         if self.daemon_context.detach_process is False and self.action == 'start':
             # HACK:
             self.run()
@@ -92,7 +140,7 @@ class SentryServer(DaemonRunner):
 
         def inner_run():
             wsgi.server(eventlet.listen((self.host, self.port)), application)
-            
+
         if self.debug:
             from django.utils import autoreload
             autoreload.main(inner_run)
@@ -105,7 +153,7 @@ def cleanup(days=30, logger=None, site=None, server=None, level=None):
     Deletes a portion of the trailing data in Sentry based on
     their creation dates. For example, if ``days`` is 30, this
     would attempt to clean up all data thats older than 30 days.
-    
+
     :param logger: limit all deletion scopes to messages from the
                    specified logger.
     :param site: limit the message deletion scope to the specified
@@ -123,7 +171,7 @@ def cleanup(days=30, logger=None, site=None, server=None, level=None):
                               MessageFilterValue, FilterValue
     from sentry.utils.query import RangeQuerySetWrapper, SkinnyQuerySet
     import datetime
-    
+
     ts = datetime.datetime.now() - datetime.timedelta(days=days)
 
     # Message
@@ -136,13 +184,13 @@ def cleanup(days=30, logger=None, site=None, server=None, level=None):
         qs = qs.filter(server_name=server)
     if level:
         qs = qs.filter(level__gte=level)
-    
+
     groups_to_check = set()
     for obj in RangeQuerySetWrapper(qs):
         print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
         obj.delete()
         groups_to_check.add(obj.group_id)
-    
+
     if not (server or site):
         # MessageCountByMinute
         qs = SkinnyQuerySet(MessageCountByMinute).filter(date__lte=ts)
@@ -187,7 +235,7 @@ def cleanup(days=30, logger=None, site=None, server=None, level=None):
 
 def upgrade(interactive=True):
     from sentry.conf import settings
-    
+
     call_command('syncdb', database=settings.DATABASE_USING or 'default', interactive=interactive)
 
     if 'south' in django_settings.INSTALLED_APPS:
@@ -231,17 +279,19 @@ def main():
 
     (options, args) = parser.parse_args()
 
-    # Install default server values
-    if not django_settings.configured:
-        os.environ['DJANGO_SETTINGS_MODULE'] = 'sentry.conf.server'
-
     if options.config:
         # assumed to be a file
-        settings_from_file(options.config)
+        config_path = options.config
     else:
         config_path = os.path.expanduser(os.path.join('~', '.sentry', 'sentry.conf.py'))
-        if os.path.exists(config_path):
-            settings_from_file(config_path)
+
+    if not os.path.exists(config_path):
+        try:
+            copy_default_settings(config_path)
+        except OSError, e:
+            raise e.__class__, 'Unable to write default settings file to %r' % config_path
+
+    settings_from_file(config_path)
 
     if getattr(options, 'debug', False):
         django_settings.DEBUG = True
@@ -258,7 +308,7 @@ def main():
     elif args[0] == 'restart':
         app = SentryServer()
         app.execute(args[0])
-  
+
     elif args[0] == 'stop':
         app = SentryServer(pidfile=options.pidfile, logfile=options.logfile)
         app.execute(args[0])
diff --git a/setup.py b/setup.py
index e0153fe6bb..dec48352d4 100755
--- a/setup.py
+++ b/setup.py
@@ -10,31 +10,25 @@ except ImportError:
     from setuptools import setup, find_packages, Command
 
 tests_require = [
-    'Django>=1.2,<1.4',
-
     'nose',
     'django-nose',
 
     # celery
     'django-celery',
-
-    # django migrations
-    'south',
-
-    # haystack support
-    'django-haystack',
-    'whoosh',
-
-    # python-daemon and eventlet are required to run the Sentry independent webserver
-    'python-daemon>=1.6',
-    'eventlet>=0.9.15',
 ]
 
 install_requires = [
+    'Django>=1.2,<1.4',
     'django-paging>=0.2.4',
     'django-indexer>=0.3.0',
     'django-templatetag-sugar>=0.1.0',
     'raven',
+    'python-daemon>=1.6',
+    'eventlet>=0.9.15',
+    'south',
+    # haystack support
+    'django-haystack',
+    'whoosh',
 ]
 
 if sys.version_info[:2] < (2, 5):
