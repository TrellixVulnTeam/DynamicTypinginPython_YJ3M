commit 169df393385f7a2b90651d5743d06f4240380e97
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Jun 27 12:14:16 2018 -0700

    fix(plugins): Fix autocomplete fields in legacy integrations (#8859)
    
    Fixes the autocomplete fields in legacy plugins.

diff --git a/src/sentry/static/sentry/app/components/forms/selectAsyncField.jsx b/src/sentry/static/sentry/app/components/forms/selectAsyncField.jsx
index 3a615a7935..7ec88edd81 100644
--- a/src/sentry/static/sentry/app/components/forms/selectAsyncField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectAsyncField.jsx
@@ -1,6 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import {defined} from 'app/utils';
+
 import SelectAsyncControl from './selectAsyncControl';
 import SelectField from './selectField';
 
@@ -34,6 +36,38 @@ class SelectAsyncField extends SelectField {
     placeholder: 'Start typing to search for an issue',
   };
 
+  componentWillReceiveProps(nextProps, nextContext) {
+    // super.componentWillReceiveProps(nextProps, nextContext);
+    let newError = this.getError(nextProps, nextContext);
+    if (newError != this.state.error) {
+      this.setState({error: newError});
+    }
+    if (this.props.value !== nextProps.value || defined(nextContext.form)) {
+      let newValue = this.getValue(nextProps, nextContext);
+      // This is the only thing that is different from parent, we compare newValue against coerved value in state
+      // To remain compatible with react-select, we need to store the option object that
+      // includes `value` and `label`, but when we submit the format, we need to coerce it
+      // to just return `value`. Also when field changes, it propagates the coerced value up
+      let coercedValue = this.coerceValue(this.state.value);
+
+      // newValue can be empty string because of `getValue`, while coerceValue needs to return null (to differentiate
+      // empty string from cleared item). We could use `!=` to compare, but lets be a bit more explicit with strict equality
+      //
+      // This can happen when this is apart of a field, and it re-renders onChange for a different field,
+      // there will be a mismatch between this component's state.value and `this.getValue` result above
+      if (newValue !== coercedValue && !!newValue !== !!coercedValue) {
+        this.setValue(newValue);
+      }
+    }
+  }
+
+  // Not sure why, but we need this to get react-select's `Creatable` to work properly
+  // Otherwise, when you hit "enter" to create a new item, the "selected value" does
+  // not update with new value (and also new value is not displayed in dropdown)
+  coerceValue(value) {
+    return value ? value.value : '';
+  }
+
   onResults = data => {
     let {name} = this.props;
     let results = data && data[name];
@@ -47,24 +81,17 @@ class SelectAsyncField extends SelectField {
   };
 
   onChange = opt => {
-    let {onChange} = this.props;
-    const value = opt ? opt.value : null;
-    this.setValue(value);
-
-    if (typeof onChange === 'function') {
-      onChange(value);
-    }
+    this.setValue(opt);
   };
 
   getField() {
     return (
       <SelectAsyncControl
+        id={this.getId()}
+        {...this.props}
         value={this.state.value}
-        onClear={this.handleClear}
         onResults={this.onResults}
         onQuery={this.onQuery}
-        {...this.props}
-        id={this.getId()}
         onChange={this.onChange}
       />
     );
diff --git a/tests/js/spec/components/forms/selectAsyncField.spec.jsx b/tests/js/spec/components/forms/selectAsyncField.spec.jsx
index 4eb9a4ea9e..d2d67d06c2 100644
--- a/tests/js/spec/components/forms/selectAsyncField.spec.jsx
+++ b/tests/js/spec/components/forms/selectAsyncField.spec.jsx
@@ -63,6 +63,12 @@ describe('SelectAsyncField', function() {
     // Select item
     wrapper.find('input[id="id-fieldName"]').simulate('keyDown', {keyCode: 13});
 
+    // SelectControl should have the value object, not just a simple value
+    expect(wrapper.find('SelectControl').prop('value')).toEqual({
+      value: 'baz',
+      label: 'Baz Label',
+    });
+
     wrapper.find('Form').simulate('submit');
     expect(submitMock).toHaveBeenCalledWith(
       {
diff --git a/tests/js/spec/components/forms/selectCreatableField.spec.jsx b/tests/js/spec/components/forms/selectCreatableField.spec.jsx
index 0c37e76026..ff0c9ed6d3 100644
--- a/tests/js/spec/components/forms/selectCreatableField.spec.jsx
+++ b/tests/js/spec/components/forms/selectCreatableField.spec.jsx
@@ -113,6 +113,14 @@ describe('SelectCreatableField', function() {
       },
     ]);
 
+    // SelectControl should have the value object, not just a simple value
+    expect(wrapper.find('SelectControl').prop('value')).toEqual(
+      expect.objectContaining({
+        value: 'bar',
+        label: 'bar',
+      })
+    );
+
     wrapper.find('Form').simulate('submit');
     expect(submitMock).toHaveBeenCalledWith(
       {
