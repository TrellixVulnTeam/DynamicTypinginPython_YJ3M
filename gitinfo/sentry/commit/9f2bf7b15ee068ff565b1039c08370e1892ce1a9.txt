commit 9f2bf7b15ee068ff565b1039c08370e1892ce1a9
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Apr 3 20:37:03 2012 -0700

    Clean up API for caling plugin actions and move them into their own template lib

diff --git a/sentry/templates/sentry/groups/details.html b/sentry/templates/sentry/groups/details.html
index b3ff96049f..fe2fa1dc71 100644
--- a/sentry/templates/sentry/groups/details.html
+++ b/sentry/templates/sentry/groups/details.html
@@ -2,6 +2,7 @@
 
 {% load i18n %}
 {% load sentry_helpers %}
+{% load sentry_plugins %}
 
 {% block title %}{{ group.error }} | {{ block.super }}{% endblock %}
 
diff --git a/sentry/templates/sentry/groups/group_list.html b/sentry/templates/sentry/groups/group_list.html
index 302c1759fc..6daa6794ac 100644
--- a/sentry/templates/sentry/groups/group_list.html
+++ b/sentry/templates/sentry/groups/group_list.html
@@ -2,6 +2,7 @@
 
 {% load i18n %}
 {% load sentry_helpers %}
+{% load sentry_plugins %}
 
 {% block meta %}
     {{ block.super }}
diff --git a/sentry/templates/sentry/partial/_event.html b/sentry/templates/sentry/partial/_event.html
index 129ddee860..6263d11007 100644
--- a/sentry/templates/sentry/partial/_event.html
+++ b/sentry/templates/sentry/partial/_event.html
@@ -1,4 +1,5 @@
 {% load sentry_helpers %}
+{% load sentry_plugins %}
 
 <li class="event level-{{ event.get_level_display }}" id="message_{{ event.pk|safe }}">
     <div class="details">
diff --git a/sentry/templates/sentry/partial/_group.html b/sentry/templates/sentry/partial/_group.html
index 0049e6d548..d7b6f30d50 100644
--- a/sentry/templates/sentry/partial/_group.html
+++ b/sentry/templates/sentry/partial/_group.html
@@ -1,5 +1,6 @@
 {% load i18n %}
 {% load sentry_helpers %}
+{% load sentry_plugins %}
 
 <li class="event level-{{ group.get_level_display }}{% if group.status == 1 %} resolved{% endif %}" id="group_{{ group.pk|safe }}" data-count="{{ group.times_seen }}" data-score="{{ group.sort_value }}">
     <div class="count"><span>{{ group.times_seen|small_count }}</span></div>
diff --git a/sentry/templates/sentry/projects/manage.html b/sentry/templates/sentry/projects/manage.html
index 348eaf998a..ff25e6d314 100644
--- a/sentry/templates/sentry/projects/manage.html
+++ b/sentry/templates/sentry/projects/manage.html
@@ -2,6 +2,7 @@
 
 {% load i18n %}
 {% load sentry_helpers %}
+{% load sentry_plugins %}
 
 {% block title %}{% blocktrans with project.name as name %}Manage Project: {{ name }}{% endblocktrans %} | {{ block.super }}{% endblock %}
 
diff --git a/sentry/templates/sentry/projects/plugins/list.html b/sentry/templates/sentry/projects/plugins/list.html
index 0f185c0416..ad10071903 100644
--- a/sentry/templates/sentry/projects/plugins/list.html
+++ b/sentry/templates/sentry/projects/plugins/list.html
@@ -2,6 +2,7 @@
 
 {% load i18n %}
 {% load sentry_helpers %}
+{% load sentry_plugins %}
 
 {% block title %}{% trans "Manage Plugins" %} | {{ block.super }}{% endblock %}
 
diff --git a/sentry/templates/sentry/search.html b/sentry/templates/sentry/search.html
index 23d75fdf73..312193c858 100644
--- a/sentry/templates/sentry/search.html
+++ b/sentry/templates/sentry/search.html
@@ -2,6 +2,7 @@
 
 {% load i18n %}
 {% load sentry_helpers %}
+{% load sentry_plugins %}
 
 {% block heading %}{% trans "Search" %}{% endblock %}
 
diff --git a/sentry/templatetags/sentry_helpers.py b/sentry/templatetags/sentry_helpers.py
index 5902905e41..2c6635e7b6 100644
--- a/sentry/templatetags/sentry_helpers.py
+++ b/sentry/templatetags/sentry_helpers.py
@@ -16,14 +16,12 @@ from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext as _
 from paging.helpers import paginate as paginate_func
 from sentry.conf import settings
-from sentry.plugins import plugins
 from sentry.utils import json
 from sentry.utils.dates import utc_to_local, local_to_utc
 from templatetag_sugar.register import tag
 from templatetag_sugar.parser import Name, Variable, Constant, Optional
 
 import datetime
-import logging
 
 register = template.Library()
 
@@ -133,86 +131,6 @@ def sentry_version():
     return sentry.VERSION
 
 
-@register.filter
-def get_actions(group, request):
-    action_list = []
-    for inst in plugins.all():
-        try:
-            action_list = inst.actions(request, group, action_list)
-        except Exception, e:
-            logger = logging.getLogger('sentry.plugins')
-            logger.error('Error processing actions() on %r: %s', inst.__class__, e, extra={
-                'request': request,
-            }, exc_info=True)
-
-    for action in action_list:
-        yield action[0], action[1], request.path == action[1]
-
-
-@register.filter
-def get_panels(group, request):
-    panel_list = []
-    for inst in plugins.all():
-        try:
-            panel_list = inst.panels(request, group, panel_list)
-        except Exception, e:
-            logger = logging.getLogger('sentry.plugins')
-            logger.error('Error processing panels() on %r: %s', inst.__class__, e, extra={
-                'request': request,
-            }, exc_info=True)
-
-    for panel in panel_list:
-        yield panel[0], panel[1], request.path == panel[1]
-
-
-@register.filter
-def get_widgets(group, request):
-    for inst in plugins.all():
-        try:
-            resp = inst.widget(request, group)
-            if resp:
-                resp = resp.render(request)
-        except Exception, e:
-            logger = logging.getLogger('sentry.plugins')
-            logger.error('Error processing widget() on %r: %s', inst.__class__, e, extra={
-                'request': request,
-            }, exc_info=True)
-            continue
-        if resp:
-            yield resp
-
-
-@register.filter
-def get_tags(group, request):
-    tag_list = []
-    for inst in plugins.all():
-        try:
-            tag_list = inst.tags(request, group, tag_list)
-        except Exception, e:
-            logger = logging.getLogger('sentry.plugins')
-            logger.error('Error processing tags() on %r: %s', inst.__class__, e, extra={
-                'request': request,
-            }, exc_info=True)
-
-    for tag in tag_list:
-        yield tag
-
-
-@register.simple_tag
-def handle_before_events(request, event_list):
-    if not hasattr(event_list, '__iter__'):
-        event_list = [event_list]
-    for inst in plugins.all():
-        try:
-            inst.before_events(request, event_list)
-        except Exception, e:
-            logger = logging.getLogger('sentry.plugins')
-            logger.error('Error processing before_events() on %r: %s', inst.__class__, e, extra={
-                'request': request,
-            }, exc_info=True)
-    return ''
-
-
 @register.filter
 def timesince(value):
     from django.template.defaultfilters import timesince
@@ -367,14 +285,3 @@ def get_project_dsn(context, user, project, asvar):
         context[asvar] = member.get_dsn()
 
     return ''
-
-
-@register.filter
-def get_plugins(project):
-    return plugins.for_project(project)
-
-
-@register.filter
-def get_plugins_with_status(project):
-    for plugin in plugins.all():
-        yield plugin, plugin.is_enabled(project)
diff --git a/sentry/templatetags/sentry_plugins.py b/sentry/templatetags/sentry_plugins.py
new file mode 100644
index 0000000000..9d72aff087
--- /dev/null
+++ b/sentry/templatetags/sentry_plugins.py
@@ -0,0 +1,119 @@
+"""
+sentry.templatetags.sentry_plugins
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django import template
+
+from sentry.plugins import plugins
+from sentry.utils import safe_execute
+
+register = template.Library()
+
+
+@register.filter
+def get_actions(group, request):
+    project = group.project
+
+    action_list = []
+    for plugin in plugins.all():
+        if not safe_execute(plugin.is_enabled, project):
+            continue
+
+        results = safe_execute(plugin.actions, request, group, action_list)
+
+        if not results:
+            continue
+
+        action_list += results
+
+    for action in action_list:
+        yield action[0], action[1], request.path == action[1]
+
+
+@register.filter
+def get_panels(group, request):
+    project = group.project
+
+    panel_list = []
+    for plugin in plugins.all():
+        if not safe_execute(plugin.is_enabled, project):
+            continue
+
+        results = safe_execute(plugin.panels, request, group, panel_list)
+
+        if not results:
+            continue
+
+        panel_list += results
+
+    for panel in panel_list:
+        yield panel[0], panel[1], request.path == panel[1]
+
+
+@register.filter
+def get_widgets(group, request):
+    project = group.project
+
+    for plugin in plugins.all():
+        if not safe_execute(plugin.is_enabled, project):
+            continue
+
+        resp = safe_execute(plugin.widget, request, group)
+
+        if resp:
+            yield resp.render(request)
+
+
+@register.filter
+def get_tags(group, request):
+    project = group.project
+
+    tag_list = []
+    for plugin in plugins.all():
+        if not safe_execute(plugin.is_enabled, project):
+            continue
+
+        results = safe_execute(plugin.tags, request, group, tag_list)
+
+        if not results:
+            continue
+
+        tag_list += results
+
+    for tag in tag_list:
+        yield tag
+
+
+@register.simple_tag
+def handle_before_events(request, event_list):
+    if not hasattr(event_list, '__iter__'):
+        project = event_list.project
+        event_list = [event_list]
+    else:
+        projects = set(e.project for e in event_list)
+        if len(projects) == 1:
+            project = projects.pop()
+        else:
+            project = None
+
+    for plugin in plugins.all():
+        if not safe_execute(plugin.is_enabled, project):
+            continue
+
+        safe_execute(plugin.before_events, request, event_list)
+
+    return ''
+
+
+@register.filter
+def get_plugins(project):
+    return plugins.for_project(project)
+
+
+@register.filter
+def get_plugins_with_status(project):
+    for plugin in plugins.all():
+        yield plugin, safe_execute(plugin.is_enabled, project)
diff --git a/sentry/utils/__init__.py b/sentry/utils/__init__.py
index b7a74f6a7e..f694682a33 100644
--- a/sentry/utils/__init__.py
+++ b/sentry/utils/__init__.py
@@ -15,6 +15,19 @@ from django.http import HttpRequest
 from django.utils.encoding import force_unicode
 
 
+def safe_execute(func, *args, **kwargs):
+    try:
+        return func(*args, **kwargs)
+    except Exception, e:
+        cls = func.__class__
+        logger = logging.getLogger('sentry.plugins')
+        logger.error('Error processing %r on %%r: %%s' % func.__name__, cls.__name__, e, extra={
+            'func_module': cls.__module__,
+            'func_args': args,
+            'func_kwargs': kwargs,
+        }, exc_info=True)
+
+
 class InstanceManager(object):
     def __init__(self, class_list=None, instances=True):
         if class_list is None:
