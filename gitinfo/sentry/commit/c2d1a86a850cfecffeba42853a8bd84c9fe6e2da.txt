commit c2d1a86a850cfecffeba42853a8bd84c9fe6e2da
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Jul 24 11:28:12 2018 -0700

    feat(form): Support observed field props as functions (#9166)

diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
index ccfa1d2c55..e3626df6a6 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
@@ -159,6 +159,13 @@ class MockModel {
   }
 }
 
+/**
+ * This is a list of field properties that can accept a function taking the
+ * form model, that will be called to determine the value of the prop upon an
+ * observed change in the model.
+ */
+const propsToObserver = ['inline', 'highlighted'];
+
 class FormField extends React.Component {
   static propTypes = {
     name: PropTypes.string.isRequired,
@@ -336,9 +343,9 @@ class FormField extends React.Component {
     let model = this.getModel();
     let saveOnBlurFieldOverride = typeof saveOnBlur !== 'undefined' && !saveOnBlur;
 
-    return (
+    const makeField = extraProps => (
       <React.Fragment>
-        <Field id={id} name={name} className={className} {...props}>
+        <Field id={id} name={name} className={className} {...props} {...extraProps}>
           {({alignRight, inline, disabled, disabledReason}) => (
             <FieldControl
               disabled={disabled}
@@ -422,6 +429,19 @@ class FormField extends React.Component {
         )}
       </React.Fragment>
     );
+
+    const observedProps = propsToObserver
+      .filter(p => typeof this.props[p] === 'function')
+      .map(p => [p, () => this.props[p](model)]);
+
+    // This field has no properties that require observation to compute their
+    // value, this field is static and will not be re-rendered.
+    if (observedProps.length === 0) return makeField();
+
+    const reducer = (a, [prop, fn]) => ({...a, [prop]: fn()});
+    const observedPropsFn = () => makeField(observedProps.reduce(reducer, {}));
+
+    return <Observer>{observedPropsFn}</Observer>;
   }
 }
 
