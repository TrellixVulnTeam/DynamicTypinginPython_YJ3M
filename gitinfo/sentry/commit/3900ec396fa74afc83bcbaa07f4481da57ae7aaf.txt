commit 3900ec396fa74afc83bcbaa07f4481da57ae7aaf
Author: josh <josh@jrl.ninja>
Date:   Mon Oct 28 11:42:29 2019 -0700

    py3(django): pytest startup and test collection on Django 1.9 (#15282)

diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml
index 8993318726..09e9032609 100644
--- a/.pre-commit-config.yaml
+++ b/.pre-commit-config.yaml
@@ -25,7 +25,7 @@ repos:
     hooks:
     - id: black
       types: [python]
-      exclude: (south_migrations/)
+      exclude: (south_migrations/|migrations/)
 -   repo: git://github.com/pre-commit/pre-commit-hooks
     rev: v1.3.0
     hooks:
diff --git a/.travis.yml b/.travis.yml
index 5bba15a004..d3b459278a 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -34,6 +34,7 @@ env:
     - SENTRY_LIGHT_BUILD=1
     - SENTRY_SKIP_BACKEND_VALIDATION=1
     - MIGRATIONS_TEST_MIGRATE=0
+    # Use this to override the django version in the requirements file.
     - DJANGO_VERSION=">=1.8,<1.9"
     # node's version is pinned by .nvmrc and is autodetected by `nvm install`.
     - NODE_DIR="${HOME}/.nvm/versions/node/v$(< .nvmrc)"
@@ -81,7 +82,7 @@ base_postgres: &postgres_default
     - docker ps -a
   install:
     - python setup.py install_egg_info
-    - pip install -U -e ".[dev,tests,optional]"
+    - pip install -U -e ".[dev,optional]"
   before_script:
     - psql -c 'create database sentry;' -U postgres
 
@@ -101,7 +102,7 @@ base_acceptance: &acceptance_default
   install:
     - ./bin/yarn install --pure-lockfile
     - python setup.py install_egg_info
-    - pip install -U -e ".[dev,tests,optional]"
+    - pip install -U -e ".[dev,optional]"
     - |
       CHROME_MAJOR_VERSION="$(dpkg -s google-chrome-stable | sed -nr 's/Version: ([0-9]+).*/\1/p')"
       wget -N "https://chromedriver.storage.googleapis.com/$(curl https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MAJOR_VERSION})/chromedriver_linux64.zip" -P ~/
@@ -124,7 +125,7 @@ matrix:
       env: TEST_SUITE=lint
       install:
         - python setup.py install_egg_info
-        - SENTRY_LIGHT_BUILD=1 pip install -U -e ".[dev,tests,optional]"
+        - SENTRY_LIGHT_BUILD=1 pip install -U -e ".[dev,optional]"
         - find "$NODE_DIR" -type d -empty -delete
         - nvm install
         - ./bin/yarn install --pure-lockfile
@@ -132,6 +133,7 @@ matrix:
     - <<: *postgres_default
       name: 'Backend [Postgres] (1/2)'
       env: TEST_SUITE=postgres DB=postgres TOTAL_TEST_GROUPS=2 TEST_GROUP=0
+
     - <<: *postgres_default
       name: 'Backend [Postgres] (2/2)'
       env: TEST_SUITE=postgres DB=postgres TOTAL_TEST_GROUPS=2 TEST_GROUP=1
@@ -147,6 +149,21 @@ matrix:
       name: 'Acceptance'
       env: TEST_SUITE=acceptance USE_SNUBA=1
 
+    # allowed to fail
+    - <<: *postgres_default
+      name: 'Django 1.9 Backend [Postgres] (1/2)'
+      env: DJANGO_VERSION=">=1.9,<1.10" TEST_SUITE=postgres DB=postgres TOTAL_TEST_GROUPS=2 TEST_GROUP=0
+
+    # allowed to fail
+    - <<: *postgres_default
+      name: 'Django 1.9 Backend [Postgres] (2/2)'
+      env: DJANGO_VERSION=">=1.9,<1.10" TEST_SUITE=postgres DB=postgres TOTAL_TEST_GROUPS=2 TEST_GROUP=1
+
+    # allowed to fail
+    - <<: *acceptance_default
+      name: 'Django 1.9 Acceptance'
+      env: DJANGO_VERSION=">=1.9,<1.10" TEST_SUITE=acceptance USE_SNUBA=1
+
     - python: 2.7
       name: 'Frontend'
       env: TEST_SUITE=js
@@ -184,7 +201,6 @@ matrix:
         - docker run -d --network host --name symbolicator us.gcr.io/sentryio/symbolicator:latest run
         - docker ps -a
 
-    # snuba in testing
     - python: 2.7
       name: 'Snuba Integration'
       env: TEST_SUITE=snuba USE_SNUBA=1 SENTRY_ZOOKEEPER_HOSTS=localhost:2181 SENTRY_KAFKA_HOSTS=localhost:9092
@@ -201,7 +217,7 @@ matrix:
         - docker ps -a
       install:
         - python setup.py install_egg_info
-        - pip install -U -e ".[dev,tests,optional]"
+        - pip install -U -e ".[dev,optional]"
         - pip install confluent-kafka
       before_script:
         - psql -c 'create database sentry;' -U postgres
@@ -230,6 +246,9 @@ matrix:
   allow_failures:
     - language: node_js
       env: STORYBOOK_BUILD=1
+    - env: DJANGO_VERSION=">=1.9,<1.10" TEST_SUITE=postgres DB=postgres TOTAL_TEST_GROUPS=2 TEST_GROUP=0
+    - env: DJANGO_VERSION=">=1.9,<1.10" TEST_SUITE=postgres DB=postgres TOTAL_TEST_GROUPS=2 TEST_GROUP=1
+    - env: DJANGO_VERSION=">=1.9,<1.10" TEST_SUITE=acceptance USE_SNUBA=1
 
 notifications:
   webhooks:
diff --git a/pyproject.toml b/pyproject.toml
index 0e8aa257f0..32676e87c9 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -7,5 +7,6 @@ exclude='''
       \.venv/
     | node_modules/
     | south_migrations/
+    | migrations/
 )
 '''
diff --git a/setup.py b/setup.py
index 123ba7c163..c50a9962ac 100755
--- a/setup.py
+++ b/setup.py
@@ -135,11 +135,7 @@ setup(
     packages=find_packages("src"),
     zip_safe=False,
     install_requires=install_requires,
-    extras_require={
-        "dev": dev_requires,
-        "postgres": [],
-        "optional": optional_requires,
-    },
+    extras_require={"dev": dev_requires, "postgres": [], "optional": optional_requires},
     cmdclass=cmdclass,
     license="BSD",
     include_package_data=True,
diff --git a/src/debug_toolbar/panels/signals.py b/src/debug_toolbar/panels/signals.py
index d6d9166f65..0bda5f0a45 100644
--- a/src/debug_toolbar/panels/signals.py
+++ b/src/debug_toolbar/panels/signals.py
@@ -12,7 +12,7 @@ from django.db.models.signals import (
     post_save,
     pre_delete,
     post_delete,
-    post_syncdb,
+    post_migrate,
 )
 
 from django.utils.translation import ugettext_lazy as _, ungettext
@@ -36,7 +36,7 @@ class SignalsPanel(Panel):
         "post_save": post_save,
         "pre_delete": pre_delete,
         "post_delete": post_delete,
-        "post_syncdb": post_syncdb,
+        "post_migrate": post_migrate,
     }
 
     def nav_subtitle(self):
diff --git a/src/sentry/api/endpoints/sentry_apps_stats.py b/src/sentry/api/endpoints/sentry_apps_stats.py
index 186879cf42..82d0332c8e 100644
--- a/src/sentry/api/endpoints/sentry_apps_stats.py
+++ b/src/sentry/api/endpoints/sentry_apps_stats.py
@@ -12,19 +12,18 @@ class SentryAppsStatsEndpoint(SentryAppsBaseEndpoint):
     permission_classes = (SuperuserPermission,)
 
     def get(self, request):
-        sentry_apps = SentryApp.objects \
-            .filter(installations__date_deleted=None) \
-            .annotate(Count("installations")) \
+        sentry_apps = (
+            SentryApp.objects.filter(installations__date_deleted=None)
+            .annotate(Count("installations"))
             .order_by()
+        )
 
-        if 'per_page' in request.query_params:
-            sentry_apps = sentry_apps[:int(request.query_params['per_page'])]
+        if "per_page" in request.query_params:
+            sentry_apps = sentry_apps[: int(request.query_params["per_page"])]
 
-        apps = [{
-            "id": app.id,
-            "slug": app.slug,
-            "name": app.name,
-            "installs": app.installations__count,
-        } for app in sentry_apps]
+        apps = [
+            {"id": app.id, "slug": app.slug, "name": app.name, "installs": app.installations__count}
+            for app in sentry_apps
+        ]
 
         return Response(apps)
diff --git a/src/sentry/db/models/fields/foreignkey.py b/src/sentry/db/models/fields/foreignkey.py
index 6ba9d41767..c1a30d7599 100644
--- a/src/sentry/db/models/fields/foreignkey.py
+++ b/src/sentry/db/models/fields/foreignkey.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import django
 from django.conf import settings
 from django.db.models import ForeignKey
 
@@ -9,7 +10,10 @@ __all__ = ("FlexibleForeignKey",)
 class FlexibleForeignKey(ForeignKey):
     def db_type(self, connection):
         # This is required to support BigAutoField (or anything similar)
-        rel_field = self.related_field
+        if django.VERSION >= (1, 9):
+            rel_field = self.target_field
+        else:
+            rel_field = self.related_field
         if hasattr(rel_field, "get_related_db_type"):
             return rel_field.get_related_db_type(connection)
         return super(FlexibleForeignKey, self).db_type(connection)
diff --git a/src/sentry/grouping/strategies/base.py b/src/sentry/grouping/strategies/base.py
index 08c5ded88e..34bcf72f18 100644
--- a/src/sentry/grouping/strategies/base.py
+++ b/src/sentry/grouping/strategies/base.py
@@ -198,7 +198,9 @@ class StrategyConfiguration(object):
         }
 
 
-def create_strategy_configuration(id, strategies=None, delegates=None, changelog=None, hidden=False):
+def create_strategy_configuration(
+    id, strategies=None, delegates=None, changelog=None, hidden=False
+):
     class NewStrategyConfiguration(StrategyConfiguration):
         pass
 
diff --git a/src/sentry/grouping/strategies/legacy.py b/src/sentry/grouping/strategies/legacy.py
index 864221e1b8..6e3992eea7 100644
--- a/src/sentry/grouping/strategies/legacy.py
+++ b/src/sentry/grouping/strategies/legacy.py
@@ -341,21 +341,15 @@ def frame_legacy(frame, event, **meta):
             fallback_hint = "is not used if module or filename are available"
         if frame.symbol:
             symbol_component.update(
-                contributes=False,
-                values=[frame.symbol],
-                hint="symbol " + fallback_hint,
+                contributes=False, values=[frame.symbol], hint="symbol " + fallback_hint
             )
         if func:
             function_component.update(
-                contributes=False,
-                values=[func],
-                hint="function name " + fallback_hint,
+                contributes=False, values=[func], hint="function name " + fallback_hint
             )
         if frame.lineno:
             lineno_component.update(
-                contributes=False,
-                values=[frame.lineno],
-                hint="line number " + fallback_hint,
+                contributes=False, values=[frame.lineno], hint="line number " + fallback_hint
             )
 
     return GroupingComponent(
diff --git a/src/sentry/integrations/gitlab/client.py b/src/sentry/integrations/gitlab/client.py
index 3d706f54f0..774e676538 100644
--- a/src/sentry/integrations/gitlab/client.py
+++ b/src/sentry/integrations/gitlab/client.py
@@ -129,7 +129,11 @@ class GitLabApiClient(ApiClient):
         # Really useful, because we often don't need most of the project information
         return self.get(
             GitLabApiClientPath.group_projects.format(group=group),
-            params={"search": query, "simple": simple, "include_subgroups": self.metadata.get("include_subgroups", False)},
+            params={
+                "search": query,
+                "simple": simple,
+                "include_subgroups": self.metadata.get("include_subgroups", False),
+            },
         )
 
     def get_project(self, project_id):
diff --git a/src/sentry/integrations/gitlab/integration.py b/src/sentry/integrations/gitlab/integration.py
index 212c086786..74d3a706a2 100644
--- a/src/sentry/integrations/gitlab/integration.py
+++ b/src/sentry/integrations/gitlab/integration.py
@@ -137,9 +137,7 @@ class InstallationForm(forms.Form):
     )
     include_subgroups = forms.BooleanField(
         label=_("Include Subgroups"),
-        help_text=_(
-            "Include projects in subgroups of the GitLab group."
-        ),
+        help_text=_("Include projects in subgroups of the GitLab group."),
         widget=forms.CheckboxInput(),
         required=False,
         initial=False,
diff --git a/src/sentry/integrations/slack/notify_action.py b/src/sentry/integrations/slack/notify_action.py
index d1005534c8..aba433466a 100644
--- a/src/sentry/integrations/slack/notify_action.py
+++ b/src/sentry/integrations/slack/notify_action.py
@@ -170,12 +170,15 @@ class SlackNotifyServiceAction(EventAction):
         channels_list_initial = True
         while cursor or channels_list_initial:
             channels_list_initial = False
-            channels = session.get("https://slack.com/api/channels.list", params=dict(channels_payload, **{
-                "cursor": cursor
-            }))
+            channels = session.get(
+                "https://slack.com/api/channels.list",
+                params=dict(channels_payload, **{"cursor": cursor}),
+            )
             channels = channels.json()
             if not channels.get("ok"):
-                self.logger.info("rule.slack.channel_list_failed", extra={"error": channels.get("error")})
+                self.logger.info(
+                    "rule.slack.channel_list_failed", extra={"error": channels.get("error")}
+                )
                 return None
 
             cursor = channels.get("response_metadata", {}).get("next_cursor", None)
@@ -189,12 +192,15 @@ class SlackNotifyServiceAction(EventAction):
         groups_list_initial = True
         while cursor or groups_list_initial:
             groups_list_initial = False
-            groups = session.get("https://slack.com/api/groups.list", params=dict(channels_payload, **{
-                "cursor": cursor
-            }))
+            groups = session.get(
+                "https://slack.com/api/groups.list",
+                params=dict(channels_payload, **{"cursor": cursor}),
+            )
             groups = groups.json()
             if not groups.get("ok"):
-                self.logger.info("rule.slack.group_list_failed", extra={"error": groups.get("error")})
+                self.logger.info(
+                    "rule.slack.group_list_failed", extra={"error": groups.get("error")}
+                )
                 return None
 
             cursor = groups.get("response_metadata", {}).get("next_cursor", None)
@@ -208,9 +214,10 @@ class SlackNotifyServiceAction(EventAction):
         users_list_initial = True
         while cursor or users_list_initial:
             users_list_initial = False
-            users = session.get("https://slack.com/api/users.list", params=dict(channels_payload, **{
-                "cursor": cursor
-            }))
+            users = session.get(
+                "https://slack.com/api/users.list",
+                params=dict(channels_payload, **{"cursor": cursor}),
+            )
             users = users.json()
             if not users.get("ok"):
                 self.logger.info("rule.slack.user_list_failed", extra={"error": users.get("error")})
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index f9422b8b75..7c91f7fd49 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -1,7 +1,10 @@
 from __future__ import absolute_import
 
-from sentry.lang.native.processing import process_applecrashreport, \
-    process_minidump, process_payload
+from sentry.lang.native.processing import (
+    process_applecrashreport,
+    process_minidump,
+    process_payload,
+)
 from sentry.lang.native.minidump import is_minidump_event
 from sentry.lang.native.utils import is_native_event
 from sentry.lang.native.unreal import is_applecrashreport_event
diff --git a/src/sentry/models/scheduledeletion.py b/src/sentry/models/scheduledeletion.py
index 829ff097bf..3a8e07d976 100644
--- a/src/sentry/models/scheduledeletion.py
+++ b/src/sentry/models/scheduledeletion.py
@@ -1,8 +1,8 @@
 from __future__ import absolute_import
 
 from datetime import timedelta
+from django.apps import apps
 from django.db import models
-from django.db.models import get_model
 from django.utils import timezone
 from uuid import uuid4
 
@@ -48,7 +48,7 @@ class ScheduledDeletion(Model):
         )
 
     def get_model(self):
-        return get_model(self.app_label, self.model_name)
+        return apps.get_model(self.app_label, self.model_name)
 
     def get_instance(self):
         return self.get_model().objects.get(pk=self.object_id)
diff --git a/src/sentry/projectoptions/defaults.py b/src/sentry/projectoptions/defaults.py
index 38fd3594bd..533b163fb4 100644
--- a/src/sentry/projectoptions/defaults.py
+++ b/src/sentry/projectoptions/defaults.py
@@ -15,19 +15,17 @@ LATEST_EPOCH = 3
 # epoch instead.
 LEGACY_GROUPING_CONFIG = "legacy:2019-03-12"
 DEFAULT_GROUPING_CONFIG = "newstyle:2019-05-08"
-register(key="sentry:grouping_config", epoch_defaults={
-    1: LEGACY_GROUPING_CONFIG,
-    3: DEFAULT_GROUPING_CONFIG,
-})
+register(
+    key="sentry:grouping_config",
+    epoch_defaults={1: LEGACY_GROUPING_CONFIG, 3: DEFAULT_GROUPING_CONFIG},
+)
 
 # Grouping enhancements defaults
 LEGACY_GROUPING_ENHANCEMENTS_BASE = "legacy:2019-03-12"
 DEFAULT_GROUPING_ENHANCEMENTS_BASE = "common:2019-03-23"
 register(
-    key="sentry:grouping_enhancements_base", epoch_defaults={
-        1: LEGACY_GROUPING_ENHANCEMENTS_BASE,
-        3: DEFAULT_GROUPING_ENHANCEMENTS_BASE,
-    }
+    key="sentry:grouping_enhancements_base",
+    epoch_defaults={1: LEGACY_GROUPING_ENHANCEMENTS_BASE, 3: DEFAULT_GROUPING_ENHANCEMENTS_BASE},
 )
 register(key="sentry:grouping_enhancements", default=u"")
 
diff --git a/src/sentry/receivers/core.py b/src/sentry/receivers/core.py
index 19b9a94047..03d168e267 100644
--- a/src/sentry/receivers/core.py
+++ b/src/sentry/receivers/core.py
@@ -7,7 +7,6 @@ from django.conf import settings
 from django.db import connections, transaction
 from django.db.utils import OperationalError, ProgrammingError
 from django.db.models.signals import post_migrate, post_save
-
 from functools import wraps
 from pkg_resources import parse_version as Version
 
diff --git a/src/sentry/reprocessing.py b/src/sentry/reprocessing.py
index 1cda327f5e..85dea76c5b 100644
--- a/src/sentry/reprocessing.py
+++ b/src/sentry/reprocessing.py
@@ -14,6 +14,7 @@ def event_supports_reprocessing(data):
     """Only events of a certain format support reprocessing."""
     from sentry.stacktraces.processing import find_stacktraces_in_data
     from sentry.stacktraces.platform import NATIVE_PLATFORMS, JAVASCRIPT_PLATFORMS
+
     platform = data.get("platform")
     if platform in NATIVE_PLATFORMS:
         return True
diff --git a/src/sentry/runner/commands/backup.py b/src/sentry/runner/commands/backup.py
index 9e6750bdf9..19d5b03885 100644
--- a/src/sentry/runner/commands/backup.py
+++ b/src/sentry/runner/commands/backup.py
@@ -21,14 +21,14 @@ def sort_dependencies(app_list):
     Similar to Django's except that we discard the important of natural keys
     when sorting dependencies (i.e. it works without them).
     """
-    from django.db.models import get_model, get_models
+    from django.apps import apps
 
     # Process the list of models, and get the list of dependencies
     model_dependencies = []
     models = set()
     for app, model_list in app_list:
         if model_list is None:
-            model_list = get_models(app)
+            model_list = apps.get_app_config(app).get_models()
 
         for model in model_list:
             models.add(model)
@@ -36,7 +36,7 @@ def sort_dependencies(app_list):
             if hasattr(model, "natural_key"):
                 deps = getattr(model.natural_key, "dependencies", [])
                 if deps:
-                    deps = [get_model(*d.split(".")) for d in deps]
+                    deps = [apps.get_model(*d.split(".")) for d in deps]
             else:
                 deps = []
 
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index 73f00e5989..52c2bf5e50 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -266,9 +266,6 @@ def initialize_app(config, skip_service_validation=False):
 
     if "south" in settings.INSTALLED_APPS:
         fix_south(settings)
-    monkeypatch_django_migrations()
-
-    apply_legacy_settings(settings)
 
     # Commonly setups don't correctly configure themselves for production envs
     # so lets try to provide a bit more guidance
@@ -306,9 +303,11 @@ def initialize_app(config, skip_service_validation=False):
 
     import django
 
-    if hasattr(django, "setup"):
-        # support for Django 1.7+
-        django.setup()
+    django.setup()
+
+    monkeypatch_django_migrations()
+
+    apply_legacy_settings(settings)
 
     bind_cache_to_option_store()
 
diff --git a/src/sentry/tasks/deletion.py b/src/sentry/tasks/deletion.py
index 53a72a4d47..ac205804a4 100644
--- a/src/sentry/tasks/deletion.py
+++ b/src/sentry/tasks/deletion.py
@@ -2,9 +2,9 @@ from __future__ import absolute_import
 
 from uuid import uuid4
 
+from django.apps import apps
 from django.conf import settings
 from django.db import transaction
-from django.db.models import get_model
 from django.utils import timezone
 
 from sentry.constants import ObjectStatus
@@ -277,7 +277,7 @@ def generic_delete(app_label, model_name, object_id, transaction_id=None, actor_
     from sentry import deletions
     from sentry.models import User
 
-    model = get_model(app_label, model_name)
+    model = apps.get_model(app_label, model_name)
 
     try:
         instance = model.objects.get(id=object_id)
diff --git a/src/sentry/utils/distutils/commands/build_assets.py b/src/sentry/utils/distutils/commands/build_assets.py
index 811741c6bb..6a940e2a3c 100644
--- a/src/sentry/utils/distutils/commands/build_assets.py
+++ b/src/sentry/utils/distutils/commands/build_assets.py
@@ -128,7 +128,9 @@ class BuildAssetsCommand(BaseBuildCommand):
         env["SENTRY_STATIC_DIST_PATH"] = self.sentry_static_dist_path
         env["NODE_ENV"] = "production"
         # TODO: Our JS builds should not require 4GB heap space
-        env["NODE_OPTIONS"] = ((env.get("NODE_OPTIONS", "") + " --max-old-space-size=4096")).lstrip()
+        env["NODE_OPTIONS"] = (
+            (env.get("NODE_OPTIONS", "") + " --max-old-space-size=4096")
+        ).lstrip()
         self._run_yarn_command(["webpack", "--bail"], env=env)
 
     def _write_version_file(self, version_info):
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index 52ff8c3d93..aa022700b3 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -148,8 +148,7 @@ def pytest_configure(config):
 
     import django
 
-    if hasattr(django, "setup"):
-        django.setup()
+    django.setup()
 
     monkeypatch_django_migrations()
 
diff --git a/src/sentry/web/frontend/error_page_embed.py b/src/sentry/web/frontend/error_page_embed.py
index 822eb4946f..35b3e098de 100644
--- a/src/sentry/web/frontend/error_page_embed.py
+++ b/src/sentry/web/frontend/error_page_embed.py
@@ -208,9 +208,7 @@ class ErrorPageEmbedView(View):
         )
 
         context = {
-            "endpoint": mark_safe(
-                "*/" + json.dumps(absolute_uri(request.get_full_path())) + ";/*"
-            ),
+            "endpoint": mark_safe("*/" + json.dumps(absolute_uri(request.get_full_path())) + ";/*"),
             "template": mark_safe("*/" + json.dumps(template) + ";/*"),
             "strings": json.dumps_htmlsafe(
                 {
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 7676486fe3..8264ac757e 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -49,21 +49,6 @@ from sentry.web.frontend.project_event import ProjectEventRedirect
 __all__ = ("urlpatterns",)
 
 
-def init_all_applications():
-    """
-    Forces import of all applications to ensure code is registered.
-    """
-    from django.db.models import get_apps, get_models
-
-    for app in get_apps():
-        try:
-            get_models(app)
-        except Exception:
-            continue
-
-
-init_all_applications()
-
 # Only create one instance of the ReactPageView since it's duplicated everywhere
 generic_react_page_view = GenericReactPageView.as_view()
 react_page_view = ReactPageView.as_view()
diff --git a/tests/acceptance/test_organization_global_selection_header.py b/tests/acceptance/test_organization_global_selection_header.py
index c28c0a98e3..6a81c16f2f 100644
--- a/tests/acceptance/test_organization_global_selection_header.py
+++ b/tests/acceptance/test_organization_global_selection_header.py
@@ -18,9 +18,15 @@ class OrganizationGlobalHeaderTest(AcceptanceTestCase, SnubaTestCase):
             organization=self.org, name="Mariachi Band", members=[self.user]
         )
 
-        self.project_1 = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
-        self.project_2 = self.create_project(organization=self.org, teams=[self.team], name="Sumatra")
-        self.project_3 = self.create_project(organization=self.org, teams=[self.team], name="Siberian")
+        self.project_1 = self.create_project(
+            organization=self.org, teams=[self.team], name="Bengal"
+        )
+        self.project_2 = self.create_project(
+            organization=self.org, teams=[self.team], name="Sumatra"
+        )
+        self.project_3 = self.create_project(
+            organization=self.org, teams=[self.team], name="Siberian"
+        )
 
         self.create_environment(name="development", project=self.project_1)
         self.create_environment(name="production", project=self.project_1)
@@ -32,7 +38,9 @@ class OrganizationGlobalHeaderTest(AcceptanceTestCase, SnubaTestCase):
 
     def test_global_selection_header_dropdown(self):
         self.project.update(first_event=timezone.now())
-        self.page.visit_issue_list(self.org.slug, query="?query=assigned%3Ame&project=" + six.text_type(self.project_1.id))
+        self.page.visit_issue_list(
+            self.org.slug, query="?query=assigned%3Ame&project=" + six.text_type(self.project_1.id)
+        )
         self.browser.wait_until_test_id("awaiting-events")
 
         self.browser.click('[data-test-id="global-header-project-selector"]')
diff --git a/tests/sentry/api/endpoints/test_sentry_apps_stats.py b/tests/sentry/api/endpoints/test_sentry_apps_stats.py
index 6f55b1ef1c..b3e23fcf05 100644
--- a/tests/sentry/api/endpoints/test_sentry_apps_stats.py
+++ b/tests/sentry/api/endpoints/test_sentry_apps_stats.py
@@ -55,24 +55,18 @@ class SentryAppsStatsTest(APITestCase):
         self.login_as(user=self.superuser, superuser=True)
 
         self.create_sentry_app_installation(
-            slug=self.app_1.slug,
-            organization=self.create_organization(),
+            slug=self.app_1.slug, organization=self.create_organization()
         )
 
         for i in range(15):
             app = self.create_sentry_app(
-                name="Test {}".format(i),
-                organization=self.super_org,
-                published=True,
+                name="Test {}".format(i), organization=self.super_org, published=True
             )
 
-            self.create_sentry_app_installation(
-                slug=app.slug,
-                organization=self.org,
-            )
+            self.create_sentry_app_installation(slug=app.slug, organization=self.org)
 
-        response = self.client.get(self.url + '?per_page=10', format="json")
+        response = self.client.get(self.url + "?per_page=10", format="json")
         integrations = json.loads(response.content)
 
         assert len(integrations) == 10  # honors per_page
-        assert integrations[0]['installs'] == 2  # sorted by installs
+        assert integrations[0]["installs"] == 2  # sorted by installs
