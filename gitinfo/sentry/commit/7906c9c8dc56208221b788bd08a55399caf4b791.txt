commit 7906c9c8dc56208221b788bd08a55399caf4b791
Author: Jan Michael Auer <account@jauer.org>
Date:   Tue Jun 19 14:47:04 2018 +0200

    ref(store): Always copy data in EventManager (#8774)

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index c9366a89d5..1152768a7c 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -500,14 +500,13 @@ class LazyData(MutableMapping):
         data['key_id'] = self._key.id
         data['sdk'] = data.get('sdk') or helper.parse_client_as_sdk(auth.client)
 
-        # mutates data
+        # does not mutate data, must use return value of normalize
         manager = EventManager(data, version=auth.version)
-        manager.normalize(request_env={
+        self._data = manager.normalize(request_env={
             'client_ip': self._client_ip,
             'auth': self._auth,
         })
 
-        self._data = data
         self._decoded = True
 
     def __getitem__(self, name):
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 9bcb2a4d36..481a26d09a 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -309,7 +309,7 @@ class EventManager(object):
     logger = logging.getLogger('sentry.events')
 
     def __init__(self, data, version='5'):
-        self.data = data
+        self.data = data.copy()
         self.version = version
 
     def normalize(self, request_env=None):
@@ -534,6 +534,7 @@ class EventManager(object):
 
     def save(self, project, raw=False):
         from sentry.tasks.post_process import index_event_tags
+        data = self.data
 
         project = Project.objects.get_from_cache(id=project)
 
@@ -545,7 +546,7 @@ class EventManager(object):
         try:
             event = Event.objects.get(
                 project_id=project.id,
-                event_id=self.data['event_id'],
+                event_id=data['event_id'],
             )
         except Event.DoesNotExist:
             pass
@@ -554,15 +555,13 @@ class EventManager(object):
                 'duplicate.found',
                 exc_info=True,
                 extra={
-                    'event_uuid': self.data['event_id'],
+                    'event_uuid': data['event_id'],
                     'project_id': project.id,
                     'model': Event.__name__,
                 }
             )
             return event
 
-        data = self.data.copy()
-
         # First we pull out our top-level (non-data attr) kwargs
         event_id = data.pop('event_id')
         level = data.pop('level')
@@ -672,10 +671,7 @@ class EventManager(object):
         # tags are stored as a tuple
         tags = tags.items()
 
-        # XXX(dcramer): we're relying on mutation of the data object to ensure
-        # this propagates into Event
         data['tags'] = tags
-
         data['fingerprint'] = fingerprint or ['{{ default }}']
 
         # prioritize fingerprint over checksum as its likely the client defaulted
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 8d51e318e3..f831e8a95e 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -613,8 +613,7 @@ class EnsureHasIpTest(BaseAPITest):
                 },
             },
         }
-        out = inp.copy()
-        self.validate_and_normalize(out, {'client_ip': '127.0.0.1'})
+        out = self.validate_and_normalize(inp, {'client_ip': '127.0.0.1'})
         assert out['sentry.interfaces.Http']['env']['REMOTE_ADDR'] == '192.168.0.1'
 
     def test_with_user_ip(self):
@@ -623,29 +622,28 @@ class EnsureHasIpTest(BaseAPITest):
                 'ip_address': '192.168.0.1',
             },
         }
-        out = inp.copy()
-        self.validate_and_normalize(out, {'client_ip': '127.0.0.1'})
+        out = self.validate_and_normalize(inp, {'client_ip': '127.0.0.1'})
         assert out['sentry.interfaces.User']['ip_address'] == '192.168.0.1'
 
     def test_with_user_auto_ip(self):
-        out = {
+        inp = {
             'sentry.interfaces.User': {
                 'ip_address': '{{auto}}',
             },
         }
-        self.validate_and_normalize(out, {'client_ip': '127.0.0.1'})
+        out = self.validate_and_normalize(inp, {'client_ip': '127.0.0.1'})
         assert out['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
 
-        out = {
+        inp = {
             'user': {
                 'ip_address': '{{auto}}',
             },
         }
-        self.validate_and_normalize(out, {'client_ip': '127.0.0.1'})
+        out = self.validate_and_normalize(inp, {'client_ip': '127.0.0.1'})
         assert out['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
 
     def test_without_ip_values(self):
-        out = {
+        inp = {
             'platform': 'javascript',
             'sentry.interfaces.User': {},
             'sentry.interfaces.Http': {
@@ -653,18 +651,18 @@ class EnsureHasIpTest(BaseAPITest):
                 'env': {},
             },
         }
-        self.validate_and_normalize(out, {'client_ip': '127.0.0.1'})
+        out = self.validate_and_normalize(inp, {'client_ip': '127.0.0.1'})
         assert out['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
 
     def test_without_any_values(self):
-        out = {
+        inp = {
             'platform': 'javascript',
         }
-        self.validate_and_normalize(out, {'client_ip': '127.0.0.1'})
+        out = self.validate_and_normalize(inp, {'client_ip': '127.0.0.1'})
         assert out['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
 
     def test_with_http_auto_ip(self):
-        out = {
+        inp = {
             'sentry.interfaces.Http': {
                 'url': 'http://example.com/',
                 'env': {
@@ -672,11 +670,11 @@ class EnsureHasIpTest(BaseAPITest):
                 },
             },
         }
-        self.validate_and_normalize(out, {'client_ip': '127.0.0.1'})
+        out = self.validate_and_normalize(inp, {'client_ip': '127.0.0.1'})
         assert out['sentry.interfaces.Http']['env']['REMOTE_ADDR'] == '127.0.0.1'
 
     def test_with_all_auto_ip(self):
-        out = {
+        inp = {
             'sentry.interfaces.User': {
                 'ip_address': '{{auto}}',
             },
@@ -687,7 +685,7 @@ class EnsureHasIpTest(BaseAPITest):
                 },
             },
         }
-        self.validate_and_normalize(out, {'client_ip': '127.0.0.1'})
+        out = self.validate_and_normalize(inp, {'client_ip': '127.0.0.1'})
         assert out['sentry.interfaces.Http']['env']['REMOTE_ADDR'] == '127.0.0.1'
         assert out['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
 
