commit 0c37a877c4dce52a45e3c0cdf362358daf6da2f9
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Jan 17 01:52:03 2017 +0100

    Correctly implement multiple processor invoking

diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 104b4e025d..7bf83d01b3 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -645,12 +645,12 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
         self._fetched_related_data = True
 
     def process_frame(self, frame):
-        self.fetch_related_data()
-
         if not settings.SENTRY_SCRAPE_JAVASCRIPT_CONTEXT or \
            self.get_effective_platform(frame) != 'javascript':
             return
 
+        self.fetch_related_data()
+
         last_token = None
         token = None
 
@@ -776,13 +776,11 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
             new_frame['data'] = dict(new_frame.get('data') or {},
                                      sourcemap=expose_url(sourcemap_url))
 
-        # TODO: theoretically a minified source could point to another mapped, minified source
-        new_frame['pre_context'], new_frame['context_line'], \
-            new_frame['post_context'] = get_source_context(
-            source=source, lineno=new_frame['lineno'],
-            colno=new_frame.get('colno') or 0)
+        # TODO: theoretically a minified source could point to
+        # another mapped, minified source
+        changed_frame = self.expand_frame(new_frame, source=source)
 
-        if not new_frame['context_line'] and source:
+        if not new_frame.get('context_line') and source:
             all_errors.append({
                 'type': EventError.JS_INVALID_SOURCEMAP_LOCATION,
                 'column': new_frame['colno'],
@@ -790,19 +788,21 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
                 'source': new_frame['abs_path'],
             })
 
-        processed_raw_frame = sourcemap_applied and self.process_raw_frame(raw_frame)
-        if sourcemap_applied or all_errors or processed_raw_frame:
+        changed_raw = sourcemap_applied and self.expand_frame(raw_frame)
+        if sourcemap_applied or all_errors or changed_frame or \
+           changed_raw:
             if in_app is not None:
                 new_frame['in_app'] = in_app
                 raw_frame['in_app'] = in_app
-            return [new_frame], [raw_frame] if processed_raw_frame else None, all_errors
+            return [new_frame], [raw_frame] if changed_raw else None, all_errors
 
-    def process_raw_frame(self, frame):
+    def expand_frame(self, frame, source=None):
         if frame.get('lineno') is not None:
-            source = self.get_source(frame['abs_path'])
             if source is None:
-                logger.debug('No source found for %s', frame['abs_path'])
-                return False
+                source = self.get_source(frame['abs_path'])
+                if source is None:
+                    logger.debug('No source found for %s', frame['abs_path'])
+                    return False
 
             frame['pre_context'], frame['context_line'], frame['post_context'] \
                 = get_source_context(source=source, lineno=frame['lineno'],
diff --git a/src/sentry/stacktraces.py b/src/sentry/stacktraces.py
index 9ba4cd358c..757a85f17b 100644
--- a/src/sentry/stacktraces.py
+++ b/src/sentry/stacktraces.py
@@ -123,12 +123,14 @@ def process_single_stacktrace(stacktrace_info, processors):
         errors = None
         for processor in processors:
             try:
-                rv = processor.process_frame(frame) or (None, None, None)
+                rv = processor.process_frame(frame)
+                if rv is None:
+                    continue
             except Exception:
                 logger.exception('Failed to process frame')
                 continue
 
-            expand_processed, expand_raw, errors = rv
+            expand_processed, expand_raw, errors = rv or (None, None, None)
             if expand_processed is not None:
                 processed_frames.extend(expand_processed)
                 changed_processed = True
