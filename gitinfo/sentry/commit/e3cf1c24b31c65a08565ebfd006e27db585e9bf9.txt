commit e3cf1c24b31c65a08565ebfd006e27db585e9bf9
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Nov 30 11:52:14 2014 -0800

    First working version of migration wizard

diff --git a/src/sentry/templates/sentry/access-group-migration.html b/src/sentry/templates/sentry/access-group-migration.html
index b0b25c6cfc..e270ea9696 100644
--- a/src/sentry/templates/sentry/access-group-migration.html
+++ b/src/sentry/templates/sentry/access-group-migration.html
@@ -17,40 +17,56 @@
 
     <p>Note: Unlike access groups, organization membership cannot be restricted per-project. If you need to refine access to that level you should create additional teams and transfer the projects where applicable.</p>
 
-    <table class="table table-striped access-group-migration">
-      <thead>
-        <tr>
-          <th>Member</th>
-          <th style="width:100px;text-align:center">Projects</th>
-          <th style="width:100px;text-align:center">Remove?</th>
-        </tr>
-      </thead>
-      {% for member, project_list in member_list %}
-        <tr>
-          <td>
-            <h4>{{ member.get_display_name }}</h4>
-            <label class="checkbox">
-              <input type="checkbox" name="user[{{ user.id }}][global_access]" value="1" class="checkboxinput global-access">
-              <strong>All Teams</strong>
-            </label>
-            <fieldset class="team-choices">
-              {% for team in team_list %}
-                <label class="checkbox">
-                  <input type="checkbox" name="user[{{ user.id }}][team]" value="{{ team.slug }}" class="checkboxinput">
-                  {{ team.slug }}
-                </label>
-              {% endfor %}
-            </fieldset>
-          </td>
-          <td style="text-align:center;vertical-align:top">
-            <a class="tip" title="{% for project in project_list %}{{ project.team.slug }} / {{ project.slug }}<br>{% endfor %}">{{ project_list|length }} project(s)</a>
-          </td>
-          <td style="text-align:center;vertical-align:top">
-            <input type="checkbox" name="user[{{ user.id }}][remove]" value="1" class="checkboxinput">
-          </td>
-        </tr>
-      {% endfor %}
-    </table>
+    <form method="POST" action=".">
+      {% csrf_token %}
+
+      <table class="table table-striped access-group-migration">
+        <thead>
+          <tr>
+            <th></th>
+            <th style="width:200px"></th>
+            <th style="width:100px"></th>
+            <th style="width:100px;text-align:center">Remove?</th>
+          </tr>
+        </thead>
+        {% for member, project_list in member_list %}
+          <tr>
+            <td>
+              <h4>{{ member.get_display_name }}</h4>
+              <label class="checkbox">
+                <input type="checkbox" name="user[{{ member.id }}][global_access]" value="1" class="checkboxinput global-access">
+                <strong>All Teams</strong>
+              </label>
+              <fieldset class="team-choices">
+                {% for team in team_list %}
+                  <label class="checkbox">
+                    <input type="checkbox" name="user[{{ member.id }}][team]" value="{{ team.slug }}" class="checkboxinput">
+                    {{ team.slug }}
+                  </label>
+                {% endfor %}
+              </fieldset>
+            </td>
+            <td style="vertical-align:top">
+              <select name="user[{{ member.id }}][type]" style="width:150px">
+                <option value="member">Member</option>
+                <option value="admin">Admin</option>
+              </select>
+            </td>
+            <td style="vertical-align:top">
+              <a class="tip" title="{% for project in project_list %}{{ project.team.slug }} / {{ project.slug }}<br>{% endfor %}"
+                 style="line-height:28px;">{{ project_list|length }} project(s)</a>
+            </td>
+            <td style="text-align:center;vertical-align:top">
+              <input type="checkbox" name="user[{{ member.id }}][remove]" value="1" class="checkboxinput">
+            </td>
+          </tr>
+        {% endfor %}
+      </table>
+
+      <fieldset class="form-actions">
+        <button type="submit" class="btn btn-primary" name="action_save">{% trans "Save Changes" %}</button>
+      </fieldset>
+    </form>
   {% else %}
     <p>Your work is done here! There are no access groups which need migrated.</p>
   {% endif %}
diff --git a/src/sentry/web/frontend/access_group_migration.py b/src/sentry/web/frontend/access_group_migration.py
index 6c1db480a3..5afbe7be39 100644
--- a/src/sentry/web/frontend/access_group_migration.py
+++ b/src/sentry/web/frontend/access_group_migration.py
@@ -2,18 +2,62 @@ from __future__ import absolute_import
 
 from collections import defaultdict
 
-from sentry.models import AccessGroup, OrganizationMemberType
+from sentry.models import (
+    AccessGroup, OrganizationMember, OrganizationMemberType, Team
+)
 from sentry.web.frontend.base import OrganizationView
 
 
 class AccessGroupMigrationView(OrganizationView):
     required_access = OrganizationMemberType.ADMIN
 
-    def get(self, request, organization):
+    def process_posted_member(self, request, organization, member):
+        global_access = request.POST.get('user[%s][global_access]' % member.user_id)
+        teams = request.POST.getlist('user[%s][team]' % member.user_id)
+        remove = request.POST.get('user[%s][remove]' % member.user_id)
+        access_type = request.POST.get('user[%s][type]' % member.user_id)
+
+        if not access_type:
+            return
+
+        if remove != '1':
+            if access_type == 'member':
+                access_type = OrganizationMemberType.MEMBER
+            elif access_type == 'admin':
+                access_type = OrganizationMemberType.ADMIN
+            else:
+                return
+
+            global_access = global_access == '1'
+
+            om = OrganizationMember.objects.create(
+                organization=organization,
+                has_global_access=global_access,
+                type=access_type,
+                user=member.user,
+            )
+
+            if not global_access:
+                for team in teams:
+                    om.teams.add(Team.objects.get_from_cache(slug=team))
+
+        member.delete()
+
+    def handle(self, request, organization):
         member_list = list(AccessGroup.members.through.objects.filter(
             accessgroup__team__organization=organization,
         ).select_related('user', 'accessgroup', 'accessgroup__team'))
 
+        if request.method == 'POST':
+            for member in member_list:
+                self.process_posted_member(request, organization, member)
+
+            for ag in AccessGroup.objects.filter(team__organization=organization):
+                if not ag.members.exists():
+                    ag.delete()
+
+            return self.redirect(request.path)
+
         group_list = set(m.accessgroup for m in member_list)
 
         team_list = organization.team_set.all()
