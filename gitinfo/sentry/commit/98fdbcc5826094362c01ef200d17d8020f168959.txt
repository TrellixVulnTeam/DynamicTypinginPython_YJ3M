commit 98fdbcc5826094362c01ef200d17d8020f168959
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jun 6 15:37:00 2017 -0700

    api: pagination for org members and projects

diff --git a/src/sentry/api/endpoints/organization_member_index.py b/src/sentry/api/endpoints/organization_member_index.py
index 94748a4f03..2429523ee1 100644
--- a/src/sentry/api/endpoints/organization_member_index.py
+++ b/src/sentry/api/endpoints/organization_member_index.py
@@ -1,11 +1,11 @@
 from __future__ import absolute_import
 
 from django.db.models import Q
-from rest_framework.response import Response
 
 from sentry.api.bases.organization import (
     OrganizationEndpoint, OrganizationPermission
 )
+from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.models import OrganizationMember
 
@@ -26,13 +26,11 @@ class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
         queryset = OrganizationMember.objects.filter(
             Q(user__is_active=True) | Q(user__isnull=True),
             organization=organization,
-        ).select_related('user')
+        ).select_related('user').order_by('email', 'user__email')
 
-        member_list = sorted(
-            queryset,
-            key=lambda x: x.user.get_display_name() if x.user_id else x.email
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            on_results=lambda x: serialize(x, request.user),
+            paginator_cls=OffsetPaginator,
         )
-
-        context = serialize(member_list, request.user)
-
-        return Response(context)
diff --git a/src/sentry/api/endpoints/organization_projects.py b/src/sentry/api/endpoints/organization_projects.py
index 3d192b649d..3642d061e9 100644
--- a/src/sentry/api/endpoints/organization_projects.py
+++ b/src/sentry/api/endpoints/organization_projects.py
@@ -1,12 +1,12 @@
 from __future__ import absolute_import
 
-import six
-
 from rest_framework.response import Response
 
 from sentry.api.base import DocSection
 from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
+from sentry.api.serializers.models.project import ProjectWithTeamSerializer
 from sentry.models import Project, Team
 from sentry.utils.apidocs import scenario, attach_scenarios
 
@@ -38,33 +38,30 @@ class OrganizationProjectsEndpoint(OrganizationEndpoint):
             # TODO: remove this, no longer supported probably
             if hasattr(request.auth, 'project'):
                 team_list = [request.auth.project.team]
-                project_list = [request.auth.project]
+                queryset = queryset = Project.objects.filter(
+                    id=request.auth.project.id,
+                ).select_related('team')
             elif request.auth.organization is not None:
                 org = request.auth.organization
                 team_list = list(Team.objects.filter(
                     organization=org,
                 ))
-                project_list = list(Project.objects.filter(
+                queryset = Project.objects.filter(
                     team__in=team_list,
-                ).order_by('name'))
+                ).select_related('team')
             else:
                 return Response({'detail': 'Current access does not point to '
                                  'organization.'}, status=400)
         else:
             team_list = list(request.access.teams)
-            project_list = list(Project.objects.filter(
+            queryset = Project.objects.filter(
                 team__in=team_list,
-            ).order_by('name'))
-
-        team_map = {
-            d['id']: d
-            for d in serialize(team_list, request.user)
-        }
-
-        context = []
-        for project, pdata in zip(project_list, serialize(project_list, request.user)):
-            assert six.text_type(project.id) == pdata['id']
-            pdata['team'] = team_map[six.text_type(project.team_id)]
-            context.append(pdata)
+            ).select_related('team')
 
-        return Response(context)
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            order_by='slug',
+            on_results=lambda x: serialize(x, request.user, ProjectWithTeamSerializer()),
+            paginator_cls=OffsetPaginator,
+        )
diff --git a/src/sentry/api/paginator.py b/src/sentry/api/paginator.py
index 0f7ca8ad1d..27201792be 100644
--- a/src/sentry/api/paginator.py
+++ b/src/sentry/api/paginator.py
@@ -19,11 +19,15 @@ quote_name = connections['default'].ops.quote_name
 
 
 class BasePaginator(object):
-    def __init__(self, queryset, order_by, max_limit=100):
-        if order_by.startswith('-'):
-            self.key, self.desc = order_by[1:], True
+    def __init__(self, queryset, order_by=None, max_limit=100):
+        if order_by:
+            if order_by.startswith('-'):
+                self.key, self.desc = order_by[1:], True
+            else:
+                self.key, self.desc = order_by, False
         else:
-            self.key, self.desc = order_by, False
+            self.key = None
+            self.desc = False
         self.queryset = queryset
         self.max_limit = max_limit
 
@@ -41,21 +45,23 @@ class BasePaginator(object):
         # We need to reverse the ORDER BY if we're using a cursor for a
         # previous page so we know exactly where we ended last page.  The
         # results will get reversed back to the requested order below.
-        if self.key in queryset.query.order_by:
-            if not asc:
-                index = queryset.query.order_by.index(self.key)
-                queryset.query.order_by[index] = '-%s' % (queryset.query.order_by[index])
-        elif ('-%s' % self.key) in queryset.query.order_by:
-            if asc:
-                index = queryset.query.order_by.index('-%s' % (self.key))
-                queryset.query.order_by[index] = queryset.query.order_by[index][1:]
-        else:
-            if asc:
-                queryset = queryset.order_by(self.key)
+        if self.key:
+            if self.key in queryset.query.order_by:
+                if not asc:
+                    index = queryset.query.order_by.index(self.key)
+                    queryset.query.order_by[index] = '-%s' % (queryset.query.order_by[index])
+            elif ('-%s' % self.key) in queryset.query.order_by:
+                if asc:
+                    index = queryset.query.order_by.index('-%s' % (self.key))
+                    queryset.query.order_by[index] = queryset.query.order_by[index][1:]
             else:
-                queryset = queryset.order_by('-%s' % self.key)
+                if asc:
+                    queryset = queryset.order_by(self.key)
+                else:
+                    queryset = queryset.order_by('-%s' % self.key)
 
         if value:
+            assert self.key
             if self.key in queryset.query.extra:
                 col_query, col_params = queryset.query.extra[self.key]
                 col_params = col_params[:]
@@ -155,10 +161,11 @@ class OffsetPaginator(BasePaginator):
         limit = min(limit, self.max_limit)
 
         queryset = self.queryset
-        if self.desc:
-            queryset = queryset.order_by('-{}'.format(self.key))
-        else:
-            queryset = queryset.order_by(self.key)
+        if self.key:
+            if self.desc:
+                queryset = queryset.order_by('-{}'.format(self.key))
+            else:
+                queryset = queryset.order_by(self.key)
 
         page = cursor.offset
         offset = cursor.offset * cursor.value
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 65043e89de..ee454f1dd3 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -148,6 +148,28 @@ class ProjectWithOrganizationSerializer(ProjectSerializer):
         return data
 
 
+class ProjectWithTeamSerializer(ProjectSerializer):
+    def get_attrs(self, item_list, user):
+        attrs = super(ProjectWithTeamSerializer, self).get_attrs(
+            item_list, user
+        )
+
+        orgs = {
+            d['id']: d
+            for d in serialize(list(set(i.team for i in item_list)), user)
+        }
+        for item in item_list:
+            attrs[item]['team'] = orgs[six.text_type(item.team_id)]
+        return attrs
+
+    def serialize(self, obj, attrs, user):
+        data = super(ProjectWithTeamSerializer, self).serialize(
+            obj, attrs, user
+        )
+        data['team'] = attrs['team']
+        return data
+
+
 class SharedProjectSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         from sentry import features
