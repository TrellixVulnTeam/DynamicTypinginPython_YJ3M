commit 7b45ad5e1b46820bb19fdbc10863069ca5ce34d0
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Aug 25 20:08:47 2015 +0200

    Updated various documentation.

diff --git a/api-docs/cache/endpoints/get-group-details.json b/api-docs/cache/endpoints/get-group-details.json
index 59f258246a..3789b71f05 100644
--- a/api-docs/cache/endpoints/get-group-details.json
+++ b/api-docs/cache/endpoints/get-group-details.json
@@ -6,7 +6,9 @@
   "section": "events",
   "text": [
     "Return details on an individual aggregate.  Aggregates are also",
-    "sometimes referred to as groups.",
+    "sometimes referred to as groups.  This returns the basic stats for",
+    "the group (the bar graph), some overall numbers (number of comments,",
+    "user reports) as well as the summarized event data.",
     "",
     ".. sentry:api-scenario:: RetrieveAggregate"
   ],
diff --git a/api-docs/cache/endpoints/put-group-details.json b/api-docs/cache/endpoints/put-group-details.json
index 9cc28d1f6f..8a443cb5a6 100644
--- a/api-docs/cache/endpoints/put-group-details.json
+++ b/api-docs/cache/endpoints/put-group-details.json
@@ -6,14 +6,19 @@
   "section": "events",
   "text": [
     "Updates an individual aggregate's attributes.  Only the attributes",
-    "submitted are modified.",
-    "",
-    "Attributes:",
+    "submitted are modified.  The following attributes are supported",
+    "for all keys:",
     "",
     "- ``status``: ``\"resolved\"``, ``\"unresolved\"``, ``\"muted\"``",
+    "- ``assignedTo``: user id",
+    "",
+    "In case the API call is invoked in a user context, these",
+    "attributes can also be modified:",
+    "",
     "- ``hasSeen``: `true`, false`",
     "- ``isBookmarked``: `true`, false`",
-    "- ``assignedTo``: user id"
+    "",
+    ".. sentry:api-scenario:: UpdateAggregate"
   ],
   "title": "Update an Aggregate"
 }
diff --git a/api-docs/cache/scenarios/RetrieveAggregate.json b/api-docs/cache/scenarios/RetrieveAggregate.json
index 8ab8d9bf23..7a33d32f50 100644
--- a/api-docs/cache/scenarios/RetrieveAggregate.json
+++ b/api-docs/cache/scenarios/RetrieveAggregate.json
@@ -13,7 +13,7 @@
           "activity": [
             {
               "data": {},
-              "dateCreated": "2015-08-25T10:49:13Z",
+              "dateCreated": "2015-08-25T18:08:03Z",
               "id": "None",
               "type": "first_seen",
               "user": null
@@ -25,24 +25,24 @@
           "culprit": "raven.scripts.runner in main",
           "firstRelease": {
             "data": {},
-            "dateCreated": "2015-08-25T10:49:13.613Z",
+            "dateCreated": "2015-08-25T18:08:03.915Z",
             "dateReleased": null,
             "dateStarted": null,
             "firstEvent": null,
             "lastEvent": null,
             "newGroups": 0,
             "ref": null,
-            "shortVersion": "354e84388dbc",
+            "shortVersion": "4c9d053e744a",
             "url": null,
-            "version": "354e84388dbc24265a955a33a35e9bec52f142fa"
+            "version": "4c9d053e744aa9916b580dd8790f58da7de1d3c2"
           },
-          "firstSeen": "2015-08-25T10:49:13Z",
+          "firstSeen": "2015-08-25T18:08:03Z",
           "hasSeen": false,
           "id": "1",
           "isBookmarked": false,
           "isPublic": false,
           "lastRelease": null,
-          "lastSeen": "2015-08-25T10:49:13Z",
+          "lastSeen": "2015-08-25T18:08:03Z",
           "level": "error",
           "logger": null,
           "numComments": 0,
@@ -56,231 +56,231 @@
           "shareId": "322e31",
           "stats": {
             "24h": [
-              [
-                1440410400,
-                3238
-              ],
-              [
-                1440414000,
-                2275
-              ],
-              [
-                1440417600,
-                2350
-              ],
-              [
-                1440421200,
-                3481
-              ],
-              [
-                1440424800,
-                3342
-              ],
-              [
-                1440428400,
-                3754
-              ],
-              [
-                1440432000,
-                3331
-              ],
-              [
-                1440435600,
-                3274
-              ],
               [
                 1440439200,
-                2795
+                9331
               ],
               [
                 1440442800,
-                4384
+                10017
               ],
               [
                 1440446400,
-                5608
+                11559
               ],
               [
                 1440450000,
-                143
+                8500
               ],
               [
                 1440453600,
-                705
+                7427
               ],
               [
                 1440457200,
-                615
+                7278
               ],
               [
                 1440460800,
-                786
+                6957
               ],
               [
                 1440464400,
-                644
+                6500
               ],
               [
                 1440468000,
-                195
+                5943
               ],
               [
                 1440471600,
-                895
+                7475
               ],
               [
                 1440475200,
-                778
+                6930
               ],
               [
                 1440478800,
-                336
+                6758
               ],
               [
                 1440482400,
-                770
+                8201
               ],
               [
                 1440486000,
-                655
+                5136
               ],
               [
                 1440489600,
-                908
+                8452
               ],
               [
                 1440493200,
-                485
+                7262
               ],
               [
                 1440496800,
-                1045
+                7537
+              ],
+              [
+                1440500400,
+                6243
+              ],
+              [
+                1440504000,
+                6413
+              ],
+              [
+                1440507600,
+                6913
+              ],
+              [
+                1440511200,
+                5136
+              ],
+              [
+                1440514800,
+                6149
+              ],
+              [
+                1440518400,
+                5194
+              ],
+              [
+                1440522000,
+                8463
+              ],
+              [
+                1440525600,
+                2217
               ]
             ],
             "30d": [
               [
                 1437868800,
-                560405
+                601792
               ],
               [
                 1437955200,
-                573730
+                728694
               ],
               [
                 1438041600,
-                563603
+                724116
               ],
               [
                 1438128000,
-                574596
+                730657
               ],
               [
                 1438214400,
-                579459
+                739763
               ],
               [
                 1438300800,
-                559842
+                717106
               ],
               [
                 1438387200,
-                564174
+                716251
               ],
               [
                 1438473600,
-                568442
+                724735
               ],
               [
                 1438560000,
-                569198
+                726244
               ],
               [
                 1438646400,
-                562478
+                718954
               ],
               [
                 1438732800,
-                571191
+                725529
               ],
               [
                 1438819200,
-                571038
+                724123
               ],
               [
                 1438905600,
-                560354
+                719159
               ],
               [
                 1438992000,
-                577697
+                733515
               ],
               [
                 1439078400,
-                585356
+                738478
               ],
               [
                 1439164800,
-                571682
+                729727
               ],
               [
                 1439251200,
-                585290
+                746352
               ],
               [
                 1439337600,
-                566827
+                729758
               ],
               [
                 1439424000,
-                574851
+                734458
               ],
               [
                 1439510400,
-                576505
+                728328
               ],
               [
                 1439596800,
-                561204
+                724141
               ],
               [
                 1439683200,
-                549924
+                709946
               ],
               [
                 1439769600,
-                564953
+                718829
               ],
               [
                 1439856000,
-                568892
+                728983
               ],
               [
                 1439942400,
-                566594
+                725152
               ],
               [
                 1440028800,
-                508000
+                667490
               ],
               [
                 1440115200,
-                276533
+                427886
               ],
               [
                 1440201600,
-                136406
+                295686
               ],
               [
                 1440288000,
-                117254
+                275291
               ],
               [
                 1440374400,
-                70206
+                225712
               ],
               [
                 1440460800,
-                7497
+                123879
               ]
             ]
           },
diff --git a/api-docs/cache/scenarios/UpdateAggregate.json b/api-docs/cache/scenarios/UpdateAggregate.json
new file mode 100644
index 0000000000..b7e73bae4b
--- /dev/null
+++ b/api-docs/cache/scenarios/UpdateAggregate.json
@@ -0,0 +1,52 @@
+{
+  "ident": "UpdateAggregate",
+  "requests": [
+    {
+      "request": {
+        "data": {
+          "status": "unresolved"
+        },
+        "headers": {
+          "Content-Type": "application/json"
+        },
+        "method": "PUT",
+        "path": "/api/0/groups/1/"
+      },
+      "response": {
+        "data": {
+          "annotations": [],
+          "assignedTo": null,
+          "count": "1",
+          "culprit": "raven.scripts.runner in main",
+          "firstSeen": "2015-08-25T18:08:03Z",
+          "hasSeen": false,
+          "id": "1",
+          "isBookmarked": false,
+          "isPublic": false,
+          "lastSeen": "2015-08-25T18:08:03Z",
+          "level": "error",
+          "logger": null,
+          "numComments": 0,
+          "permalink": "https://app.getsentry.com/the-interstellar-jurisdiction/pump-station/group/1/",
+          "project": {
+            "name": "Pump Station",
+            "slug": "pump-station"
+          },
+          "shareId": "322e31",
+          "status": "unresolved",
+          "tags": {},
+          "timeSpent": null,
+          "title": "This is an example Python exception"
+        },
+        "headers": {
+          "allow": "GET, PUT, DELETE, HEAD, OPTIONS",
+          "content-language": "en-us",
+          "content-type": "application/json",
+          "vary": "Accept-Language, Cookie"
+        },
+        "reason": "OK",
+        "status": 200
+      }
+    }
+  ]
+}
diff --git a/api-docs/generator.py b/api-docs/generator.py
index 5cf97d1d9a..dc8581c7ba 100644
--- a/api-docs/generator.py
+++ b/api-docs/generator.py
@@ -5,11 +5,9 @@ import click
 import urlparse
 import logging
 
-from pytz import utc
-from datetime import datetime, timedelta
+from datetime import datetime
 from subprocess import Popen, PIPE
 from contextlib import contextmanager
-from random import randint
 
 HERE = os.path.abspath(os.path.dirname(__file__))
 SENTRY_CONFIG = os.path.join(HERE, 'sentry.conf.py')
@@ -22,11 +20,7 @@ from django.conf import settings
 # Fair game from here
 from django.core.management import call_command
 
-from sentry.app import tsdb
-from sentry.models import User, Team, Project, Release, \
-    Organization, OrganizationMember, Activity, ApiKey
-from sentry.utils.samples import create_sample_event
-from sentry.utils.apidocs import Runner, iter_scenarios, \
+from sentry.utils.apidocs import Runner, MockUtils, iter_scenarios, \
     iter_endpoints, get_sections
 
 
@@ -54,49 +48,6 @@ def report(category, message, fg=None):
     ))
 
 
-def create_sample_time_series(event):
-    report('ts', 'Creating sample time series for #%s' % event.id)
-    group = event.group
-
-    now = datetime.utcnow().replace(tzinfo=utc)
-
-    for _ in xrange(60):
-        count = randint(1, 10)
-        tsdb.incr_multi((
-            (tsdb.models.project, group.project.id),
-            (tsdb.models.group, group.id),
-        ), now, count)
-        tsdb.incr_multi((
-            (tsdb.models.organization_total_received,
-             group.project.organization_id),
-            (tsdb.models.project_total_received, group.project.id),
-        ), now, int(count * 1.1))
-        tsdb.incr_multi((
-            (tsdb.models.organization_total_rejected,
-             group.project.organization_id),
-            (tsdb.models.project_total_rejected, group.project.id),
-        ), now, int(count * 0.1))
-        now = now - timedelta(seconds=1)
-
-    for _ in xrange(24 * 30):
-        count = randint(100, 1000)
-        tsdb.incr_multi((
-            (tsdb.models.project, group.project.id),
-            (tsdb.models.group, group.id),
-        ), now, count)
-        tsdb.incr_multi((
-            (tsdb.models.organization_total_received,
-             group.project.organization_id),
-            (tsdb.models.project_total_received, group.project.id),
-        ), now, int(count * 1.1))
-        tsdb.incr_multi((
-            (tsdb.models.organization_total_rejected,
-             group.project.organization_id),
-            (tsdb.models.project_total_rejected, group.project.id),
-        ), now, int(count * 0.1))
-        now = now - timedelta(hours=1)
-
-
 def launch_redis():
     report('redis', 'Launching redis server')
     cl = Popen(['redis-server', '-'], stdin=PIPE, stdout=open(os.devnull, 'r+'))
@@ -195,94 +146,6 @@ class SentryBox(object):
             self.sentry.kill()
             self.sentry.wait()
 
-    def create_user(self, mail):
-        report('data', 'Creating user "%s"' % mail)
-        user, _ = User.objects.get_or_create(
-            username=mail,
-            defaults={
-                'email': mail,
-            }
-        )
-        user.set_password('dummy')
-        user.save()
-        return user
-
-    def create_org(self, name, owner):
-        report('data', 'Creating org "%s"' % name)
-        org, _ = Organization.objects.get_or_create(
-            name=name,
-            defaults={
-                'owner': owner,
-            },
-        )
-
-        dummy_member, _ = OrganizationMember.objects.get_or_create(
-            user=owner,
-            organization=org,
-            defaults={
-                'has_global_access': False,
-            }
-        )
-
-        if dummy_member.has_global_access:
-            dummy_member.update(has_global_access=False)
-
-        return org
-
-    def create_api_key(self, org, label='Default'):
-        report('data', 'Creating API key for "%s"' % org.name)
-        return ApiKey.objects.get_or_create(
-            organization=org,
-            label=label,
-            scopes=(1 << len(ApiKey.scopes.keys())) - 1,
-        )[0]
-
-    def create_team(self, name, org):
-        report('data', 'Creating team "%s"' % name)
-        return Team.objects.get_or_create(
-            name=name,
-            defaults={
-                'organization': org,
-            },
-        )[0]
-
-    def create_project(self, name, team, org):
-        report('data', 'Creating project "%s"' % name)
-        return Project.objects.get_or_create(
-            team=team,
-            name=name,
-            defaults={
-                'organization': org,
-            }
-        )[0]
-
-    def create_release(self, project, user, version=None):
-        if version is None:
-            version = os.urandom(20).encode('hex')
-        report('data', 'Creating release "%s" for %s' % (version, project))
-        release = Release.objects.get_or_create(
-            version=version,
-            project=project,
-        )[0]
-        Activity.objects.create(
-            type=Activity.RELEASE,
-            project=project,
-            ident=version,
-            user=user,
-            data={'version': version},
-        )
-        return release
-
-    def create_event(self, project, release):
-        report('event', 'Creating event for %s' % project.id)
-        event = create_sample_event(
-            project=project,
-            platform='python',
-            release=release.version,
-        )
-        create_sample_time_series(event)
-        return event
-
 
 def dump_json(path, data):
     path = os.path.join(OUTPUT_PATH, path)
@@ -296,7 +159,7 @@ def dump_json(path, data):
 
 
 def run_scenario(vars, scenario_ident, func):
-    runner = Runner(vars, scenario_ident)
+    runner = Runner(scenario_ident, **vars)
     report('scenario', 'Running scenario "%s"' % scenario_ident)
     func(runner)
     dump_json('scenarios/%s.json' % scenario_ident, runner.to_json())
@@ -305,20 +168,25 @@ def run_scenario(vars, scenario_ident, func):
 @click.command()
 def cli():
     """API docs dummy generator."""
-    with SentryBox() as box:
-        user = box.create_user('john@interstellar.invalid')
-        org = box.create_org('The Interstellar Jurisdiction',
-                             owner=user)
-        api_key = box.create_api_key(org)
-
-        team = box.create_team('Powerful Abolitionist',
-                               org=org)
+    with SentryBox():
+        utils = MockUtils()
+        report('org', 'Creating user and organization')
+        user = utils.create_user('john@interstellar.invalid')
+        org = utils.create_org('The Interstellar Jurisdiction',
+                               owner=user)
+        api_key = utils.create_api_key(org)
+
+        report('org', 'Creating team')
+        team = utils.create_team('Powerful Abolitionist',
+                                 org=org)
 
         projects = []
         for project_name in 'Pump Station', 'Prime Mover':
-            project = box.create_project(project_name, team=team, org=org)
-            release = box.create_release(project=project, user=user)
-            event = box.create_event(project=project, release=release)
+            report('project', 'Creating project "%s"' % project_name)
+            project = utils.create_project(project_name, team=team, org=org)
+            release = utils.create_release(project=project, user=user)
+            report('event', 'Creating event for "%s"' % project_name)
+            event = utils.create_event(project=project, release=release)
             projects.append({
                 'project': project,
                 'release': release,
@@ -329,9 +197,7 @@ def cli():
             'org': org,
             'api_key': api_key,
             'me': user,
-            'default_project': projects[0]['project'],
-            'default_release': projects[0]['release'],
-            'default_event': projects[0]['events'][0],
+            'api_key': api_key,
             'teams': [{
                 'team': team,
                 'projects': projects,
diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 850c0c2d49..6003e98a4d 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -1,4 +1,4 @@
-from __future__ import absolute_import, print_function
+from __future__ import absolute_import
 
 from datetime import timedelta
 from django.utils import timezone
@@ -23,14 +23,23 @@ from sentry.utils.apidocs import scenario
 
 @scenario('RetrieveAggregate')
 def retrieve_aggregate_scenario(runner):
-    project = runner.vars['default_project']
-    group = Group.objects.get(project=project)
-    return runner.request(
+    group = Group.objects.get(project=runner.default_project)
+    runner.request(
         method='GET',
         path='/groups/%s/' % group.id,
     )
 
 
+@scenario('UpdateAggregate')
+def update_aggregate_scenario(runner):
+    group = Group.objects.get(project=runner.default_project)
+    runner.request(
+        method='PUT',
+        path='/groups/%s/' % group.id,
+        data={'status': 'unresolved'}
+    )
+
+
 class GroupSerializer(serializers.Serializer):
     status = serializers.ChoiceField(choices=zip(
         STATUS_CHOICES.keys(), STATUS_CHOICES.keys()
@@ -109,7 +118,9 @@ class GroupDetailsEndpoint(GroupEndpoint):
         `````````````````````
 
         Return details on an individual aggregate.  Aggregates are also
-        sometimes referred to as groups.
+        sometimes referred to as groups.  This returns the basic stats for
+        the group (the bar graph), some overall numbers (number of comments,
+        user reports) as well as the summarized event data.
 
         .. sentry:api-scenario:: RetrieveAggregate
         """
@@ -190,14 +201,19 @@ class GroupDetailsEndpoint(GroupEndpoint):
         ```````````````````
 
         Updates an individual aggregate's attributes.  Only the attributes
-        submitted are modified.
-
-        Attributes:
+        submitted are modified.  The following attributes are supported
+        for all keys:
 
         - ``status``: ``"resolved"``, ``"unresolved"``, ``"muted"``
+        - ``assignedTo``: user id
+
+        In case the API call is invoked in a user context, these
+        attributes can also be modified:
+
         - ``hasSeen``: `true`, false`
         - ``isBookmarked``: `true`, false`
-        - ``assignedTo``: user id
+
+        .. sentry:api-scenario:: UpdateAggregate
         """
         serializer = GroupSerializer(data=request.DATA, partial=True)
         if not serializer.is_valid():
diff --git a/src/sentry/utils/apidocs.py b/src/sentry/utils/apidocs.py
index cb4de2c60d..88805015dc 100644
--- a/src/sentry/utils/apidocs.py
+++ b/src/sentry/utils/apidocs.py
@@ -1,11 +1,18 @@
+import os
 import re
 import json
 import base64
 import inspect
 import requests
 
+from pytz import utc
+from datetime import datetime, timedelta
+from random import randint
+
 from django.conf import settings
 
+# Do not import from sentry here!  Bad things will happen
+
 
 optional_group_matcher = re.compile(r'\(\?\:(.+)\)')
 named_group_matcher = re.compile(r'\(\?P<(\w+)>[^\)]+\)')
@@ -42,9 +49,9 @@ def simplify_regex(pattern):
 
 
 def get_internal_endpoint_from_pattern(pattern):
+    from sentry.api.base import Endpoint
     if not hasattr(pattern, 'callback'):
         return
-    from sentry.api.base import Endpoint
     if hasattr(pattern.callback, 'cls'):
         cls = pattern.callback.cls
         if issubclass(cls, Endpoint):
@@ -108,8 +115,8 @@ def camelcase_to_dashes(string):
 
 
 def extract_endpoint_info(pattern, internal_endpoint):
-    from sentry.constants import HTTP_METHODS
     path = simplify_regex(pattern.regex.pattern)
+    from sentry.constants import HTTP_METHODS
     for method_name in HTTP_METHODS:
         if method_name in ('HEAD', 'OPTIONS'):
             continue
@@ -171,6 +178,140 @@ def get_sections():
     return dict((x.name.lower(), x.value) for x in DocSection)
 
 
+def create_sample_time_series(event):
+    from sentry.app import tsdb
+    group = event.group
+
+    now = datetime.utcnow().replace(tzinfo=utc)
+
+    for _ in xrange(60):
+        count = randint(1, 10)
+        tsdb.incr_multi((
+            (tsdb.models.project, group.project.id),
+            (tsdb.models.group, group.id),
+        ), now, count)
+        tsdb.incr_multi((
+            (tsdb.models.organization_total_received,
+             group.project.organization_id),
+            (tsdb.models.project_total_received, group.project.id),
+        ), now, int(count * 1.1))
+        tsdb.incr_multi((
+            (tsdb.models.organization_total_rejected,
+             group.project.organization_id),
+            (tsdb.models.project_total_rejected, group.project.id),
+        ), now, int(count * 0.1))
+        now = now - timedelta(seconds=1)
+
+    for _ in xrange(24 * 30):
+        count = randint(100, 1000)
+        tsdb.incr_multi((
+            (tsdb.models.project, group.project.id),
+            (tsdb.models.group, group.id),
+        ), now, count)
+        tsdb.incr_multi((
+            (tsdb.models.organization_total_received,
+             group.project.organization_id),
+            (tsdb.models.project_total_received, group.project.id),
+        ), now, int(count * 1.1))
+        tsdb.incr_multi((
+            (tsdb.models.organization_total_rejected,
+             group.project.organization_id),
+            (tsdb.models.project_total_rejected, group.project.id),
+        ), now, int(count * 0.1))
+        now = now - timedelta(hours=1)
+
+
+class MockUtils(object):
+
+    def create_user(self, mail):
+        from sentry.models import User
+        user, _ = User.objects.get_or_create(
+            username=mail,
+            defaults={
+                'email': mail,
+            }
+        )
+        user.set_password('dummy')
+        user.save()
+        return user
+
+    def create_org(self, name, owner):
+        from sentry.models import Organization, OrganizationMember
+        org, _ = Organization.objects.get_or_create(
+            name=name,
+            defaults={
+                'owner': owner,
+            },
+        )
+
+        dummy_member, _ = OrganizationMember.objects.get_or_create(
+            user=owner,
+            organization=org,
+            defaults={
+                'has_global_access': False,
+            }
+        )
+
+        if dummy_member.has_global_access:
+            dummy_member.update(has_global_access=False)
+
+        return org
+
+    def create_api_key(self, org, label='Default'):
+        from sentry.models import ApiKey
+        return ApiKey.objects.get_or_create(
+            organization=org,
+            label=label,
+            scopes=(1 << len(ApiKey.scopes.keys())) - 1,
+        )[0]
+
+    def create_team(self, name, org):
+        from sentry.models import Team
+        return Team.objects.get_or_create(
+            name=name,
+            defaults={
+                'organization': org,
+            },
+        )[0]
+
+    def create_project(self, name, team, org):
+        from sentry.models import Project
+        return Project.objects.get_or_create(
+            team=team,
+            name=name,
+            defaults={
+                'organization': org,
+            }
+        )[0]
+
+    def create_release(self, project, user, version=None):
+        from sentry.models import Release, Activity
+        if version is None:
+            version = os.urandom(20).encode('hex')
+        release = Release.objects.get_or_create(
+            version=version,
+            project=project,
+        )[0]
+        Activity.objects.create(
+            type=Activity.RELEASE,
+            project=project,
+            ident=version,
+            user=user,
+            data={'version': version},
+        )
+        return release
+
+    def create_event(self, project, release):
+        from sentry.utils.samples import create_sample_event
+        event = create_sample_event(
+            project=project,
+            platform='python',
+            release=release.version,
+        )
+        create_sample_time_series(event)
+        return event
+
+
 class Runner(object):
     """The runner is a special object that holds state for the automatic
     running of example scenarios.  It gets created by api-docs/generator.py
@@ -178,24 +319,43 @@ class Runner(object):
     so that the scenarios can be run separately if needed.
     """
 
-    def __init__(self, vars, ident):
-        self.vars = vars
+    def __init__(self, ident, api_key, org, me, teams=None):
         self.ident = ident
         self.requests = []
 
+        self.utils = MockUtils()
+
+        self.api_key = api_key
+        self.org = org
+        self.me = me
+        self.teams = teams
+
+    @property
+    def default_project(self):
+        return self.teams[0]['projects'][0]['project']
+
+    @property
+    def default_release(self):
+        return self.teams[0]['projects'][0]['release']
+
+    @property
+    def default_event(self):
+        return self.teams[0]['projects'][0]['events']
+
     def request(self, method, path, headers=None, data=None):
         path = '/api/0/' + path.lstrip('/')
         headers = dict(headers or {})
-        req_headers = dict(headers)
-        req_headers['Host'] = 'app.getsentry.com'
-        req_headers['Authorization'] = 'Basic %s' % base64.b64encode('%s:' % (
-            self.vars['api_key'].key.encode('utf-8')))
 
         body = None
         if data is not None:
             body = json.dumps(data, sort_keys=True)
             headers['Content-Type'] = 'application/json'
 
+        req_headers = dict(headers)
+        req_headers['Host'] = 'app.getsentry.com'
+        req_headers['Authorization'] = 'Basic %s' % base64.b64encode('%s:' % (
+            self.api_key.key.encode('utf-8')))
+
         url = 'http://127.0.0.1:%s%s' % (
             settings.SENTRY_APIDOCS_WEB_PORT,
             path,
