commit 48df201044689f9c0552a2b78c60368ae1cdcf51
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Aug 18 16:07:09 2015 -0700

    Clean up event details endpoints
    
    - Remove internal endpoint
    - Switch event IDs from internal IDs
    - Remove invalid perm check

diff --git a/src/sentry/api/endpoints/event_details.py b/src/sentry/api/endpoints/event_details.py
index 19dbb76a3c..d3384dab05 100644
--- a/src/sentry/api/endpoints/event_details.py
+++ b/src/sentry/api/endpoints/event_details.py
@@ -2,16 +2,13 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
-from sentry.api.base import DocSection, Endpoint
-from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.base import Endpoint
 from sentry.api.bases.group import GroupPermission
 from sentry.api.serializers import serialize
 from sentry.models import Event
 
 
 class EventDetailsEndpoint(Endpoint):
-    doc_section = DocSection.EVENTS
-
     permission_classes = (GroupPermission,)
 
     def get(self, request, event_id):
@@ -68,63 +65,3 @@ class EventDetailsEndpoint(Endpoint):
             data['previousEventID'] = None
 
         return Response(data)
-
-
-class ProjectEventDetailsEndpoint(ProjectEndpoint):
-    doc_section = DocSection.EVENTS
-
-    def get(self, request, project, event_id):
-        """
-        Retrieve an event for a project
-
-        Return details on an individual event.
-
-            {method} {path}
-
-        """
-        event = Event.objects.get(
-            event_id=event_id,
-            project=project,
-        )
-
-        self.check_object_permissions(request, event.group)
-
-        Event.objects.bind_nodes([event], 'data')
-
-        # HACK(dcramer): work around lack of unique sorting on datetime
-        base_qs = Event.objects.filter(
-            group=event.group_id,
-        ).exclude(id=event.id)
-        try:
-            next_event = sorted(
-                base_qs.filter(
-                    datetime__gte=event.datetime
-                ).order_by('datetime')[0:5],
-                key=lambda x: (x.datetime, x.id)
-            )[0]
-        except IndexError:
-            next_event = None
-
-        try:
-            prev_event = sorted(
-                base_qs.filter(
-                    datetime__lte=event.datetime,
-                ).order_by('-datetime')[0:5],
-                key=lambda x: (x.datetime, x.id),
-                reverse=True
-            )[0]
-        except IndexError:
-            prev_event = None
-
-        data = serialize(event, request.user)
-
-        if next_event:
-            data['nextEventID'] = str(next_event.id)
-        else:
-            data['nextEventID'] = None
-        if prev_event:
-            data['previousEventID'] = str(prev_event.id)
-        else:
-            data['previousEventID'] = None
-
-        return Response(data)
diff --git a/src/sentry/api/endpoints/project_event_details.py b/src/sentry/api/endpoints/project_event_details.py
new file mode 100644
index 0000000000..d4a53d02de
--- /dev/null
+++ b/src/sentry/api/endpoints/project_event_details.py
@@ -0,0 +1,66 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.base import DocSection
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.serializers import serialize
+from sentry.models import Event
+
+
+class ProjectEventDetailsEndpoint(ProjectEndpoint):
+    doc_section = DocSection.EVENTS
+
+    def get(self, request, project, event_id):
+        """
+        Retrieve an event for a project
+
+        Return details on an individual event.
+
+            {method} {path}
+
+        """
+        event = Event.objects.get(
+            event_id=event_id,
+            project=project,
+        )
+
+        Event.objects.bind_nodes([event], 'data')
+
+        # HACK(dcramer): work around lack of unique sorting on datetime
+        base_qs = Event.objects.filter(
+            group=event.group_id,
+        ).exclude(id=event.id)
+        try:
+            next_event = sorted(
+                base_qs.filter(
+                    datetime__gte=event.datetime
+                ).order_by('datetime')[0:5],
+                key=lambda x: (x.datetime, x.id)
+            )[0]
+        except IndexError:
+            next_event = None
+
+        try:
+            prev_event = sorted(
+                base_qs.filter(
+                    datetime__lte=event.datetime,
+                ).order_by('-datetime')[0:5],
+                key=lambda x: (x.datetime, x.id),
+                reverse=True
+            )[0]
+        except IndexError:
+            prev_event = None
+
+        data = serialize(event, request.user)
+
+        if next_event:
+            data['nextEventID'] = str(next_event.event_id)
+        else:
+            data['nextEventID'] = None
+        if prev_event:
+            data['previousEventID'] = str(prev_event.event_id)
+        else:
+            data['previousEventID'] = None
+
+        return Response(data)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index f0c16f0cd4..b1e5862ee9 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -5,7 +5,7 @@ from django.conf.urls import patterns, url
 from .endpoints.auth_index import AuthIndexEndpoint
 from .endpoints.broadcast_index import BroadcastIndexEndpoint
 from .endpoints.catchall import CatchallEndpoint
-from .endpoints.event_details import EventDetailsEndpoint, ProjectEventDetailsEndpoint
+from .endpoints.event_details import EventDetailsEndpoint
 from .endpoints.group_details import GroupDetailsEndpoint
 from .endpoints.group_events import GroupEventsEndpoint
 from .endpoints.group_events_latest import GroupEventsLatestEndpoint
@@ -29,6 +29,7 @@ from .endpoints.organization_projects import OrganizationProjectsEndpoint
 from .endpoints.organization_stats import OrganizationStatsEndpoint
 from .endpoints.organization_teams import OrganizationTeamsEndpoint
 from .endpoints.project_details import ProjectDetailsEndpoint
+from .endpoints.project_event_details import ProjectEventDetailsEndpoint
 from .endpoints.project_group_index import ProjectGroupIndexEndpoint
 from .endpoints.project_keys import ProjectKeysEndpoint
 from .endpoints.project_key_details import ProjectKeyDetailsEndpoint
diff --git a/tests/sentry/api/endpoints/test_event_details.py b/tests/sentry/api/endpoints/test_event_details.py
index 729769ca4e..dc985184ab 100644
--- a/tests/sentry/api/endpoints/test_event_details.py
+++ b/tests/sentry/api/endpoints/test_event_details.py
@@ -35,38 +35,3 @@ class EventDetailsTest(APITestCase):
         assert response.data['nextEventID'] == str(next_event.id)
         assert response.data['previousEventID'] == str(prev_event.id)
         assert response.data['groupID'] == group.id
-
-
-class ProjectEventDetailsTest(APITestCase):
-    def test_simple(self):
-        self.login_as(user=self.user)
-
-        group = self.create_group()
-        prev_event = self.create_event(
-            event_id='a',
-            group=group,
-            datetime=datetime(2013, 8, 13, 3, 8, 24),
-        )
-        cur_event = self.create_event(
-            event_id='b',
-            group=group,
-            datetime=datetime(2013, 8, 13, 3, 8, 25),
-        )
-        next_event = self.create_event(
-            event_id='c',
-            group=group,
-            datetime=datetime(2013, 8, 13, 3, 8, 26),
-        )
-
-        url = reverse('sentry-api-0-project-event-details', kwargs={
-            'event_id': cur_event.event_id,
-            'project_slug': cur_event.project.slug,
-            'organization_slug': cur_event.project.organization.slug,
-        })
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data['id'] == str(cur_event.id)
-        assert response.data['nextEventID'] == str(next_event.id)
-        assert response.data['previousEventID'] == str(prev_event.id)
-        assert response.data['groupID'] == group.id
diff --git a/tests/sentry/api/endpoints/test_project_event_details.py b/tests/sentry/api/endpoints/test_project_event_details.py
new file mode 100644
index 0000000000..d6a8ab28e5
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_event_details.py
@@ -0,0 +1,41 @@
+from __future__ import absolute_import
+
+from datetime import datetime
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase
+
+
+class ProjectEventDetailsTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+        prev_event = self.create_event(
+            event_id='a',
+            group=group,
+            datetime=datetime(2013, 8, 13, 3, 8, 24),
+        )
+        cur_event = self.create_event(
+            event_id='b',
+            group=group,
+            datetime=datetime(2013, 8, 13, 3, 8, 25),
+        )
+        next_event = self.create_event(
+            event_id='c',
+            group=group,
+            datetime=datetime(2013, 8, 13, 3, 8, 26),
+        )
+
+        url = reverse('sentry-api-0-project-event-details', kwargs={
+            'event_id': cur_event.event_id,
+            'project_slug': cur_event.project.slug,
+            'organization_slug': cur_event.project.organization.slug,
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == str(cur_event.id)
+        assert response.data['nextEventID'] == str(next_event.event_id)
+        assert response.data['previousEventID'] == str(prev_event.event_id)
+        assert response.data['groupID'] == group.id
