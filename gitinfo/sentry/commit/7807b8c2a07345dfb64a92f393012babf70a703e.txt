commit 7807b8c2a07345dfb64a92f393012babf70a703e
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Wed Apr 17 11:21:12 2019 -0700

    ref(app-platform): Include stacktrace information in issue.description  (#12783)
    
    
    * render stacktrace in issue.description

diff --git a/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx b/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx
index 66d09a0cde..5a8d2281ff 100644
--- a/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx
+++ b/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx
@@ -22,6 +22,7 @@ class ExternalIssueList extends AsyncComponent {
     group: SentryTypes.Group.isRequired,
     project: SentryTypes.Project.isRequired,
     organization: SentryTypes.Organization.isRequired,
+    event: SentryTypes.Event,
     orgId: PropTypes.string,
   };
 
@@ -138,6 +139,7 @@ class ExternalIssueList extends AsyncComponent {
         <SentryAppExternalIssueActions
           key={sentryApp.slug}
           group={group}
+          event={this.props.event}
           sentryAppComponent={component}
           sentryAppInstallation={installation}
           externalIssue={issue}
diff --git a/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.jsx b/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.jsx
index 5914aa5557..5461711a5e 100644
--- a/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.jsx
+++ b/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.jsx
@@ -11,6 +11,7 @@ import SentryAppIcon from 'app/components/sentryAppIcon';
 import SentryAppExternalIssueForm from 'app/components/group/sentryAppExternalIssueForm';
 import NavTabs from 'app/components/navTabs';
 import {t, tct} from 'app/locale';
+import SentryTypes from 'app/sentryTypes';
 import space from 'app/styles/space';
 import {deleteExternalIssue} from 'app/actionCreators/platformExternalIssues';
 
@@ -21,6 +22,7 @@ class SentryAppExternalIssueActions extends React.Component {
     sentryAppComponent: PropTypes.object.isRequired,
     sentryAppInstallation: PropTypes.object,
     externalIssue: PropTypes.object,
+    event: SentryTypes.Event,
   };
 
   constructor(props) {
@@ -144,6 +146,7 @@ class SentryAppExternalIssueActions extends React.Component {
             config={sentryAppComponent.schema}
             action={action}
             onSubmitSuccess={this.onSubmitSuccess}
+            event={this.props.event}
           />
         </Modal.Body>
       </Modal>
diff --git a/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.jsx b/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.jsx
index c47aeffd80..9ec5b9a20c 100644
--- a/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.jsx
+++ b/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.jsx
@@ -9,6 +9,7 @@ import Form from 'app/views/settings/components/forms/form';
 import SentryTypes from 'app/sentryTypes';
 import {t} from 'app/locale';
 import ExternalIssueStore from 'app/stores/externalIssueStore';
+import getStacktraceBody from 'app/utils/getStacktraceBody';
 import withApi from 'app/utils/withApi';
 
 class SentryAppExternalIssueForm extends React.Component {
@@ -18,6 +19,7 @@ class SentryAppExternalIssueForm extends React.Component {
     sentryAppInstallation: PropTypes.object,
     config: PropTypes.object.isRequired,
     action: PropTypes.oneOf(['link', 'create']),
+    event: SentryTypes.Event,
     onSubmitSuccess: PropTypes.func,
   };
 
@@ -76,6 +78,17 @@ class SentryAppExternalIssueForm extends React.Component {
       : {};
   };
 
+  getStacktrace() {
+    const evt = this.props.event;
+    const contentArr = getStacktraceBody(evt);
+
+    if (contentArr && contentArr.length > 0) {
+      return '\n\n```\n' + contentArr[0] + '\n```';
+    } else {
+      return '';
+    }
+  }
+
   getFieldDefault(field) {
     const {group} = this.props;
     if (field.type == 'textarea') {
@@ -86,10 +99,11 @@ class SentryAppExternalIssueForm extends React.Component {
       case 'issue.title':
         return group.title;
       case 'issue.description':
+        const stacktrace = this.getStacktrace();
         const queryParams = {referrer: this.props.sentryAppInstallation.sentryApp.name};
         const url = addQueryParamsToExistingUrl(group.permalink, queryParams);
         const shortId = group.shortId;
-        return t('Sentry Issue: [%s](%s)', shortId, url);
+        return t('Sentry Issue: [%s](%s)%s', shortId, url, stacktrace);
       default:
         return '';
     }
diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index 18839382a9..341541062c 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -251,6 +251,7 @@ const GroupSidebar = createReactClass({
           allEnvironments={this.state.allEnvironmentsGroupData}
         />
         <ExternalIssueList
+          event={this.props.event}
           group={this.props.group}
           project={project}
           orgId={organization.slug}
diff --git a/src/sentry/static/sentry/app/components/issueDiff.jsx b/src/sentry/static/sentry/app/components/issueDiff.jsx
index 1ac74f3359..4847f63f78 100644
--- a/src/sentry/static/sentry/app/components/issueDiff.jsx
+++ b/src/sentry/static/sentry/app/components/issueDiff.jsx
@@ -6,7 +6,7 @@ import {addErrorMessage} from 'app/actionCreators/indicator';
 import {t} from 'app/locale';
 import withApi from 'app/utils/withApi';
 import LoadingIndicator from 'app/components/loadingIndicator';
-import rawStacktraceContent from 'app/components/events/interfaces/rawStacktraceContent';
+import getStacktraceBody from 'app/utils/getStacktraceBody';
 
 class IssueDiff extends React.Component {
   static propTypes = {
@@ -49,8 +49,8 @@ class IssueDiff extends React.Component {
       .then(([{default: SplitDiffAsync}, baseEvent, targetEvent]) => {
         this.setState({
           SplitDiffAsync,
-          baseEvent: this.getException(baseEvent),
-          targetEvent: this.getException(targetEvent),
+          baseEvent: getStacktraceBody(baseEvent),
+          targetEvent: getStacktraceBody(targetEvent),
           loading: false,
         });
       })
@@ -59,39 +59,6 @@ class IssueDiff extends React.Component {
       });
   }
 
-  getException(event) {
-    if (!event || !event.entries) {
-      return [];
-    }
-
-    // TODO(billyvg): This only accounts for the first exception, will need navigation to be able to
-    // diff multiple exceptions
-    //
-    // See: https://github.com/getsentry/sentry/issues/6055
-    const exc = event.entries.find(({type}) => type === 'exception');
-
-    if (!exc) {
-      // Look for a message if not an exception
-      const msg = event.entries.find(({type}) => type === 'message');
-      if (!msg) {
-        return [];
-      }
-
-      return msg.data && msg.data.message && [msg.data.message];
-    }
-
-    if (!exc.data) {
-      return [];
-    }
-
-    return exc.data.values
-      .filter(value => !!value.stacktrace)
-      .map(value => rawStacktraceContent(value.stacktrace, event.platform, value))
-      .reduce((acc, value) => {
-        return acc.concat(value);
-      }, []);
-  }
-
   getEndpoint(issueId, eventId) {
     const {orgId, projectId} = this.props;
 
diff --git a/src/sentry/static/sentry/app/utils/getStacktraceBody.jsx b/src/sentry/static/sentry/app/utils/getStacktraceBody.jsx
new file mode 100644
index 0000000000..b34bfede73
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/getStacktraceBody.jsx
@@ -0,0 +1,33 @@
+import rawStacktraceContent from 'app/components/events/interfaces/rawStacktraceContent';
+
+export default function getStacktraceBody(event) {
+  if (!event || !event.entries) {
+    return [];
+  }
+
+  // TODO(billyvg): This only accounts for the first exception, will need navigation to be able to
+  // diff multiple exceptions
+  //
+  // See: https://github.com/getsentry/sentry/issues/6055
+  const exc = event.entries.find(({type}) => type === 'exception');
+
+  if (!exc) {
+    // Look for a message if not an exception
+    const msg = event.entries.find(({type}) => type === 'message');
+    if (!msg) {
+      return [];
+    }
+    return msg.data && msg.data.formatted && [msg.data.formatted];
+  }
+
+  if (!exc.data) {
+    return [];
+  }
+
+  return exc.data.values
+    .filter(value => !!value.stacktrace)
+    .map(value => rawStacktraceContent(value.stacktrace, event.platform, value))
+    .reduce((acc, value) => {
+      return acc.concat(value);
+    }, []);
+}
diff --git a/tests/js/fixtures/eventStacktraceException.js b/tests/js/fixtures/eventStacktraceException.js
new file mode 100644
index 0000000000..b9f77832ef
--- /dev/null
+++ b/tests/js/fixtures/eventStacktraceException.js
@@ -0,0 +1,45 @@
+import {Event} from './event';
+
+const exception = {
+  type: 'exception',
+  data: {
+    values: [
+      {
+        module: 'example.application',
+        type: 'Error',
+        value: 'an error occurred',
+        stacktrace: {
+          frames: [
+            {
+              function: 'main',
+              module: 'example.application',
+              lineNo: 1,
+              filename: 'application',
+            },
+            {
+              function: 'doThing',
+              module: 'example.application',
+              lineNo: 2,
+              filename: 'application',
+            },
+          ],
+        },
+      },
+    ],
+  },
+};
+
+const message = {
+  type: 'message',
+  data: {
+    formatted: 'Something is broken',
+  },
+};
+
+export function EventStacktraceException(params = []) {
+  return Event({entries: [{...exception}], ...params});
+}
+
+export function EventStacktraceMessage(params = []) {
+  return Event({entries: [{...message}], ...params});
+}
diff --git a/tests/js/spec/components/issueDiff.spec.jsx b/tests/js/spec/components/issueDiff.spec.jsx
index d42dc4fab7..2f730071cf 100644
--- a/tests/js/spec/components/issueDiff.spec.jsx
+++ b/tests/js/spec/components/issueDiff.spec.jsx
@@ -61,14 +61,14 @@ describe('IssueDiff', function() {
     Client.addMockResponse({
       url: '/issues/target/events/latest/',
       body: {
-        entries: [{type: 'message', data: {message: 'Hello World'}}],
+        entries: [{type: 'message', data: {formatted: 'Hello World'}}],
       },
     });
     Client.addMockResponse({
       url: '/issues/base/events/latest/',
       body: {
         platform: 'javascript',
-        entries: [{type: 'message', data: {message: 'Foo World'}}],
+        entries: [{type: 'message', data: {formatted: 'Foo World'}}],
       },
     });
 
diff --git a/tests/js/spec/utils/getStacktraceBody.spec.jsx b/tests/js/spec/utils/getStacktraceBody.spec.jsx
new file mode 100644
index 0000000000..7eb48eb05d
--- /dev/null
+++ b/tests/js/spec/utils/getStacktraceBody.spec.jsx
@@ -0,0 +1,25 @@
+import getStacktraceBody from 'app/utils/getStacktraceBody';
+
+describe('getStacktraceBody', function() {
+  const eventException = TestStubs.EventStacktraceException({platform: 'python'});
+  const eventMessage = TestStubs.EventStacktraceMessage({platform: 'python'});
+
+  it('formats with an exception', function() {
+    const result = getStacktraceBody(eventException);
+    expect(result).toEqual([
+      `Error: an error occurred
+  File "application", line 1, in main
+  File "application", line 2, in doThing`,
+    ]);
+  });
+
+  it('formats with a message', function() {
+    const result = getStacktraceBody(eventMessage);
+    expect(result).toEqual(['Something is broken']);
+  });
+
+  it('returns empty array for empty event entries', function() {
+    const result = getStacktraceBody({});
+    expect(result).toEqual([]);
+  });
+});
