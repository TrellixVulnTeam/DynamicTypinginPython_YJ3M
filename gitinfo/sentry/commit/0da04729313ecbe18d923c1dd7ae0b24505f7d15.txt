commit 0da04729313ecbe18d923c1dd7ae0b24505f7d15
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Nov 27 14:36:05 2018 -0800

    feat(settings): Expose disabled project filters to members (#10791)

diff --git a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx
index 325b79fba6..74b24dee1f 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx
@@ -11,6 +11,7 @@ import {
   PanelItem,
 } from 'app/components/panels';
 import {t} from 'app/locale';
+import Access from 'app/components/acl/access';
 import AsyncComponent from 'app/components/asyncComponent';
 import Feature from 'app/components/acl/feature';
 import FeatureDisabled from 'app/components/acl/featureDisabled';
@@ -67,6 +68,7 @@ class LegacyBrowserFilterRow extends React.Component {
   static propTypes = {
     data: PropTypes.object.isRequired,
     onToggle: PropTypes.func.isRequired,
+    disabled: PropTypes.bool,
   };
 
   constructor(props) {
@@ -111,17 +113,20 @@ class LegacyBrowserFilterRow extends React.Component {
   };
 
   render() {
+    let {disabled} = this.props;
     return (
       <div>
-        <BulkFilter>
-          <BulkFilterLabel>{t('Filter')}:</BulkFilterLabel>
-          <BulkFilterItem onClick={this.handleToggleSubfilters.bind(this, true)}>
-            {t('All')}
-          </BulkFilterItem>
-          <BulkFilterItem onClick={this.handleToggleSubfilters.bind(this, false)}>
-            {t('None')}
-          </BulkFilterItem>
-        </BulkFilter>
+        {!disabled && (
+          <BulkFilter>
+            <BulkFilterLabel>{t('Filter')}:</BulkFilterLabel>
+            <BulkFilterItem onClick={this.handleToggleSubfilters.bind(this, true)}>
+              {t('All')}
+            </BulkFilterItem>
+            <BulkFilterItem onClick={this.handleToggleSubfilters.bind(this, false)}>
+              {t('None')}
+            </BulkFilterItem>
+          </BulkFilter>
+        )}
 
         <FilterGrid>
           {LEGACY_BROWSER_KEYS.map(key => {
@@ -139,6 +144,7 @@ class LegacyBrowserFilterRow extends React.Component {
 
                   <Switch
                     isActive={this.state.subfilters.has(key)}
+                    isDisabled={disabled}
                     css={{flexShrink: 0, marginLeft: 6}}
                     toggle={this.handleToggleSubfilters.bind(this, key)}
                     size="lg"
@@ -189,7 +195,7 @@ class ProjectFiltersSettings extends AsyncComponent {
     />
   );
 
-  renderCustomFilters = () => (
+  renderCustomFilters = disabled => () => (
     <Feature
       features={['projects:custom-inbound-filters']}
       renderDisabled={({children, ...props}) =>
@@ -200,7 +206,11 @@ class ProjectFiltersSettings extends AsyncComponent {
           {!hasFeature && renderDisabled({organization, ...featureProps})}
 
           {customFilterFields.map(field => (
-            <FieldFromConfig key={field.name} field={{...field, disabled: !hasFeature}} />
+            <FieldFromConfig
+              key={field.name}
+              field={field}
+              disabled={disabled || !hasFeature}
+            />
           ))}
         </React.Fragment>
       )}
@@ -217,77 +227,84 @@ class ProjectFiltersSettings extends AsyncComponent {
     let filtersEndpoint = `${projectEndpoint}filters/`;
 
     return (
-      <React.Fragment>
-        <Panel>
-          <PanelHeader>{t('Filters')}</PanelHeader>
-          <PanelBody>
-            {this.state.filterList.map((filter, idx) => {
-              let fieldProps = {
-                name: filter.id,
-                label: filter.name,
-                help: filter.description,
-              };
-
-              // Note by default, forms generate data in the format of:
-              // { [fieldName]: [value] }
-              // Endpoints for these filters expect data to be:
-              // { 'active': [value] }
-              return (
-                <PanelItem key={filter.id} p={0}>
-                  <NestedForm
-                    apiMethod="PUT"
-                    apiEndpoint={`${filtersEndpoint}${filter.id}/`}
-                    initialData={{[filter.id]: filter.active}}
-                    saveOnBlur
-                  >
-                    {filter.id !== 'legacy-browsers' ? (
-                      <FieldFromConfig
-                        key={filter.id}
-                        getData={data => ({active: data[filter.id]})}
-                        field={{
-                          type: 'boolean',
-                          ...fieldProps,
-                        }}
-                      />
-                    ) : (
-                      <FormField
-                        inline={false}
-                        {...fieldProps}
-                        getData={data => ({subfilters: data[filter.id]})}
+      <Access access={['project:write']}>
+        {({hasAccess}) => (
+          <React.Fragment>
+            <Panel>
+              <PanelHeader>{t('Filters')}</PanelHeader>
+              <PanelBody>
+                {this.state.filterList.map((filter, idx) => {
+                  let fieldProps = {
+                    name: filter.id,
+                    label: filter.name,
+                    help: filter.description,
+                    disabled: !hasAccess,
+                  };
+
+                  // Note by default, forms generate data in the format of:
+                  // { [fieldName]: [value] }
+                  // Endpoints for these filters expect data to be:
+                  // { 'active': [value] }
+                  return (
+                    <PanelItem key={filter.id} p={0}>
+                      <NestedForm
+                        apiMethod="PUT"
+                        apiEndpoint={`${filtersEndpoint}${filter.id}/`}
+                        initialData={{[filter.id]: filter.active}}
+                        saveOnBlur
                       >
-                        {({onChange, onBlur}) => (
-                          <LegacyBrowserFilterRow
+                        {filter.id !== 'legacy-browsers' ? (
+                          <FieldFromConfig
                             key={filter.id}
-                            data={filter}
-                            onToggle={this.handleLegacyChange.bind(
-                              this,
-                              onChange,
-                              onBlur
-                            )}
+                            getData={data => ({active: data[filter.id]})}
+                            field={{
+                              type: 'boolean',
+                              ...fieldProps,
+                            }}
                           />
+                        ) : (
+                          <FormField
+                            inline={false}
+                            {...fieldProps}
+                            getData={data => ({subfilters: data[filter.id]})}
+                          >
+                            {({onChange, onBlur}) => (
+                              <LegacyBrowserFilterRow
+                                key={filter.id}
+                                data={filter}
+                                disabled={!hasAccess}
+                                onToggle={this.handleLegacyChange.bind(
+                                  this,
+                                  onChange,
+                                  onBlur
+                                )}
+                              />
+                            )}
+                          </FormField>
                         )}
-                      </FormField>
-                    )}
-                  </NestedForm>
-                </PanelItem>
-              );
-            })}
-          </PanelBody>
-        </Panel>
-
-        <Form
-          apiMethod="PUT"
-          apiEndpoint={projectEndpoint}
-          initialData={this.state.project.options}
-          saveOnBlur
-        >
-          <JsonForm
-            features={features}
-            forms={filterGroups}
-            renderFooter={this.renderCustomFilters}
-          />
-        </Form>
-      </React.Fragment>
+                      </NestedForm>
+                    </PanelItem>
+                  );
+                })}
+              </PanelBody>
+            </Panel>
+
+            <Form
+              apiMethod="PUT"
+              apiEndpoint={projectEndpoint}
+              initialData={this.state.project.options}
+              saveOnBlur
+            >
+              <JsonForm
+                features={features}
+                forms={filterGroups}
+                disabled={!hasAccess}
+                renderFooter={this.renderCustomFilters(!hasAccess)}
+              />
+            </Form>
+          </React.Fragment>
+        )}
+      </Access>
     );
   }
 }
diff --git a/tests/js/spec/views/projectFilters.spec.jsx b/tests/js/spec/views/projectFilters.spec.jsx
index 7f558801ed..7457e659ad 100644
--- a/tests/js/spec/views/projectFilters.spec.jsx
+++ b/tests/js/spec/views/projectFilters.spec.jsx
@@ -258,4 +258,17 @@ describe('ProjectFilters', function() {
       'error\nerror2'
     );
   });
+
+  it('disables configuration for non project:write users', function() {
+    wrapper = mount(
+      <ProjectFilters
+        params={{projectId: project.slug, orgId: org.slug}}
+        location={{}}
+      />,
+      TestStubs.routerContext([{organization: TestStubs.Organization({access: []})}])
+    );
+
+    expect(wrapper.find('FormField[disabled=false]')).toHaveLength(0);
+    expect(wrapper.find('LegacyBrowserFilterRow[disabled=false]')).toHaveLength(0);
+  });
 });
