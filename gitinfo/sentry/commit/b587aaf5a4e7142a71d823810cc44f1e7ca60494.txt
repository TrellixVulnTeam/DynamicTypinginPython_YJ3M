commit b587aaf5a4e7142a71d823810cc44f1e7ca60494
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu May 12 15:37:12 2016 +0200

    Implemented basic error handling and reporting for dsym failures.

diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 0dd2fc5b7d..342805887f 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -74,10 +74,7 @@ class EventSerializer(Serializer):
             error_result = {
                 'type': error['type'],
                 'message': message,
-                'data': {
-                    k: v for k, v in error.items()
-                    if k != 'type'
-                },
+                'data': error.to_dict(),
             }
             errors.append(error_result)
 
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 9df9643859..ae18d3b123 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -1,12 +1,20 @@
 from __future__ import absolute_import, print_function
 
+import logging
 import posixpath
 
-from sentry.models import Project
+from sentry.models import Project, EventError
 from sentry.plugins import Plugin2
 from sentry.lang.native.symbolizer import Symbolizer, have_symsynd
 
 
+logger = logging.getLogger(__name__)
+
+
+def append_error(data, err):
+    data.setdefault('errors', []).append(err)
+
+
 def exception_from_apple_error_or_diagnosis(error, diagnosis=None):
     error = error or {}
 
@@ -110,16 +118,27 @@ def preprocess_apple_crash_event(data):
         if thread['crashed']:
             crashed_thread = thread
     if crashed_thread is None:
-        return
-
-    system = crash_report.get('system')
-    sym = Symbolizer(project, crash_report['binary_images'],
-                     threads=[crashed_thread])
-    with sym:
-        bt = sym.symbolize_backtrace(crashed_thread['backtrace']['contents'],
-                                     system)
-        inject_apple_backtrace(data, bt, crash.get('diagnosis'),
-                               crash.get('error'), system)
+        append_error(data, {
+            'type': EventError.NATIVE_NO_CRASHED_THREAD,
+        })
+
+    else:
+        system = crash_report.get('system')
+        try:
+            sym = Symbolizer(project, crash_report['binary_images'],
+                             threads=[crashed_thread])
+            with sym:
+                bt = sym.symbolize_backtrace(
+                    crashed_thread['backtrace']['contents'], system)
+                inject_apple_backtrace(data, bt, crash.get('diagnosis'),
+                                       crash.get('error'), system)
+        except Exception as e:
+            logger.exception('Failed to symbolicate')
+            append_error(data, {
+                'type': EventError.NATIVE_INTERNAL_FAILURE,
+                'error': e
+            })
+            return
 
     return data
 
diff --git a/src/sentry/models/eventerror.py b/src/sentry/models/eventerror.py
index 69ca64d1d7..a1adf6899c 100644
--- a/src/sentry/models/eventerror.py
+++ b/src/sentry/models/eventerror.py
@@ -18,6 +18,9 @@ class EventError(object):
     JS_INVALID_SOURCE_ENCODING = 'js_invalid_source_encoding'
     JS_INVALID_SOURCEMAP_LOCATION = 'js_invalid_sourcemap_location'
 
+    NATIVE_NO_CRASHED_THREAD = 'native_no_crashed_thread'
+    NATIVE_INTERNAL_FAILURE = 'native_internal_failure'
+
     _messages = {
         INVALID_DATA: 'Discarded invalid value for parameter \'{name}\'',
         INVALID_ATTRIBUTE: 'Discarded invalid parameter \'{name}\'',
@@ -33,8 +36,17 @@ class EventError(object):
         JS_TOO_MANY_REMOTE_SOURCES: 'The maximum number of remote source requests was made',
         JS_INVALID_SOURCE_ENCODING: 'Source file was not \'{value}\' encoding: {url}',
         JS_INVALID_SOURCEMAP_LOCATION: 'Invalid location in sourcemap: ({column}, {row})',
+        NATIVE_NO_CRASHED_THREAD: 'No crashed thread found in crash report',
+        NATIVE_INTERNAL_FAILURE: 'Internal failure when attempting to symbolicate.',
     }
 
     @classmethod
     def get_message(cls, data):
+        message = data.get('message')
+        if message is not None:
+            return message
         return cls._messages[data['type']].format(**data)
+
+    def to_dict(self):
+        return {k: v for k, v in self.iteritems()
+                if k not in ('type', 'message')}
