commit 10162e0e32483ce4726721b605162ef8cc6f4391
Author: Matte Noble <me@mattenoble.com>
Date:   Wed Aug 1 14:43:17 2018 -0700

    feat(integrations): Migrate VSTS repositories (#9182)
    
    After the VSTS integration is installed, it will find all accessible Repositories and associate them with the Integration.

diff --git a/src/sentry/integrations/vsts/client.py b/src/sentry/integrations/vsts/client.py
index b90b71e6ef..9bf0229291 100644
--- a/src/sentry/integrations/vsts/client.py
+++ b/src/sentry/integrations/vsts/client.py
@@ -22,7 +22,7 @@ class VstsApiPath(object):
     commits_changes = u'https://{account_name}/DefaultCollection/_apis/git/repositories/{repo_id}/commits/{commit_id}/changes'
     projects = u'https://{account_name}/DefaultCollection/_apis/projects'
     repository = u'https://{account_name}/DefaultCollection/{project}_apis/git/repositories/{repo_id}'
-    repositories = u'https://{account_name}/{project}/_apis/git/repositories'
+    repositories = u'https://{account_name}/{project}_apis/git/repositories'
     subscription = 'https://{account_name}/_apis/hooks/subscriptions/{subscription_id}'
     subscriptions = u'https://{account_name}/_apis/hooks/subscriptions'
     work_items = u'https://{account_name}/DefaultCollection/_apis/wit/workitems/{id}'
diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index 7c62e60004..520459de95 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -11,6 +11,7 @@ from sentry.integrations import Integration, IntegrationFeatures, IntegrationPro
 from sentry.integrations.exceptions import ApiError, IntegrationError
 from sentry.integrations.repositories import RepositoryMixin
 from sentry.integrations.vsts.issues import VstsIssueSync
+from sentry.models import Repository
 from sentry.pipeline import NestedPipelineView
 from sentry.identity.pipeline import IdentityProviderPipeline
 from sentry.identity.vsts import VSTSIdentityProvider, get_user_info
@@ -69,11 +70,22 @@ class VstsIntegration(Integration, RepositoryMixin, VstsIssueSync):
             })
         return data
 
+    def get_unmigratable_repositories(self):
+        return Repository.objects.filter(
+            organization_id=self.organization_id,
+            provider='visualstudio',
+        ).exclude(
+            external_id__in=[r['identifier'] for r in self.get_repositories()],
+        )
+
     def get_client(self):
         if self.default_identity is None:
             self.default_identity = self.get_default_identity()
 
-        return VstsApiClient(self.default_identity, VstsIntegrationProvider.oauth_redirect_url)
+        return VstsApiClient(
+            self.default_identity,
+            VstsIntegrationProvider.oauth_redirect_url,
+        )
 
     def get_organization_config(self):
         client = self.get_client()
@@ -196,6 +208,21 @@ class VstsIntegrationProvider(IntegrationProvider):
         'height': 800,
     }
 
+    def post_install(self, integration, organization):
+        unmigratable_repos = self \
+            .get_installation(integration, organization.id) \
+            .get_unmigratable_repositories()
+
+        repos = Repository.objects.filter(
+            organization_id=organization.id,
+            provider='visualstudio',
+        ).exclude(
+            id__in=unmigratable_repos,
+        )
+
+        for repo in repos:
+            repo.update(integration_id=integration.id)
+
     def get_pipeline_views(self):
         identity_pipeline_config = {
             'redirect_url': absolute_uri(self.oauth_redirect_url),
diff --git a/tests/sentry/integrations/vsts/test_client.py b/tests/sentry/integrations/vsts/test_client.py
new file mode 100644
index 0000000000..a476c80788
--- /dev/null
+++ b/tests/sentry/integrations/vsts/test_client.py
@@ -0,0 +1,46 @@
+from __future__ import absolute_import
+
+import responses
+
+from time import time
+
+from sentry.models import Identity, IdentityProvider, Integration
+from .testutils import VstsIntegrationTestCase
+
+
+class VstsApiClientTest(VstsIntegrationTestCase):
+    def test_refreshes_expired_token(self):
+        self.assert_installation()
+        integration = Integration.objects.get(provider='vsts')
+
+        # Make the Identity have an expired token
+        idp = IdentityProvider.objects.get(external_id=self.vsts_account_id)
+        identity = Identity.objects.get(idp_id=idp.id)
+        identity.data['expires'] = int(time()) - int(123456789)
+        identity.save()
+
+        # New values VSTS will return on refresh
+        self.access_token = 'new-access-token'
+        self.refresh_token = 'new-refresh-token'
+        self._stub_vsts()
+
+        # Make a request with expired token
+        integration \
+            .get_installation(integration.organizations.first().id) \
+            .get_client() \
+            .get_projects('{}.visualstudio.com'.format(self.vsts_account_name))
+
+        # Second to last request, before the Projects request, was to refresh
+        # the Access Token.
+        assert responses.calls[-2].request.url == \
+            'https://app.vssps.visualstudio.com/oauth2/token'
+
+        # Then we request the Projects with the new token
+        assert responses.calls[-1].request.url == \
+            'https://{}.visualstudio.com/DefaultCollection/_apis/projects?stateFilter=WellFormed'.format(
+                self.vsts_account_name.lower(),
+        )
+
+        identity = Identity.objects.get(id=identity.id)
+        assert identity.data['access_token'] == 'new-access-token'
+        assert identity.data['refresh_token'] == 'new-refresh-token'
diff --git a/tests/sentry/integrations/vsts/test_integration.py b/tests/sentry/integrations/vsts/test_integration.py
index d380b83e49..974c7ce747 100644
--- a/tests/sentry/integrations/vsts/test_integration.py
+++ b/tests/sentry/integrations/vsts/test_integration.py
@@ -1,239 +1,198 @@
 from __future__ import absolute_import
 
-import responses
-
-from time import time
-
 from sentry.identity.vsts import VSTSIdentityProvider
 from sentry.integrations.vsts import VstsIntegration, VstsIntegrationProvider
-from sentry.models import Integration, IntegrationExternalProject, Identity, IdentityProvider, OrganizationIntegration
-from sentry.testutils import APITestCase, TestCase
-from .testutils import CREATE_SUBSCRIPTION
-
-
-class VstsIntegrationProviderTest(TestCase):
-    def setUp(self):
-        self.integration = VstsIntegrationProvider()
-        responses.add(
-            responses.GET,
-            'https://app.vssps.visualstudio.com/_apis/profile/profiles/me?api-version=1.0',
-            json={
-                'id': 'user1',
-                'displayName': 'Sentry User',
-                'emailAddress': 'sentry@user.com',
-            },
+from sentry.models import (
+    Integration, IntegrationExternalProject, OrganizationIntegration, Repository
+)
+from .testutils import VstsIntegrationTestCase, CREATE_SUBSCRIPTION
+
+
+class VstsIntegrationProviderTest(VstsIntegrationTestCase):
+    # Test data setup in ``VstsIntegrationTestCase``
+
+    def test_basic_flow(self):
+        self.assert_installation()
+
+        integration = Integration.objects.get(provider='vsts')
+
+        assert integration.external_id == self.vsts_account_id
+        assert integration.name == self.vsts_account_name
+
+        metadata = integration.metadata
+        assert metadata['scopes'] == list(VSTSIdentityProvider.oauth_scopes)
+        assert metadata['subscription']['id'] == \
+            CREATE_SUBSCRIPTION['publisherInputs']['tfsSubscriptionId']
+        assert metadata['domain_name'] == '{}.visualstudio.com'.format(
+            self.vsts_account_name
         )
-        responses.add(
-            responses.GET,
-            'https://app.vssps.visualstudio.com/_apis/connectionData/',
-            json={
-                'authenticatedUser': {
-                    'subjectDescriptor': 'user1-subject-desc',
-                },
-            },
+
+    def test_migrate_repositories(self):
+        accessible_repo = Repository.objects.create(
+            organization_id=self.organization.id,
+            name=self.project_a['name'],
+            url='https://{}.visualstudio.com/DefaultCollection/_git/{}'.format(
+                self.vsts_account_name,
+                self.repo_name,
+            ),
+            provider='visualstudio',
+            external_id=self.repo_id,
         )
-        responses.add(
-            responses.POST,
-            'https://sentry.visualstudio.com/_apis/hooks/subscriptions',
-            json=CREATE_SUBSCRIPTION,
+
+        inaccessible_repo = Repository.objects.create(
+            organization_id=self.organization.id,
+            name='NotReachable',
+            url='https://randoaccount.visualstudio.com/Product/_git/NotReachable',
+            provider='visualstudio',
+            external_id='123456789',
         )
 
-    @responses.activate
+        self.assert_installation()
+        integration = Integration.objects.get(provider='vsts')
+
+        assert Repository.objects.get(
+            id=accessible_repo.id,
+        ).integration_id == integration.id
+
+        assert Repository.objects.get(
+            id=inaccessible_repo.id,
+        ).integration_id is None
+
     def test_build_integration(self):
         state = {
-            'account': {'AccountName': 'sentry', 'AccountId': '123435'},
-            'instance': 'sentry.visualstudio.com',
+            'account': {
+                'AccountName': self.vsts_account_name,
+                'AccountId': self.vsts_account_id,
+            },
+            'instance': '{}.visualstudio.com'.format(self.vsts_account_name),
             'identity': {
                 'data': {
-                    'access_token': 'xxx-xxxx',
+                    'access_token': self.access_token,
                     'expires_in': '3600',
-                    'refresh_token': 'rxxx-xxxx',
+                    'refresh_token': self.refresh_token,
                     'token_type': 'jwt-bearer',
                 },
             },
         }
-        integration_dict = self.integration.build_integration(state)
-        assert integration_dict['name'] == 'sentry'
-        assert integration_dict['external_id'] == '123435'
-        assert integration_dict['metadata']['domain_name'] == 'sentry.visualstudio.com'
-        assert integration_dict['metadata']['subscription']['id'] == CREATE_SUBSCRIPTION['publisherInputs']['tfsSubscriptionId']
-        assert integration_dict['metadata']['subscription']['secret'] is not None
+
+        integration = VstsIntegrationProvider()
+        integration_dict = integration.build_integration(state)
+
+        assert integration_dict['name'] == self.vsts_account_name
+        assert integration_dict['external_id'] == self.vsts_account_id
+        assert integration_dict['metadata']['domain_name'] == \
+            '{}.visualstudio.com'.format(self.vsts_account_name)
 
         assert integration_dict['user_identity']['type'] == 'vsts'
-        assert integration_dict['user_identity']['external_id'] == 'user1-subject-desc'
+        assert integration_dict['user_identity']['external_id'] == \
+            self.vsts_account_id
         assert integration_dict['user_identity']['scopes'] == sorted(
             VSTSIdentityProvider.oauth_scopes)
 
-        assert integration_dict['user_identity']['data']['access_token'] == 'xxx-xxxx'
-        assert isinstance(integration_dict['user_identity']['data']['expires'], int)
-        assert integration_dict['user_identity']['data']['refresh_token'] == 'rxxx-xxxx'
-        assert integration_dict['user_identity']['data']['token_type'] == 'jwt-bearer'
-
-    @responses.activate
-    def test_subscription_created_once(self):
-        external_id = '123-VSTS'
-        Integration.objects.create(
-            provider='vsts',
-            external_id=external_id,
-            name='vsts_name',
-            metadata={},
-        )
+    def test_webhook_subscription_created_once(self):
+        self.assert_installation()
+
         state = {
-            'account': {'AccountName': 'sentry', 'AccountId': external_id},
-            'instance': 'sentry.visualstudio.com',
+            'account': {
+                'AccountName': self.vsts_account_name,
+                'AccountId': self.vsts_account_id,
+            },
+            'instance': '{}.visualstudio.com'.format(self.vsts_account_name),
             'identity': {
                 'data': {
-                    'access_token': 'xxx-xxxx',
+                    'access_token': self.access_token,
                     'expires_in': '3600',
-                    'refresh_token': 'rxxx-xxxx',
+                    'refresh_token': self.refresh_token,
                     'token_type': 'jwt-bearer',
                 },
             },
         }
-        integration_dict = self.integration.build_integration(state)
-        assert 'subscription' not in integration_dict['metadata']
-
-
-class VstsIntegrationTest(APITestCase):
-    def setUp(self):
-
-        self.organization = self.create_organization()
-        project = self.create_project(organization=self.organization)
-        self.access_token = '1234567890'
-        self.instance = 'instance.visualstudio.com'
-        self.model = Integration.objects.create(
-            provider='integrations:vsts',
-            external_id='vsts_external_id',
-            name='vsts_name',
-            metadata={
-                 'domain_name': 'instance.visualstudio.com'
-            }
-        )
-        self.identity_provider = IdentityProvider.objects.create(type='vsts')
-        self.identity = Identity.objects.create(
-            idp=self.identity_provider,
-            user=self.user,
-            external_id='vsts_id',
-            data={
-                'access_token': self.access_token,
-                'refresh_token': 'qwertyuiop',
-                'expires': int(time()) - int(1234567890),
-            }
-        )
-        self.org_integration = self.model.add_organization(self.organization.id, self.identity.id)
-        self.project_integration = self.model.add_project(project.id)
-        self.integration = VstsIntegration(self.model, self.organization.id, project.id)
-        self.projects = [
-            ('eb6e4656-77fc-42a1-9181-4c6d8e9da5d1', 'ProjectB'),
-            ('6ce954b1-ce1f-45d1-b94d-e6bf2464ba2c', 'ProjectA')
-        ]
-        self.project_result = {
-            'value': [
-                {
-                    'id': self.projects[0][0],
-                    'name': self.projects[0][1],
-
-                },
-                {
-                    'id': self.projects[1][0],
-                    'name': self.projects[1][1],
-                }
-            ],
-            'count': 2
-        }
-        responses.add(
-            responses.GET,
-            'https://instance.visualstudio.com/DefaultCollection/_apis/projects',
-            json=self.project_result,
-        )
-        self.refresh_data = {
-            'access_token': 'access token for this user',
-            'token_type': 'type of token',
-            'expires_in': 123456789,
-            'refresh_token': 'new refresh token to use when the token has timed out',
-        }
-        responses.add(
-            responses.POST,
-            'https://app.vssps.visualstudio.com/oauth2/token',
-            json=self.refresh_data,
-        )
-
-    def assert_identity_updated(self, new_identity, expected_data):
-        assert new_identity.data['access_token'] == expected_data['access_token']
-        assert new_identity.data['token_type'] == expected_data['token_type']
-        assert new_identity.data['refresh_token'] == expected_data['refresh_token']
-        assert new_identity.data['expires'] >= time()
-
-    def test_get_client(self):
-        client = self.integration.get_client()
-        assert client.identity.data['access_token'] == self.access_token
 
-    @responses.activate
-    def test_refreshes_expired_token(self):
-        result = self.integration.get_client().get_projects(self.instance)
+        # The above already created the Webhook, so subsequent calls to
+        # ``build_integration`` should omit that data.
+        data = VstsIntegrationProvider().build_integration(state)
+        assert 'subscription' not in data['metadata']
 
-        assert len(responses.calls) == 2
-        default_identity = self.integration.default_identity
-        self.assert_identity_updated(default_identity, self.refresh_data)
 
-        identity = Identity.objects.get(id=self.identity.id)
-        self.assert_identity_updated(identity, self.refresh_data)
+class VstsIntegrationTest(VstsIntegrationTestCase):
+    def test_get_organization_config(self):
+        self.assert_installation()
+        integration = Integration.objects.get(provider='vsts')
 
-        projects = result['value']
-        assert projects[0]['id'] == self.projects[0][0] and projects[0]['name'] == self.projects[0][1]
-        assert projects[1]['id'] == self.projects[1][0] and projects[1]['name'] == self.projects[1][1]
+        fields = integration.get_installation(
+            integration.organizations.first().id
+        ).get_organization_config()
 
-    @responses.activate
-    def test_get_organization_config(self):
-        fields = self.integration.get_organization_config()
-        assert len(fields) == 6
-        names = [
+        assert [field['name'] for field in fields] == [
             'resolve_status',
             'resolve_when',
             'regression_status',
             'sync_comments',
             'sync_forward_assignment',
-            'sync_reverse_assignment']
-        assert [field['name'] for field in fields] == names
+            'sync_reverse_assignment',
+        ]
 
     def test_update_organization_config_remove_all(self):
+        self.assert_installation()
+
+        model = Integration.objects.get(provider='vsts')
+        integration = VstsIntegration(model, self.organization.id)
+
+        org_integration = OrganizationIntegration.objects.get(
+            organization_id=self.organization.id,
+        )
+
         data = {
             'sync_status_forward': {},
             'other_option': 'hello',
         }
         IntegrationExternalProject.objects.create(
-            organization_integration_id=self.org_integration.id,
+            organization_integration_id=org_integration.id,
             external_id=1,
             resolved_status='ResolvedStatus1',
             unresolved_status='UnresolvedStatus1',
         )
         IntegrationExternalProject.objects.create(
-            organization_integration_id=self.org_integration.id,
+            organization_integration_id=org_integration.id,
             external_id=2,
             resolved_status='ResolvedStatus2',
             unresolved_status='UnresolvedStatus2',
         )
         IntegrationExternalProject.objects.create(
-            organization_integration_id=self.org_integration.id,
+            organization_integration_id=org_integration.id,
             external_id=3,
             resolved_status='ResolvedStatus3',
             unresolved_status='UnresolvedStatus3',
         )
 
-        self.integration.update_organization_config(data)
+        integration.update_organization_config(data)
+
+        external_projects = IntegrationExternalProject.objects \
+            .all() \
+            .values_list('external_id', flat=True)
 
-        external_projects = IntegrationExternalProject.objects.all().values_list('external_id', flat=True)
         assert list(external_projects) == []
+
         config = OrganizationIntegration.objects.get(
-            organization_id=self.org_integration.organization_id,
-            integration_id=self.org_integration.integration_id
+            organization_id=org_integration.organization_id,
+            integration_id=org_integration.integration_id
         ).config
+
         assert config == {
             'sync_status_forward': False,
             'other_option': 'hello',
         }
 
     def test_update_organization_config(self):
+        self.assert_installation()
+
+        org_integration = OrganizationIntegration.objects.get(
+            organization_id=self.organization.id,
+        )
+
+        model = Integration.objects.get(provider='vsts')
+        integration = VstsIntegration(model, self.organization.id)
+
         data = {
             'sync_status_forward': {
                 1: {
@@ -252,27 +211,29 @@ class VstsIntegrationTest(APITestCase):
             'other_option': 'hello',
         }
         IntegrationExternalProject.objects.create(
-            organization_integration_id=self.org_integration.id,
+            organization_integration_id=org_integration.id,
             external_id=1,
             resolved_status='UpdateMe',
             unresolved_status='UpdateMe',
         )
         IntegrationExternalProject.objects.create(
-            organization_integration_id=self.org_integration.id,
+            organization_integration_id=org_integration.id,
             external_id=2,
             resolved_status='ResolvedStatus2',
             unresolved_status='UnresolvedStatus2',
         )
         IntegrationExternalProject.objects.create(
-            organization_integration_id=self.org_integration.id,
+            organization_integration_id=org_integration.id,
             external_id=3,
             resolved_status='ResolvedStatus3',
             unresolved_status='UnresolvedStatus3',
         )
 
-        self.integration.update_organization_config(data)
+        integration.update_organization_config(data)
 
-        external_projects = IntegrationExternalProject.objects.all().order_by('external_id')
+        external_projects = IntegrationExternalProject.objects \
+            .all() \
+            .order_by('external_id')
 
         assert external_projects[0].external_id == '1'
         assert external_projects[0].resolved_status == 'ResolvedStatus1'
@@ -287,9 +248,10 @@ class VstsIntegrationTest(APITestCase):
         assert external_projects[2].unresolved_status == 'UnresolvedStatus4'
 
         config = OrganizationIntegration.objects.get(
-            organization_id=self.org_integration.organization_id,
-            integration_id=self.org_integration.integration_id
+            organization_id=org_integration.organization_id,
+            integration_id=org_integration.integration_id
         ).config
+
         assert config == {
             'sync_status_forward': True,
             'other_option': 'hello',
diff --git a/tests/sentry/integrations/vsts/testutils.py b/tests/sentry/integrations/vsts/testutils.py
index a420a1cae9..ad23ef7730 100644
--- a/tests/sentry/integrations/vsts/testutils.py
+++ b/tests/sentry/integrations/vsts/testutils.py
@@ -1,5 +1,183 @@
 from __future__ import absolute_import
 
+import responses
+
+from six.moves.urllib.parse import urlparse, urlencode, parse_qs
+
+from sentry.integrations.vsts import VstsIntegrationProvider
+from sentry.testutils import IntegrationTestCase
+
+
+class VstsIntegrationTestCase(IntegrationTestCase):
+    provider = VstsIntegrationProvider
+
+    def setUp(self):
+        super(VstsIntegrationTestCase, self).setUp()
+
+        self.access_token = '9d646e20-7a62-4bcc-abc0-cb2d4d075e36'
+        self.refresh_token = '32004633-a3c0-4616-9aa0-a40632adac77'
+
+        self.vsts_account_id = 'c8a585ae-b61f-4ba6-833c-9e8d5d1674d8'
+        self.vsts_account_name = 'MyVSTSAccount'
+        self.vsts_account_uri = 'https://MyVSTSAccount.vssps.visualstudio.com:443/'
+
+        self.vsts_user_id = 'd6245f20-2af8-44f4-9451-8107cb2767db'
+        self.vsts_user_name = 'Foo Bar'
+        self.vsts_user_email = 'foobar@example.com'
+
+        self.repo_id = '47166099-3e16-4868-9137-22ac6b05b06e'
+        self.repo_name = 'cool-service'
+
+        self.project_a = {
+            'id': 'eb6e4656-77fc-42a1-9181-4c6d8e9da5d1',
+            'name': 'ProjectA',
+        }
+
+        self.project_b = {
+            'id': '6ce954b1-ce1f-45d1-b94d-e6bf2464ba2c',
+            'name': 'ProjectB',
+        }
+
+        responses.start()
+        self._stub_vsts()
+
+    def tearDown(self):
+        responses.stop()
+
+    def _stub_vsts(self):
+        responses.reset()
+
+        responses.add(
+            responses.POST,
+            'https://app.vssps.visualstudio.com/oauth2/token',
+            json={
+                'access_token': self.access_token,
+                'token_type': 'grant',
+                'expires_in': 300,  # seconds (5 min)
+                'refresh_token': self.refresh_token,
+            },
+        )
+
+        responses.add(
+            responses.GET,
+            'https://app.vssps.visualstudio.com/_apis/accounts',
+            json=[{
+                'AccountId': self.vsts_account_id,
+                'AccountUri': self.vsts_account_uri,
+                'AccountName': self.vsts_account_name,
+                'Properties': {},
+            }],
+        )
+
+        responses.add(
+            responses.GET,
+            'https://app.vssps.visualstudio.com/_apis/profile/profiles/me?api-version=1.0',
+            json={
+                'id': self.vsts_user_id,
+                'displayName': self.vsts_user_name,
+                'emailAddress': self.vsts_user_email,
+            },
+        )
+
+        responses.add(
+            responses.GET,
+            'https://app.vssps.visualstudio.com/_apis/connectionData/',
+            json={
+                'authenticatedUser': {
+                    'subjectDescriptor': self.vsts_account_id,
+                },
+            },
+        )
+
+        responses.add(
+            responses.GET,
+            'https://{}.visualstudio.com/DefaultCollection/_apis/projects'.format(
+                self.vsts_account_name.lower(),
+            ),
+            json={
+                'value': [
+                    self.project_a,
+                    self.project_b,
+                ],
+            },
+        )
+
+        responses.add(
+            responses.POST,
+            'https://{}.visualstudio.com/_apis/hooks/subscriptions'.format(
+                self.vsts_account_name.lower(),
+            ),
+            json=CREATE_SUBSCRIPTION,
+        )
+
+        responses.add(
+            responses.GET,
+            'https://{}.visualstudio.com/_apis/git/repositories'.format(
+                self.vsts_account_name.lower(),
+            ),
+            json={
+                'value': [{
+                    'id': self.repo_id,
+                    'name': self.repo_name,
+                    'project': {
+                        'name': self.project_a['name'],
+                    },
+                }],
+            },
+        )
+
+        responses.add(
+            responses.GET,
+            'https://{}.visualstudio.com/{}/_apis/wit/workitemtypes/{}/states'.format(
+                self.vsts_account_name.lower(),
+                self.project_a['name'],
+                'Bug',
+            ),
+            json={
+                'value': [{'name': 'resolve_status'},
+                          {'name': 'resolve_when'},
+                          {'name': 'regression_status'},
+                          {'name': 'sync_comments'},
+                          {'name': 'sync_forward_assignment'},
+                          {'name': 'sync_reverse_assignment'}],
+            }
+        )
+
+    def assert_installation(self):
+        # Initial request to the installation URL for VSTS
+        resp = self.client.get(self.init_path)
+
+        redirect = urlparse(resp['Location'])
+        query = parse_qs(redirect.query)
+
+        assert resp.status_code == 302
+        assert redirect.scheme == 'https'
+        assert redirect.netloc == 'app.vssps.visualstudio.com'
+        assert redirect.path == '/oauth2/authorize'
+
+        # OAuth redirect back to Sentry (identity_pipeline_view)
+        resp = self.client.get('{}?{}'.format(
+            self.setup_path,
+            urlencode({
+                'code': 'oauth-code',
+                'state': query['state'][0],
+            }),
+        ))
+
+        assert resp.status_code == 200
+        assert '<option value="{}"'.format(self.vsts_account_id) in resp.content
+
+        # User choosing which VSTS Account to use (AccountConfigView)
+        # Final step.
+        return self.client.post(
+            self.setup_path,
+            {
+                'account': self.vsts_account_id,
+                'provider': 'vsts',
+            },
+        )
+
+
 COMPARE_COMMITS_EXAMPLE = b"""
 {
   "count": 1,
