commit 2e4492b91393094856b5ac350da66d7f58adf3bc
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Dec 7 13:21:56 2015 -0800

    Reflect a disabled option in install wizard UI

diff --git a/src/sentry/api/endpoints/system_options.py b/src/sentry/api/endpoints/system_options.py
index 65d91ff61f..6a6fe5147c 100644
--- a/src/sentry/api/endpoints/system_options.py
+++ b/src/sentry/api/endpoints/system_options.py
@@ -7,6 +7,8 @@ from sentry import options
 from sentry.api.base import Endpoint
 from sentry.api.permissions import SuperuserPermission
 
+from django.conf import settings
+
 
 class SystemOptionsEndpoint(Endpoint):
     permission_classes = (SuperuserPermission,)
@@ -18,6 +20,8 @@ class SystemOptionsEndpoint(Endpoint):
                 'field': {
                     'default': k.default,
                     'required': True,
+                    # TODO(mattrobenolt): Expose this as a property on Key.
+                    'disabled': bool(k.flags & options.FLAG_PRIORITIZE_DISK and settings.SENTRY_OPTIONS.get(k.name))
                     # TODO(mattrobenolt): help, placeholder, title, type
                 },
             }
diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index da9e87ecb1..c2fb826e8d 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -78,7 +78,7 @@ class OptionsManager(object):
         # Enforce immutability on key
         assert not (opt.flags & FLAG_IMMUTABLE), '%r cannot be changed at runtime' % key
         # Enforce immutability if value is already set on disk
-        assert not(opt.flags & FLAG_PRIORITIZE_DISK and settings.SENTRY_OPTIONS.get(key)), '%r cannot be changed at runtime because it is configured on disk' % key
+        assert not (opt.flags & FLAG_PRIORITIZE_DISK and settings.SENTRY_OPTIONS.get(key)), '%r cannot be changed at runtime because it is configured on disk' % key
 
         if not isinstance(value, opt.type):
             raise TypeError('got %r, expected %r' % (_type(value), opt.type))
diff --git a/src/sentry/static/sentry/app/components/forms/inputField.jsx b/src/sentry/static/sentry/app/components/forms/inputField.jsx
index 001f8d66d1..6ee45b0b8c 100644
--- a/src/sentry/static/sentry/app/components/forms/inputField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/inputField.jsx
@@ -24,6 +24,7 @@ export default class InputField extends FormField {
                  className="form-control"
                  placeholder={this.props.placeholder}
                  onChange={this.onChange.bind(this)}
+                 disabled={this.props.disabled}
                  value={this.state.value} />
           {this.props.help &&
             <p className="help-block">{this.props.help}</p>
diff --git a/src/sentry/static/sentry/app/options.jsx b/src/sentry/static/sentry/app/options.jsx
index c879142e0c..973a01b212 100644
--- a/src/sentry/static/sentry/app/options.jsx
+++ b/src/sentry/static/sentry/app/options.jsx
@@ -20,8 +20,12 @@ const definitions = {
   }
 };
 
-export function getOptionField(option, onChange, value) {
-  let meta = definitions[option];
+export function getOption(option) {
+  return definitions[option];
+}
+
+export function getOptionField(option, onChange, value, field) {
+  let meta = {...getOption(option), ...field};
   let Field = meta.component || TextField;
   return (
     <Field
@@ -31,13 +35,10 @@ export function getOptionField(option, onChange, value) {
         placeholder={meta.placeholder}
         help={meta.help}
         onChange={onChange}
-        required={true}
-        value={value} />
+        required={meta.required}
+        value={value}
+        disabled={meta.disabled} />
   );
 }
 
-export function getOption(option) {
-  return definitions[option];
-}
-
 export default definitions;
diff --git a/src/sentry/static/sentry/app/views/adminSettings.jsx b/src/sentry/static/sentry/app/views/adminSettings.jsx
index 15ec552815..33e216948e 100644
--- a/src/sentry/static/sentry/app/views/adminSettings.jsx
+++ b/src/sentry/static/sentry/app/views/adminSettings.jsx
@@ -18,7 +18,7 @@ const SettingsList = React.createClass({
       if (!options[option].value) {
         options[option].value = getOption(option).defaultValue;
       }
-      fields.push(getOptionField(option, this.onFieldChange.bind(this, option), options.value));
+      fields.push(getOptionField(option, this.onFieldChange.bind(this, option), options.value, options.field));
     }
 
     return {
diff --git a/src/sentry/static/sentry/app/views/installWizard.jsx b/src/sentry/static/sentry/app/views/installWizard.jsx
index d09a460c20..43d1ddd1a0 100644
--- a/src/sentry/static/sentry/app/views/installWizard.jsx
+++ b/src/sentry/static/sentry/app/views/installWizard.jsx
@@ -27,7 +27,7 @@ const InstallWizardSettings = React.createClass({
       if (!options[option].value) {
         options[option].value = getOption(option).defaultValue;
       }
-      fields.push(getOptionField(option, this.onFieldChange.bind(this, option), options.value));
+      fields.push(getOptionField(option, this.onFieldChange.bind(this, option), options[option].value, options[option].field));
     }
 
     return {
@@ -121,7 +121,11 @@ const InstallWizard = React.createClass({
     });
     let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
 
-    let data = _.mapObject(options, option => option.value);
+    // We only want to send back the values which weren't disabled
+    let data = _.mapObject(
+      _.pick(options, option => !option.field.disabled),
+      option => option.value
+    );
     this.api.request('/internal/options/', {
       method: 'PUT',
       data: data,
