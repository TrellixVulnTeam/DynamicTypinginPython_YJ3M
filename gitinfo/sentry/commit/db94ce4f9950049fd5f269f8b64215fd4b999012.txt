commit db94ce4f9950049fd5f269f8b64215fd4b999012
Author: Jan Michael Auer <account@jauer.org>
Date:   Tue Nov 27 18:16:49 2018 +0100

    fix(interfaces): Fix user name trimming (#10781)
    
    * fix(interfaces): Fix user name trimming
    
    * fix(interfaces): Merge user data and additional attributes
    
    * fix(interfaces): Add tests

diff --git a/src/sentry/interfaces/user.py b/src/sentry/interfaces/user.py
index 2d436b263c..601aa472fa 100644
--- a/src/sentry/interfaces/user.py
+++ b/src/sentry/interfaces/user.py
@@ -57,25 +57,22 @@ class User(Interface):
     def to_python(cls, data):
         data = data.copy()
 
-        extra_data = data.pop('data', data)
-        if not isinstance(extra_data, dict):
-            extra_data = {}
-
         ident = data.pop('id', None)
-        if ident:
+        if ident is not None:
             ident = trim(six.text_type(ident), 128)
+
         try:
             email = trim(validate_email(data.pop('email', None), False), MAX_EMAIL_FIELD_LENGTH)
         except ValueError:
             raise InterfaceValidationError("Invalid value for 'email'")
 
-        username = trim(data.pop('username', None), 128)
-        if username:
-            username = six.text_type(username)
+        username = data.pop('username', None)
+        if username is not None:
+            username = trim(six.text_type(username), 128)
 
-        name = trim(data.pop('name', None), 128)
-        if name:
-            name = six.text_type(name)
+        name = data.pop('name', None)
+        if name is not None:
+            name = trim(six.text_type(name), 128)
 
         try:
             ip_address = validate_ip(data.pop('ip_address', None), False)
@@ -88,6 +85,11 @@ class User(Interface):
         elif geo:
             geo = Geo.to_python(geo)
 
+        extra_data = data.pop('data', None)
+        if not isinstance(extra_data, dict):
+            extra_data = {}
+        extra_data.update(data)
+
         # TODO(dcramer): patch in fix to deal w/ old data but not allow new
         # if not (ident or email or username or ip_address):
         #     raise ValueError('No identifying value')
diff --git a/tests/sentry/interfaces/test_user.py b/tests/sentry/interfaces/test_user.py
index b9a42016d3..bc45f11d08 100644
--- a/tests/sentry/interfaces/test_user.py
+++ b/tests/sentry/interfaces/test_user.py
@@ -66,3 +66,23 @@ class UserTest(TestCase):
     def test_serialize_unserialize_behavior(self):
         result = type(self.interface).to_python(self.interface.to_json())
         assert result.to_json() == self.interface.to_json()
+
+    def test_trimming(self):
+        u = User.to_python({
+            'name': ['v' * 100, 'v' * 100],
+            'username': ['v' * 100, 'v' * 100],
+        })
+
+        assert len(u.name) <= 128
+        assert len(u.username) <= 128
+
+    def test_extra_keys(self):
+        u = User.to_python({
+            'extra1': 'foo',
+            'data': {'extra2': 'bar'},
+        })
+
+        assert u.data == {
+            'extra1': 'foo',
+            'extra2': 'bar',
+        }
