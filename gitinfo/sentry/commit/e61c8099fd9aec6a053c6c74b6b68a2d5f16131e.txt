commit e61c8099fd9aec6a053c6c74b6b68a2d5f16131e
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Jul 24 14:33:17 2018 -0700

    feat(health): Add request action creator (#9128)

diff --git a/src/sentry/static/sentry/app/actionCreators/health.jsx b/src/sentry/static/sentry/app/actionCreators/health.jsx
new file mode 100644
index 0000000000..9fba183a77
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/health.jsx
@@ -0,0 +1,36 @@
+const BASE_URL = org => `/organizations/${org.slug}/health/`;
+
+/**
+ * Make requests to `health` endpoint
+ *
+ * @param {Object} api API client instance
+ * @param {Object} options Request parameters
+ * @param {Object} options.organization Organization object
+ * @param {Number[]} options.projects List of proejct ids
+ * @param {String} options.tag The "tag" to query for
+ * @param {Boolean} options.timeseries Should we group results by time period
+ * @param {String[]} options.environments List of environments to query for
+ * @param {String} options.period Time period to query for, in the format: <integer><units> where units are "d" or "h"
+ * @param {Boolean} options.includePrevious Should request also return reqsults for previous period?
+ * @param {Number} options.topk Include topk results
+ */
+export const doHealthRequest = (
+  api,
+  {organization, projects, tag, environments, period, timeseries, includePrevious, topk}
+) => {
+  if (!api) return Promise.reject(new Error('API client not available'));
+
+  const path = timeseries ? 'graph/' : 'top/';
+  const query = {
+    tag,
+    includePrevious,
+    statsPeriod: period,
+    project: projects,
+    environment: environments,
+    ...(topk ? {topk} : {}),
+  };
+
+  return api.requestPromise(`${BASE_URL(organization)}${path}`, {
+    query,
+  });
+};
diff --git a/tests/js/spec/actionCreators/health.spec.jsx b/tests/js/spec/actionCreators/health.spec.jsx
new file mode 100644
index 0000000000..e10642067d
--- /dev/null
+++ b/tests/js/spec/actionCreators/health.spec.jsx
@@ -0,0 +1,70 @@
+import {Client} from 'app/api';
+import {doHealthRequest} from 'app/actionCreators/health';
+
+describe('Health ActionCreator', function() {
+  const api = new Client();
+  const organization = TestStubs.Organization();
+  const project = TestStubs.Project();
+  let mock;
+
+  it('requests timeseries', function() {
+    mock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/health/graph/',
+    });
+    doHealthRequest(api, {
+      timeseries: true,
+      organization,
+      projects: [project.id],
+      environments: [],
+      tag: 'release',
+      topk: 5,
+      includePrevious: true,
+      period: '7d',
+    });
+
+    expect(mock).toHaveBeenCalled();
+
+    expect(mock).toHaveBeenLastCalledWith(
+      '/organizations/org-slug/health/graph/',
+      expect.objectContaining({
+        query: expect.objectContaining({
+          project: [project.id],
+          environment: [],
+          tag: 'release',
+          topk: 5,
+          includePrevious: true,
+          statsPeriod: '7d',
+        }),
+      })
+    );
+  });
+
+  it('requests top', function() {
+    mock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/health/top/',
+    });
+    doHealthRequest(api, {
+      timeseries: false,
+      organization,
+      projects: [project.id],
+      environments: [],
+      tag: 'release',
+      includePrevious: false,
+      period: '7d',
+    });
+
+    expect(mock).toHaveBeenCalled();
+    expect(mock).toHaveBeenLastCalledWith(
+      '/organizations/org-slug/health/top/',
+      expect.objectContaining({
+        query: expect.objectContaining({
+          project: [project.id],
+          environment: [],
+          tag: 'release',
+          includePrevious: false,
+          statsPeriod: '7d',
+        }),
+      })
+    );
+  });
+});
