commit 6ac63a5e73b85a968473775be1ec30281758a95b
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Sep 1 15:19:31 2010 -0700

    Initial run at filters

diff --git a/example_project/settings.py b/example_project/settings.py
index a52177f16b..b3caaabf82 100644
--- a/example_project/settings.py
+++ b/example_project/settings.py
@@ -2,7 +2,7 @@ import os.path
 import sys
 # Django settings for example_project project.
 
-DEBUG = False
+DEBUG = True
 TEMPLATE_DEBUG = True
 
 ADMINS = (
diff --git a/sentry/filters/__init__.py b/sentry/filters/__init__.py
new file mode 100644
index 0000000000..e8fc8087c9
--- /dev/null
+++ b/sentry/filters/__init__.py
@@ -0,0 +1,113 @@
+# Widget api is pretty ugly
+from django.utils.datastructures import SortedDict
+from django.utils.safestring import mark_safe
+
+from sentry.models import GroupedMessage, Message, LOG_LEVELS
+
+class Widget(object):
+    def __init__(self, filter, request):
+        self.filter = filter
+        self.request = request
+
+    def get_query_string(self):
+        return self.filter.get_query_string()
+
+class TextWidget(Widget):
+    def render(self, value):
+        return mark_safe('<input type="text" name="%(name)s" value="%(value)s"/>' % dict(
+            name=self.filter.get_query_param(),
+            value=value,
+        ))
+
+class ChoiceWidget(Widget):
+    def render(self, value):
+        choices = self.filter.get_choices()
+        query_string = self.get_query_string()
+        column = self.filter.get_query_param()
+
+        output = ['<ul class="%s-list filter-list sidebar-module">' % (self.filter.column,)]
+        output.append('<li%(active)s><a href="?%(query_string)s">Any %(label)s</a></li>' % dict(
+            active=not value and ' class="active"' or '',
+            query_string=query_string,
+            label=self.filter.get_label(),
+        ))
+        for key, val in choices.iteritems():
+            key = unicode(key)
+            output.append('<li%(active)s><a href="%(query_string)s&amp;%(column)s=%(key)s">%(value)s</a></li>' % dict(
+                active=value == key and ' class="active"' or '',
+                column=column,
+                key=key,
+                value=val,
+                query_string=query_string,
+            ))
+        output.append('</ul>')
+        return mark_safe('\n'.join(output))
+
+class SentryFilter(object):
+    label = ''
+    column = ''
+    widget = ChoiceWidget
+    
+    def __init__(self, request):
+        self.request = request
+    
+    def is_set(self):
+        return bool(self.get_value())
+    
+    def get_value(self):
+        return self.request.GET.get(self.get_query_param()) or ''
+    
+    def get_label(self):
+        return self.label
+
+    def get_column(self):
+        return self.column
+    
+    def get_query_param(self):
+        return self.get_column()
+
+    def get_widget(self):
+        return self.widget(self, self.request)
+    
+    def get_query_string(self):
+        column = self.get_column()
+        query_dict = self.request.GET.copy()
+        if 'p' in query_dict:
+            del query_dict['p']
+        if column in query_dict:
+            del query_dict[self.column]
+        return '?' + query_dict.urlencode()
+    
+    def get_choices(self):
+        return SortedDict((l, l) for l in GroupedMessage.objects.values_list(self.get_column(), flat=True).distinct())
+    
+    def get_query_set(self, queryset):
+        return queryset.filter(**{self.get_column(): self.get_value()})
+    
+    def process_message(self, **kwargs):
+        return kwargs
+    
+    def render(self):
+        widget = self.get_widget()
+        return widget.render(self.get_value())
+
+class LoggerFilter(SentryFilter):
+    label = 'Logger'
+    column = 'logger'
+
+class ServerNameFilter(SentryFilter):
+    label = 'Server Name'
+    column = 'server_name'
+
+    def get_choices(self):
+        return SortedDict((l, l) for l in Message.objects.values_list(self.get_column(), flat=True).distinct())
+
+    def get_query_set(self, queryset):
+        return queryset.filter(message_set__server_name=self.get_value())
+
+class LevelFilter(SentryFilter):
+    label = 'Level'
+    column = 'level'
+    
+    def get_choices(self):
+        return SortedDict((str(k), v) for k, v in LOG_LEVELS)
\ No newline at end of file
diff --git a/sentry/helpers.py b/sentry/helpers.py
index 07700de7f2..16a004bc7b 100644
--- a/sentry/helpers.py
+++ b/sentry/helpers.py
@@ -6,6 +6,8 @@ from django.utils.hashcompat import md5_constructor
 from django.utils.html import escape
 from django.views.debug import ExceptionReporter, linebreak_iter
 
+import logging
+
 class ImprovedExceptionReporter(ExceptionReporter):
     def __init__(self, request, exc_type, exc_value, frames, template_info=None):
         ExceptionReporter.__init__(self, request, exc_type, exc_value, None)
@@ -104,6 +106,26 @@ def varmap(func, var):
     else:
         return func(var)
 
+_FILTER_CACHE = None
+def get_filters():
+    global _FILTER_CACHE
+    
+    if _FILTER_CACHE is None:
+        from sentry import settings
+        filters = []
+        for filter_ in settings.FILTERS:
+            module_name, class_name = filter_.rsplit('.', 1)
+            try:
+                module = __import__(module_name, {}, {}, class_name)
+                filter_ = getattr(module, class_name)
+            except Exception, exc:
+                logging.exception('Unable to import %s' % (filter_,))
+                continue
+            filters.append(filter_)
+        _FILTER_CACHE = filters
+    for f in _FILTER_CACHE:
+        yield f
+
 UNDEFINED = object()
 
 class FakeRequest(object):
diff --git a/sentry/settings.py b/sentry/settings.py
index c2bcf942f7..6f5b64bbc7 100644
--- a/sentry/settings.py
+++ b/sentry/settings.py
@@ -8,3 +8,9 @@ USE_LOGGING = getattr(settings, 'SENTRY_USE_LOGGING', False)
 
 THRASHING_TIMEOUT = getattr(settings, 'SENTRY_THRASHING_TIMEOUT', 60)
 THRASHING_LIMIT = getattr(settings, 'SENTRY_THRASHING_LIMIT', 10)
+
+FILTERS = getattr(settings, 'SENTRY_FILTERS', (
+    'sentry.filters.LoggerFilter',
+    'sentry.filters.LevelFilter',
+    'sentry.filters.ServerNameFilter',
+))
\ No newline at end of file
diff --git a/sentry/templates/sentry/index.html b/sentry/templates/sentry/index.html
index f45a544ffb..62651e6674 100644
--- a/sentry/templates/sentry/index.html
+++ b/sentry/templates/sentry/index.html
@@ -27,36 +27,18 @@
 		<div id="content">
 			<div class="container">
 				<div id="sidebar" class="column">
-					<h2>Last 24 Hours</h2>
+					{% if chart_url %}
+						<h2>Last 24 Hours</h2>
 			
-					<img src="{{ chart_url }}" class="chart" alt="chart"/>
-			
-					<h2>Loggers</h2>
-
-					<ul class="logger-list filter-list sidebar-module">
-						<li{% if not logger %} class="active"{% endif %}><a href="?server_name={{ server_name }}&amp;level={{ level }}">any logger</a></li>
-						{% for key, name in logger_names.iteritems %}
-							<li{% if logger == key %} class="active"{% endif %}><a href="?logger={{ key }}&amp;server_name={{ server_name }}&amp;level={{ level }}">{{ name }}</a></li>
-						{% endfor %}
-					</ul>
-			
-					<h2>Levels</h2>
-
-					<ul class="level-list filter-list sidebar-module">
-						<li{% if not level %} class="active"{% endif %}><a href="?server_name={{ server_name }}&amp;logger={{ logger }}">any level</a></li>
-						{% for key, name in level_names.iteritems %}
-							<li{% if level == key %} class="active"{% endif %}><a href="?level={{ key }}&amp;server_name={{ server_name }}&amp;logger={{ logger }}">{{ name|title }}</a></li>
-						{% endfor %}
-					</ul>
-
-					<h2>Servers</h2>
-
-					<ul class="server-list filter-list sidebar-module">
-						<li{% if not server_name %} class="active"{% endif %}><a href="?level={{ level }}&amp;logger={{ logger }}">any server</a></li>
-						{% for key, name in server_names.iteritems %}
-							<li{% if server_name == key %} class="active"{% endif %}><a href="?server_name={{ key }}&amp;level={{ level }}&amp;logger={{ logger }}">{{ name }}</a></li>
-						{% endfor %}
-					</ul>
+						<img src="{{ chart_url }}" class="chart" alt="chart"/>
+					{% endif %}
+					
+					{% for filter in filters %}
+						<h2>{{ filter.get_label }}</h2>
+						<form method="get" action="{{ filter.get_query_string }}">
+							{{ filter.render }}
+						</form>
+					{% endfor %}
 				</div>
 
 				<div id="body" class="with-sidebar column">
diff --git a/sentry/views.py b/sentry/views.py
index 2d4422a9e5..75e82b0de9 100644
--- a/sentry/views.py
+++ b/sentry/views.py
@@ -15,19 +15,14 @@ from django.utils import simplejson
 from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
 
-from sentry.helpers import FakeRequest, ImprovedExceptionReporter
+from sentry.helpers import FakeRequest, ImprovedExceptionReporter, get_filters
 from sentry.models import GroupedMessage, Message, LOG_LEVELS
 from sentry.templatetags.sentry_helpers import with_priority
 
-
 def index(request):
-    logger_names = SortedDict((l, l) for l in GroupedMessage.objects.values_list('logger', flat=True).distinct())
-    server_names = SortedDict((l, l) for l in Message.objects.values_list('server_name', flat=True).distinct())
-    level_names = SortedDict((str(k), v) for k, v in LOG_LEVELS)
-
-    logger = request.GET.get('logger')
-    server_name = request.GET.get('server_name') or ''
-    level = request.GET.get('level') or ''
+    filters = []
+    for filter_ in get_filters():
+        filters.append(filter_(request))
     
     try:
         page = int(request.GET.get('p', 1))
@@ -36,15 +31,6 @@ def index(request):
 
     realtime = page == 1
 
-    if logger not in logger_names:
-        logger = ''
-
-    if server_name not in server_names:
-        server_name = ''
-
-    if level not in level_names:
-        level = ''
-
     # this only works in postgres
     message_list = GroupedMessage.objects.filter(
         status=0,
@@ -54,43 +40,40 @@ def index(request):
         }
     ).order_by('-score', '-last_seen')
     
+    any_filter = False
+    for filter_ in filters:
+        if not filter_.is_set():
+            continue
+        any_filter = True
+        message_list = filter_.get_query_set(message_list)
     
     today = datetime.datetime.now()
 
-    chart_qs = Message.objects\
-                      .filter(datetime__gte=today - datetime.timedelta(hours=24))\
-                      .extra(select={'hour': 'extract(hour from datetime)'}).values('hour')\
-                      .annotate(num=Count('id')).values_list('hour', 'num')
-
-    if logger:
-        message_list = message_list.filter(logger=logger)
-        chart_qs = chart_qs.filter(logger=logger)
+    if not any_filter and page == 1:
 
-    if level:
-        message_list = message_list.filter(level=level)
-        chart_qs = chart_qs.filter(level=level)
+        chart_qs = Message.objects\
+                          .filter(datetime__gte=today - datetime.timedelta(hours=24))\
+                          .extra(select={'hour': 'extract(hour from datetime)'}).values('hour')\
+                          .annotate(num=Count('id')).values_list('hour', 'num')
 
-    if server_name:
-        message_list = message_list.filter(message_set__server_name=server_name).distinct()
-        chart_qs = chart_qs.filter(server_name=server_name)
 
-    rows = dict(chart_qs)
-    if rows:
-        max_y = max(rows.values())
-    else:
-        max_y = 1
+        rows = dict(chart_qs)
+        if rows:
+            max_y = max(rows.values())
+        else:
+            max_y = 1
         
-    if SimpleLineChart:
-        chart = SimpleLineChart(384, 80, y_range=[0, max_y])
-        chart.add_data([max_y]*30)
-        chart.add_data([rows.get((today-datetime.timedelta(hours=d)).hour, 0) for d in range(0, 24)][::-1])
-        chart.add_data([0]*30)
-        chart.fill_solid(chart.BACKGROUND, 'eeeeee')
-        chart.add_fill_range('eeeeee', 0, 1)
-        chart.add_fill_range('e0ebff', 1, 2)
-        chart.set_colours(['eeeeee', '999999', 'eeeeee'])
-        chart.set_line_style(1, 1)
-        chart_url = chart.get_url()
+        if SimpleLineChart:
+            chart = SimpleLineChart(384, 80, y_range=[0, max_y])
+            chart.add_data([max_y]*30)
+            chart.add_data([rows.get((today-datetime.timedelta(hours=d)).hour, 0) for d in range(0, 24)][::-1])
+            chart.add_data([0]*30)
+            chart.fill_solid(chart.BACKGROUND, 'eeeeee')
+            chart.add_fill_range('eeeeee', 0, 1)
+            chart.add_fill_range('e0ebff', 1, 2)
+            chart.set_colours(['eeeeee', '999999', 'eeeeee'])
+            chart.set_line_style(1, 1)
+            chart_url = chart.get_url()
 
     return render_to_response('sentry/index.html', locals())
 
