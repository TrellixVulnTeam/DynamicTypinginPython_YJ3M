commit ab617728e295e398f93c43d5a3f5a02ac3d49701
Author: Evan Hicks <evan.hicks@sentry.io>
Date:   Mon Dec 16 12:05:29 2019 -0500

    feat(discover) Switch trace and span id to use columns instead of context
    
    Have the trace_id and span_id use the built in columns instead of the context
    array.

diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index 3a36d88735..449281649f 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import logging
 import six
+import uuid
 from functools import partial
 from rest_framework.response import Response
 from rest_framework.exceptions import ParseError
@@ -164,9 +165,22 @@ class OrganizationEventsV2Endpoint(OrganizationEventsEndpointBase):
 
         # TODO(mark) move all of this result formatting into discover.query()
         # once those APIs are used across the application.
-        if "transaction.status" in first_row:
+        tests = {
+            "transaction.status": "transaction.status" in first_row,
+            "trace": "trace" in first_row,
+            "trace.span": "trace.span" in first_row,
+        }
+        if any(tests.values()):
             for row in results:
-                row["transaction.status"] = SPAN_STATUS_CODE_TO_NAME.get(row["transaction.status"])
+                if tests["transaction.status"]:
+                    row["transaction.status"] = SPAN_STATUS_CODE_TO_NAME.get(
+                        row["transaction.status"]
+                    )
+                if tests["trace"]:
+                    row["trace"] = uuid.UUID(row["trace"]).hex
+                if tests["trace.span"]:
+                    row["trace.span"] = hex(row["trace.span"]).lstrip("0x").rstrip("L")
+
         if not ("project.id" in first_row or "projectid" in first_row):
             return results
         fields = request.GET.getlist("field")
diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 3e190f12ef..349af2f9af 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import re
+import uuid
 from collections import namedtuple
 from copy import deepcopy
 from datetime import datetime
@@ -584,6 +585,17 @@ def convert_search_filter_to_snuba_query(search_filter):
                 )
             )
         return [name, search_filter.operator, internal_value]
+    elif name == "trace":
+        if not search_filter.value.raw_value:
+            operator = "IS NULL" if search_filter.operator == "=" else "IS NOT NULL"
+            return [name, operator, None]
+
+        try:
+            return [name, search_filter.operator, uuid.UUID(search_filter.value.raw_value)]
+        except Exception:
+            raise InvalidSearchQuery(
+                "Invalid value for the trace condition. Value must be are a hexadecimal UUID string."
+            )
     else:
         value = (
             int(to_timestamp(value)) * 1000
diff --git a/src/sentry/snuba/events.py b/src/sentry/snuba/events.py
index 6c3d196804..ab359ffdde 100644
--- a/src/sentry/snuba/events.py
+++ b/src/sentry/snuba/events.py
@@ -212,15 +212,15 @@ class Columns(Enum):
     TRACE_ID = Column(
         "events.contexts[trace.trace_id]",
         "contexts[trace.trace_id]",
-        "contexts[trace.trace_id]",
-        "contexts[trace.trace_id]",
+        "trace_id",
+        "trace_id",
         "trace",
     )
     SPAN_ID = Column(
         "events.contexts[trace.span_id]",
         "contexts[trace.span_id]",
-        "contexts[trace.span_id]",
-        "contexts[trace.span_id]",
+        "span_id",
+        "span_id",
         "trace.span",
     )
     PARENT_SPAN_ID = Column(
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 2c465ff6b5..401e93b16d 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -4,6 +4,7 @@ import datetime
 import pytest
 import six
 import unittest
+import uuid
 from datetime import timedelta
 from semaphore.consts import SPAN_STATUS_CODE_TO_NAME
 
@@ -1079,6 +1080,10 @@ class GetSnubaQueryArgsTest(TestCase):
         assert "Invalid value" in six.text_type(err)
         assert "cancelled," in six.text_type(err)
 
+    def test_trace_id(self):
+        result = get_filter("trace:{}".format("a0fa8803753e40fd8124b21eeb2986b5"))
+        assert result.conditions == [["trace", "=", uuid.UUID("a0fa8803753e40fd8124b21eeb2986b5")]]
+
 
 class ResolveFieldListTest(unittest.TestCase):
     def test_non_string_field_error(self):
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index ed282a3a4e..294b7a509c 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -592,3 +592,25 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
         assert response.data["meta"]["transaction.duration"] == "duration"
         assert response.data["meta"]["transaction.status"] == "string"
         assert response.data["data"][0]["transaction.status"] == "ok"
+
+    def test_trace_columns(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        data = load_data("transaction")
+        data["timestamp"] = iso_format(before_now(minutes=1))
+        data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=5))
+        self.store_event(data=data, project_id=project.id)
+
+        with self.feature("organizations:events-v2"):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={"field": ["trace", "trace.span"], "query": "event.type:transaction"},
+            )
+        assert response.status_code == 200, response.content
+        assert len(response.data["data"]) == 1
+        assert response.data["meta"]["trace"] == "string"
+        assert response.data["meta"]["trace.span"] == "integer"
+        assert response.data["data"][0]["trace"] == data["contexts"]["trace"]["trace_id"]
+        assert response.data["data"][0]["trace.span"] == data["contexts"]["trace"]["span_id"]
diff --git a/tests/snuba/search/test_backend.py b/tests/snuba/search/test_backend.py
index 21c14b7860..3c05e9863b 100644
--- a/tests/snuba/search/test_backend.py
+++ b/tests/snuba/search/test_backend.py
@@ -1376,7 +1376,7 @@ class EventsSnubaSearchTest(TestCase, SnubaTestCase):
             elif key in IssueSearchVisitor.date_keys:
                 val = "2019-01-01"
             else:
-                val = "hello"
+                val = "abadcafe-dead-beef-fade-adabdeaffeed"
                 test_query("!%s:%s" % (key, val))
 
             test_query("%s:%s" % (key, val))
