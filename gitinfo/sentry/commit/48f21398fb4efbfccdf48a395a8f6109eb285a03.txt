commit 48f21398fb4efbfccdf48a395a8f6109eb285a03
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Jan 3 16:09:29 2019 -0800

    feat(Releases): Improve test coverage to suspect commits. (#10997)
    
    * just saving committers
    
    * Added matchcommitpatchtestcase
    
    * Added sorting on test.

diff --git a/tests/sentry/utils/test_committers.py b/tests/sentry/utils/test_committers.py
index b23880e9de..2b5931bf0d 100644
--- a/tests/sentry/utils/test_committers.py
+++ b/tests/sentry/utils/test_committers.py
@@ -2,25 +2,172 @@ from __future__ import absolute_import
 
 from datetime import timedelta
 from django.utils import timezone
+from mock import Mock
+from uuid import uuid4
 
-from sentry.models import Release
+from sentry.models import Commit, CommitAuthor, CommitFileChange, Release, Repository
 from sentry.testutils import TestCase
-from sentry.utils.committers import get_previous_releases, score_path_match_length, tokenize_path
+from sentry.utils.committers import _get_commit_file_changes, _get_frame_paths, get_previous_releases, _match_commits_path, score_path_match_length, tokenize_path
 
+# TODO(lb): Tests are still needed for _get_committers and _get_vent_file_commiters
 
-def test_score_path_match_length():
-    assert score_path_match_length('foo/bar/baz', 'foo/bar/baz') == 3
-    assert score_path_match_length('foo/bar/baz', 'bar/baz') == 2
-    assert score_path_match_length('foo/bar/baz', 'baz') == 1
-    assert score_path_match_length('foo/bar/baz', 'foo') == 0
-    assert score_path_match_length('./foo/bar/baz', 'foo/bar/baz') == 3
 
+class CommitTestCase(TestCase):
+    def setUp(self):
+        self.repo = Repository.objects.create(
+            organization_id=self.organization.id,
+            name=self.organization.id,
+        )
+
+    def create_commit(self, author=None):
+        return Commit.objects.create(
+            organization_id=self.organization.id,
+            repository_id=self.repo.id,
+            key=uuid4().hex,
+            author=author,
+        )
+
+    def create_commit_with_author(self, user=None, commit=None):
+        if not user:
+            user = self.create_user(name='Sentry', email='sentry@sentry.io')
+
+        author = CommitAuthor.objects.create(
+            organization_id=self.organization.id,
+            name=user.name,
+            email=user.email,
+            external_id=user.id,
+        )
+        if not commit:
+            commit = self.create_commit(author)
+        return commit
+
+    def create_commitfilechange(self, commit=None, filename=None, type=None):
+        return CommitFileChange.objects.create(
+            organization_id=self.organization.id,
+            commit=commit or self.create_commit(),
+            filename=filename or 'foo.bar',
+            type=type or 'M',
+        )
+
+
+class TokenizePathTestCase(TestCase):
+    def test_forward_slash(self):
+        assert list(tokenize_path('foo/bar')) == ['bar', 'foo']
+
+    def test_back_slash(self):
+        assert list(tokenize_path('foo\\bar')) == ['bar', 'foo']
+
+    def test_dot_does_not_separate(self):
+        assert list(tokenize_path('foo.bar')) == ['foo.bar']
+
+    def test_additional_slash_in_front(self):
+        assert list(tokenize_path('/foo/bar')) == ['bar', 'foo']
+        assert list(tokenize_path('\\foo\\bar')) == ['bar', 'foo']
+
+    def test_relative_paths(self):
+        assert list(tokenize_path('./')) == ['.']
+        assert list(tokenize_path('./../')) == ['..', '.']
+        assert list(tokenize_path('./foo/bar')) == ['bar', 'foo', '.']
+        assert list(tokenize_path('.\\foo\\bar')) == ['bar', 'foo', '.']
+
+    def test_path_with_spaces(self):
+        assert list(tokenize_path('\\foo bar\\bar')) == ['bar', 'foo bar']
+
+    def test_no_path(self):
+        assert list(tokenize_path('/')) == []
+
+
+class ScorePathMatchLengthTest(TestCase):
+    def test_equal_paths(self):
+        assert score_path_match_length('foo/bar/baz', 'foo/bar/baz') == 3
+
+    def test_partial_match_paths(self):
+        assert score_path_match_length('foo/bar/baz', 'bar/baz') == 2
+        assert score_path_match_length('foo/bar/baz', 'baz') == 1
 
-def test_tokenize_path():
-    assert list(tokenize_path('foo/bar')) == ['bar', 'foo']
-    assert list(tokenize_path('foo\\bar')) == ['bar', 'foo']
-    assert list(tokenize_path('foo.bar')) == ['foo.bar']
-    assert list(tokenize_path('/foo/bar')) == ['bar', 'foo']
+    def test_why_is_this_zero(self):
+        assert score_path_match_length('foo/bar/baz', 'foo') == 0
+
+    def test_path_with_empty_path_segment(self):
+        assert score_path_match_length('./foo/bar/baz', 'foo/bar/baz') == 3
+
+
+class GetFramePathsTestCase(TestCase):
+    def setUp(self):
+        self.event = Mock()
+        self.event.data = {}
+
+    def test_data_in_stacktrace_frames(self):
+        self.event.data = {'stacktrace': {'frames': ['data']}}
+        assert ['data'] == _get_frame_paths(self.event)
+
+    def test_data_in_exception_values(self):
+        self.event.data = {'exception': {'values': [{'stacktrace': {'frames': ['data']}}]}}
+        assert ['data'] == _get_frame_paths(self.event)
+
+    def test_data_does_not_match(self):
+        self.event.data = {'this does not': 'match'}
+        assert [] == _get_frame_paths(self.event)
+
+    def test_no_stacktrace_in_exception_values(self):
+        self.event.data = {'exception': {'values': [{'this does not': 'match'}]}}
+        assert [] == _get_frame_paths(self.event)
+
+
+class GetCommitFileChangesTestCase(CommitTestCase):
+    def setUp(self):
+        super(GetCommitFileChangesTestCase, self).setUp()
+        file_change_1 = self.create_commitfilechange(filename='hello/app.py', type='A')
+        file_change_2 = self.create_commitfilechange(filename='hello/templates/app.html', type='A')
+        file_change_3 = self.create_commitfilechange(filename='hello/app.py', type='M')
+
+        # ensuring its not just getting all filechanges
+        self.create_commitfilechange(filename='goodbye/app.py', type='A')
+
+        self.file_changes = [file_change_1, file_change_2, file_change_3]
+        self.commits = [file_change.commit for file_change in self.file_changes]
+        self.path_name_set = {file_change.filename for file_change in self.file_changes}
+
+    def test_no_paths(self):
+        assert [] == _get_commit_file_changes(self.commits, {})
+
+    def test_no_valid_paths(self):
+        assert [] == _get_commit_file_changes(self.commits, {'/'})
+
+    def test_simple(self):
+        assert _get_commit_file_changes(self.commits, self.path_name_set) == self.file_changes
+
+
+class MatchCommitsPathTestCase(CommitTestCase):
+    def test_simple(self):
+        file_change = self.create_commitfilechange(filename='hello/app.py', type='A')
+        file_changes = [
+            file_change,
+            self.create_commitfilechange(filename='goodbye/app.js', type='A'),
+        ]
+        assert [(file_change.commit, 2)] == _match_commits_path(file_changes, 'hello/app.py')
+
+    def test_skip_one_score_match_longer_than_one_token(self):
+        file_changes = [
+            self.create_commitfilechange(filename='hello/app.py', type='A'),
+            self.create_commitfilechange(filename='hello/world/app.py', type='A'),
+            self.create_commitfilechange(filename='hello/world/template/app.py', type='A')
+        ]
+        assert [] == _match_commits_path(file_changes, 'app.py')
+
+    def test_similar_paths(self):
+        file_changes = [
+            self.create_commitfilechange(filename='hello/app.py', type='A'),
+            self.create_commitfilechange(filename='world/hello/app.py', type='A'),
+            self.create_commitfilechange(filename='template/hello/app.py', type='A')
+        ]
+
+        commits = sorted([(fc.commit, 2) for fc in file_changes], key=lambda fc: fc[0].id)
+        assert commits == sorted(
+            _match_commits_path(
+                file_changes,
+                'hello/app.py'),
+            key=lambda fc: fc[0].id)
 
 
 class GetPreviousReleasesTestCase(TestCase):
