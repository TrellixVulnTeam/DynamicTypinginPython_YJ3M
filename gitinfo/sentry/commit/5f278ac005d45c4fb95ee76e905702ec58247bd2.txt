commit 5f278ac005d45c4fb95ee76e905702ec58247bd2
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jul 27 17:33:48 2015 -0700

    Draft code for switching to react-day-picker

diff --git a/package.json b/package.json
index 6d1ea8f143..747b434cb1 100644
--- a/package.json
+++ b/package.json
@@ -23,11 +23,12 @@
     "karma-phantomjs-launcher": "^0.1.4",
     "karma-sourcemap-loader": "^0.3.3",
     "less": "1.7.0",
-    "moment": "^2.8.4",
+    "moment": "^2.10.5",
     "node-libs-browser": "^0.5.2",
     "raven-js": "^1.1.19",
     "react": "^0.13.3",
     "react-bootstrap": "^0.13.0",
+    "react-day-picker": "^1.0.3",
     "react-document-title": "^1.0.2",
     "react-router": "^0.13.3",
     "react-sticky": "^2.1.0",
diff --git a/src/sentry/static/sentry/app/components/dateTimeInput.jsx b/src/sentry/static/sentry/app/components/dateTimeInput.jsx
new file mode 100644
index 0000000000..a4f1735ce2
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/dateTimeInput.jsx
@@ -0,0 +1,97 @@
+var React = require("react");
+var moment = require("moment");
+var DayPicker = require("react-day-picker");
+// var {isPastDay, isSameDay} = require("react-day-picker");
+
+var DateTimeInput = React.createClass({
+  getInitialState() {
+    var today = new Date();
+    return {
+      // The value of the input field
+      dateValue: moment(today).format("L"),
+      timeValue: '',
+      // The month to display in the calendar
+      month: today
+    };
+  },
+
+  render() {
+    var {dateValue, timeValue, month} = this.state;
+
+    var selectedDay = moment(dateValue, "L", true).toDate();
+    var modifiers = {
+      // Add the `disabled` modifier to days in the past. The day cell will have
+      // a `DayPicker-Day--disabled` CSS class
+      // "disabled": isPastDay,
+
+      // Add the `selected` modifier to days corresponding to the day inserted
+      // in the input field. The day cell will have a `DayPicker-Day--selected`
+      // CSS class
+      // "selected": (day) => isSameDay(selectedDay, day)
+    };
+
+    return (
+      <div>
+        <p>
+          <input
+            ref="input"
+            type="date"
+            value={dateValue}
+            placeholder="YYYY-MM-DD"
+            onChange={this.handleDateInputChange}
+            onFocus={this.showCurrentDate} />
+          <input
+            ref="input"
+            type="time"
+            value={timeValue}
+            placeholder="HH:MM"
+            onChange={this.handleTimeInputChange} />
+        </p>
+        <DayPicker
+          ref="daypicker"
+          initialMonth={month}
+          enableOutsideDays={true}
+          numberOfMonths={1}
+          modifiers={modifiers}
+          onDayTouchTap={this.handleDayTouchTap} />
+      </div>
+    );
+  },
+
+  handleTimeInputChange(e) {
+    this.setState({
+      timeValue: e.target.value
+    });
+  },
+
+  handleDateInputChange(e) {
+    var value = e.target.value;
+    var month = this.state.month;
+
+    // Change the current month only if the value entered by the user is a valid
+    // date according to the `L` format
+    if (moment(value, "L", true).isValid()) {
+      month = moment(value, "L").toDate();
+    }
+    this.setState({
+      value: dateValue,
+      month: month
+    }, this.showCurrentDate);
+  },
+
+  handleDayTouchTap(e, day, modifiers) {
+    if (modifiers.indexOf("disabled") > -1) {
+      return;
+    }
+    this.setState({
+      dateValue: moment(day).format("L"),
+      month: day
+    });
+  },
+
+  showCurrentDate() {
+    this.refs.daypicker.showMonth(this.state.month);
+  }
+});
+
+module.exports = DateTimeInput;
diff --git a/src/sentry/static/sentry/app/modules/datepicker/DateTimeField.jsx b/src/sentry/static/sentry/app/modules/datepicker/DateTimeField.jsx
deleted file mode 100644
index 4a08695d3e..0000000000
--- a/src/sentry/static/sentry/app/modules/datepicker/DateTimeField.jsx
+++ /dev/null
@@ -1,321 +0,0 @@
-var React = require('react');
-var DateTimePicker = require('./DateTimePicker');
-var moment = require('moment');
-
-var DateTimeField = React.createClass({
-  propTypes: {
-    dateTime: function(props, propName, componentName){
-      var value = props[propName];
-      if (value && !moment.isMoment(value)) {
-        return new Error('Not a valid Moment');
-      }
-    },
-    onChange: React.PropTypes.func,
-    format: React.PropTypes.string,
-    inputFormat: React.PropTypes.string
-  },
-  getDefaultProps: function() {
-    return {
-      dateTime: null,
-      format: 'X',
-      inputFormat: "MM/DD/YY H:mm A",
-      showToday: true,
-      daysOfWeekDisabled: []
-    };
-  },
-  getInitialState: function() {
-    var inputValue;
-    var selectedDate;
-    var viewDate;
-    if (this.props.dateTime) {
-       inputValue = moment(this.props.dateTime, this.props.format).format(this.props.inputFormat);
-       selectedDate = moment(this.props.dateTime, this.props.format);
-       viewDate = moment(this.props.dateTime, this.props.format).startOf("month");
-    }
-    return {
-      showDatePicker: true,
-      showTimePicker: false,
-      widgetStyle: {
-        display: 'none',
-        position: 'absolute',
-        left: 'none',
-        zIndex: '9999 !important'
-      },
-      viewDate: viewDate,
-      selectedDate: selectedDate,
-      inputValue: inputValue
-    };
-  },
-  componentWillReceiveProps: function(nextProps) {
-    var inputValue;
-    var selectedDate;
-    var viewDate;
-    if (nextProps.dateTime) {
-       inputValue = moment(nextProps.dateTime, nextProps.format).format(nextProps.inputFormat);
-       selectedDate = moment(nextProps.dateTime, nextProps.format);
-       viewDate = moment(nextProps.dateTime, nextProps.format).startOf("month");
-    }
-    return this.setState({
-      viewDate: viewDate,
-      selectedDate: selectedDate,
-      inputValue: inputValue
-    });
-  },
-  onChange: function(event) {
-    if (moment(event.target.value, this.props.format).isValid()) {
-      this.setState({
-        selectedDate: moment(event.target.value, this.props.format),
-        inputValue: moment(event.target.value, this.props.format).format(this.props.inputFormat)
-      });
-    } else {
-      this.setState({
-        inputValue: event.target.value
-      });
-      console.log("Invalid date ignored: " + event.target.value);
-    }
-    if (this.props.onChange) {
-      return this.props.onChange(this.state.selectedDate.format(this.props.format));
-    }
-  },
-  setSelectedDate: function(e) {
-    return this.setState({
-      selectedDate: this.state.viewDate.clone().date(parseInt(e.target.innerHTML)).hour(this.state.selectedDate.hours()).minute(this.state.selectedDate.minutes())
-    }, function() {
-      this.closePicker();
-      if (this.props.onChange) {
-        this.props.onChange(this.state.selectedDate.format(this.props.format));
-      }
-      return this.setState({
-        inputValue: this.state.selectedDate.format(this.props.inputFormat)
-      });
-    });
-  },
-  setSelectedHour: function(e) {
-    return this.setState({
-      selectedDate: this.state.selectedDate.clone().hour(parseInt(e.target.innerHTML)).minute(this.state.selectedDate.minutes())
-    }, function() {
-      this.closePicker();
-      if (this.props.onChange) {
-        this.props.onChange(this.state.selectedDate.format(this.props.format));
-      }
-      return this.setState({
-        inputValue: this.state.selectedDate.format(this.props.inputFormat)
-      });
-    });
-  },
-  setSelectedMinute: function(e) {
-    return this.setState({
-      selectedDate: this.state.selectedDate.clone().hour(this.state.selectedDate.hours()).minute(parseInt(e.target.innerHTML))
-    }, function() {
-      this.closePicker();
-      if (this.props.onChange) {
-        this.props.onChange(this.state.selectedDate.format(this.props.format));
-      }
-      return this.setState({
-        inputValue: this.state.selectedDate.format(this.props.inputFormat)
-      });
-    });
-  },
-  setViewMonth: function(month) {
-    return this.setState({
-      viewDate: this.state.viewDate.clone().month(month)
-    });
-  },
-  setViewYear: function(year) {
-    return this.setState({
-      viewDate: this.state.viewDate.clone().year(year)
-    });
-  },
-  addMinute: function() {
-    return this.setState({
-      selectedDate: this.state.selectedDate.clone().add(1, "minutes")
-    }, function() {
-      if (this.props.onChange) {
-        return this.props.onChange(this.state.selectedDate.format(this.props.format));
-      }
-    });
-  },
-  addHour: function() {
-    return this.setState({
-      selectedDate: this.state.selectedDate.clone().add(1, "hours")
-    }, function() {
-      if (this.props.onChange) {
-        return this.props.onChange(this.state.selectedDate.format(this.props.format));
-      }
-    });
-  },
-  addMonth: function() {
-    return this.setState({
-      viewDate: this.state.viewDate.add(1, "months")
-    });
-  },
-  addYear: function() {
-    return this.setState({
-      viewDate: this.state.viewDate.add(1, "years")
-    });
-  },
-  addDecade: function() {
-    return this.setState({
-      viewDate: this.state.viewDate.add(10, "years")
-    });
-  },
-  subtractMinute: function() {
-    return this.setState({
-      selectedDate: this.state.selectedDate.clone().subtract(1, "minutes")
-    }, function() {
-      if (this.props.onChange) {
-        return this.props.onChange(this.state.selectedDate.format(this.props.format));
-      }
-    });
-  },
-  subtractHour: function() {
-    return this.setState({
-      selectedDate: this.state.selectedDate.clone().subtract(1, "hours")
-    }, function() {
-      if (this.props.onChange) {
-        return this.props.onChange(this.state.selectedDate.format(this.props.format));
-      }
-    });
-  },
-  subtractMonth: function() {
-    return this.setState({
-      viewDate: this.state.viewDate.subtract(1, "months")
-    });
-  },
-  subtractYear: function() {
-    return this.setState({
-      viewDate: this.state.viewDate.subtract(1, "years")
-    });
-  },
-  subtractDecade: function() {
-    return this.setState({
-      viewDate: this.state.viewDate.subtract(10, "years")
-    });
-  },
-  togglePeriod: function() {
-    if (this.state.selectedDate.hour() > 12) {
-      return this.setState({
-        selectedDate: this.state.selectedDate.clone().subtract(12, 'hours')
-      });
-    } else {
-      return this.setState({
-        selectedDate: this.state.selectedDate.clone().add(12, 'hours')
-      });
-    }
-  },
-  togglePicker: function() {
-    return this.setState({
-      showDatePicker: !this.state.showDatePicker,
-      showTimePicker: !this.state.showTimePicker
-    });
-  },
-  onClick: function() {
-    var classes, gBCR, offset, placePosition, scrollTop, styles;
-    if (this.state.showPicker) {
-      return this.closePicker();
-    } else {
-      this.setState({
-        showPicker: true
-      });
-      gBCR = this.refs.dtpbutton.getDOMNode().getBoundingClientRect();
-      classes = {
-        "bootstrap-datetimepicker-widget": true,
-        "dropdown-menu": true
-      };
-      offset = {
-        top: gBCR.top + window.pageYOffset - document.documentElement.clientTop,
-        left: gBCR.left + window.pageXOffset - document.documentElement.clientLeft
-      };
-      offset.top = offset.top + this.refs.datetimepicker.getDOMNode().offsetHeight;
-      scrollTop = (window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;
-      placePosition = this.props.direction === 'up' ? 'top' : this.props.direction === 'bottom' ? 'bottom' : this.props.direction === 'auto' ? offset.top + this.refs.widget.getDOMNode().offsetHeight > window.offsetHeight + scrollTop && this.refs.widget.offsetHeight + this.refs.datetimepicker.getDOMNode().offsetHeight > offset.top ? 'top' : 'bottom' : void 0;
-      if (placePosition === 'top') {
-        offset.top = -this.refs.widget.getDOMNode().offsetHeight - this.getDOMNode().clientHeight - 2;
-        classes.top = true;
-        classes.bottom = false;
-      } else {
-        offset.top = 40;
-        classes.top = false;
-        classes.bottom = true;
-      }
-      styles = {
-        display: 'block',
-        position: 'absolute',
-        top: offset.top,
-        left: 0,
-      };
-      return this.setState({
-        widgetStyle: styles,
-        widgetClasses: classes
-      });
-    }
-  },
-  closePicker: function(e) {
-    var style;
-    style = this.state.widgetStyle;
-    style.display = 'none';
-    return this.setState({
-      showPicker: false,
-      widgetStyle: style
-    });
-  },
-  renderOverlay: function() {
-    var styles;
-    styles = {
-      position: 'fixed',
-      top: 0,
-      bottom: 0,
-      left: 0,
-      right: 0,
-      zIndex: '999'
-    };
-    if (this.state.showPicker) {
-      return (<div style={styles} onClick={this.closePicker} />);
-    } else {
-      return null;
-    }
-  },
-  render: function() {
-    var inputValue = (this.state.selectedDate ?
-      this.state.selectedDate.format(this.props.inputFormat) : '');
-    return (
-          <span>
-            {/*this.renderOverlay()*/}
-            {/*<DateTimePicker ref="widget"
-              widgetClasses={this.state.widgetClasses}
-              widgetStyle={this.state.widgetStyle}
-              showDatePicker={this.state.showDatePicker}
-              showTimePicker={this.state.showTimePicker}
-              viewDate={this.state.viewDate}
-              selectedDate={this.state.selectedDate}
-              showToday={this.props.showToday}
-              daysOfWeekDisabled={this.props.daysOfWeekDisabled}
-              addDecade={this.addDecade}
-              addYear={this.addYear}
-              addMonth={this.addMonth}
-              addHour={this.addHour}
-              addMinute={this.addMinute}
-              subtractDecade={this.subtractDecade}
-              subtractYear={this.subtractYear}
-              subtractMonth={this.subtractMonth}
-              subtractHour={this.subtractHour}
-              subtractMinute={this.subtractMinute}
-              setViewYear={this.setViewYear}
-              setViewMonth={this.setViewMonth}
-              setSelectedDate={this.setSelectedDate}
-              setSelectedHour={this.setSelectedHour}
-              setSelectedMinute={this.setSelectedMinute}
-              togglePicker={this.togglePicker}
-              togglePeriod={this.togglePeriod} />*/}
-            <span className="input-group date" ref="datetimepicker">
-              <input type="text" className="form-control" onChange={this.onChange} value={inputValue} />
-              <a className="input-group-addon" onClick={this.onClick} onBlur={this.onBlur} ref="dtpbutton">
-                <span className="icon-calendar" />
-              </a>
-            </span>
-          </span>
-    );
-  }
-});
-
-module.exports = DateTimeField;
diff --git a/src/sentry/static/sentry/app/modules/datepicker/DateTimePicker.jsx b/src/sentry/static/sentry/app/modules/datepicker/DateTimePicker.jsx
deleted file mode 100644
index 478905b0b2..0000000000
--- a/src/sentry/static/sentry/app/modules/datepicker/DateTimePicker.jsx
+++ /dev/null
@@ -1,88 +0,0 @@
-var React = require('react');
-var DateTimePickerDate = require('./DateTimePickerDate');
-var DateTimePickerTime = require('./DateTimePickerTime');
-
-var DateTimePicker = React.createClass({
-  propTypes: {
-    showDatePicker: React.PropTypes.bool,
-    showTimePicker: React.PropTypes.bool,
-    subtractMonth: React.PropTypes.func.isRequired,
-    addMonth: React.PropTypes.func.isRequired,
-    viewDate: React.PropTypes.object.isRequired,
-    selectedDate: React.PropTypes.object.isRequired,
-    showToday: React.PropTypes.bool,
-    daysOfWeekDisabled: React.PropTypes.array,
-    setSelectedDate: React.PropTypes.func.isRequired,
-    subtractYear: React.PropTypes.func.isRequired,
-    addYear: React.PropTypes.func.isRequired,
-    setViewMonth: React.PropTypes.func.isRequired,
-    setViewYear: React.PropTypes.func.isRequired,
-    subtractHour: React.PropTypes.func.isRequired,
-    addHour: React.PropTypes.func.isRequired,
-    subtractMinute: React.PropTypes.func.isRequired,
-    addMinute: React.PropTypes.func.isRequired,
-    addDecade: React.PropTypes.func.isRequired,
-    subtractDecade: React.PropTypes.func.isRequired,
-    togglePeriod: React.PropTypes.func.isRequired
-  },
-  renderDatePicker: function() {
-    if (this.props.showDatePicker) {
-      return (
-        <DateTimePickerDate
-          addMonth={this.props.addMonth}
-          subtractMonth={this.props.subtractMonth}
-          setSelectedDate={this.props.setSelectedDate}
-          viewDate={this.props.viewDate}
-          selectedDate={this.props.selectedDate}
-          showToday={this.props.showToday}
-          daysOfWeekDisabled={this.props.daysOfWeekDisabled}
-          subtractYear={this.props.subtractYear}
-          addYear={this.props.addYear}
-          setViewMonth={this.props.setViewMonth}
-          setViewYear={this.props.setViewYear}
-          addDecade={this.props.addDecade}
-          subtractDecade={this.props.subtractDecade} />
-      );
-    }
-  },
-  renderTimePicker: function() {
-    if (this.props.showTimePicker) {
-      return (
-      <DateTimePickerTime
-        viewDate={this.props.viewDate}
-        selectedDate={this.props.selectedDate}
-        setSelectedHour={this.props.setSelectedHour}
-        setSelectedMinute={this.props.setSelectedMinute}
-        addHour={this.props.addHour}
-        subtractHour={this.props.subtractHour}
-        addMinute={this.props.addMinute}
-        subtractMinute={this.props.subtractMinute}
-        togglePeriod={this.props.togglePeriod} />
-      );
-    }
-  },
-  render: function() {
-    var iconClassName = 'icon';
-    if (this.props.showTimePicker) {
-      iconClassName += ' icon-calendar';
-    } else {
-      iconClassName += ' icon-time';
-    }
-
-    return (
-      <div className={React.addons.classSet(this.props.widgetClasses)} style={this.props.widgetStyle}>
-
-        {this.renderDatePicker()}
-
-        <a className="btn btn-default picker-switch" style={{width:'100%'}} onClick={this.props.togglePicker}>
-          <span className={iconClassName} />
-        </a>
-
-        {this.renderTimePicker()}
-
-      </div>
-    );
-  }
-});
-
-module.exports = DateTimePicker;
diff --git a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerDate.jsx b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerDate.jsx
deleted file mode 100644
index 93c83b32ab..0000000000
--- a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerDate.jsx
+++ /dev/null
@@ -1,123 +0,0 @@
-
-var DateTimePickerDate, DateTimePickerDays, DateTimePickerMonths, DateTimePickerYears, React;
-
-React = require('react');
-
-DateTimePickerDays = require('./DateTimePickerDays');
-
-DateTimePickerMonths = require('./DateTimePickerMonths');
-
-DateTimePickerYears = require('./DateTimePickerYears');
-
-DateTimePickerDate = React.createClass({
-  propTypes: {
-    subtractMonth: React.PropTypes.func.isRequired,
-    addMonth: React.PropTypes.func.isRequired,
-    viewDate: React.PropTypes.object.isRequired,
-    selectedDate: React.PropTypes.object.isRequired,
-    showToday: React.PropTypes.bool,
-    daysOfWeekDisabled: React.PropTypes.array,
-    setSelectedDate: React.PropTypes.func.isRequired,
-    subtractYear: React.PropTypes.func.isRequired,
-    addYear: React.PropTypes.func.isRequired,
-    setViewMonth: React.PropTypes.func.isRequired,
-    setViewYear: React.PropTypes.func.isRequired,
-    addDecade: React.PropTypes.func.isRequired,
-    subtractDecade: React.PropTypes.func.isRequired
-  },
-  getInitialState: function() {
-    return {
-      daysDisplayed: true,
-      monthsDisplayed: false,
-      yearsDisplayed: false
-    };
-  },
-  showMonths: function() {
-    return this.setState({
-      daysDisplayed: false,
-      monthsDisplayed: true
-    });
-  },
-  showYears: function() {
-    return this.setState({
-      monthsDisplayed: false,
-      yearsDisplayed: true
-    });
-  },
-  setViewYear: function(e) {
-    this.props.setViewYear(e.target.innerHTML);
-    return this.setState({
-      yearsDisplayed: false,
-      monthsDisplayed: true
-    });
-  },
-  setViewMonth: function(e) {
-    this.props.setViewMonth(e.target.innerHTML);
-    return this.setState({
-      monthsDisplayed: false,
-      daysDisplayed: true
-    });
-  },
-  renderDays: function() {
-    if (this.state.daysDisplayed) {
-      return (
-      <DateTimePickerDays
-            addMonth={this.props.addMonth}
-            subtractMonth={this.props.subtractMonth}
-            setSelectedDate={this.props.setSelectedDate}
-            viewDate={this.props.viewDate}
-            selectedDate={this.props.selectedDate}
-            showToday={this.props.showToday}
-            daysOfWeekDisabled={this.props.daysOfWeekDisabled}
-            showMonths={this.showMonths}
-      />
-      );
-    } else {
-      return null;
-    }
-  },
-  renderMonths: function() {
-    if (this.state.monthsDisplayed) {
-      return (
-      <DateTimePickerMonths
-            subtractYear={this.props.subtractYear}
-            addYear={this.props.addYear}
-            viewDate={this.props.viewDate}
-            selectedDate={this.props.selectedDate}
-            showYears={this.showYears}
-            setViewMonth={this.setViewMonth}
-      />
-      );
-    } else {
-      return null;
-    }
-  },
-  renderYears: function() {
-    if (this.state.yearsDisplayed) {
-      return (
-      <DateTimePickerYears
-            viewDate={this.props.viewDate}
-            selectedDate={this.props.selectedDate}
-            setViewYear={this.setViewYear}
-            addDecade={this.props.addDecade}
-            subtractDecade={this.props.subtractDecade}
-      />
-      );
-    } else {
-      return null;
-    }
-  },
-  render: function() {
-    return (
-    <div className="datepicker">
-      {this.renderDays()}
-
-      {this.renderMonths()}
-
-      {this.renderYears()}
-    </div>
-    );
-  }
-});
-
-module.exports = DateTimePickerDate;
diff --git a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerDays.jsx b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerDays.jsx
deleted file mode 100644
index 8ec4f2f208..0000000000
--- a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerDays.jsx
+++ /dev/null
@@ -1,114 +0,0 @@
-
-var DateTimePickerDays, React, moment;
-
-React = require('react');
-
-moment = require('moment');
-
-DateTimePickerDays = React.createClass({
-  propTypes: {
-    subtractMonth: React.PropTypes.func.isRequired,
-    addMonth: React.PropTypes.func.isRequired,
-    viewDate: React.PropTypes.object.isRequired,
-    selectedDate: React.PropTypes.object.isRequired,
-    showToday: React.PropTypes.bool,
-    daysOfWeekDisabled: React.PropTypes.array,
-    setSelectedDate: React.PropTypes.func.isRequired,
-    showMonths: React.PropTypes.func.isRequired
-  },
-  getDefaultProps: function() {
-    return {
-      showToday: true
-    };
-  },
-  renderDays: function() {
-    var cells, classes, days, html, i, month, nextMonth, prevMonth, row, year, _i, _len, _ref;
-    year = this.props.viewDate.year();
-    month = this.props.viewDate.month();
-    prevMonth = this.props.viewDate.clone().subtract(1, "months");
-    days = prevMonth.daysInMonth();
-    prevMonth.date(days).startOf('week');
-    nextMonth = moment(prevMonth).clone().add(42, "d");
-    html = [];
-    cells = [];
-    while (prevMonth.isBefore(nextMonth)) {
-      classes = {
-        day: true
-      };
-      if (prevMonth.year() < year || (prevMonth.year() === year && prevMonth.month() < month)) {
-        classes.old = true;
-      } else if (prevMonth.year() > year || (prevMonth.year() === year && prevMonth.month() > month)) {
-        classes.new = true;
-      }
-      if (prevMonth.isSame(moment({
-        y: this.props.selectedDate.year(),
-        M: this.props.selectedDate.month(),
-        d: this.props.selectedDate.date()
-      }))) {
-        classes.active = true;
-      }
-      if (this.props.showToday) {
-        if (prevMonth.isSame(moment(), 'day')) {
-          classes.today = true;
-        }
-      }
-      if (this.props.daysOfWeekDisabled) {
-        _ref = this.props.daysOfWeekDisabled;
-        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
-          i = _ref[_i];
-          if (prevMonth.day() === this.props.daysOfWeekDisabled[i]) {
-            classes.disabled = true;
-            break;
-          }
-        }
-      }
-      cells.push(<td key={prevMonth.month() + '-' + prevMonth.date()} className={React.addons.classSet(classes)} onClick={this.props.setSelectedDate}>{prevMonth.date()}</td>);
-      if (prevMonth.weekday() === moment().endOf('week').weekday()) {
-        row = <tr key={prevMonth.month() + '-' + prevMonth.date()}>{cells}</tr>;
-        html.push(row);
-        cells = [];
-      }
-      prevMonth.add(1, "d");
-    }
-    return html;
-  },
-  render: function() {
-    return (
-    <div className="datepicker-days" style={{display: 'block'}}>
-        <table className="table-condensed">
-          <thead>
-            <tr>
-              <th className="prev" onClick={this.props.subtractMonth}>‹</th>
-
-              <th className="switch" colSpan="5" onClick={this.props.showMonths}>{moment.months()[this.props.viewDate.month()]} {this.props.viewDate.year()}</th>
-
-              <th className="next" onClick={this.props.addMonth}>›</th>
-            </tr>
-
-            <tr>
-              <th className="dow">Su</th>
-
-              <th className="dow">Mo</th>
-
-              <th className="dow">Tu</th>
-
-              <th className="dow">We</th>
-
-              <th className="dow">Th</th>
-
-              <th className="dow">Fr</th>
-
-              <th className="dow">Sa</th>
-            </tr>
-          </thead>
-
-          <tbody>
-            {this.renderDays()}
-          </tbody>
-        </table>
-      </div>
-    );
-  }
-});
-
-module.exports = DateTimePickerDays;
diff --git a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerHours.jsx b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerHours.jsx
deleted file mode 100644
index d59a9ccd56..0000000000
--- a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerHours.jsx
+++ /dev/null
@@ -1,81 +0,0 @@
-
-var DateTimePickerHours, React;
-
-React = require('react');
-
-DateTimePickerHours = React.createClass({
-  propTypes: {
-    setSelectedHour: React.PropTypes.func.isRequired
-  },
-  render: function() {
-    return (
-      <div className="timepicker-hours" data-action="selectHour" style={{display: 'block'}}>
-        <table className="table-condensed">
-          <tbody>
-            <tr>
-              <td className="hour" onClick={this.props.setSelectedHour}>01</td>
-
-              <td className="hour" onClick={this.props.setSelectedHour}>02</td>
-
-              <td className="hour" onClick={this.props.setSelectedHour}>03</td>
-
-              <td className="hour" onClick={this.props.setSelectedHour}>04</td>
-            </tr>
-
-            <tr>
-              <td className="hour" onClick={this.props.setSelectedHour}>05</td>
-
-              <td className="hour" onClick={this.props.setSelectedHour}>06</td>
-
-              <td className="hour" onClick={this.props.setSelectedHour}>07</td>
-
-              <td className="hour" onClick={this.props.setSelectedHour}>08</td>
-            </tr>
-
-            <tr>
-              <td className="hour" onClick={this.props.setSelectedHour}>09</td>
-
-              <td className="hour" onClick={this.props.setSelectedHour}>10</td>
-
-              <td className="hour" onClick={this.props.setSelectedHour}>11</td>
-
-              <td className="hour" onClick={this.props.setSelectedHour}>12</td>
-            </tr>
-
-            <tr>
-              <td className="hour" onClick={this.props.setSelectedHour}>13</td>
-
-              <td className="hour" onClick={this.props.setSelectedHour}>14</td>
-
-              <td className="hour" onClick={this.props.setSelectedHour}>15</td>
-
-              <td className="hour" onClick={this.props.setSelectedHour}>16</td>
-            </tr>
-
-            <tr>
-              <td className="hour" onClick={this.props.setSelectedHour}>17</td>
-
-              <td className="hour" onClick={this.props.setSelectedHour}>18</td>
-
-              <td className="hour" onClick={this.props.setSelectedHour}>19</td>
-
-              <td className="hour" onClick={this.props.setSelectedHour}>20</td>
-            </tr>
-
-            <tr>
-              <td className="hour" onClick={this.props.setSelectedHour}>21</td>
-
-              <td className="hour" onClick={this.props.setSelectedHour}>22</td>
-
-              <td className="hour" onClick={this.props.setSelectedHour}>23</td>
-
-              <td className="hour" onClick={this.props.setSelectedHour}>24</td>
-            </tr>
-          </tbody>
-        </table>
-      </div>
-    );
-  }
-});
-
-module.exports = DateTimePickerHours;
diff --git a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerMinutes.jsx b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerMinutes.jsx
deleted file mode 100644
index cb22875a58..0000000000
--- a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerMinutes.jsx
+++ /dev/null
@@ -1,51 +0,0 @@
-
-var DateTimePickerMinutes, React;
-
-React = require('react');
-
-DateTimePickerMinutes = React.createClass({
-  propTypes: {
-    setSelectedMinute: React.PropTypes.func.isRequired
-  },
-  render: function() {
-    return (
-      <div className="timepicker-minutes" data-action="selectMinute" style={{display: 'block'}}>
-        <table className="table-condensed">
-          <tbody>
-            <tr>
-              <td className="minute" onClick={this.props.setSelectedMinute}>00</td>
-
-              <td className="minute" onClick={this.props.setSelectedMinute}>05</td>
-
-              <td className="minute" onClick={this.props.setSelectedMinute}>10</td>
-
-              <td className="minute" onClick={this.props.setSelectedMinute}>15</td>
-            </tr>
-
-            <tr>
-              <td className="minute" onClick={this.props.setSelectedMinute}>20</td>
-
-              <td className="minute" onClick={this.props.setSelectedMinute}>25</td>
-
-              <td className="minute" onClick={this.props.setSelectedMinute}>30</td>
-
-              <td className="minute" onClick={this.props.setSelectedMinute}>35</td>
-            </tr>
-
-            <tr>
-              <td className="minute" onClick={this.props.setSelectedMinute}>40</td>
-
-              <td className="minute" onClick={this.props.setSelectedMinute}>45</td>
-
-              <td className="minute" onClick={this.props.setSelectedMinute}>50</td>
-
-              <td className="minute" onClick={this.props.setSelectedMinute}>55</td>
-            </tr>
-          </tbody>
-        </table>
-      </div>
-    );
-  }
-});
-
-module.exports = DateTimePickerMinutes;
diff --git a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerMonths.jsx b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerMonths.jsx
deleted file mode 100644
index 7f9a0e200a..0000000000
--- a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerMonths.jsx
+++ /dev/null
@@ -1,58 +0,0 @@
-
-var DateTimePickerMonths, React, moment;
-
-React = require('react');
-
-moment = require('moment');
-
-DateTimePickerMonths = React.createClass({
-  propTypes: {
-    subtractYear: React.PropTypes.func.isRequired,
-    addYear: React.PropTypes.func.isRequired,
-    viewDate: React.PropTypes.object.isRequired,
-    selectedDate: React.PropTypes.object.isRequired,
-    showYears: React.PropTypes.func.isRequired,
-    setViewMonth: React.PropTypes.func.isRequired
-  },
-  renderMonths: function() {
-    var classes, i, month, months, monthsShort;
-    month = this.props.selectedDate.month();
-    monthsShort = moment.monthsShort();
-    i = 0;
-    months = [];
-    while (i < 12) {
-      classes = {
-        month: true,
-        'active': i === month && this.props.viewDate.year() === this.props.selectedDate.year()
-      };
-      months.push(<span className={React.addons.classSet(classes)} onClick={this.props.setViewMonth}>{monthsShort[i]}</span>);
-      i++;
-    }
-    return months;
-  },
-  render: function() {
-    return (
-    <div className="datepicker-months" style={{display: 'block'}}>
-          <table className="table-condensed">
-            <thead>
-              <tr>
-                <th className="prev" onClick={this.props.subtractYear}>‹</th>
-
-                <th className="switch" colSpan="5" onClick={this.props.showYears}>{this.props.viewDate.year()}</th>
-
-                <th className="next" onClick={this.props.addYear}>›</th>
-              </tr>
-            </thead>
-
-            <tbody>
-              <tr>
-                <td colSpan="7">{this.renderMonths()}</td>
-              </tr>
-            </tbody>
-          </table>
-        </div>
-    );
-  }
-});
-
-module.exports = DateTimePickerMonths;
diff --git a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerTime.jsx b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerTime.jsx
deleted file mode 100644
index e5f907f693..0000000000
--- a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerTime.jsx
+++ /dev/null
@@ -1,119 +0,0 @@
-var React = require('react');
-var DateTimePickerMinutes = require('./DateTimePickerMinutes');
-var DateTimePickerHours = require('./DateTimePickerHours');
-
-var DateTimePickerTime = React.createClass({
-  propTypes: {
-    setSelectedHour: React.PropTypes.func.isRequired,
-    setSelectedMinute: React.PropTypes.func.isRequired,
-    subtractHour: React.PropTypes.func.isRequired,
-    addHour: React.PropTypes.func.isRequired,
-    subtractMinute: React.PropTypes.func.isRequired,
-    addMinute: React.PropTypes.func.isRequired,
-    viewDate: React.PropTypes.object.isRequired,
-    selectedDate: React.PropTypes.object.isRequired,
-    togglePeriod: React.PropTypes.func.isRequired
-  },
-  getInitialState: function() {
-    return {
-      minutesDisplayed: false,
-      hoursDisplayed: false
-    };
-  },
-  showMinutes: function() {
-    return this.setState({
-      minutesDisplayed: true
-    });
-  },
-  showHours: function() {
-    return this.setState({
-      hoursDisplayed: true
-    });
-  },
-  renderMinutes: function() {
-    if (this.state.minutesDisplayed) {
-      return (<DateTimePickerMinutes
-            setSelectedMinute={this.props.setSelectedMinute}
-       />
-       );
-    } else {
-      return null;
-    }
-  },
-  renderHours: function() {
-    if (this.state.hoursDisplayed) {
-      return (<DateTimePickerHours
-            setSelectedHour={this.props.setSelectedHour}
-      />
-      );
-    } else {
-      return null;
-    }
-  },
-  renderPicker: function() {
-    if (!this.state.minutesDisplayed && !this.state.hoursDisplayed) {
-      return (
-      <div className="timepicker-picker">
-        <table className="table-condensed">
-          <tbody>
-            <tr>
-              <td><a className="btn" onClick={this.props.addHour}>
-                <span className="icon icon-arrow-up" />
-              </a></td>
-
-              <td className="separator"></td>
-
-              <td><a className="btn" onClick={this.props.addMinute}>
-                <span className="icon icon-arrow-up" />
-              </a></td>
-
-              <td className="separator"></td>
-            </tr>
-
-            <tr>
-              <td><span className="timepicker-hour" onClick={this.showHours}>{this.props.selectedDate.format('h')}</span></td>
-
-              <td className="separator">:</td>
-
-              <td><span className="timepicker-minute" onClick={this.showMinutes}>{this.props.selectedDate.format('mm')}</span></td>
-
-              <td className="separator"></td>
-
-              <td><button className="btn btn-primary" onClick={this.props.togglePeriod} type="button">{this.props.selectedDate.format('A')}</button></td>
-            </tr>
-
-            <tr>
-              <td><a className="btn" onClick={this.props.subtractHour}>
-                <span className="icon icon-arrow-down" />
-              </a></td>
-
-              <td className="separator"></td>
-
-              <td><a className="btn" onClick={this.props.subtractMinute}>
-                <span className="icon icon-arrow-down" />
-              </a></td>
-
-              <td className="separator"></td>
-            </tr>
-          </tbody>
-        </table>
-      </div>
-      );
-    } else {
-      return '';
-    }
-  },
-  render: function() {
-    return (
-        <div className="timepicker">
-          {this.renderPicker()}
-
-          {this.renderHours()}
-
-          {this.renderMinutes()}
-        </div>
-    );
-  }
-});
-
-module.exports = DateTimePickerTime;
diff --git a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerYears.jsx b/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerYears.jsx
deleted file mode 100644
index 47d33f36d4..0000000000
--- a/src/sentry/static/sentry/app/modules/datepicker/DateTimePickerYears.jsx
+++ /dev/null
@@ -1,59 +0,0 @@
-
-var DateTimePickerYears, React;
-
-React = require('react');
-
-DateTimePickerYears = React.createClass({
-  propTypes: {
-    subtractDecade: React.PropTypes.func.isRequired,
-    addDecade: React.PropTypes.func.isRequired,
-    viewDate: React.PropTypes.object.isRequired,
-    selectedDate: React.PropTypes.object.isRequired,
-    setViewYear: React.PropTypes.func.isRequired
-  },
-  renderYears: function() {
-    var classes, i, year, years;
-    years = [];
-    year = parseInt(this.props.viewDate.year() / 10, 10) * 10;
-    year--;
-    i = -1;
-    while (i < 11) {
-      classes = {
-        year: true,
-        old: i === -1 | i === 10,
-        active: this.props.selectedDate.year() === year
-      };
-      years.push(<span className={React.addons.classSet(classes)} onClick={this.props.setViewYear}>{year}</span>);
-      year++;
-      i++;
-    }
-    return years;
-  },
-  render: function() {
-    var year;
-    year = parseInt(this.props.viewDate.year() / 10, 10) * 10;
-    return (
-      <div className="datepicker-years" style={{display: "block"}}>
-        <table className="table-condensed">
-          <thead>
-            <tr>
-              <th className="prev" onClick={this.props.subtractDecade}>‹</th>
-
-              <th className="switch" colSpan="5">{year} - {year+9}</th>
-
-              <th className="next" onClick={this.props.addDecade}>›</th>
-            </tr>
-          </thead>
-
-          <tbody>
-            <tr>
-              <td colSpan="7">{this.renderYears()}</td>
-            </tr>
-          </tbody>
-        </table>
-      </div>
-    );
-  }
-});
-
-module.exports = DateTimePickerYears;
diff --git a/src/sentry/static/sentry/app/modules/datepicker/LICENSE b/src/sentry/static/sentry/app/modules/datepicker/LICENSE
deleted file mode 100644
index c5ce37de3e..0000000000
--- a/src/sentry/static/sentry/app/modules/datepicker/LICENSE
+++ /dev/null
@@ -1,22 +0,0 @@
-The MIT License (MIT)
-
-Copyright (c) 2015 Sentry Team
-Copyright (c) 2014 Quri, Loïc CHOLLIER
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in all
-copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-SOFTWARE.
diff --git a/src/sentry/static/sentry/app/modules/datepicker/README.md b/src/sentry/static/sentry/app/modules/datepicker/README.md
deleted file mode 100644
index 1af684525e..0000000000
--- a/src/sentry/static/sentry/app/modules/datepicker/README.md
+++ /dev/null
@@ -1,13 +0,0 @@
-react-bootstrap-datetimepicker
-===============================
-
-This project is a port of https://github.com/Eonasdan/bootstrap-datetimepicker for React.js
-
-Contributions
-===============================
-There's still plenty of features missing compared to the original date time picker, hence contributions would be highly appreciated.
-
-Aknowledgments
-===============================
-
-I took https://github.com/stevoland/react-bootstrap as a reference to get the build actually building.
\ No newline at end of file
diff --git a/src/sentry/static/sentry/app/modules/datepicker/test/DateTimePickerHoursSpec.jsx b/src/sentry/static/sentry/app/modules/datepicker/test/DateTimePickerHoursSpec.jsx
deleted file mode 100644
index 60f9bee5f2..0000000000
--- a/src/sentry/static/sentry/app/modules/datepicker/test/DateTimePickerHoursSpec.jsx
+++ /dev/null
@@ -1,18 +0,0 @@
-
-
-/* global describe, beforeEach, afterEach, it, assert */
-var DateTimePickerHours, React, ReactTestUtils;
-
-React = require('react');
-
-ReactTestUtils = require('react/lib/ReactTestUtils');
-
-DateTimePickerHours = require('../cjs/DateTimePickerHours');
-
-describe('DateTimePickerHours', function() {
-  return it('Should have a timepicker-hours class', function() {
-    var instance;
-    instance = ReactTestUtils.renderIntoDocument(DateTimePickerHours());
-    return assert.ok(instance.getDOMNode().className.match(/\btimepicker-hours\b/));
-  });
-});
diff --git a/src/sentry/static/sentry/app/views/stream/actionLink.jsx b/src/sentry/static/sentry/app/views/stream/actionLink.jsx
index 9f8d8def4c..342fe80a8e 100644
--- a/src/sentry/static/sentry/app/views/stream/actionLink.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actionLink.jsx
@@ -77,7 +77,7 @@ var ActionLink = React.createClass({
 
   renderOverlay() {
     if (!this.state.isModalOpen) {
-      return <span/>;
+      return null;
     }
 
     var selectedItemIds = SelectedGroupStore.getSelectedIds();
diff --git a/src/sentry/static/sentry/app/views/stream/dateSelector.jsx b/src/sentry/static/sentry/app/views/stream/dateSelector.jsx
index 11823f530a..177ccf5561 100644
--- a/src/sentry/static/sentry/app/views/stream/dateSelector.jsx
+++ b/src/sentry/static/sentry/app/views/stream/dateSelector.jsx
@@ -1,7 +1,98 @@
 var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
 var React = require("react");
 
-var DateTimeField = require("../../modules/datepicker/DateTimeField");
+var DateTimeInput = require("../../components/dateTimeInput");
+var DropdownLink = require("../../components/dropdownLink");
+var MenuItem = require("../../components/menuItem");
+var Modal = require("react-bootstrap/Modal");
+var OverlayMixin = require("react-bootstrap/OverlayMixin");
+
+var CustomDateRange = React.createClass({
+  mixins: [OverlayMixin, PureRenderMixin],
+
+  getInitialState() {
+    return {
+      isModalOpen: false,
+      dateFrom: '',
+      dateTo: '',
+      dateType: 'last_seen'
+    };
+  },
+
+  onApply(e) {
+    this.onToggle(e);
+  },
+
+  onToggle(e) {
+    this.setState({
+      isModalOpen: !this.state.isModalOpen
+    });
+  },
+
+  onDateTypeChange(e) {
+
+  },
+
+  onDateFromChange(e) {
+
+  },
+
+  onDateToChange(e) {
+
+  },
+
+  render() {
+    return (
+      <a className={this.props.className} onClick={this.onToggle}>
+        Custom Range
+      </a>
+    );
+  },
+
+  renderOverlay() {
+    if (!this.state.isModalOpen) {
+      return null;
+    }
+    return (
+      <Modal title="Custom Date Range" animation={false} onRequestHide={this.onToggle}>
+        <div className="modal-body">
+          <div className="datepicker-box">
+            <div className="input">
+              <DateTimeInput dateTime={this.state.dateFrom} onChange={this.onDateFromChange} />
+              to
+              <DateTimeInput dateTime={this.state.dateTo} onChange={this.onDateToChange} />
+              <div className="help-block">All events are represented in UTC time.</div>
+            </div>
+            <div className="submit">
+              <div className="pull-right">
+                <button className="btn btn-default btn-sm" onClick={this.onClear}>Clear</button>
+                <button className="btn btn-primary btn-sm" onClick={this.onApply}>Apply</button>
+              </div>
+              <div className="radio-inputs">
+                <label className="radio">
+                  <input type="radio" name="date_type"
+                    onChange={this.onDateTypeChange.bind(this, "last_seen")}
+                    checked={this.state.dateType === "last_seen"} /> Last Seen
+                </label>
+                <label className="radio">
+                  <input type="radio" name="date_type"
+                    onChange={this.onDateTypeChange.bind(this, "first_seen")}
+                    checked={this.state.dateType === "first_seen"} /> First Seen
+                </label>
+              </div>
+            </div>
+          </div>
+        </div>
+        <div className="modal-footer">
+          <button type="button" className="btn btn-small btn-primary"
+                  onClick={this.onApply}>Apply</button>
+          <button type="button" className="btn btn-small"
+                  onClick={this.onToggle}>Close</button>
+        </div>
+      </Modal>
+    );
+  }
+});
 
 var DateSelector = React.createClass({
   contextTypes: {
@@ -59,40 +150,15 @@ var DateSelector = React.createClass({
 
   render() {
     return (
-      <div className="dropdown btn-group">
-        <a ref="toggle" className="btn btn-sm dropdown-toggle hidden-xs" data-toggle="dropdown">
-          All time
-          <span className="icon-arrow-down"></span>
-        </a>
-        <div className="datepicker-box dropdown-menu" id="daterange">
-          <form method="GET">
-            <div className="input">
-              <DateTimeField dateTime={this.state.dateFrom} onChange={this.onDateFromChange} />
-              <span className="to">to</span>
-              <DateTimeField dateTime={this.state.dateTo} onChange={this.onDateToChange} />
-              <div className="help-block">All events are represented in UTC time.</div>
-            </div>
-            <div className="submit">
-              <div className="pull-right">
-                <button className="btn btn-default btn-sm" onClick={this.onClear}>Clear</button>
-                <button className="btn btn-primary btn-sm" onClick={this.onApply}>Apply</button>
-              </div>
-              <div className="radio-inputs">
-                <label className="radio">
-                  <input type="radio" name="date_type"
-                    onChange={this.onDateTypeChange.bind(this, "last_seen")}
-                    checked={this.state.dateType === "last_seen"} /> Last Seen
-                </label>
-                <label className="radio">
-                  <input type="radio" name="date_type"
-                    onChange={this.onDateTypeChange.bind(this, "first_seen")}
-                    checked={this.state.dateType === "first_seen"} /> First Seen
-                </label>
-              </div>
-            </div>
-          </form>
-        </div>
-      </div>
+      <DropdownLink
+          className="btn btn-sm"
+          btnGroup={true}
+          title="Since: All time">
+        <MenuItem>All Time</MenuItem>
+        <MenuItem noAnchor={true}>
+          <CustomDateRange />
+        </MenuItem>
+      </DropdownLink>
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/views/stream/sortOptions.jsx b/src/sentry/static/sentry/app/views/stream/sortOptions.jsx
index a6a73898ad..2088ef8bc2 100644
--- a/src/sentry/static/sentry/app/views/stream/sortOptions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/sortOptions.jsx
@@ -67,7 +67,6 @@ var SortOptions = React.createClass({
 
     return (
       <DropdownLink
-          key="sort"
           className="btn btn-sm"
           btnGroup={true}
           title={dropdownTitle}>
diff --git a/src/sentry/static/sentry/less/includes/datepicker.less b/src/sentry/static/sentry/less/includes/datepicker.less
index 3c2c1069a0..fdf82e20c9 100644
--- a/src/sentry/static/sentry/less/includes/datepicker.less
+++ b/src/sentry/static/sentry/less/includes/datepicker.less
@@ -1,193 +1,116 @@
-/*!
- * Datepicker for Bootstrap
- *
- * Copyright 2012 Stefan Petre
- * Improvements by Andrew Rowls
- * Licensed under the Apache License v2.0
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- */
-.datepicker {
-  top: 0;
-  left: 0;
-  padding: 4px;
-  margin-top: 1px;
-  -webkit-border-radius: 4px;
-  -moz-border-radius: 4px;
-  border-radius: 4px;
-  /*.dow {
-        border-top: 1px solid #ddd !important;
-    }*/
-
-}
-.datepicker:before {
-  content: '';
-  display: inline-block;
-  border-left: 7px solid transparent;
-  border-right: 7px solid transparent;
-  border-bottom: 7px solid #ccc;
-  border-bottom-color: rgba(0, 0, 0, 0.2);
-  position: absolute;
-  top: -7px;
-  left: 6px;
-}
-.datepicker:after {
-  content: '';
-  display: inline-block;
-  border-left: 6px solid transparent;
-  border-right: 6px solid transparent;
-  border-bottom: 6px solid #ffffff;
-  position: absolute;
-  top: -6px;
-  left: 7px;
-}
-.datepicker > div {
-  display: none;
-}
-.datepicker.days div.datepicker-days {
-  display: block;
-}
-.datepicker.months div.datepicker-months {
-  display: block;
-}
-.datepicker.years div.datepicker-years {
-  display: block;
-}
-.datepicker table {
-  margin: 0;
-}
-.datepicker td,
-.datepicker th {
-  text-align: center;
-  width: 20px;
-  height: 20px;
-  padding: 2px 5px !important;
-  -webkit-border-radius: 4px;
-  -moz-border-radius: 4px;
-  border-radius: 4px;
-}
-.datepicker td.day:hover {
-  background: #eeeeee;
-  cursor: pointer;
-}
-.datepicker td.old,
-.datepicker td.new {
-  color: #999999;
-}
-.datepicker td.disabled,
-.datepicker td.disabled:hover {
-  background: none;
-  color: #999999;
-  cursor: default;
-}
-.datepicker td.today,
-.datepicker td.today:hover,
-.datepicker td.today.disabled,
-.datepicker td.today.disabled:hover {
-  background-color: #fde19a;
-}
-.datepicker td.today:hover,
-.datepicker td.today:hover:hover,
-.datepicker td.today.disabled:hover,
-.datepicker td.today.disabled:hover:hover,
-.datepicker td.today:active,
-.datepicker td.today:hover:active,
-.datepicker td.today.disabled:active,
-.datepicker td.today.disabled:hover:active,
-.datepicker td.today.active,
-.datepicker td.today:hover.active,
-.datepicker td.today.disabled.active,
-.datepicker td.today.disabled:hover.active,
-.datepicker td.today.disabled,
-.datepicker td.today:hover.disabled,
-.datepicker td.today.disabled.disabled,
-.datepicker td.today.disabled:hover.disabled,
-.datepicker td.today[disabled],
-.datepicker td.today:hover[disabled],
-.datepicker td.today.disabled[disabled],
-.datepicker td.today.disabled:hover[disabled] {
-  background-color: @blue;
-}
-.datepicker td.today:active,
-.datepicker td.today:hover:active,
-.datepicker td.today.disabled:active,
-.datepicker td.today.disabled:hover:active,
-.datepicker td.today.active,
-.datepicker td.today:hover.active,
-.datepicker td.today.disabled.active,
-.datepicker td.today.disabled:hover.active {
-  background-color: @blue;
-}
-.datepicker td.active,
-.datepicker td.active:hover,
-.datepicker td.active.disabled,
-.datepicker td.active.disabled:hover {
-  background-color: @blue;
-  color: #fff;
-  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
-}
-.datepicker td.active:hover,
-.datepicker td.active:hover:hover,
-.datepicker td.active.disabled:hover,
-.datepicker td.active.disabled:hover:hover,
-.datepicker td.active:active,
-.datepicker td.active:hover:active,
-.datepicker td.active.disabled:active,
-.datepicker td.active.disabled:hover:active,
-.datepicker td.active.active,
-.datepicker td.active:hover.active,
-.datepicker td.active.disabled.active,
-.datepicker td.active.disabled:hover.active,
-.datepicker td.active.disabled,
-.datepicker td.active:hover.disabled,
-.datepicker td.active.disabled.disabled,
-.datepicker td.active.disabled:hover.disabled,
-.datepicker td.active[disabled],
-.datepicker td.active:hover[disabled],
-.datepicker td.active.disabled[disabled],
-.datepicker td.active.disabled:hover[disabled] {
-  background-color: @blue;
-}
-.datepicker td.active:active,
-.datepicker td.active:hover:active,
-.datepicker td.active.disabled:active,
-.datepicker td.active.disabled:hover:active,
-.datepicker td.active.active,
-.datepicker td.active:hover.active,
-.datepicker td.active.disabled.active,
-.datepicker td.active.disabled:hover.active {
-  background-color: #003399 \9;
-}
-.datepicker td span {
-  display: block;
-  width: 23%;
-  height: 54px;
-  line-height: 54px;
-  float: left;
-  margin: 1%;
-  cursor: pointer;
-  -webkit-border-radius: 4px;
-  -moz-border-radius: 4px;
-  border-radius: 4px;
-}
-.datepicker td span:hover {
-  background: #eeeeee;
-}
-.datepicker th.switch {
-  width: 145px;
-}
-.datepicker thead tr:first-child th,
-.datepicker tfoot tr:first-child th {
-  cursor: pointer;
-}
-.datepicker thead tr:first-child th:hover,
-.datepicker tfoot tr:first-child th:hover {
-  background: #eeeeee;
-}
-.input-append.date .add-on i,
-.input-prepend.date .add-on i {
-  display: block;
-  cursor: pointer;
-  width: 16px;
-  height: 16px;
+.DayPicker
+{
+    display: flex;
+    flex-wrap: wrap;
+    justify-content: center;
+    ms-flex-pack: center;
+    ms-flex-wrap: wrap;
+    padding: 1rem 0;
+    position: relative;
+    user-select: none;
+    webkit-flex-wrap: wrap;
+    webkit-justify-content: center;
+}
+.DayPicker,.DayPicker-Month
+{
+    moz-user-select: none;
+    ms-user-select: none;
+    webkit-user-select: none;
+}
+.DayPicker-Month
+{
+    border-collapse: collapse;
+    border-spacing: 0;
+    display: table;
+    margin: 0 1rem;
+    user-select: none;
+}
+.DayPicker-NavBar
+{
+    left: 0;
+    padding: 0 .5rem;
+    position: absolute;
+    right: 0;
+}
+.DayPicker-NavButton
+{
+    background-position: center;
+    background-repeat: no-repeat;
+    background-size: contain;
+    cursor: pointer;
+    height: 1.5rem;
+    position: absolute;
+    width: 1.5rem;
+}
+.DayPicker-NavButton--prev
+{
+}
+.DayPicker-NavButton--next
+{
+}
+.DayPicker-Caption
+{
+    display: table-caption;
+    height: 1.5rem;
+    text-align: center;
+}
+.DayPicker-Weekdays
+{
+    display: table-header-group;
+}
+.DayPicker-Weekday
+{
+    display: table-cell;
+    font-size: .875em;
+    padding: .5rem;
+    text-align: center;
+}
+.DayPicker-Body
+{
+    display: table-row-group;
+}
+.DayPicker-Day
+{
+    border: 1px solid #eaecec;
+    cursor: pointer;
+    display: table-cell;
+    padding: .5rem;
+    text-align: center;
+    vertical-align: middle;
+}
+.DayPicker-Day--disabled,.DayPicker-Day--outside
+{
+    color: #DCE0E0;
+    cursor: default;
+}
+.DayPicker--interactionDisabled .DayPicker-Day
+{
+    cursor: default;
+}
+.DayPicker-Day--today
+{
+    color: #D0021B;
+    font-weight: 500;
+}
+.DayPicker-Day--disabled
+{
+    background-color: #eff1f1;
+}
+.DayPicker-Day--sunday
+{
+    background-color: #f7f8f8;
+    color: #DCE0E0;
+}
+.DayPicker-Day--selected:not(.DayPicker-Day--disabled):not(.DayPicker-Day--outside)
+{
+    background-color: #4A90E2;
+    color: #fff;
+}
+.DayPicker--ar
+{
+    direction: rtl;
+}
+.DayPicker-Weekdays>div,.DayPicker-Week
+{
+    display: table-row;
 }
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 7699a7bdd6..692c5e1e06 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -1986,8 +1986,6 @@ header ~ #messages {
 
 .datepicker-box {
   width: 420px;
-  position: absolute;
-  top: 45px;
   padding: 15px;
 
   .to {
diff --git a/webpack.config.js b/webpack.config.js
index ed6848fc38..98094b8189 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -18,6 +18,7 @@ var config = {
       "moment",
       "raven-js",
       "react/addons",
+      "react-day-picker",
       "react-document-title",
       "react-router",
       "react-bootstrap",
