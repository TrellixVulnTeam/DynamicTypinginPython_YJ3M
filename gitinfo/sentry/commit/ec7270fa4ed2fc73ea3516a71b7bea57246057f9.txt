commit ec7270fa4ed2fc73ea3516a71b7bea57246057f9
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jan 22 16:42:59 2013 -0800

    Improve how we load data so its more concise

diff --git a/src/sentry/static/sentry/scripts/app.js b/src/sentry/static/sentry/scripts/app.js
index 3f30e631ce..e19dbbeed6 100644
--- a/src/sentry/static/sentry/scripts/app.js
+++ b/src/sentry/static/sentry/scripts/app.js
@@ -36,7 +36,7 @@
                 e.preventDefault();
 
                 if (!uri)
-                    return view.load();
+                    return view.reset();
 
                 $cont = $('#' + view_id);
                 $parent = $cont.parent();
@@ -46,7 +46,7 @@
                     url: uri,
                     dataType: 'json',
                     success: function(data){
-                        view.load(data);
+                        view.reset(data);
                         $parent.css('opacity', 1);
                         $tab.tab('show');
                     },
@@ -60,12 +60,11 @@
             $('li.active a[data-toggle=ajtab]').click();
         },
 
-        makeDefaultView: function(id, uri){
+        makeDefaultView: function(id){
             return new app.GroupListView({
                 className: 'group-list small',
                 id: id,
                 maxItems: 5,
-                pollUrl: uri,
                 stream: this.options.stream,
                 realtime: this.options.realtime,
                 model: app.models.Group
@@ -74,8 +73,10 @@
 
         getView: function(id, uri){
             if (!this.views[id])
-                this.views[id] = this.makeDefaultView(id, uri);
-            return this.views[id];
+                this.views[id] = this.makeDefaultView(id);
+            var view = this.views[id];
+            view.options.pollUrl = uri;
+            return view;
         }
 
     });
diff --git a/src/sentry/static/sentry/scripts/views.js b/src/sentry/static/sentry/scripts/views.js
index f3508d2a0a..40743a12c6 100644
--- a/src/sentry/static/sentry/scripts/views.js
+++ b/src/sentry/static/sentry/scripts/views.js
@@ -144,44 +144,44 @@
         },
 
         initialize: function(data){
+            var members = data.members;
+
             _.bindAll(this);
 
+            this.options = $.extend({}, this.defaults, this.options, data);
+
             this.$wrapper = $('#' + this.id);
             this.$parent = $('<ul></ul>');
             this.$empty = $('<li class="empty"></li>');
-
-            var loaded = (data.members !== undefined);
-            if (loaded)
-                this.$empty.html(this.$emptyMessage);
-            else
-                this.$empty.html(this.loadingMessage);
-            this.setEmpty();
             this.$wrapper.html(this.$parent);
 
-            if (data.className)
-                this.$parent.addClass(data.className);
-
-            this.options = $.extend({}, this.defaults, this.options, data);
+            if (this.options.className)
+                this.$parent.addClass(this.options.className);
 
             this.collection = new app.ScoredList();
-
-            this.collection.add(data.members || []);
             this.collection.on('add', this.renderMemberInContainer);
             this.collection.on('remove', this.unrenderMember);
             this.collection.on('reset', this.reSortMembers);
-            this.collection.sort();
 
-            // we set this last as it has side effects
-            this.loaded = loaded;
+            delete data.members;
+
+            this.reset(members);
         },
 
-        load: function(data){
-            this.$empty.html(this.emptyMessage);
-            if (data)
-                this.extend(data);
-            else
+        reset: function(members){
+            this.$parent.empty();
+            this.setEmpty();
+
+            if (members === undefined) {
+                this.$empty.html(this.loadingMessage);
+                this.collection.reset();
                 this.setEmpty();
-            this.loaded = true;
+                this.loaded = false;
+            } else {
+                this.$empty.html(this.emptyMessage);
+                this.collection.reset(members);
+                this.loaded = true;
+            }
         },
 
         setEmpty: function(){
@@ -347,7 +347,7 @@
         poll: function(){
             var data;
 
-            if (!this.options.realtime)
+            if (!this.options.realtime || !this.options.pollUrl)
                 return window.setTimeout(this.poll, this.options.pollTime);
 
             data = app.utils.getQueryParams();
diff --git a/tests/js/spec/OrderedElementsViewSpec.js b/tests/js/spec/OrderedElementsViewSpec.js
index 59365569b9..2c1ff02e3a 100644
--- a/tests/js/spec/OrderedElementsViewSpec.js
+++ b/tests/js/spec/OrderedElementsViewSpec.js
@@ -60,7 +60,7 @@ describe("OrderedElementsView", function() {
     });
   });
 
-  describe(".load", function() {
+  describe(".reset", function() {
 
     describe("with data", function(){
       beforeEach(function(){
@@ -68,13 +68,13 @@ describe("OrderedElementsView", function() {
         view = new app.OrderedElementsView({
             id: 'foo'
         });
-        view.extend = sinon.spy();
-        view.load([group1]);
+        view.collection.reset = sinon.spy();
+        view.reset([group1]);
       });
 
-      it("calls extend with data", function() {
-        expect(view.extend.called).toBe(true);
-        expect(view.extend.calledWithExactly([group1])).toBe(true);
+      it("calls collection.reset with data", function() {
+        expect(view.collection.reset.called).toBe(true);
+        expect(view.collection.reset.calledWithExactly([group1])).toBe(true);
       });
 
       it("suggests its loaded", function() {
@@ -86,19 +86,19 @@ describe("OrderedElementsView", function() {
       });
     });
 
-    describe("without data", function(){
+    describe("with empty list of data", function(){
       beforeEach(function(){
         view = new app.OrderedElementsView({
             id: 'foo'
         });
         group1 = make_group({id: 1, score: 3});
-        view.extend = sinon.spy();
-        view.load([]);
+        view.collection.reset = sinon.spy();
+        view.reset([]);
       });
 
-      it("calls extend with data", function() {
-        expect(view.extend.called).toBe(true);
-        expect(view.extend.calledWithExactly([])).toBe(true);
+      it("calls collection.reset with data", function() {
+        expect(view.collection.reset.called).toBe(true);
+        expect(view.collection.reset.calledWithExactly([])).toBe(true);
       });
 
       it("suggests its loaded", function() {
@@ -109,6 +109,30 @@ describe("OrderedElementsView", function() {
         expect(view.$empty.html()).toBe(view.emptyMessage);
       });
     });
+
+    describe("with no data value", function(){
+      beforeEach(function(){
+        view = new app.OrderedElementsView({
+            id: 'foo'
+        });
+        group1 = make_group({id: 1, score: 3});
+        view.collection.reset = sinon.spy();
+        view.reset();
+      });
+
+      it("calls collection.reset with no value", function() {
+        expect(view.collection.reset.called).toBe(true);
+        expect(view.collection.reset.calledWithExactly()).toBe(true);
+      });
+
+      it("suggests its not loaded", function() {
+        expect(view.loaded).toBe(false);
+      });
+
+      it("changes status text to loading", function() {
+        expect(view.$empty.html()).toBe(view.loadingMessage);
+      });
+    });
   });
 
   describe(".extend", function() {
