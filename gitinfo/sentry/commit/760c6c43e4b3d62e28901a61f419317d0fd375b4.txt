commit 760c6c43e4b3d62e28901a61f419317d0fd375b4
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Feb 5 17:12:16 2015 -0800

    Add basic user context

diff --git a/package.json b/package.json
index ef82cef521..93f99f6e17 100644
--- a/package.json
+++ b/package.json
@@ -8,6 +8,7 @@
   "dependencies": {
     "bootstrap": "^3.1.1",
     "chai": "1.7.x",
+    "crypto-js": "^3.1.2-5",
     "flot": "^0.8.0-alpha",
     "gulp": "^3.8.10",
     "gulp-cached": "^1.0.1",
diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 36f8663364..534730ebc4 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -9,7 +9,9 @@ class EventSerializer(Serializer):
     def _get_entries(self, event, user):
         # XXX(dcramer): These are called entries for future-proofing
         interface_list = []
-        for interface in event.interfaces.itervalues():
+        for key, interface in event.interfaces.iteritems():
+            if key == 'user':
+                continue
             entry = {
                 'data': interface.to_json(),
                 'type': interface.get_alias(),
@@ -24,18 +26,27 @@ class EventSerializer(Serializer):
 
         results = {}
         for item in item_list:
+            user_interface = item.interfaces.get('sentry.interfaces.User')
+            if user_interface:
+                user_data = user_interface.to_json()
+            else:
+                user_data = None
+
             results[item] = {
-                'entries': self._get_entries(item, user)
+                'entries': self._get_entries(item, user),
+                'user': user_data,
             }
         return results
 
     def serialize(self, obj, attrs, user):
+
         d = {
             'id': str(obj.id),
             'eventID': str(obj.event_id),
             'size': obj.size,
             'entries': attrs['entries'],
             'message': obj.message,
+            'user': attrs['user'],
             'tags': obj.get_tags(),
             'platform': obj.platform,
             'dateCreated': obj.datetime,
diff --git a/src/sentry/static/sentry/app/components/gravatar.jsx b/src/sentry/static/sentry/app/components/gravatar.jsx
new file mode 100644
index 0000000000..678734db52
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/gravatar.jsx
@@ -0,0 +1,43 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+var $ = require("jquery");
+var MD5 = require("crypto-js/md5");
+
+var Gravatar = React.createClass({
+  propTypes: {
+    email: React.PropTypes.string.isRequired,
+    size: React.PropTypes.number,
+    default: React.PropTypes.string
+  },
+
+  getInitialProps() {
+    return {
+      size: 64,
+      default: null
+    };
+  },
+
+  buildGravatarUrl() {
+    var url = "https://secure.gravatar.com/avatar/";
+
+    url += MD5(this.props.email.toLowerCase());
+
+    var query = {
+      s: this.props.size || undefined,
+      d: this.props.default || undefined
+    };
+
+    url += "?" + $.param(query);
+
+    return url;
+  },
+
+  render() {
+    return (
+      <img src={this.buildGravatarUrl()} />
+    );
+  }
+});
+
+module.exports = Gravatar;
diff --git a/src/sentry/static/sentry/app/views/aggregate/event.jsx b/src/sentry/static/sentry/app/views/aggregate/event.jsx
index 14544be366..dcb77c5a55 100644
--- a/src/sentry/static/sentry/app/views/aggregate/event.jsx
+++ b/src/sentry/static/sentry/app/views/aggregate/event.jsx
@@ -5,8 +5,27 @@ var React = require("react");
 var AggregateEventDataSection = require("./eventDataSection");
 var AggregateEventHeader = require("./eventHeader");
 var AggregateEventTags = require("./eventTags");
+var Gravatar = require("../../components/gravatar");
 var PropTypes = require("../../proptypes");
 
+var UserWidget = React.createClass({
+  propTypes: {
+    data: React.PropTypes.object.isRequired,
+  },
+
+  render() {
+    var user = this.props.data;
+
+    return (
+      <div>
+        <h6>User</h6>
+        <p><strong>{user.email}</strong></p>
+        <Gravatar email={user.email} />
+      </div>
+    );
+  }
+});
+
 var AggregateEvent = React.createClass({
   propTypes: {
     aggregate: PropTypes.Aggregate.isRequired,
@@ -66,8 +85,9 @@ var AggregateEvent = React.createClass({
           <h6>Time</h6>
           <p><strong>{evt.dateCreated}</strong></p>
 
-          <h6>User</h6>
-          <p><strong><a href="#">tony@hawk.com</a></strong></p>
+          {evt.user &&
+            <UserWidget data={evt.user} />
+          }
         </div>
       </div>
     );
diff --git a/webpack.config.js b/webpack.config.js
index 558c6124ba..212a19d3fd 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -16,9 +16,7 @@ module.exports = {
   entry: {
     "app": file("app/main.jsx"),
     "vendor": [
-      "flot",
-      "flot/jquery.flot.resize",
-      "flot/jquery.flot.time",
+      "crypto-js/md5",
       "jquery",
       "moment",
       "raven",
