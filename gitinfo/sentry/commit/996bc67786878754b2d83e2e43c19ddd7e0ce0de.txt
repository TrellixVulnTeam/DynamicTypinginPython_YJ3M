commit 996bc67786878754b2d83e2e43c19ddd7e0ce0de
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Jun 7 11:04:23 2019 -0700

    feat(ui): Add/connect Incident Suspects to API [SEN-579] (#13575)
    
    This fetches suspects from API and renders in sidebar
    
    Fixes SEN-579

diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index 36646f0151..a9ad88d9af 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -419,13 +419,37 @@ export const SavedSearch = PropTypes.shape({
 export const Incident = PropTypes.shape({
   id: PropTypes.string.isRequired,
   identifier: PropTypes.string.isRequired,
+  organizationId: PropTypes.string.isRequired,
   title: PropTypes.string.isRequired,
   status: PropTypes.number.isRequired,
   query: PropTypes.string,
   projects: PropTypes.array.isRequired,
+  eventStats: PropTypes.shape({
+    data: PropTypes.arrayOf(
+      PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.array]))
+    ),
+  }),
   totalEvents: PropTypes.number.isRequired,
   uniqueUsers: PropTypes.number.isRequired,
-  isSubscribed: PropTypes.bool.isRequired,
+  isSubscribed: PropTypes.bool,
+  dateClosed: PropTypes.string,
+  dateStarted: PropTypes.string.isRequired,
+  dateDetected: PropTypes.string.isRequired,
+  dateAdded: PropTypes.string.isRequired,
+});
+
+export const IncidentSuspectData = PropTypes.shape({
+  author: User,
+  dateCreated: PropTypes.string.isRequired,
+  id: PropTypes.string.isRequired,
+  message: PropTypes.string,
+  repository: Repository,
+  score: PropTypes.number,
+});
+
+export const IncidentSuspect = PropTypes.shape({
+  type: PropTypes.oneOf(['commit']).isRequired,
+  data: IncidentSuspectData.isRequired,
 });
 
 export const Activity = PropTypes.shape({
@@ -983,6 +1007,8 @@ const SentryTypes = {
   Group,
   Incident,
   IncidentActivity,
+  IncidentSuspect,
+  IncidentSuspectData,
   Tag,
   Monitor,
   PageLinks,
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/body.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/body.jsx
index 35b9e2d62e..bb4d94d7c7 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/details/body.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/body.jsx
@@ -15,7 +15,7 @@ import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 
 import Activity from './activity';
-import IncidentsSuspects from './suspects';
+import Suspects from './suspects';
 
 export default class DetailsBody extends React.Component {
   static propTypes = {
@@ -25,6 +25,9 @@ export default class DetailsBody extends React.Component {
   render() {
     const {params, incident} = this.props;
 
+    // Considered loading when there is no incident object
+    const loading = !incident;
+
     return (
       <StyledPageContent>
         <Main>
@@ -46,14 +49,15 @@ export default class DetailsBody extends React.Component {
             </StyledNavTabs>
             <Activity
               params={params}
-              incidentStatus={incident ? incident.status : null}
+              incidentStatus={!loading ? incident.status : null}
             />
           </PageContent>
         </Main>
         <Sidebar>
           <PageContent>
-            <SideHeader>{t('Events in Incident')}</SideHeader>
-            {incident ? (
+            <SideHeader loading={loading}>{t('Events in Incident')}</SideHeader>
+
+            {!loading ? (
               <Chart
                 data={incident.eventStats.data}
                 detected={incident.dateDetected}
@@ -63,17 +67,17 @@ export default class DetailsBody extends React.Component {
               <ChartPlaceholder />
             )}
 
-            <IncidentsSuspects suspects={[]} />
+            <Suspects params={params} />
 
             <div>
-              <SidebarHeading>
-                Projects Affected ({incident ? incident.projects.length : '-'})
-              </SidebarHeading>
+              <SideHeader loading={loading}>
+                {t('Projects Affected')} ({!loading ? incident.projects.length : '-'})
+              </SideHeader>
 
-              {incident && (
+              {!loading && (
                 <div>
                   <Projects slugs={incident.projects} orgId={params.orgId}>
-                    {({projects, fetching}) => {
+                    {({projects}) => {
                       return projects.map(project => (
                         <StyledIdBadge key={project.slug} project={project} />
                       ));
@@ -136,12 +140,6 @@ const ChartPlaceholder = styled('div')`
   margin-bottom: 10px;
 `;
 
-const SidebarHeading = styled('h6')`
-  color: ${p => p.theme.gray3};
-  margin: ${space(2)} 0 ${space(1)} 0;
-  text-transform: uppercase;
-`;
-
 const StyledIdBadge = styled(IdBadge)`
   margin-bottom: ${space(1)};
 `;
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/sideHeader.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/sideHeader.jsx
index 79a5964423..36cad19486 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/details/sideHeader.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/sideHeader.jsx
@@ -1,8 +1,29 @@
+import React from 'react';
 import styled from 'react-emotion';
 
-const SideHeader = styled('h6')`
+import space from 'app/styles/space';
+
+const SideHeader = styled(function Styled({className, loading, children}) {
+  return (
+    <h6 className={className}>
+      <Title loading={loading}>{children}</Title>
+    </h6>
+  );
+})`
   color: ${p => p.theme.gray3};
   font-weight: bold;
+  margin-bottom: ${space(1)};
   text-transform: uppercase;
 `;
+
+const Title = styled('span')`
+  ${p =>
+    p.loading
+      ? `
+  background-color: ${p.theme.placeholderBackground};
+  color: ${p.theme.placeholderBackground};
+  `
+      : ''};
+`;
+
 export default SideHeader;
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/suspects.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/suspects.jsx
index 1ad72fbf1a..8d73d020ef 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/details/suspects.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/suspects.jsx
@@ -4,42 +4,144 @@ import styled from 'react-emotion';
 
 import {Panel, PanelBody, PanelItem} from 'app/components/panels';
 import {t} from 'app/locale';
+import AsyncComponent from 'app/components/asyncComponent';
+import CommitLink from 'app/components/commitLink';
+import IdBadge from 'app/components/idBadge';
+import SentryTypes from 'app/sentryTypes';
 import SideHeader from 'app/views/organizationIncidents/details/sideHeader';
+import TimeSince from 'app/components/timeSince';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
 import space from 'app/styles/space';
 
-export default class Suspects extends React.Component {
+class Suspects extends React.Component {
   static propTypes = {
-    // TODO: Make this a shape once we figure out data model
-    suspects: PropTypes.array,
+    suspects: PropTypes.arrayOf(SentryTypes.IncidentSuspect),
+    loading: PropTypes.bool,
   };
 
-  renderEmpty() {
-    return t('No suspects found');
-  }
-
   render() {
-    const {suspects} = this.props;
+    const {className, loading, suspects} = this.props;
+
+    if (!loading && !suspects.length) {
+      return null;
+    }
 
     return (
-      <Container>
-        <SideHeader>{t('Suspects')}</SideHeader>
-        {suspects && suspects.length > 0 && (
-          <Panel>
-            <PanelBody>
-              {suspects.map(suspect => (
-                <PanelItem p={1} key={suspect.id}>
-                  {suspect.type}
-                </PanelItem>
-              ))}
-            </PanelBody>
-          </Panel>
+      <div className={className}>
+        <SideHeader loading={loading}>
+          {t('Suspects')} ({loading || !suspects ? '-' : suspects.length})
+        </SideHeader>
+        {loading ? (
+          <Placeholder />
+        ) : (
+          suspects &&
+          suspects.length > 0 && (
+            <Panel>
+              <PanelBody>
+                {suspects.map(({type, data}) => (
+                  <SuspectItem p={1} key={data.id}>
+                    <Type>{type}</Type>
+                    <Message type={type} suspect={data} />
+                    <AuthorRow>
+                      <IdBadge user={data.author} hideEmail />
+                      <LightTimeSince date={data.dateCreated} />
+                    </AuthorRow>
+                  </SuspectItem>
+                ))}
+              </PanelBody>
+            </Panel>
+          )
         )}
-        {(!suspects || suspects.length === 0) && this.renderEmpty()}
-      </Container>
+      </div>
     );
   }
 }
 
-const Container = styled('div')`
+const StyledSuspects = styled(Suspects)`
   margin-top: ${space(1)};
 `;
+
+export default class SuspectsContainer extends AsyncComponent {
+  getEndpoints() {
+    const {orgId, incidentId} = this.props.params;
+
+    return [['data', `/organizations/${orgId}/incidents/${incidentId}/suspects/`]];
+  }
+
+  renderLoading() {
+    return this.renderBody();
+  }
+
+  renderError(error) {
+    return super.renderError(error, true, true);
+  }
+
+  renderBody() {
+    return (
+      <StyledSuspects
+        loading={this.state.loading}
+        suspects={this.state.data}
+        {...this.props}
+      />
+    );
+  }
+}
+
+function Message({type, suspect}) {
+  const {message, id, repository} = suspect;
+  if (type === 'commit') {
+    return (
+      <CommitRow>
+        <MessageOverflow>
+          <span>{message.split(/\n/)[0]}</span>
+        </MessageOverflow>
+        <CommitLink commitId={id} repository={repository} />
+      </CommitRow>
+    );
+  }
+
+  return null;
+}
+
+Message.propTypes = {
+  type: PropTypes.oneOf(['commit']),
+  suspect: SentryTypes.IncidentSuspectData,
+};
+
+const Placeholder = styled('div')`
+  background-color: ${p => p.theme.placeholderBackground};
+  padding: ${space(4)};
+`;
+
+const Type = styled('div')`
+  text-transform: uppercase;
+  color: ${p => p.theme.gray4};
+  font-size: ${p => p.theme.fontSizeMedium};
+  font-weight: bold;
+`;
+
+const FlexCenter = styled('div')`
+  display: flex;
+  align-items: center;
+`;
+const CommitRow = styled(FlexCenter)`
+  margin: ${space(0.5)} 0;
+`;
+const AuthorRow = styled(FlexCenter)`
+  color: ${p => p.theme.gray2};
+  justify-content: space-between;
+  font-size: ${p => p.theme.fontSizeSmall};
+`;
+
+const MessageOverflow = styled('div')`
+  flex: 1;
+  ${overflowEllipsis}
+`;
+
+const SuspectItem = styled(PanelItem)`
+  flex-direction: column;
+`;
+
+const LightTimeSince = styled(TimeSince)`
+  font-size: ${p => p.theme.fontSizeSmall};
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/status.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/status.jsx
index 2f277fc098..29d319f29c 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/status.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/status.jsx
@@ -12,7 +12,7 @@ import {isOpen} from './utils';
 export default class Status extends React.Component {
   static propTypes = {
     className: PropTypes.string,
-    incident: SentryTypes.Incident.isRequired,
+    incident: SentryTypes.Incident,
   };
 
   render() {
diff --git a/tests/js/fixtures/incident.js b/tests/js/fixtures/incident.js
index 695df78f72..f5ba29c3cd 100644
--- a/tests/js/fixtures/incident.js
+++ b/tests/js/fixtures/incident.js
@@ -2,6 +2,11 @@ export function Incident(params) {
   return {
     id: '321',
     identifier: '123',
+    organizationId: '3',
+    dateClosed: '2019-04-19T19:44:05.963Z',
+    dateStarted: '2019-04-05T19:44:05.963Z',
+    dateDetected: '2019-04-05T19:44:05.963Z',
+    dateAdded: '2019-04-05T19:44:05.963Z',
     title: 'Too many Chrome errors',
     status: 0,
     projects: [],
diff --git a/tests/js/fixtures/incidentSuspectCommit.js b/tests/js/fixtures/incidentSuspectCommit.js
new file mode 100644
index 0000000000..b38dc34dcb
--- /dev/null
+++ b/tests/js/fixtures/incidentSuspectCommit.js
@@ -0,0 +1,18 @@
+import {Repository} from './repository';
+import {User} from './user';
+
+export function IncidentSuspectCommit(params = []) {
+  return {
+    data: {
+      repository: Repository(),
+      author: User(),
+      dateCreated: '2019-03-28T01:36:35.457Z',
+      score: 2,
+      message:
+        'feat: Do something to raven/base.py\nvenenatis curae tincidunt feugiat duis parturient metus',
+      id: 'ec85fa0c622c13a09cd27443132711551f45f504',
+      ...params,
+    },
+    type: 'commit',
+  };
+}
diff --git a/tests/js/spec/views/organizationIncidents/details/index.spec.jsx b/tests/js/spec/views/organizationIncidents/details/index.spec.jsx
index 102d9a3adf..eddc24677a 100644
--- a/tests/js/spec/views/organizationIncidents/details/index.spec.jsx
+++ b/tests/js/spec/views/organizationIncidents/details/index.spec.jsx
@@ -26,10 +26,18 @@ describe('IncidentDetails', function() {
       url: '/organizations/org-slug/incidents/123/',
       body: mockIncident,
     });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/incidents/123/suspects/',
+      body: [TestStubs.IncidentSuspectCommit()],
+    });
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/incidents/456/',
       statusCode: 404,
     });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/incidents/456/suspects/',
+      body: [],
+    });
     activitiesList = MockApiClient.addMockResponse({
       url: `/organizations/${organization.slug}/incidents/${
         mockIncident.identifier
@@ -67,6 +75,15 @@ describe('IncidentDetails', function() {
         .at(2)
         .text()
     ).toBe('20');
+
+    expect(wrapper.find('SuspectItem')).toHaveLength(1);
+    expect(
+      wrapper
+        .find('SuspectItem')
+        .at(0)
+        .find('MessageOverflow')
+        .text()
+    ).toBe('feat: Do something to raven/base.py');
   });
 
   it('handles invalid incident', async function() {
