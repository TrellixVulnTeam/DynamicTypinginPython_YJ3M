commit 0765032e8019ed840dbf3ffbc7e11534ad142f4c
Author: Dan Fuller <dfuller@sentry.io>
Date:   Fri Oct 11 17:27:53 2019 -0700

    Django migrations up to latest south migrations, safety checks for faking migrations from south and
    other work to get us to django migrations
    
    Add warnings when people haven't upgraded to sentry 9.1.2 already.
    Add additional migration for sql since 9.1.2.
    Remove code that checks for south and don't install south at all
    
    Remove uses of `post_syncdb`
    
    Force tests to generate tables quickly, rather than via migrations. Fix missing table
    
    Fix `create_default_projects` tests
    
    Add tests jobs to run with migrations to validate test suite works infe.
    Only run fast migrations in tests
    Handle jira_ac from sentry-plugins
    
    Make test models work when running tests with django migrations.
    
    Stop overwriting `MIGRATION_MODULES` completely, so that getsentry can set this as well
    
    Fix `_has_applied_south_migration
    
    Handle latest south migration

diff --git a/.travis.yml b/.travis.yml
index 6d12f89e88..5bba15a004 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -33,7 +33,7 @@ env:
     - PIP_QUIET=1
     - SENTRY_LIGHT_BUILD=1
     - SENTRY_SKIP_BACKEND_VALIDATION=1
-    - SOUTH_TESTS_MIGRATE=0
+    - MIGRATIONS_TEST_MIGRATE=0
     - DJANGO_VERSION=">=1.8,<1.9"
     # node's version is pinned by .nvmrc and is autodetected by `nvm install`.
     - NODE_DIR="${HOME}/.nvm/versions/node/v$(< .nvmrc)"
@@ -136,6 +136,13 @@ matrix:
       name: 'Backend [Postgres] (2/2)'
       env: TEST_SUITE=postgres DB=postgres TOTAL_TEST_GROUPS=2 TEST_GROUP=1
 
+    - <<: *postgres_default
+      name: 'Backend with migrations [Postgres] (1/2)'
+      env: TEST_SUITE=postgres DB=postgres TOTAL_TEST_GROUPS=2 TEST_GROUP=0 MIGRATIONS_TEST_MIGRATE=1
+    - <<: *postgres_default
+      name: 'Backend with migrations [Postgres] (2/2)'
+      env: TEST_SUITE=postgres DB=postgres TOTAL_TEST_GROUPS=2 TEST_GROUP=1 MIGRATIONS_TEST_MIGRATE=1
+
     - <<: *acceptance_default
       name: 'Acceptance'
       env: TEST_SUITE=acceptance USE_SNUBA=1
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 9eea60c72a..09d091dc55 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1661,23 +1661,57 @@ KAFKA_TOPICS = {
 # disabled them.
 SLACK_INTEGRATION_USE_WST = False
 
-SOUTH_TESTS_MIGRATE = os.environ.get("SOUTH_TESTS_MIGRATE", "0") == "1"
-
+"""
+Fields are:
+ - south_app_name: Which app to apply the conversion to
+ - south_migration: The south migration to map to the new name. If None, then always
+   apply
+ - django_app_name: The new app name to apply the conversion to
+ - django_migration: Which django migration to 'fake' as run.
+ - south_migration_required: Whether the south migration is required to proceed.
+ - south_migration_required_error: Error message explaining what is going wrong.
+"""
 SOUTH_MIGRATION_CONVERSIONS = (
-    # app_name, migration, new_app_name, new_migration_label
-    ("sentry", "0472_auto__add_field_sentryapp_author", "sentry", "0001_initial"),
-    ("sentry.nodestore", "0001_initial", "nodestore", "0001_initial"),
-    # ('sentry.search', '0002_auto__del_searchtoken__del_unique_searchtoken_document_field_token__de'),
-    # ('sentry.tagstore', '0008_auto__chg_field_tagkey_environment_id'),
+    (
+        "sentry",
+        "0472_auto__add_field_sentryapp_author",
+        "sentry",
+        "0001_initial",
+        True,
+        "Please upgrade to Sentry 9.1.2 before upgrading to any later versions.",
+    ),
+    (
+        "sentry",
+        "0516_auto__del_grouptagvalue__del_unique_grouptagvalue_group_id_key_value__",
+        "sentry",
+        "0002_912_to_recent",
+        False,
+        "",
+    ),
+    (
+        "sentry",
+        "0518_auto__chg_field_sentryappwebhookerror_response_code",
+        "sentry",
+        "0003_auto_20191022_0122",
+        False,
+        "",
+    ),
+    ("sentry.nodestore", "0001_initial", "nodestore", "0001_initial", False, None),
+    ("nodestore", "0001_initial", "nodestore", "0001_initial", False, None),
     (
         "social_auth",
         "0004_auto__del_unique_usersocialauth_provider_uid__add_unique_usersocialaut",
         "social_auth",
         "0001_initial",
+        True,
+        "Please upgrade to Sentry 9.1.2 before upgrading to any later versions.",
     ),
+    # From sentry-plugins
+    ("sentry_plugins.jira_ac", "0001_initial", "jira_ac", "0001_initial", False, ""),
+    ("jira_ac", "0001_initial", "jira_ac", "0001_initial", False, ""),
 )
 
-import django
-
-if django.VERSION < (1, 9):
-    INSTALLED_APPS += ("south",)
+# Whether to use Django migrations to create the database, or just build it based off
+# of models, similar to how syncdb used to work. The former is more correct, the latter
+# is much faster.
+MIGRATIONS_TEST_MIGRATE = os.environ.get("MIGRATIONS_TEST_MIGRATE", "0") == "1"
diff --git a/src/sentry/migrations/0002_912_to_recent.py b/src/sentry/migrations/0002_912_to_recent.py
new file mode 100644
index 0000000000..fafb378763
--- /dev/null
+++ b/src/sentry/migrations/0002_912_to_recent.py
@@ -0,0 +1,1003 @@
+# -*- coding: utf-8 -*-
+from __future__ import unicode_literals
+
+from django.db import migrations, models
+import sentry.db.models.fields.bounded
+import sentry.db.models.fields.jsonfield
+import sentry.db.models.fields.uuid
+import sentry.db.models.fields.array
+import django.utils.timezone
+import sentry.db.models.fields.foreignkey
+import django.db.models.deletion
+from django.conf import settings
+import sentry.db.models.fields.encrypted
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Adding indexes to large tables. These indexes should be created concurrently,
+    #   unfortunately we can't run migrations outside of a transaction until Django
+    #   1.10. So until then these should be run manually.
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+    dependencies = [("sentry", "0001_initial")]
+
+    operations = [
+        migrations.CreateModel(
+            name="AlertRule",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                ("name", models.TextField()),
+                ("status", models.SmallIntegerField(default=0)),
+                ("dataset", models.TextField()),
+                ("query", models.TextField()),
+                ("include_all_projects", models.BooleanField(default=False)),
+                ("aggregation", models.IntegerField(default=0)),
+                ("time_window", models.IntegerField()),
+                ("resolution", models.IntegerField()),
+                ("threshold_type", models.SmallIntegerField(null=True)),
+                ("alert_threshold", models.IntegerField(null=True)),
+                ("resolve_threshold", models.IntegerField(null=True)),
+                ("threshold_period", models.IntegerField()),
+                ("date_modified", models.DateTimeField(default=django.utils.timezone.now)),
+                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
+            ],
+            options={"db_table": "sentry_alertrule"},
+        ),
+        migrations.CreateModel(
+            name="AlertRuleExcludedProjects",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
+                (
+                    "alert_rule",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                        to="sentry.AlertRule", db_index=False
+                    ),
+                ),
+                (
+                    "project",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                        to="sentry.Project", db_constraint=False
+                    ),
+                ),
+            ],
+            options={"db_table": "sentry_alertruleexcludedprojects"},
+        ),
+        migrations.CreateModel(
+            name="AlertRuleQuerySubscription",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                (
+                    "alert_rule",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(to="sentry.AlertRule"),
+                ),
+            ],
+            options={"db_table": "sentry_alertrulequerysubscription"},
+        ),
+        migrations.CreateModel(
+            name="AlertRuleTrigger",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                ("label", models.TextField()),
+                ("threshold_type", models.SmallIntegerField()),
+                ("alert_threshold", models.IntegerField()),
+                ("resolve_threshold", models.IntegerField(null=True)),
+                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
+                (
+                    "alert_rule",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(to="sentry.AlertRule"),
+                ),
+            ],
+            options={"db_table": "sentry_alertruletrigger"},
+        ),
+        migrations.CreateModel(
+            name="AlertRuleTriggerExclusion",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
+                (
+                    "alert_rule_trigger",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                        related_name="exclusions", to="sentry.AlertRuleTrigger"
+                    ),
+                ),
+            ],
+            options={"db_table": "sentry_alertruletriggerexclusion"},
+        ),
+        migrations.CreateModel(
+            name="Incident",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                ("identifier", models.IntegerField()),
+                (
+                    "detection_uuid",
+                    sentry.db.models.fields.uuid.UUIDField(max_length=32, null=True, db_index=True),
+                ),
+                ("status", models.PositiveSmallIntegerField(default=1)),
+                ("type", models.PositiveSmallIntegerField(default=1)),
+                ("title", models.TextField()),
+                ("query", models.TextField()),
+                ("date_started", models.DateTimeField(default=django.utils.timezone.now)),
+                ("date_detected", models.DateTimeField(default=django.utils.timezone.now)),
+                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
+                ("date_closed", models.DateTimeField(null=True)),
+                (
+                    "alert_rule",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                        on_delete=django.db.models.deletion.SET_NULL,
+                        to="sentry.AlertRule",
+                        null=True,
+                    ),
+                ),
+            ],
+            options={"db_table": "sentry_incident"},
+        ),
+        migrations.CreateModel(
+            name="IncidentActivity",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                ("type", models.IntegerField()),
+                ("value", models.TextField(null=True)),
+                ("previous_value", models.TextField(null=True)),
+                ("comment", models.TextField(null=True)),
+                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
+            ],
+            options={"db_table": "sentry_incidentactivity"},
+        ),
+        migrations.CreateModel(
+            name="IncidentGroup",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                )
+            ],
+            options={"db_table": "sentry_incidentgroup"},
+        ),
+        migrations.CreateModel(
+            name="IncidentProject",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                (
+                    "incident",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(to="sentry.Incident"),
+                ),
+                (
+                    "project",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                        db_constraint=False, to="sentry.Project", db_index=False
+                    ),
+                ),
+            ],
+            options={"db_table": "sentry_incidentproject"},
+        ),
+        migrations.CreateModel(
+            name="IncidentSeen",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                ("last_seen", models.DateTimeField(default=django.utils.timezone.now)),
+                (
+                    "incident",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(to="sentry.Incident"),
+                ),
+                (
+                    "user",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                        to=settings.AUTH_USER_MODEL, db_index=False
+                    ),
+                ),
+            ],
+            options={"db_table": "sentry_incidentseen"},
+        ),
+        migrations.CreateModel(
+            name="IncidentSnapshot",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                ("unique_users", models.IntegerField()),
+                ("total_events", models.IntegerField()),
+                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
+            ],
+            options={"db_table": "sentry_incidentsnapshot"},
+        ),
+        migrations.CreateModel(
+            name="IncidentSubscription",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
+                (
+                    "incident",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                        to="sentry.Incident", db_index=False
+                    ),
+                ),
+                (
+                    "user",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                        to=settings.AUTH_USER_MODEL
+                    ),
+                ),
+            ],
+            options={"db_table": "sentry_incidentsubscription"},
+        ),
+        migrations.CreateModel(
+            name="IncidentSuspectCommit",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                ("order", models.SmallIntegerField()),
+                (
+                    "commit",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                        to="sentry.Commit", db_constraint=False
+                    ),
+                ),
+                (
+                    "incident",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                        to="sentry.Incident", db_index=False
+                    ),
+                ),
+            ],
+            options={"db_table": "sentry_incidentsuspectcommit"},
+        ),
+        migrations.CreateModel(
+            name="IncidentTrigger",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                ("status", models.SmallIntegerField()),
+                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
+                (
+                    "alert_rule_trigger",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                        to="sentry.AlertRuleTrigger"
+                    ),
+                ),
+                (
+                    "incident",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                        to="sentry.Incident", db_index=False
+                    ),
+                ),
+            ],
+            options={"db_table": "sentry_incidenttrigger"},
+        ),
+        migrations.CreateModel(
+            name="IntegrationFeature",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                ("user_description", models.TextField(null=True)),
+                (
+                    "feature",
+                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
+                        default=0,
+                        choices=[
+                            (0, b"integrations-api"),
+                            (1, b"integrations-issue-link"),
+                            (2, b"integrations-stacktrace-link"),
+                            (3, b"integrations-event-hooks"),
+                        ],
+                    ),
+                ),
+                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
+            ],
+            options={"db_table": "sentry_integrationfeature"},
+        ),
+        migrations.CreateModel(
+            name="PagerDutyService",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                ("integration_key", models.CharField(max_length=255)),
+                ("service_id", models.CharField(max_length=255)),
+                ("service_name", models.CharField(max_length=255)),
+                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
+                (
+                    "organization_integration",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                        to="sentry.OrganizationIntegration"
+                    ),
+                ),
+            ],
+            options={"db_table": "sentry_pagerdutyservice"},
+        ),
+        migrations.CreateModel(
+            name="PagerDutyServiceProject",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                ("integration_key", models.CharField(max_length=255, null=True)),
+                ("service_id", models.CharField(max_length=255, null=True)),
+                ("service_name", models.CharField(max_length=255, null=True)),
+                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
+                (
+                    "organization_integration",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                        to="sentry.OrganizationIntegration", null=True
+                    ),
+                ),
+                (
+                    "pagerduty_service",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                        to="sentry.PagerDutyService"
+                    ),
+                ),
+                (
+                    "project",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                        db_constraint=False, to="sentry.Project", db_index=False
+                    ),
+                ),
+            ],
+            options={"db_table": "sentry_pagerdutyserviceproject"},
+        ),
+        migrations.CreateModel(
+            name="QuerySubscription",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                ("type", models.TextField()),
+                ("subscription_id", models.TextField(unique=True)),
+                ("dataset", models.TextField()),
+                ("query", models.TextField()),
+                ("aggregation", models.IntegerField(default=0)),
+                ("time_window", models.IntegerField()),
+                ("resolution", models.IntegerField()),
+                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
+                (
+                    "project",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                        to="sentry.Project", db_constraint=False
+                    ),
+                ),
+            ],
+            options={"db_table": "sentry_querysubscription"},
+        ),
+        migrations.CreateModel(
+            name="SentryAppInstallationToken",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                (
+                    "api_token",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(to="sentry.ApiToken"),
+                ),
+            ],
+            options={"db_table": "sentry_sentryappinstallationtoken"},
+        ),
+        migrations.CreateModel(
+            name="SentryAppWebhookError",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                (
+                    "date_added",
+                    models.DateTimeField(default=django.utils.timezone.now, db_index=True),
+                ),
+                (
+                    "request_body",
+                    sentry.db.models.fields.encrypted.EncryptedJsonField(default=dict),
+                ),
+                (
+                    "request_headers",
+                    sentry.db.models.fields.encrypted.EncryptedJsonField(default=dict),
+                ),
+                ("event_type", models.CharField(max_length=64)),
+                ("webhook_url", models.URLField()),
+                ("response_body", models.TextField()),
+                ("response_code", models.PositiveSmallIntegerField()),
+            ],
+            options={"db_table": "sentry_sentryappwebhookerror"},
+        ),
+        migrations.CreateModel(
+            name="TimeSeriesSnapshot",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                ("start", models.DateTimeField()),
+                ("end", models.DateTimeField()),
+                ("values", sentry.db.models.fields.array.ArrayField(null=True)),
+                ("period", models.IntegerField()),
+                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
+            ],
+            options={"db_table": "sentry_timeseriessnapshot"},
+        ),
+        migrations.DeleteModel(name="EventMapping"),
+        migrations.DeleteModel(name="EventTag"),
+        migrations.DeleteModel(name="GroupTagKey"),
+        migrations.DeleteModel(name="GroupTagValue"),
+        # migrations.AlterUniqueTogether(
+        #     name='projectcficachefile',
+        #     unique_together=set([]),
+        # ),
+        migrations.RemoveField(model_name="projectcficachefile", name="cache_file"),
+        migrations.RemoveField(model_name="projectcficachefile", name="debug_file"),
+        migrations.RemoveField(model_name="projectcficachefile", name="project"),
+        migrations.AlterUniqueTogether(name="projectsymcachefile", unique_together=set([])),
+        migrations.RemoveField(model_name="projectsymcachefile", name="cache_file"),
+        migrations.RemoveField(model_name="projectsymcachefile", name="debug_file"),
+        migrations.RemoveField(model_name="projectsymcachefile", name="project"),
+        migrations.DeleteModel(name="TagKey"),
+        migrations.DeleteModel(name="TagValue"),
+        migrations.RemoveField(model_name="sentryappinstallation", name="authorization"),
+        migrations.AddField(
+            model_name="broadcast",
+            name="cta",
+            field=models.CharField(max_length=256, null=True, blank=True),
+        ),
+        migrations.AddField(
+            model_name="groupredirect",
+            name="organization_id",
+            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
+        ),
+        migrations.AddField(
+            model_name="groupredirect",
+            name="previous_project_slug",
+            field=models.SlugField(null=True),
+        ),
+        migrations.AddField(
+            model_name="groupredirect",
+            name="previous_short_id",
+            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
+        ),
+        migrations.AddField(
+            model_name="organizationmember",
+            name="invite_status",
+            field=models.PositiveSmallIntegerField(
+                default=0,
+                null=True,
+                choices=[
+                    (0, "Approved"),
+                    (1, "Organization member requested to invite user"),
+                    (2, "User requested to join organization"),
+                ],
+            ),
+        ),
+        migrations.AddField(
+            model_name="organizationmember",
+            name="inviter",
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                related_name="sentry_inviter_set",
+                blank=True,
+                to=settings.AUTH_USER_MODEL,
+                null=True,
+            ),
+        ),
+        migrations.AddField(
+            model_name="projectownership",
+            name="auto_assignment",
+            field=models.BooleanField(default=False),
+        ),
+        migrations.AddField(
+            model_name="sentryapp", name="verify_install", field=models.BooleanField(default=True)
+        ),
+        migrations.AddField(
+            model_name="sentryappinstallation",
+            name="api_token",
+            field=models.OneToOneField(
+                related_name="sentry_app_installation",
+                null=True,
+                on_delete=django.db.models.deletion.SET_NULL,
+                to="sentry.ApiToken",
+            ),
+        ),
+        migrations.AddField(
+            model_name="sentryappinstallation",
+            name="status",
+            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
+                default=0, db_index=True, choices=[(0, b"pending"), (1, b"installed")]
+            ),
+        ),
+        migrations.AlterField(
+            model_name="auditlogentry",
+            name="event",
+            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
+                choices=[
+                    (1, b"member.invite"),
+                    (2, b"member.add"),
+                    (3, b"member.accept-invite"),
+                    (5, b"member.remove"),
+                    (4, b"member.edit"),
+                    (6, b"member.join-team"),
+                    (7, b"member.leave-team"),
+                    (8, b"member.pending"),
+                    (20, b"team.create"),
+                    (21, b"team.edit"),
+                    (22, b"team.remove"),
+                    (30, b"project.create"),
+                    (31, b"project.edit"),
+                    (32, b"project.remove"),
+                    (33, b"project.set-public"),
+                    (34, b"project.set-private"),
+                    (35, b"project.request-transfer"),
+                    (36, b"project.accept-transfer"),
+                    (37, b"project.enable"),
+                    (38, b"project.disable"),
+                    (10, b"org.create"),
+                    (11, b"org.edit"),
+                    (12, b"org.remove"),
+                    (13, b"org.restore"),
+                    (40, b"tagkey.remove"),
+                    (50, b"projectkey.create"),
+                    (51, b"projectkey.edit"),
+                    (52, b"projectkey.remove"),
+                    (53, b"projectkey.enable"),
+                    (53, b"projectkey.disable"),
+                    (60, b"sso.enable"),
+                    (61, b"sso.disable"),
+                    (62, b"sso.edit"),
+                    (63, b"sso-identity.link"),
+                    (70, b"api-key.create"),
+                    (71, b"api-key.edit"),
+                    (72, b"api-key.remove"),
+                    (80, b"rule.create"),
+                    (81, b"rule.edit"),
+                    (82, b"rule.remove"),
+                    (100, b"servicehook.create"),
+                    (101, b"servicehook.edit"),
+                    (102, b"servicehook.remove"),
+                    (103, b"servicehook.enable"),
+                    (104, b"servicehook.disable"),
+                    (110, b"integration.add"),
+                    (111, b"integration.edit"),
+                    (112, b"integration.remove"),
+                    (113, b"sentry-app.add"),
+                    (115, b"sentry-app.remove"),
+                    (116, b"sentry-app.install"),
+                    (117, b"sentry-app.uninstall"),
+                    (130, b"internal-integration.create"),
+                    (135, b"internal-integration.add-token"),
+                    (136, b"internal-integration.remove-token"),
+                    (90, b"ondemand.edit"),
+                    (91, b"trial.started"),
+                    (92, b"plan.changed"),
+                    (93, b"plan.cancelled"),
+                ]
+            ),
+        ),
+        migrations.AlterField(
+            model_name="commitfilechange", name="filename", field=models.CharField(max_length=255)
+        ),
+        migrations.AlterField(
+            model_name="discoversavedquery",
+            name="query",
+            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
+        ),
+        migrations.AlterField(
+            model_name="externalissue",
+            name="metadata",
+            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
+        ),
+        migrations.AlterField(
+            model_name="featureadoption",
+            name="data",
+            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
+        ),
+        migrations.AlterField(
+            model_name="file",
+            name="headers",
+            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
+        ),
+        migrations.AlterField(
+            model_name="group",
+            name="project",
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(to="sentry.Project"),
+        ),
+        migrations.AlterField(
+            model_name="grouplink",
+            name="data",
+            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
+        ),
+        migrations.AlterField(
+            model_name="groupsnooze",
+            name="state",
+            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
+        ),
+        migrations.AlterField(
+            model_name="organization",
+            name="default_role",
+            field=models.CharField(
+                default=b"member",
+                max_length=32,
+                choices=[
+                    (b"member", b"Member"),
+                    (b"admin", b"Admin"),
+                    (b"manager", b"Manager"),
+                    (b"owner", b"Organization Owner"),
+                ],
+            ),
+        ),
+        migrations.AlterField(
+            model_name="organizationmember",
+            name="role",
+            field=models.CharField(
+                default=b"member",
+                max_length=32,
+                choices=[
+                    (b"member", b"Member"),
+                    (b"admin", b"Admin"),
+                    (b"manager", b"Manager"),
+                    (b"owner", b"Organization Owner"),
+                ],
+            ),
+        ),
+        migrations.AlterField(
+            model_name="organizationonboardingtask",
+            name="data",
+            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
+        ),
+        migrations.AlterField(
+            model_name="projectdebugfile",
+            name="data",
+            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
+        ),
+        migrations.AlterField(
+            model_name="projectkey",
+            name="data",
+            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
+        ),
+        migrations.AlterField(
+            model_name="projectownership",
+            name="schema",
+            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
+        ),
+        migrations.AlterField(
+            model_name="promptsactivity",
+            name="data",
+            field=sentry.db.models.fields.jsonfield.JSONField(default={}),
+        ),
+        migrations.AlterField(
+            model_name="release",
+            name="data",
+            field=sentry.db.models.fields.jsonfield.JSONField(default={}),
+        ),
+        migrations.AlterField(
+            model_name="release",
+            name="project_id",
+            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
+        ),
+        migrations.AlterField(
+            model_name="releasefile",
+            name="project_id",
+            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
+        ),
+        migrations.AlterField(
+            model_name="repository",
+            name="config",
+            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
+        ),
+        migrations.AlterField(
+            model_name="scheduleddeletion",
+            name="data",
+            field=sentry.db.models.fields.jsonfield.JSONField(default={}),
+        ),
+        migrations.AlterField(
+            model_name="scheduledjob",
+            name="payload",
+            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
+        ),
+        migrations.AlterField(
+            model_name="sentryapp",
+            name="status",
+            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
+                default=0,
+                db_index=True,
+                choices=[(0, b"unpublished"), (1, b"published"), (2, b"internal")],
+            ),
+        ),
+        migrations.AlterField(
+            model_name="sentryapp", name="webhook_url", field=models.URLField(null=True)
+        ),
+        migrations.AlterField(
+            model_name="widget",
+            name="display_options",
+            field=sentry.db.models.fields.jsonfield.JSONField(default={}),
+        ),
+        migrations.AlterField(
+            model_name="widgetdatasource",
+            name="data",
+            field=sentry.db.models.fields.jsonfield.JSONField(default={}),
+        ),
+        migrations.AlterUniqueTogether(
+            name="groupassignee", unique_together=set([("project", "group")])
+        ),
+        migrations.AlterUniqueTogether(
+            name="groupredirect",
+            unique_together=set(
+                [("organization_id", "previous_short_id", "previous_project_slug")]
+            ),
+        ),
+        migrations.AlterIndexTogether(
+            name="group", index_together=set([("project", "first_release"), ("project", "id")])
+        ),
+        migrations.DeleteModel(name="ProjectCfiCacheFile"),
+        migrations.DeleteModel(name="ProjectSymCacheFile"),
+        migrations.AddField(
+            model_name="sentryappwebhookerror",
+            name="organization",
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                related_name="sentry_app_webhook_errors", to="sentry.Organization"
+            ),
+        ),
+        migrations.AddField(
+            model_name="sentryappwebhookerror",
+            name="sentry_app",
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                related_name="webhook_errors", to="sentry.SentryApp"
+            ),
+        ),
+        migrations.AddField(
+            model_name="sentryappinstallationtoken",
+            name="sentry_app_installation",
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                to="sentry.SentryAppInstallation"
+            ),
+        ),
+        migrations.AddField(
+            model_name="integrationfeature",
+            name="sentry_app",
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(to="sentry.SentryApp"),
+        ),
+        migrations.AddField(
+            model_name="incidentsnapshot",
+            name="event_stats_snapshot",
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                to="sentry.TimeSeriesSnapshot"
+            ),
+        ),
+        migrations.AddField(
+            model_name="incidentsnapshot",
+            name="incident",
+            field=models.OneToOneField(to="sentry.Incident"),
+        ),
+        migrations.AddField(
+            model_name="incidentgroup",
+            name="group",
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                db_constraint=False, to="sentry.Group", db_index=False
+            ),
+        ),
+        migrations.AddField(
+            model_name="incidentgroup",
+            name="incident",
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(to="sentry.Incident"),
+        ),
+        migrations.AddField(
+            model_name="incidentactivity",
+            name="event_stats_snapshot",
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                to="sentry.TimeSeriesSnapshot", null=True
+            ),
+        ),
+        migrations.AddField(
+            model_name="incidentactivity",
+            name="incident",
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(to="sentry.Incident"),
+        ),
+        migrations.AddField(
+            model_name="incidentactivity",
+            name="user",
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                to=settings.AUTH_USER_MODEL, null=True
+            ),
+        ),
+        migrations.AddField(
+            model_name="incident",
+            name="groups",
+            field=models.ManyToManyField(
+                related_name="incidents", through="sentry.IncidentGroup", to="sentry.Group"
+            ),
+        ),
+        migrations.AddField(
+            model_name="incident",
+            name="organization",
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(to="sentry.Organization"),
+        ),
+        migrations.AddField(
+            model_name="incident",
+            name="projects",
+            field=models.ManyToManyField(
+                related_name="incidents", through="sentry.IncidentProject", to="sentry.Project"
+            ),
+        ),
+        migrations.AddField(
+            model_name="alertruletriggerexclusion",
+            name="query_subscription",
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                to="sentry.QuerySubscription"
+            ),
+        ),
+        migrations.AddField(
+            model_name="alertruletrigger",
+            name="triggered_incidents",
+            field=models.ManyToManyField(
+                related_name="triggers", through="sentry.IncidentTrigger", to="sentry.Incident"
+            ),
+        ),
+        migrations.AddField(
+            model_name="alertrulequerysubscription",
+            name="query_subscription",
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                to="sentry.QuerySubscription", unique=True
+            ),
+        ),
+        migrations.AddField(
+            model_name="alertrule",
+            name="excluded_projects",
+            field=models.ManyToManyField(
+                related_name="alert_rule_exclusions",
+                through="sentry.AlertRuleExcludedProjects",
+                to="sentry.Project",
+            ),
+        ),
+        migrations.AddField(
+            model_name="alertrule",
+            name="organization",
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                to="sentry.Organization", null=True, db_index=False
+            ),
+        ),
+        migrations.AddField(
+            model_name="alertrule",
+            name="query_subscriptions",
+            field=models.ManyToManyField(
+                related_name="alert_rules",
+                through="sentry.AlertRuleQuerySubscription",
+                to="sentry.QuerySubscription",
+            ),
+        ),
+        migrations.AlterUniqueTogether(
+            name="sentryappinstallationtoken",
+            unique_together=set([("sentry_app_installation", "api_token")]),
+        ),
+        migrations.AlterUniqueTogether(
+            name="pagerdutyserviceproject", unique_together=set([("project", "pagerduty_service")])
+        ),
+        migrations.AlterUniqueTogether(
+            name="pagerdutyservice",
+            unique_together=set([("service_id", "organization_integration")]),
+        ),
+        migrations.AlterUniqueTogether(
+            name="integrationfeature", unique_together=set([("sentry_app", "feature")])
+        ),
+        migrations.AlterUniqueTogether(
+            name="incidenttrigger", unique_together=set([("incident", "alert_rule_trigger")])
+        ),
+        migrations.AlterUniqueTogether(
+            name="incidentsuspectcommit", unique_together=set([("incident", "commit")])
+        ),
+        migrations.AlterUniqueTogether(
+            name="incidentsubscription", unique_together=set([("incident", "user")])
+        ),
+        migrations.AlterUniqueTogether(
+            name="incidentseen", unique_together=set([("user", "incident")])
+        ),
+        migrations.AlterUniqueTogether(
+            name="incidentproject", unique_together=set([("project", "incident")])
+        ),
+        migrations.AlterUniqueTogether(
+            name="incidentgroup", unique_together=set([("group", "incident")])
+        ),
+        migrations.AlterUniqueTogether(
+            name="incident", unique_together=set([("organization", "identifier")])
+        ),
+        migrations.AlterIndexTogether(
+            name="incident", index_together=set([("alert_rule", "type", "status")])
+        ),
+        migrations.AlterUniqueTogether(
+            name="alertruletriggerexclusion",
+            unique_together=set([("alert_rule_trigger", "query_subscription")]),
+        ),
+        migrations.AlterUniqueTogether(
+            name="alertruletrigger", unique_together=set([("alert_rule", "label")])
+        ),
+        migrations.AlterUniqueTogether(
+            name="alertruleexcludedprojects", unique_together=set([("alert_rule", "project")])
+        ),
+        migrations.AlterUniqueTogether(
+            name="alertrule", unique_together=set([("organization", "name")])
+        ),
+    ]
diff --git a/src/sentry/migrations/0003_auto_20191022_0122.py b/src/sentry/migrations/0003_auto_20191022_0122.py
new file mode 100644
index 0000000000..f47092a510
--- /dev/null
+++ b/src/sentry/migrations/0003_auto_20191022_0122.py
@@ -0,0 +1,131 @@
+# -*- coding: utf-8 -*-
+from __future__ import unicode_literals
+
+from django.db import migrations, models
+import django.utils.timezone
+import sentry.db.models.fields.bounded
+import sentry.db.models.fields.foreignkey
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Adding indexes to large tables. These indexes should be created concurrently,
+    #   unfortunately we can't run migrations outside of a transaction until Django
+    #   1.10. So until then these should be run manually.
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+    dependencies = [("sentry", "0002_912_to_recent")]
+
+    operations = [
+        migrations.CreateModel(
+            name="AlertRuleTriggerAction",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                ("type", models.SmallIntegerField()),
+                ("target_type", models.SmallIntegerField()),
+                ("target_identifier", models.TextField(null=True)),
+                ("target_display", models.TextField(null=True)),
+                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
+                (
+                    "alert_rule_trigger",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                        to="sentry.AlertRuleTrigger"
+                    ),
+                ),
+                (
+                    "integration",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                        to="sentry.Integration", null=True
+                    ),
+                ),
+            ],
+            options={"db_table": "sentry_alertruletriggeraction"},
+        ),
+        migrations.AlterField(
+            model_name="auditlogentry",
+            name="event",
+            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
+                choices=[
+                    (1, b"member.invite"),
+                    (2, b"member.add"),
+                    (3, b"member.accept-invite"),
+                    (5, b"member.remove"),
+                    (4, b"member.edit"),
+                    (6, b"member.join-team"),
+                    (7, b"member.leave-team"),
+                    (8, b"member.pending"),
+                    (20, b"team.create"),
+                    (21, b"team.edit"),
+                    (22, b"team.remove"),
+                    (30, b"project.create"),
+                    (31, b"project.edit"),
+                    (32, b"project.remove"),
+                    (33, b"project.set-public"),
+                    (34, b"project.set-private"),
+                    (35, b"project.request-transfer"),
+                    (36, b"project.accept-transfer"),
+                    (37, b"project.enable"),
+                    (38, b"project.disable"),
+                    (10, b"org.create"),
+                    (11, b"org.edit"),
+                    (12, b"org.remove"),
+                    (13, b"org.restore"),
+                    (40, b"tagkey.remove"),
+                    (50, b"projectkey.create"),
+                    (51, b"projectkey.edit"),
+                    (52, b"projectkey.remove"),
+                    (53, b"projectkey.enable"),
+                    (53, b"projectkey.disable"),
+                    (60, b"sso.enable"),
+                    (61, b"sso.disable"),
+                    (62, b"sso.edit"),
+                    (63, b"sso-identity.link"),
+                    (70, b"api-key.create"),
+                    (71, b"api-key.edit"),
+                    (72, b"api-key.remove"),
+                    (80, b"rule.create"),
+                    (81, b"rule.edit"),
+                    (82, b"rule.remove"),
+                    (100, b"servicehook.create"),
+                    (101, b"servicehook.edit"),
+                    (102, b"servicehook.remove"),
+                    (103, b"servicehook.enable"),
+                    (104, b"servicehook.disable"),
+                    (110, b"integration.add"),
+                    (111, b"integration.edit"),
+                    (112, b"integration.remove"),
+                    (113, b"sentry-app.add"),
+                    (115, b"sentry-app.remove"),
+                    (116, b"sentry-app.install"),
+                    (117, b"sentry-app.uninstall"),
+                    (130, b"internal-integration.create"),
+                    (135, b"internal-integration.add-token"),
+                    (136, b"internal-integration.remove-token"),
+                    (90, b"ondemand.edit"),
+                    (91, b"trial.started"),
+                    (92, b"plan.changed"),
+                    (93, b"plan.cancelled"),
+                    (140, b"invite-request.create"),
+                    (141, b"invite-request.remove"),
+                ]
+            ),
+        ),
+        migrations.AlterField(
+            model_name="sentryappwebhookerror",
+            name="response_code",
+            field=models.PositiveSmallIntegerField(null=True),
+        ),
+    ]
diff --git a/src/sentry/migrations/0004_bitfieldtestmodel_blankjsonfieldtestmodel_callabledefaultmodel_jsonfieldtestmodel_jsonfieldwithdefau.py b/src/sentry/migrations/0004_bitfieldtestmodel_blankjsonfieldtestmodel_callabledefaultmodel_jsonfieldtestmodel_jsonfieldwithdefau.py
new file mode 100644
index 0000000000..b9e62a32eb
--- /dev/null
+++ b/src/sentry/migrations/0004_bitfieldtestmodel_blankjsonfieldtestmodel_callabledefaultmodel_jsonfieldtestmodel_jsonfieldwithdefau.py
@@ -0,0 +1,109 @@
+# -*- coding: utf-8 -*-
+from __future__ import unicode_literals
+
+from django.conf import settings
+from django.db import migrations, models
+import bitfield.models
+import sentry.models
+import sentry.db.models.fields.jsonfield
+
+
+def is_test_db():
+    return settings.DATABASES.get("default", {}).get("NAME", "").startswith("test_")
+
+
+class Migration(migrations.Migration):
+    """
+    This is a hack to get these test models to work when we run the tests using
+    migrations. We don't need to run this in dev or prod, and so we just check that the
+    database name starts with `test_`.
+    """
+
+    is_dangerous = True
+
+    dependencies = [("sentry", "0003_auto_20191022_0122")]
+
+    if is_test_db():
+        operations = [
+            migrations.CreateModel(
+                name="BitFieldTestModel",
+                fields=[
+                    (
+                        "id",
+                        models.AutoField(
+                            verbose_name="ID", serialize=False, auto_created=True, primary_key=True
+                        ),
+                    ),
+                    (
+                        "flags",
+                        bitfield.models.BitField(
+                            (b"FLAG_0", b"FLAG_1", b"FLAG_2", b"FLAG_3"),
+                            default=3,
+                            db_column=b"another_name",
+                        ),
+                    ),
+                ],
+            ),
+            migrations.CreateModel(
+                name="BlankJSONFieldTestModel",
+                fields=[
+                    (
+                        "id",
+                        models.AutoField(
+                            verbose_name="ID", serialize=False, auto_created=True, primary_key=True
+                        ),
+                    ),
+                    ("null_json", sentry.db.models.fields.jsonfield.JSONField(null=True)),
+                    (
+                        "blank_json",
+                        sentry.db.models.fields.jsonfield.JSONField(default=dict, blank=True),
+                    ),
+                ],
+            ),
+            migrations.CreateModel(
+                name="CallableDefaultModel",
+                fields=[
+                    (
+                        "id",
+                        models.AutoField(
+                            verbose_name="ID", serialize=False, auto_created=True, primary_key=True
+                        ),
+                    ),
+                    ("json", sentry.db.models.fields.jsonfield.JSONField()),
+                ],
+            ),
+            migrations.CreateModel(
+                name="JSONFieldTestModel",
+                fields=[
+                    (
+                        "id",
+                        models.AutoField(
+                            verbose_name="ID", serialize=False, auto_created=True, primary_key=True
+                        ),
+                    ),
+                    (
+                        "json",
+                        sentry.db.models.fields.jsonfield.JSONField(
+                            null=True, verbose_name=b"test", blank=True
+                        ),
+                    ),
+                ],
+            ),
+            migrations.CreateModel(
+                name="JSONFieldWithDefaultTestModel",
+                fields=[
+                    (
+                        "id",
+                        models.AutoField(
+                            verbose_name="ID", serialize=False, auto_created=True, primary_key=True
+                        ),
+                    ),
+                    (
+                        "json",
+                        sentry.db.models.fields.jsonfield.JSONField(
+                            default={b"sukasuka": b"YAAAAAZ"}
+                        ),
+                    ),
+                ],
+            ),
+        ]
diff --git a/src/sentry/migrations/0005_fix_content_types.py b/src/sentry/migrations/0005_fix_content_types.py
new file mode 100644
index 0000000000..8aae43bebd
--- /dev/null
+++ b/src/sentry/migrations/0005_fix_content_types.py
@@ -0,0 +1,50 @@
+# -*- coding: utf-8 -*-
+from __future__ import unicode_literals
+
+from django.db import migrations, models
+
+
+def fix_content_types(apps, schema_editor):
+    # XXX: This is a gross hack. We missed removing this column a long time ago while
+    # upgrading Django. Since different databases might be in different states depending
+    # on which path they take to get to Django migrations, it's safest to just check
+    # if the column exists for everyone, and remove it if so. This removal is safe,
+    # since the column has been long removed from the Django model.
+
+    c = schema_editor.connection.cursor()
+    c.execute(
+        """
+        SELECT 1
+        FROM information_schema.columns
+        WHERE table_name='django_content_type' and column_name='name';
+        """
+    )
+    results = c.fetchall()
+    if len(results):
+        c.execute('ALTER TABLE django_content_type DROP COLUMN "name";')
+    c.close()
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Adding indexes to large tables. These indexes should be created concurrently,
+    #   unfortunately we can't run migrations outside of a transaction until Django
+    #   1.10. So until then these should be run manually.
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+    dependencies = [
+        (
+            "sentry",
+            "0004_bitfieldtestmodel_blankjsonfieldtestmodel_callabledefaultmodel_jsonfieldtestmodel_jsonfieldwithdefau",
+        )
+    ]
+
+    operations = [migrations.RunPython(fix_content_types)]
diff --git a/src/sentry/models/counter.py b/src/sentry/models/counter.py
index 0a755e525a..12918d040d 100644
--- a/src/sentry/models/counter.py
+++ b/src/sentry/models/counter.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 from django.db import connection, connections
-from django.db.models.signals import post_syncdb
+from django.db.models.signals import post_migrate
 
 from sentry.db.models import FlexibleForeignKey, Model, sane_repr, BoundedBigIntegerField
 from sentry.utils.db import is_postgres
@@ -48,17 +48,16 @@ def increment_project_counter(project, delta=1):
 
 # this must be idempotent because it seems to execute twice
 # (at least during test runs)
-def create_counter_function(db, created_models, app=None, **kwargs):
-    if app and app.__name__ != "sentry.models":
+def create_counter_function(app_config, using, **kwargs):
+    if app_config and app_config.name != "sentry":
         return
 
-    if not is_postgres(db):
-        return
-
-    if Counter not in created_models:
+    try:
+        app_config.get_model("Counter")
+    except LookupError:
         return
 
-    cursor = connections[db].cursor()
+    cursor = connections[using].cursor()
     try:
         cursor.execute(
             """
@@ -90,6 +89,4 @@ def create_counter_function(db, created_models, app=None, **kwargs):
         cursor.close()
 
 
-# TODO(dcramer): Remove when Django 1.6 is no longer supported, as this does
-# nothing with Django migrations
-post_syncdb.connect(create_counter_function, dispatch_uid="create_counter_function", weak=False)
+post_migrate.connect(create_counter_function, dispatch_uid="create_counter_function", weak=False)
diff --git a/src/sentry/receivers/core.py b/src/sentry/receivers/core.py
index 4ad30b9ea4..19b9a94047 100644
--- a/src/sentry/receivers/core.py
+++ b/src/sentry/receivers/core.py
@@ -6,7 +6,8 @@ from click import echo
 from django.conf import settings
 from django.db import connections, transaction
 from django.db.utils import OperationalError, ProgrammingError
-from django.db.models.signals import post_syncdb, post_save
+from django.db.models.signals import post_migrate, post_save
+
 from functools import wraps
 from pkg_resources import parse_version as Version
 
@@ -34,11 +35,13 @@ def handle_db_failure(func):
     return wrapped
 
 
-def create_default_projects(app=None, app_config=None, verbosity=2, **kwargs):
-    if app and app.__name__ != "sentry.models":
+def create_default_projects(app_config, verbosity=2, **kwargs):
+    if app_config and app_config.name != "sentry":
         return
 
-    if app_config and app_config.name != "sentry":
+    try:
+        app_config.get_model("Project")
+    except LookupError:
         return
 
     create_default_project(
@@ -134,21 +137,8 @@ def freeze_option_epoch_for_project(instance, created, app=None, **kwargs):
 
 # Anything that relies on default objects that may not exist with default
 # fields should be wrapped in handle_db_failure
-try:
-    from django.db.models.signals import post_migrate
-except ImportError:
-    pass
-else:
-    post_migrate.connect(
-        handle_db_failure(create_default_projects),
-        dispatch_uid="create_default_project",
-        weak=False,
-    )
-
-post_syncdb.connect(
-    handle_db_failure(create_default_projects),
-    dispatch_uid="create_default_project.syncdb",
-    weak=False,
+post_migrate.connect(
+    handle_db_failure(create_default_projects), dispatch_uid="create_default_project", weak=False
 )
 
 post_save.connect(
diff --git a/src/sentry/receivers/users.py b/src/sentry/receivers/users.py
index cb907327e4..164fcfa7f4 100644
--- a/src/sentry/receivers/users.py
+++ b/src/sentry/receivers/users.py
@@ -1,32 +1,28 @@
 from __future__ import absolute_import, print_function
 
 from django.db import router
-from django.db.models.signals import post_syncdb
+from django.db.models.signals import post_migrate
 
-from sentry.models import User
 
-
-def create_first_user(using=None, db=None, app=None, app_config=None, **kwargs):
-    if using is None:
-        using = db
-
-    # this is super confusing
-    if app and app.__name__ != "sentry.models":
+def create_first_user(app_config, using, interactive, **kwargs):
+    if app_config and app_config.name != "sentry":
         return
 
-    if app_config and app_config.name != "sentry":
+    try:
+        User = app_config.get_model("User")
+    except LookupError:
         return
 
-    if User.objects.exists():
+    if User.objects.filter(is_superuser=True).exists():
         return
 
     if hasattr(router, "allow_migrate"):
-        if not router.allow_migrate(db, User):
+        if not router.allow_migrate(using, User):
             return
     else:
-        if not router.allow_syncdb(db, User):
+        if not router.allow_syncdb(using, User):
             return
-    if not kwargs.get("interactive", True):
+    if not interactive:
         return
 
     import click
@@ -41,11 +37,4 @@ def create_first_user(using=None, db=None, app=None, app_config=None, **kwargs):
     call_command("sentry.runner.commands.createuser.createuser", superuser=True)
 
 
-try:
-    from django.db.models.signals import post_migrate
-except ImportError:
-    pass
-else:
-    post_migrate.connect(create_first_user, dispatch_uid="create_first_user", weak=False)
-
-post_syncdb.connect(create_first_user, dispatch_uid="create_first_user.syncdb", weak=False)
+post_migrate.connect(create_first_user, dispatch_uid="create_first_user", weak=False)
diff --git a/src/sentry/runner/commands/upgrade.py b/src/sentry/runner/commands/upgrade.py
index 9a8b98484f..13659c39f0 100644
--- a/src/sentry/runner/commands/upgrade.py
+++ b/src/sentry/runner/commands/upgrade.py
@@ -1,19 +1,19 @@
 from __future__ import absolute_import, print_function
 
 import click
-import django
 import six
 
 from django.db import connections, ProgrammingError
 from django.conf import settings
 from sentry.runner.decorators import configuration
 
-DJANGO_17 = django.VERSION[0] > 1 or (django.VERSION[0] == 1 and django.VERSION[1] >= 7)
-
 # List of migrations which we'll fake if we're coming from South
 DJANGO_MIGRATIONS = (
-    ("contenttypes", "0002_remove_content_type_name"),
     ("contenttypes", "0001_initial"),
+    # Note that we need to have ops make the `django_content_type.name` column nullable.
+    # This migration removes the column in the same migration, which will likely take
+    # sentry down.
+    ("contenttypes", "0002_remove_content_type_name"),
     ("auth", "0001_initial"),
     ("auth", "0002_alter_permission_name_max_length"),
     ("auth", "0003_alter_user_email_max_length"),
@@ -44,17 +44,14 @@ def _has_applied_django_migration(connection, app_name, migration):
 
 
 def _has_applied_south_migration(connection, app_name, migration):
+    if migration is None:
+        return True
     cursor = connection.cursor()
     try:
         cursor.execute(
             "SELECT 1 FROM south_migrationhistory WHERE app_name = %s AND migration = %s LIMIT 1",
             [app_name, migration],
         )
-    except ProgrammingError as exc:
-        if 'relation "south_migrationhistory" does not exist' in six.text_type(exc):
-            return False
-        raise
-    else:
         return bool(cursor.fetchall())
     finally:
         cursor.close()
@@ -108,30 +105,30 @@ def _migrate_from_south(verbosity):
         south_migration,
         django_app_name,
         django_migration,
+        south_migration_required,
+        south_migration_required_error,
     ) in settings.SOUTH_MIGRATION_CONVERSIONS:
         if _has_applied_south_migration(connection, south_app_name, south_migration):
             _fake_django_migration(connection, django_app_name, django_migration)
+        elif south_migration_required:
+            raise Exception(south_migration_required_error)
 
 
 def _upgrade(interactive, traceback, verbosity, repair):
     from django.core.management import call_command as dj_call_command
 
     # migrate legacy south history into new django migrations automatically
-    if DJANGO_17:
-        _migrate_from_south(verbosity)
-
-    if "south" in settings.INSTALLED_APPS or DJANGO_17:
-        dj_call_command(
-            "migrate",
-            interactive=interactive,
-            traceback=traceback,
-            verbosity=verbosity,
-            migrate=True,
-            merge=True,
-            ignore_ghost_migrations=True,
-        )
-    else:
-        dj_call_command("syncdb", interactive=interactive, traceback=traceback, verbosity=verbosity)
+    _migrate_from_south(verbosity)
+
+    dj_call_command(
+        "migrate",
+        interactive=interactive,
+        traceback=traceback,
+        verbosity=verbosity,
+        migrate=True,
+        merge=True,
+        ignore_ghost_migrations=True,
+    )
 
     if repair:
         from sentry.runner import call_command
diff --git a/src/sentry/search/south_migrations/0001_initial.py b/src/sentry/search/south_migrations/0001_initial.py
deleted file mode 100644
index 9cd0910cce..0000000000
--- a/src/sentry/search/south_migrations/0001_initial.py
+++ /dev/null
@@ -1,1152 +0,0 @@
-# -*- coding: utf-8 -*-
-import datetime
-from south.db import db
-from south.v2 import SchemaMigration
-from django.db import models
-
-
-class Migration(SchemaMigration):
-    def forwards(self, orm):
-        """
-        This migration is handled by Sentry core.
-        """
-        # Adding model 'SearchDocument'
-        # db.create_table('sentry_searchdocument', (
-        #     ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-        #     ('project', self.gf('sentry.db.models.fields.FlexibleForeignKey')(to=orm['sentry.Project'])),
-        #     ('group', self.gf('sentry.db.models.fields.FlexibleForeignKey')(to=orm['sentry.Group'])),
-        #     ('total_events', self.gf('django.db.models.fields.PositiveIntegerField')(default=1)),
-        #     ('status', self.gf('django.db.models.fields.PositiveIntegerField')(default=0)),
-        #     ('date_added', self.gf('django.db.models.fields.DateTimeField')()),
-        #     ('date_changed', self.gf('django.db.models.fields.DateTimeField')()),
-        # ))
-        # db.send_create_signal(u'search', ['SearchDocument'])
-
-        # Adding unique constraint on 'SearchDocument', fields ['project', 'group']
-        # db.create_unique('sentry_searchdocument', ['project_id', 'group_id'])
-
-        # Adding model 'SearchToken'
-        # db.create_table('sentry_searchtoken', (
-        #     ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-        #     ('document', self.gf('sentry.db.models.fields.FlexibleForeignKey')(related_name='token_set', to=orm['search.SearchDocument'])),
-        #     ('field', self.gf('django.db.models.fields.CharField')(default='text', max_length=64)),
-        #     ('token', self.gf('django.db.models.fields.CharField')(max_length=128)),
-        #     ('times_seen', self.gf('django.db.models.fields.PositiveIntegerField')(default=1)),
-        # ))
-        # db.send_create_signal(u'search', ['SearchToken'])
-
-        # # Adding unique constraint on 'SearchToken', fields ['document', 'field', 'token']
-        # db.create_unique('sentry_searchtoken', ['document_id', 'field', 'token'])
-
-    def backwards(self, orm):
-        pass
-        # Removing unique constraint on 'SearchToken', fields ['document', 'field', 'token']
-        # db.delete_unique('sentry_searchtoken', ['document_id', 'field', 'token'])
-
-        # Removing unique constraint on 'SearchDocument', fields ['project', 'group']
-        # db.delete_unique('sentry_searchdocument', ['project_id', 'group_id'])
-
-        # Deleting model 'SearchDocument'
-        # db.delete_table('sentry_searchdocument')
-
-        # Deleting model 'SearchToken'
-        # db.delete_table('sentry_searchtoken')
-
-    models = {
-        u'auth.group': {
-            'Meta': {
-                'object_name': 'Group'
-            },
-            u'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'name':
-            ('django.db.models.fields.CharField', [], {
-                'unique': 'True',
-                'max_length': '80'
-            }),
-            'permissions': (
-                'django.db.models.fields.related.ManyToManyField', [], {
-                    'to': u"orm['auth.Permission']",
-                    'symmetrical': 'False',
-                    'blank': 'True'
-                }
-            )
-        },
-        u'auth.permission': {
-            'Meta': {
-                'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')",
-                'unique_together': "((u'content_type', u'codename'),)",
-                'object_name': 'Permission'
-            },
-            'codename': ('django.db.models.fields.CharField', [], {
-                'max_length': '100'
-            }),
-            'content_type': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'to': u"orm['contenttypes.ContentType']"
-                }
-            ),
-            u'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'name': ('django.db.models.fields.CharField', [], {
-                'max_length': '50'
-            })
-        },
-        'sentry.user': {
-            'Meta': {
-                'object_name': 'User',
-                'db_table': "'auth_user'"
-            },
-            'date_joined':
-            ('django.db.models.fields.DateTimeField', [], {
-                'default': 'datetime.datetime.now'
-            }),
-            'email':
-            ('django.db.models.fields.EmailField', [], {
-                'max_length': '75',
-                'blank': 'True'
-            }),
-            'first_name':
-            ('django.db.models.fields.CharField', [], {
-                'max_length': '30',
-                'blank': 'True'
-            }),
-            'id': ('django.db.models.fields.AutoField', [], {
-                'primary_key': 'True'
-            }),
-            'is_active': ('django.db.models.fields.BooleanField', [], {
-                'default': 'True'
-            }),
-            'is_staff': ('django.db.models.fields.BooleanField', [], {
-                'default': 'False'
-            }),
-            'is_superuser': ('django.db.models.fields.BooleanField', [], {
-                'default': 'False'
-            }),
-            'last_login':
-            ('django.db.models.fields.DateTimeField', [], {
-                'default': 'datetime.datetime.now'
-            }),
-            'last_name':
-            ('django.db.models.fields.CharField', [], {
-                'max_length': '30',
-                'blank': 'True'
-            }),
-            'password': ('django.db.models.fields.CharField', [], {
-                'max_length': '128'
-            }),
-            'username':
-            ('django.db.models.fields.CharField', [], {
-                'unique': 'True',
-                'max_length': '30'
-            })
-        },
-        u'contenttypes.contenttype': {
-            'Meta': {
-                'ordering': "('name',)",
-                'unique_together': "(('app_label', 'model'),)",
-                'object_name': 'ContentType',
-                'db_table': "'django_content_type'"
-            },
-            'app_label': ('django.db.models.fields.CharField', [], {
-                'max_length': '100'
-            }),
-            u'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'model': ('django.db.models.fields.CharField', [], {
-                'max_length': '100'
-            }),
-            'name': ('django.db.models.fields.CharField', [], {
-                'max_length': '100'
-            })
-        },
-        u'sentry.accessgroup': {
-            'Meta': {
-                'unique_together': "(('team', 'name'),)",
-                'object_name': 'AccessGroup'
-            },
-            'data': ('django.db.models.fields.TextField', [], {
-                'null': 'True',
-                'blank': 'True'
-            }),
-            'date_added':
-            ('django.db.models.fields.DateTimeField', [], {
-                'default': 'datetime.datetime.now'
-            }),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'managed': ('django.db.models.fields.BooleanField', [], {
-                'default': 'False'
-            }),
-            'members': (
-                'django.db.models.fields.related.ManyToManyField', [], {
-                    'to': u"orm['sentry.User']",
-                    'symmetrical': 'False'
-                }
-            ),
-            'name': ('django.db.models.fields.CharField', [], {
-                'max_length': '64'
-            }),
-            'projects': (
-                'django.db.models.fields.related.ManyToManyField', [], {
-                    'to': u"orm['sentry.Project']",
-                    'symmetrical': 'False'
-                }
-            ),
-            'team':
-            ('sentry.db.models.fields.FlexibleForeignKey', [], {
-                'to': u"orm['sentry.Team']"
-            }),
-            'type': ('django.db.models.fields.IntegerField', [], {
-                'default': '50'
-            })
-        },
-        u'sentry.activity': {
-            'Meta': {
-                'object_name': 'Activity'
-            },
-            'data': ('django.db.models.fields.TextField', [], {
-                'null': 'True'
-            }),
-            'datetime':
-            ('django.db.models.fields.DateTimeField', [], {
-                'default': 'datetime.datetime.now'
-            }),
-            'event': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'to': u"orm['sentry.Event']",
-                    'null': 'True'
-                }
-            ),
-            'group': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'to': u"orm['sentry.Group']",
-                    'null': 'True'
-                }
-            ),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'ident':
-            ('django.db.models.fields.CharField', [], {
-                'max_length': '64',
-                'null': 'True'
-            }),
-            'project':
-            ('sentry.db.models.fields.FlexibleForeignKey', [], {
-                'to': u"orm['sentry.Project']"
-            }),
-            'type': ('django.db.models.fields.PositiveIntegerField', [], {}),
-            'user': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'to': u"orm['sentry.User']",
-                    'null': 'True'
-                }
-            )
-        },
-        u'sentry.alert': {
-            'Meta': {
-                'object_name': 'Alert'
-            },
-            'data': ('django.db.models.fields.TextField', [], {
-                'null': 'True'
-            }),
-            'datetime':
-            ('django.db.models.fields.DateTimeField', [], {
-                'default': 'datetime.datetime.now'
-            }),
-            'group': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'to': u"orm['sentry.Group']",
-                    'null': 'True'
-                }
-            ),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'message': ('django.db.models.fields.TextField', [], {}),
-            'project':
-            ('sentry.db.models.fields.FlexibleForeignKey', [], {
-                'to': u"orm['sentry.Project']"
-            }),
-            'related_groups': (
-                'django.db.models.fields.related.ManyToManyField', [], {
-                    'related_name': "'related_alerts'",
-                    'symmetrical': 'False',
-                    'through': u"orm['sentry.AlertRelatedGroup']",
-                    'to': u"orm['sentry.Group']"
-                }
-            ),
-            'status': (
-                'django.db.models.fields.PositiveIntegerField', [], {
-                    'default': '0',
-                    'db_index': 'True'
-                }
-            )
-        },
-        u'sentry.alertrelatedgroup': {
-            'Meta': {
-                'unique_together': "(('group', 'alert'),)",
-                'object_name': 'AlertRelatedGroup'
-            },
-            'alert':
-            ('sentry.db.models.fields.FlexibleForeignKey', [], {
-                'to': u"orm['sentry.Alert']"
-            }),
-            'data': ('django.db.models.fields.TextField', [], {
-                'null': 'True'
-            }),
-            'group':
-            ('sentry.db.models.fields.FlexibleForeignKey', [], {
-                'to': u"orm['sentry.Group']"
-            }),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            })
-        },
-        u'sentry.event': {
-            'Meta': {
-                'unique_together': "(('project', 'event_id'),)",
-                'object_name': 'Event',
-                'db_table': "'sentry_message'"
-            },
-            'checksum':
-            ('django.db.models.fields.CharField', [], {
-                'max_length': '32',
-                'db_index': 'True'
-            }),
-            'culprit': (
-                'django.db.models.fields.CharField', [], {
-                    'max_length': '200',
-                    'null': 'True',
-                    'db_column': "'view'",
-                    'blank': 'True'
-                }
-            ),
-            'data': ('django.db.models.fields.TextField', [], {
-                'null': 'True',
-                'blank': 'True'
-            }),
-            'datetime': (
-                'django.db.models.fields.DateTimeField', [], {
-                    'default': 'datetime.datetime.now',
-                    'db_index': 'True'
-                }
-            ),
-            'event_id': (
-                'django.db.models.fields.CharField', [], {
-                    'max_length': '32',
-                    'null': 'True',
-                    'db_column': "'message_id'"
-                }
-            ),
-            'group': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'blank': 'True',
-                    'related_name': "'event_set'",
-                    'null': 'True',
-                    'to': u"orm['sentry.Group']"
-                }
-            ),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'level': (
-                'django.db.models.fields.PositiveIntegerField', [], {
-                    'default': '40',
-                    'db_index': 'True',
-                    'blank': 'True'
-                }
-            ),
-            'logger': (
-                'django.db.models.fields.CharField', [], {
-                    'default': "'root'",
-                    'max_length': '64',
-                    'db_index': 'True',
-                    'blank': 'True'
-                }
-            ),
-            'message': ('django.db.models.fields.TextField', [], {}),
-            'num_comments':
-            ('django.db.models.fields.PositiveIntegerField', [], {
-                'default': '0',
-                'null': 'True'
-            }),
-            'platform':
-            ('django.db.models.fields.CharField', [], {
-                'max_length': '64',
-                'null': 'True'
-            }),
-            'project': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'to': u"orm['sentry.Project']",
-                    'null': 'True'
-                }
-            ),
-            'server_name': (
-                'django.db.models.fields.CharField', [], {
-                    'max_length': '128',
-                    'null': 'True',
-                    'db_index': 'True'
-                }
-            ),
-            'site': (
-                'django.db.models.fields.CharField', [], {
-                    'max_length': '128',
-                    'null': 'True',
-                    'db_index': 'True'
-                }
-            ),
-            'time_spent': ('django.db.models.fields.IntegerField', [], {
-                'null': 'True'
-            })
-        },
-        u'sentry.eventmapping': {
-            'Meta': {
-                'unique_together': "(('project', 'event_id'),)",
-                'object_name': 'EventMapping'
-            },
-            'date_added':
-            ('django.db.models.fields.DateTimeField', [], {
-                'default': 'datetime.datetime.now'
-            }),
-            'event_id': ('django.db.models.fields.CharField', [], {
-                'max_length': '32'
-            }),
-            'group':
-            ('sentry.db.models.fields.FlexibleForeignKey', [], {
-                'to': u"orm['sentry.Group']"
-            }),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'project':
-            ('sentry.db.models.fields.FlexibleForeignKey', [], {
-                'to': u"orm['sentry.Project']"
-            })
-        },
-        u'sentry.group': {
-            'Meta': {
-                'unique_together': "(('project', 'checksum'),)",
-                'object_name': 'Group',
-                'db_table': "'sentry_groupedmessage'"
-            },
-            'active_at':
-            ('django.db.models.fields.DateTimeField', [], {
-                'null': 'True',
-                'db_index': 'True'
-            }),
-            'checksum':
-            ('django.db.models.fields.CharField', [], {
-                'max_length': '32',
-                'db_index': 'True'
-            }),
-            'culprit': (
-                'django.db.models.fields.CharField', [], {
-                    'max_length': '200',
-                    'null': 'True',
-                    'db_column': "'view'",
-                    'blank': 'True'
-                }
-            ),
-            'data': ('django.db.models.fields.TextField', [], {
-                'null': 'True',
-                'blank': 'True'
-            }),
-            'first_seen': (
-                'django.db.models.fields.DateTimeField', [], {
-                    'default': 'datetime.datetime.now',
-                    'db_index': 'True'
-                }
-            ),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'is_public': (
-                'django.db.models.fields.NullBooleanField', [], {
-                    'default': 'False',
-                    'null': 'True',
-                    'blank': 'True'
-                }
-            ),
-            'last_seen': (
-                'django.db.models.fields.DateTimeField', [], {
-                    'default': 'datetime.datetime.now',
-                    'db_index': 'True'
-                }
-            ),
-            'level': (
-                'django.db.models.fields.PositiveIntegerField', [], {
-                    'default': '40',
-                    'db_index': 'True',
-                    'blank': 'True'
-                }
-            ),
-            'logger': (
-                'django.db.models.fields.CharField', [], {
-                    'default': "'root'",
-                    'max_length': '64',
-                    'db_index': 'True',
-                    'blank': 'True'
-                }
-            ),
-            'message': ('django.db.models.fields.TextField', [], {}),
-            'num_comments':
-            ('django.db.models.fields.PositiveIntegerField', [], {
-                'default': '0',
-                'null': 'True'
-            }),
-            'platform':
-            ('django.db.models.fields.CharField', [], {
-                'max_length': '64',
-                'null': 'True'
-            }),
-            'project': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'to': u"orm['sentry.Project']",
-                    'null': 'True'
-                }
-            ),
-            'resolved_at':
-            ('django.db.models.fields.DateTimeField', [], {
-                'null': 'True',
-                'db_index': 'True'
-            }),
-            'score': ('django.db.models.fields.IntegerField', [], {
-                'default': '0'
-            }),
-            'status': (
-                'django.db.models.fields.PositiveIntegerField', [], {
-                    'default': '0',
-                    'db_index': 'True'
-                }
-            ),
-            'time_spent_count': ('django.db.models.fields.IntegerField', [], {
-                'default': '0'
-            }),
-            'time_spent_total': ('django.db.models.fields.IntegerField', [], {
-                'default': '0'
-            }),
-            'times_seen': (
-                'django.db.models.fields.PositiveIntegerField', [], {
-                    'default': '1',
-                    'db_index': 'True'
-                }
-            )
-        },
-        u'sentry.groupbookmark': {
-            'Meta': {
-                'unique_together': "(('project', 'user', 'group'),)",
-                'object_name': 'GroupBookmark'
-            },
-            'group': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'related_name': "'bookmark_set'",
-                    'to': u"orm['sentry.Group']"
-                }
-            ),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'project': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'related_name': "'bookmark_set'",
-                    'to': u"orm['sentry.Project']"
-                }
-            ),
-            'user': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'related_name': "'sentry_bookmark_set'",
-                    'to': u"orm['sentry.User']"
-                }
-            )
-        },
-        u'sentry.groupcountbyminute': {
-            'Meta': {
-                'unique_together': "(('project', 'group', 'date'),)",
-                'object_name': 'GroupCountByMinute',
-                'db_table': "'sentry_messagecountbyminute'"
-            },
-            'date': ('django.db.models.fields.DateTimeField', [], {
-                'db_index': 'True'
-            }),
-            'group':
-            ('sentry.db.models.fields.FlexibleForeignKey', [], {
-                'to': u"orm['sentry.Group']"
-            }),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'project': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'to': u"orm['sentry.Project']",
-                    'null': 'True'
-                }
-            ),
-            'time_spent_count': ('django.db.models.fields.IntegerField', [], {
-                'default': '0'
-            }),
-            'time_spent_total': ('django.db.models.fields.IntegerField', [], {
-                'default': '0'
-            }),
-            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {
-                'default': '0'
-            })
-        },
-        u'sentry.groupmeta': {
-            'Meta': {
-                'unique_together': "(('group', 'key'),)",
-                'object_name': 'GroupMeta'
-            },
-            'group':
-            ('sentry.db.models.fields.FlexibleForeignKey', [], {
-                'to': u"orm['sentry.Group']"
-            }),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'key': ('django.db.models.fields.CharField', [], {
-                'max_length': '64'
-            }),
-            'value': ('django.db.models.fields.TextField', [], {})
-        },
-        u'sentry.groupseen': {
-            'Meta': {
-                'unique_together': "(('user', 'group'),)",
-                'object_name': 'GroupSeen'
-            },
-            'group':
-            ('sentry.db.models.fields.FlexibleForeignKey', [], {
-                'to': u"orm['sentry.Group']"
-            }),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'last_seen':
-            ('django.db.models.fields.DateTimeField', [], {
-                'default': 'datetime.datetime.now'
-            }),
-            'project':
-            ('sentry.db.models.fields.FlexibleForeignKey', [], {
-                'to': u"orm['sentry.Project']"
-            }),
-            'user': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'to': u"orm['sentry.User']",
-                    'db_index': 'False'
-                }
-            )
-        },
-        u'sentry.grouptag': {
-            'Meta': {
-                'unique_together': "(('project', 'key', 'value', 'group'),)",
-                'object_name': 'GroupTag',
-                'db_table': "'sentry_messagefiltervalue'"
-            },
-            'first_seen': (
-                'django.db.models.fields.DateTimeField', [], {
-                    'default': 'datetime.datetime.now',
-                    'null': 'True',
-                    'db_index': 'True'
-                }
-            ),
-            'group':
-            ('sentry.db.models.fields.FlexibleForeignKey', [], {
-                'to': u"orm['sentry.Group']"
-            }),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'key': ('django.db.models.fields.CharField', [], {
-                'max_length': '32'
-            }),
-            'last_seen': (
-                'django.db.models.fields.DateTimeField', [], {
-                    'default': 'datetime.datetime.now',
-                    'null': 'True',
-                    'db_index': 'True'
-                }
-            ),
-            'project': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'to': u"orm['sentry.Project']",
-                    'null': 'True'
-                }
-            ),
-            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {
-                'default': '0'
-            }),
-            'value': ('django.db.models.fields.CharField', [], {
-                'max_length': '200'
-            })
-        },
-        u'sentry.grouptagkey': {
-            'Meta': {
-                'unique_together': "(('project', 'group', 'key'),)",
-                'object_name': 'GroupTagKey'
-            },
-            'group':
-            ('sentry.db.models.fields.FlexibleForeignKey', [], {
-                'to': u"orm['sentry.Group']"
-            }),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'key': ('django.db.models.fields.CharField', [], {
-                'max_length': '32'
-            }),
-            'project': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'to': u"orm['sentry.Project']",
-                    'null': 'True'
-                }
-            ),
-            'values_seen': ('django.db.models.fields.PositiveIntegerField', [], {
-                'default': '0'
-            })
-        },
-        u'sentry.lostpasswordhash': {
-            'Meta': {
-                'object_name': 'LostPasswordHash'
-            },
-            'date_added':
-            ('django.db.models.fields.DateTimeField', [], {
-                'default': 'datetime.datetime.now'
-            }),
-            'hash': ('django.db.models.fields.CharField', [], {
-                'max_length': '32'
-            }),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'user': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'to': u"orm['sentry.User']",
-                    'unique': 'True'
-                }
-            )
-        },
-        u'sentry.option': {
-            'Meta': {
-                'object_name': 'Option'
-            },
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'key':
-            ('django.db.models.fields.CharField', [], {
-                'unique': 'True',
-                'max_length': '64'
-            }),
-            'value': ('picklefield.fields.PickledObjectField', [], {})
-        },
-        u'sentry.pendingteammember': {
-            'Meta': {
-                'unique_together': "(('team', 'email'),)",
-                'object_name': 'PendingTeamMember'
-            },
-            'date_added':
-            ('django.db.models.fields.DateTimeField', [], {
-                'default': 'datetime.datetime.now'
-            }),
-            'email': ('django.db.models.fields.EmailField', [], {
-                'max_length': '75'
-            }),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'team': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'related_name': "'pending_member_set'",
-                    'to': u"orm['sentry.Team']"
-                }
-            ),
-            'type': ('django.db.models.fields.IntegerField', [], {
-                'default': '50'
-            })
-        },
-        u'sentry.project': {
-            'Meta': {
-                'unique_together': "(('team', 'slug'),)",
-                'object_name': 'Project'
-            },
-            'date_added':
-            ('django.db.models.fields.DateTimeField', [], {
-                'default': 'datetime.datetime.now'
-            }),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'name': ('django.db.models.fields.CharField', [], {
-                'max_length': '200'
-            }),
-            'owner': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'related_name': "'sentry_owned_project_set'",
-                    'null': 'True',
-                    'to': u"orm['sentry.User']"
-                }
-            ),
-            'platform':
-            ('django.db.models.fields.CharField', [], {
-                'max_length': '32',
-                'null': 'True'
-            }),
-            'public': ('django.db.models.fields.BooleanField', [], {
-                'default': 'False'
-            }),
-            'slug': ('django.db.models.fields.SlugField', [], {
-                'max_length': '50',
-                'null': 'True'
-            }),
-            'status': (
-                'django.db.models.fields.PositiveIntegerField', [], {
-                    'default': '0',
-                    'db_index': 'True'
-                }
-            ),
-            'team': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'to': u"orm['sentry.Team']",
-                    'null': 'True'
-                }
-            )
-        },
-        u'sentry.projectcountbyminute': {
-            'Meta': {
-                'unique_together': "(('project', 'date'),)",
-                'object_name': 'ProjectCountByMinute'
-            },
-            'date': ('django.db.models.fields.DateTimeField', [], {}),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'project': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'to': u"orm['sentry.Project']",
-                    'null': 'True'
-                }
-            ),
-            'time_spent_count': ('django.db.models.fields.IntegerField', [], {
-                'default': '0'
-            }),
-            'time_spent_total': ('django.db.models.fields.IntegerField', [], {
-                'default': '0'
-            }),
-            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {
-                'default': '0'
-            })
-        },
-        u'sentry.projectkey': {
-            'Meta': {
-                'object_name': 'ProjectKey'
-            },
-            'date_added': (
-                'django.db.models.fields.DateTimeField', [], {
-                    'default': 'datetime.datetime.now',
-                    'null': 'True'
-                }
-            ),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'project': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'related_name': "'key_set'",
-                    'to': u"orm['sentry.Project']"
-                }
-            ),
-            'public_key': (
-                'django.db.models.fields.CharField', [], {
-                    'max_length': '32',
-                    'unique': 'True',
-                    'null': 'True'
-                }
-            ),
-            'secret_key': (
-                'django.db.models.fields.CharField', [], {
-                    'max_length': '32',
-                    'unique': 'True',
-                    'null': 'True'
-                }
-            ),
-            'user': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'to': u"orm['sentry.User']",
-                    'null': 'True'
-                }
-            ),
-            'user_added': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'related_name': "'keys_added_set'",
-                    'null': 'True',
-                    'to': u"orm['sentry.User']"
-                }
-            )
-        },
-        u'sentry.projectoption': {
-            'Meta': {
-                'unique_together': "(('project', 'key'),)",
-                'object_name': 'ProjectOption',
-                'db_table': "'sentry_projectoptions'"
-            },
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'key': ('django.db.models.fields.CharField', [], {
-                'max_length': '64'
-            }),
-            'project':
-            ('sentry.db.models.fields.FlexibleForeignKey', [], {
-                'to': u"orm['sentry.Project']"
-            }),
-            'value': ('picklefield.fields.PickledObjectField', [], {})
-        },
-        u'sentry.tagkey': {
-            'Meta': {
-                'unique_together': "(('project', 'key'),)",
-                'object_name': 'TagKey',
-                'db_table': "'sentry_filterkey'"
-            },
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'key': ('django.db.models.fields.CharField', [], {
-                'max_length': '32'
-            }),
-            'label':
-            ('django.db.models.fields.CharField', [], {
-                'max_length': '64',
-                'null': 'True'
-            }),
-            'project':
-            ('sentry.db.models.fields.FlexibleForeignKey', [], {
-                'to': u"orm['sentry.Project']"
-            }),
-            'values_seen': ('django.db.models.fields.PositiveIntegerField', [], {
-                'default': '0'
-            })
-        },
-        u'sentry.tagvalue': {
-            'Meta': {
-                'unique_together': "(('project', 'key', 'value'),)",
-                'object_name': 'TagValue',
-                'db_table': "'sentry_filtervalue'"
-            },
-            'data': ('django.db.models.fields.TextField', [], {
-                'null': 'True',
-                'blank': 'True'
-            }),
-            'first_seen': (
-                'django.db.models.fields.DateTimeField', [], {
-                    'default': 'datetime.datetime.now',
-                    'null': 'True',
-                    'db_index': 'True'
-                }
-            ),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'key': ('django.db.models.fields.CharField', [], {
-                'max_length': '32'
-            }),
-            'last_seen': (
-                'django.db.models.fields.DateTimeField', [], {
-                    'default': 'datetime.datetime.now',
-                    'null': 'True',
-                    'db_index': 'True'
-                }
-            ),
-            'project': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'to': u"orm['sentry.Project']",
-                    'null': 'True'
-                }
-            ),
-            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {
-                'default': '0'
-            }),
-            'value': ('django.db.models.fields.CharField', [], {
-                'max_length': '200'
-            })
-        },
-        u'sentry.team': {
-            'Meta': {
-                'object_name': 'Team'
-            },
-            'date_added': (
-                'django.db.models.fields.DateTimeField', [], {
-                    'default': 'datetime.datetime.now',
-                    'null': 'True'
-                }
-            ),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'members': (
-                'django.db.models.fields.related.ManyToManyField', [], {
-                    'related_name': "'team_memberships'",
-                    'symmetrical': 'False',
-                    'through': u"orm['sentry.TeamMember']",
-                    'to': u"orm['sentry.User']"
-                }
-            ),
-            'name': ('django.db.models.fields.CharField', [], {
-                'max_length': '64'
-            }),
-            'owner':
-            ('sentry.db.models.fields.FlexibleForeignKey', [], {
-                'to': u"orm['sentry.User']"
-            }),
-            'slug':
-            ('django.db.models.fields.SlugField', [], {
-                'unique': 'True',
-                'max_length': '50'
-            })
-        },
-        u'sentry.teammember': {
-            'Meta': {
-                'unique_together': "(('team', 'user'),)",
-                'object_name': 'TeamMember'
-            },
-            'date_added':
-            ('django.db.models.fields.DateTimeField', [], {
-                'default': 'datetime.datetime.now'
-            }),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'team': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'related_name': "'member_set'",
-                    'to': u"orm['sentry.Team']"
-                }
-            ),
-            'type': ('django.db.models.fields.IntegerField', [], {
-                'default': '50'
-            }),
-            'user': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'related_name': "'sentry_teammember_set'",
-                    'to': u"orm['sentry.User']"
-                }
-            )
-        },
-        u'sentry.useroption': {
-            'Meta': {
-                'unique_together': "(('user', 'project', 'key'),)",
-                'object_name': 'UserOption'
-            },
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'key': ('django.db.models.fields.CharField', [], {
-                'max_length': '64'
-            }),
-            'project': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'to': u"orm['sentry.Project']",
-                    'null': 'True'
-                }
-            ),
-            'user':
-            ('sentry.db.models.fields.FlexibleForeignKey', [], {
-                'to': u"orm['sentry.User']"
-            }),
-            'value': ('picklefield.fields.PickledObjectField', [], {})
-        },
-        u'search.searchdocument': {
-            'Meta': {
-                'unique_together': "(('project', 'group'),)",
-                'object_name': 'SearchDocument',
-                'db_table': "'sentry_searchdocument'"
-            },
-            'date_added':
-            ('django.db.models.fields.DateTimeField', [], {
-                'default': 'datetime.datetime.now'
-            }),
-            'date_changed':
-            ('django.db.models.fields.DateTimeField', [], {
-                'default': 'datetime.datetime.now'
-            }),
-            'group':
-            ('sentry.db.models.fields.FlexibleForeignKey', [], {
-                'to': u"orm['sentry.Group']"
-            }),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'project':
-            ('sentry.db.models.fields.FlexibleForeignKey', [], {
-                'to': u"orm['sentry.Project']"
-            }),
-            'status': ('django.db.models.fields.PositiveIntegerField', [], {
-                'default': '0'
-            }),
-            'total_events': ('django.db.models.fields.PositiveIntegerField', [], {
-                'default': '1'
-            })
-        },
-        u'search.searchtoken': {
-            'Meta': {
-                'unique_together': "(('document', 'field', 'token'),)",
-                'object_name': 'SearchToken',
-                'db_table': "'sentry_searchtoken'"
-            },
-            'document': (
-                'sentry.db.models.fields.FlexibleForeignKey', [], {
-                    'related_name': "'token_set'",
-                    'to': u"orm['search.SearchDocument']"
-                }
-            ),
-            'field':
-            ('django.db.models.fields.CharField', [], {
-                'default': "'text'",
-                'max_length': '64'
-            }),
-            'id':
-            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
-                'primary_key': 'True'
-            }),
-            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {
-                'default': '1'
-            }),
-            'token': ('django.db.models.fields.CharField', [], {
-                'max_length': '128'
-            })
-        },
-    }
-    complete_apps = ['sentry', 'search']
diff --git a/src/sentry/search/south_migrations/0002_auto__del_searchtoken__del_unique_searchtoken_document_field_token__de.py b/src/sentry/search/south_migrations/0002_auto__del_searchtoken__del_unique_searchtoken_document_field_token__de.py
deleted file mode 100644
index 0508a6d800..0000000000
--- a/src/sentry/search/south_migrations/0002_auto__del_searchtoken__del_unique_searchtoken_document_field_token__de.py
+++ /dev/null
@@ -1,78 +0,0 @@
-# -*- coding: utf-8 -*-
-from south.utils import datetime_utils as datetime
-from south.db import db
-from south.v2 import SchemaMigration
-from django.db import models
-
-
-class Migration(SchemaMigration):
-    def forwards(self, orm):
-        # Removing unique constraint on 'SearchDocument', fields ['project', 'group']
-        db.delete_unique('sentry_searchdocument', ['project_id', 'group_id'])
-
-        # Removing unique constraint on 'SearchToken', fields ['document', 'field', 'token']
-        db.delete_unique('sentry_searchtoken', ['document_id', 'field', 'token'])
-
-        # Deleting model 'SearchToken'
-        db.delete_table('sentry_searchtoken')
-
-        # Deleting model 'SearchDocument'
-        db.delete_table('sentry_searchdocument')
-
-    def backwards(self, orm):
-        # Adding model 'SearchToken'
-        db.create_table(
-            'sentry_searchtoken', (
-                ('times_seen', self.gf('django.db.models.fields.PositiveIntegerField')(default=1)),
-                (
-                    'field',
-                    self.gf('django.db.models.fields.CharField')(default='text', max_length=64)
-                ), ('token', self.gf('django.db.models.fields.CharField')(max_length=128)), (
-                    'document', self.gf('sentry.db.models.fields.FlexibleForeignKey')(
-                        related_name='token_set', to=orm['search.SearchDocument']
-                    )
-                ), (
-                    'id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(
-                        primary_key=True
-                    )
-                ),
-            )
-        )
-        db.send_create_signal(u'search', ['SearchToken'])
-
-        # Adding unique constraint on 'SearchToken', fields ['document', 'field', 'token']
-        db.create_unique('sentry_searchtoken', ['document_id', 'field', 'token'])
-
-        # Adding model 'SearchDocument'
-        db.create_table(
-            'sentry_searchdocument', (
-                (
-                    'project',
-                    self.gf('sentry.db.models.fields.FlexibleForeignKey')(to=orm['sentry.Project'])
-                ), ('status', self.gf('django.db.models.fields.PositiveIntegerField')(default=0)), (
-                    'total_events',
-                    self.gf('django.db.models.fields.PositiveIntegerField')(default=1)
-                ), (
-                    'group',
-                    self.gf('sentry.db.models.fields.FlexibleForeignKey')(to=orm['sentry.Group'])
-                ), (
-                    'date_changed',
-                    self.gf('django.db.models.fields.DateTimeField')()
-                ), (
-                    'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
-                ), (
-                    'id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(
-                        primary_key=True
-                    )
-                ),
-            )
-        )
-        db.send_create_signal(u'search', ['SearchDocument'])
-
-        # Adding unique constraint on 'SearchDocument', fields ['project', 'group']
-        db.create_unique('sentry_searchdocument', ['project_id', 'group_id'])
-
-    models = {}
-
-    complete_apps = ['search']
diff --git a/src/sentry/search/south_migrations/__init__.py b/src/sentry/search/south_migrations/__init__.py
deleted file mode 100644
index e69de29bb2..0000000000
diff --git a/src/sentry/tagstore/south_migrations/0001_initial.py b/src/sentry/tagstore/south_migrations/0001_initial.py
deleted file mode 100644
index 6315e23a9c..0000000000
--- a/src/sentry/tagstore/south_migrations/0001_initial.py
+++ /dev/null
@@ -1,235 +0,0 @@
-# -*- coding: utf-8 -*-
-from south.utils import datetime_utils as datetime
-from south.db import db
-from south.v2 import SchemaMigration
-from django.db import models
-
-
-class Migration(SchemaMigration):
-
-    # Flag to indicate if this migration is too risky
-    # to run online and needs to be coordinated for offline
-    is_dangerous = True
-
-    def forwards(self, orm):
-        # Adding model 'EventTag'
-        db.create_table(u'tagstore_eventtag', (
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
-            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
-            ('event_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
-            ('key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagKey'], db_column='key')),
-            ('value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagValue'], db_column='value')),
-            ('date_added', self.gf('django.db.models.fields.DateTimeField')(
-                db_index=True)),
-        ))
-        db.send_create_signal('tagstore', ['EventTag'])
-
-        # Adding unique constraint on 'EventTag', fields ['event_id', 'key', 'value']
-        db.create_unique(u'tagstore_eventtag', ['event_id', 'key', 'value'])
-
-        # Adding index on 'EventTag', fields ['project_id', 'key', 'value']
-        db.create_index(u'tagstore_eventtag', ['project_id', 'key', 'value'])
-
-        # Adding index on 'EventTag', fields ['group_id', 'key', 'value']
-        db.create_index(u'tagstore_eventtag', ['group_id', 'key', 'value'])
-
-        # Adding index on 'EventTag', fields ['environment_id', 'key', 'value']
-        db.create_index(u'tagstore_eventtag', ['environment_id', 'key', 'value'])
-
-        # Adding model 'GroupTagKey'
-        db.create_table(u'tagstore_grouptagkey', (
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
-            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagKey'], db_column='key')),
-            ('values_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-        ))
-        db.send_create_signal('tagstore', ['GroupTagKey'])
-
-        # Adding unique constraint on 'GroupTagKey', fields ['project_id',
-        # 'group_id', 'environment_id', '_key']
-        db.create_unique(
-            u'tagstore_grouptagkey', [
-                'project_id', 'group_id', 'environment_id', 'key'])
-
-        # Adding model 'GroupTagValue'
-        db.create_table(u'tagstore_grouptagvalue', (
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
-            ('times_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagKey'], db_column='key')),
-            ('_value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagValue'], db_column='value')),
-            ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
-            ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
-        ))
-        db.send_create_signal('tagstore', ['GroupTagValue'])
-
-        # Adding unique constraint on 'GroupTagValue', fields ['project_id',
-        # 'group_id', 'environment_id', '_key', '_value']
-        db.create_unique(
-            u'tagstore_grouptagvalue', [
-                'project_id', 'group_id', 'environment_id', 'key', 'value'])
-
-        # Adding index on 'GroupTagValue', fields ['project_id', '_key', '_value', 'last_seen']
-        db.create_index(u'tagstore_grouptagvalue', ['project_id', 'key', 'value', 'last_seen'])
-
-        # Adding model 'TagKey'
-        db.create_table(u'tagstore_tagkey', (
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
-            ('key', self.gf('django.db.models.fields.CharField')(max_length=32)),
-            ('values_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-            ('status', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-        ))
-        db.send_create_signal('tagstore', ['TagKey'])
-
-        # Adding unique constraint on 'TagKey', fields ['project_id', 'environment_id', 'key']
-        db.create_unique(u'tagstore_tagkey', ['project_id', 'environment_id', 'key'])
-
-        # Adding model 'TagValue'
-        db.create_table(u'tagstore_tagvalue', (
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
-            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagKey'], db_column='key')),
-            ('value', self.gf('django.db.models.fields.CharField')(max_length=200)),
-            ('data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')(null=True, blank=True)),
-            ('times_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-            ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
-            ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
-        ))
-        db.send_create_signal('tagstore', ['TagValue'])
-
-        # Adding unique constraint on 'TagValue', fields ['project_id',
-        # 'environment_id', '_key', 'value']
-        db.create_unique(u'tagstore_tagvalue', ['project_id', 'environment_id', 'key', 'value'])
-
-        # Adding index on 'TagValue', fields ['project_id', '_key', 'last_seen']
-        db.create_index(u'tagstore_tagvalue', ['project_id', 'key', 'last_seen'])
-
-    def backwards(self, orm):
-        # Removing index on 'TagValue', fields ['project_id', '_key', 'last_seen']
-        db.delete_index(u'tagstore_tagvalue', ['project_id', 'key', 'last_seen'])
-
-        # Removing unique constraint on 'TagValue', fields ['project_id',
-        # 'environment_id', '_key', 'value']
-        db.delete_unique(u'tagstore_tagvalue', ['project_id', 'environment_id', 'key', 'value'])
-
-        # Removing unique constraint on 'TagKey', fields ['project_id', 'environment_id', 'key']
-        db.delete_unique(u'tagstore_tagkey', ['project_id', 'environment_id', 'key'])
-
-        # Removing index on 'GroupTagValue', fields ['project_id', '_key', '_value', 'last_seen']
-        db.delete_index(u'tagstore_grouptagvalue', ['project_id', 'key', 'value', 'last_seen'])
-
-        # Removing unique constraint on 'GroupTagValue', fields ['project_id',
-        # 'group_id', 'environment_id', '_key', '_value']
-        db.delete_unique(
-            u'tagstore_grouptagvalue', [
-                'project_id', 'group_id', 'environment_id', 'key', 'value'])
-
-        # Removing unique constraint on 'GroupTagKey', fields ['project_id',
-        # 'group_id', 'environment_id', '_key']
-        db.delete_unique(
-            u'tagstore_grouptagkey', [
-                'project_id', 'group_id', 'environment_id', 'key'])
-
-        # Removing index on 'EventTag', fields ['environment_id', 'key', 'value']
-        db.delete_index(u'tagstore_eventtag', ['environment_id', 'key', 'value'])
-
-        # Removing index on 'EventTag', fields ['group_id', 'key', 'value']
-        db.delete_index(u'tagstore_eventtag', ['group_id', 'key', 'value'])
-
-        # Removing index on 'EventTag', fields ['project_id', 'key', 'value']
-        db.delete_index(u'tagstore_eventtag', ['project_id', 'key', 'value'])
-
-        # Removing unique constraint on 'EventTag', fields ['event_id', 'key', 'value']
-        db.delete_unique(u'tagstore_eventtag', ['event_id', 'key', 'value'])
-
-        # Deleting model 'EventTag'
-        db.delete_table(u'tagstore_eventtag')
-
-        # Deleting model 'GroupTagKey'
-        db.delete_table(u'tagstore_grouptagkey')
-
-        # Deleting model 'GroupTagValue'
-        db.delete_table(u'tagstore_grouptagvalue')
-
-        # Deleting model 'TagKey'
-        db.delete_table(u'tagstore_tagkey')
-
-        # Deleting model 'TagValue'
-        db.delete_table(u'tagstore_tagvalue')
-
-    models = {
-        'tagstore.eventtag': {
-            'Meta': {'unique_together': "(('event_id', 'key', 'value'),)", 'object_name': 'EventTag', 'index_together': "(('project_id', 'key', 'value'), ('group_id', 'key', 'value'), ('environment_id', 'key', 'value'))"},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'event_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key'"}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'value': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagValue']", 'db_column': "'value'"})
-        },
-        'tagstore.grouptagkey': {
-            'Meta': {'unique_together': "(('project_id', 'group_id', 'environment_id', '_key'),)", 'object_name': 'GroupTagKey'},
-            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key'"}),
-            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'tagstore.grouptagvalue': {
-            'Meta': {'unique_together': "(('project_id', 'group_id', 'environment_id', '_key', '_value'),)", 'object_name': 'GroupTagValue', 'index_together': "(('project_id', '_key', '_value', 'last_seen'),)"},
-            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key'"}),
-            '_value': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagValue']", 'db_column': "'value'"}),
-            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'tagstore.tagkey': {
-            'Meta': {'unique_together': "(('project_id', 'environment_id', 'key'),)", 'object_name': 'TagKey'},
-            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
-            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'tagstore.tagvalue': {
-            'Meta': {'unique_together': "(('project_id', 'environment_id', '_key', 'value'),)", 'object_name': 'TagValue', 'index_together': "(('project_id', '_key', 'last_seen'),)"},
-            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key'"}),
-            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
-            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
-            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
-        }
-    }
-
-    complete_apps = ['tagstore']
diff --git a/src/sentry/tagstore/south_migrations/0002_auto__del_tagkey__del_unique_tagkey_project_id_environment_id_key__del.py b/src/sentry/tagstore/south_migrations/0002_auto__del_tagkey__del_unique_tagkey_project_id_environment_id_key__del.py
deleted file mode 100644
index 9f8fac7371..0000000000
--- a/src/sentry/tagstore/south_migrations/0002_auto__del_tagkey__del_unique_tagkey_project_id_environment_id_key__del.py
+++ /dev/null
@@ -1,168 +0,0 @@
-# -*- coding: utf-8 -*-
-from south.utils import datetime_utils as datetime
-from south.db import db
-from south.v2 import SchemaMigration
-from django.db import models
-
-
-class Migration(SchemaMigration):
-
-    # Flag to indicate if this migration is too risky
-    # to run online and needs to be coordinated for offline
-    is_dangerous = True
-
-    def forwards(self, orm):
-        # Removing unique constraint on 'GroupTagValue', fields ['project_id',
-        # 'group_id', 'environment_id', '_key', '_value']
-        db.delete_unique(
-            u'tagstore_grouptagvalue', [
-                'project_id', 'group_id', 'environment_id', 'key', 'value'])
-
-        # Removing unique constraint on 'EventTag', fields ['event_id', 'key', 'value']
-        db.delete_unique(u'tagstore_eventtag', ['event_id', 'key', 'value'])
-
-        # Removing unique constraint on 'GroupTagKey', fields ['project_id',
-        # 'group_id', 'environment_id', '_key']
-        db.delete_unique(
-            u'tagstore_grouptagkey', [
-                'project_id', 'group_id', 'environment_id', 'key'])
-
-        # Removing unique constraint on 'TagValue', fields ['project_id',
-        # 'environment_id', '_key', 'value']
-        db.delete_unique(u'tagstore_tagvalue', ['project_id', 'environment_id', 'key', 'value'])
-
-        # Removing unique constraint on 'TagKey', fields ['project_id', 'environment_id', 'key']
-        db.delete_unique(u'tagstore_tagkey', ['project_id', 'environment_id', 'key'])
-
-        # Deleting model 'TagKey'
-        db.delete_table(u'tagstore_tagkey')
-
-        # Deleting model 'TagValue'
-        db.delete_table(u'tagstore_tagvalue')
-
-        # Deleting model 'GroupTagKey'
-        db.delete_table(u'tagstore_grouptagkey')
-
-        # Deleting model 'EventTag'
-        db.delete_table(u'tagstore_eventtag')
-
-        # Deleting model 'GroupTagValue'
-        db.delete_table(u'tagstore_grouptagvalue')
-
-    def backwards(self, orm):
-        # Adding model 'TagKey'
-        db.create_table(u'tagstore_tagkey', (
-            ('status', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
-            ('values_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-            ('key', self.gf('django.db.models.fields.CharField')(max_length=32)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-        ))
-        db.send_create_signal('tagstore', ['TagKey'])
-
-        # Adding unique constraint on 'TagKey', fields ['project_id', 'environment_id', 'key']
-        db.create_unique(u'tagstore_tagkey', ['project_id', 'environment_id', 'key'])
-
-        # Adding model 'TagValue'
-        db.create_table(u'tagstore_tagvalue', (
-            ('times_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
-            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagKey'], db_column='key')),
-            ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')(null=True, blank=True)),
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('value', self.gf('django.db.models.fields.CharField')(max_length=200)),
-            ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
-        ))
-        db.send_create_signal('tagstore', ['TagValue'])
-
-        # Adding unique constraint on 'TagValue', fields ['project_id',
-        # 'environment_id', '_key', 'value']
-        db.create_unique(u'tagstore_tagvalue', ['project_id', 'environment_id', 'key', 'value'])
-
-        # Adding model 'GroupTagKey'
-        db.create_table(u'tagstore_grouptagkey', (
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
-            ('values_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagKey'], db_column='key')),
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-        ))
-        db.send_create_signal('tagstore', ['GroupTagKey'])
-
-        # Adding unique constraint on 'GroupTagKey', fields ['project_id',
-        # 'group_id', 'environment_id', '_key']
-        db.create_unique(
-            u'tagstore_grouptagkey', [
-                'project_id', 'group_id', 'environment_id', 'key'])
-
-        # Adding model 'EventTag'
-        db.create_table(u'tagstore_eventtag', (
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
-            ('key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagKey'], db_column='key')),
-            ('event_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
-            ('date_added', self.gf('django.db.models.fields.DateTimeField')(
-                db_index=True)),
-            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagValue'], db_column='value')),
-        ))
-        db.send_create_signal('tagstore', ['EventTag'])
-
-        # Adding unique constraint on 'EventTag', fields ['event_id', 'key', 'value']
-        db.create_unique(u'tagstore_eventtag', ['event_id', 'key', 'value'])
-
-        # Adding model 'GroupTagValue'
-        db.create_table(u'tagstore_grouptagvalue', (
-            ('_value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagValue'], db_column='value')),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
-            ('times_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagKey'], db_column='key')),
-            ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
-            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
-        ))
-        db.send_create_signal('tagstore', ['GroupTagValue'])
-
-        # Adding unique constraint on 'GroupTagValue', fields ['project_id',
-        # 'group_id', 'environment_id', '_key', '_value']
-        db.create_unique(
-            u'tagstore_grouptagvalue', [
-                'project_id', 'group_id', 'environment_id', 'key', 'value'])
-
-        # Adding index on 'GroupTagValue', fields ['project_id', '_key', '_value', 'last_seen']
-        db.create_index(u'tagstore_grouptagvalue', ['project_id', 'key', 'value', 'last_seen'])
-
-        # Adding index on 'EventTag', fields ['environment_id', 'key', 'value']
-        db.create_index(u'tagstore_eventtag', ['environment_id', 'key', 'value'])
-
-        # Adding index on 'EventTag', fields ['group_id', 'key', 'value']
-        db.create_index(u'tagstore_eventtag', ['group_id', 'key', 'value'])
-
-        # Adding index on 'EventTag', fields ['project_id', 'key', 'value']
-        db.create_index(u'tagstore_eventtag', ['project_id', 'key', 'value'])
-
-        # Adding index on 'TagValue', fields ['project_id', '_key', 'last_seen']
-        db.create_index(u'tagstore_tagvalue', ['project_id', 'key', 'last_seen'])
-
-    models = {
-
-    }
-
-    complete_apps = ['tagstore']
diff --git a/src/sentry/tagstore/south_migrations/0003_auto__add_tagkey__add_unique_tagkey_project_id_environment_id_key__add.py b/src/sentry/tagstore/south_migrations/0003_auto__add_tagkey__add_unique_tagkey_project_id_environment_id_key__add.py
deleted file mode 100644
index bdb62f9de0..0000000000
--- a/src/sentry/tagstore/south_migrations/0003_auto__add_tagkey__add_unique_tagkey_project_id_environment_id_key__add.py
+++ /dev/null
@@ -1,239 +0,0 @@
-# -*- coding: utf-8 -*-
-from south.utils import datetime_utils as datetime
-from south.db import db
-from south.v2 import SchemaMigration
-from django.db import models
-
-
-class Migration(SchemaMigration):
-
-    # Flag to indicate if this migration is too risky
-    # to run online and needs to be coordinated for offline
-    is_dangerous = True
-
-    def forwards(self, orm):
-        # Adding model 'TagKey'
-        db.create_table(u'tagstore_tagkey', (
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
-            ('key', self.gf('django.db.models.fields.CharField')(max_length=32)),
-            ('values_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-            ('status', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-        ))
-        db.send_create_signal('tagstore', ['TagKey'])
-
-        # Adding unique constraint on 'TagKey', fields ['project_id', 'environment_id', 'key']
-        db.create_unique(u'tagstore_tagkey', ['project_id', 'environment_id', 'key'])
-
-        # Adding model 'GroupTagValue'
-        db.create_table(u'tagstore_grouptagvalue', (
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
-            ('times_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagKey'], db_column='key_id')),
-            ('_value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagValue'], db_column='value_id')),
-            ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
-            ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
-        ))
-        db.send_create_signal('tagstore', ['GroupTagValue'])
-
-        # Adding unique constraint on 'GroupTagValue', fields ['project_id',
-        # 'group_id', 'environment_id', '_key', '_value']
-        db.create_unique(
-            u'tagstore_grouptagvalue', [
-                'project_id', 'group_id', 'environment_id', 'key_id', 'value_id'])
-
-        # Adding index on 'GroupTagValue', fields ['project_id', '_key', '_value', 'last_seen']
-        db.create_index(
-            u'tagstore_grouptagvalue', [
-                'project_id', 'key_id', 'value_id', 'last_seen'])
-
-        # Adding model 'GroupTagKey'
-        db.create_table(u'tagstore_grouptagkey', (
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
-            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagKey'], db_column='key_id')),
-            ('values_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-        ))
-        db.send_create_signal('tagstore', ['GroupTagKey'])
-
-        # Adding unique constraint on 'GroupTagKey', fields ['project_id',
-        # 'group_id', 'environment_id', '_key']
-        db.create_unique(
-            u'tagstore_grouptagkey', [
-                'project_id', 'group_id', 'environment_id', 'key_id'])
-
-        # Adding model 'EventTag'
-        db.create_table(u'tagstore_eventtag', (
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
-            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
-            ('event_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
-            ('key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagKey'], db_column='key_id')),
-            ('value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagValue'], db_column='value_id')),
-            ('date_added', self.gf('django.db.models.fields.DateTimeField')(
-                db_index=True)),
-        ))
-        db.send_create_signal('tagstore', ['EventTag'])
-
-        # Adding unique constraint on 'EventTag', fields ['event_id', 'key', 'value']
-        db.create_unique(u'tagstore_eventtag', ['event_id', 'key_id', 'value_id'])
-
-        # Adding index on 'EventTag', fields ['project_id', 'key', 'value']
-        db.create_index(u'tagstore_eventtag', ['project_id', 'key_id', 'value_id'])
-
-        # Adding index on 'EventTag', fields ['group_id', 'key', 'value']
-        db.create_index(u'tagstore_eventtag', ['group_id', 'key_id', 'value_id'])
-
-        # Adding index on 'EventTag', fields ['environment_id', 'key', 'value']
-        db.create_index(u'tagstore_eventtag', ['environment_id', 'key_id', 'value_id'])
-
-        # Adding model 'TagValue'
-        db.create_table(u'tagstore_tagvalue', (
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
-            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagKey'], db_column='key_id')),
-            ('value', self.gf('django.db.models.fields.CharField')(max_length=200)),
-            ('data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')(null=True, blank=True)),
-            ('times_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-            ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
-            ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
-        ))
-        db.send_create_signal('tagstore', ['TagValue'])
-
-        # Adding unique constraint on 'TagValue', fields ['project_id',
-        # 'environment_id', '_key', 'value']
-        db.create_unique(u'tagstore_tagvalue', ['project_id', 'environment_id', 'key_id', 'value'])
-
-        # Adding index on 'TagValue', fields ['project_id', '_key', 'last_seen']
-        db.create_index(u'tagstore_tagvalue', ['project_id', 'key_id', 'last_seen'])
-
-    def backwards(self, orm):
-        # Removing index on 'TagValue', fields ['project_id', '_key', 'last_seen']
-        db.delete_index(u'tagstore_tagvalue', ['project_id', 'key_id', 'last_seen'])
-
-        # Removing unique constraint on 'TagValue', fields ['project_id',
-        # 'environment_id', '_key', 'value']
-        db.delete_unique(u'tagstore_tagvalue', ['project_id', 'environment_id', 'key_id', 'value'])
-
-        # Removing index on 'EventTag', fields ['environment_id', 'key', 'value']
-        db.delete_index(u'tagstore_eventtag', ['environment_id', 'key_id', 'value_id'])
-
-        # Removing index on 'EventTag', fields ['group_id', 'key', 'value']
-        db.delete_index(u'tagstore_eventtag', ['group_id', 'key_id', 'value_id'])
-
-        # Removing index on 'EventTag', fields ['project_id', 'key', 'value']
-        db.delete_index(u'tagstore_eventtag', ['project_id', 'key_id', 'value_id'])
-
-        # Removing unique constraint on 'EventTag', fields ['event_id', 'key', 'value']
-        db.delete_unique(u'tagstore_eventtag', ['event_id', 'key_id', 'value_id'])
-
-        # Removing unique constraint on 'GroupTagKey', fields ['project_id',
-        # 'group_id', 'environment_id', '_key']
-        db.delete_unique(
-            u'tagstore_grouptagkey', [
-                'project_id', 'group_id', 'environment_id', 'key_id'])
-
-        # Removing index on 'GroupTagValue', fields ['project_id', '_key', '_value', 'last_seen']
-        db.delete_index(
-            u'tagstore_grouptagvalue', [
-                'project_id', 'key_id', 'value_id', 'last_seen'])
-
-        # Removing unique constraint on 'GroupTagValue', fields ['project_id',
-        # 'group_id', 'environment_id', '_key', '_value']
-        db.delete_unique(
-            u'tagstore_grouptagvalue', [
-                'project_id', 'group_id', 'environment_id', 'key_id', 'value_id'])
-
-        # Removing unique constraint on 'TagKey', fields ['project_id', 'environment_id', 'key']
-        db.delete_unique(u'tagstore_tagkey', ['project_id', 'environment_id', 'key'])
-
-        # Deleting model 'TagKey'
-        db.delete_table(u'tagstore_tagkey')
-
-        # Deleting model 'GroupTagValue'
-        db.delete_table(u'tagstore_grouptagvalue')
-
-        # Deleting model 'GroupTagKey'
-        db.delete_table(u'tagstore_grouptagkey')
-
-        # Deleting model 'EventTag'
-        db.delete_table(u'tagstore_eventtag')
-
-        # Deleting model 'TagValue'
-        db.delete_table(u'tagstore_tagvalue')
-
-    models = {
-        'tagstore.eventtag': {
-            'Meta': {'unique_together': "(('event_id', 'key', 'value'),)", 'object_name': 'EventTag', 'index_together': "(('project_id', 'key', 'value'), ('group_id', 'key', 'value'), ('environment_id', 'key', 'value'))"},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'event_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'value': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagValue']", 'db_column': "'value_id'"})
-        },
-        'tagstore.grouptagkey': {
-            'Meta': {'unique_together': "(('project_id', 'group_id', 'environment_id', '_key'),)", 'object_name': 'GroupTagKey'},
-            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
-            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'tagstore.grouptagvalue': {
-            'Meta': {'unique_together': "(('project_id', 'group_id', 'environment_id', '_key', '_value'),)", 'object_name': 'GroupTagValue', 'index_together': "(('project_id', '_key', '_value', 'last_seen'),)"},
-            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
-            '_value': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagValue']", 'db_column': "'value_id'"}),
-            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'tagstore.tagkey': {
-            'Meta': {'unique_together': "(('project_id', 'environment_id', 'key'),)", 'object_name': 'TagKey'},
-            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
-            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'tagstore.tagvalue': {
-            'Meta': {'unique_together': "(('project_id', 'environment_id', '_key', 'value'),)", 'object_name': 'TagValue', 'index_together': "(('project_id', '_key', 'last_seen'),)"},
-            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
-            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
-            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
-            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
-        }
-    }
-
-    complete_apps = ['tagstore']
diff --git a/src/sentry/tagstore/south_migrations/0004_auto__del_tagkey__del_unique_tagkey_project_id_environment_id_key__del.py b/src/sentry/tagstore/south_migrations/0004_auto__del_tagkey__del_unique_tagkey_project_id_environment_id_key__del.py
deleted file mode 100644
index 74c7f686c4..0000000000
--- a/src/sentry/tagstore/south_migrations/0004_auto__del_tagkey__del_unique_tagkey_project_id_environment_id_key__del.py
+++ /dev/null
@@ -1,187 +0,0 @@
-# -*- coding: utf-8 -*-
-from south.utils import datetime_utils as datetime
-from south.db import db
-from south.v2 import SchemaMigration
-from django.db import models
-
-
-class Migration(SchemaMigration):
-
-    # Flag to indicate if this migration is too risky
-    # to run online and needs to be coordinated for offline
-    is_dangerous = True
-
-    def forwards(self, orm):
-        # Removing unique constraint on 'GroupTagValue', fields ['project_id',
-        # 'group_id', 'environment_id', '_key', '_value']
-        db.delete_unique(
-            u'tagstore_grouptagvalue', [
-                'project_id', 'group_id', 'environment_id', 'key_id', 'value_id'])
-
-        # Removing unique constraint on 'EventTag', fields ['event_id', 'key', 'value']
-        db.delete_unique(u'tagstore_eventtag', ['event_id', 'key_id', 'value_id'])
-
-        # Removing unique constraint on 'GroupTagKey', fields ['project_id',
-        # 'group_id', 'environment_id', '_key']
-        db.delete_unique(
-            u'tagstore_grouptagkey', [
-                'project_id', 'group_id', 'environment_id', 'key_id'])
-
-        # Removing unique constraint on 'TagValue', fields ['project_id',
-        # 'environment_id', '_key', 'value']
-        db.delete_unique(u'tagstore_tagvalue', ['project_id', 'environment_id', 'key_id', 'value'])
-
-        # Removing unique constraint on 'TagKey', fields ['project_id', 'environment_id', 'key']
-        db.delete_unique(u'tagstore_tagkey', ['project_id', 'environment_id', 'key'])
-
-        # Removing index on 'TagValue', fields ['project_id', '_key', 'last_seen']
-        db.delete_index(u'tagstore_tagvalue', ['project_id', 'key_id', 'last_seen'])
-
-        # Deleting model 'GroupTagKey'
-        db.delete_table(u'tagstore_grouptagkey')
-
-        # Removing index on 'EventTag', fields ['project_id', 'key', 'value']
-        db.delete_index(u'tagstore_eventtag', ['project_id', 'key_id', 'value_id'])
-
-        # Removing index on 'EventTag', fields ['group_id', 'key', 'value']
-        db.delete_index(u'tagstore_eventtag', ['group_id', 'key_id', 'value_id'])
-
-        # Removing index on 'EventTag', fields ['environment_id', 'key', 'value']
-        db.delete_index(u'tagstore_eventtag', ['environment_id', 'key_id', 'value_id'])
-
-        # Removing index on 'GroupTagValue', fields ['project_id', '_key', '_value', 'last_seen']
-        db.delete_index(
-            u'tagstore_grouptagvalue', [
-                'project_id', 'key_id', 'value_id', 'last_seen'])
-
-        # Deleting model 'TagKey'
-        db.delete_table(u'tagstore_tagkey')
-
-        # Deleting model 'TagValue'
-        db.delete_table(u'tagstore_tagvalue')
-
-        # Deleting model 'EventTag'
-        db.delete_table(u'tagstore_eventtag')
-
-        # Deleting model 'GroupTagValue'
-        db.delete_table(u'tagstore_grouptagvalue')
-
-    def backwards(self, orm):
-        # Adding model 'TagKey'
-        db.create_table(u'tagstore_tagkey', (
-            ('status', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
-            ('values_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-            ('key', self.gf('django.db.models.fields.CharField')(max_length=32)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-        ))
-        db.send_create_signal('tagstore', ['TagKey'])
-
-        # Adding unique constraint on 'TagKey', fields ['project_id', 'environment_id', 'key']
-        db.create_unique(u'tagstore_tagkey', ['project_id', 'environment_id', 'key'])
-
-        # Adding model 'TagValue'
-        db.create_table(u'tagstore_tagvalue', (
-            ('times_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
-            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagKey'], db_column='key_id')),
-            ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')(null=True, blank=True)),
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('value', self.gf('django.db.models.fields.CharField')(max_length=200)),
-            ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
-        ))
-        db.send_create_signal('tagstore', ['TagValue'])
-
-        # Adding unique constraint on 'TagValue', fields ['project_id',
-        # 'environment_id', '_key', 'value']
-        db.create_unique(u'tagstore_tagvalue', ['project_id', 'environment_id', 'key_id', 'value'])
-
-        # Adding model 'GroupTagKey'
-        db.create_table(u'tagstore_grouptagkey', (
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
-            ('values_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagKey'], db_column='key_id')),
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-        ))
-        db.send_create_signal('tagstore', ['GroupTagKey'])
-
-        # Adding unique constraint on 'GroupTagKey', fields ['project_id',
-        # 'group_id', 'environment_id', '_key']
-        db.create_unique(
-            u'tagstore_grouptagkey', [
-                'project_id', 'group_id', 'environment_id', 'key_id'])
-
-        # Adding model 'EventTag'
-        db.create_table(u'tagstore_eventtag', (
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
-            ('key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagKey'], db_column='key_id')),
-            ('event_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
-            ('date_added', self.gf('django.db.models.fields.DateTimeField')(
-                db_index=True)),
-            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagValue'], db_column='value_id')),
-        ))
-        db.send_create_signal('tagstore', ['EventTag'])
-
-        # Adding unique constraint on 'EventTag', fields ['event_id', 'key', 'value']
-        db.create_unique(u'tagstore_eventtag', ['event_id', 'key_id', 'value_id'])
-
-        # Adding model 'GroupTagValue'
-        db.create_table(u'tagstore_grouptagvalue', (
-            ('_value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagValue'], db_column='value_id')),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
-            ('times_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagKey'], db_column='key_id')),
-            ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
-            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
-        ))
-        db.send_create_signal('tagstore', ['GroupTagValue'])
-
-        # Adding unique constraint on 'GroupTagValue', fields ['project_id',
-        # 'group_id', 'environment_id', '_key', '_value']
-        db.create_unique(
-            u'tagstore_grouptagvalue', [
-                'project_id', 'group_id', 'environment_id', 'key_id', 'value_id'])
-
-        # Adding index on 'GroupTagValue', fields ['project_id', '_key', '_value', 'last_seen']
-        db.create_index(
-            u'tagstore_grouptagvalue', [
-                'project_id', 'key_id', 'value_id', 'last_seen'])
-
-        # Adding index on 'EventTag', fields ['environment_id', 'key', 'value']
-        db.create_index(u'tagstore_eventtag', ['environment_id', 'key_id', 'value_id'])
-
-        # Adding index on 'EventTag', fields ['group_id', 'key', 'value']
-        db.create_index(u'tagstore_eventtag', ['group_id', 'key_id', 'value_id'])
-
-        # Adding index on 'EventTag', fields ['project_id', 'key', 'value']
-        db.create_index(u'tagstore_eventtag', ['project_id', 'key_id', 'value_id'])
-
-        # Adding index on 'TagValue', fields ['project_id', '_key', 'last_seen']
-        db.create_index(u'tagstore_tagvalue', ['project_id', 'key_id', 'last_seen'])
-
-    models = {
-
-    }
-
-    complete_apps = ['tagstore']
diff --git a/src/sentry/tagstore/south_migrations/0005_auto__add_tagvalue__add_unique_tagvalue_project_id__key_value__add_ind.py b/src/sentry/tagstore/south_migrations/0005_auto__add_tagvalue__add_unique_tagvalue_project_id__key_value__add_ind.py
deleted file mode 100644
index 750167acb3..0000000000
--- a/src/sentry/tagstore/south_migrations/0005_auto__add_tagvalue__add_unique_tagvalue_project_id__key_value__add_ind.py
+++ /dev/null
@@ -1,217 +0,0 @@
-# -*- coding: utf-8 -*-
-from south.utils import datetime_utils as datetime
-from south.db import db
-from south.v2 import SchemaMigration
-from django.db import models
-
-
-class Migration(SchemaMigration):
-
-    # Flag to indicate if this migration is too risky
-    # to run online and needs to be coordinated for offline
-    is_dangerous = True
-
-    def forwards(self, orm):
-        # Adding model 'TagValue'
-        db.create_table(u'tagstore_tagvalue', (
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagKey'], db_column='key_id')),
-            ('value', self.gf('django.db.models.fields.CharField')(max_length=200)),
-            ('data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')(null=True, blank=True)),
-            ('times_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-            ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
-            ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
-        ))
-        db.send_create_signal('tagstore', ['TagValue'])
-
-        # Adding unique constraint on 'TagValue', fields ['project_id', '_key', 'value']
-        db.create_unique(u'tagstore_tagvalue', ['project_id', 'key_id', 'value'])
-
-        # Adding index on 'TagValue', fields ['project_id', '_key', 'last_seen']
-        db.create_index(u'tagstore_tagvalue', ['project_id', 'key_id', 'last_seen'])
-
-        # Adding model 'TagKey'
-        db.create_table(u'tagstore_tagkey', (
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('environment_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
-            ('key', self.gf('django.db.models.fields.CharField')(max_length=32)),
-            ('values_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-            ('status', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-        ))
-        db.send_create_signal('tagstore', ['TagKey'])
-
-        # Adding unique constraint on 'TagKey', fields ['project_id', 'environment_id', 'key']
-        db.create_unique(u'tagstore_tagkey', ['project_id', 'environment_id', 'key'])
-
-        # Adding model 'GroupTagKey'
-        db.create_table(u'tagstore_grouptagkey', (
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagKey'], db_column='key_id')),
-            ('values_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-        ))
-        db.send_create_signal('tagstore', ['GroupTagKey'])
-
-        # Adding unique constraint on 'GroupTagKey', fields ['project_id', 'group_id', '_key']
-        db.create_unique(u'tagstore_grouptagkey', ['project_id', 'group_id', 'key_id'])
-
-        # Adding model 'EventTag'
-        db.create_table(u'tagstore_eventtag', (
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
-            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
-            ('event_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
-            ('key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagKey'], db_column='key_id')),
-            ('value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagValue'], db_column='value_id')),
-            ('date_added', self.gf('django.db.models.fields.DateTimeField')(
-                db_index=True)),
-        ))
-        db.send_create_signal('tagstore', ['EventTag'])
-
-        # Adding unique constraint on 'EventTag', fields ['event_id', 'key', 'value']
-        db.create_unique(u'tagstore_eventtag', ['event_id', 'key_id', 'value_id'])
-
-        # Adding index on 'EventTag', fields ['project_id', 'key', 'value']
-        db.create_index(u'tagstore_eventtag', ['project_id', 'key_id', 'value_id'])
-
-        # Adding index on 'EventTag', fields ['group_id', 'key', 'value']
-        db.create_index(u'tagstore_eventtag', ['group_id', 'key_id', 'value_id'])
-
-        # Adding model 'GroupTagValue'
-        db.create_table(u'tagstore_grouptagvalue', (
-            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
-            ('times_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-            ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagKey'], db_column='key_id')),
-            ('_value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                to=orm['tagstore.TagValue'], db_column='value_id')),
-            ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
-            ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
-        ))
-        db.send_create_signal('tagstore', ['GroupTagValue'])
-
-        # Adding unique constraint on 'GroupTagValue', fields ['project_id',
-        # 'group_id', '_key', '_value']
-        db.create_unique(
-            u'tagstore_grouptagvalue', [
-                'project_id', 'group_id', 'key_id', 'value_id'])
-
-        # Adding index on 'GroupTagValue', fields ['project_id', '_key', '_value', 'last_seen']
-        db.create_index(
-            u'tagstore_grouptagvalue', [
-                'project_id', 'key_id', 'value_id', 'last_seen'])
-
-    def backwards(self, orm):
-        # Removing index on 'GroupTagValue', fields ['project_id', '_key', '_value', 'last_seen']
-        db.delete_index(
-            u'tagstore_grouptagvalue', [
-                'project_id', 'key_id', 'value_id', 'last_seen'])
-
-        # Removing unique constraint on 'GroupTagValue', fields ['project_id',
-        # 'group_id', '_key', '_value']
-        db.delete_unique(
-            u'tagstore_grouptagvalue', [
-                'project_id', 'group_id', 'key_id', 'value_id'])
-
-        # Removing index on 'EventTag', fields ['group_id', 'key', 'value']
-        db.delete_index(u'tagstore_eventtag', ['group_id', 'key_id', 'value_id'])
-
-        # Removing index on 'EventTag', fields ['project_id', 'key', 'value']
-        db.delete_index(u'tagstore_eventtag', ['project_id', 'key_id', 'value_id'])
-
-        # Removing unique constraint on 'EventTag', fields ['event_id', 'key', 'value']
-        db.delete_unique(u'tagstore_eventtag', ['event_id', 'key_id', 'value_id'])
-
-        # Removing unique constraint on 'GroupTagKey', fields ['project_id', 'group_id', '_key']
-        db.delete_unique(u'tagstore_grouptagkey', ['project_id', 'group_id', 'key_id'])
-
-        # Removing unique constraint on 'TagKey', fields ['project_id', 'environment_id', 'key']
-        db.delete_unique(u'tagstore_tagkey', ['project_id', 'environment_id', 'key'])
-
-        # Removing index on 'TagValue', fields ['project_id', '_key', 'last_seen']
-        db.delete_index(u'tagstore_tagvalue', ['project_id', 'key_id', 'last_seen'])
-
-        # Removing unique constraint on 'TagValue', fields ['project_id', '_key', 'value']
-        db.delete_unique(u'tagstore_tagvalue', ['project_id', 'key_id', 'value'])
-
-        # Deleting model 'TagValue'
-        db.delete_table(u'tagstore_tagvalue')
-
-        # Deleting model 'TagKey'
-        db.delete_table(u'tagstore_tagkey')
-
-        # Deleting model 'GroupTagKey'
-        db.delete_table(u'tagstore_grouptagkey')
-
-        # Deleting model 'EventTag'
-        db.delete_table(u'tagstore_eventtag')
-
-        # Deleting model 'GroupTagValue'
-        db.delete_table(u'tagstore_grouptagvalue')
-
-    models = {
-        'tagstore.eventtag': {
-            'Meta': {'unique_together': "(('event_id', 'key', 'value'),)", 'object_name': 'EventTag', 'index_together': "(('project_id', 'key', 'value'), ('group_id', 'key', 'value'))"},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'event_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'value': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagValue']", 'db_column': "'value_id'"})
-        },
-        'tagstore.grouptagkey': {
-            'Meta': {'unique_together': "(('project_id', 'group_id', '_key'),)", 'object_name': 'GroupTagKey'},
-            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'tagstore.grouptagvalue': {
-            'Meta': {'unique_together': "(('project_id', 'group_id', '_key', '_value'),)", 'object_name': 'GroupTagValue', 'index_together': "(('project_id', '_key', '_value', 'last_seen'),)"},
-            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
-            '_value': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagValue']", 'db_column': "'value_id'"}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'tagstore.tagkey': {
-            'Meta': {'unique_together': "(('project_id', 'environment_id', 'key'),)", 'object_name': 'TagKey'},
-            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
-            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'tagstore.tagvalue': {
-            'Meta': {'unique_together': "(('project_id', '_key', 'value'),)", 'object_name': 'TagValue', 'index_together': "(('project_id', '_key', 'last_seen'),)"},
-            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
-            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
-            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
-        }
-    }
-
-    complete_apps = ['tagstore']
diff --git a/src/sentry/tagstore/south_migrations/0006_auto__del_unique_eventtag_event_id_key_value__add_unique_eventtag_proj.py b/src/sentry/tagstore/south_migrations/0006_auto__del_unique_eventtag_event_id_key_value__add_unique_eventtag_proj.py
deleted file mode 100644
index f63645fdc5..0000000000
--- a/src/sentry/tagstore/south_migrations/0006_auto__del_unique_eventtag_event_id_key_value__add_unique_eventtag_proj.py
+++ /dev/null
@@ -1,81 +0,0 @@
-# -*- coding: utf-8 -*-
-from south.utils import datetime_utils as datetime
-from south.db import db
-from south.v2 import SchemaMigration
-from django.db import models
-
-
-class Migration(SchemaMigration):
-
-    # Flag to indicate if this migration is too risky
-    # to run online and needs to be coordinated for offline
-    is_dangerous = True
-
-    def forwards(self, orm):
-        # Removing unique constraint on 'EventTag', fields ['event_id', 'key', 'value']
-        db.delete_unique(u'tagstore_eventtag', ['event_id', 'key_id', 'value_id'])
-
-        # Adding unique constraint on 'EventTag', fields ['project_id', 'event_id', 'key', 'value']
-        db.create_unique(u'tagstore_eventtag', ['project_id', 'event_id', 'key_id', 'value_id'])
-
-    def backwards(self, orm):
-        # Removing unique constraint on 'EventTag', fields ['project_id',
-        # 'event_id', 'key', 'value']
-        db.delete_unique(u'tagstore_eventtag', ['project_id', 'event_id', 'key_id', 'value_id'])
-
-        # Adding unique constraint on 'EventTag', fields ['event_id', 'key', 'value']
-        db.create_unique(u'tagstore_eventtag', ['event_id', 'key_id', 'value_id'])
-
-    models = {
-        'tagstore.eventtag': {
-            'Meta': {'unique_together': "(('project_id', 'event_id', 'key', 'value'),)", 'object_name': 'EventTag', 'index_together': "(('project_id', 'key', 'value'), ('group_id', 'key', 'value'))"},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'event_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'value': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagValue']", 'db_column': "'value_id'"})
-        },
-        'tagstore.grouptagkey': {
-            'Meta': {'unique_together': "(('project_id', 'group_id', '_key'),)", 'object_name': 'GroupTagKey'},
-            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'tagstore.grouptagvalue': {
-            'Meta': {'unique_together': "(('project_id', 'group_id', '_key', '_value'),)", 'object_name': 'GroupTagValue', 'index_together': "(('project_id', '_key', '_value', 'last_seen'),)"},
-            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
-            '_value': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagValue']", 'db_column': "'value_id'"}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'tagstore.tagkey': {
-            'Meta': {'unique_together': "(('project_id', 'environment_id', 'key'),)", 'object_name': 'TagKey'},
-            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
-            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'tagstore.tagvalue': {
-            'Meta': {'unique_together': "(('project_id', '_key', 'value'),)", 'object_name': 'TagValue', 'index_together': "(('project_id', '_key', 'last_seen'),)"},
-            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
-            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
-            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
-        }
-    }
-
-    complete_apps = ['tagstore']
diff --git a/src/sentry/tagstore/south_migrations/0007_auto__chg_field_tagkey_environment_id__chg_field_tagkey_project_id__ch.py b/src/sentry/tagstore/south_migrations/0007_auto__chg_field_tagkey_environment_id__chg_field_tagkey_project_id__ch.py
deleted file mode 100644
index a80949620f..0000000000
--- a/src/sentry/tagstore/south_migrations/0007_auto__chg_field_tagkey_environment_id__chg_field_tagkey_project_id__ch.py
+++ /dev/null
@@ -1,150 +0,0 @@
-# -*- coding: utf-8 -*-
-from south.utils import datetime_utils as datetime
-from south.db import db
-from south.v2 import SchemaMigration
-from django.db import models
-
-
-class Migration(SchemaMigration):
-
-    # Flag to indicate if this migration is too risky
-    # to run online and needs to be coordinated for offline
-    is_dangerous = True
-
-    def forwards(self, orm):
-
-        # Changing field 'TagKey.environment_id'
-        db.alter_column(u'tagstore_tagkey', 'environment_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedBigIntegerField')(null=True))
-
-        # Changing field 'TagKey.project_id'
-        db.alter_column(u'tagstore_tagkey', 'project_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedBigIntegerField')())
-
-        # Changing field 'TagValue.project_id'
-        db.alter_column(u'tagstore_tagvalue', 'project_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedBigIntegerField')())
-
-        # Changing field 'GroupTagKey.project_id'
-        db.alter_column(u'tagstore_grouptagkey', 'project_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedBigIntegerField')())
-
-        # Changing field 'GroupTagKey.group_id'
-        db.alter_column(u'tagstore_grouptagkey', 'group_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedBigIntegerField')())
-
-        # Changing field 'EventTag.project_id'
-        db.alter_column(u'tagstore_eventtag', 'project_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedBigIntegerField')())
-
-        # Changing field 'EventTag.event_id'
-        db.alter_column(u'tagstore_eventtag', 'event_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedBigIntegerField')())
-
-        # Changing field 'EventTag.group_id'
-        db.alter_column(u'tagstore_eventtag', 'group_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedBigIntegerField')())
-
-        # Changing field 'GroupTagValue.group_id'
-        db.alter_column(u'tagstore_grouptagvalue', 'group_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedBigIntegerField')())
-
-        # Changing field 'GroupTagValue.project_id'
-        db.alter_column(u'tagstore_grouptagvalue', 'project_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedBigIntegerField')())
-
-    def backwards(self, orm):
-
-        # Changing field 'TagKey.environment_id'
-        db.alter_column(u'tagstore_tagkey', 'environment_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True))
-
-        # Changing field 'TagKey.project_id'
-        db.alter_column(u'tagstore_tagkey', 'project_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedPositiveIntegerField')())
-
-        # Changing field 'TagValue.project_id'
-        db.alter_column(u'tagstore_tagvalue', 'project_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedPositiveIntegerField')())
-
-        # Changing field 'GroupTagKey.project_id'
-        db.alter_column(u'tagstore_grouptagkey', 'project_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedPositiveIntegerField')())
-
-        # Changing field 'GroupTagKey.group_id'
-        db.alter_column(u'tagstore_grouptagkey', 'group_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedPositiveIntegerField')())
-
-        # Changing field 'EventTag.project_id'
-        db.alter_column(u'tagstore_eventtag', 'project_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedPositiveIntegerField')())
-
-        # Changing field 'EventTag.event_id'
-        db.alter_column(u'tagstore_eventtag', 'event_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedPositiveIntegerField')())
-
-        # Changing field 'EventTag.group_id'
-        db.alter_column(u'tagstore_eventtag', 'group_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedPositiveIntegerField')())
-
-        # Changing field 'GroupTagValue.group_id'
-        db.alter_column(u'tagstore_grouptagvalue', 'group_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedPositiveIntegerField')())
-
-        # Changing field 'GroupTagValue.project_id'
-        db.alter_column(u'tagstore_grouptagvalue', 'project_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedPositiveIntegerField')())
-
-    models = {
-        'tagstore.eventtag': {
-            'Meta': {'unique_together': "(('project_id', 'event_id', 'key', 'value'),)", 'object_name': 'EventTag', 'index_together': "(('project_id', 'key', 'value'), ('group_id', 'key', 'value'))"},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'event_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
-            'value': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagValue']", 'db_column': "'value_id'"})
-        },
-        'tagstore.grouptagkey': {
-            'Meta': {'unique_together': "(('project_id', 'group_id', '_key'),)", 'object_name': 'GroupTagKey'},
-            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
-            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'tagstore.grouptagvalue': {
-            'Meta': {'unique_together': "(('project_id', 'group_id', '_key', '_value'),)", 'object_name': 'GroupTagValue', 'index_together': "(('project_id', '_key', '_value', 'last_seen'),)"},
-            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
-            '_value': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagValue']", 'db_column': "'value_id'"}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
-            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'tagstore.tagkey': {
-            'Meta': {'unique_together': "(('project_id', 'environment_id', 'key'),)", 'object_name': 'TagKey'},
-            'environment_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
-            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
-            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'tagstore.tagvalue': {
-            'Meta': {'unique_together': "(('project_id', '_key', 'value'),)", 'object_name': 'TagValue', 'index_together': "(('project_id', '_key', 'last_seen'),)"},
-            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
-            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
-            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
-            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
-        }
-    }
-
-    complete_apps = ['tagstore']
diff --git a/src/sentry/tagstore/south_migrations/0008_auto__chg_field_tagkey_environment_id.py b/src/sentry/tagstore/south_migrations/0008_auto__chg_field_tagkey_environment_id.py
deleted file mode 100644
index 09dee2aea1..0000000000
--- a/src/sentry/tagstore/south_migrations/0008_auto__chg_field_tagkey_environment_id.py
+++ /dev/null
@@ -1,78 +0,0 @@
-# -*- coding: utf-8 -*-
-from south.utils import datetime_utils as datetime
-from south.db import db
-from south.v2 import SchemaMigration
-from django.db import models
-
-
-class Migration(SchemaMigration):
-
-    # Flag to indicate if this migration is too risky
-    # to run online and needs to be coordinated for offline
-    is_dangerous = True
-
-    def forwards(self, orm):
-
-        # Changing field 'TagKey.environment_id'
-        db.alter_column(u'tagstore_tagkey', 'environment_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedBigIntegerField')(default=0))
-
-    def backwards(self, orm):
-
-        # Changing field 'TagKey.environment_id'
-        db.alter_column(u'tagstore_tagkey', 'environment_id', self.gf(
-            'sentry.db.models.fields.bounded.BoundedBigIntegerField')(null=True))
-
-    models = {
-        'tagstore.eventtag': {
-            'Meta': {'unique_together': "(('project_id', 'event_id', 'key', 'value'),)", 'object_name': 'EventTag', 'index_together': "(('project_id', 'key', 'value'), ('group_id', 'key', 'value'))"},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'event_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
-            'value': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagValue']", 'db_column': "'value_id'"})
-        },
-        'tagstore.grouptagkey': {
-            'Meta': {'unique_together': "(('project_id', 'group_id', '_key'),)", 'object_name': 'GroupTagKey'},
-            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
-            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'tagstore.grouptagvalue': {
-            'Meta': {'unique_together': "(('project_id', 'group_id', '_key', '_value'),)", 'object_name': 'GroupTagValue', 'index_together': "(('project_id', '_key', '_value', 'last_seen'),)"},
-            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
-            '_value': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagValue']", 'db_column': "'value_id'"}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
-            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'tagstore.tagkey': {
-            'Meta': {'unique_together': "(('project_id', 'environment_id', 'key'),)", 'object_name': 'TagKey'},
-            'environment_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
-            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
-            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'tagstore.tagvalue': {
-            'Meta': {'unique_together': "(('project_id', '_key', 'value'),)", 'object_name': 'TagValue', 'index_together': "(('project_id', '_key', 'last_seen'),)"},
-            '_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['tagstore.TagKey']", 'db_column': "'key_id'"}),
-            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
-            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
-            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
-        }
-    }
-
-    complete_apps = ['tagstore']
diff --git a/src/sentry/tagstore/south_migrations/__init__.py b/src/sentry/tagstore/south_migrations/__init__.py
deleted file mode 100644
index e69de29bb2..0000000000
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index 8742a25c5c..816c564b10 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -127,8 +127,10 @@ def pytest_configure(config):
     patcher = mock.patch("socket.getfqdn", return_value="localhost")
     patcher.start()
 
-    if not settings.SOUTH_TESTS_MIGRATE:
-        settings.INSTALLED_APPS = tuple(i for i in settings.INSTALLED_APPS if i != "south")
+    if not settings.MIGRATIONS_TEST_MIGRATE:
+        # TODO: In Django 1.9 the value can be set to `None` rather than a nonexistent
+        # module.
+        settings.MIGRATION_MODULES["sentry"] = "sentry.migrations_not_used_in_tests"
 
     from sentry.runner.initializer import (
         bind_cache_to_option_store,
diff --git a/tests/sentry/api/serializers/rest_framework/test_base.py b/tests/sentry/api/serializers/rest_framework/test_base.py
index bc58aef0d4..6d0a891d43 100644
--- a/tests/sentry/api/serializers/rest_framework/test_base.py
+++ b/tests/sentry/api/serializers/rest_framework/test_base.py
@@ -1,31 +1,27 @@
 from __future__ import absolute_import
 
+from django.contrib.contenttypes.models import ContentType
 from django.test import TestCase
-from django.db import models
 
 from sentry.api.serializers.rest_framework.base import CamelSnakeModelSerializer
 
 
-class SampleModel(models.Model):
-    camel_case = models.IntegerField()
-
-    class Meta:
-        app_label = "sentry"
-
-
-class SampleSerializer(CamelSnakeModelSerializer):
+class ContentTypeSerializer(CamelSnakeModelSerializer):
     class Meta:
-        model = SampleModel
-        fields = ["camel_case"]
+        model = ContentType
+        fields = ["app_label", "model"]
 
 
 class CamelSnakeModelSerializerTest(TestCase):
     def test_simple(self):
-        serializer = SampleSerializer(data={"camelCase": 1})
+        serializer = ContentTypeSerializer(data={"appLabel": "hello", "model": "Something"})
         assert serializer.is_valid()
-        assert serializer.data == {"camel_case": 1}
+        assert serializer.data == {"model": u"Something", "app_label": u"hello"}
 
     def test_error(self):
-        serializer = SampleSerializer(data={"camelCase": "hi"})
+        serializer = ContentTypeSerializer(data={"appLabel": None})
         assert not serializer.is_valid()
-        assert serializer.errors == {"camelCase": ["A valid integer is required."]}
+        assert serializer.errors == {
+            "appLabel": [u"This field may not be null."],
+            "model": [u"This field is required."],
+        }
diff --git a/tests/sentry/db/models/fields/test_jsonfield.py b/tests/sentry/db/models/fields/test_jsonfield.py
index d2fef90145..2911084de2 100644
--- a/tests/sentry/db/models/fields/test_jsonfield.py
+++ b/tests/sentry/db/models/fields/test_jsonfield.py
@@ -30,8 +30,12 @@ class BlankJSONFieldTestModel(models.Model):
         app_label = "sentry"
 
 
+def default():
+    return {"x": 2}
+
+
 class CallableDefaultModel(models.Model):
-    json = JSONField(default=lambda: {"x": 2})
+    json = JSONField(default=default)
 
     class Meta:
         app_label = "sentry"
diff --git a/tests/sentry/receivers/test_core.py b/tests/sentry/receivers/test_core.py
index c94d6a827b..65e49136db 100644
--- a/tests/sentry/receivers/test_core.py
+++ b/tests/sentry/receivers/test_core.py
@@ -2,6 +2,7 @@
 
 from __future__ import absolute_import
 
+from django.apps import apps
 from django.conf import settings
 
 from sentry.models import Organization, Project, ProjectKey, Team, User
@@ -15,9 +16,9 @@ class CreateDefaultProjectsTest(TestCase):
         Organization.objects.all().delete()
         Team.objects.filter(slug="sentry").delete()
         Project.objects.filter(id=settings.SENTRY_PROJECT).delete()
+        config = apps.get_app_config("sentry")
 
-        create_default_projects(created_models=[Project])
-
+        create_default_projects(config)
         project = Project.objects.get(id=settings.SENTRY_PROJECT)
         assert project.public is False
         assert project.name == "Internal"
@@ -30,14 +31,15 @@ class CreateDefaultProjectsTest(TestCase):
         assert pk.roles.store
 
         # ensure that we dont hit an error here
-        create_default_projects(created_models=[Project])
+        create_default_projects(config)
 
     def test_without_user(self):
         User.objects.filter(is_superuser=True).delete()
         Team.objects.filter(slug="sentry").delete()
         Project.objects.filter(id=settings.SENTRY_PROJECT).delete()
+        config = apps.get_app_config("sentry")
 
-        create_default_projects(created_models=[Project])
+        create_default_projects(config)
 
         project = Project.objects.get(id=settings.SENTRY_PROJECT)
         assert project.public is False
@@ -51,4 +53,4 @@ class CreateDefaultProjectsTest(TestCase):
         assert pk.roles.store
 
         # ensure that we dont hit an error here
-        create_default_projects(created_models=[Project])
+        create_default_projects(config)
