commit e23184bc6cfb5737ade1649a6ad58bf99dcbc400
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jul 24 15:52:10 2015 +0200

    Allow event frequency conditions of "more than zero"
    
    Fixes GH-1619

diff --git a/src/sentry/rules/conditions/event_frequency.py b/src/sentry/rules/conditions/event_frequency.py
index 997d7df78f..65a08edacc 100644
--- a/src/sentry/rules/conditions/event_frequency.py
+++ b/src/sentry/rules/conditions/event_frequency.py
@@ -56,7 +56,7 @@ class EventFrequencyCondition(EventCondition):
         except (TypeError, ValueError):
             return False
 
-        if not (interval and value):
+        if not interval:
             return False
 
         now = timezone.now()
diff --git a/tests/sentry/rules/conditions/test_event_frequency.py b/tests/sentry/rules/conditions/test_event_frequency.py
index 97922bfb38..441c105182 100644
--- a/tests/sentry/rules/conditions/test_event_frequency.py
+++ b/tests/sentry/rules/conditions/test_event_frequency.py
@@ -62,3 +62,21 @@ class EventFrequencyConditionTest(RuleTestCase):
         self.assertPasses(rule, event)
 
         self.assertDoesNotPass(rule, event, rule_last_active=timezone.now())
+
+    def test_more_than_zero(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'interval': Interval.ONE_MINUTE,
+            'value': '0',
+        })
+        self.assertDoesNotPass(rule, event)
+
+        tsdb.incr(tsdb.models.group, event.group_id, count=1)
+
+        rule.clear_cache(event)
+
+        rule = self.get_rule({
+            'interval': Interval.ONE_MINUTE,
+            'value': '0',
+        })
+        self.assertPasses(rule, event)
