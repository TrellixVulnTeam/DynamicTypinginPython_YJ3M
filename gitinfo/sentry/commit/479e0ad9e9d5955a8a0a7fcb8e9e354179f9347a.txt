commit 479e0ad9e9d5955a8a0a7fcb8e9e354179f9347a
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Feb 6 10:31:30 2018 -0800

    feat(ui): Fix Projects breadcrumb in new settings (#7143)

diff --git a/src/sentry/static/sentry/app/utils/withProjects.jsx b/src/sentry/static/sentry/app/utils/withProjects.jsx
new file mode 100644
index 0000000000..4851f624c1
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/withProjects.jsx
@@ -0,0 +1,35 @@
+import React from 'react';
+import createReactClass from 'create-react-class';
+import Reflux from 'reflux';
+
+import ProjectsStore from '../stores/projectsStore';
+import SentryTypes from '../proptypes';
+
+/**
+ * Higher order component that uses ProjectsStore and provides a list of projects
+ */
+const withProjects = WrappedComponent =>
+  createReactClass({
+    displayName: 'withProjects',
+    propTypes: {
+      organization: SentryTypes.Organization,
+      project: SentryTypes.Project,
+    },
+    mixins: [Reflux.listenTo(ProjectsStore, 'onProjectUpdate')],
+    getInitialState() {
+      return {
+        projects: ProjectsStore.getAll(),
+      };
+    },
+
+    onProjectUpdate() {
+      this.setState({
+        projects: ProjectsStore.getAll(),
+      });
+    },
+    render() {
+      return <WrappedComponent {...this.props} projects={this.state.projects} />;
+    },
+  });
+
+export default withProjects;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx
index e3040bb44a..afcafe4dcd 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx
@@ -12,6 +12,7 @@ import SettingsBreadcrumbDropdown from './settingsBreadcrumbDropdown';
 import recreateRoute from '../../../utils/recreateRoute';
 import replaceRouterParams from '../../../utils/replaceRouterParams';
 import withLatestContext from '../../../utils/withLatestContext';
+import withProjects from '../../../utils/withProjects';
 
 const Breadcrumbs = styled.div`
   display: flex;
@@ -53,68 +54,65 @@ const ProjectName = styled.div`
 
 // `organizationDetails` to differeniate from the organization that comes from `OrganizationsStore` which only has
 // a fraction of an org's properties
-const ProjectCrumb = withLatestContext(
-  ({
-    team,
-    organization: latestOrganization,
-    project: latestProject,
-    params,
-    routes,
-    route,
-    ...props
-  }) => {
-    if (!latestOrganization) return null;
-
-    let {teams} = latestOrganization;
-    let teamFromOrg = (teams && teams.find(({slug}) => slug === team.slug)) || {};
-    let {projects} = teamFromOrg;
-
-    if (!projects) return null;
-
-    let hasMenu = projects && projects.length > 1;
+const ProjectCrumb = withProjects(
+  withLatestContext(
+    ({
+      organization: latestOrganization,
+      project: latestProject,
+      projects,
+      params,
+      routes,
+      route,
+      ...props
+    }) => {
+      if (!latestOrganization) return null;
+      if (!projects) return null;
+
+      let hasMenu = projects && projects.length > 1;
 
-    return (
-      <SettingsBreadcrumbDropdown
-        hasMenu={hasMenu}
-        route={route}
-        name={
-          <ProjectName>
-            {!latestProject ? (
-              <LoadingIndicator mini />
-            ) : (
-              <div>
-                <StyledLink
-                  to={replaceRouterParams(
-                    '/settings/organization/:orgId/project/:projectId/',
-                    {
-                      orgId: latestOrganization.slug,
-                      projectId: latestProject.slug,
-                    }
-                  )}
-                >
-                  {`${teamFromOrg.name} / ${latestProject.name}`}
-                </StyledLink>
-              </div>
-            )}
-          </ProjectName>
-        }
-        {...props}
-      >
-        {projects.map(project => (
-          <MenuItem
-            to={recreateRoute(route, {
-              routes,
-              params: {...params, projectId: project.slug},
-            })}
-            active={project.slug === params.projectId}
-            key={project.slug}
-          >
-            {project.name}
-          </MenuItem>
-        ))}
-      </SettingsBreadcrumbDropdown>
-    );
-  }
+      return (
+        <SettingsBreadcrumbDropdown
+          hasMenu={hasMenu}
+          route={route}
+          name={
+            <ProjectName>
+              {!latestProject ? (
+                <LoadingIndicator mini />
+              ) : (
+                <div>
+                  <StyledLink
+                    to={replaceRouterParams(
+                      '/settings/organization/:orgId/project/:projectId/',
+                      {
+                        orgId: latestOrganization.slug,
+                        projectId: latestProject.slug,
+                      }
+                    )}
+                  >
+                    {`${latestProject.name}`}
+                  </StyledLink>
+                </div>
+              )}
+            </ProjectName>
+          }
+          {...props}
+        >
+          {projects.map(project => (
+            <MenuItem
+              to={recreateRoute(route, {
+                routes,
+                params: {...params, projectId: project.slug},
+              })}
+              active={project.slug === params.projectId}
+              key={project.slug}
+            >
+              {project.name}
+            </MenuItem>
+          ))}
+        </SettingsBreadcrumbDropdown>
+      );
+    }
+  )
 );
 
 ProjectCrumb.displayName = 'ProjectCrumb';
diff --git a/tests/js/spec/utils/withProjects.spec.jsx b/tests/js/spec/utils/withProjects.spec.jsx
new file mode 100644
index 0000000000..60e5a89f2d
--- /dev/null
+++ b/tests/js/spec/utils/withProjects.spec.jsx
@@ -0,0 +1,28 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import ProjectsStore from 'app/stores/projectsStore';
+import withProjects from 'app/utils/withProjects';
+
+describe('withProjects HoC', function() {
+  beforeEach(() => {
+    ProjectsStore.reset();
+  });
+
+  it('works', function() {
+    const MyComponent = () => null;
+    let Container = withProjects(MyComponent);
+    let wrapper = mount(<Container />);
+
+    expect(wrapper.find('MyComponent').prop('projects')).toEqual([]);
+
+    // Insert into projects store
+    let project = TestStubs.Project();
+    ProjectsStore.loadInitialData([project]);
+
+    wrapper.update();
+    let props = wrapper.find('MyComponent').prop('projects');
+    expect(props.length).toBe(1);
+    expect(props[0].id).toBe(project.id);
+  });
+});
