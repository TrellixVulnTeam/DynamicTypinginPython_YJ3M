commit 03e8ce9092f349225ac5d1cd4e11c040b10fd734
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jan 5 13:25:28 2015 -0800

    Initial draft code

diff --git a/src/sentry/auth/__init__.py b/src/sentry/auth/__init__.py
new file mode 100644
index 0000000000..2bbf03e820
--- /dev/null
+++ b/src/sentry/auth/__init__.py
@@ -0,0 +1,13 @@
+from __future__ import absolute_import, print_function
+
+from .provider import *  # NOQA
+from .manager import ProviderManager
+from .view import *  # NOQA
+
+manager = ProviderManager()
+register = manager.register
+unregister = manager.unregister
+
+# TODO(dcramer): move this into external plugin
+from .providers.google_oauth2 import GoogleOAuth2Provider
+register('google', GoogleOAuth2Provider)
diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
new file mode 100644
index 0000000000..937dfeca21
--- /dev/null
+++ b/src/sentry/auth/helper.py
@@ -0,0 +1,60 @@
+from __future__ import absolute_import, print_function
+
+from hashlib import md5
+
+
+class AuthHelper(object):
+    """
+    Helper class which is passed into AuthView's.
+
+    Designed to link provider and views as well as manage the state and
+    pipeline.
+    """
+    def __init__(self, request, provider):
+        self.request = request
+        self.provider = provider
+        self.pipeline = provider.get_auth_pipeline()
+        # we serialize the pipeline to be [AuthView().get_ident(), ...] which
+        # allows us to determine if the pipeline has changed during the auth
+        # flow or if the user is somehow circumventing a chunk of it
+        self.signature = md5(' '.join(av.get_ident() for av in self.pipeline)).hexdigest()
+
+    def pipeline_is_valid(self):
+        current_session = self.request.session.get('auth_pipeline', {})
+        if not current_session:
+            return False
+        return current_session.get('sig') == self.signature
+
+    def reset_pipeline(self):
+        current_session = {
+            'idx': 0,
+            'sig': self.signature,
+            'state': {},
+        }
+        self.request.session['auth'] = current_session
+        self.request.session.is_modified = True
+
+    def get_current_view(self):
+        return self.provider.pipeline[self.request.session['auth']['idx']]
+
+    def get_next_url(self):
+        # each step url should be something like md5(cls_path)
+        return self.request.path
+
+    def get_current_url(self):
+        return self.request.path
+
+    def next_step(self):
+        # TODO: this needs to somehow embed the next step
+        # (it shouldnt force an exteneral redirect)
+        return self.redirect(self.get_next_url())
+
+    def error(self, message):
+        raise NotImplementedError
+
+    def bind_state(self, key, value):
+        self.request.session['auth']['state'][key] = value
+        self.request.session.is_modified = True
+
+    def fetch_state(self, key):
+        return self.request.session['auth']['state'].get(key)
diff --git a/src/sentry/auth/manager.py b/src/sentry/auth/manager.py
new file mode 100644
index 0000000000..2523b366c4
--- /dev/null
+++ b/src/sentry/auth/manager.py
@@ -0,0 +1,24 @@
+from __future__ import absolute_import, print_function
+
+__all__ = ('ProviderManager',)
+
+
+# Ideally this and PluginManager abstracted from the same base, but
+# InstanceManager has become convulated and wasteful
+class ProviderManager(object):
+    def __init__(self):
+        self.__values = {}
+
+    def __iter__(self):
+        return self.__values.iteritems()
+
+    def get(self, key):
+        return self.__values.get(key)
+
+    def register(self, key, cls):
+        self.__values[key] = cls
+
+    def unregister(self, key, cls):
+        if self.__values[key] != cls:
+            raise KeyError(key)
+        del self.__values[key]
diff --git a/src/sentry/auth/provider.py b/src/sentry/auth/provider.py
new file mode 100644
index 0000000000..77e3e310b0
--- /dev/null
+++ b/src/sentry/auth/provider.py
@@ -0,0 +1,27 @@
+from __future__ import absolute_import, print_function
+
+import logging
+
+
+class Provider(object):
+    """
+    A provider indicates how authenticate should happen for a given service,
+    including its configuration and basic identity management.
+    """
+    def __init__(self, key, **config):
+        self.key = key
+        self.config = config
+        self.logger = logging.getLogger('sentry.auth.%s' % (key,))
+
+    def get_config_form(self, request):
+        # return FormClass(request.POST or None)
+        raise NotImplementedError
+
+    def get_auth_pipeline(self):
+        # NOTE: we want to generate a unique url per step, this can be resolved
+        # by doing something like md5('view.Path').hexdigest(). Our only goal
+        # is to make it unique and ensure permanence
+        raise NotImplementedError
+
+    def get_identity(self, state):
+        raise NotImplementedError
diff --git a/src/sentry/auth/providers/__init__.py b/src/sentry/auth/providers/__init__.py
new file mode 100644
index 0000000000..b0860a4bae
--- /dev/null
+++ b/src/sentry/auth/providers/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import, print_function
diff --git a/src/sentry/auth/providers/google_oauth2.py b/src/sentry/auth/providers/google_oauth2.py
new file mode 100644
index 0000000000..86a118f6c7
--- /dev/null
+++ b/src/sentry/auth/providers/google_oauth2.py
@@ -0,0 +1,85 @@
+from __future__ import absolute_import, print_function
+
+from django.conf import settings
+from urllib import urlencode
+
+from sentry.auth import AuthView
+from sentry.auth.providers.oauth2 import (
+    OAuth2Callback, OAuth2Provider, OAuth2Login
+)
+from sentry.http import safe_urlopen, safe_urlread
+from sentry.utils import json
+
+AUTHORIZE_URL = 'https://accounts.google.com/o/oauth2/auth'
+
+ACCESS_TOKEN_URL = 'https://accounts.google.com/o/oauth2/token'
+
+SCOPE = 'email'
+
+CLIENT_ID = getattr(settings, 'GOOGLE_CLIENT_ID', None)
+
+CLIENT_SECRET = getattr(settings, 'GOOGLE_CLIENT_SECRET', None)
+
+USER_DETAILS_ENDPOINT = 'https://www.googleapis.com/plus/v1/people/me'
+
+ERR_INVALID_DOMAIN = 'The domain for your Google account is not allowed to authenticate with this provider.'
+
+
+class FetchUser(AuthView):
+    def __init__(self, domain=None, *args, **kwargs):
+        self.domain = domain
+        super(FetchUser, self).__init__(*args, **kwargs)
+
+    def dispatch(self, request, helper):
+        access_token = helper.fetch_state('data')['access_token']
+
+        req = safe_urlopen('{0}?{1}'.format(
+            USER_DETAILS_ENDPOINT,
+            urlencode({
+                'access_token': access_token,
+            }),
+        ))
+        body = safe_urlread(req)
+        data = json.loads(body)
+
+        if self.domain and self.domain != data['domain']:
+            return helper.error(ERR_INVALID_DOMAIN)
+
+        helper.bind_state('user', data)
+
+        return helper.next_step()
+
+
+class GoogleOAuth2Provider(OAuth2Provider):
+    def __init__(self, domain=None, **config):
+        self.domain = domain
+        super(GoogleOAuth2Provider, self).__init__(**config)
+
+    def get_auth_pipeline(self):
+        return [
+            OAuth2Login(
+                authorize_url=AUTHORIZE_URL,
+                scope=SCOPE,
+                client_id=CLIENT_ID,
+            ),
+            OAuth2Callback(
+                access_token_url=ACCESS_TOKEN_URL,
+                client_id=CLIENT_ID,
+                client_secret=CLIENT_SECRET,
+            ),
+            FetchUser(domain=self.domain),
+        ]
+
+    def get_identity(self, state):
+        # data.user => {
+        #   "displayName": "David Cramer",
+        #   "emails": [{"value": "david@getsentry.com", "type": "account"}],
+        #   "domain": "getsentry.com",
+        #   "verified": false
+        # }
+        user_data = state['user']
+        return {
+            # TODO: is there a "correct" email?
+            'email': user_data['emails'][0]['value'],
+            'name': user_data['displayName'],
+        }
diff --git a/src/sentry/auth/providers/oauth2.py b/src/sentry/auth/providers/oauth2.py
new file mode 100644
index 0000000000..22427bccd3
--- /dev/null
+++ b/src/sentry/auth/providers/oauth2.py
@@ -0,0 +1,117 @@
+from __future__ import absolute_import, print_function
+
+from urllib import urlencode
+from uuid import uuid4
+
+from sentry.auth import Provider, AuthView
+from sentry.http import safe_urlopen, safe_urlread
+from sentry.utils import json
+from sentry.utils.http import absolute_uri
+
+ERR_INVALID_STATE = 'An error occurred while validating your request.'
+
+
+class OAuth2Login(AuthView):
+    authorize_url = None
+    client_id = None
+    scope = ''
+
+    def __init__(self, authorize_url=None, client_id=None, scope=None, *args,
+                 **kwargs):
+        super(OAuth2Login, self).__init__(*args, **kwargs)
+        if authorize_url is not None:
+            self.authorize_url = authorize_url
+        if client_id is not None:
+            self.client_id = client_id
+        if scope is not None:
+            self.scope = scope
+
+    def get_scope(self):
+        return self.scope
+
+    def get_authorize_url(self):
+        return self.authorize_url
+
+    def get_authorize_params(self, state, redirect_uri):
+        return {
+            "client_id": self.client_id,
+            "response_type": "code",
+            "scope": self.get_scope(),
+            "state": state,
+            "redirect_uri": redirect_uri,
+        }
+
+    def dispatch(self, request, helper):
+        state = str(uuid4())
+
+        params = self.get_authorized_params(
+            state=state,
+            redirect_uri=absolute_uri(self.get_next_url(request)),
+        )
+
+        redirect_uri = self.get_authorize_url() + '?' + urlencode(params)
+
+        helper.bind_state('state', state)
+
+        return self.redirect(redirect_uri)
+
+
+class OAuth2Callback(AuthView):
+    access_token_url = None
+    client_id = None
+    client_secret = None
+
+    def __init__(self, access_token_url=None, client_id=None,
+                 client_secret=None, *args, **kwargs):
+        super(OAuth2Login, self).__init__(*args, **kwargs)
+        if access_token_url is not None:
+            self.access_token_url = access_token_url
+        if client_id is not None:
+            self.client_id = client_id
+        if client_secret is not None:
+            self.client_secret = client_secret
+
+    def get_token_params(self, code, redirect_uri):
+        return {
+            "grant_type": "authorization_code",
+            "code": code,
+            "redirect_uri": redirect_uri,
+            "client_id": self.client_id,
+            "client_secret": self.client_secret,
+        }
+
+    def exchange_token(self, request, helper, code):
+        # TODO: this needs the auth yet
+        params = self.get_token_params(
+            code=code,
+            redirect_uri=absolute_uri(helper.get_current_url(request)),
+        )
+        req = safe_urlopen(self.access_token_url, data=params)
+        body = safe_urlread(req)
+
+        return json.loads(body)
+
+    def dispatch(self, request, helper):
+        error = request.GET.get('error')
+        state = request.GET.get('state')
+        code = request.GET.get('code')
+
+        if error:
+            return helper.error(error)
+
+        if state != helper.fetch_state('state'):
+            return helper.error(ERR_INVALID_STATE)
+
+        data = self.exchange_token(request, helper, code)
+
+        # we can either expect the API to be implicit and say "im looking for
+        # blah within state data" or we need to pass implementation + call a
+        # hook here
+        helper.bind_state('data', data)
+
+        return helper.next_step()
+
+
+class OAuth2Provider(Provider):
+    def get_auth_pipeline(self):
+        return [OAuth2Login(), OAuth2Callback()]
diff --git a/src/sentry/auth/view.py b/src/sentry/auth/view.py
new file mode 100644
index 0000000000..5ef3df6760
--- /dev/null
+++ b/src/sentry/auth/view.py
@@ -0,0 +1,26 @@
+from __future__ import absolute_import, print_function
+
+__all__ = ('AuthView',)
+
+from sentry.web.frontend.base import BaseView
+
+
+class AuthView(BaseView):
+    """
+    A segment of Provider's auth pipeline.
+    """
+    auth_required = False
+    sudo_required = False
+
+    def dispatch(self, request, provider):
+        """
+        Returns an ``HttpResponse``.
+        """
+        raise NotImplementedError
+
+    def get_ident(self):
+        cls = type(self)
+        return '{module}.{name}'.format(
+            module=cls.__module__,
+            name=cls.__name__,
+        )
diff --git a/src/sentry/migrations/0152_auto__add_authprovider__add_field_organization_auth_provider.py b/src/sentry/migrations/0152_auto__add_authprovider__add_field_organization_auth_provider.py
new file mode 100644
index 0000000000..a7b358979a
--- /dev/null
+++ b/src/sentry/migrations/0152_auto__add_authprovider__add_field_organization_auth_provider.py
@@ -0,0 +1,394 @@
+# -*- coding: utf-8 -*-
+from south.utils import datetime_utils as datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        # Adding model 'AuthProvider'
+        db.create_table('sentry_authprovider', (
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+            ('provider', self.gf('django.db.models.fields.CharField')(max_length=128)),
+            ('config', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')()),
+            ('created_by', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sentry.User'])),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+            ('sync_time', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True)),
+            ('last_sync', self.gf('django.db.models.fields.DateTimeField')(null=True)),
+        ))
+        db.send_create_signal('sentry', ['AuthProvider'])
+
+        # Adding field 'Organization.auth_provider'
+        db.add_column('sentry_organization', 'auth_provider',
+                      self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sentry.AuthProvider'], null=True),
+                      keep_default=False)
+
+
+    def backwards(self, orm):
+        # Deleting model 'AuthProvider'
+        db.delete_table('sentry_authprovider')
+
+        # Deleting field 'Organization.auth_provider'
+        db.delete_column('sentry_organization', 'auth_provider_id')
+
+
+    models = {
+        'sentry.accessgroup': {
+            'Meta': {'unique_together': "(('team', 'name'),)", 'object_name': 'AccessGroup'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.User']", 'symmetrical': 'False'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Project']", 'symmetrical': 'False'}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '50'})
+        },
+        'sentry.activity': {
+            'Meta': {'object_name': 'Activity'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Event']", 'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
+        'sentry.alert': {
+            'Meta': {'object_name': 'Alert'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'related_groups': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'related_alerts'", 'symmetrical': 'False', 'through': "orm['sentry.AlertRelatedGroup']", 'to': "orm['sentry.Group']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.alertrelatedgroup': {
+            'Meta': {'unique_together': "(('group', 'alert'),)", 'object_name': 'AlertRelatedGroup'},
+            'alert': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Alert']"}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'})
+        },
+        'sentry.auditlogentry': {
+            'Meta': {'object_name': 'AuditLogEntry'},
+            'actor': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'audit_actors'", 'to': "orm['sentry.User']"}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'target_object': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'target_user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_targets'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.authprovider': {
+            'Meta': {'object_name': 'AuthProvider'},
+            'config': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'created_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.User']"}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_sync': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'provider': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'sync_time': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
+        },
+        'sentry.broadcast': {
+            'Meta': {'object_name': 'Broadcast'},
+            'badge': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
+            'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.CharField', [], {'max_length': '256'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'", 'index_together': "(('group', 'datetime'),)"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'data': ('sentry.db.models.fields.node.NodeField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'null': 'True'})
+        },
+        'sentry.eventmapping': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'EventMapping'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.file': {
+            'Meta': {'object_name': 'File'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
+            'path': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'size': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'storage': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'storage_options': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'time_spent_total': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        'sentry.groupassignee': {
+            'Meta': {'object_name': 'GroupAssignee', 'db_table': "'sentry_groupasignee'"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'unique': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_assignee_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.grouphash': {
+            'Meta': {'unique_together': "(('project', 'hash'),)", 'object_name': 'GroupHash'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.grouprulestatus': {
+            'Meta': {'unique_together': "(('rule', 'group'),)", 'object_name': 'GroupRuleStatus'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'rule': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Rule']"}),
+            'status': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'})
+        },
+        'sentry.groupseen': {
+            'Meta': {'unique_together': "(('user', 'group'),)", 'object_name': 'GroupSeen'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'db_index': 'False'})
+        },
+        'sentry.grouptagkey': {
+            'Meta': {'unique_together': "(('project', 'group', 'key'),)", 'object_name': 'GroupTagKey'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.grouptagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'GroupTagValue', 'db_table': "'sentry_messagefiltervalue'"},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'grouptag'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'grouptag'", 'null': 'True', 'to': "orm['sentry.Project']"}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.helppage': {
+            'Meta': {'object_name': 'HelpPage'},
+            'content': ('django.db.models.fields.TextField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_visible': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64', 'unique': 'True', 'null': 'True'}),
+            'priority': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'title': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.lostpasswordhash': {
+            'Meta': {'object_name': 'LostPasswordHash'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'unique': 'True'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'last_updated': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.organization': {
+            'Meta': {'object_name': 'Organization'},
+            'auth_provider': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.AuthProvider']", 'null': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'org_memberships'", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMember']", 'to': "orm['sentry.User']"}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.organizationmember': {
+            'Meta': {'unique_together': "(('organization', 'user'), ('organization', 'email'))", 'object_name': 'OrganizationMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
+            'has_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Organization']"}),
+            'teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'blank': 'True'}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'sentry_orgmember_set'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.pendingteammember': {
+            'Meta': {'unique_together': "(('team', 'email'),)", 'object_name': 'PendingTeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'pending_member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '50'})
+        },
+        'sentry.project': {
+            'Meta': {'unique_together': "(('team', 'slug'), ('organization', 'slug'))", 'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'roles': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'}),
+            'user_added': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'keys_added_set'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.release': {
+            'Meta': {'unique_together': "(('project', 'version'),)", 'object_name': 'Release'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'version': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.rule': {
+            'Meta': {'object_name': 'Rule'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.tagkey': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'TagKey', 'db_table': "'sentry_filterkey'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.tagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'TagValue', 'db_table': "'sentry_filtervalue'"},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.team': {
+            'Meta': {'unique_together': "(('organization', 'slug'),)", 'object_name': 'Team'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.teammember': {
+            'Meta': {'unique_together': "(('team', 'user'),)", 'object_name': 'TeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '50'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.user': {
+            'Meta': {'object_name': 'User', 'db_table': "'auth_user'"},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        }
+    }
+
+    complete_apps = ['sentry']
\ No newline at end of file
diff --git a/src/sentry/models/authprovider.py b/src/sentry/models/authprovider.py
new file mode 100644
index 0000000000..b9173215d0
--- /dev/null
+++ b/src/sentry/models/authprovider.py
@@ -0,0 +1,27 @@
+from __future__ import absolute_import, print_function
+
+from django.db import models
+from django.utils import timezone
+
+from sentry.db.models import (
+    BoundedPositiveIntegerField, GzippedDictField, Model
+)
+
+
+class AuthProvider(Model):
+    provider = models.CharField(max_length=128)
+    config = GzippedDictField()
+
+    created_by = models.ForeignKey('sentry.User')
+    date_added = models.DateTimeField(default=timezone.now)
+    sync_time = BoundedPositiveIntegerField(null=True)
+    last_sync = models.DateTimeField(null=True)
+
+    class Meta:
+        app_label = 'sentry'
+        db_table = 'sentry_authprovider'
+
+    def get_provider(self):
+        from sentry.auth import providers
+
+        return providers.get(self.provider)
diff --git a/src/sentry/models/organization.py b/src/sentry/models/organization.py
index 141956ad80..5385dd76bc 100644
--- a/src/sentry/models/organization.py
+++ b/src/sentry/models/organization.py
@@ -82,6 +82,7 @@ class Organization(Model):
         (OrganizationStatus.DELETION_IN_PROGRESS, _('Deletion in Progress')),
     ), default=OrganizationStatus.VISIBLE)
     date_added = models.DateTimeField(default=timezone.now)
+    auth_provider = models.ForeignKey('sentry.AuthProvider', null=True)
     members = models.ManyToManyField(settings.AUTH_USER_MODEL, through='sentry.OrganizationMember', related_name='org_memberships')
 
     objects = OrganizationManager(cache_fields=(
@@ -108,4 +109,5 @@ class Organization(Model):
             'slug': self.slug,
             'name': self.name,
             'status': self.status,
+            'auth_provider': self.auth_provider_id,
         }
diff --git a/src/sentry/templates/sentry/bases/organization.html b/src/sentry/templates/sentry/bases/organization.html
index 0f153e562b..c733739d92 100644
--- a/src/sentry/templates/sentry/bases/organization.html
+++ b/src/sentry/templates/sentry/bases/organization.html
@@ -44,14 +44,19 @@
         {% trans "Stats" %}
       </a>
     </li>
+    <li class="{% block org_auditlog_nav %}{% endblock %}">
+      <a href="{% url 'sentry-organization-audit-log' organization.slug %}">
+        {% trans "Audit Log" %}
+      </a>
+    </li>
     <li class="{% block org_members_nav %}{% endblock %}">
       <a href="{% url 'sentry-organization-members' organization.slug %}">
         {% trans "Members" %}
       </a>
     </li>
-    <li class="{% block org_auditlog_nav %}{% endblock %}">
-      <a href="{% url 'sentry-organization-audit-log' organization.slug %}">
-        {% trans "Audit Log" %}
+    <li class="{% block org_auth_settings_nav %}{% endblock %}">
+      <a href="{% url 'sentry-organization-auth-settings' organization.slug %}">
+        {% trans "Auth" %}
       </a>
     </li>
     <li class="{% block org_settings_nav %}{% endblock %}">
diff --git a/src/sentry/templates/sentry/organization-auth-settings.html b/src/sentry/templates/sentry/organization-auth-settings.html
new file mode 100644
index 0000000000..b2f4367e06
--- /dev/null
+++ b/src/sentry/templates/sentry/organization-auth-settings.html
@@ -0,0 +1,18 @@
+{% extends "sentry/bases/organization.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+
+{% block org_auth_settings_nav %}active{% endblock %}
+
+{% block inner %}
+  <div class="page-header">
+    <h2>Authentication</h2>
+  </div>
+
+  <ul>
+    {% for provider_key, provider in provider_list %}
+      <li>{{ provider_key }}</li>
+    {% endfor %}
+  </ul>
+{% endblock %}
diff --git a/src/sentry/web/frontend/auth_provider_login.py b/src/sentry/web/frontend/auth_provider_login.py
new file mode 100644
index 0000000000..c40fc5663a
--- /dev/null
+++ b/src/sentry/web/frontend/auth_provider_login.py
@@ -0,0 +1,32 @@
+from __future__ import absolute_import, print_function
+
+from django.core.urlresolvers import reverse
+
+from sentry.auth.helper import AuthHelper
+from sentry.models import Organization
+from sentry.web.frontend.base import BaseView
+
+
+class AuthProviderLoginView(BaseView):
+    auth_required = False
+
+    def handle(self, request, organization_slug):
+        try:
+            organization = Organization.objects.get_from_cache(
+                slug=organization_slug
+            )
+        except Organization.DoesNotExist:
+            return self.redirect(reverse('sentry-login'))
+
+        auth_provider = organization.auth_provider
+        if auth_provider is None:
+            return self.redirect(reverse('sentry-login'))
+
+        provider = auth_provider.get_provider()(**auth_provider.config)
+
+        helper = AuthHelper(request, provider)
+        if not helper.pipeline_is_valid():
+            helper.reset_pipeline()
+
+        current_view = helper.get_current_view()
+        return current_view.dispatch(request, provider)
diff --git a/src/sentry/web/frontend/organization_auth_settings.py b/src/sentry/web/frontend/organization_auth_settings.py
new file mode 100644
index 0000000000..0a3a71a03e
--- /dev/null
+++ b/src/sentry/web/frontend/organization_auth_settings.py
@@ -0,0 +1,40 @@
+from __future__ import absolute_import
+
+from sentry.auth import manager
+from sentry.models import AuthProvider, OrganizationMemberType
+from sentry.web.frontend.base import OrganizationView
+
+
+class OrganizationAuthSettingsView(OrganizationView):
+    required_access = OrganizationMemberType.OWNER
+
+    def handle_existing_provider(self, request, organization):
+        # at this point the provider may or may not be fully configured
+        auth_provider = organization.auth_provider
+
+        context = {
+            'auth_provider': auth_provider,
+        }
+
+        return self.respond('sentry/organization-auth-provider-settings.html', context)
+
+    def handle(self, request, organization):
+        if organization.auth_provider:
+            return self.handle_existing_provider(request, organization)
+
+        if request.method == 'POST':
+            provider = request.POST.get('provider')
+            if manager.get(provider):
+                organization.update(
+                    auth_provider=AuthProvider.objects.create(
+                        created_by=request.user,
+                        provider=provider,
+                    )
+                )
+                return self.handle_existing_provider(request, organization)
+
+        context = {
+            'provider_list': manager,
+        }
+
+        return self.respond('sentry/organization-auth-settings.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index b8667d6d1c..08a066af6e 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -42,6 +42,7 @@ from sentry.web.frontend.auth_login import AuthLoginView
 from sentry.web.frontend.auth_logout import AuthLogoutView
 from sentry.web.frontend.home import HomeView
 from sentry.web.frontend.organization_audit_log import OrganizationAuditLogView
+from sentry.web.frontend.organization_auth_settings import OrganizationAuthSettingsView
 from sentry.web.frontend.organization_home import OrganizationHomeView
 from sentry.web.frontend.organization_members import OrganizationMembersView
 from sentry.web.frontend.organization_member_settings import OrganizationMemberSettingsView
@@ -141,6 +142,8 @@ urlpatterns += patterns('',
         name='sentry-create-organization'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/access-groups/$', AccessGroupMigrationView.as_view(),
         name='sentry-organization-access-group-migration'),
+    url(r'^organizations/(?P<organization_slug>[\w_-]+)/auth/$', OrganizationAuthSettingsView.as_view(),
+        name='sentry-organization-auth-settings'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/audit-log/$', OrganizationAuditLogView.as_view(),
         name='sentry-organization-audit-log'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/members/$', OrganizationMembersView.as_view(),
diff --git a/tests/sentry/utils/auth/__init__.py b/tests/sentry/utils/auth/__init__.py
index e69de29bb2..b0860a4bae 100644
--- a/tests/sentry/utils/auth/__init__.py
+++ b/tests/sentry/utils/auth/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import, print_function
