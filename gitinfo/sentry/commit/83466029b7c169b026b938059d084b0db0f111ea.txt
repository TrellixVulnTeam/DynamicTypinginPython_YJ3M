commit 83466029b7c169b026b938059d084b0db0f111ea
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Jun 21 11:07:45 2018 -0700

    feat(discover): Discover prototype - event search (#8759)
    
    * feat(discover): Discover prototype - event search
    
    This is a prototype of "discover" event search functionality, for internal users only.
    
    It allows for very basic searching and filtering of event data across an organization.
    It exposes the Snuba API via a new OrganizationDiscover endpoint and introduces a new view to the UI at organization/:orgId/discover/.
    
    This feature is still in a rough state, and is hence feature gated for internal users only.

diff --git a/src/sentry/api/endpoints/organization_discover.py b/src/sentry/api/endpoints/organization_discover.py
new file mode 100644
index 0000000000..2b49b1cf19
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_discover.py
@@ -0,0 +1,108 @@
+from __future__ import absolute_import
+
+from datetime import datetime
+
+from rest_framework.response import Response
+from sentry.api.bases.organization import OrganizationPermission
+from sentry.api.bases import OrganizationMemberEndpoint
+
+from sentry.models import Project, ProjectStatus, OrganizationMemberTeam
+
+from sentry import roles
+
+
+from sentry.utils import snuba
+
+
+class OrganizationDiscoverPermission(OrganizationPermission):
+    scope_map = {
+        'POST': ['org:read', 'project:read']
+    }
+
+
+class OrganizationDiscoverEndpoint(OrganizationMemberEndpoint):
+    permission_classes = (OrganizationDiscoverPermission, )
+
+    def do_query(self, start, end, groupby, **kwargs):
+
+        snuba_results = snuba.raw_query(
+            start=start,
+            end=end,
+            groupby=groupby,
+            referrer='discover',
+            **kwargs
+        )
+
+        return snuba_results
+
+    def has_projects_access(self, member, organization, requested_projects):
+        has_global_access = roles.get(member.role).is_global
+        if has_global_access:
+            return True
+
+        member_project_list = Project.objects.filter(
+            organization=organization,
+            teams__in=OrganizationMemberTeam.objects.filter(
+                organizationmember=member,
+            ).values('team'),
+        ).values_list('id')
+
+        return set(requested_projects).issubset(set(member_project_list))
+
+    def post(self, request, organization, member):
+        data = request.DATA
+
+        filters = {
+            'project_id': data['projects']
+        } if 'projects' in data else None
+
+        selected_columns = data.get('fields')
+
+        orderby = data.get('orderby', '-last_seen')
+
+        conditions = data.get('conditions')
+
+        limit = data.get('limit', 1000)
+
+        aggregations = data.get('aggregations')
+
+        groupby = data.get('groupby')
+
+        rollup = data.get('rollup')
+
+        projects = data.get('projects')
+
+        org_projects = set(Project.objects.filter(
+            organization=organization,
+            status=ProjectStatus.VISIBLE,
+        ).values_list('id', flat=True))
+
+        if (not isinstance(limit, int) or limit < 0 or limit > 1000):
+            return Response({'detail': 'Invalid limit parameter'}, status=400)
+
+        if not projects:
+            return Response({'detail': 'No projects requested'}, status=400)
+
+        if not set(projects).issubset(org_projects):
+            return Response({'detail': 'Invalid projects'}, status=400)
+
+        if not self.has_projects_access(member, organization, projects):
+            return Response({'detail': 'Invalid projects'}, status=400)
+
+        fmt = '%Y-%m-%dT%H:%M:%S'
+        start = datetime.strptime(data['start'], fmt)
+        end = datetime.strptime(data['end'], fmt)
+        results = self.do_query(
+            start,
+            end,
+            groupby,
+            selected_columns=selected_columns,
+            conditions=conditions,
+            orderby=orderby,
+            limit=limit,
+            aggregations=aggregations,
+            rollup=rollup,
+            filter_keys=filters,
+        )
+
+        return Response(results, status=200)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 51f3d11275..da2590ee06 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -54,6 +54,7 @@ from .endpoints.organization_auth_provider_details import OrganizationAuthProvid
 from .endpoints.organization_auth_provider_send_reminders import OrganizationAuthProviderSendRemindersEndpoint
 from .endpoints.organization_avatar import OrganizationAvatarEndpoint
 from .endpoints.organization_details import OrganizationDetailsEndpoint
+from .endpoints.organization_discover import OrganizationDiscoverEndpoint
 from .endpoints.organization_shortid import ShortIdLookupEndpoint
 from .endpoints.organization_eventid import EventIdLookupEndpoint
 from .endpoints.organization_slugs import SlugsUpdateEndpoint
@@ -349,6 +350,11 @@ urlpatterns = patterns(
         OrganizationDetailsEndpoint.as_view(),
         name='sentry-api-0-organization-details'
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/discover/$',
+        OrganizationDiscoverEndpoint.as_view(),
+        name='sentry-api-0-organization-discover'
+    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/shortids/(?P<short_id>[^\/]+)/$',
         ShortIdLookupEndpoint.as_view(),
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index f3130a60ef..18567ceebd 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -25,6 +25,7 @@ import MyIssuesBookmarked from 'app/views/myIssues/bookmarked';
 import MyIssuesViewed from 'app/views/myIssues/viewed';
 import NewProject from 'app/views/projectInstall/newProject';
 import OnboardingConfigure from 'app/views/onboarding/configure/index';
+import OrganizationDiscover from 'app/views/organizationDiscover';
 import OnboardingWizard from 'app/views/onboarding/index';
 import OrganizationActivity from 'app/views/organizationActivity';
 import OrganizationContext from 'app/views/organizationContext';
@@ -735,6 +736,11 @@ function routes() {
       <Route path="/:orgId/" component={errorHandler(OrganizationDetails)}>
         <Route component={errorHandler(OrganizationRoot)}>
           <IndexRoute component={errorHandler(OrganizationDashboard)} />
+
+          <Route
+            path="/organizations/:orgId/discover/"
+            component={errorHandler(OrganizationDiscover)}
+          />
           <Route
             path="/organizations/:orgId/activity/"
             component={errorHandler(OrganizationActivity)}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations.jsx
new file mode 100644
index 0000000000..6fa51838ec
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations.jsx
@@ -0,0 +1,97 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import styled from 'react-emotion';
+import {Flex, Box} from 'grid-emotion';
+
+import Link from 'app/components/link';
+import TextField from 'app/components/forms/textField';
+
+import {t} from 'app/locale';
+
+export default class Aggregations extends React.Component {
+  static propTypes = {
+    value: PropTypes.array.isRequired,
+    onChange: PropTypes.func.isRequired,
+  };
+
+  addRow() {
+    this.props.onChange([...this.props.value, ['', '', '']]);
+  }
+
+  removeRow(idx) {
+    const aggregations = this.props.value.slice();
+    aggregations.splice(idx, 1);
+    this.props.onChange(aggregations);
+  }
+
+  updateAggregation(idx, conditionIdx, val) {
+    const conditions = this.props.value.slice();
+
+    conditions[conditionIdx][idx] = val;
+
+    this.props.onChange(conditions);
+  }
+
+  renderAggregation(aggregation, idx) {
+    return (
+      <React.Fragment>
+        <Box w={1 / 3} pr={1}>
+          <TextField
+            name="aggregations-1"
+            value={aggregation[0]}
+            onChange={val => this.updateAggregation(0, idx, val)}
+          />
+        </Box>
+        <Box w={1 / 3} pr={1}>
+          <TextField
+            name="aggregations-2"
+            value={aggregation[1]}
+            onChange={val => this.updateAggregation(1, idx, val)}
+          />
+        </Box>
+        <Box w={1 / 3} pr={1}>
+          <TextField
+            name="aggregations-3"
+            value={aggregation[2]}
+            onChange={val => this.updateAggregation(2, idx, val)}
+          />
+        </Box>
+        <Box>
+          <a
+            className="icon-circle-cross"
+            style={{lineHeight: '37px'}}
+            onClick={() => this.removeRow(idx)}
+          />
+        </Box>
+      </React.Fragment>
+    );
+  }
+
+  render() {
+    const {value} = this.props;
+
+    return (
+      <div>
+        <div>
+          <strong>{t('Aggregations')}</strong>
+          <Add>
+            (<Link onClick={() => this.addRow()}>{t('Add')}</Link>)
+          </Add>
+        </div>
+        {!value.length && 'None'}
+        {value.map((aggregation, idx) => (
+          <Flex key={idx}>{this.renderAggregation(aggregation, idx)}</Flex>
+        ))}
+      </div>
+    );
+  }
+}
+
+const Add = styled.span`
+  font-style: italic;
+  text-decoration: underline;
+  margin-left: 4px;
+  font-size: 13px;
+  line-height: 16px;
+  color: ${p => p.theme.gray1};
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/conditions.jsx
new file mode 100644
index 0000000000..e756874c59
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/conditions.jsx
@@ -0,0 +1,210 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import styled from 'react-emotion';
+import {Flex, Box} from 'grid-emotion';
+
+import Link from 'app/components/link';
+import TextField from 'app/components/forms/textField';
+import SelectField from 'app/components/forms/selectField';
+
+import {t} from 'app/locale';
+
+import {COLUMNS, CONDITION_OPERATORS} from './data';
+
+export default class Conditions extends React.Component {
+  static propTypes = {
+    value: PropTypes.arrayOf(PropTypes.array).isRequired,
+    onChange: PropTypes.func.isRequired,
+  };
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      editIndex: null,
+    };
+  }
+
+  addRow() {
+    const idx = this.props.value.length;
+    this.setState({
+      editIndex: idx,
+    });
+    this.props.onChange([...this.props.value, [null, null, null]]);
+  }
+
+  removeRow(idx) {
+    const conditions = this.props.value.slice();
+    conditions.splice(idx, 1);
+    this.props.onChange(conditions);
+  }
+
+  updateCondition(idx, conditionIdx, val) {
+    const conditions = this.props.value.slice();
+    conditions[conditionIdx][idx] = val;
+
+    // Handle IS NULL and IS NOT NULL
+    const specialClauses = new Set(['IS NULL', 'IS NOT NULL']);
+    if (idx === 1 && specialClauses.has(val)) {
+      conditions[conditionIdx][2] = null;
+    }
+
+    // Handle IN condition
+    if (idx === 1 && val === 'IN') {
+      if (typeof conditions[conditionIdx][2] === 'string') {
+        conditions[conditionIdx][2] = conditions[conditionIdx][2].split(',');
+      } else if (!Array.isArray(conditions[conditionIdx][2])) {
+        conditions[conditionIdx][2] = [];
+      }
+    }
+
+    if (idx === 2 && conditions[conditionIdx][1] === 'IN') {
+      conditions[conditionIdx][2] = conditions[conditionIdx][2]
+        .split(',')
+        .map(condition => {
+          const col = COLUMNS.find(({name}) => name === conditions[conditionIdx][0]);
+          return col.type === 'number' ? parseInt(condition, 10) : condition;
+        });
+    }
+
+    this.props.onChange(conditions);
+  }
+
+  getConditionOperators(condition) {
+    const stringOperators = new Set(['=', '!=', 'IN', 'IS NULL', 'IS NOT NULL', 'LIKE']);
+
+    return CONDITION_OPERATORS.filter(op => {
+      const col = COLUMNS.find(({name}) => name === condition[0]);
+      if (col && col.type === 'string') {
+        return stringOperators.has(op);
+      } else {
+        return true;
+      }
+    }).map(op => ({
+      value: op,
+      label: op,
+    }));
+  }
+
+  renderValueField(condition, idx) {
+    const showValueField = condition[1] !== 'IS NULL' && condition[1] !== 'IS NOT NULL';
+
+    if (!showValueField) return null;
+
+    if (condition[1] === 'IN') {
+      const value = condition[2].map(val => val.toString()).join(',');
+
+      return (
+        <TextField
+          name="condition-3"
+          placeholder={t('Add comma separated values')}
+          value={value}
+          onChange={val => this.updateCondition(2, idx, val)}
+        />
+      );
+    } else {
+      return (
+        <TextField
+          name="condition-3"
+          value={condition[2]}
+          onChange={val => this.updateCondition(2, idx, val)}
+        />
+      );
+    }
+  }
+
+  saveRow(condition, idx) {
+    const conditions = this.props.value.slice();
+    conditions[idx] = condition;
+    this.props.onChange(conditions);
+    this.setState({
+      editIndex: null,
+    });
+  }
+
+  renderCondition(condition, idx) {
+    if (this.state.editIndex === idx) {
+      return (
+        <React.Fragment>
+          <Box w={1 / 3} pr={1}>
+            <SelectField
+              name="condition-1"
+              options={COLUMNS.map(({name}) => ({
+                value: name,
+                label: name,
+              }))}
+              value={condition[0]}
+              onChange={val => this.updateCondition(0, idx, val)}
+            />
+          </Box>
+          <Box w={1 / 3} pr={1}>
+            <SelectField
+              name="condition-2"
+              options={this.getConditionOperators(condition)}
+              value={condition[1]}
+              onChange={val => this.updateCondition(1, idx, val)}
+            />
+          </Box>
+          <Box w={1 / 3} pr={1}>
+            {this.renderValueField(condition, idx)}
+          </Box>
+          <Box>
+            <Save
+              className="icon-circle-check"
+              onClick={() => this.saveRow(condition, idx)}
+              style={{lineHeight: '37px'}}
+            />
+            <a
+              className="icon-circle-cross"
+              style={{lineHeight: '37px'}}
+              onClick={() => this.removeRow(idx)}
+            />
+          </Box>
+        </React.Fragment>
+      );
+    } else {
+      return (
+        <ConditionLink onClick={() => this.setState({editIndex: idx})}>
+          {condition.join(' ')}
+        </ConditionLink>
+      );
+    }
+  }
+
+  render() {
+    const {value} = this.props;
+    return (
+      <div>
+        <div>
+          <strong>{t('Conditions')}</strong>
+          <Add>
+            (<Link onClick={() => this.addRow()}>{t('Add')}</Link>)
+          </Add>
+        </div>
+        {!value.length && 'None, showing all events'}
+        {value.map((condition, idx) => (
+          <Flex key={idx}>{this.renderCondition(condition, idx)}</Flex>
+        ))}
+      </div>
+    );
+  }
+}
+
+const Add = styled.span`
+  font-style: italic;
+  text-decoration: underline;
+  margin-left: 4px;
+  font-size: 13px;
+  line-height: 16px;
+  color: ${p => p.theme.gray1};
+`;
+
+const ConditionLink = styled(Link)`
+  margin: 16px 0;
+`;
+
+const Save = styled(Link)`
+  color: ${p => p.theme.green};
+  :hover {
+    color: ${p => p.theme.greenDark};
+  }
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
new file mode 100644
index 0000000000..649801e254
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
@@ -0,0 +1,81 @@
+const COLUMNS = [
+  {name: 'level', type: 'string'},
+  {name: 'logger', type: 'string'},
+  {name: 'server_name', type: 'string'},
+  {name: 'transaction', type: 'string'},
+  {name: 'environment', type: 'string'},
+  {name: 'site', type: 'string'},
+  {name: 'url', type: 'string'},
+  {name: 'app_device', type: 'string'},
+  {name: 'device', type: 'string'},
+  {name: 'device_family', type: 'string'},
+  {name: 'runtime', type: 'string'},
+  {name: 'runtime_name', type: 'string'},
+  {name: 'browser', type: 'string'},
+  {name: 'browser_name', type: 'string'},
+  {name: 'os', type: 'string'},
+  {name: 'os_name', type: 'string'},
+  {name: 'os_rooted', type: 'number'},
+  {name: 'os_build', type: 'string'},
+  {name: 'os_kernel_version', type: 'string'},
+  {name: 'device_name', type: 'string'},
+  {name: 'device_brand', type: 'string'},
+  {name: 'device_locale', type: 'string'},
+  {name: 'device_uuid', type: 'string'},
+  {name: 'device_model_id', type: 'string'},
+  {name: 'device_arch', type: 'string'},
+  {name: 'device_battery_level', type: 'number'},
+  {name: 'device_orientation', type: 'string'},
+  {name: 'device_simulator', type: 'string'},
+  {name: 'device_online', type: 'string'},
+  {name: 'device_charging', type: 'string'},
+  {name: 'event_id', type: 'string'},
+  {name: 'project_id', type: 'string'},
+  {name: 'timestamp', type: 'datetime'},
+  {name: 'deleted', type: 'number'},
+  {name: 'retention_days', type: 'number'},
+  {name: 'platform', type: 'string'},
+  {name: 'message', type: 'string'},
+  {name: 'primary_hash', type: 'string'},
+  {name: 'received', type: 'datetime'},
+  {name: 'user_id', type: 'string'},
+  {name: 'username', type: 'string'},
+  {name: 'email', type: 'string'},
+  {name: 'ip_address', type: 'string'},
+  {name: 'sdk_name', type: 'string'},
+  {name: 'sdk_version', type: 'string'},
+  {name: 'tags.key', type: 'string'},
+  {name: 'tags.value', type: 'string'},
+  {name: 'contexts.key', type: 'string'},
+  {name: 'contexts.value', type: 'string'},
+  {name: 'http_method', type: 'string'},
+  {name: 'http_referer', type: 'string'},
+  {name: 'exception_stacks.type', type: 'string'},
+  {name: 'exception_stacks.value', type: 'string'},
+  {name: 'exception_stacks.mechanism_type', type: 'string'},
+  {name: 'exception_stacks.mechanism_handled', type: 'string'},
+  {name: 'exception_frames.abs_path', type: 'string'},
+  {name: 'exception_frames.filename', type: 'string'},
+  {name: 'exception_frames.package', type: 'string'},
+  {name: 'exception_frames.module', type: 'string'},
+  {name: 'exception_frames.function', type: 'string'},
+  {name: 'exception_frames.in_app', type: 'number'},
+  {name: 'exception_frames.colno', type: 'number'},
+  {name: 'exception_frames.lineno', type: 'number'},
+  {name: 'exception_frames.stack_level', type: 'string'},
+];
+
+const CONDITION_OPERATORS = [
+  '>',
+  '<',
+  '>=',
+  '<=',
+  '=',
+  '!=',
+  'IN',
+  'IS NULL',
+  'IS NOT NULL',
+  'LIKE',
+];
+
+export {COLUMNS, CONDITION_OPERATORS};
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
new file mode 100644
index 0000000000..ef6b0f7fae
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
@@ -0,0 +1,171 @@
+import React from 'react';
+import styled from 'react-emotion';
+import {Flex, Box} from 'grid-emotion';
+
+import createReactClass from 'create-react-class';
+import ApiMixin from 'app/mixins/apiMixin';
+import OrganizationState from 'app/mixins/organizationState';
+
+import SelectField from 'app/components/forms/selectField';
+import MultiSelectField from 'app/components/forms/multiSelectField';
+import NumberField from 'app/components/forms/numberField';
+import Button from 'app/components/buttons/button';
+
+import {addErrorMessage} from 'app/actionCreators/indicator';
+
+import {t} from 'app/locale';
+
+import {COLUMNS} from './data';
+import createQueryBuilder from './queryBuilder';
+import Result from './result';
+import Time from './time';
+import Project from './project';
+import Conditions from './conditions';
+import Aggregations from './aggregations';
+
+const OrganizationDiscover = createReactClass({
+  displayName: 'OrganizationDiscover',
+
+  mixins: [ApiMixin, OrganizationState],
+
+  getInitialState: function() {
+    return {
+      queryBuilder: createQueryBuilder({}, this.context.organization.projects),
+    };
+  },
+
+  runQuery: function() {
+    const {slug} = this.context.organization;
+    const endpoint = `/organizations/${slug}/discover/`;
+    const data = this.state.queryBuilder.getExternal();
+
+    this.api.request(endpoint, {
+      method: 'POST',
+      data,
+      success: result => {
+        this.setState({
+          result,
+        });
+      },
+      error: err => {
+        const message = t('An error occurred');
+        addErrorMessage(message);
+        this.setState({result: null});
+      },
+    });
+  },
+
+  updateField: function(field, value) {
+    this.state.queryBuilder.updateField(field, value);
+    this.forceUpdate();
+  },
+
+  renderComingSoon: function() {
+    return (
+      <Flex className="organization-home" justify="center" align="center">
+        something is happening here soon :)
+      </Flex>
+    );
+  },
+
+  render: function() {
+    const hasFeature = this.getFeatures().has('internal-catchall');
+
+    if (!hasFeature) return this.renderComingSoon();
+
+    const fieldOptions = COLUMNS.map(({name}) => ({
+      value: name,
+      label: name,
+    }));
+
+    const orderbyOptions = COLUMNS.reduce((acc, {name}) => {
+      return [
+        ...acc,
+        {value: name, label: `${name} asc`},
+        {value: `-${name}`, label: `${name} desc`},
+      ];
+    }, []);
+
+    const query = this.state.queryBuilder.getInternal();
+
+    return (
+      <div className="organization-home">
+        <Header
+          p={2}
+          justify="space-between"
+          align="center"
+          className="sub-header"
+          style={{marginBottom: 16}}
+        >
+          <strong>{t('Discover')}</strong>
+          <Flex>
+            <Project
+              value={query.projects}
+              projects={this.context.organization.projects}
+              onChange={val => this.updateField('projects', val)}
+              runQuery={this.runQuery}
+            />
+            <Separator />
+            <Time
+              start={query.start}
+              end={query.end}
+              updateField={(name, val) => this.updateField(name, val)}
+              runQuery={this.runQuery}
+            />
+          </Flex>
+        </Header>
+        <Flex px={2}>
+          <Box w={[1 / 3, 1 / 3, 1 / 3, 1 / 4]}>
+            <MultiSelectField
+              name="fields"
+              label={t('Select')}
+              options={fieldOptions}
+              value={query.fields}
+              onChange={val => this.updateField('fields', val)}
+            />
+            <SelectField
+              name="orderby"
+              label={t('Order By')}
+              options={orderbyOptions}
+              value={query.orderby}
+              onChange={val => this.updateField('orderby', val)}
+            />
+            <NumberField
+              name="limit"
+              label={t('Limit')}
+              value={query.limit}
+              onChange={val =>
+                this.updateField('limit', typeof val === 'number' ? val : null)}
+            />
+            <Conditions
+              value={query.conditions}
+              onChange={val => this.updateField('conditions', val)}
+            />
+            <Aggregations
+              value={query.aggregations}
+              onChange={val => this.updateField('aggregations', val)}
+            />
+            <Button onClick={this.runQuery} style={{marginTop: 8}} priority="primary">
+              {t('Run Query')}
+            </Button>
+          </Box>
+          <Box w={[2 / 3, 2 / 3, 2 / 3, 3 / 4]} pl={2}>
+            {this.state.result && <Result result={this.state.result} />}
+          </Box>
+        </Flex>
+      </div>
+    );
+  },
+});
+
+const Header = styled(Flex)`
+  font-size: 18px;
+`;
+
+const Separator = styled(Box)`
+  width: 1px;
+  background-color: ${p => p.theme.offWhite};
+  margin: 4px 16px;
+`;
+
+export default OrganizationDiscover;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/project.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/project.jsx
new file mode 100644
index 0000000000..6195d17104
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/project.jsx
@@ -0,0 +1,76 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import moment from 'moment';
+import styled from 'react-emotion';
+import {Flex, Box} from 'grid-emotion';
+
+import DropdownLink from 'app/components/dropdownLink';
+import Button from 'app/components/buttons/button';
+import MultiSelectField from 'app/components/forms/multiSelectField';
+import {t} from 'app/locale';
+
+export default class Project extends React.Component {
+  static propTypes = {
+    value: PropTypes.array,
+    projects: PropTypes.array,
+    onChange: PropTypes.func,
+    runQuery: PropTypes.func,
+  };
+
+  formatDate(date) {
+    return moment(date).format('MMMM D, h:mm a');
+  }
+
+  render() {
+    const {value, projects, onChange, runQuery} = this.props;
+    const selectedProjectIds = new Set(value);
+
+    const projectList = projects
+      .filter(project => selectedProjectIds.has(parseInt(project.id, 10)))
+      .map(project => project.slug);
+
+    const summary = projectList.length
+      ? `${projectList.join(', ')}`
+      : t('None selected, using all');
+
+    const options = projects.map(project => {
+      return {
+        value: parseInt(project.id, 10),
+        label: project.slug,
+      };
+    });
+
+    return (
+      <StyledProject direction="column" justify="center">
+        <label>{t('Projects')}</label>
+        <DropdownLink title={summary} keepMenuOpen={true} anchorRight={true}>
+          <Box p={2}>
+            searched project list
+            <MultiSelectField
+              name="projects"
+              value={value}
+              options={options}
+              onChange={onChange}
+            />
+            <Button onClick={runQuery}>{t('Update')}</Button>
+          </Box>
+        </DropdownLink>
+      </StyledProject>
+    );
+  }
+}
+
+const StyledProject = styled(Flex)`
+  text-align: right;
+  label {
+    font-weight: 400;
+    font-size: 13px;
+    color: #afa3bb;
+    margin-bottom: 12px;
+  }
+  .dropdown-actor-title {
+    font-size: 15px;
+    height: auto;
+    color: ${p => p.theme.button.default.colorActive};
+  }
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
new file mode 100644
index 0000000000..fa670ef99d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
@@ -0,0 +1,55 @@
+import moment from 'moment-timezone';
+
+const DATE_TIME_FORMAT = 'YYYY-MM-DDTHH:mm:ss';
+
+const DEFAULTS = {
+  projects: [],
+  fields: ['event_id', 'timestamp'],
+  conditions: [],
+  aggregations: [],
+  start: moment()
+    .subtract(14, 'days')
+    .format(DATE_TIME_FORMAT),
+  end: moment().format(DATE_TIME_FORMAT),
+  orderby: '-event_id',
+  limit: 1000,
+};
+
+function applyDefaults(query) {
+  Object.entries(DEFAULTS).forEach(([key, value]) => {
+    if (!(key in query)) {
+      query[key] = value;
+    }
+  });
+  return query;
+}
+
+/**
+ * This function is responsible for storing and managing updates to query state,
+ * It applies sensible defaults if query parameters are not provided on initialization.
+ */
+export default function createQueryBuilder(initial = {}, projectList) {
+  const query = applyDefaults(initial);
+
+  function getInternal() {
+    return query;
+  }
+
+  function getExternal() {
+    if (!query.projects.length) {
+      return {...query, projects: projectList.map(project => parseInt(project.id, 10))};
+    } else {
+      return query;
+    }
+  }
+
+  function updateField(field, value) {
+    query[field] = value;
+  }
+
+  return {
+    getInternal,
+    getExternal,
+    updateField,
+  };
+}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result.jsx
new file mode 100644
index 0000000000..6eaa656809
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result.jsx
@@ -0,0 +1,76 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import styled from 'react-emotion';
+import {Box} from 'grid-emotion';
+
+import AutoSelectText from 'app/components/autoSelectText';
+
+import {getDisplayValue} from './utils';
+
+/**
+ * Renders results in a table as well as a query summary (timing, rows returned)
+ * from any Snuba result
+ */
+export default class Result extends React.Component {
+  static propTypes = {
+    result: PropTypes.object.isRequired,
+  };
+
+  renderTable() {
+    const {meta, data} = this.props.result;
+
+    return (
+      <StyledTable className="table table-bordered table-hover">
+        <thead>
+          <tr>{meta.map(({name}, idx) => <th key={idx}>{name}</th>)}</tr>
+        </thead>
+        <tbody>
+          {data.map((row, rowIdx) => {
+            return (
+              <tr key={rowIdx}>
+                {meta.map((val, colIdx) => (
+                  <td key={colIdx}>
+                    <AutoSelectText>
+                      {getDisplayValue(row[meta[colIdx].name])}
+                    </AutoSelectText>
+                  </td>
+                ))}
+              </tr>
+            );
+          })}
+        </tbody>
+      </StyledTable>
+    );
+  }
+
+  render() {
+    const {error, timing, data} = this.props.result;
+
+    if (error) {
+      return <div>{error}</div>;
+    }
+
+    return (
+      <div style={{overflowX: 'scroll'}}>
+        <Summary mb={1}>
+          snuba query time: {timing.duration_ms}ms, {data.length} rows
+        </Summary>
+        {this.renderTable()}
+      </div>
+    );
+  }
+}
+
+const Summary = styled(Box)`
+  font-size: 12px;
+`;
+
+const StyledTable = styled.table`
+  font-size: 14px;
+  tbody > tr > td,
+  thead > tr > th {
+    padding: 8px;
+    max-width: 100px;
+    overflow: scroll;
+  }
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/time.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/time.jsx
new file mode 100644
index 0000000000..cda3ac6afa
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/time.jsx
@@ -0,0 +1,67 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import moment from 'moment';
+import styled from 'react-emotion';
+import {Flex, Box} from 'grid-emotion';
+
+import DateTimeField from 'app/components/forms/dateTimeField';
+import DropdownLink from 'app/components/dropdownLink';
+import Button from 'app/components/buttons/button';
+import {t} from 'app/locale';
+
+export default class TimeRange extends React.Component {
+  static propTypes = {
+    start: PropTypes.string,
+    end: PropTypes.string,
+    updateField: PropTypes.func,
+    runQuery: PropTypes.func,
+  };
+
+  formatDate(date) {
+    return moment(date).format('MMMM D, h:mm a');
+  }
+
+  render() {
+    const {start, end, updateField, runQuery} = this.props;
+    const summary = `${this.formatDate(start)} to ${this.formatDate(end)}`;
+
+    return (
+      <Time direction="column" justify="center">
+        <label>{t('Time range')}</label>
+        <DropdownLink title={summary} keepMenuOpen={true} anchorRight={true}>
+          <Box p={2}>
+            update time range (UTC)
+            <DateTimeField
+              name="start"
+              label={t('From')}
+              value={start}
+              onChange={val => updateField('start', val)}
+            />
+            <DateTimeField
+              name="end"
+              label={t('To')}
+              value={end}
+              onChange={val => updateField('end', val)}
+            />
+            <Button onClick={runQuery}>{t('Update')}</Button>
+          </Box>
+        </DropdownLink>
+      </Time>
+    );
+  }
+}
+
+const Time = styled(Flex)`
+  text-align: right;
+  label {
+    font-weight: 400;
+    font-size: 13px;
+    color: #afa3bb;
+    margin-bottom: 12px;
+  }
+  .dropdown-actor-title {
+    font-size: 15px;
+    height: auto;
+    color: ${p => p.theme.button.default.colorActive};
+  }
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
new file mode 100644
index 0000000000..da43db5690
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
@@ -0,0 +1,44 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+/**
+ * Takes any value and returns a display version of that value for
+ * rendering in the "discover" result table. Handles only the 3 types
+ * that we would expect to be present in Snuba data - string, null and array
+ */
+function getDisplayValue(val) {
+  if (typeof val === 'string') {
+    return <DarkGray key={val}>{`"${val}"`}</DarkGray>;
+  }
+
+  if (val === null) {
+    return <LightGray>null</LightGray>;
+  }
+
+  if (Array.isArray(val)) {
+    return (
+      <span>
+        [
+        {val.map(getDisplayValue).reduce((acc, curr, idx) => {
+          if (idx !== 0) {
+            return [...acc, ',', curr];
+          }
+          return [...acc, curr];
+        }, [])}
+        ]
+      </span>
+    );
+  }
+
+  return val;
+}
+
+const LightGray = styled.span`
+  color: ${p => p.theme.gray1};
+`;
+
+const DarkGray = styled.span`
+  color: ${p => p.theme.gray5};
+`;
+
+export {getDisplayValue};
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index 1af96fbc17..2c92c4184c 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -43,9 +43,9 @@ _snuba_pool = urllib3.connectionpool.connection_from_url(
 )
 
 
-def query(start, end, groupby, conditions=None, filter_keys=None,
-          aggregations=None, rollup=None, arrayjoin=None, limit=None, orderby=None,
-          having=None, referrer=None, is_grouprelease=False):
+def raw_query(start, end, groupby, conditions=None, filter_keys=None,
+              aggregations=None, rollup=None, arrayjoin=None, limit=None, orderby=None,
+              having=None, referrer=None, is_grouprelease=False, selected_columns=None,):
     """
     Sends a query to snuba.
 
@@ -67,10 +67,10 @@ def query(start, end, groupby, conditions=None, filter_keys=None,
     groupby = groupby or []
     conditions = conditions or []
     having = having or []
-    aggregations = aggregations or [['count()', '', 'aggregate']]
+    aggregations = aggregations or []
     filter_keys = filter_keys or {}
+    selected_columns = selected_columns or []
 
-    # Forward and reverse translation maps from model ids to snuba keys, per column
     with timer('get_snuba_map'):
         forward, reverse = get_snuba_translators(filter_keys, is_grouprelease=is_grouprelease)
 
@@ -99,8 +99,9 @@ def query(start, end, groupby, conditions=None, filter_keys=None,
     # we need to fetch the issue definitions (issue -> fingerprint hashes)
     aggregate_cols = [a[1] for a in aggregations]
     condition_cols = [c[0] for c in flat_conditions(conditions)]
-    all_cols = groupby + aggregate_cols + condition_cols
+    all_cols = groupby + aggregate_cols + condition_cols + selected_columns
     get_issues = 'issue' in all_cols
+
     with timer('get_project_issues'):
         issues = get_project_issues(project_ids, filter_keys.get('issue')) if get_issues else None
 
@@ -117,6 +118,7 @@ def query(start, end, groupby, conditions=None, filter_keys=None,
         'arrayjoin': arrayjoin,
         'limit': limit,
         'orderby': orderby,
+        'selected_columns': selected_columns,
     }) if v is not None}
 
     headers = {}
@@ -140,10 +142,27 @@ def query(start, end, groupby, conditions=None, filter_keys=None,
             raise SnubaError(body['error'])
         else:
             raise SnubaError('HTTP {}'.format(response.status))
+    return body
+
+
+def query(start, end, groupby, conditions=None, filter_keys=None,
+          aggregations=None, rollup=None, arrayjoin=None, limit=None, orderby=None,
+          having=None, referrer=None, is_grouprelease=False, selected_columns=None):
+
+    aggregations = aggregations or [['count()', '', 'aggregate']]
+    filter_keys = filter_keys or {}
+    selected_columns = selected_columns or []
 
+    body = raw_query(start, end, groupby=groupby, conditions=conditions, filter_keys=filter_keys,
+                     selected_columns=selected_columns, aggregations=aggregations, rollup=rollup, arrayjoin=arrayjoin,
+                     limit=limit, orderby=orderby, having=having, referrer=referrer, is_grouprelease=is_grouprelease)
+
+    # Forward and reverse translation maps from model ids to snuba keys, per column
+    with timer('get_snuba_map'):
+        forward, reverse = get_snuba_translators(filter_keys, is_grouprelease=is_grouprelease)
     # Validate and scrub response, and translate snuba keys back to IDs
     aggregate_cols = [a[2] for a in aggregations]
-    expected_cols = set(groupby + aggregate_cols)
+    expected_cols = set(groupby + aggregate_cols + selected_columns)
     got_cols = set(c['name'] for c in body['meta'])
 
     assert expected_cols == got_cols
diff --git a/tests/snuba/test_organization_discover.py b/tests/snuba/test_organization_discover.py
new file mode 100644
index 0000000000..b163b08122
--- /dev/null
+++ b/tests/snuba/test_organization_discover.py
@@ -0,0 +1,55 @@
+from __future__ import absolute_import
+
+from datetime import datetime, timedelta
+import time
+
+from sentry.testutils import APITestCase
+from django.core.urlresolvers import reverse
+from sentry.testutils import SnubaTestCase
+
+
+class OrganizationDiscoverTest(APITestCase, SnubaTestCase):
+    def setUp(self):
+        super(OrganizationDiscoverTest, self).setUp()
+
+        now = datetime.now()
+
+        self.login_as(user=self.user)
+
+        self.org = self.create_organization(owner=self.user, name='foo')
+
+        self.project = self.create_project(
+            name='bar',
+            organization=self.org,
+        )
+
+        events = [{
+            'event_id': 'x' * 32,
+            'primary_hash': '1' * 32,
+            'project_id': self.project.id,
+            'message': 'message!',
+            'platform': 'python',
+            'datetime': now.strftime('%Y-%m-%dT%H:%M:%S.%fZ'),
+            'data': {
+                'received': time.mktime(now.timetuple()),
+            }
+        }]
+
+        self.snuba_insert(events)
+
+    def test(self):
+
+        url = reverse('sentry-api-0-organization-discover', args=[self.org.slug])
+        response = self.client.post(url, {
+            'projects': [self.project.id],
+            'fields': ['message', 'platform'],
+            'start': (datetime.now() - timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
+            'end': datetime.now().strftime('%Y-%m-%dT%H:%M:%S'),
+            'orderby': '-timestamp',
+        })
+
+        assert response.status_code == 200, response.content
+
+        assert len(response.data['data']) == 1
+        assert response.data['data'][0]['message'] == 'message!'
+        assert response.data['data'][0]['platform'] == 'python'
