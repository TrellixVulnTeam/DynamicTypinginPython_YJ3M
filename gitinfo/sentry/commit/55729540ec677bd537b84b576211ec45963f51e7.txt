commit 55729540ec677bd537b84b576211ec45963f51e7
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri Aug 21 16:40:59 2015 +0200

    Refactored the api docs scenarios heavily.

diff --git a/api-docs/examples/get_aggregate.json b/api-docs/examples/get_aggregate.json
deleted file mode 100644
index 9eba62536e..0000000000
--- a/api-docs/examples/get_aggregate.json
+++ /dev/null
@@ -1,302 +0,0 @@
-{
-  "requests": [
-    {
-      "request_data": null, 
-      "response_headers": {
-        "content-language": "en-us", 
-        "vary": "Accept-Language, Cookie", 
-        "server": "WSGIServer/0.1 Python/2.7.6", 
-        "allow": "GET, PUT, DELETE, HEAD, OPTIONS", 
-        "date": "Thu, 20 Aug 2015 20:30:53 GMT", 
-        "content-type": "application/json"
-      }, 
-      "response_status": 200, 
-      "request_headers": {
-        "Host": "app.getsentry.com"
-      }, 
-      "response_data": {
-        "seenBy": [], 
-        "timeSpent": null, 
-        "lastSeen": "2015-08-20T20:30:49Z", 
-        "id": "1", 
-        "userReportCount": 0, 
-        "numComments": 0, 
-        "stats": {
-          "30d": [
-            [
-              1437436800, 
-              57177
-            ], 
-            [
-              1437523200, 
-              196288
-            ], 
-            [
-              1437609600, 
-              207809
-            ], 
-            [
-              1437696000, 
-              216798
-            ], 
-            [
-              1437782400, 
-              212232
-            ], 
-            [
-              1437868800, 
-              206688
-            ], 
-            [
-              1437955200, 
-              210943
-            ], 
-            [
-              1438041600, 
-              207744
-            ], 
-            [
-              1438128000, 
-              211744
-            ], 
-            [
-              1438214400, 
-              221930
-            ], 
-            [
-              1438300800, 
-              214509
-            ], 
-            [
-              1438387200, 
-              213159
-            ], 
-            [
-              1438473600, 
-              217719
-            ], 
-            [
-              1438560000, 
-              210308
-            ], 
-            [
-              1438646400, 
-              208951
-            ], 
-            [
-              1438732800, 
-              210957
-            ], 
-            [
-              1438819200, 
-              206734
-            ], 
-            [
-              1438905600, 
-              201480
-            ], 
-            [
-              1438992000, 
-              220583
-            ], 
-            [
-              1439078400, 
-              217507
-            ], 
-            [
-              1439164800, 
-              217044
-            ], 
-            [
-              1439251200, 
-              211145
-            ], 
-            [
-              1439337600, 
-              210420
-            ], 
-            [
-              1439424000, 
-              208605
-            ], 
-            [
-              1439510400, 
-              214363
-            ], 
-            [
-              1439596800, 
-              209055
-            ], 
-            [
-              1439683200, 
-              209681
-            ], 
-            [
-              1439769600, 
-              215321
-            ], 
-            [
-              1439856000, 
-              209652
-            ], 
-            [
-              1439942400, 
-              211847
-            ], 
-            [
-              1440028800, 
-              161397
-            ]
-          ], 
-          "24h": [
-            [
-              1440014400, 
-              8070
-            ], 
-            [
-              1440018000, 
-              8273
-            ], 
-            [
-              1440021600, 
-              8371
-            ], 
-            [
-              1440025200, 
-              8053
-            ], 
-            [
-              1440028800, 
-              7853
-            ], 
-            [
-              1440032400, 
-              7889
-            ], 
-            [
-              1440036000, 
-              6702
-            ], 
-            [
-              1440039600, 
-              9544
-            ], 
-            [
-              1440043200, 
-              10239
-            ], 
-            [
-              1440046800, 
-              8354
-            ], 
-            [
-              1440050400, 
-              10827
-            ], 
-            [
-              1440054000, 
-              8079
-            ], 
-            [
-              1440057600, 
-              8040
-            ], 
-            [
-              1440061200, 
-              9473
-            ], 
-            [
-              1440064800, 
-              6183
-            ], 
-            [
-              1440068400, 
-              11416
-            ], 
-            [
-              1440072000, 
-              7714
-            ], 
-            [
-              1440075600, 
-              9025
-            ], 
-            [
-              1440079200, 
-              9323
-            ], 
-            [
-              1440082800, 
-              10263
-            ], 
-            [
-              1440086400, 
-              10476
-            ], 
-            [
-              1440090000, 
-              2698
-            ], 
-            [
-              1440093600, 
-              1893
-            ], 
-            [
-              1440097200, 
-              2735
-            ], 
-            [
-              1440100800, 
-              2671
-            ]
-          ]
-        }, 
-        "culprit": "raven.scripts.runner in main", 
-        "title": "This is an example Python exception", 
-        "pluginActions": [], 
-        "assignedTo": null, 
-        "logger": null, 
-        "annotations": [], 
-        "status": "unresolved", 
-        "tags": {}, 
-        "isPublic": false, 
-        "permalink": "https://app.getsentry.com/the-interstellar-jurisdiction/pump-station/group/1/", 
-        "firstRelease": {
-          "dateReleased": null, 
-          "url": null, 
-          "data": {}, 
-          "dateCreated": "2015-08-20T20:30:49.347Z", 
-          "lastEvent": null, 
-          "version": "5bc6d6653670234160aa68fa4b5bc5a6a0599bb0", 
-          "firstEvent": null, 
-          "shortVersion": "5bc6d6653670", 
-          "dateStarted": null, 
-          "newGroups": 0, 
-          "ref": null
-        }, 
-        "shareId": "322e31", 
-        "firstSeen": "2015-08-20T20:30:49Z", 
-        "count": "1", 
-        "hasSeen": false, 
-        "level": "error", 
-        "isBookmarked": false, 
-        "project": {
-          "name": "Pump Station", 
-          "slug": "pump-station"
-        }, 
-        "lastRelease": null, 
-        "activity": [
-          {
-            "type": "first_seen", 
-            "user": null, 
-            "data": {}, 
-            "id": "None", 
-            "dateCreated": "2015-08-20T20:30:49Z"
-          }
-        ]
-      }, 
-      "path": "/api/0/groups/1/", 
-      "method": "GET"
-    }
-  ]
-}
diff --git a/api-docs/generator.py b/api-docs/generator.py
index 124c6dac26..de18bbb612 100644
--- a/api-docs/generator.py
+++ b/api-docs/generator.py
@@ -2,10 +2,8 @@ import os
 import zlib
 import json
 import click
-import base64
 import urlparse
 import logging
-import requests
 
 from pytz import utc
 from datetime import datetime, timedelta
@@ -20,20 +18,19 @@ SENTRY_CONFIG = os.path.join(HERE, 'sentry.conf.py')
 from sentry.utils import runner
 runner.configure(config_path=SENTRY_CONFIG, skip_backend_validation=True)
 from django.conf import settings
-from django.db.models import Model
 
 # Fair game from here
 from django.core.management import call_command
 
 from sentry.app import tsdb
-from sentry import models
 from sentry.models import User, Team, Project, Release, \
     Organization, OrganizationMember, Activity, ApiKey
 from sentry.utils.samples import create_sample_event
+from sentry.utils.apidocs import Runner, iter_scenarios, \
+    iter_endpoints, get_sections
 
 
-SCENARIO_PATH = os.path.join(HERE, 'scenarios')
-OUTPUT_PATH = os.path.join(HERE, 'examples')
+OUTPUT_PATH = os.path.join(HERE, 'cache')
 HOST = urlparse.urlparse(settings.SENTRY_URL_PREFIX).netloc
 
 
@@ -70,11 +67,13 @@ def create_sample_time_series(event):
             (tsdb.models.group, group.id),
         ), now, count)
         tsdb.incr_multi((
-            (tsdb.models.organization_total_received, group.project.organization_id),
+            (tsdb.models.organization_total_received,
+             group.project.organization_id),
             (tsdb.models.project_total_received, group.project.id),
         ), now, int(count * 1.1))
         tsdb.incr_multi((
-            (tsdb.models.organization_total_rejected, group.project.organization_id),
+            (tsdb.models.organization_total_rejected,
+             group.project.organization_id),
             (tsdb.models.project_total_rejected, group.project.id),
         ), now, int(count * 0.1))
         now = now - timedelta(seconds=1)
@@ -86,11 +85,13 @@ def create_sample_time_series(event):
             (tsdb.models.group, group.id),
         ), now, count)
         tsdb.incr_multi((
-            (tsdb.models.organization_total_received, group.project.organization_id),
+            (tsdb.models.organization_total_received,
+             group.project.organization_id),
             (tsdb.models.project_total_received, group.project.id),
         ), now, int(count * 1.1))
         tsdb.incr_multi((
-            (tsdb.models.organization_total_rejected, group.project.organization_id),
+            (tsdb.models.organization_total_rejected,
+             group.project.organization_id),
             (tsdb.models.project_total_rejected, group.project.id),
         ), now, int(count * 0.1))
         now = now - timedelta(hours=1)
@@ -283,69 +284,22 @@ class SentryBox(object):
         return event
 
 
-def iter_scenarios():
-    for filename in sorted(os.listdir(SCENARIO_PATH)):
-        if filename.endswith('.py'):
-            yield filename[:-3]
-
-
-def run_scenario(scenario, vars):
-    report('scenario', 'Running scenario "%s"' % scenario)
-    filename = os.path.join(SCENARIO_PATH, scenario + '.py')
-
-    reqs = []
-
-    def do_request(method, path, headers=None, data=None):
-        path = '/api/0/' + path.lstrip('/')
-        headers = dict(headers or {})
-        headers['Host'] = 'app.getsentry.com'
-        req_headers = dict(headers)
-        req_headers['Authorization'] = 'Basic %s' % base64.b64encode('%s:' % (
-            vars['api_key'].key.encode('utf-8')))
-
-        body = None
-        if data is not None:
-            body = json.dumps(data)
-            headers['Content-Type'] = 'application/json'
+def dump_json(path, data):
+    path = os.path.join(OUTPUT_PATH, path)
+    try:
+        os.makedirs(os.path.dirname(path))
+    except OSError:
+        pass
+    with open(path, 'w') as f:
+        for line in json.dumps(data, indent=2).splitlines():
+            f.write(line.rstrip() + '\n')
 
-        url = 'http://127.0.0.1:%s%s' % (
-            settings.SENTRY_APIDOCS_WEB_PORT,
-            path,
-        )
 
-        response = requests.request(method=method, url=url,
-                                    headers=req_headers, data=body)
-
-        reqs.append({
-            'method': method,
-            'path': path,
-            'request_headers': headers,
-            'request_data': data,
-            'response_headers': dict(response.headers),
-            'response_data': response.json(),
-            'response_status': response.status_code,
-        })
-
-    globals = {
-        'settings': settings,
-        'request': do_request,
-        'requests': reqs,
-        'vars': vars,
-    }
-
-    for attr in dir(models):
-        value = getattr(models, attr, None)
-        try:
-            if issubclass(value, Model):
-                globals[attr] = value
-        except Exception:
-            pass
-
-    execfile(filename, globals)
-    rv = {'requests': reqs}
-    with open(os.path.join(OUTPUT_PATH, scenario + '.json'), 'w') as f:
-        json.dump(rv, f, indent=2)
-        f.write('\n')
+def run_scenario(vars, scenario_ident, func):
+    runner = Runner(vars, scenario_ident)
+    report('scenario', 'Running scenario "%s"' % scenario_ident)
+    func(runner)
+    dump_json('scenario/%s.json' % scenario_ident, runner.to_json())
 
 
 @click.command()
@@ -375,14 +329,26 @@ def cli():
             'org': org,
             'api_key': api_key,
             'me': user,
+            'default_project': projects[0]['project'],
+            'default_release': projects[0]['release'],
+            'default_event': projects[0]['events'][0],
             'teams': [{
                 'team': team,
                 'projects': projects,
             }],
         }
 
-        for scenario in iter_scenarios():
-            run_scenario(scenario, vars)
+        for scenario_ident, func in iter_scenarios():
+            run_scenario(vars, scenario_ident, func)
+
+        report('docs', 'Exporting endpoint documentation')
+        for endpoint in iter_endpoints():
+            report('endpoint', 'Exporting docs for "%s"' %
+                   endpoint['endpoint_name'])
+            dump_json('endpoints/%s.json' % endpoint['endpoint_name'], endpoint)
+
+        report('docs', 'Exporting sections')
+        dump_json('sections.json', get_sections())
 
 
 if __name__ == '__main__':
diff --git a/api-docs/scenarios/get_aggregate.py b/api-docs/scenarios/get_aggregate.py
deleted file mode 100644
index 3c19908a79..0000000000
--- a/api-docs/scenarios/get_aggregate.py
+++ /dev/null
@@ -1,9 +0,0 @@
-# flake8: noqa
-
-project = vars['teams'][0]['projects'][0]['project']
-group = Group.objects.get(project=project)
-
-request(
-    method='GET',
-    path='/groups/%s/' % group.id,
-)
diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 9717c71936..f7568b53c5 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -18,6 +18,17 @@ from sentry.models import (
 )
 from sentry.plugins import plugins
 from sentry.utils.safe import safe_execute
+from sentry.utils.apidocs import scenario, associate_scenarios
+
+
+@scenario('RetrieveAggregate')
+def retrieve_aggregate_scenario(runner):
+    project = runner.vars['default_project']
+    group = Group.objects.get(project=project)
+    return runner.request(
+        method='GET',
+        path='/groups/%s/' % group.id,
+    )
 
 
 class GroupSerializer(serializers.Serializer):
@@ -92,6 +103,7 @@ class GroupDetailsEndpoint(GroupEndpoint):
             return {'version': version}
         return serialize(release, request.user)
 
+    @associate_scenarios([retrieve_aggregate_scenario])
     def get(self, request, group):
         """
         Retrieve an Aggregate
diff --git a/src/sentry/utils/apidocs.py b/src/sentry/utils/apidocs.py
new file mode 100644
index 0000000000..c5ff247624
--- /dev/null
+++ b/src/sentry/utils/apidocs.py
@@ -0,0 +1,189 @@
+import re
+import json
+import base64
+import inspect
+import requests
+
+from django.conf import settings
+
+
+optional_group_matcher = re.compile(r'\(\?\:(.+)\)')
+named_group_matcher = re.compile(r'\(\?P<(\w+)>[^\)]+\)')
+non_named_group_matcher = re.compile(r'\(.*?\)')
+
+
+API_PREFIX = '/api/0/'
+
+
+scenarios = {}
+
+
+def simplify_regex(pattern):
+    """
+    Clean up urlpattern regexes into something somewhat readable by Mere Humans:
+    turns something like "^(?P<sport_slug>\w+)/athletes/(?P<athlete_slug>\w+)/$"
+    into "{sport_slug}/athletes/{athlete_slug}/"
+    """
+    pattern = optional_group_matcher.sub(lambda m: '[%s]' % m.group(1), pattern)
+
+    # handle named groups first
+    pattern = named_group_matcher.sub(lambda m: '{%s}' % m.group(1), pattern)
+
+    # handle non-named groups
+    pattern = non_named_group_matcher.sub("{var}", pattern)
+
+    # clean up any outstanding regex-y characters.
+    pattern = pattern.replace('^', '').replace('$', '') \
+        .replace('?', '').replace('//', '/').replace('\\', '')
+    if not pattern.startswith('/'):
+        pattern = '/' + pattern
+    return pattern
+
+
+def get_internal_endpoint_from_pattern(pattern):
+    if not hasattr(pattern, 'callback'):
+        return
+    from sentry.api.base import Endpoint
+    if hasattr(pattern.callback, 'cls'):
+        cls = pattern.callback.cls
+        if issubclass(cls, Endpoint):
+            return cls
+    elif hasattr(pattern.callback, 'cls_instance'):
+        inst = pattern.callback.cls_instance
+        if isinstance(inst, Endpoint):
+            return inst.__class__
+
+
+def extract_documentation(func):
+    doc = inspect.getdoc(func)
+    if doc is not None:
+        return doc.decode('utf-8')
+
+
+def get_endpoint_path(internal_endpoint):
+    return '%s.%s' % (
+        internal_endpoint.__module__,
+        internal_endpoint.__name__,
+    )
+
+
+def extract_endpoint_info(pattern, internal_endpoint):
+    from sentry.constants import HTTP_METHODS
+    path = simplify_regex(pattern.regex.pattern)
+    for method_name in HTTP_METHODS:
+        if method_name in ('HEAD', 'OPTIONS'):
+            continue
+        method = getattr(internal_endpoint, method_name.lower(), None)
+        if method is None:
+            continue
+        doc = extract_documentation(method)
+        if doc is None:
+            continue
+        section = getattr(internal_endpoint, 'doc_section', None)
+        if section is None:
+            continue
+        endpoint_name = method.__name__.title() + internal_endpoint.__name__
+        if endpoint_name.endswith('Endpoint'):
+            endpoint_name = endpoint_name[:-8]
+        yield dict(
+            path=API_PREFIX + path.lstrip('/'),
+            method=method_name,
+            doc=doc,
+            section=section.name.lower(),
+            scenarios=getattr(method, 'api_scenarios', None) or [],
+            internal_path='%s:%s' % (
+                get_endpoint_path(internal_endpoint),
+                method.__name__
+            ),
+            endpoint_name=endpoint_name,
+        )
+
+
+def iter_endpoints():
+    from sentry.api.urls import urlpatterns
+    for pattern in urlpatterns:
+        internal_endpoint = get_internal_endpoint_from_pattern(pattern)
+        if internal_endpoint is None:
+            continue
+        for endpoint in extract_endpoint_info(pattern, internal_endpoint):
+            yield endpoint
+
+
+def scenario(ident):
+    def decorator(f):
+        scenarios[ident] = f
+        f.api_scenario_ident = ident
+        return f
+    return decorator
+
+
+def associate_scenarios(scenarios):
+    def decorator(f):
+        f.api_scenarios = [getattr(x, 'api_scenario_ident', x)
+                           for x in scenarios]
+        return f
+    return decorator
+
+
+def iter_scenarios():
+    # Make sure everything is imported.
+    for endpoint in iter_endpoints():
+        pass
+    return iter(sorted(scenarios.items()))
+
+
+def get_sections():
+    from sentry.api.base import DocSection
+    return dict((x.name.lower(), x.value) for x in DocSection)
+
+
+class Runner(object):
+    """The runner is a special object that holds state for the automatic
+    running of example scenarios.  It gets created by api-docs/generator.py
+    which does the majority of the heavy lifting.  It mainly exists here
+    so that the scenarios can be run separately if needed.
+    """
+
+    def __init__(self, vars, ident):
+        self.vars = vars
+        self.ident = ident
+        self.requests = []
+
+    def request(self, method, path, headers=None, data=None):
+        path = '/api/0/' + path.lstrip('/')
+        headers = dict(headers or {})
+        headers['Host'] = 'app.getsentry.com'
+        req_headers = dict(headers)
+        req_headers['Authorization'] = 'Basic %s' % base64.b64encode('%s:' % (
+            self.vars['api_key'].key.encode('utf-8')))
+
+        body = None
+        if data is not None:
+            body = json.dumps(data)
+            headers['Content-Type'] = 'application/json'
+
+        url = 'http://127.0.0.1:%s%s' % (
+            settings.SENTRY_APIDOCS_WEB_PORT,
+            path,
+        )
+
+        response = requests.request(method=method, url=url,
+                                    headers=req_headers, data=body)
+        rv = {
+            'method': method,
+            'path': path,
+            'request_headers': headers,
+            'request_data': data,
+            'response_headers': dict(response.headers),
+            'response_data': response.json(),
+            'response_status': response.status_code,
+        }
+
+        self.requests.append(rv)
+        return rv
+
+    def to_json(self):
+        return {
+            'ident': self.ident,
+            'requests': self.requests,
+        }
