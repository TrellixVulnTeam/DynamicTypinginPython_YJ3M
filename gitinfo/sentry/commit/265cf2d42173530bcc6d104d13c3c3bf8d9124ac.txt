commit 265cf2d42173530bcc6d104d13c3c3bf8d9124ac
Author: Mark Story <mark@sentry.io>
Date:   Thu Oct 17 12:28:45 2019 -0400

    fix(discover2) Fix glob matching on tags (#15113)
    
    The query translator was missing cases for handling match expressions
    generated by glob patterns.
    
    Fixes SENTRY-D20
    Fixes SEN-1177

diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index fa04e51f72..bd9a9c607c 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -1021,12 +1021,23 @@ def constrain_condition_to_dataset(cond, dataset):
     We have the dataset context here, so we need to re-scope conditions to the
     current dataset.
     """
+    index = get_function_index(cond)
+    if index is not None:
+        func_args = cond[index + 1]
+        for (i, arg) in enumerate(func_args):
+            # Nested function
+            if isinstance(arg, (list, tuple)):
+                func_args[i] = constrain_condition_to_dataset(arg, dataset)
+            else:
+                func_args[i] = constrain_column_to_dataset(arg, dataset)
+        cond[index + 1] = func_args
+        return cond
+    # No function name found
     if isinstance(cond, (list, tuple)) and len(cond):
-        if isinstance(cond[0], (list, tuple)):
-            # Nested condition or function expressions
-            cond = [constrain_condition_to_dataset(c, dataset) for c in cond]
-        elif len(cond) == 3:
-            # map column name
+        # Condition is [col, operator, value]
+        if isinstance(cond[0], six.string_types) and len(cond) == 3:
+            # Map column name to current dataset removing
+            # invalid conditions based on the dataset.
             name = constrain_column_to_dataset(cond[0], dataset, cond[2])
             if name is None:
                 return None
@@ -1036,14 +1047,16 @@ def constrain_condition_to_dataset(cond, dataset):
             # But the rest of sentry isn't aware of that requirement.
             if dataset == Dataset.Transactions and name == "event_id" and len(cond[2]) == 32:
                 cond[2] = six.text_type(uuid.UUID(cond[2]))
-        elif len(cond) == 2 and cond[0] == "has":
-            # first function argument is the column if function is "has"
-            cond[1][0] = constrain_column_to_dataset(cond[1][0], dataset)
-        elif len(cond) == 2 and SAFE_FUNCTION_RE.match(cond[0]):
-            # Function call with column name arguments.
-            if isinstance(cond[1], list):
-                cond[1] = [constrain_column_to_dataset(item, dataset) for item in cond[1]]
-    return cond
+
+            return cond
+        if isinstance(cond[0], (list, tuple)):
+            if get_function_index(cond[0]) is not None:
+                cond[0] = constrain_condition_to_dataset(cond[0], dataset)
+                return cond
+            else:
+                # Nested conditions
+                return [constrain_condition_to_dataset(item, dataset) for item in cond]
+    raise ValueError("Unexpected condition format %s" % cond)
 
 
 def dataset_query(
diff --git a/tests/sentry/utils/test_snuba.py b/tests/sentry/utils/test_snuba.py
index 4832e363ec..63671a4b7d 100644
--- a/tests/sentry/utils/test_snuba.py
+++ b/tests/sentry/utils/test_snuba.py
@@ -423,6 +423,7 @@ class TransformAliasesAndQueryTransactionsTest(TestCase):
             selected_columns=["transaction"],
             conditions=[
                 ["type", "=", "transaction"],
+                ["match", [["ifNull", ["tags[user_email]", ""]], "'(?i)^.*\@sentry\.io$'"]],
                 [["positionCaseInsensitive", ["message", "'recent-searches'"]], "!=", 0],
             ],
             aggregations=[["count", "", "count"]],
@@ -431,7 +432,8 @@ class TransformAliasesAndQueryTransactionsTest(TestCase):
         mock_query.assert_called_with(
             selected_columns=["transaction_name"],
             conditions=[
-                [["positionCaseInsensitive", ["transaction_name", "'recent-searches'"]], "!=", 0]
+                ["match", [["ifNull", ["tags[user_email]", ""]], "'(?i)^.*\@sentry\.io$'"]],
+                [["positionCaseInsensitive", ["transaction_name", "'recent-searches'"]], "!=", 0],
             ],
             aggregations=[["count", "", "count"]],
             filter_keys={"project_id": [self.project.id]},
