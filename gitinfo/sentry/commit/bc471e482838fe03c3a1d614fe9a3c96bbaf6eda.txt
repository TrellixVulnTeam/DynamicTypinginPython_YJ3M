commit bc471e482838fe03c3a1d614fe9a3c96bbaf6eda
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Wed Jun 26 12:30:01 2019 -0700

    ref(admin): Convert most pages -> React (#13812)

diff --git a/src/sentry/api/endpoints/internal_environment.py b/src/sentry/api/endpoints/internal_environment.py
new file mode 100644
index 0000000000..0557c04eb3
--- /dev/null
+++ b/src/sentry/api/endpoints/internal_environment.py
@@ -0,0 +1,37 @@
+from __future__ import absolute_import
+
+import sys
+
+from rest_framework.response import Response
+from django.conf import settings
+
+from sentry.app import env
+from sentry.api.base import Endpoint
+from sentry.api.permissions import SuperuserPermission
+
+
+class InternalEnvironmentEndpoint(Endpoint):
+    permission_classes = (SuperuserPermission, )
+
+    def get(self, request):
+        reserved = ('PASSWORD', 'SECRET', 'KEY')
+        config = []
+        for k in sorted(dir(settings)):
+            v_repr = repr(getattr(settings, k))
+            if any(r.lower() in v_repr.lower() for r in reserved):
+                v_repr = '*' * 16
+            if any(r in k for r in reserved):
+                v_repr = '*' * 16
+            if k.startswith('_'):
+                continue
+            if k.upper() != k:
+                continue
+            config.append((k, v_repr))
+
+        data = {
+            'pythonVersion': sys.version,
+            'config': config,
+            'environment': env.data,
+        }
+
+        return Response(data)
diff --git a/src/sentry/api/endpoints/internal_mail.py b/src/sentry/api/endpoints/internal_mail.py
new file mode 100644
index 0000000000..a1101850dd
--- /dev/null
+++ b/src/sentry/api/endpoints/internal_mail.py
@@ -0,0 +1,43 @@
+from __future__ import absolute_import
+
+import six
+from rest_framework.response import Response
+
+from sentry import options
+from sentry.utils.email import send_mail
+from sentry.api.base import Endpoint
+from sentry.api.permissions import SuperuserPermission
+
+
+class InternalMailEndpoint(Endpoint):
+    permission_classes = (SuperuserPermission, )
+
+    def get(self, request):
+        data = {
+            'mailHost': options.get('mail.host'),
+            'mailPassword': bool(options.get('mail.password')),
+            'mailUsername': options.get('mail.username'),
+            'mailPort': options.get('mail.port'),
+            'mailUseTls': options.get('mail.use-tls'),
+            'mailFrom': options.get('mail.from'),
+            'mailListNamespace': options.get('mail.list-namespace'),
+            'testMailEmail': request.user.email,
+        }
+
+        return Response(data)
+
+    def post(self, request):
+        error = None
+
+        body = """This email was sent as a request to test the Sentry outbound email configuration."""
+        try:
+            send_mail(
+                '%s Test Email' % (options.get('mail.subject-prefix'), ),
+                body,
+                options.get('mail.from'), [request.user.email],
+                fail_silently=False
+            )
+        except Exception as e:
+            error = six.text_type(e)
+
+        return Response({'error': error}, status=500 if error else 200)
diff --git a/src/sentry/api/endpoints/internal_packages.py b/src/sentry/api/endpoints/internal_packages.py
new file mode 100644
index 0000000000..b64ad9e4c9
--- /dev/null
+++ b/src/sentry/api/endpoints/internal_packages.py
@@ -0,0 +1,24 @@
+from __future__ import absolute_import
+
+import pkg_resources
+
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint
+from sentry.plugins import plugins
+from sentry.api.permissions import SuperuserPermission
+
+
+class InternalPackagesEndpoint(Endpoint):
+    permission_classes = (SuperuserPermission, )
+
+    def get(self, request):
+        data = {
+            'modules': sorted([(p.project_name, p.version) for p in pkg_resources.working_set]),
+            'extensions': [
+                (p.get_title(), '%s.%s' % (p.__module__, p.__class__.__name__))
+                for p in plugins.all(version=None)
+            ],
+        }
+
+        return Response(data)
diff --git a/src/sentry/api/endpoints/internal_warnings.py b/src/sentry/api/endpoints/internal_warnings.py
new file mode 100644
index 0000000000..65051708d0
--- /dev/null
+++ b/src/sentry/api/endpoints/internal_warnings.py
@@ -0,0 +1,39 @@
+from __future__ import absolute_import
+
+import functools
+import six
+from collections import defaultdict
+
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint
+from sentry.api.permissions import SuperuserPermission
+from sentry.utils.warnings import DeprecatedSettingWarning, UnsupportedBackend, seen_warnings
+
+
+class InternalWarningsEndpoint(Endpoint):
+    permission_classes = (SuperuserPermission, )
+
+    def get(self, request):
+        groupings = {
+            DeprecatedSettingWarning: 'Deprecated Settings',
+            UnsupportedBackend: 'Unsupported Backends',
+        }
+
+        groups = defaultdict(list)
+        warnings = []
+        for warning in seen_warnings:
+            cls = type(warning)
+            if cls in groupings:
+                groups[cls].append(six.text_type(warning))
+            else:
+                warnings.append(six.text_type(warning))
+
+        sort_by_message = functools.partial(sorted, key=six.binary_type)
+
+        data = {
+            'groups': sorted([(groupings[key], sort_by_message(values)) for key, values in groups.items()]),
+            'warnings': sort_by_message(warnings),
+        }
+
+        return Response(data)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index d8bc67cfe8..0bf727153d 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -54,6 +54,10 @@ from .endpoints.index import IndexEndpoint
 from .endpoints.internal_queue_tasks import InternalQueueTasksEndpoint
 from .endpoints.internal_quotas import InternalQuotasEndpoint
 from .endpoints.internal_stats import InternalStatsEndpoint
+from .endpoints.internal_warnings import InternalWarningsEndpoint
+from .endpoints.internal_packages import InternalPackagesEndpoint
+from .endpoints.internal_environment import InternalEnvironmentEndpoint
+from .endpoints.internal_mail import InternalMailEndpoint
 from .endpoints.monitor_checkins import MonitorCheckInsEndpoint
 from .endpoints.monitor_checkin_details import MonitorCheckInDetailsEndpoint
 from .endpoints.monitor_details import MonitorDetailsEndpoint
@@ -1416,8 +1420,11 @@ urlpatterns = patterns(
     ),
     url(r'^internal/quotas/$', InternalQuotasEndpoint.as_view()),
     url(r'^internal/queue/tasks/$', InternalQueueTasksEndpoint.as_view()),
-    url(r'^internal/stats/$', InternalStatsEndpoint.as_view(),
-        name='sentry-api-0-internal-stats'),
+    url(r'^internal/stats/$', InternalStatsEndpoint.as_view()),
+    url(r'^internal/warnings/$', InternalWarningsEndpoint.as_view()),
+    url(r'^internal/packages/$', InternalPackagesEndpoint.as_view()),
+    url(r'^internal/environment/$', InternalEnvironmentEndpoint.as_view()),
+    url(r'^internal/mail/$', InternalMailEndpoint.as_view()),
 
     # Project Wizard
     url(
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index f6dca813b1..b4a18bfc12 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -720,6 +720,34 @@ function routes() {
           }
           component={errorHandler(LazyLoad)}
         />
+        <Route
+          path="status/mail/"
+          componentPromise={() =>
+            import(/* webpackChunkName: "AdminMail" */ 'app/views/admin/adminMail')
+          }
+          component={errorHandler(LazyLoad)}
+        />
+        <Route
+          path="status/environment/"
+          componentPromise={() =>
+            import(/* webpackChunkName: "AdminEnvironment" */ 'app/views/admin/adminEnvironment')
+          }
+          component={errorHandler(LazyLoad)}
+        />
+        <Route
+          path="status/packages/"
+          componentPromise={() =>
+            import(/* webpackChunkName: "AdminPackages" */ 'app/views/admin/adminPackages')
+          }
+          component={errorHandler(LazyLoad)}
+        />
+        <Route
+          path="status/warnings/"
+          componentPromise={() =>
+            import(/* webpackChunkName: "AdminWarnings" */ 'app/views/admin/adminWarnings')
+          }
+          component={errorHandler(LazyLoad)}
+        />
         {hook('routes:admin')}
       </Route>
       <Redirect from="/share/group/:shareId/" to="/share/issue/:shareId/" />
diff --git a/src/sentry/static/sentry/app/views/admin/adminEnvironment.jsx b/src/sentry/static/sentry/app/views/admin/adminEnvironment.jsx
new file mode 100644
index 0000000000..c2856ff725
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/admin/adminEnvironment.jsx
@@ -0,0 +1,104 @@
+import React from 'react';
+import moment from 'moment';
+import styled from 'react-emotion';
+
+import {t, tct} from 'app/locale';
+import AsyncView from 'app/views/asyncView';
+import Button from 'app/components/button';
+import ConfigStore from 'app/stores/configStore';
+import Tooltip from 'app/components/tooltip';
+import space from 'app/styles/space';
+
+export default class AdminEnvironment extends AsyncView {
+  getEndpoints() {
+    return [['data', this.getEndpoint()]];
+  }
+
+  getEndpoint() {
+    return '/internal/environment/';
+  }
+
+  renderBody() {
+    const {data} = this.state;
+    const {environment, config, pythonVersion} = data;
+
+    const {version} = ConfigStore.getConfig();
+
+    return (
+      <div>
+        <h3>{t('Environment')}</h3>
+
+        {environment ? (
+          <dl className="vars">
+            <VersionLabel>
+              {t('Server Version')}
+              {version.upgradeAvailable && (
+                <Tooltip
+                  title={t(
+                    "You're running an old version of Sentry, did you know %s is available?",
+                    version.latest
+                  )}
+                >
+                  <Button
+                    priority="link"
+                    href="https://github.com/getsentry/sentry/releases"
+                    icon="icon-circle-question"
+                    size="small"
+                    external
+                  />
+                </Tooltip>
+              )}
+            </VersionLabel>
+            <dd>
+              <pre className="val">{version.current}</pre>
+            </dd>
+
+            <dt>{t('Python Version')}</dt>
+            <dd>
+              <pre className="val">{pythonVersion}</pre>
+            </dd>
+            <dt>{t('Configuration File')}</dt>
+            <dd>
+              <pre className="val">{environment.config}</pre>
+            </dd>
+            <dt>{t('Uptime')}</dt>
+            <dd>
+              <pre className="val">
+                {moment(environment.start_date).toNow(true)} (since{' '}
+                {environment.start_date})
+              </pre>
+            </dd>
+          </dl>
+        ) : (
+          <p>
+            {t('Environment not found (are you using the builtin Sentry webserver?).')}
+          </p>
+        )}
+
+        <h3>
+          {tct('Configuration [configPath]', {
+            configPath: environment.config && <small>{environment.config}</small>,
+          })}
+        </h3>
+
+        <dl className="vars">
+          {config.map(([key, value]) => (
+            <React.Fragment key={key}>
+              <dt>{key}</dt>
+              <dd>
+                <pre className="val">{value}</pre>
+              </dd>
+            </React.Fragment>
+          ))}
+        </dl>
+      </div>
+    );
+  }
+}
+
+const VersionLabel = styled('dt')`
+  display: inline-grid;
+  grid-auto-flow: column;
+  grid-gap: ${space(1)};
+  align-items: center;
+`;
diff --git a/src/sentry/static/sentry/app/views/admin/adminLayout.jsx b/src/sentry/static/sentry/app/views/admin/adminLayout.jsx
index ae1ea69284..acd7b4ff60 100644
--- a/src/sentry/static/sentry/app/views/admin/adminLayout.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminLayout.jsx
@@ -51,19 +51,21 @@ export default class AdminLayout extends React.Component {
                     <ListLink index={true} to="/manage/quotas/">
                       Quotas
                     </ListLink>
-                    <li>
-                      <a href="/manage/status/environment/">Environment</a>
-                    </li>
-                    <li>
-                      <a href="/manage/status/packages/">Packages</a>
-                    </li>
-                    <li>
-                      <a href="/manage/status/mail/">Mail</a>
-                    </li>
-                    <ListLink to="/manage/settings/">Settings</ListLink>
-                    <li>
-                      <a href="/manage/status/warnings/">Warnings</a>
-                    </li>
+                    <ListLink index={true} to="/manage/status/environment/">
+                      Environment
+                    </ListLink>
+                    <ListLink index={true} to="/manage/status/packages/">
+                      Packages
+                    </ListLink>
+                    <ListLink index={true} to="/manage/status/mail/">
+                      Mail
+                    </ListLink>
+                    <ListLink index={true} to="/manage/settings/">
+                      Settings
+                    </ListLink>
+                    <ListLink index={true} to="/manage/status/warnings/">
+                      Warnings
+                    </ListLink>
                   </ul>
 
                   <h6 className="nav-header">Manage</h6>
diff --git a/src/sentry/static/sentry/app/views/admin/adminMail.jsx b/src/sentry/static/sentry/app/views/admin/adminMail.jsx
new file mode 100644
index 0000000000..4cfa701f65
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/admin/adminMail.jsx
@@ -0,0 +1,116 @@
+import React from 'react';
+
+import {t} from 'app/locale';
+import Alert from 'app/components/alert';
+import AsyncView from 'app/views/asyncView';
+import Button from 'app/components/button';
+
+export default class AdminEnvironment extends AsyncView {
+  state = {
+    testEmailError: null,
+    testEmailSent: false,
+  };
+
+  getEndpoints() {
+    return [['data', this.getEndpoint()]];
+  }
+
+  getEndpoint() {
+    return '/internal/mail/';
+  }
+
+  sendTestEmail = async () => {
+    this.setState({
+      testEmailError: null,
+      testEmailSent: false,
+    });
+
+    try {
+      await this.api.requestPromise('/internal/mail/', {method: 'POST'});
+      this.setState({testEmailSent: true});
+    } catch (error) {
+      this.setState({
+        testEmailError: error.responseJSON
+          ? error.responseJSON.error
+          : t('Unable to send test email. Check your server logs'),
+      });
+    }
+  };
+
+  renderBody() {
+    const {data} = this.state;
+    const {
+      mailHost,
+      mailPassword,
+      mailUsername,
+      mailPort,
+      mailUseTls,
+      mailFrom,
+      mailListNamespace,
+      testMailEmail,
+    } = data;
+
+    return (
+      <div>
+        <h3>{t('SMTP Settings')}</h3>
+
+        <dl className="vars">
+          <dt>{t('From Address')}</dt>
+          <dd>
+            <pre className="val">{mailFrom}</pre>
+          </dd>
+
+          <dt>{t('Host')}</dt>
+          <dd>
+            <pre className="vall">
+              {mailHost}:{mailPort}
+            </pre>
+          </dd>
+
+          <dt>{t('Username')}</dt>
+          <dd>
+            <pre className="val">{mailUsername ? mailHost : <em>{t('not set')}</em>}</pre>
+          </dd>
+
+          <dt>{t('Password')}</dt>
+          <dd>
+            <pre className="val">
+              {mailPassword ? '********' : <em>{t('not set')}</em>}
+            </pre>
+          </dd>
+
+          <dt>{t('TLS?')}</dt>
+          <dd>
+            <pre className="val">{mailUseTls ? t('Yes') : t('No')}</pre>
+          </dd>
+
+          <dt>{t('Mailing List Namespace')}</dt>
+          <dd>
+            <pre className="val">{mailListNamespace}</pre>
+          </dd>
+        </dl>
+
+        <h3>{t('Test Settings')}</h3>
+
+        {this.state.testEmailSent && (
+          <Alert type="info">
+            {t('A test email has been sent to %s.', testMailEmail)}
+          </Alert>
+        )}
+        {this.state.testEmailError && (
+          <Alert type="error">{this.state.testEmailError}</Alert>
+        )}
+
+        <p>
+          {t(
+            "Send an email to your account's email address to confirm that everything is configured correctly."
+          )}
+        </p>
+
+        <Button onClick={this.sendTestEmail}>
+          {t('Send a test email to %s', testMailEmail)}
+        </Button>
+      </div>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/admin/adminPackages.jsx b/src/sentry/static/sentry/app/views/admin/adminPackages.jsx
new file mode 100644
index 0000000000..dd38b39ba2
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/admin/adminPackages.jsx
@@ -0,0 +1,57 @@
+import React from 'react';
+
+import AsyncView from 'app/views/asyncView';
+import {t} from 'app/locale';
+
+export default class AdminPackages extends AsyncView {
+  getEndpoints() {
+    return [['data', this.getEndpoint()]];
+  }
+
+  getEndpoint() {
+    return '/internal/packages/';
+  }
+
+  renderBody() {
+    const {data} = this.state;
+    const {extensions, modules} = data;
+
+    return (
+      <div>
+        <h3>{t('Extensions')}</h3>
+
+        {extensions.length > 0 ? (
+          <dl className="vars">
+            {extensions.map(([key, value]) => (
+              <React.Fragment key={key}>
+                <dt>{key}</dt>
+                <dd>
+                  <pre className="val">{value}</pre>
+                </dd>
+              </React.Fragment>
+            ))}
+          </dl>
+        ) : (
+          <p>{t('No extensions registered')}</p>
+        )}
+
+        <h3>{t('Modules')}</h3>
+
+        {modules.length > 0 ? (
+          <dl className="vars">
+            {modules.map(([key, value]) => (
+              <React.Fragment key={key}>
+                <dt>{key}</dt>
+                <dd>
+                  <pre className="val">{value}</pre>
+                </dd>
+              </React.Fragment>
+            ))}
+          </dl>
+        ) : (
+          <p>{t('No modules registered')}</p>
+        )}
+      </div>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/admin/adminWarnings.jsx b/src/sentry/static/sentry/app/views/admin/adminWarnings.jsx
new file mode 100644
index 0000000000..ada1b2f10d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/admin/adminWarnings.jsx
@@ -0,0 +1,48 @@
+import React from 'react';
+
+import AsyncView from 'app/views/asyncView';
+import {t} from 'app/locale';
+
+export default class AdminSettings extends AsyncView {
+  getEndpoints() {
+    return [['data', this.getEndpoint()]];
+  }
+
+  getEndpoint() {
+    return '/internal/warnings/';
+  }
+
+  renderBody() {
+    const {data} = this.state;
+    const {groups, warnings} = data;
+
+    return (
+      <div>
+        <h3>{t('System Warnings')}</h3>
+        {!warnings && !groups && t('There are no warnings at this time')}
+
+        {groups.map(([groupName, groupedWarnings]) => (
+          <React.Fragment key={groupName}>
+            <h4>{groupName}</h4>
+            <ul>
+              {groupedWarnings.map((warning, i) => (
+                <li key={i}>{warning}</li>
+              ))}
+            </ul>
+          </React.Fragment>
+        ))}
+
+        {warnings.length > 0 && (
+          <React.Fragment>
+            <h4>Miscellaneous</h4>
+            <ul>
+              {warnings.map((warning, i) => (
+                <li key={i}>{warning}</li>
+              ))}
+            </ul>
+          </React.Fragment>
+        )}
+      </div>
+    );
+  }
+}
diff --git a/src/sentry/status_checks/warnings.py b/src/sentry/status_checks/warnings.py
index a8e2154dcd..2f9a63c5d6 100644
--- a/src/sentry/status_checks/warnings.py
+++ b/src/sentry/status_checks/warnings.py
@@ -1,9 +1,5 @@
 from __future__ import absolute_import
 
-from django.core.urlresolvers import reverse
-
-from sentry.utils.http import absolute_uri
-
 from .base import Problem, StatusCheck
 
 
@@ -21,7 +17,6 @@ class WarningStatusCheck(StatusCheck):
                         'issues' if len(self.__warning_set) > 1 else 'issue',
                     ),
                     severity=Problem.SEVERITY_WARNING,
-                    url=absolute_uri(reverse('sentry-admin-warnings-status')),
                 ),
             ]
         else:
diff --git a/src/sentry/templates/sentry/admin/status/env.html b/src/sentry/templates/sentry/admin/status/env.html
deleted file mode 100644
index a61b9d3269..0000000000
--- a/src/sentry/templates/sentry/admin/status/env.html
+++ /dev/null
@@ -1,50 +0,0 @@
-{% extends "sentry/bases/admin.html" %}
-
-{% block admin-nav-status %} class="active"{% endblock %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-{% get_sentry_version %}
-
-{% block title %}{% trans "Server Status" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-    <h3>{% trans "Environment" %}</h3>
-
-    {% if environment %}
-
-        <dl class="vars">
-            <dt>{% trans "Server Version" %}{% if sentry_version.update_available %} <span class="disabled-indicator tip" title="You're running an old version of Sentry, did you know {{ sentry_version.latest }} is available?"><span class="icon-question"></span></span>{% endif %}</dt>
-            <dd>
-                <pre class="val">{{ sentry_version.current }}</pre>
-            </dd>
-
-            <dt>{% trans "Python Version" %}</dt>
-            <dd>
-<pre class="val">{{ python_version }}</pre>
-            </dd>
-            <dt>{% trans "Configuration File" %}</dt>
-            <dd>
-<pre class="val">{{ environment.config }}</pre>
-            </dd>
-            <dt>{% trans "Uptime" %}</dt>
-            <dd>
-<pre class="val">{{ environment.start_date|timesince }} (since {{ environment.start_date|date }})</pre>
-            </dd>
-        </dl>
-        <script>$('.tip').tooltip();</script>
-    {% else %}
-        <p>{% trans "Environment not found (are you using the builtin Sentry webserver?)." %}</p>
-    {% endif %}
-
-    <h3>{% trans "Configuration" %}{% if environment.config %} <small>{{ environment.config }}</small>{% endif %}</h3>
-
-    <dl class="vars">
-        {% for key, value in config %}
-                <dt>{{ key }}</dt>
-                <dd>
-<pre class="val">{{ value|pprint }}</pre>
-                </dd>
-        {% endfor %}
-    </dl>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/admin/status/mail.html b/src/sentry/templates/sentry/admin/status/mail.html
deleted file mode 100644
index 614c66ceba..0000000000
--- a/src/sentry/templates/sentry/admin/status/mail.html
+++ /dev/null
@@ -1,61 +0,0 @@
-{% extends "sentry/bases/admin.html" %}
-
-{% block admin-nav-mail %} class="active"{% endblock %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Mail Configuration" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-    <h3>{% trans "SMTP Settings" %}</h3>
-
-    <dl class="vars">
-        <dt>{% trans "From Address" %}</dt>
-        <dd>
-<pre class="val">{{ mail_from }}</pre>
-        </dd>
-
-        <dt>{% trans "Host" %}</dt>
-        <dd>
-<pre class="vall">{{ mail_host }}:{{ mail_port }}</pre>
-        </dd>
-
-        <dt>{% trans "Username" %}</dt>
-        <dd>
-<pre class="val">{% if mail_username %}{{ mail_username }}{% else %}<em>{% trans "not set" %}</em>{% endif %}</pre>
-        </dd>
-
-        <dt>{% trans "Password" %}</dt>
-        <dd>
-<pre class="val">{% if mail_password %}********{% else %}<em>{% trans "not set" %}</em>{% endif %}</pre>
-        </dd>
-
-        <dt>{% trans "TLS?" %}</dt>
-        <dd>
-<pre class="val">{% if mail_use_tls %}{% trans "Yes" %}{% else %}{% trans "No" %}{% endif %}</pre>
-        </dd>
-
-        <dt>{% trans "Mailing List Namespace" %}</dt>
-        <dd>
-<pre class="val">{{ mail_list_namespace }}</pre>
-        </dd>
-    </dl>
-
-    <h3>{% trans "Test Settings" %}</h3>
-
-    <form method="post" action="">
-        {% csrf_token %}
-
-        <p>{% trans "Send an email to your account's email address to confirm that everything is configured correctly." %}</p>
-
-        {{ form|as_crispy_errors }}
-
-        {% for field in form %}
-            {{ field|as_crispy_field }}
-        {% endfor %}
-
-        <input type="submit" class="btn btn-default" value="{% blocktrans with request.user.email as email %}Send a test email to {{ email }}{% endblocktrans %}">
-    </form>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/admin/status/packages.html b/src/sentry/templates/sentry/admin/status/packages.html
deleted file mode 100644
index 916d015003..0000000000
--- a/src/sentry/templates/sentry/admin/status/packages.html
+++ /dev/null
@@ -1,35 +0,0 @@
-{% extends "sentry/bases/admin.html" %}
-
-{% block admin-nav-packages %} class="active"{% endblock %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Packages" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-    <h3>{% trans "Extensions" %}</h3>
-
-    {% if extensions %}
-        <dl class="vars">
-            {% for key, value in extensions %}
-            <dt>{{ key }}</dt>
-            <dd>
-<pre class="val">{{ value }}</pre>
-            </dd>
-            {% endfor %}
-        </dl>
-    {% else %}
-        <p>{% trans "No extensions registered." %}</p>
-    {% endif %}
-
-    <h3>{% trans "Modules" %}</h3>
-    <dl class="vars">
-        {% for key, value in modules %}
-        <dt>{{ key }}</dt>
-        <dd>
-<pre class="val">{{ value }}</pre>
-        </dd>
-        {% endfor %}
-    </dl>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/admin/status/warnings.html b/src/sentry/templates/sentry/admin/status/warnings.html
deleted file mode 100644
index 15271b47c4..0000000000
--- a/src/sentry/templates/sentry/admin/status/warnings.html
+++ /dev/null
@@ -1,33 +0,0 @@
-{% extends "sentry/bases/admin.html" %}
-
-{% block admin-nav-warnings %} class="active"{% endblock %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}System Warnings | {{ block.super }}{% endblock %}
-
-{% block main %}
-    <h3>System Warnings</h3>
-    {% if groups or warnings %}
-        <p><a href="https://docs.sentry.io/on-premise/server/warnings/">Check out our guide</a> for more information on how to resolve these issues.</p>
-        {% for group, items in groups %}
-            <h4>{{ group }}</h4>
-            <ul>
-                {% for warning in items %}
-                    <li>{{ warning }}</li>
-                {% endfor %}
-            </ul>
-        {% endfor %}
-        {% if warnings %}
-            <h4>Miscellaneous</h4>
-            <ul>
-                {% for warning in warnings %}
-                    <li>{{ warning }}</li>
-                {% endfor %}
-            </ul>
-        {% endif %}
-    {% else %}
-        There are no warnings at this time.
-    {% endif %}
-{% endblock %}
diff --git a/src/sentry/templates/sentry/admin/users/new.html b/src/sentry/templates/sentry/admin/users/new.html
deleted file mode 100644
index 2556065456..0000000000
--- a/src/sentry/templates/sentry/admin/users/new.html
+++ /dev/null
@@ -1,14 +0,0 @@
-{% extends "sentry/bases/admin.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "New User" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-    <section class="body">
-        <h3>New User</h3>
-
-        {% include "sentry/partial/_form.html" %}
-    </section>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/bases/admin.html b/src/sentry/templates/sentry/bases/admin.html
index 6fbd8ce246..67d0112a87 100644
--- a/src/sentry/templates/sentry/bases/admin.html
+++ b/src/sentry/templates/sentry/bases/admin.html
@@ -12,11 +12,11 @@
         <li><a href="{% absolute_uri '/manage/' %}">{% trans "Overview" %}</a></li>
         <li><a href="{% absolute_uri '/manage/buffer/' %}">{% trans "Buffer" %}</a></li>
         <li><a href="{% absolute_uri '/manage/queue/' %}">{% trans "Queue" %}</a></li>
-        <li{% block admin-nav-status %}{% endblock %}><a href="{% url 'sentry-admin-status' %}">{% trans "Environment" %}</a></li>
-        <li{% block admin-nav-packages %}{% endblock %}><a href="{% url 'sentry-admin-packages-status' %}">{% trans "Packages" %}</a></li>
-        <li{% block admin-nav-mail %}{% endblock %}><a href="{% url 'sentry-admin-mail-status' %}">{% trans "Mail" %}</a></li>
+        <li><a href="{% absolute_uri '/manage/status/environment/' %}">{% trans "Environment" %}</a></li>
+        <li><a href="{% absolute_uri '/manage/status/packages/' %}">{% trans "Packages" %}</a></li>
+        <li><a href="{% absolute_uri '/manage/status/mail/' %}">{% trans "Mail" %}</a></li>
         <li><a href="{% absolute_uri '/manage/settings/' %}">{% trans "Settings" %}</a></li>
-        <li{% block admin-nav-warnings %}{% endblock %}><a href="{% url 'sentry-admin-warnings-status' %}">Warnings</a></li>
+        <li><a href="{% absolute_uri '/manage/status/warnings/' %}">{% trans "Warnings" %}</a></li>
     </ul>
 
     <h6 class="nav-header">{% trans "Manage" %}</h6>
diff --git a/src/sentry/web/forms/__init__.py b/src/sentry/web/forms/__init__.py
index 4b25f3b89f..85b14bb114 100644
--- a/src/sentry/web/forms/__init__.py
+++ b/src/sentry/web/forms/__init__.py
@@ -19,17 +19,6 @@ class BaseUserForm(forms.ModelForm):
     name = forms.CharField(required=True, label=_('Name'))
 
 
-class NewUserForm(BaseUserForm):
-    send_welcome_mail = forms.BooleanField(
-        required=False,
-        help_text=_("Send this user a welcome email which will contain their generated password.")
-    )
-
-    class Meta:
-        fields = ('name', 'username', 'email')
-        model = User
-
-
 class ChangeUserForm(BaseUserForm):
     is_staff = forms.BooleanField(
         required=False,
@@ -71,10 +60,6 @@ class RemoveUserForm(forms.Form):
     )
 
 
-class TestEmailForm(forms.Form):
-    pass
-
-
 class NewNoteForm(forms.Form):
     text = forms.CharField(
         widget=forms.Textarea(attrs={'rows': '1',
diff --git a/src/sentry/web/frontend/admin.py b/src/sentry/web/frontend/admin.py
index 22b2f9704a..39de912a3f 100644
--- a/src/sentry/web/frontend/admin.py
+++ b/src/sentry/web/frontend/admin.py
@@ -7,31 +7,18 @@ sentry.web.frontend.admin
 """
 from __future__ import absolute_import, print_function
 
-import functools
-import logging
-import sys
-import uuid
-from collections import defaultdict
-
-import pkg_resources
 import six
-from django.conf import settings
 from django.core.context_processors import csrf
-from django.db import transaction
 from django.http import HttpResponse, HttpResponseRedirect
 from django.views.decorators.csrf import csrf_protect
 
-from sentry import options
-from sentry.app import env
 from sentry.models import Project, User
 from sentry.plugins import plugins
-from sentry.utils.email import send_mail
 from sentry.utils.http import absolute_uri
-from sentry.utils.warnings import DeprecatedSettingWarning, UnsupportedBackend, seen_warnings
 from sentry.web.decorators import requires_admin
-from sentry.web.forms import (ChangeUserForm, NewUserForm, RemoveUserForm, TestEmailForm)
+from sentry.web.forms import (ChangeUserForm, RemoveUserForm)
 from sentry.utils import auth
-from sentry.web.helpers import render_to_response, render_to_string
+from sentry.web.helpers import render_to_response
 
 
 def configure_plugin(request, slug):
@@ -53,54 +40,6 @@ def configure_plugin(request, slug):
     )
 
 
-@requires_admin
-@transaction.atomic
-@csrf_protect
-def create_new_user(request):
-    form = NewUserForm(
-        request.POST or None, initial={
-            'send_welcome_mail': True,
-            'create_project': True,
-        }
-    )
-    if form.is_valid():
-        user = form.save(commit=False)
-
-        # create a random password
-        password = uuid.uuid4().hex
-        user.set_password(password)
-
-        user.save()
-
-        if form.cleaned_data['send_welcome_mail']:
-            context = {
-                'username': user.username,
-                'password': password,
-                'url': absolute_uri(auth.get_login_url()),
-            }
-            body = render_to_string('sentry/emails/welcome_mail.txt', context, request)
-
-            try:
-                send_mail(
-                    '%s Welcome to Sentry' % (options.get('mail.subject-prefix'), ),
-                    body,
-                    options.get('mail.from'), [user.email],
-                    fail_silently=False
-                )
-            except Exception as e:
-                logger = logging.getLogger('sentry.mail.errors')
-                logger.exception(e)
-
-        return HttpResponseRedirect(absolute_uri('/manage/users/'))
-
-    context = {
-        'form': form,
-    }
-    context.update(csrf(request))
-
-    return render_to_response('sentry/admin/users/new.html', context, request)
-
-
 @requires_admin
 @csrf_protect
 def edit_user(request, user_id):
@@ -156,114 +95,3 @@ def remove_user(request, user_id):
     })
 
     return render_to_response('sentry/admin/users/remove.html', context, request)
-
-
-@requires_admin
-def status_env(request):
-    reserved = ('PASSWORD', 'SECRET', 'KEY')
-    config = []
-    for k in sorted(dir(settings)):
-        v_repr = repr(getattr(settings, k))
-        if any(r.lower() in v_repr.lower() for r in reserved):
-            v_repr = '*' * 16
-        if any(r in k for r in reserved):
-            v_repr = '*' * 16
-        if k.startswith('_'):
-            continue
-        if k.upper() != k:
-            continue
-        config.append((k, v_repr))
-
-    return render_to_response(
-        'sentry/admin/status/env.html', {
-            'python_version': sys.version,
-            'config': config,
-            'environment': env.data,
-        }, request
-    )
-
-
-@requires_admin
-def status_packages(request):
-    config = []
-    for k in sorted(dir(settings)):
-        if k == 'KEY':
-            continue
-        if k.startswith('_'):
-            continue
-        if k.upper() != k:
-            continue
-        config.append((k, getattr(settings, k)))
-
-    return render_to_response(
-        'sentry/admin/status/packages.html', {
-            'modules':
-            sorted([(p.project_name, p.version) for p in pkg_resources.working_set]),
-            'extensions': [
-                (p.get_title(), '%s.%s' % (p.__module__, p.__class__.__name__))
-                for p in plugins.all(version=None)
-            ],
-        },
-        request
-    )
-
-
-@requires_admin
-def status_warnings(request):
-    groupings = {
-        DeprecatedSettingWarning: 'Deprecated Settings',
-        UnsupportedBackend: 'Unsupported Backends',
-    }
-
-    groups = defaultdict(list)
-    warnings = []
-    for warning in seen_warnings:
-        cls = type(warning)
-        if cls in groupings:
-            groups[cls].append(warning)
-        else:
-            warnings.append(warning)
-
-    sort_by_message = functools.partial(sorted, key=six.binary_type)
-
-    return render_to_response(
-        'sentry/admin/status/warnings.html',
-        {
-            'groups':
-            sorted([(groupings[key], sort_by_message(values)) for key, values in groups.items()]),
-            'warnings':
-            sort_by_message(warnings),
-        },
-        request,
-    )
-
-
-@requires_admin
-@csrf_protect
-def status_mail(request):
-    form = TestEmailForm(request.POST or None)
-
-    if form.is_valid():
-        body = """This email was sent as a request to test the Sentry outbound email configuration."""
-        try:
-            send_mail(
-                '%s Test Email' % (options.get('mail.subject-prefix'), ),
-                body,
-                options.get('mail.from'), [request.user.email],
-                fail_silently=False
-            )
-        except Exception as e:
-            form.errors['__all__'] = [six.text_type(e)]
-
-    return render_to_response(
-        'sentry/admin/status/mail.html', {
-            'form': form,
-            'mail_host': options.get('mail.host'),
-            'mail_password': bool(options.get('mail.password')),
-            'mail_username': options.get('mail.username'),
-            'mail_port': options.get('mail.port'),
-            'mail_use_tls': options.get('mail.use-tls'),
-            'mail_from': options.get('mail.from'),
-            'mail_list_namespace': options.get('mail.list-namespace'),
-        }, request
-    )
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index b9adbcab0e..a4e4d94a0e 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -307,19 +307,7 @@ urlpatterns += patterns(
     url(r'^account/', generic_react_page_view),
     url(r'^onboarding/', generic_react_page_view),
 
-    # Admin
-    url(r'^manage/status/environment/$',
-        admin.status_env, name='sentry-admin-status'),
-    url(r'^manage/status/packages/$', admin.status_packages,
-        name='sentry-admin-packages-status'),
-    url(r'^manage/status/mail/$', admin.status_mail,
-        name='sentry-admin-mail-status'),
-    url(r'^manage/status/warnings/$', admin.status_warnings,
-        name='sentry-admin-warnings-status'),
-
     # Admin - Users
-    url(r'^manage/users/new/$', admin.create_new_user,
-        name='sentry-admin-new-user'),
     url(r'^manage/users/(?P<user_id>\d+)/$',
         admin.edit_user, name='sentry-admin-edit-user'),
     url(
diff --git a/tests/sentry/web/frontend/test_admin.py b/tests/sentry/web/frontend/test_admin.py
deleted file mode 100644
index dd5cd70486..0000000000
--- a/tests/sentry/web/frontend/test_admin.py
+++ /dev/null
@@ -1,59 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-from exam import fixture
-
-from sentry.testutils import TestCase
-
-
-class EnvStatusTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-admin-status')
-
-    def test_requires_auth(self):
-        resp = self.client.get(self.path)
-        self.assertEquals(resp.status_code, 302)
-
-    def test_renders_template(self):
-        self.login_as(self.user, superuser=True)
-
-        resp = self.client.get(self.path)
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/admin/status/env.html')
-
-
-class PackageStatusTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-admin-packages-status')
-
-    def test_requires_auth(self):
-        resp = self.client.get(self.path)
-        self.assertEquals(resp.status_code, 302)
-
-    def test_renders_template(self):
-        self.login_as(self.user, superuser=True)
-
-        resp = self.client.get(self.path)
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/admin/status/packages.html')
-
-
-class MailStatusTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-admin-mail-status')
-
-    def test_requires_auth(self):
-        resp = self.client.get(self.path)
-        self.assertEquals(resp.status_code, 302)
-
-    def test_renders_template(self):
-        self.login_as(self.user, superuser=True)
-
-        resp = self.client.get(self.path)
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/admin/status/mail.html')
