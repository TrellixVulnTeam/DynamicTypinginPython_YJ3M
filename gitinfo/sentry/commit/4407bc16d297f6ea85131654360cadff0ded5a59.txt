commit 4407bc16d297f6ea85131654360cadff0ded5a59
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Fri Feb 17 15:17:14 2017 +0100

    Add reprocessing hint, Set reprocessing default to false

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 4e4c6e09a9..b93fccfd1a 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -144,7 +144,8 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             'sentry:csp_ignored_sources_defaults': bool(project.get_option('sentry:csp_ignored_sources_defaults', True)),
             'sentry:csp_ignored_sources': '\n'.join(project.get_option('sentry:csp_ignored_sources', []) or []),
             'sentry:default_environment': project.get_option('sentry:default_environment'),
-            'sentry:reprocessing_active': bool(project.get_option('sentry:reprocessing_active', True)),
+            'sentry:reprocessing_show_hint': bool(project.get_option('sentry:reprocessing_show_hint', True)),
+            'sentry:reprocessing_active': bool(project.get_option('sentry:reprocessing_active', False)),
             'feedback:branding': project.get_option('feedback:branding', '1') == '1',
         }
         data['plugins'] = serialize([
@@ -286,7 +287,11 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             if 'feedback:branding' in options:
                 project.update_option('feedback:branding', '1' if options['feedback:branding'] else '0')
             if 'sentry:reprocessing_active' in options:
-                project.update_option('sentry:reprocessing_active', bool(options['sentry:reprocessing_active']))
+                project.update_option('sentry:reprocessing_active',
+                    bool(options['sentry:reprocessing_active']))
+            if 'sentry:reprocessing_show_hint' in options:
+                project.update_option('sentry:reprocessing_show_hint',
+                    bool(options['sentry:reprocessing_show_hint']))
 
             self.create_audit_entry(
                 request=request,
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 58cb8d8721..a29ae3f9ec 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -469,10 +469,10 @@ class NativeStacktraceProcessor(StacktraceProcessor):
                 if not symbolicated_frames:
                     return None, [raw_frame], []
             except SymbolicationFailed as e:
-                reprocessing_active = True
+                reprocessing_active = False
                 if self.project:
                     reprocessing_active = bool(
-                        self.project.get_option('sentry:reprocessing_active', True)
+                        self.project.get_option('sentry:reprocessing_active', False)
                     )
                 # User fixable but fatal errors are reported as processing
                 # issues but only if the feature is activated.
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index aba337e2ed..a9105a2e6f 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -5,6 +5,7 @@ import EventContexts from './contexts';
 import EventContextSummary from './contextSummary';
 import EventDataSection from './eventDataSection';
 import EventErrors from './errors';
+import ReprocessingHint from './reprocessingHint';
 import EventExtraData from './extraData';
 import EventPackageData from './packageData';
 import EventTags from './eventTags';
@@ -112,6 +113,13 @@ const EventEntries = React.createClass({
             group={group}
             event={evt} />
         }
+        {!utils.objectIsEmpty(evt.errors) &&
+          <ReprocessingHint
+            group={group}
+            event={evt}
+            orgId={this.props.orgId}
+            projectId={project.slug} />
+        }
         {!utils.objectIsEmpty(evt.errors) &&
           <EventErrors
             group={group}
diff --git a/src/sentry/static/sentry/app/components/events/reprocessingHint.jsx b/src/sentry/static/sentry/app/components/events/reprocessingHint.jsx
new file mode 100644
index 0000000000..b5bcec756f
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/reprocessingHint.jsx
@@ -0,0 +1,132 @@
+import React from 'react';
+
+import EventDataSection from './eventDataSection';
+import PropTypes from '../../proptypes';
+import ProjectState from '../../mixins/projectState';
+import ApiMixin from '../../mixins/apiMixin';
+import ReactCSSTransitionGroup from 'react-addons-css-transition-group';
+import {t} from '../../locale';
+
+const ReprocessingHint = React.createClass({
+  propTypes: {
+    group: PropTypes.Group.isRequired,
+    event: PropTypes.Event.isRequired,
+    orgId: React.PropTypes.string.isRequired,
+    projectId: React.PropTypes.string.isRequired
+  },
+
+  mixins: [
+    ProjectState,
+    ApiMixin
+  ],
+
+  getInitialState(){
+    return {
+      hideHint: false,
+      loading: true,
+      projectSettings: null,
+    };
+  },
+
+  componentDidMount() {
+    this.fetchData();
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    if (this.state.hideHint != nextState.hideHint) {
+      return true;
+    }
+    if (this.state.projectSettings != nextState.projectSettings) {
+      return true;
+    }
+    if (this.state.loading != nextState.loading) {
+      return true;
+    }
+    return this.props.event.id !== nextProps.event.id;
+  },
+
+  fetchData() {
+    if (this.state.projectSettings !== null) {
+      return;
+    }
+    this.setState({
+      loading: true,
+    });
+    this.api.request(`/projects/${this.props.orgId}/${this.props.projectId}/`, {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          projectSettings: data.options,
+        });
+      },
+      complete: () => {
+        this.setState({
+          loading: false,
+        });
+      }
+    });
+  },
+
+  hide() {
+    this.setState({hideHint: !this.state.hideHint});
+    // Fire and forget
+    this.api.request(`/projects/${this.props.orgId}/${this.props.projectId}/`, {
+      method: 'PUT',
+      data: {options: {'sentry:reprocessing_show_hint': false}}
+    });
+  },
+
+  renderHint() {
+    let link = `/${this.props.orgId}/${this.props.projectId}/settings/processing-issues/`;
+
+    return(
+      <EventDataSection
+            group={this.props.group}
+            event={this.props.event}
+            type="hint"
+            className="errors hint">
+            <span className="icon icon-exclamation event" />
+          <p>
+            <a className="pull-right" onClick={this.hide}>{t('Dismiss')}</a>
+            {
+              t('Errors like this can be fixes with reprocessing.')
+            }
+            {' '}
+            <a href={link}>{t('Show me')}</a>
+          </p>
+        </EventDataSection>
+    );
+  },
+
+  render() {
+    let errors = this.props.event.errors;
+    let hideHint = this.state.hideHint;
+    let shouldRender = true;
+
+    if (hideHint || this.state.loading || this.state.projectSettings === null) {
+      shouldRender = false;
+    }
+
+    if (this.state.projectSettings !== null &&
+      (this.state.projectSettings['sentry:reprocessing_show_hint'] === false ||
+      this.state.projectSettings['sentry:reprocessing_active'] === true)) {
+      shouldRender = false;
+    }
+
+    let reprocessingFixable = false;
+    errors.map((error) => {
+      if (error.type == 'native_missing_dsym') {
+        reprocessingFixable = true;
+      }
+    });
+
+    shouldRender = shouldRender && reprocessingFixable;
+
+    return (
+      <ReactCSSTransitionGroup transitionName="hint" transitionEnterTimeout={500} transitionLeaveTimeout={500}>
+        {shouldRender ? this.renderHint() : null}
+      </ReactCSSTransitionGroup>
+    );
+  }
+});
+
+export default ReprocessingHint;
diff --git a/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
index 1dce5beee0..d2bd394ed1 100644
--- a/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
+++ b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
@@ -279,7 +279,7 @@ const ProjectProcessingIssues = React.createClass({
     );
   },
 
-  renderReprocessingCheckbox() {
+  renderReprocessingSettings() {
     if (this.state.loading) {
       return this.renderLoading();
     }
@@ -302,11 +302,8 @@ const ProjectProcessingIssues = React.createClass({
                 key="reprocessing-active"
                 name="reprocessing-active"
                 label={t('Reprocessing active')}
-                help={t(`If you are having problems with the reprocessing feature
-                  you can turn it off here. If you save the changes all Processing
-                  Issues will be deleted and the Events will be processed.
-                  Keep in mind that these Events will probably show incomplete
-                  stacktraces. Everything will be fine again, we promise ;)`)}
+                help={t(`When you save the changes all Processing
+                  Issues will be deleted and future Events can be reprocessed.`)}
                 value={this.state.formData['sentry:reprocessing_active']}
                 error={errors ? errors['sentry:reprocessing_active'] : ''}
                 onChange={this.onFieldChange.bind(this, 'sentry:reprocessing_active')} />
@@ -357,6 +354,7 @@ const ProjectProcessingIssues = React.createClass({
   render() {
     return (
       <div>
+        {this.renderReprocessingSettings()}
         <h1>{t('Processing Issues')}</h1>
         <p>{t(`
           For some platforms the event processing requires configuration or
@@ -367,7 +365,6 @@ const ProjectProcessingIssues = React.createClass({
         `)}</p>
         {this.renderDebugTable()}
         {this.renderResolveButton()}
-        {this.renderReprocessingCheckbox()}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index c19377094f..09edbcf178 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1814,6 +1814,15 @@ div.commands {
   position: relative;
   .clearfix;
 
+  &.hint {
+    border-top: 1px solid @purple-lightest !important;
+    background: lighten(@purple-lightest, 15%);
+    margin-top: -1px !important;
+    padding-top: 15px !important;
+    font-size: 14px;
+    position: relative;
+  }
+
   .icon-alert {
     position: absolute;
     top: 17px;
@@ -1821,6 +1830,13 @@ div.commands {
     color: @red;
   }
 
+  .icon-exclamation.event {
+    position: absolute;
+    top: 17px;
+    font-size: 16px;
+    color: black;
+  }
+
   .box-content {
     padding: 10px 20px;
 
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 1250802f8f..4a8c4ebe7a 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -696,6 +696,24 @@ table.integrations {
   }
 }
 
+.hint-enter {
+  opacity: 0.01;
+}
+
+.hint-enter.hint-enter-active {
+  opacity: 1;
+  transition: opacity 500ms ease-in;
+}
+
+.hint-leave {
+  opacity: 1;
+}
+
+.hint-leave.hint-leave-active {
+  opacity: 0.01;
+  transition: opacity 300ms ease-in;
+}
+
 .toast {
   .loading.mini();
   padding: 20px 30px;
