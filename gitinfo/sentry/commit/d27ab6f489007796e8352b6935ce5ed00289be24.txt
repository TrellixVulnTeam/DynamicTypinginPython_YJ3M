commit d27ab6f489007796e8352b6935ce5ed00289be24
Author: Ben Vinegar <ben@benv.ca>
Date:   Mon Sep 21 13:13:17 2015 -0700

    Fix "resolve all" confirmation button (fixes #1971)

diff --git a/src/sentry/static/sentry/app/stores/groupStore.jsx b/src/sentry/static/sentry/app/stores/groupStore.jsx
index 83d3094876..32179ec80c 100644
--- a/src/sentry/static/sentry/app/stores/groupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupStore.jsx
@@ -283,7 +283,9 @@ var GroupStore = Reflux.createStore({
   },
 
   onUpdate(changeId, itemIds, data) {
-    if (typeof itemIds === 'undefined') this.items.map(item => item.id);
+    if (typeof itemIds === 'undefined') {
+      itemIds = this.items.map(item => item.id);
+    }
     itemIds.forEach(itemId => {
       this.addStatus(itemId, 'update');
       this.pendingChanges.push(changeId, itemId, data);
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index e8f8197efd..9759325977 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -50,7 +50,7 @@ var StreamActions = React.createClass({
     var selectedIds;
 
     if (actionType === this.props.actionTypes.ALL) {
-      selectedIds = this.props.groupIds;
+      selectedIds = undefined; // undefined means "all"
     } else if (actionType === this.props.actionTypes.SELECTED) {
       var itemIdSet = SelectedGroupStore.getSelectedIds();
       selectedIds = this.props.groupIds.filter(
diff --git a/tests/js/spec/stores/groupStore.spec.jsx b/tests/js/spec/stores/groupStore.spec.jsx
index 34e4f4418d..ec5b55190b 100644
--- a/tests/js/spec/stores/groupStore.spec.jsx
+++ b/tests/js/spec/stores/groupStore.spec.jsx
@@ -3,6 +3,11 @@ import GroupStore from 'app/stores/groupStore';
 describe('GroupStore', function () {
   beforeEach(function () {
     GroupStore.reset();
+    this.sandbox = sinon.sandbox.create();
+  });
+
+  afterEach(function() {
+    this.sandbox.restore();
   });
 
   describe('onMergeSuccess()', function () {
@@ -25,4 +30,34 @@ describe('GroupStore', function () {
       ]);
     });
   });
+
+  describe("onUpdate()", function () {
+    it("should treat undefined itemIds argument as 'all'", function () {
+      GroupStore.items = [
+        { id: 1 },
+        { id: 2 },
+        { id: 3 },
+      ];
+
+      this.sandbox.stub(GroupStore, 'trigger');
+      GroupStore.onUpdate(1337, undefined, 'somedata');
+
+      expect(GroupStore.trigger.withArgs(new Set([1,2,3])).calledOnce).to.be.ok;
+    });
+  });
+
+  describe("onUpdateSuccess()", function () {
+    it("should treat undefined itemIds argument as 'all'", function () {
+      GroupStore.items = [
+        { id: 1 },
+        { id: 2 },
+        { id: 3 },
+      ];
+
+      this.sandbox.stub(GroupStore, 'trigger');
+      GroupStore.onUpdateSuccess(1337, undefined, 'somedata');
+
+      expect(GroupStore.trigger.withArgs(new Set([1,2,3])).calledOnce).to.be.ok;
+    });
+  });
 });
diff --git a/tests/js/spec/views/stream/actions.spec.jsx b/tests/js/spec/views/stream/actions.spec.jsx
new file mode 100644
index 0000000000..a9ff91109a
--- /dev/null
+++ b/tests/js/spec/views/stream/actions.spec.jsx
@@ -0,0 +1,68 @@
+var React = require("react/addons");
+var TestUtils = React.addons.TestUtils;
+
+var api = require("app/api");
+var stubReactComponents = require("../../../helpers/stubReactComponent");
+
+var StreamActions = require("app/views/stream/actions");
+var ActionLink = require("app/views/stream/actionLink");
+var DropdownLink = require("app/components/dropdownLink");
+var MenuItem = require("app/components/menuItem");
+
+var SelectedGroupStore = require("app/stores/selectedGroupStore");
+
+describe("StreamActions", function() {
+
+  beforeEach(function() {
+    this.sandbox = sinon.sandbox.create();
+
+    this.stubbedApiRequest = this.sandbox.stub(api, "request");
+    stubReactComponents(this.sandbox, [ActionLink, DropdownLink, MenuItem]);
+  });
+
+  afterEach(function() {
+    this.sandbox.restore();
+  });
+
+  describe("actionSelectedGroups()", function () {
+    beforeEach(function() {
+      this.actions = TestUtils.renderIntoDocument(
+          <StreamActions
+            orgId="1337"
+            projectId="1"
+            groupIds={[1,2,3]}
+            onRealtimeChange={function(){}}
+            onSelectedStatsPeriod={function(){}}
+            realtimeActive={false}
+            statsPeriod="24h"
+            />
+          );
+    });
+
+    describe("for all items", function () {
+      it("should invoke the callback with 'undefined' and deselect all", function () {
+        this.sandbox.stub(SelectedGroupStore, 'deselectAll');
+        var callback = this.sandbox.stub();
+
+        this.actions.actionSelectedGroups(this.actions.props.actionTypes.ALL, callback);
+
+        expect(callback.withArgs(undefined).calledOnce).to.be.ok;
+        expect(SelectedGroupStore.deselectAll.calledOnce).to.be.ok;
+      });
+    });
+
+    describe("for selected items", function () {
+      it("should invoke the callback with an array of selected items and deselect all", function () {
+        this.sandbox.stub(SelectedGroupStore, 'deselectAll');
+        this.sandbox.stub(SelectedGroupStore, 'getSelectedIds').returns(new Set([1,2,3]));
+
+        var callback = this.sandbox.stub();
+        this.actions.actionSelectedGroups(this.actions.props.actionTypes.SELECTED, callback);
+
+        expect(callback.withArgs([1,2,3]).calledOnce).to.be.ok;
+        expect(SelectedGroupStore.deselectAll.calledOnce).to.be.ok;
+      });
+    });
+  });
+});
+
