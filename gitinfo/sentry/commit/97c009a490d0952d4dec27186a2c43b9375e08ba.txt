commit 97c009a490d0952d4dec27186a2c43b9375e08ba
Author: Ben Vinegar <benvinegar@users.noreply.github.com>
Date:   Tue Oct 18 17:32:16 2016 -0700

    Fix graphs not rendering on compact issues (org db) (#4395)
    
    cc @ckj @getsentry/product

diff --git a/src/sentry/static/sentry/app/components/compactIssue.jsx b/src/sentry/static/sentry/app/components/compactIssue.jsx
index ef2894b9ac..47bd35d97f 100644
--- a/src/sentry/static/sentry/app/components/compactIssue.jsx
+++ b/src/sentry/static/sentry/app/components/compactIssue.jsx
@@ -184,7 +184,7 @@ const CompactIssue = React.createClass({
         <CompactIssueHeader data={issue} orgId={orgId} projectId={projectId} />
         {this.props.statsPeriod &&
           <div className="event-graph">
-            <GroupChart id={id} statsPeriod={this.props.statsPeriod} />
+            <GroupChart id={id} statsPeriod={this.props.statsPeriod} data={this.props.data}/>
           </div>
         }
         {this.props.showActions &&
diff --git a/src/sentry/static/sentry/app/components/stream/group.jsx b/src/sentry/static/sentry/app/components/stream/group.jsx
index 8ec9d601f1..97da05e21d 100644
--- a/src/sentry/static/sentry/app/components/stream/group.jsx
+++ b/src/sentry/static/sentry/app/components/stream/group.jsx
@@ -204,7 +204,7 @@ const StreamGroup = React.createClass({
           <AssigneeSelector id={data.id} />
         </div>
         <div className="col-md-2 hidden-sm hidden-xs event-graph align-right">
-          <GroupChart id={data.id} statsPeriod={this.props.statsPeriod} />
+          <GroupChart id={data.id} statsPeriod={this.props.statsPeriod} data={data}/>
         </div>
         <div className="col-md-1 col-xs-2 event-count align-right">
           <Count value={data.count} />
diff --git a/src/sentry/static/sentry/app/components/stream/groupChart.jsx b/src/sentry/static/sentry/app/components/stream/groupChart.jsx
index 427dfc3c19..62d20ed7f0 100644
--- a/src/sentry/static/sentry/app/components/stream/groupChart.jsx
+++ b/src/sentry/static/sentry/app/components/stream/groupChart.jsx
@@ -1,65 +1,27 @@
 import LazyLoad from 'react-lazy-load';
 import React from 'react';
-import Reflux from 'reflux';
-
 import BarChart from '../barChart';
-import GroupStore from '../../stores/groupStore';
-import {valueIsEqual} from '../../utils';
 
 const GroupChart = React.createClass({
   propTypes: {
-    id: React.PropTypes.string.isRequired,
     statsPeriod: React.PropTypes.string.isRequired,
+    data: React.PropTypes.object.isRequired
   },
 
-  mixins: [
-    Reflux.listenTo(GroupStore, 'onGroupChange')
-  ],
-
-  getInitialState() {
-    let data = GroupStore.get(this.props.id);
-    return {
-      stats: data ? data.stats[this.props.statsPeriod] : null
-    };
-  },
-
-  componentWillReceiveProps(nextProps) {
-    if (!valueIsEqual(nextProps, this.props)) {
-      let data = GroupStore.get(this.props.id);
-      this.setState({
-        stats: data.stats[this.props.statsPeriod]
-      });
-    }
-  },
-
-  shouldComponentUpdate(nextProps, nextState) {
-    if (!valueIsEqual(this.props, nextProps, true)) {
-      return true;
-    }
-    if (!valueIsEqual(this.state.stats, nextState.stats, true)) {
-      return true;
-    }
-    return false;
-  },
-
-  onGroupChange(itemIds) {
-    if (!itemIds.has(this.props.id)) {
-      return;
-    }
-
-    let id = this.props.id;
-    let data = GroupStore.get(id);
-
-    this.setState({
-      stats: data.stats[this.props.statsPeriod],
-    });
+  shouldComponentUpdate(nextProps) {
+    // Sometimes statsPeriod updates before graph data has been
+    // pulled from server / propagated down to components ...
+    // don't update until data is available
+    let {data, statsPeriod} = nextProps;
+    return data.hasOwnProperty(statsPeriod);
   },
 
   render() {
-    if (!this.state.stats || !this.state.stats.length)
+    let stats = this.props.statsPeriod ? this.props.data.stats[this.props.statsPeriod] : null;
+    if (!stats || !stats.length)
       return null;
 
-    let chartData = this.state.stats.map((point) => {
+    let chartData = stats.map((point) => {
       return {x: point[0], y: point[1]};
     });
 
