commit 010f26c743e653e5a432c8653316ba8271873626
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Feb 23 21:37:59 2012 -0800

    Added send_to_admins back, keeping send_to_members, and adjust tests

diff --git a/sentry/plugins/sentry_mail/__init__.py b/sentry/plugins/sentry_mail/__init__.py
index f72e5ab25e..1ba739b9a5 100644
--- a/sentry/plugins/sentry_mail/__init__.py
+++ b/sentry/plugins/sentry_mail/__init__.py
@@ -28,6 +28,8 @@ class MailConfigurationForm(forms.Form):
             'placeholder': 'you@example.com, \nother@example.com'}))
     send_to_members = forms.BooleanField(label=_('Include project members'), initial=False, required=False,
         help_text=_('Send emails to all members of this project.'))
+    send_to_admins = forms.BooleanField(label=_('Include sentry admins'), initial=False, required=False,
+        help_text=_('Send emails to all administrators of this Sentry server.'))
 
     def clean_send_to(self):
         value = self.cleaned_data['send_to']
@@ -46,7 +48,7 @@ class MailProcessor(Plugin):
     project_conf_form = MailConfigurationForm
 
     def __init__(self, min_level=NOTSET, include_loggers=NOTSET, exclude_loggers=NOTSET,
-                 send_to=None, send_to_members=NOTSET, *args, **kwargs):
+                 send_to=None, send_to_members=NOTSET, send_to_admins=NOTSET, *args, **kwargs):
 
         super(MailProcessor, self).__init__(*args, **kwargs)
 
@@ -58,12 +60,15 @@ class MailProcessor(Plugin):
             exclude_loggers = settings.MAIL_EXCLUDE_LOGGERS
         if send_to_members is NOTSET:
             send_to_members = True
+        if send_to_admins is NOTSET:
+            send_to_admins = False
 
         self.min_level = min_level
         self.include_loggers = include_loggers
         self.exclude_loggers = exclude_loggers
         self.send_to = send_to
         self.send_to_members = send_to_members
+        self.send_to_admins = send_to_admins
         self.subject_prefix = settings.EMAIL_SUBJECT_PREFIX
 
     def _send_mail(self, subject, body, html_body=None, project=None, fail_silently=True):
@@ -83,13 +88,19 @@ class MailProcessor(Plugin):
             elif project is not None:
                 send_to_list = project.member_set.values_list('user__email', flat=True)
             else:
-                send_to_list = settings.ADMINS
+                send_to_list = []
 
         if isinstance(send_to_list, basestring):
             send_to_list = send_to_list.split(',')
 
         send_to_list = set(send_to_list)
 
+        send_to_admins = self.get_option('send_to_admins', project)
+        if send_to_admins is None:
+            send_to_admins = self.send_to_admins
+        if send_to_admins:
+            send_to_list |= set(settings.ADMINS)
+
         send_to_members = self.get_option('send_to_members', project)
         if send_to_members is None:
             send_to_members = self.send_to_members
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 7a9c96ea9b..161ded5860 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -14,36 +14,41 @@ from tests.base import TestCase
 
 class MailProcessorTest(TestCase):
     @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
+    @mock.patch('sentry.plugins.sentry_mail.MailProcessor.get_send_to', Mock(return_value=[]))
     def test_should_mail_no_send_to(self):
-        p = MailProcessor(send_to=())
+        p = MailProcessor()
         self.assertFalse(p.should_mail(group=Mock(), event=Mock()))
 
     @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
+    @mock.patch('sentry.plugins.sentry_mail.MailProcessor.get_send_to', Mock(return_value=['foo@example.com']))
     def test_should_mail_not_min_level(self):
-        p = MailProcessor(send_to=['foo@exampe.com'], min_level=2)
+        p = MailProcessor(min_level=2)
         group = Mock(spec=Group)
         group.level = 1
         self.assertFalse(p.should_mail(group=group, event=Mock()))
 
     @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
+    @mock.patch('sentry.plugins.sentry_mail.MailProcessor.get_send_to', Mock(return_value=['foo@example.com']))
     def test_should_mail_not_included(self):
-        p = MailProcessor(send_to=['foo@exampe.com'], min_level=None, include_loggers=['foo'])
+        p = MailProcessor(min_level=None, include_loggers=['foo'])
         group = Mock(spec=Group)
         group.level = 5
         group.logger = 'root'
         self.assertFalse(p.should_mail(group=group, event=Mock()))
 
     @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
+    @mock.patch('sentry.plugins.sentry_mail.MailProcessor.get_send_to', Mock(return_value=['foo@example.com']))
     def test_should_mail_excluded(self):
-        p = MailProcessor(send_to=['foo@exampe.com'], min_level=None, exclude_loggers=['root'])
+        p = MailProcessor(min_level=None, exclude_loggers=['root'])
         group = Mock(spec=Group)
         group.level = 5
         group.logger = 'root'
         self.assertFalse(p.should_mail(group=group, event=Mock()))
 
     @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
+    @mock.patch('sentry.plugins.sentry_mail.MailProcessor.get_send_to', Mock(return_value=['foo@example.com']))
     def test_should_mail_match(self):
-        p = MailProcessor(send_to=['foo@exampe.com'], min_level=None)
+        p = MailProcessor(min_level=None)
         group = Mock(spec=Group)
         group.level = 5
         group.logger = 'root'
@@ -92,24 +97,35 @@ class MailProcessorTest(TestCase):
                 self.assertEqual(sorted(set(member_emails)),
                                  sorted(p.get_send_to(project)))
 
-                # member emails with admins
+                # member emails with members
                 p = MailProcessor()
                 opts = {'mail:send_to_admins': True}
                 p._send_mail('', '', project=project)
                 self.assertEqual(sorted(set(member_emails + admins)),
                                  sorted(p.get_send_to(project)))
 
-                # project emails without admins
+                # project emails without members
                 p = MailProcessor()
-                opts = {'mail:send_to': ','.join(project_emails)}
+                opts = {'mail:send_to': ','.join(project_emails),
+                        'mail:send_to_members': False}
                 p._send_mail('', '', project=project)
                 self.assertEqual(sorted(set(project_emails)),
                                  sorted(p.get_send_to(project)))
 
-                # project emails with admins
+                # project emails with members
                 p = MailProcessor()
                 opts = {'mail:send_to': ','.join(project_emails),
+                        'mail:send_to_members': False,
                         'mail:send_to_admins': True}
                 p._send_mail('', '', project=project)
                 self.assertEqual(sorted(set(project_emails + admins)),
                                  sorted(p.get_send_to(project)))
+
+                # project emails with members and admins
+                p = MailProcessor()
+                opts = {'mail:send_to': ','.join(project_emails),
+                        'mail:send_to_members': True,
+                        'mail:send_to_admins': True}
+                p._send_mail('', '', project=project)
+                self.assertEqual(sorted(set(project_emails + admins + member_emails)),
+                                 sorted(p.get_send_to(project)))
