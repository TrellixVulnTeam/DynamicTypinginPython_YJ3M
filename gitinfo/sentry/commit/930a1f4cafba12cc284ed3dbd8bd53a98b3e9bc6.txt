commit 930a1f4cafba12cc284ed3dbd8bd53a98b3e9bc6
Author: Mark Story <mark@sentry.io>
Date:   Fri Sep 6 14:36:31 2019 -0400

    feat(discover2) Add HOC for discover saved queries (#14593)
    
    We'll need this component to make interacting with reflux follow
    patterns elsewhere in the application.
    
    Refs SEN-953

diff --git a/src/sentry/static/sentry/app/stores/discoverSavedQueriesStore.tsx b/src/sentry/static/sentry/app/stores/discoverSavedQueriesStore.tsx
index bca3bd55cd..31bd57cc3d 100644
--- a/src/sentry/static/sentry/app/stores/discoverSavedQueriesStore.tsx
+++ b/src/sentry/static/sentry/app/stores/discoverSavedQueriesStore.tsx
@@ -3,7 +3,7 @@ import Reflux from 'reflux';
 import {SavedQuery} from 'app/views/discover/types';
 import DiscoverSavedQueryActions from 'app/actions/discoverSavedQueryActions';
 
-type SavedQueryState = {
+export type SavedQueryState = {
   savedQueries: SavedQuery[];
   hasError: boolean;
   isLoading: boolean;
diff --git a/src/sentry/static/sentry/app/utils/withDiscoverSavedQueries.tsx b/src/sentry/static/sentry/app/utils/withDiscoverSavedQueries.tsx
new file mode 100644
index 0000000000..11fe14a3a8
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/withDiscoverSavedQueries.tsx
@@ -0,0 +1,56 @@
+import React from 'react';
+import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
+
+import DiscoverSavedQueriesStore from 'app/stores/discoverSavedQueriesStore';
+import getDisplayName from 'app/utils/getDisplayName';
+import {SavedQuery} from 'app/views/discover/types';
+
+type Props = {
+  savedQueries: SavedQuery[];
+};
+
+/**
+ * Higher order component that uses DiscoverSavedQueryStor and provides the
+ * saved queries for the current organization
+ */
+const withDiscoverSavedQueries = <P extends Props>(
+  WrappedComponent: React.ComponentType<P>
+) =>
+  createReactClass({
+    displayName: `withDiscoverSavedQuery(${getDisplayName(WrappedComponent)})`,
+    mixins: [Reflux.listenTo(DiscoverSavedQueriesStore, 'onUpdate')],
+
+    getInitialState() {
+      return {
+        savedQueries: DiscoverSavedQueriesStore.get().savedQueries,
+      };
+    },
+
+    componentDidMount() {
+      this.updateQueries();
+    },
+
+    onUpdate() {
+      this.updateQueries();
+    },
+
+    updateQueries() {
+      const state = DiscoverSavedQueriesStore.get();
+
+      if (this.state.savedQueries !== state.savedQueries) {
+        this.setState({savedQueries: state.savedQueries});
+      }
+    },
+
+    render() {
+      return (
+        <WrappedComponent
+          savedQueries={this.state.savedQueries as SavedQuery[]}
+          {...this.props as P}
+        />
+      );
+    },
+  });
+
+export default withDiscoverSavedQueries;
diff --git a/tests/js/spec/utils/withDiscoverSavedQueries.spec.jsx b/tests/js/spec/utils/withDiscoverSavedQueries.spec.jsx
new file mode 100644
index 0000000000..a069930233
--- /dev/null
+++ b/tests/js/spec/utils/withDiscoverSavedQueries.spec.jsx
@@ -0,0 +1,34 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import DiscoverSavedQueriesStore from 'app/stores/discoverSavedQueriesStore';
+import withDiscoverSavedQueries from 'app/utils/withDiscoverSavedQueries';
+
+describe('withDiscoverSavedQueries HoC', function() {
+  beforeEach(() => {
+    DiscoverSavedQueriesStore.reset();
+  });
+
+  it('works', function() {
+    const MyComponent = () => null;
+    const Container = withDiscoverSavedQueries(MyComponent);
+    const wrapper = mount(<Container />);
+
+    expect(wrapper.find('MyComponent').prop('savedQueries')).toEqual([]);
+
+    // Insert into the store
+    const query = {
+      id: '1',
+      fields: ['title', 'count()'],
+      createdAt: new Date(),
+      updatedAt: new Date(),
+      createdBy: '1',
+    };
+    DiscoverSavedQueriesStore.fetchSavedQueriesSuccess([query]);
+
+    wrapper.update();
+    const props = wrapper.find('MyComponent').prop('savedQueries');
+    expect(props).toHaveLength(1);
+    expect(props[0].id).toBe(query.id);
+  });
+});
