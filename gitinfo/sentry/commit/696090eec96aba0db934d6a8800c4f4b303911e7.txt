commit 696090eec96aba0db934d6a8800c4f4b303911e7
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Feb 20 09:14:23 2018 -0800

    feat(api): Move "transfer project" to API (#7262)

diff --git a/src/sentry/api/endpoints/project_transfer.py b/src/sentry/api/endpoints/project_transfer.py
new file mode 100644
index 0000000000..e097633949
--- /dev/null
+++ b/src/sentry/api/endpoints/project_transfer.py
@@ -0,0 +1,105 @@
+from __future__ import absolute_import
+
+import logging
+from uuid import uuid4
+from six.moves.urllib.parse import urlencode
+
+from django.utils import timezone
+from rest_framework import status
+from rest_framework.response import Response
+
+from sentry import roles, options
+from sentry.api.bases.project import ProjectEndpoint, ProjectPermission
+from sentry.api.decorators import sudo_required
+from sentry.models import (
+    AuditLogEntryEvent, OrganizationMember,
+)
+from sentry.utils.email import MessageBuilder
+from sentry.utils.http import absolute_uri
+from sentry.utils.signing import sign
+
+delete_logger = logging.getLogger('sentry.deletions.api')
+
+
+class RelaxedProjectPermission(ProjectPermission):
+    scope_map = {
+        'POST': ['project:admin'],
+    }
+
+
+class ProjectTransferEndpoint(ProjectEndpoint):
+    permission_classes = [RelaxedProjectPermission]
+
+    @sudo_required
+    def post(self, request, project):
+        """
+        Transfer a Project
+        ````````````````
+
+        Schedules a project for transfer to a new organization.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          project belongs to.
+        :pparam string project_slug: the slug of the project to delete.
+        :param string email: email of new owner. must be an organization owner
+        :auth: required
+        """
+        if project.is_internal_project():
+            return Response(
+                '{"error": "Cannot transfer projects internally used by Sentry."}',
+                status=status.HTTP_403_FORBIDDEN
+            )
+
+        email = request.DATA.get('email')
+
+        if email is None:
+            return Response(status=status.HTTP_400_BAD_REQUEST)
+
+        if not request.user.is_authenticated():
+            return Response(status=status.HTTP_403_FORBIDDEN)
+
+        try:
+            owner = OrganizationMember.objects.filter(
+                user__email__iexact=email,
+                role=roles.get_top_dog().id,
+                user__is_active=True,
+            )[0]
+        except IndexError:
+            return Response({'detail': 'Could not find owner with that email'},
+                            status=status.HTTP_404_NOT_FOUND)
+
+        transaction_id = uuid4().hex
+        url_data = sign(
+            actor_id=request.user.id,
+            from_organization_id=project.organization.id,
+            project_id=project.id,
+            user_id=owner.user_id,
+            transaction_id=transaction_id)
+        context = {
+            'email': email,
+            'from_org': project.organization.name,
+            'project_name': project.name,
+            'request_time': timezone.now(),
+            'url':
+            absolute_uri('/accept-transfer/') + '?' + urlencode({'data': url_data}),
+            'requester': request.user
+        }
+        MessageBuilder(
+            subject='%sRequest for Project Transfer' %
+            (options.get('mail.subject-prefix'), ),
+            template='sentry/emails/transfer_project.txt',
+            html_template='sentry/emails/transfer_project.html',
+            type='org.confirm_project_transfer_request',
+            context=context,
+        ).send_async([email])
+
+        self.create_audit_entry(
+            request=request,
+            organization=project.organization,
+            target_object=project.id,
+            event=AuditLogEntryEvent.PROJECT_REQUEST_TRANSFER,
+            data=project.get_audit_log_data(),
+            transaction_id=transaction_id,
+        )
+
+        return Response(status=status.HTTP_204_NO_CONTENT)
diff --git a/src/sentry/api/endpoints/user_subscriptions.py b/src/sentry/api/endpoints/user_subscriptions.py
index d221767141..7df5fcd83b 100644
--- a/src/sentry/api/endpoints/user_subscriptions.py
+++ b/src/sentry/api/endpoints/user_subscriptions.py
@@ -56,7 +56,7 @@ class UserSubscriptionsEndpoint(UserEndpoint):
 
         # Can't handle subscriptions without a verified email
         if not email.is_verified:
-            return Response({'details': 'Must have verified email to subscribe to newsletter.'},
+            return Response({'detail': 'Must have verified email to subscribe to newsletter.'},
                             status=status.HTTP_400_BAD_REQUEST)
 
         subscribed = request.DATA.get('subscribed')
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 84dffb0c2a..02c1a6cdf2 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -73,6 +73,7 @@ from .endpoints.organization_teams import OrganizationTeamsEndpoint
 from .endpoints.organization_user_issues import OrganizationUserIssuesEndpoint
 from .endpoints.organization_user_issues_search import OrganizationUserIssuesSearchEndpoint
 from .endpoints.project_details import ProjectDetailsEndpoint
+from .endpoints.project_transfer import ProjectTransferEndpoint
 from .endpoints.project_create_sample import ProjectCreateSampleEndpoint
 from .endpoints.project_docs import ProjectDocsEndpoint
 from .endpoints.project_docs_platform import ProjectDocsPlatformEndpoint
@@ -717,6 +718,11 @@ urlpatterns = patterns(
         ProjectTeamDetailsEndpoint.as_view(),
         name='sentry-api-0-project-team-details'
     ),
+    url(
+        r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/transfer/$',
+        ProjectTransferEndpoint.as_view(),
+        name='sentry-api-0-project-transfer'
+    ),
     url(
         r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/users/$',
         ProjectUsersEndpoint.as_view(),
diff --git a/tests/sentry/api/endpoints/test_project_transfer.py b/tests/sentry/api/endpoints/test_project_transfer.py
new file mode 100644
index 0000000000..2d62510808
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_transfer.py
@@ -0,0 +1,90 @@
+from __future__ import absolute_import
+
+import mock
+
+from django.core import mail
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase
+
+
+class ProjectTransferTest(APITestCase):
+    def test_internal_project(self):
+        project = self.create_project()
+
+        self.login_as(user=self.user)
+
+        url = reverse(
+            'sentry-api-0-project-transfer',
+            kwargs={
+                'organization_slug': project.organization.slug,
+                'project_slug': project.slug,
+            }
+        )
+
+        with self.settings(SENTRY_PROJECT=project.id):
+            response = self.client.post(url, {
+                'email': 'b@example.com'
+            })
+
+        assert response.status_code == 403
+
+    @mock.patch('sentry.api.endpoints.project_details.uuid4')
+    def test_transfer_project(self, mock_uuid4):
+        class uuid(object):
+            hex = 'abc123'
+
+        mock_uuid4.return_value = uuid
+        project = self.create_project()
+        new_user = self.create_user("b@example.com")
+        self.create_organization(name="New Org", owner=new_user)
+
+        self.login_as(user=self.user)
+
+        url = reverse(
+            'sentry-api-0-project-transfer',
+            kwargs={
+                'organization_slug': project.organization.slug,
+                'project_slug': project.slug,
+            }
+        )
+
+        with self.settings(SENTRY_PROJECT=0):
+            with self.tasks():
+                response = self.client.post(url, {
+                    'email': new_user.email
+                })
+
+                assert response.status_code == 204
+                # stdout seems to print log messages that mail should be sent but this
+                # assertion does not pass
+                assert mail.outbox
+
+    @mock.patch('sentry.api.endpoints.project_details.uuid4')
+    def test_transfer_project_to_invalid_user(self, mock_uuid4):
+        class uuid(object):
+            hex = 'abc123'
+
+        mock_uuid4.return_value = uuid
+        project = self.create_project()
+        # new user is not an owner of anything
+        new_user = self.create_user("b@example.com")
+
+        self.login_as(user=self.user)
+
+        url = reverse(
+            'sentry-api-0-project-transfer',
+            kwargs={
+                'organization_slug': project.organization.slug,
+                'project_slug': project.slug,
+            }
+        )
+
+        with self.settings(SENTRY_PROJECT=0):
+            with self.tasks():
+                response = self.client.post(url, {
+                    'email': new_user.email
+                })
+
+                assert response.status_code == 404
+                assert not mail.outbox
