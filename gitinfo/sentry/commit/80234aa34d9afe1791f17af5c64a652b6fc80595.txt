commit 80234aa34d9afe1791f17af5c64a652b6fc80595
Author: Ben Vinegar <ben@benv.ca>
Date:   Mon Aug 17 14:33:05 2015 -0700

    Cancel in-progress XHRs when switching stream filter (fixes #1639)

diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 7086ba3599..11f361a434 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -146,7 +146,11 @@ var Stream = React.createClass({
 
     var url = this.getGroupListEndpoint();
 
-    api.request(url, {
+    if (this.lastRequest) {
+      this.lastRequest.cancel();
+    }
+
+    this.lastRequest = api.request(url, {
       success: (data, _, jqXHR) => {
         this._streamManager.push(data);
 
@@ -163,6 +167,8 @@ var Stream = React.createClass({
         });
       },
       complete: () => {
+        this.lastRequest = null;
+
         if (this.state.realtimeActive) {
           this._poller.setEndpoint(url);
           this._poller.enable();
diff --git a/tests/js/spec/views/stream.spec.jsx b/tests/js/spec/views/stream.spec.jsx
index c4bfbbdbed..5e0258fb4c 100644
--- a/tests/js/spec/views/stream.spec.jsx
+++ b/tests/js/spec/views/stream.spec.jsx
@@ -65,6 +65,33 @@ describe("Stream", function() {
       expect(stubbedSetEndpoint.calledWith(expectedUrl)).to.be.true;
     });
 
+    it("should cancel any previous, unfinished fetches", function () {
+      this.stubbedApiRequest.restore();
+
+      var requestCancel = this.sandbox.stub();
+      var requestOptions;
+      this.sandbox.stub(Api, "request", function (url, options) {
+        requestOptions = options;
+        return {
+          cancel: requestCancel
+        };
+      });
+
+      // NOTE: fetchData called once after render automatically
+      var stream = React.render(this.Element, document.body).refs.wrapped;
+
+      // 2nd fetch should call cancel
+      stream.fetchData();
+
+      expect(requestCancel.calledOnce).to.be.ok;
+      expect(stream.lastRequest).to.be.ok;
+
+      // when request "completes", lastRequest is cleared
+      requestOptions.complete();
+
+      expect(stream.lastRequest).to.be.null;
+    });
+
   });
 
   describe("render()", function() {
