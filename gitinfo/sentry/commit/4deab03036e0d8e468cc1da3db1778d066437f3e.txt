commit 4deab03036e0d8e468cc1da3db1778d066437f3e
Author: Jan Michael Auer <account@jauer.org>
Date:   Fri Jun 22 12:48:14 2018 +0200

    ref: Truncate float fingerprints (#8726)
    
    * ref: Truncate float fingerprints
    
    * test: Add a test for bool fingerprints
    
    * fix: Abs for negative floats
    
    * ref: Revert empty fingerprint behavior
    
    * test: Add a test for empty fingerprints

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 3071045587..222df27476 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -87,8 +87,6 @@ def get_fingerprint_for_event(event):
     fingerprint = event.data.get('fingerprint')
     if fingerprint is None:
         return ['{{ default }}']
-    if isinstance(fingerprint, six.string_types):
-        return [fingerprint]
     return fingerprint
 
 
@@ -333,27 +331,14 @@ class EventManager(object):
         def to_values(v):
             return {'values': v} if v and isinstance(v, (tuple, list)) else v
 
-        def convert_fingerprint(values):
-            rv = values[:]
-            bad_float = False
-            for idx, item in enumerate(rv):
-                if isinstance(item, float) and \
-                   (abs(item) >= (1 << 53) or int(item) != item):
-                    bad_float = True
-                rv[idx] = text(item)
-            if bad_float:
-                metrics.incr(
-                    'events.bad_float_fingerprint',
-                    skip_internal=True,
-                    tags={
-                        'project_id': data.get('project'),
-                    },
-                )
-            return rv
+        def stringify(f):
+            if isinstance(f, float):
+                return text(int(f)) if abs(f) < (1 << 53) else None
+            return text(f)
 
         casts = {
             'environment': lambda v: text(v) if v is not None else v,
-            'fingerprint': lambda v: convert_fingerprint(v) if isinstance(v, list) and all(isinstance(f, fp_types) for f in v) else v,
+            'fingerprint': lambda v: list(x for x in map(stringify, v) if x is not None) if isinstance(v, list) and all(isinstance(f, fp_types) for f in v) else v,
             'release': lambda v: text(v) if v is not None else v,
             'dist': lambda v: text(v).strip() if v is not None else v,
             'time_spent': lambda v: int(v) if v is not None else v,
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index f831e8a95e..214508849b 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -489,9 +489,21 @@ class ValidateDataTest(BaseAPITest):
         assert data['errors'][0]['name'] == 'fingerprint'
 
         data = self.validate_and_normalize({
-            'fingerprint': ['{{default}}', 1, 'bar', 4.5],
+            'fingerprint': ['{{default}}', 1, 'bar', 4.5, -2.7, True],
         })
-        assert data.get('fingerprint') == ['{{default}}', '1', 'bar', '4.5']
+        assert data.get('fingerprint') == ['{{default}}', '1', 'bar', '4', '-2', 'True']
+        assert len(data['errors']) == 0
+
+        data = self.validate_and_normalize({
+            'fingerprint': ['{{default}}', 1e100, -1e100, 1e10],
+        })
+        assert data.get('fingerprint') == ['{{default}}', '10000000000']
+        assert len(data['errors']) == 0
+
+        data = self.validate_and_normalize({
+            'fingerprint': [],
+        })
+        assert data.get('fingerprint') == []
         assert len(data['errors']) == 0
 
     def test_messages(self):
