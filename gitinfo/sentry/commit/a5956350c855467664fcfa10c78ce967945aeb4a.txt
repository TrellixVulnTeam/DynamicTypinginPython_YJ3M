commit a5956350c855467664fcfa10c78ce967945aeb4a
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Oct 13 11:21:57 2012 -0700

    Move InstanceManager into sentry.utils.managers in an attempt to fix some odd recursive imports in Django

diff --git a/src/sentry/plugins/base.py b/src/sentry/plugins/base.py
index 46781ed398..ce1834fb45 100644
--- a/src/sentry/plugins/base.py
+++ b/src/sentry/plugins/base.py
@@ -14,7 +14,7 @@ from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect, HttpResponse
 
-from sentry.utils.db import InstanceManager
+from sentry.utils.managers import InstanceManager
 from threading import local
 
 
diff --git a/src/sentry/utils/db.py b/src/sentry/utils/db.py
index e204ad95e9..79a62c162d 100644
--- a/src/sentry/utils/db.py
+++ b/src/sentry/utils/db.py
@@ -5,71 +5,14 @@ sentry.utils.db
 :copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+
 import django
-import logging
 import operator
 
-
 from django.conf import settings as django_settings
 from django.db.models.expressions import ExpressionNode, F
 
 
-class InstanceManager(object):
-    def __init__(self, class_list=None, instances=True):
-        if class_list is None:
-            class_list = []
-        self.instances = instances
-        self.update(class_list)
-
-    def get_class_list(self):
-        return self.class_list
-
-    def add(self, class_path):
-        self.cache = None
-        self.class_list.append(class_path)
-
-    def remove(self, class_path):
-        self.cache = None
-        self.class_list.remove(class_path)
-
-    def update(self, class_list):
-        """
-        Updates the class list and wipes the cache.
-        """
-        self.cache = None
-        self.class_list = class_list
-
-    def all(self):
-        """
-        Returns a list of cached instances.
-        """
-        class_list = list(self.get_class_list())
-        if not class_list:
-            self.cache = []
-            return []
-
-        if self.cache is not None:
-            return self.cache
-
-        results = []
-        for cls_path in class_list:
-            module_name, class_name = cls_path.rsplit('.', 1)
-            try:
-                module = __import__(module_name, {}, {}, class_name)
-                cls = getattr(module, class_name)
-                if self.instances:
-                    results.append(cls())
-                else:
-                    results.append(cls)
-            except Exception:
-                logger = logging.getLogger('sentry.errors')
-                logger.exception('Unable to import %s', cls_path)
-                continue
-        self.cache = results
-
-        return results
-
-
 def get_db_engine(alias='default'):
     has_multidb = django.VERSION >= (1, 2)
     if has_multidb:
diff --git a/src/sentry/utils/managers.py b/src/sentry/utils/managers.py
new file mode 100644
index 0000000000..2745a5bbbd
--- /dev/null
+++ b/src/sentry/utils/managers.py
@@ -0,0 +1,65 @@
+"""
+sentry.utils.db
+~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+import logging
+
+
+class InstanceManager(object):
+    def __init__(self, class_list=None, instances=True):
+        if class_list is None:
+            class_list = []
+        self.instances = instances
+        self.update(class_list)
+
+    def get_class_list(self):
+        return self.class_list
+
+    def add(self, class_path):
+        self.cache = None
+        self.class_list.append(class_path)
+
+    def remove(self, class_path):
+        self.cache = None
+        self.class_list.remove(class_path)
+
+    def update(self, class_list):
+        """
+        Updates the class list and wipes the cache.
+        """
+        self.cache = None
+        self.class_list = class_list
+
+    def all(self):
+        """
+        Returns a list of cached instances.
+        """
+        class_list = list(self.get_class_list())
+        if not class_list:
+            self.cache = []
+            return []
+
+        if self.cache is not None:
+            return self.cache
+
+        results = []
+        for cls_path in class_list:
+            module_name, class_name = cls_path.rsplit('.', 1)
+            try:
+                module = __import__(module_name, {}, {}, class_name)
+                cls = getattr(module, class_name)
+                if self.instances:
+                    results.append(cls())
+                else:
+                    results.append(cls)
+            except Exception:
+                logger = logging.getLogger('sentry.errors')
+                logger.exception('Unable to import %s', cls_path)
+                continue
+        self.cache = results
+
+        return results
diff --git a/src/sentry/views/base.py b/src/sentry/views/base.py
index b4c6da7f5d..dbfeb1280b 100644
--- a/src/sentry/views/base.py
+++ b/src/sentry/views/base.py
@@ -7,7 +7,7 @@ sentry.views.base
 """
 
 from sentry.conf import settings
-from sentry.utils.db import InstanceManager
+from sentry.utils.managers import InstanceManager
 
 __all__ = ('View',)
 
