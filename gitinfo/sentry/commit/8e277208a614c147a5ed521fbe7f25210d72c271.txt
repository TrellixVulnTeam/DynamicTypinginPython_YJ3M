commit 8e277208a614c147a5ed521fbe7f25210d72c271
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue May 26 12:21:15 2020 -0700

    feat(alerts): Replace aggregation with aggregate (#18976)
    
    This does two things
    
     * Removes the `aggregation` field and adds a new `aggregate` field,
       which is configured via the metricField component.
    
     * Introduces a `dataset` field which can select between errors and
       transactions. This changes what aggregates can be configured. This is
       currently behind an internal feature flag

diff --git a/src/sentry/static/sentry/app/views/alerts/details/body.tsx b/src/sentry/static/sentry/app/views/alerts/details/body.tsx
index 05d9cc4991..5b012bff6b 100644
--- a/src/sentry/static/sentry/app/views/alerts/details/body.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/details/body.tsx
@@ -2,20 +2,16 @@ import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
 import styled from '@emotion/styled';
 
-import {
-  AlertRuleAggregations,
-  AlertRuleThresholdType,
-  Trigger,
-} from 'app/views/settings/incidentRules/types';
+import {AlertRuleThresholdType, Trigger} from 'app/views/settings/incidentRules/types';
 import {NewQuery, Project} from 'app/types';
 import {PageContent} from 'app/styles/organization';
 import {defined} from 'app/utils';
-import {getDisplayForAlertRuleAggregation} from 'app/views/alerts/utils';
 import {getUtcDateString} from 'app/utils/dates';
 import {t} from 'app/locale';
 import Alert from 'app/components/alert';
 import Duration from 'app/components/duration';
 import EventView from 'app/utils/discover/eventView';
+import {getAggregateAlias} from 'app/utils/discover/fields';
 import Feature from 'app/components/acl/feature';
 import Link from 'app/components/links/link';
 import NavTabs from 'app/components/navTabs';
@@ -61,10 +57,7 @@ export default class DetailsBody extends React.Component<Props> {
       id: undefined,
       name: (incident && incident.title) || '',
       fields: ['issue', 'count(id)', 'count_unique(user.id)'],
-      orderby:
-        incident.alertRule.aggregation === AlertRuleAggregations.UNIQUE_USERS
-          ? '-count_unique_user_id'
-          : '-count_id',
+      orderby: `-${getAggregateAlias(incident.alertRule.aggregate)}`,
       query: incident?.discoverQuery ?? '',
       projects: projects
         .filter(({slug}) => incident.projects.includes(slug))
@@ -118,9 +111,7 @@ export default class DetailsBody extends React.Component<Props> {
     return (
       <RuleDetails>
         <span>{t('Metric')}</span>
-        <span>
-          {incident && getDisplayForAlertRuleAggregation(incident.alertRule?.aggregation)}
-        </span>
+        <span>{incident.alertRule?.aggregate}</span>
 
         <span>{t('Critical Trigger')}</span>
         <span>{this.getThresholdText(criticalTrigger, 'alertThreshold')}</span>
@@ -173,7 +164,7 @@ export default class DetailsBody extends React.Component<Props> {
         <ChartWrapper>
           {incident && stats ? (
             <Chart
-              aggregation={incident.alertRule.aggregation}
+              aggregate={incident.alertRule.aggregate}
               data={stats.eventStats.data}
               detected={incident.dateDetected}
               closed={incident.dateClosed}
diff --git a/src/sentry/static/sentry/app/views/alerts/details/chart.tsx b/src/sentry/static/sentry/app/views/alerts/details/chart.tsx
index 65683d7ac6..e4f25106a4 100644
--- a/src/sentry/static/sentry/app/views/alerts/details/chart.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/details/chart.tsx
@@ -1,8 +1,6 @@
 import React from 'react';
 import moment from 'moment';
 
-import {AlertRuleAggregations} from 'app/views/settings/incidentRules/types';
-import {getDisplayForAlertRuleAggregation} from 'app/views/alerts/utils';
 import {t} from 'app/locale';
 import LineChart from 'app/components/charts/lineChart';
 import MarkPoint from 'app/components/charts/components/markPoint';
@@ -66,14 +64,14 @@ function getDataValue(data: Data) {
 
 type Props = {
   data: Data[];
-  aggregation: AlertRuleAggregations;
+  aggregate: string;
   detected: string;
   closed?: string;
 };
 
 export default class Chart extends React.PureComponent<Props> {
   render() {
-    const {aggregation, data, detected, closed} = this.props;
+    const {aggregate, data, detected, closed} = this.props;
     const detectedTs = detected && moment.utc(detected).unix();
     const closedTs = closed && moment.utc(closed).unix();
     const chartData = data.map(([ts, val]) => [
@@ -105,7 +103,7 @@ export default class Chart extends React.PureComponent<Props> {
       chartData.splice(nearbyClosedTimestampIndex + 1, 0, closedCoordinate);
     }
 
-    const seriesName = getDisplayForAlertRuleAggregation(aggregation);
+    const seriesName = aggregate;
 
     return (
       <LineChart
diff --git a/src/sentry/static/sentry/app/views/alerts/types.tsx b/src/sentry/static/sentry/app/views/alerts/types.tsx
index b89a20dd2d..c3e6dc0a6c 100644
--- a/src/sentry/static/sentry/app/views/alerts/types.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/types.tsx
@@ -12,7 +12,6 @@ export type Incident = {
   identifier: string;
   isSubscribed: boolean;
   groups: string[]; // Array of group ids
-  query: string;
   discoverQuery: string;
   organizationId: string;
   projects: string[]; // Array of slugs
diff --git a/src/sentry/static/sentry/app/views/alerts/utils.tsx b/src/sentry/static/sentry/app/views/alerts/utils.tsx
index 7209354244..9f9ca73536 100644
--- a/src/sentry/static/sentry/app/views/alerts/utils.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/utils.tsx
@@ -1,6 +1,4 @@
-import {AlertRuleAggregations} from 'app/views/settings/incidentRules/types';
 import {Client} from 'app/api';
-import {t} from 'app/locale';
 
 import {Incident, IncidentStats, IncidentStatus} from './types';
 
@@ -64,10 +62,3 @@ export function isOpen(incident: Incident): boolean {
       return true;
   }
 }
-
-/**
- * Get display string based on alert rule aggregation type
- */
-export function getDisplayForAlertRuleAggregation(aggregation: AlertRuleAggregations) {
-  return aggregation === AlertRuleAggregations.TOTAL ? t('Events') : t('Users Affected');
-}
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx
index 18a319bc25..951a8a1435 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx
@@ -1,10 +1,17 @@
 import {
-  AlertRuleAggregations,
   AlertRuleThresholdType,
   UnsavedIncidentRule,
   Trigger,
+  Dataset,
 } from 'app/views/settings/incidentRules/types';
 
+export const DEFAULT_AGGREGATE = 'count()';
+
+export const DATASET_EVENT_TYPE_FILTERS = {
+  [Dataset.ERRORS]: 'event.type:error',
+  [Dataset.TRANSACTIONS]: 'event.type:transaction',
+} as const;
+
 export function createDefaultTrigger(): Trigger {
   return {
     label: 'critical',
@@ -15,12 +22,10 @@ export function createDefaultTrigger(): Trigger {
   };
 }
 
-export const DEFAULT_METRIC = AlertRuleAggregations.TOTAL;
-
 export function createDefaultRule(): UnsavedIncidentRule {
   return {
-    aggregation: DEFAULT_METRIC,
-    aggregations: [DEFAULT_METRIC],
+    dataset: Dataset.ERRORS,
+    aggregate: DEFAULT_AGGREGATE,
     query: '',
     timeWindow: 1,
     triggers: [createDefaultTrigger()],
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/list.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/list.tsx
index e99d25ae0a..777ffb7c64 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/list.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/list.tsx
@@ -17,7 +17,6 @@ import space from 'app/styles/space';
 
 import {SavedIncidentRule} from './types';
 import {deleteRule} from './actions';
-import getMetricDisplayName from './utils/getMetricDisplayName';
 
 type State = {
   rules: SavedIncidentRule[];
@@ -87,7 +86,7 @@ class IncidentRulesList extends AsyncView<Props, State> {
                 <RuleRow key={rule.id}>
                   <RuleLink to={ruleLink}>{rule.name}</RuleLink>
 
-                  <MetricName>{getMetricDisplayName(rule.aggregation)}</MetricName>
+                  <MetricName>{rule.aggregate}</MetricName>
 
                   <ThresholdColumn>
                     <Thresholds>
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx
index 41019f59eb..2abbbbc05e 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx
@@ -10,13 +10,16 @@ import {getDisplayName} from 'app/utils/environment';
 import {t, tct} from 'app/locale';
 import FormField from 'app/views/settings/components/forms/formField';
 import SearchBar from 'app/views/events/searchBar';
+import RadioField from 'app/views/settings/components/forms/radioField';
 import SelectField from 'app/views/settings/components/forms/selectField';
 import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 import Tooltip from 'app/components/tooltip';
+import Feature from 'app/components/acl/feature';
 
-import {AlertRuleAggregations, TimeWindow, IncidentRule} from './types';
-import getMetricDisplayName from './utils/getMetricDisplayName';
+import {TimeWindow, IncidentRule, Dataset} from './types';
+import MetricField from './metricField';
+import {DATASET_EVENT_TYPE_FILTERS} from './constants';
 
 type TimeWindowMapType = {[key in TimeWindow]: string};
 
@@ -38,7 +41,7 @@ type Props = {
   projectSlug: string;
   disabled: boolean;
   thresholdChart: React.ReactNode;
-  onFilterUpdate: (query: string) => void;
+  onFilterSearch: (query: string) => void;
 };
 
 type State = {
@@ -73,7 +76,7 @@ class RuleConditionsForm extends React.PureComponent<Props, State> {
   }
 
   render() {
-    const {organization, disabled, onFilterUpdate} = this.props;
+    const {organization, disabled, onFilterSearch} = this.props;
     const {environments} = this.state;
 
     const environmentList: [IncidentRule['environment'], React.ReactNode][] = defined(
@@ -101,19 +104,42 @@ class RuleConditionsForm extends React.PureComponent<Props, State> {
       <Panel>
         <PanelHeader>{t('Configure Rule Conditions')}</PanelHeader>
         <PanelBody>
+          <Feature
+            requireAll
+            features={[
+              'organizations:transaction-events',
+              'organizations:internal-catchall',
+            ]}
+          >
+            <RadioField
+              name="dataset"
+              label="Data source"
+              orientInline
+              required
+              choices={[
+                [Dataset.ERRORS, t('Errors')],
+                [Dataset.TRANSACTIONS, t('Transactions')],
+              ]}
+            />
+          </Feature>
           {this.props.thresholdChart}
           <FormField name="query" inline={false}>
-            {({onChange, onBlur, onKeyDown, initialData}) => (
+            {({onChange, onBlur, onKeyDown, initialData, model}) => (
               <SearchBar
                 defaultQuery={initialData?.query ?? ''}
                 inlineLabel={
                   <Tooltip
-                    title={t('Metric alerts are filtered to error events automatically')}
+                    title={t(
+                      'Metric alerts are automatically filtered to your data source'
+                    )}
                   >
-                    <SearchEventTypeNote>event.type:error</SearchEventTypeNote>
+                    <SearchEventTypeNote>
+                      {DATASET_EVENT_TYPE_FILTERS[model.getValue('dataset')]}
+                    </SearchEventTypeNote>
                   </Tooltip>
                 }
                 help={t('Choose which metric to trigger on')}
+                omitTags={['event.type']}
                 disabled={disabled}
                 useFormWrapper={false}
                 organization={organization}
@@ -131,32 +157,22 @@ class RuleConditionsForm extends React.PureComponent<Props, State> {
                   onKeyDown?.(e);
                 }}
                 onBlur={query => {
-                  onFilterUpdate(query);
+                  onFilterSearch(query);
                   onBlur(query);
                 }}
                 onSearch={query => {
-                  onFilterUpdate(query);
+                  onFilterSearch(query);
                   onChange(query, {});
                 }}
               />
             )}
           </FormField>
-          <SelectField
-            name="aggregation"
-            label={t('Metric')}
-            help={t('Choose which metric to trigger on')}
-            choices={[
-              [
-                AlertRuleAggregations.UNIQUE_USERS,
-                getMetricDisplayName(AlertRuleAggregations.UNIQUE_USERS),
-              ],
-              [
-                AlertRuleAggregations.TOTAL,
-                getMetricDisplayName(AlertRuleAggregations.TOTAL),
-              ],
-            ]}
+          <MetricField
+            name="aggregate"
+            label="Metric"
+            organization={organization}
+            disabled={disabled}
             required
-            isDisabled={disabled}
           />
           <SelectField
             name="timeWindow"
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
index 73ea1c7426..775c291310 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
@@ -3,13 +3,11 @@ import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
 
 import {Organization, Project} from 'app/types';
+import FormModel from 'app/views/settings/components/forms/model';
 import {
-  addErrorMessage,
-  addLoadingMessage,
-  addSuccessMessage,
-  clearIndicators,
-} from 'app/actionCreators/indicator';
-import {createDefaultTrigger} from 'app/views/settings/incidentRules/constants';
+  createDefaultTrigger,
+  DATASET_EVENT_TYPE_FILTERS,
+} from 'app/views/settings/incidentRules/constants';
 import {defined} from 'app/utils';
 import {fetchOrganizationTags} from 'app/actionCreators/tags';
 import {t} from 'app/locale';
@@ -24,16 +22,21 @@ import TriggersChart from 'app/views/settings/incidentRules/triggers/chart';
 import hasThresholdValue from 'app/views/settings/incidentRules/utils/hasThresholdValue';
 import recreateRoute from 'app/utils/recreateRoute';
 import withProject from 'app/utils/withProject';
+import {
+  addErrorMessage,
+  addLoadingMessage,
+  addSuccessMessage,
+  clearIndicators,
+} from 'app/actionCreators/indicator';
 
 import {
-  AlertRuleAggregations,
   AlertRuleThresholdType,
   IncidentRule,
   MetricActionTemplate,
   Trigger,
+  Dataset,
 } from '../types';
 import {addOrUpdateRule} from '../actions';
-import FormModel from '../../components/forms/model';
 import RuleConditionsForm from '../ruleConditionsForm';
 
 type Props = {
@@ -56,8 +59,9 @@ type State = {
 
   // Rule conditions form inputs
   // Needed for TriggersChart
+  dataset: Dataset;
   query: string;
-  aggregation: AlertRuleAggregations;
+  aggregate: string;
   timeWindow: number;
   environment: string | null;
 } & AsyncComponent['state'];
@@ -77,7 +81,8 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
     return {
       ...super.getDefaultState(),
 
-      aggregation: rule.aggregation,
+      dataset: rule.dataset,
+      aggregate: rule.aggregate,
       query: rule.query || '',
       timeWindow: rule.timeWindow,
       environment: rule.environment || null,
@@ -102,10 +107,8 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
     ];
   }
 
-  getEventType() {
-    // XXX: This is hardcoded for now, this will need to change when we add
-    // metric types that require different `event.type` (e.g. transactions)
-    return 'event.type:error';
+  get eventTypeFilter() {
+    return DATASET_EVENT_TYPE_FILTERS[this.state.dataset ?? Dataset.ERRORS];
   }
 
   goBack() {
@@ -159,7 +162,7 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
     // Not valid... let's figure out an error message
     const isBelow = trigger.thresholdType === AlertRuleThresholdType.BELOW;
     const thresholdKey = isResolveChanged ? 'resolveThreshold' : 'alertThreshold';
-    let errorMessage;
+    let errorMessage = '';
 
     if (isResolveChanged) {
       errorMessage = isBelow
@@ -274,12 +277,15 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
   }
 
   handleFieldChange = (name: string, value: unknown) => {
-    if (['timeWindow', 'environment', 'aggregation'].includes(name)) {
+    if (['dataset', 'timeWindow', 'environment', 'aggregate'].includes(name)) {
       this.setState({[name]: value});
     }
   };
 
-  handleFilterUpdate = query => {
+  // We handle the filter update outside of the fieldChange handler since we
+  // don't want to update the filter on every input change, just on blurs and
+  // searches.
+  handleFilterUpdate = (query: string) => {
     this.setState({query});
   };
 
@@ -394,11 +400,9 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
 
   renderBody() {
     const {organization, ruleId, rule, params, onSubmitSuccess} = this.props;
-    const {query, aggregation, timeWindow, triggers, environment} = this.state;
+    const {query, timeWindow, triggers, aggregate, environment} = this.state;
 
-    const queryAndAlwaysErrorEvents = !query.includes('event.type')
-      ? `${query} ${this.getEventType()}`.trim()
-      : query;
+    const queryWithTypeFilter = `${query} ${this.eventTypeFilter}`.trim();
 
     const chart = (
       <TriggersChart
@@ -406,8 +410,8 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
         organization={organization}
         projects={this.state.projects}
         triggers={triggers}
-        query={queryAndAlwaysErrorEvents}
-        aggregation={aggregation}
+        query={queryWithTypeFilter}
+        aggregate={aggregate}
         timeWindow={timeWindow}
         environment={environment}
       />
@@ -424,7 +428,8 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
             submitDisabled={!hasAccess}
             initialData={{
               name: rule.name || '',
-              aggregation: rule.aggregation,
+              dataset: rule.dataset,
+              aggregate: rule.aggregate,
               query: rule.query || '',
               timeWindow: rule.timeWindow,
               environment: rule.environment || null,
@@ -457,8 +462,8 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
               projectSlug={params.projectId}
               organization={organization}
               disabled={!hasAccess}
-              onFilterUpdate={this.handleFilterUpdate}
               thresholdChart={chart}
+              onFilterSearch={this.handleFilterUpdate}
             />
 
             <Triggers
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx
index 71f4248859..1a57ce93d7 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx
@@ -6,12 +6,11 @@ import {Client} from 'app/api';
 import {Organization, Project} from 'app/types';
 import {SeriesDataUnit} from 'app/types/echarts';
 import EventsRequest from 'app/views/events/utils/eventsRequest';
-import {getDisplayForAlertRuleAggregation} from 'app/views/alerts/utils';
 import LoadingMask from 'app/components/loadingMask';
 import Placeholder from 'app/components/placeholder';
 import space from 'app/styles/space';
 
-import {AlertRuleAggregations, IncidentRule, TimeWindow, Trigger} from '../../types';
+import {IncidentRule, TimeWindow, Trigger} from '../../types';
 import ThresholdsChart from './thresholdsChart';
 
 type Props = {
@@ -22,7 +21,7 @@ type Props = {
   query: IncidentRule['query'];
   timeWindow: IncidentRule['timeWindow'];
   environment: string | null;
-  aggregation: IncidentRule['aggregation'];
+  aggregate: IncidentRule['aggregate'];
   triggers: Trigger[];
 };
 
@@ -38,7 +37,7 @@ class TriggersChart extends React.PureComponent<Props> {
       projects,
       timeWindow,
       query,
-      aggregation,
+      aggregate,
       triggers,
       environment,
     } = this.props;
@@ -54,9 +53,9 @@ class TriggersChart extends React.PureComponent<Props> {
         project={projects.map(({id}) => Number(id))}
         interval={`${timeWindow}m`}
         period={period}
-        yAxis={aggregation === AlertRuleAggregations.TOTAL ? 'event_count' : 'user_count'}
+        yAxis={aggregate}
         includePrevious={false}
-        currentSeriesName={getDisplayForAlertRuleAggregation(aggregation)}
+        currentSeriesName={aggregate}
       >
         {({loading, reloading, timeseriesData}) => {
           let maxValue: SeriesDataUnit | undefined;
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
index ffb20c12bb..ec30b1ff06 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
@@ -8,11 +8,6 @@ export enum AlertRuleThresholdType {
   BELOW,
 }
 
-export enum AlertRuleAggregations {
-  TOTAL,
-  UNIQUE_USERS,
-}
-
 export enum Dataset {
   ERRORS = 'events',
   TRANSACTIONS = 'transactions',
@@ -31,7 +26,6 @@ export type UnsavedTrigger = {
 
 export type ThresholdControlValue = {
   thresholdType: AlertRuleThresholdType;
-
   /**
    * Resolve threshold is optional, so it can be null
    */
@@ -47,19 +41,18 @@ export type SavedTrigger = Omit<UnsavedTrigger, 'actions'> & {
 export type Trigger = Partial<SavedTrigger> & UnsavedTrigger;
 
 export type UnsavedIncidentRule = {
-  aggregation: AlertRuleAggregations;
-  aggregations: AlertRuleAggregations[];
+  dataset: Dataset;
   projects: string[];
   environment: string | null;
   query: string;
   timeWindow: number;
   triggers: Trigger[];
+  aggregate: string;
 };
 
 export type SavedIncidentRule = UnsavedIncidentRule & {
   dateCreated: string;
   dateModified: string;
-  dataset: string;
   id: string;
   status: number;
   name: string;
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/utils/getMetricDisplayName.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/utils/getMetricDisplayName.tsx
deleted file mode 100644
index 0cd4d654dd..0000000000
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/utils/getMetricDisplayName.tsx
+++ /dev/null
@@ -1,15 +0,0 @@
-import {t} from 'app/locale';
-
-import {AlertRuleAggregations} from '../types';
-
-export default function getMetricDisplayName(metric: AlertRuleAggregations): string {
-  switch (metric) {
-    case AlertRuleAggregations.UNIQUE_USERS:
-      return t('Number of Users Affected');
-    case AlertRuleAggregations.TOTAL:
-      return t('Number of Events');
-
-    default:
-      return '';
-  }
-}
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
index 9fbf5d67c3..ce727d9dd2 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
@@ -112,7 +112,7 @@ class RuleRow extends React.Component<Props, State> {
                 <Trigger key={`trigger-${i}`} hideBorder={hideBorder}>
                   <StatusBadge>{trigger.label}</StatusBadge>
                   <TriggerDescription>
-                    {data.aggregations[0] === 0 ? t('Events') : t('Users')}{' '}
+                    {data.aggregate}{' '}
                     {trigger.thresholdType === 0 ? t('above') : t('below')}{' '}
                     {trigger.alertThreshold}/{data.timeWindow}
                     {t('min')}
diff --git a/tests/js/sentry-test/fixtures/incidentRule.js b/tests/js/sentry-test/fixtures/incidentRule.js
index 28a76e2d63..a9f86ed001 100644
--- a/tests/js/sentry-test/fixtures/incidentRule.js
+++ b/tests/js/sentry-test/fixtures/incidentRule.js
@@ -10,6 +10,7 @@ export function IncidentRule(params) {
     name: 'My Incident Rule',
     timeWindow: 60,
     aggregation: 0,
+    aggregate: 'count()',
     projects: ['project-slug'],
     dateModified: '2019-07-31T23:02:02.731Z',
     triggers: [IncidentTrigger()],
diff --git a/tests/js/spec/views/settings/incidentRules/create.spec.jsx b/tests/js/spec/views/settings/incidentRules/create.spec.jsx
index 7986a16546..d81a4b6bb8 100644
--- a/tests/js/spec/views/settings/incidentRules/create.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/create.spec.jsx
@@ -58,7 +58,7 @@ describe('Incident Rules Create', function() {
           project: [2],
           query: 'event.type:error',
           statsPeriod: '12h',
-          yAxis: 'event_count',
+          yAxis: 'count()',
         },
       })
     );
diff --git a/tests/js/spec/views/settings/incidentRules/list.spec.jsx b/tests/js/spec/views/settings/incidentRules/list.spec.jsx
index 4209725da2..70ce9f9cd4 100644
--- a/tests/js/spec/views/settings/incidentRules/list.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/list.spec.jsx
@@ -23,7 +23,7 @@ describe('Incident Rules List', function() {
 
     expect(req).toHaveBeenCalled();
     expect(wrapper.find('RuleLink').text()).toEqual('My Incident Rule');
-    expect(wrapper.find('MetricName').text()).toEqual('Number of Events');
+    expect(wrapper.find('MetricName').text()).toEqual('count()');
 
     expect(wrapper.find('Thresholds').text()).toEqual('70');
   });
diff --git a/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx b/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx
index 2a09e5ed9f..1fd1bc6119 100644
--- a/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx
@@ -64,7 +64,8 @@ describe('Incident Rules Form', function() {
     it('creates a rule', async function() {
       const wrapper = createWrapper({
         rule: {
-          aggregation: 0,
+          dataset: 'events',
+          aggregate: 'count()',
           query: '',
           projects: [project.slug],
           timeWindow: 60,
