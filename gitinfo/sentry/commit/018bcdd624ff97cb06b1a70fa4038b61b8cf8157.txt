commit 018bcdd624ff97cb06b1a70fa4038b61b8cf8157
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Aug 27 22:40:20 2013 -0700

    Move group tests and test GroupSeen recording

diff --git a/tests/sentry/web/frontend/groups/__init__.py b/tests/sentry/web/frontend/groups/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/web/frontend/groups/tests.py b/tests/sentry/web/frontend/groups/tests.py
new file mode 100644
index 0000000000..49ad0d2d33
--- /dev/null
+++ b/tests/sentry/web/frontend/groups/tests.py
@@ -0,0 +1,173 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import json
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import GroupSeen
+from sentry.constants import MAX_JSON_RESULTS
+from sentry.testutils import TestCase, fixture
+
+
+class GroupDetailsTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-group', kwargs={
+            'team_slug': self.team.slug,
+            'project_id': self.project.slug,
+            'group_id': self.group.id,
+        })
+
+    def test_simple(self):
+        self.login()
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/groups/details.html')
+        assert 'group' in resp.context
+        assert 'project' in resp.context
+        assert 'team' in resp.context
+        assert resp.context['group'] == self.group
+        assert resp.context['project'] == self.project
+        assert resp.context['team'] == self.team
+
+        # ensure we've marked the group as seen
+        assert GroupSeen.objects.filter(
+            group=self.group, user=self.user).exists()
+
+
+class GroupListTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-stream', kwargs={
+            'team_slug': self.team.slug,
+            'project_id': self.project.slug,
+        })
+
+    def test_does_render(self):
+        self.login()
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/groups/group_list.html')
+        assert 'project' in resp.context
+        assert 'team' in resp.context
+        assert 'event_list' in resp.context
+        assert resp.context['project'] == self.project
+        assert resp.context['team'] == self.team
+
+
+class GroupEventListTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-group-events', kwargs={
+            'team_slug': self.team.slug,
+            'project_id': self.project.slug,
+            'group_id': self.group.id,
+        })
+
+    def test_does_render(self):
+        self.login()
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/groups/event_list.html')
+        assert 'group' in resp.context
+        assert 'project' in resp.context
+        assert 'team' in resp.context
+        assert 'event_list' in resp.context
+        assert resp.context['project'] == self.project
+        assert resp.context['team'] == self.team
+        assert resp.context['group'] == self.group
+
+
+class GroupTagListTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-group-tags', kwargs={
+            'team_slug': self.team.slug,
+            'project_id': self.project.slug,
+            'group_id': self.group.id,
+        })
+
+    def test_does_render(self):
+        self.login()
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/groups/tag_list.html')
+        assert 'group' in resp.context
+        assert 'project' in resp.context
+        assert 'team' in resp.context
+        assert 'tag_list' in resp.context
+        assert resp.context['project'] == self.project
+        assert resp.context['team'] == self.team
+        assert resp.context['group'] == self.group
+
+
+class GroupEventDetailsTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-group-event', kwargs={
+            'team_slug': self.team.slug,
+            'project_id': self.project.slug,
+            'group_id': self.group.id,
+            'event_id': self.event.id,
+        })
+
+    def test_does_render(self):
+        self.login()
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/groups/details.html')
+        assert 'group' in resp.context
+        assert 'project' in resp.context
+        assert 'team' in resp.context
+        assert 'event' in resp.context
+        assert resp.context['project'] == self.project
+        assert resp.context['team'] == self.team
+        assert resp.context['group'] == self.group
+        assert resp.context['event'] == self.event
+
+
+class GroupEventListJsonTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-group-events-json', kwargs={
+            'team_slug': self.team.slug,
+            'project_id': self.project.slug,
+            'group_id': self.group.id,
+        })
+
+    def test_does_render(self):
+        self.login()
+        # HACK: force fixture creation
+        self.event
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        assert resp['Content-Type'] == 'application/json'
+        data = json.loads(resp.content)
+        assert len(data) == 1
+        assert data[0]['id'] == str(self.event.event_id)
+
+    def test_does_not_allow_beyond_limit(self):
+        self.login()
+        resp = self.client.get(self.path, {'limit': MAX_JSON_RESULTS + 1})
+        assert resp.status_code == 400
+
+
+class GroupEventJsonTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-group-event-json', kwargs={
+            'team_slug': self.team.slug,
+            'project_id': self.project.slug,
+            'group_id': self.group.id,
+            'event_id_or_latest': self.event.id,
+        })
+
+    def test_does_render(self):
+        self.login()
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        assert resp['Content-Type'] == 'application/json'
+        data = json.loads(resp.content)
+        assert data['id'] == self.event.event_id
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/tests.py
index bc3429a33a..9b8c26f679 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/tests.py
@@ -2,23 +2,14 @@
 
 from __future__ import absolute_import
 
-import logging
-import json
-
 from django.core.urlresolvers import reverse
 
-from sentry.constants import MEMBER_USER, MAX_JSON_RESULTS
+from sentry.constants import MEMBER_USER
 from sentry.models import Group, Project, TeamMember, Team, User
 from sentry.testutils import TestCase, fixture, before
 
-logger = logging.getLogger(__name__)
-
-
-class BaseViewTest(TestCase):
-    pass
 
-
-class EnvStatusTest(BaseViewTest):
+class EnvStatusTest(TestCase):
     @fixture
     def path(self):
         return reverse('sentry-admin-status')
@@ -35,7 +26,7 @@ class EnvStatusTest(BaseViewTest):
         self.assertTemplateUsed(resp, 'sentry/admin/status/env.html')
 
 
-class PackageStatusTest(BaseViewTest):
+class PackageStatusTest(TestCase):
     @fixture
     def path(self):
         return reverse('sentry-admin-packages-status')
@@ -52,7 +43,7 @@ class PackageStatusTest(BaseViewTest):
         self.assertTemplateUsed(resp, 'sentry/admin/status/packages.html')
 
 
-class MailStatusTest(BaseViewTest):
+class MailStatusTest(TestCase):
     @fixture
     def path(self):
         return reverse('sentry-admin-mail-status')
@@ -69,7 +60,7 @@ class MailStatusTest(BaseViewTest):
         self.assertTemplateUsed(resp, 'sentry/admin/status/mail.html')
 
 
-class StatsTest(BaseViewTest):
+class StatsTest(TestCase):
     @fixture
     def path(self):
         return reverse('sentry-admin-stats')
@@ -86,165 +77,7 @@ class StatsTest(BaseViewTest):
         self.assertTemplateUsed(resp, 'sentry/admin/stats.html')
 
 
-class GroupDetailsTest(BaseViewTest):
-    @fixture
-    def path(self):
-        return reverse('sentry-group', kwargs={
-            'team_slug': self.team.slug,
-            'project_id': self.project.slug,
-            'group_id': self.group.id,
-        })
-
-    def test_does_render(self):
-        self.login()
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/groups/details.html')
-        assert 'group' in resp.context
-        assert 'project' in resp.context
-        assert 'team' in resp.context
-        assert resp.context['group'] == self.group
-        assert resp.context['project'] == self.project
-        assert resp.context['team'] == self.team
-
-
-class GroupListTest(BaseViewTest):
-    @fixture
-    def path(self):
-        return reverse('sentry-stream', kwargs={
-            'team_slug': self.team.slug,
-            'project_id': self.project.slug,
-        })
-
-    def test_does_render(self):
-        self.login()
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/groups/group_list.html')
-        assert 'project' in resp.context
-        assert 'team' in resp.context
-        assert 'event_list' in resp.context
-        assert resp.context['project'] == self.project
-        assert resp.context['team'] == self.team
-
-
-class GroupEventListTest(BaseViewTest):
-    @fixture
-    def path(self):
-        return reverse('sentry-group-events', kwargs={
-            'team_slug': self.team.slug,
-            'project_id': self.project.slug,
-            'group_id': self.group.id,
-        })
-
-    def test_does_render(self):
-        self.login()
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/groups/event_list.html')
-        assert 'group' in resp.context
-        assert 'project' in resp.context
-        assert 'team' in resp.context
-        assert 'event_list' in resp.context
-        assert resp.context['project'] == self.project
-        assert resp.context['team'] == self.team
-        assert resp.context['group'] == self.group
-
-
-class GroupTagListTest(BaseViewTest):
-    @fixture
-    def path(self):
-        return reverse('sentry-group-tags', kwargs={
-            'team_slug': self.team.slug,
-            'project_id': self.project.slug,
-            'group_id': self.group.id,
-        })
-
-    def test_does_render(self):
-        self.login()
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/groups/tag_list.html')
-        assert 'group' in resp.context
-        assert 'project' in resp.context
-        assert 'team' in resp.context
-        assert 'tag_list' in resp.context
-        assert resp.context['project'] == self.project
-        assert resp.context['team'] == self.team
-        assert resp.context['group'] == self.group
-
-
-class GroupEventDetailsTest(BaseViewTest):
-    @fixture
-    def path(self):
-        return reverse('sentry-group-event', kwargs={
-            'team_slug': self.team.slug,
-            'project_id': self.project.slug,
-            'group_id': self.group.id,
-            'event_id': self.event.id,
-        })
-
-    def test_does_render(self):
-        self.login()
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/groups/details.html')
-        assert 'group' in resp.context
-        assert 'project' in resp.context
-        assert 'team' in resp.context
-        assert 'event' in resp.context
-        assert resp.context['project'] == self.project
-        assert resp.context['team'] == self.team
-        assert resp.context['group'] == self.group
-        assert resp.context['event'] == self.event
-
-
-class GroupEventListJsonTest(BaseViewTest):
-    @fixture
-    def path(self):
-        return reverse('sentry-group-events-json', kwargs={
-            'team_slug': self.team.slug,
-            'project_id': self.project.slug,
-            'group_id': self.group.id,
-        })
-
-    def test_does_render(self):
-        self.login()
-        # HACK: force fixture creation
-        self.event
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        assert resp['Content-Type'] == 'application/json'
-        data = json.loads(resp.content)
-        assert len(data) == 1
-        assert data[0]['id'] == str(self.event.event_id)
-
-    def test_does_not_allow_beyond_limit(self):
-        self.login()
-        resp = self.client.get(self.path, {'limit': MAX_JSON_RESULTS + 1})
-        assert resp.status_code == 400
-
-
-class GroupEventJsonTest(BaseViewTest):
-    @fixture
-    def path(self):
-        return reverse('sentry-group-event-json', kwargs={
-            'team_slug': self.team.slug,
-            'project_id': self.project.slug,
-            'group_id': self.group.id,
-            'event_id_or_latest': self.event.id,
-        })
-
-    def test_does_render(self):
-        self.login()
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        assert resp['Content-Type'] == 'application/json'
-        data = json.loads(resp.content)
-        assert data['id'] == self.event.event_id
-
-
-class ManageUsersTest(BaseViewTest):
+class ManageUsersTest(TestCase):
     @fixture
     def path(self):
         return reverse('sentry-admin-users')
@@ -256,7 +89,7 @@ class ManageUsersTest(BaseViewTest):
         self.assertTemplateUsed(resp, 'sentry/admin/users/list.html')
 
 
-class ReplayTest(BaseViewTest):
+class ReplayTest(TestCase):
     @fixture
     def path(self):
         return reverse('sentry-replay', kwargs={
