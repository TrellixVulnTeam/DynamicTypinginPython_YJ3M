commit 0aca40b4557dbf541f9313aaec7dc0e6c173a563
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jan 2 15:54:47 2015 -0800

    Add Plugin2.get_event_preprocessors
    
    Refs GH-1363

diff --git a/CHANGES b/CHANGES
index 2e043aa58c..8984bd9994 100644
--- a/CHANGES
+++ b/CHANGES
@@ -8,6 +8,7 @@ The beginnings of version 2 of the plugin interface have landed. This will expan
 
 - get_actions
 - get_annotations
+- get_event_preprocessors
 - get_notifiers
 - get_rules
 - get_tags
diff --git a/src/sentry/plugins/base/v2.py b/src/sentry/plugins/base/v2.py
index 8a40e51dba..7983b1549d 100644
--- a/src/sentry/plugins/base/v2.py
+++ b/src/sentry/plugins/base/v2.py
@@ -278,6 +278,19 @@ class IPlugin2(local):
         """
         return []
 
+    def get_event_preprocessors(self, **kwargs):
+        """
+        Return a list of preprocessors to apply to the given event.
+
+        A preprocessor is a function that takes the normalized data blob as an
+        input and returns modified data as output. If no changes to the data are
+        made it is safe to return ``None``.
+
+        >>> def get_event_preprocessors(self, **kwargs):
+        >>>     return [lambda x: x]
+        """
+        return []
+
 
 class Plugin2(IPlugin2):
     """
diff --git a/src/sentry/tasks/store.py b/src/sentry/tasks/store.py
index e9e4612eb0..9a09a27ffc 100644
--- a/src/sentry/tasks/store.py
+++ b/src/sentry/tasks/store.py
@@ -11,6 +11,7 @@ from __future__ import absolute_import
 from django.conf import settings
 
 from sentry.tasks.base import instrumented_task
+from sentry.utils.safe import safe_execute
 
 
 @instrumented_task(
@@ -18,23 +19,43 @@ from sentry.tasks.base import instrumented_task
     queue='events')
 def preprocess_event(cache_key=None, data=None, **kwargs):
     from sentry.app import cache
+    from sentry.plugins import plugins
     from sentry.tasks.fetch_source import expand_javascript_source
 
     if cache_key:
         data = cache.get(cache_key)
 
+    logger = preprocess_event.get_logger()
+
     if data is None:
+        logger.error('Data not available in preprocess_event (cache_key=%s)', cache_key)
         return
 
-    logger = preprocess_event.get_logger()
+    project = data['project']
+
+    # TODO(dcramer): ideally we would know if data changed by default
+    has_changed = False
 
-    if settings.SENTRY_SCRAPE_JAVASCRIPT_CONTEXT and data['platform'] == 'javascript':
+    # TODO(dcramer): move js sourcemap processing into JS plugin
+    if settings.SENTRY_SCRAPE_JAVASCRIPT_CONTEXT and data.get('platform') == 'javascript':
         try:
             expand_javascript_source(data)
         except Exception as e:
             logger.exception(u'Error fetching javascript source: %r [%s]', data['event_id'], e)
         else:
-            cache.set(cache_key, data, 3600)
+            has_changed = True
+
+    for plugin in plugins.all(version=2):
+        for processor in (safe_execute(plugin.get_event_preprocessors) or ()):
+            result = safe_execute(processor, data)
+            if result:
+                data = result
+                has_changed = True
+
+    assert data['project'] == project, 'Project cannot be mutated by preprocessor'
+
+    if has_changed and cache_key:
+        cache.set(cache_key, data, 3600)
 
     if cache_key:
         data = None
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index bd39c9e546..d3a873df2f 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -9,7 +9,7 @@ sentry.testutils.cases
 from __future__ import absolute_import
 
 __all__ = ('TestCase', 'TransactionTestCase', 'APITestCase', 'RuleTestCase',
-           'PermissionTestCase')
+           'PermissionTestCase', 'PluginTestCase')
 
 import base64
 import os.path
@@ -28,6 +28,7 @@ from rest_framework.test import APITestCase as BaseAPITestCase
 
 from sentry.constants import MODULE_ROOT
 from sentry.models import GroupMeta, OrganizationMemberType, ProjectOption
+from sentry.plugins import plugins
 from sentry.rules import EventState
 from sentry.utils import json
 
@@ -400,3 +401,12 @@ class PermissionTestCase(TestCase):
     def assert_non_member_cannot_access(self, path):
         user = self.create_user()
         self.assert_cannot_access(user, path)
+
+
+class PluginTestCase(TestCase):
+    plugin = None
+
+    def setUp(self):
+        super(PluginTestCase, self).setUp()
+        plugins.register(self.plugin)
+        self.addCleanup(plugins.unregister, self.plugin)
diff --git a/tests/sentry/tasks/test_store.py b/tests/sentry/tasks/test_store.py
new file mode 100644
index 0000000000..222f86123c
--- /dev/null
+++ b/tests/sentry/tasks/test_store.py
@@ -0,0 +1,43 @@
+from __future__ import absolute_import
+
+import mock
+
+from sentry.plugins import Plugin2
+from sentry.tasks.store import preprocess_event
+from sentry.testutils import PluginTestCase
+
+
+class BasicPreprocessorPlugin(Plugin2):
+    def get_event_preprocessors(self):
+        def remove_extra(data):
+            del data['extra']
+            return data
+
+        return [remove_extra, lambda x: None]
+
+    def is_enabled(self, project=None):
+        return True
+
+
+class PreprocessEventTest(PluginTestCase):
+    plugin = BasicPreprocessorPlugin
+
+    @mock.patch('sentry.tasks.store.save_event')
+    def test_simple(self, mock_save_event):
+        project = self.create_project()
+
+        data = {
+            'project': project.id,
+            'message': 'test',
+            'extra': {'foo': 'bar'},
+        }
+
+        preprocess_event(data=data)
+
+        mock_save_event.delay.assert_called_once_with(
+            cache_key=None,
+            data={
+                'project': project.id,
+                'message': 'test',
+            },
+        )
diff --git a/tests/sentry/templatetags/test_sentry_plugins.py b/tests/sentry/templatetags/test_sentry_plugins.py
index 1e56a298c4..f23f84cddc 100644
--- a/tests/sentry/templatetags/test_sentry_plugins.py
+++ b/tests/sentry/templatetags/test_sentry_plugins.py
@@ -3,8 +3,8 @@ from __future__ import absolute_import
 from django.template import Context, Template
 from mock import Mock
 
-from sentry.plugins import plugins, Plugin2
-from sentry.testutils import TestCase
+from sentry.plugins import Plugin2
+from sentry.testutils import PluginTestCase
 
 
 class SamplePlugin(Plugin2):
@@ -21,15 +21,6 @@ class SamplePlugin(Plugin2):
         return True
 
 
-class PluginTestCase(TestCase):
-    plugin = None
-
-    def setUp(self):
-        super(PluginTestCase, self).setUp()
-        plugins.register(self.plugin)
-        self.addCleanup(plugins.unregister, self.plugin)
-
-
 class GetActionsTest(PluginTestCase):
     plugin = SamplePlugin
 
