commit 7fe0930d34f07c81f51e07d97261073d70bf2463
Author: ted kaemming <ted@kaemming.com>
Date:   Thu Oct 20 14:15:02 2016 -0700

    Remove `organization:reports:*` switches. (#4408)

diff --git a/CHANGES b/CHANGES
index de236b76bf..be9618cf17 100644
--- a/CHANGES
+++ b/CHANGES
@@ -4,6 +4,7 @@ Version 8.10 (Unreleased)
 - Removed previously deprecated ``sentry celery`` command.
 - Replaced the ``events`` queue with ``events.{preprocess,process,save}_event``.
 - Added Danger (danger/danger) for monitoring various PR requirements.
+- Enabled organization weekly report emails for all organizations.
 
 API Changes
 ~~~~~~~~~~~
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 73b6b96e10..e2162003fb 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -12,9 +12,6 @@ default_manager.add('organizations:create')
 default_manager.add('organizations:sso', OrganizationFeature)  # NOQA
 default_manager.add('organizations:onboarding', OrganizationFeature)  # NOQA
 default_manager.add('organizations:callsigns', OrganizationFeature)  # NOQA
-default_manager.add('organizations:reports:prepare', OrganizationFeature)  # NOQA
-default_manager.add('organizations:reports:deliver', OrganizationFeature)  # NOQA
-default_manager.add('organizations:reports:calendar', OrganizationFeature)  # NOQA
 default_manager.add('projects:global-events', ProjectFeature)  # NOQA
 default_manager.add('projects:quotas', ProjectFeature)  # NOQA
 default_manager.add('projects:plugins', ProjectPluginFeature)  # NOQA
diff --git a/src/sentry/tasks/reports.py b/src/sentry/tasks/reports.py
index 93733999b3..a24ec5aca4 100644
--- a/src/sentry/tasks/reports.py
+++ b/src/sentry/tasks/reports.py
@@ -14,7 +14,6 @@ from datetime import datetime, timedelta
 import pytz
 from django.utils import dateformat, timezone
 
-from sentry import features
 from sentry.app import tsdb
 from sentry.models import (
     Activity, GroupStatus, Organization, OrganizationStatus, Project, Release,
@@ -585,9 +584,6 @@ def prepare_reports(dry_run=False, *args, **kwargs):
 def prepare_organization_report(timestamp, duration, organization_id, dry_run=False):
     organization = _get_organization_queryset().get(id=organization_id)
 
-    if not features.has('organizations:reports:prepare', organization):
-        return
-
     backend.prepare(timestamp, duration, organization)
 
     # If an OrganizationMember row doesn't have an associated user, this is
@@ -769,7 +765,7 @@ def deliver_organization_user_report(timestamp, duration, organization_id, user_
         reports,
     )
 
-    if not dry_run and features.has('organizations:reports:deliver', organization):
+    if not dry_run:
         message.send()
 
 
@@ -873,8 +869,7 @@ def build_project_breakdown_series(reports):
 def to_context(organization, interval, reports):
     report = reduce(merge_reports, reports.values())
     series = [(to_datetime(timestamp), Point(*values)) for timestamp, values in report.series]
-
-    context = {
+    return {
         'series': {
             'points': series,
             'maximum': max(sum(point) for timestamp, point in series),
@@ -904,15 +899,11 @@ def to_context(organization, interval, reports):
         'projects': {
             'series': build_project_breakdown_series(reports),
         },
-    }
-
-    if features.has('organizations:reports:calendar', organization):
-        context['calendar'] = to_calendar(
+        'calendar': to_calendar(
             interval,
             report.calendar_series,
-        )
-
-    return context
+        ),
+    }
 
 
 def get_percentile(values, percentile):
diff --git a/tests/sentry/tasks/test_reports.py b/tests/sentry/tasks/test_reports.py
index 056c5ea8c0..7b161e1f1e 100644
--- a/tests/sentry/tasks/test_reports.py
+++ b/tests/sentry/tasks/test_reports.py
@@ -3,7 +3,6 @@ from __future__ import absolute_import
 import functools
 from datetime import datetime, timedelta
 
-import mock
 import pytest
 import pytz
 from django.core import mail
@@ -228,18 +227,11 @@ def test_calendar_range():
 
 
 class ReportTestCase(TestCase):
-    @mock.patch('sentry.features.has')
-    def test_integration(self, has_feature):
+    def test_integration(self):
         Project.objects.all().delete()
 
         now = datetime(2016, 9, 12, tzinfo=pytz.utc)
 
-        has_feature.side_effect = lambda name, *a, **k: {
-            'organizations:reports:deliver': True,
-            'organizations:reports:prepare': True,
-            'organizations:reports:calendar': True,
-        }.get(name, False)
-
         project = self.create_project(
             organization=self.organization,
             team=self.team,
