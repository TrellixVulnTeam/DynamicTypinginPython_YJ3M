commit e848c42bea08af5ed28e8720fb50d188164a90c7
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Mar 8 11:01:29 2018 -0800

    fix(owners): Fix ordering of related releases
    
    This adjusts the "recent releases" behavior to use releases that are **at or before** the first release, as newer releases certainly **cannot** be responsible for the issue.
    
    It also moves the ``get_closest_releases`` into the committers utils as its not used by any other party.

diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 666c387f33..4251030071 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -215,34 +215,6 @@ class Release(Model):
 
             release.delete()
 
-    @classmethod
-    def get_closest_releases(cls, project, start_version, limit=5):
-        # given a release version + project, return next
-        # `limit` releases (includes the release specified by `version`)
-        try:
-            release_dates = cls.objects.filter(
-                organization_id=project.organization_id,
-                version=start_version,
-                projects=project,
-            ).values('date_released', 'date_added').get()
-        except cls.DoesNotExist:
-            return []
-
-        start_date = release_dates['date_released'] or release_dates['date_added']
-
-        return list(Release.objects.filter(
-            projects=project,
-            organization_id=project.organization_id,
-        ).extra(select={
-                'date': 'COALESCE(date_released, date_added)',
-                }
-                ).extra(
-            where=["COALESCE(date_released, date_added) >= %s"],
-            params=[start_date]
-        ).extra(
-            order_by=['date']
-        )[:limit])
-
     @property
     def short_version(self):
         return Release.get_display_version(self.version)
diff --git a/src/sentry/utils/committers.py b/src/sentry/utils/committers.py
index 36d44dc912..15c305075a 100644
--- a/src/sentry/utils/committers.py
+++ b/src/sentry/utils/committers.py
@@ -130,6 +130,34 @@ def _get_committers(annotated_frames, commits):
     return user_dicts
 
 
+def get_previous_releases(project, start_version, limit=5):
+    # given a release version + project, return the previous
+    # `limit` releases (includes the release specified by `version`)
+    try:
+        release_dates = Release.objects.filter(
+            organization_id=project.organization_id,
+            version=start_version,
+            projects=project,
+        ).values('date_released', 'date_added').get()
+    except Release.DoesNotExist:
+        return []
+
+    start_date = release_dates['date_released'] or release_dates['date_added']
+
+    return list(Release.objects.filter(
+        projects=project,
+        organization_id=project.organization_id,
+    ).extra(
+        select={
+            'date': 'COALESCE(date_released, date_added)',
+        },
+        where=["COALESCE(date_released, date_added) <= %s"],
+        params=[start_date]
+    ).extra(
+        order_by=['-date']
+    )[:limit])
+
+
 def get_event_file_committers(project, event, frame_limit=25):
     # populate event data
     Event.objects.bind_nodes([event], 'data')
@@ -141,8 +169,7 @@ def get_event_file_committers(project, event, frame_limit=25):
     if not first_release_version:
         raise Release.DoesNotExist
 
-    releases = Release.get_closest_releases(project, first_release_version)
-
+    releases = get_previous_releases(project, first_release_version)
     if not releases:
         raise Release.DoesNotExist
 
diff --git a/tests/sentry/models/test_release.py b/tests/sentry/models/test_release.py
index 5d7b711c80..f5a95bb338 100644
--- a/tests/sentry/models/test_release.py
+++ b/tests/sentry/models/test_release.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-import datetime
 import six
 
 from sentry.models import (
@@ -457,43 +456,3 @@ class SetCommitsTestCase(TestCase):
         assert resolution.actor_id is None
 
         assert Group.objects.get(id=group.id).status == GroupStatus.RESOLVED
-
-
-class GetClosestReleasesTestCase(TestCase):
-    def test_simple(self):
-
-        date = datetime.datetime.utcnow()
-
-        org = self.create_organization()
-        project = self.create_project(organization=org, name='foo')
-
-        # this shouldn't be included
-        release1 = Release.objects.create(
-            organization=org,
-            version='a' * 40,
-            date_released=date - datetime.timedelta(days=2),
-        )
-
-        release1.add_project(project)
-
-        release2 = Release.objects.create(
-            organization=org,
-            version='b' * 40,
-            date_released=date - datetime.timedelta(days=1),
-        )
-
-        release2.add_project(project)
-
-        release3 = Release.objects.create(
-            organization=org,
-            version='c' * 40,
-            date_released=date,
-        )
-
-        release3.add_project(project)
-
-        releases = list(Release.get_closest_releases(project, release2.version))
-
-        assert len(releases) == 2
-        assert releases[0] == release2
-        assert releases[1] == release3
diff --git a/tests/sentry/utils/test_committers.py b/tests/sentry/utils/test_committers.py
index c42f018eeb..aa5a13de96 100644
--- a/tests/sentry/utils/test_committers.py
+++ b/tests/sentry/utils/test_committers.py
@@ -1,6 +1,11 @@
 from __future__ import absolute_import
 
-from sentry.utils.committers import score_path_match_length, tokenize_path
+from datetime import timedelta
+from django.utils import timezone
+
+from sentry.models import Release
+from sentry.testutils import TestCase
+from sentry.utils.committers import get_previous_releases, score_path_match_length, tokenize_path
 
 
 def test_score_path_match_length():
@@ -15,3 +20,42 @@ def test_tokenize_path():
     assert list(tokenize_path('foo/bar')) == ['bar', 'foo']
     assert list(tokenize_path('foo\\bar')) == ['bar', 'foo']
     assert list(tokenize_path('foo.bar')) == ['foo.bar']
+
+
+class GetPreviousReleasesTestCase(TestCase):
+    def test_simple(self):
+        current_datetime = timezone.now()
+
+        org = self.create_organization()
+        project = self.create_project(organization=org, name='foo')
+
+        release1 = Release.objects.create(
+            organization=org,
+            version='a' * 40,
+            date_released=current_datetime - timedelta(days=2),
+        )
+
+        release1.add_project(project)
+
+        release2 = Release.objects.create(
+            organization=org,
+            version='b' * 40,
+            date_released=current_datetime - timedelta(days=1),
+        )
+
+        release2.add_project(project)
+
+        # this shouldn't be included
+        release3 = Release.objects.create(
+            organization=org,
+            version='c' * 40,
+            date_released=current_datetime,
+        )
+
+        release3.add_project(project)
+
+        releases = list(get_previous_releases(project, release2.version))
+
+        assert len(releases) == 2
+        assert releases[0] == release2
+        assert releases[1] == release1
