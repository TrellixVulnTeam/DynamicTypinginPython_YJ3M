commit 461204944f5a6c13159b1a4ff0b6849c17d1daa7
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 1 16:03:40 2016 -0700

    Initial support for Python 3

diff --git a/.travis.yml b/.travis.yml
index 075ce12194..4405a07a77 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -11,6 +11,8 @@ services:
   - cassandra
 python:
   - "2.7"
+  # - "3.4"
+  # - "3.5"
 cache:
   directories:
     - node_modules
diff --git a/Makefile b/Makefile
index 30ad536ca2..1cceedc715 100644
--- a/Makefile
+++ b/Makefile
@@ -172,7 +172,7 @@ travis-install-mysql: travis-install-python
 travis-install-acceptance: install-npm travis-install-postgres
 travis-install-js: travis-upgrade-pip install-python install-python-tests install-npm
 travis-install-cli: travis-install-python
-travis-install-dist: travis-noop
+travis-install-dist: travis-install-python
 
 .PHONY: travis-install-sqlite travis-install-postgres travis-install-js travis-install-cli travis-install-dist
 
diff --git a/api-docs/generator.py b/api-docs/generator.py
index eedfdd58f1..eebdeaed45 100644
--- a/api-docs/generator.py
+++ b/api-docs/generator.py
@@ -4,12 +4,13 @@ import os
 import zlib
 import json
 import click
-import urlparse
 import logging
+import six
 
 from datetime import datetime
 from subprocess import Popen, PIPE
 from contextlib import contextmanager
+from six.moves.urllib.parse import urlparse
 
 HERE = os.path.abspath(os.path.dirname(__file__))
 SENTRY_CONFIG = os.environ['SENTRY_CONF'] = os.path.join(HERE, 'sentry.conf.py')
@@ -28,7 +29,7 @@ from sentry.utils.apidocs import Runner, MockUtils, iter_scenarios, \
 
 
 OUTPUT_PATH = os.path.join(HERE, 'cache')
-HOST = urlparse.urlparse(settings.SENTRY_OPTIONS['system.url-prefix']).netloc
+HOST = urlparse(settings.SENTRY_OPTIONS['system.url-prefix']).netloc
 
 
 # We don't care about you, go away
@@ -45,7 +46,7 @@ def report(category, message, fg=None):
     if fg is None:
         fg = color_for_string(category)
     click.echo('[%s] %s: %s' % (
-        str(datetime.utcnow()).split('.')[0],
+        six.text_type(datetime.utcnow()).split('.')[0],
         click.style(category, fg=fg),
         message
     ))
@@ -59,7 +60,7 @@ def launch_redis():
     databases %(databases)d
     save ""
     ''' % {
-        'port': str(settings.SENTRY_APIDOCS_REDIS_PORT),
+        'port': six.text_type(settings.SENTRY_APIDOCS_REDIS_PORT),
         'databases': 4,
     })
     cl.stdin.flush()
@@ -210,7 +211,7 @@ def cli(output_path):
             'sections': dict((section, {
                 'title': title,
                 'entries': dict(section_mapping.get(section, ())),
-            }) for section, title in get_sections().iteritems())
+            }) for section, title in six.iteritems(get_sections()))
         })
 
 
diff --git a/api-docs/sentry.conf.py b/api-docs/sentry.conf.py
index 14ee88477a..76540cf16a 100644
--- a/api-docs/sentry.conf.py
+++ b/api-docs/sentry.conf.py
@@ -52,7 +52,7 @@ SENTRY_WEB_OPTIONS = {
 SENTRY_OPTIONS.update({
     'redis.clusters': {
         'default': {
-            'hosts': {i: {'port': SENTRY_APIDOCS_REDIS_PORT} for i in xrange(0, 4)},
+            'hosts': {i: {'port': SENTRY_APIDOCS_REDIS_PORT} for i in range(0, 4)},
         },
     },
     'system.secret-key': 'super secret secret key',
diff --git a/bin/dump-command-help b/bin/dump-command-help
index 3112776d1f..3ed93251eb 100755
--- a/bin/dump-command-help
+++ b/bin/dump-command-help
@@ -97,7 +97,7 @@ def dump_command(out, cmd, path):
             })
 
     if isinstance(cmd, click.Group):
-        for child_name, child_cmd in cmd.commands.iteritems():
+        for child_name, child_cmd in six.iteritems(cmd.commands):
             dump_command(out, child_cmd, path + [child_name])
             data['subcommands'].append(child_name)
 
diff --git a/bin/load-mocks b/bin/load-mocks
index 838f931e80..488ffb7f24 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -3,6 +3,7 @@ from sentry.runner import configure
 configure()
 
 import itertools
+import six
 
 from datetime import datetime, timedelta
 from django.conf import settings
@@ -20,6 +21,7 @@ from sentry.models import (
     OrganizationMember, Project, Release, ReleaseFile, Team, User, UserReport,
     GroupRelease, Environment, ReleaseEnvironment
 )
+from sentry.utils.hashlib import sha1, md5
 from sentry.utils.samples import create_sample_event
 
 PLATFORMS = itertools.cycle([
@@ -298,7 +300,7 @@ def main(num_events=1):
                     level=LEVELS.next(),
                     environment=ENVIRONMENTS.next(),
                     message='This is a mostly useless example %s exception' % platform,
-                    checksum=md5(platform + str(_)).hexdigest(),
+                    checksum=md5(platform + six.text_type(_)).hexdigest(),
                 )
 
             for _ in range(num_events):
diff --git a/config/hooks/pre-commit b/config/hooks/pre-commit
index 721c703ca6..9fe24e8465 100755
--- a/config/hooks/pre-commit
+++ b/config/hooks/pre-commit
@@ -23,7 +23,11 @@ def main():
 
     _, files_modified, _ = run(gitcmd)
 
-    files_modified = filter(lambda x: os.path.exists(x), files_modified)
+    files_modified = [
+        f
+        for f in files_modified
+        if os.path.exists(f)
+    ]
 
     return check_files(files_modified)
 
diff --git a/setup.py b/setup.py
index ce34368b35..82d18cd71a 100755
--- a/setup.py
+++ b/setup.py
@@ -26,9 +26,9 @@ from __future__ import absolute_import
 
 import sys
 
-if sys.version_info[:2] != (2, 7):
-    print 'Error: Sentry requires Python 2.7'
-    sys.exit(1)
+# if sys.version_info[:2] != (2, 7):
+#     print 'Error: Sentry requires Python 2.7'
+#     sys.exit(1)
 
 import os
 import json
@@ -68,7 +68,7 @@ IS_LIGHT_BUILD = os.environ.get('SENTRY_LIGHT_BUILD') == '1'
 
 dev_requires = [
     'Babel',
-    'flake8>=2.1,<2.2',
+    'flake8>=2.6,<2.7',
     'pycodestyle>=2.0,<2.1',
     'isort>=4.2.2,<4.3.0',
 ]
@@ -88,9 +88,9 @@ tests_require = [
 
 
 install_requires = [
-    'BeautifulSoup>=3.2.1,<3.3.0',
     'celery>=3.1.8,<3.1.19',
     'click>=5.0,<7.0',
+    # 'cryptography>=1.3,<1.4',
     'cssutils>=0.9.9,<0.10.0',
     'Django>=1.6.0,<1.7',
     'django-bitfield>=1.7.0,<1.8.0',
@@ -105,16 +105,18 @@ install_requires = [
     'email-reply-parser>=0.2.0,<0.3.0',
     'enum34>=0.9.18,<1.2.0',
     'exam>=0.5.1',
+    # broken on python3
     'hiredis>=0.1.0,<0.2.0',
     'honcho>=0.7.0,<0.8.0',
-    'ipaddr>=2.1.11,<2.2.0',
     'kombu==3.0.35',
     'lxml>=3.4.1',
+
+    'ipaddress>=1.0.16,<1.1.0',
     'mock>=0.8.0,<1.1',
     'oauth2>=1.5.167',
     'petname>=1.7,<1.8',
     'Pillow>=3.2.0,<3.3.0',
-    'progressbar>=2.2,<2.4',
+    'progressbar2>=3.10,<3.11',
     'psycopg2>=2.6.0,<2.7.0',
     'pytest>=2.6.4,<2.7.0',
     'pytest-django>=2.9.1,<2.10.0',
@@ -122,13 +124,13 @@ install_requires = [
     'python-dateutil>=2.0.0,<3.0.0',
     'python-memcached>=1.53,<2.0.0',
     'python-openid>=2.2',
-    'PyYAML>=3.11,<4.0',
+    'PyYAML>=3.11,<3.12',
     'raven>=5.21.0,<6.0.0',
     'redis>=2.10.3,<2.11.0',
-    'requests%s>=2.9.1,<2.11.0' % (not IS_LIGHT_BUILD and '[security]' or ''),
+    'requests[security]>=2.9.1,<2.11.0',
     'selenium>=2.53,<2.60',
     'simplejson>=3.2.0,<3.9.0',
-    'six>=1.6.0,<2.0.0',
+    'six>=1.10.0,<1.11.0',
     'setproctitle>=1.1.7,<1.2.0',
     'statsd>=3.1.0,<3.2.0',
     'structlog==16.1.0',
diff --git a/src/sentry/__main__.py b/src/sentry/__main__.py
index 418225eb78..31f8260da4 100644
--- a/src/sentry/__main__.py
+++ b/src/sentry/__main__.py
@@ -5,6 +5,7 @@ sentry
 :copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+from __future__ import absolute_import
 
 from .runner import main
 main()
diff --git a/src/sentry/admin.py b/src/sentry/admin.py
index 58cea62c19..01a796a12d 100644
--- a/src/sentry/admin.py
+++ b/src/sentry/admin.py
@@ -8,7 +8,6 @@ from django.contrib.auth.forms import (
 from django.core.exceptions import PermissionDenied
 from django.db import transaction
 from django.http import Http404, HttpResponseRedirect
-from django.utils.html import escape
 from django.utils.decorators import method_decorator
 from django.views.decorators.csrf import csrf_protect
 from django.views.decorators.debug import sensitive_post_parameters
@@ -21,6 +20,7 @@ from sentry.models import (
     Option, Organization, OrganizationMember, OrganizationMemberTeam, Project,
     Team, User
 )
+from sentry.utils.html import escape
 
 csrf_protect_m = method_decorator(csrf_protect)
 sensitive_post_parameters_m = method_decorator(sensitive_post_parameters())
@@ -42,7 +42,9 @@ class OptionAdmin(admin.ModelAdmin):
     search_fields = ('key',)
 
     def value_repr(self, instance):
-        return '<pre style="display:inline-block;white-space:pre-wrap;">{}</pre>'.format(escape(saferepr(instance.value)))
+        return '<pre style="display:inline-block;white-space:pre-wrap;">{}</pre>'.format(
+            escape(saferepr(instance.value))
+        )
 
     value_repr.short_description = "Value"
     value_repr.allow_tags = True
diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index b87f173733..2afe07630a 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 __all__ = ['DocSection', 'Endpoint', 'StatsMixin']
 
 import logging
+import six
 import time
 
 from datetime import datetime, timedelta
@@ -61,7 +62,7 @@ class Endpoint(APIView):
     def build_cursor_link(self, request, name, cursor):
         querystring = u'&'.join(
             u'{0}={1}'.format(urlquote(k), urlquote(v))
-            for k, v in request.GET.iteritems()
+            for k, v in six.iteritems(request.GET)
             if k != 'cursor'
         )
         base_url = absolute_uri(request.path)
@@ -72,7 +73,7 @@ class Endpoint(APIView):
 
         return LINK_HEADER.format(
             uri=base_url,
-            cursor=str(cursor),
+            cursor=six.text_type(cursor),
             name=name,
             has_results='true' if bool(cursor) else 'false',
         )
diff --git a/src/sentry/api/client.py b/src/sentry/api/client.py
index 6996654bc7..69165e96e1 100644
--- a/src/sentry/api/client.py
+++ b/src/sentry/api/client.py
@@ -6,21 +6,20 @@ from django.core.urlresolvers import resolve
 from rest_framework.test import APIRequestFactory, force_authenticate
 
 from sentry.utils import json
+from sentry.utils.compat import implements_to_string
 
 
+@implements_to_string
 class ApiError(Exception):
     def __init__(self, status_code, body):
         self.status_code = status_code
         self.body = body
 
-    def __unicode__(self):
-        return u'status={} body={}'.format(self.status_code, self.body)
-
     def __str__(self):
-        return self.__unicode__().encode('utf-8')
+        return u'status={} body={}'.format(self.status_code, self.body)
 
     def __repr__(self):
-        return u'<ApiError: {}>'.format(self.__unicode__())
+        return u'<ApiError: {}>'.format(self)
 
 
 class ApiClient(object):
diff --git a/src/sentry/api/endpoints/api_tokens.py b/src/sentry/api/endpoints/api_tokens.py
index 4f5996fd79..c37e2bed8b 100644
--- a/src/sentry/api/endpoints/api_tokens.py
+++ b/src/sentry/api/endpoints/api_tokens.py
@@ -4,6 +4,7 @@ from operator import or_
 from rest_framework import serializers
 from rest_framework.permissions import IsAuthenticated
 from rest_framework.response import Response
+from six.moves import reduce
 
 from sentry.api.base import Endpoint, SessionAuthentication
 from sentry.api.fields import MultipleChoiceField
@@ -51,7 +52,6 @@ class ApiTokensEndpoint(Endpoint):
 
     def delete(self, request):
         token = request.DATA.get('token')
-        print(request.DATA)
         if not token:
             return Response({'token': ''}, status=400)
 
diff --git a/src/sentry/api/endpoints/event_details.py b/src/sentry/api/endpoints/event_details.py
index e1c8df7311..f9454135c1 100644
--- a/src/sentry/api/endpoints/event_details.py
+++ b/src/sentry/api/endpoints/event_details.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from rest_framework.response import Response
 
 from sentry.api.base import Endpoint
@@ -107,11 +109,11 @@ class EventDetailsEndpoint(Endpoint):
         data['release'] = self._get_release_info(request, event)
 
         if next_event:
-            data['nextEventID'] = str(next_event.id)
+            data['nextEventID'] = six.text_type(next_event.id)
         else:
             data['nextEventID'] = None
         if prev_event:
-            data['previousEventID'] = str(prev_event.id)
+            data['previousEventID'] = six.text_type(prev_event.id)
         else:
             data['previousEventID'] = None
 
diff --git a/src/sentry/api/endpoints/group_events.py b/src/sentry/api/endpoints/group_events.py
index 250e89f23c..01f8327272 100644
--- a/src/sentry/api/endpoints/group_events.py
+++ b/src/sentry/api/endpoints/group_events.py
@@ -1,7 +1,10 @@
 from __future__ import absolute_import
 
+import six
+
 from django.db.models import Q
 from operator import or_
+from six.moves import reduce
 
 from sentry.api.base import DocSection
 from sentry.api.bases import GroupEndpoint
@@ -34,7 +37,7 @@ class GroupEventsEndpoint(GroupEndpoint):
         tagvalues = {
             (t[1], t[2]): t[0]
             for t in TagValue.objects.filter(
-                reduce(or_, (Q(key=k, value=v) for k, v in tags.iteritems())),
+                reduce(or_, (Q(key=k, value=v) for k, v in six.iteritems(tags))),
                 project=project,
             ).values_list('id', 'key', 'value')
         }
@@ -42,7 +45,7 @@ class GroupEventsEndpoint(GroupEndpoint):
         try:
             tag_lookups = [
                 (tagkeys[k], tagvalues[(k, v)])
-                for k, v in tags.iteritems()
+                for k, v in six.iteritems(tags)
             ]
         except KeyError:
             # one or more tags were invalid, thus the result should be an empty
diff --git a/src/sentry/api/endpoints/group_tagkey_details.py b/src/sentry/api/endpoints/group_tagkey_details.py
index ddc8023a95..abec35dca5 100644
--- a/src/sentry/api/endpoints/group_tagkey_details.py
+++ b/src/sentry/api/endpoints/group_tagkey_details.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from rest_framework.response import Response
 
 from sentry.api.base import DocSection
@@ -66,7 +68,7 @@ class GroupTagKeyDetailsEndpoint(GroupEndpoint):
         top_values = GroupTagValue.get_top_values(group.id, lookup_key, limit=9)
 
         data = {
-            'id': str(tag_key.id),
+            'id': six.text_type(tag_key.id),
             'key': key,
             'name': tag_key.get_label(),
             'uniqueValues': group_tag_key.values_seen,
diff --git a/src/sentry/api/endpoints/group_tags.py b/src/sentry/api/endpoints/group_tags.py
index cae11f10bf..0dbf5e29b1 100644
--- a/src/sentry/api/endpoints/group_tags.py
+++ b/src/sentry/api/endpoints/group_tags.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from rest_framework.response import Response
 
 from collections import defaultdict
@@ -28,7 +30,7 @@ class GroupTagsEndpoint(GroupEndpoint):
             all_top_values.extend(top_values)
 
             data.append({
-                'id': str(tag_key.id),
+                'id': six.text_type(tag_key.id),
                 'key': TagKey.get_standardized_key(tag_key.key),
                 'name': tag_key.get_label(),
                 'uniqueValues': tag_key.values_seen,
diff --git a/src/sentry/api/endpoints/organization_index.py b/src/sentry/api/endpoints/organization_index.py
index 21673be14b..e704db1cd5 100644
--- a/src/sentry/api/endpoints/organization_index.py
+++ b/src/sentry/api/endpoints/organization_index.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.db import IntegrityError, transaction
 from django.db.models import Count, Q, Sum
 from rest_framework import serializers, status
@@ -76,7 +78,7 @@ class OrganizationIndexEndpoint(Endpoint):
         query = request.GET.get('query')
         if query:
             tokens = tokenize_query(query)
-            for key, value in tokens.iteritems():
+            for key, value in six.iteritems(tokens):
                 if key == 'query':
                     value = ' '.join(value)
                     queryset = queryset.filter(
diff --git a/src/sentry/api/endpoints/organization_projects.py b/src/sentry/api/endpoints/organization_projects.py
index 7ae8d32d2a..3d192b649d 100644
--- a/src/sentry/api/endpoints/organization_projects.py
+++ b/src/sentry/api/endpoints/organization_projects.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from rest_framework.response import Response
 
 from sentry.api.base import DocSection
@@ -61,8 +63,8 @@ class OrganizationProjectsEndpoint(OrganizationEndpoint):
 
         context = []
         for project, pdata in zip(project_list, serialize(project_list, request.user)):
-            assert str(project.id) == pdata['id']
-            pdata['team'] = team_map[str(project.team_id)]
+            assert six.text_type(project.id) == pdata['id']
+            pdata['team'] = team_map[six.text_type(project.team_id)]
             context.append(pdata)
 
         return Response(context)
diff --git a/src/sentry/api/endpoints/organization_shortid.py b/src/sentry/api/endpoints/organization_shortid.py
index 1d5f6b1d63..671c2cb91c 100644
--- a/src/sentry/api/endpoints/organization_shortid.py
+++ b/src/sentry/api/endpoints/organization_shortid.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from rest_framework.response import Response
 
 from sentry.api.base import DocSection
@@ -45,6 +47,6 @@ class ShortIdLookupEndpoint(OrganizationEndpoint):
         return Response({
             'organizationSlug': organization.slug,
             'projectSlug': group.project.slug,
-            'groupId': str(group.id),
+            'groupId': six.text_type(group.id),
             'shortId': group.qualified_short_id,
         })
diff --git a/src/sentry/api/endpoints/organization_slugs.py b/src/sentry/api/endpoints/organization_slugs.py
index cbf385a311..4396c34a6b 100644
--- a/src/sentry/api/endpoints/organization_slugs.py
+++ b/src/sentry/api/endpoints/organization_slugs.py
@@ -1,12 +1,13 @@
 from __future__ import absolute_import
 
-from rest_framework.response import Response
+import six
 
+from django.core.validators import validate_slug, ValidationError
 from django.db import transaction
+from rest_framework.response import Response
 
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.models import Project
-from django.core.validators import validate_slug, ValidationError
 
 
 class SlugsUpdateEndpoint(OrganizationEndpoint):
@@ -24,7 +25,7 @@ class SlugsUpdateEndpoint(OrganizationEndpoint):
         :auth: required
         """
         slugs = request.DATA.get('slugs', {})
-        for project_id, slug in slugs.iteritems():
+        for project_id, slug in six.iteritems(slugs):
             slug = slug.lower()
             try:
                 validate_slug(slug)
@@ -48,12 +49,12 @@ class SlugsUpdateEndpoint(OrganizationEndpoint):
             # Clear out all slugs first so that we can move them
             # around through the uniqueness
             for project in project_q:
-                projects[str(project.id)] = project
+                projects[six.text_type(project.id)] = project
                 project.slug = None
                 project.save()
 
             # Set new ones
-            for project_id, slug in slugs.iteritems():
+            for project_id, slug in six.iteritems(slugs):
                 project = projects.get(project_id)
                 if project is None:
                     continue
diff --git a/src/sentry/api/endpoints/project_docs_platform.py b/src/sentry/api/endpoints/project_docs_platform.py
index 96da5a44dc..5d606ed00f 100644
--- a/src/sentry/api/endpoints/project_docs_platform.py
+++ b/src/sentry/api/endpoints/project_docs_platform.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from rest_framework.response import Response
 
 from sentry.api.bases.project import ProjectEndpoint
@@ -15,15 +17,15 @@ def replace_keys(html, project_key):
     html = html.replace('___PUBLIC_DSN___', project_key.dsn_public)
     html = html.replace('___PUBLIC_KEY___', project_key.public_key)
     html = html.replace('___SECRET_KEY___', project_key.secret_key)
-    html = html.replace('___PROJECT_ID___', str(project_key.project_id))
+    html = html.replace('___PROJECT_ID___', six.text_type(project_key.project_id))
 
     # If we actually render this in the main UI we can also provide
     # extra information about the project (org slug and project slug)
     if '___PROJECT_NAME___' in html or '___ORG_NAME___' in html:
         project = project_key.project
         org = project.organization
-        html = html.replace('___ORG_NAME___', str(org.slug))
-        html = html.replace('___PROJECT_NAME___', str(project.slug))
+        html = html.replace('___ORG_NAME___', six.text_type(org.slug))
+        html = html.replace('___PROJECT_NAME___', six.text_type(project.slug))
 
     return html
 
diff --git a/src/sentry/api/endpoints/project_event_details.py b/src/sentry/api/endpoints/project_event_details.py
index 78648663fc..df05ee74da 100644
--- a/src/sentry/api/endpoints/project_event_details.py
+++ b/src/sentry/api/endpoints/project_event_details.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from rest_framework.response import Response
 
 from sentry.api.base import DocSection
@@ -76,11 +78,11 @@ class ProjectEventDetailsEndpoint(ProjectEndpoint):
         data = serialize(event, request.user)
 
         if next_event:
-            data['nextEventID'] = str(next_event.event_id)
+            data['nextEventID'] = six.text_type(next_event.event_id)
         else:
             data['nextEventID'] = None
         if prev_event:
-            data['previousEventID'] = str(prev_event.event_id)
+            data['previousEventID'] = six.text_type(prev_event.event_id)
         else:
             data['previousEventID'] = None
 
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 25173a2052..a3682f924e 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import, division, print_function
 
+import six
+
 from datetime import timedelta
 from django.db import IntegrityError, transaction
 from django.utils import timezone
@@ -224,7 +226,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
         try:
             query_kwargs = self._build_query_params_from_request(request, project)
         except ValidationError as exc:
-            return Response({'detail': unicode(exc)}, status=400)
+            return Response({'detail': six.text_type(exc)}, status=400)
 
         cursor_result = search.query(**query_kwargs)
 
@@ -322,7 +324,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
             try:
                 query_kwargs = self._build_query_params_from_request(request, project)
             except ValidationError as exc:
-                return Response({'detail': unicode(exc)}, status=400)
+                return Response({'detail': six.text_type(exc)}, status=400)
 
             # bulk mutations are limited to 1000 items
             # TODO(dcramer): it'd be nice to support more than this, but its
@@ -604,8 +606,8 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
             )
 
             result['merge'] = {
-                'parent': str(primary_group.id),
-                'children': [str(g.id) for g in children],
+                'parent': six.text_type(primary_group.id),
+                'children': [six.text_type(g.id) for g in children],
             }
 
         return Response(result)
diff --git a/src/sentry/api/endpoints/project_group_stats.py b/src/sentry/api/endpoints/project_group_stats.py
index f23880abad..e26ce9b878 100644
--- a/src/sentry/api/endpoints/project_group_stats.py
+++ b/src/sentry/api/endpoints/project_group_stats.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from rest_framework.response import Response
 
 from sentry.app import tsdb
@@ -27,6 +29,6 @@ class ProjectGroupStatsEndpoint(ProjectEndpoint, StatsMixin):
         )
 
         return Response({
-            str(k): v
+            six.text_type(k): v
             for k, v in data.items()
         })
diff --git a/src/sentry/api/endpoints/project_tags.py b/src/sentry/api/endpoints/project_tags.py
index bf9231192b..07915aac78 100644
--- a/src/sentry/api/endpoints/project_tags.py
+++ b/src/sentry/api/endpoints/project_tags.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from rest_framework.response import Response
 
 from sentry.api.bases.project import ProjectEndpoint
@@ -16,7 +18,7 @@ class ProjectTagsEndpoint(ProjectEndpoint):
         data = []
         for tag_key in tag_keys:
             data.append({
-                'id': str(tag_key.id),
+                'id': six.text_type(tag_key.id),
                 'key': TagKey.get_standardized_key(tag_key.key),
                 'name': tag_key.get_label(),
                 'uniqueValues': tag_key.values_seen,
diff --git a/src/sentry/api/endpoints/release_files.py b/src/sentry/api/endpoints/release_files.py
index fa5e96aa45..30d4799f47 100644
--- a/src/sentry/api/endpoints/release_files.py
+++ b/src/sentry/api/endpoints/release_files.py
@@ -1,8 +1,7 @@
 from __future__ import absolute_import
 
-from StringIO import StringIO
-
 from django.db import IntegrityError, transaction
+from six import StringIO
 from rest_framework.negotiation import DefaultContentNegotiation
 from rest_framework.parsers import FormParser, MultiPartParser
 from rest_framework.response import Response
diff --git a/src/sentry/api/endpoints/system_health.py b/src/sentry/api/endpoints/system_health.py
index 048cc76f35..1996e442f9 100644
--- a/src/sentry/api/endpoints/system_health.py
+++ b/src/sentry/api/endpoints/system_health.py
@@ -1,13 +1,13 @@
 from __future__ import absolute_import
 
 import itertools
-from hashlib import md5
 
 from rest_framework.response import Response
 
 from sentry import status_checks
 from sentry.api.base import Endpoint
 from sentry.api.permissions import SuperuserPermission
+from sentry.utils.hashlib import md5_text
 
 
 class SystemHealthEndpoint(Endpoint):
@@ -18,7 +18,7 @@ class SystemHealthEndpoint(Endpoint):
         return Response({
             'problems': map(
                 lambda problem: {
-                    'id': md5(problem.message).hexdigest(),
+                    'id': md5_text(problem.message).hexdigest(),
                     'message': problem.message,
                     'severity': problem.severity,
                     'url': problem.url,
diff --git a/src/sentry/api/endpoints/system_options.py b/src/sentry/api/endpoints/system_options.py
index 2836b1e66a..2685c77193 100644
--- a/src/sentry/api/endpoints/system_options.py
+++ b/src/sentry/api/endpoints/system_options.py
@@ -1,14 +1,16 @@
 from __future__ import absolute_import
 
-from rest_framework.response import Response
+import six
 
 import sentry
+
+from django.conf import settings
+from rest_framework.response import Response
+
 from sentry import options
-from sentry.utils.email import is_smtp_enabled
 from sentry.api.base import Endpoint
 from sentry.api.permissions import SuperuserPermission
-
-from django.conf import settings
+from sentry.utils.email import is_smtp_enabled
 
 
 class SystemOptionsEndpoint(Endpoint):
@@ -52,8 +54,8 @@ class SystemOptionsEndpoint(Endpoint):
 
     def put(self, request):
         # TODO(dcramer): this should validate options before saving them
-        for k, v in request.DATA.iteritems():
-            if v and isinstance(v, basestring):
+        for k, v in six.iteritems(request.DATA):
+            if v and isinstance(v, six.string_types):
                 v = v.strip()
             try:
                 option = options.lookup_key(k)
@@ -76,7 +78,7 @@ class SystemOptionsEndpoint(Endpoint):
                     'error': 'invalid_type',
                     'errorDetail': {
                         'option': k,
-                        'message': unicode(e),
+                        'message': six.text_type(e),
                     },
                 }, status=400)
         # TODO(dcramer): this has nothing to do with configuring options and
diff --git a/src/sentry/api/endpoints/user_index.py b/src/sentry/api/endpoints/user_index.py
index 7c996f862b..3eb5d04c62 100644
--- a/src/sentry/api/endpoints/user_index.py
+++ b/src/sentry/api/endpoints/user_index.py
@@ -1,6 +1,9 @@
 from __future__ import absolute_import
 
+import six
+
 from django.db.models import Q
+from six.moves import reduce
 
 from sentry.api.base import Endpoint
 from sentry.api.paginator import DateTimePaginator
@@ -27,7 +30,7 @@ class UserIndexEndpoint(Endpoint):
         query = request.GET.get('query')
         if query:
             tokens = tokenize_query(query)
-            for key, value in tokens.iteritems():
+            for key, value in six.iteritems(tokens):
                 if key == 'query':
                     value = ' '.join(value)
                     queryset = queryset.filter(
diff --git a/src/sentry/api/endpoints/useravatar.py b/src/sentry/api/endpoints/useravatar.py
index 4ef1fc7f6b..26211a8694 100644
--- a/src/sentry/api/endpoints/useravatar.py
+++ b/src/sentry/api/endpoints/useravatar.py
@@ -1,18 +1,15 @@
 from __future__ import absolute_import
 
-from uuid import uuid4
-
-from PIL import Image
-
 from django.conf import settings
-
+from PIL import Image
 from rest_framework import status
 from rest_framework.response import Response
+from six import StringIO
+from uuid import uuid4
 
 from sentry.api.bases.user import UserEndpoint
 from sentry.api.serializers import serialize
 from sentry.models import UserAvatar, File
-from sentry.utils.compat import StringIO
 
 
 MIN_DIMENSION = 256
diff --git a/src/sentry/api/fields/user.py b/src/sentry/api/fields/user.py
index 0c77a24afe..4a7bdeb1f0 100644
--- a/src/sentry/api/fields/user.py
+++ b/src/sentry/api/fields/user.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import, print_function
 
+import six
+
 from rest_framework import serializers
 
 from sentry.models import User
@@ -14,7 +16,7 @@ class UserField(serializers.WritableField):
         if not data:
             return None
 
-        if isinstance(data, (int, long)) or data.isdigit():
+        if isinstance(data, six.integer_types) or data.isdigit():
             try:
                 return User.objects.get(id=data)
             except User.DoesNotExist:
diff --git a/src/sentry/api/serializers/base.py b/src/sentry/api/serializers/base.py
index e71cbbd646..4f8e4867c6 100644
--- a/src/sentry/api/serializers/base.py
+++ b/src/sentry/api/serializers/base.py
@@ -18,7 +18,7 @@ def serialize(objects, user=None, serializer=None):
         return serialize([objects], user=user, serializer=serializer)[0]
 
     # elif isinstance(obj, dict):
-    #     return dict((k, serialize(v, request=request)) for k, v in obj.iteritems())
+    #     return dict((k, serialize(v, request=request)) for k, v in six.iteritems(obj))
 
     if serializer is None:
         # find the first object that is in the registry
diff --git a/src/sentry/api/serializers/models/activity.py b/src/sentry/api/serializers/models/activity.py
index 5352d74a47..2d62b5ddda 100644
--- a/src/sentry/api/serializers/models/activity.py
+++ b/src/sentry/api/serializers/models/activity.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.models import Activity
 
@@ -15,13 +17,13 @@ class ActivitySerializer(Serializer):
 
         return {
             item: {
-                'user': users[str(item.user_id)] if item.user_id else None,
+                'user': users[six.text_type(item.user_id)] if item.user_id else None,
             } for item in item_list
         }
 
     def serialize(self, obj, attrs, user):
         return {
-            'id': str(obj.id),
+            'id': six.text_type(obj.id),
             'user': attrs['user'],
             'type': obj.get_type_display(),
             'data': obj.data,
@@ -47,8 +49,8 @@ class OrganizationActivitySerializer(ActivitySerializer):
         }
 
         for item in item_list:
-            attrs[item]['issue'] = groups[str(item.group_id)] if item.group_id else None
-            attrs[item]['project'] = projects[str(item.project_id)]
+            attrs[item]['issue'] = groups[six.text_type(item.group_id)] if item.group_id else None
+            attrs[item]['project'] = projects[six.text_type(item.project_id)]
         return attrs
 
     def serialize(self, obj, attrs, user):
diff --git a/src/sentry/api/serializers/models/apitoken.py b/src/sentry/api/serializers/models/apitoken.py
index 0bb3bcc439..b99d239367 100644
--- a/src/sentry/api/serializers/models/apitoken.py
+++ b/src/sentry/api/serializers/models/apitoken.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.api.serializers import Serializer, register
 from sentry.models import ApiToken
 
@@ -9,6 +11,6 @@ class ApiTokenSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         return {
             'token': obj.token,
-            'scopes': [k for k, v in obj.scopes.iteritems() if v],
+            'scopes': [k for k, v in six.iteritems(obj.scopes) if v],
             'dateCreated': obj.date_added,
         }
diff --git a/src/sentry/api/serializers/models/auditlogentry.py b/src/sentry/api/serializers/models/auditlogentry.py
index 7874280071..360450ae1c 100644
--- a/src/sentry/api/serializers/models/auditlogentry.py
+++ b/src/sentry/api/serializers/models/auditlogentry.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.models import AuditLogEntry
 
@@ -15,7 +17,7 @@ class AuditLogEntrySerializer(Serializer):
 
         return {
             item: {
-                'actor': actors[str(item.actor_id)] if item.actor_id else {
+                'actor': actors[six.text_type(item.actor_id)] if item.actor_id else {
                     'name': item.get_actor_name(),
                 },
             } for item in item_list
@@ -23,7 +25,7 @@ class AuditLogEntrySerializer(Serializer):
 
     def serialize(self, obj, attrs, user):
         return {
-            'id': str(obj.id),
+            'id': six.text_type(obj.id),
             'actor': attrs['actor'],
             'event': obj.get_event_display(),
             'ipAddress': obj.ip_address,
diff --git a/src/sentry/api/serializers/models/broadcast.py b/src/sentry/api/serializers/models/broadcast.py
index 1ccd51a49b..96ba0083e6 100644
--- a/src/sentry/api/serializers/models/broadcast.py
+++ b/src/sentry/api/serializers/models/broadcast.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.api.serializers import Serializer, register
 from sentry.models import Broadcast, BroadcastSeen
 
@@ -23,7 +25,7 @@ class BroadcastSerializer(Serializer):
 
     def serialize(self, obj, attrs, user):
         return {
-            'id': str(obj.id),
+            'id': six.text_type(obj.id),
             'message': obj.message,
             'title': obj.title,
             'link': obj.link,
diff --git a/src/sentry/api/serializers/models/dsym_file.py b/src/sentry/api/serializers/models/dsym_file.py
index abbe81368c..813701ce47 100644
--- a/src/sentry/api/serializers/models/dsym_file.py
+++ b/src/sentry/api/serializers/models/dsym_file.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.api.serializers import Serializer, register
 from sentry.models import ProjectDSymFile, GlobalDSymFile
 
@@ -9,7 +11,7 @@ from sentry.models import ProjectDSymFile, GlobalDSymFile
 class DSymFileSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         d = {
-            'id': str(obj.id),
+            'id': six.text_type(obj.id),
             'uuid': obj.uuid,
             'cpuName': obj.cpu_name,
             'objectName': obj.object_name,
diff --git a/src/sentry/api/serializers/models/environment.py b/src/sentry/api/serializers/models/environment.py
index 127b2a65fb..b773d2349e 100644
--- a/src/sentry/api/serializers/models/environment.py
+++ b/src/sentry/api/serializers/models/environment.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from collections import namedtuple
 from datetime import timedelta
 from django.utils import timezone
@@ -15,7 +17,7 @@ StatsPeriod = namedtuple('StatsPeriod', ('segments', 'interval'))
 class EnvironmentSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         return {
-            'id': str(obj.id),
+            'id': six.text_type(obj.id),
             'name': obj.name,
         }
 
@@ -40,7 +42,7 @@ class GroupEnvironmentWithStatsSerializer(EnvironmentSerializer):
         for item in item_list:
             items[self.group.id].append(item.id)
 
-        for key, (segments, interval) in self.STATS_PERIODS.iteritems():
+        for key, (segments, interval) in six.iteritems(self.STATS_PERIODS):
             until = self.until or timezone.now()
             since = self.since or until - ((segments - 1) * interval)
 
diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 37f1ec4a67..3773d74699 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from datetime import datetime
 from django.utils import timezone
 
@@ -17,7 +19,7 @@ class EventSerializer(Serializer):
     def _get_entries(self, event, user, is_public=False):
         # XXX(dcramer): These are called entries for future-proofing
         interface_list = []
-        for key, interface in event.interfaces.iteritems():
+        for key, interface in six.iteritems(event.interfaces):
             # we treat user as a special contextual item
             if key in self._reserved_keys:
                 continue
@@ -80,7 +82,7 @@ class EventSerializer(Serializer):
                 'type': error['type'],
                 'message': message,
                 'data': {
-                    k: v for k, v in error.iteritems()
+                    k: v for k, v in six.iteritems(error)
                     if k != 'type'
                 },
             }
@@ -111,9 +113,9 @@ class EventSerializer(Serializer):
 
         # TODO(dcramer): move release serialization here
         d = {
-            'id': str(obj.id),
-            'groupID': obj.group.id,
-            'eventID': str(obj.event_id),
+            'id': six.text_type(obj.id),
+            'groupID': six.text_type(obj.group.id),
+            'eventID': six.text_type(obj.event_id),
             'size': obj.size,
             'entries': attrs['entries'],
             # See GH-3248
diff --git a/src/sentry/api/serializers/models/eventuser.py b/src/sentry/api/serializers/models/eventuser.py
index f4839deb4f..b98f8e2748 100644
--- a/src/sentry/api/serializers/models/eventuser.py
+++ b/src/sentry/api/serializers/models/eventuser.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.api.serializers import Serializer, register
 from sentry.models import EventUser
 from sentry.utils.avatar import get_gravatar_url
@@ -9,7 +11,7 @@ from sentry.utils.avatar import get_gravatar_url
 class EventUserSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         return {
-            'id': str(obj.id),
+            'id': six.text_type(obj.id),
             'identifier': obj.ident,
             'username': obj.username,
             'email': obj.email,
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 4921f263dc..2ead02aeb3 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import, print_function
 
+import six
+
 from collections import namedtuple
 from datetime import timedelta
 from django.core.urlresolvers import reverse
@@ -149,15 +151,15 @@ class GroupSerializer(Serializer):
         # TODO(dcramer): remove in 8.6+
         if event_type == 'error':
             if 'value' in metadata:
-                metadata['value'] = unicode(metadata['value'])
+                metadata['value'] = six.text_type(metadata['value'])
             if 'type' in metadata:
-                metadata['type'] = unicode(metadata['type'])
+                metadata['type'] = six.text_type(metadata['type'])
 
         return {
-            'id': str(obj.id),
+            'id': six.text_type(obj.id),
             'shareId': obj.get_share_id(),
             'shortId': obj.qualified_short_id,
-            'count': str(obj.times_seen),
+            'count': six.text_type(obj.times_seen),
             'userCount': attrs['user_count'],
             'title': obj.message_short,
             'culprit': obj.culprit,
diff --git a/src/sentry/api/serializers/models/grouprelease.py b/src/sentry/api/serializers/models/grouprelease.py
index dae7318b36..469644e88a 100644
--- a/src/sentry/api/serializers/models/grouprelease.py
+++ b/src/sentry/api/serializers/models/grouprelease.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from collections import namedtuple
 from datetime import timedelta
 from django.utils import timezone
@@ -57,7 +59,7 @@ class GroupReleaseWithStatsSerializer(GroupReleaseSerializer):
             items.setdefault(item.group_id, []).append(item.id)
             attrs[item]['stats'] = {}
 
-        for key, (segments, interval) in self.STATS_PERIODS.iteritems():
+        for key, (segments, interval) in six.iteritems(self.STATS_PERIODS):
             until = self.until or timezone.now()
             since = self.since or until - ((segments - 1) * interval)
 
diff --git a/src/sentry/api/serializers/models/groupseen.py b/src/sentry/api/serializers/models/groupseen.py
index 9352057c3b..73806f6d94 100644
--- a/src/sentry/api/serializers/models/groupseen.py
+++ b/src/sentry/api/serializers/models/groupseen.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.models import GroupSeen
 
@@ -15,7 +17,7 @@ class GroupSeenSerializer(Serializer):
         result = {}
         for item in item_list:
             result[item] = {
-                'user': user_map[str(item.user_id)],
+                'user': user_map[six.text_type(item.user_id)],
             }
         return result
 
diff --git a/src/sentry/api/serializers/models/grouptagkey.py b/src/sentry/api/serializers/models/grouptagkey.py
index d21369d6c7..80b35d9b17 100644
--- a/src/sentry/api/serializers/models/grouptagkey.py
+++ b/src/sentry/api/serializers/models/grouptagkey.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.api.serializers import Serializer, register
 from sentry.models import GroupTagKey, TagKey
 
@@ -30,7 +32,7 @@ class GroupTagKeySerializer(Serializer):
 
     def serialize(self, obj, attrs, user):
         return {
-            'id': str(obj.id),
+            'id': six.text_type(obj.id),
             'name': attrs['name'],
             'key': attrs['key'],
             'uniqueValues': obj.values_seen,
diff --git a/src/sentry/api/serializers/models/grouptagvalue.py b/src/sentry/api/serializers/models/grouptagvalue.py
index 61a49b7abf..b6ebdf6156 100644
--- a/src/sentry/api/serializers/models/grouptagvalue.py
+++ b/src/sentry/api/serializers/models/grouptagvalue.py
@@ -1,8 +1,10 @@
 from __future__ import absolute_import
 
 import operator
+import six
 
 from django.db.models import Q
+from six.moves import reduce
 
 from sentry.api.serializers import Serializer, register
 from sentry.models import EventUser, GroupTagValue, TagKey, TagValue
@@ -72,7 +74,7 @@ class GroupTagValueSerializer(Serializer):
 
     def serialize(self, obj, attrs, user):
         return {
-            'id': str(obj.id),
+            'id': six.text_type(obj.id),
             'name': attrs['name'],
             'key': TagKey.get_standardized_key(obj.key),
             'value': obj.value,
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index c398cdc777..c7d46e476b 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.app import quotas
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.auth import access
@@ -18,7 +20,7 @@ from sentry.models import (
 class OrganizationSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         return {
-            'id': str(obj.id),
+            'id': six.text_type(obj.id),
             'slug': obj.slug,
             'name': obj.name,
             'dateCreated': obj.date_added,
diff --git a/src/sentry/api/serializers/models/organization_member.py b/src/sentry/api/serializers/models/organization_member.py
index 492da50350..867d146976 100644
--- a/src/sentry/api/serializers/models/organization_member.py
+++ b/src/sentry/api/serializers/models/organization_member.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.models import OrganizationMember
 
@@ -15,13 +17,13 @@ class OrganizationMemberSerializer(Serializer):
 
         return {
             item: {
-                'user': users[str(item.user_id)] if item.user_id else None,
+                'user': users[six.text_type(item.user_id)] if item.user_id else None,
             } for item in item_list
         }
 
     def serialize(self, obj, attrs, user):
         d = {
-            'id': str(obj.id),
+            'id': six.text_type(obj.id),
             'email': obj.get_email(),
             'name': obj.user.get_display_name() if obj.user else obj.get_email(),
             'user': attrs['user'],
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 7d895323eb..f281aea5a2 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from collections import defaultdict
 from django.db.models import Q
 
@@ -90,7 +92,7 @@ class ProjectSerializer(Serializer):
         status_label = STATUS_LABELS.get(obj.status, 'unknown')
 
         return {
-            'id': str(obj.id),
+            'id': six.text_type(obj.id),
             'slug': obj.slug,
             'name': obj.name,
             'isPublic': obj.public,
@@ -120,7 +122,7 @@ class ProjectWithOrganizationSerializer(ProjectSerializer):
             for d in serialize(list(set(i.organization for i in item_list)), user)
         }
         for item in item_list:
-            attrs[item]['organization'] = orgs[str(item.organization_id)]
+            attrs[item]['organization'] = orgs[six.text_type(item.organization_id)]
         return attrs
 
     def serialize(self, obj, attrs, user):
diff --git a/src/sentry/api/serializers/models/release.py b/src/sentry/api/serializers/models/release.py
index 2a95593533..c0478775dd 100644
--- a/src/sentry/api/serializers/models/release.py
+++ b/src/sentry/api/serializers/models/release.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.models import Release, TagValue
 
@@ -24,7 +26,7 @@ class ReleaseSerializer(Serializer):
         for item in item_list:
             result[item] = {
                 'tag': tags.get(item.version),
-                'owner': owners[str(item.owner_id)] if item.owner_id else None,
+                'owner': owners[six.text_type(item.owner_id)] if item.owner_id else None,
             }
         return result
 
diff --git a/src/sentry/api/serializers/models/release_file.py b/src/sentry/api/serializers/models/release_file.py
index fede29bb56..17af4a8066 100644
--- a/src/sentry/api/serializers/models/release_file.py
+++ b/src/sentry/api/serializers/models/release_file.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.api.serializers import Serializer, register
 from sentry.models import ReleaseFile
 
@@ -8,7 +10,7 @@ from sentry.models import ReleaseFile
 class ReleaseFileSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         return {
-            'id': str(obj.id),
+            'id': six.text_type(obj.id),
             'name': obj.name,
             'headers': obj.file.headers,
             'size': obj.file.size,
diff --git a/src/sentry/api/serializers/models/rule.py b/src/sentry/api/serializers/models/rule.py
index c4d3a6859e..09e642e2c0 100644
--- a/src/sentry/api/serializers/models/rule.py
+++ b/src/sentry/api/serializers/models/rule.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.api.serializers import Serializer, register
 from sentry.models import Rule
 
@@ -10,7 +12,7 @@ class RuleSerializer(Serializer):
         d = {
             # XXX(dcramer): we currently serialize unsaved rule objects
             # as part of the rule editor
-            'id': str(obj.id) if obj.id else None,
+            'id': six.text_type(obj.id) if obj.id else None,
             'conditions': obj.data.get('conditions', []),
             'actions': obj.data.get('actions', []),
             'actionMatch': obj.data.get('action_match', 'all'),
diff --git a/src/sentry/api/serializers/models/savedsearch.py b/src/sentry/api/serializers/models/savedsearch.py
index 5c3a7bf7ef..94d4998dc5 100644
--- a/src/sentry/api/serializers/models/savedsearch.py
+++ b/src/sentry/api/serializers/models/savedsearch.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.api.serializers import Serializer, register
 from sentry.models import SavedSearch, SavedSearchUserDefault
 
@@ -24,7 +26,7 @@ class SavedSearchSerializer(Serializer):
 
     def serialize(self, obj, attrs, user):
         return {
-            'id': str(obj.id),
+            'id': six.text_type(obj.id),
             'name': obj.name,
             'query': obj.query,
             'isDefault': obj.is_default,
diff --git a/src/sentry/api/serializers/models/tagkey.py b/src/sentry/api/serializers/models/tagkey.py
index b96f1b3e1e..2d0932b629 100644
--- a/src/sentry/api/serializers/models/tagkey.py
+++ b/src/sentry/api/serializers/models/tagkey.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.api.serializers import Serializer, register
 from sentry.models import TagKey
 
@@ -8,7 +10,7 @@ from sentry.models import TagKey
 class TagKeySerializer(Serializer):
     def serialize(self, obj, attrs, user):
         return {
-            'id': str(obj.id),
+            'id': six.text_type(obj.id),
             'key': TagKey.get_standardized_key(obj.key),
             'name': obj.get_label(),
             'uniqueValues': obj.values_seen,
diff --git a/src/sentry/api/serializers/models/tagvalue.py b/src/sentry/api/serializers/models/tagvalue.py
index 629234f11d..f98295f7b8 100644
--- a/src/sentry/api/serializers/models/tagvalue.py
+++ b/src/sentry/api/serializers/models/tagvalue.py
@@ -1,8 +1,10 @@
 from __future__ import absolute_import
 
 import operator
+import six
 
 from django.db.models import Q
+from six.moves import reduce
 
 from sentry.api.serializers import Serializer, register
 from sentry.models import EventUser, TagKey, TagValue
@@ -49,7 +51,7 @@ class TagValueSerializer(Serializer):
 
     def serialize(self, obj, attrs, user):
         return {
-            'id': str(obj.id),
+            'id': six.text_type(obj.id),
             'key': TagKey.get_standardized_key(obj.key),
             'name': attrs['name'],
             'value': obj.value,
@@ -62,6 +64,6 @@ class TagValueSerializer(Serializer):
 class EnvironmentTagValueSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         return {
-            'id': str(obj.id),
+            'id': six.text_type(obj.id),
             'name': obj.value,
         }
diff --git a/src/sentry/api/serializers/models/team.py b/src/sentry/api/serializers/models/team.py
index 5817cbf2c1..7322352957 100644
--- a/src/sentry/api/serializers/models/team.py
+++ b/src/sentry/api/serializers/models/team.py
@@ -1,8 +1,9 @@
 from __future__ import absolute_import
 
-import itertools
+import six
 
 from collections import defaultdict
+from six.moves import zip
 
 from sentry.app import env
 from sentry.api.serializers import Serializer, register, serialize
@@ -59,7 +60,7 @@ class TeamSerializer(Serializer):
 
     def serialize(self, obj, attrs, user):
         return {
-            'id': str(obj.id),
+            'id': six.text_type(obj.id),
             'slug': obj.slug,
             'name': obj.name,
             'dateCreated': obj.date_added,
@@ -85,7 +86,7 @@ class TeamWithProjectsSerializer(TeamSerializer):
             project._organization_cache = orgs[project.organization_id]
 
         project_map = defaultdict(list)
-        for project, data in itertools.izip(project_qs, serialize(project_qs, user)):
+        for project, data in zip(project_qs, serialize(project_qs, user)):
             project_map[project.team_id].append(data)
 
         result = super(TeamWithProjectsSerializer, self).get_attrs(item_list, user)
diff --git a/src/sentry/api/serializers/models/user.py b/src/sentry/api/serializers/models/user.py
index 77778851fe..af70877d1e 100644
--- a/src/sentry/api/serializers/models/user.py
+++ b/src/sentry/api/serializers/models/user.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.conf import settings
 
 from sentry.app import env
@@ -45,7 +47,7 @@ class UserSerializer(Serializer):
 
     def serialize(self, obj, attrs, user):
         d = {
-            'id': str(obj.id),
+            'id': six.text_type(obj.id),
             'name': obj.get_display_name(),
             'username': obj.username,
             'email': obj.email,
diff --git a/src/sentry/api/serializers/models/userreport.py b/src/sentry/api/serializers/models/userreport.py
index 36962388fd..06782ff781 100644
--- a/src/sentry/api/serializers/models/userreport.py
+++ b/src/sentry/api/serializers/models/userreport.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.api.serializers import register, serialize, Serializer
 from sentry.models import UserReport
 
@@ -10,7 +12,7 @@ class UserReportSerializer(Serializer):
         # TODO(dcramer): add in various context from the event
         # context == user / http / extra interfaces
         return {
-            'id': str(obj.id),
+            'id': six.text_type(obj.id),
             'eventID': obj.event_id,
             'name': obj.name,
             'email': obj.email,
@@ -30,7 +32,7 @@ class ProjectUserReportSerializer(UserReportSerializer):
         attrs = {}
         for item in item_list:
             attrs[item] = {
-                'group': groups[str(item.group_id)] if item.group_id else None,
+                'group': groups[six.text_type(item.group_id)] if item.group_id else None,
             }
         return attrs
 
diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index 91bc1f4132..ef23cbf025 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import, print_function
 
 import logging
-from hashlib import md5
+
 from uuid import uuid4
 
 from django.conf import settings
@@ -19,6 +19,7 @@ from sentry.models import (
 )
 from sentry.tasks.auth import email_missing_links
 from sentry.utils import auth
+from sentry.utils.hashlib import md5_text
 from sentry.utils.http import absolute_uri
 from sentry.utils.retries import TimedRetryPolicy
 from sentry.web.forms.accounts import AuthenticationForm
@@ -113,7 +114,7 @@ class AuthHelper(object):
         # we serialize the pipeline to be [AuthView().get_ident(), ...] which
         # allows us to determine if the pipeline has changed during the auth
         # flow or if the user is somehow circumventing a chunk of it
-        self.signature = md5(
+        self.signature = md5_text(
             ' '.join(av.get_ident() for av in self.pipeline)
         ).hexdigest()
 
@@ -558,7 +559,7 @@ class AuthHelper(object):
         lock = locks.get(
             'sso:auth:{}:{}'.format(
                 auth_provider.id,
-                md5(unicode(identity['id'])).hexdigest(),
+                md5_text(identity['id']).hexdigest(),
             ),
             duration=5,
         )
diff --git a/src/sentry/auth/manager.py b/src/sentry/auth/manager.py
index a011400ca8..b734d5c5c8 100644
--- a/src/sentry/auth/manager.py
+++ b/src/sentry/auth/manager.py
@@ -2,6 +2,8 @@ from __future__ import absolute_import, print_function
 
 __all__ = ['ProviderManager']
 
+import six
+
 from .exceptions import ProviderNotRegistered
 
 
@@ -12,7 +14,7 @@ class ProviderManager(object):
         self.__values = {}
 
     def __iter__(self):
-        return self.__values.iteritems()
+        return six.iteritems(self.__values)
 
     def get(self, key, **kwargs):
         try:
diff --git a/src/sentry/auth/providers/oauth2.py b/src/sentry/auth/providers/oauth2.py
index 8a1266ba8c..12a83c0b35 100644
--- a/src/sentry/auth/providers/oauth2.py
+++ b/src/sentry/auth/providers/oauth2.py
@@ -2,9 +2,8 @@ from __future__ import absolute_import, print_function
 
 import logging
 
+from six.moves.urllib.parse import parse_qsl, urlencode
 from time import time
-from urllib import urlencode
-from urlparse import parse_qsl
 from uuid import uuid4
 
 from sentry.auth import Provider, AuthView
@@ -50,7 +49,7 @@ class OAuth2Login(AuthView):
         if 'code' in request.GET:
             return helper.next_step()
 
-        state = str(uuid4())
+        state = uuid4().hex
 
         params = self.get_authorize_params(
             state=state,
diff --git a/src/sentry/buffer/base.py b/src/sentry/buffer/base.py
index 820e482b69..1188400fb6 100644
--- a/src/sentry/buffer/base.py
+++ b/src/sentry/buffer/base.py
@@ -8,6 +8,7 @@ sentry.buffer.base
 from __future__ import absolute_import
 
 import logging
+import six
 
 from django.db.models import F
 
@@ -22,6 +23,7 @@ class BufferMount(type):
         return new_cls
 
 
+@six.add_metaclass(BufferMount)
 class Buffer(object):
     """
     Buffers act as temporary stores for counters. The default implementation is just a passthru and
@@ -35,7 +37,6 @@ class Buffer(object):
     This is useful in situations where a single event might be happening so fast that the queue cant
     keep up with the updates.
     """
-    __metaclass__ = BufferMount
 
     def incr(self, model, columns, filters, extra=None):
         """
@@ -60,7 +61,7 @@ class Buffer(object):
         return []
 
     def process(self, model, columns, filters, extra=None):
-        update_kwargs = dict((c, F(c) + v) for c, v in columns.iteritems())
+        update_kwargs = dict((c, F(c) + v) for c, v in six.iteritems(columns))
         if extra:
             update_kwargs.update(extra)
 
diff --git a/src/sentry/buffer/redis.py b/src/sentry/buffer/redis.py
index f9271c8cf4..52ca1ac00c 100644
--- a/src/sentry/buffer/redis.py
+++ b/src/sentry/buffer/redis.py
@@ -7,6 +7,8 @@ sentry.buffer.redis
 """
 from __future__ import absolute_import
 
+import six
+
 from time import time
 
 from django.db import models
@@ -17,7 +19,7 @@ from sentry.exceptions import InvalidConfiguration
 from sentry.tasks.process_buffer import process_incr
 from sentry.utils import metrics
 from sentry.utils.compat import pickle
-from sentry.utils.hashlib import md5
+from sentry.utils.hashlib import md5_text
 from sentry.utils.imports import import_string
 from sentry.utils.redis import get_cluster_from_options
 
@@ -34,7 +36,7 @@ class RedisBuffer(Buffer):
             with self.cluster.all() as client:
                 client.ping()
         except Exception as e:
-            raise InvalidConfiguration(unicode(e))
+            raise InvalidConfiguration(six.text_type(e))
 
     def _coerce_val(self, value):
         if isinstance(value, models.Model):
@@ -47,8 +49,10 @@ class RedisBuffer(Buffer):
         """
         return 'b:k:%s:%s' % (
             model._meta,
-            md5('&'.join('%s=%s' % (k, self._coerce_val(v))
-                for k, v in sorted(filters.iteritems()))).hexdigest(),
+            md5_text(
+                '&'.join('%s=%s' % (k, self._coerce_val(v))
+                    for k, v in sorted(six.iteritems(filters)))
+            ).hexdigest(),
         )
 
     def _make_lock_key(self, key):
@@ -73,11 +77,11 @@ class RedisBuffer(Buffer):
         pipe = conn.pipeline()
         pipe.hsetnx(key, 'm', '%s.%s' % (model.__module__, model.__name__))
         pipe.hsetnx(key, 'f', pickle.dumps(filters))
-        for column, amount in columns.iteritems():
+        for column, amount in six.iteritems(columns):
             pipe.hincrby(key, 'i+' + column, amount)
 
         if extra:
-            for column, value in extra.iteritems():
+            for column, value in six.iteritems(extra):
                 pipe.hset(key, 'e+' + column, pickle.dumps(value))
         pipe.expire(key, self.key_expire)
         pipe.zadd(self.pending_key, time(), key)
@@ -91,7 +95,7 @@ class RedisBuffer(Buffer):
             return
 
         try:
-            for host_id in self.cluster.hosts.iterkeys():
+            for host_id in six.iterkeys(self.cluster.hosts):
                 conn = self.cluster.get_local_client(host_id)
                 keys = conn.zrange(self.pending_key, 0, -1)
                 if not keys:
@@ -136,7 +140,7 @@ class RedisBuffer(Buffer):
             filters = pickle.loads(values['f'])
             incr_values = {}
             extra_values = {}
-            for k, v in values.iteritems():
+            for k, v in six.iteritems(values):
                 if k.startswith('i+'):
                     incr_values[k[2:]] = int(v)
                 elif k.startswith('e+'):
diff --git a/src/sentry/celery.py b/src/sentry/celery.py
index e119344a36..6784298599 100644
--- a/src/sentry/celery.py
+++ b/src/sentry/celery.py
@@ -35,7 +35,8 @@ def patch_thread_ident():
         from django.db.backends import BaseDatabaseWrapper, DatabaseError
 
         if 'validate_thread_sharing' in BaseDatabaseWrapper.__dict__:
-            import thread
+            from six.moves import _thread as thread
+
             _get_ident = thread.get_ident
 
             __old__init__ = BaseDatabaseWrapper.__init__
diff --git a/src/sentry/conf/locale.py b/src/sentry/conf/locale.py
index 2573eb5f51..32ceea0d4b 100644
--- a/src/sentry/conf/locale.py
+++ b/src/sentry/conf/locale.py
@@ -1,3 +1,5 @@
+from __future__ import absolute_import
+
 import os
 import json
 import sentry
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index b8f798a594..68f44e0164 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -11,17 +11,17 @@ from __future__ import absolute_import
 
 from django.conf.global_settings import *  # NOQA
 
-from datetime import timedelta
-
 import os
 import os.path
 import socket
 import sys
 import tempfile
-import urlparse
 
 import sentry
 
+from datetime import timedelta
+from six.moves.urllib.parse import urlparse
+
 gettext_noop = lambda s: s
 
 socket.setdefaulttimeout(5)
@@ -66,7 +66,7 @@ DATABASES = {
 
 
 if 'DATABASE_URL' in os.environ:
-    url = urlparse.urlparse(os.environ['DATABASE_URL'])
+    url = urlparse(os.environ['DATABASE_URL'])
 
     # Ensure default database exists.
     DATABASES['default'] = DATABASES.get('default', {})
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index ad1db7407d..3f9f69a028 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -12,11 +12,12 @@ from __future__ import absolute_import, print_function
 
 import logging
 import os.path
-from operator import attrgetter
-from collections import OrderedDict
+import six
 
+from collections import OrderedDict
 from django.conf import settings
 from django.utils.translation import ugettext_lazy as _
+from operator import attrgetter
 
 
 def get_all_languages():
@@ -89,7 +90,7 @@ LOG_LEVELS = {
 }
 DEFAULT_LOG_LEVEL = 'error'
 DEFAULT_LOGGER_NAME = ''
-LOG_LEVELS_MAP = {v: k for k, v in LOG_LEVELS.iteritems()}
+LOG_LEVELS_MAP = {v: k for k, v in six.iteritems(LOG_LEVELS)}
 
 
 # Default alerting threshold values
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 8adda74ae7..17df7e07f1 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -18,8 +18,9 @@ import zlib
 
 from datetime import datetime, timedelta
 from django.utils.crypto import constant_time_compare
-from django.utils.encoding import smart_str
+from django.utils.encoding import smart_bytes
 from gzip import GzipFile
+from six import StringIO
 from time import time
 
 from sentry.app import env
@@ -34,7 +35,6 @@ from sentry.models import EventError, Project, ProjectKey, TagKey, TagValue
 from sentry.tasks.store import preprocess_event
 from sentry.utils import json
 from sentry.utils.auth import parse_auth_header
-from sentry.utils.compat import StringIO
 from sentry.utils.strings import decompress
 from sentry.utils.validators import is_float, is_event_id
 
@@ -83,7 +83,7 @@ class InvalidFingerprint(Exception):
 class Auth(object):
     def __init__(self, auth_vars, is_public=False):
         self.client = auth_vars.get('sentry_client')
-        self.version = str(auth_vars.get('sentry_version'))
+        self.version = six.text_type(auth_vars.get('sentry_version'))
         self.secret_key = auth_vars.get('sentry_secret')
         self.public_key = auth_vars.get('sentry_key')
         self.is_public = is_public
@@ -179,7 +179,7 @@ class ClientApiHelper(object):
         else:
             result = {
                 k: request.GET[k]
-                for k in request.GET.iterkeys()
+                for k in six.iterkeys(request.GET)
                 if k[:7] == 'sentry_'
             }
         if not result:
@@ -225,7 +225,7 @@ class ClientApiHelper(object):
         except Exception as e:
             # This error should be caught as it suggests that there's a
             # bug somewhere in the client's code.
-            self.log.debug(unicode(e), exc_info=True)
+            self.log.debug(six.text_type(e), exc_info=True)
             raise APIError('Bad data decoding request (%s, %s)' % (
                 type(e).__name__, e
             ))
@@ -241,7 +241,7 @@ class ClientApiHelper(object):
         except Exception as e:
             # This error should be caught as it suggests that there's a
             # bug somewhere in the client's code.
-            self.log.debug(unicode(e), exc_info=True)
+            self.log.debug(six.text_type(e), exc_info=True)
             raise APIError('Bad data decoding request (%s, %s)' %
                 (type(e).__name__, e)
             )
@@ -255,7 +255,7 @@ class ClientApiHelper(object):
         except Exception as e:
             # This error should be caught as it suggests that there's a
             # bug somewhere in the client's code.
-            self.log.debug(unicode(e), exc_info=True)
+            self.log.debug(six.text_type(e), exc_info=True)
             raise APIError('Bad data decoding request (%s, %s)' %
                 (type(e).__name__, e)
             )
@@ -267,13 +267,13 @@ class ClientApiHelper(object):
         except Exception as e:
             # This error should be caught as it suggests that there's a
             # bug somewhere in the client's code.
-            self.log.debug(unicode(e), exc_info=True)
+            self.log.debug(six.text_type(e), exc_info=True)
             raise APIError('Bad data reconstructing object (%s, %s)' %
                 (type(e).__name__, e)
             )
 
         # XXX: ensure keys are coerced to strings
-        return dict((smart_str(k), v) for k, v in obj.iteritems())
+        return dict((smart_bytes(k), v) for k, v in six.iteritems(obj))
 
     def _process_data_timestamp(self, data, current_datetime=None):
         value = data['timestamp']
@@ -321,9 +321,9 @@ class ClientApiHelper(object):
 
         result = []
         for bit in data['fingerprint']:
-            if not isinstance(bit, (basestring, int, float)):
+            if not isinstance(bit, six.string_types + six.integer_types + (float,)):
                 raise InvalidFingerprint
-            result.append(unicode(bit))
+            result.append(six.text_type(bit))
         return result
 
     def parse_client_as_sdk(self, value):
@@ -432,7 +432,7 @@ class ClientApiHelper(object):
 
         if data.get('tags') is not None:
             if type(data['tags']) == dict:
-                data['tags'] = data['tags'].items()
+                data['tags'] = list(data['tags'].items())
             elif not isinstance(data['tags'], (list, tuple)):
                 self.log.debug(
                     'Discarded invalid type for tags: %s', type(data['tags']))
@@ -631,7 +631,7 @@ class ClientApiHelper(object):
                     DEFAULT_LOG_LEVEL, DEFAULT_LOG_LEVEL)
 
         if data.get('release'):
-            data['release'] = unicode(data['release'])
+            data['release'] = six.text_type(data['release'])
             if len(data['release']) > 64:
                 data['errors'].append({
                     'type': EventError.VALUE_TOO_LONG,
@@ -695,7 +695,7 @@ class CspApiHelper(ClientApiHelper):
         meta = data.pop('_meta', {})
 
         # All keys are sent with hyphens, so we want to conver to underscores
-        report = dict(map(lambda v: (v[0].replace('-', '_'), v[1]), data.iteritems()))
+        report = dict(map(lambda v: (v[0].replace('-', '_'), v[1]), six.iteritems(data)))
 
         try:
             inst = Csp.to_python(report)
@@ -733,7 +733,7 @@ class CspApiHelper(ClientApiHelper):
 
         # Copy/pasted from above in ClientApiHelper.validate_data
         if data.get('release'):
-            data['release'] = unicode(data['release'])
+            data['release'] = six.text_type(data['release'])
             if len(data['release']) > 64:
                 data['errors'].append({
                     'type': EventError.VALUE_TOO_LONG,
diff --git a/src/sentry/db/models/base.py b/src/sentry/db/models/base.py
index eb3451df97..35aa78ac96 100644
--- a/src/sentry/db/models/base.py
+++ b/src/sentry/db/models/base.py
@@ -9,6 +9,7 @@ sentry.db.models
 from __future__ import absolute_import
 
 import logging
+import six
 
 from django.db import models
 from django.db.models import signals
@@ -78,7 +79,7 @@ class BaseModel(models.Model):
                     data[f.column] = self.__get_field_value(f)
                 except AttributeError as e:
                     # this case can come up from pickling
-                    logging.exception(unicode(e))
+                    logging.exception(six.text_type(e))
             self.__data = data
         else:
             self.__data = UNSAVED
diff --git a/src/sentry/db/models/fields/bounded.py b/src/sentry/db/models/fields/bounded.py
index d0e3ee3418..2ac53e4d71 100644
--- a/src/sentry/db/models/fields/bounded.py
+++ b/src/sentry/db/models/fields/bounded.py
@@ -60,7 +60,7 @@ if settings.SENTRY_USE_BIG_INTS:
 
         def get_prep_value(self, value):
             if value:
-                value = long(value)
+                value = int(value)
                 assert value <= self.MAX_VALUE
             return super(BoundedBigIntegerField, self).get_prep_value(value)
 
@@ -91,7 +91,7 @@ if settings.SENTRY_USE_BIG_INTS:
 
         def get_prep_value(self, value):
             if value:
-                value = long(value)
+                value = int(value)
                 assert value <= self.MAX_VALUE
             return super(BoundedBigAutoField, self).get_prep_value(value)
 
diff --git a/src/sentry/db/models/fields/gzippeddict.py b/src/sentry/db/models/fields/gzippeddict.py
index 8451fb2123..57d789fca7 100644
--- a/src/sentry/db/models/fields/gzippeddict.py
+++ b/src/sentry/db/models/fields/gzippeddict.py
@@ -22,13 +22,12 @@ __all__ = ('GzippedDictField',)
 logger = logging.getLogger('sentry')
 
 
+@six.add_metaclass(models.SubfieldBase)
 class GzippedDictField(models.TextField):
     """
     Slightly different from a JSONField in the sense that the default
     value is a dictionary.
     """
-    __metaclass__ = models.SubfieldBase
-
     def to_python(self, value):
         if isinstance(value, six.string_types) and value:
             try:
@@ -44,9 +43,10 @@ class GzippedDictField(models.TextField):
         if not value and self.null:
             # save ourselves some storage
             return None
-        # enforce unicode strings to guarantee consistency
-        if isinstance(value, str):
+        # enforce six.text_type strings to guarantee consistency
+        if isinstance(value, six.binary_type):
             value = six.text_type(value)
+        # db values need to be in unicode
         return compress(pickle.dumps(value))
 
     def value_to_string(self, obj):
diff --git a/src/sentry/db/models/fields/node.py b/src/sentry/db/models/fields/node.py
index 03d105d8e3..fc43e6f887 100644
--- a/src/sentry/db/models/fields/node.py
+++ b/src/sentry/db/models/fields/node.py
@@ -109,13 +109,12 @@ class NodeData(collections.MutableMapping):
             self.data['_ref_version'] = self.field.ref_version
 
 
+@six.add_metaclass(models.SubfieldBase)
 class NodeField(GzippedDictField):
     """
     Similar to the gzippedictfield except that it stores a reference
     to an external node.
     """
-    __metaclass__ = models.SubfieldBase
-
     def __init__(self, *args, **kwargs):
         self.ref_func = kwargs.pop('ref_func', None)
         self.ref_version = kwargs.pop('ref_version', None)
diff --git a/src/sentry/db/models/fields/pickle.py b/src/sentry/db/models/fields/pickle.py
index 4e452a35cd..18ab961227 100644
--- a/src/sentry/db/models/fields/pickle.py
+++ b/src/sentry/db/models/fields/pickle.py
@@ -1,11 +1,13 @@
 from __future__ import absolute_import
 
+import six
+
 from picklefield.fields import PickledObjectField
 
 
 class UnicodePickledObjectField(PickledObjectField):
     def get_db_prep_value(self, value, *args, **kwargs):
-        if isinstance(value, str):
+        if isinstance(value, six.binary_type):
             value = value.decode('utf-8')
         return super(UnicodePickledObjectField, self).get_db_prep_value(
             value, *args, **kwargs)
diff --git a/src/sentry/db/models/manager.py b/src/sentry/db/models/manager.py
index 3a64a2119a..bf9cf230c1 100644
--- a/src/sentry/db/models/manager.py
+++ b/src/sentry/db/models/manager.py
@@ -18,10 +18,10 @@ from django.db import router
 from django.db.models import Manager, Model
 from django.db.models.signals import (
     post_save, post_delete, post_init, class_prepared)
-from django.utils.encoding import smart_str
-from hashlib import md5
+from django.utils.encoding import smart_text
 
 from sentry.utils.cache import cache
+from sentry.utils.hashlib import md5_text
 
 from .query import create_or_update
 
@@ -56,13 +56,17 @@ def __prep_key(model, key):
 
 def make_key(model, prefix, kwargs):
     kwargs_bits = []
-    for k, v in sorted(kwargs.iteritems()):
+    for k, v in sorted(six.iteritems(kwargs)):
         k = __prep_key(model, k)
-        v = smart_str(__prep_value(model, k, v))
+        v = smart_text(__prep_value(model, k, v))
         kwargs_bits.append('%s=%s' % (k, v))
     kwargs_bits = ':'.join(kwargs_bits)
 
-    return '%s:%s:%s' % (prefix, model.__name__, md5(kwargs_bits).hexdigest())
+    return '%s:%s:%s' % (
+        prefix,
+        model.__name__,
+        md5_text(kwargs_bits).hexdigest()
+    )
 
 
 class BaseManager(Manager):
@@ -87,7 +91,7 @@ class BaseManager(Manager):
         self.__local_cache.value = value
 
     def _generate_cache_version(self):
-        return md5(
+        return md5_text(
             '&'.join(sorted(f.attname for f in self.model._meta.fields))
         ).hexdigest()[:3]
 
@@ -238,7 +242,7 @@ class BaseManager(Manager):
         if not self.cache_fields or len(kwargs) > 1:
             return self.get(**kwargs)
 
-        key, value = kwargs.items()[0]
+        key, value = next(six.iteritems(kwargs))
         pk_name = self.model._meta.pk.name
         if key == 'pk':
             key = pk_name
diff --git a/src/sentry/db/models/query.py b/src/sentry/db/models/query.py
index 55dec18fd5..f9be8bab4e 100644
--- a/src/sentry/db/models/query.py
+++ b/src/sentry/db/models/query.py
@@ -8,6 +8,8 @@ sentry.db.models.query
 
 from __future__ import absolute_import
 
+import six
+
 from django.db import IntegrityError, router, transaction
 from django.db.models.expressions import ExpressionNode
 from django.db.models.signals import post_save
@@ -30,7 +32,7 @@ def update(self, using=None, **kwargs):
             kwargs[field.name] = field.pre_save(self, False)
 
     affected = self.__class__._base_manager.using(using).filter(pk=self.pk).update(**kwargs)
-    for k, v in kwargs.iteritems():
+    for k, v in six.iteritems(kwargs):
         if isinstance(v, ExpressionNode):
             v = resolve_expression_node(self, v)
         setattr(self, k, v)
@@ -75,12 +77,12 @@ def create_or_update(model, using=None, **kwargs):
 
     create_kwargs = kwargs.copy()
     inst = objects.model()
-    for k, v in values.iteritems():
+    for k, v in six.iteritems(values):
         if isinstance(v, ExpressionNode):
             create_kwargs[k] = resolve_expression_node(inst, v)
         else:
             create_kwargs[k] = v
-    for k, v in defaults.iteritems():
+    for k, v in six.iteritems(defaults):
         if isinstance(v, ExpressionNode):
             create_kwargs[k] = resolve_expression_node(inst, v)
         else:
diff --git a/src/sentry/db/models/utils.py b/src/sentry/db/models/utils.py
index 24e392eba2..0f8a683093 100644
--- a/src/sentry/db/models/utils.py
+++ b/src/sentry/db/models/utils.py
@@ -24,7 +24,7 @@ EXPRESSION_NODE_CALLBACKS = {
     ExpressionNode.ADD: operator.add,
     ExpressionNode.SUB: operator.sub,
     ExpressionNode.MUL: operator.mul,
-    ExpressionNode.DIV: operator.div,
+    ExpressionNode.DIV: getattr(operator, 'floordiv', None) or operator.div,
     ExpressionNode.MOD: operator.mod,
 }
 try:
@@ -88,7 +88,7 @@ def slugify_instance(inst, label, reserved=(), max_length=30, *args, **kwargs):
         (1, 12),  # (36^12) possibilities, 1 final attempt
     )
     for attempts, size in sizes:
-        for i in xrange(attempts):
+        for i in range(attempts):
             end = get_random_string(size, allowed_chars='abcdefghijklmnopqrstuvwxyz0123456790')
             inst.slug = base_slug[:max_length - size - 1] + '-' + end
             if not base_qs.filter(slug__iexact=inst.slug).exists():
diff --git a/src/sentry/db/postgres/decorators.py b/src/sentry/db/postgres/decorators.py
index 4bbb745533..f8f96a5716 100644
--- a/src/sentry/db/postgres/decorators.py
+++ b/src/sentry/db/postgres/decorators.py
@@ -57,12 +57,12 @@ def capture_transaction_exceptions(func):
     some cruft about transaction aborted.
     """
     def raise_the_exception(conn, exc):
-        if 'current transaction is aborted, commands ignored until end of transaction block' in str(exc):
+        if 'current transaction is aborted, commands ignored until end of transaction block' in six.text_type(exc):
             exc_info = getattr(conn, '_last_exception', None)
             if exc_info is None:
                 raise
             new_exc = TransactionAborted(sys.exc_info(), exc_info)
-            raise new_exc.__class__, new_exc, exc_info[2]
+            six.reraise(new_exc.__class__, new_exc, exc_info[2])
 
         conn._last_exception = sys.exc_info()
         raise
@@ -89,7 +89,7 @@ def less_shitty_error_messages(func):
         except Exception as e:
             exc_info = sys.exc_info()
             msg = '{}\nSQL: {}'.format(
-                e.message,
+                getattr(e, 'message', getattr(e, 'args', [None])[0]),
                 sql,
             )
             six.reraise(exc_info[0], exc_info[0](msg), exc_info[2])
diff --git a/src/sentry/db/postgres/exceptions.py b/src/sentry/db/postgres/exceptions.py
index f01363529d..9ef354a6b2 100644
--- a/src/sentry/db/postgres/exceptions.py
+++ b/src/sentry/db/postgres/exceptions.py
@@ -1,8 +1,11 @@
 from __future__ import absolute_import
 
 import psycopg2
+import six
 import traceback
 
+from sentry.utils.compat import implements_to_string
+
 
 class CompositeTraceback(object):
     def __init__(self, tb_list):
@@ -12,11 +15,9 @@ class CompositeTraceback(object):
 
     def __iter__(self):
         for tb in self.__tb_list:
-            print repr(tb)
             while tb:
                 self.__curframe = tb
                 tb = tb.tb_next
-                print '*', repr(tb)
                 yield tb
 
     def tb_frame(self):
@@ -29,10 +30,11 @@ class CompositeTraceback(object):
         return self.__curframe.tb_lineno
 
     def tb_next(self):
-        self.__iterator.next()
+        six.next(self.__iterator)
         return self
 
 
+@implements_to_string
 class TransactionAborted(psycopg2.DatabaseError):
     def __init__(self, exc_info, cur_exc_info):
         self.exc_info = exc_info
@@ -42,9 +44,6 @@ class TransactionAborted(psycopg2.DatabaseError):
         return '\n'.join(traceback.format_exception(self.__class__, self, self.get_traceback()))
 
     def __str__(self):
-        return str(unicode(self))
-
-    def __unicode__(self):
         return u'(%s) %s' % (self.cur_exc_info[0].__name__, self.cur_exc_info[1])
 
     def get_traceback(self):
diff --git a/src/sentry/db/postgres/helpers.py b/src/sentry/db/postgres/helpers.py
index 93059915e9..23d1a64090 100644
--- a/src/sentry/db/postgres/helpers.py
+++ b/src/sentry/db/postgres/helpers.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import psycopg2
+import six
 
 from django.db.utils import DatabaseError
 
@@ -9,14 +10,14 @@ def can_reconnect(exc):
     if isinstance(exc, psycopg2.InterfaceError):
         return True
     # elif isinstance(exc, psycopg2.OperationalError):
-    #     exc_msg = str(exc)
+    #     exc_msg = six.text_type(exc)
     #     if "can't fetch default_isolation_level" in exc_msg:
     #         return True
     #     elif "can't set datestyle to ISO" in exc_msg:
     #         return True
     #     return True
     elif isinstance(exc, DatabaseError):
-        exc_msg = str(exc)
+        exc_msg = six.text_type(exc)
         if 'server closed the connection unexpectedly' in exc_msg:
             return True
         elif 'client_idle_timeout' in exc_msg:
diff --git a/src/sentry/debug/middleware.py b/src/sentry/debug/middleware.py
index ee0787be08..631e92dd1d 100644
--- a/src/sentry/debug/middleware.py
+++ b/src/sentry/debug/middleware.py
@@ -2,12 +2,12 @@ from __future__ import absolute_import
 
 import json
 import re
-import thread
 
 from debug_toolbar.toolbar import DebugToolbar
 from django.conf import settings
 from django.template.loader import render_to_string
 from django.utils.encoding import force_text
+from six.moves import _thread as thread
 
 
 class ToolbarCache(object):
diff --git a/src/sentry/debug/utils/packages.py b/src/sentry/debug/utils/packages.py
index e3d06d4575..549c36d8e8 100644
--- a/src/sentry/debug/utils/packages.py
+++ b/src/sentry/debug/utils/packages.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import six
 import sys
 
 try:
@@ -35,16 +36,16 @@ def get_package_version(module_name, app):
         except Exception:
             return None
 
-    if not isinstance(version, (basestring, list, tuple)):
+    if not isinstance(version, six.string_types + (list, tuple)):
         version = None
 
     if version is None:
         return None
 
     if isinstance(version, (list, tuple)):
-        version = '.'.join(map(str, version))
+        version = '.'.join(map(six.text_type, version))
 
-    return str(version)
+    return six.text_type(version)
 
 
 def get_all_package_versions():
diff --git a/src/sentry/digests/backends/redis.py b/src/sentry/digests/backends/redis.py
index 3342d175af..3e2f7daeaf 100644
--- a/src/sentry/digests/backends/redis.py
+++ b/src/sentry/digests/backends/redis.py
@@ -3,9 +3,10 @@ from __future__ import absolute_import
 import itertools
 import logging
 import random
+import six
 import time
-from contextlib import contextmanager
 
+from contextlib import contextmanager
 from redis.exceptions import ResponseError, WatchError
 
 from sentry.digests import Record, ScheduleEntry
@@ -217,7 +218,7 @@ class RedisBackend(Backend):
             # expected items in any specific scheduling interval to chunk *
             # maximum_iterations.
             maximum_iterations = 1000
-            for i in xrange(maximum_iterations):
+            for i in range(maximum_iterations):
                 items = connection.zrangebyscore(
                     make_schedule_key(self.namespace, SCHEDULE_STATE_WAITING),
                     min=0,
@@ -283,10 +284,10 @@ class RedisBackend(Backend):
         extra = 0
         start = 0
         maximum_iterations = 1000
-        for i in xrange(maximum_iterations):
+        for i in range(maximum_iterations):
             fetch_size = chunk + extra
             entries = map(
-                lambda (key, timestamp): ScheduleEntry(key, timestamp),
+                lambda x: ScheduleEntry(*x),
                 connection.zrangebyscore(
                     make_schedule_key(self.namespace, SCHEDULE_STATE_READY),
                     min=start,
@@ -341,7 +342,8 @@ class RedisBackend(Backend):
                 extra = min(
                     ilen(
                         itertools.takewhile(
-                            lambda (lock, entry): entry.timestamp == start,
+                            # (lock, entry)
+                            lambda x: x[1].timestamp == start,
                             can_reschedule[False][::-1],
                         ),
                     ),
@@ -478,7 +480,7 @@ class RedisBackend(Backend):
                     try:
                         pipeline.execute()
                     except ResponseError as error:
-                        if 'no such key' in str(error):
+                        if 'no such key' in six.text_type(error):
                             logger.debug('Could not move timeline for digestion (likely has no contents.)')
                         else:
                             raise
diff --git a/src/sentry/digests/notifications.py b/src/sentry/digests/notifications.py
index 40c6a01842..cb5497836c 100644
--- a/src/sentry/digests/notifications.py
+++ b/src/sentry/digests/notifications.py
@@ -3,11 +3,14 @@ from __future__ import absolute_import
 import functools
 import itertools
 import logging
+import six
+
 from collections import (
     OrderedDict,
     defaultdict,
     namedtuple,
 )
+from six.moves import reduce
 
 from sentry.app import tsdb
 from sentry.digests import Record
@@ -71,18 +74,18 @@ def fetch_state(project, records):
 
 
 def attach_state(project, groups, rules, event_counts, user_counts):
-    for id, group in groups.iteritems():
+    for id, group in six.iteritems(groups):
         assert group.project_id == project.id, 'Group must belong to Project'
         group.project = project
 
-    for id, rule in rules.iteritems():
+    for id, rule in six.iteritems(rules):
         assert rule.project_id == project.id, 'Rule must belong to Project'
         rule.project = project
 
-    for id, event_count in event_counts.iteritems():
+    for id, event_count in six.iteritems(event_counts):
         groups[id].event_count = event_count
 
-    for id, user_count in user_counts.iteritems():
+    for id, user_count in six.iteritems(user_counts):
         groups[id].user_count = user_count
 
     return {
@@ -166,11 +169,12 @@ def group_records(groups, record):
 
 
 def sort_group_contents(rules):
-    for key, groups in rules.iteritems():
+    for key, groups in six.iteritems(rules):
         rules[key] = OrderedDict(
             sorted(
                 groups.items(),
-                key=lambda (group, records): (group.event_count, group.user_count),
+                # x = (group, records)
+                key=lambda x: (x[0].event_count, x[0].user_count),
                 reverse=True,
             )
         )
@@ -181,7 +185,8 @@ def sort_rule_groups(rules):
     return OrderedDict(
         sorted(
             rules.items(),
-            key=lambda (rule, groups): len(groups),
+            # x = (rule, groups)
+            key=lambda x: len(x[1]),
             reverse=True,
         ),
     )
diff --git a/src/sentry/digests/utilities.py b/src/sentry/digests/utilities.py
index 93bb3e287e..595136e0cb 100644
--- a/src/sentry/digests/utilities.py
+++ b/src/sentry/digests/utilities.py
@@ -1,3 +1,7 @@
+from __future__ import absolute_import
+
+import six
+
 from collections import Counter
 
 
@@ -7,10 +11,10 @@ def get_digest_metadata(digest):
     end = None
 
     counts = Counter()
-    for rule, groups in digest.iteritems():
+    for rule, groups in six.iteritems(digest):
         counts.update(groups.keys())
 
-        for group, records in groups.iteritems():
+        for group, records in six.iteritems(groups):
             for record in records:
                 if start is None or record.datetime < start:
                     start = record.datetime
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 45c37ddb74..4ae216b84a 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -38,6 +38,7 @@ from sentry.tasks.merge import merge_group
 from sentry.tasks.post_process import post_process_group
 from sentry.utils.cache import default_cache
 from sentry.utils.db import get_db_engine
+from sentry.utils.hashlib import md5_text
 from sentry.utils.safe import safe_execute, trim, trim_dict
 from sentry.utils.strings import truncatechars
 from sentry.utils.validators import validate_ip
@@ -70,7 +71,7 @@ def get_fingerprint_for_event(event):
     fingerprint = event.data.get('fingerprint')
     if fingerprint is None:
         return ['{{ default }}']
-    if isinstance(fingerprint, basestring):
+    if isinstance(fingerprint, six.string_types):
         return [fingerprint]
     return fingerprint
 
@@ -81,7 +82,7 @@ def get_hashes_for_event(event):
 
 def get_hashes_for_event_with_reason(event):
     interfaces = event.get_interfaces()
-    for interface in interfaces.itervalues():
+    for interface in six.itervalues(interfaces):
         result = interface.compute_hashes(event.platform)
         if not result:
             continue
@@ -106,7 +107,7 @@ def get_hashes_from_fingerprint(event, fingerprint):
         hash_count = 1
 
     hashes = []
-    for idx in xrange(hash_count):
+    for idx in range(hash_count):
         result = []
         for bit in fingerprint:
             if bit in default_values:
@@ -126,13 +127,13 @@ def get_hashes_from_fingerprint_with_reason(event, fingerprint):
         hash_count = 1
 
     hashes = OrderedDict((bit, []) for bit in fingerprint)
-    for idx in xrange(hash_count):
+    for idx in range(hash_count):
         for bit in fingerprint:
             if bit in default_values:
                 hashes[bit].append(default_hashes)
             else:
                 hashes[bit] = bit
-    return hashes.items()
+    return list(hashes.items())
 
 
 if not settings.SENTRY_SAMPLE_DATA:
@@ -285,7 +286,7 @@ class EventManager(object):
             tags = []
         # full support for dict syntax
         elif isinstance(tags, dict):
-            tags = tags.items()
+            tags = list(tags.items())
         # prevent [tag, tag, tag] (invalid) syntax
         elif not all(len(t) == 2 for t in tags):
             tags = []
@@ -314,7 +315,7 @@ class EventManager(object):
             data['extra'], max_size=settings.SENTRY_MAX_EXTRA_VARIABLE_SIZE)
 
         # TODO(dcramer): more of validate data needs stuffed into the manager
-        for key in data.keys():
+        for key in list(iter(data)):
             if key in CLIENT_RESERVED_ATTRS:
                 continue
 
@@ -466,7 +467,7 @@ class EventManager(object):
 
         data['fingerprint'] = fingerprint or ['{{ default }}']
 
-        for path, iface in event.interfaces.iteritems():
+        for path, iface in six.iteritems(event.interfaces):
             data['tags'].extend(iface.iter_tags())
             # Get rid of ephemeral interface data
             if iface.ephemeral:
@@ -503,10 +504,10 @@ class EventManager(object):
 
         if not message:
             message = ''
-        elif not isinstance(message, basestring):
+        elif not isinstance(message, six.string_types):
             message = force_text(message)
 
-        for value in event_metadata.itervalues():
+        for value in six.itervalues(event_metadata):
             value_u = force_text(value, errors='replace')
             if value_u not in message:
                 message = u'{} {}'.format(message, value_u)
@@ -688,7 +689,7 @@ class EventManager(object):
 
         cache_key = 'euser:{}:{}'.format(
             project.id,
-            md5(euser.tag_value.encode('utf-8')).hexdigest(),
+            md5_text(euser.tag_value).hexdigest(),
         )
         cached = default_cache.get(cache_key)
         if cached is None:
@@ -744,7 +745,7 @@ class EventManager(object):
         all_hashes = self._find_hashes(project, hashes)
 
         try:
-            existing_group_id = (h[0] for h in all_hashes if h[0]).next()
+            existing_group_id = six.next(h[0] for h in all_hashes if h[0])
         except StopIteration:
             existing_group_id = None
 
diff --git a/src/sentry/eventtypes/manager.py b/src/sentry/eventtypes/manager.py
index f688f0f378..909949731e 100644
--- a/src/sentry/eventtypes/manager.py
+++ b/src/sentry/eventtypes/manager.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 
 class EventTypeManager(object):
     def __init__(self):
@@ -7,7 +9,7 @@ class EventTypeManager(object):
         self.__lookup = {}
 
     def __iter__(self):
-        return self.__values.itervalues()
+        return six.itervalues(self.__values)
 
     def __contains__(self, key):
         return key in self.__lookup
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 4d2ed7c634..c3f734233c 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -5,17 +5,17 @@ from .handler import *  # NOQA
 from .manager import *  # NOQA
 
 
-default_manager = FeatureManager()
+default_manager = FeatureManager()  # NOQA
 default_manager.add('auth:register')
-default_manager.add('organizations:api-keys', OrganizationFeature)
+default_manager.add('organizations:api-keys', OrganizationFeature)  # NOQA
 default_manager.add('organizations:create')
-default_manager.add('organizations:sso', OrganizationFeature)
-default_manager.add('organizations:onboarding', OrganizationFeature)
-default_manager.add('organizations:callsigns', OrganizationFeature)
-default_manager.add('organizations:new-tracebacks', OrganizationFeature)
-default_manager.add('projects:global-events', ProjectFeature)
-default_manager.add('projects:quotas', ProjectFeature)
-default_manager.add('projects:plugins', ProjectPluginFeature)
+default_manager.add('organizations:sso', OrganizationFeature)  # NOQA
+default_manager.add('organizations:onboarding', OrganizationFeature)  # NOQA
+default_manager.add('organizations:callsigns', OrganizationFeature)  # NOQA
+default_manager.add('organizations:new-tracebacks', OrganizationFeature)  # NOQA
+default_manager.add('projects:global-events', ProjectFeature)  # NOQA
+default_manager.add('projects:quotas', ProjectFeature)  # NOQA
+default_manager.add('projects:plugins', ProjectPluginFeature)  # NOQA
 
 
 # expose public api
diff --git a/src/sentry/http.py b/src/sentry/http.py
index 6d958762b3..b62d42dab2 100644
--- a/src/sentry/http.py
+++ b/src/sentry/http.py
@@ -8,6 +8,8 @@ sentry.utils.http
 from __future__ import absolute_import
 
 import sentry
+
+import ipaddress
 import six
 import socket
 import requests
@@ -15,9 +17,10 @@ import warnings
 
 from sentry import options
 from django.conf import settings
-from ipaddr import IPNetwork
 from requests.adapters import HTTPAdapter
 from requests.exceptions import SSLError
+from six.moves.urllib.parse import urlparse
+
 from sentry.exceptions import RestrictedIPAddress
 
 # In case SSL is unavailable (light builds) we can't import this here.
@@ -27,13 +30,14 @@ except ImportError:
     class ZeroReturnError(Exception):
         pass
 
-from urlparse import urlparse
-
 USER_AGENT = 'sentry/{version} (https://getsentry.com)'.format(
     version=sentry.VERSION,
 )
 
-DISALLOWED_IPS = set((IPNetwork(i) for i in settings.SENTRY_DISALLOWED_IPS))
+DISALLOWED_IPS = {
+    ipaddress.ip_network(six.text_type(i))
+    for i in settings.SENTRY_DISALLOWED_IPS
+}
 
 
 def get_server_hostname():
@@ -89,9 +93,9 @@ def is_valid_url(url):
         if ip_address == server_hostname:
             return True
 
-        ip_network = IPNetwork(ip_address)
-        for addr in DISALLOWED_IPS:
-            if ip_network in addr:
+        ip_address = ipaddress.ip_address(six.text_type(ip_address))
+        for ip_network in DISALLOWED_IPS:
+            if ip_address in ip_network:
                 return False
 
     return True
diff --git a/src/sentry/interfaces/base.py b/src/sentry/interfaces/base.py
index b8fc3c1fcc..871a67f552 100644
--- a/src/sentry/interfaces/base.py
+++ b/src/sentry/interfaces/base.py
@@ -1,19 +1,21 @@
 from __future__ import absolute_import
 
+import six
+
 from django.conf import settings
-from django.utils.html import escape
 from django.utils.translation import ugettext as _
 
+from sentry.utils.html import escape
 from sentry.utils.imports import import_string
 
 
 def iter_interfaces():
     rv = {}
 
-    for name, import_path in settings.SENTRY_INTERFACES.iteritems():
+    for name, import_path in six.iteritems(settings.SENTRY_INTERFACES):
         rv.setdefault(import_path, []).append(name)
 
-    for import_path, keys in rv.iteritems():
+    for import_path, keys in six.iteritems(rv):
         iface = import_string(import_path)
         yield iface, keys
 
@@ -47,8 +49,6 @@ class Interface(object):
     display_score = None
     ephemeral = False
 
-    __slots__ = ['_data']
-
     def __init__(self, **data):
         self._data = data or {}
 
@@ -58,10 +58,7 @@ class Interface(object):
         return self._data == other._data
 
     def __getstate__(self):
-        return dict(
-            (slot, self.__dict__.get(slot))
-            for slot in self.__slots__
-        )
+        return {'_data': self._data}
 
     def __setstate__(self, state):
         self.__dict__.update(state)
@@ -90,7 +87,7 @@ class Interface(object):
         # XXX(dcramer): its important that we keep zero values here, but empty
         # lists and strings get discarded as we've deemed them not important
         return dict(
-            (k, v) for k, v in self._data.iteritems() if (v == 0 or v)
+            (k, v) for k, v in six.iteritems(self._data) if (v == 0 or v)
         )
 
     def get_path(self):
diff --git a/src/sentry/interfaces/breadcrumbs.py b/src/sentry/interfaces/breadcrumbs.py
index 349d31a18b..4029524655 100644
--- a/src/sentry/interfaces/breadcrumbs.py
+++ b/src/sentry/interfaces/breadcrumbs.py
@@ -10,6 +10,8 @@ from __future__ import absolute_import
 
 __all__ = ('Breadcrumbs',)
 
+import six
+
 from sentry.interfaces.base import Interface, InterfaceValidationError
 from sentry.utils.safe import trim
 from sentry.utils.dates import to_timestamp, to_datetime, parse_timestamp
@@ -72,11 +74,11 @@ class Breadcrumbs(Interface):
 
         msg = crumb.get('message')
         if msg is not None:
-            rv['message'] = trim(unicode(msg), 4096)
+            rv['message'] = trim(six.text_type(msg), 4096)
 
         category = crumb.get('category')
         if category is not None:
-            rv['category'] = trim(unicode(category), 256)
+            rv['category'] = trim(six.text_type(category), 256)
 
         event_id = crumb.get('event_id')
         if event_id is not None:
diff --git a/src/sentry/interfaces/contexts.py b/src/sentry/interfaces/contexts.py
index 8f844ba994..ff2c1aa7e0 100644
--- a/src/sentry/interfaces/contexts.py
+++ b/src/sentry/interfaces/contexts.py
@@ -8,6 +8,7 @@ sentry.interfaces.contexts
 
 from __future__ import absolute_import
 
+import six
 import string
 
 from django.utils.encoding import force_text
@@ -32,8 +33,8 @@ class _IndexFormatter(string.Formatter):
 
 
 def format_index_expr(format_string, data):
-    return unicode(_IndexFormatter().vformat(
-        unicode(format_string), (), data).strip())
+    return six.text_type(_IndexFormatter().vformat(
+        six.text_type(format_string), (), data).strip())
 
 
 def contexttype(name):
@@ -50,7 +51,7 @@ class ContextType(object):
     def __init__(self, alias, data):
         self.alias = alias
         ctx_data = {}
-        for key, value in trim(data).iteritems():
+        for key, value in six.iteritems(trim(data)):
             if value not in EMPTY_VALUES:
                 ctx_data[force_text(key)] = value
         self.data = ctx_data
@@ -62,7 +63,7 @@ class ContextType(object):
 
     def iter_tags(self):
         if self.indexed_fields:
-            for field, f_string in self.indexed_fields.iteritems():
+            for field, f_string in six.iteritems(self.indexed_fields):
                 try:
                     value = format_index_expr(f_string, self.data)
                 except KeyError:
@@ -126,7 +127,7 @@ class Contexts(Interface):
     @classmethod
     def to_python(cls, data):
         rv = {}
-        for alias, value in data.iteritems():
+        for alias, value in six.iteritems(data):
             rv[alias] = cls.normalize_context(alias, value)
         return cls(**rv)
 
@@ -137,11 +138,11 @@ class Contexts(Interface):
         return ctx_cls(alias, data)
 
     def iter_contexts(self):
-        return self._data.itervalues()
+        return six.itervalues(self._data)
 
     def to_json(self):
         rv = {}
-        for alias, inst in self._data.iteritems():
+        for alias, inst in six.iteritems(self._data):
             rv[alias] = inst.to_json()
         return rv
 
diff --git a/src/sentry/interfaces/csp.py b/src/sentry/interfaces/csp.py
index 468f3d3bfc..b8df871eaa 100644
--- a/src/sentry/interfaces/csp.py
+++ b/src/sentry/interfaces/csp.py
@@ -10,7 +10,8 @@ from __future__ import absolute_import
 
 __all__ = ('Csp',)
 
-from urlparse import urlsplit, urlunsplit
+from six.moves.urllib.parse import urlsplit, urlunsplit
+
 from sentry.interfaces.base import Interface
 from sentry.utils import json
 from sentry.utils.cache import memoize
@@ -148,7 +149,7 @@ class Csp(Interface):
         return _normalize_uri(self.document_uri)
 
     def _normalize_directive(self, directive):
-        bits = filter(None, directive.split(' '))
+        bits = [d for d in directive.split(' ') if d]
         return ' '.join([bits[0]] + map(self._normalize_value, bits[1:]))
 
     def _normalize_value(self, value):
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index a100cd22d6..198c5cad57 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -10,6 +10,8 @@ from __future__ import absolute_import
 
 __all__ = ('Exception',)
 
+import six
+
 from django.conf import settings
 
 from sentry.interfaces.base import Interface, InterfaceValidationError
@@ -69,7 +71,7 @@ class SingleException(Interface):
             # in case of TypeError: foo (no space)
             value = value.strip()
 
-        if value is not None and not isinstance(value, basestring):
+        if value is not None and not isinstance(value, six.string_types):
             value = json.dumps(value)
         value = trim(value, 4096)
 
@@ -126,7 +128,7 @@ class SingleException(Interface):
 
         return {
             'type': self.type,
-            'value': unicode(self.value) if self.value else None,
+            'value': six.text_type(self.value) if self.value else None,
             'mechanism': self.mechanism or None,
             'threadId': self.thread_id,
             'module': self.module,
diff --git a/src/sentry/interfaces/http.py b/src/sentry/interfaces/http.py
index d357162603..ad28a14417 100644
--- a/src/sentry/interfaces/http.py
+++ b/src/sentry/interfaces/http.py
@@ -11,10 +11,11 @@ from __future__ import absolute_import
 __all__ = ('Http',)
 
 import re
+import six
+
 from django.conf import settings
 from django.utils.translation import ugettext as _
-from urllib import urlencode
-from urlparse import parse_qsl, urlsplit, urlunsplit
+from six.moves.urllib.parse import parse_qsl, urlencode, urlsplit, urlunsplit
 
 from sentry.interfaces.base import Interface, InterfaceValidationError
 from sentry.utils import json
@@ -27,9 +28,9 @@ http_method_re = re.compile(r'^[A-Z\-_]{3,32}$')
 
 
 def to_bytes(value):
-    if isinstance(value, unicode):
+    if isinstance(value, six.text_type):
         return value.encode('utf-8')
-    return str(value)
+    return six.binary_type(value)
 
 
 def format_headers(value):
@@ -52,8 +53,8 @@ def format_headers(value):
         if k.lower() == 'cookie':
             cookie_header = v
         else:
-            if not isinstance(v, basestring):
-                v = unicode(v)
+            if not isinstance(v, six.string_types):
+                v = six.text_type(v)
             result.append((k.title(), v))
     return result, cookie_header
 
@@ -62,7 +63,7 @@ def format_cookies(value):
     if not value:
         return ()
 
-    if isinstance(value, basestring):
+    if isinstance(value, six.string_types):
         value = parse_qsl(value, keep_blank_values=True)
 
     if isinstance(value, dict):
@@ -79,9 +80,9 @@ def fix_broken_encoding(value):
     Strips broken characters that can't be represented at all
     in utf8. This prevents our parsers from breaking elsewhere.
     """
-    if isinstance(value, unicode):
+    if isinstance(value, six.text_type):
         value = value.encode('utf8', errors='replace')
-    if isinstance(value, str):
+    if isinstance(value, six.binary_type):
         value = value.decode('utf8', errors='replace')
     return value
 
diff --git a/src/sentry/interfaces/message.py b/src/sentry/interfaces/message.py
index a2f10092e7..418de47f06 100644
--- a/src/sentry/interfaces/message.py
+++ b/src/sentry/interfaces/message.py
@@ -10,6 +10,8 @@ from __future__ import absolute_import
 
 __all__ = ('Message',)
 
+import six
+
 from django.conf import settings
 
 from sentry.interfaces.base import Interface, InterfaceValidationError
@@ -44,7 +46,7 @@ class Message(Interface):
 
         # TODO(dcramer): some day we should stop people from sending arbitrary
         # crap to the server
-        if not isinstance(data['message'], basestring):
+        if not isinstance(data['message'], six.string_types):
             data['message'] = json.dumps(data['message'])
 
         kwargs = {
@@ -58,7 +60,7 @@ class Message(Interface):
             kwargs['params'] = ()
 
         if kwargs['formatted']:
-            if not isinstance(kwargs['formatted'], basestring):
+            if not isinstance(kwargs['formatted'], six.string_types):
                 data['formatted'] = json.dumps(data['formatted'])
         # support python-esque formatting (e.g. %s)
         elif '%' in kwargs['message'] and kwargs['params']:
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index fb15e800f0..c104dda883 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -11,12 +11,11 @@ from __future__ import absolute_import
 __all__ = ('Stacktrace',)
 
 import re
-from types import NoneType
-from six import string_types
+import six
 
 from django.conf import settings
 from django.utils.translation import ugettext as _
-from urlparse import urlparse
+from six.moves.urllib.parse import urlparse
 
 from sentry.app import env
 from sentry.interfaces.base import Interface, InterfaceValidationError
@@ -53,9 +52,9 @@ def trim_package(pkg):
 def to_hex_addr(addr):
     if addr is None:
         return None
-    elif isinstance(addr, (int, long)):
+    elif isinstance(addr, six.integer_types):
         return '0x%x' % addr
-    elif isinstance(addr, basestring):
+    elif isinstance(addr, six.string_types):
         if addr[:2] == '0x':
             return addr
         return '0x%x' % int(addr)
@@ -229,7 +228,8 @@ class Frame(Interface):
         module = data.get('module')
 
         for name in ('abs_path', 'filename', 'function', 'module'):
-            if not isinstance(data.get(name), (string_types, NoneType)):
+            v = data.get(name)
+            if v is not None and not isinstance(v, six.string_types):
                 raise InterfaceValidationError("Invalid value for '%s'" % name)
 
         # absolute path takes priority over filename
@@ -291,7 +291,7 @@ class Frame(Interface):
 
         instruction_offset = data.get('instruction_offset')
         if instruction_offset is not None and \
-           not isinstance(instruction_offset, (int, long)):
+           not isinstance(instruction_offset, six.integer_types):
             raise InterfaceValidationError("Invalid value for 'instruction_offset'")
 
         kwargs = {
diff --git a/src/sentry/interfaces/user.py b/src/sentry/interfaces/user.py
index 5359cc2d73..0cc72183e6 100644
--- a/src/sentry/interfaces/user.py
+++ b/src/sentry/interfaces/user.py
@@ -9,6 +9,8 @@ from __future__ import absolute_import
 
 __all__ = ('User',)
 
+import six
+
 from sentry.interfaces.base import Interface, InterfaceValidationError
 from sentry.utils.safe import trim, trim_dict
 from sentry.web.helpers import render_to_string
@@ -19,7 +21,7 @@ def validate_email(value, required=True):
     if not required and not value:
         return
 
-    if not isinstance(value, basestring):
+    if not isinstance(value, six.string_types):
         raise ValueError('object of type %r is not an email address' % type(value).__name__)
 
     # safe to assume an email address at least has a @ in it.
@@ -55,14 +57,14 @@ class User(Interface):
 
         ident = trim(data.pop('id', None), 128)
         if ident:
-            ident = unicode(ident)
+            ident = six.text_type(ident)
         try:
             email = trim(validate_email(data.pop('email', None), False), 128)
         except ValueError:
             raise InterfaceValidationError("Invalid value for 'email'")
         username = trim(data.pop('username', None), 128)
         if username:
-            username = unicode(username)
+            username = six.text_type(username)
 
         try:
             ip_address = validate_ip(data.pop('ip_address', None), False)
diff --git a/src/sentry/lang/javascript/errormapping.py b/src/sentry/lang/javascript/errormapping.py
index 9bb80126dd..ff8e32bad9 100644
--- a/src/sentry/lang/javascript/errormapping.py
+++ b/src/sentry/lang/javascript/errormapping.py
@@ -1,12 +1,15 @@
+from __future__ import absolute_import
+
 import re
 import json
 import time
 import logging
 import random
+import six
 
-from urlparse import parse_qsl
 from django.conf import settings
 from django.core.cache import cache
+from six.moves.urllib.parse import parse_qsl
 
 from sentry import http
 from sentry.utils.strings import count_sprintf_parameters
@@ -114,7 +117,7 @@ def rewrite_exception(data):
 
     rv = False
     for exc in exc_data['values']:
-        for processor in error_processors.itervalues():
+        for processor in six.itervalues(error_processors):
             try:
                 if processor.try_process(exc):
                     rv = True
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 8e1739baf4..ad9cf455df 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -5,6 +5,7 @@ __all__ = ['SourceProcessor']
 import logging
 import re
 import base64
+import six
 import zlib
 
 from django.conf import settings
@@ -13,7 +14,7 @@ from django.utils.encoding import force_bytes, force_text
 from collections import namedtuple
 from os.path import splitext
 from requests.exceptions import RequestException
-from urlparse import urlparse, urljoin, urlsplit
+from six.moves.urllib.parse import urlparse, urljoin, urlsplit
 
 # In case SSL is unavailable (light builds) we can't import this here.
 try:
@@ -29,7 +30,7 @@ from sentry.interfaces.stacktrace import Stacktrace
 from sentry.models import EventError, Release, ReleaseFile
 from sentry.utils.cache import cache
 from sentry.utils.files import compress_file
-from sentry.utils.hashlib import md5
+from sentry.utils.hashlib import md5_text
 from sentry.utils.http import is_valid_origin
 from sentry.utils.strings import truncatechars
 
@@ -198,7 +199,7 @@ def discover_sourcemap(result):
 def fetch_release_file(filename, release):
     cache_key = 'releasefile:v1:%s:%s' % (
         release.id,
-        md5(filename).hexdigest(),
+        md5_text(filename).hexdigest(),
     ),
 
     filename_path = None
@@ -246,7 +247,7 @@ def fetch_release_file(filename, release):
             with releasefile.file.getfile() as fp:
                 z_body, body = compress_file(fp)
         except Exception as e:
-            logger.exception(unicode(e))
+            logger.exception(six.text_type(e))
             cache.set(cache_key, -1, 3600)
             result = None
         else:
@@ -278,7 +279,7 @@ def fetch_file(url, project=None, release=None, allow_scraping=True):
         result = None
 
     cache_key = 'source:cache:v3:%s' % (
-        md5(url).hexdigest(),
+        md5_text(url).hexdigest(),
     )
 
     if result is None:
@@ -301,7 +302,7 @@ def fetch_file(url, project=None, release=None, allow_scraping=True):
         # lock down domains that are problematic
         domain = urlparse(url).netloc
         domain_key = 'source:blacklist:v2:%s' % (
-            md5(domain).hexdigest(),
+            md5_text(domain).hexdigest(),
         )
         domain_result = cache.get(domain_key)
         if domain_result:
@@ -340,11 +341,11 @@ def fetch_file(url, project=None, release=None, allow_scraping=True):
             elif isinstance(exc, (RequestException, ZeroReturnError)):
                 error = {
                     'type': EventError.JS_GENERIC_FETCH_ERROR,
-                    'value': str(type(exc)),
+                    'value': six.text_type(type(exc)),
                     'url': expose_url(url),
                 }
             else:
-                logger.exception(unicode(exc))
+                logger.exception(six.text_type(exc))
                 error = {
                     'type': EventError.UNKNOWN_ERROR,
                     'url': expose_url(url),
@@ -393,10 +394,10 @@ def fetch_file(url, project=None, release=None, allow_scraping=True):
             }
             raise CannotFetchSource(error)
 
-    # Make sure the file we're getting back is unicode, if it's not,
+    # Make sure the file we're getting back is six.text_type, if it's not,
     # it's either some encoding that we don't understand, or it's binary
     # data which we can't process.
-    if not isinstance(result[1], unicode):
+    if not isinstance(result[1], six.text_type):
         try:
             result = (result[0], result[1].decode('utf8'), result[2])
         except UnicodeDecodeError:
@@ -429,7 +430,7 @@ def fetch_sourcemap(url, project=None, release=None, allow_scraping=True):
         return sourcemap_to_index(body)
     except Exception as exc:
         # This is in debug because the product shows an error already.
-        logger.debug(unicode(exc), exc_info=True)
+        logger.debug(six.text_type(exc), exc_info=True)
         raise UnparseableSourcemap({
             'url': expose_url(url),
         })
diff --git a/src/sentry/lang/javascript/sourcemaps.py b/src/sentry/lang/javascript/sourcemaps.py
index c616fcfb58..5cd37d02cc 100644
--- a/src/sentry/lang/javascript/sourcemaps.py
+++ b/src/sentry/lang/javascript/sourcemaps.py
@@ -20,7 +20,7 @@ from __future__ import absolute_import
 import bisect
 
 from collections import namedtuple
-from urlparse import urljoin
+from six.moves.urllib.parse import urljoin
 
 from sentry.utils import json
 
diff --git a/src/sentry/lang/native/__init__.py b/src/sentry/lang/native/__init__.py
index 7bb4cf156d..ac648c9613 100644
--- a/src/sentry/lang/native/__init__.py
+++ b/src/sentry/lang/native/__init__.py
@@ -1,4 +1,7 @@
+from __future__ import absolute_import
+
 from sentry.plugins import register
+
 from .plugin import NativePlugin
 
 register(NativePlugin)
diff --git a/src/sentry/lang/native/dsymcache.py b/src/sentry/lang/native/dsymcache.py
index 5e32d8fb44..f803a16534 100644
--- a/src/sentry/lang/native/dsymcache.py
+++ b/src/sentry/lang/native/dsymcache.py
@@ -1,7 +1,10 @@
+from __future__ import absolute_import
+
 import os
 import uuid
 import time
 import errno
+import six
 import shutil
 
 from sentry import options
@@ -19,7 +22,7 @@ class DSymCache(object):
         return options.get('dsym.cache-path')
 
     def get_project_path(self, project):
-        return os.path.join(self.dsym_cache_path, str(project.id))
+        return os.path.join(self.dsym_cache_path, six.text_type(project.id))
 
     def get_global_path(self):
         return os.path.join(self.dsym_cache_path, 'global')
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 1b606db822..c5c598e865 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import os
 import re
+import six
 import time
 import logging
 import posixpath
@@ -328,7 +329,7 @@ def preprocess_apple_crash_event(data):
                     'error': 'The symbolicator encountered an internal failure',
                 })
 
-        for thread in threads.itervalues():
+        for thread in six.itervalues(threads):
             # If we were told to skip the stacktrace, skip it indeed
             if thread.get('stacktrace', Ellipsis) is None:
                 continue
@@ -387,7 +388,7 @@ def resolve_frame_symbols(data):
             'error': 'frame #%d: %s: %s' % (
                 idx,
                 e.__class__.__name__,
-                str(e),
+                six.text_type(e),
             )
         })
 
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 26e38ce721..f7ed344a7a 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -1,3 +1,7 @@
+from __future__ import absolute_import
+
+import six
+
 try:
     from symsynd.driver import Driver, SymbolicationError
     from symsynd.report import ReportSymbolizer
@@ -127,7 +131,7 @@ class Symbolizer(object):
                 'error': 'frame #%d: %s: %s' % (
                     idx,
                     e.__class__.__name__,
-                    str(e),
+                    six.text_type(e),
                 )
             })
 
diff --git a/src/sentry/lang/native/utils.py b/src/sentry/lang/native/utils.py
index 49ce68bab5..07d1ea3d0c 100644
--- a/src/sentry/lang/native/utils.py
+++ b/src/sentry/lang/native/utils.py
@@ -1,3 +1,5 @@
+from __future__ import absolute_import
+
 import logging
 
 
diff --git a/src/sentry/lint/absolute_import_check.py b/src/sentry/lint/absolute_import_check.py
deleted file mode 100644
index 957d3b0243..0000000000
--- a/src/sentry/lint/absolute_import_check.py
+++ /dev/null
@@ -1,34 +0,0 @@
-from __future__ import absolute_import
-
-import ast
-
-
-class ImportVisitor(ast.NodeVisitor):
-    def __init__(self):
-        self.has_import = False
-
-    def visit_ImportFrom(self, node):
-        if self.has_import:
-            return
-        if node.module != '__future__':
-            return
-        for nameproxy in node.names:
-            if nameproxy.name != 'absolute_import':
-                continue
-            self.has_import = True
-            break
-
-
-class AbsoluteImportCheck(object):
-    name = 'absolute-import-checker'
-    code = 'C901'
-    msg = "C901 Missing `from __future__ import absolute_import`"
-
-    def __init__(self, tree, filename=None):
-        self.tree = tree
-
-    def run(self):
-        visitor = ImportVisitor()
-        visitor.visit(self.tree)
-        if not visitor.has_import:
-            yield 0, 0, self.msg, type(self)
diff --git a/src/sentry/lint/engine.py b/src/sentry/lint/engine.py
index bd6fcc8a22..59204dc91b 100644
--- a/src/sentry/lint/engine.py
+++ b/src/sentry/lint/engine.py
@@ -21,11 +21,11 @@ os.environ['PYFLAKES_NODOCTEST'] = '1'
 
 def register_checks():
     import pycodestyle
-    from sentry.lint.absolute_import_check import AbsoluteImportCheck
-    from sentry.lint.mock_check import MockCheck
 
-    pycodestyle.register_check(MockCheck, codes=[MockCheck.code])
-    pycodestyle.register_check(AbsoluteImportCheck, codes=[AbsoluteImportCheck.code])
+    from sentry.lint.sentry_check import SentryCheck
+
+    pycodestyle.register_check(SentryCheck)
+
 
 register_checks()
 
@@ -60,7 +60,7 @@ def py_lint(file_list):
     file_list = get_files_for_list(file_list)
 
     # remove non-py files and files which no longer exist
-    file_list = filter(lambda x: x.endswith('.py'), file_list)
+    file_list = [x for x in file_list if x.endswith('.py')]
 
     flake8_style = get_style_guide(parse_argv=True)
     report = flake8_style.check_files(file_list)
diff --git a/src/sentry/lint/mock_check.py b/src/sentry/lint/mock_check.py
deleted file mode 100644
index 2c7dde3ad4..0000000000
--- a/src/sentry/lint/mock_check.py
+++ /dev/null
@@ -1,38 +0,0 @@
-from __future__ import absolute_import
-
-import ast
-
-
-class MockAttrVisitor(ast.NodeVisitor):
-    non_existent_methods = frozenset([
-        'assert_calls',
-        'assert_not_called',
-        'assert_called',
-        'assert_called_once',
-        'not_called',
-        'called_once',
-        'called_once_with',
-    ])
-
-    def __init__(self):
-        self.errors = []
-
-    def visit_Attribute(self, node):
-        self.generic_visit(node)
-        if node.attr in self.non_existent_methods:
-            self.errors.append((node.lineno, node.attr))
-
-
-class MockCheck(object):
-    code = 'C900'
-    _error_tmpl = "C900 Mock function call is banned: %s"
-
-    def __init__(self, tree, filename=None):
-        self.tree = tree
-
-    def run(self):
-        visitor = MockAttrVisitor()
-        visitor.visit(self.tree)
-        for lineno, attr in visitor.errors:
-            text = self._error_tmpl % (attr,)
-            yield lineno, 0, text, type(self)
diff --git a/src/sentry/lint/sentry_check.py b/src/sentry/lint/sentry_check.py
new file mode 100644
index 0000000000..ff014f0f3e
--- /dev/null
+++ b/src/sentry/lint/sentry_check.py
@@ -0,0 +1,345 @@
+# coding: utf-8
+# The MIT License (MIT)
+
+# Copyright (c) 2016 Sentry
+# Copyright (c) 2016 Łukasz Langa
+
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+
+# The above copyright notice and this permission notice shall be included in all
+# copies or substantial portions of the Software.
+
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+# SOFTWARE.
+
+from __future__ import absolute_import
+
+import ast
+import pycodestyle
+
+from collections import namedtuple
+from functools import partial
+
+
+class SentryVisitor(ast.NodeVisitor):
+    NODE_WINDOW_SIZE = 4
+
+    def __init__(self, filename, lines):
+        self.errors = []
+        self.filename = filename
+        self.lines = lines
+
+        self.has_absolute_import = False
+        self.node_stack = []
+        self.node_window = []
+
+    def finish(self):
+        if not self.has_absolute_import:
+            self.errors.append(
+                B003(1, 1),
+            )
+
+    def visit(self, node):
+        self.node_stack.append(node)
+        self.node_window.append(node)
+        self.node_window = self.node_window[-self.NODE_WINDOW_SIZE:]
+        super(SentryVisitor, self).visit(node)
+        self.node_stack.pop()
+
+    def visit_ExceptHandler(self, node):
+        if node.type is None:
+            self.errors.append(
+                B001(node.lineno, node.col_offset)
+            )
+        self.generic_visit(node)
+
+    def visit_ImportFrom(self, node):
+        if node.module in B307.names:
+            self.errors.append(
+                B307(node.lineno, node.col_offset)
+            )
+
+        if node.module == '__future__':
+            for nameproxy in node.names:
+                if nameproxy.name == 'absolute_import':
+                    self.has_absolute_import = True
+                    break
+
+    def visit_Import(self, node):
+        for alias in node.names:
+            if alias.name.split('.', 1)[0] in B307.names:
+                self.errors.append(
+                    B307(node.lineno, node.col_offset)
+                )
+
+    def visit_Call(self, node):
+        if isinstance(node.func, ast.Attribute):
+            for bug in (B301, B302, B305):
+                if node.func.attr in bug.methods:
+                    call_path = '.'.join(self.compose_call_path(node.func.value))
+                    if call_path not in bug.valid_paths:
+                        self.errors.append(
+                            bug(node.lineno, node.col_offset)
+                        )
+                    break
+            for bug in (B311,):
+                if node.func.attr in bug.methods:
+                    call_path = '.'.join(self.compose_call_path(node.func.value))
+                    if call_path in bug.invalid_paths:
+                        self.errors.append(
+                            bug(node.lineno, node.col_offset)
+                        )
+                    break
+        elif isinstance(node.func, ast.Name):
+            for bug in (B308, B309, B310):
+                if node.func.id in bug.names:
+                    self.errors.append(
+                        bug(node.lineno, node.col_offset)
+                    )
+                    break
+        self.generic_visit(node)
+
+    def visit_Attribute(self, node):
+        call_path = list(self.compose_call_path(node))
+        if '.'.join(call_path) == 'sys.maxint':
+            self.errors.append(
+                B304(node.lineno, node.col_offset)
+            )
+        elif len(call_path) == 2 and call_path[1] == 'message':
+            name = call_path[0]
+            for elem in reversed(self.node_stack[:-1]):
+                if isinstance(elem, ast.ExceptHandler) and elem.name == name:
+                    self.errors.append(
+                        B306(node.lineno, node.col_offset)
+                    )
+                    break
+
+        if node.attr in B101.methods:
+            self.errors.append(
+                B101(
+                    message="B101: Avoid using the {} mock call as it is "
+                            "confusing and prone to causing invalid test "
+                            "behavior.".format(node.attr),
+                    lineno=node.lineno,
+                    col=node.col_offset,
+                ),
+            )
+
+    def visit_Assign(self, node):
+        # TODO(dcramer): pretty sure these aren't working correctly on Python2
+        if isinstance(self.node_stack[-2], ast.ClassDef):
+            # note: by hasattr belowe we're ignoring starred arguments, slices
+            # and tuples for simplicity.
+            assign_targets = {t.id for t in node.targets if hasattr(t, 'id')}
+            if '__metaclass__' in assign_targets:
+                self.errors.append(
+                    B303(node.lineno, node.col_offset)
+                )
+            if '__unicode__' in assign_targets:
+                self.errors.append(
+                    B312(node.lineno, node.col_offset)
+                )
+        self.generic_visit(node)
+
+    def compose_call_path(self, node):
+        if isinstance(node, ast.Attribute):
+            for item in self.compose_call_path(node.value):
+                yield item
+            yield node.attr
+        elif isinstance(node, ast.Name):
+            yield node.id
+
+
+class SentryCheck(object):
+    name = 'sentry-checker'
+
+    def __init__(self, tree, filename=None, lines=None):
+        self.tree = tree
+        self.filename = filename
+        self.lines = lines
+        self.visitor = SentryVisitor
+
+    def run(self):
+        if not self.tree or not self.lines:
+            self.load_file()
+
+        visitor = self.visitor(
+            filename=self.filename,
+            lines=self.lines,
+        )
+        visitor.visit(self.tree)
+        visitor.finish()
+
+        for e in visitor.errors:
+            try:
+                if pycodestyle.noqa(self.lines[e.lineno - 1]):
+                    continue
+            except IndexError:
+                pass
+
+            yield e
+
+    def load_file(self):
+        """
+        Loads the file in a way that auto-detects source encoding and deals
+        with broken terminal encodings for stdin.
+        Stolen from flake8_import_order because it's good.
+        """
+
+        if self.filename in ("stdin", "-", None):
+            self.filename = "stdin"
+            self.lines = pycodestyle.stdin_get_value().splitlines(True)
+        else:
+            self.lines = pycodestyle.readlines(self.filename)
+
+        if not self.tree:
+            self.tree = ast.parse("".join(self.lines))
+
+    # def run(self):
+    #     visitor = Py2to3Visitor()
+    #     visitor.visit(self.tree)
+    #     for code, lineno, name in visitor.errors:
+    #         yield lineno, 0, self.codes[code], type(self)
+
+
+error = namedtuple('error', 'lineno col message type')
+
+B001 = partial(
+    error,
+    message="B001: Do not use bare `except:`, it also catches unexpected "
+            "events like memory errors, interrupts, system exit, and so on.  "
+            "Prefer `except Exception:`.  If you're sure what you're doing, "
+            "be explicit and write `except BaseException:`.",
+    type=SentryCheck,
+)
+
+B002 = partial(
+    error,
+    message="B002: Python does not support the unary prefix increment. Writing "
+            "++n is equivalent to +(+(n)), which equals n. You meant n += 1.",
+    type=SentryCheck,
+)
+
+B003 = partial(
+    error,
+    message="B003: Missing `from __future__ import absolute_import`",
+    type=SentryCheck,
+)
+
+B101 = partial(
+    error,
+    type=SentryCheck)
+B101.methods = {'assert_calls', 'assert_not_called', 'assert_called',
+                'assert_called_once', 'not_called', 'called_once',
+                'called_once_with'}
+
+# Those could be false positives but it's more dangerous to let them slip
+# through if they're not.
+B301 = partial(
+    error,
+    message="B301: Python 3 does not include .iter* methods on dictionaries. "
+            "Use `six.iter*` or `future.utils.iter*` instead.",
+    type=SentryCheck,
+)
+B301.methods = {'iterkeys', 'itervalues', 'iteritems', 'iterlists'}
+B301.valid_paths = {'six', 'future.utils', 'builtins'}
+
+B302 = partial(
+    error,
+    message="B302: Python 3 does not include .view* methods on dictionaries. "
+            "Remove the ``view`` prefix from the method name. Use `six.view*` "
+            "or `future.utils.view*` instead.",
+    type=SentryCheck,
+)
+B302.methods = {'viewkeys', 'viewvalues', 'viewitems', 'viewlists'}
+B302.valid_paths = {'six', 'future.utils', 'builtins'}
+
+B303 = partial(
+    error,
+    message="B303: __metaclass__ does not exist in Python 3. Use "
+            "use `@six.add_metaclass()` instead.",
+    type=SentryCheck,
+)
+
+B304 = partial(
+    error,
+    message="B304: sys.maxint does not exist in Python 3. Use `sys.maxsize`.",
+    type=SentryCheck,
+)
+
+B305 = partial(
+    error,
+    message="B305: .next() does not exist in Python 3. Use ``six.next()`` "
+            "instead.",
+    type=SentryCheck,
+)
+B305.methods = {'next'}
+B305.valid_paths = {'six', 'future.utils', 'builtins'}
+
+B306 = partial(
+    error,
+    message="B306: ``BaseException.message`` has been deprecated as of Python "
+            "2.6 and is removed in Python 3. Use ``str(e)`` to access the "
+            "user-readable message. Use ``e.args`` to access arguments passed "
+            "to the exception.",
+    type=SentryCheck,
+)
+
+B307 = partial(
+    error,
+    message="B307: Python 3 has combined urllib, urllib2, and urlparse into "
+            "a single library. For Python 2 compatibility, utilize the "
+            "six.moves.urllib module.",
+    type=SentryCheck)
+B307.names = {'urllib', 'urlib2', 'urlparse'}
+
+B308 = partial(
+    error,
+    message="B308: The usage of ``str()`` differs between Python 2 and 3. Use "
+            "``six.text_type()`` or ``six.binary_type`` instead.",
+    type=SentryCheck,
+)
+B308.names = {'str'}
+
+B309 = partial(
+    error,
+    message="B309: ``unicode()`` does not exist in Python 3. Use "
+            "``six.text_type()`` instead.",
+    type=SentryCheck,
+)
+B309.names = {'unicode'}
+
+B310 = partial(
+    error,
+    message="B310: ``long`` should not be used. Use int instead, and allow "
+            "Python to deal with handling large integers.",
+    type=SentryCheck,
+)
+B310.names = {'long'}
+
+B311 = partial(
+    error,
+    message="B311: ``cgi.escape`` and ``html.escape`` should not be used. Use "
+            "sentry.utils.html.escape instead.",
+    type=SentryCheck,
+)
+B311.methods = {'escape'}
+B311.invalid_paths = {'cgi', 'html'}
+
+B312 = partial(
+    error,
+    message="B312: ``__unicode__`` should not be defined on classes. Define "
+            "just ``__str__`` returning a unicode text string, and use the "
+            "sentry.utils.compat.implements_to_string class decorator.",
+    type=SentryCheck,
+)
diff --git a/src/sentry/logging/handlers.py b/src/sentry/logging/handlers.py
index 7142ae20b7..53a464dd9c 100644
--- a/src/sentry/logging/handlers.py
+++ b/src/sentry/logging/handlers.py
@@ -4,8 +4,9 @@ sentry.logging.handlers
 :copyright: (c) 2010-2016 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+from __future__ import absolute_import
 
-
+import six
 import logging
 
 from django.utils.timezone import now
@@ -43,7 +44,7 @@ class HumanRenderer(object):
     def __call__(self, logger, name, event_dict):
         level = event_dict.pop('level')
         real_level = (level.upper()
-            if isinstance(level, basestring)
+            if isinstance(level, six.string_types)
             else logging.getLevelName(level)
         )
         base = '%s [%s] %s: %s' % (
@@ -53,7 +54,7 @@ class HumanRenderer(object):
             event_dict.pop('event', ''),
         )
         join = ' '.join(k + '=' + repr(v)
-               for k, v in event_dict.iteritems())
+               for k, v in six.iteritems(event_dict))
         return '%s%s' % (base, (' (%s)' % join if join else ''))
 
 
@@ -65,7 +66,7 @@ class StructLogHandler(logging.StreamHandler):
         # and just turn them into attributes.
         kwargs = {
             k: v
-            for k, v in vars(record).iteritems()
+            for k, v in six.iteritems(vars(record))
             if k not in throwaways
             and v is not None
         }
diff --git a/src/sentry/management/commands/collectstatic.py b/src/sentry/management/commands/collectstatic.py
index 04a7d48c3e..99ae3e3289 100644
--- a/src/sentry/management/commands/collectstatic.py
+++ b/src/sentry/management/commands/collectstatic.py
@@ -5,13 +5,15 @@ sentry.management.commands.collectstatic
 :copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-from __future__ import absolute_import
+from __future__ import absolute_import, print_function
 
 import os
-from itertools import chain, izip
+
+from itertools import chain
 from operator import itemgetter
 from hashlib import md5
 from django.contrib.staticfiles.management.commands.collectstatic import Command as BaseCommand
+from six.moves import zip
 
 BUFFER_SIZE = 65536
 VERSION_PATH = 'version'
@@ -29,8 +31,9 @@ def checksum(file_):
 
 def get_bundle_version(files):
     hasher = md5()
-    for (short, _), sum in izip(files, map(checksum, files)):
-        hasher.update('%s  %s\n' % (sum, short))
+    for (short, _), sum in zip(files, map(checksum, files)):
+        print('%s  %s' % (sum, short))
+        hasher.update('{}  {}\n'.format(sum, short).encode('utf-8'))
     return hasher.hexdigest()
 
 
@@ -45,7 +48,8 @@ class Command(BaseCommand):
         paths = sorted(set(chain(*itemgetter(*collected.keys())(collected))))
         abs_paths = map(self.storage.path, paths)
         version = get_bundle_version(zip(paths, abs_paths))
-        print 'Static version', version
+        print('-----------------')
+        print(version)
         with open(self.storage.path(VERSION_PATH), 'wb') as fp:
             fp.write(version)
         return collected
diff --git a/src/sentry/management/commands/create_sample_event.py b/src/sentry/management/commands/create_sample_event.py
index b617a1ce31..c810eb36ba 100644
--- a/src/sentry/management/commands/create_sample_event.py
+++ b/src/sentry/management/commands/create_sample_event.py
@@ -37,6 +37,6 @@ class Command(BaseCommand):
         platform = options['platform']
         event = create_sample_event(project, platform)
         if not event:
-            raise CommandError('Unable to create an event for platform %r' % (str(platform),))
+            raise CommandError('Unable to create an event for platform %r' % (platform,))
 
         self.stdout.write('Event created: %s' % (event.group.get_absolute_url(),))
diff --git a/src/sentry/management/commands/diff.py b/src/sentry/management/commands/diff.py
index 8c713b4cc2..348b255a34 100644
--- a/src/sentry/management/commands/diff.py
+++ b/src/sentry/management/commands/diff.py
@@ -9,7 +9,9 @@ from __future__ import absolute_import, print_function
 
 from django.core.management.base import BaseCommand, CommandError
 
+import six
 import sys
+
 from optparse import make_option
 
 
@@ -71,8 +73,8 @@ def print_unified_diff(left, right):
                 print('>> Different interfaces for %r: %r vs %r' % (bit, a_key, b_key))
                 continue
             for idx, (a_hash, b_hash) in enumerate(zip(a_hashes, b_hashes)):
-                a_hash = [str(h) + '\n' for h in a_hash]
-                b_hash = [str(h) + '\n' for h in b_hash]
+                a_hash = [six.text_type(h) + '\n' for h in a_hash]
+                b_hash = [six.text_type(h) + '\n' for h in b_hash]
                 a_file = '<Event id=%d> %r %r[%d]' % (left_id, bit, a_key, idx)
                 b_file = '<Event id=%d> %r %r[%d]' % (right_id, bit, b_key, idx)
                 for line in unified_diff(a_hash, b_hash, fromfile=a_file, tofile=b_file):
diff --git a/src/sentry/management/commands/merge_users.py b/src/sentry/management/commands/merge_users.py
index d4093fdfc2..01191f1975 100644
--- a/src/sentry/management/commands/merge_users.py
+++ b/src/sentry/management/commands/merge_users.py
@@ -2,11 +2,13 @@
 from __future__ import absolute_import, print_function
 
 import operator
+import six
 import sys
 
 from collections import defaultdict
 from django.core.management.base import BaseCommand, CommandError, make_option
 from django.db.models import Q
+from six.moves import reduce
 
 from sentry.models import Organization, OrganizationMember, User
 
@@ -42,7 +44,7 @@ class Command(BaseCommand):
             primary_user.username,
         )
         while True:
-            response = raw_input(message).strip().lower()
+            response = six.input(message).strip().lower()
             if response in ('y', ''):
                 return True
             elif response == 'n':
diff --git a/src/sentry/management/commands/send_fake_data.py b/src/sentry/management/commands/send_fake_data.py
index 42495a3ade..cff76f6097 100644
--- a/src/sentry/management/commands/send_fake_data.py
+++ b/src/sentry/management/commands/send_fake_data.py
@@ -10,6 +10,7 @@ from __future__ import absolute_import
 import datetime
 import itertools
 import random
+import six
 import time
 
 from django.core.management.base import BaseCommand, CommandError, make_option
@@ -36,13 +37,13 @@ def funcs():
     #     return client.capture('Query', query=queries.next(), engine=engine.next(), time_spent=duration, data={'logger': loggers.next(), 'site': 'sql'})
 
     def exception(client):
-        timestamp = datetime.datetime.utcnow() - datetime.timedelta(seconds=timestamps.next())
+        timestamp = datetime.datetime.utcnow() - datetime.timedelta(seconds=six.next(timestamps))
         try:
-            raise exceptions.next()
+            raise six.next(exceptions)
         except Exception:
-            email = emails.next()
+            email = six.next(emails)
             return client.captureException(data={
-                'logger': loggers.next(),
+                'logger': six.next(loggers),
                 'site': 'web',
                 'sentry.interfaces.User': {
                     'id': email,
diff --git a/src/sentry/middleware/health.py b/src/sentry/middleware/health.py
index 00f4c3995a..99e953bf34 100644
--- a/src/sentry/middleware/health.py
+++ b/src/sentry/middleware/health.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import itertools
+import six
 
 from django.http import HttpResponse
 
@@ -27,6 +28,6 @@ class HealthCheck(object):
         problems = list(itertools.chain.from_iterable(results.values()))
 
         return HttpResponse(json.dumps({
-            'problems': map(unicode, problems),
+            'problems': map(six.text_type, problems),
             'healthy': {type(check).__name__: not p for check, p in results.items()},
         }), content_type='application/json', status=(500 if problems else 200))
diff --git a/src/sentry/middleware/profiler.py b/src/sentry/middleware/profiler.py
index 9bac4a47f3..ad6f2749b6 100644
--- a/src/sentry/middleware/profiler.py
+++ b/src/sentry/middleware/profiler.py
@@ -6,11 +6,12 @@ from __future__ import absolute_import
 import cProfile
 import re
 import pstats
+import six
 import sys
-import StringIO
 
 from django.conf import settings
 from django.http import HttpResponse
+from six import StringIO
 
 
 words_re = re.compile(r'\s+')
@@ -57,7 +58,7 @@ class ProfileMiddleware(object):
                 return name[0]
 
     def get_summary(self, results_dict, total):
-        results = [(item[1], item[0]) for item in results_dict.iteritems()]
+        results = [(item[1], item[0]) for item in six.iteritems(results_dict)]
         results.sort(reverse=True)
         results = results[:40]
 
@@ -86,12 +87,12 @@ class ProfileMiddleware(object):
         oldstats = stats.stats
         stats.stats = newstats = {}
         max_name_len = 0
-        for func, (cc, nc, tt, ct, callers) in oldstats.iteritems():
+        for func, (cc, nc, tt, ct, callers) in six.iteritems(oldstats):
             newfunc = func_strip_path(func)
             if len(func_std_string(newfunc)) > max_name_len:
                 max_name_len = len(func_std_string(newfunc))
             newcallers = {}
-            for func2, caller in callers.iteritems():
+            for func2, caller in six.iteritems(callers):
                 newcallers[func_strip_path(func2)] = caller
 
             if newfunc in newstats:
diff --git a/src/sentry/middleware/proxy.py b/src/sentry/middleware/proxy.py
index f16a1503e9..df315b55a0 100644
--- a/src/sentry/middleware/proxy.py
+++ b/src/sentry/middleware/proxy.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 
 class SetRemoteAddrFromForwardedFor(object):
     def process_request(self, request):
@@ -27,6 +29,6 @@ class ContentLengthHeaderMiddleware(object):
             return response
 
         if not response.streaming:
-            response['Content-Length'] = str(len(response.content))
+            response['Content-Length'] = six.text_type(len(response.content))
 
         return response
diff --git a/src/sentry/middleware/stats.py b/src/sentry/middleware/stats.py
index 7b44817fb6..add77fd981 100644
--- a/src/sentry/middleware/stats.py
+++ b/src/sentry/middleware/stats.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import inspect
+import six
 import time
 
 from django.http import Http404
@@ -10,7 +11,7 @@ from sentry.utils import metrics
 
 class ResponseCodeMiddleware(object):
     def process_response(self, request, response):
-        metrics.incr('response', instance=str(response.status_code))
+        metrics.incr('response', instance=six.text_type(response.status_code))
         return response
 
     def process_exception(self, request, exception):
diff --git a/src/sentry/models/activity.py b/src/sentry/models/activity.py
index e429a8e812..b4cb6bf02f 100644
--- a/src/sentry/models/activity.py
+++ b/src/sentry/models/activity.py
@@ -7,6 +7,8 @@ sentry.models.activity
 """
 from __future__ import absolute_import
 
+import six
+
 from django.conf import settings
 from django.db import models
 from django.db.models import F
@@ -82,7 +84,7 @@ class Activity(Model):
         if self.type == self.RELEASE and isinstance(self.data['version'], Release):
             self.data['version'] = self.data['version'].version
         if self.type == self.ASSIGNED:
-            self.data['assignee'] = str(self.data['assignee'])
+            self.data['assignee'] = six.text_type(self.data['assignee'])
 
     def save(self, *args, **kwargs):
         created = bool(not self.id)
diff --git a/src/sentry/models/apikey.py b/src/sentry/models/apikey.py
index ef0f58105b..dd653f5174 100644
--- a/src/sentry/models/apikey.py
+++ b/src/sentry/models/apikey.py
@@ -98,7 +98,7 @@ class ApiKey(Model):
         }
 
     def get_scopes(self):
-        return [k for k, v in self.scopes.iteritems() if v]
+        return [k for k, v in six.iteritems(self.scopes) if v]
 
     def has_scope(self, scope):
         return scope in self.scopes
diff --git a/src/sentry/models/apitoken.py b/src/sentry/models/apitoken.py
index 1c650cac40..d10ca9d10e 100644
--- a/src/sentry/models/apitoken.py
+++ b/src/sentry/models/apitoken.py
@@ -67,7 +67,7 @@ class ApiToken(Model):
         }
 
     def get_scopes(self):
-        return [k for k, v in self.scopes.iteritems() if v]
+        return [k for k, v in six.iteritems(self.scopes) if v]
 
     def has_scope(self, scope):
         return scope in self.scopes
diff --git a/src/sentry/models/authenticator.py b/src/sentry/models/authenticator.py
index 1971b2c923..da097b79d8 100644
--- a/src/sentry/models/authenticator.py
+++ b/src/sentry/models/authenticator.py
@@ -12,6 +12,7 @@ import hmac
 import time
 import base64
 import hashlib
+import six
 
 from u2flib_server import u2f
 from u2flib_server import jsapi as u2f_jsapi
@@ -75,7 +76,7 @@ class AuthenticatorManager(BaseManager):
             rvm = dict(AUTHENTICATOR_INTERFACES)
             for iface in ifaces:
                 rvm.pop(iface.interface_id, None)
-            for iface_cls in rvm.itervalues():
+            for iface_cls in six.itervalues(rvm):
                 if iface_cls.is_available:
                     ifaces.append(iface_cls())
 
@@ -154,7 +155,7 @@ def register_authenticator(cls):
 
 
 def available_authenticators(ignore_backup=False):
-    interfaces = AUTHENTICATOR_INTERFACES.itervalues()
+    interfaces = six.itervalues(AUTHENTICATOR_INTERFACES)
     if not ignore_backup:
         return [v for v in interfaces if v.is_available]
     return [v for v in interfaces if not v.is_backup_interface and v.is_available]
@@ -283,8 +284,12 @@ class RecoveryCodeInterface(AuthenticatorInterface):
     def get_codes(self):
         rv = []
         if self.is_enrolled:
-            h = hmac.new(self.config['salt'], None, hashlib.sha1)
-            for x in xrange(10):
+            h = hmac.new(
+                key=self.config['salt'].encode('utf-8'),
+                msg=None,
+                digestmod=hashlib.sha1,
+            )
+            for x in range(10):
                 h.update('%s|' % x)
                 rv.append(base64.b32encode(h.digest())[:8])
         return rv
diff --git a/src/sentry/models/dsymfile.py b/src/sentry/models/dsymfile.py
index cc217e3fd2..6ee47d77b4 100644
--- a/src/sentry/models/dsymfile.py
+++ b/src/sentry/models/dsymfile.py
@@ -11,7 +11,9 @@ from __future__ import absolute_import
 import os
 import shutil
 import hashlib
+import six
 import tempfile
+
 from itertools import chain
 from django.db import models, router, transaction, connection, IntegrityError
 
@@ -184,7 +186,7 @@ class DSymSymbolManager(BaseManager):
             addr_abs = image_vmaddr + instruction_addr - image_addr
         addr_rel = instruction_addr - image_addr
 
-        uuid = str(uuid).lower()
+        uuid = six.text_type(uuid).lower()
         cur = connection.cursor()
         try:
             # First try: exact match on uuid (addr_rel)
diff --git a/src/sentry/models/environment.py b/src/sentry/models/environment.py
index 5b7df2bfd3..61fb7b8904 100644
--- a/src/sentry/models/environment.py
+++ b/src/sentry/models/environment.py
@@ -14,7 +14,7 @@ from sentry.db.models import (
     BoundedPositiveIntegerField, Model, sane_repr
 )
 from sentry.utils.cache import cache
-from sentry.utils.hashlib import md5
+from sentry.utils.hashlib import md5_text
 
 
 class Environment(Model):
@@ -33,7 +33,7 @@ class Environment(Model):
 
     @classmethod
     def get_cache_key(cls, project_id, name):
-        return 'env:1:%s:%s' % (project_id, md5(name).hexdigest())
+        return 'env:1:%s:%s' % (project_id, md5_text(name).hexdigest())
 
     @classmethod
     def get_or_create(cls, project, name):
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index b55baeb0d1..ec8098eaa5 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -7,9 +7,9 @@ sentry.models.event
 """
 from __future__ import absolute_import
 
+import six
 import warnings
 
-import six
 from collections import OrderedDict
 from django.db import models
 from django.utils import timezone
@@ -141,7 +141,7 @@ class Event(Model):
 
     def get_interfaces(self):
         result = []
-        for key, data in self.data.iteritems():
+        for key, data in six.iteritems(self.data):
             try:
                 cls = get_interface(key)
             except ValueError:
@@ -191,14 +191,14 @@ class Event(Model):
         data['datetime'] = self.datetime
         data['time_spent'] = self.time_spent
         data['tags'] = self.get_tags()
-        for k, v in sorted(self.data.iteritems()):
+        for k, v in sorted(six.iteritems(self.data)):
             data[k] = v
         return data
 
     @property
     def size(self):
         data_len = len(self.get_legacy_message())
-        for value in self.data.itervalues():
+        for value in six.itervalues(self.data):
             data_len += len(repr(value))
         return data_len
 
diff --git a/src/sentry/models/eventerror.py b/src/sentry/models/eventerror.py
index f08a31e975..2eb7242e72 100644
--- a/src/sentry/models/eventerror.py
+++ b/src/sentry/models/eventerror.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 
 class EventError(object):
     INVALID_DATA = 'invalid_data'
@@ -48,4 +50,4 @@ class EventError(object):
         return cls._messages[data['type']].format(**data)
 
     def to_dict(self):
-        return {k: v for k, v in self.iteritems() if k != 'type'}
+        return {k: v for k, v in six.iteritems(self) if k != 'type'}
diff --git a/src/sentry/models/eventuser.py b/src/sentry/models/eventuser.py
index 2f7b131a40..5be5717847 100644
--- a/src/sentry/models/eventuser.py
+++ b/src/sentry/models/eventuser.py
@@ -4,7 +4,7 @@ from django.db import models
 from django.utils import timezone
 
 from sentry.db.models import FlexibleForeignKey, Model, sane_repr
-from sentry.utils.hashlib import md5
+from sentry.utils.hashlib import md5_text
 
 KEYWORD_MAP = {
     'id': 'ident',
@@ -50,7 +50,7 @@ class EventUser(Model):
 
     def get_hash(self):
         value = self.ident or self.username or self.email or self.ip_address
-        return md5(value).hexdigest()
+        return md5_text(value).hexdigest()
 
     @property
     def tag_value(self):
diff --git a/src/sentry/models/file.py b/src/sentry/models/file.py
index 3d9c0f61e6..0d7b587c8b 100644
--- a/src/sentry/models/file.py
+++ b/src/sentry/models/file.py
@@ -8,6 +8,8 @@ sentry.models.file
 
 from __future__ import absolute_import
 
+import six
+
 from hashlib import sha1
 from uuid import uuid4
 
@@ -54,7 +56,7 @@ class FileBlob(Model):
         """
         size = 0
 
-        checksum = sha1('')
+        checksum = sha1(b'')
         for chunk in fileobj:
             size += len(chunk)
             checksum.update(chunk)
@@ -88,9 +90,12 @@ class FileBlob(Model):
 
     @classmethod
     def generate_unique_path(cls, timestamp):
-        pieces = map(str, divmod(int(timestamp.strftime('%s')), ONE_DAY))
-        pieces.append('%s' % (uuid4().hex,))
-        return '/'.join(pieces)
+        pieces = [
+            six.text_type(x)
+            for x in divmod(int(timestamp.strftime('%s')), ONE_DAY)
+        ]
+        pieces.append(uuid4().hex)
+        return u'/'.join(pieces)
 
     def delete(self, *args, **kwargs):
         lock = locks.get('fileblob:upload:{}'.format(self.checksum), duration=60 * 10)
@@ -170,7 +175,7 @@ class File(Model):
         """
         results = []
         offset = 0
-        checksum = sha1('')
+        checksum = sha1(b'')
 
         while True:
             contents = fileobj.read(blob_size)
@@ -227,7 +232,7 @@ class ChunkedFileBlobIndexWrapper(object):
 
     def _nextidx(self):
         try:
-            self._curidx = self._idxiter.next()
+            self._curidx = six.next(self._idxiter)
             self._curfile = self._curidx.blob.getfile()
         except StopIteration:
             self._curidx = None
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 1457188b7b..52c6d31ebc 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -10,12 +10,12 @@ from __future__ import absolute_import, print_function
 import logging
 import math
 import re
+import six
 import time
 import warnings
+
 from base64 import b16decode, b16encode
 from datetime import timedelta
-
-import six
 from django.core.urlresolvers import reverse
 from django.db import models
 from django.utils import timezone
@@ -266,14 +266,16 @@ class Group(Model):
         return self.status
 
     def get_share_id(self):
-        return b16encode('{}.{}'.format(self.project_id, self.id)).lower()
+        return b16encode(
+            ('{}.{}'.format(self.project_id, self.id)).encode('utf-8')
+        ).lower()
 
     @classmethod
     def from_share_id(cls, share_id):
         if not share_id:
             raise cls.DoesNotExist
         try:
-            project_id, group_id = b16decode(share_id.upper()).split('.')
+            project_id, group_id = b16decode(share_id.upper()).decode('utf-8').split('.')
         except (ValueError, TypeError):
             raise cls.DoesNotExist
         if not (project_id.isdigit() and group_id.isdigit()):
diff --git a/src/sentry/models/groupassignee.py b/src/sentry/models/groupassignee.py
index 8af69fb871..f7e8f8fbdd 100644
--- a/src/sentry/models/groupassignee.py
+++ b/src/sentry/models/groupassignee.py
@@ -7,6 +7,8 @@ sentry.models.groupassignee
 """
 from __future__ import absolute_import
 
+import six
+
 from django.conf import settings
 from django.db import models
 from django.utils import timezone
@@ -48,7 +50,7 @@ class GroupAssigneeManager(BaseManager):
                 type=Activity.ASSIGNED,
                 user=acting_user,
                 data={
-                    'assignee': str(assigned_to.id),
+                    'assignee': six.text_type(assigned_to.id),
                     'assigneeEmail': assigned_to.email,
                 }
             )
diff --git a/src/sentry/models/grouprelease.py b/src/sentry/models/grouprelease.py
index 4f9d9bb7cd..8d5fd96a4f 100644
--- a/src/sentry/models/grouprelease.py
+++ b/src/sentry/models/grouprelease.py
@@ -2,9 +2,9 @@ from __future__ import absolute_import
 
 from django.db import models
 from django.utils import timezone
-from hashlib import md5
 
 from sentry.utils.cache import cache
+from sentry.utils.hashlib import md5_text
 from sentry.db.models import (
     BoundedPositiveIntegerField, Model, sane_repr
 )
@@ -31,7 +31,7 @@ class GroupRelease(Model):
     def get_cache_key(cls, group_id, release_id, environment):
         return 'grouprelease:1:{}:{}'.format(
             group_id,
-            md5('{}:{}'.format(release_id, environment)).hexdigest(),
+            md5_text('{}:{}'.format(release_id, environment)).hexdigest(),
         )
 
     @classmethod
diff --git a/src/sentry/models/helppage.py b/src/sentry/models/helppage.py
index 84c0aca48f..49243a24f0 100644
--- a/src/sentry/models/helppage.py
+++ b/src/sentry/models/helppage.py
@@ -7,6 +7,8 @@ sentry.models.helppage
 """
 from __future__ import absolute_import
 
+import six
+
 from django.db import models
 from django.utils import timezone
 from django.utils.text import slugify
@@ -38,7 +40,7 @@ class HelpPage(Model):
 
     @property
     def slug(self):
-        return slugify(unicode(self.title))
+        return slugify(six.text_type(self.title))
 
     def natural_key(self):
         if self.key:
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index 39eaeff0d2..f8dda7eea3 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -7,12 +7,15 @@ sentry.models.organizationmember
 """
 from __future__ import absolute_import, print_function
 
+import six
+
 from bitfield import BitField
 from django.conf import settings
 from django.core.urlresolvers import reverse
 from django.db import models, transaction
 from django.db.models import F
 from django.utils import timezone
+from django.utils.encoding import force_bytes
 from hashlib import md5
 from structlog import get_logger
 
@@ -134,8 +137,9 @@ class OrganizationMember(Model):
     @property
     def token(self):
         checksum = md5()
-        for x in (str(self.organization_id), self.get_email(), settings.SECRET_KEY):
-            checksum.update(x)
+        checksum.update(six.text_type(self.organization_id).encode('utf-8'))
+        checksum.update(self.get_email().encode('utf-8'))
+        checksum.update(force_bytes(settings.SECRET_KEY))
         return checksum.hexdigest()
 
     def send_invite_email(self):
diff --git a/src/sentry/models/organizationonboardingtask.py b/src/sentry/models/organizationonboardingtask.py
index c545eed252..a0d877df7f 100644
--- a/src/sentry/models/organizationonboardingtask.py
+++ b/src/sentry/models/organizationonboardingtask.py
@@ -5,6 +5,8 @@ sentry.models.organizationonboardingtask
 :copyright: (c) 2010-2016 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+from __future__ import absolute_import
+
 from django.conf import settings
 from django.db import models
 from django.utils import timezone
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 7c3abc9632..46fea20267 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -8,6 +8,7 @@ sentry.models.project
 from __future__ import absolute_import, print_function
 
 import logging
+import six
 import warnings
 
 from django.conf import settings
@@ -166,7 +167,7 @@ class Project(Model):
 
     def is_internal_project(self):
         for value in (settings.SENTRY_FRONTEND_PROJECT, settings.SENTRY_PROJECT):
-            if str(self.id) == str(value) or str(self.slug) == str(value):
+            if six.text_type(self.id) == six.text_type(value) or six.text_type(self.slug) == six.text_type(value):
                 return True
         return False
 
diff --git a/src/sentry/models/projectkey.py b/src/sentry/models/projectkey.py
index cbc75d98d0..9c3e51b786 100644
--- a/src/sentry/models/projectkey.py
+++ b/src/sentry/models/projectkey.py
@@ -11,7 +11,6 @@ import petname
 import six
 
 from bitfield import BitField
-from urlparse import urlparse
 from uuid import uuid4
 
 from django.conf import settings
@@ -19,6 +18,7 @@ from django.core.urlresolvers import reverse
 from django.db import models
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
+from six.moves.urllib.parse import urlparse
 
 from sentry import options
 from sentry.db.models import (
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 32e6438288..18b682c4ee 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -17,7 +17,7 @@ from sentry.db.models import (
     BoundedPositiveIntegerField, FlexibleForeignKey, Model, sane_repr
 )
 from sentry.utils.cache import cache
-from sentry.utils.hashlib import md5
+from sentry.utils.hashlib import md5_text
 
 _sha1_re = re.compile(r'^[a-f0-9]{40}$')
 
@@ -52,7 +52,7 @@ class Release(Model):
 
     @classmethod
     def get_cache_key(cls, project_id, version):
-        return 'release:2:%s:%s' % (project_id, md5(version).hexdigest())
+        return 'release:2:%s:%s' % (project_id, md5_text(version).hexdigest())
 
     @classmethod
     def get(cls, project, version):
diff --git a/src/sentry/models/releasefile.py b/src/sentry/models/releasefile.py
index fe43bf30f0..9387632c44 100644
--- a/src/sentry/models/releasefile.py
+++ b/src/sentry/models/releasefile.py
@@ -11,7 +11,7 @@ from __future__ import absolute_import
 from django.db import models
 
 from sentry.db.models import FlexibleForeignKey, Model, sane_repr
-from sentry.utils.hashlib import sha1
+from sentry.utils.hashlib import sha1_text
 
 
 class ReleaseFile(Model):
@@ -48,4 +48,4 @@ class ReleaseFile(Model):
 
     @classmethod
     def get_ident(cls, name):
-        return sha1(name).hexdigest()
+        return sha1_text(name).hexdigest()
diff --git a/src/sentry/models/useravatar.py b/src/sentry/models/useravatar.py
index 36e8585722..dc46942b37 100644
--- a/src/sentry/models/useravatar.py
+++ b/src/sentry/models/useravatar.py
@@ -2,13 +2,12 @@ from __future__ import absolute_import
 
 import uuid
 
-from PIL import Image
-
 from django.db import models
+from PIL import Image
+from six import StringIO
 
 from sentry.db.models import FlexibleForeignKey, Model
 from sentry.utils.cache import cache
-from sentry.utils.compat import StringIO
 
 
 class UserAvatar(Model):
diff --git a/src/sentry/monitoring/__init__.py b/src/sentry/monitoring/__init__.py
index 8961b631a1..c3961685ab 100644
--- a/src/sentry/monitoring/__init__.py
+++ b/src/sentry/monitoring/__init__.py
@@ -1,7 +1 @@
-"""
-sentry.monitoring
-~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2016 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
+from __future__ import absolute_import
diff --git a/src/sentry/monitoring/queues.py b/src/sentry/monitoring/queues.py
index 4cf178c563..6e1ea65724 100644
--- a/src/sentry/monitoring/queues.py
+++ b/src/sentry/monitoring/queues.py
@@ -7,9 +7,9 @@ sentry.monitoring.queues
 """
 from __future__ import absolute_import, print_function
 
-from urlparse import urlparse
 from django.conf import settings
 from django.utils.functional import cached_property
+from six.moves.urllib.parse import urlparse
 
 
 class RedisBackend(object):
diff --git a/src/sentry/nodestore/base.py b/src/sentry/nodestore/base.py
index 7b7002c605..55d01b189a 100644
--- a/src/sentry/nodestore/base.py
+++ b/src/sentry/nodestore/base.py
@@ -8,6 +8,8 @@ sentry.nodestore.base
 
 from __future__ import absolute_import
 
+import six
+
 from base64 import b64encode
 from threading import local
 from uuid import uuid4
@@ -79,7 +81,7 @@ class NodeStorage(local):
         >>>     'key2': {'foo': 'baz'},
         >>> })
         """
-        for id, data in values.iteritems():
+        for id, data in six.iteritems(values):
             self.set(id=id, data=data)
 
     def generate_id(self):
diff --git a/src/sentry/nodestore/riak/backend.py b/src/sentry/nodestore/riak/backend.py
index c10f2aefdd..7a5ce6b1c8 100644
--- a/src/sentry/nodestore/riak/backend.py
+++ b/src/sentry/nodestore/riak/backend.py
@@ -79,7 +79,7 @@ class RiakNodeStorage(NodeStorage):
 
         rv = self.conn.multiget(self.bucket, id_list, r=1)
         results = {}
-        for key, value in rv.iteritems():
+        for key, value in six.iteritems(rv):
             if isinstance(value, Exception):
                 six.reraise(type(value), value)
             if value.status != 200:
diff --git a/src/sentry/nodestore/riak/client.py b/src/sentry/nodestore/riak/client.py
index b5497164ae..7aac330537 100644
--- a/src/sentry/nodestore/riak/client.py
+++ b/src/sentry/nodestore/riak/client.py
@@ -12,14 +12,14 @@ import six
 import sys
 import socket
 from random import shuffle
+from six.moves.queue import Queue
 from time import time
 from threading import Lock, Thread, Event
-from Queue import Queue
 
 # utilize the ca_certs path from requests since we already depend on it
 # and they bundle a ca cert.
 from requests.certs import where as ca_certs
-from urllib import urlencode, quote_plus
+from six.moves.urllib.parse import urlencode, quote_plus
 from urllib3 import HTTPConnectionPool, HTTPSConnectionPool
 from urllib3.connection import HTTPConnection
 from urllib3.exceptions import HTTPError
@@ -45,7 +45,7 @@ class RiakClient(object):
 
     def _start(self, size):
         assert size > 0
-        for _ in xrange(size):
+        for _ in range(size):
             t = Thread(target=self._target)
             t.setDaemon(True)
             t.start()
@@ -222,14 +222,14 @@ class ConnectionManager(object):
         last_error = None
 
         try:
-            for _ in xrange(self.max_retries + 1):
+            for _ in range(self.max_retries + 1):
                 # If we're trying to initiate a new connection, and
                 # all connections are already dead, then we should flail
                 # and attempt to connect to one of them
                 if len(self.connections) == 0:
                     self.force_revive()
 
-                conn = self.strategy.next(self.connections)
+                conn = self.strategy.next(self.connections)  # NOQA
                 try:
                     return conn.urlopen(method, path, **kwargs)
                 except HTTPError:
diff --git a/src/sentry/options/__init__.py b/src/sentry/options/__init__.py
index f8e28f6996..517dcef0f7 100644
--- a/src/sentry/options/__init__.py
+++ b/src/sentry/options/__init__.py
@@ -36,4 +36,4 @@ lookup_key = default_manager.lookup_key
 
 
 def load_defaults():
-    from .defaults import *  # NOQA
+    from . import defaults  # NOQA
diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index ea02d1c40c..266deecccc 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -7,17 +7,21 @@ sentry.options.manager
 """
 from __future__ import absolute_import, print_function
 
+import six
 import sys
 import logging
-from itertools import ifilter
-from types import NoneType
+
 from django.conf import settings
+
 from sentry.utils.types import type_from_value, Any
 
 # Prevent outselves from clobbering the builtin
 _type = type
+
 logger = logging.getLogger('sentry')
 
+NoneType = type(None)
+
 
 class UnknownOption(KeyError):
     pass
@@ -201,7 +205,7 @@ class OptionsManager(object):
         # Guess type based on the default value
         if type is None:
             # the default value would be equivilent to '' if no type / default
-            # is specified and we assume unicode for safety
+            # is specified and we assume six.text_type for safety
             if default_value is None:
                 default_value = u''
                 default = lambda: default_value
@@ -211,7 +215,7 @@ class OptionsManager(object):
         # really make sense as config options. There should be a sensible default
         # value instead that matches the type expected, rather than relying on None.
         if type is NoneType:
-            raise TypeError('Options must not be NoneType')
+            raise TypeError('Options must not be None')
 
         # Make sure the type is correct at registration time
         if default_value is not None and not type.test(default_value):
@@ -240,7 +244,7 @@ class OptionsManager(object):
             raise UnknownOption(key)
 
     def validate(self, options, warn=False):
-        for k, v in options.iteritems():
+        for k, v in six.iteritems(options):
             try:
                 self.validate_option(k, v)
             except UnknownOption as e:
@@ -258,7 +262,7 @@ class OptionsManager(object):
         """
         Return an interator for all keys in the registry.
         """
-        return self.registry.itervalues()
+        return six.itervalues(self.registry)
 
     def filter(self, flag=None):
         """
@@ -267,5 +271,5 @@ class OptionsManager(object):
         if flag is None:
             return self.all()
         if flag is DEFAULT_FLAGS:
-            return ifilter(lambda k: k.flags is DEFAULT_FLAGS, self.all())
-        return ifilter(lambda k: k.flags & flag, self.all())
+            return (k for k in self.all() if k.flags is DEFAULT_FLAGS)
+        return (k for k in self.all() if k.flags & flag)
diff --git a/src/sentry/options/store.py b/src/sentry/options/store.py
index fe664c715b..19066de817 100644
--- a/src/sentry/options/store.py
+++ b/src/sentry/options/store.py
@@ -8,6 +8,8 @@ sentry.options.store
 from __future__ import absolute_import, print_function
 
 import logging
+import six
+
 from collections import namedtuple
 from time import time
 from random import random
@@ -15,7 +17,7 @@ from random import random
 from django.utils import timezone
 from django.utils.functional import cached_property
 from sentry.db.models.query import create_or_update
-from sentry.utils.hashlib import md5
+from sentry.utils.hashlib import md5_text
 
 
 Key = namedtuple('Key', ('name', 'default', 'type', 'flags', 'ttl', 'grace', 'cache_key'))
@@ -27,7 +29,7 @@ logger = logging.getLogger('sentry')
 
 
 def _make_cache_key(key):
-    return 'o:%s' % md5(key).hexdigest()
+    return 'o:%s' % md5_text(key).hexdigest()
 
 
 def _make_cache_value(key, value):
@@ -167,7 +169,7 @@ class OptionsStore(object):
             value = None
         except Exception as e:
             if not silent:
-                logger.exception(unicode(e))
+                logger.exception(six.text_type(e))
             value = None
         else:
             # we only attempt to populate the cache if we were previously
@@ -257,7 +259,7 @@ class OptionsStore(object):
         now = int(time())
 
         try:
-            for k, (_, _, grace) in self._local_cache.iteritems():
+            for k, (_, _, grace) in six.iteritems(self._local_cache):
                 if now > grace:
                     to_expire.append(k)
         except RuntimeError:
diff --git a/src/sentry/plugins/base/configuration.py b/src/sentry/plugins/base/configuration.py
index 77e8185391..3acff715c6 100644
--- a/src/sentry/plugins/base/configuration.py
+++ b/src/sentry/plugins/base/configuration.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import logging
+import six
 
 from sentry import options
 from sentry.models import ProjectOption
@@ -52,7 +53,7 @@ def default_plugin_config(plugin, project, request):
             if not test_results:
                 test_results = 'No errors returned'
         else:
-            for field, value in form.cleaned_data.iteritems():
+            for field, value in six.iteritems(form.cleaned_data):
                 key = '%s:%s' % (plugin_key, field)
                 if project:
                     ProjectOption.objects.set_value(project, key, value)
diff --git a/src/sentry/plugins/base/structs.py b/src/sentry/plugins/base/structs.py
index 96e60fff42..9b61cdab88 100644
--- a/src/sentry/plugins/base/structs.py
+++ b/src/sentry/plugins/base/structs.py
@@ -14,8 +14,6 @@ import warnings
 
 
 class Annotation(object):
-    __slots__ = ['label', 'url', 'description']
-
     def __init__(self, label, url=None, description=None):
         self.label = label
         self.url = url
@@ -23,8 +21,6 @@ class Annotation(object):
 
 
 class Notification(object):
-    __slots__ = ['event', 'rule', 'rules']
-
     def __init__(self, event, rule=None, rules=None):
         if rule and not rules:
             rules = [rule]
diff --git a/src/sentry/plugins/base/v1.py b/src/sentry/plugins/base/v1.py
index 7885dfe4b6..4785b13ed7 100644
--- a/src/sentry/plugins/base/v1.py
+++ b/src/sentry/plugins/base/v1.py
@@ -10,11 +10,11 @@ from __future__ import absolute_import, print_function
 __all__ = ('Plugin',)
 
 import logging
+import six
 
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from threading import local
-from hashlib import md5
 
 from sentry.auth import access
 from sentry.plugins.base.response import Response
@@ -22,6 +22,7 @@ from sentry.plugins.base.view import PluggableViewMixin
 from sentry.plugins.base.configuration import (
     default_plugin_config, default_plugin_options,
 )
+from sentry.utils.hashlib import md5_text
 
 
 class PluginMount(type):
@@ -207,8 +208,8 @@ class IPlugin(local, PluggableViewMixin):
         >>> plugin.get_conf_version(project)
         """
         options = self.get_conf_options(project)
-        return md5(
-            '&'.join(sorted('%s=%s' % o for o in options.iteritems()))
+        return md5_text(
+            '&'.join(sorted('%s=%s' % o for o in six.iteritems(options)))
         ).hexdigest()[:3]
 
     def get_conf_title(self):
@@ -475,6 +476,7 @@ class IPlugin(local, PluggableViewMixin):
         """Allows a plugin to return the import path to a URL module."""
 
 
+@six.add_metaclass(PluginMount)
 class Plugin(IPlugin):
     """
     A plugin should be treated as if it were a singleton. The owner does not
@@ -482,4 +484,3 @@ class Plugin(IPlugin):
     it will happen, or happen more than once.
     """
     __version__ = 1
-    __metaclass__ = PluginMount
diff --git a/src/sentry/plugins/base/v2.py b/src/sentry/plugins/base/v2.py
index 7b1e9e24f3..cb0906f8ef 100644
--- a/src/sentry/plugins/base/v2.py
+++ b/src/sentry/plugins/base/v2.py
@@ -10,15 +10,16 @@ from __future__ import absolute_import, print_function
 __all__ = ('Plugin2',)
 
 import logging
+import six
 
 from django.http import HttpResponseRedirect
 from threading import local
-from hashlib import md5
 
 from sentry.plugins.base.response import Response
 from sentry.plugins.base.configuration import (
     default_plugin_config, default_plugin_options,
 )
+from sentry.utils.hashlib import md5_text
 
 
 class PluginMount(type):
@@ -192,8 +193,8 @@ class IPlugin2(local):
         >>> plugin.get_conf_version(project)
         """
         options = self.get_conf_options(project)
-        return md5(
-            '&'.join(sorted('%s=%s' % o for o in options.iteritems()))
+        return md5_text(
+            '&'.join(sorted('%s=%s' % o for o in six.iteritems(options)))
         ).hexdigest()[:3]
 
     def get_conf_title(self):
@@ -397,6 +398,7 @@ class IPlugin2(local):
         """Allows a plugin to return the import path to a URL module."""
 
 
+@six.add_metaclass(PluginMount)
 class Plugin2(IPlugin2):
     """
     A plugin should be treated as if it were a singleton. The owner does not
@@ -404,4 +406,3 @@ class Plugin2(IPlugin2):
     it will happen, or happen more than once.
     """
     __version__ = 2
-    __metaclass__ = PluginMount
diff --git a/src/sentry/plugins/bases/issue.py b/src/sentry/plugins/bases/issue.py
index b38425d8c1..3627e7ca91 100644
--- a/src/sentry/plugins/bases/issue.py
+++ b/src/sentry/plugins/bases/issue.py
@@ -7,6 +7,8 @@ sentry.plugins.bases.issue
 """
 from __future__ import absolute_import
 
+import six
+
 from django import forms
 from django.conf import settings
 from django.utils.html import format_html
@@ -43,7 +45,7 @@ class IssueTrackingPlugin(Plugin):
 
     def _get_group_body(self, request, group, event, **kwargs):
         result = []
-        for interface in event.interfaces.itervalues():
+        for interface in six.itervalues(event.interfaces):
             output = safe_execute(interface.to_string, event, _with_transaction=False)
             if output:
                 result.append(output)
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 16a1405cec..d7829d59d1 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -8,6 +8,7 @@ sentry.plugins.bases.notify
 from __future__ import absolute_import, print_function
 
 import logging
+import six
 
 from django import forms
 
@@ -114,7 +115,7 @@ class NotificationPlugin(Plugin):
             )
         )
 
-        disabled = set(u for u, v in alert_settings.iteritems() if v == 0)
+        disabled = set(u for u, v in six.iteritems(alert_settings) if v == 0)
 
         member_set = set(project.member_set.exclude(
             user__in=disabled,
diff --git a/src/sentry/plugins/sentry_interface_types/models.py b/src/sentry/plugins/sentry_interface_types/models.py
index b1523d6e1e..36c8a0ce1d 100644
--- a/src/sentry/plugins/sentry_interface_types/models.py
+++ b/src/sentry/plugins/sentry_interface_types/models.py
@@ -7,6 +7,8 @@ sentry.plugins.sentry_interface_types.models
 """
 from __future__ import absolute_import
 
+import six
+
 import sentry
 
 from sentry.plugins import register
@@ -28,6 +30,6 @@ class InterfaceTypePlugin(TagPlugin):
     project_default_enabled = False
 
     def get_tag_values(self, event):
-        return [i.rsplit('.', 1)[-1] for i in event.interfaces.iterkeys()]
+        return [i.rsplit('.', 1)[-1] for i in six.iterkeys(event.interfaces)]
 
 register(InterfaceTypePlugin)
diff --git a/src/sentry/plugins/sentry_mail/activity/assigned.py b/src/sentry/plugins/sentry_mail/activity/assigned.py
index a83dbeec11..5ead13deb1 100644
--- a/src/sentry/plugins/sentry_mail/activity/assigned.py
+++ b/src/sentry/plugins/sentry_mail/activity/assigned.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.models import User
 
 from .base import ActivityEmail
@@ -12,7 +14,7 @@ class AssignedActivityEmail(ActivityEmail):
     def get_description(self):
         activity = self.activity
         data = activity.data
-        if activity.user_id and str(activity.user_id) == data['assignee']:
+        if activity.user_id and six.text_type(activity.user_id) == data['assignee']:
             return u'{author} assigned {an issue} to themselves'
 
         try:
diff --git a/src/sentry/plugins/sentry_mail/activity/regression.py b/src/sentry/plugins/sentry_mail/activity/regression.py
index 0f87ffe097..1a7ea53056 100644
--- a/src/sentry/plugins/sentry_mail/activity/regression.py
+++ b/src/sentry/plugins/sentry_mail/activity/regression.py
@@ -1,7 +1,6 @@
 from __future__ import absolute_import
 
-from django.utils.html import escape
-
+from sentry.utils.html import escape
 from sentry.utils.http import absolute_uri
 
 from .base import ActivityEmail
diff --git a/src/sentry/plugins/sentry_mail/activity/resolved_in_release.py b/src/sentry/plugins/sentry_mail/activity/resolved_in_release.py
index 1d532ed924..d5b58657fb 100644
--- a/src/sentry/plugins/sentry_mail/activity/resolved_in_release.py
+++ b/src/sentry/plugins/sentry_mail/activity/resolved_in_release.py
@@ -1,7 +1,6 @@
 from __future__ import absolute_import
 
-from django.utils.html import escape
-
+from sentry.utils.html import escape
 from sentry.utils.http import absolute_uri
 
 from .base import ActivityEmail
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 2473e89280..0cb5e9a8e2 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -9,6 +9,7 @@ from __future__ import absolute_import
 
 import itertools
 import logging
+import six
 
 import sentry
 
@@ -162,7 +163,7 @@ class MailPlugin(NotificationPlugin):
         # data which may show PII or source code
         if not enhanced_privacy:
             interface_list = []
-            for interface in event.interfaces.itervalues():
+            for interface in six.itervalues(event.interfaces):
                 body = interface.to_email_html(event)
                 if not body:
                     continue
@@ -206,10 +207,10 @@ class MailPlugin(NotificationPlugin):
         # notification template. If there is more than one record for a group,
         # just choose the most recent one.
         if len(counts) == 1:
-            group = counts.keys()[0]
+            group = six.next(iter(counts))
             record = max(
                 itertools.chain.from_iterable(
-                    groups.get(group, []) for groups in digest.itervalues(),
+                    groups.get(group, []) for groups in six.itervalues(digest),
                 ),
                 key=lambda record: record.timestamp,
             )
diff --git a/src/sentry/plugins/sentry_webhooks/plugin.py b/src/sentry/plugins/sentry_webhooks/plugin.py
index 09d4e8464a..b937bd63e6 100644
--- a/src/sentry/plugins/sentry_webhooks/plugin.py
+++ b/src/sentry/plugins/sentry_webhooks/plugin.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import logging
+import six
 import sentry
 
 from django.conf import settings
@@ -50,7 +51,7 @@ class WebHooksPlugin(notify.NotificationPlugin):
 
     def get_group_data(self, group, event):
         data = {
-            'id': str(group.id),
+            'id': six.text_type(group.id),
             'project': group.project.slug,
             'project_name': group.project.name,
             'logger': event.get_tag('logger'),
diff --git a/src/sentry/queue/routers.py b/src/sentry/queue/routers.py
index 354a25b80f..700c438f84 100644
--- a/src/sentry/queue/routers.py
+++ b/src/sentry/queue/routers.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import itertools
+import six
 
 from celery import current_app
 
@@ -33,7 +34,7 @@ class SplitQueueRouter(object):
 
     def route_for_task(self, task, *args, **kwargs):
         if task in COUNTER_TASKS:
-            return {'queue': self.counter_queues.next()}
+            return {'queue': six.next(self.counter_queues)}
         if task in TRIGGER_TASKS:
-            return {'queue': self.trigger_queues.next()}
+            return {'queue': six.next(self.trigger_queues)}
         return None
diff --git a/src/sentry/quotas/base.py b/src/sentry/quotas/base.py
index 6c9658b8ed..136257dc11 100644
--- a/src/sentry/quotas/base.py
+++ b/src/sentry/quotas/base.py
@@ -7,6 +7,8 @@ sentry.quotas.base
 """
 from __future__ import absolute_import
 
+import six
+
 from collections import namedtuple
 from functools import partial
 from django.conf import settings
@@ -42,7 +44,7 @@ class Quota(object):
         return 0
 
     def translate_quota(self, quota, parent_quota):
-        if str(quota).endswith('%'):
+        if six.text_type(quota).endswith('%'):
             pct = int(quota[:-1])
             quota = int(parent_quota) * pct / 100
         if not quota:
diff --git a/src/sentry/quotas/redis.py b/src/sentry/quotas/redis.py
index 8d67a5fccf..f6416552cb 100644
--- a/src/sentry/quotas/redis.py
+++ b/src/sentry/quotas/redis.py
@@ -7,6 +7,8 @@ sentry.quotas.redis
 """
 from __future__ import absolute_import
 
+import six
+
 from time import time
 
 from sentry.exceptions import InvalidConfiguration
@@ -32,7 +34,7 @@ class RedisQuota(Quota):
             with self.cluster.all() as client:
                 client.ping()
         except Exception as e:
-            raise InvalidConfiguration(unicode(e))
+            raise InvalidConfiguration(six.text_type(e))
 
     def get_quotas(self, project):
         return (
@@ -47,7 +49,8 @@ class RedisQuota(Quota):
         timestamp = time()
 
         quotas = filter(
-            lambda (key, limit, interval): limit and limit > 0,  # a zero limit means "no limit", not "reject all"
+            # x = (key, limit, interval)
+            lambda x: x[1] and x[1] > 0,  # a zero limit means "no limit", not "reject all"
             self.get_quotas(project),
         )
 
@@ -66,7 +69,7 @@ class RedisQuota(Quota):
             expiry = get_next_period_start(interval) + self.grace
             args.extend((limit, int(expiry)))
 
-        client = self.cluster.get_local_client_for_key(str(project.organization.pk))
+        client = self.cluster.get_local_client_for_key(six.text_type(project.organization.pk))
         rejections = is_rate_limited(client, keys, args)
         if any(rejections):
             delay = max(get_next_period_start(interval) - timestamp for (key, limit, interval), rejected in zip(quotas, rejections) if rejected)
diff --git a/src/sentry/ratelimits/redis.py b/src/sentry/ratelimits/redis.py
index 82ee724b6d..e7aaeea90e 100644
--- a/src/sentry/ratelimits/redis.py
+++ b/src/sentry/ratelimits/redis.py
@@ -1,10 +1,12 @@
 from __future__ import absolute_import
 
-from hashlib import md5
+import six
+
 from time import time
 
 from sentry.exceptions import InvalidConfiguration
 from sentry.ratelimits.base import RateLimiter
+from sentry.utils.hashlib import md5_text
 from sentry.utils.redis import get_cluster_from_options
 
 
@@ -19,13 +21,13 @@ class RedisRateLimiter(RateLimiter):
             with self.cluster.all() as client:
                 client.ping()
         except Exception as e:
-            raise InvalidConfiguration(unicode(e))
+            raise InvalidConfiguration(six.text_type(e))
 
     def is_limited(self, key, limit, project=None, window=None):
         if window is None:
             window = self.window
 
-        key_hex = md5(key).hexdigest()
+        key_hex = md5_text(key).hexdigest()
         bucket = int(time() / window)
 
         if project:
diff --git a/src/sentry/receivers/auth.py b/src/sentry/receivers/auth.py
index 5c7103909c..a6fc2113de 100644
--- a/src/sentry/receivers/auth.py
+++ b/src/sentry/receivers/auth.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import logging
+import six
 
 from django.contrib.auth.models import update_last_login
 from django.contrib.auth.signals import user_logged_in
@@ -31,7 +32,7 @@ def safe_update_last_login(sender, user, **kwargs):
     try:
         update_last_login(sender, user, **kwargs)
     except DatabaseError as exc:
-        logging.warn(unicode(exc), exc_info=True)
+        logging.warn(six.text_type(exc), exc_info=True)
 
 
 user_logged_in.disconnect(update_last_login)
diff --git a/src/sentry/receivers/stats.py b/src/sentry/receivers/stats.py
index 5ed871d0e1..a6aebd56d3 100644
--- a/src/sentry/receivers/stats.py
+++ b/src/sentry/receivers/stats.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from celery.signals import (
     task_failure,
     task_prerun,
@@ -30,7 +32,7 @@ def _get_task_name(task):
 
 def record_task_signal(signal, name, **options):
     def handler(sender, **kwargs):
-        if not isinstance(sender, basestring):
+        if not isinstance(sender, six.string_types):
             sender = _get_task_name(sender)
         metrics.incr('jobs.{0}'.format(name), instance=sender, **options)
         metrics.incr('jobs.all.{0}'.format(name))
diff --git a/src/sentry/roles/manager.py b/src/sentry/roles/manager.py
index 9b603d9742..e412a5cd6d 100644
--- a/src/sentry/roles/manager.py
+++ b/src/sentry/roles/manager.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from collections import OrderedDict
 
 
@@ -18,7 +20,7 @@ class Role(object):
         return self.name.encode('utf-8')
 
     def __unicode__(self):
-        return unicode(self.name)
+        return six.text_type(self.name)
 
     def __repr__(self):
         return '<Role: {}>'.format(self.id)
@@ -49,7 +51,7 @@ class RoleManager(object):
         self._top_dog = role_list[-1]
 
     def __iter__(self):
-        return self._roles.itervalues()
+        return six.itervalues(self._roles)
 
     def can_manage(self, role, other):
         return self.get(role).priority >= self.get(other).priority
diff --git a/src/sentry/rules/base.py b/src/sentry/rules/base.py
index 88d4486434..6053711100 100644
--- a/src/sentry/rules/base.py
+++ b/src/sentry/rules/base.py
@@ -39,11 +39,13 @@ from __future__ import absolute_import
 
 import logging
 import re
+import six
 
 from collections import namedtuple
-from django.utils.html import escape
 from django.utils.safestring import mark_safe
 
+from sentry.utils.html import escape
+
 
 CallbackFuture = namedtuple('CallbackFuture', ['callback', 'kwargs'])
 
@@ -55,14 +57,13 @@ class RuleDescriptor(type):
         return new_cls
 
 
+@six.add_metaclass(RuleDescriptor)
 class RuleBase(object):
     label = None
     form_cls = None
 
     logger = logging.getLogger('sentry.rules')
 
-    __metaclass__ = RuleDescriptor
-
     def __init__(self, project, data=None, rule=None):
         self.project = project
         self.data = data or {}
@@ -90,7 +91,7 @@ class RuleBase(object):
 
         def replace_field(match):
             field = match.group(1)
-            return unicode(form[field])
+            return six.text_type(form[field])
 
         return mark_safe(re.sub(r'{([^}]+)}', replace_field, escape(self.label)))
 
diff --git a/src/sentry/rules/processor.py b/src/sentry/rules/processor.py
index c62797f4a7..e9ba7dfc16 100644
--- a/src/sentry/rules/processor.py
+++ b/src/sentry/rules/processor.py
@@ -161,4 +161,4 @@ class RuleProcessor(object):
         self.futures_by_cb = defaultdict(list)
         for rule in self.get_rules():
             self.apply_rule(rule)
-        return self.futures_by_cb.items()
+        return list(self.futures_by_cb.items())
diff --git a/src/sentry/rules/registry.py b/src/sentry/rules/registry.py
index d6f2ab5990..296f375397 100644
--- a/src/sentry/rules/registry.py
+++ b/src/sentry/rules/registry.py
@@ -8,6 +8,8 @@ sentry.rules.registry
 
 from __future__ import absolute_import
 
+import six
+
 from collections import defaultdict
 
 
@@ -20,7 +22,7 @@ class RuleRegistry(object):
         return rule_id in self._map
 
     def __iter__(self):
-        for rule_type, rule_list in self._rules.iteritems():
+        for rule_type, rule_list in six.iteritems(self._rules):
             for rule in rule_list:
                 yield rule_type, rule
 
diff --git a/src/sentry/runner/commands/__init__.py b/src/sentry/runner/commands/__init__.py
index c83772c0c9..c3961685ab 100644
--- a/src/sentry/runner/commands/__init__.py
+++ b/src/sentry/runner/commands/__init__.py
@@ -1,7 +1 @@
-"""
-sentry.runner.commands
-~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
+from __future__ import absolute_import
diff --git a/src/sentry/runner/commands/config.py b/src/sentry/runner/commands/config.py
index a4b110eec3..49281eda87 100644
--- a/src/sentry/runner/commands/config.py
+++ b/src/sentry/runner/commands/config.py
@@ -8,6 +8,8 @@ sentry.runner.commands.config
 from __future__ import absolute_import, print_function
 
 import click
+import six
+
 from sentry.runner.decorators import configuration
 
 
@@ -66,7 +68,7 @@ def set(option, value):
     except UnknownOption:
         raise click.ClickException('unknown option: %s' % option)
     except TypeError as e:
-        raise click.ClickException(unicode(e))
+        raise click.ClickException(six.text_type(e))
 
 
 @config.command()
diff --git a/src/sentry/runner/commands/devserver.py b/src/sentry/runner/commands/devserver.py
index 1c3209001d..57c1bfa74d 100644
--- a/src/sentry/runner/commands/devserver.py
+++ b/src/sentry/runner/commands/devserver.py
@@ -8,6 +8,8 @@ sentry.runner.commands.devserver
 from __future__ import absolute_import, print_function
 
 import click
+import six
+
 from sentry.runner.decorators import configuration, log_options
 
 
@@ -77,9 +79,9 @@ def devserver(reload, watchers, workers, bind):
         ]
 
     if needs_https and has_https:
-        from urlparse import urlparse
+        from six.moves.urllib.parse import urlparse
         parsed_url = urlparse(url_prefix)
-        https_port = str(parsed_url.port or 443)
+        https_port = six.text_type(parsed_url.port or 443)
         https_host = parsed_url.hostname
 
         # Determine a random port for the backend http server
diff --git a/src/sentry/runner/commands/dsym.py b/src/sentry/runner/commands/dsym.py
index c8e303b06d..e3530b0dcc 100644
--- a/src/sentry/runner/commands/dsym.py
+++ b/src/sentry/runner/commands/dsym.py
@@ -10,6 +10,7 @@ from __future__ import absolute_import
 import uuid
 import json
 import click
+import six
 import warnings
 import threading
 
@@ -46,7 +47,7 @@ def load_bundle(q, uuid, data, sdk_info, trim_symbols, demangle):
     obj = DSymObject.objects.get_or_create(
         cpu_name=data['arch'],
         object_path='/' + data['image'].strip('/'),
-        uuid=str(uuid),
+        uuid=six.text_type(uuid),
         vmaddr=data['vmaddr'],
         vmsize=data['vmsize'],
     )[0]
@@ -58,10 +59,10 @@ def load_bundle(q, uuid, data, sdk_info, trim_symbols, demangle):
 
     step = 4000
     symbols = data['symbols']
-    for idx in xrange(0, len(symbols) + step, step):
+    for idx in range(0, len(symbols) + step, step):
         end_idx = min(idx + step, len(symbols))
         batch = []
-        for x in xrange(idx, end_idx):
+        for x in range(idx, end_idx):
             addr = symbols[x][0]
             batch.append((obj.id, addr, _process_symbol(symbols[x][1])))
         if batch:
@@ -82,7 +83,7 @@ def process_archive(members, zip, sdk_info, threads=8, trim_symbols=False,
             DSymSymbol.objects.bulk_insert(items)
 
     pool = []
-    for x in xrange(threads):
+    for x in range(threads):
         t = threading.Thread(target=process_items)
         t.setDaemon(True)
         t.start()
diff --git a/src/sentry/runner/commands/exec.py b/src/sentry/runner/commands/exec.py
index 67d798f249..1f9bbb209c 100644
--- a/src/sentry/runner/commands/exec.py
+++ b/src/sentry/runner/commands/exec.py
@@ -7,6 +7,7 @@ sentry.runner.commands.exec
 """
 from __future__ import absolute_import, print_function
 
+import six
 import sys
 import click
 
@@ -71,7 +72,7 @@ def exec_(c, file):
                 with open(file, 'rb') as fp:
                     c = fp.read().decode('utf8')
             except (IOError, OSError) as e:
-                raise click.ClickException(unicode(e))
+                raise click.ClickException(six.text_type(e))
     else:
         file = '<string>'
 
@@ -91,4 +92,4 @@ def exec_(c, file):
     }
     # locals context
     l = {}
-    exec compile(script, file, 'exec') in g, l
+    six.exec_(compile(script, file, 'exec'), g, l)
diff --git a/src/sentry/runner/commands/plugins.py b/src/sentry/runner/commands/plugins.py
index d445053bb5..1ba80ac197 100644
--- a/src/sentry/runner/commands/plugins.py
+++ b/src/sentry/runner/commands/plugins.py
@@ -8,6 +8,7 @@ sentry.runner.commands.plugins
 from __future__ import absolute_import, print_function
 
 import click
+import six
 
 
 @click.group()
@@ -20,4 +21,4 @@ def list():
     "List all installed plugins"
     from pkg_resources import iter_entry_points
     for ep in iter_entry_points('sentry.plugins'):
-        click.echo(unicode(ep.dist))
+        click.echo(six.text_type(ep.dist))
diff --git a/src/sentry/runner/commands/repair.py b/src/sentry/runner/commands/repair.py
index cca7922aac..6e748b12ff 100644
--- a/src/sentry/runner/commands/repair.py
+++ b/src/sentry/runner/commands/repair.py
@@ -9,8 +9,9 @@ from __future__ import absolute_import, print_function
 
 import os
 import click
-from contextlib import contextmanager
+import six
 
+from contextlib import contextmanager
 from django.db import transaction
 
 from sentry.runner.decorators import configuration
@@ -43,7 +44,7 @@ def get_callsigns(projects):
             rv[callsign] = project.id
             break
 
-    return dict((v, k) for k, v in rv.iteritems())
+    return dict((v, k) for k, v in six.iteritems(rv))
 
 
 def sync_docs():
diff --git a/src/sentry/runner/commands/tsdb.py b/src/sentry/runner/commands/tsdb.py
index ac0436bb25..fafc0a60b5 100644
--- a/src/sentry/runner/commands/tsdb.py
+++ b/src/sentry/runner/commands/tsdb.py
@@ -1,10 +1,11 @@
 from __future__ import absolute_import
 
-from collections import OrderedDict
-from datetime import datetime, timedelta
-
 import click
 import pytz
+import six
+
+from collections import OrderedDict
+from datetime import datetime, timedelta
 from dateutil.parser import parse
 
 from sentry.runner.decorators import configuration
@@ -105,7 +106,7 @@ def organizations(metrics, since, until):
         for metric in metrics.values():
             results[metric] = tsdb.get_range(metric, instances.keys(), since, until)
 
-        for key, instance in instances.iteritems():
+        for key, instance in six.iteritems(instances):
             values = []
             for metric in metrics.values():
                 values.append(aggregate(results[metric][key]))
diff --git a/src/sentry/runner/importer.py b/src/sentry/runner/importer.py
index 2afeaa81bc..5ea6b6cd19 100644
--- a/src/sentry/runner/importer.py
+++ b/src/sentry/runner/importer.py
@@ -8,6 +8,7 @@ sentry.runner.importer
 from __future__ import absolute_import, print_function
 
 import imp
+import six
 import sys
 
 
@@ -43,7 +44,7 @@ class Importer(object):
             mod = self._load_module(fullname)
         except Exception as e:
             from sentry.utils.settings import reraise_as
-            msg = unicode(e)
+            msg = six.text_type(e)
             if msg:
                 msg = '%s: %s' % (type(e).__name__, msg)
             else:
@@ -78,11 +79,13 @@ class Importer(object):
 
 
 def load_settings(mod_or_filename, settings, silent=False):
-    if isinstance(mod_or_filename, basestring):
+    if isinstance(mod_or_filename, six.string_types):
         conf = imp.new_module('temp_config')
         conf.__file__ = mod_or_filename
+
         try:
-            execfile(mod_or_filename, conf.__dict__)
+            with open(mod_or_filename) as source_file:
+                six.exec_(source_file.read(), conf.__dict__)
         except IOError as e:
             import errno
             if silent and e.errno in (errno.ENOENT, errno.EISDIR):
@@ -107,7 +110,7 @@ def add_settings(mod, settings):
             continue
 
         setting_value = getattr(mod, setting)
-        if setting in ('INSTALLED_APPS', 'TEMPLATE_DIRS') and isinstance(setting_value, basestring):
+        if setting in ('INSTALLED_APPS', 'TEMPLATE_DIRS') and isinstance(setting_value, six.string_types):
             setting_value = (setting_value,)  # In case the user forgot the comma.
 
         # Any setting that starts with EXTRA_ and matches a setting that is a list or tuple
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index e18e4c9f86..54347ad954 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -7,9 +7,9 @@ sentry.runner.initializer
 """
 from __future__ import absolute_import, print_function
 
-import os
-
 import click
+import os
+import six
 
 from sentry.utils import warnings
 from sentry.utils.warnings import DeprecatedSettingWarning
@@ -106,7 +106,7 @@ def bootstrap_options(settings, config=None):
             pass
         except (AttributeError, ParserError, ScannerError) as e:
             from .importer import ConfigurationError
-            raise ConfigurationError('Malformed config.yml file: %s' % unicode(e))
+            raise ConfigurationError('Malformed config.yml file: %s' % six.text_type(e))
 
         # Empty options file, so fail gracefully
         if options is None:
@@ -119,7 +119,7 @@ def bootstrap_options(settings, config=None):
     from sentry.conf.server import DEAD
 
     # First move options from settings into options
-    for k, v in options_mapper.iteritems():
+    for k, v in six.iteritems(options_mapper):
         if getattr(settings, v, DEAD) is not DEAD and k not in options:
             warnings.warn(
                 DeprecatedSettingWarning(
@@ -131,14 +131,14 @@ def bootstrap_options(settings, config=None):
 
     # Stuff everything else into SENTRY_OPTIONS
     # these will be validated later after bootstrapping
-    for k, v in options.iteritems():
+    for k, v in six.iteritems(options):
         settings.SENTRY_OPTIONS[k] = v
 
     # Now go back through all of SENTRY_OPTIONS and promote
     # back into settings. This catches the case when values are defined
     # only in SENTRY_OPTIONS and no config.yml file
     for o in (settings.SENTRY_DEFAULT_OPTIONS, settings.SENTRY_OPTIONS):
-        for k, v in o.iteritems():
+        for k, v in six.iteritems(o):
             if k in options_mapper:
                 # Map the mail.backend aliases to something Django understands
                 if k == 'mail.backend':
@@ -293,7 +293,7 @@ def fix_south(settings):
     settings.SOUTH_DATABASE_ADAPTERS = {}
 
     # South needs an adapter defined conditionally
-    for key, value in settings.DATABASES.iteritems():
+    for key, value in six.iteritems(settings.DATABASES):
         if value['ENGINE'] != 'sentry.db.postgres':
             continue
         settings.SOUTH_DATABASE_ADAPTERS[key] = 'south.db.postgresql_psycopg2'
@@ -314,7 +314,7 @@ def bind_cache_to_option_store():
 
 
 def show_big_error(message):
-    if isinstance(message, basestring):
+    if isinstance(message, six.string_types):
         lines = message.splitlines()
     else:
         lines = message
diff --git a/src/sentry/search/django/backend.py b/src/sentry/search/django/backend.py
index 13b04a92fe..6bfbcfbe64 100644
--- a/src/sentry/search/django/backend.py
+++ b/src/sentry/search/django/backend.py
@@ -8,6 +8,8 @@ sentry.search.django.backend
 
 from __future__ import absolute_import
 
+import six
+
 from django.db import router
 from django.db.models import Q
 
@@ -28,7 +30,7 @@ class DjangoSearchBackend(SearchBackend):
 
         # ANY matches should come last since they're the least specific and
         # will provide the largest range of matches
-        tag_lookups = sorted(tags.iteritems(), key=lambda x: x != ANY)
+        tag_lookups = sorted(six.iteritems(tags), key=lambda x: x != ANY)
 
         # get initial matches to start the filter
         matches = None
diff --git a/src/sentry/search/utils.py b/src/sentry/search/utils.py
index 8d7e6f1022..90bcfb89ce 100644
--- a/src/sentry/search/utils.py
+++ b/src/sentry/search/utils.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import, division, print_function
 
+import six
+
 from collections import defaultdict
 from datetime import datetime, timedelta
 from django.db.models import Q
@@ -166,7 +168,7 @@ def tokenize_query(query):
             nvalue = value
             while not nvalue.endswith('"'):
                 try:
-                    nvalue = tokens_iter.next()
+                    nvalue = six.next(tokens_iter)
                 except StopIteration:
                     break
                 value = '%s %s' % (value, nvalue)
@@ -185,7 +187,7 @@ def parse_query(project, query, user):
 
     results = {'tags': {}, 'query': []}
 
-    for key, token_list in tokens.iteritems():
+    for key, token_list in six.iteritems(tokens):
         for value in token_list:
             if key == 'query':
                 results['query'].append(value)
diff --git a/src/sentry/services/http.py b/src/sentry/services/http.py
index 3197fefbeb..273527fd5a 100644
--- a/src/sentry/services/http.py
+++ b/src/sentry/services/http.py
@@ -8,23 +8,25 @@ sentry.services.http
 from __future__ import absolute_import, print_function
 
 import os
+import six
 import sys
+
 from sentry.services.base import Service
 
 
 def convert_options_to_env(options):
-    for k, v in options.iteritems():
+    for k, v in six.iteritems(options):
         if v is None:
             continue
         key = 'UWSGI_' + k.upper().replace('-', '_')
-        if isinstance(v, basestring):
+        if isinstance(v, six.string_types):
             value = v
         elif v is True:
             value = 'true'
         elif v is False:
             value = 'false'
-        elif isinstance(v, (int, long)):
-            value = str(v)
+        elif isinstance(v, six.integer_types):
+            value = six.text_type(v)
         else:
             raise TypeError('Unknown option type: %r (%s)' % (k, type(v)))
         yield key, value
@@ -47,7 +49,7 @@ class SentryHTTPServer(Service):
 
         options = (settings.SENTRY_WEB_OPTIONS or {}).copy()
         if extra_options is not None:
-            for k, v in extra_options.iteritems():
+            for k, v in six.iteritems(extra_options):
                 options[k] = v
         options.setdefault('module', 'sentry.wsgi:application')
         options.setdefault('protocol', 'http')
diff --git a/src/sentry/social_auth/__init__.py b/src/sentry/social_auth/__init__.py
index e69de29bb2..c3961685ab 100644
--- a/src/sentry/social_auth/__init__.py
+++ b/src/sentry/social_auth/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/sentry/south_migrations/0047_migrate_project_slugs.py b/src/sentry/south_migrations/0047_migrate_project_slugs.py
index 8666188923..a52d6dbb39 100644
--- a/src/sentry/south_migrations/0047_migrate_project_slugs.py
+++ b/src/sentry/south_migrations/0047_migrate_project_slugs.py
@@ -1,5 +1,7 @@
 # encoding: utf-8
 import datetime
+import six
+
 from south.db import db
 from south.v2 import DataMigration
 from django.db import models
@@ -20,7 +22,7 @@ class Migration(DataMigration):
             n = 0
             while orm['sentry.Project'].objects.filter(slug=slug).exists():
                 n += 1
-                slug = base_slug + '-' + str(n)
+                slug = base_slug + '-' + six.text_type(n)
 
             update(project, slug=slug)
 
diff --git a/src/sentry/south_migrations/0083_migrate_dupe_groups.py b/src/sentry/south_migrations/0083_migrate_dupe_groups.py
index d9a40c81e8..58e8fcc6d5 100644
--- a/src/sentry/south_migrations/0083_migrate_dupe_groups.py
+++ b/src/sentry/south_migrations/0083_migrate_dupe_groups.py
@@ -1,6 +1,8 @@
 # -*- coding: utf-8 -*-
 from __future__ import print_function
 
+import six
+
 from south.v2 import DataMigration
 
 
@@ -70,7 +72,7 @@ class Migration(DataMigration):
                     key['time_spent_count'] += count.time_spent_count
 
             # migrate tags
-            for (key, value), data in tag_updates.iteritems():
+            for (key, value), data in six.iteritems(tag_updates):
                 defaults = {
                     'times_seen': F('times_seen') + data['times_seen'],
                 }
@@ -90,7 +92,7 @@ class Migration(DataMigration):
             orm['sentry.MessageFilterValue'].objects.filter(group__in=matches).delete()
 
             # migrate counts
-            for date, data in counts.iteritems():
+            for date, data in six.iteritems(counts):
                 create_or_update(orm['sentry.MessageCountByMinute'],
                     project=group.project,
                     group=group,
diff --git a/src/sentry/south_migrations/0138_migrate_team_members.py b/src/sentry/south_migrations/0138_migrate_team_members.py
index e01320f91b..7ebd696656 100644
--- a/src/sentry/south_migrations/0138_migrate_team_members.py
+++ b/src/sentry/south_migrations/0138_migrate_team_members.py
@@ -1,5 +1,7 @@
 # -*- coding: utf-8 -*-
 import datetime
+import six
+
 from collections import defaultdict
 from south.db import db
 from south.v2 import DataMigration
@@ -25,7 +27,7 @@ class Migration(DataMigration):
             for team in Team.objects.filter(organization=org):
                 teams_by_org[org].append(team)
 
-        for org, team_list in WithProgressBar(teams_by_org.items(), caption='Organizations'):
+        for org, team_list in WithProgressBar(list(teams_by_org.items()), caption='Organizations'):
             team_member_qs = TeamMember.objects.filter(
                 team__organization=org
             ).select_related('team')
@@ -38,7 +40,7 @@ class Migration(DataMigration):
 
             total_teams = len(team_list)
 
-            for user_id, member_list in members_by_user.iteritems():
+            for user_id, member_list in six.iteritems(members_by_user):
                 # if they were a member of all teams, give them global access
                 has_global_access = len(member_list) == total_teams
 
diff --git a/src/sentry/south_migrations/0213_migrate_file_blobs.py b/src/sentry/south_migrations/0213_migrate_file_blobs.py
index 13edf55eb8..a4636f801f 100644
--- a/src/sentry/south_migrations/0213_migrate_file_blobs.py
+++ b/src/sentry/south_migrations/0213_migrate_file_blobs.py
@@ -1,4 +1,6 @@
 # -*- coding: utf-8 -*-
+import six
+
 from collections import defaultdict
 
 from django.db import models
@@ -56,7 +58,7 @@ class Migration(DataMigration):
         saved = 0
         count = 0
         total = 0
-        for blob, path_set in blob_paths.iteritems():
+        for blob, path_set in six.iteritems(blob_paths):
             total += (blob.size or 0) * len(path_set)
             if len(path_set) == 1:
                 continue
diff --git a/src/sentry/status_checks/base.py b/src/sentry/status_checks/base.py
index fc0afef1d1..ecd5360944 100644
--- a/src/sentry/status_checks/base.py
+++ b/src/sentry/status_checks/base.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 
 class Problem(object):
 
@@ -23,7 +25,7 @@ class Problem(object):
 
     def __init__(self, message, severity=SEVERITY_CRITICAL, url=None):
         assert severity in self.SEVERITY_LEVELS
-        self.message = unicode(message)
+        self.message = six.text_type(message)
         self.severity = severity
         self.url = url
 
@@ -31,7 +33,7 @@ class Problem(object):
         if not isinstance(other, Problem):
             return NotImplemented
 
-        return cmp(
+        return six.cmp(
             self.SEVERITY_LEVELS[self.severity],
             self.SEVERITY_LEVELS[other.severity],
         )
diff --git a/src/sentry/status_checks/warnings.py b/src/sentry/status_checks/warnings.py
index ee914295ca..7a2702d7e0 100644
--- a/src/sentry/status_checks/warnings.py
+++ b/src/sentry/status_checks/warnings.py
@@ -1,3 +1,5 @@
+from __future__ import absolute_import
+
 from django.core.urlresolvers import reverse
 
 from sentry.utils.http import absolute_uri
diff --git a/src/sentry/tasks/auto_resolve_issues.py b/src/sentry/tasks/auto_resolve_issues.py
index 4a5ac772d2..7d0610ab4e 100644
--- a/src/sentry/tasks/auto_resolve_issues.py
+++ b/src/sentry/tasks/auto_resolve_issues.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import, print_function
 
+import six
+
 from collections import defaultdict
 from datetime import datetime, timedelta
 from django.utils import timezone
@@ -25,7 +27,7 @@ def schedule_auto_resolution():
         opts_by_project[opt.project_id][opt.key] = opt.value
 
     cutoff = time() - ONE_HOUR
-    for project_id, options in opts_by_project.iteritems():
+    for project_id, options in six.iteritems(opts_by_project):
         if not options.get('sentry:resolve_age'):
             # kill the option to avoid it coming up in the future
             ProjectOption.objects.filter(
diff --git a/src/sentry/tasks/beacon.py b/src/sentry/tasks/beacon.py
index 8a4ec18f3e..7bc9f1ec03 100644
--- a/src/sentry/tasks/beacon.py
+++ b/src/sentry/tasks/beacon.py
@@ -45,7 +45,7 @@ def send_beacon():
     install_id = options.get('sentry:install-id')
     if not install_id:
         logger.info('Generated installation ID: %s', install_id)
-        install_id = sha1(uuid4().hex).hexdigest()
+        install_id = sha1(uuid4().bytes).hexdigest()
         options.set('sentry:install-id', install_id)
 
     end = timezone.now()
diff --git a/src/sentry/tasks/check_auth.py b/src/sentry/tasks/check_auth.py
index 643ab455db..8fed73a0fd 100644
--- a/src/sentry/tasks/check_auth.py
+++ b/src/sentry/tasks/check_auth.py
@@ -9,6 +9,7 @@ sentry.tasks.check_alerts
 from __future__ import absolute_import, division
 
 import logging
+import six
 
 from datetime import timedelta
 from django.utils import timezone
@@ -82,7 +83,7 @@ def check_auth_identity(auth_identity_id, **kwargs):
             logger.warning(
                 u'AuthIdentity(id=%s) notified as not valid: %s',
                 auth_identity_id,
-                unicode(exc),
+                six.text_type(exc),
                 exc_info=True,
             )
             metrics.incr('auth.identities.invalidated')
@@ -95,7 +96,7 @@ def check_auth_identity(auth_identity_id, **kwargs):
         logger.exception(
             u'AuthIdentity(id=%s) returned an error during validation: %s',
             auth_identity_id,
-            unicode(exc),
+            six.text_type(exc),
         )
         is_linked = True
         is_valid = False
diff --git a/src/sentry/tasks/options.py b/src/sentry/tasks/options.py
index ee054302ca..7b16c23eb4 100644
--- a/src/sentry/tasks/options.py
+++ b/src/sentry/tasks/options.py
@@ -8,6 +8,8 @@ sentry.tasks.options
 from __future__ import absolute_import
 
 import logging
+import six
+
 from datetime import timedelta
 from django.utils import timezone
 
@@ -36,4 +38,4 @@ def sync_options(cutoff=ONE_HOUR):
             opt = default_manager.lookup_key(option.key)
             default_manager.store.set_cache(opt, option.value)
         except UnknownOption as e:
-            logger.exception(unicode(e))
+            logger.exception(six.text_type(e))
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index fa8a8a7101..a27843529b 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -9,6 +9,7 @@ sentry.tasks.post_process
 from __future__ import absolute_import, print_function
 
 import logging
+import six
 
 from django.db import IntegrityError, router, transaction
 from raven.contrib.django.models import client as Raven
@@ -36,7 +37,7 @@ def _capture_stats(event, is_new):
     metrics.incr('events.processed')
     metrics.incr('events.processed.{platform}'.format(
         platform=platform))
-    metrics.timing('events.size.data', len(unicode(event.data)))
+    metrics.timing('events.size.data', len(six.text_type(event.data)))
 
 
 @instrumented_task(
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index d1e8b206fc..0cd918dcac 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -5,8 +5,6 @@ sentry.templatetags.sentry_helpers
 :copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-# XXX: Import django-paging's template tags so we don't have to worry about
-#      INSTALLED_APPS
 from __future__ import absolute_import
 
 import functools
@@ -14,12 +12,11 @@ import os.path
 import pytz
 import six
 
-
 from collections import namedtuple
 from datetime import timedelta
 from pkg_resources import parse_version as Version
 from six.moves import range
-from urllib import quote, urlencode
+from six.moves.urllib.parse import quote, urlencode
 
 from django import template
 from django.conf import settings
@@ -126,7 +123,7 @@ def small_count(v):
     for x, y in z:
         o, p = divmod(v, x)
         if o:
-            if len(str(o)) > 2 or not p:
+            if len(six.text_type(o)) > 2 or not p:
                 return '%d%s' % (o, y)
             return '%.1f%s' % (v / float(x), y)
     return v
@@ -134,12 +131,12 @@ def small_count(v):
 
 @register.filter
 def num_digits(value):
-    return len(str(value))
+    return len(six.text_type(value))
 
 
 @register.filter
 def to_str(data):
-    return str(data)
+    return six.text_type(data)
 
 
 @register.filter
@@ -302,7 +299,7 @@ def with_metadata(group_list, request):
     for g in group_list:
         yield g, {
             'is_bookmarked': g.pk in bookmarks,
-            'historical_data': ','.join(str(x[1]) for x in historical_data.get(g.id, [])),
+            'historical_data': ','.join(six.text_type(x[1]) for x in historical_data.get(g.id, [])),
         }
 
 
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 123982398d..5825e3ecfb 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -18,7 +18,7 @@ import base64
 import os
 import os.path
 import pytest
-import urllib
+import six
 
 from click.testing import CliRunner
 from contextlib import contextmanager
@@ -31,6 +31,7 @@ from django.test import TestCase, TransactionTestCase
 from django.utils.importlib import import_module
 from exam import before, fixture, Exam
 from rest_framework.test import APITestCase as BaseAPITestCase
+from six.moves.urllib.parse import urlencode
 
 from sentry import auth
 from sentry.auth.providers.dummy import DummyProvider
@@ -134,7 +135,7 @@ class BaseTestCase(Fixtures, Exam):
         return json.dumps(data)
 
     def _makePostMessage(self, data):
-        return base64.b64encode(self._makeMessage(data))
+        return base64.b64encode(self._makeMessage(data).encode('utf-8'))
 
     def _postWithHeader(self, data, key=None, secret=None, protocol=None):
         if key is None:
@@ -158,7 +159,7 @@ class BaseTestCase(Fixtures, Exam):
     def _postCspWithHeader(self, data, key=None, **extra):
         if isinstance(data, dict):
             body = json.dumps({'csp-report': data})
-        elif isinstance(data, basestring):
+        elif isinstance(data, six.string_types):
             body = data
         path = reverse('sentry-api-csp-report', kwargs={'project_id': self.project.id})
         path += '?sentry_key=%s' % self.projectkey.public_key
@@ -187,7 +188,7 @@ class BaseTestCase(Fixtures, Exam):
         }
         with self.tasks():
             resp = self.client.get(
-                '%s?%s' % (reverse('sentry-api-store', args=(self.project.pk,)), urllib.urlencode(qs)),
+                '%s?%s' % (reverse('sentry-api-store', args=(self.project.pk,)), urlencode(qs)),
                 **headers
             )
         return resp
@@ -208,7 +209,7 @@ class BaseTestCase(Fixtures, Exam):
         }
         with self.tasks():
             resp = self.client.post(
-                '%s?%s' % (reverse('sentry-api-store', args=(self.project.pk,)), urllib.urlencode(qs)),
+                '%s?%s' % (reverse('sentry-api-store', args=(self.project.pk,)), urlencode(qs)),
                 data=message,
                 content_type='application/json',
                 **headers
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 974ae4231e..e6bb9be052 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -232,7 +232,7 @@ class Fixtures(object):
         if kwargs.get('tags'):
             tags = kwargs.pop('tags')
             if isinstance(tags, dict):
-                tags = tags.items()
+                tags = list(tags.items())
             kwargs['data']['tags'] = tags
 
         kwargs['data'].setdefault('errors', [{
diff --git a/src/sentry/tsdb/base.py b/src/sentry/tsdb/base.py
index 93a69b3c6f..7db54b03fb 100644
--- a/src/sentry/tsdb/base.py
+++ b/src/sentry/tsdb/base.py
@@ -7,6 +7,8 @@ sentry.tsdb.base
 """
 from __future__ import absolute_import
 
+import six
+
 from django.conf import settings
 from django.utils import timezone
 from enum import Enum
@@ -188,7 +190,7 @@ class BaseTSDB(object):
         range_set = self.get_range(model, keys, start, end, rollup)
         sum_set = dict(
             (key, sum(p for _, p in points))
-            for (key, points) in range_set.iteritems()
+            for (key, points) in six.iteritems(range_set)
         )
         return sum_set
 
@@ -199,7 +201,7 @@ class BaseTSDB(object):
         """
         normalize_ts_to_epoch = self.normalize_ts_to_epoch
         result = {}
-        for key, points in values.iteritems():
+        for key, points in six.iteritems(values):
             result[key] = []
             last_new_ts = None
             for (ts, count) in points:
diff --git a/src/sentry/tsdb/inmemory.py b/src/sentry/tsdb/inmemory.py
index 2e0160a3d9..a8eac563c3 100644
--- a/src/sentry/tsdb/inmemory.py
+++ b/src/sentry/tsdb/inmemory.py
@@ -7,9 +7,10 @@ sentry.tsdb.inmemory
 """
 from __future__ import absolute_import
 
+import six
+
 from collections import Counter, defaultdict
 from datetime import timedelta
-
 from django.utils import timezone
 
 from sentry.tsdb.base import BaseTSDB
@@ -56,7 +57,7 @@ class InMemoryTSDB(BaseTSDB):
         for epoch, key, count in results:
             results_by_key[key][epoch] = int(count or 0)
 
-        for key, points in results_by_key.iteritems():
+        for key, points in six.iteritems(results_by_key):
             results_by_key[key] = sorted(points.items())
         return dict(results_by_key)
 
@@ -174,7 +175,7 @@ class InMemoryTSDB(BaseTSDB):
     def get_frequency_totals(self, model, items, start, end=None, rollup=None):
         results = {}
 
-        for key, series in self.get_frequency_series(model, items, start, end, rollup).iteritems():
+        for key, series in six.iteritems(self.get_frequency_series(model, items, start, end, rollup)):
             result = results[key] = {}
             for timestamp, scores in series:
                 for member, score in scores.items():
diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index 10c253aaae..1dace0927a 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -11,16 +11,17 @@ import itertools
 import logging
 import operator
 import random
+import six
 import uuid
+
 from binascii import crc32
 from collections import defaultdict, namedtuple
 from datetime import timedelta
-from hashlib import md5
-
-import six
 from django.utils import timezone
+from hashlib import md5
 from pkg_resources import resource_string
 from redis.client import Script
+from six.moves import reduce
 
 from sentry.tsdb.base import BaseTSDB
 from sentry.utils.dates import to_timestamp
@@ -141,7 +142,7 @@ class RedisTSDB(BaseTSDB):
         # efficient hashed format.
         if not isinstance(key, six.integer_types):
             # enforce utf-8 encoding
-            if isinstance(key, unicode):
+            if isinstance(key, six.text_type):
                 key = key.encode('utf-8')
             return md5(repr(key)).hexdigest()
         return key
@@ -209,7 +210,7 @@ class RedisTSDB(BaseTSDB):
         for epoch, key, count in results:
             results_by_key[key][epoch] = int(count.value or 0)
 
-        for key, points in results_by_key.iteritems():
+        for key, points in six.iteritems(results_by_key):
             results_by_key[key] = sorted(points.items())
         return dict(results_by_key)
 
@@ -269,7 +270,7 @@ class RedisTSDB(BaseTSDB):
                         ),
                     ))
 
-        return {key: [(timestamp, promise.value) for timestamp, promise in value] for key, value in responses.iteritems()}
+        return {key: [(timestamp, promise.value) for timestamp, promise in value] for key, value in six.iteritems(responses)}
 
     def get_distinct_counts_totals(self, model, keys, start, end=None, rollup=None):
         """
@@ -292,7 +293,7 @@ class RedisTSDB(BaseTSDB):
 
                 responses[key] = client.target_key(key).execute_command('PFCOUNT', *ks)
 
-        return {key: value.value for key, value in responses.iteritems()}
+        return {key: value.value for key, value in six.iteritems(responses)}
 
     def get_distinct_counts_union(self, model, keys, start, end=None, rollup=None):
         if not keys:
@@ -320,11 +321,12 @@ class RedisTSDB(BaseTSDB):
             hosts[router.get_host_for_key(key)].add(key)
             return hosts
 
-        def get_partition_aggregate((host, keys)):
+        def get_partition_aggregate(value):
             """
             Fetch the HyperLogLog value (in its raw byte representation) that
             results from merging all HyperLogLogs at the provided keys.
             """
+            (host, keys) = value
             destination = make_temporary_key('p:{}'.format(host))
             client = self.cluster.get_local_client(host)
             with client.pipeline(transaction=False) as pipeline:
@@ -394,7 +396,7 @@ class RedisTSDB(BaseTSDB):
         commands = {}
 
         for model, request in requests:
-            for key, items in request.iteritems():
+            for key, items in six.iteritems(request):
                 keys = []
                 expirations = {}
 
@@ -507,7 +509,7 @@ class RedisTSDB(BaseTSDB):
 
         responses = {}
 
-        for key, series in self.get_frequency_series(model, items, start, end, rollup).iteritems():
+        for key, series in six.iteritems(self.get_frequency_series(model, items, start, end, rollup)):
             response = responses[key] = {}
             for timestamp, results in series:
                 for member, value in results.items():
diff --git a/src/sentry/utils/apidocs.py b/src/sentry/utils/apidocs.py
index 8ee8aa559d..d702acb4e3 100644
--- a/src/sentry/utils/apidocs.py
+++ b/src/sentry/utils/apidocs.py
@@ -8,13 +8,12 @@ import inspect
 import requests
 import mimetypes
 
-from StringIO import StringIO
-from pytz import utc
-from datetime import datetime, timedelta
-from random import randint
 from contextlib import contextmanager
-
+from datetime import datetime, timedelta
 from django.conf import settings
+from pytz import utc
+from random import randint
+from six import StringIO
 
 # Do not import from sentry here!  Bad things will happen
 
@@ -204,7 +203,7 @@ def create_sample_time_series(event):
 
     now = datetime.utcnow().replace(tzinfo=utc)
 
-    for _ in xrange(60):
+    for _ in range(60):
         count = randint(1, 10)
         tsdb.incr_multi((
             (tsdb.models.project, group.project.id),
@@ -222,7 +221,7 @@ def create_sample_time_series(event):
         ), now, int(count * 0.1))
         now = now - timedelta(seconds=1)
 
-    for _ in xrange(24 * 30):
+    for _ in range(24 * 30):
         count = randint(100, 1000)
         tsdb.incr_multi((
             (tsdb.models.project, group.project.id),
diff --git a/src/sentry/utils/auth.py b/src/sentry/utils/auth.py
index ceffc25085..ade286ca0d 100644
--- a/src/sentry/utils/auth.py
+++ b/src/sentry/utils/auth.py
@@ -7,6 +7,7 @@ sentry.utils.auth
 """
 from __future__ import absolute_import
 
+import six
 import time
 import logging
 
@@ -40,7 +41,7 @@ def parse_auth_header(header):
 def get_auth_providers():
     return [
         key for key, cfg_names
-        in settings.AUTH_PROVIDERS.iteritems()
+        in six.iteritems(settings.AUTH_PROVIDERS)
         if all(getattr(settings, c, None) for c in cfg_names)
     ]
 
diff --git a/src/sentry/utils/avatar.py b/src/sentry/utils/avatar.py
index 0551639727..efaa46f3b4 100644
--- a/src/sentry/utils/avatar.py
+++ b/src/sentry/utils/avatar.py
@@ -10,15 +10,16 @@ selected, the svg, etc) will also need to be changed there.
 """
 from __future__ import absolute_import
 
-import urllib
+import six
 
 from django.conf import settings
 from django.core.exceptions import ValidationError
 from django.core.validators import validate_email
 from django.utils.encoding import force_text
 from django.utils.html import escape
+from six.moves.urllib.parse import urlencode
 
-from sentry.utils.hashlib import md5
+from sentry.utils.hashlib import md5_text
 from sentry.http import safe_urlopen
 
 
@@ -26,15 +27,15 @@ def get_gravatar_url(email, size=None, default='mm'):
     if email is None:
         email = ''
     gravatar_url = "%s/avatar/%s" % (settings.SENTRY_GRAVATAR_BASE_URL,
-                                     md5(email.lower()).hexdigest())
+                                     md5_text(email.lower()).hexdigest())
 
     properties = {}
     if size:
-        properties['s'] = str(size)
+        properties['s'] = six.text_type(size)
     if default:
         properties['d'] = default
     if properties:
-        gravatar_url += "?" + urllib.urlencode(properties)
+        gravatar_url += "?" + urlencode(properties)
 
     return gravatar_url
 
diff --git a/src/sentry/utils/colors.py b/src/sentry/utils/colors.py
index 654042440a..521efc0c33 100644
--- a/src/sentry/utils/colors.py
+++ b/src/sentry/utils/colors.py
@@ -1,9 +1,11 @@
+from __future__ import absolute_import
+
 import hashlib
 import colorsys
 
 
 def get_hashed_color(string, l=0.5, s=0.5):
-    val = int(hashlib.md5(string).hexdigest()[:3], 16)
+    val = int(hashlib.md5(string.encode('utf-8')).hexdigest()[:3], 16)
     tup = colorsys.hls_to_rgb(val / 4096.0, l, s)
     return '#%02x%02x%02x' % (
         int(tup[0] * 255),
diff --git a/src/sentry/utils/compat/__init__.py b/src/sentry/utils/compat/__init__.py
index ab96bc4e5c..7b82b25c29 100644
--- a/src/sentry/utils/compat/__init__.py
+++ b/src/sentry/utils/compat/__init__.py
@@ -1,18 +1,31 @@
-"""
-sentry.utils.compat
-~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
 from __future__ import absolute_import
 
+import six
+
 try:
     import cPickle as pickle
 except ImportError:
     import pickle  # NOQA
 
-try:
-    from cStringIO import StringIO
-except ImportError:
-    from StringIO import StringIO  # NOQA
+_identity = lambda x: x
+
+if six.PY2:
+    # https://github.com/pallets/werkzeug/blob/master/werkzeug/_compat.py
+    def implements_to_string(cls):
+        cls.__unicode__ = cls.__str__
+        cls.__str__ = lambda x: x.__unicode__().encode('utf-8')
+        return cls
+
+    def implements_iterator(cls):
+        cls.next = cls.__next__
+        del cls.__next__
+        return cls
+
+    def implements_bool(cls):
+        cls.__nonzero__ = cls.__bool__
+        del cls.__bool__
+        return cls
+else:
+    implements_to_string = _identity
+    implements_iterator = _identity
+    implements_bool = _identity
diff --git a/src/sentry/utils/cursors.py b/src/sentry/utils/cursors.py
index 978a7d71df..c5fc299b62 100644
--- a/src/sentry/utils/cursors.py
+++ b/src/sentry/utils/cursors.py
@@ -7,6 +7,8 @@ sentry.utils.cursors
 """
 from __future__ import absolute_import
 
+import six
+
 from collections import Sequence
 
 
@@ -14,7 +16,7 @@ class Cursor(object):
     def __init__(self, value, offset=0, is_prev=False, has_results=None):
         # XXX: ceil is not entirely correct here, but it's a simple hack
         # that solves most problems
-        self.value = long(value)
+        self.value = int(value)
         self.offset = int(offset)
         self.is_prev = bool(is_prev)
         self.has_results = has_results
@@ -107,13 +109,13 @@ def build_cursor(results, key, limit=100, cursor=None):
         has_next = True
     elif num_results:
         if not value:
-            value = long(key(results[0]))
+            value = int(key(results[0]))
 
         # Are there more results than whats on the current page?
         has_next = num_results > limit
 
         # Determine what our next cursor is by ensuring we have a unique offset
-        next_value = long(key(results[-1]))
+        next_value = int(key(results[-1]))
 
         if next_value == value:
             next_offset = offset + limit
@@ -121,9 +123,9 @@ def build_cursor(results, key, limit=100, cursor=None):
             next_offset = 0
             result_iter = reversed(results)
             # skip the last result
-            result_iter.next()
+            six.next(result_iter)
             for result in result_iter:
-                if long(key(result)) == next_value:
+                if int(key(result)) == next_value:
                     next_offset += 1
                 else:
                     break
@@ -134,11 +136,11 @@ def build_cursor(results, key, limit=100, cursor=None):
 
     # Determine what our pervious cursor is by ensuring we have a unique offset
     if is_prev and num_results:
-        prev_value = long(key(results[0]))
+        prev_value = int(key(results[0]))
 
         if num_results > 2:
             i = 1
-            while i < num_results and prev_value == long(key(results[i])):
+            while i < num_results and prev_value == int(key(results[i])):
                 i += 1
             i -= 1
         else:
diff --git a/src/sentry/utils/data_scrubber.py b/src/sentry/utils/data_scrubber.py
index 70aca5a743..c32e28ce30 100644
--- a/src/sentry/utils/data_scrubber.py
+++ b/src/sentry/utils/data_scrubber.py
@@ -99,7 +99,7 @@ class SensitiveDataFilter(object):
             key = ''
 
         original_value = value
-        if isinstance(value, basestring):
+        if isinstance(value, six.string_types):
             value = value.lower()
         else:
             value = ''
diff --git a/src/sentry/utils/dates.py b/src/sentry/utils/dates.py
index 7e429733ff..e4045889b3 100644
--- a/src/sentry/utils/dates.py
+++ b/src/sentry/utils/dates.py
@@ -7,6 +7,8 @@ sentry.utils.dates
 """
 from __future__ import absolute_import
 
+import six
+
 from datetime import (
     datetime,
     timedelta,
@@ -87,7 +89,7 @@ def parse_timestamp(value):
     # TODO(mitsuhiko): merge this code with coreapis date parser
     if isinstance(value, datetime):
         return value
-    elif isinstance(value, (int, long, float)):
+    elif isinstance(value, six.integer_types + (float,)):
         return datetime.utcfromtimestamp(value).replace(tzinfo=pytz.utc)
     value = (value or '').rstrip('Z').encode('ascii', 'replace').split('.', 1)
     if not value:
diff --git a/src/sentry/utils/db.py b/src/sentry/utils/db.py
index d7c0d83060..a8563b3bb3 100644
--- a/src/sentry/utils/db.py
+++ b/src/sentry/utils/db.py
@@ -7,6 +7,8 @@ sentry.utils.db
 """
 from __future__ import absolute_import
 
+import six
+
 from django.conf import settings
 from django.db import connections, DEFAULT_DB_ALIAS
 from django.db.models.fields.related import SingleRelatedObjectDescriptor
@@ -90,7 +92,7 @@ def attach_foreignkey(objects, field, related=[], database=None):
         if len(values) > 1:
             qs = qs.filter(**{'%s__in' % lookup: values})
         else:
-            qs = [qs.get(**{lookup: iter(values).next()})]
+            qs = [qs.get(**{lookup: six.next(iter(values))})]
 
         queryset = dict((getattr(o, key), o) for o in qs)
     else:
diff --git a/src/sentry/utils/debug.py b/src/sentry/utils/debug.py
index 89ceb4da40..1b2d40da65 100644
--- a/src/sentry/utils/debug.py
+++ b/src/sentry/utils/debug.py
@@ -10,11 +10,12 @@ from __future__ import absolute_import
 import cProfile
 import re
 import pstats
+import six
 import sys
-import StringIO
 
 from django.conf import settings
 from django.http import HttpResponse
+from six import StringIO
 
 
 words_re = re.compile(r'\s+')
@@ -50,7 +51,7 @@ class ProfileMiddleware(object):
                 return name[0]
 
     def get_summary(self, results_dict, total):
-        results = [(item[1], item[0]) for item in results_dict.iteritems()]
+        results = [(item[1], item[0]) for item in six.iteritems(results_dict)]
         results.sort(reverse=True)
         results = results[:40]
 
@@ -79,12 +80,12 @@ class ProfileMiddleware(object):
         oldstats = stats.stats
         stats.stats = newstats = {}
         max_name_len = 0
-        for func, (cc, nc, tt, ct, callers) in oldstats.iteritems():
+        for func, (cc, nc, tt, ct, callers) in six.iteritems(oldstats):
             newfunc = func_strip_path(func)
             if len(func_std_string(newfunc)) > max_name_len:
                 max_name_len = len(func_std_string(newfunc))
             newcallers = {}
-            for func2, caller in callers.iteritems():
+            for func2, caller in six.iteritems(callers):
                 newcallers[func_strip_path(func2)] = caller
 
             if newfunc in newstats:
diff --git a/src/sentry/utils/decorators.py b/src/sentry/utils/decorators.py
index e91c206d4c..435e0e86be 100644
--- a/src/sentry/utils/decorators.py
+++ b/src/sentry/utils/decorators.py
@@ -1,3 +1,4 @@
+from __future__ import absolute_import
 
 
 # Vendored from newer Django:
diff --git a/src/sentry/utils/email.py b/src/sentry/utils/email.py
index fb1f3b0353..6cdefc49cf 100644
--- a/src/sentry/utils/email.py
+++ b/src/sentry/utils/email.py
@@ -9,9 +9,11 @@ from __future__ import absolute_import
 
 import logging
 import os
+import six
 import subprocess
 import tempfile
 import time
+
 from email.utils import parseaddr
 from functools import partial
 from operator import attrgetter
@@ -86,7 +88,7 @@ def email_to_group_id(address):
 
 
 def group_id_to_email(group_id):
-    signed_data = signer.sign(str(group_id))
+    signed_data = signer.sign(six.text_type(group_id))
     return '@'.join((
         signed_data.replace(':', '+'),
         options.get('mail.reply-hostname') or get_from_email_domain(),
@@ -259,9 +261,9 @@ class MessageBuilder(object):
             try:
                 headers['List-Id'] = make_listid_from_instance(reference)
             except ListResolver.UnregisteredTypeError as error:
-                logger.debug(str(error))
+                logger.debug(six.text_type(error))
             except AssertionError as error:
-                logger.warning(str(error))
+                logger.warning(six.text_type(error))
 
     def __render_html_body(self):
         html_body = None
@@ -446,7 +448,7 @@ class PreviewBackend(BaseEmailBackend):
     """
     def send_messages(self, email_messages):
         for message in email_messages:
-            content = str(message.message())
+            content = six.text_type(message.message())
             preview = tempfile.NamedTemporaryFile(
                 delete=False,
                 prefix='sentry-email-preview-',
diff --git a/src/sentry/utils/hashlib.py b/src/sentry/utils/hashlib.py
index 3ae9bf6766..f336649659 100644
--- a/src/sentry/utils/hashlib.py
+++ b/src/sentry/utils/hashlib.py
@@ -13,5 +13,5 @@ from hashlib import sha1 as _sha1
 from django.utils.encoding import force_bytes
 
 
-md5 = lambda x: _md5(force_bytes(x, errors='replace'))
-sha1 = lambda x: _sha1(force_bytes(x, errors='replace'))
+md5_text = lambda x: _md5(force_bytes(x, errors='replace'))
+sha1_text = lambda x: _sha1(force_bytes(x, errors='replace'))
diff --git a/src/sentry/utils/html.py b/src/sentry/utils/html.py
new file mode 100644
index 0000000000..ffeb2b34c7
--- /dev/null
+++ b/src/sentry/utils/html.py
@@ -0,0 +1,9 @@
+from __future__ import absolute_import
+
+try:
+    from html import escape as html_escape  # NOQA
+except ImportError:
+    from cgi import escape as _escape  # NOQA
+
+    def escape(value):
+        return _escape(value, True)
diff --git a/src/sentry/utils/http.py b/src/sentry/utils/http.py
index 580e450292..9f104dfa06 100644
--- a/src/sentry/utils/http.py
+++ b/src/sentry/utils/http.py
@@ -7,14 +7,13 @@ sentry.utils.http
 """
 from __future__ import absolute_import
 
+import ipaddress
 import six
-import urllib
 
 from collections import namedtuple
-from urlparse import urlparse, urljoin
-from ipaddr import IPNetwork
-
 from django.conf import settings
+from six.moves.urllib.parse import urlencode, urljoin, urlparse
+
 from sentry import options
 
 
@@ -51,7 +50,7 @@ def safe_urlencode(params, doseq=0):
         else:
             new_params.append((k, six.text_type(v)))
 
-    return urllib.urlencode(new_params, doseq)
+    return urlencode(new_params, doseq)
 
 
 def is_same_domain(url1, url2):
@@ -174,15 +173,13 @@ def is_valid_ip(ip_address, project):
     if not blacklist:
         return True
 
-    ip_network = IPNetwork(ip_address)
     for addr in blacklist:
         # We want to error fast if it's an exact match
         if ip_address == addr:
             return False
 
         # Check to make sure it's actually a range before
-        # attempting to see if we're within that range
-        if '/' in addr and ip_network in IPNetwork(addr):
+        if '/' in addr and ipaddress.ip_address(six.text_type(ip_address)) in ipaddress.ip_network(six.text_type(addr)):
             return False
 
     return True
diff --git a/src/sentry/utils/imports.py b/src/sentry/utils/imports.py
index 4194a08887..9dffbc02db 100644
--- a/src/sentry/utils/imports.py
+++ b/src/sentry/utils/imports.py
@@ -8,6 +8,7 @@ sentry.utils.imports
 from __future__ import absolute_import
 
 import pkgutil
+import six
 
 
 class ModuleProxyCache(dict):
@@ -17,7 +18,7 @@ class ModuleProxyCache(dict):
 
         module_name, class_name = key.rsplit('.', 1)
 
-        module = __import__(module_name, {}, {}, [class_name], -1)
+        module = __import__(module_name, {}, {}, [class_name])
         handler = getattr(module, class_name)
 
         # We cache a NoneType for missing imports to avoid repeated lookups
@@ -46,7 +47,7 @@ def import_submodules(context, root_module, path):
     """
     for loader, module_name, is_pkg in pkgutil.walk_packages(path, root_module + '.'):
         module = loader.find_module(module_name).load_module(module_name)
-        for k, v in vars(module).iteritems():
+        for k, v in six.iteritems(vars(module)):
             if not k.startswith('_'):
                 context[k] = v
         context[module_name] = module
diff --git a/src/sentry/utils/integrationdocs.py b/src/sentry/utils/integrationdocs.py
index f47b9a9462..4a2fc240c0 100644
--- a/src/sentry/utils/integrationdocs.py
+++ b/src/sentry/utils/integrationdocs.py
@@ -4,11 +4,12 @@ from __future__ import absolute_import
 
 import os
 import json
-import urllib2
 import logging
+import six
 
 import sentry
 
+from six.moves.urllib.request import urlopen
 
 BASE_URL = 'https://docs.getsentry.com/hosted/_platforms/{}'
 
@@ -50,10 +51,10 @@ def get_integration_id(platform_id, integration_id):
 
 
 def sync_docs():
-    print 'syncing documentation (platform index)'
-    data = json.load(urllib2.urlopen(BASE_URL.format('_index.json')))
+    print('syncing documentation (platform index)')
+    data = json.load(urlopen(BASE_URL.format('_index.json')))
     platform_list = []
-    for platform_id, integrations in data['platforms'].iteritems():
+    for platform_id, integrations in six.iteritems(data['platforms']):
         platform_list.append({
             'id': platform_id,
             'name': integrations['_self']['name'],
@@ -64,7 +65,7 @@ def sync_docs():
                     'type': i_data['type'],
                     'link': i_data['doc_link'],
                 } for i_id, i_data in sorted(
-                    integrations.iteritems(),
+                    six.iteritems(integrations),
                     key=lambda x: x[1]['name']
                 )
             ],
@@ -74,17 +75,18 @@ def sync_docs():
 
     dump_doc('_platforms', {'platforms': platform_list})
 
-    for platform_id, platform_data in data['platforms'].iteritems():
-        for integration_id, integration in platform_data.iteritems():
+    for platform_id, platform_data in six.iteritems(data['platforms']):
+        for integration_id, integration in six.iteritems(platform_data):
             sync_integration_docs(platform_id, integration_id,
                                   integration['details'])
 
 
 def sync_integration_docs(platform_id, integration_id, path):
-    print '  syncing documentation for %s.%s integration' % (
-        platform_id, integration_id)
+    print('  syncing documentation for %s.%s integration' % (
+        platform_id, integration_id
+    ))
 
-    data = json.load(urllib2.urlopen(BASE_URL.format(path)))
+    data = json.load(urlopen(BASE_URL.format(path)))
 
     key = get_integration_id(platform_id, integration_id)
 
diff --git a/src/sentry/utils/iterators.py b/src/sentry/utils/iterators.py
index 351689307a..0b423def3a 100644
--- a/src/sentry/utils/iterators.py
+++ b/src/sentry/utils/iterators.py
@@ -1,3 +1,6 @@
+from __future__ import absolute_import
+
+
 def chunked(iterator, size):
     chunk = []
     for item in iterator:
diff --git a/src/sentry/utils/javascript.py b/src/sentry/utils/javascript.py
index 38a970cf40..16edf1976a 100644
--- a/src/sentry/utils/javascript.py
+++ b/src/sentry/utils/javascript.py
@@ -7,6 +7,8 @@ sentry.utils.javascript
 """
 from __future__ import absolute_import
 
+import six
+
 from collections import defaultdict
 from datetime import timedelta
 from django.core.urlresolvers import reverse
@@ -53,7 +55,7 @@ def transform(objects, request=None):
     elif not isinstance(objects, (list, tuple)):
         return transform([objects], request=request)[0]
     # elif isinstance(obj, dict):
-    #     return dict((k, transform(v, request=request)) for k, v in obj.iteritems())
+    #     return dict((k, transform(v, request=request)) for k, v in six.iteritems(obj))
     t = transformers.get(type(objects[0]))
 
     if t:
@@ -180,8 +182,8 @@ class GroupTransformer(Transformer):
         version = int(version.strftime('%s'))
 
         d = {
-            'id': str(obj.id),
-            'count': str(obj.times_seen),
+            'id': six.text_type(obj.id),
+            'count': six.text_type(obj.times_seen),
             'title': escape(obj.title),
             'message': escape(obj.message_short),
             'level': obj.level,
diff --git a/src/sentry/utils/json.py b/src/sentry/utils/json.py
index e2f40f48aa..54a3489630 100644
--- a/src/sentry/utils/json.py
+++ b/src/sentry/utils/json.py
@@ -12,6 +12,7 @@ from __future__ import absolute_import
 from simplejson import JSONEncoder, JSONEncoderForHTML, _default_decoder
 import datetime
 import uuid
+import six
 import decimal
 
 from django.utils.timezone import is_aware
@@ -35,7 +36,7 @@ def better_default_encoder(o):
     elif isinstance(o, (set, frozenset)):
         return list(o)
     elif isinstance(o, decimal.Decimal):
-        return str(o)
+        return six.text_type(o)
     raise TypeError(repr(o) + ' is not JSON serializable')
 
 
diff --git a/src/sentry/utils/linksign.py b/src/sentry/utils/linksign.py
index 2811667ad6..bc39b3620e 100644
--- a/src/sentry/utils/linksign.py
+++ b/src/sentry/utils/linksign.py
@@ -1,3 +1,5 @@
+from __future__ import absolute_import
+
 from django.core import signing
 from django.core.urlresolvers import reverse
 
diff --git a/src/sentry/utils/locking/__init__.py b/src/sentry/utils/locking/__init__.py
index 6c1f05051c..273f28a7c3 100644
--- a/src/sentry/utils/locking/__init__.py
+++ b/src/sentry/utils/locking/__init__.py
@@ -1,2 +1,5 @@
+from __future__ import absolute_import
+
+
 class UnableToAcquireLock(Exception):
     """Exception raised when a lock cannot be acquired."""
diff --git a/src/sentry/utils/locking/backends/__init__.py b/src/sentry/utils/locking/backends/__init__.py
index b229442a0f..4a3183a43f 100644
--- a/src/sentry/utils/locking/backends/__init__.py
+++ b/src/sentry/utils/locking/backends/__init__.py
@@ -1,3 +1,6 @@
+from __future__ import absolute_import
+
+
 class LockBackend(object):
     """
     Interface for providing lock behavior that is used by the
diff --git a/src/sentry/utils/locking/backends/redis.py b/src/sentry/utils/locking/backends/redis.py
index b335dddbb9..e088816422 100644
--- a/src/sentry/utils/locking/backends/redis.py
+++ b/src/sentry/utils/locking/backends/redis.py
@@ -1,3 +1,7 @@
+from __future__ import absolute_import
+
+import six
+
 from uuid import uuid4
 
 from sentry.utils import redis
@@ -26,7 +30,7 @@ class RedisLockBackend(LockBackend):
         # *digest* key, even though a digest is composed of multiple values at
         # different keys that would otherwise be placed on different
         # partitions.)
-        if isinstance(routing_key, (int, long)):
+        if isinstance(routing_key, six.integer_types):
             index = routing_key % len(self.cluster.hosts)
             return self.cluster.get_local_client(index)
 
diff --git a/src/sentry/utils/locking/lock.py b/src/sentry/utils/locking/lock.py
index 3b8cdd13b0..a3c1fbc02b 100644
--- a/src/sentry/utils/locking/lock.py
+++ b/src/sentry/utils/locking/lock.py
@@ -1,4 +1,7 @@
+from __future__ import absolute_import
+
 import logging
+
 from contextlib import contextmanager
 
 from sentry.utils.locking import UnableToAcquireLock
diff --git a/src/sentry/utils/locking/manager.py b/src/sentry/utils/locking/manager.py
index e479dc5e1b..1a68bca4cf 100644
--- a/src/sentry/utils/locking/manager.py
+++ b/src/sentry/utils/locking/manager.py
@@ -1,3 +1,5 @@
+from __future__ import absolute_import
+
 from sentry.utils.locking.lock import Lock
 
 
diff --git a/src/sentry/utils/native.py b/src/sentry/utils/native.py
index 180bb28f27..0a6f14899d 100644
--- a/src/sentry/utils/native.py
+++ b/src/sentry/utils/native.py
@@ -1,9 +1,14 @@
+from __future__ import absolute_import
+
+import six
+
+
 def parse_addr(x):
     if x is None:
         return 0
-    if isinstance(x, (int, long)):
+    if isinstance(x, six.integer_types):
         return x
-    if isinstance(x, basestring):
+    if isinstance(x, six.string_types):
         if x[:2] == '0x':
             return int(x[2:], 16)
         return int(x)
diff --git a/src/sentry/utils/numbers.py b/src/sentry/utils/numbers.py
index 446f651d6a..3c1b1050cf 100644
--- a/src/sentry/utils/numbers.py
+++ b/src/sentry/utils/numbers.py
@@ -1,3 +1,5 @@
+from __future__ import absolute_import
+
 BASE36_ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
 BASE32_ALPHABET = '0123456789ABCDEFGHJKMNPQRSTVWXYZ'
 
diff --git a/src/sentry/utils/otp.py b/src/sentry/utils/otp.py
index 217bd02daa..9c7784e3a7 100644
--- a/src/sentry/utils/otp.py
+++ b/src/sentry/utils/otp.py
@@ -1,12 +1,14 @@
 from __future__ import absolute_import
 
+import six
 import time
 import hmac
 import base64
 import qrcode
-import urllib
 import hashlib
+
 from datetime import datetime
+from six.moves.urllib.parse import quote
 
 from sentry.utils.dates import to_timestamp
 
@@ -22,7 +24,7 @@ def _pack_int(i):
     while i != 0:
         result.append(i & 0xFF)
         i >>= 8
-    return bytes(bytearray(reversed(result)).rjust(8, b'\0'))
+    return six.binary_type(bytearray(reversed(result)).rjust(8, b'\0'))
 
 
 def _get_ts(ts):
@@ -58,7 +60,7 @@ class TOTP(object):
         offset = h[-1] & 0xf
         code = ((h[offset] & 0x7f) << 24 | (h[offset + 1] & 0xff) << 16 |
                 (h[offset + 2] & 0xff) << 8 | (h[offset + 3] & 0xff))
-        str_code = str(code % 10 ** self.digits)
+        str_code = six.text_type(code % 10 ** self.digits)
         return ('0' * (self.digits - len(str_code))) + str_code
 
     def verify(self, otp, ts=None, window=None, return_counter=False,
@@ -66,7 +68,7 @@ class TOTP(object):
         ts = _get_ts(ts)
         if window is None:
             window = self.default_window
-        for i in xrange(-window, window + 1):
+        for i in range(-window, window + 1):
             counter = int(ts) // self.interval + i
             if constant_time_compare(otp, self.generate_otp(counter=counter)):
                 # Check for blacklisted counters after the constant time
@@ -85,8 +87,8 @@ class TOTP(object):
         if issuer is None:
             issuer = 'Sentry'
         rv = 'otpauth://totp/%s?issuer=%s&secret=%s' % (
-            urllib.quote(user.encode('utf-8')),
-            urllib.quote(issuer.encode('utf-8')),
+            quote(user.encode('utf-8')),
+            quote(issuer.encode('utf-8')),
             self.secret
         )
         if self.digits != 6:
diff --git a/src/sentry/utils/performance/sqlquerycount.py b/src/sentry/utils/performance/sqlquerycount.py
index dfe2fd2fd0..326980e438 100644
--- a/src/sentry/utils/performance/sqlquerycount.py
+++ b/src/sentry/utils/performance/sqlquerycount.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import logging
+import six
 import threading
 
 from collections import defaultdict
@@ -21,7 +22,7 @@ class State(threading.local):
         self.query_hashes[hash(sql)] += 1
 
     def count_dupes(self):
-        return sum(1 for n in self.query_hashes.itervalues() if n > 1)
+        return sum(1 for n in six.itervalues(self.query_hashes) if n > 1)
 
 
 class CursorWrapper(object):
diff --git a/src/sentry/utils/profile.py b/src/sentry/utils/profile.py
index 60910e1823..f25e1b3baa 100644
--- a/src/sentry/utils/profile.py
+++ b/src/sentry/utils/profile.py
@@ -1,5 +1,8 @@
+from __future__ import absolute_import
+
 import sys
 import time
+
 from cProfile import Profile
 from pstats import Stats
 from functools import update_wrapper
diff --git a/src/sentry/utils/pytest/selenium.py b/src/sentry/utils/pytest/selenium.py
index 6408acc2cd..4c3bfdbb16 100644
--- a/src/sentry/utils/pytest/selenium.py
+++ b/src/sentry/utils/pytest/selenium.py
@@ -6,14 +6,13 @@ from __future__ import absolute_import
 import os
 import pytest
 import signal
-import urllib
 
 from datetime import datetime
 from django.conf import settings
 from selenium import webdriver
 from selenium.webdriver.support.ui import WebDriverWait
 from selenium.webdriver.support import expected_conditions
-from urlparse import urlparse
+from six.moves.urllib.parse import quote, urlparse
 
 
 class Browser(object):
@@ -138,7 +137,7 @@ def percy(request):
     # Initialize Percy.
     loader = percy.ResourceLoader(
         root_dir=settings.STATIC_ROOT,
-        base_url=urllib.quote(settings.STATIC_URL),
+        base_url=quote(settings.STATIC_URL),
     )
     percy_config = percy.Config(default_widths=settings.PERCY_DEFAULT_TESTING_WIDTHS)
     percy = percy.Runner(loader=loader, config=percy_config)
diff --git a/src/sentry/utils/query.py b/src/sentry/utils/query.py
index 173d3abed5..a2dbb964ad 100644
--- a/src/sentry/utils/query.py
+++ b/src/sentry/utils/query.py
@@ -8,6 +8,7 @@ sentry.utils.query
 from __future__ import absolute_import
 
 import progressbar
+import six
 
 from django.db import connections, IntegrityError, router, transaction
 from django.db.models import ForeignKey
@@ -120,7 +121,7 @@ class WithProgressBar(object):
             count = len(iterator)
         self.iterator = iterator
         self.count = count
-        self.caption = unicode(caption or u'Progress')
+        self.caption = six.text_type(caption or u'Progress')
 
     def __iter__(self):
         if self.count != 0:
@@ -156,7 +157,7 @@ class EverythingCollector(Collector):
         # Recursively collect concrete model's parent models, but not their
         # related objects. These will be found by meta.get_all_related_objects()
         concrete_model = model._meta.concrete_model
-        for ptr in concrete_model._meta.parents.iteritems():
+        for ptr in six.iteritems(concrete_model._meta.parents):
             if ptr:
                 # FIXME: This seems to be buggy and execute a query for each
                 # parent object fetch. We have the parent data in the obj,
@@ -206,7 +207,7 @@ def merge_into(self, other, callback=lambda x: x, using='default'):
     collector = EverythingCollector(using=using)
     collector.collect([self])
 
-    for model, objects in collector.data.iteritems():
+    for model, objects in six.iteritems(collector.data):
         # find all potential keys which match our type
         fields = set(
             f.name for f in model._meta.fields
@@ -248,7 +249,7 @@ def merge_into(self, other, callback=lambda x: x, using='default'):
                 pre_delete.send(**signal_kwargs)
                 post_delete.send(**signal_kwargs)
 
-            for k, v in update_kwargs.iteritems():
+            for k, v in six.iteritems(update_kwargs):
                 setattr(obj, k, v)
 
             if send_signals:
diff --git a/src/sentry/utils/redis.py b/src/sentry/utils/redis.py
index 01c35317b6..2400eca994 100644
--- a/src/sentry/utils/redis.py
+++ b/src/sentry/utils/redis.py
@@ -2,6 +2,8 @@ from __future__ import absolute_import
 
 import functools
 import posixpath
+import six
+
 from threading import Lock
 
 import rb
@@ -124,7 +126,7 @@ def check_cluster_versions(cluster, required, recommended=None, label=None):
             results = client.info()
     except Exception as e:
         # Any connection issues should be caught here.
-        raise InvalidConfiguration(unicode(e))
+        raise InvalidConfiguration(six.text_type(e))
 
     versions = {}
     for id, info in results.value.items():
diff --git a/src/sentry/utils/safe.py b/src/sentry/utils/safe.py
index a95654858e..91ecddeaf3 100644
--- a/src/sentry/utils/safe.py
+++ b/src/sentry/utils/safe.py
@@ -32,7 +32,7 @@ def safe_execute(func, *args, **kwargs):
         else:
             cls = func.__class__
 
-        func_name = getattr(func, '__name__', str(func))
+        func_name = getattr(func, '__name__', six.text_type(func))
         cls_name = cls.__name__
 
         logger = logging.getLogger('sentry.safe')
@@ -64,7 +64,7 @@ def trim(value, max_size=settings.SENTRY_MAX_VARIABLE_SIZE, max_depth=3,
     elif isinstance(value, dict):
         result = {}
         _size += 2
-        for k, v in value.iteritems():
+        for k, v in six.iteritems(value):
             trim_v = trim(v, _size=_size, **options)
             result[k] = trim_v
             _size += len(six.text_type(trim_v)) + 1
diff --git a/src/sentry/utils/sms.py b/src/sentry/utils/sms.py
index df6241d876..a989862677 100644
--- a/src/sentry/utils/sms.py
+++ b/src/sentry/utils/sms.py
@@ -1,9 +1,10 @@
 from __future__ import absolute_import
 
-import urllib
 import logging
 import requests
 
+from six.moves.urllib.parse import quote
+
 from sentry import options
 
 
@@ -21,7 +22,7 @@ def send_sms(body, to, from_=None):
     if account[:2] != 'AC':
         account = 'AC' + account
     url = 'https://api.twilio.com/2010-04-01/Accounts/%s/Messages.json' % \
-        urllib.quote(account)
+        quote(account)
     rv = requests.post(url, auth=(account,
                              options.get('sms.twilio-token')), data={
         'To': to,
diff --git a/src/sentry/utils/strings.py b/src/sentry/utils/strings.py
index 526740db80..974b11da15 100644
--- a/src/sentry/utils/strings.py
+++ b/src/sentry/utils/strings.py
@@ -9,12 +9,12 @@ from __future__ import absolute_import
 
 import base64
 import re
+import six
 import string
 import zlib
-from itertools import count
 
-import six
-from django.utils.encoding import force_unicode, smart_unicode
+from django.utils.encoding import force_text, smart_text
+from itertools import count
 
 # Callsigns we do not want to generate automatically because they might
 # overlap with something else that is popular (like GH for GitHub)
@@ -46,7 +46,13 @@ def truncatechars(value, arg):
 
 
 def compress(value):
-    return base64.b64encode(zlib.compress(value))
+    """
+    Compresses a value for safe passage as a string.
+
+    This returns a unicode string rather than bytes, as the Django ORM works
+    with unicode objects.
+    """
+    return base64.b64encode(zlib.compress(value)).decode('utf-8')
 
 
 def decompress(value):
@@ -60,11 +66,11 @@ def gunzip(value):
 def strip(value):
     if not value:
         return ''
-    return smart_unicode(value).strip()
+    return smart_text(value).strip()
 
 
 def soft_hyphenate(value, length, hyphen=u'\u00ad'):
-    return hyphen.join([value[i:(i + length)] for i in xrange(0, len(value), length)])
+    return hyphen.join([value[i:(i + length)] for i in range(0, len(value), length)])
 
 
 def soft_break(value, length, process=lambda chunk: chunk):
@@ -93,12 +99,12 @@ def soft_break(value, length, process=lambda chunk: chunk):
 
 def to_unicode(value):
     try:
-        value = six.text_type(force_unicode(value))
+        value = six.text_type(force_text(value))
     except (UnicodeEncodeError, UnicodeDecodeError):
         value = '(Error decoding value)'
     except Exception:  # in some cases we get a different exception
         try:
-            value = str(repr(type(value)))
+            value = six.text_type(repr(type(value)))
         except Exception:
             value = '(Error decoding value)'
     return value
@@ -183,7 +189,7 @@ valid_dot_atom_characters = frozenset(
 
 def is_valid_dot_atom(value):
     """Validate an input string as an RFC 2822 dot-atom-text value."""
-    return (isinstance(value, basestring)  # must be a string type
+    return (isinstance(value, six.string_types)  # must be a string type
         and not value[0] == '.'
         and not value[-1] == '.'  # cannot start or end with a dot
         and set(value).issubset(valid_dot_atom_characters))  # can only contain valid characters
diff --git a/src/sentry/utils/threadpool.py b/src/sentry/utils/threadpool.py
index 59776f42d4..c781824b15 100644
--- a/src/sentry/utils/threadpool.py
+++ b/src/sentry/utils/threadpool.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from collections import defaultdict
 from Queue import Queue, Empty
 from threading import Thread
@@ -34,7 +36,7 @@ class ThreadPool(object):
         self.queue = Queue()
         self.workers = []
         self.tasks = []
-        for worker in xrange(workers):
+        for worker in range(workers):
             self.workers.append(Worker(self.queue))
 
     def add(self, ident, func, args=None, kwargs=None):
@@ -53,6 +55,6 @@ class ThreadPool(object):
         results = defaultdict(list)
         for worker in self.workers:
             worker.join()
-            for k, v in worker.results.iteritems():
+            for k, v in six.iteritems(worker.results):
                 results[k].extend(v)
         return results
diff --git a/src/sentry/utils/types.py b/src/sentry/utils/types.py
index ed2eb1c1dd..58eb2b8b1a 100644
--- a/src/sentry/utils/types.py
+++ b/src/sentry/utils/types.py
@@ -7,10 +7,13 @@ sentry.utils.types
 """
 from __future__ import absolute_import, print_function
 
-from sentry.utils.yaml import safe_load
+import six
+
 from yaml.parser import ParserError
 from yaml.scanner import ScannerError
 
+from sentry.utils.yaml import safe_load
+
 __all__ = (
     'InvalidTypeError',
     'Any', 'Bool', 'Int', 'Float', 'String', 'Dict', 'Sequence',
@@ -29,7 +32,7 @@ class Type(object):
     # Types that do not need to be coerced
     expected_types = ()
     # Types that are acceptable for coersion
-    compatible_types = (basestring,)
+    compatible_types = six.string_types
 
     def __call__(self, value=None):
         if value is None:
@@ -83,7 +86,7 @@ class IntType(Type):
     """Coerce an integer from a string"""
     name = 'integer'
     default = 0
-    expected_types = (int,)
+    expected_types = six.integer_types
 
     def convert(self, value):
         try:
@@ -97,7 +100,7 @@ class FloatType(Type):
     name = 'float'
     default = 0.0
     expected_types = (float,)
-    compatible_types = (basestring, float, int)
+    compatible_types = six.string_types + six.integer_types + (float,)
 
     def convert(self, value):
         try:
@@ -110,8 +113,8 @@ class StringType(Type):
     """String type without any coersion, must be a string"""
     name = 'string'
     default = u''
-    expected_types = (basestring,)
-    compatible_types = (basestring,)
+    expected_types = six.string_types
+    compatible_types = six.string_types
 
 
 class DictType(Type):
@@ -135,10 +138,10 @@ class SequenceType(Type):
     name = 'sequence'
     default = ()
     expected_types = (tuple, list)
-    compatible_types = (basestring, tuple, list)
+    compatible_types = six.string_types + (tuple, list)
 
     def convert(self, value):
-        if isinstance(value, basestring):
+        if isinstance(value, six.string_types):
             try:
                 value = safe_load(value)
             except (AttributeError, ParserError, ScannerError):
@@ -163,8 +166,8 @@ _type_mapping = {
     bool: Bool,
     int: Int,
     float: Float,
-    str: String,
-    unicode: String,
+    six.binary_type: String,
+    six.text_type: String,
     dict: Dict,
     tuple: Sequence,
     list: Sequence,
diff --git a/src/sentry/utils/validators.py b/src/sentry/utils/validators.py
index b01e33c10f..22686b03ec 100644
--- a/src/sentry/utils/validators.py
+++ b/src/sentry/utils/validators.py
@@ -1,7 +1,8 @@
 from __future__ import absolute_import
 
+import ipaddress
 import re
-from ipaddr import IPAddress
+import six
 
 EVENT_ID_RE = re.compile(r'^[a-fA-F0-9]{32}$')
 
@@ -11,7 +12,7 @@ def validate_ip(value, required=True):
         return
 
     # will raise a ValueError
-    IPAddress(value)
+    ipaddress.ip_network(six.text_type(value))
     return value
 
 
diff --git a/src/sentry/utils/versioning.py b/src/sentry/utils/versioning.py
index d132fdaf6d..aa633bf174 100644
--- a/src/sentry/utils/versioning.py
+++ b/src/sentry/utils/versioning.py
@@ -39,12 +39,14 @@ def check_versions(service, versions, required, recommended=None):
     :param recommended: recommended version. If any host does not fulfill this
         requirement, a ``PendingDeprecationWarning`` is raised.
     """
-    must_upgrade = dict(filter(lambda (host, version): required > version, versions.items()))
+    # x = (host, version)
+    must_upgrade = dict(filter(lambda x: required > x[1], versions.items()))
     if must_upgrade:
         raise InvalidConfiguration(make_upgrade_message(service, 'must', required, must_upgrade))
 
     if recommended:
-        should_upgrade = dict(filter(lambda (host, version): recommended > version, versions.items()))
+        # x = (host, version)
+        should_upgrade = dict(filter(lambda x: recommended > x[1], versions.items()))
         if should_upgrade:
             warnings.warn(
                 make_upgrade_message(service, 'should', recommended, should_upgrade),
diff --git a/src/sentry/utils/warnings.py b/src/sentry/utils/warnings.py
index 3b7fa0e7fc..6bf0c0e541 100644
--- a/src/sentry/utils/warnings.py
+++ b/src/sentry/utils/warnings.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import collections
+import six
 import warnings
 
 
@@ -78,12 +79,12 @@ class WarningSet(collections.Set):
         return len(self.__warnings)
 
     def __iter__(self):
-        return self.__warnings.itervalues()
+        return six.itervalues(self.__warnings)
 
     def __get_key(self, warning):
         return (
             type(warning),
-            warning.args if hasattr(warning, 'args') else str(warning),
+            warning.args if hasattr(warning, 'args') else six.text_type(warning),
         )
 
     def add(self, warning, stacklevel=None):
diff --git a/src/sentry/utils/zip.py b/src/sentry/utils/zip.py
index 8d7cf2cd6e..329e27fcd8 100644
--- a/src/sentry/utils/zip.py
+++ b/src/sentry/utils/zip.py
@@ -1,4 +1,7 @@
+from __future__ import absolute_import
+
 import os
+import six
 import shutil
 import zipfile
 
@@ -34,7 +37,7 @@ def safe_extract_zip(f, path, strip_toplevel=True):
     """
     close = False
     if not isinstance(f, zipfile.ZipFile):
-        close = isinstance(f, basestring)
+        close = isinstance(f, six.text_types)
         zf = zipfile.ZipFile(f, 'r')
     else:
         zf = f
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 27deee2207..1417c858a1 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -1,6 +1,8 @@
 from __future__ import absolute_import, print_function
 
+import base64
 import logging
+import six
 import traceback
 
 from django.conf import settings
@@ -36,7 +38,7 @@ logger = logging.getLogger('sentry')
 
 # Transparent 1x1 gif
 # See http://probablyprogramming.com/2009/03/15/the-tiniest-gif-ever
-PIXEL = 'R0lGODlhAQABAAD/ACwAAAAAAQABAAACADs='.decode('base64')
+PIXEL = base64.b64decode('R0lGODlhAQABAAD/ACwAAAAAAQABAAACADs=')
 
 PROTOCOL_VERSIONS = frozenset(('2.0', '3', '4', '5', '6', '7'))
 
@@ -74,7 +76,7 @@ class APIView(BaseView):
         auth = helper.auth_from_request(request)
 
         if auth.version not in PROTOCOL_VERSIONS:
-            raise APIError('Client using unsupported server protocol version (%r)' % str(auth.version or ''))
+            raise APIError('Client using unsupported server protocol version (%r)' % six.text_type(auth.version or ''))
 
         if not auth.client:
             raise APIError("Client did not send 'client' identifier")
@@ -111,7 +113,7 @@ class APIView(BaseView):
             response['X-Sentry-Error'] = context['error']
 
             if isinstance(e, APIRateLimited) and e.retry_after is not None:
-                response['Retry-After'] = str(e.retry_after)
+                response['Retry-After'] = six.text_type(e.retry_after)
 
         except Exception as e:
             if settings.DEBUG:
@@ -130,7 +132,7 @@ class APIView(BaseView):
             response.status_code,
         ))
         metrics.incr('client-api.all-versions.responses.%sxx' % (
-            str(response.status_code)[0],
+            six.text_type(response.status_code)[0],
         ))
 
         if helper.context.version:
@@ -141,7 +143,7 @@ class APIView(BaseView):
                 helper.context.version, response.status_code
             ))
             metrics.incr('client-api.v%s.responses.%sxx' % (
-                helper.context.version, str(response.status_code)[0]
+                helper.context.version, six.text_type(response.status_code)[0]
             ))
 
         if response.status_code != 200 and origin:
@@ -327,7 +329,7 @@ class StoreView(APIView):
 
         content_encoding = request.META.get('HTTP_CONTENT_ENCODING', '')
 
-        if isinstance(data, basestring):
+        if isinstance(data, six.string_types):
             if content_encoding == 'gzip':
                 data = helper.decompress_gzip(data)
             elif content_encoding == 'deflate':
diff --git a/src/sentry/web/forms/fields.py b/src/sentry/web/forms/fields.py
index b478ca4e09..0c5ecebbf9 100644
--- a/src/sentry/web/forms/fields.py
+++ b/src/sentry/web/forms/fields.py
@@ -7,8 +7,8 @@ sentry.web.forms.fields
 """
 from __future__ import absolute_import
 
+import ipaddress
 import six
-from ipaddr import IPNetwork
 
 from django.core.validators import URLValidator
 from django.forms.widgets import RadioFieldRenderer, TextInput, Widget
@@ -16,13 +16,13 @@ from django.forms.util import flatatt
 from django.forms import (
     Field, CharField, IntegerField, Textarea, TypedChoiceField, ValidationError
 )
-from django.utils.encoding import force_unicode
+from django.utils.encoding import force_text
 from django.utils.html import format_html
-from sentry.utils.http import parse_uri_match
 from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.models import User
+from sentry.utils.http import parse_uri_match
 
 
 class CustomTypedChoiceField(TypedChoiceField):
@@ -56,7 +56,7 @@ class RadioFieldRenderer(RadioFieldRenderer):
     flexible.
     """
     def render(self):
-        return mark_safe(u'\n<div class="inputs-list">%s</div>\n' % u'\n'.join([force_unicode(w) for w in self]))
+        return mark_safe(u'\n<div class="inputs-list">%s</div>\n' % u'\n'.join([force_text(w) for w in self]))
 
 
 class UserField(CharField):
@@ -134,7 +134,7 @@ class OriginsField(CharField):
     def clean(self, value):
         if not value:
             return []
-        values = filter(bool, (v.strip() for v in value.split('\n')))
+        values = [v.strip() for v in value.split('\n') if v]
         for value in values:
             if not self.is_valid_origin(value):
                 raise ValidationError('%r is not an acceptable value' % value)
@@ -166,10 +166,10 @@ class IPNetworksField(CharField):
         value = value.strip()
         if not value:
             return None
-        values = filter(bool, (v.strip() for v in value.split('\n')))
+        values = [v.strip() for v in value.split('\n') if v]
         for value in values:
             try:
-                IPNetwork(value)
+                ipaddress.ip_network(six.text_type(value))
             except ValueError:
                 raise ValidationError('%r is not an acceptable value' % value)
         return values
diff --git a/src/sentry/web/frontend/admin.py b/src/sentry/web/frontend/admin.py
index 7d493c55b4..60bddf9c01 100644
--- a/src/sentry/web/frontend/admin.py
+++ b/src/sentry/web/frontend/admin.py
@@ -135,7 +135,7 @@ def edit_user(request, user_id):
 @requires_admin
 @csrf_protect
 def remove_user(request, user_id):
-    if str(user_id) == str(request.user.id):
+    if six.text_type(user_id) == six.text_type(request.user.id):
         return HttpResponseRedirect(reverse('sentry-admin-users'))
 
     try:
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 0b5481a9d8..3d9faaf0f5 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import logging
+import six
 
 from django.contrib import messages
 from django.core.context_processors import csrf
@@ -74,10 +75,10 @@ class OrganizationMixin(object):
 
         if active_organization is None and organization_slug:
             try:
-                active_organization = (
+                active_organization = six.next(
                     o for o in organizations
                     if o.slug == organization_slug
-                ).next()
+                )
             except StopIteration:
                 logger.info('Active organization [%s] not found in scope',
                     organization_slug)
diff --git a/src/sentry/web/frontend/debug/debug_assigned_email.py b/src/sentry/web/frontend/debug/debug_assigned_email.py
index d7c1443db1..9ec291c1f1 100644
--- a/src/sentry/web/frontend/debug/debug_assigned_email.py
+++ b/src/sentry/web/frontend/debug/debug_assigned_email.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.models import Activity
 
 from .mail import ActivityMailDebugView
@@ -23,7 +25,7 @@ class DebugSelfAssignedEmailView(ActivityMailDebugView):
             'type': Activity.ASSIGNED,
             'user': request.user,
             'data': {
-                'assignee': str(request.user.id),
+                'assignee': six.text_type(request.user.id),
                 'assigneeEmail': request.user.email,
             }
         }
diff --git a/src/sentry/web/frontend/debug/debug_new_release_email.py b/src/sentry/web/frontend/debug/debug_new_release_email.py
index 38a2c971d0..57b6ac73f5 100644
--- a/src/sentry/web/frontend/debug/debug_new_release_email.py
+++ b/src/sentry/web/frontend/debug/debug_new_release_email.py
@@ -33,7 +33,7 @@ class DebugNewReleaseEmailView(View):
         )
         release = Release(
             project=project,
-            version=sha1(uuid4().hex).hexdigest(),
+            version=sha1(uuid4().bytes).hexdigest(),
         )
 
         release_link = absolute_uri('/{}/{}/releases/{}/'.format(
diff --git a/src/sentry/web/frontend/debug/mail.py b/src/sentry/web/frontend/debug/mail.py
index fec1b07150..e4400a3188 100644
--- a/src/sentry/web/frontend/debug/mail.py
+++ b/src/sentry/web/frontend/debug/mail.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import, print_function
 
 import itertools
 import logging
+import six
 import time
 import traceback
 import uuid
@@ -44,24 +45,23 @@ from sentry.utils.http import absolute_uri
 from sentry.web.decorators import login_required
 from sentry.web.helpers import render_to_response, render_to_string
 
-
 logger = logging.getLogger(__name__)
 
 
 def get_random(request):
-    seed = request.GET.get('seed', str(time.time()))
+    seed = request.GET.get('seed', six.text_type(time.time()))
     return Random(seed)
 
 
 def make_message(random, length=None):
     if length is None:
         length = int(random.weibullvariate(8, 3))
-    return ' '.join(random.choice(WORDS) for _ in xrange(length))
+    return ' '.join(random.choice(WORDS) for _ in range(length))
 
 
 def make_culprit(random):
     def make_module_path_components(min, max):
-        for _ in xrange(random.randint(min, max)):
+        for _ in range(random.randint(min, max)):
             yield ''.join(random.sample(WORDS, random.randint(1, int(random.paretovariate(2.2)))))
 
     return '{module} in {function}'.format(
@@ -246,7 +246,7 @@ def new_event(request):
     rule = Rule(label="An example rule")
 
     interface_list = []
-    for interface in event.interfaces.itervalues():
+    for interface in six.itervalues(event.interfaces):
         body = interface.to_email_html(event)
         if not body:
             continue
@@ -303,7 +303,7 @@ def digest(request):
         id=i,
         project=project,
         label="Rule #%s" % (i,),
-    ) for i in xrange(1, random.randint(2, 4))}
+    ) for i in range(1, random.randint(2, 4))}
 
     state = {
         'project': project,
@@ -318,12 +318,12 @@ def digest(request):
     event_sequence = itertools.count(1)
     group_generator = make_group_generator(random, project)
 
-    for i in xrange(random.randint(1, 30)):
+    for i in range(random.randint(1, 30)):
         group = next(group_generator)
         state['groups'][group.id] = group
 
         offset = timedelta(seconds=0)
-        for i in xrange(random.randint(1, 10)):
+        for i in range(random.randint(1, 10)):
             offset += timedelta(seconds=random.random() * 120)
             event = Event(
                 id=next(event_sequence),
diff --git a/src/sentry/web/frontend/generic.py b/src/sentry/web/frontend/generic.py
index f43a2d410b..96aecccfba 100644
--- a/src/sentry/web/frontend/generic.py
+++ b/src/sentry/web/frontend/generic.py
@@ -48,10 +48,10 @@ def static_media(request, **kwargs):
 
     try:
         document_root, path = resolve(path)
-    except Http404 as e:
+    except Http404:
         # Return back a simpler plain-text 404 response, more suitable
         # for static files, rather than our full blown HTML.
-        return HttpResponseNotFound(e.message + '\n', content_type='text/plain')
+        return HttpResponseNotFound('', content_type='text/plain')
 
     if 'gzip' in request.META.get('HTTP_ACCEPT_ENCODING', '') and not path.endswith('.gz') and not settings.DEBUG:
         paths = (path + '.gz', path)
diff --git a/src/sentry/web/frontend/group_tag_export.py b/src/sentry/web/frontend/group_tag_export.py
index afd1da631c..44a8f8b486 100644
--- a/src/sentry/web/frontend/group_tag_export.py
+++ b/src/sentry/web/frontend/group_tag_export.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import csv
+import six
 
 from django.http import Http404, StreamingHttpResponse
 from django.utils.text import slugify
@@ -11,6 +12,26 @@ from sentry.models import (
 from sentry.web.frontend.base import ProjectView
 
 
+# Python 2 doesn't support unicode with CSV, but Python 3 does via
+# the encoding param
+if six.PY3:
+    def get_row(row):
+        return (
+            row.value,
+            six.text_type(row.times_seen),
+            row.last_seen.strftime('%Y-%m-%dT%H:%M:%S.%fZ'),
+            row.first_seen.strftime('%Y-%m-%dT%H:%M:%S.%fZ'),
+        )
+else:
+    def get_row(row):
+        return (
+            row.value.encode('utf-8'),
+            six.text_type(row.times_seen),
+            row.last_seen.strftime('%Y-%m-%dT%H:%M:%S.%fZ'),
+            row.first_seen.strftime('%Y-%m-%dT%H:%M:%S.%fZ'),
+        )
+
+
 # csv.writer doesn't provide a non-file interface
 # https://docs.djangoproject.com/en/1.9/howto/outputting-csv/#streaming-large-csv-files
 class Echo(object):
@@ -55,18 +76,16 @@ class GroupTagExportView(ProjectView):
         def row_iter():
             yield ('value', 'times_seen', 'last_seen', 'first_seen')
             for row in queryset.iterator():
-                yield (
-                    row.value.encode('utf-8'),
-                    str(row.times_seen),
-                    row.last_seen.strftime('%Y-%m-%dT%H:%M:%S.%fZ'),
-                    row.first_seen.strftime('%Y-%m-%dT%H:%M:%S.%fZ'),
-                )
+                yield get_row(row)
 
         pseudo_buffer = Echo()
-        writer = csv.writer(pseudo_buffer)
+        if six.PY3:
+            writer = csv.writer(pseudo_buffer, encoding='utf-8')
+        else:
+            writer = csv.writer(pseudo_buffer)
         response = StreamingHttpResponse(
             (writer.writerow(r) for r in row_iter()),
-            content_type='text/csv'
+            content_type='text/csv',
         )
         response['Content-Disposition'] = 'attachment; filename="{}-{}.csv"'.format(
             group.qualified_short_id or group.id, slugify(key)
diff --git a/src/sentry/web/frontend/mailgun_inbound_webhook.py b/src/sentry/web/frontend/mailgun_inbound_webhook.py
index 758118351b..8df7844739 100644
--- a/src/sentry/web/frontend/mailgun_inbound_webhook.py
+++ b/src/sentry/web/frontend/mailgun_inbound_webhook.py
@@ -20,8 +20,8 @@ from sentry.utils.email import email_to_group_id
 class MailgunInboundWebhookView(View):
     def verify(self, api_key, token, timestamp, signature):
         return constant_time_compare(signature, hmac.new(
-            key=api_key,
-            msg='{}{}'.format(timestamp, token),
+            key=api_key.encode('utf-8'),
+            msg=('{}{}'.format(timestamp, token)).encode('utf-8'),
             digestmod=sha256
         ).hexdigest())
 
diff --git a/src/sentry/web/frontend/organization_api_keys.py b/src/sentry/web/frontend/organization_api_keys.py
index ccbf49cfa3..638484ea7a 100644
--- a/src/sentry/web/frontend/organization_api_keys.py
+++ b/src/sentry/web/frontend/organization_api_keys.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from operator import or_
+from six.moves import reduce
 
 from sentry.models import ApiKey, AuditLogEntryEvent
 from sentry.web.frontend.base import OrganizationView
diff --git a/src/sentry/web/frontend/project_release_tracking.py b/src/sentry/web/frontend/project_release_tracking.py
index 4b6e28d3b6..77e5b4a3d7 100644
--- a/src/sentry/web/frontend/project_release_tracking.py
+++ b/src/sentry/web/frontend/project_release_tracking.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 from hashlib import sha256
+
 import hmac
 
 from django.contrib import messages
@@ -54,9 +55,9 @@ class ProjectReleaseTrackingView(ProjectView):
 
     def _get_signature(self, project_id, plugin_id, token):
         return hmac.new(
-            key=str(token),
-            msg='{}-{}'.format(plugin_id, project_id),
-            digestmod=sha256
+            key=token.encode('utf-8'),
+            msg=('{}-{}'.format(plugin_id, project_id)).encode('utf-8'),
+            digestmod=sha256,
         ).hexdigest()
 
     def handle(self, request, organization, team, project):
diff --git a/src/sentry/web/frontend/release_webhook.py b/src/sentry/web/frontend/release_webhook.py
index e3a69f5913..035829cb16 100644
--- a/src/sentry/web/frontend/release_webhook.py
+++ b/src/sentry/web/frontend/release_webhook.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import, print_function
 from hashlib import sha256
 import hmac
 import logging
+import six
 from simplejson import JSONDecodeError
 
 from django.http import HttpResponse
@@ -22,8 +23,8 @@ logger = logging.getLogger('sentry.webhooks')
 class ReleaseWebhookView(View):
     def verify(self, plugin_id, project_id, token, signature):
         return constant_time_compare(signature, hmac.new(
-            key=str(token),
-            msg='{}-{}'.format(plugin_id, project_id),
+            key=token.encode('utf-8'),
+            msg=('{}-{}'.format(plugin_id, project_id)).encode('utf-8'),
             digestmod=sha256
         ).hexdigest())
 
@@ -42,7 +43,7 @@ class ReleaseWebhookView(View):
         except JSONDecodeError as exc:
             return HttpResponse(
                 status=400,
-                content=json.dumps({'error': unicode(exc)}),
+                content=json.dumps({'error': six.text_type(exc)}),
                 content_type='application/json',
             )
 
diff --git a/src/sentry/web/frontend/twofactor.py b/src/sentry/web/frontend/twofactor.py
index c8aa61a331..66c37d6303 100644
--- a/src/sentry/web/frontend/twofactor.py
+++ b/src/sentry/web/frontend/twofactor.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import six
 import time
 
 from django.http import HttpResponseRedirect, HttpResponse
@@ -27,7 +28,7 @@ class TwoFactorAuthView(BaseView):
         if interface is not None:
             interface.authenticator.mark_used()
             if not interface.is_backup_interface:
-                rv.set_cookie(COOKIE_NAME, str(interface.type),
+                rv.set_cookie(COOKIE_NAME, six.text_type(interface.type),
                               max_age=COOKIE_MAX_AGE, path='/')
         return rv
 
@@ -56,7 +57,7 @@ class TwoFactorAuthView(BaseView):
         interface_type = request.COOKIES.get(COOKIE_NAME)
         if interface_type:
             for interface in interfaces:
-                if str(interface.type) == interface_type:
+                if six.text_type(interface.type) == interface_type:
                     return interface
 
         # Fallback is to go the highest ranked as default.  This will be
diff --git a/src/social_auth/backends/__init__.py b/src/social_auth/backends/__init__.py
index 925744fd0d..4e977496ce 100644
--- a/src/social_auth/backends/__init__.py
+++ b/src/social_auth/backends/__init__.py
@@ -11,17 +11,14 @@ enabled.
 """
 from __future__ import absolute_import
 
-from urllib2 import Request, HTTPError
-from urllib import urlencode
-
-from oauth2 import Consumer as OAuthConsumer, Token, Request as OAuthRequest
-
-from sentry.utils import json
+import six
 
 from django.contrib.auth import authenticate
 from django.utils.importlib import import_module
 from django.utils.crypto import get_random_string, constant_time_compare
-
+from six.moves.urllib.error import HTTPError
+from six.moves.urllib.request import Request
+from six.moves.urllib.parse import urlencode
 from social_auth.models import UserSocialAuth
 from social_auth.utils import (
     setting, model_to_ctype, ctype_to_model, clean_partial_pipeline,
@@ -31,6 +28,9 @@ from social_auth.exceptions import (
     AuthTokenError, AuthMissingParameter, AuthStateMissing, AuthStateForbidden,
     NotAllowedToDisconnect, BackendError)
 from social_auth.backends.utils import build_consumer_oauth_request
+from oauth2 import Consumer as OAuthConsumer, Token, Request as OAuthRequest
+
+from sentry.utils import json
 
 PIPELINE = setting('SOCIAL_AUTH_PIPELINE', (
     'social_auth.backends.pipeline.social.social_auth_user',
@@ -251,7 +251,7 @@ class BaseAuth(object):
             'backend': self.AUTH_BACKEND.name,
             'args': tuple(map(model_to_ctype, args)),
             'kwargs': dict((key, model_to_ctype(val))
-                           for key, val in kwargs.iteritems())
+                           for key, val in six.iteritems(kwargs))
         }
 
     def from_session_dict(self, session_data, *args, **kwargs):
@@ -262,9 +262,9 @@ class BaseAuth(object):
 
         kwargs = kwargs.copy()
         saved_kwargs = dict((key, ctype_to_model(val))
-                            for key, val in session_data['kwargs'].iteritems())
+                            for key, val in six.iteritems(session_data['kwargs']))
         saved_kwargs.update((key, val)
-                            for key, val in kwargs.iteritems())
+                            for key, val in six.iteritems(kwargs))
         return (session_data['next'], args, saved_kwargs)
 
     def continue_pipeline(self, *args, **kwargs):
@@ -291,7 +291,7 @@ class BaseAuth(object):
         """
         backend_name = self.AUTH_BACKEND.name.upper().replace('-', '_')
         extra_arguments = setting(backend_name + '_AUTH_EXTRA_ARGUMENTS', {})
-        for key, value in extra_arguments.iteritems():
+        for key, value in six.iteritems(extra_arguments):
             if key in self.data:
                 extra_arguments[key] = self.data[key]
             elif value:
@@ -432,7 +432,7 @@ class ConsumerBasedOAuth(BaseOAuth):
 
         try:
             access_token = self.access_token(token)
-        except HTTPError, e:
+        except HTTPError as e:
             if e.code == 400:
                 raise AuthCanceled(self)
             else:
@@ -441,7 +441,7 @@ class ConsumerBasedOAuth(BaseOAuth):
 
     def do_auth(self, access_token, *args, **kwargs):
         """Finish the auth process once the access_token was retrieved"""
-        if isinstance(access_token, basestring):
+        if isinstance(access_token, six.string_types):
             access_token = Token.from_string(access_token)
 
         data = self.user_data(access_token)
@@ -610,7 +610,7 @@ class BaseOAuth2(BaseOAuth):
 
         try:
             response = json.loads(dsa_urlopen(request).read())
-        except HTTPError, e:
+        except HTTPError as e:
             if e.code == 400:
                 raise AuthCanceled(self)
             else:
diff --git a/src/social_auth/backends/github.py b/src/social_auth/backends/github.py
index ba4f916833..e88c6d72aa 100644
--- a/src/social_auth/backends/github.py
+++ b/src/social_auth/backends/github.py
@@ -16,9 +16,6 @@ field, check OAuthBackend class for details on how to extend it.
 """
 from __future__ import absolute_import
 
-from urllib import urlencode
-from urllib2 import HTTPError
-
 try:
     import json as simplejson
 except ImportError:
@@ -28,7 +25,8 @@ except ImportError:
         from django.utils import simplejson
 
 from django.conf import settings
-
+from six.moves.urllib.error import HTTPError
+from six.moves.urllib.parse import urlencode
 from social_auth.utils import dsa_urlopen
 from social_auth.backends import BaseOAuth2, OAuthBackend
 from social_auth.exceptions import AuthFailed
diff --git a/src/social_auth/backends/pipeline/user.py b/src/social_auth/backends/pipeline/user.py
index 7f03dd0860..ba3258181d 100644
--- a/src/social_auth/backends/pipeline/user.py
+++ b/src/social_auth/backends/pipeline/user.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from uuid import uuid4
 
 from social_auth.utils import setting, module_member
@@ -87,7 +89,7 @@ def django_orm_maxlength_truncate(backend, details, user=None, is_new=False,
         return
     out = {}
     names = user._meta.get_all_field_names()
-    for name, value in details.iteritems():
+    for name, value in six.iteritems(details):
         if name in names and not _ignore_field(name, is_new):
             max_length = user._meta.get_field(name).max_length
             try:
@@ -107,7 +109,7 @@ def update_user_details(backend, details, response, user=None, is_new=False,
 
     changed = False  # flag to track changes
 
-    for name, value in details.iteritems():
+    for name, value in six.iteritems(details):
         # do not update username, it was already generated, do not update
         # configured fields if user already existed
         if not _ignore_field(name, is_new):
diff --git a/src/social_auth/backends/trello.py b/src/social_auth/backends/trello.py
index 6208f0fc63..e6d9364abd 100644
--- a/src/social_auth/backends/trello.py
+++ b/src/social_auth/backends/trello.py
@@ -22,9 +22,9 @@ except ImportError:
     except ImportError:
         from django.utils import simplejson
 
+from six.moves.urllib.parse import urlencode
 from social_auth.backends import ConsumerBasedOAuth, OAuthBackend
 from social_auth.utils import dsa_urlopen, backend_setting
-from urllib import urlencode
 
 
 TRELLO_REQUEST_TOKEN_URL = 'https://trello.com/1/OAuthGetRequestToken'
diff --git a/src/social_auth/fields.py b/src/social_auth/fields.py
index 83d430eef2..f66092f764 100644
--- a/src/social_auth/fields.py
+++ b/src/social_auth/fields.py
@@ -1,17 +1,18 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.exceptions import ValidationError
 from django.db import models
-from django.utils.encoding import smart_unicode
+from django.utils.encoding import smart_text
 from django.utils import simplejson
 
 
+@six.add_metaclass(models.SubfieldBase)
 class JSONField(models.TextField):
     """Simple JSON field that stores python structures as JSON strings
     on database.
     """
-    __metaclass__ = models.SubfieldBase
-
     def to_python(self, value):
         """
         Convert the input JSON value into python structures, raises
@@ -19,10 +20,10 @@ class JSONField(models.TextField):
         """
         if self.blank and not value:
             return None
-        if isinstance(value, basestring):
+        if isinstance(value, six.string_types):
             try:
                 return simplejson.loads(value)
-            except Exception, e:
+            except Exception as e:
                 raise ValidationError(str(e))
         else:
             return value
@@ -30,23 +31,23 @@ class JSONField(models.TextField):
     def validate(self, value, model_instance):
         """Check value is a valid JSON string, raise ValidationError on
         error."""
-        if isinstance(value, basestring):
+        if isinstance(value, six.string_types):
             super(JSONField, self).validate(value, model_instance)
             try:
                 simplejson.loads(value)
-            except Exception, e:
+            except Exception as e:
                 raise ValidationError(str(e))
 
     def get_prep_value(self, value):
         """Convert value to JSON string before save"""
         try:
             return simplejson.dumps(value)
-        except Exception, e:
+        except Exception as e:
             raise ValidationError(str(e))
 
     def value_to_string(self, obj):
         """Return value from object converted to string properly"""
-        return smart_unicode(self.get_prep_value(self._get_val_from_obj(obj)))
+        return smart_text(self.get_prep_value(self._get_val_from_obj(obj)))
 
     def value_from_object(self, obj):
         """Return value dumped to string."""
diff --git a/src/social_auth/models.py b/src/social_auth/models.py
index 6c42c4eb22..cb831de98d 100644
--- a/src/social_auth/models.py
+++ b/src/social_auth/models.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import time
 import re
+import six
 
 from datetime import datetime, timedelta
 from django.conf import settings
@@ -190,7 +191,7 @@ class UserSocialAuth(models.Model):
 
     @classmethod
     def create_social_auth(cls, user, uid, provider):
-        if not isinstance(uid, basestring):
+        if not isinstance(uid, six.string_types):
             uid = str(uid)
         return cls.objects.create(user=user, uid=uid, provider=provider)
 
diff --git a/src/social_auth/utils.py b/src/social_auth/utils.py
index 85b459882a..55d7b13737 100644
--- a/src/social_auth/utils.py
+++ b/src/social_auth/utils.py
@@ -1,8 +1,6 @@
 from __future__ import absolute_import
 
 import random
-import urlparse
-import urllib
 import logging
 
 from cgi import parse_qsl
@@ -12,7 +10,8 @@ from django.db.models import Model
 from django.contrib.contenttypes.models import ContentType
 from django.utils.functional import empty, SimpleLazyObject
 from django.utils.importlib import import_module
-from urllib2 import urlopen
+from six.moves.urllib.parse import urlencode, urlparse, urlunparse
+from six.moves.urllib.request import urlopen
 
 try:
     random = random.SystemRandom()
@@ -69,7 +68,7 @@ def sanitize_redirect(host, redirect_to):
 
     # Heavier security check, don't allow redirection to a different host.
     try:
-        netloc = urlparse.urlparse(redirect_to)[1]
+        netloc = urlparse(redirect_to)[1]
     except TypeError:  # not valid redirect_to value
         return None
 
@@ -165,10 +164,9 @@ def clean_partial_pipeline(request):
 def url_add_parameters(url, params):
     """Adds parameters to URL, parameter will be repeated if already present"""
     if params:
-        fragments = list(urlparse.urlparse(url))
-        fragments[4] = urllib.urlencode(parse_qsl(fragments[4]) +
-                                        params.items())
-        url = urlparse.urlunparse(fragments)
+        fragments = list(urlparse(url))
+        fragments[4] = urlencode(parse_qsl(fragments[4]) + params.items())
+        url = urlunparse(fragments)
     return url
 
 
diff --git a/src/social_auth/views.py b/src/social_auth/views.py
index b1518b90b9..67e4a5b452 100644
--- a/src/social_auth/views.py
+++ b/src/social_auth/views.py
@@ -12,7 +12,7 @@ from django.contrib.auth import login, REDIRECT_FIELD_NAME
 from django.contrib.auth.decorators import login_required
 from django.contrib import messages
 from django.views.decorators.csrf import csrf_exempt
-from urllib2 import quote
+from six.moves.urllib.parse import quote
 
 from social_auth.utils import (
     sanitize_redirect, setting, backend_setting, clean_partial_pipeline)
diff --git a/tests/acceptance/test_emails.py b/tests/acceptance/test_emails.py
index 095570d04c..1b588039db 100644
--- a/tests/acceptance/test_emails.py
+++ b/tests/acceptance/test_emails.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from urllib import urlencode
+from six.moves.urllib.parse import urlencode
 
 from sentry.testutils import AcceptanceTestCase
 
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index db2cf8be63..595fcaa452 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -7,6 +7,7 @@ import datetime
 import json
 import logging
 import mock
+import six
 import zlib
 
 from django.conf import settings
@@ -16,11 +17,11 @@ from django.utils import timezone
 from gzip import GzipFile
 from exam import fixture
 from raven import Client
+from six import StringIO
 
 from sentry.models import Group, Event
 from sentry.testutils import TestCase, TransactionTestCase
 from sentry.testutils.helpers import get_auth_header
-from sentry.utils.compat import StringIO
 from sentry.utils.settings import (
     validate_settings, ConfigurationError, import_string)
 
@@ -109,7 +110,7 @@ class RavenIntegrationTest(TransactionTestCase):
 
     def sendRemote(self, url, data, headers={}):
         content_type = headers.pop('Content-Type', None)
-        headers = dict(('HTTP_' + k.replace('-', '_').upper(), v) for k, v in headers.iteritems())
+        headers = dict(('HTTP_' + k.replace('-', '_').upper(), v) for k, v in six.iteritems(headers))
         resp = self.client.post(
             reverse('sentry-api-store', args=[self.pk.project_id]),
             data=data,
@@ -438,7 +439,7 @@ class CspReportTest(TestCase):
         e = Event.objects.all()[0]
         Event.objects.bind_nodes([e], 'data')
         assert output['message'] == e.data['sentry.interfaces.Message']['message']
-        for key, value in output['tags'].iteritems():
+        for key, value in six.iteritems(output['tags']):
             assert e.get_tag(key) == value
         self.assertDictContainsSubset(output['data'], e.data.data, e.data.data)
 
diff --git a/tests/sentry/api/endpoints/test_api_tokens.py b/tests/sentry/api/endpoints/test_api_tokens.py
index 5ff9542e37..b39ef90f03 100644
--- a/tests/sentry/api/endpoints/test_api_tokens.py
+++ b/tests/sentry/api/endpoints/test_api_tokens.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 
 from sentry.models import ApiToken
@@ -33,7 +35,7 @@ class ApiTokensCreateTest(APITestCase):
         token = ApiToken.objects.get(
             user=self.user,
         )
-        scopes = [k for k, v in token.scopes.iteritems() if v]
+        scopes = [k for k, v in six.iteritems(token.scopes) if v]
         assert scopes == ['event:read']
 
 
diff --git a/tests/sentry/api/endpoints/test_broadcast_index.py b/tests/sentry/api/endpoints/test_broadcast_index.py
index fe132db103..bf43623580 100644
--- a/tests/sentry/api/endpoints/test_broadcast_index.py
+++ b/tests/sentry/api/endpoints/test_broadcast_index.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 
 from sentry.models import Broadcast, BroadcastSeen
@@ -16,7 +18,7 @@ class BroadcastListTest(APITestCase):
         response = self.client.get(url)
         assert response.status_code == 200
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(broadcast1.id)
+        assert response.data[0]['id'] == six.text_type(broadcast1.id)
 
 
 class BroadcastUpdateTest(APITestCase):
diff --git a/tests/sentry/api/endpoints/test_event_details.py b/tests/sentry/api/endpoints/test_event_details.py
index b63448c811..ced7061151 100644
--- a/tests/sentry/api/endpoints/test_event_details.py
+++ b/tests/sentry/api/endpoints/test_event_details.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from datetime import datetime
 from django.core.urlresolvers import reverse
 
@@ -34,10 +36,10 @@ class EventDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(cur_event.id)
-        assert response.data['nextEventID'] == str(next_event.id)
-        assert response.data['previousEventID'] == str(prev_event.id)
-        assert response.data['groupID'] == group.id
+        assert response.data['id'] == six.text_type(cur_event.id)
+        assert response.data['nextEventID'] == six.text_type(next_event.id)
+        assert response.data['previousEventID'] == six.text_type(prev_event.id)
+        assert response.data['groupID'] == six.text_type(group.id)
         assert not response.data['userReport']
 
         url = reverse('sentry-api-0-event-details', kwargs={
@@ -46,10 +48,10 @@ class EventDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(prev_event.id)
-        assert response.data['nextEventID'] == str(cur_event.id)
+        assert response.data['id'] == six.text_type(prev_event.id)
+        assert response.data['nextEventID'] == six.text_type(cur_event.id)
         assert response.data['previousEventID'] is None
-        assert response.data['groupID'] == group.id
+        assert response.data['groupID'] == six.text_type(group.id)
         assert not response.data['userReport']
 
         url = reverse('sentry-api-0-event-details', kwargs={
@@ -58,10 +60,10 @@ class EventDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(next_event.id)
+        assert response.data['id'] == six.text_type(next_event.id)
         assert response.data['nextEventID'] is None
-        assert response.data['previousEventID'] == str(cur_event.id)
-        assert response.data['groupID'] == group.id
+        assert response.data['previousEventID'] == six.text_type(cur_event.id)
+        assert response.data['groupID'] == six.text_type(group.id)
         assert not response.data['userReport']
 
     def test_identical_datetime(self):
@@ -103,10 +105,10 @@ class EventDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(events[0].id)
-        assert response.data['nextEventID'] == str(events[1].id)
+        assert response.data['id'] == six.text_type(events[0].id)
+        assert response.data['nextEventID'] == six.text_type(events[1].id)
         assert response.data['previousEventID'] is None
-        assert response.data['groupID'] == group.id
+        assert response.data['groupID'] == six.text_type(group.id)
         assert not response.data['userReport']
 
         # Middle event, has prev and next
@@ -116,10 +118,10 @@ class EventDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(events[1].id)
-        assert response.data['nextEventID'] == str(events[2].id)
-        assert response.data['previousEventID'] == str(events[0].id)
-        assert response.data['groupID'] == group.id
+        assert response.data['id'] == six.text_type(events[1].id)
+        assert response.data['nextEventID'] == six.text_type(events[2].id)
+        assert response.data['previousEventID'] == six.text_type(events[0].id)
+        assert response.data['groupID'] == six.text_type(group.id)
         assert not response.data['userReport']
 
         # Middle event, has prev and next
@@ -129,10 +131,10 @@ class EventDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(events[2].id)
-        assert response.data['nextEventID'] == str(events[3].id)
-        assert response.data['previousEventID'] == str(events[1].id)
-        assert response.data['groupID'] == group.id
+        assert response.data['id'] == six.text_type(events[2].id)
+        assert response.data['nextEventID'] == six.text_type(events[3].id)
+        assert response.data['previousEventID'] == six.text_type(events[1].id)
+        assert response.data['groupID'] == six.text_type(group.id)
         assert not response.data['userReport']
 
         # Middle event, has prev and next
@@ -142,10 +144,10 @@ class EventDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(events[3].id)
-        assert response.data['nextEventID'] == str(events[4].id)
-        assert response.data['previousEventID'] == str(events[2].id)
-        assert response.data['groupID'] == group.id
+        assert response.data['id'] == six.text_type(events[3].id)
+        assert response.data['nextEventID'] == six.text_type(events[4].id)
+        assert response.data['previousEventID'] == six.text_type(events[2].id)
+        assert response.data['groupID'] == six.text_type(group.id)
         assert not response.data['userReport']
 
         # Last event, no next
@@ -155,10 +157,10 @@ class EventDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(events[4].id)
+        assert response.data['id'] == six.text_type(events[4].id)
         assert response.data['nextEventID'] is None
-        assert response.data['previousEventID'] == str(events[3].id)
-        assert response.data['groupID'] == group.id
+        assert response.data['previousEventID'] == six.text_type(events[3].id)
+        assert response.data['groupID'] == six.text_type(group.id)
         assert not response.data['userReport']
 
     def test_timestamps_out_of_order(self):
@@ -187,10 +189,10 @@ class EventDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(cur_event.id)
-        assert response.data['nextEventID'] == str(next_event.id)
-        assert response.data['previousEventID'] == str(prev_event.id)
-        assert response.data['groupID'] == group.id
+        assert response.data['id'] == six.text_type(cur_event.id)
+        assert response.data['nextEventID'] == six.text_type(next_event.id)
+        assert response.data['previousEventID'] == six.text_type(prev_event.id)
+        assert response.data['groupID'] == six.text_type(group.id)
         assert not response.data['userReport']
 
         url = reverse('sentry-api-0-event-details', kwargs={
@@ -199,10 +201,10 @@ class EventDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(prev_event.id)
-        assert response.data['nextEventID'] == str(cur_event.id)
+        assert response.data['id'] == six.text_type(prev_event.id)
+        assert response.data['nextEventID'] == six.text_type(cur_event.id)
         assert response.data['previousEventID'] is None
-        assert response.data['groupID'] == group.id
+        assert response.data['groupID'] == six.text_type(group.id)
         assert not response.data['userReport']
 
         url = reverse('sentry-api-0-event-details', kwargs={
@@ -211,10 +213,10 @@ class EventDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(next_event.id)
+        assert response.data['id'] == six.text_type(next_event.id)
         assert response.data['nextEventID'] is None
-        assert response.data['previousEventID'] == str(cur_event.id)
-        assert response.data['groupID'] == group.id
+        assert response.data['previousEventID'] == six.text_type(cur_event.id)
+        assert response.data['groupID'] == six.text_type(group.id)
         assert not response.data['userReport']
 
     def test_user_report(self):
@@ -241,5 +243,5 @@ class EventDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(cur_event.id)
-        assert response.data['userReport']['id'] == str(user_report.id)
+        assert response.data['id'] == six.text_type(cur_event.id)
+        assert response.data['userReport']['id'] == six.text_type(user_report.id)
diff --git a/tests/sentry/api/endpoints/test_group_details.py b/tests/sentry/api/endpoints/test_group_details.py
index 80517b7498..52bbf27ba0 100644
--- a/tests/sentry/api/endpoints/test_group_details.py
+++ b/tests/sentry/api/endpoints/test_group_details.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import, print_function
 
+import six
+
 from datetime import timedelta
 from django.utils import timezone
 
@@ -20,7 +22,7 @@ class GroupDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(group.id)
+        assert response.data['id'] == six.text_type(group.id)
         assert response.data['firstRelease'] is None
 
     def test_with_first_release(self):
@@ -43,7 +45,7 @@ class GroupDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(group.id)
+        assert response.data['id'] == six.text_type(group.id)
         assert response.data['firstRelease']['version'] == release.version
 
 
diff --git a/tests/sentry/api/endpoints/test_group_events.py b/tests/sentry/api/endpoints/test_group_events.py
index 1382527b74..fa9691cf64 100644
--- a/tests/sentry/api/endpoints/test_group_events.py
+++ b/tests/sentry/api/endpoints/test_group_events.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.models import EventTag, TagKey, TagValue
 from sentry.testutils import APITestCase
 
@@ -18,8 +20,8 @@ class GroupEventsTest(APITestCase):
         assert response.status_code == 200, response.content
         assert len(response.data) == 2
         assert sorted(map(lambda x: x['id'], response.data)) == sorted([
-            str(event_1.id),
-            str(event_2.id),
+            six.text_type(event_1.id),
+            six.text_type(event_2.id),
         ])
 
     def test_tags(self):
@@ -62,13 +64,13 @@ class GroupEventsTest(APITestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(event_1.id)
+        assert response.data[0]['id'] == six.text_type(event_1.id)
 
         response = self.client.get(url + '?query=bar:biz', format='json')
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(event_2.id)
+        assert response.data[0]['id'] == six.text_type(event_2.id)
 
         response = self.client.get(url + '?query=bar:biz%20foo:baz', format='json')
 
@@ -79,7 +81,7 @@ class GroupEventsTest(APITestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(event_1.id)
+        assert response.data[0]['id'] == six.text_type(event_1.id)
 
         response = self.client.get(url + '?query=bar:baz', format='json')
 
diff --git a/tests/sentry/api/endpoints/test_group_events_latest.py b/tests/sentry/api/endpoints/test_group_events_latest.py
index 5c557befca..468adabf34 100644
--- a/tests/sentry/api/endpoints/test_group_events_latest.py
+++ b/tests/sentry/api/endpoints/test_group_events_latest.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from datetime import datetime
 
 from sentry.testutils import APITestCase
@@ -25,4 +27,4 @@ class GroupEventsLatestTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200
-        assert response.data['id'] == str(event_2.id)
+        assert response.data['id'] == six.text_type(event_2.id)
diff --git a/tests/sentry/api/endpoints/test_group_events_oldest.py b/tests/sentry/api/endpoints/test_group_events_oldest.py
index c52ce5a377..4328e743f0 100644
--- a/tests/sentry/api/endpoints/test_group_events_oldest.py
+++ b/tests/sentry/api/endpoints/test_group_events_oldest.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from datetime import datetime
 
 from sentry.testutils import APITestCase
@@ -25,4 +27,4 @@ class GroupEventsOldestTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200
-        assert response.data['id'] == str(event_1.id)
+        assert response.data['id'] == six.text_type(event_1.id)
diff --git a/tests/sentry/api/endpoints/test_group_notes.py b/tests/sentry/api/endpoints/test_group_notes.py
index 077ee3a388..ab466f7108 100644
--- a/tests/sentry/api/endpoints/test_group_notes.py
+++ b/tests/sentry/api/endpoints/test_group_notes.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.models import Activity
 from sentry.testutils import APITestCase
 
@@ -22,7 +24,7 @@ class GroupNoteTest(APITestCase):
         response = self.client.get(url, format='json')
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(activity.id)
+        assert response.data[0]['id'] == six.text_type(activity.id)
 
 
 class GroupNoteCreateTest(APITestCase):
diff --git a/tests/sentry/api/endpoints/test_group_participants.py b/tests/sentry/api/endpoints/test_group_participants.py
index 3da64b47c4..941b774298 100644
--- a/tests/sentry/api/endpoints/test_group_participants.py
+++ b/tests/sentry/api/endpoints/test_group_participants.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import, print_function
 
+import six
+
 from sentry.models import GroupSubscription
 from sentry.testutils import APITestCase
 
@@ -22,4 +24,4 @@ class GroupParticipantsTest(APITestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(self.user.id)
+        assert response.data[0]['id'] == six.text_type(self.user.id)
diff --git a/tests/sentry/api/endpoints/test_group_tagkey_details.py b/tests/sentry/api/endpoints/test_group_tagkey_details.py
index c1f4b7725d..ede181fde2 100644
--- a/tests/sentry/api/endpoints/test_group_tagkey_details.py
+++ b/tests/sentry/api/endpoints/test_group_tagkey_details.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.models import GroupTagKey, GroupTagValue, TagKey, TagValue
 from sentry.testutils import APITestCase
 
@@ -42,7 +44,7 @@ class GroupTagDetailsTest(APITestCase):
         url = '/api/0/issues/{}/tags/{}/'.format(group.id, tagkey.key)
         response = self.client.get(url, format='json')
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(tagkey.id)
-        assert response.data['key'] == str(tagkey.key)
+        assert response.data['id'] == six.text_type(tagkey.id)
+        assert response.data['key'] == six.text_type(tagkey.key)
         assert response.data['uniqueValues'] == 1
         assert response.data['totalValues'] == 3
diff --git a/tests/sentry/api/endpoints/test_index.py b/tests/sentry/api/endpoints/test_index.py
index 8bdaed0422..2e9ee69de6 100644
--- a/tests/sentry/api/endpoints/test_index.py
+++ b/tests/sentry/api/endpoints/test_index.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from base64 import b64encode
 from django.core.urlresolvers import reverse
 
@@ -22,7 +24,7 @@ class ApiIndexTest(APITestCase):
         response = self.client.get(url)
         assert response.status_code == 200
         assert response.data['version'] == '0'
-        assert response.data['user']['id'] == str(self.user.id)
+        assert response.data['user']['id'] == six.text_type(self.user.id)
         assert not response.data['auth']
 
     def test_key_auth(self):
@@ -52,4 +54,4 @@ class ApiIndexTest(APITestCase):
         assert response.status_code == 200
         assert response.data['version'] == '0'
         assert response.data['auth']['scopes'] == token.get_scopes()
-        assert response.data['user']['id'] == str(self.user.id)
+        assert response.data['user']['id'] == six.text_type(self.user.id)
diff --git a/tests/sentry/api/endpoints/test_organization_activity.py b/tests/sentry/api/endpoints/test_organization_activity.py
index 111b4e65c0..e764ef7612 100644
--- a/tests/sentry/api/endpoints/test_organization_activity.py
+++ b/tests/sentry/api/endpoints/test_organization_activity.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.models import Activity
 from sentry.testutils import APITestCase
 
@@ -23,4 +25,4 @@ class OrganizationActivityTest(APITestCase):
         response = self.client.get(url, format='json')
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(activity.id)
+        assert response.data[0]['id'] == six.text_type(activity.id)
diff --git a/tests/sentry/api/endpoints/test_organization_auditlogs.py b/tests/sentry/api/endpoints/test_organization_auditlogs.py
index c04585f9f6..9adc220284 100644
--- a/tests/sentry/api/endpoints/test_organization_auditlogs.py
+++ b/tests/sentry/api/endpoints/test_organization_auditlogs.py
@@ -1,7 +1,8 @@
 from __future__ import absolute_import
 
-from datetime import timedelta
+import six
 
+from datetime import timedelta
 from django.core.urlresolvers import reverse
 from django.utils import timezone
 
@@ -42,5 +43,5 @@ class OrganizationAuditLogsTest(APITestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 2
-        assert response.data[0]['id'] == str(entry2.id)
-        assert response.data[1]['id'] == str(entry1.id)
+        assert response.data[0]['id'] == six.text_type(entry2.id)
+        assert response.data[1]['id'] == six.text_type(entry1.id)
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index e9e75f8d4d..021fdcc964 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 from mock import patch
 
@@ -18,7 +20,7 @@ class OrganizationDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
         assert response.data['onboardingTasks'] == []
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(org.id)
+        assert response.data['id'] == six.text_type(org.id)
 
         project = self.create_project(organization=org)
         project_created.send(project=project, user=self.user, sender=type(project))
diff --git a/tests/sentry/api/endpoints/test_organization_index.py b/tests/sentry/api/endpoints/test_organization_index.py
index 4c6d1799b0..12241b632e 100644
--- a/tests/sentry/api/endpoints/test_organization_index.py
+++ b/tests/sentry/api/endpoints/test_organization_index.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 from exam import fixture
 
@@ -18,7 +20,7 @@ class OrganizationsListTest(APITestCase):
         response = self.client.get('{}?member=1'.format(self.path))
         assert response.status_code == 200
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(org.id)
+        assert response.data[0]['id'] == six.text_type(org.id)
 
 
 class OrganizationsCreateTest(APITestCase):
diff --git a/tests/sentry/api/endpoints/test_organization_issues_new.py b/tests/sentry/api/endpoints/test_organization_issues_new.py
index 3d583bdfc4..8afca7b2c3 100644
--- a/tests/sentry/api/endpoints/test_organization_issues_new.py
+++ b/tests/sentry/api/endpoints/test_organization_issues_new.py
@@ -1,7 +1,8 @@
 from __future__ import absolute_import
 
-from datetime import timedelta
+import six
 
+from datetime import timedelta
 from django.utils import timezone
 
 from sentry.models import OrganizationMember, OrganizationMemberTeam
@@ -34,5 +35,5 @@ class OrganizationIssuesNewTest(APITestCase):
         response = self.client.get(url, format='json')
         assert response.status_code == 200
         assert len(response.data) == 2
-        assert response.data[0]['id'] == str(group2.id)
-        assert response.data[1]['id'] == str(group1.id)
+        assert response.data[0]['id'] == six.text_type(group2.id)
+        assert response.data[1]['id'] == six.text_type(group1.id)
diff --git a/tests/sentry/api/endpoints/test_organization_member_issues_assigned.py b/tests/sentry/api/endpoints/test_organization_member_issues_assigned.py
index 30afde8a0b..b38db044fc 100644
--- a/tests/sentry/api/endpoints/test_organization_member_issues_assigned.py
+++ b/tests/sentry/api/endpoints/test_organization_member_issues_assigned.py
@@ -1,7 +1,8 @@
 from __future__ import absolute_import
 
-from datetime import timedelta
+import six
 
+from datetime import timedelta
 from django.core.urlresolvers import reverse
 from django.utils import timezone
 
@@ -55,5 +56,5 @@ class OrganizationMemberIssuesAssignedTest(APITestCase):
 
         assert resp.status_code == 200
         assert len(resp.data) == 2
-        assert resp.data[0]['id'] == str(group2.id)
-        assert resp.data[1]['id'] == str(group1.id)
+        assert resp.data[0]['id'] == six.text_type(group2.id)
+        assert resp.data[1]['id'] == six.text_type(group1.id)
diff --git a/tests/sentry/api/endpoints/test_organization_projects.py b/tests/sentry/api/endpoints/test_organization_projects.py
index d82b99feb6..37803ab86d 100644
--- a/tests/sentry/api/endpoints/test_organization_projects.py
+++ b/tests/sentry/api/endpoints/test_organization_projects.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 
 from sentry.testutils import APITestCase
@@ -18,4 +20,4 @@ class OrganizationProjectsTest(APITestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(project.id)
+        assert response.data[0]['id'] == six.text_type(project.id)
diff --git a/tests/sentry/api/endpoints/test_organization_stats.py b/tests/sentry/api/endpoints/test_organization_stats.py
index 9a3a2e4935..dea69cb81c 100644
--- a/tests/sentry/api/endpoints/test_organization_stats.py
+++ b/tests/sentry/api/endpoints/test_organization_stats.py
@@ -50,7 +50,7 @@ class OrganizationStatsTest(APITestCase):
         assert project.id in response.data
 
         response = make_request({
-            'id': [sys.maxint],
+            'id': [sys.maxsize],
             'group': 'project',
         })
 
diff --git a/tests/sentry/api/endpoints/test_organization_teams.py b/tests/sentry/api/endpoints/test_organization_teams.py
index 7266cb6b1b..b9058de236 100644
--- a/tests/sentry/api/endpoints/test_organization_teams.py
+++ b/tests/sentry/api/endpoints/test_organization_teams.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 from exam import fixture
 
@@ -29,9 +31,9 @@ class OrganizationTeamsListTest(APITestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 2
-        assert response.data[0]['id'] == str(team2.id)
+        assert response.data[0]['id'] == six.text_type(team2.id)
         assert not response.data[0]['isMember']
-        assert response.data[1]['id'] == str(team1.id)
+        assert response.data[1]['id'] == six.text_type(team1.id)
         assert response.data[1]['isMember']
 
 
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index f91bb15b34..c6f217f3e2 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import mock
+import six
 
 from django.core.urlresolvers import reverse
 
@@ -18,7 +19,7 @@ class ProjectDetailsTest(APITestCase):
         })
         response = self.client.get(url)
         assert response.status_code == 200
-        assert response.data['id'] == str(project.id)
+        assert response.data['id'] == six.text_type(project.id)
 
     def test_numeric_org_slug(self):
         # Regression test for https://github.com/getsentry/sentry/issues/2236
@@ -42,7 +43,7 @@ class ProjectDetailsTest(APITestCase):
         url = '/api/0/projects/%s/%s/' % (org.slug, project.slug)
         response = self.client.get(url)
         assert response.status_code == 200
-        assert response.data['id'] == str(project.id)
+        assert response.data['id'] == six.text_type(project.id)
 
     def test_with_stats(self):
         project = self.create_project()
diff --git a/tests/sentry/api/endpoints/test_project_event_details.py b/tests/sentry/api/endpoints/test_project_event_details.py
index d6a8ab28e5..53491c5230 100644
--- a/tests/sentry/api/endpoints/test_project_event_details.py
+++ b/tests/sentry/api/endpoints/test_project_event_details.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from datetime import datetime
 from django.core.urlresolvers import reverse
 
@@ -35,7 +37,7 @@ class ProjectEventDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(cur_event.id)
-        assert response.data['nextEventID'] == str(next_event.event_id)
-        assert response.data['previousEventID'] == str(prev_event.event_id)
-        assert response.data['groupID'] == group.id
+        assert response.data['id'] == six.text_type(cur_event.id)
+        assert response.data['nextEventID'] == six.text_type(next_event.event_id)
+        assert response.data['previousEventID'] == six.text_type(prev_event.event_id)
+        assert response.data['groupID'] == six.text_type(group.id)
diff --git a/tests/sentry/api/endpoints/test_project_events.py b/tests/sentry/api/endpoints/test_project_events.py
index 762b2aa5e2..9edcdf11ec 100644
--- a/tests/sentry/api/endpoints/test_project_events.py
+++ b/tests/sentry/api/endpoints/test_project_events.py
@@ -1,6 +1,9 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
+
 from sentry.testutils import APITestCase
 
 
@@ -22,6 +25,6 @@ class ProjectEventsTest(APITestCase):
         assert response.status_code == 200, response.content
         assert len(response.data) == 2
         assert sorted(map(lambda x: x['id'], response.data)) == sorted([
-            str(event_1.id),
-            str(event_2.id),
+            six.text_type(event_1.id),
+            six.text_type(event_2.id),
         ])
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index dc86e723be..4aec84b7dc 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from datetime import timedelta
 from django.utils import timezone
 from exam import fixture
@@ -17,7 +19,7 @@ class GroupListTest(APITestCase):
     def _parse_links(self, header):
         # links come in {url: {...attrs}}, but we need {rel: {...attrs}}
         links = {}
-        for url, attrs in parse_link_header(header).iteritems():
+        for url, attrs in six.iteritems(parse_link_header(header)):
             links[attrs['rel']] = attrs
             attrs['href'] = url
         return links
@@ -44,7 +46,7 @@ class GroupListTest(APITestCase):
         )
         assert response.status_code == 200
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(group1.id)
+        assert response.data[0]['id'] == six.text_type(group1.id)
 
     def test_simple_pagination(self):
         now = timezone.now().replace(microsecond=0)
@@ -68,7 +70,7 @@ class GroupListTest(APITestCase):
         )
         assert response.status_code == 200
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(group2.id)
+        assert response.data[0]['id'] == six.text_type(group2.id)
 
         links = self._parse_links(response['Link'])
 
@@ -79,7 +81,7 @@ class GroupListTest(APITestCase):
         response = self.client.get(links['next']['href'], format='json')
         assert response.status_code == 200
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(group1.id)
+        assert response.data[0]['id'] == six.text_type(group1.id)
 
         links = self._parse_links(response['Link'])
 
@@ -91,7 +93,7 @@ class GroupListTest(APITestCase):
         # response = self.client.get(links['previous']['href'], format='json')
         # assert response.status_code == 200
         # assert len(response.data) == 1
-        # assert response.data[0]['id'] == str(group2.id)
+        # assert response.data[0]['id'] == six.text_type(group2.id)
 
         # links = self._parse_links(response['Link'])
 
@@ -117,7 +119,7 @@ class GroupListTest(APITestCase):
         # response = self.client.get(links['previous']['href'], format='json')
         # assert response.status_code == 200
         # assert len(response.data) == 1
-        # assert response.data[0]['id'] == str(group3.id)
+        # assert response.data[0]['id'] == six.text_type(group3.id)
 
     def test_stats_period(self):
         # TODO(dcramer): this test really only checks if validation happens
@@ -167,7 +169,7 @@ class GroupListTest(APITestCase):
         response = self.client.get(self.path, format='json')
         assert response.status_code == 200
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(group2.id)
+        assert response.data[0]['id'] == six.text_type(group2.id)
 
     def test_lookup_by_event_id(self):
         project = self.project
@@ -185,7 +187,7 @@ class GroupListTest(APITestCase):
                                    format='json')
         assert response.status_code == 200
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(group.id)
+        assert response.data[0]['id'] == six.text_type(group.id)
 
     def test_lookup_by_event_id_with_whitespace(self):
         project = self.project
@@ -203,7 +205,7 @@ class GroupListTest(APITestCase):
                                    format='json')
         assert response.status_code == 200
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(group.id)
+        assert response.data[0]['id'] == six.text_type(group.id)
 
     def test_lookup_by_unknown_event_id(self):
         project = self.project
@@ -656,10 +658,10 @@ class GroupUpdateTest(APITestCase):
             'merge': '1',
         }, format='json')
         assert response.status_code == 200
-        assert response.data['merge']['parent'] == str(group2.id)
+        assert response.data['merge']['parent'] == six.text_type(group2.id)
         assert sorted(response.data['merge']['children']) == sorted([
-            str(group1.id),
-            str(group3.id),
+            six.text_type(group1.id),
+            six.text_type(group3.id),
         ])
 
         assert len(merge_group.mock_calls) == 2
diff --git a/tests/sentry/api/endpoints/test_project_group_stats.py b/tests/sentry/api/endpoints/test_project_group_stats.py
index eba266f22c..72c7e5a95d 100644
--- a/tests/sentry/api/endpoints/test_project_group_stats.py
+++ b/tests/sentry/api/endpoints/test_project_group_stats.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.app import tsdb
 from sentry.testutils import APITestCase
 
@@ -26,10 +28,10 @@ class ProjectGroupStatsTest(APITestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 2
-        assert str(group1.id) in response.data
-        assert str(group2.id) in response.data
+        assert six.text_type(group1.id) in response.data
+        assert six.text_type(group2.id) in response.data
 
-        group_data = response.data[str(group1.id)]
+        group_data = response.data[six.text_type(group1.id)]
         assert group_data[-1][1] == 3, response.data
         for point in group_data[:-1]:
             assert point[1] == 0
diff --git a/tests/sentry/api/endpoints/test_project_index.py b/tests/sentry/api/endpoints/test_project_index.py
index 8a31a2ea9d..99ec5c819d 100644
--- a/tests/sentry/api/endpoints/test_project_index.py
+++ b/tests/sentry/api/endpoints/test_project_index.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 from exam import fixture
 
@@ -29,8 +31,8 @@ class ProjectsListTest(APITestCase):
         assert response.status_code == 200
         assert len(response.data) == 1
 
-        assert response.data[0]['id'] == str(project.id)
-        assert response.data[0]['organization']['id'] == str(org.id)
+        assert response.data[0]['id'] == six.text_type(project.id)
+        assert response.data[0]['organization']['id'] == six.text_type(org.id)
 
     def test_superuser(self):
         Project.objects.all().delete()
@@ -64,12 +66,12 @@ class ProjectsListTest(APITestCase):
         response = self.client.get(self.path + '?status=active')
         assert response.status_code == 200
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(project1.id)
+        assert response.data[0]['id'] == six.text_type(project1.id)
 
         response = self.client.get(self.path + '?status=deleted')
         assert response.status_code == 200
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(project2.id)
+        assert response.data[0]['id'] == six.text_type(project2.id)
 
     def test_query_filter(self):
         Project.objects.all().delete()
@@ -87,7 +89,7 @@ class ProjectsListTest(APITestCase):
         response = self.client.get(self.path + '?query=foo')
         assert response.status_code == 200
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(project1.id)
+        assert response.data[0]['id'] == six.text_type(project1.id)
 
         response = self.client.get(self.path + '?query=baz')
         assert response.status_code == 200
diff --git a/tests/sentry/api/endpoints/test_project_rule_details.py b/tests/sentry/api/endpoints/test_project_rule_details.py
index b63c83a3d8..3ae8955bb5 100644
--- a/tests/sentry/api/endpoints/test_project_rule_details.py
+++ b/tests/sentry/api/endpoints/test_project_rule_details.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 
 from sentry.models import Rule, RuleStatus
@@ -24,7 +26,7 @@ class ProjectRuleDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(rule.id)
+        assert response.data['id'] == six.text_type(rule.id)
 
 
 class UpdateProjectRuleTest(APITestCase):
@@ -55,7 +57,7 @@ class UpdateProjectRuleTest(APITestCase):
         }, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(rule.id)
+        assert response.data['id'] == six.text_type(rule.id)
 
         rule = Rule.objects.get(id=rule.id)
         assert rule.label == 'hello world'
diff --git a/tests/sentry/api/endpoints/test_project_search_details.py b/tests/sentry/api/endpoints/test_project_search_details.py
index 047bcc7c59..cccbe1726c 100644
--- a/tests/sentry/api/endpoints/test_project_search_details.py
+++ b/tests/sentry/api/endpoints/test_project_search_details.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 
 from sentry.models import SavedSearch, SavedSearchUserDefault
@@ -25,7 +27,7 @@ class ProjectSearchDetailsTest(APITestCase):
         response = self.client.get(url)
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(search.id)
+        assert response.data['id'] == six.text_type(search.id)
 
 
 class UpdateProjectSearchDetailsTest(APITestCase):
@@ -47,7 +49,7 @@ class UpdateProjectSearchDetailsTest(APITestCase):
         response = self.client.put(url, {'name': 'bar'})
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(search.id)
+        assert response.data['id'] == six.text_type(search.id)
 
         search = SavedSearch.objects.get(id=search.id)
         assert search.name == 'bar'
@@ -77,7 +79,7 @@ class UpdateProjectSearchDetailsTest(APITestCase):
         response = self.client.put(url, {'isDefault': True})
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(search.id)
+        assert response.data['id'] == six.text_type(search.id)
 
         search = SavedSearch.objects.get(id=search.id)
         assert search.is_default
@@ -115,7 +117,7 @@ class UpdateProjectSearchDetailsTest(APITestCase):
         response = self.client.put(url, {'isUserDefault': True})
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(search2.id)
+        assert response.data['id'] == six.text_type(search2.id)
 
         search = SavedSearch.objects.get(id=search.id)
         assert search.is_default
@@ -163,7 +165,7 @@ class UpdateProjectSearchDetailsTest(APITestCase):
         })
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(search.id)
+        assert response.data['id'] == six.text_type(search.id)
 
         search = SavedSearch.objects.get(id=search.id)
         assert search.name == 'foo'
diff --git a/tests/sentry/api/endpoints/test_project_searches.py b/tests/sentry/api/endpoints/test_project_searches.py
index 51880c4f0a..892a87507f 100644
--- a/tests/sentry/api/endpoints/test_project_searches.py
+++ b/tests/sentry/api/endpoints/test_project_searches.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 
 from sentry.models import SavedSearch, SavedSearchUserDefault
@@ -40,8 +42,8 @@ class ProjectSearchListTest(APITestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 2
-        assert response.data[0]['id'] == str(search1.id)
-        assert response.data[1]['id'] == str(search2.id)
+        assert response.data[0]['id'] == six.text_type(search1.id)
+        assert response.data[1]['id'] == six.text_type(search2.id)
 
 
 class ProjectSearchCreateTest(APITestCase):
diff --git a/tests/sentry/api/endpoints/test_project_tagkey_details.py b/tests/sentry/api/endpoints/test_project_tagkey_details.py
index 4d8aaf9874..e1759fd6ea 100644
--- a/tests/sentry/api/endpoints/test_project_tagkey_details.py
+++ b/tests/sentry/api/endpoints/test_project_tagkey_details.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import mock
+import six
 
 from django.core.urlresolvers import reverse
 
@@ -28,7 +29,7 @@ class ProjectTagKeyDetailsTest(APITestCase):
         response = self.client.get(url)
 
         assert response.status_code == 200
-        assert response.data['id'] == str(tagkey.id)
+        assert response.data['id'] == six.text_type(tagkey.id)
         assert response.data['uniqueValues'] == tagkey.values_seen
 
 
diff --git a/tests/sentry/api/endpoints/test_project_user_reports.py b/tests/sentry/api/endpoints/test_project_user_reports.py
index 16c2fc8b42..bfc1e49f44 100644
--- a/tests/sentry/api/endpoints/test_project_user_reports.py
+++ b/tests/sentry/api/endpoints/test_project_user_reports.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.testutils import APITestCase
 from sentry.models import GroupStatus, UserReport
 
@@ -49,7 +51,7 @@ class ProjectUserReportListTest(APITestCase):
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
         assert sorted(map(lambda x: x['id'], response.data)) == sorted([
-            str(report_1.id),
+            six.text_type(report_1.id),
         ])
 
     def test_all_reports(self):
@@ -76,7 +78,7 @@ class ProjectUserReportListTest(APITestCase):
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
         assert sorted(map(lambda x: x['id'], response.data)) == sorted([
-            str(report_1.id),
+            six.text_type(report_1.id),
         ])
 
 
diff --git a/tests/sentry/api/endpoints/test_project_users.py b/tests/sentry/api/endpoints/test_project_users.py
index 3e3a3a9cb8..35320ca2f0 100644
--- a/tests/sentry/api/endpoints/test_project_users.py
+++ b/tests/sentry/api/endpoints/test_project_users.py
@@ -1,6 +1,9 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
+
 from sentry.models import EventUser
 from sentry.testutils import APITestCase
 
@@ -39,8 +42,8 @@ class ProjectUsersTest(APITestCase):
         assert response.status_code == 200, response.content
         assert len(response.data) == 2
         assert sorted(map(lambda x: x['id'], response.data)) == sorted([
-            str(self.euser1.id),
-            str(self.euser2.id),
+            six.text_type(self.euser1.id),
+            six.text_type(self.euser2.id),
         ])
 
     def test_empty_search_query(self):
@@ -58,7 +61,7 @@ class ProjectUsersTest(APITestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(self.euser2.id)
+        assert response.data[0]['id'] == six.text_type(self.euser2.id)
 
         response = self.client.get('{}?query=username:ba'.format(self.path), format='json')
 
@@ -72,7 +75,7 @@ class ProjectUsersTest(APITestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(self.euser1.id)
+        assert response.data[0]['id'] == six.text_type(self.euser1.id)
 
         response = self.client.get('{}?query=email:@example.com'.format(self.path), format='json')
 
@@ -86,7 +89,7 @@ class ProjectUsersTest(APITestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(self.euser1.id)
+        assert response.data[0]['id'] == six.text_type(self.euser1.id)
 
         response = self.client.get('{}?query=id:3'.format(self.path), format='json')
 
@@ -100,7 +103,7 @@ class ProjectUsersTest(APITestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(self.euser2.id)
+        assert response.data[0]['id'] == six.text_type(self.euser2.id)
 
         response = self.client.get('{}?query=ip:0'.format(self.path), format='json')
 
diff --git a/tests/sentry/api/endpoints/test_release_file_details.py b/tests/sentry/api/endpoints/test_release_file_details.py
index 214feb019f..91f50e29a8 100644
--- a/tests/sentry/api/endpoints/test_release_file_details.py
+++ b/tests/sentry/api/endpoints/test_release_file_details.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 
 from sentry.models import File, Release, ReleaseFile
@@ -37,7 +39,7 @@ class ReleaseFileDetailsTest(APITestCase):
         response = self.client.get(url)
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(releasefile.id)
+        assert response.data['id'] == six.text_type(releasefile.id)
 
 
 class ReleaseFileUpdateTest(APITestCase):
@@ -73,7 +75,7 @@ class ReleaseFileUpdateTest(APITestCase):
         })
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(releasefile.id)
+        assert response.data['id'] == six.text_type(releasefile.id)
 
         releasefile = ReleaseFile.objects.get(id=releasefile.id)
         assert releasefile.name == 'foobar'
diff --git a/tests/sentry/api/endpoints/test_release_files.py b/tests/sentry/api/endpoints/test_release_files.py
index a69a4d4222..87ca8e67ed 100644
--- a/tests/sentry/api/endpoints/test_release_files.py
+++ b/tests/sentry/api/endpoints/test_release_files.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.files.uploadedfile import SimpleUploadedFile
 from django.core.urlresolvers import reverse
 
@@ -38,7 +40,7 @@ class ReleaseFilesListTest(APITestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(releasefile.id)
+        assert response.data[0]['id'] == six.text_type(releasefile.id)
 
 
 class ReleaseFileCreateTest(APITestCase):
diff --git a/tests/sentry/api/endpoints/test_shared_group_details.py b/tests/sentry/api/endpoints/test_shared_group_details.py
index d1a5f2c0cd..7fbcdac9e7 100644
--- a/tests/sentry/api/endpoints/test_shared_group_details.py
+++ b/tests/sentry/api/endpoints/test_shared_group_details.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import, print_function
 
+import six
+
 from sentry.testutils import APITestCase
 
 
@@ -14,8 +16,8 @@ class SharedGroupDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(group.id)
-        assert response.data['latestEvent']['id'] == str(event.id)
+        assert response.data['id'] == six.text_type(group.id)
+        assert response.data['latestEvent']['id'] == six.text_type(event.id)
         assert response.data['project']['slug'] == group.project.slug
         assert response.data['project']['organization']['slug'] == group.organization.slug
 
diff --git a/tests/sentry/api/endpoints/test_team_details.py b/tests/sentry/api/endpoints/test_team_details.py
index 473517ee6d..7a162c0db5 100644
--- a/tests/sentry/api/endpoints/test_team_details.py
+++ b/tests/sentry/api/endpoints/test_team_details.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 from mock import patch
 
@@ -17,7 +19,7 @@ class TeamDetailsTest(APITestCase):
         })
         response = self.client.get(url)
         assert response.status_code == 200
-        assert response.data['id'] == str(team.id)
+        assert response.data['id'] == six.text_type(team.id)
 
 
 class TeamUpdateTest(APITestCase):
diff --git a/tests/sentry/api/endpoints/test_team_groups_new.py b/tests/sentry/api/endpoints/test_team_groups_new.py
index cc3d1b2943..ebe76cb798 100644
--- a/tests/sentry/api/endpoints/test_team_groups_new.py
+++ b/tests/sentry/api/endpoints/test_team_groups_new.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.testutils import APITestCase
 
 
@@ -18,5 +20,5 @@ class TeamGroupsNewTest(APITestCase):
         response = self.client.get(url, format='json')
         assert response.status_code == 200
         assert len(response.data) == 2
-        assert response.data[0]['id'] == str(group1.id)
-        assert response.data[1]['id'] == str(group2.id)
+        assert response.data[0]['id'] == six.text_type(group1.id)
+        assert response.data[1]['id'] == six.text_type(group2.id)
diff --git a/tests/sentry/api/endpoints/test_team_groups_trending.py b/tests/sentry/api/endpoints/test_team_groups_trending.py
index 3e995e3c37..8ba580fed1 100644
--- a/tests/sentry/api/endpoints/test_team_groups_trending.py
+++ b/tests/sentry/api/endpoints/test_team_groups_trending.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from sentry.testutils import APITestCase
 
 
@@ -19,5 +21,5 @@ class TeamGroupsTrendingTest(APITestCase):
         response = self.client.get(url, format='json')
         assert response.status_code == 200
         assert len(response.data) == 2
-        assert response.data[0]['id'] == str(group1.id)
-        assert response.data[1]['id'] == str(group2.id)
+        assert response.data[0]['id'] == six.text_type(group1.id)
+        assert response.data[1]['id'] == six.text_type(group2.id)
diff --git a/tests/sentry/api/endpoints/test_team_members.py b/tests/sentry/api/endpoints/test_team_members.py
index b5bcf0c74d..4142c242ff 100644
--- a/tests/sentry/api/endpoints/test_team_members.py
+++ b/tests/sentry/api/endpoints/test_team_members.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 
 from sentry.testutils import APITestCase
@@ -21,4 +23,4 @@ class TeamMembersTest(APITestCase):
         response = self.client.get(url)
         assert response.status_code == 200
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(member.id)
+        assert response.data[0]['id'] == six.text_type(member.id)
diff --git a/tests/sentry/api/endpoints/test_team_project_index.py b/tests/sentry/api/endpoints/test_team_project_index.py
index 87ade6c5cd..6b03244a03 100644
--- a/tests/sentry/api/endpoints/test_team_project_index.py
+++ b/tests/sentry/api/endpoints/test_team_project_index.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 
 from sentry.models import Project
@@ -21,8 +23,8 @@ class TeamProjectIndexTest(APITestCase):
         assert response.status_code == 200
         assert len(response.data) == 2
         assert sorted(map(lambda x: x['id'], response.data)) == sorted([
-            str(project_1.id),
-            str(project_2.id),
+            six.text_type(project_1.id),
+            six.text_type(project_2.id),
         ])
 
 
diff --git a/tests/sentry/api/endpoints/test_user_avatar.py b/tests/sentry/api/endpoints/test_user_avatar.py
index 81ce36bf13..39b4a6570e 100644
--- a/tests/sentry/api/endpoints/test_user_avatar.py
+++ b/tests/sentry/api/endpoints/test_user_avatar.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 
 from sentry.models import UserAvatar
@@ -18,7 +20,7 @@ class UserAvatarTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == str(user.id)
+        assert response.data['id'] == six.text_type(user.id)
         assert response.data['avatar']['avatarType'] == 'letter_avatar'
         assert response.data['avatar']['avatarUuid'] is None
 
diff --git a/tests/sentry/api/endpoints/test_user_details.py b/tests/sentry/api/endpoints/test_user_details.py
index a410873ac4..32ca058034 100644
--- a/tests/sentry/api/endpoints/test_user_details.py
+++ b/tests/sentry/api/endpoints/test_user_details.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 
 from sentry.models import AuthIdentity, AuthProvider, User
@@ -20,7 +22,7 @@ class UserDetailsTest(APITestCase):
     #     resp = self.client.get(url, format='json')
 
     #     assert resp.status_code == 200, resp.content
-    #     assert resp.data['id'] == str(user.id)
+    #     assert resp.data['id'] == six.text_type(user.id)
     #     assert 'identities' not in resp.data
 
     def test_lookup_self(self):
@@ -45,7 +47,7 @@ class UserDetailsTest(APITestCase):
         resp = self.client.get(url, format='json')
 
         assert resp.status_code == 200, resp.content
-        assert resp.data['id'] == str(user.id)
+        assert resp.data['id'] == six.text_type(user.id)
         assert 'identities' in resp.data
         assert len(resp.data['identities']) == 1
         assert resp.data['identities'][0]['id'] == auth_identity.ident
@@ -62,7 +64,7 @@ class UserDetailsTest(APITestCase):
 
         resp = self.client.get(url)
         assert resp.status_code == 200, resp.content
-        assert resp.data['id'] == str(user.id)
+        assert resp.data['id'] == six.text_type(user.id)
         assert 'identities' in resp.data
         assert len(resp.data['identities']) == 0
 
@@ -82,7 +84,7 @@ class UserUpdateTest(APITestCase):
             'username': 'b@example.com',
         })
         assert resp.status_code == 200, resp.content
-        assert resp.data['id'] == str(user.id)
+        assert resp.data['id'] == six.text_type(user.id)
 
         user = User.objects.get(id=user.id)
         assert user.name == 'hello world'
@@ -106,7 +108,7 @@ class UserUpdateTest(APITestCase):
             'isActive': 'false',
         })
         assert resp.status_code == 200, resp.content
-        assert resp.data['id'] == str(user.id)
+        assert resp.data['id'] == six.text_type(user.id)
 
         user = User.objects.get(id=user.id)
         assert user.name == 'hello world'
diff --git a/tests/sentry/api/endpoints/test_user_organizations.py b/tests/sentry/api/endpoints/test_user_organizations.py
index 3418eb0031..5af3066f6f 100644
--- a/tests/sentry/api/endpoints/test_user_organizations.py
+++ b/tests/sentry/api/endpoints/test_user_organizations.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 
 from sentry.testutils import APITestCase
@@ -21,4 +23,4 @@ class UserOrganizationsTest(APITestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
-        assert response.data[0]['id'] == str(org.id)
+        assert response.data[0]['id'] == six.text_type(org.id)
diff --git a/tests/sentry/api/serializers/test_event.py b/tests/sentry/api/serializers/test_event.py
index e246d698ba..827c602367 100644
--- a/tests/sentry/api/serializers/test_event.py
+++ b/tests/sentry/api/serializers/test_event.py
@@ -2,6 +2,8 @@
 
 from __future__ import absolute_import
 
+import six
+
 from sentry.api.serializers import serialize
 from sentry.testutils import TestCase
 from sentry.models import EventError
@@ -12,7 +14,7 @@ class EventSerializerTest(TestCase):
         event = self.create_event(event_id='a')
 
         result = serialize(event)
-        assert result['id'] == str(event.id)
+        assert result['id'] == six.text_type(event.id)
         assert result['eventID'] == 'a'
 
     def test_eventerror(self):
diff --git a/tests/sentry/api/serializers/test_grouptagvalue.py b/tests/sentry/api/serializers/test_grouptagvalue.py
index 53a9f8da23..d328f092a3 100644
--- a/tests/sentry/api/serializers/test_grouptagvalue.py
+++ b/tests/sentry/api/serializers/test_grouptagvalue.py
@@ -2,6 +2,8 @@
 
 from __future__ import absolute_import
 
+import six
+
 from sentry.api.serializers import serialize
 from sentry.models import EventUser, GroupTagValue, TagValue
 from sentry.testutils import TestCase
@@ -28,7 +30,7 @@ class GroupTagValueSerializerTest(TestCase):
         )
 
         result = serialize(grouptagvalue, user)
-        assert result['id'] == str(grouptagvalue.id)
+        assert result['id'] == six.text_type(grouptagvalue.id)
         assert result['key'] == 'user'
         assert result['value'] == grouptagvalue.value
         assert result['name'] == euser.get_label()
@@ -44,7 +46,7 @@ class GroupTagValueSerializerTest(TestCase):
         )
 
         result = serialize(grouptagvalue, user)
-        assert result['id'] == str(grouptagvalue.id)
+        assert result['id'] == six.text_type(grouptagvalue.id)
         assert result['key'] == 'user'
         assert result['value'] == grouptagvalue.value
         assert result['name'] == grouptagvalue.value
diff --git a/tests/sentry/api/serializers/test_organization.py b/tests/sentry/api/serializers/test_organization.py
index 7d13669a60..222a4e03b1 100644
--- a/tests/sentry/api/serializers/test_organization.py
+++ b/tests/sentry/api/serializers/test_organization.py
@@ -2,6 +2,8 @@
 
 from __future__ import absolute_import
 
+import six
+
 from sentry.api.serializers import serialize
 from sentry.testutils import TestCase
 
@@ -12,4 +14,4 @@ class OrganizationSerializerTest(TestCase):
         organization = self.create_organization(owner=user)
 
         result = serialize(organization, user)
-        assert result['id'] == str(organization.id)
+        assert result['id'] == six.text_type(organization.id)
diff --git a/tests/sentry/api/serializers/test_tagvalue.py b/tests/sentry/api/serializers/test_tagvalue.py
index d0578b1cbd..e1af131f31 100644
--- a/tests/sentry/api/serializers/test_tagvalue.py
+++ b/tests/sentry/api/serializers/test_tagvalue.py
@@ -2,6 +2,8 @@
 
 from __future__ import absolute_import
 
+import six
+
 from sentry.api.serializers import serialize
 from sentry.models import EventUser, TagValue
 from sentry.testutils import TestCase
@@ -22,7 +24,7 @@ class TagValueSerializerTest(TestCase):
         )
 
         result = serialize(tagvalue, user)
-        assert result['id'] == str(tagvalue.id)
+        assert result['id'] == six.text_type(tagvalue.id)
         assert result['key'] == 'user'
         assert result['value'] == tagvalue.value
         assert result['name'] == euser.get_label()
@@ -37,7 +39,7 @@ class TagValueSerializerTest(TestCase):
         )
 
         result = serialize(tagvalue, user)
-        assert result['id'] == str(tagvalue.id)
+        assert result['id'] == six.text_type(tagvalue.id)
         assert result['key'] == 'user'
         assert result['value'] == tagvalue.value
         assert result['name'] == tagvalue.get_label()
diff --git a/tests/sentry/api/serializers/test_user.py b/tests/sentry/api/serializers/test_user.py
index 6603be8438..51bb8ba4b3 100644
--- a/tests/sentry/api/serializers/test_user.py
+++ b/tests/sentry/api/serializers/test_user.py
@@ -2,6 +2,8 @@
 
 from __future__ import absolute_import
 
+import six
+
 from sentry.api.serializers import serialize
 from sentry.testutils import TestCase
 from sentry.models import Authenticator
@@ -13,7 +15,7 @@ class UserSerializerTest(TestCase):
         user = self.create_user()
 
         result = serialize(user)
-        assert result['id'] == str(user.id)
+        assert result['id'] == six.text_type(user.id)
         assert result['has2fa'] is False
 
         Authenticator.objects.create(
@@ -22,5 +24,5 @@ class UserSerializerTest(TestCase):
         )
 
         result = serialize(user)
-        assert result['id'] == str(user.id)
+        assert result['id'] == six.text_type(user.id)
         assert result['has2fa'] is True
diff --git a/tests/sentry/auth/test_utils.py b/tests/sentry/auth/test_utils.py
index eacf01e26c..c68a1043a3 100644
--- a/tests/sentry/auth/test_utils.py
+++ b/tests/sentry/auth/test_utils.py
@@ -1,3 +1,5 @@
+from __future__ import absolute_import
+
 from django.http import HttpRequest
 from django.test.utils import override_settings
 
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index d0184cdd55..1992d4f588 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -117,7 +117,7 @@ class ProcessFingerprintTest(BaseAPITest):
 
 class ProcessDataTimestampTest(BaseAPITest):
     def test_iso_timestamp(self):
-        d = datetime(2012, 01, 01, 10, 30, 45)
+        d = datetime(2012, 1, 1, 10, 30, 45)
         data = self.helper._process_data_timestamp({
             'timestamp': '2012-01-01T10:30:45'
         }, current_datetime=d)
@@ -125,7 +125,7 @@ class ProcessDataTimestampTest(BaseAPITest):
         self.assertEquals(data['timestamp'], 1325413845.0)
 
     def test_iso_timestamp_with_ms(self):
-        d = datetime(2012, 01, 01, 10, 30, 45, 434000)
+        d = datetime(2012, 1, 1, 10, 30, 45, 434000)
         data = self.helper._process_data_timestamp({
             'timestamp': '2012-01-01T10:30:45.434'
         }, current_datetime=d)
@@ -133,7 +133,7 @@ class ProcessDataTimestampTest(BaseAPITest):
         self.assertEquals(data['timestamp'], 1325413845.0)
 
     def test_timestamp_iso_timestamp_with_Z(self):
-        d = datetime(2012, 01, 01, 10, 30, 45)
+        d = datetime(2012, 1, 1, 10, 30, 45)
         data = self.helper._process_data_timestamp({
             'timestamp': '2012-01-01T10:30:45Z'
         }, current_datetime=d)
@@ -156,7 +156,7 @@ class ProcessDataTimestampTest(BaseAPITest):
         })
 
     def test_long_microseconds_value(self):
-        d = datetime(2012, 01, 01, 10, 30, 45)
+        d = datetime(2012, 1, 1, 10, 30, 45)
         data = self.helper._process_data_timestamp({
             'timestamp': '2012-01-01T10:30:45.341324Z'
         }, current_datetime=d)
diff --git a/tests/sentry/data/tests.py b/tests/sentry/data/tests.py
index 897c74116e..475db8c44e 100644
--- a/tests/sentry/data/tests.py
+++ b/tests/sentry/data/tests.py
@@ -3,6 +3,7 @@
 from __future__ import absolute_import
 
 import os
+import six
 
 from sentry.constants import DATA_ROOT
 from sentry.testutils import TestCase
@@ -26,5 +27,6 @@ class DataGenerator(type):
         return super(DataGenerator, cls).__new__(cls, name, bases, attrs)
 
 
+@six.add_metaclass(DataGenerator)
 class DataTestCase(TestCase):
-    __metaclass__ = DataGenerator
+    pass
diff --git a/tests/sentry/db/__init__.py b/tests/sentry/db/__init__.py
index e69de29bb2..c3961685ab 100644
--- a/tests/sentry/db/__init__.py
+++ b/tests/sentry/db/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/db/models/__init__.py b/tests/sentry/db/models/__init__.py
index e69de29bb2..c3961685ab 100644
--- a/tests/sentry/db/models/__init__.py
+++ b/tests/sentry/db/models/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/digests/backends/test_redis.py b/tests/sentry/digests/backends/test_redis.py
index 6c22e38813..3c72a5e955 100644
--- a/tests/sentry/digests/backends/test_redis.py
+++ b/tests/sentry/digests/backends/test_redis.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import functools
 import itertools
 import mock
+import six
 import time
 
 from exam import fixture
@@ -37,13 +38,13 @@ class BaseRedisBackendTestCase(TestCase):
     @fixture
     def records(self):
         for i in itertools.count():
-            yield Record(str(i), str(i), float(i))
+            yield Record(six.text_type(i), six.text_type(i), float(i))
 
 
 class RedisScriptTestCase(BaseRedisBackendTestCase):
     def test_ensure_timeline_scheduled_script(self):
         cluster = clusters.get('default')
-        client = cluster.get_local_client(cluster.hosts.keys()[0])
+        client = cluster.get_local_client(six.next(iter(cluster.hosts)))
 
         timeline = 'timeline'
         timestamp = 100.0
@@ -96,7 +97,7 @@ class RedisScriptTestCase(BaseRedisBackendTestCase):
 
     def test_truncate_timeline_script(self):
         cluster = clusters.get('default')
-        client = cluster.get_local_client(cluster.hosts.keys()[0])
+        client = cluster.get_local_client(six.next(iter(cluster.hosts)))
 
         timeline = 'timeline'
 
@@ -158,7 +159,7 @@ class RedisBackendTestCase(BaseRedisBackendTestCase):
 
         with mock.patch('random.random', return_value=1.0):
             with self.assertChanges(get_timeline_size, before=0, after=fill):
-                for _ in xrange(fill):
+                for _ in range(fill):
                     backend.add(timeline, next(self.records))
 
         with mock.patch('random.random', return_value=0.0):
@@ -173,11 +174,11 @@ class RedisBackendTestCase(BaseRedisBackendTestCase):
 
         n = 10
 
-        for i in xrange(n):
+        for i in range(n):
             with backend.cluster.map() as client:
                 client.zadd(waiting_set_key, i, 'timelines:{0}'.format(i))
 
-        for i in xrange(n, n * 2):
+        for i in range(n, n * 2):
             with backend.cluster.map() as client:
                 client.zadd(ready_set_key, i, 'timelines:{0}'.format(i))
 
diff --git a/tests/sentry/digests/test_notifications.py b/tests/sentry/digests/test_notifications.py
index 9d8f7a91a4..aa58492f02 100644
--- a/tests/sentry/digests/test_notifications.py
+++ b/tests/sentry/digests/test_notifications.py
@@ -4,8 +4,8 @@ from collections import (
     OrderedDict,
     defaultdict,
 )
-
 from exam import fixture
+from six.moves import reduce
 
 from sentry.digests import Record
 from sentry.digests.notifications import (
@@ -81,7 +81,7 @@ class GroupRecordsTestCase(TestCase):
         return self.project.rule_set.all()[0]
 
     def test_success(self):
-        events = [self.create_event(group=self.group) for _ in xrange(3)]
+        events = [self.create_event(group=self.group) for _ in range(3)]
         records = [Record(event.id, Notification(event, [self.rule]), event.datetime) for event in events]
         assert reduce(group_records, records, defaultdict(lambda: defaultdict(list))) == {
             self.rule: {
@@ -107,7 +107,7 @@ class SortRecordsTestCase(TestCase):
         )
 
         rules = list(self.project.rule_set.all())
-        groups = [self.create_group() for _ in xrange(3)]
+        groups = [self.create_group() for _ in range(3)]
 
         groups[0].event_count = 10
         groups[0].user_count = 4
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index 216436b4ea..65bf4d206d 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -64,7 +64,6 @@ class ExceptionTest(TestCase):
 
     def test_to_string(self):
         result = self.interface.to_string(self.event)
-        print result
         assert result == """ValueError: hello world
   File "foo/baz.py", line 1
 
@@ -250,10 +249,10 @@ class SlimExceptionDataTest(TestCase):
 
     def test_over_max(self):
         values = []
-        for x in xrange(5):
+        for x in range(5):
             exc = {'value': 'exc %d' % x, 'stacktrace': {'frames': []}}
             values.append(exc)
-            for y in xrange(5):
+            for y in range(5):
                 exc['stacktrace']['frames'].append({
                     'filename': 'exc %d frame %d' % (x, y),
                     'vars': {'foo': 'bar'},
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index 22738dfcb5..0e7187e7f4 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -149,7 +149,7 @@ class StacktraceTest(TestCase):
             'lineno': 1,
             'filename': 'bar.py',
             'in_app': False,
-        } for _ in xrange(11)]
+        } for _ in range(11)]
         interface = Stacktrace.to_python(dict(frames=frames))
         result = interface.get_hash(system_frames=False)
         assert not result
@@ -486,7 +486,7 @@ class SlimFrameDataTest(TestCase):
 
     def test_over_max(self):
         values = []
-        for n in xrange(5):
+        for n in range(5):
             values.append({
                 'filename': 'frame %d' % n,
                 'vars': {'foo': 'bar'},
@@ -499,13 +499,13 @@ class SlimFrameDataTest(TestCase):
 
         assert len(interface.frames) == 5
 
-        for value, num in zip(interface.frames[:2], xrange(2)):
+        for value, num in zip(interface.frames[:2], range(2)):
             assert value.filename == 'frame %d' % num
             assert value.vars is not None
             assert value.pre_context is not None
             assert value.post_context is not None
 
-        for value, num in zip(interface.frames[3:], xrange(3, 5)):
+        for value, num in zip(interface.frames[3:], range(3, 5)):
             assert value.filename == 'frame %d' % num
             assert value.vars is not None
             assert value.pre_context is not None
diff --git a/tests/sentry/lang/javascript/test_processor.py b/tests/sentry/lang/javascript/test_processor.py
index 26c8878714..1488c28764 100644
--- a/tests/sentry/lang/javascript/test_processor.py
+++ b/tests/sentry/lang/javascript/test_processor.py
@@ -4,6 +4,7 @@ from __future__ import absolute_import
 
 import pytest
 import responses
+import six
 
 from mock import patch
 from requests.exceptions import RequestException
@@ -95,7 +96,7 @@ class FetchFileTest(TestCase):
         result = fetch_file('/example.js', release=release)
         assert result.url == '/example.js'
         assert result.body == 'foo'
-        assert isinstance(result.body, unicode)
+        assert isinstance(result.body, six.text_type)
         assert result.headers == {'content-type': 'application/json'}
 
     @patch('sentry.lang.javascript.processor.fetch_release_file')
@@ -335,7 +336,7 @@ class ErrorMappingTest(TestCase):
         }
         ''', content_type='application/json')
 
-        for x in xrange(3):
+        for x in range(3):
             data = {
                 'platform': 'javascript',
                 'sentry.interfaces.Exception': {
diff --git a/tests/sentry/lang/native/__init__.py b/tests/sentry/lang/native/__init__.py
index e69de29bb2..c3961685ab 100644
--- a/tests/sentry/lang/native/__init__.py
+++ b/tests/sentry/lang/native/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/lang/native/test_utils.py b/tests/sentry/lang/native/test_utils.py
index 89d470f2a2..1fd60885ef 100644
--- a/tests/sentry/lang/native/test_utils.py
+++ b/tests/sentry/lang/native/test_utils.py
@@ -1,3 +1,5 @@
+from __future__ import absolute_import
+
 from sentry.lang.native.utils import get_sdk_from_event
 
 
diff --git a/tests/sentry/logging/test_handler.py b/tests/sentry/logging/test_handler.py
index 9b7961f1a0..dae650add5 100644
--- a/tests/sentry/logging/test_handler.py
+++ b/tests/sentry/logging/test_handler.py
@@ -1,3 +1,5 @@
+from __future__ import absolute_import
+
 import pytest
 import logging
 import mock
diff --git a/tests/sentry/middleware/__init__.py b/tests/sentry/middleware/__init__.py
index e69de29bb2..c3961685ab 100644
--- a/tests/sentry/middleware/__init__.py
+++ b/tests/sentry/middleware/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/models/test_file.py b/tests/sentry/models/test_file.py
index adde02383b..0f85fe4bfa 100644
--- a/tests/sentry/models/test_file.py
+++ b/tests/sentry/models/test_file.py
@@ -8,7 +8,7 @@ from sentry.testutils import TestCase
 
 class FileBlobTest(TestCase):
     def test_from_file(self):
-        fileobj = ContentFile("foo bar")
+        fileobj = ContentFile('foo bar'.encode('utf-8'))
 
         my_file1 = FileBlob.from_file(fileobj)
 
@@ -23,7 +23,7 @@ class FileBlobTest(TestCase):
 
 class FileTest(TestCase):
     def test_file_handling(self):
-        fileobj = ContentFile("foo bar")
+        fileobj = ContentFile('foo bar'.encode('utf-8'))
         file1 = File.objects.create(
             name='baz.js',
             type='default',
@@ -37,16 +37,16 @@ class FileTest(TestCase):
 
         fp = None
         with file1.getfile() as fp:
-            assert fp.read() == 'foo bar'
+            assert fp.read().decode('utf-8') == 'foo bar'
             fp.seek(2)
             fp.tell() == 2
-            assert fp.read() == 'o bar'
+            assert fp.read().decode('utf-8') == 'o bar'
             fp.seek(0)
             fp.tell() == 0
-            assert fp.read() == 'foo bar'
+            assert fp.read().decode('utf-8') == 'foo bar'
             fp.seek(4)
             fp.tell() == 4
-            assert fp.read() == 'bar'
+            assert fp.read().decode('utf-8') == 'bar'
             fp.seek(1000)
             fp.tell() == 1000
 
diff --git a/tests/sentry/models/test_group.py b/tests/sentry/models/test_group.py
index 716e515fb8..72b14ef74e 100644
--- a/tests/sentry/models/test_group.py
+++ b/tests/sentry/models/test_group.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from datetime import datetime, timedelta
 
 import pytest
@@ -41,9 +43,9 @@ class GroupTest(TestCase):
 
     def test_get_oldest_latest_events(self):
         group = self.create_group()
-        for i in xrange(0, 3):
+        for i in range(0, 3):
             self.create_event(
-                event_id=str(i),
+                event_id=six.text_type(i),
                 group=group,
                 datetime=datetime(2013, 8, 13, 3, 8, i),
             )
@@ -53,9 +55,9 @@ class GroupTest(TestCase):
 
     def test_get_oldest_latest_identical_timestamps(self):
         group = self.create_group()
-        for i in xrange(0, 3):
+        for i in range(0, 3):
             self.create_event(
-                event_id=str(i),
+                event_id=six.text_type(i),
                 group=group,
                 datetime=datetime(2013, 8, 13, 3, 8, 50),
             )
@@ -70,9 +72,9 @@ class GroupTest(TestCase):
             group=group,
             datetime=datetime(2013, 8, 13, 3, 8, 0),  # earliest
         )
-        for i in xrange(1, 3):
+        for i in range(1, 3):
             self.create_event(
-                event_id=str(i),
+                event_id=six.text_type(i),
                 group=group,
                 datetime=datetime(2013, 8, 13, 3, 8, 30),  # all in the middle
             )
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index ffc6025685..0df6c03d65 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -3,6 +3,7 @@
 from __future__ import absolute_import
 
 import mock
+import six
 
 from django.core import mail
 from django.utils import timezone
@@ -303,7 +304,7 @@ class MailPluginTest(TestCase):
             type=Activity.ASSIGNED,
             user=self.create_user('foo@example.com'),
             data={
-                'assignee': str(self.user.id),
+                'assignee': six.text_type(self.user.id),
             },
         )
 
diff --git a/tests/sentry/quotas/redis/tests.py b/tests/sentry/quotas/redis/tests.py
index c1b8224d5b..80a2daefe4 100644
--- a/tests/sentry/quotas/redis/tests.py
+++ b/tests/sentry/quotas/redis/tests.py
@@ -2,9 +2,10 @@
 
 from __future__ import absolute_import
 
+import mock
+import six
 import time
 
-import mock
 from exam import fixture, patcher
 
 from sentry.quotas.redis import (
@@ -19,7 +20,7 @@ def test_is_rate_limited_script():
     now = int(time.time())
 
     cluster = clusters.get('default')
-    client = cluster.get_local_client(cluster.hosts.keys()[0])
+    client = cluster.get_local_client(six.next(iter(cluster.hosts)))
 
     # The item should not be rate limited by either key.
     assert map(bool, is_rate_limited(client, ('foo', 'bar'), (1, now + 60, 2, now + 120))) == [False, False]
diff --git a/tests/sentry/rules/conditions/test_event_frequency.py b/tests/sentry/rules/conditions/test_event_frequency.py
index 3133ca809c..de6ba7a7ad 100644
--- a/tests/sentry/rules/conditions/test_event_frequency.py
+++ b/tests/sentry/rules/conditions/test_event_frequency.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from datetime import timedelta
 from django.utils import timezone
 
@@ -16,7 +18,7 @@ class EventFrequencyConditionTest(RuleTestCase):
         value = 10
         rule = self.get_rule({
             'interval': Interval.ONE_MINUTE,
-            'value': str(value),
+            'value': six.text_type(value),
         })
 
         tsdb.incr(
@@ -40,7 +42,7 @@ class EventFrequencyConditionTest(RuleTestCase):
         value = 10
         rule = self.get_rule({
             'interval': Interval.ONE_HOUR,
-            'value': str(value),
+            'value': six.text_type(value),
         })
 
         tsdb.incr(
@@ -64,7 +66,7 @@ class EventFrequencyConditionTest(RuleTestCase):
         value = 10
         rule = self.get_rule({
             'interval': Interval.ONE_DAY,
-            'value': str(value),
+            'value': six.text_type(value),
         })
 
         tsdb.incr(
@@ -88,7 +90,7 @@ class EventFrequencyConditionTest(RuleTestCase):
         value = 10
         rule = self.get_rule({
             'interval': Interval.ONE_HOUR,
-            'value': str(value),
+            'value': six.text_type(value),
         })
 
         self.assertDoesNotPass(rule, event)
diff --git a/tests/sentry/runner/__init__.py b/tests/sentry/runner/__init__.py
index e69de29bb2..c3961685ab 100644
--- a/tests/sentry/runner/__init__.py
+++ b/tests/sentry/runner/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/runner/commands/__init__.py b/tests/sentry/runner/commands/__init__.py
index e69de29bb2..c3961685ab 100644
--- a/tests/sentry/runner/commands/__init__.py
+++ b/tests/sentry/runner/commands/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/runner/commands/test_init.py b/tests/sentry/runner/commands/test_init.py
index 594be2c144..04ea291a44 100644
--- a/tests/sentry/runner/commands/test_init.py
+++ b/tests/sentry/runner/commands/test_init.py
@@ -3,6 +3,8 @@
 from __future__ import absolute_import
 
 import os
+import six
+
 from sentry.testutils import CliTestCase
 from sentry.runner.commands.init import init
 
@@ -19,7 +21,8 @@ class InitTest(CliTestCase):
 
             # Make sure the python file is valid
             ctx = {'__file__': 'sentry.conf.py'}
-            execfile('config/sentry.conf.py', ctx)
+            with open('config/sentry.conf.py') as fp:
+                six.exec_(fp.read(), ctx)
             assert 'DEBUG' in ctx
 
             # Make sure the yaml file is valid
diff --git a/tests/sentry/runner/test_initializer.py b/tests/sentry/runner/test_initializer.py
index 85beebbafa..09fa7ee711 100644
--- a/tests/sentry/runner/test_initializer.py
+++ b/tests/sentry/runner/test_initializer.py
@@ -1,6 +1,8 @@
 from __future__ import absolute_import
 
 import pytest
+import six
+
 from sentry.runner.importer import ConfigurationError
 from sentry.runner.initializer import bootstrap_options, apply_legacy_settings
 
@@ -51,7 +53,7 @@ mail.from: my-mail-from
 mail.subject-prefix: my-mail-subject-prefix
 """)
 
-    bootstrap_options(settings, str(config_yml))
+    bootstrap_options(settings, six.text_type(config_yml))
     assert settings.SENTRY_OPTIONS == {
         'something.else': True,
         'foo.bar': 'my-foo-bar',
@@ -79,11 +81,11 @@ mail.subject-prefix: my-mail-subject-prefix
 def test_bootstrap_options_malformed_yml(settings, config_yml):
     config_yml.write('1')
     with pytest.raises(ConfigurationError):
-        bootstrap_options(settings, str(config_yml))
+        bootstrap_options(settings, six.text_type(config_yml))
 
     config_yml.write('{{{')
     with pytest.raises(ConfigurationError):
-        bootstrap_options(settings, str(config_yml))
+        bootstrap_options(settings, six.text_type(config_yml))
 
 
 def test_bootstrap_options_no_config(settings):
@@ -154,7 +156,7 @@ def test_bootstrap_options_missing_file(settings):
 
 def test_bootstrap_options_empty_file(settings, config_yml):
     config_yml.write('')
-    bootstrap_options(settings, str(config_yml))
+    bootstrap_options(settings, six.text_type(config_yml))
     assert settings.SENTRY_OPTIONS == {}
 
 
diff --git a/tests/sentry/search/test_utils.py b/tests/sentry/search/test_utils.py
index 7662458f73..02f586597f 100644
--- a/tests/sentry/search/test_utils.py
+++ b/tests/sentry/search/test_utils.py
@@ -144,13 +144,13 @@ class ParseQueryTest(TestCase):
 
     def test_date_range(self):
         result = self.parse_query('event.timestamp:>2016-01-01 event.timestamp:<2016-01-02')
-        assert result['date_from'] == datetime(2016, 01, 01, 0, 0, 0, 0, timezone.utc)
+        assert result['date_from'] == datetime(2016, 1, 1, tzinfo=timezone.utc)
         assert result['date_from_inclusive']
-        assert result['date_to'] == datetime(2016, 01, 02, 0, 0, 0, 0, timezone.utc)
+        assert result['date_to'] == datetime(2016, 1, 2, tzinfo=timezone.utc)
         assert not result['date_to_inclusive']
 
     def test_date_approx_day(self):
-        date_value = datetime(2016, 01, 01, 0, 0, 0, 0, timezone.utc)
+        date_value = datetime(2016, 1, 1, tzinfo=timezone.utc)
         result = self.parse_query('event.timestamp:2016-01-01')
         assert result['date_from'] == date_value
         assert result['date_from_inclusive']
@@ -158,7 +158,7 @@ class ParseQueryTest(TestCase):
         assert not result['date_to_inclusive']
 
     def test_date_approx_precise(self):
-        date_value = datetime(2016, 01, 01, 0, 0, 0, 0, timezone.utc)
+        date_value = datetime(2016, 1, 1, tzinfo=timezone.utc)
         result = self.parse_query('event.timestamp:2016-01-01T00:00:00')
         assert result['date_from'] == date_value - timedelta(minutes=5)
         assert result['date_from_inclusive']
diff --git a/tests/sentry/services/__init__.py b/tests/sentry/services/__init__.py
index e69de29bb2..c3961685ab 100644
--- a/tests/sentry/services/__init__.py
+++ b/tests/sentry/services/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/services/test_http.py b/tests/sentry/services/test_http.py
index f684511c05..75cbf2b28b 100644
--- a/tests/sentry/services/test_http.py
+++ b/tests/sentry/services/test_http.py
@@ -12,7 +12,6 @@ class HTTPServiceTest(TestCase):
             'false': False,
             'string': 'foo',
             'int': 1,
-            'long': 1L,
             'none': None,
             'hy-phen': 'foo',
         }
@@ -21,7 +20,6 @@ class HTTPServiceTest(TestCase):
             ('UWSGI_FALSE', 'false'),
             ('UWSGI_STRING', 'foo'),
             ('UWSGI_INT', '1'),
-            ('UWSGI_LONG', '1'),
             ('UWSGI_HY_PHEN', 'foo'),
         ]
         assert set(convert_options_to_env(options)) == set(expected)
diff --git a/tests/sentry/tasks/test_activity.py b/tests/sentry/tasks/test_activity.py
index 00098a3a27..9f2c5933ac 100644
--- a/tests/sentry/tasks/test_activity.py
+++ b/tests/sentry/tasks/test_activity.py
@@ -22,7 +22,6 @@ class ActivityNotificationsTest(PluginTestCase):
     @mock.patch('sentry.tasks.activity.send_activity_notifications')
     def test_simple(self, mock_func):
         group = self.create_group()
-        print mock_func
 
         activity = Activity.objects.create(
             project=group.project,
diff --git a/tests/sentry/tasks/test_merge.py b/tests/sentry/tasks/test_merge.py
index 191f524cf0..05a1e1d9f4 100644
--- a/tests/sentry/tasks/test_merge.py
+++ b/tests/sentry/tasks/test_merge.py
@@ -32,7 +32,7 @@ class MergeGroupTest(TestCase):
         assert event2.data['foo'] == 'baz'
 
     def test_merge_creates_redirect(self):
-        groups = [self.create_group() for _ in xrange(0, 3)]
+        groups = [self.create_group() for _ in range(0, 3)]
 
         with self.tasks():
             merge_group(groups[0].id, groups[1].id)
@@ -53,7 +53,7 @@ class MergeGroupTest(TestCase):
 
     def test_merge_updates_tag_values_seen(self):
         project = self.create_project()
-        groups = [self.create_group(project) for _ in xrange(0, 2)]
+        groups = [self.create_group(project) for _ in range(0, 2)]
 
         for group in groups:
             GroupTagKey.objects.create(
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index 91eee1d73c..7e97a60171 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -878,5 +878,5 @@ class GenerateCulpritTest(TestCase):
         assert len(generate_culprit(data)) == MAX_CULPRIT_LENGTH
 
     def test_md5_from_hash(self):
-        result = md5_from_hash(['foo', 'bar', 'foô'])
+        result = md5_from_hash(['foo', 'bar', u'foô'])
         assert result == '6d81588029ed4190110b2779ba952a00'
diff --git a/tests/sentry/test_http.py b/tests/sentry/test_http.py
index 84be150909..ad84f19732 100644
--- a/tests/sentry/test_http.py
+++ b/tests/sentry/test_http.py
@@ -1,11 +1,11 @@
 from __future__ import absolute_import
 
+import ipaddress
 import platform
 import responses
 import pytest
 
 from django.core.exceptions import SuspiciousOperation
-from ipaddr import IPNetwork
 from mock import patch
 
 from sentry import http
@@ -21,7 +21,7 @@ class HttpTest(TestCase):
 
         resp = http.safe_urlopen('http://example.com')
         data = http.safe_urlread(resp)
-        assert data == 'foo bar'
+        assert data.decode('utf-8') == 'foo bar'
 
         request = responses.calls[0].request
         assert 'User-Agent' in request.headers
@@ -30,7 +30,11 @@ class HttpTest(TestCase):
     # XXX(dcramer): we can't use responses here as it hooks Session.send
     # @responses.activate
     def test_ip_blacklist(self):
-        http.DISALLOWED_IPS = set([IPNetwork('127.0.0.1'), IPNetwork('::1'), IPNetwork('10.0.0.0/8')])
+        http.DISALLOWED_IPS = set([
+            ipaddress.ip_network(u'127.0.0.1'),
+            ipaddress.ip_network(u'::1'),
+            ipaddress.ip_network(u'10.0.0.0/8'),
+        ])
         with pytest.raises(SuspiciousOperation):
             http.safe_urlopen('http://127.0.0.1')
         with pytest.raises(SuspiciousOperation):
@@ -45,7 +49,7 @@ class HttpTest(TestCase):
     @pytest.mark.skipif(platform.system() == 'Darwin',
                         reason='macOS is always broken, see comment in sentry/http.py')
     def test_garbage_ip(self):
-        http.DISALLOWED_IPS = set([IPNetwork('127.0.0.1')])
+        http.DISALLOWED_IPS = set([ipaddress.ip_network(u'127.0.0.1')])
         with pytest.raises(SuspiciousOperation):
             # '0177.0000.0000.0001' is an octal for '127.0.0.1'
             http.safe_urlopen('http://0177.0000.0000.0001')
diff --git a/tests/sentry/tsdb/test_redis.py b/tests/sentry/tsdb/test_redis.py
index 33ea0aa17b..7f6c63205e 100644
--- a/tests/sentry/tsdb/test_redis.py
+++ b/tests/sentry/tsdb/test_redis.py
@@ -43,7 +43,7 @@ class RedisTSDBTest(TestCase):
 
     def test_simple(self):
         now = datetime.utcnow().replace(tzinfo=pytz.UTC)
-        dts = [now + timedelta(hours=i) for i in xrange(4)]
+        dts = [now + timedelta(hours=i) for i in range(4)]
 
         def timestamp(d):
             t = int(to_timestamp(d))
@@ -84,7 +84,7 @@ class RedisTSDBTest(TestCase):
 
     def test_count_distinct(self):
         now = datetime.utcnow().replace(tzinfo=pytz.UTC)
-        dts = [now + timedelta(hours=i) for i in xrange(4)]
+        dts = [now + timedelta(hours=i) for i in range(4)]
 
         model = TSDBModel.users_affected_by_group
 
diff --git a/tests/sentry/utils/hashlib/tests.py b/tests/sentry/utils/hashlib/tests.py
index 5f7e8a9b26..1e6869183a 100644
--- a/tests/sentry/utils/hashlib/tests.py
+++ b/tests/sentry/utils/hashlib/tests.py
@@ -2,15 +2,15 @@
 
 from __future__ import absolute_import
 
-from sentry.utils.hashlib import md5, sha1
+from sentry.utils.hashlib import md5_text, sha1_text
 from sentry.testutils import TestCase
 
 
 class HashlibTest(TestCase):
     def test_simple(self):
-        md5('x').hexdigest() == '9dd4e461268c8034f5c8564e155c67a6'
-        sha1('x').hexdigest() == '11f6ad8ec52a2984abaafd7c3b516503785c2072'
+        md5_text('x').hexdigest() == '9dd4e461268c8034f5c8564e155c67a6'
+        sha1_text('x').hexdigest() == '11f6ad8ec52a2984abaafd7c3b516503785c2072'
 
     def test_unicode(self):
-        md5(u'ü').hexdigest() == 'c03410a5204b21cd8229ff754688d743'
-        sha1(u'ü').hexdigest() == '94a759fd37735430753c7b6b80684306d80ea16e'
+        md5_text(u'ü').hexdigest() == 'c03410a5204b21cd8229ff754688d743'
+        sha1_text(u'ü').hexdigest() == '94a759fd37735430753c7b6b80684306d80ea16e'
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index c66d6a4c1a..f85893ae96 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -206,5 +206,5 @@ class IsValidIPTestCase(TestCase):
         assert not self.is_valid_ip('127.0.0.1', ['0.0.0.0', '127.0.0.1', '192.168.1.1'])
 
     def test_match_blacklist_range(self):
-        assert not self.is_valid_ip('127.0.0.1', ['127.0.0.1/8'])
+        assert not self.is_valid_ip('127.0.0.1', ['127.0.0.0/8'])
         assert not self.is_valid_ip('127.0.0.1', ['0.0.0.0', '127.0.0.0/8', '192.168.1.0/8'])
diff --git a/tests/sentry/utils/locking/__init__.py b/tests/sentry/utils/locking/__init__.py
index e69de29bb2..c3961685ab 100644
--- a/tests/sentry/utils/locking/__init__.py
+++ b/tests/sentry/utils/locking/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/utils/locking/backends/__init__.py b/tests/sentry/utils/locking/backends/__init__.py
index e69de29bb2..c3961685ab 100644
--- a/tests/sentry/utils/locking/backends/__init__.py
+++ b/tests/sentry/utils/locking/backends/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/utils/locking/backends/test_redis.py b/tests/sentry/utils/locking/backends/test_redis.py
index e95af8103f..8a4d2bf984 100644
--- a/tests/sentry/utils/locking/backends/test_redis.py
+++ b/tests/sentry/utils/locking/backends/test_redis.py
@@ -1,4 +1,7 @@
+from __future__ import absolute_import
+
 import pytest
+
 from exam import fixture
 
 from sentry.testutils import TestCase
diff --git a/tests/sentry/utils/locking/test_lock.py b/tests/sentry/utils/locking/test_lock.py
index 468e67637c..6b2e9cb909 100644
--- a/tests/sentry/utils/locking/test_lock.py
+++ b/tests/sentry/utils/locking/test_lock.py
@@ -1,3 +1,5 @@
+from __future__ import absolute_import
+
 import mock
 import pytest
 
diff --git a/tests/sentry/utils/models/tests.py b/tests/sentry/utils/models/tests.py
index 431746a87b..687675ca13 100644
--- a/tests/sentry/utils/models/tests.py
+++ b/tests/sentry/utils/models/tests.py
@@ -39,10 +39,10 @@ class ModelTest(TestCase):
 
     def test_large_int(self):
         with self.assertRaises(AssertionError):
-            DummyModel.objects.create(normint=9223372036854775807L, foo='bar')
+            DummyModel.objects.create(normint=int(9223372036854775807), foo='bar')
 
         with self.assertRaises(AssertionError):
-            DummyModel.objects.create(bigint=9223372036854775808L, foo='bar')
+            DummyModel.objects.create(bigint=int(9223372036854775808), foo='bar')
 
         with self.assertRaises(AssertionError):
-            DummyModel.objects.create(posint=9223372036854775808L, foo='bar')
+            DummyModel.objects.create(posint=int(9223372036854775808), foo='bar')
diff --git a/tests/sentry/utils/test_csp.py b/tests/sentry/utils/test_csp.py
index 1796113178..eed048a48b 100644
--- a/tests/sentry/utils/test_csp.py
+++ b/tests/sentry/utils/test_csp.py
@@ -1,4 +1,7 @@
+from __future__ import absolute_import
+
 import pytest
+
 from sentry.utils.csp import is_valid_csp_report
 
 
diff --git a/tests/sentry/utils/test_data_scrubber.py b/tests/sentry/utils/test_data_scrubber.py
index 6036a7a9b1..b3f9096816 100644
--- a/tests/sentry/utils/test_data_scrubber.py
+++ b/tests/sentry/utils/test_data_scrubber.py
@@ -59,7 +59,7 @@ class SensitiveDataFilterTest(TestCase):
             'sentry.interfaces.Http': {
                 'data': VARS,
                 'env': VARS,
-                'headers': VARS.items(),
+                'headers': list(VARS.items()),
                 'cookies': VARS,
             }
         }
@@ -125,7 +125,7 @@ class SensitiveDataFilterTest(TestCase):
             'moar_other_field': 'another value'
         }
         data = {
-            'extra': dict(VARS.items() + additional_sensitive_dict.items())
+            'extra': dict(list(VARS.items()) + list(additional_sensitive_dict.items()))
         }
 
         proc = SensitiveDataFilter(additional_sensitive_dict.keys())
diff --git a/tests/sentry/utils/test_letter_avatar.py b/tests/sentry/utils/test_letter_avatar.py
index 8df0887828..2c1dc71c7b 100644
--- a/tests/sentry/utils/test_letter_avatar.py
+++ b/tests/sentry/utils/test_letter_avatar.py
@@ -1,3 +1,5 @@
+from __future__ import absolute_import
+
 from sentry.utils.avatar import get_letter_avatar
 
 
diff --git a/tests/sentry/utils/test_numbers.py b/tests/sentry/utils/test_numbers.py
index ed7a91d015..c29ba8a953 100644
--- a/tests/sentry/utils/test_numbers.py
+++ b/tests/sentry/utils/test_numbers.py
@@ -1,9 +1,11 @@
+from __future__ import absolute_import
+
 from sentry.utils.numbers import base36_encode, base36_decode, \
     base32_encode, base32_decode
 
 
 def test_base36():
-    assert [base36_encode(x) for x in xrange(128)] == [
+    assert [base36_encode(x) for x in range(128)] == [
         '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C',
         'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
         'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '10', '11',
@@ -18,11 +20,11 @@ def test_base36():
         '3I', '3J'
     ]
 
-    assert [base36_decode(base36_encode(x)) for x in xrange(128)] == range(128)
+    assert [base36_decode(base36_encode(x)) for x in range(128)] == map(int, range(128))
 
 
 def test_base32():
-    assert [base32_encode(x) for x in xrange(128)] == [
+    assert [base32_encode(x) for x in range(128)] == [
         '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C',
         'D', 'E', 'F', 'G', 'H', 'J', 'K', 'M', 'N', 'P', 'Q', 'R', 'S',
         'T', 'V', 'W', 'X', 'Y', 'Z', '10', '11', '12', '13', '14', '15',
@@ -37,4 +39,4 @@ def test_base32():
         '3Y', '3Z'
     ]
 
-    assert [base32_decode(base32_encode(x)) for x in xrange(128)] == range(128)
+    assert [base32_decode(base32_encode(x)) for x in range(128)] == map(int, range(128))
diff --git a/tests/sentry/utils/test_redis.py b/tests/sentry/utils/test_redis.py
index 579647e6a5..6ed0f1b1a0 100644
--- a/tests/sentry/utils/test_redis.py
+++ b/tests/sentry/utils/test_redis.py
@@ -1,5 +1,6 @@
-import functools
+from __future__ import absolute_import
 
+import functools
 import pytest
 
 from sentry.exceptions import InvalidConfiguration
diff --git a/tests/sentry/utils/test_retries.py b/tests/sentry/utils/test_retries.py
index e9f795eab2..b9e8f1f934 100644
--- a/tests/sentry/utils/test_retries.py
+++ b/tests/sentry/utils/test_retries.py
@@ -1,3 +1,5 @@
+from __future__ import absolute_import
+
 import mock
 
 from sentry.testutils import TestCase
diff --git a/tests/sentry/utils/test_safe.py b/tests/sentry/utils/test_safe.py
index c64610a23e..bc4ba5fbfb 100644
--- a/tests/sentry/utils/test_safe.py
+++ b/tests/sentry/utils/test_safe.py
@@ -18,7 +18,7 @@ class TrimTest(TestCase):
 
 class TrimDictTest(TestCase):
     def test_large_dict(self):
-        value = dict((k, k) for k in xrange(500))
+        value = dict((k, k) for k in range(500))
         trim_dict(value)
         assert len(value) == 50
 
diff --git a/tests/sentry/utils/test_strings.py b/tests/sentry/utils/test_strings.py
index e89fb71fdd..ef22cb4436 100644
--- a/tests/sentry/utils/test_strings.py
+++ b/tests/sentry/utils/test_strings.py
@@ -1,3 +1,5 @@
+from __future__ import absolute_import
+
 import functools
 
 from sentry.utils.strings import (
diff --git a/tests/sentry/utils/test_zip.py b/tests/sentry/utils/test_zip.py
index 4d96fb0aec..4455a03b4f 100644
--- a/tests/sentry/utils/test_zip.py
+++ b/tests/sentry/utils/test_zip.py
@@ -1,3 +1,5 @@
+from __future__ import absolute_import
+
 from sentry.utils.zip import is_unsafe_path, find_common_prefix
 
 
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index 22c83159fc..794d7513fc 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -3,6 +3,7 @@
 from __future__ import absolute_import
 
 import mock
+import six
 
 from django.core.urlresolvers import reverse
 from exam import fixture
@@ -58,7 +59,7 @@ class SettingsTest(TestCase):
             'email': 'admin@localhost',
             'name': 'Foo bar',
         }
-        return dict((k, v) for k, v in params.iteritems() if k not in without)
+        return dict((k, v) for k, v in six.iteritems(params) if k not in without)
 
     def test_requires_authentication(self):
         self.assertRequiresAuthentication(self.path)
@@ -187,7 +188,7 @@ class NotificationSettingsTest(TestCase):
         params = {
             'alert_email': 'foo@example.com',
         }
-        return dict((k, v) for k, v in params.iteritems() if k not in without)
+        return dict((k, v) for k, v in six.iteritems(params) if k not in without)
 
     def test_requires_authentication(self):
         self.assertRequiresAuthentication(self.path)
diff --git a/tests/sentry/web/frontend/generic/__init__.py b/tests/sentry/web/frontend/generic/__init__.py
index e69de29bb2..c3961685ab 100644
--- a/tests/sentry/web/frontend/generic/__init__.py
+++ b/tests/sentry/web/frontend/generic/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/web/frontend/test_auth_organization_login.py b/tests/sentry/web/frontend/test_auth_organization_login.py
index 949c2f9cae..f20b440e7d 100644
--- a/tests/sentry/web/frontend/test_auth_organization_login.py
+++ b/tests/sentry/web/frontend/test_auth_organization_login.py
@@ -48,7 +48,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         resp = self.client.post(path)
 
         assert resp.status_code == 200
-        assert self.provider.TEMPLATE in resp.content
+        assert self.provider.TEMPLATE in resp.content.decode('utf-8')
 
         path = reverse('sentry-auth-sso')
 
@@ -92,7 +92,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         resp = self.client.post(path)
 
         assert resp.status_code == 200
-        assert self.provider.TEMPLATE in resp.content
+        assert self.provider.TEMPLATE in resp.content.decode('utf-8')
 
         path = reverse('sentry-auth-sso')
 
@@ -138,7 +138,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         resp = self.client.post(path)
 
         assert resp.status_code == 200
-        assert self.provider.TEMPLATE in resp.content
+        assert self.provider.TEMPLATE in resp.content.decode('utf-8')
 
         path = reverse('sentry-auth-sso')
 
@@ -160,7 +160,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         resp = self.client.post(path)
 
         assert resp.status_code == 200
-        assert self.provider.TEMPLATE in resp.content
+        assert self.provider.TEMPLATE in resp.content.decode('utf-8')
 
         path = reverse('sentry-auth-sso')
 
@@ -205,7 +205,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         resp = self.client.post(path)
 
         assert resp.status_code == 200
-        assert self.provider.TEMPLATE in resp.content
+        assert self.provider.TEMPLATE in resp.content.decode('utf-8')
 
         path = reverse('sentry-auth-sso')
 
@@ -258,7 +258,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         resp = self.client.post(path)
 
         assert resp.status_code == 200
-        assert self.provider.TEMPLATE in resp.content
+        assert self.provider.TEMPLATE in resp.content.decode('utf-8')
 
         path = reverse('sentry-auth-sso')
 
@@ -317,7 +317,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         resp = self.client.post(path)
 
         assert resp.status_code == 200
-        assert self.provider.TEMPLATE in resp.content
+        assert self.provider.TEMPLATE in resp.content.decode('utf-8')
 
         path = reverse('sentry-auth-sso')
 
@@ -383,7 +383,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         resp = self.client.post(path)
 
         assert resp.status_code == 200
-        assert self.provider.TEMPLATE in resp.content
+        assert self.provider.TEMPLATE in resp.content.decode('utf-8')
 
         path = reverse('sentry-auth-sso')
 
@@ -454,7 +454,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         resp = self.client.post(path)
 
         assert resp.status_code == 200
-        assert self.provider.TEMPLATE in resp.content
+        assert self.provider.TEMPLATE in resp.content.decode('utf-8')
 
         path = reverse('sentry-auth-sso')
 
@@ -512,7 +512,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         resp = self.client.post(path)
 
         assert resp.status_code == 200
-        assert self.provider.TEMPLATE in resp.content
+        assert self.provider.TEMPLATE in resp.content.decode('utf-8')
 
         path = reverse('sentry-auth-sso')
 
@@ -567,7 +567,7 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         resp = self.client.post(path)
 
         assert resp.status_code == 200
-        assert self.provider.TEMPLATE in resp.content
+        assert self.provider.TEMPLATE in resp.content.decode('utf-8')
 
         path = reverse('sentry-auth-sso')
 
diff --git a/tests/sentry/web/frontend/test_error_page_embed.py b/tests/sentry/web/frontend/test_error_page_embed.py
index dc0878b2b3..82393e1927 100644
--- a/tests/sentry/web/frontend/test_error_page_embed.py
+++ b/tests/sentry/web/frontend/test_error_page_embed.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
-from urllib import quote
+from six.moves.urllib.parse import quote
 from uuid import uuid4
 
 from sentry.models import UserReport
diff --git a/tests/sentry/web/frontend/test_group_event_json.py b/tests/sentry/web/frontend/test_group_event_json.py
index c9acc576d3..4287a3310a 100644
--- a/tests/sentry/web/frontend/test_group_event_json.py
+++ b/tests/sentry/web/frontend/test_group_event_json.py
@@ -22,5 +22,5 @@ class GroupEventJsonTest(TestCase):
         resp = self.client.get(self.path)
         assert resp.status_code == 200
         assert resp['Content-Type'] == 'application/json'
-        data = json.loads(resp.content)
+        data = json.loads(resp.content.decode('utf-8'))
         assert data['id'] == self.event.event_id
diff --git a/tests/sentry/web/frontend/test_group_tag_export.py b/tests/sentry/web/frontend/test_group_tag_export.py
index 48cc46634a..790d1d1bb1 100644
--- a/tests/sentry/web/frontend/test_group_tag_export.py
+++ b/tests/sentry/web/frontend/test_group_tag_export.py
@@ -45,7 +45,8 @@ class GroupTagExportTest(TestCase):
         assert response['Content-Type'] == 'text/csv'
         rows = list(response.streaming_content)
         for idx, row in enumerate(rows):
-            assert row.endswith('\r\n')
+            row = row.decode('utf-8')
+            assert row.endswith(u'\r\n')
             bits = row[:-2].split(',')
             if idx == 0:
                 assert bits == ['value', 'times_seen', 'last_seen', 'first_seen']
diff --git a/tests/sentry/web/frontend/test_organization_auth_settings.py b/tests/sentry/web/frontend/test_organization_auth_settings.py
index 020b9739d2..bdf8da0183 100644
--- a/tests/sentry/web/frontend/test_organization_auth_settings.py
+++ b/tests/sentry/web/frontend/test_organization_auth_settings.py
@@ -67,7 +67,7 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
             resp = self.client.post(base_path, {'provider': 'dummy'})
 
             assert resp.status_code == 200
-            assert self.provider.TEMPLATE in resp.content
+            assert self.provider.TEMPLATE in resp.content.decode('utf-8')
 
             path = reverse('sentry-auth-sso')
 
diff --git a/tests/sentry/web/frontend/test_project_plugins.py b/tests/sentry/web/frontend/test_project_plugins.py
index 9837585d79..df3edb4b8b 100644
--- a/tests/sentry/web/frontend/test_project_plugins.py
+++ b/tests/sentry/web/frontend/test_project_plugins.py
@@ -42,7 +42,6 @@ class ManageProjectPluginsTest(TestCase):
                 ],
             ),
         )
-        print opts
         assert opts.get('auto_tag:_operating_systems:enabled') is True
         assert opts.get('auto_tag:_urls:enabled') is True
         assert opts.get('mail:enabled') is False
diff --git a/tests/sentry/web/frontend/test_release_webhook.py b/tests/sentry/web/frontend/test_release_webhook.py
index 66f3a2ab86..10340ec495 100644
--- a/tests/sentry/web/frontend/test_release_webhook.py
+++ b/tests/sentry/web/frontend/test_release_webhook.py
@@ -20,8 +20,8 @@ class ReleaseWebhookTest(TestCase):
         self.project = self.create_project(team=self.team)
         self.token = 'a2587e3af83411e4a28634363b8514c2'
         self.signature = hmac.new(
-            key=self.token,
-            msg='dummy-{}'.format(self.project.id),
+            key=self.token.encode('utf-8'),
+            msg=('dummy-{}'.format(self.project.id)).encode('utf-8'),
             digestmod=sha256,
         ).hexdigest()
         ProjectOption.objects.set_value(
@@ -74,8 +74,8 @@ class BuiltinReleaseWebhookTest(TestCase):
         self.project = self.create_project(team=self.team)
         self.token = 'a2587e3af83411e4a28634363b8514c2'
         self.signature = hmac.new(
-            key=self.token,
-            msg='builtin-{}'.format(self.project.id),
+            key=self.token.encode('utf-8'),
+            msg=('builtin-{}'.format(self.project.id)).encode('utf-8'),
             digestmod=sha256,
         ).hexdigest()
         ProjectOption.objects.set_value(
diff --git a/tests/sentry/web/frontend/test_user_avatar.py b/tests/sentry/web/frontend/test_user_avatar.py
index 4f286b1043..a33e2d01a4 100644
--- a/tests/sentry/web/frontend/test_user_avatar.py
+++ b/tests/sentry/web/frontend/test_user_avatar.py
@@ -1,10 +1,10 @@
 from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
+from six import BytesIO
 
 from sentry.models import File, UserAvatar
 from sentry.testutils import TestCase
-from sentry.utils.compat import StringIO
 from sentry.web.frontend.generic import FOREVER_CACHE
 
 
@@ -12,7 +12,7 @@ class UserAvatarTest(TestCase):
     def test_headers(self):
         user = self.create_user(email='a@example.com')
         photo = File.objects.create(name='test.png', type='avatar.file')
-        photo.putfile(StringIO('test'))
+        photo.putfile(BytesIO(b'test'))
         avatar = UserAvatar.objects.create(user=user, file=photo)
         url = reverse('sentry-user-avatar-url', kwargs={'avatar_id': avatar.ident})
         response = self.client.get(url)
