commit d557b23434eee869e16d18af0819ed7e627e6366
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jun 7 14:58:46 2013 -0700

    Limit the maximum number of values in a dictionary for various components

diff --git a/docs/developer/client/index.rst b/docs/developer/client/index.rst
index 79714a7091..85e4994159 100644
--- a/docs/developer/client/index.rst
+++ b/docs/developer/client/index.rst
@@ -556,6 +556,8 @@ Most arbitrary values in Sentry have their size restricted. This means any
 values that are sent as metadata (such as variables in a stacktrace) as well
 as things like extra data, or tags.
 
+- Mappings of values (such as HTTP data, extra data, etc) are limitd to 100
+  item pairs.
 - Unstructured data is limited to 512 characters.
 - Event IDs are limited to 32 characters.
 - Tag keys are limited to 32 characters.
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 2c0308097e..90bf5877fc 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -157,3 +157,8 @@ MINUTE_NORMALIZATION = 15
 # Prevent variables (e.g. context locals, extra data) from exceeding this size
 # in bytesish
 MAX_VARIABLE_SIZE = 512
+
+# For various attributes we dont limit the entire attribute on size, but the
+# individual item. In those cases we also want to limit the maximum number of
+# keys
+MAX_DICTIONARY_ITEMS = 100
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 45668c4870..cb0e70353c 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -42,7 +42,7 @@ from sentry.utils.cache import cache, memoize
 from sentry.utils.dates import get_sql_date_trunc, normalize_datetime
 from sentry.utils.db import get_db_engine, has_charts, attach_foreignkey
 from sentry.utils.models import create_or_update, make_key
-from sentry.utils.safe import safe_execute, trim
+from sentry.utils.safe import safe_execute, trim, trim_dict
 
 logger = logging.getLogger('sentry.errors')
 
@@ -422,6 +422,37 @@ class GroupManager(BaseManager, ChartMixin):
             # throw it away
             data['extra'] = {}
 
+        trim_dict(data['extra'])
+
+        # HACK: move this to interfaces code
+        if 'sentry.interfaces.Stacktrace' in data:
+            for frame in data['sentry.interfaces.Stacktrace']['frames']:
+                stack_vars = frame.get('vars', {})
+                trim_dict(stack_vars)
+
+        if 'sentry.interfaces.Exception' in data:
+            exc_data = data['sentry.interfaces.Exception']
+            for key in ('type', 'module', 'value'):
+                value = exc_data.get(key)
+                if value:
+                    exc_data[key] = trim(value)
+
+        if 'sentry.interfaces.Http' in data:
+            http_data = data['sentry.interfaces.Http']
+            for key in ('cookies', 'querystring', 'headers', 'env', 'url'):
+                value = http_data.get(key)
+                if not value:
+                    continue
+
+                if type(value) == dict:
+                    trim_dict(value)
+                else:
+                    http_data[key] = trim(value)
+
+            value = http_data.get('data')
+            if value:
+                http_data['data'] = trim(value, 1024)
+
         return data
 
     def from_kwargs(self, project, **kwargs):
@@ -463,40 +494,6 @@ class GroupManager(BaseManager, ChartMixin):
             if 'sentry.interfaces.Stacktrace' in data:
                 data['sentry.interfaces.Exception']['values'][0]['stacktrace'] = data.pop('sentry.interfaces.Stacktrace')
 
-        for key, value in data.get('extra', {}).iteritems():
-            data['extra'][key] = trim(value)
-
-        # HACK: move this to interfaces code
-        if 'sentry.interfaces.Stacktrace' in data:
-            for frame in data['sentry.interfaces.Stacktrace']['frames']:
-                stack_vars = frame.get('vars', {})
-                for key, value in stack_vars.iteritems():
-                    stack_vars[key] = trim(value)
-
-        if 'sentry.interfaces.Exception' in data:
-            exc_data = data['sentry.interfaces.Exception']
-            for key in ('type', 'module', 'value'):
-                value = exc_data.get(key)
-                if value:
-                    exc_data[key] = trim(value)
-
-        if 'sentry.interfaces.Http' in data:
-            http_data = data['sentry.interfaces.Http']
-            for key in ('cookies', 'querystring', 'headers', 'env', 'url'):
-                value = http_data.get(key)
-                if not value:
-                    continue
-
-                if type(value) == dict:
-                    for k, v in value.iteritems():
-                        value[k] = trim(v)
-                else:
-                    http_data[key] = trim(value)
-
-            value = http_data.get('data')
-            if value:
-                http_data['data'] = trim(value, 1024)
-
         kwargs = {
             'level': level,
             'message': message,
diff --git a/src/sentry/utils/safe.py b/src/sentry/utils/safe.py
index 9602a8c600..f593f1c498 100644
--- a/src/sentry/utils/safe.py
+++ b/src/sentry/utils/safe.py
@@ -10,7 +10,7 @@ import logging
 
 from django.db import transaction
 
-from sentry.constants import MAX_VARIABLE_SIZE
+from sentry.constants import MAX_VARIABLE_SIZE, MAX_DICTIONARY_ITEMS
 from sentry.utils.strings import truncatechars
 
 
@@ -75,3 +75,10 @@ def trim(value, max_size=MAX_VARIABLE_SIZE, max_depth=3, _depth=0, _size=0, **kw
         result = value
 
     return result
+
+
+def trim_dict(value, max_items=MAX_DICTIONARY_ITEMS, **kwargs):
+    for idx, (k, v) in enumerate(value.iteritems()):
+        value[k] = trim(v)
+        if idx > max_items:
+            del value[k]
