commit 93f8f4febbd16a6dac47ec551dd1068811f12c44
Author: Dan Fuller <dfuller@sentry.io>
Date:   Thu Apr 16 16:44:59 2020 -0700

    feat(mail): Move `MailPlugin.notify_about_activity` into `MailAdapter` (#18315)
    
    We're now close to entirely moving over to `MailAdapter`. To ensure that activity mail doesn't break
    once the plugin is disabled we move `notify_about_activity` to `MailAdapter` as well, so that it'll
    continue working. The migration will disable these notifications for users in projects that have
    disabled `MailPlugin`, so it shouldn't cause extra noise.
    
    I'll likely move the activity mails into `mail/` in another pr as well.

diff --git a/src/sentry/mail/adapter.py b/src/sentry/mail/adapter.py
index af71aa738c..d36e2545c0 100644
--- a/src/sentry/mail/adapter.py
+++ b/src/sentry/mail/adapter.py
@@ -421,3 +421,17 @@ class MailAdapter(object):
                 context=context,
                 send_to=[user_id],
             )
+
+    def notify_about_activity(self, activity):
+        # TODO: We should move these into the `mail` module.
+        from sentry.plugins.sentry_mail.activity import emails
+
+        email_cls = emails.get(activity.type)
+        if not email_cls:
+            logger.debug(
+                u"No email associated with activity type `{}`".format(activity.get_type_display())
+            )
+            return
+
+        email = email_cls(activity)
+        email.send()
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 223e0a03df..c4f95b4949 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -12,8 +12,6 @@ from sentry.utils.email import MessageBuilder
 from sentry.utils.http import absolute_uri
 from sentry.utils.linksign import generate_signed_link
 
-from .activity import emails
-
 logger = logging.getLogger(__name__)
 
 
@@ -57,15 +55,10 @@ class MailPlugin(NotificationPlugin):
         )
 
     def notify_about_activity(self, activity):
-        email_cls = emails.get(activity.type)
-        if not email_cls:
-            logger.debug(
-                u"No email associated with activity type `{}`".format(activity.get_type_display())
-            )
+        if activity.project.flags.has_issue_alerts_targeting:
             return
 
-        email = email_cls(activity)
-        email.send()
+        return self.mail_adapter.notify_about_activity(activity)
 
     def handle_user_report(self, payload, project, **kwargs):
         from sentry.models import Group, GroupSubscription, GroupSubscriptionReason
diff --git a/src/sentry/tasks/activity.py b/src/sentry/tasks/activity.py
index 01abd14b28..2d21723a2d 100644
--- a/src/sentry/tasks/activity.py
+++ b/src/sentry/tasks/activity.py
@@ -9,6 +9,7 @@ logger = logging.getLogger(__name__)
 
 
 def get_activity_notifiers(project):
+    from sentry.mail.adapter import MailAdapter
     from sentry.plugins.bases.notify import NotificationPlugin
     from sentry.plugins.base import plugins
 
@@ -21,6 +22,9 @@ def get_activity_notifiers(project):
         for notifier in safe_execute(plugin.get_notifiers, _with_transaction=False) or ():
             results.append(notifier)
 
+    if project.flags.has_issue_alerts_targeting:
+        results.append(MailAdapter())
+
     return results
 
 
diff --git a/tests/sentry/mail/test_adapter.py b/tests/sentry/mail/test_adapter.py
index e1f5611734..b81e275749 100644
--- a/tests/sentry/mail/test_adapter.py
+++ b/tests/sentry/mail/test_adapter.py
@@ -15,6 +15,7 @@ from sentry.digests.notifications import build_digest, event_to_record
 from sentry.event_manager import EventManager, get_event_type
 from sentry.mail.adapter import MailAdapter, ActionTargetType
 from sentry.models import (
+    Activity,
     GroupStatus,
     OrganizationMember,
     OrganizationMemberTeam,
@@ -24,6 +25,7 @@ from sentry.models import (
     Rule,
     User,
     UserOption,
+    UserOptionValue,
 )
 from sentry.ownership import grammar
 from sentry.ownership.grammar import dump_schema, Matcher, Owner
@@ -703,3 +705,85 @@ class MailAdapterGetSendToMemberTest(BaseMailAdapterTest, TestCase):
         project_2 = self.create_project(organization=org_2, teams=[team_2])
         assert set([user_2.id]) == self.adapter.get_send_to_member(project_2, text_type(user_2.id))
         assert set() == self.adapter.get_send_to_member(self.project, text_type(user_3.id))
+
+
+class MailAdapterNotifyAboutActivityTest(BaseMailAdapterTest, TestCase):
+    def test_assignment(self):
+        UserOption.objects.set_value(
+            user=self.user, key="workflow:notifications", value=UserOptionValue.all_conversations
+        )
+        activity = Activity.objects.create(
+            project=self.project,
+            group=self.group,
+            type=Activity.ASSIGNED,
+            user=self.create_user("foo@example.com"),
+            data={"assignee": text_type(self.user.id), "assigneeType": "user"},
+        )
+
+        with self.tasks():
+            self.adapter.notify_about_activity(activity)
+
+        assert len(mail.outbox) == 1
+
+        msg = mail.outbox[0]
+
+        assert (
+            msg.subject
+            == "Re: [Sentry] BAR-1 - \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf"
+        )
+        assert msg.to == [self.user.email]
+
+    def test_assignment_team(self):
+        UserOption.objects.set_value(
+            user=self.user, key="workflow:notifications", value=UserOptionValue.all_conversations
+        )
+
+        activity = Activity.objects.create(
+            project=self.project,
+            group=self.group,
+            type=Activity.ASSIGNED,
+            user=self.create_user("foo@example.com"),
+            data={"assignee": text_type(self.project.teams.first().id), "assigneeType": "team"},
+        )
+
+        with self.tasks():
+            self.adapter.notify_about_activity(activity)
+
+        assert len(mail.outbox) == 1
+
+        msg = mail.outbox[0]
+
+        assert (
+            msg.subject
+            == "Re: [Sentry] BAR-1 - \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf"
+        )
+        assert msg.to == [self.user.email]
+
+    def test_note(self):
+        user_foo = self.create_user("foo@example.com")
+        UserOption.objects.set_value(
+            user=self.user, key="workflow:notifications", value=UserOptionValue.all_conversations
+        )
+
+        activity = Activity.objects.create(
+            project=self.project,
+            group=self.group,
+            type=Activity.NOTE,
+            user=user_foo,
+            data={"text": "sup guise"},
+        )
+
+        self.project.teams.first().organization.member_set.create(user=user_foo)
+
+        with self.tasks():
+            self.adapter.notify_about_activity(activity)
+
+        assert len(mail.outbox) >= 1
+
+        msg = mail.outbox[-1]
+
+        assert (
+            msg.subject
+            == "Re: [Sentry] BAR-1 - \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf"
+        )
+        assert msg.to == [self.user.email]
