commit 95b0c861596d4c61afe8c83c7380aaaeb5fd3052
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Thu Feb 9 11:07:10 2017 +0100

    Fix reprocessing queue, Add button to trigger reprocessing

diff --git a/src/sentry/api/endpoints/project_processingissues.py b/src/sentry/api/endpoints/project_processingissues.py
index 139c2663dc..2c8601b192 100644
--- a/src/sentry/api/endpoints/project_processingissues.py
+++ b/src/sentry/api/endpoints/project_processingissues.py
@@ -20,10 +20,15 @@ class ProjectProcessingIssuesEndpoint(ProjectEndpoint):
             project=project
         ).order_by('-datetime').first()
 
+        resolveable_issues, has_more = ProcessingIssue.objects \
+            .find_resolved(project_id=project.id)
+
         data = {
             'hasIssues': num_issues > 0,
             'numIssues': num_issues,
-            'lastSeen': serialize(last_seen.datetime),
+            'lastSeen': last_seen and serialize(last_seen.datetime) or None,
+            'resolveableIssues': len(resolveable_issues),
+            'hasMoreResolveableIssues': has_more,
         }
 
         if request.GET.get('detailed') == '1':
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index e49e17ce74..9c5e969089 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -448,6 +448,7 @@ CELERY_QUEUES = [
     Queue('email', routing_key='email'),
     Queue('events.preprocess_event', routing_key='events.preprocess_event'),
     Queue('events.process_event', routing_key='events.process_event'),
+    Queue('events.reprocess_events', routing_key='events.reprocess_events'),
     Queue('events.save_event', routing_key='events.save_event'),
     Queue('merge', routing_key='merge'),
     Queue('options', routing_key='options'),
diff --git a/src/sentry/models/processingissue.py b/src/sentry/models/processingissue.py
index a92362e952..4547db8f60 100644
--- a/src/sentry/models/processingissue.py
+++ b/src/sentry/models/processingissue.py
@@ -54,12 +54,15 @@ class ProcessingIssueManager(BaseManager):
         rv = list(RawEvent.objects
             .filter(project_id=project_id)
             .annotate(eventissue_count=Count('eventprocessingissue'))
-            .filter(count=0)[:limit])
+            .filter(eventissue_count=0)[:limit])
         if len(rv) > limit:
             rv = rv[:limit]
             has_more = True
         else:
             has_more = False
+
+        rv = list(rv)
+        RawEvent.objects.bind_nodes(rv, 'data')
         return rv, has_more
 
     def record_processing_issue(self, raw_event, scope, object,
diff --git a/src/sentry/reprocessing.py b/src/sentry/reprocessing.py
index 8195e174db..f2bc1f4680 100644
--- a/src/sentry/reprocessing.py
+++ b/src/sentry/reprocessing.py
@@ -28,7 +28,6 @@ def resolve_processing_issue(project, scope, object=None, type=None):
     if object is None:
         object = '*'
     from sentry.models import ProcessingIssue
-    # XXX: consider moving to task?
     ProcessingIssue.objects.resolve_processing_issue(
         project=project, scope=scope, object=object, type=type)
 
diff --git a/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
index 675f73896b..8d2e91f729 100644
--- a/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
+++ b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
@@ -4,7 +4,8 @@ import ApiMixin from '../mixins/apiMixin';
 import TimeSince from '../components/timeSince';
 import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
-import {t} from '../locale';
+import IndicatorStore from '../stores/indicatorStore';
+import {t, tn} from '../locale';
 
 const MESSAGES = {
     'native_no_crashed_thread': t('No crashed thread found in crash report'),
@@ -62,6 +63,20 @@ const ProjectProcessingIssues = React.createClass({
     });
   },
 
+  sendReprocessing() {
+    let loadingIndicator = IndicatorStore.add(t('Started reprocessing..'));
+    let {orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/reprocessing/`, {
+      method: 'POST',
+      success: (data, _, jqXHR) => {
+
+      },
+      error: () => {
+        IndicatorStore.remove(loadingIndicator);
+      }
+    });
+  },
+
   renderDebugTable() {
     let body;
 
@@ -143,6 +158,27 @@ const ProjectProcessingIssues = React.createClass({
     );
   },
 
+  renderResolveButton() {
+    let issues = this.state.processingIssues;
+    if (issues === null) {
+      return null;
+    }
+    let disabled = true;
+    let fixButton = t('Fix Events');
+    if (issues.resolveableIssues > 0) {
+      disabled = false;
+      fixButton = tn('Fix (%d) unprocessed Event', 'Fix (%d) unprocessed Events', issues.resolveableIssues);
+    }
+    return (
+      <div className="form-actions">
+        <button className="btn btn-primary"
+                disabled={disabled}
+                onClick={this.sendReprocessing}
+                type="submit">{fixButton}</button>
+      </div>
+    );
+  },
+
   renderResults() {
     return (
       <table className="table processing-issues">
@@ -182,6 +218,7 @@ const ProjectProcessingIssues = React.createClass({
           them.
         `)}</p>
         {this.renderDebugTable()}
+        {this.renderResolveButton()}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index a94cd77f81..9d47be8f54 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -197,7 +197,7 @@ const Stream = React.createClass({
     let {orgId, projectId} = this.props.params;
     this.api.request(`/projects/${orgId}/${projectId}/processingissues/`, {
       success: (data) => {
-        if (data.hasIssues) {
+        if (data.hasIssues || data.resolveableIssues > 0) {
           this.setState({
             processingIssues: data,
           });
@@ -513,22 +513,39 @@ const Stream = React.createClass({
       return null;
     }
 
-    let issues = tn('is %d problem', 'are %d problems', pi.numIssues);
-
     let {orgId, projectId} = this.props.params;
+    let link = `/${orgId}/${projectId}/settings/processing-issues/`;
 
-    return (
-      <div className="processing-issues">
-        <strong>{t('Unprocessed Issues: ')}</strong>
-        {tct('there [issues]', {
-          issues: issues
-        })}
-        {' '}
-        <span className="last-seen">({t('last issue')}: <TimeSince date={pi.lastSeen}/>)</span>
-        {' '}
-        <Link to={`/${orgId}/${projectId}/settings/processing-issues/`}>{t('show details')}</Link>
-      </div>
-    );
+    if (pi.numIssues > 0) {
+      let issues = tn('is %d problem', 'are %d problems', pi.numIssues);
+
+      return (
+        <div className="processing-issues issues">
+          <strong>{t('Unprocessed Issues: ')}</strong>
+          {tct('there [issues]', {
+            issues: issues
+          })}
+          {' '}
+          <span className="last-seen">({t('last issue')}:
+            <TimeSince date={pi.lastSeen}/>)</span>
+          {' '}
+          <Link to={link}>{t('show details')}</Link>
+        </div>
+      );
+    } else if (pi.resolveableIssues > 0) {
+      let fixableEvents = tn('Fix (%d) unprocessed Event',
+        'Fix (%d) unprocessed Events',
+        pi.resolveableIssues);
+
+      return (
+        <div className="processing-issues resolveable">
+          <strong>{fixableEvents}:</strong>
+          {' '}
+          <Link to={link}>{t('show details')}</Link>
+        </div>
+      );
+    }
+    return null;
   },
 
   renderGroupNodes(ids, statsPeriod) {
diff --git a/src/sentry/static/sentry/less/stream.less b/src/sentry/static/sentry/less/stream.less
index dc8724c57e..8b65c96213 100644
--- a/src/sentry/static/sentry/less/stream.less
+++ b/src/sentry/static/sentry/less/stream.less
@@ -198,13 +198,27 @@
   font-size: 14px;
   font-weight: 400;
   padding: 5px 10px;
-  border: 1px solid @purple-light;
-  background: lighten(@purple-lightest, 15%);
-  color: @purple-dark;
   text-align: center;
 
-  a {
+  &.issues {
+    border: 1px solid @purple-light;
+    background: lighten(@purple-lightest, 15%);
     color: @purple-dark;
+    a {
+      color: @purple-dark;
+    }
+  }
+
+  &.resolveable {
+    border: 1px solid @green;
+    background: lighten(@green-light, 33%);
+    color: @green-dark;
+    a {
+      color: @green-dark;
+    }
+  }
+
+  a {
     font-weight: bold;
     text-decoration: underline;
   }
diff --git a/src/sentry/tasks/reprocessing.py b/src/sentry/tasks/reprocessing.py
index 8d15f18baa..cd80ab0a9c 100644
--- a/src/sentry/tasks/reprocessing.py
+++ b/src/sentry/tasks/reprocessing.py
@@ -13,7 +13,7 @@ logger = logging.getLogger(__name__)
 
 
 @instrumented_task(
-    name='sentry.tasks.store.reprocess_events',
+    name='sentry.tasks.reprocess_events',
     queue='events.reprocess_events')
 def reprocess_events(project_id, **kwargs):
     from sentry.models import ProcessingIssue
@@ -25,11 +25,12 @@ def reprocess_events(project_id, **kwargs):
     lock = app.locks.get(lock_key, duration=60)
     try:
         with lock.acquire():
-            raw_events, have_more = ProcessingIssue.find_resolved(project_id)
+            raw_events, have_more = ProcessingIssue.objects \
+                .find_resolved(project_id)
             if raw_events:
                 helper = ClientApiHelper()
                 for raw_event in raw_events:
-                    helper.insert_data_to_database(raw_event.data)
+                    helper.insert_data_to_database(raw_event.data.data)
                     raw_event.delete()
     except UnableToAcquireLock as error:
         logger.warning('reprocess_events.fail', extra={'error': error})
