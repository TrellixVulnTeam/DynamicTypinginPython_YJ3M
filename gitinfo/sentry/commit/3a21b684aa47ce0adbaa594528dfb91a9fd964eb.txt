commit 3a21b684aa47ce0adbaa594528dfb91a9fd964eb
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Apr 17 13:17:34 2015 -0700

    Fix deprecation warnings for react-router

diff --git a/src/sentry/static/sentry/app/mixins/routeMixin.jsx b/src/sentry/static/sentry/app/mixins/routeMixin.jsx
index b919144255..b269ed247b 100644
--- a/src/sentry/static/sentry/app/mixins/routeMixin.jsx
+++ b/src/sentry/static/sentry/app/mixins/routeMixin.jsx
@@ -1,24 +1,32 @@
 /*** @jsx React.DOM */
 
+var React = require("react");
+
 var RouteMixin = {
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
   getInitialState() {
+    var router = this.context.router;
     return {
-      activeRoutePath: this.getPath(),
-      activeParams: this.getParams(),
-      activeQuery: this.getQuery()
+      activeRoutePath: router.getCurrentPath(),
+      activeParams: router.getCurrentParams(),
+      activeQuery: router.getCurrentQuery()
     };
   },
 
   componentWillReceiveProps(nextProps) {
-    if (this.state.activeRoutePath != this.getPath()) {
+    var router = this.context.router;
+    if (this.state.activeRoutePath != router.getCurrentPath()) {
       this.routeDidChange(
         this.state.activeRoutePath,
         this.state.activeParams,
         this.state.activeQuery);
       this.setState({
-        activeRoutePath: this.getPath(),
-        activeParams: this.getParams(),
-        activeQuery: this.getQuery()
+        activeRoutePath: router.getCurrentPath(),
+        activeParams: router.getCurrentParams(),
+        activeQuery: router.getCurrentQuery()
       });
     }
   },
diff --git a/src/sentry/static/sentry/app/views/groupDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails.jsx
index 0ae17196d5..4221bd4ba8 100644
--- a/src/sentry/static/sentry/app/views/groupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails.jsx
@@ -12,10 +12,13 @@ var PropTypes = require("../proptypes");
 var utils = require("../utils");
 
 var GroupDetails = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
   mixins: [
     BreadcrumbMixin,
-    Reflux.listenTo(GroupListStore, "onAggListChange"),
-    Router.State
+    Reflux.listenTo(GroupListStore, "onAggListChange")
   ],
 
   propTypes: {
@@ -57,7 +60,7 @@ var GroupDetails = React.createClass({
   },
 
   onAggListChange() {
-    var id = this.getParams().groupId;
+    var id = this.context.router.getCurrentParams().groupId;
 
     this.setState({
       group: GroupListStore.getItem(id)
@@ -65,12 +68,14 @@ var GroupDetails = React.createClass({
   },
 
   getGroupDetailsEndpoint() {
-    return '/groups/' + this.getParams().groupId + '/';
+    var id = this.context.router.getCurrentParams().groupId;
+
+    return '/groups/' + id + '/';
   },
 
   render() {
     var group = this.state.group;
-    var params = this.getParams();
+    var params = this.context.router.getCurrentParams();
 
     if (!group) {
       return <div />;
diff --git a/src/sentry/static/sentry/app/views/groupEvents.jsx b/src/sentry/static/sentry/app/views/groupEvents.jsx
index e5d6e20bad..1dd89f3c52 100644
--- a/src/sentry/static/sentry/app/views/groupEvents.jsx
+++ b/src/sentry/static/sentry/app/views/groupEvents.jsx
@@ -13,7 +13,11 @@ var PropTypes = require("../proptypes");
 var TimeSince = require("../components/timeSince");
 
 var GroupEvents = React.createClass({
-  mixins: [GroupState, Router.Navigation, Router.State],
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  mixins: [GroupState],
 
   getInitialState() {
     return {
@@ -29,7 +33,7 @@ var GroupEvents = React.createClass({
   },
 
   fetchData() {
-    var queryParams = this.getQuery();
+    var queryParams = this.context.router.getCurrentQuery();
     var querystring = $.param(queryParams);
 
     this.setState({
@@ -56,10 +60,10 @@ var GroupEvents = React.createClass({
   },
 
   onPage(cursor) {
-    var queryParams = this.getQuery();
+    var queryParams = this.context.router.getCurrentQuery();
     queryParams.cursor = cursor;
 
-    this.transitionTo('groupEvents', this.getParams(), queryParams);
+    this.transitionTo('groupEvents', this.context.router.getCurrentParams(), queryParams);
   },
 
   render() {
diff --git a/src/sentry/static/sentry/app/views/groupOverview.jsx b/src/sentry/static/sentry/app/views/groupOverview.jsx
index 5829a3a939..54e71fa9db 100644
--- a/src/sentry/static/sentry/app/views/groupOverview.jsx
+++ b/src/sentry/static/sentry/app/views/groupOverview.jsx
@@ -31,10 +31,13 @@ var MutedBox = React.createClass({
 });
 
 var GroupOverview = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
   mixins: [
     ApiMixin,
     GroupState,
-    Router.State,
     RouteMixin
   ],
 
@@ -60,7 +63,7 @@ var GroupOverview = React.createClass({
   },
 
   fetchData() {
-    var eventId = this.getParams().eventId || 'latest';
+    var eventId = this.context.router.getCurrentParams().eventId || 'latest';
 
     var url = (eventId === 'latest' ?
       '/groups/' + this.getGroup().id + '/events/' + eventId + '/' :
@@ -99,7 +102,7 @@ var GroupOverview = React.createClass({
   render() {
     var group = this.getGroup();
     var evt = this.state.event;
-    var params = this.getParams();
+    var params = this.context.router.getCurrentParams();
 
     if (evt) {
       var eventNavNodes = [
diff --git a/src/sentry/static/sentry/app/views/groupTagValues.jsx b/src/sentry/static/sentry/app/views/groupTagValues.jsx
index 499db7390c..8639fd7cd3 100644
--- a/src/sentry/static/sentry/app/views/groupTagValues.jsx
+++ b/src/sentry/static/sentry/app/views/groupTagValues.jsx
@@ -2,7 +2,6 @@
 
 var $ = require("jquery");
 var React = require("react");
-var Router = require("react-router");
 
 var api = require("../api");
 var Count = require("../components/count");
@@ -13,7 +12,11 @@ var Pagination = require("../components/pagination");
 var PropTypes = require("../proptypes");
 
 var GroupTagValues = React.createClass({
-  mixins: [GroupState, Router.Navigation, Router.State],
+  mixins: [GroupState],
+
+  contextTypes: {
+    router: React.PropTypes.func
+  },
 
   getInitialState() {
     return {
@@ -30,8 +33,9 @@ var GroupTagValues = React.createClass({
   },
 
   fetchData() {
-    var params = this.getParams();
-    var queryParams = this.getQuery();
+    var router = this.context.router;
+    var params = router.getCurrentParams();
+    var queryParams = router.getCurrentQuery();
     var querystring = $.param(queryParams);
 
     this.setState({
@@ -39,7 +43,7 @@ var GroupTagValues = React.createClass({
       error: false
     });
 
-    api.request('/groups/' + this.getGroup().id + '/tags/' + this.getParams().tagKey + '/', {
+    api.request('/groups/' + this.getGroup().id + '/tags/' + params.tagKey + '/', {
       success: (data) => {
         this.setState({
           tagKey: data,
@@ -54,7 +58,7 @@ var GroupTagValues = React.createClass({
       }
     });
 
-    api.request('/groups/' + this.getGroup().id + '/tags/' + this.getParams().tagKey + '/values/?' + querystring, {
+    api.request('/groups/' + this.getGroup().id + '/tags/' + params.tagKey + '/values/?' + querystring, {
       success: (data, _, jqXHR) => {
         this.setState({
           tagValueList: data,
@@ -72,10 +76,11 @@ var GroupTagValues = React.createClass({
   },
 
   onPage(cursor) {
-    var queryParams = this.getQuery();
+    var router = this.context.router;
+    var queryParams = router.getCurrentQuery();
     queryParams.cursor = cursor;
 
-    this.transitionTo('groupTagValues', this.getParams(), queryParams);
+    this.transitionTo('groupTagValues', router.getCurrentParams(), queryParams);
   },
 
   render() {
diff --git a/src/sentry/static/sentry/app/views/organizationDetails.jsx b/src/sentry/static/sentry/app/views/organizationDetails.jsx
index 28957c2f88..d2f2545f71 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails.jsx
@@ -15,8 +15,7 @@ var RouteMixin = require("../mixins/routeMixin");
 var OrganizationDetails = React.createClass({
   mixins: [
     BreadcrumbMixin,
-    RouteMixin,
-    Router.State
+    RouteMixin
   ],
 
   crumbReservations: 1,
@@ -25,6 +24,10 @@ var OrganizationDetails = React.createClass({
     organization: PropTypes.Organization
   },
 
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
   getChildContext() {
     return {
       organization: this.state.organization
@@ -44,7 +47,9 @@ var OrganizationDetails = React.createClass({
   },
 
   routeDidChange(nextPath, nextParams) {
-    if (nextParams.orgId != this.getParams().orgId) {
+    var router = this.context.router;
+    var params = router.getCurrentParams();
+    if (nextParams.orgId != params.orgId) {
       this.fetchData();
     }
   },
@@ -70,7 +75,8 @@ var OrganizationDetails = React.createClass({
   },
 
   getOrganizationDetailsEndpoint() {
-    var params = this.getParams();
+    var router = this.context.router;
+    var params = router.getCurrentParams();
     return '/organizations/' + params.orgId + '/';
   },
 
diff --git a/src/sentry/static/sentry/app/views/organizationMembers.jsx b/src/sentry/static/sentry/app/views/organizationMembers.jsx
index 9518c3768a..f30e7d2683 100644
--- a/src/sentry/static/sentry/app/views/organizationMembers.jsx
+++ b/src/sentry/static/sentry/app/views/organizationMembers.jsx
@@ -16,12 +16,15 @@ var OrganizationMembers = React.createClass({
   mixins: [
     BreadcrumbMixin,
     OrganizationState,
-    RouteMixin,
-    Router.State
+    RouteMixin
   ],
 
   crumbReservations: 1,
 
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
   getInitialState() {
     return {
       loading: false,
@@ -35,7 +38,8 @@ var OrganizationMembers = React.createClass({
   },
 
   routeDidChange(nextPath, nextParams) {
-    if (nextParams.orgId != this.getParams().orgId) {
+    var router = this.context.router;
+    if (nextParams.orgId != router.getCurrentParams().orgId) {
       this.fetchData();
     }
   },
@@ -67,7 +71,8 @@ var OrganizationMembers = React.createClass({
   },
 
   getOrganizationMembersEndpoint() {
-    var params = this.getParams();
+    var router = this.context.router;
+    var params = this.getCurrentParams();
     return '/organizations/' + params.orgId + '/members/';
   },
 
diff --git a/src/sentry/static/sentry/app/views/projectDetails.jsx b/src/sentry/static/sentry/app/views/projectDetails.jsx
index 151b79558c..a291c5a1e3 100644
--- a/src/sentry/static/sentry/app/views/projectDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetails.jsx
@@ -18,8 +18,7 @@ var ProjectDetails = React.createClass({
     BreadcrumbMixin,
     Reflux.connect(MemberListStore, "memberList"),
     OrganizationState,
-    RouteMixin,
-    Router.State
+    RouteMixin
   ],
 
   crumbReservations: 2,
@@ -29,6 +28,10 @@ var ProjectDetails = React.createClass({
     team: PropTypes.Team
   },
 
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
   getChildContext() {
     return {
       project: this.state.project,
@@ -50,8 +53,10 @@ var ProjectDetails = React.createClass({
   },
 
   routeDidChange(nextPath, nextParams) {
-    if (nextParams.projectId != this.getParams().projectId ||
-        nextParams.orgId != this.getParams().orgId) {
+    var router = this.context.router;
+    var params = router.getCurrentParams();
+    if (nextParams.projectId != params.projectId ||
+        nextParams.orgId != params.orgId) {
       this.fetchData();
     }
   },
@@ -62,7 +67,9 @@ var ProjectDetails = React.createClass({
       return;
     }
 
-    var projectSlug = this.getParams().projectId;
+    var router = this.context.router;
+    var params = router.getCurrentParams();
+    var projectSlug = params.projectId;
     var activeProject;
     var activeTeam;
     org.teams.forEach((team) => {
@@ -99,7 +106,8 @@ var ProjectDetails = React.createClass({
   },
 
   getMemberListEndpoint() {
-    var params = this.getParams();
+    var router = this.context.router;
+    var params = router.getCurrentParams();
     return '/projects/' + params.orgId + '/' + params.projectId + '/members/';
   },
 
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index fcb39cf183..85fc54e5e4 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -1,7 +1,6 @@
 /*** @jsx React.DOM */
 var React = require("react");
 var Reflux = require("reflux");
-var Router = require("react-router");
 var $ = require("jquery");
 
 var api = require("../api");
@@ -19,11 +18,13 @@ var utils = require("../utils");
 var Stream = React.createClass({
   mixins: [
     Reflux.listenTo(GroupListStore, "onAggListChange"),
-    RouteMixin,
-    Router.Navigation,
-    Router.State,
+    RouteMixin
   ],
 
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
   propTypes: {
     memberList: React.PropTypes.instanceOf(Array).isRequired,
     setProjectNavSection: React.PropTypes.func.isRequired
@@ -107,8 +108,9 @@ var Stream = React.createClass({
   },
 
   getGroupListEndpoint() {
-    var params = this.getParams();
-    var queryParams = this.getQuery();
+    var router = this.context.router;
+    var params = router.getCurrentParams();
+    var queryParams = router.getCurrentQuery();
     queryParams.limit = 50;
     var querystring = $.param(queryParams);
 
@@ -138,13 +140,17 @@ var Stream = React.createClass({
   },
 
   onPage(cursor) {
-    var queryParams = this.getQuery();
+    var router = this.context.router;
+    var params = router.getCurrentParams();
+    var queryParams = router.getCurrentQuery();
     queryParams.cursor = cursor;
 
-    this.transitionTo('stream', this.getParams(), queryParams);
+    this.transitionTo('stream', params, queryParams);
   },
 
   render() {
+    var router = this.context.router;
+    var params = router.getCurrentParams();
     var groupNodes = this.state.groupList.map((node) => {
       return <StreamGroup
           key={node.id}
@@ -153,8 +159,6 @@ var Stream = React.createClass({
           statsPeriod={this.state.statsPeriod} />;
     });
 
-    var params = this.getParams();
-
     return (
       <div>
         <StreamFilters />
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index 67e88a77e8..bcfa260da3 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -1,7 +1,6 @@
 /*** @jsx React.DOM */
 var React = require("react");
 var Reflux = require("reflux");
-var Router = require("react-router");
 
 var utils = require("../../utils");
 
@@ -137,21 +136,27 @@ var ActionLink = React.createClass({
 });
 
 var SortOptions = React.createClass({
-  mixins: [Router.State],
+  contextTypes: {
+    router: React.PropTypes.func
+  },
 
   getMenuItem(key, label, isActive) {
-    var queryParams = this.getQuery();
+    var router = this.context.router;
+    var queryParams = router.getCurrentQuery();
+    var params = router.getCurrentParams();
+
     queryParams.sort = key;
 
     return (
-      <MenuItem to="stream" params={this.getParams()} query={queryParams} isActive={isActive}>
+      <MenuItem to="stream" params={params} query={queryParams} isActive={isActive}>
         {label}
       </MenuItem>
     );
   },
 
   render() {
-    var queryParams = this.getQuery();
+    var router = this.context.router;
+    var queryParams = router.getCurrentQuery();
     var sortBy = queryParams.sort || 'date';
     var sortLabel;
 
diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/stream/filters.jsx
index c07a5dd0fb..84f4cd49f5 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filters.jsx
@@ -1,7 +1,6 @@
 /*** @jsx React.DOM */
 
 var React = require("react");
-var Router = require("react-router");
 var $ = require("jquery");
 
 var utils = require("../../utils");
@@ -47,10 +46,14 @@ var SearchDropdown = React.createClass({
 });
 
 var SearchBar = React.createClass({
-  mixins: [Router.Navigation, Router.State],
+  contextTypes: {
+    router: React.PropTypes.func
+  },
 
   getInitialState() {
-    var queryParams = this.getQuery();
+    var router = this.context.router;
+    var queryParams = router.getCurrentQuery();
+
     var query = (typeof queryParams.query === 'undefined' ?
       'is:unresolved' :
       queryParams.query);
@@ -62,7 +65,9 @@ var SearchBar = React.createClass({
   },
 
   onSubmit(event) {
-    var queryParams = this.getQuery();
+    var router = this.context.router;
+    var queryParams = router.getCurrentQuery();
+
     queryParams.query = this.state.query;
 
     event.preventDefault();
@@ -113,13 +118,18 @@ var SearchBar = React.createClass({
 });
 
 var FilterSelectLink = React.createClass({
-  mixins: [Router.State],
+  contextTypes: {
+    router: React.PropTypes.func
+  },
 
   propTypes: {
     query: React.PropTypes.object.isRequired
   },
 
   render() {
+    var router = this.context.router;
+    var queryParams = router.getCurrentQuery();
+    var params = router.getCurrentParams();
     var className = this.props.extraClass;
     className += ' btn btn-default';
 
@@ -127,8 +137,6 @@ var FilterSelectLink = React.createClass({
       className += ' active';
     }
 
-    var queryParams = this.getQuery();
-
     // whitelist relevant params
     var finalQueryParams = $.extend({
       query: queryParams.query,
@@ -139,7 +147,7 @@ var FilterSelectLink = React.createClass({
       <Router.Link
           to="stream"
           activeClassName=""
-          params={this.getParams()}
+          params={params}
           query={finalQueryParams}
           className={className}>
         {this.props.label}
@@ -149,14 +157,17 @@ var FilterSelectLink = React.createClass({
 });
 
 var StreamFilters = React.createClass({
-  mixins: [Router.State],
+  contextTypes: {
+    router: React.PropTypes.func
+  },
 
   render() {
-    var params = utils.getQueryParams();
+    var router = this.context.router;
+    var queryParams = router.getCurrentQuery();
     var activeButton;
-    if (params.bookmarks) {
+    if (queryParams.bookmarks) {
       activeButton = 'bookmarks';
-    } else if (params.assigned) {
+    } else if (queryParams.assigned) {
       activeButton = 'assigned';
     } else {
       activeButton = 'all';
diff --git a/src/sentry/static/sentry/app/views/stream/group.jsx b/src/sentry/static/sentry/app/views/stream/group.jsx
index cdfed30861..246f3a957f 100644
--- a/src/sentry/static/sentry/app/views/stream/group.jsx
+++ b/src/sentry/static/sentry/app/views/stream/group.jsx
@@ -10,9 +10,12 @@ var SelectedGroupStore = require("../../stores/selectedGroupStore");
 var TimeSince = require("../../components/timeSince");
 
 var StreamGroup = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
   mixins: [
-    Reflux.listenTo(SelectedGroupStore, "onSelectedGroupChange"),
-    Router.State
+    Reflux.listenTo(SelectedGroupStore, "onSelectedGroupChange")
   ],
 
   propTypes: {
@@ -42,9 +45,10 @@ var StreamGroup = React.createClass({
   },
 
   render() {
+    var router = this.context.router;
+    var params = router.getCurrentParams();
     var data = this.props.data;
     var userCount = 0;
-    var params = this.getParams();
     var points;
 
     switch(this.props.statsPeriod) {
diff --git a/src/sentry/static/sentry/app/views/teamDashboard.jsx b/src/sentry/static/sentry/app/views/teamDashboard.jsx
index 65778f9770..8b7041cb3c 100644
--- a/src/sentry/static/sentry/app/views/teamDashboard.jsx
+++ b/src/sentry/static/sentry/app/views/teamDashboard.jsx
@@ -1,7 +1,6 @@
 /*** @jsx React.DOM */
 
 var React = require("react");
-var Router = require("react-router");
 
 var EventList = require("./teamDashboard/eventList");
 var TeamChart = require("./teamDashboard/chart");
@@ -10,17 +9,22 @@ var TeamStatsBar = require("./teamDashboard/statsBar");
 
 var TeamDashboard = React.createClass({
   mixins: [
-    Router.State,
     TeamState
   ],
 
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
   getTrendingEventsEndpoint() {
-    var params = this.getParams();
+    var router = this.context.router;
+    var params = router.getCurrentParams();
     return "/teams/" + params.orgId + "/" + params.teamId + "/groups/trending/";
   },
 
   getNewEventsEndpoint() {
-    var params = this.getParams();
+    var router = this.context.router;
+    var params = router.getCurrentParams();
     return "/teams/" + params.orgId + "/" + params.teamId + "/groups/new/";
   },
 
diff --git a/src/sentry/static/sentry/app/views/teamDashboard/chart.jsx b/src/sentry/static/sentry/app/views/teamDashboard/chart.jsx
index e5cf2d787e..46952ebfd4 100644
--- a/src/sentry/static/sentry/app/views/teamDashboard/chart.jsx
+++ b/src/sentry/static/sentry/app/views/teamDashboard/chart.jsx
@@ -13,10 +13,13 @@ var TeamState = require("../../mixins/teamState");
 var TeamChart = React.createClass({
   mixins: [
     RouteMixin,
-    Router.State,
     TeamState,
   ],
 
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
   getInitialState() {
     return {
       loading: true,
@@ -38,7 +41,9 @@ var TeamChart = React.createClass({
   },
 
   routeDidChange(nextPath, nextParams) {
-    if (nextParams.teamId != this.getParams().teamId) {
+    var router = this.context.router;
+    var params = router.getCurrentParams();
+    if (nextParams.teamId != params.teamId) {
       this.fetchData();
     }
   },
diff --git a/src/sentry/static/sentry/app/views/teamDashboard/eventList.jsx b/src/sentry/static/sentry/app/views/teamDashboard/eventList.jsx
index 947eb0b440..343244d1c5 100644
--- a/src/sentry/static/sentry/app/views/teamDashboard/eventList.jsx
+++ b/src/sentry/static/sentry/app/views/teamDashboard/eventList.jsx
@@ -71,10 +71,13 @@ var EventNode = React.createClass({
 
 var EventList = React.createClass({
   mixins: [
-    RouteMixin,
-    Router.State
+    RouteMixin
   ],
 
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
   propTypes: {
     title: React.PropTypes.string.isRequired,
     endpoint: React.PropTypes.string.isRequired
@@ -94,7 +97,9 @@ var EventList = React.createClass({
   },
 
   routeDidChange(nextPath, nextParams) {
-    if (nextParams.teamId != this.getParams().teamId) {
+    var router = this.context.router;
+    var params = router.getCurrentParams();
+    if (nextParams.teamId != params.teamId) {
       this.fetchData();
     }
   },
diff --git a/src/sentry/static/sentry/app/views/teamDetails.jsx b/src/sentry/static/sentry/app/views/teamDetails.jsx
index 53349b28be..bf5f5e41fd 100644
--- a/src/sentry/static/sentry/app/views/teamDetails.jsx
+++ b/src/sentry/static/sentry/app/views/teamDetails.jsx
@@ -16,8 +16,7 @@ var TeamDetails = React.createClass({
   mixins: [
     BreadcrumbMixin,
     OrganizationState,
-    RouteMixin,
-    Router.State
+    RouteMixin
   ],
 
   crumbReservations: 1,
@@ -26,6 +25,10 @@ var TeamDetails = React.createClass({
     team: PropTypes.Team
   },
 
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
   getChildContext() {
     return {
       team: this.state.team
@@ -43,7 +46,9 @@ var TeamDetails = React.createClass({
   },
 
   routeDidChange(nextPath, nextParams) {
-    if (nextParams.teamId != this.getParams().teamId) {
+    var router = this.context.router;
+    var params = router.getCurrentParams();
+    if (nextParams.teamId != params.teamId) {
       this.fetchData();
     }
   },
@@ -54,7 +59,9 @@ var TeamDetails = React.createClass({
       return;
     }
 
-    var teamSlug = this.getParams().teamId;
+    var router = this.context.router;
+    var params = router.getCurrentParams();
+    var teamSlug = params.teamId;
     var team = org.teams.filter((team) => {
       return team.slug === teamSlug;
     })[0];
