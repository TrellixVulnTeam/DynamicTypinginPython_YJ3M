commit 534627d3d6f2c37507c13fc01a4abf2fe15773de
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Sep 4 11:07:49 2011 -0700

    Added coverage for various denormalized counters

diff --git a/sentry/models.py b/sentry/models.py
index eb25ffe2e7..b2ba36e4fb 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -292,6 +292,9 @@ class FilterValue(models.Model):
     
     class Meta:
         unique_together = (('key', 'value'),)
+    
+    def __unicode__(self):
+        return u'key=%s, value=%s' % (self.key, self.value)
 
 class MessageFilterValue(models.Model):
     group = models.ForeignKey(GroupedMessage)
@@ -302,6 +305,10 @@ class MessageFilterValue(models.Model):
     class Meta:
         unique_together = (('key', 'value', 'group'),)
 
+    def __unicode__(self):
+        return u'group_id=%s, times_seen=%s, key=%s, value=%s' % (self.group_id, self.times_seen,
+                                                                  self.key, self.value)
+
 class MessageCountByMinute(Model):
     group = models.ForeignKey(GroupedMessage)
     date = models.DateTimeField() # normalized to HH:MM:00
@@ -310,6 +317,10 @@ class MessageCountByMinute(Model):
     class Meta:
         unique_together = (('group', 'date'),)
 
+    def __unicode__(self):
+        return u'group_id=%s, times_seen=%s, date=%s' % (self.group_id, self.times_seen, self.date)
+
+
 ### django-indexer
 
 class MessageIndex(BaseIndex):
diff --git a/sentry/utils/manager.py b/sentry/utils/manager.py
index be5938fe09..c24dd73054 100644
--- a/sentry/utils/manager.py
+++ b/sentry/utils/manager.py
@@ -179,12 +179,12 @@ class SentryManager(models.Manager):
                     FilterValue.objects.get_or_create(key=key, value=value)
 
                 affected = group.messagefiltervalue_set.filter(key=key, value=value).update(times_seen=F('times_seen') + 1)
-            if not affected:
-                group.messagefiltervalue_set.create(
-                    key=key,
-                    value=value,
-                    times_seen=1,
-                )
+                if not affected:
+                    group.messagefiltervalue_set.create(
+                        key=key,
+                        value=value,
+                        times_seen=1,
+                    )
 
         except Exception, exc:
             # TODO: should we mail admins when there are failures?
diff --git a/tests/tests.py b/tests/tests.py
index 3760cfbd19..2247c18b30 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -800,6 +800,119 @@ class SentryTestCase(BaseTestCase):
         self.assertEquals(last.data['tuple'][-2], '...')
         self.assertEquals(last.data['tuple'][-1], '(450 more elements)')
 
+    def test_denormalized_counters(self):
+        get_client().create_from_text('hi', timestamp=datetime.datetime.now() - datetime.timedelta(minutes=3))
+
+        self.assertEquals(Message.objects.count(), 1)
+        self.assertEquals(GroupedMessage.objects.count(), 1)
+        self.assertEquals(MessageCountByMinute.objects.count(), 1)
+        self.assertEquals(MessageFilterValue.objects.count(), 3)
+        self.assertEquals(FilterValue.objects.count(), 3)
+        
+        group = GroupedMessage.objects.get()
+
+        count = MessageCountByMinute.objects.get()
+        self.assertEquals(count.group, group)
+        self.assertEquals(count.times_seen, 1)
+        self.assertEquals(count.date, group.last_seen.replace(second=0, microsecond=0))
+
+        filter_map = dict((m.key, m) for m in MessageFilterValue.objects.all().order_by('key', 'value'))
+
+        self.assertTrue('server_name' in filter_map)
+        filtervalue = filter_map['server_name']
+        self.assertEquals(filtervalue.group, group)
+        self.assertEquals(filtervalue.times_seen, 1)
+        self.assertEquals(filtervalue.key, 'server_name')
+        self.assertEquals(filtervalue.value, settings.NAME)
+
+        self.assertTrue('site' in filter_map)
+        filtervalue = filter_map['site']
+        self.assertEquals(filtervalue.group, group)
+        self.assertEquals(filtervalue.times_seen, 1)
+        self.assertEquals(filtervalue.key, 'site')
+        self.assertEquals(filtervalue.value, settings.SITE)
+
+        self.assertTrue('logger' in filter_map)
+        filtervalue = filter_map['logger']
+        self.assertEquals(filtervalue.group, group)
+        self.assertEquals(filtervalue.times_seen, 1)
+        self.assertEquals(filtervalue.key, 'logger')
+        self.assertEquals(filtervalue.value, 'root')
+
+        filter_map = dict((m.key, m) for m in FilterValue.objects.all().order_by('key', 'value'))
+
+        self.assertTrue('server_name' in filter_map)
+        filtervalue = filter_map['server_name']
+        self.assertEquals(filtervalue.key, 'server_name')
+        self.assertEquals(filtervalue.value, settings.NAME)
+
+        self.assertTrue('site' in filter_map)
+        filtervalue = filter_map['site']
+        self.assertEquals(filtervalue.key, 'site')
+        self.assertEquals(filtervalue.value, settings.SITE)
+
+        self.assertTrue('logger' in filter_map)
+        filtervalue = filter_map['logger']
+        self.assertEquals(filtervalue.key, 'logger')
+        self.assertEquals(filtervalue.value, 'root')
+
+        get_client().create_from_text('hi')
+
+        self.assertEquals(Message.objects.count(), 2)
+        self.assertEquals(GroupedMessage.objects.count(), 1)
+        self.assertEquals(MessageCountByMinute.objects.count(), 2)
+        self.assertEquals(MessageFilterValue.objects.count(), 3)
+        self.assertEquals(FilterValue.objects.count(), 3)
+        
+        group = GroupedMessage.objects.get()
+
+        counts = MessageCountByMinute.objects.all()
+        for count in counts:
+            self.assertEquals(count.group, group)
+            self.assertEquals(count.times_seen, 1)
+            self.assertEquals(count.date.second, 0)
+            self.assertEquals(count.date.microsecond, 0)
+
+        filter_map = dict((m.key, m) for m in MessageFilterValue.objects.all().order_by('key', 'value'))
+
+        self.assertTrue('server_name' in filter_map)
+        filtervalue = filter_map['server_name']
+        self.assertEquals(filtervalue.group, group)
+        self.assertEquals(filtervalue.times_seen, 2)
+        self.assertEquals(filtervalue.key, 'server_name')
+        self.assertEquals(filtervalue.value, settings.NAME)
+
+        self.assertTrue('site' in filter_map)
+        filtervalue = filter_map['site']
+        self.assertEquals(filtervalue.group, group)
+        self.assertEquals(filtervalue.times_seen, 2)
+        self.assertEquals(filtervalue.key, 'site')
+        self.assertEquals(filtervalue.value, settings.SITE)
+
+        self.assertTrue('logger' in filter_map)
+        filtervalue = filter_map['logger']
+        self.assertEquals(filtervalue.group, group)
+        self.assertEquals(filtervalue.times_seen, 2)
+        self.assertEquals(filtervalue.key, 'logger')
+        self.assertEquals(filtervalue.value, 'root')
+
+        filter_map = dict((m.key, m) for m in FilterValue.objects.all().order_by('key', 'value'))
+
+        self.assertTrue('server_name' in filter_map)
+        filtervalue = filter_map['server_name']
+        self.assertEquals(filtervalue.key, 'server_name')
+        self.assertEquals(filtervalue.value, settings.NAME)
+
+        self.assertTrue('site' in filter_map)
+        filtervalue = filter_map['site']
+        self.assertEquals(filtervalue.key, 'site')
+        self.assertEquals(filtervalue.value, settings.SITE)
+
+        self.assertTrue('logger' in filter_map)
+        filtervalue = filter_map['logger']
+        self.assertEquals(filtervalue.key, 'logger')
+        self.assertEquals(filtervalue.value, 'root')
+
     # def test_sampling(self):
     #     settings.THRASHING_LIMIT = 0
     #     settings.THRASHING_TIMEOUT = 0
