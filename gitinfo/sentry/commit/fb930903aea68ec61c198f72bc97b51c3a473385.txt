commit fb930903aea68ec61c198f72bc97b51c3a473385
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Nov 23 03:50:27 2014 -0800

    Various permission fixes

diff --git a/src/sentry/api/endpoints/organization_teams.py b/src/sentry/api/endpoints/organization_teams.py
index b0bb478ffa..e98827072a 100644
--- a/src/sentry/api/endpoints/organization_teams.py
+++ b/src/sentry/api/endpoints/organization_teams.py
@@ -67,7 +67,7 @@ class OrganizationTeamsEndpoint(Endpoint):
         if organization is None:
             return Response(status=403)
 
-        if not can_create_teams(request.user):
+        if not can_create_teams(request.user, organization):
             return Response(status=403)
 
         if request.user.is_superuser:
diff --git a/src/sentry/models/organization.py b/src/sentry/models/organization.py
index 0799f69c82..38e7dc5882 100644
--- a/src/sentry/models/organization.py
+++ b/src/sentry/models/organization.py
@@ -50,7 +50,12 @@ class OrganizationManager(BaseManager):
                 user=user,
             ).select_related('organization')
             if access is not None:
-                qs = qs.filter(type__lte=access)
+                # if we're requesting specific access the member *must* have
+                # global access to teams
+                qs = qs.filter(
+                    type__lte=access,
+                    has_global_access=True,
+                )
 
             for om in qs:
                 org = om.organization
diff --git a/src/sentry/permissions.py b/src/sentry/permissions.py
index 2cc7c642d8..f48ab9078d 100644
--- a/src/sentry/permissions.py
+++ b/src/sentry/permissions.py
@@ -10,9 +10,9 @@ from __future__ import absolute_import
 import six
 
 from django.conf import settings
+from django.db.models import Q
 from functools import wraps
 
-from sentry.constants import MEMBER_OWNER
 from sentry.models import OrganizationMemberType
 from sentry.plugins import plugins
 from sentry.utils.cache import cached_for_request
@@ -46,6 +46,27 @@ def requires_login(func):
     return wrapped
 
 
+def is_organization_admin(user, organization):
+    # an organization admin *must* have global access
+    return organization.member_set.filter(
+        user=user,
+        type__lte=OrganizationMemberType.ADMIN,
+        has_global_access=True,
+    ).exists()
+
+
+def is_team_admin(user, team):
+    return team.organization.member_set.filter(
+        Q(has_global_access=True) | Q(teams=team),
+        user=user,
+        type__lte=OrganizationMemberType.ADMIN,
+    ).exists()
+
+
+def is_project_admin(user, project):
+    return is_team_admin(user, project.team)
+
+
 @cached_for_request
 @requires_login
 def can_create_organizations(user):
@@ -65,7 +86,7 @@ def can_create_organizations(user):
 
 @cached_for_request
 @requires_login
-def can_create_teams(user):
+def can_create_teams(user, organization):
     """
     Returns a boolean describing whether a user has the ability to
     create new teams.
@@ -73,7 +94,10 @@ def can_create_teams(user):
     if user.is_superuser:
         return True
 
-    result = plugins.first('has_perm', user, 'add_team')
+    if not is_organization_admin(user, organization):
+        return False
+
+    result = plugins.first('has_perm', user, 'add_team', organization)
     if result is False:
         return result
 
@@ -90,9 +114,7 @@ def can_create_projects(user, team):
     if user.is_superuser:
         return True
 
-    # must be an organization admin
-    if not team.organization.member_set.filter(
-            user=user, type=OrganizationMemberType.ADMIN, teams=team).exists():
+    if not is_team_admin(user, team):
         return False
 
     result = plugins.first('has_perm', user, 'add_project', team)
@@ -126,7 +148,7 @@ def can_manage_org(user, organization):
     if user.is_superuser:
         return True
 
-    if organization.member_set.filter(user=user, type=OrganizationMemberType.ADMIN).exists():
+    if is_organization_admin(user, organization):
         return True
 
     return False
@@ -137,60 +159,19 @@ def can_manage_team(user, team):
     if can_manage_org(user, team.organization):
         return True
 
-    if team.member_set.filter(user=user, type=MEMBER_OWNER).exists():
+    if is_team_admin(user, team):
         return True
 
     return False
 
 
-@requires_login
-def can_add_team_member(user, team):
-    # must be an owner of the team
-    if user.is_superuser:
-        return True
-
-    if not team.member_set.filter(user=user, type=MEMBER_OWNER).exists():
-        return False
-
-    result = plugins.first('has_perm', user, 'add_team_member', team)
-    if result is False:
-        return False
-
-    return True
-
-
-@requires_login
-def can_manage_team_member(user, member, perm):
-    # permissions always take precedence
-    if user.is_superuser:
-        return True
-
-    # must be an owner of the team
-    if not member.team.member_set.filter(user=user, type=MEMBER_OWNER).exists():
-        return False
-
-    result = plugins.first('has_perm', user, perm, member)
-    if result is False:
-        return False
-
-    return True
-
-
-def can_edit_team_member(user, member):
-    return can_manage_team_member(user, member, 'edit_team_member')
-
-
-def can_remove_team_member(user, member):
-    return can_manage_team_member(user, member, 'remove_team_member')
-
-
 @requires_login
 def can_add_organization_member(user, organization):
     # must be an owner of the team
     if user.is_superuser:
         return True
 
-    if not organization.member_set.filter(user=user, type=OrganizationMemberType.ADMIN).exists():
+    if not is_organization_admin(user, organization):
         return False
 
     result = plugins.first('has_perm', user, 'add_organization_member', organization)
@@ -207,7 +188,7 @@ def can_manage_organization_member(user, member, perm):
         return True
 
     # must be an owner of the team
-    if not member.organization.member_set.filter(user=user, type=OrganizationMemberType.ADMIN).exists():
+    if not is_organization_admin(user, member.organization):
         return False
 
     result = plugins.first('has_perm', user, perm, member)
@@ -231,7 +212,7 @@ def can_remove_team(user, team):
         return True
 
     # must be an owner of the team
-    if team.owner != user:
+    if not is_team_admin(user, team):
         return False
 
     result = plugins.first('has_perm', user, 'remove_team', team)
@@ -249,8 +230,7 @@ def can_remove_project(user, project):
     if user.is_superuser:
         return True
 
-    # must be an owner of the team
-    if not project.team.member_set.filter(user=user, type=MEMBER_OWNER).exists():
+    if not is_project_admin(user, project):
         return False
 
     result = plugins.first('has_perm', user, 'remove_project', project)
@@ -262,18 +242,10 @@ def can_remove_project(user, project):
 
 @requires_login
 def can_admin_group(user, group, is_remove=False):
-    from sentry.models import Team
-
     if user.is_superuser:
         return True
 
-    # We make the assumption that we have a valid membership here
-        # TODO(dcramer): this is a really inefficient way to test this
-    teams = Team.objects.get_for_user(
-        organization=group.project.team.organization,
-        user=user,
-    )
-    if group.project.team not in teams:
+    if not is_project_admin(user, group.project):
         return False
 
     # The "remove_event" permission was added after "admin_event".
@@ -300,8 +272,7 @@ def can_add_project_key(user, project):
     if user.is_superuser:
         return True
 
-    # must be an owner of the team
-    if project.team and not project.team.member_set.filter(user=user, type=MEMBER_OWNER).exists():
+    if not is_project_admin(user, project):
         return False
 
     result = plugins.first('has_perm', user, 'add_project_key', project)
@@ -316,8 +287,7 @@ def can_edit_project_key(user, project):
     if user.is_superuser:
         return True
 
-    # must be an owner of the team
-    if project.team and not project.team.member_set.filter(user=user, type=MEMBER_OWNER).exists():
+    if not is_project_admin(user, project):
         return False
 
     result = plugins.first('has_perm', user, 'edit_project_key', project)
@@ -334,8 +304,7 @@ def can_remove_project_key(user, key):
 
     project = key.project
 
-    # must be an owner of the team
-    if project.team and not project.team.member_set.filter(user=user, type=MEMBER_OWNER).exists():
+    if not is_project_admin(user, project):
         return False
 
     result = plugins.first('has_perm', user, 'remove_project_key', project, key)
diff --git a/src/sentry/templatetags/sentry_permissions.py b/src/sentry/templatetags/sentry_permissions.py
index 7f6f08365f..7da03e0c6d 100644
--- a/src/sentry/templatetags/sentry_permissions.py
+++ b/src/sentry/templatetags/sentry_permissions.py
@@ -12,7 +12,7 @@ from django import template
 from sentry.models import AccessGroup
 from sentry.permissions import (
     can_create_teams, can_create_projects, can_remove_team, can_remove_project,
-    can_add_team_member, can_manage_team, can_manage_org
+    can_manage_team, can_manage_org
 )
 
 register = template.Library()
@@ -21,7 +21,6 @@ register = template.Library()
 # so we can't just register.filter(can_add_team_member)
 register.filter('can_create_teams')(lambda a, b: can_create_teams(a, b))
 register.filter('can_create_projects')(lambda a, b: can_create_projects(a, b))
-register.filter('can_add_team_member')(lambda a, b: can_add_team_member(a, b))
 register.filter('can_manage_team')(lambda a, b: can_manage_team(a, b))
 register.filter('can_manage_org')(lambda a, b: can_manage_org(a, b))
 register.filter('can_remove_team')(lambda a, b: can_remove_team(a, b))
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index fe23e099cf..6b61ff697a 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -3,7 +3,6 @@ from __future__ import absolute_import
 import logging
 
 from django.core.context_processors import csrf
-from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.utils.decorators import method_decorator
 from django.views.decorators.csrf import csrf_protect
@@ -128,6 +127,8 @@ class BaseView(View, OrganizationMixin):
             request.session['_next'] = request.get_full_path()
             return self.redirect(get_login_url())
 
+        args, kwargs = self.convert_args(request, *args, **kwargs)
+
         if not self.has_permission(request, *args, **kwargs):
             redirect_uri = self.get_no_permission_url(request, *args, **kwargs)
             return self.redirect(redirect_uri)
@@ -137,6 +138,9 @@ class BaseView(View, OrganizationMixin):
 
         return self.handle(request, *args, **kwargs)
 
+    def convert_args(self, request, *args, **kwargs):
+        return (args, kwargs)
+
     def handle(self, request, *args, **kwargs):
         return super(BaseView, self).dispatch(request, *args, **kwargs)
 
@@ -181,7 +185,10 @@ class OrganizationView(BaseView):
 
         return context
 
-    def dispatch(self, request, organization_id=None, *args, **kwargs):
+    def has_permission(self, request, organization, *args, **kwargs):
+        return organization is not None
+
+    def convert_args(self, request, organization_id=None, *args, **kwargs):
         # TODO:
         # if access is MEMBER_OWNER:
         #     _wrapped = login_required(sudo_required(_wrapped))
@@ -191,12 +198,10 @@ class OrganizationView(BaseView):
             access=self.required_access,
             organization_id=organization_id,
         )
-        if active_organization is None:
-            return self.redirect(reverse('sentry'))
 
         kwargs['organization'] = active_organization
 
-        return super(OrganizationView, self).dispatch(request, *args, **kwargs)
+        return (args, kwargs)
 
 
 class TeamView(BaseView):
@@ -218,23 +223,23 @@ class TeamView(BaseView):
         context['TEAM_LIST'] = self.get_team_list(request.user, organization)
         return context
 
-    def dispatch(self, request, team_slug, *args, **kwargs):
-        if not request.user.is_authenticated():
-            request.session['_next'] = request.get_full_path()
-            return self.redirect(get_login_url())
+    def has_permission(self, request, organization, team, *args, **kwargs):
+        return team is not None
 
+    def convert_args(self, request, team_slug, *args, **kwargs):
         active_team = self.get_active_team(
             request=request,
             team_slug=team_slug,
             access=self.required_access,
         )
-        if active_team is None:
-            return self.redirect(reverse('sentry'))
 
         kwargs['team'] = active_team
-        kwargs['organization'] = active_team.organization
+        if active_team:
+            kwargs['organization'] = active_team.organization
+        else:
+            kwargs['organization'] = None
 
-        return super(TeamView, self).dispatch(request, *args, **kwargs)
+        return (args, kwargs)
 
 
 class ProjectView(BaseView):
@@ -259,29 +264,30 @@ class ProjectView(BaseView):
 
         return context
 
-    def dispatch(self, request, team_slug, project_slug, *args, **kwargs):
-        if not request.user.is_authenticated():
-            request.session['_next'] = request.get_full_path()
-            return self.redirect(get_login_url())
+    def has_permission(self, request, organization, team, project, *args, **kwargs):
+        return project is not None
 
+    def convert_args(self, request, team_slug, project_slug, *args, **kwargs):
         active_team = self.get_active_team(
             request=request,
             team_slug=team_slug,
         )
-        if active_team is None:
-            return self.redirect(reverse('sentry'))
 
-        active_project = self.get_active_project(
-            request=request,
-            team=active_team,
-            project_slug=project_slug,
-            access=self.required_access,
-        )
-        if active_project is None:
-            return self.redirect(reverse('sentry'))
+        if active_team:
+            active_project = self.get_active_project(
+                request=request,
+                team=active_team,
+                project_slug=project_slug,
+                access=self.required_access,
+            )
+        else:
+            active_project = None
 
         kwargs['project'] = active_project
         kwargs['team'] = active_team
-        kwargs['organization'] = active_team.organization
+        if active_team:
+            kwargs['organization'] = active_team.organization
+        else:
+            kwargs['organization'] = None
 
-        return super(ProjectView, self).dispatch(request, *args, **kwargs)
+        return (args, kwargs)
diff --git a/src/sentry/web/frontend/create_team.py b/src/sentry/web/frontend/create_team.py
index b636acdfec..56b8dffb0b 100644
--- a/src/sentry/web/frontend/create_team.py
+++ b/src/sentry/web/frontend/create_team.py
@@ -27,7 +27,7 @@ class CreateTeamView(OrganizationView):
         return NewTeamForm(request.POST or None)
 
     def get(self, request, organization):
-        if not can_create_teams(request.user):
+        if not can_create_teams(request.user, organization):
             return missing_perm(request, Permissions.ADD_TEAM)
 
         form = self.get_form(request)
@@ -39,7 +39,7 @@ class CreateTeamView(OrganizationView):
         return self.respond('sentry/create-team.html', context)
 
     def post(self, request, organization):
-        if not can_create_teams(request.user):
+        if not can_create_teams(request.user, organization):
             return missing_perm(request, Permissions.ADD_TEAM)
 
         form = self.get_form(request)
