commit 7d5d38361650d155e7d394376d137c94dbb21d6f
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Wed May 6 14:07:28 2020 -0700

    feat(ui): Add better selector between alert rule types (#18639)

diff --git a/src/sentry/static/sentry/app/styles/bulletList.tsx b/src/sentry/static/sentry/app/styles/bulletList.tsx
new file mode 100644
index 0000000000..f37b917c30
--- /dev/null
+++ b/src/sentry/static/sentry/app/styles/bulletList.tsx
@@ -0,0 +1,28 @@
+import styled from '@emotion/styled';
+
+import space from 'app/styles/space';
+
+const BulletList = styled('ul')`
+  padding: 0;
+  list-style: none;
+
+  li {
+    position: relative;
+    padding-left: 32px;
+    margin-bottom: ${space(0.75)};
+
+    &:before {
+      content: '';
+      position: absolute;
+      top: ${space(1)};
+      left: ${space(1)};
+      display: block;
+      height: 8px;
+      width: 8px;
+      background: ${p => p.theme.gray6};
+      border-radius: 50%;
+    }
+  }
+`;
+
+export default BulletList;
diff --git a/src/sentry/static/sentry/app/styles/global.tsx b/src/sentry/static/sentry/app/styles/global.tsx
index 899eab4aaa..896ed87b26 100644
--- a/src/sentry/static/sentry/app/styles/global.tsx
+++ b/src/sentry/static/sentry/app/styles/global.tsx
@@ -9,6 +9,10 @@ const styles = (theme: Theme) => css`
       z-index: ${theme.zIndex.sentryErrorEmbed};
     }
   }
+
+  abbr {
+    border-bottom: 1px dotted ${theme.gray2};
+  }
 `;
 
 /**
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/alertTypeChooser.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/alertTypeChooser.tsx
new file mode 100644
index 0000000000..8537a8cc24
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/alertTypeChooser.tsx
@@ -0,0 +1,120 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import Card from 'app/components/card';
+import {t, tct} from 'app/locale';
+import space from 'app/styles/space';
+import Radio from 'app/components/radio';
+import textStyles from 'app/styles/text';
+import BulletList from 'app/styles/bulletList';
+import BetaTag from 'app/components/betaTag';
+import Tooltip from 'app/components/tooltip';
+
+type Props = {
+  selected?: string | null;
+  onChange: (type: string) => void;
+};
+
+const IssuesTooltip = ({children}: {children?: React.ReactNode}) => (
+  <Tooltip
+    title={t(
+      `Sentry automatically groups similar errors into issues. Similarity is
+       determined by stack trace and other factors.`
+    )}
+  >
+    <abbr>{children}</abbr>
+  </Tooltip>
+);
+
+const AlertTypeChooser = ({selected, onChange}: Props) => (
+  <Container>
+    <TypeCard interactive onClick={() => onChange('issue')}>
+      <RadioLabel>
+        <Radio
+          aria-label="issue"
+          checked={selected === 'issue'}
+          onChange={() => onChange('issue')}
+        />
+        {t('Issue Alert')}
+      </RadioLabel>
+      <p>
+        {tct(
+          `Get notified when [note:individual Sentry Issues] match your alerting criteria.`,
+          {note: <IssuesTooltip />}
+        )}
+      </p>
+      {!selected && (
+        <BulletList>
+          <li>
+            {t('New or regressed issues')}
+            <Example>{t('There is a new issue on the checkout page')}</Example>
+          </li>
+          <li>
+            {t('Issue frequency')}
+            <Example>{t('When an issue affects more than X users')}</Example>
+          </li>
+        </BulletList>
+      )}
+    </TypeCard>
+    <TypeCard interactive onClick={() => onChange('metric')}>
+      <RadioLabel>
+        <Radio
+          aria-label="metric"
+          checked={selected === 'metric'}
+          onChange={() => onChange('metric')}
+        />
+        {t('Metric Alert')}
+        <BetaTag />
+      </RadioLabel>
+      <p>
+        {t(
+          `Compute aggregates and set thresholds on any or all errors in your
+           project, regardless of the Sentry issue.`
+        )}
+      </p>
+      {!selected && (
+        <BulletList>
+          <li>
+            {t('Overall error volume')}
+            <Example>{t('A broken service is affecting more than X users')}</Example>
+          </li>
+          <li>
+            {t('Events across issues')}
+            <Example>{t('100 or more errors with "database" in the title')}</Example>
+          </li>
+        </BulletList>
+      )}
+    </TypeCard>
+  </Container>
+);
+
+const RadioLabel = styled('label')`
+  cursor: pointer;
+  margin-bottom: ${space(3)};
+  display: grid;
+  grid-auto-flow: column;
+  grid-auto-columns: max-content;
+  align-items: center;
+  grid-gap: ${space(2)};
+`;
+
+const Example = styled('div')`
+  font-size: ${p => p.theme.fontSizeMedium};
+  color: ${p => p.theme.gray4};
+  font-style: italic;
+`;
+
+const Container = styled('div')`
+  display: grid;
+  grid-template-columns: 1fr 1fr;
+  grid-gap: ${space(3)};
+`;
+
+const TypeCard = styled(Card)`
+  cursor: pointer;
+  padding: ${space(4)};
+  margin-bottom: ${space(3)};
+  ${textStyles};
+`;
+
+export default AlertTypeChooser;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/create.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/create.tsx
index 116eace05c..854dcb0eec 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/create.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/create.tsx
@@ -2,17 +2,16 @@ import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
 
 import {Organization, Project} from 'app/types';
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {t} from 'app/locale';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 import IncidentRulesCreate from 'app/views/settings/incidentRules/create';
 import IssueEditor from 'app/views/settings/projectAlerts/issueEditor';
-import PanelItem from 'app/components/panels/panelItem';
-import RadioGroup from 'app/views/settings/components/forms/controls/radioGroup';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import withProject from 'app/utils/withProject';
 
+import AlertTypeChooser from './alertTypeChooser';
+
 type RouteParams = {
   orgId: string;
   projectId: string;
@@ -69,34 +68,7 @@ class Create extends React.Component<Props, State> {
         <SettingsPageHeader title={title} />
 
         {shouldShowAlertTypeChooser && (
-          <Panel>
-            <PanelHeader>{t('Choose an Alert Type')}</PanelHeader>
-            <PanelBody>
-              <PanelItem>
-                <RadioGroup
-                  label={t('Select an Alert Type')}
-                  value={alertType}
-                  choices={[
-                    [
-                      'metric',
-                      t('Metric Alert'),
-                      t(
-                        'Metric alerts allow you to filter and set thresholds on errors. They can be used for high-level monitoring of patterns, or fine-grained monitoring of individual events.'
-                      ),
-                    ],
-                    [
-                      'issue',
-                      t('Issue Alert'),
-                      t(
-                        'Issue alerts fire whenever any issue in the project matches your specified criteria, such as a resolved issue re-appearing or an issue affecting many users.'
-                      ),
-                    ],
-                  ]}
-                  onChange={this.handleChangeAlertType}
-                />
-              </PanelItem>
-            </PanelBody>
-          </Panel>
+          <AlertTypeChooser selected={alertType} onChange={this.handleChangeAlertType} />
         )}
 
         {(!hasMetricAlerts || alertType === 'issue') && <IssueEditor {...this.props} />}
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
index 2cc88f8368..45767fbab2 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
@@ -448,7 +448,7 @@ class IssueRuleEditor extends AsyncView<Props, State> {
 
               <PanelSubHeader>
                 {t(
-                  'Whenever %s of these conditions are met',
+                  'Whenever %s of these conditions are met for an issue',
                   <EmbeddedWrapper>
                     <EmbeddedSelectField
                       className={classNames({
