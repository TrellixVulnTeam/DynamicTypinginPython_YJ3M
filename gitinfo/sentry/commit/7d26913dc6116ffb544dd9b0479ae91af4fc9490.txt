commit 7d26913dc6116ffb544dd9b0479ae91af4fc9490
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Feb 22 19:50:46 2013 -0800

    Removing a lot of cruft and some various optimizations

diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 7b43d96d67..7632dee0a5 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -36,8 +36,7 @@ from sentry.processors.base import send_group_processors
 from sentry.signals import regression_signal
 from sentry.tasks.index import index_event
 from sentry.tasks.fetch_source import fetch_javascript_source
-from sentry.utils import cached_property
-from sentry.utils.cache import cache, Lock
+from sentry.utils.cache import cache, memoize, Lock
 from sentry.utils.dates import get_sql_date_trunc, normalize_datetime
 from sentry.utils.db import get_db_engine, has_charts, attach_foreignkey
 from sentry.utils.models import create_or_update, make_key
@@ -686,7 +685,7 @@ class GroupManager(BaseManager, ChartMixin):
     def get_by_natural_key(self, project, logger, culprit, checksum):
         return self.get(project=project, logger=logger, view=culprit, checksum=checksum)
 
-    @cached_property
+    @memoize
     def model_fields_clause(self):
         return ', '.join('sentry_groupedmessage."%s"' % (f.column,) for f in self.model._meta.fields)
 
diff --git a/src/sentry/models.py b/src/sentry/models.py
index 50111b11ed..19e76a4b81 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -42,7 +42,8 @@ from sentry.manager import (GroupManager, ProjectManager,
     MetaManager, InstanceMetaManager, SearchDocumentManager, BaseManager,
     UserOptionManager, FilterKeyManager, TeamManager)
 from sentry.signals import buffer_incr_complete, regression_signal
-from sentry.utils import cached_property, MockDjangoRequest
+from sentry.utils import MockDjangoRequest
+from sentry.utils.cache import memoize
 from sentry.utils.db import has_trending
 from sentry.utils.models import Model, GzippedDictField, update
 from sentry.utils.imports import import_string
@@ -643,7 +644,7 @@ class Event(EventBase):
 
     __repr__ = sane_repr('project_id', 'group_id', 'checksum')
 
-    @cached_property
+    @memoize
     def request(self):
         data = self.data
         if 'META' in data:
@@ -671,7 +672,7 @@ class Event(EventBase):
         fake_request.path = fake_request.path_info
         return fake_request
 
-    @cached_property
+    @memoize
     def interfaces(self):
         result = []
         for key, data in self.data.iteritems():
diff --git a/src/sentry/permissions.py b/src/sentry/permissions.py
index 0d77fae8d7..fddd834a32 100644
--- a/src/sentry/permissions.py
+++ b/src/sentry/permissions.py
@@ -9,6 +9,7 @@ from functools import wraps
 from sentry.conf import settings
 from sentry.constants import MEMBER_OWNER
 from sentry.plugins import plugins
+from sentry.utils.cache import cached_for_request
 
 
 def perm_override(perm):
@@ -34,6 +35,7 @@ def requires_login(func):
     return wrapped
 
 
+@cached_for_request
 @requires_login
 @perm_override('can_add_project')
 def can_create_projects(user, team=None):
@@ -55,6 +57,7 @@ def can_create_projects(user, team=None):
     return True
 
 
+@cached_for_request
 @requires_login
 @perm_override('can_add_team')
 def can_create_teams(user):
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index 4913ce1a79..3b992679ec 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -35,14 +35,6 @@
             </script>
         {% endblock %}
 
-        {% if USE_JS_CLIENT and INTERNAL_PROJECT %}
-            <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/lib/raven.js" %}"></script>
-            <script type="text/javascript">
-            Raven.config({{ INTERNAL_PROJECT.dsn|to_json|safe }});
-            window.onerror = Raven.process;
-            </script>
-        {% endif %}
-
         {% block meta %}
         {% endblock %}
     </head>
diff --git a/src/sentry/utils/__init__.py b/src/sentry/utils/__init__.py
index d1e44995b1..dce63c30e2 100644
--- a/src/sentry/utils/__init__.py
+++ b/src/sentry/utils/__init__.py
@@ -10,58 +10,6 @@ from django.http import HttpRequest
 from django.utils.encoding import force_unicode
 
 
-class _Missing(object):
-    def __repr__(self):
-        return 'no value'
-
-    def __reduce__(self):
-        return '_missing'
-
-_missing = _Missing()
-
-
-class cached_property(object):
-    # This is borrowed from werkzeug : http://bytebucket.org/mitsuhiko/werkzeug-main
-    """A decorator that converts a function into a lazy property.  The
-    function wrapped is called the first time to retrieve the result
-    and then that calculated result is used the next time you access
-    the value::
-
-        class Foo(object):
-
-            @cached_property
-            def foo(self):
-                # calculate something important here
-                return 42
-
-    The class has to have a `__dict__` in order for this property to
-    work.
-    """
-
-    # implementation detail: this property is implemented as non-data
-    # descriptor.  non-data descriptors are only invoked if there is
-    # no entry with the same name in the instance's __dict__.
-    # this allows us to completely get rid of the access function call
-    # overhead.  If one choses to invoke __get__ by hand the property
-    # will still work as expected because the lookup logic is replicated
-    # in __get__ for manual invocation.
-
-    def __init__(self, func, name=None, doc=None):
-        self.__name__ = name or func.__name__
-        self.__module__ = func.__module__
-        self.__doc__ = doc or func.__doc__
-        self.func = func
-
-    def __get__(self, obj, type=None):
-        if obj is None:
-            return self
-        value = obj.__dict__.get(self.__name__, _missing)
-        if value is _missing:
-            value = self.func(obj)
-            obj.__dict__[self.__name__] = value
-        return value
-
-
 class MockDjangoRequest(HttpRequest):
     GET = {}
     POST = {}
diff --git a/src/sentry/utils/cache.py b/src/sentry/utils/cache.py
index 4b8e822dd1..8f1feb57d1 100644
--- a/src/sentry/utils/cache.py
+++ b/src/sentry/utils/cache.py
@@ -5,18 +5,20 @@ sentry.utils.cache
 :copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+import functools
 import logging
 import time
 
-from django.core.cache import get_cache, cache
+from django.core.cache import get_cache, cache as default_cache
 
 from sentry.conf import settings
 
 if settings.CACHE_BACKEND != 'default':
-    cache = get_cache(settings.CACHE_BACKEND)  # NOQA
-
-_cache = cache
+    _cache = get_cache(settings.CACHE_BACKEND)  # NOQA
+else:
+    _cache = default_cache
 
+cache = _cache
 
 logger = logging.getLogger(__name__)
 
@@ -67,3 +69,65 @@ class Lock(object):
             self.cache.delete(self.lock_key)
         except Exception, e:
             logger.exception(e)
+
+
+class memoize(object):
+    """
+    Memoize the result of a property call.
+
+    >>> class A(object):
+    >>>     @memoize
+    >>>     def func(self):
+    >>>         return 'foo'
+    """
+
+    def __init__(self, func):
+        self.__name__ = func.__name__
+        self.__module__ = func.__module__
+        self.__doc__ = func.__doc__
+        self.func = func
+
+    def __get__(self, obj, type=None):
+        if obj is None:
+            return self
+        d, n = vars(obj), self.__name__
+        if n not in d:
+            value = self.func(obj)
+            d[n] = value
+        return value
+
+
+class cached_for_request(memoize):
+    """
+    Memoize the result of a for the duration of a request. If the system does
+    not think it's in a request, the result is never saved.
+
+    >>> class A(object):
+    >>>     @memoize_for_request
+    >>>     def func(self):
+    >>>         return 'foo'
+    """
+    def _get_key(self, args, kwargs):
+        return (self, tuple(args), tuple(kwargs.items()))
+
+    def __call__(self, *args, **kwargs):
+        from sentry.app import env
+
+        request = env.request
+        if not request:
+            return self.func(*args, **kwargs)
+
+        if not hasattr(request, '__func_cache'):
+            data = request.__func_cache = {}
+        else:
+            data = request.__func_cache
+
+        key = self._get_key(args, kwargs)
+
+        if key not in data:
+            value = self.func(*args, **kwargs)
+            data[key] = value
+        return data[key]
+
+    def __get__(self, obj, type=None):
+        return functools.partial(self.__call__, obj)
diff --git a/src/sentry/web/decorators.py b/src/sentry/web/decorators.py
index cf24df15f0..e20304f1c0 100644
--- a/src/sentry/web/decorators.py
+++ b/src/sentry/web/decorators.py
@@ -97,8 +97,10 @@ def has_access(access_or_func=None, team=None, access=None):
 
             if has_project:
                 # ensure we're accessing this url correctly
-                if project and team and project.team != team:
-                    return HttpResponseRedirect(reverse('sentry'))
+                if project and team:
+                    if project.team_id != team.id:
+                        return HttpResponseRedirect(reverse('sentry'))
+                    project._team_cache = team
 
                 kwargs['project'] = project
 
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index 2c68a33c29..eb9b83aa60 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -116,8 +116,6 @@ def _get_group_list(request, project):
         score_clause = SORT_CLAUSES.get(sort)
         filter_clause = SCORE_CLAUSES.get(sort)
 
-    event_list = event_list.select_related('project')
-
     # IMPORTANT: All filters must already be applied once we reach this point
 
     if sort == 'tottime':
diff --git a/src/sentry/web/frontend/teams.py b/src/sentry/web/frontend/teams.py
index 8295fddaf2..04da7c4e5f 100644
--- a/src/sentry/web/frontend/teams.py
+++ b/src/sentry/web/frontend/teams.py
@@ -27,11 +27,6 @@ from sentry.web.forms.teams import (NewTeamForm, NewTeamAdminForm,
 from sentry.web.helpers import render_to_response
 
 
-@login_required
-def team_list(request):
-    return render_to_response('sentry/teams/list.html', {}, request)
-
-
 def render_with_team_context(team, template, context, request=None):
     context.update({
         'team': team,
@@ -41,6 +36,11 @@ def render_with_team_context(team, template, context, request=None):
     return render_to_response(template, context, request)
 
 
+@login_required
+def team_list(request):
+    return render_to_response('sentry/teams/list.html', {}, request)
+
+
 @login_required
 @csrf_protect
 def create_new_team(request):
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 5f8d9b7563..c9d0354bea 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -101,11 +101,8 @@ def get_default_context(request, existing_context=None, team=None):
     context = {
         'HAS_SEARCH': settings.USE_SEARCH,
         'MESSAGES_PER_PAGE': settings.MESSAGES_PER_PAGE,
-        'INTERNAL_PROJECT': get_internal_project(),
-        'PROJECT_ID': str(settings.PROJECT),
         'URL_PREFIX': settings.URL_PREFIX,
         'PLUGINS': plugins,
-        'USE_JS_CLIENT': settings.USE_JS_CLIENT,
     }
 
     if request:
diff --git a/tests/sentry/web/frontend/teams/tests.py b/tests/sentry/web/frontend/teams/tests.py
index 7f3a86c776..d6ae8a7ad9 100644
--- a/tests/sentry/web/frontend/teams/tests.py
+++ b/tests/sentry/web/frontend/teams/tests.py
@@ -209,6 +209,13 @@ class NewTeamMemberTest(BaseTeamTest):
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateUsed(resp, 'sentry/teams/members/new.html')
 
+    @mock.patch('sentry.web.frontend.teams.can_add_team_member')
+    def test_missing_permission(self, can_add_team_member):
+        can_add_team_member.return_value = False
+        resp = self.client.get(self.path)
+        self.assertEquals(resp.status_code, 302)
+        can_add_team_member.assert_called_once_with(self.user, self.team)
+
     def test_cannot_add_existing_member(self):
         resp = self.client.post(self.path, {
             'add-type': MEMBER_USER,
@@ -260,6 +267,18 @@ class NewTeamMemberTest(BaseTeamTest):
 
 
 class AcceptInviteTest(BaseTeamTest):
+    def test_invalid_member_id(self):
+        resp = self.client.get(reverse('sentry-accept-invite', args=[1, 2]))
+        self.assertEquals(resp.status_code, 302)
+
+    def test_invalid_token(self):
+        ptm = PendingTeamMember.objects.create(
+            email='newuser@example.com',
+            team=self.team,
+        )
+        resp = self.client.get(reverse('sentry-accept-invite', args=[ptm.id, 2]))
+        self.assertEquals(resp.status_code, 302)
+
     def test_renders_unauthenticated_template(self):
         self.client.logout()
         ptm = PendingTeamMember.objects.create(
