commit 9f3b950a73cebb965dc89a931cf6c534c160c14f
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Jun 3 10:37:18 2019 -0700

    feat(events-v2): Add rough version of Error and CSP tables (#13453)
    
    Ref: SEN-665

diff --git a/src/sentry/api/bases/organization_events.py b/src/sentry/api/bases/organization_events.py
index d0f1c99e8a..d13c17b087 100644
--- a/src/sentry/api/bases/organization_events.py
+++ b/src/sentry/api/bases/organization_events.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from copy import deepcopy
 from rest_framework.exceptions import PermissionDenied
 
 from sentry import features
@@ -7,6 +8,23 @@ from sentry.api.bases import OrganizationEndpoint, OrganizationEventsError
 from sentry.api.event_search import get_snuba_query_args, InvalidSearchQuery
 from sentry.models.project import Project
 
+# We support 4 "special fields" on the v2 events API which perform some
+# additional calculations over aggregated event data
+SPECIAL_FIELDS = {
+    'issue_title': {
+        'aggregations': [['anyHeavy', 'title', 'issue_title']],
+    },
+    'last_seen': {
+        'aggregations': [['max', 'timestamp', 'last_seen']],
+    },
+    'event_count': {
+        'aggregations': [['uniq', 'id', 'event_count']],
+    },
+    'user_count': {
+        'aggregations': [['uniq', 'user', 'user_count']],
+    },
+}
+
 
 class OrganizationEventsEndpointBase(OrganizationEndpoint):
 
@@ -49,6 +67,9 @@ class OrganizationEventsEndpointBase(OrganizationEndpoint):
             raise OrganizationEventsError(exc.message)
 
         fields = request.GET.getlist('field')[:]
+        aggregations = []
+        groupby = request.GET.getlist('groupby')
+
         if fields:
             # If project.name is requested, get the project.id from Snuba so we
             # can use this to look up the name in Sentry
@@ -57,13 +78,19 @@ class OrganizationEventsEndpointBase(OrganizationEndpoint):
                 if 'project.id' not in fields:
                     fields.append('project.id')
 
+            for field in fields[:]:
+                if field in SPECIAL_FIELDS:
+                    special_field = deepcopy(SPECIAL_FIELDS[field])
+                    fields.remove(field)
+                    fields.extend(special_field.get('fields', []))
+                    aggregations.extend(special_field.get('aggregations', []))
+                    groupby.extend(special_field.get('groupby', []))
+
             snuba_args['selected_columns'] = fields
 
-        aggregations = request.GET.getlist('aggregation')
         if aggregations:
-            snuba_args['aggregations'] = [aggregation.split(',') for aggregation in aggregations]
+            snuba_args['aggregations'] = aggregations
 
-        groupby = request.GET.getlist('groupby')
         if groupby:
             snuba_args['groupby'] = groupby
 
diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index 4029de31cd..4a7459efe7 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -115,10 +115,9 @@ export const EventView = PropTypes.shape({
   id: PropTypes.string.isRequired,
   name: PropTypes.string.isRequired,
   data: PropTypes.shape({
-    fields: PropTypes.arrayOf(PropTypes.string).isRequired,
-    groupby: PropTypes.arrayOf(PropTypes.string).isRequired,
-    aggregations: PropTypes.arrayOf(PropTypes.array).isRequired,
-    sort: PropTypes.string.isRequired,
+    fields: PropTypes.arrayOf(PropTypes.string),
+    groupby: PropTypes.arrayOf(PropTypes.string),
+    sort: PropTypes.string,
   }).isRequired,
   tags: PropTypes.arrayOf(PropTypes.string).isRequired,
 });
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx
index f21b6bd562..dc542313d9 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx
@@ -18,9 +18,7 @@ export const ALL_VIEWS = deepFreeze([
     name: 'All Events',
     data: {
       fields: ['event', 'event.type', 'project', 'user', 'time'],
-      groupby: [],
-      aggregations: [],
-      sort: '',
+      sort: '-timestamp',
     },
     tags: [
       'event.type',
@@ -35,10 +33,9 @@ export const ALL_VIEWS = deepFreeze([
     id: 'errors',
     name: 'Errors',
     data: {
-      fields: [],
-      groupby: ['issue.id'],
-      aggregations: [['uniq', 'id', 'event_count'], ['uniq', 'user', 'user_count']],
-      sort: '',
+      fields: ['issue_title', 'event_count', 'user_count', 'project', 'last_seen'],
+      groupby: ['issue.id', 'project.id'],
+      sort: '-last_seen',
     },
     tags: ['error.type', 'project.name'],
   },
@@ -46,10 +43,9 @@ export const ALL_VIEWS = deepFreeze([
     id: 'csp',
     name: 'CSP',
     data: {
-      fields: [],
-      groupby: ['issue.id'],
-      aggregations: [['uniq', 'id', 'event_count'], ['uniq', 'user', 'user_count']],
-      sort: '',
+      fields: ['issue_title', 'event_count', 'user_count', 'project', 'last_seen'],
+      groupby: ['issue.id', 'project.id'],
+      sort: '-last_seen',
     },
     tags: [
       'project.name',
@@ -124,6 +120,24 @@ export const SPECIAL_FIELDS = {
       </Container>
     ),
   },
+  event_count: {
+    title: 'events',
+    fields: ['event_count'],
+    renderFunc: data => <Container>{data.event_count}</Container>,
+  },
+  user_count: {
+    title: 'users',
+    fields: ['user_count'],
+    renderFunc: data => <Container>{data.user_count}</Container>,
+  },
+  last_seen: {
+    fields: ['last_seen'],
+    renderFunc: data => (
+      <Container>
+        <DynamicWrapper value={<StyledDateTime date={data.last_seen} />} fixed="time" />
+      </Container>
+    ),
+  },
 };
 
 const Container = styled('div')`
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/events.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/events.jsx
index 6b346f11af..5185765128 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/events.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/events.jsx
@@ -34,13 +34,13 @@ class Events extends AsyncComponent {
   };
 
   getEndpoints() {
-    const {organization, view} = this.props;
+    const {location, organization, view} = this.props;
     return [
       [
         'data',
         `/organizations/${organization.slug}/events/`,
         {
-          query: getQuery(view),
+          query: getQuery(view, location),
         },
       ],
     ];
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx
index ab4ea0e9a0..d508526bc4 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx
@@ -62,7 +62,11 @@ export default class Table extends React.Component {
       <Panel>
         <TableHeader className={getGridStyle(fields.length)}>
           {fields.map(field => (
-            <HeaderItem key={field}>{field}</HeaderItem>
+            <HeaderItem key={field}>
+              {SPECIAL_FIELDS.hasOwnProperty(field)
+                ? SPECIAL_FIELDS[field].title || field
+                : field}
+            </HeaderItem>
           ))}
         </TableHeader>
         <PanelBody>{this.renderBody()}</PanelBody>
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
index 0c7c59a6e9..00295c05bf 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
@@ -1,3 +1,5 @@
+import {pick} from 'lodash';
+
 import {ALL_VIEWS, SPECIAL_FIELDS} from './data';
 
 /**
@@ -17,18 +19,37 @@ export function getCurrentView(requestedView) {
  * @param {Object} view
  * @returns {Object}
  */
-export function getQuery(view) {
-  const data = {...view.data};
-  const fields = data.fields.reduce((list, field) => {
+export function getQuery(view, location) {
+  const fields = [];
+  const groupby = view.data.groupby ? [...view.data.groupby] : [];
+
+  view.data.fields.forEach(field => {
     if (SPECIAL_FIELDS.hasOwnProperty(field)) {
-      list.push(...SPECIAL_FIELDS[field].fields);
+      const specialField = SPECIAL_FIELDS[field];
+
+      if (specialField.hasOwnProperty('fields')) {
+        fields.push(...specialField.fields);
+      }
+      if (specialField.hasOwnProperty('groupby')) {
+        groupby.push(...specialField.groupby);
+      }
     } else {
-      list.push(field);
+      fields.push(field);
     }
-    return list;
-  }, []);
+  });
+
+  const data = pick(location.query, [
+    'start',
+    'end',
+    'utc',
+    'statsPeriod',
+    'cursor',
+    'query',
+  ]);
 
   data.field = [...new Set(fields)];
+  data.groupby = groupby;
+  data.sort = view.data.sort;
 
   return data;
 }
diff --git a/tests/acceptance/test_organization_events_v2.py b/tests/acceptance/test_organization_events_v2.py
index c313dce4ba..39dc7ee112 100644
--- a/tests/acceptance/test_organization_events_v2.py
+++ b/tests/acceptance/test_organization_events_v2.py
@@ -56,3 +56,33 @@ class OrganizationEventsTest(AcceptanceTestCase, SnubaTestCase):
             self.browser.get(self.path)
             self.browser.wait_until_not('.loading-indicator')
             self.browser.snapshot('events-v2 - all events')
+
+    @patch('django.utils.timezone.now')
+    def test_errors(self, mock_now):
+        mock_now.return_value = datetime.utcnow().replace(tzinfo=pytz.utc)
+        min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
+        self.store_event(
+            data={
+                'event_id': 'a' * 32,
+                'message': 'oh no',
+                'timestamp': min_ago,
+                'fingerprint': ['group-1']
+            },
+            project_id=self.project.id,
+            assert_no_errors=False,
+        )
+        self.store_event(
+            data={
+                'event_id': 'b' * 32,
+                'message': 'oh no',
+                'timestamp': min_ago,
+                'fingerprint': ['group-1']
+            },
+            project_id=self.project.id,
+            assert_no_errors=False,
+        )
+
+        with self.feature(FEATURE_NAME):
+            self.browser.get(self.path + '?view=errors')
+            self.browser.wait_until_not('.loading-indicator')
+            self.browser.snapshot('events-v2 - errors')
diff --git a/tests/js/spec/views/organizationEventsV2/utils.spec.jsx b/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
index 7be03dc0ef..77799297da 100644
--- a/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
@@ -24,13 +24,12 @@ describe('getQuery()', function() {
       id: 'test',
       name: 'test view',
       data: {
-        query: '',
         fields: ['event', 'user', 'issue.id'],
       },
       tags: [],
     };
 
-    expect(getQuery(view).field).toEqual([
+    expect(getQuery(view, {}).field).toEqual([
       'title',
       'id',
       'project.name',
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 07c2de41f9..5298de36ba 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -57,7 +57,7 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
         )
 
         query = {
-            'fields': ['id', 'project.id'],
+            'field': ['id', 'project.id'],
             'project': [project.id, project2.id],
         }
         with self.feature({'organizations:events-v2': True, 'organizations:global-views': False}):
@@ -201,7 +201,7 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
         assert response.data[1]['project.id'] == project.id
         assert response.data[1]['environment'] == 'staging'
 
-    def test_event_and_user_counts(self):
+    def test_special_fields(self):
         self.login_as(user=self.user)
         project = self.create_project()
         self.store_event(
@@ -245,8 +245,8 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
                 self.url,
                 format='json',
                 data={
-                    'groupby': ['issue.id'],
-                    'aggregation': ['uniq,id,event_count', 'uniq,sentry:user,user_count'],
+                    'field': ['issue_title', 'event_count', 'user_count'],
+                    'groupby': ['issue.id', 'project.id'],
                     'orderby': 'issue.id'
                 },
             )
