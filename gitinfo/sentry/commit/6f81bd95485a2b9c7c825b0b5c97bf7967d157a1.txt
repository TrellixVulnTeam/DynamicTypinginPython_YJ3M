commit 6f81bd95485a2b9c7c825b0b5c97bf7967d157a1
Author: evanh <evanh@users.noreply.github.com>
Date:   Wed Feb 26 13:35:25 2020 -0500

    fix(discover) Properly expand alias inside aggregate (#17310)
    
    When using project/issue alias inside aggregate functions, properly use the
    correct field in the snuba query so the results are accurate.

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 285b3b8a31..6aced915ca 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -840,8 +840,8 @@ def get_filter(query=None, params=None):
 FIELD_ALIASES = {
     "last_seen": {"aggregations": [["max", "timestamp", "last_seen"]]},
     "latest_event": {"aggregations": [["argMax", ["id", "timestamp"], "latest_event"]]},
-    "project": {"fields": ["project.id"]},
-    "issue": {"fields": ["issue.id"]},
+    "project": {"fields": ["project.id"], "column_alias": "project.id"},
+    "issue": {"fields": ["issue.id"], "column_alias": "issue.id"},
     "user": {"fields": ["user.id", "user.username", "user.email", "user.ip"]},
     # Long term these will become more complex functions but these are
     # field aliases.
@@ -1113,12 +1113,17 @@ def resolve_field(field, params=None):
         # count() is a special function that ignores its column arguments.
         return (None, [["count", None, get_aggregate_alias(match)]])
 
+    # If we use an alias inside an aggregate, resolve it here
+    column = match.group("column")
+    if column in FIELD_ALIASES:
+        column = FIELD_ALIASES[column].get("column_alias", column)
+
     return (
         None,
         [
             [
                 VALID_AGGREGATES[match.group("function")]["snuba_name"],
-                match.group("column"),
+                column,
                 get_aggregate_alias(match),
             ]
         ],
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 9cad4e574b..36c4802ee1 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -1317,3 +1317,105 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
             data = response.data["data"]
             assert len(data) == 1
             assert data[0]["count"] == 0
+
+    def test_issue_alias_inside_aggregate(self):
+        self.login_as(user=self.user)
+
+        project1 = self.create_project()
+        self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "transaction": "/example",
+                "message": "how to make fast",
+                "timestamp": self.two_min_ago,
+                "fingerprint": ["group_1"],
+            },
+            project_id=project1.id,
+        )
+
+        self.store_event(
+            data={
+                "event_id": "b" * 32,
+                "transaction": "/example",
+                "message": "how to make fast",
+                "timestamp": self.two_min_ago,
+                "fingerprint": ["group_2"],
+            },
+            project_id=project1.id,
+        )
+
+        with self.feature(
+            {"organizations:discover-basic": True, "organizations:global-views": True}
+        ):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "field": [
+                        "project",
+                        "count(id)",
+                        "count_unique(issue.id)",
+                        "count_unique(issue)",
+                    ],
+                    "sort": "-count(id)",
+                    "statsPeriod": "24h",
+                },
+            )
+
+            assert response.status_code == 200, response.content
+            data = response.data["data"]
+            assert len(data) == 1
+            assert data[0]["count_id"] == 2
+            assert data[0]["count_unique_issue_id"] == 2
+            assert data[0]["count_unique_issue"] == 2
+
+    def test_project_alias_inside_aggregate(self):
+        self.login_as(user=self.user)
+
+        project1 = self.create_project()
+        project2 = self.create_project()
+        self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "transaction": "/example",
+                "message": "how to make fast",
+                "timestamp": self.two_min_ago,
+                "fingerprint": ["group_1"],
+            },
+            project_id=project1.id,
+        )
+        self.store_event(
+            data={
+                "event_id": "b" * 32,
+                "transaction": "/example",
+                "message": "how to make fast",
+                "timestamp": self.two_min_ago,
+                "fingerprint": ["group_2"],
+            },
+            project_id=project2.id,
+        )
+
+        with self.feature(
+            {"organizations:discover-basic": True, "organizations:global-views": True}
+        ):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "field": [
+                        "event.type",
+                        "count(id)",
+                        "count_unique(project.id)",
+                        "count_unique(project)",
+                    ],
+                    "sort": "-count(id)",
+                    "statsPeriod": "24h",
+                },
+            )
+
+            assert response.status_code == 200, response.content
+            data = response.data["data"]
+            assert len(data) == 1
+            assert data[0]["count_id"] == 2
+            assert data[0]["count_unique_project_id"] == 2
+            assert data[0]["count_unique_project"] == 2
