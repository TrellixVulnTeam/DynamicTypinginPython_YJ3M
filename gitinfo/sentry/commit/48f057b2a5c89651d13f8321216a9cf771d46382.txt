commit 48f057b2a5c89651d13f8321216a9cf771d46382
Author: Mark Story <mark@sentry.io>
Date:   Thu Feb 6 12:03:46 2020 -0500

    feat(discover) Display total event count in chart footer (#16819)
    
    This displays the total number of rows in the chart footer, so that
    value is visible to users. In a future pull request the tooltip contents
    will also be moved into the footer.
    
    Add wrapper component around chart footer. This will make the getsentry
    upsell state simpler. I've also reduced how often events-meta is requested.

diff --git a/src/sentry/static/sentry/app/views/events/eventsChart.jsx b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
index 8f04b8774f..be11924fa9 100644
--- a/src/sentry/static/sentry/app/views/events/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
@@ -12,12 +12,10 @@ import ReleaseSeries from 'app/components/charts/releaseSeries';
 import SentryTypes from 'app/sentryTypes';
 import withApi from 'app/utils/withApi';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
-import {callIfFunction} from 'app/utils/callIfFunction';
 import {IconWarning} from 'app/icons';
 import theme from 'app/utils/theme';
 
 import EventsRequest from './utils/eventsRequest';
-import YAxisSelector from './yAxisSelector';
 
 class EventsAreaChart extends React.Component {
   static propTypes = {
@@ -103,28 +101,9 @@ class EventsChart extends React.Component {
     utc: PropTypes.bool,
     router: PropTypes.object,
     showLegend: PropTypes.bool,
-    yAxisOptions: PropTypes.array,
-    yAxisValue: PropTypes.string,
-    onYAxisChange: PropTypes.func,
+    yAxis: PropTypes.string,
   };
 
-  handleYAxisChange = value => {
-    const {onYAxisChange} = this.props;
-    callIfFunction(onYAxisChange, value);
-  };
-
-  getYAxisValue() {
-    const {yAxisValue, yAxisOptions} = this.props;
-    if (yAxisValue) {
-      return yAxisValue;
-    }
-    if (yAxisOptions && yAxisOptions.length) {
-      return yAxisOptions[0].value;
-    }
-
-    return undefined;
-  }
-
   render() {
     const {
       api,
@@ -137,12 +116,11 @@ class EventsChart extends React.Component {
       projects,
       environments,
       showLegend,
-      yAxisOptions,
+      yAxis,
       ...props
     } = this.props;
     // Include previous only on relative dates (defaults to relative if no start and end)
     const includePrevious = !start && !end;
-    const yAxis = this.getYAxisValue();
 
     return (
       <ChartZoom
@@ -196,13 +174,6 @@ class EventsChart extends React.Component {
                           timeseriesData={timeseriesData}
                           previousTimeseriesData={previousTimeseriesData}
                         />
-                        {yAxisOptions && (
-                          <YAxisSelector
-                            selected={yAxis}
-                            options={yAxisOptions}
-                            onChange={this.handleYAxisChange}
-                          />
-                        )}
                       </React.Fragment>
                     );
                   }}
diff --git a/src/sentry/static/sentry/app/views/events/yAxisSelector.jsx b/src/sentry/static/sentry/app/views/events/yAxisSelector.jsx
index 8ab8c42225..541c628aca 100644
--- a/src/sentry/static/sentry/app/views/events/yAxisSelector.jsx
+++ b/src/sentry/static/sentry/app/views/events/yAxisSelector.jsx
@@ -5,15 +5,15 @@ import DropdownButton from 'app/components/dropdownButton';
 import DropdownControl, {DropdownItem} from 'app/components/dropdownControl';
 import {t} from 'app/locale';
 import space from 'app/styles/space';
-import {SectionHeading} from '../eventsV2/styles';
+import {InlineContainer, SectionHeading} from '../eventsV2/styles';
 
 const YAxisSelector = props => {
   const {options, onChange, selected} = props;
   const selectedOption = options.find(opt => selected === opt.value) || options[0];
 
   return (
-    <ChartControls>
-      <StyledLabel>{t('Y-Axis')}</StyledLabel>
+    <InlineContainer>
+      <SectionHeading>{t('Y-Axis')}</SectionHeading>
       <DropdownControl
         menuWidth="auto"
         alignRight
@@ -34,17 +34,10 @@ const YAxisSelector = props => {
           </DropdownItem>
         ))}
       </DropdownControl>
-    </ChartControls>
+    </InlineContainer>
   );
 };
 
-const ChartControls = styled('div')`
-  display: flex;
-  justify-content: flex-end;
-  padding: ${space(1)};
-  border-top: 1px solid ${p => p.theme.borderLight};
-`;
-
 const StyledDropdownButton = styled(DropdownButton)`
   padding: ${space(1)} ${space(2)};
   font-weight: normal;
@@ -57,11 +50,6 @@ const StyledDropdownButton = styled(DropdownButton)`
   }
 `;
 
-const StyledLabel = styled(SectionHeading)`
-  padding-right: ${space(1)};
-  line-height: 1.2;
-`;
-
 YAxisSelector.propTypes = {
   options: PropTypes.array.isRequired,
   onChange: PropTypes.func.isRequired,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/chartFooter.tsx b/src/sentry/static/sentry/app/views/eventsV2/chartFooter.tsx
new file mode 100644
index 0000000000..d0ddc1f03c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/eventsV2/chartFooter.tsx
@@ -0,0 +1,27 @@
+import React from 'react';
+
+import {t} from 'app/locale';
+import {SelectValue} from 'app/types';
+import Count from 'app/components/count';
+import YAxisSelector from 'app/views/events/yAxisSelector';
+
+import {ChartControls, InlineContainer, SectionHeading} from './styles';
+
+type Props = {
+  total: number | null;
+  yAxisValue: string;
+  yAxisOptions: SelectValue<string>[];
+  onChange: (value: string) => void;
+};
+
+export default function ChartFooter({total, yAxisValue, yAxisOptions, onChange}: Props) {
+  return (
+    <ChartControls>
+      <InlineContainer>
+        <SectionHeading>{t('Count')}</SectionHeading>
+        {total === null ? '-' : <Count value={Number(total)} />}
+      </InlineContainer>
+      <YAxisSelector selected={yAxisValue} options={yAxisOptions} onChange={onChange} />
+    </ChartControls>
+  );
+}
diff --git a/src/sentry/static/sentry/app/views/eventsV2/results.tsx b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
index 82aee1f4a3..bb2b9a7604 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/results.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
@@ -1,5 +1,6 @@
 import React from 'react';
 import styled from '@emotion/styled';
+import * as Sentry from '@sentry/browser';
 import * as ReactRouter from 'react-router';
 import {Location} from 'history';
 import omit from 'lodash/omit';
@@ -33,8 +34,9 @@ import {DEFAULT_EVENT_VIEW} from './data';
 import Table from './table';
 import Tags from './tags';
 import ResultsHeader from './resultsHeader';
-import EventView, {Field} from './eventView';
-import {generateTitle} from './utils';
+import ChartFooter from './chartFooter';
+import EventView, {Field, isAPIPayloadSimilar} from './eventView';
+import {generateTitle, fetchTotalCount} from './utils';
 
 const CHART_AXIS_OPTIONS = [
   {label: 'count(id)', value: 'count(id)'},
@@ -52,35 +54,63 @@ type Props = {
 type State = {
   eventView: EventView;
   error: string;
+  totalValues: null | number;
 };
 
 class Results extends React.Component<Props, State> {
   static getDerivedStateFromProps(nextProps: Props, prevState: State): State {
     const eventView = EventView.fromLocation(nextProps.location);
-    return {eventView, error: prevState.error};
+    return {...prevState, eventView};
   }
 
   state = {
     eventView: EventView.fromLocation(this.props.location),
     error: '',
+    totalValues: null,
   };
 
   componentDidMount() {
     const {api, organization, selection} = this.props;
     loadOrganizationTags(api, organization.slug, selection);
-
     this.checkEventView();
+    this.fetchTotalCount();
   }
 
-  componentDidUpdate(prevProps: Props) {
-    const {api, organization, selection} = this.props;
+  componentDidUpdate(prevProps: Props, prevState: State) {
+    const {api, location, organization, selection} = this.props;
+    const {eventView} = this.state;
     if (
       !isEqual(prevProps.selection.projects, selection.projects) ||
       !isEqual(prevProps.selection.datetime, selection.datetime)
     ) {
       loadOrganizationTags(api, organization.slug, selection);
     }
+
     this.checkEventView();
+    const currentQuery = eventView.getEventsAPIPayload(location);
+    const prevQuery = prevState.eventView.getEventsAPIPayload(prevProps.location);
+    if (!isAPIPayloadSimilar(currentQuery, prevQuery)) {
+      this.fetchTotalCount();
+    }
+  }
+
+  async fetchTotalCount() {
+    const {api, organization, location} = this.props;
+    const {eventView} = this.state;
+    if (!eventView.isValid()) {
+      return;
+    }
+
+    try {
+      const totals = await fetchTotalCount(
+        api,
+        organization.slug,
+        eventView.getEventsAPIPayload(location)
+      );
+      this.setState({totalValues: totals});
+    } catch (err) {
+      Sentry.captureException(err);
+    }
   }
 
   checkEventView() {
@@ -147,9 +177,18 @@ class Results extends React.Component<Props, State> {
 
   renderTagsTable = () => {
     const {organization, location} = this.props;
-    const {eventView} = this.state;
+    const {eventView, totalValues} = this.state;
 
-    return <Tags eventView={eventView} organization={organization} location={location} />;
+    // Move events-meta call out of Tags into this component
+    // so that we can push it into the chart footer.
+    return (
+      <Tags
+        totalValues={totalValues}
+        eventView={eventView}
+        organization={organization}
+        location={location}
+      />
+    );
   };
 
   renderError = error => {
@@ -169,7 +208,7 @@ class Results extends React.Component<Props, State> {
 
   render() {
     const {organization, location, router} = this.props;
-    const {eventView, error} = this.state;
+    const {eventView, error, totalValues} = this.state;
     const query = location.query.query || '';
     const title = this.getDocumentTitle();
 
@@ -187,6 +226,7 @@ class Results extends React.Component<Props, State> {
         .concat(CHART_AXIS_OPTIONS),
       'value'
     );
+    const yAxisValue = eventView.yAxis || yAxisOptions[0].value;
 
     return (
       <SentryDocumentTitle title={title} objSlug={organization.slug}>
@@ -215,15 +255,19 @@ class Results extends React.Component<Props, State> {
                         query={eventView.getEventsAPIPayload(location).query}
                         organization={organization}
                         showLegend
-                        yAxisOptions={yAxisOptions}
-                        yAxisValue={eventView.yAxis}
-                        onYAxisChange={this.handleYAxisChange}
+                        yAxis={yAxisValue}
                         project={eventView.project as number[]}
                         environment={eventView.environment as string[]}
                       />
                     ),
                     fixed: 'events chart',
                   })}
+                  <ChartFooter
+                    total={totalValues}
+                    yAxisValue={yAxisValue}
+                    yAxisOptions={yAxisOptions}
+                    onChange={this.handleYAxisChange}
+                  />
                 </StyledPanel>
               </Top>
               <Main eventView={eventView}>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx b/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx
index 1efad6eab8..db9cee5691 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx
@@ -1,5 +1,4 @@
 import React from 'react';
-import styled from '@emotion/styled';
 import {Location} from 'history';
 
 import {Organization, SavedQuery} from 'app/types';
@@ -10,13 +9,13 @@ import Feature from 'app/components/acl/feature';
 import FeatureDisabled from 'app/components/acl/featureDisabled';
 import Hovercard from 'app/components/hovercard';
 import {t} from 'app/locale';
-import space from 'app/styles/space';
 import withApi from 'app/utils/withApi';
 
 import DiscoverBreadcrumb from './breadcrumb';
 import EventInputName from './eventInputName';
 import EventView from './eventView';
 import SavedQueryButtonGroup from './savedQuery';
+import {HeaderBox, HeaderControls} from './styles';
 
 type Props = {
   api: Client;
@@ -89,7 +88,7 @@ class ResultsHeader extends React.Component<Props, State> {
           organization={organization}
           eventView={eventView}
         />
-        <Controller>
+        <HeaderControls>
           <Feature
             organization={organization}
             features={['discover-query']}
@@ -107,36 +106,10 @@ class ResultsHeader extends React.Component<Props, State> {
               />
             )}
           </Feature>
-        </Controller>
+        </HeaderControls>
       </HeaderBox>
     );
   }
 }
 
-const HeaderBox = styled('div')`
-  padding: ${space(2)} ${space(4)};
-  background-color: ${p => p.theme.white};
-  border-bottom: 1px solid ${p => p.theme.borderDark};
-  grid-row-gap: ${space(2)};
-  margin: 0;
-
-  @media (min-width: ${p => p.theme.breakpoints[1]}) {
-    display: grid;
-    grid-template-rows: 1fr 30px;
-    grid-template-columns: 65% auto;
-    grid-column-gap: ${space(3)};
-  }
-
-  @media (min-width: ${p => p.theme.breakpoints[2]}) {
-    grid-template-columns: auto 325px;
-  }
-`;
-
-const Controller = styled('div')`
-  display: flex;
-  justify-self: end;
-  grid-row: 1/2;
-  grid-column: 2/3;
-`;
-
 export default withApi(ResultsHeader);
diff --git a/src/sentry/static/sentry/app/views/eventsV2/styles.tsx b/src/sentry/static/sentry/app/views/eventsV2/styles.tsx
index 8620a71402..96e8e337d1 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/styles.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/styles.tsx
@@ -9,6 +9,8 @@ export const SectionHeading = styled('h4')`
   color: ${p => p.theme.gray3};
   font-size: ${p => p.theme.fontSizeMedium};
   margin: ${space(1)} 0;
+  padding-right: ${space(1)};
+  line-height: 1.2;
 `;
 
 export const Container = styled('div')`
@@ -28,3 +30,42 @@ export const StyledDateTime = styled(DateTime)`
 export const OverflowLink = styled(Link)`
   ${overflowEllipsis};
 `;
+
+export const ChartControls = styled('div')`
+  display: flex;
+  justify-content: space-between;
+  padding: ${space(1)} ${space(3)};
+  border-top: 1px solid ${p => p.theme.borderLight};
+`;
+
+export const HeaderBox = styled('div')`
+  padding: ${space(2)} ${space(4)};
+  background-color: ${p => p.theme.white};
+  border-bottom: 1px solid ${p => p.theme.borderDark};
+  grid-row-gap: ${space(2)};
+  margin: 0;
+
+  @media (min-width: ${p => p.theme.breakpoints[1]}) {
+    display: grid;
+    grid-template-rows: 1fr 30px;
+    grid-template-columns: 65% auto;
+    grid-column-gap: ${space(3)};
+  }
+
+  @media (min-width: ${p => p.theme.breakpoints[2]}) {
+    grid-template-columns: auto 325px;
+  }
+`;
+
+export const HeaderControls = styled('div')`
+  display: flex;
+  justify-self: end;
+  grid-row: 1/2;
+  grid-column: 2/3;
+`;
+
+export const InlineContainer = styled('div')`
+  display: flex;
+  flex-direction: row;
+  align-items: center;
+`;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/tags.tsx b/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
index 61da7952ae..430082c061 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
@@ -17,7 +17,7 @@ import {generateQueryWithTag} from 'app/utils';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 import {SectionHeading} from './styles';
 
-import {fetchTagFacets, fetchTotalCount, Tag} from './utils';
+import {fetchTagFacets, Tag} from './utils';
 import EventView, {isAPIPayloadSimilar} from './eventView';
 
 type Props = {
@@ -25,6 +25,7 @@ type Props = {
   organization: Organization;
   eventView: EventView;
   location: Location;
+  totalValues: null | number;
 };
 
 type State = {
@@ -68,27 +69,19 @@ class Tags extends React.Component<Props, State> {
 
   fetchData = async () => {
     const {api, organization, eventView, location} = this.props;
-
-    this.setState({loading: true, tags: [], totalValues: null});
-
-    const facetPromise = fetchTagFacets(
-      api,
-      organization.slug,
-      eventView.getFacetsAPIPayload(location)
-    );
-    const totalValuePromise = fetchTotalCount(
-      api,
-      organization.slug,
-      eventView.getEventsAPIPayload(location)
-    );
-    Promise.all([facetPromise, totalValuePromise])
-      .then(values => {
-        this.setState({loading: false, tags: values[0], totalValues: values[1]});
-      })
-      .catch(err => {
-        Sentry.captureException(err);
-        this.setState({loading: false, error: err});
-      });
+    this.setState({loading: true, error: '', tags: []});
+
+    try {
+      const tags = await fetchTagFacets(
+        api,
+        organization.slug,
+        eventView.getFacetsAPIPayload(location)
+      );
+      this.setState({loading: false, tags});
+    } catch (err) {
+      Sentry.captureException(err);
+      this.setState({loading: false, error: err});
+    }
   };
 
   onTagClick = (tag: string) => {
@@ -103,8 +96,7 @@ class Tags extends React.Component<Props, State> {
   };
 
   renderTag(tag: Tag) {
-    const {organization, eventView} = this.props;
-    const {totalValues} = this.state;
+    const {organization, eventView, totalValues} = this.props;
 
     const segments: TagSegment[] = tag.topValues.map(segment => {
       const url = eventView.getResultsViewUrlTarget(organization.slug);
diff --git a/tests/js/spec/views/events/eventsAreaChart.spec.jsx b/tests/js/spec/views/events/eventsAreaChart.spec.jsx
index 22bb0237d6..96b6827659 100644
--- a/tests/js/spec/views/events/eventsAreaChart.spec.jsx
+++ b/tests/js/spec/views/events/eventsAreaChart.spec.jsx
@@ -50,28 +50,4 @@ describe('EventsChart > EventsAreaChart', function() {
     const areaChart = wrapper.find('AreaChart');
     expect(areaChart.props().legend).toHaveProperty('data');
   });
-
-  it('responds to y-axis changes', function() {
-    const options = [
-      {label: 'users', value: 'user_count'},
-      {label: 'events', value: 'event_count'},
-    ];
-    wrapper.setProps({yAxisOptions: options});
-    wrapper.update();
-    const selector = wrapper.find('YAxisSelector');
-    expect(selector).toHaveLength(1);
-
-    // Open the selector
-    selector.find('StyledDropdownButton button').simulate('click');
-
-    // Click one of the options.
-    selector
-      .find('DropdownMenu MenuItem a')
-      .first()
-      .simulate('click');
-    wrapper.update();
-
-    const eventsRequest = wrapper.find('EventsRequest');
-    expect(eventsRequest.props().yAxis).toEqual('user_count');
-  });
 });
diff --git a/tests/js/spec/views/eventsV2/results.spec.jsx b/tests/js/spec/views/eventsV2/results.spec.jsx
index ff563c61fd..07ef0950b4 100644
--- a/tests/js/spec/views/eventsV2/results.spec.jsx
+++ b/tests/js/spec/views/eventsV2/results.spec.jsx
@@ -75,6 +75,12 @@ describe('EventsV2 > Results', function() {
         ],
       },
     });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/events-meta/',
+      body: {
+        count: 2,
+      },
+    });
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/events/project-slug:deadbeef/',
       method: 'GET',
@@ -184,4 +190,42 @@ describe('EventsV2 > Results', function() {
       },
     });
   });
+
+  it('renders a y-axis selector', function() {
+    const organization = TestStubs.Organization({
+      features,
+      projects: [TestStubs.Project()],
+    });
+
+    const initialData = initializeOrg({
+      organization,
+      router: {
+        location: {query: {...generateFields(), yAxis: 'count_id'}},
+      },
+    });
+
+    const wrapper = mountWithTheme(
+      <Results
+        organization={organization}
+        location={initialData.router.location}
+        router={initialData.router}
+      />,
+      initialData.routerContext
+    );
+    const selector = wrapper.find('YAxisSelector');
+    expect(selector).toHaveLength(1);
+
+    // Open the selector
+    selector.find('StyledDropdownButton button').simulate('click');
+
+    // Click one of the options.
+    selector
+      .find('DropdownMenu MenuItem a')
+      .first()
+      .simulate('click');
+    wrapper.update();
+
+    const eventsRequest = wrapper.find('EventsChart');
+    expect(eventsRequest.props().yAxis).toEqual('count_id');
+  });
 });
diff --git a/tests/js/spec/views/eventsV2/tags.spec.jsx b/tests/js/spec/views/eventsV2/tags.spec.jsx
index b89bee8f21..37051270b5 100644
--- a/tests/js/spec/views/eventsV2/tags.spec.jsx
+++ b/tests/js/spec/views/eventsV2/tags.spec.jsx
@@ -22,13 +22,6 @@ describe('Tags', function() {
         },
       ],
     });
-
-    Client.addMockResponse({
-      url: `/organizations/${org.slug}/events-meta/`,
-      body: {
-        count: 2,
-      },
-    });
   });
 
   afterEach(function() {
@@ -48,6 +41,7 @@ describe('Tags', function() {
       <Tags
         eventView={view}
         api={api}
+        totalValues={2}
         organization={org}
         selection={{projects: [], environments: [], datetime: {}}}
         location={{query: {}}}
@@ -85,6 +79,7 @@ describe('Tags', function() {
         eventView={view}
         api={api}
         organization={org}
+        totalValues={2}
         selection={{projects: [], environments: [], datetime: {}}}
         location={initialData.router.location}
       />,
