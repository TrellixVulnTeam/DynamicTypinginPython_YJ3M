commit 8ab672f6aa9c45745ed2ea8fb2542c6a748104ab
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Jun 6 17:21:39 2019 -0700

    ref(sentry10): Remove old project dashboard (aka Overview tab) (#13577)
    
    Not used since Sentry 9

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index f7b8b76ea9..bc8c701737 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1135,13 +1135,7 @@ function routes() {
           <IndexRedirect to="/organizations/:orgId/issues/" />
           <Redirect from="issues/" to="/organizations/:orgId/issues/" />
           <Redirect from="searches/:searchId/" to="/organizations/:orgId/issues/" />
-          <Route
-            path="dashboard/"
-            componentPromise={() =>
-              import(/*webpackChunkName: "ProjectDashboard"*/ './views/projectDashboard')
-            }
-            component={errorHandler(LazyLoad)}
-          />
+          <Redirect from="dashboard/" to="/organizations/:orgId/dashboard/" />
           <Redirect from="releases/" to="/organizations/:orgId/releases/" />
           <Redirect
             from="releases/:version/"
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx b/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
deleted file mode 100644
index d1f8b6e19c..0000000000
--- a/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
+++ /dev/null
@@ -1,163 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from 'react-emotion';
-import createReactClass from 'create-react-class';
-import moment from 'moment';
-import SentryTypes from 'app/sentryTypes';
-import withApi from 'app/utils/withApi';
-import BarChart from 'app/components/barChart';
-import DynamicWrapper from 'app/components/dynamicWrapper';
-import LoadingError from 'app/components/loadingError';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import ProjectState from 'app/mixins/projectState';
-
-const ProjectChart = createReactClass({
-  displayName: 'ProjectChart',
-
-  propTypes: {
-    api: PropTypes.object,
-    dateSince: PropTypes.number.isRequired,
-    resolution: PropTypes.string.isRequired,
-    environment: SentryTypes.Environment,
-  },
-
-  mixins: [ProjectState],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      stats: [],
-      releaseList: [],
-      environment: this.props.environment,
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  componentWillReceiveProps(nextProps) {
-    if (
-      nextProps.environment !== this.props.environment ||
-      nextProps.resolution !== this.props.resolution ||
-      nextProps.dateSince !== this.props.dateSince
-    ) {
-      this.setState(
-        {
-          environment: nextProps.environment,
-          loading: true,
-          error: false,
-        },
-        this.fetchData
-      );
-    }
-  },
-
-  getStatsEndpoint() {
-    const org = this.getOrganization();
-    const project = this.getProject();
-    return '/projects/' + org.slug + '/' + project.slug + '/stats/';
-  },
-
-  getProjectReleasesEndpoint() {
-    const org = this.getOrganization();
-    const project = this.getProject();
-    return '/projects/' + org.slug + '/' + project.slug + '/releases/';
-  },
-
-  fetchData() {
-    const statsQuery = {
-      since: this.props.dateSince,
-      resolution: this.props.resolution,
-      stat: 'generated',
-    };
-
-    const releasesQuery = {};
-
-    if (this.state.environment) {
-      statsQuery.environment = this.state.environment.name;
-      releasesQuery.environment = this.state.environment.name;
-    }
-    this.props.api.request(this.getStatsEndpoint(), {
-      query: statsQuery,
-      success: data => {
-        this.setState({
-          stats: data,
-          error: false,
-          loading: false,
-        });
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false,
-        });
-      },
-    });
-
-    this.props.api.request(this.getProjectReleasesEndpoint(), {
-      query: releasesQuery,
-      success: (data, _, jqXHR) => {
-        this.setState({
-          releaseList: data,
-        });
-      },
-    });
-  },
-
-  renderChart() {
-    const points = this.state.stats.map(point => {
-      return {x: point[0], y: point[1]};
-    });
-    const startX = this.props.dateSince;
-    const markers = this.state.releaseList
-      .filter(release => {
-        const date = new Date(release.dateCreated).getTime() / 1000;
-        return date >= startX;
-      })
-      .map(release => {
-        return {
-          label: 'Version ' + release.shortVersion,
-          x: new Date(release.dateCreated).getTime() / 1000,
-        };
-      });
-
-    return (
-      <div className="chart-wrapper">
-        <StyledBarChart
-          points={points}
-          markers={markers}
-          label="events"
-          height={150}
-          gap={0.2}
-          className="standard-barchart"
-        />
-        <small className="date-legend">
-          <DynamicWrapper
-            fixed="Test Date 1, 2000"
-            value={moment(this.props.dateSince * 1000).format('LL')}
-          />
-        </small>
-      </div>
-    );
-  },
-
-  render() {
-    return this.state.loading ? (
-      <LoadingIndicator />
-    ) : this.state.error ? (
-      <LoadingError onRetry={this.fetchData} />
-    ) : (
-      this.renderChart()
-    );
-  },
-});
-
-const StyledBarChart = styled(BarChart)`
-  background: #fff;
-`;
-
-export {ProjectChart};
-
-export default withApi(ProjectChart);
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx b/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
deleted file mode 100644
index 62371661e6..0000000000
--- a/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
+++ /dev/null
@@ -1,156 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-import queryString from 'query-string';
-
-import {Panel, PanelHeader, PanelBody} from 'app/components/panels';
-import {t, tct} from 'app/locale';
-import withApi from 'app/utils/withApi';
-import LoadingError from 'app/components/loadingError';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import SentryTypes from 'app/sentryTypes';
-
-import EventNode from './eventNode';
-
-const EventList = createReactClass({
-  displayName: 'EventList',
-
-  propTypes: {
-    api: PropTypes.object,
-    type: PropTypes.oneOf(['new', 'priority']).isRequired,
-    environment: SentryTypes.Environment,
-    dateSince: PropTypes.number,
-  },
-
-  getInitialState() {
-    return {
-      groupList: [],
-      loading: true,
-      error: false,
-      statsPeriod: '24h',
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  componentWillReceiveProps(nextProps) {
-    if (nextProps.environment !== this.props.environment) {
-      this.setState(
-        {
-          loading: true,
-          error: false,
-        },
-        this.fetchData
-      );
-    }
-  },
-
-  getEndpoint() {
-    const {params, type, environment} = this.props;
-
-    const qs = {
-      sort: type,
-      query: 'is:unresolved',
-      since: this.props.dateSince,
-    };
-
-    if (environment) {
-      qs.environment = environment.name;
-      qs.query = `${qs.query} environment:${environment.name}`;
-    }
-
-    return `/projects/${params.orgId}/${params.projectId}/issues/?${queryString.stringify(
-      qs
-    )}`;
-  },
-
-  getMinutes() {
-    switch (this.state.statsPeriod) {
-      case '15m':
-        return '15';
-      case '60m':
-        return '60';
-      case '24h':
-      default:
-        return '1440';
-    }
-  },
-
-  fetchData() {
-    const endpoint = this.getEndpoint();
-    const minutes = this.getMinutes();
-
-    this.props.api.request(endpoint, {
-      query: {
-        limit: 5,
-        minutes,
-      },
-      success: data => {
-        this.setState({
-          groupList: data,
-          loading: false,
-          error: false,
-        });
-      },
-      error: () => {
-        this.setState({
-          loading: false,
-          error: true,
-        });
-      },
-    });
-  },
-
-  onSelectStatsPeriod(period) {
-    this.setState({
-      statsPeriod: period,
-    });
-  },
-
-  render() {
-    const eventNodes = this.state.groupList.map(item => {
-      return <EventNode group={item} key={item.id} />;
-    });
-
-    const {environment} = this.props;
-
-    const emptyStateMessage = environment
-      ? tct('No data available in the [env] environment.', {
-          env: environment.displayName,
-        })
-      : t('No data available.');
-
-    return (
-      <Panel>
-        <PanelHeader>
-          <div className="row" style={{flex: 1}}>
-            <div className="col-xs-8">
-              {this.props.type === 'new' ? t('New issues') : t('Trending issues')}
-            </div>
-            <div className="col-xs-2 align-right">{t('Events')}</div>
-            <div className="col-xs-2 align-right">{t('Users')}</div>
-          </div>
-        </PanelHeader>
-        <PanelBody>
-          <div className="tab-pane active">
-            {this.state.loading ? (
-              <LoadingIndicator />
-            ) : this.state.error ? (
-              <LoadingError onRetry={this.fetchData} />
-            ) : eventNodes.length ? (
-              <ul className="group-list group-list-small">{eventNodes}</ul>
-            ) : (
-              <div className="group-list-empty">{emptyStateMessage}</div>
-            )}
-          </div>
-        </PanelBody>
-      </Panel>
-    );
-  },
-});
-
-export {EventList};
-
-export default withApi(EventList);
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx b/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx
deleted file mode 100644
index 7e8a9a659f..0000000000
--- a/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx
+++ /dev/null
@@ -1,42 +0,0 @@
-import React from 'react';
-
-import createReactClass from 'create-react-class';
-
-import Count from 'app/components/count';
-import EventOrGroupExtraDetails from 'app/components/eventOrGroupExtraDetails';
-import EventOrGroupHeader from 'app/components/eventOrGroupHeader';
-import ProjectState from 'app/mixins/projectState';
-import SentryTypes from 'app/sentryTypes';
-
-const EventNode = createReactClass({
-  displayName: 'EventNode',
-
-  propTypes: {
-    group: SentryTypes.Group.isRequired,
-  },
-
-  mixins: [ProjectState],
-
-  render() {
-    const group = this.props.group;
-    const userCount = group.userCount;
-
-    return (
-      <li className="group row">
-        <div className="col-xs-8 event-details">
-          <EventOrGroupHeader data={group} hideIcons hideLevel />
-          <EventOrGroupExtraDetails {...group} />
-        </div>
-
-        <div className="col-xs-2 event-count align-right">
-          <Count value={group.count} />
-        </div>
-        <div className="col-xs-2 event-users align-right">
-          <Count value={userCount} />
-        </div>
-      </li>
-    );
-  },
-});
-
-export default EventNode;
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/index.jsx b/src/sentry/static/sentry/app/views/projectDashboard/index.jsx
deleted file mode 100644
index e074973a2b..0000000000
--- a/src/sentry/static/sentry/app/views/projectDashboard/index.jsx
+++ /dev/null
@@ -1,179 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-import {Link} from 'react-router';
-import DocumentTitle from 'react-document-title';
-
-import SentryTypes from 'app/sentryTypes';
-import ProjectState from 'app/mixins/projectState';
-import PageHeading from 'app/components/pageHeading';
-import {t} from 'app/locale';
-import withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';
-
-import EventList from './eventList';
-import ProjectChart from './chart';
-
-const PERIOD_HOUR = '1h';
-const PERIOD_DAY = '1d';
-const PERIOD_WEEK = '1w';
-const PERIODS = new Set([PERIOD_HOUR, PERIOD_DAY, PERIOD_WEEK]);
-
-const ProjectDashboard = createReactClass({
-  displayName: 'ProjectDashboard',
-
-  propTypes: {
-    defaultStatsPeriod: PropTypes.string,
-    setProjectNavSection: PropTypes.func,
-    environment: SentryTypes.Environment,
-  },
-
-  mixins: [ProjectState],
-
-  getDefaultProps() {
-    return {
-      defaultStatsPeriod: PERIOD_DAY,
-    };
-  },
-
-  getInitialState() {
-    return {
-      statsPeriod: this.props.defaultStatsPeriod,
-      ...this.getQueryStringState(),
-    };
-  },
-
-  componentWillMount() {
-    this.props.setProjectNavSection('dashboard');
-  },
-
-  componentWillReceiveProps(nextProps) {
-    this.setState(this.getQueryStringState(nextProps));
-  },
-
-  getQueryStringState(props) {
-    props = props || this.props;
-    const currentQuery = props.location.query;
-    let statsPeriod = currentQuery.statsPeriod;
-
-    if (!PERIODS.has(statsPeriod)) {
-      statsPeriod = props.defaultStatsPeriod;
-    }
-
-    return {
-      statsPeriod,
-    };
-  },
-
-  getStatsPeriodBeginTimestamp(statsPeriod) {
-    const now = new Date().getTime() / 1000;
-    switch (statsPeriod) {
-      case PERIOD_WEEK:
-        return now - 3600 * 24 * 7;
-      case PERIOD_HOUR:
-        return now - 3600;
-      case PERIOD_DAY:
-      default:
-        return now - 3600 * 24;
-    }
-  },
-
-  getStatsPeriodResolution(statsPeriod) {
-    switch (statsPeriod) {
-      case PERIOD_WEEK:
-        return '1h';
-      case PERIOD_HOUR:
-        return '10s';
-      case PERIOD_DAY:
-      default:
-        return '1h';
-    }
-  },
-
-  render() {
-    const {statsPeriod} = this.state;
-    const dateSince = this.getStatsPeriodBeginTimestamp(statsPeriod);
-    const resolution = this.getStatsPeriodResolution(statsPeriod);
-    const {orgId, projectId} = this.props.params;
-    const {name: orgName} = this.getOrganization();
-    const {slug: projectSlug} = this.getProject();
-    const url = `/${orgId}/${projectId}/dashboard/`;
-    const routeQuery = this.props.location.query;
-
-    return (
-      <DocumentTitle title={`Overview - ${projectSlug} - ${orgName} - Sentry`}>
-        <div>
-          <div className="row" style={{marginBottom: '5px'}}>
-            <div className="col-sm-9">
-              <PageHeading withMargins>{t('Overview')}</PageHeading>
-            </div>
-            <div className="col-sm-3" style={{textAlign: 'right', marginTop: '4px'}}>
-              <div className="btn-group">
-                <Link
-                  to={{
-                    pathname: url,
-                    query: {...routeQuery, statsPeriod: PERIOD_HOUR},
-                  }}
-                  className={
-                    'btn btn-sm btn-default' +
-                    (statsPeriod === PERIOD_HOUR ? ' active' : '')
-                  }
-                >
-                  {t('1 hour')}
-                </Link>
-                <Link
-                  to={{
-                    pathname: url,
-                    query: {...routeQuery, statsPeriod: PERIOD_DAY},
-                  }}
-                  className={
-                    'btn btn-sm btn-default' +
-                    (statsPeriod === PERIOD_DAY ? ' active' : '')
-                  }
-                >
-                  {t('1 day')}
-                </Link>
-                <Link
-                  to={{
-                    pathname: url,
-                    query: {...routeQuery, statsPeriod: PERIOD_WEEK},
-                  }}
-                  className={
-                    'btn btn-sm btn-default' +
-                    (statsPeriod === PERIOD_WEEK ? ' active' : '')
-                  }
-                >
-                  {t('1 week')}
-                </Link>
-              </div>
-            </div>
-          </div>
-          <ProjectChart
-            dateSince={dateSince}
-            resolution={resolution}
-            environment={this.props.environment}
-          />
-          <div className="row">
-            <div className="col-md-6">
-              <EventList
-                type="priority"
-                environment={this.props.environment}
-                dateSince={dateSince}
-                params={this.props.params}
-              />
-            </div>
-            <div className="col-md-6">
-              <EventList
-                type="new"
-                environment={this.props.environment}
-                dateSince={dateSince}
-                params={this.props.params}
-              />
-            </div>
-          </div>
-        </div>
-      </DocumentTitle>
-    );
-  },
-});
-
-export default withEnvironmentInQueryString(ProjectDashboard);
diff --git a/tests/acceptance/test_project_overview.py b/tests/acceptance/test_project_overview.py
deleted file mode 100644
index 021f7eb949..0000000000
--- a/tests/acceptance/test_project_overview.py
+++ /dev/null
@@ -1,53 +0,0 @@
-from __future__ import absolute_import
-
-import pytz
-
-from datetime import datetime
-from django.utils import timezone
-from mock import patch
-
-from sentry.testutils import AcceptanceTestCase, SnubaTestCase
-
-
-class ProjectOverviewTest(AcceptanceTestCase, SnubaTestCase):
-    def setUp(self):
-        super(ProjectOverviewTest, self).setUp()
-        self.user = self.create_user('foo@example.com')
-        self.org = self.create_organization(
-            owner=self.user, name='Rowdy Tiger')
-        self.team = self.create_team(
-            organization=self.org, name='Mariachi Band')
-        self.project = self.create_project(
-            organization=self.org,
-            teams=[self.team],
-            name='Bengal',
-        )
-        self.login_as(self.user)
-        self.path = u'/{}/{}/dashboard/'.format(
-            self.org.slug, self.project.slug)
-
-    @patch('django.utils.timezone.now')
-    def test_with_issues(self, mock_now):
-        mock_now.return_value = datetime.utcnow().replace(tzinfo=pytz.utc)
-
-        self.store_event(
-            data={
-                'message': 'Foo bar',
-                'level': 'error',
-                'timestamp': timezone.now().isoformat()[:19]
-            },
-            project_id=self.project.id,
-            assert_no_errors=False
-        )
-        self.browser.get(self.path)
-        self.browser.wait_until('.chart-wrapper')
-        self.browser.wait_until_not('.loading')
-        self.browser.snapshot('project dashboard with issues')
-
-    def test_with_no_issues(self):
-        self.project.update(first_event=timezone.now())
-        self.browser.get(self.path)
-        self.browser.wait_until_not('.loading')
-        self.browser.wait_until('.group-list-empty')
-        self.browser.wait_until_not('.loading')
-        self.browser.snapshot('project dashboard without issues')
