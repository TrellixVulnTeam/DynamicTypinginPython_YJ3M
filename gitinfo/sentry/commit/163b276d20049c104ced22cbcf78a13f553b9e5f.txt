commit 163b276d20049c104ced22cbcf78a13f553b9e5f
Author: Alex Hofsteede <alex@hofsteede.com>
Date:   Fri Mar 16 12:58:08 2018 -0700

    fix(hashing) Don't include module if its in the abs_path (#7670)
    
    Something in JS is setting module to the page URL, causing grouping
    failures as the module is added to the fingerprint. Hack to ignore the
    module if it is a substring of the abs_path

diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index c3d72f408a..0cd5aa6bfb 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -406,7 +406,7 @@ class Frame(Interface):
             return output
 
         if self.module:
-            if self.is_unhashable_module():
+            if self.is_unhashable_module(platform):
                 output.append('<module>')
             else:
                 output.append(remove_module_outliers(self.module))
@@ -518,9 +518,15 @@ class Frame(Interface):
         # values (see raven-java#125)
         return self.filename.startswith('Caused by: ')
 
-    def is_unhashable_module(self):
-        # TODO(dcramer): this is Java specific
-        return '$$Lambda$' in self.module
+    def is_unhashable_module(self, platform):
+        # Fix for the case where module is a partial copy of the URL
+        # and should not be hashed
+        if (platform == 'javascript' and '/' in self.module
+                and self.abs_path and self.abs_path.endswith(self.module)):
+            return True
+        elif platform == 'java' and '$$Lambda$' in self.module:
+            return True
+        return False
 
     def is_unhashable_function(self):
         # TODO(dcramer): lambda$ is Java specific
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index 4bc1ad0e6e..ecb3705f01 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -263,7 +263,7 @@ class StacktraceTest(TestCase):
                 'function': 'call',
             }
         )
-        result = interface.get_hash()
+        result = interface.get_hash(platform='java')
         self.assertEquals(result, [
             '<module>',
             'call',
@@ -500,6 +500,30 @@ class StacktraceTest(TestCase):
         result = interface.get_hash()
         assert result == []
 
+    def test_get_hash_ignores_module_if_page_url(self):
+        """
+        When the abs_path is a URL without a file extension, and the module is
+        a suffix of that URL, we should ignore the module. This takes care of a
+        raven-js issue where page URLs (not source filenames) are being used as
+        the module.
+        """
+
+        interface = Frame.to_python({
+            'filename': 'foo.py',
+            'abs_path': 'https://sentry.io/foo/bar/baz.js',
+            'module': 'foo/bar/baz',
+        })
+        result = interface.get_hash(platform='javascript')
+        assert result == ['foo/bar/baz']
+
+        interface = Frame.to_python({
+            'filename': 'foo.py',
+            'abs_path': 'https://sentry.io/foo/bar/baz',
+            'module': 'foo/bar/baz',
+        })
+        result = interface.get_hash(platform='javascript')
+        assert result == ['<module>']
+
     def test_collapse_recursion(self):
         interface = Stacktrace.to_python(
             {
