commit d3c09b86682510cccd9ebf8245c08d74aac38395
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Sun Jul 3 15:16:33 2016 +0300

    debug_images -> debug_meta and make sdk optional

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index cc74c335cb..95cca90718 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -721,7 +721,7 @@ SENTRY_INTERFACES = {
     'breadcrumbs': 'sentry.interfaces.breadcrumbs.Breadcrumbs',
     'contexts': 'sentry.interfaces.contexts.Contexts',
     'threads': 'sentry.interfaces.threads.Threads',
-    'debug_images': 'sentry.interfaces.debug_images.DebugImages',
+    'debug_meta': 'sentry.interfaces.debug_meta.DebugMeta',
     'sentry.interfaces.Exception': 'sentry.interfaces.exception.Exception',
     'sentry.interfaces.Message': 'sentry.interfaces.message.Message',
     'sentry.interfaces.Stacktrace': 'sentry.interfaces.stacktrace.Stacktrace',
@@ -734,7 +734,7 @@ SENTRY_INTERFACES = {
     'sentry.interfaces.Breadcrumbs': 'sentry.interfaces.breadcrumbs.Breadcrumbs',
     'sentry.interfaces.Contexts': 'sentry.interfaces.contexts.Contexts',
     'sentry.interfaces.Threads': 'sentry.interfaces.threads.Threads',
-    'sentry.interfaces.DebugImages': 'sentry.interfaces.debug_images.DebugImages',
+    'sentry.interfaces.DebugMeta': 'sentry.interfaces.debug_meta.DebugMeta',
 }
 
 SENTRY_EMAIL_BACKEND_ALIASES = {
diff --git a/src/sentry/interfaces/debug_images.py b/src/sentry/interfaces/debug_meta.py
similarity index 58%
rename from src/sentry/interfaces/debug_images.py
rename to src/sentry/interfaces/debug_meta.py
index f7eba15e6f..b1e02c440e 100644
--- a/src/sentry/interfaces/debug_images.py
+++ b/src/sentry/interfaces/debug_meta.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-__all__ = ('DebugImages',)
+__all__ = ('DebugMeta',)
 
 from sentry.interfaces.base import Interface, InterfaceValidationError
 
@@ -32,10 +32,18 @@ def process_apple_image(image):
                                        % e.args[0])
 
 
-class DebugImages(Interface):
+class DebugMeta(Interface):
     """
-    Holds debug image information for processing stacktraces and similar
-    things.
+    Holds debug meta information information for processing stacktraces
+    and similar things.  This information is deleted after event processing.
+
+    Currently two attributes exist:
+
+    ``sdk_info``:
+        sets the SDK that is used for the system.  This affects the lookup
+        for system symbols.  If not defined, system symbols are not looked up.
+    ``images``:
+        a list of debug images and their mappings.
     """
 
     ephemeral = True
@@ -44,11 +52,9 @@ class DebugImages(Interface):
     def to_python(cls, data):
         if 'images' not in data:
             raise InterfaceValidationError('Missing key "images"')
-        if 'sdk_info' not in data:
-            raise InterfaceValidationError('Missing key "sdk_info"')
         return cls(
             images=[cls.normalize_image(x) for x in data['images']],
-            sdk_info=data['sdk_info'],
+            sdk_info=cls.normalize_sdk_info(data.get('sdk_info')),
         )
 
     @staticmethod
@@ -66,5 +72,21 @@ class DebugImages(Interface):
         rv['type'] = ty
         return rv
 
+    @staticmethod
+    def normalize_sdk_info(sdk_info):
+        if not sdk_info:
+            return None
+        try:
+            return {
+                'dsym_type': sdk_info.get('dsym_type') or 'none',
+                'sdk_name': sdk_info['sdk_name'],
+                'version_major': sdk_info['version_major'],
+                'version_minor': sdk_info['version_minor'],
+                'version_patchlevel': sdk_info.get('version_patchlevel') or 0,
+            }
+        except KeyError as e:
+            raise InterfaceValidationError('Missing value for sdk_info: %s'
+                                           % e.args[0])
+
     def get_path(self):
-        return 'debug_images'
+        return 'debug_meta'
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 5f9c464c49..5abdf6b63c 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -77,8 +77,7 @@ class Symbolizer(object):
             rv['uuid'] = img['uuid']
         return rv
 
-    def symbolize_frame(self, frame, sdk_info=None,
-                        report_error=None):
+    def symbolize_frame(self, frame, sdk_info=None, report_error=None):
         error = None
         img = self.images.get(frame['object_addr'])
 
diff --git a/src/sentry/models/dsymfile.py b/src/sentry/models/dsymfile.py
index 06677e6941..e706c80925 100644
--- a/src/sentry/models/dsymfile.py
+++ b/src/sentry/models/dsymfile.py
@@ -170,6 +170,10 @@ class DSymSymbolManager(BaseManager):
                       cpu_name=None, object_path=None, sdk_info=None,
                       image_vmaddr=None):
         """Finds a system symbol."""
+        # If we use the "none" dsym type we never return a symbol here.
+        if sdk_info is not None and sdk_info['dsym_type'] == 'none':
+            return
+
         addr_abs = None
         if image_vmaddr is not None:
             addr_abs = image_vmaddr + instruction_addr - image_addr
