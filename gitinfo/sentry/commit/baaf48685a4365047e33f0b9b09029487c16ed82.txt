commit baaf48685a4365047e33f0b9b09029487c16ed82
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Thu Sep 27 16:36:32 2018 -0700

    fix(integrations): Ensure status is synced from commit/pr resolution

diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 2d7508cad9..d2a173881b 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -338,6 +338,7 @@ class Release(Model):
             ReleaseCommit, ReleaseHeadCommit, Repository, PullRequest
         )
         from sentry.plugins.providers.repository import RepositoryProvider
+        from sentry.tasks.integrations import kick_off_status_syncs
         # todo(meredith): implement for IntegrationRepositoryProvider
         commit_list = [
             c for c in commit_list
@@ -504,7 +505,15 @@ class Release(Model):
 
         user_by_author = {None: None}
 
-        for group_id, author in itertools.chain(commit_group_authors, pull_request_group_authors):
+        commits_and_prs = list(
+            itertools.chain(commit_group_authors, pull_request_group_authors),
+        )
+
+        group_project_lookup = dict(Group.objects.filter(
+            id__in=[group_id for group_id, _ in commits_and_prs],
+        ).values_list('id', 'project_id'))
+
+        for group_id, author in commits_and_prs:
             if author not in user_by_author:
                 try:
                     user_by_author[author] = author.find_users()[0]
@@ -525,3 +534,8 @@ class Release(Model):
                 Group.objects.filter(
                     id=group_id,
                 ).update(status=GroupStatus.RESOLVED)
+
+            kick_off_status_syncs.apply_async(kwargs={
+                'project_id': group_project_lookup[group_id],
+                'group_id': group_id,
+            })
diff --git a/tests/sentry/models/test_release.py b/tests/sentry/models/test_release.py
index 2e108c41d4..a66db6901b 100644
--- a/tests/sentry/models/test_release.py
+++ b/tests/sentry/models/test_release.py
@@ -1,11 +1,12 @@
 from __future__ import absolute_import
 
 import six
+from mock import patch
 
 from sentry.models import (
     Commit, CommitAuthor, Environment, Group, GroupRelease, GroupResolution, GroupLink, GroupStatus,
-    Release, ReleaseCommit, ReleaseEnvironment, ReleaseHeadCommit, ReleaseProject, ReleaseProjectEnvironment,
-    Repository
+    ExternalIssue, Integration, OrganizationIntegration, Release, ReleaseCommit, ReleaseEnvironment,
+    ReleaseHeadCommit, ReleaseProject, ReleaseProjectEnvironment, Repository
 )
 
 from sentry.testutils import TestCase
@@ -463,3 +464,83 @@ class SetCommitsTestCase(TestCase):
         assert resolution.actor_id is None
 
         assert Group.objects.get(id=group.id).status == GroupStatus.RESOLVED
+
+    @patch('sentry.integrations.example.integration.ExampleIntegration.sync_status_outbound')
+    def test_resolution_support_with_integration(self, mock_sync_status_outbound):
+        org = self.create_organization()
+        integration = Integration.objects.create(
+            provider='example',
+            name='Example',
+        )
+        integration.add_organization(org, self.user)
+
+        OrganizationIntegration.objects.filter(
+            integration_id=integration.id,
+            organization_id=org.id,
+        ).update(
+            config={
+                'sync_comments': True,
+                'sync_status_outbound': True,
+                'sync_status_inbound': True,
+                'sync_assignee_outbound': True,
+                'sync_assignee_inbound': True,
+            }
+        )
+        project = self.create_project(organization=org, name='foo')
+        group = self.create_group(project=project)
+
+        external_issue = ExternalIssue.objects.get_or_create(
+            organization_id=org.id,
+            integration_id=integration.id,
+            key='APP-%s' % group.id,
+        )[0]
+
+        GroupLink.objects.get_or_create(
+            group_id=group.id,
+            project_id=group.project_id,
+            linked_type=GroupLink.LinkedType.issue,
+            linked_id=external_issue.id,
+            relationship=GroupLink.Relationship.references,
+        )[0]
+
+        repo = Repository.objects.create(
+            organization_id=org.id,
+            name='test/repo',
+        )
+        commit = Commit.objects.create(
+            organization_id=org.id,
+            repository_id=repo.id,
+            message='fixes %s' % (group.qualified_short_id),
+            key='alksdflskdfjsldkfajsflkslk',
+        )
+
+        release = self.create_release(project=project, version='abcdabc')
+
+        with self.tasks():
+            with self.feature({
+                'organizations:integrations-issue-sync': True,
+                'organizations:internal-catchall': True,
+            }):
+                release.set_commits([{
+                    'id': commit.key,
+                    'repository': repo.name,
+                }])
+
+        mock_sync_status_outbound.assert_called_once_with(
+            external_issue, True, group.project_id
+        )
+
+        assert GroupLink.objects.filter(
+            group_id=group.id,
+            linked_type=GroupLink.LinkedType.commit,
+            linked_id=commit.id).exists()
+
+        resolution = GroupResolution.objects.get(
+            group=group,
+        )
+        assert resolution.status == GroupResolution.Status.resolved
+        assert resolution.release == release
+        assert resolution.type == GroupResolution.Type.in_release
+        assert resolution.actor_id is None
+
+        assert Group.objects.get(id=group.id).status == GroupStatus.RESOLVED
