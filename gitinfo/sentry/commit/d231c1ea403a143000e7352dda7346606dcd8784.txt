commit d231c1ea403a143000e7352dda7346606dcd8784
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Jan 16 12:31:49 2018 -0800

    feat(ui): Move Authorized Applications to new settings (#6901)

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 32298a4c86..b72fa02cf3 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -156,6 +156,13 @@ const accountSettingsRoutes = [
     componentPromise={() => import('./views/settings/account/accountAppearance')}
     component={errorHandler(LazyLoad)}
   />,
+
+  <Route
+    key="authorizations/"
+    path="authorizations/"
+    componentPromise={() => import('./views/settings/account/accountAuthorizations')}
+    component={errorHandler(LazyLoad)}
+  />,
 ];
 
 const projectSettingsRoutes = [
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountAuthorizations.jsx b/src/sentry/static/sentry/app/views/settings/account/accountAuthorizations.jsx
new file mode 100644
index 0000000000..0a63973623
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/account/accountAuthorizations.jsx
@@ -0,0 +1,148 @@
+import {Box, Flex} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t, tct} from '../../../locale';
+import AsyncView from '../../asyncView';
+import Button from '../../../components/buttons/button';
+import EmptyMessage from '../components/emptyMessage';
+import IndicatorStore from '../../../stores/indicatorStore';
+import Panel from '../components/panel';
+import PanelBody from '../components/panelBody';
+import PanelHeader from '../components/panelHeader';
+import Row from '../components/row';
+import SettingsPageHeader from '../components/settingsPageHeader';
+
+class AuthorizationRow extends React.Component {
+  static propTypes = {
+    authorization: PropTypes.object.isRequired,
+    onRevoke: PropTypes.func.isRequired,
+  };
+
+  handleRevoke = () => {
+    let {authorization} = this.props;
+    this.props.onRevoke(authorization);
+  };
+
+  render() {
+    let authorization = this.props.authorization;
+
+    return (
+      <Row>
+        <Flex flex="1">
+          <Flex p={2} flex="1" direction="column">
+            <h5 style={{marginBottom: 5}}>{authorization.application.name}</h5>
+            {authorization.homepageUrl && (
+              <div style={{marginBottom: 5}}>
+                <small>
+                  <a href={authorization.homepageUrl}>{authorization.homepageUrl}</a>
+                </small>
+              </div>
+            )}
+            <div>
+              <small style={{color: '#999'}}>{authorization.scopes.join(', ')}</small>
+            </div>
+          </Flex>
+          <Flex p={2} align="center">
+            <Button onClick={this.handleRevoke}>
+              <span className="icon icon-trash" />
+            </Button>
+          </Flex>
+        </Flex>
+      </Row>
+    );
+  }
+}
+
+const Description = styled.p`
+  font-size: 0.9em;
+  margin-bottom: 30px;
+`;
+
+class AccountAuthorizations extends AsyncView {
+  getEndpoints() {
+    return [['data', '/api-authorizations/']];
+  }
+
+  getTitle() {
+    return 'Approved Applications - Sentry';
+  }
+
+  handleRevoke = authorization => {
+    let oldData = this.state.data;
+
+    this.setState(
+      state => ({
+        data: state.data.filter(({id}) => id !== authorization.id),
+      }),
+      () => {
+        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        this.api.request('/api-authorizations/', {
+          method: 'DELETE',
+          data: {authorization: authorization.id},
+          success: data => {
+            IndicatorStore.remove(loadingIndicator);
+          },
+          error: () => {
+            this.setState({
+              data: oldData,
+            });
+            IndicatorStore.remove(loadingIndicator);
+            IndicatorStore.addError(t('Unable to save changes. Please try again.'));
+          },
+        });
+      }
+    );
+  };
+
+  renderBody() {
+    let {data} = this.state;
+    let isEmpty = data.length === 0;
+
+    return (
+      <div>
+        <SettingsPageHeader title="Authorized Applications" />
+        <Description>
+          {tct('You can manage your own applications via the [link:API dashboard].', {
+            link: <a href="/settings/account/api/" />,
+          })}
+        </Description>
+
+        <Panel>
+          <PanelHeader disablePadding={true}>
+            <Flex align="center">
+              <Box px={2} flex="1">
+                {t('Approved Applications')}
+              </Box>
+            </Flex>
+          </PanelHeader>
+
+          <PanelBody>
+            {isEmpty && (
+              <EmptyMessage>
+                {t("You haven't approved any third party applications.")}
+              </EmptyMessage>
+            )}
+
+            {!isEmpty && (
+              <div>
+                {data.map(authorization => {
+                  return (
+                    <AuthorizationRow
+                      key={authorization.id}
+                      authorization={authorization}
+                      onRevoke={this.handleRevoke}
+                    />
+                  );
+                })}
+              </div>
+            )}
+          </PanelBody>
+        </Panel>
+      </div>
+    );
+  }
+}
+
+export default AccountAuthorizations;
diff --git a/src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.jsx
index 3c4cde8110..6d976f500c 100644
--- a/src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.jsx
@@ -22,6 +22,10 @@ const accountNavigation = [
         path: `${pathPrefix}/emails/`,
         title: t('Emails'),
       },
+      {
+        path: `${pathPrefix}/authorizations/`,
+        title: t('Authorized Applications'),
+      },
     ],
   },
 ];
diff --git a/tests/js/spec/views/__snapshots__/accountAuthorization.spec.jsx.snap b/tests/js/spec/views/__snapshots__/accountAuthorization.spec.jsx.snap
new file mode 100644
index 0000000000..58921750f3
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/accountAuthorization.spec.jsx.snap
@@ -0,0 +1,60 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`AccountAuthorizations renders empty 1`] = `
+<DocumentTitle
+  title="Approved Applications - Sentry"
+>
+  <div>
+    <SettingsPageHeading
+      title="Authorized Applications"
+    />
+    <Styled(p)>
+      <span
+        key="5"
+      >
+        <span
+          key="0"
+        >
+          You can manage your own applications via the 
+        </span>
+        <a
+          href="/settings/account/api/"
+          key="2"
+        >
+          <span
+            key="1"
+          >
+            API dashboard
+          </span>
+        </a>
+        <span
+          key="3"
+        >
+          .
+        </span>
+      </span>
+    </Styled(p)>
+    <Styled(div)>
+      <PanelHeader
+        disablePadding={true}
+      >
+        <Flex
+          align="center"
+        >
+          <Box
+            flex="1"
+            px={2}
+          >
+            Approved Applications
+          </Box>
+        </Flex>
+      </PanelHeader>
+      <Styled(div)>
+        <Styled(div)>
+          You haven't approved any third party applications.
+        </Styled(div)>
+      </Styled(div)>
+    </Styled(div)>
+  </div>
+</DocumentTitle>
+`;
diff --git a/tests/js/spec/views/accountAuthorization.spec.jsx b/tests/js/spec/views/accountAuthorization.spec.jsx
new file mode 100644
index 0000000000..962545034f
--- /dev/null
+++ b/tests/js/spec/views/accountAuthorization.spec.jsx
@@ -0,0 +1,33 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {Client} from 'app/api';
+import {shallow} from 'enzyme';
+import AccountAuthorizations from 'app/views/settings/account/accountAuthorizations';
+
+describe('AccountAuthorizations', function() {
+  beforeEach(function() {
+    Client.clearMockResponses();
+  });
+
+  it('renders empty', function() {
+    Client.addMockResponse({
+      url: '/api-authorizations/',
+      method: 'GET',
+      body: [],
+    });
+
+    let wrapper = shallow(<AccountAuthorizations />, {
+      context: {
+        location: TestStubs.location(),
+        router: TestStubs.router(),
+      },
+      childContextTypes: {
+        location: PropTypes.object,
+        router: PropTypes.object,
+      },
+    });
+
+    expect(wrapper).toMatchSnapshot();
+  });
+});
