commit dac49ae487cccd4ffa054fcd229a82f226889a24
Author: Chris Montrois <cmontrois@quickleft.com>
Date:   Tue Jul 7 13:30:38 2015 -0600

    Refactor Stream component render
    
    Minor changes to how the Stream component renders its items. The multi-ternary
    has been broken down into several smaller methods.
    
    Tests have also been added to Stream in addition to the infrastructure required
    to stub React components.

diff --git a/src/sentry/static/sentry/app/components/streamGroup.jsx b/src/sentry/static/sentry/app/components/streamGroup.jsx
index 58a4f61246..817ed9ffd0 100644
--- a/src/sentry/static/sentry/app/components/streamGroup.jsx
+++ b/src/sentry/static/sentry/app/components/streamGroup.jsx
@@ -79,16 +79,36 @@ var StreamGroup = React.createClass({
   getDefaultProps() {
     return {
       canSelect: true,
+      id: "",
       statsPeriod: '24h'
     };
   },
 
   getInitialState() {
     return {
-      data: GroupStore.get(this.props.id)
+      data: {
+        annotations: [],
+        count: 0,
+        culprit: "",
+        firstSeen: new Date(),
+        hasSeen: false,
+        id: "0",
+        isBookmarked: false,
+        lastSeen: new Date(),
+        numComments: 0,
+        status: "resolved",
+        tags: {},
+        title: ""
+      }
     };
   },
 
+  componentWillMount() {
+    this.setState({
+      data: GroupStore.get(this.props.id)
+    });
+  },
+
   componentWillReceiveProps(nextProps) {
     if (nextProps.id != this.props.id) {
       this.setState({
diff --git a/src/sentry/static/sentry/app/components/streamGroupChart.jsx b/src/sentry/static/sentry/app/components/streamGroupChart.jsx
index d6e8641566..cddd5dac4c 100644
--- a/src/sentry/static/sentry/app/components/streamGroupChart.jsx
+++ b/src/sentry/static/sentry/app/components/streamGroupChart.jsx
@@ -16,12 +16,21 @@ var GroupChart = React.createClass({
   },
 
   getInitialState() {
-    var data = GroupStore.get(this.props.id);
     return {
-      stats: data ? data.stats[this.props.statsPeriod] : null
+      stats: []
     };
   },
 
+  componentWillMount() {
+    var data = GroupStore.get(this.props.id);
+
+    if (data && data.stats) {
+      this.setState({
+        stats: data.stats[this.props.statsPeriod]
+      });
+    }
+  },
+
   componentWillReceiveProps(nextProps) {
     if (!valueIsEqual(nextProps, this.props)) {
       var data = GroupStore.get(this.props.id);
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index ba1f8928fd..0d48f2a4aa 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -162,15 +162,50 @@ var Stream = React.createClass({
     router.transitionTo('stream', params, queryParams);
   },
 
+  renderGroupNodes(ids, statsPeriod) {
+    var groupNodes = ids.map((id) => {
+      return <StreamGroup key={id} id={id} statsPeriod={statsPeriod} />;
+    });
+
+    return (<ul className="group-list">{groupNodes}</ul>);
+  },
+
+  renderEmpty() {
+    return (
+      <div className="box empty-stream">
+        <span className="icon icon-exclamation"></span>
+        <p>Sorry, no events match your filters.</p>
+      </div>
+    );
+  },
+
+  renderLoading() {
+    return (
+      <div className="box">
+        <LoadingIndicator />
+      </div>
+    );
+  },
+
+  renderStreamBody() {
+    var body;
+
+    if (this.state.loading) {
+      body = this.renderLoading();
+    } else if (this.state.error) {
+      body = (<LoadingError onRetry={this.fetchData} />);
+    } else if (this.state.groupIds.length > 0) {
+      body = this.renderGroupNodes(this.state.groupIds, this.state.statsPeriod);
+    } else {
+      body = this.renderEmpty();
+    }
+
+    return body;
+  },
+
   render() {
     var router = this.context.router;
     var params = router.getCurrentParams();
-    var groupNodes = this.state.groupIds.map((id) => {
-      return <StreamGroup
-          key={id}
-          id={id}
-          statsPeriod={this.state.statsPeriod} />;
-    });
 
     return (
       <div>
@@ -185,23 +220,7 @@ var Stream = React.createClass({
             statsPeriod={this.state.statsPeriod}
             groupIds={this.state.groupIds} />
         </div>
-        {this.state.loading ?
-          <div className="box">
-            <LoadingIndicator />
-          </div>
-        : (this.state.error ?
-          <LoadingError onRetry={this.fetchData} />
-        : (groupNodes.length > 0 ?
-          <ul className="group-list">
-            {groupNodes}
-          </ul>
-        :
-          <div className="box empty-stream">
-            <span className="icon icon-exclamation"></span>
-            <p>Sorry, no events match your filters.</p>
-          </div>
-        ))}
-
+        {this.renderStreamBody()}
         <Pagination pageLinks={this.state.pageLinks} onPage={this.onPage} />
       </div>
     );
diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/stream/filters.jsx
index d06feba3a1..e3727cb014 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filters.jsx
@@ -1,4 +1,5 @@
 var React = require("react");
+var Router = require("react-router");
 var $ = require("jquery");
 var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
 
diff --git a/tests/js/helpers/stubReactComponent.jsx b/tests/js/helpers/stubReactComponent.jsx
new file mode 100644
index 0000000000..7209af5817
--- /dev/null
+++ b/tests/js/helpers/stubReactComponent.jsx
@@ -0,0 +1,28 @@
+// https://gist.github.com/TimothyRHuertas/d7d06313c5411fe242bb
+
+var React = require('react');
+var divFactory = React.createFactory('div');
+var originalCreateElement = React.createElement;
+
+module.exports = function(stubber, stubbedComponents) {
+  stubber.stub(React, 'createElement', function(component, props) {
+    if (stubbedComponents.indexOf(component) === -1) {
+      return originalCreateElement.apply(React, arguments);
+    }
+    else {
+      var componentFactory = React.createFactory(component);
+      var displayName =  componentFactory().type.displayName;
+
+      if (displayName) {
+        if (props.className) {
+          props.className = props.className + " " + displayName;
+        }
+        else {
+          props.className = displayName;
+        }
+      }
+
+      return divFactory(props);
+    }
+  });
+};
diff --git a/tests/js/helpers/stubRouterContext.jsx b/tests/js/helpers/stubRouterContext.jsx
new file mode 100644
index 0000000000..c0ddf07785
--- /dev/null
+++ b/tests/js/helpers/stubRouterContext.jsx
@@ -0,0 +1,39 @@
+var React = require("react");
+
+module.exports = (Component, props, stubs) => {
+  function RouterStub() {}
+
+  Object.assign(RouterStub, {
+    makePath() {},
+    makeHref() {},
+    transitionTo() {},
+    replaceWith() {},
+    goBack() {},
+    getCurrentPath() {},
+    getCurrentRoutes() {},
+    getCurrentPathname() {},
+    getCurrentParams() {},
+    getCurrentQuery() {},
+    isActive() {},
+    getRouteAtDepth() {},
+    setRouteComponentAtDepth() {}
+  }, stubs)
+
+  return React.createClass({
+    childContextTypes: {
+      router: React.PropTypes.func,
+      routeDepth: React.PropTypes.number
+    },
+
+    getChildContext() {
+      return {
+        router: RouterStub,
+        routeDepth: 0
+      };
+    },
+
+    render() {
+      return <Component ref="stub" {...props} />
+    }
+  });
+};
diff --git a/tests/js/spec/views/stream.spec.js b/tests/js/spec/views/stream.spec.js
new file mode 100644
index 0000000000..72412e222c
--- /dev/null
+++ b/tests/js/spec/views/stream.spec.js
@@ -0,0 +1,87 @@
+var React = require("react/addons");
+
+var Stream = require("app/views/stream");
+var Api = require("app/api");
+var LoadingError = require("app/components/loadingError");
+var LoadingIndicator = require("app/components/loadingIndicator");
+var stubReactComponents = require("../../helpers/stubReactComponent");
+var stubRouterContext = require("../../helpers/stubRouterContext");
+var StreamGroup = require("app/components/streamGroup");
+
+var TestUtils = React.addons.TestUtils;
+var findWithClass = TestUtils.findRenderedDOMComponentWithClass;
+var findWithType = TestUtils.findRenderedComponentWithType;
+
+describe("Stream", function() {
+
+  beforeEach(function() {
+    this.sandbox = sinon.sandbox.create();
+
+    this.sandbox.stub(Api, "request");
+    this.sandbox.stub(Stream.prototype, "fetchData");
+    stubReactComponents(this.sandbox, [StreamGroup]);
+  });
+
+  afterEach(function() {
+    this.sandbox.restore();
+  });
+
+  describe("render()", function() {
+
+    beforeEach(function() {
+      var Element = stubRouterContext(Stream, {
+        setProjectNavSection() {}
+      }, {
+        getCurrentParams() {
+          return {
+            orgId: "123",
+            projectId: "456"
+          };
+        },
+        getCurrentQuery() {
+          return {
+            limit: 0
+          };
+        }
+      });
+      this.wrapper = TestUtils.renderIntoDocument(<Element />);
+    });
+
+    it("displays a loading indicator when component is loading", function() {
+      this.wrapper.refs.stub.setState({ loading: true });
+      var expected = findWithType(this.wrapper, LoadingIndicator);
+      expect(expected).to.be.ok;
+    });
+
+    it("displays an error when component has errored", function() {
+      this.wrapper.refs.stub.setState({
+        error: true,
+        loading: false
+      });
+      var expected = findWithType(this.wrapper, LoadingError);
+      expect(expected).to.be.ok;
+    });
+
+    it("displays the group list", function() {
+      this.wrapper.refs.stub.setState({
+        error: false,
+        groupIds: ["1"],
+        loading: false
+      });
+      var expected = findWithClass(this.wrapper, "group-list");
+      expect(expected).to.be.ok;
+    });
+
+    it("displays empty with no ids", function() {
+      this.wrapper.refs.stub.setState({
+        error: false,
+        groupIds: [],
+        loading: false
+      });
+      var expected = findWithClass(this.wrapper, "empty-stream");
+      expect(expected).to.be.ok;
+    });
+
+  });
+
+});
diff --git a/tests/karma.conf.js b/tests/karma.conf.js
index 11138b93d0..1c2f75fcd9 100644
--- a/tests/karma.conf.js
+++ b/tests/karma.conf.js
@@ -1,6 +1,8 @@
 // Karma configuration
 // Generated on Sat Jul 26 2014 13:49:45 GMT+0200 (CEST)
 var path = require('path');
+var webpack = require("webpack");
+
 var appPrefix = path.join(__dirname, "../src/sentry/static/sentry/app");
 
 module.exports = function(config) {
@@ -39,6 +41,14 @@ module.exports = function(config) {
         ]
       },
       devtool: 'inline-source-map',
+      plugins: [
+        new webpack.ProvidePlugin({
+          $: 'jquery',
+          jQuery: 'jquery',
+          "window.jQuery": "jquery",
+          "root.jQuery": "jquery"
+        })
+      ],
     },
 
     webpackMiddleware: {
