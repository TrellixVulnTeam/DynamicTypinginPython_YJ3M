commit 73b4eb08ad4b7787ff83453fa94f4a188bb4f0ac
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Apr 27 13:59:35 2015 -0700

    Switch to access helpers for project/team permissions

diff --git a/src/sentry/api/bases/project.py b/src/sentry/api/bases/project.py
index 9c8dc16234..e9d3c87382 100644
--- a/src/sentry/api/bases/project.py
+++ b/src/sentry/api/bases/project.py
@@ -1,11 +1,10 @@
 from __future__ import absolute_import
 
-from django.db.models import Q
-
+from sentry.auth import access
 from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import ScopedPermission
-from sentry.models import OrganizationMember, Project
+from sentry.models import Project
 
 
 class ProjectPermission(ScopedPermission):
@@ -22,21 +21,13 @@ class ProjectPermission(ScopedPermission):
                 return request.auth.project_id == project.id
             return request.auth.organization_id == project.organization_id
 
-        if request.user.is_superuser:
-            return True
+        request.access = access.from_user(request.user, project.organization)
 
-        try:
-            om = OrganizationMember.objects.get(
-                Q(has_global_access=True) | Q(teams=project.team_id),
-                organization=project.organization_id,
-                user=request.user,
-            )
-        except OrganizationMember.DoesNotExist:
+        if not request.access.has_team(project.team):
             return False
 
         allowed_scopes = set(self.scope_map[request.method])
-        current_scopes = om.get_scopes()
-        return any(s in allowed_scopes for s in current_scopes)
+        return any(request.access.has_scope(s) for s in allowed_scopes)
 
 
 class ProjectEventPermission(ProjectPermission):
diff --git a/src/sentry/api/bases/team.py b/src/sentry/api/bases/team.py
index 1adc457814..74185f9281 100644
--- a/src/sentry/api/bases/team.py
+++ b/src/sentry/api/bases/team.py
@@ -1,11 +1,10 @@
 from __future__ import absolute_import
 
-from django.db.models import Q
-
+from sentry.auth import access
 from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import ScopedPermission
-from sentry.models import OrganizationMember, Team
+from sentry.models import Team
 
 
 class TeamPermission(ScopedPermission):
@@ -21,21 +20,14 @@ class TeamPermission(ScopedPermission):
             if self.is_project_key(request):
                 return False
             return request.auth.organization_id == team.organization_id
-        if request.user.is_superuser:
-            return True
 
-        try:
-            om = OrganizationMember.objects.get(
-                Q(has_global_access=True) | Q(teams=team),
-                organization=team.organization_id,
-                user=request.user,
-            )
-        except OrganizationMember.DoesNotExist:
+        request.access = access.from_user(request.user, team.organization)
+
+        if not request.access.has_team(team):
             return False
 
         allowed_scopes = set(self.scope_map[request.method])
-        current_scopes = om.get_scopes()
-        return any(s in allowed_scopes for s in current_scopes)
+        return any(request.access.has_scope(s) for s in allowed_scopes)
 
 
 class TeamEndpoint(Endpoint):
