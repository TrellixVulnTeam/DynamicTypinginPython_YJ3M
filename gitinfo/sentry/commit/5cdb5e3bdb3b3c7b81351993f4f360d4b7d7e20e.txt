commit 5cdb5e3bdb3b3c7b81351993f4f360d4b7d7e20e
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri Feb 26 16:33:21 2016 +0100

    Changed api to refer to call signs instead of short names; refactored migrations

diff --git a/src/sentry/api/endpoints/organization_shortids.py b/src/sentry/api/endpoints/organization_shortids.py
index 936333105f..a1cb5ceabf 100644
--- a/src/sentry/api/endpoints/organization_shortids.py
+++ b/src/sentry/api/endpoints/organization_shortids.py
@@ -23,13 +23,13 @@ class ShortIdsUpdateEndpoint(OrganizationEndpoint):
         projects = dict((str(p.id), p) for p in organization.project_set.all())
         rv = {}
 
-        for project_id, short_name in request.DATA.get('projects', {}).iteritems():
+        for project_id, callsign in request.DATA.get('projects', {}).iteritems():
             project = projects.get(project_id)
             if project is None:
                 continue
-            project.short_name = short_name
+            project.callsign = callsign
             project.update_option('sentry:reviewed-short-id', True)
-            rv[project.id] = short_name
+            rv[project.id] = callsign
 
         return Response({
             'updated_short_ids': rv
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index fbde98ceee..c19a9df160 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -36,10 +36,10 @@ class ProjectSerializer(Serializer):
             'name': obj.name,
             'isPublic': obj.public,
             'isBookmarked': attrs['is_bookmarked'],
-            'shortName': obj.short_name,
+            'callSign': obj.call_sign,
             # TODO(mitsuhiko): eventually remove this when we will treat
             # all short names as reviewed.
-            'shortNameReviewed': bool(obj.get_option('sentry:reviewed-short_id')),
+            'callSignReviewed': bool(obj.get_option('sentry:reviewed-callsign')),
             'dateCreated': obj.date_added,
             'firstEvent': obj.first_event,
             'features': feature_list,
diff --git a/src/sentry/migrations/0236_auto__add_field_group_short_id__add_unique_group_project_short_id__add.py b/src/sentry/migrations/0239_auto__add_counter__add_unique_counter_project_ident__add_field_group_s.py
similarity index 90%
rename from src/sentry/migrations/0236_auto__add_field_group_short_id__add_unique_group_project_short_id__add.py
rename to src/sentry/migrations/0239_auto__add_counter__add_unique_counter_project_ident__add_field_group_s.py
index 36ca63e9cd..c10e60c4d5 100644
--- a/src/sentry/migrations/0236_auto__add_field_group_short_id__add_unique_group_project_short_id__add.py
+++ b/src/sentry/migrations/0239_auto__add_counter__add_unique_counter_project_ident__add_field_group_s.py
@@ -8,6 +8,18 @@ from django.db import models
 class Migration(SchemaMigration):
 
     def forwards(self, orm):
+        # Adding model 'Counter'
+        db.create_table('sentry_projectcounter', (
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+            ('project', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.Project'])),
+            ('ident', self.gf('django.db.models.fields.CharField')(max_length=40)),
+            ('value', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
+        ))
+        db.send_create_signal('sentry', ['Counter'])
+
+        # Adding unique constraint on 'Counter', fields ['project', 'ident']
+        db.create_unique('sentry_projectcounter', ['project_id', 'ident'])
+
         # Adding field 'Group.short_id'
         db.add_column('sentry_groupedmessage', 'short_id',
                       self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True),
@@ -16,27 +28,33 @@ class Migration(SchemaMigration):
         # Adding unique constraint on 'Group', fields ['project', 'short_id']
         db.create_unique('sentry_groupedmessage', ['project_id', 'short_id'])
 
-        # Adding field 'Project.short_name'
-        db.add_column('sentry_project', 'short_name',
+        # Adding field 'Project.callsign'
+        db.add_column('sentry_project', 'callsign',
                       self.gf('django.db.models.fields.CharField')(max_length=40, null=True),
                       keep_default=False)
 
-        # Adding unique constraint on 'Project', fields ['organization', 'short_name']
-        db.create_unique('sentry_project', ['organization_id', 'short_name'])
+        # Adding unique constraint on 'Project', fields ['organization', 'callsign']
+        db.create_unique('sentry_project', ['organization_id', 'callsign'])
 
 
     def backwards(self, orm):
-        # Removing unique constraint on 'Project', fields ['organization', 'short_name']
-        db.delete_unique('sentry_project', ['organization_id', 'short_name'])
+        # Removing unique constraint on 'Project', fields ['organization', 'callsign']
+        db.delete_unique('sentry_project', ['organization_id', 'callsign'])
 
         # Removing unique constraint on 'Group', fields ['project', 'short_id']
         db.delete_unique('sentry_groupedmessage', ['project_id', 'short_id'])
 
+        # Removing unique constraint on 'Counter', fields ['project', 'ident']
+        db.delete_unique('sentry_projectcounter', ['project_id', 'ident'])
+
+        # Deleting model 'Counter'
+        db.delete_table('sentry_projectcounter')
+
         # Deleting field 'Group.short_id'
         db.delete_column('sentry_groupedmessage', 'short_id')
 
-        # Deleting field 'Project.short_name'
-        db.delete_column('sentry_project', 'short_name')
+        # Deleting field 'Project.callsign'
+        db.delete_column('sentry_project', 'callsign')
 
 
     models = {
@@ -104,7 +122,7 @@ class Migration(SchemaMigration):
         'sentry.broadcast': {
             'Meta': {'object_name': 'Broadcast'},
             'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2016, 2, 21, 0, 0)', 'null': 'True', 'blank': 'True'}),
+            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2016, 3, 4, 0, 0)', 'null': 'True', 'blank': 'True'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
             'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
@@ -126,6 +144,15 @@ class Migration(SchemaMigration):
             'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
             'value': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
         },
+        'sentry.dsymfile': {
+            'Meta': {'unique_together': "(('project', 'uuid'),)", 'object_name': 'DSymFile'},
+            'cpu_name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object_name': ('django.db.models.fields.TextField', [], {}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '36', 'db_index': 'True'})
+        },
         'sentry.event': {
             'Meta': {'unique_together': "(('project_id', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'", 'index_together': "(('group_id', 'datetime'),)"},
             'data': ('sentry.db.models.fields.node.NodeField', [], {'null': 'True', 'blank': 'True'}),
@@ -146,6 +173,15 @@ class Migration(SchemaMigration):
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
         },
+        'sentry.eventtag': {
+            'Meta': {'unique_together': "(('event_id', 'key_id', 'value_id'),)", 'object_name': 'EventTag'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'value_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
         'sentry.eventuser': {
             'Meta': {'unique_together': "(('project', 'ident'), ('project', 'hash'))", 'object_name': 'EventUser', 'index_together': "(('project', 'email'), ('project', 'username'), ('project', 'ip_address'))"},
             'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
@@ -190,7 +226,7 @@ class Migration(SchemaMigration):
             'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
             'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
             'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
-            'first_release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']", 'null': 'True'}),
+            'first_release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']", 'null': 'True', 'on_delete': 'models.PROTECT'}),
             'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
@@ -361,6 +397,17 @@ class Migration(SchemaMigration):
             'organizationmember': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
             'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
         },
+        'sentry.organizationonboardingtask': {
+            'Meta': {'unique_together': "(('organization', 'task'),)", 'object_name': 'OrganizationOnboardingTask'},
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_completed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'task': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
         'sentry.organizationoption': {
             'Meta': {'unique_together': "(('organization', 'key'),)", 'object_name': 'OrganizationOption', 'db_table': "'sentry_organizationoptions'"},
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
@@ -369,18 +416,25 @@ class Migration(SchemaMigration):
             'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
         },
         'sentry.project': {
-            'Meta': {'unique_together': "(('team', 'slug'), ('organization', 'slug'), ('organization', 'short_name'))", 'object_name': 'Project'},
+            'Meta': {'unique_together': "(('team', 'slug'), ('organization', 'slug'), ('organization', 'callsign'))", 'object_name': 'Project'},
+            'callsign': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
             'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
             'first_event': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
             'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
             'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
-            'short_name': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
             'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'null': 'True'}),
             'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
             'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
         },
+        'sentry.projectbookmark': {
+            'Meta': {'unique_together': "(('project_id', 'user'),)", 'object_name': 'ProjectBookmark'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
         'sentry.projectkey': {
             'Meta': {'object_name': 'ProjectKey'},
             'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
diff --git a/src/sentry/migrations/0237_prefill_project_short_names.py b/src/sentry/migrations/0240_prefill_callsigns.py
similarity index 92%
rename from src/sentry/migrations/0237_prefill_project_short_names.py
rename to src/sentry/migrations/0240_prefill_callsigns.py
index a87b95b9c9..b26d8aa49a 100644
--- a/src/sentry/migrations/0237_prefill_project_short_names.py
+++ b/src/sentry/migrations/0240_prefill_callsigns.py
@@ -24,7 +24,7 @@ def catchable_atomic():
         pass
 
 
-def iter_short_name_choices(project):
+def iter_callsign_choices(project):
     words = _letters_re.findall(project.name.upper())
     bits = []
 
@@ -50,17 +50,17 @@ def iter_short_name_choices(project):
             yield '%s%d' % (bit, idx)
 
 
-def get_short_names(projects):
+def get_callsigns(projects):
     rv = {}
 
     for project in projects:
-        if project.short_name is not None:
-            rv[project.short_name] = project.id
+        if project.callsign is not None:
+            rv[project.callsign] = project.id
             continue
-        for short_name in iter_short_name_choices(project):
-            if short_name in rv:
+        for callsign in iter_callsign_choices(project):
+            if callsign in rv:
                 continue
-            rv[short_name] = project.id
+            rv[callsign] = project.id
             break
 
     return dict((v, k) for k, v in rv.iteritems())
@@ -69,10 +69,6 @@ def get_short_names(projects):
 class Migration(DataMigration):
 
     def forwards(self, orm):
-        # Note: Don't use "from appname.models import ModelName". 
-        # Use orm.ModelName to refer to models in this application,
-        # and orm['appname.ModelName'] for models in other applications.
-
         from sentry.utils.query import RangeQuerySetWrapperWithProgressBar
         from sentry.models.counter import increment_project_counter
 
@@ -86,13 +82,13 @@ class Migration(DataMigration):
         for org in RangeQuerySetWrapperWithProgressBar(queryset):
             cnt = orm['sentry.Counter'].objects.all()
             projects = list(org.project_set.all())
-            short_names = get_short_names(projects)
+            callsigns = get_callsigns(projects)
             for project in projects:
-                if project.short_name is None:
+                if project.callsign is None:
                     Project.objects.filter(
                         pk=project.id,
-                        short_name=None
-                    ).update(short_name=short_names[project.id])
+                        callsign=None
+                    ).update(callsign=callsigns[project.id])
                     ProjectOption.objects.filter(
                         project=project,
                         key='sentry:reviewed-short-id'
@@ -126,7 +122,7 @@ class Migration(DataMigration):
             project_ids = [x['id'] for x in org.project_set.values('id')]
             Project.objects.filter(
                 organization=org
-            ).update(short_name=None)
+            ).update(callsign=None)
             ProjectOption.objects.filter(
                 project__in=project_ids,
                 key='sentry:reviewed-short-id'
@@ -200,7 +196,7 @@ class Migration(DataMigration):
         'sentry.broadcast': {
             'Meta': {'object_name': 'Broadcast'},
             'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2016, 2, 24, 0, 0)', 'null': 'True', 'blank': 'True'}),
+            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2016, 3, 4, 0, 0)', 'null': 'True', 'blank': 'True'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
             'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
@@ -222,6 +218,15 @@ class Migration(DataMigration):
             'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
             'value': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
         },
+        'sentry.dsymfile': {
+            'Meta': {'unique_together': "(('project', 'uuid'),)", 'object_name': 'DSymFile'},
+            'cpu_name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object_name': ('django.db.models.fields.TextField', [], {}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '36', 'db_index': 'True'})
+        },
         'sentry.event': {
             'Meta': {'unique_together': "(('project_id', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'", 'index_together': "(('group_id', 'datetime'),)"},
             'data': ('sentry.db.models.fields.node.NodeField', [], {'null': 'True', 'blank': 'True'}),
@@ -242,6 +247,15 @@ class Migration(DataMigration):
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
         },
+        'sentry.eventtag': {
+            'Meta': {'unique_together': "(('event_id', 'key_id', 'value_id'),)", 'object_name': 'EventTag'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'value_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
         'sentry.eventuser': {
             'Meta': {'unique_together': "(('project', 'ident'), ('project', 'hash'))", 'object_name': 'EventUser', 'index_together': "(('project', 'email'), ('project', 'username'), ('project', 'ip_address'))"},
             'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
@@ -286,7 +300,7 @@ class Migration(DataMigration):
             'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
             'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
             'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
-            'first_release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']", 'null': 'True'}),
+            'first_release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']", 'null': 'True', 'on_delete': 'models.PROTECT'}),
             'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
@@ -457,6 +471,17 @@ class Migration(DataMigration):
             'organizationmember': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
             'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
         },
+        'sentry.organizationonboardingtask': {
+            'Meta': {'unique_together': "(('organization', 'task'),)", 'object_name': 'OrganizationOnboardingTask'},
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_completed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'task': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
         'sentry.organizationoption': {
             'Meta': {'unique_together': "(('organization', 'key'),)", 'object_name': 'OrganizationOption', 'db_table': "'sentry_organizationoptions'"},
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
@@ -465,18 +490,25 @@ class Migration(DataMigration):
             'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
         },
         'sentry.project': {
-            'Meta': {'unique_together': "(('team', 'slug'), ('organization', 'slug'), ('organization', 'short_name'))", 'object_name': 'Project'},
+            'Meta': {'unique_together': "(('team', 'slug'), ('organization', 'slug'), ('organization', 'callsign'))", 'object_name': 'Project'},
+            'callsign': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
             'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
             'first_event': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
             'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
             'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
-            'short_name': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
             'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'null': 'True'}),
             'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
             'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
         },
+        'sentry.projectbookmark': {
+            'Meta': {'unique_together': "(('project_id', 'user'),)", 'object_name': 'ProjectBookmark'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
         'sentry.projectkey': {
             'Meta': {'object_name': 'ProjectKey'},
             'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index b097300d79..9692038075 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -55,12 +55,12 @@ class GroupManager(BaseManager):
         if match is None:
             return
         from sentry.models import Project
-        prefix, id = match.groups()
-        prefix = prefix.upper()
+        callsign, id = match.groups()
+        callsign = callsign.upper()
         try:
             project = Project.objects.get(
                 organization=org,
-                short_name=prefix
+                callsign=callsign
             )
         except Project.DoesNotExist:
             return
@@ -192,10 +192,10 @@ class Group(Model):
 
     @property
     def qualified_short_id(self):
-        if self.project.short_name is not None and \
+        if self.project.callsign is not None and \
            self.short_id is not None:
             return '%s-%s' % (
-                self.project.short_name,
+                self.project.callsign,
                 base36_encode(self.short_id),
             )
 
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 9c1d2f589e..23270640e7 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -74,7 +74,7 @@ class Project(Model):
     """
     slug = models.SlugField(null=True)
     name = models.CharField(max_length=200)
-    short_name = models.CharField(max_length=40, null=True)
+    callsign = models.CharField(max_length=40, null=True)
     organization = FlexibleForeignKey('sentry.Organization')
     team = FlexibleForeignKey('sentry.Team')
     public = models.BooleanField(default=False)
@@ -97,7 +97,7 @@ class Project(Model):
         app_label = 'sentry'
         db_table = 'sentry_project'
         unique_together = (('team', 'slug'), ('organization', 'slug'),
-                           ('organization', 'short_name'))
+                           ('organization', 'callsign'))
 
     __repr__ = sane_repr('team_id', 'slug')
 
diff --git a/src/sentry/static/sentry/app/views/organizationDetails.jsx b/src/sentry/static/sentry/app/views/organizationDetails.jsx
index 831c1bde19..c3afe1c155 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails.jsx
@@ -17,7 +17,7 @@ let ERROR_TYPES = {
 function doProjectsNeedShortId(teams) {
   for (let i = 0; i < teams.length; i++) {
     for (let j = 0; j < teams[i].projects.length; j++) {
-      if (!teams[i].projects[j].shortNameReviewed) {
+      if (!teams[i].projects[j].callSignReviewed) {
         return true;
       }
     }
diff --git a/src/sentry/static/sentry/app/views/requiredAdminActions/setShortIds.jsx b/src/sentry/static/sentry/app/views/requiredAdminActions/setShortIds.jsx
index 8a8721969a..8c155aa34e 100644
--- a/src/sentry/static/sentry/app/views/requiredAdminActions/setShortIds.jsx
+++ b/src/sentry/static/sentry/app/views/requiredAdminActions/setShortIds.jsx
@@ -19,7 +19,7 @@ function getProjectInfoForReview(org) {
       let targetList = nonMemberProjects;
       if (team.isMember) {
         canReview = canWriteProjects;
-        if (!project.shortNameReviewed) {
+        if (!project.callSignReviewed) {
           requiresReview++;
           canReviewAnything = canReviewAnything || canReview;
         }
@@ -29,10 +29,10 @@ function getProjectInfoForReview(org) {
         projectId: project.id,
         projectName: project.name,
         isMember: team.isMember,
-        requiresReview: !project.shortNameReviewed,
+        requiresReview: !project.callSignReviewed,
         canReview: canReview,
         teamName: org.teams[i].name,
-        shortName: project.shortName || null
+        callSign: project.callSign || null
       });
     }
   }
@@ -125,7 +125,7 @@ const SetShortIdsAction = React.createClass({
                     disabled={disabled}
                     className="form-control"
                     onChange={this.onSetShortName.bind(this, project.projectId)}
-                    value={project.shortName}/>
+                    value={project.callSign}/>
                 </div>
               </div>
             );
