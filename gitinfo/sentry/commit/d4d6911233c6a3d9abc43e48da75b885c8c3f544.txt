commit d4d6911233c6a3d9abc43e48da75b885c8c3f544
Author: Mark Story <mark@sentry.io>
Date:   Thu Jan 23 16:27:21 2020 -0500

    ref(ui) Use isRenderFunc helper function more (#16601)
    
    Remove duplicate code that we have a utility function for.

diff --git a/src/sentry/static/sentry/app/components/avatar/userAvatar.tsx b/src/sentry/static/sentry/app/components/avatar/userAvatar.tsx
index e16b679cad..447840e32e 100644
--- a/src/sentry/static/sentry/app/components/avatar/userAvatar.tsx
+++ b/src/sentry/static/sentry/app/components/avatar/userAvatar.tsx
@@ -5,14 +5,10 @@ import {AvatarUser} from 'app/types';
 import {userDisplayName} from 'app/utils/formatters';
 import BaseAvatar from 'app/components/avatar/baseAvatar';
 import SentryTypes from 'app/sentryTypes';
+import {isRenderFunc} from 'app/utils/isRenderFunc';
 
 type RenderTooltipFunc = (user: AvatarUser) => React.ReactNode;
 
-// Type Guard for render prop
-function isRenderFunc(func: any): func is RenderTooltipFunc {
-  return typeof func === 'function';
-}
-
 const defaultProps = {
   // Default gravatar to false in order to support transparent avatars
   // Avatar falls through to letjer avatars if a remote image fails to load,
@@ -59,7 +55,7 @@ class UserAvatar extends React.Component<Props> {
 
     const type = this.getType(user, gravatar);
     let tooltip: React.ReactNode = null;
-    if (isRenderFunc(renderTooltip)) {
+    if (isRenderFunc<RenderTooltipFunc>(renderTooltip)) {
       tooltip = renderTooltip(user);
     } else if (props.tooltip) {
       tooltip = props.tooltip;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/form.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/form.tsx
index b89341a170..78b2437930 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/form.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/form.tsx
@@ -12,6 +12,7 @@ import FormModel, {
 } from 'app/views/settings/components/forms/model';
 import Panel from 'app/components/panels/panel';
 import space from 'app/styles/space';
+import {isRenderFunc} from 'app/utils/isRenderFunc';
 
 type Data = {};
 
@@ -21,11 +22,6 @@ type RenderProps = {
 
 type RenderFunc = (props: RenderProps) => React.ReactNode;
 
-// Type guard for render func.
-function isRenderFunc(func: React.ReactNode | Function): func is RenderFunc {
-  return typeof func === 'function';
-}
-
 type Props = {
   apiMethod?: APIRequestMethod;
   apiEndpoint?: string;
@@ -212,7 +208,9 @@ export default class Form extends React.Component<Props> {
         className={className}
         data-test-id={this.props['data-test-id']}
       >
-        <div>{isRenderFunc(children) ? children({model: this.model}) : children}</div>
+        <div>
+          {isRenderFunc<RenderFunc>(children) ? children({model: this.model}) : children}
+        </div>
 
         {shouldShowFooter && (
           <StyledFooter
