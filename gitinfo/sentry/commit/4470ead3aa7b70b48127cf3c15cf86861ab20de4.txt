commit 4470ead3aa7b70b48127cf3c15cf86861ab20de4
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Feb 13 11:48:17 2015 -0800

    Abstract org, project, and team bases

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 9f93a13db3..7a86268e92 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from datetime import datetime, timedelta
 from django.utils.http import urlquote
+from django.views.decorators.csrf import csrf_exempt
 from enum import Enum
 from pytz import utc
 from rest_framework.authentication import SessionAuthentication
@@ -57,6 +58,43 @@ class Endpoint(APIView):
             has_results='true' if bool(cursor) else 'false',
         )
 
+    def convert_args(self, request, *args, **kwargs):
+        return (args, kwargs)
+
+    @csrf_exempt
+    def dispatch(self, request, *args, **kwargs):
+        """
+        Identical to rest framework's dispatch except we add the ability
+        to convert arguments (for common URL params).
+        """
+        self.args = args
+        self.kwargs = kwargs
+        request = self.initialize_request(request, *args, **kwargs)
+        self.request = request
+        self.headers = self.default_response_headers  # deprecate?
+
+        try:
+            self.initial(request, *args, **kwargs)
+
+            # Get the appropriate handler method
+            if request.method.lower() in self.http_method_names:
+                handler = getattr(self, request.method.lower(),
+                                  self.http_method_not_allowed)
+
+                (args, kwargs) = self.convert_args(request, *args, **kwargs)
+                self.args = args
+                self.kwargs = kwargs
+            else:
+                handler = self.http_method_not_allowed
+
+            response = handler(request, *args, **kwargs)
+
+        except Exception as exc:
+            response = self.handle_exception(exc)
+
+        self.response = self.finalize_response(request, response, *args, **kwargs)
+        return self.response
+
     def paginate(self, request, on_results=lambda x: x, **kwargs):
         per_page = int(request.GET.get('per_page', 100))
         input_cursor = request.GET.get('cursor')
diff --git a/src/sentry/api/bases/__init__.py b/src/sentry/api/bases/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/sentry/api/bases/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
new file mode 100644
index 0000000000..c1e42b75c0
--- /dev/null
+++ b/src/sentry/api/bases/organization.py
@@ -0,0 +1,18 @@
+from __future__ import absolute_import
+
+from sentry.api.base import Endpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.models import Organization
+
+
+class OrganizationEndpoint(Endpoint):
+    def convert_args(self, request, organization_slug, *args, **kwargs):
+        try:
+            organization = Organization.objects.get_from_cache(
+                slug=organization_slug,
+            )
+        except Organization.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        kwargs['organization'] = organization
+        return (args, kwargs)
diff --git a/src/sentry/api/bases/project.py b/src/sentry/api/bases/project.py
new file mode 100644
index 0000000000..4e2b6d1606
--- /dev/null
+++ b/src/sentry/api/bases/project.py
@@ -0,0 +1,18 @@
+from __future__ import absolute_import
+
+from sentry.api.base import Endpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.models import Project
+
+
+class ProjectEndpoint(Endpoint):
+    def convert_args(self, request, project_id, *args, **kwargs):
+        try:
+            project = Project.objects.get_from_cache(
+                id=project_id,
+            )
+        except Project.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        kwargs['project'] = project
+        return (args, kwargs)
diff --git a/src/sentry/api/bases/team.py b/src/sentry/api/bases/team.py
new file mode 100644
index 0000000000..aa0c091ac6
--- /dev/null
+++ b/src/sentry/api/bases/team.py
@@ -0,0 +1,19 @@
+from __future__ import absolute_import
+
+from sentry.api.base import Endpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.models import Team
+
+
+class TeamEndpoint(Endpoint):
+    def convert_args(self, request, organization_slug, team_slug, *args, **kwargs):
+        try:
+            team = Team.objects.get(
+                organization__slug=organization_slug,
+                slug=team_slug,
+            )
+        except Team.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        kwargs['team'] = team
+        return (args, kwargs)
diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index 1fde6c1095..0650ed4c95 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -2,15 +2,15 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
-from sentry.api.base import Endpoint
+from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.permissions import assert_perm
 from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, Organization, OrganizationMember,
+    AuditLogEntry, AuditLogEntryEvent, OrganizationMember,
     OrganizationMemberType
 )
 
 
-class OrganizationMemberDetailsEndpoint(Endpoint):
+class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
     def _is_only_owner(self, member):
         if member.type != OrganizationMemberType.OWNER:
             return False
@@ -24,14 +24,7 @@ class OrganizationMemberDetailsEndpoint(Endpoint):
 
         return True
 
-    def delete(self, request, organization_slug, member_id):
-        try:
-            organization = Organization.objects.get_from_cache(
-                slug=organization_slug,
-            )
-        except Organization.DoesNotExist:
-            return Response(status=404)
-
+    def delete(self, request, organization, member_id):
         assert_perm(organization, request.user, request.auth)
 
         if request.user.is_superuser:
diff --git a/src/sentry/api/endpoints/organization_projects.py b/src/sentry/api/endpoints/organization_projects.py
index 2ea130930a..faab45ffd2 100644
--- a/src/sentry/api/endpoints/organization_projects.py
+++ b/src/sentry/api/endpoints/organization_projects.py
@@ -2,18 +2,14 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
-from sentry.api.base import Endpoint
+from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
-from sentry.models import Organization, Project, Team
+from sentry.models import Project, Team
 
 
-class OrganizationProjectsEndpoint(Endpoint):
-    def get(self, request, organization_slug):
-        organization = Organization.objects.get_from_cache(
-            slug=organization_slug,
-        )
-
+class OrganizationProjectsEndpoint(OrganizationEndpoint):
+    def get(self, request, organization):
         assert_perm(organization, request.user, request.auth)
 
         team_list = Team.objects.get_for_user(
diff --git a/src/sentry/api/endpoints/organization_stats.py b/src/sentry/api/endpoints/organization_stats.py
index d199e10e0c..04b6e1b35c 100644
--- a/src/sentry/api/endpoints/organization_stats.py
+++ b/src/sentry/api/endpoints/organization_stats.py
@@ -4,6 +4,7 @@ from rest_framework.response import Response
 
 from sentry.app import tsdb
 from sentry.api.base import BaseStatsEndpoint, DocSection
+from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import assert_perm
 from sentry.models import Organization, Project, Team
 
@@ -34,9 +35,12 @@ class OrganizationStatsEndpoint(BaseStatsEndpoint):
         **Note:** resolution should not be used unless you're familiar with Sentry
         internals as it's restricted to pre-defined values.
         """
-        organization = Organization.objects.get_from_cache(
-            slug=organization_slug,
-        )
+        try:
+            organization = Organization.objects.get_from_cache(
+                slug=organization_slug,
+            )
+        except Organization.DoesNotExist:
+            raise ResourceDoesNotExist
 
         assert_perm(organization, request.user, request.auth)
 
diff --git a/src/sentry/api/endpoints/organization_teams.py b/src/sentry/api/endpoints/organization_teams.py
index 9432d87935..3d48f6a7d2 100644
--- a/src/sentry/api/endpoints/organization_teams.py
+++ b/src/sentry/api/endpoints/organization_teams.py
@@ -3,10 +3,11 @@ from __future__ import absolute_import
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
-from sentry.api.base import Endpoint
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
 from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, Organization, Team
+    AuditLogEntry, AuditLogEntryEvent, OrganizationMemberType, Team
 )
 from sentry.permissions import can_create_teams
 
@@ -16,11 +17,9 @@ class TeamSerializer(serializers.Serializer):
     slug = serializers.CharField(max_length=200, required=False)
 
 
-class OrganizationTeamsEndpoint(Endpoint):
-    def get(self, request, organization_slug):
-        organization = Organization.objects.get_from_cache(
-            slug=organization_slug,
-        )
+class OrganizationTeamsEndpoint(OrganizationEndpoint):
+    def get(self, request, organization):
+        assert_perm(organization, request.user, request.auth)
 
         if request.auth:
             teams = [request.auth.project.team]
@@ -33,10 +32,8 @@ class OrganizationTeamsEndpoint(Endpoint):
             )
         return Response(serialize(teams, request.user))
 
-    def post(self, request, organization_slug):
-        organization = Organization.objects.get_from_cache(
-            slug=organization_slug,
-        )
+    def post(self, request, organization):
+        assert_perm(organization, request.user, request.auth, OrganizationMemberType.ADMIN)
 
         if not can_create_teams(request.user, organization):
             return Response(status=403)
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 65842bf691..6b6d863bcd 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -3,7 +3,8 @@ from __future__ import absolute_import
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
-from sentry.api.base import DocSection, Endpoint
+from sentry.api.base import DocSection
+from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.decorators import sudo_required
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
@@ -20,10 +21,10 @@ class ProjectSerializer(serializers.ModelSerializer):
         fields = ('name', 'slug')
 
 
-class ProjectDetailsEndpoint(Endpoint):
+class ProjectDetailsEndpoint(ProjectEndpoint):
     doc_section = DocSection.PROJECTS
 
-    def get(self, request, project_id):
+    def get(self, request, project):
         """
         Retrieve a project
 
@@ -32,8 +33,6 @@ class ProjectDetailsEndpoint(Endpoint):
             {method} {path}
 
         """
-        project = Project.objects.get_from_cache(id=project_id)
-
         assert_perm(project, request.user, request.auth)
 
         data = serialize(project, request.user)
@@ -47,7 +46,7 @@ class ProjectDetailsEndpoint(Endpoint):
         return Response(data)
 
     @sudo_required
-    def put(self, request, project_id):
+    def put(self, request, project):
         """
         Update a project
 
@@ -62,8 +61,6 @@ class ProjectDetailsEndpoint(Endpoint):
             }}
 
         """
-        project = Project.objects.get(id=project_id)
-
         assert_perm(project, request.user, request.auth, access=MEMBER_ADMIN)
 
         serializer = ProjectSerializer(project, data=request.DATA, partial=True)
@@ -100,7 +97,7 @@ class ProjectDetailsEndpoint(Endpoint):
         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 
     @sudo_required
-    def delete(self, request, project_id):
+    def delete(self, request, project):
         """
         Delete a project
 
@@ -112,8 +109,6 @@ class ProjectDetailsEndpoint(Endpoint):
         However once deletion has begun the state of a project changes and will
         be hidden from most public views.
         """
-        project = Project.objects.get(id=project_id)
-
         if project.is_internal_project():
             return Response('{"error": "Cannot remove projects internally used by Sentry."}',
                             status=status.HTTP_403_FORBIDDEN)
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index e780362d8d..2d8c03cf53 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -7,7 +7,8 @@ from rest_framework import serializers
 from rest_framework.response import Response
 
 from sentry.app import search
-from sentry.api.base import DocSection, Endpoint
+from sentry.api.base import DocSection
+from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
 from sentry.constants import (
@@ -15,8 +16,7 @@ from sentry.constants import (
 )
 from sentry.db.models.query import create_or_update
 from sentry.models import (
-    Activity, Group, GroupBookmark, GroupMeta, GroupSeen, GroupStatus, Project,
-    TagKey
+    Activity, Group, GroupBookmark, GroupMeta, GroupSeen, GroupStatus, TagKey
 )
 from sentry.search.utils import parse_query
 from sentry.tasks.deletion import delete_group
@@ -34,13 +34,13 @@ class GroupSerializer(serializers.Serializer):
     merge = serializers.BooleanField()
 
 
-class ProjectGroupIndexEndpoint(Endpoint):
+class ProjectGroupIndexEndpoint(ProjectEndpoint):
     doc_section = DocSection.EVENTS
 
     # bookmarks=0/1
     # status=<x>
     # <tag>=<value>
-    def get(self, request, project_id):
+    def get(self, request, project):
         """
         List a project's aggregates
 
@@ -54,10 +54,6 @@ class ProjectGroupIndexEndpoint(Endpoint):
         Any standard Sentry structured search query can be passed via the
         ``query`` parameter.
         """
-        project = Project.objects.get_from_cache(
-            id=project_id,
-        )
-
         assert_perm(project, request.user, request.auth)
 
         query_kwargs = {
@@ -139,7 +135,7 @@ class ProjectGroupIndexEndpoint(Endpoint):
 
         return response
 
-    def put(self, request, project_id):
+    def put(self, request, project):
         """
         Bulk mutate a list of aggregates
 
@@ -165,10 +161,6 @@ class ProjectGroupIndexEndpoint(Endpoint):
         If any ids are out of scope this operation will succeed without any data
         mutation.
         """
-        project = Project.objects.get_from_cache(
-            id=project_id,
-        )
-
         assert_perm(project, request.user, request.auth)
 
         group_ids = request.GET.getlist('id')
@@ -275,7 +267,7 @@ class ProjectGroupIndexEndpoint(Endpoint):
 
         return Response(dict(result))
 
-    def delete(self, request, project_id):
+    def delete(self, request, project):
         """
         Bulk remove a list of aggregates
 
@@ -288,10 +280,6 @@ class ProjectGroupIndexEndpoint(Endpoint):
         If any ids are out of scope this operation will succeed without any data
         mutation
         """
-        project = Project.objects.get_from_cache(
-            id=project_id,
-        )
-
         assert_perm(project, request.user, request.auth)
 
         group_ids = request.GET.getlist('id')
diff --git a/src/sentry/api/endpoints/project_releases.py b/src/sentry/api/endpoints/project_releases.py
index e7d5fd9628..4ddb6a123f 100644
--- a/src/sentry/api/endpoints/project_releases.py
+++ b/src/sentry/api/endpoints/project_releases.py
@@ -1,15 +1,16 @@
 from __future__ import absolute_import
 
-from sentry.api.base import DocSection, Endpoint
+from sentry.api.base import DocSection
+from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
-from sentry.models import Project, Release
+from sentry.models import Release
 
 
-class ProjectReleasesEndpoint(Endpoint):
+class ProjectReleasesEndpoint(ProjectEndpoint):
     doc_section = DocSection.RELEASES
 
-    def get(self, request, project_id):
+    def get(self, request, project):
         """
         List a project's releases
 
@@ -18,10 +19,6 @@ class ProjectReleasesEndpoint(Endpoint):
             {method} {path}
 
         """
-        project = Project.objects.get(
-            id=project_id,
-        )
-
         assert_perm(project, request.user, request.auth)
 
         queryset = Release.objects.filter(
diff --git a/src/sentry/api/endpoints/project_stats.py b/src/sentry/api/endpoints/project_stats.py
index 68344ce687..ab2b8a5942 100644
--- a/src/sentry/api/endpoints/project_stats.py
+++ b/src/sentry/api/endpoints/project_stats.py
@@ -4,6 +4,7 @@ from rest_framework.response import Response
 
 from sentry.app import tsdb
 from sentry.api.base import BaseStatsEndpoint, DocSection
+from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import assert_perm
 from sentry.models import Project
 
@@ -33,9 +34,12 @@ class ProjectStatsEndpoint(BaseStatsEndpoint):
         **Note:** resolution should not be used unless you're familiar with Sentry
         internals as it's restricted to pre-defined values.
         """
-        project = Project.objects.get_from_cache(
-            id=project_id,
-        )
+        try:
+            project = Project.objects.get_from_cache(
+                id=project_id,
+            )
+        except Project.DoesNotExist:
+            raise ResourceDoesNotExist
 
         assert_perm(project, request.user, request.auth)
 
diff --git a/src/sentry/api/endpoints/project_tagkey_details.py b/src/sentry/api/endpoints/project_tagkey_details.py
index c7464a09fa..357bcf7a25 100644
--- a/src/sentry/api/endpoints/project_tagkey_details.py
+++ b/src/sentry/api/endpoints/project_tagkey_details.py
@@ -2,30 +2,30 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
-from sentry.api.base import Endpoint
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import assert_perm
 from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, Project, TagKey, TagKeyStatus
+    AuditLogEntry, AuditLogEntryEvent, TagKey, TagKeyStatus
 )
 from sentry.tasks.deletion import delete_tag_key
 
 
-class ProjectTagKeyDetailsEndpoint(Endpoint):
-    def delete(self, request, project_id, key):
+class ProjectTagKeyDetailsEndpoint(ProjectEndpoint):
+    def delete(self, request, project, key):
         """
         Remove all occurances of the given tag key.
 
             {method} {path}
 
         """
-        project = Project.objects.get(
-            id=project_id,
-        )
-
-        tagkey = TagKey.objects.get(
-            project=project,
-            key=key,
-        )
+        try:
+            tagkey = TagKey.objects.get(
+                project=project,
+                key=key,
+            )
+        except TagKey.DoesNotExist:
+            raise ResourceDoesNotExist
 
         assert_perm(tagkey, request.user, request.auth)
 
diff --git a/src/sentry/api/endpoints/team_access_group_index.py b/src/sentry/api/endpoints/team_access_group_index.py
index be8e2bd9ab..e8b4200cd6 100644
--- a/src/sentry/api/endpoints/team_access_group_index.py
+++ b/src/sentry/api/endpoints/team_access_group_index.py
@@ -3,11 +3,11 @@ from __future__ import absolute_import
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
-from sentry.api.base import Endpoint
+from sentry.api.bases.team import TeamEndpoint
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
 from sentry.constants import MEMBER_ADMIN, MEMBER_SYSTEM, MEMBER_USER
-from sentry.models import Team, AccessGroup
+from sentry.models import AccessGroup
 
 
 class AccessTypeField(serializers.ChoiceField):
@@ -48,25 +48,15 @@ class AccessGroupSerializer(serializers.ModelSerializer):
         fields = ('name', 'type')
 
 
-class TeamAccessGroupIndexEndpoint(Endpoint):
-    def get(self, request, organization_slug, team_slug):
-        team = Team.objects.get(
-            organization__slug=organization_slug,
-            slug=team_slug,
-        )
-
+class TeamAccessGroupIndexEndpoint(TeamEndpoint):
+    def get(self, request, team):
         assert_perm(team, request.user, request.auth)
 
         data = sorted(AccessGroup.objects.filter(team=team), key=lambda x: x.name)
 
         return Response(serialize(data, request.user))
 
-    def post(self, request, organization_slug, team_slug):
-        team = Team.objects.get(
-            organization__slug=organization_slug,
-            slug=team_slug,
-        )
-
+    def post(self, request, team):
         assert_perm(team, request.user, request.auth, access=MEMBER_ADMIN)
 
         serializer = AccessGroupSerializer(data=request.DATA)
diff --git a/src/sentry/api/endpoints/team_details.py b/src/sentry/api/endpoints/team_details.py
index c6cb051f2c..2a505d058b 100644
--- a/src/sentry/api/endpoints/team_details.py
+++ b/src/sentry/api/endpoints/team_details.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
-from sentry.api.base import Endpoint
+from sentry.api.bases.team import TeamEndpoint
 from sentry.api.decorators import sudo_required
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
@@ -33,8 +33,8 @@ class TeamAdminSerializer(TeamSerializer):
         fields = ('name', 'slug', 'owner')
 
 
-class TeamDetailsEndpoint(Endpoint):
-    def get(self, request, organization_slug, team_slug):
+class TeamDetailsEndpoint(TeamEndpoint):
+    def get(self, request, team):
         """
         Retrieve a team.
 
@@ -43,22 +43,12 @@ class TeamDetailsEndpoint(Endpoint):
             {method} {path}
 
         """
-        team = Team.objects.get(
-            organization__slug=organization_slug,
-            slug=team_slug,
-        )
-
         assert_perm(team, request.user, request.auth)
 
         return Response(serialize(team, request.user))
 
     @sudo_required
-    def put(self, request, organization_slug, team_slug):
-        team = Team.objects.get(
-            organization__slug=organization_slug,
-            slug=team_slug,
-        )
-
+    def put(self, request, team):
         assert_perm(team, request.user, request.auth, access=OrganizationMemberType.ADMIN)
 
         # TODO(dcramer): this permission logic is duplicated from the
@@ -85,12 +75,7 @@ class TeamDetailsEndpoint(Endpoint):
         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 
     @sudo_required
-    def delete(self, request, organization_slug, team_slug):
-        team = Team.objects.get(
-            organization__slug=organization_slug,
-            slug=team_slug,
-        )
-
+    def delete(self, request, team):
         assert_perm(team, request.user, request.auth, access=OrganizationMemberType.ADMIN)
 
         updated = Team.objects.filter(
diff --git a/src/sentry/api/endpoints/team_groups_new.py b/src/sentry/api/endpoints/team_groups_new.py
index 30e006ee2a..52210c099a 100644
--- a/src/sentry/api/endpoints/team_groups_new.py
+++ b/src/sentry/api/endpoints/team_groups_new.py
@@ -4,14 +4,14 @@ from datetime import timedelta
 from django.utils import timezone
 from rest_framework.response import Response
 
-from sentry.api.base import Endpoint
+from sentry.api.bases.team import TeamEndpoint
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
-from sentry.models import Group, GroupStatus, Project, Team
+from sentry.models import Group, GroupStatus, Project
 
 
-class TeamGroupsNewEndpoint(Endpoint):
-    def get(self, request, organization_slug, team_slug):
+class TeamGroupsNewEndpoint(TeamEndpoint):
+    def get(self, request, team):
         """
         Return a list of the newest groups for a given team.
 
@@ -19,11 +19,6 @@ class TeamGroupsNewEndpoint(Endpoint):
         cutoff date, and then sort those by score, returning the highest scoring
         groups first.
         """
-        team = Team.objects.get(
-            organization__slug=organization_slug,
-            slug=team_slug,
-        )
-
         assert_perm(team, request.user, request.auth)
 
         minutes = int(request.REQUEST.get('minutes', 15))
diff --git a/src/sentry/api/endpoints/team_groups_trending.py b/src/sentry/api/endpoints/team_groups_trending.py
index 2e72f0edae..079221d15a 100644
--- a/src/sentry/api/endpoints/team_groups_trending.py
+++ b/src/sentry/api/endpoints/team_groups_trending.py
@@ -4,14 +4,14 @@ from datetime import timedelta
 from django.utils import timezone
 from rest_framework.response import Response
 
-from sentry.api.base import Endpoint
+from sentry.api.bases.team import TeamEndpoint
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
-from sentry.models import Group, GroupStatus, Project, Team
+from sentry.models import Group, GroupStatus, Project
 
 
-class TeamGroupsTrendingEndpoint(Endpoint):
-    def get(self, request, organization_slug, team_slug):
+class TeamGroupsTrendingEndpoint(TeamEndpoint):
+    def get(self, request, team):
         """
         Return a list of the trending groups for a given team.
 
@@ -19,11 +19,6 @@ class TeamGroupsTrendingEndpoint(Endpoint):
         cutoff date, and then sort those by score, returning the highest scoring
         groups first.
         """
-        team = Team.objects.get(
-            organization__slug=organization_slug,
-            slug=team_slug,
-        )
-
         assert_perm(team, request.user, request.auth)
 
         minutes = int(request.REQUEST.get('minutes', 15))
diff --git a/src/sentry/api/endpoints/team_project_index.py b/src/sentry/api/endpoints/team_project_index.py
index 7ed57d7cbf..9ffe3c081d 100644
--- a/src/sentry/api/endpoints/team_project_index.py
+++ b/src/sentry/api/endpoints/team_project_index.py
@@ -3,11 +3,11 @@ from __future__ import absolute_import
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
-from sentry.api.base import Endpoint
+from sentry.api.bases.team import TeamEndpoint
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
 from sentry.constants import MEMBER_ADMIN
-from sentry.models import Team, Project
+from sentry.models import Project
 from sentry.permissions import can_create_projects
 
 
@@ -17,24 +17,15 @@ class ProjectSerializer(serializers.ModelSerializer):
         fields = ('name', 'slug')
 
 
-class TeamProjectIndexEndpoint(Endpoint):
-    def get(self, request, organization_slug, team_slug):
-        team = Team.objects.get(
-            organization__slug=organization_slug,
-            slug=team_slug,
-        )
-
+class TeamProjectIndexEndpoint(TeamEndpoint):
+    def get(self, request, team):
         assert_perm(team, request.user, request.auth)
 
         results = list(Project.objects.get_for_user(team=team, user=request.user))
 
         return Response(serialize(results, request.user))
 
-    def post(self, request, organization_slug, team_slug):
-        team = Team.objects.get(
-            organization__slug=organization_slug,
-            slug=team_slug,
-        )
+    def post(self, request, team):
         assert_perm(team, request.user, request.auth, access=MEMBER_ADMIN)
 
         if not can_create_projects(user=request.user, team=team):
diff --git a/src/sentry/api/endpoints/team_stats.py b/src/sentry/api/endpoints/team_stats.py
index 96a417b02c..644f24c4c9 100644
--- a/src/sentry/api/endpoints/team_stats.py
+++ b/src/sentry/api/endpoints/team_stats.py
@@ -5,16 +5,20 @@ from six.moves import range
 
 from sentry.app import tsdb
 from sentry.api.base import BaseStatsEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import assert_perm
 from sentry.models import Team, Project
 
 
 class TeamStatsEndpoint(BaseStatsEndpoint):
     def get(self, request, organization_slug, team_slug):
-        team = Team.objects.get(
-            organization__slug=organization_slug,
-            slug=team_slug,
-        )
+        try:
+            team = Team.objects.get(
+                organization__slug=organization_slug,
+                slug=team_slug,
+            )
+        except Team.DoesNotExist:
+            raise ResourceDoesNotExist
 
         assert_perm(team, request.user, request.auth)
 
diff --git a/src/sentry/api/exceptions.py b/src/sentry/api/exceptions.py
new file mode 100644
index 0000000000..3eb6a3b3d6
--- /dev/null
+++ b/src/sentry/api/exceptions.py
@@ -0,0 +1,7 @@
+from __future__ import absolute_import
+
+from rest_framework.exceptions import APIException
+
+
+class ResourceDoesNotExist(APIException):
+    status_code = 404
