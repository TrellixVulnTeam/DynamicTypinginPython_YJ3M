commit d28281a5805506027900819a6d80fd79de49fee8
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Wed Jun 20 16:05:35 2018 -0700

    feat(integrations): VSTS Issue Sync (pre-existing functionality) (#8692)
    
    * Added old issue syncing and got tests to pass.
    
    * Added a comment.
    
    * Added mistune
    
    * Removed comment.
    
    * saving place.
    
    * Trying to rewrite issues for vsts realized all the endpoints changed.
    
    * got the projects to populate
    
    * Got issues to work.
    
    * saving place.
    
    * Updated tests.
    
    * Made the description optional.
    
    * Added version for requirement and organization_id=organization_id in serializer
    
    * removed new scope.
    
    * fixed mistune to add .8.3
    
    * Widened the mistune requirement to include the most current version
    
    * Corrected tests so that they have an expiration time.

diff --git a/requirements-base.txt b/requirements-base.txt
index 6ead8054a1..878bce2631 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -67,3 +67,5 @@ redis-py-cluster>=1.3.4,<1.4.0
 jsonschema==2.6.0
 # for bitbucket client
 unidiff>=0.5.4
+# for vsts repo
+mistune>0.7,<0.9
diff --git a/src/sentry/api/endpoints/group_integration_details.py b/src/sentry/api/endpoints/group_integration_details.py
index 793988b5f4..6b8dd00a5b 100644
--- a/src/sentry/api/endpoints/group_integration_details.py
+++ b/src/sentry/api/endpoints/group_integration_details.py
@@ -41,6 +41,7 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
                 integration,
                 request.user,
                 IntegrationIssueConfigSerializer(group, action, params=request.GET),
+                organization_id=organization_id
             )
         )
 
@@ -64,7 +65,7 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
             return Response(
                 {'detail': 'This feature is not supported for this integration.'}, status=400)
 
-        installation = integration.get_installation()
+        installation = integration.get_installation(organization_id)
         try:
             data = installation.get_issue(external_issue_id)
         except IntegrationError as exc:
@@ -115,7 +116,7 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
             return Response(
                 {'detail': 'This feature is not supported for this integration.'}, status=400)
 
-        installation = integration.get_installation()
+        installation = integration.get_installation(organization_id)
         try:
             data = installation.create_issue(request.DATA)
         except IntegrationError as exc:
diff --git a/src/sentry/api/serializers/models/integration.py b/src/sentry/api/serializers/models/integration.py
index 6b3eff6088..ce674448ff 100644
--- a/src/sentry/api/serializers/models/integration.py
+++ b/src/sentry/api/serializers/models/integration.py
@@ -129,9 +129,9 @@ class IntegrationIssueConfigSerializer(IntegrationSerializer):
         self.action = action
         self.params = params
 
-    def serialize(self, obj, attrs, user):
+    def serialize(self, obj, attrs, user, organization_id=None):
         data = super(IntegrationIssueConfigSerializer, self).serialize(obj, attrs, user)
-        installation = obj.get_installation()
+        installation = obj.get_installation(organization_id)
 
         if self.action == 'link':
             data['linkIssueConfig'] = installation.get_link_issue_config(
diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index 28711ff4c0..ad93cb2eea 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -2,15 +2,15 @@ from __future__ import absolute_import
 from time import time
 
 from django.utils.translation import ugettext as _
-from sentry.integrations.exceptions import ApiError
 
-from sentry.integrations import Integration, IntegrationProvider, IntegrationMetadata
-from .client import VstsApiClient
+from sentry.integrations import Integration, IntegrationFeatures, IntegrationProvider, IntegrationMetadata
+from sentry.integrations.exceptions import ApiError
+from sentry.integrations.vsts.issues import VstsIssueSync
 from sentry.pipeline import NestedPipelineView
 from sentry.identity.pipeline import IdentityProviderPipeline
 from sentry.identity.vsts import VSTSIdentityProvider
 from sentry.utils.http import absolute_uri
-
+from .client import VstsApiClient
 from .repository import VstsRepositoryProvider
 DESCRIPTION = """
 VSTS
@@ -26,7 +26,7 @@ metadata = IntegrationMetadata(
 )
 
 
-class VstsIntegration(Integration):
+class VstsIntegration(Integration, VstsIssueSync):
     def __init__(self, *args, **kwargs):
         super(VstsIntegration, self).__init__(*args, **kwargs)
         self.default_identity = None
@@ -81,6 +81,17 @@ class VstsIntegration(Integration):
             },
         ]
 
+    @property
+    def instance(self):
+        return self.model.metadata['domain_name']
+
+    @property
+    def default_project(self):
+        try:
+            return self.model.metadata['default_project']
+        except KeyError:
+            return None
+
 
 class VstsIntegrationProvider(IntegrationProvider):
     key = 'vsts'
@@ -92,6 +103,7 @@ class VstsIntegrationProvider(IntegrationProvider):
     needs_default_identity = True
     integration_cls = VstsIntegration
     can_add_project = True
+    features = frozenset([IntegrationFeatures.ISSUE_SYNC])
 
     setup_dialog_config = {
         'width': 600,
diff --git a/src/sentry/integrations/vsts/issues.py b/src/sentry/integrations/vsts/issues.py
new file mode 100644
index 0000000000..844819bb69
--- /dev/null
+++ b/src/sentry/integrations/vsts/issues.py
@@ -0,0 +1,88 @@
+from __future__ import absolute_import
+
+from mistune import markdown
+
+
+from sentry.integrations.issues import IssueSyncMixin
+from django.utils.translation import ugettext as _
+
+
+class VstsIssueSync(IssueSyncMixin):
+    description = 'Integrate Visual Studio Team Services work items by linking a project.'
+    slug = 'vsts'
+    conf_key = slug
+
+    issue_fields = frozenset(['id', 'title', 'url'])
+
+    def get_create_issue_config(self, group, **kwargs):
+        fields = super(VstsIssueSync, self).get_create_issue_config(group, **kwargs)
+        client = self.get_client()
+        try:
+            projects = client.get_projects(self.instance)['value']
+        except Exception as e:
+            self.raise_error(e)
+
+        project_choices = []
+        initial_project = ('', '')
+        for project in projects:
+            project_choices.append((project['id'], project['name']))
+            if project['id'] == self.default_project:
+                initial_project = project['name']
+        return [
+            {
+                'name': 'project',
+                'required': True,
+                'name': 'project',
+                'type': 'choice',
+                'choices': project_choices,
+                'defaultValue': initial_project,
+                'label': _('Project'),
+                'placeholder': initial_project or _('MyProject'),
+            }
+        ] + fields
+
+    def get_link_issue_config(self, group, **kwargs):
+        fields = super(VstsIssueSync, self).get_link_issue_config(group, **kwargs)
+        return fields
+
+    def create_issue(self, data, **kwargs):
+        """
+        Creates the issue on the remote service and returns an issue ID.
+        """
+        project = data.get('project') or self.default_project
+        if project is None:
+            raise ValueError('VSTS expects project')
+        client = self.get_client()
+
+        title = data['title']
+        description = data['description']
+        # TODO(LB): Why was group removed from method?
+        # link = absolute_uri(group.get_absolute_url())
+        try:
+            created_item = client.create_work_item(
+                instance=self.instance,
+                project=project,
+                title=title,
+                # Decriptions cannot easily be seen. So, a comment will be added as well.
+                description=markdown(description),
+                comment=markdown(description)
+                # link=link,
+            )
+        except Exception as e:
+            self.raise_error(e)
+
+        return {
+            'key': created_item['id'],
+            # 'url': created_item['_links']['html']['href'],
+            'title': title,
+            'description': description,
+        }
+
+    def get_issue(self, issue_id, **kwargs):
+        client = self.get_client()
+        work_item = client.get_work_item(self.instance, issue_id)
+        return {
+            'key': work_item['id'],
+            'title': work_item['fields']['System.Title'],
+            'description': work_item['fields'].get('System.Description')
+        }
diff --git a/tests/sentry/integrations/vsts/test_issues.py b/tests/sentry/integrations/vsts/test_issues.py
new file mode 100644
index 0000000000..78260068de
--- /dev/null
+++ b/tests/sentry/integrations/vsts/test_issues.py
@@ -0,0 +1,116 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+from django.test import RequestFactory
+from time import time
+
+from sentry.integrations.vsts.integration import VstsIntegration
+from sentry.models import Identity, IdentityProvider, Integration
+from sentry.testutils import TestCase
+from sentry.utils import json
+
+from .testutils import WORK_ITEM_RESPONSE
+
+
+class VstsIssueSycnTest(TestCase):
+    @fixture
+    def request(self):
+        return RequestFactory()
+
+    def setUp(self):
+        self.user = self.create_user()
+        self.organization = self.create_organization(owner=self.user)
+
+        model = Integration.objects.create(
+            provider='vsts',
+            external_id='vsts_external_id',
+            name='fabrikam-fiber-inc.visualstudio.com',
+            metadata={
+                'domain_name': 'fabrikam-fiber-inc.visualstudio.com',
+                'default_project': '0987654321',
+            }
+        )
+        identity = Identity.objects.create(
+            idp=IdentityProvider.objects.create(
+                type='vsts',
+                config={},
+            ),
+            user=self.user,
+            external_id='vsts',
+            data={
+                'access_token': '123456789',
+                'expires': time() + 1234567,
+            }
+        )
+        model.add_organization(self.organization.id, identity.id)
+        self.integration = VstsIntegration(model, self.organization.id)
+        self.issue_id = 309
+
+    @responses.activate
+    def test_create_issue(self):
+        responses.add(
+            responses.PATCH,
+            'https://fabrikam-fiber-inc.visualstudio.com/0987654321/_apis/wit/workitems/$Bug?api-version=3.0',
+            body=WORK_ITEM_RESPONSE,
+            content_type='application/json',
+        )
+
+        # group = self.create_group(message='Hello world', culprit='foo.bar')
+
+        form_data = {
+            'title': 'Hello',
+            'description': 'Fix this.',
+        }
+        assert self.integration.create_issue(form_data) == {
+            'key': self.issue_id,
+            'description': 'Fix this.',
+            'title': 'Hello',
+        }
+        request = responses.calls[-1].request
+        assert request.headers['Content-Type'] == 'application/json-patch+json'
+        payload = json.loads(request.body)
+        assert payload == [
+            {
+                'op': 'add',
+                'path': '/fields/System.Title',
+                'value': 'Hello',
+            },
+            # Adds both a comment and a description.
+            # See method for details.
+            {
+                'op': 'add',
+                'path': '/fields/System.Description',
+                'value': '<p>Fix this.</p>\n',
+            },
+            {
+                'op': 'add',
+                'path': '/fields/System.History',
+                'value': '<p>Fix this.</p>\n',
+            },
+            # {
+            #     "op": "add",
+            #     "path": "/relations/-",
+            #     "value": {
+            #         "rel": "Hyperlink",
+            #         "url": 'http://testserver/baz/bar/issues/1/',
+            #     }
+            # }
+        ]
+
+    @responses.activate
+    def test_get_issue(self):
+        responses.add(
+            responses.GET,
+            'https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/wit/workitems/%d' % self.issue_id,
+            body=WORK_ITEM_RESPONSE,
+            content_type='application/json',
+        )
+        assert self.integration.get_issue(self.issue_id) == {
+            'key': self.issue_id,
+            'description': 'Fix this.',
+            'title': 'Hello',
+        }
+        request = responses.calls[-1].request
+        assert request.headers['Content-Type'] == 'application/json'
diff --git a/tests/sentry/integrations/vsts/testutils.py b/tests/sentry/integrations/vsts/testutils.py
index 8b3ed06929..c08c3c7ae1 100644
--- a/tests/sentry/integrations/vsts/testutils.py
+++ b/tests/sentry/integrations/vsts/testutils.py
@@ -47,3 +47,47 @@ FILE_CHANGES_EXAMPLE = b"""
   ]
 }
 """
+WORK_ITEM_RESPONSE = """{
+  "id": 309,
+  "rev": 1,
+  "fields": {
+    "System.AreaPath": "Fabrikam-Fiber-Git",
+    "System.TeamProject": "Fabrikam-Fiber-Git",
+    "System.IterationPath": "Fabrikam-Fiber-Git",
+    "System.WorkItemType": "Product Backlog Item",
+    "System.State": "New",
+    "System.Reason": "New backlog item",
+    "System.CreatedDate": "2015-01-07T18:13:01.807Z",
+    "System.CreatedBy": "Jamal Hartnett <fabrikamfiber4@hotmail.com>",
+    "System.ChangedDate": "2015-01-07T18:13:01.807Z",
+    "System.ChangedBy": "Jamal Hartnett <fabrikamfiber4@hotmail.com>",
+    "System.Title": "Hello",
+    "Microsoft.VSTS.Scheduling.Effort": 8,
+    "WEF_6CB513B6E70E43499D9FC94E5BBFB784_Kanban.Column": "New",
+    "System.Description": "Fix this."
+  },
+  "_links": {
+    "self": {
+      "href": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/wit/workItems/309"
+    },
+    "workItemUpdates": {
+      "href": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/wit/workItems/309/updates"
+    },
+    "workItemRevisions": {
+      "href": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/wit/workItems/309/revisions"
+    },
+    "workItemHistory": {
+      "href": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/wit/workItems/309/history"
+    },
+    "html": {
+      "href": "https://fabrikam-fiber-inc.visualstudio.com/web/wi.aspx?pcguid=d81542e4-cdfa-4333-b082-1ae2d6c3ad16&id=309"
+    },
+    "workItemType": {
+      "href": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/6ce954b1-ce1f-45d1-b94d-e6bf2464ba2c/_apis/wit/workItemTypes/Product%20Backlog%20Item"
+    },
+    "fields": {
+      "href": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/wit/fields"
+    }
+  },
+  "url": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/wit/workItems/309"
+}"""
