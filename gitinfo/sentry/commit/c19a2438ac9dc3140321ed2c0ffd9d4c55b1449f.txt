commit c19a2438ac9dc3140321ed2c0ffd9d4c55b1449f
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Tue Dec 17 19:45:38 2019 -0500

    fix(apm): Adjust event breakdown calculation to use cumulative span duration (#16149)
    
    Adjust event breakdown calculation to use cumulative span duration instead of just the transaction's span duration.

diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/eventBreakdown.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/eventBreakdown.tsx
index 1e2e87dfaf..bc29bc33aa 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/eventBreakdown.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/eventBreakdown.tsx
@@ -11,9 +11,13 @@ import {TraceContextType} from 'app/components/events/interfaces/spans/traceView
 
 type OpStats = {percentage: number; totalDuration: number};
 
+const TOP_N_SPANS = 3;
+
 type EventBreakdownType = {
+  // top TOP_N_SPANS spans
   ops: ({name: string} & OpStats)[];
-  unknown: OpStats | undefined;
+  // the rest of the spans
+  other: OpStats | undefined;
 };
 
 type Props = {
@@ -37,7 +41,7 @@ class EventBreakdown extends React.Component<Props> {
     if (!event) {
       return {
         ops: [],
-        unknown: undefined,
+        other: undefined,
       };
     }
 
@@ -46,7 +50,7 @@ class EventBreakdown extends React.Component<Props> {
     if (!traceContext) {
       return {
         ops: [],
-        unknown: undefined,
+        other: undefined,
       };
     }
 
@@ -56,17 +60,15 @@ class EventBreakdown extends React.Component<Props> {
 
     const spans: SpanType[] = get(spanEntry, 'data', []);
 
-    // track stats on spans with no operation
-    const spansWithNoOperation = {count: 0, totalDuration: 0};
-
     type AggregateType = {
       [opname: string]: {
         totalDuration: number; // num of seconds
       };
     };
 
-    const totalDuration = Math.abs(event.endTimestamp - event.startTimestamp);
+    let cumulativeDuration = 0;
 
+    // add the transaction itself as a span
     spans.push({
       op: traceContext.op,
       timestamp: event.endTimestamp,
@@ -78,14 +80,14 @@ class EventBreakdown extends React.Component<Props> {
 
     const aggregateByOp: AggregateType = spans.reduce(
       (aggregate: AggregateType, span: SpanType) => {
-        const op = span.op;
+        let op = span.op;
+
         const duration = Math.abs(span.timestamp - span.start_timestamp);
+        cumulativeDuration += duration;
 
         if (typeof op !== 'string') {
-          spansWithNoOperation.count += 1;
-          spansWithNoOperation.totalDuration += duration;
-
-          return aggregate;
+          // a span with no operation name is considered an 'unknown' op
+          op = 'unknown';
         }
         const opStats = aggregate[op];
 
@@ -106,7 +108,7 @@ class EventBreakdown extends React.Component<Props> {
     const ops = Object.keys(aggregateByOp).map(opName => {
       return {
         name: opName,
-        percentage: aggregateByOp[opName].totalDuration / totalDuration,
+        percentage: aggregateByOp[opName].totalDuration / cumulativeDuration,
         totalDuration: aggregateByOp[opName].totalDuration,
       };
     });
@@ -125,16 +127,26 @@ class EventBreakdown extends React.Component<Props> {
       return 1;
     });
 
+    const other = ops
+      .slice(TOP_N_SPANS)
+      .reduce((accOther: OpStats | undefined, currentOp) => {
+        if (!accOther) {
+          return {
+            percentage: currentOp.totalDuration / cumulativeDuration,
+            totalDuration: currentOp.totalDuration,
+          };
+        }
+
+        accOther.totalDuration += currentOp.totalDuration;
+        accOther.percentage = accOther.totalDuration / cumulativeDuration;
+
+        return accOther;
+      }, undefined);
+
     return {
-      // use the first 4 ops with the top total duration
-      ops: ops.slice(0, 4),
-      unknown:
-        spansWithNoOperation.count > 0
-          ? {
-              percentage: spansWithNoOperation.totalDuration / totalDuration,
-              totalDuration: spansWithNoOperation.totalDuration,
-            }
-          : undefined,
+      // use the first TOP_N_SPANS ops with the top total duration
+      ops: ops.slice(0, TOP_N_SPANS),
+      other,
     };
   }
 
