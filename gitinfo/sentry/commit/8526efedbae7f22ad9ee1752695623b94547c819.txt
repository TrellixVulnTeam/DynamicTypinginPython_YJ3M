commit 8526efedbae7f22ad9ee1752695623b94547c819
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jul 4 13:49:38 2013 +0200

    Some initial work on api v2 abstraction

diff --git a/src/sentry/plugins/base/__init__.py b/src/sentry/plugins/base/__init__.py
new file mode 100644
index 0000000000..5cad3eabda
--- /dev/null
+++ b/src/sentry/plugins/base/__init__.py
@@ -0,0 +1,16 @@
+"""
+sentry.plugins.base
+~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from sentry.plugins.base.manager import PluginManager
+from sentry.plugins.base.response import *  # NOQA
+from sentry.plugins.base.v1 import *  # NOQA
+from sentry.plugins.base.v2 import *  # NOQA
+
+plugins = PluginManager()
+register = plugins.register
+unregister = plugins.unregister
diff --git a/src/sentry/plugins/base/manager.py b/src/sentry/plugins/base/manager.py
new file mode 100644
index 0000000000..f923ae55e6
--- /dev/null
+++ b/src/sentry/plugins/base/manager.py
@@ -0,0 +1,69 @@
+"""
+sentry.plugins.base.manager
+~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+__all__ = ('PluginManager',)
+
+import logging
+
+from sentry.utils.managers import InstanceManager
+from sentry.utils.safe import safe_execute
+
+
+class PluginManager(InstanceManager):
+    def __iter__(self):
+        return iter(self.all())
+
+    def __len__(self):
+        return sum(1 for i in self.all())
+
+    def all(self):
+        for plugin in sorted(super(PluginManager, self).all(), key=lambda x: x.get_title()):
+            if not plugin.is_enabled():
+                continue
+            yield plugin
+
+    def for_project(self, project):
+        for plugin in self.all():
+            if not safe_execute(plugin.is_enabled, project):
+                continue
+            yield plugin
+
+    def for_site(self):
+        for plugin in self.all():
+            if not plugin.has_site_conf():
+                continue
+            yield plugin
+
+    def get(self, slug):
+        for plugin in self.all():
+            if plugin.slug == slug:
+                return plugin
+        raise KeyError(slug)
+
+    def first(self, func_name, *args, **kwargs):
+        for plugin in self.all():
+            try:
+                result = getattr(plugin, func_name)(*args, **kwargs)
+            except Exception, e:
+                logger = logging.getLogger('sentry.plugins')
+                logger.error('Error processing %s() on %r: %s', func_name, plugin.__class__, e, extra={
+                    'func_arg': args,
+                    'func_kwargs': kwargs,
+                }, exc_info=True)
+                continue
+
+            if result is not None:
+                return result
+
+    def register(self, cls):
+        self.add('%s.%s' % (cls.__module__, cls.__name__))
+        return cls
+
+    def unregister(self, cls):
+        self.remove('%s.%s' % (cls.__module__, cls.__name__))
+        return cls
diff --git a/src/sentry/plugins/base/response.py b/src/sentry/plugins/base/response.py
new file mode 100644
index 0000000000..cb600474db
--- /dev/null
+++ b/src/sentry/plugins/base/response.py
@@ -0,0 +1,34 @@
+"""
+sentry.plugins.base.response
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+__all__ = ('Response',)
+
+from django.core.context_processors import csrf
+from django.http import HttpResponse
+
+
+class Response(object):
+    def __init__(self, template, context=None):
+        self.template = template
+        self.context = context
+
+    def respond(self, request, context=None):
+        return HttpResponse(self.render(request, context))
+
+    def render(self, request, context=None):
+        from sentry.web.helpers import render_to_string
+
+        if not context:
+            context = {}
+
+        if self.context:
+            context.update(self.context)
+
+        context.update(csrf(request))
+
+        return render_to_string(self.template, context, request)
diff --git a/src/sentry/plugins/base.py b/src/sentry/plugins/base/v1.py
similarity index 83%
rename from src/sentry/plugins/base.py
rename to src/sentry/plugins/base/v1.py
index 4d4edda8fb..a3d7ac44c3 100644
--- a/src/sentry/plugins/base.py
+++ b/src/sentry/plugins/base/v1.py
@@ -1,103 +1,20 @@
 """
-sentry.plugins.base
-~~~~~~~~~~~~~~~~~~~
+sentry.plugins.base.v1
+~~~~~~~~~~~~~~~~~~~~~~
 
 :copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
 
-__all__ = ('Plugin', 'plugins', 'register', 'unregister')
+__all__ = ('Plugin',)
 
-import logging
 
-from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect, HttpResponse
+from django.http import HttpResponseRedirect
 
-from sentry.utils.managers import InstanceManager
-from sentry.utils.safe import safe_execute
 from threading import local
 
-
-class Response(object):
-    def __init__(self, template, context=None):
-        self.template = template
-        self.context = context
-
-    def respond(self, request, context=None):
-        return HttpResponse(self.render(request, context))
-
-    def render(self, request, context=None):
-        from sentry.web.helpers import render_to_string
-
-        if not context:
-            context = {}
-
-        if self.context:
-            context.update(self.context)
-
-        context.update(csrf(request))
-
-        return render_to_string(self.template, context, request)
-
-
-class PluginManager(InstanceManager):
-    def __iter__(self):
-        return iter(self.all())
-
-    def __len__(self):
-        return sum(1 for i in self.all())
-
-    def all(self):
-        for plugin in sorted(super(PluginManager, self).all(), key=lambda x: x.get_title()):
-            if not plugin.is_enabled():
-                continue
-            yield plugin
-
-    def for_project(self, project):
-        for plugin in self.all():
-            if not safe_execute(plugin.is_enabled, project):
-                continue
-            yield plugin
-
-    def for_site(self):
-        for plugin in self.all():
-            if not plugin.has_site_conf():
-                continue
-            yield plugin
-
-    def get(self, slug):
-        for plugin in self.all():
-            if plugin.slug == slug:
-                return plugin
-        raise KeyError(slug)
-
-    def first(self, func_name, *args, **kwargs):
-        for plugin in self.all():
-            try:
-                result = getattr(plugin, func_name)(*args, **kwargs)
-            except Exception, e:
-                logger = logging.getLogger('sentry.plugins')
-                logger.error('Error processing %s() on %r: %s', func_name, plugin.__class__, e, extra={
-                    'func_arg': args,
-                    'func_kwargs': kwargs,
-                }, exc_info=True)
-                continue
-
-            if result is not None:
-                return result
-
-    def register(self, cls):
-        self.add('%s.%s' % (cls.__module__, cls.__name__))
-        return cls
-
-    def unregister(self, cls):
-        self.remove('%s.%s' % (cls.__module__, cls.__name__))
-        return cls
-
-plugins = PluginManager()
-register = plugins.register
-unregister = plugins.unregister
+from sentry.plugins.base.response import Response
 
 
 class PluginMount(type):
@@ -183,7 +100,7 @@ class IPlugin(local):
         return True
 
     def reset_options(self, project=None, user=None):
-        from .helpers import reset_options
+        from sentry.plugins.helpers import reset_options
         return reset_options(self.get_conf_key(), project, user)
 
     def get_option(self, key, project=None, user=None):
@@ -195,7 +112,7 @@ class IPlugin(local):
 
         >>> value = plugin.get_option('my_option')
         """
-        from .helpers import get_option
+        from sentry.plugins.helpers import get_option
         return get_option(self._get_option_key(key), project, user)
 
     def set_option(self, key, value, project=None, user=None):
@@ -206,7 +123,7 @@ class IPlugin(local):
 
         >>> plugin.set_option('my_option', 'http://example.com')
         """
-        from .helpers import set_option
+        from sentry.plugins.helpers import set_option
         return set_option(self._get_option_key(key), value, project, user)
 
     def unset_option(self, key, project=None, user=None):
@@ -217,7 +134,7 @@ class IPlugin(local):
 
         >>> plugin.unset_option('my_option')
         """
-        from .helpers import unset_option
+        from sentry.plugins.helpers import unset_option
         return unset_option(self._get_option_key(key), project, user)
 
     def get_url(self, group):
diff --git a/src/sentry/plugins/base/v2.py b/src/sentry/plugins/base/v2.py
new file mode 100644
index 0000000000..734bc8949d
--- /dev/null
+++ b/src/sentry/plugins/base/v2.py
@@ -0,0 +1,219 @@
+"""
+sentry.plugins.base.v2
+~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+__all__ = ('Plugin2',)
+
+from django.http import HttpResponseRedirect
+
+from threading import local
+
+from sentry.plugins.base.response import Response
+
+
+class PluginMount(type):
+    def __new__(cls, name, bases, attrs):
+        new_cls = type.__new__(cls, name, bases, attrs)
+        if IPlugin2 in bases:
+            return new_cls
+        if not new_cls.title:
+            new_cls.title = new_cls.__name__
+        if not new_cls.slug:
+            new_cls.slug = new_cls.title.replace(' ', '-').lower()
+        return new_cls
+
+
+class IPlugin2(local):
+    """
+    Plugin interface. Should not be inherited from directly.
+
+    A plugin should be treated as if it were a singleton. The owner does not
+    control when or how the plugin gets instantiated, nor is it guaranteed that
+    it will happen, or happen more than once.
+
+    >>> from sentry.plugins import Plugin2
+    >>> class MyPlugin(Plugin2):
+    >>>     title = 'My Plugin'
+    >>>
+    >>>     def widget(self, request, group, **kwargs):
+    >>>         return self.render('myplugin/widget.html')
+
+    All children should allow ``**kwargs`` on all inherited methods.
+    """
+    # Generic plugin information
+    title = None
+    slug = None
+    description = None
+    version = None
+    author = None
+    author_url = None
+    resource_links = ()
+
+    # Configuration specifics
+    conf_key = None
+    conf_title = None
+
+    project_conf_form = None
+    project_conf_template = 'sentry/plugins/project_configuration.html'
+
+    # Global enabled state
+    enabled = True
+    can_disable = True
+
+    # Should this plugin be enabled by default for projects?
+    project_default_enabled = False
+
+    def _get_option_key(self, key):
+        return '%s:%s' % (self.get_conf_key(), key)
+
+    def is_enabled(self, project=None):
+        """
+        Returns a boolean representing if this plugin is enabled.
+
+        If ``project`` is passed, it will limit the scope to that project.
+
+        >>> plugin.is_enabled()
+        """
+        if not self.enabled:
+            return False
+        if not self.can_disable:
+            return True
+        if not self.can_enable_for_projects():
+            return True
+
+        if project:
+            project_enabled = self.get_option('enabled', project)
+            if project_enabled is not None:
+                return project_enabled
+            else:
+                return self.project_default_enabled
+
+        return True
+
+    def reset_options(self, project=None, user=None):
+        from .helpers import reset_options
+        return reset_options(self.get_conf_key(), project, user)
+
+    def get_option(self, key, project=None, user=None):
+        """
+        Returns the value of an option in your plugins keyspace, or ``None`` if
+        one is not present.
+
+        If ``project`` is passed, it will limit the scope to that project's keyspace.
+
+        >>> value = plugin.get_option('my_option')
+        """
+        from sentry.plugins.helpers import get_option
+        return get_option(self._get_option_key(key), project, user)
+
+    def set_option(self, key, value, project=None, user=None):
+        """
+        Updates the value of an option in your plugins keyspace.
+
+        If ``project`` is passed, it will limit the scope to that project's keyspace.
+
+        >>> plugin.set_option('my_option', 'http://example.com')
+        """
+        from sentry.plugins.helpers import set_option
+        return set_option(self._get_option_key(key), value, project, user)
+
+    def unset_option(self, key, project=None, user=None):
+        """
+        Removes an option in your plugins keyspace.
+
+        If ``project`` is passed, it will limit the scope to that project's keyspace.
+
+        >>> plugin.unset_option('my_option')
+        """
+        from sentry.plugins.helpers import unset_option
+        return unset_option(self._get_option_key(key), project, user)
+
+    def get_conf_key(self):
+        """
+        Returns a string representing the configuration keyspace prefix for this plugin.
+        """
+        if not self.conf_key:
+            return self.get_conf_title().lower().replace(' ', '_')
+        return self.conf_key
+
+    def get_conf_title(self):
+        """
+        Returns a string representing the title to be shown on the configuration page.
+        """
+        return self.conf_title or self.get_title()
+
+    def has_project_conf(self):
+        return self.project_conf_form is not None
+
+    def can_enable_for_projects(self):
+        """
+        Returns a boolean describing whether this plugin can be enabled on a per project basis
+        """
+        return True
+
+    # Response methods
+
+    def redirect(self, url):
+        """
+        Returns a redirect response type.
+        """
+        return HttpResponseRedirect(url)
+
+    def render(self, template, context=None):
+        """
+        Given a template name, and an optional context (dictionary), returns a
+        ready-to-render response.
+
+        Default context includes the plugin instance.
+
+        >>> plugin.render('template.html', {'hello': 'world'})
+        """
+        if context is None:
+            context = {}
+        context['plugin'] = self
+        return Response(template, context)
+
+    # The following methods are specific to web requests
+
+    def get_title(self):
+        """
+        Returns the general title for this plugin.
+
+        >>> plugin.get_title()
+        """
+        return self.title
+
+    def get_description(self):
+        """
+        Returns the description for this plugin. This is shown on the plugin configuration
+        page.
+
+        >>> plugin.get_description()
+        """
+        return self.description
+
+    def get_resource_links(self):
+        """
+        Returns a list of tuples pointing to various resources for this plugin.
+
+        >>> def get_resource_links(self):
+        >>>     return [
+        >>>         ('Documentation', 'http://sentry.readthedocs.org'),
+        >>>         ('Bug Tracker', 'https://github.com/getsentry/sentry/issues'),
+        >>>         ('Source', 'https://github.com/getsentry/sentry'),
+        >>>     ]
+        """
+        return self.resource_links
+
+
+class Plugin2(IPlugin2):
+    """
+    A plugin should be treated as if it were a singleton. The owner does not
+    control when or how the plugin gets instantiated, nor is it guaranteed that
+    it will happen, or happen more than once.
+    """
+    __metaclass__ = PluginMount
