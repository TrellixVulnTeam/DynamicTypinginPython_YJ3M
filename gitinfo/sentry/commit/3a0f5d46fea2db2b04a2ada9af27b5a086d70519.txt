commit 3a0f5d46fea2db2b04a2ada9af27b5a086d70519
Author: David Cramer <dcramer@gmail.com>
Date:   Sat May 25 08:57:58 2013 +0800

    Ensure access group members are reflected in notifications

diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 8ce9082ace..0973c8adcd 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -8,13 +8,14 @@ sentry.plugins.bases.notify
 from django import forms
 from django.utils.translation import ugettext_lazy as _
 from sentry.plugins import Plugin
-from sentry.models import UserOption, Project, User
+from sentry.models import UserOption, Project, User, AccessGroup
 from sentry.utils.cache import cache
 from sentry.constants import MEMBER_USER
 
 
 class NotificationConfigurationForm(forms.Form):
-    send_to_members = forms.BooleanField(label=_('Include project members'), initial=False, required=False,
+    send_to_members = forms.BooleanField(
+        label=_('Include project members'), initial=False, required=False,
         help_text=_('Notify members of this project.'))
 
 
@@ -91,11 +92,17 @@ class NotificationPlugin(Plugin):
             value=0,
         ).values_list('user', flat=True))
 
-        # fetch remaining users
+        # fetch team members
         member_set = set(project.team.member_set.filter(
             user__is_active=True,
         ).exclude(user__in=disabled).values_list('user', flat=True))
 
+        # fetch access group members
+        member_set |= set(AccessGroup.objects.filter(
+            projects=project,
+            members__is_active=True,
+        ).exclude(members__in=disabled).values_list('members', flat=True))
+
         return member_set
 
     def get_emails_for_users(self, user_ids):
@@ -113,7 +120,9 @@ class NotificationPlugin(Plugin):
 
         # if any didnt exist, grab their default email
         if user_ids:
-            email_list |= set(User.objects.filter(pk__in=user_ids, is_active=True).values_list('email', flat=True))
+            email_list |= set(User.objects.filter(
+                pk__in=user_ids, is_active=True
+            ).values_list('email', flat=True))
 
         return email_list
 
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 3a5d25ebaf..d43e5f29e9 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -6,7 +6,7 @@ import mock
 from mock import Mock
 from django.utils import timezone
 from sentry.interfaces import Stacktrace
-from sentry.models import Alert, Event, Group, Project
+from sentry.models import Alert, Event, Group, Project, AccessGroup
 from sentry.plugins.sentry_mail.models import MailProcessor
 from sentry.testutils import TestCase, fixture
 
@@ -245,20 +245,29 @@ class MailProcessorTest(TestCase):
 
         user = User.objects.create(username='foo', email='foo@example.com', is_active=True)
         user2 = User.objects.create(username='baz', email='baz@example.com', is_active=True)
-        user3 = User.objects.create(username='bar', email='bar@example.com', is_active=False)
+        user3 = User.objects.create(username='baz2', email='bar@example.com', is_active=True)
+
+        # user with inactive account
+        User.objects.create(username='bar', email='bar@example.com', is_active=False)
+        # user not in any groups
+        User.objects.create(username='bar2', email='bar@example.com', is_active=True)
+
         project = Project.objects.create(name='Test', slug='test', owner=user)
         project.team.member_set.get_or_create(user=user)
         project.team.member_set.get_or_create(user=user2)
-        project.team.member_set.get_or_create(user=user3)
+
+        ag = AccessGroup.objects.create(team=project.team)
+        ag.members.add(user3)
+        ag.projects.add(project)
 
         # all members
-        assert (sorted(set([user.pk, user2.pk])) ==
+        assert (sorted(set([user.pk, user2.pk, user3.pk])) ==
                 sorted(self.plugin.get_sendable_users(project)))
 
         # disabled user2
         UserOption.objects.create(key='mail:alert', value=0, project=project, user=user2)
 
-        assert sorted(set([user.pk])) == sorted(self.plugin.get_sendable_users(project))
+        assert user2.pk not in self.plugin.get_sendable_users(project)
 
     @mock.patch('sentry.plugins.sentry_mail.models.MailProcessor._send_mail')
     def test_on_alert(self, _send_mail):
