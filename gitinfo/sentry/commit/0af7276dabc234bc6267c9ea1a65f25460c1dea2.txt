commit 0af7276dabc234bc6267c9ea1a65f25460c1dea2
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Thu Jun 20 17:12:55 2019 -0400

    fix(projects): Support deprecated pre-Sentry 10 project URLs (#13722)
    
    Fixes SEN-772

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 2fe9466447..c009c7707d 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -31,6 +31,7 @@ import ProjectPluginDetails from 'app/views/projectPluginDetails';
 import ProjectPlugins from 'app/views/projectPlugins';
 import ProjectSettings from 'app/views/projectSettings';
 import ProjectTags from 'app/views/projectTags';
+import redirectDeprecatedProjectRoute from 'app/views/projects/redirectDeprecatedProjectRoute';
 import RouteNotFound from 'app/views/routeNotFound';
 import SettingsProjectProvider from 'app/views/settings/components/settingsProjectProvider';
 import SettingsWrapper from 'app/views/settings/components/settingsWrapper';
@@ -1151,40 +1152,100 @@ function routes() {
           <IndexRoute component={errorHandler(ProjectInstallOverview)} />
           <Route path=":platform/" component={errorHandler(ProjectInstallPlatform)} />
         </Route>
-
-        <Redirect from=":projectId/" to="/organizations/:orgId/issues/" />
-        <Redirect from=":projectId/issues/" to="/organizations/:orgId/issues/" />
-        <Redirect
-          from=":projectId/searches/:searchId/"
-          to="/organizations/:orgId/issues/"
-        />
-        <Redirect from=":projectId/dashboard/" to="/organizations/:orgId/dashboards/" />
-        <Redirect from=":projectId/releases/" to="/organizations/:orgId/releases/" />
-        <Redirect
-          from=":projectId/releases/:version/"
-          to="/organizations/:orgId/releases/:version/"
-        />
-        <Redirect
-          from=":projectId/releases/:version/new-events/"
-          to="/organizations/:orgId/releases/:version/new-events/"
-        />
-        <Redirect
-          from=":projectId/releases/:version/all-events/"
-          to="/organizations/:orgId/releases/:version/all-events/"
-        />
-        <Redirect
-          from=":projectId/releases/:version/artifacts/"
-          to="/organizations/:orgId/releases/:version/artifacts/"
-        />
-        <Redirect
-          from=":projectId/releases/:version/commits/"
-          to="/organizations/:orgId/releases/:version/commits/"
-        />
-
-        <Redirect
-          from=":projectId/user-feedback/"
-          to="/organizations/:orgId/user-feedback/"
-        />
+        <Route path=":projectId/">
+          {/* Support for deprecated URLs (pre-Sentry 10). We just redirect users to new canonical URLs. */}
+          <IndexRoute
+            component={errorHandler(
+              redirectDeprecatedProjectRoute(
+                ({orgId, projectId}) =>
+                  `/organizations/${orgId}/issues/?project=${projectId}`
+              )
+            )}
+          />
+          <Route
+            path="issues/"
+            component={errorHandler(
+              redirectDeprecatedProjectRoute(
+                ({orgId, projectId}) =>
+                  `/organizations/${orgId}/issues/?project=${projectId}`
+              )
+            )}
+          />
+          <Redirect from="dashboard/" to="/organizations/:orgId/dashboards/" />
+          <Route
+            path="releases/"
+            component={errorHandler(
+              redirectDeprecatedProjectRoute(
+                ({orgId, projectId}) =>
+                  `/organizations/${orgId}/releases/?project=${projectId}`
+              )
+            )}
+          />
+          <Route
+            path="releases/:version/"
+            component={errorHandler(
+              redirectDeprecatedProjectRoute(
+                ({orgId, projectId, router}) =>
+                  `/organizations/${orgId}/releases/${
+                    router.params.version
+                  }/?project=${projectId}`
+              )
+            )}
+          />
+          <Route
+            path="releases/:version/new-events/"
+            component={errorHandler(
+              redirectDeprecatedProjectRoute(
+                ({orgId, projectId, router}) =>
+                  `/organizations/${orgId}/releases/${
+                    router.params.version
+                  }/new-events/?project=${projectId}`
+              )
+            )}
+          />
+          <Route
+            path="releases/:version/all-events/"
+            component={errorHandler(
+              redirectDeprecatedProjectRoute(
+                ({orgId, projectId, router}) =>
+                  `/organizations/${orgId}/releases/${
+                    router.params.version
+                  }/all-events/?project=${projectId}`
+              )
+            )}
+          />
+          <Route
+            path="releases/:version/artifacts/"
+            component={errorHandler(
+              redirectDeprecatedProjectRoute(
+                ({orgId, projectId, router}) =>
+                  `/organizations/${orgId}/releases/${
+                    router.params.version
+                  }/artifacts/?project=${projectId}`
+              )
+            )}
+          />
+          <Route
+            path="releases/:version/commits/"
+            component={errorHandler(
+              redirectDeprecatedProjectRoute(
+                ({orgId, projectId, router}) =>
+                  `/organizations/${orgId}/releases/${
+                    router.params.version
+                  }/commits/?project=${projectId}`
+              )
+            )}
+          />
+          <Route
+            path="user-feedback/"
+            component={errorHandler(
+              redirectDeprecatedProjectRoute(
+                ({orgId, projectId}) =>
+                  `/organizations/${orgId}/user-feedback/?project=${projectId}`
+              )
+            )}
+          />
+        </Route>
         <Route path=":projectId/settings/" component={errorHandler(ProjectSettings)}>
           <Redirect from="teams/" to="/settings/:orgId/projects/:projectId/teams/" />
           <Redirect from="alerts/" to="/settings/:orgId/projects/:projectId/alerts/" />
diff --git a/src/sentry/static/sentry/app/utils/redirect.jsx b/src/sentry/static/sentry/app/utils/redirect.jsx
new file mode 100644
index 0000000000..e42776a142
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/redirect.jsx
@@ -0,0 +1,23 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+// This is react-router v4 <Redirect to="path/" /> component to allow things
+// to be declarative.
+class Redirect extends React.Component {
+  static propTypes = {
+    router: PropTypes.shape({
+      replace: PropTypes.func.isRequired,
+    }).isRequired,
+    to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,
+  };
+
+  componentDidMount() {
+    this.props.router.replace(this.props.to);
+  }
+
+  render() {
+    return null;
+  }
+}
+
+export default Redirect;
diff --git a/src/sentry/static/sentry/app/views/projects/redirectDeprecatedProjectRoute.jsx b/src/sentry/static/sentry/app/views/projects/redirectDeprecatedProjectRoute.jsx
new file mode 100644
index 0000000000..2af8e685c6
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projects/redirectDeprecatedProjectRoute.jsx
@@ -0,0 +1,161 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import _ from 'lodash';
+
+import {t} from 'app/locale';
+import withApi from 'app/utils/withApi';
+import LoadingError from 'app/components/loadingError';
+import {analytics} from 'app/utils/analytics';
+import Alert from 'app/components/alert';
+import Redirect from 'app/utils/redirect';
+import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
+
+class ProjectDetailsInner extends React.Component {
+  static propTypes = {
+    api: PropTypes.object.isRequired,
+
+    orgId: PropTypes.string.isRequired,
+    projectSlug: PropTypes.string.isRequired,
+  };
+
+  state = {
+    loading: true,
+    error: null,
+    project: null,
+  };
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  fetchData = async () => {
+    this.setState({
+      loading: true,
+      error: null,
+    });
+
+    const {orgId, projectSlug} = this.props;
+
+    try {
+      const project = await this.props.api.requestPromise(
+        `/projects/${orgId}/${projectSlug}/`
+      );
+
+      this.setState({
+        loading: false,
+        error: null,
+        project,
+      });
+    } catch (error) {
+      this.setState({
+        loading: false,
+        error,
+        project: null,
+      });
+    }
+  };
+
+  getProjectId = () => {
+    return this.state.project?.id;
+  };
+
+  hasProjectId = () => {
+    const projectID = this.getProjectId(this.state.project);
+    return _.isString(projectID) && projectID.length > 0;
+  };
+
+  getOrganizationId = () => {
+    return this.state.project?.organization?.id;
+  };
+
+  render() {
+    const childrenProps = {
+      ...this.state,
+      projectId: this.getProjectId(),
+      hasProjectId: this.hasProjectId(),
+      organizationId: this.getOrganizationId(),
+    };
+
+    return this.props.children(childrenProps);
+  }
+}
+
+const ProjectDetails = withApi(ProjectDetailsInner);
+
+const redirectDeprecatedProjectRoute = generateRedirectRoute => {
+  class RedirectDeprecatedProjectRoute extends React.Component {
+    static propTypes = {
+      router: PropTypes.object.isRequired,
+
+      location: PropTypes.shape({
+        pathname: PropTypes.string.isRequired,
+        search: PropTypes.string.isRequired,
+      }).isRequired,
+
+      params: PropTypes.shape({
+        orgId: PropTypes.string.isRequired,
+        projectId: PropTypes.string.isRequired,
+      }).isRequired,
+
+      routes: PropTypes.arrayOf(PropTypes.object).isRequired,
+    };
+
+    trackRedirect = (organizationId, nextRoute) => {
+      const payload = {
+        feature: 'global_views',
+        url: getRouteStringFromRoutes(this.props.routes), // the URL being redirected from
+        org_id: parseInt(organizationId, 10),
+      };
+
+      // track redirects of deprecated URLs for analytics
+      analytics('deprecated_urls.redirect', payload);
+
+      return nextRoute;
+    };
+
+    render() {
+      const {orgId} = this.props.params;
+
+      return (
+        <ProjectDetails orgId={orgId} projectSlug={this.props.params.projectId}>
+          {({loading, error, hasProjectId, projectId, organizationId}) => {
+            if (loading) {
+              return null;
+            }
+
+            if (!hasProjectId) {
+              if (error?.status === 404) {
+                return (
+                  <Alert type="error">
+                    {t('The project you were looking for was not found.')}
+                  </Alert>
+                );
+              }
+
+              return <LoadingError onRetry={this.fetchData} />;
+            }
+
+            const routeProps = {
+              orgId,
+              projectId,
+              router: {
+                params: this.props.params,
+              },
+            };
+
+            return (
+              <Redirect
+                router={this.props.router}
+                to={this.trackRedirect(organizationId, generateRedirectRoute(routeProps))}
+              />
+            );
+          }}
+        </ProjectDetails>
+      );
+    }
+  }
+
+  return RedirectDeprecatedProjectRoute;
+};
+
+export default redirectDeprecatedProjectRoute;
