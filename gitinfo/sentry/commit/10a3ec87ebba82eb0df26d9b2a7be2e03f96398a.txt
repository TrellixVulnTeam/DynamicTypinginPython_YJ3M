commit 10a3ec87ebba82eb0df26d9b2a7be2e03f96398a
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Fri Nov 1 15:04:12 2019 -0400

    feat(discover2): Add initial metrics for Discover2 (Alberto's list) (#15373)

diff --git a/src/sentry/static/sentry/app/components/gridEditable/index.tsx b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
index c7e7d27924..48eaa65e90 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/index.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
@@ -34,6 +34,8 @@ import {
 } from './styles';
 
 type GridEditableProps<DataRow, ColumnKey> = {
+  onToggleEdit?: (nextValue: boolean) => void;
+
   gridHeadCellButtonProps?: {[prop: string]: any};
 
   isEditable?: boolean;
@@ -130,7 +132,13 @@ class GridEditable<
   }
 
   toggleEdit = () => {
-    this.setState({isEditing: !this.state.isEditing});
+    const nextValue = !this.state.isEditing;
+
+    if (this.props.onToggleEdit) {
+      this.props.onToggleEdit(nextValue);
+    }
+
+    this.setState({isEditing: nextValue});
   };
 
   openModalAddColumnAt = (insertIndex: number) => {
diff --git a/src/sentry/static/sentry/app/components/tagDistributionMeter/index.jsx b/src/sentry/static/sentry/app/components/tagDistributionMeter/index.jsx
index a3ddd031ff..3a945286ae 100644
--- a/src/sentry/static/sentry/app/components/tagDistributionMeter/index.jsx
+++ b/src/sentry/static/sentry/app/components/tagDistributionMeter/index.jsx
@@ -27,6 +27,7 @@ export default class TagDistributionMeter extends React.Component {
     renderEmpty: PropTypes.func,
     renderLoading: PropTypes.func,
     renderError: PropTypes.func,
+    onTagClick: PropTypes.func,
   };
 
   static defaultProps = {
@@ -38,7 +39,7 @@ export default class TagDistributionMeter extends React.Component {
   };
 
   renderSegments() {
-    const {segments, totalValues} = this.props;
+    const {segments, totalValues, onTagClick, title} = this.props;
 
     const totalVisible = segments.reduce((sum, value) => sum + value.count, 0);
     const hasOther = totalVisible < totalValues;
@@ -72,6 +73,11 @@ export default class TagDistributionMeter extends React.Component {
                   to={value.isOther ? null : value.url}
                   index={index}
                   isOther={!!value.isOther}
+                  onClick={() => {
+                    if (onTagClick) {
+                      onTagClick(title, value);
+                    }
+                  }}
                 >
                   <Description first={index === 0}>
                     <Percentage>{pctLabel}%</Percentage>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventModalContent.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventModalContent.tsx
index 7a39fc5197..7bb5f00d11 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventModalContent.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventModalContent.tsx
@@ -1,6 +1,7 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
+import {Location} from 'history';
 
 import SentryTypes from 'app/sentryTypes';
 import DateTime from 'app/components/dateTime';
@@ -11,7 +12,7 @@ import space from 'app/styles/space';
 import getDynamicText from 'app/utils/getDynamicText';
 import {getMessage, getTitle} from 'app/utils/events';
 import {Event, Organization} from 'app/types';
-import {Location} from 'history';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
 
 import EventInterfaces from './eventInterfaces';
 import LinkedIssuePreview from './linkedIssuePreview';
@@ -34,57 +35,75 @@ type EventModalContentProps = {
  * Render the columns and navigation elements inside the event modal view.
  * Controlled by the EventDetails View.
  */
-const EventModalContent = (props: EventModalContentProps) => {
-  const {event, projectId, organization, location, eventView} = props;
-
-  // Having an aggregate field means we want to show pagination/graphs
-  const isGroupedView = hasAggregateField(eventView);
-  const eventJsonUrl = `/api/0/projects/${organization.slug}/${projectId}/events/${
-    event.eventID
-  }/json/`;
+class EventModalContent extends React.Component<EventModalContentProps> {
+  static propTypes = {
+    event: SentryTypes.Event.isRequired,
+    projectId: PropTypes.string.isRequired,
+    organization: SentryTypes.Organization.isRequired,
+    location: PropTypes.object.isRequired,
+  };
+
+  componentDidMount() {
+    const {event, organization} = this.props;
+    // metrics
+    trackAnalyticsEvent({
+      eventKey: 'discover_v2.event_details',
+      eventName: 'Discoverv2: Opened Event Details',
+      event_type: event.type,
+      organization_id: organization.id,
+    });
+  }
 
-  return (
-    <ColumnGrid>
-      <HeaderBox>
-        <EventHeader event={event} />
-        {isGroupedView && <ModalPagination event={event} location={location} />}
-        {isGroupedView &&
-          getDynamicText({
-            value: (
-              <ModalLineGraph
-                organization={organization}
-                currentEvent={event}
-                location={location}
-                eventView={eventView}
-              />
-            ),
-            fixed: 'events chart',
-          })}
-      </HeaderBox>
-      <ContentColumn>
-        <EventInterfaces event={event} projectId={projectId} />
-      </ContentColumn>
-      <SidebarColumn>
-        {event.groupID && (
-          <LinkedIssuePreview groupId={event.groupID} eventId={event.eventID} />
-        )}
-        {event.type === 'transaction' && (
-          <RelatedEvents organization={organization} event={event} location={location} />
-        )}
-        <EventMetadata event={event} eventJsonUrl={eventJsonUrl} />
-        <SidebarBlock>
-          <TagsTable tags={event.tags} />
-        </SidebarBlock>
-      </SidebarColumn>
-    </ColumnGrid>
-  );
-};
-EventModalContent.propTypes = {
-  event: SentryTypes.Event.isRequired,
-  projectId: PropTypes.string.isRequired,
-  organization: SentryTypes.Organization.isRequired,
-  location: PropTypes.object.isRequired,
-};
+  render() {
+    const {event, projectId, organization, location, eventView} = this.props;
+
+    // Having an aggregate field means we want to show pagination/graphs
+    const isGroupedView = hasAggregateField(eventView);
+    const eventJsonUrl = `/api/0/projects/${organization.slug}/${projectId}/events/${
+      event.eventID
+    }/json/`;
+
+    return (
+      <ColumnGrid>
+        <HeaderBox>
+          <EventHeader event={event} />
+          {isGroupedView && <ModalPagination event={event} location={location} />}
+          {isGroupedView &&
+            getDynamicText({
+              value: (
+                <ModalLineGraph
+                  organization={organization}
+                  currentEvent={event}
+                  location={location}
+                  eventView={eventView}
+                />
+              ),
+              fixed: 'events chart',
+            })}
+        </HeaderBox>
+        <ContentColumn>
+          <EventInterfaces event={event} projectId={projectId} />
+        </ContentColumn>
+        <SidebarColumn>
+          {event.groupID && (
+            <LinkedIssuePreview groupId={event.groupID} eventId={event.eventID} />
+          )}
+          {event.type === 'transaction' && (
+            <RelatedEvents
+              organization={organization}
+              event={event}
+              location={location}
+            />
+          )}
+          <EventMetadata event={event} eventJsonUrl={eventJsonUrl} />
+          <SidebarBlock>
+            <TagsTable tags={event.tags} />
+          </SidebarBlock>
+        </SidebarColumn>
+      </ColumnGrid>
+    );
+  }
+}
 
 /**
  * Render the header of the modal content
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
index 5f952c66b1..ee8c9dff87 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
@@ -2,6 +2,7 @@ import React, {ReactText} from 'react';
 import styled from 'react-emotion';
 import {uniq} from 'lodash';
 
+import {trackAnalyticsEvent} from 'app/utils/analytics';
 import {t} from 'app/locale';
 import {Form, SelectField, TextField} from 'app/components/forms';
 import InlineSvg from 'app/components/inlineSvg';
@@ -89,6 +90,36 @@ class TableModalEditColumnBodyForm extends React.Component<
     name: this.props.column ? this.props.column.name : '',
   };
 
+  componentDidMount() {
+    const {column, indexColumnOrder, organization} = this.props;
+
+    const isEditing = !!column;
+    const focusedColumnIndex =
+      typeof indexColumnOrder === 'number' && indexColumnOrder >= 0
+        ? indexColumnOrder
+        : -1;
+
+    if (isEditing) {
+      if (typeof indexColumnOrder === 'number') {
+        // metrics
+        trackAnalyticsEvent({
+          eventKey: 'discover_v2.edit_column.open_modal',
+          eventName: 'Discoverv2: Opened modal to edit a column',
+          index: focusedColumnIndex,
+          organization_id: organization.id,
+        });
+      }
+    } else {
+      // metrics
+      trackAnalyticsEvent({
+        eventKey: 'discover_v2.add_column.open_modal',
+        eventName: 'Discoverv2: Opened modal to add a column',
+        index: focusedColumnIndex,
+        organization_id: organization.id,
+      });
+    }
+  }
+
   onChangeAggregation = (value: Aggregation) => {
     const {organization, tagKeys} = this.props;
     this.setState({
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
index 715dddbedc..8150b4416d 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
@@ -2,10 +2,15 @@ import React from 'react';
 import {Location} from 'history';
 
 import {Organization} from 'app/types';
-
+import {trackAnalyticsEvent} from 'app/utils/analytics';
 import GridEditable from 'app/components/gridEditable';
 
-import {getFieldRenderer, getAggregateAlias, pushEventViewToLocation} from '../utils';
+import {
+  getFieldRenderer,
+  getAggregateAlias,
+  pushEventViewToLocation,
+  explodeField,
+} from '../utils';
 import EventView, {pickRelevantLocationQueryStrings} from '../eventView';
 import SortLink from '../sortLink';
 import renderTableModalEditColumnFactory from './tableModalEditColumn';
@@ -49,26 +54,44 @@ class TableView extends React.Component<TableViewProps> {
     nextColumn: TableColumn<keyof TableDataRow>,
     insertAt: number | undefined
   ) => {
-    const {location, eventView} = this.props;
+    const {location, eventView, organization} = this.props;
 
     let nextEventView: EventView;
 
     if (typeof insertAt === 'number') {
+      const payload = {
+        aggregation: String(nextColumn.aggregation),
+        field: String(nextColumn.field),
+        fieldname: nextColumn.name,
+      };
+
       // create and insert a column at a specific index
-      nextEventView = eventView.withNewColumnAt(
-        {
-          aggregation: String(nextColumn.aggregation),
-          field: String(nextColumn.field),
-          fieldname: nextColumn.name,
-        },
-        insertAt
-      );
+      nextEventView = eventView.withNewColumnAt(payload, insertAt);
+
+      // metrics
+      trackAnalyticsEvent({
+        eventKey: 'discover_v2.add_column',
+        eventName: 'Discoverv2: Add a new column at an index',
+        insert_at_index: insertAt,
+        organization_id: organization.id,
+        ...payload,
+      });
     } else {
-      // create and insert a column at the right end of the table
-      nextEventView = eventView.withNewColumn({
+      const payload = {
         aggregation: String(nextColumn.aggregation),
         field: String(nextColumn.field),
         fieldname: nextColumn.name,
+      };
+
+      // create and insert a column at the right end of the table
+      nextEventView = eventView.withNewColumn(payload);
+
+      // metrics
+      trackAnalyticsEvent({
+        eventKey: 'discover_v2.add_column.right_end',
+        eventName: 'Discoverv2: Add a new column at the right end of the table',
+        organization_id: organization.id,
+        ...payload,
       });
     }
 
@@ -83,22 +106,57 @@ class TableView extends React.Component<TableViewProps> {
    * Please read the comment on `_createColumn`
    */
   _updateColumn = (columnIndex: number, nextColumn: TableColumn<keyof TableDataRow>) => {
-    const {location, eventView, tableData} = this.props;
+    const {location, eventView, tableData, organization} = this.props;
 
     if (!tableData || !tableData.meta) {
       return;
     }
 
+    const payload = {
+      aggregation: String(nextColumn.aggregation),
+      field: String(nextColumn.field),
+      fieldname: nextColumn.name,
+    };
+
     const nextEventView = eventView.withUpdatedColumn(
       columnIndex,
-      {
-        aggregation: String(nextColumn.aggregation),
-        field: String(nextColumn.field),
-        fieldname: nextColumn.name,
-      },
+      payload,
       tableData.meta
     );
 
+    if (nextEventView !== eventView) {
+      const changed: string[] = [];
+
+      const prevField = explodeField(eventView.fields[columnIndex]);
+      const nextField = explodeField(nextEventView.fields[columnIndex]);
+
+      const aggregationChanged = prevField.aggregation !== nextField.aggregation;
+      const fieldChanged = prevField.field !== nextField.field;
+      const fieldnameChanged = prevField.fieldname !== nextField.fieldname;
+
+      if (aggregationChanged) {
+        changed.push('aggregate');
+      }
+
+      if (fieldChanged) {
+        changed.push('field');
+      }
+
+      if (fieldnameChanged) {
+        changed.push('fieldname');
+      }
+
+      // metrics
+      trackAnalyticsEvent({
+        eventKey: 'discover_v2.update_column',
+        eventName: 'Discoverv2: A column was updated',
+        updated_at_index: columnIndex,
+        changed,
+        organization_id: organization.id,
+        ...payload,
+      });
+    }
+
     pushEventViewToLocation({
       location,
       nextEventView,
@@ -110,14 +168,27 @@ class TableView extends React.Component<TableViewProps> {
    * Please read the comment on `_createColumn`
    */
   _deleteColumn = (columnIndex: number) => {
-    const {location, eventView, tableData} = this.props;
+    const {location, eventView, tableData, organization} = this.props;
 
     if (!tableData || !tableData.meta) {
       return;
     }
 
+    const prevField = explodeField(eventView.fields[columnIndex]);
+
     const nextEventView = eventView.withDeletedColumn(columnIndex, tableData.meta);
 
+    // metrics
+    trackAnalyticsEvent({
+      eventKey: 'discover_v2.delete_column',
+      eventName: 'Discoverv2: A column was deleted',
+      deleted_at_index: columnIndex,
+      organization_id: organization.id,
+      aggregation: prevField.aggregation,
+      field: prevField.field,
+      fieldname: prevField.fieldname,
+    });
+
     pushEventViewToLocation({
       location,
       nextEventView,
@@ -129,10 +200,23 @@ class TableView extends React.Component<TableViewProps> {
    * Please read the comment on `_createColumn`
    */
   _moveColumnCommit = (fromIndex: number, toIndex: number) => {
-    const {location, eventView} = this.props;
+    const {location, eventView, organization} = this.props;
 
+    const prevField = explodeField(eventView.fields[fromIndex]);
     const nextEventView = eventView.withMovedColumn({fromIndex, toIndex});
 
+    // metrics
+    trackAnalyticsEvent({
+      eventKey: 'discover_v2.move_column',
+      eventName: 'Discoverv2: A column was moved',
+      from_index: fromIndex,
+      to_index: toIndex,
+      organization_id: organization.id,
+      aggregation: prevField.aggregation,
+      field: prevField.field,
+      fieldname: prevField.fieldname,
+    });
+
     pushEventViewToLocation({
       location,
       nextEventView,
@@ -236,6 +320,26 @@ class TableView extends React.Component<TableViewProps> {
     return nextColumnOrder;
   };
 
+  onToggleEdit = (isEditing: boolean) => {
+    const {organization} = this.props;
+
+    if (isEditing) {
+      // metrics
+      trackAnalyticsEvent({
+        eventKey: 'discover_v2.table.column_header.edit_mode.enter',
+        eventName: 'Discoverv2: Enter column header edit mode',
+        organization_id: organization.id,
+      });
+    } else {
+      // metrics
+      trackAnalyticsEvent({
+        eventKey: 'discover_v2.table.column_header.edit_mode.exit',
+        eventName: 'Discoverv2: Exit column header edit mode',
+        organization_id: organization.id,
+      });
+    }
+  };
+
   render() {
     const {organization, isLoading, error, tableData, tagKeys, eventView} = this.props;
 
@@ -272,6 +376,7 @@ class TableView extends React.Component<TableViewProps> {
           return (
             <GridEditable
               isEditable
+              onToggleEdit={this.onToggleEdit}
               isColumnDragging={isColumnDragging}
               gridHeadCellButtonProps={{className: DRAGGABLE_COLUMN_CLASSNAME_IDENTIFIER}}
               isLoading={isLoading}
diff --git a/src/sentry/static/sentry/app/views/eventsV2/tags.tsx b/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
index 4e8f0b3783..120b7bc9ad 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
@@ -12,6 +12,7 @@ import Placeholder from 'app/components/placeholder';
 import TagDistributionMeter from 'app/components/tagDistributionMeter';
 import withApi from 'app/utils/withApi';
 import {Organization} from 'app/types';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
 
 import {
   fetchTagDistribution,
@@ -101,6 +102,18 @@ class Tags extends React.Component<Props, State> {
     }
   };
 
+  onTagClick = (tag: string, segment: TagTopValue) => {
+    const {organization} = this.props;
+    // metrics
+    trackAnalyticsEvent({
+      eventKey: 'discover_v2.facet_map.clicked',
+      eventName: 'Discoverv2: Clicked on a tag on the facet map',
+      tag,
+      value: segment.value,
+      organization_id: organization.id,
+    });
+  };
+
   renderTag(tag) {
     const {location} = this.props;
     const {tags, totalValues} = this.state;
@@ -124,6 +137,7 @@ class Tags extends React.Component<Props, State> {
         totalValues={totalValues}
         isLoading={isLoading}
         renderLoading={() => <StyledPlaceholder height="16px" />}
+        onTagClick={this.onTagClick}
       />
     );
   }
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 472c5e3736..23e18a6396 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -35,6 +35,22 @@ export type EventQuery = {
 const AGGREGATE_PATTERN = /^([^\(]+)\(([a-z\._+]*)\)$/;
 const ROUND_BRACKETS_PATTERN = /[\(\)]/;
 
+export function explodeField(
+  field: FieldType
+): {aggregation: string; field: string; fieldname: string} {
+  const results = field.field.match(AGGREGATE_PATTERN);
+
+  if (!results) {
+    return {aggregation: '', field: field.field, fieldname: field.title};
+  }
+
+  if (results.length >= 3) {
+    return {aggregation: results[1], field: results[2], fieldname: field.title};
+  }
+
+  return {aggregation: '', field: field.field, fieldname: field.title};
+}
+
 /**
  * Takes a view and determines if there are any aggregate fields in it.
  *
@@ -85,6 +101,7 @@ export function getEventTagSearchUrl(
 }
 
 export type TagTopValue = {
+  name: string;
   url: {
     pathname: string;
     query: any;
