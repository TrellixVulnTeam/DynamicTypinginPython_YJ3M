commit fb7a26a1f197212ac4697247756d7f577cc3058c
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Dec 15 16:24:22 2015 -0800

    Add some more docs

diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index 04c011a9bd..0f2cc53b86 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -11,7 +11,7 @@ import logging
 from itertools import ifilter
 from types import NoneType
 from django.conf import settings
-from .types import InvalidTypeError, type_from_value, Any
+from .types import type_from_value, Any
 
 # Prevent outselves from clobbering the builtin
 _type = type
@@ -217,9 +217,7 @@ class OptionsManager(object):
     def validate_option(self, key, value):
         opt = self.lookup_key(key)
         assert not (opt.flags & FLAG_STOREONLY), '%r is not allowed to be loaded from config' % key
-        try:
-            opt.type(value)
-        except InvalidTypeError:
+        if not opt.type.test(value):
             raise TypeError('%r: got %r, expected %r' % (key, _type(value), opt.type))
 
     def all(self):
diff --git a/src/sentry/options/types.py b/src/sentry/options/types.py
index 103a0c3ec7..ab2e93382e 100644
--- a/src/sentry/options/types.py
+++ b/src/sentry/options/types.py
@@ -24,8 +24,11 @@ class InvalidTypeError(TypeError):
 class OptionType(object):
     "Base OptionType that provides type coersion"
     name = ''
+    # Default value to be returned when initializing
     default = None
+    # Types that do not need to be coerced
     expected_types = (object,)
+    # Types that are acceptable for coersion
     compatible_types = (basestring,)
 
     def __call__(self, value=None):
@@ -48,6 +51,7 @@ class OptionType(object):
         return self.default
 
     def test(self, value):
+        "Check if the value needs to be coerced or not"
         return isinstance(value, self.expected_types)
 
     def __repr__(self):
