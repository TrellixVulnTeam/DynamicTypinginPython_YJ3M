commit 3613ecabbba86c45cf050b0eb7bb709e82c5714c
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Fri Jan 10 14:20:01 2020 -0800

    feat(drf): Add CamelSnakeSerializer (#16397)

diff --git a/src/sentry/api/serializers/rest_framework/base.py b/src/sentry/api/serializers/rest_framework/base.py
index a084764dec..43b57a9035 100644
--- a/src/sentry/api/serializers/rest_framework/base.py
+++ b/src/sentry/api/serializers/rest_framework/base.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 import six
 from django.utils.text import re_camel_case
 from rest_framework.fields import empty
-from rest_framework.serializers import ModelSerializer
+from rest_framework.serializers import ModelSerializer, Serializer
 
 
 def camel_to_snake_case(value):
@@ -37,6 +37,24 @@ def convert_dict_key_case(obj, converter):
     return obj
 
 
+class CamelSnakeSerializer(Serializer):
+    """
+    Allows parameters to be defined in snake case, but passed as camel case.
+
+    Errors are output in camel case.
+    """
+
+    def __init__(self, instance=None, data=empty, **kwargs):
+        if data is not empty:
+            data = convert_dict_key_case(data, camel_to_snake_case)
+        return super(CamelSnakeSerializer, self).__init__(instance=instance, data=data, **kwargs)
+
+    @property
+    def errors(self):
+        errors = super(CamelSnakeSerializer, self).errors
+        return convert_dict_key_case(errors, snake_to_camel_case)
+
+
 class CamelSnakeModelSerializer(ModelSerializer):
     """
     Allows parameters to be defined in snake case, but passed as camel case.
@@ -53,6 +71,5 @@ class CamelSnakeModelSerializer(ModelSerializer):
 
     @property
     def errors(self):
-        return convert_dict_key_case(
-            super(CamelSnakeModelSerializer, self).errors, snake_to_camel_case
-        )
+        errors = super(CamelSnakeModelSerializer, self).errors
+        return convert_dict_key_case(errors, snake_to_camel_case)
diff --git a/tests/sentry/api/serializers/rest_framework/test_base.py b/tests/sentry/api/serializers/rest_framework/test_base.py
index 6d0a891d43..9ceb09b282 100644
--- a/tests/sentry/api/serializers/rest_framework/test_base.py
+++ b/tests/sentry/api/serializers/rest_framework/test_base.py
@@ -2,8 +2,32 @@ from __future__ import absolute_import
 
 from django.contrib.contenttypes.models import ContentType
 from django.test import TestCase
+from rest_framework import serializers
 
-from sentry.api.serializers.rest_framework.base import CamelSnakeModelSerializer
+from sentry.api.serializers.rest_framework.base import (
+    CamelSnakeSerializer,
+    CamelSnakeModelSerializer,
+)
+
+
+class PersonSerializer(CamelSnakeSerializer):
+    name = serializers.CharField()
+    works_at = serializers.CharField()
+
+
+class CamelSnakeSerializerTest(TestCase):
+    def test_simple(self):
+        serializer = PersonSerializer(data={"name": "Rick", "worksAt": "Sentry"})
+        assert serializer.is_valid()
+        assert serializer.data == {"name": u"Rick", "works_at": u"Sentry"}
+
+    def test_error(self):
+        serializer = PersonSerializer(data={"worksAt": None})
+        assert not serializer.is_valid()
+        assert serializer.errors == {
+            "worksAt": [u"This field may not be null."],
+            "name": [u"This field is required."],
+        }
 
 
 class ContentTypeSerializer(CamelSnakeModelSerializer):
