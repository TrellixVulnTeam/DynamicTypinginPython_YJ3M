commit 60340adf5c1bbd9dca351edf2c8c84fd546726af
Author: evanh <evanh@users.noreply.github.com>
Date:   Wed Apr 1 11:36:15 2020 -0400

    fix(discover) Fix negative user searches (#18002)
    
    When someone searched for !user:something, that would cause too many layers of
    nesting in the snuba query so the schema would reject it.
    
    Change the behaviour to return the opposite of user:something, namely exclude
    any users with any fields that are equal to something.

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 1f39b98183..c0a7dbff1e 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -854,12 +854,14 @@ def get_filter(query=None, params=None):
                         )
             elif name == USER_ALIAS:
                 # If the key is user, do an OR across all the different possible user fields
-                kwargs["conditions"].append(
-                    [
-                        convert_search_filter_to_snuba_query(term, key=field)
-                        for field in FIELD_ALIASES[USER_ALIAS]["fields"]
-                    ]
-                )
+                user_conditions = [
+                    convert_search_filter_to_snuba_query(term, key=field)
+                    for field in FIELD_ALIASES[USER_ALIAS]["fields"]
+                ]
+                if term.operator == "!=" and term.value.value != "":
+                    kwargs["conditions"].extend(user_conditions)
+                else:
+                    kwargs["conditions"].append(user_conditions)
             elif name in FIELD_ALIASES and name != PROJECT_ALIAS:
                 converted_filter = convert_aggregate_filter_to_snuba_query(term, True)
                 if converted_filter:
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 1ec4784bd6..167fe349f6 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -1213,6 +1213,17 @@ class GetSnubaQueryArgsTest(TestCase):
         assert ["user.email", "=", "123"] in conditions[0]
         assert ["user.ip", "=", "123"] in conditions[0]
 
+    def test_general_negative_user_field(self):
+        conditions = get_filter("!user:123").conditions
+        assert len(conditions) == 4
+        assert [[["isNull", ["user.id"]], "=", 1], ["user.id", "!=", "123"]] == conditions[0]
+        assert [
+            [["isNull", ["user.username"]], "=", 1],
+            ["user.username", "!=", "123"],
+        ] == conditions[1]
+        assert [[["isNull", ["user.email"]], "=", 1], ["user.email", "!=", "123"]] == conditions[2]
+        assert [[["isNull", ["user.ip"]], "=", 1], ["user.ip", "!=", "123"]] == conditions[3]
+
     def test_function_with_default_arguments(self):
         result = get_filter("rpm():>100", {"start": before_now(minutes=5), "end": before_now()})
         assert result.having == [["rpm", ">", 100]]
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index a22bb81ae8..0c1909cd87 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -359,6 +359,48 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
                 assert len(response.data["data"]) == 1
                 assert response.data["data"][0]["user.ip"] == data["user"]["ip_address"]
 
+    def test_negative_user_search(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        user_data = {"email": "foo@example.com", "id": "123", "username": "foo"}
+
+        # Load events with data that shouldn't match
+        for key in user_data:
+            data = load_data("transaction")
+            data["transaction"] = "/transactions/{}".format(key)
+            data["timestamp"] = iso_format(before_now(minutes=1))
+            data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=5))
+            event_data = user_data.copy()
+            event_data[key] = "undefined"
+            data["user"] = event_data
+            self.store_event(data, project_id=project.id)
+
+        # Load a matching event
+        data = load_data("transaction")
+        data["transaction"] = "/transactions/matching"
+        data["timestamp"] = iso_format(before_now(minutes=1))
+        data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=5))
+        data["user"] = user_data
+        self.store_event(data, project_id=project.id)
+
+        with self.feature(
+            {"organizations:discover-basic": True, "organizations:global-views": True}
+        ):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "field": ["project", "user"],
+                    "query": "!user:undefined",
+                    "statsPeriod": "14d",
+                },
+            )
+
+            assert response.status_code == 200, response.content
+            assert len(response.data["data"]) == 1
+            assert response.data["data"][0]["user.email"] == user_data["email"]
+
     def test_not_project_in_query(self):
         self.login_as(user=self.user)
         project1 = self.create_project()
