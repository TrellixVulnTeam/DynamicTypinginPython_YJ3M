commit 4a76699875c83745deec18c8eb837e5496f8c11a
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jan 14 14:48:38 2013 -0800

    Add more support to origins checking (dont require domain whitelisting, allow path matches)

diff --git a/src/sentry/utils/http.py b/src/sentry/utils/http.py
index b02b5358d6..451d6e17d2 100644
--- a/src/sentry/utils/http.py
+++ b/src/sentry/utils/http.py
@@ -50,6 +50,7 @@ def is_same_domain(url1, url2):
 
 
 def get_origins(project=None):
+    # TODO: we should cache this
     if settings.ALLOW_ORIGIN == '*':
         return frozenset(['*'])
     elif settings.ALLOW_ORIGIN:
@@ -60,9 +61,11 @@ def get_origins(project=None):
     if project:
         optval = get_option('sentry:origins', project)
         if optval:
-            result.extend(map(lambda x: x.lower(), optval))
+            result.extend(optval)
 
-    return frozenset(filter(bool, result))
+    # lowercase and strip the trailing slash from all origin values
+    # filter out empty values
+    return frozenset(filter(bool, map(lambda x: x.lower().rstrip('/'), result)))
 
 
 def is_valid_origin(origin, project=None):
@@ -77,6 +80,9 @@ def is_valid_origin(origin, project=None):
     - *.domain.com: matches domain.com and all subdomains, on any port
     - domain.com: matches domain.com on any port
     """
+    # we always run a case insensitive check
+    origin = origin.lower()
+
     allowed = get_origins(project)
     if '*' in allowed:
         return True
@@ -97,6 +103,9 @@ def is_valid_origin(origin, project=None):
 
     for valid in allowed:
         if '://' in valid:
+            # Support partial uri matches that may include path
+            if origin.startswith(valid):
+                return True
             continue
 
         if valid.startswith('*.'):
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index 59cef70276..208704b10e 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -100,10 +100,18 @@ class IsValidOriginTestCase(TestCase):
         result = self.isValidOrigin('http://foo.com', ['*.example.com'])
         self.assertEquals(result, False)
 
+    def test_domain_wildcard_matches_domain_with_path(self):
+        result = self.isValidOrigin('http://foo.example.com/foo/bar', ['*.example.com'])
+        self.assertEquals(result, True)
+
     def test_base_domain_matches_domain(self):
         result = self.isValidOrigin('http://example.com', ['example.com'])
         self.assertEquals(result, True)
 
+    def test_base_domain_matches_domain_with_path(self):
+        result = self.isValidOrigin('http://example.com/foo/bar', ['example.com'])
+        self.assertEquals(result, True)
+
     def test_base_domain_matches_domain_with_port(self):
         result = self.isValidOrigin('http://example.com:80', ['example.com'])
         self.assertEquals(result, True)
@@ -120,9 +128,13 @@ class IsValidOriginTestCase(TestCase):
         result = self.isValidOrigin('https://example.com', ['http://example.com'])
         self.assertEquals(result, False)
 
-    def test_full_uri_match_requires_port(self):
+    def test_full_uri_match_does_not_require_port(self):
         result = self.isValidOrigin('http://example.com:80', ['http://example.com'])
-        self.assertEquals(result, False)
+        self.assertEquals(result, True)
+
+    def test_partial_uri_match(self):
+        result = self.isValidOrigin('http://example.com/foo/bar', ['http://example.com'])
+        self.assertEquals(result, True)
 
     def test_null_valid_with_global(self):
         result = self.isValidOrigin('null', ['*'])
