commit 0cbd347eedfb4ee8f2ddad316949a5d23770ec4b
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Dec 3 18:16:47 2014 -0800

    Add OrganizationMemberType.OWNER

diff --git a/src/sentry/migrations/0133_add_org_members.py b/src/sentry/migrations/0133_add_org_members.py
index 1e5e723900..c85c94da4d 100644
--- a/src/sentry/migrations/0133_add_org_members.py
+++ b/src/sentry/migrations/0133_add_org_members.py
@@ -19,7 +19,7 @@ class Migration(DataMigration):
             OrganizationMember.objects.get_or_create(
                 organization=team.organization,
                 user=team.owner,
-                defaults={'type': 0},  # ADMIN
+                defaults={'type': 0},  # OWNER
             )
             existing.add(team.owner_id)
 
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index 7ae5342368..358672c41a 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -22,7 +22,8 @@ from sentry.utils.http import absolute_uri
 
 # TODO(dcramer): pull in enum library
 class OrganizationMemberType(object):
-    ADMIN = 0
+    OWNER = 0
+    ADMIN = 25
     MEMBER = 50
     BOT = 100
 
@@ -42,9 +43,10 @@ class OrganizationMember(Model):
     email = models.EmailField(null=True, blank=True)
 
     type = BoundedPositiveIntegerField(choices=(
+        (OrganizationMemberType.BOT, _('Bot')),
         (OrganizationMemberType.MEMBER, _('Member')),
         (OrganizationMemberType.ADMIN, _('Admin')),
-        (OrganizationMemberType.BOT, _('Bot')),
+        (OrganizationMemberType.OWNER, _('Owner')),
     ), default=OrganizationMemberType.MEMBER)
     date_added = models.DateTimeField(default=timezone.now)
     has_global_access = models.BooleanField(default=True)
diff --git a/src/sentry/receivers/core.py b/src/sentry/receivers/core.py
index 15f3e89094..637ede944d 100644
--- a/src/sentry/receivers/core.py
+++ b/src/sentry/receivers/core.py
@@ -141,7 +141,7 @@ def create_org_member_for_owner(instance, created, **kwargs):
 
     instance.member_set.get_or_create(
         user=instance.owner,
-        type=OrganizationMemberType.ADMIN,
+        type=OrganizationMemberType.OWNER,
         has_global_access=True,
     )
 
diff --git a/src/sentry/web/frontend/organization_member_settings.py b/src/sentry/web/frontend/organization_member_settings.py
index c5110c6b5a..1f3445bd55 100644
--- a/src/sentry/web/frontend/organization_member_settings.py
+++ b/src/sentry/web/frontend/organization_member_settings.py
@@ -12,12 +12,15 @@ from sentry.models import (
 )
 from sentry.web.frontend.base import OrganizationView
 
+MEMBERSHIP_CHOICES = (
+    (OrganizationMemberType.MEMBER, _('Member')),
+    (OrganizationMemberType.ADMIN, _('Admin')),
+    (OrganizationMemberType.OWNER, _('Owner')),
+)
+
 
 class EditOrganizationMemberForm(forms.ModelForm):
-    type = forms.TypedChoiceField(label=_('Membership Type'), choices=(
-        (OrganizationMemberType.MEMBER, _('Member')),
-        (OrganizationMemberType.ADMIN, _('Admin')),
-    ), coerce=int)
+    type = forms.TypedChoiceField(label=_('Membership Type'), choices=(), coerce=int)
     has_global_access = forms.BooleanField(
         label=_('This member should have access to all teams within the organization.'),
         required=False,
@@ -32,15 +35,19 @@ class EditOrganizationMemberForm(forms.ModelForm):
         fields = ('type', 'has_global_access', 'teams')
         model = OrganizationMember
 
-    def __init__(self, *args, **kwargs):
+    def __init__(self, authorizing_access, *args, **kwargs):
         super(EditOrganizationMemberForm, self).__init__(*args, **kwargs)
 
+        self.fields['type'].choices = [
+            m for m in MEMBERSHIP_CHOICES
+            if m[0] >= authorizing_access
+        ]
+
         self.fields['teams'].queryset = Team.objects.filter(
             organization=self.instance.organization,
         )
 
     def save(self, *args, **kwargs):
-        print self.cleaned_data
         if self.cleaned_data['has_global_access']:
             self.cleaned_data['teams'] = []
         return super(EditOrganizationMemberForm, self).save(*args, **kwargs)
@@ -55,7 +62,14 @@ class OrganizationMemberSettingsView(OrganizationView):
             'has_global_access': True,
         }
 
+        if request.user.is_superuser:
+            authorizing_access = OrganizationMemberType.OWNER
+        else:
+            membership = OrganizationMember.objects.get(user=request.user)
+            authorizing_access = membership.type
+
         return EditOrganizationMemberForm(
+            authorizing_access=authorizing_access,
             data=request.POST or None,
             instance=member,
             initial=initial,
diff --git a/tests/sentry/web/frontend/test_organization_member_settings.py b/tests/sentry/web/frontend/test_organization_member_settings.py
index 7b8bc44339..b8ab450a14 100644
--- a/tests/sentry/web/frontend/test_organization_member_settings.py
+++ b/tests/sentry/web/frontend/test_organization_member_settings.py
@@ -155,3 +155,39 @@ class OrganizationMemberSettingsTest(TestCase):
         assert len(mail.outbox) == 1
         assert mail.outbox[0].to == ['bar@example.com']
         assert mail.outbox[0].subject == 'Invite to join organization: foo'
+
+    def test_ensure_admin_cant_set_owner(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+
+        admin = self.create_user('bar@example.com', is_superuser=False)
+        user = self.create_user('baz@example.com')
+
+        OrganizationMember.objects.create(
+            organization=organization,
+            user=admin,
+            type=OrganizationMemberType.ADMIN,
+            has_global_access=True,
+        )
+
+        member = OrganizationMember.objects.create(
+            organization=organization,
+            user=user,
+        )
+
+        path = reverse('sentry-organization-member-settings',
+                       args=[organization.id, member.id])
+
+        self.login_as(admin)
+
+        resp = self.client.post(path, {
+            'type': OrganizationMemberType.OWNER,
+        })
+
+        assert resp.status_code == 200
+        assert resp.context['form'].errors['type']
+
+        resp = self.client.post(path, {
+            'type': OrganizationMemberType.MEMBER,
+        })
+
+        assert resp.status_code == 302
