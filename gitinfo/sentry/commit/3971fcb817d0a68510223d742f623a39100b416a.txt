commit 3971fcb817d0a68510223d742f623a39100b416a
Author: James Cunningham <cunninghamjt09@gmail.com>
Date:   Thu Jun 23 13:59:41 2016 -0700

    Give an ability to set global logging levels and decorate a few commands with it. (#3566)
    
    * First pass at making a global logging level.
    
    * Cannot believe this actually works.
    
    * Make it a commandline env var.
    
    * Add iteration.
    
    * Set a default log level and remove some duplicated loggers.
    
    * Add ability to set default log level with decorator.
    
    * Hey actually use decorators correctly.
    
    * OHOHOHOHVERHAULLLlll.
    
    * Add log_level_option to devserver.
    
    * Update comment.

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index ee33e2acdb..6e39212359 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -510,7 +510,16 @@ CELERYBEAT_SCHEDULE = {
     },
 }
 
+# Sentry logs to two major places: stdout, and it's internal project.
+# To disable logging to the internal project, add a logger who's only
+# handler is 'console' and disable propagating upwards.
+# Additionally, Sentry has the ability to override logger levels by
+# providing the cli with -l/--loglevel or the SENTRY_LOG_LEVEL env var.
+# The loggers that it overrides are root and any in LOGGING.overridable.
+# Be very careful with this in a production system, because the celery
+# logger can be extremely verbose when given INFO or DEBUG.
 LOGGING = {
+    'default_level': 'INFO',
     'version': 1,
     'disable_existing_loggers': True,
     'handlers': {
@@ -518,18 +527,13 @@ LOGGING = {
             'class': 'django.utils.log.NullHandler',
         },
         'console': {
-            'level': 'INFO',
             'class': 'sentry.logging.handlers.StructLogHandler',
         },
-        'sentry': {
+        'internal': {
             'level': 'ERROR',
             'filters': ['sentry:internal'],
             'class': 'raven.contrib.django.handlers.SentryHandler',
         },
-        'audit': {
-            'level': 'INFO',
-            'class': 'sentry.logging.handlers.StructLogHandler',
-        },
     },
     'filters': {
         'sentry:internal': {
@@ -537,24 +541,15 @@ LOGGING = {
         },
     },
     'root': {
-        'handlers': ['console', 'sentry'],
+        'level': 'NOTSET',
+        'handlers': ['console', 'internal'],
     },
+    # LOGGING.overridable is a list of loggers including root that will change
+    # based on the overridden level defined above.
+    'overridable': ['celery'],
     'loggers': {
-        'sentry': {
-            'level': 'ERROR',
-        },
-        'sentry.audit': {
-            'handlers': ['audit'],
-        },
-        'sentry.auth': {
-            'handlers': ['audit'],
-        },
-        'sentry.api': {
-            'handlers': ['console', 'sentry'],
-            'propagate': False,
-        },
-        'sentry.deletions': {
-            'handlers': ['audit'],
+        'celery': {
+            'level': 'WARN',
         },
         'sentry.errors': {
             'handlers': ['console'],
@@ -566,15 +561,14 @@ LOGGING = {
         },
         'multiprocessing': {
             'handlers': ['console'],
+            # https://github.com/celery/celery/commit/597a6b1f3359065ff6dbabce7237f86b866313df
+            # This commit has not been rolled into any release and leads to a
+            # large amount of errors when working with postgres.
             'level': 'CRITICAL',
             'propagate': False,
         },
-        'celery': {
-            'level': 'WARN',
-        },
         'celery.worker.job': {
             'handlers': ['console'],
-            'level': 'ERROR',
             'propagate': False,
         },
         'static_compiler': {
diff --git a/src/sentry/runner/commands/devserver.py b/src/sentry/runner/commands/devserver.py
index 63c1c80562..d58f74f0b0 100644
--- a/src/sentry/runner/commands/devserver.py
+++ b/src/sentry/runner/commands/devserver.py
@@ -8,7 +8,7 @@ sentry.runner.commands.devserver
 from __future__ import absolute_import, print_function
 
 import click
-from sentry.runner.decorators import configuration
+from sentry.runner.decorators import configuration, log_level_option
 
 
 @click.command()
@@ -16,6 +16,7 @@ from sentry.runner.decorators import configuration
 @click.option('--watchers/--no-watchers', default=True, help='Watch static files and recompile on changes.')
 @click.option('--workers/--no-workers', default=False, help='Run asynchronous workers.')
 @click.argument('bind', default='127.0.0.1:8000', metavar='ADDRESS')
+@log_level_option()
 @configuration
 def devserver(reload, watchers, workers, bind):
     "Starts a lightweight web server for development."
diff --git a/src/sentry/runner/commands/run.py b/src/sentry/runner/commands/run.py
index a599c2b0a7..5833896e71 100644
--- a/src/sentry/runner/commands/run.py
+++ b/src/sentry/runner/commands/run.py
@@ -12,9 +12,7 @@ from multiprocessing import cpu_count
 
 import click
 
-from sentry.runner.decorators import configuration
-
-CELERY_LOG_LEVELS = ('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL', 'FATAL')
+from sentry.runner.decorators import configuration, log_level_option
 
 
 class AddressParamType(click.ParamType):
@@ -37,11 +35,6 @@ class AddressParamType(click.ParamType):
 Address = AddressParamType()
 
 
-class CaseInsensitiveChoice(click.Choice):
-    def convert(self, value, param, ctx):
-        return super(CaseInsensitiveChoice, self).convert(value.upper(), param, ctx)
-
-
 class SetType(click.ParamType):
     name = 'text'
 
@@ -63,6 +56,7 @@ def run():
 @click.option('--workers', '-w', default=0, help='The number of worker processes for handling requests.')
 @click.option('--upgrade', default=False, is_flag=True, help='Upgrade before starting.')
 @click.option('--noinput', default=False, is_flag=True, help='Do not prompt the user for input of any kind.')
+@log_level_option()
 @configuration
 def web(bind, workers, upgrade, noinput):
     "Run web service."
@@ -117,13 +111,12 @@ def smtp(bind, upgrade, noinput):
     'Number of child processes processing the queue. The '
     'default is the number of CPUs available on your '
     'system.'))
-@click.option('--loglevel', '-l', default='WARNING', help='Logging level.',
-    type=CaseInsensitiveChoice(CELERY_LOG_LEVELS))
 @click.option('--logfile', '-f', help=(
     'Path to log file. If no logfile is specified, stderr is used.'))
 @click.option('--quiet', '-q', is_flag=True, default=False)
 @click.option('--no-color', is_flag=True, default=False)
 @click.option('--autoreload', is_flag=True, default=False, help='Enable autoreloading.')
+@log_level_option()
 @configuration
 def worker(**options):
     "Run background worker instance."
@@ -154,13 +147,12 @@ def worker(**options):
     'Optional file used to store the process pid. The '
     'program will not start if this file already exists and '
     'the pid is still alive.'))
-@click.option('--loglevel', '-l', default='WARNING', help='Logging level.',
-    type=CaseInsensitiveChoice(CELERY_LOG_LEVELS))
 @click.option('--logfile', '-f', help=(
     'Path to log file. If no logfile is specified, stderr is used.'))
 @click.option('--quiet', '-q', is_flag=True, default=False)
 @click.option('--no-color', is_flag=True, default=False)
 @click.option('--autoreload', is_flag=True, default=False, help='Enable autoreloading.')
+@log_level_option()
 @configuration
 def cron(**options):
     "Run periodic task dispatcher."
diff --git a/src/sentry/runner/decorators.py b/src/sentry/runner/decorators.py
index 505333f4ac..698de7bb96 100644
--- a/src/sentry/runner/decorators.py
+++ b/src/sentry/runner/decorators.py
@@ -9,6 +9,15 @@ from __future__ import absolute_import, print_function
 
 import os
 
+from click import Choice
+
+LOG_LEVELS = ('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL', 'FATAL')
+
+
+class CaseInsensitiveChoice(Choice):
+    def convert(self, value, param, ctx):
+        return super(CaseInsensitiveChoice, self).convert(value.upper(), param, ctx)
+
 
 def configuration(f):
     "Load and configure Sentry."
@@ -25,3 +34,22 @@ def configuration(f):
             configure()
         return ctx.invoke(f, *args, **kwargs)
     return update_wrapper(inner, f)
+
+
+def log_level_option(default=None):
+    def decorator(f):
+        "Give ability to configure global logging level. Must be used before configuration."
+        import click
+        from functools import update_wrapper
+
+        @click.pass_context
+        @click.option('--loglevel', '-l', default=default,
+            help='Global logging level. Use wisely.',
+            envvar='SENTRY_LOG_LEVEL',
+            type=CaseInsensitiveChoice(LOG_LEVELS))
+        def inner(ctx, loglevel=None, *args, **kwargs):
+            if loglevel:
+                os.environ['SENTRY_LOG_LEVEL'] = loglevel
+            return ctx.invoke(f, *args, **kwargs)
+        return update_wrapper(inner, f)
+    return decorator
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index 413b1fc3cc..5b6116cdf5 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -154,6 +154,8 @@ def configure_structlog():
     """
     Make structlog comply with all of our options.
     """
+    from django.conf import settings
+    import logging
     import structlog
     from sentry import options
     from sentry.logging import LoggingFormat
@@ -187,6 +189,26 @@ def configure_structlog():
 
     structlog.configure(**kwargs)
 
+    lvl = os.environ.get('SENTRY_LOG_LEVEL')
+
+    if lvl and lvl not in logging._levelNames:
+        raise AttributeError('%s is not a valid logging level.' % lvl)
+
+    settings.LOGGING['root'].update({
+        'level': lvl or settings.LOGGING['default_level']
+    })
+
+    if lvl:
+        for logger in settings.LOGGING['overridable']:
+            try:
+                settings.LOGGING['loggers'][logger].update({
+                    'level': lvl
+                })
+            except KeyError:
+                raise KeyError('%s is not a defined logger.' % logger)
+
+    logging.config.dictConfig(settings.LOGGING)
+
 
 def initialize_app(config, skip_backend_validation=False):
     settings = config['settings']
