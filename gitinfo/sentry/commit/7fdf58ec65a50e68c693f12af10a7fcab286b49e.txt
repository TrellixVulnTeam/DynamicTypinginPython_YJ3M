commit 7fdf58ec65a50e68c693f12af10a7fcab286b49e
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Jan 16 10:24:05 2019 -0800

    chore: Remove unused IssuePluginActions component (#11544)

diff --git a/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx b/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
deleted file mode 100644
index d0f06a9834..0000000000
--- a/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
+++ /dev/null
@@ -1,161 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-import Modal from 'react-bootstrap/lib/Modal';
-import ApiMixin from 'app/mixins/apiMixin';
-import DropdownLink from 'app/components/dropdownLink';
-import GroupState from 'app/mixins/groupState';
-import MenuItem from 'app/components/menuItem';
-import plugins from 'app/plugins';
-import {t} from 'app/locale';
-import {toTitleCase} from 'app/utils';
-
-const IssuePluginActions = createReactClass({
-  displayName: 'IssuePluginActions',
-
-  propTypes: {
-    plugin: PropTypes.object.isRequired,
-  },
-
-  mixins: [ApiMixin, GroupState],
-
-  getInitialState() {
-    return {
-      showModal: false,
-      actionType: null,
-      pluginLoading: false,
-    };
-  },
-
-  componentWillMount() {
-    this.loadPlugin(this.props.plugin);
-  },
-
-  componentWillReceiveProps(nextProps) {
-    if (this.props.plugin.id !== nextProps.plugin.id) {
-      this.loadPlugin(nextProps.plugin);
-    }
-  },
-
-  ACTION_LABELS: {
-    create: t('Create New Issue'),
-    link: t('Link with Existing Issue'),
-    unlink: t('Unlink Issue'),
-  },
-
-  loadPlugin(data) {
-    this.setState(
-      {
-        pluginLoading: true,
-      },
-      () => {
-        plugins.load(data, () => {
-          this.setState({pluginLoading: false});
-        });
-      }
-    );
-  },
-
-  openModal(action) {
-    this.setState({
-      showModal: true,
-      actionType: action,
-    });
-  },
-
-  closeModal() {
-    this.setState({
-      showModal: false,
-      actionType: null,
-    });
-  },
-
-  render() {
-    let plugin = this.props.plugin;
-
-    if (!plugin.allowed_actions || !plugin.allowed_actions.length) {
-      return null;
-    }
-
-    let allowedActions = plugin.allowed_actions.filter(
-      plugin.issue ? action => action === 'unlink' : action => action !== 'unlink'
-    );
-
-    let button;
-    if (allowedActions.length === 1) {
-      // # TODO(dcramer): remove plugin.title check in Sentry 8.22+
-      button = (
-        <button
-          className={'btn btn-default btn-sm btn-plugin-' + plugin.slug}
-          onClick={this.openModal.bind(this, allowedActions[0])}
-        >
-          {toTitleCase(allowedActions[0]) +
-            ' ' +
-            (plugin.shortName || plugin.name || plugin.title) +
-            ' Issue'}
-        </button>
-      );
-    } else {
-      // # TODO(dcramer): remove plugin.title check in Sentry 8.22+
-      button = (
-        <div className={'btn-plugin-' + plugin.slug}>
-          <DropdownLink
-            caret={false}
-            className="btn btn-default btn-sm"
-            title={
-              <span style={{display: 'flex'}}>
-                {plugin.shortName || plugin.name || plugin.title}
-                <span
-                  className="icon-arrow-down"
-                  style={{marginLeft: 3, marginRight: -3}}
-                />
-              </span>
-            }
-          >
-            {allowedActions.map(action => {
-              return (
-                <MenuItem key={action} noAnchor={true}>
-                  <a onClick={this.openModal.bind(this, action)}>
-                    {this.ACTION_LABELS[action]}
-                  </a>
-                </MenuItem>
-              );
-            })}
-          </DropdownLink>
-        </div>
-      );
-    }
-
-    // # TODO(dcramer): remove plugin.title check in Sentry 8.22+
-    return (
-      <div className="btn-group">
-        {button}
-        <Modal
-          show={this.state.showModal}
-          onHide={this.closeModal}
-          animation={false}
-          backdrop="static"
-          enforceFocus={false}
-        >
-          <Modal.Header closeButton>
-            <Modal.Title>{`${plugin.name || plugin.title} Issue`}</Modal.Title>
-          </Modal.Header>
-          <Modal.Body>
-            {!this.state.pluginLoading &&
-              this.state.actionType &&
-              plugins.get(this.props.plugin).renderGroupActions({
-                plugin: this.props.plugin,
-                group: this.getGroup(),
-                project: this.getProject(),
-                organization: this.getOrganization(),
-                actionType: this.state.actionType,
-                onSuccess: this.closeModal,
-              })}
-          </Modal.Body>
-        </Modal>
-      </div>
-    );
-  },
-});
-
-export default IssuePluginActions;
diff --git a/tests/js/spec/integrations/asana.spec.jsx b/tests/js/spec/integrations/asana.spec.jsx
deleted file mode 100644
index e63cf21899..0000000000
--- a/tests/js/spec/integrations/asana.spec.jsx
+++ /dev/null
@@ -1,128 +0,0 @@
-import React from 'react';
-import {mount} from 'enzyme';
-
-import IssuePluginActions from 'app/components/group/issuePluginActions';
-
-jest.mock('jquery');
-
-describe('Asana', function() {
-  let plugin = TestStubs.AsanaPlugin();
-  // Note group is different than group in AsanaCreate fixture
-  let group = TestStubs.Group();
-  let TITLE = 'input[id="id-title"]';
-  let NOTES = 'textarea[id="id-description"]';
-  // let WORKSPACE = '[id="id-workspace"]';
-  let PROJECT = '[id="id-project"]';
-  let ASSIGNEE = '[id="id-assignee"]';
-  let AsanaCreateResponse = TestStubs.AsanaCreate();
-  let autocompleteMock = jest.fn();
-  let createMock = jest.fn();
-
-  beforeEach(function() {
-    MockApiClient.addMockResponse({
-      url: `/issues/${group.id}/plugins/asana/create/`,
-      body: AsanaCreateResponse,
-    });
-    autocompleteMock = MockApiClient.addMockResponse({
-      url: `/api/0/issues/${group.id}/plugins/asana/autocomplete`,
-      body: {
-        ...TestStubs.AsanaAutocomplete(),
-        // This is a hack because our mock responses don't work properly when
-        // two different fields use the same endpoint
-        ...TestStubs.AsanaAutocomplete('assignee', [{id: 123123123, text: 'Billy'}]),
-      },
-    });
-    jest.spyOn(console, 'info').mockImplementation(() => {});
-  });
-
-  afterAll(function() {
-    window.console.info.mockRestore();
-  });
-
-  it('can create a new issue', async function() {
-    let wrapper = mount(
-      <IssuePluginActions plugin={plugin} />,
-      TestStubs.routerContext([
-        {
-          group,
-        },
-      ])
-    );
-
-    wrapper
-      .find('MenuItem a')
-      .first()
-      .simulate('click');
-
-    // TODO #SELECT2 enable when replacing select2
-    // expect(wrapper.find(`Select${WORKSPACE}`).prop('value')).toBe(608780875677549);
-    expect(wrapper.find(TITLE).prop('value')).toBe('Error: Loading chunk 3 failed.');
-    wrapper.find(TITLE).simulate('change', {target: {value: 'Sentry Issue Title'}});
-    wrapper.find(NOTES).simulate('change', {target: {value: 'Notes'}});
-
-    // Both project and assignees get called
-    expect(autocompleteMock).toHaveBeenCalledTimes(2);
-    autocompleteMock.mockReset();
-
-    wrapper.find(`input${PROJECT}`).simulate('change', {target: {value: 'b'}});
-    await tick();
-    wrapper.update();
-
-    expect(autocompleteMock).toHaveBeenLastCalledWith(
-      expect.anything(),
-      expect.objectContaining({
-        query: {
-          autocomplete_field: 'project',
-          autocomplete_query: '',
-        },
-      })
-    );
-
-    wrapper.find(`input${PROJECT}`).simulate('keyDown', {keyCode: 13});
-
-    // New autocomplete mock for assignee
-    autocompleteMock.mockReset();
-    expect(autocompleteMock).not.toHaveBeenCalled();
-    // On focus/change, autocompelte gets called again
-    wrapper.find(`input${ASSIGNEE}`).simulate('change', {target: {value: 'B'}});
-    wrapper.find(`input${ASSIGNEE}`).simulate('change', {target: {value: 'b'}});
-    await tick();
-    wrapper.update();
-
-    expect(autocompleteMock).toHaveBeenLastCalledWith(
-      expect.anything(),
-      expect.objectContaining({
-        query: {
-          autocomplete_field: 'assignee',
-          autocomplete_query: 'B',
-        },
-      })
-    );
-    wrapper.find(`input${ASSIGNEE}`).simulate('keyDown', {keyCode: 13});
-
-    await tick();
-    wrapper.update();
-
-    createMock = MockApiClient.addMockResponse({
-      url: `/issues/${group.id}/plugins/asana/create/`,
-      body: AsanaCreateResponse,
-    });
-
-    wrapper.find('Modal Form').simulate('submit');
-    await tick();
-    wrapper.update();
-
-    expect(createMock).toHaveBeenCalledWith(
-      expect.anything(),
-      expect.objectContaining({
-        data: expect.objectContaining({
-          description: 'Notes',
-          title: 'Sentry Issue Title',
-          workspace: 608780875677549,
-          project: 724210387969378,
-          assignee: 123123123,
-        }),
-      })
-    );
-  });
-});
diff --git a/tests/js/spec/integrations/phabricator.spec.jsx b/tests/js/spec/integrations/phabricator.spec.jsx
deleted file mode 100644
index e2f5174e06..0000000000
--- a/tests/js/spec/integrations/phabricator.spec.jsx
+++ /dev/null
@@ -1,128 +0,0 @@
-import React from 'react';
-import {mount} from 'enzyme';
-
-import IssuePluginActions from 'app/components/group/issuePluginActions';
-
-jest.mock('jquery');
-
-describe('Phabricator', function() {
-  let plugin = TestStubs.PhabricatorPlugin();
-  // Note group is different than group in PhabricatorCreate fixture
-  let group = TestStubs.Group();
-  let TITLE = 'input[id="id-title"]';
-  let NOTES = 'textarea[id="id-description"]';
-  let TAGS = '[id="id-tags"]';
-  let ASSIGNEE = '[id="id-assignee"]';
-  let PhabricatorCreateResponse = TestStubs.PhabricatorCreate();
-  let autocompleteMock = jest.fn();
-  let createMock = jest.fn();
-
-  beforeEach(function() {
-    MockApiClient.addMockResponse({
-      url: `/issues/${group.id}/plugins/phabricator/create/`,
-      body: PhabricatorCreateResponse,
-    });
-    autocompleteMock = MockApiClient.addMockResponse({
-      url: `/api/0/issues/${group.id}/plugins/phabricator/autocomplete`,
-      body: {
-        // This is a hack because our mock responses don't work properly when
-        // two different fields use the same endpoint
-        ...TestStubs.PhabricatorAutocomplete('tags'),
-        ...TestStubs.PhabricatorAutocomplete('assignee'),
-      },
-    });
-    jest.spyOn(console, 'info').mockImplementation(() => {});
-  });
-
-  afterAll(function() {
-    window.console.info.mockRestore();
-  });
-
-  it('can create a new issue', async function() {
-    let wrapper = mount(
-      <IssuePluginActions plugin={plugin} />,
-      TestStubs.routerContext([
-        {
-          group,
-        },
-      ])
-    );
-
-    wrapper
-      .find('MenuItem a')
-      .first()
-      .simulate('click');
-
-    // TODO #SELECT2 enable when replacing select2
-    // expect(wrapper.find(`Select${WORKSPACE}`).prop('value')).toBe(608780875677549);
-    expect(wrapper.find(TITLE).prop('value')).toBe(
-      'ApiException: Authentication failed, token expired!'
-    );
-    wrapper.find(TITLE).simulate('change', {target: {value: 'Sentry Issue Title'}});
-    wrapper.find(NOTES).simulate('change', {target: {value: 'Notes'}});
-
-    // Both tags and assignees get called
-    expect(autocompleteMock).toHaveBeenCalledTimes(2);
-    autocompleteMock.mockReset();
-
-    wrapper.find(`input${TAGS}`).simulate('change', {target: {value: 'Foo'}});
-    await tick();
-    wrapper.update();
-
-    expect(autocompleteMock).toHaveBeenLastCalledWith(
-      expect.anything(),
-      expect.objectContaining({
-        query: {
-          autocomplete_field: 'tags',
-          autocomplete_query: '',
-        },
-      })
-    );
-
-    wrapper.find(`input${TAGS}`).simulate('keyDown', {keyCode: 13});
-
-    // New autocomplete mock for assignee
-    autocompleteMock.mockReset();
-    expect(autocompleteMock).not.toHaveBeenCalled();
-    // On focus/change, autocompelte gets called again
-    wrapper.find(`input${ASSIGNEE}`).simulate('change', {target: {value: 'David'}});
-    wrapper.find(`input${ASSIGNEE}`).simulate('change', {target: {value: 'david'}});
-    await tick();
-    wrapper.update();
-
-    expect(autocompleteMock).toHaveBeenLastCalledWith(
-      expect.anything(),
-      expect.objectContaining({
-        query: {
-          autocomplete_field: 'assignee',
-          autocomplete_query: 'David',
-        },
-      })
-    );
-    wrapper.find(`input${ASSIGNEE}`).simulate('keyDown', {keyCode: 13});
-
-    await tick();
-    wrapper.update();
-
-    createMock = MockApiClient.addMockResponse({
-      url: `/issues/${group.id}/plugins/phabricator/create/`,
-      body: PhabricatorCreateResponse,
-    });
-
-    wrapper.find('Modal Form').simulate('submit');
-    await tick();
-    wrapper.update();
-
-    expect(createMock).toHaveBeenCalledWith(
-      expect.anything(),
-      expect.objectContaining({
-        data: expect.objectContaining({
-          description: 'Notes',
-          title: 'Sentry Issue Title',
-          tags: ['PHID-PROJ-3dfrsmwmavdv4gbg4fxd'],
-          assignee: 'PHID-USER-53avnyn5r6z6daqjfwdo',
-        }),
-      })
-    );
-  });
-});
diff --git a/tests/js/spec/integrations/vsts-plugin.spec.jsx b/tests/js/spec/integrations/vsts-plugin.spec.jsx
deleted file mode 100644
index 3b3738cee4..0000000000
--- a/tests/js/spec/integrations/vsts-plugin.spec.jsx
+++ /dev/null
@@ -1,176 +0,0 @@
-import React from 'react';
-import {mount} from 'enzyme';
-
-import IssuePluginActions from 'app/components/group/issuePluginActions';
-
-jest.mock('jquery');
-
-describe('Vsts', function() {
-  let plugin = TestStubs.VstsPlugin();
-  // Note group is different than group in VstsCreate fixture
-  let group = TestStubs.Group();
-  let TITLE = 'input[id="id-title"]';
-  let NOTES = 'textarea[id="id-description"]';
-  // let WORKSPACE = '[id="id-workspace"]';
-  let PROJECT = '[id="id-project"]';
-  let VstsCreateResponse = TestStubs.VstsCreate();
-  let createMock = jest.fn();
-
-  beforeEach(function() {
-    MockApiClient.addMockResponse({
-      url: `/issues/${group.id}/plugins/vsts/create/`,
-      body: VstsCreateResponse,
-    });
-
-    jest.spyOn(console, 'info').mockImplementation(() => {});
-  });
-
-  afterAll(function() {
-    window.console.info.mockRestore();
-  });
-
-  it('can create a new issue', async function() {
-    let wrapper = mount(
-      <IssuePluginActions plugin={plugin} />,
-      TestStubs.routerContext([
-        {
-          group,
-        },
-      ])
-    );
-
-    wrapper
-      .find('MenuItem a')
-      .first()
-      .simulate('click');
-
-    expect(wrapper.find(TITLE).prop('value')).toBe(
-      "TypeError: Cannot read property 'secondsElapsed' of undefined"
-    );
-    wrapper.find(TITLE).simulate('change', {target: {value: 'Sentry Issue Title'}});
-    wrapper.find(NOTES).simulate('change', {target: {value: 'Notes'}});
-
-    wrapper.find(`input${PROJECT}`).simulate('change', {target: {value: 'b'}});
-    await tick();
-    wrapper.update();
-
-    wrapper.find(`input${PROJECT}`).simulate('keyDown', {keyCode: 13});
-
-    await tick();
-    wrapper.update();
-
-    createMock = MockApiClient.addMockResponse({
-      url: `/issues/${group.id}/plugins/vsts/create/`,
-      body: VstsCreateResponse,
-    });
-
-    wrapper.find('Modal Form').simulate('submit');
-    await tick();
-    wrapper.update();
-
-    expect(createMock).toHaveBeenCalledWith(
-      expect.anything(),
-      expect.objectContaining({
-        data: expect.objectContaining({
-          description: 'Notes',
-          title: 'Sentry Issue Title',
-          project: 'b',
-        }),
-      })
-    );
-  });
-
-  it('uses the default project', async function() {
-    let wrapper = mount(
-      <IssuePluginActions plugin={plugin} />,
-      TestStubs.routerContext([
-        {
-          group,
-        },
-      ])
-    );
-
-    wrapper
-      .find('MenuItem a')
-      .first()
-      .simulate('click');
-
-    // Default value should be set
-    expect(
-      wrapper
-        .find('Select')
-        .first()
-        .prop('value')
-    ).toEqual('Sentry Testing Team');
-
-    createMock = MockApiClient.addMockResponse({
-      url: `/issues/${group.id}/plugins/vsts/create/`,
-      body: VstsCreateResponse,
-    });
-
-    wrapper.find('Modal Form').simulate('submit');
-    await tick();
-    wrapper.update();
-
-    expect(createMock).toHaveBeenCalledWith(
-      expect.anything(),
-      expect.objectContaining({
-        data: expect.objectContaining({
-          description:
-            "https://sentry.io/sentry-billy/react/issues/590943704/\n\n```\nTypeError: Cannot read property 'secondsElapsed' of undefined\n  at value (/Users/billy/Dev/raven-js-examples/commonjs-react/dist/scripts/app.js:1:4193)\n  at r (/Users/billy/Dev/raven-js-examples/commonjs-react/dist/scripts/app.js:1:17533)\n```",
-          title: "TypeError: Cannot read property 'secondsElapsed' of undefined",
-          project: 'Sentry Testing Team',
-        }),
-      })
-    );
-  });
-
-  it('can switch project to "Test"', async function() {
-    let wrapper = mount(
-      <IssuePluginActions plugin={plugin} />,
-      TestStubs.routerContext([
-        {
-          group,
-        },
-      ])
-    );
-
-    wrapper
-      .find('MenuItem a')
-      .first()
-      .simulate('click');
-
-    // Default value should be set
-    wrapper.find(`input${PROJECT}`).simulate('change', {target: {value: ''}});
-    wrapper.find(`input${PROJECT}`).simulate('keyDown', {keyCode: 13});
-    // wrapper.find('Select Option[children="Test"]').simulate('click');
-
-    expect(
-      wrapper
-        .find('Select')
-        .first()
-        .prop('value')
-    ).toEqual({label: 'Test', value: 'Test'});
-
-    createMock = MockApiClient.addMockResponse({
-      url: `/issues/${group.id}/plugins/vsts/create/`,
-      body: VstsCreateResponse,
-    });
-
-    wrapper.find('Modal Form').simulate('submit');
-    await tick();
-    wrapper.update();
-
-    expect(createMock).toHaveBeenCalledWith(
-      expect.anything(),
-      expect.objectContaining({
-        data: expect.objectContaining({
-          description:
-            "https://sentry.io/sentry-billy/react/issues/590943704/\n\n```\nTypeError: Cannot read property 'secondsElapsed' of undefined\n  at value (/Users/billy/Dev/raven-js-examples/commonjs-react/dist/scripts/app.js:1:4193)\n  at r (/Users/billy/Dev/raven-js-examples/commonjs-react/dist/scripts/app.js:1:17533)\n```",
-          title: "TypeError: Cannot read property 'secondsElapsed' of undefined",
-          project: 'Test',
-        }),
-      })
-    );
-  });
-});
