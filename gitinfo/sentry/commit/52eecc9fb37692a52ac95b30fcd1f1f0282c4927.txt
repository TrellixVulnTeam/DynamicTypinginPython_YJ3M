commit 52eecc9fb37692a52ac95b30fcd1f1f0282c4927
Author: Mark Story <mark@mark-story.com>
Date:   Wed Jan 23 11:08:57 2019 -0500

    feat(issues) Add saved searches for organization issue list (#11614)
    
    Add ability to load saved searches. Saved searches are fetched from the
    server and populated into the picker. There are no visual indications on
    which queries belong to which projects yet.
    
    Because saved queries overlap with the global header I had to make some
    compromises:
    
    1. A saved search's project will always overwrite the global filters.
    2. If a saved search has no project selecting it will erase project from
       the global filters.
    3. Changing projects when a saved search is active will navigate away
       from the saved search and become a custom search.
    
    Saving a search requires selecting an issue. This enables us to get the
    active group in an explicit way. The buttons still require tooltips to
    make that easy to figure out.
    
    Components for saved searches have been refactored to use styled
    components instead of the shared less file, and HOC instead of mixins.
    
    Refs APP-932

diff --git a/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx b/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
new file mode 100644
index 0000000000..9e00203457
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
@@ -0,0 +1,8 @@
+export function fetchSavedSearches(api, orgId, projectId = null) {
+  let url = projectId
+    ? `/projects/${orgId}/${projectId}/searches/`
+    : `/organizations/${orgId}/searches/`;
+  return api.requestPromise(url, {
+    method: 'GET',
+  });
+}
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 7e8bd426e3..2e66b759f1 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -802,6 +802,12 @@ function routes() {
                 import(/* webpackChunkName: "OrganizationStreamOverview" */ './views/organizationStream/overview')}
               component={errorHandler(LazyLoad)}
             />
+            <Route
+              path="searches/:searchId/"
+              componentPromise={() =>
+                import(/* webpackChunkName: "OrganizationStreamOverview" */ './views/organizationStream/overview')}
+              component={errorHandler(LazyLoad)}
+            />
           </Route>
           {/* Once org issues is complete, these routes can be nested under
           /organizations/:orgId/issues */}
diff --git a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
index aa77acc4a1..39134495a5 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
@@ -1,5 +1,5 @@
 import {browserHistory} from 'react-router';
-import {omit, pickBy, uniq, isEqual} from 'lodash';
+import {isEqual, omit, pickBy, uniq, sortBy} from 'lodash';
 import Cookies from 'js-cookie';
 import React from 'react';
 import Reflux from 'reflux';
@@ -14,6 +14,7 @@ import {t} from 'app/locale';
 import {fetchProject} from 'app/actionCreators/projects';
 import {fetchTags} from 'app/actionCreators/tags';
 import {fetchOrgMembers} from 'app/actionCreators/members';
+import {fetchSavedSearches} from 'app/actionCreators/savedSearches';
 import {fetchProcessingIssues} from 'app/actionCreators/processingIssues';
 import ConfigStore from 'app/stores/configStore';
 import GroupStore from 'app/stores/groupStore';
@@ -32,6 +33,7 @@ import StreamFilters from 'app/views/stream/filters';
 import StreamSidebar from 'app/views/stream/sidebar';
 import parseApiError from 'app/utils/parseApiError';
 import parseLinkHeader from 'app/utils/parseLinkHeader';
+import {updateProjects} from 'app/actionCreators/globalSelection';
 import utils from 'app/utils';
 import withOrganization from 'app/utils/withOrganization';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
@@ -65,15 +67,14 @@ const OrganizationStream = createReactClass({
 
     return {
       groupIds: [],
-      isDefaultSearch: false,
       loading: false,
       selectAllActive: false,
-      multiSelected: false,
       realtimeActive,
       pageLinks: '',
       queryCount: null,
       error: false,
       isSidebarVisible: false,
+      savedSearch: null,
       savedSearchList: [],
       processingIssues: null,
       tagsLoading: true,
@@ -93,23 +94,23 @@ const OrganizationStream = createReactClass({
       success: this.onRealtimePoll,
     });
 
-    if (!this.state.loading) {
-      this.fetchData();
-      fetchTags(this.props.organization.slug);
-
-      fetchOrgMembers(this.api, this.props.organization.slug).then(members => {
-        let memberList = members.reduce((acc, member) => {
-          for (let project of member.projects) {
-            if (acc[project] === undefined) {
-              acc[project] = [];
-            }
-            acc[project].push(member.user);
+    fetchTags(this.props.organization.slug);
+    fetchOrgMembers(this.api, this.props.organization.slug).then(members => {
+      let memberList = members.reduce((acc, member) => {
+        for (let project of member.projects) {
+          if (acc[project] === undefined) {
+            acc[project] = [];
           }
-          return acc;
-        }, {});
-        this.setState({memberList});
-      });
-    }
+          acc[project].push(member.user);
+        }
+        return acc;
+      }, {});
+      this.setState({memberList});
+    });
+
+    // Start by getting searches first so if the user is on a saved search
+    // we load the correct data the first time.
+    this.fetchSavedSearches();
   },
 
   componentDidUpdate(prevProps, prevState) {
@@ -121,8 +122,9 @@ const OrganizationStream = createReactClass({
         this._poller.disable();
       }
     }
-
-    if (
+    if (prevProps.params.searchId != this.props.params.searchId) {
+      this.onSavedSearchChange();
+    } else if (
       prevProps.location.search != this.props.location.search ||
       !isEqual(prevProps.selection, this.props.selection)
     ) {
@@ -142,6 +144,9 @@ const OrganizationStream = createReactClass({
   projectCache: {},
 
   getQuery() {
+    if (this.state.savedSearch) {
+      return this.state.savedSearch.query;
+    }
     return this.props.location.query.query || DEFAULT_QUERY;
   },
 
@@ -305,6 +310,27 @@ const OrganizationStream = createReactClass({
     return `/organizations/${params.orgId}/issues/`;
   },
 
+  onSavedSearchChange() {
+    if (!this.state.savedSearchList) {
+      return;
+    }
+
+    let {searchId} = this.props.params;
+    let match = this.state.savedSearchList.find(search => search.id === searchId);
+    if (match) {
+      let projects = [];
+      if (match.projectId) {
+        projects = [parseInt(match.projectId, 10)];
+      }
+
+      // Will trigger a transition if the projects changed
+      updateProjects(projects);
+      this.setState({savedSearch: match}, this.transitionTo);
+    } else {
+      this.setState({savedSearch: null}, this.transitionTo);
+    }
+  },
+
   onRealtimeChange(realtime) {
     Cookies.set('realtimeActive', realtime.toString());
     this.setState({
@@ -329,10 +355,8 @@ const OrganizationStream = createReactClass({
 
   onGroupChange() {
     let groupIds = this._streamManager.getAllItems().map(item => item.id);
-    if (!utils.valueIsEqual(groupIds, this.state.groupIds)) {
-      this.setState({
-        groupIds,
-      });
+    if (!isEqual(groupIds, this.state.groupIds)) {
+      this.setState({groupIds});
     }
   },
 
@@ -414,16 +438,30 @@ const OrganizationStream = createReactClass({
       ...newParams,
     };
     let {organization} = this.props;
+    let {savedSearch} = this.state;
+    let path;
+
+    if (savedSearch && query.query == savedSearch.query) {
+      path = `/organizations/${organization.slug}/issues/searches/${savedSearch.id}/`;
+      // Drop query and add project so we endup in the right place.
+      delete query.query;
+      if (savedSearch.projectId) {
+        query.project = [savedSearch.projectId];
+      }
+    } else {
+      path = `/organizations/${organization.slug}/issues/`;
+    }
 
-    let path = `/organizations/${organization.slug}/issues/`;
-    browserHistory.push({
-      pathname: path,
-      query,
-    });
+    if (path !== this.props.location.path && !isEqual(query, this.props.location.query)) {
+      browserHistory.push({
+        pathname: path,
+        query,
+      });
 
-    // Refetch data as simply pushing browserHistory doesn't
-    // update props.
-    this.fetchData();
+      // Refetch data as simply pushing browserHistory doesn't
+      // update props.
+      this.fetchData();
+    }
   },
 
   renderGroupNodes(ids, groupStatsPeriod) {
@@ -484,8 +522,28 @@ const OrganizationStream = createReactClass({
     return body;
   },
 
-  onSavedSearchCreate() {
-    // TODO implement
+  fetchSavedSearches() {
+    let {orgId} = this.props.params;
+    this.setState({loading: true});
+
+    fetchSavedSearches(this.api, orgId).then(
+      savedSearchList => {
+        this.setState({savedSearchList}, this.onSavedSearchChange);
+      },
+      error => {
+        logAjaxError(error);
+      }
+    );
+  },
+
+  onSavedSearchCreate(data) {
+    let savedSearchList = this.state.savedSearchList;
+
+    savedSearchList.push(data);
+    this.setState({
+      savedSearchList: sortBy(savedSearchList, ['name', 'projectId']),
+    });
+    this.setState({savedSearch: data}, this.transitionTo);
   },
 
   renderProcessingIssuesHints() {
@@ -508,14 +566,15 @@ const OrganizationStream = createReactClass({
   },
 
   render() {
-    // global loading
     if (this.state.loading) {
       return this.renderLoading();
     }
     let params = this.props.params;
     let classes = ['stream-row'];
-    if (this.state.isSidebarVisible) classes.push('show-sidebar');
-    let {orgId} = this.props.params;
+    if (this.state.isSidebarVisible) {
+      classes.push('show-sidebar');
+    }
+    let {orgId, searchId} = this.props.params;
     let access = this.getAccess();
     let query = this.getQuery();
 
@@ -537,6 +596,8 @@ const OrganizationStream = createReactClass({
           <StreamFilters
             access={access}
             orgId={orgId}
+            projectId={projectId}
+            searchId={searchId}
             query={query}
             sort={this.getSort()}
             queryCount={this.state.queryCount}
diff --git a/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx b/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
index 57654fc1a0..c597301c2e 100644
--- a/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
+++ b/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
@@ -1,276 +1,330 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
 import Modal from 'react-bootstrap/lib/Modal';
-import {Link} from 'react-router';
+import styled from 'react-emotion';
 
 import {t} from 'app/locale';
-import ApiMixin from 'app/mixins/apiMixin';
+import Button from 'app/components/button';
 import IndicatorStore from 'app/stores/indicatorStore';
 import DropdownLink from 'app/components/dropdownLink';
 import QueryCount from 'app/components/queryCount';
 import MenuItem from 'app/components/menuItem';
+import Tooltip from 'app/components/tooltip';
 import {BooleanField, FormState, TextField} from 'app/components/forms';
+import withApi from 'app/utils/withApi';
+import space from 'app/styles/space';
 
-const SaveSearchButton = createReactClass({
-  displayName: 'SaveSearchButton',
+const SaveSearchButton = withApi(
+  class SaveSearchButton extends React.Component {
+    static propTypes = {
+      orgId: PropTypes.string.isRequired,
+      projectId: PropTypes.string,
+      access: PropTypes.object.isRequired,
+      api: PropTypes.object.isRequired,
+      query: PropTypes.string.isRequired,
+      disabled: PropTypes.bool,
+      style: PropTypes.object,
+      tooltip: PropTypes.string,
+      buttonTitle: PropTypes.string,
 
-  propTypes: {
-    orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string,
-    access: PropTypes.object.isRequired,
-    query: PropTypes.string.isRequired,
-    disabled: PropTypes.bool,
-    style: PropTypes.object,
-    tooltip: PropTypes.string,
-    buttonTitle: PropTypes.string,
-
-    onSave: PropTypes.func.isRequired,
-  },
+      onSave: PropTypes.func.isRequired,
+    };
 
-  mixins: [ApiMixin],
+    constructor(props) {
+      super(props);
+      this.state = {
+        isModalOpen: false,
+        formData: {
+          query: this.props.query,
+        },
+        errors: {},
+      };
+    }
 
-  getInitialState() {
-    return {
-      isModalOpen: false,
-      formData: {
-        query: this.props.query,
-      },
-      errors: {},
-    };
-  },
+    onToggle() {
+      if (this.props.disabled) {
+        return;
+      }
+      this.setState({
+        isModalOpen: !this.state.isModalOpen,
+        state: FormState.READY,
+        formData: {
+          query: this.props.query,
+        },
+      });
+    }
 
-  onToggle() {
-    if (this.props.disabled) {
-      return;
+    onFieldChange(name, value) {
+      let formData = this.state.formData;
+      formData[name] = value;
+      this.setState({
+        formData,
+      });
     }
-    this.setState({
-      isModalOpen: !this.state.isModalOpen,
-      state: FormState.READY,
-      formData: {
-        query: this.props.query,
-      },
-    });
-  },
 
-  onFieldChange(name, value) {
-    let formData = this.state.formData;
-    formData[name] = value;
-    this.setState({
-      formData,
-    });
-  },
+    onDefaultChange(e) {
+      this.onFieldChange('isDefault', e.target.checked);
+    }
 
-  onDefaultChange(e) {
-    this.onFieldChange('isDefault', e.target.checked);
-  },
+    onUserDefaultChange(e) {
+      this.onFieldChange('isUserDefault', e.target.checked);
+    }
 
-  onUserDefaultChange(e) {
-    this.onFieldChange('isUserDefault', e.target.checked);
-  },
+    onSubmit(e) {
+      e.preventDefault();
 
-  onSubmit(e) {
-    e.preventDefault();
+      if (this.state.state == FormState.SAVING) {
+        return;
+      }
+      let {api} = this.props;
 
-    if (this.state.state == FormState.SAVING) {
-      return;
+      this.setState(
+        {
+          state: FormState.SAVING,
+        },
+        () => {
+          let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+          let {orgId, projectId} = this.props;
+          api.request(`/projects/${orgId}/${projectId}/searches/`, {
+            method: 'POST',
+            data: this.state.formData,
+            success: data => {
+              this.onToggle();
+              this.props.onSave(data);
+              this.setState({
+                state: FormState.READY,
+                errors: {},
+              });
+            },
+            error: err => {
+              let errors = err.responseJSON || true;
+              errors = errors.detail || true;
+              this.setState({
+                state: FormState.ERROR,
+                errors,
+              });
+            },
+            complete: () => {
+              IndicatorStore.remove(loadingIndicator);
+            },
+          });
+        }
+      );
     }
-    this.setState(
-      {
-        state: FormState.SAVING,
-      },
-      () => {
-        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-        let {orgId, projectId} = this.props;
-        this.api.request(`/projects/${orgId}/${projectId}/searches/`, {
-          method: 'POST',
-          data: this.state.formData,
-          success: data => {
-            this.onToggle();
-            this.props.onSave(data);
-            this.setState({
-              state: FormState.READY,
-              errors: {},
-            });
-          },
-          error: err => {
-            let errors = err.responseJSON || true;
-            errors = errors.detail || true;
-            this.setState({
-              state: FormState.ERROR,
-              errors,
-            });
-          },
-          complete: () => {
-            IndicatorStore.remove(loadingIndicator);
-          },
-        });
-      }
-    );
-  },
 
-  render() {
-    let isSaving = this.state.state === FormState.SAVING;
-    return (
-      <React.Fragment>
-        <a
-          title={this.props.tooltip || this.props.buttonTitle}
-          className={this.props.className}
-          disabled={this.props.disabled}
-          onClick={this.onToggle}
-          style={this.props.style}
-        >
-          {this.props.children}
-        </a>
-        <Modal show={this.state.isModalOpen} animation={false} onHide={this.onToggle}>
-          <form onSubmit={this.onSubmit}>
-            <div className="modal-header">
-              <h4>{t('Save Current Search')}</h4>
-            </div>
-            <div className="modal-body">
-              {this.state.state === FormState.ERROR && (
-                <div className="alert alert-error alert-block">
-                  {t(`Unable to save your changes. ${this.state.errors}`)}
-                </div>
-              )}
-              <p>
-                {t(
-                  'Saving this search will give you and your team quick access to it in the future.'
+    render() {
+      let isSaving = this.state.state === FormState.SAVING;
+      let {tooltip, buttonTitle, style, children, disabled} = this.props;
+      return (
+        <React.Fragment>
+          <Tooltip
+            title="You must select issues from a single project to create new saved searches"
+            disabled={!disabled}
+          >
+            <span>
+              <Button
+                title={tooltip || buttonTitle}
+                size="xsmall"
+                priority="default"
+                disabled={disabled}
+                onClick={this.onToggle.bind(this)}
+                style={style}
+              >
+                {children}
+              </Button>
+            </span>
+          </Tooltip>
+          <Modal
+            show={this.state.isModalOpen}
+            animation={false}
+            onHide={this.onToggle.bind(this)}
+          >
+            <form onSubmit={this.onSubmit.bind(this)}>
+              <div className="modal-header">
+                <h4>{t('Save Current Search')}</h4>
+              </div>
+              <div className="modal-body">
+                {this.state.state === FormState.ERROR && (
+                  <div className="alert alert-error alert-block">
+                    {t(`Unable to save your changes. ${this.state.errors}`)}
+                  </div>
                 )}
-              </p>
-              <TextField
-                key="name"
-                name="name"
-                label={t('Name')}
-                placeholder="e.g. My Search Results"
-                required={true}
-                onChange={this.onFieldChange.bind(this, 'name')}
-              />
-              <TextField
-                key="query"
-                name="query"
-                label={t('Query')}
-                value={this.state.formData.query}
-                required={true}
-                onChange={this.onFieldChange.bind(this, 'query')}
-              />
-              <BooleanField
-                key="isUserDefault"
-                name="is-user-default"
-                label={t('Make this the default view for myself.')}
-                onChange={this.onFieldChange.bind(this, 'isUserDefault')}
-              />
-              {this.props.access.has('project:write') && (
+                <p>
+                  {t(
+                    'Saving this search will give you and your team quick access to it in the future.'
+                  )}
+                </p>
+                <TextField
+                  key="name"
+                  name="name"
+                  label={t('Name')}
+                  placeholder="e.g. My Search Results"
+                  required={true}
+                  onChange={this.onFieldChange.bind(this, 'name')}
+                />
+                <TextField
+                  key="query"
+                  name="query"
+                  label={t('Query')}
+                  value={this.state.formData.query}
+                  required={true}
+                  onChange={this.onFieldChange.bind(this, 'query')}
+                />
                 <BooleanField
-                  key="isDefault"
-                  name="is-default"
-                  label={t('Make this the default view for my team.')}
-                  onChange={this.onFieldChange.bind(this, 'isDefault')}
+                  key="isUserDefault"
+                  name="is-user-default"
+                  label={t('Make this the default view for myself.')}
+                  onChange={this.onFieldChange.bind(this, 'isUserDefault')}
                 />
-              )}
-            </div>
-            <div className="modal-footer">
-              <button
-                type="button"
-                className="btn btn-default"
-                disabled={isSaving}
-                onClick={this.onToggle}
-              >
-                {t('Cancel')}
-              </button>
-              <button type="submit" className="btn btn-primary" disabled={isSaving}>
-                {t('Save')}
-              </button>
-            </div>
-          </form>
-        </Modal>
-      </React.Fragment>
-    );
-  },
-});
-
-const SavedSearchSelector = createReactClass({
-  displayName: 'SavedSearchSelector',
+                {this.props.access.has('project:write') && (
+                  <BooleanField
+                    key="isDefault"
+                    name="is-default"
+                    label={t('Make this the default view for my team.')}
+                    onChange={this.onFieldChange.bind(this, 'isDefault')}
+                  />
+                )}
+              </div>
+              <div className="modal-footer">
+                <Button
+                  priority="default"
+                  size="small"
+                  disabled={isSaving}
+                  onClick={this.onToggle.bind(this)}
+                >
+                  {t('Cancel')}
+                </Button>
+                <Button priority="primary" size="small" disabled={isSaving}>
+                  {t('Save')}
+                </Button>
+              </div>
+            </form>
+          </Modal>
+        </React.Fragment>
+      );
+    }
+  }
+);
 
-  propTypes: {
-    orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string,
-    searchId: PropTypes.string,
-    access: PropTypes.object.isRequired,
-    savedSearchList: PropTypes.array.isRequired,
-    queryCount: PropTypes.number,
-    queryMaxCount: PropTypes.number,
-    onSavedSearchCreate: PropTypes.func.isRequired,
-  },
+const SavedSearchSelector = withApi(
+  class SavedSearchSelector extends React.Component {
+    static propTypes = {
+      orgId: PropTypes.string.isRequired,
+      projectId: PropTypes.string,
+      searchId: PropTypes.string,
+      access: PropTypes.object.isRequired,
+      savedSearchList: PropTypes.array.isRequired,
+      queryCount: PropTypes.number,
+      queryMaxCount: PropTypes.number,
+      onSavedSearchCreate: PropTypes.func.isRequired,
+    };
 
-  mixins: [ApiMixin],
+    getTitle() {
+      let searchId = this.props.searchId || null;
+      if (!searchId) return t('Custom Search');
+      let results = this.props.savedSearchList.filter(search => {
+        return searchId === search.id;
+      });
+      return results.length ? results[0].name : t('Custom Search');
+    }
 
-  getTitle() {
-    let searchId = this.props.searchId || null;
-    if (!searchId) return t('Custom Search');
-    let results = this.props.savedSearchList.filter(search => {
-      return searchId === search.id;
-    });
-    return results.length ? results[0].name : t('Custom Search');
-  },
+    render() {
+      let {orgId, projectId, queryCount, queryMaxCount} = this.props;
+      let hasProject = !!projectId;
 
-  render() {
-    let {access, orgId, projectId, queryCount, queryMaxCount} = this.props;
-    let children = this.props.savedSearchList.map(search => {
-      // TODO(dcramer): we want these to link directly to the saved
-      // search ID, and pass that into the backend (probably)
+      let children = this.props.savedSearchList.map(search => {
+        let url = hasProject
+          ? `/${orgId}/${projectId}/searches/${search.id}/`
+          : `/organizations/${orgId}/issues/searches/${search.id}/`;
 
-      // TODO(mark) Make links org/project aware.
+        return (
+          <StyledMenuItem to={url} key={search.id}>
+            <strong>{search.name}</strong>
+            <code>{search.query}</code>
+          </StyledMenuItem>
+        );
+      });
       return (
-        <MenuItem to={`/${orgId}/${projectId}/searches/${search.id}/`} key={search.id}>
-          <strong>{search.name}</strong>
-          <code>{search.query}</code>
-        </MenuItem>
+        <div className="saved-search-selector">
+          <DropdownLink
+            title={
+              <span>
+                <span>{this.getTitle()}</span>
+                <QueryCount count={queryCount} max={queryMaxCount} />
+              </span>
+            }
+          >
+            {children.length ? (
+              children
+            ) : (
+              <EmptyItem>{t("There don't seem to be any saved searches yet.")}</EmptyItem>
+            )}
+            <StyledMenuItem divider={true} />
+            <ButtonBar>
+              <SaveSearchButton
+                className="btn btn-sm btn-default"
+                onSave={this.props.onSavedSearchCreate}
+                disabled={!hasProject}
+                {...this.props}
+              >
+                {t('Save Current Search')}
+              </SaveSearchButton>
+
+              <Tooltip
+                title="You must select issues from a single project to manage saved searches"
+                disabled={hasProject}
+              >
+                <span>
+                  <Button
+                    size="xsmall"
+                    priority="default"
+                    to={`/${orgId}/${projectId}/settings/saved-searches/`}
+                    disabled={!hasProject}
+                  >
+                    {t('Manage')}
+                  </Button>
+                </span>
+              </Tooltip>
+            </ButtonBar>
+          </DropdownLink>
+        </div>
       );
-    });
-    return (
-      <div className="saved-search-selector">
-        <DropdownLink
-          title={
-            <span>
-              <span>{this.getTitle()}</span>
-              <QueryCount count={queryCount} max={queryMaxCount} />
-            </span>
-          }
-        >
-          {children.length ? (
-            children
-          ) : (
-            <li className="empty">
-              {t("There don't seem to be any saved searches yet.")}
-            </li>
-          )}
-          {access.has('project:write') && <MenuItem divider={true} />}
-          <li>
-            <div className="row">
-              <div className="col-md-7">
-                <SaveSearchButton
-                  className="btn btn-sm btn-default"
-                  onSave={this.props.onSavedSearchCreate}
-                  {...this.props}
-                >
-                  {t('Save Current Search')}
-                </SaveSearchButton>
-              </div>
-              <div className="col-md-5">
-                <Link
-                  to={`/${orgId}/${projectId}/settings/saved-searches/`}
-                  className="btn btn-sm btn-default"
-                >
-                  {t('Manage')}
-                </Link>
-              </div>
-            </div>
-          </li>
-        </DropdownLink>
-      </div>
-    );
-  },
-});
+    }
+  }
+);
+
+const EmptyItem = styled.li`
+  padding: 8px 10px 5px;
+  font-style: italic;
+`;
+
+const StyledMenuItem = styled(MenuItem)`
+  & a {
+    padding: ${space(0.5)} ${space(1)};
+  }
+  & strong,
+  & code {
+    display: block;
+    max-width: 100%;
+    text-overflow: ellipsis;
+    white-space: nowrap;
+    overflow: hidden;
+    color: ${p => p.theme.gray5};
+    padding: 0;
+    background: inherit;
+  }
+`;
+
+const ButtonBar = styled.li`
+  padding: ${space(0.5)} ${space(1)};
+  display: flex;
+  justify-content: space-between;
+
+  & a {
+    /* need to override .dropdown-menu li a in shared-components.less */
+    padding: 0 !important;
+    line-height: 1 !important;
+  }
+`;
 
 export default SavedSearchSelector;
diff --git a/src/sentry/static/sentry/app/views/stream/stream.jsx b/src/sentry/static/sentry/app/views/stream/stream.jsx
index ad95ba7bf6..d6d945cb88 100644
--- a/src/sentry/static/sentry/app/views/stream/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream/stream.jsx
@@ -1,5 +1,5 @@
 import {browserHistory} from 'react-router';
-import {omit, isEqual} from 'lodash';
+import {omit, isEqual, sortBy} from 'lodash';
 import Cookies from 'js-cookie';
 import PropTypes from 'prop-types';
 import React from 'react';
@@ -20,6 +20,7 @@ import ApiMixin from 'app/mixins/apiMixin';
 import ConfigStore from 'app/stores/configStore';
 import EnvironmentStore from 'app/stores/environmentStore';
 import ErrorRobot from 'app/components/errorRobot';
+import {fetchSavedSearches} from 'app/actionCreators/savedSearches';
 import GroupStore from 'app/stores/groupStore';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
@@ -75,7 +76,7 @@ const Stream = createReactClass({
       isDefaultSearch: false,
       searchId: hasQuery ? null : searchId,
       // if we have no query then we can go ahead and fetch data
-      loading: searchId || !hasQuery,
+      loading: !!searchId || !hasQuery,
       savedSearchLoading: true,
       savedSearchList: [],
       selectAllActive: false,
@@ -165,8 +166,8 @@ const Stream = createReactClass({
     const {orgId, projectId} = this.props.params;
     const {searchId} = this.state;
 
-    this.api.request(`/projects/${orgId}/${projectId}/searches/`, {
-      success: data => {
+    fetchSavedSearches(this.api, orgId, projectId).then(
+      data => {
         const newState = {
           isDefaultSearch: false,
           savedSearchLoading: false,
@@ -214,7 +215,7 @@ const Stream = createReactClass({
 
         this.setState(newState, needsData ? this.fetchData : null);
       },
-      error: error => {
+      error => {
         // XXX(dcramer): fail gracefully by still loading the stream
         logAjaxError(error);
         this.setState({
@@ -225,8 +226,8 @@ const Stream = createReactClass({
           savedSearchLoading: false,
           query: '',
         });
-      },
-    });
+      }
+    );
   },
 
   fetchProcessingIssues() {
@@ -254,9 +255,9 @@ const Stream = createReactClass({
     let {orgId, projectId} = this.props.params;
     let savedSearchList = this.state.savedSearchList;
     savedSearchList.push(data);
-    // TODO(dcramer): sort
+
     this.setState({
-      savedSearchList,
+      savedSearchList: sortBy(savedSearchList, ['name']),
     });
     browserHistory.push(`/${orgId}/${projectId}/searches/${data.id}/`);
   },
diff --git a/src/sentry/static/sentry/less/stream.less b/src/sentry/static/sentry/less/stream.less
index e18cd4fd50..d4811eab3b 100644
--- a/src/sentry/static/sentry/less/stream.less
+++ b/src/sentry/static/sentry/less/stream.less
@@ -886,11 +886,6 @@
     }
   }
 
-  li.empty {
-    padding: 8px 10px 5px;
-    font-style: italic;
-  }
-
   .dropdown-menu {
     max-width: 350px;
     min-width: 275px;
@@ -902,32 +897,6 @@
         padding: 0 5px;
       }
     }
-
-    li {
-      a {
-        padding: 3px 10px;
-      }
-      strong,
-      code {
-        display: block;
-        max-width: 100%;
-        text-overflow: ellipsis;
-        white-space: nowrap;
-        overflow: hidden;
-      }
-      code {
-        font-size: 93%;
-        color: @gray;
-        padding: 0;
-        background: inherit;
-      }
-      &.active code {
-        color: @white;
-      }
-      .btn {
-        display: block;
-      }
-    }
   }
 }
 
diff --git a/tests/js/spec/views/stream/stream.spec.jsx b/tests/js/spec/views/stream/stream.spec.jsx
index 259fc785ef..d08694a350 100644
--- a/tests/js/spec/views/stream/stream.spec.jsx
+++ b/tests/js/spec/views/stream/stream.spec.jsx
@@ -151,20 +151,23 @@ describe('Stream', function() {
       });
     }); // complete handler
 
-    it('calls fetchData once on mount for a saved search', function() {
+    it('calls fetchData once on mount for a saved search', async function() {
       props.location = {query: {}};
       props.params.searchId = '1';
       wrapper = shallow(<Stream {...props} />, {
         context,
       });
+      await wrapper.update();
 
       expect(groupListRequest).toHaveBeenCalledTimes(1);
     });
 
-    it('calls fetchData once on mount if there is a query', function() {
+    it('calls fetchData once on mount if there is a query', async function() {
       wrapper = shallow(<Stream {...props} />, {
         context,
       });
+      await wrapper.update();
+
       expect(groupListRequest).toHaveBeenCalledTimes(1);
     });
 
@@ -217,7 +220,7 @@ describe('Stream', function() {
   });
 
   describe('fetchSavedSearches()', function() {
-    it('handles valid search id', function() {
+    it('handles valid search id', async function() {
       const streamProps = {
         setProjectNavSection: function() {},
         params: {orgId: 'org-slug', projectId: 'project-slug', searchId: '789'},
@@ -226,12 +229,13 @@ describe('Stream', function() {
       wrapper = shallow(<Stream {...streamProps} />, {
         context,
       });
+      await wrapper.update();
 
       expect(wrapper.instance().state.searchId).toBe('789');
       expect(wrapper.instance().state.query).toBe('is:unresolved');
     });
 
-    it('handles invalid search id', function() {
+    it('handles invalid search id', async function() {
       const streamProps = {
         setProjectNavSection: function() {},
         params: {orgId: 'org-slug', projectId: 'project-slug', searchId: 'invalid'},
@@ -240,12 +244,13 @@ describe('Stream', function() {
       wrapper = shallow(<Stream {...streamProps} />, {
         context,
       });
+      await wrapper.update();
 
       expect(wrapper.instance().state.searchId).toBeNull();
       expect(wrapper.instance().state.query).toBe('');
     });
 
-    it('handles default saved search (no search id or query)', function() {
+    it('handles default saved search (no search id or query)', async function() {
       const streamProps = {
         ...props,
         location: {query: {}, search: ''},
@@ -267,6 +272,7 @@ describe('Stream', function() {
       wrapper = shallow(<Stream {...streamProps} />, {
         context,
       });
+      await wrapper.update();
 
       expect(wrapper.instance().state.searchId).toBe('default');
       expect(wrapper.instance().state.query).toBe('is:unresolved assigned:me');
@@ -480,7 +486,7 @@ describe('Stream', function() {
       expect(_.pick(actual, _.keys(expected))).toEqual(expected);
     });
 
-    it('handles no searchId or query', function() {
+    it('handles no searchId or query', async function() {
       let streamProps = {
         ...props,
         location: {query: {sort: 'freq'}, search: 'sort=freq'},
@@ -501,15 +507,18 @@ describe('Stream', function() {
         searchId: null,
       };
 
-      let stream = shallow(<Stream {...streamProps} />, {
+      wrapper = shallow(<Stream {...streamProps} />, {
         context,
-      }).instance();
+      });
+      await wrapper.update();
+
+      let stream = wrapper.instance();
 
       let actual = stream.state;
       expect(_.pick(actual, _.keys(expected))).toEqual(expected);
     });
 
-    it('handles valid searchId in routing params', function() {
+    it('handles valid searchId in routing params', async function() {
       let streamProps = {
         ...props,
         location: {query: {sort: 'freq'}, search: 'sort=freq'},
@@ -538,12 +547,13 @@ describe('Stream', function() {
       wrapper.setState({
         savedSearchList: [{id: '789', query: 'is:unresolved', name: 'test'}],
       });
+      await wrapper.update();
 
       let actual = wrapper.instance().state;
       expect(_.pick(actual, _.keys(expected))).toEqual(expected);
     });
 
-    it('handles invalid searchId in routing params', function() {
+    it('handles invalid searchId in routing params', async function() {
       let streamProps = {
         ...props,
         location: {query: {sort: 'freq'}, search: 'sort=freq'},
@@ -565,9 +575,11 @@ describe('Stream', function() {
         searchId: null,
       };
 
-      let stream = shallow(<Stream {...streamProps} />, {
+      wrapper = shallow(<Stream {...streamProps} />, {
         context,
-      }).instance();
+      });
+      await wrapper.update();
+      let stream = wrapper.instance();
 
       let actual = stream.state;
       expect(_.pick(actual, _.keys(expected))).toEqual(expected);
@@ -575,7 +587,7 @@ describe('Stream', function() {
   });
 
   describe('getQueryState', function() {
-    it('handles changed search id', function() {
+    it('handles changed search id', async function() {
       const nextProps = {
         ...props,
         location: {
@@ -584,9 +596,12 @@ describe('Stream', function() {
         params: {orgId: 'org-slug', projectId: 'project-slug', searchId: '789'},
       };
 
-      const stream = shallow(<Stream {...props} />, {
+      wrapper = shallow(<Stream {...props} />, {
         context,
-      }).instance();
+      });
+      await wrapper.update();
+      const stream = wrapper.instance();
+
       const nextState = stream.getQueryState(nextProps);
       expect(nextState).toEqual(
         expect.objectContaining({searchId: '789', query: 'is:unresolved'})
