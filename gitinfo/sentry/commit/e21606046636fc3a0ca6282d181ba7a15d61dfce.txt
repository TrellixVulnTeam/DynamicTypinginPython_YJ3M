commit e21606046636fc3a0ca6282d181ba7a15d61dfce
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Aug 9 20:31:28 2015 -0700

    Pull in custom debug-toolbar implementation

diff --git a/setup.py b/setup.py
index fa52ddcbf5..8b1f239965 100755
--- a/setup.py
+++ b/setup.py
@@ -73,6 +73,7 @@ install_requires = [
     'Django>=1.6.0,<1.7',
     'django-bitfield>=1.7.0,<1.8.0',
     'django-crispy-forms>=1.4.0,<1.5.0',
+    'django-debug-toolbar>=1.3.2,<1.4.0',
     'django-paging>=0.2.5,<0.3.0',
     'django-jsonfield>=0.9.13,<0.9.14',
     'django-picklefield>=0.3.0,<0.4.0',
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 3f71817557..fc92331f9c 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -200,6 +200,7 @@ MIDDLEWARE_CLASSES = (
     'sentry.middleware.social_auth.SentrySocialAuthExceptionMiddleware',
     'django.middleware.locale.LocaleMiddleware',
     'django.contrib.messages.middleware.MessageMiddleware',
+    'sentry.debug.middleware.DebugMiddleware',
 )
 
 ROOT_URLCONF = 'sentry.conf.urls'
@@ -232,6 +233,7 @@ INSTALLED_APPS = (
 
     'captcha',
     'crispy_forms',
+    'debug_toolbar',
     'gunicorn',
     'kombu.transport.django',
     'raven.contrib.django.raven_compat',
@@ -527,6 +529,19 @@ STATSD_CLIENT = 'django_statsd.clients.null'
 SENTRY_METRICS_PREFIX = ''
 SENTRY_METRICS_SAMPLE_RATE = 1.0
 
+# Debugger
+
+DEBUG_TOOLBAR_PANELS = (
+    'debug_toolbar.panels.timer.TimerPanel',
+    'sentry.debug.panels.route.RoutePanel',
+    'debug_toolbar.panels.templates.TemplatesPanel',
+
+    'debug_toolbar.panels.sql.SQLPanel',
+    'sentry.debug.panels.redis.RedisPanel',
+
+    'debug_toolbar.panels.versions.VersionsPanel',
+)
+
 # Sentry and Raven configuration
 
 SENTRY_CLIENT = 'sentry.utils.raven.SentryInternalClient'
diff --git a/src/sentry/debug/__init__.py b/src/sentry/debug/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/src/sentry/debug/middleware.py b/src/sentry/debug/middleware.py
new file mode 100644
index 0000000000..577baeeb13
--- /dev/null
+++ b/src/sentry/debug/middleware.py
@@ -0,0 +1,95 @@
+from __future__ import absolute_import
+
+import json
+import re
+import threading
+
+from debug_toolbar.middleware import DebugToolbarMiddleware
+from debug_toolbar.toolbar import DebugToolbar
+from django.utils.encoding import force_text
+
+
+# Inherit from DebugToolbarMiddleware because of DJDT monkey patching
+class DebugMiddleware(threading.local, DebugToolbarMiddleware):
+    _body_regexp = re.compile(re.escape('</body>'), flags=re.IGNORECASE)
+
+    def __init__(self):
+        threading.local.__init__(self)
+
+    def show_toolbar(self, request):
+        # TODO(dcramer): support VPN via INTERNAL_IPS + ipaddr maps
+        if not request.user.is_active_superuser():
+            return False
+        if 'text/html' not in request.META['HTTP_ACCEPT']:
+            return False
+        return True
+
+    def process_request(self, request):
+        # Decide whether the toolbar is active for this request.
+        if not self.show_toolbar(request):
+            self.toolbar = None
+            return
+
+        self.toolbar = toolbar = DebugToolbar(request)
+
+        # Activate instrumentation ie. monkey-patch.
+        for panel in toolbar.enabled_panels:
+            panel.enable_instrumentation()
+
+        # Run process_request methods of panels like Django middleware.
+        response = None
+        for panel in toolbar.enabled_panels:
+            response = panel.process_request(request)
+            if response:
+                break
+        return response
+
+    def process_view(self, request, view_func, view_args, view_kwargs):
+        toolbar = getattr(self, 'toolbar', None)
+        if not toolbar:
+            return
+
+        # Run process_view methods of panels like Django middleware.
+        response = None
+        for panel in toolbar.enabled_panels:
+            response = panel.process_view(request, view_func, view_args, view_kwargs)
+            if response:
+                break
+
+    def process_response(self, request, response):
+        toolbar = getattr(self, 'toolbar', None)
+        if not toolbar:
+            return response
+
+        # Run process_response methods of panels like Django middleware.
+        for panel in reversed(toolbar.enabled_panels):
+            new_response = panel.process_response(request, response)
+            if new_response:
+                response = new_response
+
+        # Deactivate instrumentation ie. monkey-unpatch. This must run
+        # regardless of the response. Keep 'return' clauses below.
+        # (NB: Django's model for middleware doesn't guarantee anything.)
+        for panel in reversed(toolbar.enabled_panels):
+            panel.disable_instrumentation()
+
+        # Collapse the toolbar by default if SHOW_COLLAPSED is set.
+        if toolbar.config['SHOW_COLLAPSED'] and 'djdt' not in request.COOKIES:
+            response.set_cookie('djdt', 'hide', 864000)
+
+        content = force_text(response.content, encoding='utf-8')
+        if 'text/html' not in response['Content-Type']:
+            if 'application/json' in response['Content-Type']:
+                content = json.dumps(json.loads(content), indent=2)
+            response['Content-Type'] = 'text/html'
+            response.content = '<body><h1>Debugger</h1><pre>{}</pre></body>'.format(content)
+
+        # Insert the toolbar in the response.
+        bits = self._body_regexp.split(content)
+        if len(bits) > 1:
+            bits[-2] += toolbar.render_toolbar()
+            print(bits)
+            response.content = '</body>'.join(bits)
+
+        response['Content-Length'] = len(response.content)
+        return response
diff --git a/src/sentry/debug/panels/__init__.py b/src/sentry/debug/panels/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/src/sentry/debug/panels/base.py b/src/sentry/debug/panels/base.py
new file mode 100644
index 0000000000..13b9442ddb
--- /dev/null
+++ b/src/sentry/debug/panels/base.py
@@ -0,0 +1,43 @@
+from __future__ import absolute_import
+
+from debug_toolbar.panels import Panel
+from django.utils.translation import ungettext
+
+
+class CallRecordingPanel(Panel):
+    def __init__(self, *args, **kwargs):
+        super(CallRecordingPanel, self).__init__(*args, **kwargs)
+        self.calls = []
+        self._context = []
+
+        for context in self.get_context():
+            self.add_context(context)
+
+    def get_context(self):
+        """
+        >>> def get_context(self):
+        >>>     return [
+        >>>         PatchContext('foo.bar', FunctionWrapper(self.calls))
+        >>>     ]
+        """
+        raise NotImplementedError
+
+    def add_context(self, context):
+        self._context.append(context)
+
+    def enable_instrumentation(self):
+        for context in self._context:
+            context.patch()
+
+    def disable_instrumentation(self):
+        for context in self._context:
+            context.unpatch()
+
+    @property
+    def nav_subtitle(self):
+        calls = len(self.calls)
+        duration = int(sum(((c['end'] - c['start']) for c in self.calls)) * 1000)
+
+        return ungettext('%(calls)d call in %(duration).2fms',
+                         '%(calls)d calls in %(duration).2fms',
+                         calls) % {'calls': calls, 'duration': duration}
diff --git a/src/sentry/debug/panels/redis.py b/src/sentry/debug/panels/redis.py
new file mode 100644
index 0000000000..62742b263f
--- /dev/null
+++ b/src/sentry/debug/panels/redis.py
@@ -0,0 +1,109 @@
+from __future__ import absolute_import, unicode_literals
+
+from django.template import Context, Template
+from django.utils.translation import ugettext_lazy as _
+from time import time
+
+from .base import CallRecordingPanel
+from ..utils.function_wrapper import FunctionWrapper
+from ..utils.patch_context import PatchContext
+
+TEMPLATE = Template("""
+{% load i18n %}
+<h4>{% trans "Requests" %}</h4>
+<table>
+    <thead>
+        <tr>
+            <th>{% trans "Duration" %}</th>
+            <th>{% trans "Command" %}</th>
+            <th>{% trans "Args" %}</th>
+        </tr>
+    </thead>
+    <tbody>
+        {% for call in calls %}
+        <tr>
+            <td>{{ call.duration }} ms</td>
+            <td>{{ call.command }}</td>
+            <td>{{ call.args }} {{ call.kwargs }}</td>
+        </tr>
+        {% endfor %}
+    </tbody>
+</table>
+""")
+
+
+class RedisPipelineWrapper(FunctionWrapper):
+    def __call__(self, func, pipeline, *args, **kwargs):
+        __traceback_hide__ = True  # NOQA
+
+        command_stack = pipeline.command_stack[:]
+
+        start = time()
+        try:
+            return func(pipeline, *args, **kwargs)
+        finally:
+            end = time()
+
+            data = {
+                'name': 'pipeline',
+                'args': repr(command_stack),
+                'kwargs': repr({}),
+                'start': start,
+                'end': end,
+            }
+
+            self.record(data)
+
+
+class RedisWrapper(FunctionWrapper):
+    def __call__(self, func, *args, **kwargs):
+        __traceback_hide__ = True  # NOQA
+
+        start = time()
+        try:
+            return func(*args, **kwargs)
+        finally:
+            end = time()
+
+            data = {
+                'name': args[1],
+                'args': repr(args[2:]),
+                'kwargs': repr(kwargs),
+                'start': start,
+                'end': end,
+            }
+            self.record(data)
+
+
+class RedisPanel(CallRecordingPanel):
+    title = nav_title = _("Redis")
+
+    def get_context(self):
+        return [
+            PatchContext('redis.client.StrictRedis.execute_command', RedisWrapper(self.calls)),
+            PatchContext('redis.client.BasePipeline.execute', RedisPipelineWrapper(self.calls)),
+        ]
+
+    @property
+    def content(self):
+        stats = self.get_stats()
+        return TEMPLATE.render(Context(stats))
+
+    def process_response(self, request, response):
+        calls = []
+        total_time = 0
+        for call in self.calls:
+            duration = int((call['end'] - call['start']) * 1000)
+
+            total_time += duration
+            calls.append({
+                'duration': duration,
+                'command': call['name'],
+                'args': call['args'],
+                'kwargs': call['kwargs'],
+            })
+
+        self.record_stats({
+            'calls': calls,
+            'total_time': total_time,
+        })
diff --git a/src/sentry/debug/panels/route.py b/src/sentry/debug/panels/route.py
new file mode 100644
index 0000000000..507dc2b832
--- /dev/null
+++ b/src/sentry/debug/panels/route.py
@@ -0,0 +1,70 @@
+from __future__ import absolute_import
+
+from django.template import Context, Template
+from debug_toolbar.panels import Panel
+
+TEMPLATE = Template("""
+{% load i18n %}
+<h4>{% trans "Route" %}</h4>
+<table>
+    <tr>
+        <th>Response Code</th>
+        <td>{{ response_code }}</td>
+    </tr>
+    <tr>
+        <th>View</th>
+        <td><code>{{ view_path }}</code></td>
+    </tr>
+    <tr>
+        <th>Args</th>
+        <td><code>{{ view_argspec }}</code></td>
+    </tr>
+</table>
+""")
+
+
+class RoutePanel(Panel):
+    title = "Route"
+
+    template = 'sentry/debug/panels/route.html'
+
+    has_content = True
+
+    def _get_func_name(self, func):
+        if hasattr(func, 'im_class'):
+            return '{}.{}.{}'.format(
+                func.__module__,
+                func.im_class.__name__,
+                func.__name__,
+            )
+        return '{}.{}'.format(func.__module__, func.__name__)
+
+    def _get_func_argspec(self, args, kwargs):
+        result = []
+        for arg in args:
+            result.append(arg)
+        for pair in kwargs.items():
+            result.append(u'%s=%s' % tuple(pair))
+        return u', '.join(result)
+
+    def nav_subtitle(self):
+        stats = self.get_stats()
+        return stats['view_name']
+
+    @property
+    def content(self):
+        stats = self.get_stats()
+        return TEMPLATE.render(Context(stats))
+
+    def process_view(self, request, view_func, view_args, view_kwargs):
+        self._view = [view_func, view_args, view_kwargs]
+
+    def process_response(self, request, response):
+        stats = {}
+        if hasattr(self, '_view'):
+            view_func, view_args, view_kwargs = self._view
+            stats['response_code'] = response.status_code
+            stats['view_name'] = view_func.__name__
+            stats['view_path'] = self._get_func_name(view_func)
+            stats['view_argspec'] = self._get_func_argspec(view_args, view_kwargs)
+        self.record_stats(stats)
diff --git a/src/sentry/debug/utils/__init__.py b/src/sentry/debug/utils/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/src/sentry/debug/utils/function_wrapper.py b/src/sentry/debug/utils/function_wrapper.py
new file mode 100644
index 0000000000..6b6fe69cdd
--- /dev/null
+++ b/src/sentry/debug/utils/function_wrapper.py
@@ -0,0 +1,35 @@
+from __future__ import absolute_import
+
+from time import time
+
+
+class FunctionWrapper(object):
+    def __init__(self, data):
+        self.data = data
+
+    def __call__(self, func, *args, **kwargs):
+        __traceback_hide__ = True  # NOQA
+
+        start = time()
+        try:
+            return func(*args, **kwargs)
+        finally:
+            end = time()
+
+            if getattr(func, 'im_class', None):
+                arg_str = repr(args[1:])
+            else:
+                arg_str = repr(args)
+
+            data = {
+                'name': func.__name__,
+                'args': arg_str,
+                'kwargs': repr(kwargs),
+                'start': start,
+                'end': end,
+            }
+
+            self.record(data)
+
+    def record(self, data):
+        self.data.append(data)
diff --git a/src/sentry/debug/utils/patch_context.py b/src/sentry/debug/utils/patch_context.py
new file mode 100644
index 0000000000..e68590a1ea
--- /dev/null
+++ b/src/sentry/debug/utils/patch_context.py
@@ -0,0 +1,38 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_string
+
+
+class PatchContext(object):
+    def __init__(self, target, callback):
+        target, attr = target.rsplit('.', 1)
+        target = import_string(target)
+        self.func = getattr(target, attr)
+        self.target = target
+        self.attr = attr
+        self.callback = callback
+
+    def __enter__(self):
+        self.patch()
+        return self
+
+    def __exit__(self, exc_type, exc_value, traceback):
+        self.unpatch()
+
+    def patch(self):
+        func = getattr(self.target, self.attr)
+
+        def wrapped(*args, **kwargs):
+            __traceback_hide__ = True  # NOQA
+            return self.callback(self.func, *args, **kwargs)
+
+        wrapped.__name__ = func.__name__
+        if hasattr(func, '__doc__'):
+            wrapped.__doc__ = func.__doc__
+        if hasattr(func, '__module__'):
+            wrapped.__module__ = func.__module__
+
+        setattr(self.target, self.attr, wrapped)
+
+    def unpatch(self):
+        setattr(self.target, self.attr, self.func)
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index 75daf7892c..0fe5d9e02d 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -115,3 +115,7 @@ class User(BaseModel, AbstractBaseUser):
 
     def get_display_name(self):
         return self.first_name or self.email or self.username
+
+    def is_active_superuser(self):
+        # TODO(dcramer): add VPN support via INTERNAL_IPS + ipaddr ranges
+        return self.is_superuser
diff --git a/src/sentry/templates/debug_toolbar/base.html b/src/sentry/templates/debug_toolbar/base.html
new file mode 100644
index 0000000000..5142e2a309
--- /dev/null
+++ b/src/sentry/templates/debug_toolbar/base.html
@@ -0,0 +1,56 @@
+{% load i18n %}{% load static from staticfiles %}
+<link rel="stylesheet" href="{% static 'debug_toolbar/css/print.css' %}" type="text/css" media="print" />
+<link rel="stylesheet" href="{% static 'debug_toolbar/css/toolbar.css' %}" type="text/css" />
+<script>var djdt = {jQuery: jQuery};</script>
+<script src="{% static 'debug_toolbar/js/toolbar.js' %}"></script>
+<div id="djDebug" hidden="hidden" dir="ltr"
+     data-store-id="{{ toolbar.store_id }}" data-render-panel-url="{% url 'djdt:render_panel' %}"
+     {{ toolbar.config.ROOT_TAG_EXTRA_ATTRS|safe }}>
+    <div hidden="hidden" id="djDebugToolbar">
+        <ul id="djDebugPanelList">
+            {% for panel in toolbar.panels %}
+                <li class="djDebugPanelButton">
+                    <input type="checkbox" data-cookie="djdt{{ panel.panel_id }}" {% if panel.enabled %}checked="checked" title="{% trans "Disable for next and successive requests" %}"{% else %}title="{% trans "Enable for next and successive requests" %}"{% endif %} />
+                    {% if panel.has_content and panel.enabled %}
+                        <a href="#" title="{{ panel.title }}" class="{{ panel.panel_id }}">
+                    {% else %}
+                        <div class="djdt-contentless{% if not panel.enabled %} djdt-disabled{% endif %}">
+                    {% endif %}
+                    {{ panel.nav_title }}
+                    {% if panel.enabled %}
+                    {% with panel.nav_subtitle as subtitle %}
+                        {% if subtitle %}<br /><small>{{ subtitle }}</small>{% endif %}
+                    {% endwith %}
+                    {% endif %}
+                    {% if panel.has_content and panel.enabled %}
+                        </a>
+                    {% else %}
+                        </div>
+                    {% endif %}
+                </li>
+            {% endfor %}
+        </ul>
+    </div>
+    <div hidden="hidden" id="djDebugToolbarHandle">
+        <span title="{% trans "Show toolbar" %}" id="djShowToolBarButton">&#171;</span>
+    </div>
+    {% for panel in toolbar.panels %}
+        {% if panel.has_content and panel.enabled %}
+            <div id="{{ panel.panel_id }}" class="djdt-panelContent">
+                <div class="djDebugPanelTitle">
+                    <a href="" class="djDebugClose"></a>
+                    <h3>{{ panel.title|safe }}</h3>
+                </div>
+                <div class="djDebugPanelContent">
+                    {% if toolbar.store_id %}
+                    <img src="{% static 'debug_toolbar/img/ajax-loader.gif' %}" alt="loading" class="djdt-loader" />
+                    <div class="djdt-scroll"></div>
+                    {% else %}
+                    <div class="djdt-scroll">{{ panel.content }}</div>
+                    {% endif %}
+                </div>
+            </div>
+        {% endif %}
+    {% endfor %}
+    <div id="djDebugWindow" class="djdt-panelContent"></div>
+</div>
