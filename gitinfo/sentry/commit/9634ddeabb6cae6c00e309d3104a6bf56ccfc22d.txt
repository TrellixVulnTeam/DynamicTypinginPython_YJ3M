commit 9634ddeabb6cae6c00e309d3104a6bf56ccfc22d
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Tue Mar 3 18:12:32 2020 -0800

    Revert "ref(guides): Refactor assistant guides (#17353)"
    
    This reverts commit 91c0af0cedef1901379ee36c75463aa1ab699a77.

diff --git a/src/sentry/api/endpoints/assistant.py b/src/sentry/api/endpoints/assistant.py
index 7c12f47431..559bf9c49e 100644
--- a/src/sentry/api/endpoints/assistant.py
+++ b/src/sentry/api/endpoints/assistant.py
@@ -1,6 +1,8 @@
 from __future__ import absolute_import
 
-from django.db import IntegrityError
+from copy import deepcopy
+
+from django.db import IntegrityError, transaction
 from django.http import HttpResponse
 from django.utils import timezone
 from rest_framework import serializers
@@ -16,21 +18,18 @@ VALID_STATUSES = frozenset(("viewed", "dismissed"))
 
 
 class AssistantSerializer(serializers.Serializer):
-    guide = serializers.CharField(required=True)
+    guide_id = serializers.IntegerField(required=True)
     status = serializers.ChoiceField(choices=zip(VALID_STATUSES, VALID_STATUSES), required=True)
     useful = serializers.BooleanField()
 
-    def validate(self, attrs):
-        guide = attrs.get("guide")
-        if not guide:
-            raise serializers.ValidationError("Assistant guide is required")
-
-        guide_id = manager.get_id_by_name(guide)
-        if not guide_id:
-            raise serializers.ValidationError("Not a valid assistant guide")
+    def validate_guide_id(self, value):
+        valid_ids = manager.get_valid_ids()
 
-        attrs["guide_id"] = guide_id
-        return attrs
+        if not value:
+            raise serializers.ValidationError("Assistant guide id is required")
+        if value not in valid_ids:
+            raise serializers.ValidationError("Not a valid assistant guide id")
+        return value
 
 
 class AssistantEndpoint(Endpoint):
@@ -38,22 +37,19 @@ class AssistantEndpoint(Endpoint):
 
     def get(self, request):
         """Return all the guides with a 'seen' attribute if it has been 'viewed' or 'dismissed'."""
-        active_guides = manager.all()
+        guides = deepcopy(manager.all())
         seen_ids = set(
             AssistantActivity.objects.filter(user=request.user).values_list("guide_id", flat=True)
         )
-
-        guides = [
-            {"guide": guide.name.lower(), "seen": guide.value in seen_ids}
-            for guide in active_guides
-        ]
+        for k, v in guides.items():
+            v["seen"] = v["id"] in seen_ids
         return Response(guides)
 
     def put(self, request):
         """Mark a guide as viewed or dismissed.
 
         Request is of the form {
-            'guide': guide key (e.g. 'issue_details'),
+            'guide_id': <guide_id>,
             'status': 'viewed' / 'dismissed',
             'useful' (optional): true / false,
         }
@@ -62,11 +58,9 @@ class AssistantEndpoint(Endpoint):
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        data = serializer.validated_data
-
-        guide_id = data["guide_id"]
-        status = data["status"]
-        useful = data.get("useful")
+        guide_id = request.data["guide_id"]
+        status = request.data["status"]
+        useful = request.data.get("useful")
 
         fields = {}
         if useful is not None:
@@ -77,7 +71,8 @@ class AssistantEndpoint(Endpoint):
             fields["dismissed_ts"] = timezone.now()
 
         try:
-            AssistantActivity.objects.create(user=request.user, guide_id=guide_id, **fields)
+            with transaction.atomic():
+                AssistantActivity.objects.create(user=request.user, guide_id=guide_id, **fields)
         except IntegrityError:
             pass
 
diff --git a/src/sentry/assistant/__init__.py b/src/sentry/assistant/__init__.py
index 96b695761d..c37d611ce5 100644
--- a/src/sentry/assistant/__init__.py
+++ b/src/sentry/assistant/__init__.py
@@ -1,10 +1,7 @@
 from __future__ import absolute_import
 
 from .manager import AssistantManager
-from .guides import AssistantGuide
+from .guides import GUIDES
 
 manager = AssistantManager()
-
-manager.add(AssistantGuide.ISSUE_DETAILS)
-manager.add(AssistantGuide.ISSUE_STREAM)
-manager.add(AssistantGuide.DISCOVER_SIDEBAR)
+manager.add(GUIDES)
diff --git a/src/sentry/assistant/guides.py b/src/sentry/assistant/guides.py
index 5f30a9778e..d93b738f22 100644
--- a/src/sentry/assistant/guides.py
+++ b/src/sentry/assistant/guides.py
@@ -1,9 +1,127 @@
 from __future__ import absolute_import
 
-from enum import Enum
+from django.utils.translation import ugettext_lazy as _
 
 
-class AssistantGuide(Enum):
-    ISSUE_DETAILS = 1
-    ISSUE_STREAM = 3
-    DISCOVER_SIDEBAR = 4
+# Guide Schema
+# id (text, required): unique id
+# required_targets (list): An empty list will cause the guide to be shown regardless
+#                          of page/targets presence.
+# steps (list): List of steps
+
+# Step Schema
+# title (text, required): Title text. Tone should be active.
+# message (text, optional): Message text. Should help illustrate how to do a task, not
+#                           just literally what the button does.
+# target (text, optional): step is tied to an anchor target. If the anchor doesn't exist,
+#                          the step will not be shown. if the anchor exists but is of type
+#                         "invisible", it will not be pinged but will be scrolled to.
+#                          otherwise the anchor will be pinged and scrolled to. If you'd like
+#                          your step to show always or have a step is not tied to a specific
+#                          element but you'd still like it to be shown, set this as None.
+
+GUIDES = {
+    "issue": {
+        "id": 1,
+        "required_targets": ["issue_title", "exception"],
+        "steps": [
+            {
+                "title": _("Issue Details"),
+                "message": _(
+                    "The issue page contains all the details about an issue. Let's get started."
+                ),
+                "target": "issue_title",
+            },
+            {
+                "title": _("Stacktrace"),
+                "message": _(
+                    "See the sequence of function calls that led to the error, and "
+                    "global/local variables for each stack frame."
+                ),
+                "target": "exception",
+            },
+            {
+                "title": _("Breadcrumbs"),
+                "message": _(
+                    "Breadcrumbs are a trail of events that happened prior to the error. They're "
+                    "similar to traditional logs but can record more rich structured data. "
+                    "When Sentry is used with web frameworks, breadcrumbs are automatically "
+                    "captured for events like database calls and network requests."
+                ),
+                "target": "breadcrumbs",
+            },
+            {
+                "title": _("Tags"),
+                "message": _(
+                    "Attach arbitrary key-value pairs to each event which you can search and filter on. "
+                    "View a heatmap of all tags for an issue on the right panel. "
+                ),
+                "target": "tags",
+            },
+            {
+                "title": _("Resolve"),
+                "message": _(
+                    "Resolve an issue to remove it from your issue list. "
+                    'Sentry can also <a href="/settings/account/notifications/" target="_blank"> '
+                    "alert you</a> when a new issue occurs or a resolved issue re-occurs."
+                ),
+                "target": "resolve",
+            },
+            {
+                "title": _("Delete and Ignore"),
+                "message": _(
+                    "Delete an issue to remove it from your issue list until it happens again. "
+                    "Ignore an issue to remove it permanently or until certain conditions are met."
+                ),
+                "target": "ignore_delete_discard",
+            },
+            {
+                "title": _("Issue Number"),
+                "message": _(
+                    "Include this unique identifier in your commit message to have Sentry automatically "
+                    "resolve the issue when your code is deployed. "
+                    '<a href="https://docs.sentry.io/learn/releases/" target="_blank">Learn more</a>.'
+                ),
+                "target": "issue_number",
+            },
+            {
+                "title": _("Ownership Rules"),
+                "message": _(
+                    "Define users or teams responsible for specific file paths or URLs so "
+                    "that alerts can be routed to the right person. "
+                    '<a href="https://docs.sentry.io/learn/issue-owners/" target="_blank">Learn more</a>.'
+                ),
+                "target": "owners",
+            },
+        ],
+    },
+    "issue_stream": {
+        "id": 3,
+        "required_targets": ["issue_stream"],
+        "steps": [
+            {
+                "title": _("Issues"),
+                "message": _(
+                    "Sentry automatically groups similar events together into an issue. Similarity "
+                    "is determined by stacktrace and other factors. "
+                    '<a href="https://docs.sentry.io/data-management/rollups/" target="_blank">Learn more</a>. '
+                ),
+                "target": "issue_stream",
+            }
+        ],
+    },
+    "discover_sidebar": {
+        "id": 4,
+        "required_targets": ["discover_sidebar"],
+        "steps": [
+            {
+                "title": _("Event Pages have moved"),
+                "message": _(
+                    "These are now in our powerful new query builder, Discover "
+                    '<a href="https://docs.sentry.io/workflow/discover2/" target="_blank">Learn more about its advanced features</a>. '
+                ),
+                "target": "discover_sidebar",
+            }
+        ],
+    },
+}
diff --git a/src/sentry/assistant/manager.py b/src/sentry/assistant/manager.py
index 9269e5becc..5750387f95 100644
--- a/src/sentry/assistant/manager.py
+++ b/src/sentry/assistant/manager.py
@@ -1,20 +1,17 @@
 from __future__ import absolute_import
-
-from enum import Enum
+import six
 
 
 class AssistantManager(object):
     def __init__(self):
-        self._guides = []
+        self._guides = {}
 
-    def add(self, guide):
-        if isinstance(guide, Enum):
-            self._guides.append(guide)
+    def add(self, guides):
+        for k, v in six.iteritems(guides):
+            self._guides[k] = v
 
-    def get_id_by_name(self, name):
-        for guide in self._guides:
-            if name == guide.name.lower():
-                return guide.value
+    def get_valid_ids(self):
+        return list(v["id"] for k, v in six.iteritems(self._guides))
 
     def all(self):
         return self._guides
diff --git a/src/sentry/static/sentry/app/actionCreators/guides.tsx b/src/sentry/static/sentry/app/actionCreators/guides.jsx
similarity index 64%
rename from src/sentry/static/sentry/app/actionCreators/guides.tsx
rename to src/sentry/static/sentry/app/actionCreators/guides.jsx
index 43e356b6b8..3f46535d3e 100644
--- a/src/sentry/static/sentry/app/actionCreators/guides.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/guides.jsx
@@ -13,12 +13,12 @@ export function fetchGuides() {
   });
 }
 
-export function registerAnchor(target: string) {
-  GuideActions.registerAnchor(target);
+export function registerAnchor(anchor) {
+  GuideActions.registerAnchor(anchor);
 }
 
-export function unregisterAnchor(target: string) {
-  GuideActions.unregisterAnchor(target);
+export function unregisterAnchor(anchor) {
+  GuideActions.unregisterAnchor(anchor);
 }
 
 export function nextStep() {
@@ -29,42 +29,46 @@ export function closeGuide() {
   GuideActions.closeGuide();
 }
 
-export function dismissGuide(guide: string, step: number, orgId: string) {
-  recordDismiss(guide, step, orgId);
+export function dismissGuide(guideId, step, org) {
+  recordDismiss(guideId, step, org);
   closeGuide();
 }
 
-export function recordFinish(guide: string, orgId: string) {
+export function recordFinish(guideId, org) {
   api.request('/assistant/', {
     method: 'PUT',
     data: {
-      guide,
+      guide_id: guideId,
       status: 'viewed',
     },
   });
   const data = {
     eventKey: 'assistant.guide_finished',
     eventName: 'Assistant Guide Finished',
-    guide,
-    organization_id: orgId,
+    guide: guideId,
   };
+  if (org) {
+    data.organization_id = org.id;
+  }
   trackAnalyticsEvent(data);
 }
 
-export function recordDismiss(guide: string, step: number, orgId: string) {
+export function recordDismiss(guideId, step, org) {
   api.request('/assistant/', {
     method: 'PUT',
     data: {
-      guide,
+      guide_id: guideId,
       status: 'dismissed',
     },
   });
   const data = {
     eventKey: 'assistant.guide_dismissed',
     eventName: 'Assistant Guide Dismissed',
-    guide,
+    guide: guideId,
     step,
-    organization_id: orgId,
   };
+  if (org) {
+    data.organization_id = org.id;
+  }
   trackAnalyticsEvent(data);
 }
diff --git a/src/sentry/static/sentry/app/components/assistant/getGuidesContent.tsx b/src/sentry/static/sentry/app/components/assistant/getGuidesContent.tsx
deleted file mode 100644
index a8ad60c943..0000000000
--- a/src/sentry/static/sentry/app/components/assistant/getGuidesContent.tsx
+++ /dev/null
@@ -1,122 +0,0 @@
-import React from 'react';
-
-import {t, tct} from 'app/locale';
-import {GuidesContent} from 'app/components/assistant/types';
-import ExternalLink from 'app/components/links/externalLink';
-
-export default function getGuidesContent(): GuidesContent {
-  return [
-    {
-      guide: 'issue_details',
-      requiredTargets: ['issue-title', 'exception'],
-      steps: [
-        {
-          title: t('Issue Details'),
-          target: 'issue-title',
-          description: t(
-            "The issue page contains all the details about an issue. Let's get started."
-          ),
-        },
-        {
-          title: t('Stacktrace'),
-          target: 'exception',
-          description: t(
-            `See the sequence of function calls that led to the error, and global/local variables
-            for each stack frame.`
-          ),
-        },
-        {
-          title: t('Breadcrumbs'),
-          target: 'breadcrumbs',
-          description: t(
-            `Breadcrumbs are a trail of events that happened prior to the error. They're similar
-            to traditional logs but can record more rich structured data. When Sentry is used with
-            web frameworks, breadcrumbs are automatically captured for events like database calls and
-            network requests.`
-          ),
-        },
-        {
-          title: t('Tags'),
-          target: 'tags',
-          description: t(
-            `Attach arbitrary key-value pairs to each event which you can search and filter on.
-            View a heatmap of all tags for an issue on the right panel.`
-          ),
-        },
-        {
-          title: t('Resolve'),
-          target: 'resolve',
-          description: tct(
-            `Resolve an issue to remove it from your issue list. Sentry can also [link:alert you]
-            when a new issue occurs or a resolved issue re-occurs.`,
-            {link: <ExternalLink href="/settings/account/notifications/" />}
-          ),
-        },
-        {
-          title: t('Delete and Ignore'),
-          target: 'ignore-delete-discard',
-          description: t(
-            `Delete an issue to remove it from your issue list until it happens again.
-            Ignore an issue to remove it permanently or until certain conditions are met.`
-          ),
-        },
-        {
-          title: t('Issue Number'),
-          target: 'issue-number',
-          description: tct(
-            `Include this unique identifier in your commit message to have Sentry automatically
-            resolve the issue when your code is deployed. [link:Learn more].`,
-            {link: <ExternalLink href="https://docs.sentry.io/learn/releases/" />}
-          ),
-        },
-        {
-          title: t('Ownership Rules'),
-          target: 'owners',
-          description: tct(
-            `Define users or teams responsible for specific file paths or URLs so that alerts can
-            be routed to the right person. [link:Learn more]`,
-            {
-              link: <ExternalLink href="https://docs.sentry.io/learn/issue-owners/" />,
-            }
-          ),
-        },
-      ],
-    },
-    {
-      guide: 'issue_stream',
-      requiredTargets: ['issue-stream'],
-      steps: [
-        {
-          title: t('Issues'),
-          target: 'issue-stream',
-          description: tct(
-            `Sentry automatically groups similar events together into an issue. Similarity is
-            determined by stacktrace and other factors. [link:Learn more].`,
-            {
-              link: (
-                <ExternalLink href="https://docs.sentry.io/data-management/rollups/" />
-              ),
-            }
-          ),
-        },
-      ],
-    },
-    {
-      guide: 'discover_sidebar',
-      requiredTargets: ['discover-sidebar'],
-      steps: [
-        {
-          title: t('Event Pages have moved'),
-          target: 'discover-sidebar',
-          description: tct(
-            `These are now in our powerful new query builder, Discover.
-            [link:Learn more about its advanced features].`,
-            {
-              link: <ExternalLink href="https://docs.sentry.io/workflow/discover2/" />,
-            }
-          ),
-        },
-      ],
-    },
-  ];
-}
diff --git a/src/sentry/static/sentry/app/components/assistant/guideAnchor.tsx b/src/sentry/static/sentry/app/components/assistant/guideAnchor.jsx
similarity index 63%
rename from src/sentry/static/sentry/app/components/assistant/guideAnchor.tsx
rename to src/sentry/static/sentry/app/components/assistant/guideAnchor.jsx
index d1f707e9d0..c2b9c2e237 100644
--- a/src/sentry/static/sentry/app/components/assistant/guideAnchor.tsx
+++ b/src/sentry/static/sentry/app/components/assistant/guideAnchor.jsx
@@ -2,9 +2,9 @@ import {ClassNames} from '@emotion/core';
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
+import $ from 'jquery';
 import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
-import * as Sentry from '@sentry/browser';
 
 import theme from 'app/utils/theme';
 import {
@@ -15,94 +15,78 @@ import {
   recordFinish,
   dismissGuide,
 } from 'app/actionCreators/guides';
-import {CloseIcon} from 'app/components/assistant/styles';
-import {Guide} from 'app/components/assistant/types';
-import {t} from 'app/locale';
 import GuideStore from 'app/stores/guideStore';
 import Hovercard from 'app/components/hovercard';
 import Button from 'app/components/button';
 import space from 'app/styles/space';
+import {t} from 'app/locale';
+import {CloseIcon} from 'app/components/assistant/styles';
 
-type Props = {
-  target: string;
-  position?: string;
-};
-
-type State = {
-  active: boolean;
-  orgId: string | null;
-  currentGuide?: Guide;
-  step?: number;
-};
-
-/**
- * A GuideAnchor puts an informative hovercard around an element.
- * Guide anchors register with the GuideStore, which uses registrations
- * from one or more anchors on the page to determine which guides can
- * be shown on the page.
- */
-const GuideAnchor = createReactClass<Props, State>({
+// A GuideAnchor puts an informative hovercard around an element.
+// Guide anchors register with the GuideStore, which uses registrations
+// from one or more anchors on the page to determine which guides can
+// be shown on the page.
+const GuideAnchor = createReactClass({
   propTypes: {
     target: PropTypes.string.isRequired,
     position: PropTypes.string,
   },
 
-  mixins: [Reflux.listenTo(GuideStore, 'onGuideStateChange') as any],
+  mixins: [Reflux.listenTo(GuideStore, 'onGuideStateChange')],
 
   getInitialState() {
     return {
       active: false,
-      orgId: null,
     };
   },
 
   componentDidMount() {
-    const {target} = this.props;
-    target && registerAnchor(target);
+    registerAnchor(this);
   },
 
   componentDidUpdate(_prevProps, prevState) {
     if (this.containerElement && !prevState.active && this.state.active) {
-      try {
-        const {top} = this.containerElement.getBoundingClientRect();
-        const scrollTop = window.pageYOffset;
-        const centerElement = top + scrollTop - window.innerHeight / 2;
-        window.scrollTo({top: centerElement});
-      } catch (err) {
-        Sentry.captureException(err);
-      }
+      const windowHeight = $(window).height();
+      $('html,body').animate({
+        scrollTop: $(this.containerElement).offset().top - windowHeight / 2,
+      });
     }
   },
 
   componentWillUnmount() {
-    const {target} = this.props;
-    target && unregisterAnchor(target);
+    unregisterAnchor(this);
   },
 
   onGuideStateChange(data) {
     const active =
       data.currentGuide &&
       data.currentGuide.steps[data.currentStep].target === this.props.target;
-
     this.setState({
       active,
-      currentGuide: data.currentGuide,
+      guide: data.currentGuide,
       step: data.currentStep,
-      orgId: data.orgId,
+      org: data.org,
+      messageVariables: {
+        orgSlug: data.org && data.org.slug,
+        projectSlug: data.project && data.project.slug,
+      },
     });
   },
 
-  /**
-   * Terminology:
-   *
-   *  - A guide can be FINISHED by clicking one of the buttons in the last step
-   *  - A guide can be DISMISSED by x-ing out of it at any step except the last (where there is no x)
-   *  - In both cases we consider it CLOSED
-   */
+  interpolate(template, variables) {
+    const regex = /\${([^{]+)}/g;
+    return template.replace(regex, (_match, g1) => variables[g1.trim()]);
+  },
+
+  /* Terminology:
+   - A guide can be FINISHED by clicking one of the buttons in the last step.
+   - A guide can be DISMISSED by x-ing out of it at any step except the last (where there is no x).
+   - In both cases we consider it CLOSED.
+  */
   handleFinish(e) {
     e.stopPropagation();
-    const {currentGuide, orgId} = this.state;
-    recordFinish(currentGuide.guide, orgId);
+    const {guide, org} = this.state;
+    recordFinish(guide.id, org);
     closeGuide();
   },
 
@@ -113,12 +97,12 @@ const GuideAnchor = createReactClass<Props, State>({
 
   handleDismiss(e) {
     e.stopPropagation();
-    const {currentGuide, step, orgId} = this.state;
-    dismissGuide(currentGuide.guide, step, orgId);
+    const {guide, step, org} = this.state;
+    dismissGuide(guide.id, step, org);
   },
 
   render() {
-    const {active, currentGuide, step} = this.state;
+    const {active, guide, step, messageVariables} = this.state;
     if (!active) {
       return this.props.children ? this.props.children : null;
     }
@@ -126,24 +110,28 @@ const GuideAnchor = createReactClass<Props, State>({
     const body = (
       <GuideContainer>
         <GuideInputRow>
-          <StyledTitle>{currentGuide.steps[step].title}</StyledTitle>
-          {step < currentGuide.steps.length - 1 && (
+          <StyledTitle>{guide.steps[step].title}</StyledTitle>
+          {step < guide.steps.length - 1 && (
             <CloseLink onClick={this.handleDismiss} href="#" data-test-id="close-button">
               <CloseIcon />
             </CloseLink>
           )}
         </GuideInputRow>
         <StyledContent>
-          <div>{currentGuide.steps[step].description}</div>
+          <div
+            dangerouslySetInnerHTML={{
+              __html: this.interpolate(guide.steps[step].message, messageVariables),
+            }}
+          />
           <Actions>
             <div>
-              {step < currentGuide.steps.length - 1 ? (
+              {step < guide.steps.length - 1 ? (
                 <Button priority="success" size="small" onClick={this.handleNextStep}>
-                  {t('Next')}
+                  {t('Next')} &rarr;
                 </Button>
               ) : (
                 <Button priority="success" size="small" onClick={this.handleFinish}>
-                  {t(currentGuide.steps.length === 1 ? 'Got It' : 'Done')}
+                  {t(guide.steps.length === 1 ? 'Got It' : 'Done')}
                 </Button>
               )}
             </div>
diff --git a/src/sentry/static/sentry/app/components/assistant/types.tsx b/src/sentry/static/sentry/app/components/assistant/types.tsx
deleted file mode 100644
index 6b3d5edf02..0000000000
--- a/src/sentry/static/sentry/app/components/assistant/types.tsx
+++ /dev/null
@@ -1,33 +0,0 @@
-export type GuideStep = {
-  title: string;
-  /**
-   * Step is tied to an anchor target. If the anchor doesn't exist,
-   * the step will not be shown. If the anchor exists but is of type
-   * "invisible", it will not be pinged but will be scrolled to.
-   * Otherwise the anchor will be pinged and scrolled to.
-   */
-  target: string;
-  description: React.ReactNode;
-};
-
-export type Guide = {
-  guide: string;
-  requiredTargets: string[];
-  steps: GuideStep[];
-  seen?: boolean;
-};
-
-export type GuidesContent = {
-  guide: string;
-  /**
-   * Anchor targets required on the page. An empty list will cause the
-   * guide to be shown regardless.
-   */
-  requiredTargets: string[];
-  steps: GuideStep[];
-}[];
-
-export type GuidesServerData = {
-  guide: string;
-  seen: boolean;
-}[];
diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index e2cd65172f..346c15e917 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -365,7 +365,7 @@ class Sidebar extends React.Component {
                       features={['discover-basic']}
                       organization={organization}
                     >
-                      <GuideAnchor position="right" target="discover-sidebar">
+                      <GuideAnchor position="right" target="discover_sidebar">
                         <SidebarItem
                           {...sidebarItemProps}
                           onClick={(_id, evt) =>
diff --git a/src/sentry/static/sentry/app/components/stream/group.jsx b/src/sentry/static/sentry/app/components/stream/group.jsx
index 0dadd85388..93cb862256 100644
--- a/src/sentry/static/sentry/app/components/stream/group.jsx
+++ b/src/sentry/static/sentry/app/components/stream/group.jsx
@@ -110,7 +110,7 @@ const StreamGroup = createReactClass({
           <EventOrGroupHeader data={data} query={query} />
           <EventOrGroupExtraDetails {...data} />
         </GroupSummary>
-        {hasGuideAnchor && <GuideAnchor target="issue-stream" />}
+        {hasGuideAnchor && <GuideAnchor target="issue_stream" />}
         <Box width={160} mx={2} className="hidden-xs hidden-sm">
           <GroupChart id={data.id} statsPeriod={this.props.statsPeriod} data={data} />
         </Box>
diff --git a/src/sentry/static/sentry/app/stores/guideStore.jsx b/src/sentry/static/sentry/app/stores/guideStore.jsx
new file mode 100644
index 0000000000..704fdba866
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/guideStore.jsx
@@ -0,0 +1,187 @@
+import {browserHistory} from 'react-router';
+import Reflux from 'reflux';
+
+import GuideActions from 'app/actions/guideActions';
+import OrganizationsActions from 'app/actions/organizationsActions';
+import ProjectActions from 'app/actions/projectActions';
+import {Client} from 'app/api';
+import ConfigStore from 'app/stores/configStore';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
+
+const GuideStore = Reflux.createStore({
+  init() {
+    this.state = {
+      // All guides returned to us from the server.
+      guides: {},
+      // All anchors that are currently mounted.
+      anchors: new Set(),
+      // The "on deck" guide.
+      currentGuide: null,
+      // Current step of the current guide (0-indexed).
+      currentStep: 0,
+      // Current organization.
+      org: null,
+      // Current project.
+      project: null,
+      // We force show a guide if the URL contains #assistant.
+      forceShow: false,
+      // The previously shown guide.
+      prevGuide: null,
+    };
+
+    this.api = new Client();
+    this.listenTo(GuideActions.fetchSucceeded, this.onFetchSucceeded);
+    this.listenTo(GuideActions.closeGuide, this.onCloseGuide);
+    this.listenTo(GuideActions.nextStep, this.onNextStep);
+    this.listenTo(GuideActions.registerAnchor, this.onRegisterAnchor);
+    this.listenTo(GuideActions.unregisterAnchor, this.onUnregisterAnchor);
+    this.listenTo(OrganizationsActions.setActive, this.onSetActiveOrganization);
+    this.listenTo(ProjectActions.setActive, this.onSetActiveProject);
+    this.listenTo(OrganizationsActions.changeSlug, this.onChangeOrgSlug);
+
+    window.addEventListener('load', this.onURLChange, false);
+    browserHistory.listen(() => this.onURLChange());
+  },
+
+  onURLChange() {
+    this.state.forceShow = window.location.hash === '#assistant';
+    this.updateCurrentGuide();
+  },
+
+  onSetActiveOrganization(data) {
+    this.state.org = data;
+    this.updateCurrentGuide();
+  },
+
+  onSetActiveProject(data) {
+    this.state.project = data;
+    this.updateCurrentGuide();
+  },
+
+  onChangeOrgSlug(_prev, next) {
+    this.state.org = next;
+    this.updateCurrentGuide();
+  },
+
+  onFetchSucceeded(data) {
+    // It's possible we can get empty responses (seems to be Firefox specific)
+    // Do nothing if `data` is empty
+    if (!data) {
+      return;
+    }
+
+    this.state.guides = data;
+    this.updateCurrentGuide();
+  },
+
+  onCloseGuide() {
+    const {currentGuide} = this.state;
+    this.state.guides[
+      Object.keys(this.state.guides).find(
+        key => this.state.guides[key].id === currentGuide.id
+      )
+    ].seen = true;
+    // Don't continue to force show if the user dismissed the guide.
+    this.state.forceShow = false;
+    this.updateCurrentGuide();
+  },
+
+  onNextStep() {
+    this.state.currentStep += 1;
+    this.trigger(this.state);
+  },
+
+  onRegisterAnchor(anchor) {
+    this.state.anchors.add(anchor);
+    this.updateCurrentGuide();
+  },
+
+  onUnregisterAnchor(anchor) {
+    this.state.anchors.delete(anchor);
+    this.updateCurrentGuide();
+  },
+
+  recordCue(id) {
+    const data = {
+      eventKey: 'assistant.guide_cued',
+      eventName: 'Assistant Guide Cued',
+      guide: id,
+    };
+    if (this.state.org) {
+      data.organization_id = this.state.org.id;
+    }
+    trackAnalyticsEvent(data);
+  },
+
+  updatePrevGuide(bestGuide) {
+    if (!bestGuide) {
+      return;
+    }
+
+    if (!this.state.prevGuide || this.state.prevGuide.id !== bestGuide.id) {
+      this.recordCue(bestGuide.id);
+      this.state.prevGuide = bestGuide;
+    }
+  },
+
+  updateCurrentGuide() {
+    // Logic to determine if a guide is shown:
+    // 1. If any required target is missing, don't show the guide.
+    // 2. If the URL ends with #assistant, show the guide.
+    // 3. If the user has seen the guide or is an old non-superuser, don't show the guide.
+    // 4. Otherwise show the guide.
+
+    const availableTargets = [...this.state.anchors].map(a => a.props.target);
+
+    // sort() so that we pick a guide deterministically every time this function is called.
+    let guideKeys = Object.keys(this.state.guides)
+      .sort()
+      .filter(key =>
+        this.state.guides[key].required_targets.every(
+          t => availableTargets.indexOf(t) >= 0
+        )
+      );
+
+    if (!this.state.forceShow) {
+      const user = ConfigStore.get('user');
+
+      // Don't show guides to users who signed up way before these changes were implemented
+      const assistantThreshold = new Date(2019, 6, 1);
+      // Spam existing users about the discover tab, but not new signups.
+      const discoverDate = new Date(2020, 1, 6);
+      const userDateJoined = new Date(user?.dateJoined);
+
+      guideKeys = guideKeys.filter(key => {
+        if (this.state.guides[key].seen) {
+          return false;
+        }
+        if (user?.isSuperuser) {
+          return true;
+        }
+        if (key === 'discover_sidebar' && userDateJoined >= discoverDate) {
+          return false;
+        }
+        return userDateJoined > assistantThreshold;
+      });
+    }
+
+    let bestGuide = null;
+    if (guideKeys.length > 0) {
+      bestGuide = {
+        ...this.state.guides[guideKeys[0]],
+
+        // Remove steps that don't have an anchor on the page.
+        steps: this.state.guides[guideKeys[0]].steps.filter(
+          step => step.target && availableTargets.indexOf(step.target) >= 0
+        ),
+      };
+    }
+
+    this.updatePrevGuide(bestGuide);
+    this.state.currentGuide = bestGuide;
+    this.state.currentStep = 0;
+    this.trigger(this.state);
+  },
+});
+
+export default GuideStore;
diff --git a/src/sentry/static/sentry/app/stores/guideStore.tsx b/src/sentry/static/sentry/app/stores/guideStore.tsx
deleted file mode 100644
index b0ce1949d4..0000000000
--- a/src/sentry/static/sentry/app/stores/guideStore.tsx
+++ /dev/null
@@ -1,212 +0,0 @@
-import {browserHistory} from 'react-router';
-import Reflux from 'reflux';
-
-import {Client} from 'app/api';
-import {Guide, GuidesServerData, GuidesContent} from 'app/components/assistant/types';
-import {trackAnalyticsEvent} from 'app/utils/analytics';
-import ConfigStore from 'app/stores/configStore';
-import getGuidesContent from 'app/components/assistant/getGuidesContent';
-import GuideActions from 'app/actions/guideActions';
-import OrganizationsActions from 'app/actions/organizationsActions';
-
-const guidesContent: GuidesContent = getGuidesContent();
-
-type GuideStoreState = {
-  /**
-   * All tooltip guides
-   */
-  guides: Guide[];
-  /**
-   * Anchors that are currently mounted
-   */
-  anchors: Set<string>;
-  /**
-   * The current guide
-   */
-  currentGuide: Guide | null;
-  /**
-   * Current step of the current guide
-   */
-  currentStep: number;
-  /**
-   * Current organization id
-   */
-  orgId: string | null;
-  /**
-   * We force show a guide if the URL contains #assistant
-   */
-  forceShow: boolean;
-  /**
-   * The previously shown guide
-   */
-  prevGuide: Guide | null;
-};
-
-const defaultState: GuideStoreState = {
-  guides: [],
-  anchors: new Set(),
-  currentGuide: null,
-  currentStep: 0,
-  orgId: null,
-  forceShow: false,
-  prevGuide: null,
-};
-
-type GuideStoreInterface = {
-  state: GuideStoreState;
-
-  onFetchSucceeded: (data: GuidesServerData) => void;
-  onRegisterAnchor: (target: string) => void;
-  onUnregisterAnchor: (target: string) => void;
-  recordCue: (guide: string) => void;
-  updatePrevGuide: (nextGuide: Guide | null) => void;
-};
-
-const guideStoreConfig: Reflux.StoreDefinition & GuideStoreInterface = {
-  state: defaultState,
-
-  init() {
-    this.state = defaultState;
-
-    this.api = new Client();
-    this.listenTo(GuideActions.fetchSucceeded, this.onFetchSucceeded);
-    this.listenTo(GuideActions.closeGuide, this.onCloseGuide);
-    this.listenTo(GuideActions.nextStep, this.onNextStep);
-    this.listenTo(GuideActions.registerAnchor, this.onRegisterAnchor);
-    this.listenTo(GuideActions.unregisterAnchor, this.onUnregisterAnchor);
-    this.listenTo(OrganizationsActions.setActive, this.onSetActiveOrganization);
-
-    window.addEventListener('load', this.onURLChange, false);
-    browserHistory.listen(() => this.onURLChange());
-  },
-
-  onURLChange() {
-    this.state.forceShow = window.location.hash === '#assistant';
-    this.updateCurrentGuide();
-  },
-
-  onSetActiveOrganization(data) {
-    this.state.orgId = data ? data.id : null;
-    this.updateCurrentGuide();
-  },
-
-  onFetchSucceeded(data) {
-    // It's possible we can get empty responses (seems to be Firefox specific)
-    // Do nothing if `data` is empty
-    if (!data) {
-      return;
-    }
-
-    // map server guide state (i.e. seen status) with guide content
-    const guides = guidesContent.map(guideContent => ({
-      ...guideContent,
-      ...data.find(serverGuide => serverGuide.guide === guideContent.guide),
-    }));
-
-    this.state.guides = guides;
-    this.updateCurrentGuide();
-  },
-
-  onCloseGuide() {
-    const {currentGuide} = this.state;
-    this.state.guides.map(guide => {
-      if (guide.guide === currentGuide?.guide) {
-        guide.seen = true;
-      }
-    });
-    this.state.forceShow = false;
-    this.updateCurrentGuide();
-  },
-
-  onNextStep() {
-    this.state.currentStep += 1;
-    this.trigger(this.state);
-  },
-
-  onRegisterAnchor(target) {
-    this.state.anchors.add(target);
-    this.updateCurrentGuide();
-  },
-
-  onUnregisterAnchor(target) {
-    this.state.anchors.delete(target);
-    this.updateCurrentGuide();
-  },
-
-  recordCue(guide) {
-    const data = {
-      guide,
-      eventKey: 'assistant.guide_cued',
-      eventName: 'Assistant Guide Cued',
-      organization_id: this.state.orgId,
-    };
-    trackAnalyticsEvent(data);
-  },
-
-  updatePrevGuide(nextGuide) {
-    const {prevGuide} = this.state;
-    if (!nextGuide) {
-      return;
-    }
-
-    if (!prevGuide || prevGuide.guide !== nextGuide.guide) {
-      this.recordCue(nextGuide.guide);
-      this.state.prevGuide = nextGuide;
-    }
-  },
-
-  /**
-   * Logic to determine if a guide is shown:
-   *
-   *  - If any required target is missing, don't show the guide
-   *  - If the URL ends with #assistant, show the guide
-   *  - If the user has already seen the guide, don't show the guide
-   *  - Otherwise show the guide
-   */
-  updateCurrentGuide() {
-    const {anchors, guides, forceShow} = this.state;
-
-    let guideOptions = guides
-      .sort((a, b) => a.guide.localeCompare(b.guide))
-      .filter(guide => guide.requiredTargets.every(target => anchors.has(target)));
-
-    if (!forceShow) {
-      const user = ConfigStore.get('user');
-      const assistantThreshold = new Date(2019, 6, 1);
-      const discoverDate = new Date(2020, 1, 6);
-      const userDateJoined = new Date(user?.dateJoined);
-
-      guideOptions = guideOptions.filter(({guide, seen}) => {
-        if (seen !== false) {
-          return false;
-        }
-        if (user?.isSuperuser) {
-          return true;
-        }
-        if (guide === 'discover_sidebar' && userDateJoined >= discoverDate) {
-          return false;
-        }
-        return userDateJoined > assistantThreshold;
-      });
-    }
-
-    const nextGuide =
-      guideOptions.length > 0
-        ? {
-            ...guideOptions[0],
-            steps: guideOptions[0].steps.filter(
-              step => step.target && anchors.has(step.target)
-            ),
-          }
-        : null;
-
-    this.updatePrevGuide(nextGuide);
-    this.state.currentGuide = nextGuide;
-    this.state.currentStep = 0;
-    this.trigger(this.state);
-  },
-};
-
-type GuideStore = Reflux.Store & GuideStoreInterface;
-
-export default Reflux.createStore(guideStoreConfig) as GuideStore;
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/actions.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/actions.jsx
index a4390fd35d..647657d160 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/actions.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/actions.jsx
@@ -91,7 +91,7 @@ class DeleteActions extends React.Component {
   render() {
     return (
       <div className="btn-group">
-        <GuideAnchor target="ignore-delete-discard" />
+        <GuideAnchor target="ignore_delete_discard" />
         <LinkWithConfirmation
           className="group-remove btn btn-default btn-sm"
           title={t('Delete')}
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/header.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/header.jsx
index 84243f9925..1a63c68228 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/header.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/header.jsx
@@ -102,7 +102,7 @@ class GroupHeader extends React.Component {
         <div className="row">
           <div className="col-sm-7">
             <h3>
-              <GuideAnchor target="issue-title">
+              <GuideAnchor target="issue_title">
                 <EventOrGroupTitle data={group} />
               </GuideAnchor>
             </h3>
@@ -139,7 +139,7 @@ class GroupHeader extends React.Component {
             <div className="flex flex-justify-right">
               {group.shortId && (
                 <div className="short-id-box count align-right">
-                  <GuideAnchor target="issue-number" position="right">
+                  <GuideAnchor target="issue_number" position="right">
                     <h6 className="nav-header">
                       <Tooltip
                         title={t(
diff --git a/tests/acceptance/page_objects/issue_details.py b/tests/acceptance/page_objects/issue_details.py
index cac57a556d..1ebb710679 100644
--- a/tests/acceptance/page_objects/issue_details.py
+++ b/tests/acceptance/page_objects/issue_details.py
@@ -69,14 +69,14 @@ class IssueDetailsPage(BasePage):
         res = self.client.put(
             "/api/0/assistant/",
             content_type="application/json",
-            data=json.dumps({"guide": "issue_details", "status": "viewed", "useful": True}),
+            data=json.dumps({"guide_id": 1, "status": "viewed", "useful": True}),
         )
         assert res.status_code == 201
 
         res = self.client.put(
             "/api/0/assistant/",
             content_type="application/json",
-            data=json.dumps({"guide": "issue_details", "status": "viewed", "useful": True}),
+            data=json.dumps({"guide_id": 3, "status": "viewed", "useful": True}),
         )
         assert res.status_code == 201
 
diff --git a/tests/js/spec/components/__snapshots__/streamGroup.spec.jsx.snap b/tests/js/spec/components/__snapshots__/streamGroup.spec.jsx.snap
index 0c21b19144..1636473f6d 100644
--- a/tests/js/spec/components/__snapshots__/streamGroup.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/streamGroup.spec.jsx.snap
@@ -169,7 +169,7 @@ exports[`StreamGroup renders with anchors 1`] = `
     />
   </GroupSummary>
   <GuideAnchor
-    target="issue-stream"
+    target="issue_stream"
   />
   <Styled(div)
     className="hidden-xs hidden-sm"
diff --git a/tests/js/spec/components/assistant/__snapshots__/guideAnchor.spec.jsx.snap b/tests/js/spec/components/assistant/__snapshots__/guideAnchor.spec.jsx.snap
new file mode 100644
index 0000000000..95c3fd3ca2
--- /dev/null
+++ b/tests/js/spec/components/assistant/__snapshots__/guideAnchor.spec.jsx.snap
@@ -0,0 +1,684 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GuideAnchor renders, advances, and finishes 1`] = `
+<GuideAnchor
+  target="target 1"
+>
+  <ForwardRef(render)>
+    <Hovercard
+      body={
+        <ForwardRef(render)>
+          <ForwardRef(render)>
+            <ForwardRef(render)>
+              title 1
+            </ForwardRef(render)>
+            <ForwardRef(render)
+              data-test-id="close-button"
+              href="#"
+              onClick={[Function]}
+            >
+              <ForwardRef(render) />
+            </ForwardRef(render)>
+          </ForwardRef(render)>
+          <ForwardRef(render)>
+            <div
+              dangerouslySetInnerHTML={
+                Object {
+                  "__html": "abc",
+                }
+              }
+            />
+            <ForwardRef(render)>
+              <div>
+                <ForwardRef
+                  onClick={[Function]}
+                  priority="success"
+                  size="small"
+                >
+                  Next
+                   →
+                </ForwardRef>
+              </div>
+            </ForwardRef(render)>
+          </ForwardRef(render)>
+        </ForwardRef(render)>
+      }
+      bodyClassName="css-1engxaj"
+      displayTimeout={100}
+      position="top"
+      show={true}
+      tipColor="#3EA573"
+    >
+      <Manager>
+        <Reference>
+          <InnerReference
+            setReferenceNode={[Function]}
+          >
+            <span
+              aria-describedby="hovercard-123456"
+            >
+              <span />
+            </span>
+          </InnerReference>
+        </Reference>
+        <Portal
+          containerInfo={
+            <div
+              id="hovercard-portal"
+            >
+              <div
+                class="hovercard css-1iq6s4e-StyledHovercard e38w1je0"
+                id="hovercard-123456"
+                style="position: absolute; top: 0px; left: 0px; opacity: 0; pointer-events: none;"
+              >
+                <div
+                  class="css-fb6op-Body e38w1je2"
+                >
+                  <div
+                    class="css-hhb7wa-GuideContainer e130o4350"
+                  >
+                    <div
+                      class="css-oc5lxq-GuideInputRow e130o4352"
+                    >
+                      <div
+                        class="css-nw97la-StyledTitle e130o4353"
+                      >
+                        title 1
+                      </div>
+                      <a
+                        class="css-1tis8wt-CloseLink e130o4351"
+                        data-test-id="close-button"
+                        href="#"
+                      >
+                        <svg
+                          class="ernuchp3 css-1kfzr4j-InlineSvg-CloseIcon enyz4ql0"
+                          height="1em"
+                          viewBox="[object Object]"
+                          width="1em"
+                        >
+                          <use
+                            href="#test"
+                            xlink:href="#test"
+                          />
+                        </svg>
+                      </a>
+                    </div>
+                    <div
+                      class="css-qwocdy-StyledContent e130o4354"
+                    >
+                      <div>
+                        abc
+                      </div>
+                      <div
+                        class="css-m56sce-Actions e130o4355"
+                      >
+                        <div>
+                          <button
+                            aria-disabled="false"
+                            class="css-1a9qzq-StyledButton edwq9my0"
+                            role="button"
+                          >
+                            <span
+                              class="css-19gcr2f-ButtonLabel edwq9my1"
+                            >
+                              Next
+                               →
+                            </span>
+                          </button>
+                        </div>
+                      </div>
+                    </div>
+                  </div>
+                </div>
+                <span
+                  class="css-8y7441-HovercardArrow e38w1je3"
+                />
+              </div>
+            </div>
+          }
+        >
+          <Popper
+            modifiers={
+              Object {
+                "hide": Object {
+                  "enabled": false,
+                },
+                "preventOverflow": Object {
+                  "boundariesElement": "viewport",
+                  "enabled": true,
+                  "padding": 10,
+                },
+              }
+            }
+            placement="top"
+          >
+            <InnerPopper
+              eventsEnabled={true}
+              modifiers={
+                Object {
+                  "hide": Object {
+                    "enabled": false,
+                  },
+                  "preventOverflow": Object {
+                    "boundariesElement": "viewport",
+                    "enabled": true,
+                    "padding": 10,
+                  },
+                }
+              }
+              placement="top"
+              positionFixed={false}
+              referenceElement={
+                <span
+                  aria-describedby="hovercard-123456"
+                >
+                  <span />
+                </span>
+              }
+            >
+              <StyledHovercard
+                className="hovercard"
+                id="hovercard-123456"
+                style={
+                  Object {
+                    "left": 0,
+                    "opacity": 0,
+                    "pointerEvents": "none",
+                    "position": "absolute",
+                    "top": 0,
+                  }
+                }
+                visible={true}
+                withHeader={false}
+              >
+                <div
+                  className="hovercard css-1iq6s4e-StyledHovercard e38w1je0"
+                  id="hovercard-123456"
+                  style={
+                    Object {
+                      "left": 0,
+                      "opacity": 0,
+                      "pointerEvents": "none",
+                      "position": "absolute",
+                      "top": 0,
+                    }
+                  }
+                >
+                  <Body
+                    className="css-1engxaj"
+                  >
+                    <div
+                      className="css-fb6op-Body e38w1je2"
+                    >
+                      <GuideContainer>
+                        <div
+                          className="css-hhb7wa-GuideContainer e130o4350"
+                        >
+                          <GuideInputRow>
+                            <div
+                              className="css-oc5lxq-GuideInputRow e130o4352"
+                            >
+                              <StyledTitle>
+                                <div
+                                  className="css-nw97la-StyledTitle e130o4353"
+                                >
+                                  title 1
+                                </div>
+                              </StyledTitle>
+                              <CloseLink
+                                data-test-id="close-button"
+                                href="#"
+                                onClick={[Function]}
+                              >
+                                <a
+                                  className="css-1tis8wt-CloseLink e130o4351"
+                                  data-test-id="close-button"
+                                  href="#"
+                                  onClick={[Function]}
+                                >
+                                  <CloseIcon>
+                                    <Component
+                                      className="css-1j72m2y-CloseIcon ernuchp3"
+                                    >
+                                      <InlineSvg
+                                        className="css-1j72m2y-CloseIcon ernuchp3"
+                                        src="icon-close-lg"
+                                      >
+                                        <ForwardRef
+                                          className="ernuchp3 css-1kfzr4j-InlineSvg-CloseIcon enyz4ql0"
+                                          src="icon-close-lg"
+                                        >
+                                          <svg
+                                            className="ernuchp3 css-1kfzr4j-InlineSvg-CloseIcon enyz4ql0"
+                                            height="1em"
+                                            viewBox={Object {}}
+                                            width="1em"
+                                          >
+                                            <use
+                                              href="#test"
+                                              xlinkHref="#test"
+                                            />
+                                          </svg>
+                                        </ForwardRef>
+                                      </InlineSvg>
+                                    </Component>
+                                  </CloseIcon>
+                                </a>
+                              </CloseLink>
+                            </div>
+                          </GuideInputRow>
+                          <StyledContent>
+                            <div
+                              className="css-qwocdy-StyledContent e130o4354"
+                            >
+                              <div
+                                dangerouslySetInnerHTML={
+                                  Object {
+                                    "__html": "abc",
+                                  }
+                                }
+                              />
+                              <Actions>
+                                <div
+                                  className="css-m56sce-Actions e130o4355"
+                                >
+                                  <div>
+                                    <forwardRef<Button>
+                                      onClick={[Function]}
+                                      priority="success"
+                                      size="small"
+                                    >
+                                      <Button
+                                        align="center"
+                                        disabled={false}
+                                        forwardRef={null}
+                                        onClick={[Function]}
+                                        priority="success"
+                                        size="small"
+                                      >
+                                        <StyledButton
+                                          aria-disabled={false}
+                                          disabled={false}
+                                          forwardRef={null}
+                                          onClick={[Function]}
+                                          priority="success"
+                                          role="button"
+                                          size="small"
+                                        >
+                                          <Component
+                                            aria-disabled={false}
+                                            className="css-1a9qzq-StyledButton edwq9my0"
+                                            forwardRef={null}
+                                            onClick={[Function]}
+                                            role="button"
+                                            size="small"
+                                          >
+                                            <button
+                                              aria-disabled={false}
+                                              className="css-1a9qzq-StyledButton edwq9my0"
+                                              onClick={[Function]}
+                                              role="button"
+                                              size="small"
+                                            >
+                                              <ButtonLabel
+                                                align="center"
+                                                priority="success"
+                                                size="small"
+                                              >
+                                                <Component
+                                                  align="center"
+                                                  className="css-19gcr2f-ButtonLabel edwq9my1"
+                                                  priority="success"
+                                                  size="small"
+                                                >
+                                                  <span
+                                                    className="css-19gcr2f-ButtonLabel edwq9my1"
+                                                  >
+                                                    Next
+                                                     →
+                                                  </span>
+                                                </Component>
+                                              </ButtonLabel>
+                                            </button>
+                                          </Component>
+                                        </StyledButton>
+                                      </Button>
+                                    </forwardRef<Button>>
+                                  </div>
+                                </div>
+                              </Actions>
+                            </div>
+                          </StyledContent>
+                        </div>
+                      </GuideContainer>
+                    </div>
+                  </Body>
+                  <HovercardArrow
+                    style={Object {}}
+                    tipColor="#3EA573"
+                  >
+                    <span
+                      className="css-8y7441-HovercardArrow e38w1je3"
+                      style={Object {}}
+                    />
+                  </HovercardArrow>
+                </div>
+              </StyledHovercard>
+            </InnerPopper>
+          </Popper>
+        </Portal>
+      </Manager>
+    </Hovercard>
+  </ForwardRef(render)>
+</GuideAnchor>
+`;
+
+exports[`GuideAnchor renders, advances, and finishes 2`] = `
+<GuideAnchor
+  target="target 2"
+>
+  <ForwardRef(render)>
+    <Hovercard
+      body={
+        <ForwardRef(render)>
+          <ForwardRef(render)>
+            <ForwardRef(render)>
+              title 2
+            </ForwardRef(render)>
+          </ForwardRef(render)>
+          <ForwardRef(render)>
+            <div
+              dangerouslySetInnerHTML={
+                Object {
+                  "__html": "xyz",
+                }
+              }
+            />
+            <ForwardRef(render)>
+              <div>
+                <ForwardRef
+                  onClick={[Function]}
+                  priority="success"
+                  size="small"
+                >
+                  Done
+                </ForwardRef>
+              </div>
+            </ForwardRef(render)>
+          </ForwardRef(render)>
+        </ForwardRef(render)>
+      }
+      bodyClassName="css-1engxaj"
+      displayTimeout={100}
+      position="top"
+      show={true}
+      tipColor="#3EA573"
+    >
+      <Manager>
+        <Reference>
+          <InnerReference
+            setReferenceNode={[Function]}
+          >
+            <span
+              aria-describedby="hovercard-123456"
+            >
+              <span />
+            </span>
+          </InnerReference>
+        </Reference>
+        <Portal
+          containerInfo={
+            <div
+              id="hovercard-portal"
+            >
+              <div
+                class="hovercard css-1iq6s4e-StyledHovercard e38w1je0"
+                id="hovercard-123456"
+                style="position: absolute; top: 0px; left: 0px; opacity: 0; pointer-events: none;"
+              >
+                <div
+                  class="css-fb6op-Body e38w1je2"
+                >
+                  <div
+                    class="css-hhb7wa-GuideContainer e130o4350"
+                  >
+                    <div
+                      class="css-oc5lxq-GuideInputRow e130o4352"
+                    >
+                      <div
+                        class="css-nw97la-StyledTitle e130o4353"
+                      >
+                        title 2
+                      </div>
+                    </div>
+                    <div
+                      class="css-qwocdy-StyledContent e130o4354"
+                    >
+                      <div>
+                        xyz
+                      </div>
+                      <div
+                        class="css-m56sce-Actions e130o4355"
+                      >
+                        <div>
+                          <button
+                            aria-disabled="false"
+                            aria-label="Done"
+                            class="css-1a9qzq-StyledButton edwq9my0"
+                            role="button"
+                          >
+                            <span
+                              class="css-19gcr2f-ButtonLabel edwq9my1"
+                            >
+                              Done
+                            </span>
+                          </button>
+                        </div>
+                      </div>
+                    </div>
+                  </div>
+                </div>
+                <span
+                  class="css-8y7441-HovercardArrow e38w1je3"
+                />
+              </div>
+            </div>
+          }
+        >
+          <Popper
+            modifiers={
+              Object {
+                "hide": Object {
+                  "enabled": false,
+                },
+                "preventOverflow": Object {
+                  "boundariesElement": "viewport",
+                  "enabled": true,
+                  "padding": 10,
+                },
+              }
+            }
+            placement="top"
+          >
+            <InnerPopper
+              eventsEnabled={true}
+              modifiers={
+                Object {
+                  "hide": Object {
+                    "enabled": false,
+                  },
+                  "preventOverflow": Object {
+                    "boundariesElement": "viewport",
+                    "enabled": true,
+                    "padding": 10,
+                  },
+                }
+              }
+              placement="top"
+              positionFixed={false}
+              referenceElement={
+                <span
+                  aria-describedby="hovercard-123456"
+                >
+                  <span />
+                </span>
+              }
+            >
+              <StyledHovercard
+                className="hovercard"
+                id="hovercard-123456"
+                style={
+                  Object {
+                    "left": 0,
+                    "opacity": 0,
+                    "pointerEvents": "none",
+                    "position": "absolute",
+                    "top": 0,
+                  }
+                }
+                visible={true}
+                withHeader={false}
+              >
+                <div
+                  className="hovercard css-1iq6s4e-StyledHovercard e38w1je0"
+                  id="hovercard-123456"
+                  style={
+                    Object {
+                      "left": 0,
+                      "opacity": 0,
+                      "pointerEvents": "none",
+                      "position": "absolute",
+                      "top": 0,
+                    }
+                  }
+                >
+                  <Body
+                    className="css-1engxaj"
+                  >
+                    <div
+                      className="css-fb6op-Body e38w1je2"
+                    >
+                      <GuideContainer>
+                        <div
+                          className="css-hhb7wa-GuideContainer e130o4350"
+                        >
+                          <GuideInputRow>
+                            <div
+                              className="css-oc5lxq-GuideInputRow e130o4352"
+                            >
+                              <StyledTitle>
+                                <div
+                                  className="css-nw97la-StyledTitle e130o4353"
+                                >
+                                  title 2
+                                </div>
+                              </StyledTitle>
+                            </div>
+                          </GuideInputRow>
+                          <StyledContent>
+                            <div
+                              className="css-qwocdy-StyledContent e130o4354"
+                            >
+                              <div
+                                dangerouslySetInnerHTML={
+                                  Object {
+                                    "__html": "xyz",
+                                  }
+                                }
+                              />
+                              <Actions>
+                                <div
+                                  className="css-m56sce-Actions e130o4355"
+                                >
+                                  <div>
+                                    <forwardRef<Button>
+                                      onClick={[Function]}
+                                      priority="success"
+                                      size="small"
+                                    >
+                                      <Button
+                                        align="center"
+                                        disabled={false}
+                                        forwardRef={null}
+                                        onClick={[Function]}
+                                        priority="success"
+                                        size="small"
+                                      >
+                                        <StyledButton
+                                          aria-disabled={false}
+                                          aria-label="Done"
+                                          disabled={false}
+                                          forwardRef={null}
+                                          onClick={[Function]}
+                                          priority="success"
+                                          role="button"
+                                          size="small"
+                                        >
+                                          <Component
+                                            aria-disabled={false}
+                                            aria-label="Done"
+                                            className="css-1a9qzq-StyledButton edwq9my0"
+                                            forwardRef={null}
+                                            onClick={[Function]}
+                                            role="button"
+                                            size="small"
+                                          >
+                                            <button
+                                              aria-disabled={false}
+                                              aria-label="Done"
+                                              className="css-1a9qzq-StyledButton edwq9my0"
+                                              onClick={[Function]}
+                                              role="button"
+                                              size="small"
+                                            >
+                                              <ButtonLabel
+                                                align="center"
+                                                priority="success"
+                                                size="small"
+                                              >
+                                                <Component
+                                                  align="center"
+                                                  className="css-19gcr2f-ButtonLabel edwq9my1"
+                                                  priority="success"
+                                                  size="small"
+                                                >
+                                                  <span
+                                                    className="css-19gcr2f-ButtonLabel edwq9my1"
+                                                  >
+                                                    Done
+                                                  </span>
+                                                </Component>
+                                              </ButtonLabel>
+                                            </button>
+                                          </Component>
+                                        </StyledButton>
+                                      </Button>
+                                    </forwardRef<Button>>
+                                  </div>
+                                </div>
+                              </Actions>
+                            </div>
+                          </StyledContent>
+                        </div>
+                      </GuideContainer>
+                    </div>
+                  </Body>
+                  <HovercardArrow
+                    style={Object {}}
+                    tipColor="#3EA573"
+                  >
+                    <span
+                      className="css-8y7441-HovercardArrow e38w1je3"
+                      style={Object {}}
+                    />
+                  </HovercardArrow>
+                </div>
+              </StyledHovercard>
+            </InnerPopper>
+          </Popper>
+        </Portal>
+      </Manager>
+    </Hovercard>
+  </ForwardRef(render)>
+</GuideAnchor>
+`;
diff --git a/tests/js/spec/components/assistant/guideAnchor.spec.jsx b/tests/js/spec/components/assistant/guideAnchor.spec.jsx
index 68190c881a..59be50d363 100644
--- a/tests/js/spec/components/assistant/guideAnchor.spec.jsx
+++ b/tests/js/spec/components/assistant/guideAnchor.spec.jsx
@@ -6,26 +6,29 @@ import GuideActions from 'app/actions/guideActions';
 import ConfigStore from 'app/stores/configStore';
 
 describe('GuideAnchor', function() {
-  let wrapper1, wrapper2;
-  const serverGuide = [
-    {
-      guide: 'issue_details',
-      seen: false,
+  const guides = {
+    guide1: {
+      id: 1,
+      required_targets: [],
+      steps: [
+        {message: 'abc', target: 'target 1', title: 'title 1'},
+        {message: 'xyz', target: 'target 2', title: 'title 2'},
+      ],
     },
-  ];
+  };
 
   const routerContext = TestStubs.routerContext();
 
+  let wrapper1, wrapper2;
+
   beforeEach(function() {
     ConfigStore.config = {
       user: {
-        isSuperuser: false,
-        dateJoined: new Date(2020, 0, 1),
+        isSuperuser: true,
       },
     };
-
-    wrapper1 = mountWithTheme(<GuideAnchor target="issue-title" />, routerContext);
-    wrapper2 = mountWithTheme(<GuideAnchor target="exception" />, routerContext);
+    wrapper1 = mountWithTheme(<GuideAnchor target="target 1" />, routerContext);
+    wrapper2 = mountWithTheme(<GuideAnchor target="target 2" />, routerContext);
   });
 
   afterEach(function() {
@@ -34,46 +37,39 @@ describe('GuideAnchor', function() {
   });
 
   it('renders, advances, and finishes', async function() {
-    GuideActions.fetchSucceeded(serverGuide);
+    const data = JSON.parse(JSON.stringify(guides)); // deep copy
+    GuideActions.fetchSucceeded(data);
     await tick();
     wrapper1.update();
-
-    expect(wrapper1.find('Hovercard').exists()).toBe(true);
-    expect(wrapper1.find('StyledTitle').text()).toBe('Issue Details');
+    expect(wrapper1).toMatchSnapshot();
 
     // Clicking on next should deactivate the current card and activate the next one.
     wrapper1
       .find('Button')
       .first()
       .simulate('click');
-
     await tick();
     wrapper1.update();
     wrapper2.update();
-
     expect(wrapper1.state('active')).toBeFalsy();
     expect(wrapper2.state('active')).toBeTruthy();
-
-    expect(wrapper2.find('Hovercard').exists()).toBe(true);
-    expect(wrapper2.find('StyledTitle').text()).toBe('Stacktrace');
+    expect(wrapper2).toMatchSnapshot();
 
     // Clicking on the button in the last step should finish the guide.
     const finishMock = MockApiClient.addMockResponse({
       method: 'PUT',
       url: '/assistant/',
     });
-
     wrapper2
       .find('Button')
       .last()
       .simulate('click');
-
     expect(finishMock).toHaveBeenCalledWith(
       '/assistant/',
       expect.objectContaining({
         method: 'PUT',
         data: {
-          guide: 'issue_details',
+          guide_id: 1,
           status: 'viewed',
         },
       })
@@ -81,7 +77,8 @@ describe('GuideAnchor', function() {
   });
 
   it('dismisses', async function() {
-    GuideActions.fetchSucceeded(serverGuide);
+    const data = JSON.parse(JSON.stringify(guides)); // deep copy
+    GuideActions.fetchSucceeded(data);
     await tick();
     wrapper1.update();
 
@@ -89,23 +86,20 @@ describe('GuideAnchor', function() {
       method: 'PUT',
       url: '/assistant/',
     });
-
     wrapper1
       .find('[data-test-id="close-button"]')
       .first()
       .simulate('click');
-
     expect(dismissMock).toHaveBeenCalledWith(
       '/assistant/',
       expect.objectContaining({
         method: 'PUT',
         data: {
-          guide: 'issue_details',
+          guide_id: 1,
           status: 'dismissed',
         },
       })
     );
-
     await tick();
     expect(wrapper1.state('active')).toBeFalsy();
   });
@@ -116,10 +110,8 @@ describe('GuideAnchor', function() {
         <span>A child</span>
       </GuideAnchor>
     );
-
     const component = wrapper.instance();
     wrapper.update();
-
     expect(component.state).toMatchObject({active: false});
     expect(wrapper.find('Hovercard')).toHaveLength(0);
   });
diff --git a/tests/js/spec/stores/guideStore.spec.jsx b/tests/js/spec/stores/guideStore.spec.jsx
index 77737ac5cc..71cd065258 100644
--- a/tests/js/spec/stores/guideStore.spec.jsx
+++ b/tests/js/spec/stores/guideStore.spec.jsx
@@ -1,89 +1,110 @@
+import React from 'react';
+
 import GuideStore from 'app/stores/guideStore';
+import GuideAnchor from 'app/components/assistant/guideAnchor';
 import ConfigStore from 'app/stores/configStore';
 
 describe('GuideStore', function() {
+  const anchor1 = <GuideAnchor target="target 1" />;
+  const anchor2 = <GuideAnchor target="target 2" />;
   let data;
 
   beforeEach(function() {
     ConfigStore.config = {
       user: {
-        isSuperuser: false,
-        dateJoined: new Date(2020, 0, 1),
+        isSuperuser: true,
       },
     };
-
     GuideStore.init();
-    data = [
-      {
-        guide: 'issue_details',
+    data = {
+      Guide1: {
+        id: 1,
+        required_targets: ['target 1'],
+        steps: [
+          {message: 'Message 1', target: 'target 1', title: '1. Title 1'},
+          {message: 'Message 2', target: 'target 2', title: '2. Title 2'},
+          {message: 'Message 3', target: 'target 3', title: '3. Title 3'},
+        ],
+        seen: true,
+      },
+      Guide2: {
+        id: 2,
+        required_targets: ['target 1'],
+        steps: [
+          {message: 'Message 1', target: 'target 1', title: '1. Title 1'},
+          {message: 'Message 2', target: 'target 2', title: '2. Title 2'},
+        ],
         seen: false,
       },
-      {guide: 'issue_stream', seen: true},
-    ];
-    GuideStore.onRegisterAnchor('issue-title');
-    GuideStore.onRegisterAnchor('exception');
-    GuideStore.onRegisterAnchor('breadcrumbs');
-    GuideStore.onRegisterAnchor('issue-stream');
+    };
+    GuideStore.onRegisterAnchor(anchor1);
+    GuideStore.onRegisterAnchor(anchor2);
   });
 
+  afterEach(function() {});
+
   it('should move through the steps in the guide', function() {
     GuideStore.onFetchSucceeded(data);
+    const guide = GuideStore.state.currentGuide;
     // Should pick the first non-seen guide in alphabetic order.
-    expect(GuideStore.state.currentStep).toEqual(0);
-    expect(GuideStore.state.currentGuide.guide).toEqual('issue_details');
-    // Should prune steps that don't have anchors.
-    expect(GuideStore.state.currentGuide.steps).toHaveLength(3);
-
+    expect(guide.id).toEqual(2);
+    expect(guide.steps).toHaveLength(2);
     GuideStore.onNextStep();
     expect(GuideStore.state.currentStep).toEqual(1);
-    GuideStore.onNextStep();
-    expect(GuideStore.state.currentStep).toEqual(2);
     GuideStore.onCloseGuide();
     expect(GuideStore.state.currentGuide).toEqual(null);
   });
 
-  it('should force show a guide with #assistant', function() {
-    data = [
-      {
-        guide: 'issue_details',
-        seen: true,
-      },
-      {guide: 'issue_stream', seen: false},
-    ];
-
+  it('should force show a guide', function() {
     GuideStore.onFetchSucceeded(data);
     window.location.hash = '#assistant';
     GuideStore.onURLChange();
-    expect(GuideStore.state.currentGuide.guide).toEqual('issue_details');
+    expect(GuideStore.state.currentGuide.id).toEqual(1);
+    // Should prune steps that don't have anchors.
+    expect(GuideStore.state.currentGuide.steps).toHaveLength(2);
     GuideStore.onCloseGuide();
-    expect(GuideStore.state.currentGuide.guide).toEqual('issue_stream');
+    expect(GuideStore.state.currentGuide.id).toEqual(2);
     window.location.hash = '';
   });
 
   it('should record analytics events when guide is cued', function() {
     const spy = jest.spyOn(GuideStore, 'recordCue');
     GuideStore.onFetchSucceeded(data);
-    expect(spy).toHaveBeenCalledWith('issue_details');
+    expect(spy).toHaveBeenCalledWith(data.Guide2.id);
     expect(spy).toHaveBeenCalledTimes(1);
+    spy.mockRestore();
+  });
 
-    GuideStore.updateCurrentGuide();
+  it('should not send multiple cue analytics events for same guide', function() {
+    const spy = jest.spyOn(GuideStore, 'recordCue');
+    GuideStore.onFetchSucceeded(data);
+    expect(spy).toHaveBeenCalledWith(data.Guide2.id);
     expect(spy).toHaveBeenCalledTimes(1);
-
-    GuideStore.onNextStep();
+    GuideStore.updateCurrentGuide();
     expect(spy).toHaveBeenCalledTimes(1);
     spy.mockRestore();
   });
 
   describe('discover sidebar guide', function() {
+    const anchor3 = <GuideAnchor target="discover_sidebar" />;
+
     beforeEach(function() {
-      data = [
-        {
-          guide: 'discover_sidebar',
+      data = {
+        discover_sidebar: {
+          id: 4,
+          required_targets: ['discover_sidebar'],
+          steps: [
+            {
+              title: 'Title 4',
+              message: 'Message 4',
+              target: 'discover_sidebar',
+            },
+          ],
           seen: false,
         },
-      ];
+      };
 
-      GuideStore.onRegisterAnchor('discover-sidebar');
+      GuideStore.onRegisterAnchor(anchor3);
     });
 
     it('does not render without user', function() {
@@ -99,7 +120,7 @@ describe('GuideStore', function() {
         },
       };
       GuideStore.onFetchSucceeded(data);
-      expect(GuideStore.state.currentGuide.guide).toBe('discover_sidebar');
+      expect(GuideStore.state.currentGuide.id).toBe(data.discover_sidebar.id);
     });
 
     it('shows discover sidebar guide to previously existing users', function() {
@@ -110,7 +131,7 @@ describe('GuideStore', function() {
         },
       };
       GuideStore.onFetchSucceeded(data);
-      expect(GuideStore.state.currentGuide.guide).toBe('discover_sidebar');
+      expect(GuideStore.state.currentGuide.id).toBe(data.discover_sidebar.id);
     });
 
     it('does not show discover sidebar guide to new users', function() {
@@ -125,7 +146,7 @@ describe('GuideStore', function() {
     });
 
     it('hides discover sidebar guide once seen', function() {
-      data[0].seen = true;
+      data.discover_sidebar.seen = true;
       // previous user
       ConfigStore.config = {
         user: {
diff --git a/tests/sentry/api/endpoints/test_assistant.py b/tests/sentry/api/endpoints/test_assistant.py
index d05d3833a8..699173325c 100644
--- a/tests/sentry/api/endpoints/test_assistant.py
+++ b/tests/sentry/api/endpoints/test_assistant.py
@@ -1,78 +1,51 @@
 from __future__ import absolute_import
 
-from django.utils import timezone
+from copy import deepcopy
+
+from django.core.urlresolvers import reverse
 
 from sentry.assistant import manager
-from sentry.assistant.guides import AssistantGuide
-from sentry.models import AssistantActivity
 from sentry.testutils import APITestCase
 
 
-class AssistantActivityTest(APITestCase):
-    endpoint = "sentry-api-0-assistant"
-
-    def setUp(self):
-        super(AssistantActivityTest, self).setUp()
-        self.create_organization(owner=self.user)
-        self.login_as(user=self.user)
-
-    def test_simple(self):
-        resp = self.get_response()
-        assert resp.status_code == 200
-
-        assert len(resp.data) == len(manager.all())
-        for guide in resp.data:
-            assert guide["seen"] is False
-
-    def test_dismissed(self):
-        AssistantActivity.objects.create(
-            user=self.user, guide_id=AssistantGuide.ISSUE_DETAILS.value, dismissed_ts=timezone.now()
-        )
-        resp = self.get_response()
-        assert resp.status_code == 200
-        assert {"guide": "issue_details", "seen": True} in resp.data
-
-    def test_viewed(self):
-        AssistantActivity.objects.create(
-            user=self.user, guide_id=AssistantGuide.ISSUE_DETAILS.value, viewed_ts=timezone.now()
-        )
-        resp = self.get_response()
-        assert resp.status_code == 200
-        assert {"guide": "issue_details", "seen": True} in resp.data
-
-
-class AssistantActivityUpdateTest(APITestCase):
-    endpoint = "sentry-api-0-assistant"
-    method = "put"
-
+class AssistantActivity(APITestCase):
     def setUp(self):
-        super(AssistantActivityUpdateTest, self).setUp()
-        self.create_organization(owner=self.user)
+        super(AssistantActivity, self).setUp()
         self.login_as(user=self.user)
+        self.path = reverse("sentry-api-0-assistant")
+        self.guides = manager.all()
 
     def test_invalid_inputs(self):
-        resp = self.get_response(guide="guide_does_not_exist")
+        # Invalid guide id.
+        resp = self.client.put(self.path, {"guide_id": 1938})
         assert resp.status_code == 400
 
-        resp = self.get_response(guide_id="issue_details", status="whats_my_name_again")
+        # Invalid status.
+        resp = self.client.put(self.path, {"guide_id": 1, "status": "whats_my_name_again"})
         assert resp.status_code == 400
 
-    def test_dismissed(self):
-        resp = self.get_response(guide="issue_stream", status="dismissed")
-        assert resp.status_code == 201
+    def test_activity(self):
+        guides_with_seen = deepcopy(manager.all())
+        for g in guides_with_seen:
+            guides_with_seen[g]["seen"] = False
 
-        activity = AssistantActivity.objects.get(
-            user=self.user, guide_id=AssistantGuide.ISSUE_STREAM.value
-        )
-        assert activity.dismissed_ts
-        assert not activity.viewed_ts
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        assert resp.data == guides_with_seen
 
-    def test_viewed(self):
-        resp = self.get_response(guide="issue_stream", status="viewed")
+        # Dismiss the guide and make sure it is not returned again.
+        resp = self.client.put(self.path, {"guide_id": 3, "status": "dismissed"})
         assert resp.status_code == 201
-
-        activity = AssistantActivity.objects.get(
-            user=self.user, guide_id=AssistantGuide.ISSUE_STREAM.value
-        )
-        assert not activity.dismissed_ts
-        assert activity.viewed_ts
+        resp = self.client.get(self.path)
+        guides_with_seen["issue_stream"]["seen"] = True
+        assert resp.status_code == 200
+        assert resp.data == guides_with_seen
+
+    def test_validate_guides(self):
+        # Steps in different guides should not have the same target.
+        guides = self.guides.values()
+        for i in range(len(guides)):
+            for j in range(0, i):
+                steps_i = set(s["target"] for s in guides[i]["steps"])
+                steps_j = set(s["target"] for s in guides[j]["steps"])
+                assert not (steps_i & steps_j)
