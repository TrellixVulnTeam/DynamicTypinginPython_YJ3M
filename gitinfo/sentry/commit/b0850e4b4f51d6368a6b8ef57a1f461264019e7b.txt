commit b0850e4b4f51d6368a6b8ef57a1f461264019e7b
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Tue Sep 12 14:34:12 2017 -0700

    feat(api): Extend suggested owners endpoint to use up to 5 releases instead of 1 (#6047)
    
    * feat(api): Extend suggested owners endpoint to use up to 5 releases instead of 1
    
    * coerce closest releases to list

diff --git a/src/sentry/api/endpoints/event_file_committers.py b/src/sentry/api/endpoints/event_file_committers.py
index 442e811803..36b34d4d4a 100644
--- a/src/sentry/api/endpoints/event_file_committers.py
+++ b/src/sentry/api/endpoints/event_file_committers.py
@@ -43,20 +43,12 @@ class EventFileCommittersEndpoint(ProjectEndpoint):
 
         return frames
 
-    def _get_commits(self, project, version):
-        try:
-            commits = Commit.objects.filter(
-                releasecommit=ReleaseCommit.objects.filter(
-                    release=Release.objects.get(
-                        projects=project,
-                        version=version,
-                    ),
-                )
-            ).select_related('author')
-        except Release.DoesNotExist:
-            return None
-
-        return list(commits)
+    def _get_commits(self, releases):
+        return list(Commit.objects.filter(
+            releasecommit=ReleaseCommit.objects.filter(
+                release__in=releases,
+            )
+        ).select_related('author'))
 
     def _get_commit_file_changes(self, commits, path_name_set):
         # build a single query to get all of the commit file that might match the first n frames
@@ -157,7 +149,17 @@ class EventFileCommittersEndpoint(ProjectEndpoint):
 
         group = Group.objects.get(id=event.group_id)
 
-        commits = self._get_commits(event.project, group.get_first_release())
+        first_release_version = group.get_first_release()
+
+        if not first_release_version:
+            return Response({'detail': 'Release not found'}, status=404)
+
+        releases = Release.get_closest_releases(project, first_release_version)
+
+        if not releases:
+            return Response({'detail': 'Release not found'}, status=404)
+
+        commits = self._get_commits(releases)
 
         if not commits:
             return Response({'detail': 'No Commits found for Release'}, status=404)
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index c47a59a859..e393dda522 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -213,6 +213,34 @@ class Release(Model):
 
             release.delete()
 
+    @classmethod
+    def get_closest_releases(cls, project, start_version, limit=5):
+        # given a release version + project, return next
+        # `limit` releases (includes the release specified by `version`)
+        try:
+            release_dates = cls.objects.filter(
+                organization_id=project.organization_id,
+                version=start_version,
+                projects=project,
+            ).values('date_released', 'date_added').get()
+        except cls.DoesNotExist:
+            return []
+
+        start_date = release_dates['date_released'] or release_dates['date_added']
+
+        return list(Release.objects.filter(
+            projects=project,
+            organization_id=project.organization_id,
+        ).extra(select={
+                'date': 'COALESCE(date_released, date_added)',
+                }
+                ).extra(
+            where=["COALESCE(date_released, date_added) >= %s"],
+            params=[start_date]
+        ).extra(
+            order_by=['date']
+        )[:limit])
+
     @property
     def short_version(self):
         version = self.version
diff --git a/tests/sentry/api/endpoints/test_event_committers.py b/tests/sentry/api/endpoints/test_event_committers.py
index 86a156e25f..e5041f3f77 100644
--- a/tests/sentry/api/endpoints/test_event_committers.py
+++ b/tests/sentry/api/endpoints/test_event_committers.py
@@ -47,7 +47,7 @@ class EventCommittersTest(APITestCase):
                                                                            ] == 'admin@localhost'
         # TODO(maxbittker) test more edge cases here
 
-    def test_no_commits(self):
+    def test_no_release(self):
         self.login_as(user=self.user)
 
         group = self.create_group()
@@ -69,7 +69,7 @@ class EventCommittersTest(APITestCase):
 
         response = self.client.get(url, format='json')
         assert response.status_code == 404, response.content
-        assert response.data['detail'] == "No Commits found for Release"
+        assert response.data['detail'] == "Release not found"
 
     def test_null_stacktrace(self):
         self.login_as(user=self.user)
diff --git a/tests/sentry/models/test_release.py b/tests/sentry/models/test_release.py
index c6526c2893..0c10e31fc3 100644
--- a/tests/sentry/models/test_release.py
+++ b/tests/sentry/models/test_release.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import datetime
 import six
 
 from sentry.models import (
@@ -426,3 +427,43 @@ class SetCommitsTestCase(TestCase):
         assert resolution.actor_id is None
 
         assert Group.objects.get(id=group.id).status == GroupStatus.RESOLVED
+
+
+class GetClosestReleasesTestCase(TestCase):
+    def test_simple(self):
+
+        date = datetime.datetime.utcnow()
+
+        org = self.create_organization()
+        project = self.create_project(organization=org, name='foo')
+
+        # this shouldn't be included
+        release1 = Release.objects.create(
+            organization=org,
+            version='a' * 40,
+            date_released=date - datetime.timedelta(days=2),
+        )
+
+        release1.add_project(project)
+
+        release2 = Release.objects.create(
+            organization=org,
+            version='b' * 40,
+            date_released=date - datetime.timedelta(days=1),
+        )
+
+        release2.add_project(project)
+
+        release3 = Release.objects.create(
+            organization=org,
+            version='c' * 40,
+            date_released=date,
+        )
+
+        release3.add_project(project)
+
+        releases = list(Release.get_closest_releases(project, release2.version))
+
+        assert len(releases) == 2
+        assert releases[0] == release2
+        assert releases[1] == release3
