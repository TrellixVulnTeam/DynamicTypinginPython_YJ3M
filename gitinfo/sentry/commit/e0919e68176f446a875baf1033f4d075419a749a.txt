commit e0919e68176f446a875baf1033f4d075419a749a
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Thu Feb 20 09:33:46 2020 +0100

    ref(ui): Added tooltip - Datascrubbers v2 - Part 13 (#17098)

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumb.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumb.jsx
index 0beef147fd..b169c46a62 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumb.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumb.jsx
@@ -9,11 +9,6 @@ import DefaultRenderer from 'app/components/events/interfaces/breadcrumbs/defaul
 import ErrorBoundary from 'app/components/errorBoundary';
 import Tooltip from 'app/components/tooltip';
 
-const CUSTOM_RENDERERS = {
-  http: HttpRenderer,
-  error: ErrorRenderer,
-};
-
 class Breadcrumb extends React.Component {
   static propTypes = {
     crumb: PropTypes.object.isRequired,
@@ -51,8 +46,14 @@ class Breadcrumb extends React.Component {
 
   renderType = () => {
     const {crumb} = this.props;
-    const Renderer = CUSTOM_RENDERERS[crumb.type] || DefaultRenderer;
-    return <Renderer crumb={crumb} />;
+    switch (crumb.type) {
+      case 'error':
+        return <ErrorRenderer crumb={crumb} />;
+      case 'http':
+        return <HttpRenderer crumb={crumb} />;
+      default:
+        return <DefaultRenderer crumb={crumb} />;
+    }
   };
 
   render() {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.jsx
deleted file mode 100644
index a37b11bcf0..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.jsx
+++ /dev/null
@@ -1,51 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import map from 'lodash/map';
-import isObject from 'lodash/isObject';
-
-import Category from 'app/components/events/interfaces/breadcrumbs/category';
-
-class CrumbTable extends React.Component {
-  static propTypes = {
-    crumb: PropTypes.object,
-    kvData: PropTypes.object,
-    summary: PropTypes.object,
-  };
-
-  renderData = () => {
-    if (!this.props.kvData) {
-      return null;
-    }
-    return map(this.props.kvData, (val, key) => {
-      return (
-        <tr key={key}>
-          <td className="key">{key}</td>
-          <td className="value">
-            <pre>{isObject(val) ? JSON.stringify(val) : val}</pre>
-          </td>
-        </tr>
-      );
-    });
-  };
-
-  render() {
-    return (
-      <table className="table key-value">
-        <thead>
-          <tr>
-            <td className="key">
-              <Category value={this.props.crumb.category} />
-            </td>
-            <td className="value">{this.props.summary}</td>
-          </tr>
-        </thead>
-        <tbody>
-          {this.props.children}
-          {this.renderData()}
-        </tbody>
-      </table>
-    );
-  }
-}
-
-export default CrumbTable;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.tsx
new file mode 100644
index 0000000000..a5af37479c
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.tsx
@@ -0,0 +1,61 @@
+import React from 'react';
+
+import Category from 'app/components/events/interfaces/breadcrumbs/category';
+import {getMeta} from 'app/components/events/meta/metaProxy';
+
+import {Crumb} from './types';
+import getBreadcrumbCustomRendererValue from './getBreadcrumbCustomRendererValue';
+
+type Props = {
+  crumb: Crumb;
+  kvData?: KvData;
+  summary: React.ReactElement;
+  children?: React.ReactNode;
+};
+
+type KvData = {
+  [key: string]: any;
+};
+
+const CrumbTable = ({children, kvData, crumb, summary}: Props) => {
+  const renderData = () => {
+    if (!kvData) {
+      return null;
+    }
+    return Object.keys(kvData).map(key => (
+      <tr key={key}>
+        <td className="key">{key}</td>
+        <td className="value">
+          <pre>
+            {getBreadcrumbCustomRendererValue({
+              value:
+                typeof kvData[key] === 'object'
+                  ? JSON.stringify(kvData[key])
+                  : kvData[key],
+              meta: getMeta(kvData, key),
+            })}
+          </pre>
+        </td>
+      </tr>
+    ));
+  };
+
+  return (
+    <table className="table key-value">
+      <thead>
+        <tr>
+          <td className="key">
+            <Category value={crumb.category} />
+          </td>
+          <td className="value">{summary}</td>
+        </tr>
+      </thead>
+      <tbody>
+        {children}
+        {renderData()}
+      </tbody>
+    </table>
+  );
+};
+
+export default CrumbTable;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.jsx
deleted file mode 100644
index 2480d11552..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.jsx
+++ /dev/null
@@ -1,52 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import CrumbTable from 'app/components/events/interfaces/breadcrumbs/crumbTable';
-import SummaryLine from 'app/components/events/interfaces/breadcrumbs/summaryLine';
-
-class DefaultRenderer extends React.Component {
-  static propTypes = {
-    crumb: PropTypes.object.isRequired,
-    kvData: PropTypes.object,
-  };
-
-  getTitle = () => {
-    const crumb = this.props.crumb;
-    if (crumb.type === 'default') {
-      return null;
-    }
-    return crumb.type
-      .split(/[_-\s]+/g)
-      .map(word => {
-        return word.substr(0, 1).toUpperCase() + word.substr(1);
-      })
-      .join(' ');
-  };
-
-  renderSummary = () => {
-    const {crumb} = this.props;
-
-    return (
-      <SummaryLine crumb={crumb}>
-        {crumb.message && (
-          <pre>
-            <code>{crumb.message}</code>
-          </pre>
-        )}
-      </SummaryLine>
-    );
-  };
-
-  render() {
-    return (
-      <CrumbTable
-        title={this.getTitle()}
-        summary={this.renderSummary()}
-        kvData={this.props.crumb.data || {}}
-        {...this.props}
-      />
-    );
-  }
-}
-
-export default DefaultRenderer;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.tsx
new file mode 100644
index 0000000000..bbd493931a
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.tsx
@@ -0,0 +1,36 @@
+import React from 'react';
+
+import CrumbTable from 'app/components/events/interfaces/breadcrumbs/crumbTable';
+import SummaryLine from 'app/components/events/interfaces/breadcrumbs/summaryLine';
+import {getMeta} from 'app/components/events/meta/metaProxy';
+import {defined} from 'app/utils';
+
+import getBreadcrumbCustomRendererValue from './getBreadcrumbCustomRendererValue';
+import {Crumb} from './types';
+
+type Props = {
+  crumb: Crumb;
+};
+
+const DefaultRenderer = ({crumb}: Props) => (
+  <CrumbTable
+    crumb={crumb}
+    summary={
+      <SummaryLine>
+        {defined(crumb?.message) && (
+          <pre>
+            <code>
+              {getBreadcrumbCustomRendererValue({
+                value: crumb.message,
+                meta: getMeta(crumb, 'message'),
+              })}
+            </code>
+          </pre>
+        )}
+      </SummaryLine>
+    }
+    kvData={crumb.data}
+  />
+);
+
+export default DefaultRenderer;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.jsx
deleted file mode 100644
index e33ff032b1..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.jsx
+++ /dev/null
@@ -1,43 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import CrumbTable from 'app/components/events/interfaces/breadcrumbs/crumbTable';
-import SummaryLine from 'app/components/events/interfaces/breadcrumbs/summaryLine';
-
-class ErrorRenderer extends React.Component {
-  static propTypes = {
-    crumb: PropTypes.object.isRequired,
-  };
-
-  renderUrl = url => {
-    return url.match(/^https?:\/\//) ? <a href={url}>{url}</a> : <em>{url}</em>;
-  };
-
-  render() {
-    const {crumb} = this.props;
-    const {type, value, ...extra} = crumb.data || {};
-    const messages = [];
-
-    if (value) {
-      messages.push(value);
-    }
-    if (crumb.message) {
-      messages.push(crumb.message);
-    }
-
-    const summary = (
-      <SummaryLine crumb={crumb}>
-        <pre>
-          <code>
-            {type && <strong>{type}: </strong>}
-            {messages.join('. ')}
-          </code>
-        </pre>
-      </SummaryLine>
-    );
-
-    return <CrumbTable title="Error" summary={summary} kvData={extra} {...this.props} />;
-  }
-}
-
-export default ErrorRenderer;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.tsx
new file mode 100644
index 0000000000..b70f8bee60
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.tsx
@@ -0,0 +1,49 @@
+import React from 'react';
+import omit from 'lodash/omit';
+
+import CrumbTable from 'app/components/events/interfaces/breadcrumbs/crumbTable';
+import SummaryLine from 'app/components/events/interfaces/breadcrumbs/summaryLine';
+import {getMeta} from 'app/components/events/meta/metaProxy';
+import {defined} from 'app/utils';
+
+import getBreadcrumbCustomRendererValue from './getBreadcrumbCustomRendererValue';
+import {Crumb} from './types';
+
+type Props = {
+  crumb: Crumb;
+};
+
+const ErrorRenderer = ({crumb}: Props) => {
+  const {data} = crumb;
+  return (
+    <CrumbTable
+      crumb={crumb}
+      summary={
+        <SummaryLine>
+          <pre>
+            <code>
+              {defined(data?.type) &&
+                getBreadcrumbCustomRendererValue({
+                  value: <strong>{`${data.type}: `}</strong>,
+                  meta: getMeta(data, 'type'),
+                })}
+              {defined(data?.value) &&
+                getBreadcrumbCustomRendererValue({
+                  value: crumb.message ? `${data.value}. ` : data.value,
+                  meta: getMeta(data, 'value'),
+                })}
+              {defined(crumb?.message) &&
+                getBreadcrumbCustomRendererValue({
+                  value: crumb.message,
+                  meta: getMeta(crumb, 'message'),
+                })}
+            </code>
+          </pre>
+        </SummaryLine>
+      }
+      kvData={omit(data, ['type', 'value'])}
+    />
+  );
+};
+
+export default ErrorRenderer;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/getBreadcrumbCustomRendererValue.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/getBreadcrumbCustomRendererValue.tsx
new file mode 100644
index 0000000000..c739efb30c
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/getBreadcrumbCustomRendererValue.tsx
@@ -0,0 +1,26 @@
+import React from 'react';
+
+import {Meta} from 'app/types';
+import AnnotatedText from 'app/components/events/meta/annotatedText';
+
+type Props = {
+  value: React.ReactNode;
+  meta?: Meta;
+};
+
+function getBreadcrumbCustomRendererValue({value, meta}: Props) {
+  if (!meta) {
+    return value;
+  }
+
+  return (
+    <AnnotatedText
+      value={value}
+      chunks={meta.chunks}
+      remarks={meta.rem}
+      errors={meta.err}
+    />
+  );
+}
+
+export default getBreadcrumbCustomRendererValue;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.jsx
deleted file mode 100644
index b59b89a8f7..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.jsx
+++ /dev/null
@@ -1,46 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import {t} from 'app/locale';
-import CrumbTable from 'app/components/events/interfaces/breadcrumbs/crumbTable';
-import SummaryLine from 'app/components/events/interfaces/breadcrumbs/summaryLine';
-
-class HttpRenderer extends React.Component {
-  static propTypes = {
-    crumb: PropTypes.object.isRequired,
-  };
-
-  renderUrl = url => {
-    if (typeof url === 'string') {
-      return url.match(/^https?:\/\//) ? <a href={url}>{url}</a> : <em>{url}</em>;
-    }
-
-    try {
-      return JSON.stringify(url);
-    } catch (e) {
-      return t('Invalid URL');
-    }
-  };
-
-  render() {
-    const {crumb} = this.props;
-    const {method, status_code, url, ...extra} = crumb.data || {};
-    const summary = (
-      <SummaryLine crumb={crumb}>
-        <pre>
-          <code>
-            {method && <strong>{method} </strong>}
-            {url && this.renderUrl(url)}
-            {status_code !== undefined ? <span>{' [' + status_code + ']'}</span> : ''}
-          </code>
-        </pre>
-      </SummaryLine>
-    );
-
-    return (
-      <CrumbTable title="HTTP Request" summary={summary} kvData={extra} {...this.props} />
-    );
-  }
-}
-
-export default HttpRenderer;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.tsx
new file mode 100644
index 0000000000..335c2ed70f
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.tsx
@@ -0,0 +1,72 @@
+import React from 'react';
+import omit from 'lodash/omit';
+
+import CrumbTable from 'app/components/events/interfaces/breadcrumbs/crumbTable';
+import SummaryLine from 'app/components/events/interfaces/breadcrumbs/summaryLine';
+import ExternalLink from 'app/components/links/externalLink';
+import {getMeta} from 'app/components/events/meta/metaProxy';
+import {defined} from 'app/utils';
+import {t} from 'app/locale';
+
+import getBreadcrumbCustomRendererValue from './getBreadcrumbCustomRendererValue';
+import {Crumb} from './types';
+
+type Props = {
+  crumb: Crumb;
+};
+
+const HttpRenderer = ({crumb}: Props) => {
+  const {data} = crumb;
+
+  const renderUrl = (url: any) => {
+    if (typeof url === 'string') {
+      return url.match(/^https?:\/\//) ? (
+        <ExternalLink data-test-id="http-renderer-external-link" href={url}>
+          {url}
+        </ExternalLink>
+      ) : (
+        <em>{url}</em>
+      );
+    }
+
+    try {
+      return JSON.stringify(url);
+    } catch (e) {
+      return t('Invalid URL');
+    }
+  };
+
+  return (
+    <CrumbTable
+      crumb={crumb}
+      summary={
+        <SummaryLine>
+          <pre>
+            <code>
+              {defined(data?.method) &&
+                getBreadcrumbCustomRendererValue({
+                  value: <strong>{`${data.method} `}</strong>,
+                  meta: getMeta(data, 'method'),
+                })}
+              {defined(data?.url) &&
+                getBreadcrumbCustomRendererValue({
+                  value: renderUrl(data.url),
+                  meta: getMeta(data, 'url'),
+                })}
+              {defined(data?.status_code) &&
+                getBreadcrumbCustomRendererValue({
+                  value: (
+                    <span data-test-id="http-renderer-status-code">{` [${data.status_code}]`}</span>
+                  ),
+                  meta: getMeta(data, 'status_code'),
+                })}
+            </code>
+          </pre>
+        </SummaryLine>
+      }
+      kvData={omit(data, ['method', 'url', 'status_code'])}
+    />
+  );
+};
+
+export default HttpRenderer;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/types.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/types.tsx
new file mode 100644
index 0000000000..4709159bfb
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/types.tsx
@@ -0,0 +1,14 @@
+export type Crumb = {
+  data: Data;
+  message?: string;
+  type: string;
+  category?: string;
+};
+
+type Data = {
+  type?: string;
+  value?: string;
+  method?: string;
+  status_code?: number | string;
+  url?: any;
+};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx
index 074e003319..5eb551aeac 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx
@@ -42,9 +42,9 @@ const KeyValueList = ({
       <tbody>
         {getData().map(({key, subject, value = null, meta}) => (
           <tr key={key}>
-            <TableData className="key" wide={longKeys}>
+            <TableSubject className="key" wide={longKeys}>
               {subject}
-            </TableData>
+            </TableSubject>
             <td className="val">
               {isContextData ? (
                 <ContextData
@@ -74,9 +74,9 @@ const KeyValueList = ({
   );
 };
 
-const TableData = styled('td')<{wide?: boolean}>`
+const TableSubject = styled('td')<{wide?: boolean}>`
   @media (min-width: ${theme.breakpoints[2]}) {
-    max-width: ${p => (p.wide ? '620px !important' : null)};
+    max-width: ${p => (p.wide ? '620px !important' : 'none')};
   }
 `;
 
diff --git a/tests/js/spec/components/events/interfaces/breadcrumbComponents/httpRenderer.spec.jsx b/tests/js/spec/components/events/interfaces/breadcrumbComponents/httpRenderer.spec.jsx
index cfcc617e74..40d756ccf0 100644
--- a/tests/js/spec/components/events/interfaces/breadcrumbComponents/httpRenderer.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/breadcrumbComponents/httpRenderer.spec.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+
 import {shallow, mount} from 'sentry-test/enzyme';
 import HttpRenderer from 'app/components/events/interfaces/breadcrumbs/httpRenderer';
 
@@ -24,11 +25,13 @@ describe('HttpRenderer', function() {
       expect(summaryLineWrapper.find('strong').text()).toEqual('POST ');
       expect(
         summaryLineWrapper
-          .find('a')
+          .find('[data-test-id="http-renderer-external-link"]')
           .text()
           .trim()
       ).toEqual('http://example.com/foo');
-      expect(summaryLineWrapper.find('span').text()).toEqual(' [0]');
+      expect(
+        summaryLineWrapper.find('[data-test-id="http-renderer-status-code"]').text()
+      ).toEqual(' [0]');
     });
 
     it("shouldn't blow up if crumb.data is missing", function() {
