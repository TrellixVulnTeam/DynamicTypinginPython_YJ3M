commit f397154ada6a4ce92f419c5c09e927ce33ce0964
Author: David Cramer <dcramer@gmail.com>
Date:   Tue May 31 13:46:59 2016 -0700

    Allow creation of user feedback via API

diff --git a/src/sentry/api/endpoints/project_user_reports.py b/src/sentry/api/endpoints/project_user_reports.py
index ce0fb7e59d..f0d92f1864 100644
--- a/src/sentry/api/endpoints/project_user_reports.py
+++ b/src/sentry/api/endpoints/project_user_reports.py
@@ -1,13 +1,54 @@
 from __future__ import absolute_import
 
+from django.db import IntegrityError, transaction
+from django.utils import timezone
+from rest_framework import serializers
+from rest_framework.response import Response
+from uuid import uuid4
+
+from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize, ProjectUserReportSerializer
 from sentry.api.paginator import DateTimePaginator
-from sentry.models import UserReport
+from sentry.models import EventMapping, Group, UserReport
+from sentry.utils.apidocs import scenario, attach_scenarios
+
+
+@scenario('CreateUserFeedback')
+def create_user_feedback_scenario(runner):
+    with runner.isolated_project('Plain Proxy') as project:
+        runner.request(
+            method='POST',
+            path='/projects/{}/{}/user-feedback/'.format(runner.org.slug, project.slug),
+            data={
+                'name': 'Jane Smith',
+                'email': 'jane@example.com',
+                'comments': 'It broke!',
+                'event_id': uuid4().hex,
+            }
+        )
+
+
+class UserReportSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = UserReport
+        fields = ('name', 'email', 'comments', 'event_id')
 
 
 class ProjectUserReportsEndpoint(ProjectEndpoint):
+    doc_section = DocSection.PROJECTS
+
     def get(self, request, project):
+        """
+        List a Project's User Feedback
+        ``````````````````````````````
+
+        Return a list of user feedback items within this project.
+
+        :pparam string organization_slug: the slug of the organization.
+        :pparam string project_slug: the slug of the project.
+        :auth: required
+        """
         queryset = UserReport.objects.filter(
             project=project,
             group__isnull=False,
@@ -20,3 +61,59 @@ class ProjectUserReportsEndpoint(ProjectEndpoint):
             on_results=lambda x: serialize(x, request.user, ProjectUserReportSerializer()),
             paginator_cls=DateTimePaginator,
         )
+
+    @attach_scenarios([create_user_feedback_scenario])
+    def post(self, request, project):
+        """
+        Submit User Feedback
+        ````````````````````
+
+        Submit and associate user feedback with an issue.
+
+        :pparam string organization_slug: the slug of the organization.
+        :pparam string project_slug: the slug of the project.
+        :auth: required
+        :param string event_id: the event ID
+        :param string name: user's name
+        :param string email: user's email address
+        :param string comments: comments supplied by user
+        """
+        serializer = UserReportSerializer(data=request.DATA)
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=400)
+
+        report = serializer.object
+        report.project = project
+        try:
+            mapping = EventMapping.objects.get(
+                event_id=report.event_id,
+                project_id=project.id,
+            )
+        except EventMapping.DoesNotExist:
+            # XXX(dcramer): the system should fill this in later
+            pass
+        else:
+            report.group = Group.objects.get(id=mapping.group_id)
+
+        try:
+            with transaction.atomic():
+                report.save()
+        except IntegrityError:
+            # There was a duplicate, so just overwrite the existing
+            # row with the new one. The only way this ever happens is
+            # if someone is messing around with the API, or doing
+            # something wrong with the SDK, but this behavior is
+            # more reasonable than just hard erroring and is more
+            # expected.
+            report = UserReport.objects.get(
+                project=report.project,
+                event_id=report.event_id,
+            )
+            report.update(
+                name=report.name,
+                email=report.email,
+                comments=report.comments,
+                date_added=timezone.now(),
+            )
+
+        return Response(serialize(report, request.user, ProjectUserReportSerializer()))
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 06ba45ad2c..05a467a035 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -274,7 +274,7 @@ urlpatterns = patterns(
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/users/$',
         ProjectUsersEndpoint.as_view(),
         name='sentry-api-0-project-users'),
-    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/user-reports/$',
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/(?:user-feedback|user-reports)/$',
         ProjectUserReportsEndpoint.as_view(),
         name='sentry-api-0-project-user-reports'),
 
@@ -312,7 +312,7 @@ urlpatterns = patterns(
     url(r'^(?:issues|groups)/(?P<issue_id>\d+)/tags/(?P<key>[^/]+)/values/$',
         GroupTagKeyValuesEndpoint.as_view(),
         name='sentry-api-0-group-tagkey-values'),
-    url(r'^(?:issues|groups)/(?P<issue_id>\d+)/user-reports/$',
+    url(r'^(?:issues|groups)/(?P<issue_id>\d+)/(?:user-feedback|user-reports)/$',
         GroupUserReportsEndpoint.as_view(),
         name='sentry-api-0-group-user-reports'),
 
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 2a9d35935d..d35cdebac3 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -16,8 +16,8 @@ from exam import fixture
 from uuid import uuid4
 
 from sentry.models import (
-    Activity, Event, EventError, Group, Organization, OrganizationMember,
-    OrganizationMemberTeam, Project, Team, User
+    Activity, Event, EventError, EventMapping, Group, Organization,
+    OrganizationMember, OrganizationMemberTeam, Project, Team, User
 )
 from sentry.utils.compat import pickle
 from sentry.utils.strings import decompress
@@ -178,6 +178,11 @@ class Fixtures(object):
             event_id=event_id,
             **kwargs
         )
+        EventMapping.objects.create(
+            project_id=event.project.id,
+            event_id=event_id,
+            group=event.group,
+        )
         # emulate EventManager refs
         event.data.bind_ref(event)
         event.save()
diff --git a/src/sentry/web/frontend/error_page_embed.py b/src/sentry/web/frontend/error_page_embed.py
index c140c4c48d..341d1f41c0 100644
--- a/src/sentry/web/frontend/error_page_embed.py
+++ b/src/sentry/web/frontend/error_page_embed.py
@@ -92,6 +92,7 @@ class ErrorPageEmbedView(View):
         form = UserReportForm(request.POST if request.method == 'POST' else None,
                               initial=initial)
         if form.is_valid():
+            # TODO(dcramer): move this to post to the internal API
             report = form.save(commit=False)
             report.project = key.project
             report.event_id = event_id
diff --git a/tests/sentry/api/endpoints/test_project_user_reports.py b/tests/sentry/api/endpoints/test_project_user_reports.py
index b1d0754dab..58a8ddc39b 100644
--- a/tests/sentry/api/endpoints/test_project_user_reports.py
+++ b/tests/sentry/api/endpoints/test_project_user_reports.py
@@ -1,12 +1,10 @@
 from __future__ import absolute_import
 
-from django.core.urlresolvers import reverse
-
 from sentry.testutils import APITestCase
 from sentry.models import UserReport
 
 
-class ProjectUserReportsTest(APITestCase):
+class ProjectUserReportListTest(APITestCase):
     def test_simple(self):
         self.login_as(user=self.user)
 
@@ -30,10 +28,11 @@ class ProjectUserReportsTest(APITestCase):
             comments='Hello world',
         )
 
-        url = reverse('sentry-api-0-project-user-reports', kwargs={
-            'organization_slug': project.organization.slug,
-            'project_slug': project.slug,
-        })
+        url = '/api/0/projects/{}/{}/user-feedback/'.format(
+            project.organization.slug,
+            project.slug,
+        )
+
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
@@ -41,3 +40,35 @@ class ProjectUserReportsTest(APITestCase):
         assert sorted(map(lambda x: x['id'], response.data)) == sorted([
             str(report_1.id),
         ])
+
+
+class CreateProjectUserReportTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        group = self.create_group(project=project)
+        event = self.create_event(group=group)
+
+        url = '/api/0/projects/{}/{}/user-feedback/'.format(
+            project.organization.slug,
+            project.slug,
+        )
+
+        response = self.client.post(url, data={
+            'event_id': event.event_id,
+            'email': 'foo@example.com',
+            'name': 'Foo Bar',
+            'comments': 'It broke!',
+        })
+
+        assert response.status_code == 200, response.content
+
+        report = UserReport.objects.get(
+            id=response.data['id'],
+        )
+        assert report.project == project
+        assert report.group == group
+        assert report.email == 'foo@example.com'
+        assert report.name == 'Foo Bar'
+        assert report.comments == 'It broke!'
