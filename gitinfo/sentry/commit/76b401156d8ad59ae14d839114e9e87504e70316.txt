commit 76b401156d8ad59ae14d839114e9e87504e70316
Author: Mark Story <mark@sentry.io>
Date:   Tue Mar 24 14:36:33 2020 -0400

    feat(perf-views) Add interactions to the latency chart (#17841)
    
    Clicking a bar will update the generated EventView to include additional
    conditions that constrain the results based on the start and end
    durations. Clicking the active bar again will remove the condititions.

diff --git a/src/sentry/static/sentry/app/components/charts/barChart.jsx b/src/sentry/static/sentry/app/components/charts/barChart.jsx
index 04979d6048..7b5618f2cc 100644
--- a/src/sentry/static/sentry/app/components/charts/barChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/barChart.jsx
@@ -19,7 +19,12 @@ export default class BarChart extends React.Component {
           BarSeries({
             name: s.seriesName,
             stack: stacked ? 'stack1' : null,
-            data: s.data.map(({value, name}) => [name, value]),
+            data: s.data.map(({value, name, itemStyle}) => {
+              if (itemStyle === undefined) {
+                return [name, value];
+              }
+              return {value: [name, value], itemStyle};
+            }),
           })
         )}
       />
diff --git a/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx b/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
index 1b8fa154fd..bb943a1000 100644
--- a/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
+++ b/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
@@ -1,7 +1,5 @@
 import 'echarts/lib/component/tooltip';
 
-import get from 'lodash/get';
-
 import {getFormattedDate} from 'app/utils/dates';
 
 import {truncationFormatter} from '../utils';
@@ -23,6 +21,17 @@ function defaultValueFormatter(value) {
   return value;
 }
 
+function getSeriesValue(series, offset) {
+  if (Array.isArray(series.data)) {
+    return series.data[offset];
+  }
+  if (Array.isArray(series.data.value)) {
+    return series.data.value[offset];
+  }
+
+  return undefined;
+}
+
 function getFormatter({
   filter,
   isGroupedByDate,
@@ -35,8 +44,9 @@ function getFormatter({
   const getFilter = seriesParam => {
     // Series do not necessarily have `data` defined, e.g. releases don't have `data`, but rather
     // has a series using strictly `markLine`s.
-    // However, real series will have `data` as a tuple of (key, value)
-    const value = seriesParam.data && seriesParam.data.length && seriesParam.data[1];
+    // However, real series will have `data` as a tuple of (label, value) or be
+    // an object with value/label keys.
+    const value = getSeriesValue(seriesParam, 0);
     if (typeof filter === 'function') {
       return filter(value);
     }
@@ -81,10 +91,12 @@ function getFormatter({
 
     const seriesParams = isAxisItem ? seriesParamsOrParam : [seriesParamsOrParam];
 
-    // If axis, timestamp comes from axis, otherwise for a single item it is defined in its data
+    // If axis, timestamp comes from axis, otherwise for a single item it is defined in the data attribute.
+    // The data attribute is usually a list of [name, value] but can also be an object of {name, value} when
+    // there is item specific formatting being used.
     const timestamp = isAxisItem
       ? seriesParams[0].axisValue
-      : get(seriesParams, '[0].data[0]');
+      : getSeriesValue(seriesParams[0], 0);
 
     const label =
       seriesParams.length &&
@@ -96,7 +108,7 @@ function getFormatter({
         .filter(getFilter)
         .map(s => {
           const formattedLabel = truncationFormatter(s.seriesName, truncate);
-          const value = valueFormatter(s.data[1]);
+          const value = valueFormatter(getSeriesValue(s, 1));
           return `<div><span class="tooltip-label">${s.marker} <strong>${formattedLabel}</strong></span> ${value}</div>`;
         })
         .join(''),
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
index cef45e5228..1f4ed09892 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
@@ -1,6 +1,6 @@
 import React from 'react';
 import {Params} from 'react-router/lib/Router';
-import * as ReactRouter from 'react-router';
+import {browserHistory} from 'react-router';
 import {Location} from 'history';
 import styled from '@emotion/styled';
 
@@ -16,7 +16,6 @@ import {decodeScalar} from 'app/views/eventsV2/utils';
 import {stringifyQueryObject} from 'app/utils/tokenizeSearch';
 import NoProjectMessage from 'app/components/noProjectMessage';
 
-import {generatePerformanceEventView} from '../data';
 import SummaryContent from './content';
 
 type Props = {
@@ -28,7 +27,7 @@ type Props = {
 };
 
 type State = {
-  eventView: EventView;
+  eventView: EventView | undefined;
 };
 
 class TransactionSummary extends React.Component<Props, State> {
@@ -64,13 +63,11 @@ class TransactionSummary extends React.Component<Props, State> {
   render() {
     const {organization, location} = this.props;
     const {eventView} = this.state;
-
     const transactionName = getTransactionName(this.props);
-
-    if (!transactionName) {
+    if (!eventView || transactionName === undefined) {
       // If there is no transaction name, redirect to the Performance landing page
 
-      ReactRouter.browserHistory.replace({
+      browserHistory.replace({
         pathname: `/organizations/${organization.slug}/performance/`,
         query: {
           ...location.query,
@@ -113,45 +110,37 @@ function getTransactionName(props: Props): string | undefined {
 function generateSummaryEventView(
   location: Location,
   transactionName: string | undefined
-): EventView {
-  let eventView = generatePerformanceEventView(location);
-  if (typeof transactionName !== 'string') {
-    return eventView;
+): EventView | undefined {
+  if (transactionName === undefined) {
+    return undefined;
   }
-
-  // narrow the search conditions of the Performance event view
-  eventView.name = transactionName;
-
-  const searchConditions = {
+  const conditions = {
     query: [],
     'event.type': ['transaction'],
     transaction: [transactionName],
   };
-  eventView.query = stringifyQueryObject(searchConditions);
-
-  eventView = eventView.withColumns([
-    {
-      kind: 'field',
-      field: 'transaction',
-    },
-    {
-      kind: 'field',
-      field: 'transaction.duration',
-    },
-    {
-      kind: 'field',
-      field: 'timestamp',
-    },
-  ]);
+  // Handle duration filters from the latency chart
+  if (location.query.startDuration || location.query.endDuration) {
+    conditions['transaction.duration'] = [
+      decodeScalar(location.query.startDuration),
+      decodeScalar(location.query.endDuration),
+    ]
+      .filter(item => item)
+      .map((item, index) => (index === 0 ? `>${item}` : `<${item}`));
+  }
 
-  eventView.sorts = [
+  return EventView.fromNewQueryWithLocation(
     {
-      kind: 'desc',
-      field: 'transaction.duration',
+      id: undefined,
+      version: 2,
+      name: transactionName,
+      fields: ['transaction', 'transaction.duration', 'timestamp'],
+      orderby: '-transaction.duration',
+      query: stringifyQueryObject(conditions),
+      projects: [],
     },
-  ];
-
-  return eventView;
+    location
+  );
 }
 
 export default withProjects(withOrganization(TransactionSummary));
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/latencyChart.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/latencyChart.tsx
index 24f978f01c..9cdae187cd 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/latencyChart.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/latencyChart.tsx
@@ -1,6 +1,7 @@
 import React from 'react';
 import styled from '@emotion/styled';
 import {Location} from 'history';
+import {browserHistory} from 'react-router';
 
 import {Panel} from 'app/components/panels';
 import {IconQuestion, IconWarning} from 'app/icons';
@@ -98,6 +99,50 @@ class LatencyChart extends AsyncComponent<Props, State> {
     );
   }
 
+  handleClick = value => {
+    const {chartData} = this.state;
+    if (chartData === null) {
+      return;
+    }
+    const {location} = this.props;
+
+    // Only bars that are 'active' will have itemStyle set.
+    // See transformData()
+    const isActive = value.data.hasOwnProperty('itemStyle');
+    const valueIndex = value.dataIndex;
+
+    // If the active bar is clicked again we need to remove the constraints.
+    const startDuration = isActive
+      ? undefined
+      : chartData.data[valueIndex].histogram_transaction_duration_15;
+    const endDuration =
+      typeof startDuration === 'number' ? startDuration + this.bucketWidth : undefined;
+
+    const target = {
+      pathname: location.pathname,
+      query: {
+        ...location.query,
+        startDuration,
+        endDuration,
+      },
+    };
+    browserHistory.push(target);
+  };
+
+  get bucketWidth() {
+    if (this.state.chartData === null) {
+      return 0;
+    }
+    // We can assume that all buckets are of equal width, use the first two
+    // buckets to get the width. The value of each histogram function indicates
+    // the beginning of the bucket.
+    const data = this.state.chartData.data;
+    return data.length > 2
+      ? data[1].histogram_transaction_duration_15 -
+          data[0].histogram_transaction_duration_15
+      : 0;
+  }
+
   renderLoading() {
     return <LoadingPanel data-test-id="histogram-loading" />;
   }
@@ -116,6 +161,7 @@ class LatencyChart extends AsyncComponent<Props, State> {
     if (chartData === null) {
       return null;
     }
+    const {location} = this.props;
     const xAxis = {
       type: 'category',
       truncate: true,
@@ -127,20 +173,15 @@ class LatencyChart extends AsyncComponent<Props, State> {
         alignWithLabel: true,
       },
     };
-    const tooltip = {
-      valueFormatter(value: number) {
-        return getDuration(value / 1000, 2);
-      },
-    };
 
     return (
       <BarChart
         grid={{left: '24px', right: '24px', top: '32px', bottom: '16px'}}
         xAxis={xAxis}
         yAxis={{type: 'value'}}
-        series={transformData(chartData.data)}
+        series={transformData(chartData.data, location, this.bucketWidth)}
         colors={['rgba(140, 79, 189, 0.3)']}
-        tooltip={tooltip}
+        onClick={this.handleClick}
       />
     );
   }
@@ -185,15 +226,23 @@ class LatencyChart extends AsyncComponent<Props, State> {
 /**
  * Convert a discover response into a barchart compatible series
  */
-function transformData(data: ApiResult[]) {
-  let previous: number = 0;
-
+function transformData(data: ApiResult[], location: Location, bucketWidth: number) {
   const seriesData = data.map(item => {
     const bucket = item.histogram_transaction_duration_15;
-    const midPoint = previous + Math.ceil((bucket - previous) / 2);
-    const value = {value: item.count, name: getDuration(midPoint / 1000, 2)};
-    previous = bucket + 1;
-
+    const midPoint = Math.ceil(bucket + bucketWidth / 2);
+    const value: any = {
+      value: item.count,
+      name: getDuration(midPoint / 1000, 2, true),
+    };
+    if (
+      location.query.startDuration &&
+      typeof location.query.startDuration === 'string'
+    ) {
+      const start = parseInt(location.query.startDuration, 10);
+      if (bucket >= start && bucket < start + bucketWidth) {
+        value.itemStyle = {color: theme.purpleLight};
+      }
+    }
     return value;
   });
 
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx
index f46b2e244e..9ac57c4544 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx
@@ -20,6 +20,7 @@ import {
   generateEventSlug,
   eventDetailsRouteWithEventView,
 } from 'app/views/eventsV2/eventDetails/utils';
+import {tokenizeSearch, stringifyQueryObject} from 'app/utils/tokenizeSearch';
 
 import {
   TableGrid,
@@ -46,9 +47,7 @@ class SummaryContentTable extends React.Component<Props> {
     const {eventView, tableData} = this.props;
 
     const tableDataMeta = tableData && tableData.meta ? tableData.meta : undefined;
-
     const columnOrder = eventView.getColumns();
-
     const generateSortLink = () => undefined;
 
     return columnOrder.map((column, index) => (
@@ -159,12 +158,23 @@ class SummaryContentTable extends React.Component<Props> {
   render() {
     const {eventView, location, organization} = this.props;
 
+    let title = t('Slowest Requests');
+    let chartQuery = eventView.query;
+    if (location.query.startDuration || location.query.endDuration) {
+      // Remove duration conditions from the chart query as we want it
+      // to always reflect the full dataset.
+      const parsed = tokenizeSearch(chartQuery);
+      title = t('Requests %s and %s in duration', ...parsed['transaction.duration']);
+      delete parsed['transaction.duration'];
+      chartQuery = stringifyQueryObject(parsed);
+    }
+
     return (
       <div>
         <LatencyChart
           organization={organization}
           location={location}
-          query={eventView.query}
+          query={chartQuery}
           project={eventView.project}
           environment={eventView.environment}
           start={eventView.start}
@@ -172,7 +182,7 @@ class SummaryContentTable extends React.Component<Props> {
           statsPeriod={eventView.statsPeriod}
         />
         <Header>
-          <HeaderTitle>{t('Slowest Requests')}</HeaderTitle>
+          <HeaderTitle>{title}</HeaderTitle>
           <HeaderButtonContainer>
             <Button
               to={eventView.getResultsViewUrlTarget(organization.slug)}
