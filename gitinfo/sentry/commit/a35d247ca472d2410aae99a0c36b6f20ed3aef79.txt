commit a35d247ca472d2410aae99a0c36b6f20ed3aef79
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Apr 11 17:41:08 2016 -0700

    Add sdk attribute to reporting API (refs GH-2599)
    
    - Coerce sentry_client to sdk when missing
    - Render SDK at bottom of event details

diff --git a/bin/load-mocks b/bin/load-mocks
index 2283d3a071..5c4c7017fc 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -305,6 +305,10 @@ def main(num_events=1):
                     platform='javascript',
                     release=release.version,
                     breadcrumbs=get_sample_breadcrumbs(prior_event_id=event1.event_id),
+                    sdk={
+                        'name': 'raven-js',
+                        'version': '2.1.0',
+                    },
                 )
 
                 event3 = create_sample_event(project, 'java')
diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 77c35ef25f..d320c50805 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -9,12 +9,14 @@ from sentry.models import Event, EventError
 
 @register(Event)
 class EventSerializer(Serializer):
+    _reserved_keys = frozenset(['sentry.interfaces.User', 'sdk'])
+
     def _get_entries(self, event, user, is_public=False):
         # XXX(dcramer): These are called entries for future-proofing
         interface_list = []
         for key, interface in event.interfaces.iteritems():
             # we treat user as a special contextual item
-            if key == 'sentry.interfaces.User':
+            if key in self._reserved_keys:
                 continue
 
             entry = {
@@ -37,9 +39,16 @@ class EventSerializer(Serializer):
             else:
                 user_data = None
 
+            sdk_interface = item.interfaces.get('sdk')
+            if sdk_interface:
+                sdk_data = sdk_interface.to_json()
+            else:
+                sdk_data = None
+
             results[item] = {
                 'entries': self._get_entries(item, user, is_public=is_public),
                 'user': user_data,
+                'sdk': sdk_data,
             }
         return results
 
@@ -88,6 +97,7 @@ class EventSerializer(Serializer):
             'entries': attrs['entries'],
             'message': obj.message,
             'user': attrs['user'],
+            'sdk': attrs['sdk'],
             'context': obj.data.get('extra', {}),
             'packages': obj.data.get('modules', {}),
             'tags': tags,
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index cbcb8ee17a..0079e20c57 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -695,6 +695,7 @@ SENTRY_INTERFACES = {
     'query': 'sentry.interfaces.query.Query',
     'user': 'sentry.interfaces.user.User',
     'csp': 'sentry.interfaces.csp.Csp',
+    'sdk': 'sentry.interfaces.sdk.Sdk',
     'applecrashreport': 'sentry.interfaces.applecrash.AppleCrashReport',
     'breadcrumbs': 'sentry.interfaces.breadcrumbs.Breadcrumbs',
     'sentry.interfaces.Exception': 'sentry.interfaces.exception.Exception',
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 33199481bb..58255e254c 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -328,6 +328,21 @@ class ClientApiHelper(object):
             result.append(unicode(bit))
         return result
 
+    def parse_client_as_sdk(self, value):
+        if not value:
+            return
+        try:
+            name, version = value.split('/', 1)
+        except ValueError:
+            try:
+                name, version = value.split(' ', 1)
+            except ValueError:
+                return
+        return {
+            'name': name,
+            'version': version,
+        }
+
     def validate_data(self, project, data):
         # TODO(dcramer): move project out of the data packet
         data['project'] = project.id
diff --git a/src/sentry/interfaces/sdk.py b/src/sentry/interfaces/sdk.py
new file mode 100644
index 0000000000..71918d2ecf
--- /dev/null
+++ b/src/sentry/interfaces/sdk.py
@@ -0,0 +1,35 @@
+from __future__ import absolute_import
+
+__all__ = ('Sdk',)
+
+from sentry.interfaces.base import Interface, InterfaceValidationError
+from sentry.utils.safe import trim
+
+
+class Sdk(Interface):
+    """
+    The SDK used to transmit this event.
+
+    >>> {
+    >>>     "name": "sentry-unity",
+    >>>     "version": "1.0"
+    >>> }
+    """
+    @classmethod
+    def to_python(cls, data):
+        name = data.get('name')
+        if not name:
+            raise InterfaceValidationError("No 'name' value")
+
+        version = data.get('version')
+        if not version:
+            raise InterfaceValidationError("No 'version' value")
+
+        kwargs = {
+            'name': trim(name, 128),
+            'version': trim(version, 128),
+        }
+        return cls(**kwargs)
+
+    def get_path(self):
+        return 'sdk'
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index de6416f0eb..f114a4c081 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -7,6 +7,7 @@ import EventExtraData from './extraData';
 import EventPackageData from './packageData';
 import EventTags from './eventTags';
 import EventMessage from './message';
+import EventSdk from './sdk';
 import EventUser from './user';
 import EventUserReport from './userReport';
 import PropTypes from '../../proptypes';
@@ -121,6 +122,11 @@ const EventEntries = React.createClass({
             group={group}
             event={evt} />
         }
+        {!utils.objectIsEmpty(evt.sdk) &&
+          <EventSdk
+            group={group}
+            event={evt} />
+        }
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/sdk.jsx b/src/sentry/static/sentry/app/components/events/sdk.jsx
new file mode 100644
index 0000000000..5408180de9
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/sdk.jsx
@@ -0,0 +1,40 @@
+import React from 'react';
+import PropTypes from '../../proptypes';
+
+import GroupEventDataSection from './eventDataSection';
+import {t} from '../../locale';
+
+const EventSdk = React.createClass({
+  propTypes: {
+    group: PropTypes.Group.isRequired,
+    event: PropTypes.Event.isRequired,
+  },
+
+  render() {
+    let {group, event} = this.props;
+    let data = event.sdk;
+    return (
+      <GroupEventDataSection
+          group={group}
+          event={event}
+          type="sdk"
+          title={t('SDK')}
+          wrapTitle={false}>
+        <table className="table key-value">
+          <tbody>
+            <tr key="name">
+              <td className="key">Name</td>
+              <td className="value"><pre>{data.name}</pre></td>
+            </tr>
+            <tr key="version">
+              <td className="key">Version</td>
+              <td className="value"><pre>{data.version}</pre></td>
+            </tr>
+          </tbody>
+        </table>
+      </GroupEventDataSection>
+    );
+  }
+});
+
+export default EventSdk;
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 700bfb9ecf..e857dbf60b 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -139,7 +139,7 @@ class BaseTestCase(Fixtures, Exam):
                 reverse('sentry-api-store'), message,
                 content_type='application/octet-stream',
                 HTTP_X_SENTRY_AUTH=get_auth_header(
-                    '_postWithHeader',
+                    '_postWithHeader/0.0.0',
                     key,
                     secret,
                     protocol,
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index af7e9192a6..c4723198c3 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -335,6 +335,11 @@ class StoreView(APIView):
         # mutates data
         data = helper.validate_data(project, data)
 
+        if 'sdk' not in data:
+            sdk = helper.parse_client_as_sdk(auth.client)
+            if sdk:
+                data['sdk'] = sdk
+
         # mutates data
         manager = EventManager(data, version=auth.version)
         data = manager.normalize()
diff --git a/tests/sentry/interfaces/test_sdk.py b/tests/sentry/interfaces/test_sdk.py
new file mode 100644
index 0000000000..b451d5ed29
--- /dev/null
+++ b/tests/sentry/interfaces/test_sdk.py
@@ -0,0 +1,35 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.interfaces.base import InterfaceValidationError
+from sentry.interfaces.sdk import Sdk
+from sentry.testutils import TestCase
+
+
+class SdkTest(TestCase):
+    def test_serialize_behavior(self):
+        assert Sdk.to_python({
+            'name': 'sentry-unity',
+            'version': '1.0',
+        }).to_json() == {
+            'name': 'sentry-unity',
+            'version': '1.0',
+        }
+
+    def test_missing_name(self):
+        with pytest.raises(InterfaceValidationError):
+            assert Sdk.to_python({
+                'version': '1.0',
+            })
+
+    def test_missing_version(self):
+        with pytest.raises(InterfaceValidationError):
+            assert Sdk.to_python({
+                'name': 'sentry-unity',
+            })
+
+    def test_path(self):
+        assert Sdk().get_path() == 'sdk'
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index d03b538236..b638e5702f 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -564,6 +564,21 @@ class EventManagerTest(TransactionTestCase):
             'message': "Blocked 'script' from 'example.com'",
         }
 
+    def test_sdk(self):
+        manager = EventManager(self.make_event(**{
+            'sdk': {
+                'name': 'sentry-unity',
+                'version': '1.0',
+            },
+        }))
+        manager.normalize()
+        event = manager.save(self.project.id)
+
+        assert event.data['sdk'] == {
+            'name': 'sentry-unity',
+            'version': '1.0',
+        }
+
 
 class GetHashesFromEventTest(TestCase):
     @patch('sentry.interfaces.stacktrace.Stacktrace.compute_hashes')
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index ae4bd6506d..bb82c4c0d0 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -278,6 +278,20 @@ class StoreViewTest(TestCase):
         call_data = mock_insert_data_to_database.call_args[0][0]
         assert call_data['sentry.interfaces.Http']['data'] == 'password=[Filtered]&foo=[Filtered]&bar=[Filtered]&baz=[Filtered]'
 
+    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')
+    def test_uses_client_as_sdk(self, mock_insert_data_to_database):
+        body = {
+            "message": "foo bar",
+        }
+        resp = self._postWithHeader(body)
+        assert resp.status_code == 200, resp.content
+
+        call_data = mock_insert_data_to_database.call_args[0][0]
+        assert call_data['sdk'] == {
+            'name': '_postWithHeader',
+            'version': '0.0.0',
+        }
+
 
 class CrossDomainXmlTest(TestCase):
     @fixture
