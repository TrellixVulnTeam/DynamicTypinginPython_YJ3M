commit 709caa783af478da4dd2dd47e832228dca0505f2
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Thu Jan 12 21:56:22 2017 -0800

    hash release versions and use TimedRetryPolicy to create releases (#4763)

diff --git a/src/sentry/api/endpoints/project_releases.py b/src/sentry/api/endpoints/project_releases.py
index 503d6c5565..2da71bd34b 100644
--- a/src/sentry/api/endpoints/project_releases.py
+++ b/src/sentry/api/endpoints/project_releases.py
@@ -15,6 +15,7 @@ from sentry.app import locks
 from sentry.models import Activity, Release
 from sentry.plugins.interfaces.releasehook import ReleaseHook
 from sentry.utils.apidocs import scenario, attach_scenarios
+from sentry.utils.retries import TimedRetryPolicy
 
 
 @scenario('CreateNewRelease')
@@ -155,9 +156,9 @@ class ProjectReleasesEndpoint(ProjectEndpoint):
                         version=result['version'],
                     ).first()
                     if not release:
-                        lock_key = 'release:%s:%s' % (project.organization_id, result['version'])
+                        lock_key = Release.get_lock_key(project.organization_id, result['version'])
                         lock = locks.get(lock_key, duration=5)
-                        with lock.acquire():
+                        with TimedRetryPolicy(10)(lock.acquire):
                             try:
                                 release, created = Release.objects.get(
                                     version=result['version'],
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 1eafcbcf54..459a06c28e 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -19,6 +19,8 @@ from sentry.db.models import (
 )
 from sentry.utils.cache import cache
 from sentry.utils.hashlib import md5_text
+from sentry.utils.retries import TimedRetryPolicy
+
 
 _sha1_re = re.compile(r'^[a-f0-9]{40}$')
 
@@ -93,6 +95,10 @@ class Release(Model):
 
         return release
 
+    @classmethod
+    def get_lock_key(cls, organization_id, version):
+        return 'release:%s:%s' % (organization_id, md5_text(version).hexdigest())
+
     @classmethod
     def get_or_create(cls, project, version, date_added):
         cache_key = cls.get_cache_key(project.id, version)
@@ -113,9 +119,9 @@ class Release(Model):
                         version=version
                     ).first()
                     if not release:
-                        lock_key = 'release:%s:%s' % (project.organization_id, version)
+                        lock_key = cls.get_lock_key(project.organization_id, version)
                         lock = locks.get(lock_key, duration=5)
-                        with lock.acquire():
+                        with TimedRetryPolicy(10)(lock.acquire):
                             try:
                                 release = cls.objects.get(
                                     organization_id=project.organization_id,
diff --git a/src/sentry/plugins/interfaces/releasehook.py b/src/sentry/plugins/interfaces/releasehook.py
index 10f0f5756c..7dc14591eb 100644
--- a/src/sentry/plugins/interfaces/releasehook.py
+++ b/src/sentry/plugins/interfaces/releasehook.py
@@ -19,6 +19,7 @@ from sentry.app import locks
 from sentry.models import (
     Activity, Commit, CommitAuthor, Release, ReleaseCommit, Repository
 )
+from sentry.utils.retries import TimedRetryPolicy
 
 
 class ReleaseHook(object):
@@ -45,9 +46,9 @@ class ReleaseHook(object):
                 if release:
                     release.update(**values)
                 else:
-                    lock_key = 'release:%s:%s' % (self.project.organization_id, version)
+                    lock_key = Release.get_lock_key(self.project.organization_id, version)
                     lock = locks.get(lock_key, duration=5)
-                    with lock.acquire():
+                    with TimedRetryPolicy(10)(lock.acquire):
                         try:
                             release = Release.objects.get(
                                 version=version,
@@ -84,9 +85,9 @@ class ReleaseHook(object):
                     version=version,
                 ).first()
                 if not release:
-                    lock_key = 'release:%s:%s' % (project.organization_id, version)
+                    lock_key = Release.get_lock_key(project.organization_id, version)
                     lock = locks.get(lock_key, duration=5)
-                    with lock.acquire():
+                    with TimedRetryPolicy(10)(lock.acquire):
                         try:
                             release = Release.objects.get(
                                 organization_id=project.organization_id,
@@ -171,9 +172,9 @@ class ReleaseHook(object):
                 if release:
                     release.update(**values)
                 else:
-                    lock_key = 'release:%s:%s' % (self.project.organization_id, version)
+                    lock_key = Release.get_lock_key(self.project.organization_id, version)
                     lock = locks.get(lock_key, duration=5)
-                    with lock.acquire():
+                    with TimedRetryPolicy(10)(lock.acquire):
                         try:
                             release = Release.objects.get(
                                 version=version,
diff --git a/src/sentry/receivers/releases.py b/src/sentry/receivers/releases.py
index b7070497e0..58613a320d 100644
--- a/src/sentry/receivers/releases.py
+++ b/src/sentry/receivers/releases.py
@@ -6,6 +6,7 @@ from django.db.models.signals import post_save
 from sentry.app import locks
 from sentry.models import Release, TagValue
 from sentry.tasks.clear_expired_resolutions import clear_expired_resolutions
+from sentry.utils.retries import TimedRetryPolicy
 
 
 def ensure_release_exists(instance, created, **kwargs):
@@ -29,9 +30,9 @@ def ensure_release_exists(instance, created, **kwargs):
             if release:
                 release.update(date_added=instance.first_seen)
             else:
-                lock_key = 'release:%s:%s' % (instance.project.organization_id, instance.value)
+                lock_key = Release.get_lock_key(instance.project.organization_id, instance.value)
                 lock = locks.get(lock_key, duration=5)
-                with lock.acquire():
+                with TimedRetryPolicy(10)(lock.acquire):
                     try:
                         release = Release.objects.get(
                             organization_id=instance.project.organization_id,
