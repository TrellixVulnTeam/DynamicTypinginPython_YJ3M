commit 046730c34aada4a878537939f3e6e84224700317
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Feb 14 11:13:18 2018 -0800

    feat(ui): New toast indicators (#7174)
    
    Removes settingsIndicator and merges it with existing + redesigned toasts.
    
    Moving forward, let's use the indicator action creators rather than the store directly.

diff --git a/docs-ui/components/indicators.stories.js b/docs-ui/components/indicators.stories.js
new file mode 100644
index 0000000000..cd88f72e91
--- /dev/null
+++ b/docs-ui/components/indicators.stories.js
@@ -0,0 +1,93 @@
+import React from 'react';
+import {storiesOf} from '@storybook/react';
+import {withInfo} from '@storybook/addon-info';
+import {select} from '@storybook/addon-knobs';
+
+import IndicatorContainer, {Indicators} from 'sentry-ui/indicators';
+import IndicatorStore from 'application-root/stores/indicatorStore';
+import {
+  addSuccessMessage,
+  addErrorMessage,
+  addMessage,
+} from 'application-root/actionCreators/indicator';
+import Button from 'sentry-ui/buttons/button';
+
+const stories = storiesOf('Toast Indicators', module);
+stories
+  .add(
+    'static',
+    withInfo('Toast Indicators')(() => {
+      let type = select(
+        'Type',
+        {success: 'success', error: 'error', loading: 'loading'},
+        'success'
+      );
+
+      return (
+        <div style={{backgroundColor: 'white', padding: 12}}>
+          <Indicators
+            items={[
+              {
+                id: '',
+                type,
+                message: 'Indicator message',
+              },
+            ]}
+          />
+        </div>
+      );
+    })
+  )
+  .add(
+    'interactive',
+    withInfo({
+      propTablesExclude: [Button],
+      text: 'Toast Indicators',
+    })(() => {
+      let success;
+      let error;
+      let loading;
+
+      return (
+        <div style={{backgroundColor: 'white', padding: 12}}>
+          <Button
+            onClick={() => {
+              if (success) {
+                IndicatorStore.remove(success);
+                success = null;
+              } else {
+                success = addSuccessMessage('Success');
+              }
+            }}
+          >
+            Toggle Success
+          </Button>
+          <Button
+            onClick={() => {
+              if (loading) {
+                IndicatorStore.remove(loading);
+                loading = null;
+              } else {
+                loading = addMessage('Loading', 'loading');
+              }
+            }}
+          >
+            Toggle Loading
+          </Button>
+          <Button
+            onClick={() => {
+              if (error) {
+                IndicatorStore.remove(error);
+                error = null;
+              } else {
+                error = addErrorMessage('Error');
+              }
+            }}
+          >
+            Toggle Error
+          </Button>
+          <IndicatorContainer />
+        </div>
+      );
+    })
+  );
diff --git a/src/sentry/static/sentry/app/actionCreators/indicator.jsx b/src/sentry/static/sentry/app/actionCreators/indicator.jsx
new file mode 100644
index 0000000000..564664c6d1
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/indicator.jsx
@@ -0,0 +1,71 @@
+import {DEFAULT_TOAST_DURATION} from '../constants';
+import IndicatorActions from '../actions/indicatorActions';
+
+// Removes a single indicator
+export function remove(indicator) {
+  IndicatorActions.remove(indicator);
+}
+
+// Clears all indicators
+export function clear() {
+  IndicatorActions.clear();
+}
+
+// Note previous IndicatorStore.add behavior was to default to "loading" if no type was supplied
+export function addMessage(msg, type, options = {}) {
+  let {duration} = options;
+
+  // use default only if undefined, as 0 is a valid duration
+  duration = typeof duration === 'undefined' ? DEFAULT_TOAST_DURATION : duration;
+
+  let action = options.append ? 'append' : 'replace';
+  return IndicatorActions[action](msg, type, {...options, duration});
+}
+
+export function addErrorMessage(msg, duration, options = {}) {
+  addMessage(msg, 'error', {...options, duration});
+}
+
+export function addSuccessMessage(msg, duration, options = {}) {
+  addMessage(msg, 'success', {...options, duration});
+}
+
+/**
+ * This will call an action creator to generate a "Toast" message that
+ * notifies user the field that changed with its previous and current values.
+ *
+ * Also allows for undo
+ */
+
+export function saveOnBlurUndoMessage(change, model, fieldName) {
+  if (!model) return;
+
+  let label = model.getDescriptor(fieldName, 'label');
+
+  if (!label) return;
+
+  addSuccessMessage(
+    `Changed ${label} from "${change.old}" to "${change.new}"`,
+    DEFAULT_TOAST_DURATION,
+    {
+      model,
+      id: fieldName,
+      undo: () => {
+        if (!model || !fieldName) return;
+
+        let oldValue = model.getValue(fieldName);
+        let didUndo = model.undo();
+        let newValue = model.getValue(fieldName);
+
+        if (!didUndo) return;
+        if (!label) return;
+
+        model.saveField(fieldName, newValue).then(() => {
+          addMessage(`Restored ${label} from "${oldValue}" to "${newValue}"`, 'undo', {
+            duration: DEFAULT_TOAST_DURATION,
+          });
+        });
+      },
+    }
+  );
+}
diff --git a/src/sentry/static/sentry/app/actionCreators/settingsIndicator.jsx b/src/sentry/static/sentry/app/actionCreators/settingsIndicator.jsx
deleted file mode 100644
index e81f3b26c1..0000000000
--- a/src/sentry/static/sentry/app/actionCreators/settingsIndicator.jsx
+++ /dev/null
@@ -1,46 +0,0 @@
-import {DEFAULT_TOAST_DURATION} from '../constants';
-import SettingsIndicatorActions from '../actions/settingsIndicatorActions';
-
-let clearId;
-
-export function remove() {
-  SettingsIndicatorActions.remove();
-}
-
-export function undo() {
-  SettingsIndicatorActions.undo();
-}
-
-/**
- *
- * @params {string} msg Message
- * @params {string} type ['success', 'error', '']
- * @params {object} options
- * @params {boolean} options.disableUndo Disables undo (default false)
- * @params {number} options.duration Duration to show indicator, default in constants
- */
-export function addMessage(msg, type, options = {}) {
-  let {duration} = options;
-
-  // use default only if undefined, as 0 is a valid duration
-  duration = typeof duration === 'undefined' ? DEFAULT_TOAST_DURATION : duration;
-
-  SettingsIndicatorActions.add(msg, type, options);
-
-  // clear existing timeout if exists
-  if (duration && clearId) {
-    window.clearTimeout(clearId);
-  }
-
-  if (duration) {
-    clearId = window.setTimeout(remove, duration);
-  }
-}
-
-export function addErrorMessage(msg, duration, options = {}) {
-  addMessage(msg, 'error', {...options, duration});
-}
-
-export function addSuccessMessage(msg, duration, options = {}) {
-  addMessage(msg, 'success', {...options, duration});
-}
diff --git a/src/sentry/static/sentry/app/actions/indicatorActions.jsx b/src/sentry/static/sentry/app/actions/indicatorActions.jsx
new file mode 100644
index 0000000000..13b66fff8a
--- /dev/null
+++ b/src/sentry/static/sentry/app/actions/indicatorActions.jsx
@@ -0,0 +1,11 @@
+import Reflux from 'reflux';
+
+const IndicatorActions = Reflux.createActions([
+  'replace',
+  'append',
+  'remove',
+  'clear',
+  'undo',
+]);
+
+export default IndicatorActions;
diff --git a/src/sentry/static/sentry/app/actions/settingsIndicatorActions.jsx b/src/sentry/static/sentry/app/actions/settingsIndicatorActions.jsx
deleted file mode 100644
index 648f67812d..0000000000
--- a/src/sentry/static/sentry/app/actions/settingsIndicatorActions.jsx
+++ /dev/null
@@ -1,5 +0,0 @@
-import Reflux from 'reflux';
-
-const SettingsIndicatorActions = Reflux.createActions(['add', 'remove', 'undo']);
-
-export default SettingsIndicatorActions;
diff --git a/src/sentry/static/sentry/app/components/alerts/toastIndicator.jsx b/src/sentry/static/sentry/app/components/alerts/toastIndicator.jsx
index 1a683fa37f..69b70cb7b3 100644
--- a/src/sentry/static/sentry/app/components/alerts/toastIndicator.jsx
+++ b/src/sentry/static/sentry/app/components/alerts/toastIndicator.jsx
@@ -1,18 +1,106 @@
-import classNames from 'classnames';
 import PropTypes from 'prop-types';
 import React from 'react';
+import styled from 'react-emotion';
 
-function ToastIndicator({type, children}) {
+import {t} from '../../locale';
+import InlineSvg from '../inlineSvg';
+import LoadingIndicator from '../../components/loadingIndicator';
+
+const Toast = styled.div`
+  display: flex;
+  align-items: center;
+  height: 40px;
+  padding: 0 15px 0 10px;
+  margin-top: 15px;
+  background: #fff;
+  background-image: linear-gradient(
+    -180deg,
+    rgba(255, 255, 255, 0.12) 0%,
+    rgba(240, 238, 245, 0.35) 98%
+  );
+  color: ${p => p.theme.gray5};
+  border-radius: 44px 5px 5px 44px;
+  box-shadow: 0 0 0 1px rgba(47, 40, 55, 0.12), 0 1px 2px 0 rgba(47, 40, 55, 0.12),
+    0 4px 12px 0 rgba(47, 40, 55, 0.16);
+  transition: opacity 0.25s linear;
+
+  &.toast-enter {
+    opacity: 0;
+  }
+
+  &.toast-enter-active {
+    opacity: 1;
+  }
+
+  &.toast-leave {
+    opacity: 1;
+  }
+
+  &.toast-leave-active {
+    opacity: 0;
+  }
+`;
+
+const Icon = styled.div`
+  margin-right: 6px;
+  svg {
+    display: block;
+  }
+
+  color: ${p => (p.type == 'success' ? p.theme.green : p.theme.red)};
+`;
+
+const Message = styled.div`
+  flex: 1;
+`;
+
+const Undo = styled.div`
+  display: inline-block;
+  color: ${p => p.theme.gray2};
+  padding-left: 16px;
+  margin-left: 16px;
+  border-left: 1px solid ${p => p.theme.borderLight};
+  cursor: pointer;
+
+  &:hover {
+    color: ${p => p.theme.gray3};
+  }
+`;
+
+function ToastIndicator({indicator, onDismiss, ...props}) {
+  let icon;
+  let {options, message, type} = indicator;
+  let {undo, disableDismiss} = options || {};
+  let showUndo = typeof undo === 'function';
+  const handleClick = e => {
+    if (disableDismiss) return;
+    if (typeof onDismiss === 'function') {
+      onDismiss(indicator, e);
+    }
+  };
+
+  if (type == 'success') {
+    icon = <InlineSvg src="icon-circle-check" size="24px" />;
+  } else if (type == 'error') {
+    icon = <InlineSvg src="icon-circle-close" size="24px" />;
+  }
   return (
-    <div className={classNames('toast', type)}>
-      <span className="icon" />
-      <div className="toast-message">{children}</div>
-    </div>
+    <Toast onClick={handleClick} {...props}>
+      {type == 'loading' ? <LoadingIndicator mini /> : <Icon type={type}>{icon}</Icon>}
+      <Message>{message}</Message>
+      {showUndo && <Undo onClick={undo}>{t('Undo')}</Undo>}
+    </Toast>
   );
 }
 
 ToastIndicator.propTypes = {
-  type: PropTypes.string.isRequired,
+  indicator: PropTypes.shape({
+    type: PropTypes.oneOf(['error', 'success', 'loading', 'undo', '']),
+    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
+    message: PropTypes.node,
+    options: PropTypes.object,
+  }),
+  onDismiss: PropTypes.func,
 };
 
 export default ToastIndicator;
diff --git a/src/sentry/static/sentry/app/components/indicators.jsx b/src/sentry/static/sentry/app/components/indicators.jsx
index 62bc8c3bb8..e12234e051 100644
--- a/src/sentry/static/sentry/app/components/indicators.jsx
+++ b/src/sentry/static/sentry/app/components/indicators.jsx
@@ -1,15 +1,75 @@
 import React from 'react';
+import PropTypes from 'prop-types';
 import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 import ReactCSSTransitionGroup from 'react-addons-css-transition-group';
+import styled from 'react-emotion';
+import {ThemeProvider} from 'emotion-theming';
+import {cx} from 'emotion';
 
-import LoadingIndicator from '../components/loadingIndicator';
 import ToastIndicator from '../components/alerts/toastIndicator';
-
 import IndicatorStore from '../stores/indicatorStore';
+import theme from '../utils/theme';
+import {remove} from '../actionCreators/indicator';
+
+const Toasts = styled.div`
+  position: fixed;
+  right: 30px;
+  bottom: 30px;
+  z-index: ${p => p.theme.zIndex.toast};
+`;
+
+class Indicators extends React.Component {
+  static propTypes = {
+    items: PropTypes.arrayOf(
+      PropTypes.shape({
+        type: PropTypes.oneOf(['error', 'success', 'loading', 'undo', '']),
+        id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
+        message: PropTypes.node,
+        options: PropTypes.object,
+      })
+    ),
+  };
+
+  static defaultProps = {
+    items: [],
+  };
+
+  handleDismiss = indicator => {
+    remove(indicator);
+  };
+
+  render() {
+    let {items, className, ...props} = this.props;
+
+    return (
+      <Toasts {...props} className={cx(className, 'ref-toasts')}>
+        <ReactCSSTransitionGroup
+          transitionName="toast"
+          transitionEnterTimeout={200}
+          transitionLeaveTimeout={200}
+        >
+          {items.map((indicator, i) => {
+            // We purposefully use `i` as key here because of transitions
+            // Toasts can now queue up, so when we change from [firstToast] -> [secondToast],
+            // we don't want to  animate `firstToast` out and `secondToast` in, rather we want
+            // to replace `firstToast` with `secondToast`
+            return (
+              <ToastIndicator
+                onDismiss={this.handleDismiss}
+                indicator={indicator}
+                key={i}
+              />
+            );
+          })}
+        </ReactCSSTransitionGroup>
+      </Toasts>
+    );
+  }
+}
 
-const Indicators = createReactClass({
-  displayName: 'Indicators',
+const IndicatorsContainer = createReactClass({
+  displayName: 'IndicatorsContainer',
   mixins: [Reflux.connect(IndicatorStore, 'items')],
 
   getInitialState() {
@@ -19,32 +79,16 @@ const Indicators = createReactClass({
   },
 
   render() {
+    // #NEW-SETTINGS - remove ThemeProvider here once new settings is merged
+    // `alerts.html` django view includes this container and doesn't have a theme provider
+    // not even sure it is used in django views but this is just an easier temp solution
     return (
-      <div {...this.props}>
-        <ReactCSSTransitionGroup
-          transitionName="toast"
-          transitionEnter={false}
-          transitionLeaveTimeout={500}
-        >
-          {this.state.items.map(indicator => {
-            if (indicator.type === 'error' || indicator.type === 'success') {
-              return (
-                <ToastIndicator type={indicator.type} key={indicator.id}>
-                  {indicator.message}
-                </ToastIndicator>
-              );
-            } else {
-              return (
-                <LoadingIndicator className="toast" key={indicator.id}>
-                  {indicator.message}
-                </LoadingIndicator>
-              );
-            }
-          })}
-        </ReactCSSTransitionGroup>
-      </div>
+      <ThemeProvider theme={theme}>
+        <Indicators {...this.props} items={this.state.items} />
+      </ThemeProvider>
     );
   },
 });
 
-export default Indicators;
+export default IndicatorsContainer;
+export {Indicators};
diff --git a/src/sentry/static/sentry/app/stores/indicatorStore.jsx b/src/sentry/static/sentry/app/stores/indicatorStore.jsx
index 668a2f48c2..3e6f86fff6 100644
--- a/src/sentry/static/sentry/app/stores/indicatorStore.jsx
+++ b/src/sentry/static/sentry/app/stores/indicatorStore.jsx
@@ -1,10 +1,15 @@
 import Reflux from 'reflux';
 import {t} from '../locale';
+import IndicatorActions from '../actions/indicatorActions';
 
 const IndicatorStore = Reflux.createStore({
   init() {
     this.items = [];
     this.lastId = 0;
+    this.listenTo(IndicatorActions.append, this.append);
+    this.listenTo(IndicatorActions.replace, this.add);
+    this.listenTo(IndicatorActions.remove, this.remove);
+    this.listenTo(IndicatorActions.clear, this.clear);
   },
 
   addSuccess(message) {
@@ -15,30 +20,78 @@ const IndicatorStore = Reflux.createStore({
     return this.add(message, 'error', {duration: 2000});
   },
 
-  add(message, type, options) {
-    options = options || {};
-
+  addMessage(message, type, {append, ...options} = {}) {
     let indicator = {
       id: this.lastId++,
       message,
       type,
       options,
+      clearId: null,
     };
 
     if (options.duration) {
-      setTimeout(() => {
+      indicator.clearId = setTimeout(() => {
         this.remove(indicator);
       }, options.duration);
     }
-    this.items = [indicator]; // replace
+
+    let newItems = append ? [...this.items, indicator] : [indicator];
+
+    this.items = newItems;
     this.trigger(this.items);
     return indicator;
   },
 
+  /**
+   * Appends a message to be displayed in list of indicators
+   *
+   * @param {String} message Toast message to be displayed
+   * @param {String} type One of ['error', 'success', '']
+   * @param {Object} options Options object
+   * @param {Number} options.duration Duration the toast should be displayed
+   */
+  append(message, type, options) {
+    return this.addMessage(message, type, {
+      ...options,
+      append: true,
+    });
+  },
+
+  /**
+   * When this method is called directly via older parts of the application,
+   * we want to maintain the old behavior in that it is replaced (and not queued up)
+   *
+   * @param {String} message Toast message to be displayed
+   * @param {String} type One of ['error', 'success', '']
+   * @param {Object} options Options object
+   * @param {Number} options.duration Duration the toast should be displayed
+   */
+  add(message, type = 'loading', options) {
+    return this.addMessage(message, type, {
+      ...options,
+      append: false,
+    });
+  },
+
+  // Clear all indicators
+  clear() {
+    this.items = [];
+    this.trigger(this.items);
+  },
+
+  // Remove a single indicator
   remove(indicator) {
+    if (!indicator) return;
+
     this.items = this.items.filter(item => {
       return item !== indicator;
     });
+
+    if (indicator.clearId) {
+      window.clearTimeout(indicator.options.clearId);
+      indicator.options.clearId = null;
+    }
+
     this.trigger(this.items);
   },
 });
diff --git a/src/sentry/static/sentry/app/stores/settingsIndicatorStore.jsx b/src/sentry/static/sentry/app/stores/settingsIndicatorStore.jsx
deleted file mode 100644
index 53cc0b1d5f..0000000000
--- a/src/sentry/static/sentry/app/stores/settingsIndicatorStore.jsx
+++ /dev/null
@@ -1,64 +0,0 @@
-import Reflux from 'reflux';
-
-import {defined} from '../utils';
-import SettingsIndicatorActions from '../actions/settingsIndicatorActions';
-
-const SettingsIndicatorStore = Reflux.createStore({
-  init() {
-    this.state = null;
-    this.model = null;
-    this.id = null;
-    this.listenTo(SettingsIndicatorActions.add, this.add);
-    this.listenTo(SettingsIndicatorActions.undo, this.undo);
-    this.listenTo(SettingsIndicatorActions.remove, this.remove);
-  },
-
-  add(message, type, options = {}) {
-    if (options.model) {
-      this.model = options.model;
-    }
-    this.id = options.id;
-
-    this.state = {
-      options: {
-        ...options,
-
-        // Use options, else default to disable if model does not exist
-        disableUndo: defined(options.disableUno) ? options.disableUndo : !options.model,
-      },
-      message,
-      type,
-    };
-    this.trigger(this.state);
-  },
-
-  remove() {
-    // Do nothing if already null
-    if (!this.state) return;
-
-    this.state = null;
-    this.trigger(this.state);
-  },
-
-  undo() {
-    if (!this.model || !this.id) return;
-
-    // Remove current messages
-    this.remove();
-    let oldValue = this.model.getValue(this.id);
-    let didUndo = this.model.undo();
-    let newValue = this.model.getValue(this.id);
-
-    if (!didUndo) return;
-
-    // billy: I don't like the store <-> model coupling
-    let label = this.model.getDescriptor(this.id, 'label');
-    if (!label) return;
-
-    this.model.saveField(this.id, newValue).then(() => {
-      this.add(`Restored ${label} from "${oldValue}" to "${newValue}"`, 'undo', 5000);
-    });
-  },
-});
-
-export default SettingsIndicatorStore;
diff --git a/src/sentry/static/sentry/app/utils/theme.jsx b/src/sentry/static/sentry/app/utils/theme.jsx
index 92e0362870..d4df939018 100644
--- a/src/sentry/static/sentry/app/utils/theme.jsx
+++ b/src/sentry/static/sentry/app/utils/theme.jsx
@@ -56,6 +56,7 @@ const theme = {
     header: 1000,
     dropdown: 1001,
     modal: 10000,
+    toast: 10001,
   },
 
   alert: {
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountClose.jsx b/src/sentry/static/sentry/app/views/settings/account/accountClose.jsx
index 39ccccbad3..31b9ae14d0 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountClose.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountClose.jsx
@@ -2,7 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
-import {addMessage, addErrorMessage} from '../../../actionCreators/settingsIndicator';
+import {addMessage, addErrorMessage} from '../../../actionCreators/indicator';
 import {openModal} from '../../../actionCreators/modal';
 import {t} from '../../../locale';
 import AsyncView from '../../asyncView';
diff --git a/src/sentry/static/sentry/app/views/settings/account/apiApplicationDetails.jsx b/src/sentry/static/sentry/app/views/settings/account/apiApplicationDetails.jsx
index 5ead18f013..00cc70b1b4 100644
--- a/src/sentry/static/sentry/app/views/settings/account/apiApplicationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/apiApplicationDetails.jsx
@@ -2,10 +2,7 @@ import {Box} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
 
-import {
-  addErrorMessage,
-  addSuccessMessage,
-} from '../../../actionCreators/settingsIndicator';
+import {addErrorMessage, addSuccessMessage} from '../../../actionCreators/indicator';
 import {t} from '../../../locale';
 import AsyncView from '../../asyncView';
 import ConfigStore from '../../../stores/configStore';
diff --git a/src/sentry/static/sentry/app/views/settings/account/avatar.jsx b/src/sentry/static/sentry/app/views/settings/account/avatar.jsx
index f9d0f1be5b..aded7391c7 100644
--- a/src/sentry/static/sentry/app/views/settings/account/avatar.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/avatar.jsx
@@ -3,10 +3,7 @@ import React from 'react';
 import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 
-import {
-  addErrorMessage,
-  addSuccessMessage,
-} from '../../../actionCreators/settingsIndicator';
+import {addErrorMessage, addSuccessMessage} from '../../../actionCreators/indicator';
 import {t} from '../../../locale';
 import ApiMixin from '../../../mixins/apiMixin';
 import Avatar from '../../../components/avatar';
@@ -70,9 +67,7 @@ const AccountAvatar = createReactClass({
     let {onSave} = this.props;
     this.setState({user});
     onSave(user);
-    addSuccessMessage(t('Successfully saved avatar preferences'), undefined, {
-      disableUndo: true,
-    });
+    addSuccessMessage(t('Successfully saved avatar preferences'));
   },
 
   saveSettings(ev) {
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
index 08261df137..eb644b8172 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
@@ -4,7 +4,7 @@ import _ from 'lodash';
 import {Client} from '../../../../api';
 import {defined} from '../../../../utils';
 import FormState from '../../../../components/forms/state';
-import {addErrorMessage} from '../../../../actionCreators/settingsIndicator';
+import {addErrorMessage} from '../../../../actionCreators/indicator';
 
 class FormModel {
   /**
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsActivity.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsActivity.jsx
deleted file mode 100644
index 35c6ef09c0..0000000000
--- a/src/sentry/static/sentry/app/views/settings/components/settingsActivity.jsx
+++ /dev/null
@@ -1,68 +0,0 @@
-import React from 'react';
-import createReactClass from 'create-react-class';
-import Reflux from 'reflux';
-import styled from 'react-emotion';
-
-import {t} from '../../../locale';
-import {undo} from '../../../actionCreators/settingsIndicator';
-import SettingsIndicatorStore from '../../../stores/settingsIndicatorStore';
-
-const Container = styled.div`
-  position: fixed;
-  bottom: 32px;
-  right: 40px;
-  font-size: 15px;
-  color: ${p => p.theme.gray5};
-  background: #fff;
-  border-radius: 3px;
-  border: 1px solid ${p => p.theme.borderDark};
-  box-shadow: ${p => p.theme.dropShadowHeavy};
-  padding: 12px 24px;
-  line-height: 1;
-`;
-
-const Undo = styled.div`
-  display: inline-block;
-  color: ${p => p.theme.gray2};
-  padding-left: 16px;
-  margin-left: 16px;
-  border-left: 1px solid ${p => p.theme.borderLight};
-  cursor: pointer;
-
-  &:hover {
-    color: ${p => p.theme.gray3};
-  }
-`;
-
-const SettingsActivity = createReactClass({
-  displayName: 'SettingsActivity',
-  mixins: [Reflux.connect(SettingsIndicatorStore, 'activity')],
-
-  getInitialState() {
-    return {
-      activity: null,
-    };
-  },
-
-  render() {
-    let {activity} = this.state;
-
-    if (!activity) {
-      return null;
-    }
-
-    let showUndo =
-      !activity.options.disableUndo &&
-      activity.type !== 'error' &&
-      activity.type !== 'undo';
-
-    return (
-      <Container type={activity.type}>
-        {activity.message}
-        {showUndo && <Undo onClick={undo}>{t('Undo')}</Undo>}
-      </Container>
-    );
-  },
-});
-
-export default SettingsActivity;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx b/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx
index 88c1622ee6..d7e7c5ba96 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx
@@ -6,8 +6,8 @@ import createReactClass from 'create-react-class';
 
 import {
   addErrorMessage,
-  addSuccessMessage,
-} from '../../../../actionCreators/settingsIndicator';
+  saveOnBlurUndoMessage,
+} from '../../../../actionCreators/indicator';
 import ApiMixin from '../../../../mixins/apiMixin';
 import Form from '../../components/forms/form';
 import JsonForm from '../../components/forms/jsonForm';
@@ -53,19 +53,8 @@ const NewOrganizationSettingsForm = createReactClass({
         saveOnBlur
         allowUndo
         initialData={initialData}
-        onSubmitSuccess={(change, model, id) => {
-          if (!model) return;
-
-          let label = model.getDescriptor(id, 'label');
-
-          if (!label) return;
-
-          addSuccessMessage(
-            `Changed ${label} from "${change.old}" to "${change.new}"`,
-            TOAST_DURATION,
-            {model, id}
-          );
-
+        onSubmitSuccess={(change, model, fieldName) => {
+          saveOnBlurUndoMessage(change, model, fieldName);
           // Special case for slug, need to forward to new slug
           if (typeof onSave === 'function') {
             onSave(initialData, model.initialData);
diff --git a/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx b/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx
index e71137d3f8..35dd0eeba6 100644
--- a/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx
@@ -5,7 +5,6 @@ import React from 'react';
 import styled from 'react-emotion';
 
 import Alert from '../../components/alert';
-import SettingsActivity from './components/settingsActivity';
 import SettingsBreadcrumb from './components/settingsBreadcrumb';
 import SettingsHeader from './components/settingsHeader';
 import SettingsSearch from './components/settingsSearch';
@@ -84,7 +83,6 @@ class SettingsLayout extends React.Component {
             <NewSettingsWarning location={this.props.location} />
           </Content>
         </Flex>
-        <SettingsActivity />
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/team/teamSettings.jsx b/src/sentry/static/sentry/app/views/settings/team/teamSettings.jsx
index f1779d2c7c..f14f940e8f 100644
--- a/src/sentry/static/sentry/app/views/settings/team/teamSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/team/teamSettings.jsx
@@ -2,10 +2,7 @@ import {Box} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
 
-import {
-  addErrorMessage,
-  addSuccessMessage,
-} from '../../../actionCreators/settingsIndicator';
+import {addErrorMessage, saveOnBlurUndoMessage} from '../../../actionCreators/indicator';
 import AsyncView from '../../asyncView';
 import Form from '../components/forms/form';
 import JsonForm from '../components/forms/jsonForm';
@@ -47,17 +44,7 @@ export default class TeamSettings extends AsyncView {
         saveOnBlur
         allowUndo
         onSubmitSuccess={(change, model, id) => {
-          if (!model) return;
-
-          let label = model.getDescriptor(id, 'label');
-
-          if (!label) return;
-
-          addSuccessMessage(
-            `Changed ${label} from "${change.old}" to "${change.new}"`,
-            TOAST_DURATION,
-            {model, id}
-          );
+          saveOnBlurUndoMessage(change, model, id);
         }}
         onSubmitError={() => addErrorMessage('Unable to save change', TOAST_DURATION)}
         initialData={{
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index f91cf43e97..65fa021068 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -686,8 +686,8 @@ table.integrations {
 
   .loading-indicator {
     position: relative;
-    border: @check-thickness solid @white-darker;
-    border-left-color: @gray;
+    border: @check-thickness solid @white-darkest;
+    border-left-color: @purple;
     -webkit-animation: loading 0.5s infinite linear;
     animation: loading 0.55s infinite linear;
     margin: 0 auto;
@@ -788,8 +788,8 @@ table.integrations {
   .loading-indicator {
     margin: 0;
     border-radius: 50%;
-    width: 20px;
-    height: 20px;
+    width: 24px;
+    height: 24px;
     border-width: 2px;
     position: absolute;
     left: 0;
@@ -821,63 +821,6 @@ table.integrations {
   transition: opacity 300ms ease-in;
 }
 
-.toast {
-  .loading.mini();
-  padding: 20px 30px;
-  font-size: 15px;
-  z-index: 100000;
-  border-radius: 3px;
-
-  position: fixed;
-  bottom: 20px;
-  right: 20px;
-  color: #fff;
-  opacity: 1;
-
-  .toast-message {
-    display: inline-block;
-    padding-left: 15px;
-  }
-
-  &.loading {
-    background: rgba(52, 60, 69, 0.8);
-    &.toast-leave {
-      display: none; /* hides immediately*/
-    }
-  }
-
-  &.success {
-    background: @green;
-    color: @white;
-    .icon:before {
-      content: '\e60a'; // checkmark
-    }
-  }
-  &.error {
-    background: @red;
-    color: @white;
-    .icon:before {
-      content: '\e615'; // exclamation
-    }
-  }
-  &.success.toast-leave,
-  &.error.toast-leave {
-    opacity: 0;
-    .transition(opacity 0.2s linear);
-  }
-
-  .loading-indicator {
-    border-color: rgba(255, 255, 255, 0.4);
-    border-left-color: rgba(255, 255, 255, 1);
-    top: 20px;
-    left: 24px;
-  }
-
-  .loading-message {
-    padding-left: 24px;
-  }
-}
-
 // Loading Gif
 
 .loading.triangle {
diff --git a/tests/acceptance/test_project_alert_settings.py b/tests/acceptance/test_project_alert_settings.py
index c1c2ed9f1f..47c45513b3 100644
--- a/tests/acceptance/test_project_alert_settings.py
+++ b/tests/acceptance/test_project_alert_settings.py
@@ -53,7 +53,6 @@ class ProjectAlertSettingsTest(AcceptanceTestCase):
         self.browser.click('.ref-plugin-enable-webhooks')
         self.browser.wait_until('.ref-plugin-config-webhooks')
         self.browser.wait_until_not('.loading-indicator')
-        self.browser.wait_until_not('.indicators-container .toast')
         self.browser.snapshot('project alert settings webhooks enabled')
 
     def test_rules_load(self):
diff --git a/tests/js/spec/components/indicators.spec.jsx b/tests/js/spec/components/indicators.spec.jsx
new file mode 100644
index 0000000000..50267cda67
--- /dev/null
+++ b/tests/js/spec/components/indicators.spec.jsx
@@ -0,0 +1,209 @@
+import React from 'react';
+import {ThemeProvider} from 'emotion-theming';
+import {mount} from 'enzyme';
+import theme from 'app/utils/theme';
+import Indicators from 'app/components/indicators';
+import IndicatorStore from 'app/stores/indicatorStore';
+import {
+  clear,
+  addSuccessMessage,
+  addErrorMessage,
+  addMessage,
+} from 'app/actionCreators/indicator';
+
+// Make sure we use `duration: null` to test add/remove
+jest.useFakeTimers();
+
+describe('Indicators', function() {
+  let wrapper;
+  beforeEach(function() {
+    wrapper = mount(
+      <ThemeProvider theme={theme}>
+        <Indicators />
+      </ThemeProvider>
+    );
+
+    clear();
+    jest.runAllTimers();
+  });
+
+  it('renders nothing by default', function() {
+    expect(wrapper.find('ToastIndicator')).toHaveLength(0);
+  });
+
+  it('has a loading indicator by default', function() {
+    // when "type" is empty, we should treat it as loading state
+    IndicatorStore.add('Loading');
+    wrapper.update();
+    expect(wrapper.find('ToastIndicator')).toHaveLength(1);
+  });
+
+  it('adds and removes a toast by calling IndicatorStore directly', function() {
+    // when "type" is empty, we should treat it as loading state
+    let indicator = IndicatorStore.add('Loading');
+    wrapper.update();
+    expect(wrapper.find('ToastIndicator')).toHaveLength(1);
+    expect(wrapper.find('Message').text()).toBe('Loading');
+
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('ToastIndicator')).toHaveLength(1);
+
+    // Old indicator gets replaced when a new one is added
+    IndicatorStore.remove(indicator);
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('ToastIndicator')).toHaveLength(0);
+  });
+
+  // This is a common pattern used throughout the code for API calls
+  it('adds and replaces toast by calling IndicatorStore directly', function() {
+    IndicatorStore.add('Loading');
+    wrapper.update();
+    expect(wrapper.find('ToastIndicator')).toHaveLength(1);
+    expect(wrapper.find('Message').text()).toBe('Loading');
+
+    // Old indicator gets replaced when a new one is added
+    IndicatorStore.add('success', 'success');
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('ToastIndicator')).toHaveLength(1);
+    expect(wrapper.find('Message').text()).toBe('success');
+  });
+
+  it('does not have loading indicator when "type" is empty (default)', function() {
+    addMessage('Loading', '', {duration: null});
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('LoadingIndicator')).toHaveLength(0);
+  });
+
+  it('has a loading indicator when type is "loading"', function() {
+    addMessage('Loading', 'loading', {duration: null});
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('LoadingIndicator')).toHaveLength(1);
+  });
+
+  it('adds and removes toast by calling action creators', function() {
+    // action creators don't return anything
+    addMessage('Loading', '', {duration: null});
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('ToastIndicator')).toHaveLength(1);
+    expect(wrapper.find('Message').text()).toBe('Loading');
+
+    // If no indicator is specified, will remove all indicators
+    clear();
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('ToastIndicator')).toHaveLength(0);
+  });
+
+  it('adds and replaces toast by calling action creators', function() {
+    addMessage('Loading', '', {duration: null});
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('ToastIndicator')).toHaveLength(1);
+    expect(wrapper.find('Message').text()).toBe('Loading');
+
+    // Old indicator gets replaced when a new one is added
+    addMessage('success', 'success', {duration: null});
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('ToastIndicator')).toHaveLength(1);
+    expect(wrapper.find('Message').text()).toBe('success');
+  });
+
+  it('adds and replaces toasts by calling action creators helpers', function() {
+    // Old indicator gets replaced when a new one is added
+    addSuccessMessage('success', null);
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('ToastIndicator')).toHaveLength(1);
+    expect(wrapper.find('Message').text()).toBe('success');
+
+    clear();
+    addErrorMessage('error', null);
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('ToastIndicator')).toHaveLength(1);
+    expect(wrapper.find('Message').text()).toBe('error');
+  });
+
+  it('appends toasts', function() {
+    addMessage('Loading', '', {append: true, duration: null});
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('ToastIndicator')).toHaveLength(1);
+    expect(wrapper.find('Message').text()).toBe('Loading');
+
+    addMessage('Success', 'success', {append: true, duration: null});
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('ToastIndicator')).toHaveLength(2);
+    // Toasts get appended to the end
+    expect(
+      wrapper
+        .find('Message')
+        .at(1)
+        .text()
+    ).toBe('Success');
+
+    addMessage('Error', 'error', {append: true, duration: null});
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('ToastIndicator')).toHaveLength(3);
+    // Toasts get appended to the end
+    expect(
+      wrapper
+        .find('Message')
+        .at(2)
+        .text()
+    ).toBe('Error');
+
+    // clears all toasts
+    clear();
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('ToastIndicator')).toHaveLength(0);
+  });
+
+  it('dismisses on click', function() {
+    addMessage('Loading', '', {append: true, duration: null});
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('ToastIndicator')).toHaveLength(1);
+    expect(wrapper.find('Message').text()).toBe('Loading');
+
+    wrapper.find('ToastIndicator').simulate('click');
+    jest.runAllTimers();
+    wrapper.update();
+    expect(wrapper.find('ToastIndicator')).toHaveLength(0);
+  });
+
+  it('hides after 10s', function() {
+    addMessage('Duration', '', {append: true, duration: 10000});
+    jest.advanceTimersByTime(9000);
+    wrapper.update();
+    expect(wrapper.find('Indicators')).toHaveLength(1);
+    expect(wrapper.find('Indicators').prop('items')).toHaveLength(1);
+    expect(wrapper.find('Message').text()).toBe('Duration');
+
+    // Still visible
+    jest.advanceTimersByTime(999);
+    wrapper.update();
+    expect(wrapper.find('Indicators').prop('items')).toHaveLength(1);
+
+    // ToastIndicator still exist because of animations
+    // but `items` prop should be empty
+    jest.advanceTimersByTime(2);
+    wrapper.update();
+    expect(wrapper.find('Indicators').prop('items')).toHaveLength(0);
+
+    // After animation timeout
+    jest.advanceTimersByTime(1000);
+    wrapper.update();
+    expect(wrapper.find('ToastIndicator')).toHaveLength(0);
+  });
+});
diff --git a/tests/js/spec/views/organizationSettingsForm.spec.jsx b/tests/js/spec/views/organizationSettingsForm.spec.jsx
index 1235988af3..14bc54a263 100644
--- a/tests/js/spec/views/organizationSettingsForm.spec.jsx
+++ b/tests/js/spec/views/organizationSettingsForm.spec.jsx
@@ -2,10 +2,10 @@ import React from 'react';
 import {mount} from 'enzyme';
 
 import NewOrganizationSettingsForm from 'app/views/settings/organization/general/organizationSettingsForm';
-import {addSuccessMessage} from 'app/actionCreators/settingsIndicator';
+import {saveOnBlurUndoMessage} from 'app/actionCreators/indicator';
 
 jest.mock('jquery');
-jest.mock('app/actionCreators/settingsIndicator');
+jest.mock('app/actionCreators/indicator');
 
 describe('OrganizationSettingsForm', function() {
   let organization = TestStubs.Organization();
@@ -53,14 +53,20 @@ describe('OrganizationSettingsForm', function() {
       })
     );
 
-    addSuccessMessage.mockImplementation((msg, duration, {model, id}) => {
-      expect(msg).toBe('Changed Name from "Organization Name" to "New Name"');
+    saveOnBlurUndoMessage.mockImplementation(function(change, model, fieldName) {
+      try {
+        expect(fieldName).toBe('name');
+        expect(change.old).toBe('Organization Name');
+        expect(change.new).toBe('New Name');
 
-      // Can call undo directly
-      expect(model.getValue('name')).toBe('New Name');
-      model.undo();
-      expect(model.getValue('name')).toBe('Organization Name');
-      done();
+        // Test "undo" call undo directly
+        expect(model.getValue('name')).toBe('New Name');
+        model.undo();
+        expect(model.getValue('name')).toBe('Organization Name');
+        done();
+      } catch (err) {
+        done(err);
+      }
     });
   });
 });
diff --git a/tests/js/spec/views/projectPluginDetails.spec.jsx b/tests/js/spec/views/projectPluginDetails.spec.jsx
index 7d28b4a930..288e117efe 100644
--- a/tests/js/spec/views/projectPluginDetails.spec.jsx
+++ b/tests/js/spec/views/projectPluginDetails.spec.jsx
@@ -98,13 +98,14 @@ describe('ProjectPluginDetails', function() {
 
     btn.simulate('click');
 
-    // Reason for setTimeout is because this is more of an integration test
-    // and it relies on stores + withPlugins HoC
-    //
-    // The component itself could be tidied up a bit too
     setTimeout(() => {
-      expect(btn.text()).toBe('Disable Plugin');
-      done();
-    }, 250);
+      try {
+        component.update();
+        expect(btn.text()).toBe('Disable Plugin');
+        done();
+      } catch (err) {
+        done(err);
+      }
+    }, 1);
   });
 });
