commit 36b5b13834141be04e448a6a921a83e3f51fc254
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Wed Jan 24 08:39:27 2018 -0600

    feat: Add utils to help create fake email addresses that will be skipâ€¦ (#7041)

diff --git a/src/sentry/utils/email.py b/src/sentry/utils/email.py
index 5f2556dbc7..3a16cdc93e 100644
--- a/src/sentry/utils/email.py
+++ b/src/sentry/utils/email.py
@@ -41,6 +41,10 @@ from sentry.web.helpers import render_to_string
 # The maximum amount of recipients to display in human format.
 MAX_RECIPIENTS = 5
 
+# The fake TLD used to construct email addresses when one is required,
+# for example by automatically generated SSO accounts.
+FAKE_EMAIL_TLD = '.sentry-fake'
+
 logger = logging.getLogger('sentry.mail')
 
 
@@ -147,6 +151,22 @@ def get_from_email_domain():
     return _from_email_domain_cache[1]
 
 
+def create_fake_email(unique_id, namespace):
+    """
+    Generate a fake email of the form: {unique_id}@{namespace}{FAKE_EMAIL_TLD}
+
+    For example: c74e5b75-e037-4e75-ad27-1a0d21a6b203@cloudfoundry.sentry-fake
+    """
+    return u"{}@{}{}".format(unique_id, namespace, FAKE_EMAIL_TLD)
+
+
+def is_fake_email(email):
+    """
+    Returns True if the provided email matches the fake email pattern.
+    """
+    return email.endswith(FAKE_EMAIL_TLD)
+
+
 def get_email_addresses(user_ids, project=None):
     pending = set(user_ids)
     results = {}
@@ -157,7 +177,7 @@ def get_email_addresses(user_ids, project=None):
             user__in=pending,
             key='mail:email',
         )
-        for option in (o for o in queryset if o.value):
+        for option in (o for o in queryset if o.value and not is_fake_email(o.value)):
             results[option.user_id] = option.value
             pending.discard(option.user_id)
 
@@ -166,14 +186,14 @@ def get_email_addresses(user_ids, project=None):
             user__in=pending,
             key='alert_email',
         )
-        for option in (o for o in queryset if o.value):
+        for option in (o for o in queryset if o.value and not is_fake_email(o.value)):
             results[option.user_id] = option.value
             pending.discard(option.user_id)
 
     if pending:
         queryset = User.objects.filter(pk__in=pending, is_active=True)
         for (user_id, email) in queryset.values_list('id', 'email'):
-            if email:
+            if email and not is_fake_email(email):
                 results[user_id] = email
                 pending.discard(user_id)
 
diff --git a/tests/sentry/utils/email/tests.py b/tests/sentry/utils/email/tests.py
index ea678cbcf9..7215a21da7 100644
--- a/tests/sentry/utils/email/tests.py
+++ b/tests/sentry/utils/email/tests.py
@@ -15,6 +15,7 @@ from sentry.utils.email import (
     default_list_type_handlers,
     get_from_email_domain,
     get_mail_backend,
+    create_fake_email,
 )
 
 
@@ -125,6 +126,35 @@ class MessageBuilderTest(TestCase):
             'foo@example.com',
         ]
 
+    def test_fake_dont_send(self):
+        project = self.project
+
+        user_a = User.objects.create(email=create_fake_email('foo', 'fake'))
+        user_b = User.objects.create(email=create_fake_email('bar', 'fake'))
+        user_c = User.objects.create(email=create_fake_email('baz', 'fake'))
+
+        UserOption.objects.create(
+            user=user_b,
+            key='alert_email',
+            value=create_fake_email('fizzle', 'fake'),
+        )
+        UserOption.objects.create(
+            user=user_c,
+            project=project,
+            key='mail:email',
+            value=create_fake_email('bazzer', 'fake'),
+        )
+
+        msg = MessageBuilder(
+            subject='Test',
+            body='hello world',
+            html_body='<!DOCTYPE html>\n<b>hello world</b>',
+        )
+        msg.add_users([user_a.id, user_b.id, user_c.id], project=project)
+        msg.send()
+
+        assert len(mail.outbox) == 0
+
     @patch('sentry.utils.email.make_msgid')
     def test_message_id(self, make_msgid):
         make_msgid.return_value = 'abc123'
