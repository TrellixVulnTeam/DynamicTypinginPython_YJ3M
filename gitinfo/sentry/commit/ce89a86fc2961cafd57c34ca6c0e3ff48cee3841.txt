commit ce89a86fc2961cafd57c34ca6c0e3ff48cee3841
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 27 01:59:19 2011 -0700

    Scrap HTTP Authorization (mod_wsgi blocks it by default) and implement X-Sentry-Auth. Also implement basic private/public key authentication schema for projects.

diff --git a/sentry/client/base.py b/sentry/client/base.py
index 942a8c1af2..0b1e0551d5 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -25,9 +25,9 @@ from django.template.loader import LoaderOrigin
 
 import sentry
 from sentry.conf import settings
-from sentry.utils import json
 from sentry.utils import construct_checksum, transform, get_installed_apps, force_unicode, \
-                           get_versions, shorten, get_signature, get_auth_header, varmap
+                           get_versions, shorten, varmap, json
+from sentry.utils.auth import get_signature, get_auth_header
 from sentry.utils.stacks import get_stack_info, iter_stack_frames, iter_traceback_frames
 
 logger = logging.getLogger('sentry.errors')
@@ -253,15 +253,15 @@ class SentryClient(object):
             response = urllib2.urlopen(req, data).read()
         return response
 
-    def send(self, **kwargs):
+    def send(self, api_key=None, secret_key=None, **kwargs):
         "Sends the message to the server."
         if settings.REMOTE_URL:
             message = base64.b64encode(json.dumps(kwargs).encode('zlib'))
             for url in settings.REMOTE_URL:
                 timestamp = time.time()
-                signature = get_signature(message, timestamp)
+                signature = get_signature(message, timestamp, settings.SECRET_KEY)
                 headers = {
-                    'Authorization': get_auth_header(signature, timestamp, '%s/%s' % (self.__class__.__name__, sentry.VERSION)),
+                    'X-Sentry-Auth': get_auth_header(signature, timestamp, '%s/%s' % (self.__class__.__name__, sentry.VERSION), settings.PUBLIC_KEY),
                     'Content-Type': 'application/octet-stream',
                 }
 
diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index bcec0205a6..c99f17529b 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -60,6 +60,8 @@ NAME = socket.gethostname()
 # The primary key of the project which this client should
 # log messages to.
 PROJECT = 1
+SECRET_KEY = None
+PUBLIC_KEY = None
 
 # We allow setting the site name either by explicitly setting it with the
 # SENTRY_SITE setting, or using the django.contrib.sites framework for
diff --git a/sentry/management/__init__.py b/sentry/management/__init__.py
index b5dea28f45..e69de29bb2 100644
--- a/sentry/management/__init__.py
+++ b/sentry/management/__init__.py
@@ -1,33 +0,0 @@
-from django.contrib.auth.models import User
-from django.db.models.signals import post_syncdb
-
-from sentry import models
-
-def create_default_project(app, created_models, verbosity=2, **kwargs):
-    if models.Project in created_models:
-        try:
-            owner = User.objects.filter(is_staff=True, is_superuser=True).order_by('id').get()
-        except User.DoesNotExist:
-            return
-
-        project, created = models.Project.objects.get_or_create(
-            id=1,
-            defaults=dict(
-                public=True,
-                name='Default',
-                owner=owner,
-            )
-        )
-        if not created:
-            return
-
-        models.ProjectMember.objects.create(
-            project=project,
-            user=owner,
-            is_superuser=True,
-        )
-
-        if verbosity > 0:
-            print 'Created default Sentry project owned by %s' % owner
-
-post_syncdb.connect(create_default_project, sender=models)
\ No newline at end of file
diff --git a/sentry/migrations/0018_auto__chg_field_project_owner.py b/sentry/migrations/0018_auto__chg_field_project_owner.py
new file mode 100644
index 0000000000..08a5fd764c
--- /dev/null
+++ b/sentry/migrations/0018_auto__chg_field_project_owner.py
@@ -0,0 +1,146 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Changing field 'Project.owner'
+        db.alter_column('sentry_project', 'owner_id', self.gf('django.db.models.fields.related.ForeignKey')(null=True, to=orm['auth.User']))
+
+
+    def backwards(self, orm):
+        
+        # User chose to not deal with backwards NULL issues for 'Project.owner'
+        raise RuntimeError("Cannot reverse this migration. 'Project.owner' and its values cannot be restored.")
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.groupedmessage': {
+            'Meta': {'unique_together': "(('project', 'logger', 'view', 'checksum'),)", 'object_name': 'GroupedMessage'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.message': {
+            'Meta': {'object_name': 'Message'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'message_set'", 'null': 'True', 'to': "orm['sentry.GroupedMessage']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.GroupedMessage']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.GroupedMessage']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.project': {
+            'Meta': {'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'owned_project_set'", 'null': 'True', 'to': "orm['auth.User']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
+        },
+        'sentry.projectmember': {
+            'Meta': {'unique_together': "(('project', 'user'),)", 'object_name': 'ProjectMember'},
+            'api_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'permissions': ('django.db.models.fields.BigIntegerField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'project_set'", 'to': "orm['auth.User']"})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/migrations/0019_auto__del_field_projectmember_api_key__add_field_projectmember_public_.py b/sentry/migrations/0019_auto__del_field_projectmember_api_key__add_field_projectmember_public_.py
new file mode 100644
index 0000000000..c5a4e27743
--- /dev/null
+++ b/sentry/migrations/0019_auto__del_field_projectmember_api_key__add_field_projectmember_public_.py
@@ -0,0 +1,159 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Deleting field 'ProjectMember.api_key'
+        db.delete_column('sentry_projectmember', 'api_key')
+
+        # Adding field 'ProjectMember.public_key'
+        db.add_column('sentry_projectmember', 'public_key', self.gf('django.db.models.fields.CharField')(max_length=32, unique=True, null=True), keep_default=False)
+
+        # Adding field 'ProjectMember.secret_key'
+        db.add_column('sentry_projectmember', 'secret_key', self.gf('django.db.models.fields.CharField')(max_length=32, unique=True, null=True), keep_default=False)
+
+
+    def backwards(self, orm):
+        
+        # Adding field 'ProjectMember.api_key'
+        db.add_column('sentry_projectmember', 'api_key', self.gf('django.db.models.fields.CharField')(unique=True, max_length=32, null=True), keep_default=False)
+
+        # Deleting field 'ProjectMember.public_key'
+        db.delete_column('sentry_projectmember', 'public_key')
+
+        # Deleting field 'ProjectMember.secret_key'
+        db.delete_column('sentry_projectmember', 'secret_key')
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.groupedmessage': {
+            'Meta': {'unique_together': "(('project', 'logger', 'view', 'checksum'),)", 'object_name': 'GroupedMessage'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.message': {
+            'Meta': {'object_name': 'Message'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'message_set'", 'null': 'True', 'to': "orm['sentry.GroupedMessage']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'message_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.GroupedMessage']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.GroupedMessage']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.project': {
+            'Meta': {'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'owned_project_set'", 'null': 'True', 'to': "orm['auth.User']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
+        },
+        'sentry.projectmember': {
+            'Meta': {'unique_together': "(('project', 'user'),)", 'object_name': 'ProjectMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'permissions': ('django.db.models.fields.BigIntegerField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'project_set'", 'to': "orm['auth.User']"})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/models.py b/sentry/models.py
index 71a30caa35..1fade97fb4 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -21,6 +21,7 @@ from indexer.models import BaseIndex
 from django.contrib.auth.models import User
 from django.db import models
 from django.db.models import Sum
+from django.db.models.signals import post_syncdb
 from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
 
@@ -88,7 +89,7 @@ class GzippedDictField(models.TextField):
 
 class Project(Model):
     name            = models.CharField(max_length=200)
-    owner           = models.ForeignKey(User, related_name="owned_project_set")
+    owner           = models.ForeignKey(User, related_name="owned_project_set", null=True)
     public          = models.BooleanField(default=False)
     date_added      = models.DateTimeField(default=datetime.now)
 
@@ -96,7 +97,8 @@ class ProjectMember(Model):
     project         = models.ForeignKey(Project, related_name="member_set")
     user            = models.ForeignKey(User, related_name="project_set")
     is_superuser    = models.BooleanField(default=False)
-    api_key         = models.CharField(max_length=32, unique=True, null=True)
+    public_key         = models.CharField(max_length=32, unique=True, null=True)
+    secret_key      = models.CharField(max_length=32, unique=True, null=True)
     permissions     = BitField(flags=(
         'read_message',
         'change_message_status',
@@ -111,8 +113,10 @@ class ProjectMember(Model):
         unique_together = (('project', 'user'),)
 
     def save(self, *args, **kwargs):
-        if not self.api_key:
-            self.api_key = ProjectMember.generate_api_key()
+        if not self.public_key:
+            self.public_key = ProjectMember.generate_api_key()
+        if not self.secret_key:
+            self.secret_key = ProjectMember.generate_api_key()
         super(ProjectMember, self).save(*args, **kwargs)
 
     @classmethod
@@ -400,3 +404,33 @@ def register_indexes():
             MessageIndex.objects.register_index(filter_.column, index_to='group')
             logger.debug('Registered index for for %s' % filter_.column)
 register_indexes()
+
+def create_default_project(created_models, verbosity=2, **kwargs):
+    if Project in created_models:
+        try:
+            owner = User.objects.filter(is_staff=True, is_superuser=True).order_by('id').get()
+        except User.DoesNotExist:
+            owner = None
+
+        project, created = Project.objects.get_or_create(
+            id=1,
+            defaults=dict(
+                public=True,
+                name='Default',
+                owner=owner,
+            )
+        )
+        if not created:
+            return
+
+        if owner:
+            ProjectMember.objects.create(
+                project=project,
+                user=owner,
+                is_superuser=True,
+            )
+
+        if verbosity > 0:
+            print 'Created default Sentry project owned by %s' % owner
+
+post_syncdb.connect(create_default_project)
\ No newline at end of file
diff --git a/sentry/utils/__init__.py b/sentry/utils/__init__.py
index 6b19ac568e..1a3e24eb57 100644
--- a/sentry/utils/__init__.py
+++ b/sentry/utils/__init__.py
@@ -6,7 +6,6 @@ sentry.utils
 :license: BSD, see LICENSE for more details.
 """
 
-import hmac
 import logging
 try:
     import pkg_resources
@@ -22,9 +21,8 @@ from django.conf import settings as django_settings
 from django.http import HttpRequest
 from django.utils.encoding import force_unicode
 from django.utils.functional import Promise
-from django.utils.hashcompat import md5_constructor, sha_constructor
+from django.utils.hashcompat import md5_constructor
 
-import sentry
 from sentry.conf import settings
 
 _FILTER_CACHE = None
@@ -302,24 +300,6 @@ def is_float(var):
         return False
     return True
 
-def get_signature(message, timestamp, project=None):
-    if project:
-        key = project.api_key
-    else:
-        key = settings.KEY
-    return hmac.new(key, '%s %s' % (timestamp, message), sha_constructor).hexdigest()
-
-def get_auth_header(signature, timestamp, client):
-    return 'Sentry sentry_signature=%s, sentry_timestamp=%s, sentry_client=%s, sentry_project=%s' % (
-        signature,
-        timestamp,
-        sentry.VERSION,
-        settings.PROJECT,
-    )
-
-def parse_auth_header(header):
-    return dict(map(lambda x: x.strip().split('='), header.split(' ', 1)[1].split(',')))
-
 class MockDjangoRequest(HttpRequest):
     GET = {}
     POST = {}
diff --git a/sentry/utils/auth.py b/sentry/utils/auth.py
new file mode 100644
index 0000000000..7e22098628
--- /dev/null
+++ b/sentry/utils/auth.py
@@ -0,0 +1,22 @@
+import hmac
+from django.utils.hashcompat import sha_constructor
+from sentry.conf import settings
+
+def get_signature(message, timestamp, key=None):
+    if not key:
+        key = settings.KEY
+    return hmac.new(key, '%s %s' % (timestamp, message), sha_constructor).hexdigest()
+
+def get_auth_header(signature, timestamp, client, api_key=None):
+    header = [
+        ('sentry_timestamp', timestamp),
+        ('sentry_signature', signature),
+        ('sentry_client', client),
+    ]
+    if api_key:
+        header.append(('sentry_key', api_key))
+
+    return 'Sentry %s' % ', '.join('%s=%s' % (k, v) for k, v in header)
+
+def parse_auth_header(header):
+    return dict(map(lambda x: x.strip().split('='), header.split(' ', 1)[1].split(',')))
\ No newline at end of file
diff --git a/sentry/utils/manager.py b/sentry/utils/manager.py
index 7e4cc8b3c4..d698879259 100644
--- a/sentry/utils/manager.py
+++ b/sentry/utils/manager.py
@@ -83,7 +83,7 @@ class SentryManager(models.Manager):
 
 
     def from_kwargs(self, **kwargs):
-        from sentry.models import Message, GroupedMessage, FilterValue
+        from sentry.models import Message, GroupedMessage, FilterValue, Project
 
         URL_MAX_LENGTH = Message._meta.get_field_by_name('url')[0].max_length
         now = kwargs.pop('timestamp', None) or datetime.datetime.now()
@@ -93,7 +93,9 @@ class SentryManager(models.Manager):
         url = kwargs.pop('url', None)
         server_name = kwargs.pop('server_name', settings.CLIENT)
         site = kwargs.pop('site', None)
-        project = kwargs.pop('project', settings.PROJECT)
+        project_id = kwargs.pop('project', settings.PROJECT)
+        project = Project.objects.get(pk=project_id)
+
         data = kwargs.pop('data', {}) or {}
         message_id = kwargs.pop('message_id', None)
 
@@ -155,6 +157,7 @@ class SentryManager(models.Manager):
                 mail = True
 
             instance = Message(
+                project=project,
                 message_id=message_id,
                 view=view,
                 logger=logger_name,
@@ -181,6 +184,7 @@ class SentryManager(models.Manager):
             affected = group.messagecountbyminute_set.filter(date=normalized_datetime).update(times_seen=F('times_seen') + 1)
             if not affected:
                 group.messagecountbyminute_set.create(
+                    project=project,
                     date=normalized_datetime,
                     times_seen=1,
                 )
@@ -193,11 +197,16 @@ class SentryManager(models.Manager):
                 if not value:
                     continue
 
-                FilterValue.objects.get_or_create(key=key, value=value)
+                FilterValue.objects.get_or_create(
+                    project=project,
+                    key=key,
+                    value=value,
+                )
 
                 affected = group.messagefiltervalue_set.filter(key=key, value=value).update(times_seen=F('times_seen') + 1)
                 if not affected:
                     group.messagefiltervalue_set.create(
+                        project=project,
                         key=key,
                         value=value,
                         times_seen=1,
diff --git a/sentry/web/views.py b/sentry/web/views.py
index 1a82346845..0edb9abe21 100644
--- a/sentry/web/views.py
+++ b/sentry/web/views.py
@@ -27,10 +27,11 @@ from django.utils.encoding import smart_str
 from django.views.decorators.csrf import csrf_protect, csrf_exempt
 
 from sentry.conf import settings
-from sentry.models import GroupedMessage, Message, Project
+from sentry.models import GroupedMessage, Message, Project, ProjectMember
 from sentry.plugins import GroupActionProvider
 from sentry.templatetags.sentry_helpers import with_priority
-from sentry.utils import get_filters, is_float, get_signature, parse_auth_header, json
+from sentry.utils import get_filters, is_float, json
+from sentry.utils.auth import get_signature, parse_auth_header
 from sentry.utils.compat import pickle
 from sentry.utils.stacks import get_template_info
 
@@ -511,18 +512,28 @@ def store(request):
     if request.method != 'POST':
         return HttpResponseNotAllowed('This method only supports POST requests')
 
-    if request.META.get('HTTP_AUTHORIZATION', '').startswith('Sentry'):
+    if request.META.get('HTTP_X_SENTRY_AUTH', '').startswith('Sentry'):
+        # Auth version 2.0
+        auth_vars = parse_auth_header(request.META['HTTP_X_SENTRY_AUTH'])
+    elif request.META.get('HTTP_AUTHORIZATION', '').startswith('Sentry'):
+        # Auth version 2.0
         auth_vars = parse_auth_header(request.META['HTTP_AUTHORIZATION'])
+    else:
+        auth_vars = None
 
+    if auth_vars:
         signature = auth_vars.get('sentry_signature')
         timestamp = auth_vars.get('sentry_timestamp')
-        project = auth_vars.get('sentry_project')
+        api_key = auth_vars.get('sentry_key')
+        # version = auth_vars.get('sentry_version')
 
-        if project:
+        if api_key:
             try:
-                project = Project.objects.get(pk=project)
-            except Project.DoesNotExist:
+                secret_key = ProjectMember.objects.filter(api_key=api_key).values_list('secret_key', flat=True)[0]
+            except IndexError:
                 return HttpResponseForbidden('Invalid signature')
+        else:
+            secret_key = settings.KEY
 
         format = 'json'
 
@@ -538,13 +549,14 @@ def store(request):
             if timestamp < time.time() - 3600: # 1 hour
                 return HttpResponseGone('Message has expired')
 
-            sig_hmac = get_signature(data, timestamp, project)
+            sig_hmac = get_signature(data, timestamp, secret_key)
             if sig_hmac != signature:
                 return HttpResponseForbidden('Invalid signature')
         else:
             return HttpResponse('Unauthorized', status_code=401)
     else:
-        # Legacy request (deprecated as of 2.0)
+        # Auth version 1.0
+        # deprecated
         key = request.POST.get('key')
 
         if not key:
diff --git a/tests/tests.py b/tests/tests.py
index 4d84d5f1dd..871e2f8269 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -26,8 +26,8 @@ from sentry.client.models import get_client
 from sentry.conf import settings
 from sentry.models import Message, GroupedMessage, MessageCountByMinute, \
                           FilterValue, MessageFilterValue
-from sentry.utils import json, transform, get_signature, get_auth_header, \
-                         MockDjangoRequest
+from sentry.utils import json, transform, MockDjangoRequest
+from sentry.utils.auth import get_signature, get_auth_header
 from sentry.utils.compat import pickle
 from sentry.web.views import get_login_url
 
@@ -114,8 +114,6 @@ class SentryTest(BaseTestCase):
         self._level = None
         self.logger = logging.getLogger('sentry')
         self.logger.addHandler(logging.StreamHandler())
-        Message.objects.all().delete()
-        GroupedMessage.objects.all().delete()
 
     def tearDown(self):
         self.tearDownHandler()
