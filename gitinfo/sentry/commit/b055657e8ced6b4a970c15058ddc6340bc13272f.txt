commit b055657e8ced6b4a970c15058ddc6340bc13272f
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jan 25 09:31:28 2016 -0800

    Add Event datetime filtering

diff --git a/src/sentry/search/base.py b/src/sentry/search/base.py
index 1d62435a3f..84205ff678 100644
--- a/src/sentry/search/base.py
+++ b/src/sentry/search/base.py
@@ -23,7 +23,7 @@ class SearchBackend(object):
 
     def query(self, project, query=None, status=None, tags=None,
               bookmarked_by=None, assigned_to=None, first_release=None,
-              sort_by='date', age_date_from=None, age_date_to=None,
+              sort_by='date', age_from=None, age_to=None,
               unassigned=None, date_from=None, date_to=None, cursor=None,
               limit=100):
         """
diff --git a/src/sentry/search/django/backend.py b/src/sentry/search/django/backend.py
index 1215d44dc3..bfa7121743 100644
--- a/src/sentry/search/django/backend.py
+++ b/src/sentry/search/django/backend.py
@@ -22,10 +22,10 @@ from sentry.utils.db import get_db_engine
 class DjangoSearchBackend(SearchBackend):
     def query(self, project, query=None, status=None, tags=None,
               bookmarked_by=None, assigned_to=None, first_release=None,
-              sort_by='date', age_date_from=None, age_date_to=None,
+              sort_by='date', age_from=None, age_to=None,
               unassigned=None, date_from=None, date_to=None, cursor=None,
               limit=100):
-        from sentry.models import Group, GroupStatus
+        from sentry.models import Event, Group, GroupStatus
 
         queryset = Group.objects.filter(project=project)
         if query:
@@ -78,15 +78,41 @@ class DjangoSearchBackend(SearchBackend):
                     grouptag__value=v,
                 ))
 
-        if age_date_from and age_date_to:
+        if age_from and age_to:
             queryset = queryset.filter(
-                first_seen__gte=age_date_from,
-                first_seen__lte=age_date_to,
+                first_seen__gte=age_from,
+                first_seen__lte=age_to,
+            )
+        elif age_from:
+            queryset = queryset.filter(first_seen__gte=age_from)
+        elif age_to:
+            queryset = queryset.filter(first_seen__lte=age_to)
+
+        if date_from or date_to:
+            if date_from and date_to:
+                event_queryset = Event.objects.filter(
+                    project_id=project.id,
+                    datetime__gte=date_from,
+                    datetime__lte=date_to,
+                )
+            elif date_from:
+                event_queryset = Event.objects.filter(
+                    project_id=project.id,
+                    datetime__gte=date_from,
+                )
+            elif date_to:
+                event_queryset = Event.objects.filter(
+                    project_id=project.id,
+                    datetime__lte=date_to,
+                )
+            # limit to the first 1000 results
+            group_ids = event_queryset.distinct().values_list(
+                'group_id',
+                flat=True
+            )[:1000]
+            queryset = queryset.filter(
+                id__in=group_ids,
             )
-        elif age_date_from:
-            queryset = queryset.filter(first_seen__gte=age_date_from)
-        elif age_date_to:
-            queryset = queryset.filter(first_seen__lte=age_date_to)
 
         engine = get_db_engine('default')
         if engine.startswith('sqlite'):
diff --git a/src/sentry/search/utils.py b/src/sentry/search/utils.py
index 1ead5eb37b..272ade2ebf 100644
--- a/src/sentry/search/utils.py
+++ b/src/sentry/search/utils.py
@@ -149,9 +149,9 @@ def parse_query(project, query, user):
                 flag, offset = parse_simple_range(value)
                 date_value = timezone.now() - offset
                 if flag == '+':
-                    results['age_date_to'] = date_value
+                    results['age_to'] = date_value
                 elif flag == '-':
-                    results['age_date_from'] = date_value
+                    results['age_from'] = date_value
             elif key.startswith('user.'):
                 results['tags']['sentry:user'] = get_user_tag(
                     project, key.split('.', 1)[1], value)
diff --git a/tests/sentry/search/django/tests.py b/tests/sentry/search/django/tests.py
index c86731a7ce..3b63549ae3 100644
--- a/tests/sentry/search/django/tests.py
+++ b/tests/sentry/search/django/tests.py
@@ -31,6 +31,16 @@ class DjangoSearchBackendTest(TestCase):
         self.event1 = self.create_event(
             event_id='a' * 32,
             group=self.group1,
+            datetime=datetime(2013, 7, 13, 3, 8, 24, 880386),
+            tags={
+                'server': 'example.com',
+                'env': 'production',
+            }
+        )
+        self.event3 = self.create_event(
+            event_id='c' * 32,
+            group=self.group1,
+            datetime=datetime(2013, 8, 13, 3, 8, 24, 880386),
             tags={
                 'server': 'example.com',
                 'env': 'production',
@@ -49,6 +59,7 @@ class DjangoSearchBackendTest(TestCase):
         self.event2 = self.create_event(
             event_id='b' * 32,
             group=self.group2,
+            datetime=datetime(2013, 7, 14, 3, 8, 24, 880386),
             tags={
                 'server': 'example.com',
                 'env': 'staging',
@@ -167,6 +178,31 @@ class DjangoSearchBackendTest(TestCase):
         assert len(results) == 1
         assert results[0] == self.group1
 
+    def test_date_filter(self):
+        results = self.backend.query(
+            self.project1,
+            date_from=self.event2.datetime,
+        )
+        assert len(results) == 2
+        assert results[0] == self.group1
+        assert results[1] == self.group2
+
+        results = self.backend.query(
+            self.project1,
+            date_to=self.event1.datetime + timedelta(minutes=1),
+        )
+        assert len(results) == 1
+        assert results[0] == self.group1
+
+        results = self.backend.query(
+            self.project1,
+            date_from=self.event1.datetime,
+            date_to=self.event2.datetime + timedelta(minutes=1),
+        )
+        assert len(results) == 2
+        assert results[0] == self.group1
+        assert results[1] == self.group2
+
     def test_unassigned(self):
         results = self.backend.query(self.project1, unassigned=True)
         assert len(results) == 1
diff --git a/tests/sentry/search/test_utils.py b/tests/sentry/search/test_utils.py
index 55bb23f803..bcc9be8f16 100644
--- a/tests/sentry/search/test_utils.py
+++ b/tests/sentry/search/test_utils.py
@@ -124,19 +124,19 @@ class ParseQueryTest(TestCase):
 
     def test_age_from(self):
         result = self.parse_query('age:-24h')
-        assert result['age_date_from'] > timezone.now() - timedelta(hours=25)
-        assert result['age_date_from'] < timezone.now() - timedelta(hours=23)
-        assert not result.get('age_date_to')
+        assert result['age_from'] > timezone.now() - timedelta(hours=25)
+        assert result['age_from'] < timezone.now() - timedelta(hours=23)
+        assert not result.get('age_to')
 
     def test_age_to(self):
         result = self.parse_query('age:+24h')
-        assert result['age_date_to'] > timezone.now() - timedelta(hours=25)
-        assert result['age_date_to'] < timezone.now() - timedelta(hours=23)
-        assert not result.get('age_date_from')
+        assert result['age_to'] > timezone.now() - timedelta(hours=25)
+        assert result['age_to'] < timezone.now() - timedelta(hours=23)
+        assert not result.get('age_from')
 
     def test_age_range(self):
         result = self.parse_query('age:-24h age:+12h')
-        assert result['age_date_from'] > timezone.now() - timedelta(hours=25)
-        assert result['age_date_from'] < timezone.now() - timedelta(hours=23)
-        assert result['age_date_to'] > timezone.now() - timedelta(hours=13)
-        assert result['age_date_to'] < timezone.now() - timedelta(hours=11)
+        assert result['age_from'] > timezone.now() - timedelta(hours=25)
+        assert result['age_from'] < timezone.now() - timedelta(hours=23)
+        assert result['age_to'] > timezone.now() - timedelta(hours=13)
+        assert result['age_to'] < timezone.now() - timedelta(hours=11)
