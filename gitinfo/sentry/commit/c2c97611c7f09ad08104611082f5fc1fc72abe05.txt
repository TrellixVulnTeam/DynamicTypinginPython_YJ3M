commit c2c97611c7f09ad08104611082f5fc1fc72abe05
Author: Filippo Pacifici <fpacifici@sentry.io>
Date:   Wed Jun 19 12:38:30 2019 -0700

    featu(search) Use snuba to fetch events by default (#13700)
    
    featu(search) Use snuba to fetch events by default (#13700)
    
    snuba.events-queries.enabled option is supposed to be already active in production. This commit activates it by default and fixes the tests that did not support it.
    This step is needed in order to remove our dependency on PG events which is useful for issueless
    events.

diff --git a/src/sentry/api/endpoints/project_event_details.py b/src/sentry/api/endpoints/project_event_details.py
index 8141a47159..a431f83e93 100644
--- a/src/sentry/api/endpoints/project_event_details.py
+++ b/src/sentry/api/endpoints/project_event_details.py
@@ -53,7 +53,6 @@ class ProjectEventDetailsEndpoint(ProjectEndpoint):
             return Response({'detail': 'Event not found'}, status=404)
 
         data = serialize(snuba_event)
-
         requested_environments = set(request.GET.getlist('environment'))
 
         next_event_id = snuba_event.next_event_id(environments=requested_environments)
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index a532f5ccee..b642f8ee7b 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -159,7 +159,7 @@ register('snuba.search.chunk-growth-rate', default=1.5)
 register('snuba.search.max-chunk-size', default=2000)
 register('snuba.search.max-total-chunk-time-seconds', default=30.0)
 register('snuba.search.hits-sample-size', default=100)
-register('snuba.events-queries.enabled', type=Bool, default=False)
+register('snuba.events-queries.enabled', type=Bool, default=True)
 register('snuba.track-outcomes-sample-rate', default=0.0)
 
 # Kafka Publisher
diff --git a/tests/acceptance/test_issue_details.py b/tests/acceptance/test_issue_details.py
index 3a35da7eef..e7226ca659 100644
--- a/tests/acceptance/test_issue_details.py
+++ b/tests/acceptance/test_issue_details.py
@@ -36,19 +36,18 @@ class IssueDetailsTest(AcceptanceTestCase, SnubaTestCase):
         # Only set these properties if we were given a time.
         # event processing will mark old time values as processing errors.
         if time:
-            event_data['timestamp'] = time.isoformat()
             event_data['received'] = time.isoformat()
 
         # We need a fallback datetime for the event
         if time is None:
-            time = datetime(2017, 9, 6, 0, 0)
+            time = (now - timedelta(days=1))
+
+        event_data['timestamp'] = time.isoformat()
         event = self.store_event(
             data=event_data,
             project_id=self.project.id,
             assert_no_errors=False,
         )
-        event.datetime = time
-        event.save()
         event.group.update(
             first_seen=datetime(2015, 8, 13, 3, 8, 25, tzinfo=timezone.utc),
             last_seen=time
diff --git a/tests/integration/test_api.py b/tests/integration/test_api.py
index aa7b803683..ee8b1f5802 100644
--- a/tests/integration/test_api.py
+++ b/tests/integration/test_api.py
@@ -21,9 +21,11 @@ class AuthenticationTest(AuthProviderTestCase):
             user=user, organization=organization, teams=[team])
         setattr(member.flags, 'sso:linked', True)
         member.save()
-        group = self.create_group(project=project)
-        self.create_event(group=group)
-
+        event = self.store_event(
+            data={},
+            project_id=project.id,
+        )
+        group_id = event.group_id
         auth_provider = AuthProvider.objects.create(
             organization=organization,
             provider='dummy',
@@ -41,9 +43,9 @@ class AuthenticationTest(AuthProviderTestCase):
             u'/api/0/organizations/{}/'.format(organization.slug),
             u'/api/0/projects/{}/{}/'.format(organization.slug, project.slug),
             u'/api/0/teams/{}/{}/'.format(organization.slug, team.slug),
-            u'/api/0/issues/{}/'.format(group.id),
+            u'/api/0/issues/{}/'.format(group_id),
             # this uses the internal API, which once upon a time was broken
-            u'/api/0/issues/{}/events/latest/'.format(group.id),
+            u'/api/0/issues/{}/events/latest/'.format(group_id),
         )
 
         for path in paths:
@@ -78,8 +80,11 @@ class AuthenticationTest(AuthProviderTestCase):
             user=user, organization=organization, teams=[team])
         setattr(member.flags, 'sso:linked', True)
         member.save()
-        group = self.create_group(project=project)
-        self.create_event(group=group)
+
+        self.store_event(
+            data={},
+            project_id=project.id,
+        )
 
         auth_provider = AuthProvider.objects.create(
             organization=organization,
diff --git a/tests/sentry/api/endpoints/test_event_attachment_details.py b/tests/sentry/api/endpoints/test_event_attachment_details.py
index 23a8009a19..92a825ab0b 100644
--- a/tests/sentry/api/endpoints/test_event_attachment_details.py
+++ b/tests/sentry/api/endpoints/test_event_attachment_details.py
@@ -2,7 +2,8 @@ from __future__ import absolute_import
 
 import six
 
-from datetime import datetime
+from datetime import timedelta
+from django.utils import timezone
 from six import BytesIO
 
 from sentry.models import EventAttachment, File
@@ -13,12 +14,14 @@ class CreateAttachmentMixin(object):
     def create_attachment(self):
         self.project = self.create_project()
         self.release = self.create_release(self.project, self.user)
-        self.group = self.create_group(project=self.project, first_release=self.release)
-        self.event = self.create_event(
-            event_id='a',
-            group=self.group,
-            datetime=datetime(2016, 8, 13, 3, 8, 25),
-            tags={'sentry:release': self.release.version}
+        min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
+        self.event = self.store_event(
+            data={
+                'fingerprint': ['group1'],
+                'timestamp': min_ago,
+                'tags': {'sentry:release': self.release.version},
+            },
+            project_id=self.project.id,
         )
 
         self.file = File.objects.create(
@@ -46,7 +49,7 @@ class EventAttachmentDetailsTest(APITestCase, CreateAttachmentMixin):
         path = u'/api/0/projects/{}/{}/events/{}/attachments/{}/'.format(
             self.organization.slug,
             self.project.slug,
-            self.event.id,
+            self.event.event_id,
             self.attachment.id,
         )
 
@@ -63,7 +66,7 @@ class EventAttachmentDetailsTest(APITestCase, CreateAttachmentMixin):
         path = u'/api/0/projects/{}/{}/events/{}/attachments/{}/?download'.format(
             self.organization.slug,
             self.project.slug,
-            self.event.id,
+            self.event.event_id,
             self.attachment.id,
         )
 
@@ -84,7 +87,7 @@ class EventAttachmentDetailsPermissionTest(PermissionTestCase, CreateAttachmentM
         self.path = u'/api/0/projects/{}/{}/events/{}/attachments/{}/?download'.format(
             self.organization.slug,
             self.project.slug,
-            self.event.id,
+            self.event.event_id,
             self.attachment.id,
         )
 
diff --git a/tests/sentry/api/endpoints/test_event_attachments.py b/tests/sentry/api/endpoints/test_event_attachments.py
index 84440d660a..27be4e8ebf 100644
--- a/tests/sentry/api/endpoints/test_event_attachments.py
+++ b/tests/sentry/api/endpoints/test_event_attachments.py
@@ -2,7 +2,8 @@ from __future__ import absolute_import
 
 import six
 
-from datetime import datetime
+from datetime import timedelta
+from django.utils import timezone
 
 from sentry.models import EventAttachment, File
 from sentry.testutils import APITestCase
@@ -12,23 +13,20 @@ class EventAttachmentsTest(APITestCase):
     def test_simple(self):
         self.login_as(user=self.user)
 
-        project = self.create_project()
-
-        release = self.create_release(project, self.user)
-
-        group = self.create_group(project=project, first_release=release)
-
-        event1 = self.create_event(
-            event_id='a',
-            group=group,
-            datetime=datetime(2016, 8, 13, 3, 8, 25),
-            tags={'sentry:release': release.version}
+        min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
+        event1 = self.store_event(
+            data={
+                'fingerprint': ['group1'],
+                'timestamp': min_ago,
+            },
+            project_id=self.project.id,
         )
-        event2 = self.create_event(
-            event_id='b',
-            group=group,
-            datetime=datetime(2016, 8, 13, 3, 8, 25),
-            tags={'sentry:release': release.version}
+        event2 = self.store_event(
+            data={
+                'fingerprint': ['group1'],
+                'timestamp': min_ago,
+            },
+            project_id=self.project.id,
         )
 
         attachment1 = EventAttachment.objects.create(
@@ -56,7 +54,7 @@ class EventAttachmentsTest(APITestCase):
         path = u'/api/0/projects/{}/{}/events/{}/attachments/'.format(
             event1.project.organization.slug,
             event1.project.slug,
-            event1.id,
+            event1.event_id,
         )
 
         with self.feature('organizations:event-attachments'):
diff --git a/tests/sentry/api/endpoints/test_event_committers.py b/tests/sentry/api/endpoints/test_event_committers.py
index 2e01cbbfe2..d71537eb5e 100644
--- a/tests/sentry/api/endpoints/test_event_committers.py
+++ b/tests/sentry/api/endpoints/test_event_committers.py
@@ -1,13 +1,17 @@
 from __future__ import absolute_import
 
-from datetime import datetime
+import copy
+
+from datetime import timedelta
+from django.utils import timezone
 from django.core.urlresolvers import reverse
 
-from sentry.models import Event
 from sentry.testutils import APITestCase
-
+from sentry.testutils.factories import DEFAULT_EVENT_DATA
 
 # TODO(dcramer): These tests rely too much on implicit fixtures
+
+
 class EventCommittersTest(APITestCase):
     def test_simple(self):
         self.login_as(user=self.user)
@@ -15,20 +19,21 @@ class EventCommittersTest(APITestCase):
         project = self.create_project()
 
         release = self.create_release(project, self.user)
-
-        group = self.create_group(project=project, first_release=release)
-
-        event = self.create_event(
-            event_id='a',
-            group=group,
-            datetime=datetime(2016, 8, 13, 3, 8, 25),
-            tags={'sentry:release': release.version}
+        min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
+        event = self.store_event(
+            data={
+                'fingerprint': ['group1'],
+                'timestamp': min_ago,
+                'release': release.version,
+                'stacktrace': copy.deepcopy(DEFAULT_EVENT_DATA['stacktrace']),
+            },
+            project_id=project.id,
         )
 
         url = reverse(
             'sentry-api-0-event-file-committers',
             kwargs={
-                'event_id': event.id,
+                'event_id': event.event_id,
                 'project_slug': event.project.slug,
                 'organization_slug': event.project.organization.slug,
             }
@@ -51,18 +56,21 @@ class EventCommittersTest(APITestCase):
     def test_no_release(self):
         self.login_as(user=self.user)
 
-        group = self.create_group()
+        project = self.create_project()
 
-        event = self.create_event(
-            event_id='a',
-            group=group,
-            datetime=datetime(2016, 8, 13, 3, 8, 25),
+        min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
+        event = self.store_event(
+            data={
+                'fingerprint': ['group1'],
+                'timestamp': min_ago,
+            },
+            project_id=project.id,
         )
 
         url = reverse(
             'sentry-api-0-event-file-committers',
             kwargs={
-                'event_id': event.id,
+                'event_id': event.event_id,
                 'project_slug': event.project.slug,
                 'organization_slug': event.project.organization.slug,
             }
@@ -82,24 +90,10 @@ class EventCommittersTest(APITestCase):
             self.user,
         )
 
-        group = self.create_group(
-            project=project,
-            first_release=release,
-        )
-
-        event = self.create_event(
-            event_id='a',
-            group=group,
-            datetime=datetime(2016, 8, 13, 3, 8, 25),
-            tags={'sentry:release': release.version}
-        )
-
-        event = Event.objects.create(
-            project_id=project.id,
-            group_id=group.id,
-            event_id='abcd',
-            message='hello 123456',
+        min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
+        event = self.store_event(
             data={
+                'fingerprint': ['group1'],
                 'environment': 'production',
                 'type': 'default',
                 'exception': {
@@ -116,13 +110,16 @@ class EventCommittersTest(APITestCase):
                     ['environment', 'production'],
                     ['sentry:release', release.version],
                 ],
+                'release': release.version,
+                'timestamp': min_ago,
             },
+            project_id=project.id,
         )
 
         url = reverse(
             'sentry-api-0-event-file-committers',
             kwargs={
-                'event_id': event.id,
+                'event_id': event.event_id,
                 'project_slug': event.project.slug,
                 'organization_slug': event.project.organization.slug,
             }
diff --git a/tests/sentry/api/endpoints/test_group_events.py b/tests/sentry/api/endpoints/test_group_events.py
index 87aa9fc16b..b5c7495484 100644
--- a/tests/sentry/api/endpoints/test_group_events.py
+++ b/tests/sentry/api/endpoints/test_group_events.py
@@ -18,6 +18,9 @@ class GroupEventsTest(APITestCase):
         super(GroupEventsTest, self).setUp()
         options.set('snuba.events-queries.enabled', False)
 
+    def tearDown(self):
+        options.set('snuba.events-queries.enabled', True)
+
     def test_simple(self):
         self.login_as(user=self.user)
 
diff --git a/tests/sentry/api/endpoints/test_group_events_latest.py b/tests/sentry/api/endpoints/test_group_events_latest.py
index 531e3d7bcb..43406184ce 100644
--- a/tests/sentry/api/endpoints/test_group_events_latest.py
+++ b/tests/sentry/api/endpoints/test_group_events_latest.py
@@ -20,7 +20,6 @@ class GroupEventsLatestTest(APITestCase):
 
         self.event1 = self.store_event(
             data={
-                'event_id': 'a' * 32,
                 'environment': 'staging',
                 'fingerprint': ['group_1'],
                 'timestamp': two_min_ago
@@ -30,7 +29,6 @@ class GroupEventsLatestTest(APITestCase):
 
         self.event2 = self.store_event(
             data={
-                'event_id': 'b' * 32,
                 'environment': 'production',
                 'fingerprint': ['group_1'],
                 'timestamp': min_ago
@@ -43,6 +41,5 @@ class GroupEventsLatestTest(APITestCase):
     def test_simple(self):
         url = u'/api/0/issues/{}/events/latest/'.format(self.group.id)
         response = self.client.get(url, format='json')
-
         assert response.status_code == 200
-        assert response.data['id'] == six.text_type(self.event2.id)
+        assert response.data['eventID'] == six.text_type(self.event2.event_id)
diff --git a/tests/sentry/api/endpoints/test_group_events_oldest.py b/tests/sentry/api/endpoints/test_group_events_oldest.py
index 5c1a967e13..7938d90f9c 100644
--- a/tests/sentry/api/endpoints/test_group_events_oldest.py
+++ b/tests/sentry/api/endpoints/test_group_events_oldest.py
@@ -20,7 +20,6 @@ class GroupEventsOldestTest(APITestCase):
 
         self.event1 = self.store_event(
             data={
-                'event_id': 'a' * 32,
                 'environment': 'staging',
                 'fingerprint': ['group_1'],
                 'timestamp': two_min_ago
@@ -30,7 +29,6 @@ class GroupEventsOldestTest(APITestCase):
 
         self.event2 = self.store_event(
             data={
-                'event_id': 'b' * 32,
                 'environment': 'production',
                 'fingerprint': ['group_1'],
                 'timestamp': min_ago
@@ -45,4 +43,4 @@ class GroupEventsOldestTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200
-        assert response.data['id'] == six.text_type(self.event1.id)
+        assert response.data['id'] == six.text_type(self.event1.event_id)
diff --git a/tests/sentry/api/endpoints/test_project_event_details.py b/tests/sentry/api/endpoints/test_project_event_details.py
index 92c88ea152..4b3529f191 100644
--- a/tests/sentry/api/endpoints/test_project_event_details.py
+++ b/tests/sentry/api/endpoints/test_project_event_details.py
@@ -20,7 +20,6 @@ class ProjectEventDetailsTest(APITestCase):
 
         self.prev_event = self.store_event(
             data={
-                'event_id': 'a' * 32,
                 'timestamp': three_min_ago,
                 'fingerprint': ['group-1']
             },
@@ -28,7 +27,6 @@ class ProjectEventDetailsTest(APITestCase):
         )
         self.cur_event = self.store_event(
             data={
-                'event_id': 'b' * 32,
                 'timestamp': two_min_ago,
                 'fingerprint': ['group-1']
             },
@@ -36,7 +34,6 @@ class ProjectEventDetailsTest(APITestCase):
         )
         self.next_event = self.store_event(
             data={
-                'event_id': 'c' * 32,
                 'timestamp': one_min_ago,
                 'fingerprint': ['group-1'],
                 'environment': 'production',
@@ -55,9 +52,8 @@ class ProjectEventDetailsTest(APITestCase):
             }
         )
         response = self.client.get(url, format='json')
-
         assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(self.cur_event.id)
+        assert response.data['id'] == six.text_type(self.cur_event.event_id)
         assert response.data['nextEventID'] == six.text_type(self.next_event.event_id)
         assert response.data['previousEventID'] == six.text_type(self.prev_event.event_id)
         assert response.data['groupID'] == six.text_type(self.cur_event.group.id)
@@ -66,7 +62,7 @@ class ProjectEventDetailsTest(APITestCase):
         url = reverse(
             'sentry-api-0-project-event-details',
             kwargs={
-                'event_id': self.cur_event.id,
+                'event_id': self.cur_event.event_id,
                 'project_slug': self.cur_event.project.slug,
                 'organization_slug': self.cur_event.project.organization.slug,
             }
@@ -74,7 +70,7 @@ class ProjectEventDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(self.cur_event.id)
+        assert response.data['id'] == six.text_type(self.cur_event.event_id)
         assert response.data['nextEventID'] == six.text_type(self.next_event.event_id)
         assert response.data['previousEventID'] == six.text_type(self.prev_event.event_id)
         assert response.data['groupID'] == six.text_type(self.cur_event.group.id)
@@ -95,7 +91,7 @@ class ProjectEventDetailsTest(APITestCase):
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(self.prev_event.id)
+        assert response.data['id'] == six.text_type(self.prev_event.event_id)
         assert response.data['previousEventID'] is None
         assert response.data['nextEventID'] == self.cur_event.event_id
         assert response.data['groupID'] == six.text_type(self.prev_event.group.id)
diff --git a/tests/sentry/api/endpoints/test_project_events.py b/tests/sentry/api/endpoints/test_project_events.py
index dc1115b01e..64a05bee9b 100644
--- a/tests/sentry/api/endpoints/test_project_events.py
+++ b/tests/sentry/api/endpoints/test_project_events.py
@@ -6,22 +6,34 @@ from datetime import timedelta
 from django.utils import timezone
 from django.core.urlresolvers import reverse
 
-from sentry import options
-from sentry.testutils import APITestCase
+from sentry.testutils import APITestCase, SnubaTestCase
 
 
-class ProjectEventsTest(APITestCase):
+class ProjectEventsTest(APITestCase, SnubaTestCase):
     def setUp(self):
         super(ProjectEventsTest, self).setUp()
-        options.set('snuba.events-queries.enabled', False)
 
     def test_simple(self):
         self.login_as(user=self.user)
 
         project = self.create_project()
-        group = self.create_group(project=project)
-        event_1 = self.create_event('a' * 32, group=group)
-        event_2 = self.create_event('b' * 32, group=group)
+        min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
+
+        event_1 = self.store_event(
+            data={
+                'fingerprint': ['group_1'],
+                'timestamp': min_ago
+            },
+            project_id=project.id,
+        )
+
+        event_2 = self.store_event(
+            data={
+                'fingerprint': ['group_1'],
+                'timestamp': min_ago
+            },
+            project_id=project.id,
+        )
 
         url = reverse(
             'sentry-api-0-project-events',
@@ -36,8 +48,8 @@ class ProjectEventsTest(APITestCase):
         assert len(response.data) == 2
         assert sorted(map(lambda x: x['id'], response.data)) == sorted(
             [
-                six.text_type(event_1.id),
-                six.text_type(event_2.id),
+                six.text_type(event_1.event_id),
+                six.text_type(event_2.event_id),
             ]
         )
 
@@ -45,14 +57,24 @@ class ProjectEventsTest(APITestCase):
         self.login_as(user=self.user)
 
         project = self.create_project()
-        group = self.create_group(project=project)
-        self.create_event(
-            'a' *
-            32,
-            group=group,
-            datetime=timezone.now() - timedelta(days=2),
+        min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
+        two_days_ago = (timezone.now() - timedelta(days=2)).isoformat()[:19]
+
+        self.store_event(
+            data={
+                'fingerprint': ['group_2'],
+                'timestamp': two_days_ago
+            },
+            project_id=project.id,
+        )
+
+        event_2 = self.store_event(
+            data={
+                'fingerprint': ['group_2'],
+                'timestamp': min_ago
+            },
+            project_id=project.id,
         )
-        event_2 = self.create_event('b' * 32, group=group)
 
         with self.options({'system.event-retention-days': 1}):
             url = reverse(
@@ -68,6 +90,6 @@ class ProjectEventsTest(APITestCase):
         assert len(response.data) == 1
         assert sorted(map(lambda x: x['id'], response.data)) == sorted(
             [
-                six.text_type(event_2.id),
+                six.text_type(event_2.event_id),
             ]
         )
diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index 1297f9fa1e..2547e7dba1 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -1,9 +1,9 @@
 from __future__ import absolute_import
 
+from datetime import timedelta
 from exam import patcher
 from freezegun import freeze_time
 
-from datetime import timedelta
 from uuid import uuid4
 
 import six
@@ -494,6 +494,7 @@ class GetIncidentSuspectCommitsTest(TestCase, BaseIncidentsTest):
         included_commits = set([letter * 40 for letter in ('a', 'b', 'c', 'd')])
         commit_iter = iter(included_commits)
 
+        one_min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
         event = self.store_event(
             data={
                 'fingerprint': ['group-1'],
@@ -506,6 +507,7 @@ class GetIncidentSuspectCommitsTest(TestCase, BaseIncidentsTest):
                     ]
                 },
                 'release': release.version,
+                'timestamp': one_min_ago,
             },
             project_id=self.project.id,
         )
@@ -553,6 +555,7 @@ class GetIncidentSuspectCommitsTest(TestCase, BaseIncidentsTest):
                     ],
                 },
                 'release': release_2.version,
+                'timestamp': one_min_ago,
             },
             project_id=self.project.id,
         )
diff --git a/tests/sentry/tasks/test_sentry_apps.py b/tests/sentry/tasks/test_sentry_apps.py
index ac6aa5304f..3ca2d8738e 100644
--- a/tests/sentry/tasks/test_sentry_apps.py
+++ b/tests/sentry/tasks/test_sentry_apps.py
@@ -4,7 +4,9 @@ import six
 
 from celery import Task
 from collections import namedtuple
+from datetime import timedelta
 from django.core.urlresolvers import reverse
+from django.utils import timezone
 from mock import patch
 
 from sentry.models import Rule, SentryApp, SentryAppInstallation
@@ -231,11 +233,13 @@ class TestProcessResourceChange(TestCase):
             slug=sentry_app.slug,
         )
 
+        one_min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
         event = self.store_event(
             data={
                 'message': 'Foo bar',
                 'exception': {"type": "Foo", "value": "shits on fiah yo"},
                 'level': 'error',
+                'timestamp': one_min_ago,
             },
             project_id=self.project.id,
             assert_no_errors=False
diff --git a/tests/sentry/web/frontend/test_group_event_json.py b/tests/sentry/web/frontend/test_group_event_json.py
index 013b4a3b33..fe32536c69 100644
--- a/tests/sentry/web/frontend/test_group_event_json.py
+++ b/tests/sentry/web/frontend/test_group_event_json.py
@@ -2,6 +2,8 @@ from __future__ import absolute_import
 
 import json
 
+from datetime import timedelta
+from django.utils import timezone
 from exam import fixture
 
 from sentry.testutils import TestCase
@@ -12,12 +14,20 @@ class GroupEventJsonTest(TestCase):
     def path(self):
         return u'/organizations/{}/issues/{}/events/{}/json/'.format(
             self.organization.slug,
-            self.group.id,
-            self.event.id,
+            self.event.group_id,
+            self.event.event_id,
         )
 
     def test_does_render(self):
         self.login_as(self.user)
+        min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
+        self.event = self.store_event(
+            data={
+                'fingerprint': ['group1'],
+                'timestamp': min_ago,
+            },
+            project_id=self.project.id,
+        )
         resp = self.client.get(self.path)
         assert resp.status_code == 200
         assert resp['Content-Type'] == 'application/json'
diff --git a/tests/sentry/web/frontend/test_project_event.py b/tests/sentry/web/frontend/test_project_event.py
index c317ec6904..6d206d9261 100644
--- a/tests/sentry/web/frontend/test_project_event.py
+++ b/tests/sentry/web/frontend/test_project_event.py
@@ -1,6 +1,8 @@
 from __future__ import absolute_import
 
+from datetime import timedelta
 from django.core.urlresolvers import reverse
+from django.utils import timezone
 from sentry.testutils import TestCase
 from sentry import options
 
@@ -19,8 +21,14 @@ class ProjectEventTest(TestCase):
             teams=[self.team],
         )
         self.project = self.create_project(organization=self.org, teams=[self.team])
-        self.group = self.create_group(project=self.project)
-        self.event = self.create_event(event_id='a' * 32, group=self.group)
+        min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
+        self.event = self.store_event(
+            data={
+                'fingerprint': ['group1'],
+                'timestamp': min_ago,
+            },
+            project_id=self.project.id,
+        )
 
     def test_redirect_to_event(self):
         resp = self.client.get(
@@ -29,13 +37,13 @@ class ProjectEventTest(TestCase):
                 args=[
                     self.org.slug,
                     self.project.slug,
-                    'a' * 32]))
+                    self.event.event_id]))
         assert resp.status_code == 302
         assert resp['Location'] == '{}/organizations/{}/issues/{}/events/{}/'.format(
             options.get('system.url-prefix'),
             self.org.slug,
-            self.group.id,
-            self.event.id,
+            self.event.group_id,
+            self.event.event_id,
         )
 
     def test_event_not_found(self):
