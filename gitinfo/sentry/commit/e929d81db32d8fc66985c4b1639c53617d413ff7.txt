commit e929d81db32d8fc66985c4b1639c53617d413ff7
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Sep 15 16:05:46 2013 +0900

    Bind node data where used

diff --git a/setup.py b/setup.py
index 19b844aea5..47b77f84f0 100755
--- a/setup.py
+++ b/setup.py
@@ -72,7 +72,6 @@ install_requires = [
     'django-picklefield>=0.3.0,<0.4.0',
     'django-static-compiler>=0.3.0,<0.4.0',
     'django-templatetag-sugar>=0.1.0,<0.2.0',
-    'django-uuidfield==0.4.0',
     'gunicorn>=0.17.2,<0.18.0',
     'logan>=0.5.7,<0.6.0',
     'nydus>=0.10.0,<0.11.0',
diff --git a/src/sentry/db/models/fields/node.py b/src/sentry/db/models/fields/node.py
index 25bdb3c041..ac90193a73 100644
--- a/src/sentry/db/models/fields/node.py
+++ b/src/sentry/db/models/fields/node.py
@@ -65,7 +65,7 @@ class NodeData(collections.MutableMapping):
 
         return {}
 
-    def bind_node_data(self, data):
+    def bind_data(self, data):
         self._node_data = data
 
 
diff --git a/src/sentry/db/models/manager.py b/src/sentry/db/models/manager.py
index 2fbbc6325b..3fd69100aa 100644
--- a/src/sentry/db/models/manager.py
+++ b/src/sentry/db/models/manager.py
@@ -224,3 +224,19 @@ class BaseManager(Manager):
 
     def create_or_update(self, **kwargs):
         return create_or_update(self.model, **kwargs)
+
+    def bind_nodes(self, object_list, *node_names):
+        from sentry import app
+
+        object_node_list = []
+        for name in node_names:
+            object_node_list.extend((getattr(i, name) for i in object_list if getattr(i, name).id))
+
+        node_ids = [n.id for n in object_node_list]
+        if not node_ids:
+            return
+
+        node_results = app.nodestore.get_multi(node_ids)
+
+        for node in object_node_list:
+            node.bind_data(node_results.get(node.id) or {})
diff --git a/src/sentry/nodestore/base.py b/src/sentry/nodestore/base.py
index 1cc47f6ecd..7a2adeaf8a 100644
--- a/src/sentry/nodestore/base.py
+++ b/src/sentry/nodestore/base.py
@@ -13,7 +13,7 @@ import uuid
 
 class NodeStorage(object):
     def create(self, data, timestamp=None):
-        node_id = uuid.uuid4().hex
+        node_id = self.generate_id()
         self.set(node_id, data, timestamp)
         return node_id
 
@@ -32,3 +32,6 @@ class NodeStorage(object):
     def set_multi(self, values):
         for v in values:
             self.set(**v)
+
+    def generate_id(self):
+        return uuid.uuid4().hex
diff --git a/src/sentry/nodestore/django/models.py b/src/sentry/nodestore/django/models.py
index 3ce6dd1bcf..d4d5f1d82a 100644
--- a/src/sentry/nodestore/django/models.py
+++ b/src/sentry/nodestore/django/models.py
@@ -8,8 +8,6 @@ sentry.nodestore.django.models
 
 from __future__ import absolute_import
 
-from uuidfield import UUIDField
-
 from django.db import models
 from django.utils import timezone
 
@@ -18,7 +16,7 @@ from sentry.db.models import (
 
 
 class Node(BaseModel):
-    id = UUIDField(auto=True, primary_key=True)
+    id = models.CharField(max_length=40, primary_key=True)
     data = GzippedDictField()
     timestamp = models.DateTimeField(default=timezone.now)
 
diff --git a/src/sentry/nodestore/migrations/0001_initial.py b/src/sentry/nodestore/migrations/0001_initial.py
index 5c0254fefe..1091e273ea 100644
--- a/src/sentry/nodestore/migrations/0001_initial.py
+++ b/src/sentry/nodestore/migrations/0001_initial.py
@@ -10,7 +10,7 @@ class Migration(SchemaMigration):
     def forwards(self, orm):
         # Adding model 'Node'
         db.create_table(u'nodestore_node', (
-            ('id', self.gf('uuidfield.fields.UUIDField')(unique=True, max_length=32, primary_key=True)),
+            ('id', self.gf('django.db.models.fields.CharField')(unique=True, max_length=40, primary_key=True)),
             ('data', self.gf('django.db.models.fields.TextField')()),
             ('timestamp', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
         ))
@@ -26,9 +26,9 @@ class Migration(SchemaMigration):
         'nodestore.node': {
             'Meta': {'object_name': 'Node'},
             'data': ('django.db.models.fields.TextField', [], {}),
-            'id': ('uuidfield.fields.UUIDField', [], {'unique': 'True', 'max_length': '32', 'primary_key': 'True'}),
+            'id': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '40', 'primary_key': 'True'}),
             'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'})
         }
     }
 
-    complete_apps = ['nodestore']
\ No newline at end of file
+    complete_apps = ['nodestore']
diff --git a/src/sentry/web/frontend/events.py b/src/sentry/web/frontend/events.py
index 851e9971f4..748c9508be 100644
--- a/src/sentry/web/frontend/events.py
+++ b/src/sentry/web/frontend/events.py
@@ -25,6 +25,8 @@ def replay_event(request, team, project, group, event_id):
     except Event.DoesNotExist:
         return HttpResponseRedirect(reverse('sentry'))
 
+    Event.objects.bind_nodes([event], 'data')
+
     interfaces = event.interfaces
     if 'sentry.interfaces.Http' not in interfaces:
         # TODO: show a proper error
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index 3ea8a2afc0..0d7178173f 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -388,6 +388,8 @@ def group(request, team, project, group, event_id=None):
     else:
         event = group.get_latest_event() or Event()
 
+    Event.objects.bind_nodes([event], 'data')
+
     # bind params to group in case they get hit
     event.group = group
     event.project = project
@@ -503,6 +505,8 @@ def group_event_list_json(request, team, project, group_id):
 
     events = group.event_set.order_by('-id')[:limit]
 
+    Event.objects.bind_nodes(events, 'data')
+
     return HttpResponse(json.dumps([event.as_dict() for event in events]), mimetype='application/json')
 
 
@@ -517,6 +521,8 @@ def group_event_details_json(request, team, project, group_id, event_id_or_lates
     else:
         event = get_object_or_404(group.event_set, pk=event_id_or_latest)
 
+    Event.objects.bind_nodes([event], 'data')
+
     return HttpResponse(json.dumps(event.as_dict()), mimetype='application/json')
 
 
