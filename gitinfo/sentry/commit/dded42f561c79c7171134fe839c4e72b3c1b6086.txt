commit dded42f561c79c7171134fe839c4e72b3c1b6086
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Wed Feb 19 18:00:18 2020 +0100

    fix(ingest): Add more metrics and tags, fetch each project once (#17130)

diff --git a/src/sentry/ingest/ingest_consumer.py b/src/sentry/ingest/ingest_consumer.py
index d54f7ea6ee..99d6ba340a 100644
--- a/src/sentry/ingest/ingest_consumer.py
+++ b/src/sentry/ingest/ingest_consumer.py
@@ -63,27 +63,31 @@ class IngestConsumerWorker(AbstractBatchWorker):
         attachment_chunks = []
         other_messages = []
 
-        projects_to_fetch = []
-
-        for message in batch:
-            message_type = message["type"]
-            projects_to_fetch.append(message["project_id"])
-
-            if message_type in ("event", "transaction"):
-                other_messages.append((process_event, message))
-            elif message_type == "attachment_chunk":
-                attachment_chunks.append(message)
-            elif message_type == "attachment":
-                other_messages.append((process_individual_attachment, message))
-            elif message_type == "user_report":
-                other_messages.append((process_userreport, message))
-            else:
-                raise ValueError("Unknown message type: {}".format(message_type))
-
-        projects = {p.id: p for p in Project.objects.get_many_from_cache(projects_to_fetch)}
+        projects_to_fetch = set()
+
+        with metrics.timer("ingest_consumer.prepare_messages", tags=self.__metrics_default_tags):
+            for message in batch:
+                message_type = message["type"]
+                projects_to_fetch.add(message["project_id"])
+
+                if message_type in ("event", "transaction"):
+                    other_messages.append((process_event, message))
+                elif message_type == "attachment_chunk":
+                    attachment_chunks.append(message)
+                elif message_type == "attachment":
+                    other_messages.append((process_individual_attachment, message))
+                elif message_type == "user_report":
+                    other_messages.append((process_userreport, message))
+                else:
+                    raise ValueError("Unknown message type: {}".format(message_type))
+
+        with metrics.timer("ingest_consumer.fetch_projects", tags=self.__metrics_default_tags):
+            projects = {p.id: p for p in Project.objects.get_many_from_cache(projects_to_fetch)}
 
         # attachment_chunk messages need to be processed before attachment/event messages.
-        with metrics.timer("ingest_consumer.process_attachment_chunk_batch"):
+        with metrics.timer(
+            "ingest_consumer.process_attachment_chunk_batch", tags=self.__metrics_default_tags
+        ):
             for _ in self.pool.imap_unordered(
                 lambda msg: process_attachment_chunk(msg, projects=projects),
                 attachment_chunks,
@@ -91,7 +95,9 @@ class IngestConsumerWorker(AbstractBatchWorker):
             ):
                 pass
 
-        with metrics.timer("ingest_consumer.process_other_messages_batch"):
+        with metrics.timer(
+            "ingest_consumer.process_other_messages_batch", tags=self.__metrics_default_tags
+        ):
             for _ in self.pool.imap_unordered(
                 lambda args: args[0](args[1], projects=projects), other_messages, chunksize=100
             ):
