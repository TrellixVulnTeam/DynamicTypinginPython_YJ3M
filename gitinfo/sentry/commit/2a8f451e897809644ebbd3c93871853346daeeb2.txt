commit 2a8f451e897809644ebbd3c93871853346daeeb2
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Feb 11 18:54:09 2013 -0800

    Bind project/team relations in javascript transformer

diff --git a/src/sentry/utils/db.py b/src/sentry/utils/db.py
index 72a5efc6ec..c01f12a337 100644
--- a/src/sentry/utils/db.py
+++ b/src/sentry/utils/db.py
@@ -11,6 +11,7 @@ import operator
 
 from django.conf import settings as django_settings
 from django.db.models.expressions import ExpressionNode, F
+from django.db.models.fields.related import SingleRelatedObjectDescriptor
 
 
 def get_db_engine(alias='default'):
@@ -65,3 +66,58 @@ def resolve_expression_node(instance, node):
     for n in node.children[1:]:
         runner = op(runner, _resolve(instance, n))
     return runner
+
+
+def attach_foreignkey(objects, field, related=[], database=None):
+    """
+    Shortcut method which handles a pythonic LEFT OUTER JOIN.
+
+    ``attach_foreignkey(posts, Post.thread)``
+
+    Works with both ForeignKey and OneToOne (reverse) lookups.
+    """
+
+    if not objects:
+        return
+
+    if database is None:
+        database = list(objects)[0]._state.db
+
+    is_foreignkey = isinstance(field, SingleRelatedObjectDescriptor)
+
+    if not is_foreignkey:
+        field = field.field
+        accessor = '_%s_cache' % field.name
+        model = field.rel.to
+        lookup = 'pk'
+        column = field.column
+        key = lookup
+    else:
+        accessor = field.cache_name
+        field = field.related.field
+        model = field.model
+        lookup = field.name
+        column = 'pk'
+        key = field.column
+
+    objects = [o for o in objects if (related or getattr(o, accessor, False) is False)]
+
+    if not objects:
+        return
+
+    # Ensure values are unique, do not contain already present values, and are not missing
+    # values specified in select_related
+    values = set(filter(None, (getattr(o, column) for o in objects)))
+    if values:
+        qs = model.objects.filter(**{'%s__in' % lookup: values})
+        if database:
+            qs = qs.using(database)
+        if related:
+            qs = qs.select_related(*related)
+
+        queryset = dict((getattr(o, key), o) for o in qs)
+    else:
+        queryset = {}
+
+    for o in objects:
+        setattr(o, accessor, queryset.get(getattr(o, column)))
diff --git a/src/sentry/utils/javascript.py b/src/sentry/utils/javascript.py
index 2abdad639f..4578b57d35 100644
--- a/src/sentry/utils/javascript.py
+++ b/src/sentry/utils/javascript.py
@@ -12,6 +12,7 @@ from sentry.constants import STATUS_RESOLVED
 from sentry.models import Group, GroupBookmark
 from sentry.templatetags.sentry_plugins import get_tags
 from sentry.utils import json
+from sentry.utils.db import attach_foreignkey
 
 
 transformers = {}
@@ -62,6 +63,8 @@ class GroupTransformer(Transformer):
     def attach_metadata(self, objects, request=None):
         from sentry.templatetags.sentry_plugins import handle_before_events
 
+        attach_foreignkey(objects, Group.project, ['team'])
+
         if request and objects:
             handle_before_events(request, objects)
 
