commit 6317c2a5fd4847f1cca31a7d605aff7e79007711
Author: Mark Story <mark@sentry.io>
Date:   Tue Dec 10 11:27:54 2019 -0800

    fix(heroku) Log email address when we get a hook we cannot match (#15960)
    
    This will help us let users know which email their heroku deploys are
    acting as so they can ensure there is a matching sentry user.

diff --git a/src/sentry_plugins/heroku/plugin.py b/src/sentry_plugins/heroku/plugin.py
index d6492d5861..d9817aced0 100644
--- a/src/sentry_plugins/heroku/plugin.py
+++ b/src/sentry_plugins/heroku/plugin.py
@@ -22,54 +22,55 @@ class HerokuReleaseHook(ReleaseHook):
             )
         except (User.DoesNotExist, User.MultipleObjectsReturned):
             user = None
-        self.finish_release(version=request.POST["head_long"], url=request.POST["url"], owner=user)
-
-    def set_refs(self, release, **values):
-        # check if user exists, and then try to get refs based on version
-        if values.get("owner", None):
-            repo_project_option = ProjectOption.objects.get_value(
-                project=self.project, key="heroku:repository"
-            )
-            deploy_project_option = (
-                ProjectOption.objects.get_value(
-                    project=self.project, key="heroku:environment", default="production"
-                )
-                or "production"
-            )
-            if repo_project_option:
-                try:
-                    repository = Repository.objects.get(
-                        organization_id=self.project.organization_id, name=repo_project_option
-                    )
-                except Repository.DoesNotExist:
-                    logger.info(
-                        "repository.missing",
-                        extra={
-                            "organization_id": self.project.organization_id,
-                            "project_id": self.project.id,
-                            "repository": repo_project_option,
-                        },
-                    )
-                else:
-                    release.set_refs(
-                        refs=[{"commit": release.version, "repository": repository.name}],
-                        user=values["owner"],
-                        fetch=True,
-                    )
-            # create deploy associated with release via ReleaseDeploysEndpoint
-            endpoint = "/organizations/{}/releases/{}/deploys/".format(
-                self.project.organization.slug, release.version
-            )
-            auth = ApiKey(organization=self.project.organization, scope_list=["project:write"])
-            client.post(endpoint, data={"environment": deploy_project_option}, auth=auth)
-        else:
             logger.info(
                 "owner.missing",
                 extra={
                     "organization_id": self.project.organization_id,
                     "project_id": self.project.id,
+                    "email": email,
                 },
             )
+        self.finish_release(version=request.POST["head_long"], url=request.POST["url"], owner=user)
+
+    def set_refs(self, release, **values):
+        if not values.get("owner", None):
+            return
+        # check if user exists, and then try to get refs based on version
+        repo_project_option = ProjectOption.objects.get_value(
+            project=self.project, key="heroku:repository"
+        )
+        deploy_project_option = (
+            ProjectOption.objects.get_value(
+                project=self.project, key="heroku:environment", default="production"
+            )
+            or "production"
+        )
+        if repo_project_option:
+            try:
+                repository = Repository.objects.get(
+                    organization_id=self.project.organization_id, name=repo_project_option
+                )
+            except Repository.DoesNotExist:
+                logger.info(
+                    "repository.missing",
+                    extra={
+                        "organization_id": self.project.organization_id,
+                        "project_id": self.project.id,
+                        "repository": repo_project_option,
+                    },
+                )
+            else:
+                release.set_refs(
+                    refs=[{"commit": release.version, "repository": repository.name}],
+                    user=values["owner"],
+                    fetch=True,
+                )
+        # create deploy associated with release via ReleaseDeploysEndpoint
+        endpoint = "/organizations/{}/releases/{}/deploys/".format(
+            self.project.organization.slug, release.version
+        )
+        auth = ApiKey(organization=self.project.organization, scope_list=["project:write"])
+        client.post(endpoint, data={"environment": deploy_project_option}, auth=auth)
 
 
 class HerokuPlugin(CorePluginMixin, ReleaseTrackingPlugin):
