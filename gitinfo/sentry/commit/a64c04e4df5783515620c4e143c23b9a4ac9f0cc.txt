commit a64c04e4df5783515620c4e143c23b9a4ac9f0cc
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri Aug 28 23:02:05 2015 +0200

    Added some project related API docs.

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 53a8d9ef90..ae0e3c4e8d 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -9,6 +9,17 @@ from sentry.api.decorators import sudo_required
 from sentry.api.serializers import serialize
 from sentry.models import AuditLogEntryEvent, Project, ProjectStatus
 from sentry.tasks.deletion import delete_project
+from sentry.utils.apidocs import scenario, attach_scenarios
+
+
+@scenario('DeleteProject')
+def delete_project_scenario(runner):
+    with runner.isolated_project('Plain Proxy') as project:
+        runner.request(
+            method='DELETE',
+            path='/projects/%s/%s/' % (
+                runner.org.slug, project.slug)
+        )
 
 
 def clean_newline_inputs(value):
@@ -95,6 +106,7 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
 
         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 
+    @attach_scenarios([delete_project_scenario])
     @sudo_required
     def delete(self, request, project):
         """
@@ -103,9 +115,14 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
 
         Schedules a project for deletion.
 
-        **Note:** Deletion happens asynchronously and therefor is not
-        immediate.  However once deletion has begun the state of a project
-        changes and will be hidden from most public views.
+        Deletion happens asynchronously and therefor is not immediate.
+        However once deletion has begun the state of a project changes and
+        will be hidden from most public views.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          project belongs to.
+        :pparam string project_slug: the slug of the project to delete.
+        :auth: required
         """
         if project.is_internal_project():
             return Response('{"error": "Cannot remove projects internally used by Sentry."}',
diff --git a/src/sentry/api/endpoints/project_key_details.py b/src/sentry/api/endpoints/project_key_details.py
index 4863b07467..b3f69f1895 100644
--- a/src/sentry/api/endpoints/project_key_details.py
+++ b/src/sentry/api/endpoints/project_key_details.py
@@ -8,6 +8,18 @@ from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import serialize
 from sentry.models import AuditLogEntryEvent, ProjectKey, ProjectKeyStatus
+from sentry.utils.apidocs import scenario, attach_scenarios
+
+
+@scenario('DeleteClientKeys')
+def delete_key_scenario(runner):
+    key = runner.utils.create_client_key(runner.default_project)
+    runner.request(
+        method='DELETE',
+        path='/projects/%s/%s/keys/%s/' % (
+            runner.org.slug, runner.default_project.slug,
+            key.public_key)
+    )
 
 
 class KeySerializer(serializers.Serializer):
@@ -55,12 +67,20 @@ class ProjectKeyDetailsEndpoint(ProjectEndpoint):
             return Response(serialize(key, request.user), status=200)
         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 
+    @attach_scenarios([delete_key_scenario])
     def delete(self, request, project, key_id):
         """
         Delete a Client Key
         ```````````````````
 
         Delete a client key.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          client keys belong to.
+        :pparam string project_slug: the slug of the project the client keys
+                                     belong to.
+        :pparam string key_id: the ID of the key to delete.
+        :auth: required
         """
         try:
             key = ProjectKey.objects.get(
diff --git a/src/sentry/api/endpoints/project_keys.py b/src/sentry/api/endpoints/project_keys.py
index e832cc83a7..550ad69fd7 100644
--- a/src/sentry/api/endpoints/project_keys.py
+++ b/src/sentry/api/endpoints/project_keys.py
@@ -7,6 +7,28 @@ from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize
 from sentry.models import AuditLogEntryEvent, ProjectKey, ProjectKeyStatus
+from sentry.utils.apidocs import scenario, attach_scenarios
+
+
+@scenario('ListClientKeys')
+def list_keys_scenario(runner):
+    runner.request(
+        method='GET',
+        path='/projects/%s/%s/keys/' % (
+            runner.org.slug, runner.default_project.slug)
+    )
+
+
+@scenario('CreateClientKey')
+def create_key_scenario(runner):
+    runner.request(
+        method='POST',
+        path='/projects/%s/%s/keys/' % (
+            runner.org.slug, runner.default_project.slug),
+        data={
+            'name': 'Fabulous Key'
+        }
+    )
 
 
 class KeySerializer(serializers.Serializer):
@@ -16,12 +38,18 @@ class KeySerializer(serializers.Serializer):
 class ProjectKeysEndpoint(ProjectEndpoint):
     doc_section = DocSection.PROJECTS
 
+    @attach_scenarios([list_keys_scenario])
     def get(self, request, project):
         """
         List a Project's Client Keys
         ````````````````````````````
 
         Return a list of client keys bound to a project.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          client keys belong to.
+        :pparam string project_slug: the slug of the project the client keys
+                                     belong to.
         """
         keys = list(ProjectKey.objects.filter(
             project=project,
@@ -30,12 +58,20 @@ class ProjectKeysEndpoint(ProjectEndpoint):
         ))
         return Response(serialize(keys, request.user))
 
+    @attach_scenarios([create_key_scenario])
     def post(self, request, project):
         """
         Create a new Client Key
         ```````````````````````
 
-        Create a new client key bound to a project.
+        Create a new client key bound to a project.  The key's secret and
+        public key are generated by the server and cannot be customized.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          client keys belong to.
+        :pparam string project_slug: the slug of the project the client keys
+                                     belong to.
+        :param string name: the name for the new key.
         """
         serializer = KeySerializer(data=request.DATA)
 
diff --git a/src/sentry/utils/apidocs.py b/src/sentry/utils/apidocs.py
index 176f6d95ac..1e28408146 100644
--- a/src/sentry/utils/apidocs.py
+++ b/src/sentry/utils/apidocs.py
@@ -274,6 +274,13 @@ class MockUtils(object):
             scopes=(1 << len(ApiKey.scopes.keys())) - 1,
         )[0]
 
+    def create_client_key(self, project, label='Default'):
+        from sentry.models import ProjectKey
+        return ProjectKey.objects.get_or_create(
+            project=project,
+            label=label
+        )[0]
+
     def create_team(self, name, org):
         from sentry.models import Team
         return Team.objects.get_or_create(
