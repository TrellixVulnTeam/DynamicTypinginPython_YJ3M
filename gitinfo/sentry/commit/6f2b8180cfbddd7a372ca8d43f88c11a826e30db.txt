commit 6f2b8180cfbddd7a372ca8d43f88c11a826e30db
Author: MeredithAnya <meredith@getsentry.com>
Date:   Thu Aug 1 12:48:25 2019 -0700

    ref(ts): Refactor DeviceName component (#14236)
    
    * ref(ts): Refactor DeviceName component
    
    * add iOSDeviceList types

diff --git a/src/sentry/static/sentry/app/components/deviceName.jsx b/src/sentry/static/sentry/app/components/deviceName.tsx
similarity index 81%
rename from src/sentry/static/sentry/app/components/deviceName.jsx
rename to src/sentry/static/sentry/app/components/deviceName.tsx
index 3712ae0db6..64ff6a56ea 100644
--- a/src/sentry/static/sentry/app/components/deviceName.jsx
+++ b/src/sentry/static/sentry/app/components/deviceName.tsx
@@ -1,11 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import {isString} from 'lodash';
+import {IOSDeviceList} from 'app/types/iOSDeviceList';
 
-export function deviceNameMapper(model, iOSDeviceList) {
-  if (!model || !isString(model)) {
-    return null;
-  }
+export function deviceNameMapper(model: string, iOSDeviceList): string {
   const modelIdentifier = model.split(' ')[0];
   const modelId = model
     .split(' ')
@@ -19,29 +16,32 @@ export async function loadDeviceListModule() {
   return import(/* webpackChunkName: "iOSDeviceList" */ 'ios-device-list');
 }
 
-export async function getDeviceName(model) {
-  const {default: iOSDeviceList} = await loadDeviceListModule();
-
-  return deviceNameMapper(model, iOSDeviceList);
-}
+type Props = {
+  children?: string;
+};
 
+type State = {
+  iOSDeviceList: IOSDeviceList | null;
+};
 /**
  * This is used to map iOS Device Names to model name.
  * This asynchronously loads the ios-device-list library because of its size
  */
-export default class DeviceName extends React.Component {
+export default class DeviceName extends React.Component<Props, State> {
   static propTypes = {
     children: PropTypes.string,
   };
 
-  constructor(...args) {
-    super(...args);
+  constructor(props) {
+    super(props);
 
     this.state = {
       iOSDeviceList: null,
     };
   }
 
+  private _isMounted?: boolean;
+
   componentDidMount() {
     // This is to handle react's warning on calling setState for unmounted components
     // Since we can't cancel promises, we need to do this
diff --git a/src/sentry/static/sentry/app/types/iOSDeviceList.tsx b/src/sentry/static/sentry/app/types/iOSDeviceList.tsx
new file mode 100644
index 0000000000..1c83cb8e65
--- /dev/null
+++ b/src/sentry/static/sentry/app/types/iOSDeviceList.tsx
@@ -0,0 +1,41 @@
+// https://github.com/pbakondy/ios-device-list#readme
+
+type Options = {
+  caseInsensitive?: boolean;
+  contains?: boolean;
+};
+
+type Device = {
+  Type: string;
+  Generation: string;
+  ANumber: string[];
+  Bootrom?: string[];
+  Variant?: string;
+  FCCID: string[];
+  InternalName: string;
+  Identifier: string;
+  Color: string;
+  Storage: string;
+  Model: string;
+};
+
+export type IOSDeviceList = {
+  deviceTypes: () => string[];
+  devices: (type?: string) => Device[];
+  generations: (type?: string) => [];
+  anumbers: (type?: string) => [];
+  fccids: (type?: string) => [];
+  internalNames: (type?: string) => [];
+  identifiers: (type?: string) => [];
+  colors: (type?: string) => [];
+  storages: (type?: string) => [];
+  models: (type?: string) => [];
+  deviceByGeneration: (generation: string, type?: string, options?: Options) => Device[];
+  deviceByFCCID: (fccid: string[], type?: string, options?: Options) => Device[];
+  deviceByInternalName: (name: string, type?: string, options?: Options) => Device[];
+  deviceByIdentifier: (id: string, type?: string, options?: Options) => Device[];
+  deviceByColor: (color: string, type?: string, options?: Options) => Device[];
+  deviceByStorage: (storage: string, type?: string, options?: Options) => Device[];
+  deviceByModel: (model: string, type?: string, options?: Options) => Device[];
+  generationByIdentifier: (id: string, type?: string) => string;
+};
