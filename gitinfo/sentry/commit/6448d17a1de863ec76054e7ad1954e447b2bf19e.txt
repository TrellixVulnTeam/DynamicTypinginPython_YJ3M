commit 6448d17a1de863ec76054e7ad1954e447b2bf19e
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Tue May 12 16:43:05 2020 +0200

    fix(ui): Added error message when invalid regex (#18760)

diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRules.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRules.tsx
index 4810f831b1..acae6aa8e4 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRules.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRules.tsx
@@ -14,13 +14,18 @@ import {defaultSuggestions as sourceDefaultSuggestions} from './dataPrivacyRules
 import DataPrivacyRulesModal from './dataPrivacyRulesModal';
 import DataPrivacyRulesPanelContent from './dataPrivacyRulesContent';
 import {RuleType, MethodType, EventIdStatus} from './dataPrivacyRulesForm/types';
+import DataPrivacyRulesPanelForm from './dataPrivacyRulesForm/dataPrivacyRulesForm';
 
 const ADVANCED_DATASCRUBBING_LINK =
   'https://docs.sentry.io/data-management/advanced-datascrubbing/';
 
+type DataPrivacyRulesPanelFormProps = React.ComponentProps<
+  typeof DataPrivacyRulesPanelForm
+>;
 type ModalProps = React.ComponentProps<typeof DataPrivacyRulesModal>;
 type Rule = NonNullable<ModalProps['rule']>;
 type SourceSuggestions = ModalProps['sourceSuggestions'];
+type Errors = DataPrivacyRulesPanelFormProps['errors'];
 
 type PiiConfig = {
   type: RuleType;
@@ -194,9 +199,10 @@ class DataPrivacyRules extends React.Component<Props, State> {
     }
   };
 
-  handleSubmit = async () => {
+  handleSubmit = async (rules: Array<Rule>) => {
     const {endpoint} = this.props;
-    const {rules} = this.state;
+
+    const errors: Errors = {};
 
     let customRulesCounter = 0;
     const applications: Applications = {};
@@ -234,7 +240,7 @@ class DataPrivacyRules extends React.Component<Props, State> {
 
     const relayPiiConfig = JSON.stringify(piiConfig);
 
-    await this.api
+    return await this.api
       .requestPromise(endpoint, {
         method: 'PUT',
         data: {relayPiiConfig},
@@ -246,77 +252,94 @@ class DataPrivacyRules extends React.Component<Props, State> {
       })
       .then(() => {
         addSuccessMessage(t('Successfully saved data privacy rules'));
+        return undefined;
       })
       .catch(error => {
         const errorMessage = error.responseJSON?.relayPiiConfig[0];
 
         if (!errorMessage) {
           addErrorMessage(t('Unknown error occurred while saving data privacy rules'));
-          return;
+          return undefined;
         }
 
         if (errorMessage.startsWith('invalid selector: ')) {
           for (const line of errorMessage.split('\n')) {
             if (line.startsWith('1 | ')) {
               const selector = line.slice(3);
-              addErrorMessage(t('Invalid selector: %s', selector));
+              errors.source = t('Invalid source value: %s', selector);
               break;
             }
           }
-          return;
+          return {
+            errors,
+          };
         }
 
         if (errorMessage.startsWith('regex parse error:')) {
           for (const line of errorMessage.split('\n')) {
             if (line.startsWith('error:')) {
               const regex = line.slice(6).replace(/at line \d+ column \d+/, '');
-              addErrorMessage(t('Invalid regex: %s', regex));
+              errors.customRegularExpression = t('Invalid regex: %s', regex);
               break;
             }
           }
-          return;
+          return {
+            errors,
+          };
         }
 
         addErrorMessage(t('Unknown error occurred while saving data privacy rules'));
+        return undefined;
       });
   };
 
-  handleAddRule = (newRule: Rule) => {
-    this.setState(
-      prevState => ({
-        rules: [
-          ...prevState.rules,
-          {
-            ...newRule,
-            id: prevState.rules.length + 1,
-          },
-        ],
-      }),
-      this.handleSubmit
-    );
+  handleAddRule = async (rule: Rule) => {
+    const newRule = {
+      ...rule,
+      id: this.state.rules.length,
+    };
+
+    const rules = [...this.state.rules, newRule];
+
+    return await this.handleSubmit(rules).then(result => {
+      if (!result) {
+        this.setState({
+          rules,
+        });
+        return undefined;
+      }
+      return result;
+    });
   };
 
-  handleDeleteRule = (rulesToBeDeleted: Array<Rule['id']>) => {
-    this.setState(
-      prevState => ({
-        rules: prevState.rules.filter(rule => !rulesToBeDeleted.includes(rule.id)),
-      }),
-      this.handleSubmit
-    );
+  handleUpdateRule = async (updatedRule: Rule) => {
+    const rules = this.state.rules.map(rule => {
+      if (rule.id === updatedRule.id) {
+        return updatedRule;
+      }
+      return rule;
+    });
+
+    return await this.handleSubmit(rules).then(result => {
+      if (!result) {
+        this.setState({
+          rules,
+        });
+        return undefined;
+      }
+      return result;
+    });
   };
 
-  handleUpdateRule = (updatedRule: Rule) => {
-    this.setState(
-      prevState => ({
-        rules: prevState.rules.map(rule => {
-          if (rule.id === updatedRule.id) {
-            return updatedRule;
-          }
-          return rule;
-        }),
-      }),
-      this.handleSubmit
-    );
+  handleDeleteRule = async (rulesToBeDeleted: Array<Rule['id']>) => {
+    const rules = this.state.rules.filter(rule => !rulesToBeDeleted.includes(rule.id));
+    await this.handleSubmit(rules).then(result => {
+      if (!result) {
+        this.setState({
+          rules,
+        });
+      }
+    });
   };
 
   handleToggleAddRuleModal = (showAddRuleModal: boolean) => () => {
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesContent.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesContent.tsx
index f020467750..31bff9b26c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesContent.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesContent.tsx
@@ -17,7 +17,7 @@ type Rule = NonNullable<ModalProps['rule']>;
 
 type Props = {
   rules: Array<Rule>;
-  onUpdateRule: (updatedRule: Rule) => void;
+  onUpdateRule: ModalProps['onSaveRule'];
   onDeleteRule: (rulesToBeDeleted: Array<Rule['id']>) => void;
 } & Pick<ModalProps, 'disabled' | 'eventId' | 'onUpdateEventId' | 'sourceSuggestions'>;
 
@@ -47,17 +47,18 @@ class DataPrivacyRulesContent extends React.Component<Props, State> {
     });
   };
 
-  handleSave = (updatedRule: Rule) => {
+  handleSave = async (updatedRule: Rule) => {
     const {onUpdateRule} = this.props;
 
-    this.setState(
-      {
-        editRule: undefined,
-      },
-      () => {
-        onUpdateRule(updatedRule);
+    return await onUpdateRule(updatedRule).then(result => {
+      if (!result) {
+        this.setState({
+          editRule: undefined,
+        });
+        return undefined;
       }
-    );
+      return result;
+    });
   };
 
   render() {
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx
index 08eaf55556..5400d3a680 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx
@@ -23,151 +23,103 @@ type Rule = {
 
 type EventIdProps = React.ComponentProps<typeof DataPrivacyRulesFormEventId>;
 type SourceProps = React.ComponentProps<typeof DataPrivacyRulesFormSource>;
+type Errors = {
+  customRegularExpression?: string;
+  source?: string;
+};
 
 type Props = EventIdProps & {
   rule: Rule;
   sourceSuggestions: SourceProps['suggestions'];
-  onChange: (rule: Rule) => void;
+  onChange: <T extends keyof Omit<Rule, 'id'>>(stateProperty: T, value: Rule[T]) => void;
   onUpdateEventId: (eventId: string) => void;
+  onValidate: <T extends keyof Errors>(field: T) => () => void;
+  errors: Errors;
 };
 
-type State = {
-  errors: {
-    [key: string]: string;
-  };
-};
-class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
-  state: State = {
-    errors: {},
-  };
-
-  componentDidUpdate(prevProps: Props) {
-    if (prevProps.rule.source !== this.props.rule.source) {
-      this.handleValidation('source')();
-    }
-  }
-
-  handleChange = <T extends keyof Omit<Rule, 'id'>>(stateProperty: T, value: Rule[T]) => {
-    const rule: Rule = {
-      ...this.props.rule,
-      [stateProperty]: value,
-    };
-
-    if (rule.type !== RuleType.PATTERN) {
-      delete rule.customRegularExpression;
-    }
-
-    this.props.onChange({
-      ...rule,
-    });
-  };
-
-  handleValidation = <T extends keyof Omit<Rule, 'id'>>(field: T) => () => {
-    const errors = {...this.state.errors};
-    const isFieldValueEmpty = !this.props.rule[field];
-    const fieldErrorAlreadyExist = errors[field];
-
-    if (isFieldValueEmpty && fieldErrorAlreadyExist) {
-      return;
-    }
-
-    if (isFieldValueEmpty && !fieldErrorAlreadyExist) {
-      errors[field] = t('Field Required');
-    }
-
-    if (!isFieldValueEmpty && fieldErrorAlreadyExist) {
-      delete errors[field];
-    }
-
-    this.setState({
-      errors,
-    });
-  };
-
-  render() {
-    const {rule, disabled, sourceSuggestions, onUpdateEventId, eventId} = this.props;
-    const {source, customRegularExpression, type, method} = rule;
-    const {errors} = this.state;
-
-    return (
-      <Wrapper>
-        <WrapperSelectFields>
-          <DataPrivacyRulesFormField label={t('Method')} tooltipInfo={t('What to do')}>
-            <DataPrivacyRulesFormSelectControl
-              placeholder={t('Select method')}
-              name="method"
-              options={sortBy(Object.values(MethodType)).map(value => ({
-                label: getMethodTypeLabel(value),
-                value,
-              }))}
-              value={method}
-              onChange={({value}) => this.handleChange('method', value)}
-              isDisabled={disabled}
-            />
-          </DataPrivacyRulesFormField>
-          <DataPrivacyRulesFormField
-            label={t('Data Type')}
-            tooltipInfo={t(
-              'What to look for. Use an existing pattern or define your own using regular expressions.'
-            )}
-          >
-            <DataPrivacyRulesFormSelectControl
-              placeholder={t('Select type')}
-              name="type"
-              options={sortBy(Object.values(RuleType)).map(value => ({
-                label: getRuleTypeLabel(value),
-                value,
-              }))}
-              value={type}
-              onChange={({value}) => this.handleChange('type', value)}
-              isDisabled={disabled}
-            />
-          </DataPrivacyRulesFormField>
-        </WrapperSelectFields>
-        {type === RuleType.PATTERN && (
-          <DataPrivacyRulesFormField
-            label={t('Regex matches')}
-            tooltipInfo={t('Custom Perl-style regex (PCRE)')}
-            isFullWidth
-          >
-            <CustomRegularExpression
-              name="customRegularExpression"
-              placeholder={t('[a-zA-Z0-9]+')}
-              onChange={(value: string) => {
-                this.handleChange('customRegularExpression', value);
-              }}
-              value={customRegularExpression}
-              onBlur={this.handleValidation('customRegularExpression')}
-              error={errors.customRegularExpression}
-              disabled={disabled}
-            />
-          </DataPrivacyRulesFormField>
+const DataPrivacyRulesForm = ({
+  disabled,
+  rule: {source, customRegularExpression, type, method},
+  errors,
+  sourceSuggestions,
+  onUpdateEventId,
+  eventId,
+  onChange,
+  onValidate,
+}: Props) => (
+  <Wrapper>
+    <WrapperSelectFields>
+      <DataPrivacyRulesFormField label={t('Method')} tooltipInfo={t('What to do')}>
+        <DataPrivacyRulesFormSelectControl
+          placeholder={t('Select method')}
+          name="method"
+          options={sortBy(Object.values(MethodType)).map(value => ({
+            label: getMethodTypeLabel(value),
+            value,
+          }))}
+          value={method}
+          onChange={({value}) => onChange('method', value)}
+          isDisabled={disabled}
+        />
+      </DataPrivacyRulesFormField>
+      <DataPrivacyRulesFormField
+        label={t('Data Type')}
+        tooltipInfo={t(
+          'What to look for. Use an existing pattern or define your own using regular expressions.'
         )}
-        <DataPrivacyRulesFormEventId
-          onUpdateEventId={onUpdateEventId}
-          eventId={eventId}
+      >
+        <DataPrivacyRulesFormSelectControl
+          placeholder={t('Select type')}
+          name="type"
+          options={sortBy(Object.values(RuleType)).map(value => ({
+            label: getRuleTypeLabel(value),
+            value,
+          }))}
+          value={type}
+          onChange={({value}) => onChange('type', value)}
+          isDisabled={disabled}
         />
-        <DataPrivacyRulesFormField
-          label={t('Source')}
-          tooltipInfo={t(
-            'Where to look. In the simplest case this can be an attribute name.'
-          )}
-        >
-          <DataPrivacyRulesFormSource
-            onChange={(value: string) => {
-              this.handleChange('source', value);
-            }}
-            value={source}
-            onBlur={this.handleValidation('source')}
-            suggestions={sourceSuggestions}
-            error={errors.source}
-            disabled={disabled}
-          />
-        </DataPrivacyRulesFormField>
-      </Wrapper>
-    );
-  }
-}
+      </DataPrivacyRulesFormField>
+    </WrapperSelectFields>
+    {type === RuleType.PATTERN && (
+      <DataPrivacyRulesFormField
+        label={t('Regex matches')}
+        tooltipInfo={t('Custom Perl-style regex (PCRE)')}
+        isFullWidth
+      >
+        <CustomRegularExpression
+          name="customRegularExpression"
+          placeholder={t('[a-zA-Z0-9]+')}
+          onChange={(value: string) => {
+            onChange('customRegularExpression', value);
+          }}
+          value={customRegularExpression}
+          onBlur={onValidate('customRegularExpression')}
+          error={errors.customRegularExpression}
+          disabled={disabled}
+        />
+      </DataPrivacyRulesFormField>
+    )}
+    <DataPrivacyRulesFormEventId onUpdateEventId={onUpdateEventId} eventId={eventId} />
+    <DataPrivacyRulesFormField
+      label={t('Source')}
+      tooltipInfo={t(
+        'Where to look. In the simplest case this can be an attribute name.'
+      )}
+    >
+      <DataPrivacyRulesFormSource
+        onChange={(value: string) => {
+          onChange('source', value);
+        }}
+        value={source}
+        onBlur={onValidate('source')}
+        suggestions={sourceSuggestions}
+        error={errors.source}
+        disabled={disabled}
+      />
+    </DataPrivacyRulesFormField>
+  </Wrapper>
+);
 
 export default DataPrivacyRulesForm;
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesModal.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesModal.tsx
index 3f6e733f0d..1bcdca478f 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesModal.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesModal.tsx
@@ -15,23 +15,26 @@ const DEFAULT_RULE_SOURCE_VALUE = '';
 
 type FormProps = React.ComponentProps<typeof DataPrivacyRulesPanelForm>;
 type Rule = FormProps['rule'];
+type Errors = FormProps['errors'];
+type Error = keyof Errors;
 
 type Props = Pick<
   FormProps,
   'sourceSuggestions' | 'disabled' | 'eventId' | 'onUpdateEventId'
 > & {
   rule?: Rule;
-  onSaveRule: (rule: Rule) => void;
+  onSaveRule: (rule: Rule) => Promise<{errors: Errors} | undefined>;
   onClose: () => void;
 };
 
 type State = {
   rule: Rule;
   isFormValid: boolean;
+  errors: Errors;
 };
 
 class DataPrivacyRulesModal extends React.Component<Props, State> {
-  state = {
+  state: State = {
     rule: {
       id: defined(this.props.rule?.id) ? this.props.rule?.id! : -1,
       type: this.props.rule?.type || RuleType.CREDITCARD,
@@ -40,18 +43,62 @@ class DataPrivacyRulesModal extends React.Component<Props, State> {
       customRegularExpression: this.props.rule?.customRegularExpression,
     },
     isFormValid: false,
+    errors: {},
   };
 
-  handleChange = (updatedRule: Rule) => {
+  clearError = (error: Error) => {
+    this.setState(prevState => ({
+      errors: omit(prevState.errors, error),
+    }));
+  };
+
+  handleChange = <T extends keyof Omit<Rule, 'id'>>(stateProperty: T, value: Rule[T]) => {
+    const rule: Rule = {
+      ...this.state.rule,
+      [stateProperty]: value,
+    };
+
+    if (rule.type !== RuleType.PATTERN) {
+      delete rule?.customRegularExpression;
+      this.clearError('customRegularExpression');
+    }
+
+    if (stateProperty === 'customRegularExpression' || stateProperty === 'source') {
+      this.clearError(stateProperty as Error);
+    }
+
     this.setState(
       {
-        rule: updatedRule,
+        rule,
       },
-      this.handleValidate
+      this.handleValidateForm
     );
   };
 
-  handleValidate = () => {
+  handleValidation = <T extends keyof Errors>(field: T) => () => {
+    const isFieldValueEmpty = !this.state.rule[field];
+    const fieldErrorAlreadyExist = this.state.errors[field];
+
+    if (isFieldValueEmpty && fieldErrorAlreadyExist) {
+      return;
+    }
+
+    if (isFieldValueEmpty && !fieldErrorAlreadyExist) {
+      this.setState(prevState => ({
+        errors: {
+          ...prevState.errors,
+          [field]: t('Field Required'),
+        },
+      }));
+      return;
+    }
+
+    if (!isFieldValueEmpty && fieldErrorAlreadyExist) {
+      this.clearError(field);
+    }
+  };
+
+  handleValidateForm = () => {
     const {rule} = this.state;
 
     const ruleKeys = Object.keys(omit(rule, 'id'));
@@ -62,17 +109,25 @@ class DataPrivacyRulesModal extends React.Component<Props, State> {
     });
   };
 
-  handleSave = () => {
+  handleSave = async () => {
     const {rule} = this.state;
     const {onSaveRule, onClose} = this.props;
 
-    onSaveRule(rule);
-    onClose();
+    await onSaveRule(rule).then(result => {
+      if (!result) {
+        onClose();
+        return;
+      }
+
+      this.setState({
+        errors: result.errors,
+      });
+    });
   };
 
   render() {
     const {onClose, disabled, sourceSuggestions, onUpdateEventId, eventId} = this.props;
-    const {rule, isFormValid} = this.state;
+    const {rule, isFormValid, errors} = this.state;
 
     return (
       <StyledModal show animation={false} onHide={onClose}>
@@ -82,11 +137,13 @@ class DataPrivacyRulesModal extends React.Component<Props, State> {
         <Modal.Body>
           <DataPrivacyRulesPanelForm
             onChange={this.handleChange}
+            onValidate={this.handleValidation}
             sourceSuggestions={sourceSuggestions}
             rule={rule}
             disabled={disabled}
             onUpdateEventId={onUpdateEventId}
             eventId={eventId}
+            errors={errors}
           />
         </Modal.Body>
         <Modal.Footer>
