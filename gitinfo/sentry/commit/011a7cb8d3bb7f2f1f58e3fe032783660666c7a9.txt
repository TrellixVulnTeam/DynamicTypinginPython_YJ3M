commit 011a7cb8d3bb7f2f1f58e3fe032783660666c7a9
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Feb 6 16:29:51 2019 -0800

    fix(ui): Fix absolute date picker (#11936)
    
    Fixes issues when user timezone is different than their system timezone.

diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.jsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.jsx
index a3e12dffdc..af56e7ee00 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.jsx
@@ -1,6 +1,8 @@
-import {defined} from 'app/utils';
 import {pick, pickBy, identity} from 'lodash';
-import {getLocalDateObject} from 'app/utils/dates';
+
+import {defined} from 'app/utils';
+import {getUtcToLocalDateObject} from 'app/utils/dates';
+
 import {URL_PARAM} from './constants';
 
 // Parses URL query parameters for values relevant to global selection header
@@ -26,8 +28,8 @@ export function getStateFromQuery(query) {
   }
 
   if (hasAbsolute) {
-    start = getLocalDateObject(start);
-    end = getLocalDateObject(end);
+    start = getUtcToLocalDateObject(start);
+    end = getUtcToLocalDateObject(end);
   }
 
   return {
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/dateRange.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/dateRange.jsx
index 4257e71fe0..cc2d5076eb 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/dateRange.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/dateRange.jsx
@@ -4,17 +4,11 @@ import 'react-date-range/dist/theme/default.css';
 import {DateRangePicker} from 'react-date-range';
 import PropTypes from 'prop-types';
 import React from 'react';
+import moment from 'moment';
 import styled from 'react-emotion';
 
-import {
-  DEFAULT_DAY_END_TIME,
-  DEFAULT_DAY_START_TIME,
-  getCoercedUtcOrLocalDate,
-  getFormattedDate,
-  getStartOfPeriodAgo,
-  setDateToTime,
-} from 'app/utils/dates';
 import {analytics} from 'app/utils/analytics';
+import {getEndOfDay, getStartOfPeriodAgo, setDateToTime} from 'app/utils/dates';
 import {t} from 'app/locale';
 import Checkbox from 'app/components/checkbox';
 import TimePicker from 'app/components/organizations/timeRangeSelector/timePicker';
@@ -74,29 +68,20 @@ class DateRange extends React.Component {
     maxPickableDays: MAX_PICKABLE_DAYS,
   };
 
-  static getTimeStringFromDate = (date, utc) => {
-    return getFormattedDate(date, 'HH:mm', {local: !utc});
+  static getTimeStringFromDate = date => {
+    return moment(date)
+      .local()
+      .format('HH:mm');
   };
 
   handleSelectDateRange = ({selection}) => {
-    const {utc, onChange} = this.props;
+    const {onChange} = this.props;
     const {startDate, endDate} = selection;
 
-    let start = startDate;
-    let end = endDate;
-
-    if (start) {
-      start = setDateToTime(start, DEFAULT_DAY_START_TIME, {local: !utc});
-    }
-
-    if (end) {
-      end = setDateToTime(end, DEFAULT_DAY_END_TIME, {
-        local: !utc,
-      });
-    }
+    const end = endDate ? getEndOfDay(endDate) : endDate;
 
     onChange({
-      start,
+      start: startDate,
       end,
     });
   };
@@ -115,7 +100,7 @@ class DateRange extends React.Component {
     });
 
     onChange({
-      start: setDateToTime(start, startTime, {local: !this.props.utc}),
+      start: setDateToTime(start, startTime, {local: true}),
       end,
     });
   };
@@ -131,7 +116,7 @@ class DateRange extends React.Component {
 
     onChange({
       start,
-      end: setDateToTime(end, endTime, {local: !this.props.utc}),
+      end: setDateToTime(end, endTime, {local: true}),
     });
   };
 
@@ -146,18 +131,13 @@ class DateRange extends React.Component {
       onChangeUtc,
     } = this.props;
 
-    const startTime = DateRange.getTimeStringFromDate(new Date(start), utc);
-    const endTime = DateRange.getTimeStringFromDate(new Date(end), utc);
+    const startTime = DateRange.getTimeStringFromDate(new Date(start));
+    const endTime = DateRange.getTimeStringFromDate(new Date(end));
 
     // Restraints on the time range that you can select
     // Can't select dates in the future b/c we're not fortune tellers (yet)
-    const minDate = getCoercedUtcOrLocalDate(
-      getStartOfPeriodAgo(maxPickableDays, 'days'),
-      {
-        local: !utc,
-      }
-    );
-    const maxDate = getCoercedUtcOrLocalDate(new Date(), {local: !utc});
+    const minDate = getStartOfPeriodAgo(maxPickableDays, 'days');
+    const maxDate = new Date();
 
     return (
       <div className={className} data-test-id="date-range">
@@ -165,8 +145,8 @@ class DateRange extends React.Component {
           rangeColors={[theme.purple]}
           ranges={[
             {
-              startDate: start ? getCoercedUtcOrLocalDate(start, {local: !utc}) : start,
-              endDate: end ? getCoercedUtcOrLocalDate(end, {local: !utc}) : end,
+              startDate: moment(start).local(),
+              endDate: moment(end).local(),
               key: 'selection',
             },
           ]}
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateSummary.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateSummary.jsx
index c10de94976..513d59d0dc 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateSummary.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateSummary.jsx
@@ -4,12 +4,9 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
+import moment from 'moment';
 
-import {
-  DEFAULT_DAY_END_TIME,
-  DEFAULT_DAY_START_TIME,
-  getFormattedDate,
-} from 'app/utils/dates';
+import {DEFAULT_DAY_END_TIME, DEFAULT_DAY_START_TIME} from 'app/utils/dates';
 import {t} from 'app/locale';
 import space from 'app/styles/space';
 
@@ -30,18 +27,20 @@ class DateSummary extends React.Component {
      * React does not support `instanceOf` with null values
      */
     end: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
-
-    utc: PropTypes.bool,
   };
 
+  getFormattedDate(date, format) {
+    return moment(date)
+      .local()
+      .format(format);
+  }
+
   formatDate(date) {
-    return getFormattedDate(date, 'll', {local: !this.props.utc});
+    return this.getFormattedDate(date, 'll');
   }
 
   formatTime(date, withSeconds = false) {
-    return getFormattedDate(date, `HH:mm${withSeconds ? ':ss' : ''}`, {
-      local: !this.props.utc,
-    });
+    return this.getFormattedDate(date, `HH:mm${withSeconds ? ':ss' : ''}`);
   }
 
   render() {
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
index c86277fc9d..4cd4249cbb 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
@@ -1,16 +1,17 @@
 import {Flex} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
+import moment from 'moment';
 import styled from 'react-emotion';
 
-import {
-  DEFAULT_RELATIVE_PERIODS,
-  DEFAULT_STATS_PERIOD,
-  DEFAULT_USE_UTC,
-} from 'app/constants';
+import {DEFAULT_RELATIVE_PERIODS, DEFAULT_STATS_PERIOD} from 'app/constants';
 import {analytics} from 'app/utils/analytics';
-import {callIfFunction} from 'app/utils/callIfFunction';
-import {getLocalToUtc, getPeriodAgo, getUtcInLocal} from 'app/utils/dates';
+import {
+  getLocalToSystem,
+  getPeriodAgo,
+  getUserTimezone,
+  getUtcToSystem,
+} from 'app/utils/dates';
 import {parsePeriodToHours} from 'app/utils';
 import {t} from 'app/locale';
 import DateRange from 'app/components/organizations/timeRangeSelector/dateRange';
@@ -22,6 +23,29 @@ import RelativeSelector from 'app/components/organizations/timeRangeSelector/dat
 import SelectorItem from 'app/components/organizations/timeRangeSelector/dateRange/selectorItem';
 import getDynamicText from 'app/utils/getDynamicText';
 
+// Strips timezone from local date, creates a new moment date object with timezone
+// Then returns as a Date object
+const getDateWithTimezoneInUtc = (date, utc) =>
+  moment
+    .tz(
+      moment(date)
+        .local()
+        .format('YYYY-MM-DD HH:mm:ss'),
+      utc ? 'UTC' : getUserTimezone()
+    )
+    .utc()
+    .toDate();
+
+const getInternalDate = (date, utc) => {
+  if (utc) {
+    return getUtcToSystem(date);
+  } else {
+    return new Date(
+      moment.tz(moment.utc(date), getUserTimezone()).format('YYYY-MM-DD HH:mm:ss')
+    );
+  }
+};
+
 class TimeRangeSelector extends React.PureComponent {
   static propTypes = {
     /**
@@ -73,21 +97,48 @@ class TimeRangeSelector extends React.PureComponent {
   static defaultProps = {
     showAbsolute: true,
     showRelative: true,
-    utc: DEFAULT_USE_UTC,
+    utc: getUserTimezone() === 'UTC',
   };
 
   constructor(props) {
     super(props);
+
+    let start;
+    let end;
+
+    if (props.start && props.end) {
+      start = getInternalDate(props.start, props.utc);
+      end = getInternalDate(props.end, props.utc);
+    }
+
     this.state = {
       utc: props.utc,
       isOpen: false,
       hasChanges: false,
-      start: props.start,
-      end: props.end,
+      start,
+      end,
       relative: props.relative,
     };
   }
 
+  callCallback = (callback, datetime) => {
+    if (typeof callback !== 'function') {
+      return;
+    }
+
+    if (!datetime.start && !datetime.end) {
+      callback(datetime);
+      return;
+    }
+
+    // Change local date into either UTC or local time (local time defined by user preference)
+    callback({
+      ...datetime,
+      start: getDateWithTimezoneInUtc(datetime.start, this.state.utc),
+      end: getDateWithTimezoneInUtc(datetime.end, this.state.utc),
+    });
+  };
+
   handleCloseMenu = () => {
     const {relative, start, end, utc} = this.state;
 
@@ -108,7 +159,7 @@ class TimeRangeSelector extends React.PureComponent {
         hasChanges: false,
       },
       () => {
-        callIfFunction(onUpdate, datetime);
+        this.callCallback(onUpdate, datetime);
       }
     );
   };
@@ -127,8 +178,13 @@ class TimeRangeSelector extends React.PureComponent {
       end: new Date(),
       utc: this.state.utc,
     };
-    this.setState({hasChanges: true, ...newDateTime});
-    callIfFunction(onChange, newDateTime);
+    this.setState({
+      hasChanges: true,
+      ...newDateTime,
+      start: newDateTime.start,
+      end: newDateTime.end,
+    });
+    this.callCallback(onChange, newDateTime);
   };
 
   handleSelectRelative = value => {
@@ -139,7 +195,7 @@ class TimeRangeSelector extends React.PureComponent {
       end: null,
       utc: this.state.utc,
     };
-    callIfFunction(onChange, newDateTime);
+    this.callCallback(onChange, newDateTime);
     this.handleUpdate(newDateTime);
   };
 
@@ -151,7 +207,7 @@ class TimeRangeSelector extends React.PureComponent {
       end: null,
       utc: this.state.utc,
     };
-    callIfFunction(onChange, newDateTime);
+    this.callCallback(onChange, newDateTime);
     this.handleUpdate(newDateTime);
   };
 
@@ -165,15 +221,20 @@ class TimeRangeSelector extends React.PureComponent {
       utc: this.state.utc,
     };
     this.setState({hasChanges: true, ...newDateTime});
-    callIfFunction(onChange, newDateTime);
+    this.callCallback(onChange, newDateTime);
   };
 
   handleUseUtc = () => {
     const {onChange} = this.props;
     let {start, end} = this.props;
 
-    start = start || this.state.start;
-    end = end || this.state.end;
+    if (!start) {
+      start = getDateWithTimezoneInUtc(this.state.start, this.props.utc);
+    }
+
+    if (!end) {
+      end = getDateWithTimezoneInUtc(this.state.end, this.props.utc);
+    }
 
     this.setState(state => {
       const utc = !state.utc;
@@ -182,11 +243,11 @@ class TimeRangeSelector extends React.PureComponent {
       });
       const newDateTime = {
         relative: null,
-        start: utc ? getLocalToUtc(start) : getUtcInLocal(start),
-        end: utc ? getLocalToUtc(end) : getUtcInLocal(end),
+        start: this.props.utc ? getUtcToSystem(start) : getLocalToSystem(start),
+        end: this.props.utc ? getUtcToSystem(end) : getLocalToSystem(end),
         utc,
       };
-      callIfFunction(onChange, newDateTime);
+      this.callCallback(onChange, newDateTime);
 
       return {
         hasChanges: true,
diff --git a/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx b/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
index 8c67269c52..9f14e77358 100644
--- a/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
+++ b/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
@@ -119,10 +119,7 @@ const GlobalSelectionStore = Reflux.createStore({
 
     this.selection = {
       ...this.selection,
-      datetime: {
-        ...this.selection.datetime,
-        ...datetime,
-      },
+      datetime,
     };
     this.updateLocalStorage();
     this.trigger(this.selection);
diff --git a/src/sentry/static/sentry/app/utils/dates.jsx b/src/sentry/static/sentry/app/utils/dates.jsx
index e794454c64..a72b7081da 100644
--- a/src/sentry/static/sentry/app/utils/dates.jsx
+++ b/src/sentry/static/sentry/app/utils/dates.jsx
@@ -1,19 +1,16 @@
 import moment from 'moment';
 
+import ConfigStore from 'app/stores/configStore';
+
+// TODO(billy): Move to TimeRangeSelector specific utils
 export const DEFAULT_DAY_START_TIME = '00:00:00';
 export const DEFAULT_DAY_END_TIME = '23:59:59';
+const DATE_FORMAT_NO_TIMEZONE = 'YYYY-MM-DD HH:mm:ss';
 
 function getParser(local = false) {
   return local ? moment : moment.utc;
 }
 
-/**
- * Return a date object in local time, when given a UTC timestamp
- */
-export function getLocalDateObject(date) {
-  return moment.utc(date).toDate();
-}
-
 /**
  * Given a date object, format in datetime in UTC
  * given: Tue Oct 09 2018 00:00:00 GMT-0700 (Pacific Daylight Time)
@@ -27,6 +24,26 @@ export function getFormattedDate(dateObj, format, {local} = {}) {
   return getParser(local)(dateObj).format(format);
 }
 
+/**
+ * Returns user timezone from their account preferences
+ */
+export function getUserTimezone() {
+  const user = ConfigStore.get('user');
+  return user && user.options && user.options.timezone;
+}
+
+// TODO(billy): The below functions should be refactored to a TimeRangeSelector specific utils
+
+/**
+ * Given a UTC date, return a Date object in local time
+ */
+export function getUtcToLocalDateObject(date) {
+  return moment
+    .utc(date)
+    .local()
+    .toDate();
+}
+
 /**
  * Sets time (hours + minutes) of the current date object
  *
@@ -35,74 +52,78 @@ export function getFormattedDate(dateObj, format, {local} = {}) {
 export function setDateToTime(dateObj, timeStr, {local} = {}) {
   const [hours, minutes, seconds] = timeStr.split(':');
 
-  const date = getParser(local)(dateObj)
-    .set('hours', hours)
-    .set('minutes', minutes);
+  const date = new Date(+dateObj);
 
-  if (typeof seconds !== 'undefined') {
-    date.set('seconds', seconds);
+  if (local) {
+    date.setHours(hours, minutes);
+  } else {
+    date.setUTCHours(hours, minutes);
   }
 
-  return date.toDate();
-}
-
-/**
- * Given a UTC timestamp, return a local date object with the same date
- * e.g. given: 1/1/2001 @ 22:00 UTC, return:  1/1/2001 @ 22:00 GMT-7
- */
-export function getUtcInLocal(dateObj) {
-  const utc = moment.utc(dateObj);
-  const format = 'YYYY-MM-DD HH:mm:ss';
+  if (typeof seconds !== 'undefined') {
+    date.setSeconds(seconds);
+  }
 
-  return moment(utc.format(format), format).toDate();
+  return date;
 }
 
 /**
- * Because our date picker library does not support display dates in UTC, we need
- * to make a fake date object for date picker to use.
+ * Given a UTC timestamp, return a system date object with the same date
+ * e.g. given: system is -0700 (PST),
+ * 1/1/2001 @ 22:00 UTC, return:  1/1/2001 @ 22:00 -0700 (PST)
  */
-export function getCoercedUtcOrLocalDate(date, {local} = {}) {
-  if (local) {
-    return getLocalDateObject(date);
-  }
-
-  return getUtcInLocal(date);
+export function getUtcToSystem(dateObj) {
+  // This is required because if your system timezone !== user configured timezone
+  // then there will be a mismatch of dates with `react-date-picker`
+  //
+  // We purposely strip the timezone when formatting from the utc timezone
+  return new Date(moment.utc(dateObj).format(DATE_FORMAT_NO_TIMEZONE));
 }
 
 /**
- * Given a local date, return a UTC date object with the same date
- * e.g. given: 1/1/2001 @ 22:00 GMT-7, return:  1/1/2001 @ 22:00 UTC
+ * Given a timestamp, format to user preference timezone, and strip timezone to
+ * return a system date object with the same date
+ *
+ * e.g. given: system is -0700 (PST) and user preference is -0400 (EST),
+ * 1/1/2001 @ 22:00 UTC --> 1/1/2001 @ 18:00 -0400 (EST) -->
+ * return:  1/1/2001 @ 18:00 -0700 (PST)
  */
-export function getLocalToUtc(dateObj) {
-  const localDate = moment(dateObj);
-  const format = 'YYYY-MM-DD HH:mm:ss';
-
-  return moment.utc(localDate.format(format), format).toDate();
+export function getLocalToSystem(dateObj) {
+  // This is required because if your system timezone !== user configured timezone
+  // then there will be a mismatch of dates with `react-date-picker`
+  //
+  // We purposely strip the timezone when formatting from the utc timezone
+  return new Date(moment(dateObj).format(DATE_FORMAT_NO_TIMEZONE));
 }
 
 // Get the beginning of day (e.g. midnight)
-export function getStartOfDay(date, {local} = {}) {
-  return getParser(local)(date)
-    .hour(0)
-    .minute(0)
-    .second(0)
+export function getStartOfDay(date) {
+  return moment(date)
+    .startOf('day')
+    .startOf('hour')
+    .startOf('minute')
+    .startOf('second')
+    .local()
     .toDate();
 }
 
 // Get tomorrow at midnight so that default endtime
 // is inclusive of today
-export function getEndOfDay(date, {local} = {}) {
-  return getParser(local)(date)
+export function getEndOfDay(date) {
+  return moment(date)
     .add(1, 'day')
-    .hour(0)
-    .minute(0)
-    .second(0)
+    .startOf('hour')
+    .startOf('minute')
+    .startOf('second')
     .subtract(1, 'second')
+    .local()
     .toDate();
 }
 
 export function getPeriodAgo(period, unit) {
-  return moment().subtract(period, unit);
+  return moment()
+    .local()
+    .subtract(period, unit);
 }
 
 // Get the start of the day (midnight) for a period ago
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index 474549ea24..355fb177cb 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -114,7 +114,7 @@ export default class OrganizationDiscover extends React.Component {
     } else if (search) {
       // This indicates navigation changes (e.g. back button on browser)
       // We need to update our search store and probably runQuery
-      const {projects, range, start, end} = newQuery;
+      const {projects, range, start, end, utc} = newQuery;
       let hasChange = false;
 
       if (projects) {
@@ -127,6 +127,15 @@ export default class OrganizationDiscover extends React.Component {
           period: range || null,
           start: start || null,
           end: end || null,
+          utc: typeof utc !== 'undefined' ? utc : null,
+        });
+
+        // These props come from URL string, so will always be in UTC
+        updateDateTime({
+          start: start && new Date(moment.utc(start).local()),
+          end: end && new Date(moment.utc(end).local()),
+          period: range,
+          utc,
         });
         hasChange = true;
       }
@@ -142,8 +151,9 @@ export default class OrganizationDiscover extends React.Component {
     updateProjects(val);
   };
 
-  getDateTimeFields = ({period, start, end}) => ({
+  getDateTimeFields = ({period, start, end, utc}) => ({
     range: period || null,
+    utc,
     start: (start && getUtcDateString(start)) || null,
     end: (end && getUtcDateString(end)) || null,
   });
@@ -153,16 +163,12 @@ export default class OrganizationDiscover extends React.Component {
   };
 
   updateDateTime = datetime => {
-    const {start, end, range} = this.getDateTimeFields(datetime);
+    const {start, end, range, utc} = this.getDateTimeFields(datetime);
 
-    this.updateFields({start, end, range});
-    updateDateTime({
-      start,
-      end,
-      period: range,
-    });
+    this.updateFields({start, end, range, utc});
   };
 
+  // Called when global selection header changes dates
   updateDateTimeAndRun = datetime => {
     this.updateDateTime(datetime);
     this.runQuery();
@@ -359,10 +365,17 @@ export default class OrganizationDiscover extends React.Component {
     const shouldDisplayResult = resultManager.shouldDisplayResult();
 
     const start =
-      (currentQuery.start && moment.utc(currentQuery.start).toDate()) ||
+      (currentQuery.start &&
+        moment(currentQuery.start)
+          .local()
+          .toDate()) ||
       currentQuery.start;
     const end =
-      (currentQuery.end && moment.utc(currentQuery.end).toDate()) || currentQuery.end;
+      (currentQuery.end &&
+        moment(currentQuery.end)
+          .local()
+          .toDate()) ||
+      currentQuery.end;
 
     return (
       <DiscoverContainer>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
index b3eb82c489..8c29c7e15f 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
@@ -2,13 +2,14 @@ import React from 'react';
 import PropTypes from 'prop-types';
 import {browserHistory} from 'react-router';
 import DocumentTitle from 'react-document-title';
-import SentryTypes from 'app/sentryTypes';
 
+import {getUserTimezone, getUtcToLocalDateObject} from 'app/utils/dates';
 import {t} from 'app/locale';
 import {updateProjects, updateDateTime} from 'app/actionCreators/globalSelection';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
 import Feature from 'app/components/acl/feature';
 import Alert from 'app/components/alert';
+import SentryTypes from 'app/sentryTypes';
 
 import Discover from './discover';
 import createQueryBuilder from './queryBuilder';
@@ -55,16 +56,22 @@ class OrganizationDiscoverContainer extends React.Component {
 
     if (['range', 'start', 'end'].some(key => query.hasOwnProperty(key))) {
       // Update global store with datetime from querystring
+      const timezone = getUserTimezone();
+
+      // start/end will always be in UTC, however we need to coerce into
+      // system time for date picker to be able to synced.
       updateDateTime({
-        start: query.start || null,
-        end: query.end || null,
+        start: (query.start && getUtcToLocalDateObject(query.start)) || null,
+        end: (query.end && getUtcToLocalDateObject(query.end)) || null,
         period: query.range || null,
+        utc: query.utc || timezone === 'UTC',
       });
     } else {
       // Update query with global datetime values
       query.start = props.selection.datetime.start;
       query.end = props.selection.datetime.end;
       query.range = props.selection.datetime.period;
+      query.utc = props.selection.datetime.utc;
     }
 
     this.queryBuilder = createQueryBuilder(query, organization);
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
index 559d6e5665..f58f5f5a23 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
@@ -18,7 +18,7 @@ const VALID_QUERY_KEYS = [
 ];
 
 export function getQueryFromQueryString(queryString) {
-  const queryKeys = new Set(VALID_QUERY_KEYS);
+  const queryKeys = new Set([...VALID_QUERY_KEYS, 'utc']);
   const result = {};
   let parsedQuery = queryString;
   parsedQuery = parsedQuery.replace(/^\?|\/$/g, '').split('&');
diff --git a/tests/js/spec/components/organizations/timeRangeSelector/__snapshots__/dateSummary.spec.jsx.snap b/tests/js/spec/components/organizations/timeRangeSelector/__snapshots__/dateSummary.spec.jsx.snap
index 5c3d141ce9..e8497beba7 100644
--- a/tests/js/spec/components/organizations/timeRangeSelector/__snapshots__/dateSummary.spec.jsx.snap
+++ b/tests/js/spec/components/organizations/timeRangeSelector/__snapshots__/dateSummary.spec.jsx.snap
@@ -22,12 +22,12 @@ exports[`DateSummary renders 1`] = `
             <div
               className="css-1gi0kmy-Date eyxmd2r2"
             >
-              Oct 14, 2017
+              Oct 13, 2017
               <Time>
                 <div
                   className="css-ul1hyh-Time eyxmd2r3"
                 >
-                  02:38
+                  22:38
                 </div>
               </Time>
             </div>
@@ -51,12 +51,12 @@ exports[`DateSummary renders 1`] = `
             <div
               className="css-1gi0kmy-Date eyxmd2r2"
             >
-              Oct 17, 2017
+              Oct 16, 2017
               <Time>
                 <div
                   className="css-ul1hyh-Time eyxmd2r3"
                 >
-                  02:38
+                  22:38
                 </div>
               </Time>
             </div>
diff --git a/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx b/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx
index 6a84949b7b..a922c62515 100644
--- a/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx
+++ b/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx
@@ -138,7 +138,7 @@ describe('DateRange', function() {
 
     it('has the right max date', function() {
       expect(wrapper.find('StyledDateRangePicker').prop('maxDate')).toEqual(
-        new Date('2017-10-17T03:41:20.000Z')
+        new Date('2017-10-16T23:41:20.000Z')
       );
     });
 
@@ -148,10 +148,10 @@ describe('DateRange', function() {
         '.rdrDateRangeWrapper .rdrDateDisplayItem input'
       );
 
-      expect(startEndInputs.at(0).prop('value')).toBe('Oct 14, 2017');
-      expect(startEndInputs.at(1).prop('value')).toBe('Oct 17, 2017');
+      expect(startEndInputs.at(0).prop('value')).toBe('Oct 13, 2017');
+      expect(startEndInputs.at(1).prop('value')).toBe('Oct 16, 2017');
 
-      expect(getSelectedRange(wrapper)).toEqual(['14', '15', '16', '17']);
+      expect(getSelectedRange(wrapper)).toEqual(['13', '14', '15', '16']);
     });
 
     it('can select a date (midnight)', function() {
@@ -162,8 +162,8 @@ describe('DateRange', function() {
 
       //
       expect(onChange).toHaveBeenLastCalledWith({
-        start: new Date('2017-10-01T00:00:00.000Z'),
-        end: new Date('2017-10-01T23:59:59.000Z'),
+        start: new Date('2017-10-01T04:00:00.000Z'),
+        end: new Date('2017-10-02T03:59:59.000Z'),
       });
     });
 
@@ -172,8 +172,9 @@ describe('DateRange', function() {
         .find('input[data-test-id="startTime"]')
         .simulate('change', {target: {value: '11:00'}});
 
+      // Initial start date  is 2017-10-13T22:38:00-0400
       expect(onChange).toHaveBeenLastCalledWith({
-        start: new Date('2017-10-14T11:00:00.000Z'),
+        start: new Date('2017-10-13T15:00:00.000Z'),
         end: new Date('2017-10-17T02:38:00.000Z'),
       });
     });
@@ -183,9 +184,11 @@ describe('DateRange', function() {
         .find('input[data-test-id="endTime"]')
         .simulate('change', {target: {value: '12:00'}});
 
+      // Initial end time is 2017-10-16T22:38:00-0400
+      // Setting this to 12:00 means 2017-10-16T12:00-0400
       expect(onChange).toHaveBeenLastCalledWith({
         start: new Date('2017-10-14T02:38:00.000Z'),
-        end: new Date('2017-10-17T12:00:00.000Z'),
+        end: new Date('2017-10-16T16:00:00.000Z'),
       });
     });
   });
diff --git a/tests/js/spec/components/organizations/timeRangeSelector/dateSummary.spec.jsx b/tests/js/spec/components/organizations/timeRangeSelector/dateSummary.spec.jsx
index 6206dbf8f0..6d19de2f38 100644
--- a/tests/js/spec/components/organizations/timeRangeSelector/dateSummary.spec.jsx
+++ b/tests/js/spec/components/organizations/timeRangeSelector/dateSummary.spec.jsx
@@ -19,9 +19,11 @@ describe('DateSummary', function() {
   });
 
   it('does not show times when it is midnight for start date and 23:59:59 for end date', function() {
+    // Date Summary formats using system time
+    // tests run on EST/EDT
     wrapper = createWrapper({
-      start: new Date('2017-10-14T00:00:00.000Z'),
-      end: new Date('2017-10-17T23:59:59.000Z'),
+      start: new Date('2017-10-14T00:00:00.000-0400'),
+      end: new Date('2017-10-17T23:59:59.000-0400'),
     });
 
     expect(wrapper.find('Time')).toHaveLength(0);
diff --git a/tests/js/spec/components/organizations/timeRangeSelector/index.spec.jsx b/tests/js/spec/components/organizations/timeRangeSelector/index.spec.jsx
index 6f752cb307..7e530b8a7c 100644
--- a/tests/js/spec/components/organizations/timeRangeSelector/index.spec.jsx
+++ b/tests/js/spec/components/organizations/timeRangeSelector/index.spec.jsx
@@ -41,8 +41,8 @@ describe('TimeRangeSelector', function() {
 
     const newProps = {
       relative: null,
-      start: new Date('2017-10-03T02:41:20.000Z'),
-      end: new Date('2017-10-17T02:41:20.000Z'),
+      start: new Date('2017-10-02T22:41:20.000Z'),
+      end: new Date('2017-10-16T22:41:20.000Z'),
       utc: true,
     };
     expect(onChange).toHaveBeenLastCalledWith(newProps);
@@ -61,8 +61,8 @@ describe('TimeRangeSelector', function() {
 
     const newProps = {
       relative: null,
-      start: new Date('2017-10-03T02:41:20.000Z'),
-      end: new Date('2017-10-17T02:41:20.000Z'),
+      start: new Date('2017-10-02T22:41:20.000Z'),
+      end: new Date('2017-10-16T22:41:20.000Z'),
       utc: true,
     };
     expect(onChange).toHaveBeenLastCalledWith(newProps);
@@ -75,6 +75,7 @@ describe('TimeRangeSelector', function() {
   it('switches from relative to absolute while maintaining equivalent date range', async function() {
     wrapper = createWrapper({
       relative: '7d',
+      utc: false,
     });
     await wrapper.find('HeaderItem').simulate('click');
 
@@ -83,7 +84,7 @@ describe('TimeRangeSelector', function() {
       relative: null,
       start: new Date('2017-10-10T02:41:20.000Z'),
       end: new Date('2017-10-17T02:41:20.000Z'),
-      utc: true,
+      utc: false,
     });
 
     wrapper.find('SelectorItem[value="14d"]').simulate('click');
@@ -91,7 +92,7 @@ describe('TimeRangeSelector', function() {
       relative: '14d',
       start: null,
       end: null,
-      utc: true,
+      utc: false,
     });
 
     wrapper.setProps({relative: '14d', start: null, end: null});
@@ -101,7 +102,7 @@ describe('TimeRangeSelector', function() {
       relative: null,
       start: new Date('2017-10-03T02:41:20.000Z'),
       end: new Date('2017-10-17T02:41:20.000Z'),
-      utc: true,
+      utc: false,
     });
   });
 
@@ -115,8 +116,8 @@ describe('TimeRangeSelector', function() {
     wrapper.find('SelectorItem[value="absolute"]').simulate('click');
     expect(onChange).toHaveBeenCalledWith({
       relative: null,
-      start: new Date('2017-10-10T02:41:20.000Z'),
-      end: new Date('2017-10-17T02:41:20.000Z'),
+      start: new Date('2017-10-09T22:41:20.000Z'),
+      end: new Date('2017-10-16T22:41:20.000Z'),
       utc: true,
     });
 
@@ -133,32 +134,33 @@ describe('TimeRangeSelector', function() {
     wrapper.find('SelectorItem[value="absolute"]').simulate('click');
     expect(onChange).toHaveBeenLastCalledWith({
       relative: null,
-      start: new Date('2017-10-03T02:41:20.000Z'),
-      end: new Date('2017-10-17T02:41:20.000Z'),
+      start: new Date('2017-10-02T22:41:20.000Z'),
+      end: new Date('2017-10-16T22:41:20.000Z'),
       utc: true,
     });
   });
 
-  it('switches from relative to absolute and then toggling UTC', async function() {
+  it('switches from relative to absolute and then toggling UTC (starting with UTC)', async function() {
     wrapper = createWrapper({
       relative: '7d',
       utc: true,
     });
     await wrapper.find('HeaderItem').simulate('click');
 
+    // Local time is 22:41:20-0500 -- this is what date picker should show
     wrapper.find('SelectorItem[value="absolute"]').simulate('click');
     expect(onChange).toHaveBeenCalledWith({
       relative: null,
-      start: new Date('2017-10-10T02:41:20.000Z'),
-      end: new Date('2017-10-17T02:41:20.000Z'),
+      start: new Date('2017-10-09T22:41:20.000Z'),
+      end: new Date('2017-10-16T22:41:20.000Z'),
       utc: true,
     });
 
     wrapper.find('UtcPicker Checkbox').simulate('change');
     expect(onChange).toHaveBeenLastCalledWith({
       relative: null,
-      start: new Date('2017-10-10T06:41:20.000Z'),
-      end: new Date('2017-10-17T06:41:20.000Z'),
+      start: new Date('2017-10-09T22:41:20.000Z'),
+      end: new Date('2017-10-16T22:41:20.000Z'),
       utc: false,
     });
 
@@ -171,7 +173,42 @@ describe('TimeRangeSelector', function() {
     });
   });
 
+  it('switches from relative to absolute and then toggling UTC (starting with non-UTC)', async function() {
+    wrapper = createWrapper({
+      relative: '7d',
+      utc: false,
+    });
+    await wrapper.find('HeaderItem').simulate('click');
+
+    wrapper.find('SelectorItem[value="absolute"]').simulate('click');
+    expect(onChange).toHaveBeenCalledWith({
+      relative: null,
+      start: new Date('2017-10-09T22:41:20.000-0400'),
+      end: new Date('2017-10-16T22:41:20.000-0400'),
+      utc: false,
+    });
+
+    wrapper.find('UtcPicker Checkbox').simulate('change');
+    expect(onChange).toHaveBeenLastCalledWith({
+      relative: null,
+      start: new Date('2017-10-10T02:41:20.000Z'),
+      end: new Date('2017-10-17T02:41:20.000Z'),
+      utc: true,
+    });
+
+    wrapper.find('UtcPicker Checkbox').simulate('change');
+    expect(onChange).toHaveBeenLastCalledWith({
+      relative: null,
+      start: new Date('2017-10-09T22:41:20.000Z'),
+      end: new Date('2017-10-16T22:41:20.000Z'),
+      utc: false,
+    });
+  });
+
   it('maintains time when switching UTC to local time', async function() {
+    // Times should never change when changing UTC option
+    // Instead, the utc flagged is used when querying to create proper date
+
     let state;
     wrapper = createWrapper({
       relative: null,
@@ -185,8 +222,8 @@ describe('TimeRangeSelector', function() {
     wrapper.find('UtcPicker Checkbox').simulate('change');
     state = {
       relative: null,
-      start: new Date('2017-10-10T04:00:00.000Z'),
-      end: new Date('2017-10-18T03:59:59.000Z'),
+      start: new Date('2017-10-10T00:00:00.000Z'),
+      end: new Date('2017-10-17T23:59:59.000Z'),
       utc: false,
     };
     expect(onChange).toHaveBeenLastCalledWith(state);
@@ -207,8 +244,8 @@ describe('TimeRangeSelector', function() {
     wrapper.find('UtcPicker Checkbox').simulate('change');
     expect(onChange).toHaveBeenLastCalledWith({
       relative: null,
-      start: new Date('2017-10-10T04:00:00.000Z'),
-      end: new Date('2017-10-18T03:59:59.000Z'),
+      start: new Date('2017-10-10T00:00:00.000Z'),
+      end: new Date('2017-10-17T23:59:59.000Z'),
       utc: false,
     });
   });
diff --git a/tests/js/spec/utils/dates.spec.jsx b/tests/js/spec/utils/dates.spec.jsx
index 1c3961bea1..a644fe7335 100644
--- a/tests/js/spec/utils/dates.spec.jsx
+++ b/tests/js/spec/utils/dates.spec.jsx
@@ -13,5 +13,11 @@ describe('utils.dates', function() {
       const newDate = setDateToTime(date, '11:11:11');
       expect(newDate).toEqual(new Date(1508238671000));
     });
+
+    it('can set new time in local for current date', function() {
+      const date = new Date();
+      const newDate = setDateToTime(date, '11:11:11', {local: true});
+      expect(newDate).toEqual(new Date(1508166671000));
+    });
   });
 });
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
index d9b43e0cc0..e82d9bafb9 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
@@ -594,6 +594,16 @@ describe('Discover', function() {
     let query;
 
     beforeEach(function() {
+      const config = ConfigStore.getConfig();
+      ConfigStore.loadInitialData({
+        ...config,
+        user: {
+          ...config.user,
+          options: {...config.user.options, timezone: 'America/New_York'},
+        },
+      });
+      GlobalSelectionStore.reset();
+
       query = MockApiClient.addMockResponse({
         url: '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:0:1',
         method: 'POST',
@@ -636,22 +646,19 @@ describe('Discover', function() {
       await tick();
 
       // Should make request for the last 14 days as an absolute date range
+      // Current time in EST is '2017-10-16T22:41:20'
       expect(query).toHaveBeenLastCalledWith(
         expect.anything(),
         expect.objectContaining({
           data: expect.objectContaining({
-            start: '2017-10-03T02:41:20',
-            end: '2017-10-17T02:41:20',
+            start: '2017-10-02T22:41:20',
+            end: '2017-10-16T22:41:20',
           }),
         })
       );
     });
 
     it('switches between UTC and local dates', async function() {
-      ConfigStore.loadInitialData({
-        user: {options: {timezone: 'America/New_York'}},
-      });
-
       // Select absolute date
       wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
       wrapper.find('SelectorItem[value="absolute"]').simulate('click');
@@ -668,7 +675,7 @@ describe('Discover', function() {
       await tick();
       wrapper.update();
 
-      // Should make request for the last 14 days as an absolute date range
+      // Should make request for the last day an absolute date range
       expect(query).toHaveBeenLastCalledWith(
         expect.anything(),
         expect.objectContaining({
diff --git a/tests/js/spec/views/organizationEvents/events.spec.jsx b/tests/js/spec/views/organizationEvents/events.spec.jsx
index d80f1afa3e..b2c56b9a2e 100644
--- a/tests/js/spec/views/organizationEvents/events.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/events.spec.jsx
@@ -4,7 +4,7 @@ import React from 'react';
 import OrganizationEvents, {parseRowFromLinks} from 'app/views/organizationEvents/events';
 import {chart, doZoom} from 'app-test/helpers/charts';
 import {initializeOrg} from 'app-test/helpers/initializeOrg';
-import {getLocalDateObject} from 'app/utils/dates';
+import {getUtcToLocalDateObject} from 'app/utils/dates';
 import {mockRouterPush} from 'app-test/helpers/mockRouterPush';
 import {mount} from 'enzyme';
 import OrganizationEventsContainer from 'app/views/organizationEvents';
@@ -259,10 +259,10 @@ describe('OrganizationEventsErrors', function() {
       wrapper.update();
 
       expect(wrapper.find('TimeRangeSelector').prop('start')).toEqual(
-        getLocalDateObject('2018-11-29T00:00:00')
+        getUtcToLocalDateObject('2018-11-29T00:00:00')
       );
       expect(wrapper.find('TimeRangeSelector').prop('end')).toEqual(
-        getLocalDateObject('2018-12-02T00:00:00')
+        getUtcToLocalDateObject('2018-12-02T00:00:00')
       );
     });
   });
diff --git a/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx b/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx
index 7e06accbbb..8446a9eaa7 100644
--- a/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx
@@ -2,7 +2,7 @@ import React from 'react';
 
 import {EventsChart} from 'app/views/organizationEvents/eventsChart';
 import {chart, doZoom, mockZoomRange} from 'app-test/helpers/charts';
-import {getLocalDateObject} from 'app/utils/dates';
+import {getUtcToLocalDateObject} from 'app/utils/dates';
 import {initializeOrg} from 'app-test/helpers/initializeOrg';
 import {mount} from 'enzyme';
 import {updateParams} from 'app/actionCreators/globalSelection';
@@ -106,8 +106,8 @@ describe('EventsChart', function() {
     expect(updateParams).toHaveBeenCalledWith(newParams, router);
     wrapper.setProps({
       period: newParams.period,
-      start: getLocalDateObject(newParams.start),
-      end: getLocalDateObject(newParams.end),
+      start: getUtcToLocalDateObject(newParams.start),
+      end: getUtcToLocalDateObject(newParams.end),
     });
     wrapper.update();
   });
diff --git a/tests/js/spec/views/organizationEvents/index.spec.jsx b/tests/js/spec/views/organizationEvents/index.spec.jsx
index 93b87527b0..a5baa03b11 100644
--- a/tests/js/spec/views/organizationEvents/index.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/index.spec.jsx
@@ -273,19 +273,22 @@ describe('OrganizationEvents', function() {
       await tick();
       wrapper.update();
 
+      // The current date in local timezone is 2017-10-16T22:41:20-04:00
+      // we take the local date and subtract 14d
+      // If "UTC" override is true then we strip timezone and use that date for the range
       expect(router.push).toHaveBeenCalledWith({
         pathname: '/organizations/org-slug/events/',
         query: {
-          end: '2017-10-17T02:41:20',
-          start: '2017-10-03T02:41:20',
+          end: '2017-10-16T22:41:20',
+          start: '2017-10-02T22:41:20',
           utc: 'true',
         },
       });
 
       expect(wrapper.find('TimeRangeSelector').props()).toEqual(
         expect.objectContaining({
-          end: new Date('2017-10-17T02:41:20.000Z'),
-          start: new Date('2017-10-03T02:41:20.000Z'),
+          end: new Date('2017-10-16T22:41:20.000Z'),
+          start: new Date('2017-10-02T22:41:20.000Z'),
           utc: true,
         })
       );
