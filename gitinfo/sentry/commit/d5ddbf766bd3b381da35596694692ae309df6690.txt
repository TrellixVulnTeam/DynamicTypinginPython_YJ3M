commit d5ddbf766bd3b381da35596694692ae309df6690
Author: Katie Byers <katie.byers@sentry.io>
Date:   Mon Nov 18 06:37:50 2019 -0800

    fix(gitlab): Turn off repo renaming for GitLab (for the moment) (#15276)
    
    The keep-repo-data-up-to-date-via-webhooks code for GitLab introduced in https://github.com/getsentry/sentry/pull/12290 works for repos whose names are of the form `one / two`, but turns out _not_ to work for repos whose names contain more than two levels. Specifically, repos named `one / two / three` are being flagged as having been renamed on the GitLab side (and therefore needing to be renamed in our database) because we're testing against `two / three` rather than the full `one / two / three`, and this is causing repos to get renamed in error.
    
    It's not obvious (nor covered in the GitLab docs) how to reconstruct the full name of tri-level repos from the data given in the webhook payloads we examine, so fixing this is going to take some research and experimentation. In the meantime, this PR disables the renaming code for GitLab, so the number of accidentally-renamed repos doesn't keep increasing.

diff --git a/src/sentry/integrations/gitlab/webhooks.py b/src/sentry/integrations/gitlab/webhooks.py
index 126d7c676a..adfda443f7 100644
--- a/src/sentry/integrations/gitlab/webhooks.py
+++ b/src/sentry/integrations/gitlab/webhooks.py
@@ -51,6 +51,12 @@ class Webhook(object):
 
     def update_repo_data(self, repo, event):
         """
+        # TODO(kmclb): the name w namespace bit is currently causing false positives
+        # for people with three or more levels in their repo names. Need to research
+        # exactly how gitlab handles these cases (what's the name, what's the namespace,
+        # does the url reliably have the info we need?) and then fix this for those
+        # cases.
+
         Given a webhook payload, update stored repo data if needed.
 
         Assumes a 'project' key in event payload, with certain subkeys. Rework
@@ -87,8 +93,9 @@ class MergeEventWebhook(Webhook):
         if repo is None:
             return
 
+        # TODO(kmclb): turn this back on once tri-level repo problem has been solved
         # while we're here, make sure repo data is up to date
-        self.update_repo_data(repo, event)
+        # self.update_repo_data(repo, event)
 
         try:
             number = event["object_attributes"]["iid"]
@@ -145,8 +152,9 @@ class PushEventWebhook(Webhook):
         if repo is None:
             return
 
+        # TODO(kmclb): turn this back on once tri-level repo problem has been solved
         # while we're here, make sure repo data is up to date
-        self.update_repo_data(repo, event)
+        # self.update_repo_data(repo, event)
 
         authors = {}
 
diff --git a/tests/sentry/integrations/gitlab/test_webhook.py b/tests/sentry/integrations/gitlab/test_webhook.py
index b6425a8f36..3a95e26e79 100644
--- a/tests/sentry/integrations/gitlab/test_webhook.py
+++ b/tests/sentry/integrations/gitlab/test_webhook.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import pytest
+
 from sentry.models import Commit, CommitAuthor, PullRequest, GroupLink
 from sentry.utils import json
 from .testutils import (
@@ -273,6 +275,9 @@ class WebhookTest(GitLabTestCase):
         self.assert_pull_request(pull, author)
         self.assert_group_link(group, pull)
 
+    # TODO(kmclb): update the first test, add others back in once repo updating
+    # is fixed
+    @pytest.mark.xfail(reason="renaming breaks tri-level repos")
     def test_update_repo_name(self):
         repo_out_of_date_name = self.create_repo(
             name="Uncool Group / Sentry",  # name out of date
@@ -296,6 +301,7 @@ class WebhookTest(GitLabTestCase):
         repo_out_of_date_name.refresh_from_db()
         assert repo_out_of_date_name.name == "Cool Group / Sentry"
 
+    @pytest.mark.xfail(reason="renaming breaks tri-level repos")
     def test_update_repo_path(self):
         repo_out_of_date_path = self.create_repo(
             name="Cool Group / Sentry", url="http://example.com/cool-group/sentry"
@@ -320,6 +326,7 @@ class WebhookTest(GitLabTestCase):
         repo_out_of_date_path.refresh_from_db()
         assert repo_out_of_date_path.config["path"] == "cool-group/sentry"
 
+    @pytest.mark.xfail(reason="renaming breaks tri-level repos")
     def test_update_repo_url(self):
         repo_out_of_date_url = self.create_repo(
             name="Cool Group / Sentry",
