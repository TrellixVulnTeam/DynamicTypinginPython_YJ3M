commit b52b51a7399e18e95324e02901aa37436fda8fc3
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Apr 9 14:27:20 2019 -0700

    feat(saved-search): Implement saving current search (#12584)
    
    Ref: SEN-396

diff --git a/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx b/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
index 077fb44a6f..b64322e8c6 100644
--- a/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
@@ -1,4 +1,4 @@
-import {MAX_RECENT_SEARCHES} from 'app/constants';
+import {MAX_RECENT_SEARCHES, SEARCH_TYPES} from 'app/constants';
 import handleXhrErrorResponse from 'app/utils/handleXhrErrorResponse';
 
 export function fetchSavedSearches(api, orgId, useOrgSavedSearches = false) {
@@ -47,6 +47,28 @@ export function saveRecentSearch(api, orgId, type, query) {
   return promise;
 }
 
+/**
+ * Creates a saved search
+ *
+ * @param {Object} api API client
+ * @param {String} orgId Organization slug
+ * @param {String} name Saved search name
+ * @param {String} query Query to save
+ *
+ * @returns {Promise<Object>}
+ */
+
+export function createSavedSearch(api, orgId, name, query) {
+  return api.requestPromise(`/organizations/${orgId}/searches/`, {
+    method: 'POST',
+    data: {
+      type: SEARCH_TYPES.ISSUE,
+      query,
+      name,
+    },
+  });
+}
+
 /**
  * Fetches a list of recent search terms conducted by `user` for `orgId`
  *
diff --git a/src/sentry/static/sentry/app/constants/index.jsx b/src/sentry/static/sentry/app/constants/index.jsx
index 185cad5a83..506b4202eb 100644
--- a/src/sentry/static/sentry/app/constants/index.jsx
+++ b/src/sentry/static/sentry/app/constants/index.jsx
@@ -148,7 +148,7 @@ export const ALGOLIA_READ_ONLY = '2d64ec1106519cbc672d863b0d200782';
 export const ALGOLIA_DOCS_INDEX = 'sentry-docs';
 export const ALGOLIA_ZENDESK_INDEX = 'zendesk_sentry_articles';
 
-export const RECENT_SEARCH_TYPES = {
+export const SEARCH_TYPES = {
   ISSUE: 0,
   EVENT: 1,
 };
diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/stream/filters.jsx
index 6dee5e89fb..552625a505 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filters.jsx
@@ -104,6 +104,7 @@ class StreamFilters extends React.Component {
             <OrganizationSavedSearchSelector
               organization={organization}
               savedSearchList={savedSearchList}
+              onSavedSearchCreate={onSavedSearchCreate}
               onSavedSearchSelect={onSavedSearchSelect}
               onSavedSearchDelete={onSavedSearchDelete}
               query={query}
diff --git a/src/sentry/static/sentry/app/views/stream/organizationSavedSearchSelector.jsx b/src/sentry/static/sentry/app/views/stream/organizationSavedSearchSelector.jsx
index 8335ec1816..79f71e6829 100644
--- a/src/sentry/static/sentry/app/views/stream/organizationSavedSearchSelector.jsx
+++ b/src/sentry/static/sentry/app/views/stream/organizationSavedSearchSelector.jsx
@@ -14,11 +14,14 @@ import SentryTypes from 'app/sentryTypes';
 import {TextField} from 'app/components/forms';
 import space from 'app/styles/space';
 import withApi from 'app/utils/withApi';
+import {addLoadingMessage, clearIndicators} from 'app/actionCreators/indicator';
+import {createSavedSearch} from 'app/actionCreators/savedSearches';
 
 export default class OrganizationSavedSearchSelector extends React.Component {
   static propTypes = {
     organization: SentryTypes.Organization.isRequired,
     savedSearchList: PropTypes.array.isRequired,
+    onSavedSearchCreate: PropTypes.func.isRequired,
     onSavedSearchSelect: PropTypes.func.isRequired,
     onSavedSearchDelete: PropTypes.func.isRequired,
     query: PropTypes.string.isRequired,
@@ -79,7 +82,7 @@ export default class OrganizationSavedSearchSelector extends React.Component {
   }
 
   render() {
-    const {organization, query} = this.props;
+    const {organization, query, onSavedSearchCreate} = this.props;
 
     return (
       <Container>
@@ -93,7 +96,11 @@ export default class OrganizationSavedSearchSelector extends React.Component {
             >
               <StyledMenuItem divider={true} />
               <ButtonBar>
-                <SaveSearchButton query={query} organization={organization} />
+                <SaveSearchButton
+                  query={query}
+                  organization={organization}
+                  onSave={onSavedSearchCreate}
+                />
               </ButtonBar>
             </Access>
           </DropdownLink>
@@ -106,9 +113,10 @@ export default class OrganizationSavedSearchSelector extends React.Component {
 const SaveSearchButton = withApi(
   class SaveSearchButton extends React.Component {
     static propTypes = {
-      // api: PropTypes.object.isRequired,
+      api: PropTypes.object.isRequired,
       query: PropTypes.string.isRequired,
-      // organization: SentryTypes.Organization.isRequired,
+      organization: SentryTypes.Organization.isRequired,
+      onSave: PropTypes.func.isRequired,
     };
 
     constructor(props) {
@@ -118,13 +126,40 @@ const SaveSearchButton = withApi(
         isSaving: false,
         query: props.query,
         name: '',
+        error: null,
       };
     }
 
     onSubmit = e => {
+      const {api, organization, onSave} = this.props;
+
       e.preventDefault();
 
-      // TODO: implement saving
+      this.setState({isSaving: true});
+
+      addLoadingMessage(t('Saving Changes'));
+
+      createSavedSearch(api, organization.slug, this.state.name, this.state.query)
+        .then(data => {
+          onSave(data);
+          this.onToggle();
+          this.setState({
+            error: null,
+            isSaving: false,
+          });
+          clearIndicators();
+        })
+        .catch(err => {
+          let error = t('Unable to save your changes.');
+          if (err.responseJSON && err.responseJSON.detail) {
+            error = err.responseJSON.detail;
+          }
+          this.setState({
+            error,
+            isSaving: false,
+          });
+          clearIndicators();
+        });
     };
 
     onToggle = () => {
@@ -146,7 +181,11 @@ const SaveSearchButton = withApi(
 
       return (
         <React.Fragment>
-          <Button size="xsmall" onClick={this.onToggle}>
+          <Button
+            size="xsmall"
+            onClick={this.onToggle}
+            data-test-id="save-current-search"
+          >
             {t('Save Current Search')}
           </Button>
           <Modal show={isModalOpen} animation={false} onHide={this.onToggle}>
@@ -156,6 +195,10 @@ const SaveSearchButton = withApi(
               </div>
 
               <div className="modal-body">
+                {this.state.error && (
+                  <div className="alert alert-error alert-block">{this.state.error}</div>
+                )}
+
                 <p>{t('All team members will now have access to this search.')}</p>
                 <TextField
                   key="name"
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index 1d16f2581e..03a57caaef 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -1,7 +1,7 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
-import {RECENT_SEARCH_TYPES} from 'app/constants';
+import {SEARCH_TYPES} from 'app/constants';
 import {fetchRecentSearches} from 'app/actionCreators/savedSearches';
 import {t} from 'app/locale';
 import SentryTypes from 'app/sentryTypes';
@@ -125,12 +125,7 @@ class SearchBar extends React.Component {
 
   getRecentSearches = async fullQuery => {
     const {api, orgId} = this.props;
-    const recent = await fetchRecentSearches(
-      api,
-      orgId,
-      RECENT_SEARCH_TYPES.ISSUE,
-      fullQuery
-    );
+    const recent = await fetchRecentSearches(api, orgId, SEARCH_TYPES.ISSUE, fullQuery);
     return (recent && recent.map(({query}) => query)) || [];
   };
 
@@ -155,7 +150,7 @@ class SearchBar extends React.Component {
         onGetTagValues={this.getTagValues}
         defaultSearchItems={this.state.defaultSearchItems}
         maxSearchItems={5}
-        recentSearchType={RECENT_SEARCH_TYPES.ISSUE}
+        recentSearchType={SEARCH_TYPES.ISSUE}
         displayRecentSearches={this.hasRecentSearches()}
         onSavedRecentSearch={this.handleSavedRecentSearch}
         {...props}
diff --git a/tests/js/spec/views/stream/organizationSavedSearchSelector.spec.jsx b/tests/js/spec/views/stream/organizationSavedSearchSelector.spec.jsx
index 3d8867b530..86cbd5b992 100644
--- a/tests/js/spec/views/stream/organizationSavedSearchSelector.spec.jsx
+++ b/tests/js/spec/views/stream/organizationSavedSearchSelector.spec.jsx
@@ -4,11 +4,12 @@ import {mount} from 'enzyme';
 import OrganizationSavedSearchSelector from 'app/views/stream/organizationSavedSearchSelector';
 
 describe('OrganizationSavedSearchSelector', function() {
-  let wrapper, onSelect, onDelete, organization, savedSearchList;
+  let wrapper, onCreate, onSelect, onDelete, organization, savedSearchList, createMock;
   beforeEach(function() {
     organization = TestStubs.Organization({access: ['org:write']});
     onSelect = jest.fn();
     onDelete = jest.fn();
+    onCreate = jest.fn();
     savedSearchList = [
       {
         id: '789',
@@ -29,12 +30,23 @@ describe('OrganizationSavedSearchSelector', function() {
       <OrganizationSavedSearchSelector
         organization={organization}
         savedSearchList={savedSearchList}
+        onSavedSearchCreate={onCreate}
         onSavedSearchSelect={onSelect}
         onSavedSearchDelete={onDelete}
         query={'is:unresolved assigned:lyn@sentry.io'}
       />,
       TestStubs.routerContext()
     );
+
+    createMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/searches/',
+      method: 'POST',
+      body: {id: '1', name: 'test', query: 'is:unresolved assigned:lyn@sentry.io'},
+    });
+  });
+
+  afterEach(function() {
+    MockApiClient.clearMockResponses();
   });
 
   describe('getTitle()', function() {
@@ -126,12 +138,22 @@ describe('OrganizationSavedSearchSelector', function() {
     it('clicking save search opens modal', function() {
       wrapper.find('DropdownLink').simulate('click');
       expect(wrapper.find('ModalDialog')).toHaveLength(0);
+      wrapper.find('Button[data-test-id="save-current-search"]').simulate('click');
+      expect(wrapper.find('ModalDialog')).toHaveLength(1);
+    });
+
+    it('saves a search', async function() {
+      wrapper.find('DropdownLink').simulate('click');
+      wrapper.find('Button[data-test-id="save-current-search"]').simulate('click');
+      wrapper.find('#id-name').simulate('change', {target: {value: 'test'}});
       wrapper
-        .find('button')
-        .at(0)
-        .simulate('click');
+        .find('ModalDialog')
+        .find('Button[priority="primary"]')
+        .simulate('submit');
 
-      expect(wrapper.find('ModalDialog')).toHaveLength(1);
+      await tick();
+      expect(createMock).toHaveBeenCalled();
+      expect(onCreate).toHaveBeenCalled();
     });
 
     it('hides save search button if no access', function() {
