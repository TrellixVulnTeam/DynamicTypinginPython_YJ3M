commit d1342cb84fdc79a7da15388b86306416b7c9a90f
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Mar 24 17:30:54 2016 -0700

    Replace django devserver with our own
    
    This does a few things:
    * Uses uwsgi as our devserver with autoreloading capabilities retained
    * Added ability to also spawn celery workers with --workers

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index ffb0cf110d..b62d3525df 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -48,6 +48,8 @@ if 'site-packages' in __file__:
 else:
     NODE_MODULES_ROOT = os.path.join(PROJECT_ROOT, os.pardir, os.pardir, 'node_modules')
 
+NODE_MODULES_ROOT = os.path.normpath(NODE_MODULES_ROOT)
+
 sys.path.insert(0, os.path.normpath(os.path.join(PROJECT_ROOT, os.pardir)))
 
 DATABASES = {
@@ -928,7 +930,7 @@ SENTRY_API_RESPONSE_DELAY = 0
 # webpack.config.js is not part of Sentry's datafiles
 SENTRY_WATCHERS = (
     [os.path.join(NODE_MODULES_ROOT, '.bin', 'webpack'), '-d', '--watch',
-     "--config={}".format(os.path.join(PROJECT_ROOT, os.pardir, os.pardir, "webpack.config.js"))],
+     "--config={}".format(os.path.normpath(os.path.join(PROJECT_ROOT, os.pardir, os.pardir, "webpack.config.js")))],
 )
 
 # statuspage.io support
diff --git a/src/sentry/management/commands/runserver.py b/src/sentry/management/commands/runserver.py
deleted file mode 100644
index 0558d59ec4..0000000000
--- a/src/sentry/management/commands/runserver.py
+++ /dev/null
@@ -1,87 +0,0 @@
-from __future__ import absolute_import
-
-import os
-import os.path
-import sys
-
-from django.conf import settings
-from django.core.management.base import CommandError
-from django.core.management.color import color_style
-from django.core.management.commands.runserver import Command as RunserverCommand
-from optparse import make_option
-from subprocess import Popen
-
-
-class Command(RunserverCommand):
-    """
-    A version of Django's runserver which bundles Sentry's development
-    tooling (such as static assets).
-    """
-    help = "Starts a lightweight Web server for development"
-
-    option_list = RunserverCommand.option_list + (
-        make_option(
-            '--no-watchers', action='store_false', dest='use_watcher',
-            default=True,
-            help='Tells Sentry to NOT automatically recompile static distributions.'),
-        make_option(
-            '--watchers', action='store_true', dest='use_watcher',
-            default=True,
-            help='Tells Sentry to NOT automatically recompile static distributions.'),
-    )
-
-    cwd = os.path.realpath(os.path.join(settings.PROJECT_ROOT, os.pardir, os.pardir))
-
-    def get_env(self):
-        from sentry.app import env
-        result = os.environ.copy()
-        result.update({
-            'SENTRY_CONF': env.data['config'],
-        })
-        return result
-
-    def get_watchers(self):
-        return settings.SENTRY_WATCHERS
-
-    def run_watchers(self, verbosity, **options):
-        if self.verbosity:
-            stdout = None
-        else:
-            stdout = open('/dev/null', 'w')
-
-        env = self.get_env()
-        result = []
-        for watcher in self.get_watchers():
-            if self.verbosity:
-                self.stdout.write(self.style.HTTP_INFO('>> Running {0}'.format(watcher)))
-            try:
-                result.append(Popen(watcher, cwd=self.cwd, stdout=stdout, env=env))
-            except OSError:
-                raise CommandError('{0} not found.'.format(watcher[0]))
-        return result
-
-    def run_server(self, verbosity, **options):
-        if self.verbosity:
-            self.stdout.write(self.style.HTTP_INFO('>> Launching webserver..'))
-        return Popen(sys.argv + ['--no-watchers'], cwd=self.cwd,
-                     env=self.get_env())
-
-    def run(self, *args, **options):
-        self.style = color_style()
-        self.verbosity = int(options['verbosity'])
-
-        if options['use_watcher']:
-            watcher_list = []
-            server = None
-            try:
-                watcher_list = self.run_watchers(**options)
-                server = self.run_server(**options)
-                server.wait()
-            finally:
-                if server and server.poll() is None:
-                    server.kill()
-                for watcher in watcher_list:
-                    if watcher.poll() is None:
-                        watcher.kill()
-        else:
-            super(Command, self).run(*args, **options)
diff --git a/src/sentry/runner/__init__.py b/src/sentry/runner/__init__.py
index 5dbf96beaf..bce00b6bce 100755
--- a/src/sentry/runner/__init__.py
+++ b/src/sentry/runner/__init__.py
@@ -49,6 +49,7 @@ map(lambda cmd: cli.add_command(import_string(cmd)), (
     'sentry.runner.commands.cleanup.cleanup',
     'sentry.runner.commands.config.config',
     'sentry.runner.commands.createuser.createuser',
+    'sentry.runner.commands.devserver.devserver',
     'sentry.runner.commands.django.django',
     'sentry.runner.commands.backup.export',
     'sentry.runner.commands.help.help',
@@ -85,7 +86,6 @@ def make_django_command(name, django_command=None, help=None):
 
 
 map(cli.add_command, (
-    make_django_command('devserver', 'runserver', help='Start a light Web server for development.'),
     make_django_command('shell', help='Run a Python interactive interpreter.'),
     make_django_command('celery', help='Start background workers.'),
 ))
diff --git a/src/sentry/runner/commands/devserver.py b/src/sentry/runner/commands/devserver.py
new file mode 100644
index 0000000000..d37ab5a51f
--- /dev/null
+++ b/src/sentry/runner/commands/devserver.py
@@ -0,0 +1,87 @@
+"""
+sentry.runner.commands.devserver
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2016 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import, print_function
+
+import click
+from sentry.runner.decorators import configuration
+
+
+@click.command()
+@click.option('--reload/--no-reload', default=True, help='Autoreloading of python files.')
+@click.option('--watchers/--no-watchers', default=True, help='Watch static files and recompile on changes.')
+@click.option('--workers/--no-workers', default=False, help='Run asynchronous workers.')
+@click.argument('bind', default='127.0.0.1:8000', metavar='ADDRESS')
+@configuration
+@click.pass_context
+def devserver(ctx, reload, watchers, workers, bind):
+    "Starts a lightweight web server for development."
+    if ':' in bind:
+        host, port = bind.split(':', 1)
+        port = int(port)
+    else:
+        host = bind
+        port = None
+
+    from django.conf import settings
+    from sentry.services.http import SentryHTTPServer
+
+    # A better log-format for local dev
+    settings.SENTRY_WEB_OPTIONS['log-format'] = '[%(ltime)] "%(method) %(uri) %(proto)" %(status) %(size) "%(referer)" "%(uagent)"'
+
+    if reload:
+        settings.SENTRY_WEB_OPTIONS['py-autoreload'] = 1
+
+    daemons = []
+
+    if watchers:
+        daemons += settings.SENTRY_WATCHERS
+
+    if workers:
+        if settings.CELERY_ALWAYS_EAGER:
+            raise click.ClickException('Disable CELERY_ALWAYS_EAGER in your settings file to spawn workers.')
+
+        daemons += [
+            ['sentry', 'celery', 'worker', '-l', 'INFO'],
+            ['sentry', 'celery', 'beat', '-l', 'INFO'],
+        ]
+
+    daemon_list = []
+    server = None
+    try:
+        if daemons:
+            import os
+            from subprocess import Popen
+            env = os.environ.copy()
+            for daemon in daemons:
+                click.secho('*** Running: {0}'.format(' '.join([os.path.basename(daemon[0])] + daemon[1:])), bold=True)
+                try:
+                    daemon_list.append(Popen(daemon, env=env))
+                except OSError:
+                    raise click.ClickException('{0} not found.'.format(daemon[0]))
+
+        click.secho('*** Launching webserver..', bold=True)
+        server = SentryHTTPServer(
+            host=host,
+            port=port,
+            workers=1,
+        ).run_subprocess()
+        server.wait()
+    finally:
+        if server and server.poll() is None:
+            server.terminate()
+
+            if server.poll() is None:
+                server.kill()
+
+        for daemon in daemon_list:
+            if daemon.poll() is None:
+                daemon.terminate()
+
+        for daemon in daemon_list:
+            if daemon.poll() is None:
+                daemon.wait()
diff --git a/src/sentry/services/http.py b/src/sentry/services/http.py
index a90d9ed6e2..355bf377a2 100644
--- a/src/sentry/services/http.py
+++ b/src/sentry/services/http.py
@@ -116,7 +116,7 @@ class SentryHTTPServer(Service):
 
         validate_settings(django_settings)
 
-    def run(self):
+    def prepare_environment(self):
         # Move all of the options into UWSGI_ env vars
         for k, v in convert_options_to_env(self.options):
             os.environ.setdefault(k, v)
@@ -134,4 +134,13 @@ class SentryHTTPServer(Service):
         if virtualenv_path not in current_path:
             os.environ['PATH'] = '%s:%s' % (virtualenv_path, current_path)
 
+    def run(self):
+        self.prepare_environment()
         os.execvp('uwsgi', ('uwsgi',))
+
+    def run_subprocess(self):
+        from subprocess import Popen
+        from django.conf import settings
+        self.prepare_environment()
+        cwd = os.path.realpath(os.path.join(settings.PROJECT_ROOT, os.pardir, os.pardir))
+        return Popen(['uwsgi'], cwd=cwd, env=os.environ.copy())
