commit afc3769a29584c114cbb92ff95cc04b2ec1c3771
Author: Ayesha Omarali <ayesha.omarali@gmail.com>
Date:   Wed Oct 31 16:09:06 2018 -0700

    feat(discover): Display Number of Results Shown Per Page (#10283)

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
index c9201cd26c..1590bfece5 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
@@ -11,7 +11,7 @@ import LineChart from 'app/components/charts/lineChart';
 import space from 'app/styles/space';
 import InlineSvg from 'app/components/inlineSvg';
 
-import {getChartData, getChartDataByDay, downloadAsCsv} from './utils';
+import {getChartData, getChartDataByDay, downloadAsCsv, getRowsPageRange} from './utils';
 import Table from './table';
 import Pagination from './pagination';
 import {
@@ -22,6 +22,7 @@ import {
   ChartWrapper,
   ChartNote,
   SavedQueryAction,
+  ResultSummaryAndButtons,
 } from '../styles';
 import {NUMBER_OF_SERIES_BY_DAY} from '../data';
 
@@ -115,11 +116,11 @@ export default class Result extends React.Component {
       ? baseQuery.data
       : byDayQuery.data;
 
-    return (
-      <ResultSummary>
-        query time: {summaryData.timing.duration_ms} ms, {summaryData.data.length} rows
-      </ResultSummary>
-    );
+    const summary = [`query time: ${summaryData.timing.duration_ms} ms`];
+    if (this.state.view === 'table') {
+      summary.push(getRowsPageRange(baseQuery));
+    }
+    return <ResultSummary>{summary.join(', ')}</ResultSummary>;
   }
 
   renderNote() {
@@ -176,21 +177,11 @@ export default class Result extends React.Component {
         </Flex>
         <ResultInnerContainer innerRef={ref => (this.container = ref)}>
           {view === 'table' && (
-            <React.Fragment>
-              <Table
-                data={baseQuery.data}
-                query={baseQuery.query}
-                height={this.container && this.container.clientHeight}
-              />
-              {!baseQuery.query.aggregations.length && (
-                <Pagination
-                  previous={baseQuery.previous}
-                  next={baseQuery.next}
-                  getNextPage={() => onFetchPage('next')}
-                  getPreviousPage={() => onFetchPage('previous')}
-                />
-              )}
-            </React.Fragment>
+            <Table
+              data={baseQuery.data}
+              query={baseQuery.query}
+              height={this.container && this.container.clientHeight}
+            />
           )}
           {view === 'line' && (
             <ChartWrapper>
@@ -239,7 +230,17 @@ export default class Result extends React.Component {
               {this.renderNote()}
             </ChartWrapper>
           )}
-          {this.renderSummary()}
+          <ResultSummaryAndButtons>
+            {this.renderSummary()}
+            {!baseQuery.query.aggregations.length && (
+              <Pagination
+                previous={baseQuery.previous}
+                next={baseQuery.next}
+                getNextPage={() => onFetchPage('next')}
+                getPreviousPage={() => onFetchPage('previous')}
+              />
+            )}
+          </ResultSummaryAndButtons>
         </ResultInnerContainer>
       </ResultContainer>
     );
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
index 684ffef7e8..f33a3b9390 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
@@ -76,6 +76,24 @@ export function getChartDataByDay(rawData, query) {
   });
 }
 
+/**
+ * Returns the page ranges of paginated tables, i.e. Results 1-100
+ * @param {Object} baseQuery data
+ * @returns {String}
+ */
+export function getRowsPageRange(baseQuery) {
+  const dataLength = baseQuery.data.data.length;
+
+  if (!dataLength) {
+    return '0 rows';
+  } else if (baseQuery.query.aggregations.length) {
+    return `${dataLength} ${dataLength === 1 ? 'row' : 'rows'}`;
+  } else {
+    const startRange = parseInt(baseQuery.current.split(':')[1], 10);
+    return `rows ${startRange + 1} - ${startRange + dataLength}`;
+  }
+}
+
 // Return placeholder empty series object with all series and dates listed and
 // all values set to null
 function getEmptySeriesHash(seriesSet, dates) {
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
index 0eefbddcaf..d3d59a8de3 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
@@ -153,6 +153,10 @@ export const ResultSummary = styled(Box)`
   font-size: ${p => p.theme.fontSizeSmall};
 `;
 
+export const ResultSummaryAndButtons = styled(Flex)`
+  justify-content: space-between;
+`;
+
 export const ResultContainer = styled('div')`
   display: flex;
   flex: 1;
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
index 14d5586dc9..55beb3d6b4 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
@@ -99,7 +99,7 @@ describe('Discover', function() {
         body: {timing: {}, data: [], meta: []},
         headers: {
           Link:
-            '<api/0/organizations/sentry/discover/query/?per_page=2&cursor=0:0:1>; rel="previous"; results="false"; cursor="0:0:1", <api/0/organizations/sentry/discover/query/?per_page=2&cursor=0:2:0>; rel="next"; results="true"; cursor="0:1000:0"',
+            '<api/0/organizations/sentry/discover/query/?per_page=2&cursor=0:0:1>; rel="previous"; results="false"; cursor="0:0:1", <api/0/organizations/sentry/discover/query/?per_page=1000&cursor=0:2:0>; rel="next"; results="true"; cursor="0:1000:0"',
         },
       });
 
@@ -115,6 +115,7 @@ describe('Discover', function() {
           organization={organization}
           params={{}}
           updateSavedQueryData={() => {}}
+          toggleEditMode={jest.fn()}
         />,
         TestStubs.routerContext()
       );
diff --git a/tests/js/spec/views/organizationDiscover/result/index.spec.jsx b/tests/js/spec/views/organizationDiscover/result/index.spec.jsx
index 7af2c79475..eb524caf80 100644
--- a/tests/js/spec/views/organizationDiscover/result/index.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/result/index.spec.jsx
@@ -6,32 +6,37 @@ import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
 
 describe('Result', function() {
   describe('New query', function() {
-    describe('Basic query', function() {
-      let wrapper, queryBuilder;
-      beforeEach(function() {
-        const organization = TestStubs.Organization();
-        queryBuilder = createQueryBuilder({}, organization);
-        queryBuilder.updateField('aggregations', [['count()', null, 'count']]);
+    let wrapper;
+    beforeEach(function() {
+      const organization = TestStubs.Organization();
 
-        const data = {
-          baseQuery: {
-            query: queryBuilder.getInternal(),
-            data: {data: [], meta: [], timing: {duration_ms: 15}},
-          },
-          byDayQuery: {
-            query: null,
-            data: null,
+      const data = {
+        baseQuery: {
+          data: {data: [], meta: [], timing: {duration_ms: 15}},
+          query: {
+            aggregations: [['count()', null, 'count']],
+            conditions: [],
           },
-        };
-        wrapper = shallow(
-          <Result queryBuilder={queryBuilder} data={data} organization={organization} />
-        );
-      });
+        },
+        byDayQuery: {
+          query: null,
+          data: null,
+        },
+      };
+      wrapper = shallow(
+        <Result data={data} organization={organization} onFetchPage={jest.fn()} />,
+        {
+          context: {organization},
+          disableLifecycleMethods: false,
+        }
+      );
+    });
 
-      afterEach(function() {
-        MockApiClient.clearMockResponses();
-      });
+    afterEach(function() {
+      MockApiClient.clearMockResponses();
+    });
 
+    describe('Basic query', function() {
       it('displays options', function() {
         const buttons = wrapper.find('.btn-group').find('a');
         expect(buttons).toHaveLength(3);
@@ -50,6 +55,108 @@ describe('Result', function() {
         expect(wrapper.find('LineChart')).toHaveLength(1);
       });
     });
+
+    describe('Render Summary', function() {
+      it('shows correct range for pagination in summary', async function() {
+        const data = {
+          data: {
+            baseQuery: {
+              query: {
+                aggregations: [],
+                conditions: [],
+                fields: ['foo'],
+                projects: [1],
+              },
+              data: {
+                data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
+                meta: [],
+                timing: {duration_ms: 15},
+              },
+              previous: null,
+              current: '0:0:1',
+              next: '0:10:0',
+            },
+            byDayQuery: {
+              query: null,
+              data: null,
+            },
+          },
+        };
+        wrapper.setProps(data);
+
+        expect(
+          wrapper
+            .find('ResultSummary')
+            .render()
+            .text()
+        ).toEqual('query time: 15 ms, rows 1 - 10');
+      });
+
+      it('shows correct number of results shown when going to next page (next page function mocked on click)', async function() {
+        const data = {
+          data: {
+            baseQuery: {
+              query: {
+                aggregations: [],
+                conditions: [],
+                fields: ['foo'],
+                projects: [1],
+              },
+              data: {
+                data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
+                meta: [],
+                timing: {duration_ms: 15},
+              },
+              previous: '0:0:1',
+              current: '0:10:0',
+              next: '0:20:0',
+            },
+            byDayQuery: {
+              query: null,
+              data: null,
+            },
+          },
+        };
+        wrapper.setProps(data);
+
+        expect(
+          wrapper
+            .find('ResultSummary')
+            .render()
+            .text()
+        ).toBe('query time: 15 ms, rows 11 - 20');
+      });
+
+      it('shows 0 Results with no data', async function() {
+        wrapper.setProps({
+          data: {
+            baseQuery: {
+              query: {
+                aggregations: [],
+                conditions: [],
+                fields: ['foo'],
+                projects: [1],
+              },
+              data: {data: [], meta: [], timing: {duration_ms: 15}},
+              previous: null,
+              current: '0:10:0',
+              next: null,
+            },
+            byDayQuery: {
+              query: null,
+              data: null,
+            },
+          },
+        });
+
+        expect(
+          wrapper
+            .find('ResultSummary')
+            .render()
+            .text()
+        ).toBe('query time: 15 ms, 0 rows');
+      });
+    });
   });
 
   describe('Saved query', function() {
@@ -75,6 +182,7 @@ describe('Result', function() {
           data={data}
           organization={organization}
           savedQuery={TestStubs.DiscoverSavedQuery()}
+          onFetchPage={jest.fn()}
         />,
         TestStubs.routerContext()
       );
