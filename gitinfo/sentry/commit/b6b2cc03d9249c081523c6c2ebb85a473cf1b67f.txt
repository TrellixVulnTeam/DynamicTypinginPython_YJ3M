commit b6b2cc03d9249c081523c6c2ebb85a473cf1b67f
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Aug 15 10:34:04 2018 -0700

    feat(health): Add `interval` to health request action creator (#9364)
    
    * Also adds another test for requests w/o `tag`

diff --git a/src/sentry/static/sentry/app/actionCreators/health.jsx b/src/sentry/static/sentry/app/actionCreators/health.jsx
index 9fba183a77..a3d16aa700 100644
--- a/src/sentry/static/sentry/app/actionCreators/health.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/health.jsx
@@ -11,12 +11,23 @@ const BASE_URL = org => `/organizations/${org.slug}/health/`;
  * @param {Boolean} options.timeseries Should we group results by time period
  * @param {String[]} options.environments List of environments to query for
  * @param {String} options.period Time period to query for, in the format: <integer><units> where units are "d" or "h"
+ * @param {String} options.interval Time interval to group results in, in the format: <integer><units> where units are "d", "h", "m", "s"
  * @param {Boolean} options.includePrevious Should request also return reqsults for previous period?
  * @param {Number} options.topk Include topk results
  */
 export const doHealthRequest = (
   api,
-  {organization, projects, tag, environments, period, timeseries, includePrevious, topk}
+  {
+    organization,
+    projects,
+    tag,
+    environments,
+    period,
+    interval,
+    timeseries,
+    includePrevious,
+    topk,
+  }
 ) => {
   if (!api) return Promise.reject(new Error('API client not available'));
 
@@ -24,6 +35,7 @@ export const doHealthRequest = (
   const query = {
     tag,
     includePrevious,
+    interval,
     statsPeriod: period,
     project: projects,
     environment: environments,
diff --git a/tests/js/spec/actionCreators/health.spec.jsx b/tests/js/spec/actionCreators/health.spec.jsx
index e10642067d..64a382eeee 100644
--- a/tests/js/spec/actionCreators/health.spec.jsx
+++ b/tests/js/spec/actionCreators/health.spec.jsx
@@ -7,7 +7,37 @@ describe('Health ActionCreator', function() {
   const project = TestStubs.Project();
   let mock;
 
-  it('requests timeseries', function() {
+  it('requests timeseries w/o tag', function() {
+    mock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/health/graph/',
+    });
+    doHealthRequest(api, {
+      timeseries: true,
+      organization,
+      projects: [project.id],
+      environments: [],
+      topk: 5,
+      includePrevious: true,
+      period: '7d',
+    });
+
+    expect(mock).toHaveBeenCalled();
+
+    expect(mock).toHaveBeenLastCalledWith(
+      '/organizations/org-slug/health/graph/',
+      expect.objectContaining({
+        query: expect.objectContaining({
+          project: [project.id],
+          environment: [],
+          topk: 5,
+          includePrevious: true,
+          statsPeriod: '7d',
+        }),
+      })
+    );
+  });
+
+  it('requests timeseries w/ tag', function() {
     mock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/health/graph/',
     });
