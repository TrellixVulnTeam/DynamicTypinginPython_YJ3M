commit 2a10ff7718cb68bda49b310c18ff879d2433b1c1
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Oct 29 13:04:19 2018 -0700

    feat(feedback): Add timeouts for feedback submission

diff --git a/src/sentry/api/endpoints/project_user_reports.py b/src/sentry/api/endpoints/project_user_reports.py
index f18a987168..45bea20d14 100644
--- a/src/sentry/api/endpoints/project_user_reports.py
+++ b/src/sentry/api/endpoints/project_user_reports.py
@@ -1,9 +1,9 @@
 from __future__ import absolute_import
 
+from datetime import timedelta
 from django.db import IntegrityError, transaction
 from django.utils import timezone
 from rest_framework import serializers
-from rest_framework.response import Response
 from uuid import uuid4
 
 from sentry.api.base import DocSection, EnvironmentMixin
@@ -73,7 +73,7 @@ class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
                     group__status=GroupStatus.UNRESOLVED,
                 )
             elif status:
-                return Response({'status': 'Invalid status choice'}, status=400)
+                return self.respond({'status': 'Invalid status choice'}, status=400)
 
         return self.paginate(
             request=request,
@@ -94,6 +94,13 @@ class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
 
         Submit and associate user feedback with an issue.
 
+        Feedback must be received by the server no more than 30 minutes after the event was saved.
+
+        Additionally, within 5 minutes of submitting feedback it may also be overwritten. This is useful
+        in situations where you may need to retry sending a request due to network failures.
+
+        If feedback is rejected due to a mutability threshold, a 409 status code will be returned.
+
         :pparam string organization_slug: the slug of the organization.
         :pparam string project_slug: the slug of the project.
         :auth: required
@@ -104,7 +111,7 @@ class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
         """
         serializer = UserReportSerializer(data=request.DATA)
         if not serializer.is_valid():
-            return Response(serializer.errors, status=400)
+            return self.respond(serializer.errors, status=400)
 
         report = serializer.object
         report.project = project
@@ -117,15 +124,22 @@ class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
         if euser:
             report.event_user_id = euser.id
 
-        try:
-            event = Event.objects.filter(project_id=project.id,
-                                         event_id=report.event_id)[0]
-        except IndexError:
+        event = Event.objects.filter(
+            project_id=project.id,
+            event_id=report.event_id,
+        ).first()
+        if not event:
             try:
                 report.group = Group.objects.from_event_id(project, report.event_id)
             except Group.DoesNotExist:
                 pass
         else:
+            # if the event is more than 30 minutes old, we dont allow updates
+            # as it might be abusive
+            if event.datetime < timezone.now() - timedelta(minutes=30):
+                return self.respond(
+                    {'detail': 'Feedback for this event cannot be modified.'}, status=409)
+
             report.environment = event.get_environment()
             report.group = event.group
 
@@ -144,6 +158,12 @@ class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
                 event_id=report.event_id,
             )
 
+            # if the existing report was submitted more than 5 minutes ago, we dont
+            # allow updates as it might be abusive (replay attacks)
+            if existing_report.date_added < timezone.now() - timedelta(minutes=5):
+                return self.respond(
+                    {'detail': 'Feedback for this event cannot be modified.'}, status=409)
+
             existing_report.update(
                 name=report.name,
                 email=report.email,
@@ -159,7 +179,7 @@ class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
 
         user_feedback_received.send(project=report.project, group=report.group, sender=self)
 
-        return Response(serialize(report, request.user, ProjectUserReportSerializer(
+        return self.respond(serialize(report, request.user, ProjectUserReportSerializer(
             environment_func=self._get_environment_func(
                 request, project.organization_id)
         )))
diff --git a/tests/sentry/api/endpoints/test_project_user_reports.py b/tests/sentry/api/endpoints/test_project_user_reports.py
index 31d2bbc449..707794f41f 100644
--- a/tests/sentry/api/endpoints/test_project_user_reports.py
+++ b/tests/sentry/api/endpoints/test_project_user_reports.py
@@ -1,6 +1,8 @@
 from __future__ import absolute_import
 
 import six
+from datetime import timedelta
+from django.utils import timezone
 from exam import fixture
 
 from sentry.testutils import APITestCase, UserReportEnvironmentTestCase
@@ -104,8 +106,11 @@ class CreateProjectUserReportTest(APITestCase):
         project = self.create_project()
         group = self.create_group(project=project)
         environment = self.make_environment(project)
-        event = self.create_event(group=group, tags={
-            'environment': environment.name})
+        event = self.create_event(
+            group=group,
+            tags={'environment': environment.name},
+            datetime=timezone.now(),
+        )
 
         url = u'/api/0/projects/{}/{}/user-feedback/'.format(
             project.organization.slug,
@@ -139,8 +144,11 @@ class CreateProjectUserReportTest(APITestCase):
         project = self.create_project()
         group = self.create_group(project=project)
         environment = self.make_environment(project)
-        event = self.create_event(group=group, tags={
-            'environment': environment.name})
+        event = self.create_event(
+            group=group,
+            tags={'environment': environment.name},
+            datetime=timezone.now(),
+        )
 
         UserReport.objects.create(
             group=group,
@@ -184,10 +192,12 @@ class CreateProjectUserReportTest(APITestCase):
         group = self.create_group(project=project)
         environment = self.make_environment(project)
         event = self.create_event(
-            group=group, tags={
+            group=group,
+            tags={
                 'sentry:user': 'email:foo@example.com',
                 'environment': environment.name,
-            }
+            },
+            datetime=timezone.now(),
         )
         euser = EventUser.objects.create(
             project_id=project.id,
@@ -233,6 +243,71 @@ class CreateProjectUserReportTest(APITestCase):
         euser = EventUser.objects.get(id=euser.id)
         assert euser.name == 'Foo Bar'
 
+    def test_already_present_after_deadline(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        group = self.create_group(project=project)
+        environment = self.make_environment(project)
+        event = self.create_event(group=group, tags={
+            'environment': environment.name})
+
+        UserReport.objects.create(
+            group=group,
+            project=project,
+            event_id=event.event_id,
+            name='foo',
+            email='bar@example.com',
+            comments='',
+            date_added=timezone.now() - timedelta(minutes=10),
+        )
+
+        url = u'/api/0/projects/{}/{}/user-feedback/'.format(
+            project.organization.slug,
+            project.slug,
+        )
+
+        response = self.client.post(
+            url,
+            data={
+                'event_id': event.event_id,
+                'email': 'foo@example.com',
+                'name': 'Foo Bar',
+                'comments': 'It broke!',
+            }
+        )
+
+        assert response.status_code == 409, response.content
+
+    def test_after_event_deadline(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        group = self.create_group(project=project)
+        environment = self.make_environment(project)
+        event = self.create_event(
+            group=group,
+            tags={'environment': environment.name},
+            datetime=timezone.now() - timedelta(minutes=60),
+        )
+
+        url = u'/api/0/projects/{}/{}/user-feedback/'.format(
+            project.organization.slug,
+            project.slug,
+        )
+
+        response = self.client.post(
+            url,
+            data={
+                'event_id': event.event_id,
+                'email': 'foo@example.com',
+                'name': 'Foo Bar',
+                'comments': 'It broke!',
+            }
+        )
+
+        assert response.status_code == 409, response.content
+
 
 class ProjectUserReportByEnvironmentsTest(UserReportEnvironmentTestCase):
 
