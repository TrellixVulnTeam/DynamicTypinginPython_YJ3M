commit b6106ca4027ba9de8b9e0952c02fd30cabce3a36
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Mon Apr 27 22:23:09 2020 +0200

    feat: start/stop relay ondemand with devserver (#18445)

diff --git a/config/reverse_proxy/nginx.conf b/config/reverse_proxy/nginx.conf
index 1ad81a5ebe..9c8d4da630 100644
--- a/config/reverse_proxy/nginx.conf
+++ b/config/reverse_proxy/nginx.conf
@@ -24,27 +24,26 @@ http {
     keepalive_timeout     65;
     client_max_body_size  100m;
 
-    upstream relay {
-        server sentry_relay.sentry:3000;
-    }
-
-    upstream sentry {
-        server host.docker.internal:8888;
-    }
+    # Do not use upstream directive to prevent nginx from resolving eagerly and
+    # crashing the devserver (if running the devservice using with_devserver
+    # option).
 
     server {
         listen 80;
         resolver 127.0.0.11 ipv6=off;
 
+        set $upstream_relay sentry_relay.sentry:3000;
+        set $upstream_sentry host.docker.internal:8888;
+
         location /api/store/ {
-            proxy_pass http://relay;
+            proxy_pass http://$upstream_relay;
         }
         # All supported ingest endpoints
         location ~ ^/api/[1-9]\d*/ {
-            proxy_pass http://relay;
+            proxy_pass http://$upstream_relay;
         }
         location / {
-           proxy_pass http://sentry;
+           proxy_pass http://$upstream_sentry;
         }
 
         proxy_set_header Host $host;
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 3ca87aa2e5..6b35f4c208 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1490,6 +1490,7 @@ SENTRY_DEVSERVICES = {
         "volumes": {RELAY_CONFIG_DIR: {"bind": "/etc/relay"}},
         "command": ["run", "--config", "/etc/relay"],
         "only_if": lambda settings, options: settings.SENTRY_USE_RELAY,
+        "with_devserver": True,
     },
 }
 
diff --git a/src/sentry/runner/commands/devserver.py b/src/sentry/runner/commands/devserver.py
index 8407c366dc..1c9551f266 100644
--- a/src/sentry/runner/commands/devserver.py
+++ b/src/sentry/runner/commands/devserver.py
@@ -19,7 +19,6 @@ _DEFAULT_DAEMONS = {
     "ingest": ["sentry", "run", "ingest-consumer", "--all-consumer-types"],
     "server": ["sentry", "run", "web"],
     "storybook": ["./bin/yarn", "storybook"],
-    "reverse_proxy": ["sentry", "devservices", "attach", "--is-devserver", "reverse_proxy"],
 }
 
 
@@ -204,7 +203,7 @@ def devserver(
             daemons += [_get_daemon("post-process-forwarder")]
 
     if settings.SENTRY_USE_RELAY:
-        daemons += [_get_daemon("ingest"), _get_daemon("reverse_proxy")]
+        daemons += [_get_daemon("ingest")]
 
     if needs_https and has_https:
         https_port = six.text_type(parsed_url.port)
@@ -224,6 +223,10 @@ def devserver(
             ("https", ["https", "-host", https_host, "-listen", host + ":" + https_port, bind])
         ]
 
+    for name, container_options in settings.SENTRY_DEVSERVICES.items():
+        if container_options.get("with_devserver", False):
+            daemons += [(name, ["sentry", "devservices", "attach", "--fast", name])]
+
     # A better log-format for local dev when running through honcho,
     # but if there aren't any other daemons, we don't want to override.
     if daemons:
diff --git a/src/sentry/runner/commands/devservices.py b/src/sentry/runner/commands/devservices.py
index 141da65c8a..ebf8c5936d 100644
--- a/src/sentry/runner/commands/devservices.py
+++ b/src/sentry/runner/commands/devservices.py
@@ -53,9 +53,9 @@ def devservices():
 
 @devservices.command()
 @click.option("--project", default="sentry")
-@click.option("--is-devserver", is_flag=True, default=False)
+@click.option("--fast", is_flag=True, default=False, help="Never pull and reuse containers.")
 @click.argument("service", nargs=1)
-def attach(project, is_devserver, service):
+def attach(project, fast, service):
     """
     Run a single devservice in foreground, as opposed to `up` which runs all of
     them in the background.
@@ -75,10 +75,11 @@ def attach(project, is_devserver, service):
     configure()
 
     client = get_docker_client()
-    containers = _prepare_containers(project)
-    container = _start_service(
-        client, service, containers, project, devserver_override=is_devserver
-    )
+    containers = _prepare_containers(project, silent=True)
+    if service not in containers:
+        raise click.ClickException("Service {} is not known or not enabled.".format(service))
+
+    container = _start_service(client, service, containers, project, fast=fast, always_start=True)
 
     def exit_handler(*_):
         click.echo("Shutting down {}".format(service))
@@ -98,7 +99,7 @@ def attach(project, is_devserver, service):
 @devservices.command()
 @click.option("--project", default="sentry")
 @click.option("--exclude", multiple=True, help="Services to ignore and not run.")
-@click.option("--fast", is_flag=True, default=False, help="Never pull.")
+@click.option("--fast", is_flag=True, default=False, help="Never pull and reuse containers.")
 def up(project, exclude, fast):
     """
     Run/update dependent services.
@@ -137,7 +138,7 @@ def up(project, exclude, fast):
         _start_service(client, name, containers, project, fast=fast)
 
 
-def _prepare_containers(project):
+def _prepare_containers(project, silent=False):
     from django.conf import settings
     from sentry import options as sentry_options
 
@@ -147,7 +148,10 @@ def _prepare_containers(project):
         options = options.copy()
         test_fn = options.pop("only_if", None)
         if test_fn and not test_fn(settings, sentry_options):
-            click.secho("! Skipping {} due to only_if condition".format(name), err=True, fg="cyan")
+            if not silent:
+                click.secho(
+                    "! Skipping {} due to only_if condition".format(name), err=True, fg="cyan"
+                )
             continue
 
         options["network"] = project
@@ -162,7 +166,7 @@ def _prepare_containers(project):
     return containers
 
 
-def _start_service(client, name, containers, project, fast=False, devserver_override=False):
+def _start_service(client, name, containers, project, fast=False, always_start=False):
     from django.conf import settings
     import docker
 
@@ -208,6 +212,19 @@ def _start_service(client, name, containers, project, fast=False, devserver_over
     # See https://github.com/getsentry/sentry/pull/18362#issuecomment-616785458
     with_devserver = options.pop("with_devserver", False)
 
+    # Two things call _start_service.
+    # devservices up, and devservices attach.
+    # Containers that should be started on-demand with devserver
+    # should ONLY be started via the latter, which sets `always_start`.
+    if with_devserver and not always_start:
+        click.secho(
+            "> Not starting container '%s' because it should be started on-demand with devserver."
+            % options["name"],
+            fg="yellow",
+        )
+        # XXX: if always_start=False, do not expect to have a container returned 100% of the time.
+        return None
+
     container = None
     try:
         container = client.containers.get(options["name"])
@@ -215,9 +232,16 @@ def _start_service(client, name, containers, project, fast=False, devserver_over
         pass
 
     if container is not None:
-        if not pull and not with_devserver:
-            # devservices which are marked with pull True will need their containers
-            # to be recreated with the freshly pulled image.
+        # devservices which are marked with pull True will need their containers
+        # to be recreated with the freshly pulled image.
+        should_reuse_container = not pull
+
+        # Except if the container is started as part of devserver we should reuse it.
+        # Or, if we're in fast mode (devservices up --fast)
+        if with_devserver or fast:
+            should_reuse_container = True
+
+        if should_reuse_container:
             click.secho(
                 "> Starting EXISTING container '%s' %s" % (container.name, listening),
                 err=True,
@@ -235,20 +259,6 @@ def _start_service(client, name, containers, project, fast=False, devserver_over
 
     click.secho("> Creating container '%s'" % options["name"], err=True, fg="yellow")
     container = client.containers.create(**options)
-
-    # Two things call _start_service.
-    # devservices up, and devservices attach.
-    # Containers that should be started on-demand with devserver, should ONLY be started via the latter.
-    # So devserver calls devservices attach --is-devserver reverse_proxy, which sets devserver_override.
-    # This additional logic is needed because devservices up also makes sure the necessary images are downloaded.
-    if with_devserver and not devserver_override:
-        click.secho(
-            "> Not starting container '%s' because it should be started on-demand with devserver."
-            % container.name,
-            fg="yellow",
-        )
-        return container
-
     click.secho("> Starting container '%s' %s" % (container.name, listening), err=True, fg="yellow")
     container.start()
     return container
