commit 80f78176209dad48502ac5793db7f3f0e56367a0
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Sep 26 09:10:58 2018 -0700

    feat(ui): Throttle Broadcasts on lost visibility (#9886)
    
    * Do not poll for broadcasts when sentry loses visibility (e.g. tab change or browser minimized)
    * Update broadcast poll to 10 minutes

diff --git a/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx b/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
index 837b7fa921..f8e17ad379 100644
--- a/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
@@ -12,7 +12,7 @@ import SidebarPanelEmpty from 'app/components/sidebar/sidebarPanelEmpty';
 import SidebarPanelItem from 'app/components/sidebar/sidebarPanelItem';
 
 const MARK_SEEN_DELAY = 1000;
-const POLLER_DELAY = 60000;
+const POLLER_DELAY = 600000; // 10 minute poll (60 * 10 * 1000)
 
 const Broadcasts = createReactClass({
   displayName: 'Broadcasts',
@@ -36,8 +36,10 @@ const Broadcasts = createReactClass({
     };
   },
 
-  componentWillMount() {
+  componentDidMount() {
     this.fetchData();
+
+    document.addEventListener('visibilitychange', this.handleVisibilityChange);
   },
 
   componentWillUnmount() {
@@ -45,10 +47,11 @@ const Broadcasts = createReactClass({
       window.clearTimeout(this.timer);
       this.timer = null;
     }
+
     if (this.poller) {
-      window.clearTimeout(this.poller);
-      this.poller = null;
+      this.stopPoll();
     }
+    document.removeEventListener('visibilitychange', this.handleVisibilityChange);
   },
 
   remountComponent() {
@@ -57,8 +60,9 @@ const Broadcasts = createReactClass({
 
   fetchData() {
     if (this.poller) {
-      window.clearTimeout(this.poller);
+      this.stopPoll();
     }
+
     this.api.request('/broadcasts/', {
       method: 'GET',
       success: data => {
@@ -66,18 +70,39 @@ const Broadcasts = createReactClass({
           broadcasts: data || [],
           loading: false,
         });
-        this.poller = window.setTimeout(this.fetchData, POLLER_DELAY);
+        this.startPoll();
       },
       error: () => {
         this.setState({
           loading: false,
           error: true,
         });
-        this.poller = window.setTimeout(this.fetchData, POLLER_DELAY);
+        this.startPoll();
       },
     });
   },
 
+  startPoll() {
+    this.poller = window.setTimeout(this.fetchData, POLLER_DELAY);
+  },
+
+  stopPoll() {
+    window.clearTimeout(this.poller);
+    this.poller = null;
+  },
+
+  /**
+   * If tab/window loses visiblity (note: this is different than focus), stop polling for broadcasts data, otherwise,
+   * if it gains visibility, start polling again.
+   */
+  handleVisibilityChange() {
+    if (document.hidden) {
+      this.stopPoll();
+    } else {
+      this.startPoll();
+    }
+  },
+
   handleShowPanel() {
     this.timer = window.setTimeout(this.markSeen, MARK_SEEN_DELAY);
     this.props.onShowPanel();
