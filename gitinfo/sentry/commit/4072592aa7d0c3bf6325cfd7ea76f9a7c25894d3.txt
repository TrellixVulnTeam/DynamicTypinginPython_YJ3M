commit 4072592aa7d0c3bf6325cfd7ea76f9a7c25894d3
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Jun 3 14:56:55 2019 -0700

    ref(ui): Remove Project User feedback (#13503)
    
    This is no longer used since sentry10 is now default

diff --git a/src/sentry/static/sentry/app/components/projectHeader/index.jsx b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
index 71d3df1afa..102aa6b04f 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/index.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
@@ -38,13 +38,7 @@ class ProjectHeader extends React.Component {
     const org = this.props.organization;
     const allEnvironmentsLabel = t('All environments');
 
-    const pagesWithEnvironments = new Set([
-      'stream',
-      'releases',
-      'dashboard',
-      'events',
-      'user-feedback',
-    ]);
+    const pagesWithEnvironments = new Set(['stream', 'releases', 'dashboard', 'events']);
     const showEnvironmentsToggle = pagesWithEnvironments.has(navSection);
 
     const activeEnvironmentTitle = activeEnvironment
@@ -71,11 +65,6 @@ class ProjectHeader extends React.Component {
                   {t('Overview')}
                 </ProjectLink>
               </li>
-              <li className={navSection == 'user-feedback' ? 'active' : ''}>
-                <ProjectLink to={`/${org.slug}/${project.slug}/user-feedback/`}>
-                  {t('User Feedback')}
-                </ProjectLink>
-              </li>
               <li className={navSection == 'releases' ? 'active' : ''}>
                 <ProjectLink to={`/${org.slug}/${project.slug}/releases/`}>
                   {t('Releases')}
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 16ee195e72..3f50c83671 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1242,13 +1242,8 @@ function routes() {
               component={errorHandler(LazyLoad)}
             />
           </Route>
-          <Route
-            path="user-feedback/"
-            componentPromise={() =>
-              import(/* webpackChunkName: "ProjectUserFeedback" */ './views/userFeedback/projectUserFeedback')
-            }
-            component={errorHandler(LazyLoad)}
-          />
+
+          <Redirect from="user-feedback/" to="/organizations/:orgId/user-feedback/" />
 
           <Route path="settings/" component={errorHandler(ProjectSettings)}>
             <Redirect from="teams/" to="/settings/:orgId/projects/:projectId/teams/" />
diff --git a/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.jsx b/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.jsx
index ca06378c59..e1874386f2 100644
--- a/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.jsx
+++ b/src/sentry/static/sentry/app/views/userFeedback/organizationUserFeedback.jsx
@@ -3,12 +3,10 @@ import styled from 'react-emotion';
 
 import {PageContent} from 'app/styles/organization';
 import {t} from 'app/locale';
-import Alert from 'app/components/alert';
 import AsyncView from 'app/views/asyncView';
 import CompactIssue from 'app/components/compactIssue';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import EventUserFeedback from 'app/components/events/userFeedback';
-import Feature from 'app/components/acl/feature';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import NoProjectMessage from 'app/components/noProjectMessage';
@@ -75,14 +73,6 @@ class OrganizationUserFeedback extends AsyncView {
     );
   }
 
-  renderNoAccess() {
-    return (
-      <PageContent>
-        <Alert type="warning">{t("You don't have access to this feature")}</Alert>
-      </PageContent>
-    );
-  }
-
   renderLoading() {
     return this.renderBody();
   }
@@ -108,11 +98,7 @@ class OrganizationUserFeedback extends AsyncView {
     const {reportListPageLinks} = this.state;
 
     return (
-      <Feature
-        features={['organizations:sentry10']}
-        organization={organization}
-        renderDisabled={this.renderNoAccess}
-      >
+      <React.Fragment>
         <GlobalSelectionHeader organization={organization} />
         <PageContent>
           <NoProjectMessage organization={organization}>
@@ -125,7 +111,7 @@ class OrganizationUserFeedback extends AsyncView {
             </UserFeedbackContainer>
           </NoProjectMessage>
         </PageContent>
-      </Feature>
+      </React.Fragment>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/userFeedback/projectUserFeedback.jsx b/src/sentry/static/sentry/app/views/userFeedback/projectUserFeedback.jsx
deleted file mode 100644
index 11ecca64df..0000000000
--- a/src/sentry/static/sentry/app/views/userFeedback/projectUserFeedback.jsx
+++ /dev/null
@@ -1,252 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-import {Link, browserHistory} from 'react-router';
-import DocumentTitle from 'react-document-title';
-import qs from 'query-string';
-import {omit, isEqual} from 'lodash';
-import styled from 'react-emotion';
-
-import SentryTypes from 'app/sentryTypes';
-import withApi from 'app/utils/withApi';
-import GroupStore from 'app/stores/groupStore';
-import LoadingError from 'app/components/loadingError';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import CompactIssue from 'app/components/compactIssue';
-import EventUserFeedback from 'app/components/events/userFeedback';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
-import {t, tct} from 'app/locale';
-import space from 'app/styles/space';
-import withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';
-import withOrganization from 'app/utils/withOrganization';
-
-import UserFeedbackContainer from './container';
-
-const ProjectUserFeedback = createReactClass({
-  displayName: 'ProjectUserFeedback',
-
-  propTypes: {
-    api: PropTypes.object,
-    organization: SentryTypes.Organization.isRequired,
-    defaultQuery: PropTypes.string,
-    defaultStatus: PropTypes.string,
-    setProjectNavSection: PropTypes.func,
-    environment: SentryTypes.Environment,
-  },
-
-  contextTypes: {
-    project: SentryTypes.Project,
-  },
-
-  getDefaultProps() {
-    return {
-      defaultQuery: '',
-      defaultStatus: 'unresolved',
-    };
-  },
-
-  getInitialState() {
-    return {
-      reportList: [],
-      loading: true,
-      error: false,
-      pageLinks: '',
-      query: this.props.defaultQuery,
-      status: this.props.defaultStatus,
-      environment: this.props.environment,
-      ...this.getQueryStringState(this.props),
-    };
-  },
-
-  componentWillMount() {
-    // Redirect any Sentry 10 user that has followed an old link and ended up here
-    const {
-      organization,
-      params: {orgId},
-    } = this.props;
-    const hasSentry10 = new Set(organization.features).has('sentry10');
-    if (hasSentry10) {
-      const projectId = this.context.project.id;
-      browserHistory.replace(
-        `/organizations/${orgId}/user-feedback/?project=${projectId}`
-      );
-    }
-
-    this.props.setProjectNavSection('user-feedback');
-    this.fetchData();
-  },
-
-  componentWillReceiveProps(nextProps) {
-    // Ignore changes to environment term since this is handled separately
-    const nextSearchTerm = omit(qs.parse(nextProps.location.search), 'environment');
-    const thisSearchTerm = omit(qs.parse(this.props.location.search), 'environment');
-
-    if (!isEqual(nextSearchTerm, thisSearchTerm)) {
-      this.setState(this.getQueryStringState(nextProps), this.fetchData);
-    }
-
-    if (nextProps.environment !== this.props.environment) {
-      this.setState(
-        {
-          environment: nextProps.environment,
-        },
-        this.fetchData
-      );
-    }
-  },
-
-  getQueryStringState(props) {
-    const q = props.location.query;
-    const status = 'status' in q ? q.status : this.props.defaultStatus;
-    const query = 'query' in q ? q.query : this.props.defaultQuery;
-
-    return {
-      query,
-      status,
-    };
-  },
-
-  fetchData() {
-    this.setState({
-      loading: true,
-      error: false,
-    });
-
-    const params = this.props.params;
-
-    const query = {
-      ...this.props.location.query,
-      per_page: 50,
-      query: this.state.query,
-      status: this.state.status,
-    };
-
-    if (this.state.environment) {
-      query.environment = this.state.environment.name;
-    } else {
-      delete query.environment;
-    }
-
-    this.props.api.request(
-      `/projects/${params.orgId}/${params.projectId}/user-reports/`,
-      {
-        query,
-        success: (data, _, jqXHR) => {
-          const issues = data.map(r => r.issue);
-          GroupStore.add(issues);
-          this.setState({
-            error: false,
-            loading: false,
-            reportList: data,
-            pageLinks: jqXHR.getResponseHeader('Link'),
-          });
-        },
-        error: () => {
-          this.setState({
-            error: true,
-            loading: false,
-          });
-        },
-      }
-    );
-  },
-
-  getUserFeedbackUrl() {
-    const params = this.props.params;
-
-    return `/${params.orgId}/${params.projectId}/settings/user-feedback/`;
-  },
-
-  renderStreamBody() {
-    if (this.state.loading) {
-      return <LoadingIndicator />;
-    } else if (this.state.error) {
-      return <LoadingError onRetry={this.fetchData} />;
-    } else if (this.state.reportList.length > 0) {
-      return this.renderResults();
-    } else if (this.state.query && this.state.query !== this.props.defaultQuery) {
-      return this.renderNoQueryResults();
-    } else {
-      return this.renderEmpty();
-    }
-  },
-
-  renderNoQueryResults() {
-    return (
-      <EmptyStateWarning>
-        <p>{t('Sorry, no results match your search query.')}</p>
-      </EmptyStateWarning>
-    );
-  },
-
-  renderEmpty() {
-    const {environment} = this.state;
-    const message = environment
-      ? tct('No user reports have been collected from your [env] environment.', {
-          env: environment.displayName,
-        })
-      : t('No user reports have been collected.');
-    return (
-      <EmptyStateWarning>
-        <p>{message}</p>
-        <p>
-          <Link to={this.getUserFeedbackUrl()}>
-            {t('Learn how to integrate User Feedback')}
-          </Link>
-        </p>
-      </EmptyStateWarning>
-    );
-  },
-
-  renderResults() {
-    const {orgId, projectId} = this.props.params;
-
-    const children = this.state.reportList.map(item => {
-      const issue = item.issue;
-
-      return (
-        <CompactIssue key={item.id} id={issue.id} data={issue}>
-          <StyledEventUserFeedback
-            report={item}
-            orgId={orgId}
-            projectId={projectId}
-            issueId={issue.id}
-          />
-        </CompactIssue>
-      );
-    });
-
-    return children;
-  },
-
-  render() {
-    const {
-      location,
-      organization: {name: orgName},
-    } = this.props;
-    const {
-      project: {slug: projectSlug},
-    } = this.context;
-
-    return (
-      <DocumentTitle title={`User Feedback - ${projectSlug} - ${orgName} - Sentry`}>
-        <UserFeedbackContainer
-          pageLinks={this.state.pageLinks}
-          status={this.state.status}
-          location={location}
-        >
-          {this.renderStreamBody()}
-        </UserFeedbackContainer>
-      </DocumentTitle>
-    );
-  },
-});
-
-export {ProjectUserFeedback};
-export default withApi(
-  withOrganization(withEnvironmentInQueryString(ProjectUserFeedback))
-);
-
-const StyledEventUserFeedback = styled(EventUserFeedback)`
-  margin: ${space(2)} 0 ${space(1)};
-`;
diff --git a/tests/js/spec/views/userFeedback/__snapshots__/projectUserFeedback.spec.jsx.snap b/tests/js/spec/views/userFeedback/__snapshots__/projectUserFeedback.spec.jsx.snap
deleted file mode 100644
index 19d53e7cea..0000000000
--- a/tests/js/spec/views/userFeedback/__snapshots__/projectUserFeedback.spec.jsx.snap
+++ /dev/null
@@ -1,181 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`projectUserFeedback renders 1`] = `
-<SideEffect(DocumentTitle)
-  title="User Feedback - project-slug - Organization Name - Sentry"
->
-  <UserFeedbackContainer
-    location={
-      Object {
-        "query": Object {},
-      }
-    }
-    pageLinks="<https://sentry.io/api/0/organizations/sentry/user-feedback/?statsPeriod=14d&cursor=0:0:1>; rel=\\"previous\\"; results=\\"false\\"; cursor=\\"0:0:1\\", <https://sentry.io/api/0/organizations/sentry/user-feedback/?statsPeriod=14d&cursor=0:100:0>; rel=\\"next\\"; results=\\"true\\"; cursor=\\"0:100:0\\""
-    status="unresolved"
-  >
-    <withApi(WithOrganizationMockWrapper)
-      data={
-        Object {
-          "activity": Array [],
-          "annotations": Array [],
-          "assignedTo": null,
-          "count": "327482",
-          "culprit": "fetchData(app/components/group/suggestedOwners)",
-          "firstRelease": null,
-          "firstSeen": "2019-04-05T19:44:05.963Z",
-          "hasSeen": false,
-          "id": "1",
-          "isBookmarked": false,
-          "isPublic": false,
-          "isSubscribed": false,
-          "lastRelease": null,
-          "lastSeen": "2019-04-11T01:08:59Z",
-          "level": "warning",
-          "logger": null,
-          "metadata": Object {
-            "function": "fetchData",
-            "type": "RequestError",
-          },
-          "numComments": 0,
-          "participants": Array [],
-          "permalink": "https://foo.io/organizations/foo/issues/1234/",
-          "platform": "javascript",
-          "pluginActions": Array [],
-          "pluginContexts": Array [],
-          "pluginIssues": Array [],
-          "project": Object {
-            "id": "2",
-            "platform": "javascript",
-            "slug": "project-slug",
-          },
-          "seenBy": Array [],
-          "shareId": null,
-          "shortId": "JAVASCRIPT-6QS",
-          "stats": Object {
-            "24h": Array [
-              Array [
-                1517281200,
-                2,
-              ],
-              Array [
-                1517310000,
-                1,
-              ],
-            ],
-            "30d": Array [
-              Array [
-                1514764800,
-                1,
-              ],
-              Array [
-                1515024000,
-                122,
-              ],
-            ],
-          },
-          "status": "unresolved",
-          "statusDetails": Object {},
-          "subscriptionDetails": null,
-          "tags": Array [],
-          "title": "RequestError: GET /issues/ 404",
-          "type": "error",
-          "userCount": 35097,
-          "userReportCount": 0,
-        }
-      }
-      id="1"
-      key="123"
-    >
-      <StyledEventUserFeedback
-        issueId="1"
-        orgId="org-slug"
-        projectId="project-slug"
-        report={
-          Object {
-            "comments": "Something bad happened",
-            "dateCreated": "2018-12-20T00:00:00.000Z",
-            "email": "lyn@sentry.io",
-            "event": Object {
-              "dateCreated": "2019-05-21T18:01:48.762Z",
-              "eventID": "12345678901234567890123456789012",
-              "groupID": "1",
-              "id": "1",
-              "message": "ApiException",
-              "tags": Array [],
-            },
-            "id": "123",
-            "issue": Object {
-              "activity": Array [],
-              "annotations": Array [],
-              "assignedTo": null,
-              "count": "327482",
-              "culprit": "fetchData(app/components/group/suggestedOwners)",
-              "firstRelease": null,
-              "firstSeen": "2019-04-05T19:44:05.963Z",
-              "hasSeen": false,
-              "id": "1",
-              "isBookmarked": false,
-              "isPublic": false,
-              "isSubscribed": false,
-              "lastRelease": null,
-              "lastSeen": "2019-04-11T01:08:59Z",
-              "level": "warning",
-              "logger": null,
-              "metadata": Object {
-                "function": "fetchData",
-                "type": "RequestError",
-              },
-              "numComments": 0,
-              "participants": Array [],
-              "permalink": "https://foo.io/organizations/foo/issues/1234/",
-              "platform": "javascript",
-              "pluginActions": Array [],
-              "pluginContexts": Array [],
-              "pluginIssues": Array [],
-              "project": Object {
-                "id": "2",
-                "platform": "javascript",
-                "slug": "project-slug",
-              },
-              "seenBy": Array [],
-              "shareId": null,
-              "shortId": "JAVASCRIPT-6QS",
-              "stats": Object {
-                "24h": Array [
-                  Array [
-                    1517281200,
-                    2,
-                  ],
-                  Array [
-                    1517310000,
-                    1,
-                  ],
-                ],
-                "30d": Array [
-                  Array [
-                    1514764800,
-                    1,
-                  ],
-                  Array [
-                    1515024000,
-                    122,
-                  ],
-                ],
-              },
-              "status": "unresolved",
-              "statusDetails": Object {},
-              "subscriptionDetails": null,
-              "tags": Array [],
-              "title": "RequestError: GET /issues/ 404",
-              "type": "error",
-              "userCount": 35097,
-              "userReportCount": 0,
-            },
-            "name": "Lyn",
-          }
-        }
-      />
-    </withApi(WithOrganizationMockWrapper)>
-  </UserFeedbackContainer>
-</SideEffect(DocumentTitle)>
-`;
diff --git a/tests/js/spec/views/userFeedback/organizationUserFeedback.spec.jsx b/tests/js/spec/views/userFeedback/organizationUserFeedback.spec.jsx
index 221a2b662d..1c5fcbfd86 100644
--- a/tests/js/spec/views/userFeedback/organizationUserFeedback.spec.jsx
+++ b/tests/js/spec/views/userFeedback/organizationUserFeedback.spec.jsx
@@ -38,7 +38,6 @@ describe('OrganizationUserFeedback', function() {
   it('renders', function() {
     const params = {
       organization: TestStubs.Organization({
-        features: ['sentry10'],
         projects: [TestStubs.Project({isMember: true})],
       }),
       location: {query: {}, search: ''},
@@ -50,21 +49,4 @@ describe('OrganizationUserFeedback', function() {
 
     expect(wrapper.find('CompactIssue')).toHaveLength(1);
   });
-
-  it('no access', function() {
-    const params = {
-      organization: TestStubs.Organization(),
-      location: {query: {}, search: ''},
-      params: {
-        orgId: 'org-slug',
-      },
-    };
-
-    const wrapper = mount(
-      <OrganizationUserFeedback {...params} />,
-      TestStubs.routerContext()
-    );
-
-    expect(wrapper.text()).toBe("You don't have access to this feature");
-  });
 });
diff --git a/tests/js/spec/views/userFeedback/projectUserFeedback.spec.jsx b/tests/js/spec/views/userFeedback/projectUserFeedback.spec.jsx
deleted file mode 100644
index 3a3c3590dc..0000000000
--- a/tests/js/spec/views/userFeedback/projectUserFeedback.spec.jsx
+++ /dev/null
@@ -1,39 +0,0 @@
-import React from 'react';
-
-import {shallow} from 'enzyme';
-import {ProjectUserFeedback} from 'app/views/userFeedback/projectUserFeedback';
-
-describe('projectUserFeedback', function() {
-  beforeEach(function() {
-    const pageLinks =
-      '<https://sentry.io/api/0/organizations/sentry/user-feedback/?statsPeriod=14d&cursor=0:0:1>; rel="previous"; results="false"; cursor="0:0:1", ' +
-      '<https://sentry.io/api/0/organizations/sentry/user-feedback/?statsPeriod=14d&cursor=0:100:0>; rel="next"; results="true"; cursor="0:100:0"';
-
-    MockApiClient.addMockResponse({
-      url: '/projects/org-slug/project-slug/user-reports/',
-      body: [TestStubs.UserFeedback()],
-      headers: {Link: pageLinks},
-    });
-  });
-
-  afterEach(function() {
-    MockApiClient.clearMockResponses();
-  });
-
-  it('renders', function() {
-    const params = {
-      api: new MockApiClient(),
-      location: {query: {}},
-      setProjectNavSection: jest.fn(),
-      params: {
-        orgId: 'org-slug',
-        projectId: 'project-slug',
-      },
-    };
-    const wrapper = shallow(
-      <ProjectUserFeedback {...params} organization={TestStubs.Organization()} />,
-      TestStubs.routerContext()
-    );
-    expect(wrapper).toMatchSnapshot();
-  });
-});
