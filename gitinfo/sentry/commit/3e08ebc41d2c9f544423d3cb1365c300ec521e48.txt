commit 3e08ebc41d2c9f544423d3cb1365c300ec521e48
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Aug 29 13:18:06 2018 -0700

    fix: Correct superuser cookie for acceptance tests

diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index c1b472992c..ae44ee5f31 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -48,7 +48,8 @@ from six.moves.urllib.parse import urlencode
 from sentry import auth
 from sentry.auth.providers.dummy import DummyProvider
 from sentry.auth.superuser import (
-    Superuser, COOKIE_SALT as SU_COOKIE_SALT, COOKIE_NAME as SU_COOKIE_NAME, ORG_ID as SU_ORG_ID
+    Superuser, COOKIE_SALT as SU_COOKIE_SALT, COOKIE_NAME as SU_COOKIE_NAME, ORG_ID as SU_ORG_ID,
+    COOKIE_SECURE as SU_COOKIE_SECURE, COOKIE_DOMAIN as SU_COOKIE_DOMAIN, COOKIE_PATH as SU_COOKIE_PATH
 )
 from sentry.constants import MODULE_ROOT
 from sentry.models import (
@@ -109,18 +110,22 @@ class BaseTestCase(Fixtures, Exam):
 
     def save_session(self):
         self.session.save()
+        self.save_cookie(
+            name=settings.SESSION_COOKIE_NAME,
+            value=self.session.session_key,
+            max_age=None,
+            path='/',
+            domain=settings.SESSION_COOKIE_DOMAIN,
+            secure=settings.SESSION_COOKIE_SECURE or None,
+            expires=None
+        )
 
-        cookie_data = {
-            'max-age': None,
-            'path': '/',
-            'domain': settings.SESSION_COOKIE_DOMAIN,
-            'secure': settings.SESSION_COOKIE_SECURE or None,
-            'expires': None,
-        }
-
-        session_cookie = settings.SESSION_COOKIE_NAME
-        self.client.cookies[session_cookie] = self.session.session_key
-        self.client.cookies[session_cookie].update(cookie_data)
+    def save_cookie(self, name, value, **params):
+        self.client.cookies[name] = value
+        self.client.cookies[name].update({
+            k.replace('_', '-'): v
+            for k, v in six.iteritems(params)
+        })
 
     def make_request(self, user=None, auth=None, method=None):
         request = HttpRequest()
@@ -172,9 +177,17 @@ class BaseTestCase(Fixtures, Exam):
             request.superuser.set_logged_in(request.user)
             # XXX(dcramer): awful hack to ensure future attempts to instantiate
             # the Superuser object are successful
-            self.client.cookies[SU_COOKIE_NAME] = signing.get_cookie_signer(
-                salt=SU_COOKIE_NAME + SU_COOKIE_SALT,
-            ).sign(request.superuser.token)
+            self.save_cookie(
+                name=SU_COOKIE_NAME,
+                value=signing.get_cookie_signer(
+                    salt=SU_COOKIE_NAME + SU_COOKIE_SALT,
+                ).sign(request.superuser.token),
+                max_age=None,
+                path=SU_COOKIE_PATH,
+                domain=SU_COOKIE_DOMAIN,
+                secure=SU_COOKIE_SECURE or None,
+                expires=None,
+            )
         # Save the session values.
         self.save_session()
 
@@ -739,9 +752,16 @@ class AcceptanceTestCase(TransactionTestCase):
         self.addCleanup(patcher.stop)
         super(AcceptanceTestCase, self).setUp()
 
+    def save_cookie(self, name, value, **params):
+        self.browser.save_cookie(
+            name=name,
+            value=value,
+            **params
+        )
+
     def save_session(self):
         self.session.save()
-        self.browser.save_cookie(
+        self.save_cookie(
             name=settings.SESSION_COOKIE_NAME,
             value=self.session.session_key,
         )
diff --git a/src/sentry/utils/pytest/selenium.py b/src/sentry/utils/pytest/selenium.py
index 07458e3485..4c4fe66f90 100644
--- a/src/sentry/utils/pytest/selenium.py
+++ b/src/sentry/utils/pytest/selenium.py
@@ -182,13 +182,16 @@ class Browser(object):
         self.percy.snapshot(name=name)
         return self
 
-    def save_cookie(self, name, value, path='/', expires='Tue, 20 Jun 2025 19:07:44 GMT'):
+    def save_cookie(self, name, value, domain=None, path='/',
+                    expires='Tue, 20 Jun 2025 19:07:44 GMT', max_age=None, secure=None):
         cookie = {
             'name': name,
             'value': value,
             'expires': expires,
             'path': path,
-            'domain': self.domain,
+            'domain': domain or self.domain,
+            'max-age': max_age,
+            'secure': secure,
         }
 
         # XXX(dcramer): the cookie store must be initialized via a URL
@@ -206,7 +209,7 @@ class Browser(object):
         })
         if isinstance(self.driver, webdriver.PhantomJS):
             self.driver.execute_script(
-                "document.cookie = '{name}={value}; path={path}; domain={domain}; expires={expires}';\n".format(
+                "document.cookie = '{name}={value}; path={path}; domain={domain}; expires={expires}'; max-age={max_age}\n".format(
                     **cookie)
             )
         else:
