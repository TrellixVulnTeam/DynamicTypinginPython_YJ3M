commit ad8c44badca506d8db0fa2cf72e6f5e5b77ae417
Author: Max Bittker <maxbittker@gmail.com>
Date:   Wed Mar 28 16:10:25 2018 -0700

    enable eslint-plugin-jest (#7787)
    
    * enable eslint jest plugin
    
    * update tests

diff --git a/package.json b/package.json
index d481dad369..68a0e2c850 100644
--- a/package.json
+++ b/package.json
@@ -92,15 +92,18 @@
   "proxyURL": "http://localhost:8000",
   "scripts": {
     "test": "node scripts/test.js",
-    "test-ci": "npm run test -- --runInBand --ci --coverage --testResultsProcessor=jest-junit",
+    "test-ci":
+      "npm run test -- --runInBand --ci --coverage --testResultsProcessor=jest-junit",
     "test-watch": "npm run test -- --watch",
     "jest": "node scripts/test.js",
     "jest-debug": "node --inspect-brk scripts/test.js --runInBand",
-    "lint": "node_modules/.bin/eslint tests/js src/sentry/static/sentry/app --ext .js,.jsx",
+    "lint":
+      "node_modules/.bin/eslint tests/js src/sentry/static/sentry/app --ext .js,.jsx",
     "dev-proxy": "node scripts/devproxy.js",
     "dev-server": "webpack-dev-server",
     "storybook": "start-storybook -p 9001 -c .storybook",
-    "snapshot": "build-storybook && PERCY_TOKEN=$STORYBOOK_PERCY_TOKEN PERCY_PROJECT=$STORYBOOK_PERCY_PROJECT percy-storybook --widths=375,1280",
+    "snapshot":
+      "build-storybook && PERCY_TOKEN=$STORYBOOK_PERCY_TOKEN PERCY_PROJECT=$STORYBOOK_PERCY_PROJECT percy-storybook --widths=375,1280",
     "webpack-profile": "yarn -s webpack --profile --json > stats.json"
   },
   "jest": {
@@ -108,33 +111,20 @@
       "tests/js/spec/**/*.{js,jsx}",
       "src/sentry/static/sentry/app/**/*.{js,jsx}"
     ],
-    "coverageReporters": [
-      "html",
-      "lcov",
-      "cobertura"
-    ],
-    "snapshotSerializers": [
-      "enzyme-to-json/serializer"
-    ],
+    "coverageReporters": ["html", "lcov", "cobertura"],
+    "snapshotSerializers": ["enzyme-to-json/serializer"],
     "moduleNameMapper": {
       "\\.(css|less|png)$": "<rootDir>/tests/js/helpers/importStyleMock.js",
       "\\.(svg)$": "<rootDir>/tests/js/helpers/svgMock.js",
       "jquery": "<rootDir>/src/sentry/static/sentry/__mocks__/jquery.jsx",
-      "integration-docs-platforms": "<rootDir>/tests/fixtures/integration-docs/_platforms.json"
+      "integration-docs-platforms":
+        "<rootDir>/tests/fixtures/integration-docs/_platforms.json"
     },
-    "modulePaths": [
-      "<rootDir>/src/sentry/static/sentry"
-    ],
-    "setupFiles": [
-      "<rootDir>/tests/js/setup.js"
-    ],
+    "modulePaths": ["<rootDir>/src/sentry/static/sentry"],
+    "setupFiles": ["<rootDir>/tests/js/setup.js"],
     "setupTestFrameworkScriptFile": "<rootDir>/tests/js/setupFramework.js",
-    "testMatch": [
-      "<rootDir>/tests/js/**/?(*.)(spec|test).js?(x)"
-    ],
-    "testPathIgnorePatterns": [
-      "<rootDir>/tests/sentry/lang/javascript/"
-    ],
+    "testMatch": ["<rootDir>/tests/js/**/?(*.)(spec|test).js?(x)"],
+    "testPathIgnorePatterns": ["<rootDir>/tests/sentry/lang/javascript/"],
     "unmockedModulePathPatterns": [
       "<rootDir>/node_modules/react",
       "<rootDir>/node_modules/reflux"
@@ -152,11 +142,12 @@
     "enzyme": "3.2.0",
     "eslint": "4.4.1",
     "eslint-config-prettier": "^2.3.0",
-    "eslint-config-sentry-react": "1.0.4",
+    "eslint-config-sentry-react": "1.1.0",
     "eslint-import-resolver-webpack": "^0.8.3",
     "eslint-plugin-getsentry": "1.0.0",
     "eslint-plugin-import": "^2.7.0",
     "eslint-plugin-react": "7.4.0",
+    "eslint-plugin-jest": "^21.15.0",
     "jest": "22.1.2",
     "jest-glamor-react": "^3.1.2",
     "jest-junit": "^3.4.1",
diff --git a/src/sentry/lint/engine.py b/src/sentry/lint/engine.py
index 74f8e16178..d1d136c600 100644
--- a/src/sentry/lint/engine.py
+++ b/src/sentry/lint/engine.py
@@ -83,7 +83,7 @@ def get_js_files(file_list=None):
         file_list = ['tests/js', 'src/sentry/static/sentry/app']
     return [
         x for x in get_files_for_list(file_list)
-        if x.endswith(('.js', '.jsx'))
+        if x.endswith(('.js', '.jsx', '.jsx.snap', '.js.snap'))
     ]
 
 
diff --git a/src/sentry/static/sentry/app/components/events/eventRow.jsx b/src/sentry/static/sentry/app/components/events/eventRow.jsx
index 398437d26b..155327fef8 100644
--- a/src/sentry/static/sentry/app/components/events/eventRow.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventRow.jsx
@@ -1,6 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import Router from 'react-router';
+import {Link} from 'react-router';
 import EventStore from '../../stores/eventStore';
 import Avatar from '../avatar';
 import TimeSince from '../timeSince';
@@ -45,7 +45,7 @@ class EventRow extends React.Component {
       <tr>
         <td>
           <h5>
-            <Router.Link to={eventLink}>{event.message}</Router.Link>
+            <Link to={eventLink}>{event.message}</Link>
           </h5>
           <small className="tagList">
             {tagList.map(tag => {
diff --git a/tests/js/spec/components/__snapshots__/pluginIcon.spec.jsx.snap b/tests/js/spec/components/__snapshots__/pluginIcon.spec.jsx.snap
index d05f9f7f76..f69deb6467 100644
--- a/tests/js/spec/components/__snapshots__/pluginIcon.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/pluginIcon.spec.jsx.snap
@@ -6,3 +6,10 @@ exports[`PluginIcon renders 1`] = `
   size={20}
 />
 `;
+
+exports[`PluginIcon renders with default icon with invalid plugin id 1`] = `
+<IntegrationIcon
+  image="github"
+  size={20}
+/>
+`;
diff --git a/tests/js/spec/components/__snapshots__/shareIssue.spec.jsx.snap b/tests/js/spec/components/__snapshots__/shareIssue.spec.jsx.snap
index c51c2589b0..e4ad57ed8b 100644
--- a/tests/js/spec/components/__snapshots__/shareIssue.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/shareIssue.spec.jsx.snap
@@ -117,7 +117,7 @@ exports[`ShareIssue renders when not shared 1`] = `
 </DropdownLink>
 `;
 
-exports[`ShareIssue renders when not shared 2`] = `
+exports[`ShareIssue renders when shared  1`] = `
 <DropdownLink
   alwaysRenderMenu={true}
   anchorRight={false}
diff --git a/tests/js/spec/components/actions/ignore.spec.jsx b/tests/js/spec/components/actions/ignore.spec.jsx
index 6d85bd1330..34d37e4574 100644
--- a/tests/js/spec/components/actions/ignore.spec.jsx
+++ b/tests/js/spec/components/actions/ignore.spec.jsx
@@ -32,13 +32,13 @@ describe('IgnoreActions', function() {
 
     it('displays ignored view', function() {
       let button = component.find('a.btn.active');
-      expect(button.length).toBe(1);
+      expect(button).toHaveLength(1);
       expect(button.text()).toBe('');
     });
 
     it('calls onUpdate with unresolved status when clicked', function() {
       component.find('a.btn.active').simulate('click');
-      expect(spy.calledWith({status: 'unresolved'}));
+      expect(spy.calledWith({status: 'unresolved'})).toBeTruthy();
     });
   });
 
diff --git a/tests/js/spec/components/actions/resolve.spec.jsx b/tests/js/spec/components/actions/resolve.spec.jsx
index 38e1e51cd2..a6fd4a2e71 100644
--- a/tests/js/spec/components/actions/resolve.spec.jsx
+++ b/tests/js/spec/components/actions/resolve.spec.jsx
@@ -49,13 +49,13 @@ describe('ResolveActions', function() {
 
     it('displays resolved view', function() {
       let button = component.find('a.btn.active');
-      expect(button.length).toBe(1);
+      expect(button).toHaveLength(1);
       expect(button.text()).toBe('');
     });
 
     it('calls onUpdate with unresolved status when clicked', function() {
       component.find('a.btn.active').simulate('click');
-      expect(spy.calledWith({status: 'unresolved'}));
+      expect(spy.calledWith({status: 'unresolved'})).toBeTruthy();
     });
   });
 
diff --git a/tests/js/spec/components/assigneeSelector.spec.jsx b/tests/js/spec/components/assigneeSelector.spec.jsx
index aa844a24df..d57f094ce9 100644
--- a/tests/js/spec/components/assigneeSelector.spec.jsx
+++ b/tests/js/spec/components/assigneeSelector.spec.jsx
@@ -177,11 +177,11 @@ describe('AssigneeSelector', function() {
       openMenu();
       MemberListStore.loadInitialData([USER_1, USER_2]);
       assigneeSelector.update();
-      expect(assigneeSelector.instance().assignableTeams().length).toBe(1);
+      expect(assigneeSelector.instance().assignableTeams()).toHaveLength(1);
 
-      expect(assigneeSelector.find('Avatar').length).toBe(3);
-      expect(assigneeSelector.find('UserAvatar').length).toBe(2);
-      expect(assigneeSelector.find('TeamAvatar').length).toBe(1);
+      expect(assigneeSelector.find('Avatar')).toHaveLength(3);
+      expect(assigneeSelector.find('UserAvatar')).toHaveLength(2);
+      expect(assigneeSelector.find('TeamAvatar')).toHaveLength(1);
       expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(false);
     });
 
@@ -190,13 +190,13 @@ describe('AssigneeSelector', function() {
       MemberListStore.loadInitialData([USER_1, USER_2]);
       assigneeSelector.update();
 
-      expect(assigneeSelector.find('Avatar').length).toBe(3);
+      expect(assigneeSelector.find('Avatar')).toHaveLength(3);
       expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(false);
 
       MemberListStore.loadInitialData([USER_1, USER_2, USER_3]);
       assigneeSelector.update();
 
-      expect(assigneeSelector.find('Avatar').length).toBe(3);
+      expect(assigneeSelector.find('Avatar')).toHaveLength(3);
       expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(false);
     });
 
@@ -214,7 +214,7 @@ describe('AssigneeSelector', function() {
       setTimeout(() => {
         assigneeSelector.update();
         expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(false);
-        expect(assigneeSelector.find('ActorAvatar').length).toBe(1);
+        expect(assigneeSelector.find('ActorAvatar')).toHaveLength(1);
         done();
       }, 100); //hack
     });
@@ -233,7 +233,7 @@ describe('AssigneeSelector', function() {
       setTimeout(() => {
         assigneeSelector.update();
         expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(false);
-        expect(assigneeSelector.find('ActorAvatar').length).toBe(1);
+        expect(assigneeSelector.find('ActorAvatar')).toHaveLength(1);
         done();
       }, 100); //hack
     });
@@ -283,7 +283,7 @@ describe('AssigneeSelector', function() {
       // if the state doesn't change.
       let sel = mount(<AssigneeSelector id={GROUP_1.id} />, TestStubs.routerContext());
       sel.find('a').simulate('click');
-      expect(sel.find('MenuItem.invite-member').length).toBe(1);
+      expect(sel.find('MenuItem.invite-member')).toHaveLength(1);
 
       // Remove org:write access permission and make sure invite member button is not shown.
       sel = mount(<AssigneeSelector id={GROUP_1.id} />, TestStubs.routerContext());
diff --git a/tests/js/spec/components/dropdownLink.spec.jsx b/tests/js/spec/components/dropdownLink.spec.jsx
index ccd824f835..4c4c758deb 100644
--- a/tests/js/spec/components/dropdownLink.spec.jsx
+++ b/tests/js/spec/components/dropdownLink.spec.jsx
@@ -57,7 +57,7 @@ describe('DropdownLink', function() {
 
         // open
         wrapper.find('a').simulate('click');
-        expect(wrapper.find('li').length).toBe(1);
+        expect(wrapper.find('li')).toHaveLength(1);
       });
     });
     describe('While Opened', function() {
@@ -71,17 +71,17 @@ describe('DropdownLink', function() {
         evt.initEvent('click', false, true);
         document.body.dispatchEvent(evt);
         wrapper.update();
-        expect(wrapper.find('li').length).toBe(0);
+        expect(wrapper.find('li')).toHaveLength(0);
       });
 
       it('closes when dropdown actor button is clicked', function() {
         wrapper.find('a').simulate('click');
-        expect(wrapper.find('li').length).toBe(0);
+        expect(wrapper.find('li')).toHaveLength(0);
       });
 
       it('closes when dropdown menu item is clicked', function() {
         wrapper.find('li').simulate('click');
-        expect(wrapper.find('li').length).toBe(0);
+        expect(wrapper.find('li')).toHaveLength(0);
       });
 
       it('does not close when menu is clicked and `keepMenuOpen` is on', function() {
@@ -92,7 +92,7 @@ describe('DropdownLink', function() {
         );
         wrapper.find('a').simulate('click');
         wrapper.find('li').simulate('click');
-        expect(wrapper.find('li').length).toBe(1);
+        expect(wrapper.find('li')).toHaveLength(1);
         wrapper.unmount();
       });
     });
@@ -119,19 +119,19 @@ describe('DropdownLink', function() {
         // open
         wrapper.find('li').simulate('click');
         // State does not change
-        expect(wrapper.find('.dropdown-menu').length).toBe(1);
+        expect(wrapper.find('.dropdown-menu')).toHaveLength(1);
       });
 
       it('does not close when document is clicked', function() {
         jQuery(document).click();
         // State does not change
-        expect(wrapper.find('.dropdown-menu').length).toBe(1);
+        expect(wrapper.find('.dropdown-menu')).toHaveLength(1);
       });
 
       it('does not close when dropdown actor is clicked', function() {
         wrapper.find('a').simulate('click');
         // State does not change
-        expect(wrapper.find('.dropdown-menu').length).toBe(1);
+        expect(wrapper.find('.dropdown-menu')).toHaveLength(1);
       });
     });
     describe('Closed', function() {
@@ -146,7 +146,7 @@ describe('DropdownLink', function() {
       it('does not open when dropdown actor is clicked', function() {
         wrapper.find('a').simulate('click');
         // State does not change
-        expect(wrapper.find('.dropdown-menu').length).toBe(0);
+        expect(wrapper.find('.dropdown-menu')).toHaveLength(0);
       });
     });
   });
@@ -198,11 +198,11 @@ describe('DropdownLink', function() {
 
     it('Opens / closes on mouse enter and leave', function() {
       wrapper.find('.dropdown-menu a').simulate('mouseEnter');
-      expect(wrapper.find('.dropdown-menu').length).toBe(2);
+      expect(wrapper.find('.dropdown-menu')).toHaveLength(2);
 
       wrapper.find('a.nested-menu').simulate('mouseLeave');
 
-      expect(wrapper.find('.dropdown-menu').length).toBe(1);
+      expect(wrapper.find('.dropdown-menu')).toHaveLength(1);
     });
 
     it('closes when first level nested actor is clicked', function() {
diff --git a/tests/js/spec/components/group/tagDistributionMeter.spec.jsx b/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
index f9e10dc2fa..ef592df7c0 100644
--- a/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
+++ b/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
@@ -102,7 +102,7 @@ describe('TagDistributionMeter', function() {
         },
         () => {
           element.renderBody();
-          expect(element.renderSegments.calledOnce);
+          expect(element.renderSegments.callCount).toBeTruthy();
           done();
         }
       );
diff --git a/tests/js/spec/components/lazyLoad.spec.jsx b/tests/js/spec/components/lazyLoad.spec.jsx
index 7a4b2e36f3..5fccaf5fa6 100644
--- a/tests/js/spec/components/lazyLoad.spec.jsx
+++ b/tests/js/spec/components/lazyLoad.spec.jsx
@@ -11,7 +11,7 @@ describe('LazyLoad', function() {
     let wrapper = shallow(<LazyLoad component={getComponent} />);
 
     // Should be loading
-    expect(wrapper.find('LoadingIndicator').length).toBe(1);
+    expect(wrapper.find('LoadingIndicator')).toHaveLength(1);
   });
 
   it('renders when given a promise of a "button" component', async function() {
@@ -23,7 +23,7 @@ describe('LazyLoad', function() {
     let wrapper = mount(<LazyLoad component={getComponent} />);
 
     // Should be loading
-    expect(wrapper.find('LoadingIndicator').length).toBe(1);
+    expect(wrapper.find('LoadingIndicator')).toHaveLength(1);
 
     // resolve with button
     let ResolvedComponent = 'button';
@@ -32,8 +32,8 @@ describe('LazyLoad', function() {
     await promise;
     wrapper.update();
     expect(wrapper.state('Component')).toEqual('button');
-    expect(wrapper.find('button').length).toBe(1);
-    expect(wrapper.find('LoadingIndicator').length).toBe(0);
+    expect(wrapper.find('button')).toHaveLength(1);
+    expect(wrapper.find('LoadingIndicator')).toHaveLength(0);
   });
 
   it('renders with error message when promise is rejected', async function() {
@@ -56,8 +56,8 @@ describe('LazyLoad', function() {
     }
 
     wrapper.update();
-    expect(wrapper.find('LoadingIndicator').length).toBe(0);
-    expect(wrapper.find('LoadingError').length).toBe(1);
+    expect(wrapper.find('LoadingIndicator')).toHaveLength(0);
+    expect(wrapper.find('LoadingError')).toHaveLength(1);
     // eslint-disable-next-line no-console
     expect(console.error).toHaveBeenCalled();
     // eslint-disable-next-line no-console
diff --git a/tests/js/spec/components/modals/sudoModal.spec.jsx b/tests/js/spec/components/modals/sudoModal.spec.jsx
index 0f9e6af38a..28af0e86c2 100644
--- a/tests/js/spec/components/modals/sudoModal.spec.jsx
+++ b/tests/js/spec/components/modals/sudoModal.spec.jsx
@@ -55,7 +55,7 @@ describe('Sudo Modal', function() {
     let orgDeleteMock;
 
     // No Modal
-    expect($('.modal input').length).toBe(0);
+    expect($('.modal input')).toHaveLength(0);
 
     // Should return w/ `sudoRequired`
     api.request('/organizations/org-slug/', {
@@ -67,7 +67,7 @@ describe('Sudo Modal', function() {
     SudoModal.prototype.componentDidMount = function() {
       try {
         const $input = $('.modal input');
-        expect($input.length).toBe(1);
+        expect($input).toHaveLength(1);
         // Original callbacks should not have been called
         expect(successCb).not.toBeCalled();
         expect(errorCb).not.toBeCalled();
diff --git a/tests/js/spec/components/pluginIcon.spec.jsx b/tests/js/spec/components/pluginIcon.spec.jsx
index c55f67161c..e9440df9cd 100644
--- a/tests/js/spec/components/pluginIcon.spec.jsx
+++ b/tests/js/spec/components/pluginIcon.spec.jsx
@@ -13,6 +13,7 @@ describe('PluginIcon', function() {
     expect(wrapper).toMatchSnapshot();
   });
 
+  // doesn't work because of the above comment
   it.skip('renders with default icon with invalid plugin id', function() {
     let wrapper = shallow(<PluginIcon pluginId="invalid" size={20} />);
     expect(wrapper).toMatchSnapshot();
diff --git a/tests/js/spec/components/projectHeader/projectSelector.spec.jsx b/tests/js/spec/components/projectHeader/projectSelector.spec.jsx
index b20607bf4b..bed8b15e01 100644
--- a/tests/js/spec/components/projectHeader/projectSelector.spec.jsx
+++ b/tests/js/spec/components/projectHeader/projectSelector.spec.jsx
@@ -149,7 +149,7 @@ describe('ProjectSelector', function() {
       const input = wrapper.find('.project-filter input');
       input.simulate('click', {target: input});
 
-      expect(wrapper.find('.dropdown-menu').length).toBe(1);
+      expect(wrapper.find('.dropdown-menu')).toHaveLength(1);
     });
 
     it('closes dropdown when project is selected', function() {
@@ -160,7 +160,7 @@ describe('ProjectSelector', function() {
         .find('.dropdown-menu [role="presentation"] a')
         .first()
         .simulate('click');
-      expect(wrapper.find('.dropdown-menu').length).toBe(0);
+      expect(wrapper.find('.dropdown-menu')).toHaveLength(0);
     });
 
     it('shows empty filter message when filtering has no results', function() {
diff --git a/tests/js/spec/components/shareIssue.spec.jsx b/tests/js/spec/components/shareIssue.spec.jsx
index b5877ac450..da1f50ef23 100644
--- a/tests/js/spec/components/shareIssue.spec.jsx
+++ b/tests/js/spec/components/shareIssue.spec.jsx
@@ -10,7 +10,7 @@ describe('ShareIssue', function() {
     expect(wrapper).toMatchSnapshot();
   });
 
-  it('renders when not shared', function() {
+  it('renders when shared ', function() {
     let wrapper = shallow(
       <ShareIssue
         isSharing={true}
diff --git a/tests/js/spec/stores/alertStore.spec.jsx b/tests/js/spec/stores/alertStore.spec.jsx
index be2ed0659b..f8d466deb2 100644
--- a/tests/js/spec/stores/alertStore.spec.jsx
+++ b/tests/js/spec/stores/alertStore.spec.jsx
@@ -20,7 +20,7 @@ describe('AlertStore', function() {
         type: 'info',
       });
 
-      expect(AlertStore.alerts.length).toEqual(2);
+      expect(AlertStore.alerts).toHaveLength(2);
       expect(AlertStore.alerts[0].key).toEqual(0);
       expect(AlertStore.alerts[1].key).toEqual(1);
     });
@@ -36,7 +36,7 @@ describe('AlertStore', function() {
 
       AlertStore.onCloseAlert(AlertStore.alerts[1]);
 
-      expect(AlertStore.alerts.length).toEqual(2);
+      expect(AlertStore.alerts).toHaveLength(2);
       expect(AlertStore.alerts[0].key).toEqual(1);
       expect(AlertStore.alerts[1].key).toEqual(3);
     });
@@ -44,7 +44,7 @@ describe('AlertStore', function() {
       let alert = {key: 1, id: 'test', message: 'foo', type: 'error'};
       AlertStore.onCloseAlert(alert);
       AlertStore.onAddAlert(alert);
-      expect(AlertStore.alerts.length).toEqual(0);
+      expect(AlertStore.alerts).toHaveLength(0);
     });
   });
 });
diff --git a/tests/js/spec/stores/groupingStore.spec.jsx b/tests/js/spec/stores/groupingStore.spec.jsx
index 57cc93089f..16fa2dab23 100644
--- a/tests/js/spec/stores/groupingStore.spec.jsx
+++ b/tests/js/spec/stores/groupingStore.spec.jsx
@@ -131,8 +131,8 @@ describe('Grouping Store', function() {
       let calls = trigger.mock.calls;
       let arg = calls[calls.length - 1][0];
 
-      expect(arg.filteredSimilarItems.length).toBe(1);
-      expect(arg.similarItems.length).toBe(3);
+      expect(arg.filteredSimilarItems).toHaveLength(1);
+      expect(arg.similarItems).toHaveLength(3);
       expect(arg).toMatchObject({
         loading: false,
         error: false,
@@ -221,7 +221,7 @@ describe('Grouping Store', function() {
       let calls = trigger.mock.calls;
       return promise.then(() => {
         let arg = calls[calls.length - 1][0];
-        expect(arg.mergedItems.length).toBe(5);
+        expect(arg.mergedItems).toHaveLength(5);
         expect(arg).toMatchObject({
           loading: false,
           error: false,
diff --git a/tests/js/spec/utils/streamManager.spec.js b/tests/js/spec/utils/streamManager.spec.js
index 58917b9551..50a740ec85 100644
--- a/tests/js/spec/utils/streamManager.spec.js
+++ b/tests/js/spec/utils/streamManager.spec.js
@@ -24,7 +24,7 @@ describe('StreamManager', function() {
       let mgr = new StreamManager(store);
       expect(() => mgr.push()).not.toThrow();
       expect(() => mgr.push([])).not.toThrow();
-      expect(mgr.idList.length).toEqual(0);
+      expect(mgr.idList).toHaveLength(0);
     });
 
     it('adds items', function() {
@@ -33,7 +33,7 @@ describe('StreamManager', function() {
       let items = [{id: 1}];
       mgr.push(items);
 
-      expect(mgr.idList.length).toEqual(1);
+      expect(mgr.idList).toHaveLength(1);
       expect(storeAdd.calledWith(items)).toBe(true);
     });
 
@@ -43,7 +43,7 @@ describe('StreamManager', function() {
       let item = {id: 1};
       mgr.push(item);
 
-      expect(mgr.idList.length).toEqual(1);
+      expect(mgr.idList).toHaveLength(1);
       expect(storeAdd.calledWith([item])).toBe(true);
     });
 
@@ -53,7 +53,7 @@ describe('StreamManager', function() {
       let mgrTrim = sinon.spy(mgr, 'trim');
       mgr.push([{id: 1}, {id: 2}]);
 
-      expect(mgr.idList.length).toEqual(1);
+      expect(mgr.idList).toHaveLength(1);
       expect(storeRemove.calledWith(2)).toBe(true);
       expect(mgrTrim.called).toBe(true);
     });
@@ -75,7 +75,7 @@ describe('StreamManager', function() {
       mgr.trim();
 
       expect(mgr.idList).toEqual([1]);
-      expect(mgr.idList.length).toEqual(1);
+      expect(mgr.idList).toHaveLength(1);
       expect(storeRemove.firstCall.calledWith(2)).toBe(true);
       expect(storeRemove.secondCall.calledWith(3)).toBe(true);
     });
@@ -87,7 +87,7 @@ describe('StreamManager', function() {
       mgr.trim();
 
       expect(mgr.idList).toEqual([1, 2, 3]);
-      expect(mgr.idList.length).toEqual(3);
+      expect(mgr.idList).toHaveLength(3);
       expect(storeRemove.called).toBe(false);
     });
   });
diff --git a/tests/js/spec/utils/utils.spec.jsx b/tests/js/spec/utils/utils.spec.jsx
index 2991d72aa4..37afb73a09 100644
--- a/tests/js/spec/utils/utils.spec.jsx
+++ b/tests/js/spec/utils/utils.spec.jsx
@@ -145,7 +145,7 @@ describe('utils.parseRepo', function() {
   it('should work for full BitBucket url', function() {
     expect(parseRepo('https://bitbucket.org/example/example')).toEqual('example/example');
   });
-  it('should work for trailing slash', function() {
+  it('should work for trailing Bitbucket slash', function() {
     expect(parseRepo('https://bitbucket.org/example/example/')).toEqual(
       'example/example'
     );
diff --git a/tests/js/spec/utils/withProjects.spec.jsx b/tests/js/spec/utils/withProjects.spec.jsx
index 60e5a89f2d..31a6823ad7 100644
--- a/tests/js/spec/utils/withProjects.spec.jsx
+++ b/tests/js/spec/utils/withProjects.spec.jsx
@@ -22,7 +22,7 @@ describe('withProjects HoC', function() {
 
     wrapper.update();
     let props = wrapper.find('MyComponent').prop('projects');
-    expect(props.length).toBe(1);
+    expect(props).toHaveLength(1);
     expect(props[0].id).toBe(project.id);
   });
 });
diff --git a/tests/js/spec/views/organizationIntegrationConfig.spec.jsx b/tests/js/spec/views/organizationIntegrationConfig.spec.jsx
index b2ed40c402..a0268c8ce4 100644
--- a/tests/js/spec/views/organizationIntegrationConfig.spec.jsx
+++ b/tests/js/spec/views/organizationIntegrationConfig.spec.jsx
@@ -81,8 +81,8 @@ describe('OrganizationIntegrationConfig', function() {
         global.open = open;
 
         wrapper.find('PanelHeader Button').simulate('click');
-        expect(open.mock.calls.length).toBe(1);
-        expect(focus.mock.calls.length).toBe(1);
+        expect(open.mock.calls).toHaveLength(1);
+        expect(focus.mock.calls).toHaveLength(1);
         expect(open.mock.calls[0][2]).toBe(
           'scrollbars=yes,width=100,height=100,top=334,left=462'
         );
@@ -109,7 +109,7 @@ describe('OrganizationIntegrationConfig', function() {
           },
         });
 
-        expect(wrapper.instance().state.itemList.length).toBe(2);
+        expect(wrapper.instance().state.itemList).toHaveLength(2);
       });
 
       it('Merges existing integrations', function() {
@@ -135,7 +135,7 @@ describe('OrganizationIntegrationConfig', function() {
           },
         });
 
-        expect(wrapper.instance().state.itemList.length).toBe(1);
+        expect(wrapper.instance().state.itemList).toHaveLength(1);
         expect(wrapper.instance().state.itemList[0]).toBe(updatedIntegration);
       });
 
diff --git a/tests/js/spec/views/organizationTeamProjects.spec.jsx b/tests/js/spec/views/organizationTeamProjects.spec.jsx
index fe59d37b66..f78acd9f5a 100644
--- a/tests/js/spec/views/organizationTeamProjects.spec.jsx
+++ b/tests/js/spec/views/organizationTeamProjects.spec.jsx
@@ -69,13 +69,13 @@ describe('OrganizationTeamProjects', function() {
     );
 
     let star = wrapper.find('.icon-star-outline');
-    expect(star.length).toBe(1);
+    expect(star).toHaveLength(1);
     star.simulate('click');
 
     star = wrapper.find('.icon-star-outline');
-    expect(star.length).toBe(0);
+    expect(star).toHaveLength(0);
     star = wrapper.find('.icon-star-solid');
-    expect(star.length).toBe(1);
+    expect(star).toHaveLength(1);
 
     expect(putMock).toHaveBeenCalledTimes(1);
   });
diff --git a/tests/js/spec/views/projectSavedSearches.spec.jsx b/tests/js/spec/views/projectSavedSearches.spec.jsx
index c5c411109c..e8018525bc 100644
--- a/tests/js/spec/views/projectSavedSearches.spec.jsx
+++ b/tests/js/spec/views/projectSavedSearches.spec.jsx
@@ -182,7 +182,7 @@ describe('ProjectSavedSearches', function() {
     ).toBe(true);
   });
 
-  it('rolls back update default on error', function() {
+  it('rolls back update default on PUT error', function() {
     let url = `/projects/${org.slug}/${project.slug}/searches/2/`;
     let update = MockApiClient.addMockResponse({
       url,
diff --git a/tests/js/spec/views/projectTags.spec.jsx b/tests/js/spec/views/projectTags.spec.jsx
index 1b9f4e7d45..879c7b52d8 100644
--- a/tests/js/spec/views/projectTags.spec.jsx
+++ b/tests/js/spec/views/projectTags.spec.jsx
@@ -64,6 +64,6 @@ describe('ProjectTags', function() {
 
     wrapper.update();
 
-    expect(wrapper.state('tags').length).toBe(tags - 1);
+    expect(wrapper.state('tags')).toHaveLength(tags - 1);
   });
 });
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index 591d678624..4f6eef316a 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -250,7 +250,7 @@ describe('SearchBar', function() {
       searchBar.getCursorPosition.mockReturnValue(15); // end of line
       searchBar.updateAutoCompleteItems();
       expect(searchBar.state.searchTerm).toEqual('fu');
-      expect(searchBar.state.searchItems.length).toEqual(0);
+      expect(searchBar.state.searchItems).toHaveLength(0);
       expect(searchBar.state.activeSearchItem).toEqual(0);
     });
 
diff --git a/tests/js/spec/views/stream/stream.spec.jsx b/tests/js/spec/views/stream/stream.spec.jsx
index 206e208ba7..621b5d5280 100644
--- a/tests/js/spec/views/stream/stream.spec.jsx
+++ b/tests/js/spec/views/stream/stream.spec.jsx
@@ -328,7 +328,7 @@ describe('Stream', function() {
         dataLoading: false,
       });
 
-      expect(wrapper.find('.awaiting-events').length).toEqual(1);
+      expect(wrapper.find('.awaiting-events')).toHaveLength(1);
 
       context.project.firstEvent = true; // Reset for other tests
     });
diff --git a/yarn.lock b/yarn.lock
index 91559c6869..75f2407014 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -3408,9 +3408,9 @@ eslint-config-prettier@^2.3.0:
   dependencies:
     get-stdin "^5.0.1"
 
-eslint-config-sentry-react@1.0.4:
-  version "1.0.4"
-  resolved "https://registry.yarnpkg.com/eslint-config-sentry-react/-/eslint-config-sentry-react-1.0.4.tgz#365d06ef9346f99485e3a814ea623070eae1ae1d"
+eslint-config-sentry-react@1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/eslint-config-sentry-react/-/eslint-config-sentry-react-1.1.0.tgz#9112e05e5193c34672b18ebdedd507d0899f035a"
   dependencies:
     eslint-config-sentry "^1.0.4"
 
@@ -3467,6 +3467,10 @@ eslint-plugin-import@^2.7.0:
     minimatch "^3.0.3"
     read-pkg-up "^2.0.0"
 
+eslint-plugin-jest@^21.15.0:
+  version "21.15.0"
+  resolved "https://registry.yarnpkg.com/eslint-plugin-jest/-/eslint-plugin-jest-21.15.0.tgz#645a3f560d3e61d99611b215adc80b4f31e6d896"
+
 eslint-plugin-react@7.4.0:
   version "7.4.0"
   resolved "https://registry.yarnpkg.com/eslint-plugin-react/-/eslint-plugin-react-7.4.0.tgz#300a95861b9729c087d362dd64abcc351a74364a"
