commit 57c6933128fb741248874a6f666b628c4f47a20b
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Mar 8 15:10:20 2011 -0800

    Set a last_message_id so when thrashing is hit there is still a point of reference for tracing

diff --git a/sentry/client/base.py b/sentry/client/base.py
index e4d770df3c..2087205b24 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -92,7 +92,14 @@ class SentryClient(object):
                     # cache.incr call.
                     thrash_count = 0
                 if thrash_count > conf.THRASHING_LIMIT:
-                    return
+                    message_id = cache.get('%s:last_message_id' % cache_key)
+                    if request:
+                        # attach the sentry object to the request
+                        request.sentry = {
+                            'id': message_id,
+                            'thrashed': True,
+                        }
+                    return message_id
 
         for filter_ in get_filters():
             kwargs = filter_(None).process(kwargs) or kwargs
@@ -112,6 +119,10 @@ class SentryClient(object):
                 'id': message_id,
             }
         
+        if conf.THRASHING_TIMEOUT and conf.THRASHING_LIMIT:
+            # store the last message_id incase we hit thrashing limits
+            cache.set('%s:last_message_id' % cache_key, message_id, conf.THRASHING_LIMIT+5)
+        
         return message_id
 
     def send(self, **kwargs):
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 42ac832d47..510db2b3ed 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -330,8 +330,16 @@ class SentryTestCase(TestCase):
         Message.objects.all().delete()
         GroupedMessage.objects.all().delete()
         
-        for i in range(0, 50):
-            get_client().create_from_text('hi')
+        message_id = None
+        for i in range(0, 10):
+            this_message_id = get_client().create_from_text('hi')
+            self.assertTrue(this_message_id is not None)
+            self.assertNotEquals(this_message_id, message_id)
+            message_id = this_message_id
+
+        for i in range(0, 40):
+            this_message_id = get_client().create_from_text('hi')
+            self.assertEquals(this_message_id, message_id)
         
         self.assertEquals(Message.objects.count(), conf.THRASHING_LIMIT)
     
