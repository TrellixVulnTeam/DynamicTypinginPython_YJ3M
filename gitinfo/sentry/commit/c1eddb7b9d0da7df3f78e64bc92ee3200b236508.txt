commit c1eddb7b9d0da7df3f78e64bc92ee3200b236508
Author: josh <josh@jrl.ninja>
Date:   Tue Dec 10 10:09:38 2019 -0800

    feat: add and fix bitfield tests on Django 1.9, 1.10, bring back Exact lookup support and refactor lookup style (#16022)

diff --git a/bin/load-mocks b/bin/load-mocks
index bea1235841..8c62b950a5 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -15,7 +15,6 @@ from uuid import uuid4
 import six
 from django.conf import settings
 from django.db import IntegrityError, transaction
-from django.db.models import F
 from django.utils import timezone
 from loremipsum import Generator
 from pytz import utc
@@ -373,7 +372,7 @@ def main(num_events=1, extra_events=False):
             if not project.first_event:
                 project.update(first_event=project.date_added)
             if not project.flags.has_releases:
-                project.update(flags=F("flags").bitor(Project.flags.has_releases))
+                project.update(flags=Project.flags.has_releases)
 
             monitor, created = Monitor.objects.get_or_create(
                 name=next(MONITOR_NAMES),
diff --git a/src/bitfield/__init__.py b/src/bitfield/__init__.py
index d2248ae1fc..8d64294299 100644
--- a/src/bitfield/__init__.py
+++ b/src/bitfield/__init__.py
@@ -1,7 +1,3 @@
-"""
-django-bitfield
-~~~~~~~~~~~~~~~
-"""
 from __future__ import absolute_import
 
 from bitfield.models import Bit, BitHandler, BitField  # NOQA
diff --git a/src/bitfield/admin.py b/src/bitfield/admin.py
index 4d3c1d9dfc..f2231df88a 100644
--- a/src/bitfield/admin.py
+++ b/src/bitfield/admin.py
@@ -12,10 +12,6 @@ from bitfield.compat import bitor
 
 
 class BitFieldListFilter(FieldListFilter):
-    """
-    BitField list filter.
-    """
-
     def __init__(self, field, request, params, model, model_admin, field_path):
         self.lookup_kwarg = field_path
         self.lookup_val = int(request.GET.get(self.lookup_kwarg, 0))
diff --git a/src/bitfield/models.py b/src/bitfield/models.py
index bea2eca5ac..18a4b65296 100644
--- a/src/bitfield/models.py
+++ b/src/bitfield/models.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.db.models.fields import BigIntegerField, Field
 
 from bitfield.forms import BitFormField
@@ -136,13 +138,7 @@ class BitField(BigIntegerField):
         if isinstance(getattr(value, "expression", None), Bit):
             value = value.expression
         if isinstance(value, (BitHandler, Bit)):
-            if hasattr(self, "class_lookups"):
-                # Django 1.7+
-                return [value.mask]
-            else:
-                return BitQueryLookupWrapper(
-                    self.model._meta.db_table, self.db_column or self.name, value
-                )
+            return [value.mask]
         return BigIntegerField.get_db_prep_lookup(
             self, lookup_type=lookup_type, value=value, connection=connection, prepared=prepared
         )
@@ -158,6 +154,15 @@ class BitField(BigIntegerField):
         if isinstance(value, Bit):
             value = value.mask
         if not isinstance(value, BitHandler):
+            # Regression for #1425: fix bad data that was created resulting
+            # in negative values for flags.  Compute the value that would
+            # have been visible ot the application to preserve compatibility.
+            if isinstance(value, six.integer_types) and value < 0:
+                new_value = 0
+                for bit_number, _ in enumerate(self.flags):
+                    new_value |= value & (2 ** bit_number)
+                value = new_value
+
             value = BitHandler(value, self.flags, self.labels)
         else:
             # Ensure flags are consistent for unpickling
@@ -170,7 +175,4 @@ class BitField(BigIntegerField):
         return name, path, args, kwargs
 
 
-try:
-    BitField.register_lookup(BitQueryLookupWrapper)
-except AttributeError:
-    pass
+BitField.register_lookup(BitQueryLookupWrapper)
diff --git a/src/bitfield/query.py b/src/bitfield/query.py
index 6cfba07db5..bfa51a37fb 100644
--- a/src/bitfield/query.py
+++ b/src/bitfield/query.py
@@ -2,46 +2,22 @@ from __future__ import absolute_import
 
 from bitfield.types import Bit, BitHandler
 
+from django.db.models.lookups import Exact
 
-class BitQueryLookupWrapper(object):
-    def __init__(self, alias, column, bit):
-        self.table_alias = alias
-        self.column = column
-        self.bit = bit
 
-    def as_sql(self, qn, connection=None):
-        """
-        Create the proper SQL fragment. This inserts something like
-        "(T0.flags & value) != 0".
+class BitQueryLookupWrapper(Exact):
+    def process_lhs(self, qn, connection, lhs=None):
+        lhs_sql, params = super(BitQueryLookupWrapper, self).process_lhs(qn, connection, lhs)
+        if self.rhs:
+            lhs_sql = lhs_sql + " & %s"
+        else:
+            lhs_sql = lhs_sql + " | %s"
+        params.extend(self.process_rhs(qn, connection)[1])
+        return lhs_sql, params
 
-        This will be called by Where.as_sql()
-        """
-        if self.bit:
-            return ("(%s.%s | %d)" % (qn(self.table_alias), qn(self.column), self.bit.mask), [])
-        return ("(%s.%s & %d)" % (qn(self.table_alias), qn(self.column), self.bit.mask), [])
+    def get_db_prep_lookup(self, value, connection, prepared=False):
+        v = value.mask if isinstance(value, (BitHandler, Bit)) else value
+        return super(BitQueryLookupWrapper, self).get_db_prep_lookup(v, connection)
 
-
-try:
-    # Django 1.7+
-    from django.db.models.lookups import Lookup
-
-    class BitQueryLookupWrapper(Lookup):  # NOQA
-        def process_lhs(self, qn, connection, lhs=None):
-            lhs_sql, params = super(BitQueryLookupWrapper, self).process_lhs(qn, connection, lhs)
-            if self.rhs:
-                lhs_sql = lhs_sql + " & %s"
-            else:
-                lhs_sql = lhs_sql + " | %s"
-            params.extend(self.process_rhs(qn, connection)[1])
-            return lhs_sql, params
-
-        def get_db_prep_lookup(self, value, connection, prepared=False):
-            v = value.mask if isinstance(value, (BitHandler, Bit)) else value
-            return super(BitQueryLookupWrapper, self).get_db_prep_lookup(v, connection)
-
-        def get_prep_lookup(self):
-            return self.rhs
-
-
-except ImportError:
-    pass
+    def get_prep_lookup(self):
+        return self.rhs
diff --git a/src/bitfield/types.py b/src/bitfield/types.py
index 0cf60f526d..67d24ead79 100644
--- a/src/bitfield/types.py
+++ b/src/bitfield/types.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-import django
 import six
 
 from six import string_types
@@ -12,10 +11,6 @@ def cmp(a, b):
 
 
 class Bit(object):
-    """
-    Represents a single Bit.
-    """
-
     def __init__(self, number, is_set=True):
         self.number = number
         self.is_set = bool(is_set)
@@ -27,11 +22,6 @@ class Bit(object):
     def __repr__(self):
         return "<%s: number=%d, is_set=%s>" % (self.__class__.__name__, self.number, self.is_set)
 
-    # def __str__(self):
-    #     if self.is_set:
-    #         return 'Yes'
-    #     return 'No'
-
     def __int__(self):
         return self.mask
 
@@ -260,15 +250,14 @@ class BitHandler(object):
         return self._labels[flag]
 
 
-if django.VERSION[:2] >= (1, 8):
-    from django.core.exceptions import ImproperlyConfigured
+from django.core.exceptions import ImproperlyConfigured
 
-    # We need to register adapters in Django 1.8 in order to prevent
-    # "ProgrammingError: can't adapt type"
-    try:
-        from django.db.backends.postgresql_psycopg2.base import Database
+# We need to register adapters in Django 1.8 in order to prevent
+# "ProgrammingError: can't adapt type"
+try:
+    from django.db.backends.postgresql_psycopg2.base import Database
 
-        Database.extensions.register_adapter(Bit, lambda x: Database.extensions.AsIs(int(x)))
-        Database.extensions.register_adapter(BitHandler, lambda x: Database.extensions.AsIs(int(x)))
-    except ImproperlyConfigured:
-        pass
+    Database.extensions.register_adapter(Bit, lambda x: Database.extensions.AsIs(int(x)))
+    Database.extensions.register_adapter(BitHandler, lambda x: Database.extensions.AsIs(int(x)))
+except ImproperlyConfigured:
+    pass
diff --git a/src/sentry/api/endpoints/organization_member_index.py b/src/sentry/api/endpoints/organization_member_index.py
index e9bc3de740..99350facd2 100644
--- a/src/sentry/api/endpoints/organization_member_index.py
+++ b/src/sentry/api/endpoints/organization_member_index.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 import six
 
 from django.db import transaction
-from django.db.models import Q, F
+from django.db.models import Q
 from rest_framework import serializers
 from rest_framework.response import Response
 from django.conf import settings
@@ -134,9 +134,9 @@ class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
                     ssoFlag = OrganizationMember.flags["sso:linked"]
                     ssoLinked = "true" in value
                     if ssoLinked:
-                        queryset = queryset.filter(flags=F("flags").bitor(ssoFlag))
+                        queryset = queryset.filter(flags=ssoFlag)
                     else:
-                        queryset = queryset.filter(flags=F("flags").bitand(~ssoFlag))
+                        queryset = queryset.filter(flags=~ssoFlag)
 
                 elif key == "has2fa":
                     has2fa = "true" in value
diff --git a/src/sentry/api/endpoints/project_key_details.py b/src/sentry/api/endpoints/project_key_details.py
index 8fafefb73c..3d994991dd 100644
--- a/src/sentry/api/endpoints/project_key_details.py
+++ b/src/sentry/api/endpoints/project_key_details.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-from django.db.models import F
 from rest_framework import status
 from rest_framework.response import Response
 
@@ -42,7 +41,7 @@ class ProjectKeyDetailsEndpoint(ProjectEndpoint):
     def get(self, request, project, key_id):
         try:
             key = ProjectKey.objects.get(
-                project=project, public_key=key_id, roles=F("roles").bitor(ProjectKey.roles.store)
+                project=project, public_key=key_id, roles=ProjectKey.roles.store
             )
         except ProjectKey.DoesNotExist:
             raise ResourceDoesNotExist
@@ -66,7 +65,7 @@ class ProjectKeyDetailsEndpoint(ProjectEndpoint):
         """
         try:
             key = ProjectKey.objects.get(
-                project=project, public_key=key_id, roles=F("roles").bitor(ProjectKey.roles.store)
+                project=project, public_key=key_id, roles=ProjectKey.roles.store
             )
         except ProjectKey.DoesNotExist:
             raise ResourceDoesNotExist
@@ -134,7 +133,7 @@ class ProjectKeyDetailsEndpoint(ProjectEndpoint):
         """
         try:
             key = ProjectKey.objects.get(
-                project=project, public_key=key_id, roles=F("roles").bitor(ProjectKey.roles.store)
+                project=project, public_key=key_id, roles=ProjectKey.roles.store
             )
         except ProjectKey.DoesNotExist:
             raise ResourceDoesNotExist
diff --git a/src/sentry/api/endpoints/project_key_stats.py b/src/sentry/api/endpoints/project_key_stats.py
index 645bd40590..b6c7d3f6ae 100644
--- a/src/sentry/api/endpoints/project_key_stats.py
+++ b/src/sentry/api/endpoints/project_key_stats.py
@@ -3,7 +3,6 @@ from __future__ import absolute_import
 import six
 
 from collections import OrderedDict
-from django.db.models import F
 from rest_framework.response import Response
 
 from sentry import tsdb
@@ -17,7 +16,7 @@ class ProjectKeyStatsEndpoint(ProjectEndpoint, StatsMixin):
     def get(self, request, project, key_id):
         try:
             key = ProjectKey.objects.get(
-                project=project, public_key=key_id, roles=F("roles").bitor(ProjectKey.roles.store)
+                project=project, public_key=key_id, roles=ProjectKey.roles.store
             )
         except ProjectKey.DoesNotExist:
             raise ResourceDoesNotExist
diff --git a/src/sentry/api/endpoints/project_keys.py b/src/sentry/api/endpoints/project_keys.py
index b52e03ea81..3e167386a8 100644
--- a/src/sentry/api/endpoints/project_keys.py
+++ b/src/sentry/api/endpoints/project_keys.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-from django.db.models import F
 from rest_framework import status
 from rest_framework.response import Response
 
@@ -45,9 +44,7 @@ class ProjectKeysEndpoint(ProjectEndpoint):
         :pparam string project_slug: the slug of the project the client keys
                                      belong to.
         """
-        queryset = ProjectKey.objects.filter(
-            project=project, roles=F("roles").bitor(ProjectKey.roles.store)
-        )
+        queryset = ProjectKey.objects.filter(project=project, roles=ProjectKey.roles.store)
         status = request.GET.get("status")
         if status == "active":
             queryset = queryset.filter(status=ProjectKeyStatus.ACTIVE)
diff --git a/src/sentry/api/endpoints/user_subscriptions.py b/src/sentry/api/endpoints/user_subscriptions.py
index eab0d237a4..eaeb413186 100644
--- a/src/sentry/api/endpoints/user_subscriptions.py
+++ b/src/sentry/api/endpoints/user_subscriptions.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-from django.db.models import F
 from django.utils import timezone
 from rest_framework import serializers
 
@@ -110,6 +109,6 @@ class UserSubscriptionsEndpoint(UserEndpoint):
 
         newsletter.create_or_update_subscriptions(user, **kwargs)
 
-        user.update(flags=F("flags").bitand(~User.flags.newsletter_consent_prompt))
+        user.update(flags=~User.flags.newsletter_consent_prompt)
 
         return self.respond(status=204)
diff --git a/src/sentry/api/serializers/models/auth_provider.py b/src/sentry/api/serializers/models/auth_provider.py
index b27d53a4e5..2e0f5b45ec 100644
--- a/src/sentry/api/serializers/models/auth_provider.py
+++ b/src/sentry/api/serializers/models/auth_provider.py
@@ -2,8 +2,6 @@ from __future__ import absolute_import
 
 import six
 
-from django.db.models import F
-
 from sentry.api.serializers import Serializer, register
 from sentry.models import AuthProvider, OrganizationMember
 from sentry.utils.http import absolute_uri
@@ -14,8 +12,7 @@ class AuthProviderSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         organization = obj.organization
         pending_links_count = OrganizationMember.objects.filter(
-            organization=organization,
-            flags=F("flags").bitand(~OrganizationMember.flags["sso:linked"]),
+            organization=organization, flags=~OrganizationMember.flags["sso:linked"]
         ).count()
 
         login_url = organization.get_url()
diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index 0e820579d5..9f3cf1c56e 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -8,7 +8,6 @@ from django.conf import settings
 from django.contrib import messages
 from django.core.urlresolvers import reverse
 from django.db import IntegrityError, transaction
-from django.db.models import F
 from django.http import HttpResponseRedirect
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
@@ -481,7 +480,7 @@ def handle_new_user(auth_provider, organization, request, identity):
     )
 
     if settings.TERMS_URL and settings.PRIVACY_URL:
-        user.update(flags=F("flags").bitor(User.flags.newsletter_consent_prompt))
+        user.update(flags=User.flags.newsletter_consent_prompt)
 
     try:
         with transaction.atomic():
@@ -827,7 +826,7 @@ class AuthHelper(object):
         if not require_2fa or not require_2fa.is_set:
             return
 
-        self.organization.update(flags=F("flags").bitand(~Organization.flags.require_2fa))
+        self.organization.update(flags=~Organization.flags.require_2fa)
 
         logger.info(
             "Require 2fa disabled during sso setup", extra={"organization_id": self.organization.id}
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index a76778c0c1..36d8d82b5c 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -6,7 +6,6 @@ import six
 import itertools
 
 from django.db import models, IntegrityError, transaction
-from django.db.models import F
 from django.utils import timezone
 from time import time
 
@@ -168,7 +167,7 @@ class Release(Model):
                 release.add_project(project)
                 if not project.flags.has_releases:
                     project.flags.has_releases = True
-                    project.update(flags=F("flags").bitor(Project.flags.has_releases))
+                    project.update(flags=Project.flags.has_releases)
 
             # TODO(dcramer): upon creating a new release, check if it should be
             # the new "latest release" for this project
@@ -260,7 +259,7 @@ class Release(Model):
                 ReleaseProject.objects.create(project=project, release=self)
                 if not project.flags.has_releases:
                     project.flags.has_releases = True
-                    project.update(flags=F("flags").bitor(Project.flags.has_releases))
+                    project.update(flags=Project.flags.has_releases)
         except IntegrityError:
             return False
         else:
diff --git a/src/sentry/tasks/auth.py b/src/sentry/tasks/auth.py
index f624acf41b..391e24c2c5 100644
--- a/src/sentry/tasks/auth.py
+++ b/src/sentry/tasks/auth.py
@@ -3,7 +3,6 @@ from __future__ import absolute_import, print_function
 import logging
 
 from django.db import IntegrityError
-from django.db.models import F
 
 from sentry import options
 from sentry.models import (
@@ -34,7 +33,7 @@ def email_missing_links(org_id, actor_id, provider_key, **kwargs):
         return
 
     member_list = OrganizationMember.objects.filter(
-        organization=org, flags=F("flags").bitand(~OrganizationMember.flags["sso:linked"])
+        organization=org, flags=~OrganizationMember.flags["sso:linked"]
     )
     for member in member_list:
         member.send_sso_link_email(actor, provider)
diff --git a/src/sentry/web/frontend/organization_auth_settings.py b/src/sentry/web/frontend/organization_auth_settings.py
index cf85b997dd..d23d917fdb 100644
--- a/src/sentry/web/frontend/organization_auth_settings.py
+++ b/src/sentry/web/frontend/organization_auth_settings.py
@@ -135,8 +135,7 @@ class OrganizationAuthSettingsView(OrganizationView):
             )
 
         pending_links_count = OrganizationMember.objects.filter(
-            organization=organization,
-            flags=F("flags").bitand(~OrganizationMember.flags["sso:linked"]),
+            organization=organization, flags=~OrganizationMember.flags["sso:linked"]
         ).count()
 
         context = {
diff --git a/src/sentry/web/frontend/setup_wizard.py b/src/sentry/web/frontend/setup_wizard.py
index 13553bd57d..8506a7832c 100644
--- a/src/sentry/web/frontend/setup_wizard.py
+++ b/src/sentry/web/frontend/setup_wizard.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-from django.db.models import F
-
 from sentry import roles
 from sentry.cache import default_cache
 from sentry.models import ApiToken
@@ -52,7 +50,7 @@ class SetupWizardView(BaseView):
                 keys = list(
                     ProjectKey.objects.filter(
                         project=project,
-                        roles=F("roles").bitor(ProjectKey.roles.store),
+                        roles=ProjectKey.roles.store,
                         status=ProjectKeyStatus.ACTIVE,
                     )
                 )
diff --git a/tests/acceptance/test_accept_organization_invite.py b/tests/acceptance/test_accept_organization_invite.py
index 94d2c8f366..a15f0ce8a2 100644
--- a/tests/acceptance/test_accept_organization_invite.py
+++ b/tests/acceptance/test_accept_organization_invite.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-from django.db.models import F
-
 from sentry.testutils import AcceptanceTestCase
 from sentry.models import Organization, AuthProvider
 
@@ -33,13 +31,13 @@ class AcceptOrganizationInviteTest(AcceptanceTestCase):
         assert self.browser.element_exists('[aria-label="create-account"]')
 
     def test_invite_2fa_enforced_org(self):
-        self.org.update(flags=F("flags").bitor(Organization.flags.require_2fa))
+        self.org.update(flags=Organization.flags.require_2fa)
         self.browser.get(self.member.get_invite_link().split("/", 3)[-1])
         self.browser.wait_until('[data-test-id="accept-invite"]')
         assert not self.browser.element_exists_by_test_id("2fa-warning")
 
         self.login_as(self.user)
-        self.org.update(flags=F("flags").bitor(Organization.flags.require_2fa))
+        self.org.update(flags=Organization.flags.require_2fa)
         self.browser.get(self.member.get_invite_link().split("/", 3)[-1])
         self.browser.wait_until('[data-test-id="accept-invite"]')
         assert self.browser.element_exists_by_test_id("2fa-warning")
diff --git a/tests/bitfield/forms.py b/tests/bitfield/forms.py
deleted file mode 100644
index d78a2fb376..0000000000
--- a/tests/bitfield/forms.py
+++ /dev/null
@@ -1,11 +0,0 @@
-from __future__ import absolute_import
-
-from django import forms
-
-from .models import BitFieldTestModel
-
-
-class BitFieldTestModelForm(forms.ModelForm):
-    class Meta:
-        model = BitFieldTestModel
-        exclude = tuple()
diff --git a/tests/bitfield/models.py b/tests/bitfield/models.py
deleted file mode 100644
index 8ca51db4a5..0000000000
--- a/tests/bitfield/models.py
+++ /dev/null
@@ -1,11 +0,0 @@
-from __future__ import absolute_import
-
-from django.db import models
-
-from bitfield import BitField
-
-
-class BitFieldTestModel(models.Model):
-    flags = BitField(
-        flags=("FLAG_0", "FLAG_1", "FLAG_2", "FLAG_3"), default=3, db_column="another_name"
-    )
diff --git a/tests/sentry/api/bases/test_organization.py b/tests/sentry/api/bases/test_organization.py
index 9120b1188f..4709f0dd8e 100644
--- a/tests/sentry/api/bases/test_organization.py
+++ b/tests/sentry/api/bases/test_organization.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 from datetime import timedelta
 
-from django.db.models import F
 from django.test import RequestFactory
 from django.utils import timezone
 from exam import fixture
@@ -38,7 +37,7 @@ class OrganizationPermissionBase(TestCase):
 
 class OrganizationPermissionTest(OrganizationPermissionBase):
     def org_require_2fa(self):
-        self.org.update(flags=F("flags").bitor(Organization.flags.require_2fa))
+        self.org.update(flags=Organization.flags.require_2fa)
         assert self.org.flags.require_2fa.is_set is True
 
     def test_regular_user(self):
diff --git a/tests/sentry/api/endpoints/test_accept_organization_invite.py b/tests/sentry/api/endpoints/test_accept_organization_invite.py
index f4f903c426..e6f7ce309c 100644
--- a/tests/sentry/api/endpoints/test_accept_organization_invite.py
+++ b/tests/sentry/api/endpoints/test_accept_organization_invite.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 from six.moves.urllib.parse import parse_qsl
 from django.core.urlresolvers import reverse
-from django.db.models import F
 from datetime import timedelta
 
 from sentry.models import (
@@ -25,7 +24,7 @@ class AcceptInviteTest(TestCase):
         self.user = self.create_user("bar@example.com")
 
     def _require_2fa_for_organization(self):
-        self.organization.update(flags=F("flags").bitor(Organization.flags.require_2fa))
+        self.organization.update(flags=Organization.flags.require_2fa)
         assert self.organization.flags.require_2fa.is_set
 
     def _assert_pending_invite_cookie_set(self, response, om):
diff --git a/tests/sentry/api/endpoints/test_organization_member_details.py b/tests/sentry/api/endpoints/test_organization_member_details.py
index 8d2a981e4f..39129b3f4f 100644
--- a/tests/sentry/api/endpoints/test_organization_member_details.py
+++ b/tests/sentry/api/endpoints/test_organization_member_details.py
@@ -4,7 +4,6 @@ import six
 
 from django.core import mail
 from django.core.urlresolvers import reverse
-from django.db.models import F
 from mock import patch
 
 from sentry.models import (
@@ -570,7 +569,7 @@ class ResetOrganizationMember2faTest(APITestCase):
         self.login_as(self.owner)
         TotpInterface().enroll(self.owner)
 
-        self.org.update(flags=F("flags").bitor(Organization.flags.require_2fa))
+        self.org.update(flags=Organization.flags.require_2fa)
         assert self.org.flags.require_2fa.is_set is True
 
         self.assert_cannot_remove_authenticators()
diff --git a/tests/sentry/api/endpoints/test_user_authenticator_details.py b/tests/sentry/api/endpoints/test_user_authenticator_details.py
index 2dd6fff499..2f17f5d007 100644
--- a/tests/sentry/api/endpoints/test_user_authenticator_details.py
+++ b/tests/sentry/api/endpoints/test_user_authenticator_details.py
@@ -5,7 +5,6 @@ import mock
 import six
 
 from django.core.urlresolvers import reverse
-from django.db.models import F
 from django.conf import settings
 from django.utils import timezone
 
@@ -31,7 +30,7 @@ class UserAuthenticatorDetailsTest(APITestCase):
 
     def _require_2fa_for_organization(self):
         organization = self.create_organization(name="test monkey", owner=self.user)
-        organization.update(flags=F("flags").bitor(Organization.flags.require_2fa))
+        organization.update(flags=Organization.flags.require_2fa)
 
     def test_wrong_auth_id(self):
         url = reverse(
diff --git a/tests/sentry/api/endpoints/test_user_authenticator_enroll.py b/tests/sentry/api/endpoints/test_user_authenticator_enroll.py
index 5ff62ef0fe..63b9e3bda6 100644
--- a/tests/sentry/api/endpoints/test_user_authenticator_enroll.py
+++ b/tests/sentry/api/endpoints/test_user_authenticator_enroll.py
@@ -5,7 +5,6 @@ import mock
 from six.moves.urllib.parse import parse_qsl
 from django.core.urlresolvers import reverse
 from django.conf import settings
-from django.db.models import F
 
 from sentry.models import (
     AuditLogEntry,
@@ -171,7 +170,7 @@ class AcceptOrganizationInviteTest(APITestCase):
         self.assertFalse(Authenticator.objects.user_has_2fa(self.user))
 
     def require_2fa_for_organization(self):
-        self.organization.update(flags=F("flags").bitor(Organization.flags.require_2fa))
+        self.organization.update(flags=Organization.flags.require_2fa)
         self.assertTrue(self.organization.flags.require_2fa.is_set)
 
     def _assert_pending_invite_cookie_set(self, response, om):
diff --git a/tests/bitfield/__init__.py b/tests/sentry/db/models/fields/bitfield/__init__.py
similarity index 100%
rename from tests/bitfield/__init__.py
rename to tests/sentry/db/models/fields/bitfield/__init__.py
diff --git a/tests/bitfield/tests.py b/tests/sentry/db/models/fields/bitfield/test_bitfield.py
similarity index 97%
rename from tests/bitfield/tests.py
rename to tests/sentry/db/models/fields/bitfield/test_bitfield.py
index bb190ae577..7449798a91 100644
--- a/tests/bitfield/tests.py
+++ b/tests/sentry/db/models/fields/bitfield/test_bitfield.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import pickle
 import six
 
+from django import forms
 from django.db import connection, models
 from django.db.models import F
 from django.test import TestCase
@@ -10,8 +11,20 @@ from django.test import TestCase
 from bitfield import Bit, BitField, BitHandler
 from bitfield.compat import bitand, bitor
 
-from .forms import BitFieldTestModelForm
-from .models import BitFieldTestModel
+
+class BitFieldTestModel(models.Model):
+    class Meta:
+        app_label = "sentry"
+
+    flags = BitField(
+        flags=("FLAG_0", "FLAG_1", "FLAG_2", "FLAG_3"), default=3, db_column="another_name"
+    )
+
+
+class BitFieldTestModelForm(forms.ModelForm):
+    class Meta:
+        model = BitFieldTestModel
+        exclude = tuple()
 
 
 class BitHandlerTest(TestCase):
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 9e9ef8da8a..8fd503f49c 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -9,7 +9,6 @@ import pytz
 import six
 from django.contrib.auth.models import AnonymousUser
 from django.core import mail
-from django.db.models import F
 from django.utils import timezone
 from exam import fixture
 from mock import Mock
@@ -447,7 +446,7 @@ class MailPluginSignalsTest(TestCase):
         assert msg.to == [self.user.email]
 
     def test_user_feedback__enhanced_privacy(self):
-        self.organization.update(flags=F("flags").bitor(Organization.flags.enhanced_privacy))
+        self.organization.update(flags=Organization.flags.enhanced_privacy)
         assert self.organization.flags.enhanced_privacy.is_set is True
         UserOption.objects.set_value(
             user=self.user, key="workflow:notifications", value=UserOptionValue.all_conversations
