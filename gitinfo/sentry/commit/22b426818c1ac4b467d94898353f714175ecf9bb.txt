commit 22b426818c1ac4b467d94898353f714175ecf9bb
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Mar 5 11:57:01 2018 -0800

    chore(stream): Rename StreamTag -> Tag
    
    Tags are not stream specific

diff --git a/src/sentry/static/sentry/app/actionCreators/streamTag.jsx b/src/sentry/static/sentry/app/actionCreators/tags.jsx
similarity index 61%
rename from src/sentry/static/sentry/app/actionCreators/streamTag.jsx
rename to src/sentry/static/sentry/app/actionCreators/tags.jsx
index 10b2f794bf..9bf6769987 100644
--- a/src/sentry/static/sentry/app/actionCreators/streamTag.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/tags.jsx
@@ -1,16 +1,16 @@
 import {Client} from '../api';
 import {t} from '../locale';
-import StreamTagStore from '../stores/streamTagStore';
-import StreamTagActions from '../actions/streamTagActions';
+import TagStore from '../stores/tagStore';
+import TagActions from '../actions/tagActions';
 import AlertActions from '../actions/alertActions';
 
 const api = new Client();
 
 const MAX_TAGS = 500;
 
-export function fetchStreamTags(orgId, projectId) {
-  StreamTagStore.reset();
-  StreamTagActions.loadTags();
+export function fetchTags(orgId, projectId) {
+  TagStore.reset();
+  TagActions.loadTags();
 
   api.request(`/projects/${orgId}/${projectId}/tags/`, {
     success: tags => {
@@ -22,8 +22,8 @@ export function fetchStreamTags(orgId, projectId) {
           type: 'warn',
         });
       }
-      StreamTagActions.loadTagsSuccess(trimmedTags);
+      TagActions.loadTagsSuccess(trimmedTags);
     },
-    error: StreamTagActions.loadTagsError,
+    error: TagActions.loadTagsError,
   });
 }
diff --git a/src/sentry/static/sentry/app/actions/streamTagActions.jsx b/src/sentry/static/sentry/app/actions/tagActions.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/actions/streamTagActions.jsx
rename to src/sentry/static/sentry/app/actions/tagActions.jsx
diff --git a/src/sentry/static/sentry/app/stores/streamTagStore.jsx b/src/sentry/static/sentry/app/stores/tagStore.jsx
similarity index 94%
rename from src/sentry/static/sentry/app/stores/streamTagStore.jsx
rename to src/sentry/static/sentry/app/stores/tagStore.jsx
index bf2c126709..b145f972f0 100644
--- a/src/sentry/static/sentry/app/stores/streamTagStore.jsx
+++ b/src/sentry/static/sentry/app/stores/tagStore.jsx
@@ -1,7 +1,7 @@
 import Reflux from 'reflux';
 import _ from 'lodash';
 
-import StreamTagActions from '../actions/streamTagActions';
+import TagActions from '../actions/tagActions';
 import MemberListStore from './memberListStore';
 
 const getUsername = ({isManaged, username, email}) => {
@@ -12,8 +12,8 @@ const getMemberListStoreUsernames = () => {
   return MemberListStore.getAll().map(getUsername);
 };
 
-const StreamTagStore = Reflux.createStore({
-  listenables: StreamTagActions,
+const TagStore = Reflux.createStore({
+  listenables: TagActions,
 
   init() {
     this.listenTo(MemberListStore, this.onMemberListStoreChange);
@@ -135,4 +135,4 @@ const StreamTagStore = Reflux.createStore({
   },
 });
 
-export default StreamTagStore;
+export default TagStore;
diff --git a/src/sentry/static/sentry/app/views/stream/index.jsx b/src/sentry/static/sentry/app/views/stream/index.jsx
index b1ac8d58a7..0e866214a0 100644
--- a/src/sentry/static/sentry/app/views/stream/index.jsx
+++ b/src/sentry/static/sentry/app/views/stream/index.jsx
@@ -5,10 +5,10 @@ import createReactClass from 'create-react-class';
 import {omit} from 'lodash';
 
 import ProjectState from '../../mixins/projectState';
-import StreamTagStore from '../../stores/streamTagStore';
+import TagStore from '../../stores/tagStore';
 import withEnvironment from '../../utils/withEnvironment';
 import Stream from './stream';
-import {fetchStreamTags} from '../../actionCreators/streamTag';
+import {fetchTags} from '../../actionCreators/tags';
 
 const StreamContainer = createReactClass({
   displayName: 'StreamContainer',
@@ -17,7 +17,7 @@ const StreamContainer = createReactClass({
     setProjectNavSection: PropTypes.func,
   },
 
-  mixins: [ProjectState, Reflux.listenTo(StreamTagStore, 'onStreamTagChange')],
+  mixins: [ProjectState, Reflux.listenTo(TagStore, 'onTagsChange')],
 
   getInitialState() {
     const hasEnvironmentsFeature = new Set(this.getOrganization().features).has(
@@ -25,7 +25,7 @@ const StreamContainer = createReactClass({
     );
 
     return {
-      tags: StreamTagStore.getAllTags(),
+      tags: TagStore.getAllTags(),
       tagsLoading: true,
       hasEnvironmentsFeature,
     };
@@ -34,10 +34,10 @@ const StreamContainer = createReactClass({
   componentWillMount() {
     const {orgId, projectId} = this.props.params;
     this.props.setProjectNavSection('stream');
-    fetchStreamTags(orgId, projectId);
+    fetchTags(orgId, projectId);
   },
 
-  onStreamTagChange(tags) {
+  onTagsChange(tags) {
     this.setState({
       tags,
       tagsLoading: false,
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index 0fbebfc1a3..be71bb83a3 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -6,7 +6,7 @@ import Reflux from 'reflux';
 import _ from 'lodash';
 import classNames from 'classnames';
 
-import StreamTagStore from '../../stores/streamTagStore';
+import TagStore from '../../stores/tagStore';
 import MemberListStore from '../../stores/memberListStore';
 
 import ApiMixin from '../../mixins/apiMixin';
@@ -31,10 +31,7 @@ const SearchBar = createReactClass({
     onSearch: PropTypes.func,
   },
 
-  mixins: [
-    ApiMixin,
-    Reflux.listenTo(MemberListStore, 'onMemberListStoreChange'),
-  ],
+  mixins: [ApiMixin, Reflux.listenTo(MemberListStore, 'onMemberListStoreChange')],
 
   statics: {
     /**
@@ -186,7 +183,7 @@ const SearchBar = createReactClass({
    * e.g. ['is:', 'assigned:', 'url:', 'release:']
    */
   getTagKeys: function(query) {
-    return StreamTagStore.getTagKeys()
+    return TagStore.getTagKeys()
       .map(key => key + ':')
       .filter(key => key.indexOf(query) > -1);
   },
@@ -309,7 +306,7 @@ const SearchBar = createReactClass({
         searchItems: filteredSearchItems,
       });
 
-      let tag = StreamTagStore.getTag(tagName);
+      let tag = TagStore.getTag(tagName);
       if (!tag) return undefined;
 
       return void (tag.predefined ? this.getPredefinedTagValues : this.getTagValues)(
diff --git a/tests/js/spec/stores/streamTagStore.spec.jsx b/tests/js/spec/stores/tagStore.spec.jsx
similarity index 61%
rename from tests/js/spec/stores/streamTagStore.spec.jsx
rename to tests/js/spec/stores/tagStore.spec.jsx
index dcf7c69b11..1c4d81ea82 100644
--- a/tests/js/spec/stores/streamTagStore.spec.jsx
+++ b/tests/js/spec/stores/tagStore.spec.jsx
@@ -1,11 +1,11 @@
-import StreamTagStore from 'app/stores/streamTagStore';
+import TagStore from 'app/stores/tagStore';
 import MemberListStore from 'app/stores/memberListStore';
 
-describe('StreamTagStore', function() {
+describe('TagStore', function() {
   let sandbox;
 
   beforeEach(() => {
-    StreamTagStore.reset();
+    TagStore.reset();
     sandbox = sinon.sandbox.create();
   });
 
@@ -21,8 +21,8 @@ describe('StreamTagStore', function() {
           email: 'janesmith@example.org',
         },
       ]);
-      StreamTagStore.onMemberListStoreChange();
-      expect(StreamTagStore.tags.assigned.values).toEqual(['me', 'janesmith']);
+      TagStore.onMemberListStoreChange();
+      expect(TagStore.tags.assigned.values).toEqual(['me', 'janesmith']);
     });
 
     it("should fall back to email when username isn't available", () => {
@@ -31,44 +31,41 @@ describe('StreamTagStore', function() {
           email: 'janesmith@example.org',
         },
       ]);
-      StreamTagStore.onMemberListStoreChange();
-      expect(StreamTagStore.tags.assigned.values).toEqual([
-        'me',
-        'janesmith@example.org',
-      ]);
+      TagStore.onMemberListStoreChange();
+      expect(TagStore.tags.assigned.values).toEqual(['me', 'janesmith@example.org']);
     });
   });
 
   describe('onLoadTagsSuccess()', () => {
     it('should add a new tag with empty values and trigger the new addition', () => {
-      sandbox.stub(StreamTagStore, 'trigger');
+      sandbox.stub(TagStore, 'trigger');
 
-      StreamTagStore.onLoadTagsSuccess([
+      TagStore.onLoadTagsSuccess([
         {
           key: 'mytag',
           name: 'My Custom Tag',
         },
       ]);
 
-      expect(StreamTagStore.tags.mytag).toEqual({
+      expect(TagStore.tags.mytag).toEqual({
         key: 'mytag',
         name: 'My Custom Tag',
         values: [],
       });
 
-      expect(StreamTagStore.trigger.calledOnce).toBeTruthy();
+      expect(TagStore.trigger.calledOnce).toBeTruthy();
     });
 
     it('should not overwrite predefined filters', () => {
-      let isTag = StreamTagStore.tags.is;
-      StreamTagStore.onLoadTagsSuccess([
+      let isTag = TagStore.tags.is;
+      TagStore.onLoadTagsSuccess([
         {
           key: 'is',
           name: 'Custom Assigned To',
         },
       ]);
 
-      expect(StreamTagStore.tags.is).toEqual(isTag);
+      expect(TagStore.tags.is).toEqual(isTag);
     });
   });
 });
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index 4faf92684f..e8b2208158 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -3,13 +3,13 @@ import {shallow, mount} from 'enzyme';
 
 import {Client} from 'app/api';
 import SearchBar from 'app/views/stream/searchBar';
-import StreamTagStore from 'app/stores/streamTagStore';
+import TagStore from 'app/stores/tagStore';
 
 describe('SearchBar', function() {
   let sandbox;
 
   beforeEach(function() {
-    StreamTagStore.reset();
+    TagStore.reset();
 
     sandbox = sinon.sandbox.create();
 
diff --git a/tests/js/spec/views/stream/stream.spec.jsx b/tests/js/spec/views/stream/stream.spec.jsx
index e6fdca5c3c..bcd02f8d33 100644
--- a/tests/js/spec/views/stream/stream.spec.jsx
+++ b/tests/js/spec/views/stream/stream.spec.jsx
@@ -10,7 +10,7 @@ import Stream from 'app/views/stream/stream';
 import EnvironmentStore from 'app/stores/environmentStore';
 import {setActiveEnvironment} from 'app/actionCreators/environments';
 import {browserHistory} from 'react-router';
-import StreamTagStore from 'app/stores/streamTagStore';
+import TagStore from 'app/stores/tagStore';
 
 jest.mock('app/stores/groupStore');
 
@@ -58,13 +58,13 @@ describe('Stream', function() {
       team: {id: '2448'},
     };
 
-    StreamTagStore.init();
+    TagStore.init();
 
     props = {
       setProjectNavSection: function() {},
       location: {query: {query: 'is:unresolved'}, search: 'query=is:unresolved'},
       params: {orgId: '123', projectId: '456'},
-      tags: StreamTagStore.getAllTags(),
+      tags: TagStore.getAllTags(),
       tagsLoading: false,
     };
   });
