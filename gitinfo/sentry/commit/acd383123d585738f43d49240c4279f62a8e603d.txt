commit acd383123d585738f43d49240c4279f62a8e603d
Author: jeffkwoh <23180853+jeffkwoh@users.noreply.github.com>
Date:   Fri Feb 21 16:34:57 2020 -0800

    feat(analytics): Track project creation (#17035)
    
    Related:
    - https://github.com/getsentry/reload/pull/141
    - getsentry/reload#142
    - https://github.com/getsentry/getsentry/pull/3562
    
    Part of: https://www.notion.so/sentry/Default-Alert-Options-450bbbc6f83b4ba29350fb9a59cf5746

diff --git a/src/sentry/static/sentry/app/views/projectInstall/createProject.jsx b/src/sentry/static/sentry/app/views/projectInstall/createProject.jsx
index d120ce3d99..28f947986d 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/createProject.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/createProject.jsx
@@ -22,6 +22,7 @@ import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
 import withTeams from 'app/utils/withTeams';
 import IssueAlertOptions from 'app/views/projectInstall/issueAlertOptions';
+import {trackAnalyticsEvent, logExperiment} from 'app/utils/analytics';
 
 class CreateProject extends React.Component {
   static propTypes = {
@@ -63,6 +64,22 @@ class CreateProject extends React.Component {
     }
   }
 
+  componentDidMount() {
+    // TODO(jeff): Change key to AlertDefaultExperiment on the real experiment run
+    logExperiment({
+      organization: this.props.organization,
+      key: 'AlertDefaultExperimentTmp',
+      unitName: 'org_id',
+      unitId: parseInt(this.props.organization.id, 10),
+      param: 'exposed',
+    });
+    trackAnalyticsEvent({
+      eventKey: 'new_project.visited',
+      eventName: 'New Project Page Visited',
+      org_id: parseInt(this.props.organization.id, 10),
+    });
+  }
+
   renderProjectForm = (
     projectName,
     team,
@@ -193,8 +210,9 @@ class CreateProject extends React.Component {
         },
       });
 
+      let ruleId;
       if (shouldCreateCustomRule) {
-        await api.requestPromise(
+        const ruleData = await api.requestPromise(
           `/projects/${organization.slug}/${projectData.slug}/rules/`,
           {
             method: 'POST',
@@ -207,7 +225,17 @@ class CreateProject extends React.Component {
             },
           }
         );
+        ruleId = ruleData.id;
       }
+      this.trackIssueAlertOptionSelectedEvent(
+        organization,
+        projectData,
+        defaultRules,
+        shouldCreateCustomRule,
+        platform,
+        ruleId
+      );
+
       ProjectActions.createSuccess(projectData);
       const platformKey = platform || 'other';
       const nextUrl = `/${organization.slug}/${projectData.slug}/getting-started/${platformKey}/`;
@@ -232,6 +260,32 @@ class CreateProject extends React.Component {
     }
   };
 
+  trackIssueAlertOptionSelectedEvent(
+    organization,
+    projectData,
+    isDefaultRules,
+    shouldCreateCustomRule,
+    ruleId
+  ) {
+    let data = {
+      eventKey: 'new_project.alert_rule_option_selected',
+      eventName: 'New Project Alert Rule Option Selected',
+      org_id: parseInt(organization.id, 10),
+      project_id: parseInt(projectData.id, 10),
+      rule_type: isDefaultRules
+        ? 'Default'
+        : shouldCreateCustomRule
+        ? 'Custom'
+        : 'No Rule',
+    };
+
+    if (ruleId !== undefined) {
+      data = {...data, custom_rule_id: ruleId};
+    }
+
+    trackAnalyticsEvent(data);
+  }
+
   setPlatform = platformId =>
     this.setState(({projectName, platform}) => ({
       platform: platformId,
