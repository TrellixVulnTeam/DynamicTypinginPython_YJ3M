commit f4342994cc23b41aba0e7c861f132b81f585a99a
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Mon Feb 24 16:11:10 2020 -0500

    fix(discover2): Stabilize charts rendering when zooming. (#17250)

diff --git a/src/sentry/static/sentry/app/views/events/eventsChart.jsx b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
index 8e6f6d1d29..2596094adf 100644
--- a/src/sentry/static/sentry/app/views/events/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
@@ -94,6 +94,87 @@ class EventsAreaChart extends React.Component {
   }
 }
 
+class TransitionChart extends React.Component {
+  static propTypes = {
+    reloading: PropTypes.bool,
+    loading: PropTypes.bool,
+  };
+
+  state = {
+    prevReloading: this.props.reloading,
+    prevLoading: this.props.loading,
+    key: 1,
+  };
+
+  static getDerivedStateFromProps(props, state) {
+    // Transitions are controlled using variables called:
+    // - loading and,
+    // - reloading (also called pending in other apps)
+    //
+    // This component remounts the chart to ensure the stable transition
+    // from one data set to the next.
+
+    const prevReloading = state.prevReloading;
+    const nextReloading = props.reloading;
+
+    const prevLoading = state.prevLoading;
+    const nextLoading = props.loading;
+
+    // whenever loading changes, we explicitly remount the children by updating
+    // the key prop; regardless of what state reloading is in
+    if (prevLoading !== nextLoading) {
+      return {
+        prevReloading: nextReloading,
+        prevLoading: nextLoading,
+        key: state.key + 1,
+      };
+    }
+
+    // invariant: prevLoading === nextLoading
+
+    // if loading is true, and hasn't changed from the previous re-render,
+    // do not remount the children.
+    if (nextLoading) {
+      return {
+        prevReloading: nextReloading,
+        prevLoading: nextLoading,
+        key: state.key,
+      };
+    }
+
+    // invariant: loading is false
+
+    // whenever the chart is transitioning from the reloading (pending) state to a non-loading state,
+    // remount the children
+    if (prevReloading && !nextReloading) {
+      return {
+        prevReloading: nextReloading,
+        prevLoading: nextLoading,
+        key: state.key + 1,
+      };
+    }
+
+    // do not remount the children in these remaining cases:
+    // !prevReloading && !nextReloading (re-render with no prop change)
+    // prevReloading && nextReloading (re-render with no prop change)
+    // !prevReloading && nextReloading (from loaded to pending state)
+
+    return {
+      prevReloading: nextReloading,
+      prevLoading: nextLoading,
+      key: state.key,
+    };
+  }
+
+  render() {
+    // We make use of the key prop to explicitly remount the children
+    // https://reactjs.org/docs/lists-and-keys.html#keys
+    return (
+      <React.Fragment key={String(this.state.key)}>{this.props.children}</React.Fragment>
+    );
+  }
+}
+
 class EventsChart extends React.Component {
   static propTypes = {
     api: PropTypes.object,
@@ -167,19 +248,21 @@ class EventsChart extends React.Component {
                     }
 
                     return (
-                      <React.Fragment>
-                        <TransparentLoadingMask visible={reloading} />
-                        <EventsAreaChart
-                          {...zoomRenderProps}
-                          loading={loading}
-                          reloading={reloading}
-                          utc={utc}
-                          showLegend={showLegend}
-                          releaseSeries={releaseSeries}
-                          timeseriesData={timeseriesData}
-                          previousTimeseriesData={previousTimeseriesData}
-                        />
-                      </React.Fragment>
+                      <TransitionChart loading={loading} reloading={reloading}>
+                        <React.Fragment>
+                          <TransparentLoadingMask visible={reloading} />
+                          <EventsAreaChart
+                            {...zoomRenderProps}
+                            loading={loading}
+                            reloading={reloading}
+                            utc={utc}
+                            showLegend={showLegend}
+                            releaseSeries={releaseSeries}
+                            timeseriesData={timeseriesData}
+                            previousTimeseriesData={previousTimeseriesData}
+                          />
+                        </React.Fragment>
+                      </TransitionChart>
                     );
                   }}
                 </ReleaseSeries>
