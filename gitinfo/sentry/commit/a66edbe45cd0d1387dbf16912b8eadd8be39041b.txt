commit a66edbe45cd0d1387dbf16912b8eadd8be39041b
Author: Dena Mwangi <dena@getsentry.com>
Date:   Thu Apr 11 10:43:51 2019 -0700

    fix(analytics): Consolidate issue resolved signal  (#12412)

diff --git a/src/sentry/api/helpers/group_index.py b/src/sentry/api/helpers/group_index.py
index adf8ef9512..8de4f9d6de 100644
--- a/src/sentry/api/helpers/group_index.py
+++ b/src/sentry/api/helpers/group_index.py
@@ -35,8 +35,7 @@ from sentry.api.issue_search import (
     parse_search_query,
 )
 from sentry.signals import (
-    issue_deleted, issue_ignored, issue_resolved, issue_resolved_in_release,
-    resolved_with_commit
+    issue_deleted, issue_ignored, issue_resolved
 )
 from sentry.tasks.deletion import delete_groups as delete_groups_task
 from sentry.tasks.integrations import kick_off_status_syncs
@@ -670,28 +669,14 @@ def update_groups(request, projects, organization_id, search_fn):
                     if not is_bulk:
                         activity.send_notification()
 
-            if release:
-                issue_resolved_in_release.send_robust(
-                    group=group,
-                    project=project_lookup[group.project_id],
-                    user=acting_user,
-                    resolution_type=res_type_str,
-                    sender=update_groups,
-                )
-            elif commit:
-                resolved_with_commit.send_robust(
-                    organization_id=organization_id,
-                    user=request.user,
-                    group=group,
-                    sender=update_groups,
-                )
-            else:
-                issue_resolved.send_robust(
-                    project=project_lookup[group.project_id],
-                    group=group,
-                    user=acting_user,
-                    sender=update_groups,
-                )
+            issue_resolved.send_robust(
+                organization_id=organization_id,
+                user=acting_user or request.user,
+                group=group,
+                project=project_lookup[group.project_id],
+                resolution_type=res_type_str,
+                sender=update_groups,
+            )
 
             kick_off_status_syncs.apply_async(kwargs={
                 'project_id': group.project_id,
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 0d7296e1af..438d80f187 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -24,7 +24,7 @@ from sentry.db.models import (
 )
 
 from sentry.models import CommitFileChange
-from sentry.signals import resolved_with_commit
+from sentry.signals import issue_resolved
 
 from sentry.utils import metrics
 from sentry.utils.cache import cache
@@ -574,10 +574,12 @@ class Release(Model):
                 group.update(status=GroupStatus.RESOLVED)
                 metrics.incr('group.resolved', instance='in_commit', skip_internal=True)
 
-            resolved_with_commit.send_robust(
+            issue_resolved.send_robust(
                 organization_id=self.organization_id,
                 user=actor,
                 group=group,
+                project=group.project,
+                resolution_type='with_commit',
                 sender=type(self),
             )
 
diff --git a/src/sentry/receivers/features.py b/src/sentry/receivers/features.py
index e3ceec8f68..83ef46071b 100644
--- a/src/sentry/receivers/features.py
+++ b/src/sentry/receivers/features.py
@@ -9,31 +9,30 @@ from sentry.plugins import IssueTrackingPlugin, IssueTrackingPlugin2
 from sentry.plugins.bases.notify import NotificationPlugin
 from sentry.receivers.rules import DEFAULT_RULE_LABEL, DEFAULT_RULE_DATA
 from sentry.signals import (
+    advanced_search,
     alert_rule_created,
+    data_scrubber_enabled,
+    deploy_created,
     event_processed,
     first_event_received,
-    project_created,
+    inbound_filter_toggled,
+    integration_added,
+    integration_issue_created,
+    integration_issue_linked,
+    issue_assigned,
+    issue_resolved,
+    issue_ignored,
+    issue_deleted,
     member_joined,
+    ownership_rule_created,
     plugin_enabled,
-    user_feedback_received,
-    issue_assigned,
-    issue_resolved_in_release,
-    advanced_search,
+    project_created,
+    release_created,
+    repo_linked,
     save_search_created,
-    inbound_filter_toggled,
     sso_enabled,
-    data_scrubber_enabled,
-    repo_linked,
-    release_created,
-    deploy_created,
-    resolved_with_commit,
-    ownership_rule_created,
-    issue_ignored,
     team_created,
-    issue_deleted,
-    integration_added,
-    integration_issue_created,
-    integration_issue_linked,
+    user_feedback_received,
 )
 from sentry.utils.javascript import has_sourcemap
 
@@ -146,11 +145,22 @@ def record_issue_assigned(project, group, user, **kwargs):
     )
 
 
-@issue_resolved_in_release.connect(weak=False)
-def record_issue_resolved_in_release(project, group, user, resolution_type, **kwargs):
-    FeatureAdoption.objects.record(
-        organization_id=project.organization_id, feature_slug="resolved_in_release", complete=True
-    )
+@issue_resolved.connect(weak=False)
+def record_issue_resolved(organization_id, project, group, user, resolution_type, **kwargs):
+    """ There are three main types of ways to resolve issues
+        1) via a release (current release, next release, or other)
+        2) via commit (in the UI with the commit hash (marked as "in_commit")
+            or tagging the issue in a commit (marked as "with_commit"))
+        3) now
+    """
+    if resolution_type in ('in_next_release', 'in_release'):
+        FeatureAdoption.objects.record(
+            organization_id=organization_id, feature_slug="resolved_in_release", complete=True
+        )
+    if resolution_type == 'with_commit':
+        FeatureAdoption.objects.record(
+            organization_id=organization_id, feature_slug="resolved_with_commit", complete=True
+        )
 
     if user and user.is_authenticated():
         user_id = default_user_id = user.id
@@ -162,7 +172,7 @@ def record_issue_resolved_in_release(project, group, user, resolution_type, **kw
         'issue.resolved',
         user_id=user_id,
         default_user_id=default_user_id,
-        organization_id=project.organization_id,
+        organization_id=organization_id,
         group_id=group.id,
         resolution_type=resolution_type,
     )
@@ -309,28 +319,6 @@ def record_deploy_created(deploy, **kwargs):
     )
 
 
-@resolved_with_commit.connect(weak=False)
-def record_resolved_with_commit(organization_id, user, group, **kwargs):
-    FeatureAdoption.objects.record(
-        organization_id=organization_id, feature_slug="resolved_with_commit", complete=True
-    )
-
-    if user and user.is_authenticated():
-        user_id = default_user_id = user.id
-    else:
-        user_id = None
-        default_user_id = group.organization.get_default_owner().id
-
-    analytics.record(
-        'issue.resolved',
-        user_id=user_id,
-        default_user_id=default_user_id,
-        organization_id=organization_id,
-        group_id=group.id,
-        resolution_type='with_commit',
-    )
-
-
 @ownership_rule_created.connect(weak=False)
 def record_ownership_rule_created(project, **kwargs):
     FeatureAdoption.objects.record(
diff --git a/src/sentry/receivers/onboarding.py b/src/sentry/receivers/onboarding.py
index 7faab18e6b..3218a4e061 100644
--- a/src/sentry/receivers/onboarding.py
+++ b/src/sentry/receivers/onboarding.py
@@ -11,13 +11,13 @@ from sentry.models import (
 from sentry.plugins import IssueTrackingPlugin, IssueTrackingPlugin2, NotificationPlugin
 from sentry.signals import (
     event_processed,
-    project_created,
     first_event_pending,
     first_event_received,
+    issue_tracker_used,
     member_invited,
     member_joined,
     plugin_enabled,
-    issue_tracker_used,
+    project_created,
 )
 from sentry.utils.javascript import has_sourcemap
 
diff --git a/src/sentry/receivers/releases.py b/src/sentry/receivers/releases.py
index d1377a6855..8a00763e1a 100644
--- a/src/sentry/receivers/releases.py
+++ b/src/sentry/receivers/releases.py
@@ -8,7 +8,7 @@ from sentry import analytics
 from sentry.models import (
     Activity, Commit, Group, GroupAssignee, GroupLink, GroupSubscription, GroupSubscriptionReason, GroupStatus, Release, Repository, PullRequest, UserOption
 )
-from sentry.signals import resolved_with_commit
+from sentry.signals import issue_resolved
 from sentry.tasks.clear_expired_resolutions import clear_expired_resolutions
 
 
@@ -140,8 +140,15 @@ def resolved_in_commit(instance, created, **kwargs):
                         organization_id=repo.organization_id,
                     )
                 user = user_list[0] if user_list else None
-                resolved_with_commit.send_robust(
-                    organization_id=repo.organization_id, user=user, group=group, sender='resolved_in_commit')
+
+                issue_resolved.send_robust(
+                    organization_id=repo.organization_id,
+                    user=user,
+                    group=group,
+                    project=group.project,
+                    resolution_type='with_commit',
+                    sender='resolved_with_commit',
+                )
 
 
 def resolved_in_pull_request(instance, created, **kwargs):
diff --git a/src/sentry/receivers/sentry_apps.py b/src/sentry/receivers/sentry_apps.py
index 7b930593f6..b0d0f56139 100644
--- a/src/sentry/receivers/sentry_apps.py
+++ b/src/sentry/receivers/sentry_apps.py
@@ -1,12 +1,10 @@
 from __future__ import absolute_import
 
-from sentry.models import GroupAssignee, Organization
+from sentry.models import GroupAssignee
 from sentry.signals import (
     issue_ignored,
     issue_assigned,
     issue_resolved,
-    issue_resolved_in_release,
-    resolved_with_commit,
 )
 from sentry.tasks.sentry_apps import workflow_notification
 
@@ -35,25 +33,14 @@ def send_issue_assigned_webhook(project, group, user, **kwargs):
     send_workflow_webhooks(org, group, user, 'issue.assigned', data=data)
 
 
-@issue_resolved_in_release.connect(weak=False)
-def send_issue_resolved_in_release_webhook(project, group, user, resolution_type, **kwargs):
-    send_workflow_webhooks(
-        project.organization,
-        group,
-        user,
-        'issue.resolved',
-        data={'resolution_type': 'resolved_in_release'},
-    )
-
-
 @issue_resolved.connect(weak=False)
-def send_issue_resolved_webhook(project, group, user, **kwargs):
+def send_issue_resolved_webhook(organization_id, project, group, user, resolution_type, **kwargs):
     send_workflow_webhooks(
         project.organization,
         group,
         user,
         'issue.resolved',
-        data={'resolution_type': 'resolved'},
+        data={'resolution_type': resolution_type},
     )
 
 
@@ -68,18 +55,6 @@ def send_issue_ignored_webhook(project, user, group_list, **kwargs):
         )
 
 
-@resolved_with_commit.connect(weak=False)
-def send_resolved_with_commit_webhook(organization_id, group, user, **kwargs):
-    organization = Organization.objects.get(id=organization_id)
-    send_workflow_webhooks(
-        organization,
-        group,
-        user,
-        'issue.resolved',
-        data={'resolution_type': 'resolved_in_commit'},
-    )
-
-
 def send_workflow_webhooks(organization, issue, user, event, data=None):
     data = data or {}
 
diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index c9ffe6ee34..b1f157c3e3 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -78,13 +78,15 @@ mocks_loaded = BetterSignal(providing_args=["project"])
 
 user_feedback_received = BetterSignal(providing_args=["project"])
 issue_assigned = BetterSignal(providing_args=["project", "group", "user"])
-issue_resolved = BetterSignal(providing_args=["project", "group", "user"])
-issue_resolved_in_release = BetterSignal(
+
+issue_resolved = BetterSignal(
     providing_args=[
+        "organization_id",
         "project",
         "group",
         "user",
         "resolution_type"])
+
 advanced_search = BetterSignal(providing_args=["project"])
 save_search_created = BetterSignal(providing_args=["project", "user"])
 inbound_filter_toggled = BetterSignal(providing_args=["project"])
@@ -94,7 +96,6 @@ alert_rule_created = BetterSignal(providing_args=["project", "rule", "user"])
 repo_linked = BetterSignal(providing_args=["repo", "user"])
 release_created = BetterSignal(providing_args=["release"])
 deploy_created = BetterSignal(providing_args=["deploy"])
-resolved_with_commit = BetterSignal(providing_args=["organization_id", "user", "group"])
 ownership_rule_created = BetterSignal(providing_args=["project"])
 issue_ignored = BetterSignal(providing_args=["project", "user", "group_list", "activity_data"])
 
diff --git a/tests/sentry/receivers/test_featureadoption.py b/tests/sentry/receivers/test_featureadoption.py
index 60588345cb..38ba72cb30 100644
--- a/tests/sentry/receivers/test_featureadoption.py
+++ b/tests/sentry/receivers/test_featureadoption.py
@@ -14,7 +14,7 @@ from sentry.signals import (
     plugin_enabled,
     user_feedback_received,
     issue_assigned,
-    issue_resolved_in_release,
+    issue_resolved,
     advanced_search,
     save_search_created,
     inbound_filter_toggled,
@@ -651,11 +651,12 @@ class FeatureAdoptionTest(TestCase):
         assert feature_complete
 
     def test_resolved_in_release(self):
-        issue_resolved_in_release.send(
+        issue_resolved.send(
+            organization_id=self.organization.id,
             project=self.project,
             group=self.group,
             user=self.user,
-            resolution_type='now',
+            resolution_type='in_next_release',
             sender=type(
                 self.project))
         feature_complete = FeatureAdoption.objects.get_by_slug(
@@ -663,6 +664,20 @@ class FeatureAdoptionTest(TestCase):
         )
         assert feature_complete
 
+    def test_resolved_manually(self):
+        issue_resolved.send(
+            organization_id=self.organization.id,
+            project=self.project,
+            group=self.group,
+            user=self.user,
+            resolution_type='now',
+            sender=type(
+                self.project))
+        feature_complete = FeatureAdoption.objects.get_by_slug(
+            organization=self.organization, slug="resolved_in_release"
+        )
+        assert not feature_complete
+
     def test_advanced_search(self):
         advanced_search.send(project=self.project, sender=type(self.project))
         feature_complete = FeatureAdoption.objects.get_by_slug(
diff --git a/tests/sentry/receivers/test_sentry_apps.py b/tests/sentry/receivers/test_sentry_apps.py
index 77ace2c1a5..5a7b5c85f8 100644
--- a/tests/sentry/receivers/test_sentry_apps.py
+++ b/tests/sentry/receivers/test_sentry_apps.py
@@ -44,7 +44,7 @@ class TestIssueWorkflowNotifications(APITestCase):
             issue_id=self.issue.id,
             type='resolved',
             user_id=self.user.id,
-            data={'resolution_type': 'resolved'},
+            data={'resolution_type': 'now'},
         )
 
     def test_notify_after_resolve_in_commit(self, delay):
@@ -65,7 +65,7 @@ class TestIssueWorkflowNotifications(APITestCase):
             issue_id=self.issue.id,
             type='resolved',
             user_id=self.user.id,
-            data={'resolution_type': 'resolved_in_commit'},
+            data={'resolution_type': 'in_commit'},
         )
 
     def test_notify_after_resolve_in_specific_release(self, delay):
@@ -82,7 +82,7 @@ class TestIssueWorkflowNotifications(APITestCase):
             issue_id=self.issue.id,
             type='resolved',
             user_id=self.user.id,
-            data={'resolution_type': 'resolved_in_release'},
+            data={'resolution_type': 'in_release'},
         )
 
     def test_notify_after_resolve_in_latest_release(self, delay):
@@ -99,7 +99,7 @@ class TestIssueWorkflowNotifications(APITestCase):
             issue_id=self.issue.id,
             type='resolved',
             user_id=self.user.id,
-            data={'resolution_type': 'resolved_in_release'},
+            data={'resolution_type': 'in_release'},
         )
 
     def test_notify_after_resolve_in_next_release(self, delay):
@@ -116,7 +116,7 @@ class TestIssueWorkflowNotifications(APITestCase):
             issue_id=self.issue.id,
             type='resolved',
             user_id=self.user.id,
-            data={'resolution_type': 'resolved_in_release'},
+            data={'resolution_type': 'in_next_release'},
         )
 
     def test_notify_after_resolve_from_set_commits(self, delay):
@@ -161,7 +161,7 @@ class TestIssueWorkflowNotifications(APITestCase):
             issue_id=self.issue.id,
             type='resolved',
             user_id=None,
-            data={'resolution_type': 'resolved_in_commit'},
+            data={'resolution_type': 'with_commit'},
         )
 
     def test_notify_after_issue_ignored(self, delay):
