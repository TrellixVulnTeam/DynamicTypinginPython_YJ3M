commit dd5b5d72197578cf375d7359bce660ad7fe871a3
Author: Scott Cooper <scttcper@gmail.com>
Date:   Wed Jun 10 09:40:33 2020 -0700

    feat(alerts): New alert stream (#19210)

diff --git a/src/sentry/api/serializers/models/incident.py b/src/sentry/api/serializers/models/incident.py
index 7d5cba004f..323eb694ef 100644
--- a/src/sentry/api/serializers/models/incident.py
+++ b/src/sentry/api/serializers/models/incident.py
@@ -13,15 +13,22 @@ from sentry.utils.db import attach_foreignkey
 @register(Incident)
 class IncidentSerializer(Serializer):
     def get_attrs(self, item_list, user, **kwargs):
+        attach_foreignkey(item_list, Incident.alert_rule, related=("snuba_query",))
         incident_projects = defaultdict(list)
         for incident_project in IncidentProject.objects.filter(
             incident__in=item_list
         ).select_related("project"):
             incident_projects[incident_project.incident_id].append(incident_project.project.slug)
 
+        alert_rules = {
+            d["id"]: d
+            for d in serialize(set(i.alert_rule for i in item_list if i.alert_rule.id), user)
+        }
+
         results = {}
         for incident in item_list:
             results[incident] = {"projects": incident_projects.get(incident.id, [])}
+            results[incident]["alert_rule"] = alert_rules.get(six.text_type(incident.alert_rule.id))
 
         return results
 
@@ -31,6 +38,7 @@ class IncidentSerializer(Serializer):
             "identifier": six.text_type(obj.identifier),
             "organizationId": six.text_type(obj.organization_id),
             "projects": attrs["projects"],
+            "alertRule": attrs["alert_rule"],
             "status": obj.status,
             "statusMethod": obj.status_method,
             "type": obj.type,
@@ -45,7 +53,6 @@ class IncidentSerializer(Serializer):
 class DetailedIncidentSerializer(IncidentSerializer):
     def get_attrs(self, item_list, user, **kwargs):
         results = super(DetailedIncidentSerializer, self).get_attrs(item_list, user=user, **kwargs)
-        attach_foreignkey(item_list, Incident.alert_rule, related=("snuba_query",))
         subscribed_incidents = set()
         if user.is_authenticated():
             subscribed_incidents = set(
@@ -82,7 +89,6 @@ class DetailedIncidentSerializer(IncidentSerializer):
         context["isSubscribed"] = attrs["is_subscribed"]
         context["seenBy"] = seen_list["seen_by"]
         context["hasSeen"] = seen_list["has_seen"]
-        context["alertRule"] = serialize(obj.alert_rule, user)
         # The query we should use to get accurate results in Discover.
         context["discoverQuery"] = self._build_discover_query(obj)
 
diff --git a/src/sentry/static/sentry/app/views/alerts/details/body.tsx b/src/sentry/static/sentry/app/views/alerts/details/body.tsx
index 490cf8409d..90394d5990 100644
--- a/src/sentry/static/sentry/app/views/alerts/details/body.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/details/body.tsx
@@ -20,15 +20,8 @@ import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 import {Panel, PanelBody, PanelFooter} from 'app/components/panels';
 import Button from 'app/components/button';
-import {
-  AlertRuleThresholdType,
-  Trigger,
-  Dataset,
-} from 'app/views/settings/incidentRules/types';
-import {
-  PRESET_AGGREGATES,
-  makeDefaultCta,
-} from 'app/views/settings/incidentRules/presets';
+import {AlertRuleThresholdType, Trigger} from 'app/views/settings/incidentRules/types';
+import {makeDefaultCta} from 'app/views/settings/incidentRules/presets';
 import {DATASET_EVENT_TYPE_FILTERS} from 'app/views/settings/incidentRules/constants';
 
 import Activity from './activity';
@@ -40,7 +33,7 @@ import {
   IncidentStatus,
   IncidentStatusMethod,
 } from '../types';
-import {getIncidentDiscoverUrl} from '../utils';
+import {getIncidentDiscoverUrl, getIncidentMetricPreset} from '../utils';
 
 type Props = {
   incident?: Incident;
@@ -49,13 +42,8 @@ type Props = {
 
 export default class DetailsBody extends React.Component<Props> {
   get metricPreset() {
-    const alertRule = this.props.incident?.alertRule;
-    const aggregate = alertRule?.aggregate;
-    const dataset = alertRule?.dataset ?? Dataset.ERRORS;
-
-    return PRESET_AGGREGATES.find(
-      p => p.validDataset.includes(dataset) && p.match.test(aggregate ?? '')
-    );
+    const {incident} = this.props;
+    return incident ? getIncidentMetricPreset(incident) : undefined;
   }
 
   /**
@@ -228,7 +216,7 @@ export default class DetailsBody extends React.Component<Props> {
                     aggregate={incident.alertRule.aggregate}
                     data={stats.eventStats.data}
                     detected={incident.dateDetected}
-                    closed={incident.dateClosed}
+                    closed={incident.dateClosed || undefined}
                   />
                 ) : (
                   <Placeholder height="200px" />
diff --git a/src/sentry/static/sentry/app/views/alerts/list/index.tsx b/src/sentry/static/sentry/app/views/alerts/list/index.tsx
index 293448deaf..840ef1a77d 100644
--- a/src/sentry/static/sentry/app/views/alerts/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/list/index.tsx
@@ -52,8 +52,8 @@ const trackDocumentationClicked = (org: Organization) =>
     user_id: ConfigStore.get('user').id,
   });
 
-function getQueryStatus(status: any) {
-  return ['open', 'closed', 'all'].includes(status) ? status : DEFAULT_QUERY_STATUS;
+function getQueryStatus(status: any): 'open' | 'closed' {
+  return ['open', 'closed'].includes(status) ? status : DEFAULT_QUERY_STATUS;
 }
 
 class IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state']> {
@@ -122,7 +122,7 @@ class IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state'
         <p>
           <React.Fragment>
             {tct('No [status] metric alerts. ', {
-              status: status === 'open' || status === 'all' ? 'active' : 'resolved',
+              status: status === 'open' ? 'active' : 'resolved',
             })}
           </React.Fragment>
           <React.Fragment>
@@ -152,23 +152,24 @@ class IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state'
         ? true
         : false;
     const showLoadingIndicator = loading || checkingForAlertRules;
+    const status = getQueryStatus(this.props.location.query.status);
 
     return (
       <React.Fragment>
         <Panel>
-          <PanelHeader>
-            <TableLayout>
-              <TitleAndSparkLine>
+          <StyledPanelHeader>
+            <TableLayout status={status}>
+              <PaddedTitleAndSparkLine status={status}>
                 <div>{t('Alert')}</div>
-                <RightAlignedHeader>{t('Trend')}</RightAlignedHeader>
-              </TitleAndSparkLine>
+                {status === 'open' && <div>{t('Graph')}</div>}
+              </PaddedTitleAndSparkLine>
+              {status === 'open' && <div>{t('Current Status')}</div>}
               <div>{t('Project')}</div>
-              <div>{t('Status')}</div>
-              <div>{t('Start time (duration)')}</div>
-              <RightAlignedHeader>{t('Users affected')}</RightAlignedHeader>
-              <RightAlignedHeader>{t('Total events')}</RightAlignedHeader>
+              <div>{t('Triggered')}</div>
+              {status === 'closed' && <div>{t('Duration')}</div>}
+              {status === 'closed' && <div>{t('Resolved')}</div>}
             </TableLayout>
-          </PanelHeader>
+          </StyledPanelHeader>
 
           <PanelBody>
             {showLoadingIndicator && <LoadingIndicator />}
@@ -184,6 +185,7 @@ class IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state'
                         projects={projects}
                         incident={incident}
                         orgId={orgId}
+                        filteredStatus={status}
                       />
                     ))
                   }
@@ -250,7 +252,6 @@ class IncidentsListContainer extends React.Component<Props> {
 
     const openIncidentsQuery = omit({...query, status: 'open'}, 'cursor');
     const closedIncidentsQuery = omit({...query, status: 'closed'}, 'cursor');
-    const allIncidentsQuery = omit({...query, status: 'all'}, 'cursor');
 
     const status = getQueryStatus(query.status);
 
@@ -308,13 +309,6 @@ class IncidentsListContainer extends React.Component<Props> {
                   >
                     {t('Resolved')}
                   </Button>
-                  <Button
-                    to={{pathname, query: allIncidentsQuery}}
-                    barId="all"
-                    size="small"
-                  >
-                    {t('All')}
-                  </Button>
                 </ButtonBar>
               </Actions>
             </PageHeader>
@@ -348,6 +342,15 @@ const StyledPageHeading = styled(PageHeading)`
   align-items: center;
 `;
 
+const PaddedTitleAndSparkLine = styled(TitleAndSparkLine)`
+  padding-left: ${space(2)};
+`;
+
+const StyledPanelHeader = styled(PanelHeader)`
+  /* Match table row padding for the grid to align */
+  padding: ${space(1.5)} ${space(2)} ${space(1.5)} 0;
+`;
+
 const Actions = styled('div')`
   display: grid;
   align-items: center;
@@ -355,8 +358,4 @@ const Actions = styled('div')`
   grid-auto-flow: column;
 `;
 
-const RightAlignedHeader = styled('div')`
-  text-align: right;
-`;
-
 export default withOrganization(IncidentsListContainer);
diff --git a/src/sentry/static/sentry/app/views/alerts/list/row.tsx b/src/sentry/static/sentry/app/views/alerts/list/row.tsx
index 6af01b475c..80aeca29ac 100644
--- a/src/sentry/static/sentry/app/views/alerts/list/row.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/list/row.tsx
@@ -5,30 +5,34 @@ import styled from '@emotion/styled';
 
 import {IconWarning} from 'app/icons';
 import {PanelItem} from 'app/components/panels';
-import {t} from 'app/locale';
+import {t, tct} from 'app/locale';
 import AsyncComponent from 'app/components/asyncComponent';
 import Count from 'app/components/count';
+import DateTime from 'app/components/dateTime';
 import Duration from 'app/components/duration';
 import ErrorBoundary from 'app/components/errorBoundary';
 import IdBadge from 'app/components/idBadge';
 import Link from 'app/components/links/link';
 import Placeholder from 'app/components/placeholder';
 import Projects from 'app/utils/projects';
+import theme from 'app/utils/theme';
+import TimeSince from 'app/components/timeSince';
 import Tooltip from 'app/components/tooltip';
 import getDynamicText from 'app/utils/getDynamicText';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 import space from 'app/styles/space';
 
-import {Incident, IncidentStats} from '../types';
+import {Incident, IncidentStats, IncidentStatus} from '../types';
+import {getIncidentMetricPreset} from '../utils';
 import {TableLayout, TitleAndSparkLine} from './styles';
 import SparkLine from './sparkLine';
-import Status from '../status';
 
 type Props = {
   incident: Incident;
   projects: Parameters<React.ComponentProps<typeof Projects>['children']>[0]['projects'];
   projectsLoaded: boolean;
   orgId: string;
+  filteredStatus: 'open' | 'closed';
 } & AsyncComponent['props'];
 
 type State = {
@@ -36,10 +40,23 @@ type State = {
 } & AsyncComponent['state'];
 
 class AlertListRow extends AsyncComponent<Props, State> {
+  get metricPreset() {
+    const {incident} = this.props;
+    return incident ? getIncidentMetricPreset(incident) : undefined;
+  }
+
   getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {
-    const {orgId, incident} = this.props;
-    return [['stats', `/organizations/${orgId}/incidents/${incident.identifier}/stats/`]];
+    const {orgId, incident, filteredStatus} = this.props;
+
+    if (filteredStatus === 'open') {
+      return [
+        ['stats', `/organizations/${orgId}/incidents/${incident.identifier}/stats/`],
+      ];
+    }
+
+    return [];
   }
+
   /**
    * Memoized function to find a project from a list of projects
    */
@@ -55,57 +72,95 @@ class AlertListRow extends AsyncComponent<Props, State> {
     return this.renderBody();
   }
 
+  renderTimeSince(date: string) {
+    return (
+      <CreatedResolvedTime>
+        <TimeSince date={date} />
+        <br />
+        <StyledDateTime date={date} utc={false} />
+      </CreatedResolvedTime>
+    );
+  }
+
+  renderStatusIndicator() {
+    const {status} = this.props.incident;
+    const isResolved = status === IncidentStatus.CLOSED;
+    const isWarning = status === IncidentStatus.WARNING;
+
+    const color = isResolved ? theme.gray400 : isWarning ? theme.orange300 : theme.red300;
+    const text = isResolved ? t('Resolved') : isWarning ? t('Warning') : t('Critical');
+
+    return (
+      <Tooltip title={tct('Status: [text]', {text})}>
+        <StatusIndicator color={color} />
+      </Tooltip>
+    );
+  }
+
   renderBody() {
-    const {incident, orgId, projectsLoaded, projects} = this.props;
+    const {incident, orgId, projectsLoaded, projects, filteredStatus} = this.props;
     const {loading, error, stats} = this.state;
     const started = moment(incident.dateStarted);
     const duration = moment
       .duration(moment(incident.dateClosed || new Date()).diff(started))
       .as('seconds');
     const slug = incident.projects[0];
+    const lastEventStatsValue =
+      stats?.eventStats.data[stats.eventStats.data.length - 1]?.[1]?.[0]?.count || 0;
 
     return (
       <ErrorBoundary>
         <IncidentPanelItem>
-          <TableLayout>
-            <TitleAndSparkLine>
-              <TitleLink to={`/organizations/${orgId}/alerts/${incident.identifier}/`}>
+          <TableLayout status={filteredStatus}>
+            <TitleAndSparkLine status={filteredStatus}>
+              <Title>
+                {this.renderStatusIndicator()}
+                <IncidentLink
+                  to={`/organizations/${orgId}/alerts/${incident.identifier}/`}
+                >
+                  #{incident.id}
+                </IncidentLink>
                 {incident.title}
-              </TitleLink>
+              </Title>
 
-              <SparkLine
-                error={error && <ErrorLoadingStatsIcon />}
-                eventStats={stats?.eventStats}
-              />
+              {filteredStatus === 'open' && (
+                <SparkLine
+                  error={error && <ErrorLoadingStatsIcon />}
+                  eventStats={stats?.eventStats}
+                />
+              )}
             </TitleAndSparkLine>
 
+            {filteredStatus === 'open' && (
+              <NumericColumn>
+                {!loading && !error ? (
+                  <React.Fragment>
+                    <MetricName>
+                      {this.metricPreset?.name ?? t('Custom metric')}
+                      {':'}
+                    </MetricName>
+                    <Count value={lastEventStatsValue} />
+                  </React.Fragment>
+                ) : (
+                  <NumericPlaceholder error={error && <ErrorLoadingStatsIcon />} />
+                )}
+              </NumericColumn>
+            )}
+
             <ProjectBadge
               avatarSize={18}
               project={!projectsLoaded ? {slug} : this.getProject(slug, projects)}
             />
 
-            <Status incident={incident} />
+            {this.renderTimeSince(incident.dateStarted)}
 
-            <div>
-              {started.format('L')}
-              <LightDuration seconds={getDynamicText({value: duration, fixed: 1200})} />
-            </div>
-
-            <NumericColumn>
-              {!loading && !error ? (
-                <Count value={stats?.uniqueUsers} />
-              ) : (
-                <NumericPlaceholder error={error && <ErrorLoadingStatsIcon />} />
-              )}
-            </NumericColumn>
+            {filteredStatus === 'closed' && (
+              <Duration seconds={getDynamicText({value: duration, fixed: 1200})} />
+            )}
 
-            <NumericColumn>
-              {!loading && !error ? (
-                <Count value={stats?.totalEvents} />
-              ) : (
-                <NumericPlaceholder error={error && <ErrorLoadingStatsIcon />} />
-              )}
-            </NumericColumn>
+            {filteredStatus === 'closed' &&
+              incident.dateClosed &&
+              this.renderTimeSince(incident.dateClosed)}
           </TableLayout>
         </IncidentPanelItem>
       </ErrorBoundary>
@@ -121,22 +176,45 @@ function ErrorLoadingStatsIcon() {
   );
 }
 
-const LightDuration = styled(Duration)`
-  color: ${p => p.theme.gray400};
-  font-size: 0.9em;
-  margin-left: ${space(1)};
+const CreatedResolvedTime = styled('div')`
+  ${overflowEllipsis}
+  line-height: 1.4;
+`;
+
+const StyledDateTime = styled(DateTime)`
+  font-size: ${p => p.theme.fontSizeSmall};
+  color: ${p => p.theme.gray500};
 `;
 
 const ProjectBadge = styled(IdBadge)`
   flex-shrink: 0;
 `;
 
-const TitleLink = styled(Link)`
+const StatusIndicator = styled('div')<{color: string}>`
+  width: 10px;
+  height: 12px;
+  background: ${p => p.color};
+  display: inline-block;
+  border-top-right-radius: 40%;
+  border-bottom-right-radius: 40%;
+  margin-bottom: -1px;
+`;
+
+const Title = styled('span')`
   ${overflowEllipsis}
 `;
 
+const MetricName = styled('span')`
+  margin-right: ${space(0.5)};
+`;
+
+const IncidentLink = styled(Link)`
+  padding: 0 ${space(1)};
+`;
+
 const IncidentPanelItem = styled(PanelItem)`
-  padding: ${space(1)} ${space(2)};
+  font-size: ${p => p.theme.fontSizeMedium};
+  padding: ${space(1.5)} ${space(2)} ${space(1.5)} 0;
 `;
 
 const NumericPlaceholder = styled(Placeholder)<{error?: React.ReactNode}>`
@@ -153,7 +231,6 @@ const NumericColumn = styled('div')`
   height: 100%;
   display: flex;
   align-items: center;
-  justify-content: flex-end;
 `;
 
 export default AlertListRow;
diff --git a/src/sentry/static/sentry/app/views/alerts/list/styles.tsx b/src/sentry/static/sentry/app/views/alerts/list/styles.tsx
index 1ba155d843..1721a5e88a 100644
--- a/src/sentry/static/sentry/app/views/alerts/list/styles.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/list/styles.tsx
@@ -2,16 +2,17 @@ import styled from '@emotion/styled';
 
 import space from 'app/styles/space';
 
-const TableLayout = styled('div')`
+const TableLayout = styled('div')<{status: 'open' | 'closed'}>`
   display: grid;
-  grid-template-columns: 4fr 1fr 1fr 2fr 1fr 1fr;
+  grid-template-columns: ${p =>
+    p.status === 'open' ? '4fr 2fr 1fr 2fr' : '3fr 2fr 2fr 1fr 2fr'};
   grid-column-gap: ${space(1.5)};
   width: 100%;
   align-items: center;
 `;
 
-const TitleAndSparkLine = styled('div')`
-  display: grid;
+const TitleAndSparkLine = styled('div')<{status: 'open' | 'closed'}>`
+  display: ${p => (p.status === 'open' ? 'grid' : 'flex')};
   grid-gap: ${space(1)};
   grid-template-columns: auto 120px;
   align-items: center;
diff --git a/src/sentry/static/sentry/app/views/alerts/types.tsx b/src/sentry/static/sentry/app/views/alerts/types.tsx
index c3e6dc0a6c..5f4288c19f 100644
--- a/src/sentry/static/sentry/app/views/alerts/types.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/types.tsx
@@ -4,7 +4,7 @@ import {User, Repository} from 'app/types';
 type Data = [number, {count: number}[]][];
 
 export type Incident = {
-  dateClosed: string;
+  dateClosed: string | null;
   dateStarted: string;
   dateDetected: string;
   dateCreated: string;
diff --git a/src/sentry/static/sentry/app/views/alerts/utils.tsx b/src/sentry/static/sentry/app/views/alerts/utils.tsx
index 8b5ce0ffd4..8147be657c 100644
--- a/src/sentry/static/sentry/app/views/alerts/utils.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/utils.tsx
@@ -4,6 +4,7 @@ import {getAggregateAlias} from 'app/utils/discover/fields';
 import {getUtcDateString} from 'app/utils/dates';
 import EventView from 'app/utils/discover/eventView';
 import {Dataset} from 'app/views/settings/incidentRules/types';
+import {PRESET_AGGREGATES} from 'app/views/settings/incidentRules/presets';
 
 import {Incident, IncidentStats, IncidentStatus} from './types';
 
@@ -68,6 +69,16 @@ export function isOpen(incident: Incident): boolean {
   }
 }
 
+export function getIncidentMetricPreset(incident: Incident) {
+  const alertRule = incident?.alertRule;
+  const aggregate = alertRule?.aggregate ?? '';
+  const dataset = alertRule?.dataset ?? Dataset.ERRORS;
+
+  return PRESET_AGGREGATES.find(
+    p => p.validDataset.includes(dataset) && p.match.test(aggregate)
+  );
+}
+
 /**
  * Gets start and end date query parameters from stats
  */
diff --git a/tests/js/spec/views/alerts/list/index.spec.jsx b/tests/js/spec/views/alerts/list/index.spec.jsx
index 368c2bebc4..58474edcd8 100644
--- a/tests/js/spec/views/alerts/list/index.spec.jsx
+++ b/tests/js/spec/views/alerts/list/index.spec.jsx
@@ -9,6 +9,7 @@ import ProjectsStore from 'app/stores/projectsStore';
 describe('IncidentsList', function() {
   const {routerContext, organization} = initializeOrg();
   let mock;
+  let statsMock;
   let projectMock;
   let wrapper;
   let projects;
@@ -48,14 +49,20 @@ describe('IncidentsList', function() {
         }),
       ],
     });
-    MockApiClient.addMockResponse({
+    statsMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/incidents/1/stats/',
       body: TestStubs.IncidentStats(),
     });
 
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/incidents/2/stats/',
-      body: TestStubs.IncidentStats({totalEvents: 1000, uniqueUsers: 32}),
+      body: TestStubs.IncidentStats({
+        totalEvents: 1000,
+        uniqueUsers: 32,
+        eventStats: {
+          data: [[1591390293327, [{count: 42}]]],
+        },
+      }),
     });
 
     projects = [
@@ -115,15 +122,7 @@ describe('IncidentsList', function() {
         .find('Count')
         .at(0)
         .text()
-    ).toBe('20');
-
-    expect(
-      items
-        .at(0)
-        .find('Count')
-        .at(1)
-        .text()
-    ).toBe('100');
+    ).toBe('0');
 
     expect(
       items
@@ -131,15 +130,7 @@ describe('IncidentsList', function() {
         .find('Count')
         .at(0)
         .text()
-    ).toBe('32');
-
-    expect(
-      items
-        .at(1)
-        .find('Count')
-        .at(1)
-        .text()
-    ).toBe('1k');
+    ).toBe('42');
   });
 
   it('displays empty state', async function() {
@@ -163,7 +154,7 @@ describe('IncidentsList', function() {
     expect(wrapper.text()).toContain('No active metric alerts.');
   });
 
-  it('toggles all/open', async function() {
+  it('toggles open/closed', async function() {
     wrapper = await createWrapper();
 
     expect(
@@ -174,6 +165,21 @@ describe('IncidentsList', function() {
         .prop('priority')
     ).toBe('primary');
 
+    expect(
+      wrapper
+        .find('IncidentPanelItem')
+        .at(0)
+        .find('Duration')
+        .exists()
+    ).toBeFalsy();
+
+    expect(
+      wrapper
+        .find('IncidentPanelItem')
+        .at(0)
+        .find('TimeSince')
+    ).toHaveLength(1);
+
     expect(mock).toHaveBeenCalledTimes(1);
 
     expect(mock).toHaveBeenCalledWith(
@@ -181,21 +187,38 @@ describe('IncidentsList', function() {
       expect.objectContaining({query: {status: 'open'}})
     );
 
-    wrapper.setProps({location: {query: {status: 'all'}, search: '?status=all`'}});
+    wrapper.setProps({location: {query: {status: 'closed'}, search: '?status=closed`'}});
 
     expect(
       wrapper
         .find('ButtonBar')
         .find('Button')
-        .at(2)
+        .at(1)
         .prop('priority')
     ).toBe('primary');
 
+    expect(
+      wrapper
+        .find('IncidentPanelItem')
+        .at(0)
+        .find('Duration')
+        .text()
+    ).toBe('2 weeks');
+
+    expect(
+      wrapper
+        .find('IncidentPanelItem')
+        .at(0)
+        .find('TimeSince')
+    ).toHaveLength(2);
+
     expect(mock).toHaveBeenCalledTimes(2);
+    // Stats not called for closed incidents
+    expect(statsMock).toHaveBeenCalledTimes(1);
 
     expect(mock).toHaveBeenCalledWith(
       '/organizations/org-slug/incidents/',
-      expect.objectContaining({query: expect.objectContaining({status: 'all'})})
+      expect.objectContaining({query: expect.objectContaining({status: 'closed'})})
     );
   });
 
