commit 7d8256247e1f07b9c5cacdbdf6b5f0f77839f2a9
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Apr 20 13:47:57 2015 -0700

    Some initial work on API key management

diff --git a/src/sentry/templates/sentry/bases/organization.html b/src/sentry/templates/sentry/bases/organization.html
index 0d8bdade45..56cd5236c0 100644
--- a/src/sentry/templates/sentry/bases/organization.html
+++ b/src/sentry/templates/sentry/bases/organization.html
@@ -79,6 +79,13 @@
       {% endfeature %}
     {% endif %}
     {% if ACCESS.org_write %}
+    <li class="{% block org_apikeys_nav %}{% endblock %}">
+      <a href="{% url 'sentry-organization-api-keys' organization.slug %}">
+        {% trans "API Keys" %}
+      </a>
+    </li>
+    {% endif %}
+    {% if ACCESS.org_write %}
     <li class="{% block org_settings_nav %}{% endblock %}">
       <a href="{% url 'sentry-organization-settings' organization.slug %}">
         {% trans "Settings" %}
diff --git a/src/sentry/templates/sentry/organization-api-key-settings.html b/src/sentry/templates/sentry/organization-api-key-settings.html
new file mode 100644
index 0000000000..7169d15562
--- /dev/null
+++ b/src/sentry/templates/sentry/organization-api-key-settings.html
@@ -0,0 +1,41 @@
+{% extends "sentry/bases/organization.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block title %}{% trans "API Keys" %} | {{ block.super }}{% endblock %}
+
+{% block org_apikeys_nav %}active{% endblock %}
+
+{% block inner %}
+  <div class="page-header">
+    <h2>{% trans "API Keys" %}</h2>
+  </div>
+
+  <table class="table simple-list table-bordered member-list">
+    <colgroup>
+      <col width="30%"/>
+      <col width="25%" />
+      <col width="20%"/>
+      <col width="20%"/>
+      <col width="5%"/>
+    </colgroup>
+    <thead>
+      <tr>
+        <th>Key</th>
+        <th>&nbsp;</th>
+      </tr>
+    </thead>
+    <tbody>
+      {% for key in key_list %}
+        <tr>
+          <td>
+            <a href="{% url 'sentry-organization-api-key-settings' organization.slug key.id %}">{{ key.label }}</a>
+          </td>
+          <td></td>
+        </tr>
+      {% endfor %}
+    </tbody>
+  </table>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/organization-api-keys.html b/src/sentry/templates/sentry/organization-api-keys.html
new file mode 100644
index 0000000000..4302baf4ee
--- /dev/null
+++ b/src/sentry/templates/sentry/organization-api-keys.html
@@ -0,0 +1,45 @@
+{% extends "sentry/bases/organization.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block title %}{% trans "API Keys" %} | {{ block.super }}{% endblock %}
+
+{% block org_apikeys_nav %}active{% endblock %}
+
+{% block inner %}
+  <div class="page-header">
+    <h2>{% trans "API Keys" %}</h2>
+  </div>
+
+  <table class="table simple-list table-bordered member-list">
+    <colgroup>
+      <col width="5%"/>
+    </colgroup>
+    <thead>
+      <tr>
+        <th>Key</th>
+        <th>&nbsp;</th>
+      </tr>
+    </thead>
+    <tbody>
+      {% if key_list %}
+        {% for key in key_list %}
+          <tr>
+            <td>
+              <a href="{% url 'sentry-organization-api-key-settings' organization.slug key.id %}">{{ key.label }}</a>
+            </td>
+            <td></td>
+          </tr>
+        {% endfor %}
+      {% else %}
+        <tr>
+          <td colspan="2">
+            <p class="alert-block">You haven't yet created any API keys for this organization. Get started by <a href="#">registering a new api key</a>.</p>
+          </td>
+        </tr>
+      {% endif %}
+    </tbody>
+  </table>
+{% endblock %}
diff --git a/src/sentry/web/frontend/organization_api_key_settings.py b/src/sentry/web/frontend/organization_api_key_settings.py
new file mode 100644
index 0000000000..7a1d1b4559
--- /dev/null
+++ b/src/sentry/web/frontend/organization_api_key_settings.py
@@ -0,0 +1,17 @@
+from __future__ import absolute_import
+
+from sentry.models import ApiKey, OrganizationMemberType
+from sentry.web.frontend.base import OrganizationView
+
+
+class OrganizationApiKeySettingsView(OrganizationView):
+    required_access = OrganizationMemberType.ADMIN
+
+    def handle(self, request, organization, key_id):
+        key = ApiKey.objects.get(organization=organization, id=key_id)
+
+        context = {
+            'key': key,
+        }
+
+        return self.respond('sentry/organization-api-key-settings.html', context)
diff --git a/src/sentry/web/frontend/organization_api_keys.py b/src/sentry/web/frontend/organization_api_keys.py
new file mode 100644
index 0000000000..a19908cc77
--- /dev/null
+++ b/src/sentry/web/frontend/organization_api_keys.py
@@ -0,0 +1,19 @@
+from __future__ import absolute_import
+
+from sentry.models import ApiKey, OrganizationMemberType
+from sentry.web.frontend.base import OrganizationView
+
+
+class OrganizationApiKeysView(OrganizationView):
+    required_access = OrganizationMemberType.ADMIN
+
+    def handle(self, request, organization):
+        key_list = sorted(ApiKey.objects.filter(
+            organization=organization,
+        ), key=lambda x: x.label)
+
+        context = {
+            'key_list': key_list,
+        }
+
+        return self.respond('sentry/organization-api-keys.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index d3e73a7db6..6d77aa1d0a 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -44,6 +44,8 @@ from sentry.web.frontend.help_page import HelpPageView
 from sentry.web.frontend.help_platform_details import HelpPlatformDetailsView
 from sentry.web.frontend.help_platform_index import HelpPlatformIndexView
 from sentry.web.frontend.mailgun_inbound_webhook import MailgunInboundWebhookView
+from sentry.web.frontend.organization_api_keys import OrganizationApiKeysView
+from sentry.web.frontend.organization_api_key_settings import OrganizationApiKeySettingsView
 from sentry.web.frontend.organization_audit_log import OrganizationAuditLogView
 from sentry.web.frontend.organization_auth_settings import OrganizationAuthSettingsView
 from sentry.web.frontend.organization_home import OrganizationHomeView
@@ -192,6 +194,10 @@ urlpatterns += patterns('',
         name='sentry-create-organization'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/access-groups/$', AccessGroupMigrationView.as_view(),
         name='sentry-organization-access-group-migration'),
+    url(r'^organizations/(?P<organization_slug>[\w_-]+)/api-keys/$', OrganizationApiKeysView.as_view(),
+        name='sentry-organization-api-keys'),
+    url(r'^organizations/(?P<organization_slug>[\w_-]+)/api-keys/(?P<key_id>[\w_-]+)$', OrganizationApiKeySettingsView.as_view(),
+        name='sentry-organization-api-key-settings'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/auth/$', OrganizationAuthSettingsView.as_view(),
         name='sentry-organization-auth-settings'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/audit-log/$', OrganizationAuditLogView.as_view(),
diff --git a/tests/sentry/web/frontend/test_organization_api_key_settings.py b/tests/sentry/web/frontend/test_organization_api_key_settings.py
new file mode 100644
index 0000000000..cacfcf300f
--- /dev/null
+++ b/tests/sentry/web/frontend/test_organization_api_key_settings.py
@@ -0,0 +1,46 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import ApiKey
+from sentry.testutils import TestCase, PermissionTestCase
+
+
+class OrganizationApiKeySettingsPermissionTest(PermissionTestCase):
+    def setUp(self):
+        super(OrganizationApiKeySettingsPermissionTest, self).setUp()
+        key = ApiKey.objects.create(organization=self.organization)
+        self.path = reverse('sentry-organization-api-key-settings', args=[
+            self.organization.slug, key.id
+        ])
+
+    def test_teamless_owner_cannot_load(self):
+        self.assert_teamless_owner_cannot_access(self.path)
+
+    def test_org_member_cannot_load(self):
+        self.assert_org_member_cannot_access(self.path)
+
+    def test_org_admin_can_load(self):
+        self.assert_org_admin_can_access(self.path)
+
+
+class OrganizationApiKeySettingsTest(TestCase):
+    def test_renders_with_context(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+
+        key = ApiKey.objects.create(organization=organization)
+
+        path = reverse('sentry-organization-api-key-settings', args=[
+            organization.slug, key.id,
+        ])
+
+        self.login_as(self.user)
+
+        resp = self.client.get(path)
+
+        assert resp.status_code == 200
+
+        self.assertTemplateUsed(resp, 'sentry/organization-api-key-settings.html')
+
+        assert resp.context['organization'] == organization
+        assert resp.context['key'] == key
diff --git a/tests/sentry/web/frontend/test_organization_api_keys.py b/tests/sentry/web/frontend/test_organization_api_keys.py
new file mode 100644
index 0000000000..9de2029654
--- /dev/null
+++ b/tests/sentry/web/frontend/test_organization_api_keys.py
@@ -0,0 +1,45 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import ApiKey
+from sentry.testutils import TestCase, PermissionTestCase
+
+
+class OrganizationApiKeysPermissionTest(PermissionTestCase):
+    def setUp(self):
+        super(OrganizationApiKeysPermissionTest, self).setUp()
+        self.path = reverse('sentry-organization-api-keys', args=[self.organization.slug])
+
+    def test_teamless_owner_cannot_load(self):
+        self.assert_teamless_owner_cannot_access(self.path)
+
+    def test_org_member_cannot_load(self):
+        self.assert_org_member_cannot_access(self.path)
+
+    def test_org_admin_can_load(self):
+        self.assert_org_admin_can_access(self.path)
+
+
+class OrganizationApiKeysTest(TestCase):
+    def test_renders_with_context(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+
+        key1 = ApiKey.objects.create(organization=organization, label='Bar')
+        key2 = ApiKey.objects.create(organization=organization, label='Foo')
+
+        path = reverse('sentry-organization-api-keys', args=[organization.slug])
+
+        self.login_as(self.user)
+
+        resp = self.client.get(path)
+
+        assert resp.status_code == 200
+
+        self.assertTemplateUsed(resp, 'sentry/organization-api-keys.html')
+
+        assert resp.context['organization'] == organization
+        assert resp.context['key_list'] == [
+            key1,
+            key2,
+        ]
