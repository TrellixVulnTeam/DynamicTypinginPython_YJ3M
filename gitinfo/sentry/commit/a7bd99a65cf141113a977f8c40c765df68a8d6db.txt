commit a7bd99a65cf141113a977f8c40c765df68a8d6db
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Apr 12 12:14:22 2019 -0700

    feat(saved-searches): Refactor and move pin + create saved search to store (#12737)
    
    Adds actions to (un)pin and create saved searches to store

diff --git a/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx b/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
index 6ee8ad2706..e14c9ef5cc 100644
--- a/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
@@ -1,6 +1,8 @@
 import {MAX_RECENT_SEARCHES, SEARCH_TYPES} from 'app/constants';
-import handleXhrErrorResponse from 'app/utils/handleXhrErrorResponse';
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {t} from 'app/locale';
 import SavedSearchesActions from 'app/actions/savedSearchesActions';
+import handleXhrErrorResponse from 'app/utils/handleXhrErrorResponse';
 
 export function fetchSavedSearches(api, orgId, useOrgSavedSearches = false) {
   const url = `/organizations/${orgId}/searches/`;
@@ -10,14 +12,21 @@ export function fetchSavedSearches(api, orgId, useOrgSavedSearches = false) {
     data.use_org_level = '1';
   }
 
+  SavedSearchesActions.startFetchSavedSearches();
+
   const promise = api.requestPromise(url, {
     method: 'GET',
     data,
   });
 
-  promise.then(res => {
-    SavedSearchesActions.updateSavedSearches(res);
-  });
+  promise
+    .then(resp => {
+      SavedSearchesActions.fetchSavedSearchesSuccess(resp);
+    })
+    .catch(err => {
+      SavedSearchesActions.fetchSavedSearchesError(err);
+      addErrorMessage(t('Unable to load saved searches'));
+    });
 
   return promise;
 }
@@ -66,7 +75,7 @@ export function saveRecentSearch(api, orgId, type, query) {
  */
 
 export function createSavedSearch(api, orgId, name, query) {
-  return api.requestPromise(`/organizations/${orgId}/searches/`, {
+  const promise = api.requestPromise(`/organizations/${orgId}/searches/`, {
     method: 'POST',
     data: {
       type: SEARCH_TYPES.ISSUE,
@@ -74,6 +83,14 @@ export function createSavedSearch(api, orgId, name, query) {
       name,
     },
   });
+
+  // Need to wait for saved search to save unfortunately because we need to redirect
+  // to saved search URL
+  promise.then(resp => {
+    SavedSearchesActions.createSavedSearchSuccess(resp);
+  });
+
+  return promise;
 }
 
 /**
@@ -105,6 +122,10 @@ const getPinSearchUrl = orgId => `/organizations/${orgId}/pinned-searches/`;
 
 export function pinSearch(api, orgId, type, query) {
   const url = getPinSearchUrl(orgId);
+
+  // Optimistically update store
+  SavedSearchesActions.pinSearch(type, query);
+
   const promise = api.requestPromise(url, {
     method: 'PUT',
     data: {
@@ -115,11 +136,19 @@ export function pinSearch(api, orgId, type, query) {
 
   promise.catch(handleXhrErrorResponse('Unable to pin search'));
 
+  promise.catch(err => {
+    SavedSearchesActions.unpinSearch(type);
+  });
+
   return promise;
 }
 
-export function unpinSearch(api, orgId, type) {
+export function unpinSearch(api, orgId, type, pinnedSearch) {
   const url = getPinSearchUrl(orgId);
+
+  // Optimistically update store
+  SavedSearchesActions.unpinSearch(type);
+
   const promise = api.requestPromise(url, {
     method: 'DELETE',
     data: {
@@ -129,6 +158,11 @@ export function unpinSearch(api, orgId, type) {
 
   promise.catch(handleXhrErrorResponse('Unable to un-pin search'));
 
+  promise.catch(() => {
+    const {type: pinnedType, query, ...rest} = pinnedSearch;
+    SavedSearchesActions.pinSearch(pinnedType, query, ...rest);
+  });
+
   return promise;
 }
 
diff --git a/src/sentry/static/sentry/app/actions/savedSearchesActions.jsx b/src/sentry/static/sentry/app/actions/savedSearchesActions.jsx
index 25f374d98d..1befbf425e 100644
--- a/src/sentry/static/sentry/app/actions/savedSearchesActions.jsx
+++ b/src/sentry/static/sentry/app/actions/savedSearchesActions.jsx
@@ -1,3 +1,11 @@
 import Reflux from 'reflux';
 
-export default Reflux.createActions(['loadSavedSearches', 'updateSavedSearches']);
+export default Reflux.createActions([
+  'startFetchSavedSearches',
+  'fetchSavedSearchesSuccess',
+  'fetchSavedSearchesError',
+  'createSavedSearchSuccess',
+  'deleteSavedSearchSuccess',
+  'pinSearch',
+  'unpinSearch',
+]);
diff --git a/src/sentry/static/sentry/app/components/smartSearchBar.jsx b/src/sentry/static/sentry/app/components/smartSearchBar.jsx
index d6403a2085..bf800ba948 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar.jsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar.jsx
@@ -532,7 +532,7 @@ class SmartSearchBar extends React.Component {
     }
 
     if (!!pinnedSearch) {
-      unpinSearch(api, organization.slug, savedSearchType);
+      unpinSearch(api, organization.slug, savedSearchType, pinnedSearch);
     } else {
       pinSearch(api, organization.slug, savedSearchType, this.state.query);
     }
diff --git a/src/sentry/static/sentry/app/stores/savedSearchesStore.jsx b/src/sentry/static/sentry/app/stores/savedSearchesStore.jsx
index 0b168fd4e6..8b21d2ae43 100644
--- a/src/sentry/static/sentry/app/stores/savedSearchesStore.jsx
+++ b/src/sentry/static/sentry/app/stores/savedSearchesStore.jsx
@@ -1,18 +1,36 @@
+import {findIndex} from 'lodash';
 import Reflux from 'reflux';
 
 import SavedSearchesActions from 'app/actions/savedSearchesActions';
 
 const SavedSearchesStore = Reflux.createStore({
   init() {
+    const {
+      startFetchSavedSearches,
+      fetchSavedSearchesSuccess,
+      fetchSavedSearchesError,
+      createSavedSearchSuccess,
+      deleteSavedSearchSuccess,
+      pinSearch,
+      unpinSearch,
+    } = SavedSearchesActions;
+
+    this.listenTo(startFetchSavedSearches, this.onStartFetchSavedSearches);
+    this.listenTo(fetchSavedSearchesSuccess, this.onFetchSavedSearchesSuccess);
+    this.listenTo(fetchSavedSearchesError, this.onFetchSavedSearchesError);
+    this.listenTo(createSavedSearchSuccess, this.onCreateSavedSearchSuccess);
+    this.listenTo(deleteSavedSearchSuccess, this.onDeleteSavedSearchSuccess);
+    this.listenTo(pinSearch, this.onPinSearch);
+    this.listenTo(unpinSearch, this.onUnpinSearch);
+
     this.reset();
-    this.listenTo(SavedSearchesActions.loadSavedSearches, this.onLoadSavedSearches);
-    this.listenTo(SavedSearchesActions.updateSavedSearches, this.onUpdateSavedSearches);
   },
 
   reset() {
     this.state = {
-      isLoading: true,
       savedSearches: [],
+      hasError: false,
+      isLoading: true,
     };
   },
 
@@ -20,15 +38,132 @@ const SavedSearchesStore = Reflux.createStore({
     return this.state;
   },
 
-  onLoadSavedSearches() {
-    this.reset();
+  /**
+   * If pinned search, remove from list if user created pin (e.g. not org saved search and not global)
+   * Otherwise change `isPinned` to false (e.g. if it's default or org saved search)
+   */
+  getFilteredSearches(type, existingSearchId) {
+    return this.state.savedSearches
+      .filter(
+        savedSearch =>
+          !(
+            savedSearch.isPinned &&
+            savedSearch.type === type &&
+            (!savedSearch.isOrgCustom && !savedSearch.isGlobal)
+          )
+      )
+      .map(savedSearch => {
+        if (
+          typeof existingSearchId !== 'undefined' &&
+          existingSearchId === savedSearch.id
+        ) {
+          // Do not update existing search
+          return savedSearch;
+        }
+
+        return {...savedSearch, isPinned: false};
+      });
+  },
+
+  updateExistingSearch(id, updateObj) {
+    const index = findIndex(
+      this.state.savedSearches,
+      savedSearch => savedSearch.id === id
+    );
+
+    if (index === -1) {
+      return null;
+    }
+
+    const existingSavedSearch = this.state.savedSearches[index];
+    const newSavedSearch = {
+      ...existingSavedSearch,
+      ...updateObj,
+    };
+    this.state.savedSearches[index] = newSavedSearch;
+    return newSavedSearch;
+  },
+
+  /**
+   * Find saved search by query string
+   */
+  findByQuery(query) {
+    return this.state.savedSearches.find(savedSearch => query === savedSearch.query);
+  },
+
+  onStartFetchSavedSearches() {
+    this.state = {
+      ...this.state,
+      isLoading: true,
+    };
     this.trigger(this.state);
   },
 
-  onUpdateSavedSearches(savedSearches) {
+  onFetchSavedSearchesSuccess(data) {
     this.state = {
+      ...this.state,
+      savedSearches: data,
       isLoading: false,
-      savedSearches,
+    };
+    this.trigger(this.state);
+  },
+
+  onFetchSavedSearchesError(resp) {
+    this.state = {
+      ...this.state,
+      savedSearches: [],
+      isLoading: false,
+      hasError: true,
+    };
+    this.trigger(this.state);
+  },
+
+  onCreateSavedSearchSuccess(resp) {
+    this.state = {
+      ...this.state,
+      savedSearches: [...this.state.savedSearches, resp],
+    };
+
+    this.trigger(this.state);
+  },
+
+  onPinSearch(type, query, ...args) {
+    const existingSearch = this.findByQuery(query);
+
+    if (existingSearch) {
+      this.updateExistingSearch(existingSearch.id, {isPinned: true});
+    }
+
+    const newPinnedSearch =
+      (!existingSearch && [
+        {
+          id: null,
+          name: 'My Pinned Search',
+          type,
+          query,
+          isPinned: true,
+        },
+      ]) ||
+      [];
+
+    this.state = {
+      ...this.state,
+      savedSearches: [
+        ...newPinnedSearch,
+
+        // There can only be 1 pinned search, so the rest must be unpinned
+        // Also if we are pinning an existing search, then filter that out too
+        ...this.getFilteredSearches(type, existingSearch && existingSearch.id),
+      ],
+    };
+    this.trigger(this.state);
+  },
+
+  onUnpinSearch(type) {
+    this.state = {
+      ...this.state,
+      // Design decision that there can only be 1 pinned search per `type`
+      savedSearches: this.getFilteredSearches(type),
     };
     this.trigger(this.state);
   },
diff --git a/src/sentry/static/sentry/app/utils/withSavedSearches.jsx b/src/sentry/static/sentry/app/utils/withSavedSearches.jsx
new file mode 100644
index 0000000000..48e4c64a67
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/withSavedSearches.jsx
@@ -0,0 +1,59 @@
+import React from 'react';
+import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
+
+import Feature from 'app/components/acl/feature';
+import SavedSearchesStore from 'app/stores/savedSearchesStore';
+import getDisplayName from 'app/utils/getDisplayName';
+
+/**
+ * Currently wraps component with organization from context
+ */
+const withSavedSearches = WrappedComponent =>
+  createReactClass({
+    displayName: `withSavedSearches(${getDisplayName(WrappedComponent)})`,
+    mixins: [Reflux.listenTo(SavedSearchesStore, 'onUpdate')],
+    getInitialState() {
+      return SavedSearchesStore.get();
+    },
+
+    onUpdate(newState) {
+      this.setState(newState);
+    },
+
+    render() {
+      return (
+        <Feature features={['org-saved-searches']}>
+          {({hasFeature}) => {
+            const {params} = this.props;
+            const {searchId} = params;
+            const {savedSearches, isLoading} = this.state;
+            let savedSearch = null;
+            // Switch to the current saved search or pinned result if available
+            if (!isLoading && savedSearches) {
+              if (searchId) {
+                const match = savedSearches.find(search => search.id === searchId);
+                savedSearch = match ? match : null;
+              }
+              if (hasFeature && !savedSearch) {
+                const pin = savedSearches.find(search => search.isPinned);
+                savedSearch = pin ? pin : null;
+              }
+            }
+
+            return (
+              <WrappedComponent
+                savedSearches={savedSearches}
+                savedSearchLoading={isLoading}
+                savedSearch={savedSearch}
+                useOrgSavedSearches={hasFeature}
+                {...this.props}
+              />
+            );
+          }}
+        </Feature>
+      );
+    },
+  });
+
+export default withSavedSearches;
diff --git a/tests/js/fixtures/search.js b/tests/js/fixtures/search.js
new file mode 100644
index 0000000000..6f7bf19ad5
--- /dev/null
+++ b/tests/js/fixtures/search.js
@@ -0,0 +1,19 @@
+export function Search(params = {}) {
+  return {
+    dateCreated: '2017-11-14T02:22:58.026Z',
+    isGlobal: false,
+    isOrgCustom: false,
+    isPinned: false,
+    type: 0,
+
+    // deprecated props
+    isUserDefault: false,
+    isDefault: true,
+    isPrivate: false,
+
+    name: 'Needs Triage',
+    query: 'is:unresolved is:unassigned',
+    id: '2',
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/searches.js b/tests/js/fixtures/searches.js
index dafa1cc031..d8ee445a1d 100644
--- a/tests/js/fixtures/searches.js
+++ b/tests/js/fixtures/searches.js
@@ -1,23 +1,19 @@
+import {Search} from 'app-test/fixtures/search';
+
 export function Searches(params = []) {
   return [
-    {
+    Search({
       name: 'Needs Triage',
-      dateCreated: '2017-11-14T02:22:58.026Z',
-      isUserDefault: false,
-      isPrivate: false,
       query: 'is:unresolved is:unassigned',
       id: '2',
-      isDefault: true,
-    },
-    {
+      isGlobal: true,
+    }),
+    Search({
       name: 'Unresolved Issues',
-      dateCreated: '2017-11-14T02:22:58.022Z',
-      isUserDefault: true,
-      isPrivate: false,
       query: 'is:unresolved',
       id: '1',
-      isDefault: false,
-    },
+      isGlobal: true,
+    }),
     ...params,
   ];
 }
diff --git a/tests/js/spec/stores/savedSearchesStore.spec.jsx b/tests/js/spec/stores/savedSearchesStore.spec.jsx
index 3035802df0..87c1964f05 100644
--- a/tests/js/spec/stores/savedSearchesStore.spec.jsx
+++ b/tests/js/spec/stores/savedSearchesStore.spec.jsx
@@ -1,13 +1,32 @@
 import SavedSearchesStore from 'app/stores/savedSearchesStore';
-import {fetchSavedSearches} from 'app/actionCreators/savedSearches';
+import {
+  fetchSavedSearches,
+  pinSearch,
+  unpinSearch,
+} from 'app/actionCreators/savedSearches';
 import {Client} from 'app/api';
 
 describe('SavedSearchesStore', function() {
+  let api;
+
+  beforeAll(function() {
+    api = new Client();
+  });
+
   beforeEach(function() {
+    SavedSearchesStore.reset();
     Client.addMockResponse({
       url: '/organizations/org-1/searches/',
       body: TestStubs.Searches(),
     });
+    Client.addMockResponse({
+      url: '/organizations/org-1/pinned-searches/',
+      method: 'PUT',
+    });
+    Client.addMockResponse({
+      url: '/organizations/org-1/pinned-searches/',
+      method: 'DELETE',
+    });
   });
 
   afterEach(function() {
@@ -15,14 +34,228 @@ describe('SavedSearchesStore', function() {
   });
 
   it('get', function() {
-    expect(SavedSearchesStore.get()).toEqual({isLoading: true, savedSearches: []});
+    expect(SavedSearchesStore.get()).toEqual({
+      hasError: false,
+      isLoading: true,
+      savedSearches: [],
+    });
   });
 
   it('fetching saved searches updates store', async function() {
-    const api = new Client();
     fetchSavedSearches(api, 'org-1');
     await tick();
     expect(SavedSearchesStore.get().savedSearches).toHaveLength(2);
     expect(SavedSearchesStore.get().isLoading).toBe(false);
   });
+
+  it('creates a new pin search', async function() {
+    fetchSavedSearches(api, 'org-1');
+    await tick();
+
+    pinSearch(api, 'org-1', 0, 'level:info');
+    await tick();
+
+    expect(SavedSearchesStore.get().savedSearches).toHaveLength(3);
+    expect(SavedSearchesStore.get().savedSearches[0]).toEqual(
+      expect.objectContaining({
+        id: null,
+        isPinned: true,
+        type: 0,
+        query: 'level:info',
+        name: 'My Pinned Search',
+      })
+    );
+  });
+
+  it('changes pinned search from a custom search to an existing search', async function() {
+    const searches = TestStubs.Searches();
+
+    Client.addMockResponse({
+      url: '/organizations/org-1/searches/',
+      body: [
+        {
+          id: null,
+          isPinned: true,
+          type: 0,
+          query: 'assigned:me',
+        },
+        ...searches,
+      ],
+    });
+    fetchSavedSearches(api, 'org-1');
+    await tick();
+
+    pinSearch(api, 'org-1', 0, searches[1].query);
+    await tick();
+
+    // Order should remain the same
+    expect(SavedSearchesStore.get().savedSearches[1]).toEqual(
+      expect.objectContaining({
+        id: '1',
+        isPinned: true,
+        type: 0,
+        name: 'Unresolved Issues',
+        query: 'is:unresolved',
+      })
+    );
+
+    // Saved custom search should be removed
+    expect(SavedSearchesStore.get().savedSearches).toHaveLength(2);
+  });
+
+  it('changes pinned search from an existing search to another existing search', async function() {
+    const searches = TestStubs.Searches();
+
+    Client.addMockResponse({
+      url: '/organizations/org-1/searches/',
+      body: [{...searches[0], isPinned: true}, searches[1]],
+    });
+    fetchSavedSearches(api, 'org-1');
+    await tick();
+
+    pinSearch(api, 'org-1', 0, searches[1].query);
+    await tick();
+
+    expect(SavedSearchesStore.get().savedSearches).toHaveLength(2);
+
+    expect(SavedSearchesStore.get().savedSearches[0]).toEqual(
+      expect.objectContaining({
+        id: '2',
+        isPinned: false,
+        type: 0,
+        name: 'Needs Triage',
+        query: 'is:unresolved is:unassigned',
+      })
+    );
+
+    expect(SavedSearchesStore.get().savedSearches[1]).toEqual(
+      expect.objectContaining({
+        id: '1',
+        isPinned: true,
+        type: 0,
+        name: 'Unresolved Issues',
+        query: 'is:unresolved',
+      })
+    );
+  });
+
+  it('unpins a user custom search (not global, and not org custom)', async function() {
+    const searches = TestStubs.Searches();
+
+    Client.addMockResponse({
+      url: '/organizations/org-1/searches/',
+      body: [
+        {
+          id: null,
+          isPinned: true,
+          type: 0,
+          query: 'assigned:me',
+        },
+        ...searches,
+      ],
+    });
+    fetchSavedSearches(api, 'org-1');
+    await tick();
+
+    unpinSearch(api, 'org-1', 0, searches[0]);
+    await tick();
+
+    // Saved custom search should be removed
+    expect(SavedSearchesStore.get().savedSearches).toHaveLength(2);
+
+    expect(SavedSearchesStore.get().savedSearches[0]).toEqual(
+      expect.objectContaining({
+        id: '2',
+        isPinned: false,
+        type: 0,
+        name: 'Needs Triage',
+        query: 'is:unresolved is:unassigned',
+      })
+    );
+
+    expect(SavedSearchesStore.get().savedSearches[1]).toEqual(
+      expect.objectContaining({
+        id: '1',
+        isPinned: false,
+        type: 0,
+        name: 'Unresolved Issues',
+        query: 'is:unresolved',
+      })
+    );
+  });
+
+  it('unpins an existing global saved search', async function() {
+    const searches = TestStubs.Searches();
+
+    Client.addMockResponse({
+      url: '/organizations/org-1/searches/',
+      body: [{...searches[0], isPinned: true}, searches[1]],
+    });
+    fetchSavedSearches(api, 'org-1');
+    await tick();
+
+    unpinSearch(api, 'org-1', 0, searches[0]);
+    await tick();
+
+    expect(SavedSearchesStore.get().savedSearches).toHaveLength(2);
+
+    expect(SavedSearchesStore.get().savedSearches[0]).toEqual(
+      expect.objectContaining({
+        id: '2',
+        isPinned: false,
+        type: 0,
+        name: 'Needs Triage',
+        query: 'is:unresolved is:unassigned',
+      })
+    );
+
+    expect(SavedSearchesStore.get().savedSearches[1]).toEqual(
+      expect.objectContaining({
+        id: '1',
+        isPinned: false,
+        type: 0,
+        name: 'Unresolved Issues',
+        query: 'is:unresolved',
+      })
+    );
+  });
+
+  it('unpins an existing org saved search', async function() {
+    const searches = TestStubs.Searches();
+
+    Client.addMockResponse({
+      url: '/organizations/org-1/searches/',
+      body: [
+        {...searches[0], isOrgCustom: true, isGlobal: false, isPinned: true},
+        searches[1],
+      ],
+    });
+    fetchSavedSearches(api, 'org-1');
+    await tick();
+
+    unpinSearch(api, 'org-1', 0, searches[0]);
+    await tick();
+
+    expect(SavedSearchesStore.get().savedSearches).toHaveLength(2);
+
+    expect(SavedSearchesStore.get().savedSearches[0]).toEqual(
+      expect.objectContaining({
+        id: '2',
+        isPinned: false,
+        type: 0,
+        name: 'Needs Triage',
+        query: 'is:unresolved is:unassigned',
+      })
+    );
+
+    expect(SavedSearchesStore.get().savedSearches[1]).toEqual(
+      expect.objectContaining({
+        id: '1',
+        isPinned: false,
+        type: 0,
+        name: 'Unresolved Issues',
+        query: 'is:unresolved',
+      })
+    );
+  });
 });
diff --git a/tests/js/spec/views/__snapshots__/projectSavedSearches.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectSavedSearches.spec.jsx.snap
index 837a88befb..3956f55d29 100644
--- a/tests/js/spec/views/__snapshots__/projectSavedSearches.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectSavedSearches.spec.jsx.snap
@@ -233,10 +233,14 @@ exports[`ProjectSavedSearches renders 1`] = `
                           "dateCreated": "2017-11-14T02:22:58.026Z",
                           "id": "2",
                           "isDefault": true,
+                          "isGlobal": true,
+                          "isOrgCustom": false,
+                          "isPinned": false,
                           "isPrivate": false,
                           "isUserDefault": false,
                           "name": "Needs Triage",
                           "query": "is:unresolved is:unassigned",
+                          "type": 0,
                         }
                       }
                       key="2"
@@ -544,13 +548,17 @@ exports[`ProjectSavedSearches renders 1`] = `
                       canModify={true}
                       data={
                         Object {
-                          "dateCreated": "2017-11-14T02:22:58.022Z",
+                          "dateCreated": "2017-11-14T02:22:58.026Z",
                           "id": "1",
                           "isDefault": false,
+                          "isGlobal": false,
+                          "isOrgCustom": false,
+                          "isPinned": false,
                           "isPrivate": false,
                           "isUserDefault": true,
                           "name": "Unresolved Issues",
                           "query": "is:unresolved",
+                          "type": 0,
                         }
                       }
                       key="1"
diff --git a/tests/js/spec/views/projectSavedSearches.spec.jsx b/tests/js/spec/views/projectSavedSearches.spec.jsx
index dc596cac0c..9d414d257f 100644
--- a/tests/js/spec/views/projectSavedSearches.spec.jsx
+++ b/tests/js/spec/views/projectSavedSearches.spec.jsx
@@ -10,12 +10,20 @@ describe('ProjectSavedSearches', function() {
   const project = routerContext.context.project;
 
   beforeEach(function() {
+    const searches = TestStubs.Searches();
+    searches[1] = {
+      ...searches[1],
+      isDefault: false,
+      isGlobal: false,
+      isUserDefault: true,
+    };
+
     MockApiClient.mockAsync = false;
     MockApiClient.clearMockResponses();
     MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/${project.slug}/searches/`,
       method: 'GET',
-      body: TestStubs.Searches(),
+      body: searches,
     });
 
     wrapper = mount(
