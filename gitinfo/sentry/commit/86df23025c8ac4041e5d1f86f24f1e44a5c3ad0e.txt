commit 86df23025c8ac4041e5d1f86f24f1e44a5c3ad0e
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Mon Oct 15 09:40:33 2018 -0700

    ref(integrations): Abstract retrieving repository choices for issue linking/creation forms. (#10073)
    
    * Created a skeleton and altered github.
    
    * fixed both link and create.
    
    * Added integration error when no repos are found
    
    * Fixed the test here.

diff --git a/src/sentry/integrations/github/issues.py b/src/sentry/integrations/github/issues.py
index 55f7814d2e..c6f2451306 100644
--- a/src/sentry/integrations/github/issues.py
+++ b/src/sentry/integrations/github/issues.py
@@ -42,26 +42,12 @@ class GitHubIssueBasic(IssueBasicMixin):
     def get_persisted_default_config_fields(self):
         return ['repo']
 
+    def create_default_repo_choice(self, default_repo):
+        return (default_repo, default_repo.split('/')[1])
+
     def get_create_issue_config(self, group, **kwargs):
         fields = super(GitHubIssueBasic, self).get_create_issue_config(group, **kwargs)
-        defaults = self.get_project_defaults(group.project_id)
-        try:
-            repos = self.get_repositories()
-        except ApiError:
-            repo_choices = [(' ', ' ')]
-        else:
-            repo_choices = [(repo['identifier'], repo['name']) for repo in repos]
-
-        params = kwargs.get('params', {})
-        default_repo = params.get('repo', defaults.get('repo') or repo_choices[0][0])
-
-        # If a repo has been selected outside of the default 100-limit list of
-        # repos, stick it onto the front of the list so that it can be
-        # selected.
-        try:
-            next(True for r in repo_choices if r[0] == default_repo)
-        except StopIteration:
-            repo_choices.insert(0, (default_repo, default_repo.split('/')[1]))
+        default_repo, repo_choices = self.get_repository_choices(group, **kwargs)
 
         assignees = self.get_allowed_assignees(default_repo)
 
@@ -120,24 +106,7 @@ class GitHubIssueBasic(IssueBasicMixin):
         }
 
     def get_link_issue_config(self, group, **kwargs):
-        try:
-            repos = self.get_repositories()
-        except ApiError:
-            repo_choices = [(' ', ' ')]
-        else:
-            repo_choices = [(repo['identifier'], repo['name']) for repo in repos]
-
-        params = kwargs.get('params', {})
-        defaults = self.get_project_defaults(group.project_id)
-        default_repo = params.get('repo', defaults.get('repo') or repo_choices[0][0])
-
-        # If a repo has been selected outside of the default 100-limit list of
-        # repos, stick it onto the front of the list so that it can be
-        # selected.
-        try:
-            next(True for r in repo_choices if r[0] == default_repo)
-        except StopIteration:
-            repo_choices.insert(0, (default_repo, default_repo.split('/')[1]))
+        default_repo, repo_choices = self.get_repository_choices(group, **kwargs)
 
         org = group.organization
         autocomplete_url = reverse(
diff --git a/src/sentry/integrations/issues.py b/src/sentry/integrations/issues.py
index bec112993a..22ac3c49d8 100644
--- a/src/sentry/integrations/issues.py
+++ b/src/sentry/integrations/issues.py
@@ -4,6 +4,7 @@ import logging
 import six
 
 from sentry import features
+from sentry.integrations.exceptions import ApiError, IntegrationError
 from sentry.models import Activity, Event, Group, GroupStatus, Organization
 from sentry.utils.http import absolute_uri
 from sentry.utils.safe import safe_execute
@@ -194,6 +195,40 @@ class IssueBasicMixin(object):
         """
         return ''
 
+    def get_repository_choices(self, group, **kwargs):
+        """
+        Returns the default repository and a set/subset of repositories of asscoaited with the installation
+        """
+        try:
+            repos = self.get_repositories()
+        except ApiError:
+            raise IntegrationError(
+                'Unable to retrive repositories. Please try again later.'
+            )
+        else:
+            repo_choices = [(repo['identifier'], repo['name']) for repo in repos]
+
+        params = kwargs.get('params', {})
+        defaults = self.get_project_defaults(group.project_id)
+        default_repo = params.get('repo', defaults.get('repo') or repo_choices[0][0])
+
+        # If a repo has been selected outside of the default list of
+        # repos, stick it onto the front of the list so that it can be
+        # selected.
+        try:
+            next(True for r in repo_choices if r[0] == default_repo)
+        except StopIteration:
+            repo_choices.insert(0, self.create_default_repo_choice(default_repo))
+
+        return default_repo, repo_choices
+
+    def create_default_repo_choice(self, default_repo):
+        """
+        Helper method for get_repository_choices
+        Returns the choice for the default repo in a tuple to be added to the list of repository choices
+        """
+        return (default_repo, default_repo)
+
 
 class IssueSyncMixin(IssueBasicMixin):
     comment_key = None
diff --git a/tests/sentry/integrations/github/test_issues.py b/tests/sentry/integrations/github/test_issues.py
index 10281ee9c8..59c12ff993 100644
--- a/tests/sentry/integrations/github/test_issues.py
+++ b/tests/sentry/integrations/github/test_issues.py
@@ -229,7 +229,7 @@ class GitHubIssueBasicTest(TestCase):
         assert payload == {'body': 'hello'}
 
     @responses.activate
-    @patch('sentry.integrations.github.client.get_jwt', return_value='jwt_token_1')
+    @patch('sentry.integrations.github.client.GitHubClientMixin.get_token', return_value='jwt_token_1')
     def test_default_repo_link_fields(self, mock_get_jwt):
         responses.add(
             responses.GET,
