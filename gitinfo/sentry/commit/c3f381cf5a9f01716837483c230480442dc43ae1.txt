commit c3f381cf5a9f01716837483c230480442dc43ae1
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jan 3 00:13:03 2012 -0800

    Refactor filters to use InstanceManager

diff --git a/sentry/filters.py b/sentry/filters.py
deleted file mode 100644
index 381633f46e..0000000000
--- a/sentry/filters.py
+++ /dev/null
@@ -1,219 +0,0 @@
-"""
-sentry.filters
-~~~~~~~~~~~~~~
-
-:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-# Widget api is pretty ugly
-from __future__ import absolute_import
-
-from django.conf import settings as django_settings
-from django.utils.datastructures import SortedDict
-from django.utils.safestring import mark_safe
-from django.utils.html import escape
-
-from sentry.conf import settings
-from sentry.models import Group, Event, FilterValue, MessageIndex
-
-
-class Widget(object):
-    def __init__(self, filter, request):
-        self.filter = filter
-        self.request = request
-
-    def get_query_string(self):
-        return self.filter.get_query_string()
-
-
-class TextWidget(Widget):
-    def render(self, value, placeholder='', **kwargs):
-        return mark_safe('<div class="filter-text"><p class="textfield"><input type="text" name="%(name)s" value="%(value)s" placeholder="%(placeholder)s"/></p><p class="submit"><input type="submit" class="search-submit"/></p></div>' % dict(
-            name=self.filter.get_query_param(),
-            value=escape(value),
-            placeholder=escape(placeholder or 'enter %s' % self.filter.label.lower()),
-        ))
-
-
-class ChoiceWidget(Widget):
-    allow_any = True
-
-    def render(self, value, **kwargs):
-        choices = self.filter.get_choices()
-        query_string = self.get_query_string()
-        column = self.filter.get_query_param()
-
-        output = ['<ul class="%s-list filter-list" rel="%s">' % (self.filter.column, column)]
-        if self.allow_any:
-            output.append('<li%(active)s><a href="%(query_string)s&amp;%(column)s=">Any %(label)s</a></li>' % dict(
-                active=not value and ' class="active"' or '',
-                query_string=query_string,
-                label=self.filter.label,
-                column=column,
-            ))
-        for key, val in choices.iteritems():
-            key = unicode(key)
-            output.append('<li%(active)s rel="%(key)s"><a href="%(query_string)s&amp;%(column)s=%(key)s">%(value)s</a></li>' % dict(
-                active=value == key and ' class="active"' or '',
-                column=column,
-                key=key,
-                value=val,
-                query_string=query_string,
-            ))
-        output.append('</ul>')
-        return mark_safe('\n'.join(output))
-
-
-class SentryFilter(object):
-    label = ''
-    column = ''
-    widget = ChoiceWidget
-    # This must be a string
-    default = ''
-    show_label = True
-    types = [Group, Event]
-
-    def __init__(self, request):
-        self.request = request
-
-    def is_set(self):
-        return bool(self.get_value())
-
-    def get_value(self):
-        return self.request.GET.get(self.get_query_param(), self.default) or ''
-
-    def get_query_param(self):
-        return getattr(self, 'query_param', self.column)
-
-    def get_widget(self):
-        return self.widget(self, self.request)
-
-    def get_query_string(self):
-        column = self.column
-        query_dict = self.request.GET.copy()
-        if 'p' in query_dict:
-            del query_dict['p']
-        if column in query_dict:
-            del query_dict[self.column]
-        return '?' + query_dict.urlencode()
-
-    def get_choices(self):
-        return SortedDict((l, l) for l in FilterValue.objects.filter(key=self.column)\
-                                                     .values_list('value', flat=True)\
-                                                     .order_by('value'))
-
-    def get_query_set(self, queryset):
-        kwargs = {self.column: self.get_value()}
-        if self.column.startswith('data__'):
-            return MessageIndex.objects.get_for_queryset(queryset, **kwargs)
-        return queryset.filter(**kwargs)
-
-    def process(self, data):
-        """``self.request`` is not available within this method"""
-        return data
-
-    def render(self):
-        widget = self.get_widget()
-        return widget.render(self.get_value())
-
-
-class EventFilter(SentryFilter):
-    types = [Event]
-
-
-class GroupFilter(SentryFilter):
-    types = [Group]
-
-
-class StatusFilter(GroupFilter):
-    label = 'Status'
-    column = 'status'
-    default = '0'
-
-    def get_choices(self):
-        return SortedDict([
-            (0, 'Unresolved'),
-            (1, 'Resolved'),
-        ])
-
-
-class LoggerFilter(SentryFilter):
-    label = 'Logger'
-    column = 'logger'
-
-
-class ServerNameFilter(SentryFilter):
-    label = 'Server Name'
-    column = 'server_name'
-
-    def get_query_set(self, queryset):
-        if queryset.model == Event:
-            return queryset.filter(server_name=self.get_value()).distinct()
-        else:
-            return queryset.filter(event_set__server_name=self.get_value()).distinct()
-
-
-class SiteFilter(SentryFilter):
-    label = 'Site'
-    column = 'site'
-
-    def process(self, data):
-        if 'site' in data:
-            return data
-        if settings.SITE is None:
-            if 'django.contrib.sites' in django_settings.INSTALLED_APPS:
-                from django.contrib.sites.models import Site
-                try:
-                    settings.SITE = Site.objects.get_current().name
-                except Site.DoesNotExist:
-                    settings.SITE = ''
-            else:
-                settings.SITE = ''
-        if settings.SITE:
-            data['site'] = settings.SITE
-        return data
-
-    def get_query_set(self, queryset):
-        if queryset.model == Event:
-            return queryset.filter(site=self.get_value()).distinct()
-        else:
-            return queryset.filter(event_set__site=self.get_value()).distinct()
-
-
-class LevelFilter(SentryFilter):
-    label = 'Level'
-    column = 'level'
-
-    def get_choices(self):
-        return SortedDict((str(k), v) for k, v in settings.LOG_LEVELS)
-
-    def get_query_set(self, queryset):
-        return queryset.filter(level=self.get_value())
-
-
-class SiteFilter(SentryFilter):
-    label = 'Site'
-    column = 'site'
-
-    def process(self, data):
-        if 'site' in data:
-            return data
-        if settings.SITE is None:
-            if 'django.contrib.sites' in django_settings.INSTALLED_APPS:
-                from django.contrib.sites.models import Site
-                try:
-                    settings.SITE = Site.objects.get_current().name
-                except Site.DoesNotExist:
-                    settings.SITE = ''
-            else:
-                settings.SITE = ''
-        if settings.SITE:
-            data['site'] = settings.SITE
-        return data
-
-    def get_query_set(self, queryset):
-        if queryset.model == Event:
-            return queryset.filter(site=self.get_value()).distinct()
-        else:
-            return queryset.filter(event_set__site=self.get_value()).distinct()
diff --git a/sentry/filters/__init__.py b/sentry/filters/__init__.py
new file mode 100644
index 0000000000..6b326fb345
--- /dev/null
+++ b/sentry/filters/__init__.py
@@ -0,0 +1,14 @@
+"""
+sentry.filters
+~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from .base import *
+from .builtins import *
+from .widgets import *
+
+# Backwards compatibility
+SentryFilter = Filter
diff --git a/sentry/filters/base.py b/sentry/filters/base.py
new file mode 100644
index 0000000000..3f9c95a234
--- /dev/null
+++ b/sentry/filters/base.py
@@ -0,0 +1,90 @@
+"""
+sentry.filters.base
+~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+# Widget api is pretty ugly
+from __future__ import absolute_import
+
+__all__ = ('Filter', 'GroupFilter', 'EventFilter')
+
+from django.utils.datastructures import SortedDict
+
+from sentry.conf import settings
+from sentry.models import Group, Event, FilterValue, MessageIndex
+from sentry.utils import InstanceManager
+from .widgets import ChoiceWidget
+
+
+class FilterInstanceManager(InstanceManager):
+    def filter(self, model):
+        for inst in self.all():
+            if model not in inst.types:
+                continue
+            yield inst
+
+
+class Filter(object):
+    label = ''
+    column = ''
+    widget = ChoiceWidget
+    # This must be a string
+    default = ''
+    show_label = True
+    types = [Group, Event]
+
+    def __init__(self, request):
+        self.request = request
+
+    def is_set(self):
+        return bool(self.get_value())
+
+    def get_value(self):
+        return self.request.GET.get(self.get_query_param(), self.default) or ''
+
+    def get_query_param(self):
+        return getattr(self, 'query_param', self.column)
+
+    def get_widget(self):
+        return self.widget(self, self.request)
+
+    def get_query_string(self):
+        column = self.column
+        query_dict = self.request.GET.copy()
+        if 'p' in query_dict:
+            del query_dict['p']
+        if column in query_dict:
+            del query_dict[self.column]
+        return '?' + query_dict.urlencode()
+
+    def get_choices(self):
+        return SortedDict((l, l) for l in FilterValue.objects.filter(key=self.column)\
+                                                     .values_list('value', flat=True)\
+                                                     .order_by('value'))
+
+    def get_query_set(self, queryset):
+        kwargs = {self.column: self.get_value()}
+        if self.column.startswith('data__'):
+            return MessageIndex.objects.get_for_queryset(queryset, **kwargs)
+        return queryset.filter(**kwargs)
+
+    def process(self, data):
+        """``self.request`` is not available within this method"""
+        return data
+
+    def render(self):
+        widget = self.get_widget()
+        return widget.render(self.get_value())
+
+    objects = FilterInstanceManager(settings.FILTERS, instances=False)
+
+
+class EventFilter(Filter):
+    types = [Event]
+
+
+class GroupFilter(Filter):
+    types = [Group]
diff --git a/sentry/filters/builtins.py b/sentry/filters/builtins.py
new file mode 100644
index 0000000000..427bb928fc
--- /dev/null
+++ b/sentry/filters/builtins.py
@@ -0,0 +1,81 @@
+"""
+sentry.filters.base
+~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django.conf import settings as django_settings
+from django.utils.datastructures import SortedDict
+from sentry.conf import settings
+from sentry.models import Event
+from .base import Filter, GroupFilter
+
+__all__ = ('StatusFilter', 'LoggerFilter', 'ServerNameFilter', 'SiteFilter',
+           'LevelFilter')
+
+
+class StatusFilter(GroupFilter):
+    label = 'Status'
+    column = 'status'
+    default = '0'
+
+    def get_choices(self):
+        return SortedDict([
+            (0, 'Unresolved'),
+            (1, 'Resolved'),
+        ])
+
+
+class LoggerFilter(Filter):
+    label = 'Logger'
+    column = 'logger'
+
+
+class ServerNameFilter(Filter):
+    label = 'Server Name'
+    column = 'server_name'
+
+    def get_query_set(self, queryset):
+        if queryset.model == Event:
+            return queryset.filter(server_name=self.get_value()).distinct()
+        else:
+            return queryset.filter(event_set__server_name=self.get_value()).distinct()
+
+
+class LevelFilter(Filter):
+    label = 'Level'
+    column = 'level'
+
+    def get_choices(self):
+        return SortedDict((str(k), v) for k, v in settings.LOG_LEVELS)
+
+    def get_query_set(self, queryset):
+        return queryset.filter(level=self.get_value())
+
+
+class SiteFilter(Filter):
+    label = 'Site'
+    column = 'site'
+
+    def process(self, data):
+        if 'site' in data:
+            return data
+        if settings.SITE is None:
+            if 'django.contrib.sites' in django_settings.INSTALLED_APPS:
+                from django.contrib.sites.models import Site
+                try:
+                    settings.SITE = Site.objects.get_current().name
+                except Site.DoesNotExist:
+                    settings.SITE = ''
+            else:
+                settings.SITE = ''
+        if settings.SITE:
+            data['site'] = settings.SITE
+        return data
+
+    def get_query_set(self, queryset):
+        if queryset.model == Event:
+            return queryset.filter(site=self.get_value()).distinct()
+        else:
+            return queryset.filter(event_set__site=self.get_value()).distinct()
diff --git a/sentry/filters/widgets.py b/sentry/filters/widgets.py
new file mode 100644
index 0000000000..df835dfdd7
--- /dev/null
+++ b/sentry/filters/widgets.py
@@ -0,0 +1,60 @@
+"""
+sentry.filters.base
+~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+__all__ = ('Widget', 'TextWidget', 'ChoiceWidget')
+
+from django.utils.safestring import mark_safe
+from django.utils.html import escape
+
+
+class Widget(object):
+    def __init__(self, filter, request):
+        self.filter = filter
+        self.request = request
+
+    def get_query_string(self):
+        return self.filter.get_query_string()
+
+
+class TextWidget(Widget):
+    def render(self, value, placeholder='', **kwargs):
+        return mark_safe('<div class="filter-text"><p class="textfield"><input type="text" name="%(name)s" value="%(value)s" placeholder="%(placeholder)s"/></p><p class="submit"><input type="submit" class="search-submit"/></p></div>' % dict(
+            name=self.filter.get_query_param(),
+            value=escape(value),
+            placeholder=escape(placeholder or 'enter %s' % self.filter.label.lower()),
+        ))
+
+
+class ChoiceWidget(Widget):
+    allow_any = True
+
+    def render(self, value, **kwargs):
+        choices = self.filter.get_choices()
+        query_string = self.get_query_string()
+        column = self.filter.get_query_param()
+
+        output = ['<ul class="%s-list filter-list" rel="%s">' % (self.filter.column, column)]
+        if self.allow_any:
+            output.append('<li%(active)s><a href="%(query_string)s&amp;%(column)s=">Any %(label)s</a></li>' % dict(
+                active=not value and ' class="active"' or '',
+                query_string=query_string,
+                label=self.filter.label,
+                column=column,
+            ))
+        for key, val in choices.iteritems():
+            key = unicode(key)
+            output.append('<li%(active)s rel="%(key)s"><a href="%(query_string)s&amp;%(column)s=%(key)s">%(value)s</a></li>' % dict(
+                active=value == key and ' class="active"' or '',
+                column=column,
+                key=key,
+                value=val,
+                query_string=query_string,
+            ))
+        output.append('</ul>')
+        return mark_safe('\n'.join(output))
diff --git a/sentry/models.py b/sentry/models.py
index e003eebd2a..59a5d1f246 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -412,24 +412,22 @@ class MessageCountByMinute(Model):
 
 ### django-indexer
 
+
 class MessageIndex(BaseIndex):
     model = Event
 
 ### Helper methods
 
-# This comes later due to recursive imports
-from sentry.utils import get_filters
-
 
 def register_indexes():
     """
     Grabs all required indexes from filters and registers them.
     """
+    from sentry.filters import Filter
     logger = logging.getLogger('sentry.setup')
-    for filter_ in get_filters():
-        if filter_.column.startswith('data__'):
-            MessageIndex.objects.register_index(filter_.column, index_to='group')
-            logger.debug('Registered index for for %s' % filter_.column)
+    for cls in (f for f in Filter.objects.all() if f.column.startswith('data__')):
+        MessageIndex.objects.register_index(cls.column, index_to='group')
+        logger.debug('Registered index for for %r' % cls.column)
 register_indexes()
 
 
diff --git a/sentry/utils/__init__.py b/sentry/utils/__init__.py
index c875e28470..e950f713b5 100644
--- a/sentry/utils/__init__.py
+++ b/sentry/utils/__init__.py
@@ -18,7 +18,8 @@ from sentry.conf import settings
 
 
 class InstanceManager(object):
-    def __init__(self, class_list):
+    def __init__(self, class_list, instances=True):
+        self.instances = instances
         self.update(class_list)
 
     def update(self, class_list):
@@ -44,43 +45,18 @@ class InstanceManager(object):
             try:
                 module = __import__(module_name, {}, {}, class_name)
                 cls = getattr(module, class_name)
-                instance = cls()
+                if self.instances:
+                    results.append(cls())
+                else:
+                    results.append(cls)
             except Exception:
                 logger = logging.getLogger('sentry.errors')
                 logger.exception('Unable to import %s' % (cls_path,))
                 continue
-            results.append(instance)
         self.cache = results
 
         return results
 
-_FILTER_CACHE = None
-
-
-def get_filters(model=None):
-    global _FILTER_CACHE
-
-    if _FILTER_CACHE is None:
-        filters = []
-        for filter_ in settings.FILTERS:
-            if filter_.endswith('sentry.filters.SearchFilter'):
-                continue
-            module_name, class_name = filter_.rsplit('.', 1)
-            try:
-                module = __import__(module_name, {}, {}, class_name)
-                filter_ = getattr(module, class_name)
-            except Exception:
-                logger = logging.getLogger('sentry.errors')
-                logger.exception('Unable to import %s' % (filter_,))
-                continue
-            filters.append(filter_)
-        _FILTER_CACHE = filters
-
-    for f in _FILTER_CACHE:
-        if model and model not in f.types:
-            continue
-        yield f
-
 
 def get_db_engine(alias='default'):
     has_multidb = django.VERSION >= (1, 2)
diff --git a/sentry/web/frontend/events.py b/sentry/web/frontend/events.py
index 05154cd1b8..713035d7c7 100644
--- a/sentry/web/frontend/events.py
+++ b/sentry/web/frontend/events.py
@@ -6,18 +6,18 @@ from django.views.decorators.csrf import csrf_protect
 
 from sentry.conf import settings
 from sentry.models import Event
+from sentry.filters import Filter
+from sentry.replays import Replayer
 from sentry.web.decorators import login_required, has_access, render_to_response
 from sentry.web.forms import ReplayForm
-from sentry.utils import get_filters
-from sentry.replays import Replayer
 
 
 @login_required
 @has_access
 def event_list(request, project):
     filters = []
-    for filter_ in get_filters(Event):
-        filters.append(filter_(request))
+    for cls in Filter.objects.filter(Event):
+        filters.append(cls(request))
 
     try:
         page = int(request.GET.get('p', 1))
diff --git a/sentry/web/frontend/groups.py b/sentry/web/frontend/groups.py
index e8d1ca1e66..c0637afd3b 100644
--- a/sentry/web/frontend/groups.py
+++ b/sentry/web/frontend/groups.py
@@ -20,9 +20,10 @@ from django.utils.safestring import mark_safe
 from django.views.decorators.csrf import csrf_exempt
 
 from sentry.conf import settings
+from sentry.filters import Filter
 from sentry.models import Group, Event, Project
 from sentry.plugins import GroupActionProvider
-from sentry.utils import get_filters, json
+from sentry.utils import json
 from sentry.web.decorators import has_access, login_required
 from sentry.web.helpers import render_to_response, \
     get_project_list
@@ -43,8 +44,8 @@ def ajax_handler(request, project):
 
     def poll(request, project):
         filters = []
-        for filter_ in get_filters():
-            filters.append(filter_(request))
+        for cls in Filter.objects.filter(Group):
+            filters.append(cls(request))
 
         offset = 0
         limit = settings.MESSAGES_PER_PAGE
@@ -222,8 +223,8 @@ def search(request, project):
 @has_access
 def group_list(request, project):
     filters = []
-    for filter_ in get_filters(Group):
-        filters.append(filter_(request))
+    for cls in Filter.objects.filter(Group):
+        filters.append(cls(request))
 
     try:
         page = int(request.GET.get('p', 1))
