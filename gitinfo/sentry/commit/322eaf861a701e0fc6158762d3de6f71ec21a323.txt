commit 322eaf861a701e0fc6158762d3de6f71ec21a323
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Apr 29 10:37:37 2014 -0400

    Improve *Option/Meta models and add test coverage

diff --git a/src/sentry/db/models/manager.py b/src/sentry/db/models/manager.py
index 71e24b544b..d8ae0428ef 100644
--- a/src/sentry/db/models/manager.py
+++ b/src/sentry/db/models/manager.py
@@ -251,6 +251,11 @@ class BaseManager(Manager):
         for node in object_node_list:
             node.bind_data(node_results.get(node.id) or {})
 
+    def uncache_object(self, instance_id):
+        pk_name = self.model._meta.pk.name
+        cache_key = self.__get_lookup_cache_key(**{pk_name: instance_id})
+        cache.delete(cache_key)
+
     def post_save(self, instance, **kwargs):
         """
         Triggered when a model bound to this manager is saved.
diff --git a/src/sentry/models/groupmeta.py b/src/sentry/models/groupmeta.py
index 6c97b36b07..dd6359a451 100644
--- a/src/sentry/models/groupmeta.py
+++ b/src/sentry/models/groupmeta.py
@@ -14,17 +14,22 @@ from sentry.db.models.manager import BaseManager
 
 class GroupMetaManager(BaseManager):
     def get_value_bulk(self, instances, key):
-        return dict(self.filter(
+        instance_map = dict((i.id, i) for i in instances)
+        queryset = self.filter(
             group__in=instances,
             key=key,
-        ).values_list('group', 'value'))
+        )
+        result = dict((i, None) for i in instances)
+        for obj in queryset:
+            result[instance_map[obj.group_id]] = obj.value
+        return result
 
     def get_value(self, instance, key, default=None):
         try:
             return self.get(
                 group=instance,
                 key=key,
-            )
+            ).value
         except self.model.DoesNotExist:
             return default
 
@@ -32,15 +37,13 @@ class GroupMetaManager(BaseManager):
         self.filter(group=instance, key=key).delete()
 
     def set_value(self, instance, key, value):
-        inst, created = self.get_or_create(
+        self.create_or_update(
             group=instance,
             key=key,
             defaults={
                 'value': value,
             },
         )
-        if not created and inst.value != value:
-            inst.update(value=value)
 
 
 class GroupMeta(Model):
diff --git a/src/sentry/models/option.py b/src/sentry/models/option.py
index b1d17bd3ff..386307791d 100644
--- a/src/sentry/models/option.py
+++ b/src/sentry/models/option.py
@@ -6,8 +6,6 @@ sentry.models.option
 :license: BSD, see LICENSE for more details.
 """
 
-from celery.signals import task_postrun
-from django.core.signals import request_finished
 from django.db import models
 
 from sentry.db.models import Model, sane_repr
@@ -16,51 +14,24 @@ from sentry.db.models.manager import BaseManager
 
 
 class OptionManager(BaseManager):
-    NOTSET = object()
-
-    def __init__(self, *args, **kwargs):
-        super(OptionManager, self).__init__(*args, **kwargs)
-        task_postrun.connect(self.clear_local_cache)
-        request_finished.connect(self.clear_local_cache)
-        self.__cache = {}
-
-    def __getstate__(self):
-        d = self.__dict__.copy()
-        # we cant serialize weakrefs
-        d.pop('_OptionManager__cache', None)
-        return d
-
-    def __setstate__(self, state):
-        self.__dict__.update(state)
-        self.__cache = {}
-
     def get_value(self, key, default=None):
-        result = self.get_all_values()
-        return result.get(key, default)
+        try:
+            return self.get_from_cache(key=key).value
+        except self.model.DoesNotExist:
+            return default
 
     def unset_value(self, key):
         self.filter(key=key).delete()
-        self.__cache.pop(key, None)
 
     def set_value(self, key, value):
-        inst, _ = self.get_or_create(
+        instance, created = self.get_or_create(
             key=key,
             defaults={
                 'value': value,
             }
         )
-        if inst.value != value:
-            inst.update(value=value)
-
-        self.__cache[key] = value
-
-    def get_all_values(self):
-        if not hasattr(self, '_OptionManager__cache'):
-            self.__cache = dict(self.values_list('key', 'value'))
-        return self.__cache
-
-    def clear_local_cache(self, **kwargs):
-        self.__cache = {}
+        if not created and value != instance.value:
+            instance.update(value=value)
 
 
 class Option(Model):
diff --git a/src/sentry/models/projectoption.py b/src/sentry/models/projectoption.py
index a01db67a08..e55af8ef6b 100644
--- a/src/sentry/models/projectoption.py
+++ b/src/sentry/models/projectoption.py
@@ -37,10 +37,15 @@ class ProjectOptionManager(BaseManager):
         return '%s:%s' % (self.model._meta.db_table, instance_id)
 
     def get_value_bulk(self, instances, key):
-        return dict(self.filter(
+        instance_map = dict((i.id, i) for i in instances)
+        queryset = self.filter(
             project__in=instances,
             key=key,
-        ).values_list('project', 'value'))
+        )
+        result = dict((i, None) for i in instances)
+        for obj in queryset:
+            result[instance_map[obj.project_id]] = obj.value
+        return result
 
     def get_value(self, project, key, default=None):
         result = self.get_all_values(project)
diff --git a/src/sentry/plugins/bases/issue.py b/src/sentry/plugins/bases/issue.py
index cce7608359..f032297dfa 100644
--- a/src/sentry/plugins/bases/issue.py
+++ b/src/sentry/plugins/bases/issue.py
@@ -218,7 +218,7 @@ class IssuePlugin(Plugin):
         if not self.is_configured(request=request, project=group.project):
             return tag_list
 
-        issue_id = self._cache.get(group.pk)
+        issue_id = self._cache.get(group)
         if not issue_id:
             return tag_list
 
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 12706d49ba..d750e02e60 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -30,7 +30,7 @@ from django_sudo.settings import COOKIE_NAME as SUDO_COOKIE_NAME
 from django_sudo.utils import grant_sudo_privileges
 
 from sentry.constants import MODULE_ROOT
-from sentry.models import Option, ProjectOption
+from sentry.models import ProjectOption
 from sentry.utils import json
 
 from .fixtures import Fixtures
@@ -92,7 +92,6 @@ class BaseTestCase(Fixtures, Exam):
     def _pre_setup(self):
         cache.clear()
         ProjectOption.objects.clear_local_cache()
-        Option.objects.clear_local_cache()
         super(BaseTestCase, self)._pre_setup()
 
     def _makeMessage(self, data):
diff --git a/tests/sentry/models/test_groupmeta.py b/tests/sentry/models/test_groupmeta.py
new file mode 100644
index 0000000000..b6e536cef4
--- /dev/null
+++ b/tests/sentry/models/test_groupmeta.py
@@ -0,0 +1,39 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.models import GroupMeta
+from sentry.testutils import TestCase
+
+
+class GroupMetaManagerTest(TestCase):
+    def test_set_value(self):
+        GroupMeta.objects.set_value(self.group, 'foo', 'bar')
+        assert GroupMeta.objects.filter(
+            group=self.group, key='foo', value='bar').exists()
+
+    def test_get_value(self):
+        result = GroupMeta.objects.get_value(self.group, 'foo')
+        assert result is None
+
+        GroupMeta.objects.create(
+            group=self.group, key='foo', value='bar')
+        result = GroupMeta.objects.get_value(self.group, 'foo')
+        assert result == 'bar'
+
+    def test_unset_value(self):
+        GroupMeta.objects.unset_value(self.group, 'foo')
+        GroupMeta.objects.create(
+            group=self.group, key='foo', value='bar')
+        GroupMeta.objects.unset_value(self.group, 'foo')
+        assert not GroupMeta.objects.filter(
+            group=self.group, key='foo').exists()
+
+    def test_get_value_bulk(self):
+        result = GroupMeta.objects.get_value_bulk([self.group], 'foo')
+        assert result == {self.group: None}
+
+        GroupMeta.objects.create(
+            group=self.group, key='foo', value='bar')
+        result = GroupMeta.objects.get_value_bulk([self.group], 'foo')
+        assert result == {self.group: 'bar'}
diff --git a/tests/sentry/models/test_option.py b/tests/sentry/models/test_option.py
new file mode 100644
index 0000000000..71304272c8
--- /dev/null
+++ b/tests/sentry/models/test_option.py
@@ -0,0 +1,26 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.models import Option
+from sentry.testutils import TestCase
+
+
+class OptionManagerTest(TestCase):
+    def test_set_value(self):
+        Option.objects.set_value('foo', 'bar')
+        assert Option.objects.filter(key='foo', value='bar').exists()
+
+    def test_get_value(self):
+        result = Option.objects.get_value('foo')
+        assert result is None
+
+        Option.objects.create(key='foo', value='bar')
+        result = Option.objects.get_value('foo')
+        assert result == 'bar'
+
+    def test_unset_value(self):
+        Option.objects.unset_value('foo')
+        Option.objects.create(key='foo', value='bar')
+        Option.objects.unset_value('foo')
+        assert not Option.objects.filter(key='foo').exists()
diff --git a/tests/sentry/models/test_projectoption.py b/tests/sentry/models/test_projectoption.py
new file mode 100644
index 0000000000..b6bb80355c
--- /dev/null
+++ b/tests/sentry/models/test_projectoption.py
@@ -0,0 +1,39 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.models import ProjectOption
+from sentry.testutils import TestCase
+
+
+class ProjectOptionManagerTest(TestCase):
+    def test_set_value(self):
+        ProjectOption.objects.set_value(self.project, 'foo', 'bar')
+        assert ProjectOption.objects.filter(
+            project=self.project, key='foo', value='bar').exists()
+
+    def test_get_value(self):
+        result = ProjectOption.objects.get_value(self.project, 'foo')
+        assert result is None
+
+        ProjectOption.objects.create(
+            project=self.project, key='foo', value='bar')
+        result = ProjectOption.objects.get_value(self.project, 'foo')
+        assert result == 'bar'
+
+    def test_unset_value(self):
+        ProjectOption.objects.unset_value(self.project, 'foo')
+        ProjectOption.objects.create(
+            project=self.project, key='foo', value='bar')
+        ProjectOption.objects.unset_value(self.project, 'foo')
+        assert not ProjectOption.objects.filter(
+            project=self.project, key='foo').exists()
+
+    def test_get_value_bulk(self):
+        result = ProjectOption.objects.get_value_bulk([self.project], 'foo')
+        assert result == {self.project: None}
+
+        ProjectOption.objects.create(
+            project=self.project, key='foo', value='bar')
+        result = ProjectOption.objects.get_value_bulk([self.project], 'foo')
+        assert result == {self.project: 'bar'}
