commit de21a003da16cbd48d4c1a83d35aa5d8d13d14ef
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Mon May 21 11:17:12 2018 -0700

    feat(integrations): Bitbucket Authentication (#8382)
    
    * Added a bunch of stuff for bitbucket. will follow up and narrow things down.
    
    * Put Bitbucket on the screen.
    
    * Added descriptor endpoint.
    
    * Got to the part where we connect successfully with bitbucket but it goes nowhere after that.
    
    * Moved the jwt stuff to a common place for now. Added meta information for bitbucket.
    
    * saving place
    
    * Rebased off master
    
    * Added jira stuff back where it was for now.
    
    * removed installed endpoint
    
    * Minor changes to make things cleaner
    
    * Added a test for the descriptor.
    
    * Changed bitbucket to have the correct case, got the integration working with a redirect problem (not sure why it isn't showing up thoughCombined use of Endpoint functionalitybetween jira and bitbucket.
    
    * added success thing.
    
    * Paired down to working parts.
    
    * Removed changes that weren't necessary.
    
    * Added tests to installed endpoint.
    
    * Changed bitbucket so that it uses the user account instead for the information to be displayed.
    
    * Changed base URL to the api url.
    
    * readded comment to build_integration
    
    * Removed template and redirected instead. Made uuid user's external id.
    
    * Took care of one style nit.
    
    * Added expect_exists.
    
    * Removed user_identity

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 88257e1544..ad4aa61756 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1239,6 +1239,7 @@ SENTRY_ONPREMISE = True
 SENTRY_USE_X_FORWARDED_FOR = True
 
 SENTRY_DEFAULT_INTEGRATIONS = (
+    'sentry.integrations.bitbucket.BitbucketIntegrationProvider',
     'sentry.integrations.slack.SlackIntegrationProvider',
     'sentry.integrations.github.GitHubIntegrationProvider',
     'sentry.integrations.jira.JiraIntegrationProvider',
@@ -1246,6 +1247,7 @@ SENTRY_DEFAULT_INTEGRATIONS = (
 )
 
 SENTRY_INTERNAL_INTEGRATIONS = (
+    'bitbucket',
     'github',
     'jira',
     'vsts',
diff --git a/src/sentry/identity/__init__.py b/src/sentry/identity/__init__.py
index 23b8b3e414..de89a64e63 100644
--- a/src/sentry/identity/__init__.py
+++ b/src/sentry/identity/__init__.py
@@ -7,6 +7,7 @@ from .oauth2 import *  # NOQA
 from .slack import *  # NOQA
 from .github import *  # NOQA
 from .vsts import *  # NOQA
+from .bitbucket import *  # NOQA
 
 
 default_manager = IdentityManager()
@@ -21,3 +22,4 @@ unregister = default_manager.unregister
 register(SlackIdentityProvider)  # NOQA
 register(GitHubIdentityProvider)  # NOQA
 register(VSTSIdentityProvider)  # NOQA
+register(BitbucketIdentityProvider)  # NOQA
diff --git a/src/sentry/identity/bitbucket/__init__.py b/src/sentry/identity/bitbucket/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/identity/bitbucket/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/identity/bitbucket/provider.py b/src/sentry/identity/bitbucket/provider.py
new file mode 100644
index 0000000000..a95828887a
--- /dev/null
+++ b/src/sentry/identity/bitbucket/provider.py
@@ -0,0 +1,27 @@
+from __future__ import absolute_import
+
+from sentry.pipeline import PipelineView
+from sentry.utils.http import absolute_uri
+from sentry.identity.base import Provider
+
+
+class BitbucketIdentityProvider(Provider):
+    key = 'bitbucket'
+    name = 'Bitbucket'
+
+    def get_pipeline_views(self):
+        return [BitbucketLoginView()]
+
+
+class BitbucketLoginView(PipelineView):
+
+    def dispatch(self, request, pipeline):
+        client_key = request.GET.get('clientKey')
+        if client_key is None:
+            return self.redirect(
+                'https://bitbucket.org/site/addons/authorize?descriptor_uri=%s&redirect_uri=%s' % (
+                    absolute_uri('/extensions/bitbucket/descriptor/'),
+                    absolute_uri('/extensions/bitbucket/setup/'),
+                ))
+        pipeline.bind_state('bitbucket_client_key', client_key)
+        return pipeline.next_step()
diff --git a/src/sentry/integrations/bitbucket/__init__.py b/src/sentry/integrations/bitbucket/__init__.py
new file mode 100644
index 0000000000..ffdddd1622
--- /dev/null
+++ b/src/sentry/integrations/bitbucket/__init__.py
@@ -0,0 +1,4 @@
+from __future__ import absolute_import
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/integrations/bitbucket/descriptor.py b/src/sentry/integrations/bitbucket/descriptor.py
new file mode 100644
index 0000000000..3f02449b99
--- /dev/null
+++ b/src/sentry/integrations/bitbucket/descriptor.py
@@ -0,0 +1,32 @@
+from __future__ import absolute_import
+
+from sentry.api.base import Endpoint
+from sentry.utils.http import absolute_uri
+
+
+class BitbucketDescriptorEndpoint(Endpoint):
+    authentication_classes = ()
+    permission_classes = ()
+
+    def get(self, request):
+        return self.respond(
+            {
+                'key': 'sentry-bitbucket',
+                'name': 'Sentry for Bitbucket',
+                'description': 'A Sentry integration',
+                'vendor': {
+                    'name': 'Sentry.io',
+                    'url': 'https://sentry.io/'
+                },
+                'baseUrl': absolute_uri(),
+                'authentication': {
+                    'type': 'jwt'
+                },
+                'lifecycle': {
+                    'installed': '/extensions/bitbucket/installed/',
+                    'uninstalled': '/extensions/bitbucket/uninstalled/'
+                },
+                'scopes': ['account', 'repository'],
+                'contexts': ['account']
+            }
+        )
diff --git a/src/sentry/integrations/bitbucket/installed.py b/src/sentry/integrations/bitbucket/installed.py
new file mode 100644
index 0000000000..a7c672341f
--- /dev/null
+++ b/src/sentry/integrations/bitbucket/installed.py
@@ -0,0 +1,25 @@
+from __future__ import absolute_import
+
+from django.views.decorators.csrf import csrf_exempt
+
+from sentry.api.base import Endpoint
+from sentry.integrations.pipeline import ensure_integration
+
+
+from .integration import BitbucketIntegrationProvider
+
+
+class BitbucketInstalledEndpoint(Endpoint):
+    authentication_classes = ()
+    permission_classes = ()
+
+    @csrf_exempt
+    def dispatch(self, request, *args, **kwargs):
+        return super(BitbucketInstalledEndpoint, self).dispatch(request, *args, **kwargs)
+
+    def post(self, request, *args, **kwargs):
+        state = request.DATA
+        data = BitbucketIntegrationProvider().build_integration(state)
+        ensure_integration('bitbucket', data)
+
+        return self.respond()
diff --git a/src/sentry/integrations/bitbucket/integration.py b/src/sentry/integrations/bitbucket/integration.py
new file mode 100644
index 0000000000..6a259acf54
--- /dev/null
+++ b/src/sentry/integrations/bitbucket/integration.py
@@ -0,0 +1,59 @@
+from __future__ import absolute_import
+
+from sentry.integrations import IntegrationProvider, IntegrationMetadata
+from sentry.pipeline import NestedPipelineView
+from sentry.identity.pipeline import IdentityProviderPipeline
+from django.utils.translation import ugettext_lazy as _
+from sentry.utils.http import absolute_uri
+
+DESCRIPTION = """
+Bitbucket for Sentry.io
+"""
+metadata = IntegrationMetadata(
+    description=DESCRIPTION.strip(),
+    author='The Sentry Team',
+    noun=_('Bitbucket Account'),
+    issue_url='https://github.com/getsentry/sentry/issues/new?title=Bitbucket%20Integration:%20&labels=Component%3A%20Integrations',
+    source_url='https://github.com/getsentry/sentry/tree/master/src/sentry/integrations/bitbucket',
+    aspects={},
+)
+
+
+class BitbucketIntegrationProvider(IntegrationProvider):
+    key = 'bitbucket'
+    name = 'Bitbucket'
+    metadata = metadata
+
+    def get_pipeline_views(self):
+        identity_pipeline_config = {
+            'redirect_url': absolute_uri('/extensions/bitbucket/setup/'),
+        }
+        identity_pipeline_view = NestedPipelineView(
+            bind_key='identity',
+            provider_key='bitbucket',
+            pipeline_cls=IdentityProviderPipeline,
+            config=identity_pipeline_config,
+        )
+        return [identity_pipeline_view]
+
+    def build_integration(self, state):
+        # TODO(LB): Add verification for clientKey
+        if state.get('publicKey'):
+            principal_data = state['principal']
+            return {
+                'provider': 'bitbucket',
+                'external_id': state['clientKey'],
+                'name': principal_data['username'],
+                'metadata': {
+                    'public_key': state['publicKey'],
+                    'shared_secret': state['sharedSecret'],
+                    'base_url': state['baseApiUrl'],
+                    'domain_name': principal_data['links']['html']['href'].replace('https://', ''),
+                    'icon': principal_data['links']['avatar']['href'],
+                },
+            }
+        return {
+            'provider': 'bitbucket',
+            'external_id': state['identity']['bitbucket_client_key'],
+            'expect_exists': True,
+        }
diff --git a/src/sentry/integrations/bitbucket/urls.py b/src/sentry/integrations/bitbucket/urls.py
new file mode 100644
index 0000000000..a147b7c384
--- /dev/null
+++ b/src/sentry/integrations/bitbucket/urls.py
@@ -0,0 +1,12 @@
+from __future__ import absolute_import
+
+from django.conf.urls import patterns, url
+
+from .descriptor import BitbucketDescriptorEndpoint
+from .installed import BitbucketInstalledEndpoint
+
+urlpatterns = patterns(
+    '',
+    url(r'^descriptor/$', BitbucketDescriptorEndpoint.as_view()),
+    url(r'^installed/$', BitbucketInstalledEndpoint.as_view()),
+)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 86fcd56cee..839269139c 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -525,6 +525,7 @@ urlpatterns += patterns(
     url(r'^extensions/slack/', include('sentry.integrations.slack.urls')),
     url(r'^extensions/github/', include('sentry.integrations.github.urls')),
     url(r'^extensions/vsts/', include('sentry.integrations.vsts.urls')),
+    url(r'^extensions/bitbucket/', include('sentry.integrations.bitbucket.urls')),
 
     url(r'^plugins/', include('sentry.plugins.base.urls')),
 
diff --git a/tests/sentry/integrations/bitbucket/__init__.py b/tests/sentry/integrations/bitbucket/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/integrations/bitbucket/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/integrations/bitbucket/test_descriptor.py b/tests/sentry/integrations/bitbucket/test_descriptor.py
new file mode 100644
index 0000000000..0dd2a9e216
--- /dev/null
+++ b/tests/sentry/integrations/bitbucket/test_descriptor.py
@@ -0,0 +1,19 @@
+from __future__ import absolute_import
+
+from sentry.testutils import APITestCase
+from sentry.integrations.bitbucket.descriptor import BitbucketDescriptorEndpoint
+
+
+class BitbucketDescriptorEndpointTest(APITestCase):
+    def test_default_permissions(self):
+        # Permissions must be empty so that it will be accessible to bitbucket.
+        assert BitbucketDescriptorEndpoint.authentication_classes == ()
+        assert BitbucketDescriptorEndpoint.permission_classes == ()
+
+    def test_response(self):
+        response = self.client.get('/extensions/bitbucket/descriptor/')
+        assert response.status_code == 200
+
+        assert response.data['key'] == 'sentry-bitbucket'
+        assert response.data['authentication']['type'] == 'jwt'
+        assert response.data['baseUrl'] == 'http://testserver'
diff --git a/tests/sentry/integrations/bitbucket/test_installed.py b/tests/sentry/integrations/bitbucket/test_installed.py
new file mode 100644
index 0000000000..442f3f33b3
--- /dev/null
+++ b/tests/sentry/integrations/bitbucket/test_installed.py
@@ -0,0 +1,101 @@
+from __future__ import absolute_import
+
+from sentry.testutils import APITestCase
+from sentry.integrations.bitbucket.installed import BitbucketInstalledEndpoint
+from sentry.models import Integration
+
+
+class BitbucketInstalledEndpointTest(APITestCase):
+    def setUp(self):
+        self.provider = 'bitbucket'
+        self.path = '/extensions/bitbucket/installed/'
+
+        self.username = u'sentryuser'
+        self.client_key = u'connection:123'
+        self.public_key = u'123abcDEFg'
+        self.shared_secret = u'G12332434SDfsjkdfgsd'
+        self.base_url = u'https://api.bitbucket.org'
+        self.domain_name = u'bitbucket.org/sentryuser/'
+        self.display_name = u'Sentry User'
+        self.icon = u'https://bitbucket.org/account/sentryuser/avatar/32/'
+
+        self.metadata = {
+            'public_key': self.public_key,
+            'shared_secret': self.shared_secret,
+            'base_url': self.base_url,
+            'domain_name': self.domain_name,
+            'icon': self.icon
+        }
+        self.user_data = {
+            u'username': self.username,
+            u'display_name': self.display_name,
+            u'account_id': u'123456t256371u',
+            u'links': {
+                u'self': {u'herf': u'https://api.bitbucket.org/2.0/users/sentryuser/'},
+                u'html': {u'href': u'https://bitbucket.org/sentryuser/'},
+                u'avatar': {u'href': u'https://bitbucket.org/account/sentryuser/avatar/32/'},
+            },
+            u'created_on': u'2018-04-18T00:46:37.374621+00:00',
+            u'is_staff': False,
+            u'type': u'user',
+            u'uuid': u'{e123-f456-g78910}'
+        }
+        self.data_from_bitbucket = {
+            u'key': u'sentry-bitbucket',
+            u'eventType': u'installed',
+            u'baseUrl': self.base_url,
+            u'sharedSecret': self.shared_secret,
+            u'publicKey': self.public_key,
+            u'user': self.user_data,
+            u'productType': u'bitbucket',
+            u'baseApiUrl': u'https://api.bitbucket.org',
+            u'clientKey': self.client_key,
+            u'principal': self.user_data,
+        }
+        self.data_without_public_key = {
+            'identity': {
+                'bitbucket_client_id': self.client_key,
+            }
+        }
+
+    def test_default_permissions(self):
+        # Permissions must be empty so that it will be accessible to bitbucket.
+        assert BitbucketInstalledEndpoint.authentication_classes == ()
+        assert BitbucketInstalledEndpoint.permission_classes == ()
+
+    def test_installed_with_public_key(self):
+        response = self.client.post(
+            self.path,
+            data=self.data_from_bitbucket
+        )
+        assert response.status_code == 200
+        integration = Integration.objects.get(
+            provider=self.provider,
+            external_id=self.client_key
+        )
+        assert integration.name == self.username
+        assert integration.metadata == self.metadata
+
+    def test_installed_without_public_key(self):
+        integration = Integration.objects.get_or_create(
+            provider=self.provider,
+            external_id=self.client_key,
+            defaults={
+                'name': self.username,
+                'metadata': self.metadata,
+            }
+        )[0]
+
+        response = self.client.post(
+            self.path,
+            data=self.data_from_bitbucket
+        )
+        assert response.status_code == 200
+
+        # assert no changes have been made to the integration
+        integration_after = Integration.objects.get(
+            provider=self.provider,
+            external_id=self.client_key
+        )
+        assert integration.name == integration_after.name
+        assert integration.metadata == integration_after.metadata
