commit 8fbf565179e562be88596322fe32e8c9774c3fb3
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Mar 2 20:43:37 2015 -0800

    Move majority of internal errors to "sentry" logger

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 628d904829..63f619430e 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -462,9 +462,15 @@ LOGGING = {
         },
         'sentry': {
             'level': 'ERROR',
+            'filters': ['sentry:internal'],
             'class': 'raven.contrib.django.handlers.SentryHandler',
         }
     },
+    'filters': {
+        'sentry:internal': {
+            '()': 'sentry.utils.raven.SentryInternalFilter',
+        },
+    },
     'formatters': {
         'simple': {
             'format': '[%(levelname)s] %(message)s',
diff --git a/src/sentry/db/models/fields/gzippeddict.py b/src/sentry/db/models/fields/gzippeddict.py
index 7f264ce84e..8451fb2123 100644
--- a/src/sentry/db/models/fields/gzippeddict.py
+++ b/src/sentry/db/models/fields/gzippeddict.py
@@ -19,7 +19,7 @@ from sentry.utils.strings import decompress, compress
 
 __all__ = ('GzippedDictField',)
 
-logger = logging.getLogger('sentry.errors')
+logger = logging.getLogger('sentry')
 
 
 class GzippedDictField(models.TextField):
diff --git a/src/sentry/db/models/fields/node.py b/src/sentry/db/models/fields/node.py
index e470574c0f..9f07d9d172 100644
--- a/src/sentry/db/models/fields/node.py
+++ b/src/sentry/db/models/fields/node.py
@@ -25,7 +25,7 @@ from .gzippeddict import GzippedDictField
 
 __all__ = ('NodeField',)
 
-logger = logging.getLogger('sentry.errors')
+logger = logging.getLogger('sentry')
 
 
 class NodeData(collections.MutableMapping):
diff --git a/src/sentry/db/models/manager.py b/src/sentry/db/models/manager.py
index 6b3e6feaae..af9f61a109 100644
--- a/src/sentry/db/models/manager.py
+++ b/src/sentry/db/models/manager.py
@@ -28,7 +28,7 @@ from .query import create_or_update
 
 __all__ = ('BaseManager',)
 
-logger = logging.getLogger('sentry.errors')
+logger = logging.getLogger('sentry')
 
 
 class ImmutableDict(dict):
diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index 9067660411..a161d321eb 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -45,7 +45,7 @@ class OptionsManager(object):
     """
     cache = cache
 
-    logger = logging.getLogger('sentry.errors')
+    logger = logging.getLogger('sentry')
 
     # we generally want to always persist
     ttl = None
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 460acd2d1d..09c878811d 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -20,7 +20,7 @@ from sentry.utils import metrics
 from sentry.utils.safe import safe_execute
 
 
-rules_logger = logging.getLogger('sentry.errors')
+rules_logger = logging.getLogger('sentry')
 
 
 def _capture_stats(event, is_new):
diff --git a/src/sentry/utils/logging.py b/src/sentry/utils/logging.py
index cd12520336..231aac805f 100644
--- a/src/sentry/utils/logging.py
+++ b/src/sentry/utils/logging.py
@@ -30,6 +30,6 @@ class WithoutRavenManager(object):
 
     def __exit__(self, exc_type, exc_value, exc_traceback):
         if all([exc_type, exc_value, exc_traceback]):
-            logger = logging.getLogger('sentry.errors')
+            logger = logging.getLogger('sentry')
             logger.exception(unicode(exc_value))
         return True
diff --git a/src/sentry/utils/raven.py b/src/sentry/utils/raven.py
index 139bf9520a..6fd14ec228 100644
--- a/src/sentry/utils/raven.py
+++ b/src/sentry/utils/raven.py
@@ -1,10 +1,26 @@
 from __future__ import absolute_import, print_function
 
+import inspect
+import logging
+
 from django.conf import settings
 from raven.contrib.django.client import DjangoClient
 
-from sentry.coreapi import insert_data_to_database
-from sentry.event_manager import EventManager
+UNSAFE_FILES = (
+    'sentry/event_manager.py',
+    'sentry/tasks/process_buffer.py',
+)
+
+
+def can_record_current_event():
+    """
+    Tests the current stack for unsafe locations that would likely cause
+    recursion if an attempt to send to Sentry was made.
+    """
+    for _, filename, _, _, _, _ in inspect.stack():
+        if filename.endswith(UNSAFE_FILES):
+            return True
+    return False
 
 
 class SentryInternalClient(DjangoClient):
@@ -14,6 +30,12 @@ class SentryInternalClient(DjangoClient):
         return settings.SENTRY_PROJECT is not None
 
     def send(self, **kwargs):
+        from sentry.coreapi import insert_data_to_database
+        from sentry.event_manager import EventManager
+
+        if not can_record_current_event():
+            pass
+
         # TODO(dcramer): this should respect rate limits/etc and use the normal
         # pipeline
         try:
@@ -26,3 +48,8 @@ class SentryInternalClient(DjangoClient):
             self.error_logger.error(
                 'Unable to record event: %s\nEvent was: %r', e,
                 kwargs['message'], exc_info=True)
+
+
+class SentryInternalFilter(logging.Filter):
+    def filter(self, record):
+        return not can_record_current_event()
diff --git a/src/sentry/utils/safe.py b/src/sentry/utils/safe.py
index c357bcbb0d..3e342c6954 100644
--- a/src/sentry/utils/safe.py
+++ b/src/sentry/utils/safe.py
@@ -35,7 +35,7 @@ def safe_execute(func, *args, **kwargs):
         func_name = getattr(func, '__name__', str(func))
         cls_name = cls.__name__
 
-        logger = logging.getLogger('sentry.errors')
+        logger = logging.getLogger('sentry')
         logger.error(
             'Error processing %r on %r: %s', func_name, cls_name, exc,
             extra={
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 13246ff715..0a708e4b31 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -58,7 +58,6 @@ from sentry.web.decorators import has_access
 from sentry.web.frontend.groups import _get_group_list
 from sentry.web.helpers import render_to_response
 
-error_logger = logging.getLogger('sentry.errors')
 logger = logging.getLogger('sentry.api')
 
 # Transparent 1x1 gif
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 0b578f8c88..58612b36f7 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -19,7 +19,7 @@ from sentry import options
 from sentry.constants import EVENTS_PER_PAGE
 from sentry.models import Project, Team, ProjectOption
 
-logger = logging.getLogger('sentry.errors')
+logger = logging.getLogger('sentry')
 
 
 def group_is_public(group, user):
