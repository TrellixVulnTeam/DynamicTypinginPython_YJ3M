commit 516e1575100ff8098d0614a21f7fb7fd2bad5afc
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Mar 7 11:53:09 2019 +0100

    feat(grouping): Grouping Information Information (#12270)
    
    This adds information about group hashes to the event UI behind a feature flag.

diff --git a/src/sentry/api/endpoints/event_grouping_info.py b/src/sentry/api/endpoints/event_grouping_info.py
new file mode 100644
index 0000000000..7be5aa670d
--- /dev/null
+++ b/src/sentry/api/endpoints/event_grouping_info.py
@@ -0,0 +1,45 @@
+from __future__ import absolute_import
+
+import six
+
+from django.http import HttpResponse
+
+from sentry.api.base import Endpoint
+from sentry.api.bases.group import GroupPermission
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.models import Event
+from sentry.utils import json
+
+
+class EventGroupingInfoEndpoint(Endpoint):
+    permission_classes = (GroupPermission, )
+
+    def get(self, request, event_id):
+        """
+        Returns the grouping information for an event
+        `````````````````````````````````````````````
+
+        This endpoint returns a JSON dump of the metadata that went into the
+        grouping algorithm.
+        """
+        event = Event.objects.from_event_id(event_id, project_id=None)
+        if event is None:
+            raise ResourceDoesNotExist
+
+        self.check_object_permissions(request, event.group)
+
+        Event.objects.bind_nodes([event], 'data')
+
+        rv = {}
+        hashes = event.get_hashes()
+
+        for (key, variant) in six.iteritems(event.get_grouping_variants()):
+            d = variant.as_dict()
+            # Since the hashes are generated on the fly and might no
+            # longer match the stored ones we indicate if the hash
+            # generation caused the hash to mismatch.
+            d['hashMismatch'] = d['hash'] is not None and d['hash'] not in hashes
+            d['key'] = key
+            rv[key] = d
+
+        return HttpResponse(json.dumps(rv), content_type='application/json')
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index e3cdfe5532..7db253aa3a 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -27,6 +27,7 @@ from .endpoints.event_attachments import EventAttachmentsEndpoint
 from .endpoints.event_details import EventDetailsEndpoint
 from .endpoints.event_owners import EventOwnersEndpoint
 from .endpoints.event_apple_crash_report import EventAppleCrashReportEndpoint
+from .endpoints.event_grouping_info import EventGroupingInfoEndpoint
 from .endpoints.group_details import GroupDetailsEndpoint
 from .endpoints.group_events import GroupEventsEndpoint
 from .endpoints.group_events_latest import GroupEventsLatestEndpoint
@@ -1210,6 +1211,11 @@ urlpatterns = patterns(
         EventAppleCrashReportEndpoint.as_view(),
         name='sentry-api-0-event-apple-crash-report'
     ),
+    url(
+        r'^events/(?P<event_id>\d+)/grouping-info/$',
+        EventGroupingInfoEndpoint.as_view(),
+        name='sentry-api-0-event-grouping-info'
+    ),
 
     # Sentry Apps
     url(
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index d650ea2209..87216a9288 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -819,7 +819,8 @@ SENTRY_FEATURES = {
     'organizations:sentry-apps': False,
     # Enable inviting members to organizations.
     'organizations:invite-members': True,
-
+    # Turns on grouping info.
+    'organizations:grouping-info': False,
 
     # DEPRECATED: pending removal.
     'organizations:js-loader': False,
diff --git a/src/sentry/event_hashing.py b/src/sentry/event_hashing.py
index 0c460a179c..8db9e2fc16 100644
--- a/src/sentry/event_hashing.py
+++ b/src/sentry/event_hashing.py
@@ -15,6 +15,20 @@ DEFAULT_HINTS = {
     'salt': 'a static salt',
 }
 
+# When a component ID appears here it has a human readable name which also
+# makes it a major component.  A major component is described as such for
+# the UI.
+KNOWN_MAJOR_COMPONENT_NAMES = {
+    'app': 'in-app',
+    'exception': 'exception',
+    'stacktrace': 'stacktrace',
+    'threads': 'thread',
+    'hostname': 'hostname',
+    'violation': 'violation',
+    'uri': 'URL',
+    'message': 'message',
+}
+
 
 def _calculate_contributes(values):
     for value in values or ():
@@ -40,6 +54,30 @@ class GroupingComponent(object):
             values = []
         self.values = values
 
+    @property
+    def name(self):
+        return KNOWN_MAJOR_COMPONENT_NAMES.get(self.id)
+
+    @property
+    def description(self):
+        items = []
+
+        def _walk_components(c, stack):
+            stack.append(c.name)
+            for value in c.values:
+                if isinstance(value, GroupingComponent) and value.contributes:
+                    _walk_components(value, stack)
+            parts = filter(None, stack)
+            items.append(parts)
+            stack.pop()
+
+        _walk_components(self, [])
+        items.sort(key=lambda x: (len(x), x))
+
+        if items and items[-1]:
+            return ' '.join(items[-1])
+        return self.name or 'others'
+
     def get_subcomponent(self, id):
         """Looks up a subcomponent by the id and returns the first or `None`."""
         return next(self.iter_subcomponents(id), None)
@@ -87,6 +125,7 @@ class GroupingComponent(object):
         """Converts the component tree into a dictionary."""
         rv = {
             'id': self.id,
+            'name': self.name,
             'contributes': self.contributes,
             'hint': self.hint,
             'values': []
@@ -116,12 +155,17 @@ class BaseVariant(object):
     def get_hash(self):
         return None
 
+    @property
+    def description(self):
+        return self.type
+
     def _get_metadata_as_dict(self):
         return {}
 
     def as_dict(self):
         rv = {
             'type': self.type,
+            'description': self.description,
             'hash': self.get_hash(),
         }
         rv.update(self._get_metadata_as_dict())
@@ -139,8 +183,15 @@ class ChecksumVariant(BaseVariant):
     """A checksum variant returns a single hardcoded hash."""
     type = 'checksum'
 
-    def __init__(self, hash):
+    def __init__(self, hash, hashed=False):
         self.hash = hash
+        self.hashed = hashed
+
+    @property
+    def description(self):
+        if self.hashed:
+            return 'hashed legacy checksum'
+        return 'legacy checksum'
 
     def get_hash(self):
         return self.hash
@@ -155,6 +206,10 @@ class ComponentVariant(BaseVariant):
     def __init__(self, component):
         self.component = component
 
+    @property
+    def description(self):
+        return self.component.description
+
     def get_hash(self):
         return self.component.get_hash()
 
@@ -171,6 +226,10 @@ class CustomFingerprintVariant(BaseVariant):
     def __init__(self, values):
         self.values = values
 
+    @property
+    def description(self):
+        return 'custom fingerprint'
+
     def get_hash(self):
         return hash_from_values(self.values)
 
@@ -188,6 +247,10 @@ class SaltedComponentVariant(BaseVariant):
         self.values = values
         self.component = component
 
+    @property
+    def description(self):
+        return 'modified ' + self.component.description
+
     def get_hash(self):
         if not self.component.contributes:
             return None
@@ -202,7 +265,7 @@ class SaltedComponentVariant(BaseVariant):
     def _get_metadata_as_dict(self):
         return {
             'values': self.values,
-            'component': self.component,
+            'component': self.component.as_dict(),
         }
 
 
@@ -269,7 +332,7 @@ def get_grouping_variants_for_event(event):
             }
         return {
             'checksum': ChecksumVariant(checksum),
-            'hashed-checksum': ChecksumVariant(hash_from_values(checksum)),
+            'hashed-checksum': ChecksumVariant(hash_from_values(checksum), hashed=True),
         }
 
     # Otherwise we go to the various forms of fingerprint handling.
@@ -306,8 +369,7 @@ def get_grouping_variants_for_event(event):
 # This is at present still the main grouping code in the event processing
 # but it should be possible to replace all of these with
 # `get_grouping_variants_for_event` once we feel more confident that no
-# regression ocurred.  This is tested by
-# `test_variants.test_event_hash_variant` at the moment.
+# regression ocurred.
 
 
 def get_hashes_for_event(event):
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 73af1745d4..e7503642e1 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -81,6 +81,7 @@ default_manager.add('organizations:sso-rippling', OrganizationFeature)  # NOQA
 default_manager.add('organizations:sso-saml2', OrganizationFeature)  # NOQA
 default_manager.add('organizations:suggested-commits', OrganizationFeature)  # NOQA
 default_manager.add('organizations:unreleased-changes', OrganizationFeature)  # NOQA
+default_manager.add('organizations:grouping-info', OrganizationFeature)  # NOQA
 
 # Project scoped features
 default_manager.add('projects:custom-inbound-filters', ProjectFeature)  # NOQA
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index 99e8287b3d..aac3d187b3 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -9,6 +9,7 @@ import EventContexts from 'app/components/events/contexts';
 import EventContextSummary from 'app/components/events/contextSummary';
 import EventDataSection from 'app/components/events/eventDataSection';
 import EventErrors from 'app/components/events/errors';
+import EventGroupingInfo from 'app/components/events/groupingInfo';
 import EventExtraData from 'app/components/events/extraData';
 import EventPackageData from 'app/components/events/packageData';
 import EventTags from 'app/components/events/eventTags';
@@ -202,6 +203,10 @@ class EventEntries extends React.Component {
               )}
             </div>
           )}{' '}
+        {!isShare &&
+          features.has('grouping-info') && (
+            <EventGroupingInfo group={group} event={event} />
+          )}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/groupingInfo.jsx b/src/sentry/static/sentry/app/components/events/groupingInfo.jsx
new file mode 100644
index 0000000000..32355427ea
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/groupingInfo.jsx
@@ -0,0 +1,289 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import styled from 'react-emotion';
+import {isObject} from 'lodash';
+import AsyncComponent from 'app/components/asyncComponent';
+
+import EventDataSection from 'app/components/events/eventDataSection';
+import SentryTypes from 'app/sentryTypes';
+import {t} from 'app/locale';
+import KeyValueList from 'app/components/events/interfaces/keyValueList';
+
+import withApi from 'app/utils/withApi';
+
+const GroupVariantList = styled('ul')`
+  padding: 0;
+  margin: 0;
+  list-style: none;
+  font-size: 14px;
+  line-height: 18px;
+`;
+
+const GroupVariantListItem = styled(({contributes, ...props}) => <li {...props} />)`
+  padding: 15px 0 20px 0;
+  margin-top: 15px;
+  border-top: 1px solid ${p => p.theme.borderLighter};
+  ${p => (p.contributes ? '' : 'color:' + p.theme.gray6)};
+`;
+
+const GroupVariantTitle = styled('h5')`
+  margin: 0 0 10px 0;
+  color: inherit !important;
+  text-transform: uppercase;
+  font-size: 14px;
+`;
+
+const GroupingComponentBox = styled('div')`
+  border-top: 1px solid ${p => p.theme.borderLighter};
+  padding: 10px 0 0 0;
+  margin-top: -10px;
+`;
+
+const GroupingComponentList = styled('ul')`
+  padding: 0;
+  margin: 0;
+  list-style: none;
+`;
+
+const GroupingComponentListItem = styled('li')`
+  padding: 0;
+  margin: 2px 0 1px 13px;
+`;
+
+const GroupingComponentWrapper = styled(({contributes, ...props}) => <div {...props} />)`
+  ${p => (p.contributes ? '' : 'color:' + p.theme.gray6)};
+`;
+
+const GroupingValue = styled('code')`
+  display: inline-block;
+  margin: 1px 4px 1px 0;
+  font-size: 12px;
+  padding: 1px 2px;
+  color: inherit;
+`;
+
+class GroupingComponent extends React.Component {
+  static propTypes = {
+    component: PropTypes.object,
+    showNonContributing: PropTypes.bool,
+  };
+
+  render() {
+    const {component} = this.props;
+
+    const children = component.values.map((value, idx) => {
+      let rv;
+      if (isObject(value)) {
+        // no point rendering such nodes at all, we never show them
+        if (!value.contributes && !value.hint && value.values.length === 0) {
+          return null;
+        }
+        // non contributing values are otherwise optional
+        if (!this.props.showNonContributing && !value.contributes) {
+          return null;
+        }
+        rv = (
+          <GroupingComponent
+            component={value}
+            showNonContributing={this.props.showNonContributing}
+          />
+        );
+      } else {
+        rv = <GroupingValue>{JSON.stringify(value, null, 2)}</GroupingValue>;
+      }
+      return <GroupingComponentListItem key={idx}>{rv}</GroupingComponentListItem>;
+    });
+
+    return (
+      <GroupingComponentWrapper contributes={component.contributes}>
+        <span>
+          {component.name || component.id}
+          {component.hint && <small>{` (${component.hint})`}</small>}
+        </span>
+        <GroupingComponentList>{children}</GroupingComponentList>
+      </GroupingComponentWrapper>
+    );
+  }
+}
+
+function hasNonContributingComponent(component) {
+  if (!component.contributes) {
+    return true;
+  }
+  for (const value of component.values) {
+    if (isObject(value) && hasNonContributingComponent(value)) {
+      return true;
+    }
+  }
+  return false;
+}
+
+class GroupVariant extends React.Component {
+  static propTypes = {
+    variant: PropTypes.object,
+  };
+
+  constructor(...args) {
+    super(...args);
+    this.state = {
+      showNonContributing: false,
+    };
+  }
+
+  toggleNonContributing = () => {
+    this.setState({
+      showNonContributing: !this.state.showNonContributing,
+    });
+  };
+
+  renderVariantDetails() {
+    const {variant} = this.props;
+    const data = [['Algorithm', variant.type]];
+    let component = null;
+
+    if (variant.hash !== null) {
+      data.push(['Hash', variant.hash]);
+    }
+    if (variant.hashMismatch) {
+      data.push(['Hash mismatch', 'hashing algorithm changed after event generation']);
+    }
+
+    switch (variant.type) {
+      case 'component':
+        component = variant.component;
+        break;
+      case 'custom-fingerprint':
+        data.push(['Fingerprint values', variant.values]);
+        break;
+      case 'salted-component':
+        data.push(['Fingerprint values', variant.values]);
+        component = variant.component;
+        break;
+      default:
+        break;
+    }
+
+    return (
+      <div>
+        <KeyValueList data={data} isContextData />
+        {component && (
+          <GroupingComponentBox>
+            {hasNonContributingComponent(component) && (
+              <a className="pull-right" onClick={this.toggleNonContributing}>
+                {this.state.showNonContributing
+                  ? t('hide non contributing values')
+                  : t('show non contributing values')}
+              </a>
+            )}
+            <GroupingComponent
+              component={component}
+              showNonContributing={this.state.showNonContributing}
+            />
+          </GroupingComponentBox>
+        )}
+      </div>
+    );
+  }
+
+  render() {
+    const {variant} = this.props;
+    return (
+      <GroupVariantListItem contributes={variant.hash !== null}>
+        <GroupVariantTitle>{`by ${variant.description}`}</GroupVariantTitle>
+        {this.renderVariantDetails()}
+      </GroupVariantListItem>
+    );
+  }
+}
+
+class EventGroupingInfo extends AsyncComponent {
+  static propTypes = {
+    api: PropTypes.object,
+    group: SentryTypes.Group.isRequired,
+    event: SentryTypes.Event.isRequired,
+  };
+
+  getEndpoints() {
+    return [['groupInfo', `/events/${this.props.event.id}/grouping-info/`]];
+  }
+
+  getInitialState() {
+    return {
+      isOpen: false,
+      ...super.getInitialState(),
+    };
+  }
+
+  toggle = () => {
+    this.setState({isOpen: !this.state.isOpen});
+  };
+
+  getEndpoint() {
+    return `/events/${this.props.event.id}/grouping-info/`;
+  }
+
+  renderGroupInfoSummary() {
+    if (this.state.groupInfo === null) {
+      return null;
+    }
+
+    const variants = [];
+    for (const key of Object.keys(this.state.groupInfo)) {
+      const variant = this.state.groupInfo[key];
+      if (variant.hash !== null) {
+        variants.push(variant.description);
+      }
+    }
+    variants.sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));
+
+    return (
+      <React.Fragment>
+        {' '}
+        <small>{`(grouped by ${variants.join(', ') || 'nothing'})`}</small>
+      </React.Fragment>
+    );
+  }
+
+  renderGroupInfo() {
+    const variants = Object.values(this.state.groupInfo);
+    variants.sort((a, b) => {
+      if (a.hash && !b.hash) {
+        return -1;
+      }
+      return a.description.toLowerCase().localeCompare(b.description.toLowerCase());
+    });
+
+    return (
+      <GroupVariantList>
+        {variants.map(variant => <GroupVariant variant={variant} key={variant.key} />)}
+      </GroupVariantList>
+    );
+  }
+
+  renderBody() {
+    const isOpen = this.state.isOpen;
+    return (
+      <EventDataSection
+        group={this.props.group}
+        event={this.props.event}
+        type="grouping-info"
+        className="grouping-info"
+      >
+        <div className="box-header">
+          <a className="pull-right grouping-info-toggle" onClick={this.toggle}>
+            {isOpen ? t('Hide Details') : t('Show Details')}
+          </a>
+          <h3>
+            {t('Event Grouping Information')}
+            {!isOpen && this.renderGroupInfoSummary()}
+          </h3>
+        </div>
+        <div style={{display: isOpen ? 'block' : 'none'}}>
+          {this.state.groupInfo !== null && isOpen && this.renderGroupInfo()}
+        </div>
+      </EventDataSection>
+    );
+  }
+}
+
+export default withApi(EventGroupingInfo);
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 132b4e8393..d996d28baf 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -204,6 +204,7 @@
 
   a {
     color: @gray-dark;
+
     &:hover {
       color: @gray-darker;
     }
@@ -221,6 +222,7 @@
   &.on a:hover {
     .icon {
       color: @red;
+
       &:after {
         border-color: @red !important;
       }
@@ -231,6 +233,7 @@
 .group-notifications {
   .icon {
     position: relative;
+
     &:before {
       content: '\e607';
     }
@@ -624,6 +627,7 @@
         blockquote {
           margin-bottom: 15px;
         }
+
         ul:not(.nav),
         ol {
           padding-left: 20px;
@@ -669,12 +673,15 @@
               border-left: 1px solid lighten(@trim, 5);
               color: @gray;
               font-weight: normal;
+
               &:hover {
                 color: #666;
               }
+
               &:hover.danger {
                 color: #d21c25;
               }
+
               &:first-child {
                 margin-left: 7px;
               }
@@ -758,6 +765,7 @@
   .inline-commit {
     color: @60;
     padding-left: 3px;
+
     &:hover {
       color: @80;
     }
@@ -835,11 +843,13 @@
       &.alert-info + .context-summary {
         border-top: 1px solid @alert-info-border-color;
       }
+
       &.alert-success,
       &.alert-success + .box,
       &.alert-success + .context-summary {
         border-top: 1px solid @alert-success-border-color;
       }
+
       &.alert-error,
       &.alert-error + .box,
       &.alert-error + .context-summary {
@@ -1139,6 +1149,7 @@
       border-left: 1px solid @trim;
     }
   }
+
   .tooltip {
     .tooltip-inner {
       max-width: 250px;
@@ -1213,8 +1224,10 @@
   h3 {
     position: absolute;
   }
+
   .btn-group {
     position: relative;
+
     .btn {
       margin: 0;
     }
@@ -1343,6 +1356,7 @@ div.traceback > ul {
 
     &.is-expandable .title {
       cursor: pointer;
+
       &:hover {
         background: lighten(@blue-light, 36);
       }
@@ -1359,8 +1373,10 @@ div.traceback > ul {
       line-height: 16px;
       background: lighten(@blue-light, 35);
 
-      word-break: break-all; /* for firefox */
-      word-break: break-word; /* for chrome */
+      word-break: break-all;
+      /* for firefox */
+      word-break: break-word;
+      /* for chrome */
 
       code {
         font-family: inherit;
@@ -1424,6 +1440,7 @@ div.traceback > ul {
           &:before {
             content: '(';
           }
+
           &:after {
             content: ')';
           }
@@ -1547,9 +1564,11 @@ div.traceback > ul {
     .box-clippable {
       margin-left: 0;
       margin-right: 0;
+
       &:first-of-type {
         margin-top: 0;
       }
+
       &:first-child {
         margin-top: -20px;
       }
@@ -1563,6 +1582,7 @@ div.traceback > ul {
 
     > div > table.key-value {
       margin-bottom: 5px;
+
       > tbody > tr > th {
         color: @gray-dark;
         text-align: right;
@@ -1614,22 +1634,27 @@ div.traceback > ul {
         font-size: 12px;
         padding: 4px 20px 4px 20px;
         background: lighten(@blue-light, 33);
+
         &.is-expandable:hover {
           opacity: 1;
         }
+
         .package {
           width: auto;
         }
       }
+
       .title.as-table {
         padding-left: 15px;
       }
+
       .in-at-line,
       .lineno,
       .btn-toggle,
       .address {
         display: none;
       }
+
       .leads-to-app-hint {
         display: inline;
       }
@@ -1790,6 +1815,7 @@ div.traceback > ul {
     background: @background;
     box-shadow: 0 1px 0 rgba(255, 255, 255, 0.6);
   }
+
   &:after {
     content: @content;
     display: block;
@@ -1806,7 +1832,7 @@ div.traceback > ul {
     border-radius: 3px 0 0 3px;
   }
 
-  &:after when(@icon = true) {
+  &:after when(@icon =true) {
     font-family: 'sentry-simple';
     speak: none;
     font-style: normal;
@@ -1843,6 +1869,7 @@ div.traceback > ul {
 &.expanded div.commands,
 div.commands:hover {
   .opacity(100);
+
   a {
     color: @state-info-text;
   }
@@ -1858,6 +1885,7 @@ div.commands {
   a {
     color: #666;
     text-decoration: none;
+
     span {
       font-size: 9px;
       margin-right: 5px;
@@ -1878,6 +1906,32 @@ div.commands {
   }
 }
 
+.box.grouping-info {
+  padding-top: 20px !important;
+  padding-bottom: 18px !important;
+  position: relative;
+  .clearfix;
+
+  .box-header h3 {
+    margin: 0 !important;
+    padding: 0 !important;
+  }
+
+  .box-content {
+    padding: 10px 20px;
+  }
+
+  a.grouping-info-toggle {
+    font-size: 14px;
+    font-weight: bold;
+    color: rgba(0, 0, 0, 0.7);
+
+    &:hover {
+      color: rgba(0, 0, 0, 0.9);
+    }
+  }
+}
+
 .box.errors {
   border-top: 1px solid @alert-danger-border-color !important;
   background: @alert-danger-bg-color;
@@ -1916,6 +1970,7 @@ div.commands {
     a {
       font-weight: bold;
       color: rgba(0, 0, 0, 0.7);
+
       &:hover {
         color: rgba(0, 0, 0, 0.9);
       }
@@ -1964,10 +2019,12 @@ div.commands {
   margin-left: 0;
   margin-bottom: 0;
 }
+
 .server-list li,
 .url-list li {
   padding-bottom: 10px;
 }
+
 .url-list li a {
   line-height: 18px;
 }
@@ -2100,6 +2157,7 @@ span.val {
   .exception {
     margin-top: 10px;
   }
+
   .traceback.no-exception {
     margin-top: 0;
   }
@@ -2128,6 +2186,7 @@ span.val {
             font-size: 20px;
             flex: 1;
           }
+
           &:hover {
             color: @gray-dark;
           }
@@ -2184,6 +2243,7 @@ span.val {
 
       .box {
         padding: 0 30px;
+
         &:first-child {
           border-top: 0;
         }
@@ -2468,6 +2528,7 @@ ul.crumbs {
 
       &.expanded {
         max-height: none;
+
         &:after,
         &:before {
           display: none;
@@ -2521,6 +2582,7 @@ ul.crumbs {
       span {
         display: inline;
       }
+
       span.param {
         color: @gray-darker;
         font-weight: bold;
@@ -2559,6 +2621,7 @@ ul.crumbs {
           top: 5px;
           left: 5.5px;
           color: @blue;
+
           &:before {
             content: '\e90b';
           }
@@ -2574,6 +2637,7 @@ ul.crumbs {
           top: 5px;
           left: 5.5px;
           color: @green;
+
           &:before {
             content: '\e908';
           }
@@ -2608,6 +2672,7 @@ ul.crumbs {
           top: 4px;
           left: 5.5px;
           color: @yellow-orange;
+
           &:before {
             content: '\e906';
           }
@@ -2635,6 +2700,7 @@ ul.crumbs {
         color: @red;
         top: 4px;
         left: 5.5px;
+
         &:before {
           content: '\e906';
         }
diff --git a/tests/sentry/interfaces/test_message.py b/tests/sentry/interfaces/test_message.py
index 0fc8ca2471..1019f38f53 100644
--- a/tests/sentry/interfaces/test_message.py
+++ b/tests/sentry/interfaces/test_message.py
@@ -41,6 +41,7 @@ class MessageTest(TestCase):
         assert self.interface.get_grouping_component().as_dict() == {
             'hint': None,
             'id': 'message',
+            'name': 'message',
             'contributes': True,
             'values': ['Hello there %s!'],
         }
@@ -54,6 +55,7 @@ class MessageTest(TestCase):
         assert interface.get_grouping_component().as_dict() == {
             'hint': None,
             'id': 'message',
+            'name': 'message',
             'contributes': True,
             'values': ['Hello there world!'],
         }
