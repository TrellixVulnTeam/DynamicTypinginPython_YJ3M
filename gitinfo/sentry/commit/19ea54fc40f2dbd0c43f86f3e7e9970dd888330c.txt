commit 19ea54fc40f2dbd0c43f86f3e7e9970dd888330c
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 3 14:07:03 2012 -0700

    Support for auth providers in IssuePlugin

diff --git a/src/sentry/plugins/base.py b/src/sentry/plugins/base.py
index 939fb3a38e..83430e24d4 100644
--- a/src/sentry/plugins/base.py
+++ b/src/sentry/plugins/base.py
@@ -256,8 +256,13 @@ class IPlugin(local):
         Given a template name, and an optional context (dictionary), returns a
         ready-to-render response.
 
+        Default context includes the plugin instance.
+
         >>> plugin.render('template.html', {'hello': 'world'})
         """
+        if context is None:
+            context = {}
+        context['plugin'] = self
         return Response(template, context)
 
     # The following methods are specific to web requests
@@ -297,6 +302,7 @@ class IPlugin(local):
             raise NotImplementedError('Please use self.render() when returning responses.')
 
         return response.respond(request, {
+            'plugin': self,
             'project': group.project,
             'group': group,
         })
diff --git a/src/sentry/plugins/bases/issue.py b/src/sentry/plugins/bases/issue.py
index f265743412..e99362255f 100644
--- a/src/sentry/plugins/bases/issue.py
+++ b/src/sentry/plugins/bases/issue.py
@@ -11,6 +11,7 @@ from django import forms
 from django.core.urlresolvers import reverse
 from django.utils.html import escape
 from django.utils.safestring import mark_safe
+from social_auth.models import UserSocialAuth
 
 
 class NewIssueForm(forms.Form):
@@ -24,6 +25,8 @@ class IssuePlugin(Plugin):
 
     create_issue_template = 'sentry/plugins/bases/issue/create_issue.html'
     not_configured_template = 'sentry/plugins/bases/issue/not_configured.html'
+    needs_auth_template = 'sentry/plugins/bases/issue/needs_auth.html'
+    auth_provider = None
 
     def __init__(self, *args, **kwargs):
         super(IssuePlugin, self).__init__(*args, **kwargs)
@@ -55,13 +58,52 @@ class IssuePlugin(Plugin):
     def is_configured(self, request, project, **kwargs):
         raise NotImplementedError
 
+    def get_auth_for_user(self, user, **kwargs):
+        """
+        Return a ``UserSocialAuth`` object for the given user based on this plugins ``auth_provider``.
+        """
+        assert self.auth_provider, 'There is no auth provider configured for this plugin.'
+
+        if user.is_authenticated():
+            return None
+
+        try:
+            return UserSocialAuth.objects.filter(user=user, provider=self.auth_provider)[0]
+        except IndexError:
+            return None
+
+    def needs_auth(self, request, project, **kwargs):
+        """
+        Return ``True`` if the authenticated user needs to associate an auth service before
+        performing actions with this plugin.
+        """
+        if self.auth_provider is None:
+            return False
+
+        if not request.user.is_authenticated():
+            return True
+
+        return bool(not UserSocialAuth.objects.filter(user=request.user, provider=self.auth_provider).exists())
+
     def get_new_issue_title(self, **kwargs):
+        """
+        Return a string for the "Create new issue" action label.
+        """
         return 'Create %s Issue' % self.get_title()
 
     def get_issue_url(self, group, issue_id, **kwargs):
+        """
+        Given an issue_id (string) return an absolute URL to the issue's details
+        page.
+        """
         raise NotImplementedError
 
     def get_issue_label(self, group, issue_id, **kwargs):
+        """
+        Given an issue_id (string) return a string representing the issue.
+
+        e.g. GitHub represents issues as GH-XXX
+        """
         return '#%s' % issue_id
 
     def create_issue(self, request, group, form_data, **kwargs):
@@ -77,8 +119,15 @@ class IssuePlugin(Plugin):
         }
 
     def view(self, request, group, **kwargs):
+        if not self.needs_auth(project=group.project, request=request):
+            return self.render(self.needs_auth_template, request, {
+                'project': group.project,
+            })
+
         if not self.is_configured(project=group.project, request=request):
-            return self.render(self.not_configured_template)
+            return self.render(self.not_configured_template, request, {
+                'project': group.project,
+            })
 
         prefix = self.get_conf_key()
         event = group.get_latest_event()
diff --git a/src/sentry/templates/sentry/plugins/bases/issue/needs_auth.html b/src/sentry/templates/sentry/plugins/bases/issue/needs_auth.html
new file mode 100644
index 0000000000..e09a288532
--- /dev/null
+++ b/src/sentry/templates/sentry/plugins/bases/issue/needs_auth.html
@@ -0,0 +1,17 @@
+{% extends "sentry/groups/details.html" %}
+
+{% load i18n %}
+
+{% block title %}{{ title }} | {{ block.super }}{% endblock %}
+
+{% block inner %}
+    <div class="span12">
+        <div class="page-header">
+            <h3>{{ title }}</h3>
+        </div>
+        <div class="alert-message error">
+            {% url socialauth_associate_begin plugin.auth_provider as link %}
+            {% blocktrans %}You still need to <a href="{{ link }}">associate an identity</a> with {{ title }} first.{% endblocktrans %}
+        </div>
+    </div>
+{% endblock %}
\ No newline at end of file
diff --git a/src/sentry/templates/sentry/plugins/bases/issue/not_configured.html b/src/sentry/templates/sentry/plugins/bases/issue/not_configured.html
index 11edfe9576..560d16aee7 100644
--- a/src/sentry/templates/sentry/plugins/bases/issue/not_configured.html
+++ b/src/sentry/templates/sentry/plugins/bases/issue/not_configured.html
@@ -9,6 +9,9 @@
         <div class="page-header">
             <h3>{{ title }}</h3>
         </div>
-        <div class="alert-message error">{% trans "You have not yet configured this plugin for this project." %}</div>
+        <div class="alert-message error">
+            {% url sentry-configure-project-plugin project_id=project.id slug=plugin.slug as link %}
+            {% blocktrans %}You still need to <a href="{{ link }}">configure this plugin</a>.{% endblocktrans %}
+        </div>
     </div>
 {% endblock %}
\ No newline at end of file
diff --git a/tests/sentry/plugins/bases/__init__.py b/tests/sentry/plugins/bases/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/plugins/bases/issue/__init__.py b/tests/sentry/plugins/bases/issue/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/plugins/bases/issue/tests.py b/tests/sentry/plugins/bases/issue/tests.py
new file mode 100644
index 0000000000..a1b320d7e1
--- /dev/null
+++ b/tests/sentry/plugins/bases/issue/tests.py
@@ -0,0 +1,28 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import mock
+
+from django.contrib.auth.models import User
+from sentry.plugins.bases.issue import IssuePlugin
+from tests.base import TestCase
+
+
+class GetAuthForUserTest(TestCase):
+    def _get_mock_user(self):
+        user = mock.Mock(spec=User())
+        user.id = 1
+        user.is_authenticated.return_value = False
+        return user
+
+    def test_requires_auth_provider(self):
+        user = self._get_mock_user()
+        p = IssuePlugin()
+        self.assertRaises(AssertionError, p.get_auth_for_user, user)
+
+    def test_returns_none_on_missing_identity(self):
+        user = self._get_mock_user()
+        p = IssuePlugin()
+        p.auth_provider = 'test'
+        self.assertEquals(p.get_auth_for_user(user), None)
