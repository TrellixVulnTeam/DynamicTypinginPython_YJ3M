commit 6f37258218f414bc3660d3a5dc3aa3ca6eb24cc0
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Fri Sep 13 14:14:47 2019 -0700

    ref(registration): Accept invites during registration (#14696)

diff --git a/src/sentry/api/endpoints/accept_organization_invite.py b/src/sentry/api/endpoints/accept_organization_invite.py
index 2b9abe77a7..ce041a4dff 100644
--- a/src/sentry/api/endpoints/accept_organization_invite.py
+++ b/src/sentry/api/endpoints/accept_organization_invite.py
@@ -56,6 +56,7 @@ class AcceptOrganizationInvite(Endpoint):
         # Allow users to register an account when accepting an invite
         if not helper.user_authenticated:
             request.session["can_register"] = True
+            add_invite_cookie(request, response, member_id, token)
 
             # When SSO is required do *not* set a next_url to return to accept
             # invite. The invite will be accepted after SSO is completed.
diff --git a/src/sentry/api/endpoints/user_authenticator_enroll.py b/src/sentry/api/endpoints/user_authenticator_enroll.py
index d08add8c3a..c589f02d01 100644
--- a/src/sentry/api/endpoints/user_authenticator_enroll.py
+++ b/src/sentry/api/endpoints/user_authenticator_enroll.py
@@ -10,9 +10,9 @@ import petname
 from sentry.api.bases.user import UserEndpoint
 from sentry.api.decorators import sudo_required
 from sentry.api.serializers import serialize
-from sentry.models import Authenticator, OrganizationMember
+from sentry.models import Authenticator
 from sentry.security import capture_security_activity
-from sentry.api.invite_helper import ApiInviteHelper, remove_invite_cookie, get_invite_cookie
+from sentry.api.invite_helper import ApiInviteHelper, remove_invite_cookie
 
 logger = logging.getLogger(__name__)
 
@@ -225,22 +225,10 @@ class UserAuthenticatorEnrollEndpoint(UserEndpoint):
 
         # If there is a pending organization invite accept after the
         # authenticator has been configured.
-        org_invite = get_invite_cookie(request)
+        invite_helper = ApiInviteHelper.from_cookie(request=request, instance=self, logger=logger)
 
-        if org_invite:
-            try:
-                helper = ApiInviteHelper(
-                    instance=self,
-                    request=request,
-                    member_id=org_invite["memberId"],
-                    token=org_invite["token"],
-                    logger=logger,
-                )
-            except OrganizationMember.DoesNotExist:
-                logger.error("Failed to accept pending org invite", exc_info=True)
-            else:
-                if helper.valid_request:
-                    helper.accept_invite()
-                    remove_invite_cookie(request, response)
+        if invite_helper and invite_helper.valid_request:
+            invite_helper.accept_invite()
+            remove_invite_cookie(request, response)
 
         return response
diff --git a/src/sentry/api/invite_helper.py b/src/sentry/api/invite_helper.py
index bb1aa0559c..50d9af9d15 100644
--- a/src/sentry/api/invite_helper.py
+++ b/src/sentry/api/invite_helper.py
@@ -66,6 +66,26 @@ class ApiInviteHelper(object):
             request=request, member_id=om.id, token=om.token, instance=instance, logger=logger
         )
 
+    @classmethod
+    def from_cookie(cls, request, instance=None, logger=None):
+        org_invite = get_invite_cookie(request)
+
+        if not org_invite:
+            return None
+
+        try:
+            return ApiInviteHelper(
+                request=request,
+                member_id=org_invite["memberId"],
+                token=org_invite["token"],
+                instance=instance,
+                logger=logger,
+            )
+        except OrganizationMember.DoesNotExist:
+            if logger:
+                logger.error("Invalid pending invite cookie", exc_info=True)
+            return None
+
     def __init__(self, request, member_id, token, instance=None, logger=None):
         self.request = request
         self.member_id = member_id
diff --git a/src/sentry/web/frontend/auth_login.py b/src/sentry/web/frontend/auth_login.py
index 37ce9271c4..152231e2bd 100644
--- a/src/sentry/web/frontend/auth_login.py
+++ b/src/sentry/web/frontend/auth_login.py
@@ -9,6 +9,7 @@ from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 from django.views.decorators.cache import never_cache
 
+from sentry.api.invite_helper import ApiInviteHelper, remove_invite_cookie
 from sentry.auth.superuser import is_active_superuser
 from sentry.constants import WARN_SESSION_EXPIRED
 from sentry.http import get_server_hostname
@@ -120,6 +121,16 @@ class AuthLoginView(BaseView):
             request.session.pop("can_register", None)
             request.session.pop("invite_email", None)
 
+            # Attempt to directly accept any pending invites
+            invite_helper = ApiInviteHelper.from_cookie(request=request, instance=self)
+
+            if invite_helper and invite_helper.valid_request:
+                invite_helper.accept_invite()
+                response = self.redirect_to_org(request)
+                remove_invite_cookie(request, response)
+
+                return response
+
             return self.redirect(auth.get_login_redirect(request))
 
         elif request.method == "POST":
diff --git a/tests/sentry/api/endpoints/test_user_authenticator_enroll.py b/tests/sentry/api/endpoints/test_user_authenticator_enroll.py
index 2e9338f654..5ff62ef0fe 100644
--- a/tests/sentry/api/endpoints/test_user_authenticator_enroll.py
+++ b/tests/sentry/api/endpoints/test_user_authenticator_enroll.py
@@ -336,7 +336,7 @@ class AcceptOrganizationInviteTest(APITestCase):
         assert om.email == "newuser@example.com"
 
         assert log.error.call_count == 1
-        assert log.error.call_args[0][0] == "Failed to accept pending org invite"
+        assert log.error.call_args[0][0] == "Invalid pending invite cookie"
 
     @mock.patch("sentry.api.endpoints.user_authenticator_enroll.logger")
     @mock.patch("sentry.models.U2fInterface.try_enroll", return_value=True)
