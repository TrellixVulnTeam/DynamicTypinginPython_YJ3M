commit 563437c1a97565a4a7aec80cda23720210d93f71
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Apr 6 16:41:09 2020 -0700

    perf(ui): Move all of Settings to LightweightOrg (#18067)
    
    Clicked around opening everything in a new tab, and things seemed to work.
    Removed using projects/teams from `organization` object in `withTeamsForUser` as this was causing issues when renaming teams.

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index c28ab7b918..c958194666 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1040,67 +1040,6 @@ function routes() {
         />
       </Route>
 
-      <Route component={errorHandler(OrganizationDetails)}>
-        <Route path="/settings/" name="Settings" component={SettingsWrapper}>
-          <IndexRoute
-            getComponent={(_loc, cb) =>
-              import(
-                /* webpackChunkName: "SettingsIndex" */ 'app/views/settings/settingsIndex'
-              ).then(lazyLoad(cb))
-            }
-          />
-
-          <Route
-            path="account/"
-            name="Account"
-            getComponent={(_loc, cb) =>
-              import(
-                /* webpackChunkName: "AccountSettingsLayout" */ 'app/views/settings/account/accountSettingsLayout'
-              ).then(lazyLoad(cb))
-            }
-          >
-            {accountSettingsRoutes}
-          </Route>
-
-          <Route name="Organization" path=":orgId/">
-            <Route
-              getComponent={(_loc, cb) =>
-                import(
-                  /* webpackChunkName: "OrganizationSettingsLayout" */ 'app/views/settings/organization/organizationSettingsLayout'
-                ).then(lazyLoad(cb))
-              }
-            >
-              {hook('routes:organization')}
-              {orgSettingsRoutes}
-            </Route>
-
-            <Route
-              name="Project"
-              path="projects/:projectId/"
-              getComponent={(_loc, cb) =>
-                import(
-                  /* webpackChunkName: "ProjectSettingsLayout" */ 'app/views/settings/project/projectSettingsLayout'
-                ).then(lazyLoad(cb))
-              }
-            >
-              <Route component={errorHandler(SettingsProjectProvider)}>
-                {projectSettingsRoutes}
-              </Route>
-            </Route>
-
-            <Redirect from=":projectId/" to="projects/:projectId/" />
-            <Redirect from=":projectId/alerts/" to="projects/:projectId/alerts/" />
-            <Redirect
-              from=":projectId/alerts/rules/"
-              to="projects/:projectId/alerts/rules/"
-            />
-            <Redirect
-              from=":projectId/alerts/rules/:ruleId/"
-              to="projects/:projectId/alerts/rules/:ruleId/"
-            />
-          </Route>
-        </Route>
-      </Route>
       {/* A route tree for lightweight organizational detail views. We place
       this above the heavyweight organization detail views because there
       exist some redirects from deprecated routes which should not take
@@ -1237,6 +1176,89 @@ function routes() {
           />
         </Route>
 
+        <Route
+          path="/organizations/:orgId/alerts/"
+          componentPromise={() =>
+            import(/* webpackChunkName: "AlertsContainer" */ 'app/views/alerts')
+          }
+          component={errorHandler(LazyLoad)}
+        >
+          <IndexRoute
+            componentPromise={() =>
+              import(/* webpackChunkName: "AlertsList" */ 'app/views/alerts/list')
+            }
+            component={errorHandler(LazyLoad)}
+          />
+
+          <Route
+            path=":alertId/"
+            componentPromise={() =>
+              import(/* webpackChunkName: "AlertsDetails" */ 'app/views/alerts/details')
+            }
+            component={errorHandler(LazyLoad)}
+          />
+        </Route>
+
+        <Route path="/settings/" name="Settings" component={SettingsWrapper}>
+          <IndexRoute
+            getComponent={(_loc, cb) =>
+              import(
+                /* webpackChunkName: "SettingsIndex" */ 'app/views/settings/settingsIndex'
+              ).then(lazyLoad(cb))
+            }
+          />
+
+          <Route
+            path="account/"
+            name="Account"
+            getComponent={(_loc, cb) =>
+              import(
+                /* webpackChunkName: "AccountSettingsLayout" */ 'app/views/settings/account/accountSettingsLayout'
+              ).then(lazyLoad(cb))
+            }
+          >
+            {accountSettingsRoutes}
+          </Route>
+
+          <Route name="Organization" path=":orgId/">
+            <Route
+              getComponent={(_loc, cb) =>
+                import(
+                  /* webpackChunkName: "OrganizationSettingsLayout" */ 'app/views/settings/organization/organizationSettingsLayout'
+                ).then(lazyLoad(cb))
+              }
+            >
+              {hook('routes:organization')}
+              {orgSettingsRoutes}
+            </Route>
+
+            <Route
+              name="Project"
+              path="projects/:projectId/"
+              getComponent={(_loc, cb) =>
+                import(
+                  /* webpackChunkName: "ProjectSettingsLayout" */ 'app/views/settings/project/projectSettingsLayout'
+                ).then(lazyLoad(cb))
+              }
+            >
+              <Route component={errorHandler(SettingsProjectProvider)}>
+                {projectSettingsRoutes}
+              </Route>
+            </Route>
+
+            <Redirect from=":projectId/" to="projects/:projectId/" />
+            <Redirect from=":projectId/alerts/" to="projects/:projectId/alerts/" />
+            <Redirect
+              from=":projectId/alerts/rules/"
+              to="projects/:projectId/alerts/rules/"
+            />
+            <Redirect
+              from=":projectId/alerts/rules/:ruleId/"
+              to="projects/:projectId/alerts/rules/:ruleId/"
+            />
+          </Route>
+        </Route>
+
         <Route
           path="/manage/"
           componentPromise={() =>
@@ -1360,29 +1382,6 @@ function routes() {
           />
           {hook('routes:admin')}
         </Route>
-
-        <Route
-          path="/organizations/:orgId/alerts/"
-          componentPromise={() =>
-            import(/* webpackChunkName: "AlertsContainer" */ 'app/views/alerts')
-          }
-          component={errorHandler(LazyLoad)}
-        >
-          <IndexRoute
-            componentPromise={() =>
-              import(/* webpackChunkName: "AlertsList" */ 'app/views/alerts/list')
-            }
-            component={errorHandler(LazyLoad)}
-          />
-
-          <Route
-            path=":alertId/"
-            componentPromise={() =>
-              import(/* webpackChunkName: "AlertsDetails" */ 'app/views/alerts/details')
-            }
-            component={errorHandler(LazyLoad)}
-          />
-        </Route>
       </Route>
 
       {/* The heavyweight organization detail views */}
diff --git a/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx b/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx
index 76c30c7d24..7c67910b02 100644
--- a/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx
+++ b/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx
@@ -40,17 +40,10 @@ const withTeamsForUser = <P extends InjectedTeamsProps>(
     }
 
     async fetchTeams() {
-      // check if we can use organization teams/projects instead of fetching data
-      const {projects, teams} = this.props.organization;
-      if (projects && teams) {
-        // populate teams with projects information for use by wrapped components
-        this.populateTeamsWithProjects(teams, projects);
-        return;
-      }
-
       this.setState({
         loadingTeams: true,
       });
+
       try {
         metric.mark('user-teams-fetch-start');
         const teamsWithProjects: TeamWithProjects[] = await this.props.api.requestPromise(
diff --git a/tests/js/spec/utils/withTeamsForUser.spec.jsx b/tests/js/spec/utils/withTeamsForUser.spec.jsx
index fd8003aebf..8ab5db2972 100644
--- a/tests/js/spec/utils/withTeamsForUser.spec.jsx
+++ b/tests/js/spec/utils/withTeamsForUser.spec.jsx
@@ -64,32 +64,4 @@ describe('withUserTeams HoC', function() {
         .prop('teams')
     ).toEqual(mockTeams);
   });
-
-  it('does not fetch teams if information is in organization', async function() {
-    const mockTeam = TestStubs.Team();
-    const mockProjects = [TestStubs.Project({teams: [mockTeam]})];
-    const mockOrg = TestStubs.Organization({teams: [mockTeam], projects: mockProjects});
-
-    const getTeamsMock = MockApiClient.addMockResponse({
-      url: `/organizations/${organization.slug}/user-teams/`,
-      body: [mockTeam],
-    });
-
-    const MyComponent = () => null;
-    const Container = withTeamsForUser(MyComponent);
-    const wrapper = mount(<Container organization={mockOrg} api={api} />);
-    await tick();
-
-    const expectedTeams = [{...mockTeam, projects: mockProjects}];
-
-    expect(
-      wrapper
-        .update()
-        .find('MyComponent')
-        .prop('teams')
-    ).toEqual(expectedTeams);
-
-    // ensure no request was made to get teams
-    expect(getTeamsMock).not.toHaveBeenCalled();
-  });
 });
