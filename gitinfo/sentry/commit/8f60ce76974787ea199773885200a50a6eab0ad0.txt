commit 8f60ce76974787ea199773885200a50a6eab0ad0
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Dec 24 13:31:06 2012 -0800

    Correct pending_members_list not being available on project manage team page (in addition to some test cleanup)

diff --git a/src/sentry/testutils.py b/src/sentry/testutils.py
index c08d5a51c9..ec81b3830c 100644
--- a/src/sentry/testutils.py
+++ b/src/sentry/testutils.py
@@ -9,26 +9,25 @@ sentry.testutils
 from __future__ import absolute_import
 
 import base64
+from exam import fixture
 
 from sentry.conf import settings
 from sentry.utils import json
 from sentry.utils.auth import get_auth_header
 
-
 from django.conf import settings as django_settings
+from django.contrib.auth import login
 from django.contrib.auth.models import User
 from django.core.cache import cache
 from django.core.management import call_command
 from django.core.urlresolvers import reverse
 from django.db import connections, DEFAULT_DB_ALIAS
+from django.http import HttpRequest
 from django.test import TestCase, TransactionTestCase
 from django.test.client import Client
+from django.utils.importlib import import_module
 
-from sentry.models import Project, ProjectOption, Option
-from sentry.utils import cached_property
-
-
-fixture = cached_property
+from sentry.models import Project, ProjectOption, Option, Team
 
 
 class Settings(object):
@@ -75,10 +74,59 @@ class BaseTestCase(object):
 
     @fixture
     def projectkey(self):
-        user = User.objects.create(username='coreapi')
-        project = Project.objects.create(owner=user, name='Foo', slug='bar')
-        project.team.member_set.get_or_create(user=user)[0]
-        return project.key_set.get_or_create(user=user)[0]
+        return self.project.key_set.get_or_create(user=self.user)[0]
+
+    @fixture
+    def user(self):
+        user = User(username="admin", email="admin@localhost", is_staff=True, is_superuser=True)
+        user.set_password('admin')
+        user.save()
+        return user
+
+    @fixture
+    def team(self):
+        return Team.objects.create(
+            name='foo',
+            slug='foo',
+            owner=self.user,
+        )
+
+    @fixture
+    def project(self):
+        return Project.objects.create(
+            owner=self.user,
+            name='Bar',
+            slug='bar',
+            team=self.team,
+        )
+
+    def login_as(self, user):
+        user.backend = django_settings.AUTHENTICATION_BACKENDS[0]
+
+        engine = import_module(django_settings.SESSION_ENGINE)
+
+        request = HttpRequest()
+        if self.client.session:
+            request.session = self.client.session
+        else:
+            request.session = engine.SessionStore()
+
+        login(request, user)
+
+        # Save the session values.
+        request.session.save()
+
+        # Set the cookie to represent the session.
+        session_cookie = django_settings.SESSION_COOKIE_NAME
+        self.client.cookies[session_cookie] = request.session.session_key
+        cookie_data = {
+            'max-age': None,
+            'path': '/',
+            'domain': django_settings.SESSION_COOKIE_DOMAIN,
+            'secure': django_settings.SESSION_COOKIE_SECURE or None,
+            'expires': None,
+        }
+        self.client.cookies[session_cookie].update(cookie_data)
 
     def _pre_setup(self):
         cache.clear()
diff --git a/src/sentry/web/frontend/projects.py b/src/sentry/web/frontend/projects.py
index ffa2d6eb68..58ad438c12 100644
--- a/src/sentry/web/frontend/projects.py
+++ b/src/sentry/web/frontend/projects.py
@@ -186,17 +186,22 @@ def manage_project_team(request, project):
     if result is False and not request.user.has_perm('sentry.can_change_project'):
         return HttpResponseRedirect(reverse('sentry'))
 
-    if not project.team:
+    team = project.team
+
+    if not team:
         member_list = []
+        pending_member_list = []
     else:
-        member_list = [(tm, tm.user) for tm in project.team.member_set.select_related('user')]
+        member_list = [(tm, tm.user) for tm in team.member_set.select_related('user')]
+        pending_member_list = [(pm, pm.email) for pm in team.pending_member_set.all().order_by('email')]
 
     context = csrf(request)
     context.update({
         'page': 'team',
         'project': project,
-        'team': project.team,
+        'team': team,
         'member_list': member_list,
+        'pending_member_list': pending_member_list,
         'can_add_member': can_add_team_member(request.user, project.team),
     })
 
diff --git a/tests/sentry/web/frontend/projects/tests.py b/tests/sentry/web/frontend/projects/tests.py
index 813c4c561d..181f20933c 100644
--- a/tests/sentry/web/frontend/projects/tests.py
+++ b/tests/sentry/web/frontend/projects/tests.py
@@ -4,42 +4,41 @@ from __future__ import absolute_import
 
 import logging
 
-from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
 
 from sentry.constants import MEMBER_OWNER
-from sentry.models import Project, Team
-from sentry.testutils import fixture
-from sentry.testutils import TestCase
+from sentry.models import Project
+from sentry.testutils import TestCase, fixture
 
 logger = logging.getLogger(__name__)
 
 
 class NewProjectTest(TestCase):
-    fixtures = ['tests/fixtures/views.json']
-
     @fixture
-    def user(self):
-        user = User(username="admin", email="admin@localhost", is_staff=True, is_superuser=True)
-        user.set_password('admin')
-        user.save()
-        return user
+    def path(self):
+        return reverse('sentry-new-team-project', args=[self.team.slug])
 
-    @fixture
-    def team(self):
-        return Team.objects.create(name='foo', slug='foo', owner=self.user)
+    def test_unauthenticated_does_redirect(self):
+        resp = self.client.get(self.path)
+        self.assertEquals(resp.status_code, 302)
+
+    def test_does_load(self):
+        self.login_as(self.user)
 
-    def test_new_project(self):
-        path = reverse('sentry-new-team-project', args=[self.team.slug])
+        resp = self.client.get(self.path)
+        self.assertEquals(resp.status_code, 200)
+        self.assertTemplateUsed('sentry/projects/new.html')
 
-        self.client.login(username='admin', password='admin')
+    def test_missing_name(self):
+        self.login_as(self.user)
 
-        # missing name
-        resp = self.client.post(path)
+        resp = self.client.post(self.path)
         self.assertEquals(resp.status_code, 200)
 
-        # valid params
-        resp = self.client.post(path, {
+    def test_valid_params(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, {
             'name': 'Test Project',
             'slug': 'test',
         })
@@ -58,3 +57,21 @@ class NewProjectTest(TestCase):
         member = member_set[0]
         self.assertEquals(member.user, self.user)
         self.assertEquals(member.type, MEMBER_OWNER)
+
+
+class ManageProjectTeamTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-manage-project-team', args=[self.project.id])
+
+    def test_unauthenticated_does_redirect(self):
+        resp = self.client.get(self.path)
+        self.assertEquals(resp.status_code, 302)
+
+    def test_renders_with_required_context(self):
+        self.login_as(self.user)
+
+        resp = self.client.get(self.path)
+        self.assertEquals(resp.status_code, 200)
+        self.assertTemplateUsed('sentry/projects/team.html')
+        self.assertIn('pending_member_list', resp.context)
