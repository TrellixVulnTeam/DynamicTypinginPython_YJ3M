commit 2973b95c182b778b8e7a4188a63f45a3bb057ff9
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu May 23 17:36:07 2019 -0700

    feat(events-v2): Add better styling to events table (#13376)
    
    Also moves the hardcoded data that drives the 3 events views into a
    separate file.

diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx
new file mode 100644
index 0000000000..bf8ed74d2e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx
@@ -0,0 +1,93 @@
+import React from 'react';
+
+import {deepFreeze} from 'app/utils';
+import DynamicWrapper from 'app/components/dynamicWrapper';
+import Link from 'app/components/links/link';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
+import {getUtcDateString} from 'app/utils/dates';
+
+export const ALL_VIEWS = deepFreeze([
+  {
+    id: 'all',
+    name: 'All Events',
+    data: {
+      query: '',
+      fields: ['event', 'event.type', 'project.name', 'user', 'time'],
+      groupBy: [],
+      aggregations: [],
+      sort: '',
+    },
+    tags: [
+      'event.type',
+      'release',
+      'project.name',
+      'user.email',
+      'user.ip',
+      'environment',
+    ],
+  },
+  {
+    id: 'errors',
+    name: 'Errors',
+    data: {
+      query: '',
+      fields: ['project.name', 'fingerprint', 'count', 'user_count'],
+      groupBy: ['count', 'user_count', 'project.name'],
+      aggregations: [['count', null, 'count'], ['count', 'user', 'user_count']],
+      sort: '',
+    },
+    tags: ['error.type', 'project.name'],
+  },
+  {
+    id: 'csp',
+    name: 'CSP',
+    data: {
+      query: '',
+      fields: ['project.name', 'count', 'user_count'],
+      groupBy: ['count', 'user_count', 'project.name'],
+      aggregations: [['count', null, 'count'], ['count', 'user', 'user_count']],
+      sort: '',
+    },
+    tags: [
+      'project.name',
+      'blocked-uri',
+      'browser.name',
+      'os.name',
+      'effective-directive',
+    ],
+  },
+]);
+
+/**
+ * "Special fields" do not map 1:1 to an single column in the event database,
+ * they are a UI concept that combines the results of multiple fields and
+ * displays with a custom render function.
+ */
+export const SPECIAL_FIELDS = {
+  event: {
+    fields: ['title', 'id', 'project.name'],
+    renderFunc: (data, org) => (
+      <Link
+        css={overflowEllipsis}
+        to={`/organizations/${org.slug}/projects/${data['project.name']}/events/${
+          data.id
+        }/`}
+      >
+        {data.title}
+      </Link>
+    ),
+  },
+  user: {
+    fields: ['user.email', 'user.ip'],
+    renderFunc: data => data['user.email'] || data['user.ip'],
+  },
+  time: {
+    fields: ['time'],
+    renderFunc: data => (
+      <DynamicWrapper
+        value={<span css={overflowEllipsis}>{getUtcDateString(data)}</span>}
+        fixed="time"
+      />
+    ),
+  },
+};
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/index.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/index.jsx
index 8eb7f3eca8..8e814132f2 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/index.jsx
@@ -13,7 +13,8 @@ import ListLink from 'app/components/links/listLink';
 import NoProjectMessage from 'app/components/noProjectMessage';
 
 import Events from './events';
-import {ALL_VIEWS, getCurrentView} from './utils';
+import {ALL_VIEWS} from './data';
+import {getCurrentView} from './utils';
 
 export default class OrganizationEventsV2 extends React.Component {
   static propTypes = {
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx
index 97fd1434d5..1498c23457 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx
@@ -8,8 +8,9 @@ import LoadingIndicator from 'app/components/loadingIndicator';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import {t} from 'app/locale';
+import space from 'app/styles/space';
 
-import {SPECIAL_FIELDS} from './utils';
+import {SPECIAL_FIELDS} from './data';
 
 export default class Table extends React.Component {
   static propTypes = {
@@ -39,11 +40,11 @@ export default class Table extends React.Component {
       <Row key={idx} className={getGridStyle(fields.length)}>
         {fields.map(field => (
           <Cell key={field}>
-            <Data>
-              {SPECIAL_FIELDS.hasOwnProperty(field)
-                ? SPECIAL_FIELDS[field].renderFunc(row, organization)
-                : row[field]}
-            </Data>
+            {SPECIAL_FIELDS.hasOwnProperty(field) ? (
+              SPECIAL_FIELDS[field].renderFunc(row, organization)
+            ) : (
+              <Data>{row[field]}</Data>
+            )}
           </Cell>
         ))}
       </Row>
@@ -70,6 +71,7 @@ function getGridStyle(colCount) {
   return css`
     display: grid;
     grid-template-columns: 3fr repeat(${colCount - 1}, 1fr);
+    grid-gap: ${space(1)};
   `;
 }
 
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
index 503384163b..082c9d2f23 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
@@ -1,83 +1,4 @@
-import React from 'react';
-
-import {deepFreeze} from 'app/utils';
-import Link from 'app/components/links/link';
-
-export const ALL_VIEWS = deepFreeze([
-  {
-    id: 'all',
-    name: 'All Events',
-    data: {
-      query: '',
-      fields: ['event', 'event.type', 'project.name', 'user', 'time'],
-      groupBy: [],
-      aggregations: [],
-      sort: '',
-    },
-    tags: [
-      'event.type',
-      'release',
-      'project.name',
-      'user.email',
-      'user.ip',
-      'environment',
-    ],
-  },
-  {
-    id: 'errors',
-    name: 'Errors',
-    data: {
-      query: '',
-      fields: ['project.name', 'fingerprint', 'count', 'user_count'],
-      groupBy: ['count', 'user_count', 'project.name'],
-      aggregations: [['count', null, 'count'], ['count', 'user', 'user_count']],
-      sort: '',
-    },
-    tags: ['error.type', 'project.name'],
-  },
-  {
-    id: 'csp',
-    name: 'CSP',
-    data: {
-      query: '',
-      fields: ['project.name', 'count', 'user_count'],
-      groupBy: ['count', 'user_count', 'project.name'],
-      aggregations: [['count', null, 'count'], ['count', 'user', 'user_count']],
-      sort: '',
-    },
-    tags: [
-      'project.name',
-      'blocked-uri',
-      'browser.name',
-      'os.name',
-      'effective-directive',
-    ],
-  },
-]);
-
-/**
- * "Special fields" do not map 1:1 to an single column in the event database,
- * they are a UI concept that combines the results of multiple fields and
- * displays with a custom render function.
- */
-export const SPECIAL_FIELDS = {
-  event: {
-    fields: ['title', 'id', 'project.name'],
-    renderFunc: (data, org) => (
-      <Link
-        to={`/organizations/${org.slug}/projects/${data['project.name']}/events/${
-          data.id
-        }/`}
-      >
-        {data.title}
-      </Link>
-    ),
-  },
-  user: {
-    fields: ['user.email', 'user.ip'],
-    renderFunc: data => data['user.email'] || data['user.ip'],
-  },
-};
+import {ALL_VIEWS, SPECIAL_FIELDS} from './data';
 
 /**
  * Given a view id, return the corresponding view object
diff --git a/tests/js/spec/views/organizationEventsV2/utils.spec.jsx b/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
index f8f61cbac1..518da3bfa8 100644
--- a/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
@@ -1,4 +1,5 @@
-import {ALL_VIEWS, getCurrentView, getQuery} from 'app/views/organizationEventsV2/utils';
+import {getCurrentView, getQuery} from 'app/views/organizationEventsV2/utils';
+import {ALL_VIEWS} from 'app/views/organizationEventsV2/data';
 
 describe('getCurrentView()', function() {
   it('returns current view', function() {
