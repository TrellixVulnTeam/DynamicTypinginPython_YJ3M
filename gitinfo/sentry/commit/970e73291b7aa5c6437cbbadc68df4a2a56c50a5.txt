commit 970e73291b7aa5c6437cbbadc68df4a2a56c50a5
Author: josh <josh@jrl.ninja>
Date:   Thu Feb 20 19:03:50 2020 +0000

    ref(py3): various six.moves (#17124)

diff --git a/src/sentry/api/endpoints/chunk.py b/src/sentry/api/endpoints/chunk.py
index 54daec17b6..0d6eefe6ba 100644
--- a/src/sentry/api/endpoints/chunk.py
+++ b/src/sentry/api/endpoints/chunk.py
@@ -2,9 +2,9 @@ from __future__ import absolute_import
 
 import logging
 import six
+from six.moves import zip
 from io import BytesIO
 from gzip import GzipFile
-from itertools import izip
 from rest_framework import status
 from six.moves.urllib.parse import urljoin
 from rest_framework.response import Response
@@ -119,7 +119,7 @@ class ChunkUploadEndpoint(OrganizationEndpoint):
             return Response({"error": "Too many chunks"}, status=status.HTTP_400_BAD_REQUEST)
 
         try:
-            FileBlob.from_files(izip(files, checksums), organization=organization, logger=logger)
+            FileBlob.from_files(zip(files, checksums), organization=organization, logger=logger)
         except IOError as err:
             logger.info("chunkupload.end", extra={"status": status.HTTP_400_BAD_REQUEST})
             return Response({"error": six.text_type(err)}, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/api/endpoints/organization_member_unreleased_commits.py b/src/sentry/api/endpoints/organization_member_unreleased_commits.py
index 584dc4741a..ba5410d313 100644
--- a/src/sentry/api/endpoints/organization_member_unreleased_commits.py
+++ b/src/sentry/api/endpoints/organization_member_unreleased_commits.py
@@ -1,9 +1,9 @@
 from __future__ import absolute_import
 
 import six
+from six.moves import zip
 
 from django.db import connections
-from itertools import izip
 
 from sentry.api.bases import OrganizationMemberEndpoint
 from sentry.api.serializers import serialize
@@ -75,7 +75,7 @@ class OrganizationMemberUnreleasedCommitsEndpoint(OrganizationMemberEndpoint):
                     for c in results
                 ],
                 "repositories": {
-                    six.text_type(r.id): d for r, d in izip(repos, serialize(repos, request.user))
+                    six.text_type(r.id): d for r, d in zip(repos, serialize(repos, request.user))
                 },
             }
         )
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 160bc27467..b7c985b240 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -5,6 +5,8 @@ from collections import defaultdict
 from datetime import timedelta
 
 import six
+from six.moves import zip
+
 from django.conf import settings
 from django.db.models import Min, Q
 from django.utils import timezone
@@ -202,8 +204,7 @@ class GroupSerializerBase(Serializer):
                 )
             )
             commit_resolutions = {
-                i.group_id: d
-                for i, d in itertools.izip(commit_results, serialize(commit_results, user))
+                i.group_id: d for i, d in zip(commit_results, serialize(commit_results, user))
             }
         else:
             release_resolutions = {}
@@ -213,7 +214,7 @@ class GroupSerializerBase(Serializer):
         actor_ids.update(r.actor_id for r in six.itervalues(ignore_items))
         if actor_ids:
             users = list(User.objects.filter(id__in=actor_ids, is_active=True))
-            actors = {u.id: d for u, d in itertools.izip(users, serialize(users, user))}
+            actors = {u.id: d for u, d in zip(users, serialize(users, user))}
         else:
             actors = {}
 
diff --git a/src/sentry/api/serializers/models/grouptombstone.py b/src/sentry/api/serializers/models/grouptombstone.py
index 15b8686c41..5902d92be0 100644
--- a/src/sentry/api/serializers/models/grouptombstone.py
+++ b/src/sentry/api/serializers/models/grouptombstone.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
-from itertools import izip
 import six
+from six.moves import zip
 
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.constants import LOG_LEVELS
@@ -12,7 +12,7 @@ from sentry.models import GroupTombstone, User
 class GroupTombstoneSerializer(Serializer):
     def get_attrs(self, item_list, user):
         user_list = list(User.objects.filter(id__in=[item.actor_id for item in item_list]))
-        users = {u.id: d for u, d in izip(user_list, serialize(user_list, user))}
+        users = {u.id: d for u, d in zip(user_list, serialize(user_list, user))}
 
         attrs = {}
         for item in item_list:
diff --git a/src/sentry/api/serializers/models/release.py b/src/sentry/api/serializers/models/release.py
index 8bad4b29d6..9e5f2ab98b 100644
--- a/src/sentry/api/serializers/models/release.py
+++ b/src/sentry/api/serializers/models/release.py
@@ -1,10 +1,10 @@
 from __future__ import absolute_import
 
 import six
+from six.moves import zip
 
 from collections import defaultdict
 from django.db.models import Sum
-from itertools import izip
 
 from sentry import tagstore
 from sentry.api.serializers import Serializer, register, serialize
@@ -107,7 +107,7 @@ class ReleaseSerializer(Serializer):
         commit_ids = set((o.last_commit_id for o in item_list if o.last_commit_id))
         if commit_ids:
             commit_list = list(Commit.objects.filter(id__in=commit_ids).select_related("author"))
-            commits = {c.id: d for c, d in izip(commit_list, serialize(commit_list, user))}
+            commits = {c.id: d for c, d in zip(commit_list, serialize(commit_list, user))}
         else:
             commits = {}
 
@@ -143,7 +143,7 @@ class ReleaseSerializer(Serializer):
         deploy_ids = set((o.last_deploy_id for o in item_list if o.last_deploy_id))
         if deploy_ids:
             deploy_list = list(Deploy.objects.filter(id__in=deploy_ids))
-            deploys = {d.id: c for d, c in izip(deploy_list, serialize(deploy_list, user))}
+            deploys = {d.id: c for d, c in zip(deploy_list, serialize(deploy_list, user))}
         else:
             deploys = {}
 
diff --git a/src/sentry/grouping/enhancer.py b/src/sentry/grouping/enhancer.py
index 86030823ac..7a9653ec32 100644
--- a/src/sentry/grouping/enhancer.py
+++ b/src/sentry/grouping/enhancer.py
@@ -2,10 +2,10 @@ from __future__ import absolute_import
 
 import os
 import six
+from six.moves import zip
 import base64
 import msgpack
 import inspect
-from itertools import izip
 
 from parsimonious.grammar import Grammar, NodeVisitor
 from parsimonious.exceptions import ParseError
@@ -233,7 +233,7 @@ class FlagAction(Action):
 
         sliced_components = self._slice_to_range(components, idx)
         sliced_frames = self._slice_to_range(frames, idx)
-        for component, frame in izip(sliced_components, sliced_frames):
+        for component, frame in zip(sliced_components, sliced_frames):
             if self.key == "group" and self.flag != component.contributes:
                 component.update(
                     contributes=self.flag,
@@ -317,7 +317,7 @@ class Enhancements(object):
 
         # Apply direct frame actions and update the stack state alongside
         for rule in self.iter_rules():
-            for idx, (component, frame) in enumerate(izip(components, frames)):
+            for idx, (component, frame) in enumerate(zip(components, frames)):
                 actions = rule.get_matching_frame_actions(frame, platform)
                 for action in actions or ():
                     action.update_frame_components_contributions(components, frames, idx, rule=rule)
diff --git a/src/sentry/incidents/subscription_processor.py b/src/sentry/incidents/subscription_processor.py
index 8a51d20f37..547521aa5f 100644
--- a/src/sentry/incidents/subscription_processor.py
+++ b/src/sentry/incidents/subscription_processor.py
@@ -4,7 +4,7 @@ import logging
 import operator
 from copy import deepcopy
 from datetime import timedelta
-from itertools import izip
+from six.moves import zip
 
 from django.conf import settings
 from django.db import transaction
@@ -346,7 +346,7 @@ def partition(iterable, n):
     """
     assert len(iterable) % n == 0
     args = [iter(iterable)] * n
-    return izip(*args)
+    return zip(*args)
 
 
 def get_alert_rule_stats(alert_rule, subscription, triggers):
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 5952b31352..a05d92b196 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import, print_function
 
 import logging
 import six
-import urllib2
+from six.moves.urllib.error import HTTPError as UrllibHTTPError
 from six.moves.urllib.parse import urlparse, urlencode, urlunparse, parse_qs
 
 from django import forms
@@ -66,7 +66,7 @@ class NotificationPlugin(Plugin):
             return self.notify_users(
                 event.group, event, triggering_rules=[r.label for r in notification.rules]
             )
-        except (SSLError, HTTPError, ApiError, PluginError, urllib2.HTTPError) as err:
+        except (SSLError, HTTPError, ApiError, PluginError, UrllibHTTPError) as err:
             self.logger.info(
                 "notification-plugin.notify-failed",
                 extra={
diff --git a/src/sentry/tasks/reports.py b/src/sentry/tasks/reports.py
index 6a30d6345d..238b2bdadb 100644
--- a/src/sentry/tasks/reports.py
+++ b/src/sentry/tasks/reports.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 import bisect
 import functools
-import itertools
 import logging
 import math
 import operator
@@ -31,7 +30,7 @@ from sentry.utils.dates import floor_to_utc_day, to_datetime, to_timestamp
 from sentry.utils.email import MessageBuilder
 from sentry.utils.iterators import chunked
 from sentry.utils.math import mean
-from six.moves import reduce
+from six.moves import reduce, zip_longest
 
 
 date_format = functools.partial(dateformat.format, format_string="F jS, Y")
@@ -153,7 +152,7 @@ def merge_series(target, other, function=operator.add):
     """
     missing = object()
     results = []
-    for x, y in itertools.izip_longest(target, other, fillvalue=missing):
+    for x, y in zip_longest(target, other, fillvalue=missing):
         assert x is not missing and y is not missing, "series must be same length"
         assert x[0] == y[0], "series timestamps must match"
         results.append((x[0], function(x[1], y[1])))
diff --git a/src/sentry/utils/committers.py b/src/sentry/utils/committers.py
index 0e231c964e..a19a369b74 100644
--- a/src/sentry/utils/committers.py
+++ b/src/sentry/utils/committers.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import operator
 import six
+from six.moves import zip
 
 from sentry.api.serializers import serialize
 from sentry.models import Release, ReleaseCommit, Commit, CommitFileChange, Group
@@ -13,7 +14,6 @@ from sentry.utils.safe import get_path
 from django.db.models import Q
 from django.core.cache import cache
 
-from itertools import izip
 from collections import defaultdict
 from functools import reduce
 
@@ -32,7 +32,7 @@ def tokenize_path(path):
 
 def score_path_match_length(path_a, path_b):
     score = 0
-    for a, b in izip(tokenize_path(path_a), tokenize_path(path_b)):
+    for a, b in zip(tokenize_path(path_a), tokenize_path(path_b)):
         if a.lower() != b.lower():
             break
         score += 1
diff --git a/src/sentry/utils/concurrent.py b/src/sentry/utils/concurrent.py
index 3cf2f3bfe4..cad4459b48 100644
--- a/src/sentry/utils/concurrent.py
+++ b/src/sentry/utils/concurrent.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 import logging
 import sys
 import threading
-from Queue import Full, PriorityQueue
+from six.moves.queue import Full, PriorityQueue
 from concurrent.futures import Future
 from concurrent.futures._base import RUNNING, FINISHED
 from time import time
diff --git a/src/sentry/utils/iterators.py b/src/sentry/utils/iterators.py
index 23ad7be766..645ad348f5 100644
--- a/src/sentry/utils/iterators.py
+++ b/src/sentry/utils/iterators.py
@@ -2,6 +2,8 @@ from __future__ import absolute_import
 
 import itertools
 
+from six.moves import zip
+
 
 def advance(n, iterator):
     """Advances an iterator n places."""
@@ -16,7 +18,7 @@ def shingle(n, iterator):
     >>> list(shingle(2, ('foo', 'bar', 'baz')))
     [('foo', 'bar'), ('bar', 'baz')]
     """
-    return itertools.izip(
+    return zip(
         *map(
             lambda i__iterator: advance(i__iterator[0], i__iterator[1]),
             enumerate(itertools.tee(iterator, n)),
diff --git a/src/sentry/utils/threadpool.py b/src/sentry/utils/threadpool.py
index c781824b15..8bc8ea13ee 100644
--- a/src/sentry/utils/threadpool.py
+++ b/src/sentry/utils/threadpool.py
@@ -1,9 +1,9 @@
 from __future__ import absolute_import
 
 import six
+from six.moves.queue import Queue, Empty
 
 from collections import defaultdict
-from Queue import Queue, Empty
 from threading import Thread
 
 
diff --git a/src/sentry_plugins/phabricator/plugin.py b/src/sentry_plugins/phabricator/plugin.py
index ef38c051d5..6e877d3149 100644
--- a/src/sentry_plugins/phabricator/plugin.py
+++ b/src/sentry_plugins/phabricator/plugin.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import json
+
 from django.conf.urls import url
 from rest_framework.response import Response
 
@@ -8,12 +10,11 @@ from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint
 from sentry.utils.http import absolute_uri
 from sentry.integrations import FeatureDescription, IntegrationFeatures
 from six.moves.urllib.parse import urljoin
+from six.moves.http_client import HTTPException
 
 from sentry_plugins.base import CorePluginMixin
 from sentry_plugins.utils import get_secret_field_config
 
-import httplib
-import json
 import phabricator
 
 DESCRIPTION = """
@@ -175,7 +176,7 @@ class PhabricatorPlugin(CorePluginMixin, IssuePlugin2):
                 api.user.whoami()
             except phabricator.APIError as e:
                 raise PluginError("%s %s" % (e.code, e))
-            except httplib.HTTPException as e:
+            except HTTPException as e:
                 raise PluginError("Unable to reach Phabricator host: %s" % (e,))
             except Exception as e:
                 raise PluginError("Unhandled error from Phabricator: %s" % (e,))
@@ -233,7 +234,7 @@ class PhabricatorPlugin(CorePluginMixin, IssuePlugin2):
             )
         except phabricator.APIError as e:
             raise PluginError("%s %s" % (e.code, e))
-        except httplib.HTTPException as e:
+        except HTTPException as e:
             raise PluginError("Unable to reach Phabricator host: %s" % e)
 
         return data["id"]
diff --git a/tests/sentry/utils/test_concurrent.py b/tests/sentry/utils/test_concurrent.py
index abeb2c13d1..529b231aa8 100644
--- a/tests/sentry/utils/test_concurrent.py
+++ b/tests/sentry/utils/test_concurrent.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 import pytest
 import thread
-from Queue import Full
+from six.moves.queue import Full
 from concurrent.futures import CancelledError, Future
 from contextlib import contextmanager
 from threading import Event
