commit 724011229073d6cedd3717bbcbda562730dc986b
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jan 3 01:33:50 2012 -0800

    Initial work on views framework

diff --git a/sentry/commands/manage.py b/sentry/commands/manage.py
index 0e1893e3ac..dc18239da8 100644
--- a/sentry/commands/manage.py
+++ b/sentry/commands/manage.py
@@ -13,3 +13,13 @@ def manage(args):
     from django.core.management import ManagementUtility
     utility = ManagementUtility(args)
     utility.execute()
+
+
+def update_migrations():
+    """
+    Creates schemamigrations for sentry.
+    """
+    from django.core.management import ManagementUtility
+    args = 'manage.py schemamigration sentry --auto'.split(' ')
+    utility = ManagementUtility(args)
+    utility.execute()
diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index 4ea53df57a..8c2ad526fd 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -94,4 +94,11 @@ QUEUE = {
 
 # List of event handlers
 PROCESSORS = (
+)
+
+# List of event aggregation views
+VIEWS = (
+    # 'sentry.views.Exception',
+    # 'sentry.views.Message',
+    # 'sentry.views.Query',
 )
\ No newline at end of file
diff --git a/sentry/filters/base.py b/sentry/filters/base.py
index 3f9c95a234..51bc01eb55 100644
--- a/sentry/filters/base.py
+++ b/sentry/filters/base.py
@@ -79,7 +79,7 @@ class Filter(object):
         widget = self.get_widget()
         return widget.render(self.get_value())
 
-    objects = FilterInstanceManager(settings.FILTERS, instances=False)
+    handlers = FilterInstanceManager(settings.FILTERS, instances=False)
 
 
 class EventFilter(Filter):
diff --git a/sentry/migrations/0030_auto__add_view__chg_field_event_group.py b/sentry/migrations/0030_auto__add_view__chg_field_event_group.py
new file mode 100644
index 0000000000..cae2328bcf
--- /dev/null
+++ b/sentry/migrations/0030_auto__add_view__chg_field_event_group.py
@@ -0,0 +1,181 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+
+        # Adding model 'View'
+        db.create_table('sentry_view', (
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('path', self.gf('django.db.models.fields.CharField')(unique=True, max_length=100)),
+        ))
+        db.send_create_signal('sentry', ['View'])
+
+        # Adding M2M table for field views on 'Group'
+        db.create_table('sentry_groupedmessage_views', (
+            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
+            ('group', models.ForeignKey(orm['sentry.group'], null=False)),
+            ('view', models.ForeignKey(orm['sentry.view'], null=False))
+        ))
+        db.create_unique('sentry_groupedmessage_views', ['group_id', 'view_id'])
+
+
+    def backwards(self, orm):
+
+        # Deleting model 'View'
+        db.delete_table('sentry_view')
+
+        # Removing M2M table for field views on 'Group'
+        db.delete_table('sentry_groupedmessage_views')
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'sentry.event': {
+            'Meta': {'object_name': 'Event', 'db_table': "'sentry_message'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True', 'db_column': "'group'", 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'time_spent': ('django.db.models.fields.FloatField', [], {'null': 'True'})
+        },
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'logger', 'culprit', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
+            'views': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.View']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.project': {
+            'Meta': {'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'owned_project_set'", 'null': 'True', 'to': "orm['auth.User']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.projectdomain': {
+            'Meta': {'unique_together': "(('project', 'domain'),)", 'object_name': 'ProjectDomain'},
+            'domain': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'domain_set'", 'to': "orm['sentry.Project']"})
+        },
+        'sentry.projectmember': {
+            'Meta': {'unique_together': "(('project', 'user'),)", 'object_name': 'ProjectMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'project_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.projectoptions': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'ProjectOptions'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.view': {
+            'Meta': {'object_name': 'View'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/models.py b/sentry/models.py
index 59a5d1f246..e24ef26ab9 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -131,6 +131,10 @@ class ProjectDomain(Model):
         unique_together = (('project', 'domain'),)
 
 
+class View(Model):
+    path = models.CharField(max_length=100, unique=True)
+
+
 class MessageBase(Model):
     project = models.ForeignKey(Project, null=True)
     logger = models.CharField(max_length=64, blank=True, default='root', db_index=True)
@@ -163,6 +167,7 @@ class MessageBase(Model):
 
 
 class Group(MessageBase):
+    # if view is null it means its from the global aggregate
     status = models.PositiveIntegerField(default=0, choices=STATUS_LEVELS, db_index=True)
     times_seen = models.PositiveIntegerField(default=1, db_index=True)
     last_seen = models.DateTimeField(default=datetime.now, db_index=True)
@@ -170,6 +175,7 @@ class Group(MessageBase):
     time_spent_total = models.FloatField(default=0)
     time_spent_count = models.IntegerField(default=0)
     score = models.IntegerField(default=0)
+    views = models.ManyToManyField(View, blank=True)
 
     objects = GroupManager()
 
@@ -283,8 +289,8 @@ class Group(MessageBase):
 
 
 class Event(MessageBase):
-    event_id = models.CharField(max_length=32, null=True, unique=True, db_column="message_id")
     group = models.ForeignKey(Group, blank=True, null=True, related_name="event_set")
+    event_id = models.CharField(max_length=32, null=True, unique=True, db_column="message_id")
     datetime = models.DateTimeField(default=datetime.now, db_index=True)
     time_spent = models.FloatField(null=True)
     server_name = models.CharField(max_length=128, db_index=True, null=True)
@@ -355,7 +361,7 @@ class Event(MessageBase):
         return module, self.data['__sentry__']['version']
 
 
-class FilterValue(models.Model):
+class FilterValue(Model):
     """
     Stores references to available filters.
     """
@@ -370,7 +376,7 @@ class FilterValue(models.Model):
         return u'key=%s, value=%s' % (self.key, self.value)
 
 
-class MessageFilterValue(models.Model):
+class MessageFilterValue(Model):
     """
     Stores the total number of messages seen by a group matching
     the given filter.
@@ -425,7 +431,7 @@ def register_indexes():
     """
     from sentry.filters import Filter
     logger = logging.getLogger('sentry.setup')
-    for cls in (f for f in Filter.objects.all() if f.column.startswith('data__')):
+    for cls in (f for f in Filter.handlers.all() if f.column.startswith('data__')):
         MessageIndex.objects.register_index(cls.column, index_to='group')
         logger.debug('Registered index for for %r' % cls.column)
 register_indexes()
diff --git a/sentry/processors/base.py b/sentry/processors/base.py
index e0f9cf89fe..5755499bef 100644
--- a/sentry/processors/base.py
+++ b/sentry/processors/base.py
@@ -8,7 +8,7 @@ sentry.processors.base
 from sentry.conf import settings
 from sentry.utils import InstanceManager
 
-__all__ = ('Processor',)
+__all__ = ('Processor', 'post_save_processors')
 
 
 class Processor(object):
diff --git a/sentry/scripts/runner.py b/sentry/scripts/runner.py
index f72401b6ec..f95c5205cf 100644
--- a/sentry/scripts/runner.py
+++ b/sentry/scripts/runner.py
@@ -19,7 +19,18 @@ from optparse import OptionParser
 from sentry import VERSION, environment, commands
 
 
-ALL_COMMANDS = ('start', 'stop', 'restart', 'cleanup', 'upgrade', 'manage', 'init')
+ALL_COMMANDS = (
+    # General use commands
+    'init',
+    'upgrade',
+    'start',
+    'stop',
+    'restart',
+    'cleanup',
+
+    # These should probably be hidden by default
+    'manage',
+)
 
 KEY_LENGTH = 40
 
diff --git a/sentry/services/udp.py b/sentry/services/udp.py
index 5a5f9de1a3..bd9c71e29f 100644
--- a/sentry/services/udp.py
+++ b/sentry/services/udp.py
@@ -16,6 +16,7 @@ class SentryUDPServer(Service):
 
         self.host = host or settings.UDP_HOST
         self.port = port or settings.UDP_PORT
+
     def handle(self, data, address):
         from sentry.utils.auth import parse_auth_header
         from sentry.coreapi import (project_from_auth_vars, decode_and_decompress_data, safely_load_json_string,
@@ -37,7 +38,7 @@ class SentryUDPServer(Service):
         except APIError, error:
             logger.error('bad message from %s: %s' % (address, error.msg))
             return error
-       
+
     def run(self):
         from eventlet.green import socket
 
diff --git a/sentry/templates/sentry/partial/_event.html b/sentry/templates/sentry/partial/_event.html
index 89e3706468..7ef0181d5a 100644
--- a/sentry/templates/sentry/partial/_event.html
+++ b/sentry/templates/sentry/partial/_event.html
@@ -1,7 +1,7 @@
 {% load sentry_helpers %}
 
 <li class="{% cycle 'row1' 'row2' %} level-{{ event.level }}{% if priority %} priority-{{ priority }}{% endif %}" id="message_{{ event.pk|safe }}">
-    <h3><a href="{% url sentry-group-event event.project_id event.group_id event.pk %}">{% if event.view %}{{ event.view }}{% else %}{{ event.message_top|truncatechars:100 }}{% endif %}</a></h3>
+    <h3><a href="{% url sentry-group-event event.project_id group.pk event.pk %}">{% if event.view %}{{ event.view }}{% else %}{{ event.message_top|truncatechars:100 }}{% endif %}</a></h3>
     <span class="last_seen">{{ event.datetime|timesince }}</span>
     {% if event.time_spent %}
         <span class="time_spent">{{ event.time_spent|duration }}</span>
@@ -18,6 +18,6 @@
         {% for tag in event|get_tags:request %}<span class="tag">{{ tag }}</span> {% endfor %}
         {{ event.error }}
     </p>
-    <a href="{% url sentry-group-event event.project_id event.group_id event.pk %}" class="row_link"></a>
+    <a href="{% url sentry-group-event event.project_id group.pk event.pk %}" class="row_link"></a>
 </li>
 
diff --git a/sentry/utils/__init__.py b/sentry/utils/__init__.py
index e950f713b5..1e4e77048e 100644
--- a/sentry/utils/__init__.py
+++ b/sentry/utils/__init__.py
@@ -34,6 +34,7 @@ class InstanceManager(object):
         Returns a list of cached instances.
         """
         if not self.class_list:
+            self.cache = []
             return []
 
         if self.cache is not None:
diff --git a/sentry/utils/manager.py b/sentry/utils/manager.py
index 40746828cb..0107dbf4ad 100644
--- a/sentry/utils/manager.py
+++ b/sentry/utils/manager.py
@@ -209,7 +209,11 @@ class GroupManager(models.Manager, ChartMixin):
         return result
 
     def from_kwargs(self, project, **kwargs):
-        from sentry.models import Event, FilterValue, Project
+        # TODO: this function is way too damn long and needs refactored
+        # the inner imports also suck so let's try to move it away from
+        # the objects manager
+        from sentry.models import Event, Project, View
+        from sentry.views import View as ViewHandler
 
         project = Project.objects.get(pk=project)
 
@@ -264,125 +268,168 @@ class GroupManager(models.Manager, ChartMixin):
             'message': message,
         }
 
-        mail = False
+        event = Event(
+            project=project,
+            event_id=event_id,
+            culprit=culprit,
+            logger=logger_name,
+            data=data,
+            server_name=server_name,
+            site=site,
+            checksum=checksum,
+            time_spent=time_spent,
+            datetime=date,
+            **kwargs
+        )
+
+        group_kwargs = kwargs.copy()
+        group_kwargs.update({
+            'last_seen': date,
+            'first_seen': date,
+            'time_spent_total': time_spent or 0,
+            'time_spent_count': time_spent and 1 or 0,
+        })
+
+        views = set()
+        for viewhandler in ViewHandler.handlers.all():
+            try:
+                if not viewhandler.should_store(event):
+                    continue
+
+                path = '%s.%s' % (viewhandler.__module__, viewhandler.__name__)
+
+                if not viewhandler.ref:
+                    # TODO: this should handle race conditions
+                    viewhandler.ref = View.objects.get_or_create(path=path)
+
+                views.add(viewhandler.ref)
+
+            except Exception, exc:
+                # TODO: should we mail admins when there are failures?
+                try:
+                    logger.exception(exc)
+                except Exception, exc:
+                    warnings.warn(exc)
+
         try:
-            group_kwargs = kwargs.copy()
-            group_kwargs.update({
-                'last_seen': date,
-                'first_seen': date,
-                'time_spent_total': time_spent or 0,
-                'time_spent_count': time_spent and 1 or 0,
-            })
+            group, is_new, is_sample = self._create_group(event, **group_kwargs)
+        except Exception, exc:
+            # TODO: should we mail admins when there are failures?
+            try:
+                logger.exception(u'Unable to process log entry: %s' % (exc,))
+            except Exception, exc:
+                warnings.warn(u'Unable to process log entry: %s' % (exc,))
 
-            group, created = self.get_or_create(
-                project=project,
-                culprit=culprit,
-                logger=logger_name,
-                checksum=checksum,
-                defaults=group_kwargs
-            )
-            if not created:
-                # HACK: maintain appeared state
-                if group.status == 1:
-                    mail = True
-                silence_timedelta = date - group.last_seen
-                silence = silence_timedelta.days * 86400 + silence_timedelta.seconds
-                update_kwargs = {
-                    'status': 0,
-                    'last_seen': date,
-                    'times_seen': F('times_seen') + 1,
-                    'score': ScoreClause(group),
-                }
-                if time_spent:
-                    update_kwargs.update({
-                        'time_spent_total': F('time_spent_total') + time_spent,
-                        'time_spent_count': F('time_spent_count') + 1,
-                    })
-                group.update(**update_kwargs)
-            else:
-                group.update(score=ScoreClause(group))
-                silence = 0
-                mail = True
-
-            instance = Event(
-                project=project,
-                event_id=event_id,
-                culprit=culprit,
-                logger=logger_name,
-                data=data,
-                server_name=server_name,
-                site=site,
-                checksum=checksum,
-                group=group,
-                time_spent=time_spent,
-                datetime=date,
-                **kwargs
-            )
+            return
 
-            if not settings.SAMPLE_DATA or group.times_seen % min(count_limit(group.times_seen), time_limit(silence)) == 0:
-                instance.save()
+        event.group = group
 
-            # rounded down to the nearest interval
-            if settings.MINUTE_NORMALIZATION:
-                minutes = (date.minute - (date.minute % settings.MINUTE_NORMALIZATION))
-            else:
-                minutes = date.minute
-            normalized_datetime = date.replace(second=0, microsecond=0, minute=minutes)
+        for view in views:
+            group.views.add(view)
 
+        # save the event unless its been sampled
+        if not is_sample:
+            event.save()
+
+        # TODO: this should be moved into the processor framework
+        if is_new and should_mail(group):
+            regression_signal.send(sender=self.model, instance=group)
+            group.mail_admins()
+
+        return event
+
+    def _create_group(self, event, **kwargs):
+        from sentry.models import FilterValue, STATUS_RESOLVED
+
+        date = event.datetime
+        time_spent = event.time_spent
+        project = event.project
+
+        group, is_new = self.get_or_create(
+            project=project,
+            culprit=event.culprit,
+            logger=event.logger,
+            checksum=event.checksum,
+            defaults=kwargs
+        )
+        if not is_new:
+            if group.status == STATUS_RESOLVED:
+                # Group has changed from resolved -> unresolved
+                is_new = True
+            silence_timedelta = date - group.last_seen
+            silence = silence_timedelta.days * 86400 + silence_timedelta.seconds
             update_kwargs = {
+                'status': 0,
+                'last_seen': date,
                 'times_seen': F('times_seen') + 1,
+                'score': ScoreClause(group),
             }
             if time_spent:
                 update_kwargs.update({
                     'time_spent_total': F('time_spent_total') + time_spent,
                     'time_spent_count': F('time_spent_count') + 1,
                 })
+            group.update(**update_kwargs)
+        else:
+            group.update(score=ScoreClause(group))
+            silence = 0
 
-            affected = group.messagecountbyminute_set.filter(date=normalized_datetime).update(**update_kwargs)
-            if not affected:
-                group.messagecountbyminute_set.create(
-                    project=project,
-                    date=normalized_datetime,
-                    times_seen=1,
-                    time_spent_total=time_spent or 0,
-                    time_spent_count=time_spent and 1 or 0,
-                )
+        # Determine if we've sampled enough data to store this event
+        if not settings.SAMPLE_DATA or group.times_seen % min(count_limit(group.times_seen), time_limit(silence)) == 0:
+            is_sample = False
+        else:
+            is_sample = True
 
-            for key, value in (
-                    ('server_name', server_name),
-                    ('site', site),
-                    ('logger', logger_name),
-                ):
-                if not value:
-                    continue
+        # Rounded down to the nearest interval
+        if settings.MINUTE_NORMALIZATION:
+            minutes = (date.minute - (date.minute % settings.MINUTE_NORMALIZATION))
+        else:
+            minutes = date.minute
+        normalized_datetime = date.replace(second=0, microsecond=0, minute=minutes)
+
+        update_kwargs = {
+            'times_seen': F('times_seen') + 1,
+        }
+        if time_spent:
+            update_kwargs.update({
+                'time_spent_total': F('time_spent_total') + time_spent,
+                'time_spent_count': F('time_spent_count') + 1,
+            })
+
+        affected = group.messagecountbyminute_set.filter(date=normalized_datetime).update(**update_kwargs)
+        if not affected:
+            group.messagecountbyminute_set.create(
+                project=project,
+                date=normalized_datetime,
+                times_seen=1,
+                time_spent_total=time_spent or 0,
+                time_spent_count=time_spent and 1 or 0,
+            )
+
+        for key, value in (
+                ('server_name', event.server_name),
+                ('site', event.site),
+                ('logger', event.logger),
+            ):
+            if not value:
+                continue
 
-                FilterValue.objects.get_or_create(
+            FilterValue.objects.get_or_create(
+                project=project,
+                key=key,
+                value=value,
+            )
+
+            affected = group.messagefiltervalue_set.filter(key=key, value=value).update(times_seen=F('times_seen') + 1)
+            if not affected:
+                group.messagefiltervalue_set.create(
                     project=project,
                     key=key,
                     value=value,
+                    times_seen=1,
                 )
 
-                affected = group.messagefiltervalue_set.filter(key=key, value=value).update(times_seen=F('times_seen') + 1)
-                if not affected:
-                    group.messagefiltervalue_set.create(
-                        project=project,
-                        key=key,
-                        value=value,
-                        times_seen=1,
-                    )
-
-        except Exception, exc:
-            # TODO: should we mail admins when there are failures?
-            try:
-                logger.exception(u'Unable to process log entry: %s' % (exc,))
-            except Exception, exc:
-                warnings.warn(u'Unable to process log entry: %s' % (exc,))
-        else:
-            if mail and should_mail(group):
-                regression_signal.send(sender=self.model, instance=group)
-                group.mail_admins()
-
-            return instance
+        return group, is_new, is_sample
 
     def get_by_natural_key(self, logger, culprit, checksum):
         return self.get(logger=logger, view=culprit, checksum=checksum)
diff --git a/sentry/views/__init__.py b/sentry/views/__init__.py
new file mode 100644
index 0000000000..db988c3fd3
--- /dev/null
+++ b/sentry/views/__init__.py
@@ -0,0 +1,12 @@
+"""
+sentry.views
+~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from .base import *
+from .exception import *
+from .message import *
+from .query import *
diff --git a/sentry/views/base.py b/sentry/views/base.py
new file mode 100644
index 0000000000..2924b7254a
--- /dev/null
+++ b/sentry/views/base.py
@@ -0,0 +1,23 @@
+"""
+sentry.views.base
+~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from sentry.conf import settings
+from sentry.utils import InstanceManager
+
+__all__ = ('View',)
+
+
+class View(object):
+    verbose_name = None
+    verbose_name_plural = None
+    ref = None  # we cache the actual object here
+
+    def should_store(self, event):
+        return False
+
+    handlers = InstanceManager(settings.VIEWS)
diff --git a/sentry/views/exception.py b/sentry/views/exception.py
new file mode 100644
index 0000000000..0cd773ea93
--- /dev/null
+++ b/sentry/views/exception.py
@@ -0,0 +1,20 @@
+"""
+sentry.views.exception
+~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from django.utils.translation import ugettext as _
+from .base import View
+
+__all__ = ('Exception',)
+
+
+class Exception(View):
+    verbose_name = _('exception')
+    verbose_name_plural = _('exceptions')
+
+    def should_store(self, event):
+        return 'sentry.interfaces.Exception' in event.interfaces
diff --git a/sentry/views/message.py b/sentry/views/message.py
new file mode 100644
index 0000000000..fd727c0e47
--- /dev/null
+++ b/sentry/views/message.py
@@ -0,0 +1,17 @@
+"""
+sentry.views.message
+~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from django.utils.translation import ugettext as _
+from .base import View
+
+__all__ = ('Message',)
+
+
+class Message(View):
+    verbose_name = _('message')
+    verbose_name_plural = _('messages')
diff --git a/sentry/views/query.py b/sentry/views/query.py
new file mode 100644
index 0000000000..1bdff4297c
--- /dev/null
+++ b/sentry/views/query.py
@@ -0,0 +1,17 @@
+"""
+sentry.views.query
+~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from django.utils.translation import ugettext as _
+from .base import View
+
+__all__ = ('Query',)
+
+
+class Query(View):
+    verbose_name = _('query')
+    verbose_name_plural = _('queries')
diff --git a/sentry/web/feeds.py b/sentry/web/feeds.py
index 5205019441..71fe83216f 100644
--- a/sentry/web/feeds.py
+++ b/sentry/web/feeds.py
@@ -13,6 +13,7 @@ from django.utils.translation import ugettext_lazy as _
 
 from sentry.models import Event, Group
 
+
 class MessageFeed(object):
     def __call__(self, request):
         feed_dict = {
@@ -40,7 +41,7 @@ class MessageFeed(object):
         return HttpResponse(feed.writeString('utf-8'), mimetype='application/xml')
 
     def get_title(self, request):
-        return _('log messages')
+        return _('events')
 
     def get_link(self, request):
         return reverse('sentry')
@@ -71,9 +72,10 @@ class MessageFeed(object):
     def get_item_date(self, request, obj):
         return obj.datetime
 
+
 class SummaryFeed(MessageFeed):
     def get_title(self, request):
-        return _('log summaries')
+        return _('events (aggregated)')
 
     def get_link(self, request):
         return reverse('sentry')
@@ -94,4 +96,4 @@ class SummaryFeed(MessageFeed):
         return reverse('sentry-group', args=[obj.pk])
 
     def get_item_date(self, request, obj):
-        return obj.last_seen
\ No newline at end of file
+        return obj.last_seen
diff --git a/sentry/web/frontend/events.py b/sentry/web/frontend/events.py
index 713035d7c7..0afdd57bf6 100644
--- a/sentry/web/frontend/events.py
+++ b/sentry/web/frontend/events.py
@@ -16,7 +16,7 @@ from sentry.web.forms import ReplayForm
 @has_access
 def event_list(request, project):
     filters = []
-    for cls in Filter.objects.filter(Event):
+    for cls in Filter.handlers.filter(Event):
         filters.append(cls(request))
 
     try:
diff --git a/sentry/web/frontend/groups.py b/sentry/web/frontend/groups.py
index c0637afd3b..2ae7d3d8ab 100644
--- a/sentry/web/frontend/groups.py
+++ b/sentry/web/frontend/groups.py
@@ -44,7 +44,7 @@ def ajax_handler(request, project):
 
     def poll(request, project):
         filters = []
-        for cls in Filter.objects.filter(Group):
+        for cls in Filter.handlers.filter(Group):
             filters.append(cls(request))
 
         offset = 0
@@ -223,7 +223,7 @@ def search(request, project):
 @has_access
 def group_list(request, project):
     filters = []
-    for cls in Filter.objects.filter(Group):
+    for cls in Filter.handlers.filter(Group):
         filters.append(cls(request))
 
     try:
@@ -298,7 +298,7 @@ def group_json(request, project, group_id):
     except IndexError:
         # It's possible that a message would not be created under certain circumstances
         # (such as a post_save signal failing)
-        event = Event(group=group)
+        event = Event()
 
     # We use a SortedDict to keep elements ordered for the JSON serializer
     data = SortedDict()
diff --git a/tests/processors/tests.py b/tests/processors/tests.py
index f26c3d6fab..9ff4170607 100644
--- a/tests/processors/tests.py
+++ b/tests/processors/tests.py
@@ -14,14 +14,14 @@ from . import processor
 class SentryProcessorsTest(TestCase):
     def setUp(self):
         self.orig_processors = settings.PROCESSORS
-        Processor.objects.update((
+        Processor.handlers.update((
             'tests.processors.processor.TestProcessor',
         ))
         processor.CALLED = 0
 
     def tearDown(self):
         settings.PROCESSORS = self.orig_processors
-        Processor.objects.update(settings.PROCESSORS)
+        Processor.handlers.update(settings.PROCESSORS)
 
     def create_event(self):
         kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
@@ -30,21 +30,16 @@ class SentryProcessorsTest(TestCase):
 
     def test_processors_cache(self):
         # TODO: move these tests to base instance manager tests
-        self.assertEqual(Processor.objects.cache, None)
+        self.assertEqual(Processor.handlers.cache, None)
 
         # ensure cache gets updated after all() is called
-        self.assertEqual(len(Processor.objects.all()), 1)
-        self.assertEqual(len(Processor.objects.cache), 1)
-
-        Processor.objects.cache = None
-
-        # ensure cache gets updated after create event
-        self.create_event()
-        self.assertEqual(len(Processor.objects.cache), 1)
+        self.assertEqual(len(Processor.handlers.all()), 1)
+        self.assertNotEqual(Processor.handlers.cache, None)
+        self.assertEqual(len(Processor.handlers.cache), 1)
 
     def test_processors_called(self):
         self.create_event()
         self.create_event()
-        proc_list = Processor.objects.all()
+        proc_list = Processor.handlers.all()
         self.assertEqual(len(proc_list), 1)
         self.assertEqual(proc_list[0].called, 2)
diff --git a/tests/views/__init__.py b/tests/views/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/views/tests.py b/tests/views/tests.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/web/tests.py b/tests/web/tests.py
index fd339dcd9e..ad65ec292b 100644
--- a/tests/web/tests.py
+++ b/tests/web/tests.py
@@ -251,7 +251,7 @@ class SentryFeedsTest(TestCase):
         self.assertEquals(response.status_code, 200)
         self.assertTrue(response.content.startswith('<?xml version="1.0" encoding="utf-8"?>'))
         self.assertTrue('<link>http://testserver/</link>' in response.content)
-        self.assertTrue('<title>log messages</title>' in response.content)
+        self.assertTrue('<title>events</title>' in response.content)
         self.assertTrue('<link>http://testserver/1/group/1</link>' in response.content, response.content)
         self.assertTrue('<title>exceptions must be old-style classes or derived from BaseException, not NoneType</title>' in response.content)
 
@@ -260,7 +260,7 @@ class SentryFeedsTest(TestCase):
         self.assertEquals(response.status_code, 200)
         self.assertTrue(response.content.startswith('<?xml version="1.0" encoding="utf-8"?>'))
         self.assertTrue('<link>http://testserver/</link>' in response.content)
-        self.assertTrue('<title>log summaries</title>' in response.content)
+        self.assertTrue('<title>events (aggregated)</title>' in response.content)
         self.assertTrue('<link>http://testserver/1/group/1</link>' in response.content, response.content)
         self.assertTrue('<title>(1) exceptions must be old-style classes or derived from BaseException, not NoneType</title>' in response.content)
 
