commit 70ded2c2892ad9815f72663f33b151f65095b107
Author: Dan Fuller <dfuller@sentry.io>
Date:   Wed Jan 23 17:43:50 2019 -0800

    feat(api): Include `latestRelease` field in `ProjectSummarySerializer` (APP-935)
    
    Needed for release page tutorial, issue resolution,
    probably other things.

diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 63dd56be6a..4d8ab59159 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -296,7 +296,14 @@ class ProjectSummarySerializer(ProjectWithTeamSerializer):
                     'dateFinished': date_finished
                 }
 
+        latest_release_list = bulk_fetch_project_latest_releases(item_list)
+        latest_releases = {
+            r.actual_project_id: d
+            for r, d in zip(latest_release_list, serialize(latest_release_list, user))
+        }
+
         for item in item_list:
+            attrs[item]['latest_release'] = latest_releases.get(item.id)
             attrs[item]['deploys'] = deploys_by_project.get(item.id)
 
         return attrs
@@ -318,12 +325,43 @@ class ProjectSummarySerializer(ProjectWithTeamSerializer):
             'platform': obj.platform,
             'platforms': attrs['platforms'],
             'latestDeploys': attrs['deploys'],
+            'latestRelease': attrs['latest_release'],
         }
         if 'stats' in attrs:
             context['stats'] = attrs['stats']
         return context
 
 
+def bulk_fetch_project_latest_releases(projects):
+    """
+    Fetches the latest release for each of the passed projects
+    :param projects:
+    :return: List of Releases, each with an additional `actual_project_id`
+    attribute representing the project that they're the latest release for. If
+    no release found, no entry will be returned for the given project.
+    """
+    return list(Release.objects.raw(
+        u"""
+        SELECT lr.project_id as actual_project_id, r.*
+        FROM (
+            SELECT (
+                SELECT lrr.id
+                FROM sentry_release lrr
+                JOIN sentry_release_project lrp ON lrp.release_id = lrr.id
+                WHERE lrp.project_id = p.id
+                ORDER BY COALESCE(lrr.date_released, lrr.date_added) DESC
+                LIMIT 1
+            ) as release_id,
+            p.id as project_id
+            FROM sentry_project p
+            WHERE p.id IN ({})
+        ) as lr
+        JOIN sentry_release r
+        ON r.id = lr.release_id
+        """.format(', '.join(six.text_type(i.id) for i in projects), ),
+    ))
+
+
 class DetailedProjectSerializer(ProjectWithTeamSerializer):
     OPTION_KEYS = frozenset(
         [
@@ -370,31 +408,6 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
         for project_id, num_issues in num_issues_projects:
             processing_issues_by_project[project_id] = num_issues
 
-        latest_release_list = list(
-            Release.objects.raw(
-                u"""
-            SELECT lr.project_id as actual_project_id, r.*
-            FROM (
-                SELECT (
-                    SELECT lrr.id FROM sentry_release lrr
-                    JOIN sentry_release_project lrp
-                    ON lrp.release_id = lrr.id
-                    WHERE lrp.project_id = p.id
-                    ORDER BY COALESCE(lrr.date_released, lrr.date_added) DESC
-                    LIMIT 1
-                ) as release_id,
-                p.id as project_id
-                FROM sentry_project p
-                WHERE p.id IN ({})
-            ) as lr
-            JOIN sentry_release r
-            ON r.id = lr.release_id
-        """.format(
-                    ', '.join(six.text_type(i.id) for i in item_list),
-                )
-            )
-        )
-
         queryset = ProjectOption.objects.filter(
             project__in=item_list,
             key__in=self.OPTION_KEYS,
@@ -406,6 +419,7 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
         orgs = {d['id']: d for d in serialize(
             list(set(i.organization for i in item_list)), user)}
 
+        latest_release_list = bulk_fetch_project_latest_releases(item_list)
         latest_releases = {
             r.actual_project_id: d
             for r, d in zip(latest_release_list, serialize(latest_release_list, user))
@@ -429,8 +443,7 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
                      self).serialize(obj, attrs, user)
         data.update(
             {
-                'latestRelease':
-                attrs['latest_release'],
+                'latestRelease': attrs['latest_release'],
                 'options': {
                     'sentry:csp_ignored_sources_defaults':
                     bool(attrs['options'].get(
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 8989ae721a..748be7e034 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -333,13 +333,17 @@ class Fixtures(object):
         return project.key_set.get_or_create()[0]
 
     # TODO(maxbittker) make new fixtures less hardcoded
-    def create_release(self, project, user=None, version=None):
+    def create_release(self, project, user=None, version=None, date_added=None):
         if version is None:
             version = os.urandom(20).encode('hex')
 
+        if date_added is None:
+            date_added = timezone.now().replace(microsecond=0)
+
         release = Release.objects.create(
             version=version,
             organization_id=project.organization_id,
+            date_added=date_added,
         )
 
         release.add_project(project)
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index 3c6869a134..a527cde4c5 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -55,7 +55,7 @@ class OrganizationDetailsTest(APITestCase):
         )
         # TODO(dcramer): we need to pare this down -- lots of duplicate queries
         # for membership data
-        with self.assertNumQueries(33, using='default'):
+        with self.assertNumQueries(34, using='default'):
             from django.db import connections
             response = self.client.get(url, format='json')
             pprint(connections['default'].queries)
diff --git a/tests/sentry/api/serializers/test_project.py b/tests/sentry/api/serializers/test_project.py
index 972b3058dc..a1dd0957e8 100644
--- a/tests/sentry/api/serializers/test_project.py
+++ b/tests/sentry/api/serializers/test_project.py
@@ -2,15 +2,21 @@
 
 from __future__ import absolute_import
 
+from datetime import timedelta
+
 import six
 import datetime
 from django.utils import timezone
+from exam import fixture
 
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.project import (
-    ProjectWithOrganizationSerializer, ProjectWithTeamSerializer, ProjectSummarySerializer
+    bulk_fetch_project_latest_releases,
+    ProjectWithOrganizationSerializer,
+    ProjectWithTeamSerializer,
+    ProjectSummarySerializer,
 )
-from sentry.models import Deploy, Environment, Release, ReleaseProjectEnvironment
+from sentry.models import Deploy, Environment, ReleaseProjectEnvironment
 from sentry.testutils import TestCase
 
 
@@ -158,10 +164,7 @@ class ProjectSummarySerializerTest(TestCase):
         project.flags.has_releases = True
         project.save()
 
-        release = Release.objects.create(
-            organization_id=organization.id,
-            version='1',
-        )
+        release = self.create_release(project)
 
         environment = Environment.objects.create(
             organization_id=organization.id,
@@ -192,8 +195,9 @@ class ProjectSummarySerializerTest(TestCase):
         assert result['platform'] == project.platform
 
         assert result['latestDeploys'] == {
-            'production': {'dateFinished': date, 'version': '1'}
+            'production': {'dateFinished': date, 'version': release.version}
         }
+        assert result['latestRelease'] == serialize(release)
 
 
 class ProjectWithOrganizationSerializerTest(TestCase):
@@ -209,3 +213,56 @@ class ProjectWithOrganizationSerializerTest(TestCase):
         assert result['name'] == project.name
         assert result['id'] == six.text_type(project.id)
         assert result['organization'] == serialize(organization, user)
+
+
+class BulkFetchProjectLatestReleases(TestCase):
+    @fixture
+    def project(self):
+        return self.create_project(
+            teams=[self.team],
+            organization=self.organization,
+        )
+
+    @fixture
+    def other_project(self):
+        return self.create_project(
+            teams=[self.team],
+            organization=self.organization,
+        )
+
+    def test_single_no_release(self):
+        assert bulk_fetch_project_latest_releases([self.project]) == []
+
+    def test_single_release(self):
+        release = self.create_release(
+            self.project,
+            date_added=timezone.now() - timedelta(minutes=5),
+        )
+        assert bulk_fetch_project_latest_releases([self.project]) == [release]
+        newer_release = self.create_release(self.project)
+        assert bulk_fetch_project_latest_releases([self.project]) == [newer_release]
+
+    def test_multi_no_release(self):
+        assert bulk_fetch_project_latest_releases(
+            [self.project, self.other_project],
+        ) == []
+
+    def test_multi_mixed_releases(self):
+        release = self.create_release(self.project)
+        assert set(bulk_fetch_project_latest_releases(
+            [self.project, self.other_project],
+        )) == set([release])
+
+    def test_multi_releases(self):
+        release = self.create_release(
+            self.project,
+            date_added=timezone.now() - timedelta(minutes=5),
+        )
+        other_project_release = self.create_release(self.other_project)
+        assert set(bulk_fetch_project_latest_releases(
+            [self.project, self.other_project],
+        )) == set([release, other_project_release])
+        release_2 = self.create_release(self.project)
+        assert set(bulk_fetch_project_latest_releases(
+            [self.project, self.other_project],
+        )) == set([release_2, other_project_release])
