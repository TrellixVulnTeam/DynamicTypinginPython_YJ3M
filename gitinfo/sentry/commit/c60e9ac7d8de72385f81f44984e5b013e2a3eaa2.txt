commit c60e9ac7d8de72385f81f44984e5b013e2a3eaa2
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Wed Jul 12 11:31:35 2017 -0700

    Update doc string and don't type convert

diff --git a/src/sentry/api/endpoints/group_tombstone_details.py b/src/sentry/api/endpoints/group_tombstone_details.py
index 146c0c8c65..e7d7e1fb7e 100644
--- a/src/sentry/api/endpoints/group_tombstone_details.py
+++ b/src/sentry/api/endpoints/group_tombstone_details.py
@@ -19,7 +19,9 @@ class GroupTombstoneDetailsEndpoint(ProjectEndpoint):
         Undiscards a group such that new events in that group will be captured.
         This does not restore any previous data.
 
-        :pparam string issue_id: the ID of the issue to delete.
+        :pparam string organization_slug: the slug of the organization.
+        :pparam string project_slug: the slug of the project to which this tombstone belongs.
+        :pparam string issue_id: the ID of the tombstone to remove.
         :auth: required
         """
         GroupHash.objects.filter(
diff --git a/src/sentry/api/serializers/models/grouptombstone.py b/src/sentry/api/serializers/models/grouptombstone.py
index 72ad0d89c2..75ec25937c 100644
--- a/src/sentry/api/serializers/models/grouptombstone.py
+++ b/src/sentry/api/serializers/models/grouptombstone.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from itertools import izip
 import six
 
 from sentry.api.serializers import Serializer, register, serialize
@@ -13,21 +14,21 @@ from sentry.models import (
 class GroupTombstoneSerializer(Serializer):
 
     def get_attrs(self, item_list, user):
+        project_set = set(i.project for i in item_list)
         projects = {
-            d['id']: d
-            for d in serialize(set(i.project for i in item_list), user)
+            p.id: d for p, d in izip(project_set, serialize(project_set, user))
         }
+
         user_list = list(User.objects.filter(id__in=[item.actor_id for item in item_list]))
         users = {
-            d['id']: d
-            for d in serialize(user_list, user)
+            u.id: d for u, d in izip(user_list, serialize(user_list, user))
         }
 
         attrs = {}
         for item in item_list:
             attrs[item] = {
-                'project': projects.get(six.text_type(item.project_id), {}),
-                'user': users.get(six.text_type(item.actor_id), {}),
+                'project': projects.get(item.project_id, {}),
+                'user': users.get(item.actor_id, {}),
             }
         return attrs
 
