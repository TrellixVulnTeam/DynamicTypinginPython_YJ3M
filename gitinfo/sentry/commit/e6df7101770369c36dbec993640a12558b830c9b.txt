commit e6df7101770369c36dbec993640a12558b830c9b
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Tue Nov 26 17:47:12 2019 -0500

    feat(discover2): Sort the list of fields, tags, and aggregate functions in alphabetical order (#15819)

diff --git a/src/sentry/static/sentry/app/types/utils.tsx b/src/sentry/static/sentry/app/types/utils.tsx
new file mode 100644
index 0000000000..6cce4396e8
--- /dev/null
+++ b/src/sentry/static/sentry/app/types/utils.tsx
@@ -0,0 +1,8 @@
+// from:
+// - https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#assertion-functions
+// - https://www.typescriptlang.org/play/#example/assertion-functions
+
+// This declares a function which asserts that the expression called
+// value is true:
+// eslint-disable-next-line prettier/prettier
+export function assert(_value: unknown): asserts _value {}
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
index 13c6817ff3..c0c95c78d5 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
@@ -1,3 +1,5 @@
+import {assert} from 'app/types/utils';
+
 export type ColumnValueType =
   | '*' // Matches to everything
   | 'string'
@@ -9,12 +11,7 @@ export type ColumnValueType =
   | 'never'; // Matches to nothing
 
 // Refer to src/sentry/utils/snuba.py
-export const AGGREGATIONS: {
-  [key: string]: {
-    type: '*' | ColumnValueType[];
-    isSortable: boolean;
-  };
-} = {
+export const AGGREGATIONS = {
   count: {
     type: '*',
     isSortable: true,
@@ -55,7 +52,17 @@ export const AGGREGATIONS: {
     isSortable: true,
   },
   */
-};
+} as const;
+
+assert(AGGREGATIONS as Readonly<
+  {
+    [key in keyof typeof AGGREGATIONS]: {
+      type: '*' | Readonly<ColumnValueType[]>;
+      isSortable: boolean;
+    }
+  }
+>);
+
 export type Aggregation = keyof typeof AGGREGATIONS | '';
 
 // TODO(leedongwei)
@@ -64,7 +71,7 @@ export type Aggregation = keyof typeof AGGREGATIONS | '';
 /**
  * Refer to src/sentry/utils/snuba.py, search for SENTRY_SNUBA_MAP
  */
-export const FIELDS: {[key: string]: ColumnValueType} = {
+export const FIELDS = {
   id: 'string',
 
   title: 'string',
@@ -146,7 +153,9 @@ export const FIELDS: {[key: string]: ColumnValueType} = {
   p75: 'duration',
   p95: 'duration',
   p99: 'duration',
-};
+} as const;
+assert(FIELDS as Readonly<{[key in keyof typeof FIELDS]: ColumnValueType}>);
+
 export type Field = keyof typeof FIELDS | string | '';
 
 // This list should be removed with the tranaction-events feature flag.
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
index 1eab2a8fba..5bcac86890 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableModalEditColumn.tsx
@@ -230,6 +230,10 @@ function filterAggregationByField(organization: Organization, f?: Field): Aggreg
   if (!organization.features.includes('transaction-events')) {
     functionList = functionList.filter(item => !TRACING_FIELDS.includes(item));
   }
+
+  // sort list in ascending order
+  functionList.sort();
+
   if (!f) {
     return functionList as Aggregation[];
   }
@@ -240,7 +244,7 @@ function filterAggregationByField(organization: Organization, f?: Field): Aggreg
     return [];
   }
 
-  return functionList.reduce(
+  functionList = functionList.reduce(
     (accumulator, a) => {
       if (
         AGGREGATIONS[a].type.includes(fieldType) ||
@@ -254,6 +258,11 @@ function filterAggregationByField(organization: Organization, f?: Field): Aggreg
     },
     [] as Aggregation[]
   );
+
+  // sort list in ascending order
+  functionList.sort();
+
+  return functionList as Aggregation[];
 }
 
 function filterFieldByAggregation(
@@ -269,11 +278,14 @@ function filterFieldByAggregation(
     fieldList = fieldList.filter(item => !TRACING_FIELDS.includes(item));
   }
 
+  // sort list in ascending order
+  fieldList.sort();
+
   if (!a || !AGGREGATIONS[a]) {
     return fieldList as Field[];
   }
 
-  return fieldList.reduce(
+  fieldList = fieldList.reduce(
     (accumulator, f) => {
       // tag keys are all strings, and values not in FIELDS is a tag.
       const fieldType = FIELDS[f] || 'string';
@@ -293,6 +305,11 @@ function filterFieldByAggregation(
     },
     [] as Field[]
   );
+
+  // sort list in ascending order
+  fieldList.sort();
+
+  return fieldList;
 }
 
 const FormRow = styled('div')`
