commit ec4cdb32a29c8b6c58a9ae66a169550dd7bbaf3b
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Jun 8 22:33:20 2016 +0200

    Added basic support for exception mechanisms

diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 02dfe027d1..8b52302893 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -30,7 +30,8 @@ class SingleException(Interface):
     >>>  {
     >>>     "type": "ValueError",
     >>>     "value": "My exception value",
-    >>>     "module": "__builtins__"
+    >>>     "module": "__builtins__",
+    >>>     "mechanism": {},
     >>>     "stacktrace": {
     >>>         # see sentry.interfaces.Stacktrace
     >>>     }
@@ -73,10 +74,18 @@ class SingleException(Interface):
             value = json.dumps(value)
         value = trim(value, 4096)
 
+        mechanism = data.get('mechanism')
+        if mechanism is not None:
+            if not isinstance(mechanism, dict):
+                raise InterfaceValidationError('Bad value for mechanism')
+            mechanism = trim(data.get('mechanism'), 4096)
+            mechanism.setdefault('type', 'generic')
+
         kwargs = {
             'type': trim(type, 128),
             'value': value,
             'module': trim(data.get('module'), 128),
+            'mechanism': mechanism,
             'stacktrace': stacktrace,
             'raw_stacktrace': raw_stacktrace,
         }
@@ -154,7 +163,8 @@ class Exception(Interface):
     >>>     "values": [{
     >>>         "type": "ValueError",
     >>>         "value": "My exception value",
-    >>>         "module": "__builtins__"
+    >>>         "module": "__builtins__",
+    >>>         "mechanism": {},
     >>>         "stacktrace": {
     >>>             # see sentry.interfaces.Stacktrace
     >>>         }
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index b0b6b9b892..75d6d9fccf 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -26,21 +26,39 @@ def append_error(data, err):
 
 
 def exception_from_apple_error_or_diagnosis(error, diagnosis=None):
+    rv = {}
     error = error or {}
+    mechanism = {}
 
     if error:
         nsexception = error.get('nsexception')
         if nsexception:
-            return {
-                'type': nsexception['name'],
-                'value': error['reason'],
-            }
-
-    if diagnosis:
-        return {
-            'type': 'Error',
-            'value': diagnosis
-        }
+            rv['type'] = nsexception['name']
+            if 'value' in nsexception:
+                rv['value'] = nsexception['value']
+
+    if 'reason' in error and 'value' in rv:
+        rv['value'] = error['reason']
+    if 'diagnosis' in error and 'value' in rv:
+        rv['value'] = error['diagnosis']
+
+    if 'mach' in rv:
+        rv['mach_exception'] = rv['mach']
+    if 'signal' in rv:
+        rv['posix_signal'] = rv['signal']
+
+    if mechanism:
+        mechanism.setdefault('type', 'cocoa')
+        rv['mechanism'] = mechanism
+
+    if 'value' in rv and 'type' not in rv:
+        rv['type'] = \
+            error.get('mach', {}).get('exception_name') or \
+            error.get('signal', {}).get('name') or \
+            'Error'
+
+    if rv:
+        return rv
 
 
 def is_in_app(frame, app_uuid=None):
