commit d71edfeede6efb91c76f9f8846d3234b512ecc71
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon May 20 15:11:13 2019 -0700

    feat(api): Add API to mark Incident as seen [SEN-592] (#13271)
    
    Creates a new endpoint to mark an incident as seen. Update detailed Incident serializer to include list of users who have seen an Incident, as well as a bool for the user seeing the Incident.
    
    Fixes SEN-592

diff --git a/src/sentry/api/endpoints/organization_incident_details.py b/src/sentry/api/endpoints/organization_incident_details.py
index ab6eca0e41..ddf63b4039 100644
--- a/src/sentry/api/endpoints/organization_incident_details.py
+++ b/src/sentry/api/endpoints/organization_incident_details.py
@@ -50,6 +50,7 @@ class OrganizationIncidentDetailsEndpoint(IncidentEndpoint):
         serializer = IncidentSerializer(data=request.DATA)
         if serializer.is_valid():
             result = serializer.object
+
             try:
                 incident = update_incident_status(
                     incident=incident,
@@ -62,5 +63,7 @@ class OrganizationIncidentDetailsEndpoint(IncidentEndpoint):
                     'Status is already set to {}'.format(result['status']),
                     status=400,
                 )
-            return Response(serialize(incident, request.user), status=200)
+
+            return Response(serialize(incident, request.user,
+                                      DetailedIncidentSerializer()), status=200)
         return Response(serializer.errors, status=400)
diff --git a/src/sentry/api/endpoints/organization_incident_seen.py b/src/sentry/api/endpoints/organization_incident_seen.py
new file mode 100644
index 0000000000..868b51f30d
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_incident_seen.py
@@ -0,0 +1,26 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.bases.incident import (
+    IncidentEndpoint,
+    IncidentPermission,
+)
+from sentry.incidents.logic import (
+    set_incident_seen,
+)
+
+
+class OrganizationIncidentSeenEndpoint(IncidentEndpoint):
+    permission_classes = (IncidentPermission, )
+
+    def post(self, request, organization, incident):
+        """
+        Mark an incident as seen by the user
+        ````````````````````````````````````
+
+        :auth: required
+        """
+
+        set_incident_seen(incident=incident, user=request.user)
+        return Response({}, status=201)
diff --git a/src/sentry/api/serializers/models/incident.py b/src/sentry/api/serializers/models/incident.py
index 5fa4c38856..0c90914180 100644
--- a/src/sentry/api/serializers/models/incident.py
+++ b/src/sentry/api/serializers/models/incident.py
@@ -30,6 +30,7 @@ class IncidentSerializer(Serializer):
             incident_projects[incident_project.incident_id].append(incident_project.project.slug)
 
         results = {}
+
         for incident in item_list:
             results[incident] = {
                 'projects': incident_projects.get(incident.id, []),
@@ -61,15 +62,29 @@ class IncidentSerializer(Serializer):
 
 
 class DetailedIncidentSerializer(IncidentSerializer):
-    def _get_incident_seen_list(self, incident):
+    def _get_incident_seen_list(self, incident, user):
         incident_seen = list(IncidentSeen.objects.filter(
             incident=incident
         ).select_related('user').order_by('-last_seen'))
-        return [serialize(seenby) for seenby in incident_seen]
+
+        seen_by_list = []
+        has_seen = False
+
+        for seen_by in incident_seen:
+            if seen_by.user == user:
+                has_seen = True
+            seen_by_list.append(serialize(seen_by))
+
+        return {
+            'seen_by': seen_by_list,
+            'has_seen': has_seen,
+        }
 
     def serialize(self, obj, attrs, user):
         context = super(DetailedIncidentSerializer, self).serialize(obj, attrs, user)
+        seen_list = self._get_incident_seen_list(obj, user)
         context.update({
-            'seenBy': self._get_incident_seen_list(obj)
+            'seenBy': seen_list['seen_by'],
+            'hasSeen': seen_list['has_seen'],
         })
         return context
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 84655e99a1..4afd5eec48 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -49,6 +49,7 @@ from .endpoints.group_tombstone_details import GroupTombstoneDetailsEndpoint
 from .endpoints.group_tombstone import GroupTombstoneEndpoint
 from .endpoints.group_user_reports import GroupUserReportsEndpoint
 from .endpoints.organization_incident_details import OrganizationIncidentDetailsEndpoint
+from .endpoints.organization_incident_seen import OrganizationIncidentSeenEndpoint
 from .endpoints.index import IndexEndpoint
 from .endpoints.internal_queue_tasks import InternalQueueTasksEndpoint
 from .endpoints.internal_quotas import InternalQuotasEndpoint
@@ -431,6 +432,12 @@ urlpatterns = patterns(
         name='sentry-api-0-organization-incident-comments'
     ),
 
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/incidents/(?P<incident_identifier>[^\/]+)/seen/$',
+        OrganizationIncidentSeenEndpoint.as_view(),
+        name='sentry-api-0-organization-incident-seen'
+    ),
+
     # Organizations
 
     url(
diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index de20f1ba13..fc859faec0 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -13,6 +13,7 @@ from sentry.incidents.models import (
     IncidentActivityType,
     IncidentGroup,
     IncidentProject,
+    IncidentSeen,
     IncidentStatus,
     TimeSeriesSnapshot,
 )
@@ -117,6 +118,19 @@ def update_incident_status(incident, status, user=None, comment=None):
         return incident
 
 
+def set_incident_seen(incident, user=None):
+    """
+    Updates the incident to be seen
+    """
+    incident_seen, created = IncidentSeen.objects.create_or_update(
+        incident=incident,
+        user=user,
+        values={'last_seen': timezone.now()}
+    )
+
+    return incident_seen
+
+
 def create_initial_event_stats_snapshot(incident):
     """
     Creates an event snapshot representing the state at the beginning of
diff --git a/tests/sentry/api/endpoints/test_organization_incident_seen.py b/tests/sentry/api/endpoints/test_organization_incident_seen.py
new file mode 100644
index 0000000000..7f5a7f4224
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_incident_seen.py
@@ -0,0 +1,78 @@
+from __future__ import absolute_import
+
+from exam import fixture
+
+from django.core.urlresolvers import reverse
+from sentry.incidents.models import (
+    IncidentSeen,
+)
+from sentry.testutils import APITestCase
+
+
+class OrganizationIncidentSeenTest(APITestCase):
+    method = 'post'
+    endpoint = 'sentry-api-0-organization-incident-seen'
+
+    def setUp(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        self.login_as(self.user)
+
+    @fixture
+    def organization(self):
+        return self.create_organization(owner=self.create_user())
+
+    @fixture
+    def project(self):
+        return self.create_project(organization=self.organization)
+
+    @fixture
+    def user(self):
+        return self.create_user()
+
+    def test_has_user_seen(self):
+        incident = self.create_incident()
+        with self.feature('organizations:incidents'):
+            resp = self.get_response(
+                incident.organization.slug,
+                incident.identifier,
+            )
+
+            assert resp.status_code == 201
+
+            # should not be seen by different user
+            new_user = self.create_user()
+            self.create_member(user=new_user, organization=self.organization, teams=[self.team])
+            self.login_as(new_user)
+
+            seen_incidents = IncidentSeen.objects.filter(incident=incident)
+            assert len(seen_incidents) == 1
+            assert seen_incidents[0].user == self.user
+
+            # mark set as seen by new_user
+            resp = self.get_response(
+                incident.organization.slug,
+                incident.identifier,
+            )
+            assert resp.status_code == 201
+
+            seen_incidents = IncidentSeen.objects.filter(incident=incident)
+            assert len(seen_incidents) == 2
+            assert seen_incidents[0].user == self.user
+            assert seen_incidents[1].user == new_user
+
+            url = reverse(
+                'sentry-api-0-organization-incident-details',
+                kwargs={
+                    'organization_slug': incident.organization.slug,
+                    'incident_identifier': incident.identifier,
+                }
+            )
+
+            resp = self.client.get(url, format='json')
+            assert resp.status_code == 200
+            assert resp.data['hasSeen']
+
+            assert len(resp.data['seenBy']) == 2
+            # seenBy is sorted by most recently seen
+            assert resp.data['seenBy'][0]['username'] == new_user.username
+            assert resp.data['seenBy'][1]['username'] == self.user.username
