commit ab70e71a7491a00e32d1c6fb8b51901f5ac63095
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Thu Nov 28 19:12:14 2019 -0500

    feat(discover2): Refresh acceptance tests for discover2 (#14865)

diff --git a/tests/acceptance/test_organization_events_v2.py b/tests/acceptance/test_organization_events_v2.py
index 9e2cb28d04..b2a23d21f9 100644
--- a/tests/acceptance/test_organization_events_v2.py
+++ b/tests/acceptance/test_organization_events_v2.py
@@ -1,17 +1,145 @@
 from __future__ import absolute_import
 
+import copy
+import six
+import pytest
 import pytz
+import time
 from mock import patch
+from datetime import timedelta
+
+from six.moves.urllib.parse import urlencode
 
 from sentry.testutils import AcceptanceTestCase, SnubaTestCase
 from sentry.utils.samples import load_data
 from sentry.testutils.helpers.datetime import iso_format, before_now
 
 
-FEATURE_NAMES = "organizations:events-v2"
+FEATURE_NAMES = ["organizations:events-v2", "organizations:transaction-events"]
+
+
+def all_events_query(**kwargs):
+    options = {
+        "sort": ["-timestamp"],
+        "field": ["title", "event.type", "project", "user", "timestamp"],
+        "tag": ["event.type", "release", "project.name", "user.email", "user.ip", "environment"],
+        "name": ["All Events"],
+        "fieldnames": ["title", "type", "project", "user", "time"],
+    }
+    options.update(kwargs)
+
+    return urlencode(options, doseq=True)
+
+
+def errors_query(**kwargs):
+    options = {
+        "sort": ["-last_seen", "-title"],
+        "name": ["Errors"],
+        "fieldnames": ["error", "events", "users", "project", "last seen"],
+        "field": ["title", "count(id)", "count_unique(user)", "project", "last_seen"],
+        "tag": ["error.type", "project.name"],
+        "query": ["event.type:error"],
+    }
+    options.update(kwargs)
+
+    return urlencode(options, doseq=True)
+
+
+def transactions_query(**kwargs):
+    options = {
+        "sort": ["-count"],
+        "name": ["Transactions"],
+        "fieldnames": ["transaction", "project", "volume"],
+        "field": ["transaction", "project", "count()"],
+        "tag": ["release", "project.name", "user.email", "user.ip", "environment"],
+        "statsPeriod": ["14d"],
+        "query": ["event.type:transaction"],
+    }
+    options.update(kwargs)
+
+    return urlencode(options, doseq=True)
+
+
+def generate_transaction():
+
+    event_data = load_data("transaction")
+
+    # set timestamps
+
+    start_datetime = before_now(minutes=1)
+    end_datetime = start_datetime + timedelta(milliseconds=500)
+
+    def generate_timestamp(date_time):
+
+        return time.mktime(date_time.utctimetuple()) + date_time.microsecond / 1e6
+
+    event_data["start_timestamp"] = generate_timestamp(start_datetime)
+    event_data["timestamp"] = generate_timestamp(end_datetime)
+
+    # generate and build up span tree
+
+    reference_span = event_data["spans"][0]
+    parent_span_id = reference_span["parent_span_id"]
+
+    span_tree_blueprint = {
+        "a": {"aa": {"aaa": {"aaaa": "aaaaa"}}},
+        "b": {},
+        "c": {},
+        "d": {},
+        "e": {},
+    }
+
+    time_offsets = {
+        "a": (timedelta(), timedelta(milliseconds=250)),
+        "aa": (timedelta(milliseconds=10), timedelta(milliseconds=20)),
+        "aaa": (timedelta(milliseconds=15), timedelta(milliseconds=30)),
+        "aaaa": (timedelta(milliseconds=20), timedelta(milliseconds=50)),
+        "aaaaa": (timedelta(milliseconds=25), timedelta(milliseconds=50)),
+        "b": (timedelta(milliseconds=100), timedelta(milliseconds=100)),
+        "c": (timedelta(milliseconds=350), timedelta(milliseconds=50)),
+        "d": (timedelta(milliseconds=375), timedelta(milliseconds=50)),
+        "e": (timedelta(milliseconds=400), timedelta(milliseconds=100)),
+    }
+
+    def build_span_tree(span_tree, spans, parent_span_id):
 
-all_view = "field=title&field=event.type&field=project&field=user&field=timestamp&fieldnames=title&fieldnames=type&fieldnames=project&fieldnames=user&fieldnames=time&name=All+Events&sort=-timestamp&tag=event.type&tag=release&tag=project.name&tag=user.email&tag=user.ip&tag=environment"
-error_view = "field=title&fieldnames=error&field=count%28id%29&fieldnames=events&field=count_unique%28user%29&fieldnames=users&field=project&fieldnames=project&field=last_seen&fieldnames=last+seen&name=Errors&query=event.type%3Aerror&sort=-last_seen&sort=-title&tag=error.type&tag=project.name"
+        for span_id, child in span_tree.items():
+
+            span = copy.deepcopy(reference_span)
+            # non-leaf node span
+            span["parent_span_id"] = parent_span_id.ljust(16, "0")
+            span["span_id"] = span_id.ljust(16, "0")
+
+            (start_delta, span_length) = time_offsets.get(span_id, (timedelta(), timedelta()))
+
+            span_start_time = start_datetime + start_delta
+            span["start_timestamp"] = generate_timestamp(span_start_time)
+            span["timestamp"] = generate_timestamp(span_start_time + span_length)
+            spans.append(span)
+
+            if isinstance(child, dict):
+                spans = build_span_tree(child, spans, span_id)
+            elif isinstance(child, six.string_types):
+                parent_span_id = span_id
+                span_id = child
+
+                span = copy.deepcopy(reference_span)
+                # leaf node span
+                span["parent_span_id"] = parent_span_id.ljust(16, "0")
+                span["span_id"] = span_id.ljust(16, "0")
+
+                (start_delta, span_length) = time_offsets.get(span_id, (timedelta(), timedelta()))
+
+                span_start_time = start_datetime + start_delta
+                span["start_timestamp"] = generate_timestamp(span_start_time)
+                span["timestamp"] = generate_timestamp(span_start_time + span_length)
+                spans.append(span)
+
+        return spans
+
+    event_data["spans"] = build_span_tree(span_tree_blueprint, [], parent_span_id)
+
+    return event_data
 
 
 class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
@@ -30,14 +158,26 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
         self.browser.wait_until_not(".loading-indicator")
         self.browser.wait_until_not('[data-test-id="loading-placeholder"]')
 
-    def test_all_events_empty(self):
+    def test_events_default_landing(self):
         with self.feature(FEATURE_NAMES):
-            self.browser.get(self.path + "?" + all_view)
+            self.browser.get(self.path)
             self.wait_until_loaded()
-            self.browser.snapshot("events-v2 - all events empty state")
+            self.browser.snapshot("events-v2 - default landing")
+
+    def test_all_events_query_empty_state(self):
+        with self.feature(FEATURE_NAMES):
+            self.browser.get(self.path + "?" + all_events_query())
+            self.wait_until_loaded()
+            self.browser.snapshot("events-v2 - all events query - empty state")
+
+        with self.feature(FEATURE_NAMES):
+            # expect table to expand to the right when no tags are provided
+            self.browser.get(self.path + "?" + all_events_query(tag=[]))
+            self.wait_until_loaded()
+            self.browser.snapshot("events-v2 - all events query - empty state - no tags")
 
     @patch("django.utils.timezone.now")
-    def test_all_events(self, mock_now):
+    def test_all_events_query(self, mock_now):
         mock_now.return_value = before_now().replace(tzinfo=pytz.utc)
         min_ago = iso_format(before_now(minutes=1))
         self.store_event(
@@ -52,18 +192,34 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
         )
 
         with self.feature(FEATURE_NAMES):
-            self.browser.get(self.path + "?" + all_view)
+            self.browser.get(self.path + "?" + all_events_query())
             self.wait_until_loaded()
-            self.browser.snapshot("events-v2 - all events")
+            self.browser.snapshot("events-v2 - all events query - list")
+
+        with self.feature(FEATURE_NAMES):
+            # expect table to expand to the right when no tags are provided
+            self.browser.get(self.path + "?" + all_events_query(tag=[]))
+            self.wait_until_loaded()
+            self.browser.snapshot("events-v2 - all events query - list - no tags")
+
+    def test_errors_query_empty_state(self):
+        with self.feature(FEATURE_NAMES):
+            self.browser.get(self.path + "?" + errors_query())
+            self.wait_until_loaded()
+            self.browser.snapshot("events-v2 - errors query - empty state")
 
             self.browser.click_when_visible('[data-test-id="grid-edit-enable"]')
-            self.browser.snapshot("events-v2 - querybuilder edit state")
+            self.browser.snapshot(
+                "events-v2 - errors query - empty state - querybuilder - column edit state"
+            )
 
             self.browser.click_when_visible('[data-test-id="grid-add-column-right-end"]')
-            self.browser.snapshot("events-v2 - querybuilder edit modal")
+            self.browser.snapshot(
+                "events-v2 - errors query - empty state - querybuilder - add column"
+            )
 
     @patch("django.utils.timezone.now")
-    def test_errors(self, mock_now):
+    def test_errors_query(self, mock_now):
         mock_now.return_value = before_now().replace(tzinfo=pytz.utc)
         min_ago = iso_format(before_now(minutes=1))
         self.store_event(
@@ -72,6 +228,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
                 "message": "oh no",
                 "timestamp": min_ago,
                 "fingerprint": ["group-1"],
+                "type": "error",
             },
             project_id=self.project.id,
             assert_no_errors=False,
@@ -82,6 +239,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
                 "message": "oh no",
                 "timestamp": min_ago,
                 "fingerprint": ["group-1"],
+                "type": "error",
             },
             project_id=self.project.id,
             assert_no_errors=False,
@@ -92,16 +250,42 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
                 "message": "this is bad.",
                 "timestamp": min_ago,
                 "fingerprint": ["group-2"],
+                "type": "error",
             },
             project_id=self.project.id,
             assert_no_errors=False,
         )
 
         with self.feature(FEATURE_NAMES):
-            self.browser.get(self.path + "?" + error_view)
+            self.browser.get(self.path + "?" + errors_query())
             self.wait_until_loaded()
             self.browser.snapshot("events-v2 - errors")
 
+    def test_transactions_query_empty_state(self):
+        with self.feature(FEATURE_NAMES):
+            self.browser.get(self.path + "?" + transactions_query())
+            self.wait_until_loaded()
+            self.browser.snapshot("events-v2 - transactions query - empty state")
+
+        with self.feature(FEATURE_NAMES):
+            # expect table to expand to the right when no tags are provided
+            self.browser.get(self.path + "?" + transactions_query(tag=[]))
+            self.wait_until_loaded()
+            self.browser.snapshot("events-v2 - transactions query - empty state - no tags")
+
+    @patch("django.utils.timezone.now")
+    def test_transactions_query(self, mock_now):
+        mock_now.return_value = before_now().replace(tzinfo=pytz.utc)
+
+        event_data = generate_transaction()
+
+        self.store_event(data=event_data, project_id=self.project.id, assert_no_errors=True)
+
+        with self.feature(FEATURE_NAMES):
+            self.browser.get(self.path + "?" + transactions_query())
+            self.wait_until_loaded()
+            self.browser.snapshot("events-v2 - transactions query - list")
+
     @patch("django.utils.timezone.now")
     def test_event_detail_view_from_all_events(self, mock_now):
         mock_now.return_value = before_now().replace(tzinfo=pytz.utc)
@@ -122,7 +306,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
 
         with self.feature(FEATURE_NAMES):
             # Get the list page.
-            self.browser.get(self.path + "?" + all_view)
+            self.browser.get(self.path + "?" + all_events_query())
             self.wait_until_loaded()
 
             # Click the event link to open the events detail view
@@ -156,7 +340,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
 
         with self.feature(FEATURE_NAMES):
             # Get the list page
-            self.browser.get(self.path + "?" + error_view + "&statsPeriod=24h")
+            self.browser.get(self.path + "?" + errors_query() + "&statsPeriod=24h")
             self.wait_until_loaded()
 
             # Click the event link to open the event detail view
@@ -172,3 +356,55 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
 
             assert self.browser.element_exists_by_test_id("older-event")
             assert self.browser.element_exists_by_test_id("newer-event")
+
+    @patch("django.utils.timezone.now")
+    def test_event_detail_view_from_transactions_query(self, mock_now):
+        mock_now.return_value = before_now().replace(tzinfo=pytz.utc)
+
+        event_data = generate_transaction()
+
+        event = self.store_event(data=event_data, project_id=self.project.id, assert_no_errors=True)
+
+        with self.feature(FEATURE_NAMES):
+            # Get the list page
+            self.browser.get(self.path + "?" + transactions_query())
+            self.wait_until_loaded()
+
+            # Click the event link to open the event detail view
+            self.browser.element('[aria-label="{}"]'.format(event.title)).click()
+            self.wait_until_loaded()
+
+            self.browser.snapshot("events-v2 - transactions event detail view")
+
+    @pytest.mark.skip(reason="not done")
+    @patch("django.utils.timezone.now")
+    def test_usage(self, mock_now):
+        mock_now.return_value = before_now().replace(tzinfo=pytz.utc)
+
+        # TODO: load events
+
+        # go to landing
+
+        # go to a precanned query
+
+        # save query 1
+
+        # add environment column
+
+        # update query
+
+        # add condition from facet map
+
+        # delete a column
+
+        # click and drag a column
+
+        # save as query 2
+
+        # load save query 1
+
+        # sort column
+
+        # update query
+
+        # delete save query 1
