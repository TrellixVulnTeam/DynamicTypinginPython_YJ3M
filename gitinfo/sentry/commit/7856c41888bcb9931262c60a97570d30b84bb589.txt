commit 7856c41888bcb9931262c60a97570d30b84bb589
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jun 1 10:00:27 2018 -0700

    feat(api): Expand search capabilities on users
    
    - Add is:superuser query
    - Add permission:[permission] query

diff --git a/src/sentry/api/endpoints/user_index.py b/src/sentry/api/endpoints/user_index.py
index f77ab0e354..216999ae5f 100644
--- a/src/sentry/api/endpoints/user_index.py
+++ b/src/sentry/api/endpoints/user_index.py
@@ -39,6 +39,16 @@ class UserIndexEndpoint(Endpoint):
                     queryset = queryset.filter(in_iexact('email', value))
                 elif key == 'username':
                     queryset = queryset.filter(in_iexact('username', value))
+                elif key == 'is':
+                    for v in value:
+                        if v == 'superuser':
+                            queryset = queryset.filter(is_superuser=True)
+                        else:
+                            queryset = queryset.none()
+                elif key == 'permission':
+                    queryset = queryset.filter(
+                        userpermission__permission__in=[v.lower() for v in value],
+                    )
                 else:
                     queryset = queryset.none()
 
diff --git a/tests/sentry/api/endpoints/test_user_index.py b/tests/sentry/api/endpoints/test_user_index.py
index e462a04a21..3a279d46ad 100644
--- a/tests/sentry/api/endpoints/test_user_index.py
+++ b/tests/sentry/api/endpoints/test_user_index.py
@@ -1,8 +1,11 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 from exam import fixture
 
+from sentry.models import UserPermission
 from sentry.testutils import APITestCase
 
 
@@ -11,14 +14,58 @@ class UserListTest(APITestCase):
     def path(self):
         return reverse('sentry-api-0-user-index')
 
+    def setUp(self):
+        super(UserListTest, self).setUp()
+        self.superuser = self.create_user('bar@example.com', is_superuser=True)
+        self.normal_user = self.create_user('foo@example.com', is_superuser=False)
+
     def test_superuser_only(self):
-        user = self.create_user('foo@example.com')
-        self.login_as(user)
+        self.login_as(self.normal_user)
         response = self.client.get(self.path)
         assert response.status_code == 403
 
     def test_simple(self):
-        self.login_as(user=self.user, superuser=True)
+        self.login_as(user=self.superuser, superuser=True)
         response = self.client.get(self.path)
         assert response.status_code == 200
-        assert len(response.data) >= 1
+        assert len(response.data) == 2
+
+    def test_generic_query(self):
+        self.login_as(user=self.superuser, superuser=True)
+        response = self.client.get('{}?query=@example.com'.format(self.path))
+        assert response.status_code == 200
+        assert len(response.data) == 2
+        response = self.client.get('{}?query=bar'.format(self.path))
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == six.text_type(self.superuser.id)
+        response = self.client.get('{}?query=foobar'.format(self.path))
+        assert response.status_code == 200
+        assert len(response.data) == 0
+
+    def test_superuser_query(self):
+        self.login_as(user=self.superuser, superuser=True)
+        response = self.client.get('{}?query=is:superuser'.format(self.path))
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == six.text_type(self.superuser.id)
+
+    def test_email_query(self):
+        self.login_as(user=self.superuser, superuser=True)
+        response = self.client.get('{}?query=email:bar@example.com'.format(self.path))
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == six.text_type(self.superuser.id)
+        response = self.client.get('{}?query=email:foobar'.format(self.path))
+        assert response.status_code == 200
+        assert len(response.data) == 0
+
+    def test_basic_query(self):
+        UserPermission.objects.create(user=self.superuser, permission='broadcasts.admin')
+        self.login_as(user=self.superuser, superuser=True)
+        response = self.client.get('{}?query=permission:broadcasts.admin'.format(self.path))
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        response = self.client.get('{}?query=permission:foobar'.format(self.path))
+        assert response.status_code == 200
+        assert len(response.data) == 0
