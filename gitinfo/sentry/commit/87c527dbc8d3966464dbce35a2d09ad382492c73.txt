commit 87c527dbc8d3966464dbce35a2d09ad382492c73
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Sat May 2 19:14:15 2020 +0200

    ref(ui): Updated breadcrumbs filter/search - Part 1 (#18482)

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index b32d47dd4c..b0f07e7017 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -863,6 +863,8 @@ SENTRY_FEATURES = {
     "organizations:org-subdomains": False,
     # Enable access to more advanced (alpha) datascrubbing settings.
     "organizations:datascrubbers-v2": False,
+    # Enable the new version of interface/breadcrumbs
+    "organizations:breadcrumbs-v2": False,
     # Enable usage of external relays, for use with Relay. See
     # https://github.com/getsentry/relay.
     "organizations:relay": False,
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 063eebe76c..3b2aa0064e 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -94,6 +94,7 @@ default_manager.add("organizations:grouping-info", OrganizationFeature)  # NOQA
 default_manager.add("organizations:tweak-grouping-config", OrganizationFeature)  # NOQA
 default_manager.add("organizations:set-grouping-config", OrganizationFeature)  # NOQA
 default_manager.add("organizations:org-subdomains", OrganizationFeature)  # NOQA
+default_manager.add("organizations:breadcrumbs-v2", OrganizationFeature)  # NOQA
 
 # Project scoped features
 default_manager.add("projects:custom-inbound-filters", ProjectFeature)  # NOQA
diff --git a/src/sentry/static/sentry/app/components/dropdownControl.jsx b/src/sentry/static/sentry/app/components/dropdownControl.jsx
index c3527bc58b..3761f4140c 100644
--- a/src/sentry/static/sentry/app/components/dropdownControl.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownControl.jsx
@@ -69,7 +69,7 @@ class DropdownControl extends React.Component {
           {({isOpen, getMenuProps, getActorProps}) => (
             <React.Fragment>
               {this.renderButton(isOpen, getActorProps)}
-              <MenuContainer
+              <Content
                 {...getMenuProps()}
                 alignMenu={alignRight ? 'right' : 'left'}
                 width={menuWidth}
@@ -79,7 +79,7 @@ class DropdownControl extends React.Component {
                 blendWithActor={blendWithActor}
               >
                 {children}
-              </MenuContainer>
+              </Content>
             </React.Fragment>
           )}
         </DropdownMenu>
@@ -98,11 +98,10 @@ const StyledDropdownButton = styled(DropdownButton)`
   white-space: nowrap;
 `;
 
-const MenuContainer = styled(DropdownBubble.withComponent('ul'))`
-  list-style: none;
-  padding: 0;
-  margin: 0;
+const Content = styled(DropdownBubble.withComponent('div'))`
   display: ${p => (p.isOpen ? 'block' : 'none')};
+  border-top: 0;
+  top: 100%;
 `;
 
 const DropdownItem = styled(MenuItem)`
diff --git a/src/sentry/static/sentry/app/components/events/eventDataSection.tsx b/src/sentry/static/sentry/app/components/events/eventDataSection.tsx
index ff85e30deb..c6beeb67af 100644
--- a/src/sentry/static/sentry/app/components/events/eventDataSection.tsx
+++ b/src/sentry/static/sentry/app/components/events/eventDataSection.tsx
@@ -1,6 +1,7 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
+import {css} from '@emotion/core';
 
 import {t} from 'app/locale';
 import {callIfFunction} from 'app/utils/callIfFunction';
@@ -12,6 +13,7 @@ import space from 'app/styles/space';
 const defaultProps = {
   wrapTitle: true,
   raw: false,
+  isCentered: false,
 };
 
 type DefaultProps = Readonly<typeof defaultProps>;
@@ -66,6 +68,7 @@ class EventDataSection extends React.Component<Props> {
       raw,
       wrapTitle,
       actions,
+      isCentered,
     } = this.props;
 
     const titleNode = wrapTitle ? <h3>{title}</h3> : title;
@@ -73,7 +76,7 @@ class EventDataSection extends React.Component<Props> {
     return (
       <DataSection className={className || ''}>
         {title && (
-          <SectionHeader id={type}>
+          <SectionHeader id={type} isCentered={isCentered}>
             <Permalink href={'#' + type} className="permalink">
               <em className="icon-anchor" />
             </Permalink>
@@ -116,7 +119,7 @@ const Permalink = styled('a')`
   padding: ${space(0.25)} 5px;
 `;
 
-export const SectionHeader = styled('div')`
+const SectionHeader = styled('div')<{isCentered?: boolean}>`
   display: flex;
   justify-content: space-between;
   position: relative;
@@ -156,12 +159,22 @@ export const SectionHeader = styled('div')`
   &:hover ${Permalink} {
     display: block;
   }
+
   @media (min-width: ${props => props.theme.breakpoints[2]}) {
     & > small {
       margin-left: ${space(1)};
       display: inline-block;
     }
   }
+
+  ${p =>
+    p.isCentered &&
+    css`
+      align-items: center;
+      @media (max-width: ${p.theme.breakpoints[0]}) {
+        display: block;
+      }
+    `}
 `;
 
 const SectionContents = styled('div')`
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index 9806db56b7..93778071ea 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -6,7 +6,6 @@ import {analytics} from 'app/utils/analytics';
 import {logException} from 'app/utils/logging';
 import {objectIsEmpty} from 'app/utils';
 import {t} from 'app/locale';
-import BreadcrumbsInterface from 'app/components/events/interfaces/breadcrumbs/breadcrumbs';
 import CspInterface from 'app/components/events/interfaces/csp';
 import DebugMetaInterface from 'app/components/events/interfaces/debugmeta';
 import EventAttachments from 'app/components/events/eventAttachments';
@@ -39,6 +38,8 @@ import space from 'app/styles/space';
 import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
 
+import BreadcrumbsInterface from './eventEntriesBreadcrumbs';
+
 export const INTERFACES = {
   exception: ExceptionInterface,
   message: MessageInterface,
diff --git a/src/sentry/static/sentry/app/components/events/eventEntriesBreadcrumbs.tsx b/src/sentry/static/sentry/app/components/events/eventEntriesBreadcrumbs.tsx
new file mode 100644
index 0000000000..c2fdc20b1e
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/eventEntriesBreadcrumbs.tsx
@@ -0,0 +1,21 @@
+import React from 'react';
+
+import Feature from 'app/components/acl/feature';
+import BreadcrumbsInterface from 'app/components/events/interfaces/breadcrumbs/breadcrumbs';
+import BreadcrumbsInterfaceV2 from 'app/components/events/interfaces/breadcrumbsV2/breadcrumbs';
+
+type Props = React.ComponentProps<typeof BreadcrumbsInterfaceV2>;
+
+const EventEntriesBreadcrumbs = (props: Props) => (
+  <Feature features={['breadcrumbs-v2']}>
+    {({hasFeature}) =>
+      hasFeature ? (
+        <BreadcrumbsInterfaceV2 {...props} />
+      ) : (
+        <BreadcrumbsInterface {...props} />
+      )
+    }
+  </Feature>
+);
+
+export default EventEntriesBreadcrumbs;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumbs.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumbs.tsx
index c624778004..e91a7115a7 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumbs.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumbs.tsx
@@ -14,7 +14,7 @@ import BreadcrumbTime from './breadcrumbTime';
 import BreadcrumbCollapsed from './breadcrumbCollapsed';
 import convertBreadcrumbType from './convertBreadcrumbType';
 import getBreadcrumbDetails from './getBreadcrumbDetails';
-import {Breadcrumb} from './types';
+import {Breadcrumb, BreadcrumbType, BreadcrumbLevel} from './types';
 import {BreadCrumb, BreadCrumbIconWrapper} from './styles';
 
 const MAX_CRUMBS_WHEN_COLLAPSED = 10;
@@ -85,8 +85,8 @@ class BreadcrumbsContainer extends React.Component<Props, State> {
     if (exception) {
       const {type, value, module: mdl} = exception.data.values[0];
       return {
-        type: 'error',
-        level: 'error',
+        type: BreadcrumbType.ERROR,
+        level: BreadcrumbLevel.ERROR,
         category: this.moduleToCategory(mdl) || 'exception',
         data: {
           type,
@@ -99,8 +99,8 @@ class BreadcrumbsContainer extends React.Component<Props, State> {
     const levelTag = (event.tags || []).find(tag => tag.key === 'level');
 
     return {
-      type: 'message',
-      level: levelTag?.value as Breadcrumb['level'],
+      type: BreadcrumbType.MESSAGE,
+      level: levelTag?.value as BreadcrumbLevel,
       category: 'message',
       message: event.message,
       timestamp: event.dateCreated,
@@ -206,8 +206,8 @@ class BreadcrumbsContainer extends React.Component<Props, State> {
                       data-test-id="breadcrumb"
                       key={idx}
                       hasError={
-                        convertedBreadcrumb.type === 'message' ||
-                        convertedBreadcrumb.type === 'error'
+                        convertedBreadcrumb.type === BreadcrumbType.MESSAGE ||
+                        convertedBreadcrumb.type === BreadcrumbType.ERROR
                       }
                     >
                       <BreadCrumbIconWrapper color={color} borderColor={borderColor}>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumbsSearch.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumbsSearch.tsx
index 6605a851ec..6d39f2acf6 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumbsSearch.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumbsSearch.tsx
@@ -42,9 +42,9 @@ const Wrapper = styled('div')`
 const StyledTextField = styled(TextField)<TextField['props']>`
   margin-bottom: 0;
   input {
+    height: 28px;
     padding-left: ${space(4)};
     padding-right: ${space(4)};
-    height: 28px;
   }
 `;
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/convertBreadcrumbType.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/convertBreadcrumbType.tsx
index 231b2a6088..dfd6f16bc4 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/convertBreadcrumbType.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/convertBreadcrumbType.tsx
@@ -1,18 +1,18 @@
-import {Breadcrumb} from './types';
+import {Breadcrumb, BreadcrumbType} from './types';
 
 function convertBreadcrumbType(breadcrumb: Breadcrumb): Breadcrumb {
   if (breadcrumb.level) {
     if (breadcrumb.level === 'warning') {
       return {
         ...breadcrumb,
-        type: 'warning',
+        type: BreadcrumbType.WARNING,
       };
     }
 
     if (breadcrumb.level === 'error') {
       return {
         ...breadcrumb,
-        type: 'error',
+        type: BreadcrumbType.ERROR,
       };
     }
   }
@@ -23,14 +23,14 @@ function convertBreadcrumbType(breadcrumb: Breadcrumb): Breadcrumb {
     if (category === 'ui') {
       return {
         ...breadcrumb,
-        type: 'ui',
+        type: BreadcrumbType.UI,
       };
     }
 
     if (category === 'console' || category === 'navigation') {
       return {
         ...breadcrumb,
-        type: 'debug',
+        type: BreadcrumbType.DEBUG,
       };
     }
 
@@ -40,7 +40,7 @@ function convertBreadcrumbType(breadcrumb: Breadcrumb): Breadcrumb {
     ) {
       return {
         ...breadcrumb,
-        type: 'error',
+        type: BreadcrumbType.ERROR,
       };
     }
   }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/getBreadcrumbDetails.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/getBreadcrumbDetails.tsx
index 6378edcf10..2bae602a79 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/getBreadcrumbDetails.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/getBreadcrumbDetails.tsx
@@ -4,13 +4,9 @@ import {Color} from 'app/utils/theme';
 import HttpRenderer from 'app/components/events/interfaces/breadcrumbs/httpRenderer';
 import ErrorRenderer from 'app/components/events/interfaces/breadcrumbs/errorRenderer';
 import DefaultRenderer from 'app/components/events/interfaces/breadcrumbs/defaultRenderer';
-import {IconInfo} from 'app/icons/iconInfo';
-import {IconWarning} from 'app/icons/iconWarning';
-import {IconLocation} from 'app/icons/iconLocation';
-import {IconUser} from 'app/icons/iconUser';
-import {IconRefresh} from 'app/icons/iconRefresh';
+import {IconInfo, IconWarning, IconLocation, IconUser, IconRefresh} from 'app/icons';
 
-import {Breadcrumb} from './types';
+import {Breadcrumb, BreadcrumbType} from './types';
 
 type Output = {
   color: Color;
@@ -21,29 +17,29 @@ type Output = {
 
 function getBreadcrumbDetails(breadcrumb: Breadcrumb): Partial<Output> {
   switch (breadcrumb.type) {
-    case 'user':
-    case 'ui': {
+    case BreadcrumbType.USER:
+    case BreadcrumbType.UI: {
       return {
         color: 'purple',
         icon: <IconUser />,
         renderer: <DefaultRenderer breadcrumb={breadcrumb} />,
       };
     }
-    case 'navigation': {
+    case BreadcrumbType.NAVIGATION: {
       return {
         color: 'blue',
         icon: <IconLocation />,
         renderer: <DefaultRenderer breadcrumb={breadcrumb} />,
       };
     }
-    case 'info': {
+    case BreadcrumbType.INFO: {
       return {
         color: 'blue',
         icon: <IconInfo />,
         renderer: <DefaultRenderer breadcrumb={breadcrumb} />,
       };
     }
-    case 'warning': {
+    case BreadcrumbType.WARNING: {
       return {
         color: 'yellowOrange',
         borderColor: 'yellowOrangeDark',
@@ -51,16 +47,16 @@ function getBreadcrumbDetails(breadcrumb: Breadcrumb): Partial<Output> {
         renderer: <ErrorRenderer breadcrumb={breadcrumb} />,
       };
     }
-    case 'exception':
-    case 'message':
-    case 'error': {
+    case BreadcrumbType.EXCEPTION:
+    case BreadcrumbType.MESSAGE:
+    case BreadcrumbType.ERROR: {
       return {
         color: 'red',
         icon: <IconWarning />,
         renderer: <ErrorRenderer breadcrumb={breadcrumb} />,
       };
     }
-    case 'http': {
+    case BreadcrumbType.HTTP: {
       return {
         color: 'green',
         icon: <IconRefresh />,
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/types.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/types.tsx
index 349d33fbd2..da7d322d86 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/types.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/types.tsx
@@ -1,24 +1,39 @@
-type BreadcrumbCategory =
-  | 'started'
-  | 'UIViewController'
-  | 'touch'
-  | 'message'
-  | 'ui.click'
-  | 'xhr'
-  | 'console';
+import {Color} from 'app/utils/theme';
+import {IconProps} from 'app/types/iconProps';
 
-type BreadcrumbLevel = 'fatal' | 'error' | 'warning' | 'info' | 'debug';
+export enum BreadcrumbLevel {
+  FATAL = 'fatal',
+  ERROR = 'error',
+  WARNING = 'warning',
+  INFO = 'info',
+  DEBUG = 'debug',
+}
+
+export enum BreadcrumbType {
+  INFO = 'info',
+  DEBUG = 'debug',
+  MESSAGE = 'message',
+  QUERY = 'query',
+  UI = 'ui',
+  USER = 'user',
+  EXCEPTION = 'exception',
+  WARNING = 'warning',
+  ERROR = 'error',
+  DEFAULT = 'default',
+  HTTP = 'http',
+  NAVIGATION = 'navigation',
+}
 
 type BreadcrumbTypeBase = {
   timestamp?: string; //it's recommended
-  category?: BreadcrumbCategory;
+  category?: string;
   message?: string;
   level?: BreadcrumbLevel;
   event_id?: string;
 };
 
 export type BreadcrumbTypeNavigation = {
-  type: 'navigation';
+  type: BreadcrumbType.NAVIGATION;
   data?: {
     to: string;
     from: string;
@@ -26,7 +41,7 @@ export type BreadcrumbTypeNavigation = {
 } & BreadcrumbTypeBase;
 
 export type BreadcrumbTypeHTTP = {
-  type: 'http';
+  type: BreadcrumbType.HTTP;
   data?: {
     url?: string;
     method?:
@@ -46,16 +61,16 @@ export type BreadcrumbTypeHTTP = {
 
 export type BreadcrumbTypeDefault = {
   type:
-    | 'error'
-    | 'info'
-    | 'debug'
-    | 'message'
-    | 'default'
-    | 'query'
-    | 'ui'
-    | 'user'
-    | 'exception'
-    | 'warning';
+    | BreadcrumbType.INFO
+    | BreadcrumbType.DEBUG
+    | BreadcrumbType.MESSAGE
+    | BreadcrumbType.QUERY
+    | BreadcrumbType.UI
+    | BreadcrumbType.USER
+    | BreadcrumbType.EXCEPTION
+    | BreadcrumbType.WARNING
+    | BreadcrumbType.ERROR
+    | BreadcrumbType.DEFAULT;
   data?: {[key: string]: any};
 } & BreadcrumbTypeBase;
 
@@ -64,4 +79,9 @@ export type Breadcrumb =
   | BreadcrumbTypeHTTP
   | BreadcrumbTypeDefault;
 
-export type BreadcrumbType = Breadcrumb['type'];
+export type BreadcrumbDetails = {
+  color?: Color;
+  borderColor?: Color;
+  icon?: React.ComponentType<IconProps>;
+  description: string;
+};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilter.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilter.tsx
new file mode 100644
index 0000000000..fb2fd5257b
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilter.tsx
@@ -0,0 +1,175 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import isEqual from 'lodash/isEqual';
+import {css} from '@emotion/core';
+
+import {t, tn} from 'app/locale';
+import DropdownControl from 'app/components/dropdownControl';
+import DropdownButton from 'app/components/dropdownButton';
+
+import BreadcrumbFilterGroup from './breadcrumbFilterGroup';
+import BreadcrumbFilterHeader from './breadcrumbFilterHeader';
+import BreadcrumbFilterFooter from './breadcrumbFilterFooter';
+import {FilterGroup, FilterGroupType, FilterType} from './types';
+
+type Props = {
+  onFilter: (filterGroups: Array<FilterGroup>) => () => void;
+  filterGroups: Array<FilterGroup>;
+};
+
+type State = {
+  filterGroups: Array<FilterGroup>;
+  checkedOptionsQuantity: number;
+};
+
+class BreadcrumbFilter extends React.Component<Props, State> {
+  state: State = {
+    filterGroups: [],
+    checkedOptionsQuantity: 0,
+  };
+
+  componentDidUpdate(prevProps: Props) {
+    if (!isEqual(this.props.filterGroups, prevProps.filterGroups)) {
+      this.loadState();
+    }
+  }
+
+  setCheckedOptionsQuantity = () => {
+    this.setState(prevState => ({
+      checkedOptionsQuantity: prevState.filterGroups.filter(
+        filterGroup => filterGroup.isChecked
+      ).length,
+    }));
+  };
+
+  loadState() {
+    const {filterGroups} = this.props;
+    this.setState(
+      {
+        filterGroups,
+      },
+      this.setCheckedOptionsQuantity
+    );
+  }
+
+  handleClickItem = (type: FilterType, groupType: FilterGroupType) => {
+    this.setState(
+      prevState => ({
+        filterGroups: prevState.filterGroups.map(filterGroup => {
+          if (filterGroup.groupType === groupType && filterGroup.type === type) {
+            return {
+              ...filterGroup,
+              isChecked: !filterGroup.isChecked,
+            };
+          }
+          return filterGroup;
+        }),
+      }),
+      this.setCheckedOptionsQuantity
+    );
+  };
+
+  handleSelectAll = (selectAll: boolean) => {
+    this.setState(
+      prevState => ({
+        filterGroups: prevState.filterGroups.map(data => ({
+          ...data,
+          isChecked: selectAll,
+        })),
+      }),
+      this.setCheckedOptionsQuantity
+    );
+  };
+
+  getDropDownButton = ({isOpen, getActorProps}) => {
+    const {checkedOptionsQuantity} = this.state;
+
+    let buttonLabel = t('Filter By');
+    let buttonPriority = 'default';
+
+    if (checkedOptionsQuantity > 0) {
+      buttonLabel = tn('%s Active Filter', '%s Active Filters', checkedOptionsQuantity);
+      buttonPriority = 'primary';
+    }
+
+    return (
+      <StyledDropdownButton
+        {...getActorProps()}
+        isOpen={isOpen}
+        size="small"
+        priority={buttonPriority}
+      >
+        {buttonLabel}
+      </StyledDropdownButton>
+    );
+  };
+
+  render() {
+    const {onFilter} = this.props;
+    const {filterGroups, checkedOptionsQuantity} = this.state;
+
+    const hasFilterGroupsGroupTypeLevel = filterGroups.find(
+      filterGroup => filterGroup.groupType === FilterGroupType.LEVEL
+    );
+
+    return (
+      <Wrapper>
+        <DropdownControl menuWidth="20vh" blendWithActor button={this.getDropDownButton}>
+          <React.Fragment>
+            <BreadcrumbFilterHeader
+              onSelectAll={this.handleSelectAll}
+              selectedQuantity={checkedOptionsQuantity}
+              isAllSelected={filterGroups.length === checkedOptionsQuantity}
+            />
+            <BreadcrumbFilterGroup
+              groupHeaderTitle={t('Type')}
+              onClick={this.handleClickItem}
+              data={filterGroups.filter(
+                filterGroup => filterGroup.groupType === FilterGroupType.TYPE
+              )}
+            />
+            {hasFilterGroupsGroupTypeLevel && (
+              <BreadcrumbFilterGroup
+                groupHeaderTitle={t('Level')}
+                onClick={this.handleClickItem}
+                data={filterGroups.filter(
+                  filterGroup => filterGroup.groupType === FilterGroupType.LEVEL
+                )}
+              />
+            )}
+            {!isEqual(this.props.filterGroups, filterGroups) && (
+              <BreadcrumbFilterFooter onSubmit={onFilter(filterGroups)} />
+            )}
+          </React.Fragment>
+        </DropdownControl>
+      </Wrapper>
+    );
+  }
+}
+
+export default BreadcrumbFilter;
+
+const StyledDropdownButton = styled(DropdownButton)`
+  border-right: 0;
+  z-index: ${p => p.theme.zIndex.dropdownAutocomplete.actor};
+  border-radius: ${p =>
+    p.isOpen
+      ? `${p.theme.borderRadius} 0 0 0`
+      : `${p.theme.borderRadius} 0 0 ${p.theme.borderRadius}`};
+  white-space: nowrap;
+  max-width: 200px;
+  &:hover,
+  &:active {
+    border-right: 0;
+  }
+  ${p =>
+    !p.isOpen &&
+    css`
+      border-bottom-color: ${p.theme.button.primary.border};
+    `}
+`;
+
+const Wrapper = styled('div')`
+  position: relative;
+  display: flex;
+`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilterFooter.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilterFooter.tsx
new file mode 100644
index 0000000000..09b42d2429
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilterFooter.tsx
@@ -0,0 +1,33 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import Button from 'app/components/button';
+import {growIn} from 'app/styles/animations';
+import space from 'app/styles/space';
+import {t} from 'app/locale';
+
+type Props = {
+  onSubmit: () => void;
+};
+
+const BreadcrumbFilterFooter = ({onSubmit}: Props) => (
+  <Wrapper>
+    <ApplyFilterButton onClick={onSubmit} size="xsmall" priority="primary">
+      {t('Apply Filter')}
+    </ApplyFilterButton>
+  </Wrapper>
+);
+
+const Wrapper = styled('div')`
+  display: flex;
+  justify-content: flex-end;
+  background-color: ${p => p.theme.offWhite};
+  padding: ${space(1)};
+`;
+
+const ApplyFilterButton = styled(Button)`
+  animation: 0.1s ${growIn} ease-in;
+  margin: ${space(0.5)} 0;
+`;
+
+export default BreadcrumbFilterFooter;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilterGroup.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilterGroup.tsx
new file mode 100644
index 0000000000..abdc57a3f2
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilterGroup.tsx
@@ -0,0 +1,97 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import space from 'app/styles/space';
+import CheckboxFancy from 'app/components/checkboxFancy/checkboxFancy';
+
+import {FilterType, FilterGroupType, FilterGroup} from './types';
+import BreadcrumbFilterGroupIcon from './breadcrumbFilterGroupIcon';
+
+type Props = {
+  groupHeaderTitle: string;
+  data: Array<FilterGroup>;
+  onClick: (type: FilterType, groupType: FilterGroupType) => void;
+};
+
+const BreadcrumbFilterGroup = ({groupHeaderTitle, data, onClick}: Props) => {
+  const handleClick = (type: FilterType, groupType: FilterGroupType) => (
+    event: React.MouseEvent<HTMLLIElement>
+  ) => {
+    event.stopPropagation();
+    onClick(type, groupType);
+  };
+
+  return (
+    <div>
+      <FilterGroupHeader>{groupHeaderTitle}</FilterGroupHeader>
+      <FilterGroupList>
+        {data.map(
+          ({type, groupType, description, isChecked, icon, color, borderColor}) => (
+            <FilterGroupListItem
+              key={type}
+              isChecked={isChecked}
+              onClick={handleClick(type, groupType)}
+            >
+              <BreadcrumbFilterGroupIcon
+                icon={icon}
+                color={color}
+                borderColor={borderColor}
+              />
+              <ListItemDescription>{description}</ListItemDescription>
+              <CheckboxFancy isChecked={isChecked} />
+            </FilterGroupListItem>
+          )
+        )}
+      </FilterGroupList>
+    </div>
+  );
+};
+
+export default BreadcrumbFilterGroup;
+
+const FilterGroupHeader = styled('div')`
+  display: flex;
+  align-items: center;
+  margin: 0;
+  background-color: ${p => p.theme.offWhite};
+  color: ${p => p.theme.gray2};
+  font-weight: normal;
+  font-size: ${p => p.theme.fontSizeMedium};
+  padding: ${space(1)} ${space(2)};
+  border-bottom: 1px solid ${p => p.theme.borderDark};
+`;
+
+const FilterGroupList = styled('ul')`
+  list-style: none;
+  margin: 0;
+  padding: 0;
+`;
+
+const FilterGroupListItem = styled('li')<{isChecked?: boolean}>`
+  display: grid;
+  grid-template-columns: max-content 1fr max-content;
+  grid-column-gap: ${space(1)};
+  align-items: center;
+  padding: ${space(1)} ${space(2)};
+  border-bottom: 1px solid ${p => p.theme.borderDark};
+  cursor: pointer;
+  :hover {
+    background-color: ${p => p.theme.offWhite};
+  }
+  ${CheckboxFancy} {
+    opacity: ${p => (p.isChecked ? 1 : 0.3)};
+  }
+
+  &:hover ${CheckboxFancy} {
+    opacity: 1;
+  }
+
+  &:hover span {
+    color: ${p => p.theme.blue};
+    text-decoration: underline;
+  }
+`;
+
+const ListItemDescription = styled('div')`
+  font-size: ${p => p.theme.fontSizeMedium};
+`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilterGroupIcon.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilterGroupIcon.tsx
new file mode 100644
index 0000000000..69c03d05a1
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilterGroupIcon.tsx
@@ -0,0 +1,24 @@
+import React from 'react';
+
+import {IconProps} from 'app/types/iconProps';
+
+import {BreadCrumbIconWrapper} from '../styles';
+import {BreadcrumbDetails} from './types';
+
+const BreadcrumbFilterGroupIcon = ({
+  icon,
+  color,
+  borderColor,
+}: Omit<BreadcrumbDetails, 'description'>) => {
+  if (!icon) return null;
+
+  const Icon = icon as React.ComponentType<IconProps>;
+
+  return (
+    <BreadCrumbIconWrapper color={color} borderColor={borderColor} size={20}>
+      <Icon size="xs" />
+    </BreadCrumbIconWrapper>
+  );
+};
+
+export default BreadcrumbFilterGroupIcon;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilterHeader.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilterHeader.tsx
new file mode 100644
index 0000000000..11716988e0
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilterHeader.tsx
@@ -0,0 +1,72 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import space from 'app/styles/space';
+import {t, tct} from 'app/locale';
+import CheckboxFancy from 'app/components/checkboxFancy/checkboxFancy';
+
+type Props = {
+  selectedQuantity: number;
+  isAllSelected: boolean;
+  onSelectAll: (selectAll: boolean) => void;
+};
+
+const BreadcrumbFilterHeader = ({
+  selectedQuantity,
+  isAllSelected,
+  onSelectAll,
+}: Props) => {
+  const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {
+    event.stopPropagation();
+
+    if (isAllSelected) {
+      onSelectAll(false);
+      return;
+    }
+
+    onSelectAll(true);
+  };
+
+  const getCheckboxLabel = () => {
+    if (isAllSelected) {
+      return t('Unselect All');
+    }
+
+    if (selectedQuantity === 0) {
+      return t('Select All');
+    }
+
+    return tct('[selectedQuantity] selected', {selectedQuantity});
+  };
+
+  return (
+    <Wrapper>
+      <CheckboxWrapper onClick={handleClick}>
+        <span>{getCheckboxLabel()}</span>
+        <CheckboxFancy
+          isChecked={isAllSelected}
+          isIndeterminate={!isAllSelected && selectedQuantity > 0}
+        />
+      </CheckboxWrapper>
+    </Wrapper>
+  );
+};
+
+const Wrapper = styled('div')`
+  display: flex;
+  background-color: ${p => p.theme.offWhite};
+  padding: ${space(1)} ${space(2)};
+  border-bottom: 1px solid ${p => p.theme.borderDark};
+  justify-content: flex-end;
+`;
+
+const CheckboxWrapper = styled('div')`
+  text-align: right;
+  align-items: center;
+  display: grid;
+  grid-gap: ${space(1)};
+  grid-template-columns: minmax(100px, auto) 16px;
+  font-size: ${p => p.theme.fontSizeMedium};
+`;
+
+export default BreadcrumbFilterHeader;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/types.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/types.tsx
new file mode 100644
index 0000000000..b540da7538
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/types.tsx
@@ -0,0 +1,30 @@
+import {
+  BreadcrumbDetails,
+  BreadcrumbType,
+  BreadcrumbLevel,
+} from '../../breadcrumbs/types';
+
+export enum FilterGroupType {
+  LEVEL = 'level',
+  TYPE = 'type',
+}
+
+type FilterGroupBase = {
+  isChecked: boolean;
+} & BreadcrumbDetails;
+
+type FilterGroupTypeType = {
+  groupType: FilterGroupType.TYPE;
+  type: BreadcrumbType;
+} & FilterGroupBase;
+
+type FilterGroupTypeLevel = {
+  groupType: FilterGroupType.LEVEL;
+  type: BreadcrumbLevel;
+} & FilterGroupBase;
+
+export type FilterGroup = FilterGroupTypeType | FilterGroupTypeLevel;
+
+export type FilterType = BreadcrumbLevel | BreadcrumbType;
+
+export {BreadcrumbDetails};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbRenderer.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbRenderer.tsx
new file mode 100644
index 0000000000..89a380f70e
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbRenderer.tsx
@@ -0,0 +1,29 @@
+import React from 'react';
+
+import HttpRenderer from '../breadcrumbs/httpRenderer';
+import DefaultRenderer from '../breadcrumbs/defaultRenderer';
+import ErrorRenderer from '../breadcrumbs/errorRenderer';
+import {Breadcrumb, BreadcrumbType} from '../breadcrumbs/types';
+
+type Props = {
+  breadcrumb: Breadcrumb;
+};
+
+const BreadcrumbRenderer = ({breadcrumb}: Props) => {
+  if (breadcrumb.type === BreadcrumbType.HTTP) {
+    return <HttpRenderer breadcrumb={breadcrumb} />;
+  }
+
+  if (
+    breadcrumb.type === BreadcrumbType.WARNING ||
+    breadcrumb.type === BreadcrumbType.MESSAGE ||
+    breadcrumb.type === BreadcrumbType.EXCEPTION ||
+    breadcrumb.type === BreadcrumbType.ERROR
+  ) {
+    return <ErrorRenderer breadcrumb={breadcrumb} />;
+  }
+
+  return <DefaultRenderer breadcrumb={breadcrumb} />;
+};
+
+export default BreadcrumbRenderer;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbs.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbs.tsx
new file mode 100644
index 0000000000..c8d6c50209
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbs.tsx
@@ -0,0 +1,368 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import EventDataSection from 'app/components/events/eventDataSection';
+import GuideAnchor from 'app/components/assistant/guideAnchor';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
+import {t} from 'app/locale';
+import {Event} from 'app/types';
+import space from 'app/styles/space';
+import SearchBar from 'app/components/searchBar';
+import {IconProps} from 'app/types/iconProps';
+
+import {PlatformContextProvider} from '../breadcrumbs/platformContext';
+import BreadcrumbTime from '../breadcrumbs/breadcrumbTime';
+import BreadcrumbCollapsed from '../breadcrumbs/breadcrumbCollapsed';
+import {
+  Breadcrumb,
+  BreadcrumbDetails,
+  BreadcrumbType,
+  BreadcrumbLevel,
+} from '../breadcrumbs/types';
+import BreadcrumbFilter from './breadcrumbFilter/breadcrumbFilter';
+import convertBreadcrumbType from './convertBreadcrumbType';
+import getBreadcrumbDetails from './getBreadcrumbDetails';
+import BreadcrumbRenderer from './breadcrumbRenderer';
+import {BreadCrumb, BreadCrumbIconWrapper} from './styles';
+import {FilterGroupType} from './breadcrumbFilter/types';
+
+const MAX_CRUMBS_WHEN_COLLAPSED = 10;
+
+type BreadcrumbWithDetails = Breadcrumb & BreadcrumbDetails & {id: number};
+type BreadcrumbFilterGroups = React.ComponentProps<
+  typeof BreadcrumbFilter
+>['filterGroups'];
+
+type State = {
+  isCollapsed: boolean;
+  searchTerm: string;
+  breadcrumbs: Array<BreadcrumbWithDetails>;
+  filteredBreadcrumbsByCustomSearch: Array<BreadcrumbWithDetails>;
+  filteredBreadcrumbs: Array<BreadcrumbWithDetails>;
+  breadcrumbFilterGroups: BreadcrumbFilterGroups;
+};
+
+type Props = {
+  event: Event;
+  type: string;
+  data: {
+    values: Array<Breadcrumb>;
+  };
+};
+
+class BreadcrumbsContainer extends React.Component<Props, State> {
+  state: State = {
+    isCollapsed: true,
+    searchTerm: '',
+    breadcrumbs: [],
+    filteredBreadcrumbsByCustomSearch: [],
+    filteredBreadcrumbs: [],
+    breadcrumbFilterGroups: [],
+  };
+
+  componentDidMount() {
+    this.loadBreadcrumbs();
+  }
+
+  loadBreadcrumbs = () => {
+    const {data} = this.props;
+    let breadcrumbs = data.values;
+
+    // Add the error event as the final (virtual) breadcrumb
+    const virtualCrumb = this.getVirtualCrumb();
+    if (virtualCrumb) {
+      breadcrumbs = [...breadcrumbs, virtualCrumb];
+    }
+
+    const breadcrumbTypes: BreadcrumbFilterGroups = [];
+
+    // TODO(Priscila): implement levels
+    //const breadcrumbLevels: BreadcrumbFilterGroups = [];
+
+    const convertedBreadcrumbs = breadcrumbs.map((breadcrumb, index) => {
+      const convertedBreadcrumb = convertBreadcrumbType(breadcrumb);
+      const breadcrumbDetails = getBreadcrumbDetails(convertedBreadcrumb.type);
+
+      if (!breadcrumbTypes.find(b => b.type === convertedBreadcrumb.type)) {
+        !breadcrumbTypes.push({
+          groupType: FilterGroupType.TYPE,
+          type: convertedBreadcrumb.type,
+          ...breadcrumbDetails,
+          isChecked: true,
+        });
+      }
+
+      return {
+        id: index,
+        ...convertedBreadcrumb,
+        ...breadcrumbDetails,
+      };
+    });
+
+    this.setState({
+      breadcrumbs: convertedBreadcrumbs,
+      filteredBreadcrumbs: convertedBreadcrumbs,
+      filteredBreadcrumbsByCustomSearch: convertedBreadcrumbs,
+      breadcrumbFilterGroups: breadcrumbTypes
+        // in case of a breadcrumb of type BreadcrumbType.DEFAULT, moves it to the last position of the array
+        .filter(crumbType => crumbType.type !== BreadcrumbType.DEFAULT)
+        .concat(
+          breadcrumbTypes.filter(crumbType => crumbType.type === BreadcrumbType.DEFAULT)
+        ),
+    });
+  };
+
+  moduleToCategory = (module: any) => {
+    if (!module) {
+      return undefined;
+    }
+    const match = module.match(/^.*\/(.*?)(:\d+)/);
+    if (!match) {
+      return module.split(/./)[0];
+    }
+    return match[1];
+  };
+
+  getVirtualCrumb = (): Breadcrumb | undefined => {
+    const {event} = this.props;
+
+    const exception = event.entries.find(
+      entry => entry.type === BreadcrumbType.EXCEPTION
+    );
+
+    if (!exception && !event.message) {
+      return undefined;
+    }
+
+    if (exception) {
+      const {type, value, module: mdl} = exception.data.values[0];
+      return {
+        type: BreadcrumbType.EXCEPTION,
+        level: BreadcrumbLevel.ERROR,
+        category: this.moduleToCategory(mdl) || 'exception',
+        data: {
+          type,
+          value,
+        },
+        timestamp: event.dateCreated,
+      };
+    }
+
+    const levelTag = (event.tags || []).find(tag => tag.key === 'level');
+
+    return {
+      type: BreadcrumbType.MESSAGE,
+      level: levelTag?.value as BreadcrumbLevel,
+      category: 'message',
+      message: event.message,
+      timestamp: event.dateCreated,
+    };
+  };
+
+  getCollapsedCrumbQuantity = (): {
+    filteredCollapsedBreadcrumbs: Array<BreadcrumbWithDetails>;
+    collapsedQuantity: number;
+  } => {
+    const {isCollapsed, filteredBreadcrumbs} = this.state;
+
+    let filteredCollapsedBreadcrumbs = filteredBreadcrumbs;
+
+    if (isCollapsed && filteredCollapsedBreadcrumbs.length > MAX_CRUMBS_WHEN_COLLAPSED) {
+      filteredCollapsedBreadcrumbs = filteredCollapsedBreadcrumbs.slice(
+        -MAX_CRUMBS_WHEN_COLLAPSED
+      );
+    }
+
+    return {
+      filteredCollapsedBreadcrumbs,
+      collapsedQuantity: filteredBreadcrumbs.length - filteredCollapsedBreadcrumbs.length,
+    };
+  };
+
+  handleFilter = (breadcrumbFilterGroups: BreadcrumbFilterGroups) => () => {
+    //types
+    const breadcrumbFilterGroupTypes = breadcrumbFilterGroups.filter(
+      breadcrumbFilterGroup => breadcrumbFilterGroup.groupType === 'type'
+    );
+
+    // TODO(Priscila): implement levels
+    // const breadcrumbFilterGroupLevels = breadcrumbFilterGroups
+    //   .filter(breadcrumbFilterGroup => breadcrumbFilterGroup.groupType === 'level')
+    //   .map(breadcrumbFilterGroup => breadcrumbFilterGroup.type);
+
+    this.setState({
+      filteredBreadcrumbs: this.state.breadcrumbs.filter(breadcrumb => {
+        const foundBreadcrumbFilterData = breadcrumbFilterGroupTypes.find(
+          crumbFilterData => crumbFilterData.type === breadcrumb.type
+        );
+        if (foundBreadcrumbFilterData) {
+          return foundBreadcrumbFilterData.isChecked;
+        }
+
+        return false;
+      }),
+      breadcrumbFilterGroups,
+    });
+  };
+
+  handleFilterBySearchTerm = (value: string) => {
+    const {filteredBreadcrumbsByCustomSearch} = this.state;
+
+    const searchTerm = value.toLocaleLowerCase();
+
+    const filteredBreadcrumbs = filteredBreadcrumbsByCustomSearch.filter(
+      item =>
+        !!['category', 'message', 'level', 'timestamp'].find(prop => {
+          const searchValue = item[prop];
+          if (searchValue) {
+            return searchValue.toLowerCase().indexOf(searchTerm) !== -1;
+          }
+          return false;
+        })
+    );
+
+    this.setState({
+      searchTerm,
+      filteredBreadcrumbs,
+    });
+  };
+
+  handleCollapseToggle = () => {
+    this.setState(prevState => ({
+      isCollapsed: !prevState.isCollapsed,
+    }));
+  };
+
+  handleCleanSearch = () => {
+    this.setState({
+      searchTerm: '',
+      isCollapsed: true,
+    });
+  };
+
+  render() {
+    const {event, type} = this.props;
+    const {breadcrumbFilterGroups, searchTerm} = this.state;
+
+    const {
+      collapsedQuantity,
+      filteredCollapsedBreadcrumbs,
+    } = this.getCollapsedCrumbQuantity();
+
+    return (
+      <EventDataSection
+        type={type}
+        title={
+          <h3>
+            <GuideAnchor target="breadcrumbs" position="bottom">
+              {t('Breadcrumbs')}
+            </GuideAnchor>
+          </h3>
+        }
+        actions={
+          <Search>
+            <BreadcrumbFilter
+              onFilter={this.handleFilter}
+              filterGroups={breadcrumbFilterGroups}
+            />
+            <StyledSearchBar
+              placeholder={t('Search breadcrumbs\u2026')}
+              onChange={this.handleFilterBySearchTerm}
+              query={searchTerm}
+            />
+          </Search>
+        }
+        wrapTitle={false}
+        isCentered
+      >
+        <Content>
+          {filteredCollapsedBreadcrumbs.length > 0 ? (
+            <PlatformContextProvider value={{platform: event.platform}}>
+              <BreadCrumbs className="crumbs">
+                {collapsedQuantity > 0 && (
+                  <BreadcrumbCollapsed
+                    onClick={this.handleCollapseToggle}
+                    quantity={collapsedQuantity}
+                  />
+                )}
+                {filteredCollapsedBreadcrumbs.map(
+                  ({color, borderColor, icon, ...crumb}, idx) => {
+                    const Icon = icon as React.ComponentType<IconProps>;
+                    return (
+                      <BreadCrumb
+                        data-test-id="breadcrumb"
+                        key={idx}
+                        hasError={
+                          crumb.type === BreadcrumbType.MESSAGE ||
+                          crumb.type === BreadcrumbType.EXCEPTION
+                        }
+                      >
+                        <BreadCrumbIconWrapper color={color} borderColor={borderColor}>
+                          <Icon />
+                        </BreadCrumbIconWrapper>
+                        <BreadcrumbRenderer breadcrumb={crumb as Breadcrumb} />
+                        <BreadcrumbTime timestamp={crumb.timestamp} />
+                      </BreadCrumb>
+                    );
+                  }
+                )}
+              </BreadCrumbs>
+            </PlatformContextProvider>
+          ) : (
+            <EmptyStateWarning small>
+              {t('Sorry, no breadcrumbs match your search query.')}
+            </EmptyStateWarning>
+          )}
+        </Content>
+      </EventDataSection>
+    );
+  }
+}
+
+export default BreadcrumbsContainer;
+
+const BreadCrumbs = styled('ul')`
+  padding-left: 0;
+  list-style: none;
+  margin-bottom: 0;
+`;
+
+const Content = styled('div')`
+  border: 1px solid ${p => p.theme.borderLight};
+  border-radius: 3px;
+  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.04);
+  margin-bottom: ${space(3)};
+`;
+
+const Search = styled('div')`
+  display: flex;
+  width: 100%;
+  margin-top: ${space(1)};
+
+  @media (min-width: ${props => props.theme.breakpoints[1]}) {
+    width: 400px;
+    margin-top: 0;
+  }
+
+  @media (min-width: ${props => props.theme.breakpoints[3]}) {
+    width: 600px;
+  }
+`;
+
+const StyledSearchBar = styled(SearchBar)`
+  width: 100%;
+  .search-input {
+    height: 32px;
+  }
+  .search-input,
+  .search-input:focus {
+    border-top-left-radius: 0;
+    border-bottom-left-radius: 0;
+  }
+  .icon-search {
+    height: 32px;
+    top: 0;
+    display: flex;
+    align-items: center;
+  }
+`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/convertBreadcrumbType.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/convertBreadcrumbType.tsx
new file mode 100644
index 0000000000..7da3639b29
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/convertBreadcrumbType.tsx
@@ -0,0 +1,39 @@
+import {Breadcrumb, BreadcrumbType} from '../breadcrumbs/types';
+
+function convertBreadcrumbType(breadcrumb: Breadcrumb): Breadcrumb {
+  // special case for 'ui.' and `sentry.` category breadcrumbs
+  // TODO: find a better way to customize UI around non-schema data
+  if (
+    (!breadcrumb.type || breadcrumb.type === BreadcrumbType.DEFAULT) &&
+    breadcrumb.category
+  ) {
+    const [category, subcategory] = breadcrumb.category.split('.');
+    if (category === 'ui') {
+      return {
+        ...breadcrumb,
+        type: BreadcrumbType.UI,
+      };
+    }
+
+    if (category === 'console' || category === 'navigation') {
+      return {
+        ...breadcrumb,
+        type: BreadcrumbType.DEBUG,
+      };
+    }
+
+    if (
+      category === 'sentry' &&
+      (subcategory === 'transaction' || subcategory === 'event')
+    ) {
+      return {
+        ...breadcrumb,
+        type: BreadcrumbType.EXCEPTION,
+      };
+    }
+  }
+
+  return breadcrumb;
+}
+
+export default convertBreadcrumbType;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/getBreadcrumbDetails.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/getBreadcrumbDetails.tsx
new file mode 100644
index 0000000000..569c0657c2
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/getBreadcrumbDetails.tsx
@@ -0,0 +1,74 @@
+import {
+  IconInfo,
+  IconWarning,
+  IconLocation,
+  IconUser,
+  IconRefresh,
+  IconTerminal,
+} from 'app/icons';
+import {t} from 'app/locale';
+
+import {BreadcrumbType, BreadcrumbDetails} from '../breadcrumbs/types';
+
+function getBreadcrumbDetails(breadcrumbType: BreadcrumbType): BreadcrumbDetails {
+  switch (breadcrumbType) {
+    case BreadcrumbType.USER:
+    case BreadcrumbType.UI: {
+      return {
+        color: 'purple',
+        icon: IconUser,
+        description: t('User Action'),
+      };
+    }
+    case BreadcrumbType.NAVIGATION: {
+      return {
+        color: 'blue',
+        icon: IconLocation,
+        description: t('Navigation'),
+      };
+    }
+    case BreadcrumbType.INFO: {
+      return {
+        color: 'blue',
+        icon: IconInfo,
+        description: t('Info'),
+      };
+    }
+    case BreadcrumbType.WARNING: {
+      return {
+        color: 'yellowOrange',
+        borderColor: 'yellowOrangeDark',
+        icon: IconWarning,
+        description: t('Warning'),
+      };
+    }
+    case BreadcrumbType.DEBUG: {
+      return {
+        icon: IconTerminal,
+        description: t('Debug'),
+      };
+    }
+    case BreadcrumbType.EXCEPTION:
+    case BreadcrumbType.MESSAGE: {
+      return {
+        color: 'red',
+        icon: IconWarning,
+        description: t('Error'),
+      };
+    }
+    case BreadcrumbType.HTTP: {
+      return {
+        color: 'green',
+        icon: IconRefresh,
+        description: t('HTTP request'),
+      };
+    }
+    default:
+      return {
+        icon: IconRefresh,
+        description: t('Others'),
+      };
+  }
+}
+
+export default getBreadcrumbDetails;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/styles.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/styles.tsx
new file mode 100644
index 0000000000..91bc3908ad
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/styles.tsx
@@ -0,0 +1,58 @@
+import styled from '@emotion/styled';
+import {css} from '@emotion/core';
+
+import {Color} from 'app/utils/theme';
+import space from 'app/styles/space';
+
+// TODO(style): the color #fffcfb and  #e7c0bc are not yet in theme and no similar theme's color was found.
+const BreadCrumb = styled('li')<{hasError?: boolean}>`
+  font-size: ${p => p.theme.fontSizeMedium};
+  position: relative;
+  padding: ${space(1)} ${space(3)} ${space(0.75)} ${space(3)} !important;
+  display: grid;
+  grid-template-columns: 26px 1fr 50px;
+  grid-gap: ${space(1.5)};
+  :before {
+    content: '';
+    display: block;
+    width: 2px;
+    top: 0;
+    bottom: 0;
+    left: 32px;
+    background: ${p => p.theme.borderLight};
+    position: absolute;
+  }
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+  :last-child:before {
+    bottom: calc(100% - ${space(1)});
+  }
+  ${p =>
+    p.hasError &&
+    css`
+      background: #fffcfb;
+      border: 1px solid #e7c0bc;
+      margin: -1px;
+    `}
+`;
+
+const BreadCrumbIconWrapper = styled('div')<{
+  color?: Color;
+  borderColor?: Color;
+  size?: number;
+}>`
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  width: ${p => (p.size ? `${p.size}px` : '26px')};
+  height: ${p => (p.size ? `${p.size}px` : '26px')};
+  background: ${p => p.theme.white};
+  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.08);
+  border-radius: 32px;
+  z-index: 1;
+  position: relative;
+  color: ${p => (p.color ? p.theme[p.color] : 'inherit')};
+  border-color: ${p => (p.borderColor ? p.theme[p.borderColor] : 'currentColor')};
+  border: 1px solid ${p => (p.color ? p.theme[p.color] : p.theme.gray2)};
+`;
+
+export {BreadCrumb, BreadCrumbIconWrapper};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
index d111aa41ed..fce37dd014 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
@@ -10,7 +10,7 @@ import GuideAnchor from 'app/components/assistant/guideAnchor';
 import Button from 'app/components/button';
 import Checkbox from 'app/components/checkbox';
 import DebugFileFeature from 'app/components/debugFileFeature';
-import EventDataSection, {SectionHeader} from 'app/components/events/eventDataSection';
+import EventDataSection from 'app/components/events/eventDataSection';
 import InlineSvg from 'app/components/inlineSvg';
 import {Panel, PanelBody, PanelItem} from 'app/components/panels';
 import Tooltip from 'app/components/tooltip';
@@ -479,6 +479,7 @@ class DebugMetaInterface extends React.PureComponent {
         title={titleElement}
         actions={this.renderToolbar()}
         wrapTitle={false}
+        isCentered
       >
         <ClippedBox clipHeight={350}>
           <DebugImagesPanel>
@@ -524,13 +525,6 @@ const Label = styled('label')`
 `;
 
 const StyledEventDataSection = styled(EventDataSection)`
-  ${SectionHeader} {
-    align-items: center;
-    @media (max-width: ${p => p.theme.breakpoints[0]}) {
-      display: block;
-    }
-  }
-
   @media (max-width: ${p => p.theme.breakpoints[0]}) {
     padding-bottom: ${space(4)};
   }
diff --git a/src/sentry/static/sentry/app/components/forms/formField.tsx b/src/sentry/static/sentry/app/components/forms/formField.tsx
index 3cb7bb2f4a..2470b0a674 100644
--- a/src/sentry/static/sentry/app/components/forms/formField.tsx
+++ b/src/sentry/static/sentry/app/components/forms/formField.tsx
@@ -67,16 +67,16 @@ export default class FormField<
     meta: PropTypes.any, // eslint-disable-line react/no-unused-prop-types
   };
 
+  static contextTypes = {
+    form: PropTypes.object,
+  };
+
   static defaultProps = {
     hideErrorMessage: false,
     disabled: false,
     required: false,
   };
 
-  static contextTypes = {
-    form: PropTypes.object,
-  };
-
   constructor(props: Props, context: Context) {
     super(props, context);
     this.state = {
diff --git a/src/sentry/static/sentry/app/icons/iconSearch.tsx b/src/sentry/static/sentry/app/icons/iconSearch.tsx
index 3dab396fec..e760133ec1 100644
--- a/src/sentry/static/sentry/app/icons/iconSearch.tsx
+++ b/src/sentry/static/sentry/app/icons/iconSearch.tsx
@@ -7,7 +7,7 @@ export const IconSearch = React.forwardRef(function IconSearch(
   {color: providedColor = 'currentColor', size: providedSize = 'sm', ...props}: IconProps,
   ref: React.Ref<SVGSVGElement>
 ) {
-  const color = providedColor;
+  const color = theme[providedColor] ?? providedColor;
   const size = theme.iconSizes[providedSize] ?? providedSize;
 
   return (
diff --git a/src/sentry/static/sentry/app/icons/index.tsx b/src/sentry/static/sentry/app/icons/index.tsx
index 4ce991cdb2..9cf916429a 100644
--- a/src/sentry/static/sentry/app/icons/index.tsx
+++ b/src/sentry/static/sentry/app/icons/index.tsx
@@ -76,3 +76,4 @@ export {IconUser} from './iconUser';
 export {IconVsts} from './iconVsts';
 export {IconWarning} from './iconWarning';
 export {IconWindow} from './iconWindow';
+export {IconTerminal} from './iconTerminal';
diff --git a/tests/js/spec/components/__snapshots__/toggleRawEventData.spec.jsx.snap b/tests/js/spec/components/__snapshots__/toggleRawEventData.spec.jsx.snap
index 371ab9ad21..0e4bfbfe97 100644
--- a/tests/js/spec/components/__snapshots__/toggleRawEventData.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/toggleRawEventData.spec.jsx.snap
@@ -6,6 +6,7 @@ exports[`EventDataSection renders formatted 1`] = `
 >
   <SectionHeader
     id="extra"
+    isCentered={false}
   >
     <Permalink
       className="permalink"
@@ -48,6 +49,7 @@ exports[`EventDataSection renders raw 1`] = `
 >
   <SectionHeader
     id="extra"
+    isCentered={false}
   >
     <Permalink
       className="permalink"
diff --git a/tests/js/spec/components/events/__snapshots__/sdkUpdates.spec.jsx.snap b/tests/js/spec/components/events/__snapshots__/sdkUpdates.spec.jsx.snap
index 4ffe577fe4..ef071f772f 100644
--- a/tests/js/spec/components/events/__snapshots__/sdkUpdates.spec.jsx.snap
+++ b/tests/js/spec/components/events/__snapshots__/sdkUpdates.spec.jsx.snap
@@ -29,6 +29,7 @@ exports[`EventSdkUpdates renders a suggestion to update the sdk and then enable
   }
 >
   <EventDataSection
+    isCentered={false}
     raw={false}
     title={null}
     type="sdk-updates"
diff --git a/tests/js/spec/components/forms/rangeField.spec.jsx b/tests/js/spec/components/forms/rangeField.spec.jsx
index 838151327c..879342b5f2 100644
--- a/tests/js/spec/components/forms/rangeField.spec.jsx
+++ b/tests/js/spec/components/forms/rangeField.spec.jsx
@@ -62,7 +62,7 @@ describe('RangeField', function() {
         },
       });
 
-      expect(wrapper.find('input').prop('value')).toBe(0);
+      expect(wrapper.find('[name="fieldName"]').prop('value')).toBe(0);
     });
   });
 });
diff --git a/tests/js/spec/views/sharedGroupDetails/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/sharedGroupDetails/__snapshots__/index.spec.jsx.snap
index 253f44dc3e..1d9c9371cb 100644
--- a/tests/js/spec/views/sharedGroupDetails/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/sharedGroupDetails/__snapshots__/index.spec.jsx.snap
@@ -569,6 +569,7 @@ exports[`SharedGroupDetails renders 1`] = `
                                   "title": "ApiException",
                                 }
                               }
+                              isCentered={false}
                               raw={false}
                               title="Message"
                               type="message"
@@ -582,6 +583,7 @@ exports[`SharedGroupDetails renders 1`] = `
                                 >
                                   <SectionHeader
                                     id="message"
+                                    isCentered={false}
                                   >
                                     <div
                                       className="css-zang02-SectionHeader e1fbjd861"
