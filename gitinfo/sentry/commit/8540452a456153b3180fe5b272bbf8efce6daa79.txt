commit 8540452a456153b3180fe5b272bbf8efce6daa79
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue May 21 17:57:32 2019 +0200

    feat: Project Option Epochs (#12995)
    
    This adds epoch based defaults support to project options. When a project is
    created the current epoch is frozen and defaults are resolved that were latest
    at the time of the project creation. Whenever new defaults should be
    introduced the epoch is incremented.
    
    This lets us opt new projects into newer JS loader versions or grouping configs.

diff --git a/src/sentry/api/endpoints/event_grouping_info.py b/src/sentry/api/endpoints/event_grouping_info.py
index bac10e15de..ec9ed4a66f 100644
--- a/src/sentry/api/endpoints/event_grouping_info.py
+++ b/src/sentry/api/endpoints/event_grouping_info.py
@@ -7,7 +7,7 @@ from django.http import HttpResponse
 from sentry import options
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.grouping.api import ConfigNotFoundException
+from sentry.grouping.api import GroupingConfigNotFound
 from sentry.models import Event, SnubaEvent
 from sentry.utils import json
 
@@ -42,7 +42,7 @@ class EventGroupingInfoEndpoint(ProjectEndpoint):
 
         try:
             variants = event.get_grouping_variants(config_name)
-        except ConfigNotFoundException:
+        except GroupingConfigNotFound:
             raise ResourceDoesNotExist(detail='Unknown grouping config')
 
         for (key, variant) in six.iteritems(variants):
diff --git a/src/sentry/api/endpoints/project_key_details.py b/src/sentry/api/endpoints/project_key_details.py
index c9fba3fcb2..8d2752111e 100644
--- a/src/sentry/api/endpoints/project_key_details.py
+++ b/src/sentry/api/endpoints/project_key_details.py
@@ -12,7 +12,7 @@ from sentry.api.serializers import serialize
 from sentry.models import AuditLogEntryEvent, ProjectKey, ProjectKeyStatus
 from sentry.utils.apidocs import scenario, attach_scenarios
 from sentry.loader.browsersdkversion import (
-    DEFAULT_VERSION,
+    get_default_sdk_version_for_project,
     get_browser_sdk_version_choices
 )
 
@@ -92,6 +92,7 @@ class ProjectKeyDetailsEndpoint(ProjectEndpoint):
             raise ResourceDoesNotExist
 
         serializer = KeySerializer(data=request.DATA, partial=True)
+        default_version = get_default_sdk_version_for_project(project)
 
         if serializer.is_valid():
             result = serializer.object
@@ -99,10 +100,10 @@ class ProjectKeyDetailsEndpoint(ProjectEndpoint):
             if result.get('name'):
                 key.label = result['name']
 
-            if result.get('browserSdkVersion') == '':
-                key.data = {'browserSdkVersion': DEFAULT_VERSION}
+            if not result.get('browserSdkVersion'):
+                key.data = {'browserSdkVersion': default_version}
             else:
-                key.data = {'browserSdkVersion': result.get('browserSdkVersion', DEFAULT_VERSION)}
+                key.data = {'browserSdkVersion': result['browserSdkVersion']}
 
             if result.get('isActive') is True:
                 key.status = ProjectKeyStatus.ACTIVE
diff --git a/src/sentry/api/endpoints/project_keys.py b/src/sentry/api/endpoints/project_keys.py
index 1638e6fbcc..19db2f9b7e 100644
--- a/src/sentry/api/endpoints/project_keys.py
+++ b/src/sentry/api/endpoints/project_keys.py
@@ -9,7 +9,6 @@ from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize
 from sentry.models import AuditLogEntryEvent, ProjectKey, ProjectKeyStatus
 from sentry.utils.apidocs import scenario, attach_scenarios
-from sentry.loader.browsersdkversion import DEFAULT_VERSION
 
 
 @scenario('ListClientKeys')
@@ -98,7 +97,6 @@ class ProjectKeysEndpoint(ProjectEndpoint):
                 label=result.get('name'),
                 public_key=result.get('public'),
                 secret_key=result.get('secret'),
-                data={'browserSdkVersion': DEFAULT_VERSION}
             )
 
             self.create_audit_entry(
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 7192538dda..d8829a2a5b 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -8,7 +8,7 @@ from django.db.models import Q
 from django.db.models.aggregates import Count
 from django.utils import timezone
 
-from sentry import options, roles, tsdb
+from sentry import options, roles, tsdb, projectoptions
 from sentry.api.serializers import register, serialize, Serializer
 from sentry.api.serializers.models.plugin import PluginSerializer
 from sentry.api.serializers.models.team import get_org_roles, get_team_memberships
@@ -20,8 +20,6 @@ from sentry.models import (
     EnvironmentProject, Project, ProjectAvatar, ProjectBookmark, ProjectOption, ProjectPlatform,
     ProjectStatus, ProjectTeam, Release, ReleaseProjectEnvironment, Deploy, UserOption, DEFAULT_SUBJECT_TEMPLATE
 )
-from sentry.grouping.strategies.configurations import DEFAULT_CONFIG as DEFAULT_GROUPING_CONFIG
-from sentry.grouping.enhancer import DEFAULT_ENHANCEMENT_BASE
 from sentry.utils.data_filters import FilterTypes
 from sentry.utils.db import is_postgres
 
@@ -406,6 +404,8 @@ def bulk_fetch_project_latest_releases(projects):
 class DetailedProjectSerializer(ProjectWithTeamSerializer):
     OPTION_KEYS = frozenset(
         [
+            # we need the epoch to fill in the defaults correctly
+            'sentry:option-epoch',
             'sentry:origins',
             'sentry:resolve_age',
             'sentry:scrub_data',
@@ -486,6 +486,13 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
     def serialize(self, obj, attrs, user):
         from sentry.plugins import plugins
 
+        def get_value_with_default(key):
+            value = attrs['options'].get(key)
+            if value is not None:
+                return value
+            return projectoptions.get_well_known_default(
+                key, epoch=attrs['options'].get('sentry:option-epoch'))
+
         data = super(DetailedProjectSerializer,
                      self).serialize(obj, attrs, user)
         data.update(
@@ -548,10 +555,10 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
                 'verifySSL': bool(attrs['options'].get('sentry:verify_ssl', False)),
                 'scrubIPAddresses': bool(attrs['options'].get('sentry:scrub_ip_address', False)),
                 'scrapeJavaScript': bool(attrs['options'].get('sentry:scrape_javascript', True)),
-                'groupingConfig': attrs['options'].get('sentry:grouping_config') or DEFAULT_GROUPING_CONFIG,
-                'groupingEnhancements': attrs['options'].get('sentry:grouping_enhancements') or u'',
-                'groupingEnhancementsBase': attrs['options'].get('sentry:grouping_enhancements_base') or DEFAULT_ENHANCEMENT_BASE,
-                'fingerprintingRules': attrs['options'].get('sentry:fingerprinting_rules') or u'',
+                'groupingConfig': get_value_with_default('sentry:grouping_config'),
+                'groupingEnhancements': get_value_with_default('sentry:grouping_enhancements'),
+                'groupingEnhancementsBase': get_value_with_default('sentry:grouping_enhancements_base'),
+                'fingerprintingRules': get_value_with_default('sentry:fingerprinting_rules'),
                 'organization':
                 attrs['org'],
                 'plugins':
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index ace9b3900c..677ac98b9d 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -23,7 +23,8 @@ from sentry.constants import (
 )
 from sentry.grouping.api import get_grouping_config_dict_for_project, \
     get_grouping_config_dict_for_event_data, load_grouping_config, \
-    apply_server_fingerprinting, get_fingerprinting_config_for_project
+    apply_server_fingerprinting, get_fingerprinting_config_for_project, \
+    GroupingConfigNotFound
 from sentry.coreapi import (
     APIError,
     APIForbidden,
@@ -675,7 +676,16 @@ class EventManager(object):
         # look at `grouping_config` to pick the right paramters.
         data['fingerprint'] = data.get('fingerprint') or ['{{ default }}']
         apply_server_fingerprinting(data, get_fingerprinting_config_for_project(project))
-        hashes = event.get_hashes()
+
+        # Here we try to use the grouping config that was requested in the
+        # event.  If that config has since been deleted (because it was an
+        # experimental grouping config) we fall back to the default.
+        try:
+            hashes = event.get_hashes()
+        except GroupingConfigNotFound:
+            data['grouping_config'] = get_grouping_config_dict_for_project(project)
+            hashes = event.get_hashes()
+
         data['hashes'] = hashes
 
         # we want to freeze not just the metadata and type in but also the
diff --git a/src/sentry/grouping/api.py b/src/sentry/grouping/api.py
index 0f7b9437c0..722a23e443 100644
--- a/src/sentry/grouping/api.py
+++ b/src/sentry/grouping/api.py
@@ -3,19 +3,18 @@ from __future__ import absolute_import
 import re
 import six
 
-from sentry.grouping.strategies.configurations import CONFIGURATIONS, DEFAULT_CONFIG
+from sentry.grouping.strategies.configurations import CONFIGURATIONS
 from sentry.grouping.component import GroupingComponent
 from sentry.grouping.variants import ChecksumVariant, FallbackVariant, \
     ComponentVariant, CustomFingerprintVariant, SaltedComponentVariant
-from sentry.grouping.enhancer import Enhancements, InvalidEnhancerConfig, \
-    DEFAULT_ENHANCEMENTS_CONFIG, DEFAULT_ENHANCEMENT_BASE, ENHANCEMENT_BASES
+from sentry.grouping.enhancer import Enhancements, InvalidEnhancerConfig, ENHANCEMENT_BASES
 from sentry.grouping.utils import DEFAULT_FINGERPRINT_VALUES, hash_from_values
 
 
 HASH_RE = re.compile(r'^[0-9a-f]{32}$')
 
 
-class ConfigNotFoundException(LookupError):
+class GroupingConfigNotFound(LookupError):
     pass
 
 
@@ -27,14 +26,8 @@ def get_grouping_config_dict_for_project(project, silent=True):
     This is called early on in normalization so that everything that is needed
     to group the project is pulled into the event.
     """
-    config_id = project.get_option('sentry:grouping_config')
-    if config_id is None:
-        config_id = DEFAULT_CONFIG
-    else:
-        if config_id not in CONFIGURATIONS:
-            if not silent:
-                raise ConfigNotFoundException(config_id)
-            config_id = DEFAULT_CONFIG
+    config_id = project.get_option('sentry:grouping_config',
+                                   validate=lambda x: x in CONFIGURATIONS)
 
     # At a later point we might want to store additional information here
     # such as frames that mark the end of a stacktrace and more.
@@ -52,12 +45,8 @@ def get_grouping_config_dict_for_event_data(data, project):
 
 def _get_project_enhancements_config(project):
     enhancements = project.get_option('sentry:grouping_enhancements')
-    enhancements_base = project.get_option('sentry:grouping_enhancements_base')
-    if not enhancements and not enhancements_base:
-        return DEFAULT_ENHANCEMENTS_CONFIG
-
-    if enhancements_base is None or enhancements_base not in ENHANCEMENT_BASES:
-        enhancements_base = DEFAULT_ENHANCEMENT_BASE
+    enhancements_base = project.get_option('sentry:grouping_enhancements_base',
+                                           validate=lambda x: x in ENHANCEMENT_BASES)
 
     # Instead of parsing and dumping out config here, we can make a
     # shortcut
@@ -71,20 +60,27 @@ def _get_project_enhancements_config(project):
 
     try:
         rv = Enhancements.from_config_string(
-            enhancements or '', bases=[enhancements_base]).dumps()
+            enhancements, bases=[enhancements_base]).dumps()
     except InvalidEnhancerConfig:
-        rv = DEFAULT_ENHANCEMENTS_CONFIG
+        rv = get_default_enhancements()
     cache.set(cache_key, rv)
     return rv
 
 
+def get_default_enhancements():
+    from sentry.projectoptions.defaults import DEFAULT_GROUPING_ENHANCEMENTS_BASE
+    return Enhancements(
+        rules=[], bases=[DEFAULT_GROUPING_ENHANCEMENTS_BASE]).dumps()
+
+
 def get_default_grouping_config_dict(id=None):
     """Returns the default grouping config."""
     if id is None:
-        id = DEFAULT_CONFIG
+        from sentry.projectoptions.defaults import DEFAULT_GROUPING_CONFIG
+        id = DEFAULT_GROUPING_CONFIG
     return {
         'id': id,
-        'enhancements': DEFAULT_ENHANCEMENTS_CONFIG,
+        'enhancements': get_default_enhancements(),
     }
 
 
@@ -97,7 +93,7 @@ def load_grouping_config(config_dict=None):
     config_dict = dict(config_dict)
     config_id = config_dict.pop('id')
     if config_id not in CONFIGURATIONS:
-        raise ConfigNotFoundException(config_id)
+        raise GroupingConfigNotFound(config_id)
     return CONFIGURATIONS[config_id](**config_dict)
 
 
@@ -116,8 +112,7 @@ def get_fingerprinting_config_for_project(project):
         return FingerprintingRules.from_json(rv)
 
     try:
-        rv = FingerprintingRules.from_config_string(
-            rules or '')
+        rv = FingerprintingRules.from_config_string(rules)
     except InvalidFingerprintingConfig:
         rv = FingerprintingRules([])
     cache.set(cache_key, rv.to_json())
diff --git a/src/sentry/grouping/enhancer.py b/src/sentry/grouping/enhancer.py
index 8521356e0f..f016f6d3dc 100644
--- a/src/sentry/grouping/enhancer.py
+++ b/src/sentry/grouping/enhancer.py
@@ -543,9 +543,4 @@ def _load_configs():
 
 
 ENHANCEMENT_BASES = _load_configs()
-LATEST_ENHANCEMENT_BASE = sorted(x for x in ENHANCEMENT_BASES
-                                 if x.startswith('common:'))[-1]
-DEFAULT_ENHANCEMENT_BASE = 'legacy:2019-03-12'
-DEFAULT_ENHANCEMENTS_CONFIG = Enhancements(rules=[], bases=[DEFAULT_ENHANCEMENT_BASE]).dumps()
-assert DEFAULT_ENHANCEMENT_BASE in ENHANCEMENT_BASES
 del _load_configs
diff --git a/src/sentry/grouping/strategies/configurations.py b/src/sentry/grouping/strategies/configurations.py
index 745d5467dd..9dbf0d6f8d 100644
--- a/src/sentry/grouping/strategies/configurations.py
+++ b/src/sentry/grouping/strategies/configurations.py
@@ -3,9 +3,6 @@ from __future__ import absolute_import
 from sentry.grouping.strategies.base import create_strategy_configuration
 
 
-# The latest version of the default config that should be used
-DEFAULT_CONFIG = 'legacy:2019-03-12'
-
 # The classes of grouping algorithms
 CLASSES = []
 
diff --git a/src/sentry/loader/browsersdkversion.py b/src/sentry/loader/browsersdkversion.py
index 4107c33164..7fe9fd8fe8 100644
--- a/src/sentry/loader/browsersdkversion.py
+++ b/src/sentry/loader/browsersdkversion.py
@@ -17,7 +17,6 @@ logger = logging.getLogger('sentry')
 
 _version_regexp = re.compile(r'^\d+\.\d+\.\d+$')  # We really only want stable releases
 LOADER_FOLDER = os.path.abspath(os.path.join(os.path.dirname(sentry.__file__), 'loader'))
-DEFAULT_VERSION = '4.x'  # DEFAULT_VERSION must exists, in case of 5.0 a new constant should be introduced
 
 
 @lru_cache(maxsize=10)
@@ -39,7 +38,7 @@ def get_highest_browser_sdk_version(versions):
 
 
 def get_browser_sdk_version_versions():
-    return ['latest', '5.x', DEFAULT_VERSION]
+    return ['latest', '5.x', '4.x']
 
 
 def get_browser_sdk_version_choices():
@@ -75,4 +74,9 @@ def get_browser_sdk_version(project_key):
 
 
 def get_selected_browser_sdk_version(project_key):
-    return project_key.data.get('browserSdkVersion', DEFAULT_VERSION)
+    return project_key.data.get('browserSdkVersion') or \
+        get_default_sdk_version_for_project(project_key.project)
+
+
+def get_default_sdk_version_for_project(project):
+    return project.get_option('sentry:default_loader_version')
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index fc68e914ea..4601bce784 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -12,8 +12,6 @@ import warnings
 from collections import defaultdict
 
 import six
-from pytz import utc
-from datetime import datetime
 from bitfield import BitField
 from django.conf import settings
 from django.db import IntegrityError, models, transaction
@@ -23,6 +21,7 @@ from django.utils.translation import ugettext_lazy as _
 from django.utils.http import urlencode
 from uuid import uuid1
 
+from sentry import projectoptions
 from sentry.app import locks
 from sentry.constants import ObjectStatus, RESERVED_PROJECT_SLUGS
 from sentry.db.mixin import PendingDeletionMixin, delete_pending_deletion_option
@@ -174,27 +173,16 @@ class Project(Model, PendingDeletionMixin):
 
     # TODO: Make these a mixin
     def update_option(self, *args, **kwargs):
-        from sentry.models import ProjectOption
-        self.update_rev_for_option()
-        return ProjectOption.objects.set_value(self, *args, **kwargs)
+        return projectoptions.set(self, *args, **kwargs)
 
     def get_option(self, *args, **kwargs):
-        from sentry.models import ProjectOption
-        return ProjectOption.objects.get_value(self, *args, **kwargs)
+        return projectoptions.get(self, *args, **kwargs)
 
     def delete_option(self, *args, **kwargs):
-        from sentry.models import ProjectOption
-        self.update_rev_for_option()
-        return ProjectOption.objects.unset_value(self, *args, **kwargs)
+        return projectoptions.delete(self, *args, **kwargs)
 
     def update_rev_for_option(self):
-        from sentry.models import ProjectOption
-        ProjectOption.objects.set_value(self, 'sentry:relay-rev', uuid1().hex)
-        ProjectOption.objects.set_value(
-            self,
-            'sentry:relay-rev-lastchange',
-            datetime.utcnow().replace(
-                tzinfo=utc))
+        return projectoptions.update_rev_for_option(self)
 
     @property
     def callsign(self):
diff --git a/src/sentry/models/projectoption.py b/src/sentry/models/projectoption.py
index 6819e0d7b8..f47ba3c76f 100644
--- a/src/sentry/models/projectoption.py
+++ b/src/sentry/models/projectoption.py
@@ -11,6 +11,7 @@ from celery.signals import task_postrun
 from django.core.signals import request_finished
 from django.db import models
 
+from sentry import projectoptions
 from sentry.db.models import Model, FlexibleForeignKey, sane_repr
 from sentry.db.models.fields import EncryptedPickledObjectField
 from sentry.db.models.manager import BaseManager
@@ -47,9 +48,16 @@ class ProjectOptionManager(BaseManager):
             result[instance_map[obj.project_id]] = obj.value
         return result
 
-    def get_value(self, project, key, default=None):
+    def get_value(self, project, key, default=None, validate=None):
         result = self.get_all_values(project)
-        return result.get(key, default)
+        if key in result:
+            if validate is None or validate(result[key]):
+                return result[key]
+        if default is None:
+            well_known_key = projectoptions.lookup_well_known_key(key)
+            if well_known_key is not None:
+                return well_known_key.get_default(project)
+        return default
 
     def unset_value(self, project, key):
         self.filter(project=project, key=key).delete()
diff --git a/src/sentry/projectoptions/__init__.py b/src/sentry/projectoptions/__init__.py
new file mode 100644
index 0000000000..586a6eb9cb
--- /dev/null
+++ b/src/sentry/projectoptions/__init__.py
@@ -0,0 +1,35 @@
+"""
+sentry.projectoptions
+~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2019 by the sentry team, see authors for more details.
+:license: bsd, see license for more details.
+"""
+from __future__ import absolute_import, print_function
+
+from .manager import ProjectOptionsManager
+
+__all__ = ('get', 'set', 'delete', 'register', 'isset', 'lookup_key')
+
+default_manager = ProjectOptionsManager()
+
+# expose public api
+get = default_manager.get
+set = default_manager.set
+delete = default_manager.delete
+register = default_manager.register
+all = default_manager.all
+isset = default_manager.isset
+lookup_well_known_key = default_manager.lookup_well_known_key
+update_rev_for_option = default_manager.update_rev_for_option
+
+
+def get_well_known_default(key, project=None, epoch=None):
+    """Utility function to return the default for a well known key."""
+    well_known_key = lookup_well_known_key(key)
+    if well_known_key is not None:
+        return well_known_key.get_default(project=project, epoch=epoch)
+
+
+from . import defaults  # NOQA
+from .defaults import LATEST_EPOCH  # NOQA
diff --git a/src/sentry/projectoptions/defaults.py b/src/sentry/projectoptions/defaults.py
new file mode 100644
index 0000000000..1b75e9a9c0
--- /dev/null
+++ b/src/sentry/projectoptions/defaults.py
@@ -0,0 +1,59 @@
+"""
+sentry.projectoptions.defaults
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2019 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+from sentry.projectoptions import register
+
+# latest epoch
+LATEST_EPOCH = 1
+
+# grouping related configs
+#
+# The default values are hardcoded because some grouping configs might
+# only exists temporarily for testing purposes.  If we delete them from
+# the codebase and a customer still has them set in the options we want to
+# fall back to the oldest config.
+#
+# TODO: we might instead want to fall back to the latest of the project's
+# epoch instead.
+DEFAULT_GROUPING_CONFIG = 'legacy:2019-03-12'
+register(
+    key='sentry:grouping_config',
+    epoch_defaults={
+        1: DEFAULT_GROUPING_CONFIG,
+        # 2: 'combined:2019-04-07',
+    }
+)
+
+# Grouping enhancements defaults
+DEFAULT_GROUPING_ENHANCEMENTS_BASE = 'legacy:2019-03-12'
+register(
+    key='sentry:grouping_enhancements_base',
+    epoch_defaults={
+        1: DEFAULT_GROUPING_ENHANCEMENTS_BASE,
+    }
+)
+register(
+    key='sentry:grouping_enhancements',
+    default=u''
+)
+
+# server side fingerprinting defaults.
+register(
+    key='sentry:fingerprinting_rules',
+    default=u''
+)
+
+# The JavaScript loader version that is the project default.  This option
+# is expected to be never set but the epoch defaults are used if no
+# version is set on a project's DSN.
+register(
+    key='sentry:default_loader_version',
+    epoch_defaults={
+        1: '4.x',
+    }
+)
diff --git a/src/sentry/projectoptions/manager.py b/src/sentry/projectoptions/manager.py
new file mode 100644
index 0000000000..9c9ba9613d
--- /dev/null
+++ b/src/sentry/projectoptions/manager.py
@@ -0,0 +1,105 @@
+"""
+sentry.projectoptions.manager
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2019 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+import six
+import uuid
+import bisect
+
+from datetime import datetime
+from pytz import utc
+
+
+class WellKnownProjectOption(object):
+
+    def __init__(self, key, default=None, epoch_defaults=None):
+        self.key = key
+        self.default = default
+        self.epoch_defaults = epoch_defaults
+        self._epoch_default_list = sorted(epoch_defaults or ())
+
+    def get_default(self, project=None, epoch=None):
+        if self.epoch_defaults:
+            if epoch is None:
+                if project is None:
+                    epoch = 1
+                else:
+                    epoch = project.get_option('sentry:option-epoch') or 1
+            idx = bisect.bisect(self._epoch_default_list, epoch)
+            if idx > 0:
+                return self.epoch_defaults[self._epoch_default_list[idx - 1]]
+        return self.default
+
+
+class ProjectOptionsManager(object):
+    """Project options used to be implemented in a relatively ad-hoc manner
+    in the past.  The project manager still uses the functionality of the
+    project model and just dispatches to it.
+
+    Options can be used without declaring defaults, but if defaults are
+    declared they are returned without having to define a default at the
+    time of the option lookup.
+    """
+
+    def __init__(self):
+        self.registry = {}
+
+    def lookup_well_known_key(self, key):
+        return self.registry.get(key)
+
+    def freeze_option_epoch(self, project, force=False):
+        # The options are frozen in a receiver hook for project saves.
+        # See `sentry.receivers.core.freeze_option_epoch_for_project`
+        if force or project.get_option('sentry:option-epoch') is None:
+            from .defaults import LATEST_EPOCH
+            project.update_option('sentry:option-epoch', LATEST_EPOCH)
+
+    def set(self, project, key, value):
+        from sentry.models import ProjectOption
+        self.update_rev_for_option(project)
+        return ProjectOption.objects.set_value(project, key, value)
+
+    def isset(self, project, key):
+        return project.get_option(project, key, Ellipsis) is not Ellipsis
+
+    def get(self, project, key, default=None, validate=None):
+        from sentry.models import ProjectOption
+        return ProjectOption.objects.get_value(
+            project, key, default, validate=validate)
+
+    def delete(self, project, key):
+        from sentry.models import ProjectOption
+        self.update_rev_for_option(project)
+        return ProjectOption.objects.unset_value(project, key)
+
+    def update_rev_for_option(self, project):
+        from sentry.models import ProjectOption
+        ProjectOption.objects.set_value(project, 'sentry:relay-rev', uuid.uuid4().hex)
+        ProjectOption.objects.set_value(
+            project,
+            'sentry:relay-rev-lastchange',
+            datetime.utcnow().replace(
+                tzinfo=utc))
+
+    def register(
+        self,
+        key,
+        default=None,
+        epoch_defaults=None,
+    ):
+        self.registry[key] = WellKnownProjectOption(
+            key=key,
+            default=default,
+            epoch_defaults=epoch_defaults,
+        )
+
+    def all(self):
+        """
+        Return an interator for all keys in the registry.
+        """
+        return six.itervalues(self.registry)
diff --git a/src/sentry/receivers/core.py b/src/sentry/receivers/core.py
index 9c4457b230..b14af21dfe 100644
--- a/src/sentry/receivers/core.py
+++ b/src/sentry/receivers/core.py
@@ -142,6 +142,20 @@ def create_keys_for_project(instance, created, app=None, **kwargs):
         )
 
 
+def freeze_option_epoch_for_project(instance, created, app=None, **kwargs):
+    if app and app.__name__ != 'sentry.models':
+        return
+
+    if not created or kwargs.get('raw'):
+        return
+
+    from sentry import projectoptions
+    projectoptions.default_manager.freeze_option_epoch(
+        project=instance,
+        force=False
+    )
+
+
 # Anything that relies on default objects that may not exist with default
 # fields should be wrapped in handle_db_failure
 post_syncdb.connect(
@@ -155,3 +169,9 @@ post_save.connect(
     dispatch_uid="create_keys_for_project",
     weak=False,
 )
+post_save.connect(
+    handle_db_failure(freeze_option_epoch_for_project),
+    sender=Project,
+    dispatch_uid="freeze_option_epoch_for_project",
+    weak=False,
+)
diff --git a/src/sentry/south_migrations/0481_auto__chg_field_projectcficachefile_debug_file__chg_field_projectsymca.py b/src/sentry/south_migrations/0481_auto__chg_field_projectcficachefile_debug_file__chg_field_projectsymca.py
index 833e13328e..8330ebf211 100644
--- a/src/sentry/south_migrations/0481_auto__chg_field_projectcficachefile_debug_file__chg_field_projectsymca.py
+++ b/src/sentry/south_migrations/0481_auto__chg_field_projectcficachefile_debug_file__chg_field_projectsymca.py
@@ -14,18 +14,32 @@ class Migration(SchemaMigration):
     def forwards(self, orm):
 
         # Changing field 'ProjectCfiCacheFile.debug_file'
-        db.alter_column('sentry_projectcficachefile', 'dsym_file_id', self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')(db_column='dsym_file_id'))
+        db.alter_column('sentry_projectcficachefile', 'dsym_file_id', self.gf(
+            'sentry.db.models.fields.bounded.BoundedBigIntegerField')(db_column='dsym_file_id'))
 
         # Changing field 'ProjectSymCacheFile.debug_file'
-        db.alter_column('sentry_projectsymcachefile', 'dsym_file_id', self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')(db_column='dsym_file_id'))
+        db.alter_column('sentry_projectsymcachefile', 'dsym_file_id', self.gf(
+            'sentry.db.models.fields.bounded.BoundedBigIntegerField')(db_column='dsym_file_id'))
 
     def backwards(self, orm):
 
         # Changing field 'ProjectCfiCacheFile.debug_file'
-        db.alter_column('sentry_projectcficachefile', 'dsym_file_id', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.ProjectDebugFile'], db_column='dsym_file_id', on_delete=models.DO_NOTHING))
+        db.alter_column(
+            'sentry_projectcficachefile',
+            'dsym_file_id',
+            self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                to=orm['sentry.ProjectDebugFile'],
+                db_column='dsym_file_id',
+                on_delete=models.DO_NOTHING))
 
         # Changing field 'ProjectSymCacheFile.debug_file'
-        db.alter_column('sentry_projectsymcachefile', 'dsym_file_id', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.ProjectDebugFile'], db_column='dsym_file_id', on_delete=models.DO_NOTHING))
+        db.alter_column(
+            'sentry_projectsymcachefile',
+            'dsym_file_id',
+            self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                to=orm['sentry.ProjectDebugFile'],
+                db_column='dsym_file_id',
+                on_delete=models.DO_NOTHING))
 
     models = {
         'sentry.activity': {
@@ -1412,4 +1426,4 @@ class Migration(SchemaMigration):
         }
     }
 
-    complete_apps = ['sentry']
\ No newline at end of file
+    complete_apps = ['sentry']
diff --git a/src/sentry/south_migrations/0482_auto__del_projectcficachefile__del_unique_projectcficachefile_project_.py b/src/sentry/south_migrations/0482_auto__del_projectcficachefile__del_unique_projectcficachefile_project_.py
index 7f2c3a95ab..8ae85d59e7 100644
--- a/src/sentry/south_migrations/0482_auto__del_projectcficachefile__del_unique_projectcficachefile_project_.py
+++ b/src/sentry/south_migrations/0482_auto__del_projectcficachefile__del_unique_projectcficachefile_project_.py
@@ -24,15 +24,17 @@ class Migration(SchemaMigration):
         # Deleting model 'ProjectSymCacheFile'
         db.delete_table(u'sentry_projectsymcachefile')
 
-
     def backwards(self, orm):
         # Adding model 'ProjectCfiCacheFile'
         db.create_table(u'sentry_projectcficachefile', (
-            ('project', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.Project'], null=True)),
+            ('project', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                to=orm['sentry.Project'], null=True)),
             ('version', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
             ('checksum', self.gf('django.db.models.fields.CharField')(max_length=40)),
-            ('debug_file', self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')(db_column='dsym_file_id', db_index=True)),
-            ('cache_file', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.File'])),
+            ('debug_file', self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')(
+                db_column='dsym_file_id', db_index=True)),
+            ('cache_file', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                to=orm['sentry.File'])),
             ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
         ))
         db.send_create_signal('sentry', ['ProjectCfiCacheFile'])
@@ -42,11 +44,14 @@ class Migration(SchemaMigration):
 
         # Adding model 'ProjectSymCacheFile'
         db.create_table(u'sentry_projectsymcachefile', (
-            ('project', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.Project'], null=True)),
+            ('project', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                to=orm['sentry.Project'], null=True)),
             ('version', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
             ('checksum', self.gf('django.db.models.fields.CharField')(max_length=40)),
-            ('debug_file', self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')(db_column='dsym_file_id', db_index=True)),
-            ('cache_file', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.File'])),
+            ('debug_file', self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')(
+                db_column='dsym_file_id', db_index=True)),
+            ('cache_file', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                to=orm['sentry.File'])),
             ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
         ))
         db.send_create_signal('sentry', ['ProjectSymCacheFile'])
@@ -54,7 +59,6 @@ class Migration(SchemaMigration):
         # Adding unique constraint on 'ProjectSymCacheFile', fields ['project', 'debug_file']
         db.create_unique(u'sentry_projectsymcachefile', [u'project_id', 'dsym_file_id'])
 
-
     models = {
         'sentry.activity': {
             'Meta': {'unique_together': '()', 'object_name': 'Activity', 'index_together': '()'},
diff --git a/src/sentry/utils/pytest/fixtures.py b/src/sentry/utils/pytest/fixtures.py
index 3086bb1037..791b8e27e5 100644
--- a/src/sentry/utils/pytest/fixtures.py
+++ b/src/sentry/utils/pytest/fixtures.py
@@ -149,6 +149,16 @@ def factories():
     return Factories
 
 
+@pytest.mark.django_db
+@pytest.fixture
+def project(team, factories):
+    return factories.create_project(
+        name='bar',
+        slug='bar',
+        teams=[team]
+    )
+
+
 @pytest.fixture
 def task_runner():
     from sentry.testutils.helpers.task_runner import TaskRunner
diff --git a/src/sentry/web/frontend/js_sdk_loader.py b/src/sentry/web/frontend/js_sdk_loader.py
index 0acd96bd72..b9e53ad1e5 100644
--- a/src/sentry/web/frontend/js_sdk_loader.py
+++ b/src/sentry/web/frontend/js_sdk_loader.py
@@ -6,7 +6,7 @@ from django.conf import settings
 
 from sentry.relay import config
 from sentry.utils import metrics
-from sentry.models import ProjectKey
+from sentry.models import ProjectKey, Project
 from sentry.web.frontend.base import BaseView
 from sentry.web.helpers import render_to_response
 from sentry.loader.browsersdkversion import get_browser_sdk_version
@@ -49,6 +49,8 @@ class JavaScriptSdkLoader(BaseView):
             )
         except ProjectKey.DoesNotExist:
             pass
+        else:
+            key.project = Project.objects.get_from_cache(id=key.project_id)
 
         context, sdk_version, sdk_url = self._get_context(key)
 
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 83dfe42f22..2cdb10ce98 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -39,7 +39,7 @@ class MailPluginTest(TestCase):
         return MailPlugin()
 
     @mock.patch(
-        'sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d)
+        'sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d, **kw: d)
     )
     @mock.patch(
         'sentry.plugins.sentry_mail.models.MailPlugin.get_sendable_users', Mock(return_value=[])
@@ -289,7 +289,11 @@ class MailPluginTest(TestCase):
 
     @mock.patch(
         'sentry.models.ProjectOption.objects.get_value',
-        Mock(side_effect=lambda p, k, d: "[Example prefix] " if k == "mail:subject_prefix" else d)
+        Mock(
+            side_effect=lambda p,
+            k,
+            d,
+            **kw: "[Example prefix] " if k == "mail:subject_prefix" else d)
     )
     def test_notify_digest_subject_prefix(self):
         project = self.event.project
diff --git a/tests/sentry/projectoptions/__init__.py b/tests/sentry/projectoptions/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/projectoptions/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/projectoptions/test_basic.py b/tests/sentry/projectoptions/test_basic.py
new file mode 100644
index 0000000000..f49d1babad
--- /dev/null
+++ b/tests/sentry/projectoptions/test_basic.py
@@ -0,0 +1,69 @@
+from __future__ import absolute_import
+
+import pytest
+
+from contextlib import contextmanager
+
+from sentry.projectoptions import defaults, default_manager
+from sentry.projectoptions.manager import WellKnownProjectOption
+from sentry.models import ProjectOption
+
+
+@contextmanager
+def latest_epoch(value):
+    old = defaults.LATEST_EPOCH
+    try:
+        defaults.LATEST_EPOCH = value
+        yield
+    finally:
+        defaults.LATEST_EPOCH = old
+
+
+@pytest.mark.django_db
+def test_defaults(default_project):
+    default_manager.register(
+        key='__sentry_test:test-option',
+        epoch_defaults={
+            1: 'whatever',
+            10: 'new-value',
+            42: 'latest-value',
+        }
+    )
+
+    assert default_project.get_option('__sentry_test:test-option') == 'whatever'
+
+    with latest_epoch(42):
+        default_manager.freeze_option_epoch(default_project, force=True)
+        ProjectOption.objects.reload_cache(default_project.id)
+
+    assert default_project.get_option('__sentry_test:test-option') == 'latest-value'
+
+
+@pytest.mark.django_db
+def freeze_option(factories, default_team):
+    with latest_epoch(42):
+        project = factories.create_project(
+            name='Bar',
+            slug='bar',
+            teams=[default_team],
+        )
+        assert project.get_option('sentry:option-epoch', defaults.LATEST_EPOCH)
+
+
+def test_epoch_defaults():
+    option = WellKnownProjectOption(
+        key='__sentry_test:test-option',
+        epoch_defaults={
+            1: 'whatever',
+            10: 'new-value',
+            42: 'latest-value',
+        },
+        default='default'
+    )
+
+    assert option.get_default(epoch=0) == 'default'
+    assert option.get_default(epoch=1) == 'whatever'
+    assert option.get_default(epoch=10) == 'new-value'
+    assert option.get_default(epoch=20) == 'new-value'
+    assert option.get_default(epoch=42) == 'latest-value'
+    assert option.get_default(epoch=100) == 'latest-value'
diff --git a/tests/sentry/web/frontend/test_js_sdk_loader.py b/tests/sentry/web/frontend/test_js_sdk_loader.py
index 65ae317188..583897938b 100644
--- a/tests/sentry/web/frontend/test_js_sdk_loader.py
+++ b/tests/sentry/web/frontend/test_js_sdk_loader.py
@@ -6,7 +6,6 @@ from django.conf import settings
 from django.core.urlresolvers import reverse
 
 from sentry.testutils import TestCase
-from sentry.loader.browsersdkversion import DEFAULT_VERSION
 
 
 class JavaScriptSdkLoaderTest(TestCase):
@@ -61,7 +60,7 @@ class JavaScriptSdkLoaderTest(TestCase):
     def test_headers(self, mock_load_version_from_file):
         #  We want to always load the major version here since otherwise we fall back to
         #  the default value which isn't correct.
-        mocked_version = '%s.9.9' % DEFAULT_VERSION[0]
+        mocked_version = '4.9.9'
         mock_load_version_from_file.return_value = [mocked_version]
 
         resp = self.client.get(self.path)
