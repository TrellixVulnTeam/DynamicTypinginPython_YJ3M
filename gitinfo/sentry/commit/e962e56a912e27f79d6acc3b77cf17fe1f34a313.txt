commit e962e56a912e27f79d6acc3b77cf17fe1f34a313
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Oct 26 12:43:00 2017 -0700

    feat: Add first-time password specific recovery confirmation

diff --git a/src/sentry/models/lostpasswordhash.py b/src/sentry/models/lostpasswordhash.py
index 0ecaf3d162..20668dd9fa 100644
--- a/src/sentry/models/lostpasswordhash.py
+++ b/src/sentry/models/lostpasswordhash.py
@@ -45,12 +45,14 @@ class LostPasswordHash(Model):
     def is_valid(self):
         return self.date_added > timezone.now() - timedelta(hours=48)
 
-    def get_absolute_url(self):
-        return absolute_uri(
-            reverse('sentry-account-recover-confirm', args=[self.user.id, self.hash])
-        )
+    def get_absolute_url(self, mode='recover'):
+        url_key = 'sentry-account-recover-confirm'
+        if mode == 'set_password':
+            url_key = 'sentry-account-set-password-confirm'
+
+        return absolute_uri(reverse(url_key, args=[self.user.id, self.hash]))
 
-    def send_recover_mail(self, request):
+    def send_email(self, request, mode='recover'):
         from sentry import options
         from sentry.http import get_server_hostname
         from sentry.utils.email import MessageBuilder
@@ -58,16 +60,28 @@ class LostPasswordHash(Model):
         context = {
             'user': self.user,
             'domain': get_server_hostname(),
-            'url': self.get_absolute_url(),
+            'url': self.get_absolute_url(mode),
             'datetime': timezone.now(),
             'ip_address': request.META['REMOTE_ADDR'],
         }
 
+        template = 'set_password' if mode == 'set_password' else 'recover_account'
+
         msg = MessageBuilder(
-            subject='%sPassword Recovery' % (options.get('mail.subject-prefix'), ),
-            template='sentry/emails/recover_account.txt',
-            html_template='sentry/emails/recover_account.html',
+            subject='{}Password Recovery'.format(options.get('mail.subject-prefix')),
+            template='sentry/emails/{name}.txt'.format(name=template),
+            html_template='sentry/emails/{name}.html'.format(name=template),
             type='user.password_recovery',
             context=context,
         )
         msg.send_async([self.user.email])
+
+    @classmethod
+    def for_user(cls, user):
+        password_hash, created = cls.objects.get_or_create(user=user)
+        if not password_hash.is_valid():
+            password_hash.date_added = timezone.now()
+            password_hash.set_hash()
+            password_hash.save()
+
+        return password_hash
diff --git a/src/sentry/templates/sentry/account/set_password/confirm.html b/src/sentry/templates/sentry/account/set_password/confirm.html
new file mode 100644
index 0000000000..8c3b020bee
--- /dev/null
+++ b/src/sentry/templates/sentry/account/set_password/confirm.html
@@ -0,0 +1,24 @@
+{% extends "sentry/bases/auth.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+
+{% block title %}{% trans "Set Password" %} | {{ block.super }}{% endblock %}
+
+{% block auth_main %}
+    <h3>{% trans "Set Password" %}</h3>
+
+    <p>{% trans "Set your account password below." %}</p>
+    <form method="POST" action="">
+        {% csrf_token %}
+        {{ form|as_crispy_errors }}
+
+        {% for field in form %}
+        	{{ field|as_crispy_field }}
+        {% endfor %}
+
+        <fieldset class="form-actions">
+            <button type="submit" class="btn btn-primary">{% trans "Set Password" %}</button>
+        </fieldset>
+    </form>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/account/set_password/failure.html b/src/sentry/templates/sentry/account/set_password/failure.html
new file mode 100644
index 0000000000..d4a9ff2e56
--- /dev/null
+++ b/src/sentry/templates/sentry/account/set_password/failure.html
@@ -0,0 +1,14 @@
+{% extends "sentry/bases/auth.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+
+{% block title %}{% trans "Set Password" %} | {{ block.super }}{% endblock %}
+
+{% block auth_main %}
+	<h3>{% trans "Set Password" %}</h3>
+	<p>{% blocktrans %}This password link has expired. Request a new password recovery code to set
+	your account password{% endblocktrans %}</p>
+
+	<p><a href="{% url 'sentry-account-recover' %}" class="btn btn-primary">Request Reset Code</a></p>
+{% endblock %}
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 2ecef105c0..18a7bf3213 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -8,6 +8,7 @@ sentry.web.frontend.accounts
 from __future__ import absolute_import
 
 import logging
+from functools import partial, update_wrapper
 
 import six
 
@@ -43,16 +44,6 @@ from sentry.utils import auth
 logger = logging.getLogger('sentry.accounts')
 
 
-def send_password_recovery_mail(request, user):
-    password_hash, created = LostPasswordHash.objects.get_or_create(user=user)
-    if not password_hash.is_valid():
-        password_hash.date_added = timezone.now()
-        password_hash.set_hash()
-        password_hash.save()
-    password_hash.send_recover_mail(request)
-    return password_hash
-
-
 @login_required
 def login_redirect(request):
     login_url = auth.get_login_redirect(request)
@@ -60,12 +51,11 @@ def login_redirect(request):
 
 
 def expired(request, user):
-    password_hash = send_password_recovery_mail(request, user)
-    return render_to_response(
-        'sentry/account/recover/expired.html', {
-            'email': password_hash.user.email,
-        }, request
-    )
+    password_hash = LostPasswordHash.for_user(user)
+    password_hash.send_email(request)
+
+    context = {'email': password_hash.user.email}
+    return render_to_response('sentry/account/recover/expired.html', context, request)
 
 
 def recover(request):
@@ -88,31 +78,40 @@ def recover(request):
         )
         logger.warning('recover.rate-limited', extra=extra)
 
-    form = RecoverPasswordForm(request.POST or None)
+    prefill = {'user': request.GET.get('email')}
+
+    form = RecoverPasswordForm(request.POST or None, initial=prefill)
     extra['user_recovered'] = form.data.get('user')
 
     if form.is_valid():
-        password_hash = send_password_recovery_mail(request, form.cleaned_data['user'])
+        email = form.cleaned_data['user']
+        password_hash = LostPasswordHash.for_user(email)
+        password_hash.send_email(request)
 
         extra['passwordhash_id'] = password_hash.id
         extra['user_id'] = password_hash.user_id
 
         logger.info('recover.sent', extra=extra)
-        return render_to_response(
-            'sentry/account/recover/sent.html', {
-                'email': password_hash.user.email,
-            }, request
-        )
 
-    context = {
-        'form': form,
-    }
+        tpl = 'sentry/account/recover/sent.html'
+        context = {'email': password_hash.user.email}
+
+        return render_to_response(tpl, context, request)
+
     if form._errors:
         logger.warning('recover.error', extra=extra)
-    return render_to_response('sentry/account/recover/index.html', context, request)
+
+    tpl = 'sentry/account/recover/index.html'
+    context = {'form': form}
+
+    return render_to_response(tpl, context, request)
+
+
+def get_template(name, mode):
+    return 'sentry/account/{}/{}.html'.format(mode, name)
 
 
-def recover_confirm(request, user_id, hash):
+def recover_confirm(request, user_id, hash, mode='recover'):
     try:
         password_hash = LostPasswordHash.objects.get(user=user_id, hash=hash)
         if not password_hash.is_valid():
@@ -121,49 +120,50 @@ def recover_confirm(request, user_id, hash):
         user = password_hash.user
 
     except LostPasswordHash.DoesNotExist:
-        context = {}
-        tpl = 'sentry/account/recover/failure.html'
+        tpl = get_template('failure', mode)
+        return render_to_response(tpl, {}, request)
 
-    else:
-        tpl = 'sentry/account/recover/confirm.html'
-
-        if request.method == 'POST':
-            form = ChangePasswordRecoverForm(request.POST)
-            if form.is_valid():
-                with transaction.atomic():
-                    user.set_password(form.cleaned_data['password'])
-                    user.refresh_session_nonce(request)
-                    user.save()
-
-                    # Ugly way of doing this, but Django requires the backend be set
-                    user = authenticate(
-                        username=user.username,
-                        password=form.cleaned_data['password'],
-                    )
+    if request.method == 'POST':
+        form = ChangePasswordRecoverForm(request.POST)
+        if form.is_valid():
+            with transaction.atomic():
+                user.set_password(form.cleaned_data['password'])
+                user.refresh_session_nonce(request)
+                user.save()
+
+                # Ugly way of doing this, but Django requires the backend be set
+                user = authenticate(
+                    username=user.username,
+                    password=form.cleaned_data['password'],
+                )
 
-                    login_user(request, user)
+                login_user(request, user)
 
-                    password_hash.delete()
+                password_hash.delete()
 
-                    capture_security_activity(
-                        account=user,
-                        type='password-changed',
-                        actor=request.user,
-                        ip_address=request.META['REMOTE_ADDR'],
-                        send_email=True,
-                    )
+                capture_security_activity(
+                    account=user,
+                    type='password-changed',
+                    actor=request.user,
+                    ip_address=request.META['REMOTE_ADDR'],
+                    send_email=True,
+                )
 
-                return login_redirect(request)
-        else:
-            form = ChangePasswordRecoverForm()
+            return login_redirect(request)
+    else:
+        form = ChangePasswordRecoverForm()
 
-        context = {
-            'form': form,
-        }
+    tpl = get_template('confirm', mode)
+    context = {'form': form}
 
     return render_to_response(tpl, context, request)
 
 
+# Set password variation of password recovery
+set_password_confirm = partial(recover_confirm, mode='set_password')
+set_password_confirm = update_wrapper(set_password_confirm, recover)
+
+
 @login_required
 @require_http_methods(["POST"])
 def start_confirm_email(request):
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 3da0619d26..5555d67066 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -197,6 +197,11 @@ urlpatterns += patterns(
         accounts.recover_confirm,
         name='sentry-account-recover-confirm'
     ),
+    url(
+        r'^account/password/confirm/(?P<user_id>[\d]+)/(?P<hash>[0-9a-zA-Z]+)/$',
+        accounts.set_password_confirm,
+        name='sentry-account-set-password-confirm'
+    ),
     url(r'^account/settings/$', accounts.account_settings,
         name='sentry-account-settings'),
     url(
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index 1d7f5c4eeb..558d5df405 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -65,7 +65,7 @@ class LostPasswordTest(TestCase):
         request.META['REMOTE_ADDR'] = '1.1.1.1'
 
         with self.options({'system.url-prefix': 'http://testserver'}), self.tasks():
-            self.password_hash.send_recover_mail(request)
+            self.password_hash.send_email(request)
 
         assert len(mail.outbox) == 1
         msg = mail.outbox[0]
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index 442f41bfaa..f2fa2850b2 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -263,7 +263,7 @@ class RecoverPasswordTest(TestCase):
         assert 'form' in resp.context
         assert 'user' in resp.context['form'].errors
 
-    @mock.patch('sentry.models.LostPasswordHash.send_recover_mail')
+    @mock.patch('sentry.models.LostPasswordHash.send_email')
     def test_valid_username(self, send_recover_mail):
         resp = self.client.post(self.path, {
             'user': self.user.username
