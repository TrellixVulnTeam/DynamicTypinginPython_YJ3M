commit 1e79db5d353ca28a307cbc355a86bdf20fc3e770
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 26 19:03:41 2013 -0700

    Move mail specific functions and add basic test for alert emails

diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index edd14176c8..dc4e0ca467 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -8,8 +8,7 @@ sentry.plugins.bases.notify
 from django import forms
 from django.utils.translation import ugettext_lazy as _
 from sentry.plugins import Plugin
-from sentry.models import UserOption, User, AccessGroup
-from sentry.utils.cache import cache
+from sentry.models import UserOption, AccessGroup
 
 
 class NotificationConfigurationForm(forms.Form):
@@ -69,68 +68,9 @@ class NotificationPlugin(Plugin):
 
         return member_set
 
-    def get_emails_for_users(self, user_ids, project=None):
-        email_list = set()
-        user_ids = set(user_ids)
-
-        if project:
-            alert_queryset = UserOption.objects.filter(
-                project=project,
-                user__in=user_ids,
-                key='mail:email',
-            )
-            for option in alert_queryset:
-                user_ids.remove(option.user_id)
-                email_list.add(option.value)
-
-        if user_ids:
-            alert_queryset = UserOption.objects.filter(
-                user__in=user_ids,
-                key='alert_email',
-            )
-            for option in alert_queryset:
-                user_ids.remove(option.user_id)
-                email_list.add(option.value)
-
-        if user_ids:
-            email_list |= set(User.objects.filter(
-                pk__in=user_ids, is_active=True
-            ).values_list('email', flat=True))
-
-        return email_list
-
-    def get_send_to(self, project=None):
-        """
-        Returns a list of email addresses for the users that should be notified of alerts.
-
-        The logic for this is a bit complicated, but it does the following:
-
-        The results of this call can be fairly expensive to calculate, so the send_to list gets cached
-        for 60 seconds.
-        """
-        if project:
-            project_id = project.pk
-        else:
-            project_id = ''
-        conf_key = self.get_conf_key()
-        cache_key = '%s:send_to:%s' % (conf_key, project_id)
-
-        send_to_list = cache.get(cache_key)
-        if send_to_list is None:
-            send_to_list = set()
-
-            if project and project.team:
-                member_set = self.get_sendable_users(project)
-                send_to_list |= set(self.get_emails_for_users(
-                    member_set, project=project))
-
-            send_to_list = filter(bool, send_to_list)
-            cache.set(cache_key, send_to_list, 60)  # 1 minute cache
-        return send_to_list
-
     def should_notify(self, group, event):
         project = group.project
-        send_to = self.get_send_to(project)
+        send_to = self.get_sendable_users(project)
         if not send_to:
             return False
 
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 8930302156..ecaf12c28b 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -12,8 +12,10 @@ from django.core.urlresolvers import reverse
 from django.template.loader import render_to_string
 from django.utils.translation import ugettext_lazy as _
 from sentry.conf import settings
+from sentry.models import User, UserOption
 from sentry.plugins import register
 from sentry.plugins.bases.notify import NotificationPlugin
+from sentry.utils.cache import cache
 from sentry.utils.http import absolute_uri
 
 from pynliner import Pynliner
@@ -107,6 +109,65 @@ class MailPlugin(NotificationPlugin):
             'settings_link': self.get_notification_settings_url(),
         })).run()
 
+    def get_emails_for_users(self, user_ids, project=None):
+        email_list = set()
+        user_ids = set(user_ids)
+
+        if project:
+            alert_queryset = UserOption.objects.filter(
+                project=project,
+                user__in=user_ids,
+                key='mail:email',
+            )
+            for option in alert_queryset:
+                user_ids.remove(option.user_id)
+                email_list.add(option.value)
+
+        if user_ids:
+            alert_queryset = UserOption.objects.filter(
+                user__in=user_ids,
+                key='alert_email',
+            )
+            for option in alert_queryset:
+                user_ids.remove(option.user_id)
+                email_list.add(option.value)
+
+        if user_ids:
+            email_list |= set(User.objects.filter(
+                pk__in=user_ids, is_active=True
+            ).values_list('email', flat=True))
+
+        return email_list
+
+    def get_send_to(self, project=None):
+        """
+        Returns a list of email addresses for the users that should be notified of alerts.
+
+        The logic for this is a bit complicated, but it does the following:
+
+        The results of this call can be fairly expensive to calculate, so the send_to list gets cached
+        for 60 seconds.
+        """
+        if project:
+            project_id = project.pk
+        else:
+            project_id = ''
+        conf_key = self.get_conf_key()
+        cache_key = '%s:send_to:%s' % (conf_key, project_id)
+
+        send_to_list = cache.get(cache_key)
+        if send_to_list is None:
+            send_to_list = set()
+
+            if project and project.team:
+                member_set = self.get_sendable_users(project)
+                send_to_list |= set(self.get_emails_for_users(
+                    member_set, project=project))
+
+            send_to_list = filter(bool, send_to_list)
+            cache.set(cache_key, send_to_list, 60)  # 1 minute cache
+        return send_to_list
+
     def notify_users(self, group, event, fail_silently=False):
         project = group.project
 
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index f3b956677f..e3fad32815 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -17,8 +17,8 @@ class MailPluginTest(TestCase):
         return MailPlugin()
 
     @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
-    @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin.get_send_to', Mock(return_value=[]))
-    def test_should_notify_no_send_to(self):
+    @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin.get_sendable_users', Mock(return_value=[]))
+    def test_should_notify_no_sendable_users(self):
         assert not self.plugin.should_notify(group=Mock(), event=Mock())
 
     @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin._send_mail')
@@ -152,16 +152,23 @@ class MailPluginTest(TestCase):
     def test_get_emails_for_users(self):
         from sentry.models import UserOption, User
 
+        project = self.project
+
         user = User.objects.create(username='foo', email='foo@example.com')
         user2 = User.objects.create(username='baz', email='baz@example.com')
+        user3 = User.objects.create(username='bar', email='bar@example.com')
 
-        assert (sorted(self.plugin.get_emails_for_users([user.pk, user2.pk])) ==
-                sorted([user.email, user2.email]))
+        result = sorted(self.plugin.get_emails_for_users([user.pk, user2.pk, user3.pk]))
+        assert result == sorted([user.email, user2.email, user3.email])
 
-        UserOption.objects.create(key='alert_email', value='foobaz@example.com', user=user2)
+        UserOption.objects.create(
+            key='alert_email', value='foobaz@example.com', user=user2)
+        UserOption.objects.create(
+            key='mail:email', value='foobar@example.com', user=user3, project=project)
 
-        assert (sorted(self.plugin.get_emails_for_users([user.pk, user2.pk])) ==
-                sorted([user.email, 'foobaz@example.com']))
+        result = sorted(self.plugin.get_emails_for_users(
+            [user.pk, user2.pk, user3.pk], project=project))
+        assert result == sorted([user.email, 'foobar@example.com', 'foobaz@example.com'])
 
     def test_get_sendable_users(self):
         from sentry.models import Project, UserOption, User
