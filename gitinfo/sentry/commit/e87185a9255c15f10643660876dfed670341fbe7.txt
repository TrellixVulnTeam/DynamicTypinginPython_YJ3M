commit e87185a9255c15f10643660876dfed670341fbe7
Author: Sarah Lohmeier <sarah.lohmeier@sentry.io>
Date:   Tue May 5 11:35:48 2020 -0700

    fix(ui): Reflect user clock preference on charts (#18603)
    
    fix(ui): Reflect user clock preference on charts
    
    The echart elements in setry have only been displaying 12-hour clock labels (ie, AM/PM),
    even when user preferences are set to use 24 hour clocks. This commit fixes that, and all
    charts on Sentry should now reflect user clock preferences in their x-axis labels and in tooltips.
    
    This doesn't affect svg-based bar charts, which have correctly been displaying times in the
    format specified by the user's clock preferences.

diff --git a/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx b/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
index 0a4dfb0a40..051d3369cd 100644
--- a/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
+++ b/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
@@ -1,6 +1,6 @@
 import 'echarts/lib/component/tooltip';
 
-import {getFormattedDate} from 'app/utils/dates';
+import {getFormattedDate, getTimeFormat} from 'app/utils/dates';
 
 import {truncationFormatter} from '../utils';
 
@@ -8,7 +8,7 @@ function defaultFormatAxisLabel(value, isTimestamp, utc, showTimeInTooltip) {
   if (!isTimestamp) {
     return value;
   }
-  const format = `MMM D, YYYY${showTimeInTooltip ? ' LT' : ''}`;
+  const format = `MMM D, YYYY ${showTimeInTooltip ? getTimeFormat() : ''}`.trim();
 
   return getFormattedDate(value, format, {local: !utc});
 }
diff --git a/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx b/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx
index 490e38d137..4e883c03b2 100644
--- a/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx
+++ b/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx
@@ -1,4 +1,4 @@
-import {getFormattedDate} from 'app/utils/dates';
+import {getFormattedDate, getTimeFormat} from 'app/utils/dates';
 import theme from 'app/utils/theme';
 
 import {truncationFormatter, useShortInterval} from '../utils';
@@ -18,10 +18,11 @@ export default function XAxis({
 } = {}) {
   const axisLabelFormatter = (value, index) => {
     if (isGroupedByDate) {
-      const dateFormat = useShortDate ? 'MMM Do' : 'MMM D LT';
+      const timeFormat = getTimeFormat();
+      const dateFormat = useShortDate ? 'MMM Do' : `MMM D ${timeFormat}`;
       const firstItem = index === 0;
       const format =
-        useShortInterval({start, end, period}) && !firstItem ? 'LT' : dateFormat;
+        useShortInterval({start, end, period}) && !firstItem ? timeFormat : dateFormat;
       return getFormattedDate(value, format, {local: !utc});
     } else if (props.truncate) {
       return truncationFormatter(value, props.truncate);
diff --git a/src/sentry/static/sentry/app/components/stackedBarChart.jsx b/src/sentry/static/sentry/app/components/stackedBarChart.jsx
index 07bd76ffb2..d9b15b21ce 100644
--- a/src/sentry/static/sentry/app/components/stackedBarChart.jsx
+++ b/src/sentry/static/sentry/app/components/stackedBarChart.jsx
@@ -7,7 +7,7 @@ import styled from '@emotion/styled';
 
 import Tooltip from 'app/components/tooltip';
 import Count from 'app/components/count';
-import ConfigStore from 'app/stores/configStore';
+import {use24Hours, getTimeFormat} from 'app/utils/dates';
 import theme from 'app/utils/theme';
 import {formatFloat} from 'app/utils/formatters';
 
@@ -138,24 +138,18 @@ class StackedBarChart extends React.Component {
     return points;
   };
 
-  use24Hours() {
-    const user = ConfigStore.get('user');
-    const options = user ? user.options : {};
-    return options.clock24Hours;
-  }
-
   timeLabelAsHour(point) {
     const timeMoment = moment(point.x * 1000);
     const nextMoment = timeMoment.clone().add(59, 'minute');
-    const format = this.use24Hours() ? 'HH:mm' : 'LT';
+    const timeFormat = getTimeFormat();
 
     return (
       <span>
         {timeMoment.format('LL')}
         <br />
-        {timeMoment.format(format)}
+        {timeMoment.format(timeFormat)}
         &#8594;
-        {nextMoment.format(format)}
+        {nextMoment.format(timeFormat)}
       </span>
     );
   }
@@ -169,7 +163,7 @@ class StackedBarChart extends React.Component {
   timeLabelAsRange(interval, point) {
     const timeMoment = moment(point.x * 1000);
     const nextMoment = timeMoment.clone().add(interval - 1, 'second');
-    const format = this.use24Hours() ? 'MMM Do, HH:mm' : 'MMM Do, h:mm a';
+    const format = `MMM Do, ${getTimeFormat()}`;
 
     // e.g. Aug 23rd, 12:50 pm
     return (
@@ -183,7 +177,7 @@ class StackedBarChart extends React.Component {
 
   timeLabelAsFull(point) {
     const timeMoment = moment(point.x * 1000);
-    const format = this.use24Hours() ? 'MMM D, YYYY HH:mm' : 'lll';
+    const format = use24Hours() ? 'MMM D, YYYY HH:mm' : 'lll';
     return timeMoment.format(format);
   }
 
diff --git a/src/sentry/static/sentry/app/utils/dates.tsx b/src/sentry/static/sentry/app/utils/dates.tsx
index ad8e40029b..b27e520019 100644
--- a/src/sentry/static/sentry/app/utils/dates.tsx
+++ b/src/sentry/static/sentry/app/utils/dates.tsx
@@ -212,3 +212,7 @@ export function parsePeriodToHours(str: string): number {
       return -1;
   }
 }
+
+export const use24Hours = () => ConfigStore.get('user')?.options?.clock24Hours;
+
+export const getTimeFormat = () => (use24Hours() ? 'HH:mm' : 'LT');
diff --git a/tests/js/spec/components/stackedBarChart.spec.jsx b/tests/js/spec/components/stackedBarChart.spec.jsx
index 339958d893..3b340e203c 100644
--- a/tests/js/spec/components/stackedBarChart.spec.jsx
+++ b/tests/js/spec/components/stackedBarChart.spec.jsx
@@ -2,6 +2,7 @@ import React from 'react';
 
 import {shallow} from 'sentry-test/enzyme';
 import StackedBarChart from 'app/components/stackedBarChart';
+import ConfigStore from 'app/stores/configStore';
 
 describe('StackedBarChart', function() {
   describe('render()', function() {
@@ -60,21 +61,26 @@ describe('StackedBarChart', function() {
       expect(columns.at(1).text()).toEqual('first seen');
       expect(columns.at(2).text()).toEqual('last seen');
     });
-  });
-  describe('functions', function() {
+
     it('creates an AM/PM time label if use24Hours is disabled', function() {
       const marker = {x: 1439776800, className: 'first-seen', label: 'first seen'};
 
-      const wrapper = shallow(<StackedBarChart />);
-      wrapper.instance().use24Hours = () => false;
+      const user = TestStubs.User();
+      user.options.clock24Hours = false;
+      ConfigStore.set('user', user);
 
+      const wrapper = shallow(<StackedBarChart />);
       expect(wrapper.instance().timeLabelAsFull(marker)).toMatch(/[A|P]M/);
     });
+
     it('creates a 24h time label if use24Hours is enabled', function() {
       const marker = {x: 1439776800, className: 'first-seen', label: 'first seen'};
 
+      const user = TestStubs.User();
+      user.options.clock24Hours = true;
+      ConfigStore.set('user', user);
+
       const wrapper = shallow(<StackedBarChart />);
-      wrapper.instance().use24Hours = () => true;
 
       expect(wrapper.instance().timeLabelAsFull(marker)).not.toMatch(/[A|P]M/);
     });
diff --git a/tests/js/spec/utils/dates.spec.jsx b/tests/js/spec/utils/dates.spec.jsx
index 6f231405e0..0f5f827c24 100644
--- a/tests/js/spec/utils/dates.spec.jsx
+++ b/tests/js/spec/utils/dates.spec.jsx
@@ -1,4 +1,11 @@
-import {setDateToTime, intervalToMilliseconds, parsePeriodToHours} from 'app/utils/dates';
+import {
+  setDateToTime,
+  intervalToMilliseconds,
+  parsePeriodToHours,
+  use24Hours,
+  getTimeFormat,
+} from 'app/utils/dates';
+import ConfigStore from 'app/stores/configStore';
 
 describe('utils.dates', function() {
   describe('setDateToTime', function() {
@@ -52,4 +59,41 @@ describe('utils.dates', function() {
       expect(parsePeriodToHours('24x')).toBe(-1);
     });
   });
+
+  describe('user clock preferences', function() {
+    afterEach(function() {
+      ConfigStore.set('user', TestStubs.User({}));
+    });
+
+    describe('use24Hours()', function() {
+      it('returns false if user preference is 12 hour clock', function() {
+        const user = TestStubs.User();
+        user.options.clock24Hours = false;
+        ConfigStore.set('user', user);
+        expect(use24Hours()).toBe(false);
+      });
+
+      it('returns true if user preference is 24 hour clock', function() {
+        const user = TestStubs.User();
+        user.options.clock24Hours = true;
+        ConfigStore.set('user', user);
+        expect(use24Hours()).toBe(true);
+      });
+    });
+
+    describe('getTimeFormat()', function() {
+      it('does not use AM/PM if use24Hours is true', function() {
+        const user = TestStubs.User();
+        user.options.clock24Hours = true;
+        ConfigStore.set('user', user);
+        expect(getTimeFormat()).toBe('HH:mm');
+      });
+      it('uses AM/PM if use24Hours is false', function() {
+        const user = TestStubs.User();
+        user.options.clock24Hours = false;
+        ConfigStore.set('user', user);
+        expect(getTimeFormat()).toBe('LT');
+      });
+    });
+  });
 });
