commit 82f530970ce205696469fa702246396acfd947a1
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Feb 19 11:01:13 2019 +0100

    feat: Remove deprecated event metadata compat code path (#12112)
    
    Metadata has been written for about two years now, this code path only
    existed because of some legacy tests.  Some tests are still very brittle
    and I just patched them up now.  Longer term the testsuite would benefit
    from using the new `store_event` function rather than using the
    `create_event` method which has a hacked together emulation of what
    happens during store.

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index a607c22bb1..b98f68afb4 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -88,18 +88,6 @@ def get_tag(data, key):
             return v
 
 
-def get_event_metadata_compat(data):
-    """This is a fallback path to getting the event metadata.  This is used
-    by some code paths that could potentially deal with old sentry events that
-    do not have metadata yet.  This does not happen in practice any more but
-    the testsuite was never adapted so the tests hit this code path constantly.
-    """
-    etype = data.get('type') or 'default'
-    if 'metadata' not in data:
-        return eventtypes.get(etype)().get_metadata(data)
-    return data['metadata']
-
-
 def count_limit(count):
     # TODO: could we do something like num_to_store = max(math.sqrt(100*count)+59, 200) ?
     # ~ 150 * ((log(n) - 1.5) ^ 2 - 0.25)
@@ -565,6 +553,21 @@ class EventManager(object):
         """Returns the event type."""
         return eventtypes.get(self._data.get('type', 'default'))()
 
+    def materialize_metadata(self):
+        """Returns the materialized metadata to be merged with group or
+        event data.  This currently produces the keys `type`, `metadata`,
+        `title` and `location`.  This should most likely also produce
+        `culprit` here.
+        """
+        event_type = self.get_event_type()
+        event_metadata = event_type.get_metadata(self._data)
+        return {
+            'type': event_type.key,
+            'metadata': event_metadata,
+            'title': event_type.get_title(event_metadata),
+            'location': event_type.get_location(event_metadata),
+        }
+
     def get_search_message(self, event_metadata=None, culprit=None):
         """This generates the internal event.message attribute which is used
         for search purposes.  It adds a bunch of data from the metadata and
@@ -728,10 +731,6 @@ class EventManager(object):
         data['fingerprint'] = fingerprint
 
         hashes = event.get_hashes()
-
-        event_type = self.get_event_type()
-        event_metadata = event_type.get_metadata(self._data)
-
         data['hashes'] = hashes
 
         # we want to freeze not just the metadata and type in but also the
@@ -740,17 +739,21 @@ class EventManager(object):
         # picks up the data right from the snuba topic.  For most usage
         # however the data is dynamically overriden by Event.title and
         # Event.location (See Event.as_dict)
-        data['type'] = event_type.key
-        data['metadata'] = event_metadata
+        materialized_metadata = self.materialize_metadata()
+        event_metadata = materialized_metadata['metadata']
+        data.update(materialized_metadata)
         data['culprit'] = culprit
-        data['title'] = event_type.get_title(event_metadata)
-        data['location'] = event_type.get_location(event_metadata)
 
         # index components into ``Event.message``
         # See GH-3248
         event.message = self.get_search_message(event_metadata, culprit)
         received_timestamp = event.data.get('received') or float(event.datetime.strftime('%s'))
 
+        # The group gets the same metadata as the event when it's flushed but
+        # additionally the `last_received` key is set.  This key is used by
+        # _save_aggregate.
+        group_metadata = dict(materialized_metadata)
+        group_metadata['last_received'] = received_timestamp
         kwargs = {
             'platform': platform,
             'message': event.message,
@@ -760,13 +763,7 @@ class EventManager(object):
             'last_seen': date,
             'first_seen': date,
             'active_at': date,
-            'data': {
-                'last_received': received_timestamp,
-                'type': event_type.key,
-                # we cache the events metadata on the group to ensure its
-                # accessible in the stream
-                'metadata': event_metadata,
-            },
+            'data': group_metadata,
         }
 
         if release:
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index b1874a349b..7eb6c99df5 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -139,8 +139,7 @@ class Event(Model):
 
         See ``sentry.eventtypes``.
         """
-        from sentry.event_manager import get_event_metadata_compat
-        return get_event_metadata_compat(self.data)
+        return self.data['metadata']
 
     def get_hashes(self):
         """
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index fcd3d31ae2..5d5b6dbd9a 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -416,8 +416,7 @@ class Group(Model):
 
         See ``sentry.eventtypes``.
         """
-        from sentry.event_manager import get_event_metadata_compat
-        return get_event_metadata_compat(self.data)
+        return self.data['metadata']
 
     @property
     def title(self):
diff --git a/src/sentry/models/grouptombstone.py b/src/sentry/models/grouptombstone.py
index 1b7bcf2105..aba5bf116f 100644
--- a/src/sentry/models/grouptombstone.py
+++ b/src/sentry/models/grouptombstone.py
@@ -47,5 +47,4 @@ class GroupTombstone(Model):
 
         See ``sentry.eventtypes``.
         """
-        from sentry.event_manager import get_event_metadata_compat
-        return get_event_metadata_compat(self.data)
+        return self.data['metadata']
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 73546d056e..19dc919a9c 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -507,6 +507,7 @@ class Fixtures(object):
                                    for_store=False)
             manager.normalize()
             kwargs['data'] = manager.get_data()
+            kwargs['data'].update(manager.materialize_metadata())
             kwargs['message'] = manager.get_search_message()
 
         event = Event(event_id=event_id, **kwargs)
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 54a5053998..c832e2d2d4 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -124,6 +124,8 @@ class MailPluginTest(TestCase):
         event_manager.normalize()
         event_data = event_manager.get_data()
         event_type = event_manager.get_event_type()
+        event_data['type'] = event_type.key
+        event_data['metadata'] = event_type.get_metadata(event_data)
 
         group = Group(
             id=2,
@@ -167,6 +169,8 @@ class MailPluginTest(TestCase):
         event_manager.normalize()
         event_data = event_manager.get_data()
         event_type = event_manager.get_event_type()
+        event_data['type'] = event_type.key
+        event_data['metadata'] = event_type.get_metadata(event_data)
 
         group = Group(
             id=2,
@@ -552,7 +556,7 @@ class MailPluginOwnersTest(TestCase):
         )
 
     def make_event_data(self, filename, url='http://example.com'):
-        data = {
+        mgr = EventManager({
             'tags': [('level', 'error')],
             'stacktrace': {
                 'frames': [
@@ -565,7 +569,13 @@ class MailPluginOwnersTest(TestCase):
             'request': {
                 'url': url
             },
-        }
+        })
+        mgr.normalize()
+        data = mgr.get_data()
+        event_type = mgr.get_event_type()
+        data['type'] = event_type.key
+        data['metadata'] = event_type.get_metadata(data)
+
         return data
 
     def assert_notify(self, event, emails_sent_to):
