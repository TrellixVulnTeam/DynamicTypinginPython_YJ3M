commit 9b050ee9e1fe16b2d1f6d2243df39ec0795021bb
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 1 13:14:18 2014 -0700

    Support for dynamic system options

diff --git a/conftest.py b/conftest.py
index 44e55b0544..0bdd029c25 100644
--- a/conftest.py
+++ b/conftest.py
@@ -93,6 +93,12 @@ def pytest_configure(config):
     settings.RECAPTCHA_PUBLIC_KEY = 'a' * 40
     settings.RECAPTCHA_PRIVATE_KEY = 'b' * 40
 
+    settings.CACHES = {
+        'default': {
+            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
+        }
+    }
+
     # django mail uses socket.getfqdn which doesn't play nice if our
     # networking isn't stable
     patcher = mock.patch('socket.getfqdn', return_value='localhost')
diff --git a/docs/index.rst b/docs/index.rst
index 04c9074751..a532131dae 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -43,6 +43,13 @@ Developers
    developer/plugins/index
    developer/interfaces/index
 
+Internals
+---------
+
+.. toctree::
+   :maxdepth: 1
+   internals/options
+
 Reference
 ---------
 
diff --git a/docs/internals/options.rst b/docs/internals/options.rst
new file mode 100644
index 0000000000..55dcc17314
--- /dev/null
+++ b/docs/internals/options.rst
@@ -0,0 +1,5 @@
+System Options
+==============
+
+.. autoclass:: sentry.options.manager.OptionsManager
+   :members:
diff --git a/setup.cfg b/setup.cfg
index 23f8685340..2cdb2db4c9 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -1,6 +1,6 @@
 [pytest]
 python_files=test*.py
-addopts=--tb=short
+addopts=--tb=native
 norecursedirs=node_modules .* {args}
 
 [flake8]
diff --git a/src/sentry/app.py b/src/sentry/app.py
index af820244fb..f7bd0daaf1 100644
--- a/src/sentry/app.py
+++ b/src/sentry/app.py
@@ -23,6 +23,8 @@ def get_instance(path, options):
     return cls(**options)
 
 
+# TODO(dcramer): this is getting heavy, we should find a better way to structure
+# this
 buffer = get_instance(settings.SENTRY_BUFFER, settings.SENTRY_BUFFER_OPTIONS)
 cache = get_instance(settings.SENTRY_CACHE, settings.SENTRY_CACHE_OPTIONS)
 quotas = get_instance(settings.SENTRY_QUOTAS, settings.SENTRY_QUOTA_OPTIONS)
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 0086ed05e2..df0d8d93b2 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -301,6 +301,7 @@ CELERY_QUEUES = [
     Queue('events', routing_key='events'),
     Queue('update', routing_key='update'),
     Queue('email', routing_key='email'),
+    Queue('options', routing_key='options'),
 ]
 
 CELERY_ROUTES = ('sentry.queue.routers.SplitQueueRouter',)
@@ -342,6 +343,14 @@ CELERYBEAT_SCHEDULE = {
             'queue': 'counters-0',
         }
     },
+    'sync-options': {
+        'task': 'sentry.tasks.options.sync_options',
+        'schedule': timedelta(seconds=10),
+        'options': {
+            'expires': 10,
+            'queue': 'options',
+        }
+    },
 }
 
 # Disable South in tests as it is sending incorrect create signals
@@ -698,6 +707,9 @@ SENTRY_DISALLOWED_IPS = (
 # 'first_name' in SENTRY_MANAGED_USER_FIELDS.
 SENTRY_MANAGED_USER_FIELDS = ('email',)
 
+# See sentry/options/__init__.py for more information
+SENTRY_OPTIONS = {}
+
 # Configure celery
 import djcelery
 djcelery.setup_loader()
diff --git a/src/sentry/models/option.py b/src/sentry/models/option.py
index 386307791d..d70354f756 100644
--- a/src/sentry/models/option.py
+++ b/src/sentry/models/option.py
@@ -5,33 +5,13 @@ sentry.models.option
 :copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+from __future__ import absolute_import, print_function
 
 from django.db import models
+from django.utils import timezone
 
 from sentry.db.models import Model, sane_repr
 from sentry.db.models.fields import UnicodePickledObjectField
-from sentry.db.models.manager import BaseManager
-
-
-class OptionManager(BaseManager):
-    def get_value(self, key, default=None):
-        try:
-            return self.get_from_cache(key=key).value
-        except self.model.DoesNotExist:
-            return default
-
-    def unset_value(self, key):
-        self.filter(key=key).delete()
-
-    def set_value(self, key, value):
-        instance, created = self.get_or_create(
-            key=key,
-            defaults={
-                'value': value,
-            }
-        )
-        if not created and value != instance.value:
-            instance.update(value=value)
 
 
 class Option(Model):
@@ -44,10 +24,7 @@ class Option(Model):
     """
     key = models.CharField(max_length=64, unique=True)
     value = UnicodePickledObjectField()
-
-    objects = OptionManager(cache_fields=[
-        'key',
-    ])
+    last_updated = models.DateTimeField(default=timezone.now)
 
     class Meta:
         app_label = 'sentry'
diff --git a/src/sentry/options/__init__.py b/src/sentry/options/__init__.py
new file mode 100644
index 0000000000..3ab8168a9c
--- /dev/null
+++ b/src/sentry/options/__init__.py
@@ -0,0 +1,17 @@
+"""
+sentry.options
+~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import, print_function
+
+from .manager import OptionsManager
+
+default_manager = OptionsManager()
+
+# expose public API
+get = default_manager.get
+set = default_manager.set
+delete = default_manager.delete
diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
new file mode 100644
index 0000000000..deef8d445d
--- /dev/null
+++ b/src/sentry/options/manager.py
@@ -0,0 +1,135 @@
+"""
+sentry.options.manager
+~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import, print_function
+
+import logging
+
+from django.conf import settings
+from django.utils import timezone
+from hashlib import md5
+
+from sentry.app import cache
+from sentry.db.models.query import create_or_update
+from sentry.models import Option
+
+
+CACHE_FETCH_ERR = 'Unable to fetch option cache for %s'
+
+CACHE_UPDATE_ERR = 'Unable to update option cache for %s'
+
+
+class OptionsManager(object):
+    """
+    A backend for storing generic configuration within Sentry.
+
+    Legacy Django configuration should be deprioritized in favor of more dynamic
+    configuration through the options backend, which is backed by a cache and a
+    database.
+
+    You **always** will receive a response to ``get()``. The response is eventually
+    consistent with the accuracy window depending on the queue workload and you
+    should treat all values as temporary as given a dual connection failure on both
+    the cache and the database the system will fall back to hardcoded defaults.
+
+    Overall this is a very loose consistency model which is designed to give simple
+    dynamic configuration with maximum uptime, where defaults are always taken from
+    constants in the global configuration.
+
+    - Values must be strings.
+    - Empty values are identical to null values which are represented by ''.
+
+    >>> from sentry import options
+    >>>
+    >>> assert options.get('my:option') == ''
+    >>> options.set('my:option', 'foo')
+    >>> assert options.get('my:option') == 'foo'
+    """
+    cache = cache
+
+    logger = logging.getLogger('sentry.errors')
+
+    # we generally want to always persist
+    ttl = None
+
+    def __init__(self, cache=None, ttl=None, logger=None):
+        if cache is not None:
+            self.cache = cache
+
+        if ttl is not None:
+            self.ttl = ttl
+
+        if logger is not None:
+            self.logger = logger
+
+    def _make_cache_key(self, key):
+        return 'o:{0}'.format(md5(key).hexdigest())
+
+    def set(self, key, value):
+        create_or_update(
+            model=Option,
+            key=key,
+            defaults={
+                'value': value,
+                'last_updated': timezone.now(),
+            }
+        )
+
+        try:
+            self.update_cached_value(key, value)
+        except Exception as e:
+            self.logger.warn(CACHE_UPDATE_ERR, key, exc_info=True)
+
+    def get(self, key):
+        cache_key = self._make_cache_key(key)
+
+        try:
+            result = self.cache.get(cache_key)
+        except Exception as e:
+            self.logger.warn(CACHE_FETCH_ERR, key, exc_info=True)
+            result = None
+            cache_success = False
+        else:
+            cache_success = True
+
+        if result is None:
+            try:
+                result = Option.objects.get(key=key).value
+            except Option.DoesNotExist:
+                result = ''
+            except Exception as e:
+                self.logger.exception(unicode(e))
+                result = None
+
+            # we only attempt to populate the cache if we were previously
+            # able to successfully talk to the backend
+            if result is not None and cache_success:
+                try:
+                    self.update_cached_value(key, result)
+                except Exception as e:
+                    self.logger.warn(CACHE_UPDATE_ERR, key, exc_info=True)
+
+        if not result:
+            # default to the hardcoded local configuration for this key
+            result = settings.SENTRY_OPTIONS.get(key)
+
+        return result or ''
+
+    def delete(self, key):
+        cache_key = self._make_cache_key(key)
+
+        Option.objects.filter(key=key).delete()
+
+        try:
+            self.cache.delete(cache_key)
+        except Exception as e:
+            self.logger.warn(CACHE_UPDATE_ERR, key, exc_info=True)
+
+    def update_cached_value(self, key, value):
+        cache_key = self._make_cache_key(key)
+
+        self.cache.set(cache_key, value, self.ttl)
diff --git a/src/sentry/plugins/helpers.py b/src/sentry/plugins/helpers.py
index 9b87e7fdb3..abc8343801 100644
--- a/src/sentry/plugins/helpers.py
+++ b/src/sentry/plugins/helpers.py
@@ -6,7 +6,7 @@ sentry.plugins.helpers
 :license: BSD, see LICENSE for more details.
 """
 
-from sentry.models import ProjectOption, Option, UserOption
+from sentry.models import ProjectOption, UserOption
 
 __all__ = ('set_option', 'get_option', 'unset_option')
 
@@ -19,8 +19,7 @@ def reset_options(prefix, project=None, user=None):
         ProjectOption.objects.filter(key__startswith='%s:' % (prefix,), project=project).delete()
         ProjectOption.objects.clear_local_cache()
     else:
-        Option.objects.filter(key__startswith='%s:' % (prefix,)).delete()
-        Option.objects.clear_local_cache()
+        raise NotImplementedError
 
 
 def set_option(key, value, project=None, user=None):
@@ -29,7 +28,7 @@ def set_option(key, value, project=None, user=None):
     elif project:
         result = ProjectOption.objects.set_value(project, key, value)
     else:
-        result = Option.objects.set_value(key, value)
+        raise NotImplementedError
 
     return result
 
@@ -40,7 +39,7 @@ def get_option(key, project=None, user=None):
     elif project:
         result = ProjectOption.objects.get_value(project, key, None)
     else:
-        result = Option.objects.get_value(key, None)
+        raise NotImplementedError
 
     return result
 
@@ -51,6 +50,6 @@ def unset_option(key, project=None, user=None):
     elif project:
         result = ProjectOption.objects.unset_value(project, key)
     else:
-        result = Option.objects.unset_value(key)
+        raise NotImplementedError
 
     return result
diff --git a/src/sentry/receivers/core.py b/src/sentry/receivers/core.py
index 3be91e5da3..d97eeca450 100644
--- a/src/sentry/receivers/core.py
+++ b/src/sentry/receivers/core.py
@@ -6,11 +6,12 @@ from django.db import connections
 from django.db.models.signals import post_syncdb, post_save, pre_delete
 from pkg_resources import parse_version as Version
 
+from sentry import options
 from sentry.constants import MEMBER_OWNER
 from sentry.db.models import update
 from sentry.db.models.utils import slugify_instance
 from sentry.models import (
-    Project, User, Option, Team, ProjectKey, UserOption, TagKey, TagValue,
+    Project, User, Team, ProjectKey, UserOption, TagKey, TagValue,
     GroupTagValue, GroupTagKey, Activity, TeamMember, Alert)
 from sentry.signals import buffer_incr_complete, regression_signal
 from sentry.utils.safe import safe_execute
@@ -57,19 +58,13 @@ def set_sentry_version(latest=None, **kwargs):
     import sentry
     current = sentry.get_version()
 
-    version = Option.objects.get_value(
-        key='sentry:latest_version',
-        default=''
-    )
+    version = options.get('sentry:latest_version')
 
     for ver in (current, version):
         if Version(ver) >= Version(latest):
             return
 
-    Option.objects.set_value(
-        key='sentry:latest_version',
-        value=(latest or current)
-    )
+    options.set('sentry:latest_version', (latest or current))
 
 
 def create_team_and_keys_for_project(instance, created, **kwargs):
diff --git a/src/sentry/tasks/sync_options.py b/src/sentry/tasks/sync_options.py
new file mode 100644
index 0000000000..29d6632e6c
--- /dev/null
+++ b/src/sentry/tasks/sync_options.py
@@ -0,0 +1,33 @@
+"""
+sentry.tasks.options
+~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from datetime import timedelta
+from django.utils import timezone
+
+from sentry.models import Option
+from sentry.options import default_manager
+from sentry.tasks.base import instrumented_task
+
+ONE_HOUR = 60 * 60
+
+
+@instrumented_task(name='sentry.tasks.options.sync_options', queue='options')
+def sync_options(cutoff=ONE_HOUR):
+    """
+    Ensures all options that have been updated (within the database) since
+    ``cutoff`` have their correct values stored in the cache.
+
+    This **does not** guarantee that the correct value is written into the cache
+    though it will correct itself in the next update window.
+    """
+    cutoff_dt = timezone.now() - timedelta(seconds=cutoff)
+    for option in Option.objects.filter(last_updated__gte=cutoff_dt).iterator():
+        default_manager.update_cached_value(
+            key=option.key,
+            value=option.value,
+        )
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index c4d325fe8b..dc83f854a4 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -31,8 +31,9 @@ from django.utils.translation import ugettext as _
 import six
 from six.moves import range
 
+from sentry import options
 from sentry.constants import STATUS_MUTED, EVENTS_PER_PAGE, MEMBER_OWNER
-from sentry.models import Team, Option, GroupTagValue
+from sentry.models import Team, GroupTagValue
 from sentry.web.helpers import group_is_public
 from sentry.utils import to_unicode
 from sentry.utils.avatar import get_gravatar_url
@@ -141,7 +142,7 @@ def get_sentry_version(context):
     import sentry
     current = sentry.get_version()
 
-    latest = Option.objects.get_value('sentry:latest_version', current)
+    latest = options.get('sentry:latest_version') or current
     update_available = Version(latest) > Version(current)
 
     context['sentry_version'] = SentryVersion(
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 9835e58b55..1f7808634a 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -17,6 +17,7 @@ from django.template import loader, RequestContext, Context
 from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
 
+from sentry import options
 from sentry.constants import EVENTS_PER_PAGE, STATUS_HIDDEN
 from sentry.models import Project, Team, Option, ProjectOption, ProjectKey
 
@@ -184,7 +185,7 @@ def plugin_config(plugin, project, request):
         if project:
             value = ProjectOption.objects.get_value(project, key, NOTSET)
         else:
-            value = Option.objects.get_value(key, NOTSET)
+            value = options.get(key)
         if value is not NOTSET:
             initials[field] = value
 
diff --git a/tests/sentry/models/test_option.py b/tests/sentry/models/test_option.py
deleted file mode 100644
index 71304272c8..0000000000
--- a/tests/sentry/models/test_option.py
+++ /dev/null
@@ -1,26 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from sentry.models import Option
-from sentry.testutils import TestCase
-
-
-class OptionManagerTest(TestCase):
-    def test_set_value(self):
-        Option.objects.set_value('foo', 'bar')
-        assert Option.objects.filter(key='foo', value='bar').exists()
-
-    def test_get_value(self):
-        result = Option.objects.get_value('foo')
-        assert result is None
-
-        Option.objects.create(key='foo', value='bar')
-        result = Option.objects.get_value('foo')
-        assert result == 'bar'
-
-    def test_unset_value(self):
-        Option.objects.unset_value('foo')
-        Option.objects.create(key='foo', value='bar')
-        Option.objects.unset_value('foo')
-        assert not Option.objects.filter(key='foo').exists()
diff --git a/tests/sentry/options/test_manager.py b/tests/sentry/options/test_manager.py
new file mode 100644
index 0000000000..b9f1c6ee36
--- /dev/null
+++ b/tests/sentry/options/test_manager.py
@@ -0,0 +1,81 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from exam import fixture
+from mock import patch
+
+from sentry.models import Option
+from sentry.options.manager import OptionsManager
+from sentry.testutils import TestCase
+
+
+class OptionsManagerTest(TestCase):
+    @fixture
+    def manager(self):
+        return OptionsManager()
+
+    def test_simple(self):
+        assert self.manager.get('foo') == ''
+
+        with self.settings(SENTRY_OPTIONS={'foo': 'bar'}):
+            assert self.manager.get('foo') == 'bar'
+
+        self.manager.set('foo', 'bar')
+
+        assert self.manager.get('foo') == 'bar'
+
+        self.manager.delete('foo')
+
+        assert self.manager.get('foo') == ''
+
+    def test_db_unavailable(self):
+        with patch.object(Option.objects, 'get_query_set', side_effect=Exception()):
+            # we can't update options if the db is unavailable
+            with self.assertRaises(Exception):
+                self.manager.set('foo', 'bar')
+
+        self.manager.set('foo', 'bar')
+
+        with patch.object(Option.objects, 'get_query_set', side_effect=Exception()):
+            assert self.manager.get('foo') == 'bar'
+
+            with patch.object(self.manager.cache, 'get', side_effect=Exception()):
+                assert self.manager.get('foo') == ''
+
+                with patch.object(self.manager.cache, 'set', side_effect=Exception()):
+                    assert self.manager.get('foo') == ''
+
+    def test_db_and_cache_unavailable(self):
+        self.manager.set('foo', 'bar')
+
+        with self.settings(SENTRY_OPTIONS={'foo': 'baz'}):
+            with patch.object(Option.objects, 'get_query_set', side_effect=Exception()):
+                with patch.object(self.manager.cache, 'get', side_effect=Exception()):
+                    assert self.manager.get('foo') == 'baz'
+
+                    with patch.object(self.manager.cache, 'set', side_effect=Exception()):
+                        assert self.manager.get('foo') == 'baz'
+
+    def test_cache_unavailable(self):
+        self.manager.set('foo', 'bar')
+
+        with patch.object(self.manager.cache, 'get', side_effect=Exception()):
+            assert self.manager.get('foo') == 'bar'
+
+            with patch.object(self.manager.cache, 'set', side_effect=Exception()):
+                assert self.manager.get('foo') == 'bar'
+
+                # we should still be able to write a new value
+                self.manager.set('foo', 'baz')
+
+        # the cache should be incorrect now, but sync_options will eventually
+        # correct the state
+        assert self.manager.get('foo') == 'bar'
+
+        # when the cache poofs, the db will be return the most-true answer
+        with patch.object(self.manager.cache, 'get', side_effect=Exception()):
+            assert self.manager.get('foo') == 'baz'
+
+            with patch.object(self.manager.cache, 'set', side_effect=Exception()):
+                assert self.manager.get('foo') == 'baz'
diff --git a/tests/sentry/plugins/helpers/tests.py b/tests/sentry/plugins/helpers/tests.py
index 207db604ac..0993e75589 100644
--- a/tests/sentry/plugins/helpers/tests.py
+++ b/tests/sentry/plugins/helpers/tests.py
@@ -3,8 +3,7 @@
 from __future__ import absolute_import
 
 import mock
-from sentry.plugins.helpers import (
-    set_option, unset_option, get_option)
+from sentry.plugins.helpers import set_option, unset_option, get_option
 from sentry.testutils import TestCase
 
 
@@ -16,25 +15,6 @@ class SentryPluginTest(TestCase):
 
             set_value.assert_called_once_with(project, 'key', 'value')
 
-    def test_set_option_without_project(self):
-        with mock.patch('sentry.models.Option.objects.set_value') as set_value:
-            set_option('key', 'value')
-
-            set_value.assert_called_once_with('key', 'value')
-
-    def test_unset_option_with_project(self):
-        with mock.patch('sentry.models.ProjectOption.objects.unset_value') as unset_value:
-            project = mock.Mock()
-            unset_option('key', project)
-
-            unset_value.assert_called_once_with(project, 'key')
-
-    def test_unset_option_without_project(self):
-        with mock.patch('sentry.models.Option.objects.unset_value') as unset_value:
-            unset_option('key')
-
-            unset_value.assert_called_once_with('key')
-
     def test_get_option_with_project(self):
         with mock.patch('sentry.models.ProjectOption.objects.get_value') as get_value:
             project = mock.Mock()
@@ -43,9 +23,9 @@ class SentryPluginTest(TestCase):
 
             get_value.assert_called_once_with(project, 'key', None)
 
-    def test_get_option_without_project(self):
-        with mock.patch('sentry.models.Option.objects.get_value') as get_value:
-            result = get_option('key')
-            self.assertEquals(result, get_value.return_value)
+    def test_unset_option_with_project(self):
+        with mock.patch('sentry.models.ProjectOption.objects.unset_value') as unset_value:
+            project = mock.Mock()
+            unset_option('key', project)
 
-            get_value.assert_called_once_with('key', None)
+            unset_value.assert_called_once_with(project, 'key')
diff --git a/tests/sentry/tasks/check_update/tests.py b/tests/sentry/tasks/check_update/tests.py
index 954c26730f..ff5771c8c8 100644
--- a/tests/sentry/tasks/check_update/tests.py
+++ b/tests/sentry/tasks/check_update/tests.py
@@ -2,9 +2,8 @@ import json
 
 from mock import patch
 
-from sentry.plugins.helpers import get_option, set_option
+from sentry import options
 from sentry.testutils import TestCase
-from sentry.models import Option
 from sentry.receivers import set_sentry_version
 from sentry.tasks.check_update import check_update, PYPI_URL
 
@@ -27,7 +26,7 @@ class CheckUpdateTest(TestCase):
         safe_urlopen.assert_called_once_with(PYPI_URL)
         safe_urlread.assert_called_once_with(safe_urlopen.return_value)
 
-        self.assertEqual(get_option(key=self.KEY), self.NEW)
+        self.assertEqual(options.get(key=self.KEY), self.NEW)
 
     @patch('sentry.tasks.check_update.safe_urlopen')
     @patch('sentry.tasks.check_update.safe_urlread')
@@ -40,28 +39,28 @@ class CheckUpdateTest(TestCase):
         safe_urlopen.assert_called_once_with(PYPI_URL)
         safe_urlread.assert_called_once_with(safe_urlopen.return_value)
 
-        self.assertEqual(get_option(key=self.KEY), None)
+        self.assertEqual(options.get(key=self.KEY), '')
 
     def test_set_sentry_version_empty_latest(self):
         set_sentry_version(latest=self.NEW)
-        self.assertEqual(get_option(key=self.KEY), self.NEW)
+        self.assertEqual(options.get(key=self.KEY), self.NEW)
 
     @patch('sentry.get_version')
     def test_set_sentry_version_new(self, get_version):
-        set_option(self.KEY, self.OLD)
+        options.set(self.KEY, self.OLD)
 
         get_version.return_value = self.CURRENT
 
         set_sentry_version(latest=self.NEW)
 
-        self.assertEqual(Option.objects.get_value(key=self.KEY), self.NEW)
+        self.assertEqual(options.get(key=self.KEY), self.NEW)
 
     @patch('sentry.get_version')
     def test_set_sentry_version_old(self, get_version):
-        set_option(self.KEY, self.NEW)
+        options.set(self.KEY, self.NEW)
 
         get_version.return_value = self.CURRENT
 
         set_sentry_version(latest=self.OLD)
 
-        self.assertEqual(Option.objects.get_value(key=self.KEY), self.NEW)
+        self.assertEqual(options.get(key=self.KEY), self.NEW)
diff --git a/tests/sentry/tasks/test_sync_options.py b/tests/sentry/tasks/test_sync_options.py
new file mode 100644
index 0000000000..87e7e53289
--- /dev/null
+++ b/tests/sentry/tasks/test_sync_options.py
@@ -0,0 +1,31 @@
+from mock import patch
+
+from datetime import timedelta
+
+from sentry.models import Option
+from sentry.options import default_manager
+from sentry.tasks.sync_options import sync_options
+from sentry.testutils import TestCase
+
+
+class SyncOptionsTest(TestCase):
+    def test_task_persistent_name(self):
+        assert sync_options.name == 'sentry.tasks.options.sync_options'
+
+    @patch.object(default_manager, 'update_cached_value')
+    def test_simple(self, mock_update_cached_value):
+        option = Option.objects.create(
+            key='foo',
+            value='bar',
+        )
+        sync_options(cutoff=60)
+
+        mock_update_cached_value.assert_called_once_with(key='foo', value='bar')
+
+        mock_update_cached_value.reset_mock()
+
+        option.update(last_updated=option.last_updated - timedelta(days=1))
+
+        sync_options(cutoff=60)
+
+        assert not mock_update_cached_value.called
diff --git a/tests/sentry/web/frontend/generic/tests.py b/tests/sentry/web/frontend/generic/tests.py
index 2f2f4edd60..c717e870c3 100644
--- a/tests/sentry/web/frontend/generic/tests.py
+++ b/tests/sentry/web/frontend/generic/tests.py
@@ -3,9 +3,9 @@ import mock
 from django.core.urlresolvers import reverse
 from exam import before, fixture
 
+from sentry import options
 from sentry.models import Team
 from sentry.testutils import TestCase
-from sentry.plugins.helpers import set_option
 
 
 class DashboardTest(TestCase):
@@ -74,7 +74,7 @@ class UpdateAvailableTest(TestCase):
         assert self.UPDATE_MESSAGE not in resp.content
 
     def test_update_is_not_available(self):
-        set_option('sentry:latest_version', '5.5.1')
+        options.set('sentry:latest_version', '5.5.1')
 
         with mock.patch('sentry.get_version') as get_version:
             get_version.return_value = '5.5.0'
