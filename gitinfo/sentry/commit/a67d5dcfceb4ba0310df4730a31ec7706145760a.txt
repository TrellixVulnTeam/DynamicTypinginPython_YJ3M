commit a67d5dcfceb4ba0310df4730a31ec7706145760a
Author: Mark Story <mark@sentry.io>
Date:   Mon Jan 27 12:41:06 2020 -0500

    feat(discover2) Move routes and add opt-in/out buttons (#16579)
    
    With this change users who have access to both discover variants will
    now only see discover2 in their sidebar. However, they will also have
    opt-out buttons at the bottom of the discover2 view. This state is
    stored in localStorage as we plan to have a fairly short overlap period
    (a few weeks) and adding an organization wide setting seemed arduous.
    
    I've also moved the URLs for discover2 to be closer to their final
    resting place. The `/discover/queries` URL is not final. We'd like to
    use `/discover` for the query list but that route is currently occupied
    by discover1 and I didn't want to complect both discovers with more
    conditional code. Once discover1 has been removed we can move the
    canonical route for discover2 saved queries to `/discover` and keep
    `/discover/queries` as an alias.
    
    Events + discover1 should be hidden when discover2 is active. Add a hack
    for discover as the URLs are annoying right now.

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
index 2f0ba5670b..3690fff281 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
@@ -17,7 +17,6 @@ import {
   generateEventDetailsRoute,
 } from 'app/views/eventsV2/eventDetails/utils';
 import EventView from 'app/views/eventsV2/eventView';
-import {generateDiscoverResultsRoute} from 'app/views/eventsV2/results';
 import {assert} from 'app/types/utils';
 
 import {ProcessedSpanType, RawSpanType, ParsedTraceType} from './types';
@@ -152,13 +151,8 @@ class SpanDetail extends React.Component<Props, State> {
       end,
     });
 
-    const to = {
-      pathname: generateDiscoverResultsRoute(orgId),
-      query: eventView.generateQueryStringObject(),
-    };
-
     return (
-      <StyledButton size="xsmall" to={to}>
+      <StyledButton size="xsmall" to={eventView.getResultsViewUrlTarget(orgId)}>
         {t('View Children')}
       </StyledButton>
     );
@@ -195,13 +189,8 @@ class SpanDetail extends React.Component<Props, State> {
       end,
     });
 
-    const to = {
-      pathname: generateDiscoverResultsRoute(orgId),
-      query: eventView.generateQueryStringObject(),
-    };
-
     return (
-      <StyledButton size="xsmall" to={to}>
+      <StyledButton size="xsmall" to={eventView.getResultsViewUrlTarget(orgId)}>
         {t('Search by Trace')}
       </StyledButton>
     );
diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index 1fcb47c7e7..e6da901020 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -20,6 +20,7 @@ import PreferencesStore from 'app/stores/preferencesStore';
 import SentryTypes from 'app/sentryTypes';
 import space from 'app/styles/space';
 import theme from 'app/utils/theme';
+import localStorage from 'app/utils/localStorage';
 import withLatestContext from 'app/utils/withLatestContext';
 import {generateDiscoverLandingPageRoute} from 'app/views/eventsV2/utils';
 
@@ -164,7 +165,7 @@ class Sidebar extends React.Component {
       'events',
       'releases',
       'user-feedback',
-      'eventsv2',
+      'discover',
       'releasesv2',
     ].map(route => `/organizations/${this.props.organization.slug}/${route}/`);
 
@@ -224,6 +225,12 @@ class Sidebar extends React.Component {
       hasPanel,
     };
     const hasOrganization = !!organization;
+    // If the user has not opted either way on discover 1/2 prefer the one they have
+    // access to and default to '1' if they have neither so events tab displays.
+    let discoverVersion = localStorage.getItem('discover:version');
+    if (discoverVersion === null && organization && organization.features) {
+      discoverVersion = organization.features.includes('discover-basic') ? '2' : '1';
+    }
 
     return (
       <StyledSidebar ref={this.sidebarRef} collapsed={collapsed}>
@@ -265,41 +272,45 @@ class Sidebar extends React.Component {
                     id="issues"
                   />
 
-                  <Feature
-                    features={['events']}
-                    hookName="feature-disabled:events-sidebar-item"
-                    organization={organization}
-                  >
-                    <SidebarItem
-                      {...sidebarItemProps}
-                      onClick={(_id, evt) =>
-                        this.navigateWithGlobalSelection(
-                          `/organizations/${organization.slug}/events/`,
-                          evt
-                        )
-                      }
-                      icon={<InlineSvg src="icon-stack" />}
-                      label={t('Events')}
-                      to={`/organizations/${organization.slug}/events/`}
-                      id="events"
-                    />
-                  </Feature>
-
-                  <Feature features={['discover-basic']} organization={organization}>
-                    <SidebarItem
-                      {...sidebarItemProps}
-                      onClick={(_id, evt) =>
-                        this.navigateWithGlobalSelection(
-                          generateDiscoverLandingPageRoute(organization.slug),
-                          evt
-                        )
-                      }
-                      icon={<InlineSvg src="icon-telescope" />}
-                      label={t('Discover v2')}
-                      to={generateDiscoverLandingPageRoute(organization.slug)}
-                      id="discover-v2"
-                    />
-                  </Feature>
+                  {discoverVersion !== '2' && (
+                    <Feature
+                      features={['events']}
+                      hookName="feature-disabled:events-sidebar-item"
+                      organization={organization}
+                    >
+                      <SidebarItem
+                        {...sidebarItemProps}
+                        onClick={(_id, evt) =>
+                          this.navigateWithGlobalSelection(
+                            `/organizations/${organization.slug}/events/`,
+                            evt
+                          )
+                        }
+                        icon={<InlineSvg src="icon-stack" />}
+                        label={t('Events')}
+                        to={`/organizations/${organization.slug}/events/`}
+                        id="events"
+                      />
+                    </Feature>
+                  )}
+
+                  {discoverVersion === '2' && (
+                    <Feature features={['discover-basic']} organization={organization}>
+                      <SidebarItem
+                        {...sidebarItemProps}
+                        onClick={(_id, evt) =>
+                          this.navigateWithGlobalSelection(
+                            generateDiscoverLandingPageRoute(organization.slug),
+                            evt
+                          )
+                        }
+                        icon={<InlineSvg src="icon-telescope" />}
+                        label={t('Discover')}
+                        to={generateDiscoverLandingPageRoute(organization.slug)}
+                        id="discover-v2"
+                      />
+                    </Feature>
+                  )}
 
                   <Feature features={['incidents']} organization={organization}>
                     <SidebarItem
@@ -357,20 +368,23 @@ class Sidebar extends React.Component {
                       id="customizable-dashboards"
                     />
                   </Feature>
-                  <Feature
-                    features={['discover']}
-                    hookName="feature-disabled:discover-sidebar-item"
-                    organization={organization}
-                  >
-                    <SidebarItem
-                      {...sidebarItemProps}
-                      onClick={this.hidePanel}
-                      icon={<InlineSvg src="icon-discover" />}
-                      label={t('Discover')}
-                      to={`/organizations/${organization.slug}/discover/`}
-                      id="discover"
-                    />
-                  </Feature>
+
+                  {discoverVersion === '1' && (
+                    <Feature
+                      features={['discover']}
+                      hookName="feature-disabled:discover-sidebar-item"
+                      organization={organization}
+                    >
+                      <SidebarItem
+                        {...sidebarItemProps}
+                        onClick={this.hidePanel}
+                        icon={<InlineSvg src="icon-discover" />}
+                        label={t('Discover')}
+                        to={`/organizations/${organization.slug}/discover/`}
+                        id="discover"
+                      />
+                    </Feature>
+                  )}
                   <Feature features={['monitors']} organization={organization}>
                     <SidebarItem
                       {...sidebarItemProps}
diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarItem.jsx b/src/sentry/static/sentry/app/components/sidebar/sidebarItem.jsx
index d335fb72c5..6eadf98c30 100644
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarItem.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarItem.jsx
@@ -76,6 +76,7 @@ class SidebarItem extends React.Component {
     // If there is no active panel open and if path is active according to react-router
     const isActiveRouter =
       (!hasPanel && router && to && location.pathname.startsWith(to)) ||
+      (label === 'Discover' && location.pathname.includes('/discover/')) ||
       // TODO: this won't be necessary once we remove settingsHome
       (label === 'Settings' && location.pathname.startsWith('/settings/'));
 
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 748849afb8..6274abb52d 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1371,22 +1371,29 @@ function routes() {
             <Redirect path="saved/" to="/organizations/:orgId/discover/" />
             <Route path="saved/:savedQueryId/" />
           </Route>
+          {/*
+          TODO(mark) Long term this /queries route should go away and /discover should be the
+          canoncial route for discover2. Also the duplication in route wrapping
+          here should go away.
+          */}
           <Route
-            path="/organizations/:orgId/events/"
+            path="/organizations/:orgId/discover/queries/"
             componentPromise={() =>
-              import(/* webpackChunkName: "EventsContainer" */ 'app/views/events')
+              import(/* webpackChunkName: "DiscoverV2Container" */ 'app/views/eventsV2')
             }
             component={errorHandler(LazyLoad)}
           >
             <IndexRoute
               componentPromise={() =>
-                import(/* webpackChunkName: "Events" */ 'app/views/events/events')
+                import(
+                  /* webpackChunkName: "DiscoverV2Landing" */ 'app/views/eventsV2/landing'
+                )
               }
               component={errorHandler(LazyLoad)}
             />
           </Route>
           <Route
-            path="/organizations/:orgId/eventsv2/"
+            path="/organizations/:orgId/discover/results/"
             componentPromise={() =>
               import(/* webpackChunkName: "DiscoverV2Container" */ 'app/views/eventsV2')
             }
@@ -1395,26 +1402,38 @@ function routes() {
             <IndexRoute
               componentPromise={() =>
                 import(
-                  /* webpackChunkName: "DiscoverV2Landing" */ 'app/views/eventsV2/landing'
+                  /* webpackChunkName: "DiscoverV2Results" */ 'app/views/eventsV2/results'
                 )
               }
               component={errorHandler(LazyLoad)}
             />
-            <Route
-              path="results/"
+          </Route>
+          <Route
+            path="/organizations/:orgId/discover/:eventSlug/"
+            componentPromise={() =>
+              import(/* webpackChunkName: "DiscoverV2Container" */ 'app/views/eventsV2')
+            }
+            component={errorHandler(LazyLoad)}
+          >
+            <IndexRoute
               componentPromise={() =>
                 import(
-                  /* webpackChunkName: "DiscoverV2Results" */ 'app/views/eventsV2/results'
+                  /* webpackChunkName: "DiscoverV2Details" */ 'app/views/eventsV2/eventDetails'
                 )
               }
               component={errorHandler(LazyLoad)}
             />
-            <Route
-              path=":eventSlug/"
+          </Route>
+          <Route
+            path="/organizations/:orgId/events/"
+            componentPromise={() =>
+              import(/* webpackChunkName: "EventsContainer" */ 'app/views/events')
+            }
+            component={errorHandler(LazyLoad)}
+          >
+            <IndexRoute
               componentPromise={() =>
-                import(
-                  /* webpackChunkName: "DiscoverV2Details" */ 'app/views/eventsV2/eventDetails'
-                )
+                import(/* webpackChunkName: "Events" */ 'app/views/events/events')
               }
               component={errorHandler(LazyLoad)}
             />
diff --git a/src/sentry/static/sentry/app/views/discover/discover.tsx b/src/sentry/static/sentry/app/views/discover/discover.tsx
index 39b3f6e385..d24a45f867 100644
--- a/src/sentry/static/sentry/app/views/discover/discover.tsx
+++ b/src/sentry/static/sentry/app/views/discover/discover.tsx
@@ -1,13 +1,20 @@
 import {browserHistory} from 'react-router';
 import React from 'react';
+import styled from '@emotion/styled';
 import moment from 'moment';
 
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 import {getUtcDateString} from 'app/utils/dates';
 import {t, tct} from 'app/locale';
 import {updateProjects, updateDateTime} from 'app/actionCreators/globalSelection';
+import ConfigStore from 'app/stores/configStore';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
+import Feature from 'app/components/acl/feature';
 import PageHeading from 'app/components/pageHeading';
 import {Organization} from 'app/types';
+import space from 'app/styles/space';
+import localStorage from 'app/utils/localStorage';
+import {generateDiscoverLandingPageRoute} from 'app/views/eventsV2/utils';
 
 import {
   DiscoverContainer,
@@ -352,6 +359,17 @@ export default class Discover extends React.Component<Props, State> {
       });
   };
 
+  onGoLegacyDiscover = () => {
+    localStorage.setItem('discover:version', '2');
+    const user = ConfigStore.get('user');
+    trackAnalyticsEvent({
+      eventKey: 'discover_v2.opt_in',
+      eventName: 'Discoverv2: Go to discover2',
+      organization_id: parseInt(this.props.organization.id, 10),
+      user_id: parseInt(user.id, 10),
+    });
+  };
+
   renderSidebarNav() {
     const {view} = this.state;
     const views = [
@@ -436,6 +454,17 @@ export default class Discover extends React.Component<Props, State> {
               />
             </QueryPanel>
           )}
+          <Feature
+            features={['organizations:discover-basic']}
+            organization={organization}
+          >
+            <SwitchLink
+              href={generateDiscoverLandingPageRoute(organization.slug)}
+              onClick={this.onGoLegacyDiscover}
+            >
+              {t('Go to New Discover')}
+            </SwitchLink>
+          </Feature>
         </Sidebar>
 
         <DiscoverGlobalSelectionHeader
@@ -482,3 +511,9 @@ export default class Discover extends React.Component<Props, State> {
     );
   }
 }
+
+const SwitchLink = styled('a')`
+  font-size: ${p => p.theme.fontSizeSmall};
+  margin-left: ${space(3)};
+  margin-bottom: ${space(1)};
+`;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx b/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx
index 98543d72e2..dd189f3f10 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx
@@ -10,7 +10,6 @@ import InlineSvg from 'app/components/inlineSvg';
 import space from 'app/styles/space';
 
 import EventView from './eventView';
-import {generateDiscoverResultsRoute} from './results';
 import {generateDiscoverLandingPageRoute} from './utils';
 
 type Props = {
@@ -45,11 +44,7 @@ class DiscoverBreadcrumb extends React.Component<Props> {
     );
 
     if (eventView && eventView.isValid()) {
-      const eventTarget = {
-        pathname: generateDiscoverResultsRoute(organization.slug),
-        query: eventView.generateQueryStringObject(),
-      };
-
+      const eventTarget = eventView.getResultsViewUrlTarget(organization.slug);
       crumbs.push(
         <span key="eventview-sep">
           <StyledIcon src="icon-chevron-right" />
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/utils.tsx
index 90b5e4a057..9d61f9d6e4 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/utils.tsx
@@ -7,7 +7,7 @@ export function generateEventDetailsRoute({
   eventSlug: string;
   orgSlug: String;
 }): string {
-  return `/organizations/${orgSlug}/eventsv2/${eventSlug}/`;
+  return `/organizations/${orgSlug}/discover/${eventSlug}/`;
 }
 
 export function generateEventSlug(eventData: EventData): string {
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx
index 0b63be8f67..6f7ecd8d53 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx
@@ -68,10 +68,7 @@ class EventInputName extends React.Component<Props> {
         const renamedEventView = eventView.clone();
         renamedEventView.name = nextQueryName;
 
-        browserHistory.push({
-          pathname: location.pathname,
-          query: renamedEventView.generateQueryStringObject(),
-        });
+        browserHistory.push(renamedEventView.getResultsViewUrlTarget(organization.slug));
       }
     );
   };
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index eff4f1b540..955024651a 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -1,4 +1,4 @@
-import {Location, LocationDescriptor, Query} from 'history';
+import {Location, Query} from 'history';
 import isString from 'lodash/isString';
 import cloneDeep from 'lodash/cloneDeep';
 import pick from 'lodash/pick';
@@ -7,7 +7,7 @@ import omit from 'lodash/omit';
 import moment from 'moment';
 
 import {DEFAULT_PER_PAGE} from 'app/constants';
-import {OrganizationSummary, SavedQuery, NewQuery} from 'app/types';
+import {SavedQuery, NewQuery} from 'app/types';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 import {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable';
 
@@ -865,9 +865,9 @@ class EventView {
     return eventQuery;
   }
 
-  getResultsViewUrlTarget(organization: OrganizationSummary): LocationDescriptor {
+  getResultsViewUrlTarget(slug: string): {pathname: string; query: Query} {
     return {
-      pathname: `/organizations/${organization.slug}/eventsv2/results/`,
+      pathname: `/organizations/${slug}/discover/results/`,
       query: this.generateQueryStringObject(),
     };
   }
diff --git a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
index 6e28928d27..c2c650c2ec 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
@@ -13,13 +13,16 @@ import SentryTypes from 'app/sentryTypes';
 import {Organization, SavedQuery} from 'app/types';
 import localStorage from 'app/utils/localStorage';
 import AsyncComponent from 'app/components/asyncComponent';
+import BetaTag from 'app/components/betaTag';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import Banner from 'app/components/banner';
 import Button from 'app/components/button';
+import Feature from 'app/components/acl/feature';
 import SearchBar from 'app/components/searchBar';
 import NoProjectMessage from 'app/components/noProjectMessage';
 
+import ConfigStore from 'app/stores/configStore';
 import {PageContent} from 'app/styles/organization';
 import space from 'app/styles/space';
 import withOrganization from 'app/utils/withOrganization';
@@ -28,7 +31,6 @@ import EventView from './eventView';
 import {DEFAULT_EVENT_VIEW} from './data';
 import QueryList from './queryList';
 import {getPrebuiltQueries, decodeScalar} from './utils';
-import {generateDiscoverResultsRoute} from './results';
 
 const BANNER_DISMISSED_KEY = 'discover-banner-dismissed';
 
@@ -183,13 +185,7 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
 
     const {location, organization} = this.props;
     const eventView = EventView.fromNewQueryWithLocation(DEFAULT_EVENT_VIEW, location);
-
-    const to = {
-      pathname: generateDiscoverResultsRoute(organization.slug),
-      query: {
-        ...eventView.generateQueryStringObject(),
-      },
-    };
+    const to = eventView.getResultsViewUrlTarget(organization.slug);
 
     return (
       <Banner
@@ -218,13 +214,7 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
     const {location, organization} = this.props;
 
     const eventView = EventView.fromNewQueryWithLocation(DEFAULT_EVENT_VIEW, location);
-
-    const to = {
-      pathname: generateDiscoverResultsRoute(organization.slug),
-      query: {
-        ...eventView.generateQueryStringObject(),
-      },
-    };
+    const to = eventView.getResultsViewUrlTarget(organization.slug);
 
     return (
       <StyledActions>
@@ -242,6 +232,17 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
     );
   }
 
+  onGoLegacyDiscover = () => {
+    localStorage.setItem('discover:version', '1');
+    const user = ConfigStore.get('user');
+    trackAnalyticsEvent({
+      eventKey: 'discover_v2.opt_out',
+      eventName: 'Discoverv2: Go to discover',
+      organization_id: parseInt(this.props.organization.id, 10),
+      user_id: parseInt(user.id, 10),
+    });
+  };
+
   render() {
     let body;
     const {location, organization} = this.props;
@@ -253,7 +254,10 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
     } else {
       body = (
         <PageContent>
-          <StyledPageHeader>{t('Discover')}</StyledPageHeader>
+          <StyledPageHeader>
+            {t('Discover')}
+            <BetaTag />
+          </StyledPageHeader>
           {this.renderBanner()}
           {this.renderActions()}
           <QueryList
@@ -264,6 +268,14 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
             organization={organization}
             onQueryChange={this.handleQueryChange}
           />
+          <Feature features={['organizations:discover']} organization={organization}>
+            <SwitchLink
+              href={`/organizations/${organization.slug}/discover/`}
+              onClick={this.onGoLegacyDiscover}
+            >
+              {t('Go to Legacy Discover')}
+            </SwitchLink>
+          </Feature>
         </PageContent>
       );
     }
@@ -308,5 +320,10 @@ const StyledButton = styled(Button)`
   white-space: nowrap;
 `;
 
+const SwitchLink = styled('a')`
+  font-size: ${p => p.theme.fontSizeSmall};
+  margin-left: ${space(1)};
+`;
+
 export default withOrganization(DiscoverLanding);
 export {DiscoverLanding};
diff --git a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
index df292e1e1d..17589a69c6 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
@@ -22,7 +22,6 @@ import QueryCard from './querycard';
 import MiniGraph from './miniGraph';
 import {getPrebuiltQueries} from './utils';
 import {handleDeleteQuery, handleCreateQuery} from './savedQuery/utils';
-import {generateDiscoverResultsRoute} from './results';
 
 type Props = {
   api: Client;
@@ -113,15 +112,7 @@ class QueryList extends React.Component<Props> {
         ' - ' +
         moment(eventView.end).format('MMM D, YYYY h:mm A');
 
-      const to = {
-        pathname: generateDiscoverResultsRoute(organization.slug),
-        query: {
-          ...location.query,
-          // remove any landing page cursor
-          cursor: undefined,
-          ...eventView.generateQueryStringObject(),
-        },
-      };
+      const to = eventView.getResultsViewUrlTarget(organization.slug);
 
       return (
         <QueryCard
@@ -168,15 +159,8 @@ class QueryList extends React.Component<Props> {
         moment(eventView.start).format('MMM D, YYYY h:mm A') +
         ' - ' +
         moment(eventView.end).format('MMM D, YYYY h:mm A');
-      const to = {
-        pathname: generateDiscoverResultsRoute(organization.slug),
-        query: {
-          ...location.query,
-          // remove any landing page cursor
-          cursor: undefined,
-          ...eventView.generateQueryStringObject(),
-        },
-      };
+
+      const to = eventView.getResultsViewUrlTarget(organization.slug);
 
       return (
         <QueryCard
diff --git a/src/sentry/static/sentry/app/views/eventsV2/results.tsx b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
index 2d193e80e6..0f7be5729e 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/results.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
@@ -241,8 +241,4 @@ const Side = styled('div')<{eventView: EventView}>`
   grid-column: 2/3;
 `;
 
-export function generateDiscoverResultsRoute(orgSlug: string): string {
-  return `/organizations/${orgSlug}/eventsv2/results/`;
-}
-
 export default withApi(withOrganization(withGlobalSelection(Results)));
diff --git a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
index 05b874fb18..562413a326 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
@@ -125,7 +125,7 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
     event.preventDefault();
     event.stopPropagation();
 
-    const {api, location, organization, eventView} = this.props;
+    const {api, organization, eventView} = this.props;
 
     if (!this.state.queryName) {
       return;
@@ -143,10 +143,7 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
         const view = EventView.fromSavedQuery(savedQuery);
 
         this.setState({queryName: ''});
-        browserHistory.push({
-          pathname: location.pathname,
-          query: view.generateQueryStringObject(),
-        });
+        browserHistory.push(view.getResultsViewUrlTarget(organization.slug));
       }
     );
   };
@@ -160,10 +157,7 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
     handleUpdateQuery(api, organization, eventView).then((savedQuery: SavedQuery) => {
       const view = EventView.fromSavedQuery(savedQuery);
       this.setState({queryName: ''});
-      browserHistory.push({
-        pathname: location.pathname,
-        query: view.generateQueryStringObject(),
-      });
+      browserHistory.push(view.getResultsViewUrlTarget(organization.slug));
     });
   };
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
index 8baab069de..561cae1291 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
@@ -51,7 +51,7 @@ class Table extends React.PureComponent<TableProps, TableState> {
   };
 
   componentDidMount() {
-    const {location, eventView} = this.props;
+    const {location, organization, eventView} = this.props;
 
     if (!eventView.isValid()) {
       const nextEventView = EventView.fromNewQueryWithLocation(
@@ -59,10 +59,7 @@ class Table extends React.PureComponent<TableProps, TableState> {
         location
       );
 
-      browserHistory.replace({
-        pathname: location.pathname,
-        query: nextEventView.generateQueryStringObject(),
-      });
+      browserHistory.replace(nextEventView.getResultsViewUrlTarget(organization.slug));
       return;
     }
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/tags.tsx b/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
index 0d964bb3fe..520c115389 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
@@ -13,16 +13,11 @@ import Placeholder from 'app/components/placeholder';
 import TagDistributionMeter from 'app/components/tagDistributionMeter';
 import withApi from 'app/utils/withApi';
 import {Organization} from 'app/types';
+import {generateQueryWithTag} from 'app/utils';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 import {SectionHeading} from './styles';
 
-import {
-  fetchTagFacets,
-  fetchTotalCount,
-  getEventTagSearchUrl,
-  Tag,
-  TagTopValue,
-} from './utils';
+import {fetchTagFacets, fetchTotalCount, Tag, TagTopValue} from './utils';
 import EventView, {isAPIPayloadSimilar} from './eventView';
 
 type Props = {
@@ -105,16 +100,16 @@ class Tags extends React.Component<Props, State> {
   };
 
   renderTag(tag: Tag) {
-    const {organization, location} = this.props;
+    const {organization, eventView} = this.props;
     const {totalValues} = this.state;
 
     const segments: TagTopValue[] = tag.topValues.map(segment => {
-      segment.url = getEventTagSearchUrl(
-        tag.key,
-        segment.value,
-        organization,
-        location.query
-      );
+      const url = eventView.getResultsViewUrlTarget(organization.slug);
+      url.query = generateQueryWithTag(url.query, {
+        key: tag.key,
+        value: segment.value,
+      });
+      segment.url = url;
 
       return segment;
     });
diff --git a/src/sentry/static/sentry/app/views/eventsV2/tagsTable.tsx b/src/sentry/static/sentry/app/views/eventsV2/tagsTable.tsx
index 1b42053131..f1d98ee976 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/tagsTable.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/tagsTable.tsx
@@ -35,7 +35,7 @@ const TagsTable = (props: Props) => {
                 {[tag.key]: tag.value},
                 event
               );
-              target = nextView.getResultsViewUrlTarget(organization);
+              target = nextView.getResultsViewUrlTarget(organization.slug);
             }
             return (
               <StyledTr key={tag.key}>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 7e982fbc17..64f58d6ff9 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -6,13 +6,12 @@ import {Location, Query} from 'history';
 import {browserHistory} from 'react-router';
 
 import {t} from 'app/locale';
-import {Event, Organization, OrganizationSummary} from 'app/types';
+import {Event, Organization} from 'app/types';
 import {Client} from 'app/api';
 import {getTitle} from 'app/utils/events';
 import {getUtcDateString} from 'app/utils/dates';
 import {URL_PARAM} from 'app/constants/globalSelectionHeader';
 import {disableMacros} from 'app/views/discover/result/utils';
-import {generateQueryWithTag} from 'app/utils';
 import {appendTagCondition} from 'app/utils/queryString';
 import {
   COL_WIDTH_UNDEFINED,
@@ -37,7 +36,6 @@ import {
 import EventView, {Field as FieldType, Column} from './eventView';
 import {Aggregation, Field, AGGREGATIONS, FIELDS} from './eventQueryParams';
 import {TableColumn, TableDataRow} from './table/types';
-import {generateDiscoverResultsRoute} from './results';
 
 export type EventQuery = {
   field: string[];
@@ -94,28 +92,6 @@ export function isAggregateField(field: string): boolean {
   );
 }
 
-/**
- * Return a location object for the search results pathname
- * with a query string reflected the provided tag.
- *
- * @param {String} tagKey
- * @param {String} tagValue
- * @param {OrganizationSummary} organization
- * @param {Query} browser location query.
- * @return {Object} router target
- */
-export function getEventTagSearchUrl(
-  tagKey: string,
-  tagValue: string,
-  organization: OrganizationSummary,
-  query: Query
-) {
-  return {
-    pathname: generateDiscoverResultsRoute(organization.slug),
-    query: generateQueryWithTag(query, {key: tagKey, value: tagValue}),
-  };
-}
-
 export type TagTopValue = {
   name: string;
   url: {
@@ -478,5 +454,5 @@ export function getExpandedResults(
 }
 
 export function generateDiscoverLandingPageRoute(orgSlug: string): string {
-  return `/organizations/${orgSlug}/eventsv2/`;
+  return `/organizations/${orgSlug}/discover/queries/`;
 }
diff --git a/src/sentry/static/sentry/app/views/incidents/details/body.tsx b/src/sentry/static/sentry/app/views/incidents/details/body.tsx
index 895be91fbc..d8495d40b7 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/body.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/body.tsx
@@ -49,11 +49,7 @@ export default class DetailsBody extends React.Component<Props> {
     };
 
     const discoverView = EventView.fromSavedQuery(discoverQuery);
-
-    return {
-      pathname: `/organizations/${orgId}/eventsv2/results/`,
-      query: discoverView.generateQueryStringObject(),
-    };
+    return discoverView.getResultsViewUrlTarget(orgId);
   }
 
   render() {
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/actions.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/actions.jsx
index ff9b75bbad..647657d160 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/actions.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/actions.jsx
@@ -15,7 +15,6 @@ import {uniqueId} from 'app/utils/guid';
 import Button from 'app/components/button';
 import DropdownLink from 'app/components/dropdownLink';
 import EventView from 'app/views/eventsV2/eventView';
-import {generateDiscoverResultsRoute} from 'app/views/eventsV2/results';
 import Feature from 'app/components/acl/feature';
 import FeatureDisabled from 'app/components/acl/featureDisabled';
 import GroupActions from 'app/actions/groupActions';
@@ -157,11 +156,7 @@ const GroupDetailsActions = createReactClass({
     };
 
     const discoverView = EventView.fromSavedQuery(discoverQuery);
-
-    return {
-      pathname: generateDiscoverResultsRoute(organization.slug),
-      query: discoverView.generateQueryStringObject(),
-    };
+    return discoverView.getResultsViewUrlTarget(organization.slug);
   },
 
   onDelete() {
diff --git a/tests/acceptance/test_organization_events_v2.py b/tests/acceptance/test_organization_events_v2.py
index d599721818..db42820aeb 100644
--- a/tests/acceptance/test_organization_events_v2.py
+++ b/tests/acceptance/test_organization_events_v2.py
@@ -150,8 +150,8 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
         self.create_member(user=self.user, organization=self.org, role="owner", teams=[self.team])
 
         self.login_as(self.user)
-        self.landing_path = u"/organizations/{}/eventsv2/".format(self.org.slug)
-        self.result_path = u"/organizations/{}/eventsv2/results/".format(self.org.slug)
+        self.landing_path = u"/organizations/{}/discover/queries/".format(self.org.slug)
+        self.result_path = u"/organizations/{}/discover/results/".format(self.org.slug)
 
     def wait_until_loaded(self):
         self.browser.wait_until_not(".loading-indicator")
diff --git a/tests/js/spec/views/eventsV2/eventDetails.spec.jsx b/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
index 041f1790b9..1699f0a32b 100644
--- a/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
+++ b/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
@@ -19,7 +19,7 @@ describe('EventsV2 > EventDetails', function() {
     });
 
     MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/eventsv2/',
+      url: '/organizations/org-slug/discover/',
       body: {
         meta: {
           id: 'string',
@@ -212,7 +212,7 @@ describe('EventsV2 > EventDetails', function() {
       organization: TestStubs.Organization({projects: [TestStubs.Project()]}),
       router: {
         location: {
-          pathname: '/organizations/org-slug/eventsv2/project-slug:deadbeef',
+          pathname: '/organizations/org-slug/discover/project-slug:deadbeef',
           query: {},
         },
       },
@@ -233,7 +233,7 @@ describe('EventsV2 > EventDetails', function() {
 
     // Should append tag value and other event attributes to results view query.
     const target = tagLink.props().to;
-    expect(target.pathname).toEqual('/organizations/org-slug/eventsv2/results/');
+    expect(target.pathname).toEqual('/organizations/org-slug/discover/results/');
     expect(target.query.query).toEqual('browser:Firefox title:"Oh no something bad"');
   });
 
@@ -242,7 +242,7 @@ describe('EventsV2 > EventDetails', function() {
       organization: TestStubs.Organization({projects: [TestStubs.Project()]}),
       router: {
         location: {
-          pathname: '/organizations/org-slug/eventsv2/project-slug:deadbeef',
+          pathname: '/organizations/org-slug/discover/project-slug:deadbeef',
           query: {},
         },
       },
@@ -265,7 +265,7 @@ describe('EventsV2 > EventDetails', function() {
 
     // Should append tag value and other event attributes to results view query.
     const target = tagLink.props().to;
-    expect(target.pathname).toEqual('/organizations/org-slug/eventsv2/results/');
+    expect(target.pathname).toEqual('/organizations/org-slug/discover/results/');
     expect(target.query.query).toEqual(
       'Dumpster browser:Firefox title:"Oh no something bad"'
     );
diff --git a/tests/js/spec/views/eventsV2/eventView.spec.jsx b/tests/js/spec/views/eventsV2/eventView.spec.jsx
index f61606f110..600e837fe2 100644
--- a/tests/js/spec/views/eventsV2/eventView.spec.jsx
+++ b/tests/js/spec/views/eventsV2/eventView.spec.jsx
@@ -1842,8 +1842,8 @@ describe('EventView.getResultsViewUrlTarget()', function() {
 
   it('generates a URL', function() {
     const view = new EventView(state);
-    const result = view.getResultsViewUrlTarget(organization);
-    expect(result.pathname).toEqual('/organizations/org-slug/eventsv2/results/');
+    const result = view.getResultsViewUrlTarget(organization.slug);
+    expect(result.pathname).toEqual('/organizations/org-slug/discover/results/');
     expect(result.query.query).toEqual(state.query);
     expect(result.query.project).toEqual(state.project);
   });
diff --git a/tests/js/spec/views/eventsV2/queryList.spec.jsx b/tests/js/spec/views/eventsV2/queryList.spec.jsx
index 3061808092..41fc0fa333 100644
--- a/tests/js/spec/views/eventsV2/queryList.spec.jsx
+++ b/tests/js/spec/views/eventsV2/queryList.spec.jsx
@@ -46,7 +46,7 @@ describe('EventsV2 > QueryList', function() {
     });
 
     location = {
-      pathname: '/organizations/org-slug/eventsV2',
+      pathname: '/organizations/org-slug/discover/queries/',
       query: {cursor: '0:1:1', statsPeriod: '14d'},
     };
     queryChangeMock = jest.fn();
diff --git a/tests/js/spec/views/eventsV2/results.spec.jsx b/tests/js/spec/views/eventsV2/results.spec.jsx
index f5bcb6652c..f6bea151f4 100644
--- a/tests/js/spec/views/eventsV2/results.spec.jsx
+++ b/tests/js/spec/views/eventsV2/results.spec.jsx
@@ -2,8 +2,7 @@ import React from 'react';
 import {mountWithTheme} from 'sentry-test/enzyme';
 
 import {initializeOrg} from 'sentry-test/initializeOrg';
-
-import Results, {generateDiscoverResultsRoute} from 'app/views/eventsV2/results';
+import Results from 'app/views/eventsV2/results';
 
 const FIELDS = [
   {
@@ -148,11 +147,3 @@ describe('EventsV2 > Results', function() {
     });
   });
 });
-
-describe('generateDiscoverResultsRoute', function() {
-  it('generateDiscoverResultsRoute', function() {
-    expect(generateDiscoverResultsRoute('sentry')).toBe(
-      '/organizations/sentry/eventsv2/results/'
-    );
-  });
-});
diff --git a/tests/js/spec/views/eventsV2/tags.spec.jsx b/tests/js/spec/views/eventsV2/tags.spec.jsx
index 27da576872..b89bee8f21 100644
--- a/tests/js/spec/views/eventsV2/tags.spec.jsx
+++ b/tests/js/spec/views/eventsV2/tags.spec.jsx
@@ -115,8 +115,8 @@ describe('Tags', function() {
     wrapper.update();
 
     expect(initialData.router.push).toHaveBeenCalledWith({
-      pathname: '/organizations/org-slug/eventsv2/results/',
-      query: {environment: 'abcd123'},
+      pathname: '/organizations/org-slug/discover/results/',
+      query: expect.objectContaining({environment: 'abcd123'}),
     });
   });
 });
diff --git a/tests/js/spec/views/eventsV2/utils.spec.jsx b/tests/js/spec/views/eventsV2/utils.spec.jsx
index 29d03e8c2a..0a04b2d630 100644
--- a/tests/js/spec/views/eventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/eventsV2/utils.spec.jsx
@@ -6,7 +6,6 @@ import EventView from 'app/views/eventsV2/eventView';
 import {
   getFieldRenderer,
   getAggregateAlias,
-  getEventTagSearchUrl,
   isAggregateField,
   decodeColumnOrder,
   pushEventViewToLocation,
@@ -15,46 +14,6 @@ import {
 } from 'app/views/eventsV2/utils';
 import {COL_WIDTH_UNDEFINED, COL_WIDTH_NUMBER} from 'app/components/gridEditable';
 
-describe('eventTagSearchUrl()', function() {
-  let location, organization;
-  beforeEach(function() {
-    organization = TestStubs.Organization();
-    location = {
-      pathname: '/organization/org-slug/events/',
-      query: {},
-    };
-  });
-
-  it('adds a query', function() {
-    expect(
-      getEventTagSearchUrl('browser', 'firefox', organization, location.query)
-    ).toEqual({
-      pathname: `/organizations/${organization.slug}/eventsv2/results/`,
-      query: {query: 'browser:firefox'},
-    });
-  });
-
-  it('appends to an existing query', function() {
-    location.query.query = 'failure';
-    expect(
-      getEventTagSearchUrl('browser', 'firefox', organization, location.query)
-    ).toEqual({
-      pathname: `/organizations/${organization.slug}/eventsv2/results/`,
-      query: {query: 'failure browser:firefox'},
-    });
-  });
-
-  it('quotes tags with spaces', function() {
-    location.query.query = 'failure';
-    expect(
-      getEventTagSearchUrl('browser', 'fire fox', organization, location.query)
-    ).toEqual({
-      pathname: `/organizations/${organization.slug}/eventsv2/results/`,
-      query: {query: 'failure browser:"fire fox"'},
-    });
-  });
-});
-
 describe('getAggregateAlias', function() {
   it('no-ops simple fields', function() {
     expect(getAggregateAlias('field')).toEqual('field');
@@ -161,7 +120,7 @@ describe('getFieldRenderer', function() {
     const value = wrapper.find('OverflowLink');
     expect(value).toHaveLength(1);
     expect(value.props().to).toEqual({
-      pathname: `/organizations/org-slug/eventsv2/${project.slug}:deadbeef/`,
+      pathname: `/organizations/org-slug/discover/${project.slug}:deadbeef/`,
       query: {},
     });
     expect(value.text()).toEqual(data.transaction);
@@ -175,7 +134,7 @@ describe('getFieldRenderer', function() {
     const value = wrapper.find('OverflowLink');
     expect(value).toHaveLength(1);
     expect(value.props().to).toEqual({
-      pathname: `/organizations/org-slug/eventsv2/${project.slug}:deadbeef/`,
+      pathname: `/organizations/org-slug/discover/${project.slug}:deadbeef/`,
       query: {},
     });
     expect(value.text()).toEqual(data.title);
@@ -207,7 +166,7 @@ describe('getFieldRenderer', function() {
 
     const link = wrapper.find('OverflowLink');
     expect(link.props().to).toEqual({
-      pathname: `/organizations/org-slug/eventsv2/${project.slug}:deadbeef/`,
+      pathname: `/organizations/org-slug/discover/${project.slug}:deadbeef/`,
       query: {},
     });
     expect(link.text()).toEqual('/example');
@@ -223,7 +182,7 @@ describe('getFieldRenderer', function() {
 
     const link = wrapper.find('OverflowLink');
     expect(link.props().to).toEqual({
-      pathname: `/organizations/org-slug/eventsv2/${project.slug}:deadbeef/`,
+      pathname: `/organizations/org-slug/discover/${project.slug}:deadbeef/`,
       query: {},
     });
     expect(link.find('Count').props().value).toEqual(data.numeric);
@@ -239,7 +198,7 @@ describe('getFieldRenderer', function() {
 
     const link = wrapper.find('OverflowLink');
     expect(link.props().to).toEqual({
-      pathname: `/organizations/org-slug/eventsv2/${project.slug}:deadbeef/`,
+      pathname: `/organizations/org-slug/discover/${project.slug}:deadbeef/`,
       query: {},
     });
     expect(link.find('StyledDateTime').props().date).toEqual(data.createdAt);
@@ -490,7 +449,7 @@ describe('getExpandedResults()', function() {
 describe('generateDiscoverLandingPageRoute', function() {
   it('generateDiscoverLandingPageRoute', function() {
     expect(generateDiscoverLandingPageRoute('sentry')).toBe(
-      '/organizations/sentry/eventsv2/'
+      '/organizations/sentry/discover/queries/'
     );
   });
 });
