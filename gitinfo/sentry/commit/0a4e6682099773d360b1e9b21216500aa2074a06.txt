commit 0a4e6682099773d360b1e9b21216500aa2074a06
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Mon Mar 25 13:03:19 2019 -0700

    feat(settings): Copy Project Settings. (#12168)
    
    * first pass at project settings copy.
    
    * Added transaction and a bit of cleanup.
    
    * Added project details endpoint.
    
    * Added skeleton for another test case
    
    * Added additional tests and checks for permissions for teams and projects.
    
    * sorted rules.
    
    * removed check if the project was in another project and simply tell the user the project does not exist.
    
    * Error occurred during project settings copy logging.
    
    * Added tests to project just like project details.
    
    * Added response to user when the copy project fails.
    
    * Added logging.exception to the copy project settings method

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 5317d66253..ba328eed77 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -101,6 +101,7 @@ class ProjectAdminSerializer(ProjectMemberSerializer):
     allowedDomains = ListField(child=OriginField(), required=False)
     resolveAge = serializers.IntegerField(required=False)
     platform = serializers.CharField(required=False)
+    copy_from_project = serializers.IntegerField(required=False)
 
     def validate_digestsMinDelay(self, attrs, source):
         max_delay = attrs['digestsMaxDelay'] if 'digestsMaxDelay' in attrs else self.context['project'].get_option(
@@ -166,6 +167,33 @@ class ProjectAdminSerializer(ProjectMemberSerializer):
             )
         return attrs
 
+    def validate_copy_from_project(self, attrs, source):
+        other_project_id = attrs[source]
+
+        try:
+            other_project = Project.objects.filter(
+                id=other_project_id,
+                organization_id=self.context['project'].organization_id,
+            ).prefetch_related('teams')[0]
+        except IndexError:
+            raise serializers.ValidationError(
+                'Project to copy settings from not found.'
+            )
+
+        request = self.context['request']
+        if not request.access.has_project_access(other_project):
+            raise serializers.ValidationError(
+                'Project settings cannot be copied from a project you do not have access to.'
+            )
+
+        for project_team in other_project.projectteam_set.all():
+            if not request.access.has_team_scope(project_team.team, 'team:write'):
+                raise serializers.ValidationError(
+                    'Project settings cannot be copied from a project with a team you do not have write access to.'
+                )
+
+        return attrs
+
 
 class RelaxedProjectPermission(ProjectPermission):
     scope_map = {
@@ -521,6 +549,13 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                             'detail': ['You do not have that feature enabled']
                         }, status=400
                     )
+            if 'copy_from_project' in result:
+                if not project.copy_settings_from(result['copy_from_project']):
+                    return Response(
+                        {
+                            'detail': ['Copy project settings failed.']
+                        }, status=409
+                    )
 
             self.create_audit_entry(
                 request=request,
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 90ee3dda74..027f34b6da 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -407,3 +407,54 @@ class Project(Model):
 
     def get_lock_key(self):
         return 'project_token:%s' % self.id
+
+    def copy_settings_from(self, project_id):
+        """
+        Copies project level settings of the inputted project
+        - General Settings
+        - ProjectTeams
+        - Alerts Settings and Rules
+        - EnvironmentProjects
+        - ProjectOwnership Rules and settings
+        - Project Inbound Data Filters
+
+        Returns True if the settings have successfully been copied over
+        Returns False otherwise
+        """
+        from sentry.models import (
+            EnvironmentProject, ProjectOption, ProjectOwnership, Rule
+        )
+        model_list = [EnvironmentProject, ProjectOwnership, ProjectTeam, Rule]
+
+        project = Project.objects.get(id=project_id)
+        try:
+            with transaction.atomic():
+                for model in model_list:
+                    # remove all previous project settings
+                    model.objects.filter(
+                        project_id=self.id,
+                    ).delete()
+
+                    # add settings from other project to self
+                    for setting in model.objects.filter(
+                        project_id=project_id
+                    ):
+                        setting.pk = None
+                        setting.project_id = self.id
+                        setting.save()
+
+                options = ProjectOption.objects.get_all_values(project=project)
+                for key, value in six.iteritems(options):
+                    self.update_option(key, value)
+
+        except IntegrityError as e:
+            logging.exception(
+                'Error occurred during copy project settings.',
+                extra={
+                    'error': e.message,
+                    'project_to': self.id,
+                    'project_from': project_id,
+                }
+            )
+            return False
+        return True
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index 32192adfa8..3a5e73b24b 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -6,7 +6,7 @@ import six
 from django.core.urlresolvers import reverse
 
 from sentry.constants import RESERVED_PROJECT_SLUGS
-from sentry.models import Project, ProjectBookmark, ProjectStatus, UserOption, DeletedProject, ProjectRedirect, AuditLogEntry, AuditLogEntryEvent
+from sentry.models import OrganizationMember, Project, EnvironmentProject, ProjectOwnership, ProjectBookmark, ProjectStatus, ProjectTeam, Rule, UserOption, DeletedProject, ProjectRedirect, AuditLogEntry, AuditLogEntryEvent
 from sentry.testutils import APITestCase
 
 
@@ -626,6 +626,218 @@ class ProjectUpdateTest(APITestCase):
         assert self.project.get_option('digests:mail:maximum_delay') == max_delay
 
 
+class CopyProjectSettingsTest(APITestCase):
+    def setUp(self):
+        super(CopyProjectSettingsTest, self).setUp()
+        self.login_as(user=self.user)
+
+        self.options_dict = {
+            'sentry:resolve_age': 1,
+            'sentry:scrub_data': False,
+            'sentry:scrub_defaults': False,
+        }
+        self.other_project = self.create_project()
+        for key, value in six.iteritems(self.options_dict):
+            self.other_project.update_option(
+                key=key,
+                value=value,
+            )
+
+        self.teams = [self.create_team(), self.create_team(), self.create_team()]
+
+        for team in self.teams:
+            ProjectTeam.objects.create(
+                team=team,
+                project=self.other_project,
+            )
+
+        self.environments = [
+            self.create_environment(project=self.other_project),
+            self.create_environment(project=self.other_project)
+        ]
+
+        self.ownership = ProjectOwnership.objects.create(
+            project=self.other_project,
+            raw='{"hello":"hello"}',
+            schema={'hello': 'hello'},
+        )
+
+        Rule.objects.create(
+            project=self.other_project,
+            label='rule1',
+        )
+        Rule.objects.create(
+            project=self.other_project,
+            label='rule2',
+        )
+        Rule.objects.create(
+            project=self.other_project,
+            label='rule3',
+        )
+        # there is a default rule added to project
+        self.rules = Rule.objects.filter(project_id=self.other_project.id).order_by('label')
+
+    def path(self, project):
+        return reverse('sentry-api-0-project-details', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+        })
+
+    def assert_other_project_settings_not_changed(self):
+        # other_project should not have changed. This should check that.
+        self.assert_settings_copied(self.other_project)
+
+    def assert_settings_copied(self, project):
+        for key, value in six.iteritems(self.options_dict):
+            assert project.get_option(key) == value
+
+        project_teams = ProjectTeam.objects.filter(
+            project_id=project.id,
+            team__in=self.teams
+        )
+        assert len(project_teams) == len(self.teams)
+
+        project_env = EnvironmentProject.objects.filter(
+            project_id=project.id,
+            environment__in=self.environments,
+        )
+        assert len(project_env) == len(self.environments)
+
+        ownership = ProjectOwnership.objects.get(project_id=project.id)
+        assert ownership.raw == self.ownership.raw
+        assert ownership.schema == self.ownership.schema
+
+        rules = Rule.objects.filter(
+            project_id=project.id
+        ).order_by('label')
+        for rule, other_rule in zip(rules, self.rules):
+            assert rule.label == other_rule.label
+
+    def assert_settings_not_copied(self, project, teams=[]):
+        for key in six.iterkeys(self.options_dict):
+            assert project.get_option(key) is None
+
+        project_teams = ProjectTeam.objects.filter(
+            project_id=project.id,
+            team__in=teams,
+        )
+        assert len(project_teams) == len(teams)
+
+        project_envs = EnvironmentProject.objects.filter(
+            project_id=project.id,
+        )
+        assert len(project_envs) == 0
+
+        assert not ProjectOwnership.objects.filter(project_id=project.id).exists()
+
+        # default rule
+        rules = Rule.objects.filter(project_id=project.id)
+        assert len(rules) == 1
+        assert rules[0].label == 'Send a notification for new issues'
+
+    def test_simple(self):
+        project = self.create_project()
+        resp = self.client.put(self.path(project), data={
+            'copy_from_project': self.other_project.id
+        })
+        assert resp.status_code == 200
+        self.assert_settings_copied(project)
+        self.assert_other_project_settings_not_changed()
+
+    def test_additional_params_in_payload(self):
+        # Right now these are overwritten with the copied project's settings
+        project = self.create_project()
+        resp = self.client.put(self.path(project), data={
+            'copy_from_project': self.other_project.id,
+            'sentry:resolve_age': 2,
+            'sentry:scrub_data': True,
+            'sentry:scrub_defaults': True,
+        })
+        assert resp.status_code == 200
+        self.assert_settings_copied(project)
+        self.assert_other_project_settings_not_changed()
+
+    def test_project_from_another_org(self):
+        project = self.create_project()
+        other_project = self.create_project(organization=self.create_organization())
+        resp = self.client.put(self.path(project), data={
+            'copy_from_project': other_project.id
+        })
+        assert resp.status_code == 400
+        assert resp.data == {'copy_from_project': ['Project to copy settings from not found.']}
+        self.assert_settings_not_copied(project)
+        self.assert_settings_not_copied(other_project)
+
+    def test_project_does_not_exist(self):
+        project = self.create_project()
+        resp = self.client.put(self.path(project), data={
+            'copy_from_project': 1234567890
+        })
+        assert resp.status_code == 400
+        assert resp.data == {'copy_from_project': ['Project to copy settings from not found.']}
+        self.assert_settings_not_copied(project)
+
+    def test_user_does_not_have_access_to_copy_from_project(self):
+        user = self.create_user()
+        self.login_as(user=user)
+        team = self.create_team(members=[user])
+        project = self.create_project(teams=[team])
+        OrganizationMember.objects.filter(
+            user=user,
+            organization=self.organization
+        ).update(role='admin')
+
+        self.organization.flags.allow_joinleave = False
+        self.organization.save()
+        resp = self.client.put(self.path(project), data={
+            'copy_from_project': self.other_project.id
+        })
+        assert resp.status_code == 400
+        assert resp.data == {'copy_from_project': [
+            'Project settings cannot be copied from a project you do not have access to.']}
+        self.assert_other_project_settings_not_changed()
+        self.assert_settings_not_copied(project, teams=[team])
+
+    def test_project_coping_from_has_team_user_lacks_write_access(self):
+        user = self.create_user()
+        self.login_as(user=user)
+        team = self.create_team(members=[user])
+        project = self.create_project(teams=[team])
+        OrganizationMember.objects.filter(
+            user=user,
+            organization=self.organization
+        ).update(role='admin')
+
+        self.other_project.add_team(team)
+
+        # adding team user lacks write access to
+        self.other_project.add_team(self.create_team())
+
+        self.organization.flags.allow_joinleave = False
+        self.organization.save()
+
+        resp = self.client.put(self.path(project), data={
+            'copy_from_project': self.other_project.id
+        })
+        assert resp.status_code == 400
+        assert resp.data == {'copy_from_project': [
+            'Project settings cannot be copied from a project with a team you do not have write access to.']}
+        self.assert_other_project_settings_not_changed()
+        self.assert_settings_not_copied(project, teams=[team])
+
+    @mock.patch('sentry.models.project.Project.copy_settings_from')
+    def test_copy_project_settings_fails(self, mock_copy_settings_from):
+        mock_copy_settings_from.return_value = False
+        project = self.create_project()
+        resp = self.client.put(self.path(project), data={
+            'copy_from_project': self.other_project.id
+        })
+        assert resp.status_code == 409
+        assert resp.data == {'detail': ['Copy project settings failed.']}
+        self.assert_settings_not_copied(project)
+        self.assert_other_project_settings_not_changed()
+
+
 class ProjectDeleteTest(APITestCase):
     @mock.patch('sentry.api.endpoints.project_details.uuid4')
     @mock.patch('sentry.api.endpoints.project_details.delete_project')
diff --git a/tests/sentry/models/test_project.py b/tests/sentry/models/test_project.py
index 90a684a70d..6ad209dc14 100644
--- a/tests/sentry/models/test_project.py
+++ b/tests/sentry/models/test_project.py
@@ -2,7 +2,13 @@
 
 from __future__ import absolute_import
 
-from sentry.models import Environment, OrganizationMember, OrganizationMemberTeam, Project, Release, ReleaseProject, ReleaseProjectEnvironment, Rule
+import six
+
+from sentry.models import (
+    Environment, OrganizationMember, OrganizationMemberTeam,
+    Project, EnvironmentProject, ProjectOwnership, ProjectTeam,
+    Release, ReleaseProject, ReleaseProjectEnvironment, Rule
+)
 from sentry.testutils import TestCase
 
 
@@ -218,3 +224,128 @@ class ProjectTest(TestCase):
             project=project,
             release=release,
         ).exists()
+
+
+class CopyProjectSettingsTest(TestCase):
+    def setUp(self):
+        super(CopyProjectSettingsTest, self).setUp()
+        self.login_as(user=self.user)
+
+        self.options_dict = {
+            'sentry:resolve_age': 1,
+            'sentry:scrub_data': False,
+            'sentry:scrub_defaults': False,
+        }
+        self.other_project = self.create_project()
+        for key, value in six.iteritems(self.options_dict):
+            self.other_project.update_option(
+                key=key,
+                value=value,
+            )
+
+        self.teams = [self.create_team(), self.create_team(), self.create_team()]
+
+        for team in self.teams:
+            ProjectTeam.objects.create(
+                team=team,
+                project=self.other_project,
+            )
+
+        self.environments = [
+            self.create_environment(project=self.other_project),
+            self.create_environment(project=self.other_project)
+        ]
+
+        self.ownership = ProjectOwnership.objects.create(
+            project=self.other_project,
+            raw='{"hello":"hello"}',
+            schema={'hello': 'hello'},
+        )
+
+        Rule.objects.create(
+            project=self.other_project,
+            label='rule1',
+        )
+        Rule.objects.create(
+            project=self.other_project,
+            label='rule2',
+        )
+        Rule.objects.create(
+            project=self.other_project,
+            label='rule3',
+        )
+        # there is a default rule added to project
+        self.rules = Rule.objects.filter(project_id=self.other_project.id).order_by('label')
+
+    def assert_other_project_settings_not_changed(self):
+        # other_project should not have changed. This should check that.
+        self.assert_settings_copied(self.other_project)
+
+    def assert_settings_copied(self, project):
+        for key, value in six.iteritems(self.options_dict):
+            assert project.get_option(key) == value
+
+        project_teams = ProjectTeam.objects.filter(
+            project_id=project.id,
+            team__in=self.teams
+        )
+        assert len(project_teams) == len(self.teams)
+
+        project_env = EnvironmentProject.objects.filter(
+            project_id=project.id,
+            environment__in=self.environments,
+        )
+        assert len(project_env) == len(self.environments)
+
+        ownership = ProjectOwnership.objects.get(project_id=project.id)
+        assert ownership.raw == self.ownership.raw
+        assert ownership.schema == self.ownership.schema
+
+        rules = Rule.objects.filter(
+            project_id=project.id
+        ).order_by('label')
+        for rule, other_rule in zip(rules, self.rules):
+            assert rule.label == other_rule.label
+
+    def assert_settings_not_copied(self, project, teams=[]):
+        for key in six.iterkeys(self.options_dict):
+            assert project.get_option(key) is None
+
+        project_teams = ProjectTeam.objects.filter(
+            project_id=project.id,
+            team__in=teams,
+        )
+        assert len(project_teams) == len(teams)
+
+        project_envs = EnvironmentProject.objects.filter(
+            project_id=project.id,
+        )
+        assert len(project_envs) == 0
+
+        assert not ProjectOwnership.objects.filter(project_id=project.id).exists()
+
+        # default rule
+        rules = Rule.objects.filter(project_id=project.id)
+        assert len(rules) == 1
+        assert rules[0].label == 'Send a notification for new issues'
+
+    def test_simple(self):
+        project = self.create_project()
+
+        assert project.copy_settings_from(self.other_project.id)
+        self.assert_settings_copied(project)
+        self.assert_other_project_settings_not_changed()
+
+    def test_copy_with_previous_settings(self):
+        project = self.create_project()
+        project.update_option('sentry:resolve_age', 200)
+        ProjectTeam.objects.create(
+            team=self.create_team(),
+            project=project,
+        )
+        self.create_environment(project=project)
+        Rule.objects.filter(project_id=project.id)[0]
+
+        assert project.copy_settings_from(self.other_project.id)
+        self.assert_settings_copied(project)
+        self.assert_other_project_settings_not_changed()
