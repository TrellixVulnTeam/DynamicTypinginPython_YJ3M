commit 3e396338996752f830e81fcb2c10d63c13a081c5
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Wed Jun 22 14:51:47 2016 -0700

    Remove StructLogHandler hack (#3567)

diff --git a/src/sentry/logging/handlers.py b/src/sentry/logging/handlers.py
index aab9c5f433..a726740289 100644
--- a/src/sentry/logging/handlers.py
+++ b/src/sentry/logging/handlers.py
@@ -32,6 +32,8 @@ class JSONRenderer(object):
 class StructLogHandler(logging.StreamHandler):
     def emit(self, record, logger=get_logger()):
         kwargs = {
+            'level': record.levelno,
+            'event': record.msg,
             'name': record.name,
         }
         if record.exc_info:
@@ -48,11 +50,4 @@ class StructLogHandler(logging.StreamHandler):
             else:
                 kwargs['positional_args'] = (record.args,)
 
-        # HACK(JTCunning): Calling structlog.log instead of the corresponding level
-        # methods steps on the toes of django client loggers and their testing components.
-        try:
-            log = getattr(logger, logging.getLevelName(record.levelno).lower())
-        except AttributeError:
-            super(StructLogHandler, self).emit(record)
-        else:
-            log(record.msg, **kwargs)
+        logger.log(**kwargs)
diff --git a/tests/sentry/logging/test_handler.py b/tests/sentry/logging/test_handler.py
index 69afc94be7..9b7961f1a0 100644
--- a/tests/sentry/logging/test_handler.py
+++ b/tests/sentry/logging/test_handler.py
@@ -29,31 +29,15 @@ def make_logrecord(**extra):
     return logging.LogRecord(**kwargs)
 
 
-def test_emit_basic(handler, logger):
-    record = make_logrecord()
+@pytest.mark.parametrize('record,out', (
+    ({}, {}),
+    ({'msg': '%s', 'args': (1,)}, {'event': '%s', 'positional_args': (1,)}),
+    ({'args': ({'a': 1},)}, {'positional_args': ({'a': 1},)}),
+    ({'exc_info': True}, {'exc_info': True}),
+))
+def test_emit(record, out, handler, logger):
+    record = make_logrecord(**record)
     handler.emit(record, logger=logger)
-    logger.info.assert_called_once_with('msg', name='name')
-
-
-def test_emit_with_args(handler, logger):
-    record = make_logrecord(
-        msg='%s',
-        args=(1,),
-    )
-    handler.emit(record, logger=logger)
-    logger.info.assert_called_once_with('%s', name='name', positional_args=(1,))
-
-
-def test_emit_with_dict_arg(handler, logger):
-    record = make_logrecord(
-        msg='%s',
-        args=({'a': 1},),
-    )
-    handler.emit(record, logger=logger)
-    logger.info.assert_called_once_with('%s', name='name', positional_args=({'a': 1},))
-
-
-def test_emit_with_exc_info(handler, logger):
-    record = make_logrecord(exc_info={'a': 1})
-    handler.emit(record, logger=logger)
-    logger.info.assert_called_once_with('msg', name='name', exc_info={'a': 1})
+    expected = dict(level=logging.INFO, event='msg', name='name')
+    expected.update(out)
+    logger.log.assert_called_once_with(**expected)
