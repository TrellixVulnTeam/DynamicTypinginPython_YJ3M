commit 10355bdd1980609de25ff37cce6871b77e5415b7
Author: Dan Fuller <dfuller@sentry.io>
Date:   Wed Apr 10 13:55:12 2019 -0700

    fix(api): Default pinned searches to have a name. Make sure correct value is returned after
    creation.
    
    We need to have a default name for pinned searches, just adding this in. Also making sure that the
    pinned endpoint returns the correct search after pinning, since in some cases we'll be pinning a
    global/org search.

diff --git a/src/sentry/api/endpoints/organization_pinned_searches.py b/src/sentry/api/endpoints/organization_pinned_searches.py
index ae4b3654b7..122edf959c 100644
--- a/src/sentry/api/endpoints/organization_pinned_searches.py
+++ b/src/sentry/api/endpoints/organization_pinned_searches.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from rest_framework import serializers
 from rest_framework.response import Response
+from django.db.models import Q
 from django.utils import six
 
 from sentry.api.bases.organization import (
@@ -13,6 +14,9 @@ from sentry.models import SavedSearch
 from sentry.models.search_common import SearchType
 
 
+PINNED_SEARCH_NAME = 'My Pinned Search'
+
+
 class OrganizationSearchSerializer(serializers.Serializer):
     type = serializers.IntegerField(required=True)
     query = serializers.CharField(required=True)
@@ -35,6 +39,7 @@ class OrganizationPinnedSearchEndpoint(OrganizationEndpoint):
             result = serializer.object
             SavedSearch.objects.create_or_update(
                 organization=organization,
+                name=PINNED_SEARCH_NAME,
                 owner=request.user,
                 type=result['type'],
                 values={'query': result['query']},
@@ -44,6 +49,20 @@ class OrganizationPinnedSearchEndpoint(OrganizationEndpoint):
                 owner=request.user,
                 type=result['type'],
             )
+            try:
+                # If we pinned an existing search, return the details about that
+                # search.
+                existing_search = SavedSearch.objects.filter(
+                    Q(organization=organization, owner__isnull=True) | Q(is_global=True),
+                    type=result['type'],
+                    query=result['query'],
+                )[:1].get()
+            except SavedSearch.DoesNotExist:
+                pass
+            else:
+                pinned_search = existing_search
+                existing_search.is_pinned = True
+
             return Response(serialize(pinned_search, request.user), status=201)
         return Response(serializer.errors, status=400)
 
diff --git a/tests/sentry/api/endpoints/test_organization_pinned_searches.py b/tests/sentry/api/endpoints/test_organization_pinned_searches.py
index 0f084ad6a9..b0e7f02a13 100644
--- a/tests/sentry/api/endpoints/test_organization_pinned_searches.py
+++ b/tests/sentry/api/endpoints/test_organization_pinned_searches.py
@@ -1,7 +1,10 @@
 from __future__ import absolute_import
 
+import six
+from django.utils import timezone
 from exam import fixture
 
+from sentry.api.endpoints.organization_pinned_searches import PINNED_SEARCH_NAME
 from sentry.models import SavedSearch
 from sentry.models.search_common import SearchType
 from sentry.testutils import APITestCase
@@ -30,6 +33,7 @@ class CreateOrganizationPinnedSearchTest(APITestCase):
         self.get_valid_response(type=search_type, query=query, status_code=201)
         assert SavedSearch.objects.filter(
             organization=self.organization,
+            name=PINNED_SEARCH_NAME,
             owner=self.member,
             type=search_type,
             query=query,
@@ -39,6 +43,7 @@ class CreateOrganizationPinnedSearchTest(APITestCase):
         self.get_valid_response(type=search_type, query=query, status_code=201)
         assert SavedSearch.objects.filter(
             organization=self.organization,
+            name=PINNED_SEARCH_NAME,
             owner=self.member,
             type=search_type,
             query=query,
@@ -47,12 +52,14 @@ class CreateOrganizationPinnedSearchTest(APITestCase):
         self.get_valid_response(type=SearchType.EVENT.value, query=query, status_code=201)
         assert SavedSearch.objects.filter(
             organization=self.organization,
+            name=PINNED_SEARCH_NAME,
             owner=self.member,
             type=search_type,
             query=query,
         ).exists()
         assert SavedSearch.objects.filter(
             organization=self.organization,
+            name=PINNED_SEARCH_NAME,
             owner=self.member,
             type=SearchType.EVENT.value,
             query=query,
@@ -62,17 +69,51 @@ class CreateOrganizationPinnedSearchTest(APITestCase):
         self.get_valid_response(type=search_type, query=query, status_code=201)
         assert SavedSearch.objects.filter(
             organization=self.organization,
+            name=PINNED_SEARCH_NAME,
             owner=self.member,
             type=search_type,
             query=query,
         ).exists()
         assert SavedSearch.objects.filter(
             organization=self.organization,
+            name=PINNED_SEARCH_NAME,
             owner=self.user,
             type=search_type,
             query=query,
         ).exists()
 
+    def test_pin_org_search(self):
+        org_search = SavedSearch.objects.create(
+            organization=self.organization,
+            name='foo',
+            query='some test',
+            date_added=timezone.now(),
+        )
+        self.login_as(self.user)
+        resp = self.get_valid_response(
+            type=org_search.type,
+            query=org_search.query,
+            status_code=201,
+        )
+        assert resp.data['isPinned']
+        assert resp.data['id'] == six.text_type(org_search.id)
+
+    def test_pin_global_search(self):
+        global_search = SavedSearch.objects.create(
+            name='Global Query',
+            query='global query',
+            is_global=True,
+            date_added=timezone.now(),
+        )
+        self.login_as(self.user)
+        resp = self.get_valid_response(
+            type=global_search.type,
+            query=global_search.query,
+            status_code=201,
+        )
+        assert resp.data['isPinned']
+        assert resp.data['id'] == six.text_type(global_search.id)
+
     def test_invalid_type(self):
         self.login_as(self.member)
         resp = self.get_response(type=55, query='test', status_code=201)
