commit 711cc8fbbd10e685380aaabc91cbe55729f5395f
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 13 11:26:48 2018 -0800

    feat(compliance): Track terms accepted on organization creation

diff --git a/src/sentry/api/endpoints/organization_index.py b/src/sentry/api/endpoints/organization_index.py
index fe1e629127..0893048f38 100644
--- a/src/sentry/api/endpoints/organization_index.py
+++ b/src/sentry/api/endpoints/organization_index.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import six
 
+from django.conf import settings
 from django.db import IntegrityError, transaction
 from django.db.models import Count, Q, Sum
 from rest_framework import serializers, status
@@ -20,6 +21,7 @@ from sentry.models import (
     OrganizationStatus, ProjectPlatform
 )
 from sentry.search.utils import tokenize_query
+from sentry.signals import terms_accepted
 from sentry.utils.apidocs import scenario, attach_scenarios
 
 
@@ -32,6 +34,18 @@ class OrganizationSerializer(serializers.Serializer):
     name = serializers.CharField(max_length=64, required=True)
     slug = serializers.RegexField(r'^[a-z0-9_\-]+$', max_length=50, required=False)
     defaultTeam = serializers.BooleanField(required=False)
+    agreeTerms = serializers.BooleanField(required=True)
+
+    def __init__(self, *args, **kwargs):
+        super(OrganizationSerializer, self).__init__(*args, **kwargs)
+        if not (settings.TERMS_URL and settings.PRIVACY_URL):
+            del self.fields['agreeTerms']
+
+    def validate_agreeTerms(self, attrs, source):
+        value = attrs[source]
+        if not value:
+            raise serializers.ValidationError('This attribute is required.')
+        return attrs
 
 
 class OrganizationIndexEndpoint(Endpoint):
@@ -168,6 +182,8 @@ class OrganizationIndexEndpoint(Endpoint):
         :param string slug: the unique URL slug for this organization.  If
                             this is not provided a slug is automatically
                             generated based on the name.
+        :param bool agreeTerms: a boolean signaling you agree to the applicable
+                                terms of service and privacy policy.
         :auth: required, user-context-needed
         """
         if not request.user.is_authenticated():
@@ -204,6 +220,43 @@ class OrganizationIndexEndpoint(Endpoint):
                         name=result['name'],
                         slug=result.get('slug'),
                     )
+
+                    om = OrganizationMember.objects.create(
+                        organization=org,
+                        user=request.user,
+                        role=roles.get_top_dog().id,
+                    )
+
+                    if result.get('defaultTeam'):
+                        team = org.team_set.create(
+                            name=org.name,
+                        )
+
+                        OrganizationMemberTeam.objects.create(
+                            team=team, organizationmember=om, is_active=True
+                        )
+
+                    self.create_audit_entry(
+                        request=request,
+                        organization=org,
+                        target_object=org.id,
+                        event=AuditLogEntryEvent.ORG_ADD,
+                        data=org.get_audit_log_data(),
+                    )
+
+                    analytics.record(
+                        'organization.created',
+                        org,
+                        actor_id=request.user.id if request.user.is_authenticated() else None
+                    )
+
+                    if result.get('agreeTerms'):
+                        terms_accepted.send(
+                            user=request.user,
+                            organization=org,
+                            sender=type(self),
+                        )
+
             except IntegrityError:
                 return Response(
                     {
@@ -212,34 +265,5 @@ class OrganizationIndexEndpoint(Endpoint):
                     status=409,
                 )
 
-            om = OrganizationMember.objects.create(
-                organization=org,
-                user=request.user,
-                role=roles.get_top_dog().id,
-            )
-
-            if result.get('defaultTeam'):
-                team = org.team_set.create(
-                    name=org.name,
-                )
-
-                OrganizationMemberTeam.objects.create(
-                    team=team, organizationmember=om, is_active=True
-                )
-
-            self.create_audit_entry(
-                request=request,
-                organization=org,
-                target_object=org.id,
-                event=AuditLogEntryEvent.ORG_ADD,
-                data=org.get_audit_log_data(),
-            )
-
-            analytics.record(
-                'organization.created',
-                org,
-                actor_id=request.user.id if request.user.is_authenticated() else None
-            )
-
             return Response(serialize(org, request.user), status=201)
         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 1fffcbbce9..046d35129b 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1297,3 +1297,6 @@ DEPRECATED_SDKS = {
 }
 
 SOUTH_TESTS_MIGRATE = os.environ.get('SOUTH_TESTS_MIGRATE', '0') == '1'
+
+TERMS_URL = None
+PRIVACY_URL = None
diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index d556e35975..e4c882408a 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -62,3 +62,5 @@ inbound_filter_toggled = BetterSignal(providing_args=["project"])
 sso_enabled = BetterSignal(providing_args=["organization"])
 data_scrubber_enabled = BetterSignal(providing_args=["organization"])
 alert_rule_created = BetterSignal(providing_args=["project", "rule"])
+
+terms_accepted = BetterSignal(providing_args=["organization", "user"])
diff --git a/src/sentry/static/sentry/app/views/organizationCreate.jsx b/src/sentry/static/sentry/app/views/organizationCreate.jsx
index 939958b871..779203b9c5 100644
--- a/src/sentry/static/sentry/app/views/organizationCreate.jsx
+++ b/src/sentry/static/sentry/app/views/organizationCreate.jsx
@@ -1,9 +1,10 @@
 import React from 'react';
 
 import AsyncView from './asyncView';
+import ConfigStore from '../stores/configStore';
 import NarrowLayout from '../components/narrowLayout';
-import {ApiForm, TextField} from '../components/forms';
-import {t} from '../locale';
+import {ApiForm, BooleanField, TextField} from '../components/forms';
+import {t, tct} from '../locale';
 
 export default class OrganizationCreate extends AsyncView {
   onSubmitSuccess = data => {
@@ -17,6 +18,9 @@ export default class OrganizationCreate extends AsyncView {
   }
 
   renderBody() {
+    let termsUrl = ConfigStore.get('termsUrl');
+    let privacyUrl = ConfigStore.get('privacyUrl');
+
     return (
       <NarrowLayout>
         <h3>{t('Create a New Organization')}</h3>
@@ -41,6 +45,22 @@ export default class OrganizationCreate extends AsyncView {
             placeholder={t('e.g. My Company')}
             required={true}
           />
+
+          {termsUrl &&
+            privacyUrl && (
+              <BooleanField
+                name="agreeTerms"
+                label={tct(
+                  'I agree to the [termsLink:Terms of Service] and the [privacyLink:Privacy Policy]',
+                  {
+                    termsLink: <a href={termsUrl} />,
+                    privacyLink: <a href={privacyUrl} />,
+                  }
+                )}
+                placeholder={t('e.g. My Company')}
+                required={true}
+              />
+            )}
         </ApiForm>
       </NarrowLayout>
     );
diff --git a/src/sentry/templatetags/sentry_react.py b/src/sentry/templatetags/sentry_react.py
index 9c956b56cc..8f72876509 100644
--- a/src/sentry/templatetags/sentry_react.py
+++ b/src/sentry/templatetags/sentry_react.py
@@ -125,6 +125,8 @@ def get_react_config(context):
         'isOnPremise': settings.SENTRY_ONPREMISE,
         'invitesEnabled': settings.SENTRY_ENABLE_INVITES,
         'gravatarBaseUrl': settings.SENTRY_GRAVATAR_BASE_URL,
+        'termsUrl': settings.TERMS_URL,
+        'privacyUrl': settings.PRIVACY_URL,
     }
     if user and user.is_authenticated():
         context.update({
diff --git a/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap
index 7d1f682992..82df239002 100644
--- a/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap
@@ -1,6 +1,80 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
-exports[`OrganizationCreate render() renders correctly 1`] = `
+exports[`OrganizationCreate render() renders with terms 1`] = `
+<SideEffect(DocumentTitle)
+  title="Create Organization - Sentry"
+>
+  <NarryLayout>
+    <h3>
+      Create a New Organization
+    </h3>
+    <p>
+      Organizations represent the top level in your hierarchy. You'll be able to bundle a collection of teams within an organization as well as give organization-wide permissions to users.
+    </p>
+    <ApiForm
+      apiEndpoint="/organizations/"
+      apiMethod="POST"
+      cancelLabel="Cancel"
+      className="form-stacked"
+      errorMessage="Unable to save your changes. Please ensure all fields are valid and try again."
+      footerClass="form-actions align-right"
+      hideErrors={false}
+      initialData={
+        Object {
+          "defaultTeam": true,
+        }
+      }
+      onSubmitSuccess={[Function]}
+      requireChanges={true}
+      resetOnError={false}
+      submitDisabled={false}
+      submitLabel="Create Organization"
+    >
+      <TextField
+        disabled={false}
+        hideErrorMessage={false}
+        label="Organization Name"
+        name="name"
+        placeholder="e.g. My Company"
+        required={true}
+      />
+      <BooleanField
+        disabled={false}
+        hideErrorMessage={false}
+        label={
+          <span>
+            <span>
+              I agree to the 
+            </span>
+            <a
+              href="https://example.com/terms"
+            >
+              <span>
+                Terms of Service
+              </span>
+            </a>
+            <span>
+               and the 
+            </span>
+            <a
+              href="https://example.com/privacy"
+            >
+              <span>
+                Privacy Policy
+              </span>
+            </a>
+          </span>
+        }
+        name="agreeTerms"
+        placeholder="e.g. My Company"
+        required={true}
+      />
+    </ApiForm>
+  </NarryLayout>
+</SideEffect(DocumentTitle)>
+`;
+
+exports[`OrganizationCreate render() renders without terms 1`] = `
 <SideEffect(DocumentTitle)
   title="Create Organization - Sentry"
 >
diff --git a/tests/js/spec/views/organizationCreate.spec.jsx b/tests/js/spec/views/organizationCreate.spec.jsx
index 2517f9a056..131e6d5bfc 100644
--- a/tests/js/spec/views/organizationCreate.spec.jsx
+++ b/tests/js/spec/views/organizationCreate.spec.jsx
@@ -1,11 +1,35 @@
 import React from 'react';
 import {shallow} from 'enzyme';
 
+import ConfigStore from 'app/stores/configStore';
 import OrganizationCreate from 'app/views/organizationCreate';
 
 describe('OrganizationCreate', function() {
+  let privacyUrl, termsUrl;
+
+  beforeEach(() => {
+    termsUrl = ConfigStore.get('termsUrl', null);
+    privacyUrl = ConfigStore.get('privacyUrl', null);
+  });
+
+  afterEach(() => {
+    ConfigStore.set('termsUrl', termsUrl);
+    ConfigStore.set('privacyUrl', privacyUrl);
+  });
+
   describe('render()', function() {
-    it('renders correctly', function() {
+    it('renders without terms', function() {
+      ConfigStore.set('termsUrl', null);
+      ConfigStore.set('privacyUrl', null);
+      let wrapper = shallow(<OrganizationCreate />, {
+        context: {router: TestStubs.router()},
+      });
+      expect(wrapper).toMatchSnapshot();
+    });
+
+    it('renders with terms', function() {
+      ConfigStore.set('termsUrl', 'https://example.com/terms');
+      ConfigStore.set('privacyUrl', 'https://example.com/privacy');
       let wrapper = shallow(<OrganizationCreate />, {
         context: {router: TestStubs.router()},
       });
diff --git a/tests/sentry/api/endpoints/test_organization_index.py b/tests/sentry/api/endpoints/test_organization_index.py
index 26892105f5..faaffcccf7 100644
--- a/tests/sentry/api/endpoints/test_organization_index.py
+++ b/tests/sentry/api/endpoints/test_organization_index.py
@@ -111,6 +111,42 @@ class OrganizationsCreateTest(APITestCase):
         org = Organization.objects.get(id=resp.data['id'])
         assert org.slug == 'hello-world'
 
+    def test_required_terms_with_terms_url(self):
+        self.login_as(user=self.user)
+
+        with self.settings(PRIVACY_URL=None, TERMS_URL='https://example.com/terms'):
+            resp = self.client.post(
+                self.path, data={
+                    'name': 'hello world',
+                }
+            )
+            assert resp.status_code == 201, resp.content
+
+        with self.settings(TERMS_URL=None, PRIVACY_URL='https://example.com/privacy'):
+            resp = self.client.post(
+                self.path, data={
+                    'name': 'hello world',
+                }
+            )
+            assert resp.status_code == 201, resp.content
+
+        with self.settings(TERMS_URL='https://example.com/terms', PRIVACY_URL='https://example.com/privacy'):
+            resp = self.client.post(
+                self.path, data={
+                    'name': 'hello world',
+                    'agreeTerms': False,
+                }
+            )
+            assert resp.status_code == 400, resp.content
+
+            resp = self.client.post(
+                self.path, data={
+                    'name': 'hello world',
+                    'agreeTerms': True,
+                }
+            )
+            assert resp.status_code == 201, resp.content
+
 
 class OrganizationIndex2faTest(TwoFactorAPITestCase):
     def setUp(self):
