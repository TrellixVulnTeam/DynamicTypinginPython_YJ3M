commit d8070cd1d83b1a2cca5f38354c7997ae9e06172d
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri May 11 13:10:28 2018 -0700

    fix(dashboard): Fix bookmarking from dashboard (#8417)
    
    Fixes a project card's bookmark not updating and change
    ProjectsStatsStore to optimistically update.
    
    Note card still has a delay when moving to "Favorites" section because
    ProjectsStore handles that change.

diff --git a/src/sentry/static/sentry/app/actionCreators/projects.jsx b/src/sentry/static/sentry/app/actionCreators/projects.jsx
index 253072066f..d5baee8c13 100644
--- a/src/sentry/static/sentry/app/actionCreators/projects.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/projects.jsx
@@ -24,7 +24,7 @@ export function update(api, params) {
         return data;
       },
       err => {
-        ProjectActions.updateError(err);
+        ProjectActions.updateError(err, params.projectId);
         throw err;
       }
     );
@@ -50,7 +50,7 @@ export function loadStats(api, params) {
 let _projectStatsToFetch = new Set();
 
 const _debouncedLoadStats = debounce((api, projectSet, params) => {
-  let existingProjectStats = Object.keys(ProjectsStatsStore.itemsById);
+  let existingProjectStats = Object.values(ProjectsStatsStore.getAll()).map(({id}) => id);
   let projects = Array.from(projectSet).filter(
     project => !existingProjectStats.includes(project)
   );
diff --git a/src/sentry/static/sentry/app/stores/projectsStatsStore.jsx b/src/sentry/static/sentry/app/stores/projectsStatsStore.jsx
index 1cfaeeea36..cba4919214 100644
--- a/src/sentry/static/sentry/app/stores/projectsStatsStore.jsx
+++ b/src/sentry/static/sentry/app/stores/projectsStatsStore.jsx
@@ -11,21 +11,77 @@ const ProjectsStatsStore = Reflux.createStore({
   init() {
     this.reset();
     this.listenTo(ProjectActions.loadStatsForProjectSuccess, this.onStatsLoadSuccess);
+    this.listenTo(ProjectActions.update, this.onUpdate);
+    this.listenTo(ProjectActions.updateError, this.onUpdateError);
   },
 
   getInitialState() {
-    return this.itemsById;
+    return this.itemsBySlug;
   },
 
   reset() {
-    this.itemsById = {};
+    this.itemsBySlug = {};
+    this.updatingItems = new Map();
   },
 
   onStatsLoadSuccess(projects) {
     projects.forEach(project => {
-      this.itemsById[project.id] = project;
+      this.itemsBySlug[project.slug] = project;
     });
-    this.trigger(this.itemsById);
+    this.trigger(this.itemsBySlug);
+  },
+
+  /**
+   * Optimistic updates
+   * @param {String} projectSlug  Project slug
+   * @param {Object} data Project data
+   */
+  onUpdate(projectSlug, data) {
+    let project = this.getBySlug(projectSlug);
+    this.updatingItems.set(projectSlug, project);
+    if (!project) return;
+
+    let newProject = {
+      ...project,
+      ...data,
+    };
+
+    this.itemsBySlug = {
+      ...this.itemsBySlug,
+      [project.slug]: newProject,
+    };
+    this.trigger(this.itemsBySlug);
+  },
+
+  onUpdateSuccess(data) {
+    // Remove project from updating map
+    this.updatingItems.delete(data.slug);
+  },
+
+  /**
+   * Revert project data when there was an error updating project details
+   * @param {Object} err Error object
+   * @param {Object} data Previous project data
+   */
+  onUpdateError(err, projectSlug) {
+    let project = this.updatingItems.get(projectSlug);
+    if (!project) return;
+
+    this.updatingItems.delete(projectSlug);
+    // Restore old project
+    this.itemsBySlug = {
+      ...this.itemsBySlug,
+      [project.slug]: {...project},
+    };
+    this.trigger(this.itemsBySlug);
+  },
+
+  getAll() {
+    return this.itemsBySlug;
+  },
+
+  getBySlug(slug) {
+    return this.itemsBySlug[slug];
   },
 });
 
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/projectCard.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/projectCard.jsx
index f7a7319f61..3b9f17b8d2 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/projectCard.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/projectCard.jsx
@@ -6,6 +6,7 @@ import styled from 'react-emotion';
 import {withRouter} from 'react-router';
 import {Flex, Box} from 'grid-emotion';
 
+import {addErrorMessage} from 'app/actionCreators/indicator';
 import SentryTypes from 'app/proptypes';
 import {Client} from 'app/api';
 import Link from 'app/components/link';
@@ -46,6 +47,8 @@ class ProjectCard extends React.Component {
       data: {
         isBookmarked: !project.isBookmarked,
       },
+    }).catch(() => {
+      addErrorMessage(t('Unable to toggle bookmark for %s', project.slug));
     });
   };
 
@@ -99,18 +102,18 @@ const ProjectCardContainer = createReactClass({
     const {project} = this.props;
     const initialState = ProjectsStatsStore.getInitialState() || {};
     return {
-      projectDetails: initialState[project.id] || null,
+      projectDetails: initialState[project.slug] || null,
     };
   },
-  onProjectStoreUpdate(itemsById) {
+  onProjectStoreUpdate(itemsBySlug) {
     const {project} = this.props;
 
     // Don't update state if we already have stats
-    if (!!this.state.projectDetails) return;
-    if (!itemsById[project.id]) return;
+    if (!itemsBySlug[project.slug]) return;
+    if (itemsBySlug[project.slug] === this.state.projectDetails) return;
 
     this.setState({
-      projectDetails: itemsById[project.id],
+      projectDetails: itemsBySlug[project.slug],
     });
   },
   render() {
diff --git a/tests/js/spec/views/organizationDashboard/index.spec.jsx b/tests/js/spec/views/organizationDashboard/index.spec.jsx
index 6dd6c5cea1..ccb26ad5d2 100644
--- a/tests/js/spec/views/organizationDashboard/index.spec.jsx
+++ b/tests/js/spec/views/organizationDashboard/index.spec.jsx
@@ -306,7 +306,7 @@ describe('OrganizationDashboard', function() {
 
       // Resets store when it unmounts
       wrapper.unmount();
-      expect(ProjectsStatsStore.itemsById).toEqual({});
+      expect(ProjectsStatsStore.getAll()).toEqual({});
     });
   });
 });
