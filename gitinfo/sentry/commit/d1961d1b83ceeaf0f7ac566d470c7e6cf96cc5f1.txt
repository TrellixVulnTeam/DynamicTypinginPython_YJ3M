commit d1961d1b83ceeaf0f7ac566d470c7e6cf96cc5f1
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jul 3 15:05:54 2013 +0200

    Add nginx configuration examples to dedicated page

diff --git a/docs/quickstart/index.rst b/docs/quickstart/index.rst
index cdb6efe0f3..c5b692bd7c 100644
--- a/docs/quickstart/index.rst
+++ b/docs/quickstart/index.rst
@@ -244,6 +244,8 @@ You'll use the builtin HttpProxyModule within Nginx to handle proxying::
       proxy_set_header   X-Forwarded-Proto $scheme;
     }
 
+See :doc:`nginx` for more details on using Nginx.
+
 Enabling SSL
 ~~~~~~~~~~~~~
 
@@ -255,41 +257,6 @@ well as within the Sentry configuration:
 
     SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
 
-Running Sentry as WSGI application
-----------------------------------
-
-Sentry can use any WSGI server using ``sentry.wsgi`` module and setting ``SENTRY_CONF`` environment variable. 
-
-To setup Sentry with `uWSGI <http://projects.unbit.it/uwsgi/>`_, use the following uWSGI configuration file::
-
-        [uwsgi]
-        env = SENTRY_CONF=/etc/sentry.conf
-        module = sentry.wsgi
-
-        ; spawn the master and 4 processes
-        http-socket = :9000
-        master = true
-        processes = 4
-
-
-Proxying uWSGI with Nginx
-~~~~~~~~~~~~~~~~~~~~~~~~~
-
-You'll use the uWSGI module within Nginx to handle proxying::
-
-   location / {
-        include uwsgi_params;
-        uwsgi_pass 127.0.0.1:9000;
-
-        uwsgi_connect_timeout 180;
-        uwsgi_send_timeout 300;
-        uwsgi_read_timeout 600;
-
-        uwsgi_param UWSGI_SCHEME $scheme;
-    }
-
-.. todo:: Create Proxying uWSGI with Apache section
-
 Running Sentry as a Service
 ---------------------------
 
diff --git a/docs/quickstart/nginx.rst b/docs/quickstart/nginx.rst
new file mode 100644
index 0000000000..7135f51692
--- /dev/null
+++ b/docs/quickstart/nginx.rst
@@ -0,0 +1,77 @@
+Configuring Sentry with Nginx
+=============================
+
+
+Nginx provides a very powerful platform for running in front of Sentry as it
+gives us features like rate limiting.
+
+Below is a sample configuration for Nginx which includes (reasonable) rate
+limits:
+
+::
+
+    http {
+      # we limit both on IP (single machine) as well as project ID
+      limit_req_zone  $binary_remote_addr  zone=one:10m   rate=3r/s;
+      limit_req_zone  $projectid  zone=two:10m   rate=3r/s;
+
+      # limit_req_status requires nginx 1.3.15 or newer
+      limit_req_status 429;
+
+      server {
+        listen   80;
+
+        proxy_set_header   Host                 $host;
+        proxy_set_header   X-Real-IP            $remote_addr;
+        proxy_set_header   X-Forwarded-For      $proxy_add_x_forwarded_for;
+        proxy_set_header   X-Forwarded-Proto    $http_x_forwarded_proto;
+        proxy_redirect    off;
+
+        location / {
+          proxy_pass        http://localhost:9000;
+        }
+
+        location ~* /api/(?P<projectid>\d+/)?store/ {
+          proxy_pass        http://localhost:9000;
+
+          limit_req   zone=one  burst=3  nodelay;
+          limit_req   zone=two  burst=10  nodelay;
+        }
+
+      }
+    }
+
+
+Proxying uWSGI
+~~~~~~~~~~~~~~
+
+You may optionally want to setup `uWSGI <http://projects.unbit.it/uwsgi/>`_ to
+run Sentry (rather than relying on the built-in gunicorn webserver). This can
+be done with the included nginx support:
+
+::
+
+   location / {
+      include uwsgi_params;
+      uwsgi_pass 127.0.0.1:9000;
+
+      uwsgi_connect_timeout 180;
+      uwsgi_send_timeout 300;
+      uwsgi_read_timeout 600;
+
+      uwsgi_param UWSGI_SCHEME $scheme;
+    }
+
+Within your uWSGI configuration, you'll need to export your configuration path
+as well the ``sentry.wsgi`` module:
+
+::
+
+    [uwsgi]
+    env = SENTRY_CONF=/etc/sentry.conf
+    module = sentry.wsgi
+
+    ; spawn the master and 4 processes
+    http-socket = :9000
+    master = true
+    processes = 4
