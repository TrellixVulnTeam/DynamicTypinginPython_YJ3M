commit e1bf78e5f47960f8e24db2c4b83bc44a42cbff87
Author: Danny Lee <dlee@sentry.io>
Date:   Tue Jan 7 09:44:57 2020 -0800

    feat(discover2): Allow columns in GridEditable to be resized (#16196)
    
    - Allow columns in GridEditable to be resized
    - Add width to DiscoverSavedQuery serializers
    - Set last column of GridEditable to fill the width
    - Generate default widths from column type

diff --git a/src/sentry/api/serializers/models/discoversavedquery.py b/src/sentry/api/serializers/models/discoversavedquery.py
index d50889ad6a..40930cdc70 100644
--- a/src/sentry/api/serializers/models/discoversavedquery.py
+++ b/src/sentry/api/serializers/models/discoversavedquery.py
@@ -15,6 +15,7 @@ class DiscoverSavedQuerySerializer(Serializer):
             "environment",
             "query",
             "fields",
+            "widths",
             "conditions",
             "aggregations",
             "range",
diff --git a/src/sentry/discover/endpoints/serializers.py b/src/sentry/discover/endpoints/serializers.py
index cb5590349a..7af2261c2a 100644
--- a/src/sentry/discover/endpoints/serializers.py
+++ b/src/sentry/discover/endpoints/serializers.py
@@ -161,6 +161,7 @@ class DiscoverSavedQuerySerializer(serializers.Serializer):
     fieldnames = ListField(child=serializers.CharField(), required=False, allow_null=True)
     query = serializers.CharField(required=False, allow_null=True)
     tags = ListField(child=serializers.CharField(), required=False, allow_null=True)
+    widths = ListField(child=serializers.CharField(), required=False, allow_null=True)
     yAxis = serializers.CharField(required=False, allow_null=True)
 
     disallowed_fields = {
@@ -200,6 +201,7 @@ class DiscoverSavedQuerySerializer(serializers.Serializer):
             "orderby",
             "limit",
             "tags",
+            "widths",
             "yAxis",
         ]
 
diff --git a/src/sentry/static/sentry/app/components/gridEditable/index.tsx b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
index 53a50b5346..61884a738b 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/index.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
@@ -29,7 +29,18 @@ import {
   GridBodyCellSpan,
   GridBodyCellLoading,
   GridBodyErrorAlert,
+  GridResizer,
 } from './styles';
+import {
+  COL_WIDTH_UNDEFINED,
+  COL_WIDTH_MIN,
+  COL_WIDTH_DEFAULT,
+  COL_WIDTH_BOOLEAN,
+  COL_WIDTH_DATETIME,
+  COL_WIDTH_NUMBER,
+  COL_WIDTH_STRING,
+  ColResizeMetadata,
+} from './utils';
 
 type GridEditableProps<DataRow, ColumnKey> = {
   onToggleEdit?: (nextValue: boolean) => void;
@@ -60,7 +71,7 @@ type GridEditableProps<DataRow, ColumnKey> = {
    * data within it. Note that this is optional.
    */
   grid: {
-    renderHeaderCell?: (
+    renderHeadCell?: (
       column: GridColumnOrder<ColumnKey>,
       columnIndex: number
     ) => React.ReactNode;
@@ -68,6 +79,10 @@ type GridEditableProps<DataRow, ColumnKey> = {
       column: GridColumnOrder<ColumnKey>,
       dataRow: DataRow
     ) => React.ReactNode;
+    onResizeColumn?: (
+      columnIndex: number,
+      nextColumn: GridColumnOrder<ColumnKey>
+    ) => void;
   };
 
   /**
@@ -88,7 +103,8 @@ type GridEditableProps<DataRow, ColumnKey> = {
 
   /**
    * As there is no internal state being maintained, the parent component will
-   * have to provide functions to move/delete the columns
+   * have to provide functions to update the state of the columns, especially
+   * after moving/resizing
    */
   actions: {
     moveColumnCommit: (indexFrom: number, indexTo: number) => void;
@@ -113,11 +129,6 @@ class GridEditable<
     isEditable: false,
   };
 
-  state = {
-    numColumn: 0,
-    isEditing: false,
-  };
-
   // Static methods do not allow the use of generics bounded to the parent class
   // For more info: https://github.com/microsoft/TypeScript/issues/14600
   static getDerivedStateFromProps(
@@ -130,6 +141,92 @@ class GridEditable<
     };
   }
 
+  state = {
+    numColumn: 0,
+    isEditing: false,
+  };
+
+  componentDidUpdate() {
+    // Redraw columns whenever new props are recieved
+    this.setGridTemplateColumns(this.props.columnOrder);
+  }
+
+  componentWillUnmount() {
+    this.clearWindowLifecycleEvents();
+  }
+
+  private refGrid = React.createRef<HTMLTableElement>();
+  private resizeMetadata?: ColResizeMetadata;
+  private resizeWindowLifecycleEvents: {
+    [eventName: string]: any[];
+  } = {
+    mousemove: [],
+    mouseup: [],
+  };
+
+  clearWindowLifecycleEvents() {
+    Object.keys(this.resizeWindowLifecycleEvents).forEach(e => {
+      this.resizeWindowLifecycleEvents[e].forEach(c => window.removeEventListener(e, c));
+      this.resizeWindowLifecycleEvents[e] = [];
+    });
+  }
+
+  onResizeMouseDown = (e: React.MouseEvent, i: number = -1) => {
+    e.preventDefault();
+
+    // Block right-click and other funky stuff
+    if (i === -1 || e.type === 'contextmenu') {
+      return;
+    }
+
+    // <GridResizer> is nested 2 levels down from <GridHeadCell>
+    const cell = e.currentTarget!.parentElement!.parentElement;
+    if (!cell) {
+      return;
+    }
+
+    // HACK: Do not put into state to prevent re-rendering of component
+    this.resizeMetadata = {
+      columnIndex: i,
+      columnWidth: cell.offsetWidth,
+      cursorX: e.clientX,
+    };
+
+    window.addEventListener('mousemove', this.onResizeMouseMove);
+    this.resizeWindowLifecycleEvents.mousemove.push(this.onResizeMouseMove);
+
+    window.addEventListener('mouseup', this.onResizeMouseUp);
+    this.resizeWindowLifecycleEvents.mouseup.push(this.onResizeMouseUp);
+  };
+
+  onResizeMouseUp = (e: MouseEvent) => {
+    const metadata = this.resizeMetadata;
+    const onResizeColumn = this.props.grid.onResizeColumn;
+    if (!metadata || !onResizeColumn) {
+      return;
+    }
+
+    const {columnOrder} = this.props;
+    const widthChange = e.clientX - metadata.cursorX;
+
+    onResizeColumn(metadata.columnIndex, {
+      ...columnOrder[metadata.columnIndex],
+      width: metadata.columnWidth + widthChange,
+    });
+
+    this.resizeMetadata = undefined;
+    this.clearWindowLifecycleEvents();
+  };
+
+  onResizeMouseMove = (e: MouseEvent) => {
+    const {resizeMetadata} = this;
+    if (!resizeMetadata) {
+      return;
+    }
+
+    window.requestAnimationFrame(() => this.resizeGridColumn(e, resizeMetadata));
+  };
+
   toggleEdit = () => {
     const nextValue = !this.state.isEditing;
 
@@ -168,6 +265,64 @@ class GridEditable<
     ));
   };
 
+  resizeGridColumn = (e: MouseEvent, metadata: ColResizeMetadata) => {
+    const grid = this.refGrid.current;
+    if (!grid) {
+      return;
+    }
+
+    const widthChange = e.clientX - metadata.cursorX;
+
+    const nextColumnOrder = [...this.props.columnOrder];
+    nextColumnOrder[metadata.columnIndex] = {
+      ...nextColumnOrder[metadata.columnIndex],
+      width: metadata.columnWidth + widthChange,
+    };
+
+    this.setGridTemplateColumns(
+      this.props.columnOrder,
+      metadata.columnIndex,
+      metadata.columnWidth + e.clientX - metadata.cursorX
+    );
+  };
+
+  /**
+   * Set the CSS for Grid Column
+   */
+  setGridTemplateColumns(
+    columnOrder: GridColumnOrder[],
+    columnIndex: number = -1,
+    columnWidth: number = 0
+  ) {
+    const grid = this.refGrid.current;
+    if (!grid) {
+      return;
+    }
+
+    let sumWidth = 0;
+    const columnWidths = columnOrder.map((c, i) => {
+      let width =
+        i === columnIndex // Case 1: Resize, then draw a specific column
+          ? columnWidth
+          : !c.width || isNaN(c.width) // Case 2: Draw a column with no width
+          ? COL_WIDTH_DEFAULT
+          : c.width; // Case 3: Draw a column with width
+
+      width = Math.max(COL_WIDTH_MIN, width);
+      sumWidth += width;
+
+      return `${width}px`;
+    });
+
+    // If columns are smaller than grid, let the last column fill the remaining
+    // blank space on the right of the grid
+    if (sumWidth < grid.offsetWidth) {
+      columnWidths[columnWidths.length - 1] = '1fr';
+    }
+
+    grid.style.gridTemplateColumns = columnWidths.join(' ');
+  }
+
   renderHeaderButton = () => {
     if (!this.props.isEditable) {
       return null;
@@ -207,23 +362,26 @@ class GridEditable<
   };
 
   renderGridHead = () => {
-    const {columnOrder, actions, grid} = this.props;
+    const {error, isLoading, columnOrder, actions, grid, data} = this.props;
     const {isEditing} = this.state;
 
     // Ensure that the last column cannot be removed
-    const enableEdit = isEditing && columnOrder.length > 1;
+    const numColumn = columnOrder.length;
+    const enableEdit = isEditing && numColumn > 1;
 
     return (
       <GridRow>
-        {columnOrder.map((column, columnIndex) => (
+        {/* Note that this.onResizeMouseDown assumes GridResizer is nested
+            2 levels under GridHeadCell */
+        columnOrder.map((column, i) => (
           <GridHeadCell
             openModalAddColumnAt={this.openModalAddColumnAt}
-            isLast={columnOrder.length - 1 === columnIndex}
-            key={`${columnIndex}.${column.key}`}
+            isLast={columnOrder.length - 1 === i}
+            key={`${i}.${column.key}`}
             isColumnDragging={this.props.isColumnDragging}
             isPrimary={column.isPrimary}
             isEditing={enableEdit}
-            indexColumnOrder={columnIndex}
+            indexColumnOrder={i}
             column={column}
             gridHeadCellButtonProps={this.props.gridHeadCellButtonProps || {}}
             actions={{
@@ -233,9 +391,13 @@ class GridEditable<
               toggleModalEditColumn: this.toggleModalEditColumn,
             }}
           >
-            {grid.renderHeaderCell
-              ? grid.renderHeaderCell(column, columnIndex)
-              : column.name}
+            {grid.renderHeadCell ? grid.renderHeadCell(column, i) : column.name}
+            <GridResizer
+              isLast={i === numColumn - 1}
+              dataRows={!error && !isLoading && data ? data.length : 0}
+              onMouseDown={e => this.onResizeMouseDown(e, i)}
+              onContextMenu={this.onResizeMouseDown}
+            />
           </GridHeadCell>
         ))}
       </GridRow>
@@ -261,11 +423,11 @@ class GridEditable<
   };
 
   renderGridBodyRow = (dataRow: DataRow, row: number) => {
-    const {grid} = this.props;
+    const {columnOrder, grid} = this.props;
 
     return (
       <GridRow key={row}>
-        {this.props.columnOrder.map((col, i) => (
+        {columnOrder.map((col, i) => (
           <GridBodyCell key={`${col.key}${i}`}>
             {grid.renderBodyCell ? grid.renderBodyCell(col, dataRow) : dataRow[col.key]}
           </GridBodyCell>
@@ -334,11 +496,7 @@ class GridEditable<
         </Header>
 
         <Body>
-          <Grid
-            isEditable={this.props.isEditable}
-            isEditing={this.state.isEditing}
-            numColumn={this.state.numColumn}
-          >
+          <Grid innerRef={this.refGrid}>
             <GridHead>{this.renderGridHead()}</GridHead>
             <GridBody>{this.renderGridBody()}</GridBody>
           </Grid>
@@ -350,6 +508,13 @@ class GridEditable<
 
 export default GridEditable;
 export {
+  COL_WIDTH_UNDEFINED,
+  COL_WIDTH_MIN,
+  COL_WIDTH_DEFAULT,
+  COL_WIDTH_BOOLEAN,
+  COL_WIDTH_DATETIME,
+  COL_WIDTH_NUMBER,
+  COL_WIDTH_STRING,
   GridColumn,
   GridColumnHeader,
   GridColumnOrder,
diff --git a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
index 25ca4a71fa..36206e06ea 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
@@ -51,14 +51,16 @@ export const HeaderButton = styled('div')`
   }
 `;
 
+const PanelWithProtectedBorder = styled(Panel)`
+  overflow: hidden;
+`;
 export const Body: React.FC = props => (
-  <Panel>
+  <PanelWithProtectedBorder>
     <PanelBody>{props.children}</PanelBody>
-  </Panel>
+  </PanelWithProtectedBorder>
 );
 
 /**
- *
  * Grid is the parent element for the tableResizable component.
  *
  * On newer browsers, it will use CSS Grids to implement its layout.
@@ -70,18 +72,20 @@ export const Body: React.FC = props => (
  *
  * <thead>, <tbody>, <tr> are ignored by CSS Grid.
  * The entire layout is determined by the usage of <th> and <td>.
- *
  */
-export const Grid = styled('table')<GridEditableProps>`
+export const Grid = styled('table')`
   position: relative;
   display: grid;
-  grid-template-columns: 2.5fr repeat(${p => (p.numColumn ? p.numColumn - 1 : 0)}, 1fr);
+
+  /* Overwritten by GridEditable.setGridTemplateColumns */
+  grid-template-columns: repeat(auto-fill, 1fr);
 
   box-sizing: border-box;
   border-collapse: collapse;
   margin: 0;
 
   /* background-color: ${p => p.theme.offWhite}; */
+  overflow-x: scroll;
 `;
 export const GridRow = styled('tr')`
   display: contents;
@@ -95,11 +99,9 @@ export const GridRow = styled('tr')`
 `;
 
 /**
- *
  * GridHead is the collection of elements that builds the header section of the
  * Grid. As the entirety of the add/remove/resize actions are performed on the
  * header, most of the elements behave different for each stage.
- *
  */
 export const GridHead = styled('thead')`
   display: contents;
@@ -113,7 +115,6 @@ export const GridHeadCell = styled('th')`
 
   background-color: ${p => p.theme.offWhite};
   border-bottom: 1px solid ${p => p.theme.borderDark};
-  /* border-right: 1px solid ${p => p.theme.borderDark}; */
 
   &:first-child {
     border-top-left-radius: ${p => p.theme.borderRadius};
@@ -193,10 +194,8 @@ export const GridHeadCellButton = styled('div')<GridEditableProps>`
 `;
 
 /**
- *
  * GridHeadCellButtonHover is the collection of interactive elements to add or
  * move the columns. They are expected to be draggable.
- *
  */
 export const GridHeadCellButtonHover = styled('div')<GridEditableProps>`
   position: absolute;
@@ -264,10 +263,8 @@ export const GridHeadCellButtonHoverDraggable = styled(InlineSvg)`
 `;
 
 /**
- *
  * GridBody are the collection of elements that contains and display the data
  * of the Grid. They are rather simple.
- *
  */
 export const GridBody = styled('tbody')`
   display: contents;
@@ -277,14 +274,18 @@ export const GridBody = styled('tbody')`
   }
 `;
 export const GridBodyCell = styled('td')`
+  position: relative;
   /* By default, a grid item cannot be smaller than the size of its content.
      We override this by setting min-width to be 0. */
   min-width: 0;
+  /* Locking in the height makes calculation for resizer to be easier.
+     min-height is used to allow a cell to expand and this is used to display
+     feedback during empty/error state */
+  min-height: ${GRID_BODY_ROW_HEIGHT}px;
   padding: ${space(1)} ${space(2)};
 
   background-color: ${p => p.theme.white};
   border-bottom: 1px solid ${p => p.theme.borderLight};
-  border-right: 1px solid ${p => p.theme.borderDark};
 
   font-size: ${p => p.theme.fontSizeMedium};
 
@@ -302,3 +303,49 @@ export const GridBodyCellLoading = styled('div')`
 export const GridBodyErrorAlert = styled(Alert)`
   margin: 0;
 `;
+
+/**
+ * We have a fat GridResizer and we use the ::after pseudo-element to draw
+ * a thin 1px border.
+ *
+ * The right-most GridResizer has a width of 2px and no right padding to make it
+ * more obvious as it is usually sitting next to the border for <Panel>
+ */
+export const GridResizer = styled('div')<{dataRows: number; isLast?: boolean}>`
+  position: absolute;
+  top: 0px;
+  right: ${p => (p.isLast ? '0px' : '-4px')};
+  width: ${p => (p.isLast ? '6px' : '9px')};
+
+  height: ${p => GRID_HEAD_ROW_HEIGHT + p.dataRows * GRID_BODY_ROW_HEIGHT}px;
+
+  padding-left: 4px;
+  padding-right: ${p => (p.isLast ? '0px' : '4px')};
+
+  cursor: col-resize;
+  z-index: ${Z_INDEX_RESIZER};
+
+  /**
+   * This element allows us to have a fat GridResizer that is easy to hover and
+   * drag, but still draws an appealing thin line for the border
+   */
+  &::after {
+    content: ' ';
+    display: block;
+    width: 100%; /* Equivalent to 1px */
+    height: 100%;
+  }
+
+  &:hover::after {
+    background-color: ${p => p.theme.borderDark};
+  }
+
+  /**
+   * Ensure that this rule is after :hover, otherwise it will flicker when
+   * the GridResizer is dragged
+   */
+  &:active::after,
+  &:focus::after {
+    background-color: ${p => p.theme.purple};
+  }
+`;
diff --git a/src/sentry/static/sentry/app/components/gridEditable/types.tsx b/src/sentry/static/sentry/app/components/gridEditable/types.tsx
index 130e91a21c..e55adc4fdd 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/types.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/types.tsx
@@ -9,6 +9,7 @@ export type ObjectKey = React.ReactText;
 
 export type GridColumn<K = ObjectKey> = {
   key: K;
+  width?: number;
 };
 
 export type GridColumnHeader<K = ObjectKey> = GridColumn<K> & {
diff --git a/src/sentry/static/sentry/app/components/gridEditable/utils.tsx b/src/sentry/static/sentry/app/components/gridEditable/utils.tsx
new file mode 100644
index 0000000000..56ef2caf9e
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/gridEditable/utils.tsx
@@ -0,0 +1,19 @@
+export const COL_WIDTH_UNDEFINED = -1;
+export const COL_WIDTH_MIN = 100;
+
+// Default width if it wasn't specified
+export const COL_WIDTH_DEFAULT = 300;
+
+// Starting defaults if column values are known
+export const COL_WIDTH_BOOLEAN = COL_WIDTH_MIN;
+export const COL_WIDTH_DATETIME = 200;
+export const COL_WIDTH_NUMBER = COL_WIDTH_MIN;
+export const COL_WIDTH_STRING = COL_WIDTH_DEFAULT;
+export const COL_WIDTH_STRING_SHORT = 200;
+
+// Store state at the start of "resize" action
+export type ColResizeMetadata = {
+  columnIndex: number; // Column being resized
+  columnWidth: number; // Column width at start of resizing
+  cursorX: number; // X-coordinate of cursor on window
+};
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index d0ced0ff9d..11f95a72ef 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -674,6 +674,7 @@ export type NewQuery = {
   projects: Readonly<number[]>;
   fields: Readonly<string[]>;
   fieldnames: Readonly<string[]>;
+  widths?: Readonly<string[]>;
   query: string;
   orderby?: string;
   range?: string;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
index 3ca1ad1138..1cb6e32836 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
@@ -92,7 +92,6 @@ export const FIELDS = {
   last_seen: 'never',
   latest_event: 'never',
 
-  // user
   user: 'string',
   'user.id': 'string',
   'user.email': 'string',
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index a84df805fe..89e9472404 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -9,6 +9,7 @@ import moment from 'moment';
 import {DEFAULT_PER_PAGE} from 'app/constants';
 import {SavedQuery, NewQuery} from 'app/types';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
+import {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable';
 
 import {AUTOLINK_FIELDS, SPECIAL_FIELDS, FIELD_FORMATTERS} from './data';
 import {
@@ -51,8 +52,13 @@ const reverseSort = (sort: Sort): Sort => {
 export type Field = {
   field: string;
   title: string;
-  // TODO: implement later
-  // width: number;
+  width?: number;
+};
+export type Column = {
+  aggregation: string;
+  field: string;
+  fieldname: string;
+  width?: number;
 };
 
 const isSortEqualToField = (
@@ -115,25 +121,35 @@ const generateFieldAsString = (props: {aggregation: string; field: string}): str
 
 const decodeFields = (location: Location): Array<Field> => {
   const {query} = location;
-
   if (!query || !query.field) {
     return [];
   }
 
-  const fields: string[] = isString(query.field) ? [query.field] : query.field;
+  // TODO(leedongwei): Probably need to refactor this into utils.tsx
+  const fields: string[] = Array.isArray(query.field)
+    ? query.field
+    : isString(query.field)
+    ? [query.field]
+    : [];
   const fieldnames: string[] = Array.isArray(query.fieldnames)
     ? query.fieldnames
     : isString(query.fieldnames)
     ? [query.fieldnames]
     : [];
+  const widths = Array.isArray(query.widths)
+    ? query.widths
+    : isString(query.widths)
+    ? [query.widths]
+    : [];
 
   const parsed: Field[] = [];
   fields.forEach((field, i) => {
-    let title = field;
-    if (fieldnames[i]) {
-      title = fieldnames[i];
-    }
-    parsed.push({field, title});
+    const title = fieldnames[i] ? fieldnames[i] : field;
+
+    const w = Number(widths[i]);
+    const width = !isNaN(w) ? w : COL_WIDTH_UNDEFINED;
+
+    parsed.push({field, title, width});
   });
 
   return parsed;
@@ -285,14 +301,13 @@ class EventView {
     environment: Readonly<string[]>;
     yAxis: string | undefined;
   }) {
-    const fields = Array.isArray(props.fields) ? props.fields : [];
-    let sorts = Array.isArray(props.sorts) ? props.sorts : [];
+    const fields: Field[] = Array.isArray(props.fields) ? props.fields : [];
+    let sorts: Sort[] = Array.isArray(props.sorts) ? props.sorts : [];
     const tags = Array.isArray(props.tags) ? props.tags : [];
     const project = Array.isArray(props.project) ? props.project : [];
     const environment = Array.isArray(props.environment) ? props.environment : [];
 
     // only include sort keys that are included in the fields
-
     const sortKeys = fields
       .map(field => {
         return getSortKeyFromField(field, undefined);
@@ -348,7 +363,6 @@ class EventView {
     const query = location.query;
 
     // apply global selection header values from location whenever possible
-
     const environment: string[] =
       Array.isArray(newQuery.environment) && newQuery.environment.length > 0
         ? newQuery.environment
@@ -366,7 +380,6 @@ class EventView {
       projects: project,
 
       // datetime selection
-
       start: newQuery.start || decodeScalar(query.start),
       end: newQuery.end || decodeScalar(query.end),
       range: newQuery.range || decodeScalar(query.statsPeriod),
@@ -378,7 +391,10 @@ class EventView {
   static fromSavedQuery(saved: NewQuery | SavedQuery): EventView {
     const fields = saved.fields.map((field, i) => {
       const title = saved.fieldnames && saved.fieldnames[i] ? saved.fieldnames[i] : field;
-      return {field, title};
+      const width =
+        saved.widths && saved.widths[i] ? Number(saved.widths[i]) : COL_WIDTH_UNDEFINED;
+
+      return {field, title, width};
     });
     const yAxis = saved.yAxis;
 
@@ -390,9 +406,9 @@ class EventView {
     });
 
     return new EventView({
-      fields,
       id: saved.id,
       name: saved.name,
+      fields,
       query: queryStringFromSavedQuery(saved),
       project: saved.projects,
       start: decodeScalar(start),
@@ -468,6 +484,7 @@ class EventView {
       name: this.name || '',
       fields: this.getFields(),
       fieldnames: this.getFieldNames(),
+      widths: this.getWidths().map(w => String(w)),
       orderby,
       tags: this.tags,
       query: this.query || '',
@@ -504,6 +521,7 @@ class EventView {
       name: undefined,
       field: undefined,
       fieldnames: undefined,
+      widths: undefined,
       sort: undefined,
       tag: undefined,
       query: undefined,
@@ -514,7 +532,7 @@ class EventView {
       output[field] = undefined;
     }
 
-    return cloneDeep(output as any);
+    return output;
   }
 
   generateQueryStringObject(): Query {
@@ -523,6 +541,7 @@ class EventView {
       name: this.name,
       field: this.getFields(),
       fieldnames: this.getFieldNames(),
+      widths: this.getWidths(),
       sort: encodeSorts(this.sorts),
       tag: this.tags,
       environment: this.environment,
@@ -544,16 +563,16 @@ class EventView {
     return this.fields.length > 0;
   }
 
+  getFields(): string[] {
+    return this.fields.map(field => field.field);
+  }
+
   getFieldNames(): string[] {
-    return this.fields.map(field => {
-      return field.title;
-    });
+    return this.fields.map(field => field.title);
   }
 
-  getFields(): string[] {
-    return this.fields.map(field => {
-      return field.field;
-    });
+  getWidths(): number[] {
+    return this.fields.map(field => (field.width ? field.width : COL_WIDTH_UNDEFINED));
   }
 
   getAggregateFields(): Field[] {
@@ -574,11 +593,7 @@ class EventView {
   }
 
   getColumns(): TableColumn<React.ReactText>[] {
-    return decodeColumnOrder({
-      field: this.getFields(),
-      fieldnames: this.getFieldNames(),
-      fields: this.fields,
-    });
+    return decodeColumnOrder(this.fields);
   }
 
   clone(): EventView {
@@ -602,42 +617,27 @@ class EventView {
     });
   }
 
-  withNewColumn(newColumn: {
-    aggregation: string;
-    field: string;
-    fieldname: string;
-  }): EventView {
+  withNewColumn(newColumn: Column): EventView {
     const field = newColumn.field.trim();
-
     const aggregation = newColumn.aggregation.trim();
-
     const fieldAsString = generateFieldAsString({field, aggregation});
-
     const name = newColumn.fieldname.trim();
     const hasName = name.length > 0;
 
     const newField: Field = {
       field: fieldAsString,
       title: hasName ? name : fieldAsString,
+      width: newColumn.width || COL_WIDTH_UNDEFINED,
     };
 
     const newEventView = this.clone();
-
     newEventView.fields = [...newEventView.fields, newField];
 
     return newEventView;
   }
 
-  withNewColumnAt(
-    newColumn: {
-      aggregation: string;
-      field: string;
-      fieldname: string;
-    },
-    insertIndex: number
-  ): EventView {
+  withNewColumnAt(newColumn: Column, insertIndex: number): EventView {
     const newEventView = this.withNewColumn(newColumn);
-
     const fromIndex = newEventView.fields.length - 1;
 
     return newEventView.withMovedColumn({fromIndex, toIndex: insertIndex});
@@ -645,23 +645,19 @@ class EventView {
 
   withUpdatedColumn(
     columnIndex: number,
-    updatedColumn: {
-      aggregation: string;
-      field: string;
-      fieldname: string;
-    },
+    updatedColumn: Column,
     tableMeta: MetaType | undefined
   ): EventView {
-    const {field, aggregation, fieldname} = updatedColumn;
+    const {aggregation, field, fieldname, width} = updatedColumn;
 
     const columnToBeUpdated = this.fields[columnIndex];
-
     const fieldAsString = generateFieldAsString({field, aggregation});
 
     const updateField = columnToBeUpdated.field !== fieldAsString;
     const updateFieldName = columnToBeUpdated.title !== fieldname;
+    const updateWidth = columnToBeUpdated.width !== width;
 
-    if (!updateField && !updateFieldName) {
+    if (!updateField && !updateFieldName && !updateWidth) {
       return this;
     }
 
@@ -673,6 +669,7 @@ class EventView {
     const updatedField: Field = {
       field: fieldAsString,
       title: fieldname,
+      width: width || COL_WIDTH_UNDEFINED,
     };
 
     const fields = [...newEventView.fields];
@@ -682,7 +679,6 @@ class EventView {
 
     // if the updated column is one of the sorted columns, we may need to remove
     // it from the list of sorts
-
     const needleSortIndex = this.sorts.findIndex(sort => {
       return isSortEqualToField(sort, columnToBeUpdated, tableMeta);
     });
@@ -700,7 +696,6 @@ class EventView {
 
       // do not bother deleting the sort key if there are more than one columns
       // of it in the table.
-
       if (numOfColumns <= 1) {
         if (isFieldSortable(updatedField, tableMeta)) {
           // use the current updated field as the sort key
@@ -756,18 +751,14 @@ class EventView {
     tableMeta = validateTableMeta(tableMeta);
 
     // delete the column
-
     const newEventView = this.clone();
-
     const fields = [...newEventView.fields];
     fields.splice(columnIndex, 1);
     newEventView.fields = fields;
 
     // if the deleted column is one of the sorted columns, we need to remove
     // it from the list of sorts
-
     const columnToBeDeleted = this.fields[columnIndex];
-
     const needleSortIndex = this.sorts.findIndex(sort => {
       return isSortEqualToField(sort, columnToBeDeleted, tableMeta);
     });
@@ -785,7 +776,6 @@ class EventView {
 
       // do not bother deleting the sort key if there are more than one columns
       // of it in the table.
-
       if (numOfColumns <= 1) {
         const sorts = [...newEventView.sorts];
         sorts.splice(needleSortIndex, 1);
@@ -793,7 +783,6 @@ class EventView {
 
         if (newEventView.sorts.length <= 0 && newEventView.fields.length > 0) {
           // establish a default sort by finding the first sortable field
-
           const sortableFieldIndex = newEventView.fields.findIndex(field => {
             return isFieldSortable(field, tableMeta);
           });
@@ -818,7 +807,6 @@ class EventView {
     const newEventView = this.clone();
 
     const fields = [...newEventView.fields];
-
     fields.splice(toIndex, 0, fields.splice(fromIndex, 1)[0]);
 
     newEventView.fields = fields;
@@ -883,11 +871,9 @@ class EventView {
     const query = (location && location.query) || {};
 
     // pick only the query strings that we care about
-
     const picked = pickRelevantLocationQueryStrings(location);
 
     // normalize datetime selection
-
     const normalizedTimeWindowParams = getParams({
       start: this.start || picked.start,
       end: this.end || picked.end,
@@ -902,7 +888,6 @@ class EventView {
     const environment = this.environment as string[];
 
     // generate event query
-
     const eventQuery: EventQuery & LocationQuery = Object.assign(
       omit(picked, DATETIME_QUERY_STRING_KEYS),
       normalizedTimeWindowParams,
@@ -955,7 +940,6 @@ class EventView {
     }
 
     // field is currently not sorted; so, we sort on it
-
     const newEventView = this.clone();
 
     // invariant: this is not falsey, since sortKey exists
@@ -997,7 +981,6 @@ export const isAPIPayloadSimilar = (
 
 export function pickRelevantLocationQueryStrings(location: Location): LocationQuery {
   const query = location.query || {};
-
   const picked = pick<LocationQuery>(query || {}, EXTERNAL_QUERY_STRING_KEYS);
 
   return picked;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/results.tsx b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
index 5e620c3b5d..7337237819 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/results.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
@@ -203,6 +203,12 @@ const Top = styled('div')`
 
 const Main = styled('div')<{eventView: EventView}>`
   grid-column: ${p => (p.eventView.tags.length <= 0 ? '1/3' : '1/2')};
+
+  /* Defining the width prevent child elements from expanding the grid
+     past the width of the screen */
+  width: 100%;
+  max-width: 100%;
+  overflow: hidden;
 `;
 
 const Side = styled('div')<{eventView: EventView}>`
@@ -215,7 +221,8 @@ const ContentBox = styled(PageContent)`
 
   @media (min-width: ${p => p.theme.breakpoints[1]}) {
     display: grid;
-    grid-template-rows: 1fr auto;
+    grid-template-rows: 270px auto; /* HACK(leedongwei): Hard-coded height for
+                                       search bar and graph */
     grid-template-columns: 65% auto;
     grid-column-gap: ${space(3)};
   }
diff --git a/src/sentry/static/sentry/app/views/eventsV2/sortLink.tsx b/src/sentry/static/sentry/app/views/eventsV2/sortLink.tsx
index be234fe8cb..fd63f50eeb 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/sortLink.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/sortLink.tsx
@@ -10,14 +10,14 @@ import Link from 'app/components/links/link';
 import EventView, {Field, Sort, isFieldSortable} from './eventView';
 import {MetaType} from './utils';
 
-type Alignments = 'left' | 'right' | undefined;
+export type Alignments = 'left' | 'right' | undefined;
 
 type Props = {
   align: Alignments;
   field: Field;
   location: Location;
   eventView: EventView;
-  tableDataMeta: MetaType;
+  tableDataMeta?: MetaType; // Will not be defined if data is not loaded
 };
 
 class SortLink extends React.Component<Props> {
@@ -26,17 +26,23 @@ class SortLink extends React.Component<Props> {
     field: PropTypes.object.isRequired,
     location: PropTypes.object.isRequired,
     eventView: PropTypes.object.isRequired,
-    tableDataMeta: PropTypes.object.isRequired,
+    tableDataMeta: PropTypes.object,
   };
 
   isCurrentColumnSorted(): Sort | undefined {
     const {eventView, field, tableDataMeta} = this.props;
+    if (!tableDataMeta) {
+      return undefined;
+    }
 
     return eventView.isFieldSorted(field, tableDataMeta);
   }
 
   getTarget() {
     const {location, field, eventView, tableDataMeta} = this.props;
+    if (!tableDataMeta) {
+      return undefined;
+    }
 
     const nextEventView = eventView.sortOnField(field, tableDataMeta);
     const queryStringObject = nextEventView.generateQueryStringObject();
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
index 3a2c11a22a..db411c13c3 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
@@ -3,7 +3,7 @@ import {Location} from 'history';
 
 import {Organization} from 'app/types';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
-import GridEditable from 'app/components/gridEditable';
+import GridEditable, {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable';
 import {
   tokenizeSearch,
   stringifyQueryObject,
@@ -13,14 +13,14 @@ import {assert} from 'app/types/utils';
 import Link from 'app/components/links/link';
 
 import {
-  getFieldRenderer,
   getAggregateAlias,
+  getFieldRenderer,
   pushEventViewToLocation,
   explodeField,
   MetaType,
 } from '../utils';
 import EventView, {pickRelevantLocationQueryStrings, Field} from '../eventView';
-import SortLink from '../sortLink';
+import SortLink, {Alignments} from '../sortLink';
 import renderTableModalEditColumnFactory from './tableModalEditColumn';
 import {TableColumn, TableData, TableDataRow} from './types';
 import {ColumnValueType} from '../eventQueryParams';
@@ -42,7 +42,6 @@ export type TableViewProps = {
 };
 
 /**
- *
  * The `TableView` is marked with leading _ in its method names. It consumes
  * the EventView object given in its props to generate new EventView objects
  * for actions such as creating new columns, updating columns, sorting columns,
@@ -66,14 +65,14 @@ class TableView extends React.Component<TableViewProps> {
     const {location, eventView, organization} = this.props;
 
     let nextEventView: EventView;
+    const payload = {
+      aggregation: String(nextColumn.aggregation),
+      field: String(nextColumn.field),
+      fieldname: nextColumn.name,
+      width: COL_WIDTH_UNDEFINED,
+    };
 
     if (typeof insertAt === 'number') {
-      const payload = {
-        aggregation: String(nextColumn.aggregation),
-        field: String(nextColumn.field),
-        fieldname: nextColumn.name,
-      };
-
       // create and insert a column at a specific index
       nextEventView = eventView.withNewColumnAt(payload, insertAt);
 
@@ -86,12 +85,6 @@ class TableView extends React.Component<TableViewProps> {
         ...payload,
       });
     } else {
-      const payload = {
-        aggregation: String(nextColumn.aggregation),
-        field: String(nextColumn.field),
-        fieldname: nextColumn.name,
-      };
-
       // create and insert a column at the right end of the table
       nextEventView = eventView.withNewColumn(payload);
 
@@ -120,7 +113,8 @@ class TableView extends React.Component<TableViewProps> {
     const payload = {
       aggregation: String(nextColumn.aggregation),
       field: String(nextColumn.field),
-      fieldname: nextColumn.name,
+      fieldname: String(nextColumn.name),
+      width: nextColumn.width ? Number(nextColumn.width) : COL_WIDTH_UNDEFINED,
     };
 
     const tableMeta = (tableData && tableData.meta) || undefined;
@@ -135,6 +129,7 @@ class TableView extends React.Component<TableViewProps> {
       const aggregationChanged = prevField.aggregation !== nextField.aggregation;
       const fieldChanged = prevField.field !== nextField.field;
       const fieldnameChanged = prevField.fieldname !== nextField.fieldname;
+      const widthChanged = prevField.width !== nextField.width;
 
       if (aggregationChanged) {
         changed.push('aggregate');
@@ -148,7 +143,10 @@ class TableView extends React.Component<TableViewProps> {
         changed.push('fieldname');
       }
 
-      // metrics
+      if (widthChanged) {
+        changed.push('width');
+      }
+
       trackAnalyticsEvent({
         eventKey: 'discover_v2.update_column',
         eventName: 'Discoverv2: A column was updated',
@@ -225,20 +223,18 @@ class TableView extends React.Component<TableViewProps> {
 
   _renderGridHeaderCell = (column: TableColumn<keyof TableDataRow>): React.ReactNode => {
     const {eventView, location, tableData} = this.props;
-
-    if (!tableData || !tableData.meta) {
-      return column.name;
-    }
-
     const field = column.eventViewField;
 
     // establish alignment based on the type
     const alignedTypes: ColumnValueType[] = ['number', 'duration', 'integer'];
-    let align: 'right' | 'left' = alignedTypes.includes(column.type) ? 'right' : 'left';
+    let align: Alignments = alignedTypes.includes(column.type) ? 'right' : 'left';
 
     if (column.type === 'never' || column.type === '*') {
       // fallback to align the column based on the table metadata
-      const maybeType = tableData.meta[getAggregateAlias(field.field)];
+      const maybeType =
+        tableData && tableData.meta
+          ? tableData.meta[getAggregateAlias(field.field)]
+          : undefined;
 
       if (maybeType === 'integer' || maybeType === 'number') {
         align = 'right';
@@ -251,7 +247,9 @@ class TableView extends React.Component<TableViewProps> {
         field={field}
         location={location}
         eventView={eventView}
-        tableDataMeta={tableData.meta}
+        /* TODO(leedongwei): Verbosity is due to error in Prettier, fix after
+           upgrade to v1.19.1 */
+        tableDataMeta={tableData && tableData.meta ? tableData.meta : undefined}
       />
     );
   };
@@ -417,8 +415,9 @@ class TableView extends React.Component<TableViewProps> {
               })}
               columnSortBy={columnSortBy}
               grid={{
-                renderHeaderCell: this._renderGridHeaderCell as any,
+                renderHeadCell: this._renderGridHeaderCell as any,
                 renderBodyCell: this._renderGridBodyCell as any,
+                onResizeColumn: this._updateColumn as any,
               }}
               modalEditColumn={{
                 renderBodyWithForm: renderModalBodyWithForm as any,
@@ -448,7 +447,6 @@ const ExpandAggregateRow = (props: {
   tableMeta: MetaType;
 }) => {
   const {children, column, dataRow, eventView, location, tableMeta} = props;
-
   const {eventViewField} = column;
 
   const exploded = explodeField(eventViewField);
@@ -479,7 +477,6 @@ const ExpandAggregateRow = (props: {
       }
 
       // add this field to the search conditions
-
       const dataKey = getAggregateAlias(field.field);
       const value = dataRow[dataKey];
 
@@ -494,6 +491,7 @@ const ExpandAggregateRow = (props: {
           aggregation: '',
           field: exploded.field,
           fieldname: exploded.field,
+          width: exploded.width,
         };
 
         return currentEventView.withUpdatedColumn(
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index f24da61e4f..f8af9838cc 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -10,6 +10,14 @@ import {Client} from 'app/api';
 import {getTitle} from 'app/utils/events';
 import {URL_PARAM} from 'app/constants/globalSelectionHeader';
 import {generateQueryWithTag} from 'app/utils';
+import {
+  COL_WIDTH_UNDEFINED,
+  COL_WIDTH_DEFAULT,
+  COL_WIDTH_BOOLEAN,
+  COL_WIDTH_DATETIME,
+  COL_WIDTH_NUMBER,
+  COL_WIDTH_STRING,
+} from 'app/components/gridEditable';
 
 import {
   AGGREGATE_ALIASES,
@@ -22,13 +30,7 @@ import {
   TRANSACTION_VIEWS,
 } from './data';
 import EventView, {Field as FieldType} from './eventView';
-import {
-  Aggregation,
-  Field,
-  AGGREGATIONS,
-  FIELDS,
-  ColumnValueType,
-} from './eventQueryParams';
+import {Aggregation, Field, AGGREGATIONS, FIELDS} from './eventQueryParams';
 import {TableColumn} from './table/types';
 
 export type EventQuery = {
@@ -54,10 +56,20 @@ function explodeFieldString(field: string): {aggregation: string; field: string}
 
 export function explodeField(
   field: FieldType
-): {aggregation: string; field: string; fieldname: string} {
+): {
+  aggregation: string;
+  field: string;
+  fieldname: string;
+  width: number;
+} {
   const results = explodeFieldString(field.field);
 
-  return {aggregation: results.aggregation, field: results.field, fieldname: field.title};
+  return {
+    aggregation: results.aggregation,
+    field: results.field,
+    fieldname: field.title,
+    width: field.width || COL_WIDTH_DEFAULT,
+  };
 }
 
 /**
@@ -178,6 +190,26 @@ export type MetaType = {
   [key: string]: FieldTypes;
 };
 
+export function getDefaultWidth(key: Aggregation | Field): number {
+  if (AGGREGATIONS[key]) {
+    return COL_WIDTH_NUMBER;
+  }
+
+  switch (FIELDS[key]) {
+    case 'string':
+      return COL_WIDTH_STRING;
+    case 'boolean':
+      return COL_WIDTH_BOOLEAN;
+    case 'number':
+      return COL_WIDTH_NUMBER;
+    case 'duration':
+    case 'never': // never is usually a timestamp
+      return COL_WIDTH_DATETIME;
+    default:
+      return COL_WIDTH_DEFAULT;
+  }
+}
+
 /**
  * Get the field renderer for the named field and metadata
  *
@@ -236,24 +268,21 @@ const TEMPLATE_TABLE_COLUMN: TableColumn<React.ReactText> = {
   name: '',
   aggregation: '',
   field: '',
-  eventViewField: Object.freeze({field: '', title: ''}),
-  isDragging: false,
+  width: COL_WIDTH_DEFAULT,
 
   type: 'never',
+  isDragging: false,
   isSortable: false,
   isPrimary: false,
-};
-
-export function decodeColumnOrder(props: {
-  fieldnames: string[];
-  field: string[];
-  fields: Readonly<FieldType[]>;
-}): TableColumn<React.ReactText>[] {
-  const {fieldnames, field, fields} = props;
 
-  return field.map((f: string, index: number) => {
-    const col = {aggregationField: f, name: fieldnames[index]};
+  eventViewField: Object.freeze({field: '', title: '', width: COL_WIDTH_DEFAULT}),
+};
 
+export function decodeColumnOrder(
+  fields: Readonly<FieldType[]>
+): TableColumn<React.ReactText>[] {
+  return fields.map((f: FieldType) => {
+    const col = {aggregationField: f.field, name: f.title, width: f.width};
     const column: TableColumn<React.ReactText> = {...TEMPLATE_TABLE_COLUMN};
 
     // "field" will be split into ["field"]
@@ -271,17 +300,17 @@ export function decodeColumnOrder(props: {
 
     column.key = col.aggregationField;
     column.name = col.name;
-    column.type = (FIELDS[column.field] || 'never') as ColumnValueType;
+    column.type = column.aggregation ? 'number' : FIELDS[column.field];
+    column.width =
+      col.width && col.width !== COL_WIDTH_UNDEFINED
+        ? col.width
+        : getDefaultWidth(aggregationField[0]);
 
     column.isSortable = AGGREGATIONS[column.aggregation]
       ? AGGREGATIONS[column.aggregation].isSortable
       : false;
     column.isPrimary = column.field === 'title';
-
-    column.eventViewField = {
-      title: fields[index].title,
-      field: fields[index].field,
-    };
+    column.eventViewField = f;
 
     return column;
   });
diff --git a/tests/js/spec/views/eventsV2/eventView.spec.jsx b/tests/js/spec/views/eventsV2/eventView.spec.jsx
index dceafd2172..f4edc93952 100644
--- a/tests/js/spec/views/eventsV2/eventView.spec.jsx
+++ b/tests/js/spec/views/eventsV2/eventView.spec.jsx
@@ -3,6 +3,7 @@ import EventView, {
   pickRelevantLocationQueryStrings,
 } from 'app/views/eventsV2/eventView';
 import {AUTOLINK_FIELDS} from 'app/views/eventsV2/data';
+import {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable/utils';
 
 const generateFields = fields => {
   return fields.map(field => {
@@ -51,6 +52,7 @@ describe('EventView.fromLocation()', function() {
         name: 'best query',
         field: ['count()', 'id'],
         fieldnames: ['events', 'projects'],
+        widths: ['123', '456'],
         sort: ['title', '-count'],
         tag: ['foo', 'bar'],
         query: 'event.type:transaction',
@@ -68,7 +70,10 @@ describe('EventView.fromLocation()', function() {
     expect(eventView).toMatchObject({
       id: '42',
       name: 'best query',
-      fields: [{field: 'count()', title: 'events'}, {field: 'id', title: 'projects'}],
+      fields: [
+        {field: 'count()', title: 'events', width: 123},
+        {field: 'id', title: 'projects', width: 456},
+      ],
       sorts: generateSorts(['count']),
       tags: ['foo', 'bar'],
       query: 'event.type:transaction',
@@ -88,6 +93,7 @@ describe('EventView.fromLocation()', function() {
         name: 'best query',
         field: ['count()', 'id'],
         fieldnames: ['events', 'projects'],
+        widths: ['123', '456'],
         sort: ['title', '-count'],
         tag: ['foo', 'bar'],
         query: 'event.type:transaction',
@@ -104,7 +110,10 @@ describe('EventView.fromLocation()', function() {
     expect(eventView).toMatchObject({
       id: '42',
       name: 'best query',
-      fields: [{field: 'count()', title: 'events'}, {field: 'id', title: 'projects'}],
+      fields: [
+        {field: 'count()', title: 'events', width: 123},
+        {field: 'id', title: 'projects', width: 456},
+      ],
       sorts: generateSorts(['count']),
       tags: ['foo', 'bar'],
       query: 'event.type:transaction',
@@ -123,6 +132,7 @@ describe('EventView.fromLocation()', function() {
         name: 'best query',
         field: ['count()', 'id'],
         fieldnames: ['events', 'projects'],
+        widths: ['123', '456'],
         sort: ['title', '-count'],
         tag: ['foo', 'bar'],
         query: 'event.type:transaction',
@@ -138,7 +148,10 @@ describe('EventView.fromLocation()', function() {
     expect(eventView).toMatchObject({
       id: '42',
       name: 'best query',
-      fields: [{field: 'count()', title: 'events'}, {field: 'id', title: 'projects'}],
+      fields: [
+        {field: 'count()', title: 'events', width: 123},
+        {field: 'id', title: 'projects', width: 456},
+      ],
       sorts: generateSorts(['count']),
       tags: ['foo', 'bar'],
       query: 'event.type:transaction',
@@ -192,7 +205,10 @@ describe('EventView.fromSavedQuery()', function() {
     expect(eventView).toMatchObject({
       id: saved.id,
       name: saved.name,
-      fields: [{field: 'count()', title: 'count()'}, {field: 'id', title: 'id'}],
+      fields: [
+        {field: 'count()', title: 'count()', width: COL_WIDTH_UNDEFINED},
+        {field: 'id', title: 'id', width: COL_WIDTH_UNDEFINED},
+      ],
       sorts: [{field: 'id', kind: 'desc'}],
       tags: [],
       query: 'event.type:transaction',
@@ -212,7 +228,10 @@ describe('EventView.fromSavedQuery()', function() {
     expect(eventView2).toMatchObject({
       id: saved.id,
       name: saved.name,
-      fields: [{field: 'count()', title: 'count()'}, {field: 'id', title: 'id'}],
+      fields: [
+        {field: 'count()', title: 'count()', width: COL_WIDTH_UNDEFINED},
+        {field: 'id', title: 'id', width: COL_WIDTH_UNDEFINED},
+      ],
       sorts: [{field: 'id', kind: 'desc'}],
       tags: [],
       query: 'event.type:transaction',
@@ -230,6 +249,7 @@ describe('EventView.fromSavedQuery()', function() {
       name: 'foo bar',
       fields: ['release', 'count(id)'],
       fieldnames: ['Release tags', 'counts'],
+      widths: [111, 222],
       dateCreated: '2019-10-30T06:13:17.632078Z',
       environment: ['dev', 'production'],
       version: 2,
@@ -246,8 +266,8 @@ describe('EventView.fromSavedQuery()', function() {
       id: '5',
       name: 'foo bar',
       fields: [
-        {field: 'release', title: 'Release tags'},
-        {field: 'count(id)', title: 'counts'},
+        {field: 'release', title: 'Release tags', width: 111},
+        {field: 'count(id)', title: 'counts', width: 222},
       ],
       sorts: generateSorts(['count_id']),
       query: '',
@@ -270,8 +290,8 @@ describe('EventView.fromSavedQuery()', function() {
     };
     const eventView = EventView.fromSavedQuery(saved);
     expect(eventView.fields).toEqual([
-      {field: 'count()', title: 'volume'},
-      {field: 'title', title: 'caption'},
+      {field: 'count()', title: 'volume', width: COL_WIDTH_UNDEFINED},
+      {field: 'title', title: 'caption', width: COL_WIDTH_UNDEFINED},
     ]);
     expect(eventView.name).toEqual(saved.name);
     expect(eventView.statsPeriod).toEqual('14d');
@@ -574,6 +594,7 @@ describe('EventView.generateQueryStringObject()', function() {
       name: undefined,
       field: ['id', 'title'],
       fieldnames: ['id', 'title'],
+      widths: [COL_WIDTH_UNDEFINED, COL_WIDTH_UNDEFINED],
       sort: [],
       tag: [],
       query: '',
@@ -589,8 +610,8 @@ describe('EventView.generateQueryStringObject()', function() {
       id: '1234',
       name: 'best query',
       fields: [
-        {field: 'count()', title: 'events'},
-        {field: 'project.id', title: 'project'},
+        {field: 'count()', title: 'events', width: 123},
+        {field: 'project.id', title: 'project', width: 456},
       ],
       sorts: generateSorts(['count']),
       tags: ['foo', 'bar'],
@@ -610,6 +631,7 @@ describe('EventView.generateQueryStringObject()', function() {
       name: 'best query',
       field: ['count()', 'project.id'],
       fieldnames: ['events', 'project'],
+      widths: [123, 456],
       sort: ['-count'],
       tag: ['foo', 'bar'],
       query: 'event.type:error',
@@ -948,8 +970,8 @@ describe('EventView.toNewQuery()', function() {
     id: '1234',
     name: 'best query',
     fields: [
-      {field: 'count()', title: 'events'},
-      {field: 'project.id', title: 'project'},
+      {field: 'count()', title: 'events', width: 123},
+      {field: 'project.id', title: 'project', width: 456},
     ],
     sorts: generateSorts(['count']),
     tags: ['foo', 'bar'],
@@ -972,6 +994,7 @@ describe('EventView.toNewQuery()', function() {
       name: 'best query',
       fieldnames: ['events', 'project'],
       fields: ['count()', 'project.id'],
+      widths: ['123', '456'],
       orderby: '-count',
       query: 'event.type:error',
       projects: [42],
@@ -1002,6 +1025,7 @@ describe('EventView.toNewQuery()', function() {
       name: 'best query',
       fieldnames: ['events', 'project'],
       fields: ['count()', 'project.id'],
+      widths: ['123', '456'],
       orderby: '-count',
       projects: [42],
       start: '2019-10-01T00:00:00',
@@ -1031,6 +1055,7 @@ describe('EventView.toNewQuery()', function() {
       name: 'best query',
       fieldnames: ['events', 'project'],
       fields: ['count()', 'project.id'],
+      widths: ['123', '456'],
       orderby: '-count',
       projects: [42],
       start: '2019-10-01T00:00:00',
diff --git a/tests/js/spec/views/eventsV2/utils.spec.jsx b/tests/js/spec/views/eventsV2/utils.spec.jsx
index c9afb6b250..1503e6c0d7 100644
--- a/tests/js/spec/views/eventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/eventsV2/utils.spec.jsx
@@ -11,6 +11,7 @@ import {
   decodeColumnOrder,
   pushEventViewToLocation,
 } from 'app/views/eventsV2/utils';
+import {COL_WIDTH_UNDEFINED, COL_WIDTH_NUMBER} from 'app/components/gridEditable';
 
 describe('eventTagSearchUrl()', function() {
   let location;
@@ -238,21 +239,16 @@ describe('getFieldRenderer', function() {
 
 describe('decodeColumnOrder', function() {
   it('can decode 0 elements', function() {
-    const results = decodeColumnOrder({
-      fieldnames: [],
-      field: [],
-    });
+    const results = decodeColumnOrder([]);
 
     expect(Array.isArray(results)).toBeTruthy();
     expect(results).toHaveLength(0);
   });
 
   it('can decode fields', function() {
-    const results = decodeColumnOrder({
-      field: ['title'],
-      fieldnames: ['Event title'],
-      fields: [{field: 'title', title: 'Event title'}],
-    });
+    const results = decodeColumnOrder([
+      {field: 'title', title: 'Event title', width: 123},
+    ]);
 
     expect(Array.isArray(results)).toBeTruthy();
 
@@ -261,7 +257,12 @@ describe('decodeColumnOrder', function() {
       name: 'Event title',
       aggregation: '',
       field: 'title',
-      eventViewField: {field: 'title', title: 'Event title'},
+      width: 123,
+      eventViewField: {
+        field: 'title',
+        title: 'Event title',
+        width: 123,
+      },
       isDragging: false,
       isPrimary: true,
       isSortable: false,
@@ -270,11 +271,9 @@ describe('decodeColumnOrder', function() {
   });
 
   it('can decode aggregate functions with no arguments', function() {
-    const results = decodeColumnOrder({
-      field: ['count()'],
-      fieldnames: ['projects'],
-      fields: [{field: 'count()', title: 'projects'}],
-    });
+    const results = decodeColumnOrder([
+      {field: 'count()', title: 'projects', width: 123},
+    ]);
 
     expect(Array.isArray(results)).toBeTruthy();
 
@@ -283,20 +282,23 @@ describe('decodeColumnOrder', function() {
       name: 'projects',
       aggregation: 'count',
       field: '',
-      eventViewField: {field: 'count()', title: 'projects'},
+      width: 123,
+      eventViewField: {
+        field: 'count()',
+        title: 'projects',
+        width: 123,
+      },
       isDragging: false,
       isPrimary: false,
       isSortable: true,
-      type: 'never',
+      type: 'number',
     });
   });
 
   it('can decode elements with aggregate functions with arguments', function() {
-    const results = decodeColumnOrder({
-      field: ['avg(transaction.duration)'],
-      fieldnames: ['average'],
-      fields: [{field: 'avg(transaction.duration)', title: 'average'}],
-    });
+    const results = decodeColumnOrder([
+      {field: 'avg(transaction.duration)', title: 'average'},
+    ]);
 
     expect(Array.isArray(results)).toBeTruthy();
 
@@ -305,11 +307,12 @@ describe('decodeColumnOrder', function() {
       name: 'average',
       aggregation: 'avg',
       field: 'transaction.duration',
+      width: COL_WIDTH_NUMBER,
       eventViewField: {field: 'avg(transaction.duration)', title: 'average'},
       isDragging: false,
       isPrimary: false,
       isSortable: true,
-      type: 'duration',
+      type: 'number',
     });
   });
 });
@@ -338,7 +341,7 @@ describe('pushEventViewToLocation', function() {
     },
   };
 
-  it('correct query string objecet pushed to history', function() {
+  it('correct query string object pushed to history', function() {
     const eventView = new EventView(state);
 
     pushEventViewToLocation({
@@ -352,6 +355,7 @@ describe('pushEventViewToLocation', function() {
         name: 'best query',
         field: ['count()', 'project.id'],
         fieldnames: ['events', 'project'],
+        widths: [COL_WIDTH_UNDEFINED, COL_WIDTH_UNDEFINED],
         sort: ['-count'],
         tag: ['foo', 'bar'],
         query: 'event.type:error',
@@ -381,6 +385,7 @@ describe('pushEventViewToLocation', function() {
         name: 'best query',
         field: ['count()', 'project.id'],
         fieldnames: ['events', 'project'],
+        widths: [COL_WIDTH_UNDEFINED, COL_WIDTH_UNDEFINED],
         sort: ['-count'],
         tag: ['foo', 'bar'],
         query: 'event.type:error',
