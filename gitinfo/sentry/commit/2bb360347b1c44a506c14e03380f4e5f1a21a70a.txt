commit 2bb360347b1c44a506c14e03380f4e5f1a21a70a
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Mon Apr 9 15:12:04 2018 -0700

    feat(api): Make accept project transfer endpoint accept organization (#7909)

diff --git a/src/sentry/api/endpoints/accept_project_transfer.py b/src/sentry/api/endpoints/accept_project_transfer.py
index 0dcd0a9c42..5e57062167 100644
--- a/src/sentry/api/endpoints/accept_project_transfer.py
+++ b/src/sentry/api/endpoints/accept_project_transfer.py
@@ -88,29 +88,60 @@ class AcceptProjectTransferEndpoint(Endpoint):
 
         transaction_id = data['transaction_id']
 
+        org_slug = request.DATA.get('organization')
         team_id = request.DATA.get('team')
-        if team_id is None:
-            return Response({'detail': 'Choose a team to transfer the project to'}, status=400)
 
-        try:
-            team = Team.objects.get(
-                id=team_id,
-            )
-        except Team.DoesNotExist:
-            return Response({'detail': 'Invalid team'}, status=400)
+        if org_slug is not None and team_id is not None:
+            return Response({
+                'detail': 'Choose either a team or an organization, not both'
+            }, status=400)
+
+        if org_slug is None and team_id is None:
+            return Response({
+                'detail': 'Choose either a team or an organization to transfer the project to'
+            }, status=400)
+
+        if team_id:
+            try:
+                team = Team.objects.get(
+                    id=team_id,
+                )
+            except Team.DoesNotExist:
+                return Response({'detail': 'Invalid team'}, status=400)
+
+            # check if user is an owner of the team's org
+            is_team_org_owner = OrganizationMember.objects.filter(
+                user__is_active=True,
+                user=request.user,
+                role=roles.get_top_dog().id,
+                organization_id=team.organization_id,
+            ).exists()
+
+            if not is_team_org_owner:
+                return Response({'detail': 'Invalid team'}, status=400)
 
-        # check if user is an owner of the team's org
-        is_team_org_owner = OrganizationMember.objects.filter(
-            user__is_active=True,
-            user=request.user,
-            role=roles.get_top_dog().id,
-            organization_id=team.organization_id,
-        ).exists()
+            project.transfer_to(team=team)
+
+        if org_slug:
+            try:
+                organization = Organization.objects.get(
+                    slug=org_slug,
+                )
+            except Organization.DoesNotExist:
+                return Response({'detail': 'Invalid organization'}, status=400)
+
+            # check if user is an owner of the organization
+            is_org_owner = OrganizationMember.objects.filter(
+                user__is_active=True,
+                user=request.user,
+                role=roles.get_top_dog().id,
+                organization_id=organization.id,
+            ).exists()
 
-        if not is_team_org_owner:
-            return Response({'detail': 'Invalid team'}, status=400)
+            if not is_org_owner:
+                return Response({'detail': 'Invalid organization'}, status=400)
 
-        project.transfer_to(team)
+            project.transfer_to(organization=organization)
 
         self.create_audit_entry(
             request=request,
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index a7a729bf27..871504a827 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -280,7 +280,12 @@ class Project(Model):
             is_enabled = bool(is_enabled)
         return is_enabled
 
-    def transfer_to(self, team):
+    def transfer_to(self, team=None, organization=None):
+
+        # TODO(jess): remove this when new-teams is live for everyone
+        # only support passing team or org not both
+        assert not (team and organization)
+
         # NOTE: this will only work properly if the new team is in a different
         # org than the existing one, which is currently the only use case in
         # production
@@ -294,7 +299,8 @@ class Project(Model):
             Rule,
         )
 
-        organization = team.organization
+        if organization is None:
+            organization = team.organization
 
         old_org_id = self.organization_id
         org_changed = old_org_id != organization.id
@@ -354,7 +360,8 @@ class Project(Model):
             )
 
         # ensure this actually exists in case from team was null
-        self.add_team(team)
+        if team is not None:
+            self.add_team(team)
 
     def add_team(self, team):
         try:
diff --git a/tests/sentry/api/endpoints/test_accept_project_transfer.py b/tests/sentry/api/endpoints/test_accept_project_transfer.py
index 3f1ad37679..146c7ede1a 100644
--- a/tests/sentry/api/endpoints/test_accept_project_transfer.py
+++ b/tests/sentry/api/endpoints/test_accept_project_transfer.py
@@ -76,7 +76,7 @@ class AcceptTransferProjectTest(APITestCase):
         assert self.from_organization.slug in org_slugs
         assert self.to_organization.slug in org_slugs
 
-    def test_transfers_project_to_correct_organization(self):
+    def test_transfers_project_to_correct_team(self):
         self.login_as(self.owner)
         url_data = sign(
             actor_id=self.member.user_id,
@@ -120,3 +120,44 @@ class AcceptTransferProjectTest(APITestCase):
         resp = self.client.post(self.path, data={'team': self.to_team.id, 'data': url_data})
         resp = self.client.get(self.path + '?' + urlencode({'data': url_data}))
         assert resp.status_code == 400
+
+    def test_transfers_project_to_correct_organization(self):
+        self.login_as(self.owner)
+        url_data = sign(
+            actor_id=self.member.user_id,
+            from_organization_id=self.from_organization.id,
+            project_id=self.project.id,
+            user_id=self.owner.id,
+            transaction_id=self.transaction_id,
+        )
+
+        resp = self.client.post(
+            self.path,
+            data={'organization': self.to_organization.slug, 'data': url_data}
+        )
+        assert resp.status_code == 204
+        p = Project.objects.get(id=self.project.id)
+        assert p.organization_id == self.to_organization.id
+
+    def test_errors_when_team_and_org_provided(self):
+        self.login_as(self.owner)
+        url_data = sign(
+            actor_id=self.member.user_id,
+            from_organization_id=self.from_organization.id,
+            project_id=self.project.id,
+            user_id=self.owner.id,
+            transaction_id=self.transaction_id,
+        )
+
+        resp = self.client.post(
+            self.path,
+            data={
+                'organization': self.to_organization.slug,
+                'team': self.to_team.id,
+                'data': url_data,
+            },
+        )
+        assert resp.status_code == 400
+        assert resp.data == {'detail': 'Choose either a team or an organization, not both'}
+        p = Project.objects.get(id=self.project.id)
+        assert p.organization_id == self.from_organization.id
diff --git a/tests/sentry/models/test_project.py b/tests/sentry/models/test_project.py
index f43d3633fc..90a684a70d 100644
--- a/tests/sentry/models/test_project.py
+++ b/tests/sentry/models/test_project.py
@@ -35,7 +35,7 @@ class ProjectTest(TestCase):
 
         assert list(project.member_set.all()) == []
 
-    def test_transfer_to(self):
+    def test_transfer_to_team(self):
         from_org = self.create_organization()
         from_team = self.create_team(organization=from_org)
         to_org = self.create_organization()
@@ -50,7 +50,7 @@ class ProjectTest(TestCase):
             data={},
         )
 
-        project.transfer_to(to_team)
+        project.transfer_to(team=to_team)
 
         project = Project.objects.get(id=project.id)
 
@@ -63,7 +63,7 @@ class ProjectTest(TestCase):
         assert updated_rule.environment_id != rule.environment_id
         assert updated_rule.environment_id == Environment.get_or_create(project, 'production').id
 
-    def test_transfer_to_slug_collision(self):
+    def test_transfer_to_team_slug_collision(self):
         from_org = self.create_organization()
         from_team = self.create_team(organization=from_org)
         project = self.create_project(teams=[from_team], slug='matt')
@@ -74,7 +74,7 @@ class ProjectTest(TestCase):
 
         assert Project.objects.filter(organization=to_org).count() == 1
 
-        project.transfer_to(to_team)
+        project.transfer_to(team=to_team)
 
         project = Project.objects.get(id=project.id)
 
@@ -85,7 +85,7 @@ class ProjectTest(TestCase):
         assert Project.objects.filter(organization=to_org).count() == 2
         assert Project.objects.filter(organization=from_org).count() == 0
 
-    def test_transfer_to_releases(self):
+    def test_transfer_to_team_releases(self):
         from_org = self.create_organization()
         from_team = self.create_team(organization=from_org)
         to_org = self.create_organization()
@@ -112,7 +112,7 @@ class ProjectTest(TestCase):
             release=release,
         ).exists()
 
-        project.transfer_to(to_team)
+        project.transfer_to(team=to_team)
 
         project = Project.objects.get(id=project.id)
 
@@ -129,3 +129,92 @@ class ProjectTest(TestCase):
             project=project,
             release=release,
         ).exists()
+
+    def test_transfer_to_organization(self):
+        from_org = self.create_organization()
+        team = self.create_team(organization=from_org)
+        to_org = self.create_organization()
+
+        project = self.create_project(teams=[team])
+
+        rule = Rule.objects.create(
+            project=project,
+            environment_id=Environment.get_or_create(project, 'production').id,
+            label='Golden Rule',
+            data={},
+        )
+
+        project.transfer_to(organization=to_org)
+
+        project = Project.objects.get(id=project.id)
+
+        assert project.teams.count() == 0
+        assert project.organization_id == to_org.id
+
+        updated_rule = project.rule_set.get(label='Golden Rule')
+        assert updated_rule.id == rule.id
+        assert updated_rule.environment_id != rule.environment_id
+        assert updated_rule.environment_id == Environment.get_or_create(project, 'production').id
+
+    def test_transfer_to_organization_slug_collision(self):
+        from_org = self.create_organization()
+        team = self.create_team(organization=from_org)
+        project = self.create_project(teams=[team], slug='matt')
+        to_org = self.create_organization()
+        # conflicting project slug
+        self.create_project(slug='matt', organization=to_org)
+
+        assert Project.objects.filter(organization=to_org).count() == 1
+
+        project.transfer_to(organization=to_org)
+
+        project = Project.objects.get(id=project.id)
+
+        assert project.teams.count() == 0
+        assert project.organization_id == to_org.id
+        assert project.slug != 'matt'
+        assert Project.objects.filter(organization=to_org).count() == 2
+        assert Project.objects.filter(organization=from_org).count() == 0
+
+    def test_transfer_to_organization_releases(self):
+        from_org = self.create_organization()
+        team = self.create_team(organization=from_org)
+        to_org = self.create_organization()
+
+        project = self.create_project(teams=[team])
+
+        environment = Environment.get_or_create(project, 'production')
+        release = Release.get_or_create(project=project, version='1.0')
+
+        ReleaseProjectEnvironment.objects.create(
+            project=project,
+            release=release,
+            environment=environment,
+        )
+
+        assert ReleaseProjectEnvironment.objects.filter(
+            project=project,
+            release=release,
+            environment=environment,
+        ).exists()
+        assert ReleaseProject.objects.filter(
+            project=project,
+            release=release,
+        ).exists()
+
+        project.transfer_to(organization=to_org)
+
+        project = Project.objects.get(id=project.id)
+
+        assert project.teams.count() == 0
+        assert project.organization_id == to_org.id
+
+        assert not ReleaseProjectEnvironment.objects.filter(
+            project=project,
+            release=release,
+            environment=environment,
+        ).exists()
+        assert not ReleaseProject.objects.filter(
+            project=project,
+            release=release,
+        ).exists()
