commit 389e2df8b5786d16eae0f3c6896ca6380ff68406
Author: David Cramer <dcramer@gmail.com>
Date:   Sat May 7 17:28:04 2011 -0700

    Initial refactoring of docs to describe new Sentry webserver

diff --git a/docs/config.rst b/docs/config/index.rst
similarity index 85%
rename from docs/config.rst
rename to docs/config/index.rst
index d7f8b502c2..c734119f81 100644
--- a/docs/config.rst
+++ b/docs/config/index.rst
@@ -1,43 +1,10 @@
 Configuration
 =============
 
-Multi-server configuration
---------------------------
-
-To configure Sentry for use in a multi-server environment, first you'll want to configure your Sentry server (not your application)::
-
-	INSTALLED_APPS = [
-	  ...
-	  'sentry',
-	  'sentry.client',
-	]
-	
-	SENTRY_KEY = '0123456789abcde'
-
-And on each of your application servers, specify the URL of the Sentry server, add ``sentry.client`` to ``INSTALLED_APPS``, and specify the same key used in your Sentry server's settings::
-
-	# This should be the absolute URI of sentries store view
-	SENTRY_REMOTE_URL = 'http://your.sentry.server/sentry/store/'
-	
-	INSTALLED_APPS = [
-	  ...
-	  'sentry.client',
-	]
-	
-	SENTRY_KEY = '0123456789abcde'
-
-You may also specify an alternative timeout to the default (which is 5 seconds) for all outgoing logging requests (only works with python 2.6 and above)::
-
-	SENTRY_REMOTE_TIMEOUT = 5
-
-Sentry also allows you to support high availability by pushing to multiple servers::
-
-	SENTRY_REMOTE_URL = ['http://server1/sentry/store/', 'http://server2/sentry/store/']
-
 Integration with ``logging``
 ----------------------------
 
-django-sentry supports the ability to directly tie into the ``logging`` module. To use it simply add ``SentryHandler`` to your logger::
+Sentry supports the ability to directly tie into the ``logging`` module. To use it simply add ``SentryHandler`` to your logger::
 
 	import logging
 	from sentry.client.handlers import SentryHandler
@@ -261,12 +228,6 @@ SENTRY_URL_PREFIX
 
 Absolute URL to the sentry root directory. Should not include a trailing slash. Defaults to "".
 
-########################
-SENTRY_STATIC_URL_PREFIX
-########################
-
-Absolute URL to the sentry static directory. Should not include a trailing slash. Defaults to "{SENTRY_URL_PREFIX}/_static".
-
 ####################
 SENTRY_EXCLUDE_PATHS
 ####################
diff --git a/docs/index.rst b/docs/index.rst
index 2f9db1801f..ce2d84808a 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -7,11 +7,17 @@ it allows you to interact and view near real-time information to discover issues
 easily trace them in your application.
 
 .. toctree::
-   :maxdepth: 2
+   :maxdepth: 1
 
-   install
-   config
+   install/index
+   config/index
    extensions
    technical
 
 .. image:: http://dl.dropbox.com/u/116385/Screenshots/l6xk.png
+
+Deprecation Notes
+-----------------
+
+Milestones releases are 1.3 or 1.4, and our deprecation policy is to a two version step. For example,
+a feature will be deprecated in 1.3, and completely removed in 1.4.
diff --git a/docs/install.rst b/docs/install.rst
deleted file mode 100644
index 4a068fb4fc..0000000000
--- a/docs/install.rst
+++ /dev/null
@@ -1,100 +0,0 @@
-Install
-=======
-
-If you haven't already, start by downloading Sentry. The easiest way is with *pip*::
-
-	pip install django-sentry --upgrade
-
-Or with *setuptools*::
-
-	easy_install -U django-sentry
-
-Once installed, update your settings.py and add ``sentry``, ``sentry.client``, ``indexer``, and ``paging`` to ``INSTALLED_APPS``::
-
-	INSTALLED_APPS = (
-	    'django.contrib.admin',
-	    'django.contrib.auth',
-	    'django.contrib.contenttypes',
-	    'django.contrib.sessions',
-	    
-	    'sentry',
-	    'sentry.client',
-	    ...
-	)
-
-You will also need to add ``sentry.urls`` to your url patterns::
-
-	urlpatterns = patterns('',
-	    (r'^sentry/', include('sentry.urls')),
-	)
-
-We also highly recommend setting ``TEMPLATE_DEBUG=True`` in your environment (not to be confused with ``DEBUG``). This will allow
-Sentry to receive template debug information when it hits a syntax error.
-
-Finally, run ``python manage.py syncdb`` to create the database tables.
-
-.. note::
-
-   We recommend using South for migrations. Initial migrations have already been created for Sentry in sentry/migrations/ so you only need to run ``python manage.py migrate sentry`` instead of ``syncdb``
-
-.. seealso::
-
-   See :doc:`extensions` for information on additional plugins and functionality included.
-
-Requirements
-------------
-
-If you're installing it by hand, you'll need to fulfill the following requirements:
- 
- - **Django >= 1.2**
- - **django-indexer >= 0.3.0** (stores metadata indexes)
- - **django-paging >= 0.2.2**
- - **django-templatetag-sugar >= 0.1.0**
-
-Upgrading
----------
-
-Upgrading Sentry is fairly painless with South migrations::
-
-	python manage.py migrate sentry
-
-If you don't use South, then start.
-
-Caveats
--------
-
-#########################
-Error Handling Middleware
-#########################
-
-If you already have middleware in place that handles ``process_exception`` you will need to take extra care when using Sentry.
-
-For example, the following middleware would suppress Sentry logging due to it returning a response::
-
-	class MyMiddleware(object):
-	    def process_exception(self, request, exception):
-	        return HttpResponse('foo')
-
-To work around this, you can either disable your error handling middleware, or add something like the following::
-
-	from django.core.signals import got_request_exception
-	class MyMiddleware(object):
-	    def process_exception(self, request, exception):
-	        # Make sure the exception signal is fired for Sentry
-	        got_request_exception.send(sender=self, request=request)
-	        return HttpResponse('foo')
-
-Or, alternatively, you can just enable Sentry responses::
-
-	from sentry.client.models import sentry_exception_handler
-	class MyMiddleware(object):
-	    def process_exception(self, request, exception):
-	        # Make sure the exception signal is fired for Sentry
-	        sentry_exception_handler(request=request)
-	        return HttpResponse('foo')
-
-Deprecation Notes
------------------
-
-Milestones releases are 1.3 or 1.4, and our deprecation policy is to a two version step. For example,
-a feature will be deprecated in 1.3, and completely removed in 1.4.
diff --git a/docs/install/index.rst b/docs/install/index.rst
new file mode 100644
index 0000000000..17c74ea3c1
--- /dev/null
+++ b/docs/install/index.rst
@@ -0,0 +1,181 @@
+Install
+=======
+
+If you haven't already, start by downloading Sentry. The easiest way is with *pip*::
+
+	pip install django-sentry --upgrade
+
+Or with *setuptools*::
+
+	easy_install -U django-sentry
+
+Requirements
+------------
+
+If you installed using pip or setuptools you shouldn't need to worry about requirements. Otherwise
+you will need to install the following packages in your Sentry server environment:
+
+ - **Django >= 1.2**
+ - **django-indexer >= 0.3.0** (stores metadata indexes)
+ - **django-paging >= 0.2.4**
+ - **django-templatetag-sugar >= 0.1.0**
+
+The following dependencies are required if you plan to run Sentry using it's built-in webserver:
+
+ - **python-daemon >= 1.6**
+ - **eventlet >= 0.9.15**
+
+You now have two choices:
+
+1. Run an integrated setup where your webapp runs both the Sentry client and server.
+
+   If you run on a single web server, or don't expect high load, this is the quickest
+   configuration to get up and running.
+
+2. (Recommended) Runs the server in a separate web instance to isolate your application.
+
+   The recommended setup for apps which have any kind of quality of service requirements.
+   Your Sentry server (web) application will run in its own environment which ensures the
+   most compatibility with your application, as well as ensuring it does not impact your
+   primary application servers.
+
+Integrated Setup
+----------------
+
+The integrated setup is the easiest to get up and running. It simply requires you to plug the Sentry application into your existing
+Django project. Once installed, you simply need to update your settings.py and add ``sentry`` and ``sentry.client`` to ``INSTALLED_APPS``::
+
+	INSTALLED_APPS = (
+	    'django.contrib.admin',
+	    'django.contrib.auth',
+	    'django.contrib.contenttypes',
+	    'django.contrib.sessions',
+	    
+	    'sentry',
+	    'sentry.client',
+	    ...
+	)
+
+You will also need to add ``sentry.web.urls`` to your url patterns::
+
+	urlpatterns = patterns('',
+	    (r'^sentry/', include('sentry.web.urls')),
+	)
+
+We also highly recommend setting ``TEMPLATE_DEBUG=True`` in your environment (not to be confused with ``DEBUG``). This will allow
+Sentry to receive template debug information when it hits a syntax error.
+
+Finally, run ``python manage.py syncdb`` to create the database tables.
+
+.. note::
+
+   We recommend using South for migrations. Initial migrations have already been created for Sentry in sentry/migrations/ so you only need to run ``python manage.py migrate sentry`` instead of ``syncdb``
+
+.. seealso::
+
+   See :doc:`../extensions` for information on additional plugins and functionality included.
+
+Upgrading
+~~~~~~~~~
+
+Upgrading Sentry is fairly painless with South migrations. If you're not using South then you're on your own::
+
+	python manage.py migrate sentry
+
+Running a Sentry Server
+-----------------------
+
+The recommended configuration of Sentry involves setting up a separate web server to handle your error
+logging. This means that any number of Sentry clients simply pass on this information to your primary Sentry
+server. If you run into a situation where one of Sentry's requirements conflict with your own, or you simply
+need to ensure quality of service within your project, this is for you.
+
+The Built-in Server
+~~~~~~~~~~~~~~~~~~~
+
+Sentry provides a built-in webserver (powered by eventlet) to get you off the ground quickly. It's powered by two open source
+libraries, eventlet and python-daemon.
+
+Sentry provides the start, stop, and restart commands available via the command line interface to manage the server process::
+
+	# Sentry's server runs on port 9000 by default. Make sure your ``SENTRY_REMOTE_URL`` reflects
+	# the correct host and port!
+	sentry start --config=/etc/sentry.conf.py
+
+.. note: The ``start`` command will also automatically run the ``upgrade`` command, which handles data and schema migrations.
+
+Configuring a Sentry WSGI app
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+If you need more flexibility in your Sentry server, you may want to setup the server project manually. While this guide does not
+cover configuring your webserver, it does describe the required attributes of your WSGI app to run in a standalone server mode.
+
+First you're going to need to add Sentry to your server's INSTALLED_APPS::
+
+	INSTALLED_APPS = [
+	  ...
+	  'sentry',
+	  # We recommend adding the client to capture errors
+	  # seen on this server as well
+	  'sentry.client',
+	]
+
+You will also need to ensure that your ``SENTRY_KEY`` matches across your client and server configurations::
+
+	SENTRY_KEY = '0123456789abcde'
+
+
+Configure your Clients
+~~~~~~~~~~~~~~~~~~~~~~
+
+On each of your application servers, you will need to configure Sentry to communicate with your remote Sentry server.
+
+Start with adding the client to your ``INSTALLED_APPS``::
+
+	INSTALLED_APPS = [
+	  ...
+	  'sentry.client',
+	]
+
+Add the ``SENTRY_REMOTE_URL`` configuration variable, to point to the absolute location to the ``/store/`` view on your
+Sentry server::
+
+	# This should be the absolute URI of sentries store view
+	SENTRY_REMOTE_URL = 'http://your.sentry.server/sentry/store/'
+
+You will also need to ensure that your ``SENTRY_KEY`` matches across your client and server configurations::
+
+	SENTRY_KEY = '0123456789abcde'
+
+
+Caveats
+-------
+
+Error Handling Middleware
+~~~~~~~~~~~~~~~~~~~~~~~~~
+
+If you already have middleware in place that handles ``process_exception`` you will need to take extra care when using Sentry.
+
+For example, the following middleware would suppress Sentry logging due to it returning a response::
+
+	class MyMiddleware(object):
+	    def process_exception(self, request, exception):
+	        return HttpResponse('foo')
+
+To work around this, you can either disable your error handling middleware, or add something like the following::
+
+	from django.core.signals import got_request_exception
+	class MyMiddleware(object):
+	    def process_exception(self, request, exception):
+	        # Make sure the exception signal is fired for Sentry
+	        got_request_exception.send(sender=self, request=request)
+	        return HttpResponse('foo')
+
+Or, alternatively, you can just enable Sentry responses::
+
+	from sentry.client.models import sentry_exception_handler
+	class MyMiddleware(object):
+	    def process_exception(self, request, exception):
+	        # Make sure the exception signal is fired for Sentry
+	        sentry_exception_handler(request=request)
+	        return HttpResponse('foo')
