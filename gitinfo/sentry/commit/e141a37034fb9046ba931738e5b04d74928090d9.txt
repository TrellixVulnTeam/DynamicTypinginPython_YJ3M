commit e141a37034fb9046ba931738e5b04d74928090d9
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Dec 30 23:44:18 2014 -0800

    Initial work on action modals

diff --git a/package.json b/package.json
index e11bed0bb3..189f65079a 100644
--- a/package.json
+++ b/package.json
@@ -35,6 +35,7 @@
     "moment": "^2.8.4",
     "raven-js": "^1.1.11",
     "react": "^0.12.2",
+    "react-bootstrap": "^0.13.0",
     "react-router": "^0.11.6",
     "sinon": "^1.10.3",
     "uglify-js": "2.2.4",
diff --git a/src/sentry/models/projectkey.py b/src/sentry/models/projectkey.py
index c812d4990a..059e34bf39 100644
--- a/src/sentry/models/projectkey.py
+++ b/src/sentry/models/projectkey.py
@@ -74,7 +74,6 @@ class ProjectKey(Model):
             url = settings.SENTRY_PUBLIC_ENDPOINT
 
         urlparts = urlparse(url or settings.SENTRY_URL_PREFIX)
-
         return '%s://%s@%s/%s' % (
             urlparts.scheme,
             key,
diff --git a/src/sentry/static/sentry/app-react/components/stream.jsx b/src/sentry/static/sentry/app-react/components/stream.jsx
index d985e0c459..7577da6ec3 100644
--- a/src/sentry/static/sentry/app-react/components/stream.jsx
+++ b/src/sentry/static/sentry/app-react/components/stream.jsx
@@ -5,6 +5,8 @@ var $ = require("jquery");
 var utils = require("../utils");
 
 var Count = require("./count");
+var Modal = require("react-bootstrap/Modal");
+var OverlayMixin = require("react-bootstrap/OverlayMixin");
 var TimeSince = require("./timeSince");
 
 var SearchDropdown = React.createClass({
@@ -117,10 +119,106 @@ var FilterSelect = React.createClass({
   }
 });
 
+var ActionLink = React.createClass({
+  mixins: [OverlayMixin],
+
+  getInitialState: function() {
+    return {
+      isModalOpen: false
+    };
+  },
+
+  handleToggle: function() {
+    this.setState({
+      isModalOpen: !this.state.isModalOpen
+    });
+  },
+
+  handleActionAll: function(event) {
+    console.log('actioning all');
+  },
+
+  handleActionSelected: function(event) {
+    console.log('actioning selected');
+  },
+
+  defaultActionLabel: function(confirmLabel) {
+    return confirmLabel.toLowerCase() + ' these {count} events';
+  },
+
+  render: function () {
+    return (
+      <a {...this.props} onClick={this.handleToggle}>
+        {this.props.children}
+      </a>
+    );
+  },
+
+  renderOverlay: function() {
+    if (!this.state.isModalOpen) {
+      return <span/>;
+    }
+
+    var selectedAggList = [];
+    for (var i = 0, node; (node = this.props.aggList[i]); i++) {
+      if (node.isSelected === true) {
+        selectedAggList.push(node);
+      }
+    }
+
+    if (selectedAggList.length === 0) {
+      throw new Error('ActionModal rendered without any selected aggregates');
+    }
+
+    var shouldConfirm = true;
+    // if skipConfirm is set we never actually show the modal
+    if (this.props.skipConfirm === true) {
+      shouldConfirm = false;
+    // if onlyIfBulk is set and we've selected a single item, we skip
+    // showing the modal
+    } else if (this.props.onlyIfBulk === true && !this.props.selectAllActive) {
+      shouldConfirm = false;
+    }
+
+    // // TODO
+    // if (!shouldConfirm) {
+    //   this.props.onAction(selectedAggList);
+    //   return '<span/>';
+    // }
+
+    var confirmLabel = this.props.confirmLabel || 'Edit';
+    var actionLabel = this.props.actionLabel || this.defaultActionLabel(confirmLabel);
+    var numEvents = selectedAggList.length;
+
+    actionLabel = actionLabel.replace('{count}', numEvents);
+
+    return (
+      <Modal title="Please confirm" animation={false}>
+        <div className="modal-body">
+          <p><strong>Are you sure that you want to {actionLabel}?</strong></p>
+          <p>This action cannot be undone.</p>
+        </div>
+        <div className="modal-footer">
+          <button type="button" className="btn btn-default">Cancel</button>
+          {this.props.canActionAll &&
+            <button type="button" className="btn btn-danger"
+                    onClick={this.handleActionAll}>{confirmLabel} all recorded events</button>
+          }
+          <button type="button" className="btn btn-primary"
+                  onClick={this.handleActionSelected}>{confirmLabel} {numEvents} selected events</button>
+        </div>
+      </Modal>
+    );
+  }
+});
+
 var Actions = React.createClass({
   handleSelectAll: function(event){
     return this.props.onSelectAll(event);
   },
+  handleResolve: function(aggList, event){
+    return this.props.onAction(aggList, {status: 'resolved'}, event);
+  },
   render: function() {
     return (
       <div className="stream-actions">
@@ -131,10 +229,16 @@ var Actions = React.createClass({
                    checked={this.props.selectAllActive} />
           </div>
           <div className="btn-group">
-            <a href="#" className="btn btn-default btn-sm action-resolve"
-               disabled={!this.props.anySelected}>
+            <ActionLink
+               className="btn btn-default btn-sm action-resolve"
+               disabled={!this.props.anySelected}
+               onAction={this.handleResolve}
+               confirmLabel="Resolve"
+               canActionAll={true}
+               onlyIfBulk={true}
+               aggList={this.props.aggList}>
               <i aria-hidden="true" className="icon-checkmark"></i>
-            </a>
+            </ActionLink>
             <a href="#" className="btn btn-default btn-sm action-bookmark"
                disabled={!this.props.anySelected}>
               <span className="icon icon-bookmark"></span>
@@ -319,7 +423,7 @@ var Stream = React.createClass({
       multiSelected: numSelected > 1
     });
   },
-  handleSelectAll: function(e){
+  handleSelectAll: function(event){
     var checked = $(event.target).is(':checked');
     var aggList = this.state.aggList;
     var numSelected = checked ? aggList.length : 0;
@@ -335,12 +439,14 @@ var Stream = React.createClass({
       multiSelected: numSelected > 1
     });
   },
+  handleAction: function(event){
+  },
   render: function() {
-    var aggNodes = this.state.aggList.map(function(aggregate) {
+    var aggNodes = this.state.aggList.map(function(node) {
       return (
-        <Aggregate data={aggregate} key={aggregate.id}
-                   isSelected={aggregate.isSelected}
-                   onSelect={this.handleSelect.bind(this, aggregate.id)} />
+        <Aggregate data={node} key={node.id}
+                   isSelected={node.isSelected}
+                   onSelect={this.handleSelect.bind(this, node.id)} />
       );
     }.bind(this));
 
@@ -351,6 +457,8 @@ var Stream = React.createClass({
           <div className="container">
             <div className="group-header">
               <Actions onSelectAll={this.handleSelectAll}
+                       onAction={this.handleAction}
+                       aggList={this.state.aggList}
                        selectAllActive={this.state.selectAllActive}
                        anySelected={this.state.anySelected}
                        multiSelected={this.state.multiSelected} />
diff --git a/src/sentry/templatetags/sentry_dsn.py b/src/sentry/templatetags/sentry_dsn.py
index 137d4017a1..977c56c14a 100644
--- a/src/sentry/templatetags/sentry_dsn.py
+++ b/src/sentry/templatetags/sentry_dsn.py
@@ -20,7 +20,7 @@ def _get_project_key(project_id):
         return None
 
 
-@register.simple_tag()
+@register.simple_tag
 def public_dsn():
     project_id = settings.SENTRY_FRONTEND_PROJECT or settings.SENTRY_PROJECT
     cache_key = 'dsn:%s' % (project_id,)
diff --git a/webpack.config.js b/webpack.config.js
index 33deb77a5c..4e12b3e7a8 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -15,7 +15,7 @@ function vendorFile(name) {
 module.exports = {
   entry: {
     "app": file("app-react/main.jsx"),
-    "vendor": ["react", "react-router", "jquery", "moment"]
+    "vendor": ["react", "react-bootstrap", "jquery", "moment"]
   },
   module: {
     loaders: [
