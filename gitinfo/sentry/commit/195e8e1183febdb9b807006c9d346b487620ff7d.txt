commit 195e8e1183febdb9b807006c9d346b487620ff7d
Author: ted kaemming <ted@kaemming.com>
Date:   Fri Jun 16 14:12:46 2017 -0700

    Try to improve encapsulation of `RedisQuota` key generation. (#5577)
    
    This is the last change in the series of:
    
    - GH-5548
    - getsentry/getsentry#1124
    - GH-5574
    
    This unblocks GH-5530 (but is going to require a rebase there.)

diff --git a/src/sentry/quotas/redis.py b/src/sentry/quotas/redis.py
index 584c9d9305..8efc5a70a1 100644
--- a/src/sentry/quotas/redis.py
+++ b/src/sentry/quotas/redis.py
@@ -53,8 +53,7 @@ class RedisQuota(Quota):
         except Exception as e:
             raise InvalidConfiguration(six.text_type(e))
 
-    def get_redis_key(self, key, timestamp, interval):
-        # TODO: This is going to be made "private" (name mangled.)
+    def __get_redis_key(self, key, timestamp, interval):
         return '{}:{}:{}'.format(self.namespace, key, int(timestamp // interval))
 
     def get_quotas(self, project, key=None):
@@ -95,7 +94,7 @@ class RedisQuota(Quota):
                 return None
 
             return client.get(
-                self.get_redis_key(
+                self.__get_redis_key(
                     quota.key,
                     timestamp,
                     quota.window,
@@ -146,7 +145,7 @@ class RedisQuota(Quota):
         keys = []
         args = []
         for quota in quotas:
-            keys.append(self.get_redis_key(quota.key, timestamp, quota.window))
+            keys.append(self.__get_redis_key(quota.key, timestamp, quota.window))
             expiry = get_next_period_start(quota.window) + self.grace
             args.extend((quota.limit, int(expiry)))
 
