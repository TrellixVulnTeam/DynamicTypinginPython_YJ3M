commit 07d665c8b1d5b927988a4152b331e16b27ae59af
Author: Stephen Cefali <scefali@sentry.io>
Date:   Fri May 8 12:34:07 2020 -0700

    feat(Slack): All installations are bot apps (#18572)

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 1795d905ce..40b69792b3 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1791,11 +1791,6 @@ KAFKA_TOPICS = {
     KAFKA_INGEST_TRANSACTIONS: {"cluster": "default", "topic": KAFKA_INGEST_TRANSACTIONS},
 }
 
-# Enable this to use the legacy Slack Workspace Token apps. You will likely
-# never need to switch this unless you created a workspace app before slack
-# disabled them.
-SLACK_INTEGRATION_USE_WST = False
-
 """
 Fields are:
  - south_app_name: Which app to apply the conversion to
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 3b2aa0064e..da96cb796b 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -75,7 +75,6 @@ default_manager.add("organizations:integrations-issue-basic", OrganizationFeatur
 default_manager.add("organizations:integrations-issue-sync", OrganizationFeature)  # NOQA
 default_manager.add("organizations:integrations-event-hooks", OrganizationFeature)  # NOQA
 default_manager.add("organizations:data-forwarding", OrganizationFeature)  # NOQA
-default_manager.add("organizations:slack-v2", OrganizationFeature)  # NOQA
 default_manager.add("organizations:slack-migration", OrganizationFeature)  # NOQA
 default_manager.add("organizations:internal-catchall", OrganizationFeature)  # NOQA
 default_manager.add("organizations:incidents", OrganizationFeature)  # NOQA
diff --git a/src/sentry/identity/slack/provider.py b/src/sentry/identity/slack/provider.py
index 8b66c13792..c7e34fc948 100644
--- a/src/sentry/identity/slack/provider.py
+++ b/src/sentry/identity/slack/provider.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-from django.conf import settings
-
 from sentry import options
 from sentry.identity.oauth2 import OAuth2Provider, OAuth2LoginView, OAuth2CallbackView
 
@@ -20,39 +18,20 @@ class SlackIdentityProvider(OAuth2Provider):
     user_scopes = ()
 
     def get_oauth_authorize_url(self):
-        if self.use_wst_app:
-            return "https://slack.com/oauth/authorize"
         return "https://slack.com/oauth/v2/authorize"
 
-    @property
-    def use_slack_v2(self):
-        # need to import here because of dependency issues
-        from sentry.integrations.slack.utils import use_slack_v2
-
-        return use_slack_v2(self.pipeline)
-
-    @property
-    def use_wst_app(self):
-        return settings.SLACK_INTEGRATION_USE_WST and not self.use_slack_v2
-
     # XXX(epurkhiser): While workspace tokens _do_ support the oauth.access
     # endpoint, it will no include the authorizing_user, so we continue to use
     # the deprecated oauth.token endpoint until we are able to migrate to a bot
     # app which uses oauth.access.
     def get_oauth_access_token_url(self):
-        if self.use_wst_app:
-            return "https://slack.com/api/oauth.token"
         return "https://slack.com/api/oauth.v2.access"
 
     def get_oauth_client_id(self):
-        if self.use_slack_v2:
-            return options.get("slack-v2.client-id")
-        return options.get("slack.client-id")
+        return options.get("slack-v2.client-id") or options.get("slack.client-id")
 
     def get_oauth_client_secret(self):
-        if self.use_slack_v2:
-            return options.get("slack-v2.client-secret")
-        return options.get("slack.client-secret")
+        return options.get("slack-v2.client-secret") or options.get("slack.client-secret")
 
     def get_user_scopes(self):
         return self.config.get("user_scopes", self.user_scopes)
diff --git a/src/sentry/integrations/slack/integration.py b/src/sentry/integrations/slack/integration.py
index fc523d8c3a..39699d8269 100644
--- a/src/sentry/integrations/slack/integration.py
+++ b/src/sentry/integrations/slack/integration.py
@@ -3,7 +3,6 @@ from __future__ import absolute_import
 import six
 
 from django.utils.translation import ugettext_lazy as _
-from django.conf import settings
 
 from sentry.identity.pipeline import IdentityProviderPipeline
 from sentry.integrations import (
@@ -18,7 +17,7 @@ from sentry.utils.http import absolute_uri
 from sentry.shared_integrations.exceptions import ApiError, IntegrationError
 
 from .client import SlackClient
-from .utils import logger, use_slack_v2
+from .utils import logger
 
 DESCRIPTION = """
 Connect your Sentry organization to one or more Slack workspaces, and start
@@ -79,21 +78,8 @@ class SlackIntegrationProvider(IntegrationProvider):
     features = frozenset([IntegrationFeatures.CHAT_UNFURL, IntegrationFeatures.ALERT_RULE])
     integration_cls = SlackIntegration
 
-    # Scopes differ depending on if it's a workspace app
-    wst_oauth_scopes = frozenset(
-        [
-            "channels:read",
-            "groups:read",
-            "users:read",
-            "chat:write",
-            "links:read",
-            "links:write",
-            "team:read",
-        ]
-    )
-
     # some info here: https://api.slack.com/authentication/quickstart
-    bot_oauth_scopes = frozenset(
+    identity_oauth_scopes = frozenset(
         [
             "channels:read",
             "groups:read",
@@ -110,20 +96,10 @@ class SlackIntegrationProvider(IntegrationProvider):
 
     setup_dialog_config = {"width": 600, "height": 900}
 
-    @property
-    def use_wst_app(self):
-        return settings.SLACK_INTEGRATION_USE_WST and not use_slack_v2(self.pipeline)
-
-    @property
-    def identity_oauth_scopes(self):
-        if self.use_wst_app:
-            return self.wst_oauth_scopes
-        return self.bot_oauth_scopes
-
     def get_pipeline_views(self):
         identity_pipeline_config = {
             "oauth_scopes": self.identity_oauth_scopes,
-            "user_scopes": frozenset(["links:read"]) if not self.use_wst_app else (),
+            "user_scopes": frozenset(["links:read"]),
             "redirect_url": absolute_uri("/extensions/slack/setup/"),
         }
 
@@ -155,14 +131,9 @@ class SlackIntegrationProvider(IntegrationProvider):
         access_token = data["access_token"]
         # bot apps have a different response format
         # see: https://api.slack.com/authentication/quickstart#installing
-        if self.use_wst_app:
-            user_id_slack = data["authorizing_user_id"]
-            team_name = data["team_name"]
-            team_id = data["team_id"]
-        else:
-            user_id_slack = data["authed_user"]["id"]
-            team_name = data["team"]["name"]
-            team_id = data["team"]["id"]
+        user_id_slack = data["authed_user"]["id"]
+        team_name = data["team"]["name"]
+        team_id = data["team"]["id"]
 
         scopes = sorted(self.identity_oauth_scopes)
         team_data = self.get_team_info(access_token)
@@ -172,10 +143,8 @@ class SlackIntegrationProvider(IntegrationProvider):
             "scopes": scopes,
             "icon": team_data["icon"]["image_132"],
             "domain_name": team_data["domain"] + ".slack.com",
+            "installation_type": "born_as_bot",
         }
-        # only set installation type for bot apps
-        if not self.use_wst_app:
-            metadata["installation_type"] = "born_as_bot"
 
         return {
             "name": team_name,
diff --git a/src/sentry/integrations/slack/utils.py b/src/sentry/integrations/slack/utils.py
index 7faa0890a2..e88267372d 100644
--- a/src/sentry/integrations/slack/utils.py
+++ b/src/sentry/integrations/slack/utils.py
@@ -8,7 +8,7 @@ from datetime import timedelta
 from django.core.cache import cache
 from django.core.urlresolvers import reverse
 
-from sentry import features, tagstore
+from sentry import tagstore
 from sentry.api.fields.actor import Actor
 from sentry.incidents.logic import get_incident_aggregates
 from sentry.incidents.models import IncidentStatus, IncidentTrigger
@@ -449,9 +449,3 @@ def send_incident_alert_notification(action, incident):
         logger.info(
             "rule.fail.slack_post", extra={"error": six.text_type(e)},
         )
-
-
-def use_slack_v2(pipeline):
-    return features.has(
-        "organizations:slack-v2", pipeline.organization, actor=pipeline.request.user
-    )
diff --git a/tests/sentry/integrations/slack/test_event_endpoint.py b/tests/sentry/integrations/slack/test_event_endpoint.py
index 705c6325c5..c81542fb3e 100644
--- a/tests/sentry/integrations/slack/test_event_endpoint.py
+++ b/tests/sentry/integrations/slack/test_event_endpoint.py
@@ -4,7 +4,6 @@ import json
 
 import responses
 from six.moves.urllib.parse import parse_qsl
-from django.test.utils import override_settings
 
 from sentry import options
 from sentry.integrations.slack.utils import build_group_attachment, build_incident_attachment
@@ -48,7 +47,6 @@ LINK_SHARED_EVENT = """{
 }"""
 
 
-@override_settings(SLACK_INTEGRATION_USE_WST=True)
 class BaseEventTest(APITestCase):
     def setUp(self):
         super(BaseEventTest, self).setUp()
diff --git a/tests/sentry/integrations/slack/test_integration.py b/tests/sentry/integrations/slack/test_integration.py
index 9c8254457a..4875185754 100644
--- a/tests/sentry/integrations/slack/test_integration.py
+++ b/tests/sentry/integrations/slack/test_integration.py
@@ -3,7 +3,6 @@ from __future__ import absolute_import
 import responses
 import six
 
-from django.test.utils import override_settings
 from six.moves.urllib.parse import parse_qs, urlencode, urlparse
 
 from sentry.integrations.slack import SlackIntegrationProvider, SlackIntegration
@@ -15,7 +14,7 @@ from sentry.models import (
     OrganizationIntegration,
 )
 from sentry.testutils import IntegrationTestCase, TestCase
-from sentry.testutils.helpers import override_options, with_feature
+from sentry.testutils.helpers import override_options
 
 
 class SlackIntegrationTest(IntegrationTestCase):
@@ -25,8 +24,6 @@ class SlackIntegrationTest(IntegrationTestCase):
         self,
         team_id="TXXXXXXX1",
         authorizing_user_id="UXXXXXXX1",
-        access_token="xoxp-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx",
-        is_wst_app=True,
         expected_client_id="slack-client-id",
         expected_client_secret="slack-client-secret",
     ):
@@ -37,40 +34,27 @@ class SlackIntegrationTest(IntegrationTestCase):
         redirect = urlparse(resp["Location"])
         assert redirect.scheme == "https"
         assert redirect.netloc == "slack.com"
-        assert redirect.path == "/oauth/authorize" if is_wst_app else "oauth/v2/authorize"
+        assert redirect.path == "/oauth/v2/authorize"
         params = parse_qs(redirect.query)
-        scopes = self.provider.wst_oauth_scopes if is_wst_app else self.provider.bot_oauth_scopes
+        scopes = self.provider.identity_oauth_scopes
         assert params["scope"] == [" ".join(scopes)]
         assert params["state"]
         assert params["redirect_uri"] == ["http://testserver/extensions/slack/setup/"]
         assert params["response_type"] == ["code"]
         assert params["client_id"] == [expected_client_id]
 
-        assert params.get("user_scope") is None if is_wst_app else ["links:read"]
+        assert params.get("user_scope") == ["links:read"]
         # once we've asserted on it, switch to a singular values to make life
         # easier
         authorize_params = {k: v[0] for k, v in six.iteritems(params)}
 
-        # XXX(epurkhiser): The slack workspace token app uses oauth.token, the
-        # slack bot app uses oauth.v2.access.
-        if is_wst_app:
-            access_json = {
-                "ok": True,
-                "access_token": access_token,
-                "team_id": team_id,
-                "team_name": "Example",
-                "authorizing_user_id": authorizing_user_id,
-            }
-            responses.add(responses.POST, "https://slack.com/api/oauth.token", json=access_json)
-        else:
-            # TODO: make access token an input
-            access_json = {
-                "ok": True,
-                "access_token": "xoxb-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx",
-                "team": {"id": team_id, "name": "Example"},
-                "authed_user": {"id": authorizing_user_id},
-            }
-            responses.add(responses.POST, "https://slack.com/api/oauth.v2.access", json=access_json)
+        access_json = {
+            "ok": True,
+            "access_token": "xoxb-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx",
+            "team": {"id": team_id, "name": "Example"},
+            "authed_user": {"id": authorizing_user_id},
+        }
+        responses.add(responses.POST, "https://slack.com/api/oauth.v2.access", json=access_json)
 
         responses.add(
             responses.GET,
@@ -104,16 +88,14 @@ class SlackIntegrationTest(IntegrationTestCase):
 
     @responses.activate
     def test_bot_flow(self):
-        self.assert_setup_flow(
-            is_wst_app=False, access_token="xoxa-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx",
-        )
+        self.assert_setup_flow()
 
         integration = Integration.objects.get(provider=self.provider.key)
         assert integration.external_id == "TXXXXXXX1"
         assert integration.name == "Example"
         assert integration.metadata == {
             "access_token": "xoxb-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx",
-            "scopes": sorted(self.provider.bot_oauth_scopes),
+            "scopes": sorted(self.provider.identity_oauth_scopes),
             "icon": "http://example.com/ws_icon.jpg",
             "domain_name": "test-slack-workspace.slack.com",
             "installation_type": "born_as_bot",
@@ -127,38 +109,10 @@ class SlackIntegrationTest(IntegrationTestCase):
         identity = Identity.objects.get(idp=idp, user=self.user, external_id="UXXXXXXX1")
         assert identity.status == IdentityStatus.VALID
 
-    @override_settings(SLACK_INTEGRATION_USE_WST=True)
-    def assert_wst_setup_flow(self, *args, **kwargs):
-        self.assert_setup_flow(*args, **kwargs)
-
-    @responses.activate
-    @override_settings(SLACK_INTEGRATION_USE_WST=True)
-    def test_wst_flow(self):
-        self.assert_wst_setup_flow()
-
-        integration = Integration.objects.get(provider=self.provider.key)
-        assert integration.external_id == "TXXXXXXX1"
-        assert integration.name == "Example"
-        assert integration.metadata == {
-            "access_token": "xoxp-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx",
-            "scopes": sorted(self.provider.wst_oauth_scopes),
-            "icon": "http://example.com/ws_icon.jpg",
-            "domain_name": "test-slack-workspace.slack.com",
-        }
-        oi = OrganizationIntegration.objects.get(
-            integration=integration, organization=self.organization
-        )
-        assert oi.config == {}
-
-        idp = IdentityProvider.objects.get(type="slack", external_id="TXXXXXXX1")
-        identity = Identity.objects.get(idp=idp, user=self.user, external_id="UXXXXXXX1")
-        assert identity.status == IdentityStatus.VALID
-
     @responses.activate
-    @override_settings(SLACK_INTEGRATION_USE_WST=True)
     def test_multiple_integrations(self):
-        self.assert_wst_setup_flow()
-        self.assert_wst_setup_flow(team_id="TXXXXXXX2", authorizing_user_id="UXXXXXXX2")
+        self.assert_setup_flow()
+        self.assert_setup_flow(team_id="TXXXXXXX2", authorizing_user_id="UXXXXXXX2")
 
         integrations = Integration.objects.filter(provider=self.provider.key).order_by(
             "external_id"
@@ -184,27 +138,22 @@ class SlackIntegrationTest(IntegrationTestCase):
         assert identities[0].idp != identities[1].idp
 
     @responses.activate
-    @override_settings(SLACK_INTEGRATION_USE_WST=True)
     def test_reassign_user(self):
-        self.assert_wst_setup_flow()
+        self.assert_setup_flow()
         identity = Identity.objects.get()
         assert identity.external_id == "UXXXXXXX1"
 
-        self.assert_wst_setup_flow(authorizing_user_id="UXXXXXXX2")
+        self.assert_setup_flow(authorizing_user_id="UXXXXXXX2")
         identity = Identity.objects.get()
         assert identity.external_id == "UXXXXXXX2"
 
     @responses.activate
-    @with_feature("organizations:slack-v2")
     def test_install_v2(self):
         with override_options(
             {"slack-v2.client-id": "other-id", "slack-v2.client-secret": "other-secret"}
         ):
             self.assert_setup_flow(
-                is_wst_app=False,
-                access_token="xoxa-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx",
-                expected_client_id="other-id",
-                expected_client_secret="other-secret",
+                expected_client_id="other-id", expected_client_secret="other-secret",
             )
 
 
