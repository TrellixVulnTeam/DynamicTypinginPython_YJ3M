commit 55b01fb5cba935fe3275ce6837912c8c71608058
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Wed Aug 31 13:37:32 2016 -0700

    Guard against junk data being sent over the network (#4051)
    
    After inspecting some of the errors we're getting, the data packets look
    completely valid, except for junk bytes within the payload. We can only
    assume that somewhere between the client and us, some bytes get messed
    up. This just guards against it and sends back a potentially more useful
    error instead of a 500.

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 16ee5e1de7..adc5dd6e33 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -223,6 +223,17 @@ class ClientApiHelper(object):
 
         return Project.objects.get_from_cache(id=pk.project_id)
 
+    def decode_data(self, encoded_data):
+        try:
+            return encoded_data.decode('utf-8')
+        except UnicodeDecodeError as e:
+            # This error should be caught as it suggests that there's a
+            # bug somewhere in the client's code.
+            self.log.debug(six.text_type(e), exc_info=True)
+            raise APIError('Bad data decoding request (%s, %s)' % (
+                type(e).__name__, e
+            ))
+
     def decompress_deflate(self, encoded_data):
         try:
             return zlib.decompress(encoded_data).decode('utf-8')
@@ -825,7 +836,7 @@ class LazyData(MutableMapping):
             elif data[0] != b'{':
                 data = helper.decode_and_decompress_data(data)
             else:
-                data = data.decode('utf-8')
+                data = helper.decode_data(data)
         if isinstance(data, six.text_type):
             data = helper.safely_load_json_string(data)
 
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 63aa26e8e5..751c60d5b5 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -2,6 +2,7 @@
 
 from __future__ import absolute_import
 
+import six
 import mock
 
 from datetime import datetime
@@ -381,6 +382,17 @@ class SafelyLoadJSONStringTest(BaseAPITest):
             self.helper.safely_load_json_string('1')
 
 
+class DecodeDataTest(BaseAPITest):
+    def test_valid_data(self):
+        data = self.helper.decode_data('foo')
+        assert data == u'foo'
+        assert type(data) == six.text_type
+
+    def test_invalid_data(self):
+        with self.assertRaises(APIError):
+            self.helper.decode_data('\x99')
+
+
 class GetInterfaceTest(TestCase):
     def test_does_not_let_through_disallowed_name(self):
         with self.assertRaises(ValueError):
