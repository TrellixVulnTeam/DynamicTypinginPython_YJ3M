commit 9c94d2c286ae613ef05039216fc4657e32dc72ea
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Jul 18 23:24:03 2015 -0700

    Merge login/register flow

diff --git a/src/sentry/templates/sentry/login.html b/src/sentry/templates/sentry/login.html
index 16913e27e4..7670853dad 100644
--- a/src/sentry/templates/sentry/login.html
+++ b/src/sentry/templates/sentry/login.html
@@ -9,28 +9,32 @@
 
 {% block footer %}{% endblock %}
 
-{% block header_action %}
-{% if CAN_REGISTER %}
-<a href="{% url 'sentry-register' %}">{% trans "Create Account" %}</a>
-{% endif %}
-{% endblock%}
-
 {% block content %}
-  <div class="sso-toggle-container pull-right">
-    <a href="#" class="sso-link sso-toggle">Looking for single sign-on?</a>
-    <a href="#" class="go-back sso-toggle"><span class="icon-arrow-left"></span> Back to login</a>
-  </div>
+  <ul class="nav nav-tabs auth-toggle">
+    <li{% if op == "login" %} class="active"{% endif %}>
+      <a href="#login" data-toggle="tab">{% trans "Login" %}</a>
+    </li>
+    {% if CAN_REGISTER %}
+      <li{% if op == "register" %} class="active"{% endif %}>
+        <a href="#register" data-toggle="tab">{% trans "Register" %}</a>
+      </li{%>
+    {% endif %}
+    <li{% if op == "sso" %} class="active"{% endif %}>
+      <a href="#sso" data-toggle="tab">{% trans "Single Sign-On" %}</a>
+    </li{%>
+  </ul>
 
   <div class="tab-content">
-    <div class="tab-pane active" id="standard">
+    <div class="tab-pane{% if op == "login" %} active{% endif %}" id="login">
       <form class="form-stacked" action="" method="post" autocomplete="off">
-        {{ form|as_crispy_errors }}
-
-        <h3>{% trans "Sign in" %}</h3>
         {% csrf_token %}
 
-        {% for field in form %}
-        {{ field|as_crispy_field }}
+        <input type="hidden" name="op" value="login" />
+
+        {{ login_form|as_crispy_errors }}
+
+        {% for field in login_form %}
+          {{ field|as_crispy_field }}
         {% endfor %}
 
         <fieldset class="form-actions">
@@ -38,11 +42,29 @@
         </fieldset>
       </form>
     </div>
-    <div class="tab-pane" id="sso">
-      <h3>Single sign-on</h3>
+    <div class="tab-pane{% if op == "register" %} active{% endif %}" id="register">
+      <form class="form-stacked" action="" method="post" autocomplete="off">
+        {% csrf_token %}
+
+        <input type="hidden" name="op" value="register" />
+
+        {{ register_form|as_crispy_errors }}
+
+        {% for field in register_form %}
+          {{ field|as_crispy_field }}
+        {% endfor %}
+
+        <fieldset class="form-actions">
+          <button type="submit" class="btn btn-primary">{% trans "Register" %}</button>
+        </fieldset>
+      </form>
+    </div>
+    <div class="tab-pane{% if op == "sso" %} active{% endif %}" id="sso">
       <form class="form-stacked" method="post">
         {% csrf_token %}
+
         <input type="hidden" name="op" value="sso" />
+
         <div class="control-group">
           <div class="controls">
             <label style="display: block">SSO URL</label>
@@ -56,11 +78,4 @@
       </form>
     </div>
   </div>
-
-  <script>
-    $('.sso-toggle').click(function(e) {
-      e.preventDefault();
-      $("body").toggleClass('show-sso');
-    });
-  </script>
 {% endblock %}
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index aa908ced58..01e5a12baf 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -12,7 +12,6 @@ import itertools
 from django.contrib import messages
 from django.contrib.auth import login as login_user, authenticate
 from django.core.context_processors import csrf
-from django.core.urlresolvers import reverse
 from django.db import transaction
 from django.http import HttpResponseRedirect
 from django.views.decorators.cache import never_cache
@@ -20,84 +19,20 @@ from django.views.decorators.csrf import csrf_protect
 from django.utils import timezone
 from sudo.decorators import sudo_required
 
-from sentry import features
 from sentry.models import (
-    AuthProvider, LostPasswordHash, Organization, OrganizationMemberType,
-    Project, Team, UserOption
+    LostPasswordHash, Organization, Project, Team, UserOption
 )
 from sentry.plugins import plugins
 from sentry.web.decorators import login_required
 from sentry.web.forms.accounts import (
     AccountSettingsForm, NotificationSettingsForm, AppearanceSettingsForm,
-    RegistrationForm, RecoverPasswordForm, ChangePasswordRecoverForm,
+    RecoverPasswordForm, ChangePasswordRecoverForm,
     ProjectEmailOptionsForm)
 from sentry.web.helpers import render_to_response
 from sentry.utils.auth import get_auth_providers, get_login_redirect
 from sentry.utils.safe import safe_execute
 
 
-@csrf_protect
-@never_cache
-@transaction.atomic
-def register(request):
-    from django.conf import settings
-
-    if not (features.has('auth:register') or request.session.get('can_register')):
-        return HttpResponseRedirect(reverse('sentry'))
-
-    form = RegistrationForm(request.POST or None,
-                            captcha=bool(request.session.get('needs_captcha')))
-    if form.is_valid():
-        user = form.save()
-
-        # TODO(dcramer): ideally this would be handled by a special view
-        # specifically for organization registration
-        if settings.SENTRY_SINGLE_ORGANIZATION:
-            org = Organization.get_default()
-
-            defaults = {
-                'has_global_access': True,
-                'type': OrganizationMemberType.MEMBER,
-            }
-            try:
-                auth_provider = AuthProvider.objects.get(
-                    organization=org.id,
-                )
-            except AuthProvider.DoesNotExist:
-                pass
-            else:
-                defaults.update({
-                    'has_global_access': auth_provider.default_global_access,
-                    'type': auth_provider.default_role,
-                })
-
-            org.member_set.create(
-                user=user,
-                **defaults
-            )
-
-        # can_register should only allow a single registration
-        request.session.pop('can_register', None)
-
-        # HACK: grab whatever the first backend is and assume it works
-        user.backend = settings.AUTHENTICATION_BACKENDS[0]
-
-        login_user(request, user)
-
-        request.session.pop('needs_captcha', None)
-
-        return login_redirect(request)
-
-    elif request.POST and not request.session.get('needs_captcha'):
-        request.session['needs_captcha'] = 1
-        form = RegistrationForm(request.POST or None, captcha=True)
-        form.errors.pop('captcha', None)
-
-    return render_to_response('sentry/register.html', {
-        'form': form,
-    }, request)
-
-
 @login_required
 def login_redirect(request):
     login_url = get_login_redirect(request)
diff --git a/src/sentry/web/frontend/auth_login.py b/src/sentry/web/frontend/auth_login.py
index 99ea90ef28..87dcc0f8d9 100644
--- a/src/sentry/web/frontend/auth_login.py
+++ b/src/sentry/web/frontend/auth_login.py
@@ -4,12 +4,14 @@ from django.conf import settings
 from django.contrib import messages
 from django.contrib.auth import login
 from django.core.urlresolvers import reverse
+from django.db import transaction
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
+from django.views.decorators.cache import never_cache
 
 from sentry import features
 from sentry.models import AuthProvider, Organization
-from sentry.web.forms.accounts import AuthenticationForm
+from sentry.web.forms.accounts import AuthenticationForm, RegistrationForm
 from sentry.web.frontend.base import BaseView
 from sentry.utils.auth import get_login_redirect
 
@@ -36,16 +38,50 @@ class AuthLoginView(BaseView):
 
         return auth_provider
 
+    def get_login_form(self, request):
+        op = request.POST.get('op')
+        return AuthenticationForm(
+            request, request.POST if op == 'login' else None,
+            captcha=bool(request.session.get('needs_captcha')),
+        )
+
+    def get_register_form(self, request):
+        op = request.POST.get('op')
+        return RegistrationForm(
+            request.POST if op == 'register' else None,
+            captcha=bool(request.session.get('needs_captcha')),
+        )
+
     def handle_basic_auth(self, request):
         if request.user.is_authenticated():
             return self.redirect(get_login_redirect(request))
 
-        form = AuthenticationForm(
-            request, request.POST or None,
-            captcha=bool(request.session.get('needs_captcha')),
-        )
-        if form.is_valid():
-            login(request, form.get_user())
+        can_register = features.has('auth:register') or request.session.get('can_register')
+
+        op = request.POST.get('op')
+        login_form = self.get_login_form(request)
+        if can_register:
+            register_form = self.get_register_form(request)
+        else:
+            register_form = None
+
+        if can_register and register_form.is_valid():
+            user = register_form.save()
+
+            # HACK: grab whatever the first backend is and assume it works
+            user.backend = settings.AUTHENTICATION_BACKENDS[0]
+
+            login(request, user)
+
+            # can_register should only allow a single registration
+            request.session.pop('can_register', None)
+
+            request.session.pop('needs_captcha', None)
+
+            return self.redirect(get_login_redirect(request))
+
+        elif login_form.is_valid():
+            login(request, login_form.get_user())
 
             request.session.pop('needs_captcha', None)
 
@@ -53,25 +89,49 @@ class AuthLoginView(BaseView):
 
         elif request.POST and not request.session.get('needs_captcha'):
             request.session['needs_captcha'] = 1
-            form = AuthenticationForm(request, request.POST or None, captcha=True)
-            form.errors.pop('captcha', None)
+            login_form = self.get_login_form(request)
+            login_form.errors.pop('captcha', None)
+            if can_register:
+                register_form = self.get_register_form(request)
+                register_form.errors.pop('captcha', None)
 
         request.session.set_test_cookie()
 
         context = {
-            'form': form,
-            'CAN_REGISTER': features.has('auth:register') or request.session.get('can_register'),
+            'op': op or 'login',
+            'login_form': login_form,
+            'register_form': register_form,
+            'CAN_REGISTER': can_register,
         }
         return self.respond('sentry/login.html', context)
 
+    def handle_sso(self, request):
+        org = request.POST.get('organization')
+        if not org:
+            return HttpResponseRedirect(request.path)
+
+        auth_provider = self.get_auth_provider(request.POST['organization'])
+        if auth_provider:
+            next_uri = reverse('sentry-auth-organization',
+                               args=[request.POST['organization']])
+        else:
+            next_uri = request.path
+            messages.add_message(request, messages.ERROR, ERR_NO_SSO)
+
+        return HttpResponseRedirect(next_uri)
+
+    @never_cache
+    @transaction.atomic
     def handle(self, request):
+        # Single org mode -- send them to the org-specific handler
         if settings.SENTRY_SINGLE_ORGANIZATION:
             org = Organization.get_default()
             next_uri = reverse('sentry-auth-organization',
                                args=[org.slug])
             return HttpResponseRedirect(next_uri)
 
-        if request.POST.get('op') == 'sso' and request.POST.get('organization'):
+        op = request.POST.get('op')
+        if op == 'sso' and request.POST.get('organization'):
             auth_provider = self.get_auth_provider(request.POST['organization'])
             if auth_provider:
                 next_uri = reverse('sentry-auth-organization',
@@ -81,5 +141,4 @@ class AuthLoginView(BaseView):
                 messages.add_message(request, messages.ERROR, ERR_NO_SSO)
 
             return HttpResponseRedirect(next_uri)
-
         return self.handle_basic_auth(request)
diff --git a/src/sentry/web/frontend/auth_organization_login.py b/src/sentry/web/frontend/auth_organization_login.py
index f8c6ba0b1f..47e0ee54ee 100644
--- a/src/sentry/web/frontend/auth_organization_login.py
+++ b/src/sentry/web/frontend/auth_organization_login.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import, print_function
 
 from django.contrib.auth import login
 from django.core.urlresolvers import reverse
+from django.views.decorators.cache import never_cache
 
 from sentry import features
 from sentry.auth.helper import AuthHelper
@@ -62,6 +63,7 @@ class AuthOrganizationLoginView(BaseView):
 
         return self.respond('sentry/organization-login.html', context)
 
+    @never_cache
     def handle(self, request, organization_slug):
         try:
             organization = Organization.objects.get(
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 43c3d5f7df..563fc575dc 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -140,7 +140,7 @@ urlpatterns += patterns('',
     # Account
     url(r'^login-redirect/$', accounts.login_redirect,
         name='sentry-login-redirect'),
-    url(r'^register/$', accounts.register,
+    url(r'^register/$', AuthLoginView.as_view(),
         name='sentry-register'),
     url(r'^account/sudo/$', 'sudo.views.sudo',
         {'template_name': 'sentry/account/sudo.html'},
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index c649be5a8a..2a89317675 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -12,34 +12,6 @@ from sentry.models import UserOption, LostPasswordHash, User
 from sentry.testutils import TestCase
 
 
-class RegisterTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-register')
-
-    def test_redirects_if_registration_disabled(self):
-        with self.feature('auth:register', False):
-            resp = self.client.get(self.path)
-            assert resp.status_code == 302
-
-    def test_renders_correct_template(self):
-        with self.feature('auth:register'):
-            resp = self.client.get(self.path)
-            assert resp.status_code == 200
-            self.assertTemplateUsed('sentry/register.html')
-
-    def test_with_required_params(self):
-        with self.feature('auth:register'):
-            resp = self.client.post(self.path, {
-                'username': 'test-a-really-long-email-address@example.com',
-                'password': 'foobar',
-            })
-            assert resp.status_code == 302
-            user = User.objects.get(username='test-a-really-long-email-address@example.com')
-            assert user.email == 'test-a-really-long-email-address@example.com'
-            assert user.check_password('foobar')
-
-
 class AppearanceSettingsTest(TestCase):
     @fixture
     def path(self):
diff --git a/tests/sentry/web/frontend/test_auth_login.py b/tests/sentry/web/frontend/test_auth_login.py
index f3fd60a741..1612c713f6 100644
--- a/tests/sentry/web/frontend/test_auth_login.py
+++ b/tests/sentry/web/frontend/test_auth_login.py
@@ -4,8 +4,10 @@ from django.core.urlresolvers import reverse
 from exam import fixture
 
 from sentry.testutils import TestCase
+from sentry.models import User
 
 
+# TODO(dcramer): need tests for SSO behavior and single org behavior
 class AuthLoginTest(TestCase):
     @fixture
     def path(self):
@@ -17,25 +19,44 @@ class AuthLoginTest(TestCase):
         assert resp.status_code == 200
         self.assertTemplateUsed('sentry/login.html')
 
-    def test_invalid_password(self):
+    def test_login_invalid_password(self):
         # load it once for test cookie
         self.client.get(self.path)
 
         resp = self.client.post(self.path, {
             'username': self.user.username,
             'password': 'bizbar',
+            'op': 'login',
         })
         assert resp.status_code == 200
-        assert resp.context['form'].errors['__all__'] == [
+        assert resp.context['login_form'].errors['__all__'] == [
             u'Please enter a correct username and password. Note that both fields may be case-sensitive.'
         ]
 
-    def test_valid_credentials(self):
+    def test_login_valid_credentials(self):
         # load it once for test cookie
         self.client.get(self.path)
 
         resp = self.client.post(self.path, {
             'username': self.user.username,
             'password': 'admin',
+            'op': 'login',
         })
         assert resp.status_code == 302
+
+    def test_registration_disabled(self):
+        with self.feature('auth:register', False):
+            resp = self.client.get(self.path)
+            assert resp.context['register_form'] is None
+
+    def test_registration_valid(self):
+        with self.feature('auth:register'):
+            resp = self.client.post(self.path, {
+                'username': 'test-a-really-long-email-address@example.com',
+                'password': 'foobar',
+                'op': 'register',
+            })
+        assert resp.status_code == 302
+        user = User.objects.get(username='test-a-really-long-email-address@example.com')
+        assert user.email == 'test-a-really-long-email-address@example.com'
+        assert user.check_password('foobar')
