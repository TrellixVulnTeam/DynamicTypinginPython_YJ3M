commit 80c30f6e8536acdb847be56b67621d450e6c9d72
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Nov 15 12:20:02 2017 -0800

    feat(settings): Add react views for org members (#6309)

diff --git a/src/sentry/static/sentry/app/components/confirm.jsx b/src/sentry/static/sentry/app/components/confirm.jsx
index fe14077ae9..17e2f39330 100644
--- a/src/sentry/static/sentry/app/components/confirm.jsx
+++ b/src/sentry/static/sentry/app/components/confirm.jsx
@@ -7,7 +7,7 @@ import Button from './buttons/button';
 class Confirm extends React.PureComponent {
   static propTypes = {
     disabled: PropTypes.bool,
-    message: PropTypes.string.isRequired,
+    message: PropTypes.node.isRequired,
     onConfirm: PropTypes.func.isRequired,
     onConfirming: PropTypes.func,
     onCancel: PropTypes.func,
diff --git a/src/sentry/static/sentry/app/views/settings/organization/members/organizationAccessRequests.jsx b/src/sentry/static/sentry/app/views/settings/organization/members/organizationAccessRequests.jsx
new file mode 100644
index 0000000000..55be648560
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/members/organizationAccessRequests.jsx
@@ -0,0 +1,91 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import {t, tct} from '../../../../locale';
+import Button from '../../../../components/buttons/button';
+import SentryTypes from '../../../../proptypes';
+
+class OrganizationAccessRequests extends React.Component {
+  static propTypes = {
+    requestList: PropTypes.arrayOf(
+      PropTypes.shape({
+        id: PropTypes.string.isRequired,
+        member: SentryTypes.Member,
+        team: SentryTypes.Team,
+      })
+    ),
+    accessRequestBusy: PropTypes.object,
+    onApprove: PropTypes.func.isRequired,
+    onDeny: PropTypes.func.isRequired,
+  };
+
+  static defaultProps = {
+    requestList: [],
+  };
+
+  handleApprove = (id, e) => {
+    e.stopPropagation();
+    this.props.onApprove(id);
+  };
+
+  handleDeny = (id, e) => {
+    e.stopPropagation();
+    this.props.onDeny(id);
+  };
+
+  render() {
+    let {accessRequestBusy, requestList} = this.props;
+
+    if (!requestList || !requestList.length) return null;
+
+    return (
+      <div className="panel panel-default horizontal-scroll">
+        <table className="table" id="access_request_list">
+          <thead>
+            <tr>
+              <th colSpan="2">{t('Pending Access Requests')}</th>
+            </tr>
+          </thead>
+
+          <tbody>
+            {requestList.map(({id, member, team}, i) => {
+              let displayName =
+                member.user &&
+                (member.user.name || member.user.email || member.user.username);
+              return (
+                <tr key={i}>
+                  <td>
+                    {tct('[name] requests access to the [team] team.', {
+                      name: <strong>{displayName}</strong>,
+                      team: <strong>{team.name}</strong>,
+                    })}
+                  </td>
+                  <td className="align-right">
+                    <Button
+                      onClick={e => this.handleApprove(id, e)}
+                      busy={accessRequestBusy.get(id)}
+                      priority="primary"
+                      style={{marginRight: 4}}
+                      size="small"
+                    >
+                      {t('Approve')}
+                    </Button>
+                    <Button
+                      busy={accessRequestBusy.get(id)}
+                      onClick={e => this.handleDeny(id, e)}
+                      size="small"
+                    >
+                      {t('Deny')}
+                    </Button>
+                  </td>
+                </tr>
+              );
+            })}
+          </tbody>
+        </table>
+      </div>
+    );
+  }
+}
+
+export default OrganizationAccessRequests;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/members/organizationMemberRow.jsx b/src/sentry/static/sentry/app/views/settings/organization/members/organizationMemberRow.jsx
new file mode 100644
index 0000000000..ddc0292de3
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/members/organizationMemberRow.jsx
@@ -0,0 +1,226 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {t, tct} from '../../../../locale';
+import Avatar from '../../../../components/avatar';
+import Button from '../../../../components/buttons/button';
+import Confirm from '../../../../components/confirm';
+import Link from '../../../../components/link';
+import LoadingIndicator from '../../../../components/loadingIndicator';
+import SentryTypes from '../../../../proptypes';
+
+export default class OrganizationMemberRow extends React.PureComponent {
+  static propTypes = {
+    // XXX: Spreading this does not work :(
+    member: SentryTypes.Member,
+    onRemove: PropTypes.func.isRequired,
+    onLeave: PropTypes.func.isRequired,
+    onSendInvite: PropTypes.func.isRequired,
+    orgId: PropTypes.string.isRequired,
+    orgName: PropTypes.string.isRequired,
+    memberCanLeave: PropTypes.bool,
+    requireLink: PropTypes.bool,
+    canRemoveMembers: PropTypes.bool,
+    canAddMembers: PropTypes.bool,
+    currentUser: SentryTypes.User,
+    status: PropTypes.oneOf(['', 'loading', 'success', 'error']),
+  };
+
+  constructor(...args) {
+    super(...args);
+    this.state = {busy: false};
+  }
+
+  handleRemove = e => {
+    let {onRemove} = this.props;
+
+    this.setState({busy: true});
+    onRemove(this.props.member, e);
+  };
+
+  handleLeave = e => {
+    let {onLeave} = this.props;
+
+    this.setState({busy: true});
+    onLeave(this.props.member, e);
+  };
+
+  handleSendInvite = e => {
+    let {onSendInvite} = this.props;
+
+    onSendInvite(this.props.member, e);
+  };
+
+  render() {
+    let {
+      member,
+      orgId,
+      orgName,
+      status,
+      requireLink,
+      memberCanLeave,
+      currentUser,
+      canRemoveMembers,
+      canAddMembers,
+    } = this.props;
+
+    let {id, flags, email, name, roleName, pending, user} = member;
+
+    // if member is not the only owner, they can leave
+    let needsSso = !flags['sso:linked'] && requireLink;
+    let isCurrentUser = currentUser.email === email;
+    let showRemoveButton = !isCurrentUser;
+    let showLeaveButton = isCurrentUser;
+    let canRemoveMember = canRemoveMembers && !isCurrentUser;
+    // member has a `user` property if they are registered with sentry
+    // i.e. has accepted an invite to join org
+    let has2fa = user && user.has2fa;
+    let detailsUrl = `/organizations/${orgId}/members/${id}/`;
+    let isInviteSuccessful = status === 'success';
+    let isInviting = status === 'loading';
+
+    return (
+      <tr key={id}>
+        <td className="table-user-info">
+          <Avatar
+            user={
+              user
+                ? user
+                : {
+                    email,
+                  }
+            }
+          />
+          <h5>
+            <Link to={detailsUrl}>{name}</Link>
+          </h5>
+          {email}
+          <br />
+        </td>
+
+        <td className="status">
+          {needsSso || pending ? (
+            <div>
+              <div>
+                {pending ? (
+                  <strong>{t('Invited')}</strong>
+                ) : (
+                  <strong>{t('Missing SSO Link')}</strong>
+                )}
+              </div>
+
+              {isInviting && (
+                <div style={{padding: '4px 0 3px'}}>
+                  <LoadingIndicator mini />
+                </div>
+              )}
+              {isInviteSuccessful && <span>Sent!</span>}
+              {!isInviting &&
+                !isInviteSuccessful &&
+                canAddMembers &&
+                (pending || needsSso) && (
+                  <Button
+                    priority="primary"
+                    size="xsmall"
+                    onClick={this.handleSendInvite}
+                    style={{
+                      padding: '0 4px',
+                      marginTop: 2,
+                    }}
+                  >
+                    {t('Resend invite')}
+                  </Button>
+                )}
+            </div>
+          ) : !has2fa ? (
+            <span
+              style={{color: '#B64236'}}
+              className="icon-exclamation tip"
+              title={t('Two-factor auth not enabled')}
+            />
+          ) : null}
+        </td>
+
+        <td className="squash">{roleName}</td>
+        {showRemoveButton || showLeaveButton ? (
+          <td className="align-right squash">
+            <Button
+              style={{marginRight: 4}}
+              size="small"
+              to={`/organizations/${orgId}/members/${id}/`}
+            >
+              {t('Details')}
+            </Button>
+
+            {showRemoveButton &&
+              canRemoveMember && (
+                <Confirm
+                  message={tct('Are you sure you want to remove [name] from [orgName]?', {
+                    name,
+                    orgName,
+                  })}
+                  onConfirm={this.handleRemove}
+                  onSuccess={tct('Removed [name] from [orgName]', {
+                    name,
+                    orgName,
+                  })}
+                  onError={tct('Error removing [name] from [orgName]', {
+                    name,
+                    orgName,
+                  })}
+                >
+                  <Button priority="danger" size="small" busy={this.state.busy}>
+                    <span className="icon icon-trash" /> {t('Remove')}
+                  </Button>
+                </Confirm>
+              )}
+
+            {showRemoveButton &&
+              !canRemoveMember && (
+                <Button
+                  disabled
+                  size="small"
+                  title={t('You do not have access to remove member')}
+                >
+                  <span className="icon icon-trash" /> {t('Remove')}
+                </Button>
+              )}
+
+            {showLeaveButton &&
+              memberCanLeave && (
+                <Confirm
+                  message={tct('Are you sure you want to leave [orgName]?', {
+                    orgName,
+                  })}
+                  onConfirm={this.handleLeave}
+                  onSuccess={tct('Left [orgName]', {
+                    orgName,
+                  })}
+                  onError={tct('Error leaving [orgName]', {
+                    orgName,
+                  })}
+                >
+                  <Button priority="danger" size="small" busy={this.state.busy}>
+                    <span className="icon icon-exit" /> {t('Leave')}
+                  </Button>
+                </Confirm>
+              )}
+
+            {showLeaveButton &&
+              !memberCanLeave && (
+                <Button
+                  size="small"
+                  disabled
+                  title={t(
+                    'You cannot leave the organization as you are the only owner.'
+                  )}
+                >
+                  <span className="icon icon-exit" /> {t('Leave')}
+                </Button>
+              )}
+          </td>
+        ) : null}
+      </tr>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/organization/members/organizationMembersView.jsx b/src/sentry/static/sentry/app/views/settings/organization/members/organizationMembersView.jsx
new file mode 100644
index 0000000000..1012c86406
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/members/organizationMembersView.jsx
@@ -0,0 +1,249 @@
+import React from 'react';
+
+import {t, tct} from '../../../../locale';
+import Button from '../../../../components/buttons/button';
+import ConfigStore from '../../../../stores/configStore';
+import IndicatorStore from '../../../../stores/indicatorStore';
+import SentryTypes from '../../../../proptypes';
+import SpreadLayout from '../../../../components/spreadLayout';
+import OrganizationSettingsView from '../../../organizationSettingsView';
+import OrganizationMemberRow from './organizationMemberRow';
+import OrganizationAccessRequests from './organizationAccessRequests';
+
+class OrganizationMembersView extends OrganizationSettingsView {
+  static contextTypes = {
+    organization: SentryTypes.Organization,
+  };
+
+  // XXX(billy): careful, setState causes re-render of the entire class hierarchy
+  getDefaultState() {
+    let state = super.getDefaultState();
+    return {
+      ...state,
+      members: [],
+      invited: new Map(),
+      accessRequestBusy: new Map(),
+    };
+  }
+
+  getEndpoints() {
+    return [
+      ['members', `/organizations/${this.props.params.orgId}/members/`],
+      ['authProvider', `/organizations/${this.props.params.orgId}/auth-provider/`],
+      ['requestList', `/organizations/${this.props.params.orgId}/access-requests/`],
+    ];
+  }
+
+  getTitle() {
+    let org = this.context.organization;
+    return `${org.name} Members`;
+  }
+
+  removeMember = id => {
+    let {params} = this.props;
+    let {orgId} = params || {};
+
+    return new Promise((resolve, reject) => {
+      this.api.request(`/organizations/${orgId}/members/${id}/`, {
+        method: 'DELETE',
+        data: {},
+        success: data => {
+          this.setState(state => ({
+            members: state.members.filter(member => member.id !== id),
+          }));
+          resolve(data);
+        },
+        error: err => reject(err),
+      });
+    });
+  };
+
+  approveOrDeny = (isApproved, id) => {
+    let {params} = this.props;
+    let {orgId} = params || {};
+
+    this.setState(state => ({
+      accessRequestBusy: state.accessRequestBusy.set(id, true),
+    }));
+
+    return new Promise((resolve, reject) => {
+      this.api.request(`/organizations/${orgId}/access-requests/${id}/`, {
+        method: 'PUT',
+        data: {isApproved},
+        success: data => {
+          this.setState(state => ({
+            requestList: state.requestList.filter(
+              requestMember => requestMember.id !== id
+            ),
+          }));
+          resolve(data);
+        },
+        error: err => reject(err),
+        complete: () =>
+          this.setState(state => ({
+            accessRequestBusy: state.accessRequestBusy.set(id, false),
+          })),
+      });
+    });
+  };
+
+  handleApprove = id => this.approveOrDeny(true, id);
+
+  handleDeny = id => this.approveOrDeny(false, id);
+
+  handleRemove = ({id, name}, e) => {
+    let {organization} = this.context;
+    let {orgName} = organization;
+
+    this.removeMember(id).then(
+      () =>
+        IndicatorStore.add(
+          tct('Removed [name] from [orgName]', {
+            name,
+            orgName,
+          }),
+          'success'
+        ),
+      () =>
+        IndicatorStore.add(
+          tct('Error removing [name] from [orgName]', {
+            name,
+            orgName,
+          }),
+          'error'
+        )
+    );
+  };
+
+  handleLeave = ({id}, e) => {
+    let {organization} = this.context;
+    let {orgName} = organization;
+
+    this.removeMember(id).then(
+      () =>
+        IndicatorStore.add(
+          tct('You left [orgName]', {
+            orgName,
+          }),
+          'success'
+        ),
+      () =>
+        IndicatorStore.add(
+          tct('Error leaving [orgName]', {
+            orgName,
+          }),
+          'error'
+        )
+    );
+  };
+
+  handleSendInvite = ({id}) => {
+    this.setState(state => ({
+      invited: state.invited.set(id, 'loading'),
+    }));
+
+    this.api.request(`/organizations/${this.props.params.orgId}/members/${id}/`, {
+      method: 'PUT',
+      data: {reinvite: 1},
+      success: data =>
+        this.setState(state => ({
+          invited: state.invited.set(id, 'success'),
+        })),
+      error: () => {
+        this.setState(state => ({
+          invited: state.invited.set(id, null),
+        }));
+        IndicatorStore.add(t('Error sending invite'), 'error');
+      },
+    });
+  };
+
+  renderBody() {
+    let {params} = this.props;
+    let {members, requestList} = this.state;
+    let {organization} = this.context;
+    let {orgId} = params || {};
+    let {name: orgName, access} = organization;
+    let canAddMembers = access.indexOf('org:write') > -1;
+    let canRemove = access.indexOf('member:admin') > -1;
+    let currentUser = ConfigStore.get('user');
+    // Find out if current user is the only owner
+    let isOnlyOwner = !members.find(
+      ({role, email}) => role === 'owner' && email !== currentUser.email
+    );
+    let requireLink = !!this.state.authProvider && this.state.authProvider.require_link;
+
+    return (
+      <div>
+        <SpreadLayout className="page-header">
+          <h3>Members</h3>
+          <Button
+            priority="primary"
+            size="small"
+            className="pull-right"
+            disabled={!canAddMembers}
+            title={
+              !canAddMembers
+                ? t('You do not have enough permission to add new members')
+                : undefined
+            }
+            to={`/organization/${orgId}/members/invite/`}
+          >
+            <span className="icon-plus" /> {t('Invite Member')}
+          </Button>
+        </SpreadLayout>
+
+        <OrganizationAccessRequests
+          onApprove={this.handleApprove}
+          onDeny={this.handleDeny}
+          accessRequestBusy={this.state.accessRequestBusy}
+          requestList={requestList}
+        />
+
+        <div className="panel panel-default horizontal-scroll">
+          <table className="table member-list">
+            <colgroup>
+              <col width="45%" />
+              <col width="15%" />
+              <col width="15%" />
+              <col width="25%" />
+            </colgroup>
+
+            <thead>
+              <tr>
+                <th>{t('Member')}</th>
+                <th>&nbsp;</th>
+                <th className="squash">{t('Role')}</th>
+                <th className="squash">&nbsp;</th>
+              </tr>
+            </thead>
+
+            <tbody>
+              {members.map(member => {
+                return (
+                  <OrganizationMemberRow
+                    key={member.id}
+                    member={member}
+                    status={this.state.invited.get(member.id)}
+                    orgId={orgId}
+                    orgName={orgName}
+                    memberCanLeave={!isOnlyOwner}
+                    currentUser={currentUser}
+                    canRemoveMembers={canRemove}
+                    canAddMembers={canAddMembers}
+                    requireLink={requireLink}
+                    onSendInvite={this.handleSendInvite}
+                    onRemove={this.handleRemove}
+                    onLeave={this.handleLeave}
+                  />
+                );
+              })}
+            </tbody>
+          </table>
+        </div>
+      </div>
+    );
+  }
+}
+
+export default OrganizationMembersView;
diff --git a/src/sentry/static/sentry/less/components/button.less b/src/sentry/static/sentry/less/components/button.less
index b447c7aec7..407a616f5d 100644
--- a/src/sentry/static/sentry/less/components/button.less
+++ b/src/sentry/static/sentry/less/components/button.less
@@ -12,6 +12,12 @@
 
   .button-label {
     padding: 12px 16px;
+    display: flex;
+    align-items: center;
+
+    .icon {
+      margin-right: 2px;
+    }
   }
 
   &:active {
diff --git a/tests/js/setup.js b/tests/js/setup.js
index e4a6681b9a..2838a844e5 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -51,6 +51,66 @@ window.TestStubs = {
       ...params,
     };
   },
+
+  Members: (...params) => [
+    {
+      id: '1',
+      email: '',
+      name: '',
+      roleName: '',
+      pending: false,
+      flags: {
+        'sso:linked': false
+      },
+      user: {
+        id: '1',
+        has2fa: false,
+        name: 'Sentry 1 Name',
+        email: 'sentry1@test.com',
+        username: 'Sentry 1 Username'
+      }
+    },
+    {
+      id: '2',
+      email: '',
+      name: '',
+      roleName: '',
+      pending: false,
+      flags: {
+        'sso:linked': false
+      },
+      user: {
+        id: '2',
+        has2fa: true,
+        name: 'Sentry 2 Name',
+        email: 'sentry2@test.com',
+        username: 'Sentry 2 Username'
+      }
+    },
+    {
+      id: '3',
+      email: '',
+      name: '',
+      roleName: '',
+      pending: false,
+      flags: {
+        'sso:linked': true
+      },
+      user: {
+        id: '3',
+        has2fa: true,
+        name: 'Sentry 3 Name',
+        email: 'sentry3@test.com',
+        username: 'Sentry 3 Username'
+      }
+    },
+    ...params
+  ],
+
+  AuthProvider: (...params) => ({
+    require_link: false
+  }),
+
   Project: (...params) => {
     return {
       id: '2',
diff --git a/tests/js/spec/views/__snapshots__/organizationAccessRequests.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationAccessRequests.spec.jsx.snap
new file mode 100644
index 0000000000..a3ff253d2a
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/organizationAccessRequests.spec.jsx.snap
@@ -0,0 +1,68 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`OrganizationAccessRequests renders empty 1`] = `null`;
+
+exports[`OrganizationAccessRequests renders list 1`] = `
+<div
+  className="panel panel-default horizontal-scroll"
+>
+  <table
+    className="table"
+    id="access_request_list"
+  >
+    <thead>
+      <tr>
+        <th
+          colSpan="2"
+        >
+          Pending Access Requests
+        </th>
+      </tr>
+    </thead>
+    <tbody>
+      <tr>
+        <td>
+          <span>
+            <strong>
+              sentry@test.com
+            </strong>
+            <span>
+               requests access to the 
+            </span>
+            <strong>
+              Team Name
+            </strong>
+            <span>
+               team.
+            </span>
+          </span>
+        </td>
+        <td
+          className="align-right"
+        >
+          <Button
+            disabled={false}
+            onClick={[Function]}
+            priority="primary"
+            size="small"
+            style={
+              Object {
+                "marginRight": 4,
+              }
+            }
+          >
+            Approve
+          </Button>
+          <Button
+            disabled={false}
+            onClick={[Function]}
+            size="small"
+          >
+            Deny
+          </Button>
+        </td>
+      </tr>
+    </tbody>
+  </table>
+</div>
+`;
diff --git a/tests/js/spec/views/__snapshots__/organizationMembersView.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationMembersView.spec.jsx.snap
new file mode 100644
index 0000000000..dab36537a7
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/organizationMembersView.spec.jsx.snap
@@ -0,0 +1,1489 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`OrganizationMembersView No Require Link does not have 2fa warning if user has 2fa 1`] = `
+<OrganizationMembersView
+  canAddMembers={false}
+  canRemoveMembers={false}
+  currentUser={
+    Object {
+      "email": "",
+      "flags": Object {
+        "sso:linked": false,
+      },
+      "id": "2",
+      "name": "",
+      "pending": false,
+      "roleName": "",
+      "user": Object {
+        "email": "sentry2@test.com",
+        "has2fa": true,
+        "id": "2",
+        "name": "Sentry 2 Name",
+        "username": "Sentry 2 Username",
+      },
+    }
+  }
+  memberCanLeave={false}
+  onLeave={[Function]}
+  onRemove={[Function]}
+  onSendInvite={[Function]}
+  orgId="org-slug"
+  orgName="Organization Name"
+  params={
+    Object {
+      "orgId": "org-id",
+    }
+  }
+  requireLink={false}
+  status=""
+>
+  <DocumentTitle
+    title="Organization Name Members"
+  >
+    <div>
+      <SpreadLayout
+        center={true}
+        className="page-header"
+        responsive={false}
+      >
+        <div
+          className="spread-layout page-header center"
+        >
+          <h3>
+            Members
+          </h3>
+          <Button
+            className="pull-right"
+            disabled={false}
+            priority="primary"
+            size="small"
+            to="/organization/org-id/members/invite/"
+          >
+            <Link
+              className="pull-right button button-primary button-sm"
+              disabled={false}
+              onClick={[Function]}
+              onlyActiveOnIndex={false}
+              role="button"
+              style={Object {}}
+              to="/organization/org-id/members/invite/"
+            >
+              <a
+                className="pull-right button button-primary button-sm"
+                disabled={false}
+                onClick={[Function]}
+                role="button"
+                style={Object {}}
+              >
+                <FlowLayout
+                  truncate={false}
+                >
+                  <div
+                    className="flow-layout"
+                  >
+                    <span
+                      className="button-label"
+                    >
+                      <span
+                        className="icon-plus"
+                      />
+                       
+                      Invite Member
+                    </span>
+                  </div>
+                </FlowLayout>
+              </a>
+            </Link>
+          </Button>
+        </div>
+      </SpreadLayout>
+      <OrganizationAccessRequests
+        accessRequestBusy={Array []}
+        onApprove={[Function]}
+        onDeny={[Function]}
+        requestList={Array []}
+      />
+      <div
+        className="panel panel-default horizontal-scroll"
+      >
+        <table
+          className="table member-list"
+        >
+          <colgroup>
+            <col
+              width="45%"
+            />
+            <col
+              width="15%"
+            />
+            <col
+              width="15%"
+            />
+            <col
+              width="25%"
+            />
+          </colgroup>
+          <thead>
+            <tr>
+              <th>
+                Member
+              </th>
+              <th>
+                 
+              </th>
+              <th
+                className="squash"
+              >
+                Role
+              </th>
+              <th
+                className="squash"
+              >
+                 
+              </th>
+            </tr>
+          </thead>
+          <tbody>
+            <OrganizationMemberRow
+              canAddMembers={true}
+              canRemoveMembers={false}
+              currentUser={
+                Object {
+                  "email": "",
+                  "flags": Object {
+                    "sso:linked": false,
+                  },
+                  "id": "2",
+                  "name": "",
+                  "pending": false,
+                  "roleName": "",
+                  "user": Object {
+                    "email": "sentry2@test.com",
+                    "has2fa": true,
+                    "id": "2",
+                    "name": "Sentry 2 Name",
+                    "username": "Sentry 2 Username",
+                  },
+                }
+              }
+              member={
+                Object {
+                  "email": "",
+                  "flags": Object {
+                    "sso:linked": false,
+                  },
+                  "id": "1",
+                  "name": "",
+                  "pending": false,
+                  "roleName": "",
+                  "user": Object {
+                    "email": "sentry1@test.com",
+                    "has2fa": false,
+                    "id": "1",
+                    "name": "Sentry 1 Name",
+                    "username": "Sentry 1 Username",
+                  },
+                }
+              }
+              memberCanLeave={false}
+              onLeave={[Function]}
+              onRemove={[Function]}
+              onSendInvite={[Function]}
+              orgId="org-id"
+              orgName="Organization Name"
+              requireLink={false}
+            >
+              <tr>
+                <td
+                  className="table-user-info"
+                >
+                  <Avatar
+                    className="avatar"
+                    gravatar={true}
+                    size={64}
+                    user={
+                      Object {
+                        "email": "sentry1@test.com",
+                        "has2fa": false,
+                        "id": "1",
+                        "name": "Sentry 1 Name",
+                        "username": "Sentry 1 Username",
+                      }
+                    }
+                  >
+                    <span
+                      className="avatar"
+                    >
+                      <img
+                        onError={[Function]}
+                        onLoad={[Function]}
+                        src="undefined/avatar/c68ca8af553301ae11c5607b8bb672b4?s=64&d=blank"
+                      />
+                    </span>
+                  </Avatar>
+                  <h5>
+                    <Link
+                      to="/organizations/org-id/members/1/"
+                    >
+                      <a
+                        href="/organizations/org-id/members/1/"
+                      />
+                    </Link>
+                  </h5>
+                  <br />
+                </td>
+                <td
+                  className="status"
+                >
+                  <span
+                    className="icon-exclamation tip"
+                    style={
+                      Object {
+                        "color": "#B64236",
+                      }
+                    }
+                    title="Two-factor auth not enabled"
+                  />
+                </td>
+                <td
+                  className="squash"
+                />
+                <td
+                  className="align-right squash"
+                >
+                  <Button
+                    disabled={false}
+                    size="small"
+                    style={
+                      Object {
+                        "marginRight": 4,
+                      }
+                    }
+                    to="/organizations/org-id/members/1/"
+                  >
+                    <Link
+                      className="button button-default button-sm"
+                      disabled={false}
+                      onClick={[Function]}
+                      onlyActiveOnIndex={false}
+                      role="button"
+                      style={
+                        Object {
+                          "marginRight": 4,
+                        }
+                      }
+                      to="/organizations/org-id/members/1/"
+                    >
+                      <a
+                        className="button button-default button-sm"
+                        disabled={false}
+                        onClick={[Function]}
+                        role="button"
+                        style={
+                          Object {
+                            "marginRight": 4,
+                          }
+                        }
+                      >
+                        <FlowLayout
+                          truncate={false}
+                        >
+                          <div
+                            className="flow-layout"
+                          >
+                            <span
+                              className="button-label"
+                            >
+                              Details
+                            </span>
+                          </div>
+                        </FlowLayout>
+                      </a>
+                    </Link>
+                  </Button>
+                  <Button
+                    disabled={true}
+                    size="small"
+                    title="You cannot leave the organization as you are the only owner."
+                  >
+                    <button
+                      className="button tip button-default button-sm button-disabled"
+                      disabled={true}
+                      onClick={[Function]}
+                      role="button"
+                    >
+                      <FlowLayout
+                        truncate={false}
+                      >
+                        <div
+                          className="flow-layout"
+                        >
+                          <span
+                            className="button-label"
+                          >
+                            <span
+                              className="icon icon-exit"
+                            />
+                             
+                            Leave
+                          </span>
+                        </div>
+                      </FlowLayout>
+                    </button>
+                  </Button>
+                </td>
+              </tr>
+            </OrganizationMemberRow>
+            <OrganizationMemberRow
+              canAddMembers={true}
+              canRemoveMembers={false}
+              currentUser={
+                Object {
+                  "email": "",
+                  "flags": Object {
+                    "sso:linked": false,
+                  },
+                  "id": "2",
+                  "name": "",
+                  "pending": false,
+                  "roleName": "",
+                  "user": Object {
+                    "email": "sentry2@test.com",
+                    "has2fa": true,
+                    "id": "2",
+                    "name": "Sentry 2 Name",
+                    "username": "Sentry 2 Username",
+                  },
+                }
+              }
+              member={
+                Object {
+                  "email": "",
+                  "flags": Object {
+                    "sso:linked": false,
+                  },
+                  "id": "2",
+                  "name": "",
+                  "pending": false,
+                  "roleName": "",
+                  "user": Object {
+                    "email": "sentry2@test.com",
+                    "has2fa": true,
+                    "id": "2",
+                    "name": "Sentry 2 Name",
+                    "username": "Sentry 2 Username",
+                  },
+                }
+              }
+              memberCanLeave={false}
+              onLeave={[Function]}
+              onRemove={[Function]}
+              onSendInvite={[Function]}
+              orgId="org-id"
+              orgName="Organization Name"
+              requireLink={false}
+            >
+              <tr>
+                <td
+                  className="table-user-info"
+                >
+                  <Avatar
+                    className="avatar"
+                    gravatar={true}
+                    size={64}
+                    user={
+                      Object {
+                        "email": "sentry2@test.com",
+                        "has2fa": true,
+                        "id": "2",
+                        "name": "Sentry 2 Name",
+                        "username": "Sentry 2 Username",
+                      }
+                    }
+                  >
+                    <span
+                      className="avatar"
+                    >
+                      <img
+                        onError={[Function]}
+                        onLoad={[Function]}
+                        src="undefined/avatar/4eca4e68b0a900e542fdf17e57d04dcd?s=64&d=blank"
+                      />
+                    </span>
+                  </Avatar>
+                  <h5>
+                    <Link
+                      to="/organizations/org-id/members/2/"
+                    >
+                      <a
+                        href="/organizations/org-id/members/2/"
+                      />
+                    </Link>
+                  </h5>
+                  <br />
+                </td>
+                <td
+                  className="status"
+                />
+                <td
+                  className="squash"
+                />
+                <td
+                  className="align-right squash"
+                >
+                  <Button
+                    disabled={false}
+                    size="small"
+                    style={
+                      Object {
+                        "marginRight": 4,
+                      }
+                    }
+                    to="/organizations/org-id/members/2/"
+                  >
+                    <Link
+                      className="button button-default button-sm"
+                      disabled={false}
+                      onClick={[Function]}
+                      onlyActiveOnIndex={false}
+                      role="button"
+                      style={
+                        Object {
+                          "marginRight": 4,
+                        }
+                      }
+                      to="/organizations/org-id/members/2/"
+                    >
+                      <a
+                        className="button button-default button-sm"
+                        disabled={false}
+                        onClick={[Function]}
+                        role="button"
+                        style={
+                          Object {
+                            "marginRight": 4,
+                          }
+                        }
+                      >
+                        <FlowLayout
+                          truncate={false}
+                        >
+                          <div
+                            className="flow-layout"
+                          >
+                            <span
+                              className="button-label"
+                            >
+                              Details
+                            </span>
+                          </div>
+                        </FlowLayout>
+                      </a>
+                    </Link>
+                  </Button>
+                  <Button
+                    disabled={true}
+                    size="small"
+                    title="You cannot leave the organization as you are the only owner."
+                  >
+                    <button
+                      className="button tip button-default button-sm button-disabled"
+                      disabled={true}
+                      onClick={[Function]}
+                      role="button"
+                    >
+                      <FlowLayout
+                        truncate={false}
+                      >
+                        <div
+                          className="flow-layout"
+                        >
+                          <span
+                            className="button-label"
+                          >
+                            <span
+                              className="icon icon-exit"
+                            />
+                             
+                            Leave
+                          </span>
+                        </div>
+                      </FlowLayout>
+                    </button>
+                  </Button>
+                </td>
+              </tr>
+            </OrganizationMemberRow>
+            <OrganizationMemberRow
+              canAddMembers={true}
+              canRemoveMembers={false}
+              currentUser={
+                Object {
+                  "email": "",
+                  "flags": Object {
+                    "sso:linked": false,
+                  },
+                  "id": "2",
+                  "name": "",
+                  "pending": false,
+                  "roleName": "",
+                  "user": Object {
+                    "email": "sentry2@test.com",
+                    "has2fa": true,
+                    "id": "2",
+                    "name": "Sentry 2 Name",
+                    "username": "Sentry 2 Username",
+                  },
+                }
+              }
+              member={
+                Object {
+                  "email": "",
+                  "flags": Object {
+                    "sso:linked": true,
+                  },
+                  "id": "3",
+                  "name": "",
+                  "pending": false,
+                  "roleName": "",
+                  "user": Object {
+                    "email": "sentry3@test.com",
+                    "has2fa": true,
+                    "id": "3",
+                    "name": "Sentry 3 Name",
+                    "username": "Sentry 3 Username",
+                  },
+                }
+              }
+              memberCanLeave={false}
+              onLeave={[Function]}
+              onRemove={[Function]}
+              onSendInvite={[Function]}
+              orgId="org-id"
+              orgName="Organization Name"
+              requireLink={false}
+            >
+              <tr>
+                <td
+                  className="table-user-info"
+                >
+                  <Avatar
+                    className="avatar"
+                    gravatar={true}
+                    size={64}
+                    user={
+                      Object {
+                        "email": "sentry3@test.com",
+                        "has2fa": true,
+                        "id": "3",
+                        "name": "Sentry 3 Name",
+                        "username": "Sentry 3 Username",
+                      }
+                    }
+                  >
+                    <span
+                      className="avatar"
+                    >
+                      <img
+                        onError={[Function]}
+                        onLoad={[Function]}
+                        src="undefined/avatar/40d78e2a4587a53a171944ffe71ee3d4?s=64&d=blank"
+                      />
+                    </span>
+                  </Avatar>
+                  <h5>
+                    <Link
+                      to="/organizations/org-id/members/3/"
+                    >
+                      <a
+                        href="/organizations/org-id/members/3/"
+                      />
+                    </Link>
+                  </h5>
+                  <br />
+                </td>
+                <td
+                  className="status"
+                />
+                <td
+                  className="squash"
+                />
+                <td
+                  className="align-right squash"
+                >
+                  <Button
+                    disabled={false}
+                    size="small"
+                    style={
+                      Object {
+                        "marginRight": 4,
+                      }
+                    }
+                    to="/organizations/org-id/members/3/"
+                  >
+                    <Link
+                      className="button button-default button-sm"
+                      disabled={false}
+                      onClick={[Function]}
+                      onlyActiveOnIndex={false}
+                      role="button"
+                      style={
+                        Object {
+                          "marginRight": 4,
+                        }
+                      }
+                      to="/organizations/org-id/members/3/"
+                    >
+                      <a
+                        className="button button-default button-sm"
+                        disabled={false}
+                        onClick={[Function]}
+                        role="button"
+                        style={
+                          Object {
+                            "marginRight": 4,
+                          }
+                        }
+                      >
+                        <FlowLayout
+                          truncate={false}
+                        >
+                          <div
+                            className="flow-layout"
+                          >
+                            <span
+                              className="button-label"
+                            >
+                              Details
+                            </span>
+                          </div>
+                        </FlowLayout>
+                      </a>
+                    </Link>
+                  </Button>
+                  <Button
+                    disabled={true}
+                    size="small"
+                    title="You cannot leave the organization as you are the only owner."
+                  >
+                    <button
+                      className="button tip button-default button-sm button-disabled"
+                      disabled={true}
+                      onClick={[Function]}
+                      role="button"
+                    >
+                      <FlowLayout
+                        truncate={false}
+                      >
+                        <div
+                          className="flow-layout"
+                        >
+                          <span
+                            className="button-label"
+                          >
+                            <span
+                              className="icon icon-exit"
+                            />
+                             
+                            Leave
+                          </span>
+                        </div>
+                      </FlowLayout>
+                    </button>
+                  </Button>
+                </td>
+              </tr>
+            </OrganizationMemberRow>
+          </tbody>
+        </table>
+      </div>
+    </div>
+  </DocumentTitle>
+</OrganizationMembersView>
+`;
+
+exports[`OrganizationMembersView Require Link does not have 2fa warning if user has 2fa 1`] = `
+<OrganizationMembersView
+  canAddMembers={false}
+  canRemoveMembers={false}
+  currentUser={
+    Object {
+      "email": "",
+      "flags": Object {
+        "sso:linked": false,
+      },
+      "id": "2",
+      "name": "",
+      "pending": false,
+      "roleName": "",
+      "user": Object {
+        "email": "sentry2@test.com",
+        "has2fa": true,
+        "id": "2",
+        "name": "Sentry 2 Name",
+        "username": "Sentry 2 Username",
+      },
+    }
+  }
+  memberCanLeave={false}
+  onLeave={[Function]}
+  onRemove={[Function]}
+  onSendInvite={[Function]}
+  orgId="org-slug"
+  orgName="Organization Name"
+  params={
+    Object {
+      "orgId": "org-id",
+    }
+  }
+  requireLink={false}
+  status=""
+>
+  <DocumentTitle
+    title="Organization Name Members"
+  >
+    <div>
+      <SpreadLayout
+        center={true}
+        className="page-header"
+        responsive={false}
+      >
+        <div
+          className="spread-layout page-header center"
+        >
+          <h3>
+            Members
+          </h3>
+          <Button
+            className="pull-right"
+            disabled={false}
+            priority="primary"
+            size="small"
+            to="/organization/org-id/members/invite/"
+          >
+            <Link
+              className="pull-right button button-primary button-sm"
+              disabled={false}
+              onClick={[Function]}
+              onlyActiveOnIndex={false}
+              role="button"
+              style={Object {}}
+              to="/organization/org-id/members/invite/"
+            >
+              <a
+                className="pull-right button button-primary button-sm"
+                disabled={false}
+                onClick={[Function]}
+                role="button"
+                style={Object {}}
+              >
+                <FlowLayout
+                  truncate={false}
+                >
+                  <div
+                    className="flow-layout"
+                  >
+                    <span
+                      className="button-label"
+                    >
+                      <span
+                        className="icon-plus"
+                      />
+                       
+                      Invite Member
+                    </span>
+                  </div>
+                </FlowLayout>
+              </a>
+            </Link>
+          </Button>
+        </div>
+      </SpreadLayout>
+      <OrganizationAccessRequests
+        accessRequestBusy={Array []}
+        onApprove={[Function]}
+        onDeny={[Function]}
+        requestList={Array []}
+      />
+      <div
+        className="panel panel-default horizontal-scroll"
+      >
+        <table
+          className="table member-list"
+        >
+          <colgroup>
+            <col
+              width="45%"
+            />
+            <col
+              width="15%"
+            />
+            <col
+              width="15%"
+            />
+            <col
+              width="25%"
+            />
+          </colgroup>
+          <thead>
+            <tr>
+              <th>
+                Member
+              </th>
+              <th>
+                 
+              </th>
+              <th
+                className="squash"
+              >
+                Role
+              </th>
+              <th
+                className="squash"
+              >
+                 
+              </th>
+            </tr>
+          </thead>
+          <tbody>
+            <OrganizationMemberRow
+              canAddMembers={true}
+              canRemoveMembers={false}
+              currentUser={
+                Object {
+                  "email": "",
+                  "flags": Object {
+                    "sso:linked": false,
+                  },
+                  "id": "2",
+                  "name": "",
+                  "pending": false,
+                  "roleName": "",
+                  "user": Object {
+                    "email": "sentry2@test.com",
+                    "has2fa": true,
+                    "id": "2",
+                    "name": "Sentry 2 Name",
+                    "username": "Sentry 2 Username",
+                  },
+                }
+              }
+              member={
+                Object {
+                  "email": "",
+                  "flags": Object {
+                    "sso:linked": false,
+                  },
+                  "id": "1",
+                  "name": "",
+                  "pending": false,
+                  "roleName": "",
+                  "user": Object {
+                    "email": "sentry1@test.com",
+                    "has2fa": false,
+                    "id": "1",
+                    "name": "Sentry 1 Name",
+                    "username": "Sentry 1 Username",
+                  },
+                }
+              }
+              memberCanLeave={false}
+              onLeave={[Function]}
+              onRemove={[Function]}
+              onSendInvite={[Function]}
+              orgId="org-id"
+              orgName="Organization Name"
+              requireLink={true}
+            >
+              <tr>
+                <td
+                  className="table-user-info"
+                >
+                  <Avatar
+                    className="avatar"
+                    gravatar={true}
+                    size={64}
+                    user={
+                      Object {
+                        "email": "sentry1@test.com",
+                        "has2fa": false,
+                        "id": "1",
+                        "name": "Sentry 1 Name",
+                        "username": "Sentry 1 Username",
+                      }
+                    }
+                  >
+                    <span
+                      className="avatar"
+                    >
+                      <img
+                        onError={[Function]}
+                        onLoad={[Function]}
+                        src="undefined/avatar/c68ca8af553301ae11c5607b8bb672b4?s=64&d=blank"
+                      />
+                    </span>
+                  </Avatar>
+                  <h5>
+                    <Link
+                      to="/organizations/org-id/members/1/"
+                    >
+                      <a
+                        href="/organizations/org-id/members/1/"
+                      />
+                    </Link>
+                  </h5>
+                  <br />
+                </td>
+                <td
+                  className="status"
+                >
+                  <div>
+                    <div>
+                      <strong>
+                        Missing SSO Link
+                      </strong>
+                    </div>
+                    <Button
+                      disabled={false}
+                      onClick={[Function]}
+                      priority="primary"
+                      size="xsmall"
+                      style={
+                        Object {
+                          "marginTop": 2,
+                          "padding": "0 4px",
+                        }
+                      }
+                    >
+                      <button
+                        className="button button-primary button-xs"
+                        disabled={false}
+                        onClick={[Function]}
+                        role="button"
+                        style={
+                          Object {
+                            "marginTop": 2,
+                            "padding": "0 4px",
+                          }
+                        }
+                      >
+                        <FlowLayout
+                          truncate={false}
+                        >
+                          <div
+                            className="flow-layout"
+                          >
+                            <span
+                              className="button-label"
+                            >
+                              Resend invite
+                            </span>
+                          </div>
+                        </FlowLayout>
+                      </button>
+                    </Button>
+                  </div>
+                </td>
+                <td
+                  className="squash"
+                />
+                <td
+                  className="align-right squash"
+                >
+                  <Button
+                    disabled={false}
+                    size="small"
+                    style={
+                      Object {
+                        "marginRight": 4,
+                      }
+                    }
+                    to="/organizations/org-id/members/1/"
+                  >
+                    <Link
+                      className="button button-default button-sm"
+                      disabled={false}
+                      onClick={[Function]}
+                      onlyActiveOnIndex={false}
+                      role="button"
+                      style={
+                        Object {
+                          "marginRight": 4,
+                        }
+                      }
+                      to="/organizations/org-id/members/1/"
+                    >
+                      <a
+                        className="button button-default button-sm"
+                        disabled={false}
+                        onClick={[Function]}
+                        role="button"
+                        style={
+                          Object {
+                            "marginRight": 4,
+                          }
+                        }
+                      >
+                        <FlowLayout
+                          truncate={false}
+                        >
+                          <div
+                            className="flow-layout"
+                          >
+                            <span
+                              className="button-label"
+                            >
+                              Details
+                            </span>
+                          </div>
+                        </FlowLayout>
+                      </a>
+                    </Link>
+                  </Button>
+                  <Button
+                    disabled={true}
+                    size="small"
+                    title="You cannot leave the organization as you are the only owner."
+                  >
+                    <button
+                      className="button tip button-default button-sm button-disabled"
+                      disabled={true}
+                      onClick={[Function]}
+                      role="button"
+                    >
+                      <FlowLayout
+                        truncate={false}
+                      >
+                        <div
+                          className="flow-layout"
+                        >
+                          <span
+                            className="button-label"
+                          >
+                            <span
+                              className="icon icon-exit"
+                            />
+                             
+                            Leave
+                          </span>
+                        </div>
+                      </FlowLayout>
+                    </button>
+                  </Button>
+                </td>
+              </tr>
+            </OrganizationMemberRow>
+            <OrganizationMemberRow
+              canAddMembers={true}
+              canRemoveMembers={false}
+              currentUser={
+                Object {
+                  "email": "",
+                  "flags": Object {
+                    "sso:linked": false,
+                  },
+                  "id": "2",
+                  "name": "",
+                  "pending": false,
+                  "roleName": "",
+                  "user": Object {
+                    "email": "sentry2@test.com",
+                    "has2fa": true,
+                    "id": "2",
+                    "name": "Sentry 2 Name",
+                    "username": "Sentry 2 Username",
+                  },
+                }
+              }
+              member={
+                Object {
+                  "email": "",
+                  "flags": Object {
+                    "sso:linked": false,
+                  },
+                  "id": "2",
+                  "name": "",
+                  "pending": false,
+                  "roleName": "",
+                  "user": Object {
+                    "email": "sentry2@test.com",
+                    "has2fa": true,
+                    "id": "2",
+                    "name": "Sentry 2 Name",
+                    "username": "Sentry 2 Username",
+                  },
+                }
+              }
+              memberCanLeave={false}
+              onLeave={[Function]}
+              onRemove={[Function]}
+              onSendInvite={[Function]}
+              orgId="org-id"
+              orgName="Organization Name"
+              requireLink={true}
+            >
+              <tr>
+                <td
+                  className="table-user-info"
+                >
+                  <Avatar
+                    className="avatar"
+                    gravatar={true}
+                    size={64}
+                    user={
+                      Object {
+                        "email": "sentry2@test.com",
+                        "has2fa": true,
+                        "id": "2",
+                        "name": "Sentry 2 Name",
+                        "username": "Sentry 2 Username",
+                      }
+                    }
+                  >
+                    <span
+                      className="avatar"
+                    >
+                      <img
+                        onError={[Function]}
+                        onLoad={[Function]}
+                        src="undefined/avatar/4eca4e68b0a900e542fdf17e57d04dcd?s=64&d=blank"
+                      />
+                    </span>
+                  </Avatar>
+                  <h5>
+                    <Link
+                      to="/organizations/org-id/members/2/"
+                    >
+                      <a
+                        href="/organizations/org-id/members/2/"
+                      />
+                    </Link>
+                  </h5>
+                  <br />
+                </td>
+                <td
+                  className="status"
+                >
+                  <div>
+                    <div>
+                      <strong>
+                        Missing SSO Link
+                      </strong>
+                    </div>
+                    <Button
+                      disabled={false}
+                      onClick={[Function]}
+                      priority="primary"
+                      size="xsmall"
+                      style={
+                        Object {
+                          "marginTop": 2,
+                          "padding": "0 4px",
+                        }
+                      }
+                    >
+                      <button
+                        className="button button-primary button-xs"
+                        disabled={false}
+                        onClick={[Function]}
+                        role="button"
+                        style={
+                          Object {
+                            "marginTop": 2,
+                            "padding": "0 4px",
+                          }
+                        }
+                      >
+                        <FlowLayout
+                          truncate={false}
+                        >
+                          <div
+                            className="flow-layout"
+                          >
+                            <span
+                              className="button-label"
+                            >
+                              Resend invite
+                            </span>
+                          </div>
+                        </FlowLayout>
+                      </button>
+                    </Button>
+                  </div>
+                </td>
+                <td
+                  className="squash"
+                />
+                <td
+                  className="align-right squash"
+                >
+                  <Button
+                    disabled={false}
+                    size="small"
+                    style={
+                      Object {
+                        "marginRight": 4,
+                      }
+                    }
+                    to="/organizations/org-id/members/2/"
+                  >
+                    <Link
+                      className="button button-default button-sm"
+                      disabled={false}
+                      onClick={[Function]}
+                      onlyActiveOnIndex={false}
+                      role="button"
+                      style={
+                        Object {
+                          "marginRight": 4,
+                        }
+                      }
+                      to="/organizations/org-id/members/2/"
+                    >
+                      <a
+                        className="button button-default button-sm"
+                        disabled={false}
+                        onClick={[Function]}
+                        role="button"
+                        style={
+                          Object {
+                            "marginRight": 4,
+                          }
+                        }
+                      >
+                        <FlowLayout
+                          truncate={false}
+                        >
+                          <div
+                            className="flow-layout"
+                          >
+                            <span
+                              className="button-label"
+                            >
+                              Details
+                            </span>
+                          </div>
+                        </FlowLayout>
+                      </a>
+                    </Link>
+                  </Button>
+                  <Button
+                    disabled={true}
+                    size="small"
+                    title="You cannot leave the organization as you are the only owner."
+                  >
+                    <button
+                      className="button tip button-default button-sm button-disabled"
+                      disabled={true}
+                      onClick={[Function]}
+                      role="button"
+                    >
+                      <FlowLayout
+                        truncate={false}
+                      >
+                        <div
+                          className="flow-layout"
+                        >
+                          <span
+                            className="button-label"
+                          >
+                            <span
+                              className="icon icon-exit"
+                            />
+                             
+                            Leave
+                          </span>
+                        </div>
+                      </FlowLayout>
+                    </button>
+                  </Button>
+                </td>
+              </tr>
+            </OrganizationMemberRow>
+            <OrganizationMemberRow
+              canAddMembers={true}
+              canRemoveMembers={false}
+              currentUser={
+                Object {
+                  "email": "",
+                  "flags": Object {
+                    "sso:linked": false,
+                  },
+                  "id": "2",
+                  "name": "",
+                  "pending": false,
+                  "roleName": "",
+                  "user": Object {
+                    "email": "sentry2@test.com",
+                    "has2fa": true,
+                    "id": "2",
+                    "name": "Sentry 2 Name",
+                    "username": "Sentry 2 Username",
+                  },
+                }
+              }
+              member={
+                Object {
+                  "email": "",
+                  "flags": Object {
+                    "sso:linked": true,
+                  },
+                  "id": "3",
+                  "name": "",
+                  "pending": false,
+                  "roleName": "",
+                  "user": Object {
+                    "email": "sentry3@test.com",
+                    "has2fa": true,
+                    "id": "3",
+                    "name": "Sentry 3 Name",
+                    "username": "Sentry 3 Username",
+                  },
+                }
+              }
+              memberCanLeave={false}
+              onLeave={[Function]}
+              onRemove={[Function]}
+              onSendInvite={[Function]}
+              orgId="org-id"
+              orgName="Organization Name"
+              requireLink={true}
+            >
+              <tr>
+                <td
+                  className="table-user-info"
+                >
+                  <Avatar
+                    className="avatar"
+                    gravatar={true}
+                    size={64}
+                    user={
+                      Object {
+                        "email": "sentry3@test.com",
+                        "has2fa": true,
+                        "id": "3",
+                        "name": "Sentry 3 Name",
+                        "username": "Sentry 3 Username",
+                      }
+                    }
+                  >
+                    <span
+                      className="avatar"
+                    >
+                      <img
+                        onError={[Function]}
+                        onLoad={[Function]}
+                        src="undefined/avatar/40d78e2a4587a53a171944ffe71ee3d4?s=64&d=blank"
+                      />
+                    </span>
+                  </Avatar>
+                  <h5>
+                    <Link
+                      to="/organizations/org-id/members/3/"
+                    >
+                      <a
+                        href="/organizations/org-id/members/3/"
+                      />
+                    </Link>
+                  </h5>
+                  <br />
+                </td>
+                <td
+                  className="status"
+                />
+                <td
+                  className="squash"
+                />
+                <td
+                  className="align-right squash"
+                >
+                  <Button
+                    disabled={false}
+                    size="small"
+                    style={
+                      Object {
+                        "marginRight": 4,
+                      }
+                    }
+                    to="/organizations/org-id/members/3/"
+                  >
+                    <Link
+                      className="button button-default button-sm"
+                      disabled={false}
+                      onClick={[Function]}
+                      onlyActiveOnIndex={false}
+                      role="button"
+                      style={
+                        Object {
+                          "marginRight": 4,
+                        }
+                      }
+                      to="/organizations/org-id/members/3/"
+                    >
+                      <a
+                        className="button button-default button-sm"
+                        disabled={false}
+                        onClick={[Function]}
+                        role="button"
+                        style={
+                          Object {
+                            "marginRight": 4,
+                          }
+                        }
+                      >
+                        <FlowLayout
+                          truncate={false}
+                        >
+                          <div
+                            className="flow-layout"
+                          >
+                            <span
+                              className="button-label"
+                            >
+                              Details
+                            </span>
+                          </div>
+                        </FlowLayout>
+                      </a>
+                    </Link>
+                  </Button>
+                  <Button
+                    disabled={true}
+                    size="small"
+                    title="You cannot leave the organization as you are the only owner."
+                  >
+                    <button
+                      className="button tip button-default button-sm button-disabled"
+                      disabled={true}
+                      onClick={[Function]}
+                      role="button"
+                    >
+                      <FlowLayout
+                        truncate={false}
+                      >
+                        <div
+                          className="flow-layout"
+                        >
+                          <span
+                            className="button-label"
+                          >
+                            <span
+                              className="icon icon-exit"
+                            />
+                             
+                            Leave
+                          </span>
+                        </div>
+                      </FlowLayout>
+                    </button>
+                  </Button>
+                </td>
+              </tr>
+            </OrganizationMemberRow>
+          </tbody>
+        </table>
+      </div>
+    </div>
+  </DocumentTitle>
+</OrganizationMembersView>
+`;
diff --git a/tests/js/spec/views/organizationAccessRequests.spec.jsx b/tests/js/spec/views/organizationAccessRequests.spec.jsx
new file mode 100644
index 0000000000..5772b476be
--- /dev/null
+++ b/tests/js/spec/views/organizationAccessRequests.spec.jsx
@@ -0,0 +1,110 @@
+import React from 'react';
+import {shallow, mount} from 'enzyme';
+
+import OrganizationAccessRequests
+  from 'app/views/settings/organization/members/organizationAccessRequests';
+
+describe('OrganizationAccessRequests', function() {
+  beforeEach(function() {});
+
+  it('renders empty', function() {
+    let wrapper = shallow(
+      <OrganizationAccessRequests
+        params={{apiKey: 1, orgId: 'org-slug'}}
+        onApprove={() => {}}
+        onDeny={() => {}}
+      />
+    );
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('renders list', function() {
+    let wrapper = shallow(
+      <OrganizationAccessRequests
+        params={{apiKey: 1, orgId: 'org-slug'}}
+        accessRequestBusy={new Map()}
+        requestList={[
+          {
+            id: 'id',
+            member: {
+              id: 'memberid',
+              email: '',
+              name: '',
+              roleName: '',
+              user: {
+                id: '',
+                name: 'sentry@test.com'
+              }
+            },
+            team: TestStubs.Team()
+          }
+        ]}
+        onApprove={() => {}}
+        onDeny={() => {}}
+      />
+    );
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('can approve', function() {
+    let mock = jest.fn();
+    let wrapper = mount(
+      <OrganizationAccessRequests
+        params={{apiKey: 1, orgId: 'org-slug'}}
+        accessRequestBusy={new Map()}
+        requestList={[
+          {
+            id: 'id',
+            member: {
+              id: 'memberid',
+              email: '',
+              name: '',
+              roleName: '',
+              user: {
+                id: '',
+                name: 'sentry@test.com'
+              }
+            },
+            team: TestStubs.Team()
+          }
+        ]}
+        onApprove={mock}
+        onDeny={() => {}}
+      />
+    );
+
+    wrapper.find('Button').first().simulate('click');
+    expect(mock).toHaveBeenCalled();
+  });
+
+  it('can deny', function() {
+    let mock = jest.fn();
+    let wrapper = mount(
+      <OrganizationAccessRequests
+        params={{apiKey: 1, orgId: 'org-slug'}}
+        accessRequestBusy={new Map()}
+        requestList={[
+          {
+            id: 'id',
+            member: {
+              id: 'memberid',
+              email: '',
+              name: '',
+              roleName: '',
+              user: {
+                id: '',
+                name: 'sentry@test.com'
+              }
+            },
+            team: TestStubs.Team()
+          }
+        ]}
+        onApprove={() => {}}
+        onDeny={mock}
+      />
+    );
+
+    wrapper.find('Button').last().simulate('click');
+    expect(mock).toHaveBeenCalled();
+  });
+});
diff --git a/tests/js/spec/views/organizationMemberRow.spec.jsx b/tests/js/spec/views/organizationMemberRow.spec.jsx
new file mode 100644
index 0000000000..b365badfe5
--- /dev/null
+++ b/tests/js/spec/views/organizationMemberRow.spec.jsx
@@ -0,0 +1,267 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+
+import OrganizationMemberRow
+  from 'app/views/settings/organization/members/organizationMemberRow';
+
+const findWithText = (wrapper, text) =>
+  wrapper.filterWhere(n => n.prop('children') && n.prop('children').includes(text));
+
+describe('OrganizationMemberRow', function() {
+  let member = {
+    id: '1',
+    email: '',
+    name: '',
+    roleName: '',
+    pending: false,
+    flags: {
+      'sso:linked': false
+    },
+    user: {
+      id: '',
+      has2fa: false,
+      name: 'sentry@test.com'
+    }
+  };
+
+  let currentUser = {
+    id: '2',
+    email: 'currentUser@email.com'
+  };
+
+  let defaultProps = {
+    orgId: 'org-slug',
+    orgName: 'Organization Name',
+    status: '',
+    requireLink: false,
+    memberCanLeave: false,
+    canAddMembers: false,
+    canRemoveMembers: false,
+    member,
+    currentUser,
+    onSendInvite: () => {},
+    onRemove: () => {},
+    onLeave: () => {}
+  };
+
+  beforeEach(function() {});
+
+  it('does not have 2fa warning if user has 2fa', function() {
+    let wrapper = shallow(
+      <OrganizationMemberRow
+        {...defaultProps}
+        member={{
+          ...member,
+          user: {
+            ...member.user,
+            has2fa: true
+          }
+        }}
+      />
+    );
+    expect(wrapper.find('.icon-exclamation.tip')).toHaveLength(0);
+  });
+
+  it('has 2fa warning if user does not have 2fa enabled', function() {
+    let wrapper = shallow(
+      <OrganizationMemberRow
+        {...defaultProps}
+        member={{
+          ...member,
+          user: {
+            ...member.user,
+            has2fa: false
+          }
+        }}
+      />
+    );
+    expect(wrapper.find('.icon-exclamation.tip')).toHaveLength(1);
+  });
+
+  describe('Pending user', function() {
+    let props = {
+      ...defaultProps,
+      member: {
+        ...member,
+        pending: true
+      }
+    };
+
+    it('has "Invited" status, no "Resend Invite"', function() {
+      let wrapper = shallow(
+        <OrganizationMemberRow
+          {...props}
+          member={{
+            ...member,
+            pending: true
+          }}
+        />
+      );
+
+      expect(findWithText(wrapper.find('strong'), 'Invited')).toHaveLength(1);
+
+      expect(findWithText(wrapper.find('Button'), 'Resend invite')).toHaveLength(0);
+    });
+
+    it('has "Resend Invite" button only if `canAddMembers` is true', function() {
+      let wrapper = shallow(<OrganizationMemberRow {...props} canAddMembers={true} />);
+
+      expect(findWithText(wrapper.find('strong'), 'Invited')).toHaveLength(1);
+
+      expect(findWithText(wrapper.find('Button'), 'Resend invite')).toHaveLength(1);
+    });
+
+    it('has the right inviting states', function() {
+      let wrapper = shallow(<OrganizationMemberRow {...props} canAddMembers={true} />);
+
+      expect(findWithText(wrapper.find('Button'), 'Resend invite')).toHaveLength(1);
+
+      wrapper = shallow(
+        <OrganizationMemberRow {...props} canAddMembers={true} status="loading" />
+      );
+
+      // Should have loader
+      expect(wrapper.find('LoadingIndicator')).toHaveLength(1);
+      // No Resend Invite button
+      expect(findWithText(wrapper.find('Button'), 'Resend invite')).toHaveLength(0);
+
+      wrapper = shallow(
+        <OrganizationMemberRow {...props} canAddMembers={true} status="success" />
+      );
+
+      // Should have loader
+      expect(wrapper.find('LoadingIndicator')).toHaveLength(0);
+      // No Resend Invite button
+      expect(findWithText(wrapper.find('Button'), 'Resend invite')).toHaveLength(0);
+      expect(findWithText(wrapper.find('span'), 'Sent!')).toHaveLength(1);
+    });
+  });
+
+  describe('Requires SSO Link', function() {
+    let props = {
+      ...defaultProps,
+      flags: {
+        'sso:link': false
+      },
+      requireLink: true
+    };
+
+    it('shows "Invited" status if user has not registered and not linked', function() {
+      let wrapper = shallow(
+        <OrganizationMemberRow
+          {...props}
+          member={{
+            ...member,
+            pending: true
+          }}
+        />
+      );
+
+      expect(findWithText(wrapper.find('strong'), 'Invited')).toHaveLength(1);
+
+      expect(findWithText(wrapper.find('Button'), 'Resend invite')).toHaveLength(0);
+    });
+
+    it('shows "missing SSO link" message if user is registered and needs link', function() {
+      let wrapper = shallow(
+        <OrganizationMemberRow
+          {...props}
+          member={{
+            ...member
+          }}
+        />
+      );
+
+      expect(findWithText(wrapper.find('strong'), 'Invited')).toHaveLength(0);
+      expect(findWithText(wrapper.find('strong'), 'Missing SSO Link')).toHaveLength(1);
+      expect(findWithText(wrapper.find('Button'), 'Resend invite')).toHaveLength(0);
+    });
+
+    it('has "Resend Invite" button only if `canAddMembers` is true and no link', function() {
+      let wrapper = shallow(
+        <OrganizationMemberRow
+          {...props}
+          canAddMembers={true}
+          member={{
+            ...member
+          }}
+        />
+      );
+
+      expect(findWithText(wrapper.find('Button'), 'Resend invite')).toHaveLength(1);
+    });
+
+    it('has 2fa warning if user is linked does not have 2fa enabled', function() {
+      let wrapper = shallow(
+        <OrganizationMemberRow
+          {...defaultProps}
+          member={{
+            ...member,
+            flags: {
+              'sso:linked': true
+            },
+            user: {
+              ...member.user,
+              has2fa: false
+            }
+          }}
+        />
+      );
+      expect(wrapper.find('.icon-exclamation.tip')).toHaveLength(1);
+    });
+  });
+
+  describe('Is Current User', function() {
+    let props = {
+      ...defaultProps,
+      member: {
+        ...member,
+        email: 'currentUser@email.com'
+      }
+    };
+
+    it('has button to leave organization and no button to remove', function() {
+      let wrapper = shallow(<OrganizationMemberRow {...props} memberCanLeave={true} />);
+
+      expect(findWithText(wrapper.find('Button'), 'Details')).toHaveLength(1);
+      expect(findWithText(wrapper.find('Button'), 'Leave')).toHaveLength(1);
+      expect(findWithText(wrapper.find('Button'), 'Remove')).toHaveLength(0);
+    });
+
+    it('has disabled button to leave organization and no button to remove when member can not leave', function() {
+      let wrapper = shallow(<OrganizationMemberRow {...props} memberCanLeave={false} />);
+      expect(findWithText(wrapper.find('Button'), 'Leave')).toHaveLength(1);
+      expect(findWithText(wrapper.find('Button'), 'Leave').first().prop('disabled')).toBe(
+        true
+      );
+      expect(findWithText(wrapper.find('Button'), 'Remove')).toHaveLength(0);
+    });
+  });
+
+  describe('Not Current User', function() {
+    let props = {
+      ...defaultProps
+    };
+
+    it('does not have Leave button', function() {
+      let wrapper = shallow(<OrganizationMemberRow {...props} memberCanLeave={true} />);
+
+      expect(findWithText(wrapper.find('Button'), 'Leave')).toHaveLength(0);
+    });
+
+    it('has Remove disabled button when `canRemoveMembers` is false', function() {
+      let wrapper = shallow(<OrganizationMemberRow {...props} />);
+
+      expect(findWithText(wrapper.find('Button'), 'Remove')).toHaveLength(1);
+      expect(findWithText(wrapper.find('Button'), 'Remove').prop('disabled')).toBe(true);
+    });
+
+    it('has Remove button when `canRemoveMembers` is true', function() {
+      let wrapper = shallow(<OrganizationMemberRow {...props} canRemoveMembers={true} />);
+
+      let removeButton = findWithText(wrapper.find('Button'), 'Remove');
+      expect(removeButton).toHaveLength(1);
+      expect(removeButton.first().prop('disabled')).toBe(false);
+    });
+  });
+});
diff --git a/tests/js/spec/views/organizationMembersView.spec.jsx b/tests/js/spec/views/organizationMembersView.spec.jsx
new file mode 100644
index 0000000000..1994dc6474
--- /dev/null
+++ b/tests/js/spec/views/organizationMembersView.spec.jsx
@@ -0,0 +1,119 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {Client} from 'app/api';
+import {mount} from 'enzyme';
+import ConfigStore from 'app/stores/configStore';
+import OrganizationMembersView
+  from 'app/views/settings/organization/members/organizationMembersView';
+
+jest.mock('app/api');
+
+describe('OrganizationMembersView', function() {
+  let currentUser = TestStubs.Members()[1];
+  let defaultProps = {
+    orgId: 'org-slug',
+    orgName: 'Organization Name',
+    status: '',
+    requireLink: false,
+    memberCanLeave: false,
+    canAddMembers: false,
+    canRemoveMembers: false,
+    currentUser,
+    onSendInvite: () => {},
+    onRemove: () => {},
+    onLeave: () => {}
+  };
+
+  beforeAll(function() {
+    sinon.stub(ConfigStore, 'get', () => currentUser);
+  });
+
+  afterAll(function() {
+    ConfigStore.get.restore();
+  });
+
+  beforeEach(function() {
+    Client.clearMockResponses();
+    Client.addMockResponse({
+      url: '/organizations/org-id/members/',
+      method: 'GET',
+      body: TestStubs.Members()
+    });
+    Client.addMockResponse({
+      url: '/organizations/org-id/access-requests/',
+      method: 'GET',
+      body: []
+    });
+  });
+
+  describe('Require Link', function() {
+    beforeEach(function() {
+      Client.addMockResponse({
+        url: '/organizations/org-id/auth-provider/',
+        method: 'GET',
+        body: {
+          ...TestStubs.AuthProvider(),
+          require_link: true
+        }
+      });
+    });
+
+    it('does not have 2fa warning if user has 2fa', function() {
+      let wrapper = mount(
+        <OrganizationMembersView
+          {...defaultProps}
+          params={{
+            orgId: 'org-id'
+          }}
+        />,
+        {
+          childContextTypes: {
+            router: PropTypes.object
+          },
+          context: {
+            organization: TestStubs.Organization(),
+            router: TestStubs.router()
+          }
+        }
+      );
+
+      expect(wrapper).toMatchSnapshot();
+    });
+  });
+
+  describe('No Require Link', function() {
+    beforeEach(function() {
+      Client.addMockResponse({
+        url: '/organizations/org-id/auth-provider/',
+        method: 'GET',
+        body: {
+          ...TestStubs.AuthProvider(),
+          require_link: false
+        }
+      });
+    });
+
+    it('does not have 2fa warning if user has 2fa', function() {
+      let wrapper = mount(
+        <OrganizationMembersView
+          {...defaultProps}
+          params={{
+            orgId: 'org-id'
+          }}
+        />,
+        {
+          childContextTypes: {
+            router: PropTypes.object
+          },
+          context: {
+            organization: TestStubs.Organization(),
+            router: TestStubs.router()
+          }
+        }
+      );
+
+      expect(wrapper).toMatchSnapshot();
+    });
+  });
+});
