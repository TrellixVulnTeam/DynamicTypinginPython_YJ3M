commit 0d8b2c0e848a2ed12053640f80cb9d1873f05316
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jun 26 15:54:59 2017 -0700

    ui: improve form abstraction

diff --git a/src/sentry/static/sentry/app/components/forms/apiForm.jsx b/src/sentry/static/sentry/app/components/forms/apiForm.jsx
index 4d4aab1133..f0a9aaccf5 100644
--- a/src/sentry/static/sentry/app/components/forms/apiForm.jsx
+++ b/src/sentry/static/sentry/app/components/forms/apiForm.jsx
@@ -30,9 +30,9 @@ export default class ApiForm extends Form {
       return;
     }
 
-    let {formData} = this.state;
+    let {data} = this.state;
 
-    this.props.onSubmit && this.props.onSubmit(formData);
+    this.props.onSubmit && this.props.onSubmit(data);
     this.setState(
       {
         state: FormState.SAVING
@@ -41,9 +41,9 @@ export default class ApiForm extends Form {
         let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
         this.api.request(this.props.apiEndpoint, {
           method: this.props.apiMethod,
-          data: formData,
-          success: data => {
-            this.onSubmitSuccess(data);
+          data: data,
+          success: result => {
+            this.onSubmitSuccess(result);
           },
           error: error => {
             this.onSubmitError(error);
diff --git a/src/sentry/static/sentry/app/components/forms/form.jsx b/src/sentry/static/sentry/app/components/forms/form.jsx
index 99cfa34a6a..ed60b32cd5 100644
--- a/src/sentry/static/sentry/app/components/forms/form.jsx
+++ b/src/sentry/static/sentry/app/components/forms/form.jsx
@@ -32,28 +32,44 @@ export default class Form extends React.Component {
     className: 'form-stacked'
   };
 
+  static childContextTypes = {
+    form: React.PropTypes.object
+  };
+
   constructor(props) {
     super(props);
     this.state = {
-      initialData: Object.assign({}, this.props.initialData),
-      formData: Object.assign({}, this.props.initialData),
-      errors: {}
+      data: {...this.props.initialData},
+      errors: {},
+      initialData: {...this.props.initialData},
+      state: FormState.READY
     };
     ['onSubmit', 'onSubmitSuccess', 'onSubmitError', 'onFieldChange'].forEach(f => {
       this[f] = this[f].bind(this);
     });
   }
 
+  getChildContext() {
+    let {data, errors} = this.state;
+    return {
+      form: {
+        data,
+        errors,
+        onFieldChange: this.onFieldChange
+      }
+    };
+  }
+
   onSubmit(e) {
     e.preventDefault();
-    this.props.onSubmit(this.state.formData, this.onSubmitSuccess, this.onSubmitError);
+    this.props.onSubmit(this.state.data, this.onSubmitSuccess, this.onSubmitError);
   }
 
   onSubmitSuccess(data) {
-    let formData = this.state.formData;
+    let curData = this.state.data;
     let newData = {};
     Object.keys(data).forEach(k => {
-      if (formData.hasOwnProperty(k)) newData[k] = data[k];
+      if (curData.hasOwnProperty(k)) newData[k] = data[k];
     });
 
     this.setState({
@@ -73,18 +89,18 @@ export default class Form extends React.Component {
   }
 
   onFieldChange(name, value) {
-    let formData = this.state.formData;
-    formData[name] = value;
     this.setState({
-      formData: formData
+      data: {
+        ...this.state.data,
+        [name]: value
+      }
     });
   }
 
   render() {
     let isSaving = this.state.state === FormState.SAVING;
-    let {initialData, formData, errors} = this.state;
-    let hasChanges =
-      Object.keys(formData).length && !underscore.isEqual(formData, initialData);
+    let {initialData, data, errors} = this.state;
+    let hasChanges = Object.keys(data).length && !underscore.isEqual(data, initialData);
     return (
       <form onSubmit={this.onSubmit} className={this.props.className}>
         {this.state.state === FormState.ERROR &&
@@ -99,7 +115,7 @@ export default class Form extends React.Component {
               <config.component
                 key={`field_${config.name}`}
                 {...config}
-                value={formData[config.name]}
+                value={data[config.name]}
                 error={errors[config.name]}
                 onChange={this.onFieldChange.bind(this, config.name)}
               />
diff --git a/src/sentry/static/sentry/app/components/forms/formField.jsx b/src/sentry/static/sentry/app/components/forms/formField.jsx
index c65950f5d6..15a8f26dc6 100644
--- a/src/sentry/static/sentry/app/components/forms/formField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/formField.jsx
@@ -1,29 +1,113 @@
 import React from 'react';
 
-class FormField extends React.Component {
+import {defined} from '../../utils';
+
+export default class FormField extends React.Component {
+  static propTypes = {
+    name: React.PropTypes.string.isRequired,
+
+    label: React.PropTypes.string,
+    defaultValue: React.PropTypes.any,
+    disabled: React.PropTypes.bool,
+    disabledReason: React.PropTypes.string,
+    help: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element]),
+    required: React.PropTypes.bool,
+
+    // the following should only be used without form context
+    onChange: React.PropTypes.func,
+    error: React.PropTypes.string,
+    value: React.PropTypes.any
+  };
+
+  static defaultProps = {
+    disabled: false,
+    required: false
+  };
+
+  static contextTypes = {
+    form: React.PropTypes.object
+  };
+
+  static childContextTypes = {
+    form: React.PropTypes.object
+  };
+
   constructor(props) {
     super(props);
-    this.state = {};
+
+    this.state = {
+      value: this.getValue(props)
+    };
+
+    ['onChange'].forEach(f => {
+      this[f] = this[f].bind(this);
+    });
   }
-}
 
-FormField.propTypes = {
-  name: React.PropTypes.string.isRequired,
-
-  label: React.PropTypes.string,
-  defaultValue: React.PropTypes.any,
-  disabled: React.PropTypes.bool,
-  error: React.PropTypes.string,
-  help: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element]),
-  onChange: React.PropTypes.func,
-  required: React.PropTypes.bool,
-  value: React.PropTypes.any
-};
-
-FormField.defaultProps = {
-  disabled: false,
-  onChange: value => {},
-  required: false
-};
-
-export default FormField;
+  getValue(props) {
+    let form = (this.context || {}).form;
+    props = props || this.props;
+    if (defined(props.value)) {
+      return props.value;
+    }
+    if (props.name && form && defined(form.data[props.name])) {
+      return form.data[props.name];
+    }
+    return props.defaultValue || '';
+  }
+
+  getError(props) {
+    let form = (this.context || {}).form;
+    props = props || this.props;
+    if (defined(props.error)) {
+      return props.error;
+    }
+    return (props.name && form && form.errors[props.name]) || null;
+  }
+
+  getId() {
+    return `id-${this.props.name}`;
+  }
+
+  onChange(e) {
+    let form = (this.context || {}).form;
+    this.setState(
+      {
+        value: e.target.value
+      },
+      () => {
+        this.props.onChange && this.props.onChange(this.state.value);
+        form && form.onFieldChange(this.props.name, this.state.value);
+      }
+    );
+  }
+
+  render() {
+    let className = this.getClassName();
+    let error = this.getError();
+    if (error) {
+      className += ' has-error';
+    }
+    if (this.props.required) {
+      className += ' required';
+    }
+    return (
+      <div className={className}>
+        <div className="controls">
+          {this.props.label &&
+            <label htmlFor={this.getId()} className="control-label">
+              {this.props.label}
+            </label>}
+          {this.getField()}
+          {this.props.disabled &&
+            this.props.disabledReason &&
+            <span className="disabled-indicator tip" title={this.props.disabledReason}>
+              <span className="icon-question" />
+            </span>}
+          {defined(this.props.help) && <p className="help-block">{this.props.help}</p>}
+          {error && <p className="error">{error}</p>}
+        </div>
+      </div>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/forms/inputField.jsx b/src/sentry/static/sentry/app/components/forms/inputField.jsx
index 948464a904..281670330d 100644
--- a/src/sentry/static/sentry/app/components/forms/inputField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/inputField.jsx
@@ -3,20 +3,11 @@ import React from 'react';
 import ReactDOM from 'react-dom';
 import FormField from './formField';
 
-import {defined} from '../../utils';
-
-class InputField extends FormField {
-  constructor(props) {
-    super(props);
-
-    this.onChange = this.onChange.bind(this);
-
-    this.state.value = this.valueFromProps(props);
-  }
-
-  valueFromProps(props) {
-    return defined(props.value) ? props.value : props.defaultValue || '';
-  }
+export default class InputField extends FormField {
+  static propTypes = {
+    ...FormField.propTypes,
+    placeholder: React.PropTypes.string
+  };
 
   // XXX(dcramer): this comes from TooltipMixin
   componentDidMount() {
@@ -36,21 +27,6 @@ class InputField extends FormField {
     jQuery('.tip', ReactDOM.findDOMNode(this)).tooltip('destroy');
   }
 
-  onChange(e) {
-    this.setState(
-      {
-        value: e.target.value
-      },
-      () => {
-        this.props.onChange(this.state.value);
-      }
-    );
-  }
-
-  getId() {
-    return 'id-' + this.props.name;
-  }
-
   getAttributes() {
     return {};
   }
@@ -76,41 +52,4 @@ class InputField extends FormField {
   getClassName() {
     return 'control-group';
   }
-
-  render() {
-    let className = this.getClassName();
-    if (this.props.error) {
-      className += ' has-error';
-    }
-    if (this.props.required) {
-      className += ' required';
-    }
-    return (
-      <div className={className}>
-        <div className="controls">
-          {this.props.label &&
-            <label htmlFor={this.getId()} className="control-label">
-              {this.props.label}
-            </label>}
-          {this.getField()}
-          {this.props.disabled &&
-            this.props.disabledReason &&
-            <span className="disabled-indicator tip" title={this.props.disabledReason}>
-              <span className="icon-question" />
-            </span>}
-          {defined(this.props.help) && <p className="help-block">{this.props.help}</p>}
-          {this.props.error && <p className="error">{this.props.error}</p>}
-        </div>
-      </div>
-    );
-  }
 }
-
-InputField.propTypes = Object.assign(
-  {
-    placeholder: React.PropTypes.string
-  },
-  FormField.propTypes
-);
-
-export default InputField;
diff --git a/src/sentry/static/sentry/app/components/forms/state.jsx b/src/sentry/static/sentry/app/components/forms/state.jsx
index 2774d531e1..1132bf96ee 100644
--- a/src/sentry/static/sentry/app/components/forms/state.jsx
+++ b/src/sentry/static/sentry/app/components/forms/state.jsx
@@ -1,8 +1,6 @@
-const FormState = {
+export default {
   LOADING: 'Loading',
   READY: 'Ready',
   SAVING: 'Saving',
   ERROR: 'Error'
 };
-
-export default FormState;
diff --git a/src/sentry/static/sentry/app/views/organizationCreate.jsx b/src/sentry/static/sentry/app/views/organizationCreate.jsx
index e4765f2318..52fb2c04be 100644
--- a/src/sentry/static/sentry/app/views/organizationCreate.jsx
+++ b/src/sentry/static/sentry/app/views/organizationCreate.jsx
@@ -24,20 +24,17 @@ export default React.createClass({
 
         <ApiForm
           initialData={{defaultTeam: true}}
-          fields={[
-            {
-              name: 'name',
-              label: 'Organization Name',
-              placeholder: 'e.g. My Company',
-              required: true,
-              component: TextField
-            }
-          ]}
           submitLabel={t('Create Organization')}
           apiEndpoint="/organizations/"
           apiMethod="POST"
-          onSubmitSuccess={this.onSubmitSuccess}
-        />
+          onSubmitSuccess={this.onSubmitSuccess}>
+          <TextField
+            name="name"
+            label={t('Organization Name')}
+            placeholder={t('e.g. My Company')}
+            required={true}
+          />
+        </ApiForm>
       </NarrowLayout>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/teamCreate.jsx b/src/sentry/static/sentry/app/views/teamCreate.jsx
index f528b18a6a..d07bd4e9fa 100644
--- a/src/sentry/static/sentry/app/views/teamCreate.jsx
+++ b/src/sentry/static/sentry/app/views/teamCreate.jsx
@@ -24,20 +24,17 @@ export default React.createClass({
         </p>
 
         <ApiForm
-          fields={[
-            {
-              name: 'name',
-              label: 'Team Name',
-              placeholder: 'e.g. Operations, Web, Desktop',
-              required: true,
-              component: TextField
-            }
-          ]}
           submitLabel={t('Save Changes')}
           apiEndpoint={`/organizations/${orgId}/teams/`}
           apiMethod="POST"
-          onSubmitSuccess={this.onSubmitSuccess}
-        />
+          onSubmitSuccess={this.onSubmitSuccess}>
+          <TextField
+            name="name"
+            label={t('Team Name')}
+            placeholder={t('e.g. Operations, Web, Desktop')}
+            required={true}
+          />
+        </ApiForm>
       </NarrowLayout>
     );
   }
