commit 452f321aad6f52b5b9314645a9b1bd5e97e4786e
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jan 31 21:59:52 2012 -0800

    Max sampling rates configurable

diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index 4cb91ecc9c..cae58648d6 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -56,6 +56,26 @@ PROJECT = 1
 # Only store a portion of all messages per unique group.
 SAMPLE_DATA = True
 
+# The following values control the sampling rates
+SAMPLE_RATES = (
+    (50, 1),
+    (1000, 2),
+    (10000, 10),
+    (100000, 50),
+    (1000000, 300),
+    (10000000, 2000),
+)
+
+MAX_SAMPLE_RATE = 10000
+
+SAMPLE_TIMES = (
+    (3600, 1),
+    (360, 10),
+    (60, 60),
+)
+
+MAX_SAMPLE_TIME = 10000
+
 # Restrict emails to only ``messages >= this value``.
 MAIL_LEVEL = logging.DEBUG
 
diff --git a/sentry/manager.py b/sentry/manager.py
index c9c89cc3c6..f7398b3512 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -55,29 +55,17 @@ class ScoreClause(object):
 def count_limit(count):
     # TODO: could we do something like num_to_store = max(math.sqrt(100*count)+59, 200) ?
     # ~ 150 * ((log(n) - 1.5) ^ 2 - 0.25)
-    if count <= 50:  # 200
-        return 1
-    if count <= 1000:  # 400
-        return 2
-    if count <= 10000:  # 900
-        return 10
-    if count <= 100000:  # 1800
-        return 50
-    if count <= 1000000:  # 3000
-        return 300
-    if count <= 10000000:  # 4500
-        return 2000
-    return 10000
+    for amount, sample_rate in settings.SAMPLE_RATES:
+        if count <= amount:
+            return sample_rate
+    return settings.MAX_SAMPLE_RATE
 
 
 def time_limit(silence):  # ~ 3600 per hour
-    if silence >= 3600:
-        return 1
-    if silence >= 360:
-        return 10
-    if silence >= 60:
-        return 60
-    return 10000
+    for amount, sample_rate in settings.SAMPLE_TIMES:
+        if silence >= amount:
+            return sample_rate
+    return settings.MAX_SAMPLE_TIME
 
 
 class ModuleProxyCache(dict):
