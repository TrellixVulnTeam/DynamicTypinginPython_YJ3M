commit f8973c6ad7f0a5ba8c27921fd3bd1496347b8016
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Mar 29 11:32:04 2016 -0700

    Allow members to bookmark projects (fixes GH-2933)

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 804c062f2f..67071549f3 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -9,7 +9,7 @@ from rest_framework import serializers, status
 from rest_framework.response import Response
 
 from sentry.api.base import DocSection
-from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.bases.project import ProjectEndpoint, ProjectPermission
 from sentry.api.decorators import sudo_required
 from sentry.api.serializers import serialize
 from sentry.models import (
@@ -66,14 +66,29 @@ def clean_newline_inputs(value):
     return result
 
 
-class ProjectSerializer(serializers.Serializer):
+class ProjectMemberSerializer(serializers.Serializer):
+    isBookmarked = serializers.BooleanField()
+
+
+class ProjectAdminSerializer(serializers.Serializer):
     isBookmarked = serializers.BooleanField()
     name = serializers.CharField(max_length=200)
     slug = serializers.SlugField(max_length=200)
 
 
+class RelaxedProjectPermission(ProjectPermission):
+    scope_map = {
+        'GET': ['project:read', 'project:write', 'project:delete'],
+        'POST': ['project:write', 'project:delete'],
+        # PUT checks for permissions based on fields
+        'PUT': ['project:read', 'project:write', 'project:delete'],
+        'DELETE': ['project:delete'],
+    }
+
+
 class ProjectDetailsEndpoint(ProjectEndpoint):
     doc_section = DocSection.PROJECTS
+    permission_classes = [RelaxedProjectPermission]
 
     def _get_unresolved_count(self, project):
         queryset = Group.objects.filter(
@@ -153,7 +168,12 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                                project settings.
         :auth: required
         """
-        serializer = ProjectSerializer(data=request.DATA, partial=True)
+        if request.access.has_scope('project:write'):
+            serializer_cls = ProjectAdminSerializer
+        else:
+            serializer_cls = ProjectMemberSerializer
+
+        serializer = serializer_cls(data=request.DATA, partial=True)
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
@@ -186,31 +206,32 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                 user=request.user,
             ).delete()
 
-        options = request.DATA.get('options', {})
-        if 'sentry:origins' in options:
-            project.update_option(
-                'sentry:origins',
-                clean_newline_inputs(options['sentry:origins'])
-            )
-        if 'sentry:resolve_age' in options:
-            project.update_option('sentry:resolve_age', int(options['sentry:resolve_age']))
-        if 'sentry:scrub_data' in options:
-            project.update_option('sentry:scrub_data', bool(options['sentry:scrub_data']))
-        if 'sentry:scrub_defaults' in options:
-            project.update_option('sentry:scrub_defaults', bool(options['sentry:scrub_defaults']))
-        if 'sentry:sensitive_fields' in options:
-            project.update_option(
-                'sentry:sensitive_fields',
-                [s.strip().lower() for s in options['sentry:sensitive_fields']]
-            )
+        if request.access.has_scope('project:write'):
+            options = request.DATA.get('options', {})
+            if 'sentry:origins' in options:
+                project.update_option(
+                    'sentry:origins',
+                    clean_newline_inputs(options['sentry:origins'])
+                )
+            if 'sentry:resolve_age' in options:
+                project.update_option('sentry:resolve_age', int(options['sentry:resolve_age']))
+            if 'sentry:scrub_data' in options:
+                project.update_option('sentry:scrub_data', bool(options['sentry:scrub_data']))
+            if 'sentry:scrub_defaults' in options:
+                project.update_option('sentry:scrub_defaults', bool(options['sentry:scrub_defaults']))
+            if 'sentry:sensitive_fields' in options:
+                project.update_option(
+                    'sentry:sensitive_fields',
+                    [s.strip().lower() for s in options['sentry:sensitive_fields']]
+                )
 
-        self.create_audit_entry(
-            request=request,
-            organization=project.organization,
-            target_object=project.id,
-            event=AuditLogEntryEvent.PROJECT_EDIT,
-            data=project.get_audit_log_data(),
-        )
+            self.create_audit_entry(
+                request=request,
+                organization=project.organization,
+                target_object=project.id,
+                event=AuditLogEntryEvent.PROJECT_EDIT,
+                data=project.get_audit_log_data(),
+            )
 
         data = serialize(project, request.user)
         data['options'] = {
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index 28bfde60fb..0394d1c987 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -74,6 +74,32 @@ class ProjectUpdateTest(APITestCase):
         assert project.name == 'hello world'
         assert project.slug == 'foobar'
 
+    def test_member_changes(self):
+        project = self.create_project()
+        user = self.create_user('bar@example.com')
+        self.create_member(
+            user=user,
+            organization=project.organization,
+            teams=[project.team],
+            role='member',
+        )
+        self.login_as(user=user)
+        url = reverse('sentry-api-0-project-details', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+        })
+        response = self.client.put(url, data={
+            'slug': 'zzz',
+            'isBookmarked': 'true',
+        })
+        assert response.status_code == 200
+        assert response.data['slug'] != 'zzz'
+
+        assert ProjectBookmark.objects.filter(
+            user=user,
+            project_id=project.id,
+        ).exists()
+
     def test_options(self):
         project = self.project  # force creation
         self.login_as(user=self.user)
