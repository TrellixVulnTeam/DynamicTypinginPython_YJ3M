commit 697a024ee469ede22b2e8ba93f5fc89faaa28df8
Author: Max Bittker <maxbittker@gmail.com>
Date:   Wed Jun 13 15:28:37 2018 -0700

    GHE client & repo provider (#8607)
    
    * GHE client
    
    * provider
    
    * fix path
    
    * repo provider
    
    * refactor based on review
    
    * small refactor
    
    * meredith review
    
    * fix test
    
    * commit link for GHE
    
    * consolidate shared GH and GHE repo provider
    
    * small fix

diff --git a/src/sentry/integrations/github/client.py b/src/sentry/integrations/github/client.py
index ea76c39907..618903961d 100644
--- a/src/sentry/integrations/github/client.py
+++ b/src/sentry/integrations/github/client.py
@@ -45,14 +45,21 @@ class GitHubClientMixin(ApiClient):
     def get_repo(self, repo):
         return self.get('/repos/{}'.format(repo))
 
+    def get_repositories(self):
+        repositories = self.get(
+            '/installation/repositories',
+            params={'per_page': 100},
+        )
+        return repositories['repositories']
 
-class GitHubAppsClient(GitHubClientMixin):
-
-    def __init__(self, external_id):
-        self.external_id = external_id
-        self.token = None
-        self.expires_at = None
-        super(GitHubAppsClient, self).__init__()
+    def request(self, method, path, headers=None, data=None, params=None):
+        if headers is None:
+            headers = {
+                'Authorization': 'token %s' % self.get_token(),
+                # TODO(jess): remove this whenever it's out of preview
+                'Accept': 'application/vnd.github.machine-man-preview+json',
+            }
+        return self._request(method, path, headers=headers, data=data, params=params)
 
     def get_token(self):
         if not self.token or self.expires_at < datetime.datetime.utcnow():
@@ -65,30 +72,26 @@ class GitHubAppsClient(GitHubClientMixin):
 
         return self.token
 
-    def request(self, method, path, headers=None, data=None, params=None):
-        if headers is None:
-            headers = {
-                'Authorization': 'token %s' % self.get_token(),
-                # TODO(jess): remove this whenever it's out of preview
-                'Accept': 'application/vnd.github.machine-man-preview+json',
-            }
-        return self._request(method, path, headers=headers, data=data, params=params)
-
     def create_token(self):
         return self.post(
             '/installations/{}/access_tokens'.format(
                 self.external_id,
             ),
             headers={
-                'Authorization': 'Bearer %s' % get_jwt(),
+                'Authorization': 'Bearer %s' % self.get_jwt(),
                 # TODO(jess): remove this whenever it's out of preview
                 'Accept': 'application/vnd.github.machine-man-preview+json',
             },
         )
 
-    def get_repositories(self):
-        repositories = self.get(
-            '/installation/repositories',
-            params={'per_page': 100},
-        )
-        return repositories['repositories']
+    def get_jwt(self):
+        return get_jwt()
+
+
+class GitHubAppsClient(GitHubClientMixin):
+
+    def __init__(self, external_id):
+        self.external_id = external_id
+        self.token = None
+        self.expires_at = None
+        super(GitHubAppsClient, self).__init__()
diff --git a/src/sentry/integrations/github/repository.py b/src/sentry/integrations/github/repository.py
index 43907f0e64..76089cb0ed 100644
--- a/src/sentry/integrations/github/repository.py
+++ b/src/sentry/integrations/github/repository.py
@@ -12,10 +12,12 @@ WEBHOOK_EVENTS = ['push', 'pull_request']
 class GitHubRepositoryProvider(providers.IntegrationRepositoryProvider):
     name = 'GitHub'
     logger = logging.getLogger('sentry.plugins.github')
+    repo_provider = 'github'
 
     def get_config(self, organization):
         choices = []
-        for i in Integration.objects.filter(organizations=organization, provider='github'):
+        for i in Integration.objects.filter(
+                organizations=organization, provider=self.repo_provider):
             choices.append((i.id, i.name))
 
         if not choices:
diff --git a/src/sentry/integrations/github_enterprise/client.py b/src/sentry/integrations/github_enterprise/client.py
new file mode 100644
index 0000000000..d1cec794e8
--- /dev/null
+++ b/src/sentry/integrations/github_enterprise/client.py
@@ -0,0 +1,22 @@
+from __future__ import absolute_import
+
+
+from sentry.integrations.github.utils import get_jwt
+from sentry.integrations.github.client import GitHubClientMixin
+
+
+class GitHubEnterpriseAppsClient(GitHubClientMixin):
+    base_url = None
+
+    def __init__(self, base_url, app_id, external_id, private_key):
+        self.base_url = "https://{}/api/v3".format(base_url)
+        self.external_id = external_id
+        self.app_id = app_id
+        self.private_key = private_key
+        self.token = None
+        self.expires_at = None
+        # verify_ssl=false is for testing purposes and should be removed before release
+        super(GitHubEnterpriseAppsClient, self).__init__(verify_ssl=False)
+
+    def get_jwt(self):
+        return get_jwt(github_id=self.app_id, github_private_key=self.private_key)
diff --git a/src/sentry/integrations/github_enterprise/integration.py b/src/sentry/integrations/github_enterprise/integration.py
index c6a60a69cc..2b177d39dd 100644
--- a/src/sentry/integrations/github_enterprise/integration.py
+++ b/src/sentry/integrations/github_enterprise/integration.py
@@ -8,13 +8,17 @@ from sentry import http
 from sentry.web.helpers import render_to_response
 from sentry.identity.pipeline import IdentityProviderPipeline
 from sentry.identity.github_enterprise import get_user_info
-from sentry.integrations import IntegrationMetadata
-from sentry.integrations.github.integration import GitHubIntegrationProvider
+from sentry.integrations import IntegrationMetadata, Integration
+from sentry.integrations.constants import ERR_INTERNAL, ERR_UNAUTHORIZED
+from sentry.integrations.exceptions import ApiError
 from sentry.pipeline import NestedPipelineView, PipelineView
 from sentry.utils.http import absolute_uri
+from sentry.integrations.github.integration import GitHubIntegrationProvider
 
 from sentry.integrations.github.utils import get_jwt
 
+from .repository import GitHubEnterpriseRepositoryProvider
+from .client import GitHubEnterpriseAppsClient
 
 DESCRIPTION = """
     Fill me out (Enterprise)
@@ -31,6 +35,36 @@ metadata = IntegrationMetadata(
 )
 
 
+API_ERRORS = {
+    404: 'GitHub Enterprise returned a 404 Not Found error.',
+    401: ERR_UNAUTHORIZED,
+}
+
+
+class GitHubEnterpriseIntegration(Integration):
+    def get_client(self):
+        return GitHubEnterpriseAppsClient(
+            base_url=self.model.metadata['domain_name'],
+            external_id=self.model.external_id,
+            private_key=self.model.metadata['installation']['private_key'],
+            app_id=self.model.metadata['installation']['id'],
+        )
+
+    def message_from_error(self, exc):
+        if isinstance(exc, ApiError):
+            message = API_ERRORS.get(exc.code)
+            if message:
+                return message
+            return (
+                'Error Communicating with GitHub Enterprise (HTTP %s): %s' % (
+                    exc.code, exc.json.get('message', 'unknown error')
+                    if exc.json else 'unknown error',
+                )
+            )
+        else:
+            return ERR_INTERNAL
+
+
 class InstallationForm(forms.Form):
     url = forms.CharField(widget=forms.TextInput(
         attrs={
@@ -116,6 +150,7 @@ class GitHubEnterpriseIntegrationProvider(GitHubIntegrationProvider):
     key = 'github-enterprise'
     name = 'GitHub Enterprise'
     metadata = metadata
+    integration_cls = GitHubEnterpriseIntegration
 
     def _make_identity_pipeline_view(self):
         """
@@ -194,7 +229,7 @@ class GitHubEnterpriseIntegrationProvider(GitHubIntegrationProvider):
                 'access_token': None,
                 'expires_at': None,
                 'icon': installation['account']['avatar_url'],
-                'domain_name': installation['account']['html_url'].replace('https://', ''),
+                'domain_name': installation['account']['html_url'].replace('https://', '').split("/")[0],
                 'installation': installation_data
             },
             'user_identity': {
@@ -206,6 +241,14 @@ class GitHubEnterpriseIntegrationProvider(GitHubIntegrationProvider):
             'identity_config': state['oauth_config_information']
         }
 
+    def setup(self):
+        from sentry.plugins import bindings
+        bindings.add(
+            'integration-repository.provider',
+            GitHubEnterpriseRepositoryProvider,
+            id='integrations:github_enterprise',
+        )
+
 
 class GitHubEnterpriseInstallationRedirect(PipelineView):
     def get_app_url(self, installation_data):
diff --git a/src/sentry/integrations/github_enterprise/repository.py b/src/sentry/integrations/github_enterprise/repository.py
new file mode 100644
index 0000000000..bafa26d73a
--- /dev/null
+++ b/src/sentry/integrations/github_enterprise/repository.py
@@ -0,0 +1,30 @@
+from __future__ import absolute_import
+
+import logging
+
+from sentry.models import Integration
+from sentry.integrations.github.repository import GitHubRepositoryProvider
+
+
+WEBHOOK_EVENTS = ['push', 'pull_request']
+
+
+class GitHubEnterpriseRepositoryProvider(GitHubRepositoryProvider):
+    name = 'GitHub Enterprise'
+    logger = logging.getLogger('sentry.plugins.github_enterprise')
+    repo_provider = 'github-enterprise'
+
+    def create_repository(self, organization, data, actor=None):
+        integration = Integration.objects.get(
+            id=data['integration_id'], provider=self.repo_provider)
+
+        base_url = integration.metadata.get('domain_name')
+        return {
+            'name': data['name'],
+            'external_id': data['external_id'],
+            'url': 'https://{}/{}'.format(base_url, data['name']),
+            'config': {
+                'name': data['name'],
+            },
+            'integration_id': data['integration_id']
+        }
diff --git a/src/sentry/plugins/providers/integration_repository.py b/src/sentry/plugins/providers/integration_repository.py
index 1be7ec5146..34da477352 100644
--- a/src/sentry/plugins/providers/integration_repository.py
+++ b/src/sentry/plugins/providers/integration_repository.py
@@ -15,6 +15,7 @@ from sentry.plugins.config import ConfigValidator
 class IntegrationRepositoryProvider(object):
     name = None
     logger = None
+    repo_provider = None
 
     def __init__(self, id):
         self.id = id
diff --git a/src/sentry/static/sentry/app/components/commitLink.jsx b/src/sentry/static/sentry/app/components/commitLink.jsx
index 127cb98ea4..e951dd312e 100644
--- a/src/sentry/static/sentry/app/components/commitLink.jsx
+++ b/src/sentry/static/sentry/app/components/commitLink.jsx
@@ -6,7 +6,10 @@ import InlineSvg from 'app/components/inlineSvg';
 
 const isBitbucket = providerId =>
   ['bitbucket', 'integrations:bitbucket'].includes(providerId);
-const isGithub = providerId => ['github', 'integrations:github'].includes(providerId);
+const isGithub = providerId =>
+  ['github', 'integrations:github', 'integrations:github_enterprise'].includes(
+    providerId
+  );
 
 class CommitLink extends React.Component {
   static propTypes = {
diff --git a/src/sentry/tasks/commits.py b/src/sentry/tasks/commits.py
index 1c98ac46a6..4ac1641de6 100644
--- a/src/sentry/tasks/commits.py
+++ b/src/sentry/tasks/commits.py
@@ -68,7 +68,6 @@ def fetch_commits(release_id, user_id, refs, prev_release_id=None, **kwargs):
 
     release = Release.objects.get(id=release_id)
     user = User.objects.get(id=user_id)
-
     prev_release = None
     if prev_release_id is not None:
         try:
@@ -120,7 +119,6 @@ def fetch_commits(release_id, user_id, refs, prev_release_id=None, **kwargs):
 
         end_sha = ref['commit']
         provider = provider_cls(id=repo.provider)
-
         try:
             repo_commits = provider.compare_commits(repo, start_sha, end_sha, actor=user)
         except NotImplementedError:
diff --git a/tests/sentry/integrations/github_enterprise/test_integration.py b/tests/sentry/integrations/github_enterprise/test_integration.py
index fa8d90cd9c..cf1495a835 100644
--- a/tests/sentry/integrations/github_enterprise/test_integration.py
+++ b/tests/sentry/integrations/github_enterprise/test_integration.py
@@ -121,18 +121,18 @@ class GitHubEnterpriseIntegrationTest(IntegrationTestCase):
         assert integration.external_id == 'install_id_1'
         assert integration.name == 'Test Organization'
         assert integration.metadata == {
-            'access_token': None,
-            'expires_at': None,
-            'icon': 'https://35.232.149.196/avatar.png',
-            'domain_name': '35.232.149.196/Test-Organization',
-            'installation': {
-                'client_id': 'client_id',
-                'client_secret': 'client_secret',
-                'id': '2',
-                'name': 'test-app',
-                'private_key': 'private_key',
-                'url': '35.232.149.196',
-                'webhook_secret': 'webhook_secret',
+            u'access_token': None,
+            u'expires_at': None,
+            u'icon': u'https://35.232.149.196/avatar.png',
+            u'domain_name': u'35.232.149.196',
+            u'installation': {
+                u'client_id': u'client_id',
+                u'client_secret': u'client_secret',
+                u'id': u'2',
+                u'name': u'test-app',
+                u'private_key': u'private_key',
+                u'url': u'35.232.149.196',
+                u'webhook_secret': u'webhook_secret',
             }
         }
         oi = OrganizationIntegration.objects.get(
