commit 0328194b73a7580aca8f33fbe49dfc0a3734e87c
Author: Manu <manu@sentry.io>
Date:   Wed Aug 7 10:30:37 2019 -0700

    ref: Remove redis codepath (#14299)
    
    So that we can say bye-bye to the GROUP_HASH_LAST_PROCESSED_EVENT_CLUSTER_NAME redis cluster.

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index aae8ccaf15..1882c771b7 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -1086,12 +1086,6 @@ class EventManager(object):
         else:
             is_sample = can_sample
 
-        if not is_sample:
-            GroupHash.record_last_processed_event_id(
-                all_hashes[0].id,
-                event.event_id,
-            )
-
         return group, is_new, is_regression, is_sample
 
     def _handle_regression(self, group, event, release):
diff --git a/src/sentry/models/grouphash.py b/src/sentry/models/grouphash.py
index d1ea5a1f7d..c230b27606 100644
--- a/src/sentry/models/grouphash.py
+++ b/src/sentry/models/grouphash.py
@@ -1,12 +1,9 @@
 from __future__ import absolute_import
 
-from django.conf import settings
 from django.db import models
-from django.db.models.signals import post_delete
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.db.models import BoundedPositiveIntegerField, FlexibleForeignKey, Model
-from sentry.utils import redis
 
 
 class GroupHash(Model):
@@ -31,33 +28,3 @@ class GroupHash(Model):
         app_label = 'sentry'
         db_table = 'sentry_grouphash'
         unique_together = (('project', 'hash'), )
-
-    @classmethod
-    def __get_last_processed_event_id_cluster(cls):
-        cluster_name = getattr(settings, 'GROUP_HASH_LAST_PROCESSED_EVENT_CLUSTER_NAME', 'default')
-        return redis.clusters.get(cluster_name)
-
-    @classmethod
-    def fetch_last_processed_event_id(cls, group_hash_ids):
-        with cls.__get_last_processed_event_id_cluster().map() as client:
-            results = [client.get(u'gh:lp:{}'.format(id)) for id in group_hash_ids]
-        return [result.value for result in results]
-
-    @classmethod
-    def record_last_processed_event_id(cls, group_hash_id, event_id):
-        with cls.__get_last_processed_event_id_cluster().map() as client:
-            key = u'gh:lp:{}'.format(group_hash_id)
-            client.set(key, u'{}'.format(event_id))
-            client.expire(key, 7776000)  # 90d
-
-    @classmethod
-    def delete_last_processed_event_id(cls, group_hash_id):
-        with cls.__get_last_processed_event_id_cluster().map() as client:
-            client.delete(u'gh:lp:{}'.format(group_hash_id))
-
-
-post_delete.connect(
-    lambda instance, **kwargs: GroupHash.delete_last_processed_event_id(instance.id),
-    sender=GroupHash,
-    weak=False,
-)
diff --git a/tests/sentry/models/test_grouphash.py b/tests/sentry/models/test_grouphash.py
deleted file mode 100644
index 6a10808771..0000000000
--- a/tests/sentry/models/test_grouphash.py
+++ /dev/null
@@ -1,24 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.models import GroupHash
-from sentry.testutils import TestCase
-
-
-class GroupTest(TestCase):
-    def test_fetch_and_record_last_processed_event_id(self):
-        group = self.group
-
-        grouphash = GroupHash.objects.create(
-            project=group.project,
-            group=group,
-            hash='xyz',
-        )
-
-        GroupHash.record_last_processed_event_id(
-            grouphash.id,
-            'event',
-        )
-
-        assert GroupHash.fetch_last_processed_event_id(
-            [grouphash.id, -1],
-        ) == ['event', None]
