commit 46961df137c8608312eb2d9c30b69c18fa61fa1c
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Jul 17 11:01:13 2019 -0700

    feat: Use Snuba for Group.from_event_id (#14034)
    
    This is the first part of https://github.com/getsentry/sentry/pull/13905,
    which updates the group model to use events from Snuba instead of
    Postgres. This PR just updates the from_event_id function.

diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index e3c2dd7bb2..9c667e9623 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -158,24 +158,13 @@ class GroupManager(BaseManager):
         Resolves the 32 character event_id string into
         a Group for which it is found.
         """
-        from sentry.models import EventMapping, Event
+        from sentry.models import SnubaEvent
         group_id = None
 
-        # Look up event_id in both Event and EventMapping,
-        # and bail when it matches one of them, prioritizing
-        # Event since it contains more history.
-        for model in Event, EventMapping:
-            try:
-                group_id = model.objects.filter(
-                    project_id=project.id,
-                    event_id=event_id,
-                ).values_list('group_id', flat=True)[0]
+        event = SnubaEvent.objects.from_event_id(event_id, project.id)
 
-                # It's possible that group_id is NULL
-                if group_id is not None:
-                    break
-            except IndexError:
-                pass
+        if event:
+            group_id = event.group_id
 
         if group_id is None:
             # Raise a Group.DoesNotExist here since it makes
diff --git a/tests/snuba/api/endpoints/test_project_group_index.py b/tests/snuba/api/endpoints/test_project_group_index.py
index 492a346646..c8f0151301 100644
--- a/tests/snuba/api/endpoints/test_project_group_index.py
+++ b/tests/snuba/api/endpoints/test_project_group_index.py
@@ -10,11 +10,10 @@ from exam import fixture
 from mock import patch, Mock
 
 from sentry.models import (
-    Activity, ApiToken, EventMapping, Group, GroupAssignee, GroupBookmark, GroupHash,
+    Activity, ApiToken, Group, GroupAssignee, GroupBookmark, GroupHash,
     GroupLink, GroupResolution, GroupSeen, GroupShare, GroupSnooze, GroupStatus, GroupSubscription,
     GroupTombstone, ExternalIssue, Integration, Release, OrganizationIntegration, UserOption
 )
-from sentry.models.event import Event
 from sentry.testutils import APITestCase, SnubaTestCase
 from sentry.testutils.helpers import parse_link_header
 from six.moves.urllib.parse import quote
@@ -192,31 +191,31 @@ class GroupListTest(APITestCase, SnubaTestCase):
     def test_lookup_by_event_id(self):
         project = self.project
         project.update_option('sentry:resolve_age', 1)
-        group = self.create_group(checksum='a' * 32)
-        self.create_group(checksum='b' * 32)
         event_id = 'c' * 32
-        event = Event.objects.create(project_id=self.project.id, event_id=event_id)
-        EventMapping.objects.create(
-            event_id=event_id,
-            project=group.project,
-            group=group,
+        event = self.store_event(
+            data={
+                'event_id': event_id,
+                'timestamp': self.min_ago.isoformat()[:19],
+            },
+            project_id=self.project.id
         )
-
         self.login_as(user=self.user)
 
         response = self.client.get(u'{}?query={}'.format(self.path, 'c' * 32), format='json')
         assert response.status_code == 200
         assert len(response.data) == 1
-        assert response.data[0]['id'] == six.text_type(group.id)
+        assert response.data[0]['id'] == six.text_type(event.group.id)
         assert response.data[0]['matchingEventId'] == event.id
 
     def test_lookup_by_event_with_matching_environment(self):
         project = self.project
         project.update_option('sentry:resolve_age', 1)
         self.create_environment(name="test", project=project)
+
         event = self.store_event(
             data={
                 'environment': 'test',
+                'timestamp': self.min_ago.isoformat()[:19],
             },
             project_id=self.project.id,
         )
@@ -235,21 +234,20 @@ class GroupListTest(APITestCase, SnubaTestCase):
     def test_lookup_by_event_id_with_whitespace(self):
         project = self.project
         project.update_option('sentry:resolve_age', 1)
-        group = self.create_group(checksum='a' * 32)
-        self.create_group(checksum='b' * 32)
-        EventMapping.objects.create(
-            event_id='c' * 32,
-            project=group.project,
-            group=group,
+        event = self.store_event(
+            data={
+                'event_id': 'c' * 32,
+                'timestamp': self.min_ago.isoformat()[:19],
+            },
+            project_id=self.project.id
         )
-
         self.login_as(user=self.user)
         response = self.client.get(
             u'{}?query=%20%20{}%20%20'.format(self.path, 'c' * 32), format='json'
         )
         assert response.status_code == 200
         assert len(response.data) == 1
-        assert response.data[0]['id'] == six.text_type(group.id)
+        assert response.data[0]['id'] == six.text_type(event.group.id)
 
     def test_lookup_by_unknown_event_id(self):
         project = self.project
