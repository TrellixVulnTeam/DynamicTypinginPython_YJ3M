commit a0acfa18ebf4254b123b303b3327ae0db2fd5067
Author: Dena Mwangi <dena@getsentry.com>
Date:   Wed Nov 14 10:55:15 2018 -0800

    feat(experiments): Render next iteration of sample event experiment (#10126)

diff --git a/src/sentry/static/sentry/app/components/createSampleEvent.jsx b/src/sentry/static/sentry/app/components/createSampleEvent.jsx
new file mode 100644
index 0000000000..3be0f36714
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/createSampleEvent.jsx
@@ -0,0 +1,92 @@
+import {browserHistory} from 'react-router';
+import React from 'react';
+import createReactClass from 'create-react-class';
+import PropTypes from 'prop-types';
+import styled from 'react-emotion';
+
+import {analytics} from 'app/utils/analytics';
+import ApiMixin from 'app/mixins/apiMixin';
+import Button from 'app/components/button';
+import IndicatorStore from 'app/stores/indicatorStore';
+import sdk from 'app/utils/sdk';
+
+const CreateSampleEvent = createReactClass({
+  displayName: 'createSampleEvent',
+
+  propTypes: {
+    params: PropTypes.object.isRequired,
+    source: PropTypes.string.isRequired,
+  },
+
+  contextTypes: {
+    organization: PropTypes.object,
+  },
+
+  mixins: [ApiMixin],
+
+  componentDidMount() {
+    let {projectId} = this.props.params;
+    let {organization} = this.context;
+    let project = organization.projects.find(proj => proj.slug === projectId);
+    analytics('sample_event.button_viewed', {
+      org_id: parseInt(organization.id, 10),
+      project_id: parseInt(project.id, 10),
+      source: this.props.source,
+    });
+  },
+
+  createSampleEvent() {
+    // TODO(DENA): swap out for action creator
+    let {orgId, projectId} = this.props.params;
+    let {organization} = this.context;
+    let url = `/projects/${orgId}/${projectId}/create-sample/`;
+    let project = organization.projects.find(proj => proj.slug === projectId);
+
+    analytics('sample_event.created', {
+      org_id: parseInt(organization.id, 10),
+      project_id: parseInt(project.id, 10),
+      source: 'installation',
+    });
+
+    this.api.request(url, {
+      method: 'POST',
+      success: data => {
+        browserHistory.push(`/${orgId}/${projectId}/issues/${data.groupID}/`);
+      },
+      error: err => {
+        sdk.captureException(
+          new Error('Create sample event in onboarding configure step failed'),
+          {
+            extra: err,
+          }
+        );
+
+        IndicatorStore.addError('Unable to create a sample event');
+      },
+    });
+  },
+
+  render() {
+    let {source} = this.props;
+
+    return source === 'waiting' ? (
+      <StyledButton priority="link" onClick={this.createSampleEvent}>
+        Or See Sample Event
+      </StyledButton>
+    ) : (
+      <div className="pull-right">
+        <StyledButton priority="primary" onClick={this.createSampleEvent}>
+          Or See Sample Event
+        </StyledButton>
+      </div>
+    );
+  },
+});
+
+const StyledButton = styled(Button)`
+  div {
+    padding: 0;
+  }
+`;
+
+export default CreateSampleEvent;
diff --git a/src/sentry/static/sentry/app/components/installPromptBanner.jsx b/src/sentry/static/sentry/app/components/installPromptBanner.jsx
new file mode 100644
index 0000000000..5522ee26b2
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/installPromptBanner.jsx
@@ -0,0 +1,119 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import createReactClass from 'create-react-class';
+import Reflux from 'reflux';
+import styled from 'react-emotion';
+
+import {analytics} from 'app/utils/analytics';
+import Alert from 'app/components/alert';
+import ConfigStore from 'app/stores/configStore';
+import {getPlatformName} from 'app/views/onboarding/utils';
+import {t} from 'app/locale';
+
+const InstallPromptBanner = createReactClass({
+  displayName: 'installPromptBanner',
+  propTypes: {
+    organization: PropTypes.object,
+  },
+
+  mixins: [Reflux.listenTo(ConfigStore, 'onConfigStoreUpdate')],
+
+  getInitialState() {
+    return {
+      sentFirstEvent: false,
+    };
+  },
+
+  componentDidMount() {
+    let {href} = window.location;
+    let {organization} = this.props;
+    this.sentFirstEvent();
+    analytics('install_prompt.banner_viewed', {
+      org_id: parseInt(organization.id, 10),
+      page: href,
+    });
+  },
+
+  onConfigStoreUpdate(config) {
+    if (!this.state.sentFirstEvent && config.sentFirstEvent) {
+      this.setState({sentFirstEvent: true});
+    }
+  },
+
+  sentFirstEvent() {
+    let {onboardingTasks} = this.props.organization;
+    let firstEventTask = onboardingTasks.find(task => task.task === 2);
+    this.setState({
+      sentFirstEvent: firstEventTask && firstEventTask.status === 'complete',
+    });
+  },
+
+  getUrl() {
+    let {organization} = this.props;
+    // if no projects - redirect back to onboarding flow
+    let url = `/onboarding/${organization.slug}`;
+
+    // if project with a valid platform then go straight to instructions
+    let projects = organization.projects;
+    let projectCount = projects.length;
+    if (projectCount > 0 && getPlatformName(projects[projectCount - 1].platform)) {
+      let project = projects[projectCount - 1];
+      url = `/onboarding/${organization.slug}/${project.slug}/configure/${project.platform}`;
+    }
+    return url;
+  },
+
+  recordAnalytics() {
+    let {href} = window.location;
+    let {organization} = this.props;
+    analytics('install_prompt.banner_clicked', {
+      org_id: parseInt(organization.id, 10),
+      page: href,
+    });
+  },
+
+  inSetupFlow() {
+    let path = window.location.pathname;
+
+    return (
+      path.indexOf('/getting-started/') !== -1 ||
+      path.indexOf('/onboarding/') !== -1 ||
+      path.indexOf('/projects/new/') !== -1
+    );
+  },
+
+  render() {
+    let {sentFirstEvent} = this.state;
+    let hideBanner = sentFirstEvent || this.inSetupFlow();
+
+    return (
+      <React.Fragment>
+        {!hideBanner && (
+          <StyledAlert type="warning" icon="icon-circle-exclamation" system={'system'}>
+            <a onClick={() => this.recordAnalytics()} href={this.getUrl()}>
+              {t(
+                "You're almost there! Start capturing errors with just a few lines of code."
+              )}
+            </a>
+          </StyledAlert>
+        )}
+      </React.Fragment>
+    );
+  },
+});
+
+const StyledAlert = styled(Alert)`
+  padding: ${p => p.theme.grid}px ${p => p.theme.grid * 2}px;
+  position: relative;
+  margin: 0;
+  padding-right: ${p => p.theme.grid * 4}px;
+  a {
+    color: #2f2936;
+    border-bottom: 1px dotted black;
+  }
+  use {
+    color: black;
+  }
+`;
+
+export default InstallPromptBanner;
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index 04eadf8a2f..df47d29236 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -166,6 +166,8 @@ export default {
     ProjectSelector: require('app/components/projectHeader/projectSelector').default,
     ReleaseLanding: require('app/views/projectReleases/releaseLanding').default,
     ReleaseProgress: require('app/views/projectReleases/releaseProgress').default,
+    CreateSampleEvent: require('app/components/createSampleEvent').default,
+    InstallPromptBanner: require('app/components/installPromptBanner').default,
     SentryTypes: require('app/sentryTypes').default,
     SettingsPageHeader: require('app/views/settings/components/settingsPageHeader')
       .default,
diff --git a/src/sentry/static/sentry/app/stores/hookStore.jsx b/src/sentry/static/sentry/app/stores/hookStore.jsx
index d3cfff46f4..9251a486cc 100644
--- a/src/sentry/static/sentry/app/stores/hookStore.jsx
+++ b/src/sentry/static/sentry/app/stores/hookStore.jsx
@@ -20,7 +20,8 @@ const validHookNames = new Set([
   'component:org-auth-view',
   'component:org-members-view',
   'component:releases-tab',
-  'component:sample-event',
+  'component:create-sample-event',
+  'component:install-prompt-banner',
 
   // Additional settings
   'settings:organization-navigation',
diff --git a/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx b/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
index 3a97a4c99a..4b5f74650c 100644
--- a/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
@@ -5,6 +5,7 @@ import {browserHistory} from 'react-router';
 import sdk from 'app/utils/sdk';
 import {analytics} from 'app/utils/analytics';
 import ApiMixin from 'app/mixins/apiMixin';
+import Hook from 'app/components/hook';
 import ProjectContext from 'app/views/projects/projectContext';
 import ProjectDocsContext from 'app/views/projectInstall/docsContext';
 import ProjectInstallPlatform from 'app/views/projectInstall/platform';
@@ -101,11 +102,23 @@ const Configure = createReactClass({
 
   render() {
     let {orgId, projectId} = this.props.params;
+    let {hasSentRealEvent} = this.state;
+
+    let data = {
+      params: this.props.params,
+      organization: this.context.organization,
+      source: 'header',
+    };
 
     return (
       <div>
         <div className="onboarding-Configure">
-          <h2 style={{marginBottom: 30}}>Configure your application</h2>
+          <h2 style={{marginBottom: 30}}>
+            Configure your application
+            {!hasSentRealEvent && (
+              <Hook name="component:create-sample-event" params={data} key="header" />
+            )}
+          </h2>
           <ProjectContext projectId={projectId} orgId={orgId} style={{marginBottom: 30}}>
             <ProjectDocsContext>
               <ProjectInstallPlatform
diff --git a/src/sentry/static/sentry/app/views/onboarding/configure/waiting.jsx b/src/sentry/static/sentry/app/views/onboarding/configure/waiting.jsx
index b5da5b3a36..bcc12f41b4 100644
--- a/src/sentry/static/sentry/app/views/onboarding/configure/waiting.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/configure/waiting.jsx
@@ -4,7 +4,7 @@ import {t} from 'app/locale';
 import styled from 'react-emotion';
 
 import Button from 'app/components/button';
-import HookStore from 'app/stores/hookStore';
+import Hook from 'app/components/hook';
 import SentryTypes from 'app/sentryTypes';
 
 class Waiting extends React.Component {
@@ -15,30 +15,10 @@ class Waiting extends React.Component {
     organization: SentryTypes.Organization,
   };
 
-  constructor(...args) {
-    super(...args);
-    this.state = {
-      component: null,
-    };
-  }
-
-  componentDidMount() {
-    this.getHookComponent();
-  }
-
-  getHookComponent() {
-    let component =
-      HookStore.get('component:sample-event').length && !this.props.hasEvent
-        ? HookStore.get('component:sample-event')[0](
-            this.props.params,
-            this.props.organization
-          )
-        : undefined;
-
-    this.setState({component});
-  }
-
   render() {
+    let {hasEvent, organization, params} = this.props;
+    let data = {params, organization, source: 'waiting'};
+
     return (
       <div className="awaiting-event">
         <div className="row">
@@ -63,7 +43,9 @@ class Waiting extends React.Component {
               >
                 {t('All done!')}
               </Button>
-              {this.state.component}
+              {!hasEvent && (
+                <Hook name="component:create-sample-event" params={data} key="waiting" />
+              )}
             </div>
           </CenteredButtons>
         </div>
diff --git a/src/sentry/static/sentry/app/views/organizationDetails.jsx b/src/sentry/static/sentry/app/views/organizationDetails.jsx
index 5eacf4c188..5bb830c9ea 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails.jsx
@@ -8,6 +8,7 @@ import {Client} from 'app/api';
 import OrganizationContext from 'app/views/organizationContext';
 import NarrowLayout from 'app/components/narrowLayout';
 import Footer from 'app/components/footer';
+import Hook from 'app/components/hook';
 import {t, tct} from 'app/locale';
 
 class DeletionInProgress extends Component {
@@ -134,6 +135,11 @@ class OrganizationDetailsBody extends Component {
       }
     return (
       <React.Fragment>
+        <Hook
+          name="component:install-prompt-banner"
+          params={{organization}}
+          key="banner"
+        />
         <ErrorBoundary>{this.props.children}</ErrorBoundary>
         <Footer />
       </React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/stream/stream.jsx b/src/sentry/static/sentry/app/views/stream/stream.jsx
index 1d53167d72..5eab50cba8 100644
--- a/src/sentry/static/sentry/app/views/stream/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream/stream.jsx
@@ -701,6 +701,11 @@ const Stream = createReactClass({
   renderStreamBody() {
     let body;
     let project = this.getProject();
+
+    if (project.firstEvent) {
+      ConfigStore.set('sentFirstEvent', project.firstEvent);
+    }
+
     if (this.state.dataLoading) {
       body = this.renderLoading();
     } else if (this.state.error) {
diff --git a/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap
index 3419e1c81b..ea0eb87358 100644
--- a/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap
@@ -13,6 +13,29 @@ exports[`Configure should render correctly render() should redirect to if no mat
       }
     >
       Configure your application
+      <Hook
+        key="header"
+        name="component:create-sample-event"
+        params={
+          Object {
+            "organization": Object {
+              "id": "1337",
+              "slug": "testOrg",
+              "teams": Array [
+                Array [
+                  "project-slug",
+                ],
+              ],
+            },
+            "params": Object {
+              "orgId": "testOrg",
+              "platform": "other",
+              "projectId": "project-slug",
+            },
+            "source": "header",
+          }
+        }
+      />
     </h2>
     <withProjects(withRouter(ProjectContext))
       orgId="testOrg"
@@ -90,6 +113,55 @@ exports[`Configure should render correctly render() should render platform docs
         }
       >
         Configure your application
+        <Hook
+          key="header"
+          name="component:create-sample-event"
+          params={
+            Object {
+              "organization": Object {
+                "id": "1337",
+                "projects": Array [
+                  Object {
+                    "hasAccess": true,
+                    "id": "testProject",
+                    "isBookmarked": false,
+                    "isMember": true,
+                    "name": "Test Project",
+                    "slug": "project-slug",
+                    "teams": Array [
+                      Object {
+                        "hasAccess": true,
+                        "id": "coolteam",
+                        "slug": "coolteam",
+                      },
+                    ],
+                  },
+                ],
+                "slug": "testOrg",
+                "teams": Array [
+                  Object {
+                    "hasAccess": true,
+                    "id": "coolteam",
+                    "projects": Array [
+                      Object {
+                        "id": "testProject",
+                        "name": "Test Project",
+                        "slug": "project-slug",
+                      },
+                    ],
+                    "slug": "coolteam",
+                  },
+                ],
+              },
+              "params": Object {
+                "orgId": "testOrg",
+                "platform": "node",
+                "projectId": "project-slug",
+              },
+              "source": "header",
+            }
+          }
+        />
       </h2>
       <withProjects(withRouter(ProjectContext))
         orgId="testOrg"
@@ -619,6 +691,55 @@ exports[`Configure should render correctly render() should render platform docs
                       </Component>
                     </StyledButton>
                   </Button>
+                  <Hook
+                    key="waiting"
+                    name="component:create-sample-event"
+                    params={
+                      Object {
+                        "organization": Object {
+                          "id": "1337",
+                          "projects": Array [
+                            Object {
+                              "hasAccess": true,
+                              "id": "testProject",
+                              "isBookmarked": false,
+                              "isMember": true,
+                              "name": "Test Project",
+                              "slug": "project-slug",
+                              "teams": Array [
+                                Object {
+                                  "hasAccess": true,
+                                  "id": "coolteam",
+                                  "slug": "coolteam",
+                                },
+                              ],
+                            },
+                          ],
+                          "slug": "testOrg",
+                          "teams": Array [
+                            Object {
+                              "hasAccess": true,
+                              "id": "coolteam",
+                              "projects": Array [
+                                Object {
+                                  "id": "testProject",
+                                  "name": "Test Project",
+                                  "slug": "project-slug",
+                                },
+                              ],
+                              "slug": "coolteam",
+                            },
+                          ],
+                        },
+                        "params": Object {
+                          "orgId": "testOrg",
+                          "platform": "node",
+                          "projectId": "project-slug",
+                        },
+                        "source": "waiting",
+                      }
+                    }
+                  />
                 </div>
               </div>
             </CenteredButtons>
@@ -643,6 +764,29 @@ exports[`Configure should render correctly render() shouldn't redirect for a fou
       }
     >
       Configure your application
+      <Hook
+        key="header"
+        name="component:create-sample-event"
+        params={
+          Object {
+            "organization": Object {
+              "id": "1337",
+              "slug": "testOrg",
+              "teams": Array [
+                Array [
+                  "project-slug",
+                ],
+              ],
+            },
+            "params": Object {
+              "orgId": "testOrg",
+              "platform": "node",
+              "projectId": "project-slug",
+            },
+            "source": "header",
+          }
+        }
+      />
     </h2>
     <withProjects(withRouter(ProjectContext))
       orgId="testOrg"
