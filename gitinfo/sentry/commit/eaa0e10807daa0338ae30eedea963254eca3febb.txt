commit eaa0e10807daa0338ae30eedea963254eca3febb
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Mon Mar 5 13:36:02 2018 -0800

    feat(environments): Support ReleaseProjectEnvironment in event pipeline (#7396)
    
    * Added event manager changes to support release-project-env
    
    * Changed formatting on buffer incr and passed only id's rather than whole objects.

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index a0886157f1..7b46639c00 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -1,7 +1,6 @@
 """
 sentry.event_manager
 ~~~~~~~~~~~~~~~~~~~~
-
 :copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
@@ -32,7 +31,7 @@ from sentry.interfaces.schemas import validate_and_default_interface
 from sentry.models import (
     Activity, Environment, Event, EventError, EventMapping, EventUser, Group,
     GroupEnvironment, GroupHash, GroupRelease, GroupResolution, GroupStatus,
-    Project, Release, ReleaseEnvironment, ReleaseProject, UserReport
+    Project, Release, ReleaseEnvironment, ReleaseProject, ReleaseProjectEnvironment, UserReport
 )
 from sentry.plugins import plugins
 from sentry.signals import event_discarded, event_saved, first_event_received, regression_signal
@@ -759,6 +758,13 @@ class EventManager(object):
                 datetime=date,
             )
 
+            ReleaseProjectEnvironment.get_or_create(
+                project=project,
+                release=release,
+                environment=environment,
+                datetime=date,
+            )
+
             grouprelease = GroupRelease.get_or_create(
                 group=group,
                 release=release,
@@ -849,14 +855,22 @@ class EventManager(object):
                 timestamp=event.datetime,
                 environment_id=environment.id,
             )
-
-        if is_new and release:
-            buffer.incr(
-                ReleaseProject, {'new_groups': 1}, {
-                    'release_id': release.id,
-                    'project_id': project.id,
-                }
-            )
+        if release:
+            if is_new:
+                buffer.incr(
+                    ReleaseProject, {'new_groups': 1}, {
+                        'release_id': release.id,
+                        'project_id': project.id,
+                    }
+                )
+            if is_new_group_environment:
+                buffer.incr(
+                    ReleaseProjectEnvironment, {'new_issues_count': 1}, {
+                        'project_id': project.id,
+                        'release_id': release.id,
+                        'environment_id': environment.id,
+                    }
+                )
 
         safe_execute(Group.objects.add_tags, group, environment, tags, _with_transaction=False)
 
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index 1215609228..fb6a55c435 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -21,7 +21,7 @@ from sentry.event_manager import (
 )
 from sentry.models import (
     Activity, Environment, Event, Group, GroupEnvironment, GroupHash, GroupRelease, GroupResolution,
-    GroupStatus, GroupTombstone, EventMapping, Release, UserReport
+    GroupStatus, GroupTombstone, EventMapping, Release, ReleaseProjectEnvironment, UserReport
 )
 from sentry.signals import event_discarded, event_saved
 from sentry.testutils import assert_mock_called_once_with_partial, TestCase, TransactionTestCase
@@ -1386,3 +1386,150 @@ class GenerateCulpritTest(TestCase):
     def test_md5_from_hash(self):
         result = md5_from_hash(['foo', 'bar', u'fo√¥'])
         assert result == '6d81588029ed4190110b2779ba952a00'
+
+
+class ReleaseIssueTest(TransactionTestCase):
+    def setUp(self):
+        self.project = self.create_project()
+        self.release = Release.get_or_create(self.project, '1.0')
+        self.environment1 = Environment.get_or_create(self.project, 'prod')
+        self.environment2 = Environment.get_or_create(self.project, 'staging')
+        self.timestamp = 1403007314
+
+    def make_event(self, **kwargs):
+        result = {
+            'event_id': 'a' * 32,
+            'message': 'foo',
+            'timestamp': 1403007314.570599,
+            'level': logging.ERROR,
+            'logger': 'default',
+            'tags': [],
+        }
+        result.update(kwargs)
+        return result
+
+    def make_release_event(self, release_version='1.0',
+                           environment_name='prod', project_id=1, **kwargs):
+        event = self.make_event(
+            release=release_version,
+            environment=environment_name,
+            event_id=uuid.uuid1().hex,
+        )
+        event.update(kwargs)
+        manager = EventManager(event)
+        with self.tasks():
+            event = manager.save(project_id)
+        return event
+
+    def convert_timestamp(self, timestamp):
+        date = datetime.fromtimestamp(timestamp)
+        date = date.replace(tzinfo=timezone.utc)
+        return date
+
+    def assert_release_project_environment(self, event, new_issues_count, first_seen, last_seen):
+        release = Release.objects.get(
+            organization=event.project.organization.id,
+            version=event.get_tag('sentry:release'),
+        )
+        release_project_envs = ReleaseProjectEnvironment.objects.filter(
+            release=release,
+            project=event.project,
+            environment=event.get_environment(),
+        )
+        assert len(release_project_envs) == 1
+
+        release_project_env = release_project_envs[0]
+        assert release_project_env.new_issues_count == new_issues_count
+        assert release_project_env.first_seen == self.convert_timestamp(first_seen)
+        assert release_project_env.last_seen == self.convert_timestamp(last_seen)
+
+    def test_different_groups(self):
+        event1 = self.make_release_event(
+            release_version=self.release.version,
+            environment_name=self.environment1.name,
+            project_id=self.project.id,
+            checksum='a' * 32,
+            timestamp=self.timestamp,
+        )
+        self.assert_release_project_environment(
+            event=event1,
+            new_issues_count=1,
+            last_seen=self.timestamp,
+            first_seen=self.timestamp,
+        )
+
+        event2 = self.make_release_event(
+            release_version=self.release.version,
+            environment_name=self.environment1.name,
+            project_id=self.project.id,
+            checksum='b' * 32,
+            timestamp=self.timestamp + 100,
+        )
+        self.assert_release_project_environment(
+            event=event2,
+            new_issues_count=2,
+            last_seen=self.timestamp + 100,
+            first_seen=self.timestamp,
+        )
+
+    def test_same_group(self):
+        event1 = self.make_release_event(
+            release_version=self.release.version,
+            environment_name=self.environment1.name,
+            project_id=self.project.id,
+            checksum='a' * 32,
+            timestamp=self.timestamp,
+        )
+        self.assert_release_project_environment(
+            event=event1,
+            new_issues_count=1,
+            last_seen=self.timestamp,
+            first_seen=self.timestamp,
+        )
+        event2 = self.make_release_event(
+            release_version=self.release.version,
+            environment_name=self.environment1.name,
+            project_id=self.project.id,
+            checksum='a' * 32,
+            timestamp=self.timestamp + 100,
+        )
+        self.assert_release_project_environment(
+            event=event2,
+            new_issues_count=1,
+            last_seen=self.timestamp + 100,
+            first_seen=self.timestamp,
+        )
+
+    def test_same_group_different_environment(self):
+        event1 = self.make_release_event(
+            release_version=self.release.version,
+            environment_name=self.environment1.name,
+            project_id=self.project.id,
+            checksum='a' * 32,
+            timestamp=self.timestamp,
+        )
+        self.assert_release_project_environment(
+            event=event1,
+            new_issues_count=1,
+            last_seen=self.timestamp,
+            first_seen=self.timestamp,
+        )
+        event2 = self.make_release_event(
+            release_version=self.release.version,
+            environment_name=self.environment2.name,
+            project_id=self.project.id,
+            checksum='a' * 32,
+            timestamp=self.timestamp + 100,
+        )
+        self.assert_release_project_environment(
+            event=event1,
+            new_issues_count=1,
+            last_seen=self.timestamp,
+            first_seen=self.timestamp,
+        )
+        self.assert_release_project_environment(
+            event=event2,
+            new_issues_count=1,
+            last_seen=self.timestamp + 100,
+            first_seen=self.timestamp + 100,
+        )
