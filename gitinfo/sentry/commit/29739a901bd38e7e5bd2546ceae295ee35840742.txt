commit 29739a901bd38e7e5bd2546ceae295ee35840742
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 5 12:11:01 2011 -0700

    Changed the hashing function for messages that include stacktraces to ignore the message and line numbers.

diff --git a/CHANGES b/CHANGES
index 4720827b4b..19520012ca 100644
--- a/CHANGES
+++ b/CHANGES
@@ -12,6 +12,8 @@
 * Added the ``level`` argument to the cleanup command.
 * The thrashed key is now set correctly in request.sentry.
 * Added user information to all messages that have ``request``.
+* Changed the hashing function for messages that include
+  stacktraces to ignore the ``message`` and line numbers.
 * Much improved test coverage.
 
 1.9.0
diff --git a/sentry/utils/__init__.py b/sentry/utils/__init__.py
index 182c5c1800..21ebca586c 100644
--- a/sentry/utils/__init__.py
+++ b/sentry/utils/__init__.py
@@ -54,12 +54,21 @@ def get_db_engine(alias='default'):
 def construct_checksum(level=logging.ERROR, class_name='', traceback='', message='', **kwargs):
     checksum = md5_constructor(str(level))
     checksum.update(class_name or '')
-    if traceback:
+
+    if 'data' in kwargs and kwargs['data'] and '__sentry__' in kwargs['data'] and 'frames' in kwargs['data']['__sentry__']:
+        frames = kwargs['data']['__sentry__']['frames']
+        for frame in frames:
+            checksum.update(frame['module'])
+            checksum.update(frame['function'])
+
+    elif traceback:
         traceback = '\n'.join(traceback.split('\n')[:-3])
-    message = traceback or message
-    if isinstance(message, unicode):
-        message = message.encode('utf-8', 'replace')
-    checksum.update(message)
+
+    elif message:
+        if isinstance(message, unicode):
+            message = message.encode('utf-8', 'replace')
+        checksum.update(message)
+
     return checksum.hexdigest()
 
 def varmap(func, var, context=None):
diff --git a/tests/tests.py b/tests/tests.py
index 8bae8bee57..dde9d17eb4 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -225,7 +225,7 @@ class SentryTest(BaseTestCase):
             self.fail('Unable to create `Message` entry.')
 
         self.assertEquals(Message.objects.count(), 2)
-        self.assertEquals(GroupedMessage.objects.count(), 2)
+        self.assertEquals(GroupedMessage.objects.count(), 1)
         last = Message.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.logger, 'root')
         self.assertEquals(last.class_name, 'DoesNotExist')
@@ -235,7 +235,7 @@ class SentryTest(BaseTestCase):
         get_client().create_from_text('This is an error', level=logging.DEBUG)
         
         self.assertEquals(Message.objects.count(), 3)
-        self.assertEquals(GroupedMessage.objects.count(), 3)
+        self.assertEquals(GroupedMessage.objects.count(), 2)
         last = Message.objects.all().order_by('-id')[0:1].get()
         self.assertEquals(last.logger, 'root')
         self.assertEquals(last.level, logging.DEBUG)
