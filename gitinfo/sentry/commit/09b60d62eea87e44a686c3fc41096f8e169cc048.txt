commit 09b60d62eea87e44a686c3fc41096f8e169cc048
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Aug 14 16:47:10 2019 -0700

    feat: Use eventstore.get_events to fetch events (#14381)
    
    Use eventstore.get_events instead of raw_query in a number of places.

diff --git a/src/sentry/api/endpoints/group_events.py b/src/sentry/api/endpoints/group_events.py
index 9662617952..c2f4c4e899 100644
--- a/src/sentry/api/endpoints/group_events.py
+++ b/src/sentry/api/endpoints/group_events.py
@@ -8,7 +8,7 @@ from rest_framework.response import Response
 from functools import partial
 
 
-from sentry import features
+from sentry import eventstore, features
 from sentry.api.base import DocSection, EnvironmentMixin
 from sentry.api.bases import GroupEndpoint
 from sentry.api.event_search import get_snuba_query_args
@@ -18,13 +18,12 @@ from sentry.api.helpers.events import get_direct_hit_response
 from sentry.api.serializers import EventSerializer, serialize, SimpleEventSerializer
 from sentry.api.paginator import GenericOffsetPaginator
 from sentry.api.utils import get_date_range_from_params
-from sentry.models import Group, SnubaEvent
+from sentry.models import Group
 from sentry.search.utils import (
     InvalidQuery,
     parse_query,
 )
 from sentry.utils.apidocs import scenario, attach_scenarios
-from sentry.utils.snuba import raw_query
 
 
 class NoResults(Exception):
@@ -105,13 +104,11 @@ class GroupEventsEndpoint(GroupEndpoint, EnvironmentMixin):
                 raise GroupEventsError(
                     'Boolean search operator OR and AND not allowed in this search.')
 
-        snuba_cols = SnubaEvent.minimal_columns if full else SnubaEvent.selected_columns
+        snuba_cols = None if full else eventstore.full_columns
 
         data_fn = partial(
-            # extract 'data' from raw_query result
-            lambda *args, **kwargs: raw_query(*args, **kwargs)['data'],
-            selected_columns=snuba_cols,
-            orderby='-timestamp',
+            eventstore.get_events,
+            additional_columns=snuba_cols,
             referrer='api.group-events',
             **snuba_args
         )
@@ -119,8 +116,7 @@ class GroupEventsEndpoint(GroupEndpoint, EnvironmentMixin):
         serializer = EventSerializer() if full else SimpleEventSerializer()
         return self.paginate(
             request=request,
-            on_results=lambda results: serialize(
-                [SnubaEvent(row) for row in results], request.user, serializer),
+            on_results=lambda results: serialize(results, request.user, serializer),
             paginator=GenericOffsetPaginator(data_fn=data_fn)
         )
 
diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index a546e324ba..0b1487152c 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -9,9 +9,8 @@ from sentry.api.bases import OrganizationEventsEndpointBase, OrganizationEventsE
 from sentry.api.helpers.events import get_direct_hit_response
 from sentry.api.paginator import GenericOffsetPaginator
 from sentry.api.serializers import EventSerializer, serialize, SimpleEventSerializer
-from sentry.models import SnubaEvent
+from sentry import eventstore, features
 from sentry.utils import snuba
-from sentry import features
 from sentry.models.project import Project
 
 logger = logging.getLogger(__name__)
@@ -46,12 +45,11 @@ class OrganizationEventsEndpoint(OrganizationEventsEndpointBase):
             # or user doesn't have access to projects in org
             data_fn = lambda *args, **kwargs: []
         else:
-            snuba_cols = SnubaEvent.minimal_columns if full else SnubaEvent.selected_columns
+            cols = None if full else eventstore.full_columns
+
             data_fn = partial(
-                # extract 'data' from raw_query result
-                lambda *args, **kwargs: snuba.raw_query(*args, **kwargs)['data'],
-                selected_columns=snuba_cols,
-                orderby='-timestamp',
+                eventstore.get_events,
+                additional_columns=cols,
                 referrer='api.organization-events',
                 **snuba_args
             )
@@ -59,8 +57,7 @@ class OrganizationEventsEndpoint(OrganizationEventsEndpointBase):
         serializer = EventSerializer() if full else SimpleEventSerializer()
         return self.paginate(
             request=request,
-            on_results=lambda results: serialize(
-                [SnubaEvent(row) for row in results], request.user, serializer),
+            on_results=lambda results: serialize(results, request.user, serializer),
             paginator=GenericOffsetPaginator(data_fn=data_fn)
         )
 
diff --git a/src/sentry/api/endpoints/project_events.py b/src/sentry/api/endpoints/project_events.py
index 6ad95d70e7..fb0b80711d 100644
--- a/src/sentry/api/endpoints/project_events.py
+++ b/src/sentry/api/endpoints/project_events.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from functools import partial
 
+from sentry import eventstore
 from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import EventSerializer, serialize, SimpleEventSerializer
@@ -35,8 +36,6 @@ class ProjectEventsEndpoint(ProjectEndpoint):
                                      belong to.
         """
         from sentry.api.paginator import GenericOffsetPaginator
-        from sentry.models import SnubaEvent
-        from sentry.utils.snuba import raw_query
 
         query = request.GET.get('query')
         conditions = []
@@ -45,21 +44,19 @@ class ProjectEventsEndpoint(ProjectEndpoint):
                 [['positionCaseInsensitive', ['message', "'%s'" % (query,)]], '!=', 0])
 
         full = request.GET.get('full', False)
-        snuba_cols = SnubaEvent.minimal_columns if full else SnubaEvent.selected_columns
+        cols = None if full else eventstore.full_columns
+
         data_fn = partial(
-            # extract 'data' from raw_query result
-            lambda *args, **kwargs: raw_query(*args, **kwargs)['data'],
+            eventstore.get_events,
             conditions=conditions,
             filter_keys={'project_id': [project.id]},
-            selected_columns=snuba_cols,
-            orderby='-timestamp',
+            additional_columns=cols,
             referrer='api.project-events',
         )
 
         serializer = EventSerializer() if full else SimpleEventSerializer()
         return self.paginate(
             request=request,
-            on_results=lambda results: serialize(
-                [SnubaEvent(row) for row in results], request.user, serializer),
+            on_results=lambda results: serialize(results, request.user, serializer),
             paginator=GenericOffsetPaginator(data_fn=data_fn)
         )
diff --git a/src/sentry/api/helpers/events.py b/src/sentry/api/helpers/events.py
index 971a460b7d..150ca1085f 100644
--- a/src/sentry/api/helpers/events.py
+++ b/src/sentry/api/helpers/events.py
@@ -2,9 +2,8 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
+from sentry import eventstore
 from sentry.api.event_search import get_snuba_query_args
-from sentry.models import SnubaEvent
-from sentry.utils.snuba import raw_query
 from sentry.utils.validators import normalize_event_id
 from sentry.api.serializers import serialize
 
@@ -20,15 +19,12 @@ def get_direct_hit_response(request, query, snuba_params, referrer):
             query=u'id:{}'.format(event_id),
             params=snuba_params)
 
-        results = raw_query(
-            selected_columns=SnubaEvent.selected_columns,
+        results = eventstore.get_events(
             referrer=referrer,
             **snuba_args
-        )['data']
+        )
 
         if len(results) == 1:
-            response = Response(
-                serialize([SnubaEvent(row) for row in results], request.user)
-            )
+            response = Response(serialize(results, request.user))
             response['X-Sentry-Direct-Hit'] = '1'
             return response
diff --git a/src/sentry/eventstore/snuba/backend.py b/src/sentry/eventstore/snuba/backend.py
index 3e6dae7a4c..8081cad01f 100644
--- a/src/sentry/eventstore/snuba/backend.py
+++ b/src/sentry/eventstore/snuba/backend.py
@@ -29,6 +29,7 @@ class SnubaEventStorage(EventStorage):
         orderby=DEFAULT_ORDERBY,
         limit=DEFAULT_LIMIT,
         offset=DEFAULT_OFFSET,
+        referrer='eventstore.get_events',
     ):
         """
         Get events from Snuba.
@@ -44,7 +45,7 @@ class SnubaEventStorage(EventStorage):
             orderby=orderby,
             limit=limit,
             offset=offset,
-            referrer='eventstore.get_events',
+            referrer=referrer,
         )
 
         if 'error' not in result:
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index a3ae17d2b4..3b8e08c065 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -207,20 +207,17 @@ class GroupManager(BaseManager):
         return Group.objects.get(id=group_id)
 
     def filter_by_event_id(self, project_ids, event_id):
-        from sentry.utils import snuba
-
-        data = snuba.raw_query(
-            selected_columns=['issue'],
-            conditions=[['issue', 'IS NOT NULL', None]],
+        data = eventstore.get_events(
+            conditions=[['group_id', 'IS NOT NULL', None]],
             filter_keys={
                 'event_id': [event_id],
                 'project_id': project_ids,
             },
             limit=len(project_ids),
-            referrer="Group.filter_by_event_id",
-        )['data']
+            referrer='Group.filter_by_event_id',
+        )
 
-        group_ids = set([evt['issue'] for evt in data])
+        group_ids = set([evt.group_id for evt in data])
 
         return Group.objects.filter(id__in=group_ids)
 
diff --git a/tests/sentry/api/endpoints/test_project_events.py b/tests/sentry/api/endpoints/test_project_events.py
deleted file mode 100644
index 64a05bee9b..0000000000
--- a/tests/sentry/api/endpoints/test_project_events.py
+++ /dev/null
@@ -1,95 +0,0 @@
-from __future__ import absolute_import
-
-import six
-
-from datetime import timedelta
-from django.utils import timezone
-from django.core.urlresolvers import reverse
-
-from sentry.testutils import APITestCase, SnubaTestCase
-
-
-class ProjectEventsTest(APITestCase, SnubaTestCase):
-    def setUp(self):
-        super(ProjectEventsTest, self).setUp()
-
-    def test_simple(self):
-        self.login_as(user=self.user)
-
-        project = self.create_project()
-        min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
-
-        event_1 = self.store_event(
-            data={
-                'fingerprint': ['group_1'],
-                'timestamp': min_ago
-            },
-            project_id=project.id,
-        )
-
-        event_2 = self.store_event(
-            data={
-                'fingerprint': ['group_1'],
-                'timestamp': min_ago
-            },
-            project_id=project.id,
-        )
-
-        url = reverse(
-            'sentry-api-0-project-events',
-            kwargs={
-                'organization_slug': project.organization.slug,
-                'project_slug': project.slug,
-            }
-        )
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 2
-        assert sorted(map(lambda x: x['id'], response.data)) == sorted(
-            [
-                six.text_type(event_1.event_id),
-                six.text_type(event_2.event_id),
-            ]
-        )
-
-    def test_filters_based_on_retention(self):
-        self.login_as(user=self.user)
-
-        project = self.create_project()
-        min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
-        two_days_ago = (timezone.now() - timedelta(days=2)).isoformat()[:19]
-
-        self.store_event(
-            data={
-                'fingerprint': ['group_2'],
-                'timestamp': two_days_ago
-            },
-            project_id=project.id,
-        )
-
-        event_2 = self.store_event(
-            data={
-                'fingerprint': ['group_2'],
-                'timestamp': min_ago
-            },
-            project_id=project.id,
-        )
-
-        with self.options({'system.event-retention-days': 1}):
-            url = reverse(
-                'sentry-api-0-project-events',
-                kwargs={
-                    'organization_slug': project.organization.slug,
-                    'project_slug': project.slug,
-                }
-            )
-            response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert sorted(map(lambda x: x['id'], response.data)) == sorted(
-            [
-                six.text_type(event_2.event_id),
-            ]
-        )
