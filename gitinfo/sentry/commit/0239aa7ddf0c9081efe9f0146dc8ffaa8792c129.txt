commit 0239aa7ddf0c9081efe9f0146dc8ffaa8792c129
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Mar 29 15:37:36 2018 -0700

    feat(integrations): Remove feature flag from slack

diff --git a/src/sentry/api/endpoints/organization_integration_details.py b/src/sentry/api/endpoints/organization_integration_details.py
index 088f51c798..8a4b60acce 100644
--- a/src/sentry/api/endpoints/organization_integration_details.py
+++ b/src/sentry/api/endpoints/organization_integration_details.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-from sentry import features
 from sentry.api.bases.organization import (
     OrganizationEndpoint, OrganizationIntegrationsPermission
 )
@@ -11,17 +10,7 @@ from sentry.models import Integration, OrganizationIntegration
 class OrganizationIntegrationDetailsEndpoint(OrganizationEndpoint):
     permission_classes = (OrganizationIntegrationsPermission, )
 
-    def has_feature(self, request, organization):
-        return features.has(
-            'organizations:integrations-v3',
-            organization=organization,
-            actor=request.user,
-        )
-
     def get(self, request, organization, integration_id):
-        if not self.has_feature(request, organization):
-            return self.respond({'detail': ['You do not have that feature enabled']}, status=400)
-
         integration = Integration.objects.get(
             organizations=organization,
             id=integration_id,
@@ -30,9 +19,6 @@ class OrganizationIntegrationDetailsEndpoint(OrganizationEndpoint):
         return self.respond(serialize(integration, request.user))
 
     def delete(self, request, organization, integration_id):
-        if not self.has_feature(request, organization):
-            return self.respond({'detail': ['You do not have that feature enabled']}, status=400)
-
         integration = Integration.objects.get(
             organizations=organization,
             id=integration_id,
diff --git a/src/sentry/api/endpoints/organization_integrations.py b/src/sentry/api/endpoints/organization_integrations.py
index 5cdfd29f50..634bbf0eae 100644
--- a/src/sentry/api/endpoints/organization_integrations.py
+++ b/src/sentry/api/endpoints/organization_integrations.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-from sentry import features
 from sentry.api.bases.organization import (
     OrganizationEndpoint, OrganizationIntegrationsPermission
 )
@@ -12,20 +11,7 @@ from sentry.models import Integration
 class OrganizationIntegrationsEndpoint(OrganizationEndpoint):
     permission_classes = (OrganizationIntegrationsPermission, )
 
-    def has_feature(self, request, organization):
-        return features.has(
-            'organizations:integrations-v3',
-            organization=organization,
-            actor=request.user,
-        )
-
     def get(self, request, organization):
-        if not self.has_feature(request, organization):
-            return self.respond({
-                'error_type': 'unavailable_feature',
-                'detail': ['You do not have that feature enabled']
-            }, status=403)
-
         return self.paginate(
             queryset=Integration.objects.filter(organizations=organization),
             request=request,
diff --git a/src/sentry/integrations/example/integration.py b/src/sentry/integrations/example/integration.py
index 3ceb081ad1..06d775b153 100644
--- a/src/sentry/integrations/example/integration.py
+++ b/src/sentry/integrations/example/integration.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 from django.http import HttpResponse
-from sentry.integrations import Integration
+from sentry.integrations import Integration, IntegrationMetadata
 from sentry.utils.pipeline import PipelineView
 
 
@@ -22,14 +22,28 @@ class ExampleSetupView(PipelineView):
 
         return HttpResponse(self.TEMPLATE)
 
+DESCRIPTION = """
+This is an example integration
+
+ * Descriptions support _markdown rendering_.
+"""
+
+metadata = IntegrationMetadata(
+    description=DESCRIPTION.strip(),
+    author='The Sentry Team',
+    issue_url='https://github.com/getsentry/sentry/issues/new',
+    source_url='https://github.com/getsentry/sentry',
+    aspects={},
+)
+
 
 class ExampleIntegration(Integration):
     """
     An example integration, generally used for testing.
     """
     key = 'example'
-
     name = 'Example'
+    metadata = metadata
 
     def get_pipeline_views(self):
         return [
diff --git a/src/sentry/static/sentry/app/views/projectPlugins/index.jsx b/src/sentry/static/sentry/app/views/projectPlugins/index.jsx
index 01163c7cb1..a1378caa1a 100644
--- a/src/sentry/static/sentry/app/views/projectPlugins/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectPlugins/index.jsx
@@ -1,5 +1,4 @@
 import React from 'react';
-import PropTypes from 'prop-types';
 
 import {t} from '../../locale';
 import {fetchPlugins, enablePlugin, disablePlugin} from '../../actionCreators/plugins';
@@ -12,9 +11,6 @@ import SettingsPageHeader from '../settings/components/settingsPageHeader';
 class ProjectPluginsContainer extends React.Component {
   static propTypes = {
     plugins: SentryTypes.PluginsStore,
-    organization: PropTypes.shape({
-      features: PropTypes.arrayOf(PropTypes.string),
-    }),
   };
 
   componentDidMount() {
@@ -33,20 +29,15 @@ class ProjectPluginsContainer extends React.Component {
 
   render() {
     let {loading, error, plugins} = this.props.plugins || {};
-    const {features} = this.props.organization;
-
-    const globalIntegrations = features.includes('integrations-v3') ? (
-      <OrganizationIntegrations
-        orgId={this.props.params.orgId}
-        projectId={this.props.params.projectId}
-      />
-    ) : null;
 
     return (
       <React.Fragment>
         <SettingsPageHeader title={t('Integrations')} />
 
-        {globalIntegrations}
+        <OrganizationIntegrations
+          orgId={this.props.params.orgId}
+          projectId={this.props.params.projectId}
+        />
 
         <ProjectPlugins
           {...this.props}
diff --git a/src/sentry/web/frontend/integration_setup.py b/src/sentry/web/frontend/integration_setup.py
index e9b2d22f2d..936d0ab874 100644
--- a/src/sentry/web/frontend/integration_setup.py
+++ b/src/sentry/web/frontend/integration_setup.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import, print_function
 
 import logging
 
-from sentry import features
 from sentry.integrations.pipeline import IntegrationPipeline
 from sentry.web.frontend.base import BaseView
 
@@ -12,13 +11,6 @@ logger = logging.getLogger('sentry.integrations')
 class IntegrationSetupView(BaseView):
     csrf_protect = False
 
-    def has_feature(self, request, organization):
-        return features.has(
-            'organizations:integrations-v3',
-            organization=organization,
-            actor=request.user,
-        )
-
     def handle(self, request, provider_id):
         pipeline = IntegrationPipeline.get_for_request(request=request)
         if not pipeline:
diff --git a/src/sentry/web/frontend/organization_integration_setup.py b/src/sentry/web/frontend/organization_integration_setup.py
index 749c884c70..3bcc748651 100644
--- a/src/sentry/web/frontend/organization_integration_setup.py
+++ b/src/sentry/web/frontend/organization_integration_setup.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import, print_function
 
 import logging
 
-from sentry import features
 from sentry.integrations.pipeline import IntegrationPipeline
 from sentry.web.frontend.base import OrganizationView
 
@@ -14,16 +13,7 @@ class OrganizationIntegrationSetupView(OrganizationView):
 
     csrf_protect = False
 
-    def has_feature(self, request, organization):
-        return features.has(
-            'organizations:integrations-v3',
-            organization=organization,
-            actor=request.user,
-        )
-
     def handle(self, request, organization, provider_id):
-        if not self.has_feature(request, organization):
-            return self.redirect('/')
         pipeline = IntegrationPipeline(
             request=request,
             organization=organization,
diff --git a/tests/js/spec/views/projectPlugins/index.spec.jsx b/tests/js/spec/views/projectPlugins/index.spec.jsx
index c0447cd125..de12582d95 100644
--- a/tests/js/spec/views/projectPlugins/index.spec.jsx
+++ b/tests/js/spec/views/projectPlugins/index.spec.jsx
@@ -20,7 +20,7 @@ describe('ProjectPluginsContainer', function() {
     };
     organization = {
       id: org.slug,
-      features: ['integrations-v3'],
+      features: [],
     };
 
     MockApiClient.addMockResponse({
diff --git a/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx b/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
index f3931a2ae1..db4a5a3a74 100644
--- a/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
+++ b/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
@@ -47,7 +47,7 @@ describe('PluginNavigation Integration', function() {
       let params = {orgId: org.slug, projectId: project.slug};
       let organization = {
         id: org.slug,
-        features: ['integrations-v3'],
+        features: [],
       };
 
       wrapper = mount(
diff --git a/tests/js/spec/views/projectPlugins/projectPlugins.spec.jsx b/tests/js/spec/views/projectPlugins/projectPlugins.spec.jsx
index 05fba182c8..4a4e1a0f24 100644
--- a/tests/js/spec/views/projectPlugins/projectPlugins.spec.jsx
+++ b/tests/js/spec/views/projectPlugins/projectPlugins.spec.jsx
@@ -13,26 +13,13 @@ describe('ProjectPlugins', function() {
   };
 
   it('renders', function() {
-    wrapper = shallow(
-      <ProjectPlugins
-        params={params}
-        plugins={plugins}
-        organization={{features: ['integrations-v3']}}
-      />
-    );
+    wrapper = shallow(<ProjectPlugins params={params} plugins={plugins} />);
 
     expect(wrapper).toMatchSnapshot();
   });
 
   it('has loading state', function() {
-    wrapper = shallow(
-      <ProjectPlugins
-        params={params}
-        loading
-        plugins={[]}
-        organization={{features: ['integrations-v3']}}
-      />
-    );
+    wrapper = shallow(<ProjectPlugins params={params} loading plugins={[]} />);
 
     expect(wrapper.find('LoadingIndicator')).toHaveLength(1);
   });
@@ -43,7 +30,6 @@ describe('ProjectPlugins', function() {
         params={params}
         plugins={null}
         loading
-        organization={{features: ['integrations-v3']}}
         error={new Error('An error')}
       />
     );
@@ -57,7 +43,6 @@ describe('ProjectPlugins', function() {
         params={params}
         plugins={[]}
         loading
-        organization={{features: ['integrations-v3']}}
         error={new Error('An error')}
       />
     );
diff --git a/tests/sentry/api/endpoints/test_organization_integration_details.py b/tests/sentry/api/endpoints/test_organization_integration_details.py
index 00eb303af4..66db53c9c1 100644
--- a/tests/sentry/api/endpoints/test_organization_integration_details.py
+++ b/tests/sentry/api/endpoints/test_organization_integration_details.py
@@ -17,8 +17,7 @@ class OrganizationIntegrationDetailsTest(APITestCase):
         integration.add_organization(org.id)
         path = '/api/0/organizations/{}/integrations/{}/'.format(org.slug, integration.id)
 
-        with self.feature('organizations:integrations-v3'):
-            response = self.client.get(path, format='json')
+        response = self.client.get(path, format='json')
 
         assert response.status_code == 200, response.content
         assert response.data['id'] == six.text_type(integration.id)
@@ -35,8 +34,7 @@ class OrganizationIntegrationDeleteTest(APITestCase):
         integration.add_organization(org.id)
         path = '/api/0/organizations/{}/integrations/{}/'.format(org.slug, integration.id)
 
-        with self.feature('organizations:integrations-v3'):
-            response = self.client.delete(path, format='json')
+        response = self.client.delete(path, format='json')
 
         assert response.status_code == 204, response.content
         assert Integration.objects.filter(id=integration.id).exists()
diff --git a/tests/sentry/api/endpoints/test_organization_integrations.py b/tests/sentry/api/endpoints/test_organization_integrations.py
index 087530ee7b..58950672a2 100644
--- a/tests/sentry/api/endpoints/test_organization_integrations.py
+++ b/tests/sentry/api/endpoints/test_organization_integrations.py
@@ -17,8 +17,7 @@ class OrganizationIntegrationsListTest(APITestCase):
         integration.add_organization(org.id)
         path = '/api/0/organizations/{}/integrations/'.format(org.slug)
 
-        with self.feature('organizations:integrations-v3'):
-            response = self.client.get(path, format='json')
+        response = self.client.get(path, format='json')
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
diff --git a/tests/sentry/web/frontend/test_organization_integration_setup.py b/tests/sentry/web/frontend/test_organization_integration_setup.py
index a4a4d5fbf3..26477b8ac0 100644
--- a/tests/sentry/web/frontend/test_organization_integration_setup.py
+++ b/tests/sentry/web/frontend/test_organization_integration_setup.py
@@ -13,24 +13,20 @@ class OrganizationIntegrationSetupPermissionTest(PermissionTestCase):
         )
 
     def test_teamless_admin_cannot_load(self):
-        with self.feature('organizations:integrations-v3'):
-            self.assert_teamless_admin_cannot_access(self.path)
+        self.assert_teamless_admin_cannot_access(self.path)
 
     def test_team_admin_cannot_load(self):
-        with self.feature('organizations:integrations-v3'):
-            self.assert_team_admin_cannot_access(self.path)
+        self.assert_team_admin_cannot_access(self.path)
 
     # this currently redirects the user
     @pytest.mark.xfail
     def test_manager_can_load(self):
-        with self.feature('organizations:integrations-v3'):
-            self.assert_role_can_access(self.path, 'manager')
+        self.assert_role_can_access(self.path, 'manager')
 
     # this currently redirects the user
     @pytest.mark.xfail
     def test_owner_can_load(self):
-        with self.feature('organizations:integrations-v3'):
-            self.assert_owner_can_access(self.path)
+        self.assert_owner_can_access(self.path)
 
 
 class OrganizationIntegrationSetupTest(TestCase):
@@ -43,13 +39,12 @@ class OrganizationIntegrationSetupTest(TestCase):
         )
 
     def test_basic_flow(self):
-        with self.feature('organizations:integrations-v3'):
-            resp = self.client.get(self.path)
-            assert resp.status_code == 200
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
 
-            resp = self.client.post(self.path, data={'name': 'morty'})
-            assert resp.status_code == 200
+        resp = self.client.post(self.path, data={'name': 'morty'})
+        assert resp.status_code == 200
 
-            # Check that we're binding the state back to the opening window
-            # through the dialog's window.postMessage.
-            assert 'morty' in resp.content
+        # Check that we're binding the state back to the opening window
+        # through the dialog's window.postMessage.
+        assert 'morty' in resp.content
