commit e81f1286c03a8d7e298495963a51a89cdc095a57
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Aug 10 12:41:43 2014 -0700

    Add team new groups endpoint

diff --git a/src/sentry/api/endpoints/team_groups_new.py b/src/sentry/api/endpoints/team_groups_new.py
new file mode 100644
index 0000000000..710e2601d3
--- /dev/null
+++ b/src/sentry/api/endpoints/team_groups_new.py
@@ -0,0 +1,48 @@
+from datetime import timedelta
+from django.utils import timezone
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint
+from sentry.api.permissions import assert_perm
+from sentry.api.serializers import serialize
+from sentry.constants import STATUS_UNRESOLVED
+from sentry.models import Group, Project, Team
+
+
+class TeamGroupsNewEndpoint(Endpoint):
+    def get(self, request, team_id):
+        """
+        Return a list of the newest groups for a given team.
+
+        The resulting query will find groups which have been seen since the
+        cutoff date, and then sort those by score, returning the highest scoring
+        groups first.
+        """
+        team = Team.objects.get_from_cache(
+            id=team_id,
+        )
+
+        assert_perm(team, request.user, request.auth)
+
+        minutes = int(request.REQUEST.get('minutes', 15))
+        limit = min(100, int(request.REQUEST.get('limit', 10)))
+
+        project_list = Project.objects.get_for_user(request.user, team=team)
+
+        project_dict = dict((p.id, p) for p in project_list)
+
+        cutoff = timedelta(minutes=minutes)
+        cutoff_dt = timezone.now() - cutoff
+
+        group_list = list(Group.objects.filter(
+            project__in=project_dict.keys(),
+            status=STATUS_UNRESOLVED,
+            active_at__gte=cutoff_dt,
+        ).extra(
+            select={'sort_value': 'score'},
+        ).order_by('-score', '-first_seen')[:limit])
+
+        for group in group_list:
+            group._project_cache = project_dict.get(group.project_id)
+
+        return Response(serialize(group_list, request.user))
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index b9848545aa..f07780543e 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -21,6 +21,7 @@ from .endpoints.project_stats import ProjectStatsEndpoint
 from .endpoints.team_details import TeamDetailsEndpoint
 from .endpoints.team_index import TeamIndexEndpoint
 from .endpoints.team_access_group_index import TeamAccessGroupIndexEndpoint
+from .endpoints.team_groups_new import TeamGroupsNewEndpoint
 from .endpoints.team_project_index import TeamProjectIndexEndpoint
 from .endpoints.team_member_index import TeamMemberIndexEndpoint
 from .endpoints.team_stats import TeamStatsEndpoint
@@ -47,6 +48,9 @@ urlpatterns = patterns(
     url(r'^teams/(?P<team_id>\d+)/$',
         TeamDetailsEndpoint.as_view(),
         name='sentry-api-0-team-details'),
+    url(r'^teams/(?P<team_id>\d+)/groups/new/$',
+        TeamGroupsNewEndpoint.as_view(),
+        name='sentry-api-0-team-groups-new'),
     url(r'^teams/(?P<team_id>\d+)/projects/$',
         TeamProjectIndexEndpoint.as_view(),
         name='sentry-api-0-team-project-index'),
diff --git a/tests/sentry/api/endpoints/test_team_groups_new.py b/tests/sentry/api/endpoints/test_team_groups_new.py
new file mode 100644
index 0000000000..e0819ce88a
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_team_groups_new.py
@@ -0,0 +1,20 @@
+from django.core.urlresolvers import reverse
+from sentry.testutils import APITestCase
+
+
+class TeamGroupsNewTest(APITestCase):
+    def test_simple(self):
+        project1 = self.create_project(team=self.team, slug='foo')
+        project2 = self.create_project(team=self.team, slug='bar')
+        group1 = self.create_group(checksum='a' * 32, project=project1, score=10)
+        group2 = self.create_group(checksum='b' * 32, project=project2, score=5)
+
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-team-groups-new', kwargs={
+            'team_id': self.team.id
+        })
+        response = self.client.get(url, format='json')
+        assert response.status_code == 200
+        assert len(response.data) == 2
+        assert response.data[0]['id'] == str(group1.id)
+        assert response.data[1]['id'] == str(group2.id)
