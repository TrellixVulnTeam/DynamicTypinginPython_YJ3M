commit 7c01ca0eecf0cc6a471e77d8412003ee831cbb0d
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Fri May 4 11:37:22 2018 -0700

    feat(github-app): Set up GitHub App installation flow

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 80418dd69f..b96b85f52c 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1236,6 +1236,7 @@ SENTRY_USE_X_FORWARDED_FOR = True
 
 SENTRY_DEFAULT_INTEGRATIONS = (
     'sentry.integrations.slack.SlackIntegration',
+    'sentry.integrations.github.GitHubIntegration',
     'sentry.integrations.jira.JiraIntegration',
 )
 
diff --git a/src/sentry/identity/__init__.py b/src/sentry/identity/__init__.py
index 1efa68ad3c..dd76b0a0a3 100644
--- a/src/sentry/identity/__init__.py
+++ b/src/sentry/identity/__init__.py
@@ -5,6 +5,7 @@ from .manager import IdentityManager  # NOQA
 from .oauth2 import *  # NOQA
 
 from .slack import *  # NOQA
+from .github import *  # NOQA
 
 
 default_manager = IdentityManager()
@@ -17,3 +18,4 @@ unregister = default_manager.unregister
 # TODO(epurkhiser): Should this be moved into it's own plugin, it should be
 # initialized there.
 register(SlackIdentityProvider)  # NOQA
+register(GitHubIdentityProvider)  # NOQA
diff --git a/src/sentry/identity/github/__init__.py b/src/sentry/identity/github/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/identity/github/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/identity/github/provider.py b/src/sentry/identity/github/provider.py
new file mode 100644
index 0000000000..2bcf6d9225
--- /dev/null
+++ b/src/sentry/identity/github/provider.py
@@ -0,0 +1,46 @@
+from __future__ import absolute_import
+
+from sentry import http
+from sentry import options
+from sentry.identity.oauth2 import OAuth2Provider
+
+
+def get_user_info(access_token):
+    session = http.build_session()
+    resp = session.get(
+        'https://api.github.com/user',
+        params={'access_token': access_token},
+        headers={'Accept': 'application/vnd.github.machine-man-preview+json'}
+    )
+    resp.raise_for_status()
+    resp = resp.json()
+
+    return resp
+
+
+class GitHubIdentityProvider(OAuth2Provider):
+    key = 'github'
+    name = 'GitHub'
+
+    oauth_access_token_url = 'https://github.com/login/oauth/access_token'
+    oauth_authorize_url = 'https://github.com/login/oauth/authorize'
+
+    oauth_scopes = ()
+
+    def get_oauth_client_id(self):
+        return options.get('github.client-id')
+
+    def get_oauth_client_secret(self):
+        return options.get('github.client-secret')
+
+    def build_identity(self, data):
+        data = data['data']
+        user = get_user_info(data['access_token'])
+
+        return {
+            'type': 'github',
+            'id': user['id'],
+            'email': user['email'],
+            'scopes': [],  # GitHub apps do not have user scopes
+            'data': self.get_oauth_data(data),
+        }
diff --git a/src/sentry/integrations/github/__init__.py b/src/sentry/integrations/github/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/integrations/github/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/integrations/github/integration.py b/src/sentry/integrations/github/integration.py
new file mode 100644
index 0000000000..476e1d8003
--- /dev/null
+++ b/src/sentry/integrations/github/integration.py
@@ -0,0 +1,117 @@
+from __future__ import absolute_import
+
+from django.utils.translation import ugettext_lazy as _
+
+from sentry import http, options
+from sentry.identity.pipeline import IdentityProviderPipeline
+from sentry.identity.github import get_user_info
+from sentry.integrations import Integration, IntegrationMetadata
+from sentry.pipeline import NestedPipelineView, PipelineView
+from sentry.utils.http import absolute_uri
+
+from .utils import get_jwt
+
+
+DESCRIPTION = """
+    Fill me out
+"""
+
+
+metadata = IntegrationMetadata(
+    description=DESCRIPTION.strip(),
+    author='The Sentry Team',
+    noun=_('Installation'),
+    issue_url='https://github.com/getsentry/sentry/issues/new?title=GitHub%20Integration:%20&labels=Component%3A%20Integrations',
+    source_url='https://github.com/getsentry/sentry/tree/master/src/sentry/integrations/github',
+    aspects={}
+)
+
+
+class GitHubIntegration(Integration):
+    key = 'github'
+    name = 'GitHub'
+    metadata = metadata
+
+    setup_dialog_config = {
+        'width': 1030,
+        'height': 1000,
+    }
+
+    def get_pipeline_views(self):
+        identity_pipeline_config = {
+            'oauth_scopes': (),
+            'redirect_url': absolute_uri('/extensions/github/setup/'),
+        }
+
+        identity_pipeline_view = NestedPipelineView(
+            bind_key='identity',
+            provider_key='github',
+            pipeline_cls=IdentityProviderPipeline,
+            config=identity_pipeline_config,
+        )
+
+        return [GitHubInstallationRedirect(), identity_pipeline_view]
+
+    def get_installation_info(self, access_token, installation_id):
+        session = http.build_session()
+        resp = session.get(
+            'https://api.github.com/app/installations/%s' % installation_id,
+            headers={
+                'Authorization': 'Bearer %s' % get_jwt(),
+                'Accept': 'application/vnd.github.machine-man-preview+json',
+            }
+        )
+        resp.raise_for_status()
+        installation_resp = resp.json()
+
+        resp = session.get(
+            'https://api.github.com/user/installations',
+            params={'access_token': access_token},
+            headers={'Accept': 'application/vnd.github.machine-man-preview+json'}
+        )
+        resp.raise_for_status()
+        user_installations_resp = resp.json()
+
+        # verify that user actually has access to the installation
+        for installation in user_installations_resp['installations']:
+            if installation['id'] == installation_resp['id']:
+                return installation_resp
+
+        return None
+
+    def build_integration(self, state):
+        identity = state['identity']['data']
+
+        user = get_user_info(identity['access_token'])
+        installation = self.get_installation_info(identity['access_token'], state['installation_id'])
+
+        return {
+            'name': installation['account']['login'],
+            'external_id': installation['id'],
+            'metadata': {
+                # The access token will be populated upon API usage
+                'access_token': None,
+                'expires_at': None,
+                'icon': installation['account']['avatar_url'],
+                'domain_name': installation['account']['html_url'].replace('https://', ''),
+            },
+            'user_identity': {
+                'type': 'github',
+                'external_id': user['id'],
+                'scopes': [],  # GitHub apps do not have user scopes
+                'data': {'access_token': identity['access_token']},
+            },
+        }
+
+
+class GitHubInstallationRedirect(PipelineView):
+    def get_app_url(self):
+        name = options.get('github.app-name')
+        return 'https://github.com/apps/%s' % name
+
+    def dispatch(self, request, pipeline):
+        if 'installation_id' in request.GET:
+            pipeline.bind_state('installation_id', request.GET['installation_id'])
+            return pipeline.next_step()
+
+        return self.redirect(self.get_app_url())
diff --git a/src/sentry/integrations/github/payload.py b/src/sentry/integrations/github/payload.py
new file mode 100644
index 0000000000..3c4a4f98d2
--- /dev/null
+++ b/src/sentry/integrations/github/payload.py
@@ -0,0 +1,76 @@
+from __future__ import absolute_import
+
+import hashlib
+import hmac
+import logging
+import six
+
+from django.http import HttpResponse
+from django.utils.crypto import constant_time_compare
+from django.utils.decorators import method_decorator
+from django.views.decorators.csrf import csrf_exempt
+from simplejson import JSONDecodeError
+from sentry import options
+
+from sentry.utils import json
+from sentry.api.base import Endpoint
+
+logger = logging.getLogger('sentry.integrations.github')
+
+
+class GitHubAppsEndpoint(Endpoint):
+    authentication_classes = ()
+    permission_classes = ()
+
+    @method_decorator(csrf_exempt)
+    def dispatch(self, request, *args, **kwargs):
+        return super(GitHubAppsEndpoint, self).dispatch(request, *args, **kwargs)
+
+    def get_secret(self):
+        return options.get('github.webhook-secret')
+
+    def is_valid_signature(self, method, body, secret, signature):
+        if method != 'sha1':
+            raise NotImplementedError('signature method %s is not supported' % (method, ))
+
+        mod = hashlib.sha1
+        expected = hmac.new(
+            key=secret.encode('utf-8'),
+            msg=body,
+            digestmod=mod,
+        ).hexdigest()
+        return constant_time_compare(expected, signature)
+
+    def post(self, request, *kwargs):
+
+        secret = self.get_secret()
+
+        if secret is None:
+            logger.error('github.webhook.missing-secret',)
+            return HttpResponse(status=401)
+
+        body = six.binary_type(request.body)
+        if not body:
+            logger.error('github.webhook.missing-body',)
+            return HttpResponse(status=400)
+
+        try:
+            method, signature = request.META['HTTP_X_HUB_SIGNATURE'].split('=', 1)
+        except (KeyError, IndexError):
+            logger.error('github.webhook.missing-signature',)
+            return HttpResponse(status=400)
+
+        if not self.is_valid_signature(method, body, self.get_secret(), signature):
+            logger.error('github.webhook.invalid-signature',)
+            return HttpResponse(status=401)
+
+        try:
+            json.loads(body.decode('utf-8'))
+        except JSONDecodeError:
+            logger.error(
+                'github.webhook.invalid-json',
+                exc_info=True,
+            )
+            return HttpResponse(status=400)
+
+        return HttpResponse(status=200)
diff --git a/src/sentry/integrations/github/urls.py b/src/sentry/integrations/github/urls.py
new file mode 100644
index 0000000000..ae7a6108ec
--- /dev/null
+++ b/src/sentry/integrations/github/urls.py
@@ -0,0 +1,11 @@
+from __future__ import absolute_import, print_function
+
+from django.conf.urls import patterns, url
+
+from .payload import GitHubAppsEndpoint
+
+
+urlpatterns = patterns(
+    '',
+    url(r'^payload/$', GitHubAppsEndpoint.as_view()),
+)
diff --git a/src/sentry/integrations/github/utils.py b/src/sentry/integrations/github/utils.py
new file mode 100644
index 0000000000..898afbe60b
--- /dev/null
+++ b/src/sentry/integrations/github/utils.py
@@ -0,0 +1,24 @@
+from __future__ import absolute_import
+
+import calendar
+import datetime
+import jwt
+import time
+
+from sentry import options
+
+
+def get_jwt():
+    exp = datetime.datetime.utcnow() + datetime.timedelta(minutes=10)
+    exp = calendar.timegm(exp.timetuple())
+    # Generate the JWT
+    payload = {
+        # issued at time
+        'iat': int(time.time()),
+        # JWT expiration time (10 minute maximum)
+        'exp': exp,
+        # Integration's GitHub identifier
+        'iss': options.get('github.app-id'),
+    }
+
+    return jwt.encode(payload, options.get('github.private-key'), algorithm='RS256')
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 2c4c15f772..e214f4fc2c 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -121,3 +121,11 @@ register('tagstore.multi-sampling', default=0.0)
 register('slack.client-id', flags=FLAG_PRIORITIZE_DISK)
 register('slack.client-secret', flags=FLAG_PRIORITIZE_DISK)
 register('slack.verification-token', flags=FLAG_PRIORITIZE_DISK)
+
+# Github Integration
+register('github.app-id', default=0)
+register('github.app-name', default='')
+register('github.webhook-secret', default='')
+register('github.private-key', default='')
+register('github.client-id', flags=FLAG_PRIORITIZE_DISK)
+register('github.client-secret', flags=FLAG_PRIORITIZE_DISK)
diff --git a/src/sentry/static/sentry/app/views/projectPlugins/organizationIntegrations.jsx b/src/sentry/static/sentry/app/views/projectPlugins/organizationIntegrations.jsx
index e847fa3ba4..446ec5e83d 100644
--- a/src/sentry/static/sentry/app/views/projectPlugins/organizationIntegrations.jsx
+++ b/src/sentry/static/sentry/app/views/projectPlugins/organizationIntegrations.jsx
@@ -39,7 +39,7 @@ export default class OrganizationIntegrations extends AsyncComponent {
   renderBody() {
     let {orgId, projectId} = this.props;
     let orgFeatures = new Set(this.state.organization.features);
-    let internalIntegrations = new Set(['jira']);
+    let internalIntegrations = new Set(['jira', 'github']);
 
     const integrations = this.state.config.providers
       .filter(provider => {
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index e47663d65d..cebf28576c 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -144,6 +144,10 @@ def pytest_configure(config):
             'slack.client-id': 'slack-client-id',
             'slack.client-secret': 'slack-client-secret',
             'slack.verification-token': 'slack-verification-token',
+
+            'github.app-name': 'sentry-test-app',
+            'github.client-id': 'github-client-id',
+            'github.client-secret': 'github-client-secret',
         }
     )
 
@@ -192,8 +196,10 @@ def register_extensions():
     from sentry import integrations
     from sentry.integrations.example import ExampleIntegration
     from sentry.integrations.slack import SlackIntegration
+    from sentry.integrations.github import GitHubIntegration
     integrations.register(ExampleIntegration)
     integrations.register(SlackIntegration)
+    integrations.register(GitHubIntegration)
 
     from sentry.plugins import bindings
     from sentry.plugins.providers.dummy import DummyRepositoryProvider
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 292dacb374..8402ed0291 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -495,6 +495,7 @@ urlpatterns += patterns(
     url(r'^extensions/cloudflare/', include('sentry.integrations.cloudflare.urls')),
     url(r'^extensions/jira/', include('sentry.integrations.jira.urls')),
     url(r'^extensions/slack/', include('sentry.integrations.slack.urls')),
+    url(r'^extensions/github/', include('sentry.integrations.github.urls')),
 
     url(r'^plugins/', include('sentry.plugins.base.urls')),
 
diff --git a/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx b/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
index 146742207f..d1ddc4c810 100644
--- a/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
+++ b/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
@@ -21,7 +21,7 @@ describe('PluginNavigation Integration', function() {
     MockApiClient.addMockResponse({
       url: `/organizations/${org.slug}/`,
       method: 'GET',
-      body: org,
+      body: {organization: org},
     });
     MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/${project.slug}/plugins/`,
diff --git a/tests/sentry/integrations/github/__init__.py b/tests/sentry/integrations/github/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/integrations/github/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/integrations/github/test_integration.py b/tests/sentry/integrations/github/test_integration.py
new file mode 100644
index 0000000000..bf2f815a51
--- /dev/null
+++ b/tests/sentry/integrations/github/test_integration.py
@@ -0,0 +1,136 @@
+from __future__ import absolute_import
+
+import responses
+import six
+from mock import patch
+
+from six.moves.urllib.parse import parse_qs, urlencode, urlparse
+
+from sentry.integrations.github import GitHubIntegration
+from sentry.models import Identity, IdentityProvider, IdentityStatus, Integration, OrganizationIntegration
+from sentry.testutils import IntegrationTestCase
+
+
+class GitHubIntegrationTest(IntegrationTestCase):
+    provider = GitHubIntegration
+
+    @patch('sentry.integrations.github.integration.get_jwt', return_value='jwt_token_1')
+    def assert_setup_flow(self, get_jwt, installation_id='install_id_1', user_id='user_id_1'):
+        responses.reset()
+
+        resp = self.client.get(self.init_path)
+        assert resp.status_code == 302
+        redirect = urlparse(resp['Location'])
+        assert redirect.scheme == 'https'
+        assert redirect.netloc == 'github.com'
+        assert redirect.path == '/apps/sentry-test-app'
+
+        # App installation ID is provided, mveo thr
+        resp = self.client.get('{}?{}'.format(
+            self.setup_path,
+            urlencode({'installation_id': installation_id})
+        ))
+
+        assert resp.status_code == 302
+        redirect = urlparse(resp['Location'])
+        assert redirect.scheme == 'https'
+        assert redirect.netloc == 'github.com'
+        assert redirect.path == '/login/oauth/authorize'
+
+        params = parse_qs(redirect.query)
+        assert params['state']
+        assert params['redirect_uri'] == ['http://testserver/extensions/github/setup/']
+        assert params['response_type'] == ['code']
+        assert params['client_id'] == ['github-client-id']
+        # once we've asserted on it, switch to a singular values to make life
+        # easier
+        authorize_params = {k: v[0] for k, v in six.iteritems(params)}
+
+        access_token = 'xxxxx-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx'
+
+        responses.add(
+            responses.POST, 'https://github.com/login/oauth/access_token',
+            json={'access_token': access_token}
+        )
+
+        responses.add(
+            responses.GET, 'https://api.github.com/user',
+            json={'id': user_id}
+        )
+
+        responses.add(
+            responses.GET,
+            u'https://api.github.com/app/installations/{}'.format(installation_id),
+            json={
+                'id': installation_id,
+                'account': {
+                    'login': 'Test Organization',
+                    'avatar_url': 'http://example.com/avatar.png',
+                    'html_url': 'https://github.com/Test-Organization',
+                },
+            }
+        )
+
+        responses.add(
+            responses.GET, u'https://api.github.com/user/installations',
+            json={
+                'installations': [{'id': installation_id}],
+            }
+        )
+
+        resp = self.client.get('{}?{}'.format(
+            self.setup_path,
+            urlencode({
+                'code': 'oauth-code',
+                'state': authorize_params['state'],
+            })
+        ))
+
+        mock_access_token_request = responses.calls[0].request
+        req_params = parse_qs(mock_access_token_request.body)
+        assert req_params['grant_type'] == ['authorization_code']
+        assert req_params['code'] == ['oauth-code']
+        assert req_params['redirect_uri'] == ['http://testserver/extensions/github/setup/']
+        assert req_params['client_id'] == ['github-client-id']
+        assert req_params['client_secret'] == ['github-client-secret']
+
+        assert resp.status_code == 200
+
+        auth_header = responses.calls[2].request.headers['Authorization']
+        assert auth_header == 'Bearer jwt_token_1'
+
+        self.assertDialogSuccess(resp)
+
+    @responses.activate
+    def test_basic_flow(self):
+        self.assert_setup_flow()
+
+        integration = Integration.objects.get(provider=self.provider.key)
+
+        assert integration.external_id == 'install_id_1'
+        assert integration.name == 'Test Organization'
+        assert integration.metadata == {
+            'access_token': None,
+            'expires_at': None,
+            'icon': 'http://example.com/avatar.png',
+            'domain_name': 'github.com/Test-Organization',
+        }
+        oi = OrganizationIntegration.objects.get(
+            integration=integration,
+            organization=self.organization,
+        )
+        assert oi.config == {}
+
+        idp = IdentityProvider.objects.get(
+            type='github',
+            organization=self.organization,
+        )
+        identity = Identity.objects.get(
+            idp=idp,
+            user=self.user,
+            external_id='user_id_1',
+        )
+        assert identity.status == IdentityStatus.VALID
+        assert identity.data == {
+            'access_token': 'xxxxx-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx'
+        }
