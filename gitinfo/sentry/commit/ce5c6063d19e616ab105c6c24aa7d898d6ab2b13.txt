commit ce5c6063d19e616ab105c6c24aa7d898d6ab2b13
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Fri May 24 11:28:23 2019 -0700

    ref(analytics): Record adv search feature gates (#13335)

diff --git a/src/sentry/analytics/events/advanced_search_feature_gated.py b/src/sentry/analytics/events/advanced_search_feature_gated.py
new file mode 100644
index 0000000000..5418bacd01
--- /dev/null
+++ b/src/sentry/analytics/events/advanced_search_feature_gated.py
@@ -0,0 +1,16 @@
+from __future__ import absolute_import
+
+from sentry import analytics
+
+
+class AdvancedSearchFeatureGateEvent(analytics.Event):
+    type = 'advanced_search.feature_gated'
+
+    attributes = (
+        analytics.Attribute('user_id', required=False),
+        analytics.Attribute('default_user_id'),
+        analytics.Attribute('organization_id'),
+    )
+
+
+analytics.register(AdvancedSearchFeatureGateEvent)
diff --git a/src/sentry/api/helpers/group_index.py b/src/sentry/api/helpers/group_index.py
index 9cee88fe33..deb2432321 100644
--- a/src/sentry/api/helpers/group_index.py
+++ b/src/sentry/api/helpers/group_index.py
@@ -34,7 +34,7 @@ from sentry.api.issue_search import (
     parse_search_query,
 )
 from sentry.signals import (
-    issue_deleted, issue_ignored, issue_resolved
+    issue_deleted, issue_ignored, issue_resolved, advanced_search_feature_gated
 )
 from sentry.tasks.deletion import delete_groups as delete_groups_task
 from sentry.tasks.integrations import kick_off_status_syncs
@@ -81,7 +81,7 @@ def build_query_params_from_request(request, organization, projects, environment
         except InvalidSearchQuery as e:
             raise ValidationError(u'Your search query could not be parsed: {}'.format(e.message))
 
-        validate_search_filter_permissions(organization, search_filters)
+        validate_search_filter_permissions(organization, search_filters, request.user)
         query_kwargs['search_filters'] = search_filters
 
     return query_kwargs
@@ -95,7 +95,7 @@ advanced_search_features = [
 ]
 
 
-def validate_search_filter_permissions(organization, search_filters):
+def validate_search_filter_permissions(organization, search_filters, user):
     """
     Verifies that an organization is allowed to perform the query that they
     submitted.
@@ -112,6 +112,11 @@ def validate_search_filter_permissions(organization, search_filters):
     for search_filter in search_filters:
         for feature_condition, feature_name in advanced_search_features:
             if feature_condition(search_filter):
+                advanced_search_feature_gated.send_robust(
+                    user=user,
+                    organization=organization,
+                    sender=validate_search_filter_permissions,
+                )
                 raise ValidationError(
                     u'You need access to the advanced search feature to use {}'.format(
                         feature_name),
diff --git a/src/sentry/receivers/features.py b/src/sentry/receivers/features.py
index 83ef46071b..73f650edc9 100644
--- a/src/sentry/receivers/features.py
+++ b/src/sentry/receivers/features.py
@@ -10,6 +10,7 @@ from sentry.plugins.bases.notify import NotificationPlugin
 from sentry.receivers.rules import DEFAULT_RULE_LABEL, DEFAULT_RULE_DATA
 from sentry.signals import (
     advanced_search,
+    advanced_search_feature_gated,
     alert_rule_created,
     data_scrubber_enabled,
     deploy_created,
@@ -185,6 +186,22 @@ def record_advanced_search(project, **kwargs):
     )
 
 
+@advanced_search_feature_gated.connect(weak=False)
+def record_advanced_search_feature_gated(user, organization, **kwargs):
+    if user and user.is_authenticated():
+        user_id = default_user_id = user.id
+    else:
+        user_id = None
+        default_user_id = organization.get_default_owner().id
+
+    analytics.record(
+        'advanced_search.feature_gated',
+        user_id=user_id,
+        default_user_id=default_user_id,
+        organization_id=organization.id,
+    )
+
+
 @save_search_created.connect(weak=False)
 def record_save_search_created(project, user, **kwargs):
     FeatureAdoption.objects.record(
diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index b1f157c3e3..0770aa2cdb 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -88,6 +88,7 @@ issue_resolved = BetterSignal(
         "resolution_type"])
 
 advanced_search = BetterSignal(providing_args=["project"])
+advanced_search_feature_gated = BetterSignal(providing_args=["organization", "user"])
 save_search_created = BetterSignal(providing_args=["project", "user"])
 inbound_filter_toggled = BetterSignal(providing_args=["project"])
 sso_enabled = BetterSignal(providing_args=["organization", "user", "provider"])
diff --git a/tests/sentry/api/helpers/test_group_index.py b/tests/sentry/api/helpers/test_group_index.py
index 21f3b2e832..34d17f9f86 100644
--- a/tests/sentry/api/helpers/test_group_index.py
+++ b/tests/sentry/api/helpers/test_group_index.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+from mock import patch
+
 from sentry.api.helpers.group_index import (
     validate_search_filter_permissions,
     ValidationError,
@@ -11,9 +13,18 @@ from sentry.testutils import TestCase
 class ValidateSearchFilterPermissionsTest(TestCase):
 
     def run_test(self, query):
-        validate_search_filter_permissions(self.organization, parse_search_query(query))
+        validate_search_filter_permissions(self.organization, parse_search_query(query), self.user)
+
+    def assert_analytics_recorded(self, mock_record):
+        mock_record.assert_called_with(
+            'advanced_search.feature_gated',
+            user_id=self.user.id,
+            default_user_id=self.user.id,
+            organization_id=self.organization.id,
+        )
 
-    def test_negative(self):
+    @patch('sentry.analytics.record')
+    def test_negative(self, mock_record):
         query = '!has:user'
         with self.feature(
                 {'organizations:advanced-search': False},
@@ -21,6 +32,7 @@ class ValidateSearchFilterPermissionsTest(TestCase):
             self.run_test(query)
 
         self.run_test(query)
+        self.assert_analytics_recorded(mock_record)
 
         query = '!something:123'
         with self.feature(
@@ -29,8 +41,10 @@ class ValidateSearchFilterPermissionsTest(TestCase):
             self.run_test(query)
 
         self.run_test(query)
+        self.assert_analytics_recorded(mock_record)
 
-    def test_wildcard(self):
+    @patch('sentry.analytics.record')
+    def test_wildcard(self, mock_record):
         query = 'abc:hello*'
         with self.feature(
                 {'organizations:advanced-search': False},
@@ -38,6 +52,7 @@ class ValidateSearchFilterPermissionsTest(TestCase):
             self.run_test(query)
 
         self.run_test(query)
+        self.assert_analytics_recorded(mock_record)
 
         query = 'raw * search'
         with self.feature(
@@ -46,3 +61,4 @@ class ValidateSearchFilterPermissionsTest(TestCase):
             self.run_test(query)
 
         self.run_test(query)
+        self.assert_analytics_recorded(mock_record)
diff --git a/tests/snuba/api/endpoints/test_organization_group_index.py b/tests/snuba/api/endpoints/test_organization_group_index.py
index e55dabb884..eed2a0e756 100644
--- a/tests/snuba/api/endpoints/test_organization_group_index.py
+++ b/tests/snuba/api/endpoints/test_organization_group_index.py
@@ -423,8 +423,14 @@ class GroupListTest(APITestCase, SnubaTestCase):
             response = self.get_valid_response(statsPeriod='1h')
             assert len(response.data) == 0
 
-    def test_advanced_search_errors(self):
+    @patch('sentry.analytics.record')
+    def test_advanced_search_errors(self, mock_record):
         self.login_as(user=self.user)
+        response = self.get_response(sort_by='date', query='!has:user')
+        assert response.status_code == 200, response.data
+        assert not any(
+            c[0][0] == 'advanced_search.feature_gated' for c in mock_record.call_args_list)
+
         with self.feature({'organizations:advanced-search': False}):
             response = self.get_response(sort_by='date', query='!has:user')
             assert response.status_code == 400, response.data
@@ -433,8 +439,12 @@ class GroupListTest(APITestCase, SnubaTestCase):
                 'search' == response.data['detail']
             )
 
-        response = self.get_response(sort_by='date', query='!has:user')
-        assert response.status_code == 200, response.data
+            mock_record.assert_called_with(
+                'advanced_search.feature_gated',
+                user_id=self.user.id,
+                default_user_id=self.user.id,
+                organization_id=self.organization.id,
+            )
 
 
 class GroupUpdateTest(APITestCase, SnubaTestCase):
