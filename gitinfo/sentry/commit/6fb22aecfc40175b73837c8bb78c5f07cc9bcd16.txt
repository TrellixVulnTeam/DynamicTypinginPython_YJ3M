commit 6fb22aecfc40175b73837c8bb78c5f07cc9bcd16
Author: Matej Minar <matej.minar@sentry.io>
Date:   Mon Dec 2 12:29:38 2019 +0100

    feat(ui): Add a group event attachments screen (#15831)
    
    With a limit on the attachments per group, using the events view is no longer practical.
    
    This PR adds a new "Event attachments" screen to the issue group with the ability to filter/download/delete attachments.
    
    The new delete attachment button is also available on the event detail screen.

diff --git a/src/sentry/api/endpoints/event_attachment_details.py b/src/sentry/api/endpoints/event_attachment_details.py
index 50d3fc6a84..de6944561e 100644
--- a/src/sentry/api/endpoints/event_attachment_details.py
+++ b/src/sentry/api/endpoints/event_attachment_details.py
@@ -109,3 +109,33 @@ class EventAttachmentDetailsEndpoint(ProjectEndpoint):
                 "dateCreated": attachment.file.timestamp,
             }
         )
+
+    def delete(self, request, project, event_id, attachment_id):
+        """
+        Delete an Event Attachment by ID
+        ````````````````````````````````
+
+        Delete an attachment on the given event.
+
+        :pparam string event_id: the identifier of the event.
+        :pparam string attachment_id: the identifier of the attachment.
+        :auth: required
+        """
+        if not features.has(
+            "organizations:event-attachments", project.organization, actor=request.user
+        ):
+            return self.respond(status=404)
+
+        try:
+            attachment = (
+                EventAttachment.objects.filter(
+                    project_id=project.id, event_id=event_id, id=attachment_id
+                )
+                .select_related("file")
+                .get()
+            )
+        except EventAttachment.DoesNotExist:
+            return self.respond({"detail": "Attachment not found"}, status=404)
+
+        attachment.delete()
+        return self.respond(status=204)
diff --git a/src/sentry/api/endpoints/group_attachments.py b/src/sentry/api/endpoints/group_attachments.py
new file mode 100644
index 0000000000..631cefa3bf
--- /dev/null
+++ b/src/sentry/api/endpoints/group_attachments.py
@@ -0,0 +1,54 @@
+from __future__ import absolute_import
+
+from sentry import features
+from sentry.api.bases.group import GroupEndpoint
+from sentry.api.serializers import serialize, EventAttachmentSerializer
+from sentry.api.paginator import DateTimePaginator
+from sentry.models import EventAttachment
+from sentry.api.base import EnvironmentMixin
+
+
+class GroupEventAttachmentSerializer(EventAttachmentSerializer):
+    """
+    Serializes event attachments with event id for rendering in the group event
+    attachments UI.
+    """
+
+    def serialize(self, obj, attrs, user):
+        result = super(GroupEventAttachmentSerializer, self).serialize(obj, attrs, user)
+        result["event_id"] = obj.event_id
+        return result
+
+
+class GroupAttachmentsEndpoint(GroupEndpoint, EnvironmentMixin):
+    def get(self, request, group):
+        """
+        List Event Attachments
+        ``````````````````````
+
+        Returns a list of event attachments for an issue.
+
+        :pparam string issue_id: the ID of the issue to retrieve.
+        :pparam list   types:    a list of attachment types to filter for.
+        :auth: required
+        """
+
+        if not features.has(
+            "organizations:event-attachments", group.project.organization, actor=request.user
+        ):
+            return self.respond(status=404)
+
+        attachments = EventAttachment.objects.filter(group_id=group.id).select_related("file")
+
+        types = request.GET.getlist("types") or ()
+        if types:
+            attachments = attachments.filter(file__type__in=types)
+
+        return self.paginate(
+            default_per_page=20,
+            request=request,
+            queryset=attachments,
+            order_by="-date_added",
+            on_results=lambda x: serialize(x, request.user, GroupEventAttachmentSerializer()),
+            paginator_cls=DateTimePaginator,
+        )
diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 81bfab86c4..1ab3985fa1 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -178,7 +178,8 @@ class GroupDetailsEndpoint(GroupEndpoint, EnvironmentMixin):
         """
         # TODO(dcramer): handle unauthenticated/public response
 
-        environments = get_environments(request, group.project.organization)
+        organization = group.project.organization
+        environments = get_environments(request, organization)
         environment_ids = [e.id for e in environments]
 
         # WARNING: the rest of this endpoint relies on this serializer
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index ca8be3dd0e..2f1020a7cf 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -31,6 +31,7 @@ from .endpoints.event_file_committers import EventFileCommittersEndpoint
 from .endpoints.event_grouping_info import EventGroupingInfoEndpoint
 from .endpoints.event_owners import EventOwnersEndpoint
 from .endpoints.filechange import CommitFileChangeEndpoint
+from .endpoints.group_attachments import GroupAttachmentsEndpoint
 from .endpoints.group_details import GroupDetailsEndpoint
 from .endpoints.group_events import GroupEventsEndpoint
 from .endpoints.group_events_latest import GroupEventsLatestEndpoint
@@ -327,6 +328,7 @@ GROUP_URLS = [
         r"^(?P<issue_id>[^\/]+)/(?:user-feedback|user-reports)/$",
         GroupUserReportsEndpoint.as_view(),
     ),
+    url(r"^(?P<issue_id>[^\/]+)/attachments/$", GroupAttachmentsEndpoint.as_view()),
     url(r"^(?P<issue_id>[^\/]+)/similar/$", GroupSimilarIssuesEndpoint.as_view()),
     url(r"^(?P<issue_id>[^\/]+)/external-issues/$", GroupExternalIssuesEndpoint.as_view()),
     url(
diff --git a/src/sentry/lang/native/utils.py b/src/sentry/lang/native/utils.py
index 89617f758e..1b57321914 100644
--- a/src/sentry/lang/native/utils.py
+++ b/src/sentry/lang/native/utils.py
@@ -115,10 +115,6 @@ def get_event_attachment(data, attachment_type):
     return next((a for a in attachments if a.type == attachment_type), None)
 
 
-def get_crashreport_key(group_id):
-    return u"cr:%s" % (group_id,)
-
-
 def convert_crashreport_count(value):
     """
     Shim to read both legacy and new `sentry:store_crash_reports` project and
diff --git a/src/sentry/models/eventattachment.py b/src/sentry/models/eventattachment.py
index 2ded99d3a0..add81fa6d3 100644
--- a/src/sentry/models/eventattachment.py
+++ b/src/sentry/models/eventattachment.py
@@ -1,11 +1,24 @@
 from __future__ import absolute_import
 
+from django.core.cache import cache
 from django.db import models
 from django.utils import timezone
 
 from sentry.db.models import BoundedBigIntegerField, FlexibleForeignKey, Model, sane_repr
 
 
+# Attachment file types that are considered a crash report (PII relevant)
+CRASH_REPORT_TYPES = ("event.minidump", "event.applecrashreport")
+
+
+def get_crashreport_key(group_id):
+    """
+    Returns the ``django.core.cache`` key for groups that have exceeded their
+    configured crash report limit.
+    """
+    return u"cr:%s" % (group_id,)
+
+
 class EventAttachment(Model):
     __core__ = False
 
@@ -26,4 +39,10 @@ class EventAttachment(Model):
 
     def delete(self, *args, **kwargs):
         super(EventAttachment, self).delete(*args, **kwargs)
+
+        # Always prune the group cache. Even if there are more crash reports
+        # stored than the now configured limit, the cache will be repopulated
+        # with the next incoming crash report.
+        cache.delete(get_crashreport_key(self.group_id))
+
         self.file.delete()
diff --git a/src/sentry/static/sentry/app/components/badge.tsx b/src/sentry/static/sentry/app/components/badge.tsx
index 8b5d2cf292..38df65496c 100644
--- a/src/sentry/static/sentry/app/components/badge.tsx
+++ b/src/sentry/static/sentry/app/components/badge.tsx
@@ -11,7 +11,7 @@ const priorityColors = {
 } as const;
 
 type Props = React.HTMLProps<HTMLSpanElement> & {
-  text?: string;
+  text?: string | number;
   priority?: keyof typeof priorityColors;
   className?: string;
 };
@@ -38,7 +38,7 @@ const Badge = styled(({priority, text, ...props}: Props) => (
 `;
 
 Badge.propTypes = {
-  text: PropTypes.string,
+  text: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
   priority: PropTypes.oneOf(['strong', 'new', 'highlight']),
 } as any;
 
diff --git a/src/sentry/static/sentry/app/components/events/eventAttachmentActions.tsx b/src/sentry/static/sentry/app/components/events/eventAttachmentActions.tsx
new file mode 100644
index 0000000000..12a2b500a3
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/eventAttachmentActions.tsx
@@ -0,0 +1,74 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t} from 'app/locale';
+import Button from 'app/components/button';
+import space from 'app/styles/space';
+import Confirm from 'app/components/confirm';
+import withApi from 'app/utils/withApi';
+import {Client} from 'app/api';
+
+type Props = {
+  api: Client;
+  url: string | null;
+  attachmentId: string;
+  onDelete: (attachmentId: string) => void;
+};
+
+class EventAttachmentActions extends React.Component<Props> {
+  handleDelete = async () => {
+    const {api, url, onDelete, attachmentId} = this.props;
+
+    if (url) {
+      try {
+        await api.requestPromise(url, {
+          method: 'DELETE',
+        });
+
+        onDelete(attachmentId);
+      } catch (_err) {
+        // TODO: Error-handling
+      }
+    }
+  };
+
+  render() {
+    const {url} = this.props;
+
+    return (
+      <React.Fragment>
+        <DownloadButton
+          size="xsmall"
+          icon="icon-download"
+          href={url ? `${url}?download=1` : ''}
+          disabled={!url}
+          title={!url ? t('Insufficient permissions to download attachments') : undefined}
+        >
+          {t('Download')}
+        </DownloadButton>
+
+        <Confirm
+          confirmText={t('Delete')}
+          message={t('Are you sure you wish to delete this file?')}
+          priority="danger"
+          onConfirm={this.handleDelete}
+          disabled={!url}
+        >
+          <Button
+            size="xsmall"
+            icon="icon-trash"
+            disabled={!url}
+            priority="danger"
+            title={!url ? t('Insufficient permissions to delete attachments') : undefined}
+          />
+        </Confirm>
+      </React.Fragment>
+    );
+  }
+}
+
+const DownloadButton = styled(Button)`
+  margin-right: ${space(0.5)};
+`;
+
+export default withApi(EventAttachmentActions);
diff --git a/src/sentry/static/sentry/app/components/events/eventAttachments.tsx b/src/sentry/static/sentry/app/components/events/eventAttachments.tsx
index dcaaec6f8d..496b3db943 100644
--- a/src/sentry/static/sentry/app/components/events/eventAttachments.tsx
+++ b/src/sentry/static/sentry/app/components/events/eventAttachments.tsx
@@ -8,10 +8,10 @@ import {Panel, PanelBody, PanelItem} from 'app/components/panels';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 import {t} from 'app/locale';
 import AttachmentUrl from 'app/utils/attachmentUrl';
-import Button from 'app/components/button';
 import FileSize from 'app/components/fileSize';
 import space from 'app/styles/space';
 import withApi from 'app/utils/withApi';
+import EventAttachmentActions from 'app/components/events/eventAttachmentActions';
 
 type Props = {
   api: Client;
@@ -21,7 +21,7 @@ type Props = {
 };
 
 type State = {
-  attachmentList: EventAttachment[] | null;
+  attachmentList: EventAttachment[];
   expanded: boolean;
 };
 
@@ -34,7 +34,7 @@ class EventAttachments extends React.Component<Props, State> {
   };
 
   state: State = {
-    attachmentList: null,
+    attachmentList: [],
     expanded: false,
   };
 
@@ -77,15 +77,25 @@ class EventAttachments extends React.Component<Props, State> {
     } catch (_err) {
       // TODO: Error-handling
       this.setState({
-        attachmentList: null,
+        attachmentList: [],
       });
     }
   }
 
+  handleDelete = async (deletedAttachmentId: string) => {
+    this.setState(prevState => {
+      return {
+        attachmentList: prevState.attachmentList.filter(
+          attachment => attachment.id !== deletedAttachmentId
+        ),
+      };
+    });
+  };
+
   render() {
     const {attachmentList} = this.state;
 
-    if (!attachmentList || !attachmentList.length) {
+    if (!attachmentList.length) {
       return null;
     }
 
@@ -104,23 +114,15 @@ class EventAttachments extends React.Component<Props, State> {
                     <FileSizeWithGap bytes={attachment.size} />
                     <AttachmentUrl
                       projectId={this.props.projectId}
-                      event={this.props.event}
+                      eventId={this.props.event.id}
                       attachment={attachment}
                     >
-                      {downloadUrl => (
-                        <Button
-                          size="xsmall"
-                          icon="icon-download"
-                          href={downloadUrl || ''}
-                          disabled={!downloadUrl}
-                          title={
-                            !downloadUrl
-                              ? t('Insufficient permissions to download attachments')
-                              : undefined
-                          }
-                        >
-                          {t('Download')}
-                        </Button>
+                      {url => (
+                        <EventAttachmentActions
+                          url={url}
+                          onDelete={this.handleDelete}
+                          attachmentId={attachment.id}
+                        />
                       )}
                     </AttachmentUrl>
                   </PanelItem>
diff --git a/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx b/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
index 1fa678e8f9..1e8027551e 100644
--- a/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
+++ b/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
@@ -30,11 +30,15 @@ class EventsTableRow extends React.Component {
       event.crashFile.type === 'event.minidump' ? 'Minidump' : 'Crash file';
 
     return (
-      <AttachmentUrl projectId={projectId} event={event} attachment={event.crashFile}>
-        {downloadUrl =>
-          downloadUrl && (
+      <AttachmentUrl
+        projectId={projectId}
+        eventId={event.id}
+        attachment={event.crashFile}
+      >
+        {url =>
+          url && (
             <small>
-              {crashFileType}: <a href={downloadUrl}>{event.crashFile.name}</a> (
+              {crashFileType}: <a href={`${url}?download=1`}>{event.crashFile.name}</a> (
               <FileSize bytes={event.crashFile.size} />)
             </small>
           )
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index adce2f936d..13456f01a1 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1086,6 +1086,13 @@ function routes() {
             }
             component={errorHandler(LazyLoad)}
           />
+          <Route
+            path="/organizations/:orgId/issues/:groupId/attachments/"
+            componentPromise={() =>
+              import(/* webpackChunkName: "GroupEventAttachments" */ 'app/views/organizationGroupDetails/groupEventAttachments')
+            }
+            component={errorHandler(LazyLoad)}
+          />
           <Route
             path="/organizations/:orgId/issues/:groupId/similar/"
             componentPromise={() =>
diff --git a/src/sentry/static/sentry/app/stores/groupStore.jsx b/src/sentry/static/sentry/app/stores/groupStore.jsx
index 6c15b85387..5ed671f5b8 100644
--- a/src/sentry/static/sentry/app/stores/groupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupStore.jsx
@@ -231,18 +231,18 @@ const GroupStore = Reflux.createStore({
     });
   },
 
-  onAssignTo(changeId, itemId, data) {
+  onAssignTo(_changeId, itemId, _data) {
     this.addStatus(itemId, 'assignTo');
     this.trigger(new Set([itemId]));
   },
 
   // TODO(dcramer): This is not really the best place for this
-  onAssignToError(changeId, itemId, error) {
+  onAssignToError(_changeId, itemId, _error) {
     this.clearStatus(itemId, 'assignTo');
     showAlert(t('Unable to change assignee. Please try again.'), 'error');
   },
 
-  onAssignToSuccess(changeId, itemId, response) {
+  onAssignToSuccess(_changeId, itemId, response) {
     const item = this.get(itemId);
     if (!item) {
       return;
@@ -252,7 +252,7 @@ const GroupStore = Reflux.createStore({
     this.trigger(new Set([itemId]));
   },
 
-  onDelete(changeId, itemIds) {
+  onDelete(_changeId, itemIds) {
     itemIds = this._itemIdsOrAll(itemIds);
     itemIds.forEach(itemId => {
       this.addStatus(itemId, 'delete');
@@ -260,7 +260,7 @@ const GroupStore = Reflux.createStore({
     this.trigger(new Set(itemIds));
   },
 
-  onDeleteError(changeId, itemIds, response) {
+  onDeleteError(_changeId, itemIds, _response) {
     showAlert(t('Unable to delete events. Please try again.'), 'error');
 
     if (!itemIds) {
@@ -273,7 +273,7 @@ const GroupStore = Reflux.createStore({
     this.trigger(new Set(itemIds));
   },
 
-  onDeleteSuccess(changeId, itemIds, response) {
+  onDeleteSuccess(_changeId, itemIds, _response) {
     itemIds = this._itemIdsOrAll(itemIds);
     const itemIdSet = new Set(itemIds);
     itemIds.forEach(itemId => {
@@ -285,18 +285,18 @@ const GroupStore = Reflux.createStore({
     this.trigger(new Set(itemIds));
   },
 
-  onDiscard(changeId, itemId) {
+  onDiscard(_changeId, itemId) {
     this.addStatus(itemId, 'discard');
     this.trigger(new Set([itemId]));
   },
 
-  onDiscardError(changeId, itemId, response) {
+  onDiscardError(_changeId, itemId, _response) {
     this.clearStatus(itemId, 'discard');
     showAlert(t('Unable to discard event. Please try again.'), 'error');
     this.trigger(new Set([itemId]));
   },
 
-  onDiscardSuccess(changeId, itemId, response) {
+  onDiscardSuccess(_changeId, itemId, _response) {
     delete this.statuses[itemId];
     this.clearStatus(itemId, 'discard');
     this.items = this.items.filter(item => item.id !== itemId);
@@ -304,7 +304,7 @@ const GroupStore = Reflux.createStore({
     this.trigger(new Set([itemId]));
   },
 
-  onMerge(changeId, itemIds) {
+  onMerge(_changeId, itemIds) {
     itemIds = this._itemIdsOrAll(itemIds);
 
     itemIds.forEach(itemId => {
@@ -315,7 +315,7 @@ const GroupStore = Reflux.createStore({
     this.trigger(new Set(itemIds));
   },
 
-  onMergeError(changeId, itemIds, response) {
+  onMergeError(_changeId, itemIds, _response) {
     itemIds = this._itemIdsOrAll(itemIds);
 
     itemIds.forEach(itemId => {
@@ -325,7 +325,7 @@ const GroupStore = Reflux.createStore({
     this.trigger(new Set(itemIds));
   },
 
-  onMergeSuccess(changeId, mergedIds, response) {
+  onMergeSuccess(_changeId, mergedIds, response) {
     mergedIds = this._itemIdsOrAll(mergedIds); // everything on page
 
     mergedIds.forEach(itemId => {
@@ -367,7 +367,7 @@ const GroupStore = Reflux.createStore({
     this.trigger(new Set(itemIds));
   },
 
-  onUpdateError(changeId, itemIds, error, failSilently) {
+  onUpdateError(changeId, itemIds, _error, failSilently) {
     itemIds = this._itemIdsOrAll(itemIds);
 
     this.pendingChanges.remove(changeId);
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 4dfa8b6bd5..1901de0ff9 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -92,6 +92,7 @@ export type EventAttachment = {
   sha1: string;
   size: number;
   type: string;
+  event_id: string;
 };
 
 type EntryType = {
diff --git a/src/sentry/static/sentry/app/utils/attachmentUrl.tsx b/src/sentry/static/sentry/app/utils/attachmentUrl.tsx
index 0fa8424119..045f98f71e 100644
--- a/src/sentry/static/sentry/app/utils/attachmentUrl.tsx
+++ b/src/sentry/static/sentry/app/utils/attachmentUrl.tsx
@@ -1,7 +1,7 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
-import {OrganizationDetailed, Event, EventAttachment} from 'app/types';
+import {OrganizationDetailed, EventAttachment} from 'app/types';
 import ConfigStore from 'app/stores/configStore';
 import withOrganization from 'app/utils/withOrganization';
 import SentryTypes from 'app/sentryTypes';
@@ -9,7 +9,7 @@ import SentryTypes from 'app/sentryTypes';
 type Props = {
   organization: OrganizationDetailed;
   projectId: string;
-  event: Event;
+  eventId: string;
   attachment: EventAttachment;
   children: (downloadUrl: string | null) => React.ReactNode;
 };
@@ -18,7 +18,7 @@ class AttachmentUrl extends React.PureComponent<Props> {
   static propTypes = {
     organization: SentryTypes.Organization.isRequired,
     projectId: PropTypes.string.isRequired,
-    event: SentryTypes.Event.isRequired,
+    eventId: PropTypes.string.isRequired,
     attachment: SentryTypes.EventAttachment.isRequired,
     children: PropTypes.func.isRequired,
   };
@@ -45,10 +45,10 @@ class AttachmentUrl extends React.PureComponent<Props> {
   }
 
   getDownloadUrl() {
-    const {attachment, organization, event, projectId} = this.props;
-    return `/api/0/projects/${organization.slug}/${projectId}/events/${
-      event.id
-    }/attachments/${attachment.id}/?download=1`;
+    const {attachment, organization, eventId, projectId} = this.props;
+    return `/api/0/projects/${
+      organization.slug
+    }/${projectId}/events/${eventId}/attachments/${attachment.id}/`;
   }
 
   render() {
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsFilter.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsFilter.tsx
new file mode 100644
index 0000000000..ac89a7e663
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsFilter.tsx
@@ -0,0 +1,62 @@
+import React from 'react';
+import omit from 'lodash/omit';
+import xor from 'lodash/xor';
+import {withRouter} from 'react-router';
+import {WithRouterProps} from 'react-router/lib/withRouter';
+import styled from 'react-emotion';
+
+import space from 'app/styles/space';
+import {t} from 'app/locale';
+import ButtonBar from 'app/components/buttonBar';
+import Button from 'app/components/button';
+
+const GroupEventAttachmentsFilter = (props: WithRouterProps) => {
+  const {query, pathname} = props.location;
+  const {types} = query;
+  const onlyCrashReportTypes = ['event.minidump', 'event.applecrashreport'];
+  const allAttachmentsQuery = omit(query, 'types');
+  const onlyCrashReportsQuery = {
+    ...query,
+    types: onlyCrashReportTypes,
+  };
+
+  return (
+    <FilterWrapper>
+      <MergedButtonBar>
+        <Button
+          size="small"
+          to={{pathname, query: allAttachmentsQuery}}
+          priority={types === undefined ? 'primary' : 'default'}
+        >
+          {t('All Attachments')}
+        </Button>
+        <Button
+          size="small"
+          to={{pathname, query: onlyCrashReportsQuery}}
+          priority={xor(onlyCrashReportTypes, types).length === 0 ? 'primary' : 'default'}
+        >
+          {t('Only Crash Reports')}
+        </Button>
+      </MergedButtonBar>
+    </FilterWrapper>
+  );
+};
+
+const FilterWrapper = styled('div')`
+  display: flex;
+  justify-content: flex-end;
+  margin-bottom: ${space(3)};
+`;
+
+const MergedButtonBar = styled(ButtonBar)`
+  & > a:first-child:not(:last-child) {
+    border-top-right-radius: 0;
+    border-bottom-right-radius: 0;
+  }
+  & > a:last-child:not(:first-child) {
+    border-top-left-radius: 0;
+    border-bottom-left-radius: 0;
+  }
+`;
+
+export default withRouter(GroupEventAttachmentsFilter);
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTable.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTable.tsx
new file mode 100644
index 0000000000..fe9bca7c8a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTable.tsx
@@ -0,0 +1,57 @@
+import React from 'react';
+
+import {EventAttachment} from 'app/types';
+import {t} from 'app/locale';
+import GroupEventAttachmentsTableRow from 'app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTableRow';
+
+type Props = {
+  attachments: EventAttachment[];
+  orgId: string;
+  projectId: string;
+  groupId: string;
+  onDelete: (attachmentId: string) => void;
+  deletedAttachments: string[];
+};
+
+class GroupEventAttachmentsTable extends React.Component<Props> {
+  render() {
+    const {
+      attachments,
+      orgId,
+      projectId,
+      groupId,
+      onDelete,
+      deletedAttachments,
+    } = this.props;
+    const tableRowNames = [t('Name'), t('Type'), t('Size'), t('Actions')];
+
+    return (
+      <table className="table events-table">
+        <thead>
+          <tr>
+            {tableRowNames.map(name => {
+              return <th key={name}>{name}</th>;
+            })}
+          </tr>
+        </thead>
+        <tbody>
+          {attachments.map(attachment => {
+            return (
+              <GroupEventAttachmentsTableRow
+                key={attachment.id}
+                attachment={attachment}
+                orgId={orgId}
+                projectId={projectId}
+                groupId={groupId}
+                onDelete={onDelete}
+                isDeleted={deletedAttachments.some(id => attachment.id === id)}
+              />
+            );
+          })}
+        </tbody>
+      </table>
+    );
+  }
+}
+
+export default GroupEventAttachmentsTable;
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTableRow.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTableRow.tsx
new file mode 100644
index 0000000000..d973b629e7
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTableRow.tsx
@@ -0,0 +1,86 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import Link from 'app/components/links/link';
+import {t} from 'app/locale';
+import DateTime from 'app/components/dateTime';
+import FileSize from 'app/components/fileSize';
+import {EventAttachment} from 'app/types';
+import AttachmentUrl from 'app/utils/attachmentUrl';
+import EventAttachmentActions from 'app/components/events/eventAttachmentActions';
+import {types} from 'app/views/organizationGroupDetails/groupEventAttachments/types';
+
+type Props = {
+  orgId: string;
+  projectId: string;
+  groupId: string;
+  attachment: EventAttachment;
+  onDelete: (attachmentId: string) => void;
+  isDeleted: boolean;
+};
+
+class GroupEventAttachmentsTableRow extends React.Component<Props> {
+  getEventUrl() {
+    const {attachment, orgId, groupId} = this.props;
+
+    return `/organizations/${orgId}/issues/${groupId}/events/${attachment.event_id}/`;
+  }
+
+  getAttachmentTypeDisplayName(type: string) {
+    return types[type] || t('Other');
+  }
+
+  render() {
+    const {attachment, projectId, onDelete, isDeleted} = this.props;
+
+    return (
+      <TableRow isDeleted={isDeleted}>
+        <td>
+          <h5>
+            {attachment.name}
+            <br />
+            <small>
+              <DateTime date={attachment.dateCreated} /> &middot;{' '}
+              <Link to={this.getEventUrl()}>{attachment.event_id}</Link>
+            </small>
+          </h5>
+        </td>
+
+        <td>{this.getAttachmentTypeDisplayName(attachment.type)}</td>
+
+        <td>
+          <FileSize bytes={attachment.size} />
+        </td>
+
+        <td>
+          <AttachmentUrl
+            projectId={projectId}
+            eventId={attachment.event_id}
+            attachment={attachment}
+          >
+            {url =>
+              !isDeleted && (
+                <EventAttachmentActions
+                  url={url}
+                  onDelete={onDelete}
+                  attachmentId={attachment.id}
+                />
+              )
+            }
+          </AttachmentUrl>
+        </td>
+      </TableRow>
+    );
+  }
+}
+
+type TableRowProps = {isDeleted: boolean};
+const TableRow = styled('tr')`
+  opacity: ${(props: TableRowProps) => (props.isDeleted ? 0.3 : 1)};
+  td {
+    text-decoration: ${(props: TableRowProps) =>
+      props.isDeleted ? 'line-through' : 'normal'};
+  }
+`;
+
+export default GroupEventAttachmentsTableRow;
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/index.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/index.tsx
new file mode 100644
index 0000000000..5b4dbe7930
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/index.tsx
@@ -0,0 +1,158 @@
+import React from 'react';
+import pick from 'lodash/pick';
+
+import {Panel, PanelBody} from 'app/components/panels';
+import {t} from 'app/locale';
+import withApi from 'app/utils/withApi';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
+import GroupEventAttachmentsTable from 'app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsTable';
+import GroupEventAttachmentsFilter from 'app/views/organizationGroupDetails/groupEventAttachments/groupEventAttachmentsFilter';
+import LoadingError from 'app/components/loadingError';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import Pagination from 'app/components/pagination';
+import parseApiError from 'app/utils/parseApiError';
+import {RouterProps, EventAttachment, Group} from 'app/types';
+import {Client} from 'app/api';
+import Feature from 'app/components/acl/feature';
+import FeatureDisabled from 'app/components/acl/featureDisabled';
+
+type Props = RouterProps & {
+  api: Client;
+  group: Group;
+};
+
+type State = {
+  eventAttachmentsList: EventAttachment[];
+  deletedAttachments: string[];
+  loading: boolean;
+  error: null | string;
+  pageLinks: null | string;
+};
+
+class GroupEventAttachments extends React.Component<Props, State> {
+  state = {
+    eventAttachmentsList: [],
+    deletedAttachments: [],
+    loading: true,
+    error: null,
+    pageLinks: null,
+  };
+
+  componentWillMount() {
+    this.fetchData();
+  }
+
+  componentDidUpdate(prevProps: Props) {
+    if (this.props.location.search !== prevProps.location.search) {
+      this.fetchData();
+    }
+  }
+
+  handleDelete = (deletedAttachmentId: string) => {
+    this.setState(prevState => {
+      return {
+        deletedAttachments: [...prevState.deletedAttachments, deletedAttachmentId],
+      };
+    });
+  };
+
+  fetchData = () => {
+    this.setState({
+      loading: true,
+      error: null,
+    });
+
+    const query = {
+      ...pick(this.props.location.query, ['cursor', 'environment', 'types']),
+      limit: 50,
+    };
+
+    this.props.api.request(`/issues/${this.props.params.groupId}/attachments/`, {
+      query,
+      method: 'GET',
+      success: (data, _, jqXHR) => {
+        this.setState(prevState => ({
+          eventAttachmentsList: data,
+          error: null,
+          loading: false,
+          pageLinks: jqXHR ? jqXHR.getResponseHeader('Link') : prevState.pageLinks,
+        }));
+      },
+      error: err => {
+        this.setState({
+          error: parseApiError(err),
+          loading: false,
+        });
+      },
+    });
+  };
+
+  renderNoQueryResults() {
+    return (
+      <EmptyStateWarning>
+        <p>{t('Sorry, no event attachments match your search query.')}</p>
+      </EmptyStateWarning>
+    );
+  }
+
+  renderEmpty() {
+    return (
+      <EmptyStateWarning>
+        <p>{t("There don't seem to be any event attachments yet.")}</p>
+      </EmptyStateWarning>
+    );
+  }
+
+  renderResults() {
+    const {group, params} = this.props;
+    const {eventAttachmentsList, deletedAttachments} = this.state;
+
+    return (
+      <GroupEventAttachmentsTable
+        attachments={eventAttachmentsList}
+        orgId={params.orgId}
+        projectId={group.project.slug}
+        groupId={params.groupId}
+        onDelete={this.handleDelete}
+        deletedAttachments={deletedAttachments}
+      />
+    );
+  }
+
+  renderBody() {
+    let body;
+
+    if (this.state.loading) {
+      body = <LoadingIndicator />;
+    } else if (this.state.error) {
+      body = <LoadingError message={this.state.error} onRetry={this.fetchData} />;
+    } else if (this.state.eventAttachmentsList.length > 0) {
+      body = this.renderResults();
+    } else if (this.props.location.query.types) {
+      body = this.renderNoQueryResults();
+    } else {
+      body = this.renderEmpty();
+    }
+
+    return body;
+  }
+
+  render() {
+    return (
+      <Feature
+        features={['event-attachments']}
+        renderDisabled={() => <FeatureDisabled />}
+      >
+        <GroupEventAttachmentsFilter />
+        <Panel className="event-list">
+          <PanelBody>{this.renderBody()}</PanelBody>
+        </Panel>
+        <Pagination pageLinks={this.state.pageLinks} />
+      </Feature>
+    );
+  }
+}
+
+export {GroupEventAttachments};
+
+export default withApi(GroupEventAttachments);
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/types.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/types.tsx
new file mode 100644
index 0000000000..bf4a7f68d6
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventAttachments/types.tsx
@@ -0,0 +1,7 @@
+import {t} from 'app/locale';
+
+export const types = {
+  'event.minidump': t('Minidump'),
+  'event.applecrashreport': t('Apple Crash Report'),
+  'event.attachment': t('Other'),
+};
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/header.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/header.jsx
index aee60c736c..04bea7ac66 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/header.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/header.jsx
@@ -64,7 +64,9 @@ class GroupHeader extends React.Component {
 
   render() {
     const {project, group} = this.props;
+    const {organization, location} = this.context;
     const projectFeatures = new Set(project ? project.features : []);
+    const organizationFeatures = new Set(organization ? organization.features : []);
     const userCount = group.userCount;
 
     let className = 'group-detail';
@@ -80,12 +82,12 @@ class GroupHeader extends React.Component {
     }
 
     const {memberList} = this.state;
-    const {organization, location} = this.context;
     const groupId = group.id;
     const orgId = organization.slug;
     const message = this.getMessage();
 
     const hasSimilarView = projectFeatures.has('similarity-view');
+    const hasEventAttachments = organizationFeatures.has('event-attachments');
 
     const baseUrl = `/organizations/${orgId}/issues/`;
 
@@ -215,6 +217,14 @@ class GroupHeader extends React.Component {
           >
             {t('User Feedback')} <Badge text={group.userReportCount} />
           </ListLink>
+          {hasEventAttachments && (
+            <ListLink
+              to={`${baseUrl}${groupId}/attachments/${location.search}`}
+              isActive={() => location.pathname.includes('/attachments/')}
+            >
+              {t('Attachments')}
+            </ListLink>
+          )}
           <ListLink
             to={`${baseUrl}${groupId}/tags/${location.search}`}
             isActive={() => location.pathname.includes('/tags/')}
diff --git a/src/sentry/tasks/store.py b/src/sentry/tasks/store.py
index 3d92bdeb0f..d5da5ec431 100644
--- a/src/sentry/tasks/store.py
+++ b/src/sentry/tasks/store.py
@@ -14,11 +14,7 @@ from sentry import features, reprocessing
 from sentry.constants import DEFAULT_STORE_NORMALIZER_ARGS
 from sentry.attachments import attachment_cache
 from sentry.cache import default_cache
-from sentry.lang.native.utils import (
-    STORE_CRASH_REPORTS_ALL,
-    convert_crashreport_count,
-    get_crashreport_key,
-)
+from sentry.lang.native.utils import STORE_CRASH_REPORTS_ALL, convert_crashreport_count
 from sentry.tasks.base import instrumented_task
 from sentry.utils import metrics
 from sentry.utils.safe import safe_execute
@@ -27,7 +23,15 @@ from sentry.utils.data_filters import FilterStatKeys
 from sentry.utils.canonical import CanonicalKeyDict, CANONICAL_TYPES
 from sentry.utils.dates import to_datetime
 from sentry.utils.sdk import configure_scope
-from sentry.models import EventAttachment, File, ProjectOption, Activity, Project
+from sentry.models import (
+    EventAttachment,
+    File,
+    ProjectOption,
+    Activity,
+    Project,
+    CRASH_REPORT_TYPES,
+    get_crashreport_key,
+)
 
 error_logger = logging.getLogger("sentry.errors.events")
 info_logger = logging.getLogger("sentry.store")
@@ -35,9 +39,6 @@ info_logger = logging.getLogger("sentry.store")
 # Is reprocessing on or off by default?
 REPROCESSING_DEFAULT = False
 
-# Attachment file types that are considered a crash report (PII relevant)
-CRASH_REPORT_TYPES = ("event.minidump",)
-
 # Timeout for cached group crash report counts
 CRASH_REPORT_TIMEOUT = 24 * 3600  # one day
 
diff --git a/tests/js/spec/views/organizationGroupDetails/__snapshots__/organizationGroupEvents.spec.jsx.snap b/tests/js/spec/views/organizationGroupDetails/__snapshots__/organizationGroupEvents.spec.jsx.snap
index 988621d37d..7e4723791b 100644
--- a/tests/js/spec/views/organizationGroupDetails/__snapshots__/organizationGroupEvents.spec.jsx.snap
+++ b/tests/js/spec/views/organizationGroupDetails/__snapshots__/organizationGroupEvents.spec.jsx.snap
@@ -86,38 +86,7 @@ Array [
               "type": "event.minidump",
             }
           }
-          event={
-            Object {
-              "crashFile": Object {
-                "dateCreated": "2019-05-21T18:01:48.762Z",
-                "headers": Object {
-                  "Content-Type": "application/octet-stream",
-                },
-                "id": "12345",
-                "name": "name.dmp",
-                "sha1": "sha1",
-                "size": 123456,
-                "type": "event.minidump",
-              },
-              "culprit": "",
-              "dateCreated": "2019-05-21T18:00:23Z",
-              "event.type": "error",
-              "eventID": "123456",
-              "groupID": "1",
-              "id": "98654",
-              "location": "main.js",
-              "message": "TestException",
-              "platform": "native",
-              "projectID": "123",
-              "tags": Array [
-                Object {
-                  "key": "production",
-                  "value": "production",
-                },
-              ],
-              "title": "TestException",
-            }
-          }
+          eventId="98654"
           projectId="project-slug"
         >
           <AttachmentUrl
@@ -134,38 +103,7 @@ Array [
                 "type": "event.minidump",
               }
             }
-            event={
-              Object {
-                "crashFile": Object {
-                  "dateCreated": "2019-05-21T18:01:48.762Z",
-                  "headers": Object {
-                    "Content-Type": "application/octet-stream",
-                  },
-                  "id": "12345",
-                  "name": "name.dmp",
-                  "sha1": "sha1",
-                  "size": 123456,
-                  "type": "event.minidump",
-                },
-                "culprit": "",
-                "dateCreated": "2019-05-21T18:00:23Z",
-                "event.type": "error",
-                "eventID": "123456",
-                "groupID": "1",
-                "id": "98654",
-                "location": "main.js",
-                "message": "TestException",
-                "platform": "native",
-                "projectID": "123",
-                "tags": Array [
-                  Object {
-                    "key": "production",
-                    "value": "production",
-                  },
-                ],
-                "title": "TestException",
-              }
-            }
+            eventId="98654"
             organization={
               Object {
                 "access": Array [
diff --git a/tests/sentry/api/endpoints/test_event_attachment_details.py b/tests/sentry/api/endpoints/test_event_attachment_details.py
index 8e043f1d5f..46ef2508c1 100644
--- a/tests/sentry/api/endpoints/test_event_attachment_details.py
+++ b/tests/sentry/api/endpoints/test_event_attachment_details.py
@@ -66,6 +66,20 @@ class EventAttachmentDetailsTest(APITestCase, CreateAttachmentMixin):
         assert response.get("Content-Type") == "application/octet-stream"
         assert "File contents here" == six.BytesIO(b"".join(response.streaming_content)).getvalue()
 
+    def test_delete(self):
+        self.login_as(user=self.user)
+
+        self.create_attachment()
+        path = u"/api/0/projects/{}/{}/events/{}/attachments/{}/".format(
+            self.organization.slug, self.project.slug, self.event.event_id, self.attachment.id
+        )
+
+        with self.feature("organizations:event-attachments"):
+            response = self.client.delete(path)
+
+        assert response.status_code == 204, response.content
+        assert EventAttachment.objects.count() == 0
+
 
 class EventAttachmentDetailsPermissionTest(PermissionTestCase, CreateAttachmentMixin):
     def setUp(self):
diff --git a/tests/sentry/api/endpoints/test_group_attachments.py b/tests/sentry/api/endpoints/test_group_attachments.py
new file mode 100644
index 0000000000..561a21ea97
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_group_attachments.py
@@ -0,0 +1,69 @@
+from __future__ import absolute_import
+
+import six
+from six.moves.urllib.parse import urlencode
+
+from sentry.models import EventAttachment, File
+from sentry.testutils import APITestCase
+
+
+class GroupEventAttachmentsTest(APITestCase):
+    def create_attachment(self, type=None):
+        if type is None:
+            type = "event.attachment"
+
+        self.file = File.objects.create(name="hello.png", type=type)
+        self.file.putfile(six.BytesIO("File contents here"))
+
+        self.attachment = EventAttachment.objects.create(
+            event_id=self.event.event_id,
+            project_id=self.event.project_id,
+            group_id=self.group.id,
+            file=self.file,
+            name="hello.png",
+        )
+
+        return self.attachment
+
+    def path(self, types=None):
+        path = u"/api/0/issues/%s/attachments/" % (self.group.id,)
+
+        query = [("types", t) for t in types or ()]
+        if query:
+            path += "?" + urlencode(query)
+
+        return path
+
+    def test_basic(self):
+        self.login_as(user=self.user)
+
+        attachment = self.create_attachment()
+
+        with self.feature("organizations:event-attachments"):
+            response = self.client.get(self.path())
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]["id"] == six.text_type(attachment.id)
+
+    def test_filter(self):
+        self.login_as(user=self.user)
+
+        self.create_attachment(type="event.attachment")
+        attachment2 = self.create_attachment(type="event.minidump")
+
+        with self.feature("organizations:event-attachments"):
+            response = self.client.get(self.path(types=["event.minidump"]))
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]["id"] == six.text_type(attachment2.id)
+
+    def test_without_feature(self):
+        self.login_as(user=self.user)
+        self.create_attachment()
+
+        with self.feature({"organizations:event-attachments": False}):
+            response = self.client.get(self.path())
+
+        assert response.status_code == 404, response.content
