commit 0e8631c53e44210ff108038469f9877bc776c98b
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Mar 9 14:06:43 2018 -0800

    ref(ui): Cleanup project alerts/settings form header/footers (#7518)

diff --git a/src/sentry/static/sentry/app/data/forms/projectAlerts.jsx b/src/sentry/static/sentry/app/data/forms/projectAlerts.jsx
index 399a9075f4..ec53621425 100644
--- a/src/sentry/static/sentry/app/data/forms/projectAlerts.jsx
+++ b/src/sentry/static/sentry/app/data/forms/projectAlerts.jsx
@@ -8,53 +8,38 @@ const formatMinutes = value => {
   return tn('%d minute', '%d minutes', value);
 };
 
-const formGroups = [
-  {
-    // Form "section"/"panel"
-    title: t('Email Settings'),
-    fields: [
-      {
-        name: 'subjectTemplate',
-        type: 'string',
+export const fields = {
+  subjectTemplate: {
+    name: 'subjectTemplate',
+    type: 'string',
 
-        // additional data/props that is related to rendering of form field rather than data
-        label: t('Subject Template'),
-        placeholder: 'e.g. [${tag:environment}]',
-        help: t(
-          'The email subject to use (excluding the prefix) for individual alerts. Usable variables include: $project, $title, $shortID, and ${tag:key}, such as ${tag:environment} or ${tag:release}.'
-        ),
-      },
-    ],
+    // additional data/props that is related to rendering of form field rather than data
+    label: t('Subject Template'),
+    placeholder: 'e.g. [${tag:environment}]',
+    help: t(
+      'The email subject to use (excluding the prefix) for individual alerts. Usable variables include: $project, $title, $shortID, and ${tag:key}, such as ${tag:environment} or ${tag:release}.'
+    ),
   },
-
-  {
-    // Form "section"/"panel"
-    title: t('Digests'),
-    fields: [
-      {
-        name: 'digestsMinDelay',
-        type: 'range',
-        min: 60,
-        max: 3600,
-        step: 60,
-        defaultValue: 300,
-        label: t('Minimum delivery interval'),
-        help: t('Notifications will be delivered at most this often.'),
-        formatLabel: formatMinutes,
-      },
-      {
-        name: 'digestsMaxDelay',
-        type: 'range',
-        min: 60,
-        max: 3600,
-        step: 60,
-        defaultValue: 300,
-        label: t('Maximum delivery interval'),
-        help: t('Notifications will be delivered at least this often.'),
-        formatLabel: formatMinutes,
-      },
-    ],
+  digestsMinDelay: {
+    name: 'digestsMinDelay',
+    type: 'range',
+    min: 60,
+    max: 3600,
+    step: 60,
+    defaultValue: 300,
+    label: t('Minimum delivery interval'),
+    help: t('Notifications will be delivered at most this often.'),
+    formatLabel: formatMinutes,
   },
-];
-
-export default formGroups;
+  digestsMaxDelay: {
+    name: 'digestsMaxDelay',
+    type: 'range',
+    min: 60,
+    max: 3600,
+    step: 60,
+    defaultValue: 300,
+    label: t('Maximum delivery interval'),
+    help: t('Notifications will be delivered at least this often.'),
+    formatLabel: formatMinutes,
+  },
+};
diff --git a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
index 8520ad1761..91dda17cab 100644
--- a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
@@ -34,198 +34,168 @@ const ORG_DISABLED_REASON = t(
 // Check if a field has been set AND IS TRUTHY at the organization level.
 const hasOrgOverride = ({organization, name}) => organization[name];
 
-const formGroups = [
-  {
-    // Form "section"/"panel"
-    title: t('Project Details'),
-    fields: [
-      {
-        name: 'name',
-        type: 'string',
-        required: true,
+export const fields = {
+  name: {
+    name: 'name',
+    type: 'string',
+    required: true,
 
-        // additional data/props that is related to rendering of form field rather than data
-        label: t('Project Name'),
-        placeholder: t('My Service Name'),
-        help: t('The name of your project'),
-      },
-      {
-        name: 'slug',
-        type: 'string',
-        required: true,
-        label: t('Short Name'),
-        placeholder: t('my-service-name'),
-        help: t('A unique ID used to identify this project'),
-      },
-      {
-        name: 'team',
-        type: 'array',
-        label: t('Team'),
-        visible: ({organization}) => organization.teams.length > 1,
-        choices: ({organization}) =>
-          organization.teams.filter(o => o.isMember).map(o => [o.slug, o.slug]),
-        help: t('Update the team that owns this project'),
-      },
-    ],
+    // additional data/props that is related to rendering of form field rather than data
+    label: t('Project Name'),
+    placeholder: t('My Service Name'),
+    help: t('The name of your project'),
   },
-
-  {
-    title: t('Email'),
-    fields: [
-      {
-        name: 'subjectTemplate',
-        type: 'string',
-        label: t('Subject Prefix'),
-        help: t('Choose a custom prefix for emails from this project'),
-      },
-    ],
+  slug: {
+    name: 'slug',
+    type: 'string',
+    required: true,
+    label: t('Short Name'),
+    placeholder: t('my-service-name'),
+    help: t('A unique ID used to identify this project'),
+  },
+  team: {
+    name: 'team',
+    type: 'array',
+    label: t('Team'),
+    visible: ({organization}) => organization.teams.length > 1,
+    choices: ({organization}) =>
+      organization.teams.filter(o => o.isMember).map(o => [o.slug, o.slug]),
+    help: t('Update the team that owns this project'),
   },
 
-  {
-    title: t('Event Settings'),
-    fields: [
-      {
-        name: 'defaultEnvironment',
-        type: 'string',
-        label: t('Default Environment'),
-        placeholder: t('production'),
-        help: t('The default selected environment when viewing issues'),
-      },
-      {
-        name: 'resolveAge',
-        type: 'range',
-        allowedValues: RESOLVE_AGE_ALLOWED_VALUES,
-        label: t('Auto Resolve'),
-        help: t(
-          "Automatically resolve an issue if it hasn't been seen for this amount of time"
-        ),
-        formatLabel: val => {
-          val = parseInt(val, 10);
-          if (val === 0) {
-            return t('Disabled');
-          } else if (val > 23 && val % 24 === 0) {
-            // Based on allowed values, val % 24 should always be true
-            val = val / 24;
-            return tn('%d day', '%d days', val);
-          }
-          return tn('%d hour', '%d hours', val);
-        },
-      },
-    ],
+  subjectTemplate: {
+    name: 'subjectTemplate',
+    type: 'string',
+    label: t('Subject Prefix'),
+    help: t('Choose a custom prefix for emails from this project'),
   },
 
-  {
-    title: t('Data Privacy'),
-    fields: [
-      {
-        name: 'dataScrubber',
-        type: 'boolean',
-        label: t('Data Scrubber'),
-        disabled: hasOrgOverride,
-        disabledReason: ORG_DISABLED_REASON,
-        help: t('Enable server-side data scrubbing'),
-        // `props` are the props given to FormField
-        setValue: (val, props) =>
-          (props.organization && props.organization[props.name]) || val,
-      },
-      {
-        name: 'dataScrubberDefaults',
-        type: 'boolean',
-        disabled: hasOrgOverride,
-        disabledReason: ORG_DISABLED_REASON,
-        label: t('Use Default Scrubbers'),
-        help: t(
-          'Apply default scrubbers to prevent things like passwords and credit cards from being stored'
-        ),
-        // `props` are the props given to FormField
-        setValue: (val, props) =>
-          (props.organization && props.organization[props.name]) || val,
-      },
-      {
-        name: 'scrubIPAddresses',
-        type: 'boolean',
-        disabled: hasOrgOverride,
-        disabledReason: ORG_DISABLED_REASON,
-        // `props` are the props given to FormField
-        setValue: (val, props) =>
-          (props.organization && props.organization[props.name]) || val,
-        label: t('Prevent Storing of IP Addresses'),
-        help: t('Preventing IP addresses from being stored for new events'),
-      },
-      {
-        name: 'sensitiveFields',
-        type: 'string',
-        multiline: true,
-        placeholder: t('email'),
-        label: t('Additional Sensitive Fields'),
-        help: t(
-          'Additional field names to match against when scrubbing data. Separate multiple entries with a newline'
-        ),
-        getValue: val => extractMultilineFields(val),
-        setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
-      },
-      {
-        name: 'safeFields',
-        type: 'string',
-        multiline: true,
-        placeholder: t('business-email'),
-        label: t('Safe Fields'),
-        help: t(
-          'Field names which data scrubbers should ignore. Separate multiple entries with a newline'
-        ),
-        getValue: val => extractMultilineFields(val),
-        setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
-      },
-    ],
+  defaultEnvironment: {
+    name: 'defaultEnvironment',
+    type: 'string',
+    label: t('Default Environment'),
+    placeholder: t('production'),
+    help: t('The default selected environment when viewing issues'),
+  },
+  resolveAge: {
+    name: 'resolveAge',
+    type: 'range',
+    allowedValues: RESOLVE_AGE_ALLOWED_VALUES,
+    label: t('Auto Resolve'),
+    help: t(
+      "Automatically resolve an issue if it hasn't been seen for this amount of time"
+    ),
+    formatLabel: val => {
+      val = parseInt(val, 10);
+      if (val === 0) {
+        return t('Disabled');
+      } else if (val > 23 && val % 24 === 0) {
+        // Based on allowed values, val % 24 should always be true
+        val = val / 24;
+        return tn('%d day', '%d days', val);
+      }
+      return tn('%d hour', '%d hours', val);
+    },
   },
 
-  {
-    title: t('Client Security'),
-    fields: [
-      {
-        name: 'allowedDomains',
-        type: 'string',
-        multiline: true,
-        placeholder: t('https://example.com or example.com'),
-        label: t('Allowed Domains'),
-        help: t('Separate multiple entries with a newline'),
-        getValue: val => extractMultilineFields(val),
-        setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
-      },
-      {
-        name: 'scrapeJavaScript',
-        type: 'boolean',
-        label: t('Enable JavaScript source fetching'),
-        help: t('Allow Sentry to scrape missing JavaScript source context when possible'),
-      },
-      {
-        name: 'securityToken',
-        type: 'string',
-        label: t('Security Token'),
-        help: t(
-          'Outbound requests matching Allowed Domains will have the header "{token_header}: {token}" appended'
-        ),
-        setValue: value => getDynamicText({value, fixed: '__SECURITY_TOKEN__'}),
-      },
-      {
-        name: 'securityTokenHeader',
-        type: 'string',
-        placeholder: t('X-Sentry-Token'),
-        label: t('Security Token Header'),
-        help: t(
-          'Outbound requests matching Allowed Domains will have the header "{token_header}: {token}" appended.'
-        ),
-      },
-      {
-        name: 'verifySSL',
-        type: 'boolean',
-        label: t('Verify TLS/SSL'),
-        help: t(
-          'Outbound requests will verify TLS (sometimes known as SSL) connections.'
-        ),
-      },
-    ],
-  },
-];
+  dataScrubber: {
+    name: 'dataScrubber',
+    type: 'boolean',
+    label: t('Data Scrubber'),
+    disabled: hasOrgOverride,
+    disabledReason: ORG_DISABLED_REASON,
+    help: t('Enable server-side data scrubbing'),
+    // `props` are the props given to FormField
+    setValue: (val, props) =>
+      (props.organization && props.organization[props.name]) || val,
+  },
+  dataScrubberDefaults: {
+    name: 'dataScrubberDefaults',
+    type: 'boolean',
+    disabled: hasOrgOverride,
+    disabledReason: ORG_DISABLED_REASON,
+    label: t('Use Default Scrubbers'),
+    help: t(
+      'Apply default scrubbers to prevent things like passwords and credit cards from being stored'
+    ),
+    // `props` are the props given to FormField
+    setValue: (val, props) =>
+      (props.organization && props.organization[props.name]) || val,
+  },
+  scrubIPAddresses: {
+    name: 'scrubIPAddresses',
+    type: 'boolean',
+    disabled: hasOrgOverride,
+    disabledReason: ORG_DISABLED_REASON,
+    // `props` are the props given to FormField
+    setValue: (val, props) =>
+      (props.organization && props.organization[props.name]) || val,
+    label: t('Prevent Storing of IP Addresses'),
+    help: t('Preventing IP addresses from being stored for new events'),
+  },
+  sensitiveFields: {
+    name: 'sensitiveFields',
+    type: 'string',
+    multiline: true,
+    placeholder: t('email'),
+    label: t('Additional Sensitive Fields'),
+    help: t(
+      'Additional field names to match against when scrubbing data. Separate multiple entries with a newline'
+    ),
+    getValue: val => extractMultilineFields(val),
+    setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
+  },
+  safeFields: {
+    name: 'safeFields',
+    type: 'string',
+    multiline: true,
+    placeholder: t('business-email'),
+    label: t('Safe Fields'),
+    help: t(
+      'Field names which data scrubbers should ignore. Separate multiple entries with a newline'
+    ),
+    getValue: val => extractMultilineFields(val),
+    setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
+  },
 
-export default formGroups;
+  allowedDomains: {
+    name: 'allowedDomains',
+    type: 'string',
+    multiline: true,
+    placeholder: t('https://example.com or example.com'),
+    label: t('Allowed Domains'),
+    help: t('Separate multiple entries with a newline'),
+    getValue: val => extractMultilineFields(val),
+    setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
+  },
+  scrapeJavaScript: {
+    name: 'scrapeJavaScript',
+    type: 'boolean',
+    label: t('Enable JavaScript source fetching'),
+    help: t('Allow Sentry to scrape missing JavaScript source context when possible'),
+  },
+  securityToken: {
+    name: 'securityToken',
+    type: 'string',
+    label: t('Security Token'),
+    help: t(
+      'Outbound requests matching Allowed Domains will have the header "{token_header}: {token}" appended'
+    ),
+    setValue: value => getDynamicText({value, fixed: '__SECURITY_TOKEN__'}),
+  },
+  securityTokenHeader: {
+    name: 'securityTokenHeader',
+    type: 'string',
+    placeholder: t('X-Sentry-Token'),
+    label: t('Security Token Header'),
+    help: t(
+      'Outbound requests matching Allowed Domains will have the header "{token_header}: {token}" appended.'
+    ),
+  },
+  verifySSL: {
+    name: 'verifySSL',
+    type: 'boolean',
+    label: t('Verify TLS/SSL'),
+    help: t('Outbound requests will verify TLS (sometimes known as SSL) connections.'),
+  },
+};
diff --git a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
index ba478d0689..5e11188b5e 100644
--- a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
@@ -11,7 +11,7 @@ import PanelAlert from './settings/components/panelAlert';
 import PluginList from '../components/pluginList';
 import SentryTypes from '../proptypes';
 import SettingsPageHeader from './settings/components/settingsPageHeader';
-import alertsFormGroups from '../data/forms/projectAlerts';
+import {fields} from '../data/forms/projectAlerts';
 import recreateRoute from '../utils/recreateRoute';
 
 export default class ProjectAlertSettings extends AsyncView {
@@ -108,25 +108,22 @@ export default class ProjectAlertSettings extends AsyncView {
           apiMethod="PUT"
           apiEndpoint={`/projects/${orgId}/${projectId}/`}
         >
-          <JsonForm
-            forms={alertsFormGroups}
-            renderHeader={({title}) => {
-              if (title === 'Digests') {
-                return (
-                  <PanelAlert m={0} mb={0} type="info" icon="icon-circle-exclamation">
-                    {t(
-                      'Sentry will automatically digest alerts sent ' +
-                        'by some services to avoid flooding your inbox ' +
-                        'with individual issue notifications. To control ' +
-                        'how frequently notifications are delivered, use ' +
-                        'the sliders below.'
-                    )}
-                  </PanelAlert>
-                );
-              }
+          <JsonForm title={t('Email Settings')} fields={[fields.subjectTemplate]} />
 
-              return null;
-            }}
+          <JsonForm
+            title={t('Digests')}
+            fields={[fields.digestsMinDelay, fields.digestsMaxDelay]}
+            renderHeader={() => (
+              <PanelAlert m={0} mb={0} type="info" icon="icon-circle-exclamation">
+                {t(
+                  'Sentry will automatically digest alerts sent ' +
+                    'by some services to avoid flooding your inbox ' +
+                    'with individual issue notifications. To control ' +
+                    'how frequently notifications are delivered, use ' +
+                    'the sliders below.'
+                )}
+              </PanelAlert>
+            )}
           />
         </Form>
 
diff --git a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
index 0c93595ab7..95804439df 100644
--- a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
@@ -17,7 +17,7 @@ import PanelHeader from './settings/components/panelHeader';
 import SettingsPageHeader from './settings/components/settingsPageHeader';
 import TextBlock from './settings/components/text/textBlock';
 import TextField from './settings/components/forms/textField';
-import projectFields from '../data/forms/projectGeneralSettings';
+import {fields} from '../data/forms/projectGeneralSettings';
 
 const noMargin = {marginBottom: 0};
 
@@ -25,8 +25,10 @@ const AutoResolveFooter = () => (
   <Box p={2} pb={0}>
     <PanelAlert type="warning" icon="icon-circle-exclamation" css={noMargin}>
       <strong>
-        {t(`Note: Enabling auto resolve will immediately resolve anything that has
-                  not been seen within this period of time. There is no undo!`)}
+        {t(
+          'Note: Enabling auto resolve will immediately resolve anything that has ' +
+            'not been seen within this period of time. There is no undo!'
+        )}
       </strong>
     </PanelAlert>
   </Box>
@@ -219,6 +221,10 @@ export default class ProjectGeneralSettings extends AsyncView {
     let project = this.state.data;
     let {orgId, projectId} = this.props.params;
     let endpoint = `/projects/${orgId}/${projectId}/`;
+    let jsonFormProps = {
+      additionalFieldProps: {organization},
+      access: new Set(organization.access),
+    };
 
     return (
       <div>
@@ -241,43 +247,69 @@ export default class ProjectGeneralSettings extends AsyncView {
           }}
         >
           <JsonForm
-            forms={projectFields}
-            additionalFieldProps={{organization}}
-            access={new Set(organization.access)}
-            renderHeader={({title}) => {
-              if (title === 'Client Security') {
-                return (
-                  <Box p={2} pb={0}>
-                    <PanelAlert type="info" icon="icon-circle-exclamation" css={noMargin}>
-                      <TextBlock css={noMargin}>
-                        {tct(
-                          'Configure origin URLs which Sentry should accept events from. This is used for communication with clients like [link].',
-                          {
-                            link: (
-                              <a href="https://github.com/getsentry/raven-js">raven-js</a>
-                            ),
-                          }
-                        )}{' '}
-                        {tct(
-                          'This will restrict requests based on the [Origin] and [Referer] headers.',
-                          {
-                            Origin: <code>Origin</code>,
-                            Referer: <code>Referer</code>,
-                          }
-                        )}
-                      </TextBlock>
-                    </PanelAlert>
-                  </Box>
-                );
-              }
-              return null;
-            }}
-            renderFooter={({title}) => {
-              if (title === 'Event Settings') {
-                return <AutoResolveFooter />;
-              }
-              return null;
-            }}
+            {...jsonFormProps}
+            title={t('Project Details')}
+            fields={[fields.name, fields.slug, fields.team]}
+          />
+
+          <JsonForm
+            {...jsonFormProps}
+            title={t('Email')}
+            fields={[fields.subjectTemplate]}
+          />
+
+          <JsonForm
+            {...jsonFormProps}
+            title={t('Event Settings')}
+            fields={[fields.defaultEnvironment, fields.resolveAge]}
+            renderFooter={() => <AutoResolveFooter />}
+          />
+
+          <JsonForm
+            {...jsonFormProps}
+            title={t('Data Privacy')}
+            fields={[
+              fields.dataScrubber,
+              fields.dataScrubberDefaults,
+              fields.scrubIPAddresses,
+              fields.sensitiveFields,
+              fields.safeFields,
+            ]}
+          />
+
+          <JsonForm
+            {...jsonFormProps}
+            title={t('Client Security')}
+            fields={[
+              fields.allowedDomains,
+              fields.scrapeJavaScript,
+              fields.securityToken,
+              fields.securityTokenHeader,
+              fields.verifySSL,
+            ]}
+            renderHeader={() => (
+              <Box p={2} pb={0}>
+                <PanelAlert type="info" icon="icon-circle-exclamation" css={noMargin}>
+                  <TextBlock noMargin>
+                    {tct(
+                      'Configure origin URLs which Sentry should accept events from. This is used for communication with clients like [link].',
+                      {
+                        link: (
+                          <a href="https://github.com/getsentry/raven-js">raven-js</a>
+                        ),
+                      }
+                    )}{' '}
+                    {tct(
+                      'This will restrict requests based on the [Origin] and [Referer] headers.',
+                      {
+                        Origin: <code>Origin</code>,
+                        Referer: <code>Referer</code>,
+                      }
+                    )}
+                  </TextBlock>
+                </PanelAlert>
+              </Box>
+            )}
           />
         </Form>
 
diff --git a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
index a227268254..25dc028bcd 100644
--- a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
@@ -76,50 +76,49 @@ exports[`ProjectAlertSettings render() renders 1`] = `
     >
       <JsonForm
         additionalFieldProps={Object {}}
-        forms={
+        fields={
           Array [
             Object {
-              "fields": Array [
-                Object {
-                  "help": "The email subject to use (excluding the prefix) for individual alerts. Usable variables include: $project, $title, $shortID, and \${tag:key}, such as \${tag:environment} or \${tag:release}.",
-                  "label": "Subject Template",
-                  "name": "subjectTemplate",
-                  "placeholder": "e.g. [\${tag:environment}]",
-                  "type": "string",
-                },
-              ],
-              "title": "Email Settings",
+              "help": "The email subject to use (excluding the prefix) for individual alerts. Usable variables include: $project, $title, $shortID, and \${tag:key}, such as \${tag:environment} or \${tag:release}.",
+              "label": "Subject Template",
+              "name": "subjectTemplate",
+              "placeholder": "e.g. [\${tag:environment}]",
+              "type": "string",
+            },
+          ]
+        }
+        title="Email Settings"
+      />
+      <JsonForm
+        additionalFieldProps={Object {}}
+        fields={
+          Array [
+            Object {
+              "defaultValue": 300,
+              "formatLabel": [Function],
+              "help": "Notifications will be delivered at most this often.",
+              "label": "Minimum delivery interval",
+              "max": 3600,
+              "min": 60,
+              "name": "digestsMinDelay",
+              "step": 60,
+              "type": "range",
             },
             Object {
-              "fields": Array [
-                Object {
-                  "defaultValue": 300,
-                  "formatLabel": [Function],
-                  "help": "Notifications will be delivered at most this often.",
-                  "label": "Minimum delivery interval",
-                  "max": 3600,
-                  "min": 60,
-                  "name": "digestsMinDelay",
-                  "step": 60,
-                  "type": "range",
-                },
-                Object {
-                  "defaultValue": 300,
-                  "formatLabel": [Function],
-                  "help": "Notifications will be delivered at least this often.",
-                  "label": "Maximum delivery interval",
-                  "max": 3600,
-                  "min": 60,
-                  "name": "digestsMaxDelay",
-                  "step": 60,
-                  "type": "range",
-                },
-              ],
-              "title": "Digests",
+              "defaultValue": 300,
+              "formatLabel": [Function],
+              "help": "Notifications will be delivered at least this often.",
+              "label": "Maximum delivery interval",
+              "max": 3600,
+              "min": 60,
+              "name": "digestsMaxDelay",
+              "step": 60,
+              "type": "range",
             },
           ]
         }
         renderHeader={[Function]}
+        title="Digests"
       />
     </Form>
     <PluginList
