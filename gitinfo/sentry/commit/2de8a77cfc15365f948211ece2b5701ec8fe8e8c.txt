commit 2de8a77cfc15365f948211ece2b5701ec8fe8e8c
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Oct 15 15:59:09 2010 -0700

    Added HTTP Basic Auth support to Redmine

diff --git a/sentry/plugins/sentry_redmine/conf.py b/sentry/plugins/sentry_redmine/conf.py
index a1b8cebc56..35d948fbd4 100644
--- a/sentry/plugins/sentry_redmine/conf.py
+++ b/sentry/plugins/sentry_redmine/conf.py
@@ -1,5 +1,11 @@
 from django.conf import settings
 
+# Either API_KEY or USERNAME/PASSWORD should be specified for non-anonymous
+# XXX: In redmine as of Oct 15 2010 API KEY auth does not support creating issues
+
 REDMINE_API_KEY = getattr(settings, 'SENTRY_REDMINE_API_KEY', None)
-REDMINE_URL = getattr(settings, 'SENTRY_REDMINE_URL', 'http://localhost:3000')
-REDMINE_PROJECT_SLUG = getattr(settings, 'SENTRY_REDMINE_PROJECT_SLUG', 'sentry')
\ No newline at end of file
+REDMINE_URL = getattr(settings, 'SENTRY_REDMINE_URL', None)
+REDMINE_PROJECT_SLUG = getattr(settings, 'SENTRY_REDMINE_PROJECT_SLUG', None)
+
+REDMINE_USERNAME = getattr(settings, 'SENTRY_REDMINE_USERNAME', None)
+REDMINE_PASSWORD = getattr(settings, 'SENTRY_REDMINE_PASSWORd', None)
diff --git a/sentry/plugins/sentry_redmine/models.py b/sentry/plugins/sentry_redmine/models.py
index 78597e0974..c85a111964 100644
--- a/sentry/plugins/sentry_redmine/models.py
+++ b/sentry/plugins/sentry_redmine/models.py
@@ -10,9 +10,9 @@ from django.utils.safestring import mark_safe
 from sentry.helpers import urlread
 from sentry.models import GroupedMessage
 from sentry.plugins import GroupActionProvider
+from sentry.plugins.sentry_redmine import conf
 
-import conf
-
+import base64
 import urllib
 import urllib2
 
@@ -50,6 +50,11 @@ class CreateRedmineIssue(GroupActionProvider):
                 }), headers={
                     'Content-type': 'application/json',
                 })
+
+                if conf.REDMINE_USERNAME and conf.REDMINE_PASSWORD:
+                    authstring = base64.encodestring('%s:%s' % (conf.REDMINE_USERNAME, conf.REDMINE_PASSWORD))[:-1]
+                    req.add_header("Authorization", "Basic %s" % authstring)
+                
                 try:
                     response = urllib2.urlopen(req, data).read()
                 except urllib2.HTTPError, e:
diff --git a/sentry/plugins/sentry_redmine/tests/__init__.py b/sentry/plugins/sentry_redmine/tests/__init__.py
index a437298e69..8a4d3dd6e7 100644
--- a/sentry/plugins/sentry_redmine/tests/__init__.py
+++ b/sentry/plugins/sentry_redmine/tests/__init__.py
@@ -1,3 +1,15 @@
+"""
+Configuring Redmine for these tests:
+
+- Create a project called sentry
+- Run a Redmine server locally on port 3000 (default webrick usage)
+- Create an account with user/pass of sentry/sentry
+
+Note: this does not test with API_KEY as that only works under a modified Redmine
+      environment (e.g. DISQUS branch)
+
+"""
+
 from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
 from django.test import TestCase
@@ -15,6 +27,9 @@ class CreateIssueTest(TestCase):
         self.user.set_password('admin')
         self.user.save()
         self.client.login(username='admin', password='admin')
+        
+        conf.REDMINE_URL = 'http://localhost:3000'
+        conf.REDMINE_PROJECT_SLUG = 'sentry'
 
     def test_basic_response(self):
         group = GroupedMessage.objects.all()[0]
@@ -23,7 +38,28 @@ class CreateIssueTest(TestCase):
         self.assertEquals(response.status_code, 200)
         self.assertTemplateUsed(response, 'sentry/plugins/redmine/create_issue.html')
 
-    def test_issue_creation(self):
+    def test_anonymous_issue_creation(self):
+        conf.REDMINE_USERNAME = None
+        conf.REDMINE_PASSWORD = None
+
+        group = GroupedMessage.objects.all()[0]
+
+        response = self.client.post(CreateRedmineIssue.get_url(group.pk), {
+            'subject': 'test',
+            'description': 'foo',
+        }, follow=True)
+        self.assertEquals(response.status_code, 200)
+        self.assertTemplateUsed(response, 'sentry/group/details.html')
+        
+        self.assertTrue(RedmineIssue.objects.filter(group=group).exists())
+        
+        group = GroupedMessage.objects.get(pk=group.pk)
+        self.assertTrue(group.data['redmine']['issue_id'] > 0)
+
+    def test_http_auth_issue_creation(self):
+        conf.REDMINE_USERNAME = 'sentry'
+        conf.REDMINE_PASSWORD = 'sentry'
+
         group = GroupedMessage.objects.all()[0]
 
         response = self.client.post(CreateRedmineIssue.get_url(group.pk), {
