commit b3bc266e70dfb64cfa4619cd8833aec19f4ef2bd
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Feb 5 08:17:30 2015 -0800

    Support custom domains in origin option

diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index c2cfe0c1e7..004793ab03 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -15,12 +15,13 @@ from sentry.permissions import can_remove_project, can_set_public_projects
 from sentry.plugins import plugins
 from sentry.web.forms.fields import CustomTypedChoiceField, RangeField
 from sentry.web.frontend.base import ProjectView
+from sentry.utils.http import parse_uri_match
 
 
 BLANK_CHOICE = [("", "")]
 
 # Special case origins that don't fit the normal regex pattern, but are valid
-WHITELIST_ORIGINS = ('*', 'localhost')
+WHITELIST_ORIGINS = ('*')
 
 
 class OriginsField(forms.CharField):
@@ -45,18 +46,9 @@ class OriginsField(forms.CharField):
         if value in WHITELIST_ORIGINS:
             return True
 
-        if '://' in value:
-            # URLValidator will raise a forms.ValidationError itself
-            self._url_validator(value)
-            return True
-
+        bits = parse_uri_match(value)
         # ports are not supported on matching expressions (yet)
-        if ':' in value:
-            return False
-
-        # no .com's
-        parts = filter(bool, value.split('.'))
-        if len(parts) < 2:
+        if ':' in bits.domain:
             return False
 
         return True
diff --git a/tests/sentry/web/frontend/test_project_settings.py b/tests/sentry/web/frontend/test_project_settings.py
index 01f9387e3c..e65b44f4cb 100644
--- a/tests/sentry/web/frontend/test_project_settings.py
+++ b/tests/sentry/web/frontend/test_project_settings.py
@@ -29,10 +29,14 @@ class OriginsFieldTest(TestCase):
         result = self.field.clean(value)
         self.assertEquals(result, ['example.com'])
 
-    def test_supports_full_base_uri(self):
+    def test_does_not_support_port(self):
         value = 'http://example.com:80'
-        result = self.field.clean(value)
-        self.assertEquals(result, ['http://example.com:80'])
+        with self.assertRaises(forms.ValidationError):
+            self.field.clean(value)
+
+        value = 'example.com:80'
+        with self.assertRaises(forms.ValidationError):
+            self.field.clean(value)
 
     def test_doesnt_support_domain_with_port(self):
         value = 'example.com:80'
