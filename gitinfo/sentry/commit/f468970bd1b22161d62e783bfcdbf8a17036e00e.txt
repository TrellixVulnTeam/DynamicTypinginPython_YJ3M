commit f468970bd1b22161d62e783bfcdbf8a17036e00e
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Nov 23 19:27:07 2011 -0800

    Change trending to require minutes value and be greater than MINUTE_NORMALIZATION

diff --git a/sentry/templates/sentry/index.html b/sentry/templates/sentry/index.html
index 1bcf265149..9fc75d3de9 100644
--- a/sentry/templates/sentry/index.html
+++ b/sentry/templates/sentry/index.html
@@ -39,10 +39,9 @@
                     <option value="date"{% ifequal sort 'date' %} selected="selected"{% endifequal %}>{% trans "Last Seen" %}</option>
                     <option value="new"{% ifequal sort 'new' %} selected="selected"{% endifequal %}>{% trans "First Seen" %}</option>
                     <option value="freq"{% ifequal sort 'freq' %} selected="selected"{% endifequal %}>{% trans "Frequency" %}</option>
-                    <optgroup label="{% trans "Acceleration" %}">
-                        <option value="accel_18000"{% ifequal sort 'accel_18000' %} selected="selected"{% endifequal %}>{% trans "5 minutes" %}</option>
-                        <option value="accel_54000"{% ifequal sort 'accel_54000' %} selected="selected"{% endifequal %}>{% trans "15 minutes" %}</option>
-                        <option value="accel_216000"{% ifequal sort 'accel_216000' %} selected="selected"{% endifequal %}>{% trans "60 minutes" %}</option>
+                    <optgroup label="{% trans "Trending" %}">
+                        <option value="accel_15"{% ifequal sort 'accel_15' %} selected="selected"{% endifequal %}>{% trans "15 minutes" %}</option>
+                        <option value="accel_60"{% ifequal sort 'accel_60' %} selected="selected"{% endifequal %}>{% trans "60 minutes" %}</option>
                     </optgroup>
                 </select>
                 </div>
diff --git a/sentry/utils/manager.py b/sentry/utils/manager.py
index 02682f9657..bd6a37398e 100644
--- a/sentry/utils/manager.py
+++ b/sentry/utils/manager.py
@@ -378,29 +378,32 @@ class GroupManager(models.Manager):
 
         return [rows.get(today-datetime.timedelta(hours=d), 0) for d in xrange(first_seen, -1, -1)]
 
-    def get_accelerated(self, queryset=None, seconds=60*60*15):
+    def get_accelerated(self, queryset=None, minutes=15):
+        # mintues should
         from sentry.models import MessageCountByMinute
         mcbm_tbl = MessageCountByMinute._meta.db_table
         if queryset is None:
             queryset = self
 
-        queryset = queryset.extra(where=["%s.date >= now() - interval '%s seconds'" % (mcbm_tbl, seconds)]).annotate(x=Sum('messagecountbyminute__times_seen'))
+        assert minutes >= settings.MINUTE_NORMALIZATION
+
+        queryset = queryset.extra(where=["%s.date >= now() - interval '%s minutes'" % (mcbm_tbl, minutes)]).annotate(x=Sum('messagecountbyminute__times_seen'))
         sql, params = queryset.query.get_compiler(queryset.db).as_sql()
         before_select, after_select = str(sql).split('SELECT ', 1)
         before_where, after_where = after_select.split(' WHERE ', 1)
         before_group, after_group = after_where.split(' GROUP BY ', 1)
 
         query = """
-        SELECT (SUM(%(mcbm_tbl)s.times_seen) + 1.0) / (COALESCE(z.accel, 0) + 1.0) as accel, SUM(%(mcbm_tbl)s.times_seen) as total_seen, z.accel as prev_accel, %(before_where)s
-        LEFT JOIN (SELECT a.group_id, SUM(a.times_seen) / 3.0 as accel FROM %(mcbm_tbl)s as a WHERE a.date BETWEEN now() - interval '%(max_time)s seconds' AND now() - interval '%(min_time)s seconds'
-        GROUP BY a.group_id) as z ON z.group_id = %(mcbm_tbl)s.group_id WHERE %(before_group)s GROUP BY prev_accel, %(after_group)s ORDER BY accel DESC
+        SELECT (SUM(%(mcbm_tbl)s.times_seen) + 1.0) / (COALESCE(z.accel, 0) + 1.0) as accel, z.accel as prev_accel, %(before_where)s
+        LEFT JOIN (SELECT a.group_id, SUM(a.times_seen) / 3.0 as accel FROM %(mcbm_tbl)s as a WHERE a.date BETWEEN now() - interval '%(max_time)s minutes' AND now() - interval '%(min_time)s minutes'
+        GROUP BY a.group_id) as z ON z.group_id = %(mcbm_tbl)s.group_id WHERE %(before_group)s GROUP BY prev_accel, %(after_group)s HAVING SUM(%(mcbm_tbl)s.times_seen) > 0 ORDER BY accel DESC
         """ % dict(
             mcbm_tbl=mcbm_tbl,
             before_where=before_where,
             before_group=before_group,
             after_group=after_group,
-            min_time=seconds+1,
-            max_time=seconds*4,
+            min_time=minutes+1,
+            max_time=minutes*4,
         )
 
         return RawQuerySet(self, query, params)
diff --git a/sentry/web/views.py b/sentry/web/views.py
index 8b8ca66b00..c85791400d 100644
--- a/sentry/web/views.py
+++ b/sentry/web/views.py
@@ -140,7 +140,7 @@ def ajax_handler(request):
         elif sort == 'freq':
             message_list = message_list.order_by('-times_seen')
         elif sort.startswith('accel_'):
-            message_list = Group.objects.get_accelerated(message_list, seconds=int(sort.split('_', 1)[1]))
+            message_list = Group.objects.get_accelerated(message_list, minutes=int(sort.split('_', 1)[1]))
         else:
             sort = 'priority'
             message_list = message_list.order_by('-score', '-last_seen')
@@ -332,7 +332,7 @@ def index(request, project):
     elif sort == 'freq':
         message_list = message_list.order_by('-times_seen')
     elif sort.startswith('accel_'):
-        message_list = Group.objects.get_accelerated(message_list, seconds=int(sort.split('_', 1)[1]))
+        message_list = Group.objects.get_accelerated(message_list, minutes=int(sort.split('_', 1)[1]))
     else:
         sort = 'priority'
         message_list = message_list.order_by('-score', '-last_seen')
