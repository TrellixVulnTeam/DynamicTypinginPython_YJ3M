commit a56f790e2ae3963932bba0facd72e70305e1e3a4
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Mon Mar 20 16:47:40 2017 -0700

    add support for api keys to OrganizationReleasesBaseEndpoint (#5110)
    
    * add support for api keys to OrganizationReleasesBaseEndpoint
    
    * add one more case to test just to be safe

diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index d9e2a706a7..74e1040f9b 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -8,7 +8,8 @@ from sentry.api.permissions import ScopedPermission
 from sentry.app import raven
 from sentry.auth import access
 from sentry.models import (
-    Organization, OrganizationMemberTeam, OrganizationStatus, Project, ReleaseProject, Team
+    ApiKey, Organization, OrganizationMemberTeam, OrganizationStatus,
+    Project, ReleaseProject, Team
 )
 from sentry.models.apikey import ROOT_KEY
 from sentry.utils import auth
@@ -98,10 +99,17 @@ class OrganizationReleasesBaseEndpoint(OrganizationEndpoint):
     permission_classes = (OrganizationReleasePermission,)
 
     def get_allowed_projects(self, request, organization):
-        if not request.user.is_authenticated():
+        has_valid_api_key = False
+        if isinstance(request.auth, ApiKey):
+            if request.auth.organization_id != organization.id:
+                return []
+            has_valid_api_key = request.auth.has_scope('project:releases') or \
+                request.auth.has_scope('project:write')
+
+        if not (has_valid_api_key or request.user.is_authenticated()):
             return []
 
-        if request.is_superuser() or organization.flags.allow_joinleave:
+        if has_valid_api_key or request.is_superuser() or organization.flags.allow_joinleave:
             allowed_teams = Team.objects.filter(
                 organization=organization
             ).values_list('id', flat=True)
diff --git a/tests/sentry/api/endpoints/test_organization_releases.py b/tests/sentry/api/endpoints/test_organization_releases.py
index 51eff2bb52..ed90d88407 100644
--- a/tests/sentry/api/endpoints/test_organization_releases.py
+++ b/tests/sentry/api/endpoints/test_organization_releases.py
@@ -1,9 +1,10 @@
 from __future__ import absolute_import
 
+from base64 import b64encode
 from datetime import datetime
 from django.core.urlresolvers import reverse
 
-from sentry.models import Activity, Release, ReleaseCommit, ReleaseProject
+from sentry.models import ApiKey, Activity, Release, ReleaseCommit, ReleaseProject
 from sentry.testutils import APITestCase
 
 
@@ -513,3 +514,59 @@ class OrganizationReleaseCreateTest(APITestCase):
         })
 
         assert response.status_code == 201, response.content
+
+    def test_api_key(self):
+        org = self.create_organization()
+        org.flags.allow_joinleave = False
+        org.save()
+
+        org2 = self.create_organization()
+
+        team1 = self.create_team(organization=org)
+        project1 = self.create_project(team=team1, organization=org)
+        release1 = Release.objects.create(
+            organization_id=org.id,
+            version='1',
+            date_added=datetime(2013, 8, 13, 3, 8, 24, 880386),
+        )
+        release1.add_project(project1)
+
+        url = reverse('sentry-api-0-organization-releases', kwargs={
+            'organization_slug': org.slug
+        })
+
+        # test right org, wrong permissions level
+        bad_api_key = ApiKey.objects.create(
+            organization=org,
+            scopes=getattr(ApiKey.scopes, 'project:read'),
+        )
+        response = self.client.post(url,
+            data={
+                'version': '1.2.1',
+                'projects': [project1.slug]
+            }, HTTP_AUTHORIZATION='Basic ' + b64encode('{}:'.format(bad_api_key.key)))
+        assert response.status_code == 403
+
+        # test wrong org, right permissions level
+        wrong_org_api_key = ApiKey.objects.create(
+            organization=org2,
+            scopes=getattr(ApiKey.scopes, 'project:write'),
+        )
+        response = self.client.post(url,
+            data={
+                'version': '1.2.1',
+                'projects': [project1.slug]
+            }, HTTP_AUTHORIZATION='Basic ' + b64encode('{}:'.format(wrong_org_api_key.key)))
+        assert response.status_code == 403
+
+        # test right org, right permissions level
+        good_api_key = ApiKey.objects.create(
+            organization=org,
+            scopes=getattr(ApiKey.scopes, 'project:write'),
+        )
+        response = self.client.post(url,
+            data={
+                'version': '1.2.1',
+                'projects': [project1.slug]
+            }, HTTP_AUTHORIZATION='Basic ' + b64encode('{}:'.format(good_api_key.key)))
+        assert response.status_code == 201, response.content
