commit 04681f3ac2cd836df6ac185c9894a6ff8f8216ff
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri Jul 1 01:54:56 2016 +0300

    Added thread selector

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
index 8a96a09b64..bb0c00a8ae 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
@@ -5,7 +5,7 @@ import ExceptionContent from './exceptionContent';
 import RawExceptionContent from './rawExceptionContent';
 import TooltipMixin from '../../../mixins/tooltip';
 import {t} from '../../../locale';
-import {getStacktraceDefaultState} from './stacktrace';
+import {isStacktraceNewestFirst} from './stacktrace';
 
 const ExceptionInterface = React.createClass({
   propTypes: {
@@ -22,9 +22,11 @@ const ExceptionInterface = React.createClass({
   })],
 
   getInitialState() {
-    let rv = getStacktraceDefaultState(null, this.props.data.hasSystemFrames);
-    rv.stackType = 'original';
-    return rv;
+    return {
+      stackView: this.props.data.hasSystemFrames ? 'app' : 'full',
+      newestFirst: isStacktraceNewestFirst(),
+      stackType: 'original',
+    };
   },
 
   toggleStackView(value) {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
index 62ff4fd467..23c5cad33a 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
@@ -7,29 +7,19 @@ import StacktraceContent from './stacktraceContent';
 import {t} from '../../../locale';
 
 
-export function getStacktraceDefaultState(user, hasSystemFrames) {
-  if (!user) {
-    user = ConfigStore.get('user');
-  }
+export function isStacktraceNewestFirst() {
+  let user = ConfigStore.get('user');
   // user may not be authenticated
   let options = user ? user.options : {};
-  let newestFirst;
   switch (options.stacktraceOrder) {
     case 'newestFirst':
-      newestFirst = true;
-      break;
+      return true;
     case 'newestLast':
-      newestFirst = false;
-      break;
+      return false;
     case 'default': // is "default" a valid value? or bad case statement
     default:
-      newestFirst = false;
+      return false;
   }
-
-  return {
-    stackView: hasSystemFrames ? 'app' : 'full',
-    newestFirst: newestFirst
-  };
 }
 
 
@@ -43,7 +33,10 @@ const StacktraceInterface = React.createClass({
   },
 
   getInitialState() {
-    return getStacktraceDefaultState(null, this.props.data.hasSystemFrames);
+    return {
+      stackView: this.props.data.hasSystemFrames ? 'app' : 'full',
+      newestFirst: isStacktraceNewestFirst(),
+    };
   },
 
   toggleStack(value) {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx b/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
index 60c4819321..b60631f0e5 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
@@ -3,9 +3,43 @@ import GroupEventDataSection from '../eventDataSection';
 import PropTypes from '../../../proptypes';
 import rawStacktraceContent from './rawStacktraceContent';
 import StacktraceContent from './stacktraceContent';
-import {getStacktraceDefaultState} from './stacktrace';
+import {isStacktraceNewestFirst} from './stacktrace';
 import {t} from '../../../locale';
 import {defined} from '../../../utils';
+import DropdownLink from '../../dropdownLink';
+import MenuItem from '../../menuItem';
+
+
+function getThreadTitle(data) {
+  let bits = ['Thread'];
+  if (defined(data.name)) {
+    bits.push(` "${data.name}"`);
+  }
+  if (defined(data.id)) {
+    bits.push(' #' + data.id);
+  }
+  // TODO: show last stack frame here
+  return bits.join('');
+}
+
+function getIntendedStackView(thread) {
+  const {stacktrace} = thread;
+  return (stacktrace && stacktrace.hasSystemFrames) ? 'app' : 'full';
+}
+
+function findBestThread(threads) {
+  for (let thread of threads) {
+    if (thread.crashed) {
+      return thread;
+    }
+  }
+  for (let thread of threads) {
+    if (thread.stacktrace) {
+      return thread.stacktrace;
+    }
+  }
+  return threads[0];
+}
 
 
 const Thread = React.createClass({
@@ -13,20 +47,8 @@ const Thread = React.createClass({
     event: PropTypes.Event.isRequired,
     data: React.PropTypes.object.isRequired,
     platform: React.PropTypes.string,
-    stackView: React.PropTypes.string.isRequired,
-    newestFirst: React.PropTypes.bool.isRequired,
-  },
-
-  renderTitle() {
-    const {data} = this.props;
-    let bits = ['Thread'];
-    if (defined(data.name)) {
-      bits.push(`"${data.name}"`);
-    }
-    if (defined(data.id)) {
-      bits.push('#' + data.id);
-    }
-    return <h4>{bits.join(' ')}</h4>;
+    stackView: React.PropTypes.string,
+    newestFirst: React.PropTypes.bool,
   },
 
   renderMissingStacktrace() {
@@ -48,22 +70,19 @@ const Thread = React.createClass({
   },
 
   render() {
-    let includeSystemFrames = this.props.stackView === 'full' ||
-      (this.props.data.stacktrace &&
-       !this.props.data.stacktrace.hasSystemFrames);
-
     return (
       <div className="thread">
-        {this.renderTitle()}
+        <h4>{getThreadTitle(this.props.data)}</h4>
         {this.props.data.stacktrace ? (
           this.props.stackView === 'raw' ?
             <pre className="traceback plain">
-              {rawStacktraceContent(this.props.data.stacktrace, this.props.platform)}
+              {rawStacktraceContent(
+                this.props.data.stacktrace, this.props.platform)}
             </pre>
           :
             <StacktraceContent
                 data={this.props.data.stacktrace}
-                includeSystemFrames={includeSystemFrames}
+                includeSystemFrames={this.props.stackView === 'full'}
                 platform={this.props.event.platform}
                 newestFirst={this.props.newestFirst} />
         ) : (
@@ -84,16 +103,12 @@ const ThreadsInterface = React.createClass({
   },
 
   getInitialState() {
-    let hasSystemFrames = false;
-    for (let thread of this.props.data.values) {
-      if (thread.stacktrace && thread.stacktrace.hasSystemFrames) {
-        hasSystemFrames = true;
-        break;
-      }
-    }
-    let rv = getStacktraceDefaultState(null, hasSystemFrames);
-    rv.hasSystemFrames = hasSystemFrames;
-    return rv;
+    let thread = findBestThread(this.props.data.values);
+    return {
+      activeThread: thread,
+      stackView: getIntendedStackView(thread),
+      newestFirst: isStacktraceNewestFirst(),
+    };
   },
 
   toggleStack(value) {
@@ -102,15 +117,43 @@ const ThreadsInterface = React.createClass({
     });
   },
 
+  onSelectNewThread(thread) {
+    let newStackView = this.state.stackView;
+    if (this.state.stackView !== 'raw') {
+      newStackView = getIntendedStackView(thread);
+    }
+    this.setState({
+      activeThread: thread,
+      stackView: newStackView,
+    });
+  },
+
   render() {
     let group = this.props.group;
     let evt = this.props.event;
-    let {stackView, newestFirst, hasSystemFrames} = this.state;
+    let {stackView, newestFirst, activeThread} = this.state;
+    let {stacktrace} = activeThread;
 
     let title = (
       <div>
+        <div className="pull-right btn-group">
+          <DropdownLink 
+            btnGroup={true}
+            caret={true}
+            className="btn btn-default btn-sm"
+            title={getThreadTitle(activeThread)}>
+            {this.props.data.values.map((thread, idx) => {
+              return (
+                <MenuItem key={idx} noAnchor={true}>
+                  <a onClick={this.onSelectNewThread.bind(this, thread)
+                    }>{getThreadTitle(thread)}</a>
+                </MenuItem>
+              );
+            })}
+          </DropdownLink>
+        </div>
         <div className="btn-group">
-          {hasSystemFrames &&
+          {(stacktrace && stacktrace.hasSystemFrames) &&
             <a className={(stackView === 'app' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'app')}>{t('App Only')}</a>
           }
           <a className={(stackView === 'full' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'full')}>{t('Full')}</a>
@@ -134,16 +177,11 @@ const ThreadsInterface = React.createClass({
           type={this.props.type}
           title={title}
           wrapTitle={false}>
-        {this.props.data.values.map((thread, idx) => {
-          return (
-            <Thread
-              key={idx}
-              data={thread}
-              event={evt}
-              stackView={stackView}
-              newestFirst={newestFirst} />
-          );
-        })}
+        <Thread
+          data={activeThread}
+          stackView={stackView}
+          event={evt}
+          newestFirst={newestFirst} />
       </GroupEventDataSection>
     );
   }
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 943e881764..0cb1e93c95 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1746,13 +1746,6 @@ pre.val, span.val {
 */
 .box-content .thread {
   margin: 0 0 20px 0;
-
-  h4 {
-    margin: 0 -20px 0 -20px;
-    padding: 7px 20px;
-    color: @gray-darker;
-    font-size: 14px;
-  }
 }
 
 /**
