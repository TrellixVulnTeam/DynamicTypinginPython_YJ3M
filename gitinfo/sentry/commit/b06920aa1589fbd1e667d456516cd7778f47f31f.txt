commit b06920aa1589fbd1e667d456516cd7778f47f31f
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Aug 30 19:00:54 2015 -0700

    Reuse project selector on static pages

diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index 10db61c835..a0c110080e 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -3,16 +3,16 @@ from __future__ import absolute_import
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
-from sentry import features
 from sentry.api.base import DocSection
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.decorators import sudo_required
 from sentry.api.serializers import serialize
-from sentry.api.serializers.models.team import TeamWithProjectsSerializer
-from sentry.auth import access
+from sentry.api.serializers.models.organization import (
+    DetailedOrganizationSerializer
+)
 from sentry.models import (
-    AuditLogEntryEvent, Organization, OrganizationAccessRequest,
-    OrganizationStatus, Team, TeamStatus
+    AuditLogEntryEvent, Organization,
+    OrganizationStatus
 )
 from sentry.tasks.deletion import delete_organization
 
@@ -45,26 +45,11 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
             {method} {path}
 
         """
-        team_list = list(Team.objects.filter(
-            organization=organization,
-            status=TeamStatus.VISIBLE,
-        ))
-
-        feature_list = []
-        if features.has('organizations:sso', organization, actor=request.user):
-            feature_list.append('sso')
-
-        if getattr(organization.flags, 'allow_joinleave'):
-            feature_list.append('open-membership')
-
-        context = serialize(organization, request.user)
-        context['access'] = access.from_user(request.user, organization).scopes
-        context['features'] = feature_list
-        context['teams'] = serialize(
-            team_list, request.user, TeamWithProjectsSerializer())
-        context['pendingAccessRequests'] = OrganizationAccessRequest.objects.filter(
-            team__organization=organization,
-        ).count()
+        context = serialize(
+            organization,
+            request.user,
+            DetailedOrganizationSerializer(),
+        )
         return Response(context)
 
     @sudo_required
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index 286b84b8ad..d4c979bd8e 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -1,8 +1,10 @@
 from __future__ import absolute_import
 
-from sentry.api.serializers import Serializer, register
+from sentry.api.serializers import Serializer, register, serialize
+from sentry.auth import access
 from sentry.models import (
-    Organization, OrganizationMember, OrganizationMemberType
+    Organization, OrganizationAccessRequest, OrganizationMember,
+    OrganizationMemberType, Team, TeamStatus
 )
 
 
@@ -54,3 +56,32 @@ class OrganizationSerializer(Serializer):
             }
         }
         return d
+
+
+class DetailedOrganizationSerializer(OrganizationSerializer):
+    def serialize(self, obj, attrs, user):
+        from sentry import features
+        from sentry.api.serializers.models.team import TeamWithProjectsSerializer
+
+        team_list = list(Team.objects.filter(
+            organization=obj,
+            status=TeamStatus.VISIBLE,
+        ))
+
+        feature_list = []
+        if features.has('organizations:sso', obj, actor=user):
+            feature_list.append('sso')
+
+        if getattr(obj.flags, 'allow_joinleave'):
+            feature_list.append('open-membership')
+
+        context = super(DetailedOrganizationSerializer, self).serialize(
+            obj, attrs, user)
+        context['teams'] = serialize(
+            team_list, user, TeamWithProjectsSerializer())
+        context['access'] = access.from_user(user, obj).scopes
+        context['features'] = feature_list
+        context['pendingAccessRequests'] = OrganizationAccessRequest.objects.filter(
+            team__organization=obj,
+        ).count()
+        return context
diff --git a/src/sentry/static/sentry/app/components/menuItem.jsx b/src/sentry/static/sentry/app/components/menuItem.jsx
index c1f79ae310..b85d493398 100644
--- a/src/sentry/static/sentry/app/components/menuItem.jsx
+++ b/src/sentry/static/sentry/app/components/menuItem.jsx
@@ -40,13 +40,16 @@ var MenuItem = React.createClass({
             query={this.props.query}
             title={this.props.title}
             onClick={this.handleClick}
+            className={this.props.linkClassName}
             tabIndex="-1">
           {this.props.children}
         </Router.Link>
       );
     }
     return (
-      <a title={this.props.title} onClick={this.handleClick} href={this.props.href} tabIndex="-1">
+      <a title={this.props.title} onClick={this.handleClick}
+          href={this.props.href} className={this.props.linkClassName}
+          tabIndex="-1">
         {this.props.children}
       </a>
     );
diff --git a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
index 2976701e8e..03facb450f 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
@@ -1,6 +1,7 @@
 import React from "react";
 import Router from "react-router";
 import jQuery from "jquery";
+import ConfigStore from "../../stores/configStore";
 import DropdownLink from "../dropdownLink";
 import MenuItem from "../menuItem";
 
@@ -74,14 +75,59 @@ var ProjectSelector = React.createClass({
       projectId: project.slug
     };
 
+    var label = this.getProjectLabel(team, project);
+
+    if (!this.props.router) {
+      return (
+        <MenuItem key={project.slug} href={this.getRawLink(project)}
+            linkClassName={project.slug == this.props.projectId && 'active'}>
+          {this.highlight(label, highlightText)}
+        </MenuItem>
+      );
+    }
+
     return (
       <MenuItem key={project.slug} to="projectDetails"
             params={projectRouteParams}>
-        {this.highlight(project.name, highlightText)}
+        {this.highlight(label, highlightText)}
       </MenuItem>
     );
   },
 
+  getProjectLabel(team, project) {
+    var label = project.name;
+    if (label.indexOf(team.name) === -1) {
+      label = team.name + ' / ' + project.name;
+    }
+    return label;
+  },
+
+  getRawLink(project) {
+    var org = this.props.organization;
+    var urlPrefix = ConfigStore.get('urlPrefix');
+    return urlPrefix + '/' + org.slug + '/' + project.slug + '/';
+  },
+
+  getLinkNode(team, project) {
+    var org = this.props.organization;
+    var label = this.getProjectLabel(team, project);
+
+    if (!this.props.router) {
+      return (
+        <a href={this.getRawLink(project)}>{label}</a>
+      )
+    }
+
+    var projectRouteParams = {
+      orgId: org.slug,
+      projectId: project.slug
+    };
+
+    return (
+      <Router.Link to="stream" params={projectRouteParams}>{label}</Router.Link>
+    );
+  },
+
   onOpen(event) {
     this.refs.filter.getDOMNode().focus();
   },
@@ -99,22 +145,16 @@ var ProjectSelector = React.createClass({
   },
 
   render() {
-    var projectId = this.props.projectId;
     var org = this.props.organization;
     var filter = this.state.filter;
     var children = [];
     var activeTeam;
     var activeProject;
-    var projectRouteParams = {
-      orgId: org.slug,
-      projectId: projectId
-    };
 
     org.teams.forEach((team) => {
       if (!team.isMember) {
         return;
       }
-      var hasTeam = false;
       team.projects.forEach((project) => {
         if (project.slug == this.props.projectId) {
           activeTeam = team;
@@ -124,28 +164,13 @@ var ProjectSelector = React.createClass({
         if (filter && fullName.indexOf(filter) === -1) {
           return;
         }
-        if (!hasTeam) {
-          children.push((
-            <li className="team-name" key={'_team' + team.slug}>
-              {this.highlight(team.name, this.state.filter)}
-            </li>
-          ));
-          hasTeam = true;
-        }
         children.push(this.getProjectNode(team, project, this.state.filter));
       });
     });
 
-    var activeProjectName;
-    if (activeProject.name.indexOf(activeTeam.name) === -1) {
-      activeProjectName = activeTeam.name + ' / ' + activeProject.name;
-    } else {
-      activeProjectName = activeProject.name;
-    }
-
     return (
       <div className="project-select" ref="container">
-        <Router.Link to="stream" params={projectRouteParams}>{activeProjectName}</Router.Link>
+        {this.getLinkNode(activeTeam, activeProject)}
         <DropdownLink ref="dropdownLink" title="" topLevelClasses="project-dropdown"
             onOpen={this.onOpen} onClose={this.onClose}>
           <li className="project-filter" key="_filter">
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index 33674c4d09..f20498d7ec 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -49,6 +49,7 @@ export default {
     FlotChart: require("./components/flotChart"),
     HookStore: require("./stores/hookStore"),
     Indicators: require("./components/indicators"),
+    ProjectSelector: require("./components/projectHeader/projectSelector"),
     RuleEditor: require("./views/ruleEditor")
   }
 };
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 0b81a10e8d..931f2d31aa 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -958,7 +958,7 @@ table.integrations {
   }
 
   .dropdown-menu {
-    width: 320px;
+    width: 250px;
     padding-bottom: 0;
     left: 0;
     .clearfix;
@@ -994,27 +994,9 @@ table.integrations {
       }
     }
 
-    .team-name {
-      width: 100%;
-      padding: 7px 15px;
-      font-size: 13px;
-      font-weight: 600;
-      color: @gray;
-      background: rgba(249, 250, 251, .65);
-      margin-bottom: 6px;
-      border-top: 1px solid lighten(@trim, 5);
-      border-bottom: 1px solid lighten(@trim, 5);
-
-      &:first-of-type {
-        border-top: 0;
-      }
-    }
-
     li {
-      width: 50%;
       position: relative;
-      float: left;
-      padding: 0 15px 6px;
+      padding: 3px 15px;
 
       strong {
         font-weight: normal;
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index e763c2508b..6dbfbf0220 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -124,27 +124,15 @@
         <div class="pull-right">
           {% block header_action %}{% endblock %}
         </div>
-        <div class="project-select">
-          <a href="#">{{ project.team.name }} / {{ project.name }}</a>
-          <span class="dropdown project-dropdown">
-            <a class="dropdown-toggle" data-toggle="dropdown"
-                href="{% url 'sentry-stream' project.organization.slug project.slug %}">
-              <i class="icon-arrow-down"></i>
-            </a>
-            <ul class="dropdown-menu">
-              <li class="project-filter" key="_filter">
-                <input type="text" placeholder="Filter projects"
-                       ref="filter" />
-              </li>
-              {% for n_team, n_project_list in TEAM_LIST %}
-                <li class="team-name">{{ n_team.name }}</li>
-                {% for n_project in n_project_list %}
-                  <li><a href="{% url 'sentry-stream' organization.slug n_project.slug %}">{{ n_project.name }}</a></li>
-                {% endfor %}
-              {% endfor %}
-            </ul>
-          </span>
-        </div>
+        <div id="blk_projectselect"></div>
+        <script>
+        $(function(){
+          React.render(React.createFactory(Sentry.ProjectSelector)({
+            organization: {% serialize_detailed_org organization %},
+            projectId: '{{ project.slug }}'
+          }), document.getElementById('blk_projectselect'));
+        });
+        </script>
       </div>
     </div>
     {% endblock %}
diff --git a/src/sentry/templatetags/sentry_api.py b/src/sentry/templatetags/sentry_api.py
index 3fb16aba7a..801596faed 100644
--- a/src/sentry/templatetags/sentry_api.py
+++ b/src/sentry/templatetags/sentry_api.py
@@ -4,6 +4,9 @@ from django import template
 from django.utils.html import mark_safe
 
 from sentry.api.serializers.base import serialize as serialize_func
+from sentry.api.serializers.models.organization import (
+    DetailedOrganizationSerializer
+)
 from sentry.utils import json
 
 
@@ -26,3 +29,19 @@ def convert_to_json(obj, escape=False):
     if escape:
         data = data.replace('<', '&lt;').replace('>', '&gt;')
     return mark_safe(data)
+
+
+@register.simple_tag(takes_context=True)
+def serialize_detailed_org(context, obj):
+    if 'request' in context:
+        user = context['request'].user
+    else:
+        user = None
+
+    context = serialize_func(
+        obj,
+        user,
+        DetailedOrganizationSerializer(),
+    )
+
+    return mark_safe(json.dumps(context))
