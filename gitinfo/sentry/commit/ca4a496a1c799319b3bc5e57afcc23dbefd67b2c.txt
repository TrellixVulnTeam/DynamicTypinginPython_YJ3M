commit ca4a496a1c799319b3bc5e57afcc23dbefd67b2c
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Wed Feb 8 12:37:53 2017 +0100

    Add UI for processing issues

diff --git a/src/sentry/api/endpoints/project_processingissues.py b/src/sentry/api/endpoints/project_processingissues.py
new file mode 100644
index 0000000000..139c2663dc
--- /dev/null
+++ b/src/sentry/api/endpoints/project_processingissues.py
@@ -0,0 +1,35 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.serializers import serialize
+from sentry.models import ProcessingIssue
+
+
+class ProjectProcessingIssuesEndpoint(ProjectEndpoint):
+    def get(self, request, project):
+        """
+        List a project's processing issues.
+        """
+        num_issues = ProcessingIssue.objects.filter(
+            project=project
+        ).count()
+
+        last_seen = ProcessingIssue.objects.filter(
+            project=project
+        ).order_by('-datetime').first()
+
+        data = {
+            'hasIssues': num_issues > 0,
+            'numIssues': num_issues,
+            'lastSeen': serialize(last_seen.datetime),
+        }
+
+        if request.GET.get('detailed') == '1':
+            q = ProcessingIssue.objects.with_num_events().filter(
+                project=project
+            ).order_by('type')
+            data['issues'] = [serialize(x, request.user) for x in q]
+
+        return Response(serialize(data, request.user))
diff --git a/src/sentry/api/serializers/models/processingissue.py b/src/sentry/api/serializers/models/processingissue.py
new file mode 100644
index 0000000000..456a3cef0d
--- /dev/null
+++ b/src/sentry/api/serializers/models/processingissue.py
@@ -0,0 +1,42 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.api.serializers import register, Serializer
+from sentry.models import ProcessingIssue
+
+
+@register(ProcessingIssue)
+class ProcessingIssueSerializer(Serializer):
+    def get_attrs(self, item_list, user):
+        counts = dict((i.id, getattr(i, 'num_events', None))
+                      for i in item_list)
+
+        missing_counts = []
+        for pk, events in six.iteritems(counts):
+            if events is None:
+                missing_counts.append(pk)
+
+        if missing_counts:
+            extra_counts = ProcessingIssue.objects.with_num_events().filter(
+                pk__in=list(missing_counts)).values('id', 'num_events')
+            for d in extra_counts:
+                counts[d['id']] = d['num_events']
+
+        result = {}
+        for item in item_list:
+            result[item] = {
+                'num_events': counts.get(item.id) or 0,
+            }
+
+        return result
+
+    def serialize(self, obj, attrs, user):
+        return {
+            'id': six.text_type(obj.id),
+            'type': obj.type,
+            'checksum': obj.checksum,
+            'numEvents': attrs['num_events'],
+            'data': obj.data,
+            'lastSeen': obj.datetime,
+        }
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 68d4c58246..2b5f62765e 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -74,6 +74,7 @@ from .endpoints.project_tagkey_details import ProjectTagKeyDetailsEndpoint
 from .endpoints.project_tagkey_values import ProjectTagKeyValuesEndpoint
 from .endpoints.project_users import ProjectUsersEndpoint
 from .endpoints.project_user_reports import ProjectUserReportsEndpoint
+from .endpoints.project_processingissues import ProjectProcessingIssuesEndpoint
 from .endpoints.release_commits import ReleaseCommitsEndpoint
 from .endpoints.release_details import ReleaseDetailsEndpoint
 from .endpoints.release_files import ReleaseFilesEndpoint
@@ -325,6 +326,9 @@ urlpatterns = patterns(
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/(?:user-feedback|user-reports)/$',
         ProjectUserReportsEndpoint.as_view(),
         name='sentry-api-0-project-user-reports'),
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/processingissues/$',
+        ProjectProcessingIssuesEndpoint.as_view(),
+        name='sentry-api-0-project-processing-issues'),
 
     # Load plugin project urls
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/plugins/(?P<plugin_id>[^\/]+)/$',
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 59bc8f3953..48845a7125 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -420,6 +420,7 @@ class NativeStacktraceProcessor(StacktraceProcessor):
                     type=e.type,
                     data={
                         'image_path': e.image_path,
+                        'image_uuid': e.image_uuid,
                         'image_arch': e.image_arch,
                         'message': e.message,
                     }
diff --git a/src/sentry/models/processingissue.py b/src/sentry/models/processingissue.py
index f27de38fbe..38ce560800 100644
--- a/src/sentry/models/processingissue.py
+++ b/src/sentry/models/processingissue.py
@@ -27,6 +27,9 @@ def get_processing_issue_checksum(scope, object):
 
 class ProcessingIssueManager(BaseManager):
 
+    def with_num_events(self):
+        return self.annotate(num_events=Count('eventprocessingissue'))
+
     def resolve_processing_issue(self, project, scope, object, type=None):
         """Resolves the given processing issues.  If not type is given
         all processing issues for scope and object are resolved regardless
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index b3ce7a09f7..ae4fba96af 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -47,6 +47,7 @@ import ProjectInstallPlatform from './views/projectInstall/platform';
 import ProjectReleases from './views/projectReleases';
 import ProjectSavedSearches from './views/projectSavedSearches';
 import ProjectDebugSymbols from './views/projectDebugSymbols';
+import ProjectProcessingIssues from './views/projectProcessingIssues';
 import ProjectSettings from './views/projectSettings';
 import ProjectUserReports from './views/projectUserReports';
 import ProjectUserReportSettings from './views/projectUserReportSettings';
@@ -158,6 +159,7 @@ function routes() {
             <Route path="filters/" component={errorHandler(ProjectFilters)} />
             <Route path="saved-searches/" component={errorHandler(ProjectSavedSearches)} />
             <Route path="debug-symbols/" component={errorHandler(ProjectDebugSymbols)} />
+            <Route path="processing-issues/" component={errorHandler(ProjectProcessingIssues)} />
             <Route path="user-feedback/" component={errorHandler(ProjectUserReportSettings)} />
             <Route path="csp/" component={errorHandler(ProjectCspSettings)} />
             <Route path="install/" component={errorHandler(ProjectDocsContext)}>
diff --git a/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
new file mode 100644
index 0000000000..cf3909f679
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
@@ -0,0 +1,187 @@
+import React from 'react';
+
+import ApiMixin from '../mixins/apiMixin';
+import TimeSince from '../components/timeSince';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import {t} from '../locale';
+
+const MESSAGES = {
+    'native_no_crashed_thread': t('No crashed thread found in crash report'),
+    'native_internal_failure': t('Internal failure when attempting to symbolicate: {error}'),
+    'native_no_symsynd': t('The symbolizer is not configured for this system.'),
+    'native_bad_dsym': t('The debug symbol file used was broken.'),
+    'native_missing_optionally_bundled_dsym': t('An optional debug symbol file was missing.'),
+    'native_missing_dsym': t('A required debug symbol file was missing.'),
+    'native_missing_system_dsym': t('A system debug symbol file was missing.'),
+    'native_missing_symbol': t('Unable to resolve a symbol.'),
+    'native_simulator_frame': t('Encountered an unprocessable simulator frame.'),
+    'native_unknown_image': t('An binary image is referenced that is unknown.')
+};
+
+const HELP_LINKS = {
+  'native:missing-dsym': 'https://docs.sentry.io/clients/cocoa/dsym/',
+  'native:bad-dsym': 'https://docs.sentry.io/clients/cocoa/dsym/',
+};
+
+
+const ProjectProcessingIssues = React.createClass({
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      processingIssues: null,
+    };
+  },
+
+  componentDidMount() {
+    this.fetchData();
+  },
+
+  fetchData() {
+    let {orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/processingissues/?detailed=1`, {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          error: false,
+          loading: false,
+          processingIssues: data,
+          pageLinks: jqXHR.getResponseHeader('Link')
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+
+  renderDebugTable() {
+    let body;
+
+    if (this.state.loading)
+      body = this.renderLoading();
+    else if (this.state.error)
+      body = <LoadingError onRetry={this.fetchData} />;
+    else if (this.state.processingIssues.hasIssues)
+      body = this.renderResults();
+    else
+      body = this.renderEmpty();
+
+    return body;
+  },
+
+  renderLoading() {
+    return (
+      <div className="box">
+        <LoadingIndicator />
+      </div>
+    );
+  },
+
+  renderEmpty() {
+    return (
+      <div className="box empty-stream">
+        <span className="icon icon-exclamation" />
+        <p>{t('Good news! There are no processing issues.')}</p>
+      </div>
+    );
+  },
+
+  getProblemDescription(item) {
+    let msg = MESSAGES[item.type];
+    return msg || item.message || 'Unknown Error';
+  },
+
+  getImageName(path) {
+    let pathSegments = path.split(/\//g);
+    return pathSegments[pathSegments.length - 1];
+  },
+
+  renderProblem(item) {
+    let description = this.getProblemDescription(item);
+    let helpLink = HELP_LINKS[item.type];
+    return (
+      <div className="processing-issue">
+        <span className="description">{description}</span>
+        {helpLink &&
+          <a href={helpLink} className="help-link"><span className="icon-question" /></a>}
+      </div>
+    );
+  },
+
+  renderDetails(item) {
+    let dsymUUID = null;
+    let dsymName = null;
+    let dsymArch = null;
+
+    if (item.data._scope === 'native') {
+      if (item.data.image_uuid) {
+        dsymUUID = <code className="uuid">{item.data.image_uuid}</code>;
+      }
+      if (item.data.image_path) {
+        dsymName = <em>{this.getImageName(item.data.image_path)}</em>;
+      }
+      if (item.data.image_arch) {
+        dsymArch = item.data.image_arch;
+      }
+    }
+
+    return (
+      <span>
+        {dsymUUID && <span> {dsymUUID}</span>}
+        {dsymArch && <span> {dsymArch}</span>}
+        {dsymName && <span> (for {dsymName})</span>}
+      </span>
+    );
+  },
+
+  renderResults() {
+    return (
+      <table className="table processing-issues">
+        <thead>
+          <tr>
+            <th>{t('Problem')}</th>
+            <th>{t('Details')}</th>
+            <th>{t('Events')}</th>
+            <th>{t('Last seen')}</th>
+          </tr>
+        </thead>
+        <tbody>
+          {this.state.processingIssues.issues.map((item, idx) => {
+            return (
+              <tr key={idx}>
+                <td>{this.renderProblem(item)}</td>
+                <td>{this.renderDetails(item)}</td>
+                <td>{item.numEvents + ''}</td>
+                <td><TimeSince date={item.lastSeen}/></td>
+              </tr>
+            );
+          })}
+        </tbody>
+      </table>
+    );
+  },
+
+  render() {
+    return (
+      <div>
+        <h1>{t('Processing Issues')}</h1>
+        <p>{t(`
+          For some platforms the event processing requires configuration or
+          manual action.  If a misconfiguration happens or some necessary
+          steps are skipped issues can occur during processing.  In these
+          cases you can see all the problems here with guides of how to correct
+          them.
+        `)}</p>
+        {this.renderDebugTable()}
+      </div>
+    );
+  }
+});
+
+export default ProjectProcessingIssues;
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index b037c438fb..ea49ee1149 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -95,6 +95,7 @@ const ProjectSettings = React.createClass({
             <li><a href={`${settingsUrlRoot}/release-tracking/`}>{t('Release Tracking')}</a></li>
             <ListLink to={`/${orgId}/${projectId}/settings/saved-searches/`}>{t('Saved Searches')}</ListLink>
             <ListLink to={`/${orgId}/${projectId}/settings/debug-symbols/`}>{t('Debug Symbols')}</ListLink>
+            <ListLink to={`/${orgId}/${projectId}/settings/processing-issues/`}>{t('Processing Issues')}</ListLink>
           </ul>
           <h6 className="nav-header">{t('Data')}</h6>
           <ul className="nav nav-stacked">
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index a570f50503..27cfb80188 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -19,10 +19,11 @@ import StreamTagActions from '../actions/streamTagActions';
 import StreamTagStore from '../stores/streamTagStore';
 import StreamFilters from './stream/filters';
 import StreamSidebar from './stream/sidebar';
+import TimeSince from '../components/timeSince';
 import utils from '../utils';
 import {logAjaxError} from '../utils/logging';
 import parseLinkHeader from '../utils/parseLinkHeader';
-import {t, tct} from '../locale';
+import {t, tn, tct} from '../locale';
 
 const Stream = React.createClass({
   propTypes: {
@@ -73,6 +74,7 @@ const Stream = React.createClass({
       tagsLoading: true,
       isSidebarVisible: false,
       isStickyHeader: false,
+      processingIssues: null,
       ...this.getQueryState()
     };
   },
@@ -86,6 +88,7 @@ const Stream = React.createClass({
     });
 
     this.fetchSavedSearches();
+    this.fetchProcessingIssues();
     this.fetchTags();
     if (!this.state.loading) {
       this.fetchData();
@@ -190,6 +193,23 @@ const Stream = React.createClass({
     });
   },
 
+  fetchProcessingIssues() {
+    let {orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/processingissues/`, {
+      success: (data) => {
+        if (data.hasIssues) {
+          this.setState({
+            processingIssues: data,
+          });
+        }
+      },
+      error: (error) => {
+        logAjaxError(error);
+        // this is okay. it's just a ui hint
+      }
+    });
+  },
+
   fetchTags() {
     StreamTagStore.reset();
     StreamTagActions.loadTags();
@@ -211,6 +231,10 @@ const Stream = React.createClass({
     });
   },
 
+  showingProcessingIssues() {
+    return this.state.query && this.state.query.trim() == 'is:unprocessed';
+  },
+
   onSavedSearchCreate(data) {
     let {orgId, projectId} = this.props.params;
     let savedSearchList = this.state.savedSearchList;
@@ -483,6 +507,30 @@ const Stream = React.createClass({
     browserHistory.pushState(null, path, queryParams);
   },
 
+  renderProcessingIssuesHint() {
+    let pi = this.state.processingIssues;
+    if (!pi || this.showingProcessingIssues()) {
+      return null;
+    }
+
+    let issues = tn('is %d problem', 'are %d problems', pi.numIssues);
+
+    let {orgId, projectId} = this.props.params;
+
+    return (
+      <div className="processing-issues">
+        <strong>{t('Unprocessed Issues: ')}</strong>
+        {tct('there [issues].', {
+          issues: issues
+        })}
+        {' '}
+        <span className="last-seen">({t('last issue')}: <TimeSince date={pi.lastSeen}/>)</span>
+        {' '}
+        <Link to={`/${orgId}/${projectId}/settings/processing-issues/`}>{t('show issues')}</Link>
+      </div>
+    );
+  },
+
   renderGroupNodes(ids, statsPeriod) {
     let {orgId, projectId} = this.props.params;
     let groupNodes = ids.map((id) => {
@@ -612,6 +660,7 @@ const Stream = React.createClass({
                 </div>
               </div>
             </Sticky>
+            {this.renderProcessingIssuesHint()}
             {this.renderStreamBody()}
             <Pagination pageLinks={this.state.pageLinks}/>
           </div>
diff --git a/src/sentry/static/sentry/less/stream.less b/src/sentry/static/sentry/less/stream.less
index 11e733aeeb..dc8724c57e 100644
--- a/src/sentry/static/sentry/less/stream.less
+++ b/src/sentry/static/sentry/less/stream.less
@@ -193,6 +193,27 @@
 * ============================================================================
 */
 
+.stream-content .processing-issues {
+  padding-left: 0;
+  font-size: 14px;
+  font-weight: 400;
+  padding: 5px 10px;
+  border: 1px solid @purple-light;
+  background: lighten(@purple-lightest, 15%);
+  color: @purple-dark;
+  text-align: center;
+
+  a {
+    color: @purple-dark;
+    font-weight: bold;
+    text-decoration: underline;
+  }
+
+  .last-seen {
+    font-style: italic;
+  }
+}
+
 .group-list {
   background: #fff;
   border: 1px solid @trim;
@@ -255,6 +276,17 @@
       }
     }
 
+    &.isUnprocessed {
+      background: lighten(@purple-light, 30%);
+
+      strong.unprocessed-hint {
+        background: @purple-light;
+        color: white;
+        padding: 2px 6px;
+        border-radius: 2px;
+      }
+    }
+
     &.selected {
       background: lighten(@blue, 20);
       box-shadow: inset 0 1px 0 rgba(52, 60, 69, 0.08);
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 3f43cf68ca..0d42c2dbac 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -202,6 +202,9 @@
     <li>
         <a href="{% absolute_uri '/{}/{}/settings/debug-symbols/' project.organization.slug project.slug %}">{% trans "Debug Symbols" %}</a>
     </li>
+    <li>
+        <a href="{% absolute_uri '/{}/{}/settings/processing-issues/' project.organization.slug project.slug %}">{% trans "Processing Issues" %}</a>
+    </li>
   </ul>
   <h6 class="nav-header">{% trans "Data" %}</h6>
   <ul class="nav nav-stacked">
