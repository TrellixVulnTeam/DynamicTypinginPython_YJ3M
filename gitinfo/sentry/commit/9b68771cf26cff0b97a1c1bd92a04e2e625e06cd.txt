commit 9b68771cf26cff0b97a1c1bd92a04e2e625e06cd
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Mar 14 14:38:27 2018 -0700

    feat(ui): Add default icon for all PanelAlert based on `type` (#7578)
    
    * Change default PanelAlert[type="info"] icon
    * Change PanelAlert to have no default margins

diff --git a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
index ecf5ea40dc..8347e52ef1 100644
--- a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
@@ -113,7 +113,7 @@ export default class ProjectAlertSettings extends AsyncView {
             title={t('Digests')}
             fields={[fields.digestsMinDelay, fields.digestsMaxDelay]}
             renderHeader={() => (
-              <PanelAlert m={0} mb={0} type="info" icon="icon-circle-exclamation">
+              <PanelAlert type="info">
                 {t(
                   'Sentry will automatically digest alerts sent ' +
                     'by some services to avoid flooding your inbox ' +
diff --git a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
index 95804439df..cbe99f5b3f 100644
--- a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
@@ -1,4 +1,3 @@
-import {Box} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
 
@@ -19,19 +18,15 @@ import TextBlock from './settings/components/text/textBlock';
 import TextField from './settings/components/forms/textField';
 import {fields} from '../data/forms/projectGeneralSettings';
 
-const noMargin = {marginBottom: 0};
-
 const AutoResolveFooter = () => (
-  <Box p={2} pb={0}>
-    <PanelAlert type="warning" icon="icon-circle-exclamation" css={noMargin}>
-      <strong>
-        {t(
-          'Note: Enabling auto resolve will immediately resolve anything that has ' +
-            'not been seen within this period of time. There is no undo!'
-        )}
-      </strong>
-    </PanelAlert>
-  </Box>
+  <PanelAlert type="warning">
+    <strong>
+      {t(
+        'Note: Enabling auto resolve will immediately resolve anything that has ' +
+          'not been seen within this period of time. There is no undo!'
+      )}
+    </strong>
+  </PanelAlert>
 );
 
 export default class ProjectGeneralSettings extends AsyncView {
@@ -288,27 +283,23 @@ export default class ProjectGeneralSettings extends AsyncView {
               fields.verifySSL,
             ]}
             renderHeader={() => (
-              <Box p={2} pb={0}>
-                <PanelAlert type="info" icon="icon-circle-exclamation" css={noMargin}>
-                  <TextBlock noMargin>
-                    {tct(
-                      'Configure origin URLs which Sentry should accept events from. This is used for communication with clients like [link].',
-                      {
-                        link: (
-                          <a href="https://github.com/getsentry/raven-js">raven-js</a>
-                        ),
-                      }
-                    )}{' '}
-                    {tct(
-                      'This will restrict requests based on the [Origin] and [Referer] headers.',
-                      {
-                        Origin: <code>Origin</code>,
-                        Referer: <code>Referer</code>,
-                      }
-                    )}
-                  </TextBlock>
-                </PanelAlert>
-              </Box>
+              <PanelAlert type="info">
+                <TextBlock noMargin>
+                  {tct(
+                    'Configure origin URLs which Sentry should accept events from. This is used for communication with clients like [link].',
+                    {
+                      link: <a href="https://github.com/getsentry/raven-js">raven-js</a>,
+                    }
+                  )}{' '}
+                  {tct(
+                    'This will restrict requests based on the [Origin] and [Referer] headers.',
+                    {
+                      Origin: <code>Origin</code>,
+                      Referer: <code>Referer</code>,
+                    }
+                  )}
+                </TextBlock>
+              </PanelAlert>
             )}
           />
         </Form>
diff --git a/src/sentry/static/sentry/app/views/settings/components/panelAlert.jsx b/src/sentry/static/sentry/app/views/settings/components/panelAlert.jsx
index e2393a5441..8896ea844c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/panelAlert.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/panelAlert.jsx
@@ -7,10 +7,21 @@ import Alert from '../../../components/alert';
 
 // Margin bottom should probably be a different prop
 const StyledPanelAlert = styled(Alert)`
-  margin: ${p => `-${p.m * 2 + 1}px -${p.m * 2 + 1}px ${p.mb * 3}px`};
+  ${p =>
+    typeof p.m !== 'undefined'
+      ? `margin: -${p.m * p.theme.grid + 1}px -${p.m * p.theme.grid + 1}px;`
+      : ''};
+  ${p => (typeof p.mb !== 'undefined' ? `margin-bottom: ${p.mb * p.theme.grid};` : '')};
   border-radius: 0;
 `;
 
+const DEFAULT_ICONS = {
+  info: 'icon-circle-info',
+  error: 'icon-circle-close',
+  warning: 'icon-circle-exclamation',
+  success: 'icon-circle-success',
+};
+
 class PanelAlert extends React.Component {
   static propTypes = {
     /**
@@ -21,17 +32,20 @@ class PanelAlert extends React.Component {
      * margin-bottom
      */
     mb: PropTypes.number,
-    theme: PropTypes.object,
+    type: PropTypes.oneOf(['info', 'warning', 'success', 'error']),
+    icon: PropTypes.string,
   };
 
-  static defaultProps = {};
+  static defaultProps = {
+    m: 0,
+    mb: 0,
+  };
 
   render() {
-    let {m, mb, theme, ...props} = this.props;
-    let marginSize = typeof m !== 'undefined' ? m : theme.grid;
-    let marginBottom = typeof mb !== 'undefined' ? mb : theme.grid;
+    let {type, icon, ...props} = this.props;
+    let iconOrDefault = icon || DEFAULT_ICONS[type];
 
-    return <StyledPanelAlert {...props} m={marginSize} mb={marginBottom} />;
+    return <StyledPanelAlert {...props} icon={iconOrDefault} type={type} />;
   }
 }
 
diff --git a/src/sentry/static/sentry/app/views/settings/organization/rateLimit/rateLimitView.jsx b/src/sentry/static/sentry/app/views/settings/organization/rateLimit/rateLimitView.jsx
index 4642b830b8..c147b39eba 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/rateLimit/rateLimitView.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/rateLimit/rateLimitView.jsx
@@ -61,7 +61,7 @@ class RateLimitView extends React.Component {
             </Box>
           </PanelHeader>
           <PanelBody>
-            <PanelAlert m={0} mb={0} type="info" icon="icon-circle-exclamation">
+            <PanelAlert type="info">
               {t(`Rate limits allow you to control how much data is stored for this
                 organization. When a rate is exceeded the system will begin discarding
                 data until the next interval.`)}
