commit 6e1c2f20646ec29b198a4860e110fb11efb8a8b7
Author: NisanthanNanthakumar <nisanthan.nanthakumar@sentry.io>
Date:   Wed May 20 14:06:20 2020 -0700

    feat(SentryApps): Raise exception on error statuses (#18848)
    
    Objective
    We don't call raise_for_status so errors are not being raised when the API fails and our error logging isn't hitting. This is making it difficult to debug problems with Sentry Apps. WIth this PR, errors at the API level should throw an error that can be caught and logged at higher levels

diff --git a/src/sentry/mediators/external_requests/issue_link_requester.py b/src/sentry/mediators/external_requests/issue_link_requester.py
index 843b1af93a..c7514b4826 100644
--- a/src/sentry/mediators/external_requests/issue_link_requester.py
+++ b/src/sentry/mediators/external_requests/issue_link_requester.py
@@ -61,17 +61,17 @@ class IssueLinkRequester(Mediator):
 
     def _make_request(self):
         action_to_past_tense = {"create": "created", "link": "linked"}
-        req = send_and_save_sentry_app_request(
-            self._build_url(),
-            self.sentry_app,
-            self.install.organization_id,
-            "external_issue.{}".format(action_to_past_tense[self.action]),
-            headers=self._build_headers(),
-            method="POST",
-            data=self.body,
-        )
 
         try:
+            req = send_and_save_sentry_app_request(
+                self._build_url(),
+                self.sentry_app,
+                self.install.organization_id,
+                "external_issue.{}".format(action_to_past_tense[self.action]),
+                headers=self._build_headers(),
+                method="POST",
+                data=self.body,
+            )
             body = safe_urlread(req)
             response = json.loads(body)
         except Exception as e:
diff --git a/src/sentry/mediators/external_requests/util.py b/src/sentry/mediators/external_requests/util.py
index ee527e8c1f..06486e9f71 100644
--- a/src/sentry/mediators/external_requests/util.py
+++ b/src/sentry/mediators/external_requests/util.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 from jsonschema import Draft4Validator
-from requests.exceptions import RequestException
+from requests.exceptions import Timeout
 
 from sentry.utils.sentryappwebhookrequests import SentryAppWebhookRequestsBuffer
 from sentry.http import safe_urlopen
@@ -56,21 +56,23 @@ def send_and_save_sentry_app_request(url, sentry_app, org_id, event, **kwargs):
 
     try:
         resp = safe_urlopen(url=url, **kwargs)
-    except RequestException:
+
+    except Timeout:
         track_response_code("timeout", slug, event)
         # Response code of 0 represents timeout
         buffer.add_request(response_code=0, org_id=org_id, event=event, url=url)
         # Re-raise the exception because some of these tasks might retry on the exception
         raise
 
-    track_response_code(resp.status_code, slug, event)
-    buffer.add_request(
-        response_code=resp.status_code,
-        org_id=org_id,
-        event=event,
-        url=url,
-        error_id=resp.headers.get("Sentry-Hook-Error"),
-        project_id=resp.headers.get("Sentry-Hook-Project"),
-    )
-
-    return resp
+    else:
+        track_response_code(resp.status_code, slug, event)
+        buffer.add_request(
+            response_code=resp.status_code,
+            org_id=org_id,
+            event=event,
+            url=url,
+            error_id=resp.headers.get("Sentry-Hook-Error"),
+            project_id=resp.headers.get("Sentry-Hook-Project"),
+        )
+        resp.raise_for_status()
+        return resp
diff --git a/src/sentry/tasks/sentry_apps.py b/src/sentry/tasks/sentry_apps.py
index 5981b378d3..d36583a82e 100644
--- a/src/sentry/tasks/sentry_apps.py
+++ b/src/sentry/tasks/sentry_apps.py
@@ -4,7 +4,7 @@ import logging
 
 from celery.task import current
 from django.core.urlresolvers import reverse
-from requests.exceptions import RequestException
+from requests.exceptions import RequestException, Timeout
 
 from sentry.eventstore.models import Event
 from sentry.http import safe_urlopen
@@ -304,21 +304,22 @@ def send_and_save_webhook_request(url, sentry_app, app_platform_event):
             url=url, data=app_platform_event.body, headers=app_platform_event.headers, timeout=5
         )
 
-    except RequestException:
+    except Timeout:
         track_response_code("timeout", slug, event)
         # Response code of 0 represents timeout
         buffer.add_request(response_code=0, org_id=org_id, event=event, url=url)
         # Re-raise the exception because some of these tasks might retry on the exception
         raise
-    track_response_code(resp.status_code, slug, event)
-
-    buffer.add_request(
-        response_code=resp.status_code,
-        org_id=org_id,
-        event=event,
-        url=url,
-        error_id=resp.headers.get("Sentry-Hook-Error"),
-        project_id=resp.headers.get("Sentry-Hook-Project"),
-    )
 
-    return resp
+    else:
+        track_response_code(resp.status_code, slug, event)
+        buffer.add_request(
+            response_code=resp.status_code,
+            org_id=org_id,
+            event=event,
+            url=url,
+            error_id=resp.headers.get("Sentry-Hook-Error"),
+            project_id=resp.headers.get("Sentry-Hook-Project"),
+        )
+        resp.raise_for_status()
+        return resp
diff --git a/tests/sentry/mediators/external_requests/test_issue_link_requester.py b/tests/sentry/mediators/external_requests/test_issue_link_requester.py
index c59db39bc8..8420fe08c4 100644
--- a/tests/sentry/mediators/external_requests/test_issue_link_requester.py
+++ b/tests/sentry/mediators/external_requests/test_issue_link_requester.py
@@ -124,7 +124,6 @@ class TestIssueLinkRequester(TestCase):
 
         buffer = SentryAppWebhookRequestsBuffer(self.sentry_app)
         requests = buffer.get_requests()
-
         assert len(requests) == 1
         assert requests[0]["response_code"] == 500
         assert requests[0]["event_type"] == "external_issue.created"
diff --git a/tests/sentry/mediators/sentry_app_installations/test_installation_notifier.py b/tests/sentry/mediators/sentry_app_installations/test_installation_notifier.py
index de6db4ca14..5a9feec5e1 100644
--- a/tests/sentry/mediators/sentry_app_installations/test_installation_notifier.py
+++ b/tests/sentry/mediators/sentry_app_installations/test_installation_notifier.py
@@ -10,8 +10,15 @@ from sentry.testutils.helpers.faux import faux
 from sentry.utils import json
 from sentry.utils.sentryappwebhookrequests import SentryAppWebhookRequestsBuffer
 
-MockResponse = namedtuple("MockResponse", ["headers", "content", "ok", "status_code"])
-MockResponseInstance = MockResponse({}, {}, True, 200)
+
+def raiseStatusFalse():
+    return False
+
+
+MockResponse = namedtuple(
+    "MockResponse", ["headers", "content", "ok", "status_code", "raise_for_status"]
+)
+MockResponseInstance = MockResponse({}, {}, True, 200, raiseStatusFalse)
 
 
 class DictContaining(object):
diff --git a/tests/sentry/tasks/test_sentry_apps.py b/tests/sentry/tasks/test_sentry_apps.py
index 0e54095fa7..1a4e8e3fb0 100644
--- a/tests/sentry/tasks/test_sentry_apps.py
+++ b/tests/sentry/tasks/test_sentry_apps.py
@@ -7,7 +7,7 @@ from celery import Task
 from collections import namedtuple
 from django.core.urlresolvers import reverse
 from sentry.utils.compat.mock import patch
-from requests.exceptions import RequestException
+from requests.exceptions import Timeout
 
 from sentry.models import Rule, SentryApp, SentryAppInstallation
 from sentry.testutils import TestCase
@@ -30,16 +30,28 @@ from sentry.tasks.sentry_apps import (
     send_webhooks,
 )
 
+
+def raiseStatuseFalse():
+    return False
+
+
+def raiseStatusTrue():
+    return True
+
+
 RuleFuture = namedtuple("RuleFuture", ["rule", "kwargs"])
 
-MockResponse = namedtuple("MockResponse", ["headers", "content", "ok", "status_code"])
-MockResponseInstance = MockResponse({}, {}, True, 200)
-MockFailureResponseInstance = MockResponse({}, {}, False, 400)
+MockResponse = namedtuple(
+    "MockResponse", ["headers", "content", "ok", "status_code", "raise_for_status"]
+)
+MockResponseInstance = MockResponse({}, {}, True, 200, raiseStatuseFalse)
+MockFailureResponseInstance = MockResponse({}, {}, False, 400, raiseStatusTrue)
 MockResponseWithHeadersInstance = MockResponse(
     {"Sentry-Hook-Error": "d5111da2c28645c5889d072017e3445d", "Sentry-Hook-Project": "1"},
     {},
     False,
     400,
+    raiseStatusTrue,
 )
 
 
@@ -415,11 +427,11 @@ class TestWebhookRequests(TestCase):
         assert first_request["event_type"] == "issue.assigned"
         assert first_request["organization_id"] == self.install.organization.id
 
-    @patch("sentry.tasks.sentry_apps.safe_urlopen", side_effect=RequestException("Timeout"))
+    @patch("sentry.tasks.sentry_apps.safe_urlopen", side_effect=Timeout)
     def test_saves_error_for_request_timeout(self, safe_urlopen):
         data = {"issue": serialize(self.issue)}
 
-        with self.assertRaises(RequestException):
+        with self.assertRaises(Timeout):
             send_webhooks(
                 installation=self.install, event="issue.assigned", data=data, actor=self.user
             )
