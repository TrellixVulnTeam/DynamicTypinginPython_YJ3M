commit 925696a86f7b5801e59b72567efc4ceb740948b9
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 28 15:31:32 2015 -0700

    Add mock linting

diff --git a/setup.py b/setup.py
index 539294a883..a10e0aded8 100755
--- a/setup.py
+++ b/setup.py
@@ -231,6 +231,9 @@ setup(
         'console_scripts': [
             'sentry = sentry.utils.runner:main',
         ],
+        'flake8.extension': [
+            'C900 = sentry.lint.mock_check:MockCheck',
+        ],
     },
     classifiers=[
         'Framework :: Django',
diff --git a/src/sentry/lint/__init__.py b/src/sentry/lint/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/src/sentry/lint/mock_check.py b/src/sentry/lint/mock_check.py
new file mode 100644
index 0000000000..540c2c1c3a
--- /dev/null
+++ b/src/sentry/lint/mock_check.py
@@ -0,0 +1,42 @@
+from __future__ import absolute_import
+
+import ast
+
+
+class MockAttrVisitor(ast.NodeVisitor):
+    non_existent_methods = frozenset([
+        'assert_calls',
+        'assert_not_called',
+        'assert_called',
+        'assert_called_once',
+        'not_called',
+        'called_once',
+        'called_once_with',
+    ])
+
+    def __init__(self):
+        self.errors = []
+
+    def visit(self, node):
+        super(MockAttrVisitor, self).visit(node)
+
+    def visit_Attribute(self, node):
+        self.generic_visit(node)
+        if node.attr in self.non_existent_methods:
+            self.errors.append((node.lineno, node.attr))
+
+
+class MockCheck(object):
+    name = 'mock-checker'
+    version = '0'
+    _error_tmpl = "C900 Mock function call is banned: %s"
+
+    def __init__(self, tree, filename=None):
+        self.tree = tree
+
+    def run(self):
+        visitor = MockAttrVisitor()
+        visitor.visit(self.tree)
+        for lineno, attr in visitor.errors:
+            text = self._error_tmpl % (attr,)
+            yield lineno, 0, text, type(self)
