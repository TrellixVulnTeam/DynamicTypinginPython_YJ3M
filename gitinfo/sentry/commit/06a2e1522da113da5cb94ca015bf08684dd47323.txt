commit 06a2e1522da113da5cb94ca015bf08684dd47323
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Oct 5 11:31:25 2015 -0700

    Add explicit validation errors to interfaces

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index e2f45d6339..412f0cc780 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -28,7 +28,7 @@ from sentry.constants import (
     CLIENT_RESERVED_ATTRS, DEFAULT_LOG_LEVEL, LOG_LEVELS, MAX_TAG_VALUE_LENGTH,
     MAX_TAG_KEY_LENGTH
 )
-from sentry.interfaces.base import get_interface
+from sentry.interfaces.base import get_interface, InterfaceValidationError
 from sentry.models import EventError, Project, ProjectKey
 from sentry.tasks.store import preprocess_event
 from sentry.utils import is_float, json
@@ -508,7 +508,7 @@ class ClientApiHelper(object):
                 inst = interface.to_python(value)
                 data[inst.get_path()] = inst.to_json()
             except Exception as e:
-                if isinstance(e, AssertionError):
+                if isinstance(e, InterfaceValidationError):
                     log = self.log.info
                 else:
                     log = self.log.error
diff --git a/src/sentry/interfaces/base.py b/src/sentry/interfaces/base.py
index 76a1690d32..a92ad0f2c9 100644
--- a/src/sentry/interfaces/base.py
+++ b/src/sentry/interfaces/base.py
@@ -21,6 +21,10 @@ def get_interface(name):
     return interface
 
 
+class InterfaceValidationError(Exception):
+    pass
+
+
 class Interface(object):
     """
     An interface is a structured representation of data, which may
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 32be376f9f..31105ec5c0 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -12,7 +12,7 @@ __all__ = ('Exception',)
 
 from django.conf import settings
 
-from sentry.interfaces.base import Interface
+from sentry.interfaces.base import Interface, InterfaceValidationError
 from sentry.interfaces.stacktrace import Stacktrace
 from sentry.utils.safe import trim
 
@@ -40,7 +40,8 @@ class SingleException(Interface):
 
     @classmethod
     def to_python(cls, data, has_system_frames=None):
-        assert data.get('type') or data.get('value')
+        if not (data.get('type') or data.get('value')):
+            raise InterfaceValidationError("No 'type' or 'value' present")
 
         if data.get('stacktrace') and data['stacktrace'].get('frames'):
             stacktrace = Stacktrace.to_python(
@@ -148,7 +149,8 @@ class Exception(Interface):
         if 'values' not in data:
             data = {'values': [data]}
 
-        assert data['values']
+        if not data['values']:
+            raise InterfaceValidationError("No 'values' present")
 
         trim_exceptions(data)
 
@@ -165,7 +167,8 @@ class Exception(Interface):
         }
 
         if data.get('exc_omitted'):
-            assert len(data['exc_omitted']) == 2
+            if len(data['exc_omitted']) != 2:
+                raise InterfaceValidationError("Invalid value for 'exc_omitted'")
             kwargs['exc_omitted'] = data['exc_omitted']
         else:
             kwargs['exc_omitted'] = None
diff --git a/src/sentry/interfaces/http.py b/src/sentry/interfaces/http.py
index a2e75aaff9..05c41da841 100644
--- a/src/sentry/interfaces/http.py
+++ b/src/sentry/interfaces/http.py
@@ -16,7 +16,7 @@ from urllib import urlencode
 from urlparse import parse_qsl, urlsplit, urlunsplit
 
 from sentry.constants import HTTP_METHODS
-from sentry.interfaces.base import Interface
+from sentry.interfaces.base import Interface, InterfaceValidationError
 from sentry.utils import json
 from sentry.utils.safe import trim, trim_dict, trim_pairs
 from sentry.web.helpers import render_to_string
@@ -92,13 +92,15 @@ class Http(Interface):
 
     @classmethod
     def to_python(cls, data):
-        assert data.get('url')
+        if not data.get('url'):
+            raise InterfaceValidationError("No value for 'url'")
 
         kwargs = {}
 
         if data.get('method'):
             method = data['method'].upper()
-            assert method in HTTP_METHODS
+            if method not in HTTP_METHODS:
+                raise InterfaceValidationError("Invalid value for 'method'")
             kwargs['method'] = method
         else:
             kwargs['method'] = None
diff --git a/src/sentry/interfaces/query.py b/src/sentry/interfaces/query.py
index 8c1e13988f..d4975dee90 100644
--- a/src/sentry/interfaces/query.py
+++ b/src/sentry/interfaces/query.py
@@ -10,7 +10,7 @@ from __future__ import absolute_import
 
 __all__ = ('Query',)
 
-from sentry.interfaces.base import Interface
+from sentry.interfaces.base import Interface, InterfaceValidationError
 from sentry.utils.safe import trim
 
 
@@ -25,7 +25,8 @@ class Query(Interface):
     """
     @classmethod
     def to_python(cls, data):
-        assert data.get('query')
+        if not data.get('query'):
+            raise InterfaceValidationError("No 'query' value")
 
         kwargs = {
             'query': trim(data['query'], 1024),
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 681ab110e8..3513ccae6e 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -19,7 +19,7 @@ from django.utils.translation import ugettext as _
 from urlparse import urlparse
 
 from sentry.app import env
-from sentry.interfaces.base import Interface
+from sentry.interfaces.base import Interface, InterfaceValidationError
 from sentry.models import UserOption
 from sentry.utils.safe import trim, trim_dict
 from sentry.web.helpers import render_to_string
@@ -166,8 +166,9 @@ class Frame(Interface):
         function = data.get('function')
         module = data.get('module')
 
-        for v in (abs_path, filename, function, module):
-            assert isinstance(v, (string_types, NoneType))
+        for name in ('abs_path', 'filename', 'function', 'module'):
+            if not isinstance(data.get(name), (string_types, NoneType)):
+                raise InterfaceValidationError("Invalid value for '%s'" % name)
 
         # absolute path takes priority over filename
         # (in the end both will get set)
@@ -185,7 +186,8 @@ class Frame(Interface):
             else:
                 filename = abs_path
 
-        assert filename or function or module
+        if not (filename or function or module):
+            raise InterfaceValidationError("No 'filename' or 'function' or 'module'")
 
         if function == '?':
             function = None
@@ -216,12 +218,17 @@ class Frame(Interface):
         else:
             pre_context, post_context = None, None
 
+        try:
+            in_app = validate_bool(data.get('in_app'), False)
+        except AssertionError:
+            raise InterfaceValidationError("Invalid value for 'in_app'")
+
         kwargs = {
             'abs_path': trim(abs_path, 256),
             'filename': trim(filename, 256),
             'module': trim(module, 256),
             'function': trim(function, 256),
-            'in_app': validate_bool(data.get('in_app'), False),
+            'in_app': in_app,
             'context_line': context_line,
             # TODO(dcramer): trim pre/post_context
             'pre_context': pre_context,
@@ -483,7 +490,8 @@ class Stacktrace(Interface):
 
     @classmethod
     def to_python(cls, data, has_system_frames=None):
-        assert data.get('frames')
+        if not data.get('frames'):
+            raise InterfaceValidationError("No 'frames' present")
 
         slim_frame_data(data)
 
@@ -506,7 +514,8 @@ class Stacktrace(Interface):
         }
 
         if data.get('frames_omitted'):
-            assert len(data['frames_omitted']) == 2
+            if len(data['frames_omitted']) != 2:
+                raise InterfaceValidationError("Invalid value for 'frames_omitted'")
             kwargs['frames_omitted'] = data['frames_omitted']
         else:
             kwargs['frames_omitted'] = None
diff --git a/src/sentry/interfaces/user.py b/src/sentry/interfaces/user.py
index d5e053d2e0..f8f64fce54 100644
--- a/src/sentry/interfaces/user.py
+++ b/src/sentry/interfaces/user.py
@@ -9,7 +9,7 @@ from __future__ import absolute_import
 
 __all__ = ('User',)
 
-from sentry.interfaces.base import Interface
+from sentry.interfaces.base import Interface, InterfaceValidationError
 from sentry.utils.safe import trim, trim_dict
 from sentry.web.helpers import render_to_string
 from ipaddr import IPAddress
@@ -20,7 +20,7 @@ def validate_email(value, required=True):
         return
 
     if not isinstance(value, basestring):
-        raise TypeError('object of type %r is not an email address' % type(value).__name__)
+        raise ValueError('object of type %r is not an email address' % type(value).__name__)
 
     # safe to assume an email address at least has a @ in it.
     if '@' not in value:
@@ -65,11 +65,18 @@ class User(Interface):
         ident = trim(data.pop('id', None), 128)
         if ident:
             ident = unicode(ident)
-        email = trim(validate_email(data.pop('email', None), False), 128)
+        try:
+            email = trim(validate_email(data.pop('email', None), False), 128)
+        except ValueError:
+            raise InterfaceValidationError("Invalid value for 'email'")
         username = trim(data.pop('username', None), 128)
         if username:
             username = unicode(username)
-        ip_address = validate_ip(data.pop('ip_address', None), False)
+
+        try:
+            ip_address = validate_ip(data.pop('ip_address', None), False)
+        except ValueError:
+            raise InterfaceValidationError("Invalid value for 'ip_address'")
 
         # TODO(dcramer): patch in fix to deal w/ old data but not allow new
         # if not (ident or email or username or ip_address):
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index 306f35c919..75cced5f4a 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -6,6 +6,7 @@ import mock
 
 from exam import fixture
 
+from sentry.interfaces.base import InterfaceValidationError
 from sentry.interfaces.stacktrace import (
     Frame, Stacktrace, get_context, slim_frame_data
 )
@@ -42,7 +43,7 @@ class StacktraceTest(TestCase):
         assert interface == event.interfaces['sentry.interfaces.Stacktrace']
 
     def test_requires_filename(self):
-        with self.assertRaises(AssertionError):
+        with self.assertRaises(InterfaceValidationError):
             Stacktrace.to_python(dict(frames=[{}]))
 
         Stacktrace.to_python(dict(frames=[{
@@ -344,23 +345,23 @@ class StacktraceTest(TestCase):
         self.assertEquals(result, 'Stacktrace (most recent call last):\n\n  File "foo", line 3, in biz\n    def foo(r):\n  File "bar", line 5, in baz\n    return None')
 
     def test_bad_input(self):
-        with self.assertRaises(AssertionError):
+        with self.assertRaises(InterfaceValidationError):
             Frame.to_python({
                 'filename': 1,
             })
 
-        with self.assertRaises(AssertionError):
+        with self.assertRaises(InterfaceValidationError):
             Frame.to_python({
                 'filename': 'foo',
                 'abs_path': 1,
             })
 
-        with self.assertRaises(AssertionError):
+        with self.assertRaises(InterfaceValidationError):
             Frame.to_python({
                 'function': 1,
             })
 
-        with self.assertRaises(AssertionError):
+        with self.assertRaises(InterfaceValidationError):
             Frame.to_python({
                 'module': 1,
             })
