commit a8c8cca9464e0c473bcbff2d86fb7ea39fcb6c8a
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Jan 10 10:59:12 2020 -0800

    feat(alerts): Remove "Related issues" from incidents (#16379)
    
    This removes the UI components that fetch and render related issues on the Incidents details view.

diff --git a/src/sentry/static/sentry/app/views/incidents/details/body.tsx b/src/sentry/static/sentry/app/views/incidents/details/body.tsx
index 055c8b70da..7d5d274c33 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/body.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/body.tsx
@@ -16,7 +16,6 @@ import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 
 import Activity from './activity';
-import RelatedIssues from './relatedIssues';
 import Suspects from './suspects';
 
 import {Incident} from '../types';
@@ -87,8 +86,6 @@ export default class DetailsBody extends React.Component<Props> {
             </div>
 
             <Suspects {...this.props} />
-
-            <RelatedIssues params={params} incident={incident} />
           </PageContent>
         </Sidebar>
       </StyledPageContent>
diff --git a/src/sentry/static/sentry/app/views/incidents/details/relatedIssues/index.tsx b/src/sentry/static/sentry/app/views/incidents/details/relatedIssues/index.tsx
deleted file mode 100644
index 3420394e10..0000000000
--- a/src/sentry/static/sentry/app/views/incidents/details/relatedIssues/index.tsx
+++ /dev/null
@@ -1,85 +0,0 @@
-import {Params} from 'react-router/lib/Router';
-import React from 'react';
-import styled from 'react-emotion';
-
-import {Client} from 'app/api';
-import {Organization} from 'app/types';
-import {Panel, PanelBody, PanelItem} from 'app/components/panels';
-import {t} from 'app/locale';
-import EventOrGroupExtraDetails from 'app/components/eventOrGroupExtraDetails';
-import EventOrGroupHeader from 'app/components/eventOrGroupHeader';
-import Placeholder from 'app/components/placeholder';
-import space from 'app/styles/space';
-import withApi from 'app/utils/withApi';
-import withOrganization from 'app/utils/withOrganization';
-
-import IssuesFetcher from './issuesFetcher';
-import SideHeader from '../sideHeader';
-import {Incident} from '../../types';
-
-type Props = {
-  api: Client;
-  className?: string;
-  incident?: Incident;
-  params: Params;
-  organization: Organization;
-};
-
-class RelatedIssues extends React.Component<Props> {
-  render() {
-    const {className, api, params, incident} = this.props;
-
-    return (
-      <div className={className}>
-        <IssuesFetcher api={api} issueIds={incident && incident.groups}>
-          {({issues, loading}) => {
-            // If loading is finished, and there are no issues, do not display anything
-            if (!loading && issues && issues.length === 0) {
-              return null;
-            }
-
-            return (
-              <React.Fragment>
-                <SideHeader loading={loading}>
-                  {t('Related Issues')} ({loading || !issues ? '-' : issues.length})
-                </SideHeader>
-                {loading ? (
-                  <Placeholder height="60px" bottomGutter={1} />
-                ) : (
-                  issues &&
-                  issues.length > 0 && (
-                    <Panel>
-                      <PanelBody>
-                        {issues.map(issue => (
-                          <RelatedItem p={1} key={issue.id}>
-                            <EventOrGroupHeader
-                              params={params}
-                              size="small"
-                              hideLevel
-                              data={issue}
-                            />
-                            <EventOrGroupExtraDetails params={params} {...issue} />
-                          </RelatedItem>
-                        ))}
-                      </PanelBody>
-                    </Panel>
-                  )
-                )}
-              </React.Fragment>
-            );
-          }}
-        </IssuesFetcher>
-      </div>
-    );
-  }
-}
-
-const StyledRelatedIssues = styled(RelatedIssues)`
-  margin-top: ${space(1)};
-`;
-
-export default withOrganization(withApi(StyledRelatedIssues));
-
-const RelatedItem = styled(PanelItem)`
-  flex-direction: column;
-`;
diff --git a/src/sentry/static/sentry/app/views/incidents/details/relatedIssues/issuesFetcher.tsx b/src/sentry/static/sentry/app/views/incidents/details/relatedIssues/issuesFetcher.tsx
deleted file mode 100644
index 5e3c67db47..0000000000
--- a/src/sentry/static/sentry/app/views/incidents/details/relatedIssues/issuesFetcher.tsx
+++ /dev/null
@@ -1,67 +0,0 @@
-import {Client} from 'app/api';
-import {Group} from 'app/types';
-import React from 'react';
-
-type State = {
-  loading: boolean;
-  issues: null | Group[];
-  error: null | Error;
-};
-
-type Props = {
-  api: Client;
-  // If issueIds is not defined, then we are in loading state
-  issueIds?: string[];
-  children: (renderProps: State) => React.ReactNode;
-};
-
-class IssuesFetcher extends React.PureComponent<Props, State> {
-  state: State = {
-    loading: true,
-    issues: null,
-    error: null,
-  };
-
-  componentDidMount() {
-    this.fetchData();
-  }
-
-  componentDidUpdate(prevProps: Props) {
-    if (prevProps.issueIds !== this.props.issueIds) {
-      this.fetchData();
-    }
-  }
-
-  fetchData = async () => {
-    const {api, issueIds} = this.props;
-
-    this.setState({loading: true});
-
-    if (!issueIds) {
-      return;
-    }
-
-    try {
-      const issues = await Promise.all(
-        issueIds.map(issueId => findIssueById(api, issueId))
-      );
-      this.setState({
-        loading: false,
-        issues,
-      });
-    } catch (error) {
-      console.error(error); // eslint-disable-line no-console
-      this.setState({loading: false, error});
-    }
-  };
-
-  render() {
-    return this.props.children(this.state);
-  }
-}
-
-function findIssueById(api: Client, issueId: string) {
-  return api.requestPromise(`/issues/${issueId}/`);
-}
-
-export default IssuesFetcher;
diff --git a/tests/js/spec/views/incidents/details/index.spec.jsx b/tests/js/spec/views/incidents/details/index.spec.jsx
index 55208ec580..60aa608ff7 100644
--- a/tests/js/spec/views/incidents/details/index.spec.jsx
+++ b/tests/js/spec/views/incidents/details/index.spec.jsx
@@ -174,70 +174,4 @@ describe('IncidentDetails', function() {
     wrapper.find('SubscribeButton').simulate('click');
     expect(subscribe).toHaveBeenCalled();
   });
-
-  it('loads related incidents', async function() {
-    MockApiClient.addMockResponse({
-      url: '/issues/1/',
-      body: TestStubs.Group({
-        id: '1',
-        organization,
-      }),
-    });
-    MockApiClient.addMockResponse({
-      url: '/issues/2/',
-      body: TestStubs.Group({
-        id: '2',
-        organization,
-      }),
-    });
-    MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/incidents/123/',
-      body: {
-        ...mockIncident,
-
-        groups: ['1', '2'],
-      },
-    });
-
-    const wrapper = createWrapper();
-
-    await tick();
-    wrapper.update();
-
-    expect(wrapper.find('RelatedItem')).toHaveLength(2);
-
-    expect(
-      wrapper
-        .find('RelatedItem Title')
-        .at(0)
-        .text()
-    ).toBe('RequestErrorfetchData(app/components/group/suggestedOwners)');
-
-    expect(
-      wrapper
-        .find('RelatedItem GroupShortId')
-        .at(0)
-        .text()
-    ).toBe('JAVASCRIPT-6QS');
-  });
-
-  it('renders incident without issues', async function() {
-    MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/incidents/123/',
-      body: {
-        ...mockIncident,
-        groups: [],
-      },
-    });
-
-    const wrapper = createWrapper();
-
-    expect(wrapper.find('RelatedIssues Placeholder')).toHaveLength(1);
-
-    await tick();
-    wrapper.update();
-
-    expect(wrapper.find('RelatedItem')).toHaveLength(0);
-    expect(wrapper.find('RelatedIssues Placeholder')).toHaveLength(0);
-  });
 });
