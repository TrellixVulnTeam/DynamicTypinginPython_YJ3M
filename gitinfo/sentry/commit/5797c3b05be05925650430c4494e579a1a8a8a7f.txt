commit 5797c3b05be05925650430c4494e579a1a8a8a7f
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Fri Aug 30 11:27:22 2019 +0200

    ref(relay): Move datascrubbing settings to own namespace in projectconfig (#14491)
    
    * ref(relay): Move datascrubbing settings to own namespace in projectconfig
    
    * fix(store): Read correct fields from projectconfig

diff --git a/src/sentry/relay/config.py b/src/sentry/relay/config.py
index 09d8dfe92e..9e1fbb7021 100644
--- a/src/sentry/relay/config.py
+++ b/src/sentry/relay/config.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-import re
 import six
 import uuid
 import sentry.utils as utils
@@ -75,7 +74,8 @@ def get_project_config(project_id, full_config=True, for_store=False):
         "config": {
             "allowedDomains": project.get_option("sentry:origins", ["*"]),
             "trustedRelays": org_options.get("sentry:trusted-relays", []),
-            "piiConfig": _get_pii_config(project, org_options),
+            "piiConfig": _get_pii_config(project),
+            "datascrubbingSettings": _get_datascrubbing_settings(project, org_options),
         },
         "project_id": project.id,
     }
@@ -135,33 +135,9 @@ def get_project_config(project_id, full_config=True, for_store=False):
 
     project_cfg["scrub_ip_addresses"] = scrub_ip_address
 
-    scrub_data = org_options.get("sentry:require_scrub_data", False) or project.get_option(
-        "sentry:scrub_data", True
-    )
-
-    project_cfg["scrub_data"] = scrub_data
     project_cfg["grouping_config"] = get_grouping_config_dict_for_project(project)
     project_cfg["allowed_domains"] = list(get_origins(project))
 
-    if scrub_data:
-        # We filter data immediately before it ever gets into the queue
-        sensitive_fields_key = "sentry:sensitive_fields"
-        sensitive_fields = org_options.get(sensitive_fields_key, []) + project.get_option(
-            sensitive_fields_key, []
-        )
-        project_cfg["sensitive_fields"] = sensitive_fields
-
-        exclude_fields_key = "sentry:safe_fields"
-        exclude_fields = org_options.get(exclude_fields_key, []) + project.get_option(
-            exclude_fields_key, []
-        )
-        project_cfg["exclude_fields"] = exclude_fields
-
-        scrub_defaults = org_options.get(
-            "sentry:require_scrub_defaults", False
-        ) or project.get_option("sentry:scrub_defaults", True)
-        project_cfg["scrub_defaults"] = scrub_defaults
-
     return ProjectConfig(project, **cfg)
 
 
@@ -287,58 +263,41 @@ class ProjectConfig(_ConfigBase):
         super(ProjectConfig, self).__init__(**kwargs)
 
 
-def _generate_pii_config(project, org_options):
-    scrub_ip_address = org_options.get(
-        "sentry:require_scrub_ip_address", False
-    ) or project.get_option("sentry:scrub_ip_address", False)
-    scrub_data = org_options.get("sentry:require_scrub_data", False) or project.get_option(
-        "sentry:scrub_data", True
-    )
-    fields = project.get_option("sentry:sensitive_fields")
+def _get_pii_config(project):
+    value = project.get_option("sentry:relay_pii_config")
+    if value is not None:
+        try:
+            return utils.json.loads(value)
+        except (TypeError, ValueError):
+            return None
 
-    if not scrub_data and not scrub_ip_address:
-        return None
 
-    custom_rules = {}
+def _get_datascrubbing_settings(project, org_options):
+    rv = {}
 
-    default_rules = []
-    ip_rules = []
-    databag_rules = []
+    exclude_fields_key = "sentry:safe_fields"
+    rv["excludeFields"] = org_options.get(exclude_fields_key, []) + project.get_option(
+        exclude_fields_key, []
+    )
 
-    if scrub_data:
-        default_rules.extend(("@email", "@mac", "@creditcard", "@userpath"))
-        databag_rules.append("@password")
-        if fields:
-            custom_rules["strip-fields"] = {
-                "type": "redactPair",
-                "redaction": "remove",
-                "keyPattern": r"\b%s\n" % "|".join(re.escape(x) for x in fields),
-            }
-            databag_rules.append("strip-fields")
+    rv["scrubData"] = org_options.get("sentry:require_scrub_data", False) or project.get_option(
+        "sentry:scrub_data", True
+    )
 
-    if scrub_ip_address:
-        ip_rules.append("@ip")
+    rv["scrubIpAddresses"] = org_options.get(
+        "sentry:require_scrub_ip_address", False
+    ) or project.get_option("sentry:scrub_ip_address", False)
 
-    return {
-        "rules": custom_rules,
-        "applications": {
-            "freeform": default_rules,
-            "databag": default_rules + databag_rules,
-            "username": scrub_data and ["@userpath"] or [],
-            "email": scrub_data and ["@email"] or [],
-            "ip": ip_rules,
-        },
-    }
+    sensitive_fields_key = "sentry:sensitive_fields"
+    rv["sensitiveFields"] = org_options.get(sensitive_fields_key, []) + project.get_option(
+        sensitive_fields_key, []
+    )
 
+    rv["scrubDefaults"] = org_options.get(
+        "sentry:require_scrub_defaults", False
+    ) or project.get_option("sentry:scrub_defaults", True)
 
-def _get_pii_config(project, org_options):
-    value = project.get_option("sentry:relay_pii_config")
-    if value is not None:
-        try:
-            return utils.json.loads(value)
-        except (TypeError, ValueError):
-            return None
-    return _generate_pii_config(project, org_options)
+    return rv
 
 
 def _to_camel_case_name(name):
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 9dc8086f17..b017dc6b79 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -256,17 +256,19 @@ def process_event(event_manager, project, key, remote_addr, helper, attachments,
         raise APIForbidden("An event with the same ID already exists (%s)" % (event_id,))
 
     config = project_config.config
-    scrub_ip_address = config.get("scrub_ip_addresses")
+    datascrubbing_settings = config.get("datascrubbingSettings") or {}
 
-    scrub_data = config.get("scrub_data")
+    scrub_ip_address = datascrubbing_settings.get("scrubIpAddresses")
+
+    scrub_data = datascrubbing_settings.get("scrubData")
 
     if scrub_data:
         # We filter data immediately before it ever gets into the queue
-        sensitive_fields = config.get("sensitive_fields")
+        sensitive_fields = datascrubbing_settings.get("sensitiveFields")
 
-        exclude_fields = config.get("exclude_fields")
+        exclude_fields = datascrubbing_settings.get("excludeFields")
 
-        scrub_defaults = config.get("scrub_defaults")
+        scrub_defaults = datascrubbing_settings.get("scrubDefaults")
 
         SensitiveDataFilter(
             fields=sensitive_fields, include_defaults=scrub_defaults, exclude_fields=exclude_fields
diff --git a/tests/sentry/api/endpoints/test_relay_projectconfigs.py b/tests/sentry/api/endpoints/test_relay_projectconfigs.py
index d0ff2ec185..0c52bf1b01 100644
--- a/tests/sentry/api/endpoints/test_relay_projectconfigs.py
+++ b/tests/sentry/api/endpoints/test_relay_projectconfigs.py
@@ -95,12 +95,12 @@ class RelayQueryGetProjectConfigTest(APITestCase):
         assert safe.get_path(cfg, "config", "filterSettings") is not None
         assert safe.get_path(cfg, "config", "groupingConfig", "enhancements") is not None
         assert safe.get_path(cfg, "config", "groupingConfig", "id") is not None
-        assert safe.get_path(cfg, "config", "piiConfig", "applications") is not None
-        assert safe.get_path(cfg, "config", "piiConfig", "rules") is not None
-        assert safe.get_path(cfg, "config", "scrubData") is True
-        assert safe.get_path(cfg, "config", "scrubDefaults") is True
-        assert safe.get_path(cfg, "config", "scrubIpAddresses") is True
-        assert safe.get_path(cfg, "config", "sensitiveFields") == []
+        assert safe.get_path(cfg, "config", "piiConfig", "applications") is None
+        assert safe.get_path(cfg, "config", "piiConfig", "rules") is None
+        assert safe.get_path(cfg, "config", "datascrubbingSettings", "scrubData") is True
+        assert safe.get_path(cfg, "config", "datascrubbingSettings", "scrubDefaults") is True
+        assert safe.get_path(cfg, "config", "datascrubbingSettings", "scrubIpAddresses") is True
+        assert safe.get_path(cfg, "config", "datascrubbingSettings", "sensitiveFields") == []
 
     def test_trusted_external_relays_should_not_be_able_to_request_full_configs(self):
         self._setup_relay(False, True)
@@ -154,12 +154,10 @@ class RelayQueryGetProjectConfigTest(APITestCase):
         assert safe.get_path(cfg, "config", "trustedRelays") == [self.relay.public_key]
         assert safe.get_path(cfg, "config", "filterSettings") is None
         assert safe.get_path(cfg, "config", "groupingConfig") is None
-        assert safe.get_path(cfg, "config", "piiConfig", "applications") is not None
-        assert safe.get_path(cfg, "config", "piiConfig", "rules") is not None
-        assert safe.get_path(cfg, "config", "scrubData") is None
-        assert safe.get_path(cfg, "config", "scrubDefaults") is None
-        assert safe.get_path(cfg, "config", "scrubIpAddresses") is None
-        assert safe.get_path(cfg, "config", "sensitiveFields") is None
+        assert safe.get_path(cfg, "config", "datascrubbingSettings", "scrubData") is not None
+        assert safe.get_path(cfg, "config", "datascrubbingSettings", "scrubIpAddresses") is not None
+        assert safe.get_path(cfg, "config", "piiConfig", "rules") is None
+        assert safe.get_path(cfg, "config", "piiConfig", "applications") is None
 
     def test_untrusted_external_relays_should_not_receive_configs(self):
         self._setup_relay(False, False)
