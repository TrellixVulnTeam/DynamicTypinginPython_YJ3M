commit 424da4d173738d388e0563f0c1a7be08d7fb691d
Author: Mark Story <mark@sentry.io>
Date:   Wed May 27 15:53:10 2020 -0400

    ref(ts) Convert TeamStore to typescript (#19042)
    
    Convert to typescript and fix a null case caught by typescript.
    
    Fix in-place mutation and use an early return to avoid an else.

diff --git a/src/sentry/static/sentry/app/components/idBadge/teamBadge.tsx b/src/sentry/static/sentry/app/components/idBadge/teamBadge.tsx
index 56a24cbfb6..0525725606 100644
--- a/src/sentry/static/sentry/app/components/idBadge/teamBadge.tsx
+++ b/src/sentry/static/sentry/app/components/idBadge/teamBadge.tsx
@@ -88,7 +88,7 @@ const TeamBadgeContainer = createReactClass<Props, ContainerState>({
     }
 
     const team = TeamStore.getById(this.state.team.id);
-    if (isEqual(team.avatar, this.state.team.avatar)) {
+    if (!team || isEqual(team.avatar, this.state.team.avatar)) {
       return;
     }
 
diff --git a/src/sentry/static/sentry/app/stores/teamStore.jsx b/src/sentry/static/sentry/app/stores/teamStore.jsx
deleted file mode 100644
index 236261740c..0000000000
--- a/src/sentry/static/sentry/app/stores/teamStore.jsx
+++ /dev/null
@@ -1,80 +0,0 @@
-import Reflux from 'reflux';
-
-import TeamActions from 'app/actions/teamActions';
-
-const TeamStore = Reflux.createStore({
-  init() {
-    this.initialized = false;
-    this.reset();
-
-    this.listenTo(TeamActions.createTeamSuccess, this.onCreateSuccess);
-    this.listenTo(TeamActions.fetchDetailsSuccess, this.onUpdateSuccess);
-    this.listenTo(TeamActions.loadTeams, this.loadInitialData);
-    this.listenTo(TeamActions.removeTeamSuccess, this.onRemoveSuccess);
-    this.listenTo(TeamActions.updateSuccess, this.onUpdateSuccess);
-  },
-
-  reset() {
-    this.items = [];
-  },
-
-  loadInitialData(items) {
-    this.initialized = true;
-    this.items = items;
-    this.trigger(new Set(items.map(item => item.id)));
-  },
-
-  onUpdateSuccess(itemId, response) {
-    if (!response) {
-      return;
-    }
-
-    const item = this.getBySlug(itemId);
-
-    if (!item) {
-      this.items.push(response);
-    } else {
-      // Slug was changed
-      // Note: This is the proper way to handle slug changes but unfortunately not all of our
-      // components use stores correctly. To be safe reload browser :((
-      if (response.slug !== itemId) {
-        // Remove old team
-        this.items = this.items.filter(({slug}) => slug !== itemId);
-        // Add team w/ updated slug
-        this.items.push(response);
-        this.trigger(new Set([response.slug]));
-        return;
-      }
-
-      $.extend(true /*deep*/, item, response);
-    }
-
-    this.trigger(new Set([itemId]));
-  },
-
-  onRemoveSuccess(slug) {
-    this.loadInitialData(this.items.filter(team => team.slug !== slug));
-  },
-
-  onCreateSuccess(team) {
-    this.loadInitialData([...this.items, team]);
-  },
-
-  getById(id) {
-    return this.items.find(item => item.id.toString() === id.toString()) || null;
-  },
-
-  getBySlug(slug) {
-    return this.items.find(item => item.slug === slug) || null;
-  },
-
-  getActive() {
-    return this.items.filter(item => item.isMember);
-  },
-
-  getAll() {
-    return this.items;
-  },
-});
-
-export default TeamStore;
diff --git a/src/sentry/static/sentry/app/stores/teamStore.tsx b/src/sentry/static/sentry/app/stores/teamStore.tsx
new file mode 100644
index 0000000000..a20572f90b
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/teamStore.tsx
@@ -0,0 +1,105 @@
+import Reflux from 'reflux';
+
+import {Team} from 'app/types';
+import TeamActions from 'app/actions/teamActions';
+
+type TeamStoreInterface = {
+  initialized: boolean;
+  state: Team[];
+  reset: () => void;
+  loadInitialData: (items: Team[]) => void;
+  onUpdateSuccess: (itemId: string, response: Team) => void;
+  onRemoveSuccess: (slug: string) => void;
+  onCreateSuccess: (team: Team) => void;
+  getById: (id: string) => Team | null;
+  getBySlug: (slug: string) => Team | null;
+  getActive: () => Team[];
+  getAll: () => Team[];
+};
+
+const teamStoreConfig: Reflux.StoreDefinition & TeamStoreInterface = {
+  initialized: false,
+  state: [],
+
+  init() {
+    this.state = [];
+
+    this.listenTo(TeamActions.createTeamSuccess, this.onCreateSuccess);
+    this.listenTo(TeamActions.fetchDetailsSuccess, this.onUpdateSuccess);
+    this.listenTo(TeamActions.loadTeams, this.loadInitialData);
+    this.listenTo(TeamActions.removeTeamSuccess, this.onRemoveSuccess);
+    this.listenTo(TeamActions.updateSuccess, this.onUpdateSuccess);
+  },
+
+  reset() {
+    this.state = [];
+  },
+
+  loadInitialData(items) {
+    this.initialized = true;
+    this.state = items;
+    this.trigger(new Set(items.map(item => item.id)));
+  },
+
+  onUpdateSuccess(itemId, response) {
+    if (!response) {
+      return;
+    }
+
+    const item = this.getBySlug(itemId);
+
+    if (!item) {
+      this.state.push(response);
+      this.trigger(new Set([itemId]));
+      return;
+    }
+
+    // Slug was changed
+    // Note: This is the proper way to handle slug changes but unfortunately not all of our
+    // components use stores correctly. To be safe reload browser :((
+    if (response.slug !== itemId) {
+      // Remove old team
+      this.state = this.state.filter(({slug}) => slug !== itemId);
+
+      // Add team w/ updated slug
+      this.state.push(response);
+      this.trigger(new Set([response.slug]));
+      return;
+    }
+
+    const nextState = [...this.state];
+    const index = nextState.findIndex(team => team.slug === response.slug);
+    nextState[index] = response;
+    this.state = nextState;
+
+    this.trigger(new Set([itemId]));
+  },
+
+  onRemoveSuccess(slug: string) {
+    this.loadInitialData(this.state.filter(team => team.slug !== slug));
+  },
+
+  onCreateSuccess(team: Team) {
+    this.loadInitialData([...this.state, team]);
+  },
+
+  getById(id: string) {
+    return this.state.find(item => item.id.toString() === id.toString()) || null;
+  },
+
+  getBySlug(slug: string) {
+    return this.state.find(item => item.slug === slug) || null;
+  },
+
+  getActive() {
+    return this.state.filter(item => item.isMember);
+  },
+
+  getAll() {
+    return this.state;
+  },
+};
+
+type TeamStore = Reflux.Store & TeamStoreInterface;
+
+export default Reflux.createStore(teamStoreConfig) as TeamStore;
diff --git a/tests/js/spec/views/teamSettings.spec.jsx b/tests/js/spec/views/teamSettings.spec.jsx
index 08c7b5ec56..28b8bb3cca 100644
--- a/tests/js/spec/views/teamSettings.spec.jsx
+++ b/tests/js/spec/views/teamSettings.spec.jsx
@@ -120,7 +120,7 @@ describe('TeamSettings', function() {
     await tick();
     expect(routerPushMock).toHaveBeenCalledWith('/settings/org/teams/');
 
-    expect(TeamStore.items).toEqual([]);
+    expect(TeamStore.getAll()).toEqual([]);
 
     TeamStore.trigger.mockRestore();
   });
