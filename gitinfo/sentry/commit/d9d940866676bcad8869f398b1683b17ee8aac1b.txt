commit d9d940866676bcad8869f398b1683b17ee8aac1b
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Dec 19 16:15:18 2018 -0800

    fix(events-stream): Fix changing date after zoom (#11109)
    
    This allows Org Events to pass to GlobalSelectionHeader a list of url
    parameters to strip when calling actions

diff --git a/src/sentry/static/sentry/app/actionCreators/globalSelection.jsx b/src/sentry/static/sentry/app/actionCreators/globalSelection.jsx
index d419e27fde..8de57d11b1 100644
--- a/src/sentry/static/sentry/app/actionCreators/globalSelection.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/globalSelection.jsx
@@ -1,5 +1,5 @@
 /*eslint no-use-before-define: ["error", { "functions": false }]*/
-import {isEqual, isInteger} from 'lodash';
+import {isEqual, isInteger, omit} from 'lodash';
 import * as Sentry from '@sentry/browser';
 
 import {getParams} from 'app/views/organizationEvents/utils/getParams';
@@ -29,8 +29,10 @@ const isEqualWithEmptyArrays = (newQuery, current) => {
  *
  * @param {Number[]} projects List of project ids
  * @param {Object} [router] Router object
+ * @param {Object} [options] Options object
+ * @param {String[]} [options.resetParams] List of parameters to remove when changing URL params
  */
-export function updateProjects(projects, router) {
+export function updateProjects(projects, router, options) {
   if (!isProjectsValid(projects)) {
     Sentry.withScope(scope => {
       scope.setExtra('projects', projects);
@@ -42,7 +44,7 @@ export function updateProjects(projects, router) {
   if (!router) {
     GlobalSelectionActions.updateProjects(projects);
   }
-  updateParams({project: projects}, router);
+  updateParams({project: projects}, router, options);
 }
 
 function isProjectsValid(projects) {
@@ -55,12 +57,14 @@ function isProjectsValid(projects) {
  *
  * @param {Object} datetime Object with start, end, range keys
  * @param {Object} [router] Router object
+ * @param {Object} [options] Options object
+ * @param {String[]} [options.resetParams] List of parameters to remove when changing URL params
  */
-export function updateDateTime(datetime, router) {
+export function updateDateTime(datetime, router, options) {
   if (!router) {
     GlobalSelectionActions.updateDateTime(datetime);
   }
-  updateParams(datetime, router);
+  updateParams(datetime, router, options);
 }
 
 /**
@@ -69,12 +73,14 @@ export function updateDateTime(datetime, router) {
  *
  * @param {String[]} environments List of environments
  * @param {Object} [router] Router object
+ * @param {Object} [options] Options object
+ * @param {String[]} [options.resetParams] List of parameters to remove when changing URL params
  */
-export function updateEnvironments(environment, router) {
+export function updateEnvironments(environment, router, options) {
   if (!router) {
     GlobalSelectionActions.updateEnvironments(environment);
   }
-  updateParams({environment}, router);
+  updateParams({environment}, router, options);
 }
 
 /**
@@ -82,14 +88,16 @@ export function updateEnvironments(environment, router) {
  *
  * @param {Object} obj New query params
  * @param {Object} [router] React router object
+ * @param {Object} [options] Options object
+ * @param {String[]} [options.resetParams] List of parameters to remove when changing URL params
  */
-export function updateParams(obj, router) {
+export function updateParams(obj, router, options) {
   // Allow another component to handle routing
   if (!router) {
     return;
   }
 
-  const newQuery = getNewQueryParams(obj, router.location.query);
+  const newQuery = getNewQueryParams(obj, router.location.query, options);
 
   // Only push new location if query params has changed because this will cause a heavy re-render
   if (isEqualWithEmptyArrays(newQuery, router.location.query)) {
@@ -106,18 +114,20 @@ export function updateParams(obj, router) {
  * Creates a new query parameter object given new params and old params
  * Preserves the old query params, except for `cursor`
  *
- * TODO(billy): Add option for other keys to reset
- *
  * @param {Object} obj New query params
  * @param {Object} oldQueryParams Old query params
+ * @param {Object} [options] Options object
+ * @param {String[]} [options.resetParams] List of parameters to remove when changing URL params
  */
-function getNewQueryParams(obj, oldQueryParams) {
+function getNewQueryParams(obj, oldQueryParams, {resetParams} = {}) {
   // Reset cursor when changing parameters
   // eslint-disable-next-line no-unused-vars
   const {cursor, statsPeriod, ...oldQuery} = oldQueryParams;
+  const oldQueryWithoutResetParams =
+    (resetParams && !!resetParams.length && omit(oldQuery, resetParams)) || oldQuery;
 
   const newQuery = getParams({
-    ...oldQuery,
+    ...oldQueryWithoutResetParams,
     period: !obj.start && !obj.end ? obj.period || statsPeriod : null,
     ...obj,
   });
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.jsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.jsx
index 83fd7d3ec3..7b03f78a86 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.jsx
@@ -47,6 +47,10 @@ class GlobalSelectionHeader extends React.Component {
     // Disable automatic routing
     hasCustomRouting: PropTypes.bool,
 
+    // Reset these URL params when we fire actions
+    // (custom routing only)
+    resetParamsOnChange: PropTypes.arrayOf(PropTypes.string),
+
     // Props passed to child components //
     /**
      * Show absolute date selectors
@@ -69,6 +73,7 @@ class GlobalSelectionHeader extends React.Component {
   static defaultProps = {
     hasCustomRouting: false,
     showEnvironmentSelector: true,
+    resetParamsOnChange: [],
   };
 
   // Parses URL query parameters for values relevant to global selection header
@@ -221,6 +226,14 @@ class GlobalSelectionHeader extends React.Component {
   // Returns `router` from props if `hasCustomRouting` property is false
   getRouter = () => (!this.props.hasCustomRouting ? this.props.router : null);
 
+  // Returns an options object for `update*` actions
+  getUpdateOptions = () =>
+    !this.props.hasCustomRouting
+      ? {
+          resetParams: this.props.resetParamsOnChange,
+        }
+      : {};
+
   handleChangeProjects = projects => {
     this.setState({
       projects,
@@ -245,20 +258,20 @@ class GlobalSelectionHeader extends React.Component {
       utc,
     };
 
-    updateDateTime(newValueObj, this.getRouter());
+    updateDateTime(newValueObj, this.getRouter(), this.getUpdateOptions());
     callIfFunction(this.props.onUpdateTime, newValueObj);
   };
 
   handleUpdateEnvironmments = () => {
     const {environments} = this.state;
-    updateEnvironments(environments, this.getRouter());
+    updateEnvironments(environments, this.getRouter(), this.getUpdateOptions());
     this.setState({environments: null});
     callIfFunction(this.props.onUpdateEnvironments, environments);
   };
 
   handleUpdateProjects = () => {
     const {projects} = this.state;
-    updateProjects(projects, this.getRouter());
+    updateProjects(projects, this.getRouter(), this.getUpdateOptions());
     this.setState({projects: null});
     callIfFunction(this.props.onUpdateProjects, projects);
   };
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
index 6bd9822054..2c66a3c02b 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
@@ -61,9 +61,9 @@ class OrganizationEventsContainer extends React.Component {
             <GlobalSelectionHeader
               organization={organization}
               projects={projects}
-              initializeWithUrlParams={true}
               showAbsolute={true}
               showRelative={true}
+              resetParamsOnChange={['zoom', 'cursor']}
             />
 
             <Body>
