commit 5b527a283053f50964c6d24c2412f2e32f7935c8
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jul 10 13:53:21 2018 -0700

    feat: Overhaul localization for user feedback
    
    - Remove unused tags in user feedback localization (discards existing translations)
    - Support ?lang=[code] via locale middleware to force language on a single page load
    - Correct debug page for embed QA
    - Support customization of most strings

diff --git a/src/sentry/middleware/locale.py b/src/sentry/middleware/locale.py
index 4182c12529..e047749790 100644
--- a/src/sentry/middleware/locale.py
+++ b/src/sentry/middleware/locale.py
@@ -12,6 +12,7 @@ import pytz
 
 from django.conf import settings
 from django.middleware.locale import LocaleMiddleware
+from django.utils.translation import _trans
 
 from sentry.models import UserOption
 from sentry.utils.safe import safe_execute
@@ -29,7 +30,18 @@ class SentryLocaleMiddleware(LocaleMiddleware):
 
         safe_execute(self.load_user_conf, request, _with_transaction=False)
 
-        super(SentryLocaleMiddleware, self).process_request(request)
+        lang_code = request.GET.get('lang')
+        # user is explicitly forcing language
+        if lang_code:
+            try:
+                language = _trans.get_supported_language_variant(lang_code)
+            except LookupError:
+                super(SentryLocaleMiddleware, self).process_request(request)
+            else:
+                _trans.activate(language)
+                request.LANGUAGE_CODE = _trans.get_language()
+        else:
+            super(SentryLocaleMiddleware, self).process_request(request)
 
     def load_user_conf(self, request):
         if not request.user.is_authenticated():
diff --git a/src/sentry/templates/sentry/debug/error-page-embed.html b/src/sentry/templates/sentry/debug/error-page-embed.html
index 2f48734dca..0f87ef462c 100644
--- a/src/sentry/templates/sentry/debug/error-page-embed.html
+++ b/src/sentry/templates/sentry/debug/error-page-embed.html
@@ -1,12 +1,6 @@
+{% load sentry_helpers %}
 <html>
 <body>
   <h2>Error Embed Debug</h2>
-
-  <script>
-  window.sentryConfig = {
-    eventId: 'abcdfg',
-    dsn: '{{ dsn }}'
-  };
-  </script>
-  <script src="{% url 'sentry-error-page-embed' %}"></script>
+  <script src="{% url 'sentry-error-page-embed' %}?dsn={{ dsn|urlquote }}&amp;eventId={{ event_id|urlquote }}&amp;{{ options }}"></script>
 </script>
diff --git a/src/sentry/templates/sentry/error-page-embed.html b/src/sentry/templates/sentry/error-page-embed.html
index 5448b68345..3cf8c036d7 100644
--- a/src/sentry/templates/sentry/error-page-embed.html
+++ b/src/sentry/templates/sentry/error-page-embed.html
@@ -255,28 +255,28 @@
 
 <div class="sentry-error-embed clearfix">
   <header>
-    <h2>{% blocktrans %}It looks like we're having <span>some internal</span> issues.{% endblocktrans %}</h2>
-    <p><span>{% trans "Our team has been notified." %}</span> {% trans "If you'd like to help, tell us what happened below." %}</p>
+    <h2>{{ title }}</h2>
+    <p>{{ subtitle }} <span>{{ subtitle2 }}</span></p>
   </header>
   <form>
     <div class="error-wrapper"></div>
     <div class="form-content">
       <div class="form-field clearfix">
-        <label>{% trans "Name" %}</label>
+        <label>{{ name_label }}</label>
         {{ form.name }}
       </div>
       <div class="form-field clearfix">
-        <label>{% trans "Email" %}</label>
+        <label>{{ email_label }}</label>
         {{ form.email }}
       </div>
       <div class="form-field clearfix">
-        <label>{% trans "What happened?" %}</label>
+        <label>{{ comments_label }}</label>
         {{ form.comments }}
       </div>
     </div>
     <div class="form-submit clearfix">
-      <button type="submit" class="btn">{% trans "Submit Crash Report" %}</button>
-      <a class="close">{% trans "Close" %}</a>
+      <button type="submit" class="btn">{{ submit_label }}</button>
+      <a class="close">{{ close_label }}</a>
       {% if show_branding %}
       <p class="powered-by">
         {% trans "Crash reports powered by <a href=\"https://sentry.io\">Sentry</a>" %}
diff --git a/src/sentry/web/frontend/debug/debug_error_embed.py b/src/sentry/web/frontend/debug/debug_error_embed.py
index 3b9a35bf95..4d701e3376 100644
--- a/src/sentry/web/frontend/debug/debug_error_embed.py
+++ b/src/sentry/web/frontend/debug/debug_error_embed.py
@@ -1,7 +1,10 @@
 from __future__ import absolute_import
 
+import six
+
 from django.conf import settings
 from django.views.generic import View
+from six.moves.urllib.parse import urlencode
 
 from sentry.models import ProjectKey
 from sentry.web.helpers import render_to_response
@@ -16,6 +19,8 @@ class DebugErrorPageEmbedView(View):
     def get(self, request):
         context = {
             'dsn': self._get_project_key().dsn_public,
+            'event_id': '342a3d7f690a49f8bd7c4cf0e61a9ded',
+            'options': urlencode({k: v for k, v in six.iteritems(request.GET)}),
         }
 
         return render_to_response('sentry/debug/error-page-embed.html', context, request)
diff --git a/src/sentry/web/frontend/error_page_embed.py b/src/sentry/web/frontend/error_page_embed.py
index 5e016373e0..a4d1c97045 100644
--- a/src/sentry/web/frontend/error_page_embed.py
+++ b/src/sentry/web/frontend/error_page_embed.py
@@ -23,6 +23,31 @@ GENERIC_ERROR = _('An unknown error occurred while submitting your report. Pleas
 FORM_ERROR = _('Some fields were invalid. Please correct the errors and try again.')
 SENT_MESSAGE = _('Your feedback has been sent. Thank you!')
 
+DEFAULT_TITLE = _('It looks like we\'re having issues.')
+DEFAULT_SUBTITLE = _('Our team has been notified.')
+DEFAULT_SUBTITLE2 = _('If you\'d like to help, tell us what happened below.')
+
+DEFAULT_NAME_LABEL = _('Name')
+DEFAULT_EMAIL_LABEL = _('Email')
+DEFAULT_COMMENTS_LABEL = _('What happened?')
+
+DEFAULT_CLOSE_LABEL = _('Close')
+DEFAULT_SUBMIT_LABEL = _('Submit Crash Report')
+
+DEFAULT_OPTIONS = {
+    'title': DEFAULT_TITLE,
+    'subtitle': DEFAULT_SUBTITLE,
+    'subtitle2': DEFAULT_SUBTITLE2,
+    'labelName': DEFAULT_NAME_LABEL,
+    'labelEmail': DEFAULT_EMAIL_LABEL,
+    'labelComments': DEFAULT_COMMENTS_LABEL,
+    'labelClose': DEFAULT_CLOSE_LABEL,
+    'labelSubmit': DEFAULT_SUBMIT_LABEL,
+    'errorGeneric': GENERIC_ERROR,
+    'errorFormEntry': FORM_ERROR,
+    'successMessage': SENT_MESSAGE,
+}
+
 
 class UserReportForm(forms.ModelForm):
     name = forms.CharField(
@@ -84,14 +109,14 @@ class ErrorPageEmbedView(View):
         try:
             event_id = request.GET['eventId']
         except KeyError:
-            return self._json_response(request, status=400)
+            return self._json_response(request, {'eventId': 'Missing or invalid parameter.'}, status=400)
 
-        if not is_event_id(event_id):
-            return self._json_response(request, status=400)
+        if event_id and not is_event_id(event_id):
+            return self._json_response(request, {'eventId': 'Missing or invalid parameter.'}, status=400)
 
         key = self._get_project_key(request)
         if not key:
-            return self._json_response(request, status=404)
+            return self._json_response(request, {'dsn': 'Missing or invalid parameter.'}, status=404)
 
         origin = self._get_origin(request)
         if not origin:
@@ -103,6 +128,12 @@ class ErrorPageEmbedView(View):
         if request.method == 'OPTIONS':
             return self._json_response(request)
 
+        # customization options
+        options = DEFAULT_OPTIONS.copy()
+        for name in six.iterkeys(options):
+            if name in request.GET:
+                options[name] = six.text_type(request.GET[name])
+
         # TODO(dcramer): since we cant use a csrf cookie we should at the very
         # least sign the request / add some kind of nonce
         initial = {
@@ -171,22 +202,25 @@ class ErrorPageEmbedView(View):
             'sentry/error-page-embed.html', {
                 'form': form,
                 'show_branding': show_branding,
+                'title': options['title'],
+                'subtitle': options['subtitle'],
+                'subtitle2': options['subtitle2'],
+                'name_label': options['labelName'],
+                'email_label': options['labelEmail'],
+                'comments_label': options['labelComments'],
+                'submit_label': options['labelSubmit'],
+                'close_label': options['labelClose'],
             }
         )
 
         context = {
-            'endpoint':
-            mark_safe('*/' + json.dumps(request.build_absolute_uri()) + ';/*'),
-            'template':
-            mark_safe('*/' + json.dumps(template) + ';/*'),
-            'strings':
-            json.dumps_htmlsafe(
-                {
-                    'generic_error': six.text_type(GENERIC_ERROR),
-                    'form_error': six.text_type(FORM_ERROR),
-                    'sent_message': six.text_type(SENT_MESSAGE),
-                }
-            ),
+            'endpoint': mark_safe('*/' + json.dumps(request.build_absolute_uri()) + ';/*'),
+            'template': mark_safe('*/' + json.dumps(template) + ';/*'),
+            'strings': json.dumps_htmlsafe({
+                'generic_error': six.text_type(options['errorGeneric']),
+                'form_error': six.text_type(options['errorFormEntry']),
+                'sent_message': six.text_type(options['successMessage']),
+            }),
         }
 
         return render_to_response(
