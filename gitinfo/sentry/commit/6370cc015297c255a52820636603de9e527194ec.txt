commit 6370cc015297c255a52820636603de9e527194ec
Author: Mark Story <mark@sentry.io>
Date:   Mon May 13 11:39:46 2019 -0400

    chore(django) Upgrade to Django1.8 (#12994)
    
    Updating requirements to pin to django 1.8
    
    Running south before tests is doubling the duration of some build steps.
    While I'm not a fan of running tests without migrations that is how
    django1.6 behaved.
    
    Django 1.8 contains a few breaking changes for management commands:
    
    1. optparse is no longer used. Commands must use the new argparse API.
    2. Commands are registered in an append only fashion. You cannot
       overwrite commands anymore. This requires collectstatic to come after
       sentry in the INSTALLED_APPS list.
    
    Refs SEN-546

diff --git a/.travis.yml b/.travis.yml
index 972341f799..b1dbaac0ee 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -30,8 +30,8 @@ env:
     - PIP_QUIET=1
     - SENTRY_LIGHT_BUILD=1
     - SENTRY_SKIP_BACKEND_VALIDATION=1
-    - SOUTH_TESTS_MIGRATE=1
-    - DJANGO_VERSION=">=1.6.11,<1.7"
+    - SOUTH_TESTS_MIGRATE=0
+    - DJANGO_VERSION=">=1.8,<1.9"
     # node's version is pinned by .nvmrc and is autodetected by `nvm install`.
     - NODE_DIR="${HOME}/.nvm/versions/node/v$(< .nvmrc)"
     - YARN_VERSION="1.13.0"
@@ -130,22 +130,6 @@ matrix:
       name: 'Backend [Postgres] (2/2)'
       env: TEST_SUITE=postgres DB=postgres TOTAL_TEST_GROUPS=2 TEST_GROUP=1
 
-    # django 1.8 compatibility
-    - <<: *postgres_default
-      name: 'Backend [Postgres] (Django 1.8) (1/2)'
-      env: TEST_SUITE=postgres DB=postgres DJANGO_VERSION=">=1.8,<1.9" TOTAL_TEST_GROUPS=2 TEST_GROUP=0
-    - <<: *postgres_default
-      name: 'Backend [Postgres] (Django 1.8) (2/2)'
-      env: TEST_SUITE=postgres DB=postgres DJANGO_VERSION=">=1.8,<1.9" TOTAL_TEST_GROUPS=2 TEST_GROUP=1
-
-    # django 1.8 compatibility with migrations
-    - <<: *postgres_default
-      name: 'Backend [Postgres] (Django 1.8, No migrations) (1/2)'
-      env: TEST_SUITE=postgres DJANGO_VERSION=">=1.8,<1.9" SOUTH_TESTS_MIGRATE=0 TOTAL_TEST_GROUPS=2 TEST_GROUP=0
-    - <<: *postgres_default
-      name: 'Backend [Postgres] (Django 1.8, No migrations) (2/2)'
-      env: TEST_SUITE=postgres DJANGO_VERSION=">=1.8,<1.9" SOUTH_TESTS_MIGRATE=0 TOTAL_TEST_GROUPS=2 TEST_GROUP=1
-
     # XXX(markus): Remove after rust interfaces are done
     - <<: *postgres_default
       name: 'Backend [Postgres] (Rust Interface Renormalization)'
diff --git a/requirements-base.txt b/requirements-base.txt
index 9eb8c87cc2..6213cc912e 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -12,7 +12,7 @@ django-jsonfield>=0.9.13,<0.9.14
 django-picklefield>=0.3.0,<0.4.0
 django-sudo>=2.1.0,<3.0.0
 django-templatetag-sugar>=0.1.0
-Django>=1.6.11,<1.7
+Django>=1.8,<1.9
 djangorestframework>=2.4.8,<2.5.0
 email-reply-parser>=0.2.0,<0.3.0
 enum34>=1.1.6,<1.2.0
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index cb6aa38699..bfa11f26f5 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -261,13 +261,13 @@ TEMPLATE_CONTEXT_PROCESSORS = (
 INSTALLED_APPS = (
     'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes',
     'django.contrib.messages', 'django.contrib.sessions', 'django.contrib.sites',
-    'django.contrib.staticfiles', 'crispy_forms', 'debug_toolbar',
+    'crispy_forms', 'debug_toolbar',
     'rest_framework', 'sentry', 'sentry.analytics', 'sentry.incidents',
     'sentry.analytics.events', 'sentry.nodestore', 'sentry.search', 'sentry.lang.java',
     'sentry.lang.javascript', 'sentry.lang.native', 'sentry.plugins.sentry_interface_types',
     'sentry.plugins.sentry_mail', 'sentry.plugins.sentry_urls', 'sentry.plugins.sentry_useragents',
     'sentry.plugins.sentry_webhooks', 'social_auth', 'sudo', 'sentry.tagstore',
-    'sentry.eventstream', 'sentry.auth.providers.google',
+    'sentry.eventstream', 'sentry.auth.providers.google', 'django.contrib.staticfiles',
 )
 
 import django
diff --git a/src/sentry/management/commands/backfill_eventstream.py b/src/sentry/management/commands/backfill_eventstream.py
index 573bdfe8bb..61b4d50d29 100644
--- a/src/sentry/management/commands/backfill_eventstream.py
+++ b/src/sentry/management/commands/backfill_eventstream.py
@@ -11,7 +11,7 @@ import sys
 
 import six
 
-from django.core.management.base import BaseCommand, CommandError, make_option
+from django.core.management.base import BaseCommand, CommandError
 from django.utils.dateparse import parse_datetime
 
 from sentry.models import Event, Project, Group
@@ -20,18 +20,17 @@ from sentry.models import Event, Project, Group
 class Command(BaseCommand):
     help = 'Backfill events from the database into the event stream.'
 
-    option_list = BaseCommand.option_list + (
-        make_option('--from-ts', dest='from_ts', type='string',
-                    help='Starting event timestamp (ISO 8601). Example: 2018-11-26T23:59:59'),
-        make_option('--to-ts', dest='to_ts', type='string',
-                    help='Last event timestamp (ISO 8601).'),
-        make_option('--from-id', dest='from_id', type=int,
-                    help='Starting event ID (primary key).'),
-        make_option('--to-id', dest='to_id', type=int,
-                    help='Last event ID (primary key).'),
-        make_option('--no-input', action='store_true', dest='no_input',
-                    help='Do not ask questions.')
-    )
+    def add_arguments(self, parser):
+        parser.add_argument('--from-ts', dest='from_ts', type=six.text_type,
+                            help='Starting event timestamp (ISO 8601). Example: 2018-11-26T23:59:59'),
+        parser.add_argument('--to-ts', dest='to_ts', type=six.text_type,
+                            help='Last event timestamp (ISO 8601).'),
+        parser.add_argument('--from-id', dest='from_id', type=int,
+                            help='Starting event ID (primary key).'),
+        parser.add_argument('--to-id', dest='to_id', type=int,
+                            help='Last event ID (primary key).'),
+        parser.add_argument('--no-input', action='store_true', dest='no_input',
+                            help='Do not ask questions.')
 
     def get_events_by_timestamp(self, from_ts, to_ts):
         from_date = parse_datetime(from_ts)
diff --git a/src/sentry/management/commands/check_notifications.py b/src/sentry/management/commands/check_notifications.py
index d9a6db0efe..8329856a04 100644
--- a/src/sentry/management/commands/check_notifications.py
+++ b/src/sentry/management/commands/check_notifications.py
@@ -7,8 +7,6 @@ sentry.management.commands.check_notifications
 """
 from __future__ import absolute_import, print_function
 
-from optparse import make_option
-
 from django.core.management.base import BaseCommand, CommandError
 
 from sentry.models import User
@@ -34,23 +32,23 @@ def handle_project(plugin, project, stream):
 class Command(BaseCommand):
     help = 'Dump addresses that would get an email notification'
 
-    option_list = BaseCommand.option_list + (
-        make_option(
+    def add_arguments(self, parser):
+        parser.add_argument(
             '--organization',
             action='store',
-            type='int',
+            type=int,
             dest='organization',
             default=0,
             help='',
-        ), make_option(
+        )
+        parser.add_argument(
             '--project',
             action='store',
-            type='int',
+            type=int,
             dest='project',
             default=0,
             help='',
-        ),
-    )
+        )
 
     def handle(self, *args, **options):
         if not (options['project'] or options['organization']):
diff --git a/src/sentry/management/commands/create_sample_event.py b/src/sentry/management/commands/create_sample_event.py
index f069baaa44..703e35b073 100644
--- a/src/sentry/management/commands/create_sample_event.py
+++ b/src/sentry/management/commands/create_sample_event.py
@@ -7,16 +7,16 @@ sentry.management.commands.create_sample_event
 """
 from __future__ import absolute_import
 
-from django.core.management.base import BaseCommand, CommandError, make_option
+from django.core.management.base import BaseCommand, CommandError
 
 
 class Command(BaseCommand):
     help = 'Creates a sample event in Sentry (if applicable)'
 
-    option_list = BaseCommand.option_list + (
-        make_option('--project', dest='project', help="project ID or team-slug/project-slug"),
-        make_option('--platform', dest='platform'),
-    )
+    def add_arguments(self, parser):
+        parser.add_argument('--project', dest='project',
+                            help="project ID or team-slug/project-slug"),
+        parser.add_argument('--platform', dest='platform'),
 
     def handle(self, **options):
         from django.conf import settings
diff --git a/src/sentry/management/commands/generate_reset_password_link.py b/src/sentry/management/commands/generate_reset_password_link.py
index 1741dcc735..ec2ae21423 100644
--- a/src/sentry/management/commands/generate_reset_password_link.py
+++ b/src/sentry/management/commands/generate_reset_password_link.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 import sys
 
-from django.core.management.base import BaseCommand, make_option
+from django.core.management.base import BaseCommand
 from django.utils import timezone
 from click import echo
 
@@ -13,15 +13,14 @@ from sentry.utils.auth import find_users
 class Command(BaseCommand):
     help = 'Generate a link for a user to reset their password'
 
-    option_list = BaseCommand.option_list + (
-        make_option(
+    def add_arguments(self, parser):
+        parser.add_argument(
             '--noinput',
             dest='noinput',
             action='store_true',
             default=False,
             help='Dont ask for confirmation before merging accounts.'
-        ),
-    )
+        )
 
     def handle(self, username, **options):
         users = find_users(username, with_valid_password=False)
diff --git a/src/sentry/management/commands/merge_users.py b/src/sentry/management/commands/merge_users.py
index 60a2d3dc9f..6c2dbe4c7d 100644
--- a/src/sentry/management/commands/merge_users.py
+++ b/src/sentry/management/commands/merge_users.py
@@ -4,33 +4,35 @@ import operator
 import sys
 
 from collections import defaultdict
-from django.core.management.base import BaseCommand, CommandError, make_option
+from django.core.management.base import BaseCommand, CommandError
 from django.db.models import Q
-from six.moves import input, reduce
+from six.moves import input
 
 from sentry.models import Organization, OrganizationMember, User
+from functools import reduce
 
 
 class Command(BaseCommand):
     help = 'Attempts to repair any invalid data within Sentry'
 
-    option_list = BaseCommand.option_list + (
-        make_option(
+    def add_arguments(self, parser):
+        parser.add_argument(
             '--organization', help='Find all potential duplicate users within that organization.'
-        ), make_option(
+        )
+        parser.add_argument(
             '--noinput',
             dest='noinput',
             action='store_true',
             default=False,
             help='Dont ask for confirmation before merging accounts.'
-        ), make_option(
+        )
+        parser.add_argument(
             '--no-delete',
             dest='delete',
             action='store_false',
             default=True,
             help='Don\'t remove merged accounts.'
-        ),
-    )
+        )
 
     def _get_organization_user_sets(self, organization):
         queryset = OrganizationMember.objects.filter(
diff --git a/src/sentry/management/commands/send_fake_data.py b/src/sentry/management/commands/send_fake_data.py
index e0a6855aa2..ddf4730023 100644
--- a/src/sentry/management/commands/send_fake_data.py
+++ b/src/sentry/management/commands/send_fake_data.py
@@ -13,7 +13,7 @@ import random
 import six
 import time
 
-from django.core.management.base import BaseCommand, CommandError, make_option
+from django.core.management.base import BaseCommand, CommandError
 
 
 def funcs():
@@ -64,11 +64,11 @@ def funcs():
 class Command(BaseCommand):
     help = 'Sends fake data to the internal Sentry project'
 
-    option_list = BaseCommand.option_list + (
-        make_option(
+    def add_arguments(self, parser):
+        parser.add_argument(
             '--project', dest='project', help="project ID or organization-slug/project-slug"
-        ), make_option('--num', dest='num_events', type=int),
-    )
+        )
+        parser.add_argument('--num', dest='num_events', type=int),
 
     def handle(self, **options):
         from django.conf import settings
