commit 79b72e5298c85fb6391651dad44fbcfe35786753
Author: Jan Michael Auer <account@jauer.org>
Date:   Tue Jan 22 20:21:42 2019 +0100

    ref(interfaces): Stop validating user fields (#11644)
    
    Stop to validate `user.email` and `user.ip_address` by removing the entire user
    interface. Rust only removes the individual fields and no longer validates the
    email at all. If these checks stay in, this will blow up in the UI and plugins.

diff --git a/src/sentry/interfaces/user.py b/src/sentry/interfaces/user.py
index 601aa472fa..640c9d80fb 100644
--- a/src/sentry/interfaces/user.py
+++ b/src/sentry/interfaces/user.py
@@ -11,7 +11,7 @@ __all__ = ('User', )
 
 import six
 
-from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys
+from sentry.interfaces.base import Interface, prune_empty_keys
 from sentry.interfaces.geo import Geo
 from sentry.utils.safe import trim, trim_dict
 from sentry.web.helpers import render_to_string
@@ -19,19 +19,6 @@ from sentry.utils.validators import validate_ip
 from sentry.constants import MAX_EMAIL_FIELD_LENGTH
 
 
-def validate_email(value, required=True):
-    if not required and not value:
-        return
-
-    if not isinstance(value, six.string_types):
-        raise ValueError('object of type %r is not an email address' % type(value).__name__)
-
-    # safe to assume an email address at least has a @ in it.
-    if '@' not in value:
-        raise ValueError('malformed email address')
-    return value
-
-
 class User(Interface):
     """
     An interface which describes the authenticated User for a request.
@@ -61,10 +48,10 @@ class User(Interface):
         if ident is not None:
             ident = trim(six.text_type(ident), 128)
 
-        try:
-            email = trim(validate_email(data.pop('email', None), False), MAX_EMAIL_FIELD_LENGTH)
-        except ValueError:
-            raise InterfaceValidationError("Invalid value for 'email'")
+        email = data.pop('email', None)
+        if not isinstance(email, six.string_types):
+            email = None
+        email = trim(email, MAX_EMAIL_FIELD_LENGTH)
 
         username = data.pop('username', None)
         if username is not None:
@@ -77,7 +64,7 @@ class User(Interface):
         try:
             ip_address = validate_ip(data.pop('ip_address', None), False)
         except ValueError:
-            raise InterfaceValidationError("Invalid value for 'ip_address'")
+            ip_address = None
 
         geo = data.pop('geo', None)
         if not geo and ip_address:
diff --git a/tests/sentry/interfaces/test_user.py b/tests/sentry/interfaces/test_user.py
index bc45f11d08..16e444bba2 100644
--- a/tests/sentry/interfaces/test_user.py
+++ b/tests/sentry/interfaces/test_user.py
@@ -41,21 +41,21 @@ class UserTest(TestCase):
         }
 
     def test_invalid_ip_address(self):
-        with self.assertRaises(Exception):
-            User.to_python(dict(
-                ip_address='abc',
-            ))
+        user = User.to_python(dict(
+            ip_address='abc',
+        ))
+        assert user.ip_address is None
 
     def test_invalid_email_address(self):
-        with self.assertRaises(Exception):
-            User.to_python(dict(
-                email=1,
-            ))
-
-        with self.assertRaises(Exception):
-            User.to_python(dict(
-                email='foo',
-            ))
+        user = User.to_python(dict(
+            email=1,
+        ))
+        assert user.email is None
+
+        user = User.to_python(dict(
+            email='foo',
+        ))
+        assert user.email == 'foo'
 
     def test_id_long_dict(self):
         u = User.to_python({
