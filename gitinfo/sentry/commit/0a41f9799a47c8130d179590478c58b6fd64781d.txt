commit 0a41f9799a47c8130d179590478c58b6fd64781d
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Dec 23 15:53:20 2014 -0800

    Attach note about rule within notifications

diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 178889f562..460b29136b 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -17,6 +17,12 @@ from sentry.plugins import Plugin
 from sentry.models import UserOption, AccessGroup
 
 
+class Notification(object):
+    def __init__(self, event, rule=None):
+        self.event = event
+        self.rule = rule
+
+
 class NotificationConfigurationForm(forms.Form):
     pass
 
@@ -37,18 +43,16 @@ class BaseNotificationUserOptionsForm(forms.Form):
         raise NotImplementedError
 
 
-class Message(object):
-    def __init__(self, short, long):
-        self.short = short
-        self.long = long
-
-
 class NotificationPlugin(Plugin):
     description = _('Notify project members when a new event is seen for the first time, or when an '
                     'already resolved event has changed back to unresolved.')
     # site_conf_form = NotificationConfigurationForm
     project_conf_form = NotificationConfigurationForm
 
+    def notify(self, notification):
+        event = notification.event
+        return self.notify_users(event.group, event)
+
     def notify_users(self, group, event, fail_silently=False):
         raise NotImplementedError
 
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index a0cf8e2433..9a38ecbf55 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -35,8 +35,7 @@ class MailPlugin(NotificationPlugin):
     subject_prefix = settings.EMAIL_SUBJECT_PREFIX
 
     def _send_mail(self, subject, template=None, html_template=None, body=None,
-                   project=None, group=None, headers=None, context=None,
-                   fail_silently=False):
+                   project=None, group=None, headers=None, context=None):
         send_to = self.get_send_to(project)
         if not send_to:
             return
@@ -53,14 +52,13 @@ class MailPlugin(NotificationPlugin):
             reference=group,
         )
         msg.add_users(send_to, project=project)
-        return msg.send(fail_silently=fail_silently)
+        return msg.send()
 
     def send_test_mail(self, project=None):
         self._send_mail(
             subject='Test Email',
             body='This email was requested as a test of Sentry\'s outgoing email',
             project=project,
-            fail_silently=False,
         )
 
     def get_notification_settings_url(self):
@@ -96,7 +94,6 @@ class MailPlugin(NotificationPlugin):
             template=template,
             html_template=html_template,
             project=project,
-            fail_silently=False,
             headers=headers,
             context=context,
         )
@@ -137,7 +134,9 @@ class MailPlugin(NotificationPlugin):
 
         return send_to_list
 
-    def notify_users(self, group, event, fail_silently=False):
+    def notify(self, notification):
+        event = notification.event
+        group = event.group
         project = group.project
 
         interface_list = []
@@ -154,12 +153,21 @@ class MailPlugin(NotificationPlugin):
         template = 'sentry/emails/error.txt'
         html_template = 'sentry/emails/error.html'
 
+        rule = notification.rule
+        if rule:
+            rule_link = reverse('sentry-edit-project-rule', args=[
+                group.organization.slug, project.slug, rule.id
+            ])
+        else:
+            rule_link = None
+
         context = {
             'group': group,
             'event': event,
             'tags': event.get_tags(),
             'link': link,
             'interfaces': interface_list,
+            'rule': rule,
         }
 
         headers = {
@@ -175,7 +183,6 @@ class MailPlugin(NotificationPlugin):
             html_template=html_template,
             project=project,
             group=group,
-            fail_silently=fail_silently,
             headers=headers,
             context=context,
         )
diff --git a/src/sentry/rules/actions/notify_event.py b/src/sentry/rules/actions/notify_event.py
index e0a055d048..2b725d0485 100644
--- a/src/sentry/rules/actions/notify_event.py
+++ b/src/sentry/rules/actions/notify_event.py
@@ -9,6 +9,7 @@ sentry.rules.actions.notify_event
 from __future__ import absolute_import
 
 from sentry.plugins import plugins
+from sentry.plugins.bases.notify import Notification
 from sentry.rules.actions.base import EventAction
 from sentry.utils.safe import safe_execute
 
@@ -29,8 +30,9 @@ class NotifyEventAction(EventAction):
     def after(self, event, state):
         group = event.group
 
+        notification = Notification(event=event, rule=self.rule)
         for plugin in self.get_plugins():
             if not safe_execute(plugin.should_notify, group=group, event=event):
                 continue
 
-            safe_execute(plugin.notify_users, group=group, event=event)
+            safe_execute(plugin.notify, notification)
diff --git a/src/sentry/rules/base.py b/src/sentry/rules/base.py
index 169af66192..2568103795 100644
--- a/src/sentry/rules/base.py
+++ b/src/sentry/rules/base.py
@@ -59,9 +59,10 @@ class RuleBase(object):
 
     __metaclass__ = RuleDescriptor
 
-    def __init__(self, project, data=None):
+    def __init__(self, project, data=None, rule=None):
         self.project = project
         self.data = data or {}
+        self.rule = rule
 
     def get_option(self, key):
         return self.data.get(key)
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index be46988d88..77011aab22 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -23,13 +23,13 @@ from sentry.utils.safe import safe_execute
 rules_logger = logging.getLogger('sentry.errors')
 
 
-def condition_matches(project, condition, event, state):
+def condition_matches(project, condition, event, state, rule):
     condition_cls = rules.get(condition['id'])
     if condition_cls is None:
         rules_logger.error('Unregistered condition %r', condition['id'])
         return
 
-    condition_inst = condition_cls(project, data=condition)
+    condition_inst = condition_cls(project, data=condition, rule=rule)
     return safe_execute(condition_inst.passes, event, state)
 
 
@@ -99,7 +99,7 @@ def post_process_group(event, is_new, is_regression, is_sample, **kwargs):
         )
 
         condition_iter = (
-            condition_matches(project, c, event, state)
+            condition_matches(project, c, event, state, rule)
             for c in condition_list
         )
 
@@ -157,7 +157,7 @@ def execute_rule(rule_id, event, state):
             rules_logger.error('Unregistered action %r', action['id'])
             continue
 
-        action_inst = action_cls(project, data=action)
+        action_inst = action_cls(project, data=action, rule=rule)
         safe_execute(action_inst.after, event=event, state=state)
 
 
diff --git a/src/sentry/templates/sentry/emails/error.html b/src/sentry/templates/sentry/emails/error.html
index 2f7d176756..80e153af4a 100644
--- a/src/sentry/templates/sentry/emails/error.html
+++ b/src/sentry/templates/sentry/emails/error.html
@@ -38,4 +38,8 @@
 		{{ text }}
     </div>
     {% endfor %}
+
+    {% if rule %}
+        <p class="via">Sent due to rule <a href="{% absolute_uri rule_link %}">{{ rule.label }}</a></p>
+    {% endif %}
 {% endblock %}
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 8d22f20caa..c44f7afdb7 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -4,12 +4,14 @@ from __future__ import absolute_import
 
 import mock
 
+from django.core import mail
 from django.utils import timezone
 from exam import fixture
 from mock import Mock
 
 from sentry.interfaces.stacktrace import Stacktrace
-from sentry.models import Alert, Event, Group, AccessGroup
+from sentry.models import AccessGroup, Alert, Event, Group, Rule
+from sentry.plugins.bases.notify import Notification
 from sentry.plugins.sentry_mail.models import MailPlugin
 from sentry.testutils import TestCase
 
@@ -24,30 +26,21 @@ class MailPluginTest(TestCase):
     def test_should_notify_no_sendable_users(self):
         assert not self.plugin.should_notify(group=Mock(), event=Mock())
 
-    @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin._send_mail')
-    def test_notify_users_renders_interfaces(self, _send_mail):
-        group = Group(
-            id=2,
-            first_seen=timezone.now(),
-            last_seen=timezone.now(),
-            project=self.project,
-        )
+    def test_simple_notification(self):
+        group = self.create_group(message='Hello world')
+        event = self.create_event(group=group, message='Hello world')
 
-        stacktrace = Mock(spec=Stacktrace)
-        stacktrace.to_email_html.return_value = 'foo bar'
-        stacktrace.get_title.return_value = 'Stacktrace'
+        rule = Rule.objects.create(project=self.project, label='my rule')
 
-        event = Event()
-        event.group = group
-        event.project = self.project
-        event.message = 'hello world'
-        event.interfaces = {'sentry.interfaces.Stacktrace': stacktrace}
+        notification = Notification(event=event, rule=rule)
 
         with self.settings(SENTRY_URL_PREFIX='http://example.com'):
-            self.plugin.notify_users(group, event)
+            self.plugin.notify(notification)
 
-        stacktrace.get_title.assert_called_once_with()
-        stacktrace.to_email_html.assert_called_once_with(event)
+        msg = mail.outbox[0]
+        assert msg.subject == '[Sentry] [foo Bar] ERROR: Hello world'
+        print dir(msg)
+        assert 'my rule' in msg.alternatives[0][0]
 
     @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin._send_mail')
     def test_notify_users_renders_interfaces_with_utf8(self, _send_mail):
@@ -68,8 +61,10 @@ class MailPluginTest(TestCase):
         event.message = 'hello world'
         event.interfaces = {'sentry.interfaces.Stacktrace': stacktrace}
 
+        notification = Notification(event=event)
+
         with self.settings(SENTRY_URL_PREFIX='http://example.com'):
-            self.plugin.notify_users(group, event)
+            self.plugin.notify(notification)
 
         stacktrace.get_title.assert_called_once_with()
         stacktrace.to_email_html.assert_called_once_with(event)
@@ -93,8 +88,10 @@ class MailPluginTest(TestCase):
         event.message = 'Soubor ji\xc5\xbe existuje'
         event.interfaces = {'sentry.interfaces.Stacktrace': stacktrace}
 
+        notification = Notification(event=event)
+
         with self.settings(SENTRY_URL_PREFIX='http://example.com'):
-            self.plugin.notify_users(group, event)
+            self.plugin.notify(notification)
 
         stacktrace.get_title.assert_called_once_with()
         stacktrace.to_email_html.assert_called_once_with(event)
@@ -117,12 +114,13 @@ class MailPluginTest(TestCase):
             datetime=group.last_seen,
         )
 
+        notification = Notification(event=event)
+
         with self.settings(SENTRY_URL_PREFIX='http://example.com'):
-            self.plugin.notify_users(group, event)
+            self.plugin.notify(notification)
 
         _send_mail.assert_called_once()
         args, kwargs = _send_mail.call_args
-        self.assertEquals(kwargs.get('fail_silently'), False)
         self.assertEquals(kwargs.get('project'), self.project)
         self.assertEquals(kwargs.get('group'), group)
         assert kwargs.get('subject') == u"[{0} {1}] ERROR: hello world".format(
@@ -146,8 +144,10 @@ class MailPluginTest(TestCase):
             datetime=group.last_seen,
         )
 
+        notification = Notification(event=event)
+
         with self.settings(SENTRY_URL_PREFIX='http://example.com'):
-            self.plugin.notify_users(group, event)
+            self.plugin.notify(notification)
 
         _send_mail.assert_called_once()
         args, kwargs = _send_mail.call_args
diff --git a/tests/sentry/rules/actions/test_notify_event.py b/tests/sentry/rules/actions/test_notify_event.py
index 97c33621ba..cdc80de45a 100644
--- a/tests/sentry/rules/actions/test_notify_event.py
+++ b/tests/sentry/rules/actions/test_notify_event.py
@@ -7,11 +7,11 @@ from sentry.rules.actions.notify_event import NotifyEventAction
 class NotifyEventActionTest(RuleTestCase):
     rule_cls = NotifyEventAction
 
-    @patch('sentry.plugins.sentry_mail.models.MailPlugin.notify_users')
+    @patch('sentry.plugins.sentry_mail.models.MailPlugin.notify')
     def test_applies_correctly(self, mail_notify_users):
         event = self.get_event()
 
         rule = self.get_rule()
         rule.after(event=event, state=self.get_state())
 
-        mail_notify_users.assert_called_once_with(group=event.group, event=event)
+        mail_notify_users.assert_called_once()
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index 4002c4d480..40d73f50af 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -169,7 +169,7 @@ class ExecuteRuleTest(TestCase):
 
         mock_rules.get.assert_called_once_with('a.rule.id')
         mock_rule_inst = mock_rules.get.return_value
-        mock_rule_inst.assert_called_once_with(self.project, data=action_data)
+        mock_rule_inst.assert_called_once_with(self.project, data=action_data, rule=rule)
         mock_rule_inst.return_value.after.assert_called_once_with(
             event=event,
             state=state,
