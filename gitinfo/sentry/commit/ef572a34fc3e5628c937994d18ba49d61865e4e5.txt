commit ef572a34fc3e5628c937994d18ba49d61865e4e5
Author: Dan Fuller <dfuller@sentry.io>
Date:   Thu Sep 19 18:30:10 2019 -0700

    feat(api): Include trigger information in DetailedAlertRuleSerializer (SEN-990)
    
    This is more convenient for frontend at the moment, so including triggers in the detailed
    serializer.

diff --git a/src/sentry/api/serializers/models/alert_rule.py b/src/sentry/api/serializers/models/alert_rule.py
index e777f577cd..7a0a8b40ff 100644
--- a/src/sentry/api/serializers/models/alert_rule.py
+++ b/src/sentry/api/serializers/models/alert_rule.py
@@ -4,8 +4,8 @@ from collections import defaultdict
 
 import six
 
-from sentry.api.serializers import Serializer, register
-from sentry.incidents.models import AlertRule, AlertRuleExcludedProjects
+from sentry.api.serializers import register, serialize, Serializer
+from sentry.incidents.models import AlertRule, AlertRuleExcludedProjects, AlertRuleTrigger
 
 
 @register(AlertRule)
@@ -43,6 +43,14 @@ class DetailedAlertRuleSerializer(AlertRuleSerializer):
             rule_result = result[alert_rules[alert_rule_id]].setdefault("projects", [])
             rule_result.append(project_slug)
 
+        triggers = AlertRuleTrigger.objects.filter(alert_rule__in=item_list).order_by("label")
+        serialized_triggers = serialize(list(triggers))
+        for trigger, serialized in zip(triggers, serialized_triggers):
+            alert_rule_triggers = result[alert_rules[trigger.alert_rule_id]].setdefault(
+                "triggers", []
+            )
+            alert_rule_triggers.append(serialized)
+
         for alert_rule_id, project_slug in AlertRuleExcludedProjects.objects.filter(
             alert_rule__in=item_list
         ).values_list("alert_rule_id", "project__slug"):
@@ -54,4 +62,5 @@ class DetailedAlertRuleSerializer(AlertRuleSerializer):
         data = super(DetailedAlertRuleSerializer, self).serialize(obj, attrs, user)
         data["projects"] = sorted(attrs["projects"])
         data["excludedProjects"] = sorted(attrs.get("excludedProjects", []))
+        data["triggers"] = attrs.get("triggers", [])
         return data
diff --git a/tests/sentry/api/serializers/test_alert_rule.py b/tests/sentry/api/serializers/test_alert_rule.py
index be2952b3fd..32c9b13cd7 100644
--- a/tests/sentry/api/serializers/test_alert_rule.py
+++ b/tests/sentry/api/serializers/test_alert_rule.py
@@ -6,7 +6,7 @@ import six
 
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.alert_rule import DetailedAlertRuleSerializer
-from sentry.incidents.logic import create_alert_rule
+from sentry.incidents.logic import create_alert_rule, create_alert_rule_trigger
 from sentry.incidents.models import AlertRuleThresholdType
 from sentry.snuba.models import QueryAggregations
 from sentry.testutils import TestCase
@@ -74,3 +74,11 @@ class DetailedAlertRuleSerializerTest(BaseAlertRuleSerializerTest, TestCase):
         self.assert_alert_rule_serialized(alert_rule, result)
         assert result["projects"] == [p.slug for p in projects]
         assert result["excludedProjects"] == []
+
+    def test_triggers(self):
+        alert_rule = self.create_alert_rule()
+        other_alert_rule = self.create_alert_rule()
+        trigger = create_alert_rule_trigger(alert_rule, "test", AlertRuleThresholdType.ABOVE, 1000)
+        result = serialize([alert_rule, other_alert_rule], serializer=DetailedAlertRuleSerializer())
+        assert result[0]["triggers"] == [serialize(trigger)]
+        assert result[1]["triggers"] == []
