commit 79b465713e083b97d0f9096bc80581615de18093
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Mar 20 15:23:43 2018 -0700

    chore: Remove unused util functions (#7720)

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/message.jsx b/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
index 74c58e3df7..1f3e8d8add 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
@@ -26,9 +26,7 @@ class MessageInterface extends React.Component {
         <pre
           className="plain"
           dangerouslySetInnerHTML={{
-            __html: utils.nl2br(
-              utils.urlize(utils.escape(data.formatted || data.message))
-            ),
+            __html: utils.nl2br(utils.escape(data.formatted || data.message)),
           }}
         />
         {data.params &&
diff --git a/src/sentry/static/sentry/app/components/events/userReport.jsx b/src/sentry/static/sentry/app/components/events/userReport.jsx
index 4268aedce2..162985a8d5 100644
--- a/src/sentry/static/sentry/app/components/events/userReport.jsx
+++ b/src/sentry/static/sentry/app/components/events/userReport.jsx
@@ -42,7 +42,7 @@ class EventUserReport extends React.Component {
                   </div>
                   <p
                     dangerouslySetInnerHTML={{
-                      __html: utils.nl2br(utils.urlize(utils.escape(report.comments))),
+                      __html: utils.nl2br(utils.escape(report.comments)),
                     }}
                   />
                 </div>
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index 69ff16d128..57b117de19 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -9,14 +9,8 @@ import CursorPoller from './utils/cursorPoller';
 import StreamManager from './utils/streamManager';
 
 /*eslint no-use-before-define:0*/
-export const modelsEqual = function(obj1, obj2) {
-  if (!obj1 && !obj2) return true;
-  if (obj1.id && !obj2) return false;
-  if (obj2.id && !obj1) return false;
-  return obj1.id === obj2.id;
-};
 
-export const arrayIsEqual = function(arr, other, deep) {
+const arrayIsEqual = function(arr, other, deep) {
   // if the other array is a falsy value, return
   if (!arr && !other) {
     return true;
@@ -49,7 +43,7 @@ export const valueIsEqual = function(value, other, deep) {
   return false;
 };
 
-export const objectMatchesSubset = function(obj, other, deep) {
+const objectMatchesSubset = function(obj, other, deep) {
   let k;
 
   if (obj === other) {
@@ -87,67 +81,10 @@ export const objectToArray = function(obj) {
   return result;
 };
 
-export const compareArrays = function(arr1, arr2, compFunc) {
-  if (arr1 === arr2) {
-    return true;
-  }
-  if (!arr1) {
-    arr1 = [];
-  }
-  if (!arr2) {
-    arr2 = [];
-  }
-
-  if (arr1.length != arr2.length) {
-    return false;
-  }
-
-  for (let i = 0; i < Math.max(arr1.length, arr2.length); i++) {
-    if (!arr1[i]) {
-      return false;
-    }
-    if (!arr2[i]) {
-      return false;
-    }
-    if (!compFunc(arr1[i], arr2[i])) {
-      return false;
-    }
-  }
-  return true;
-};
-
 export const intcomma = function(x) {
   return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
 };
 
-export function getQueryParams() {
-  let hashes, hash;
-  let vars = {},
-    href = window.location.href;
-
-  if (href.indexOf('?') == -1) return vars;
-
-  hashes = href
-    .slice(
-      href.indexOf('?') + 1,
-      href.indexOf('#') != -1 ? href.indexOf('#') : href.length
-    )
-    .split('&');
-
-  hashes.forEach(chunk => {
-    hash = chunk.split('=');
-    if (!hash[0] && !hash[1]) {
-      return;
-    }
-
-    vars[decodeURIComponent(hash[0])] = hash[1]
-      ? decodeURIComponent(hash[1]).replace(/\+/, ' ')
-      : '';
-  });
-
-  return vars;
-}
-
 export function sortArray(arr, score_fn) {
   arr.sort((a, b) => {
     let a_score = score_fn(a),
@@ -177,7 +114,7 @@ export function objectIsEmpty(obj) {
   return true;
 }
 
-export function trim(str) {
+function trim(str) {
   return str.replace(/^\s+|\s+$/g, '');
 }
 
@@ -208,11 +145,6 @@ export function percent(value, totalValue, precise) {
   return value / totalValue * 100;
 }
 
-export function urlize(str) {
-  // TODO
-  return str;
-}
-
 export function toTitleCase(str) {
   return str.replace(/\w\S*/g, txt => {
     return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
@@ -291,22 +223,15 @@ export {parseLinkHeader, deviceNameMapper, Collection, PendingChangeQueue, Curso
 // backwards compatible default export for use w/ getsentry (exported
 // as a single object w/ function refs for consumption by getsentry)
 export default {
-  getQueryParams,
   sortArray,
   objectIsEmpty,
-  trim,
   defined,
   nl2br,
   isUrl,
   escape,
   percent,
-  urlize,
   toTitleCase,
-  arrayIsEqual,
-  objectMatchesSubset,
-  compareArrays,
   intcomma,
-  modelsEqual,
   valueIsEqual,
   parseLinkHeader,
   buildUserId,
diff --git a/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx b/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx
index 472a503ebb..b624d8bca1 100644
--- a/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx
+++ b/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx
@@ -17,7 +17,6 @@ import TeamSelect from './teamSelect';
 import TextBlock from '../settings/components/text/textBlock';
 import TextField from '../../components/forms/textField';
 import recreateRoute from '../../utils/recreateRoute';
-import {getQueryParams} from '../../utils';
 
 // These don't have allowed and are only used for superusers. superceded by server result of allowed roles
 const STATIC_ROLE_LIST = [
@@ -142,7 +141,7 @@ const InviteMember = createReactClass({
           user: email,
           teams: Array.from(selectedTeams.keys()),
           role: selectedRole,
-          referrer: getQueryParams().referrer,
+          referrer: this.props.location.query.referrer,
         },
         success: () => {
           // TODO(billy): Use indicator when these views only exist in Settings area
diff --git a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
index a178e64035..28fbc80c56 100644
--- a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
+++ b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
@@ -145,6 +145,11 @@ exports[`CreateProject render() should render roles when available and allowed,
 }
 
 <InviteMember
+  location={
+    Object {
+      "query": Object {},
+    }
+  }
   params={
     Object {
       "orgId": "testOrg",
diff --git a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
index 9d0795ce84..e9035586d0 100644
--- a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
+++ b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
@@ -27,6 +27,7 @@ describe('CreateProject', function() {
       params: {
         orgId: 'testOrg',
       },
+      location: {query: {}},
     };
 
     const baseContext = {
