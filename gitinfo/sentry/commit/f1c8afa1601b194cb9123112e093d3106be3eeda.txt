commit f1c8afa1601b194cb9123112e093d3106be3eeda
Author: David Cramer <dcramer@gmail.com>
Date:   Tue May 19 13:13:35 2015 -0700

    Ensure TagKey deletion query restrictions exist

diff --git a/src/sentry/tasks/deletion.py b/src/sentry/tasks/deletion.py
index d1e597c37e..d595a30ca4 100644
--- a/src/sentry/tasks/deletion.py
+++ b/src/sentry/tasks/deletion.py
@@ -183,17 +183,12 @@ def delete_tag_key(object_id, continuous=True, **kwargs):
         GroupTagValue, GroupTagKey, TagValue
     )
     for model in bulk_model_list:
-        has_more = bulk_delete_objects(model, key=tagkey.key, logger=logger)
+        has_more = bulk_delete_objects(model, project_id=tagkey.project_id,
+                                       key=tagkey.key, logger=logger)
         if has_more:
             if continuous:
                 delete_tag_key.delay(object_id=object_id, countdown=15)
             return
-
-    has_more = delete_events(relation={'group_id': object_id}, logger=logger)
-    if has_more:
-        if continuous:
-            delete_tag_key.delay(object_id=object_id, countdown=15)
-        return
     tagkey.delete()
 
 
@@ -234,9 +229,11 @@ def delete_objects(models, relation, limit=1000, logger=None):
 
 def bulk_delete_objects(model, limit=10000,
                         logger=None, **filters):
-    assert len(filters) == 1, 'Must pass a single column=value filter.'
-
-    column, value = filters.items()[0]
+    query = []
+    params = []
+    for column, value in filters.items():
+        query.append('%s = %%s' % (column,))
+        params.append(value)
 
     connection = connections['default']
     quote_name = connection.ops.quote_name
@@ -250,30 +247,30 @@ def bulk_delete_objects(model, limit=10000,
             where id = any(array(
                 select id
                 from %(table)s
-                where %(column)s = %%s
+                where (%(query)s)
                 limit %(limit)d
             ))
         """ % dict(
+            query=' AND '.join(query),
             table=model._meta.db_table,
             column=quote_name(column),
             limit=limit,
         )
-        params = [value]
     elif db.is_mysql():
         query = """
             delete from %(table)s
-            where %(column)s = %%s
+            where (%(query)s)
             limit %(limit)d
         """ % dict(
+            query=' AND '.join(query),
             table=model._meta.db_table,
             column=quote_name(column),
             limit=limit,
         )
-        params = [value]
     else:
         logger.warning('Using slow deletion strategy due to unknown database')
         has_more = False
-        for obj in model.objects.filter(**{column: value})[:limit]:
+        for obj in model.objects.filter(**filters)[:limit]:
             obj.delete()
             has_more = True
         return has_more
diff --git a/tests/sentry/tasks/test_deletion.py b/tests/sentry/tasks/test_deletion.py
index f37aa9d8e0..a60409670c 100644
--- a/tests/sentry/tasks/test_deletion.py
+++ b/tests/sentry/tasks/test_deletion.py
@@ -30,6 +30,12 @@ class DeleteTagKeyTest(TestCase):
         GroupTagKey.objects.create(key='foo', group=group, project=project)
         GroupTagValue.objects.create(key='foo', value='bar', group=group, project=project)
 
+        project2 = self.create_project(team=team, name='test2')
+        group2 = self.create_group(project=project2)
+        tk2 = TagKey.objects.create(key='foo', project=project2)
+        gtk2 = GroupTagKey.objects.create(key='foo', group=group2, project=project2)
+        gtv2 = GroupTagValue.objects.create(key='foo', value='bar', group=group2, project=project2)
+
         with self.tasks():
             delete_tag_key(object_id=tk.id)
 
@@ -60,3 +66,7 @@ class DeleteTagKeyTest(TestCase):
             assert not delete_tag_key_delay.called
 
             assert not TagKey.objects.filter(id=tk.id).exists()
+
+        assert TagKey.objects.filter(id=tk2.id).exists()
+        assert GroupTagKey.objects.filter(id=gtk2.id).exists()
+        assert GroupTagValue.objects.filter(id=gtv2.id).exists()
