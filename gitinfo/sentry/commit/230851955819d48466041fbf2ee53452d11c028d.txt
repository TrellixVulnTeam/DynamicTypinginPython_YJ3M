commit 230851955819d48466041fbf2ee53452d11c028d
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon May 20 11:34:08 2019 -0700

    feat(events-v2): Add a skeleton events table component (#13259)
    
    This will be used on the new events page in future.

diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx
new file mode 100644
index 0000000000..73acc09958
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx
@@ -0,0 +1,82 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import {css} from 'react-emotion';
+
+import withApi from 'app/utils/withApi';
+import SentryTypes from 'app/sentryTypes';
+import {Panel, PanelHeader, PanelBody, PanelItem} from 'app/components/panels';
+import LoadingIndicator from 'app/components/loadingIndicator';
+
+import {fetchOrganizationEvents} from './utils';
+
+class Table extends React.Component {
+  static propTypes = {
+    api: PropTypes.object.isRequired,
+    organization: SentryTypes.Organization.isRequired,
+    view: SentryTypes.EventView.isRequired,
+  };
+
+  constructor(props) {
+    super(props);
+    this.state = {events: [], isLoading: true, hasError: false};
+  }
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  fetchData = async () => {
+    const {api, organization} = this.props;
+    this.setState({isLoading: true, hasError: false});
+    try {
+      const events = await fetchOrganizationEvents(api, organization.slug);
+      this.setState({
+        events,
+        isLoading: false,
+      });
+    } catch (e) {
+      this.setState({isLoading: false, hasError: true});
+    }
+  };
+
+  renderBody() {
+    const {events, isLoading} = this.state;
+    const {fields} = this.props.view.data;
+
+    if (isLoading) {
+      return <LoadingIndicator />;
+    }
+
+    return events.map(event => (
+      <PanelItem key={event.id} className={getGridStyle(fields.length)}>
+        {fields.map(field => (
+          <div key={field}>{event[field]}</div>
+        ))}
+      </PanelItem>
+    ));
+  }
+
+  render() {
+    const {fields} = this.props.view.data;
+
+    return (
+      <Panel>
+        <PanelHeader className={getGridStyle(fields.length)}>
+          {fields.map(field => (
+            <div key={field}>{field}</div>
+          ))}
+        </PanelHeader>
+        <PanelBody>{this.renderBody()}</PanelBody>
+      </Panel>
+    );
+  }
+}
+
+export default withApi(Table);
+
+function getGridStyle(colCount) {
+  return css`
+    display: grid;
+    grid-template-columns: 2fr repeat(${colCount - 1}, 1fr);
+  `;
+}
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
new file mode 100644
index 0000000000..6fa8195a8c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
@@ -0,0 +1,3 @@
+export function fetchOrganizationEvents(api, orgSlug, data) {
+  return api.requestPromise(`/organizations/${orgSlug}/events/`, data);
+}
