commit 41d62510a2c12f87bf7679798e9183991cf5b9bb
Author: David Cramer <dcramer@gmail.com>
Date:   Fri May 2 12:06:03 2014 -0300

    Add resolution, start, and end parameters to group stats

diff --git a/src/sentry/api/endpoints/group_stats.py b/src/sentry/api/endpoints/group_stats.py
index debeca1018..81a83df98c 100644
--- a/src/sentry/api/endpoints/group_stats.py
+++ b/src/sentry/api/endpoints/group_stats.py
@@ -1,12 +1,13 @@
-from datetime import timedelta
+from datetime import datetime, timedelta
 from django.utils import timezone
+from pytz import utc
 from rest_framework.response import Response
 
 from sentry.app import tsdb
 from sentry.api.base import Endpoint
 from sentry.api.permissions import assert_perm
 from sentry.models import Group
-from sentry.tsdb.base import TSDBModel
+from sentry.tsdb.base import ROLLUPS
 
 
 class GroupStatsEndpoint(Endpoint):
@@ -17,11 +18,30 @@ class GroupStatsEndpoint(Endpoint):
 
         assert_perm(group, request.user)
 
-        days = min(int(request.GET.get('days', 1)), 30)
-
-        end = timezone.now()
-        start = end - timedelta(days=days)
-
-        data = tsdb.get_range(TSDBModel.group, [group.id], start, end)[group.id]
+        resolution = request.GET.get('resolution')
+        if resolution:
+            resolution = tsdb.parse_resolution(resolution)
+
+            assert any(r for r in ROLLUPS if r[0] == resolution)
+
+        end = request.GET.get('until')
+        if end:
+            end = datetime.fromtimestamp(float(end)).replace(tzinfo=utc)
+        else:
+            end = timezone.now()
+
+        start = request.GET.get('since')
+        if start:
+            start = datetime.fromtimestamp(float(start)).replace(tzinfo=utc)
+        else:
+            start = end - timedelta(days=1, seconds=-1)
+
+        data = tsdb.get_range(
+            model=tsdb.models.group,
+            keys=[group.id],
+            start=start,
+            end=end,
+            rollup=resolution,
+        )[group.id]
 
         return Response(data)
diff --git a/src/sentry/tsdb/base.py b/src/sentry/tsdb/base.py
index 2908cf2191..0d7c2edf1e 100644
--- a/src/sentry/tsdb/base.py
+++ b/src/sentry/tsdb/base.py
@@ -32,9 +32,23 @@ class TSDBModel(Enum):
 
 
 class BaseTSDB(object):
+    models = TSDBModel
+
     def __init__(self, rollups=ROLLUPS):
         self.rollups = rollups
 
+    def parse_resolution(self, value):
+        if value.endswith('h'):
+            return int(value[:-1]) * ONE_HOUR
+        elif value.endswith('d'):
+            return int(value[:-1]) * ONE_DAY
+        elif value.endswith('m'):
+            return int(value[:-1]) * ONE_MINUTE
+        elif value.endswith('s'):
+            return int(value[:-1])
+        else:
+            raise ValueError(value)
+
     def normalize_to_epoch(self, timestamp, seconds):
         """
         Given a ``timestamp`` (datetime object) normalize the datetime object
diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index 53f03d076e..94d623d43f 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -108,6 +108,8 @@ class RedisTSDB(BaseTSDB):
         """
         To get a range of data for group ID=[1, 2, 3]:
 
+        Start and end are both inclusive.
+
         >>> now = timezone.now()
         >>> get_keys(TimeSeriesModel.group, [1, 2, 3],
         >>>          start=now - timedelta(days=1),
@@ -120,12 +122,10 @@ class RedisTSDB(BaseTSDB):
         if rollup is None:
             rollup = self.get_optimal_rollup(start, end)
 
-        end = end + timedelta(seconds=1)
-
         results = []
+        timestamp = end
         with self.conn.map() as conn:
-            timestamp = start
-            while timestamp < end:
+            while timestamp >= start:
                 real_epoch = normalize_to_epoch(timestamp, rollup)
                 norm_epoch = normalize_to_rollup(timestamp, rollup)
 
@@ -134,7 +134,7 @@ class RedisTSDB(BaseTSDB):
                     hash_key = make_key(model, norm_epoch, model_key)
                     results.append((real_epoch, key, conn.hget(hash_key, model_key)))
 
-                timestamp = timestamp + timedelta(seconds=rollup)
+                timestamp = timestamp - timedelta(seconds=rollup)
 
         results_by_key = defaultdict(dict)
         for epoch, key, count in results:
diff --git a/tests/sentry/api/endpoints/test_group_stats.py b/tests/sentry/api/endpoints/test_group_stats.py
index def6b521c0..6298a720b5 100644
--- a/tests/sentry/api/endpoints/test_group_stats.py
+++ b/tests/sentry/api/endpoints/test_group_stats.py
@@ -1,4 +1,6 @@
 from django.core.urlresolvers import reverse
+
+from sentry.app import tsdb
 from sentry.testutils import APITestCase
 
 
@@ -7,12 +9,19 @@ class GroupStatsTest(APITestCase):
         # TODO: ensure this test checks data
         self.login_as(user=self.user)
 
-        group = self.create_group()
+        group1 = self.create_group()
+        group2 = self.create_group()
+
+        tsdb.incr(tsdb.models.group, group1.id, count=3)
+        tsdb.incr(tsdb.models.group, group2.id, count=5)
 
         url = reverse('sentry-api-0-group-stats', kwargs={
-            'group_id': group.id,
+            'group_id': group1.id,
         })
         response = self.client.get(url, format='json')
 
         assert response.status_code == 200, response.content
-        assert type(response.data) == list
+        assert response.data[-1][1] == 3, response.data
+        for point in response.data[:-1]:
+            assert point[1] == 0
+        assert len(response.data) == 24
