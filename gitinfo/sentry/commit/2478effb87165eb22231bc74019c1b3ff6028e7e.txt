commit 2478effb87165eb22231bc74019c1b3ff6028e7e
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Nov 19 22:18:31 2012 -0800

    Limit what send_fake_data sends

diff --git a/src/sentry/management/commands/send_fake_data.py b/src/sentry/management/commands/send_fake_data.py
index eec9672813..cab68f3df0 100644
--- a/src/sentry/management/commands/send_fake_data.py
+++ b/src/sentry/management/commands/send_fake_data.py
@@ -14,26 +14,20 @@ from django.core.management.base import BaseCommand
 
 
 def funcs():
-    engine = itertools.cycle(['psycopg2', 'mysqldb', 'sqlite3'])
-    exceptions = itertools.cycle([SyntaxError, ValueError, TypeError, NameError, IndexError])
-    messages = itertools.cycle(['hello world', 'beep boop beep', 'herp derp', 'shiny test data'])
-    queries = itertools.cycle(['SELECT * FROM table', 'SELECT COUNT(1) FROM foo', 'INSERT INTO foo (id) VALUES (1)', 'DELETE FROM foo'])
+    exceptions = itertools.cycle([SyntaxError('foo must come before bar'), ValueError('baz is not a valid choice'), TypeError('NoneType cannot be coerced to bar')])
     loggers = itertools.cycle(['root', 'foo', 'foo.bar'])
 
-    def query(client):
-        duration = random.randint(0, 10000) / 1000.0
-        return client.capture('Query', query=queries.next(), engine=engine.next(), time_spent=duration, data={'logger': loggers.next(), 'site': 'sql'})
+    # def query(client):
+    #     duration = random.randint(0, 10000) / 1000.0
+    #     return client.capture('Query', query=queries.next(), engine=engine.next(), time_spent=duration, data={'logger': loggers.next(), 'site': 'sql'})
 
     def exception(client):
         try:
-            raise exceptions.next()(messages.next())
+            raise exceptions.next()
         except Exception:
             return client.capture('Exception', data={'logger': loggers.next(), 'site': 'web'})
 
-    def message(client):
-        return client.capture('Message', message=messages.next(), data={'logger': loggers.next(), 'site': 'web'})
-
-    return [query, exception, message]
+    return [exception]
 
 
 class Command(BaseCommand):
