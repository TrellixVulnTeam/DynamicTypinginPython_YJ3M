commit 2652678400816e952a05cd2d899bb88d3acd6dd5
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Tue Oct 23 10:44:55 2018 -0700

    feat(integrations): GitLab default project field. (#10167)
    
    * skeleton for default project field.
    
    * Added a small test. Doesn't work yet.
    
    * Added tests and fixed them.
    
    * passed repo rather than field_name.
    
    * throw away comment
    
    * removed comment.
    
    * fixed tests.

diff --git a/src/sentry/integrations/gitlab/issues.py b/src/sentry/integrations/gitlab/issues.py
index 5c90ddddb5..2bba194edf 100644
--- a/src/sentry/integrations/gitlab/issues.py
+++ b/src/sentry/integrations/gitlab/issues.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 import re
 
 from django.core.urlresolvers import reverse
-from sentry.integrations.exceptions import ApiError, IntegrationError
+from sentry.integrations.exceptions import ApiError, IntegrationError, ApiUnauthorized
 from sentry.integrations.issues import IssueBasicMixin
 
 ISSUE_EXTERNAL_KEY_FORMAT = re.compile(r'.+:(.+)#(.+)')
@@ -22,9 +22,26 @@ class GitlabIssueBasic(IssueBasicMixin):
             issue_id,
         )
 
+    def get_persisted_default_config_fields(self):
+        return ['project']
+
+    def create_default_repo_choice(self, default_repo):
+        client = self.get_client()
+        try:
+            # default_repo should be the project_id
+            project = client.get_project(default_repo)
+        except (ApiError, ApiUnauthorized):
+            return ('', '')
+        return (project['id'], project['name_with_namespace'])
+
     def get_create_issue_config(self, group, **kwargs):
+        params = kwargs.get('params', {})
+        defaults = self.get_project_defaults(group.project_id)
+        kwargs['repo'] = params.get('project', defaults.get('project'))
+
         fields = super(GitlabIssueBasic, self).get_create_issue_config(group, **kwargs)
-        # TODO(lb): Add Default Project Functionality when avaliable
+        # In GitLab Repositories are called Projects
+        default_project, project_choices = self.get_repository_choices(group, **kwargs)
 
         org = group.organization
         autocomplete_url = reverse(
@@ -37,9 +54,9 @@ class GitlabIssueBasic(IssueBasicMixin):
                 'label': 'Gitlab Project',
                 'type': 'select',
                 'url': autocomplete_url,
-                'updatesForm': True,
+                'choices': project_choices,
+                'defaultValue': default_project,
                 'required': True,
-                'choices': [],
             }
         ] + fields
 
diff --git a/src/sentry/integrations/issues.py b/src/sentry/integrations/issues.py
index 22ac3c49d8..d2b6c6898e 100644
--- a/src/sentry/integrations/issues.py
+++ b/src/sentry/integrations/issues.py
@@ -208,10 +208,13 @@ class IssueBasicMixin(object):
         else:
             repo_choices = [(repo['identifier'], repo['name']) for repo in repos]
 
-        params = kwargs.get('params', {})
-        defaults = self.get_project_defaults(group.project_id)
-        default_repo = params.get('repo', defaults.get('repo') or repo_choices[0][0])
+        repo = kwargs.get('repo')
+        if not repo:
+            params = kwargs.get('params', {})
+            defaults = self.get_project_defaults(group.project_id)
+            repo = params.get('repo', defaults.get('repo'))
 
+        default_repo = repo or repo_choices[0][0]
         # If a repo has been selected outside of the default list of
         # repos, stick it onto the front of the list so that it can be
         # selected.
diff --git a/tests/sentry/integrations/gitlab/test_issues.py b/tests/sentry/integrations/gitlab/test_issues.py
index 704d62368d..637fb32426 100644
--- a/tests/sentry/integrations/gitlab/test_issues.py
+++ b/tests/sentry/integrations/gitlab/test_issues.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import responses
+import six
 
 from sentry.utils.http import absolute_uri
 from .testutils import GitLabTestCase
@@ -28,6 +29,7 @@ class GitlabIssuesTest(GitLabTestCase):
         assert self.installation.get_issue_url(
             issue_id) == 'https://example.gitlab.com/project/project/issues/7'
 
+    @responses.activate
     def test_get_create_issue_config(self):
         group_description = (
             u'Sentry Issue: [%s](%s)\n\n'
@@ -38,15 +40,23 @@ class GitlabIssuesTest(GitLabTestCase):
             self.group.qualified_short_id,
             absolute_uri(self.group.get_absolute_url()),
         )
+        responses.add(
+            responses.GET,
+            u'https://example.gitlab.com/api/v4/groups/%s/projects' % self.installation.model.metadata['group_id'],
+            json=[
+                {'name_with_namespace': 'getsentry / sentry', 'id': 1},
+                {'name_with_namespace': 'getsentry / hello', 'id': 22},
+            ]
+        )
         assert self.installation.get_create_issue_config(self.group) == [
             {
                 'url': '/extensions/gitlab/search/baz/%d/' % self.installation.model.id,
-                'updatesForm': True,
                 'name': 'project',
                 'required': True,
                 'type': 'select',
                 'label': 'Gitlab Project',
-                'choices': [],
+                'choices': [(1, u'getsentry / sentry'), (22, u'getsentry / hello')],
+                'defaultValue': 1,
             },
             {
                 'name': 'title',
@@ -141,3 +151,130 @@ class GitlabIssuesTest(GitLabTestCase):
                 'display_name': key,
             }
         }
+
+    @responses.activate
+    def test_create_issue_default_project_in_group_api_call(self):
+        group_description = (
+            u'Sentry Issue: [%s](%s)\n\n'
+            '```\nStacktrace (most recent call last):\n\n'
+            '  File "sentry/models/foo.py", line 29, in build_msg\n'
+            '    string_max_length=self.string_max_length)\n\nmessage\n```'
+        ) % (
+            self.group.qualified_short_id,
+            absolute_uri(self.group.get_absolute_url()),
+        )
+        project_id = 10
+        project_name = 'This_is / a_project'
+        org_integration = self.installation.org_integration
+        org_integration.config['project_issue_defaults'] = {
+            six.text_type(self.group.project_id): {'project': project_id}
+        }
+        org_integration.save()
+
+        responses.add(
+            responses.GET,
+            u'https://example.gitlab.com/api/v4/groups/%s/projects' % self.installation.model.metadata['group_id'],
+            json=[
+                {'name_with_namespace': 'getsentry / sentry', 'id': 1},
+                {'name_with_namespace': project_name, 'id': project_id},
+                {'name_with_namespace': 'getsentry / hello', 'id': 22},
+            ]
+        )
+        responses.add(
+            responses.GET,
+            u'https://example.gitlab.com/api/v4/projects/%s' % project_id,
+            json={'path_with_namespace': project_name, 'id': project_id}
+        )
+        assert self.installation.get_create_issue_config(self.group) == [
+            {
+                'url': '/extensions/gitlab/search/baz/%d/' % self.installation.model.id,
+                'name': 'project',
+                'required': True,
+                'choices': [
+                    (1, u'getsentry / sentry'),
+                    (10, u'This_is / a_project'),
+                    (22, u'getsentry / hello')
+                ],
+                'defaultValue': project_id,
+                'type': 'select',
+                'label': 'Gitlab Project'
+            },
+            {
+                'name': 'title',
+                'label': 'Title',
+                'default': self.group.get_latest_event().error(),
+                'type': 'string',
+                'required': True,
+            },
+            {
+                'name': 'description',
+                'label': 'Description',
+                'default': group_description,
+                'type': 'textarea',
+                'autosize': True,
+                'maxRows': 10,
+            }
+        ]
+
+    @responses.activate
+    def test_create_issue_default_project_not_in_api_call(self):
+        group_description = (
+            u'Sentry Issue: [%s](%s)\n\n'
+            '```\nStacktrace (most recent call last):\n\n'
+            '  File "sentry/models/foo.py", line 29, in build_msg\n'
+            '    string_max_length=self.string_max_length)\n\nmessage\n```'
+        ) % (
+            self.group.qualified_short_id,
+            absolute_uri(self.group.get_absolute_url()),
+        )
+        project_id = 10
+        project_name = 'This_is / a_project'
+        org_integration = self.installation.org_integration
+        org_integration.config['project_issue_defaults'] = {
+            six.text_type(self.group.project_id): {'project': project_id}
+        }
+        org_integration.save()
+
+        responses.add(
+            responses.GET,
+            u'https://example.gitlab.com/api/v4/groups/%s/projects' % self.installation.model.metadata['group_id'],
+            json=[
+                {'name_with_namespace': 'getsentry / sentry', 'id': 1},
+                {'name_with_namespace': 'getsentry / hello', 'id': 22},
+            ]
+        )
+        responses.add(
+            responses.GET,
+            u'https://example.gitlab.com/api/v4/projects/%s' % project_id,
+            json={'name_with_namespace': project_name, 'id': project_id}
+        )
+        assert self.installation.get_create_issue_config(self.group) == [
+            {
+                'url': '/extensions/gitlab/search/baz/%d/' % self.installation.model.id,
+                'name': 'project',
+                'required': True,
+                'choices': [
+                    (10, u'This_is / a_project'),
+                    (1, u'getsentry / sentry'),
+                    (22, u'getsentry / hello')
+                ],
+                'defaultValue': project_id,
+                'type': 'select',
+                'label': 'Gitlab Project'
+            },
+            {
+                'name': 'title',
+                'label': 'Title',
+                'default': self.group.get_latest_event().error(),
+                'type': 'string',
+                'required': True,
+            },
+            {
+                'name': 'description',
+                'label': 'Description',
+                'default': group_description,
+                'type': 'textarea',
+                'autosize': True,
+                'maxRows': 10,
+            }
+        ]
diff --git a/tests/sentry/integrations/gitlab/testutils.py b/tests/sentry/integrations/gitlab/testutils.py
index 444359cbdf..9cfcf300c4 100644
--- a/tests/sentry/integrations/gitlab/testutils.py
+++ b/tests/sentry/integrations/gitlab/testutils.py
@@ -30,6 +30,7 @@ class GitLabTestCase(APITestCase):
                 'domain_name': 'example.gitlab.com/group-x',
                 'verify_ssl': False,
                 'webhook_secret': WEBHOOK_SECRET,
+                'group_id': 1,
             }
         )
         identity = Identity.objects.create(
