commit 3c01802a601a25c4f77ef44717bd9e61a609c856
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Wed Jun 6 16:22:17 2018 -0700

    feat(integrations): VSTS Integration Client (#8620)
    
    * Added over vsts first draft.
    
    * Added changes so that the get_client method works.
    
    * Checked that the client works.
    
    * Changed it to unicode.
    
    * Added use of the default identity need to rebase once that branch is merged.:
    
    * Combined the default id with vsts functionality.
    
    * Fixed the getting an installation from the model as well.
    
    * removed the error handling.
    
    * Added a real identityprovider for mysql.

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 45813c64b6..690bd52286 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1248,7 +1248,7 @@ SENTRY_DEFAULT_INTEGRATIONS = (
     'sentry.integrations.github.GitHubIntegrationProvider',
     'sentry.integrations.github_enterprise.GitHubEnterpriseIntegrationProvider',
     'sentry.integrations.jira.JiraIntegrationProvider',
-    'sentry.integrations.vsts.VSTSIntegrationProvider',
+    'sentry.integrations.vsts.VstsIntegrationProvider',
 )
 
 SENTRY_INTERNAL_INTEGRATIONS = (
diff --git a/src/sentry/integrations/base.py b/src/sentry/integrations/base.py
index 8a0e2411a4..26fbce6f06 100644
--- a/src/sentry/integrations/base.py
+++ b/src/sentry/integrations/base.py
@@ -16,6 +16,7 @@ from .exceptions import (
     ApiHostError, ApiError, ApiUnauthorized, IntegrationError, UnsupportedResponseType
 )
 from .constants import ERR_UNAUTHORIZED, ERR_INTERNAL, ERR_UNSUPPORTED_RESPONSE_TYPE
+from sentry.models import Identity, OrganizationIntegration
 
 IntegrationMetadata = namedtuple('IntegrationMetadata', [
     'description',  # A markdown description of the integration
@@ -80,11 +81,14 @@ class IntegrationProvider(PipelineProvider):
     features = frozenset()
 
     @classmethod
-    def get_installation(cls, model, **kwargs):
+    def get_installation(cls, model, organization_id=None, **kwargs):
         if cls.integration_cls is None:
             raise NotImplementedError
 
-        return cls.integration_cls(model, **kwargs)
+        if cls.needs_default_identity is True and organization_id is None:
+            raise NotImplementedError('%s requires an organization_id' % cls.name)
+
+        return cls.integration_cls(model, organization_id, **kwargs)
 
     def get_logger(self):
         return logging.getLogger('sentry.integration.%s' % (self.key, ))
@@ -154,8 +158,9 @@ class Integration(object):
 
     logger = logging.getLogger('sentry.integrations')
 
-    def __init__(self, model):
+    def __init__(self, model, organization_id=None):
         self.model = model
+        self.organization_id = organization_id
 
     def get_organization_config(self):
         """
@@ -178,6 +183,21 @@ class Integration(object):
         # Return the api client for a given provider
         raise NotImplementedError
 
+    def get_default_identity(self):
+        """
+        For Integrations that rely solely on user auth for authentication
+        """
+        if self.organization_id is None:
+            raise NotImplementedError
+
+        org_integration = OrganizationIntegration.objects.get(
+            organization_id=self.organization_id,
+            integration_id=self.model.id,
+        )
+        identity = Identity.objects.get(id=org_integration.default_auth_id)
+
+        return identity
+
     def error_message_from_json(self, data):
         return data.get('message', 'unknown error')
 
diff --git a/src/sentry/integrations/vsts/client.py b/src/sentry/integrations/vsts/client.py
new file mode 100644
index 0000000000..01d92ca206
--- /dev/null
+++ b/src/sentry/integrations/vsts/client.py
@@ -0,0 +1,189 @@
+from __future__ import absolute_import
+
+from sentry.integrations.client import ApiClient
+
+UNSET = object()
+
+FIELD_MAP = {
+    'title': '/fields/System.Title',
+    'description': '/fields/System.Description',
+    'comment': '/fields/System.History',
+    'link': '/relations/-',
+}
+
+
+class VstsApiPath(object):
+    commits = u'https://{account_name}/DefaultCollection/_apis/git/repositories/{repo_id}/commits'
+    commits_batch = u'https://{account_name}/DefaultCollection/_apis/git/repositories/{repo_id}/commitsBatch'
+    commits_changes = u'https://{account_name}/DefaultCollection/_apis/git/repositories/{repo_id}/commits/{commit_id}/changes'
+    projects = u'https://{account_name}/DefaultCollection/_apis/projects'
+    repositories = u'https://{account_name}/DefaultCollection/{project}_apis/git/repositories/{repo_id}'
+    work_items = u'https://{account_name}/DefaultCollection/_apis/wit/workitems/{id}'
+    work_items_create = u'https://{account_name}/{project}/_apis/wit/workitems/${type}'
+
+
+class VstsApiClient(ApiClient):
+    api_version = '4.1'
+
+    def __init__(self, access_token, *args, **kwargs):
+        super(VstsApiClient, self).__init__(*args, **kwargs)
+        self.access_token = access_token
+
+    def request(self, method, path, data=None, params=None):
+        headers = {
+            'Accept': 'application/json; api-version={}'.format(self.api_version),
+            'Content-Type': 'application/json-patch+json' if method == 'PATCH' else 'application/json',
+            'X-HTTP-Method-Override': method,
+            'X-TFS-FedAuthRedirect': 'Suppress',
+            'Authorization': 'Bearer {}'.format(self.access_token)
+        }
+        return self._request(method, path, headers=headers, data=data, params=params)
+
+    def create_work_item(self, instance, project, title=None,
+                         description=None, comment=None, link=None):
+        data = []
+        if title:
+            data.append({
+                'op': 'add',
+                'path': FIELD_MAP['title'],
+                'value': title,
+            })
+        if description:
+            data.append({
+                'op': 'add',
+                'path': FIELD_MAP['description'],
+                'value': description
+            })
+        if comment:
+            data.append({
+                'op': 'add',
+                'path': FIELD_MAP['comment'],
+                'value': comment,
+            })
+        # XXX: Link is not yet used, as we can't explicitly bind it to Sentry.
+        # if link:
+        #     data.append({
+        #         'op': 'add',
+        #         'path': FIELD_MAP['link'],
+        #         'value': {
+        #             'rel': 'Hyperlink',
+        #             'url': link,
+        #         }
+        #     })
+
+        return self.patch(
+            VstsApiPath.work_items_create.format(
+                account_name=instance,
+                project=project,
+                type='Bug'
+            ),
+            data=data,
+        )
+
+    def update_work_item(self, instance, id, title=UNSET, description=UNSET, link=UNSET,
+                         comment=UNSET):
+        data = []
+
+        for f_name, f_value in (('title', title), ('description', description), ('link', link)):
+            if f_name == 'link':
+                # XXX: Link is not yet used, as we can't explicitly bind it to Sentry.
+                continue
+            elif f_value is None:
+                data.append({
+                    'op': 'remove',
+                    'path': FIELD_MAP[f_name],
+                })
+            elif f_value is not UNSET:
+                data.append({
+                    # TODO(dcramer): this is problematic when the link already exists
+                    'op': 'replace' if f_name != 'link' else 'add',
+                    'path': FIELD_MAP[f_name],
+                    'value': {
+                        'rel': 'Hyperlink',
+                        'url': f_value,
+                    } if f_name == 'link' else f_value,
+                })
+
+        if comment is not UNSET and comment:
+            data.append({
+                'op': 'add',
+                'path': FIELD_MAP['comment'],
+                'value': comment,
+            })
+
+        return self.patch(
+            VstsApiPath.work_items.format(
+                account_name=instance,
+                id=id,
+            ),
+            data=data,
+        )
+
+    def get_work_item(self, instance, id):
+        return self.get(
+            VstsApiPath.work_items.format(
+                account_name=instance,
+                id=id,
+            ),
+        )
+
+    def get_repo(self, instance, name_or_id, project=None):
+        return self.get(
+            VstsApiPath.repositories.format(
+                account_name=instance,
+                project='{}/'.format(project) if project else '',
+                repo_id=name_or_id,
+            ),
+        )
+
+    def get_commits(self, instance, repo_id, commit, limit=100):
+        return self.get(
+            VstsApiPath.commits.format(
+                account_name=instance,
+                repo_id=repo_id,
+            ),
+            params={
+                'commit': commit,
+                '$top': limit,
+            },
+        )
+
+    def get_commit_filechanges(self, instance, repo_id, commit):
+
+        resp = self.get(
+            VstsApiPath.commits_changes.format(
+                account_name=instance,
+                repo_id=repo_id,
+                commit_id=commit,
+            )
+        )
+        changes = resp['changes']
+        return changes
+
+    def get_commit_range(self, instance, repo_id, start_sha, end_sha):
+        return self.post(
+            VstsApiPath.commits_batch.format(
+                account_name=instance,
+                repo_id=repo_id,
+            ),
+            data={
+                'itemVersion': {
+                    'versionType': 'commit',
+                    'version': start_sha,
+                },
+                'compareVersion': {
+                    'versionType': 'commit',
+                    'version': end_sha
+                }
+            }
+        )
+
+    def get_projects(self, instance):
+        # TODO(dcramer): VSTS doesn't provide a way to search, so we're
+        # making the assumption that a user has 100 or less projects today.
+        return self.get(
+            VstsApiPath.projects.format(
+                account_name=instance,
+            ),
+            params={'stateFilter': 'WellFormed'}
+        )
diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index 112db55b75..e881831a73 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -5,7 +5,8 @@ from django import forms
 
 from django.utils.translation import ugettext_lazy as _
 from sentry.web.helpers import render_to_response
-from sentry.integrations import IntegrationProvider, IntegrationMetadata
+from sentry.integrations import Integration, IntegrationProvider, IntegrationMetadata
+from .client import VstsApiClient
 from sentry.pipeline import NestedPipelineView, PipelineView
 from sentry.identity.pipeline import IdentityProviderPipeline
 from sentry.identity.vsts import VSTSIdentityProvider
@@ -66,13 +67,29 @@ class ProjectForm(forms.Form):
         )
 
 
-class VSTSIntegrationProvider(IntegrationProvider):
+class VstsIntegration(Integration):
+    def __init__(self, *args, **kwargs):
+        super(VstsIntegration, self).__init__(*args, **kwargs)
+        self.default_identity = None
+
+    def get_client(self):
+        if self.default_identity is None:
+            self.default_identity = self.get_default_identity()
+
+        access_token = self.default_identity.data.get('access_token')
+        if access_token is None:
+            raise ValueError('Identity missing access token')
+        return VstsApiClient(access_token)
+
+
+class VstsIntegrationProvider(IntegrationProvider):
     key = 'vsts'
     name = 'Visual Studio Team Services'
     metadata = metadata
     domain = '.visualstudio.com'
     api_version = '4.1'
     needs_default_identity = True
+    integration_cls = VstsIntegration
 
     setup_dialog_config = {
         'width': 600,
diff --git a/src/sentry/models/integration.py b/src/sentry/models/integration.py
index 1c6ba8886f..d3761189e1 100644
--- a/src/sentry/models/integration.py
+++ b/src/sentry/models/integration.py
@@ -63,8 +63,8 @@ class Integration(Model):
         from sentry import integrations
         return integrations.get(self.provider)
 
-    def get_installation(self):
-        return self.get_provider().get_installation(self)
+    def get_installation(self, organization_id=None, **kwargs):
+        return self.get_provider().get_installation(self, organization_id, **kwargs)
 
     def has_feature(self, feature):
         return feature in self.get_provider().features
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index 8abdbb82d6..5ade0826a8 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -205,14 +205,14 @@ def register_extensions():
     from sentry.integrations.github_enterprise import GitHubEnterpriseIntegrationProvider
     from sentry.integrations.jira import JiraIntegrationProvider
     from sentry.integrations.slack import SlackIntegrationProvider
-    from sentry.integrations.vsts import VSTSIntegrationProvider
+    from sentry.integrations.vsts import VstsIntegrationProvider
     integrations.register(BitbucketIntegrationProvider)
     integrations.register(ExampleIntegrationProvider)
     integrations.register(GitHubIntegrationProvider)
     integrations.register(GitHubEnterpriseIntegrationProvider)
     integrations.register(JiraIntegrationProvider)
     integrations.register(SlackIntegrationProvider)
-    integrations.register(VSTSIntegrationProvider)
+    integrations.register(VstsIntegrationProvider)
 
     from sentry.plugins import bindings
     from sentry.plugins.providers.dummy import DummyRepositoryProvider
diff --git a/tests/sentry/integrations/vsts/test_integration.py b/tests/sentry/integrations/vsts/test_integration.py
index c9fa74f004..a911c7e58f 100644
--- a/tests/sentry/integrations/vsts/test_integration.py
+++ b/tests/sentry/integrations/vsts/test_integration.py
@@ -5,8 +5,9 @@ import responses
 from mock import Mock
 from django.http import HttpRequest
 
-from sentry.integrations.vsts import VSTSIntegrationProvider, ProjectConfigView, ProjectForm, get_projects
+from sentry.integrations.vsts import VstsIntegration, VstsIntegrationProvider, ProjectConfigView, ProjectForm, get_projects
 from sentry.identity.vsts import VSTSIdentityProvider
+from sentry.models import Integration, Identity, IdentityProvider
 from sentry.testutils import TestCase
 
 
@@ -66,7 +67,7 @@ class ProjectConfigViewTest(TestCase):
 
 class VSTSIntegrationTest(TestCase):
     def setUp(self):
-        self.integration = VSTSIntegrationProvider()
+        self.integration = VstsIntegrationProvider()
 
     def test_build_integration(self):
         state = {
@@ -96,3 +97,32 @@ class VSTSIntegrationTest(TestCase):
         assert isinstance(integration_dict['user_identity']['data']['expires'], int)
         assert integration_dict['user_identity']['data']['refresh_token'] == 'rxxx-xxxx'
         assert integration_dict['user_identity']['data']['token_type'] == 'jwt-bearer'
+
+
+class VstsIntegrationTest(TestCase):
+    def test_get_client(self):
+        user = self.create_user()
+        organization = self.create_organization()
+        access_token = '1234567890'
+        model = Integration.objects.create(
+            provider='integrations:vsts',
+            external_id='vsts_external_id',
+            name='vsts_name',
+        )
+
+        identity = Identity.objects.create(
+            idp=IdentityProvider.objects.create(
+                type='vsts',
+                config={}
+            ),
+            user=user,
+            external_id='vsts_id',
+            data={
+                'access_token': access_token
+            }
+        )
+        model.add_organization(organization.id, identity.id)
+        integration = VstsIntegration(model, organization.id)
+        client = integration.get_client()
+
+        assert client.access_token == access_token
