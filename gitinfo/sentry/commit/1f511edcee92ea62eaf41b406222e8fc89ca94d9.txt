commit 1f511edcee92ea62eaf41b406222e8fc89ca94d9
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Wed Nov 28 13:58:27 2018 -0800

    fix(api): Support snuba columns for org tag values endpoint (#10665)

diff --git a/src/sentry/api/endpoints/organization_tagkey_values.py b/src/sentry/api/endpoints/organization_tagkey_values.py
index 0d6e1a9e7e..c95273f382 100644
--- a/src/sentry/api/endpoints/organization_tagkey_values.py
+++ b/src/sentry/api/endpoints/organization_tagkey_values.py
@@ -1,14 +1,11 @@
 from __future__ import absolute_import
 
-from functools32 import partial
-
 from rest_framework.response import Response
 
 from sentry.api.bases import OrganizationEventsEndpointBase, OrganizationEventsError
-from sentry.api.event_search import get_snuba_query_args, InvalidSearchQuery
-from sentry.api.paginator import GenericOffsetPaginator
-from sentry.utils.snuba import raw_query
+from sentry.api.serializers import serialize
 from sentry.tagstore.base import TAG_KEY_RE
+from sentry.tagstore.snuba.backend import SnubaTagStorage
 
 
 class OrganizationTagKeyValuesEndpoint(OrganizationEventsEndpointBase):
@@ -22,30 +19,19 @@ class OrganizationTagKeyValuesEndpoint(OrganizationEventsEndpointBase):
         except OrganizationEventsError as exc:
             return Response({'detail': exc.message}, status=400)
 
-        query = 'tags_key:%s' % (key,)
+        # TODO(jess): update this when snuba tagstore is the primary backend for us
+        tagstore = SnubaTagStorage()
 
-        try:
-            snuba_args = get_snuba_query_args(query, params=filter_params)
-        except InvalidSearchQuery as exc:
-            return Response({'detail': exc.message}, status=400)
-
-        data_fn = partial(
-            # extract 'data' from raw_query result
-            lambda *args, **kwargs: raw_query(*args, **kwargs)['data'],
-            aggregations=[
-                ('count()', '', 'count'),
-            ],
-            orderby='-count',
-            groupby=['tags_value'],
-            referrer='api.organization-tags',
-            **snuba_args
+        paginator = tagstore.get_tag_value_paginator_for_projects(
+            filter_params['project_id'],
+            filter_params.get('environment'),
+            key,
+            filter_params['start'],
+            filter_params['end'],
+            query=request.GET.get('query'),
         )
-
         return self.paginate(
             request=request,
-            on_results=lambda results: [{
-                'value': row['tags_value'],
-                'count': row['count'],
-            } for row in results],
-            paginator=GenericOffsetPaginator(data_fn=data_fn),
+            paginator=paginator,
+            on_results=lambda results: serialize(results, request.user),
         )
diff --git a/src/sentry/tagstore/base.py b/src/sentry/tagstore/base.py
index 3dbd5f8b5c..5e2ec39522 100644
--- a/src/sentry/tagstore/base.py
+++ b/src/sentry/tagstore/base.py
@@ -62,6 +62,7 @@ class TagStorage(Service):
 
         'get_tag_value_paginator',
         'get_group_tag_value_paginator',
+        'get_tag_value_paginator_for_projects',
         'get_group_tag_value_iter',
 
         'get_group_tag_value_qs',
@@ -308,6 +309,13 @@ class TagStorage(Service):
         """
         raise NotImplementedError
 
+    def get_tag_value_paginator_for_projects(self, projects, environments, key, start, end,
+                                             query=None, order_by='-last_seen'):
+        """
+        >>> get_tag_value_paginator([1], [2], 'environment', query='prod')
+        """
+        raise NotImplementedError
+
     def get_group_tag_value_iter(self, project_id, group_id, environment_id, key, callbacks=()):
         """
         >>> get_group_tag_value_iter(1, 2, 3, 'environment')
diff --git a/src/sentry/tagstore/snuba/backend.py b/src/sentry/tagstore/snuba/backend.py
index e385440da6..b085d30cbb 100644
--- a/src/sentry/tagstore/snuba/backend.py
+++ b/src/sentry/tagstore/snuba/backend.py
@@ -465,26 +465,42 @@ class SnubaTagStorage(TagStorage):
 
     def get_tag_value_paginator(self, project_id, environment_id, key, query=None,
                                 order_by='-last_seen'):
+        start, end = self.get_time_range()
+        return self.get_tag_value_paginator_for_projects(
+            [project_id],
+            [environment_id] if environment_id else None,
+            key,
+            start,
+            end,
+            query=query,
+            order_by=order_by,
+        )
+
+    def get_tag_value_paginator_for_projects(self, projects, environments, key, start, end,
+                                             query=None, order_by='-last_seen'):
         from sentry.api.paginator import SequencePaginator
 
         if not order_by == '-last_seen':
             raise ValueError("Unsupported order_by: %s" % order_by)
 
+        snuba_key = snuba.get_snuba_column_name(key)
+
         conditions = []
         if query:
-            conditions.append(['tags_value', 'LIKE', u'%{}%'.format(query)])
+            conditions.append([snuba_key, 'LIKE', u'%{}%'.format(query)])
+        else:
+            conditions.append([snuba_key, '!=', ''])
 
-        start, end = self.get_time_range()
         filters = {
-            'project_id': [project_id],
-            'tags_key': [key],
+            'project_id': projects,
         }
-        if environment_id:
-            filters['environment'] = [environment_id]
+        if environments:
+            filters['environment'] = environments
+
         results = snuba.query(
             start=start,
             end=end,
-            groupby=['tags_value'],
+            groupby=[snuba_key],
             filter_keys=filters,
             aggregations=[
                 ['count()', '', 'times_seen'],
@@ -495,7 +511,7 @@ class SnubaTagStorage(TagStorage):
             orderby=order_by,
             # TODO: This means they can't actually paginate all TagValues.
             limit=1000,
-            referrer='tagstore.get_tag_value_paginator',
+            referrer='tagstore.get_tag_value_paginator_for_projects',
         )
 
         tag_values = [
diff --git a/tests/snuba/api/endpoints/test_organization_tagkey_values.py b/tests/snuba/api/endpoints/test_organization_tagkey_values.py
index ef2c6d01b1..b820f17e90 100644
--- a/tests/snuba/api/endpoints/test_organization_tagkey_values.py
+++ b/tests/snuba/api/endpoints/test_organization_tagkey_values.py
@@ -11,6 +11,7 @@ class OrganizationTagKeyValuesTest(APITestCase, SnubaTestCase):
     def setUp(self):
         super(OrganizationTagKeyValuesTest, self).setUp()
         self.min_ago = timezone.now() - timedelta(minutes=1)
+        self.day_ago = timezone.now() - timedelta(days=1)
 
     def test_simple(self):
         user = self.create_user()
@@ -24,7 +25,7 @@ class OrganizationTagKeyValuesTest(APITestCase, SnubaTestCase):
         group = self.create_group(project=project)
 
         self.create_event(
-            'a' * 32, group=group, datetime=self.min_ago, tags={'fruit': 'apple'}
+            'a' * 32, group=group, datetime=self.day_ago, tags={'fruit': 'apple'}
         )
         self.create_event(
             'b' * 32, group=group, datetime=self.min_ago, tags={'fruit': 'orange'}
@@ -46,7 +47,9 @@ class OrganizationTagKeyValuesTest(APITestCase, SnubaTestCase):
 
         response = self.client.get(url, format='json')
         assert response.status_code == 200, response.content
-        assert response.data == [{'count': 2, 'value': 'orange'}, {'count': 1, 'value': 'apple'}]
+
+        assert [(val['value'], val['count'])
+                for val in response.data] == [('orange', 2), ('apple', 1)]
 
     def test_bad_key(self):
         user = self.create_user()
@@ -67,3 +70,77 @@ class OrganizationTagKeyValuesTest(APITestCase, SnubaTestCase):
         response = self.client.get(url, format='json')
         assert response.status_code == 400, response.content
         assert response.data == {'detail': 'Invalid tag key format for "fr uit"'}
+
+    def test_snuba_column(self):
+        user = self.create_user()
+        org = self.create_organization()
+        team = self.create_team(organization=org)
+        self.create_member(organization=org, user=user, teams=[team])
+
+        self.login_as(user=user)
+
+        project = self.create_project(organization=org, teams=[team])
+        group = self.create_group(project=project)
+
+        self.create_event(
+            'a' * 32, group=group, datetime=self.day_ago, user={'email': 'foo@example.com'},
+        )
+        self.create_event(
+            'b' * 32, group=group, datetime=self.min_ago, user={'email': 'bar@example.com'},
+        )
+        self.create_event(
+            'c' * 32, group=group, datetime=timezone.now() - timedelta(seconds=10), user={'email': 'baz@example.com'},
+        )
+        self.create_event(
+            'd' * 32, group=group, datetime=timezone.now() - timedelta(seconds=10), user={'email': 'baz@example.com'},
+        )
+
+        url = reverse(
+            'sentry-api-0-organization-tagkey-values',
+            kwargs={
+                'organization_slug': org.slug,
+                'key': 'user.email',
+            }
+        )
+
+        response = self.client.get(url, format='json')
+        assert response.status_code == 200, response.content
+        assert [(val['value'], val['count'])
+                for val in response.data] == [('baz@example.com', 2), ('bar@example.com', 1), ('foo@example.com', 1)]
+
+    def test_release(self):
+        user = self.create_user()
+        org = self.create_organization()
+        team = self.create_team(organization=org)
+        self.create_member(organization=org, user=user, teams=[team])
+
+        self.login_as(user=user)
+
+        project = self.create_project(organization=org, teams=[team])
+        group = self.create_group(project=project)
+
+        self.create_event(
+            'a' * 32, group=group, datetime=self.day_ago, tags={'sentry:release': '3.1.2'},
+        )
+        self.create_event(
+            'b' * 32, group=group, datetime=self.min_ago, tags={'sentry:release': '4.1.2'},
+        )
+        self.create_event(
+            'c' * 32, group=group, datetime=self.day_ago, tags={'sentry:release': '3.1.2'},
+        )
+        self.create_event(
+            'd' * 32, group=group, datetime=timezone.now() - timedelta(seconds=10), tags={'sentry:release': '5.1.2'},
+        )
+
+        url = reverse(
+            'sentry-api-0-organization-tagkey-values',
+            kwargs={
+                'organization_slug': org.slug,
+                'key': 'release',
+            }
+        )
+
+        response = self.client.get(url, format='json')
+        assert response.status_code == 200, response.content
+        assert [(val['value'], val['count'])
+                for val in response.data] == [('5.1.2', 1), ('4.1.2', 1), ('3.1.2', 2)]
