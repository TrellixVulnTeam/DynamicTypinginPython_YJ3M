commit d4e3529d32fdec017f4baac00d311000d220febc
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Mar 20 10:37:27 2018 -0700

    fix(environments): Always fetch projects and environments before load (#7685)
    
    We'll always need projects and environment data before we can load any of the project pages
    
    Fixes a bug where default environment would be selected incorrectly if environments endpoint is returned first

diff --git a/src/sentry/static/sentry/app/views/projects/projectContext.jsx b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
index 2164a6266e..5d19f7d39e 100644
--- a/src/sentry/static/sentry/app/views/projects/projectContext.jsx
+++ b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
@@ -133,9 +133,7 @@ const ProjectContext = createReactClass({
   },
 
   fetchData() {
-    let {orgId, projectId, location} = this.props;
-    let query = location.query || {};
-    let envName = query.environment;
+    let {orgId, projectId} = this.props;
     // we fetch core access/information from the global organization data
     let activeProject = this.identifyProject();
     let hasAccess = activeProject && activeProject.hasAccess;
@@ -148,26 +146,34 @@ const ProjectContext = createReactClass({
 
     if (activeProject && hasAccess) {
       setActiveProject(null);
-      this.api.request(`/projects/${orgId}/${projectId}/`, {
-        success: data => {
+      const projectRequest = this.api.requestPromise(`/projects/${orgId}/${projectId}/`);
+
+      const environmentRequest = this.api.requestPromise(
+        this.getEnvironmentListEndpoint()
+      );
+
+      Promise.all([projectRequest, environmentRequest]).then(
+        ([project, envs]) => {
           this.setState({
             loading: false,
-            project: data,
+            project,
             error: false,
             errorType: null,
           });
+
           // assuming here that this means the project is considered the active project
-          setActiveProject(data);
+          setActiveProject(project);
+
+          loadEnvironments(envs, project.defaultEnvironment);
         },
-        error: error => {
-          // TODO(dcramer): this should handle 404 (project not found)
+        () => {
           this.setState({
             loading: false,
             error: false,
             errorType: ERROR_TYPES.UNKNOWN,
           });
-        },
-      });
+        }
+      );
 
       // TODO(dcramer): move member list to organization level
       this.api.request(this.getMemberListEndpoint(), {
@@ -175,12 +181,6 @@ const ProjectContext = createReactClass({
           MemberListStore.loadInitialData(data.filter(m => m.user).map(m => m.user));
         },
       });
-
-      this.api.request(this.getEnvironmentListEndpoint(), {
-        success: envs => {
-          loadEnvironments(envs, envName);
-        },
-      });
     } else if (activeProject && !activeProject.isMember) {
       this.setState({
         loading: false,
diff --git a/tests/js/spec/views/onboarding/configure/index.spec.jsx b/tests/js/spec/views/onboarding/configure/index.spec.jsx
index aadf37b310..8aa2c92579 100644
--- a/tests/js/spec/views/onboarding/configure/index.spec.jsx
+++ b/tests/js/spec/views/onboarding/configure/index.spec.jsx
@@ -113,7 +113,7 @@ describe('Configure should render correctly', function() {
       expect(handleSubmitStub.callCount).toEqual(1);
     });
 
-    it('should render platform docs', function() {
+    it('should render platform docs', function(done) {
       let props = {
         ...baseProps,
       };
@@ -162,7 +162,11 @@ describe('Configure should render correctly', function() {
         },
       });
 
-      expect(wrapper).toMatchSnapshot();
+      setTimeout(() => {
+        wrapper.update();
+        expect(wrapper).toMatchSnapshot();
+        done();
+      });
     });
   });
 });
