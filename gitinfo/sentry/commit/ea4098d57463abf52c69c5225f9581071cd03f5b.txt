commit ea4098d57463abf52c69c5225f9581071cd03f5b
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Tue Jun 12 17:27:51 2018 -0700

    feat(integrations): Repo panel for add/delete repos (#8677)
    
    * feat(integrations): Repo panel for add/delete repos
    
    * cleanup unneeded things
    
    * only render integration's repos
    
    * add integration repo endpoint
    
    * add tests
    
    * remove unused import
    
    * doesn't need Fragment
    
    * add RepositoryMixin
    
    * clean up/edit tests
    
    * fix linting error

diff --git a/src/sentry/api/endpoints/organization_integration_repos.py b/src/sentry/api/endpoints/organization_integration_repos.py
new file mode 100644
index 0000000000..08165951ba
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_integration_repos.py
@@ -0,0 +1,28 @@
+from __future__ import absolute_import
+
+from django.http import Http404
+
+from sentry.api.bases.organization import (
+    OrganizationEndpoint, OrganizationIntegrationsPermission
+)
+from sentry.integrations.repositories import RepositoryMixin
+from sentry.models import Integration
+
+
+class OrganizationIntegrationReposEndpoint(OrganizationEndpoint):
+    permission_classes = (OrganizationIntegrationsPermission, )
+
+    def get(self, request, organization, integration_id):
+
+        try:
+            integration = Integration.objects.get(id=integration_id, organizations=organization)
+        except Integration.DoesNotExist:
+            raise Http404
+
+        install = integration.get_installation()
+        if isinstance(install, RepositoryMixin):
+            repositories = install.get_repositories()
+            context = {'repos': repositories}
+            return self.respond(context)
+
+        return self.respond({'detail': 'Repositories not supported'}, status=400)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index d9b55385d9..51f3d11275 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -75,6 +75,7 @@ from .endpoints.organization_release_file_details import OrganizationReleaseFile
 from .endpoints.organization_release_commits import OrganizationReleaseCommitsEndpoint
 from .endpoints.organization_repositories import OrganizationRepositoriesEndpoint
 from .endpoints.organization_integration_details import OrganizationIntegrationDetailsEndpoint
+from .endpoints.organization_integration_repos import OrganizationIntegrationReposEndpoint
 from .endpoints.organization_integrations import OrganizationIntegrationsEndpoint
 from .endpoints.organization_config_integrations import OrganizationConfigIntegrationsEndpoint
 from .endpoints.organization_config_repositories import OrganizationConfigRepositoriesEndpoint
@@ -436,6 +437,10 @@ urlpatterns = patterns(
         r'^organizations/(?P<organization_slug>[^\/]+)/integrations/(?P<integration_id>[^\/]+)/$',
         OrganizationIntegrationDetailsEndpoint.as_view(),
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/integrations/(?P<integration_id>[^\/]+)/repos/$',
+        OrganizationIntegrationReposEndpoint.as_view(),
+    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/members/$',
         OrganizationMemberIndexEndpoint.as_view(),
diff --git a/src/sentry/integrations/github/client.py b/src/sentry/integrations/github/client.py
index b61a64def7..ea76c39907 100644
--- a/src/sentry/integrations/github/client.py
+++ b/src/sentry/integrations/github/client.py
@@ -87,6 +87,8 @@ class GitHubAppsClient(GitHubClientMixin):
         )
 
     def get_repositories(self):
-        return self.get(
+        repositories = self.get(
             '/installation/repositories',
+            params={'per_page': 100},
         )
+        return repositories['repositories']
diff --git a/src/sentry/integrations/github/integration.py b/src/sentry/integrations/github/integration.py
index 536901101a..098a2b66e1 100644
--- a/src/sentry/integrations/github/integration.py
+++ b/src/sentry/integrations/github/integration.py
@@ -8,6 +8,7 @@ from sentry.identity.github import get_user_info
 from sentry.integrations import Integration, IntegrationProvider, IntegrationMetadata
 from sentry.integrations.exceptions import ApiError
 from sentry.integrations.constants import ERR_INTERNAL, ERR_UNAUTHORIZED
+from sentry.integrations.repositories import RepositoryMixin
 from sentry.pipeline import NestedPipelineView, PipelineView
 from sentry.utils.http import absolute_uri
 
@@ -47,11 +48,14 @@ API_ERRORS = {
 }
 
 
-class GitHubIntegration(Integration):
+class GitHubIntegration(Integration, RepositoryMixin):
 
     def get_client(self):
         return GitHubAppsClient(external_id=self.model.external_id)
 
+    def get_repositories(self):
+        return self.get_client().get_repositories()
+
     def message_from_error(self, exc):
         if isinstance(exc, ApiError):
             message = API_ERRORS.get(exc.code)
diff --git a/src/sentry/integrations/repositories.py b/src/sentry/integrations/repositories.py
new file mode 100644
index 0000000000..60d3ee4f17
--- /dev/null
+++ b/src/sentry/integrations/repositories.py
@@ -0,0 +1,13 @@
+from __future__ import absolute_import
+
+
+class RepositoryMixin(object):
+
+    def get_repositories(self):
+        """
+        Get a list of availble repositories for an installation
+
+        >>> def get_repositories(self):
+        >>>     return self.get_client().get_repositories()
+        """
+        raise NotImplementedError
diff --git a/src/sentry/static/sentry/app/views/organizationIntegration/integrationRepos.jsx b/src/sentry/static/sentry/app/views/organizationIntegration/integrationRepos.jsx
new file mode 100644
index 0000000000..a44e812e0b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIntegration/integrationRepos.jsx
@@ -0,0 +1,291 @@
+import {Box, Flex} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
+import AsyncComponent from 'app/components/asyncComponent';
+import Button from 'app/components/buttons/button';
+import Confirm from 'app/components/confirm';
+import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
+import DropdownButton from 'app/components/dropdownButton';
+import EmptyMessage from 'app/views/settings/components/emptyMessage';
+import IndicatorStore from 'app/stores/indicatorStore';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import SpreadLayout from 'app/components/spreadLayout';
+import space from 'app/styles/space';
+import {t, tct} from 'app/locale';
+
+export default class IntegrationRepos extends AsyncComponent {
+  static propTypes = {
+    orgId: PropTypes.string.isRequired,
+    integration: PropTypes.object.isRequired,
+  };
+  static contextTypes = {
+    organization: PropTypes.object.isRequired,
+  };
+
+  constructor(props, context) {
+    super(props, context);
+    Object.assign(this.state, {
+      ...this.getDefaultState(),
+      loading: true,
+    });
+  }
+
+  getDefaultState() {
+    return {
+      error: false,
+      itemList: null,
+      errors: {},
+    };
+  }
+
+  getEndpoints() {
+    return [
+      ['itemList', `/organizations/${this.props.orgId}/repos/`, {query: {status: ''}}],
+      [
+        'integrationRepos',
+        `/organizations/${this.props.orgId}/integrations/${this.props.integration
+          .id}/repos/`,
+      ],
+    ];
+  }
+
+  getIntegrationRepos() {
+    let provider = `integrations:${this.props.integration.provider.key}`;
+    return this.state.itemList.filter(repo => repo.provider.id == provider);
+  }
+
+  getStatusLabel(repo) {
+    switch (repo.status) {
+      case 'pending_deletion':
+        return 'Deletion Queued';
+      case 'deletion_in_progress':
+        return 'Deletion in Progress';
+      case 'hidden':
+        return 'Disabled';
+      default:
+        return null;
+    }
+  }
+
+  addRepo(selection) {
+    let {integration, orgId} = this.props;
+    let {itemList} = this.state;
+    this.setState({loading: true});
+    this.api.request(`/organizations/${orgId}/repos/`, {
+      data: {
+        installation: integration.id,
+        name: selection.value,
+        provider: `integrations:${integration.provider.key}`,
+      },
+      method: 'POST',
+      success: repo => {
+        this.setState({loading: false, itemList: itemList.concat(repo)});
+        addSuccessMessage(
+          tct('[repo] has been successfully added.', {
+            repo: repo.name,
+          })
+        );
+      },
+      error: data => {
+        this.setState({loading: false});
+        addErrorMessage(t('Unable to add repository.'));
+      },
+    });
+  }
+
+  deleteRepo = repo => {
+    let indicator = IndicatorStore.add(t('Saving changes..'));
+    this.api.request(`/organizations/${this.props.orgId}/repos/${repo.id}/`, {
+      method: 'DELETE',
+      success: data => {
+        let itemList = this.state.itemList;
+        itemList.forEach(item => {
+          if (item.id === data.id) {
+            item.status = data.status;
+          }
+        });
+        this.setState({itemList});
+      },
+      error: () => {
+        addErrorMessage(t('Unable to delete repository.'));
+      },
+      complete: () => {
+        IndicatorStore.remove(indicator);
+      },
+    });
+  };
+
+  cancelDelete = repo => {
+    let {orgId} = this.props;
+    let indicator = IndicatorStore.add(t('Saving changes..'));
+    this.api.request(`/organizations/${orgId}/repos/${repo.id}/`, {
+      method: 'PUT',
+      data: {status: 'visible'},
+      success: data => {
+        let itemList = this.state.itemList;
+        itemList.forEach(item => {
+          if (item.id === data.id) {
+            item.status = data.status;
+          }
+        });
+        this.setState({itemList});
+      },
+      error: () => {
+        addErrorMessage(t('An error occurred.'));
+      },
+      complete: () => {
+        IndicatorStore.remove(indicator);
+      },
+    });
+  };
+
+  renderDropdown() {
+    let access = new Set(this.context.organization.access);
+    if (!access.has('org:write')) {
+      return (
+        <DropdownButton
+          disabled={true}
+          title={t('You do not have permission to add repos')}
+          isOpen={false}
+          size="xsmall"
+        >
+          {t('Add Repo')}
+        </DropdownButton>
+      );
+    }
+    let repositories = this.state.integrationRepos.repos;
+    let items = (repositories || []).map(repo => {
+      return {
+        searchKey: `${repo.name}`,
+        value: `${repo.full_name}`,
+        label: (
+          <StyledListElement>
+            <StyledName>{repo.name}</StyledName>
+          </StyledListElement>
+        ),
+      };
+    });
+
+    let menuHeader = <StyledReposLabel>{t('Repositories')}</StyledReposLabel>;
+
+    return (
+      <DropdownAutoComplete
+        items={items}
+        onSelect={this.addRepo.bind(this)}
+        menuHeader={menuHeader}
+        emptyMessage={t('No repositories available')}
+      >
+        {({isOpen}) => (
+          <DropdownButton isOpen={isOpen} size="xsmall">
+            {t('Add Repo')}
+          </DropdownButton>
+        )}
+      </DropdownAutoComplete>
+    );
+  }
+
+  renderBody() {
+    const itemList = this.getIntegrationRepos() || [];
+    const header = (
+      <PanelHeader hasButtons>
+        <div>{t('Repositories')}</div>
+        <div style={{textTransform: 'none'}}>{this.renderDropdown()}</div>
+      </PanelHeader>
+    );
+
+    return (
+      <Panel>
+        {header}
+        <PanelBody>
+          {itemList.length === 0 && (
+            <Box>
+              <EmptyMessage size="large">{t('No Repositories Added')}</EmptyMessage>
+            </Box>
+          )}
+          {itemList.length > 0 && (
+            <Box>
+              {itemList.map(repo => {
+                let repoIsVisible = repo.status === 'active';
+                return (
+                  <RepoOption key={repo.id}>
+                    <Box p={2} flex="1">
+                      <Flex direction="column">
+                        <Box pb={1}>
+                          <strong>{repo.name}</strong>
+                          {!repoIsVisible && (
+                            <small> — {this.getStatusLabel(repo)}</small>
+                          )}
+                          {repo.status === 'pending_deletion' && (
+                            <small>
+                              {' '}
+                              (
+                              <a onClick={() => this.cancelDelete(repo)}>{t('Cancel')}</a>
+                              )
+                            </small>
+                          )}
+                        </Box>
+                        <Box>
+                          <small>{repo.provider.name}</small>
+                          {repo.url && (
+                            <small>
+                              {' '}
+                              — <a href={repo.url}>{repo.url}</a>
+                            </small>
+                          )}
+                        </Box>
+                      </Flex>
+                    </Box>
+
+                    <Box p={2}>
+                      <Confirm
+                        disabled={!repoIsVisible}
+                        onConfirm={() => this.deleteRepo(repo)}
+                        message={t('Are you sure you want to remove this repository?')}
+                      >
+                        <Button size="xsmall">
+                          <span className="icon icon-trash" />
+                        </Button>
+                      </Confirm>
+                    </Box>
+                  </RepoOption>
+                );
+              })}
+            </Box>
+          )}
+        </PanelBody>
+      </Panel>
+    );
+  }
+}
+
+const StyledReposLabel = styled('div')`
+  width: 250px;
+  font-size: 0.875em;
+  padding: ${space(1)} 0;
+  text-transform: uppercase;
+`;
+
+const StyledListElement = styled('div')`
+  font-size: 0.875em;
+  display: flex;
+  align-items: center;
+  padding: ${space(0.5)};
+`;
+
+const StyledName = styled('div')`
+  flex-shrink: 1;
+  min-width: 0;
+  ${overflowEllipsis};
+`;
+
+const RepoOption = styled(SpreadLayout)`
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+
+  &:last-child {
+    border-bottom: none;
+  }
+`;
diff --git a/tests/sentry/api/endpoints/test_organization_integration_repos.py b/tests/sentry/api/endpoints/test_organization_integration_repos.py
new file mode 100644
index 0000000000..b7ad893c3f
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_integration_repos.py
@@ -0,0 +1,40 @@
+from __future__ import absolute_import
+
+from mock import patch
+from sentry.models import Integration
+from sentry.testutils import APITestCase
+
+
+class OrganizationIntegrationReposTest(APITestCase):
+    def setUp(self):
+        super(OrganizationIntegrationReposTest, self).setUp()
+
+        self.login_as(user=self.user)
+        self.org = self.create_organization(owner=self.user, name='baz')
+        self.integration = Integration.objects.create(
+            provider='github',
+            name='Example',
+        )
+        self.integration.add_organization(self.org.id)
+        self.path = '/api/0/organizations/{}/integrations/{}/repos/'.format(
+            self.org.slug, self.integration.id)
+
+    @patch('sentry.integrations.github.GitHubAppsClient.get_repositories', return_value=[])
+    def test_simple(self, get_repositories):
+        get_repositories.return_value = [{'id': '1'}, {'id': '2'}]
+        response = self.client.get(self.path, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data == {"repos": [{"id": "1"}, {"id": "2"}]}
+
+    def test_no_repository_method(self):
+        integration = Integration.objects.create(
+            provider='example',
+            name='Example',
+        )
+        integration.add_organization(self.org.id)
+        path = '/api/0/organizations/{}/integrations/{}/repos/'.format(
+            self.org.slug, integration.id)
+        response = self.client.get(path, format='json')
+
+        assert response.status_code == 400
