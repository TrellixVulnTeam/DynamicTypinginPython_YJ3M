commit 6beabbf96071cfc5c807fa7217c042dafe7a0a62
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Tue Mar 10 08:33:38 2020 +0100

    test: Add test for batched_buffer_incr (#17541)

diff --git a/tests/sentry/buffer/redis/tests.py b/tests/sentry/buffer/redis/tests.py
index 4fc126dc13..282afb1f2d 100644
--- a/tests/sentry/buffer/redis/tests.py
+++ b/tests/sentry/buffer/redis/tests.py
@@ -2,12 +2,12 @@
 
 from __future__ import absolute_import
 
-import pytest
+import pickle
 from sentry.utils.compat import mock
 
 from datetime import datetime
 from django.utils import timezone
-from sentry.buffer.redis import RedisBuffer
+from sentry.buffer.redis import RedisBuffer, batch_buffers_incr
 from sentry.models import Group, Project
 from sentry.testutils import TestCase
 
@@ -91,8 +91,6 @@ class RedisBufferTest(TestCase):
         self.buf.process("foo")
         process.assert_called_once_with(Group, columns, filters, extra, signal_only)
 
-    # this test should be passing once we no longer serialize using pickle
-    @pytest.mark.xfail
     @mock.patch("sentry.buffer.redis.RedisBuffer._make_key", mock.Mock(return_value="foo"))
     @mock.patch("sentry.buffer.redis.process_incr", mock.Mock())
     def test_incr_saves_to_redis(self):
@@ -104,24 +102,50 @@ class RedisBufferTest(TestCase):
         filters = {"pk": 1, "datetime": now}
         self.buf.incr(model, columns, filters, extra={"foo": "bar", "datetime": now})
         result = client.hgetall("foo")
-        assert result == {
-            "e+foo": '["s","bar"]',
-            "e+datetime": '["d","1493791566.000000"]',
-            "f": '{"pk":["i","1"],"datetime":["d","1493791566.000000"]}',
-            "i+times_seen": "1",
-            "m": "mock.mock.Mock",
-        }
+        f = result.pop("f")
+        assert pickle.loads(f) == {"pk": 1, "datetime": now}
+        assert pickle.loads(result.pop("e+datetime")) == now
+        assert pickle.loads(result.pop("e+foo")) == "bar"
+        assert result == {"i+times_seen": "1", "m": "mock.mock.Mock"}
+
         pending = client.zrange("b:p", 0, -1)
         assert pending == ["foo"]
-        self.buf.incr(model, columns, filters, extra={"foo": "baz"})
+        self.buf.incr(model, columns, filters, extra={"foo": "baz", "datetime": now})
         result = client.hgetall("foo")
-        assert result == {
-            "e+foo": '["s","baz"]',
-            "e+datetime": '["d","1493791566.000000"]',
-            "f": '{"pk":["i","1"],"datetime":["d","1493791566.000000"]}',
-            "i+times_seen": "2",
-            "m": "mock.mock.Mock",
-        }
+        f = result.pop("f")
+        assert pickle.loads(f) == {"pk": 1, "datetime": now}
+        assert pickle.loads(result.pop("e+datetime")) == now
+        assert pickle.loads(result.pop("e+foo")) == "baz"
+        assert result == {"i+times_seen": "2", "m": "mock.mock.Mock"}
+
+        pending = client.zrange("b:p", 0, -1)
+        assert pending == ["foo"]
+
+    @mock.patch("sentry.buffer.redis.RedisBuffer._make_key", mock.Mock(return_value="foo"))
+    @mock.patch("sentry.buffer.redis.process_incr", mock.Mock())
+    def test_batching_incr_saves_to_redis(self):
+        now = datetime(2017, 5, 3, 6, 6, 6, tzinfo=timezone.utc)
+        client = self.buf.cluster.get_routing_client()
+        model = mock.Mock()
+        model.__name__ = "Mock"
+        columns = {"times_seen": 1}
+        filters = {"pk": 1, "datetime": now}
+        with mock.patch("sentry.app.buffer", self.buf):
+            with batch_buffers_incr():
+                self.buf.incr(model, columns, filters, extra={"foo": "bar", "datetime": now})
+
+                # changes should only be visible on batching_buffers_incr() exit
+                assert not client.hgetall("foo")
+
+                self.buf.incr(model, columns, filters, extra={"foo": "baz", "datetime": now})
+
+        result = client.hgetall("foo")
+        f = result.pop("f")
+        assert pickle.loads(f) == {"pk": 1, "datetime": now}
+        assert pickle.loads(result.pop("e+datetime")) == now
+        assert pickle.loads(result.pop("e+foo")) == "baz"
+        assert result == {"i+times_seen": "2", "m": "mock.mock.Mock"}
+
         pending = client.zrange("b:p", 0, -1)
         assert pending == ["foo"]
 
