commit 404ef04bceecda4a57eaeb0b040933009766ee37
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Sep 12 17:03:57 2018 -0700

    feat(health): Use URL parameters as state for Health (#9728)
    
    This will make Health use the URL as a state manager for parameters (e.g. environments, or period).

diff --git a/src/sentry/static/sentry/app/views/organizationHealth/index.jsx b/src/sentry/static/sentry/app/views/organizationHealth/index.jsx
index 75566a84c9..bec18be5a2 100644
--- a/src/sentry/static/sentry/app/views/organizationHealth/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationHealth/index.jsx
@@ -1,4 +1,6 @@
 import {Flex} from 'grid-emotion';
+import {withRouter} from 'react-router';
+import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
@@ -17,28 +19,43 @@ import HealthNavigationMenu from './healthNavigationMenu';
 class OrganizationHealth extends React.Component {
   static propTypes = {
     organization: SentryTypes.Organization,
+    router: PropTypes.object,
   };
 
+  static getDerivedStateFromProps(props, state) {
+    const {query} = props.router.location;
+
+    return {
+      projects: query.projects || [],
+      environments: query.environments || [],
+      specifiers:
+        typeof query.specifiers === 'string'
+          ? [query.specifiers]
+          : Array.isArray(query.specifiers) ? query.specifiers : [],
+      period: query.period || '7d',
+    };
+  }
+
   constructor(props) {
     super(props);
 
-    this.state = {
-      actions: {
-        updateParams: this.updateParams,
-        setSpecifier: this.setSpecifier,
-      },
-      projects: [],
-      environments: [],
-      period: '7d',
-      specifiers: [],
+    this.actions = {
+      updateParams: this.updateParams,
+      setSpecifier: this.setSpecifier,
     };
+
+    this.state = {};
   }
 
   updateParams = obj => {
-    this.setState(state => ({
-      ...state,
-      ...obj,
-    }));
+    const {router} = this.props;
+    router.push({
+      pathname: router.location.pathname,
+      query: {
+        ...router.location.query,
+        ...obj,
+      },
+    });
   };
 
   setSpecifier = (tag, value) => {
@@ -69,7 +86,7 @@ class OrganizationHealth extends React.Component {
 
     return (
       <Feature feature={['health']} renderNoFeatureMessage>
-        <HealthContext.Provider value={this.state}>
+        <HealthContext.Provider value={{actions: this.actions, ...this.state}}>
           <HealthWrapper>
             <HealthNavigationMenu />
             <Content>
@@ -103,7 +120,7 @@ class OrganizationHealth extends React.Component {
   }
 }
 
-export default withLatestContext(OrganizationHealth);
+export default withRouter(withLatestContext(OrganizationHealth));
 export {OrganizationHealth};
 
 const HealthWrapper = styled(Flex)`
diff --git a/tests/js/spec/views/organizationHealth/index.spec.jsx b/tests/js/spec/views/organizationHealth/index.spec.jsx
index fb13b179a7..c2d4e9175a 100644
--- a/tests/js/spec/views/organizationHealth/index.spec.jsx
+++ b/tests/js/spec/views/organizationHealth/index.spec.jsx
@@ -8,6 +8,12 @@ import {selectByLabel} from '../../../helpers/select';
 
 describe('OrganizationHealth', function() {
   let wrapper;
+  const router = TestStubs.router({
+    location: {
+      pathname: '/organizations/org-slug/health/',
+      query: {},
+    },
+  });
   const project = TestStubs.Project({isMember: true});
   const organization = TestStubs.Organization({
     features: ['health'],
@@ -24,7 +30,7 @@ describe('OrganizationHealth', function() {
     await tick();
 
     wrapper = mount(
-      <OrganizationHealth organization={organization}>
+      <OrganizationHealth router={router} organization={organization}>
         <div />
       </OrganizationHealth>,
       TestStubs.routerContext([
@@ -39,14 +45,62 @@ describe('OrganizationHealth', function() {
     expect(wrapper.find('HealthWrapper')).toHaveLength(1);
   });
 
-  it('changes environments', async function() {
+  it('updates router when changing environments', async function() {
     wrapper.find('MultipleEnvironmentSelector .dropdown-actor').simulate('click');
     await tick();
     wrapper.update();
 
     selectByLabel(wrapper, 'production', {control: true, name: 'environments'});
-    expect(wrapper.state('environments')).toEqual(['production']);
+    expect(router.push).toHaveBeenCalledWith({
+      pathname: '/organizations/org-slug/health/',
+      query: {
+        environments: ['production'],
+      },
+    });
     selectByLabel(wrapper, 'staging', {control: true, name: 'environments'});
+    expect(router.push).toHaveBeenCalledWith({
+      pathname: '/organizations/org-slug/health/',
+      query: {
+        environments: ['production', 'staging'],
+      },
+    });
+  });
+
+  it('updates component state when router is updated', async function() {
+    wrapper = mount(
+      <OrganizationHealth router={router} organization={organization}>
+        <div />
+      </OrganizationHealth>,
+      TestStubs.routerContext([
+        {
+          organization,
+        },
+      ])
+    );
+    expect(wrapper.state('environments')).toEqual([]);
+
+    wrapper.setProps({
+      router: {
+        location: {
+          pathname: '/organizations/org-slug/health/',
+          query: {
+            environments: ['production'],
+          },
+        },
+      },
+    });
+    expect(wrapper.state('environments')).toEqual(['production']);
+
+    wrapper.setProps({
+      router: {
+        location: {
+          pathname: '/organizations/org-slug/health/',
+          query: {
+            environments: ['production', 'staging'],
+          },
+        },
+      },
+    });
     expect(wrapper.state('environments')).toEqual(['production', 'staging']);
   });
 });
