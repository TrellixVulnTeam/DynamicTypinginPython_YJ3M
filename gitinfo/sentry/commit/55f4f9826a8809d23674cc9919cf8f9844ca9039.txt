commit 55f4f9826a8809d23674cc9919cf8f9844ca9039
Author: Mark Story <mark@sentry.io>
Date:   Wed Nov 20 10:56:47 2019 -0500

    feat(discover) Paginate saved queries in the UI (#15670)
    
    Aim to always show 9 saved queries on the page at a time. If there are
    more than 9 pre-built queries we'll show 10 results, but otherwise we
    should show 9. There is currently inconsistent behavior if you go back
    and forth several times as results shift into the first page.

diff --git a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
index 84a4133a78..d25e301c63 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
@@ -30,7 +30,7 @@ import EventInputName from './eventInputName';
 import {DEFAULT_EVENT_VIEW} from './data';
 import QueryList from './queryList';
 import DiscoverBreadcrumb from './breadcrumb';
-import {generateTitle} from './utils';
+import {getPrebuiltQueries, generateTitle} from './utils';
 
 const DISPLAY_SEARCH_BAR_FLAG = false;
 const BANNER_DISMISSED_KEY = 'discover-banner-dismissed';
@@ -48,6 +48,7 @@ type Props = {
 
 type State = {
   savedQueries: SavedQuery[];
+  savedQueriesPageLinks: string;
 } & AsyncComponent['state'];
 
 class DiscoverLanding extends AsyncComponent<Props, State> {
@@ -64,22 +65,47 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
     errors: [],
     isBannerHidden: checkIsBannerHidden(),
     savedQueries: [],
+    savedQueriesPageLinks: '',
   };
 
   shouldReload = true;
 
   getEndpoints(): [string, string, any][] {
-    const {organization} = this.props;
+    const {organization, location} = this.props;
+    const views = getPrebuiltQueries(organization);
+    const cursor = location.query.cursor;
+    // XXX(mark) Pagination here is a bit wonky as we include the pre-built queries
+    // on the first page and aim to always have 9 results showing. If there are more than
+    // 9 pre-built queries we'll have more results on the first page. Furthermore, going
+    // back and forth between the first and second page is non-determinsitic due to the shifting
+    // per_page value.
+    let perPage = 9;
+    if (!cursor) {
+      perPage = Math.max(1, perPage - views.length);
+    }
+
+    const queryParams = {
+      cursor,
+      query: 'version:2',
+      per_page: perPage,
+      sortBy: '-dateUpdated',
+    };
+    if (!cursor) {
+      delete queryParams.cursor;
+    }
+
     return [
       [
         'savedQueries',
         `/organizations/${organization.slug}/discover/saved/`,
-        {query: {query: 'version:2'}},
+        {
+          query: queryParams,
+        },
       ],
     ];
   }
 
-  componentDidUpdate() {
+  componentDidUpdate(prevProps: Props) {
     const isBannerHidden = checkIsBannerHidden();
     if (isBannerHidden !== this.state.isBannerHidden) {
       // eslint-disable-next-line react/no-did-update-set-state
@@ -87,6 +113,10 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
         isBannerHidden,
       });
     }
+
+    if (prevProps.location.query.cursor !== this.props.location.query.cursor) {
+      this.fetchData();
+    }
   }
 
   getDocumentTitle = (eventView: EventView): string => {
@@ -154,86 +184,74 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
     );
   }
 
-  renderNewQuery() {
+  renderQueryList() {
     const {location, organization} = this.props;
-    const {savedQueries} = this.state;
+    const {loading, savedQueries, savedQueriesPageLinks} = this.state;
 
     return (
       <div>
         {this.renderBanner()}
         {DISPLAY_SEARCH_BAR_FLAG && this.renderActions()}
-        <QueryList
-          savedQueries={savedQueries}
-          location={location}
-          organization={organization}
-        />
+        {loading && this.renderLoading()}
+        {!loading && (
+          <QueryList
+            pageLinks={savedQueriesPageLinks}
+            savedQueries={savedQueries}
+            location={location}
+            organization={organization}
+          />
+        )}
       </div>
     );
   }
 
-  renderQueryRename = (hasQuery: boolean, eventView: EventView) => {
-    if (!hasQuery) {
-      return null;
-    }
-
-    const {organization} = this.props;
+  renderResults(eventView: EventView) {
+    const {organization, location, router} = this.props;
     const {savedQueries} = this.state;
 
     return (
-      <StyledInput>
-        <EventInputName
-          savedQueries={savedQueries}
+      <React.Fragment>
+        <div>
+          <StyledInput>
+            <EventInputName
+              savedQueries={savedQueries}
+              organization={organization}
+              eventView={eventView}
+              onQuerySave={this.handleQuerySave}
+            />
+          </StyledInput>
+        </div>
+        <Events
           organization={organization}
+          location={location}
+          router={router}
           eventView={eventView}
-          onQuerySave={this.handleQuerySave}
         />
-      </StyledInput>
+      </React.Fragment>
     );
-  };
+  }
 
-  renderBody() {
-    const {organization, location, router} = this.props;
-    const eventView = EventView.fromLocation(location);
+  renderSavedQueryControls(eventView: EventView) {
+    const {organization, location} = this.props;
     const {savedQueries, reloading} = this.state;
 
-    const hasQuery = eventView.isValid();
-
     return (
-      <React.Fragment>
-        <PageHeader>
-          <DiscoverBreadcrumb
-            eventView={eventView}
-            organization={organization}
-            location={location}
-          />
-          {hasQuery && (
-            <SavedQueryButtonGroup
-              location={location}
-              organization={organization}
-              eventView={eventView}
-              savedQueries={savedQueries}
-              savedQueriesLoading={reloading}
-              onQuerySave={this.handleQuerySave}
-            />
-          )}
-        </PageHeader>
-        {this.renderQueryRename(hasQuery, eventView)}
-        {!hasQuery && this.renderNewQuery()}
-        {hasQuery && (
-          <Events
-            organization={organization}
-            location={location}
-            router={router}
-            eventView={eventView}
-          />
-        )}
-      </React.Fragment>
+      <SavedQueryButtonGroup
+        location={location}
+        organization={organization}
+        eventView={eventView}
+        savedQueries={savedQueries}
+        savedQueriesLoading={reloading}
+        onQuerySave={this.handleQuerySave}
+      />
     );
   }
 
   render() {
     const {organization, location} = this.props;
+
     const eventView = EventView.fromLocation(location);
+    const hasQuery = eventView.isValid();
 
     return (
       <Feature features={['events-v2']} organization={organization} renderDisabled>
@@ -245,7 +263,16 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
             <GlobalSelectionHeader organization={organization} />
             <PageContent>
               <NoProjectMessage organization={organization}>
-                {super.render()}
+                <PageHeader>
+                  <DiscoverBreadcrumb
+                    eventView={eventView}
+                    organization={organization}
+                    location={location}
+                  />
+                  {hasQuery && this.renderSavedQueryControls(eventView)}
+                </PageHeader>
+                {!hasQuery && this.renderQueryList()}
+                {hasQuery && this.renderResults(eventView)}
               </NoProjectMessage>
             </PageContent>
           </React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
index d45b7bfa40..bb0b646901 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
@@ -12,12 +12,14 @@ import {Client} from 'app/api';
 import InlineSvg from 'app/components/inlineSvg';
 import DropdownMenu from 'app/components/dropdownMenu';
 import MenuItem from 'app/components/menuItem';
+import Pagination from 'app/components/pagination';
 import withApi from 'app/utils/withApi';
+import parseLinkHeader from 'app/utils/parseLinkHeader';
 
 import EventView from './eventView';
-import {ALL_VIEWS, TRANSACTION_VIEWS} from './data';
 import QueryCard from './querycard';
 import MiniGraph from './miniGraph';
+import {getPrebuiltQueries} from './utils';
 import {handleDeleteQuery, handleCreateQuery} from './savedQuery/utils';
 
 type Props = {
@@ -25,6 +27,7 @@ type Props = {
   organization: Organization;
   location: Location;
   savedQueries: SavedQuery[];
+  pageLinks: string;
 };
 
 class QueryList extends React.Component<Props> {
@@ -57,15 +60,24 @@ class QueryList extends React.Component<Props> {
     });
   };
 
-  renderPrebuiltQueries = () => {
-    const {location, organization} = this.props;
-    let views = ALL_VIEWS;
-    if (organization.features.includes('transaction-events')) {
-      // insert transactions queries at index 2
-      const cloned = [...ALL_VIEWS];
-      cloned.splice(2, 0, ...TRANSACTION_VIEWS);
-      views = cloned;
+  renderQueries() {
+    const {pageLinks} = this.props;
+    const links = parseLinkHeader(pageLinks);
+    let cards: React.ReactNode[] = [];
+
+    // If we're on the first page (no-previous page exists)
+    // include the pre-built queries.
+    if (!links.previous || links.previous.results === false) {
+      cards = cards.concat(this.renderPrebuiltQueries());
     }
+    cards = cards.concat(this.renderSavedQueries());
+
+    return cards;
+  }
+
+  renderPrebuiltQueries() {
+    const {location, organization} = this.props;
+    const views = getPrebuiltQueries(organization);
 
     const list = views.map((view, index) => {
       const eventView = EventView.fromSavedQuery(view);
@@ -106,9 +118,9 @@ class QueryList extends React.Component<Props> {
     });
 
     return list;
-  };
+  }
 
-  renderSavedQueries = () => {
+  renderSavedQueries() {
     const {savedQueries, location, organization} = this.props;
 
     if (!savedQueries || !Array.isArray(savedQueries) || savedQueries.length === 0) {
@@ -170,14 +182,15 @@ class QueryList extends React.Component<Props> {
         />
       );
     });
-  };
+  }
 
   render() {
+    const {pageLinks} = this.props;
     return (
-      <QueryGrid>
-        {this.renderPrebuiltQueries()}
-        {this.renderSavedQueries()}
-      </QueryGrid>
+      <React.Fragment>
+        <QueryGrid>{this.renderQueries()}</QueryGrid>
+        <Pagination pageLinks={pageLinks} />
+      </React.Fragment>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 86c63d4582..a6f36af69c 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -4,7 +4,7 @@ import {Location, Query} from 'history';
 import {browserHistory} from 'react-router';
 
 import {t} from 'app/locale';
-import {Event} from 'app/types';
+import {Event, Organization} from 'app/types';
 import {Client} from 'app/api';
 import {getTitle} from 'app/utils/events';
 import {URL_PARAM} from 'app/constants/globalSelectionHeader';
@@ -17,6 +17,8 @@ import {
   FIELD_FORMATTERS,
   FieldTypes,
   FieldFormatterRenderFunctionPartial,
+  ALL_VIEWS,
+  TRANSACTION_VIEWS,
 } from './data';
 import EventView, {Field as FieldType} from './eventView';
 import {
@@ -340,3 +342,15 @@ export function generateTitle({eventView, event}: {eventView: EventView; event?:
 
   return titles.join(' - ');
 }
+
+export function getPrebuiltQueries(organization: Organization) {
+  let views = ALL_VIEWS;
+  if (organization.features.includes('transaction-events')) {
+    // insert transactions queries at index 2
+    const cloned = [...ALL_VIEWS];
+    cloned.splice(2, 0, ...TRANSACTION_VIEWS);
+    views = cloned;
+  }
+
+  return views;
+}
diff --git a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
index 0919f85f5a..9453d71595 100644
--- a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
+++ b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
@@ -148,6 +148,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
       // expect(wrapper.state('queryName')).toBe('');
 
       expect(mockUtils).not.toHaveBeenCalled();
+      expect(onQuerySave).not.toHaveBeenCalled();
     });
   });
 
