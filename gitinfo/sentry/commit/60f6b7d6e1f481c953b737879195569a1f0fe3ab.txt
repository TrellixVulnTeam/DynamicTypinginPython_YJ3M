commit 60f6b7d6e1f481c953b737879195569a1f0fe3ab
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Fri Mar 22 00:11:34 2019 +0100

    fix: Skip renormalization in workerrelay (#12497)

diff --git a/src/sentry/eventstream/kafka/protocol.py b/src/sentry/eventstream/kafka/protocol.py
index 0b80f30bb7..916a5400e0 100644
--- a/src/sentry/eventstream/kafka/protocol.py
+++ b/src/sentry/eventstream/kafka/protocol.py
@@ -4,7 +4,7 @@ import pytz
 import logging
 from datetime import datetime
 
-from sentry.models import Event
+from sentry.models import Event, EventDict
 from sentry.utils import json, metrics
 
 
@@ -28,6 +28,12 @@ def basic_protocol_handler(unsupported_operations):
             "%Y-%m-%dT%H:%M:%S.%fZ",
         ).replace(tzinfo=pytz.utc)
 
+        # This data is already normalized as we're currently in the
+        # ingestion pipeline and the event was in store
+        # normalization just a few seconds ago. Running it through
+        # Rust (re)normalization here again would be too slow.
+        event_data['data'] = EventDict(event_data['data'], skip_renormalization=True)
+
         kwargs = {
             'event': Event(**{
                 name: event_data[name] for name in [
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index cff810be9c..bd26e5cabe 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -54,17 +54,27 @@ def _should_skip_to_python(event_id):
 
 
 class EventDict(CanonicalKeyDict):
-    def __init__(self, data, **kwargs):
-        rust_renormalized = _should_skip_to_python(data.get('event_id'))
-        if rust_renormalized:
-            normalizer = StoreNormalizer(is_renormalize=True)
-            data = normalizer.normalize_event(dict(data))
+    """
+    Creating an instance of this dictionary will send the event through basic
+    (Rust-based) type/schema validation called "re-normalization".
+
+    This is used as a wrapper type for `Event.data` such that creating an event
+    object (or loading it from the DB) will ensure the data fits the type
+    schema.
+    """
+
+    def __init__(self, data, skip_renormalization=False, **kwargs):
+        if not skip_renormalization and not isinstance(data, EventDict):
+            rust_renormalized = _should_skip_to_python(data.get('event_id'))
+            if rust_renormalized:
+                normalizer = StoreNormalizer(is_renormalize=True)
+                data = normalizer.normalize_event(dict(data))
 
-        metrics.incr('rust.renormalized',
-                     tags={'value': rust_renormalized})
+            metrics.incr('rust.renormalized',
+                         tags={'value': rust_renormalized})
 
-        with configure_scope() as scope:
-            scope.set_tag("rust.renormalized", rust_renormalized)
+            with configure_scope() as scope:
+                scope.set_tag("rust.renormalized", rust_renormalized)
 
         CanonicalKeyDict.__init__(self, data, **kwargs)
 
