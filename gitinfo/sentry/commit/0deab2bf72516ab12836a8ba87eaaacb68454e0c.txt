commit 0deab2bf72516ab12836a8ba87eaaacb68454e0c
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 19 19:59:28 2013 -0800

    Implement working tag inclusions

diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 8fefd796f2..835f615e1f 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -162,6 +162,11 @@ class NotificationPlugin(Plugin):
         if exclude_loggers and group.logger in exclude_loggers:
             return False
 
+        allowed_tags = project.get_option('notifcation:tags', {})
+        if allowed_tags:
+            tags = event.data.get('tags', {})
+            if not any(v in allowed_tags.get(k) for k, v in tags.iteritems()):
+                return False
         return True
 
     ## plugin hooks
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 6c38782c73..947a065598 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -14,7 +14,7 @@ from django.core.urlresolvers import reverse
 from django.template.loader import render_to_string
 from django.utils.translation import ugettext_lazy as _
 from sentry.conf import settings
-from sentry.plugins import register, PluginCategory
+from sentry.plugins import register
 from sentry.plugins.bases.notify import NotificationPlugin, NotificationConfigurationForm
 from sentry.utils.cache import cache
 
diff --git a/src/sentry/templates/sentry/projects/notifications.html b/src/sentry/templates/sentry/projects/notifications.html
index b84ccc99be..e8cd071784 100644
--- a/src/sentry/templates/sentry/projects/notifications.html
+++ b/src/sentry/templates/sentry/projects/notifications.html
@@ -17,26 +17,12 @@
         <h2>{% trans "Notifications" %}</h2>
     </div>
     <form action="" method="post" class="form-stacked">
-        <p>{% trans "Notification settings will guarantee that you will never be notified more than once for a specific event." %}</p>
         {% csrf_token %}
 
         <div class="page-header">
-            <h3>{% trans "Global Rules" %}</h3>
+            <h3>{% trans "Tags" %}</h3>
         </div>
-
-        <p>{% trans "The following rules will apply regardless of any other settings." %}</p>
-
-        {{ form|as_crispy_errors }}
-
-        {% for field in form %}
-            {% include "sentry/partial/_form_field.html" %}
-        {% endfor %}
-
         {% if tag_forms %}
-            <div class="page-header">
-                <h3>{% trans "Tags" %}</h3>
-            </div>
-
             <p>{% trans "Tag restrictions are based on your global notification rules. If tags are specified, notifications will be sent when they match any of the restrictions." %}</p>
 
             <table class="table table-striped" id="tag_list">
@@ -52,11 +38,13 @@
                     {% endfor %}
                 </tbody>
             </table>
-        {% endif %}
 
-        <fieldset class="form-actions">
-            <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
-        </fieldset>
+            <fieldset class="form-actions">
+                <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
+            </fieldset>
+        {% else %}
+            <p>{% trans "We have not yet recorded any tags for this project." %}</p>
+        {% endif %}
 
     </form>
     <script type="text/javascript">
diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index b28ad37551..f27a90939f 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -157,11 +157,6 @@ class EditProjectAdminForm(EditProjectForm):
         model = Project
 
 
-class NotificationSettingsForm(forms.Form):
-    active = forms.BooleanField(help_text=_('Enable notifications for this project. Users can override this within their personal settings'),
-        required=False)
-
-
 class AlertSettingsForm(forms.Form):
     active = forms.BooleanField(help_text=_('Enable notifications for this project. Users can override this within their personal settings'),
         required=False)
@@ -170,10 +165,13 @@ class AlertSettingsForm(forms.Form):
 
 
 class NotificationTagValuesForm(forms.Form):
-    values = forms.CharField()
+    values = forms.CharField(required=False)
 
     def __init__(self, project, tag, *args, **kwargs):
         self.project = project
         self.tag = tag
         super(NotificationTagValuesForm, self).__init__(*args, **kwargs)
         self.fields['values'].label = self.tag
+
+    def clean_values(self):
+        return set(filter(bool, self.cleaned_data.get('values').split(',')))
diff --git a/src/sentry/web/frontend/projects.py b/src/sentry/web/frontend/projects.py
index 4330940042..88680fc70e 100644
--- a/src/sentry/web/frontend/projects.py
+++ b/src/sentry/web/frontend/projects.py
@@ -22,7 +22,7 @@ from sentry.plugins.helpers import set_option, get_option
 from sentry.web.decorators import login_required, has_access
 from sentry.web.forms.projects import (NewProjectForm, NewProjectAdminForm,
     ProjectTagsForm, EditProjectForm, RemoveProjectForm, EditProjectAdminForm,
-    NotificationSettingsForm, NotificationTagValuesForm)
+    NotificationTagValuesForm)
 from sentry.web.forms.teams import NewTeamForm, SelectTeamForm
 from sentry.web.helpers import render_to_response, plugin_config
 
@@ -278,21 +278,37 @@ def manage_project_tags(request, team, project):
 @has_access(MEMBER_OWNER)
 @csrf_protect
 def notification_settings(request, team, project):
-    initial = {
-        'active': True,
-    }
-    form = NotificationSettingsForm(request.POST or None, initial=initial)
+    initial = project.get_option('notifcation:tags', {})
 
     tag_forms = []
     for tag in FilterKey.objects.all_keys(project):
-        tag_forms.append(NotificationTagValuesForm(project, tag, request.POST or None,
-            prefix='tag-%s' % (tag,)))
+        tag_forms.append(NotificationTagValuesForm(
+            project=project,
+            tag=tag,
+            data=request.POST or None,
+            prefix='tag-%s' % (tag,),
+            initial={
+                'values': ', '.join(initial.get(tag, [])),
+            },
+        ))
+
+    if all(f.is_valid() for f in tag_forms):
+        tags = {}
+        for form in tag_forms:
+            values = form.cleaned_data['values']
+            if values:
+                tags[form.tag] = values
+        project.update_option('notifcation:tags', tags)
+
+        messages.add_message(request, messages.SUCCESS,
+            _('Your settings were saved successfully.'))
+
+        return HttpResponseRedirect(reverse('sentry-project-notifications', args=[project.team.slug, project.slug]))
 
     context = csrf(request)
     context.update({
         'team': team,
         'project': project,
-        'form': form,
         'tag_forms': tag_forms,
         'page': 'notifications',
         'SECTION': 'team',
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 1c0919f184..9630231beb 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -31,6 +31,7 @@ class MailProcessorTest(TestCase):
     def test_should_notify_not_min_level(self):
         p = MailProcessor(min_level=2)
         group = Mock(spec=Group)
+        group.project = Project()
         group.level = 1
         self.assertFalse(p.should_notify(group=group, event=Mock()))
 
@@ -39,6 +40,7 @@ class MailProcessorTest(TestCase):
     def test_should_notify_not_included(self):
         p = MailProcessor(min_level=None, include_loggers=['foo'])
         group = Mock(spec=Group)
+        group.project = Project()
         group.level = 5
         group.logger = 'root'
         self.assertFalse(p.should_notify(group=group, event=Mock()))
@@ -48,6 +50,7 @@ class MailProcessorTest(TestCase):
     def test_should_notify_excluded(self):
         p = MailProcessor(min_level=None, exclude_loggers=['root'])
         group = Mock(spec=Group)
+        group.project = Project()
         group.level = 5
         group.logger = 'root'
         self.assertFalse(p.should_notify(group=group, event=Mock()))
@@ -58,8 +61,13 @@ class MailProcessorTest(TestCase):
         p = MailProcessor(min_level=None)
         group = Mock(spec=Group)
         group.level = 5
+        group.project = Project()
         group.logger = 'root'
-        self.assertTrue(p.should_notify(group=group, event=Mock()))
+        event = Mock()
+        event.data = {}
+        self.assertTrue
+
+        (p.should_notify(group=group, event=event))
 
     @mock.patch('sentry.plugins.sentry_mail.models.MailProcessor._send_mail')
     def test_notify_users_renders_interfaces(self, _send_mail):
