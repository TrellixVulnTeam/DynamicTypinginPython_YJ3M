commit 92a191b5755b8197034c7307e71a57a16d7d8bb2
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Mon Nov 12 13:18:15 2018 -0600

    ref(tagstore): Only pass environment_id to Snuba if it's not None (#10534)
    
    environment_id=None is allowed in the tagstore API and implies "all
    environments." For Snuba queries this means to not pass the filter along
    at all (query all rows).

diff --git a/src/sentry/tagstore/snuba/backend.py b/src/sentry/tagstore/snuba/backend.py
index e76993050e..d0d0aa405b 100644
--- a/src/sentry/tagstore/snuba/backend.py
+++ b/src/sentry/tagstore/snuba/backend.py
@@ -60,8 +60,9 @@ class SnubaTagStorage(TagStorage):
         tag = u'tags[{}]'.format(key)
         filters = {
             'project_id': [project_id],
-            'environment': [environment_id],
         }
+        if environment_id:
+            filters['environment'] = [environment_id]
         if group_id is not None:
             filters['issue'] = [group_id]
         conditions = [[tag, '!=', '']]
@@ -91,8 +92,9 @@ class SnubaTagStorage(TagStorage):
         tag = u'tags[{}]'.format(key)
         filters = {
             'project_id': [project_id],
-            'environment': [environment_id],
         }
+        if environment_id:
+            filters['environment'] = [environment_id]
         if group_id is not None:
             filters['issue'] = [group_id]
         conditions = [[tag, '!=', '']]
@@ -139,8 +141,9 @@ class SnubaTagStorage(TagStorage):
         start, end = self.get_time_range()
         filters = {
             'project_id': [project_id],
-            'environment': [environment_id],
         }
+        if environment_id:
+            filters['environment'] = [environment_id]
         if group_id is not None:
             filters['issue'] = [group_id]
         if keys is not None:
@@ -174,8 +177,9 @@ class SnubaTagStorage(TagStorage):
         tag = u'tags[{}]'.format(key)
         filters = {
             'project_id': [project_id],
-            'environment': [environment_id],
         }
+        if environment_id:
+            filters['environment'] = [environment_id]
         if group_id is not None:
             filters['issue'] = [group_id]
         conditions = [[tag, '=', value]]
@@ -216,7 +220,8 @@ class SnubaTagStorage(TagStorage):
         return set(key.top_values)
 
     def get_group_tag_key(self, project_id, group_id, environment_id, key):
-        return self.__get_tag_key_and_top_values(project_id, group_id, environment_id, key, limit=TOP_VALUES_DEFAULT_LIMIT)
+        return self.__get_tag_key_and_top_values(
+            project_id, group_id, environment_id, key, limit=TOP_VALUES_DEFAULT_LIMIT)
 
     def get_group_tag_keys(self, project_id, group_id, environment_id, limit=None, keys=None):
         return self.__get_tag_keys(project_id, group_id, environment_id, limit=limit, keys=keys)
@@ -236,9 +241,10 @@ class SnubaTagStorage(TagStorage):
         tag = u'tags[{}]'.format(key)
         filters = {
             'project_id': [project_id],
-            'environment': [environment_id],
             'issue': group_id_list,
         }
+        if environment_id:
+            filters['environment'] = [environment_id]
         conditions = [
             [tag, '=', value]
         ]
@@ -265,20 +271,23 @@ class SnubaTagStorage(TagStorage):
         tag = u'tags[{}]'.format(key)
         filters = {
             'project_id': [project_id],
-            'environment': [environment_id],
             'issue': [group_id],
         }
+        if environment_id:
+            filters['environment'] = [environment_id]
         conditions = [[tag, '!=', '']]
         aggregations = [['count()', '', 'count']]
 
         return snuba.query(start, end, [], conditions, filters, aggregations,
                            referrer='tagstore.get_group_tag_value_count')
 
-    def get_top_group_tag_values(self, project_id, group_id, environment_id, key, limit=TOP_VALUES_DEFAULT_LIMIT):
+    def get_top_group_tag_values(self, project_id, group_id,
+                                 environment_id, key, limit=TOP_VALUES_DEFAULT_LIMIT):
         tag = self.__get_tag_key_and_top_values(project_id, group_id, environment_id, key, limit)
         return tag.top_values
 
-    def get_group_tag_keys_and_top_values(self, project_id, group_id, environment_id, user=None, keys=None, value_limit=TOP_VALUES_DEFAULT_LIMIT):
+    def get_group_tag_keys_and_top_values(
+            self, project_id, group_id, environment_id, user=None, keys=None, value_limit=TOP_VALUES_DEFAULT_LIMIT):
         # Similar to __get_tag_key_and_top_values except we get the top values
         # for all the keys provided. value_limit in this case means the number
         # of top values for each key, so the total rows returned should be
@@ -288,8 +297,9 @@ class SnubaTagStorage(TagStorage):
         start, end = self.get_time_range()
         filters = {
             'project_id': [project_id],
-            'environment': [environment_id],
         }
+        if environment_id:
+            filters['environment'] = [environment_id]
         if keys is not None:
             filters['tags_key'] = keys
         if group_id is not None:
@@ -367,8 +377,9 @@ class SnubaTagStorage(TagStorage):
         start, end = self.get_time_range()
         filters = {
             'project_id': project_ids,
-            'environment': [environment_id],
         }
+        if environment_id:
+            filters['environment'] = [environment_id]
         # NB we add release as a condition rather than a filter because
         # this method is already dealing with version strings rather than
         # release ids which would need to be translated by the snuba util.
@@ -448,9 +459,10 @@ class SnubaTagStorage(TagStorage):
         start, end = self.get_time_range()
         filters = {
             'project_id': [project_id],
-            'environment': [environment_id],
             'issue': group_ids,
         }
+        if environment_id:
+            filters['environment'] = [environment_id]
         aggregations = [['uniq', 'tags[sentry:user]', 'count']]
 
         result = snuba.query(start, end, ['issue'], None, filters, aggregations,
@@ -469,15 +481,17 @@ class SnubaTagStorage(TagStorage):
             conditions.append(['tags_value', 'LIKE', u'%{}%'.format(query)])
 
         start, end = self.get_time_range()
+        filters = {
+            'project_id': [project_id],
+            'tags_key': [key],
+        }
+        if environment_id:
+            filters['environment'] = [environment_id]
         results = snuba.query(
             start=start,
             end=end,
             groupby=['tags_value'],
-            filter_keys={
-                'project_id': [project_id],
-                'environment': [environment_id],
-                'tags_key': [key],
-            },
+            filter_keys=filters,
             aggregations=[
                 ['count()', '', 'times_seen'],
                 ['min', 'timestamp', 'first_seen'],
@@ -507,16 +521,18 @@ class SnubaTagStorage(TagStorage):
 
     def get_group_tag_value_iter(self, project_id, group_id, environment_id, key, callbacks=()):
         start, end = self.get_time_range()
+        filters = {
+            'project_id': [project_id],
+            'tags_key': [key],
+            'issue': [group_id],
+        }
+        if environment_id:
+            filters['environment'] = [environment_id]
         results = snuba.query(
             start=start,
             end=end,
             groupby=['tags_value'],
-            filter_keys={
-                'project_id': [project_id],
-                'environment': [environment_id],
-                'tags_key': [key],
-                'issue': [group_id],
-            },
+            filter_keys=filters,
             aggregations=[
                 ['count()', '', 'times_seen'],
                 ['min', 'timestamp', 'first_seen'],
@@ -580,9 +596,10 @@ class SnubaTagStorage(TagStorage):
         start, end = self.get_time_range()
         filters = {
             'project_id': [project_id],
-            'environment': [environment_id],
             'issue': [group_id],
         }
+        if environment_id:
+            filters['environment'] = [environment_id]
 
         conditions = [[u'tags[{}]'.format(k), '=', v] for (k, v) in tags.items()]
 
