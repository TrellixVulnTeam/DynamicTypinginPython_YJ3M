commit 96c8aa1ca4bc0de0f33731f5330ba9d93e1a3f96
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jan 24 14:47:09 2013 -0800

    Improve create_or_update usability

diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index a691a840f6..c5cefd8395 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -26,7 +26,7 @@ from django.db.models import Sum
 from django.db.models.signals import post_save, post_delete, post_init, class_prepared
 from django.utils import timezone
 from django.utils.datastructures import SortedDict
-from django.utils.encoding import force_unicode, smart_str
+from django.utils.encoding import force_unicode
 
 from raven.utils.encoding import to_string
 from sentry import app
@@ -39,7 +39,7 @@ from sentry.tasks.fetch_source import fetch_javascript_source
 from sentry.utils.cache import cache, Lock
 from sentry.utils.dates import get_sql_date_trunc
 from sentry.utils.db import get_db_engine, has_charts
-from sentry.utils.models import create_or_update
+from sentry.utils.models import create_or_update, make_key
 from sentry.utils.queue import maybe_delay
 
 logger = logging.getLogger('sentry.errors')
@@ -81,31 +81,6 @@ class BaseManager(models.Manager):
         self.__dict__.update(state)
         self.__cache = weakref.WeakKeyDictionary()
 
-    def __prep_value(self, key, value):
-        if isinstance(value, models.Model):
-            value = value.pk
-        else:
-            value = unicode(value)
-        parts = key.split('__')
-        if len(key) > 1 and parts[-1] in self.lookup_handlers:
-            value = self.lookup_handlers[parts[-1]](value)
-        return value
-
-    def __prep_key(self, key):
-        if key == 'pk':
-            return self.model._meta.pk.name
-        return key
-
-    def make_key(self, prefix, kwargs):
-        kwargs_bits = []
-        for k, v in sorted(kwargs.iteritems()):
-            k = self.__prep_key(k)
-            v = smart_str(self.__prep_value(k, v))
-            kwargs_bits.append('%s=%s' % (k, v))
-        kwargs_bits = ':'.join(kwargs_bits)
-
-        return '%s:%s:%s' % (prefix, self.model.__name__, hashlib.md5(kwargs_bits).hexdigest())
-
     def __class_prepared(self, sender, **kwargs):
         """
         Given the cache is configured, connects the required signals for invalidation.
@@ -177,7 +152,7 @@ class BaseManager(models.Manager):
         cache.delete(self.__get_lookup_cache_key(**{pk_name: instance.pk}))
 
     def __get_lookup_cache_key(self, **kwargs):
-        return self.make_key('modelcache', kwargs)
+        return make_key(self.model, 'modelcache', kwargs)
 
     def contribute_to_class(self, model, name):
         super(BaseManager, self).contribute_to_class(model, name)
@@ -240,7 +215,7 @@ class BaseManager(models.Manager):
             return self.get(**kwargs), False
         except self.model.DoesNotExist:
             pass
-        lock_key = self.make_key('lock', kwargs)
+        lock_key = make_key(self.model, 'lock', kwargs)
 
         # instance not found, lets grab a lock and attempt to create it
         with Lock(lock_key):
diff --git a/src/sentry/utils/models.py b/src/sentry/utils/models.py
index 0876275b7c..1b336edc1e 100644
--- a/src/sentry/utils/models.py
+++ b/src/sentry/utils/models.py
@@ -7,11 +7,13 @@ sentry.utils.models
 """
 
 import base64
+import hashlib
 import logging
 
 from django.db import models, router
 from django.db.models import signals
 from django.db.models.expressions import ExpressionNode
+from django.utils.encoding import smart_str
 
 from sentry.utils.cache import Lock
 from sentry.utils.compat import pickle
@@ -69,6 +71,31 @@ def update(self, using=None, **kwargs):
 update.alters_data = True
 
 
+def __prep_value(model, key, value):
+    if isinstance(value, models.Model):
+        value = value.pk
+    else:
+        value = unicode(value)
+    return value
+
+
+def __prep_key(model, key):
+    if key == 'pk':
+        return model._meta.pk.name
+    return key
+
+
+def make_key(model, prefix, kwargs):
+    kwargs_bits = []
+    for k, v in sorted(kwargs.iteritems()):
+        k = __prep_key(model, k)
+        v = smart_str(__prep_value(model, k, v))
+        kwargs_bits.append('%s=%s' % (k, v))
+    kwargs_bits = ':'.join(kwargs_bits)
+
+    return '%s:%s:%s' % (prefix, model.__name__, hashlib.md5(kwargs_bits).hexdigest())
+
+
 def create_or_update(model, **kwargs):
     """
     Similar to get_or_create, either updates a row or creates it.
@@ -84,7 +111,7 @@ def create_or_update(model, **kwargs):
     affected = objects.filter(**kwargs).update(**defaults)
     if affected:
         return affected, False
-    lock_key = objects.make_key('lock', kwargs)
+    lock_key = make_key(model, 'lock', kwargs)
 
     # instance not found, lets grab a lock and attempt to create it
     with Lock(lock_key) as lock:
