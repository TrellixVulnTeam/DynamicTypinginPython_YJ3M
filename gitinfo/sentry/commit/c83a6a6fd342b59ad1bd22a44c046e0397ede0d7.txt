commit c83a6a6fd342b59ad1bd22a44c046e0397ede0d7
Author: David Cramer <dcramer@gmail.com>
Date:   Tue May 26 20:21:26 2015 +0200

    Correct query behavior with member_set

diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index e60ff7f178..91ad762941 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -197,15 +197,16 @@ class Project(Model):
 
     @property
     def member_set(self):
-        from sentry.models import OrganizationMember
-
-        return OrganizationMember.objects.filter(
-            Q(organizationmemberteam__team=self.team) | Q(has_global_access=True),
+        # Django does not correctly handle exclude on the many2many (it uses
+        # a singular subquery)
+        return self.organization.member_set.filter(
+            Q(organizationmemberteam__is_active=True,
+              organizationmemberteam__team=self.team) |
+            Q(organizationmemberteam__is_active=True,
+              has_global_access=True) |
+            Q(organizationmemberteam__isnull=True,
+              has_global_access=True),
             user__is_active=True,
-            organization=self.organization,
-        ).exclude(
-            organizationmemberteam__team=self.team,
-            organizationmemberteam__is_active=False,
         ).distinct()
 
     def has_access(self, user, access=None):
diff --git a/src/sentry/models/team.py b/src/sentry/models/team.py
index b27e0836c1..e1c83ad9cd 100644
--- a/src/sentry/models/team.py
+++ b/src/sentry/models/team.py
@@ -176,12 +176,16 @@ class Team(Model):
 
     @property
     def member_set(self):
+        # Django does not correctly handle exclude on the many2many (it uses
+        # a singular subquery)
         return self.organization.member_set.filter(
-            Q(organizationmemberteam__team=self) | Q(has_global_access=True),
+            Q(organizationmemberteam__is_active=True,
+              organizationmemberteam__team=self) |
+            Q(organizationmemberteam__is_active=True,
+              has_global_access=True) |
+            Q(organizationmemberteam__isnull=True,
+              has_global_access=True),
             user__is_active=True,
-        ).exclude(
-            organizationmemberteam__team=self,
-            organizationmemberteam__is_active=False,
         ).distinct()
 
     def has_access(self, user, access=None):
