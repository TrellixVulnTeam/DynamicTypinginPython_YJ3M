commit 5e1c25f1f9290602eba2e79c1ed118bb422805bd
Author: Dan Fuller <dfuller@sentry.io>
Date:   Tue Jun 23 10:34:28 2020 -0700

    fix(metric_alerts): Fix column type of `TimeSeriesSnapshot.value` to be an array of floats (#19502)
    
    Initially we implemented this table when we were using south, and it correctly set the column type
    to `int[]`. When we switched over from South it looks like we broke the type detection of our
    custom array column, and so going forward new array columns became `text[]`. This means they worked
    correctly, and we were behaving differently to prod.
    
    This means that when we changed this column to float locally it worked fine, since it just stored
    the floats as text and interpreted them. However in production, postgres is silently converting
    these values to `int` because it still has an int column type.
    
    Adding a quick fix here to correct the column type of this table. There are low thousands of rows
    here, so it should be fine to convert this over in production. I'll create a task to fix the custom
    Array column itself later on.

diff --git a/migrations_lockfile.txt b/migrations_lockfile.txt
index 2686c9c8bc..28a220f8e9 100644
--- a/migrations_lockfile.txt
+++ b/migrations_lockfile.txt
@@ -10,7 +10,7 @@ auth: 0008_alter_user_username_max_length
 contenttypes: 0002_remove_content_type_name
 jira_ac: 0001_initial
 nodestore: 0001_initial
-sentry: 0086_sentry_app_installation_for_provider
+sentry: 0087_fix_time_series_data_type
 sessions: 0001_initial
 sites: 0002_alter_domain_unique
 social_auth: 0001_initial
diff --git a/src/sentry/migrations/0087_fix_time_series_data_type.py b/src/sentry/migrations/0087_fix_time_series_data_type.py
new file mode 100644
index 0000000000..fb48354c49
--- /dev/null
+++ b/src/sentry/migrations/0087_fix_time_series_data_type.py
@@ -0,0 +1,32 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.29 on 2020-06-23 00:22
+from __future__ import unicode_literals
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+    # This flag is used to decide whether to run this migration in a transaction or not.
+    # By default we prefer to run in a transaction, but for migrations where you want
+    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
+    # want to create an index concurrently when adding one to an existing table.
+    atomic = True
+
+    dependencies = [("sentry", "0086_sentry_app_installation_for_provider")]
+
+    operations = [
+        migrations.RunSQL(
+            "ALTER TABLE sentry_timeseriessnapshot ALTER COLUMN values SET DATA TYPE float[] USING values::float[]"
+        )
+    ]
