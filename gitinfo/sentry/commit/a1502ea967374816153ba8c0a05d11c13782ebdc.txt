commit a1502ea967374816153ba8c0a05d11c13782ebdc
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Mar 8 07:23:15 2018 +0900

    feat(ui): New Org Rate Limits (#7299)

diff --git a/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx b/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
index 996d6812e5..70573d5801 100644
--- a/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
@@ -5,7 +5,6 @@ import createReactClass from 'create-react-class';
 
 import OrganizationState from '../../mixins/organizationState';
 import LazyLoad from '../../components/lazyLoad';
-import getSettingsComponent from '../../utils/getSettingsComponent';
 
 const OrganizationRateLimits = createReactClass({
   displayName: 'OrganizationRateLimits',
@@ -18,13 +17,11 @@ const OrganizationRateLimits = createReactClass({
     if (!this.context.organization) return null;
 
     return (
+      // TODO(billy): Move to routes
       <LazyLoad
         component={() =>
-          getSettingsComponent(
-            () =>
-              import(/*webpackChunkName: "rateLimitView"*/ '../settings/organization/rateLimit/rateLimitView'),
-            () => import(/*webpackChunkName: "rateLimitView.old"*/ './rateLimitView.old'),
-            this.props.routes
+          import(/*webpackChunkName: "rateLimitView"*/ '../settings/organization/rateLimit/rateLimitView').then(
+            mod => mod.default
           )}
         {...this.props}
         organization={this.context.organization}
diff --git a/src/sentry/static/sentry/app/views/organizationRateLimits/rateLimitView.old.jsx b/src/sentry/static/sentry/app/views/organizationRateLimits/rateLimitView.old.jsx
deleted file mode 100644
index 9d4c479e3e..0000000000
--- a/src/sentry/static/sentry/app/views/organizationRateLimits/rateLimitView.old.jsx
+++ /dev/null
@@ -1,201 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import createReactClass from 'create-react-class';
-
-import ApiMixin from '../../mixins/apiMixin';
-import IndicatorStore from '../../stores/indicatorStore';
-import {RangeField} from '../../components/forms';
-import {t} from '../../locale';
-
-class AccountLimit extends React.Component {
-  static propTypes = {
-    value: PropTypes.number,
-    onChange: PropTypes.func.isRequired,
-  };
-
-  getRateLimitValues = () => {
-    let steps = [];
-    let i = 0;
-    while (i <= 1000000) {
-      steps.push(i);
-      if (i < 10000) {
-        i += 1000;
-      } else if (i < 100000) {
-        i += 10000;
-      } else {
-        i += 100000;
-      }
-    }
-    return steps;
-  };
-
-  render() {
-    return (
-      <RangeField
-        name="accountLimit"
-        min={0}
-        max={1000000}
-        value={this.props.value}
-        allowedValues={this.getRateLimitValues()}
-        help="The maximum number of events to accept across this entire organization."
-        placeholder="e.g. 500"
-        onChange={this.props.onChange}
-        inputClassName="col-md-3"
-        formatLabel={value => {
-          return !value ? 'No Limit' : `${value.toLocaleString()} per hour`;
-        }}
-      />
-    );
-  }
-}
-
-const RateLimitView = createReactClass({
-  displayName: 'RateLimitView',
-
-  propTypes: {
-    organization: PropTypes.object.isRequired,
-  },
-
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    let projectLimit = this.props.organization.quota.projectLimit;
-    let accountLimit = this.props.organization.quota.accountLimit;
-
-    return {
-      activeNav: 'rate-limits',
-      currentProjectLimit: projectLimit,
-      savedProjectLimit: projectLimit,
-      currentAccountLimit: accountLimit,
-      savedAccountLimit: accountLimit,
-      saving: false,
-    };
-  },
-
-  onProjectLimitChange(value) {
-    this.setState({
-      currentProjectLimit: value,
-    });
-  },
-
-  onAccountLimitChange(value) {
-    this.setState({
-      currentAccountLimit: value,
-    });
-  },
-
-  onSubmit(e) {
-    e.preventDefault();
-
-    let loadingIndicator = IndicatorStore.add(t('Saving..'));
-
-    this.setState(
-      {
-        saving: true,
-        error: false,
-      },
-      () => {
-        this.api.request(`/organizations/${this.props.organization.slug}/`, {
-          method: 'PUT',
-          data: {
-            projectRateLimit: this.state.currentProjectLimit,
-            accountRateLimit: this.state.currentAccountLimit,
-          },
-          success: data => {
-            // TODO(dcramer): propagate this change correctly (how??)
-            IndicatorStore.remove(loadingIndicator);
-            let quota = data && data.quota;
-            this.props.organization.quota = quota;
-            this.setState({
-              saving: false,
-              savedProjectLimit: quota && quota.projectLimit,
-              savedAccountLimit: quota && quota.accountLimit,
-            });
-          },
-          error: () => {
-            this.setState({saving: false});
-            IndicatorStore.remove(loadingIndicator);
-            IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error', {
-              duration: 3000,
-            });
-          },
-        });
-      }
-    );
-  },
-
-  render() {
-    let {
-      currentProjectLimit,
-      savedProjectLimit,
-      currentAccountLimit,
-      savedAccountLimit,
-      saving,
-    } = this.state;
-    let {maxRate, maxRateInterval} = this.props.organization.quota;
-    let canSave =
-      (savedProjectLimit !== currentProjectLimit ||
-        savedAccountLimit !== currentAccountLimit) &&
-      !saving;
-
-    return (
-      <div className="box">
-        <div className="box-header">
-          <h3>{t('Rate Limits')}</h3>
-        </div>
-        <div className="box-content with-padding">
-          <form onSubmit={this.onSubmit} className="ref-rate-limit-editor">
-            <p>
-              Rate limits allow you to control how much data is stored for this
-              organization. When a rate is exceeded the system will begin discarding data
-              until the next interval.
-            </p>
-
-            <h5>Account Limit</h5>
-
-            {!maxRate ? (
-              <AccountLimit
-                value={currentAccountLimit}
-                onChange={this.onAccountLimitChange}
-              />
-            ) : (
-              <p>
-                Your account is limited to a maximum of {maxRate} events per{' '}
-                {maxRateInterval} seconds.
-              </p>
-            )}
-
-            <h5>Per-Project Limit</h5>
-
-            <RangeField
-              name="projectLimit"
-              value={savedProjectLimit || 100}
-              onChange={this.onProjectLimitChange}
-              step={5}
-              min={50}
-              max={100}
-              formatLabel={value => {
-                return value !== 100 ? `${value}%` : 'No Limit &mdash; 100%';
-              }}
-            />
-
-            <div className="help-block">
-              {t(
-                'The maximum percentage of your account limit an individual project can consume.'
-              )}
-            </div>
-
-            <div className="form-actions" style={{marginTop: 25}}>
-              <button type="submit" className="btn btn-primary" disabled={!canSave}>
-                {t('Apply Changes')}
-              </button>
-            </div>
-          </form>
-        </div>
-      </div>
-    );
-  },
-});
-
-export default RateLimitView;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
index 2f17b733a9..cb9bfc2039 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
@@ -2,6 +2,8 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
+import {t} from '../../../../../locale';
+
 class RangeSlider extends React.Component {
   static propTypes = {
     name: PropTypes.string.isRequired,
@@ -68,9 +70,8 @@ class RangeSlider extends React.Component {
     }
   }
 
-  handleInput = e => {
+  getActualValue = sliderValue => {
     let {allowedValues} = this.props;
-    let sliderValue = parseInt(e.target.value, 10);
     let value;
 
     if (allowedValues) {
@@ -80,12 +81,18 @@ class RangeSlider extends React.Component {
       value = sliderValue;
     }
 
+    return value;
+  };
+
+  handleInput = e => {
+    let sliderValue = parseInt(e.target.value, 10);
+
     this.setState({
       sliderValue,
     });
 
     if (this.props.onChange) {
-      // `value` is the allowed value if `allowedValues` is defined (i.e. not index)
+      let value = this.getActualValue(sliderValue);
       this.props.onChange(value, e);
     }
   };
@@ -101,7 +108,8 @@ class RangeSlider extends React.Component {
       min = 0;
       max = allowedValues.length - 1;
       actualValue = allowedValues[sliderValue];
-      displayValue = typeof actualValue !== 'undefined' ? actualValue : 'Invalid value';
+      displayValue =
+        typeof actualValue !== 'undefined' ? actualValue : t('Invalid value');
     }
 
     displayValue =
diff --git a/src/sentry/static/sentry/app/views/settings/organization/rateLimit/rateLimitView.jsx b/src/sentry/static/sentry/app/views/settings/organization/rateLimit/rateLimitView.jsx
index afe8c1e396..4642b830b8 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/rateLimit/rateLimitView.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/rateLimit/rateLimitView.jsx
@@ -1,227 +1,142 @@
-import {Box, Flex} from 'grid-emotion';
-import {withTheme} from 'emotion-theming';
+import {Box} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
-import styled from 'react-emotion';
 
-import ApiMixin from '../../../../mixins/apiMixin';
-import IndicatorStore from '../../../../stores/indicatorStore';
-import {RangeField} from '../../../../components/forms';
+import {t, tct} from '../../../../locale';
+import Field from '../../components/forms/field';
+import Form from '../../components/forms/form';
 import Panel from '../../components/panel';
+import PanelAlert from '../../components/panelAlert';
 import PanelBody from '../../components/panelBody';
 import PanelHeader from '../../components/panelHeader';
+import RangeField from '../../components/forms/rangeField';
 import SettingsPageHeader from '../../components/settingsPageHeader';
 import TextBlock from '../../components/text/textBlock';
-import {t} from '../../../../locale';
 
-class AccountLimit extends React.Component {
-  static propTypes = {
-    value: PropTypes.number,
-    onChange: PropTypes.func.isRequired,
-  };
-
-  getRateLimitValues = () => {
-    let steps = [];
-    let i = 0;
-    while (i <= 1000000) {
-      steps.push(i);
-      if (i < 10000) {
-        i += 1000;
-      } else if (i < 100000) {
-        i += 10000;
-      } else {
-        i += 100000;
-      }
+const getRateLimitValues = () => {
+  let steps = [];
+  let i = 0;
+  while (i <= 1000000) {
+    steps.push(i);
+    if (i < 10000) {
+      i += 1000;
+    } else if (i < 100000) {
+      i += 10000;
+    } else {
+      i += 100000;
     }
-    return steps;
-  };
-
-  render() {
-    return (
-      <RangeField
-        name="accountLimit"
-        min={0}
-        max={1000000}
-        value={this.props.value}
-        allowedValues={this.getRateLimitValues()}
-        help="The maximum number of events to accept across this entire organization."
-        placeholder="e.g. 500"
-        onChange={this.props.onChange}
-        inputClassName="col-md-3"
-        formatLabel={value => {
-          return !value ? 'No Limit' : `${value.toLocaleString()} per hour`;
-        }}
-      />
-    );
   }
-}
+  return steps;
+};
 
-const StyledTextBlock = styled(TextBlock)`
-  margin-bottom: 20px;
-`;
+// We can just generate this once
+const ACCOUNT_RATE_LIMIT_VALUES = getRateLimitValues();
 
-const OldFooter = withTheme(styled.div`
-  bordertop: 1px solid ${p => p.theme.borderLight};
-`);
-
-const RateLimitView = createReactClass({
-  displayName: 'RateLimitView',
-
-  propTypes: {
+class RateLimitView extends React.Component {
+  static propTypes = {
     organization: PropTypes.object.isRequired,
-  },
-
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    let projectLimit = this.props.organization.quota.projectLimit;
-    let accountLimit = this.props.organization.quota.accountLimit;
-
-    return {
-      activeNav: 'rate-limits',
-      currentProjectLimit: projectLimit,
-      savedProjectLimit: projectLimit,
-      currentAccountLimit: accountLimit,
-      savedAccountLimit: accountLimit,
-      saving: false,
-    };
-  },
-
-  onProjectLimitChange(value) {
-    this.setState({
-      currentProjectLimit: value,
-    });
-  },
-
-  onAccountLimitChange(value) {
-    this.setState({
-      currentAccountLimit: value,
-    });
-  },
-
-  onSubmit(e) {
-    e.preventDefault();
-
-    let loadingIndicator = IndicatorStore.add(t('Saving..'));
+  };
 
-    this.setState(
-      {
-        saving: true,
-        error: false,
-      },
-      () => {
-        this.api.request(`/organizations/${this.props.organization.slug}/`, {
-          method: 'PUT',
-          data: {
-            projectRateLimit: this.state.currentProjectLimit,
-            accountRateLimit: this.state.currentAccountLimit,
-          },
-          success: data => {
-            // TODO(dcramer): propagate this change correctly (how??)
-            IndicatorStore.remove(loadingIndicator);
-            this.props.organization.quota = data.quota;
-            this.setState({
-              saving: false,
-              savedProjectLimit: data.quota.projectLimit,
-              savedAccountLimit: data.quota.accountLimit,
-            });
-          },
-          error: () => {
-            this.setState({saving: false});
-            IndicatorStore.remove(loadingIndicator);
-            IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error', {
-              duration: 3000,
-            });
-          },
-        });
-      }
-    );
-  },
+  handleSubmitSucces = () => {
+    // TODO(billy): Update organization.quota in organizationStore with new values
+  };
 
   render() {
-    let {
-      currentProjectLimit,
-      savedProjectLimit,
-      currentAccountLimit,
-      savedAccountLimit,
-      saving,
-    } = this.state;
-    let {maxRate, maxRateInterval} = this.props.organization.quota;
-    let canSave =
-      (savedProjectLimit !== currentProjectLimit ||
-        savedAccountLimit !== currentAccountLimit) &&
-      !saving;
+    let {organization} = this.props;
+    let {quota} = organization;
+    let {maxRate, maxRateInterval, projectLimit, accountLimit} = quota;
+    let initialData = {
+      projectRateLimit: projectLimit || 100,
+      accountRateLimit: accountLimit,
+    };
 
     return (
       <div>
         <SettingsPageHeader title={t('Rate Limits')} />
 
         <Panel>
-          <PanelHeader disablePadding>
-            <Flex>
-              <Box px={2} flex="1">
-                {t('Adjust Limits')}
-              </Box>
-            </Flex>
+          <PanelHeader disablePadding isFlex>
+            <Box px={2} flex="1">
+              {t('Adjust Limits')}
+            </Box>
           </PanelHeader>
           <PanelBody>
-            <form onSubmit={this.onSubmit} className="ref-rate-limit-editor">
-              <Box p={2}>
-                <StyledTextBlock>
-                  Rate limits allow you to control how much data is stored for this
-                  organization. When a rate is exceeded the system will begin discarding
-                  data until the next interval.
-                </StyledTextBlock>
-
-                <h5>Account Limit</h5>
-
-                {!maxRate ? (
-                  <AccountLimit
-                    value={currentAccountLimit}
-                    onChange={this.onAccountLimitChange}
-                  />
-                ) : (
-                  <p>
-                    Your account is limited to a maximum of {maxRate} events per{' '}
-                    {maxRateInterval} seconds.
-                  </p>
-                )}
-
-                <h5>Per-Project Limit</h5>
-
+            <PanelAlert m={0} mb={0} type="info" icon="icon-circle-exclamation">
+              {t(`Rate limits allow you to control how much data is stored for this
+                organization. When a rate is exceeded the system will begin discarding
+                data until the next interval.`)}
+            </PanelAlert>
+
+            <Form
+              className="ref-rate-limit-editor"
+              saveOnBlur
+              allowUndo
+              apiMethod="PUT"
+              apiEndpoint={`/organizations/${organization.slug}/`}
+              initialData={initialData}
+            >
+              {!maxRate ? (
                 <RangeField
-                  name="projectLimit"
-                  value={savedProjectLimit || 100}
-                  onChange={this.onProjectLimitChange}
-                  step={5}
-                  min={50}
-                  max={100}
+                  name="accountRateLimit"
+                  label={t('Account Limit')}
+                  min={0}
+                  max={1000000}
+                  allowedValues={ACCOUNT_RATE_LIMIT_VALUES}
+                  help={t(
+                    'The maximum number of events to accept across this entire organization.'
+                  )}
+                  placeholder="e.g. 500"
                   formatLabel={value => {
-                    return value !== 100 ? `${value}%` : 'No Limit &mdash; 100%';
+                    return !value
+                      ? t('No Limit')
+                      : tct('[number] per hour', {
+                          number: value.toLocaleString(),
+                        });
                   }}
                 />
-
-                <div className="help-block">
-                  {t(
-                    'The maximum percentage of your account limit an individual project can consume.'
+              ) : (
+                <Field
+                  label={t('Account Limit')}
+                  help={t(
+                    'The maximum number of events to accept across this entire organization.'
                   )}
-                </div>
-              </Box>
-
-              <OldFooter>
-                <Box p={2}>
-                  <button type="submit" className="btn btn-primary" disabled={!canSave}>
-                    {t('Apply Changes')}
-                  </button>
-                </Box>
-              </OldFooter>
-            </form>
+                >
+                  <TextBlock css={{marginBottom: 0}}>
+                    {tct(
+                      'Your account is limited to a maximum of [maxRate] events per [maxRateInterval] seconds.',
+                      {
+                        maxRate,
+                        maxRateInterval,
+                      }
+                    )}
+                  </TextBlock>
+                </Field>
+              )}
+              <RangeField
+                name="projectRateLimit"
+                label={t('Per-Project Limit')}
+                help={t(
+                  'The maximum percentage of your account limit an individual project can consume.'
+                )}
+                step={5}
+                min={50}
+                max={100}
+                formatLabel={value => {
+                  return value !== 100 ? (
+                    `${value}%`
+                  ) : (
+                    <span
+                      dangerouslySetInnerHTML={{__html: `${t('No Limit')} &mdash; 100%`}}
+                    />
+                  );
+                }}
+              />
+            </Form>
           </PanelBody>
         </Panel>
       </div>
     );
-  },
-});
+  }
+}
 
 export default RateLimitView;
diff --git a/tests/js/spec/views/__snapshots__/organizationRateLimits.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationRateLimits.spec.jsx.snap
index f62493a214..b77dad2107 100644
--- a/tests/js/spec/views/__snapshots__/organizationRateLimits.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationRateLimits.spec.jsx.snap
@@ -1,381 +1,55 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
-exports[`OrganizationStats renders 1`] = `
+exports[`Organization Rate Limits renders with maxRate and maxRateInterval set 1`] = `
 .glamor-4 {
-  font-size: 14px;
-  box-shadow: inset 0 -1px 0;
-  margin: -20px 0 30px;
-}
-
-.glamor-2 {
-  box-sizing: border-box;
-  display: -webkit-box;
-  display: -webkit-flex;
-  display: -ms-flexbox;
-  display: flex;
-  -webkit-align-items: center;
-  -webkit-box-align: center;
-  -ms-flex-align: center;
-  align-items: center;
+  margin-bottom: 0;
 }
 
 .glamor-0 {
-  font-size: 20px;
-  font-weight: bold;
-  margin: 20px 0;
-  -webkit-flex: 1;
-  -ms-flex: 1;
-  flex: 1;
-}
-
-.glamor-6 {
   line-height: 1.5;
   margin-bottom: 30px;
+  margin-bottom: 0;
 }
 
-.glamor-21 {
-  background: #fff;
-  border: 1px solid;
-  margin-bottom: NaNpx;
-  position: relative;
-}
-
-.glamor-17 {
-  border-bottom: 1px solid;
-  border-radius: 0 0;
-  text-transform: uppercase;
-  font-size: 13px;
-  line-height: 1;
-  padding: 15px 20px;
-}
-
-.glamor-13 {
-  font-size: inherit;
-  text-transform: inherit;
-  margin: 0;
-}
-
-.glamor-11 {
-  font-size: 12px;
-  font-weight: 600;
-  text-transform: uppercase;
-  margin-bottom: 20px;
-  font-size: inherit;
-  text-transform: inherit;
-  margin: 0;
-}
-
-<OrganizationStats
-  location={
-    Object {
-      "pathame": "/mock-pathname/",
-      "query": Object {},
-    }
-  }
-  params={
-    Object {
-      "orgId": "org-slug",
-    }
-  }
+<TextBlock
+  className="glamor-4"
 >
-  <LazyLoad
-    component={[Function]}
-    orgStats={null}
-    orgTotal={null}
-    organization={
-      Object {
-        "access": Array [
-          "org:read",
-          "org:write",
-          "org:admin",
-          "project:read",
-          "project:write",
-          "project:admin",
-          "team:read",
-          "team:write",
-          "team:admin",
-        ],
-        "features": Array [],
-        "id": "3",
-        "name": "Organization Name",
-        "onboardingTasks": Array [],
-        "projects": Array [],
-        "slug": "org-slug",
-        "status": Object {
-          "id": "active",
-          "name": "active",
-        },
-        "teams": Array [],
-      }
-    }
-    projectMap={
-      Object {
-        "2": Object {
-          "allowedDomains": Array [
-            "example.com",
-            "https://example.com",
-          ],
-          "dataScrubber": false,
-          "dataScrubberDefaults": false,
-          "digestsMaxDelay": 60,
-          "digestsMinDelay": 5,
-          "id": "2",
-          "name": "Project Name",
-          "resolveAge": 48,
-          "safeFields": Array [
-            "business-email",
-            "company",
-          ],
-          "scrapeJavaScript": true,
-          "scrubIPAddresses": false,
-          "securityToken": "security-token",
-          "securityTokenHeader": "x-security-header",
-          "sensitiveFields": Array [
-            "creditcard",
-            "ssn",
-          ],
-          "slug": "project-slug",
-          "subjectTemplate": "[$project] \${tag:level}: $title",
-          "verifySSL": true,
-        },
-      }
-    }
-    projectTotals={null}
-    projectsError={false}
-    projectsLoading={true}
-    projectsRequestsPending={0}
-    querySince={1507624880}
-    queryUntil={1508229680}
-    rawOrgData={
-      Object {
-        "blacklisted": Array [],
-        "received": Array [],
-        "rejected": Array [],
-      }
-    }
-    rawProjectData={
-      Object {
-        "blacklisted": Array [],
-        "received": Array [],
-        "rejected": Array [],
-      }
-    }
-    statsError={false}
-    statsLoading={true}
-    statsRequestsPending={0}
+  <Component
+    className="glamor-0 glamor-1"
   >
-    <OrganizationStats
-      orgStats={null}
-      orgTotal={null}
-      organization={
-        Object {
-          "access": Array [
-            "org:read",
-            "org:write",
-            "org:admin",
-            "project:read",
-            "project:write",
-            "project:admin",
-            "team:read",
-            "team:write",
-            "team:admin",
-          ],
-          "features": Array [],
-          "id": "3",
-          "name": "Organization Name",
-          "onboardingTasks": Array [],
-          "projects": Array [],
-          "slug": "org-slug",
-          "status": Object {
-            "id": "active",
-            "name": "active",
-          },
-          "teams": Array [],
-        }
-      }
-      projectMap={
-        Object {
-          "2": Object {
-            "allowedDomains": Array [
-              "example.com",
-              "https://example.com",
-            ],
-            "dataScrubber": false,
-            "dataScrubberDefaults": false,
-            "digestsMaxDelay": 60,
-            "digestsMinDelay": 5,
-            "id": "2",
-            "name": "Project Name",
-            "resolveAge": 48,
-            "safeFields": Array [
-              "business-email",
-              "company",
-            ],
-            "scrapeJavaScript": true,
-            "scrubIPAddresses": false,
-            "securityToken": "security-token",
-            "securityTokenHeader": "x-security-header",
-            "sensitiveFields": Array [
-              "creditcard",
-              "ssn",
-            ],
-            "slug": "project-slug",
-            "subjectTemplate": "[$project] \${tag:level}: $title",
-            "verifySSL": true,
-          },
-        }
-      }
-      projectTotals={null}
-      projectsError={false}
-      projectsLoading={true}
-      projectsRequestsPending={0}
-      querySince={1507624880}
-      queryUntil={1508229680}
-      rawOrgData={
-        Object {
-          "blacklisted": Array [],
-          "received": Array [],
-          "rejected": Array [],
-        }
-      }
-      rawProjectData={
-        Object {
-          "blacklisted": Array [],
-          "received": Array [],
-          "rejected": Array [],
-        }
-      }
-      statsError={false}
-      statsLoading={true}
-      statsRequestsPending={0}
+    <div
+      className="glamor-0 glamor-1"
     >
-      <div>
-        <SettingsPageHeading
-          title="Organization Stats"
+      <span
+        key="8"
+      >
+        <span
+          key="0"
+        >
+          Your account is limited to a maximum of 
+        </span>
+        <span
+          key="2"
+        >
+          100
+        </span>
+        <span
+          key="3"
+        >
+           events per 
+        </span>
+        <span
+          key="5"
         >
-          <Wrapper>
-            <div
-              className="glamor-4 glamor-5"
-            >
-              <Flex
-                align="center"
-              >
-                <Base
-                  align="center"
-                  className="glamor-2"
-                >
-                  <div
-                    className="glamor-2"
-                    is={null}
-                  >
-                    <Title>
-                      <div
-                        className="glamor-0 glamor-1"
-                      >
-                        Organization Stats
-                      </div>
-                    </Title>
-                  </div>
-                </Base>
-              </Flex>
-            </div>
-          </Wrapper>
-        </SettingsPageHeading>
-        <div
-          className="row"
+          60
+        </span>
+        <span
+          key="6"
         >
-          <div
-            className="col-md-9"
-          >
-            <TextBlock>
-              <Component
-                className="glamor-6 glamor-7"
-              >
-                <div
-                  className="glamor-6 glamor-7"
-                >
-                  The chart below reflects events the system has received
-            across your entire organization. Events are broken down into
-            three categories: Accepted, Rate Limited, and Filtered. Rate
-            Limited events are entries that the system threw away due to quotas
-            being hit, and Filtered events are events that were blocked
-            due to your inbound data filter rules.
-                </div>
-              </Component>
-            </TextBlock>
-          </div>
-        </div>
-        <div>
-          <LoadingIndicator>
-            <div
-              className="loading"
-            >
-              <div
-                className="loading-indicator"
-              />
-              <div
-                className="loading-message"
-              />
-            </div>
-          </LoadingIndicator>
-        </div>
-        <Panel>
-          <div
-            className="glamor-21 glamor-22"
-          >
-            <PanelHeader>
-              <StyledPanelHeader>
-                <Component
-                  className="glamor-17 glamor-18"
-                >
-                  <div
-                    className="glamor-17 glamor-18"
-                  >
-                    <StyledPanelHeading>
-                      <Component
-                        className="glamor-13 glamor-10"
-                      >
-                        <PanelHeading
-                          className="glamor-13 glamor-10"
-                        >
-                          <div
-                            className="glamor-10 glamor-11 glamor-12"
-                          >
-                            Events by Project
-                          </div>
-                        </PanelHeading>
-                      </Component>
-                    </StyledPanelHeading>
-                  </div>
-                </Component>
-              </StyledPanelHeader>
-            </PanelHeader>
-            <PanelBody
-              direction="column"
-              disablePadding={true}
-              flex={false}
-            >
-              <div
-                className=""
-              >
-                <LoadingIndicator>
-                  <div
-                    className="loading"
-                  >
-                    <div
-                      className="loading-indicator"
-                    />
-                    <div
-                      className="loading-message"
-                    />
-                  </div>
-                </LoadingIndicator>
-              </div>
-            </PanelBody>
-          </div>
-        </Panel>
-      </div>
-    </OrganizationStats>
-  </LazyLoad>
-</OrganizationStats>
+           seconds.
+        </span>
+      </span>
+    </div>
+  </Component>
+</TextBlock>
 `;
diff --git a/tests/js/spec/views/organizationRateLimits.spec.jsx b/tests/js/spec/views/organizationRateLimits.spec.jsx
index 745296c9f3..dfc4f86119 100644
--- a/tests/js/spec/views/organizationRateLimits.spec.jsx
+++ b/tests/js/spec/views/organizationRateLimits.spec.jsx
@@ -1,32 +1,120 @@
 import React from 'react';
 import {mount} from 'enzyme';
-import OrganizationStats from 'app/views/organizationStats';
 
-describe('OrganizationStats', function() {
+import {Client} from 'app/api';
+import {ThemeProvider} from 'emotion-theming';
+import theme from 'app/utils/theme';
+import OrganizationRateLimits from 'app/views/settings/organization/rateLimit/rateLimitView';
+
+const ENDPOINT = '/organizations/org-slug/';
+
+describe('Organization Rate Limits', function() {
+  const organization = {
+    ...TestStubs.Organization(),
+    quota: {
+      projectLimit: 75,
+      accountLimit: 70000,
+    },
+  };
+
+  const creator = props => (
+    <ThemeProvider theme={theme}>
+      <OrganizationRateLimits organization={organization} {...props} />
+    </ThemeProvider>
+  );
+
   beforeEach(function() {
-    MockApiClient.clearMockResponses();
-    MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/projects/',
-      method: 'GET',
-      body: [TestStubs.Project()],
-    });
-    MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/stats/',
-      method: 'GET',
-      body: [],
-    });
+    Client.clearMockResponses();
+  });
+
+  it('renders with initialData', function() {
+    let wrapper = mount(creator(), TestStubs.routerContext());
+
+    expect(
+      wrapper
+        .find('RangeSlider')
+        .first()
+        .prop('value')
+    ).toBe(70000);
+    expect(
+      wrapper
+        .find('RangeSlider')
+        .at(1)
+        .prop('value')
+    ).toBe(75);
+  });
+
+  it('renders with maxRate and maxRateInterval set', function() {
+    const org = {
+      ...organization,
+      quota: {
+        maxRate: 100,
+        maxRateInterval: 60,
+      },
+    };
+    let wrapper = mount(creator({organization: org}), TestStubs.routerContext());
+
+    expect(wrapper.find('RangeSlider')).toHaveLength(1);
+
+    expect(wrapper.find('Form TextBlock')).toMatchSnapshot();
   });
 
-  it('renders', function(done) {
-    let wrapper = mount(
-      <OrganizationStats params={{orgId: 'org-slug'}} location={TestStubs.location()} />,
-      TestStubs.routerContext()
+  it('can change Account Rate Limit', function() {
+    let mock = Client.addMockResponse({
+      url: ENDPOINT,
+      method: 'PUT',
+      statusCode: 200,
+    });
+
+    let wrapper = mount(creator(), TestStubs.routerContext());
+
+    expect(mock).not.toHaveBeenCalled();
+
+    // Change Account Limit
+    // Remember value needs to be an index of allowedValues for account limit
+    wrapper
+      .find('RangeSlider Slider')
+      .first()
+      .simulate('input', {target: {value: 11}})
+      .simulate('mouseUp', {target: {value: 11}});
+
+    expect(mock).toHaveBeenCalledWith(
+      ENDPOINT,
+      expect.objectContaining({
+        method: 'PUT',
+        data: {
+          accountRateLimit: 20000,
+        },
+      })
     );
+  });
 
-    window.setImmediate(() => {
-      wrapper.update();
-      expect(wrapper).toMatchSnapshot();
-      done();
+  it('can change Project Rate Limit', function() {
+    let mock = Client.addMockResponse({
+      url: ENDPOINT,
+      method: 'PUT',
+      statusCode: 200,
     });
+
+    let wrapper = mount(creator(), TestStubs.routerContext());
+
+    expect(mock).not.toHaveBeenCalled();
+
+    // Change Project Rate Limit
+    wrapper
+      .find('RangeSlider Slider')
+      .at(1)
+      .simulate('input', {target: {value: 100}})
+      .simulate('mouseUp', {target: {value: 100}});
+
+    expect(mock).toHaveBeenCalledWith(
+      ENDPOINT,
+      expect.objectContaining({
+        method: 'PUT',
+        data: {
+          projectRateLimit: 100,
+        },
+      })
+    );
   });
 });
