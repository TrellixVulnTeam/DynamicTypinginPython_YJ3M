commit 6321d68e3d17802e4aff68903a5fa68634ef96b1
Author: Dora <dora.l.chan@gmail.com>
Date:   Tue Jan 28 09:46:30 2020 -0800

    fix table edit (#16652)

diff --git a/src/sentry/static/sentry/app/components/gridEditable/gridHeadCell.tsx b/src/sentry/static/sentry/app/components/gridEditable/gridHeadCell.tsx
index 04ed17fb40..34daf17d96 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/gridHeadCell.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/gridHeadCell.tsx
@@ -6,7 +6,6 @@ import {
   GridHeadCell as GridHeadCellWrapper,
   GridHeadCellButton,
   GridHeadCellButtonHover,
-  GridHeadCellButtonHoverBackground,
   GridHeadCellButtonHoverButton,
   GridHeadCellButtonHoverDraggable,
 } from './styles';
@@ -80,7 +79,7 @@ class GridHeadCell<Column extends GridColumnHeader> extends React.Component<
     this.props.actions.onDragStart(event, fromColumn);
   };
 
-  renderButtonHoverDraggable(children: React.ReactNode) {
+  renderButtonHoverDraggable() {
     const {isHovering} = this.state;
     const {isEditing, isColumnDragging} = this.props;
 
@@ -93,8 +92,6 @@ class GridHeadCell<Column extends GridColumnHeader> extends React.Component<
         {/* Ensure that background is always at the top. The background must be
             independent because it has <100% opacity, but the elements on top
             of it must be 100% opacity */}
-        <GridHeadCellButtonHoverBackground>{children}</GridHeadCellButtonHoverBackground>
-
         <GridHeadCellButtonHover>
           <GridHeadCellButtonHoverDraggable
             src="icon-grabbable"
@@ -133,7 +130,7 @@ class GridHeadCell<Column extends GridColumnHeader> extends React.Component<
           onMouseLeave={() => this.setHovering(false)}
         >
           {children}
-          {this.renderButtonHoverDraggable(children)}
+          {this.renderButtonHoverDraggable()}
         </GridHeadCellButton>
       </GridHeadCellWrapper>
     );
diff --git a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
index 5f26e9dbc9..bd26979143 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
@@ -128,13 +128,14 @@ export const GridRow = styled('tr')`
 export const GridHead = styled('thead')`
   display: contents;
 `;
+
 export const GridHeadCell = styled('th')`
   /* By default, a grid item cannot be smaller than the size of its content.
      We override this by setting min-width to be 0. */
   position: relative; /* Used by GridResizer */
   min-width: 0;
   height: ${GRID_HEAD_ROW_HEIGHT}px;
-
+  border-right: 1px solid transparent;
   background-color: ${p => p.theme.offWhite};
   border-bottom: 1px solid ${p => p.theme.borderDark};
 
@@ -146,35 +147,30 @@ export const GridHeadCell = styled('th')`
     border-top-right-radius: ${p => p.theme.borderRadius};
     border-right: none;
   }
+
   &:hover {
-    border-right: 1px solid ${p => p.theme.borderDark};
+    border-color: ${p => p.theme.borderDark};
   }
 `;
+
 export const GridHeadCellButton = styled('div')<GridEditableProps>`
-  min-width: 24px; /* Ensure that edit/remove buttons are never hidden */
   display: block;
+  min-width: 24px;
   margin: ${space(0.5)};
   padding: ${space(1.5)};
   border-radius: 2px;
-
-  color: ${p => {
-    if (p.isDragging) {
-      return p.theme.offWhite2;
-    }
-
-    return p.theme.gray2;
-  }};
-  font-size: 13px;
+  font-size: 12px;
   font-weight: 600;
   line-height: 1;
   text-transform: uppercase;
   white-space: nowrap;
   text-overflow: ellipsis;
   overflow: hidden;
+  user-select: none;
 
-  background: ${p => {
+  background-color: ${p => {
     if (p.isDragging) {
-      return p.theme.gray2;
+      return p.theme.purple;
     }
 
     if (p.isEditing) {
@@ -184,38 +180,21 @@ export const GridHeadCellButton = styled('div')<GridEditableProps>`
     return 'none';
   }};
 
-  a {
-    color: ${p => {
-      if (p.isDragging) {
-        return p.theme.offWhite2;
-      }
-
-      return p.theme.gray2;
-    }};
-  }
-
-  &:hover,
-  &:active {
-    color: ${p => {
-      if (p.isDragging) {
-        return p.theme.offWhite2;
-      }
+  color: ${p => {
+    if (p.isDragging) {
+      return p.theme.offWhite2;
+    }
 
+    if (p.isEditing) {
       return p.theme.gray2;
-    }};
+    }
 
-    a {
-      color: ${p => {
-        if (p.isDragging) {
-          return p.theme.offWhite2;
-        }
+    return p.theme.gray3;
+  }};
 
-        return p.theme.gray2;
-      }};
-    }
+  a {
+    color: inherit;
   }
-
-  user-select: none;
 `;
 
 /**
@@ -223,65 +202,30 @@ export const GridHeadCellButton = styled('div')<GridEditableProps>`
  * move the columns. They are expected to be draggable.
  */
 export const GridHeadCellButtonHover = styled('div')<GridEditableProps>`
-  position: absolute;
-  top: 0;
-  left: 0;
   display: flex;
   justify-content: space-between;
   align-items: center;
-  width: 100%;
-  height: 100%;
-
-  color: ${p => p.theme.gray3};
-
-  &:hover {
-    color: ${p => p.theme.gray4};
-  }
-  &:active {
-    color: ${p => p.theme.gray5};
-  }
-`;
-export const GridHeadCellButtonHoverBackground = styled(GridHeadCellButton)`
   position: absolute;
-  top: 0;
-  left: 0;
-  display: block;
-  width: 100%;
-  height: 100%;
-
-  background-color: ${p => p.theme.offWhite2};
-  margin: 0;
-
-  a,
-  &:hover a,
-  &:active a {
-    color: ${p => p.theme.gray1} !important;
-  }
+  left: ${space(0.5)};
+  right: ${space(0.5)};
+  top: ${space(0.5)};
+  bottom: ${space(0.5)};
 `;
 
 export const GridHeadCellButtonHoverButton = styled('div')`
   display: inline-flex;
   justify-content: center;
   align-items: center;
-  width: 20px;
-  height: 20px;
-
-  margin: ${space(0.25)};
-  border: 2px solid ${p => p.theme.gray3};
-  border-radius: ${p => p.theme.borderRadius};
+  width: 24px;
+  height: 24px;
+  margin: 0 ${space(0.25)};
+  color: ${p => p.theme.gray4};
+  border: 2px solid ${p => p.theme.gray4};
   background-color: ${p => p.theme.offWhite2};
-  opacity: 1;
-
-  font-size: 14px;
+  border-radius: ${p => p.theme.borderRadius};
   cursor: pointer;
-
-  &:hover {
-    border: 2px solid ${p => p.theme.gray4};
-  }
-  &:active {
-    border: 2px solid ${p => p.theme.gray5};
-  }
 `;
+
 export const GridHeadCellButtonHoverDraggable = styled(InlineSvg)`
   cursor: grab;
   user-select: none;
@@ -357,7 +301,7 @@ export const GridStatusErrorAlert = styled(Alert)`
 export const GridResizer = styled('div')<{dataRows: number; isLast?: boolean}>`
   position: absolute;
   top: 0px;
-  right: ${p => (p.isLast ? '0px' : '-4px')};
+  right: ${p => (p.isLast ? '0px' : '-5px')};
   width: ${p => (p.isLast ? '6px' : '9px')};
 
   height: ${p => GRID_HEAD_ROW_HEIGHT + p.dataRows * GRID_BODY_ROW_HEIGHT}px;
