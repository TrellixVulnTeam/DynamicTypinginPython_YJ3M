commit 83a3ffb1a946efdd0b914bd90fdd147118bdf95f
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Mon Jun 29 12:09:32 2020 +0200

    feat(relay): Add relay dialogs (#19274)

diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 3641185406..79871482fa 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -90,6 +90,14 @@ export type OrganizationSummary = {
   slug: string;
 };
 
+export type Relay = {
+  publicKey: string;
+  name: string;
+  created?: string;
+  lastModified?: string;
+  description?: string;
+};
+
 /**
  * Detailed organization (e.g. when requesting details for a single org)
  *
@@ -122,9 +130,9 @@ export type LightWeightOrganization = OrganizationSummary & {
   allowSharedIssues: boolean;
   dataScrubberDefaults: boolean;
   dataScrubber: boolean;
-  role?: string;
   onboardingTasks: OnboardingTaskStatus[];
-  trustedRelays: string[];
+  trustedRelays: Relay[];
+  role?: string;
 };
 
 /**
diff --git a/src/sentry/static/sentry/app/views/settings/organizationRelays/index.tsx b/src/sentry/static/sentry/app/views/settings/organizationRelays/index.tsx
index 1d65b7fb69..9fbbe66133 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationRelays/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationRelays/index.tsx
@@ -10,7 +10,7 @@ import Relays from './relays';
 
 const OrganizationRelays = ({organization, ...props}: Relays['props']) => (
   <Feature
-    features={['relay-config']}
+    features={['relay']}
     organization={organization}
     renderDisabled={() => (
       <FeatureDisabled
diff --git a/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/add.tsx b/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/add.tsx
new file mode 100644
index 0000000000..0477266a0c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/add.tsx
@@ -0,0 +1,18 @@
+import {t} from 'app/locale';
+
+import ModalManager from './modalManager';
+
+class Add extends ModalManager {
+  getTitle() {
+    return t('New Relay Key');
+  }
+
+  getData() {
+    const {savedRelays} = this.props;
+    const trustedRelays = [...savedRelays, this.state.values];
+
+    return {trustedRelays};
+  }
+}
+
+export default Add;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/edit.tsx b/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/edit.tsx
new file mode 100644
index 0000000000..2db86430ee
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/edit.tsx
@@ -0,0 +1,44 @@
+import {t} from 'app/locale';
+import {Relay} from 'app/types';
+
+import ModalManager from './modalManager';
+
+type Props = {
+  relay: Relay;
+} & ModalManager['props'];
+
+type State = ModalManager['state'];
+
+class Edit extends ModalManager<Props, State> {
+  getDefaultState() {
+    return {
+      ...super.getDefaultState(),
+      values: {
+        name: this.props.relay.name,
+        publicKey: this.props.relay.publicKey,
+        description: this.props.relay.description || '',
+      },
+      disables: {publicKey: true},
+    };
+  }
+
+  getTitle() {
+    return t('Edit Relay Key');
+  }
+
+  getData() {
+    const {savedRelays} = this.props;
+    const updatedRelay = this.state.values;
+
+    const trustedRelays = savedRelays.map(relay => {
+      if (relay.publicKey === updatedRelay.publicKey) {
+        return updatedRelay;
+      }
+      return relay;
+    });
+
+    return {trustedRelays};
+  }
+}
+
+export default Edit;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/form.tsx b/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/form.tsx
new file mode 100644
index 0000000000..d305f4874c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/form.tsx
@@ -0,0 +1,115 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import QuestionTooltip from 'app/components/questionTooltip';
+import Input from 'app/views/settings/components/forms/controls/input';
+import Textarea from 'app/views/settings/components/forms/controls/textarea';
+import Field from 'app/views/settings/components/forms/field';
+import TextCopyInput from 'app/views/settings/components/forms/textCopyInput';
+import space from 'app/styles/space';
+import {Relay} from 'app/types';
+
+type FormField = keyof Pick<Relay, 'name' | 'publicKey' | 'description'>;
+type Values = Record<FormField, string>;
+
+type Props = {
+  values: Values;
+  errors: Partial<Values>;
+  disables: Partial<Record<FormField, boolean>>;
+  onValidate: (field: FormField) => () => void;
+  onValidateKey: () => void;
+  onChange: (field: FormField, value: string) => void;
+};
+
+const Form = ({values, onChange, errors, onValidate, disables, onValidateKey}: Props) => {
+  const handleChange = (field: FormField) => (
+    event: React.ChangeEvent<HTMLInputElement>
+  ) => {
+    onChange(field, event.target.value);
+  };
+
+  // code below copied from src/sentry/static/sentry/app/views/organizationIntegrations/SplitInstallationIdModal.tsx
+  // TODO: fix the common method selectText
+  const onCopy = (value: string) => async () =>
+    //This hack is needed because the normal copying methods with TextCopyInput do not work correctly
+    await navigator.clipboard.writeText(value);
+
+  return (
+    <React.Fragment>
+      <Field
+        flexibleControlStateSize
+        label={t('Display Name')}
+        error={errors.name}
+        inline={false}
+        stacked
+      >
+        <Input
+          type="text"
+          name="name"
+          onChange={handleChange('name')}
+          value={values.name}
+          onBlur={onValidate('name')}
+          disabled={disables.name}
+        />
+      </Field>
+
+      {disables.publicKey ? (
+        <Field flexibleControlStateSize label={t('Relay Key')} inline={false} stacked>
+          <TextCopyInput onCopy={onCopy(values.publicKey)}>
+            {values.publicKey}
+          </TextCopyInput>
+        </Field>
+      ) : (
+        <Field
+          flexibleControlStateSize
+          label={
+            <Label>
+              <div>{t('Relay Key')}</div>
+              <QuestionTooltip
+                position="top"
+                size="sm"
+                title={t(
+                  'Only enter the Relay Key value from your credentials file. Never share the Secret key with Sentry or any third party'
+                )}
+              />
+            </Label>
+          }
+          error={errors.publicKey}
+          inline={false}
+          stacked
+        >
+          <Input
+            type="text"
+            name="publicKey"
+            onChange={handleChange('publicKey')}
+            value={values.publicKey}
+            onBlur={onValidateKey}
+          />
+        </Field>
+      )}
+      <Field
+        flexibleControlStateSize
+        label={t('Description (Optional)')}
+        inline={false}
+        stacked
+      >
+        <Textarea
+          name="description"
+          onChange={handleChange('description')}
+          value={values.description}
+          disabled={disables.description}
+        />
+      </Field>
+    </React.Fragment>
+  );
+};
+
+export default Form;
+
+const Label = styled('div')`
+  display: grid;
+  grid-gap: ${space(1)};
+  grid-template-columns: max-content max-content;
+  align-items: center;
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/handleXhrErrorResponse.tsx b/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/handleXhrErrorResponse.tsx
new file mode 100644
index 0000000000..5f40b5b4a7
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/handleXhrErrorResponse.tsx
@@ -0,0 +1,79 @@
+import {t} from 'app/locale';
+
+type Error = {
+  type:
+    | 'unknown'
+    | 'bad-structure'
+    | 'missing-name'
+    | 'empty-name'
+    | 'missing-key'
+    | 'invalid-key'
+    | 'duplicated-key';
+  message: string;
+};
+
+type XhrError = {
+  responseJSON?: {
+    trustedRelays: Array<string>;
+  };
+};
+
+function handleError(error: XhrError): Error {
+  const errorMessage = error.responseJSON?.trustedRelays[0];
+
+  if (!errorMessage) {
+    return {
+      type: 'unknown',
+      message: t('An unknown error occurred while saving Relay public key.'),
+    };
+  }
+
+  if (errorMessage === 'Bad structure received for Trusted Relays') {
+    return {
+      type: 'bad-structure',
+      message: t('An invalid structure was sent.'),
+    };
+  }
+
+  if (errorMessage === 'Relay key info with missing name in Trusted Relays') {
+    return {
+      type: 'missing-name',
+      message: t('Field Required'),
+    };
+  }
+
+  if (errorMessage === 'Relay key info with empty name in Trusted Relays') {
+    return {
+      type: 'empty-name',
+      message: t('Invalid Field'),
+    };
+  }
+
+  if (errorMessage.startsWith('Missing public key for Relay key info with name:')) {
+    return {
+      type: 'missing-key',
+      message: t('Field Required'),
+    };
+  }
+
+  if (errorMessage.startsWith('Invalid public key for relay key info with name:')) {
+    return {
+      type: 'invalid-key',
+      message: t('Invalid Relay key'),
+    };
+  }
+
+  if (errorMessage.startsWith('Duplicated key in Trusted Relays:')) {
+    return {
+      type: 'duplicated-key',
+      message: t('Relay key already taken'),
+    };
+  }
+
+  return {
+    type: 'unknown',
+    message: t('An unknown error occurred while saving Relay public key.'),
+  };
+}
+
+export default handleError;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/modal.tsx b/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/modal.tsx
new file mode 100644
index 0000000000..7f877b406b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/modal.tsx
@@ -0,0 +1,39 @@
+import React from 'react';
+
+import {ModalRenderProps} from 'app/actionCreators/modal';
+import Button from 'app/components/button';
+import ButtonBar from 'app/components/buttonBar';
+import {t} from 'app/locale';
+
+type Props = {
+  onSave: () => void;
+  title: string;
+  content: React.ReactElement;
+  disabled: boolean;
+} & ModalRenderProps;
+
+const Modal = ({
+  title,
+  onSave,
+  content,
+  disabled,
+  Header,
+  Body,
+  Footer,
+  closeModal,
+}: Props) => (
+  <React.Fragment>
+    <Header closeButton>{title}</Header>
+    <Body>{content}</Body>
+    <Footer>
+      <ButtonBar gap={1.5}>
+        <Button onClick={closeModal}>{t('Cancel')}</Button>
+        <Button onClick={onSave} disabled={disabled} priority="primary">
+          {t('Save Key')}
+        </Button>
+      </ButtonBar>
+    </Footer>
+  </React.Fragment>
+);
+
+export default Modal;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/modalManager.tsx b/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/modalManager.tsx
new file mode 100644
index 0000000000..1b4ac06c9a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organizationRelays/modals/modalManager.tsx
@@ -0,0 +1,228 @@
+import React from 'react';
+import omit from 'lodash/omit';
+import isEqual from 'lodash/isEqual';
+
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {Client} from 'app/api';
+import {t} from 'app/locale';
+import {ModalRenderProps} from 'app/actionCreators/modal';
+import {Organization, Relay} from 'app/types';
+
+import Form from './form';
+import Modal from './modal';
+import handleXhrErrorResponse from './handleXhrErrorResponse';
+
+type FormProps = React.ComponentProps<typeof Form>;
+type Values = FormProps['values'];
+
+type Props = ModalRenderProps & {
+  onSubmitSuccess: (organization: Organization) => void;
+  orgSlug: Organization['slug'];
+  api: Client;
+  savedRelays: Array<Relay>;
+};
+
+type State = {
+  values: Values;
+  requiredValues: Array<keyof Values>;
+  disables: FormProps['disables'];
+  errors: FormProps['errors'];
+  isFormValid: boolean;
+  title: string;
+};
+
+class DialogManager<
+  P extends Props = Props,
+  S extends State = State
+> extends React.Component<P, S> {
+  constructor(props: P) {
+    super(props);
+    this.handleValidate = this.handleValidate.bind(this);
+    this.handleChange = this.handleChange.bind(this);
+    this.handleValidateKey = this.handleValidateKey.bind(this);
+    this.handleSave = this.handleSave.bind(this);
+    this.state = this.getDefaultState() as Readonly<S>;
+  }
+
+  componentDidMount() {
+    this.handleValidateForm();
+  }
+
+  componentDidUpdate(_prevProps: Props, prevState: S) {
+    if (!isEqual(prevState.values, this.state.values)) {
+      this.handleValidateForm();
+    }
+    if (
+      !isEqual(prevState.errors, this.state.errors) &&
+      Object.keys(this.state.errors).length > 0
+    ) {
+      this.setValidForm(false);
+    }
+  }
+
+  getDefaultState(): Readonly<S> {
+    return {
+      values: {name: '', publicKey: '', description: ''},
+      requiredValues: ['name', 'publicKey'],
+      errors: {},
+      disables: {},
+      isFormValid: false,
+      title: this.getTitle(),
+    } as Readonly<S>;
+  }
+
+  getTitle(): string {
+    return '';
+  }
+
+  getData(): {trustedRelays: Array<Relay>} {
+    // Child has to implement this
+    throw new Error('Not implemented');
+  }
+
+  setValidForm(isFormValid: boolean) {
+    this.setState({isFormValid});
+  }
+
+  clearError<F extends keyof Values>(field: F) {
+    this.setState(prevState => ({
+      errors: omit(prevState.errors, field),
+    }));
+  }
+
+  convertErrorXhrResponse(error: ReturnType<typeof handleXhrErrorResponse>) {
+    switch (error.type) {
+      case 'invalid-key':
+      case 'missing-key':
+        this.setState(prevState => ({
+          errors: {...prevState.errors, publicKey: error.message},
+        }));
+        break;
+      case 'empty-name':
+      case 'missing-name':
+        this.setState(prevState => ({
+          errors: {...prevState.errors, name: error.message},
+        }));
+        break;
+      default:
+        addErrorMessage(error.message);
+    }
+  }
+
+  handleChange<F extends keyof Values>(field: F, value: Values[F]) {
+    this.setState(prevState => ({
+      values: {
+        ...prevState.values,
+        [field]: value,
+      },
+      errors: omit(prevState.errors, field),
+    }));
+  }
+
+  async handleSave() {
+    const {onSubmitSuccess, closeModal, orgSlug, api} = this.props;
+
+    const trustedRelays = this.getData().trustedRelays.map(trustedRelay =>
+      omit(trustedRelay, ['created', 'lastModified'])
+    );
+
+    try {
+      const response = await api.requestPromise(`/organizations/${orgSlug}/`, {
+        method: 'PUT',
+        data: {trustedRelays},
+      });
+      onSubmitSuccess(response);
+      closeModal();
+    } catch (error) {
+      this.convertErrorXhrResponse(handleXhrErrorResponse(error));
+    }
+  }
+
+  handleValidateForm() {
+    const {values, requiredValues, errors} = this.state;
+
+    const isFormValid = requiredValues.every(
+      requiredValue =>
+        !!values[requiredValue].replace(/\s/g, '') && !errors[requiredValue]
+    );
+
+    this.setValidForm(isFormValid);
+  }
+
+  handleValidate<F extends keyof Values>(field: F) {
+    return () => {
+      const isFieldValueEmpty = !this.state.values[field].replace(/\s/g, '');
+
+      const fieldErrorAlreadyExist = this.state.errors[field];
+
+      if (isFieldValueEmpty && fieldErrorAlreadyExist) {
+        return;
+      }
+
+      if (isFieldValueEmpty && !fieldErrorAlreadyExist) {
+        this.setState(prevState => ({
+          errors: {
+            ...prevState.errors,
+            [field]: t('Field Required'),
+          },
+        }));
+        return;
+      }
+
+      if (!isFieldValueEmpty && fieldErrorAlreadyExist) {
+        this.clearError(field);
+      }
+    };
+  }
+
+  handleValidateKey() {
+    const {savedRelays} = this.props;
+    const {values, errors} = this.state;
+    const isKeyAlreadyTaken = savedRelays.find(
+      savedRelay => savedRelay.publicKey === values.publicKey
+    );
+
+    if (isKeyAlreadyTaken && !errors.publicKey) {
+      this.setState({
+        errors: {
+          ...errors,
+          publicKey: t('Relay key already taken'),
+        },
+      });
+      return;
+    }
+
+    if (errors.publicKey) {
+      this.setState({
+        errors: omit(errors, 'publicKey'),
+      });
+    }
+
+    this.handleValidate('publicKey')();
+  }
+
+  render() {
+    const {values, errors, title, isFormValid, disables} = this.state;
+
+    return (
+      <Modal
+        {...this.props}
+        title={title}
+        onSave={this.handleSave}
+        disabled={!isFormValid}
+        content={
+          <Form
+            onChange={this.handleChange}
+            onValidate={this.handleValidate}
+            onValidateKey={this.handleValidateKey}
+            errors={errors}
+            values={values}
+            disables={disables}
+          />
+        }
+      />
+    );
+  }
+}
+
+export default DialogManager;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationRelays/relays.tsx b/src/sentry/static/sentry/app/views/settings/organizationRelays/relays.tsx
index c0f2ce965e..31f5063978 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationRelays/relays.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationRelays/relays.tsx
@@ -1,31 +1,34 @@
 import React from 'react';
 import {RouteComponentProps} from 'react-router/lib/Router';
 import styled from '@emotion/styled';
+import omit from 'lodash/omit';
 
-import {Panel, PanelBody, PanelHeader, PanelAlert} from 'app/components/panels';
+import theme from 'app/utils/theme';
+import {openModal} from 'app/actionCreators/modal';
+import {PanelTable} from 'app/components/panels';
 import {t, tct} from 'app/locale';
 import AsyncComponent from 'app/components/asyncComponent';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import {Organization} from 'app/types';
+import {Organization, Relay} from 'app/types';
 import ExternalLink from 'app/components/links/externalLink';
-import space from 'app/styles/space';
 import Button from 'app/components/button';
-import {IconDelete} from 'app/icons';
+import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
+import TextBlock from 'app/views/settings/components/text/textBlock';
+import TextOverflow from 'app/components/textOverflow';
+import Clipboard from 'app/components/clipboard';
+import {IconAdd, IconCopy, IconEdit, IconDelete} from 'app/icons';
+import DateTime from 'app/components/dateTime';
+import space from 'app/styles/space';
+import {defined} from 'app/utils';
+import Tooltip from 'app/components/tooltip';
+import QuestionTooltip from 'app/components/questionTooltip';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
 
-import Time from './time';
+import Add from './modals/add';
+import Edit from './modals/edit';
 
 const RELAY_DOCS_LINK = 'https://getsentry.github.io/relay/';
 
-type Relay = {
-  public_key: string;
-  name: string;
-  created: string;
-  first_seen: string;
-  last_seen: string | null;
-  last_modified?: string;
-  description?: string;
-};
-
 type Props = {
   organization: Organization;
 } & RouteComponentProps<{orgId: string}, {}>;
@@ -34,102 +37,163 @@ type State = AsyncComponent['state'] & {
   relays: Array<Relay>;
 };
 
-const relaysMock: Array<Relay> = [
-  {
-    public_key: '1:bb:6e:af:66:b4:38:e0:62:83:62:15:22:7',
-    name: 'First key',
-    description: 'optional description for the key',
-    first_seen: '2020-02-07T15:17:00Z',
-    last_seen: '2020-02-07T15:17:00Z',
-    created: '2020-02-07T15:17:00Z',
-  },
-  {
-    public_key: '2:bb:6e:af:66:b4:38:e0:62:83:62:15:22:7',
-    name: 'Second key',
-    description: 'optional description for the key',
-    first_seen: '2020-02-07T15:17:00Z',
-    last_seen: '2020-02-07T15:17:00Z',
-    last_modified: '2020-02-07T15:17:00Z',
-    created: '2020-02-07T15:17:00Z',
-  },
-];
-
 class Relays extends AsyncComponent<Props, State> {
+  constructor(props: Props, context: AsyncComponent['context']) {
+    super(props, context);
+    this.handleOpenAddDialog = this.handleOpenAddDialog.bind(this);
+  }
+
   getDefaultState() {
     return {
       ...super.getDefaultState(),
-      relays: relaysMock,
+      relays: this.props.organization.trustedRelays,
+    };
+  }
+
+  setRelays(trustedRelays: Array<Relay>) {
+    this.setState({relays: trustedRelays});
+  }
+
+  handleDelete(publicKey: Relay['publicKey']) {
+    return async () => {
+      const {relays} = this.state;
+
+      const trustedRelays = relays
+        .filter(relay => relay.publicKey !== publicKey)
+        .map(relay => omit(relay, ['created', 'lastModified']));
+
+      try {
+        const response = await this.api.requestPromise(
+          `/organizations/${this.props.organization.slug}/`,
+          {
+            method: 'PUT',
+            data: {trustedRelays},
+          }
+        );
+        addSuccessMessage(t('Successfully deleted Relay public key'));
+        this.setRelays(response.trustedRelays);
+      } catch {
+        addErrorMessage(t('An unknown error occurred while deleting Relay public key'));
+      }
     };
   }
 
-  // TODO(Priscila): activate the code below as soon as the endpoint is provided
-  // getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {
-  //   return [['relays', `/organizations/${this.props.organization.slug}/relay-keys`]];
-  // }
+  successfullySaved(response: Organization, successMessage: string) {
+    addSuccessMessage(successMessage);
+    this.setRelays(response.trustedRelays);
+  }
 
-  // handleDelete = (id: Relay['public_key']) => () => {};
+  handleOpenEditDialog(publicKey: Relay['publicKey']) {
+    return () => {
+      const editRelay = this.state.relays.find(relay => relay.publicKey === publicKey);
+
+      if (!editRelay) {
+        return;
+      }
+
+      openModal(modalProps => (
+        <Edit
+          {...modalProps}
+          savedRelays={this.state.relays}
+          api={this.api}
+          orgSlug={this.props.organization.slug}
+          relay={editRelay}
+          onSubmitSuccess={response => {
+            this.successfullySaved(response, t('Successfully updated Relay public key'));
+          }}
+        />
+      ));
+    };
+  }
 
-  handleAdd = () => {};
+  handleOpenAddDialog() {
+    openModal(modalProps => (
+      <Add
+        {...modalProps}
+        savedRelays={this.state.relays}
+        api={this.api}
+        orgSlug={this.props.organization.slug}
+        onSubmitSuccess={response => {
+          this.successfullySaved(response, t('Successfully added Relay public key'));
+        }}
+      />
+    ));
+  }
 
   renderBody() {
     const {relays} = this.state;
+
     return (
       <React.Fragment>
-        <SettingsPageHeader title={t('Relays')} />
-        <Panel>
-          <PanelHeader>{t('Relays')}</PanelHeader>
-          <PanelAlert type="info">
-            {tct('For more details, see [linkToDocs].', {
-              linkToDocs: (
-                <ExternalLink href={RELAY_DOCS_LINK}>
-                  {t('full Relay documentation')}
-                </ExternalLink>
-              ),
-            })}
-          </PanelAlert>
-          <PanelBody>
-            {relays.map(
-              ({public_key, name, created, last_seen, first_seen, last_modified}) => (
-                <Content key={public_key}>
-                  <Info>
-                    <InfoItem>
-                      <Name>{name}</Name>
-                    </InfoItem>
-                    <InfoItem>
-                      <PublicKey>{public_key}</PublicKey>
-                    </InfoItem>
-                    <InfoItem>
-                      <Time label={t('Created:')} date={created} />
-                    </InfoItem>
-                    <InfoItem>
-                      <Time label={t('First Seen:')} date={first_seen} />
-                    </InfoItem>
-                    <InfoItem>
-                      <Time label={t('Last Seen:')} date={last_seen} />
-                    </InfoItem>
-                    <InfoItem>
-                      <Time label={t('Last modified:')} date={last_modified} />
-                    </InfoItem>
-                  </Info>
+        <SettingsPageHeader
+          title={t('Relays')}
+          action={
+            <Button
+              priority="primary"
+              size="small"
+              icon={<IconAdd size="xs" isCircled />}
+              onClick={this.handleOpenAddDialog}
+            >
+              {t('New Relay Key')}
+            </Button>
+          }
+        />
+        <TextBlock>
+          {tct(
+            `Relay is a relay service built by Sentry. You can run this on-premise for your SDKs or server to customize data scrubbing, buffering retries and more. You can generate Relay keys for access. For more on how to set this up, read the [link:docs].`,
+            {
+              link: <ExternalLink href={RELAY_DOCS_LINK} />,
+            }
+          )}
+        </TextBlock>
+        <StyledPanelTable
+          isEmpty={relays.length === 0}
+          emptyMessage={t('No relays keys have been added yet.')}
+          headers={[t('Display Name'), t('Relay Key'), t('Date Created'), '']}
+        >
+          {relays.map(({publicKey: key, name, created, description}) => {
+            const maskedKey = '*************************';
+            return (
+              <React.Fragment key={key}>
+                <Name>
+                  <Text>{name}</Text>
+                  {description && (
+                    <QuestionTooltip position="top" size="sm" title={description} />
+                  )}
+                </Name>
+                <KeyWrapper>
+                  <Key content={maskedKey}>{maskedKey}</Key>
+                  <IconWrapper>
+                    <Clipboard value={key}>
+                      <Tooltip title={t('Click to copy')} containerDisplayMode="flex">
+                        <IconCopy color="gray500" />
+                      </Tooltip>
+                    </Clipboard>
+                  </IconWrapper>
+                </KeyWrapper>
+                <Text>
+                  {!defined(created) ? t('Unknown') : <DateTime date={created} />}
+                </Text>
+                <Actions>
                   <Button
-                    title={t('Delete Rule')}
-                    label={t('Delete Rule')}
                     size="small"
-                    icon={<IconDelete />}
+                    title={t('Edit Key')}
+                    label={t('Edit Key')}
+                    icon={<IconEdit size="sm" />}
+                    onClick={this.handleOpenEditDialog(key)}
                   />
-                </Content>
-              )
-            )}
-          </PanelBody>
-          <PanelAction>
-            <Button href={RELAY_DOCS_LINK} target="_blank">
-              {t('Read the docs')}
-            </Button>
-            <Button onClick={this.handleAdd} priority="primary">
-              {t('Add Relay')}
-            </Button>
-          </PanelAction>
-        </Panel>
+                  <Button
+                    size="small"
+                    title={t('Delete Key')}
+                    label={t('Delete Key')}
+                    onClick={this.handleDelete(key)}
+                    icon={<IconDelete size="sm" />}
+                  />
+                </Actions>
+              </React.Fragment>
+            );
+          })}
+        </StyledPanelTable>
       </React.Fragment>
     );
   }
@@ -137,51 +201,51 @@ class Relays extends AsyncComponent<Props, State> {
 
 export default Relays;
 
-const Content = styled('div')`
-  display: grid;
-  grid-template-columns: 1fr max-content;
-  align-items: center;
-  border-bottom: 1px solid ${p => p.theme.borderDark};
-  padding: ${space(1)} ${space(2)};
-  :last-child {
-    border-bottom: 0;
+const StyledPanelTable = styled(PanelTable)`
+  grid-template-columns: repeat(3, auto) max-content;
+  > * {
+    @media (max-width: ${theme.breakpoints[0]}) {
+      padding: ${space(1)};
+    }
   }
 `;
 
-const Info = styled('div')`
+const KeyWrapper = styled('div')`
   display: grid;
-  grid-template-columns: repeat(4, 1fr);
+  grid-template-columns: auto 1fr;
   grid-gap: ${space(1)};
-  > *:nth-child(1),
-  > *:nth-child(2) {
-    grid-column: span 4;
-  }
+  align-items: center;
 `;
 
-const InfoItem = styled('div')`
+const IconWrapper = styled('div')`
+  justify-content: flex-start;
   display: flex;
-  align-items: center;
-  height: 100%;
+  cursor: pointer;
 `;
 
-const PanelAction = styled('div')`
-  padding: ${space(1)} ${space(2)};
-  display: grid;
-  grid-gap: ${space(1)};
-  grid-template-columns: auto auto;
-  justify-content: flex-end;
-  border-top: 1px solid ${p => p.theme.borderDark};
+const Text = styled(TextOverflow)`
+  color: ${p => p.theme.gray700};
+  line-height: 30px;
 `;
 
-const Name = styled('h4')`
-  font-size: ${p => p.theme.fontSizeLarge} !important;
-  font-weight: 600;
-  margin-bottom: 0 !important;
-  color: ${p => p.theme.gray600};
+const Key = styled(Text)<{content: string}>`
+  visibility: hidden;
+  position: relative;
+  :after {
+    position: absolute;
+    top: 4px;
+    left: 0;
+    content: '${p => p.content}';
+    visibility: visible;
+    ${overflowEllipsis};
+  }
 `;
 
-const PublicKey = styled('h5')`
-  font-size: ${p => p.theme.fontSizeMedium} !important;
-  font-weight: 400;
-  margin-bottom: 0 !important;
+const Actions = styled('div')`
+  display: grid;
+  grid-template-columns: auto 1fr;
+  grid-gap: ${space(1)};
+  align-items: center;
 `;
+
+const Name = styled(Actions)``;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationRelays/time.tsx b/src/sentry/static/sentry/app/views/settings/organizationRelays/time.tsx
deleted file mode 100644
index 4d91344db6..0000000000
--- a/src/sentry/static/sentry/app/views/settings/organizationRelays/time.tsx
+++ /dev/null
@@ -1,35 +0,0 @@
-import React from 'react';
-import styled from '@emotion/styled';
-
-import {t} from 'app/locale';
-import TimeSince from 'app/components/timeSince';
-import space from 'app/styles/space';
-import {defined} from 'app/utils';
-
-type Props = {
-  label: string;
-  date?: string | null;
-};
-
-const Time = ({label, date}: Props) => (
-  <Wrapper>
-    <TimeLabel>{label}</TimeLabel>
-    {!defined(date) ? t('Unknown') : <TimeSince date={date} />}
-  </Wrapper>
-);
-
-export default Time;
-
-const Wrapper = styled('div')`
-  display: grid;
-  grid-template-columns: max-content 1fr;
-  grid-gap: ${space(0.5)};
-  font-size: ${p => p.theme.fontSizeMedium};
-`;
-
-const TimeLabel = styled('h4')`
-  font-size: ${p => p.theme.fontSizeSmall} !important;
-  text-transform: uppercase;
-  color: ${p => p.theme.gray500};
-  margin-bottom: 0 !important;
-`;
diff --git a/src/sentry/static/sentry/less/includes/bootstrap/modals.less b/src/sentry/static/sentry/less/includes/bootstrap/modals.less
index 7b5568b0f6..04a10f1687 100644
--- a/src/sentry/static/sentry/less/includes/bootstrap/modals.less
+++ b/src/sentry/static/sentry/less/includes/bootstrap/modals.less
@@ -90,6 +90,7 @@
 // Close icon
 .modal-header .close {
   margin-top: -2px;
+  outline: none;
 }
 
 // Title text within header
