commit 99b87b65237beac5cd95aef8b300243d09058368
Author: David Cramer <dcramer@gmail.com>
Date:   Thu May 16 23:54:15 2013 -0700

    Add is_rate_limited hook to Plugin

diff --git a/src/sentry/plugins/base.py b/src/sentry/plugins/base.py
index 87e492e858..ce5496e99b 100644
--- a/src/sentry/plugins/base.py
+++ b/src/sentry/plugins/base.py
@@ -423,6 +423,13 @@ class IPlugin(local):
 
     # Server side signals which do not have request context
 
+    def is_rate_limited(self, project, **kwargs):
+        """
+        Return True if this project (or the system) is over any defined
+        quotas.
+        """
+        return False
+
     def has_perm(self, user, perm, *objects, **kwargs):
         """
         Given a user, a permission name, and an optional list of objects
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index c1a2577ee5..d48033fda2 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -35,6 +35,7 @@ from sentry.utils.cache import cache
 from sentry.utils.db import has_trending
 from sentry.utils.javascript import to_json
 from sentry.utils.http import is_valid_origin, get_origins, is_same_domain
+from sentry.utils.safe import safe_execute
 from sentry.web.decorators import has_access
 from sentry.web.frontend.groups import _get_group_list
 from sentry.web.helpers import render_to_response
@@ -155,7 +156,7 @@ class APIView(BaseView):
         try:
             project = self._get_project_from_id(project_id)
         except APIError, e:
-            return HttpResponse(str(e), status=400)
+            return HttpResponse(str(e), 'text/plain', status=400)
 
         origin = self.get_request_origin(request)
         if origin is not None:
@@ -184,7 +185,7 @@ class APIView(BaseView):
             # Legacy API was /api/store/ and the project ID was only available elsewhere
             if not project:
                 if not project_:
-                    return HttpResponse('Unable to identify project', status=400)
+                    return HttpResponse('Unable to identify project', 'text/plain', status=400)
                 project = project_
             elif project_ != project:
                 return HttpResponse('Project ID mismatch', status=400)
@@ -260,9 +261,13 @@ class StoreView(APIView):
         data = request.GET.get('sentry_data', '')
         self.process(request, project, auth, data, **kwargs)
         # We should return a simple 1x1 gif for browser so they don't throw a warning
-        return HttpResponse(PIXEL, content_type='image/gif')
+        return HttpResponse(PIXEL, 'image/gif')
 
     def process(self, request, project, auth, data, **kwargs):
+        for plugin in plugins.all():
+            if safe_execute(plugin.is_rate_limited, project=project):
+                return HttpResponse('Creation of this event was denied due to rate limiting.', 'text/plain', status_code=405)
+
         result = plugins.first('has_perm', request.user, 'create_event', project)
         if result is False:
             raise APIForbidden('Creation of this event was blocked')
