commit 26d701b19668941e9822b1d7054728461cebf06f
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Nov 17 17:04:05 2016 -0800

    api: use UserEmail when searching for users (#4523)
    
    Also spits out UserEmail information from User serializer

diff --git a/src/sentry/api/endpoints/user_index.py b/src/sentry/api/endpoints/user_index.py
index e3def72fdb..fd6db310e6 100644
--- a/src/sentry/api/endpoints/user_index.py
+++ b/src/sentry/api/endpoints/user_index.py
@@ -28,7 +28,8 @@ class UserIndexEndpoint(Endpoint):
                     queryset = queryset.filter(
                         Q(name__icontains=value) |
                         Q(username__icontains=value) |
-                        Q(email__icontains=value)
+                        Q(email__icontains=value) |
+                        Q(emails__email__icontains=value)
                     )
                 elif key == 'name':
                     queryset = queryset.filter(
diff --git a/src/sentry/api/serializers/models/user.py b/src/sentry/api/serializers/models/user.py
index c0ccfebfa3..15b27a04c1 100644
--- a/src/sentry/api/serializers/models/user.py
+++ b/src/sentry/api/serializers/models/user.py
@@ -7,7 +7,9 @@ from django.conf import settings
 
 from sentry.app import env
 from sentry.api.serializers import Serializer, register
-from sentry.models import AuthIdentity, Authenticator, User, UserAvatar, UserOption
+from sentry.models import (
+    AuthIdentity, Authenticator, User, UserAvatar, UserOption, UserEmail,
+)
 from sentry.utils.avatar import get_gravatar_url
 
 
@@ -26,6 +28,16 @@ class UserSerializer(Serializer):
             results[item.user_id].append(item)
         return results
 
+    def _get_useremails(self, item_list, user):
+        queryset = UserEmail.objects.filter(
+            user__in=item_list,
+        )
+
+        results = {i.id: [] for i in item_list}
+        for item in queryset:
+            results[item.user_id].append(item)
+        return results
+
     def get_attrs(self, item_list, user):
         avatars = {
             a.user_id: a
@@ -34,6 +46,7 @@ class UserSerializer(Serializer):
             )
         }
         identities = self._get_identities(item_list, user)
+        emails = self._get_useremails(item_list, user)
 
         authenticators = Authenticator.objects.bulk_users_have_2fa([i.id for i in item_list])
 
@@ -43,6 +56,7 @@ class UserSerializer(Serializer):
                 'avatar': avatars.get(item.id),
                 'identities': identities.get(item.id),
                 'has2fa': authenticators[item.id],
+                'emails': emails[item.id],
             }
         return data
 
@@ -108,6 +122,12 @@ class UserSerializer(Serializer):
                 'dateVerified': i.last_verified,
             } for i in attrs['identities']]
 
+        d['emails'] = [{
+            'id': six.text_type(e.id),
+            'email': e.email,
+            'is_verified': e.is_verified,
+        } for e in attrs['emails']]
+
         return d
 
 
diff --git a/tests/sentry/api/endpoints/test_user_details.py b/tests/sentry/api/endpoints/test_user_details.py
index 2586ab6870..5ed19f9098 100644
--- a/tests/sentry/api/endpoints/test_user_details.py
+++ b/tests/sentry/api/endpoints/test_user_details.py
@@ -59,6 +59,9 @@ class UserDetailsTest(APITestCase):
         assert 'authenticators' in resp.data
         assert len(resp.data['authenticators']) == 1
         assert resp.data['authenticators'][0]['id'] == six.text_type(auth.id)
+        assert len(resp.data['emails']) == 1
+        assert resp.data['emails'][0]['email'] == user.email
+        assert resp.data['emails'][0]['is_verified'] is False
 
     def test_superuser(self):
         user = self.create_user(email='a@example.com')
diff --git a/tests/sentry/api/serializers/test_user.py b/tests/sentry/api/serializers/test_user.py
index 51bb8ba4b3..654d2c6d9b 100644
--- a/tests/sentry/api/serializers/test_user.py
+++ b/tests/sentry/api/serializers/test_user.py
@@ -6,7 +6,7 @@ import six
 
 from sentry.api.serializers import serialize
 from sentry.testutils import TestCase
-from sentry.models import Authenticator
+from sentry.models import Authenticator, UserEmail
 from sentry.models.authenticator import available_authenticators
 
 
@@ -26,3 +26,15 @@ class UserSerializerTest(TestCase):
         result = serialize(user)
         assert result['id'] == six.text_type(user.id)
         assert result['has2fa'] is True
+        assert len(result['emails']) == 1
+        assert result['emails'][0]['email'] == user.email
+        assert result['emails'][0]['is_verified'] is False
+
+    def test_no_useremail(self):
+        user = self.create_user()
+
+        UserEmail.objects.all().delete()
+        assert UserEmail.objects.all().count() == 0
+
+        result = serialize(user)
+        assert len(result['emails']) == 0
