commit a1423f7f078497c7e93f7996e571a566a4d44bb1
Author: Mark Story <mark@mark-story.com>
Date:   Wed Oct 31 14:14:21 2018 +0000

    fix(integrations) Don't 500 when it is not our fault (#10274)
    
    We should not 500 when:
    
    * Users set the wrong value of 'Verify SSL' in GitLab and GitHub:e
    * When a user mis-types their group name setting up GitLab.
    
    This also fixes a few small problems with GitLab:
    
    * We want the group path not the name.
    * We need to urlencode group paths because subgroups are a thing in
      GitLab.
    * We want to use `full_name` and `full_path` so that repositories in
      sub-groups work correctly.
    * We no longer need the `sudo` scope as we don't make system hooks
      anymore.
    * We should display form errors when a user submits with a missing
      required field.
    
    Refs APP-663

diff --git a/src/sentry/identity/gitlab/provider.py b/src/sentry/identity/gitlab/provider.py
index 1154371cda..71597b3de4 100644
--- a/src/sentry/identity/gitlab/provider.py
+++ b/src/sentry/identity/gitlab/provider.py
@@ -23,10 +23,7 @@ class GitlabIdentityProvider(OAuth2Provider):
     key = 'gitlab'
     name = 'Gitlab'
 
-    oauth_scopes = (
-        'api',
-        'sudo',
-    )
+    oauth_scopes = ('api', )
 
     def build_identity(self, data):
         data = data['data']
diff --git a/src/sentry/identity/oauth2.py b/src/sentry/identity/oauth2.py
index 4650dd8b68..ac2c6772f0 100644
--- a/src/sentry/identity/oauth2.py
+++ b/src/sentry/identity/oauth2.py
@@ -6,6 +6,7 @@ from six.moves.urllib.parse import parse_qsl, urlencode
 from uuid import uuid4
 from time import time
 from django.views.decorators.csrf import csrf_exempt
+from requests.exceptions import SSLError
 
 from sentry.auth.exceptions import IdentityNotValid
 from sentry.http import safe_urlopen, safe_urlread
@@ -248,11 +249,18 @@ class OAuth2CallbackView(PipelineView):
             redirect_uri=absolute_uri(pipeline.redirect_url()),
         )
         verify_ssl = pipeline.config.get('verify_ssl', True)
-        req = safe_urlopen(self.access_token_url, data=data, verify_ssl=verify_ssl)
-        body = safe_urlread(req)
-        if req.headers.get('Content-Type', '').startswith('application/x-www-form-urlencoded'):
-            return dict(parse_qsl(body))
-        return json.loads(body)
+        try:
+            req = safe_urlopen(self.access_token_url, data=data, verify_ssl=verify_ssl)
+            body = safe_urlread(req)
+            if req.headers.get('Content-Type', '').startswith('application/x-www-form-urlencoded'):
+                return dict(parse_qsl(body))
+            return json.loads(body)
+        except SSLError:
+            url = self.access_token_url
+            return {
+                'error': 'Could not verify SSL certificate',
+                'error_description': u'Ensure that {} has a valid SSL certificate'.format(url)
+            }
 
     def dispatch(self, request, pipeline):
         error = request.GET.get('error')
diff --git a/src/sentry/integrations/gitlab/client.py b/src/sentry/integrations/gitlab/client.py
index fca11a75ca..dc1fcb0061 100644
--- a/src/sentry/integrations/gitlab/client.py
+++ b/src/sentry/integrations/gitlab/client.py
@@ -5,6 +5,7 @@ from django.core.urlresolvers import reverse
 from sentry.integrations.client import ApiClient, OAuth2RefreshMixin
 from sentry.integrations.exceptions import ApiError
 from sentry.utils.http import absolute_uri
+from six.moves.urllib.parse import quote
 
 
 API_VERSION = u'/api/v4'
@@ -21,8 +22,6 @@ class GitLabApiClientPath(object):
     hooks = u'/hooks'
     issue = u'/projects/{project}/issues/{issue}'
     issues = u'/projects/{project}/issues'
-    members = u'/projects/{project}/members'
-    notes = u'/projects/{project}/issues/{issue}/notes'
     project = u'/projects/{project}'
     project_hooks = u'/projects/{project}/hooks'
     project_hook = u'/projects/{project}/hooks/{hook_id}'
@@ -50,6 +49,12 @@ class GitLabSetupClient(ApiClient):
         self.verify_ssl = verify_ssl
 
     def get_group(self, group):
+        """Get a group based on `path` which is a slug.
+
+        We need to URL quote because subgroups use `/` in their
+        `id` and GitLab requires slugs to be URL encoded.
+        """
+        group = quote(group, safe='')
         path = GitLabApiClientPath.group.format(group=group)
         return self.get(path)
 
@@ -164,25 +169,6 @@ class GitLabApiClient(ApiClient, OAuth2RefreshMixin):
             'search': query
         })
 
-    def create_note(self, project_id, issue_iid, data):
-        """Create an issue note
-
-        See https://docs.gitlab.com/ee/api/notes.html#create-new-issue-note
-        """
-        return self.post(
-            GitLabApiClientPath.notes.format(project=project_id, issue=issue_iid),
-            data=data,
-        )
-
-    def list_project_members(self, project_id):
-        """Get project members
-
-        See https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project
-        """
-        return self.get(
-            GitLabApiClientPath.members.format(project=project_id)
-        )
-
     def create_project_webhook(self, project_id):
         """Create a webhook on a project
 
diff --git a/src/sentry/integrations/gitlab/integration.py b/src/sentry/integrations/gitlab/integration.py
index 62af08b67b..0452667c40 100644
--- a/src/sentry/integrations/gitlab/integration.py
+++ b/src/sentry/integrations/gitlab/integration.py
@@ -15,6 +15,7 @@ from sentry.integrations import (
     IntegrationProvider,
     IntegrationMetadata
 )
+from sentry.integrations.exceptions import ApiError, IntegrationError
 from sentry.integrations.repositories import RepositoryMixin
 from sentry.pipeline import NestedPipelineView, PipelineView
 from sentry.utils.http import absolute_uri
@@ -114,9 +115,9 @@ class InstallationForm(forms.Form):
         ),
     )
     group = forms.CharField(
-        label=_('GitLab Group Name'),
+        label=_('GitLab Group Path'),
         widget=forms.TextInput(
-            attrs={'placeholder': _('example-co')}
+            attrs={'placeholder': _('example-co/web')}
         )
     )
     verify_ssl = forms.BooleanField(
@@ -149,28 +150,29 @@ class InstallationForm(forms.Form):
 
 class InstallationConfigView(PipelineView):
     def dispatch(self, request, pipeline):
-        form = InstallationForm(request.POST)
-        if form.is_valid():
-            form_data = form.cleaned_data
+        if request.method == 'POST':
+            form = InstallationForm(request.POST)
+            if form.is_valid():
+                form_data = form.cleaned_data
 
-            pipeline.bind_state('installation_data', form_data)
+                pipeline.bind_state('installation_data', form_data)
 
-            pipeline.bind_state('oauth_config_information', {
-                "access_token_url": u"{}/oauth/token".format(form_data.get('url')),
-                "authorize_url": u"{}/oauth/authorize".format(form_data.get('url')),
-                "client_id": form_data.get('client_id'),
-                "client_secret": form_data.get('client_secret'),
-                "verify_ssl": form_data.get('verify_ssl')
-            })
+                pipeline.bind_state('oauth_config_information', {
+                    "access_token_url": u"{}/oauth/token".format(form_data.get('url')),
+                    "authorize_url": u"{}/oauth/authorize".format(form_data.get('url')),
+                    "client_id": form_data.get('client_id'),
+                    "client_secret": form_data.get('client_secret'),
+                    "verify_ssl": form_data.get('verify_ssl')
+                })
 
-            return pipeline.next_step()
-
-        project_form = InstallationForm()
+                return pipeline.next_step()
+        else:
+            form = InstallationForm()
 
         return render_to_response(
             template='sentry/integrations/gitlab-config.html',
             context={
-                'form': project_form,
+                'form': form,
             },
             request=request,
         )
@@ -202,10 +204,7 @@ class GitlabIntegrationProvider(IntegrationProvider):
         method should be late bound into the pipeline vies.
         """
         identity_pipeline_config = dict(
-            oauth_scopes=(
-                'api',
-                'sudo',
-            ),
+            oauth_scopes=sorted(GitlabIdentityProvider.oauth_scopes),
             redirect_url=absolute_uri('/extensions/gitlab/setup/'),
             **self.pipeline.fetch_state('oauth_config_information')
         )
@@ -227,7 +226,7 @@ class GitlabIntegrationProvider(IntegrationProvider):
         #   "token_type": "bearer",
         #   "refresh_token": "29f43sdfsk22fsj929",
         #   "created_at": 1536798907,
-        #   "scope": "api sudo"
+        #   "scope": "api"
         # }
         if 'refresh_token' in payload:
             data['refresh_token'] = payload['refresh_token']
@@ -242,9 +241,11 @@ class GitlabIntegrationProvider(IntegrationProvider):
             access_token,
             installation_data['verify_ssl']
         )
-        resp = client.get_group(installation_data['group'])
-
-        return resp.json
+        try:
+            resp = client.get_group(installation_data['group'])
+            return resp.json
+        except ApiError:
+            raise IntegrationError('The requested GitLab group could not be found.')
 
     def get_pipeline_views(self):
         return [InstallationConfigView(), lambda: self._make_identity_pipeline_view()]
@@ -266,17 +267,17 @@ class GitlabIntegrationProvider(IntegrationProvider):
         secret = sha1_text(''.join([hostname, state['installation_data']['client_id']]))
 
         integration = {
-            'name': group['name'],
+            'name': group['full_name'],
             # Splice the gitlab host and project together to
             # act as unique link between a gitlab instance, group + sentry.
             # This value is embedded then in the webook token that we
             # give to gitlab to allow us to find the integration a hook came
             # from.
-            'external_id': u'{}:{}'.format(hostname, group['path']),
+            'external_id': u'{}:{}'.format(hostname, group['full_path']),
             'metadata': {
                 'icon': group['avatar_url'],
                 'instance': hostname,
-                'domain_name': u'{}/{}'.format(hostname, group['path']),
+                'domain_name': u'{}/{}'.format(hostname, group['full_path']),
                 'scopes': scopes,
                 'verify_ssl': verify_ssl,
                 'base_url': base_url,
diff --git a/tests/sentry/integrations/gitlab/test_integration.py b/tests/sentry/integrations/gitlab/test_integration.py
index a4c9ea005a..b8d77d4417 100644
--- a/tests/sentry/integrations/gitlab/test_integration.py
+++ b/tests/sentry/integrations/gitlab/test_integration.py
@@ -65,8 +65,8 @@ class GitlabIntegrationTest(IntegrationTestCase):
             'https://gitlab.example.com/api/v4/groups/cool-group',
             json={
                 'id': group_id,
-                'name': 'Cool',
-                'path': 'cool-group',
+                'full_name': 'Cool',
+                'full_path': 'cool-group',
                 'web_url': 'https://gitlab.example.com/groups/cool-group',
                 'avatar_url': 'https://gitlab.example.com/uploads/group/avatar/4/foo.jpg',
             }
@@ -115,7 +115,7 @@ class GitlabIntegrationTest(IntegrationTestCase):
         assert integration.name == 'Cool'
         assert integration.metadata == {
             'instance': 'gitlab.example.com',
-            'scopes': ['api', 'sudo'],
+            'scopes': ['api'],
             'icon': u'https://gitlab.example.com/uploads/group/avatar/4/foo.jpg',
             'domain_name': u'gitlab.example.com/cool-group',
             'verify_ssl': True,
@@ -140,6 +140,47 @@ class GitlabIntegrationTest(IntegrationTestCase):
             'access_token': 'xxxxx-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx'
         }
 
+    @responses.activate
+    def test_setup_missing_group(self):
+        resp = self.client.get(self.init_path)
+        assert resp.status_code == 200
+
+        resp = self.client.post(self.init_path, data=self.config)
+        assert resp.status_code == 302
+
+        redirect = urlparse(resp['Location'])
+        assert redirect.scheme == 'https'
+        assert redirect.netloc == 'gitlab.example.com'
+        assert redirect.path == '/oauth/authorize'
+
+        params = parse_qs(redirect.query)
+        authorize_params = {k: v[0] for k, v in six.iteritems(params)}
+
+        responses.add(
+            responses.POST,
+            'https://gitlab.example.com/oauth/token',
+            json={'access_token': 'access-token-value'}
+        )
+        responses.add(
+            responses.GET,
+            'https://gitlab.example.com/api/v4/user',
+            json={'id': 9}
+        )
+        responses.add(
+            responses.GET,
+            'https://gitlab.example.com/api/v4/groups/cool-group',
+            status=404
+        )
+        resp = self.client.get(u'{}?{}'.format(
+            self.setup_path,
+            urlencode({
+                'code': 'oauth-code',
+                'state': authorize_params['state'],
+            })
+        ))
+        assert resp.status_code == 200
+        self.assertContains(resp, 'GitLab group could not be found')
+
     @responses.activate
     def test_get_group_id(self):
         self.assert_setup_flow()
