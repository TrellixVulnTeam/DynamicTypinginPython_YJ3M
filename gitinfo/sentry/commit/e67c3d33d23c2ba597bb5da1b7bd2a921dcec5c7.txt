commit e67c3d33d23c2ba597bb5da1b7bd2a921dcec5c7
Author: Jan Michael Auer <jan.auer@sentry.io>
Date:   Thu May 16 13:02:46 2019 +0200

    feat: Add config for attachments download permissions (#13221)
    
    Adds an organization option to configure who can download event attachments.
    
    Attachments are potentially sensitive files containing significant PII or user data, such as native crash reports or log files. Some of our customers would like better control over who has access to those attachments. We decided to let users configure the membership role required to access attachment files.
    
    The new option allows to override the default setting of "Member" on an organization level. It is enforced in the download view but does not constrain listing attachments. Users with insufficient permissions will still see the attachment, but won't be able to download it.

diff --git a/src/sentry/api/endpoints/event_attachment_details.py b/src/sentry/api/endpoints/event_attachment_details.py
index ef8cce5eb4..1a8b437c7e 100644
--- a/src/sentry/api/endpoints/event_attachment_details.py
+++ b/src/sentry/api/endpoints/event_attachment_details.py
@@ -8,12 +8,48 @@ try:
 except ImportError:
     from django.http import StreamingHttpResponse
 
-from sentry import features, options
-from sentry.api.bases.project import ProjectEndpoint
-from sentry.models import Event, SnubaEvent, EventAttachment
+from sentry import features, options, roles
+from sentry.api.bases.project import ProjectEndpoint, ProjectPermission
+from sentry.api.serializers.models.organization import ATTACHMENTS_ROLE_DEFAULT
+from sentry.auth.superuser import is_active_superuser
+from sentry.auth.system import is_system_auth
+from sentry.models import Event, SnubaEvent, EventAttachment, OrganizationMember
+
+
+class EventAttachmentDetailsPermission(ProjectPermission):
+    def has_object_permission(self, request, view, project):
+        result = super(EventAttachmentDetailsPermission, self) \
+            .has_object_permission(request, view, project)
+
+        if not result:
+            return result
+
+        if is_system_auth(request.auth) or is_active_superuser(request):
+            return True
+
+        if not request.user.is_authenticated():
+            return False
+
+        organization = project.organization
+        required_role = organization.get_option('sentry:attachments_role') \
+            or ATTACHMENTS_ROLE_DEFAULT
+
+        try:
+            current_role = OrganizationMember.objects.filter(
+                organization=organization,
+                user=request.user,
+            ).values_list('role', flat=True).get()
+        except OrganizationMember.DoesNotExist:
+            return False
+
+        required_role = roles.get(required_role)
+        current_role = roles.get(current_role)
+        return current_role.priority >= required_role.priority
 
 
 class EventAttachmentDetailsEndpoint(ProjectEndpoint):
+    permission_classes = (EventAttachmentDetailsPermission, )
+
     def download(self, attachment):
         file = attachment.file
         fp = file.getfile()
diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index 3bb39a182b..a2903b9220 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -40,6 +40,8 @@ ORG_OPTIONS = (
      bool, org_serializers.REQUIRE_SCRUB_DEFAULTS_DEFAULT),
     ('storeCrashReports', 'sentry:store_crash_reports',
      bool, org_serializers.STORE_CRASH_REPORTS_DEFAULT),
+    ('attachmentsRole', 'sentry:attachments_role',
+     six.text_type, org_serializers.ATTACHMENTS_ROLE_DEFAULT),
     ('scrubIPAddresses', 'sentry:require_scrub_ip_address',
      bool, org_serializers.REQUIRE_SCRUB_IP_ADDRESS_DEFAULT),
     ('trustedRelays', 'sentry:trusted-relays', list, org_serializers.TRUSTED_RELAYS_DEFAULT),
@@ -89,6 +91,7 @@ class OrganizationSerializer(serializers.Serializer):
     sensitiveFields = ListField(child=serializers.CharField(), required=False)
     safeFields = ListField(child=serializers.CharField(), required=False)
     storeCrashReports = serializers.BooleanField(required=False)
+    attachmentsRole = serializers.CharField(required=True)
     scrubIPAddresses = serializers.BooleanField(required=False)
     scrapeJavaScript = serializers.BooleanField(required=False)
     isEarlyAdopter = serializers.BooleanField(required=False)
@@ -141,6 +144,14 @@ class OrganizationSerializer(serializers.Serializer):
             raise serializers.ValidationError('Empty values are not allowed.')
         return attrs
 
+    def validate_attachmentsRole(self, attrs, source):
+        value = attrs[source]
+        try:
+            roles.get(value)
+        except KeyError:
+            raise serializers.ValidationError('Invalid role')
+        return attrs
+
     def validate_require2FA(self, attrs, source):
         value = attrs[source]
         user = self.context['user']
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index 3d3127d2f6..3eab68f336 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -2,6 +2,8 @@ from __future__ import absolute_import
 
 import six
 
+from django.conf import settings
+
 from sentry import roles
 from sentry.app import quotas
 from sentry.api.serializers import Serializer, register, serialize
@@ -19,6 +21,7 @@ REQUIRE_SCRUB_DEFAULTS_DEFAULT = False
 SENSITIVE_FIELDS_DEFAULT = None
 SAFE_FIELDS_DEFAULT = None
 STORE_CRASH_REPORTS_DEFAULT = False
+ATTACHMENTS_ROLE_DEFAULT = settings.SENTRY_DEFAULT_ROLE
 REQUIRE_SCRUB_IP_ADDRESS_DEFAULT = False
 SCRAPE_JAVASCRIPT_DEFAULT = True
 TRUSTED_RELAYS_DEFAULT = None
@@ -198,6 +201,7 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
             'sensitiveFields': obj.get_option('sentry:sensitive_fields', SENSITIVE_FIELDS_DEFAULT) or [],
             'safeFields': obj.get_option('sentry:safe_fields', SAFE_FIELDS_DEFAULT) or [],
             'storeCrashReports': bool(obj.get_option('sentry:store_crash_reports', STORE_CRASH_REPORTS_DEFAULT)),
+            'attachmentsRole': six.text_type(obj.get_option('sentry:attachments_role', ATTACHMENTS_ROLE_DEFAULT)),
             'scrubIPAddresses': bool(obj.get_option('sentry:require_scrub_ip_address', REQUIRE_SCRUB_IP_ADDRESS_DEFAULT)),
             'scrapeJavaScript': bool(obj.get_option('sentry:scrape_javascript', SCRAPE_JAVASCRIPT_DEFAULT)),
             'trustedRelays': obj.get_option('sentry:trusted-relays', TRUSTED_RELAYS_DEFAULT) or [],
diff --git a/src/sentry/static/sentry/app/actionCreators/members.jsx b/src/sentry/static/sentry/app/actionCreators/members.jsx
index 4a1873cd29..8b5fd223bd 100644
--- a/src/sentry/static/sentry/app/actionCreators/members.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/members.jsx
@@ -1,6 +1,12 @@
 import MemberActions from 'app/actions/memberActions';
 import MemberListStore from 'app/stores/memberListStore';
 
+function getMemberUser(member) {
+  const user = member.user;
+  user.role = member.role;
+  return user;
+}
+
 export function fetchOrgMembers(api, orgId, projectIds = null) {
   const endpoint = `/organizations/${orgId}/users/`;
   const query = projectIds ? {project: projectIds} : null;
@@ -10,7 +16,7 @@ export function fetchOrgMembers(api, orgId, projectIds = null) {
     members = members.filter(m => m.user);
 
     // Update the store with just the users, as avatars rely on them.
-    MemberListStore.loadInitialData(members.map(m => m.user));
+    MemberListStore.loadInitialData(members.map(getMemberUser));
 
     return members;
   });
diff --git a/src/sentry/static/sentry/app/components/events/eventAttachments.jsx b/src/sentry/static/sentry/app/components/events/eventAttachments.jsx
index 2a66d88a86..7ab48b731c 100644
--- a/src/sentry/static/sentry/app/components/events/eventAttachments.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventAttachments.jsx
@@ -2,11 +2,13 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import {Box} from 'grid-emotion';
 
+import Button from 'app/components/button';
 import FileSize from 'app/components/fileSize';
 
 import {t} from 'app/locale';
 import {Panel, PanelBody, PanelItem} from 'app/components/panels';
 import withApi from 'app/utils/withApi';
+import AttachmentUrl from 'app/utils/attachmentUrl';
 
 class EventAttachments extends React.Component {
   static propTypes = {
@@ -63,13 +65,6 @@ class EventAttachments extends React.Component {
     );
   }
 
-  getDownloadUrl(attachment) {
-    const {orgId, event, projectId} = this.props;
-    return `/api/0/projects/${orgId}/${projectId}/events/${event.id}/attachments/${
-      attachment.id
-    }/?download=1`;
-  }
-
   render() {
     const {attachmentList} = this.state;
     if (!(attachmentList && attachmentList.length)) {
@@ -92,13 +87,35 @@ class EventAttachments extends React.Component {
                       pr={1}
                       style={{wordWrap: 'break-word', wordBreak: 'break-all'}}
                     >
-                      <a href={this.getDownloadUrl(attachment)}>
-                        <strong>{attachment.name}</strong>
-                      </a>
+                      <strong>{attachment.name}</strong>
                     </Box>
                     <Box flex={1} textAlign="right">
                       <FileSize bytes={attachment.size} />
                     </Box>
+                    <Box flex={1} textAlign="center">
+                      <AttachmentUrl
+                        projectId={this.props.projectId}
+                        event={this.props.event}
+                        attachment={attachment}
+                      >
+                        {downloadUrl => (
+                          <Button
+                            size="xsmall"
+                            icon="icon-download"
+                            onClick={
+                              downloadUrl && (() => (window.location = downloadUrl))
+                            }
+                            disabled={!downloadUrl}
+                            title={
+                              !downloadUrl &&
+                              t('Insufficient permissions to download artifacts')
+                            }
+                          >
+                            {t('Download')}
+                          </Button>
+                        )}
+                      </AttachmentUrl>
+                    </Box>
                   </PanelItem>
                 );
               })}
diff --git a/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx b/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
index 8cd7fc92d6..92233131a1 100644
--- a/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
+++ b/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
@@ -8,6 +8,7 @@ import DateTime from 'app/components/dateTime';
 import DeviceName from 'app/components/deviceName';
 import FileSize from 'app/components/fileSize';
 import withOrganization from 'app/utils/withOrganization';
+import AttachmentUrl from 'app/utils/attachmentUrl';
 
 class EventsTableRow extends React.Component {
   static propTypes = {
@@ -39,20 +40,25 @@ class EventsTableRow extends React.Component {
   };
 
   renderCrashFileLink() {
-    const {orgId, event, projectId} = this.props;
+    const {event} = this.props;
     if (!event.crashFile) {
       return null;
     }
-    const url = `/api/0/projects/${orgId}/${projectId}/events/${event.id}/attachments/${
-      event.crashFile.id
-    }/?download=1`;
+
     const crashFileType =
       event.crashFile.type === 'event.minidump' ? 'Minidump' : 'Crash file';
+
     return (
-      <small>
-        {crashFileType}: <a href={url}>{event.crashFile.name}</a> (
-        <FileSize bytes={event.crashFile.size} />)
-      </small>
+      <AttachmentUrl>
+        {downloadUrl =>
+          downloadUrl && (
+            <small>
+              {crashFileType}: <a href={downloadUrl}>{event.crashFile.name}</a> (
+              <FileSize bytes={event.crashFile.size} />)
+            </small>
+          )
+        }
+      </AttachmentUrl>
     );
   }
 
diff --git a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
index ed9e1f9afd..3e338fc74d 100644
--- a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
@@ -208,6 +208,19 @@ const formGroups = [
         ),
         visible: ({features}) => features.has('event-attachments'),
       },
+      {
+        name: 'attachmentsRole',
+        type: 'array',
+        choices: ({initialData} = {}) =>
+          (initialData.availableRoles &&
+            initialData.availableRoles.map(r => [r.id, r.name])) ||
+          [],
+        label: t('Attachments Access'),
+        help: t(
+          'Permissions required to download event attachments, such as native crash reports or log files'
+        ),
+        visible: ({features}) => features.has('event-attachments'),
+      },
       {
         name: 'trustedRelays',
         type: 'string',
diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index d8fe6a7448..6c96f1c596 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -198,6 +198,16 @@ export const Event = PropTypes.shape({
   user: PropTypes.object,
 });
 
+export const EventAttachment = PropTypes.shape({
+  id: PropTypes.string.isRequired,
+  name: PropTypes.string.isRequired,
+  headers: PropTypes.object,
+  size: PropTypes.number.isRequired,
+  sha1: PropTypes.string.isRequired,
+  dateCreated: PropTypes.number,
+  type: PropTypes.string.isRequired,
+});
+
 export const EventError = PropTypes.shape({
   type: PropTypes.string.isRequired,
   message: PropTypes.string.isRequired,
@@ -944,6 +954,7 @@ const SentryTypes = {
   DiscoverResults,
   Environment,
   Event,
+  EventAttachment,
   Organization: PropTypes.shape({
     id: PropTypes.string.isRequired,
   }),
diff --git a/src/sentry/static/sentry/app/utils/attachmentUrl.jsx b/src/sentry/static/sentry/app/utils/attachmentUrl.jsx
new file mode 100644
index 0000000000..b1127d50ea
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/attachmentUrl.jsx
@@ -0,0 +1,55 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import SentryTypes from 'app/sentryTypes';
+import ConfigStore from 'app/stores/configStore';
+import MemberListStore from 'app/stores/memberListStore';
+import withOrganization from 'app/utils/withOrganization';
+
+class AttachmentUrl extends React.PureComponent {
+  static propTypes = {
+    organization: SentryTypes.Organization.isRequired,
+    projectId: PropTypes.string.isRequired,
+    event: SentryTypes.Event.isRequired,
+    attachment: SentryTypes.EventAttachment.isRequired,
+    children: PropTypes.func.isRequired,
+  };
+
+  hasAttachmentsRole() {
+    const user = ConfigStore.get('user');
+    if (!user) {
+      return false;
+    }
+
+    if (user.isSuperuser) {
+      return true;
+    }
+
+    const {availableRoles, attachmentsRole} = this.props.organization;
+    if (!Array.isArray(availableRoles)) {
+      return false;
+    }
+
+    const member = MemberListStore.getById(user.id);
+    const currentRole = member && member.role;
+
+    const roleIds = availableRoles.map(role => role.id);
+    const requiredIndex = roleIds.indexOf(attachmentsRole);
+    const currentIndex = roleIds.indexOf(currentRole);
+    return currentIndex >= requiredIndex;
+  }
+
+  getDownloadUrl(attachment) {
+    const {organization, event, projectId} = this.props;
+    return `/api/0/projects/${organization.id}/${projectId}/events/${
+      event.id
+    }/attachments/${attachment.id}/?download=1`;
+  }
+
+  render() {
+    const {attachment, children} = this.props;
+    return children(this.hasAttachmentsRole() ? this.getDownloadUrl(attachment) : null);
+  }
+}
+
+export default withOrganization(AttachmentUrl);
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index b32f34f20a..66ddc8b6c6 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -619,12 +619,12 @@ class PermissionTestCase(TestCase):
         self.team = self.create_team(organization=self.organization)
 
     def assert_can_access(self, user, path, method='GET', **kwargs):
-        self.login_as(user)
+        self.login_as(user, superuser=user.is_superuser)
         resp = getattr(self.client, method.lower())(path, **kwargs)
         assert resp.status_code >= 200 and resp.status_code < 300
 
     def assert_cannot_access(self, user, path, method='GET', **kwargs):
-        self.login_as(user)
+        self.login_as(user, superuser=user.is_superuser)
         resp = getattr(self.client, method.lower())(path, **kwargs)
         assert resp.status_code >= 300
 
diff --git a/tests/sentry/api/endpoints/test_event_attachment_details.py b/tests/sentry/api/endpoints/test_event_attachment_details.py
index 4ae2fb0378..23a8009a19 100644
--- a/tests/sentry/api/endpoints/test_event_attachment_details.py
+++ b/tests/sentry/api/endpoints/test_event_attachment_details.py
@@ -6,78 +6,65 @@ from datetime import datetime
 from six import BytesIO
 
 from sentry.models import EventAttachment, File
-from sentry.testutils import APITestCase
+from sentry.testutils import APITestCase, PermissionTestCase
 
 
-class EventAttachmentDetailsTest(APITestCase):
-    def test_simple(self):
-        self.login_as(user=self.user)
-
-        project = self.create_project()
-        release = self.create_release(project, self.user)
-        group = self.create_group(project=project, first_release=release)
-        event1 = self.create_event(
+class CreateAttachmentMixin(object):
+    def create_attachment(self):
+        self.project = self.create_project()
+        self.release = self.create_release(self.project, self.user)
+        self.group = self.create_group(project=self.project, first_release=self.release)
+        self.event = self.create_event(
             event_id='a',
-            group=group,
+            group=self.group,
             datetime=datetime(2016, 8, 13, 3, 8, 25),
-            tags={'sentry:release': release.version}
+            tags={'sentry:release': self.release.version}
+        )
+
+        self.file = File.objects.create(
+            name='hello.png',
+            type='image/png',
         )
-        attachment1 = EventAttachment.objects.create(
-            event_id=event1.event_id,
-            group_id=event1.group_id,
-            project_id=event1.project_id,
-            file=File.objects.create(
-                name='hello.png',
-                type='image/png',
-            ),
+        self.file.putfile(BytesIO('File contents here'))
+
+        self.attachment = EventAttachment.objects.create(
+            event_id=self.event.event_id,
+            group_id=self.event.group_id,
+            project_id=self.event.project_id,
+            file=self.file,
             name='hello.png',
         )
 
+        return self.attachment
+
+
+class EventAttachmentDetailsTest(APITestCase, CreateAttachmentMixin):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        self.create_attachment()
         path = u'/api/0/projects/{}/{}/events/{}/attachments/{}/'.format(
-            event1.project.organization.slug,
-            event1.project.slug,
-            event1.id,
-            attachment1.id,
+            self.organization.slug,
+            self.project.slug,
+            self.event.id,
+            self.attachment.id,
         )
 
         with self.feature('organizations:event-attachments'):
             response = self.client.get(path)
 
         assert response.status_code == 200, response.content
-        assert response.data['id'] == six.text_type(attachment1.id)
+        assert response.data['id'] == six.text_type(self.attachment.id)
 
     def test_download(self):
         self.login_as(user=self.user)
 
-        project = self.create_project()
-        release = self.create_release(project, self.user)
-        group = self.create_group(project=project, first_release=release)
-        event1 = self.create_event(
-            event_id='a',
-            group=group,
-            datetime=datetime(2016, 8, 13, 3, 8, 25),
-            tags={'sentry:release': release.version}
-        )
-
-        file1 = File.objects.create(
-            name='hello.png',
-            type='image/png',
-        )
-        file1.putfile(BytesIO('File contents here'))
-
-        attachment1 = EventAttachment.objects.create(
-            event_id=event1.event_id,
-            group_id=event1.group_id,
-            project_id=event1.project_id,
-            file=file1,
-            name='hello.png',
-        )
-
+        self.create_attachment()
         path = u'/api/0/projects/{}/{}/events/{}/attachments/{}/?download'.format(
-            event1.project.organization.slug,
-            event1.project.slug,
-            event1.id,
-            attachment1.id,
+            self.organization.slug,
+            self.project.slug,
+            self.event.id,
+            self.attachment.id,
         )
 
         with self.feature('organizations:event-attachments'):
@@ -85,6 +72,43 @@ class EventAttachmentDetailsTest(APITestCase):
 
         assert response.status_code == 200, response.content
         assert response.get('Content-Disposition') == 'attachment; filename="hello.png"'
-        assert response.get('Content-Length') == six.text_type(file1.size)
+        assert response.get('Content-Length') == six.text_type(self.file.size)
         assert response.get('Content-Type') == 'application/octet-stream'
         assert 'File contents here' == BytesIO(b"".join(response.streaming_content)).getvalue()
+
+
+class EventAttachmentDetailsPermissionTest(PermissionTestCase, CreateAttachmentMixin):
+    def setUp(self):
+        super(EventAttachmentDetailsPermissionTest, self).setUp()
+        self.create_attachment()
+        self.path = u'/api/0/projects/{}/{}/events/{}/attachments/{}/?download'.format(
+            self.organization.slug,
+            self.project.slug,
+            self.event.id,
+            self.attachment.id,
+        )
+
+    def test_member_can_access_by_default(self):
+        with self.feature('organizations:event-attachments'):
+            self.assert_member_can_access(self.path)
+            self.assert_can_access(self.owner, self.path)
+
+    def test_member_cannot_access_for_owner_role(self):
+        self.organization.update_option('sentry:attachments_role', 'owner')
+        with self.feature('organizations:event-attachments'):
+            self.assert_member_cannot_access(self.path)
+            self.assert_can_access(self.owner, self.path)
+
+    def test_random_user_cannot_access(self):
+        self.organization.update_option('sentry:attachments_role', 'owner')
+        user = self.create_user()
+
+        with self.feature('organizations:event-attachments'):
+            self.assert_cannot_access(user, self.path)
+
+    def test_superuser_can_access(self):
+        self.organization.update_option('sentry:attachments_role', 'owner')
+        superuser = self.create_user(is_superuser=True)
+
+        with self.feature('organizations:event-attachments'):
+            self.assert_can_access(superuser, self.path)
