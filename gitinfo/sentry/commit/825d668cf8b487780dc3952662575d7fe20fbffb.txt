commit 825d668cf8b487780dc3952662575d7fe20fbffb
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Jun 13 13:59:07 2019 -0700

    fix(environments): Fix project environment data not being loaded (#13676)
    
    The project environments component is now disconnected from the
    EnvironmentStore. Since we no longer need to load environments when we
    bootstrap the app, this component is now responsible for fetching its
    own data. This PR fixes a bug that caused the environment list to
    sometimes display as empty.

diff --git a/src/sentry/static/sentry/app/utils/environment.jsx b/src/sentry/static/sentry/app/utils/environment.jsx
new file mode 100644
index 0000000000..b014640e1b
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/environment.jsx
@@ -0,0 +1,12 @@
+import {toTitleCase} from 'app/utils';
+
+const DEFAULT_EMPTY_ROUTING_NAME = 'none';
+const DEFAULT_EMPTY_ENV_NAME = '(No Environment)';
+
+export function getUrlRoutingName(env) {
+  return encodeURIComponent(env.name) || DEFAULT_EMPTY_ROUTING_NAME;
+}
+
+export function getDisplayName(env) {
+  return toTitleCase(env.name) || DEFAULT_EMPTY_ENV_NAME;
+}
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectEnvironments.jsx b/src/sentry/static/sentry/app/views/settings/project/projectEnvironments.jsx
index f4b6d1e7e6..bf5a91c0f7 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectEnvironments.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectEnvironments.jsx
@@ -1,23 +1,17 @@
 import {Flex} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
-import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 
 import {ALL_ENVIRONMENTS_KEY} from 'app/constants';
 import {Panel, PanelHeader, PanelBody, PanelItem} from 'app/components/panels';
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
-import {
-  loadActiveEnvironments,
-  loadHiddenEnvironments,
-} from 'app/actionCreators/environments';
 import {t, tct} from 'app/locale';
 import Access from 'app/components/acl/access';
 import withApi from 'app/utils/withApi';
 import Button from 'app/components/button';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
-import EnvironmentStore from 'app/stores/environmentStore';
 import ListLink from 'app/components/links/listLink';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import NavTabs from 'app/components/navTabs';
@@ -26,6 +20,7 @@ import SentryTypes from 'app/sentryTypes';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import recreateRoute from 'app/utils/recreateRoute';
 import space from 'app/styles/space';
+import {getUrlRoutingName, getDisplayName} from 'app/utils/environment';
 
 const ProjectEnvironments = createReactClass({
   propTypes: {
@@ -34,64 +29,41 @@ const ProjectEnvironments = createReactClass({
     params: PropTypes.object,
   },
 
-  mixins: [Reflux.listenTo(EnvironmentStore, 'onEnvironmentsChange')],
-
   getInitialState() {
-    const isHidden = this.props.location.pathname.endsWith('hidden/');
-    const environments = isHidden
-      ? EnvironmentStore.getHidden()
-      : EnvironmentStore.getActive();
-
     return {
       project: null,
-      environments,
-      isHidden,
+      environments: null,
+      isLoading: true,
     };
   },
 
   componentDidMount() {
-    if (this.state.environments === null) {
-      this.fetchData(this.state.isHidden);
-    }
+    this.fetchData();
+  },
 
-    // Fetch project details instead of using project context to guarantee we have latest project details
-    this.fetchProjectDetails();
+  componentDidUpdate(prevProps) {
+    if (
+      this.props.location.pathname.endsWith('hidden/') !==
+      prevProps.location.pathname.endsWith('hidden/')
+    ) {
+      this.fetchData();
+    }
   },
 
-  componentWillReceiveProps(nextProps) {
+  fetchData() {
     const isHidden = this.props.location.pathname.endsWith('hidden/');
-    const environments = isHidden
-      ? EnvironmentStore.getHidden()
-      : EnvironmentStore.getActive();
 
-    this.setState(
-      {
-        isHidden,
-        environments,
-      },
-      () => {
-        if (environments === null) {
-          this.fetchData(isHidden);
-        }
-      }
-    );
-  },
-
-  refetchAll() {
-    this.fetchData(true);
-    this.fetchData(false);
-    this.fetchProjectDetails();
-  },
+    if (!this.state.isLoading) {
+      this.setState({isLoading: true});
+    }
 
-  fetchData(hidden) {
     const {orgId, projectId} = this.props.params;
     this.props.api.request(`/projects/${orgId}/${projectId}/environments/`, {
       query: {
-        visibility: hidden ? 'hidden' : 'visible',
+        visibility: isHidden ? 'hidden' : 'visible',
       },
-      success: env => {
-        const load = hidden ? loadHiddenEnvironments : loadActiveEnvironments;
-        load(env);
+      success: environments => {
+        this.setState({environments, isLoading: false});
       },
     });
   },
@@ -105,22 +77,12 @@ const ProjectEnvironments = createReactClass({
     });
   },
 
-  onEnvironmentsChange() {
-    const {isHidden} = this.state;
-
-    this.setState({
-      environments: isHidden
-        ? EnvironmentStore.getHidden()
-        : EnvironmentStore.getActive(),
-    });
-  },
-
   // Toggle visibility of environment
   toggleEnv(env, shouldHide) {
     const {orgId, projectId} = this.props.params;
 
     this.props.api.request(
-      `/projects/${orgId}/${projectId}/environments/${env.urlRoutingName}/`,
+      `/projects/${orgId}/${projectId}/environments/${getUrlRoutingName(env)}/`,
       {
         method: 'PUT',
         data: {
@@ -130,24 +92,24 @@ const ProjectEnvironments = createReactClass({
         success: e => {
           addSuccessMessage(
             tct('Updated [environment]', {
-              environment: env.displayName,
+              environment: getDisplayName(env),
             })
           );
         },
         error: err => {
           addErrorMessage(
             tct('Unable to update [environment]', {
-              environment: env.displayName,
+              environment: getDisplayName(env),
             })
           );
         },
-        complete: this.refetchAll,
+        complete: this.fetchData,
       }
     );
   },
 
   renderEmpty() {
-    const {isHidden} = this.state;
+    const isHidden = this.props.location.pathname.endsWith('hidden/');
     const message = isHidden
       ? t("You don't have any hidden environments.")
       : t("You don't have any environments yet.");
@@ -160,9 +122,10 @@ const ProjectEnvironments = createReactClass({
    * - "No Environment"
    *
    */
-  renderSystemRows() {
+  renderAllEnvironmentsSystemRow() {
     // Not available in "Hidden" tab
-    if (this.state.isHidden) {
+    const isHidden = this.props.location.pathname.endsWith('hidden/');
+    if (isHidden) {
       return null;
     }
     return (
@@ -170,7 +133,6 @@ const ProjectEnvironments = createReactClass({
         name={ALL_ENVIRONMENTS_KEY}
         environment={{
           id: ALL_ENVIRONMENTS_KEY,
-          displayName: t('All Environments'),
           name: ALL_ENVIRONMENTS_KEY,
         }}
         isSystemRow
@@ -179,12 +141,12 @@ const ProjectEnvironments = createReactClass({
   },
 
   renderEnvironmentList(envs) {
-    const {isHidden} = this.state;
+    const isHidden = this.props.location.pathname.endsWith('hidden/');
     const buttonText = isHidden ? t('Show') : t('Hide');
 
     return (
       <React.Fragment>
-        {this.renderSystemRows()}
+        {this.renderAllEnvironmentsSystemRow()}
         {envs.map(env => {
           return (
             <EnvironmentRow
@@ -202,14 +164,26 @@ const ProjectEnvironments = createReactClass({
     );
   },
 
-  render() {
-    const {environments} = this.state;
-    const {routes, params} = this.props;
+  renderBody() {
+    const {environments, isLoading} = this.state;
 
-    if (environments === null) {
+    if (isLoading) {
       return <LoadingIndicator />;
     }
 
+    return (
+      <PanelBody>
+        {environments.length
+          ? this.renderEnvironmentList(environments)
+          : this.renderEmpty()}
+      </PanelBody>
+    );
+  },
+
+  render() {
+    const {routes, params, location} = this.props;
+    const isHidden = location.pathname.endsWith('hidden/');
+
     const baseUrl = recreateRoute('', {routes, params, stepBack: -1});
     return (
       <div>
@@ -217,14 +191,10 @@ const ProjectEnvironments = createReactClass({
           title={t('Manage Environments')}
           tabs={
             <NavTabs underlined={true}>
-              <ListLink to={baseUrl} index={true} isActive={() => !this.state.isHidden}>
+              <ListLink to={baseUrl} index={true} isActive={() => !isHidden}>
                 {t('Environments')}
               </ListLink>
-              <ListLink
-                to={`${baseUrl}hidden/`}
-                index={true}
-                isActive={() => this.state.isHidden}
-              >
+              <ListLink to={`${baseUrl}hidden/`} index={true} isActive={() => isHidden}>
                 {t('Hidden')}
               </ListLink>
             </NavTabs>
@@ -233,15 +203,8 @@ const ProjectEnvironments = createReactClass({
         <PermissionAlert />
 
         <Panel>
-          <PanelHeader>
-            {this.state.isHidden ? t('Hidden') : t('Active Environments')}
-          </PanelHeader>
-
-          <PanelBody>
-            {environments.length
-              ? this.renderEnvironmentList(environments)
-              : this.renderEmpty()}
-          </PanelBody>
+          <PanelHeader>{isHidden ? t('Hidden') : t('Active Environments')}</PanelHeader>
+          {this.renderBody()}
         </Panel>
       </div>
     );
@@ -264,7 +227,7 @@ class EnvironmentRow extends React.Component {
     return (
       <PanelItem align="center" justify="space-between">
         <Flex align="center">
-          {isSystemRow ? environment.displayName : environment.name}
+          {isSystemRow ? t('All Environments') : environment.name}
         </Flex>
         <Access access={['project:write']}>
           {({hasAccess}) => (
diff --git a/tests/js/spec/views/settings/__snapshots__/projectEnvironments.spec.jsx.snap b/tests/js/spec/views/settings/__snapshots__/projectEnvironments.spec.jsx.snap
index 92eb0d4b7a..8757579524 100644
--- a/tests/js/spec/views/settings/__snapshots__/projectEnvironments.spec.jsx.snap
+++ b/tests/js/spec/views/settings/__snapshots__/projectEnvironments.spec.jsx.snap
@@ -1167,10 +1167,9 @@ exports[`ProjectEnvironments render hidden renders environment list 1`] = `
                 actionText="Show"
                 environment={
                   Object {
-                    "displayName": "Zzz",
                     "id": "1",
+                    "isHidden": true,
                     "name": "zzz",
-                    "urlRoutingName": "zzz",
                   }
                 }
                 isHidden={true}
diff --git a/tests/js/spec/views/settings/projectEnvironments.spec.jsx b/tests/js/spec/views/settings/projectEnvironments.spec.jsx
index 94e0c92f75..d9af2b490f 100644
--- a/tests/js/spec/views/settings/projectEnvironments.spec.jsx
+++ b/tests/js/spec/views/settings/projectEnvironments.spec.jsx
@@ -1,7 +1,6 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
-import EnvironmentStore from 'app/stores/environmentStore';
 import ProjectEnvironments from 'app/views/settings/project/projectEnvironments';
 import recreateRoute from 'app/utils/recreateRoute';
 import {ALL_ENVIRONMENTS_KEY} from 'app/constants';
@@ -45,7 +44,11 @@ describe('ProjectEnvironments', function() {
 
   describe('render active', function() {
     it('renders empty message', function() {
-      EnvironmentStore.loadInitialData([]);
+      MockApiClient.addMockResponse({
+        url: '/projects/org-slug/project-slug/environments/',
+        body: [],
+      });
+
       const wrapper = mountComponent(false);
       const errorMessage = wrapper.find('div').first();
 
@@ -54,7 +57,10 @@ describe('ProjectEnvironments', function() {
     });
 
     it('renders environment list', async function() {
-      EnvironmentStore.loadInitialData(TestStubs.Environments(false));
+      MockApiClient.addMockResponse({
+        url: '/projects/org-slug/project-slug/environments/',
+        body: TestStubs.Environments(false),
+      });
       const wrapper = mountComponent(false);
 
       const productionRow = wrapper.find('EnvironmentRow[name="production"]');
@@ -65,7 +71,10 @@ describe('ProjectEnvironments', function() {
 
   describe('render hidden', function() {
     it('renders empty message', function() {
-      EnvironmentStore.loadHiddenData([]);
+      MockApiClient.addMockResponse({
+        url: '/projects/org-slug/project-slug/environments/',
+        body: [],
+      });
 
       const wrapper = mountComponent(true);
       const errorMessage = wrapper.find('div').first();
@@ -76,7 +85,10 @@ describe('ProjectEnvironments', function() {
     });
 
     it('renders environment list', function() {
-      EnvironmentStore.loadHiddenData(TestStubs.Environments(true));
+      MockApiClient.addMockResponse({
+        url: '/projects/org-slug/project-slug/environments/',
+        body: TestStubs.Environments(true),
+      });
       const wrapper = mountComponent(true);
 
       // Hidden buttons should not have "Set as default"
@@ -103,7 +115,11 @@ describe('ProjectEnvironments', function() {
       });
     });
     it('hides', function() {
-      EnvironmentStore.loadInitialData(TestStubs.Environments(false));
+      MockApiClient.addMockResponse({
+        url: baseUrl,
+        body: TestStubs.Environments(false),
+      });
+
       const wrapper = mountComponent(false);
       wrapper.find('EnvironmentRow[name="production"] Button').simulate('click');
       expect(hideMock).toHaveBeenCalledWith(
@@ -115,15 +131,18 @@ describe('ProjectEnvironments', function() {
     });
 
     it('hides names requiring encoding', function() {
+      MockApiClient.addMockResponse({
+        url: baseUrl,
+        body: [{id: '1', name: '%app_env%', isHidden: false}],
+      });
+
       hideMock = MockApiClient.addMockResponse({
         url: `${baseUrl}%25app_env%25/`,
         method: 'PUT',
       });
 
-      const environments = [{id: '1', name: '%app_env%', isHidden: false}];
-      EnvironmentStore.loadInitialData(environments);
-
       const wrapper = mountComponent(false);
+
       wrapper
         .find('EnvironmentRow[name="%app_env%"] button[aria-label="Hide"]')
         .simulate('click');
@@ -136,7 +155,11 @@ describe('ProjectEnvironments', function() {
     });
 
     it('shows', function() {
-      EnvironmentStore.loadHiddenData(TestStubs.Environments(true));
+      MockApiClient.addMockResponse({
+        url: baseUrl,
+        body: TestStubs.Environments(true),
+      });
+
       const wrapper = mountComponent(true);
       wrapper.find('EnvironmentRow[name="zzz"] Button').simulate('click');
       expect(showMock).toHaveBeenCalledWith(
@@ -148,7 +171,11 @@ describe('ProjectEnvironments', function() {
     });
 
     it('does not have "All Enviroments" rows', function() {
-      EnvironmentStore.loadHiddenData(TestStubs.Environments(true));
+      MockApiClient.addMockResponse({
+        url: baseUrl,
+        body: TestStubs.Environments(true),
+      });
+
       const wrapper = mountComponent(true);
       expect(wrapper.find(`EnvironmentRow[name="${ALL_ENVIRONMENTS_KEY}"]`)).toHaveLength(
         0
