commit c659f57ae6fe6de120836de001f0033fd72edfe6
Author: Max Bittker <maxbittker@gmail.com>
Date:   Thu Feb 1 11:01:36 2018 -0800

    Org Settings Team and Project breakout (#7034)

diff --git a/src/sentry/static/sentry/app/__mocks__/api.jsx b/src/sentry/static/sentry/app/__mocks__/api.jsx
index b88fb9bdc1..26b528d2da 100644
--- a/src/sentry/static/sentry/app/__mocks__/api.jsx
+++ b/src/sentry/static/sentry/app/__mocks__/api.jsx
@@ -27,6 +27,7 @@ class Client {
         statusCode: 200,
         body: '',
         method: 'GET',
+        callCount: 0,
         ...response,
       },
       mock,
@@ -40,7 +41,7 @@ class Client {
       return url === response.url && (options.method || 'GET') === response.method;
     });
   }
-
+  // In the real client, this clears in-flight responses. It's NOT clearMockResponses. You probably don't want to call this from a test.
   clear() {}
 
   static mockAsync = false;
@@ -89,7 +90,6 @@ class Client {
 
       // mock gets returned when we add a mock response, will represent calls to api.request
       mock(url, options);
-
       if (response.statusCode !== 200) {
         response.callCount++;
         let resp = {
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index b597078f80..a89340cd67 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -103,6 +103,7 @@ import TeamCreate from './views/teamCreate';
 import TeamDetails from './views/teamDetails';
 import TeamMembers from './views/teamMembers';
 import TeamSettings from './views/teamSettings';
+import TeamProjects from './views/settings/team/teamProjects';
 import errorHandler from './utils/errorHandler';
 
 function appendTrailingSlash(nextState, replace) {
@@ -479,6 +480,7 @@ function routes() {
         <IndexRedirect to="settings/" />
         <Route path="settings/" name="Settings" component={errorHandler(TeamSettings)} />
         <Route path="members/" name="Members" component={errorHandler(TeamMembers)} />
+        <Route path="projects/" name="Projects" component={errorHandler(TeamProjects)} />
       </Route>
     </Route>,
 
diff --git a/src/sentry/static/sentry/app/stores/projectsStore.jsx b/src/sentry/static/sentry/app/stores/projectsStore.jsx
index 388dce8eb2..a0bfa43a41 100644
--- a/src/sentry/static/sentry/app/stores/projectsStore.jsx
+++ b/src/sentry/static/sentry/app/stores/projectsStore.jsx
@@ -12,13 +12,11 @@ const ProjectsStore = Reflux.createStore({
   },
 
   reset() {
-    this.items = [];
     this.itemsById = {};
   },
 
   loadInitialData(items) {
-    this.items = items;
-    this.itemsById = this.items.reduce((map, project) => {
+    this.itemsById = items.reduce((map, project) => {
       map[project.id] = project;
       return map;
     }, {});
@@ -26,7 +24,6 @@ const ProjectsStore = Reflux.createStore({
   },
 
   onCreateSuccess(project) {
-    this.items.push(project);
     this.itemsById[project.id] = project;
     this.trigger(new Set([project.id]));
   },
@@ -49,11 +46,11 @@ const ProjectsStore = Reflux.createStore({
   },
 
   getAll() {
-    return this.items;
+    return Object.values(this.itemsById);
   },
 
   getAllGroupedByOrganization() {
-    return this.items.reduce((acc, project) => {
+    return this.getAll().reduce((acc, project) => {
       const orgSlug = project.organization.slug;
       if (acc[orgSlug]) {
         acc[orgSlug].projects.push(project);
@@ -68,11 +65,11 @@ const ProjectsStore = Reflux.createStore({
   },
 
   getById(id) {
-    return this.items.find(project => project.id === id);
+    return this.getAll().find(project => project.id === id);
   },
 
   getBySlug(slug) {
-    return this.items.find(project => project.slug === slug);
+    return this.getAll().find(project => project.slug === slug);
   },
 });
 
diff --git a/src/sentry/static/sentry/app/stores/teamStore.jsx b/src/sentry/static/sentry/app/stores/teamStore.jsx
index 7608170194..e8ab6e087f 100644
--- a/src/sentry/static/sentry/app/stores/teamStore.jsx
+++ b/src/sentry/static/sentry/app/stores/teamStore.jsx
@@ -31,6 +31,7 @@ const TeamStore = Reflux.createStore({
     if (!response) return;
 
     let item = this.getBySlug(itemId);
+
     if (!item) {
       this.items.push(response);
     } else {
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index 68650f59d2..148092a5fb 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -269,6 +269,17 @@ export function extractMultilineFields(value) {
     .filter(f => f !== '');
 }
 
+function projectDisplayCompare(a, b) {
+  if (a.isBookmarked !== b.isBookmarked) {
+    return a.isBookmarked ? -1 : 1;
+  }
+  return a.id < b.id;
+}
+
+// Sort a list of projects by bookmarkedness, then by id
+export function sortProjects(projects) {
+  return projects.sort(projectDisplayCompare);
+}
 // re-export under utils
 export {parseLinkHeader, deviceNameMapper, Collection, PendingChangeQueue, CursorPoller};
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsProjectItem.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsProjectItem.jsx
new file mode 100644
index 0000000000..7b77820dea
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsProjectItem.jsx
@@ -0,0 +1,88 @@
+import styled from 'react-emotion';
+import React from 'react';
+
+import createReactClass from 'create-react-class';
+import theme from '../../../utils/theme';
+
+import {update} from '../../../actionCreators/projects';
+import ApiMixin from '../../../mixins/apiMixin';
+import Tooltip from '../../../components/tooltip';
+
+import Link from '../../../components/link';
+import ProjectLabel from '../../../components/projectLabel';
+import SentryTypes from '../../../proptypes';
+
+const InlineButton = styled('button')`
+  color: ${p => p.theme.gray3};
+  border: none;
+  background-color: inherit;
+  padding: 0;
+`;
+
+const ProjectItem = createReactClass({
+  displayName: 'ProjectItem',
+
+  propTypes: {
+    project: SentryTypes.Project,
+    organization: SentryTypes.Organization,
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      isBookmarked: this.props.project.isBookmarked,
+    };
+  },
+
+  componentWillReceiveProps(nextProps) {
+    // Local bookmarked state should be unset when the project data changes
+    // Local state is used for optimistic UI update
+    if (this.state.isBookmarked !== nextProps.project.isBookmarked) {
+      this.setState({isBookmarked: nextProps.project.isBookmarked});
+    }
+  },
+
+  handleToggleBookmark() {
+    let {project, organization} = this.props;
+    let {isBookmarked} = this.state;
+
+    this.setState({isBookmarked: !isBookmarked}, () =>
+      update(this.api, {
+        orgId: organization.slug,
+        projectId: project.slug,
+        data: {
+          isBookmarked: this.state.isBookmarked,
+        },
+      })
+    );
+  },
+
+  render() {
+    let {project, organization} = this.props;
+    let org = organization;
+    let {isBookmarked} = this.state;
+
+    return (
+      <div key={project.id} className={isBookmarked ? 'isBookmarked' : null}>
+        <Tooltip title={isBookmarked ? 'Remove from bookmarks' : 'Add to bookmarks'}>
+          <InlineButton onClick={() => this.handleToggleBookmark()}>
+            {isBookmarked ? (
+              <span className="icon-star-solid bookmark" />
+            ) : (
+              <span className="icon-star-outline bookmark" />
+            )}
+          </InlineButton>
+        </Tooltip>
+        <Link
+          to={`/settings/organization/${org.slug}/project/${project.slug}/`}
+          css={{color: theme.gray3}}
+        >
+          <ProjectLabel project={project} organization={this.props.organization} />
+        </Link>
+      </div>
+    );
+  },
+});
+
+export default ProjectItem;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
index 733f949b1a..bcf40e8b6b 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
@@ -11,9 +11,13 @@ const organizationNavigation = [
         title: 'General Settings',
         show: ({access}) => access.has('org:write'),
       },
+      {
+        path: `${pathPrefix}/projects/`,
+        title: t('Projects'),
+      },
       {
         path: `${pathPrefix}/teams/`,
-        title: t('Projects & Teams'),
+        title: t('Teams'),
       },
       {
         path: `${pathPrefix}/stats/`,
diff --git a/src/sentry/static/sentry/app/views/settings/organization/projects/components/projectListItem.jsx b/src/sentry/static/sentry/app/views/settings/organization/projects/components/projectListItem.jsx
deleted file mode 100644
index 4f1fd055c9..0000000000
--- a/src/sentry/static/sentry/app/views/settings/organization/projects/components/projectListItem.jsx
+++ /dev/null
@@ -1,114 +0,0 @@
-import styled from 'react-emotion';
-import LazyLoad from 'react-lazy-load';
-import React from 'react';
-
-import createReactClass from 'create-react-class';
-
-import {update} from '../../../../../actionCreators/projects';
-import ApiMixin from '../../../../../mixins/apiMixin';
-import TooltipMixin from '../../../../../mixins/tooltip';
-import BarChart from '../../../../../components/barChart';
-import Link from '../../../../../components/link';
-import ProjectLabel from '../../../../../components/projectLabel';
-import SentryTypes from '../../../../../proptypes';
-
-const StyledChartCell = styled.td`
-  text-align: right;
-  justify-content: flex-end;
-  width: 200px;
-`;
-
-const ProjectListItem = createReactClass({
-  displayName: 'ProjectListItem',
-
-  propTypes: {
-    project: SentryTypes.Project,
-    organization: SentryTypes.Organization,
-  },
-
-  mixins: [
-    ApiMixin,
-    TooltipMixin(function() {
-      return {
-        selector: '.tip',
-        title: function(instance) {
-          return this.getAttribute('data-isbookmarked') === 'true'
-            ? 'Remove from bookmarks'
-            : 'Add to bookmarks';
-        },
-      };
-    }),
-  ],
-
-  getInitialState() {
-    return {
-      bookmarked: null,
-    };
-  },
-
-  componentWillReceiveProps(nextProps) {
-    // Local bookmarked state should be unset when the project data changes
-    // Local state is used for optimistic UI update
-    if (nextProps.project.isBookmarked !== this.props.project.isBookmarked) {
-      this.setState({bookmarked: null});
-    }
-  },
-
-  toggleBookmark() {
-    let {project, organization} = this.props;
-
-    this.setState({bookmarked: !project.isBookmarked}, () =>
-      update(this.api, {
-        orgId: organization.slug,
-        projectId: project.slug,
-        data: {
-          isBookmarked: !project.isBookmarked,
-        },
-      })
-    );
-  },
-
-  render() {
-    let {project, organization} = this.props;
-    let org = organization;
-    let chartData =
-      project.stats &&
-      project.stats.map(point => {
-        return {x: point[0], y: point[1]};
-      });
-    let isBookmarked = this.state.bookmarked || project.isBookmarked;
-
-    return (
-      <tr key={project.id} className={isBookmarked ? 'isBookmarked' : null}>
-        <td>
-          <h5>
-            <a
-              onClick={this.toggleBookmark}
-              className="tip"
-              data-isbookmarked={isBookmarked}
-            >
-              {isBookmarked ? (
-                <span className="icon-star-solid bookmark" />
-              ) : (
-                <span className="icon-star-outline bookmark" />
-              )}
-            </a>
-            <Link to={`/settings/organization/${org.slug}/project/${project.slug}/`}>
-              <ProjectLabel project={project} organization={this.props.organization} />
-            </Link>
-          </h5>
-        </td>
-
-        <StyledChartCell>
-          {chartData && (
-            <LazyLoad>
-              <BarChart height={20} points={chartData} label="events" />
-            </LazyLoad>
-          )}
-        </StyledChartCell>
-      </tr>
-    );
-  },
-});
-
-export default ProjectListItem;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/projects/organizationProjectsView.jsx b/src/sentry/static/sentry/app/views/settings/organization/projects/organizationProjectsView.jsx
index d10ac8fac8..a1244f0b94 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/projects/organizationProjectsView.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/projects/organizationProjectsView.jsx
@@ -1,15 +1,21 @@
 import React from 'react';
 import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
+import {Box} from 'grid-emotion';
 
 import {loadStats} from '../../../../actionCreators/projects';
 import {t} from '../../../../locale';
 import ApiMixin from '../../../../mixins/apiMixin';
 import OrganizationSettingsView from '../../../organizationSettingsView';
-import ProjectListItem from './components/projectListItem';
+import ProjectStatsGraph from './projectStatsGraph';
 import ProjectsStore from '../../../../stores/projectsStore';
 import SentryTypes from '../../../../proptypes';
-import SpreadLayout from '../../../../components/spreadLayout';
+import {sortProjects} from '../../../../utils';
+import Panel from '../../components/panel';
+import PanelItem from '../../components/panelItem';
+import PanelHeader from '../../components/panelHeader';
+import PanelBody from '../../components/panelBody';
+import ProjectListItem from '../../../settings/components/settingsProjectItem';
 
 class OrganizationProjectsView extends OrganizationSettingsView {
   static contextTypes = {
@@ -26,36 +32,36 @@ class OrganizationProjectsView extends OrganizationSettingsView {
 
     return (
       <div>
-        <SpreadLayout className="page-header">
-          <h3>{t('Projects')}</h3>
-        </SpreadLayout>
-
-        <table className="table table-no-top-border m-b-0">
-          <tbody>
-            {projects
-              .sort(({isBookmarked}) => (isBookmarked ? -1 : 1))
-              .map(project => (
-                <ProjectListItem
-                  key={project.slug}
-                  project={project}
-                  organization={this.context.organization}
-                />
-              ))}
-          </tbody>
-        </table>
+        <Panel className="table table-no-top-border m-b-0">
+          <PanelHeader>{t('Projects')}</PanelHeader>
+          <PanelBody css={{width: '100%'}}>
+            {sortProjects(projects).map((project, i) => (
+              <PanelItem key={project.id} align="center">
+                <Box w={1 / 2} p={2} flex="1">
+                  <ProjectListItem
+                    project={project}
+                    organization={this.context.organization}
+                  />
+                </Box>
+                <Box w={1 / 2} p={2}>
+                  <ProjectStatsGraph key={project.id} project={project} />
+                </Box>
+              </PanelItem>
+            ))}
+          </PanelBody>
+        </Panel>
       </div>
     );
   }
 }
 
-// reflux :(
 const OrganizationProjectsViewContainer = createReactClass({
   displayName: 'OrganizationProjectsViewContainer',
   mixins: [ApiMixin, Reflux.listenTo(ProjectsStore, 'onProjectUpdate')],
 
   getInitialState() {
     return {
-      projects: Array.from(ProjectsStore.getAll().values()),
+      projects: ProjectsStore.getAll(),
     };
   },
 
@@ -70,15 +76,14 @@ const OrganizationProjectsViewContainer = createReactClass({
     });
   },
 
-  onProjectUpdate(projects) {
-    // loadInitialData returns a list of ids
+  onProjectUpdate() {
     this.setState({
-      projects: Array.from(ProjectsStore.getAll().values()),
+      projects: ProjectsStore.getAll(),
     });
   },
 
   render() {
-    return <OrganizationProjectsView projects={this.state.projects} />;
+    return <OrganizationProjectsView {...this.props} projects={this.state.projects} />;
   },
 });
 
diff --git a/src/sentry/static/sentry/app/views/settings/organization/projects/projectStatsGraph.jsx b/src/sentry/static/sentry/app/views/settings/organization/projects/projectStatsGraph.jsx
new file mode 100644
index 0000000000..d203b3746a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organization/projects/projectStatsGraph.jsx
@@ -0,0 +1,36 @@
+import LazyLoad from 'react-lazy-load';
+import React from 'react';
+
+import createReactClass from 'create-react-class';
+
+import BarChart from '../../../../components/barChart';
+import SentryTypes from '../../../../proptypes';
+
+const ProjectStatsGraph = createReactClass({
+  displayName: 'ProjectListItem',
+
+  propTypes: {
+    project: SentryTypes.Project,
+  },
+
+  render() {
+    let {project} = this.props;
+    let chartData =
+      project.stats &&
+      project.stats.map(point => {
+        return {x: point[0], y: point[1]};
+      });
+
+    return (
+      <div>
+        {chartData && (
+          <LazyLoad>
+            <BarChart height={30} points={chartData} label="events" />
+          </LazyLoad>
+        )}
+      </div>
+    );
+  },
+});
+
+export default ProjectStatsGraph;
diff --git a/src/sentry/static/sentry/app/views/settings/team/organizationTeamsView.jsx b/src/sentry/static/sentry/app/views/settings/team/organizationTeamsView.jsx
index 67108b45bd..e61e8e16ca 100644
--- a/src/sentry/static/sentry/app/views/settings/team/organizationTeamsView.jsx
+++ b/src/sentry/static/sentry/app/views/settings/team/organizationTeamsView.jsx
@@ -3,7 +3,6 @@ import React from 'react';
 
 import SentryTypes from '../../../proptypes';
 import {t} from '../../../locale';
-import ExpandedTeamList from './expandedTeamList';
 import AllTeamsList from './allTeamsList';
 import ListLink from '../../../components/listLink';
 import recreateRoute from '../../../utils/recreateRoute';
@@ -13,7 +12,6 @@ class OrganizationTeamsView extends React.Component {
   static propTypes = {
     allTeams: PropTypes.arrayOf(SentryTypes.Team),
     activeTeams: PropTypes.arrayOf(SentryTypes.Team),
-    projectStats: PropTypes.array,
     organization: SentryTypes.Organization,
     access: PropTypes.object,
     features: PropTypes.object,
@@ -26,7 +24,6 @@ class OrganizationTeamsView extends React.Component {
     let {
       allTeams,
       activeTeams,
-      projectStats,
       organization,
       access,
       features,
@@ -52,25 +49,19 @@ class OrganizationTeamsView extends React.Component {
 
     return (
       <div className="team-list">
-        <SettingsPageHeader title={t('Projects & Teams')} tabs={tabs} />
-        {route.allTeams /* should be AllTeamsList */ ? (
-          <AllTeamsList
-            urlPrefix={urlPrefix}
-            organization={org}
-            teamList={allTeams}
-            access={access}
-            openMembership={features.has('open-membership') || access.has('org:write')}
-          />
-        ) : (
-          <ExpandedTeamList
-            urlPrefix={urlPrefix}
-            organization={org}
-            teamList={activeTeams}
-            projectStats={projectStats}
-            hasTeams={allTeams.length !== 0}
-            access={access}
-          />
-        )}
+        <SettingsPageHeader title={t('Teams')} tabs={tabs} />
+        <AllTeamsList
+          urlPrefix={urlPrefix}
+          organization={org}
+          teamList={route.allTeams ? allTeams : activeTeams}
+          access={access}
+          openMembership={
+            !!(
+              route.allTeams &&
+              (features.has('open-membership') || access.has('org:write'))
+            )
+          }
+        />
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/team/teamProjects.jsx b/src/sentry/static/sentry/app/views/settings/team/teamProjects.jsx
new file mode 100644
index 0000000000..c37faf7ca1
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/team/teamProjects.jsx
@@ -0,0 +1,130 @@
+import React from 'react';
+import createReactClass from 'create-react-class';
+import {Box} from 'grid-emotion';
+import Reflux from 'reflux';
+
+import ApiMixin from '../../../mixins/apiMixin';
+import ProjectsStore from '../../../stores/projectsStore';
+import TeamStore from '../../../stores/teamStore';
+import IndicatorStore from '../../../stores/indicatorStore';
+import TeamActions from '../../../actions/teamActions';
+import Button from '../../../components/buttons/button';
+import LoadingError from '../../../components/loadingError';
+import OrganizationState from '../../../mixins/organizationState';
+import ProjectListItem from '../components/settingsProjectItem';
+import Panel from '../components/panel';
+import PanelItem from '../components/panelItem';
+import PanelHeader from '../components/panelHeader';
+import PanelBody from '../components/panelBody';
+
+import {sortProjects} from '../../../utils';
+import {t} from '../../../locale';
+
+const TeamProjects = createReactClass({
+  displayName: 'TeamProjects',
+  mixins: [
+    ApiMixin,
+    OrganizationState,
+    Reflux.listenTo(ProjectsStore, 'onProjectUpdate'),
+    Reflux.listenTo(TeamStore, 'onTeamUpdate'),
+  ],
+
+  getInitialState() {
+    let team = TeamStore.getBySlug(this.props.params.teamId);
+    return {
+      allProjects: ProjectsStore.getAll(),
+      error: false,
+      projectListLinked: team ? team.projects : [],
+    };
+  },
+
+  componentWillReceiveProps(nextProps) {
+    let params = this.props.params;
+    if (
+      nextProps.params.teamId !== params.teamId ||
+      nextProps.params.orgId !== params.orgId
+    ) {
+      this.setState(this.getInitialState());
+    }
+  },
+
+  onProjectUpdate() {
+    this.setState({
+      allProjects: ProjectsStore.getAll(),
+    });
+  },
+
+  onTeamUpdate() {
+    this.setState({
+      projectListLinked: TeamStore.getBySlug(this.props.params.teamId).projects,
+    });
+  },
+
+  handleLinkProject(project, value) {
+    let {orgId, teamId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${project.slug}/teams/${teamId}/`, {
+      method: value === 'Add' ? 'POST' : 'DELETE',
+      success: () => {
+        let team = TeamStore.getBySlug(this.props.params.teamId);
+        if (value == 'Add') {
+          team.projects = [...team.projects, project];
+        } else {
+          team.projects = team.projects.filter(({id}) => id != project.id);
+        }
+        TeamActions.updateSuccess(0, teamId, team);
+      },
+      error: e => {
+        IndicatorStore.addError("Wasn't able to change project association.");
+      },
+    });
+  },
+
+  projectPanelcontents(projects, direction) {
+    return sortProjects(projects).map((project, i) => (
+      <PanelItem key={project.id} align="center">
+        <Box w={1 / 2} p={2} flex="1">
+          <ProjectListItem project={project} organization={this.context.organization} />
+        </Box>
+        <Box w={1 / 2} p={2} css={{textAlign: 'right'}}>
+          <Button
+            size="small"
+            onClick={() => {
+              this.handleLinkProject(project, direction);
+            }}
+          >
+            {direction}
+          </Button>
+        </Box>
+      </PanelItem>
+    ));
+  },
+
+  render() {
+    if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
+
+    let {projectListLinked, allProjects} = this.state;
+
+    let linkedProjects = allProjects.filter(p =>
+      projectListLinked.find(l => l.id === p.id)
+    );
+
+    let otherProjects = allProjects.filter(
+      p => !projectListLinked.find(l => l.id === p.id)
+    );
+
+    return (
+      <div>
+        <Panel>
+          <PanelHeader>{t('Associated Projects:')}</PanelHeader>
+          <PanelBody>{this.projectPanelcontents(linkedProjects, 'Remove')}</PanelBody>
+        </Panel>
+        <Panel>
+          <PanelHeader>{t('Other Projects:')}</PanelHeader>
+          <PanelBody>{this.projectPanelcontents(otherProjects, 'Add')}</PanelBody>
+        </Panel>
+      </div>
+    );
+  },
+});
+
+export default TeamProjects;
diff --git a/src/sentry/static/sentry/app/views/teamDetails.jsx b/src/sentry/static/sentry/app/views/teamDetails.jsx
index b9a1ab18f6..7b62459d10 100644
--- a/src/sentry/static/sentry/app/views/teamDetails.jsx
+++ b/src/sentry/static/sentry/app/views/teamDetails.jsx
@@ -91,6 +91,9 @@ const TeamDetails = createReactClass({
     let routePrefix = recreateRoute('', {routes, params, stepBack: -1}); //`/organizations/${orgId}/teams/${teamId}`;
     let access = this.getAccess();
 
+    //TODO(maxbittker) remove hack to not show this page on old settings
+    let onNewSettings = routePrefix.startsWith('/settings/');
+
     return (
       <div>
         <h3>{team.name}</h3>
@@ -104,6 +107,9 @@ const TeamDetails = createReactClass({
         <ul className="nav nav-tabs border-bottom">
           <ListLink to={`${routePrefix}settings/`}>{t('Settings')}</ListLink>
           <ListLink to={`${routePrefix}members/`}>{t('Members')}</ListLink>
+          {onNewSettings ? (
+            <ListLink to={`${routePrefix}projects/`}>{t('Projects')}</ListLink>
+          ) : null}
         </ul>
 
         {children &&
diff --git a/tests/js/setup.js b/tests/js/setup.js
index d45c9a4a1d..9a1a825c58 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -3,7 +3,7 @@ import sinon from 'sinon';
 import ConfigStore from 'app/stores/configStore';
 import MockDate from 'mockdate';
 import PropTypes from 'prop-types';
-
+import SentryTypes from 'app/proptypes';
 import Enzyme from 'enzyme';
 import Adapter from 'enzyme-adapter-react-16';
 
@@ -54,6 +54,19 @@ window.TestStubs = {
     },
   }),
 
+  routerOrganizationContext: () => ({
+    context: {
+      location: TestStubs.location(),
+      router: TestStubs.router(),
+      organization: TestStubs.Organization(),
+    },
+    childContextTypes: {
+      router: PropTypes.object,
+      location: PropTypes.object,
+      organization: SentryTypes.Organization,
+    },
+  }),
+
   AccountAppearance: () => {
     return {
       stacktrace_order: '2',
@@ -411,6 +424,7 @@ window.TestStubs = {
       id: '1',
       slug: 'team-slug',
       name: 'Team Name',
+      projects: [],
       ...params,
     };
   },
diff --git a/tests/js/spec/views/__snapshots__/organizationProjects.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationProjects.spec.jsx.snap
new file mode 100644
index 0000000000..fd6a9cacea
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/organizationProjects.spec.jsx.snap
@@ -0,0 +1,353 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`OrganizationProjectsView render() Should render the projects in the store 1`] = `
+.glamor-22 {
+  width: 100%;
+}
+
+.glamor-24 {
+  background: #fff;
+  border: 1px solid;
+  margin-bottom: 30px;
+  position: relative;
+}
+
+.glamor-7 {
+  border-bottom: 1px solid;
+  border-radius: 0 0;
+  text-transform: uppercase;
+  font-size: 13px;
+  line-height: 1;
+  padding: 15px 20px;
+}
+
+.glamor-3 {
+  font-size: inherit;
+  text-transform: inherit;
+  margin: 0;
+}
+
+.glamor-1 {
+  font-size: 12px;
+  font-weight: 600;
+  text-transform: uppercase;
+  margin-bottom: 20px;
+  font-size: inherit;
+  text-transform: inherit;
+  margin: 0;
+}
+
+.glamor-18 {
+  box-sizing: border-box;
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-align-items: center;
+  -webkit-box-align: center;
+  -ms-flex-align: center;
+  align-items: center;
+  border-bottom: 1px solid;
+}
+
+.glamor-18:last-child {
+  border: 0;
+}
+
+.glamor-14 {
+  box-sizing: border-box;
+  width: 50%;
+  padding: 16px;
+  -webkit-flex: 1;
+  -ms-flex: 1;
+  flex: 1;
+}
+
+.glamor-11 {
+  color: #645574;
+}
+
+.glamor-9 {
+  border: none;
+  background-color: inherit;
+  padding: 0;
+}
+
+.glamor-16 {
+  box-sizing: border-box;
+  width: 50%;
+  padding: 16px;
+}
+
+<OrganizationProjectsViewContainer
+  params={
+    Object {
+      "orgId": "org-slug",
+    }
+  }
+>
+  <OrganizationProjectsView
+    params={
+      Object {
+        "orgId": "org-slug",
+      }
+    }
+    projects={
+      Array [
+        Object {
+          "digestsMaxDelay": 60,
+          "digestsMinDelay": 5,
+          "id": "2",
+          "name": "Project Name",
+          "slug": "project-slug",
+          "subjectTemplate": "[$project] \${tag:level}: $title",
+        },
+      ]
+    }
+  >
+    <SideEffect(DocumentTitle)
+      title="Organization Name Projects"
+    >
+      <DocumentTitle
+        title="Organization Name Projects"
+      >
+        <div>
+          <Panel
+            className="table table-no-top-border m-b-0"
+          >
+            <div
+              className="table table-no-top-border m-b-0 glamor-24 glamor-25"
+            >
+              <PanelHeader>
+                <StyledPanelHeader>
+                  <div
+                    className="glamor-7 glamor-8"
+                  >
+                    <StyledPanelHeading>
+                      <Component
+                        className="glamor-3 glamor-0"
+                      >
+                        <_default
+                          className="glamor-3 glamor-0"
+                        >
+                          <div
+                            className="glamor-0 glamor-1 glamor-2"
+                          >
+                            Projects
+                          </div>
+                        </_default>
+                      </Component>
+                    </StyledPanelHeading>
+                  </div>
+                </StyledPanelHeader>
+              </PanelHeader>
+              <PanelBody
+                className="glamor-22"
+                direction="column"
+                disablePadding={true}
+                flex={false}
+              >
+                <div
+                  className="glamor-22"
+                >
+                  <_default
+                    align="center"
+                    key="2"
+                  >
+                    <Base
+                      align="center"
+                      className="glamor-18 glamor-19"
+                    >
+                      <div
+                        className="glamor-18 glamor-19"
+                        is={null}
+                      >
+                        <Box
+                          flex="1"
+                          p={2}
+                          w={0.5}
+                        >
+                          <Base
+                            className="glamor-14"
+                            flex="1"
+                            p={2}
+                            w={0.5}
+                          >
+                            <div
+                              className="glamor-14"
+                              is={null}
+                            >
+                              <ProjectItem
+                                organization={
+                                  Object {
+                                    "access": Array [
+                                      "org:read",
+                                      "org:write",
+                                      "org:admin",
+                                      "project:read",
+                                      "project:write",
+                                      "project:admin",
+                                      "team:read",
+                                      "team:write",
+                                      "team:admin",
+                                    ],
+                                    "features": Array [],
+                                    "id": "3",
+                                    "name": "Organization Name",
+                                    "onboardingTasks": Array [],
+                                    "slug": "org-slug",
+                                    "status": Object {
+                                      "id": "active",
+                                      "name": "active",
+                                    },
+                                    "teams": Array [],
+                                  }
+                                }
+                                project={
+                                  Object {
+                                    "digestsMaxDelay": 60,
+                                    "digestsMinDelay": 5,
+                                    "id": "2",
+                                    "name": "Project Name",
+                                    "slug": "project-slug",
+                                    "subjectTemplate": "[$project] \${tag:level}: $title",
+                                  }
+                                }
+                              >
+                                <div
+                                  className={null}
+                                  key="2"
+                                >
+                                  <Tooltip
+                                    title="Add to bookmarks"
+                                  >
+                                    <InlineButton
+                                      className="tip"
+                                      onClick={[Function]}
+                                      title="Add to bookmarks"
+                                    >
+                                      <button
+                                        className="tip glamor-9 glamor-10"
+                                        onClick={[Function]}
+                                        title="Add to bookmarks"
+                                      >
+                                        <span
+                                          className="icon-star-outline bookmark"
+                                        />
+                                      </button>
+                                    </InlineButton>
+                                  </Tooltip>
+                                  <Link
+                                    className="glamor-11"
+                                    to="/settings/organization/org-slug/project/project-slug/"
+                                  >
+                                    <Link
+                                      className="glamor-11"
+                                      onlyActiveOnIndex={false}
+                                      style={Object {}}
+                                      to="/settings/organization/org-slug/project/project-slug/"
+                                    >
+                                      <a
+                                        className="glamor-11"
+                                        onClick={[Function]}
+                                        style={Object {}}
+                                      >
+                                        <ProjectLabel
+                                          organization={
+                                            Object {
+                                              "access": Array [
+                                                "org:read",
+                                                "org:write",
+                                                "org:admin",
+                                                "project:read",
+                                                "project:write",
+                                                "project:admin",
+                                                "team:read",
+                                                "team:write",
+                                                "team:admin",
+                                              ],
+                                              "features": Array [],
+                                              "id": "3",
+                                              "name": "Organization Name",
+                                              "onboardingTasks": Array [],
+                                              "slug": "org-slug",
+                                              "status": Object {
+                                                "id": "active",
+                                                "name": "active",
+                                              },
+                                              "teams": Array [],
+                                            }
+                                          }
+                                          project={
+                                            Object {
+                                              "digestsMaxDelay": 60,
+                                              "digestsMinDelay": 5,
+                                              "id": "2",
+                                              "name": "Project Name",
+                                              "slug": "project-slug",
+                                              "subjectTemplate": "[$project] \${tag:level}: $title",
+                                            }
+                                          }
+                                        >
+                                          <span
+                                            className="project-label"
+                                          >
+                                            <span
+                                              className="project-name"
+                                            >
+                                              Project Name
+                                            </span>
+                                          </span>
+                                        </ProjectLabel>
+                                      </a>
+                                    </Link>
+                                  </Link>
+                                </div>
+                              </ProjectItem>
+                            </div>
+                          </Base>
+                        </Box>
+                        <Box
+                          p={2}
+                          w={0.5}
+                        >
+                          <Base
+                            className="glamor-16"
+                            p={2}
+                            w={0.5}
+                          >
+                            <div
+                              className="glamor-16"
+                              is={null}
+                            >
+                              <ProjectListItem
+                                key="2"
+                                project={
+                                  Object {
+                                    "digestsMaxDelay": 60,
+                                    "digestsMinDelay": 5,
+                                    "id": "2",
+                                    "name": "Project Name",
+                                    "slug": "project-slug",
+                                    "subjectTemplate": "[$project] \${tag:level}: $title",
+                                  }
+                                }
+                              >
+                                <div />
+                              </ProjectListItem>
+                            </div>
+                          </Base>
+                        </Box>
+                      </div>
+                    </Base>
+                  </_default>
+                </div>
+              </PanelBody>
+            </div>
+          </Panel>
+        </div>
+      </DocumentTitle>
+    </SideEffect(DocumentTitle)>
+  </OrganizationProjectsView>
+</OrganizationProjectsViewContainer>
+`;
diff --git a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
new file mode 100644
index 0000000000..7c29bf2f4c
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
@@ -0,0 +1,374 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`OrganizationTeamProjects Should render 1`] = `
+.glamor-29 {
+  text-align: right;
+}
+
+.glamor-9 {
+  background: #fff;
+  border: 1px solid;
+  margin-bottom: 30px;
+  position: relative;
+}
+
+.glamor-7 {
+  border-bottom: 1px solid;
+  border-radius: 0 0;
+  text-transform: uppercase;
+  font-size: 13px;
+  line-height: 1;
+  padding: 15px 20px;
+}
+
+.glamor-3 {
+  font-size: inherit;
+  text-transform: inherit;
+  margin: 0;
+}
+
+.glamor-1 {
+  font-size: 12px;
+  font-weight: 600;
+  text-transform: uppercase;
+  margin-bottom: 20px;
+  font-size: inherit;
+  text-transform: inherit;
+  margin: 0;
+}
+
+.glamor-30 {
+  box-sizing: border-box;
+  display: -webkit-box;
+  display: -webkit-flex;
+  display: -ms-flexbox;
+  display: flex;
+  -webkit-align-items: center;
+  -webkit-box-align: center;
+  -ms-flex-align: center;
+  align-items: center;
+  border-bottom: 1px solid;
+}
+
+.glamor-30:last-child {
+  border: 0;
+}
+
+.glamor-25 {
+  box-sizing: border-box;
+  width: 50%;
+  padding: 16px;
+  -webkit-flex: 1;
+  -ms-flex: 1;
+  flex: 1;
+}
+
+.glamor-22 {
+  color: #645574;
+}
+
+.glamor-20 {
+  border: none;
+  background-color: inherit;
+  padding: 0;
+}
+
+.glamor-27 {
+  box-sizing: border-box;
+  width: 50%;
+  padding: 16px;
+  text-align: right;
+}
+
+<TeamProjects
+  params={
+    Object {
+      "orgId": "org-slug",
+      "teamId": "team-slug",
+    }
+  }
+>
+  <div>
+    <Panel>
+      <div
+        className="glamor-9 glamor-10"
+      >
+        <PanelHeader>
+          <StyledPanelHeader>
+            <div
+              className="glamor-7 glamor-8"
+            >
+              <StyledPanelHeading>
+                <Component
+                  className="glamor-3 glamor-0"
+                >
+                  <_default
+                    className="glamor-3 glamor-0"
+                  >
+                    <div
+                      className="glamor-0 glamor-1 glamor-2"
+                    >
+                      Associated Projects:
+                    </div>
+                  </_default>
+                </Component>
+              </StyledPanelHeading>
+            </div>
+          </StyledPanelHeader>
+        </PanelHeader>
+        <PanelBody
+          direction="column"
+          disablePadding={true}
+          flex={false}
+        >
+          <div
+            className=""
+          />
+        </PanelBody>
+      </div>
+    </Panel>
+    <Panel>
+      <div
+        className="glamor-9 glamor-10"
+      >
+        <PanelHeader>
+          <StyledPanelHeader>
+            <div
+              className="glamor-7 glamor-8"
+            >
+              <StyledPanelHeading>
+                <Component
+                  className="glamor-3 glamor-0"
+                >
+                  <_default
+                    className="glamor-3 glamor-0"
+                  >
+                    <div
+                      className="glamor-0 glamor-1 glamor-2"
+                    >
+                      Other Projects:
+                    </div>
+                  </_default>
+                </Component>
+              </StyledPanelHeading>
+            </div>
+          </StyledPanelHeader>
+        </PanelHeader>
+        <PanelBody
+          direction="column"
+          disablePadding={true}
+          flex={false}
+        >
+          <div
+            className=""
+          >
+            <_default
+              align="center"
+              key="2"
+            >
+              <Base
+                align="center"
+                className="glamor-30 glamor-31"
+              >
+                <div
+                  className="glamor-30 glamor-31"
+                  is={null}
+                >
+                  <Box
+                    flex="1"
+                    p={2}
+                    w={0.5}
+                  >
+                    <Base
+                      className="glamor-25"
+                      flex="1"
+                      p={2}
+                      w={0.5}
+                    >
+                      <div
+                        className="glamor-25"
+                        is={null}
+                      >
+                        <ProjectItem
+                          organization={
+                            Object {
+                              "access": Array [
+                                "org:read",
+                                "org:write",
+                                "org:admin",
+                                "project:read",
+                                "project:write",
+                                "project:admin",
+                                "team:read",
+                                "team:write",
+                                "team:admin",
+                              ],
+                              "features": Array [],
+                              "id": "3",
+                              "name": "Organization Name",
+                              "onboardingTasks": Array [],
+                              "slug": "org-slug",
+                              "status": Object {
+                                "id": "active",
+                                "name": "active",
+                              },
+                              "teams": Array [],
+                            }
+                          }
+                          project={
+                            Object {
+                              "digestsMaxDelay": 60,
+                              "digestsMinDelay": 5,
+                              "id": "2",
+                              "name": "Project Name",
+                              "slug": "project-slug",
+                              "subjectTemplate": "[$project] \${tag:level}: $title",
+                            }
+                          }
+                        >
+                          <div
+                            className={null}
+                            key="2"
+                          >
+                            <Tooltip
+                              title="Add to bookmarks"
+                            >
+                              <InlineButton
+                                className="tip"
+                                onClick={[Function]}
+                                title="Add to bookmarks"
+                              >
+                                <button
+                                  className="tip glamor-20 glamor-21"
+                                  onClick={[Function]}
+                                  title="Add to bookmarks"
+                                >
+                                  <span
+                                    className="icon-star-outline bookmark"
+                                  />
+                                </button>
+                              </InlineButton>
+                            </Tooltip>
+                            <Link
+                              className="glamor-22"
+                              to="/settings/organization/org-slug/project/project-slug/"
+                            >
+                              <Link
+                                className="glamor-22"
+                                onlyActiveOnIndex={false}
+                                style={Object {}}
+                                to="/settings/organization/org-slug/project/project-slug/"
+                              >
+                                <a
+                                  className="glamor-22"
+                                  onClick={[Function]}
+                                  style={Object {}}
+                                >
+                                  <ProjectLabel
+                                    organization={
+                                      Object {
+                                        "access": Array [
+                                          "org:read",
+                                          "org:write",
+                                          "org:admin",
+                                          "project:read",
+                                          "project:write",
+                                          "project:admin",
+                                          "team:read",
+                                          "team:write",
+                                          "team:admin",
+                                        ],
+                                        "features": Array [],
+                                        "id": "3",
+                                        "name": "Organization Name",
+                                        "onboardingTasks": Array [],
+                                        "slug": "org-slug",
+                                        "status": Object {
+                                          "id": "active",
+                                          "name": "active",
+                                        },
+                                        "teams": Array [],
+                                      }
+                                    }
+                                    project={
+                                      Object {
+                                        "digestsMaxDelay": 60,
+                                        "digestsMinDelay": 5,
+                                        "id": "2",
+                                        "name": "Project Name",
+                                        "slug": "project-slug",
+                                        "subjectTemplate": "[$project] \${tag:level}: $title",
+                                      }
+                                    }
+                                  >
+                                    <span
+                                      className="project-label"
+                                    >
+                                      <span
+                                        className="project-name"
+                                      >
+                                        Project Name
+                                      </span>
+                                    </span>
+                                  </ProjectLabel>
+                                </a>
+                              </Link>
+                            </Link>
+                          </div>
+                        </ProjectItem>
+                      </div>
+                    </Base>
+                  </Box>
+                  <Box
+                    className="glamor-29"
+                    p={2}
+                    w={0.5}
+                  >
+                    <Base
+                      className="glamor-27"
+                      p={2}
+                      w={0.5}
+                    >
+                      <div
+                        className="glamor-27"
+                        is={null}
+                      >
+                        <Button
+                          disabled={false}
+                          onClick={[Function]}
+                          size="small"
+                        >
+                          <button
+                            className="button button-default button-sm"
+                            disabled={false}
+                            onClick={[Function]}
+                            role="button"
+                          >
+                            <FlowLayout
+                              truncate={false}
+                            >
+                              <div
+                                className="flow-layout"
+                              >
+                                <span
+                                  className="button-label"
+                                >
+                                  Add
+                                </span>
+                              </div>
+                            </FlowLayout>
+                          </button>
+                        </Button>
+                      </div>
+                    </Base>
+                  </Box>
+                </div>
+              </Base>
+            </_default>
+          </div>
+        </PanelBody>
+      </div>
+    </Panel>
+  </div>
+</TeamProjects>
+`;
diff --git a/tests/js/spec/views/__snapshots__/projectTeamSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectTeamSettings.spec.jsx.snap
index 3e0c60eb5f..24a11cf929 100644
--- a/tests/js/spec/views/__snapshots__/projectTeamSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectTeamSettings.spec.jsx.snap
@@ -51,6 +51,7 @@ exports[`ProjectTeamsSettings render() renders 1`] = `
             Object {
               "id": "1",
               "name": "Team Name",
+              "projects": Array [],
               "slug": "team-slug",
             }
           }
diff --git a/tests/js/spec/views/organizationProjects.spec.jsx b/tests/js/spec/views/organizationProjects.spec.jsx
new file mode 100644
index 0000000000..b0f8f357cf
--- /dev/null
+++ b/tests/js/spec/views/organizationProjects.spec.jsx
@@ -0,0 +1,51 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import {Client} from 'app/api';
+import ProjectsStore from 'app/stores/projectsStore';
+import OrganizationProjectsViewContainer from 'app/views/settings/organization/projects/organizationProjectsView';
+
+describe('OrganizationProjectsView', function() {
+  let org;
+  let getMock;
+  let putMock;
+  beforeEach(function() {
+    let project = TestStubs.Project();
+    ProjectsStore.loadInitialData([project]);
+    org = TestStubs.Organization();
+
+    getMock = Client.addMockResponse({
+      url: '/organizations/org-slug/stats/',
+      body: [[[], 1]],
+    });
+
+    putMock = Client.addMockResponse({
+      method: 'PUT',
+      url: '/projects/org-slug/project-slug/',
+    });
+  });
+
+  afterEach(function() {
+    Client.clearMockResponses();
+  });
+
+  describe('render()', function() {
+    it('Should render the projects in the store', function() {
+      let wrapper = mount(
+        <OrganizationProjectsViewContainer params={{orgId: org.slug}} />,
+        TestStubs.routerOrganizationContext()
+      );
+      expect(wrapper).toMatchSnapshot();
+
+      expect(wrapper.find('.project-name').text()).toBe('Project Name');
+
+      expect(getMock).toHaveBeenCalledTimes(1);
+
+      expect(putMock).toHaveBeenCalledTimes(0);
+
+      wrapper.find('.icon-star-outline').simulate('click');
+      expect(wrapper.find('.icon-star-solid')).toBeTruthy();
+      expect(putMock).toHaveBeenCalledTimes(1);
+    });
+  });
+});
diff --git a/tests/js/spec/views/organizationTeamProjects.spec.jsx b/tests/js/spec/views/organizationTeamProjects.spec.jsx
new file mode 100644
index 0000000000..46ed6fe32e
--- /dev/null
+++ b/tests/js/spec/views/organizationTeamProjects.spec.jsx
@@ -0,0 +1,99 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import {Client} from 'app/api';
+import TeamStore from 'app/stores/teamStore';
+import ProjectsStore from 'app/stores/projectsStore';
+
+import OrganizationTeamProjects from 'app/views/settings/team/teamProjects';
+
+describe('OrganizationTeamProjects', function() {
+  let team;
+  let putMock;
+  let postMock;
+  let deleteMock;
+  beforeEach(function() {
+    team = TestStubs.Team();
+    TeamStore.loadInitialData([team]);
+
+    let project = TestStubs.Project();
+    ProjectsStore.loadInitialData([project]);
+
+    putMock = Client.addMockResponse({
+      method: 'PUT',
+      url: '/projects/org-slug/project-slug/',
+      body: project,
+    });
+
+    postMock = Client.addMockResponse({
+      method: 'POST',
+      url: `/projects/org-slug/project-slug/teams/${team.slug}/`,
+    });
+
+    deleteMock = Client.addMockResponse({
+      method: 'DELETE',
+      url: `/projects/org-slug/project-slug/teams/${team.slug}/`,
+    });
+  });
+
+  afterEach(function() {
+    Client.clearMockResponses();
+  });
+
+  it('Should render', function() {
+    let wrapper = mount(
+      <OrganizationTeamProjects params={{orgId: 'org-slug', teamId: team.slug}} />,
+      TestStubs.routerOrganizationContext()
+    );
+
+    expect(wrapper).toMatchSnapshot();
+    expect(wrapper.find('.project-name').text()).toBe('Project Name');
+  });
+
+  it('Should allow bookmarking', function() {
+    let wrapper = mount(
+      <OrganizationTeamProjects params={{orgId: 'org-slug', teamId: team.slug}} />,
+      TestStubs.routerOrganizationContext()
+    );
+
+    let star = wrapper.find('.icon-star-outline');
+    expect(star.length).toBe(1);
+    star.simulate('click');
+
+    star = wrapper.find('.icon-star-outline');
+    expect(star.length).toBe(0);
+    star = wrapper.find('.icon-star-solid');
+    expect(star.length).toBe(1);
+
+    expect(putMock).toHaveBeenCalledTimes(1);
+  });
+
+  it('Adding and removing projects works', function(done) {
+    let wrapper = mount(
+      <OrganizationTeamProjects params={{orgId: 'org-slug', teamId: team.slug}} />,
+      TestStubs.routerOrganizationContext()
+    );
+
+    let add = wrapper.find('.button-label');
+    expect(add.length).toBe(1);
+    expect(add.text()).toBe('Add');
+    add.simulate('click');
+
+    wrapper.update();
+
+    expect(postMock).toHaveBeenCalledTimes(1);
+
+    setTimeout(() => {
+      wrapper.update();
+      let remove = wrapper.find('.flow-layout .button-label');
+      expect(remove.length).toBe(1);
+
+      expect(remove.text()).toBe('Remove');
+      remove.simulate('click');
+
+      expect(deleteMock).toHaveBeenCalledTimes(1);
+
+      done();
+    }, 1);
+  });
+});
