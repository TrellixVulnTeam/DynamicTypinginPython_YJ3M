commit a62d516a569398d50ba85d5e66f82aec427870d3
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Tue May 23 11:41:38 2017 -0700

    remove unecessary locks when creating release environments (#5432)

diff --git a/src/sentry/models/releaseenvironment.py b/src/sentry/models/releaseenvironment.py
index c2b4036e64..020a2be5dd 100644
--- a/src/sentry/models/releaseenvironment.py
+++ b/src/sentry/models/releaseenvironment.py
@@ -4,9 +4,7 @@ from datetime import timedelta
 from django.db import models
 from django.utils import timezone
 
-from sentry.app import locks
 from sentry.utils.cache import cache
-from sentry.utils.retries import TimedRetryPolicy
 from sentry.db.models import (
     BoundedPositiveIntegerField, Model, sane_repr
 )
@@ -33,16 +31,8 @@ class ReleaseEnvironment(Model):
     __repr__ = sane_repr('organization_id', 'release_id', 'environment_id')
 
     @classmethod
-    def get_cache_key(cls, project_id, release_id, environment_id):
-        return 'releaseenv:1:{}:{}:{}'.format(
-            project_id,
-            release_id,
-            environment_id,
-        )
-
-    @classmethod
-    def get_lock_key(cls, organization_id, release_id, environment_id):
-        return 'releaseenv:{}:{}:{}'.format(
+    def get_cache_key(cls, organization_id, release_id, environment_id):
+        return 'releaseenv:2:{}:{}:{}'.format(
             organization_id,
             release_id,
             environment_id,
@@ -54,36 +44,15 @@ class ReleaseEnvironment(Model):
 
         instance = cache.get(cache_key)
         if instance is None:
-            release_envs = list(cls.objects.filter(
+            instance, created = cls.objects.get_or_create(
                 release_id=release.id,
                 organization_id=project.organization_id,
                 environment_id=environment.id,
-            ))
-            if release_envs:
-                instance = release_envs[0]
-                for re in release_envs:
-                    if re.project_id == project.id:
-                        instance = re
-                created = False
-            else:
-                lock_key = cls.get_lock_key(project.organization_id, release.id, environment.id)
-                lock = locks.get(lock_key, duration=5)
-                with TimedRetryPolicy(10)(lock.acquire):
-                    try:
-                        instance, created = cls.objects.get(
-                            release_id=release.id,
-                            organization_id=project.organization_id,
-                            environment_id=environment.id,
-                        ), False
-                    except cls.DoesNotExist:
-                        instance, created = cls.objects.create(
-                            release_id=release.id,
-                            project_id=project.id,
-                            organization_id=project.organization_id,
-                            environment_id=environment.id,
-                            first_seen=datetime,
-                            last_seen=datetime,
-                        ), True
+                defaults={
+                    'first_seen': datetime,
+                    'last_seen': datetime,
+                }
+            )
             cache.set(cache_key, instance, 3600)
         else:
             created = False
