commit 68d548d792492b104c25ab9df71db73d102b4064
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Feb 19 17:31:31 2015 -0800

    Update gunicorn usage and improve how defaults are set

diff --git a/setup.py b/setup.py
index fe4071ab4e..26fad8c9be 100755
--- a/setup.py
+++ b/setup.py
@@ -82,7 +82,7 @@ install_requires = [
     'email-reply-parser>=0.2.0,<0.3.0',
     'enum34>=0.9.18,<0.10.0',
     'exam>=0.5.1',
-    'gunicorn>=0.17.2,<0.18.0',
+    'gunicorn>=19.2.1,<20.0.0',
     'ipaddr>=2.1.11,<2.2.0',
     'logan>=0.5.8.2,<0.6.0',
     'lxml>=3.4.1',
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index ee3605592b..5af718650e 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -581,10 +581,7 @@ SENTRY_MAX_SAMPLE_TIME = 10000
 # Web Service
 SENTRY_WEB_HOST = 'localhost'
 SENTRY_WEB_PORT = 9000
-SENTRY_WEB_OPTIONS = {
-    'workers': 3,
-    'limit_request_line': 0,  # required for raven-js
-}
+SENTRY_WEB_OPTIONS = {}
 
 # UDP Service
 SENTRY_UDP_HOST = 'localhost'
diff --git a/src/sentry/services/http.py b/src/sentry/services/http.py
index 800008eeeb..9eb52b86a5 100644
--- a/src/sentry/services/http.py
+++ b/src/sentry/services/http.py
@@ -7,11 +7,34 @@ sentry.services.http
 """
 from __future__ import absolute_import, print_function
 
-from django.core.management import call_command
+from gunicorn.app.base import Application
 
 from sentry.services.base import Service
 
 
+class SentryGunicornCommand(Application):
+    def __init__(self, options):
+        self.usage = None
+        self.prog = None
+        self.cfg = None
+        self.config_file = ""
+        self.options = options
+        self.callable = None
+        self.project_path = None
+        self.do_load_config()
+
+    def init(self, *args):
+        cfg = {}
+        for k, v in self.options.items():
+            if k.lower() in self.cfg.settings and v is not None:
+                cfg[k.lower()] = v
+        return cfg
+
+    def load(self):
+        import sentry.wsgi
+        return sentry.wsgi.application
+
+
 class SentryHTTPServer(Service):
     name = 'http'
 
@@ -27,11 +50,15 @@ class SentryHTTPServer(Service):
         self.workers = workers
 
         options = (settings.SENTRY_WEB_OPTIONS or {}).copy()
-        options['debug'] = debug
         options.setdefault('bind', '%s:%s' % (self.host, self.port))
-        options.setdefault('daemon', False)
         options.setdefault('timeout', 30)
         options.setdefault('proc_name', 'Sentry')
+        options.setdefault('workers', 3)
+        options.setdefault('access_logfile', '-')
+        options.setdefault('errorlog', '-')
+        options.setdefault('loglevel', 'info')
+        options.setdefault('limit_request_line', 0)
+
         if workers:
             options['workers'] = workers
 
@@ -44,4 +71,4 @@ class SentryHTTPServer(Service):
         validate_settings(django_settings)
 
     def run(self):
-        call_command('run_gunicorn', **self.options)
+        SentryGunicornCommand(self.options).run()
diff --git a/src/sentry/utils/runner.py b/src/sentry/utils/runner.py
index bf535dd29d..00ae9d3928 100644
--- a/src/sentry/utils/runner.py
+++ b/src/sentry/utils/runner.py
@@ -170,9 +170,8 @@ SENTRY_URL_PREFIX = 'http://sentry.example.com'  # No trailing slash!
 SENTRY_WEB_HOST = '0.0.0.0'
 SENTRY_WEB_PORT = 9000
 SENTRY_WEB_OPTIONS = {
-    'workers': 3,  # the number of gunicorn workers
-    'limit_request_line': 0,  # required for raven-js
-    'secure_scheme_headers': {'X-FORWARDED-PROTO': 'https'},
+    # 'workers': 3,  # the number of gunicorn workers
+    # 'secure_scheme_headers': {'X-FORWARDED-PROTO': 'https'},
 }
 
 #################
