commit d00f7b0c6de154f1055d45f34b86818e1f751a90
Author: Mark Story <mark@mark-story.com>
Date:   Thu Oct 11 18:38:44 2018 +0000

    feat(integrations) Add webhooks to gitlab repositories (#10082)
    
    Add a setup client so that we don't have to use lower-level
    abstractions in the Integration class. We will not be using system
    webhooks as they do not play nicely with gitlab.com and would also
    result in sentry getting far too much data from on-premise setups.
    
    Add/remove repository hooks so that we can collect commit and merge
    request informationn from gitlab installs.
    
    Refs APP-590

diff --git a/src/sentry/integrations/gitlab/client.py b/src/sentry/integrations/gitlab/client.py
index 3194887908..12c5bd2da8 100644
--- a/src/sentry/integrations/gitlab/client.py
+++ b/src/sentry/integrations/gitlab/client.py
@@ -4,6 +4,7 @@ from six.moves.urllib.parse import quote
 
 from sentry.integrations.client import ApiClient, OAuth2RefreshMixin
 from sentry.integrations.exceptions import ApiError
+from sentry.utils.http import absolute_uri
 
 
 API_VERSION = u'/api/v4'
@@ -19,6 +20,8 @@ class GitLabApiClientPath(object):
     members = u'/projects/{project}/members'
     notes = u'/projects/{project}/issues/{issue}/notes'
     project = u'/projects/{project}'
+    project_hooks = u'/projects/{project}/hooks'
+    project_hook = u'/projects/{project}/hooks/{hook_id}'
     projects = u'/projects'
     user = u'/user'
 
@@ -31,6 +34,35 @@ class GitLabApiClientPath(object):
         )
 
 
+class GitLabSetupClient(ApiClient):
+    """
+    API Client that doesn't require an installation.
+    This client is used during integration setup to fetch data
+    needed to build installation metadata
+    """
+
+    def __init__(self, base_url, access_token, verify_ssl):
+        self.base_url = base_url
+        self.token = access_token
+        self.verify_ssl = verify_ssl
+
+    def get_group(self, group):
+        path = GitLabApiClientPath.group.format(group=group)
+        return self.get(path)
+
+    def request(self, method, path, data=None, params=None):
+        headers = {
+            'Authorization': u'Bearer {}'.format(self.token)
+        }
+        return self._request(
+            method,
+            GitLabApiClientPath.build_api_url(self.base_url, path),
+            headers=headers,
+            data=data,
+            params=params
+        )
+
+
 class GitLabApiClient(ApiClient, OAuth2RefreshMixin):
 
     def __init__(self, installation):
@@ -139,3 +171,23 @@ class GitLabApiClient(ApiClient, OAuth2RefreshMixin):
                 project=quote(project, safe='')
             ),
         )
+
+    def create_project_webhook(self, project):
+        path = GitLabApiClientPath.project_hooks.format(
+            project=quote(project, safe=''))
+        data = {
+            'url': absolute_uri('/extensions/gitlab/webhooks/'),
+            'token': self.metadata['webhook_secret'],
+            'merge_requests_events': True,
+            'push_events': True,
+            'enable_ssl_verification': self.metadata['verify_ssl'],
+        }
+        resp = self.post(path, data)
+
+        return resp['id']
+
+    def delete_project_webhook(self, project, hook_id):
+        path = GitLabApiClientPath.project_hook.format(
+            project=quote(project, safe=''),
+            hook_id=hook_id)
+        self.delete(path)
diff --git a/src/sentry/integrations/gitlab/integration.py b/src/sentry/integrations/gitlab/integration.py
index c7734f2076..c2dce4b288 100644
--- a/src/sentry/integrations/gitlab/integration.py
+++ b/src/sentry/integrations/gitlab/integration.py
@@ -6,7 +6,6 @@ from six.moves.urllib.parse import urlparse
 from django.utils.translation import ugettext_lazy as _
 from django import forms
 
-from sentry import http
 from sentry.web.helpers import render_to_response
 from sentry.models.apitoken import generate_token
 from sentry.identity.pipeline import IdentityProviderPipeline
@@ -17,7 +16,7 @@ from sentry.integrations.repositories import RepositoryMixin
 from sentry.pipeline import NestedPipelineView, PipelineView
 from sentry.utils.http import absolute_uri
 
-from .client import GitLabApiClient, GitLabApiClientPath
+from .client import GitLabApiClient, GitLabSetupClient
 from .issues import GitlabIssueBasic
 from .repository import GitlabRepositoryProvider
 
@@ -73,15 +72,6 @@ class InstallationForm(forms.Form):
             attrs={'placeholder': 'https://github.example.com'}
         ),
     )
-    name = forms.CharField(
-        label=_("Gitlab App Name"),
-        help_text=_('The name of your OAuth Application in Gitlab. '
-                    'This can be found on the apps configuration '
-                    'page. (/profile/applications)'),
-        widget=forms.TextInput(
-            attrs={'placeholder': _('Sentry App')}
-        )
-    )
     group = forms.CharField(
         label=_("Gitlab Group Name"),
         widget=forms.TextInput(
@@ -91,7 +81,9 @@ class InstallationForm(forms.Form):
     verify_ssl = forms.BooleanField(
         label=_("Verify SSL"),
         help_text=_('By default, we verify SSL certificates '
-                    'when delivering payloads to your Gitlab instance'),
+                    'when delivering payloads to your GitLab instance, '
+                    'and request GitLab to verify SSL when it delivers '
+                    'webhooks.'),
         widget=forms.CheckboxInput(),
         required=False
     )
@@ -204,23 +196,14 @@ class GitlabIntegrationProvider(IntegrationProvider):
         return data
 
     def get_group_info(self, access_token, installation_data):
-        session = http.build_session()
-        resp = session.get(
-            GitLabApiClientPath.build_api_url(
-                base_url=installation_data['url'],
-                path=GitLabApiClientPath.group.format(
-                    group=installation_data['group'],
-                )
-            ),
-            headers={
-                'Accept': 'application/json',
-                'Authorization': 'Bearer %s' % access_token,
-            },
-            verify=installation_data['verify_ssl']
+        client = GitLabSetupClient(
+            installation_data['url'],
+            access_token,
+            installation_data['verify_ssl']
         )
+        resp = client.get_group(installation_data['group'])
 
-        resp.raise_for_status()
-        return resp.json()
+        return resp.json
 
     def get_pipeline_views(self):
         return [InstallationConfigView(), lambda: self._make_identity_pipeline_view()]
@@ -235,11 +218,6 @@ class GitlabIntegrationProvider(IntegrationProvider):
         domain_name = '%s/%s' % (re.sub(r'https?://', '', base_url), group['path'])
         verify_ssl = state['installation_data']['verify_ssl']
 
-        webhook_id, webhook_secret = self.create_webhook(
-            base_url,
-            data['access_token'],
-            verify_ssl)
-
         integration = {
             'name': group['name'],
             'external_id': u'{}:{}'.format(urlparse(base_url).netloc, group['id']),
@@ -249,10 +227,7 @@ class GitlabIntegrationProvider(IntegrationProvider):
                 'scopes': scopes,
                 'verify_ssl': verify_ssl,
                 'base_url': base_url,
-                'webhook': {
-                    'secret': webhook_secret,
-                    'id': webhook_id,
-                }
+                'webhook_secret': generate_token()
             },
             'user_identity': {
                 'type': 'gitlab',
@@ -271,29 +246,3 @@ class GitlabIntegrationProvider(IntegrationProvider):
             GitlabRepositoryProvider,
             id='integrations:gitlab',
         )
-
-    def create_webhook(self, base_url, access_token, verify_ssl):
-        webhook_secret = generate_token()
-        session = http.build_session()
-
-        uri = GitLabApiClientPath.build_api_url(
-            base_url=base_url,
-            path=GitLabApiClientPath.hooks
-        )
-        resp = session.post(
-            uri,
-            headers={
-                'Accept': 'application/json',
-                'Authorization': 'Bearer %s' % access_token,
-            },
-            verify=verify_ssl,
-            data={
-                'url': absolute_uri('/extensions/gitlab/webhooks/'),
-                'token': webhook_secret,
-                'merge_requests_events': True,
-                'push_events': True,
-            },
-        )
-
-        resp.raise_for_status()
-        return resp.json()['id'], webhook_secret
diff --git a/src/sentry/integrations/gitlab/repository.py b/src/sentry/integrations/gitlab/repository.py
index 4286b36cbd..3dfab0293c 100644
--- a/src/sentry/integrations/gitlab/repository.py
+++ b/src/sentry/integrations/gitlab/repository.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import six
 
+from sentry.integrations.exceptions import ApiError
 from sentry.plugins import providers
 from sentry.models import Integration
 
@@ -45,6 +46,15 @@ class GitlabRepositoryProvider(providers.IntegrationRepositoryProvider):
         return config
 
     def build_repository_config(self, organization, data):
+        installation = self.get_installation(data['installation'],
+                                             organization.id)
+        client = installation.get_client()
+        hook_id = None
+        try:
+            hook_id = client.create_project_webhook(
+                six.text_type(data['repo_id']))
+        except Exception as e:
+            installation.raise_error(e)
         return {
             'name': data['name'],
             'external_id': data['external_id'],
@@ -52,7 +62,22 @@ class GitlabRepositoryProvider(providers.IntegrationRepositoryProvider):
             'config': {
                 'instance': data['instance'],
                 'repo_id': data['repo_id'],
-                'path': data['path']
+                'path': data['path'],
+                'webhook_id': hook_id,
             },
             'integration_id': data['installation'],
         }
+
+    def on_delete_repository(self, repo):
+        """Clean up the attached webhook"""
+        installation = self.get_installation(repo.integration_id,
+                                             repo.organization_id)
+        client = installation.get_client()
+        try:
+            client.delete_project_webhook(
+                six.text_type(repo.config['repo_id']),
+                repo.config['webhook_id'])
+        except ApiError as e:
+            if e.code == 404:
+                return
+            installation.raise_error(e)
diff --git a/tests/sentry/integrations/gitlab/test_integration.py b/tests/sentry/integrations/gitlab/test_integration.py
index 899d17fd6c..729b6d9a42 100644
--- a/tests/sentry/integrations/gitlab/test_integration.py
+++ b/tests/sentry/integrations/gitlab/test_integration.py
@@ -112,10 +112,7 @@ class GitlabIntegrationTest(IntegrationTestCase):
             u'domain_name': u'gitlab.example.com/cool-group',
             u'verify_ssl': True,
             u'base_url': 'https://gitlab.example.com',
-            'webhook': {
-                'id': 'webhook-id-1',
-                'secret': 'secret-token'
-            }
+            'webhook_secret': 'secret-token'
         }
         oi = OrganizationIntegration.objects.get(
             integration=integration,
diff --git a/tests/sentry/integrations/gitlab/test_repository.py b/tests/sentry/integrations/gitlab/test_repository.py
index d89856e9f8..add37f8345 100644
--- a/tests/sentry/integrations/gitlab/test_repository.py
+++ b/tests/sentry/integrations/gitlab/test_repository.py
@@ -27,6 +27,7 @@ class GitLabRepositoryProviderTest(PluginTestCase):
                 'domain_name': 'example.gitlab.com/my-group',
                 'verify_ssl': False,
                 'base_url': 'https://example.gitlab.com',
+                'webhook_secret': 'super-secret',
             }
         )
         identity = Identity.objects.create(
@@ -54,7 +55,7 @@ class GitLabRepositoryProviderTest(PluginTestCase):
 
     @fixture
     def provider(self):
-        return GitlabRepositoryProvider()
+        return GitlabRepositoryProvider('gitlab')
 
     def create_repository(self, repository_config, integration_id, organization_slug=None):
         repo_id = repository_config['id']
@@ -63,6 +64,11 @@ class GitLabRepositoryProviderTest(PluginTestCase):
             u'https://example.gitlab.com/api/v4/projects/%s' % repo_id,
             json=repository_config
         )
+        responses.add(
+            responses.POST,
+            u'https://example.gitlab.com/api/v4/projects/%s/hooks' % repo_id,
+            json={'id': 99}
+        )
 
         with self.feature({'organizations:internal-catchall': True, 'organizations:repos': True}):
             response = self.client.post(
@@ -92,6 +98,7 @@ class GitLabRepositoryProviderTest(PluginTestCase):
             'instance': domain_name,
             'repo_id': repository_config['id'],
             'path': repository_config['path_with_namespace'],
+            'webhook_id': 99,
         }
 
     @responses.activate
@@ -120,7 +127,7 @@ class GitLabRepositoryProviderTest(PluginTestCase):
         assert response.status_code == 500
 
     @responses.activate
-    def test_create_repository_projects_request_fails(self):
+    def test_create_repository_get_project_request_fails(self):
         responses.add(
             responses.GET,
             u'https://example.gitlab.com/api/v4/projects/%s' % self.default_repository_config['id'],
@@ -129,3 +136,47 @@ class GitLabRepositoryProviderTest(PluginTestCase):
         response = self.create_repository(self.default_repository_config, self.integration.id)
         # TODO(lb): it gives a 400 which I'm not sure makes sense here
         assert response.status_code == 400
+
+    @responses.activate
+    def test_create_repository_integration_create_webhook_failure(self):
+        repo_id = self.default_repository_config['id']
+        responses.add(
+            responses.POST,
+            u'https://example.gitlab.com/api/v4/projects/%s/hooks' % repo_id,
+            status=503,
+        )
+        response = self.create_repository(self.default_repository_config,
+                                          self.integration.id)
+        assert response.status_code == 400
+
+    @responses.activate
+    def test_on_delete_repository_remove_webhook(self):
+        response = self.create_repository(self.default_repository_config,
+                                          self.integration.id)
+        responses.reset()
+
+        repo_id = self.default_repository_config['id']
+        responses.add(
+            responses.DELETE,
+            'https://example.gitlab.com/api/v4/projects/%s/hooks/99' % repo_id,
+            status=204
+        )
+        repo = Repository.objects.get(pk=response.data['id'])
+        self.provider.on_delete_repository(repo)
+        assert len(responses.calls) == 1
+
+    @responses.activate
+    def test_on_delete_repository_remove_webhook_missing_hook(self):
+        response = self.create_repository(self.default_repository_config,
+                                          self.integration.id)
+        responses.reset()
+
+        repo_id = self.default_repository_config['id']
+        responses.add(
+            responses.DELETE,
+            'https://example.gitlab.com/api/v4/projects/%s/hooks/99' % repo_id,
+            status=404
+        )
+        repo = Repository.objects.get(pk=response.data['id'])
+        self.provider.on_delete_repository(repo)
+        assert len(responses.calls) == 1
