commit 8bad5792749fdae9fc106a245b14a7cf560098df
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Tue Mar 24 04:18:46 2020 -0400

    feat(perf-view): Filter transactions by name on the landing page (#17763)

diff --git a/src/sentry/static/sentry/app/utils.tsx b/src/sentry/static/sentry/app/utils.tsx
index 40368891a8..061dc82bfa 100644
--- a/src/sentry/static/sentry/app/utils.tsx
+++ b/src/sentry/static/sentry/app/utils.tsx
@@ -282,3 +282,8 @@ export function generateQueryWithTag(
 }
 
 export const isFunction = (value: any): value is Function => typeof value === 'function';
+
+// NOTE: only escapes a " if it's not already escaped
+export function escapeDoubleQuotes(str) {
+  return str.replace(/\\([\s\S])|(")/g, '\\$1$2');
+}
diff --git a/src/sentry/static/sentry/app/utils/tokenizeSearch.tsx b/src/sentry/static/sentry/app/utils/tokenizeSearch.tsx
index 08fb98b2b7..03e56c2ca7 100644
--- a/src/sentry/static/sentry/app/utils/tokenizeSearch.tsx
+++ b/src/sentry/static/sentry/app/utils/tokenizeSearch.tsx
@@ -1,5 +1,7 @@
 import flatMap from 'lodash/flatMap';
 
+import {escapeDoubleQuotes} from 'app/utils';
+
 export type QueryResults = {
   /**
    * The text portion of the string query
@@ -74,7 +76,9 @@ export function stringifyQueryObject(results: QueryResults) {
   const {query, ...tags} = results;
 
   const stringTags = flatMap(Object.entries(tags), ([k, values]) =>
-    values.map(tag => `${k}:${/[\s\(\)]/g.test(tag) ? `"${tag}"` : tag}`)
+    values.map(
+      tag => `${k}:${/[\s\(\)\\"]/g.test(tag) ? `"${escapeDoubleQuotes(tag)}"` : tag}`
+    )
   );
 
   return `${query.join(' ')} ${stringTags.join(' ')}`.trim();
diff --git a/src/sentry/static/sentry/app/views/performance/data.tsx b/src/sentry/static/sentry/app/views/performance/data.tsx
index bc73fb203f..d7e7a1e2a6 100644
--- a/src/sentry/static/sentry/app/views/performance/data.tsx
+++ b/src/sentry/static/sentry/app/views/performance/data.tsx
@@ -3,6 +3,8 @@ import {Location} from 'history';
 import {t} from 'app/locale';
 import {NewQuery} from 'app/types';
 import EventView from 'app/views/eventsV2/eventView';
+import {decodeScalar} from 'app/views/eventsV2/utils';
+import {stringifyQueryObject} from 'app/utils/tokenizeSearch';
 
 export const DEFAULT_STATS_PERIOD = '24h';
 
@@ -47,6 +49,16 @@ export function generatePerformanceQuery(location: Location): Readonly<NewQuery>
         : '-rpm';
   }
 
+  if (query?.query) {
+    const searchQuery = decodeScalar(query.query);
+    if (searchQuery) {
+      extra.query = stringifyQueryObject({
+        query: [PERFORMANCE_EVENT_VIEW.query],
+        transaction: [`*${searchQuery}*`],
+      });
+    }
+  }
+
   return Object.assign({}, PERFORMANCE_EVENT_VIEW, extra);
 }
 
diff --git a/src/sentry/static/sentry/app/views/performance/table.tsx b/src/sentry/static/sentry/app/views/performance/table.tsx
index d61a9be3ec..fbd0028f21 100644
--- a/src/sentry/static/sentry/app/views/performance/table.tsx
+++ b/src/sentry/static/sentry/app/views/performance/table.tsx
@@ -1,7 +1,10 @@
 import React from 'react';
 import {Location, LocationDescriptorObject} from 'history';
 import omit from 'lodash/omit';
+import styled from '@emotion/styled';
+import * as ReactRouter from 'react-router';
 
+import space from 'app/styles/space';
 import {t} from 'app/locale';
 import {Organization, Project} from 'app/types';
 import {assert} from 'app/types/utils';
@@ -14,10 +17,16 @@ import EventView from 'app/views/eventsV2/eventView';
 import SortLink from 'app/views/eventsV2/sortLink';
 import {TableDataRow, TableColumn} from 'app/views/eventsV2/table/types';
 import HeaderCell from 'app/views/eventsV2/table/headerCell';
-import {getFieldRenderer, MetaType, getAggregateAlias} from 'app/views/eventsV2/utils';
+import {
+  getFieldRenderer,
+  MetaType,
+  getAggregateAlias,
+  decodeScalar,
+} from 'app/views/eventsV2/utils';
 import {EventData} from 'app/views/eventsV2/data';
 import withProjects from 'app/utils/withProjects';
 import EventsV2 from 'app/utils/discover/eventsv2';
+import SearchBar from 'app/components/searchBar';
 
 import {transactionSummaryRouteWithEventView} from './transactionSummary/utils';
 import {
@@ -184,6 +193,25 @@ class Table extends React.Component<Props> {
     ));
   }
 
+  getTransactionSearchQuery(): string {
+    const {location} = this.props;
+
+    return String(decodeScalar(location.query.query) || '').trim();
+  }
+
+  handleTransactionSearchQuery = (searchQuery: string) => {
+    const {location} = this.props;
+
+    ReactRouter.browserHistory.push({
+      pathname: location.pathname,
+      query: {
+        ...location.query,
+        cursor: undefined,
+        query: String(searchQuery).trim() || undefined,
+      },
+    });
+  };
+
   render() {
     const {eventView, organization, location} = this.props;
     const columnOrder = eventView.getColumns();
@@ -192,6 +220,11 @@ class Table extends React.Component<Props> {
       <EventsV2 eventView={eventView} organization={organization} location={location}>
         {({pageLinks, isLoading, tableData}) => (
           <div>
+            <StyledSearchBar
+              query={this.getTransactionSearchQuery()}
+              placeholder={t('Filter Transactions')}
+              onSearch={this.handleTransactionSearchQuery}
+            />
             <Panel>
               <TableGrid>
                 <GridHead>
@@ -210,4 +243,10 @@ class Table extends React.Component<Props> {
   }
 }
 
+const StyledSearchBar = styled(SearchBar)`
+  flex-grow: 1;
+
+  margin-bottom: ${space(1)};
+`;
+
 export default withProjects(Table);
diff --git a/tests/js/spec/utils/tokenizeSearch.spec.jsx b/tests/js/spec/utils/tokenizeSearch.spec.jsx
index ec67b9a0ee..0c80ae64fb 100644
--- a/tests/js/spec/utils/tokenizeSearch.spec.jsx
+++ b/tests/js/spec/utils/tokenizeSearch.spec.jsx
@@ -86,6 +86,11 @@ describe('utils/tokenizeSearch', function() {
         object: {query: ['bad things'], repository_id: ["UUID('long-value')"]},
         string: 'bad things repository_id:"UUID(\'long-value\')"',
       },
+      {
+        name: 'should escape quote tags with double quotes',
+        object: {query: ['bad things'], name: ['Ernest "Papa" Hemingway']},
+        string: 'bad things name:"Ernest \\"Papa\\" Hemingway"',
+      },
     ];
 
     for (const {name, string, object} of cases) {
diff --git a/tests/js/spec/utils/utils.spec.jsx b/tests/js/spec/utils/utils.spec.jsx
index 151ff28b1e..29845b59f8 100644
--- a/tests/js/spec/utils/utils.spec.jsx
+++ b/tests/js/spec/utils/utils.spec.jsx
@@ -6,6 +6,7 @@ import {
   sortProjects,
   descopeFeatureName,
   deepFreeze,
+  escapeDoubleQuotes,
 } from 'app/utils';
 
 describe('utils.valueIsEqual', function() {
@@ -265,3 +266,35 @@ describe('deepFreeze', function() {
     });
   });
 });
+
+describe('utils.escapeDoubleQuotes', function() {
+  // test cases from https://gist.github.com/getify/3667624
+
+  it('should escapse any unescaped double quotes', function() {
+    const cases = [
+      ['a"b', 'a\\"b'], //
+      ['a\\"b', 'a\\"b'], //
+      ['a\\\\"b', 'a\\\\\\"b'],
+      ['a"b"c', 'a\\"b\\"c'],
+      ['a""b', 'a\\"\\"b'],
+      ['""', '\\"\\"'],
+    ];
+
+    for (const testCase of cases) {
+      const [input, expected] = testCase;
+      expect(escapeDoubleQuotes(input)).toBe(expected);
+    }
+
+    // should return the same input as the output
+
+    const cases2 = ['ab', 'a\\"b', 'a\\\\\\"b'];
+
+    for (const test of cases2) {
+      expect(escapeDoubleQuotes(test)).toBe(test);
+    }
+
+    // don't unnecessarily escape
+    const actual = escapeDoubleQuotes(escapeDoubleQuotes(escapeDoubleQuotes('a"b')));
+    expect(actual).toBe('a\\"b');
+  });
+});
