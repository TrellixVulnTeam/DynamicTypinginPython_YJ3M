commit 87cbf2a1ae22c2dcc338606ccb8635ff05f91435
Author: Danny Lee <dlee@sentry.io>
Date:   Fri Jun 26 14:49:08 2020 -0700

    fix(store): Fix Repository HOC getting bad data from store (#19520)

diff --git a/src/sentry/static/sentry/app/stores/repositoryStore.tsx b/src/sentry/static/sentry/app/stores/repositoryStore.tsx
index 53cb7063df..a207a90f8d 100644
--- a/src/sentry/static/sentry/app/stores/repositoryStore.tsx
+++ b/src/sentry/static/sentry/app/stores/repositoryStore.tsx
@@ -4,9 +4,8 @@ import RepoActions from 'app/actions/repositoryActions';
 import {Repository} from 'app/types';
 
 type RepositoryStoreInterface = {
-  get(
-    orgSlug?: string
-  ): {
+  get(): {
+    orgSlug?: string;
     repositories?: Repository[];
     repositoriesLoading?: boolean;
     repositoriesError?: Error;
@@ -77,22 +76,8 @@ export const RepositoryStoreConfig: Reflux.StoreDefinition & RepositoryStoreInte
     this.trigger(this.state);
   },
 
-  /**
-   * `orgSlug` is optional. If present, method will run a check if data in the
-   * store originated from the same organization
-   */
-  get(orgSlug?: string) {
-    const {orgSlug: stateOrgSlug, ...data} = this.state;
-
-    if (orgSlug !== undefined && orgSlug !== stateOrgSlug) {
-      return {
-        repositories: undefined,
-        repositoriesLoading: undefined,
-        repositoriesError: undefined,
-      };
-    }
-
-    return {...data};
+  get() {
+    return {...this.state};
   },
 };
 
diff --git a/src/sentry/static/sentry/app/utils/withRelease.tsx b/src/sentry/static/sentry/app/utils/withRelease.tsx
index ec7a932d1c..00f1dbbb14 100644
--- a/src/sentry/static/sentry/app/utils/withRelease.tsx
+++ b/src/sentry/static/sentry/app/utils/withRelease.tsx
@@ -50,7 +50,10 @@ const withRelease = <P extends DependentProps>(
         DependentProps;
       const releaseData = ReleaseStore.get(projectSlug, releaseVersion);
 
-      if (!releaseData.release && !releaseData.releaseLoading) {
+      if (
+        (!releaseData.release && !releaseData.releaseLoading) ||
+        releaseData.releaseError
+      ) {
         getProjectRelease(api, {orgSlug, projectSlug, releaseVersion});
       }
     },
@@ -60,7 +63,10 @@ const withRelease = <P extends DependentProps>(
         DependentProps;
       const releaseData = ReleaseStore.get(projectSlug, releaseVersion);
 
-      if (!releaseData.deploys && !releaseData.deploysLoading) {
+      if (
+        (!releaseData.deploys && !releaseData.deploysLoading) ||
+        releaseData.deploysError
+      ) {
         getReleaseDeploys(api, {orgSlug, projectSlug, releaseVersion});
       }
     },
diff --git a/src/sentry/static/sentry/app/utils/withRepositories.tsx b/src/sentry/static/sentry/app/utils/withRepositories.tsx
index 7981c6d1e8..49b4378d77 100644
--- a/src/sentry/static/sentry/app/utils/withRepositories.tsx
+++ b/src/sentry/static/sentry/app/utils/withRepositories.tsx
@@ -4,9 +4,10 @@ import createReactClass from 'create-react-class';
 
 import {Client} from 'app/api';
 import {Repository} from 'app/types';
-import getDisplayName from 'app/utils/getDisplayName';
-import RepositoryStore from 'app/stores/repositoryStore';
+import RepositoryActions from 'app/actions/repositoryActions';
 import {getRepositories} from 'app/actionCreators/repositories';
+import RepositoryStore from 'app/stores/repositoryStore';
+import getDisplayName from 'app/utils/getDisplayName';
 
 type DependentProps = {
   api: Client;
@@ -19,6 +20,12 @@ type InjectedProps = {
   repositoriesError: Error | undefined;
 };
 
+const INITIAL_STATE: InjectedProps = {
+  repositories: undefined,
+  repositoriesLoading: undefined,
+  repositoriesError: undefined,
+};
+
 const withRepositories = <P extends DependentProps>(
   WrappedComponent: React.ComponentType<P>
 ) =>
@@ -31,14 +38,15 @@ const withRepositories = <P extends DependentProps>(
 
     getInitialState() {
       const {orgSlug} = this.props as P & DependentProps;
-      const repoData = RepositoryStore.get(orgSlug);
+      const repoData = RepositoryStore.get();
+
+      if (repoData.orgSlug !== orgSlug) {
+        RepositoryActions.resetRepositories();
+      }
 
-      return {
-        repositories: undefined,
-        repositoriesLoading: undefined,
-        repositoriesError: undefined,
-        ...repoData,
-      };
+      return repoData.orgSlug === orgSlug
+        ? {...INITIAL_STATE, ...repoData}
+        : {...INITIAL_STATE};
     },
 
     componentDidMount() {
@@ -49,17 +57,21 @@ const withRepositories = <P extends DependentProps>(
 
     fetchRepositories() {
       const {api, orgSlug} = this.props as P & DependentProps;
-      const repoData = RepositoryStore.get(orgSlug);
+      const repoData = RepositoryStore.get();
 
-      if (!repoData.repositories && !repoData.repositoriesLoading) {
+      // XXX(leedongwei): Do not check the orgSlug here. It would have been
+      // verified at `getInitialState`. The short-circuit hack in actionCreator
+      // does not update the orgSlug in the store.
+      if (
+        (!repoData.repositories && !repoData.repositoriesLoading) ||
+        repoData.repositoriesError
+      ) {
         getRepositories(api, {orgSlug});
       }
     },
 
     onStoreUpdate() {
-      const {orgSlug} = this.props as P & DependentProps;
-      const repoData = RepositoryStore.get(orgSlug);
-
+      const repoData = RepositoryStore.get();
       this.setState({...repoData});
     },
 
diff --git a/tests/js/spec/utils/withRepositories.spec.jsx b/tests/js/spec/utils/withRepositories.spec.jsx
index 787e447d8b..5b7236d82b 100644
--- a/tests/js/spec/utils/withRepositories.spec.jsx
+++ b/tests/js/spec/utils/withRepositories.spec.jsx
@@ -64,4 +64,31 @@ describe('withRepositories HoC', function() {
     expect(Container.prototype.componentDidMount).toHaveBeenCalledTimes(3);
     // expect(Container.prototype.fetchRepositories).toHaveBeenCalledTimes(3);
   });
+
+  /**
+   * Same as 'prevents repeated calls', but with the async fetch/checks
+   * happening on same tick.
+   *
+   * Additionally, this test checks that withRepositories.fetchRepositories does
+   * not check for (store.orgSlug !== orgSlug) as the short-circuit does not
+   * change the value for orgSlug
+   */
+  it('prevents simultaneous calls', async () => {
+    const Component = () => null;
+    const Container = withRepositories(Component);
+
+    jest.spyOn(api, 'requestPromise');
+    jest.spyOn(Container.prototype, 'componentDidMount');
+
+    // Mount and run duplicates
+    mount(<Container api={api} orgSlug={orgSlug} />);
+    mount(<Container api={api} orgSlug={orgSlug} />);
+    mount(<Container api={api} orgSlug={orgSlug} />);
+
+    await tick();
+    await tick();
+
+    expect(api.requestPromise).toHaveBeenCalledTimes(1);
+    expect(Container.prototype.componentDidMount).toHaveBeenCalledTimes(3);
+  });
 });
