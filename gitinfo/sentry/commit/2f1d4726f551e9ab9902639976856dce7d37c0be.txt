commit 2f1d4726f551e9ab9902639976856dce7d37c0be
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Aug 9 23:52:31 2015 -0700

    Functional thread collector (refs GH-1722)

diff --git a/src/sentry/debug/panels/base.py b/src/sentry/debug/panels/base.py
index 13b9442ddb..ba5d0e0c47 100644
--- a/src/sentry/debug/panels/base.py
+++ b/src/sentry/debug/panels/base.py
@@ -3,35 +3,35 @@ from __future__ import absolute_import
 from debug_toolbar.panels import Panel
 from django.utils.translation import ungettext
 
+from ..utils.thread_collector import ThreadCollector
+
 
 class CallRecordingPanel(Panel):
     def __init__(self, *args, **kwargs):
         super(CallRecordingPanel, self).__init__(*args, **kwargs)
-        self.calls = []
-        self._context = []
+        cls = type(self)
+        if getattr(cls, '_collector', None) is None:
+            self.collector = ThreadCollector()
 
-        for context in self.get_context():
-            self.add_context(context)
+            for context in cls.get_context(self.collector):
+                context.patch()
 
-    def get_context(self):
+    @classmethod
+    def get_context(cls):
         """
-        >>> def get_context(self):
+        >>> @classmethod
+        >>> def get_context(cls, collector):
         >>>     return [
-        >>>         PatchContext('foo.bar', FunctionWrapper(self.calls))
+        >>>         PatchContext('foo.bar', FunctionWrapper(collector))
         >>>     ]
         """
         raise NotImplementedError
 
-    def add_context(self, context):
-        self._context.append(context)
-
     def enable_instrumentation(self):
-        for context in self._context:
-            context.patch()
+        self.calls = self.collector.enable()
 
     def disable_instrumentation(self):
-        for context in self._context:
-            context.unpatch()
+        self.collector.disable()
 
     @property
     def nav_subtitle(self):
diff --git a/src/sentry/debug/panels/redis.py b/src/sentry/debug/panels/redis.py
index 62742b263f..561872e442 100644
--- a/src/sentry/debug/panels/redis.py
+++ b/src/sentry/debug/panels/redis.py
@@ -78,10 +78,11 @@ class RedisWrapper(FunctionWrapper):
 class RedisPanel(CallRecordingPanel):
     title = nav_title = _("Redis")
 
-    def get_context(self):
+    @classmethod
+    def get_context(cls, collector):
         return [
-            PatchContext('redis.client.StrictRedis.execute_command', RedisWrapper(self.calls)),
-            PatchContext('redis.client.BasePipeline.execute', RedisPipelineWrapper(self.calls)),
+            PatchContext('redis.client.StrictRedis.execute_command', RedisWrapper(collector)),
+            PatchContext('redis.client.BasePipeline.execute', RedisPipelineWrapper(collector)),
         ]
 
     @property
diff --git a/src/sentry/debug/utils/function_wrapper.py b/src/sentry/debug/utils/function_wrapper.py
index 6b6fe69cdd..79ec84f170 100644
--- a/src/sentry/debug/utils/function_wrapper.py
+++ b/src/sentry/debug/utils/function_wrapper.py
@@ -4,8 +4,8 @@ from time import time
 
 
 class FunctionWrapper(object):
-    def __init__(self, data):
-        self.data = data
+    def __init__(self, collector):
+        self.collector = collector
 
     def __call__(self, func, *args, **kwargs):
         __traceback_hide__ = True  # NOQA
@@ -28,8 +28,7 @@ class FunctionWrapper(object):
                 'start': start,
                 'end': end,
             }
-
             self.record(data)
 
     def record(self, data):
-        self.data.append(data)
+        self.collector.append(data)
diff --git a/src/sentry/debug/utils/thread_collector.py b/src/sentry/debug/utils/thread_collector.py
new file mode 100644
index 0000000000..9166ea7acf
--- /dev/null
+++ b/src/sentry/debug/utils/thread_collector.py
@@ -0,0 +1,37 @@
+from __future__ import absolute_import
+
+import threading
+import weakref
+
+
+class ThreadCollector(object):
+    def __init__(self):
+        self.collections = weakref.WeakKeyDictionary()
+
+    def enable(self, thread=None):
+        if thread is None:
+            thread = threading.currentThread()
+        self.collections[thread] = []
+        return self.collections[thread]
+
+    def disable(self, thread=None):
+        if thread is None:
+            thread = threading.currentThread()
+        try:
+            del self.collections[thread]
+        except KeyError:
+            pass
+
+    def get(self, thread=None):
+        if thread is None:
+            thread = threading.currentThread()
+        return self.collections[thread]
+
+    def append(self, item, thread=None):
+        if thread is None:
+            thread = threading.currentThread()
+        # fail silently if not active for thread
+        print((self.collections.keys(), thread))
+        if thread not in self.collections:
+            return
+        self.collections[thread].append(item)
