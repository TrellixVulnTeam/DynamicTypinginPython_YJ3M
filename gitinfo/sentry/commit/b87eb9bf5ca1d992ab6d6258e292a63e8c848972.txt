commit b87eb9bf5ca1d992ab6d6258e292a63e8c848972
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jun 23 17:05:32 2016 -0700

    Inject os/browser data for JS

diff --git a/src/sentry/interfaces/contexts.py b/src/sentry/interfaces/contexts.py
index 5cf0f6cf74..b6f7b2d716 100644
--- a/src/sentry/interfaces/contexts.py
+++ b/src/sentry/interfaces/contexts.py
@@ -66,6 +66,11 @@ class RuntimeContextType(ContextType):
     indexed_fields = ['name', 'version', 'build']
 
 
+@contexttype('browser')
+class BrowserContextType(ContextType):
+    indexed_fields = ['name', 'version']
+
+
 @contexttype('os')
 class OsContextType(ContextType):
     indexed_fields = ['name', 'version', 'build']
diff --git a/src/sentry/lang/javascript/plugin.py b/src/sentry/lang/javascript/plugin.py
index adadec055d..ad5e0c1e71 100644
--- a/src/sentry/lang/javascript/plugin.py
+++ b/src/sentry/lang/javascript/plugin.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import, print_function
 
 from django.conf import settings
+from ua_parser.user_agent_parser import Parse
 
 from sentry.models import Project
 from sentry.plugins import Plugin2
@@ -22,7 +23,68 @@ def preprocess_event(data):
         project=project,
         allow_scraping=allow_scraping,
     )
-    return processor.process(data)
+    data = processor.process(data)
+    inject_device_data(data)
+    return data
+
+
+def parse_user_agent(data):
+    http = data.get('sentry.interfaces.Http')
+    if not http:
+        return None
+
+    headers = http.get('headers')
+    if not headers:
+        return None
+
+    for key, value in headers:
+        if key != 'User-Agent':
+            continue
+        ua = Parse(value)
+        if not ua:
+            continue
+        return ua
+    return None
+
+
+def inject_browser_context(data, user_agent):
+    ua = user_agent['user_agent']
+    try:
+        data['contexts']['browser'] = {
+            'name': ua['family'],
+            'version': '.'.join(value for value in [
+                ua['major'],
+                ua['minor'],
+            ] if value),
+        }
+    except KeyError:
+        pass
+
+
+def inject_os_context(data, user_agent):
+    ua = user_agent['os']
+    try:
+        data['contexts']['os'] = {
+            'name': ua['family'],
+            'version': '.'.join(value for value in [
+                ua['major'],
+                ua['minor'],
+                ua['patch'],
+            ] if value),
+        }
+    except KeyError:
+        pass
+
+
+def inject_device_data(data):
+    user_agent = parse_user_agent(data)
+    if not user_agent:
+        return
+
+    data.setdefault('contexts', {})
+
+    inject_browser_context(data, user_agent)
+    inject_os_context(data, user_agent)
 
 
 class JavascriptPlugin(Plugin2):
