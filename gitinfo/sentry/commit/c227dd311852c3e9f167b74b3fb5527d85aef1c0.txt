commit c227dd311852c3e9f167b74b3fb5527d85aef1c0
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Mon Nov 20 15:16:45 2017 -0800

    ref(api): Centralize create_audit_entry for api and frontend (#6578)
    
    * ref(api): Centralize create_audit_entry for api and frontend
    
    Both base.py for api and frontend used nearly identical methods for creating audit log entries. Move common functionality to utils.

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index bf77027b17..0b86ccb610 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -18,15 +18,17 @@ from rest_framework.views import APIView
 
 from sentry import tsdb
 from sentry.app import raven
-from sentry.models import ApiKey, AuditLogEntry, Environment
+from sentry.models import Environment
 from sentry.utils.cursors import Cursor
 from sentry.utils.dates import to_datetime
 from sentry.utils.http import absolute_uri, is_valid_origin
+from sentry.utils.audit import create_audit_entry
 
 from .authentication import ApiKeyAuthentication, TokenAuthentication
 from .paginator import Paginator
 from .permissions import NoPermission
 
+
 __all__ = ['DocSection', 'Endpoint', 'EnvironmentMixin', 'StatsMixin']
 
 ONE_MINUTE = 60
@@ -93,35 +95,7 @@ class Endpoint(APIView):
             return Response(context, status=500)
 
     def create_audit_entry(self, request, transaction_id=None, **kwargs):
-        user = request.user if request.user.is_authenticated() else None
-        api_key = request.auth if isinstance(request.auth, ApiKey) else None
-
-        entry = AuditLogEntry(
-            actor=user, actor_key=api_key, ip_address=request.META['REMOTE_ADDR'], **kwargs
-        )
-
-        # Only create a real AuditLogEntry record if we are passing an event type
-        # otherwise, we want to still log to our actual logging
-        if entry.event is not None:
-            entry.save()
-
-        extra = {
-            'ip_address': entry.ip_address,
-            'organization_id': entry.organization_id,
-            'object_id': entry.target_object,
-            'entry_id': entry.id,
-            'actor_label': entry.actor_label
-        }
-        if entry.actor_id:
-            extra['actor_id'] = entry.actor_id
-        if entry.actor_key_id:
-            extra['actor_key_id'] = entry.actor_key_id
-        if transaction_id is not None:
-            extra['transaction_id'] = transaction_id
-
-        audit_logger.info(entry.get_event_display(), extra=extra)
-
-        return entry
+        return create_audit_entry(request, transaction_id, audit_logger, **kwargs)
 
     def initialize_request(self, request, *args, **kwargs):
         rv = super(Endpoint, self).initialize_request(request, *args, **kwargs)
diff --git a/src/sentry/utils/audit.py b/src/sentry/utils/audit.py
new file mode 100644
index 0000000000..d4b161fdd9
--- /dev/null
+++ b/src/sentry/utils/audit.py
@@ -0,0 +1,37 @@
+from __future__ import absolute_import
+from sentry.models import ApiKey, AuditLogEntry
+
+
+def create_audit_entry(request, transaction_id=None, logger=None, **kwargs):
+
+    user = request.user if request.user.is_authenticated() else None
+    api_key = request.auth if hasattr(request, 'auth') \
+        and isinstance(request.auth, ApiKey) else None
+
+    entry = AuditLogEntry(
+        actor=user, actor_key=api_key, ip_address=request.META['REMOTE_ADDR'], **kwargs
+    )
+
+    # Only create a real AuditLogEntry record if we are passing an event type
+    # otherwise, we want to still log to our actual logging
+    if entry.event is not None:
+        entry.save()
+
+    extra = {
+        'ip_address': entry.ip_address,
+        'organization_id': entry.organization_id,
+        'object_id': entry.target_object,
+        'entry_id': entry.id,
+        'actor_label': entry.actor_label
+    }
+    if entry.actor_id:
+        extra['actor_id'] = entry.actor_id
+    if entry.actor_key_id:
+        extra['actor_key_id'] = entry.actor_key_id
+    if transaction_id is not None:
+        extra['transaction_id'] = transaction_id
+
+    if logger:
+        logger.info(entry.get_event_display(), extra=extra)
+
+    return entry
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 41157357dd..fd556d7e87 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -14,10 +14,11 @@ from sudo.views import redirect_to_sudo
 from sentry import roles
 from sentry.auth import access
 from sentry.models import (
-    AuditLogEntry, Organization, OrganizationMember, OrganizationStatus, Project, ProjectStatus,
+    Organization, OrganizationMember, OrganizationStatus, Project, ProjectStatus,
     Team, TeamStatus
 )
 from sentry.utils import auth
+from sentry.utils.audit import create_audit_entry
 from sentry.web.helpers import render_to_response
 from sentry.api.serializers import serialize
 
@@ -275,32 +276,7 @@ class BaseView(View, OrganizationMixin):
         )
 
     def create_audit_entry(self, request, transaction_id=None, **kwargs):
-        entry = AuditLogEntry(
-            actor=request.user if request.user.is_authenticated() else None,
-            # TODO(jtcunning): assert that REMOTE_ADDR is a real IP.
-            ip_address=request.META['REMOTE_ADDR'],
-            **kwargs
-        )
-
-        # Only create a real AuditLogEntry record if we are passing an event type
-        # otherwise, we want to still log to our actual logging
-        if entry.event is not None:
-            entry.save()
-
-        extra = {
-            'ip_address': entry.ip_address,
-            'organization_id': entry.organization_id,
-            'object_id': entry.target_object,
-            'entry_id': entry.id,
-            'actor_label': entry.actor_label
-        }
-
-        if transaction_id is not None:
-            extra['transaction_id'] = transaction_id
-
-        audit_logger.info(entry.get_event_display(), extra=extra)
-
-        return entry
+        return create_audit_entry(request, transaction_id, audit_logger, **kwargs)
 
 
 class OrganizationView(BaseView):
diff --git a/tests/sentry/utils/audit/__init__.py b/tests/sentry/utils/audit/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/utils/audit/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/utils/audit/tests.py b/tests/sentry/utils/audit/tests.py
new file mode 100644
index 0000000000..a6f0ebc8af
--- /dev/null
+++ b/tests/sentry/utils/audit/tests.py
@@ -0,0 +1,39 @@
+from __future__ import absolute_import
+
+from django.contrib.auth.models import AnonymousUser
+
+from sentry.models import ApiKey
+from sentry.testutils import APITestCase
+from sentry.utils.audit import create_audit_entry
+
+
+class FakeHttpRequest(object):
+    def __init__(self, user):
+        self.user = user
+        self.META = {'REMOTE_ADDR': '127.0.0.1'}
+
+
+class CreateAuditEntryTest(APITestCase):
+
+    def test_audit_entry_api(self):
+        org = self.create_organization()
+        apikey = ApiKey.objects.create(
+            organization=org,
+            allowed_origins='*',
+        )
+
+        req = FakeHttpRequest(AnonymousUser(), )
+        req.auth = apikey
+
+        entry = create_audit_entry(req)
+        assert entry.actor_key == apikey
+        assert entry.actor is None
+        assert entry.ip_address == req.META['REMOTE_ADDR']
+
+    def test_audit_entry_frontend(self):
+        req = FakeHttpRequest(self.create_user())
+        entry = create_audit_entry(req)
+
+        assert entry.actor == req.user
+        assert entry.actor_key is None
+        assert entry.ip_address == req.META['REMOTE_ADDR']
