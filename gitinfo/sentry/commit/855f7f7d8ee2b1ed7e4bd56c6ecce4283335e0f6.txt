commit 855f7f7d8ee2b1ed7e4bd56c6ecce4283335e0f6
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Apr 19 12:22:49 2017 +0200

    Added distribution to organization endpoints

diff --git a/src/sentry/api/endpoints/organization_release_file_details.py b/src/sentry/api/endpoints/organization_release_file_details.py
index ec7b42f2d8..d2272c175f 100644
--- a/src/sentry/api/endpoints/organization_release_file_details.py
+++ b/src/sentry/api/endpoints/organization_release_file_details.py
@@ -9,7 +9,7 @@ from sentry.api.base import DocSection
 from sentry.api.bases.organization import OrganizationReleasesBaseEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import serialize
-from sentry.models import Release, ReleaseFile
+from sentry.models import Release, ReleaseFile, Distribution
 try:
     from django.http import (
         CompatibleStreamingHttpResponse as StreamingHttpResponse
@@ -49,6 +49,7 @@ class OrganizationReleaseFileDetailsEndpoint(OrganizationReleasesBaseEndpoint):
                                           release belongs to.
         :pparam string version: the version identifier of the release.
         :pparam string file_id: the ID of the file to retrieve.
+        :qparam string distribution: the name of the distribution.
         :auth: required
         """
         try:
@@ -62,10 +63,22 @@ class OrganizationReleaseFileDetailsEndpoint(OrganizationReleasesBaseEndpoint):
         if not self.has_release_permission(request, organization, release):
             raise PermissionDenied
 
+        dist_name = request.GET.get('distribution')
+        dist = None
+        if dist_name:
+            try:
+                dist = Distribution.objects.get(
+                    release=release,
+                    name=dist_name,
+                )
+            except Distribution.DoesNotExist:
+                raise ResourceDoesNotExist
+
         try:
             releasefile = ReleaseFile.objects.get(
                 release=release,
                 id=file_id,
+                distribution=dist,
             )
         except ReleaseFile.DoesNotExist:
             raise ResourceDoesNotExist
@@ -91,6 +104,7 @@ class OrganizationReleaseFileDetailsEndpoint(OrganizationReleasesBaseEndpoint):
         :pparam string version: the version identifier of the release.
         :pparam string file_id: the ID of the file to update.
         :param string name: the new name of the file.
+        :param string distribution: the name of the distribution.
         :auth: required
         """
         try:
@@ -104,10 +118,16 @@ class OrganizationReleaseFileDetailsEndpoint(OrganizationReleasesBaseEndpoint):
         if not self.has_release_permission(request, organization, release):
             raise PermissionDenied
 
+        dist_name = request.DATA.get('distribution')
+        dist = None
+        if dist_name:
+            dist = Distribution.get_or_create(release, dist_name)
+
         try:
             releasefile = ReleaseFile.objects.get(
                 release=release,
                 id=file_id,
+                distribution=dist,
             )
         except ReleaseFile.DoesNotExist:
             raise ResourceDoesNotExist
@@ -138,6 +158,7 @@ class OrganizationReleaseFileDetailsEndpoint(OrganizationReleasesBaseEndpoint):
                                           release belongs to.
         :pparam string version: the version identifier of the release.
         :pparam string file_id: the ID of the file to delete.
+        :qparam string distribution: the name of the distribution.
         :auth: required
         """
         try:
@@ -151,10 +172,22 @@ class OrganizationReleaseFileDetailsEndpoint(OrganizationReleasesBaseEndpoint):
         if not self.has_release_permission(request, organization, release):
             raise PermissionDenied
 
+        dist_name = request.GET.get('distribution')
+        dist = None
+        if dist_name:
+            try:
+                dist = Distribution.objects.get(
+                    release=release,
+                    name=dist_name,
+                )
+            except Distribution.DoesNotExist:
+                raise ResourceDoesNotExist
+
         try:
             releasefile = ReleaseFile.objects.get(
                 release=release,
                 id=file_id,
+                distribution=dist,
             )
         except ReleaseFile.DoesNotExist:
             raise ResourceDoesNotExist
diff --git a/src/sentry/api/endpoints/organization_release_files.py b/src/sentry/api/endpoints/organization_release_files.py
index 7fc6e3f155..f8209e453b 100644
--- a/src/sentry/api/endpoints/organization_release_files.py
+++ b/src/sentry/api/endpoints/organization_release_files.py
@@ -11,7 +11,7 @@ from sentry.api.content_negotiation import ConditionalContentNegotiation
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
-from sentry.models import File, Release, ReleaseFile
+from sentry.models import File, Release, ReleaseFile, Distribution
 
 ERR_FILE_EXISTS = 'A file matching this name already exists for the given release'
 _filename_re = re.compile(r"[\n\t\r\f\v\\]")
@@ -75,6 +75,7 @@ class OrganizationReleaseFilesEndpoint(OrganizationReleasesBaseEndpoint):
         :pparam string version: the version identifier of the release.
         :param string name: the name (full path) of the file.
         :param file file: the multipart encoded file.
+        :param string distribution: the name of the distribution.
         :param string header: this parameter can be supplied multiple times
                               to attach headers to the file.  Each header
                               is a string in the format ``key:value``.  For
@@ -107,6 +108,11 @@ class OrganizationReleaseFilesEndpoint(OrganizationReleasesBaseEndpoint):
         if _filename_re.search(name):
             return Response({'detail': 'File name must not contain special whitespace characters'}, status=400)
 
+        dist_name = request.DATA.get('distribution')
+        dist = None
+        if dist_name:
+            dist = Distribution.get_or_create(release, dist_name)
+
         headers = {
             'Content-Type': fileobj.content_type,
         }
@@ -134,6 +140,7 @@ class OrganizationReleaseFilesEndpoint(OrganizationReleasesBaseEndpoint):
                     release=release,
                     file=file,
                     name=full_name,
+                    distribution=dist,
                 )
         except IntegrityError:
             file.delete()
diff --git a/src/sentry/api/endpoints/project_release_file_details.py b/src/sentry/api/endpoints/project_release_file_details.py
index 6f424077fa..b7d41d865c 100644
--- a/src/sentry/api/endpoints/project_release_file_details.py
+++ b/src/sentry/api/endpoints/project_release_file_details.py
@@ -104,7 +104,7 @@ class ProjectReleaseFileDetailsEndpoint(ProjectEndpoint):
                                      file of.
         :pparam string version: the version identifier of the release.
         :pparam string file_id: the ID of the file to retrieve.
-        :param string distribution: the name of the distribution.
+        :qparam string distribution: the name of the distribution.
         :auth: required
         """
         try:
@@ -215,7 +215,7 @@ class ProjectReleaseFileDetailsEndpoint(ProjectEndpoint):
                                      file of.
         :pparam string version: the version identifier of the release.
         :pparam string file_id: the ID of the file to delete.
-        :param string distribution: the name of the distribution.
+        :qparam string distribution: the name of the distribution.
         :auth: required
         """
         try:
