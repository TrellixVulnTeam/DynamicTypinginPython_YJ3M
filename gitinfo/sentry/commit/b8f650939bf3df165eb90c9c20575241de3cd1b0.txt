commit b8f650939bf3df165eb90c9c20575241de3cd1b0
Author: Katie Byers <katie.byers@sentry.io>
Date:   Tue Dec 3 15:47:01 2019 -0800

    ref(models): Rename `LatestRelease` to better reflect its purpose (#15864)
    
    Per convos w Cramer, since this model isn't actually used anywhere*, it's a candidate for deletion. In the meantime, this PR clarifies its purpose and how it's used, so that no one else will need to spend the all the time both Matt and I spent trying to figure it out.
    
    *not used = we write to it but never read from it (links in the PR description)

diff --git a/src/sentry/api/endpoints/organization_member_unreleased_commits.py b/src/sentry/api/endpoints/organization_member_unreleased_commits.py
index 4424c813f9..584dc4741a 100644
--- a/src/sentry/api/endpoints/organization_member_unreleased_commits.py
+++ b/src/sentry/api/endpoints/organization_member_unreleased_commits.py
@@ -9,7 +9,7 @@ from sentry.api.bases import OrganizationMemberEndpoint
 from sentry.api.serializers import serialize
 from sentry.models import Commit, Repository, UserEmail
 
-# TODO(dcramer): once LatestRelease is backfilled, change this query to use the new
+# TODO(dcramer): once LatestRepoReleaseEnvironment is backfilled, change this query to use the new
 # schema [performance]
 query = """
 select c1.*
diff --git a/src/sentry/migrations/0021_auto_20191202_1716.py b/src/sentry/migrations/0021_auto_20191202_1716.py
new file mode 100644
index 0000000000..17c29246cc
--- /dev/null
+++ b/src/sentry/migrations/0021_auto_20191202_1716.py
@@ -0,0 +1,33 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.9.13 on 2019-12-02 17:16
+from __future__ import unicode_literals
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Adding indexes to large tables. These indexes should be created concurrently,
+    #   unfortunately we can't run migrations outside of a transaction until Django
+    #   1.10. So until then these should be run manually.
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+
+    dependencies = [
+        ('sentry', '0020_auto_20191125_1420'),
+    ]
+
+    operations = [
+        migrations.RenameModel(
+            old_name='LatestRelease',
+            new_name='LatestRepoReleaseEnvironment',
+        ),
+    ]
diff --git a/src/sentry/models/latestrelease.py b/src/sentry/models/latestreporeleaseenvironment.py
similarity index 60%
rename from src/sentry/models/latestrelease.py
rename to src/sentry/models/latestreporeleaseenvironment.py
index e9f47f14d8..72fe3a7e2e 100644
--- a/src/sentry/models/latestrelease.py
+++ b/src/sentry/models/latestreporeleaseenvironment.py
@@ -3,9 +3,10 @@ from __future__ import absolute_import, print_function
 from sentry.db.models import BoundedBigIntegerField, Model, sane_repr
 
 
-class LatestRelease(Model):
+class LatestRepoReleaseEnvironment(Model):
     """
-    Tracks the latest release of a given repository for a given environment.
+    For each environment, tracks the latest release which is associated with
+    commits in the given repo.
     """
 
     __core__ = False
@@ -14,7 +15,9 @@ class LatestRelease(Model):
     # 0 for 'all environments'
     environment_id = BoundedBigIntegerField()
     release_id = BoundedBigIntegerField()
+    # deploy_id and commit_id are nullable but in practice always have a value
     deploy_id = BoundedBigIntegerField(null=True)
+    # commit_id is the id of the ReleaseHeadCommit associated with the given release
     commit_id = BoundedBigIntegerField(null=True)
 
     class Meta:
@@ -22,4 +25,4 @@ class LatestRelease(Model):
         db_table = "sentry_latestrelease"
         unique_together = (("repository_id", "environment_id"),)
 
-    __repr__ = sane_repr("repository_id", "environment_id")
+    __repr__ = sane_repr("repository_id", "environment_id", "release_id")
diff --git a/src/sentry/tasks/commits.py b/src/sentry/tasks/commits.py
index 45186050c2..9afa9a6ea5 100644
--- a/src/sentry/tasks/commits.py
+++ b/src/sentry/tasks/commits.py
@@ -7,7 +7,14 @@ from django.core.urlresolvers import reverse
 
 from sentry.exceptions import InvalidIdentity, PluginError
 from sentry.integrations.exceptions import IntegrationError
-from sentry.models import Deploy, LatestRelease, Release, ReleaseHeadCommit, Repository, User
+from sentry.models import (
+    Deploy,
+    LatestRepoReleaseEnvironment,
+    Release,
+    ReleaseHeadCommit,
+    Repository,
+    User,
+)
 from sentry.plugins.base import bindings
 from sentry.tasks.base import instrumented_task, retry
 from sentry.utils.email import MessageBuilder
@@ -180,19 +187,24 @@ def fetch_commits(release_id, user_id, refs, prev_release_id=None, **kwargs):
             organization_id=release.organization_id, release=release
         ).values_list("repository_id", "commit")
 
-        # we need to mark LatestRelease, but only if there's not a deploy which has completed
-        # *after* this deploy (given we might process commits out of order)
+        # for each repo, update (or create if this is the first one) our records
+        # of the latest commit-associated release in each env
+        # use deploys as a proxy for ReleaseEnvironment, because they contain
+        # a timestamp in addition to release and env data
         for repository_id, commit_id in repo_queryset:
             for environment_id, (deploy_id, date_finished) in six.iteritems(
                 last_deploy_per_environment
             ):
+                # we need to mark LatestRepoReleaseEnvironment, but only if there's not a
+                # deploy in the given environment which has completed *after*
+                # this deploy (given we might process commits out of order)
                 if not Deploy.objects.filter(
-                    id__in=LatestRelease.objects.filter(
+                    id__in=LatestRepoReleaseEnvironment.objects.filter(
                         repository_id=repository_id, environment_id=environment_id
                     ).values("deploy_id"),
                     date_finished__gt=date_finished,
                 ).exists():
-                    LatestRelease.objects.create_or_update(
+                    LatestRepoReleaseEnvironment.objects.create_or_update(
                         repository_id=repository_id,
                         environment_id=environment_id,
                         values={
diff --git a/tests/sentry/tasks/test_commits.py b/tests/sentry/tasks/test_commits.py
index 7b37f3c52b..927a9939b2 100644
--- a/tests/sentry/tasks/test_commits.py
+++ b/tests/sentry/tasks/test_commits.py
@@ -9,7 +9,7 @@ from sentry.models import (
     Commit,
     Deploy,
     Integration,
-    LatestRelease,
+    LatestRepoReleaseEnvironment,
     Release,
     ReleaseHeadCommit,
     Repository,
@@ -65,10 +65,12 @@ class FetchCommitsTest(TestCase):
 
         mock_notify_if_ready.assert_called_with(deploy.id, fetch_complete=True)
 
-        latest_release = LatestRelease.objects.get(repository_id=repo.id, environment_id=5)
-        assert latest_release.deploy_id == deploy.id
-        assert latest_release.release_id == release2.id
-        assert latest_release.commit_id == commit_list[0].id
+        latest_repo_release_environment = LatestRepoReleaseEnvironment.objects.get(
+            repository_id=repo.id, environment_id=5
+        )
+        assert latest_repo_release_environment.deploy_id == deploy.id
+        assert latest_repo_release_environment.release_id == release2.id
+        assert latest_repo_release_environment.commit_id == commit_list[0].id
 
     @patch("sentry.tasks.commits.handle_invalid_identity")
     @patch("sentry.plugins.providers.dummy.repository.DummyRepositoryProvider.compare_commits")
